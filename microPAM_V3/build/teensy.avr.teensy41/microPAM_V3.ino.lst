
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\A5394982E70389E0D0C97A4E173256C7/microPAM_V3.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20009ac0 	.word	0x20009ac0
6000142c:	20025c20 	.word	0x20025c20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fdd4 	bl	60001fec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fd72 	bl	60001ffc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 ffa0 	bl	60002490 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f929 	bl	600027b8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fdae 	bl	6000210c <configure_external_ram>
	analog_init();
600015b0:	f001 f8d2 	bl	60002758 <analog_init>
	pwm_init();
600015b4:	f001 f908 	bl	600027c8 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 ff98 	bl	600024ec <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fd18 	bl	60001ff0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f001 f829 	bl	6000261c <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fd11 	bl	60001ff8 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fd0d 	bl	60001ff4 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f905 	bl	600027e8 <____libc_init_array_veneer>
	main();
600015de:	f001 f8ef 	bl	600027c0 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001b318 	.word	0x0001b318
600015f0:	60002a44 	.word	0x60002a44
600015f4:	00000000 	.word	0x00000000
600015f8:	20009ac0 	.word	0x20009ac0
600015fc:	6001dd60 	.word	0x6001dd60
60001600:	20000000 	.word	0x20000000
60001604:	20009800 	.word	0x20009800
60001608:	0000eaf1 	.word	0x0000eaf1
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000d8cd 	.word	0x0000d8cd
6000161c:	20025b84 	.word	0x20025b84
60001620:	0000d8d1 	.word	0x0000d8d1
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	08f0d180 	.word	0x08f0d180
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20025b88 	.word	0x20025b88
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20007c7c 	.word	0x20007c7c
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20007c7c 	.word	0x20007c7c

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20007c7c 	.word	0x20007c7c
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20007c7c 	.word	0x20007c7c

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600017f0:	4b20      	ldr	r3, [pc, #128]	; (60001874 <CrashReportClass::clear()+0x84>)
600017f2:	2000      	movs	r0, #0
{
600017f4:	b430      	push	{r4, r5}
	info->ipsr  = 0;
600017f6:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600017fa:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600017fe:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001802:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
60001806:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000180a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
6000180e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001812:	4919      	ldr	r1, [pc, #100]	; (60001878 <CrashReportClass::clear()+0x88>)
60001814:	4a19      	ldr	r2, [pc, #100]	; (6000187c <CrashReportClass::clear()+0x8c>)
60001816:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000181a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001822:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001826:	4b16      	ldr	r3, [pc, #88]	; (60001880 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001828:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000182a:	4c16      	ldr	r4, [pc, #88]	; (60001884 <CrashReportClass::clear()+0x94>)
6000182c:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000182e:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001830:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
60001834:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
60001836:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001838:	4b13      	ldr	r3, [pc, #76]	; (60001888 <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000183a:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
6000183e:	4618      	mov	r0, r3
60001840:	3302      	adds	r3, #2
60001842:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
60001844:	42a3      	cmp	r3, r4
			a += *p++;
60001846:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
6000184a:	4411      	add	r1, r2
		while (len > 0) {
6000184c:	d1f7      	bne.n	6000183e <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
6000184e:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001850:	4b0c      	ldr	r3, [pc, #48]	; (60001884 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
60001852:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
60001856:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
6000185a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
6000185e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001862:	4a09      	ldr	r2, [pc, #36]	; (60001888 <CrashReportClass::clear()+0x98>)
60001864:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
60001868:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000186c:	f3bf 8f6f 	isb	sy
}
60001870:	bc30      	pop	{r4, r5}
60001872:	4770      	bx	lr
60001874:	2027ff00 	.word	0x2027ff00
60001878:	2027ff80 	.word	0x2027ff80
6000187c:	2027ffa0 	.word	0x2027ffa0
60001880:	400f8000 	.word	0x400f8000
60001884:	2027f000 	.word	0x2027f000
60001888:	2027ffc0 	.word	0x2027ffc0

6000188c <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
6000188c:	4bb2      	ldr	r3, [pc, #712]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
6000188e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001892:	2a0b      	cmp	r2, #11
{
60001894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001898:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000189a:	d11b      	bne.n	600018d4 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
6000189c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
600018a0:	49ae      	ldr	r1, [pc, #696]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018a2:	4baf      	ldr	r3, [pc, #700]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
600018a4:	4eaf      	ldr	r6, [pc, #700]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
600018a6:	f101 0c04 	add.w	ip, r1, #4
600018aa:	4050      	eors	r0, r2
600018ac:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018ae:	f000 0201 	and.w	r2, r0, #1
600018b2:	3c01      	subs	r4, #1
600018b4:	fb03 f202 	mul.w	r2, r3, r2
600018b8:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
600018bc:	d1f7      	bne.n	600018ae <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
600018be:	45b4      	cmp	ip, r6
600018c0:	d002      	beq.n	600018c8 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
600018c2:	684a      	ldr	r2, [r1, #4]
600018c4:	4661      	mov	r1, ip
600018c6:	e7ee      	b.n	600018a6 <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
600018c8:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>
600018cc:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
600018d0:	4298      	cmp	r0, r3
600018d2:	d079      	beq.n	600019c8 <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600018d4:	682b      	ldr	r3, [r5, #0]
600018d6:	2217      	movs	r2, #23
600018d8:	49a3      	ldr	r1, [pc, #652]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x2dc>)
600018da:	4628      	mov	r0, r5
600018dc:	685b      	ldr	r3, [r3, #4]
600018de:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600018e0:	4628      	mov	r0, r5
600018e2:	f000 ff75 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e6:	682b      	ldr	r3, [r5, #0]
600018e8:	2248      	movs	r2, #72	; 0x48
600018ea:	49a0      	ldr	r1, [pc, #640]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x2e0>)
600018ec:	685b      	ldr	r3, [r3, #4]
600018ee:	4628      	mov	r0, r5
600018f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018f2:	4628      	mov	r0, r5
600018f4:	f000 ff6c 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018f8:	682b      	ldr	r3, [r5, #0]
600018fa:	2249      	movs	r2, #73	; 0x49
600018fc:	499c      	ldr	r1, [pc, #624]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x2e4>)
600018fe:	685b      	ldr	r3, [r3, #4]
60001900:	4628      	mov	r0, r5
60001902:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001904:	4628      	mov	r0, r5
60001906:	f000 ff63 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2224      	movs	r2, #36	; 0x24
6000190e:	4999      	ldr	r1, [pc, #612]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001916:	4628      	mov	r0, r5
60001918:	f000 ff5a 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000191c:	682b      	ldr	r3, [r5, #0]
6000191e:	2247      	movs	r2, #71	; 0x47
60001920:	4995      	ldr	r1, [pc, #596]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001922:	685b      	ldr	r3, [r3, #4]
60001924:	4628      	mov	r0, r5
60001926:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001928:	4628      	mov	r0, r5
6000192a:	f000 ff51 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192e:	682b      	ldr	r3, [r5, #0]
60001930:	223f      	movs	r2, #63	; 0x3f
60001932:	4992      	ldr	r1, [pc, #584]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x2f0>)
60001934:	685b      	ldr	r3, [r3, #4]
60001936:	4628      	mov	r0, r5
60001938:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000193a:	4628      	mov	r0, r5
6000193c:	f000 ff48 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001940:	4b8f      	ldr	r3, [pc, #572]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001942:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001944:	07a2      	lsls	r2, r4, #30
60001946:	d50d      	bpl.n	60001964 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
60001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
6000194a:	4b8e      	ldr	r3, [pc, #568]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000194c:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
6000194e:	682b      	ldr	r3, [r5, #0]
60001950:	f000 8174 	beq.w	60001c3c <CrashReportClass::printTo(Print&) const+0x3b0>
60001954:	2240      	movs	r2, #64	; 0x40
60001956:	498c      	ldr	r1, [pc, #560]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x2fc>)
60001958:	685b      	ldr	r3, [r3, #4]
6000195a:	4628      	mov	r0, r5
6000195c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000195e:	4628      	mov	r0, r5
60001960:	f000 ff36 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001964:	0767      	lsls	r7, r4, #29
60001966:	f100 815f 	bmi.w	60001c28 <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
6000196a:	0726      	lsls	r6, r4, #28
6000196c:	f100 8152 	bmi.w	60001c14 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001970:	06e0      	lsls	r0, r4, #27
60001972:	f100 8145 	bmi.w	60001c00 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001976:	06a1      	lsls	r1, r4, #26
60001978:	f100 8138 	bmi.w	60001bec <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000197c:	0662      	lsls	r2, r4, #25
6000197e:	f100 812b 	bmi.w	60001bd8 <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001982:	0623      	lsls	r3, r4, #24
60001984:	f100 80dd 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001988:	f414 7480 	ands.w	r4, r4, #256	; 0x100
6000198c:	f040 80ad 	bne.w	60001aea <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001990:	4b71      	ldr	r3, [pc, #452]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001992:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
60001996:	b196      	cbz	r6, 600019be <CrashReportClass::printTo(Print&) const+0x132>
60001998:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
6000199c:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
6000199e:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
600019a0:	487a      	ldr	r0, [pc, #488]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
600019a2:	4619      	mov	r1, r3
600019a4:	3302      	adds	r3, #2
600019a6:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
600019a8:	4283      	cmp	r3, r0
			a += *p++;
600019aa:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
600019ae:	4414      	add	r4, r2
		while (len > 0) {
600019b0:	d1f7      	bne.n	600019a2 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
600019b2:	b293      	uxth	r3, r2
		return a | (b << 16);
600019b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
600019b8:	429f      	cmp	r7, r3
600019ba:	f000 817c 	beq.w	60001cb6 <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
600019be:	f7ff ff17 	bl	600017f0 <CrashReportClass::clear()>
}
600019c2:	2001      	movs	r0, #1
600019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
600019c8:	682b      	ldr	r3, [r5, #0]
600019ca:	220c      	movs	r2, #12
600019cc:	4970      	ldr	r1, [pc, #448]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x304>)
600019ce:	4628      	mov	r0, r5
600019d0:	685b      	ldr	r3, [r3, #4]
600019d2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019d4:	4628      	mov	r0, r5
600019d6:	f000 fefb 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019da:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600019dc:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600019e0:	4628      	mov	r0, r5
    info->time /= 60;
600019e2:	4b6c      	ldr	r3, [pc, #432]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x308>)
600019e4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600019e8:	fba3 2709 	umull	r2, r7, r3, r9
600019ec:	496a      	ldr	r1, [pc, #424]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x30c>)
600019ee:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600019f0:	fba3 2307 	umull	r2, r3, r3, r7
600019f4:	2226      	movs	r2, #38	; 0x26
600019f6:	095e      	lsrs	r6, r3, #5
600019f8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600019fc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600019fe:	4967      	ldr	r1, [pc, #412]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a00:	220a      	movs	r2, #10
60001a02:	4628      	mov	r0, r5
60001a04:	fba1 3106 	umull	r3, r1, r1, r6
60001a08:	4623      	mov	r3, r4
60001a0a:	0909      	lsrs	r1, r1, #4
60001a0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001a10:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001a14:	f000 fee4 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a18:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001a1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001a1e:	2201      	movs	r2, #1
60001a20:	685b      	ldr	r3, [r3, #4]
60001a22:	4628      	mov	r0, r5
60001a24:	495e      	ldr	r1, [pc, #376]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a26:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a28:	4623      	mov	r3, r4
60001a2a:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001a2e:	220a      	movs	r2, #10
60001a30:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001a32:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001a36:	f000 fed3 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3a:	682b      	ldr	r3, [r5, #0]
60001a3c:	2201      	movs	r2, #1
60001a3e:	4958      	ldr	r1, [pc, #352]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a40:	685b      	ldr	r3, [r3, #4]
60001a42:	4628      	mov	r0, r5
60001a44:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a46:	4623      	mov	r3, r4
60001a48:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001a4c:	220a      	movs	r2, #10
60001a4e:	4628      	mov	r0, r5
60001a50:	f000 fec6 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001a54:	4628      	mov	r0, r5
60001a56:	f000 febb 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a5a:	682b      	ldr	r3, [r5, #0]
60001a5c:	2224      	movs	r2, #36	; 0x24
60001a5e:	4951      	ldr	r1, [pc, #324]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x318>)
60001a60:	685b      	ldr	r3, [r3, #4]
60001a62:	4628      	mov	r0, r5
60001a64:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001a66:	4623      	mov	r3, r4
60001a68:	2210      	movs	r2, #16
60001a6a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a6e:	4628      	mov	r0, r5
60001a70:	f000 feb6 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a74:	4628      	mov	r0, r5
60001a76:	f000 feab 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a7a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a7e:	2e00      	cmp	r6, #0
60001a80:	f040 80df 	bne.w	60001c42 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001a84:	4e34      	ldr	r6, [pc, #208]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001a86:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a8a:	2c00      	cmp	r4, #0
60001a8c:	f040 80fa 	bne.w	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a90:	682b      	ldr	r3, [r5, #0]
60001a92:	2222      	movs	r2, #34	; 0x22
60001a94:	4944      	ldr	r1, [pc, #272]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x31c>)
60001a96:	4628      	mov	r0, r5
60001a98:	685b      	ldr	r3, [r3, #4]
60001a9a:	4798      	blx	r3
    p.print(info->temp);
60001a9c:	4b2e      	ldr	r3, [pc, #184]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a9e:	2102      	movs	r1, #2
60001aa0:	4628      	mov	r0, r5
60001aa2:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001aa6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001aaa:	f000 fea9 	bl	60002800 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	682b      	ldr	r3, [r5, #0]
60001ab0:	2205      	movs	r2, #5
60001ab2:	493e      	ldr	r1, [pc, #248]	; (60001bac <CrashReportClass::printTo(Print&) const+0x320>)
60001ab4:	685b      	ldr	r3, [r3, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	4798      	blx	r3
60001aba:	682b      	ldr	r3, [r5, #0]
60001abc:	221d      	movs	r2, #29
60001abe:	493c      	ldr	r1, [pc, #240]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x324>)
60001ac0:	685b      	ldr	r3, [r3, #4]
60001ac2:	4628      	mov	r0, r5
60001ac4:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001ac6:	4a3b      	ldr	r2, [pc, #236]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x328>)
60001ac8:	483b      	ldr	r0, [pc, #236]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001aca:	2300      	movs	r3, #0
60001acc:	6811      	ldr	r1, [r2, #0]
60001ace:	220a      	movs	r2, #10
60001ad0:	fba0 0101 	umull	r0, r1, r0, r1
60001ad4:	4628      	mov	r0, r5
60001ad6:	0c89      	lsrs	r1, r1, #18
60001ad8:	f000 fe82 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001adc:	682b      	ldr	r3, [r5, #0]
60001ade:	2204      	movs	r2, #4
60001ae0:	4936      	ldr	r1, [pc, #216]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x330>)
60001ae2:	685b      	ldr	r3, [r3, #4]
60001ae4:	4628      	mov	r0, r5
60001ae6:	4798      	blx	r3
60001ae8:	e72a      	b.n	60001940 <CrashReportClass::printTo(Print&) const+0xb4>
60001aea:	682b      	ldr	r3, [r5, #0]
60001aec:	2229      	movs	r2, #41	; 0x29
60001aee:	4934      	ldr	r1, [pc, #208]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x334>)
60001af0:	4628      	mov	r0, r5
60001af2:	685b      	ldr	r3, [r3, #4]
60001af4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001af6:	4628      	mov	r0, r5
60001af8:	f000 fe6a 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001afc:	4920      	ldr	r1, [pc, #128]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001afe:	6828      	ldr	r0, [r5, #0]
60001b00:	2221      	movs	r2, #33	; 0x21
60001b02:	688b      	ldr	r3, [r1, #8]
60001b04:	6844      	ldr	r4, [r0, #4]
60001b06:	4628      	mov	r0, r5
60001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001b0c:	608b      	str	r3, [r1, #8]
60001b0e:	492d      	ldr	r1, [pc, #180]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x338>)
60001b10:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fe5c 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b18:	682b      	ldr	r3, [r5, #0]
60001b1a:	2242      	movs	r2, #66	; 0x42
60001b1c:	492a      	ldr	r1, [pc, #168]	; (60001bc8 <CrashReportClass::printTo(Print&) const+0x33c>)
60001b1e:	685b      	ldr	r3, [r3, #4]
60001b20:	4628      	mov	r0, r5
60001b22:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b24:	4628      	mov	r0, r5
60001b26:	f000 fe53 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b2a:	4a28      	ldr	r2, [pc, #160]	; (60001bcc <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001b2c:	4b28      	ldr	r3, [pc, #160]	; (60001bd0 <CrashReportClass::printTo(Print&) const+0x344>)
60001b2e:	2107      	movs	r1, #7
60001b30:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b32:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001b38:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001b3a:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001b3e:	bf30      	wfi
60001b40:	e7fd      	b.n	60001b3e <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2221      	movs	r2, #33	; 0x21
60001b46:	4923      	ldr	r1, [pc, #140]	; (60001bd4 <CrashReportClass::printTo(Print&) const+0x348>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fe3e 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001b54:	e718      	b.n	60001988 <CrashReportClass::printTo(Print&) const+0xfc>
60001b56:	bf00      	nop
60001b58:	2027ff00 	.word	0x2027ff00
60001b5c:	2027ff80 	.word	0x2027ff80
60001b60:	edb88320 	.word	0xedb88320
60001b64:	2027ffa8 	.word	0x2027ffa8
60001b68:	20008614 	.word	0x20008614
60001b6c:	2000862c 	.word	0x2000862c
60001b70:	20008678 	.word	0x20008678
60001b74:	200086c4 	.word	0x200086c4
60001b78:	200086ec 	.word	0x200086ec
60001b7c:	20008734 	.word	0x20008734
60001b80:	400f8000 	.word	0x400f8000
60001b84:	0bad00f1 	.word	0x0bad00f1
60001b88:	200087c0 	.word	0x200087c0
60001b8c:	2027ffdc 	.word	0x2027ffdc
60001b90:	200080fc 	.word	0x200080fc
60001b94:	88888889 	.word	0x88888889
60001b98:	2000810c 	.word	0x2000810c
60001b9c:	aaaaaaab 	.word	0xaaaaaaab
60001ba0:	20008134 	.word	0x20008134
60001ba4:	20008138 	.word	0x20008138
60001ba8:	200085c0 	.word	0x200085c0
60001bac:	200085e4 	.word	0x200085e4
60001bb0:	200085ec 	.word	0x200085ec
60001bb4:	20008bb0 	.word	0x20008bb0
60001bb8:	431bde83 	.word	0x431bde83
60001bbc:	2000860c 	.word	0x2000860c
60001bc0:	200088f4 	.word	0x200088f4
60001bc4:	20008920 	.word	0x20008920
60001bc8:	20008944 	.word	0x20008944
60001bcc:	400d4000 	.word	0x400d4000
60001bd0:	400ac000 	.word	0x400ac000
60001bd4:	200088d0 	.word	0x200088d0
							  return write((const uint8_t *)str, strlen(str)); }
60001bd8:	682b      	ldr	r3, [r5, #0]
60001bda:	2221      	movs	r2, #33	; 0x21
60001bdc:	499c      	ldr	r1, [pc, #624]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001bde:	4628      	mov	r0, r5
60001be0:	685b      	ldr	r3, [r3, #4]
60001be2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be4:	4628      	mov	r0, r5
60001be6:	f000 fdf3 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001bea:	e6ca      	b.n	60001982 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001bec:	682b      	ldr	r3, [r5, #0]
60001bee:	2229      	movs	r2, #41	; 0x29
60001bf0:	4998      	ldr	r1, [pc, #608]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001bf2:	4628      	mov	r0, r5
60001bf4:	685b      	ldr	r3, [r3, #4]
60001bf6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bf8:	4628      	mov	r0, r5
60001bfa:	f000 fde9 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001bfe:	e6bd      	b.n	6000197c <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c00:	682b      	ldr	r3, [r5, #0]
60001c02:	2226      	movs	r2, #38	; 0x26
60001c04:	4994      	ldr	r1, [pc, #592]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x5cc>)
60001c06:	4628      	mov	r0, r5
60001c08:	685b      	ldr	r3, [r3, #4]
60001c0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c0c:	4628      	mov	r0, r5
60001c0e:	f000 fddf 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001c12:	e6b0      	b.n	60001976 <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001c14:	682b      	ldr	r3, [r5, #0]
60001c16:	222a      	movs	r2, #42	; 0x2a
60001c18:	4990      	ldr	r1, [pc, #576]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x5d0>)
60001c1a:	4628      	mov	r0, r5
60001c1c:	685b      	ldr	r3, [r3, #4]
60001c1e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c20:	4628      	mov	r0, r5
60001c22:	f000 fdd5 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001c26:	e6a3      	b.n	60001970 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c28:	682b      	ldr	r3, [r5, #0]
60001c2a:	2227      	movs	r2, #39	; 0x27
60001c2c:	498c      	ldr	r1, [pc, #560]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001c2e:	4628      	mov	r0, r5
60001c30:	685b      	ldr	r3, [r3, #4]
60001c32:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c34:	4628      	mov	r0, r5
60001c36:	f000 fdcb 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001c3a:	e696      	b.n	6000196a <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001c3c:	2248      	movs	r2, #72	; 0x48
60001c3e:	4989      	ldr	r1, [pc, #548]	; (60001e64 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001c40:	e68a      	b.n	60001958 <CrashReportClass::printTo(Print&) const+0xcc>
60001c42:	682b      	ldr	r3, [r5, #0]
60001c44:	2208      	movs	r2, #8
60001c46:	4988      	ldr	r1, [pc, #544]	; (60001e68 <CrashReportClass::printTo(Print&) const+0x5dc>)
60001c48:	4628      	mov	r0, r5
60001c4a:	685b      	ldr	r3, [r3, #4]
60001c4c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c4e:	4623      	mov	r3, r4
60001c50:	2210      	movs	r2, #16
60001c52:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001c56:	4628      	mov	r0, r5
60001c58:	f000 fdc2 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c5c:	4628      	mov	r0, r5
60001c5e:	f000 fdb7 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001c62:	07f4      	lsls	r4, r6, #31
60001c64:	d469      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001c66:	07b0      	lsls	r0, r6, #30
60001c68:	f100 8153 	bmi.w	60001f12 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001c6c:	0731      	lsls	r1, r6, #28
60001c6e:	f100 8144 	bmi.w	60001efa <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001c72:	06f2      	lsls	r2, r6, #27
60001c74:	f100 815d 	bmi.w	60001f32 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001c78:	06b3      	lsls	r3, r6, #26
60001c7a:	d567      	bpl.n	60001d4c <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c7c:	682b      	ldr	r3, [r5, #0]
60001c7e:	222a      	movs	r2, #42	; 0x2a
60001c80:	497a      	ldr	r1, [pc, #488]	; (60001e6c <CrashReportClass::printTo(Print&) const+0x5e0>)
60001c82:	e05d      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001c84:	682b      	ldr	r3, [r5, #0]
60001c86:	2208      	movs	r2, #8
60001c88:	4979      	ldr	r1, [pc, #484]	; (60001e70 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001c8a:	4628      	mov	r0, r5
60001c8c:	685b      	ldr	r3, [r3, #4]
60001c8e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c90:	2300      	movs	r3, #0
60001c92:	2210      	movs	r2, #16
60001c94:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001c98:	4628      	mov	r0, r5
60001c9a:	f000 fda1 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c9e:	4628      	mov	r0, r5
60001ca0:	f000 fd96 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001ca4:	07a0      	lsls	r0, r4, #30
60001ca6:	d467      	bmi.n	60001d78 <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001ca8:	0061      	lsls	r1, r4, #1
60001caa:	f57f aef1 	bpl.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001cae:	682b      	ldr	r3, [r5, #0]
60001cb0:	221b      	movs	r2, #27
60001cb2:	4970      	ldr	r1, [pc, #448]	; (60001e74 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001cb4:	e063      	b.n	60001d7e <CrashReportClass::printTo(Print&) const+0x4f2>
60001cb6:	2401      	movs	r4, #1
60001cb8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001eb0 <CrashReportClass::printTo(Print&) const+0x624>
60001cbc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001eb4 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001cc0:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001e98 <CrashReportClass::printTo(Print&) const+0x60c>
60001cc4:	e005      	b.n	60001cd2 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001cc6:	3401      	adds	r4, #1
60001cc8:	2c07      	cmp	r4, #7
60001cca:	f43f ae78 	beq.w	600019be <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001cce:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001cd2:	1e63      	subs	r3, r4, #1
60001cd4:	2701      	movs	r7, #1
60001cd6:	fa07 f203 	lsl.w	r2, r7, r3
60001cda:	4232      	tst	r2, r6
60001cdc:	d0f3      	beq.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
60001cde:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	220e      	movs	r2, #14
60001ce6:	4651      	mov	r1, sl
60001ce8:	685b      	ldr	r3, [r3, #4]
60001cea:	4628      	mov	r0, r5
60001cec:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001cee:	4621      	mov	r1, r4
60001cf0:	4628      	mov	r0, r5
60001cf2:	f000 fd89 	bl	60002808 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cf6:	682b      	ldr	r3, [r5, #0]
60001cf8:	2205      	movs	r2, #5
60001cfa:	495f      	ldr	r1, [pc, #380]	; (60001e78 <CrashReportClass::printTo(Print&) const+0x5ec>)
60001cfc:	685b      	ldr	r3, [r3, #4]
60001cfe:	4628      	mov	r0, r5
60001d00:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001d02:	6871      	ldr	r1, [r6, #4]
60001d04:	2300      	movs	r3, #0
60001d06:	220a      	movs	r2, #10
60001d08:	4628      	mov	r0, r5
60001d0a:	f000 fd69 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d0e:	682b      	ldr	r3, [r5, #0]
60001d10:	2204      	movs	r2, #4
60001d12:	495a      	ldr	r1, [pc, #360]	; (60001e7c <CrashReportClass::printTo(Print&) const+0x5f0>)
60001d14:	685b      	ldr	r3, [r3, #4]
60001d16:	4628      	mov	r0, r5
60001d18:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d1a:	6871      	ldr	r1, [r6, #4]
60001d1c:	2300      	movs	r3, #0
60001d1e:	2210      	movs	r2, #16
60001d20:	4628      	mov	r0, r5
60001d22:	f000 fd5d 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d26:	682b      	ldr	r3, [r5, #0]
60001d28:	463a      	mov	r2, r7
60001d2a:	4955      	ldr	r1, [pc, #340]	; (60001e80 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001d2c:	685b      	ldr	r3, [r3, #4]
60001d2e:	4628      	mov	r0, r5
60001d30:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d32:	4628      	mov	r0, r5
60001d34:	f000 fd4c 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001d38:	e7c5      	b.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2228      	movs	r2, #40	; 0x28
60001d3e:	4951      	ldr	r1, [pc, #324]	; (60001e84 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001d40:	685b      	ldr	r3, [r3, #4]
60001d42:	4628      	mov	r0, r5
60001d44:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d46:	4628      	mov	r0, r5
60001d48:	f000 fd42 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001d4c:	0637      	lsls	r7, r6, #24
60001d4e:	d43c      	bmi.n	60001dca <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001d50:	05f4      	lsls	r4, r6, #23
60001d52:	d41b      	bmi.n	60001d8c <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001d54:	05b0      	lsls	r0, r6, #22
60001d56:	f100 80d8 	bmi.w	60001f0a <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001d5a:	0571      	lsls	r1, r6, #21
60001d5c:	f100 80d1 	bmi.w	60001f02 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001d60:	0532      	lsls	r2, r6, #20
60001d62:	f100 80e2 	bmi.w	60001f2a <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001d66:	04f3      	lsls	r3, r6, #19
60001d68:	f100 80db 	bmi.w	60001f22 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001d6c:	04b7      	lsls	r7, r6, #18
60001d6e:	d516      	bpl.n	60001d9e <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	2231      	movs	r2, #49	; 0x31
60001d74:	4944      	ldr	r1, [pc, #272]	; (60001e88 <CrashReportClass::printTo(Print&) const+0x5fc>)
60001d76:	e00c      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001d78:	682b      	ldr	r3, [r5, #0]
60001d7a:	2226      	movs	r2, #38	; 0x26
60001d7c:	4943      	ldr	r1, [pc, #268]	; (60001e8c <CrashReportClass::printTo(Print&) const+0x600>)
60001d7e:	4628      	mov	r0, r5
60001d80:	685b      	ldr	r3, [r3, #4]
60001d82:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d84:	4628      	mov	r0, r5
60001d86:	f000 fd23 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001d8a:	e681      	b.n	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001d8c:	682b      	ldr	r3, [r5, #0]
60001d8e:	2220      	movs	r2, #32
60001d90:	493f      	ldr	r1, [pc, #252]	; (60001e90 <CrashReportClass::printTo(Print&) const+0x604>)
60001d92:	685b      	ldr	r3, [r3, #4]
60001d94:	4628      	mov	r0, r5
60001d96:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d98:	4628      	mov	r0, r5
60001d9a:	f000 fd19 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001d9e:	0434      	lsls	r4, r6, #16
60001da0:	d440      	bmi.n	60001e24 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001da2:	03f0      	lsls	r0, r6, #15
60001da4:	d42e      	bmi.n	60001e04 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001da6:	03b1      	lsls	r1, r6, #14
60001da8:	f100 80b7 	bmi.w	60001f1a <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001dac:	0372      	lsls	r2, r6, #13
60001dae:	d44b      	bmi.n	60001e48 <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001db0:	0333      	lsls	r3, r6, #12
60001db2:	f100 80c6 	bmi.w	60001f42 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001db6:	01f7      	lsls	r7, r6, #7
60001db8:	f100 80bf 	bmi.w	60001f3a <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001dbc:	01b4      	lsls	r4, r6, #6
60001dbe:	f57f ae61 	bpl.w	60001a84 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001dc2:	682b      	ldr	r3, [r5, #0]
60001dc4:	221b      	movs	r2, #27
60001dc6:	4933      	ldr	r1, [pc, #204]	; (60001e94 <CrashReportClass::printTo(Print&) const+0x608>)
60001dc8:	e01f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001dca:	682b      	ldr	r3, [r5, #0]
60001dcc:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001dce:	4c32      	ldr	r4, [pc, #200]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001dd0:	4628      	mov	r0, r5
60001dd2:	4932      	ldr	r1, [pc, #200]	; (60001e9c <CrashReportClass::printTo(Print&) const+0x610>)
60001dd4:	685b      	ldr	r3, [r3, #4]
60001dd6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dd8:	2210      	movs	r2, #16
60001dda:	2300      	movs	r3, #0
60001ddc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001de0:	4628      	mov	r0, r5
60001de2:	f000 fcfd 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001de6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001dea:	2a1f      	cmp	r2, #31
60001dec:	d964      	bls.n	60001eb8 <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001dee:	4b2c      	ldr	r3, [pc, #176]	; (60001ea0 <CrashReportClass::printTo(Print&) const+0x614>)
60001df0:	429a      	cmp	r2, r3
60001df2:	d303      	bcc.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001df4:	3320      	adds	r3, #32
60001df6:	429a      	cmp	r2, r3
60001df8:	f0c0 80a7 	bcc.w	60001f4a <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001dfc:	4628      	mov	r0, r5
60001dfe:	f000 fce7 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001e02:	e7a5      	b.n	60001d50 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e04:	682b      	ldr	r3, [r5, #0]
60001e06:	2223      	movs	r2, #35	; 0x23
60001e08:	4926      	ldr	r1, [pc, #152]	; (60001ea4 <CrashReportClass::printTo(Print&) const+0x618>)
60001e0a:	685b      	ldr	r3, [r3, #4]
60001e0c:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001e0e:	4e22      	ldr	r6, [pc, #136]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001e10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e12:	4628      	mov	r0, r5
60001e14:	f000 fcdc 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001e18:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001e1c:	2c00      	cmp	r4, #0
60001e1e:	f43f ae37 	beq.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
60001e22:	e72f      	b.n	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001e24:	682b      	ldr	r3, [r5, #0]
60001e26:	2221      	movs	r2, #33	; 0x21
60001e28:	491f      	ldr	r1, [pc, #124]	; (60001ea8 <CrashReportClass::printTo(Print&) const+0x61c>)
60001e2a:	4628      	mov	r0, r5
60001e2c:	685b      	ldr	r3, [r3, #4]
60001e2e:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001e30:	4919      	ldr	r1, [pc, #100]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e32:	2300      	movs	r3, #0
60001e34:	2210      	movs	r2, #16
60001e36:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001e3a:	4628      	mov	r0, r5
60001e3c:	f000 fcd0 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001e40:	4628      	mov	r0, r5
60001e42:	f000 fcc5 	bl	600027d0 <___ZN5Print7printlnEv_veneer>
60001e46:	e7ac      	b.n	60001da2 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001e48:	682b      	ldr	r3, [r5, #0]
60001e4a:	2228      	movs	r2, #40	; 0x28
60001e4c:	4917      	ldr	r1, [pc, #92]	; (60001eac <CrashReportClass::printTo(Print&) const+0x620>)
60001e4e:	e7dc      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001e50:	200088ac 	.word	0x200088ac
60001e54:	20008880 	.word	0x20008880
60001e58:	20008858 	.word	0x20008858
60001e5c:	2000882c 	.word	0x2000882c
60001e60:	20008804 	.word	0x20008804
60001e64:	20008774 	.word	0x20008774
60001e68:	20008160 	.word	0x20008160
60001e6c:	20008210 	.word	0x20008210
60001e70:	20008570 	.word	0x20008570
60001e74:	200085a4 	.word	0x200085a4
60001e78:	20008998 	.word	0x20008998
60001e7c:	200089a0 	.word	0x200089a0
60001e80:	200086c0 	.word	0x200086c0
60001e84:	2000816c 	.word	0x2000816c
60001e88:	20008434 	.word	0x20008434
60001e8c:	2000857c 	.word	0x2000857c
60001e90:	20008324 	.word	0x20008324
60001e94:	20008554 	.word	0x20008554
60001e98:	2027ff00 	.word	0x2027ff00
60001e9c:	2000823c 	.word	0x2000823c
60001ea0:	20025c20 	.word	0x20025c20
60001ea4:	2000848c 	.word	0x2000848c
60001ea8:	20008468 	.word	0x20008468
60001eac:	200084e4 	.word	0x200084e4
60001eb0:	20008988 	.word	0x20008988
60001eb4:	2027ffc0 	.word	0x2027ffc0
60001eb8:	682b      	ldr	r3, [r5, #0]
60001eba:	221e      	movs	r2, #30
60001ebc:	4926      	ldr	r1, [pc, #152]	; (60001f58 <CrashReportClass::printTo(Print&) const+0x6cc>)
60001ebe:	4628      	mov	r0, r5
60001ec0:	685b      	ldr	r3, [r3, #4]
60001ec2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ec4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ec8:	2300      	movs	r3, #0
60001eca:	2210      	movs	r2, #16
60001ecc:	4628      	mov	r0, r5
60001ece:	f000 fc87 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ed2:	682b      	ldr	r3, [r5, #0]
60001ed4:	223e      	movs	r2, #62	; 0x3e
60001ed6:	4921      	ldr	r1, [pc, #132]	; (60001f5c <CrashReportClass::printTo(Print&) const+0x6d0>)
60001ed8:	685b      	ldr	r3, [r3, #4]
60001eda:	4628      	mov	r0, r5
60001edc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ede:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ee2:	2300      	movs	r3, #0
60001ee4:	2210      	movs	r2, #16
60001ee6:	4628      	mov	r0, r5
60001ee8:	f000 fc7a 	bl	600027e0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001eec:	682b      	ldr	r3, [r5, #0]
60001eee:	221d      	movs	r2, #29
60001ef0:	491b      	ldr	r1, [pc, #108]	; (60001f60 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001ef2:	685b      	ldr	r3, [r3, #4]
60001ef4:	4628      	mov	r0, r5
60001ef6:	4798      	blx	r3
60001ef8:	e780      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001efa:	682b      	ldr	r3, [r5, #0]
60001efc:	2229      	movs	r2, #41	; 0x29
60001efe:	4919      	ldr	r1, [pc, #100]	; (60001f64 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001f00:	e71e      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f02:	682b      	ldr	r3, [r5, #0]
60001f04:	2244      	movs	r2, #68	; 0x44
60001f06:	4918      	ldr	r1, [pc, #96]	; (60001f68 <CrashReportClass::printTo(Print&) const+0x6dc>)
60001f08:	e743      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f0a:	682b      	ldr	r3, [r5, #0]
60001f0c:	222c      	movs	r2, #44	; 0x2c
60001f0e:	4917      	ldr	r1, [pc, #92]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x6e0>)
60001f10:	e73f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f12:	682b      	ldr	r3, [r5, #0]
60001f14:	2221      	movs	r2, #33	; 0x21
60001f16:	4916      	ldr	r1, [pc, #88]	; (60001f70 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001f18:	e712      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f1a:	682b      	ldr	r3, [r5, #0]
60001f1c:	2232      	movs	r2, #50	; 0x32
60001f1e:	4915      	ldr	r1, [pc, #84]	; (60001f74 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001f20:	e773      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f22:	682b      	ldr	r3, [r5, #0]
60001f24:	2233      	movs	r2, #51	; 0x33
60001f26:	4914      	ldr	r1, [pc, #80]	; (60001f78 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001f28:	e733      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f2a:	682b      	ldr	r3, [r5, #0]
60001f2c:	223f      	movs	r2, #63	; 0x3f
60001f2e:	4913      	ldr	r1, [pc, #76]	; (60001f7c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001f30:	e72f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f32:	682b      	ldr	r3, [r5, #0]
60001f34:	2225      	movs	r2, #37	; 0x25
60001f36:	4912      	ldr	r1, [pc, #72]	; (60001f80 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001f38:	e702      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f3a:	682b      	ldr	r3, [r5, #0]
60001f3c:	2228      	movs	r2, #40	; 0x28
60001f3e:	4911      	ldr	r1, [pc, #68]	; (60001f84 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001f40:	e763      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f42:	682b      	ldr	r3, [r5, #0]
60001f44:	2216      	movs	r2, #22
60001f46:	4910      	ldr	r1, [pc, #64]	; (60001f88 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001f48:	e75f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f4a:	682b      	ldr	r3, [r5, #0]
60001f4c:	2241      	movs	r2, #65	; 0x41
60001f4e:	490f      	ldr	r1, [pc, #60]	; (60001f8c <CrashReportClass::printTo(Print&) const+0x700>)
60001f50:	4628      	mov	r0, r5
60001f52:	685b      	ldr	r3, [r3, #4]
60001f54:	4798      	blx	r3
60001f56:	e751      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001f58:	20008260 	.word	0x20008260
60001f5c:	20008280 	.word	0x20008280
60001f60:	200082c0 	.word	0x200082c0
60001f64:	200081bc 	.word	0x200081bc
60001f68:	20008378 	.word	0x20008378
60001f6c:	20008348 	.word	0x20008348
60001f70:	20008198 	.word	0x20008198
60001f74:	200084b0 	.word	0x200084b0
60001f78:	20008400 	.word	0x20008400
60001f7c:	200083c0 	.word	0x200083c0
60001f80:	200081e8 	.word	0x200081e8
60001f84:	20008528 	.word	0x20008528
60001f88:	20008510 	.word	0x20008510
60001f8c:	200082e0 	.word	0x200082e0

60001f90 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001f90:	4b12      	ldr	r3, [pc, #72]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001f96:	2b0b      	cmp	r3, #11
60001f98:	d11e      	bne.n	60001fd8 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001f9a:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001f9e:	4810      	ldr	r0, [pc, #64]	; (60001fe0 <CrashReportClass::operator bool()+0x50>)
{
60001fa0:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001fa2:	4d10      	ldr	r5, [pc, #64]	; (60001fe4 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001fa4:	4c10      	ldr	r4, [pc, #64]	; (60001fe8 <CrashReportClass::operator bool()+0x58>)
60001fa6:	e001      	b.n	60001fac <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001fa8:	686b      	ldr	r3, [r5, #4]
60001faa:	4675      	mov	r5, lr
60001fac:	f105 0e04 	add.w	lr, r5, #4
60001fb0:	405a      	eors	r2, r3
60001fb2:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001fb4:	f002 0301 	and.w	r3, r2, #1
60001fb8:	3901      	subs	r1, #1
60001fba:	fb00 f303 	mul.w	r3, r0, r3
60001fbe:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001fc2:	d1f7      	bne.n	60001fb4 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001fc4:	45a6      	cmp	lr, r4
60001fc6:	d1ef      	bne.n	60001fa8 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001fc8:	4b04      	ldr	r3, [pc, #16]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001fca:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001fce:	1a80      	subs	r0, r0, r2
60001fd0:	fab0 f080 	clz	r0, r0
60001fd4:	0940      	lsrs	r0, r0, #5
}
60001fd6:	bd30      	pop	{r4, r5, pc}
	return false;
60001fd8:	2000      	movs	r0, #0
}
60001fda:	4770      	bx	lr
60001fdc:	2027ff00 	.word	0x2027ff00
60001fe0:	edb88320 	.word	0xedb88320
60001fe4:	2027ff80 	.word	0x2027ff80
60001fe8:	2027ffa8 	.word	0x2027ffa8

60001fec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001fec:	4770      	bx	lr
60001fee:	bf00      	nop

60001ff0 <startup_default_middle_hook>:
60001ff0:	4770      	bx	lr
60001ff2:	bf00      	nop

60001ff4 <startup_default_late_hook>:
60001ff4:	4770      	bx	lr
60001ff6:	bf00      	nop

60001ff8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001ff8:	bf00      	nop
60001ffa:	4770      	bx	lr

60001ffc <configure_cache>:
{
60001ffc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001ffe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002002:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002004:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002006:	4831      	ldr	r0, [pc, #196]	; (600020cc <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60002008:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000200c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002010:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002012:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60002016:	482e      	ldr	r0, [pc, #184]	; (600020d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002018:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000201c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000201e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60002022:	482c      	ldr	r0, [pc, #176]	; (600020d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002024:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002028:	4a2b      	ldr	r2, [pc, #172]	; (600020d8 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000202a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000202e:	4c2b      	ldr	r4, [pc, #172]	; (600020dc <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002030:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002034:	482a      	ldr	r0, [pc, #168]	; (600020e0 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002036:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000203a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000203e:	4c29      	ldr	r4, [pc, #164]	; (600020e4 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002040:	4829      	ldr	r0, [pc, #164]	; (600020e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60002042:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002046:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000204a:	4c28      	ldr	r4, [pc, #160]	; (600020ec <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000204c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002050:	4827      	ldr	r0, [pc, #156]	; (600020f0 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60002052:	4a28      	ldr	r2, [pc, #160]	; (600020f4 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60002054:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002058:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000205c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002060:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60002064:	4c24      	ldr	r4, [pc, #144]	; (600020f8 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002066:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002068:	4824      	ldr	r0, [pc, #144]	; (600020fc <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000206a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000206e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60002072:	4a23      	ldr	r2, [pc, #140]	; (60002100 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002074:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002078:	4c22      	ldr	r4, [pc, #136]	; (60002104 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000207a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000207e:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002082:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60002086:	4820      	ldr	r0, [pc, #128]	; (60002108 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60002088:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000208c:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000208e:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60002092:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60002096:	bf00      	nop
	asm("nop");
60002098:	bf00      	nop
	asm("nop");
6000209a:	bf00      	nop
	asm("nop");
6000209c:	bf00      	nop
	asm("nop");
6000209e:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600020a0:	2201      	movs	r2, #1
600020a2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600020a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020aa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600020ae:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600020b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020b6:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020ba:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600020be:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600020c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600020ca:	4770      	bx	lr
600020cc:	1000003f 	.word	0x1000003f
600020d0:	07080025 	.word	0x07080025
600020d4:	00100009 	.word	0x00100009
600020d8:	20025c20 	.word	0x20025c20
600020dc:	00200013 	.word	0x00200013
600020e0:	07020021 	.word	0x07020021
600020e4:	20000014 	.word	0x20000014
600020e8:	13080025 	.word	0x13080025
600020ec:	10000009 	.word	0x10000009
600020f0:	20200016 	.word	0x20200016
600020f4:	130b0027 	.word	0x130b0027
600020f8:	40000017 	.word	0x40000017
600020fc:	60000018 	.word	0x60000018
60002100:	070b002f 	.word	0x070b002f
60002104:	70000019 	.word	0x70000019
60002108:	8000001a 	.word	0x8000001a

6000210c <configure_external_ram>:
{
6000210c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000210e:	4bb8      	ldr	r3, [pc, #736]	; (600023f0 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002110:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002112:	4eb8      	ldr	r6, [pc, #736]	; (600023f4 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002114:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002116:	4fb8      	ldr	r7, [pc, #736]	; (600023f8 <configure_external_ram+0x2ec>)
{
60002118:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000211a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000211e:	49b7      	ldr	r1, [pc, #732]	; (600023fc <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002120:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002124:	4db6      	ldr	r5, [pc, #728]	; (60002400 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002126:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000212a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000212e:	4cb5      	ldr	r4, [pc, #724]	; (60002404 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002130:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002134:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002138:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000213c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002140:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002144:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002148:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000214a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000214c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000214e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60002150:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60002152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000215a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000215e:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002162:	4aa9      	ldr	r2, [pc, #676]	; (60002408 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002164:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002168:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
6000216c:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60002170:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002174:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002178:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000217a:	4ba4      	ldr	r3, [pc, #656]	; (6000240c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000217c:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000217e:	48a4      	ldr	r0, [pc, #656]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002180:	49a4      	ldr	r1, [pc, #656]	; (60002414 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002182:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002184:	4aa4      	ldr	r2, [pc, #656]	; (60002418 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002186:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002188:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
6000218c:	f043 030c 	orr.w	r3, r3, #12
60002190:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002194:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002198:	6803      	ldr	r3, [r0, #0]
6000219a:	f043 0302 	orr.w	r3, r3, #2
6000219e:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021a0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600021a4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021aa:	4b9c      	ldr	r3, [pc, #624]	; (6000241c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021ac:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600021ae:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b0:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021b2:	4c9b      	ldr	r4, [pc, #620]	; (60002420 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021b6:	4a9b      	ldr	r2, [pc, #620]	; (60002424 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600021b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021bc:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600021be:	68c3      	ldr	r3, [r0, #12]
600021c0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600021c4:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021c6:	6a03      	ldr	r3, [r0, #32]
600021c8:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021ca:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021cc:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021ce:	6a03      	ldr	r3, [r0, #32]
600021d0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021d2:	4a95      	ldr	r2, [pc, #596]	; (60002428 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021d4:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600021d6:	4c95      	ldr	r4, [pc, #596]	; (6000242c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021d8:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021da:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600021dc:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600021de:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600021e0:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600021e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021e8:	f043 0301 	orr.w	r3, r3, #1
600021ec:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f0:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600021f4:	498e      	ldr	r1, [pc, #568]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021fa:	f043 0301 	orr.w	r3, r3, #1
600021fe:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002202:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002206:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002208:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000220a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000220c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002210:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002212:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002214:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002216:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000221a:	6803      	ldr	r3, [r0, #0]
6000221c:	f023 0302 	bic.w	r3, r3, #2
60002220:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002222:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002224:	4b83      	ldr	r3, [pc, #524]	; (60002434 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002226:	4984      	ldr	r1, [pc, #528]	; (60002438 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002228:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000222a:	f843 2b04 	str.w	r2, [r3], #4
6000222e:	428b      	cmp	r3, r1
60002230:	d1fb      	bne.n	6000222a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002232:	4a77      	ldr	r2, [pc, #476]	; (60002410 <configure_external_ram+0x304>)
60002234:	6813      	ldr	r3, [r2, #0]
60002236:	f043 0301 	orr.w	r3, r3, #1
6000223a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000223c:	6813      	ldr	r3, [r2, #0]
6000223e:	f013 0301 	ands.w	r3, r3, #1
60002242:	d1fb      	bne.n	6000223c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002244:	487a      	ldr	r0, [pc, #488]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002246:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002248:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000224c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000224e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002252:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002254:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002258:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000225c:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002260:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002264:	4975      	ldr	r1, [pc, #468]	; (6000243c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002266:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000226a:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000226e:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002272:	4873      	ldr	r0, [pc, #460]	; (60002440 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002274:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002278:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000227c:	4c71      	ldr	r4, [pc, #452]	; (60002444 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000227e:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002282:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002286:	4970      	ldr	r1, [pc, #448]	; (60002448 <configure_external_ram+0x33c>)
60002288:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000228c:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000228e:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002292:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002296:	485e      	ldr	r0, [pc, #376]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002298:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000229c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022a0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a4:	6943      	ldr	r3, [r0, #20]
600022a6:	07da      	lsls	r2, r3, #31
600022a8:	d5fc      	bpl.n	600022a4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022aa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ac:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	4957      	ldr	r1, [pc, #348]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022b4:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600022b6:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ba:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022be:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022c2:	694b      	ldr	r3, [r1, #20]
600022c4:	07db      	lsls	r3, r3, #31
600022c6:	d5fc      	bpl.n	600022c2 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ca:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022d0:	4a4f      	ldr	r2, [pc, #316]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022d2:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600022d4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022d8:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022dc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022e0:	6953      	ldr	r3, [r2, #20]
600022e2:	07df      	lsls	r7, r3, #31
600022e4:	d5fc      	bpl.n	600022e0 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022e6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022e8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022ea:	4858      	ldr	r0, [pc, #352]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ec:	4948      	ldr	r1, [pc, #288]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022ee:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022f0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022f4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fc:	694b      	ldr	r3, [r1, #20]
600022fe:	07de      	lsls	r6, r3, #31
60002300:	d5fc      	bpl.n	600022fc <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002302:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002306:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000230c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002310:	4293      	cmp	r3, r2
60002312:	d165      	bne.n	600023e0 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002314:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002316:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000231a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000231c:	483c      	ldr	r0, [pc, #240]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000231e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002322:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002326:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000232a:	6943      	ldr	r3, [r0, #20]
6000232c:	07dd      	lsls	r5, r3, #31
6000232e:	d5fc      	bpl.n	6000232a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002330:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002332:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002336:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002338:	4a35      	ldr	r2, [pc, #212]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000233a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000233c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002340:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002344:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002348:	6953      	ldr	r3, [r2, #20]
6000234a:	07dc      	lsls	r4, r3, #31
6000234c:	d5fc      	bpl.n	60002348 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000234e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002350:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002354:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002358:	492d      	ldr	r1, [pc, #180]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000235a:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000235c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002360:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002364:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002368:	694b      	ldr	r3, [r1, #20]
6000236a:	07d8      	lsls	r0, r3, #31
6000236c:	d5fc      	bpl.n	60002368 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000236e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002370:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002374:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002378:	4a25      	ldr	r2, [pc, #148]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000237a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000237c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002380:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002384:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002388:	6953      	ldr	r3, [r2, #20]
6000238a:	07d9      	lsls	r1, r3, #31
6000238c:	d5fc      	bpl.n	60002388 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002390:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002394:	482d      	ldr	r0, [pc, #180]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002396:	491e      	ldr	r1, [pc, #120]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002398:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000239a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000239e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023a6:	694b      	ldr	r3, [r1, #20]
600023a8:	07da      	lsls	r2, r3, #31
600023aa:	d5fc      	bpl.n	600023a6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600023ac:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023b0:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b4:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600023b6:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b8:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023ba:	4293      	cmp	r3, r2
600023bc:	d050      	beq.n	60002460 <configure_external_ram+0x354>
600023be:	2508      	movs	r5, #8
600023c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600023c4:	4922      	ldr	r1, [pc, #136]	; (60002450 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023c6:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600023c8:	4b22      	ldr	r3, [pc, #136]	; (60002454 <configure_external_ram+0x348>)
			external_psram_size = 16;
600023ca:	4a23      	ldr	r2, [pc, #140]	; (60002458 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023cc:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600023ce:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600023d0:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023d2:	2301      	movs	r3, #1
600023d4:	4821      	ldr	r0, [pc, #132]	; (6000245c <configure_external_ram+0x350>)
600023d6:	4422      	add	r2, r4
600023d8:	f000 fa1a 	bl	60002810 <__sm_set_pool_veneer>
}
600023dc:	b003      	add	sp, #12
600023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600023e0:	4b1e      	ldr	r3, [pc, #120]	; (6000245c <configure_external_ram+0x350>)
600023e2:	2200      	movs	r2, #0
600023e4:	e9c3 2200 	strd	r2, r2, [r3]
600023e8:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600023ec:	b003      	add	sp, #12
600023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600023f0:	401f8000 	.word	0x401f8000
600023f4:	0001b0f9 	.word	0x0001b0f9
600023f8:	000110f9 	.word	0x000110f9
600023fc:	401f8400 	.word	0x401f8400
60002400:	000170f9 	.word	0x000170f9
60002404:	400fc000 	.word	0x400fc000
60002408:	1ffffcff 	.word	0x1ffffcff
6000240c:	a0000300 	.word	0xa0000300
60002410:	402a4000 	.word	0x402a4000
60002414:	402a8000 	.word	0x402a8000
60002418:	ffff0012 	.word	0xffff0012
6000241c:	00f737ff 	.word	0x00f737ff
60002420:	80000040 	.word	0x80000040
60002424:	7cf0ff00 	.word	0x7cf0ff00
60002428:	830f00ff 	.word	0x830f00ff
6000242c:	00020063 	.word	0x00020063
60002430:	5af05af0 	.word	0x5af05af0
60002434:	402a4200 	.word	0x402a4200
60002438:	402a4300 	.word	0x402a4300
6000243c:	3018049f 	.word	0x3018049f
60002440:	0a1806eb 	.word	0x0a1806eb
60002444:	0a180638 	.word	0x0a180638
60002448:	26013206 	.word	0x26013206
6000244c:	00030004 	.word	0x00030004
60002450:	70480000 	.word	0x70480000
60002454:	70000000 	.word	0x70000000
60002458:	20025bd5 	.word	0x20025bd5
6000245c:	200252f4 	.word	0x200252f4
	FLEXSPI2_IPCR0 = addr;
60002460:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002468:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000246a:	4808      	ldr	r0, [pc, #32]	; (6000248c <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
6000246c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002470:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002474:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002478:	6943      	ldr	r3, [r0, #20]
6000247a:	07db      	lsls	r3, r3, #31
6000247c:	d5fc      	bpl.n	60002478 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000247e:	2301      	movs	r3, #1
60002480:	2510      	movs	r5, #16
60002482:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002486:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002488:	e79c      	b.n	600023c4 <configure_external_ram+0x2b8>
6000248a:	bf00      	nop
6000248c:	402a4000 	.word	0x402a4000

60002490 <usb_pll_start>:
{
60002490:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002492:	4a15      	ldr	r2, [pc, #84]	; (600024e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002494:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002496:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000249a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000249e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600024aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600024ac:	f013 0f02 	tst.w	r3, #2
600024b0:	d10e      	bne.n	600024d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600024b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600024b6:	d00f      	beq.n	600024d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600024b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600024bc:	d00e      	beq.n	600024dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600024be:	2b00      	cmp	r3, #0
600024c0:	daf3      	bge.n	600024aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600024c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600024c6:	d10b      	bne.n	600024e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600024c8:	065b      	lsls	r3, r3, #25
600024ca:	d50b      	bpl.n	600024e4 <usb_pll_start+0x54>
}
600024cc:	bcf0      	pop	{r4, r5, r6, r7}
600024ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600024d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024d4:	6190      	str	r0, [r2, #24]
			continue;
600024d6:	e7e8      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600024d8:	6155      	str	r5, [r2, #20]
			continue;
600024da:	e7e6      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600024dc:	6156      	str	r6, [r2, #20]
			continue;
600024de:	e7e4      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600024e0:	6191      	str	r1, [r2, #24]
			continue;
600024e2:	e7e2      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600024e4:	6157      	str	r7, [r2, #20]
			continue;
600024e6:	e7e0      	b.n	600024aa <usb_pll_start+0x1a>
600024e8:	400d8000 	.word	0x400d8000

600024ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024ec:	4a3f      	ldr	r2, [pc, #252]	; (600025ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600024ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600024f0:	493f      	ldr	r1, [pc, #252]	; (600025f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600024f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600025f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002502:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002506:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600025f8 <tempmon_init+0x10c>
{
6000250a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000250c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002510:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002514:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002518:	4d38      	ldr	r5, [pc, #224]	; (600025fc <tempmon_init+0x110>)
6000251a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000251c:	4c38      	ldr	r4, [pc, #224]	; (60002600 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000251e:	4839      	ldr	r0, [pc, #228]	; (60002604 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002520:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002522:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002526:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002528:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002530:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002534:	ee07 1a10 	vmov	s14, r1
60002538:	4b33      	ldr	r3, [pc, #204]	; (60002608 <tempmon_init+0x11c>)
6000253a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000253e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002544:	4931      	ldr	r1, [pc, #196]	; (6000260c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002546:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000254a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000254e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002552:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002556:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000255a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000255e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002562:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002566:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000256a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000256e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002572:	4827      	ldr	r0, [pc, #156]	; (60002610 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002574:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002578:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000257c:	ee75 5a87 	vadd.f32	s11, s11, s14
60002580:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002584:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002588:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000258c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002590:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002594:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000259c:	ee16 3a10 	vmov	r3, s12
600025a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600025ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600025ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600025be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600025c0:	4914      	ldr	r1, [pc, #80]	; (60002614 <tempmon_init+0x128>)
600025c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600025c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600025ca:	f043 0302 	orr.w	r3, r3, #2
600025ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600025d2:	4b11      	ldr	r3, [pc, #68]	; (60002618 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600025d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600025d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600025e0:	2201      	movs	r2, #1
}
600025e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600025e8:	4770      	bx	lr
600025ea:	bf00      	nop
600025ec:	400d8100 	.word	0x400d8100
600025f0:	401f4400 	.word	0x401f4400
600025f4:	42aa0000 	.word	0x42aa0000
600025f8:	42b40000 	.word	0x42b40000
600025fc:	20025468 	.word	0x20025468
60002600:	20025464 	.word	0x20025464
60002604:	2002546c 	.word	0x2002546c
60002608:	20025470 	.word	0x20025470
6000260c:	0fff0000 	.word	0x0fff0000
60002610:	e000e400 	.word	0xe000e400
60002614:	20009800 	.word	0x20009800
60002618:	0000ecd9 	.word	0x0000ecd9

6000261c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000261c:	4b31      	ldr	r3, [pc, #196]	; (600026e4 <usb_init+0xc8>)
6000261e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002622:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002624:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002628:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000262c:	f000 f8d4 	bl	600027d8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002630:	4a2d      	ldr	r2, [pc, #180]	; (600026e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002632:	492e      	ldr	r1, [pc, #184]	; (600026ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002634:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002638:	482d      	ldr	r0, [pc, #180]	; (600026f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000263a:	f043 0303 	orr.w	r3, r3, #3
6000263e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002642:	4b2c      	ldr	r3, [pc, #176]	; (600026f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002644:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002648:	6802      	ldr	r2, [r0, #0]
6000264a:	421a      	tst	r2, r3
6000264c:	d103      	bne.n	60002656 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000264e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002652:	079a      	lsls	r2, r3, #30
60002654:	d01b      	beq.n	6000268e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002656:	4a25      	ldr	r2, [pc, #148]	; (600026ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002658:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000265c:	4b24      	ldr	r3, [pc, #144]	; (600026f0 <usb_init+0xd4>)
6000265e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002660:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002664:	f043 0302 	orr.w	r3, r3, #2
60002668:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000266c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002670:	079b      	lsls	r3, r3, #30
60002672:	d4fb      	bmi.n	6000266c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002674:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002678:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000267c:	4b1c      	ldr	r3, [pc, #112]	; (600026f0 <usb_init+0xd4>)
6000267e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002682:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002686:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002688:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000268a:	f000 f8b1 	bl	600027f0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000268e:	4a18      	ldr	r2, [pc, #96]	; (600026f0 <usb_init+0xd4>)
60002690:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002694:	4c15      	ldr	r4, [pc, #84]	; (600026ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60002696:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002698:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000269a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000269c:	4b16      	ldr	r3, [pc, #88]	; (600026f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000269e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a0:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600026a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a8:	4618      	mov	r0, r3
600026aa:	f000 f8a5 	bl	600027f8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600026ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600026be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600026c2:	641a      	str	r2, [r3, #64]	; 0x40
600026c4:	4b0d      	ldr	r3, [pc, #52]	; (600026fc <usb_init+0xe0>)
600026c6:	4a0e      	ldr	r2, [pc, #56]	; (60002700 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600026cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600026d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600026d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600026de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600026e2:	bd10      	pop	{r4, pc}
600026e4:	400d8000 	.word	0x400d8000
600026e8:	400fc000 	.word	0x400fc000
600026ec:	402e0000 	.word	0x402e0000
600026f0:	400d9000 	.word	0x400d9000
600026f4:	001e1c00 	.word	0x001e1c00
600026f8:	20000000 	.word	0x20000000
600026fc:	20009800 	.word	0x20009800
60002700:	0000ef89 	.word	0x0000ef89

60002704 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002704:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002706:	4b0e      	ldr	r3, [pc, #56]	; (60002740 <_reboot_Teensyduino_+0x3c>)
60002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000270a:	079b      	lsls	r3, r3, #30
6000270c:	d400      	bmi.n	60002710 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000270e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002710:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002712:	4b0c      	ldr	r3, [pc, #48]	; (60002744 <_reboot_Teensyduino_+0x40>)
60002714:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002716:	4a0c      	ldr	r2, [pc, #48]	; (60002748 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002718:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000271c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002720:	490a      	ldr	r1, [pc, #40]	; (6000274c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002722:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002726:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002728:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000272a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000272e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002732:	4807      	ldr	r0, [pc, #28]	; (60002750 <_reboot_Teensyduino_+0x4c>)
60002734:	4a07      	ldr	r2, [pc, #28]	; (60002754 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002736:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002738:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000273a:	689b      	ldr	r3, [r3, #8]
6000273c:	4798      	blx	r3
	}
	__builtin_unreachable();
6000273e:	bf00      	nop
60002740:	401f4400 	.word	0x401f4400
60002744:	402e0000 	.word	0x402e0000
60002748:	400ac000 	.word	0x400ac000
6000274c:	00200003 	.word	0x00200003
60002750:	20208000 	.word	0x20208000
60002754:	eb120000 	.word	0xeb120000

60002758 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002758:	4b10      	ldr	r3, [pc, #64]	; (6000279c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000275a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000275c:	4a10      	ldr	r2, [pc, #64]	; (600027a0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000275e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002760:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002764:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002766:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002768:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000276c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000276e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60002772:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002774:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002776:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002778:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000277a:	061b      	lsls	r3, r3, #24
6000277c:	d4fc      	bmi.n	60002778 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000277e:	4a09      	ldr	r2, [pc, #36]	; (600027a4 <analog_init+0x4c>)
60002780:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002784:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002786:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002788:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000278a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000278c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002790:	d1fb      	bne.n	6000278a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002792:	4a05      	ldr	r2, [pc, #20]	; (600027a8 <analog_init+0x50>)
60002794:	7013      	strb	r3, [r2, #0]
}
60002796:	f85d 4b04 	ldr.w	r4, [sp], #4
6000279a:	4770      	bx	lr
6000279c:	400fc000 	.word	0x400fc000
600027a0:	400c4000 	.word	0x400c4000
600027a4:	400c8000 	.word	0x400c8000
600027a8:	20025bd4 	.word	0x20025bd4

600027ac <_init>:
600027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600027ae:	bf00      	nop
600027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
600027b2:	bc08      	pop	{r3}
600027b4:	469e      	mov	lr, r3
600027b6:	4770      	bx	lr

600027b8 <__set_arm_clock_veneer>:
600027b8:	f85f f000 	ldr.w	pc, [pc]	; 600027bc <__set_arm_clock_veneer+0x4>
600027bc:	0000dca5 	.word	0x0000dca5

600027c0 <__main_veneer>:
600027c0:	f85f f000 	ldr.w	pc, [pc]	; 600027c4 <__main_veneer+0x4>
600027c4:	0000e58d 	.word	0x0000e58d

600027c8 <__pwm_init_veneer>:
600027c8:	f85f f000 	ldr.w	pc, [pc]	; 600027cc <__pwm_init_veneer+0x4>
600027cc:	000102ed 	.word	0x000102ed

600027d0 <___ZN5Print7printlnEv_veneer>:
600027d0:	f85f f000 	ldr.w	pc, [pc]	; 600027d4 <___ZN5Print7printlnEv_veneer+0x4>
600027d4:	0000d991 	.word	0x0000d991

600027d8 <__usb_init_serialnumber_veneer>:
600027d8:	f85f f000 	ldr.w	pc, [pc]	; 600027dc <__usb_init_serialnumber_veneer+0x4>
600027dc:	0000f6cd 	.word	0x0000f6cd

600027e0 <___ZN5Print11printNumberEmhh_veneer>:
600027e0:	f85f f000 	ldr.w	pc, [pc]	; 600027e4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600027e4:	0000d9e5 	.word	0x0000d9e5

600027e8 <____libc_init_array_veneer>:
600027e8:	f85f f000 	ldr.w	pc, [pc]	; 600027ec <____libc_init_array_veneer+0x4>
600027ec:	000129dd 	.word	0x000129dd

600027f0 <__delay_veneer>:
600027f0:	f85f f000 	ldr.w	pc, [pc]	; 600027f4 <__delay_veneer+0x4>
600027f4:	0000df95 	.word	0x0000df95

600027f8 <__memset_veneer>:
600027f8:	f85f f000 	ldr.w	pc, [pc]	; 600027fc <__memset_veneer+0x4>
600027fc:	000126b9 	.word	0x000126b9

60002800 <___ZN5Print10printFloatEdh_veneer>:
60002800:	f85f f000 	ldr.w	pc, [pc]	; 60002804 <___ZN5Print10printFloatEdh_veneer+0x4>
60002804:	0000dab1 	.word	0x0000dab1

60002808 <___ZN5Print5printEl_veneer>:
60002808:	f85f f000 	ldr.w	pc, [pc]	; 6000280c <___ZN5Print5printEl_veneer+0x4>
6000280c:	0000d979 	.word	0x0000d979

60002810 <__sm_set_pool_veneer>:
60002810:	f85f f000 	ldr.w	pc, [pc]	; 60002814 <__sm_set_pool_veneer+0x4>
60002814:	0001042d 	.word	0x0001042d

60002818 <__frame_dummy_init_array_entry>:
60002818:	00000045 000006c1 00000db9 00001e45     E...........E...
60002828:	00004ef1                                .N..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
    // set SoC low power mode to wait mode
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
    // ensure above config is done before executing WFI
    asm volatile("dsb");    
  }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	20009ac0 	.word	0x20009ac0
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
      3c:	20009ac0 	.word	0x20009ac0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    WriteIndexRecord(handle, p1);
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
    }
  }
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
      60:	20025384 	.word	0x20025384
      64:	60028800 	.word	0x60028800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
      74:	4b0b      	ldr	r3, [pc, #44]	; (a4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      76:	4d0c      	ldr	r5, [pc, #48]	; (a8 <MTPStorage_SD::~MTPStorage_SD()+0x38>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      78:	f500 70ac 	add.w	r0, r0, #344	; 0x158
      7c:	6023      	str	r3, [r4, #0]
      7e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
      82:	f00a fd23 	bl	aacc <FsBaseFile::close()>
      86:	f504 7084 	add.w	r0, r4, #264	; 0x108
      8a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
      8e:	f00a fd1d 	bl	aacc <FsBaseFile::close()>
      92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
      96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
      9a:	f00a fd17 	bl	aacc <FsBaseFile::close()>
      9e:	4620      	mov	r0, r4
      a0:	bd38      	pop	{r3, r4, r5, pc}
      a2:	bf00      	nop
      a4:	20000c94 	.word	0x20000c94
      a8:	20000c70 	.word	0x20000c70

000000ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      ac:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
      b0:	b083      	sub	sp, #12
      b2:	f88d 1007 	strb.w	r1, [sp, #7]
      b6:	b143      	cbz	r3, ca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b8:	2201      	movs	r2, #1
      ba:	f10d 0107 	add.w	r1, sp, #7
      be:	4618      	mov	r0, r3
      c0:	f009 fb08 	bl	96d4 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      c4:	b003      	add	sp, #12
      c6:	f85d fb04 	ldr.w	pc, [sp], #4
      ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      cc:	2800      	cmp	r0, #0
      ce:	d0f9      	beq.n	c4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      d0:	2201      	movs	r2, #1
      d2:	f10d 0107 	add.w	r1, sp, #7
      d6:	f007 ffa3 	bl	8020 <ExFatFile::write(void const*, unsigned int)>
      da:	b003      	add	sp, #12
      dc:	f85d fb04 	ldr.w	pc, [sp], #4

000000e0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
      e2:	b113      	cbz	r3, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      e4:	4618      	mov	r0, r3
      e6:	f009 baef 	b.w	96c8 <FatFile::sync()>
      ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      ec:	b108      	cbz	r0, f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      ee:	f007 bdaf 	b.w	7c50 <ExFatFile::sync()>
  }
      f2:	4770      	bx	lr

000000f4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      f6:	b500      	push	{lr}
      f8:	b083      	sub	sp, #12
      fa:	b163      	cbz	r3, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      fc:	2201      	movs	r2, #1
      fe:	f10d 0107 	add.w	r1, sp, #7
     102:	4618      	mov	r0, r3
     104:	f008 ff68 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     108:	2801      	cmp	r0, #1
     10a:	d10c      	bne.n	126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     110:	b003      	add	sp, #12
     112:	f85d fb04 	ldr.w	pc, [sp], #4
     116:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     118:	b128      	cbz	r0, 126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     11a:	2201      	movs	r2, #1
     11c:	f10d 0107 	add.w	r1, sp, #7
     120:	f007 f868 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
     124:	e7f0      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     126:	f04f 30ff 	mov.w	r0, #4294967295
     12a:	e7f1      	b.n	110 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000012c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     12c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     12e:	b113      	cbz	r3, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     130:	4618      	mov	r0, r3
     132:	f009 b825 	b.w	9180 <FatFile::peek()>
     136:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     138:	b108      	cbz	r0, 13e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     13a:	f007 b92b 	b.w	7394 <ExFatFile::peek()>
  }
     13e:	f04f 30ff 	mov.w	r0, #4294967295
     142:	4770      	bx	lr

00000144 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     144:	6c83      	ldr	r3, [r0, #72]	; 0x48
     146:	b153      	cbz	r3, 15e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     148:	7818      	ldrb	r0, [r3, #0]
     14a:	f010 0008 	ands.w	r0, r0, #8
     14e:	d00d      	beq.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     150:	69d8      	ldr	r0, [r3, #28]
     152:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     154:	1ac0      	subs	r0, r0, r3
     156:	bf48      	it	mi
     158:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     15c:	4770      	bx	lr
     15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     160:	b1a3      	cbz	r3, 18c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     162:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     166:	f010 0008 	ands.w	r0, r0, #8
     16a:	d100      	bne.n	16e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     16c:	4770      	bx	lr
     16e:	6918      	ldr	r0, [r3, #16]
     170:	6819      	ldr	r1, [r3, #0]
     172:	695a      	ldr	r2, [r3, #20]
     174:	1a40      	subs	r0, r0, r1
     176:	685b      	ldr	r3, [r3, #4]
     178:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     17c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     180:	f173 0300 	sbcs.w	r3, r3, #0
     184:	d3f2      	bcc.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     18a:	4770      	bx	lr
     18c:	4618      	mov	r0, r3
    return BaseFile::available();
     18e:	e7ed      	b.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000190 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     190:	6c83      	ldr	r3, [r0, #72]	; 0x48
     192:	b113      	cbz	r3, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     194:	4618      	mov	r0, r3
     196:	f009 ba9d 	b.w	96d4 <FatFile::write(void const*, unsigned int)>
     19a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     19c:	b108      	cbz	r0, 1a2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     19e:	f007 bf3f 	b.w	8020 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     1a2:	4770      	bx	lr

000001a4 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     1a4:	4b11      	ldr	r3, [pc, #68]	; (1ec <resetUSB()+0x48>)
     1a6:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a8:	2064      	movs	r0, #100	; 0x64
  {
     1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1ae:	4d10      	ldr	r5, [pc, #64]	; (1f0 <resetUSB()+0x4c>)
     1b0:	4e10      	ldr	r6, [pc, #64]	; (1f4 <resetUSB()+0x50>)
     1b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 200 <resetUSB()+0x5c>
     1b6:	4f10      	ldr	r7, [pc, #64]	; (1f8 <resetUSB()+0x54>)
    while(!Serial) mtpd.loop();
     1b8:	4c10      	ldr	r4, [pc, #64]	; (1fc <resetUSB()+0x58>)
    USB1_USBCMD = 0;  // disconnect USB
     1ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1be:	f00d fee9 	bl	df94 <delay>
    usb_init();
     1c2:	f01b f88d 	bl	1b2e0 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1c6:	f00f ffe7 	bl	10198 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1ca:	782b      	ldrb	r3, [r5, #0]
    while(!Serial) mtpd.loop();
     1cc:	4620      	mov	r0, r4
     1ce:	b153      	cbz	r3, 1e6 <resetUSB()+0x42>
     1d0:	7833      	ldrb	r3, [r6, #0]
     1d2:	07db      	lsls	r3, r3, #31
     1d4:	d507      	bpl.n	1e6 <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1d6:	f8d8 3000 	ldr.w	r3, [r8]
     1da:	683a      	ldr	r2, [r7, #0]
     1dc:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1de:	2b0e      	cmp	r3, #14
     1e0:	d901      	bls.n	1e6 <resetUSB()+0x42>
  }
     1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(!Serial) mtpd.loop();
     1e6:	f003 fb4d 	bl	3884 <MTPD::loop()>
     1ea:	e7ec      	b.n	1c6 <resetUSB()+0x22>
     1ec:	402e0000 	.word	0x402e0000
     1f0:	20025be1 	.word	0x20025be1
     1f4:	20025be0 	.word	0x20025be0
     1f8:	20025ba8 	.word	0x20025ba8
     1fc:	20009b00 	.word	0x20009b00
     200:	20025b88 	.word	0x20025b88

00000204 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     208:	4a01      	ldr	r2, [pc, #4]	; (210 <reboot()+0xc>)
     20a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
     20e:	4770      	bx	lr
     210:	05fa0004 	.word	0x05fa0004

00000214 <loop>:
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     218:	4c75      	ldr	r4, [pc, #468]	; (3f0 <loop+0x1dc>)
     21a:	b08b      	sub	sp, #44	; 0x2c
     21c:	4d75      	ldr	r5, [pc, #468]	; (3f4 <loop+0x1e0>)
     21e:	6823      	ldr	r3, [r4, #0]
     220:	3301      	adds	r3, #1
     222:	6023      	str	r3, [r4, #0]
     224:	f004 fbe0 	bl	49e8 <getDataCount()>
     228:	882b      	ldrh	r3, [r5, #0]
     22a:	4283      	cmp	r3, r0
     22c:	4b72      	ldr	r3, [pc, #456]	; (3f8 <loop+0x1e4>)
     22e:	681a      	ldr	r2, [r3, #0]
     230:	bf38      	it	cc
     232:	8028      	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     234:	07d2      	lsls	r2, r2, #31
     236:	d53d      	bpl.n	2b4 <loop+0xa0>
     238:	4e70      	ldr	r6, [pc, #448]	; (3fc <loop+0x1e8>)
  status=menu(status);
     23a:	8830      	ldrh	r0, [r6, #0]
     23c:	b200      	sxth	r0, r0
     23e:	f004 fb55 	bl	48ec <menu(short)>
     242:	8030      	strh	r0, [r6, #0]
    if(status<0)
     244:	8833      	ldrh	r3, [r6, #0]
     246:	041b      	lsls	r3, r3, #16
     248:	d440      	bmi.n	2cc <loop+0xb8>
      if(status>0) digitalWriteFast(13,HIGH);    
     24a:	8833      	ldrh	r3, [r6, #0]
     24c:	b21b      	sxth	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	dd03      	ble.n	25a <loop+0x46>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     252:	4b6b      	ldr	r3, [pc, #428]	; (400 <loop+0x1ec>)
     254:	2208      	movs	r2, #8
     256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     25a:	8830      	ldrh	r0, [r6, #0]
     25c:	b200      	sxth	r0, r0
     25e:	f001 fd7b 	bl	1d58 <saveData(short)>
     262:	8030      	strh	r0, [r6, #0]
      if(status>0) digitalWriteFast(13,LOW);
     264:	8833      	ldrh	r3, [r6, #0]
     266:	b21b      	sxth	r3, r3
     268:	2b00      	cmp	r3, #0
     26a:	dd03      	ble.n	274 <loop+0x60>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     26c:	4b64      	ldr	r3, [pc, #400]	; (400 <loop+0x1ec>)
     26e:	2208      	movs	r2, #8
     270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  if((t1=millis())>(t0+1000))
     274:	4e63      	ldr	r6, [pc, #396]	; (404 <loop+0x1f0>)
	return systick_millis_count;
     276:	4a64      	ldr	r2, [pc, #400]	; (408 <loop+0x1f4>)
     278:	6833      	ldr	r3, [r6, #0]
     27a:	6817      	ldr	r7, [r2, #0]
     27c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     280:	42bb      	cmp	r3, r7
     282:	d213      	bcs.n	2ac <loop+0x98>
    if(monitor)
     284:	4b61      	ldr	r3, [pc, #388]	; (40c <loop+0x1f8>)
     286:	f9b3 3000 	ldrsh.w	r3, [r3]
     28a:	bb1b      	cbnz	r3, 2d4 <loop+0xc0>
     28c:	4b60      	ldr	r3, [pc, #384]	; (410 <loop+0x1fc>)
     28e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 450 <loop+0x23c>
     292:	9306      	str	r3, [sp, #24]
     294:	4b5f      	ldr	r3, [pc, #380]	; (414 <loop+0x200>)
     296:	9307      	str	r3, [sp, #28]
    loopCount=0;
     298:	2300      	movs	r3, #0
    procMiss=0;
     29a:	9a06      	ldr	r2, [sp, #24]
    t0=t1;
     29c:	6037      	str	r7, [r6, #0]
    procMiss=0;
     29e:	6013      	str	r3, [r2, #0]
    disk_count=0;
     2a0:	9a07      	ldr	r2, [sp, #28]
    loopCount=0;
     2a2:	6023      	str	r3, [r4, #0]
    procCount=0;
     2a4:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     2a8:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     2aa:	6013      	str	r3, [r2, #0]
  asm("wfi");
     2ac:	bf30      	wfi
}
     2ae:	b00b      	add	sp, #44	; 0x2c
     2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     2b4:	4a58      	ldr	r2, [pc, #352]	; (418 <loop+0x204>)
     2b6:	4e51      	ldr	r6, [pc, #324]	; (3fc <loop+0x1e8>)
     2b8:	6812      	ldr	r2, [r2, #0]
     2ba:	2a01      	cmp	r2, #1
     2bc:	f04f 32ff 	mov.w	r2, #4294967295
     2c0:	bf18      	it	ne
     2c2:	2200      	movne	r2, #0
     2c4:	8032      	strh	r2, [r6, #0]
     2c6:	2201      	movs	r2, #1
     2c8:	601a      	str	r2, [r3, #0]
     2ca:	e7b6      	b.n	23a <loop+0x26>
    { mtpd.loop();
     2cc:	4853      	ldr	r0, [pc, #332]	; (41c <loop+0x208>)
     2ce:	f003 fad9 	bl	3884 <MTPD::loop()>
     2d2:	e7ba      	b.n	24a <loop+0x36>
      rtc_get_datetime(&t);
     2d4:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2d6:	f8df b178 	ldr.w	fp, [pc, #376]	; 450 <loop+0x23c>
      rtc_get_datetime(&t);
     2da:	f004 fd6b 	bl	4db4 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2de:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     2e6:	9304      	str	r3, [sp, #16]
     2e8:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     2ec:	494c      	ldr	r1, [pc, #304]	; (420 <loop+0x20c>)
     2ee:	9303      	str	r3, [sp, #12]
     2f0:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     2f4:	484b      	ldr	r0, [pc, #300]	; (424 <loop+0x210>)
     2f6:	9302      	str	r3, [sp, #8]
     2f8:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     2fc:	9301      	str	r3, [sp, #4]
     2fe:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     302:	9300      	str	r3, [sp, #0]
     304:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     308:	f00d fb5e 	bl	d9c8 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     30c:	2103      	movs	r1, #3
     30e:	4846      	ldr	r0, [pc, #280]	; (428 <loop+0x214>)
     310:	f00f fec4 	bl	1009c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     314:	2300      	movs	r3, #0
     316:	220a      	movs	r2, #10
     318:	6821      	ldr	r1, [r4, #0]
     31a:	4842      	ldr	r0, [pc, #264]	; (424 <loop+0x210>)
     31c:	f00d fb62 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     320:	2101      	movs	r1, #1
     322:	4842      	ldr	r0, [pc, #264]	; (42c <loop+0x218>)
     324:	f00f feba 	bl	1009c <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     328:	4b39      	ldr	r3, [pc, #228]	; (410 <loop+0x1fc>)
     32a:	220a      	movs	r2, #10
     32c:	f8db 1000 	ldr.w	r1, [fp]
     330:	9306      	str	r3, [sp, #24]
     332:	2300      	movs	r3, #0
     334:	483b      	ldr	r0, [pc, #236]	; (424 <loop+0x210>)
     336:	f00d fb55 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     33a:	2101      	movs	r1, #1
     33c:	483b      	ldr	r0, [pc, #236]	; (42c <loop+0x218>)
     33e:	f00f fead 	bl	1009c <usb_serial_write>
     342:	9906      	ldr	r1, [sp, #24]
     344:	2300      	movs	r3, #0
     346:	220a      	movs	r2, #10
     348:	6809      	ldr	r1, [r1, #0]
     34a:	4836      	ldr	r0, [pc, #216]	; (424 <loop+0x210>)
     34c:	f00d fb4a 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     350:	2101      	movs	r1, #1
     352:	4836      	ldr	r0, [pc, #216]	; (42c <loop+0x218>)
     354:	f00f fea2 	bl	1009c <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");
     358:	4b2e      	ldr	r3, [pc, #184]	; (414 <loop+0x200>)
      Serial.printf("%3d",mxb); Serial.print("  ");
     35a:	882a      	ldrh	r2, [r5, #0]
     35c:	4934      	ldr	r1, [pc, #208]	; (430 <loop+0x21c>)
     35e:	4831      	ldr	r0, [pc, #196]	; (424 <loop+0x210>)
      Serial.print(disk_count); Serial.print("  ; ");
     360:	9307      	str	r3, [sp, #28]
      Serial.printf("%3d",mxb); Serial.print("  ");
     362:	f00d fb31 	bl	d9c8 <Print::printf(char const*, ...)>
     366:	2102      	movs	r1, #2
     368:	4832      	ldr	r0, [pc, #200]	; (434 <loop+0x220>)
     36a:	f00f fe97 	bl	1009c <usb_serial_write>
     36e:	9907      	ldr	r1, [sp, #28]
     370:	2300      	movs	r3, #0
     372:	220a      	movs	r2, #10
     374:	6809      	ldr	r1, [r1, #0]
     376:	482b      	ldr	r0, [pc, #172]	; (424 <loop+0x210>)
     378:	f00d fb34 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     37c:	2104      	movs	r1, #4
     37e:	482e      	ldr	r0, [pc, #184]	; (438 <loop+0x224>)
     380:	f00f fe8c 	bl	1009c <usb_serial_write>
      if(proc==0)
     384:	4b2d      	ldr	r3, [pc, #180]	; (43c <loop+0x228>)
     386:	881b      	ldrh	r3, [r3, #0]
     388:	b21b      	sxth	r3, r3
     38a:	b98b      	cbnz	r3, 3b0 <loop+0x19c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     38c:	4699      	mov	r9, r3
     38e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 454 <loop+0x240>
     392:	f8df 8090 	ldr.w	r8, [pc, #144]	; 424 <loop+0x210>
     396:	4b2a      	ldr	r3, [pc, #168]	; (440 <loop+0x22c>)
     398:	4651      	mov	r1, sl
     39a:	4640      	mov	r0, r8
     39c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     3a0:	f109 0901 	add.w	r9, r9, #1
     3a4:	f00d fb10 	bl	d9c8 <Print::printf(char const*, ...)>
     3a8:	f1b9 0f08 	cmp.w	r9, #8
     3ac:	d1f3      	bne.n	396 <loop+0x182>
     3ae:	e773      	b.n	298 <loop+0x84>
     3b0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 458 <loop+0x244>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3b4:	4923      	ldr	r1, [pc, #140]	; (444 <loop+0x230>)
     3b6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 424 <loop+0x210>
     3ba:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     3be:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     3c2:	4648      	mov	r0, r9
     3c4:	f00d fb00 	bl	d9c8 <Print::printf(char const*, ...)>
     3c8:	491e      	ldr	r1, [pc, #120]	; (444 <loop+0x230>)
     3ca:	45d0      	cmp	r8, sl
     3cc:	d1f7      	bne.n	3be <loop+0x1aa>
        Serial.printf("%2d",max_stat);
     3ce:	f8df 808c 	ldr.w	r8, [pc, #140]	; 45c <loop+0x248>
     3d2:	491d      	ldr	r1, [pc, #116]	; (448 <loop+0x234>)
     3d4:	f8d8 2000 	ldr.w	r2, [r8]
     3d8:	4812      	ldr	r0, [pc, #72]	; (424 <loop+0x210>)
     3da:	f00d faf5 	bl	d9c8 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3de:	2260      	movs	r2, #96	; 0x60
     3e0:	2100      	movs	r1, #0
     3e2:	481a      	ldr	r0, [pc, #104]	; (44c <loop+0x238>)
     3e4:	f012 f968 	bl	126b8 <memset>
        max_stat=0;        
     3e8:	2300      	movs	r3, #0
     3ea:	f8c8 3000 	str.w	r3, [r8]
     3ee:	e753      	b.n	298 <loop+0x84>
     3f0:	20024d24 	.word	0x20024d24
     3f4:	20025bb4 	.word	0x20025bb4
     3f8:	2000c1cc 	.word	0x2000c1cc
     3fc:	20025bb6 	.word	0x20025bb6
     400:	42004000 	.word	0x42004000
     404:	20024d20 	.word	0x20024d20
     408:	20025b88 	.word	0x20025b88
     40c:	20025bbc 	.word	0x20025bbc
     410:	200253a0 	.word	0x200253a0
     414:	200252dc 	.word	0x200252dc
     418:	20025b9c 	.word	0x20025b9c
     41c:	20009b00 	.word	0x20009b00
     420:	2000801c 	.word	0x2000801c
     424:	20008bb4 	.word	0x20008bb4
     428:	20008040 	.word	0x20008040
     42c:	20000bf0 	.word	0x20000bf0
     430:	20008044 	.word	0x20008044
     434:	20008048 	.word	0x20008048
     438:	2000804c 	.word	0x2000804c
     43c:	20025bbe 	.word	0x20025bbe
     440:	20025358 	.word	0x20025358
     444:	2000805c 	.word	0x2000805c
     448:	20008064 	.word	0x20008064
     44c:	200253a4 	.word	0x200253a4
     450:	2002539c 	.word	0x2002539c
     454:	20008054 	.word	0x20008054
     458:	200253a0 	.word	0x200253a0
     45c:	20025378 	.word	0x20025378

00000460 <setup1()>:
{ 
     460:	b510      	push	{r4, lr}
     462:	2106      	movs	r1, #6
     464:	480e      	ldr	r0, [pc, #56]	; (4a0 <setup1()+0x40>)
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     466:	4c0f      	ldr	r4, [pc, #60]	; (4a4 <setup1()+0x44>)
     468:	f00f fe18 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     46c:	480e      	ldr	r0, [pc, #56]	; (4a8 <setup1()+0x48>)
     46e:	f00d fa8f 	bl	d990 <Print::println()>
     472:	6823      	ldr	r3, [r4, #0]
     474:	b92b      	cbnz	r3, 482 <setup1()+0x22>
     476:	2001      	movs	r0, #1
     478:	f00d fd8c 	bl	df94 <delay>
     47c:	6823      	ldr	r3, [r4, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d0f9      	beq.n	476 <setup1()+0x16>
  i2s_setup();
     482:	f000 fbed 	bl	c60 <i2s_setup()>
  dma_setup();
     486:	f000 fc31 	bl	cec <dma_setup()>
  adc_init();
     48a:	f000 fcd1 	bl	e30 <adc_init()>
     48e:	210b      	movs	r1, #11
     490:	4806      	ldr	r0, [pc, #24]	; (4ac <setup1()+0x4c>)
     492:	f00f fe03 	bl	1009c <usb_serial_write>
     496:	4804      	ldr	r0, [pc, #16]	; (4a8 <setup1()+0x48>)
}
     498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     49c:	f00d ba78 	b.w	d990 <Print::println()>
     4a0:	200007c8 	.word	0x200007c8
     4a4:	200259c8 	.word	0x200259c8
     4a8:	20008bb4 	.word	0x20008bb4
     4ac:	200007d0 	.word	0x200007d0

000004b0 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4b4:	4c78      	ldr	r4, [pc, #480]	; (698 <storage_configure()+0x1e8>)
    sdioConfigBackup = sdioConfig;
     4b6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     4b8:	22ff      	movs	r2, #255	; 0xff
     4ba:	b082      	sub	sp, #8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4bc:	f504 6592 	add.w	r5, r4, #1168	; 0x490
     4c0:	4619      	mov	r1, r3
     4c2:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     4c6:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
     4c8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4cc:	f00c f818 	bl	c500 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     4d0:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     4d2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     4d6:	f00b fa75 	bl	b9c4 <SdioCard::errorCode() const>
     4da:	b938      	cbnz	r0, 4ec <storage_configure()+0x3c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     4dc:	2301      	movs	r3, #1
     4de:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     4e2:	4620      	mov	r0, r4
     4e4:	461a      	mov	r2, r3
     4e6:	f00a fb99 	bl	ac1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     4ea:	b970      	cbnz	r0, 50a <storage_configure()+0x5a>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
        }
        
        if(!sdx[ii].begin(SdioConfig(FIFO_SDIO))) 
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     4ec:	486b      	ldr	r0, [pc, #428]	; (69c <storage_configure()+0x1ec>)
     4ee:	23fe      	movs	r3, #254	; 0xfe
     4f0:	2200      	movs	r2, #0
     4f2:	496b      	ldr	r1, [pc, #428]	; (6a0 <storage_configure()+0x1f0>)
     4f4:	6804      	ldr	r4, [r0, #0]
     4f6:	486b      	ldr	r0, [pc, #428]	; (6a4 <storage_configure()+0x1f4>)
     4f8:	9400      	str	r4, [sp, #0]
     4fa:	f00d fa65 	bl	d9c8 <Print::printf(char const*, ...)>
     4fe:	4869      	ldr	r0, [pc, #420]	; (6a4 <storage_configure()+0x1f4>)
            Serial.print("; total clusters: "); Serial.print(totalSize); 
            Serial.print(" free clusters: "); Serial.print(freeSize);
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
        }
      }
  }
     500:	b002      	add	sp, #8
     502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     506:	f00d ba43 	b.w	d990 <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     50a:	4b67      	ldr	r3, [pc, #412]	; (6a8 <storage_configure()+0x1f8>)
          storage.addFilesystem(sdx[ii], sd_str[ii]);
     50c:	4f63      	ldr	r7, [pc, #396]	; (69c <storage_configure()+0x1ec>)
     50e:	685a      	ldr	r2, [r3, #4]
     510:	2a13      	cmp	r2, #19
     512:	dc06      	bgt.n	522 <storage_configure()+0x72>
          sdx[fsCount++] = &fs;
     514:	1c50      	adds	r0, r2, #1
          sd_name[fsCount] = name;
     516:	eb03 0182 	add.w	r1, r3, r2, lsl #2
          sdx[fsCount++] = &fs;
     51a:	6058      	str	r0, [r3, #4]
          sd_name[fsCount] = name;
     51c:	683b      	ldr	r3, [r7, #0]
          sdx[fsCount++] = &fs;
     51e:	658c      	str	r4, [r1, #88]	; 0x58
          sd_name[fsCount] = name;
     520:	608b      	str	r3, [r1, #8]
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     522:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     526:	2b00      	cmp	r3, #0
     528:	d068      	beq.n	5fc <storage_configure()+0x14c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     52a:	69de      	ldr	r6, [r3, #28]
     52c:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     530:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     532:	2800      	cmp	r0, #0
     534:	f000 80a1 	beq.w	67a <storage_configure()+0x1ca>
     538:	6803      	ldr	r3, [r0, #0]
     53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     53c:	4798      	blx	r3
     53e:	2800      	cmp	r0, #0
     540:	d16b      	bne.n	61a <storage_configure()+0x16a>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     542:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     546:	2800      	cmp	r0, #0
     548:	f040 808c 	bne.w	664 <storage_configure()+0x1b4>
     54c:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     550:	2d00      	cmp	r5, #0
     552:	f000 8098 	beq.w	686 <storage_configure()+0x1d6>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     556:	4680      	mov	r8, r0
     558:	4628      	mov	r0, r5
     55a:	f008 f93f 	bl	87dc <ExFatPartition::freeClusterCount()>
     55e:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     560:	f1b8 0f00 	cmp.w	r8, #0
     564:	d00b      	beq.n	57e <storage_configure()+0xce>
     566:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     56a:	2800      	cmp	r0, #0
     56c:	f000 8083 	beq.w	676 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     570:	6803      	ldr	r3, [r0, #0]
     572:	2100      	movs	r1, #0
     574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     576:	4798      	blx	r3
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     578:	2800      	cmp	r0, #0
     57a:	bf08      	it	eq
     57c:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     57e:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     582:	2b00      	cmp	r3, #0
     584:	d066      	beq.n	654 <storage_configure()+0x1a4>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     586:	799b      	ldrb	r3, [r3, #6]
     588:	f44f 7800 	mov.w	r8, #512	; 0x200
     58c:	fa08 f803 	lsl.w	r8, r8, r3
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     590:	f3c8 2885 	ubfx	r8, r8, #10, #6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     594:	2400      	movs	r4, #0
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     596:	683a      	ldr	r2, [r7, #0]
     598:	23fe      	movs	r3, #254	; 0xfe
     59a:	270a      	movs	r7, #10
     59c:	9200      	str	r2, [sp, #0]
     59e:	4622      	mov	r2, r4
     5a0:	4942      	ldr	r1, [pc, #264]	; (6ac <storage_configure()+0x1fc>)
     5a2:	4840      	ldr	r0, [pc, #256]	; (6a4 <storage_configure()+0x1f4>)
     5a4:	f00d fa10 	bl	d9c8 <Print::printf(char const*, ...)>
     5a8:	2112      	movs	r1, #18
     5aa:	4841      	ldr	r0, [pc, #260]	; (6b0 <storage_configure()+0x200>)
     5ac:	f00f fd76 	bl	1009c <usb_serial_write>
     5b0:	4632      	mov	r2, r6
     5b2:	4623      	mov	r3, r4
     5b4:	483b      	ldr	r0, [pc, #236]	; (6a4 <storage_configure()+0x1f4>)
     5b6:	e9cd 7400 	strd	r7, r4, [sp]
     5ba:	f00d fa27 	bl	da0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5be:	2110      	movs	r1, #16
     5c0:	483c      	ldr	r0, [pc, #240]	; (6b4 <storage_configure()+0x204>)
     5c2:	f00f fd6b 	bl	1009c <usb_serial_write>
     5c6:	462a      	mov	r2, r5
     5c8:	4623      	mov	r3, r4
     5ca:	4836      	ldr	r0, [pc, #216]	; (6a4 <storage_configure()+0x1f4>)
     5cc:	e9cd 7400 	strd	r7, r4, [sp]
     5d0:	f00d fa1c 	bl	da0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5d4:	210e      	movs	r1, #14
     5d6:	4838      	ldr	r0, [pc, #224]	; (6b8 <storage_configure()+0x208>)
     5d8:	f00f fd60 	bl	1009c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     5dc:	4623      	mov	r3, r4
     5de:	463a      	mov	r2, r7
     5e0:	4641      	mov	r1, r8
     5e2:	4830      	ldr	r0, [pc, #192]	; (6a4 <storage_configure()+0x1f4>)
     5e4:	f00d f9fe 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5e8:	2106      	movs	r1, #6
     5ea:	4834      	ldr	r0, [pc, #208]	; (6bc <storage_configure()+0x20c>)
     5ec:	f00f fd56 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     5f0:	482c      	ldr	r0, [pc, #176]	; (6a4 <storage_configure()+0x1f4>)
  }
     5f2:	b002      	add	sp, #8
     5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     5f8:	f00d b9ca 	b.w	d990 <Print::println()>
     5fc:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     600:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     604:	2b00      	cmp	r3, #0
     606:	d033      	beq.n	670 <storage_configure()+0x1c0>
          uint64_t totalSize = sdx[ii].clusterCount();
     608:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     60c:	2800      	cmp	r0, #0
     60e:	d193      	bne.n	538 <storage_configure()+0x88>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     610:	4618      	mov	r0, r3
     612:	f008 f8e3 	bl	87dc <ExFatPartition::freeClusterCount()>
     616:	4605      	mov	r5, r0
     618:	e7b1      	b.n	57e <storage_configure()+0xce>
     61a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     61e:	b350      	cbz	r0, 676 <storage_configure()+0x1c6>
     620:	6803      	ldr	r3, [r0, #0]
     622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     624:	4798      	blx	r3
     626:	2800      	cmp	r0, #0
     628:	d18b      	bne.n	542 <storage_configure()+0x92>
     62a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     62e:	b310      	cbz	r0, 676 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     630:	6803      	ldr	r3, [r0, #0]
     632:	2101      	movs	r1, #1
     634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     636:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     638:	4680      	mov	r8, r0
     63a:	b340      	cbz	r0, 68e <storage_configure()+0x1de>
    return m_fVol ? m_fVol->freeClusterCount() :
     63c:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     640:	b990      	cbnz	r0, 668 <storage_configure()+0x1b8>
     642:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     646:	2d00      	cmp	r5, #0
     648:	d186      	bne.n	558 <storage_configure()+0xa8>
     64a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     64e:	2800      	cmp	r0, #0
     650:	d18e      	bne.n	570 <storage_configure()+0xc0>
     652:	4605      	mov	r5, r0
     654:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     658:	b1db      	cbz	r3, 692 <storage_configure()+0x1e2>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     65a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
     65e:	ea4f 2893 	mov.w	r8, r3, lsr #10
     662:	e797      	b.n	594 <storage_configure()+0xe4>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     664:	f04f 0800 	mov.w	r8, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     668:	f00a f838 	bl	a6dc <FatPartition::freeClusterCount()>
     66c:	4605      	mov	r5, r0
     66e:	e777      	b.n	560 <storage_configure()+0xb0>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     670:	b140      	cbz	r0, 684 <storage_configure()+0x1d4>
     672:	461e      	mov	r6, r3
     674:	e760      	b.n	538 <storage_configure()+0x88>
     676:	4605      	mov	r5, r0
     678:	e781      	b.n	57e <storage_configure()+0xce>
     67a:	4618      	mov	r0, r3
     67c:	f00a f82e 	bl	a6dc <FatPartition::freeClusterCount()>
     680:	4605      	mov	r5, r0
     682:	e77c      	b.n	57e <storage_configure()+0xce>
     684:	4606      	mov	r6, r0
  uint32_t bytesPerCluster() const {
     686:	f04f 0800 	mov.w	r8, #0
     68a:	4645      	mov	r5, r8
     68c:	e782      	b.n	594 <storage_configure()+0xe4>
     68e:	4605      	mov	r5, r0
     690:	e775      	b.n	57e <storage_configure()+0xce>
     692:	4698      	mov	r8, r3
     694:	e77e      	b.n	594 <storage_configure()+0xe4>
     696:	bf00      	nop
     698:	20025478 	.word	0x20025478
     69c:	20009540 	.word	0x20009540
     6a0:	20000568 	.word	0x20000568
     6a4:	20008bb4 	.word	0x20008bb4
     6a8:	200259cc 	.word	0x200259cc
     6ac:	20000594 	.word	0x20000594
     6b0:	200005ac 	.word	0x200005ac
     6b4:	200005c0 	.word	0x200005c0
     6b8:	200005d4 	.word	0x200005d4
     6bc:	200005e4 	.word	0x200005e4

000006c0 <_GLOBAL__sub_I_storage>:
  }
     6c0:	b538      	push	{r3, r4, r5, lr}
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6c2:	492f      	ldr	r1, [pc, #188]	; (780 <_GLOBAL__sub_I_storage+0xc0>)
        fsCount = 0;
     6c4:	2400      	movs	r4, #0
     6c6:	4d2f      	ldr	r5, [pc, #188]	; (784 <_GLOBAL__sub_I_storage+0xc4>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6cc:	4b2e      	ldr	r3, [pc, #184]	; (788 <_GLOBAL__sub_I_storage+0xc8>)
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6ce:	6029      	str	r1, [r5, #0]
     6d0:	f06f 0101 	mvn.w	r1, #1
        fsCount = 0;
     6d4:	606c      	str	r4, [r5, #4]
  MTPStorage_SD storage;
     6d6:	4628      	mov	r0, r5
     6d8:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
     6dc:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
     6e0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
     6e4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
     6e8:	f885 4154 	strb.w	r4, [r5, #340]	; 0x154
     6ec:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6f0:	f8c5 41a8 	str.w	r4, [r5, #424]	; 0x1a8
     6f4:	f8a5 41ac 	strh.w	r4, [r5, #428]	; 0x1ac
     6f8:	e9c5 422b 	strd	r4, r2, [r5, #172]	; 0xac
     6fc:	e9c5 423f 	strd	r4, r2, [r5, #252]	; 0xfc
     700:	e9c5 4253 	strd	r4, r2, [r5, #332]	; 0x14c
     704:	e9c5 4168 	strd	r4, r1, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     708:	e9c5 443c 	strd	r4, r4, [r5, #240]	; 0xf0
     70c:	e9c5 4450 	strd	r4, r4, [r5, #320]	; 0x140
     710:	e9c5 4464 	strd	r4, r4, [r5, #400]	; 0x190
     714:	e9c5 4466 	strd	r4, r4, [r5, #408]	; 0x198
     718:	4a1c      	ldr	r2, [pc, #112]	; (78c <_GLOBAL__sub_I_storage+0xcc>)
     71a:	491d      	ldr	r1, [pc, #116]	; (790 <_GLOBAL__sub_I_storage+0xd0>)
     71c:	f00f fec8 	bl	104b0 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     720:	481c      	ldr	r0, [pc, #112]	; (794 <_GLOBAL__sub_I_storage+0xd4>)
  FsVolume() {}
     722:	4b1d      	ldr	r3, [pc, #116]	; (798 <_GLOBAL__sub_I_storage+0xd8>)
     724:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
     728:	6005      	str	r5, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     72a:	481c      	ldr	r0, [pc, #112]	; (79c <_GLOBAL__sub_I_storage+0xdc>)
     72c:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
     730:	f881 4424 	strb.w	r4, [r1, #1060]	; 0x424
     734:	f8c1 4428 	str.w	r4, [r1, #1064]	; 0x428
	SPISettings() : _clock(4000000) {
     738:	4919      	ldr	r1, [pc, #100]	; (7a0 <_GLOBAL__sub_I_storage+0xe0>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	4d1a      	ldr	r5, [pc, #104]	; (7a4 <_GLOBAL__sub_I_storage+0xe4>)
     73c:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     740:	2007      	movs	r0, #7
	SPISettings() : _clock(4000000) {
     742:	f8c3 14a4 	str.w	r1, [r3, #1188]	; 0x4a4
  SharedSpiCard() {}
     746:	2129      	movs	r1, #41	; 0x29
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     748:	f8c3 04a8 	str.w	r0, [r3, #1192]	; 0x4a8
  SdFs sdx[nsd];
     74c:	4620      	mov	r0, r4
     74e:	f883 14ad 	strb.w	r1, [r3, #1197]	; 0x4ad
     752:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     756:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     75a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     75e:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
     762:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     766:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     76a:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
     76e:	f8c3 549c 	str.w	r5, [r3, #1180]	; 0x49c
     772:	4a06      	ldr	r2, [pc, #24]	; (78c <_GLOBAL__sub_I_storage+0xcc>)
     774:	490c      	ldr	r1, [pc, #48]	; (7a8 <_GLOBAL__sub_I_storage+0xe8>)
  }
     776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     77a:	f00f be99 	b.w	104b0 <__aeabi_atexit>
     77e:	bf00      	nop
     780:	20000c94 	.word	0x20000c94
     784:	200259cc 	.word	0x200259cc
     788:	20000d98 	.word	0x20000d98
     78c:	20008f90 	.word	0x20008f90
     790:	00000071 	.word	0x00000071
     794:	20009b00 	.word	0x20009b00
     798:	20025478 	.word	0x20025478
     79c:	20000de0 	.word	0x20000de0
     7a0:	003d0900 	.word	0x003d0900
     7a4:	20000d00 	.word	0x20000d00
     7a8:	0000006d 	.word	0x0000006d

000007ac <setup>:
{
     7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     7b0:	4d79      	ldr	r5, [pc, #484]	; (998 <setup+0x1ec>)
     7b2:	b087      	sub	sp, #28
    set_arm_clock(24'000'000);
     7b4:	4879      	ldr	r0, [pc, #484]	; (99c <setup+0x1f0>)
				if (elapsed > 750) break;
     7b6:	f240 28ee 	movw	r8, #750	; 0x2ee
     7ba:	f00d fa73 	bl	dca4 <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     7be:	4c78      	ldr	r4, [pc, #480]	; (9a0 <setup+0x1f4>)
     7c0:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7c2:	4f78      	ldr	r7, [pc, #480]	; (9a4 <setup+0x1f8>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7c4:	f8df 921c 	ldr.w	r9, [pc, #540]	; 9e4 <setup+0x238>
		yield();
     7c8:	f00f fce6 	bl	10198 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7cc:	7823      	ldrb	r3, [r4, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	f000 80b1 	beq.w	936 <setup+0x18a>
     7d4:	783b      	ldrb	r3, [r7, #0]
     7d6:	07da      	lsls	r2, r3, #31
     7d8:	f140 80ad 	bpl.w	936 <setup+0x18a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7dc:	682b      	ldr	r3, [r5, #0]
     7de:	f8d9 2000 	ldr.w	r2, [r9]
     7e2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7e4:	2b0e      	cmp	r3, #14
     7e6:	f240 80a6 	bls.w	936 <setup+0x18a>
  uint16_t *params=loadParameters();
     7ea:	f003 fe0f 	bl	440c <loadParameters()>
  if(params[0]==1)
     7ee:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7f0:	4607      	mov	r7, r0
  if(params[0]==1)
     7f2:	2b01      	cmp	r3, #1
     7f4:	f000 80b3 	beq.w	95e <setup+0x1b2>
     7f8:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7fa:	f242 760f 	movw	r6, #9999	; 0x270f
     7fe:	42b3      	cmp	r3, r6
     800:	d818      	bhi.n	834 <setup+0x88>
     802:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 9a4 <setup+0x1f8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     806:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 9e4 <setup+0x238>
		yield();
     80a:	f00f fcc5 	bl	10198 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     80e:	7823      	ldrb	r3, [r4, #0]
     810:	2b00      	cmp	r3, #0
     812:	f000 80af 	beq.w	974 <setup+0x1c8>
     816:	f898 3000 	ldrb.w	r3, [r8]
     81a:	07db      	lsls	r3, r3, #31
     81c:	f140 80aa 	bpl.w	974 <setup+0x1c8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     820:	682b      	ldr	r3, [r5, #0]
     822:	f8d9 2000 	ldr.w	r2, [r9]
     826:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     828:	2b0e      	cmp	r3, #14
     82a:	f240 80a3 	bls.w	974 <setup+0x1c8>
     82e:	4b5e      	ldr	r3, [pc, #376]	; (9a8 <setup+0x1fc>)
     830:	2201      	movs	r2, #1
     832:	601a      	str	r2, [r3, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     834:	2127      	movs	r1, #39	; 0x27
     836:	485d      	ldr	r0, [pc, #372]	; (9ac <setup+0x200>)
     838:	f00f fc30 	bl	1009c <usb_serial_write>
     83c:	485c      	ldr	r0, [pc, #368]	; (9b0 <setup+0x204>)
     83e:	f00d f8a7 	bl	d990 <Print::println()>
     842:	210c      	movs	r1, #12
     844:	485b      	ldr	r0, [pc, #364]	; (9b4 <setup+0x208>)
     846:	f00f fc29 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     84a:	8839      	ldrh	r1, [r7, #0]
     84c:	4858      	ldr	r0, [pc, #352]	; (9b0 <setup+0x204>)
     84e:	f00d f893 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     852:	4857      	ldr	r0, [pc, #348]	; (9b0 <setup+0x204>)
     854:	f00d f89c 	bl	d990 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     858:	4857      	ldr	r0, [pc, #348]	; (9b8 <setup+0x20c>)
     85a:	f01a fd51 	bl	1b300 <___ZN16CrashReportClasscvbEv_veneer>
     85e:	2800      	cmp	r0, #0
     860:	f040 8095 	bne.w	98e <setup+0x1e2>
    usbPowerSetup();
     864:	f000 faba 	bl	ddc <usbPowerSetup()>
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     868:	4b54      	ldr	r3, [pc, #336]	; (9bc <setup+0x210>)
     86a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
     86c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     870:	665a      	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     874:	f022 0223 	bic.w	r2, r2, #35	; 0x23
     878:	655a      	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     87a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     87c:	f042 0201 	orr.w	r2, r2, #1
     880:	655a      	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     882:	f3bf 8f4f 	dsb	sy
    storage_configure();
     886:	f7ff fe13 	bl	4b0 <storage_configure()>
     88a:	2108      	movs	r1, #8
     88c:	484c      	ldr	r0, [pc, #304]	; (9c0 <setup+0x214>)
     88e:	f00f fc05 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     892:	4847      	ldr	r0, [pc, #284]	; (9b0 <setup+0x204>)
     894:	f00d f87c 	bl	d990 <Print::println()>
  rtcSetup();
     898:	2113      	movs	r1, #19
     89a:	2012      	movs	r0, #18
     89c:	f004 fa5c 	bl	4d58 <rtcSetup(unsigned char, unsigned char)>
    rtcSync();
     8a0:	f004 faf8 	bl	4e94 <rtcSync()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8a4:	a804      	add	r0, sp, #16
     8a6:	f004 fa85 	bl	4db4 <rtc_get_datetime(datetime_t*)>
     8aa:	2800      	cmp	r0, #0
     8ac:	d067      	beq.n	97e <setup+0x1d2>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8ae:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     8b2:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     8b6:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     8ba:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     8be:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     8c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
     8c6:	e9cd 0400 	strd	r0, r4, [sp]
     8ca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     8ce:	493d      	ldr	r1, [pc, #244]	; (9c4 <setup+0x218>)
     8d0:	4837      	ldr	r0, [pc, #220]	; (9b0 <setup+0x204>)
     8d2:	f00d f879 	bl	d9c8 <Print::printf(char const*, ...)>
  Serial.println();
     8d6:	4836      	ldr	r0, [pc, #216]	; (9b0 <setup+0x204>)
     8d8:	f00d f85a 	bl	d990 <Print::println()>
     8dc:	2108      	movs	r1, #8
     8de:	483a      	ldr	r0, [pc, #232]	; (9c8 <setup+0x21c>)
     8e0:	f00f fbdc 	bl	1009c <usb_serial_write>
    Serial.println(rtcGetTimestamp());
     8e4:	f004 faea 	bl	4ebc <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     8e8:	4604      	mov	r4, r0
     8ea:	b128      	cbz	r0, 8f8 <setup+0x14c>
							  return write((const uint8_t *)str, strlen(str)); }
     8ec:	f012 fac8 	bl	12e80 <strlen>
     8f0:	4601      	mov	r1, r0
     8f2:	4620      	mov	r0, r4
     8f4:	f00f fbd2 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8f8:	482d      	ldr	r0, [pc, #180]	; (9b0 <setup+0x204>)
  setup_ready=1;
     8fa:	2401      	movs	r4, #1
     8fc:	f00d f848 	bl	d990 <Print::println()>
     900:	210b      	movs	r1, #11
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <setup+0x220>)
     904:	f00f fbca 	bl	1009c <usb_serial_write>
     908:	4829      	ldr	r0, [pc, #164]	; (9b0 <setup+0x204>)
     90a:	f00d f841 	bl	d990 <Print::println()>
  filing_init();
     90e:	f001 fab3 	bl	1e78 <filing_init()>
  setup_ready=1;
     912:	4b2f      	ldr	r3, [pc, #188]	; (9d0 <setup+0x224>)
     914:	210a      	movs	r1, #10
     916:	482f      	ldr	r0, [pc, #188]	; (9d4 <setup+0x228>)
     918:	601c      	str	r4, [r3, #0]
     91a:	f00f fbbf 	bl	1009c <usb_serial_write>
     91e:	4824      	ldr	r0, [pc, #144]	; (9b0 <setup+0x204>)
     920:	f00d f836 	bl	d990 <Print::println()>
    setup1();
     924:	f7ff fd9c 	bl	460 <setup1()>
    pinMode(13,OUTPUT);
     928:	4621      	mov	r1, r4
     92a:	200d      	movs	r0, #13
     92c:	f00d fbda 	bl	e0e4 <pinMode>
}
     930:	b007      	add	sp, #28
     932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     936:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     938:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     93a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     93c:	b132      	cbz	r2, 94c <setup+0x1a0>
				if (elapsed > 2000) break;
     93e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     942:	f63f af52 	bhi.w	7ea <setup+0x3e>
			yield();
     946:	f00f fc27 	bl	10198 <yield>
     94a:	e73d      	b.n	7c8 <setup+0x1c>
				if (elapsed > 750) break;
     94c:	4543      	cmp	r3, r8
     94e:	d9fa      	bls.n	946 <setup+0x19a>
  uint16_t *params=loadParameters();
     950:	f003 fd5c 	bl	440c <loadParameters()>
  if(params[0]==1)
     954:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     956:	4607      	mov	r7, r0
  if(params[0]==1)
     958:	2b01      	cmp	r3, #1
     95a:	f47f af4d 	bne.w	7f8 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     95e:	4b1e      	ldr	r3, [pc, #120]	; (9d8 <setup+0x22c>)
     960:	491e      	ldr	r1, [pc, #120]	; (9dc <setup+0x230>)
     962:	681b      	ldr	r3, [r3, #0]
     964:	6809      	ldr	r1, [r1, #0]
     966:	4a10      	ldr	r2, [pc, #64]	; (9a8 <setup+0x1fc>)
     968:	428b      	cmp	r3, r1
     96a:	bf8c      	ite	hi
     96c:	2300      	movhi	r3, #0
     96e:	2301      	movls	r3, #1
     970:	6013      	str	r3, [r2, #0]
     972:	e75f      	b.n	834 <setup+0x88>
     974:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     976:	42b3      	cmp	r3, r6
     978:	f67f af47 	bls.w	80a <setup+0x5e>
     97c:	e75a      	b.n	834 <setup+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     97e:	2114      	movs	r1, #20
     980:	4817      	ldr	r0, [pc, #92]	; (9e0 <setup+0x234>)
     982:	f00f fb8b 	bl	1009c <usb_serial_write>
     986:	480a      	ldr	r0, [pc, #40]	; (9b0 <setup+0x204>)
     988:	f00d f802 	bl	d990 <Print::println()>
     98c:	e78f      	b.n	8ae <setup+0x102>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     98e:	4908      	ldr	r1, [pc, #32]	; (9b0 <setup+0x204>)
     990:	4809      	ldr	r0, [pc, #36]	; (9b8 <setup+0x20c>)
     992:	f01a fcb1 	bl	1b2f8 <___ZNK16CrashReportClass7printToER5Print_veneer>
     996:	e765      	b.n	864 <setup+0xb8>
     998:	20025b88 	.word	0x20025b88
     99c:	016e3600 	.word	0x016e3600
     9a0:	20025be1 	.word	0x20025be1
     9a4:	20025be0 	.word	0x20025be0
     9a8:	20025b9c 	.word	0x20025b9c
     9ac:	20000a04 	.word	0x20000a04
     9b0:	20008bb4 	.word	0x20008bb4
     9b4:	20008074 	.word	0x20008074
     9b8:	20008ba8 	.word	0x20008ba8
     9bc:	400fc000 	.word	0x400fc000
     9c0:	20008084 	.word	0x20008084
     9c4:	200080a8 	.word	0x200080a8
     9c8:	200080d0 	.word	0x200080d0
     9cc:	200080dc 	.word	0x200080dc
     9d0:	200259c8 	.word	0x200259c8
     9d4:	200080e8 	.word	0x200080e8
     9d8:	20025b98 	.word	0x20025b98
     9dc:	20009554 	.word	0x20009554
     9e0:	20008090 	.word	0x20008090
     9e4:	20025ba8 	.word	0x20025ba8

000009e8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9e8:	b510      	push	{r4, lr}
     9ea:	4604      	mov	r4, r0
		release();
     9ec:	f00c ff32 	bl	d854 <DMAChannel::release()>
	}
     9f0:	4620      	mov	r0, r4
     9f2:	bd10      	pop	{r4, pc}

000009f4 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     9f4:	4b28      	ldr	r3, [pc, #160]	; (a98 <acq_isr()+0xa4>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9f6:	4a29      	ldr	r2, [pc, #164]	; (a9c <acq_isr()+0xa8>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9f8:	4929      	ldr	r1, [pc, #164]	; (aa0 <acq_isr()+0xac>)
  {
     9fa:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     9fc:	681c      	ldr	r4, [r3, #0]
     9fe:	7918      	ldrb	r0, [r3, #4]
     a00:	6923      	ldr	r3, [r4, #16]
     a02:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     a04:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     a06:	bf28      	it	cs
     a08:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a0c:	4694      	mov	ip, r2
	asm("dsb");
     a0e:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     a12:	f502 6180 	add.w	r1, r2, #1024	; 0x400
     a16:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     a1a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
     a1e:	4299      	cmp	r1, r3
     a20:	bf34      	ite	cc
     a22:	2101      	movcc	r1, #1
     a24:	2120      	movcs	r1, #32
     a26:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     a2a:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     a2c:	f8c0 2f5c 	str.w	r2, [r0, #3932]	; 0xf5c
		location += 32;
     a30:	461a      	mov	r2, r3
	} while (location < end_addr);
     a32:	f103 0320 	add.w	r3, r3, #32
     a36:	d1f8      	bne.n	a2a <acq_isr()+0x36>
	asm("dsb");
     a38:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a3c:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a40:	4918      	ldr	r1, [pc, #96]	; (aa4 <acq_isr()+0xb0>)
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a42:	2300      	movs	r3, #0
     a44:	4818      	ldr	r0, [pc, #96]	; (aa8 <acq_isr()+0xb4>)
{ procCount++;
     a46:	680a      	ldr	r2, [r1, #0]
     a48:	4c18      	ldr	r4, [pc, #96]	; (aac <acq_isr()+0xb8>)
     a4a:	3201      	adds	r2, #1
     a4c:	600a      	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a4e:	8821      	ldrh	r1, [r4, #0]
     a50:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
     a54:	3301      	adds	r3, #1
     a56:	b209      	sxth	r1, r1
     a58:	2b80      	cmp	r3, #128	; 0x80
     a5a:	fa42 f201 	asr.w	r2, r2, r1
     a5e:	f840 2f04 	str.w	r2, [r0, #4]!
     a62:	d1f4      	bne.n	a4e <acq_isr()+0x5a>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     a64:	4a12      	ldr	r2, [pc, #72]	; (ab0 <acq_isr()+0xbc>)
     a66:	8813      	ldrh	r3, [r2, #0]
     a68:	b21b      	sxth	r3, r3
     a6a:	b123      	cbz	r3, a76 <acq_isr()+0x82>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a6c:	8813      	ldrh	r3, [r2, #0]
     a6e:	b21b      	sxth	r3, r3
     a70:	2b01      	cmp	r3, #1
     a72:	d00a      	beq.n	a8a <acq_isr()+0x96>
  }
     a74:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a76:	480f      	ldr	r0, [pc, #60]	; (ab4 <acq_isr()+0xc0>)
     a78:	f003 ffca 	bl	4a10 <pushData(unsigned long*)>
     a7c:	2800      	cmp	r0, #0
     a7e:	d1f9      	bne.n	a74 <acq_isr()+0x80>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a80:	4a0d      	ldr	r2, [pc, #52]	; (ab8 <acq_isr()+0xc4>)
     a82:	6813      	ldr	r3, [r2, #0]
     a84:	3301      	adds	r3, #1
     a86:	6013      	str	r3, [r2, #0]
  }
     a88:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a8a:	480a      	ldr	r0, [pc, #40]	; (ab4 <acq_isr()+0xc0>)
     a8c:	f000 fb06 	bl	109c <compress(void*)>
     a90:	2800      	cmp	r0, #0
     a92:	d1ef      	bne.n	a74 <acq_isr()+0x80>
     a94:	e7f4      	b.n	a80 <acq_isr()+0x8c>
     a96:	bf00      	nop
     a98:	200243dc 	.word	0x200243dc
     a9c:	20200400 	.word	0x20200400
     aa0:	400e8000 	.word	0x400e8000
     aa4:	2002539c 	.word	0x2002539c
     aa8:	200250d8 	.word	0x200250d8
     aac:	20025bc4 	.word	0x20025bc4
     ab0:	20025bbe 	.word	0x20025bbe
     ab4:	200250dc 	.word	0x200250dc
     ab8:	200253a0 	.word	0x200253a0
     abc:	00000000 	.word	0x00000000

00000ac0 <setAudioFrequency(int)>:
  {
     ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ac4:	2105      	movs	r1, #5
     ac6:	4681      	mov	r9, r0
     ac8:	4859      	ldr	r0, [pc, #356]	; (c30 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     aca:	4f5a      	ldr	r7, [pc, #360]	; (c34 <setAudioFrequency(int)+0x174>)
     acc:	ed2d 8b02 	vpush	{d8}
     ad0:	b083      	sub	sp, #12
     ad2:	f00f fae3 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ad6:	2180      	movs	r1, #128	; 0x80
     ad8:	4857      	ldr	r0, [pc, #348]	; (c38 <setAudioFrequency(int)+0x178>)
     ada:	f00c ff4d 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ade:	4856      	ldr	r0, [pc, #344]	; (c38 <setAudioFrequency(int)+0x178>)
     ae0:	f00c ff56 	bl	d990 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     ae4:	231a      	movs	r3, #26
     ae6:	ea4f 10c9 	mov.w	r0, r9, lsl #7
    } while ((n2>64 && n0<54));
     aea:	f8df c170 	ldr.w	ip, [pc, #368]	; c5c <setAudioFrequency(int)+0x19c>
    {   n0++;
     aee:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     af0:	4602      	mov	r2, r0
        n1=0;
     af2:	2400      	movs	r4, #0
        {   n1++; 
     af4:	46a0      	mov	r8, r4
     af6:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     af8:	fb97 f6f2 	sdiv	r6, r7, r2
     afc:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     afe:	4402      	add	r2, r0
     b00:	2d40      	cmp	r5, #64	; 0x40
     b02:	bfd4      	ite	le
     b04:	2100      	movle	r1, #0
     b06:	2101      	movgt	r1, #1
     b08:	2c08      	cmp	r4, #8
     b0a:	dc01      	bgt.n	b10 <setAudioFrequency(int)+0x50>
     b0c:	2900      	cmp	r1, #0
     b0e:	d1f1      	bne.n	af4 <setAudioFrequency(int)+0x34>
    } while ((n2>64 && n0<54));
     b10:	2b35      	cmp	r3, #53	; 0x35
     b12:	4467      	add	r7, ip
     b14:	dc01      	bgt.n	b1a <setAudioFrequency(int)+0x5a>
     b16:	2900      	cmp	r1, #0
     b18:	d1e9      	bne.n	aee <setAudioFrequency(int)+0x2e>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b1a:	464a      	mov	r2, r9
     b1c:	4947      	ldr	r1, [pc, #284]	; (c3c <setAudioFrequency(int)+0x17c>)
     b1e:	4846      	ldr	r0, [pc, #280]	; (c38 <setAudioFrequency(int)+0x178>)
     b20:	e9cd 4500 	strd	r4, r5, [sp]
     b24:	f00c ff50 	bl	d9c8 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b28:	ee07 9a90 	vmov	s15, r9
     b2c:	ee06 5a90 	vmov	s13, r5
     b30:	2103      	movs	r1, #3
     b32:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b36:	ee07 4a90 	vmov	s15, r4
     b3a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b3e:	4840      	ldr	r0, [pc, #256]	; (c40 <setAudioFrequency(int)+0x180>)
     b40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b44:	ed9f 3b34 	vldr	d3, [pc, #208]	; c18 <setAudioFrequency(int)+0x158>
     b48:	ed9f 4b35 	vldr	d4, [pc, #212]	; c20 <setAudioFrequency(int)+0x160>
     b4c:	ee25 5b03 	vmul.f64	d5, d5, d3
     b50:	ee25 7b07 	vmul.f64	d7, d5, d7
     b54:	ee27 7b06 	vmul.f64	d7, d7, d6
     b58:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b5c:	f00f fa9e 	bl	1009c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b60:	2102      	movs	r1, #2
     b62:	4835      	ldr	r0, [pc, #212]	; (c38 <setAudioFrequency(int)+0x178>)
     b64:	eeb0 0b48 	vmov.f64	d0, d8
     b68:	f00c ffa2 	bl	dab0 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b6c:	4832      	ldr	r0, [pc, #200]	; (c38 <setAudioFrequency(int)+0x178>)
     b6e:	f00c ff0f 	bl	d990 <Print::println()>
    int c0 = C;
     b72:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b76:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b7a:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b7e:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b86:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b8a:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b8e:	4a2d      	ldr	r2, [pc, #180]	; (c44 <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     b90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b94:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     b96:	ed9f 6b24 	vldr	d6, [pc, #144]	; c28 <setAudioFrequency(int)+0x168>
     b9a:	ee98 7b06 	vfnms.f64	d7, d8, d6
     b9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     ba2:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     ba6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     baa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     bae:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     bb2:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     bb8:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bba:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bbc:	2b00      	cmp	r3, #0
     bbe:	dafc      	bge.n	bba <setAudioFrequency(int)+0xfa>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc0:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bc4:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc8:	481f      	ldr	r0, [pc, #124]	; (c48 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bca:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd2:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd4:	491d      	ldr	r1, [pc, #116]	; (c4c <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd6:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bda:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bdc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     be0:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be2:	69ca      	ldr	r2, [r1, #28]
     be4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bec:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bee:	4a18      	ldr	r2, [pc, #96]	; (c50 <setAudioFrequency(int)+0x190>)
     bf0:	6a88      	ldr	r0, [r1, #40]	; 0x28
     bf2:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf4:	4817      	ldr	r0, [pc, #92]	; (c54 <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bf6:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf8:	4a17      	ldr	r2, [pc, #92]	; (c58 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bfa:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bfc:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bfe:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c00:	401a      	ands	r2, r3
     c02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c06:	6042      	str	r2, [r0, #4]
  }
     c08:	b003      	add	sp, #12
     c0a:	ecbd 8b02 	vpop	{d8}
     c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c12:	bf00      	nop
     c14:	f3af 8000 	nop.w
     c18:	00000000 	.word	0x00000000
     c1c:	40600000 	.word	0x40600000
     c20:	00000000 	.word	0x00000000
     c24:	4176e360 	.word	0x4176e360
     c28:	00000000 	.word	0x00000000
     c2c:	40c38800 	.word	0x40c38800
     c30:	2000053c 	.word	0x2000053c
     c34:	269fb200 	.word	0x269fb200
     c38:	20008bb4 	.word	0x20008bb4
     c3c:	20000544 	.word	0x20000544
     c40:	20000564 	.word	0x20000564
     c44:	400d8000 	.word	0x400d8000
     c48:	ff7f7fff 	.word	0xff7f7fff
     c4c:	400fc000 	.word	0x400fc000
     c50:	fffffe00 	.word	0xfffffe00
     c54:	400ac000 	.word	0x400ac000
     c58:	fff7fff8 	.word	0xfff7fff8
     c5c:	016e3600 	.word	0x016e3600

00000c60 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c60:	4a1a      	ldr	r2, [pc, #104]	; (ccc <i2s_setup()+0x6c>)
     c62:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c64:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c66:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c6a:	4c19      	ldr	r4, [pc, #100]	; (cd0 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c6c:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c6e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c72:	2b00      	cmp	r3, #0
     c74:	db28      	blt.n	cc8 <i2s_setup()+0x68>
    int fs = fsamp;
     c76:	4b17      	ldr	r3, [pc, #92]	; (cd4 <i2s_setup()+0x74>)
     c78:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c7a:	f7ff ff21 	bl	ac0 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <i2s_setup()+0x78>)
     c80:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c82:	4916      	ldr	r1, [pc, #88]	; (cdc <i2s_setup()+0x7c>)
     c84:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c86:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c8a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c92:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c96:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c98:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     ca0:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     ca2:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     ca6:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     caa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cae:	490c      	ldr	r1, [pc, #48]	; (ce0 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     cb0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cb4:	4a0b      	ldr	r2, [pc, #44]	; (ce4 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     cb6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cba:	4b0b      	ldr	r3, [pc, #44]	; (ce8 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cbc:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cc0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cc8:	bd10      	pop	{r4, pc}
     cca:	bf00      	nop
     ccc:	400fc000 	.word	0x400fc000
     cd0:	40384000 	.word	0x40384000
     cd4:	20009534 	.word	0x20009534
     cd8:	401f8000 	.word	0x401f8000
     cdc:	401f8400 	.word	0x401f8400
     ce0:	0001001b 	.word	0x0001001b
     ce4:	1f1f1f00 	.word	0x1f1f1f00
     ce8:	92000001 	.word	0x92000001

00000cec <dma_setup()>:
  {
     cec:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     cee:	4c1c      	ldr	r4, [pc, #112]	; (d60 <dma_setup()+0x74>)
     cf0:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     cf2:	4d1c      	ldr	r5, [pc, #112]	; (d64 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     cf4:	4620      	mov	r0, r4
     cf6:	f00c fd53 	bl	d7a0 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cfa:	6823      	ldr	r3, [r4, #0]
     cfc:	481a      	ldr	r0, [pc, #104]	; (d68 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     d02:	491a      	ldr	r1, [pc, #104]	; (d6c <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d04:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     d06:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d08:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d0a:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     d0c:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d0e:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d10:	4d17      	ldr	r5, [pc, #92]	; (d70 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     d12:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d14:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d16:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d18:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d1a:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d1c:	2204      	movs	r2, #4
     d1e:	4915      	ldr	r1, [pc, #84]	; (d74 <dma_setup()+0x88>)
     d20:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d22:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d24:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d26:	4d14      	ldr	r5, [pc, #80]	; (d78 <dma_setup()+0x8c>)
     d28:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d2a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d2e:	4b13      	ldr	r3, [pc, #76]	; (d7c <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d30:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d34:	2101      	movs	r1, #1
     d36:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d38:	4811      	ldr	r0, [pc, #68]	; (d80 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3a:	f002 051f 	and.w	r5, r2, #31
     d3e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d42:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d46:	40a9      	lsls	r1, r5
     d48:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d4a:	4d0e      	ldr	r5, [pc, #56]	; (d84 <dma_setup()+0x98>)
     d4c:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d50:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d52:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d54:	490c      	ldr	r1, [pc, #48]	; (d88 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d56:	4b0d      	ldr	r3, [pc, #52]	; (d8c <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d58:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d5a:	7922      	ldrb	r2, [r4, #4]
     d5c:	76da      	strb	r2, [r3, #27]
  }
     d5e:	bd38      	pop	{r3, r4, r5, pc}
     d60:	200243dc 	.word	0x200243dc
     d64:	02020000 	.word	0x02020000
     d68:	403840a0 	.word	0x403840a0
     d6c:	20200000 	.word	0x20200000
     d70:	fffff800 	.word	0xfffff800
     d74:	400ec000 	.word	0x400ec000
     d78:	80000013 	.word	0x80000013
     d7c:	38003840 	.word	0x38003840
     d80:	20009800 	.word	0x20009800
     d84:	000009f5 	.word	0x000009f5
     d88:	e000e400 	.word	0xe000e400
     d8c:	400e8000 	.word	0x400e8000

00000d90 <acqModifyFrequency(unsigned long)>:
  {
     d90:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d92:	4c08      	ldr	r4, [pc, #32]	; (db4 <acqModifyFrequency(unsigned long)+0x24>)
     d94:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     d9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     da0:	f7ff fe8e 	bl	ac0 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     da4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     da8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     dac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	40384000 	.word	0x40384000

00000db8 <_GLOBAL__sub_I_procCount>:
		begin();
     db8:	4805      	ldr	r0, [pc, #20]	; (dd0 <_GLOBAL__sub_I_procCount+0x18>)
     dba:	2100      	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     dbc:	b508      	push	{r3, lr}
     dbe:	f00c fcef 	bl	d7a0 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     dc2:	4a04      	ldr	r2, [pc, #16]	; (dd4 <_GLOBAL__sub_I_procCount+0x1c>)
     dc4:	4904      	ldr	r1, [pc, #16]	; (dd8 <_GLOBAL__sub_I_procCount+0x20>)
     dc6:	4802      	ldr	r0, [pc, #8]	; (dd0 <_GLOBAL__sub_I_procCount+0x18>)
}
     dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     dcc:	f00f bb70 	b.w	104b0 <__aeabi_atexit>
     dd0:	200243dc 	.word	0x200243dc
     dd4:	20008f90 	.word	0x20008f90
     dd8:	000009e9 	.word	0x000009e9

00000ddc <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
     ddc:	b410      	push	{r4}
      GPIO8_GDIR |= 1<<26;
     dde:	4b0a      	ldr	r3, [pc, #40]	; (e08 <usbPowerSetup()+0x2c>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     de0:	2405      	movs	r4, #5
     de2:	4a0a      	ldr	r2, [pc, #40]	; (e0c <usbPowerSetup()+0x30>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     de4:	2008      	movs	r0, #8
      GPIO8_DR_SET = 1<<26;
     de6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     dea:	f8c2 40b4 	str.w	r4, [r2, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     dee:	f8c2 02a4 	str.w	r0, [r2, #676]	; 0x2a4
      #if USB_POWER==1
        usbPowerInit();
        usbPowerOn();
        delay(1000);
     df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      GPIO8_GDIR |= 1<<26;
     df6:	685a      	ldr	r2, [r3, #4]
      #endif
    }
     df8:	f85d 4b04 	ldr.w	r4, [sp], #4
      GPIO8_GDIR |= 1<<26;
     dfc:	430a      	orrs	r2, r1
     dfe:	605a      	str	r2, [r3, #4]
      GPIO8_DR_SET = 1<<26;
     e00:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
        delay(1000);
     e04:	f00d b8c6 	b.w	df94 <delay>
     e08:	42008000 	.word	0x42008000
     e0c:	401f8000 	.word	0x401f8000

00000e10 <acqPower(int)>:

    void acqPower(int flag)
    {   
     e10:	4601      	mov	r1, r0
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
     e12:	2021      	movs	r0, #33	; 0x21
    {   
     e14:	b508      	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
     e16:	b2c9      	uxtb	r1, r1
     e18:	f00d f93a 	bl	e090 <digitalWrite>
            delay(100);
     e1c:	2064      	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
     e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            delay(100);
     e22:	f00d b8b7 	b.w	df94 <delay>
     e26:	bf00      	nop

00000e28 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
     e28:	2100      	movs	r1, #0
     e2a:	2020      	movs	r0, #32
     e2c:	f00d b930 	b.w	e090 <digitalWrite>

00000e30 <adc_init()>:
    { digitalWrite(ADC_SHDNZ,HIGH); 
    }


    void adc_init(void)
    {
     e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
     e34:	2101      	movs	r1, #1
    {
     e36:	b082      	sub	sp, #8
            pinMode(ADC_EN,OUTPUT);
     e38:	2021      	movs	r0, #33	; 0x21
     e3a:	f00d f953 	bl	e0e4 <pinMode>
            digitalWrite(ADC_EN,flag);
     e3e:	2101      	movs	r1, #1
     e40:	2021      	movs	r0, #33	; 0x21
     e42:	f00d f925 	bl	e090 <digitalWrite>
            delay(100);
     e46:	2064      	movs	r0, #100	; 0x64
     e48:	f00d f8a4 	bl	df94 <delay>
        #endif
        acqPower(HIGH);

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
     e4c:	2101      	movs	r1, #1
     e4e:	2020      	movs	r0, #32
     e50:	f00d f948 	bl	e0e4 <pinMode>
    { digitalWrite(ADC_SHDNZ,LOW); 
     e54:	2100      	movs	r1, #0
     e56:	2020      	movs	r0, #32
     e58:	f00d f91a 	bl	e090 <digitalWrite>
        adcReset();
        delay(100);
     e5c:	2064      	movs	r0, #100	; 0x64
     e5e:	f00d f899 	bl	df94 <delay>
    { digitalWrite(ADC_SHDNZ,HIGH); 
     e62:	2101      	movs	r1, #1
     e64:	2020      	movs	r0, #32
     e66:	f00d f913 	bl	e090 <digitalWrite>
        adcStart();

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
     e6a:	4a56      	ldr	r2, [pc, #344]	; (fc4 <adc_init()+0x194>)
     e6c:	4956      	ldr	r1, [pc, #344]	; (fc8 <adc_init()+0x198>)
     e6e:	a801      	add	r0, sp, #4
     e70:	f001 f87a 	bl	1f68 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
     e74:	214c      	movs	r1, #76	; 0x4c
     e76:	a801      	add	r0, sp, #4
     e78:	f001 f88a 	bl	1f90 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e7c:	224c      	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
     e7e:	2800      	cmp	r0, #0
     e80:	f000 809b 	beq.w	fba <adc_init()+0x18a>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e84:	4951      	ldr	r1, [pc, #324]	; (fcc <adc_init()+0x19c>)
     e86:	4852      	ldr	r0, [pc, #328]	; (fd0 <adc_init()+0x1a0>)
     e88:	f00c fd9e 	bl	d9c8 <Print::printf(char const*, ...)>
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
     e8c:	2381      	movs	r3, #129	; 0x81
     e8e:	2202      	movs	r2, #2
     e90:	214c      	movs	r1, #76	; 0x4c
     e92:	a801      	add	r0, sp, #4
     e94:	f001 f8ca 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
     e98:	2330      	movs	r3, #48	; 0x30
     e9a:	2207      	movs	r2, #7
     e9c:	214c      	movs	r1, #76	; 0x4c
     e9e:	a801      	add	r0, sp, #4
     ea0:	4d4c      	ldr	r5, [pc, #304]	; (fd4 <adc_init()+0x1a4>)
     ea2:	f001 f8c3 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
     ea6:	2300      	movs	r3, #0
     ea8:	2208      	movs	r2, #8
     eaa:	214c      	movs	r1, #76	; 0x4c
     eac:	a801      	add	r0, sp, #4
     eae:	240b      	movs	r4, #11
     eb0:	f001 f8bc 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
     eb4:	2302      	movs	r3, #2

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eb6:	4622      	mov	r2, r4
            for(int jj=0;jj<4;jj++)
     eb8:	3401      	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eba:	214c      	movs	r1, #76	; 0x4c
     ebc:	a801      	add	r0, sp, #4
            for(int jj=0;jj<4;jj++)
     ebe:	b2e4      	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     ec0:	f001 f8b4 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
     ec4:	2c0f      	cmp	r4, #15
     ec6:	d002      	beq.n	ece <adc_init()+0x9e>
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     ec8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
     ecc:	e7f3      	b.n	eb6 <adc_init()+0x86>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
     ece:	2330      	movs	r3, #48	; 0x30
     ed0:	2273      	movs	r2, #115	; 0x73
     ed2:	214c      	movs	r1, #76	; 0x4c
     ed4:	a801      	add	r0, sp, #4
     ed6:	f001 f8a9 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
     eda:	4d3f      	ldr	r5, [pc, #252]	; (fd8 <adc_init()+0x1a8>)
     edc:	2320      	movs	r3, #32
     ede:	2274      	movs	r2, #116	; 0x74
     ee0:	214c      	movs	r1, #76	; 0x4c
     ee2:	a801      	add	r0, sp, #4
     ee4:	f001 f8a2 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
     ee8:	23e0      	movs	r3, #224	; 0xe0
     eea:	2275      	movs	r2, #117	; 0x75
     eec:	214c      	movs	r1, #76	; 0x4c
     eee:	a801      	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
     ef0:	243c      	movs	r4, #60	; 0x3c
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
     ef2:	f001 f89b 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
     ef6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; fec <adc_init()+0x1bc>
     efa:	2325      	movs	r3, #37	; 0x25
     efc:	226b      	movs	r2, #107	; 0x6b
     efe:	214c      	movs	r1, #76	; 0x4c
     f00:	a801      	add	r0, sp, #4
     f02:	1cef      	adds	r7, r5, #3
     f04:	4e35      	ldr	r6, [pc, #212]	; (fdc <adc_init()+0x1ac>)
     f06:	f001 f891 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
     f0a:	2360      	movs	r3, #96	; 0x60
     f0c:	223b      	movs	r2, #59	; 0x3b
     f0e:	214c      	movs	r1, #76	; 0x4c
     f10:	a801      	add	r0, sp, #4
     f12:	f001 f88b 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0; jj<4; jj++)
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     f16:	4622      	mov	r2, r4
     f18:	2388      	movs	r3, #136	; 0x88
     f1a:	214c      	movs	r1, #76	; 0x4c
     f1c:	a801      	add	r0, sp, #4
     f1e:	f001 f885 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     f22:	f8b8 3000 	ldrh.w	r3, [r8]
     f26:	1c62      	adds	r2, r4, #1
     f28:	214c      	movs	r1, #76	; 0x4c
     f2a:	b2db      	uxtb	r3, r3
     f2c:	a801      	add	r0, sp, #4
     f2e:	b2d2      	uxtb	r2, r2
     f30:	f001 f87c 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
     f34:	8833      	ldrh	r3, [r6, #0]
     f36:	1ca2      	adds	r2, r4, #2
     f38:	214c      	movs	r1, #76	; 0x4c
     f3a:	3b37      	subs	r3, #55	; 0x37
     f3c:	a801      	add	r0, sp, #4
     f3e:	b2d2      	uxtb	r2, r2
     f40:	b2db      	uxtb	r3, r3
     f42:	f001 f873 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
     f46:	1ce2      	adds	r2, r4, #3
     f48:	2380      	movs	r3, #128	; 0x80
     f4a:	214c      	movs	r1, #76	; 0x4c
     f4c:	b2d2      	uxtb	r2, r2
     f4e:	a801      	add	r0, sp, #4
     f50:	f001 f86c 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
     f54:	1d22      	adds	r2, r4, #4
     f56:	2300      	movs	r3, #0
     f58:	214c      	movs	r1, #76	; 0x4c
     f5a:	b2d2      	uxtb	r2, r2
     f5c:	a801      	add	r0, sp, #4
     f5e:	f001 f865 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
     f62:	42bd      	cmp	r5, r7
     f64:	d002      	beq.n	f6c <adc_init()+0x13c>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     f66:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     f6a:	e7d4      	b.n	f16 <adc_init()+0xe6>
     f6c:	2106      	movs	r1, #6
     f6e:	481c      	ldr	r0, [pc, #112]	; (fe0 <adc_init()+0x1b0>)
     f70:	f00f f894 	bl	1009c <usb_serial_write>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
     f74:	2215      	movs	r2, #21
     f76:	214c      	movs	r1, #76	; 0x4c
     f78:	a801      	add	r0, sp, #4
     f7a:	f001 f81d 	bl	1fb8 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f7e:	2300      	movs	r3, #0
     f80:	4601      	mov	r1, r0
     f82:	2210      	movs	r2, #16
     f84:	4812      	ldr	r0, [pc, #72]	; (fd0 <adc_init()+0x1a0>)
     f86:	f00c fd2d 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     f8a:	4811      	ldr	r0, [pc, #68]	; (fd0 <adc_init()+0x1a0>)
     f8c:	f00c fd00 	bl	d990 <Print::println()>
     f90:	2106      	movs	r1, #6
     f92:	4814      	ldr	r0, [pc, #80]	; (fe4 <adc_init()+0x1b4>)
     f94:	f00f f882 	bl	1009c <usb_serial_write>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
     f98:	2276      	movs	r2, #118	; 0x76
     f9a:	214c      	movs	r1, #76	; 0x4c
     f9c:	a801      	add	r0, sp, #4
     f9e:	f001 f80b 	bl	1fb8 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     fa2:	2300      	movs	r3, #0
     fa4:	4601      	mov	r1, r0
     fa6:	2210      	movs	r2, #16
     fa8:	4809      	ldr	r0, [pc, #36]	; (fd0 <adc_init()+0x1a0>)
     faa:	f00c fd1b 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     fae:	4808      	ldr	r0, [pc, #32]	; (fd0 <adc_init()+0x1a0>)
     fb0:	f00c fcee 	bl	d990 <Print::println()>
            
        }
    }
     fb4:	b002      	add	sp, #8
     fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
     fba:	490b      	ldr	r1, [pc, #44]	; (fe8 <adc_init()+0x1b8>)
     fbc:	4804      	ldr	r0, [pc, #16]	; (fd0 <adc_init()+0x1a0>)
     fbe:	f00c fd03 	bl	d9c8 <Print::printf(char const*, ...)>
     fc2:	e763      	b.n	e8c <adc_init()+0x5c>
     fc4:	000186a0 	.word	0x000186a0
     fc8:	20008d04 	.word	0x20008d04
     fcc:	200007dc 	.word	0x200007dc
     fd0:	20008bb4 	.word	0x20008bb4
     fd4:	200009fc 	.word	0x200009fc
     fd8:	200009f8 	.word	0x200009f8
     fdc:	20025bb8 	.word	0x20025bb8
     fe0:	20000800 	.word	0x20000800
     fe4:	20000808 	.word	0x20000808
     fe8:	200007e8 	.word	0x200007e8
     fec:	20009572 	.word	0x20009572

00000ff0 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	b082      	sub	sp, #8
     ff4:	4605      	mov	r5, r0
     ff6:	4c0b      	ldr	r4, [pc, #44]	; (1024 <setAGain(signed char)+0x34>)
        i2c_class i2c(&mWire,100'000);
     ff8:	4a0b      	ldr	r2, [pc, #44]	; (1028 <setAGain(signed char)+0x38>)
     ffa:	a801      	add	r0, sp, #4
     ffc:	490b      	ldr	r1, [pc, #44]	; (102c <setAGain(signed char)+0x3c>)
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     ffe:	b2ed      	uxtb	r5, r5
        i2c_class i2c(&mWire,100'000);
    1000:	f000 ffb2 	bl	1f68 <i2c_class::i2c_class(TwoWire*, unsigned long)>
            for(int jj=0; jj<4; jj++)
    1004:	1ce6      	adds	r6, r4, #3
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    1006:	223c      	movs	r2, #60	; 0x3c
    1008:	3201      	adds	r2, #1
    100a:	462b      	mov	r3, r5
    100c:	214c      	movs	r1, #76	; 0x4c
    100e:	a801      	add	r0, sp, #4
    1010:	b2d2      	uxtb	r2, r2
    1012:	f001 f80b 	bl	202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    1016:	42b4      	cmp	r4, r6
    1018:	d002      	beq.n	1020 <setAGain(signed char)+0x30>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    101a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    101e:	e7f3      	b.n	1008 <setAGain(signed char)+0x18>
            }
    }
    1020:	b002      	add	sp, #8
    1022:	bd70      	pop	{r4, r5, r6, pc}
    1024:	200009f8 	.word	0x200009f8
    1028:	000186a0 	.word	0x000186a0
    102c:	20008d04 	.word	0x20008d04

00001030 <adcStatus()>:
    void adcStatus(void)
    {
    1030:	b510      	push	{r4, lr}
    1032:	b082      	sub	sp, #8
        i2c_class i2c(&mWire,100'000);
    1034:	4a14      	ldr	r2, [pc, #80]	; (1088 <adcStatus()+0x58>)
    1036:	4915      	ldr	r1, [pc, #84]	; (108c <adcStatus()+0x5c>)
    1038:	a801      	add	r0, sp, #4
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    103a:	4c15      	ldr	r4, [pc, #84]	; (1090 <adcStatus()+0x60>)
    103c:	f000 ff94 	bl	1f68 <i2c_class::i2c_class(TwoWire*, unsigned long)>
    1040:	2107      	movs	r1, #7
    1042:	4814      	ldr	r0, [pc, #80]	; (1094 <adcStatus()+0x64>)
    1044:	f00f f82a 	bl	1009c <usb_serial_write>
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    1048:	2215      	movs	r2, #21
    104a:	214c      	movs	r1, #76	; 0x4c
    104c:	a801      	add	r0, sp, #4
    104e:	f000 ffb3 	bl	1fb8 <i2c_class::read(unsigned char, unsigned char)>
    1052:	2300      	movs	r3, #0
    1054:	4601      	mov	r1, r0
    1056:	2210      	movs	r2, #16
    1058:	4620      	mov	r0, r4
    105a:	f00c fcc3 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    105e:	2107      	movs	r1, #7
    1060:	480d      	ldr	r0, [pc, #52]	; (1098 <adcStatus()+0x68>)
    1062:	f00f f81b 	bl	1009c <usb_serial_write>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    1066:	2276      	movs	r2, #118	; 0x76
    1068:	214c      	movs	r1, #76	; 0x4c
    106a:	a801      	add	r0, sp, #4
    106c:	f000 ffa4 	bl	1fb8 <i2c_class::read(unsigned char, unsigned char)>
    1070:	2300      	movs	r3, #0
    1072:	4601      	mov	r1, r0
    1074:	2210      	movs	r2, #16
    1076:	4620      	mov	r0, r4
    1078:	f00c fcb4 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    107c:	4620      	mov	r0, r4
    107e:	f00c fc87 	bl	d990 <Print::println()>
    }
    1082:	b002      	add	sp, #8
    1084:	bd10      	pop	{r4, pc}
    1086:	bf00      	nop
    1088:	000186a0 	.word	0x000186a0
    108c:	20008d04 	.word	0x20008d04
    1090:	20008bb4 	.word	0x20008bb4
    1094:	2000082c 	.word	0x2000082c
    1098:	20000834 	.word	0x20000834

0000109c <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a0:	b083      	sub	sp, #12
    10a2:	4605      	mov	r5, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    10a4:	f00d fcee 	bl	ea84 <rtc_get>
    10a8:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
    10aa:	f00c ffc7 	bl	e03c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10ae:	4ba2      	ldr	r3, [pc, #648]	; (1338 <compress(void*)+0x29c>)
    10b0:	1f2c      	subs	r4, r5, #4
  t1 = micros();
    10b2:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10b4:	6819      	ldr	r1, [r3, #0]
    10b6:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    10ba:	4623      	mov	r3, r4
    10bc:	1f0a      	subs	r2, r1, #4
    10be:	f853 0f04 	ldr.w	r0, [r3, #4]!
    10c2:	429d      	cmp	r5, r3
    10c4:	f842 0f04 	str.w	r0, [r2, #4]!
    10c8:	d1f9      	bne.n	10be <compress(void*)+0x22>
    10ca:	f501 70fe 	add.w	r0, r1, #508	; 0x1fc
    10ce:	460b      	mov	r3, r1
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    10d0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    10d4:	f854 5f04 	ldr.w	r5, [r4, #4]!
    10d8:	4298      	cmp	r0, r3
    10da:	eba2 0205 	sub.w	r2, r2, r5
    10de:	601a      	str	r2, [r3, #0]
    10e0:	d1f6      	bne.n	10d0 <compress(void*)+0x34>

  // find maximum in filtered data 
  int32_t mx = 0;
    10e2:	2200      	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    10e4:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    10e8:	2b00      	cmp	r3, #0
    10ea:	bfb8      	it	lt
    10ec:	425b      	neglt	r3, r3
    10ee:	429a      	cmp	r2, r3
    10f0:	bfb8      	it	lt
    10f2:	461a      	movlt	r2, r3
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    10f4:	4281      	cmp	r1, r0
    10f6:	d1f5      	bne.n	10e4 <compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    10f8:	2702      	movs	r7, #2
    10fa:	2001      	movs	r0, #1
    10fc:	e003      	b.n	1106 <compress(void*)+0x6a>
    10fe:	3701      	adds	r7, #1
    1100:	2f18      	cmp	r7, #24
    1102:	f000 810f 	beq.w	1324 <compress(void*)+0x288>
    1106:	1e79      	subs	r1, r7, #1
    1108:	fa00 f301 	lsl.w	r3, r0, r1
    110c:	4293      	cmp	r3, r2
    110e:	ddf6      	ble.n	10fe <compress(void*)+0x62>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    1110:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
    1114:	40b8      	lsls	r0, r7
  int ndat = NH + NCHAN_ACQ + ncmp;
    1116:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
    111a:	3801      	subs	r0, #1
  int ndat = NH + NCHAN_ACQ + ncmp;
    111c:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    111e:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
    1122:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
    1126:	4c85      	ldr	r4, [pc, #532]	; (133c <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
    1128:	4d85      	ldr	r5, [pc, #532]	; (1340 <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
    112a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
    112e:	3201      	adds	r2, #1
    1130:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    1134:	682a      	ldr	r2, [r5, #0]
    1136:	4c83      	ldr	r4, [pc, #524]	; (1344 <compress(void*)+0x2a8>)
    1138:	42ba      	cmp	r2, r7
    113a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    113e:	46a3      	mov	fp, r4
    1140:	4622      	mov	r2, r4
    1142:	bf38      	it	cc
    1144:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    1146:	f852 1f04 	ldr.w	r1, [r2, #4]!
    114a:	4001      	ands	r1, r0
    114c:	42b2      	cmp	r2, r6
    114e:	6011      	str	r1, [r2, #0]
    1150:	d1f9      	bne.n	1146 <compress(void*)+0xaa>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    1152:	4d7d      	ldr	r5, [pc, #500]	; (1348 <compress(void*)+0x2ac>)
    1154:	f44f 7200 	mov.w	r2, #512	; 0x200
    1158:	2100      	movs	r1, #0
    115a:	9300      	str	r3, [sp, #0]
    115c:	4628      	mov	r0, r5
    115e:	f011 faab 	bl	126b8 <memset>
  *iptr++ = nb | shift<<16;
    1162:	4a7a      	ldr	r2, [pc, #488]	; (134c <compress(void*)+0x2b0>)
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    1164:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1166:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
    1168:	8812      	ldrh	r2, [r2, #0]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    116a:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    116e:	2007      	movs	r0, #7
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    1170:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
    1172:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    1176:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1178:	f8db 2000 	ldr.w	r2, [fp]
    117c:	f8cb 1000 	str.w	r1, [fp]
    1180:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
    1182:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    1186:	602a      	str	r2, [r5, #0]
  *iptr++ = NCHAN_ACQ;
    1188:	2201      	movs	r2, #1
  *iptr++ = t1;
    118a:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCHAN_ACQ;
    118e:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    1190:	e00a      	b.n	11a8 <compress(void*)+0x10c>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    1192:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
    1196:	4694      	mov	ip, r2
    1198:	ea41 010e 	orr.w	r1, r1, lr
    119c:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11a0:	42a6      	cmp	r6, r4
    11a2:	d018      	beq.n	11d6 <compress(void*)+0x13a>
      {   outData[kk] |= (tempData[ii] << nx);
    11a4:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
    11a8:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
    11ac:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
    11ae:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
    11b2:	dcee      	bgt.n	1192 <compress(void*)+0xf6>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    11b4:	eba7 0e0c 	sub.w	lr, r7, ip
    11b8:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
    11bc:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
    11c0:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
    11c4:	d12f      	bne.n	1226 <compress(void*)+0x18a>
      {   outData[kk++] |= tempData[ii];
    11c6:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11c8:	42a6      	cmp	r6, r4
          nx=MBIT;
    11ca:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
    11ce:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    11d2:	4648      	mov	r0, r9
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11d4:	d1e6      	bne.n	11a4 <compress(void*)+0x108>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    11d6:	4e5e      	ldr	r6, [pc, #376]	; (1350 <compress(void*)+0x2b4>)
    11d8:	6834      	ldr	r4, [r6, #0]
    11da:	eb04 0208 	add.w	r2, r4, r8
    11de:	2a80      	cmp	r2, #128	; 0x80
    11e0:	dc2d      	bgt.n	123e <compress(void*)+0x1a2>
    11e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    11e6:	4a5b      	ldr	r2, [pc, #364]	; (1354 <compress(void*)+0x2b8>)
    11e8:	4857      	ldr	r0, [pc, #348]	; (1348 <compress(void*)+0x2ac>)
    11ea:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
    11ee:	4423      	add	r3, r4
    11f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    11f4:	2300      	movs	r3, #0
    11f6:	e001      	b.n	11fc <compress(void*)+0x160>
    11f8:	f850 1f04 	ldr.w	r1, [r0, #4]!
    11fc:	3301      	adds	r3, #1
    11fe:	f842 1f04 	str.w	r1, [r2, #4]!
    1202:	4543      	cmp	r3, r8
    1204:	dbf8      	blt.n	11f8 <compress(void*)+0x15c>
    1206:	f1b8 0f00 	cmp.w	r8, #0
    120a:	f108 33ff 	add.w	r3, r8, #4294967295
    120e:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
    1212:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1216:	bfd8      	it	le
    1218:	2300      	movle	r3, #0
    121a:	4423      	add	r3, r4
    121c:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    121e:	4638      	mov	r0, r7
    1220:	b003      	add	sp, #12
    1222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    1226:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
    122a:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    122e:	ea4e 0202 	orr.w	r2, lr, r2
    1232:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    1236:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
    1238:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
    123c:	e7b0      	b.n	11a0 <compress(void*)+0x104>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    123e:	2c7a      	cmp	r4, #122	; 0x7a
    1240:	dd22      	ble.n	1288 <compress(void*)+0x1ec>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    1242:	2c7f      	cmp	r4, #127	; 0x7f
    1244:	dc0a      	bgt.n	125c <compress(void*)+0x1c0>
    1246:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
    124a:	4842      	ldr	r0, [pc, #264]	; (1354 <compress(void*)+0x2b8>)
    124c:	2100      	movs	r1, #0
    124e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1252:	0092      	lsls	r2, r2, #2
    1254:	f011 fa30 	bl	126b8 <memset>
    1258:	2380      	movs	r3, #128	; 0x80
    125a:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
    125c:	483d      	ldr	r0, [pc, #244]	; (1354 <compress(void*)+0x2b8>)
    125e:	f003 fbd7 	bl	4a10 <pushData(unsigned long*)>
    1262:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1264:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1268:	4937      	ldr	r1, [pc, #220]	; (1348 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
    126a:	bf18      	it	ne
    126c:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    126e:	f1b8 0f00 	cmp.w	r8, #0
    1272:	4838      	ldr	r0, [pc, #224]	; (1354 <compress(void*)+0x2b8>)
    1274:	bfd8      	it	le
    1276:	2204      	movle	r2, #4
    1278:	f00d f990 	bl	e59c <memcpy>
}
    127c:	4638      	mov	r0, r7
    127e:	f8c6 8000 	str.w	r8, [r6]
    1282:	b003      	add	sp, #12
    1284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    1288:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
    128c:	4831      	ldr	r0, [pc, #196]	; (1354 <compress(void*)+0x2b8>)
    128e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1292:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    1296:	616b      	str	r3, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    1298:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    129c:	4d2a      	ldr	r5, [pc, #168]	; (1348 <compress(void*)+0x2ac>)
    129e:	4423      	add	r3, r4
    12a0:	4629      	mov	r1, r5
    12a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    12a6:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    12aa:	e001      	b.n	12b0 <compress(void*)+0x214>
    12ac:	f851 2f04 	ldr.w	r2, [r1, #4]!
    12b0:	f843 2f04 	str.w	r2, [r3, #4]!
    12b4:	4298      	cmp	r0, r3
    12b6:	d1f9      	bne.n	12ac <compress(void*)+0x210>
    12b8:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
    12ba:	4826      	ldr	r0, [pc, #152]	; (1354 <compress(void*)+0x2b8>)
    12bc:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
    12c0:	6033      	str	r3, [r6, #0]
    12c2:	f003 fba5 	bl	4a10 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12c6:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
    12c8:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
    12ca:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12cc:	4a22      	ldr	r2, [pc, #136]	; (1358 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
    12ce:	bf18      	it	ne
    12d0:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
    12d2:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12d6:	f8df e070 	ldr.w	lr, [pc, #112]	; 1348 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12da:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12dc:	f8df c074 	ldr.w	ip, [pc, #116]	; 1354 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
    12e0:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12e2:	ea42 0203 	orr.w	r2, r2, r3
    12e6:	f04f 0306 	mov.w	r3, #6
    12ea:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12ec:	6033      	str	r3, [r6, #0]
    12ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    12f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    12f6:	e89e 0003 	ldmia.w	lr, {r0, r1}
    12fa:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    12fe:	da8e      	bge.n	121e <compress(void*)+0x182>
    1300:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
    1304:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1308:	f10c 0008 	add.w	r0, ip, #8
    130c:	4442      	add	r2, r8
    130e:	0092      	lsls	r2, r2, #2
    1310:	f00d f944 	bl	e59c <memcpy>
    1314:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
    1318:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    131a:	4443      	add	r3, r8
    131c:	6033      	str	r3, [r6, #0]
}
    131e:	b003      	add	sp, #12
    1320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1324:	2267      	movs	r2, #103	; 0x67
    1326:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    132a:	f04f 0868 	mov.w	r8, #104	; 0x68
    132e:	2361      	movs	r3, #97	; 0x61
    1330:	2117      	movs	r1, #23
    1332:	9201      	str	r2, [sp, #4]
    1334:	e6f7      	b.n	1126 <compress(void*)+0x8a>
    1336:	bf00      	nop
    1338:	20009558 	.word	0x20009558
    133c:	200253a4 	.word	0x200253a4
    1340:	20025378 	.word	0x20025378
    1344:	20024ad4 	.word	0x20024ad4
    1348:	20024684 	.word	0x20024684
    134c:	20025bc4 	.word	0x20025bc4
    1350:	20024d28 	.word	0x20024d28
    1354:	200243e4 	.word	0x200243e4
    1358:	ffff0000 	.word	0xffff0000

0000135c <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    135c:	b570      	push	{r4, r5, r6, lr}
    135e:	b082      	sub	sp, #8
    1360:	4606      	mov	r6, r0
    1362:	4614      	mov	r4, r2
    1364:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    1366:	4668      	mov	r0, sp
    1368:	f003 fd24 	bl	4db4 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    136c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    1370:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    1374:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    1378:	2a0c      	cmp	r2, #12
    137a:	bf98      	it	ls
    137c:	f1bc 0f1f 	cmpls.w	ip, #31
    1380:	d804      	bhi.n	138c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    1382:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    1386:	b29b      	uxth	r3, r3
    1388:	2b7f      	cmp	r3, #127	; 0x7f
    138a:	d920      	bls.n	13ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    138c:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    1390:	f89d 2005 	ldrb.w	r2, [sp, #5]
    1394:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    139c:	2a17      	cmp	r2, #23
    139e:	bf98      	it	ls
    13a0:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    13a2:	f8a6 c000 	strh.w	ip, [r6]
    13a6:	d801      	bhi.n	13ac <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    13a8:	293b      	cmp	r1, #59	; 0x3b
    13aa:	d905      	bls.n	13b8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    13ac:	2300      	movs	r3, #0
    *ms10 = 0;
    13ae:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    13b0:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13b2:	7022      	strb	r2, [r4, #0]
}
    13b4:	b002      	add	sp, #8
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    13b8:	015b      	lsls	r3, r3, #5
    13ba:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    13be:	2200      	movs	r2, #0
    13c0:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    13c4:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    13c6:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13c8:	7022      	strb	r2, [r4, #0]
}
    13ca:	b002      	add	sp, #8
    13cc:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    13ce:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    13d2:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    13d6:	fa1f fc8c 	uxth.w	ip, ip
    13da:	e7d9      	b.n	1390 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

000013dc <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    13de:	b510      	push	{r4, lr}
    13e0:	4604      	mov	r4, r0
    13e2:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    13e6:	f009 fb71 	bl	aacc <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    13ea:	4620      	mov	r0, r4
    13ec:	bd10      	pop	{r4, pc}
    13ee:	bf00      	nop
    13f0:	20000c70 	.word	0x20000c70

000013f4 <checkEndOfFile(short) [clone .part.0]>:

    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    13f4:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  {
    uint32_t tt = rtc_get();
    13f6:	f00d fb45 	bl	ea84 <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    13fa:	4b10      	ldr	r3, [pc, #64]	; (143c <checkEndOfFile(short) [clone .part.0]+0x48>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    13fc:	4a10      	ldr	r2, [pc, #64]	; (1440 <checkEndOfFile(short) [clone .part.0]+0x4c>)
    uint32_t dt1 = tt % t_acq;
    13fe:	6819      	ldr	r1, [r3, #0]
    1400:	fbb0 f3f1 	udiv	r3, r0, r1
    1404:	fb01 0313 	mls	r3, r1, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1408:	6811      	ldr	r1, [r2, #0]
    140a:	428b      	cmp	r3, r1
    140c:	d213      	bcs.n	1436 <checkEndOfFile(short) [clone .part.0]+0x42>
    dta = dt1;
    140e:	6013      	str	r3, [r2, #0]
    //
    if(state == DOCLOSE)                // in case of DOCLOSE
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    1410:	490c      	ldr	r1, [pc, #48]	; (1444 <checkEndOfFile(short) [clone .part.0]+0x50>)
    1412:	4b0d      	ldr	r3, [pc, #52]	; (1448 <checkEndOfFile(short) [clone .part.0]+0x54>)
    1414:	680c      	ldr	r4, [r1, #0]
    1416:	681a      	ldr	r2, [r3, #0]
    1418:	4294      	cmp	r4, r2
    141a:	d90a      	bls.n	1432 <checkEndOfFile(short) [clone .part.0]+0x3e>
    {
      uint32_t dt2 = (tt % t_rep);
    141c:	680a      	ldr	r2, [r1, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    141e:	681b      	ldr	r3, [r3, #0]
      uint32_t dt2 = (tt % t_rep);
    1420:	fbb0 f1f2 	udiv	r1, r0, r2
    1424:	fb02 0011 	mls	r0, r2, r1, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1428:	4298      	cmp	r0, r3
    142a:	bf34      	ite	cc
    142c:	2003      	movcc	r0, #3
    142e:	2004      	movcs	r0, #4
    }
  }
  return state;

}
    1430:	bd10      	pop	{r4, pc}
    1432:	2003      	movs	r0, #3
    1434:	bd10      	pop	{r4, pc}
    dta = dt1;
    1436:	2002      	movs	r0, #2
    1438:	6013      	str	r3, [r2, #0]
}
    143a:	bd10      	pop	{r4, pc}
    143c:	20009550 	.word	0x20009550
    1440:	20024d1c 	.word	0x20024d1c
    1444:	20025b98 	.word	0x20025b98
    1448:	20009554 	.word	0x20009554

0000144c <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    144c:	b538      	push	{r3, r4, r5, lr}
    144e:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1450:	b149      	cbz	r1, 1466 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    1452:	4608      	mov	r0, r1
    1454:	460d      	mov	r5, r1
    1456:	f011 fd13 	bl	12e80 <strlen>
    145a:	6823      	ldr	r3, [r4, #0]
    145c:	4602      	mov	r2, r0
    145e:	4629      	mov	r1, r5
    1460:	685b      	ldr	r3, [r3, #4]
    1462:	4620      	mov	r0, r4
    1464:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1466:	4620      	mov	r0, r4
    1468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    146c:	f00c ba90 	b.w	d990 <Print::println()>

00001470 <timeStamp()>:
{
    1470:	b510      	push	{r4, lr}
    1472:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    1474:	4c0d      	ldr	r4, [pc, #52]	; (14ac <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    1476:	a804      	add	r0, sp, #16
    1478:	f003 fc9c 	bl	4db4 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    147c:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    1480:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    1484:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    1488:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    148c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1490:	e9cd 1000 	strd	r1, r0, [sp]
    1494:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    1498:	4620      	mov	r0, r4
    149a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    149e:	4904      	ldr	r1, [pc, #16]	; (14b0 <timeStamp()+0x40>)
    14a0:	f010 ff64 	bl	1236c <sprintf>
}
    14a4:	4620      	mov	r0, r4
    14a6:	b006      	add	sp, #24
    14a8:	bd10      	pop	{r4, pc}
    14aa:	bf00      	nop
    14ac:	20024d2c 	.word	0x20024d2c
    14b0:	2000086c 	.word	0x2000086c

000014b4 <headerInit(long, long, long, int)>:
  int nbytes=nbits/8;
    14b4:	2a00      	cmp	r2, #0
    14b6:	bfb4      	ite	lt
    14b8:	f102 0c07 	addlt.w	ip, r2, #7
    14bc:	4694      	movge	ip, r2
{
    14be:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
    14c0:	ea4f 0cec 	mov.w	ip, ip, asr #3
  memcpy(wav_hdr.rId,"RIFF",4);
    14c4:	4c32      	ldr	r4, [pc, #200]	; (1590 <headerInit(long, long, long, int)+0xdc>)
{
    14c6:	b083      	sub	sp, #12
  wav_hdr.nChannels=nchan;
    14c8:	fa1f fe81 	uxth.w	lr, r1
  wav_hdr.nSamplesPerSec=fsamp;
    14cc:	61a0      	str	r0, [r4, #24]
    14ce:	9301      	str	r3, [sp, #4]
  wav_hdr.nChannels=nchan;
    14d0:	f8a4 e016 	strh.w	lr, [r4, #22]
  wav_hdr.nBlockAlign=nchan*nbytes;
    14d4:	fb1c fe0e 	smulbb	lr, ip, lr
  strcpy(&wav_hdr.info[0], MAGIC);
    14d8:	4b2e      	ldr	r3, [pc, #184]	; (1594 <headerInit(long, long, long, int)+0xe0>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14da:	fb00 fc0c 	mul.w	ip, r0, ip
  wav_hdr.nBlockAlign=nchan*nbytes;
    14de:	f8a4 e020 	strh.w	lr, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14e2:	fb01 f50c 	mul.w	r5, r1, ip
  wav_hdr.nBitsPerSamples=nbits;
    14e6:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14e8:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    14ea:	e893 0003 	ldmia.w	r3, {r0, r1}
    14ee:	4b2a      	ldr	r3, [pc, #168]	; (1598 <headerInit(long, long, long, int)+0xe4>)
    14f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  memcpy(wav_hdr.rId,"RIFF",4);
    14f4:	4929      	ldr	r1, [pc, #164]	; (159c <headerInit(long, long, long, int)+0xe8>)
    14f6:	681d      	ldr	r5, [r3, #0]
    14f8:	6021      	str	r1, [r4, #0]
  memcpy(wav_hdr.fId,"fmt ",4);
    14fa:	4929      	ldr	r1, [pc, #164]	; (15a0 <headerInit(long, long, long, int)+0xec>)
  memcpy(wav_hdr.wId,"WAVE",4);
    14fc:	4b29      	ldr	r3, [pc, #164]	; (15a4 <headerInit(long, long, long, int)+0xf0>)
  memcpy(wav_hdr.fId,"fmt ",4);
    14fe:	60e1      	str	r1, [r4, #12]
  memcpy(wav_hdr.iId,"info",4);
    1500:	f101 419d 	add.w	r1, r1, #1317011456	; 0x4e800000
  memcpy(wav_hdr.wId,"WAVE",4);
    1504:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.iId,"info",4);
    1506:	f501 01e4 	add.w	r1, r1, #7471104	; 0x720000
  memcpy(wav_hdr.dId,"data",4);
    150a:	4b27      	ldr	r3, [pc, #156]	; (15a8 <headerInit(long, long, long, int)+0xf4>)
  strcpy(&wav_hdr.info[0], MAGIC);
    150c:	62e0      	str	r0, [r4, #44]	; 0x2c
  memcpy(wav_hdr.dId,"data",4);
    150e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    1512:	f201 1103 	addw	r1, r1, #259	; 0x103
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    1516:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    151a:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen = 0x10;
    151c:	2110      	movs	r1, #16
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    151e:	6063      	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    1520:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
  wav_hdr.fLen = 0x10;
    1524:	6121      	str	r1, [r4, #16]
  wav_hdr.dLen = 0; // will be updated at closing
    1526:	2100      	movs	r1, #0
  wav_hdr.iLen = 512 - 13*4;
    1528:	62a3      	str	r3, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    152a:	2301      	movs	r3, #1
  wav_hdr.dLen = 0; // will be updated at closing
    152c:	f8c4 11fc 	str.w	r1, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    1530:	82a3      	strh	r3, [r4, #20]
  strcpy(&wav_hdr.info[4], timeStamp());
    1532:	f7ff ff9d 	bl	1470 <timeStamp()>
    1536:	4601      	mov	r1, r0
    1538:	f104 0030 	add.w	r0, r4, #48	; 0x30
    153c:	f011 fbee 	bl	12d1c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    1540:	9a01      	ldr	r2, [sp, #4]
    1542:	491a      	ldr	r1, [pc, #104]	; (15ac <headerInit(long, long, long, int)+0xf8>)
    1544:	f104 0040 	add.w	r0, r4, #64	; 0x40
    1548:	f010 ff10 	bl	1236c <sprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    154c:	64e5      	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    154e:	f003 fa47 	bl	49e0 <getStore()>
    1552:	4686      	mov	lr, r0
    1554:	f104 0c50 	add.w	ip, r4, #80	; 0x50
    1558:	6800      	ldr	r0, [r0, #0]
    155a:	f8de 1004 	ldr.w	r1, [lr, #4]
    155e:	f8de 2008 	ldr.w	r2, [lr, #8]
    1562:	f8de 300c 	ldr.w	r3, [lr, #12]
    1566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    156a:	f8de 0010 	ldr.w	r0, [lr, #16]
    156e:	f8de 1014 	ldr.w	r1, [lr, #20]
    1572:	f8de 301c 	ldr.w	r3, [lr, #28]
    1576:	f8de 2018 	ldr.w	r2, [lr, #24]
    157a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  strcpy(&wav_hdr.info[68]," end");
    157e:	4b0c      	ldr	r3, [pc, #48]	; (15b0 <headerInit(long, long, long, int)+0xfc>)
    1580:	e893 0003 	ldmia.w	r3, {r0, r1}
    1584:	6720      	str	r0, [r4, #112]	; 0x70
}
    1586:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[68]," end");
    1588:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
}
    158c:	b003      	add	sp, #12
    158e:	bd30      	pop	{r4, r5, pc}
    1590:	20024884 	.word	0x20024884
    1594:	20000418 	.word	0x20000418
    1598:	20025b88 	.word	0x20025b88
    159c:	46464952 	.word	0x46464952
    15a0:	20746d66 	.word	0x20746d66
    15a4:	45564157 	.word	0x45564157
    15a8:	61746164 	.word	0x61746164
    15ac:	20000420 	.word	0x20000420
    15b0:	20000428 	.word	0x20000428

000015b4 <writeHeader(char*)>:
{ 
    15b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    15b8:	4c21      	ldr	r4, [pc, #132]	; (1640 <writeHeader(char*)+0x8c>)
    15ba:	4607      	mov	r7, r0
    15bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    15be:	b373      	cbz	r3, 161e <writeHeader(char*)+0x6a>
    15c0:	695e      	ldr	r6, [r3, #20]
    15c2:	2500      	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    15c4:	4632      	mov	r2, r6
    15c6:	462b      	mov	r3, r5
    15c8:	491e      	ldr	r1, [pc, #120]	; (1644 <writeHeader(char*)+0x90>)
    15ca:	481f      	ldr	r0, [pc, #124]	; (1648 <writeHeader(char*)+0x94>)
    15cc:	f00c f9fc 	bl	d9c8 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    15d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15d2:	b1e0      	cbz	r0, 160e <writeHeader(char*)+0x5a>
    15d4:	2100      	movs	r1, #0
    15d6:	f007 ff47 	bl	9468 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    15da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15dc:	b170      	cbz	r0, 15fc <writeHeader(char*)+0x48>
    15de:	4639      	mov	r1, r7
    15e0:	f44f 7200 	mov.w	r2, #512	; 0x200
    15e4:	f008 f876 	bl	96d4 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    15e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15ea:	b1e8      	cbz	r0, 1628 <writeHeader(char*)+0x74>
    15ec:	b10d      	cbz	r5, 15f2 <writeHeader(char*)+0x3e>
}
    15ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f2:	4631      	mov	r1, r6
    15f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    15f8:	f007 bf36 	b.w	9468 <FatFile::seekSet(unsigned long)>
    15fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    15fe:	2800      	cmp	r0, #0
    1600:	d0f5      	beq.n	15ee <writeHeader(char*)+0x3a>
    1602:	4639      	mov	r1, r7
    1604:	f44f 7200 	mov.w	r2, #512	; 0x200
    1608:	f006 fd0a 	bl	8020 <ExFatFile::write(void const*, unsigned int)>
    160c:	e7ec      	b.n	15e8 <writeHeader(char*)+0x34>
    160e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    1610:	2800      	cmp	r0, #0
    1612:	d0ec      	beq.n	15ee <writeHeader(char*)+0x3a>
    1614:	2200      	movs	r2, #0
    1616:	2300      	movs	r3, #0
    1618:	f005 fed2 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    161c:	e7dd      	b.n	15da <writeHeader(char*)+0x26>
    161e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    1620:	b15b      	cbz	r3, 163a <writeHeader(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    1622:	e9d3 6500 	ldrd	r6, r5, [r3]
    1626:	e7cd      	b.n	15c4 <writeHeader(char*)+0x10>
    1628:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    162a:	2800      	cmp	r0, #0
    162c:	d0df      	beq.n	15ee <writeHeader(char*)+0x3a>
    162e:	4632      	mov	r2, r6
    1630:	462b      	mov	r3, r5
    1632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1636:	f005 bec3 	b.w	73c0 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    163a:	461e      	mov	r6, r3
    163c:	461d      	mov	r5, r3
    163e:	e7c1      	b.n	15c4 <writeHeader(char*)+0x10>
    1640:	20025304 	.word	0x20025304
    1644:	200004f8 	.word	0x200004f8
    1648:	20008bb4 	.word	0x20008bb4

0000164c <makeHeader(long*)>:
{
    164c:	b530      	push	{r4, r5, lr}
    164e:	b089      	sub	sp, #36	; 0x24
    1650:	4604      	mov	r4, r0
    rtc_get_datetime(&t);
    1652:	a806      	add	r0, sp, #24
    1654:	f003 fbae 	bl	4db4 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    1658:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    165c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1660:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1664:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1668:	e9cd 3003 	strd	r3, r0, [sp, #12]
    166c:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1670:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1674:	9000      	str	r0, [sp, #0]
    1676:	4620      	mov	r0, r4
    1678:	e9cd 2101 	strd	r2, r1, [sp, #4]
    167c:	4a17      	ldr	r2, [pc, #92]	; (16dc <makeHeader(long*)+0x90>)
    167e:	4918      	ldr	r1, [pc, #96]	; (16e0 <makeHeader(long*)+0x94>)
    1680:	f010 fe74 	bl	1236c <sprintf>
    header[7] = fsamp;
    1684:	4917      	ldr	r1, [pc, #92]	; (16e4 <makeHeader(long*)+0x98>)
    header[9] = t_acq;
    1686:	4b18      	ldr	r3, [pc, #96]	; (16e8 <makeHeader(long*)+0x9c>)
    header[7] = fsamp;
    1688:	680d      	ldr	r5, [r1, #0]
    header[10] = t_on;
    168a:	4818      	ldr	r0, [pc, #96]	; (16ec <makeHeader(long*)+0xa0>)
    header[9] = t_acq;
    168c:	681b      	ldr	r3, [r3, #0]
    header[11] = t_rep;
    168e:	4a18      	ldr	r2, [pc, #96]	; (16f0 <makeHeader(long*)+0xa4>)
    header[10] = t_on;
    1690:	6800      	ldr	r0, [r0, #0]
    header[9] = t_acq;
    1692:	6263      	str	r3, [r4, #36]	; 0x24
    header[11] = t_rep;
    1694:	6812      	ldr	r2, [r2, #0]
    header[6] = SerNum;      // serial number
    1696:	4917      	ldr	r1, [pc, #92]	; (16f4 <makeHeader(long*)+0xa8>)
    header[12] = proc;
    1698:	4b17      	ldr	r3, [pc, #92]	; (16f8 <makeHeader(long*)+0xac>)
    header[6] = SerNum;      // serial number
    169a:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
    169c:	881b      	ldrh	r3, [r3, #0]
    header[11] = t_rep;
    169e:	62e2      	str	r2, [r4, #44]	; 0x2c
    header[13] = shift;
    16a0:	4a16      	ldr	r2, [pc, #88]	; (16fc <makeHeader(long*)+0xb0>)
    header[12] = proc;
    16a2:	b21b      	sxth	r3, r3
    header[6] = SerNum;      // serial number
    16a4:	61a1      	str	r1, [r4, #24]
    header[13] = shift;
    16a6:	8812      	ldrh	r2, [r2, #0]
    header[14] = again;
    16a8:	4915      	ldr	r1, [pc, #84]	; (1700 <makeHeader(long*)+0xb4>)
    header[13] = shift;
    16aa:	b212      	sxth	r2, r2
    header[12] = proc;
    16ac:	6323      	str	r3, [r4, #48]	; 0x30
    header[14] = again;
    16ae:	880b      	ldrh	r3, [r1, #0]
    header[13] = shift;
    16b0:	6362      	str	r2, [r4, #52]	; 0x34
    header[14] = again;
    16b2:	b21b      	sxth	r3, r3
    header[15] = dgain;
    16b4:	4913      	ldr	r1, [pc, #76]	; (1704 <makeHeader(long*)+0xb8>)
    16b6:	4a14      	ldr	r2, [pc, #80]	; (1708 <makeHeader(long*)+0xbc>)
    header[14] = again;
    16b8:	63a3      	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    16ba:	880b      	ldrh	r3, [r1, #0]
    16bc:	6812      	ldr	r2, [r2, #0]
    16be:	b21b      	sxth	r3, r3
    header[7] = fsamp;
    16c0:	61e5      	str	r5, [r4, #28]
    header[10] = t_on;
    16c2:	62a0      	str	r0, [r4, #40]	; 0x28
    header[5] = 20;          // SW version
    16c4:	2514      	movs	r5, #20
    header[8] = NCHAN_ACQ;
    16c6:	2001      	movs	r0, #1
    header[16] = millis();
    16c8:	6422      	str	r2, [r4, #64]	; 0x40
    header[127]=0x55555555;
    16ca:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    16ce:	6165      	str	r5, [r4, #20]
    header[8] = NCHAN_ACQ;
    16d0:	6220      	str	r0, [r4, #32]
    header[15] = dgain;
    16d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    16d4:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
}
    16d8:	b009      	add	sp, #36	; 0x24
    16da:	bd30      	pop	{r4, r5, pc}
    16dc:	20000418 	.word	0x20000418
    16e0:	20000430 	.word	0x20000430
    16e4:	20009534 	.word	0x20009534
    16e8:	20009550 	.word	0x20009550
    16ec:	20009554 	.word	0x20009554
    16f0:	20025b98 	.word	0x20025b98
    16f4:	2000c1c8 	.word	0x2000c1c8
    16f8:	20025bbe 	.word	0x20025bbe
    16fc:	20025bc4 	.word	0x20025bc4
    1700:	20009572 	.word	0x20009572
    1704:	20025bb8 	.word	0x20025bb8
    1708:	20025b88 	.word	0x20025b88

0000170c <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    170c:	b530      	push	{r4, r5, lr}
    170e:	b087      	sub	sp, #28
    1710:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1712:	a804      	add	r0, sp, #16
    1714:	f003 fb4e 	bl	4db4 <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    1718:	4915      	ldr	r1, [pc, #84]	; (1770 <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    171a:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(d==d0) return 0; // same day
    171e:	680b      	ldr	r3, [r1, #0]
    1720:	429a      	cmp	r2, r3
    1722:	d022      	beq.n	176a <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1724:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    1728:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <newDirectory(char*)+0x68>)
    172e:	e9cd 5202 	strd	r5, r2, [sp, #8]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	9001      	str	r0, [sp, #4]
    1736:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  d0=d;
    173a:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    173c:	4a0e      	ldr	r2, [pc, #56]	; (1778 <newDirectory(char*)+0x6c>)
    173e:	490f      	ldr	r1, [pc, #60]	; (177c <newDirectory(char*)+0x70>)
    1740:	9000      	str	r0, [sp, #0]
    1742:	4620      	mov	r0, r4
    1744:	f010 fe12 	bl	1236c <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    1748:	480d      	ldr	r0, [pc, #52]	; (1780 <newDirectory(char*)+0x74>)
    174a:	f00c f921 	bl	d990 <Print::println()>
    174e:	2102      	movs	r1, #2
    1750:	480c      	ldr	r0, [pc, #48]	; (1784 <newDirectory(char*)+0x78>)
    1752:	f00e fca3 	bl	1009c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1756:	4620      	mov	r0, r4
    1758:	f011 fb92 	bl	12e80 <strlen>
    175c:	4601      	mov	r1, r0
    175e:	4620      	mov	r0, r4
    1760:	f00e fc9c 	bl	1009c <usb_serial_write>
          return 1;   // have new directory
    1764:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    1766:	b007      	add	sp, #28
    1768:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    176a:	2000      	movs	r0, #0
}
    176c:	b007      	add	sp, #28
    176e:	bd30      	pop	{r4, r5, pc}
    1770:	20008f84 	.word	0x20008f84
    1774:	2000c1c8 	.word	0x2000c1c8
    1778:	20000504 	.word	0x20000504
    177c:	20000508 	.word	0x20000508
    1780:	20008bb4 	.word	0x20008bb4
    1784:	20000804 	.word	0x20000804

00001788 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1788:	b510      	push	{r4, lr}
    178a:	b088      	sub	sp, #32
    178c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    178e:	a806      	add	r0, sp, #24
    1790:	f003 fb10 	bl	4db4 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1794:	4b25      	ldr	r3, [pc, #148]	; (182c <newFileName(char*)+0xa4>)
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1796:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    179a:	881b      	ldrh	r3, [r3, #0]
    179c:	b21b      	sxth	r3, r3
    179e:	bb83      	cbnz	r3, 1802 <newFileName(char*)+0x7a>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    17a0:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    17a4:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    17a8:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    17ac:	e9cd 3003 	strd	r3, r0, [sp, #12]
    17b0:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    17b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    17b8:	9000      	str	r0, [sp, #0]
    17ba:	4620      	mov	r0, r4
    17bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
    17c0:	4a1b      	ldr	r2, [pc, #108]	; (1830 <newFileName(char*)+0xa8>)
    17c2:	491c      	ldr	r1, [pc, #112]	; (1834 <newFileName(char*)+0xac>)
    17c4:	f010 fdd2 	bl	1236c <sprintf>
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    17c8:	481b      	ldr	r0, [pc, #108]	; (1838 <newFileName(char*)+0xb0>)
    17ca:	f00c f8e1 	bl	d990 <Print::println()>
    17ce:	2102      	movs	r1, #2
    17d0:	481a      	ldr	r0, [pc, #104]	; (183c <newFileName(char*)+0xb4>)
    17d2:	f00e fc63 	bl	1009c <usb_serial_write>
    17d6:	4620      	mov	r0, r4
    17d8:	f011 fb52 	bl	12e80 <strlen>
    17dc:	4601      	mov	r1, r0
    17de:	4620      	mov	r0, r4
    17e0:	f00e fc5c 	bl	1009c <usb_serial_write>
    17e4:	2101      	movs	r1, #1
    17e6:	4816      	ldr	r0, [pc, #88]	; (1840 <newFileName(char*)+0xb8>)
    17e8:	f00e fc58 	bl	1009c <usb_serial_write>
    Serial.print(" "); Serial.print(micros());
    17ec:	f00c fc26 	bl	e03c <micros>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    17f0:	2300      	movs	r3, #0
    17f2:	4601      	mov	r1, r0
    17f4:	220a      	movs	r2, #10
    17f6:	4810      	ldr	r0, [pc, #64]	; (1838 <newFileName(char*)+0xb0>)
    17f8:	f00c f8f4 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    return 1;
}
    17fc:	2001      	movs	r0, #1
    17fe:	b008      	add	sp, #32
    1800:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1802:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1806:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    180a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    180e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1812:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1816:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    181a:	9000      	str	r0, [sp, #0]
    181c:	4620      	mov	r0, r4
    181e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1822:	4a03      	ldr	r2, [pc, #12]	; (1830 <newFileName(char*)+0xa8>)
    1824:	4907      	ldr	r1, [pc, #28]	; (1844 <newFileName(char*)+0xbc>)
    1826:	f010 fda1 	bl	1236c <sprintf>
    182a:	e7cd      	b.n	17c8 <newFileName(char*)+0x40>
    182c:	20025bbe 	.word	0x20025bbe
    1830:	2000048c 	.word	0x2000048c
    1834:	20000490 	.word	0x20000490
    1838:	20008bb4 	.word	0x20008bb4
    183c:	20000804 	.word	0x20000804
    1840:	20000bf0 	.word	0x20000bf0
    1844:	200004b0 	.word	0x200004b0

00001848 <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1848:	4b2a      	ldr	r3, [pc, #168]	; (18f4 <getAlarmTime(unsigned long)+0xac>)
    184a:	492b      	ldr	r1, [pc, #172]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    184c:	4a2b      	ldr	r2, [pc, #172]	; (18fc <getAlarmTime(unsigned long)+0xb4>)
{   // estimate the wakup-time in seconds 
    184e:	b430      	push	{r4, r5}
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1850:	fba3 4300 	umull	r4, r3, r3, r0
    1854:	0c1b      	lsrs	r3, r3, #16
    1856:	fb01 0313 	mls	r3, r1, r3, r0

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    185a:	4929      	ldr	r1, [pc, #164]	; (1900 <getAlarmTime(unsigned long)+0xb8>)
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    185c:	fba2 2303 	umull	r2, r3, r2, r3
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1860:	680c      	ldr	r4, [r1, #0]
    1862:	ebb4 2fd3 	cmp.w	r4, r3, lsr #11
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1866:	ea4f 22d3 	mov.w	r2, r3, lsr #11
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    186a:	d80c      	bhi.n	1886 <getAlarmTime(unsigned long)+0x3e>
    186c:	4b25      	ldr	r3, [pc, #148]	; (1904 <getAlarmTime(unsigned long)+0xbc>)
    186e:	681b      	ldr	r3, [r3, #0]
    1870:	4293      	cmp	r3, r2
    1872:	d908      	bls.n	1886 <getAlarmTime(unsigned long)+0x3e>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    1874:	4b24      	ldr	r3, [pc, #144]	; (1908 <getAlarmTime(unsigned long)+0xc0>)
    1876:	681a      	ldr	r2, [r3, #0]
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	fbb0 f2f2 	udiv	r2, r0, r2
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    187e:	bc30      	pop	{r4, r5}
      secs = ((secs/t_rep)+1)*t_rep;
    1880:	fb02 3003 	mla	r0, r2, r3, r3
}
    1884:	4770      	bx	lr
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1886:	4c21      	ldr	r4, [pc, #132]	; (190c <getAlarmTime(unsigned long)+0xc4>)
    1888:	6823      	ldr	r3, [r4, #0]
    188a:	4293      	cmp	r3, r2
    188c:	d803      	bhi.n	1896 <getAlarmTime(unsigned long)+0x4e>
    188e:	4b20      	ldr	r3, [pc, #128]	; (1910 <getAlarmTime(unsigned long)+0xc8>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	4293      	cmp	r3, r2
    1894:	d8ee      	bhi.n	1874 <getAlarmTime(unsigned long)+0x2c>
    uint32_t dd = secs/(24*3600); // days
    1896:	4b17      	ldr	r3, [pc, #92]	; (18f4 <getAlarmTime(unsigned long)+0xac>)
    1898:	fba3 5300 	umull	r5, r3, r3, r0
    else if (hh<t_1)  // from mid-night to t_1
    189c:	680d      	ldr	r5, [r1, #0]
    189e:	4295      	cmp	r5, r2
    uint32_t dd = secs/(24*3600); // days
    18a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    else if (hh<t_1)  // from mid-night to t_1
    18a4:	d909      	bls.n	18ba <getAlarmTime(unsigned long)+0x72>
      secs = dd*(24*3600) + t_1*3600;
    18a6:	680a      	ldr	r2, [r1, #0]
    18a8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18ac:	4912      	ldr	r1, [pc, #72]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18ae:	fb00 f202 	mul.w	r2, r0, r2
    18b2:	fb01 2003 	mla	r0, r1, r3, r2
}
    18b6:	bc30      	pop	{r4, r5}
    18b8:	4770      	bx	lr
    else if (hh>=t_2) // between the two recording periods
    18ba:	4d12      	ldr	r5, [pc, #72]	; (1904 <getAlarmTime(unsigned long)+0xbc>)
    18bc:	682d      	ldr	r5, [r5, #0]
    18be:	4295      	cmp	r5, r2
    18c0:	d90e      	bls.n	18e0 <getAlarmTime(unsigned long)+0x98>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    18c2:	4c13      	ldr	r4, [pc, #76]	; (1910 <getAlarmTime(unsigned long)+0xc8>)
    18c4:	6825      	ldr	r5, [r4, #0]
    18c6:	4295      	cmp	r5, r2
    18c8:	d8f5      	bhi.n	18b6 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    18ca:	680a      	ldr	r2, [r1, #0]
    18cc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18d0:	6824      	ldr	r4, [r4, #0]
    18d2:	4909      	ldr	r1, [pc, #36]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18d4:	1b12      	subs	r2, r2, r4
    18d6:	fb00 1202 	mla	r2, r0, r2, r1
    18da:	fb01 2003 	mla	r0, r1, r3, r2
    18de:	e7ea      	b.n	18b6 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + t_3*3600;
    18e0:	6822      	ldr	r2, [r4, #0]
    18e2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18e6:	4904      	ldr	r1, [pc, #16]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18e8:	fb00 f202 	mul.w	r2, r0, r2
}
    18ec:	bc30      	pop	{r4, r5}
      secs = dd*(24*3600) + t_3*3600;
    18ee:	fb01 2003 	mla	r0, r1, r3, r2
}
    18f2:	4770      	bx	lr
    18f4:	c22e4507 	.word	0xc22e4507
    18f8:	00015180 	.word	0x00015180
    18fc:	91a2b3c5 	.word	0x91a2b3c5
    1900:	20025b90 	.word	0x20025b90
    1904:	20009544 	.word	0x20009544
    1908:	20025b98 	.word	0x20025b98
    190c:	20009548 	.word	0x20009548
    1910:	2000954c 	.word	0x2000954c

00001914 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    1914:	4a03      	ldr	r2, [pc, #12]	; (1924 <powerDown()+0x10>)
    1916:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    191c:	6393      	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    191e:	bf30      	wfi
    1920:	e7fd      	b.n	191e <powerDown()+0xa>
    1922:	bf00      	nop
    1924:	400d4000 	.word	0x400d4000

00001928 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    1928:	4a26      	ldr	r2, [pc, #152]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
{
    192a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    192c:	6b97      	ldr	r7, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
    192e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    1930:	f043 0301 	orr.w	r3, r3, #1
    1934:	64d3      	str	r3, [r2, #76]	; 0x4c
    asm volatile("DSB");
    1936:	f3bf 8f4f 	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    193a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    193c:	f023 0302 	bic.w	r3, r3, #2
    1940:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    1942:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1944:	f013 0302 	ands.w	r3, r3, #2
    1948:	d1fb      	bne.n	1942 <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    while (SNVS_LPTAR != 0);
    194a:	491e      	ldr	r1, [pc, #120]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPTAR = 0;
    194c:	6593      	str	r3, [r2, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    194e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    1950:	2b00      	cmp	r3, #0
    1952:	d1fc      	bne.n	194e <do_hibernate(unsigned long)+0x26>

    __disable_irq();
    1954:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    1956:	4c1b      	ldr	r4, [pc, #108]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    1958:	6d26      	ldr	r6, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    195a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    195c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    195e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    1960:	4291      	cmp	r1, r2
    1962:	d1f9      	bne.n	1958 <do_hibernate(unsigned long)+0x30>
    1964:	1bad      	subs	r5, r5, r6
    1966:	bf18      	it	ne
    1968:	2501      	movne	r5, #1
    196a:	2d00      	cmp	r5, #0
    196c:	d1f4      	bne.n	1958 <do_hibernate(unsigned long)+0x30>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    196e:	0bd2      	lsrs	r2, r2, #15
    1970:	462b      	mov	r3, r5
    1972:	4815      	ldr	r0, [pc, #84]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1974:	ea42 4646 	orr.w	r6, r2, r6, lsl #17
    1978:	220a      	movs	r2, #10
    197a:	4631      	mov	r1, r6
    197c:	f00c f832 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    1980:	2201      	movs	r2, #1
    1982:	4912      	ldr	r1, [pc, #72]	; (19cc <do_hibernate(unsigned long)+0xa4>)
    1984:	4810      	ldr	r0, [pc, #64]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1986:	f00d fed5 	bl	f734 <usb_serial_class::write(unsigned char const*, unsigned int)>

    //set alarm
    Serial.print(secs); Serial.print(" ");
    secs = getAlarmTime(secs);
    198a:	4630      	mov	r0, r6
    198c:	f7ff ff5c 	bl	1848 <getAlarmTime(unsigned long)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1990:	462b      	mov	r3, r5
    1992:	4605      	mov	r5, r0
    1994:	220a      	movs	r2, #10
    1996:	480c      	ldr	r0, [pc, #48]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1998:	4629      	mov	r1, r5
    199a:	f00c f823 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    199e:	480a      	ldr	r0, [pc, #40]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    19a0:	f00b fff6 	bl	d990 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    19a4:	4a07      	ldr	r2, [pc, #28]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPTAR = secs;
    19a6:	65a5      	str	r5, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    19a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
    19aa:	42ab      	cmp	r3, r5
    19ac:	d1fc      	bne.n	19a8 <do_hibernate(unsigned long)+0x80>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    19ae:	f047 0702 	orr.w	r7, r7, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    19b2:	4904      	ldr	r1, [pc, #16]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    19b4:	6397      	str	r7, [r2, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    19b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    19b8:	079b      	lsls	r3, r3, #30
    19ba:	d5fc      	bpl.n	19b6 <do_hibernate(unsigned long)+0x8e>

    __enable_irq();
    19bc:	b662      	cpsie	i
  
    //
    powerDown(); 
    19be:	f7ff ffa9 	bl	1914 <powerDown()>
    19c2:	bf00      	nop
    19c4:	400d4000 	.word	0x400d4000
    19c8:	20008bb4 	.word	0x20008bb4
    19cc:	20000bf0 	.word	0x20000bf0

000019d0 <storeData(short)>:
{
    19d0:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    19d2:	4604      	mov	r4, r0
{
    19d4:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    19d6:	2800      	cmp	r0, #0
    19d8:	d049      	beq.n	1a6e <storeData(short)+0x9e>
    if(status==OPENED) // file is open: write first record (header)
    19da:	2801      	cmp	r0, #1
    19dc:	d009      	beq.n	19f2 <storeData(short)+0x22>
    if(status==RUNNING) // file is open and header written: store data records
    19de:	2802      	cmp	r0, #2
    19e0:	f000 80e0 	beq.w	1ba4 <storeData(short)+0x1d4>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    19e4:	1ec3      	subs	r3, r0, #3
    19e6:	b29b      	uxth	r3, r3
    19e8:	2b02      	cmp	r3, #2
    19ea:	f240 8115 	bls.w	1c18 <storeData(short)+0x248>
}
    19ee:	b014      	add	sp, #80	; 0x50
    19f0:	bd70      	pop	{r4, r5, r6, pc}
    19f2:	4dac      	ldr	r5, [pc, #688]	; (1ca4 <storeData(short)+0x2d4>)
        if(proc==0)
    19f4:	4bac      	ldr	r3, [pc, #688]	; (1ca8 <storeData(short)+0x2d8>)
    {   nbuf=0;
    19f6:	2200      	movs	r2, #0
    19f8:	4eac      	ldr	r6, [pc, #688]	; (1cac <storeData(short)+0x2dc>)
        if(proc==0)
    19fa:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    19fc:	6032      	str	r2, [r6, #0]
        if(proc==0)
    19fe:	b21b      	sxth	r3, r3
    1a00:	2b00      	cmp	r3, #0
    1a02:	f040 8088 	bne.w	1b16 <storeData(short)+0x146>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1a06:	49aa      	ldr	r1, [pc, #680]	; (1cb0 <storeData(short)+0x2e0>)
    1a08:	2220      	movs	r2, #32
    1a0a:	4baa      	ldr	r3, [pc, #680]	; (1cb4 <storeData(short)+0x2e4>)
    1a0c:	6808      	ldr	r0, [r1, #0]
    1a0e:	2101      	movs	r1, #1
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	f7ff fd4f 	bl	14b4 <headerInit(long, long, long, int)>
    1a16:	4601      	mov	r1, r0
    return m_fFile ? m_fFile->write(buf, count) :
    1a18:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a1a:	2800      	cmp	r0, #0
    1a1c:	f000 8083 	beq.w	1b26 <storeData(short)+0x156>
    1a20:	f44f 7200 	mov.w	r2, #512	; 0x200
    1a24:	f007 fe56 	bl	96d4 <FatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1a28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1a2c:	f2c0 8087 	blt.w	1b3e <storeData(short)+0x16e>
    1a30:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a32:	2800      	cmp	r0, #0
    1a34:	f000 809f 	beq.w	1b76 <storeData(short)+0x1a6>
    1a38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1a3c:	499e      	ldr	r1, [pc, #632]	; (1cb8 <storeData(short)+0x2e8>)
    1a3e:	f007 fe49 	bl	96d4 <FatFile::write(void const*, unsigned int)>
    1a42:	4604      	mov	r4, r0
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1a44:	f5b4 4f40 	cmp.w	r4, #49152	; 0xc000
    1a48:	f0c0 80be 	bcc.w	1bc8 <storeData(short)+0x1f8>
        disk_count++;
    1a4c:	499b      	ldr	r1, [pc, #620]	; (1cbc <storeData(short)+0x2ec>)
          nbuf++;
    1a4e:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1a50:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    1a52:	3301      	adds	r3, #1
        disk_count++;
    1a54:	3201      	adds	r2, #1
          nbuf++;
    1a56:	6033      	str	r3, [r6, #0]
        disk_count++;
    1a58:	600a      	str	r2, [r1, #0]
    1a5a:	4999      	ldr	r1, [pc, #612]	; (1cc0 <storeData(short)+0x2f0>)
        if((nbuf % 1000)==0 ) file.flush();
    1a5c:	4a99      	ldr	r2, [pc, #612]	; (1cc4 <storeData(short)+0x2f4>)
        disk_count++;
    1a5e:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    1a62:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    1a66:	d27e      	bcs.n	1b66 <storeData(short)+0x196>
    1a68:	2002      	movs	r0, #2
}
    1a6a:	b014      	add	sp, #80	; 0x50
    1a6c:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1a6e:	4896      	ldr	r0, [pc, #600]	; (1cc8 <storeData(short)+0x2f8>)
    1a70:	f7ff fe4c 	bl	170c <newDirectory(char*)>
    1a74:	b1e8      	cbz	r0, 1ab2 <storeData(short)+0xe2>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1a76:	4d95      	ldr	r5, [pc, #596]	; (1ccc <storeData(short)+0x2fc>)
    1a78:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    1a7a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1a7e:	2a00      	cmp	r2, #0
    1a80:	f000 80d2 	beq.w	1c28 <storeData(short)+0x258>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1a84:	466e      	mov	r6, sp
    1a86:	4611      	mov	r1, r2
    1a88:	4623      	mov	r3, r4
    1a8a:	4a8f      	ldr	r2, [pc, #572]	; (1cc8 <storeData(short)+0x2f8>)
    1a8c:	4630      	mov	r0, r6
  FatFile() {}
    1a8e:	9400      	str	r4, [sp, #0]
    1a90:	f007 fa4e 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    1a94:	2800      	cmp	r0, #0
    1a96:	f000 80d4 	beq.w	1c42 <storeData(short)+0x272>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1a9a:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    1a9c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    1aa0:	2800      	cmp	r0, #0
    1aa2:	f000 80e6 	beq.w	1c72 <storeData(short)+0x2a2>
    1aa6:	4988      	ldr	r1, [pc, #544]	; (1cc8 <storeData(short)+0x2f8>)
    1aa8:	f008 ff8e 	bl	a9c8 <FatVolume::chdir(char const*)>
    1aac:	2800      	cmp	r0, #0
    1aae:	f000 80e9 	beq.w	1c84 <storeData(short)+0x2b4>
        if(newFileName(fileName))
    1ab2:	4887      	ldr	r0, [pc, #540]	; (1cd0 <storeData(short)+0x300>)
    1ab4:	f7ff fe68 	bl	1788 <newFileName(char*)>
    1ab8:	2800      	cmp	r0, #0
    1aba:	f000 8146 	beq.w	1d4a <storeData(short)+0x37a>
            file = sd->open(fileName, FILE_WRITE); 
    1abe:	4983      	ldr	r1, [pc, #524]	; (1ccc <storeData(short)+0x2fc>)
    1ac0:	f244 2302 	movw	r3, #16898	; 0x4202
    1ac4:	4a82      	ldr	r2, [pc, #520]	; (1cd0 <storeData(short)+0x300>)
    1ac6:	4668      	mov	r0, sp
    1ac8:	6809      	ldr	r1, [r1, #0]
    1aca:	f009 f919 	bl	ad00 <FsVolume::open(char const*, int)>
class Print
    1ace:	4d75      	ldr	r5, [pc, #468]	; (1ca4 <storeData(short)+0x2d4>)
class Stream : public Print
    1ad0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1ad4:	f105 0010 	add.w	r0, r5, #16
    1ad8:	732b      	strb	r3, [r5, #12]
    1ada:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1ade:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1ae2:	a904      	add	r1, sp, #16
    1ae4:	f008 ff98 	bl	aa18 <FsBaseFile::operator=(FsBaseFile const&)>
    1ae8:	4b7a      	ldr	r3, [pc, #488]	; (1cd4 <storeData(short)+0x304>)
  ~FsBaseFile() {close();}
    1aea:	a804      	add	r0, sp, #16
    1aec:	9300      	str	r3, [sp, #0]
    1aee:	f008 ffed 	bl	aacc <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1af2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1af4:	2b00      	cmp	r3, #0
    1af6:	f47f af7d 	bne.w	19f4 <storeData(short)+0x24>
    1afa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1afc:	2b00      	cmp	r3, #0
    1afe:	f47f af79 	bne.w	19f4 <storeData(short)+0x24>
    1b02:	2111      	movs	r1, #17
    1b04:	4874      	ldr	r0, [pc, #464]	; (1cd8 <storeData(short)+0x308>)
    1b06:	f00e fac9 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b0a:	4874      	ldr	r0, [pc, #464]	; (1cdc <storeData(short)+0x30c>)
    1b0c:	f00b ff40 	bl	d990 <Print::println()>
                return STOPPED; 
    1b10:	f04f 30ff 	mov.w	r0, #4294967295
    1b14:	e76b      	b.n	19ee <storeData(short)+0x1e>
          makeHeader(fileHeader);
    1b16:	4872      	ldr	r0, [pc, #456]	; (1ce0 <storeData(short)+0x310>)
    1b18:	f7ff fd98 	bl	164c <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    1b1c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1b1e:	4970      	ldr	r1, [pc, #448]	; (1ce0 <storeData(short)+0x310>)
    1b20:	2800      	cmp	r0, #0
    1b22:	f47f af7d 	bne.w	1a20 <storeData(short)+0x50>
    1b26:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1b28:	2800      	cmp	r0, #0
    1b2a:	f43f af60 	beq.w	19ee <storeData(short)+0x1e>
    1b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1b32:	f006 fa75 	bl	8020 <ExFatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1b36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1b3a:	f6bf af79 	bge.w	1a30 <storeData(short)+0x60>
  bool isOpen() const {return m_fFile || m_xFile;}
    1b3e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1b40:	2b00      	cmp	r3, #0
    1b42:	f000 80f6 	beq.w	1d32 <storeData(short)+0x362>
    1b46:	2403      	movs	r4, #3
        {   if(proc==0)
    1b48:	4b57      	ldr	r3, [pc, #348]	; (1ca8 <storeData(short)+0x2d8>)
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	b21b      	sxth	r3, r3
    1b4e:	b363      	cbz	r3, 1baa <storeData(short)+0x1da>
            file.close();
    1b50:	4864      	ldr	r0, [pc, #400]	; (1ce4 <storeData(short)+0x314>)
    1b52:	f008 ffbb 	bl	aacc <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    1b56:	2c04      	cmp	r4, #4
    1b58:	d016      	beq.n	1b88 <storeData(short)+0x1b8>
        else if(status==DOCLOSE)
    1b5a:	2c03      	cmp	r4, #3
    1b5c:	f040 80ee 	bne.w	1d3c <storeData(short)+0x36c>
            status = CLOSED;   // do not hibernate
    1b60:	2000      	movs	r0, #0
}
    1b62:	b014      	add	sp, #80	; 0x50
    1b64:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() :
    1b66:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1b68:	2800      	cmp	r0, #0
    1b6a:	f000 8092 	beq.w	1c92 <storeData(short)+0x2c2>
    1b6e:	f007 fdab 	bl	96c8 <FatFile::sync()>
    1b72:	2002      	movs	r0, #2
    1b74:	e73b      	b.n	19ee <storeData(short)+0x1e>
    1b76:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1b78:	b328      	cbz	r0, 1bc6 <storeData(short)+0x1f6>
    1b7a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1b7e:	494e      	ldr	r1, [pc, #312]	; (1cb8 <storeData(short)+0x2e8>)
    1b80:	f006 fa4e 	bl	8020 <ExFatFile::write(void const*, unsigned int)>
    1b84:	4604      	mov	r4, r0
    1b86:	e75d      	b.n	1a44 <storeData(short)+0x74>
        { if( t_rep > t_on) 
    1b88:	4c57      	ldr	r4, [pc, #348]	; (1ce8 <storeData(short)+0x318>)
    1b8a:	4b58      	ldr	r3, [pc, #352]	; (1cec <storeData(short)+0x31c>)
    1b8c:	6822      	ldr	r2, [r4, #0]
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	429a      	cmp	r2, r3
    1b92:	d9e5      	bls.n	1b60 <storeData(short)+0x190>
            adcReset();
    1b94:	f7ff f948 	bl	e28 <adcReset()>
            acqPower(LOW);
    1b98:	2000      	movs	r0, #0
    1b9a:	f7ff f939 	bl	e10 <acqPower(int)>
            do_hibernate(t_rep);
    1b9e:	6820      	ldr	r0, [r4, #0]
    1ba0:	f7ff fec2 	bl	1928 <do_hibernate(unsigned long)>
    1ba4:	4d3f      	ldr	r5, [pc, #252]	; (1ca4 <storeData(short)+0x2d4>)
    1ba6:	4e41      	ldr	r6, [pc, #260]	; (1cac <storeData(short)+0x2dc>)
    1ba8:	e742      	b.n	1a30 <storeData(short)+0x60>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1baa:	4b40      	ldr	r3, [pc, #256]	; (1cac <storeData(short)+0x2dc>)
  wav_hdr.dLen = nbytes;
    1bac:	4850      	ldr	r0, [pc, #320]	; (1cf0 <storeData(short)+0x320>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1bae:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1bb0:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1bb6:	039b      	lsls	r3, r3, #14
  wav_hdr.rLen += wav_hdr.dLen;
    1bb8:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    1bba:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    1bbe:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    1bc0:	f7ff fcf8 	bl	15b4 <writeHeader(char*)>
    1bc4:	e7c4      	b.n	1b50 <storeData(short)+0x180>
    1bc6:	4604      	mov	r4, r0
    1bc8:	2101      	movs	r1, #1
    1bca:	484a      	ldr	r0, [pc, #296]	; (1cf4 <storeData(short)+0x324>)
    1bcc:	f00e fa66 	bl	1009c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1bd0:	2300      	movs	r3, #0
    1bd2:	220a      	movs	r2, #10
    1bd4:	4621      	mov	r1, r4
    1bd6:	4841      	ldr	r0, [pc, #260]	; (1cdc <storeData(short)+0x30c>)
    1bd8:	f00b ff04 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bdc:	2101      	movs	r1, #1
    1bde:	4846      	ldr	r0, [pc, #280]	; (1cf8 <storeData(short)+0x328>)
    1be0:	f00e fa5c 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1be4:	2102      	movs	r1, #2
    1be6:	483d      	ldr	r0, [pc, #244]	; (1cdc <storeData(short)+0x30c>)
    1be8:	f00b fec6 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1bec:	483b      	ldr	r0, [pc, #236]	; (1cdc <storeData(short)+0x30c>)
    1bee:	f00b fecf 	bl	d990 <Print::println()>
        disk_count++;
    1bf2:	4932      	ldr	r1, [pc, #200]	; (1cbc <storeData(short)+0x2ec>)
    1bf4:	4832      	ldr	r0, [pc, #200]	; (1cc0 <storeData(short)+0x2f0>)
    1bf6:	6833      	ldr	r3, [r6, #0]
    1bf8:	680a      	ldr	r2, [r1, #0]
    1bfa:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1bfe:	4831      	ldr	r0, [pc, #196]	; (1cc4 <storeData(short)+0x2f4>)
        disk_count++;
    1c00:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1c02:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1c06:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1c08:	d399      	bcc.n	1b3e <storeData(short)+0x16e>
    return m_fFile ? m_fFile->sync() :
    1c0a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1c0c:	2800      	cmp	r0, #0
    1c0e:	d079      	beq.n	1d04 <storeData(short)+0x334>
          status=DOCLOSE; 
    1c10:	2403      	movs	r4, #3
    1c12:	f007 fd59 	bl	96c8 <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1c16:	e000      	b.n	1c1a <storeData(short)+0x24a>
    1c18:	4d22      	ldr	r5, [pc, #136]	; (1ca4 <storeData(short)+0x2d4>)
  bool isOpen() const {return m_fFile || m_xFile;}
    1c1a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d193      	bne.n	1b48 <storeData(short)+0x178>
    1c20:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1c22:	2b00      	cmp	r3, #0
    1c24:	d190      	bne.n	1b48 <storeData(short)+0x178>
    1c26:	e796      	b.n	1b56 <storeData(short)+0x186>
    1c28:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1c2c:	b1d1      	cbz	r1, 1c64 <storeData(short)+0x294>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1c2e:	466e      	mov	r6, sp
    1c30:	4613      	mov	r3, r2
  ExFatFile() {}
    1c32:	920c      	str	r2, [sp, #48]	; 0x30
    1c34:	4630      	mov	r0, r6
    1c36:	4a24      	ldr	r2, [pc, #144]	; (1cc8 <storeData(short)+0x2f8>)
    1c38:	f005 fe80 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    1c3c:	2800      	cmp	r0, #0
    1c3e:	f47f af2c 	bne.w	1a9a <storeData(short)+0xca>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1c42:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1c44:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1c48:	2a00      	cmp	r2, #0
    1c4a:	d063      	beq.n	1d14 <storeData(short)+0x344>
    1c4c:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1c4e:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1c52:	2301      	movs	r3, #1
    1c54:	4630      	mov	r0, r6
    1c56:	4a1c      	ldr	r2, [pc, #112]	; (1cc8 <storeData(short)+0x2f8>)
    1c58:	9400      	str	r4, [sp, #0]
    1c5a:	f007 f871 	bl	8d40 <FatFile::mkdir(FatFile*, char const*, bool)>
    1c5e:	2800      	cmp	r0, #0
    1c60:	f47f af1b 	bne.w	1a9a <storeData(short)+0xca>
    1c64:	481d      	ldr	r0, [pc, #116]	; (1cdc <storeData(short)+0x30c>)
    1c66:	4925      	ldr	r1, [pc, #148]	; (1cfc <storeData(short)+0x32c>)
    1c68:	f7ff fbf0 	bl	144c <Print::println(char const*) [clone .isra.0]>
    1c6c:	f04f 30ff 	mov.w	r0, #4294967295
    1c70:	e6bd      	b.n	19ee <storeData(short)+0x1e>
    1c72:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1c76:	b128      	cbz	r0, 1c84 <storeData(short)+0x2b4>
    1c78:	4913      	ldr	r1, [pc, #76]	; (1cc8 <storeData(short)+0x2f8>)
    1c7a:	f006 fe61 	bl	8940 <ExFatVolume::chdir(char const*)>
    1c7e:	2800      	cmp	r0, #0
    1c80:	f47f af17 	bne.w	1ab2 <storeData(short)+0xe2>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1c84:	4815      	ldr	r0, [pc, #84]	; (1cdc <storeData(short)+0x30c>)
    1c86:	491e      	ldr	r1, [pc, #120]	; (1d00 <storeData(short)+0x330>)
    1c88:	f7ff fbe0 	bl	144c <Print::println(char const*) [clone .isra.0]>
    1c8c:	f04f 30ff 	mov.w	r0, #4294967295
    1c90:	e6ad      	b.n	19ee <storeData(short)+0x1e>
    1c92:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1c94:	2800      	cmp	r0, #0
    1c96:	f43f aee7 	beq.w	1a68 <storeData(short)+0x98>
    1c9a:	f005 ffd9 	bl	7c50 <ExFatFile::sync()>
    1c9e:	2002      	movs	r0, #2
    1ca0:	e6a5      	b.n	19ee <storeData(short)+0x1e>
    1ca2:	bf00      	nop
    1ca4:	20025304 	.word	0x20025304
    1ca8:	20025bbe 	.word	0x20025bbe
    1cac:	20025380 	.word	0x20025380
    1cb0:	20009534 	.word	0x20009534
    1cb4:	2000c1c8 	.word	0x2000c1c8
    1cb8:	2000c1d0 	.word	0x2000c1d0
    1cbc:	200252dc 	.word	0x200252dc
    1cc0:	26e978d5 	.word	0x26e978d5
    1cc4:	00418937 	.word	0x00418937
    1cc8:	20024634 	.word	0x20024634
    1ccc:	2000953c 	.word	0x2000953c
    1cd0:	20024a84 	.word	0x20024a84
    1cd4:	20000c70 	.word	0x20000c70
    1cd8:	20000854 	.word	0x20000854
    1cdc:	20008bb4 	.word	0x20008bb4
    1ce0:	200181d0 	.word	0x200181d0
    1ce4:	20025314 	.word	0x20025314
    1ce8:	20025b98 	.word	0x20025b98
    1cec:	20009554 	.word	0x20009554
    1cf0:	20024884 	.word	0x20024884
    1cf4:	20000868 	.word	0x20000868
    1cf8:	20000bf0 	.word	0x20000bf0
    1cfc:	2000083c 	.word	0x2000083c
    1d00:	20000848 	.word	0x20000848
    1d04:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1d06:	2800      	cmp	r0, #0
    1d08:	f43f ae71 	beq.w	19ee <storeData(short)+0x1e>
          status=DOCLOSE; 
    1d0c:	2403      	movs	r4, #3
    1d0e:	f005 ff9f 	bl	7c50 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1d12:	e782      	b.n	1c1a <storeData(short)+0x24a>
    1d14:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1d18:	2900      	cmp	r1, #0
    1d1a:	d0a3      	beq.n	1c64 <storeData(short)+0x294>
    1d1c:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1d1e:	2301      	movs	r3, #1
    1d20:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1d24:	4630      	mov	r0, r6
    1d26:	4a0a      	ldr	r2, [pc, #40]	; (1d50 <storeData(short)+0x380>)
    1d28:	f006 f89c 	bl	7e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d099      	beq.n	1c64 <storeData(short)+0x294>
    1d30:	e6b3      	b.n	1a9a <storeData(short)+0xca>
  bool isOpen() const {return m_fFile || m_xFile;}
    1d32:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1d34:	2800      	cmp	r0, #0
    1d36:	f47f af06 	bne.w	1b46 <storeData(short)+0x176>
    1d3a:	e658      	b.n	19ee <storeData(short)+0x1e>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <storeData(short)+0x384>)
    1d3e:	2208      	movs	r2, #8
          status=STOPPED;
    1d40:	f04f 30ff 	mov.w	r0, #4294967295
    1d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1d48:	e651      	b.n	19ee <storeData(short)+0x1e>
        {  return STOPPED; // if file open fails: don't do anything
    1d4a:	f04f 30ff 	mov.w	r0, #4294967295
    1d4e:	e64e      	b.n	19ee <storeData(short)+0x1e>
    1d50:	20024634 	.word	0x20024634
    1d54:	42004000 	.word	0x42004000

00001d58 <saveData(short)>:
{
    1d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d5a:	4606      	mov	r6, r0
    if(status==STOPPED) 
    1d5c:	3001      	adds	r0, #1
    1d5e:	d032      	beq.n	1dc6 <saveData(short)+0x6e>
    if(status<CLOSED) return status; // we are stopped: don't do anything
    1d60:	2e00      	cmp	r6, #0
    1d62:	db41      	blt.n	1de8 <saveData(short)+0x90>
  if(state==RUNNING)
    1d64:	2e02      	cmp	r6, #2
    1d66:	d05a      	beq.n	1e1e <saveData(short)+0xc6>
    if(getDataCount() >= NDBL)
    1d68:	f002 fe3e 	bl	49e8 <getDataCount()>
    1d6c:	285f      	cmp	r0, #95	; 0x5f
    1d6e:	d93b      	bls.n	1de8 <saveData(short)+0x90>
      if(proc==0)
    1d70:	4b2d      	ldr	r3, [pc, #180]	; (1e28 <saveData(short)+0xd0>)
    1d72:	881b      	ldrh	r3, [r3, #0]
    1d74:	b21b      	sxth	r3, r3
    1d76:	2b00      	cmp	r3, #0
    1d78:	d138      	bne.n	1dec <saveData(short)+0x94>
    1d7a:	4d2c      	ldr	r5, [pc, #176]	; (1e2c <saveData(short)+0xd4>)
    1d7c:	f505 4740 	add.w	r7, r5, #49152	; 0xc000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1d80:	f002 fe40 	bl	4a04 <queue_isBusy()>
    1d84:	4604      	mov	r4, r0
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1d86:	4628      	mov	r0, r5
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1d88:	2c00      	cmp	r4, #0
    1d8a:	d1f9      	bne.n	1d80 <saveData(short)+0x28>
        for(int ii=0; ii<NDBL; ii++)
    1d8c:	f505 7500 	add.w	r5, r5, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1d90:	f002 fe7a 	bl	4a88 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1d94:	42bd      	cmp	r5, r7
    1d96:	d1f3      	bne.n	1d80 <saveData(short)+0x28>
    1d98:	4a25      	ldr	r2, [pc, #148]	; (1e30 <saveData(short)+0xd8>)
    1d9a:	4b26      	ldr	r3, [pc, #152]	; (1e34 <saveData(short)+0xdc>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1d9c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1da0:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1da4:	3401      	adds	r4, #1
    1da6:	2c08      	cmp	r4, #8
    1da8:	d1f8      	bne.n	1d9c <saveData(short)+0x44>
          { diskBuffer[ii]=tempBuffer0[ii];
    1daa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    1dae:	491f      	ldr	r1, [pc, #124]	; (1e2c <saveData(short)+0xd4>)
    1db0:	4821      	ldr	r0, [pc, #132]	; (1e38 <saveData(short)+0xe0>)
    1db2:	f00c fbf3 	bl	e59c <memcpy>
      if(haveStore)
    1db6:	4b21      	ldr	r3, [pc, #132]	; (1e3c <saveData(short)+0xe4>)
    1db8:	681b      	ldr	r3, [r3, #0]
    1dba:	b1ab      	cbz	r3, 1de8 <saveData(short)+0x90>
        status=storeData(status);
    1dbc:	4630      	mov	r0, r6
}
    1dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status=storeData(status);
    1dc2:	f7ff be05 	b.w	19d0 <storeData(short)>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    1dc6:	f002 fe1d 	bl	4a04 <queue_isBusy()>
    1dca:	4604      	mov	r4, r0
    1dcc:	2800      	cmp	r0, #0
    1dce:	d1fa      	bne.n	1dc6 <saveData(short)+0x6e>
      pullData((uint32_t*)tempBuffer0);
    1dd0:	4816      	ldr	r0, [pc, #88]	; (1e2c <saveData(short)+0xd4>)
    1dd2:	f002 fe59 	bl	4a88 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1dd6:	4a16      	ldr	r2, [pc, #88]	; (1e30 <saveData(short)+0xd8>)
    1dd8:	4b16      	ldr	r3, [pc, #88]	; (1e34 <saveData(short)+0xdc>)
    1dda:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1dde:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1de2:	3401      	adds	r4, #1
    1de4:	2c08      	cmp	r4, #8
    1de6:	d1f8      	bne.n	1dda <saveData(short)+0x82>
}
    1de8:	4630      	mov	r0, r6
    1dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dec:	4d12      	ldr	r5, [pc, #72]	; (1e38 <saveData(short)+0xe0>)
    1dee:	f505 4740 	add.w	r7, r5, #49152	; 0xc000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1df2:	f002 fe07 	bl	4a04 <queue_isBusy()>
    1df6:	4604      	mov	r4, r0
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1df8:	4628      	mov	r0, r5
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1dfa:	2c00      	cmp	r4, #0
    1dfc:	d1f9      	bne.n	1df2 <saveData(short)+0x9a>
        for(int ii=0; ii<NDBL; ii++)
    1dfe:	f505 7500 	add.w	r5, r5, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1e02:	f002 fe41 	bl	4a88 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1e06:	42af      	cmp	r7, r5
    1e08:	d1f3      	bne.n	1df2 <saveData(short)+0x9a>
    1e0a:	4a0d      	ldr	r2, [pc, #52]	; (1e40 <saveData(short)+0xe8>)
    1e0c:	4b09      	ldr	r3, [pc, #36]	; (1e34 <saveData(short)+0xdc>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1e0e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1e12:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1e16:	3401      	adds	r4, #1
    1e18:	2c08      	cmp	r4, #8
    1e1a:	d1f8      	bne.n	1e0e <saveData(short)+0xb6>
    1e1c:	e7cb      	b.n	1db6 <saveData(short)+0x5e>
    1e1e:	f7ff fae9 	bl	13f4 <checkEndOfFile(short) [clone .part.0]>
    1e22:	4606      	mov	r6, r0
    1e24:	e7a0      	b.n	1d68 <saveData(short)+0x10>
    1e26:	bf00      	nop
    1e28:	20025bbe 	.word	0x20025bbe
    1e2c:	200183dc 	.word	0x200183dc
    1e30:	200183d8 	.word	0x200183d8
    1e34:	20025358 	.word	0x20025358
    1e38:	2000c1d0 	.word	0x2000c1d0
    1e3c:	20025354 	.word	0x20025354
    1e40:	2000c1cc 	.word	0x2000c1cc

00001e44 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    1e44:	4808      	ldr	r0, [pc, #32]	; (1e68 <_GLOBAL__sub_I_t_acq+0x24>)
    1e46:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1e48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    1e4c:	4a07      	ldr	r2, [pc, #28]	; (1e6c <_GLOBAL__sub_I_t_acq+0x28>)
}
    1e4e:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1e50:	4c07      	ldr	r4, [pc, #28]	; (1e70 <_GLOBAL__sub_I_t_acq+0x2c>)
    1e52:	7303      	strb	r3, [r0, #12]
    1e54:	6004      	str	r4, [r0, #0]
    1e56:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e5a:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    1e5e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    1e62:	4904      	ldr	r1, [pc, #16]	; (1e74 <_GLOBAL__sub_I_t_acq+0x30>)
    1e64:	f00e bb24 	b.w	104b0 <__aeabi_atexit>
    1e68:	20025304 	.word	0x20025304
    1e6c:	20008f90 	.word	0x20008f90
    1e70:	20000d98 	.word	0x20000d98
    1e74:	000013dd 	.word	0x000013dd

00001e78 <filing_init()>:
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e78:	4b29      	ldr	r3, [pc, #164]	; (1f20 <filing_init()+0xa8>)
    1e7a:	4a2a      	ldr	r2, [pc, #168]	; (1f24 <filing_init()+0xac>)
    1e7c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  FsDateTime::callback = dateTime;
    1e80:	4929      	ldr	r1, [pc, #164]	; (1f28 <filing_init()+0xb0>)
    1e82:	482a      	ldr	r0, [pc, #168]	; (1f2c <filing_init()+0xb4>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
    1e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FsDateTime::callback = dateTime;
    1e8c:	2605      	movs	r6, #5
    1e8e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1f40 <filing_init()+0xc8>
    spiConfigBackupPin = 255;
    1e92:	27ff      	movs	r7, #255	; 0xff
    1e94:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1f44 <filing_init()+0xcc>
	size_t println(const char s[])			{ return print(s) + println(); }
    1e98:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f34 <filing_init()+0xbc>
    1e9c:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e9e:	6013      	str	r3, [r2, #0]
    if (sd->begin(SD_CONFIG)) 
    1ea0:	f8d8 4000 	ldr.w	r4, [r8]
    sdioConfigBackup = sdioConfig;
    1ea4:	2300      	movs	r3, #0
    1ea6:	f504 6592 	add.w	r5, r4, #1168	; 0x490
    1eaa:	4619      	mov	r1, r3
    1eac:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
    1eb0:	4628      	mov	r0, r5
    spiConfigBackupPin = 255;
    1eb2:	f884 74bc 	strb.w	r7, [r4, #1212]	; 0x4bc
    1eb6:	f00a fb23 	bl	c500 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1eba:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1ebc:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    1ec0:	f009 fd80 	bl	b9c4 <SdioCard::errorCode() const>
    1ec4:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1ec6:	2301      	movs	r3, #1
    1ec8:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
    1eca:	b992      	cbnz	r2, 1ef2 <filing_init()+0x7a>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1ecc:	461a      	mov	r2, r3
    1ece:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    1ed2:	f008 fea3 	bl	ac1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1ed6:	b160      	cbz	r0, 1ef2 <filing_init()+0x7a>
    1ed8:	2111      	movs	r1, #17
    1eda:	4815      	ldr	r0, [pc, #84]	; (1f30 <filing_init()+0xb8>)
    1edc:	f00e f8de 	bl	1009c <usb_serial_write>
    1ee0:	4814      	ldr	r0, [pc, #80]	; (1f34 <filing_init()+0xbc>)
    1ee2:	f00b fd55 	bl	d990 <Print::println()>
      haveStore=1;
    1ee6:	2301      	movs	r3, #1
    1ee8:	4a13      	ldr	r2, [pc, #76]	; (1f38 <filing_init()+0xc0>)
      return 1;
    1eea:	4618      	mov	r0, r3
      haveStore=1;
    1eec:	6013      	str	r3, [r2, #0]
}
    1eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ef2:	210f      	movs	r1, #15
    1ef4:	4650      	mov	r0, sl
    1ef6:	f00e f8d1 	bl	1009c <usb_serial_write>
    1efa:	4648      	mov	r0, r9
    1efc:	f00b fd48 	bl	d990 <Print::println()>
      delay(100);
    1f00:	2064      	movs	r0, #100	; 0x64
    1f02:	f00c f847 	bl	df94 <delay>
  for(int ii=0; ii<5;ii++)
    1f06:	3e01      	subs	r6, #1
    1f08:	d1ca      	bne.n	1ea0 <filing_init()+0x28>
    1f0a:	211b      	movs	r1, #27
    1f0c:	480b      	ldr	r0, [pc, #44]	; (1f3c <filing_init()+0xc4>)
    1f0e:	f00e f8c5 	bl	1009c <usb_serial_write>
    1f12:	4808      	ldr	r0, [pc, #32]	; (1f34 <filing_init()+0xbc>)
    1f14:	f00b fd3c 	bl	d990 <Print::println()>
  return 0;
    1f18:	4630      	mov	r0, r6
}
    1f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f1e:	bf00      	nop
    1f20:	401f4400 	.word	0x401f4400
    1f24:	2000c1c8 	.word	0x2000c1c8
    1f28:	20024cdc 	.word	0x20024cdc
    1f2c:	0000135d 	.word	0x0000135d
    1f30:	2000044c 	.word	0x2000044c
    1f34:	20008bb4 	.word	0x20008bb4
    1f38:	20025354 	.word	0x20025354
    1f3c:	20000470 	.word	0x20000470
    1f40:	2000953c 	.word	0x2000953c
    1f44:	20000460 	.word	0x20000460

00001f48 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1f48:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1f4c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1f50:	429a      	cmp	r2, r3
    1f52:	d905      	bls.n	1f60 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1f54:	1c5a      	adds	r2, r3, #1
    1f56:	4403      	add	r3, r0
    1f58:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1f5c:	7e98      	ldrb	r0, [r3, #26]
    1f5e:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1f60:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1f64:	4770      	bx	lr
    1f66:	bf00      	nop

00001f68 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1f68:	b530      	push	{r4, r5, lr}
    1f6a:	4605      	mov	r5, r0
    1f6c:	b083      	sub	sp, #12
    1f6e:	460c      	mov	r4, r1
    {   this->wire = wire;
        wire->begin();
    1f70:	4608      	mov	r0, r1
    {   this->wire = wire;
    1f72:	6029      	str	r1, [r5, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1f74:	9201      	str	r2, [sp, #4]
        wire->begin();
    1f76:	f019 f9b7 	bl	1b2e8 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    1f7a:	2064      	movs	r0, #100	; 0x64
    1f7c:	f00c f80a 	bl	df94 <delay>
        wire->setClock(speed);
    1f80:	4620      	mov	r0, r4
    1f82:	9901      	ldr	r1, [sp, #4]
    1f84:	f00b fbd0 	bl	d728 <TwoWire::setClock(unsigned long)>
    }
    1f88:	4628      	mov	r0, r5
    1f8a:	b003      	add	sp, #12
    1f8c:	bd30      	pop	{r4, r5, pc}
    1f8e:	bf00      	nop

00001f90 <i2c_class::exist(unsigned char)>:
		transmitting = 1;
    1f90:	2201      	movs	r2, #1
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    1f92:	b508      	push	{r3, lr}
		txBuffer[0] = (address << 1);
    1f94:	fa01 fc02 	lsl.w	ip, r1, r2
        wire->beginTransmission(addr);
    1f98:	6803      	ldr	r3, [r0, #0]
		return endTransmission(1);
    1f9a:	4611      	mov	r1, r2
		txBuffer[0] = (address << 1);
    1f9c:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
		transmitting = 1;
    1fa0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1fa4:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		return endTransmission(1);
    1fa8:	6800      	ldr	r0, [r0, #0]
    1faa:	f00b fa25 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    1fae:	fab0 f080 	clz	r0, r0
    1fb2:	0940      	lsrs	r0, r0, #5
    1fb4:	bd08      	pop	{r3, pc}
    1fb6:	bf00      	nop

00001fb8 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    1fb8:	b570      	push	{r4, r5, r6, lr}
    1fba:	460d      	mov	r5, r1
		transmitting = 1;
    1fbc:	2601      	movs	r6, #1
        unsigned int val;
        wire->beginTransmission(addr);
        wire->write(reg);
    1fbe:	4611      	mov	r1, r2
        wire->beginTransmission(addr);
    1fc0:	6802      	ldr	r2, [r0, #0]
		txBuffer[0] = (address << 1);
    1fc2:	006b      	lsls	r3, r5, #1
    { 
    1fc4:	4604      	mov	r4, r0
		transmitting = 1;
    1fc6:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		txBuffer[0] = (address << 1);
    1fca:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
		txBufferLength = 1;
    1fce:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
        wire->write(reg);
    1fd2:	6800      	ldr	r0, [r0, #0]
    1fd4:	6803      	ldr	r3, [r0, #0]
    1fd6:	681b      	ldr	r3, [r3, #0]
    1fd8:	4798      	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    1fda:	2100      	movs	r1, #0
    1fdc:	6820      	ldr	r0, [r4, #0]
    1fde:	f00b fa0b 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
    1fe2:	b108      	cbz	r0, 1fe8 <i2c_class::read(unsigned char, unsigned char)+0x30>
    1fe4:	2000      	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    1fe6:	bd70      	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    1fe8:	4633      	mov	r3, r6
    1fea:	4632      	mov	r2, r6
    1fec:	4629      	mov	r1, r5
    1fee:	6820      	ldr	r0, [r4, #0]
    1ff0:	f00b fa82 	bl	d4f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d0f5      	beq.n	1fe4 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    1ff8:	6820      	ldr	r0, [r4, #0]
    1ffa:	4a0b      	ldr	r2, [pc, #44]	; (2028 <i2c_class::read(unsigned char, unsigned char)+0x70>)
    1ffc:	6803      	ldr	r3, [r0, #0]
    1ffe:	695b      	ldr	r3, [r3, #20]
    2000:	4293      	cmp	r3, r2
    2002:	d10b      	bne.n	201c <i2c_class::read(unsigned char, unsigned char)+0x64>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2004:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2008:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    200c:	429a      	cmp	r2, r3
    200e:	d908      	bls.n	2022 <i2c_class::read(unsigned char, unsigned char)+0x6a>
		return rxBuffer[rxBufferIndex++];
    2010:	1c5a      	adds	r2, r3, #1
    2012:	4403      	add	r3, r0
    2014:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2018:	7e98      	ldrb	r0, [r3, #26]
    }
    201a:	bd70      	pop	{r4, r5, r6, pc}
        val = wire->read();
    201c:	4798      	blx	r3
        return val;
    201e:	b2c0      	uxtb	r0, r0
    }
    2020:	bd70      	pop	{r4, r5, r6, pc}
    2022:	20ff      	movs	r0, #255	; 0xff
    2024:	bd70      	pop	{r4, r5, r6, pc}
    2026:	bf00      	nop
    2028:	00001f49 	.word	0x00001f49

0000202c <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	4604      	mov	r4, r0
		transmitting = 1;
    2030:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    2032:	0048      	lsls	r0, r1, #1
    2034:	461e      	mov	r6, r3
        wire->beginTransmission(addr);
    2036:	6823      	ldr	r3, [r4, #0]
        wire->write(reg);
    2038:	4611      	mov	r1, r2
		transmitting = 1;
    203a:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    203e:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    2042:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    2046:	6820      	ldr	r0, [r4, #0]
    2048:	6803      	ldr	r3, [r0, #0]
    204a:	681b      	ldr	r3, [r3, #0]
    204c:	4798      	blx	r3
        wire->write(val);
    204e:	6820      	ldr	r0, [r4, #0]
    2050:	4631      	mov	r1, r6
    2052:	6803      	ldr	r3, [r0, #0]
    2054:	681b      	ldr	r3, [r3, #0]
    2056:	4798      	blx	r3
		return endTransmission(1);
    2058:	4629      	mov	r1, r5
    205a:	6820      	ldr	r0, [r4, #0]
    205c:	f00b f9cc 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    2060:	fab0 f080 	clz	r0, r0
    2064:	0940      	lsrs	r0, r0, #5
    2066:	bd70      	pop	{r4, r5, r6, pc}

00002068 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    2068:	6840      	ldr	r0, [r0, #4]
    206a:	4770      	bx	lr

0000206c <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    206c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    2070:	6888      	ldr	r0, [r1, #8]
    2072:	4770      	bx	lr

00002074 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    2074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2078:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    207a:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    207e:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    2080:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    2084:	b91b      	cbnz	r3, 208e <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    2086:	4f19      	ldr	r7, [pc, #100]	; (20ec <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    2088:	f500 7108 	add.w	r1, r0, #544	; 0x220
    208c:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    208e:	4433      	add	r3, r6
        while(pos<len)
    2090:	2e00      	cmp	r6, #0
        write_length_ += len;
    2092:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
        while(pos<len)
    2096:	dd27      	ble.n	20e8 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    2098:	f500 6984 	add.w	r9, r0, #1056	; 0x420
        int pos = 0; // into data
    209c:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    209e:	f500 7808 	add.w	r8, r0, #544	; 0x220
    20a2:	4f12      	ldr	r7, [pc, #72]	; (20ec <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    20a4:	e001      	b.n	20aa <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    20a6:	42a6      	cmp	r6, r4
    20a8:	dd1e      	ble.n	20e8 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    20aa:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    20ac:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    20ae:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    20b0:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    20b4:	4618      	mov	r0, r3
    20b6:	4592      	cmp	sl, r2
    20b8:	bfa8      	it	ge
    20ba:	4692      	movge	sl, r2
    20bc:	4652      	mov	r2, sl
          pos += to_copy;
    20be:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    20c0:	f00c fa6c 	bl	e59c <memcpy>
    20c4:	4603      	mov	r3, r0
          src += to_copy;
    20c6:	4455      	add	r5, sl
          dst += to_copy;
    20c8:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20ca:	454b      	cmp	r3, r9
          dst += to_copy;
    20cc:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20ce:	d1ea      	bne.n	20a6 <MTPD::write(char const*, int) [clone .part.0]+0x32>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    20d0:	223c      	movs	r2, #60	; 0x3c
    20d2:	f44f 7100 	mov.w	r1, #512	; 0x200
    20d6:	4640      	mov	r0, r8
    20d8:	f00d fc4e 	bl	f978 <usb_mtp_send>
    20dc:	2800      	cmp	r0, #0
    20de:	ddf7      	ble.n	20d0 <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    20e0:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    20e2:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    20e6:	dce0      	bgt.n	20aa <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    20e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20ec:	20024da8 	.word	0x20024da8

000020f0 <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    20f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20f2:	4607      	mov	r7, r0
    20f4:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    20f6:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    20f8:	460c      	mov	r4, r1
    { if (write_get_length_) 
    20fa:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
    { write8(strlen(str) + 1);
    20fe:	f010 febf 	bl	12e80 <strlen>
    2102:	3001      	adds	r0, #1
    { if (write_get_length_) 
    2104:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    2108:	f88d 0006 	strb.w	r0, [sp, #6]
    210c:	b396      	cbz	r6, 2174 <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    210e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2112:	3301      	adds	r3, #1
    2114:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2118:	7823      	ldrb	r3, [r4, #0]
    211a:	b973      	cbnz	r3, 213a <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    211c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2120:	3302      	adds	r3, #2
    2122:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    2126:	b003      	add	sp, #12
    2128:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    212a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    212e:	4413      	add	r3, r2
    2130:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2134:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    2138:	b17b      	cbz	r3, 215a <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    213a:	2202      	movs	r2, #2
    213c:	f10d 0106 	add.w	r1, sp, #6
    2140:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2142:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2146:	2e00      	cmp	r6, #0
    2148:	d1ef      	bne.n	212a <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    214a:	f7ff ff93 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    214e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    2152:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2156:	2b00      	cmp	r3, #0
    2158:	d1ef      	bne.n	213a <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    215a:	2300      	movs	r3, #0
    215c:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2160:	2e00      	cmp	r6, #0
    2162:	d1db      	bne.n	211c <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    2164:	2202      	movs	r2, #2
    2166:	f10d 0106 	add.w	r1, sp, #6
    216a:	4638      	mov	r0, r7
    216c:	f7ff ff82 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2170:	b003      	add	sp, #12
    2172:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2174:	2201      	movs	r2, #1
    2176:	f10d 0106 	add.w	r1, sp, #6
    217a:	4638      	mov	r0, r7
    217c:	f7ff ff7a 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2180:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    2182:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2186:	2b00      	cmp	r3, #0
    2188:	d1d7      	bne.n	213a <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    218a:	e7e6      	b.n	215a <MTPD::writestring(char const*) [clone .part.0]+0x6a>

0000218c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    218c:	b570      	push	{r4, r5, r6, lr}
    218e:	f24d 4302 	movw	r3, #54274	; 0xd402
    2192:	b082      	sub	sp, #8
    { if (write_get_length_) 
    2194:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    2198:	4605      	mov	r5, r0
    219a:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    219e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    21a2:	b31b      	cbz	r3, 21ec <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    21a4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21a8:	3302      	adds	r3, #2
    21aa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    21ae:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21b2:	3302      	adds	r3, #2
    21b4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    21b8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21bc:	3301      	adds	r3, #1
    21be:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    21c2:	491e      	ldr	r1, [pc, #120]	; (223c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    21c4:	4628      	mov	r0, r5
    21c6:	f7ff ff93 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    21ca:	491c      	ldr	r1, [pc, #112]	; (223c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    21cc:	4628      	mov	r0, r5
    21ce:	f7ff ff8f 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    21d2:	2200      	movs	r2, #0
    { if (write_get_length_) 
    21d4:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    21d8:	f88d 2006 	strb.w	r2, [sp, #6]
    21dc:	b333      	cbz	r3, 222c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    21de:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21e2:	3301      	adds	r3, #1
    21e4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    21e8:	b002      	add	sp, #8
    21ea:	bd70      	pop	{r4, r5, r6, pc}
    21ec:	2202      	movs	r2, #2
    21ee:	f10d 0106 	add.w	r1, sp, #6
    21f2:	f7ff ff3f 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    21f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    21fa:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
        write16(0xFFFF); // string type
    21fe:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2202:	2e00      	cmp	r6, #0
    2204:	d1d3      	bne.n	21ae <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    2206:	2202      	movs	r2, #2
    2208:	f10d 0106 	add.w	r1, sp, #6
    220c:	4628      	mov	r0, r5
    220e:	f7ff ff31 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2212:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
        write8(0);       // read-only
    2216:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    221a:	2b00      	cmp	r3, #0
    221c:	d1cc      	bne.n	21b8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    221e:	2201      	movs	r2, #1
    2220:	f10d 0106 	add.w	r1, sp, #6
    2224:	4628      	mov	r0, r5
    2226:	f7ff ff25 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    222a:	e7ca      	b.n	21c2 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    222c:	2201      	movs	r2, #1
    222e:	f10d 0106 	add.w	r1, sp, #6
    2232:	4628      	mov	r0, r5
    2234:	f7ff ff1e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2238:	b002      	add	sp, #8
    223a:	bd70      	pop	{r4, r5, r6, pc}
    223c:	20000bdc 	.word	0x20000bdc

00002240 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    2240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    { if (write_get_length_) 
    2244:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  void MTPD::WriteDescriptor() {
    2248:	b087      	sub	sp, #28
    224a:	2464      	movs	r4, #100	; 0x64
    224c:	4607      	mov	r7, r0
    { if (write_get_length_) 
    224e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2252:	f8ad 4004 	strh.w	r4, [sp, #4]
    2256:	2b00      	cmp	r3, #0
    2258:	f000 813b 	beq.w	24d2 <MTPD::WriteDescriptor()+0x292>
        write_length_ += len;
    225c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2260:	f10d 0804 	add.w	r8, sp, #4
    2264:	3302      	adds	r3, #2
    2266:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    226a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    226e:	3304      	adds	r3, #4
    2270:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2274:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2278:	3302      	adds	r3, #2
    227a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    227e:	49ac      	ldr	r1, [pc, #688]	; (2530 <MTPD::WriteDescriptor()+0x2f0>)
    2280:	4638      	mov	r0, r7
    2282:	f7ff ff35 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    write16(0);    // functional mode
    2286:	2200      	movs	r2, #0
    { if (write_get_length_) 
    2288:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    228c:	f8ad 2004 	strh.w	r2, [sp, #4]
    2290:	2b00      	cmp	r3, #0
    2292:	f000 810a 	beq.w	24aa <MTPD::WriteDescriptor()+0x26a>
        write_length_ += len;
    2296:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    229a:	3302      	adds	r3, #2
    229c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    22a0:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    22a4:	2601      	movs	r6, #1
    22a6:	3304      	adds	r3, #4
    22a8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22ac:	4ca1      	ldr	r4, [pc, #644]	; (2534 <MTPD::WriteDescriptor()+0x2f4>)
    write32(supported_op_num);
    22ae:	f241 0301 	movw	r3, #4097	; 0x1001
    22b2:	f104 0926 	add.w	r9, r4, #38	; 0x26
    22b6:	e008      	b.n	22ca <MTPD::WriteDescriptor()+0x8a>
        write_length_ += len;
    22b8:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22bc:	454c      	cmp	r4, r9
        write_length_ += len;
    22be:	4413      	add	r3, r2
    22c0:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22c4:	d00e      	beq.n	22e4 <MTPD::WriteDescriptor()+0xa4>
    22c6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    22ca:	2202      	movs	r2, #2
    22cc:	4641      	mov	r1, r8
    22ce:	4638      	mov	r0, r7
    22d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    22d4:	2e00      	cmp	r6, #0
    22d6:	d1ef      	bne.n	22b8 <MTPD::WriteDescriptor()+0x78>
    22d8:	f7ff fecc 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22dc:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    22de:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22e2:	d1f0      	bne.n	22c6 <MTPD::WriteDescriptor()+0x86>
    write32(supported_event_num);      
    22e4:	2204      	movs	r2, #4
    22e6:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    22e8:	2e00      	cmp	r6, #0
    22ea:	f000 80d7 	beq.w	249c <MTPD::WriteDescriptor()+0x25c>
        write_length_ += len;
    22ee:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    22f2:	4413      	add	r3, r2
    22f4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    22f8:	4c8f      	ldr	r4, [pc, #572]	; (2538 <MTPD::WriteDescriptor()+0x2f8>)
    write32(supported_event_num);      
    22fa:	f244 0304 	movw	r3, #16388	; 0x4004
    22fe:	2202      	movs	r2, #2
    2300:	4641      	mov	r1, r8
    2302:	f104 0906 	add.w	r9, r4, #6
    2306:	4638      	mov	r0, r7
    2308:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    230c:	b17e      	cbz	r6, 232e <MTPD::WriteDescriptor()+0xee>
        write_length_ += len;
    230e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2312:	454c      	cmp	r4, r9
        write_length_ += len;
    2314:	4413      	add	r3, r2
    2316:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    231a:	d00e      	beq.n	233a <MTPD::WriteDescriptor()+0xfa>
    231c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    2320:	2202      	movs	r2, #2
    2322:	4641      	mov	r1, r8
    2324:	4638      	mov	r0, r7
    2326:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    232a:	2e00      	cmp	r6, #0
    232c:	d1ef      	bne.n	230e <MTPD::WriteDescriptor()+0xce>
    232e:	f7ff fea1 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2332:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    2334:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2338:	d1f0      	bne.n	231c <MTPD::WriteDescriptor()+0xdc>
    write32(1);       // Device properties (array of uint16)
    233a:	2301      	movs	r3, #1
    233c:	9301      	str	r3, [sp, #4]
    { if (write_get_length_) 
    233e:	2e00      	cmp	r6, #0
    2340:	d068      	beq.n	2414 <MTPD::WriteDescriptor()+0x1d4>
        write_length_ += len;
    2342:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2346:	3304      	adds	r3, #4
    2348:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    234c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2350:	3302      	adds	r3, #2
    2352:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2356:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    235a:	3304      	adds	r3, #4
    235c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2360:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2364:	3304      	adds	r3, #4
    2366:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    236a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    236e:	3302      	adds	r3, #2
    2370:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2374:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2378:	3302      	adds	r3, #2
    237a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    237e:	496f      	ldr	r1, [pc, #444]	; (253c <MTPD::WriteDescriptor()+0x2fc>)
    2380:	4638      	mov	r0, r7
    2382:	f7ff feb5 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    2386:	496e      	ldr	r1, [pc, #440]	; (2540 <MTPD::WriteDescriptor()+0x300>)
    2388:	4638      	mov	r0, r7
    238a:	f7ff feb1 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    238e:	4642      	mov	r2, r8
    2390:	2102      	movs	r1, #2
    2392:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 2544 <MTPD::WriteDescriptor()+0x304>
    2396:	2003      	movs	r0, #3
    2398:	f00c f9ce 	bl	e738 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    239c:	2214      	movs	r2, #20
    239e:	496a      	ldr	r1, [pc, #424]	; (2548 <MTPD::WriteDescriptor()+0x308>)
    23a0:	4640      	mov	r0, r8
    23a2:	f010 f9db 	bl	1275c <strlcat>
    if (*str) 
    23a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    23aa:	b1bb      	cbz	r3, 23dc <MTPD::WriteDescriptor()+0x19c>
    23ac:	4641      	mov	r1, r8
    23ae:	4638      	mov	r0, r7
    23b0:	f7ff fe9e 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    23b4:	4b65      	ldr	r3, [pc, #404]	; (254c <MTPD::WriteDescriptor()+0x30c>)
    23b6:	4642      	mov	r2, r8
    23b8:	f103 0014 	add.w	r0, r3, #20
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    23bc:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    23c0:	4283      	cmp	r3, r0
    23c2:	f802 1b01 	strb.w	r1, [r2], #1
    23c6:	d1f9      	bne.n	23bc <MTPD::WriteDescriptor()+0x17c>
    if (*str) 
    23c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    23cc:	b19b      	cbz	r3, 23f6 <MTPD::WriteDescriptor()+0x1b6>
    23ce:	4641      	mov	r1, r8
    23d0:	4638      	mov	r0, r7
    23d2:	f7ff fe8d 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
  }
    23d6:	b007      	add	sp, #28
    23d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if (write_get_length_) 
    23dc:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    23e0:	f88d 3003 	strb.w	r3, [sp, #3]
    23e4:	2a00      	cmp	r2, #0
    23e6:	f000 809c 	beq.w	2522 <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
    23ea:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    23ee:	3301      	adds	r3, #1
    23f0:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    23f4:	e7de      	b.n	23b4 <MTPD::WriteDescriptor()+0x174>
    { if (write_get_length_) 
    23f6:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    23fa:	f88d 3003 	strb.w	r3, [sp, #3]
    23fe:	2a00      	cmp	r2, #0
    2400:	f000 8086 	beq.w	2510 <MTPD::WriteDescriptor()+0x2d0>
        write_length_ += len;
    2404:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2408:	3301      	adds	r3, #1
    240a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    240e:	b007      	add	sp, #28
    2410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2414:	2204      	movs	r2, #4
    2416:	4641      	mov	r1, r8
    2418:	4638      	mov	r0, r7
    241a:	f7ff fe2b 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    241e:	f24d 4202 	movw	r2, #54274	; 0xd402
    { if (write_get_length_) 
    2422:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0xd402);  // Device friendly name
    2426:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    242a:	2b00      	cmp	r3, #0
    242c:	d18e      	bne.n	234c <MTPD::WriteDescriptor()+0x10c>
    242e:	2202      	movs	r2, #2
    2430:	4641      	mov	r1, r8
    2432:	4638      	mov	r0, r7
    2434:	f7ff fe1e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2438:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(0);       // Capture formats (array of uint16)
    243c:	9601      	str	r6, [sp, #4]
    { if (write_get_length_) 
    243e:	2b00      	cmp	r3, #0
    2440:	d189      	bne.n	2356 <MTPD::WriteDescriptor()+0x116>
    2442:	2204      	movs	r2, #4
    2444:	4641      	mov	r1, r8
    2446:	4638      	mov	r0, r7
    2448:	2402      	movs	r4, #2
    244a:	f7ff fe13 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    244e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(2);       // Playback formats (array of uint16)
    2452:	9401      	str	r4, [sp, #4]
    { if (write_get_length_) 
    2454:	2b00      	cmp	r3, #0
    2456:	d183      	bne.n	2360 <MTPD::WriteDescriptor()+0x120>
    2458:	2204      	movs	r2, #4
    245a:	4641      	mov	r1, r8
    245c:	4638      	mov	r0, r7
    245e:	f7ff fe09 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2462:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    2466:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3000);  // Undefined format
    246a:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    246e:	2b00      	cmp	r3, #0
    2470:	f47f af7b 	bne.w	236a <MTPD::WriteDescriptor()+0x12a>
    2474:	4622      	mov	r2, r4
    2476:	4641      	mov	r1, r8
    2478:	4638      	mov	r0, r7
    247a:	f7ff fdfb 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    247e:	f243 0201 	movw	r2, #12289	; 0x3001
    2482:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3001);  // Folders (associations)
    2486:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    248a:	2b00      	cmp	r3, #0
    248c:	f47f af72 	bne.w	2374 <MTPD::WriteDescriptor()+0x134>
    2490:	4622      	mov	r2, r4
    2492:	4641      	mov	r1, r8
    2494:	4638      	mov	r0, r7
    2496:	f7ff fded 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    249a:	e770      	b.n	237e <MTPD::WriteDescriptor()+0x13e>
    249c:	4641      	mov	r1, r8
    249e:	4638      	mov	r0, r7
    24a0:	f7ff fde8 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    24a4:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    24a8:	e726      	b.n	22f8 <MTPD::WriteDescriptor()+0xb8>
    24aa:	2202      	movs	r2, #2
    24ac:	4641      	mov	r1, r8
    24ae:	4638      	mov	r0, r7
    24b0:	f7ff fde0 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    24b4:	2214      	movs	r2, #20
    24b6:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(supported_op_num);
    24ba:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    24bc:	2b00      	cmp	r3, #0
    24be:	f47f aeef 	bne.w	22a0 <MTPD::WriteDescriptor()+0x60>
    24c2:	2204      	movs	r2, #4
    24c4:	4641      	mov	r1, r8
    24c6:	4638      	mov	r0, r7
    24c8:	f7ff fdd4 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    24cc:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    24d0:	e6ec      	b.n	22ac <MTPD::WriteDescriptor()+0x6c>
    24d2:	f10d 0804 	add.w	r8, sp, #4
    24d6:	2202      	movs	r2, #2
    24d8:	4641      	mov	r1, r8
    24da:	f7ff fdcb 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    24de:	2206      	movs	r2, #6
    24e0:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(6);    // MTP extension
    24e4:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    24e6:	2b00      	cmp	r3, #0
    24e8:	f47f aebf 	bne.w	226a <MTPD::WriteDescriptor()+0x2a>
    24ec:	2204      	movs	r2, #4
    24ee:	4641      	mov	r1, r8
    24f0:	4638      	mov	r0, r7
    24f2:	f7ff fdbf 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    24f6:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(100);  // MTP version
    24fa:	f8ad 4004 	strh.w	r4, [sp, #4]
    { if (write_get_length_) 
    24fe:	2b00      	cmp	r3, #0
    2500:	f47f aeb8 	bne.w	2274 <MTPD::WriteDescriptor()+0x34>
    2504:	2202      	movs	r2, #2
    2506:	4641      	mov	r1, r8
    2508:	4638      	mov	r0, r7
    250a:	f7ff fdb3 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    250e:	e6b6      	b.n	227e <MTPD::WriteDescriptor()+0x3e>
    2510:	2201      	movs	r2, #1
    2512:	f10d 0103 	add.w	r1, sp, #3
    2516:	4638      	mov	r0, r7
    2518:	f7ff fdac 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
  }
    251c:	b007      	add	sp, #28
    251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2522:	2201      	movs	r2, #1
    2524:	f10d 0103 	add.w	r1, sp, #3
    2528:	4638      	mov	r0, r7
    252a:	f7ff fda3 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    252e:	e741      	b.n	23b4 <MTPD::WriteDescriptor()+0x174>
    2530:	20000bb4 	.word	0x20000bb4
    2534:	200009c8 	.word	0x200009c8
    2538:	200009f0 	.word	0x200009f0
    253c:	20000bc8 	.word	0x20000bc8
    2540:	20000bdc 	.word	0x20000bdc
    2544:	3fcb851f 	.word	0x3fcb851f
    2548:	20000bd0 	.word	0x20000bd0
    254c:	2000955c 	.word	0x2000955c

00002550 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    2550:	b5f0      	push	{r4, r5, r6, r7, lr}
    2552:	4606      	mov	r6, r0
    uint32_t num=storage_->get_FSCount();
    2554:	6800      	ldr	r0, [r0, #0]
    2556:	4a1b      	ldr	r2, [pc, #108]	; (25c4 <MTPD::WriteStorageIDs()+0x74>)
  void MTPD::WriteStorageIDs() {
    2558:	b083      	sub	sp, #12
    uint32_t num=storage_->get_FSCount();
    255a:	6803      	ldr	r3, [r0, #0]
    255c:	685b      	ldr	r3, [r3, #4]
    255e:	4293      	cmp	r3, r2
    2560:	d12c      	bne.n	25bc <MTPD::WriteStorageIDs()+0x6c>
      uint32_t sd_getFSCount(void) {return fsCount;}
    2562:	6847      	ldr	r7, [r0, #4]
    { if (write_get_length_) 
    2564:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    2568:	9701      	str	r7, [sp, #4]
    256a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    256e:	b1f3      	cbz	r3, 25ae <MTPD::WriteStorageIDs()+0x5e>
        write_length_ += len;
    2570:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2574:	3304      	adds	r3, #4
    2576:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    257a:	b1b7      	cbz	r7, 25aa <MTPD::WriteStorageIDs()+0x5a>
    257c:	2400      	movs	r4, #0
    257e:	e006      	b.n	258e <MTPD::WriteStorageIDs()+0x3e>
        write_length_ += len;
    2580:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2584:	42bc      	cmp	r4, r7
        write_length_ += len;
    2586:	4413      	add	r3, r2
    2588:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    258c:	d00d      	beq.n	25aa <MTPD::WriteStorageIDs()+0x5a>
    258e:	3401      	adds	r4, #1
    2590:	2204      	movs	r2, #4
    { if (write_get_length_) 
    2592:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2596:	4630      	mov	r0, r6
    2598:	eb0d 0102 	add.w	r1, sp, r2
    259c:	9401      	str	r4, [sp, #4]
    259e:	2b00      	cmp	r3, #0
    25a0:	d1ee      	bne.n	2580 <MTPD::WriteStorageIDs()+0x30>
    25a2:	f7ff fd67 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    25a6:	42bc      	cmp	r4, r7
    25a8:	d1f1      	bne.n	258e <MTPD::WriteStorageIDs()+0x3e>
  }
    25aa:	b003      	add	sp, #12
    25ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ae:	2204      	movs	r2, #4
    25b0:	4630      	mov	r0, r6
    25b2:	eb0d 0102 	add.w	r1, sp, r2
    25b6:	f7ff fd5d 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    25ba:	e7de      	b.n	257a <MTPD::WriteStorageIDs()+0x2a>
    uint32_t num=storage_->get_FSCount();
    25bc:	4798      	blx	r3
    25be:	4607      	mov	r7, r0
    25c0:	e7d0      	b.n	2564 <MTPD::WriteStorageIDs()+0x14>
    25c2:	bf00      	nop
    25c4:	00002069 	.word	0x00002069

000025c8 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    25c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25cc:	4605      	mov	r5, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25ce:	6800      	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    25d0:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    25d2:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25d4:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    25d6:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25da:	4631      	mov	r1, r6
    25dc:	695b      	ldr	r3, [r3, #20]
    25de:	4798      	blx	r3
    25e0:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    25e2:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25e6:	bf14      	ite	ne
    25e8:	2201      	movne	r2, #1
    25ea:	2204      	moveq	r2, #4
    25ec:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    25f0:	2b00      	cmp	r3, #0
    25f2:	d07c      	beq.n	26ee <MTPD::GetStorageInfo(unsigned long)+0x126>
        write_length_ += len;
    25f4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    25f8:	3302      	adds	r3, #2
    25fa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    25fe:	6828      	ldr	r0, [r5, #0]
    2600:	4631      	mov	r1, r6
    2602:	6803      	ldr	r3, [r0, #0]
    2604:	699b      	ldr	r3, [r3, #24]
    2606:	4798      	blx	r3
    { if (write_get_length_) 
    2608:	f894 7424 	ldrb.w	r7, [r4, #1060]	; 0x424
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    260c:	3001      	adds	r0, #1
    260e:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    2612:	2f00      	cmp	r7, #0
    2614:	f000 80a7 	beq.w	2766 <MTPD::GetStorageInfo(unsigned long)+0x19e>
        write_length_ += len;
    2618:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    261c:	3302      	adds	r3, #2
    261e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2622:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2626:	3302      	adds	r3, #2
    2628:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    uint64_t ntotal = storage_->totalSize(store) ; 
    262c:	6828      	ldr	r0, [r5, #0]
    262e:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2630:	f04f 0b00 	mov.w	fp, #0
    2634:	6803      	ldr	r3, [r0, #0]
    2636:	68db      	ldr	r3, [r3, #12]
    2638:	4798      	blx	r3
    263a:	4607      	mov	r7, r0
    uint64_t nused = storage_->usedSize(store) ; 
    263c:	6828      	ldr	r0, [r5, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    263e:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    2640:	4631      	mov	r1, r6
    2642:	6803      	ldr	r3, [r0, #0]
    2644:	691b      	ldr	r3, [r3, #16]
    2646:	4798      	blx	r3
    2648:	4681      	mov	r9, r0
    264a:	468a      	mov	sl, r1
    264c:	4855      	ldr	r0, [pc, #340]	; (27a4 <MTPD::GetStorageInfo(unsigned long)+0x1dc>)
    264e:	2105      	movs	r1, #5
    2650:	f00d fd24 	bl	1009c <usb_serial_write>
    2654:	230a      	movs	r3, #10
    2656:	463a      	mov	r2, r7
    2658:	4853      	ldr	r0, [pc, #332]	; (27a8 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    265a:	9300      	str	r3, [sp, #0]
    265c:	4643      	mov	r3, r8
    265e:	f8cd b004 	str.w	fp, [sp, #4]
    2662:	f00b f9d3 	bl	da0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    2666:	4850      	ldr	r0, [pc, #320]	; (27a8 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    2668:	f00b f992 	bl	d990 <Print::println()>
    266c:	2105      	movs	r1, #5
    266e:	484f      	ldr	r0, [pc, #316]	; (27ac <MTPD::GetStorageInfo(unsigned long)+0x1e4>)
    2670:	f00d fd14 	bl	1009c <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2674:	230a      	movs	r3, #10
    2676:	464a      	mov	r2, r9
    2678:	484b      	ldr	r0, [pc, #300]	; (27a8 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    267a:	9300      	str	r3, [sp, #0]
    267c:	4653      	mov	r3, sl
    267e:	f8cd b004 	str.w	fp, [sp, #4]
    2682:	f00b f9c3 	bl	da0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    2686:	4848      	ldr	r0, [pc, #288]	; (27a8 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    2688:	f00b f982 	bl	d990 <Print::println()>
    { if (write_get_length_) 
    268c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2690:	e9cd 7802 	strd	r7, r8, [sp, #8]
    2694:	2b00      	cmp	r3, #0
    2696:	d043      	beq.n	2720 <MTPD::GetStorageInfo(unsigned long)+0x158>
        write_length_ += len;
    2698:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    269c:	3308      	adds	r3, #8
    269e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    26a2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    26a6:	3308      	adds	r3, #8
    26a8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    26ac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    26b0:	3304      	adds	r3, #4
    26b2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    const char *name = storage_->get_FSName(store);
    26b6:	6828      	ldr	r0, [r5, #0]
    26b8:	4a3d      	ldr	r2, [pc, #244]	; (27b0 <MTPD::GetStorageInfo(unsigned long)+0x1e8>)
    26ba:	6803      	ldr	r3, [r0, #0]
    26bc:	689b      	ldr	r3, [r3, #8]
    26be:	4293      	cmp	r3, r2
    26c0:	d16b      	bne.n	279a <MTPD::GetStorageInfo(unsigned long)+0x1d2>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    26c2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    26c6:	6881      	ldr	r1, [r0, #8]
    if (*str) 
    26c8:	780b      	ldrb	r3, [r1, #0]
    26ca:	b1b3      	cbz	r3, 26fa <MTPD::GetStorageInfo(unsigned long)+0x132>
    26cc:	4628      	mov	r0, r5
    26ce:	f7ff fd0f 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    26d2:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    26d6:	2200      	movs	r2, #0
    26d8:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    26dc:	b9c3      	cbnz	r3, 2710 <MTPD::GetStorageInfo(unsigned long)+0x148>
    26de:	2201      	movs	r2, #1
    26e0:	a902      	add	r1, sp, #8
    26e2:	4628      	mov	r0, r5
    26e4:	f7ff fcc6 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
  }
    26e8:	b005      	add	sp, #20
    26ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26ee:	2202      	movs	r2, #2
    26f0:	a902      	add	r1, sp, #8
    26f2:	4628      	mov	r0, r5
    26f4:	f7ff fcbe 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    26f8:	e781      	b.n	25fe <MTPD::GetStorageInfo(unsigned long)+0x36>
    { if (write_get_length_) 
    26fa:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    26fe:	f88d 3008 	strb.w	r3, [sp, #8]
    2702:	2a00      	cmp	r2, #0
    2704:	d041      	beq.n	278a <MTPD::GetStorageInfo(unsigned long)+0x1c2>
        write_length_ += len;
    2706:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    270a:	3301      	adds	r3, #1
    270c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2710:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2714:	3301      	adds	r3, #1
    2716:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    271a:	b005      	add	sp, #20
    271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2720:	2208      	movs	r2, #8
    2722:	4628      	mov	r0, r5
    2724:	eb0d 0102 	add.w	r1, sp, r2
    2728:	f7ff fca4 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    272c:	ebb7 0709 	subs.w	r7, r7, r9
    2730:	eb68 030a 	sbc.w	r3, r8, sl
    2734:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    2738:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    273c:	2b00      	cmp	r3, #0
    273e:	d1b0      	bne.n	26a2 <MTPD::GetStorageInfo(unsigned long)+0xda>
    2740:	2208      	movs	r2, #8
    2742:	4628      	mov	r0, r5
    2744:	eb0d 0102 	add.w	r1, sp, r2
    2748:	f7ff fc94 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    274c:	f04f 32ff 	mov.w	r2, #4294967295
    2750:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write32(0xFFFFFFFFUL);  // free space (objects)
    2754:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    2756:	2b00      	cmp	r3, #0
    2758:	d1a8      	bne.n	26ac <MTPD::GetStorageInfo(unsigned long)+0xe4>
    275a:	2204      	movs	r2, #4
    275c:	a902      	add	r1, sp, #8
    275e:	4628      	mov	r0, r5
    2760:	f7ff fc88 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2764:	e7a7      	b.n	26b6 <MTPD::GetStorageInfo(unsigned long)+0xee>
    2766:	2202      	movs	r2, #2
    2768:	4628      	mov	r0, r5
    276a:	a902      	add	r1, sp, #8
    276c:	f7ff fc82 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2770:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2774:	f8ad 7008 	strh.w	r7, [sp, #8]
    2778:	2b00      	cmp	r3, #0
    277a:	f47f af52 	bne.w	2622 <MTPD::GetStorageInfo(unsigned long)+0x5a>
    277e:	2202      	movs	r2, #2
    2780:	a902      	add	r1, sp, #8
    2782:	4628      	mov	r0, r5
    2784:	f7ff fc76 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2788:	e750      	b.n	262c <MTPD::GetStorageInfo(unsigned long)+0x64>
    278a:	2201      	movs	r2, #1
    278c:	a902      	add	r1, sp, #8
    278e:	4628      	mov	r0, r5
    2790:	f7ff fc70 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2794:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2798:	e79d      	b.n	26d6 <MTPD::GetStorageInfo(unsigned long)+0x10e>
    const char *name = storage_->get_FSName(store);
    279a:	4631      	mov	r1, r6
    279c:	4798      	blx	r3
    279e:	4601      	mov	r1, r0
    27a0:	e792      	b.n	26c8 <MTPD::GetStorageInfo(unsigned long)+0x100>
    27a2:	bf00      	nop
    27a4:	20000ba4 	.word	0x20000ba4
    27a8:	20008bb4 	.word	0x20008bb4
    27ac:	20000bac 	.word	0x20000bac
    27b0:	0000206d 	.word	0x0000206d

000027b4 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	4606      	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    27b8:	6800      	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    27ba:	1e4d      	subs	r5, r1, #1
    int num = 0;
    27bc:	2400      	movs	r4, #0
    storage_->StartGetObjectHandles(store, parent);
    27be:	6803      	ldr	r3, [r0, #0]
    27c0:	4629      	mov	r1, r5
    27c2:	69db      	ldr	r3, [r3, #28]
    27c4:	4798      	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    27c6:	e000      	b.n	27ca <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    27c8:	3401      	adds	r4, #1
    27ca:	6830      	ldr	r0, [r6, #0]
    27cc:	4629      	mov	r1, r5
    27ce:	6803      	ldr	r3, [r0, #0]
    27d0:	6a1b      	ldr	r3, [r3, #32]
    27d2:	4798      	blx	r3
    27d4:	2800      	cmp	r0, #0
    27d6:	d1f7      	bne.n	27c8 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
  }
    27d8:	4620      	mov	r0, r4
    27da:	bd70      	pop	{r4, r5, r6, pc}

000027dc <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    27de:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    27e2:	b083      	sub	sp, #12
    if (write_get_length_) {
    27e4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    27e8:	b13b      	cbz	r3, 27fa <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    27ea:	f7ff ffe3 	bl	27b4 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    27ee:	3001      	adds	r0, #1
      write_length_ *= 4;
    27f0:	0080      	lsls	r0, r0, #2
    27f2:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
  }
    27f6:	b003      	add	sp, #12
    27f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      write32(GetNumObjects(storage, parent));
    27fa:	4604      	mov	r4, r0
    27fc:	460e      	mov	r6, r1
    27fe:	4617      	mov	r7, r2
    2800:	f7ff ffd8 	bl	27b4 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    { if (write_get_length_) 
    2804:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2808:	9001      	str	r0, [sp, #4]
    280a:	bb13      	cbnz	r3, 2852 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x76>
    280c:	2204      	movs	r2, #4
    280e:	4620      	mov	r0, r4
    2810:	eb0d 0102 	add.w	r1, sp, r2
    2814:	f7ff fc2e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    2818:	6820      	ldr	r0, [r4, #0]
  { uint32_t store = Storage2Store(storage);
    281a:	3e01      	subs	r6, #1
      storage_->StartGetObjectHandles(store, parent);
    281c:	463a      	mov	r2, r7
    281e:	6803      	ldr	r3, [r0, #0]
    2820:	4631      	mov	r1, r6
    2822:	69db      	ldr	r3, [r3, #28]
    2824:	4798      	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2826:	6820      	ldr	r0, [r4, #0]
    2828:	4631      	mov	r1, r6
    282a:	6803      	ldr	r3, [r0, #0]
    282c:	6a1b      	ldr	r3, [r3, #32]
    282e:	4798      	blx	r3
        write_length_ += len;
    2830:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2832:	4603      	mov	r3, r0
    2834:	4620      	mov	r0, r4
    2836:	eb0d 0102 	add.w	r1, sp, r2
    283a:	2b00      	cmp	r3, #0
    283c:	d0db      	beq.n	27f6 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1a>
    { if (write_get_length_) 
    283e:	f895 7424 	ldrb.w	r7, [r5, #1060]	; 0x424
    2842:	9301      	str	r3, [sp, #4]
    2844:	b15f      	cbz	r7, 285e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x82>
        write_length_ += len;
    2846:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    284a:	3304      	adds	r3, #4
    284c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2850:	e7e9      	b.n	2826 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>
    2852:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2856:	3304      	adds	r3, #4
    2858:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    285c:	e7dc      	b.n	2818 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x3c>
    285e:	f7ff fc09 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2862:	e7e0      	b.n	2826 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>

00002864 <MTPD::GetObjectInfo(unsigned long)>:
  {
    2864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2868:	4605      	mov	r5, r0
    286a:	b0e9      	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    286c:	6800      	ldr	r0, [r0, #0]
    286e:	f10d 0412 	add.w	r4, sp, #18
    2872:	af18      	add	r7, sp, #96	; 0x60
    2874:	6803      	ldr	r3, [r0, #0]
    2876:	f10d 0820 	add.w	r8, sp, #32
    287a:	f10d 0918 	add.w	r9, sp, #24
    287e:	9401      	str	r4, [sp, #4]
    2880:	aa28      	add	r2, sp, #160	; 0xa0
    { if (write_get_length_) 
    2882:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    2886:	f8cd 9000 	str.w	r9, [sp]
    288a:	e9cd 8702 	strd	r8, r7, [sp, #8]
    288e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    2890:	ab05      	add	r3, sp, #20
    2892:	47b0      	blx	r6
    uint32_t storage = Store2Storage(store);
    2894:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    2898:	3301      	adds	r3, #1
    289a:	9307      	str	r3, [sp, #28]
    { if (write_get_length_) 
    289c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28a0:	2b00      	cmp	r3, #0
    28a2:	d074      	beq.n	298e <MTPD::GetObjectInfo(unsigned long)+0x12a>
        write_length_ += len;
    28a4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28a8:	3304      	adds	r3, #4
    28aa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28ae:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28b2:	3302      	adds	r3, #2
    28b4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28b8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28bc:	3302      	adds	r3, #2
    28be:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28c2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28c6:	3304      	adds	r3, #4
    28c8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28cc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28d0:	3302      	adds	r3, #2
    28d2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28d6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28da:	3304      	adds	r3, #4
    28dc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28e0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28e4:	3304      	adds	r3, #4
    28e6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28ea:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28ee:	3304      	adds	r3, #4
    28f0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28f4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28f8:	3304      	adds	r3, #4
    28fa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28fe:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2902:	3304      	adds	r3, #4
    2904:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2908:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    290c:	3304      	adds	r3, #4
    290e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2912:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2916:	3304      	adds	r3, #4
    2918:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    291c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2920:	3302      	adds	r3, #2
    2922:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2926:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    292a:	3304      	adds	r3, #4
    292c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2930:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2934:	3304      	adds	r3, #4
    2936:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    293a:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
    293e:	2b00      	cmp	r3, #0
    2940:	f000 80dc 	beq.w	2afc <MTPD::GetObjectInfo(unsigned long)+0x298>
    2944:	a928      	add	r1, sp, #160	; 0xa0
    2946:	4628      	mov	r0, r5
    2948:	f7ff fbd2 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    294c:	f898 3000 	ldrb.w	r3, [r8]
    2950:	2b00      	cmp	r3, #0
    2952:	f000 80e2 	beq.w	2b1a <MTPD::GetObjectInfo(unsigned long)+0x2b6>
    2956:	4641      	mov	r1, r8
    2958:	4628      	mov	r0, r5
    295a:	f7ff fbc9 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    295e:	783b      	ldrb	r3, [r7, #0]
    2960:	2b00      	cmp	r3, #0
    2962:	f000 80e8 	beq.w	2b36 <MTPD::GetObjectInfo(unsigned long)+0x2d2>
    2966:	4639      	mov	r1, r7
    2968:	4628      	mov	r0, r5
    296a:	f7ff fbc1 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    296e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    2972:	2200      	movs	r2, #0
    2974:	f88d 201c 	strb.w	r2, [sp, #28]
    { if (write_get_length_) 
    2978:	2b00      	cmp	r3, #0
    297a:	f040 80e6 	bne.w	2b4a <MTPD::GetObjectInfo(unsigned long)+0x2e6>
    297e:	2201      	movs	r2, #1
    2980:	a907      	add	r1, sp, #28
    2982:	4628      	mov	r0, r5
    2984:	f7ff fb76 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2988:	b069      	add	sp, #420	; 0x1a4
    298a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    298e:	2204      	movs	r2, #4
    2990:	a907      	add	r1, sp, #28
    2992:	4628      	mov	r0, r5
    2994:	f7ff fb6e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2998:	9b05      	ldr	r3, [sp, #20]
    { if (write_get_length_) 
    299a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    299e:	3301      	adds	r3, #1
    29a0:	f243 0301 	movw	r3, #12289	; 0x3001
    29a4:	bf18      	it	ne
    29a6:	2300      	movne	r3, #0
    29a8:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    29ac:	2e00      	cmp	r6, #0
    29ae:	f47f af7e 	bne.w	28ae <MTPD::GetObjectInfo(unsigned long)+0x4a>
    29b2:	2202      	movs	r2, #2
    29b4:	a907      	add	r1, sp, #28
    29b6:	4628      	mov	r0, r5
    29b8:	f7ff fb5c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    29bc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    29c0:	f8ad 601c 	strh.w	r6, [sp, #28]
    29c4:	2b00      	cmp	r3, #0
    29c6:	f47f af77 	bne.w	28b8 <MTPD::GetObjectInfo(unsigned long)+0x54>
    29ca:	2202      	movs	r2, #2
    29cc:	a907      	add	r1, sp, #28
    29ce:	4628      	mov	r0, r5
    29d0:	f7ff fb50 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    29d4:	9b05      	ldr	r3, [sp, #20]
    29d6:	9307      	str	r3, [sp, #28]
    29d8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    29dc:	2b00      	cmp	r3, #0
    29de:	f47f af70 	bne.w	28c2 <MTPD::GetObjectInfo(unsigned long)+0x5e>
    29e2:	2204      	movs	r2, #4
    29e4:	a907      	add	r1, sp, #28
    29e6:	4628      	mov	r0, r5
    29e8:	f7ff fb44 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    29ec:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    29f0:	f8ad 601c 	strh.w	r6, [sp, #28]
    29f4:	2b00      	cmp	r3, #0
    29f6:	f47f af69 	bne.w	28cc <MTPD::GetObjectInfo(unsigned long)+0x68>
    29fa:	2202      	movs	r2, #2
    29fc:	a907      	add	r1, sp, #28
    29fe:	4628      	mov	r0, r5
    2a00:	f7ff fb38 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a04:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a08:	9607      	str	r6, [sp, #28]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	f47f af63 	bne.w	28d6 <MTPD::GetObjectInfo(unsigned long)+0x72>
    2a10:	2204      	movs	r2, #4
    2a12:	a907      	add	r1, sp, #28
    2a14:	4628      	mov	r0, r5
    2a16:	f7ff fb2d 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a1a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a1e:	9607      	str	r6, [sp, #28]
    2a20:	2b00      	cmp	r3, #0
    2a22:	f47f af5d 	bne.w	28e0 <MTPD::GetObjectInfo(unsigned long)+0x7c>
    2a26:	2204      	movs	r2, #4
    2a28:	a907      	add	r1, sp, #28
    2a2a:	4628      	mov	r0, r5
    2a2c:	f7ff fb22 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a30:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a34:	9607      	str	r6, [sp, #28]
    2a36:	2b00      	cmp	r3, #0
    2a38:	f47f af57 	bne.w	28ea <MTPD::GetObjectInfo(unsigned long)+0x86>
    2a3c:	2204      	movs	r2, #4
    2a3e:	a907      	add	r1, sp, #28
    2a40:	4628      	mov	r0, r5
    2a42:	f7ff fb17 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a46:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a4a:	9607      	str	r6, [sp, #28]
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	f47f af51 	bne.w	28f4 <MTPD::GetObjectInfo(unsigned long)+0x90>
    2a52:	2204      	movs	r2, #4
    2a54:	a907      	add	r1, sp, #28
    2a56:	4628      	mov	r0, r5
    2a58:	f7ff fb0c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a5c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a60:	9607      	str	r6, [sp, #28]
    2a62:	2b00      	cmp	r3, #0
    2a64:	f47f af4b 	bne.w	28fe <MTPD::GetObjectInfo(unsigned long)+0x9a>
    2a68:	2204      	movs	r2, #4
    2a6a:	a907      	add	r1, sp, #28
    2a6c:	4628      	mov	r0, r5
    2a6e:	f7ff fb01 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a72:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a76:	9607      	str	r6, [sp, #28]
    2a78:	2b00      	cmp	r3, #0
    2a7a:	f47f af45 	bne.w	2908 <MTPD::GetObjectInfo(unsigned long)+0xa4>
    2a7e:	2204      	movs	r2, #4
    2a80:	a907      	add	r1, sp, #28
    2a82:	4628      	mov	r0, r5
    2a84:	f7ff faf6 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2a88:	f8d9 3000 	ldr.w	r3, [r9]
    2a8c:	9307      	str	r3, [sp, #28]
    2a8e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a92:	2b00      	cmp	r3, #0
    2a94:	f47f af3d 	bne.w	2912 <MTPD::GetObjectInfo(unsigned long)+0xae>
    2a98:	2204      	movs	r2, #4
    2a9a:	a907      	add	r1, sp, #28
    2a9c:	4628      	mov	r0, r5
    2a9e:	f7ff fae9 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2aa2:	9b05      	ldr	r3, [sp, #20]
    { if (write_get_length_) 
    2aa4:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2aa8:	f1a3 33ff 	sub.w	r3, r3, #4294967295
    2aac:	fab3 f383 	clz	r3, r3
    2ab0:	095b      	lsrs	r3, r3, #5
    2ab2:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    2ab6:	2e00      	cmp	r6, #0
    2ab8:	f47f af30 	bne.w	291c <MTPD::GetObjectInfo(unsigned long)+0xb8>
    2abc:	2202      	movs	r2, #2
    2abe:	a907      	add	r1, sp, #28
    2ac0:	4628      	mov	r0, r5
    2ac2:	f7ff fad7 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2ac6:	9607      	str	r6, [sp, #28]
    2ac8:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2acc:	2e00      	cmp	r6, #0
    2ace:	f47f af2a 	bne.w	2926 <MTPD::GetObjectInfo(unsigned long)+0xc2>
    2ad2:	2204      	movs	r2, #4
    2ad4:	a907      	add	r1, sp, #28
    2ad6:	4628      	mov	r0, r5
    2ad8:	f7ff facc 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2adc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ae0:	9607      	str	r6, [sp, #28]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	f47f af24 	bne.w	2930 <MTPD::GetObjectInfo(unsigned long)+0xcc>
    2ae8:	2204      	movs	r2, #4
    2aea:	a907      	add	r1, sp, #28
    2aec:	4628      	mov	r0, r5
    2aee:	f7ff fac1 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    2af2:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
    2af6:	2b00      	cmp	r3, #0
    2af8:	f47f af24 	bne.w	2944 <MTPD::GetObjectInfo(unsigned long)+0xe0>
    { write8(0);
    2afc:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    2b00:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b04:	b34b      	cbz	r3, 2b5a <MTPD::GetObjectInfo(unsigned long)+0x2f6>
        write_length_ += len;
    2b06:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b0a:	3301      	adds	r3, #1
    2b0c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    2b10:	f898 3000 	ldrb.w	r3, [r8]
    2b14:	2b00      	cmp	r3, #0
    2b16:	f47f af1e 	bne.w	2956 <MTPD::GetObjectInfo(unsigned long)+0xf2>
    { write8(0);
    2b1a:	f88d 301c 	strb.w	r3, [sp, #28]
    { if (write_get_length_) 
    2b1e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b22:	b303      	cbz	r3, 2b66 <MTPD::GetObjectInfo(unsigned long)+0x302>
        write_length_ += len;
    2b24:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b28:	3301      	adds	r3, #1
    2b2a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    2b2e:	783b      	ldrb	r3, [r7, #0]
    2b30:	2b00      	cmp	r3, #0
    2b32:	f47f af18 	bne.w	2966 <MTPD::GetObjectInfo(unsigned long)+0x102>
    { if (write_get_length_) 
    2b36:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    2b3a:	f88d 301c 	strb.w	r3, [sp, #28]
    2b3e:	b1c2      	cbz	r2, 2b72 <MTPD::GetObjectInfo(unsigned long)+0x30e>
        write_length_ += len;
    2b40:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b44:	3301      	adds	r3, #1
    2b46:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b4a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b4e:	3301      	adds	r3, #1
    2b50:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2b54:	b069      	add	sp, #420	; 0x1a4
    2b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b5a:	2201      	movs	r2, #1
    2b5c:	a907      	add	r1, sp, #28
    2b5e:	4628      	mov	r0, r5
    2b60:	f7ff fa88 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2b64:	e6f2      	b.n	294c <MTPD::GetObjectInfo(unsigned long)+0xe8>
    2b66:	2201      	movs	r2, #1
    2b68:	a907      	add	r1, sp, #28
    2b6a:	4628      	mov	r0, r5
    2b6c:	f7ff fa82 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2b70:	e6f5      	b.n	295e <MTPD::GetObjectInfo(unsigned long)+0xfa>
    2b72:	2201      	movs	r2, #1
    2b74:	a907      	add	r1, sp, #28
    2b76:	4628      	mov	r0, r5
    2b78:	f7ff fa7c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2b7c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b80:	e6f7      	b.n	2972 <MTPD::GetObjectInfo(unsigned long)+0x10e>
    2b82:	bf00      	nop

00002b84 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    2b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    2b88:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2c08 <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    2b8c:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    {
    2b90:	b082      	sub	sp, #8
    2b92:	4607      	mov	r7, r0
      write32(propertyListNum);
    2b94:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2b98:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    2b9c:	9301      	str	r3, [sp, #4]
    2b9e:	b34a      	cbz	r2, 2bf4 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    2ba0:	f8d5 2428 	ldr.w	r2, [r5, #1064]	; 0x428
    2ba4:	3204      	adds	r2, #4
    2ba6:	f8c5 2428 	str.w	r2, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2baa:	b303      	cbz	r3, 2bee <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2bac:	4e15      	ldr	r6, [pc, #84]	; (2c04 <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    2bae:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    2bb2:	2400      	movs	r4, #0
    2bb4:	e00b      	b.n	2bce <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    2bb6:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2bba:	3401      	adds	r4, #1
        write_length_ += len;
    2bbc:	4413      	add	r3, r2
    2bbe:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2bc2:	f8d8 3000 	ldr.w	r3, [r8]
    2bc6:	42a3      	cmp	r3, r4
    2bc8:	d911      	bls.n	2bee <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2bca:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    2bce:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2bd2:	2202      	movs	r2, #2
    2bd4:	a901      	add	r1, sp, #4
    2bd6:	4638      	mov	r0, r7
    2bd8:	f8ad c004 	strh.w	ip, [sp, #4]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d1ea      	bne.n	2bb6 <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    2be0:	f7ff fa48 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2be4:	3401      	adds	r4, #1
    2be6:	f8d8 3000 	ldr.w	r3, [r8]
    2bea:	42a3      	cmp	r3, r4
    2bec:	d8ed      	bhi.n	2bca <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    2bee:	b002      	add	sp, #8
    2bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bf4:	2204      	movs	r2, #4
    2bf6:	eb0d 0102 	add.w	r1, sp, r2
    2bfa:	f7ff fa3b 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2bfe:	f8d8 3000 	ldr.w	r3, [r8]
    2c02:	e7d2      	b.n	2baa <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2c04:	200009b4 	.word	0x200009b4
    2c08:	20009538 	.word	0x20009538

00002c0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2c0c:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    2c10:	440b      	add	r3, r1
    {
    2c12:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c14:	b085      	sub	sp, #20
      switch(p1)
    2c16:	2b43      	cmp	r3, #67	; 0x43
    2c18:	f200 808e 	bhi.w	2d38 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2c1c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2c20:	010700b9 	.word	0x010700b9
    2c24:	01610125 	.word	0x01610125
    2c28:	008c008c 	.word	0x008c008c
    2c2c:	0196008e 	.word	0x0196008e
    2c30:	008c01a2 	.word	0x008c01a2
    2c34:	008c00d7 	.word	0x008c00d7
    2c38:	008c008c 	.word	0x008c008c
    2c3c:	008c008c 	.word	0x008c008c
    2c40:	008c008c 	.word	0x008c008c
    2c44:	008c008c 	.word	0x008c008c
    2c48:	008c008c 	.word	0x008c008c
    2c4c:	008c008c 	.word	0x008c008c
    2c50:	008c008c 	.word	0x008c008c
    2c54:	008c008c 	.word	0x008c008c
    2c58:	008c008c 	.word	0x008c008c
    2c5c:	008c008c 	.word	0x008c008c
    2c60:	008c008c 	.word	0x008c008c
    2c64:	008c008c 	.word	0x008c008c
    2c68:	008c008c 	.word	0x008c008c
    2c6c:	008c008c 	.word	0x008c008c
    2c70:	008c008c 	.word	0x008c008c
    2c74:	008c008c 	.word	0x008c008c
    2c78:	008c008c 	.word	0x008c008c
    2c7c:	008c008c 	.word	0x008c008c
    2c80:	008c008c 	.word	0x008c008c
    2c84:	008c008c 	.word	0x008c008c
    2c88:	008c008c 	.word	0x008c008c
    2c8c:	008c008c 	.word	0x008c008c
    2c90:	008c008c 	.word	0x008c008c
    2c94:	008c008c 	.word	0x008c008c
    2c98:	008c008c 	.word	0x008c008c
    2c9c:	008c008c 	.word	0x008c008c
    2ca0:	008c01ae 	.word	0x008c01ae
    2ca4:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2ca8:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2cac:	f64d 4244 	movw	r2, #56388	; 0xdc44
    2cb0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2cb4:	f8ad 2008 	strh.w	r2, [sp, #8]
    2cb8:	2b00      	cmp	r3, #0
    2cba:	d14a      	bne.n	2d52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2cbc:	2202      	movs	r2, #2
    2cbe:	a902      	add	r1, sp, #8
    2cc0:	9001      	str	r0, [sp, #4]
    2cc2:	f7ff f9d7 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cca:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2cce:	9801      	ldr	r0, [sp, #4]
    2cd0:	f8ad 3008 	strh.w	r3, [sp, #8]
    2cd4:	2e00      	cmp	r6, #0
    2cd6:	d141      	bne.n	2d5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2cd8:	2202      	movs	r2, #2
    2cda:	a902      	add	r1, sp, #8
    2cdc:	9001      	str	r0, [sp, #4]
    2cde:	f7ff f9c9 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2ce2:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2ce6:	9801      	ldr	r0, [sp, #4]
    2ce8:	f88d 6008 	strb.w	r6, [sp, #8]
    2cec:	2d00      	cmp	r5, #0
    2cee:	d13a      	bne.n	2d66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2cf0:	2201      	movs	r2, #1
    2cf2:	a902      	add	r1, sp, #8
    2cf4:	9001      	str	r0, [sp, #4]
    2cf6:	f7ff f9bd 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2cfa:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2cfe:	9801      	ldr	r0, [sp, #4]
    2d00:	f88d 5008 	strb.w	r5, [sp, #8]
    2d04:	bba6      	cbnz	r6, 2d70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2d06:	2201      	movs	r2, #1
    2d08:	a902      	add	r1, sp, #8
    2d0a:	9001      	str	r0, [sp, #4]
    2d0c:	f7ff f9b2 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2d10:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2d14:	9801      	ldr	r0, [sp, #4]
    2d16:	9602      	str	r6, [sp, #8]
    2d18:	bb7d      	cbnz	r5, 2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2d1a:	2204      	movs	r2, #4
    2d1c:	a902      	add	r1, sp, #8
    2d1e:	9001      	str	r0, [sp, #4]
    2d20:	f7ff f9a8 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2d24:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d28:	9801      	ldr	r0, [sp, #4]
    2d2a:	f88d 5008 	strb.w	r5, [sp, #8]
    2d2e:	bb4b      	cbnz	r3, 2d84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    2d30:	2201      	movs	r2, #1
    2d32:	a902      	add	r1, sp, #8
    2d34:	f7ff f99e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2d38:	b005      	add	sp, #20
    2d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2d3c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d40:	f64d 4207 	movw	r2, #56327	; 0xdc07
    2d44:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d48:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	f000 8170 	beq.w	3032 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    2d52:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d56:	3302      	adds	r3, #2
    2d58:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d5c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d60:	3302      	adds	r3, #2
    2d62:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d66:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d6a:	3301      	adds	r3, #1
    2d6c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d70:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d74:	3301      	adds	r3, #1
    2d76:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d7a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d7e:	3304      	adds	r3, #4
    2d80:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d84:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d88:	3301      	adds	r3, #1
    2d8a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    }
    2d8e:	b005      	add	sp, #20
    2d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2d92:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d96:	f64d 4201 	movw	r2, #56321	; 0xdc01
    2d9a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d9e:	f8ad 2008 	strh.w	r2, [sp, #8]
    2da2:	b1f3      	cbz	r3, 2de2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    2da4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2da8:	3302      	adds	r3, #2
    2daa:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2dae:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2db2:	3302      	adds	r3, #2
    2db4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2db8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2dbc:	3301      	adds	r3, #1
    2dbe:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2dc2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2dc6:	3304      	adds	r3, #4
    2dc8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2dcc:	e7d5      	b.n	2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2dce:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2dd2:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    2dd6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2dda:	f8ad 2008 	strh.w	r2, [sp, #8]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d1e0      	bne.n	2da4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    2de2:	2202      	movs	r2, #2
    2de4:	a902      	add	r1, sp, #8
    2de6:	9001      	str	r0, [sp, #4]
    2de8:	f7ff f944 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2dec:	2306      	movs	r3, #6
    2dee:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2df2:	9801      	ldr	r0, [sp, #4]
    2df4:	f8ad 3008 	strh.w	r3, [sp, #8]
    2df8:	2e00      	cmp	r6, #0
    2dfa:	d1d8      	bne.n	2dae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    2dfc:	2202      	movs	r2, #2
    2dfe:	a902      	add	r1, sp, #8
    2e00:	9001      	str	r0, [sp, #4]
    2e02:	f7ff f937 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2e06:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e0a:	9801      	ldr	r0, [sp, #4]
    2e0c:	f88d 6008 	strb.w	r6, [sp, #8]
    2e10:	2d00      	cmp	r5, #0
    2e12:	d1d1      	bne.n	2db8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    2e14:	2201      	movs	r2, #1
    2e16:	a902      	add	r1, sp, #8
    2e18:	9001      	str	r0, [sp, #4]
    2e1a:	f7ff f92b 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2e1e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2e22:	9801      	ldr	r0, [sp, #4]
    2e24:	9502      	str	r5, [sp, #8]
    2e26:	2e00      	cmp	r6, #0
    2e28:	d1cb      	bne.n	2dc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    2e2a:	2204      	movs	r2, #4
    2e2c:	e76c      	b.n	2d08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2e2e:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2e32:	f64d 4202 	movw	r2, #56322	; 0xdc02
    2e36:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2e3a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e3e:	b1f3      	cbz	r3, 2e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    2e40:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e44:	3302      	adds	r3, #2
    2e46:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e4a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e4e:	3302      	adds	r3, #2
    2e50:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e54:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e58:	3301      	adds	r3, #1
    2e5a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e5e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e62:	3302      	adds	r3, #2
    2e64:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2e68:	e787      	b.n	2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2e6a:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2e6e:	f64d 4203 	movw	r2, #56323	; 0xdc03
    2e72:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2e76:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d1e0      	bne.n	2e40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    2e7e:	2202      	movs	r2, #2
    2e80:	a902      	add	r1, sp, #8
    2e82:	9001      	str	r0, [sp, #4]
    2e84:	2604      	movs	r6, #4
    2e86:	f7ff f8f5 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2e8a:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e8e:	9801      	ldr	r0, [sp, #4]
    2e90:	f8ad 6008 	strh.w	r6, [sp, #8]
    2e94:	2d00      	cmp	r5, #0
    2e96:	d1d8      	bne.n	2e4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    2e98:	2202      	movs	r2, #2
    2e9a:	a902      	add	r1, sp, #8
    2e9c:	9001      	str	r0, [sp, #4]
    2e9e:	f7ff f8e9 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2ea2:	f88d 5008 	strb.w	r5, [sp, #8]
    2ea6:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2eaa:	9801      	ldr	r0, [sp, #4]
    2eac:	2d00      	cmp	r5, #0
    2eae:	d1d1      	bne.n	2e54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    2eb0:	2201      	movs	r2, #1
    2eb2:	a902      	add	r1, sp, #8
    2eb4:	9001      	str	r0, [sp, #4]
    2eb6:	f7ff f8dd 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2eba:	f8ad 5008 	strh.w	r5, [sp, #8]
    2ebe:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2ec2:	9801      	ldr	r0, [sp, #4]
    2ec4:	2d00      	cmp	r5, #0
    2ec6:	d1ca      	bne.n	2e5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    2ec8:	2202      	movs	r2, #2
    2eca:	a902      	add	r1, sp, #8
    2ecc:	9001      	str	r0, [sp, #4]
    2ece:	f7ff f8d1 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2ed2:	9502      	str	r5, [sp, #8]
    2ed4:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2ed8:	9801      	ldr	r0, [sp, #4]
    2eda:	2d00      	cmp	r5, #0
    2edc:	f43f af1d 	beq.w	2d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    2ee0:	e74b      	b.n	2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2ee2:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2ee6:	f64d 4204 	movw	r2, #56324	; 0xdc04
    2eea:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2eee:	f8ad 2008 	strh.w	r2, [sp, #8]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	f040 80e1 	bne.w	30ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    2ef8:	2202      	movs	r2, #2
    2efa:	a902      	add	r1, sp, #8
    2efc:	9001      	str	r0, [sp, #4]
    2efe:	2508      	movs	r5, #8
    2f00:	f7ff f8b8 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2f04:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2f08:	9801      	ldr	r0, [sp, #4]
    2f0a:	f8ad 5008 	strh.w	r5, [sp, #8]
    2f0e:	2e00      	cmp	r6, #0
    2f10:	f040 80d8 	bne.w	30c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    2f14:	2202      	movs	r2, #2
    2f16:	a902      	add	r1, sp, #8
    2f18:	9001      	str	r0, [sp, #4]
    2f1a:	f7ff f8ab 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2f1e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f22:	9801      	ldr	r0, [sp, #4]
    2f24:	f88d 6008 	strb.w	r6, [sp, #8]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	f040 80d0 	bne.w	30ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    2f2e:	2201      	movs	r2, #1
    2f30:	a902      	add	r1, sp, #8
    2f32:	9001      	str	r0, [sp, #4]
    2f34:	f7ff f89e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2f38:	2200      	movs	r2, #0
    2f3a:	2300      	movs	r3, #0
    2f3c:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2f40:	9801      	ldr	r0, [sp, #4]
    2f42:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2f46:	bbb6      	cbnz	r6, 2fb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2f48:	462a      	mov	r2, r5
    2f4a:	e6dd      	b.n	2d08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2f4c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f50:	f64d 4208 	movw	r2, #56328	; 0xdc08
    2f54:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f58:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	f43f aead 	beq.w	2cbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2f62:	e6f6      	b.n	2d52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2f64:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f68:	f64d 4209 	movw	r2, #56329	; 0xdc09
    2f6c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f70:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f74:	2b00      	cmp	r3, #0
    2f76:	f43f aea1 	beq.w	2cbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2f7a:	e6ea      	b.n	2d52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2f7c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f80:	f64d 4241 	movw	r2, #56385	; 0xdc41
    2f84:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f88:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f8c:	b1cb      	cbz	r3, 2fc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    2f8e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f92:	3302      	adds	r3, #2
    2f94:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2f98:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f9c:	3302      	adds	r3, #2
    2f9e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2fa2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2fa6:	3301      	adds	r3, #1
    2fa8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2fac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2fb0:	3308      	adds	r3, #8
    2fb2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2fb6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2fba:	3308      	adds	r3, #8
    2fbc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2fc0:	e6db      	b.n	2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2fc2:	2202      	movs	r2, #2
    2fc4:	a902      	add	r1, sp, #8
    2fc6:	9001      	str	r0, [sp, #4]
    2fc8:	f7ff f854 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2fcc:	230a      	movs	r3, #10
    2fce:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2fd2:	9801      	ldr	r0, [sp, #4]
    2fd4:	f8ad 3008 	strh.w	r3, [sp, #8]
    2fd8:	2d00      	cmp	r5, #0
    2fda:	d1dd      	bne.n	2f98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    2fdc:	2202      	movs	r2, #2
    2fde:	a902      	add	r1, sp, #8
    2fe0:	9001      	str	r0, [sp, #4]
    2fe2:	f7ff f847 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    2fe6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2fea:	9801      	ldr	r0, [sp, #4]
    2fec:	f88d 5008 	strb.w	r5, [sp, #8]
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d1d6      	bne.n	2fa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    2ff4:	2201      	movs	r2, #1
    2ff6:	a902      	add	r1, sp, #8
    2ff8:	9001      	str	r0, [sp, #4]
    2ffa:	2600      	movs	r6, #0
    2ffc:	f7ff f83a 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    3000:	2700      	movs	r7, #0
    3002:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    3006:	9801      	ldr	r0, [sp, #4]
    3008:	e9cd 6702 	strd	r6, r7, [sp, #8]
    300c:	2b00      	cmp	r3, #0
    300e:	d1cd      	bne.n	2fac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    3010:	2208      	movs	r2, #8
    3012:	9001      	str	r0, [sp, #4]
    3014:	eb0d 0102 	add.w	r1, sp, r2
    3018:	f7ff f82c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    301c:	9801      	ldr	r0, [sp, #4]
    301e:	e9cd 6702 	strd	r6, r7, [sp, #8]
    3022:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    3026:	2e00      	cmp	r6, #0
    3028:	d1c5      	bne.n	2fb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    302a:	2208      	movs	r2, #8
    302c:	eb0d 0102 	add.w	r1, sp, r2
    3030:	e66b      	b.n	2d0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    3032:	2202      	movs	r2, #2
    3034:	a902      	add	r1, sp, #8
    3036:	9001      	str	r0, [sp, #4]
    3038:	f7ff f81c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    303c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3040:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    3044:	9801      	ldr	r0, [sp, #4]
    3046:	f8ad 2008 	strh.w	r2, [sp, #8]
    304a:	2b00      	cmp	r3, #0
    304c:	f47f ae86 	bne.w	2d5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    3050:	2202      	movs	r2, #2
    3052:	a902      	add	r1, sp, #8
    3054:	9001      	str	r0, [sp, #4]
    3056:	2501      	movs	r5, #1
    3058:	f7ff f80c 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    305c:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    3060:	9801      	ldr	r0, [sp, #4]
    3062:	f88d 5008 	strb.w	r5, [sp, #8]
    3066:	2e00      	cmp	r6, #0
    3068:	f47f ae7d 	bne.w	2d66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    306c:	462a      	mov	r2, r5
    306e:	a902      	add	r1, sp, #8
    3070:	9001      	str	r0, [sp, #4]
    3072:	f7fe ffff 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    3076:	f88d 6008 	strb.w	r6, [sp, #8]
    307a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    307e:	9801      	ldr	r0, [sp, #4]
    3080:	2e00      	cmp	r6, #0
    3082:	f47f ae75 	bne.w	2d70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    3086:	462a      	mov	r2, r5
    3088:	a902      	add	r1, sp, #8
    308a:	9001      	str	r0, [sp, #4]
    308c:	f7fe fff2 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    3090:	9602      	str	r6, [sp, #8]
    3092:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    3096:	9801      	ldr	r0, [sp, #4]
    3098:	2e00      	cmp	r6, #0
    309a:	f47f ae6e 	bne.w	2d7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    309e:	2204      	movs	r2, #4
    30a0:	a902      	add	r1, sp, #8
    30a2:	9001      	str	r0, [sp, #4]
    30a4:	f7fe ffe6 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    30a8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    30ac:	9801      	ldr	r0, [sp, #4]
    30ae:	f88d 6008 	strb.w	r6, [sp, #8]
    30b2:	2b00      	cmp	r3, #0
    30b4:	f43f ae3c 	beq.w	2d30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    30b8:	e664      	b.n	2d84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    30ba:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    30be:	3302      	adds	r3, #2
    30c0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    30c4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    30c8:	3302      	adds	r3, #2
    30ca:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    30ce:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    30d2:	3301      	adds	r3, #1
    30d4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    30d8:	e76d      	b.n	2fb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    30da:	bf00      	nop

000030dc <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    30dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30e0:	4604      	mov	r4, r0
    30e2:	b0e9      	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    30e4:	6800      	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    30e6:	4615      	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    30e8:	f10d 0712 	add.w	r7, sp, #18
    30ec:	f10d 0960 	add.w	r9, sp, #96	; 0x60
    30f0:	6803      	ldr	r3, [r0, #0]
    30f2:	f10d 0a20 	add.w	sl, sp, #32
    30f6:	f10d 0818 	add.w	r8, sp, #24
    30fa:	aa28      	add	r2, sp, #160	; 0xa0
    30fc:	9701      	str	r7, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    30fe:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3100:	f8cd 900c 	str.w	r9, [sp, #12]
    3104:	f8cd a008 	str.w	sl, [sp, #8]
    3108:	f8cd 8000 	str.w	r8, [sp]
    310c:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
    3110:	ab05      	add	r3, sp, #20
    3112:	47d8      	blx	fp
      switch(p2)
    3114:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    3118:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    311a:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    311c:	9905      	ldr	r1, [sp, #20]
      uint32_t storage = Store2Storage(store);
    311e:	1c55      	adds	r5, r2, #1
      switch(p2)
    3120:	2b43      	cmp	r3, #67	; 0x43
    3122:	d851      	bhi.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    3124:	e8df f003 	tbb	[pc, r3]
    3128:	b796a46e 	.word	0xb796a46e
    312c:	5b535050 	.word	0x5b535050
    3130:	507b508d 	.word	0x507b508d
    3134:	50505050 	.word	0x50505050
    3138:	50505050 	.word	0x50505050
    313c:	50505050 	.word	0x50505050
    3140:	50505050 	.word	0x50505050
    3144:	50505050 	.word	0x50505050
    3148:	50505050 	.word	0x50505050
    314c:	50505050 	.word	0x50505050
    3150:	50505050 	.word	0x50505050
    3154:	50505050 	.word	0x50505050
    3158:	50505050 	.word	0x50505050
    315c:	50505050 	.word	0x50505050
    3160:	50505050 	.word	0x50505050
    3164:	50505050 	.word	0x50505050
    3168:	53505022 	.word	0x53505022
          write32(p1);
    316c:	9607      	str	r6, [sp, #28]
    { if (write_get_length_) 
    316e:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    3172:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    3176:	2b00      	cmp	r3, #0
    3178:	f040 80b6 	bne.w	32e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x20c>
    317c:	2204      	movs	r2, #4
    317e:	a907      	add	r1, sp, #28
    3180:	4620      	mov	r0, r4
    3182:	f7fe ff77 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    3186:	f8d8 3000 	ldr.w	r3, [r8]
    318a:	9307      	str	r3, [sp, #28]
    318c:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    3190:	2b00      	cmp	r3, #0
    3192:	f040 80ae 	bne.w	32f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x216>
    3196:	2204      	movs	r2, #4
    3198:	a907      	add	r1, sp, #28
    319a:	4620      	mov	r0, r4
    319c:	f7fe ff6a 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    31a0:	f896 7424 	ldrb.w	r7, [r6, #1060]	; 0x424
          write32(storage);
    31a4:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    31a6:	2f00      	cmp	r7, #0
    31a8:	d17b      	bne.n	32a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c6>
    31aa:	2204      	movs	r2, #4
    31ac:	a907      	add	r1, sp, #28
    31ae:	4620      	mov	r0, r4
    31b0:	f7fe ff60 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    31b4:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    31b8:	9707      	str	r7, [sp, #28]
    { if (write_get_length_) 
    31ba:	2b00      	cmp	r3, #0
    31bc:	d176      	bne.n	32ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d0>
    31be:	2204      	movs	r2, #4
    31c0:	a907      	add	r1, sp, #28
    31c2:	4620      	mov	r0, r4
    31c4:	f7fe ff56 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    }
    31c8:	b069      	add	sp, #420	; 0x1a4
    31ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*str) 
    31ce:	f89d 30a0 	ldrb.w	r3, [sp, #160]	; 0xa0
    31d2:	b14b      	cbz	r3, 31e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10c>
    31d4:	a928      	add	r1, sp, #160	; 0xa0
    31d6:	4620      	mov	r0, r4
    31d8:	f7fe ff8a 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    31dc:	e7f4      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    31de:	f89a 3000 	ldrb.w	r3, [sl]
    31e2:	2b00      	cmp	r3, #0
    31e4:	f040 808b 	bne.w	32fe <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x222>
    { if (write_get_length_) 
    31e8:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
    31ec:	f88d 301c 	strb.w	r3, [sp, #28]
    31f0:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
    31f4:	2900      	cmp	r1, #0
    31f6:	d05f      	beq.n	32b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1dc>
        write_length_ += len;
    31f8:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    31fc:	3301      	adds	r3, #1
    31fe:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    3202:	e7e1      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    { if (write_get_length_) 
    3204:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    3208:	9507      	str	r5, [sp, #28]
    320a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    320e:	2a00      	cmp	r2, #0
    3210:	d0d5      	beq.n	31be <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
        write_length_ += len;
    3212:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    3216:	3204      	adds	r2, #4
    3218:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    321c:	e7d4      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
          write32((store==parent)? 0: parent);
    321e:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    3222:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
          write32((store==parent)? 0: parent);
    3226:	429a      	cmp	r2, r3
    3228:	bf08      	it	eq
    322a:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    322c:	f891 2424 	ldrb.w	r2, [r1, #1060]	; 0x424
    3230:	9307      	str	r3, [sp, #28]
    3232:	2a00      	cmp	r2, #0
    3234:	d0c3      	beq.n	31be <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
        write_length_ += len;
    3236:	f8d1 3428 	ldr.w	r3, [r1, #1064]	; 0x428
    323a:	3304      	adds	r3, #4
    323c:	f8c1 3428 	str.w	r3, [r1, #1064]	; 0x428
    3240:	e7c2      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    if (*str) 
    3242:	f899 3000 	ldrb.w	r3, [r9]
    3246:	2b00      	cmp	r3, #0
    3248:	d0ce      	beq.n	31e8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10c>
    324a:	4649      	mov	r1, r9
    324c:	4620      	mov	r0, r4
    324e:	f7fe ff4f 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    3252:	e7b9      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    { if (write_get_length_) 
    3254:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    3258:	2100      	movs	r1, #0
    325a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    325e:	f8ad 101c 	strh.w	r1, [sp, #28]
    3262:	b192      	cbz	r2, 328a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ae>
        write_length_ += len;
    3264:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    3268:	3202      	adds	r2, #2
    326a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    326e:	e7ab      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
          write16(dir?0x3001:0x3000);
    3270:	3101      	adds	r1, #1
    { if (write_get_length_) 
    3272:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
          write16(dir?0x3001:0x3000);
    3276:	f243 0301 	movw	r3, #12289	; 0x3001
    { if (write_get_length_) 
    327a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
          write16(dir?0x3001:0x3000);
    327e:	bf18      	it	ne
    3280:	f44f 5340 	movne.w	r3, #12288	; 0x3000
    3284:	f8ad 301c 	strh.w	r3, [sp, #28]
    { if (write_get_length_) 
    3288:	b9e1      	cbnz	r1, 32c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e8>
    328a:	2202      	movs	r2, #2
    328c:	a907      	add	r1, sp, #28
    328e:	4620      	mov	r0, r4
    3290:	f7fe fef0 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
          break;
    3294:	e798      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    { if (write_get_length_) 
    3296:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    329a:	9107      	str	r1, [sp, #28]
    329c:	f896 5424 	ldrb.w	r5, [r6, #1060]	; 0x424
    32a0:	b1b5      	cbz	r5, 32d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1f4>
        write_length_ += len;
    32a2:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32a6:	3304      	adds	r3, #4
    32a8:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    32ac:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32b0:	3304      	adds	r3, #4
    32b2:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    32b6:	e787      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    32b8:	2201      	movs	r2, #1
    32ba:	a907      	add	r1, sp, #28
    32bc:	4620      	mov	r0, r4
    32be:	f7fe fed9 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    }
    32c2:	e781      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
        write_length_ += len;
    32c4:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    32c8:	3302      	adds	r3, #2
    32ca:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    32ce:	e77b      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>
    32d0:	2204      	movs	r2, #4
    32d2:	a907      	add	r1, sp, #28
    32d4:	4620      	mov	r0, r4
    32d6:	f7fe fecd 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    32da:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    32de:	9507      	str	r5, [sp, #28]
    { if (write_get_length_) 
    32e0:	2b00      	cmp	r3, #0
    32e2:	f43f af6c 	beq.w	31be <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xe2>
    32e6:	e7e1      	b.n	32ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d0>
        write_length_ += len;
    32e8:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32ec:	3304      	adds	r3, #4
    32ee:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    32f2:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32f6:	3304      	adds	r3, #4
    32f8:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    { if (write_get_length_) 
    32fc:	e7d1      	b.n	32a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c6>
    32fe:	4651      	mov	r1, sl
    3300:	4620      	mov	r0, r4
    3302:	f7fe fef5 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
    3306:	e75f      	b.n	31c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xec>

00003308 <MTPD::GetObject(unsigned long)>:
    {
    3308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    330c:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    330e:	6800      	ldr	r0, [r0, #0]
    3310:	6803      	ldr	r3, [r0, #0]
      if (write_get_length_) {
    3312:	f50b 5800 	add.w	r8, fp, #8192	; 0x2000
    {
    3316:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    331c:	b085      	sub	sp, #20
    331e:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3322:	4798      	blx	r3
      if (write_get_length_) {
    3324:	f898 6424 	ldrb.w	r6, [r8, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    3328:	4682      	mov	sl, r0
      if (write_get_length_) {
    332a:	b14e      	cbz	r6, 3340 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    332c:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3330:	4403      	add	r3, r0
    3332:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    }
    3336:	b005      	add	sp, #20
    3338:	ecbd 8b02 	vpop	{d8}
    333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3340:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    3344:	f8c8 4420 	str.w	r4, [r8, #1056]	; 0x420
        while(pos<size)
    3348:	2800      	cmp	r0, #0
    334a:	d060      	beq.n	340e <MTPD::GetObject(unsigned long)+0x106>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    334c:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3350:	f50b 7908 	add.w	r9, fp, #544	; 0x220
            disk_pos=0;
    3354:	f8cd b00c 	str.w	fp, [sp, #12]
        uint32_t len = sizeof(MTPHeader);
    3358:	250c      	movs	r5, #12
            disk_pos=0;
    335a:	469b      	mov	fp, r3
    335c:	e022      	b.n	33a4 <MTPD::GetObject(unsigned long)+0x9c>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    335e:	ebaa 0306 	sub.w	r3, sl, r6
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3362:	eb0b 0104 	add.w	r1, fp, r4
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3366:	9302      	str	r3, [sp, #8]
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3368:	f5c4 5300 	rsb	r3, r4, #8192	; 0x2000
    336c:	9f02      	ldr	r7, [sp, #8]
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    336e:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3372:	eb09 0005 	add.w	r0, r9, r5
    3376:	429f      	cmp	r7, r3
    3378:	bf28      	it	cs
    337a:	461f      	movcs	r7, r3
    337c:	4297      	cmp	r7, r2
    337e:	bf28      	it	cs
    3380:	4617      	movcs	r7, r2
    3382:	463a      	mov	r2, r7
          len += to_copy;
    3384:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3386:	f00b f909 	bl	e59c <memcpy>
          disk_pos += to_copy;
    338a:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    338e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    3392:	443e      	add	r6, r7
          disk_pos += to_copy;
    3394:	443b      	add	r3, r7
    3396:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    339a:	d021      	beq.n	33e0 <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    339c:	45b2      	cmp	sl, r6
    339e:	d92b      	bls.n	33f8 <MTPD::GetObject(unsigned long)+0xf0>
          if(disk_pos==DISK_BUFFER_SIZE)
    33a0:	f8d8 4420 	ldr.w	r4, [r8, #1056]	; 0x420
    33a4:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    33a8:	d1d9      	bne.n	335e <MTPD::GetObject(unsigned long)+0x56>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    33aa:	ebaa 0706 	sub.w	r7, sl, r6
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    33ae:	9b03      	ldr	r3, [sp, #12]
    33b0:	4632      	mov	r2, r6
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    33b2:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    33b6:	6818      	ldr	r0, [r3, #0]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    33b8:	9702      	str	r7, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    33ba:	465b      	mov	r3, fp
    33bc:	6801      	ldr	r1, [r0, #0]
    33be:	bf34      	ite	cc
    33c0:	46bc      	movcc	ip, r7
    33c2:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    33c6:	f8cd c000 	str.w	ip, [sp]
    33ca:	6b09      	ldr	r1, [r1, #48]	; 0x30
    33cc:	460f      	mov	r7, r1
    33ce:	ee18 1a10 	vmov	r1, s16
    33d2:	47b8      	blx	r7
            disk_pos=0;
    33d4:	2200      	movs	r2, #0
    33d6:	4623      	mov	r3, r4
    33d8:	4659      	mov	r1, fp
    33da:	f8c8 2420 	str.w	r2, [r8, #1056]	; 0x420
    33de:	e7c5      	b.n	336c <MTPD::GetObject(unsigned long)+0x64>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33e0:	223c      	movs	r2, #60	; 0x3c
    33e2:	f44f 7100 	mov.w	r1, #512	; 0x200
    33e6:	4648      	mov	r0, r9
    33e8:	f00c fac6 	bl	f978 <usb_mtp_send>
    33ec:	2800      	cmp	r0, #0
    33ee:	ddf7      	ble.n	33e0 <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    33f0:	45b2      	cmp	sl, r6
            len=0;
    33f2:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    33f6:	d8d3      	bhi.n	33a0 <MTPD::GetObject(unsigned long)+0x98>
        if(len>0)
    33f8:	2d00      	cmp	r5, #0
    33fa:	d09c      	beq.n	3336 <MTPD::GetObject(unsigned long)+0x2e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33fc:	223c      	movs	r2, #60	; 0x3c
    33fe:	f44f 7100 	mov.w	r1, #512	; 0x200
    3402:	4648      	mov	r0, r9
    3404:	f00c fab8 	bl	f978 <usb_mtp_send>
    3408:	2800      	cmp	r0, #0
    340a:	ddf7      	ble.n	33fc <MTPD::GetObject(unsigned long)+0xf4>
    340c:	e793      	b.n	3336 <MTPD::GetObject(unsigned long)+0x2e>
    340e:	f50b 7908 	add.w	r9, fp, #544	; 0x220
    3412:	e7f3      	b.n	33fc <MTPD::GetObject(unsigned long)+0xf4>

00003414 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    3414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3418:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    341a:	6800      	ldr	r0, [r0, #0]
    {
    341c:	461c      	mov	r4, r3
    341e:	4615      	mov	r5, r2
      uint32_t size = storage_->GetSize(object_id);
    3420:	6803      	ldr	r3, [r0, #0]
    {
    3422:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    3428:	b087      	sub	sp, #28
    342a:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    342e:	4798      	blx	r3
      if(NumBytes == 0xffffffff) NumBytes=size;
    3430:	1c63      	adds	r3, r4, #1
      size -= offset;
    3432:	eba0 0805 	sub.w	r8, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    3436:	d002      	beq.n	343e <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x2a>
    3438:	45a0      	cmp	r8, r4
    343a:	bf28      	it	cs
    343c:	46a0      	movcs	r8, r4
      if (write_get_length_) {
    343e:	f50b 5700 	add.w	r7, fp, #8192	; 0x2000
    3442:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
    3446:	9304      	str	r3, [sp, #16]
    3448:	b153      	cbz	r3, 3460 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    344a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    344e:	4443      	add	r3, r8
    3450:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    }
    3454:	4640      	mov	r0, r8
    3456:	b007      	add	sp, #28
    3458:	ecbd 8b02 	vpop	{d8}
    345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3460:	f44f 5400 	mov.w	r4, #8192	; 0x2000
        while(pos<size)
    3464:	4545      	cmp	r5, r8
        disk_pos=DISK_BUFFER_SIZE;
    3466:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
        while(pos<size)
    346a:	d2f3      	bcs.n	3454 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    346c:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3470:	f50b 7a08 	add.w	sl, fp, #544	; 0x220
        uint32_t len = sizeof(MTPHeader);
    3474:	f8cd b014 	str.w	fp, [sp, #20]
    3478:	260c      	movs	r6, #12
    347a:	469b      	mov	fp, r3
    347c:	9403      	str	r4, [sp, #12]
    347e:	e01f      	b.n	34c0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xac>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3480:	f5c2 5300 	rsb	r3, r2, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3484:	445a      	add	r2, fp
    3486:	4611      	mov	r1, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3488:	454b      	cmp	r3, r9
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    348a:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    348e:	eb0a 0006 	add.w	r0, sl, r6
    3492:	bf28      	it	cs
    3494:	464b      	movcs	r3, r9
    3496:	429c      	cmp	r4, r3
    3498:	bf28      	it	cs
    349a:	461c      	movcs	r4, r3
    349c:	4622      	mov	r2, r4
          len += to_copy;
    349e:	4426      	add	r6, r4
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    34a0:	f00b f87c 	bl	e59c <memcpy>
          disk_pos += to_copy;
    34a4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    34a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    34ac:	4425      	add	r5, r4
          disk_pos += to_copy;
    34ae:	4423      	add	r3, r4
    34b0:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    34b4:	d022      	beq.n	34fc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
        while(pos<size)
    34b6:	45a8      	cmp	r8, r5
    34b8:	d9cc      	bls.n	3454 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    34ba:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    34be:	9303      	str	r3, [sp, #12]
    34c0:	9a03      	ldr	r2, [sp, #12]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    34c2:	eba8 0905 	sub.w	r9, r8, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    34c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    34ca:	d1d9      	bne.n	3480 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6c>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    34cc:	9b05      	ldr	r3, [sp, #20]
    34ce:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
    34d2:	462a      	mov	r2, r5
    34d4:	6818      	ldr	r0, [r3, #0]
    34d6:	bf34      	ite	cc
    34d8:	46cc      	movcc	ip, r9
    34da:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    34de:	465b      	mov	r3, fp
    34e0:	6801      	ldr	r1, [r0, #0]
    34e2:	f8cd c000 	str.w	ip, [sp]
    34e6:	6b09      	ldr	r1, [r1, #48]	; 0x30
    34e8:	460c      	mov	r4, r1
    34ea:	ee18 1a10 	vmov	r1, s16
    34ee:	47a0      	blx	r4
            disk_pos=0;
    34f0:	4659      	mov	r1, fp
    34f2:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    34f6:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
    34fa:	e7c5      	b.n	3488 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x74>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34fc:	223c      	movs	r2, #60	; 0x3c
    34fe:	f44f 7100 	mov.w	r1, #512	; 0x200
    3502:	4650      	mov	r0, sl
    3504:	f00c fa38 	bl	f978 <usb_mtp_send>
    3508:	2800      	cmp	r0, #0
    350a:	ddf7      	ble.n	34fc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
            len=0;
    350c:	2600      	movs	r6, #0
    350e:	e7d2      	b.n	34b6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>

00003510 <MTPD::read(char*, unsigned long)>:
    {
    3510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    3514:	4616      	mov	r6, r2
    3516:	b36a      	cbz	r2, 3574 <MTPD::read(char*, unsigned long)+0x64>
    3518:	460f      	mov	r7, r1
    351a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 357c <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    351e:	f100 0920 	add.w	r9, r0, #32
          index=0;
    3522:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    3526:	f8d8 4000 	ldr.w	r4, [r8]
    352a:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    352e:	42b5      	cmp	r5, r6
    3530:	bf28      	it	cs
    3532:	4635      	movcs	r5, r6
        if (data) {
    3534:	b137      	cbz	r7, 3544 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    3536:	4638      	mov	r0, r7
    3538:	462a      	mov	r2, r5
    353a:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    353e:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    3540:	f00b f82c 	bl	e59c <memcpy>
        index += to_copy;
    3544:	442c      	add	r4, r5
        size -= to_copy;
    3546:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    3548:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    354c:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    3550:	d003      	beq.n	355a <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    3552:	2e00      	cmp	r6, #0
    3554:	d1e7      	bne.n	3526 <MTPD::read(char*, unsigned long)+0x16>
    }
    3556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while(!usb_mtp_available());
    355a:	f00c f9f5 	bl	f948 <usb_mtp_available>
    355e:	2800      	cmp	r0, #0
    3560:	d0fb      	beq.n	355a <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    3562:	213c      	movs	r1, #60	; 0x3c
    3564:	4648      	mov	r0, r9
    3566:	f00c f99d 	bl	f8a4 <usb_mtp_recv>
          index=0;
    356a:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    356e:	2e00      	cmp	r6, #0
    3570:	d1d9      	bne.n	3526 <MTPD::read(char*, unsigned long)+0x16>
    3572:	e7f0      	b.n	3556 <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    3574:	4b01      	ldr	r3, [pc, #4]	; (357c <MTPD::read(char*, unsigned long)+0x6c>)
    3576:	601a      	str	r2, [r3, #0]
    }
    3578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    357c:	20024da4 	.word	0x20024da4

00003580 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    3580:	b570      	push	{r4, r5, r6, lr}
    3582:	b082      	sub	sp, #8
    3584:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3586:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    3588:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    358a:	f10d 0106 	add.w	r1, sp, #6
    358e:	f7ff ffbf 	bl	3510 <MTPD::read(char*, unsigned long)>
    3592:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    3596:	b17c      	cbz	r4, 35b8 <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    3598:	b165      	cbz	r5, 35b4 <MTPD::readstring(char*)+0x34>
    359a:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    359c:	2202      	movs	r2, #2
    359e:	f10d 0106 	add.w	r1, sp, #6
    35a2:	4630      	mov	r0, r6
    35a4:	f7ff ffb4 	bl	3510 <MTPD::read(char*, unsigned long)>
    35a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    35ac:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    35b0:	42a5      	cmp	r5, r4
    35b2:	d1f3      	bne.n	359c <MTPD::readstring(char*)+0x1c>
  }
    35b4:	b002      	add	sp, #8
    35b6:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    35b8:	006a      	lsls	r2, r5, #1
    35ba:	4621      	mov	r1, r4
    35bc:	4630      	mov	r0, r6
  }
    35be:	b002      	add	sp, #8
    35c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    35c4:	f7ff bfa4 	b.w	3510 <MTPD::read(char*, unsigned long)>

000035c8 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    35c8:	b530      	push	{r4, r5, lr}
    35ca:	b0c1      	sub	sp, #260	; 0x104
    35cc:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    35ce:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    35d0:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    35d2:	4669      	mov	r1, sp
    35d4:	f7ff ff9c 	bl	3510 <MTPD::read(char*, unsigned long)>
        readstring(filename);
    35d8:	4669      	mov	r1, sp
    35da:	4620      	mov	r0, r4
    35dc:	f7ff ffd0 	bl	3580 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    35e0:	6820      	ldr	r0, [r4, #0]
    35e2:	466a      	mov	r2, sp
    35e4:	4629      	mov	r1, r5
    35e6:	6803      	ldr	r3, [r0, #0]
    35e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    35ea:	4798      	blx	r3
    35ec:	f242 0201 	movw	r2, #8193	; 0x2001
    35f0:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    35f4:	2800      	cmp	r0, #0
    35f6:	bf14      	ite	ne
    35f8:	4610      	movne	r0, r2
    35fa:	4618      	moveq	r0, r3
    35fc:	b041      	add	sp, #260	; 0x104
    35fe:	bd30      	pop	{r4, r5, pc}

00003600 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3604:	4605      	mov	r5, r0
    3606:	b0c5      	sub	sp, #276	; 0x114
    3608:	4689      	mov	r9, r1
    360a:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    360c:	f100 0420 	add.w	r4, r0, #32
      while(!usb_mtp_available());
    3610:	f00c f99a 	bl	f948 <usb_mtp_available>
    3614:	2800      	cmp	r0, #0
    3616:	d0fb      	beq.n	3610 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    3618:	213c      	movs	r1, #60	; 0x3c
    361a:	4620      	mov	r0, r4
    361c:	f00c f942 	bl	f8a4 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3620:	ae04      	add	r6, sp, #16
        index=0;
    3622:	4b4c      	ldr	r3, [pc, #304]	; (3754 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
    3624:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    3626:	4628      	mov	r0, r5
    3628:	4631      	mov	r1, r6
        index=0;
    362a:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    362c:	220c      	movs	r2, #12
    362e:	f7ff ff6f 	bl	3510 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3632:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    3634:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    3638:	2b02      	cmp	r3, #2
    363a:	f000 8086 	beq.w	374a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14a>
    363e:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3642:	2204      	movs	r2, #4
    3644:	4631      	mov	r1, r6
    3646:	4628      	mov	r0, r5
    3648:	f7ff ff62 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    364c:	2202      	movs	r2, #2
    364e:	4631      	mov	r1, r6
    3650:	4628      	mov	r0, r5
    3652:	f7ff ff5d 	bl	3510 <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    3656:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    365a:	f8b6 b000 	ldrh.w	fp, [r6]
    365e:	2202      	movs	r2, #2
    3660:	4631      	mov	r1, r6
    3662:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3664:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3668:	f7ff ff52 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    366c:	2204      	movs	r2, #4
    366e:	4631      	mov	r1, r6
    3670:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3672:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3676:	f7ff ff4b 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    367a:	2202      	movs	r2, #2
    367c:	4631      	mov	r1, r6
    367e:	4628      	mov	r0, r5
    3680:	f7ff ff46 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3684:	2204      	movs	r2, #4
    3686:	4631      	mov	r1, r6
    3688:	4628      	mov	r0, r5
    368a:	f7ff ff41 	bl	3510 <MTPD::read(char*, unsigned long)>
    368e:	2204      	movs	r2, #4
    3690:	4631      	mov	r1, r6
    3692:	4628      	mov	r0, r5
    3694:	f7ff ff3c 	bl	3510 <MTPD::read(char*, unsigned long)>
    3698:	2204      	movs	r2, #4
    369a:	4631      	mov	r1, r6
    369c:	4628      	mov	r0, r5
    369e:	f7ff ff37 	bl	3510 <MTPD::read(char*, unsigned long)>
    36a2:	2204      	movs	r2, #4
    36a4:	4631      	mov	r1, r6
    36a6:	4628      	mov	r0, r5
    36a8:	f7ff ff32 	bl	3510 <MTPD::read(char*, unsigned long)>
    36ac:	2204      	movs	r2, #4
    36ae:	4631      	mov	r1, r6
    36b0:	4628      	mov	r0, r5
    36b2:	f7ff ff2d 	bl	3510 <MTPD::read(char*, unsigned long)>
    36b6:	2204      	movs	r2, #4
    36b8:	4631      	mov	r1, r6
    36ba:	4628      	mov	r0, r5
    36bc:	f7ff ff28 	bl	3510 <MTPD::read(char*, unsigned long)>
    36c0:	2204      	movs	r2, #4
    36c2:	4631      	mov	r1, r6
    36c4:	4628      	mov	r0, r5
    36c6:	f7ff ff23 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    36ca:	2202      	movs	r2, #2
    36cc:	4631      	mov	r1, r6
    36ce:	4628      	mov	r0, r5
    36d0:	f7ff ff1e 	bl	3510 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    36d4:	2204      	movs	r2, #4
    36d6:	4631      	mov	r1, r6
    36d8:	4628      	mov	r0, r5
    36da:	f7ff ff19 	bl	3510 <MTPD::read(char*, unsigned long)>
    36de:	2204      	movs	r2, #4
    36e0:	4631      	mov	r1, r6
    36e2:	4628      	mov	r0, r5
    36e4:	f7ff ff14 	bl	3510 <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    36e8:	4631      	mov	r1, r6
    36ea:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    36ec:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    36f0:	f7ff ff46 	bl	3580 <MTPD::readstring(char*)>
    36f4:	4630      	mov	r0, r6
    36f6:	f00f fbc3 	bl	12e80 <strlen>
    36fa:	3001      	adds	r0, #1
    36fc:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    3700:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    3704:	2c03      	cmp	r4, #3
    3706:	dd0c      	ble.n	3722 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    3708:	af03      	add	r7, sp, #12
    370a:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    370c:	2204      	movs	r2, #4
    370e:	4639      	mov	r1, r7
    3710:	4628      	mov	r0, r5
    3712:	f7ff fefd 	bl	3510 <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    3716:	2c03      	cmp	r4, #3
    3718:	dcf7      	bgt.n	370a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    371a:	f1a8 0805 	sub.w	r8, r8, #5
    371e:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    3722:	b13c      	cbz	r4, 3734 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    3724:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3726:	2201      	movs	r2, #1
    3728:	4639      	mov	r1, r7
    372a:	4628      	mov	r0, r5
    372c:	f7ff fef0 	bl	3510 <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    3730:	3c01      	subs	r4, #1
    3732:	d1f8      	bne.n	3726 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    3734:	6828      	ldr	r0, [r5, #0]
    3736:	465b      	mov	r3, fp
    3738:	4652      	mov	r2, sl
    373a:	4649      	mov	r1, r9
    373c:	6804      	ldr	r4, [r0, #0]
    373e:	9600      	str	r6, [sp, #0]
    3740:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    3742:	47a0      	blx	r4
    }
    3744:	b045      	add	sp, #276	; 0x114
    3746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    374a:	6833      	ldr	r3, [r6, #0]
    374c:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    3750:	e777      	b.n	3642 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    3752:	bf00      	nop
    3754:	20024da4 	.word	0x20024da4

00003758 <MTPD::SendObject()>:
    { 
    3758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    375c:	f100 0a20 	add.w	sl, r0, #32
    { 
    3760:	b087      	sub	sp, #28
    3762:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    3764:	f00c f8f0 	bl	f948 <usb_mtp_available>
    3768:	2800      	cmp	r0, #0
    376a:	d0fb      	beq.n	3764 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    376c:	213c      	movs	r1, #60	; 0x3c
    376e:	4650      	mov	r0, sl
    3770:	f00c f898 	bl	f8a4 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3774:	220c      	movs	r2, #12
        index=0;
    3776:	4b42      	ldr	r3, [pc, #264]	; (3880 <MTPD::SendObject()+0x128>)
    3778:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    377a:	eb0d 0102 	add.w	r1, sp, r2
    377e:	9800      	ldr	r0, [sp, #0]
        index=0;
    3780:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    3782:	f7ff fec5 	bl	3510 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3786:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    378a:	2b02      	cmp	r3, #2
    378c:	d00d      	beq.n	37aa <MTPD::SendObject()+0x52>
      disk_pos=0;
    378e:	9b00      	ldr	r3, [sp, #0]
    3790:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    3794:	f8c3 4420 	str.w	r4, [r3, #1056]	; 0x420
      storage_->close();
    3798:	9b00      	ldr	r3, [sp, #0]
    379a:	6818      	ldr	r0, [r3, #0]
    379c:	6803      	ldr	r3, [r0, #0]
    379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    37a0:	4798      	blx	r3
      return true;
    37a2:	2001      	movs	r0, #1
    }
    37a4:	b007      	add	sp, #28
    37a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    37aa:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    37ac:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    37ae:	f1a3 090c 	sub.w	r9, r3, #12
      disk_pos=0;
    37b2:	f502 5700 	add.w	r7, r2, #8192	; 0x2000
      while((int)len>0)
    37b6:	45a1      	cmp	r9, r4
      disk_pos=0;
    37b8:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
      while((int)len>0)
    37bc:	ddec      	ble.n	3798 <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    37be:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    37c0:	4620      	mov	r0, r4
    37c2:	f502 6b84 	add.w	fp, r2, #1056	; 0x420
          disk_pos =0;
    37c6:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    37c8:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    37cc:	f5c0 5400 	rsb	r4, r0, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    37d0:	eb0a 0108 	add.w	r1, sl, r8
    37d4:	4458      	add	r0, fp
    37d6:	454e      	cmp	r6, r9
    37d8:	bf28      	it	cs
    37da:	464e      	movcs	r6, r9
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    37dc:	42b4      	cmp	r4, r6
    37de:	bf28      	it	cs
    37e0:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    37e2:	4622      	mov	r2, r4
        len -= to_copy;
    37e4:	eba9 0504 	sub.w	r5, r9, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    37e8:	f00a fed8 	bl	e59c <memcpy>
        disk_pos += to_copy;
    37ec:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    37f0:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    37f2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    37f6:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    37fa:	d022      	beq.n	3842 <MTPD::SendObject()+0xea>
        if(len>0)  // we have still data to be transfered
    37fc:	b98d      	cbnz	r5, 3822 <MTPD::SendObject()+0xca>
      if(disk_pos)
    37fe:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    3802:	2a00      	cmp	r2, #0
    3804:	d0c8      	beq.n	3798 <MTPD::SendObject()+0x40>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    3806:	9b00      	ldr	r3, [sp, #0]
    3808:	4659      	mov	r1, fp
    380a:	6818      	ldr	r0, [r3, #0]
    380c:	6803      	ldr	r3, [r0, #0]
    380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3810:	4798      	blx	r3
    3812:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3816:	4298      	cmp	r0, r3
    3818:	d2be      	bcs.n	3798 <MTPD::SendObject()+0x40>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    381a:	2000      	movs	r0, #0
    }
    381c:	b007      	add	sp, #28
    381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    3822:	f00c f891 	bl	f948 <usb_mtp_available>
    3826:	2800      	cmp	r0, #0
    3828:	d0fb      	beq.n	3822 <MTPD::SendObject()+0xca>
      return usb_mtp_recv(data_buffer,60);
    382a:	213c      	movs	r1, #60	; 0x3c
    382c:	4650      	mov	r0, sl
    382e:	f00c f839 	bl	f8a4 <usb_mtp_recv>
      while((int)len>0)
    3832:	2d00      	cmp	r5, #0
    3834:	dde3      	ble.n	37fe <MTPD::SendObject()+0xa6>
      if(disk_pos)
    3836:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
    383a:	46a9      	mov	r9, r5
          index=0;
    383c:	f04f 0800 	mov.w	r8, #0
    3840:	e7c2      	b.n	37c8 <MTPD::SendObject()+0x70>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    3842:	9b00      	ldr	r3, [sp, #0]
    3844:	4659      	mov	r1, fp
    3846:	6818      	ldr	r0, [r3, #0]
    3848:	6803      	ldr	r3, [r0, #0]
    384a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    384c:	4798      	blx	r3
    384e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    3852:	d3e2      	bcc.n	381a <MTPD::SendObject()+0xc2>
          disk_pos =0;
    3854:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3856:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    3858:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    385c:	d0ce      	beq.n	37fc <MTPD::SendObject()+0xa4>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    385e:	eb04 0108 	add.w	r1, r4, r8
    3862:	4658      	mov	r0, fp
    3864:	9201      	str	r2, [sp, #4]
            len -= bytes;
    3866:	eba9 0506 	sub.w	r5, r9, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    386a:	4451      	add	r1, sl
    386c:	f00a fe96 	bl	e59c <memcpy>
            disk_pos += bytes;
    3870:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3874:	9a01      	ldr	r2, [sp, #4]
    3876:	4413      	add	r3, r2
    3878:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            len -= bytes;
    387c:	e7be      	b.n	37fc <MTPD::SendObject()+0xa4>
    387e:	bf00      	nop
    3880:	20024da4 	.word	0x20024da4

00003884 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    3884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3888:	b08d      	sub	sp, #52	; 0x34
    388a:	4604      	mov	r4, r0
    388c:	f00c f85c 	bl	f948 <usb_mtp_available>
    3890:	b910      	cbnz	r0, 3898 <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    3892:	b00d      	add	sp, #52	; 0x34
    3894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    3898:	f104 0520 	add.w	r5, r4, #32
      return usb_mtp_recv(data_buffer,60);
    389c:	213c      	movs	r1, #60	; 0x3c
    389e:	4628      	mov	r0, r5
    38a0:	f00c f800 	bl	f8a4 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    38a4:	2800      	cmp	r0, #0
    38a6:	d0f4      	beq.n	3892 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    38a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    38aa:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    38ac:	6a23      	ldr	r3, [r4, #32]
    38ae:	48a6      	ldr	r0, [pc, #664]	; (3b48 <MTPD::loop()+0x2c4>)
    38b0:	e9cd 2100 	strd	r2, r1, [sp]
    38b4:	49a5      	ldr	r1, [pc, #660]	; (3b4c <MTPD::loop()+0x2c8>)
    38b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    38b8:	f00a f886 	bl	d9c8 <Print::printf(char const*, ...)>
    38bc:	6a23      	ldr	r3, [r4, #32]
    38be:	2b0c      	cmp	r3, #12
    38c0:	d867      	bhi.n	3992 <MTPD::loop()+0x10e>
    38c2:	49a3      	ldr	r1, [pc, #652]	; (3b50 <MTPD::loop()+0x2cc>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    38c4:	f242 0601 	movw	r6, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    38c8:	489f      	ldr	r0, [pc, #636]	; (3b48 <MTPD::loop()+0x2c4>)
        TID=id;
    38ca:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    38ce:	f00a f87b 	bl	d9c8 <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    38d2:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
        if(typ==2) return_code=0x2005; // we should only get cmds
    38d4:	f242 0305 	movw	r3, #8197	; 0x2005
        int op = CONTAINER->op;
    38d8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
        int id = CONTAINER->transaction_id;
    38da:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
        if(typ==2) return_code=0x2005; // we should only get cmds
    38de:	2a02      	cmp	r2, #2
    38e0:	bf08      	it	eq
    38e2:	461e      	moveq	r6, r3
        switch (op)
    38e4:	f241 021b 	movw	r2, #4123	; 0x101b
        int p3 = CONTAINER->params[2];
    38e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch (op)
    38ea:	4291      	cmp	r1, r2
        int len= CONTAINER->len;
    38ec:	6a27      	ldr	r7, [r4, #32]
        int p2 = CONTAINER->params[1];
    38ee:	e9d4 ab0b 	ldrd	sl, fp, [r4, #44]	; 0x2c
        TID=id;
    38f2:	f8c8 942c 	str.w	r9, [r8, #1068]	; 0x42c
        switch (op)
    38f6:	d826      	bhi.n	3946 <MTPD::loop()+0xc2>
    38f8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    38fc:	f240 80cc 	bls.w	3a98 <MTPD::loop()+0x214>
    3900:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    3904:	440a      	add	r2, r1
    3906:	2a1a      	cmp	r2, #26
    3908:	f200 80c6 	bhi.w	3a98 <MTPD::loop()+0x214>
    390c:	e8df f012 	tbh	[pc, r2, lsl #1]
    3910:	01b901c4 	.word	0x01b901c4
    3914:	00e100dd 	.word	0x00e100dd
    3918:	01130128 	.word	0x01130128
    391c:	027202a7 	.word	0x027202a7
    3920:	00c402e1 	.word	0x00c402e1
    3924:	02660249 	.word	0x02660249
    3928:	00c4025a 	.word	0x00c4025a
    392c:	00c400c4 	.word	0x00c400c4
    3930:	00c400c4 	.word	0x00c400c4
    3934:	022000c4 	.word	0x022000c4
    3938:	00c401f7 	.word	0x00c401f7
    393c:	00c400c4 	.word	0x00c400c4
    3940:	019701a7 	.word	0x019701a7
    3944:	015d      	.short	0x015d
    3946:	f246 73ff 	movw	r3, #26623	; 0x67ff
    394a:	440b      	add	r3, r1
    394c:	b29b      	uxth	r3, r3
    394e:	2b03      	cmp	r3, #3
    3950:	f200 80a2 	bhi.w	3a98 <MTPD::loop()+0x214>
    3954:	4b7f      	ldr	r3, [pc, #508]	; (3b54 <MTPD::loop()+0x2d0>)
    3956:	440b      	add	r3, r1
    3958:	2b02      	cmp	r3, #2
    395a:	f200 8347 	bhi.w	3fec <MTPD::loop()+0x768>
    395e:	e8df f003 	tbb	[pc, r3]
    3962:	2e65      	.short	0x2e65
    3964:	02          	.byte	0x02
    3965:	00          	.byte	0x00
      while(!usb_mtp_available());
    3966:	f00b ffef 	bl	f948 <usb_mtp_available>
    396a:	2800      	cmp	r0, #0
    396c:	d0fb      	beq.n	3966 <MTPD::loop()+0xe2>
      return usb_mtp_recv(data_buffer,60);
    396e:	213c      	movs	r1, #60	; 0x3c
    3970:	4628      	mov	r0, r5
    3972:	f00b ff97 	bl	f8a4 <usb_mtp_recv>
        index=0;
    3976:	4b78      	ldr	r3, [pc, #480]	; (3b58 <MTPD::loop()+0x2d4>)
    3978:	2200      	movs	r2, #0
    397a:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    397c:	f64d 4307 	movw	r3, #56327	; 0xdc07
    3980:	459b      	cmp	fp, r3
    3982:	f040 82db 	bne.w	3f3c <MTPD::loop()+0x6b8>
    3986:	4651      	mov	r1, sl
    3988:	4620      	mov	r0, r4
    398a:	f7ff fe1d 	bl	35c8 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    398e:	b286      	uxth	r6, r0
    3990:	e09c      	b.n	3acc <MTPD::loop()+0x248>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3992:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3994:	4971      	ldr	r1, [pc, #452]	; (3b5c <MTPD::loop()+0x2d8>)
    3996:	486c      	ldr	r0, [pc, #432]	; (3b48 <MTPD::loop()+0x2c4>)
    3998:	f00a f816 	bl	d9c8 <Print::printf(char const*, ...)>
    399c:	6a23      	ldr	r3, [r4, #32]
    399e:	2b10      	cmp	r3, #16
    39a0:	d98f      	bls.n	38c2 <MTPD::loop()+0x3e>
    39a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    39a4:	496d      	ldr	r1, [pc, #436]	; (3b5c <MTPD::loop()+0x2d8>)
    39a6:	4868      	ldr	r0, [pc, #416]	; (3b48 <MTPD::loop()+0x2c4>)
    39a8:	f00a f80e 	bl	d9c8 <Print::printf(char const*, ...)>
    39ac:	6a23      	ldr	r3, [r4, #32]
    39ae:	2b14      	cmp	r3, #20
    39b0:	d987      	bls.n	38c2 <MTPD::loop()+0x3e>
    39b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    39b4:	4969      	ldr	r1, [pc, #420]	; (3b5c <MTPD::loop()+0x2d8>)
    39b6:	4864      	ldr	r0, [pc, #400]	; (3b48 <MTPD::loop()+0x2c4>)
    39b8:	f00a f806 	bl	d9c8 <Print::printf(char const*, ...)>
    39bc:	e781      	b.n	38c2 <MTPD::loop()+0x3e>
              TRANSMIT(getObjectPropValue(p1,p2));
    39be:	2300      	movs	r3, #0
    39c0:	2201      	movs	r2, #1
    39c2:	4651      	mov	r1, sl
    39c4:	4620      	mov	r0, r4
    39c6:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    39ca:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    39ce:	465a      	mov	r2, fp
    39d0:	f7ff fb84 	bl	30dc <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    39d4:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    39d8:	2300      	movs	r3, #0
    39da:	a904      	add	r1, sp, #16
    39dc:	320c      	adds	r2, #12
    39de:	4620      	mov	r0, r4
    39e0:	9204      	str	r2, [sp, #16]
    39e2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    39e4:	f8ad 2016 	strh.w	r2, [sp, #22]
    39e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    39ea:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    39ee:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    39f2:	2302      	movs	r3, #2
    39f4:	9206      	str	r2, [sp, #24]
    39f6:	220c      	movs	r2, #12
    39f8:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    39fc:	f7fe fb3a 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    3a00:	465a      	mov	r2, fp
    3a02:	4651      	mov	r1, sl
    3a04:	4620      	mov	r0, r4
    3a06:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a0a:	f7ff fb67 	bl	30dc <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3a0e:	9b04      	ldr	r3, [sp, #16]
    3a10:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a14:	f1bb 0f00 	cmp.w	fp, #0
    3a18:	d006      	beq.n	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a1a:	223c      	movs	r2, #60	; 0x3c
    3a1c:	4659      	mov	r1, fp
    3a1e:	4640      	mov	r0, r8
    3a20:	f00b ffaa 	bl	f978 <usb_mtp_send>
    3a24:	2800      	cmp	r0, #0
    3a26:	ddf8      	ble.n	3a1a <MTPD::loop()+0x196>
            CONTAINER->op=return_code;
    3a28:	b2b6      	uxth	r6, r6
              break;
    3a2a:	e039      	b.n	3aa0 <MTPD::loop()+0x21c>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3a2c:	2300      	movs	r3, #0
    3a2e:	2201      	movs	r2, #1
    3a30:	4651      	mov	r1, sl
    3a32:	4620      	mov	r0, r4
    3a34:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3a38:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3a3c:	465a      	mov	r2, fp
    3a3e:	f7ff f8e5 	bl	2c0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3a42:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    3a46:	2300      	movs	r3, #0
    3a48:	a904      	add	r1, sp, #16
    3a4a:	320c      	adds	r2, #12
    3a4c:	4620      	mov	r0, r4
    3a4e:	9204      	str	r2, [sp, #16]
    3a50:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3a52:	f8ad 2016 	strh.w	r2, [sp, #22]
    3a56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3a58:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3a5c:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3a60:	2302      	movs	r3, #2
    3a62:	9206      	str	r2, [sp, #24]
    3a64:	220c      	movs	r2, #12
    3a66:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3a6a:	f7fe fb03 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3a6e:	465a      	mov	r2, fp
    3a70:	4651      	mov	r1, sl
    3a72:	4620      	mov	r0, r4
    3a74:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a78:	f7ff f8c8 	bl	2c0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3a7c:	9b04      	ldr	r3, [sp, #16]
    3a7e:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a82:	f1bb 0f00 	cmp.w	fp, #0
    3a86:	d0cf      	beq.n	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a88:	223c      	movs	r2, #60	; 0x3c
    3a8a:	4659      	mov	r1, fp
    3a8c:	4640      	mov	r0, r8
    3a8e:	f00b ff73 	bl	f978 <usb_mtp_send>
    3a92:	2800      	cmp	r0, #0
    3a94:	ddf8      	ble.n	3a88 <MTPD::loop()+0x204>
    3a96:	e7c7      	b.n	3a28 <MTPD::loop()+0x1a4>
            TRANSMIT(WriteDescriptor());
    3a98:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a9c:	f242 0605 	movw	r6, #8197	; 0x2005
            CONTAINER->type=3;
    3aa0:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3aa2:	4629      	mov	r1, r5
    3aa4:	463a      	mov	r2, r7
    3aa6:	4640      	mov	r0, r8
            CONTAINER->op=return_code;
    3aa8:	84e6      	strh	r6, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    3aaa:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
            CONTAINER->len=len;
    3aae:	6227      	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
    3ab0:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
            CONTAINER->type=3;
    3ab4:	84a3      	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3ab6:	f00a fd71 	bl	e59c <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3aba:	223c      	movs	r2, #60	; 0x3c
    3abc:	4639      	mov	r1, r7
    3abe:	4640      	mov	r0, r8
    3ac0:	f00b ff5a 	bl	f978 <usb_mtp_send>
    3ac4:	2800      	cmp	r0, #0
    3ac6:	ddf8      	ble.n	3aba <MTPD::loop()+0x236>
    3ac8:	e6e3      	b.n	3892 <MTPD::loop()+0xe>
            CONTAINER->op=return_code;
    3aca:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3acc:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3ad0:	e7e6      	b.n	3aa0 <MTPD::loop()+0x21c>
              TRANSMIT(WriteStorageIDs());
    3ad2:	f04f 0b00 	mov.w	fp, #0
    3ad6:	2301      	movs	r3, #1
    3ad8:	4620      	mov	r0, r4
    3ada:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ade:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3ae2:	f7fe fd35 	bl	2550 <MTPD::WriteStorageIDs()>
    3ae6:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3aea:	220c      	movs	r2, #12
    3aec:	a904      	add	r1, sp, #16
    3aee:	330c      	adds	r3, #12
    3af0:	4620      	mov	r0, r4
    3af2:	9304      	str	r3, [sp, #16]
    3af4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3af6:	f8ad 3016 	strh.w	r3, [sp, #22]
    3afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3afc:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b00:	9306      	str	r3, [sp, #24]
    3b02:	2302      	movs	r3, #2
    3b04:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b08:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b0c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3b10:	f7fe fab0 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    3b14:	4620      	mov	r0, r4
    3b16:	f7fe fd1b 	bl	2550 <MTPD::WriteStorageIDs()>
    3b1a:	9b04      	ldr	r3, [sp, #16]
    3b1c:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3b20:	f1bb 0f00 	cmp.w	fp, #0
    3b24:	d080      	beq.n	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b26:	223c      	movs	r2, #60	; 0x3c
    3b28:	4659      	mov	r1, fp
    3b2a:	4640      	mov	r0, r8
    3b2c:	f00b ff24 	bl	f978 <usb_mtp_send>
    3b30:	2800      	cmp	r0, #0
    3b32:	ddf8      	ble.n	3b26 <MTPD::loop()+0x2a2>
    3b34:	e778      	b.n	3a28 <MTPD::loop()+0x1a4>
            if (p2) 
    3b36:	f1bb 0f00 	cmp.w	fp, #0
    3b3a:	f000 820c 	beq.w	3f56 <MTPD::loop()+0x6d2>
            TRANSMIT(WriteDescriptor());
    3b3e:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b42:	f242 0614 	movw	r6, #8212	; 0x2014
    3b46:	e7ab      	b.n	3aa0 <MTPD::loop()+0x21c>
    3b48:	20008bb4 	.word	0x20008bb4
    3b4c:	20000be4 	.word	0x20000be4
    3b50:	20000bf8 	.word	0x20000bf8
    3b54:	ffff67fe 	.word	0xffff67fe
    3b58:	20024da4 	.word	0x20024da4
    3b5c:	20000bf4 	.word	0x20000bf4
            TRANSMIT(GetStorageInfo(p1));
    3b60:	f04f 0b00 	mov.w	fp, #0
    3b64:	2301      	movs	r3, #1
    3b66:	4651      	mov	r1, sl
    3b68:	4620      	mov	r0, r4
    3b6a:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b6e:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3b72:	f7fe fd29 	bl	25c8 <MTPD::GetStorageInfo(unsigned long)>
    3b76:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3b7a:	220c      	movs	r2, #12
    3b7c:	a904      	add	r1, sp, #16
    3b7e:	330c      	adds	r3, #12
    3b80:	4620      	mov	r0, r4
    3b82:	9304      	str	r3, [sp, #16]
    3b84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3b86:	f8ad 3016 	strh.w	r3, [sp, #22]
    3b8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b8c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b90:	9306      	str	r3, [sp, #24]
    3b92:	2302      	movs	r3, #2
    3b94:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b98:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b9c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3ba0:	f7fe fa68 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    3ba4:	4651      	mov	r1, sl
    3ba6:	4620      	mov	r0, r4
    3ba8:	f7fe fd0e 	bl	25c8 <MTPD::GetStorageInfo(unsigned long)>
    3bac:	9b04      	ldr	r3, [sp, #16]
    3bae:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3bb2:	f1bb 0f00 	cmp.w	fp, #0
    3bb6:	f43f af37 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bba:	223c      	movs	r2, #60	; 0x3c
    3bbc:	4659      	mov	r1, fp
    3bbe:	4640      	mov	r0, r8
    3bc0:	f00b feda 	bl	f978 <usb_mtp_send>
    3bc4:	2800      	cmp	r0, #0
    3bc6:	ddf8      	ble.n	3bba <MTPD::loop()+0x336>
    3bc8:	e72e      	b.n	3a28 <MTPD::loop()+0x1a4>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3bca:	2200      	movs	r2, #0
    3bcc:	4651      	mov	r1, sl
    3bce:	4620      	mov	r0, r4
    3bd0:	9303      	str	r3, [sp, #12]
    3bd2:	f8c8 2428 	str.w	r2, [r8, #1064]	; 0x428
    3bd6:	2201      	movs	r2, #1
    3bd8:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3bdc:	465a      	mov	r2, fp
    3bde:	f7ff fc19 	bl	3414 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3be2:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    3be6:	2300      	movs	r3, #0
    3be8:	a904      	add	r1, sp, #16
    3bea:	320c      	adds	r2, #12
    3bec:	9007      	str	r0, [sp, #28]
    3bee:	4620      	mov	r0, r4
    3bf0:	9204      	str	r2, [sp, #16]
    3bf2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3bf4:	f8ad 2016 	strh.w	r2, [sp, #22]
    3bf8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3bfa:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3bfe:	9206      	str	r2, [sp, #24]
    3c00:	2202      	movs	r2, #2
    3c02:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3c06:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3c0a:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3c0e:	2220      	movs	r2, #32
    3c10:	f7fe fa30 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3c14:	9b03      	ldr	r3, [sp, #12]
    3c16:	465a      	mov	r2, fp
    3c18:	4651      	mov	r1, sl
    3c1a:	4620      	mov	r0, r4
    3c1c:	f7ff fbfa 	bl	3414 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3c20:	9b04      	ldr	r3, [sp, #16]
    3c22:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3c26:	f1bb 0f00 	cmp.w	fp, #0
    3c2a:	f43f aefd 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c2e:	223c      	movs	r2, #60	; 0x3c
    3c30:	4659      	mov	r1, fp
    3c32:	4640      	mov	r0, r8
    3c34:	f00b fea0 	bl	f978 <usb_mtp_send>
    3c38:	2800      	cmp	r0, #0
    3c3a:	ddf8      	ble.n	3c2e <MTPD::loop()+0x3aa>
    3c3c:	e6f4      	b.n	3a28 <MTPD::loop()+0x1a4>
      return storage_->copy(handle,store1,newHandle);
    3c3e:	6820      	ldr	r0, [r4, #0]
    3c40:	f10b 32ff 	add.w	r2, fp, #4294967295
    3c44:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3c46:	f504 7808 	add.w	r8, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    3c4a:	6806      	ldr	r6, [r0, #0]
    3c4c:	6d36      	ldr	r6, [r6, #80]	; 0x50
    3c4e:	47b0      	blx	r6
              if(!return_code) 
    3c50:	2800      	cmp	r0, #0
    3c52:	f040 817b 	bne.w	3f4c <MTPD::loop()+0x6c8>
            TRANSMIT(WriteDescriptor());
    3c56:	f242 0605 	movw	r6, #8197	; 0x2005
    3c5a:	270c      	movs	r7, #12
    3c5c:	e720      	b.n	3aa0 <MTPD::loop()+0x21c>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c5e:	6820      	ldr	r0, [r4, #0]
    3c60:	f10b 32ff 	add.w	r2, fp, #4294967295
    3c64:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3c66:	f504 7808 	add.w	r8, r4, #544	; 0x220
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c6a:	6806      	ldr	r6, [r0, #0]
              break;
    3c6c:	270c      	movs	r7, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c6e:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    3c70:	47b0      	blx	r6
    3c72:	f242 0601 	movw	r6, #8193	; 0x2001
    3c76:	f242 0305 	movw	r3, #8197	; 0x2005
    3c7a:	2800      	cmp	r0, #0
    3c7c:	bf08      	it	eq
    3c7e:	461e      	moveq	r6, r3
              break;
    3c80:	e70e      	b.n	3aa0 <MTPD::loop()+0x21c>
      storage_->ResetIndex();
    3c82:	6820      	ldr	r0, [r4, #0]
            CONTAINER->op=return_code;
    3c84:	b2b6      	uxth	r6, r6
      sessionID_ = id;
    3c86:	4bc7      	ldr	r3, [pc, #796]	; (3fa4 <MTPD::loop()+0x720>)
            TRANSMIT(WriteDescriptor());
    3c88:	f504 7808 	add.w	r8, r4, #544	; 0x220
      sessionID_ = id;
    3c8c:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    3c90:	6803      	ldr	r3, [r0, #0]
    3c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c94:	4798      	blx	r3
    }
    3c96:	e703      	b.n	3aa0 <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3c98:	f04f 0b00 	mov.w	fp, #0
    3c9c:	2301      	movs	r3, #1
    3c9e:	4620      	mov	r0, r4
    3ca0:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ca4:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3ca8:	f7fe faca 	bl	2240 <MTPD::WriteDescriptor()>
    3cac:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3cb0:	220c      	movs	r2, #12
    3cb2:	a904      	add	r1, sp, #16
    3cb4:	330c      	adds	r3, #12
    3cb6:	4620      	mov	r0, r4
    3cb8:	9304      	str	r3, [sp, #16]
    3cba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3cbc:	f8ad 3016 	strh.w	r3, [sp, #22]
    3cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cc2:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3cc6:	9306      	str	r3, [sp, #24]
    3cc8:	2302      	movs	r3, #2
    3cca:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3cce:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3cd2:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3cd6:	f7fe f9cd 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    3cda:	4620      	mov	r0, r4
    3cdc:	f7fe fab0 	bl	2240 <MTPD::WriteDescriptor()>
    3ce0:	9b04      	ldr	r3, [sp, #16]
    3ce2:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3ce6:	f1bb 0f00 	cmp.w	fp, #0
    3cea:	f43f ae9d 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cee:	223c      	movs	r2, #60	; 0x3c
    3cf0:	4659      	mov	r1, fp
    3cf2:	4640      	mov	r0, r8
    3cf4:	f00b fe40 	bl	f978 <usb_mtp_send>
    3cf8:	2800      	cmp	r0, #0
    3cfa:	ddf8      	ble.n	3cee <MTPD::loop()+0x46a>
    3cfc:	e694      	b.n	3a28 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropValue(p1));
    3cfe:	2301      	movs	r3, #1
    3d00:	f04f 0b00 	mov.w	fp, #0
    3d04:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3d08:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3d0c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3d10:	459a      	cmp	sl, r3
    3d12:	f000 814d 	beq.w	3fb0 <MTPD::loop()+0x72c>
              TRANSMIT(GetDevicePropValue(p1));
    3d16:	220c      	movs	r2, #12
    3d18:	4ba3      	ldr	r3, [pc, #652]	; (3fa8 <MTPD::loop()+0x724>)
    3d1a:	a904      	add	r1, sp, #16
    3d1c:	4620      	mov	r0, r4
    3d1e:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3d22:	f8cd 9018 	str.w	r9, [sp, #24]
    3d26:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3d2a:	f7fe f9a3 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3d2e:	9b04      	ldr	r3, [sp, #16]
    3d30:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d34:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3d38:	f1bb 0f00 	cmp.w	fp, #0
    3d3c:	f43f ae74 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d40:	223c      	movs	r2, #60	; 0x3c
    3d42:	4659      	mov	r1, fp
    3d44:	4640      	mov	r0, r8
    3d46:	f00b fe17 	bl	f978 <usb_mtp_send>
    3d4a:	2800      	cmp	r0, #0
    3d4c:	ddf8      	ble.n	3d40 <MTPD::loop()+0x4bc>
    3d4e:	e66b      	b.n	3a28 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropDesc(p1));
    3d50:	2301      	movs	r3, #1
    3d52:	f04f 0b00 	mov.w	fp, #0
    3d56:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3d5a:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    3d5e:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3d62:	459a      	cmp	sl, r3
    3d64:	f000 8101 	beq.w	3f6a <MTPD::loop()+0x6e6>
              TRANSMIT(GetDevicePropDesc(p1));
    3d68:	220c      	movs	r2, #12
    3d6a:	4b90      	ldr	r3, [pc, #576]	; (3fac <MTPD::loop()+0x728>)
    3d6c:	a904      	add	r1, sp, #16
    3d6e:	4620      	mov	r0, r4
    3d70:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3d74:	f8cd 9018 	str.w	r9, [sp, #24]
    3d78:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3d7c:	f7fe f97a 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3d80:	9b04      	ldr	r3, [sp, #16]
    3d82:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d86:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3d8a:	f1bb 0f00 	cmp.w	fp, #0
    3d8e:	f43f ae4b 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d92:	223c      	movs	r2, #60	; 0x3c
    3d94:	4659      	mov	r1, fp
    3d96:	4640      	mov	r0, r8
    3d98:	f00b fdee 	bl	f978 <usb_mtp_send>
    3d9c:	2800      	cmp	r0, #0
    3d9e:	ddf8      	ble.n	3d92 <MTPD::loop()+0x50e>
    3da0:	e642      	b.n	3a28 <MTPD::loop()+0x1a4>
              if (p2) {
    3da2:	f1bb 0f00 	cmp.w	fp, #0
    3da6:	f47f aeca 	bne.w	3b3e <MTPD::loop()+0x2ba>
                if (!storage_->DeleteObject(p1)) {
    3daa:	6820      	ldr	r0, [r4, #0]
    3dac:	4651      	mov	r1, sl
    3dae:	6803      	ldr	r3, [r0, #0]
    3db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3db2:	4798      	blx	r3
    3db4:	2800      	cmp	r0, #0
    3db6:	f47f ae88 	bne.w	3aca <MTPD::loop()+0x246>
            TRANSMIT(WriteDescriptor());
    3dba:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3dbe:	f242 0612 	movw	r6, #8210	; 0x2012
    3dc2:	e66d      	b.n	3aa0 <MTPD::loop()+0x21c>
              if(!SendObject()) return_code = 0x2005;
    3dc4:	4620      	mov	r0, r4
    3dc6:	f7ff fcc7 	bl	3758 <MTPD::SendObject()>
    3dca:	2800      	cmp	r0, #0
    3dcc:	f040 80b9 	bne.w	3f42 <MTPD::loop()+0x6be>
            TRANSMIT(WriteDescriptor());
    3dd0:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3dd4:	f242 0605 	movw	r6, #8197	; 0x2005
    3dd8:	270c      	movs	r7, #12
    3dda:	e661      	b.n	3aa0 <MTPD::loop()+0x21c>
              p3 = SendObjectInfo(p1, // storage
    3ddc:	465a      	mov	r2, fp
    3dde:	4651      	mov	r1, sl
    3de0:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3de2:	b2b6      	uxth	r6, r6
              p3 = SendObjectInfo(p1, // storage
    3de4:	f7ff fc0c 	bl	3600 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3de8:	f504 7808 	add.w	r8, r4, #544	; 0x220
              break;
    3dec:	2718      	movs	r7, #24
              CONTAINER->params[2]=p3;
    3dee:	e9c4 b00c 	strd	fp, r0, [r4, #48]	; 0x30
              break;
    3df2:	e655      	b.n	3aa0 <MTPD::loop()+0x21c>
            TRANSMIT(GetObjectInfo(p1));
    3df4:	f04f 0b00 	mov.w	fp, #0
    3df8:	2301      	movs	r3, #1
    3dfa:	4651      	mov	r1, sl
    3dfc:	4620      	mov	r0, r4
    3dfe:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e02:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3e06:	f7fe fd2d 	bl	2864 <MTPD::GetObjectInfo(unsigned long)>
    3e0a:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3e0e:	220c      	movs	r2, #12
    3e10:	a904      	add	r1, sp, #16
    3e12:	330c      	adds	r3, #12
    3e14:	4620      	mov	r0, r4
    3e16:	9304      	str	r3, [sp, #16]
    3e18:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3e1a:	f8ad 3016 	strh.w	r3, [sp, #22]
    3e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e20:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e24:	9306      	str	r3, [sp, #24]
    3e26:	2302      	movs	r3, #2
    3e28:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3e2c:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3e30:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3e34:	f7fe f91e 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    3e38:	4651      	mov	r1, sl
    3e3a:	4620      	mov	r0, r4
    3e3c:	f7fe fd12 	bl	2864 <MTPD::GetObjectInfo(unsigned long)>
    3e40:	9b04      	ldr	r3, [sp, #16]
    3e42:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3e46:	f1bb 0f00 	cmp.w	fp, #0
    3e4a:	f43f aded 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e4e:	223c      	movs	r2, #60	; 0x3c
    3e50:	4659      	mov	r1, fp
    3e52:	4640      	mov	r0, r8
    3e54:	f00b fd90 	bl	f978 <usb_mtp_send>
    3e58:	2800      	cmp	r0, #0
    3e5a:	ddf8      	ble.n	3e4e <MTPD::loop()+0x5ca>
    3e5c:	e5e4      	b.n	3a28 <MTPD::loop()+0x1a4>
            if (p2) 
    3e5e:	f1bb 0f00 	cmp.w	fp, #0
    3e62:	f47f ae6c 	bne.w	3b3e <MTPD::loop()+0x2ba>
              TRANSMIT(GetObjectHandles(p1, p3));
    3e66:	2201      	movs	r2, #1
    3e68:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
      write_length_ = GetNumObjects(storage, parent);
    3e6c:	4651      	mov	r1, sl
    3e6e:	4620      	mov	r0, r4
              TRANSMIT(GetObjectHandles(p1, p3));
    3e70:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
      write_length_ = GetNumObjects(storage, parent);
    3e74:	461a      	mov	r2, r3
    3e76:	9303      	str	r3, [sp, #12]
    3e78:	f7fe fc9c 	bl	27b4 <MTPD::GetNumObjects(unsigned long, unsigned long)>
              TRANSMIT(GetObjectHandles(p1, p3));
    3e7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      write_length_ *= 4;
    3e7e:	0080      	lsls	r0, r0, #2
    3e80:	a904      	add	r1, sp, #16
              TRANSMIT(GetObjectHandles(p1, p3));
    3e82:	f8ad 2016 	strh.w	r2, [sp, #22]
    3e86:	3010      	adds	r0, #16
    3e88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3e8a:	9004      	str	r0, [sp, #16]
    3e8c:	4620      	mov	r0, r4
    3e8e:	9206      	str	r2, [sp, #24]
    3e90:	2202      	movs	r2, #2
    3e92:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e96:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3e9a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3e9e:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3ea2:	220c      	movs	r2, #12
    3ea4:	f7fe f8e6 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    3ea8:	9b03      	ldr	r3, [sp, #12]
    3eaa:	4651      	mov	r1, sl
    3eac:	4620      	mov	r0, r4
    3eae:	461a      	mov	r2, r3
    3eb0:	f7fe fc94 	bl	27dc <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3eb4:	9b04      	ldr	r3, [sp, #16]
    3eb6:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3eba:	f1bb 0f00 	cmp.w	fp, #0
    3ebe:	f43f adb3 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ec2:	223c      	movs	r2, #60	; 0x3c
    3ec4:	4659      	mov	r1, fp
    3ec6:	4640      	mov	r0, r8
    3ec8:	f00b fd56 	bl	f978 <usb_mtp_send>
    3ecc:	2800      	cmp	r0, #0
    3ece:	ddf8      	ble.n	3ec2 <MTPD::loop()+0x63e>
    3ed0:	e5aa      	b.n	3a28 <MTPD::loop()+0x1a4>
            TRANSMIT(GetObject(p1));
    3ed2:	f04f 0b00 	mov.w	fp, #0
    3ed6:	2301      	movs	r3, #1
    3ed8:	4651      	mov	r1, sl
    3eda:	4620      	mov	r0, r4
    3edc:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ee0:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3ee4:	f7ff fa10 	bl	3308 <MTPD::GetObject(unsigned long)>
    3ee8:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3eec:	220c      	movs	r2, #12
    3eee:	a904      	add	r1, sp, #16
    3ef0:	330c      	adds	r3, #12
    3ef2:	4620      	mov	r0, r4
    3ef4:	9304      	str	r3, [sp, #16]
    3ef6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3ef8:	f8ad 3016 	strh.w	r3, [sp, #22]
    3efc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3efe:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3f02:	9306      	str	r3, [sp, #24]
    3f04:	2302      	movs	r3, #2
    3f06:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3f0a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3f0e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3f12:	f7fe f8af 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    3f16:	4651      	mov	r1, sl
    3f18:	4620      	mov	r0, r4
    3f1a:	f7ff f9f5 	bl	3308 <MTPD::GetObject(unsigned long)>
    3f1e:	9b04      	ldr	r3, [sp, #16]
    3f20:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3f24:	f1bb 0f00 	cmp.w	fp, #0
    3f28:	f43f ad7e 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f2c:	223c      	movs	r2, #60	; 0x3c
    3f2e:	4659      	mov	r1, fp
    3f30:	4640      	mov	r0, r8
    3f32:	f00b fd21 	bl	f978 <usb_mtp_send>
    3f36:	2800      	cmp	r0, #0
    3f38:	ddf8      	ble.n	3f2c <MTPD::loop()+0x6a8>
    3f3a:	e575      	b.n	3a28 <MTPD::loop()+0x1a4>
    3f3c:	f242 0605 	movw	r6, #8197	; 0x2005
              break;
    3f40:	e5c4      	b.n	3acc <MTPD::loop()+0x248>
            CONTAINER->op=return_code;
    3f42:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3f44:	f504 7808 	add.w	r8, r4, #544	; 0x220
            CONTAINER->op=return_code;
    3f48:	270c      	movs	r7, #12
    3f4a:	e5a9      	b.n	3aa0 <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3f4c:	4682      	mov	sl, r0
    3f4e:	f242 0601 	movw	r6, #8193	; 0x2001
    3f52:	2710      	movs	r7, #16
    3f54:	e5a4      	b.n	3aa0 <MTPD::loop()+0x21c>
                p1 = GetNumObjects(p1, p3);
    3f56:	4651      	mov	r1, sl
    3f58:	461a      	mov	r2, r3
    3f5a:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3f5c:	b2b6      	uxth	r6, r6
                p1 = GetNumObjects(p1, p3);
    3f5e:	f7fe fc29 	bl	27b4 <MTPD::GetNumObjects(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3f62:	f504 7808 	add.w	r8, r4, #544	; 0x220
                p1 = GetNumObjects(p1, p3);
    3f66:	4682      	mov	sl, r0
    3f68:	e59a      	b.n	3aa0 <MTPD::loop()+0x21c>
    3f6a:	4620      	mov	r0, r4
    3f6c:	f7fe f90e 	bl	218c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3f70:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3f74:	4620      	mov	r0, r4
    3f76:	220c      	movs	r2, #12
    3f78:	330c      	adds	r3, #12
    3f7a:	a904      	add	r1, sp, #16
    3f7c:	9304      	str	r3, [sp, #16]
    3f7e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3f80:	f8ad 3016 	strh.w	r3, [sp, #22]
    3f84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f86:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3f8a:	9306      	str	r3, [sp, #24]
    3f8c:	2302      	movs	r3, #2
    3f8e:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3f92:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3f96:	f7fe f86d 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    3f9a:	4620      	mov	r0, r4
    3f9c:	f7fe f8f6 	bl	218c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    3fa0:	e6ee      	b.n	3d80 <MTPD::loop()+0x4fc>
    3fa2:	bf00      	nop
    3fa4:	200259c4 	.word	0x200259c4
    3fa8:	10150002 	.word	0x10150002
    3fac:	10140002 	.word	0x10140002
    if (*str) 
    3fb0:	4620      	mov	r0, r4
    3fb2:	4929      	ldr	r1, [pc, #164]	; (4058 <MTPD::loop()+0x7d4>)
    3fb4:	f7fe f89c 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3fb8:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3fbc:	a904      	add	r1, sp, #16
    3fbe:	4620      	mov	r0, r4
    3fc0:	330c      	adds	r3, #12
    3fc2:	220c      	movs	r2, #12
    3fc4:	9304      	str	r3, [sp, #16]
    3fc6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3fc8:	f8ad 3016 	strh.w	r3, [sp, #22]
    3fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fce:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3fd2:	9306      	str	r3, [sp, #24]
    3fd4:	2302      	movs	r3, #2
    3fd6:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3fda:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3fde:	f7fe f849 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    3fe2:	491d      	ldr	r1, [pc, #116]	; (4058 <MTPD::loop()+0x7d4>)
    3fe4:	4620      	mov	r0, r4
    3fe6:	f7fe f883 	bl	20f0 <MTPD::writestring(char const*) [clone .part.0]>
  }
    3fea:	e6a0      	b.n	3d2e <MTPD::loop()+0x4aa>
              TRANSMIT(getObjectPropsSupported(p1));
    3fec:	f04f 0b00 	mov.w	fp, #0
    3ff0:	2301      	movs	r3, #1
    3ff2:	4651      	mov	r1, sl
    3ff4:	4620      	mov	r0, r4
    3ff6:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ffa:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3ffe:	f7fe fdc1 	bl	2b84 <MTPD::getObjectPropsSupported(unsigned long)>
    4002:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    4006:	220c      	movs	r2, #12
    4008:	a904      	add	r1, sp, #16
    400a:	330c      	adds	r3, #12
    400c:	4620      	mov	r0, r4
    400e:	9304      	str	r3, [sp, #16]
    4010:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    4012:	f8ad 3016 	strh.w	r3, [sp, #22]
    4016:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4018:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    401c:	9306      	str	r3, [sp, #24]
    401e:	2302      	movs	r3, #2
    4020:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    4024:	f504 7808 	add.w	r8, r4, #544	; 0x220
    4028:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    402c:	f7fe f822 	bl	2074 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4030:	4651      	mov	r1, sl
    4032:	4620      	mov	r0, r4
    4034:	f7fe fda6 	bl	2b84 <MTPD::getObjectPropsSupported(unsigned long)>
    4038:	9b04      	ldr	r3, [sp, #16]
    403a:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    403e:	f1bb 0f00 	cmp.w	fp, #0
    4042:	f43f acf1 	beq.w	3a28 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4046:	223c      	movs	r2, #60	; 0x3c
    4048:	4659      	mov	r1, fp
    404a:	4640      	mov	r0, r8
    404c:	f00b fc94 	bl	f978 <usb_mtp_send>
    4050:	2800      	cmp	r0, #0
    4052:	ddf8      	ble.n	4046 <MTPD::loop()+0x7c2>
    4054:	e4e8      	b.n	3a28 <MTPD::loop()+0x1a4>
    4056:	bf00      	nop
    4058:	20000bdc 	.word	0x20000bdc

0000405c <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    405c:	b538      	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    405e:	f00b ffb3 	bl	ffc8 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    4062:	2800      	cmp	r0, #0
    4064:	d0fb      	beq.n	405e <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    4066:	4c0d      	ldr	r4, [pc, #52]	; (409c <menuGetLine()+0x40>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    4068:	f241 3188 	movw	r1, #5000	; 0x1388
    406c:	4d0c      	ldr	r5, [pc, #48]	; (40a0 <menuGetLine()+0x44>)
    406e:	2328      	movs	r3, #40	; 0x28
    4070:	4622      	mov	r2, r4
    4072:	60a9      	str	r1, [r5, #8]
    4074:	4628      	mov	r0, r5
    4076:	210d      	movs	r1, #13
    4078:	f009 fdd0 	bl	dc1c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    407c:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    407e:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    4080:	4620      	mov	r0, r4
  buffer[count]=0;
    4082:	54e2      	strb	r2, [r4, r3]
    4084:	f00e fefc 	bl	12e80 <strlen>
    4088:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    408a:	4620      	mov	r0, r4
    408c:	f00c f806 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4090:	4628      	mov	r0, r5
    4092:	f009 fc7d 	bl	d990 <Print::println()>
  Serial.println(buffer);
  return buffer;
}
    4096:	4620      	mov	r0, r4
    4098:	bd38      	pop	{r3, r4, r5, pc}
    409a:	bf00      	nop
    409c:	20024d7c 	.word	0x20024d7c
    40a0:	20008bb4 	.word	0x20008bb4

000040a4 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    40a4:	b530      	push	{r4, r5, lr}
    40a6:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    40a8:	f00b ff8e 	bl	ffc8 <usb_serial_available>

    while(!Serial.available()) ;
    40ac:	2800      	cmp	r0, #0
    40ae:	d0fb      	beq.n	40a8 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    40b0:	f00b ffce 	bl	10050 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    40b4:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    40b6:	2864      	cmp	r0, #100	; 0x64
    40b8:	d04b      	beq.n	4152 <menu3()+0xae>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    40ba:	3831      	subs	r0, #49	; 0x31
    40bc:	2846      	cmp	r0, #70	; 0x46
    40be:	d85c      	bhi.n	417a <menu3()+0xd6>
    40c0:	e8df f010 	tbh	[pc, r0, lsl #1]
    40c4:	00710067 	.word	0x00710067
    40c8:	0085007b 	.word	0x0085007b
    40cc:	005b005b 	.word	0x005b005b
    40d0:	005b005b 	.word	0x005b005b
    40d4:	005b005b 	.word	0x005b005b
    40d8:	005b005b 	.word	0x005b005b
    40dc:	005b005b 	.word	0x005b005b
    40e0:	005b005b 	.word	0x005b005b
    40e4:	005b005b 	.word	0x005b005b
    40e8:	005b005b 	.word	0x005b005b
    40ec:	005b005b 	.word	0x005b005b
    40f0:	005b005b 	.word	0x005b005b
    40f4:	005b005b 	.word	0x005b005b
    40f8:	005b005b 	.word	0x005b005b
    40fc:	005b005b 	.word	0x005b005b
    4100:	005b005b 	.word	0x005b005b
    4104:	005b005b 	.word	0x005b005b
    4108:	005b005b 	.word	0x005b005b
    410c:	005b005b 	.word	0x005b005b
    4110:	005b005b 	.word	0x005b005b
    4114:	005b005b 	.word	0x005b005b
    4118:	005b005b 	.word	0x005b005b
    411c:	005b005b 	.word	0x005b005b
    4120:	005b005b 	.word	0x005b005b
    4124:	005b008f 	.word	0x005b008f
    4128:	005b0099 	.word	0x005b0099
    412c:	00a3005b 	.word	0x00a3005b
    4130:	005b00b2 	.word	0x005b00b2
    4134:	005b005b 	.word	0x005b005b
    4138:	005b005b 	.word	0x005b005b
    413c:	005b005b 	.word	0x005b005b
    4140:	005b00c2 	.word	0x005b00c2
    4144:	00cc005b 	.word	0x00cc005b
    4148:	00e600d6 	.word	0x00e600d6
    414c:	005b005b 	.word	0x005b005b
    4150:	005d      	.short	0x005d
{ char *buffer=menuGetLine();
    4152:	f7ff ff83 	bl	405c <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    4156:	ad07      	add	r5, sp, #28
    4158:	f10d 0113 	add.w	r1, sp, #19
    415c:	ac06      	add	r4, sp, #24
    415e:	aa05      	add	r2, sp, #20
    4160:	f10d 0312 	add.w	r3, sp, #18
    4164:	9400      	str	r4, [sp, #0]
    4166:	e9cd 1501 	strd	r1, r5, [sp, #4]
    416a:	4954      	ldr	r1, [pc, #336]	; (42bc <menu3()+0x218>)
    416c:	f00e f91e 	bl	123ac <sscanf>
      rtcSetDate(year,month,day);
    4170:	9805      	ldr	r0, [sp, #20]
    4172:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    4176:	f000 fe29 	bl	4dcc <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    417a:	b009      	add	sp, #36	; 0x24
    417c:	bd30      	pop	{r4, r5, pc}
{ char *buffer=menuGetLine();
    417e:	f7ff ff6d 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4182:	aa07      	add	r2, sp, #28
    4184:	494e      	ldr	r1, [pc, #312]	; (42c0 <menu3()+0x21c>)
    4186:	f00e f911 	bl	123ac <sscanf>
    418a:	4b4e      	ldr	r3, [pc, #312]	; (42c4 <menu3()+0x220>)
    418c:	9a07      	ldr	r2, [sp, #28]
    418e:	801a      	strh	r2, [r3, #0]
  return 1;
    4190:	e7f3      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4192:	f7ff ff63 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4196:	aa07      	add	r2, sp, #28
    4198:	4949      	ldr	r1, [pc, #292]	; (42c0 <menu3()+0x21c>)
    419a:	f00e f907 	bl	123ac <sscanf>
    419e:	4b4a      	ldr	r3, [pc, #296]	; (42c8 <menu3()+0x224>)
    41a0:	9a07      	ldr	r2, [sp, #28]
    41a2:	801a      	strh	r2, [r3, #0]
  return 1;
    41a4:	e7e9      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41a6:	f7ff ff59 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41aa:	aa07      	add	r2, sp, #28
    41ac:	4944      	ldr	r1, [pc, #272]	; (42c0 <menu3()+0x21c>)
    41ae:	f00e f8fd 	bl	123ac <sscanf>
    41b2:	4b46      	ldr	r3, [pc, #280]	; (42cc <menu3()+0x228>)
    41b4:	9a07      	ldr	r2, [sp, #28]
    41b6:	801a      	strh	r2, [r3, #0]
  return 1;
    41b8:	e7df      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41ba:	f7ff ff4f 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41be:	aa07      	add	r2, sp, #28
    41c0:	493f      	ldr	r1, [pc, #252]	; (42c0 <menu3()+0x21c>)
    41c2:	f00e f8f3 	bl	123ac <sscanf>
    41c6:	4b42      	ldr	r3, [pc, #264]	; (42d0 <menu3()+0x22c>)
    41c8:	9a07      	ldr	r2, [sp, #28]
    41ca:	801a      	strh	r2, [r3, #0]
  return 1;
    41cc:	e7d5      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41ce:	f7ff ff45 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41d2:	aa07      	add	r2, sp, #28
    41d4:	493a      	ldr	r1, [pc, #232]	; (42c0 <menu3()+0x21c>)
    41d6:	f00e f8e9 	bl	123ac <sscanf>
    41da:	4b3e      	ldr	r3, [pc, #248]	; (42d4 <menu3()+0x230>)
    41dc:	9a07      	ldr	r2, [sp, #28]
    41de:	801a      	strh	r2, [r3, #0]
}
    41e0:	e7cb      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41e2:	f7ff ff3b 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    41e6:	aa07      	add	r2, sp, #28
    41e8:	4935      	ldr	r1, [pc, #212]	; (42c0 <menu3()+0x21c>)
    41ea:	f00e f8df 	bl	123ac <sscanf>
    41ee:	4b3a      	ldr	r3, [pc, #232]	; (42d8 <menu3()+0x234>)
    41f0:	9a07      	ldr	r2, [sp, #28]
    41f2:	601a      	str	r2, [r3, #0]
  return 1;
    41f4:	e7c1      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41f6:	f7ff ff31 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41fa:	aa07      	add	r2, sp, #28
    41fc:	4930      	ldr	r1, [pc, #192]	; (42c0 <menu3()+0x21c>)
    41fe:	f00e f8d5 	bl	123ac <sscanf>
    4202:	4b36      	ldr	r3, [pc, #216]	; (42dc <menu3()+0x238>)
    4204:	9a07      	ldr	r2, [sp, #28]
    4206:	801a      	strh	r2, [r3, #0]
  return 1;
    4208:	e7b7      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    420a:	f7ff ff27 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    420e:	aa07      	add	r2, sp, #28
    4210:	492b      	ldr	r1, [pc, #172]	; (42c0 <menu3()+0x21c>)
    4212:	f00e f8cb 	bl	123ac <sscanf>
    4216:	4b32      	ldr	r3, [pc, #200]	; (42e0 <menu3()+0x23c>)
    4218:	9a07      	ldr	r2, [sp, #28]
    421a:	601a      	str	r2, [r3, #0]
      acqModifyFrequency(fsamp);
    421c:	6818      	ldr	r0, [r3, #0]
}
    421e:	b009      	add	sp, #36	; 0x24
    4220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      acqModifyFrequency(fsamp);
    4224:	f7fc bdb4 	b.w	d90 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    4228:	f7ff ff18 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    422c:	aa07      	add	r2, sp, #28
    422e:	4924      	ldr	r1, [pc, #144]	; (42c0 <menu3()+0x21c>)
    4230:	f00e f8bc 	bl	123ac <sscanf>
    4234:	4b2b      	ldr	r3, [pc, #172]	; (42e4 <menu3()+0x240>)
    4236:	9a07      	ldr	r2, [sp, #28]
    4238:	801a      	strh	r2, [r3, #0]
      setAGain(again);
    423a:	8818      	ldrh	r0, [r3, #0]
    423c:	b240      	sxtb	r0, r0
}
    423e:	b009      	add	sp, #36	; 0x24
    4240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      setAGain(again);
    4244:	f7fc bed4 	b.w	ff0 <setAGain(signed char)>
{ char *buffer=menuGetLine();
    4248:	f7ff ff08 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    424c:	aa07      	add	r2, sp, #28
    424e:	491c      	ldr	r1, [pc, #112]	; (42c0 <menu3()+0x21c>)
    4250:	f00e f8ac 	bl	123ac <sscanf>
    4254:	4b24      	ldr	r3, [pc, #144]	; (42e8 <menu3()+0x244>)
    4256:	9a07      	ldr	r2, [sp, #28]
    4258:	601a      	str	r2, [r3, #0]
  return 1;
    425a:	e78e      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    425c:	f7ff fefe 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    4260:	aa07      	add	r2, sp, #28
    4262:	4917      	ldr	r1, [pc, #92]	; (42c0 <menu3()+0x21c>)
    4264:	f00e f8a2 	bl	123ac <sscanf>
    4268:	4b20      	ldr	r3, [pc, #128]	; (42ec <menu3()+0x248>)
    426a:	9a07      	ldr	r2, [sp, #28]
    426c:	601a      	str	r2, [r3, #0]
  return 1;
    426e:	e784      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4270:	f7ff fef4 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4274:	aa07      	add	r2, sp, #28
    4276:	4912      	ldr	r1, [pc, #72]	; (42c0 <menu3()+0x21c>)
    4278:	f00e f898 	bl	123ac <sscanf>
    427c:	4b1c      	ldr	r3, [pc, #112]	; (42f0 <menu3()+0x24c>)
    427e:	9a07      	ldr	r2, [sp, #28]
    4280:	801a      	strh	r2, [r3, #0]
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    4282:	881a      	ldrh	r2, [r3, #0]
    4284:	0412      	lsls	r2, r2, #16
    4286:	f57f af78 	bpl.w	417a <menu3()+0xd6>
    428a:	2200      	movs	r2, #0
    428c:	801a      	strh	r2, [r3, #0]
    428e:	e774      	b.n	417a <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4290:	f7ff fee4 	bl	405c <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    4294:	ad07      	add	r5, sp, #28
    4296:	f10d 0113 	add.w	r1, sp, #19
    429a:	ac06      	add	r4, sp, #24
    429c:	aa05      	add	r2, sp, #20
    429e:	f10d 0312 	add.w	r3, sp, #18
    42a2:	9400      	str	r4, [sp, #0]
    42a4:	e9cd 1501 	strd	r1, r5, [sp, #4]
    42a8:	4904      	ldr	r1, [pc, #16]	; (42bc <menu3()+0x218>)
    42aa:	f00e f87f 	bl	123ac <sscanf>
      rtcSetTime(hour,minutes,seconds);
    42ae:	9805      	ldr	r0, [sp, #20]
    42b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    42b4:	f000 fda2 	bl	4dfc <rtcSetTime(int, int, int)>
    42b8:	e75f      	b.n	417a <menu3()+0xd6>
    42ba:	bf00      	nop
    42bc:	200007bc 	.word	0x200007bc
    42c0:	200007c4 	.word	0x200007c4
    42c4:	20024614 	.word	0x20024614
    42c8:	20025b90 	.word	0x20025b90
    42cc:	20009544 	.word	0x20009544
    42d0:	20009548 	.word	0x20009548
    42d4:	2000954c 	.word	0x2000954c
    42d8:	20009550 	.word	0x20009550
    42dc:	20025bbe 	.word	0x20025bbe
    42e0:	20009534 	.word	0x20009534
    42e4:	20009572 	.word	0x20009572
    42e8:	20009554 	.word	0x20009554
    42ec:	20025b98 	.word	0x20025b98
    42f0:	20025bc4 	.word	0x20025bc4

000042f4 <saveParameters()>:
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
  #endif
}

void saveParameters(void)
{
    42f4:	b430      	push	{r4, r5}
  store[1]  = t_acq;
  store[2]  = t_on;
  store[3]  = t_off;
  store[4]  = t_rep;
    42f6:	481a      	ldr	r0, [pc, #104]	; (4360 <saveParameters()+0x6c>)
  store[1]  = t_acq;
    42f8:	4c1a      	ldr	r4, [pc, #104]	; (4364 <saveParameters()+0x70>)
  store[2]  = t_on;
    42fa:	4a1b      	ldr	r2, [pc, #108]	; (4368 <saveParameters()+0x74>)
  store[3]  = t_off;
    42fc:	4b1b      	ldr	r3, [pc, #108]	; (436c <saveParameters()+0x78>)
  store[1]  = t_acq;
    42fe:	6825      	ldr	r5, [r4, #0]
  store[2]  = t_on;
    4300:	6812      	ldr	r2, [r2, #0]
  store[3]  = t_off;
    4302:	681b      	ldr	r3, [r3, #0]
  store[4]  = t_rep;
    4304:	6804      	ldr	r4, [r0, #0]
  store[1]  = t_acq;
    4306:	481a      	ldr	r0, [pc, #104]	; (4370 <saveParameters()+0x7c>)
  store[5]  = proc;
    4308:	491a      	ldr	r1, [pc, #104]	; (4374 <saveParameters()+0x80>)
  store[3]  = t_off;
    430a:	80c3      	strh	r3, [r0, #6]
  store[6]  = shift;
    430c:	4b1a      	ldr	r3, [pc, #104]	; (4378 <saveParameters()+0x84>)
  store[5]  = proc;
    430e:	8809      	ldrh	r1, [r1, #0]
  store[6]  = shift;
    4310:	881b      	ldrh	r3, [r3, #0]
  store[2]  = t_on;
    4312:	8082      	strh	r2, [r0, #4]
  store[6]  = shift;
    4314:	8183      	strh	r3, [r0, #12]
  store[7]  = t_1;
    4316:	4a19      	ldr	r2, [pc, #100]	; (437c <saveParameters()+0x88>)
  store[8]  = t_2;
    4318:	4b19      	ldr	r3, [pc, #100]	; (4380 <saveParameters()+0x8c>)
  store[4]  = t_rep;
    431a:	8104      	strh	r4, [r0, #8]
  store[7]  = t_1;
    431c:	6814      	ldr	r4, [r2, #0]
  store[8]  = t_2;
    431e:	681b      	ldr	r3, [r3, #0]
  store[9]  = t_3;
  store[10] = t_4;
    4320:	4a18      	ldr	r2, [pc, #96]	; (4384 <saveParameters()+0x90>)
  store[5]  = proc;
    4322:	8141      	strh	r1, [r0, #10]
  store[8]  = t_2;
    4324:	8203      	strh	r3, [r0, #16]
  store[9]  = t_3;
    4326:	4918      	ldr	r1, [pc, #96]	; (4388 <saveParameters()+0x94>)
  store[11] = fsamp/1000;
    4328:	4b18      	ldr	r3, [pc, #96]	; (438c <saveParameters()+0x98>)
  store[7]  = t_1;
    432a:	81c4      	strh	r4, [r0, #14]
  store[9]  = t_3;
    432c:	680c      	ldr	r4, [r1, #0]
  store[10] = t_4;
    432e:	6811      	ldr	r1, [r2, #0]
  store[11] = fsamp/1000;
    4330:	681b      	ldr	r3, [r3, #0]
    4332:	4a17      	ldr	r2, [pc, #92]	; (4390 <saveParameters()+0x9c>)
  store[10] = t_4;
    4334:	8281      	strh	r1, [r0, #20]
  store[11] = fsamp/1000;
    4336:	fb82 1203 	smull	r1, r2, r2, r3
    433a:	17db      	asrs	r3, r3, #31
  store[9]  = t_3;
    433c:	8244      	strh	r4, [r0, #18]
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
    433e:	2100      	movs	r1, #0
  store[11] = fsamp/1000;
    4340:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  store[13] = dgain;
    4344:	4c13      	ldr	r4, [pc, #76]	; (4394 <saveParameters()+0xa0>)
  store[12] = again;
    4346:	4a14      	ldr	r2, [pc, #80]	; (4398 <saveParameters()+0xa4>)
  store[11] = fsamp/1000;
    4348:	82c3      	strh	r3, [r0, #22]
  store[12] = again;
    434a:	8812      	ldrh	r2, [r2, #0]
  store[13] = dgain;
    434c:	8823      	ldrh	r3, [r4, #0]
  store[1]  = t_acq;
    434e:	8045      	strh	r5, [r0, #2]
  store[12] = again;
    4350:	8302      	strh	r2, [r0, #24]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4352:	2220      	movs	r2, #32
  store[14] = 0;
    4354:	61c1      	str	r1, [r0, #28]
  store[13] = dgain;
    4356:	8343      	strh	r3, [r0, #26]
  store[15] = 0;

  storeConfig(store, 16);
}
    4358:	bc30      	pop	{r4, r5}
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    435a:	f00a b907 	b.w	e56c <eeprom_write_block>
    435e:	bf00      	nop
    4360:	20025b98 	.word	0x20025b98
    4364:	20009550 	.word	0x20009550
    4368:	20009554 	.word	0x20009554
    436c:	20025b94 	.word	0x20025b94
    4370:	20024614 	.word	0x20024614
    4374:	20025bbe 	.word	0x20025bbe
    4378:	20025bc4 	.word	0x20025bc4
    437c:	20025b90 	.word	0x20025b90
    4380:	20009544 	.word	0x20009544
    4384:	2000954c 	.word	0x2000954c
    4388:	20009548 	.word	0x20009548
    438c:	20009534 	.word	0x20009534
    4390:	10624dd3 	.word	0x10624dd3
    4394:	20025bb8 	.word	0x20025bb8
    4398:	20009572 	.word	0x20009572

0000439c <menu1(short)>:
{   // have ':'
    439c:	b510      	push	{r4, lr}
    439e:	4604      	mov	r4, r0
    43a0:	b082      	sub	sp, #8
        virtual int available() { return usb_serial_available(); }
    43a2:	f00b fe11 	bl	ffc8 <usb_serial_available>
    while(!Serial.available()) ;
    43a6:	2800      	cmp	r0, #0
    43a8:	d0fb      	beq.n	43a2 <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    43aa:	f00b fe51 	bl	10050 <usb_serial_getchar>
    ch=Serial.read();
    43ae:	b2c3      	uxtb	r3, r0
    if(ch=='w') 
    43b0:	2b77      	cmp	r3, #119	; 0x77
    43b2:	d006      	beq.n	43c2 <menu1(short)+0x26>
    else if(ch=='m') // control monitor (needed for gui)
    43b4:	2b6d      	cmp	r3, #109	; 0x6d
    43b6:	d010      	beq.n	43da <menu1(short)+0x3e>
    else if(ch=='c') // transfer internal rtc to external rtc
    43b8:	2b63      	cmp	r3, #99	; 0x63
    43ba:	d01a      	beq.n	43f2 <menu1(short)+0x56>
}
    43bc:	4620      	mov	r0, r4
    43be:	b002      	add	sp, #8
    43c0:	bd10      	pop	{r4, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    43c2:	210f      	movs	r1, #15
    43c4:	480d      	ldr	r0, [pc, #52]	; (43fc <menu1(short)+0x60>)
    43c6:	f00b fe69 	bl	1009c <usb_serial_write>
    43ca:	480d      	ldr	r0, [pc, #52]	; (4400 <menu1(short)+0x64>)
    43cc:	f009 fae0 	bl	d990 <Print::println()>
      saveParameters();
    43d0:	f7ff ff90 	bl	42f4 <saveParameters()>
}
    43d4:	4620      	mov	r0, r4
    43d6:	b002      	add	sp, #8
    43d8:	bd10      	pop	{r4, pc}
{ char *buffer=menuGetLine();
    43da:	f7ff fe3f 	bl	405c <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    43de:	aa01      	add	r2, sp, #4
    43e0:	4908      	ldr	r1, [pc, #32]	; (4404 <menu1(short)+0x68>)
    43e2:	f00d ffe3 	bl	123ac <sscanf>
    43e6:	4b08      	ldr	r3, [pc, #32]	; (4408 <menu1(short)+0x6c>)
    43e8:	9a01      	ldr	r2, [sp, #4]
}
    43ea:	4620      	mov	r0, r4
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    43ec:	801a      	strh	r2, [r3, #0]
}
    43ee:	b002      	add	sp, #8
    43f0:	bd10      	pop	{r4, pc}
    { rtcXferTime();
    43f2:	f000 fd1b 	bl	4e2c <rtcXferTime()>
}
    43f6:	4620      	mov	r0, r4
    43f8:	b002      	add	sp, #8
    43fa:	bd10      	pop	{r4, pc}
    43fc:	2000064c 	.word	0x2000064c
    4400:	20008bb4 	.word	0x20008bb4
    4404:	200007c4 	.word	0x200007c4
    4408:	20025bbc 	.word	0x20025bbc

0000440c <loadParameters()>:

uint16_t *loadParameters(void)
{
    440c:	b510      	push	{r4, lr}
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    440e:	4c37      	ldr	r4, [pc, #220]	; (44ec <loadParameters()+0xe0>)
    4410:	2220      	movs	r2, #32
    4412:	2100      	movs	r1, #0
    4414:	4620      	mov	r0, r4
    4416:	f009 ff2d 	bl	e274 <eeprom_read_block>
  loadConfig(store,16);
  if(store[0]==1)
    441a:	8823      	ldrh	r3, [r4, #0]
    441c:	2b01      	cmp	r3, #1
    441e:	d033      	beq.n	4488 <loadParameters()+0x7c>
    dgain   = store[13];
  }
  else
  {
    store[0]  = 0;
    store[1]  = t_acq    = T_ACQ;
    4420:	2214      	movs	r2, #20
    4422:	4833      	ldr	r0, [pc, #204]	; (44f0 <loadParameters()+0xe4>)
    store[2]  = t_on     = T_ON;
    4424:	213c      	movs	r1, #60	; 0x3c
    store[0]  = 0;
    4426:	2300      	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    4428:	6002      	str	r2, [r0, #0]
    store[2]  = t_on     = T_ON;
    442a:	4832      	ldr	r0, [pc, #200]	; (44f4 <loadParameters()+0xe8>)
    store[1]  = t_acq    = T_ACQ;
    442c:	8062      	strh	r2, [r4, #2]
    store[3]  = t_off    = T_OFF;
    store[4]  = t_rep    = T_REP;
    store[5]  = proc     = PROC_MODE;
    store[6]  = shift    = SHIFT;
    store[7]  = t_1      = T_1;
    store[8]  = t_2      = T_2;
    442e:	220c      	movs	r2, #12
    store[2]  = t_on     = T_ON;
    4430:	6001      	str	r1, [r0, #0]
    store[3]  = t_off    = T_OFF;
    4432:	4831      	ldr	r0, [pc, #196]	; (44f8 <loadParameters()+0xec>)
    store[2]  = t_on     = T_ON;
    4434:	80a1      	strh	r1, [r4, #4]
    store[9]  = t_3      = T_3;
    store[10] = t_4      = T_4;
    4436:	2118      	movs	r1, #24
    store[3]  = t_off    = T_OFF;
    4438:	6003      	str	r3, [r0, #0]
    store[4]  = t_rep    = T_REP;
    443a:	4830      	ldr	r0, [pc, #192]	; (44fc <loadParameters()+0xf0>)
    store[10] = t_4      = T_4;
    443c:	82a1      	strh	r1, [r4, #20]
    store[4]  = t_rep    = T_REP;
    443e:	6003      	str	r3, [r0, #0]
    store[5]  = proc     = PROC_MODE;
    4440:	482f      	ldr	r0, [pc, #188]	; (4500 <loadParameters()+0xf4>)
    store[8]  = t_2      = T_2;
    4442:	8222      	strh	r2, [r4, #16]
    store[5]  = proc     = PROC_MODE;
    4444:	8003      	strh	r3, [r0, #0]
    store[6]  = shift    = SHIFT;
    4446:	482f      	ldr	r0, [pc, #188]	; (4504 <loadParameters()+0xf8>)
    store[9]  = t_3      = T_3;
    4448:	8262      	strh	r2, [r4, #18]
    store[6]  = shift    = SHIFT;
    444a:	8003      	strh	r3, [r0, #0]
    store[7]  = t_1      = T_1;
    444c:	482e      	ldr	r0, [pc, #184]	; (4508 <loadParameters()+0xfc>)
    store[0]  = 0;
    444e:	8023      	strh	r3, [r4, #0]
    store[7]  = t_1      = T_1;
    4450:	6003      	str	r3, [r0, #0]
    store[8]  = t_2      = T_2;
    4452:	482e      	ldr	r0, [pc, #184]	; (450c <loadParameters()+0x100>)
    store[3]  = t_off    = T_OFF;
    4454:	80e3      	strh	r3, [r4, #6]
    store[8]  = t_2      = T_2;
    4456:	6002      	str	r2, [r0, #0]
    store[9]  = t_3      = T_3;
    4458:	482d      	ldr	r0, [pc, #180]	; (4510 <loadParameters()+0x104>)
    store[4]  = t_rep    = T_REP;
    445a:	8123      	strh	r3, [r4, #8]
    store[9]  = t_3      = T_3;
    445c:	6002      	str	r2, [r0, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    store[12] = again    = AGAIN;
    445e:	220a      	movs	r2, #10
    store[10] = t_4      = T_4;
    4460:	482c      	ldr	r0, [pc, #176]	; (4514 <loadParameters()+0x108>)
    store[5]  = proc     = PROC_MODE;
    4462:	8163      	strh	r3, [r4, #10]
    store[10] = t_4      = T_4;
    4464:	6001      	str	r1, [r0, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    4466:	f64b 3080 	movw	r0, #48000	; 0xbb80
    446a:	492b      	ldr	r1, [pc, #172]	; (4518 <loadParameters()+0x10c>)
    store[6]  = shift    = SHIFT;
    446c:	81a3      	strh	r3, [r4, #12]
    store[11] = (fsamp   = FSAMP)/1000; 
    446e:	6008      	str	r0, [r1, #0]
    4470:	2130      	movs	r1, #48	; 0x30
    store[12] = again    = AGAIN;
    4472:	482a      	ldr	r0, [pc, #168]	; (451c <loadParameters()+0x110>)
    store[11] = (fsamp   = FSAMP)/1000; 
    4474:	82e1      	strh	r1, [r4, #22]
    store[13] = dgain    = DGAIN;
    4476:	492a      	ldr	r1, [pc, #168]	; (4520 <loadParameters()+0x114>)
    store[12] = again    = AGAIN;
    4478:	8002      	strh	r2, [r0, #0]
    store[7]  = t_1      = T_1;
    447a:	81e3      	strh	r3, [r4, #14]
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    447c:	481b      	ldr	r0, [pc, #108]	; (44ec <loadParameters()+0xe0>)
    store[13] = dgain    = DGAIN;
    447e:	8363      	strh	r3, [r4, #26]
    store[14] = 0;
    4480:	61e3      	str	r3, [r4, #28]
    store[12] = again    = AGAIN;
    4482:	8322      	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    4484:	800b      	strh	r3, [r1, #0]
}
    4486:	bd10      	pop	{r4, pc}
    t_acq   = store[1];
    4488:	8860      	ldrh	r0, [r4, #2]
    fsamp   = store[11]*1000;
    448a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    t_acq   = store[1];
    448e:	4918      	ldr	r1, [pc, #96]	; (44f0 <loadParameters()+0xe4>)
    fsamp   = store[11]*1000;
    4490:	8ae3      	ldrh	r3, [r4, #22]
    t_acq   = store[1];
    4492:	6008      	str	r0, [r1, #0]
    t_on    = store[2];
    4494:	88a0      	ldrh	r0, [r4, #4]
    fsamp   = store[11]*1000;
    4496:	fb02 f303 	mul.w	r3, r2, r3
    t_on    = store[2];
    449a:	4916      	ldr	r1, [pc, #88]	; (44f4 <loadParameters()+0xe8>)
    fsamp   = store[11]*1000;
    449c:	4a1e      	ldr	r2, [pc, #120]	; (4518 <loadParameters()+0x10c>)
    t_on    = store[2];
    449e:	6008      	str	r0, [r1, #0]
    t_off   = store[3];
    44a0:	88e0      	ldrh	r0, [r4, #6]
    44a2:	4915      	ldr	r1, [pc, #84]	; (44f8 <loadParameters()+0xec>)
    44a4:	6008      	str	r0, [r1, #0]
    t_rep   = store[4];
    44a6:	8920      	ldrh	r0, [r4, #8]
    44a8:	4914      	ldr	r1, [pc, #80]	; (44fc <loadParameters()+0xf0>)
    44aa:	6008      	str	r0, [r1, #0]
    proc    = store[5];
    44ac:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    44b0:	4913      	ldr	r1, [pc, #76]	; (4500 <loadParameters()+0xf4>)
    44b2:	8008      	strh	r0, [r1, #0]
    shift   = store[6];
    44b4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    44b8:	4912      	ldr	r1, [pc, #72]	; (4504 <loadParameters()+0xf8>)
    44ba:	8008      	strh	r0, [r1, #0]
    t_1     = store[7];
    44bc:	89e0      	ldrh	r0, [r4, #14]
    44be:	4912      	ldr	r1, [pc, #72]	; (4508 <loadParameters()+0xfc>)
    44c0:	6008      	str	r0, [r1, #0]
    t_2     = store[8];
    44c2:	8a20      	ldrh	r0, [r4, #16]
    44c4:	4911      	ldr	r1, [pc, #68]	; (450c <loadParameters()+0x100>)
    44c6:	6008      	str	r0, [r1, #0]
    t_3     = store[9];
    44c8:	8a60      	ldrh	r0, [r4, #18]
    44ca:	4911      	ldr	r1, [pc, #68]	; (4510 <loadParameters()+0x104>)
    44cc:	6008      	str	r0, [r1, #0]
    t_4     = store[10];
    44ce:	8aa0      	ldrh	r0, [r4, #20]
    44d0:	4910      	ldr	r1, [pc, #64]	; (4514 <loadParameters()+0x108>)
    44d2:	6008      	str	r0, [r1, #0]
    fsamp   = store[11]*1000;
    44d4:	6013      	str	r3, [r2, #0]
    again   = store[12];
    44d6:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    44da:	4910      	ldr	r1, [pc, #64]	; (451c <loadParameters()+0x110>)
    dgain   = store[13];
    44dc:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    44e0:	4b0f      	ldr	r3, [pc, #60]	; (4520 <loadParameters()+0x114>)
    again   = store[12];
    44e2:	8008      	strh	r0, [r1, #0]
}
    44e4:	4801      	ldr	r0, [pc, #4]	; (44ec <loadParameters()+0xe0>)
    dgain   = store[13];
    44e6:	801a      	strh	r2, [r3, #0]
}
    44e8:	bd10      	pop	{r4, pc}
    44ea:	bf00      	nop
    44ec:	20024614 	.word	0x20024614
    44f0:	20009550 	.word	0x20009550
    44f4:	20009554 	.word	0x20009554
    44f8:	20025b94 	.word	0x20025b94
    44fc:	20025b98 	.word	0x20025b98
    4500:	20025bbe 	.word	0x20025bbe
    4504:	20025bc4 	.word	0x20025bc4
    4508:	20025b90 	.word	0x20025b90
    450c:	20009544 	.word	0x20009544
    4510:	20009548 	.word	0x20009548
    4514:	2000954c 	.word	0x2000954c
    4518:	20009534 	.word	0x20009534
    451c:	20009572 	.word	0x20009572
    4520:	20025bb8 	.word	0x20025bb8

00004524 <menu2()>:
{   // have '?'
    4524:	b510      	push	{r4, lr}
    4526:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    4528:	f00b fd4e 	bl	ffc8 <usb_serial_available>
    while(!Serial.available()) ;
    452c:	2800      	cmp	r0, #0
    452e:	d0fb      	beq.n	4528 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    4530:	f00b fd8e 	bl	10050 <usb_serial_getchar>
    ch=Serial.read();
    4534:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    4536:	2870      	cmp	r0, #112	; 0x70
    4538:	d053      	beq.n	45e2 <menu2()+0xbe>
    else if(ch=='d') // get date
    453a:	3831      	subs	r0, #49	; 0x31
    453c:	2846      	cmp	r0, #70	; 0x46
    453e:	d84a      	bhi.n	45d6 <menu2()+0xb2>
    4540:	e8df f010 	tbh	[pc, r0, lsl #1]
    4544:	011c0116 	.word	0x011c0116
    4548:	01280122 	.word	0x01280122
    454c:	00490049 	.word	0x00490049
    4550:	00490049 	.word	0x00490049
    4554:	00490049 	.word	0x00490049
    4558:	00490049 	.word	0x00490049
    455c:	00490049 	.word	0x00490049
    4560:	00490049 	.word	0x00490049
    4564:	00490049 	.word	0x00490049
    4568:	00490049 	.word	0x00490049
    456c:	00490049 	.word	0x00490049
    4570:	00490049 	.word	0x00490049
    4574:	00490049 	.word	0x00490049
    4578:	00490049 	.word	0x00490049
    457c:	00490049 	.word	0x00490049
    4580:	00490049 	.word	0x00490049
    4584:	00490049 	.word	0x00490049
    4588:	00490049 	.word	0x00490049
    458c:	00490049 	.word	0x00490049
    4590:	00490049 	.word	0x00490049
    4594:	00490049 	.word	0x00490049
    4598:	00490049 	.word	0x00490049
    459c:	00490049 	.word	0x00490049
    45a0:	00490049 	.word	0x00490049
    45a4:	0049012b 	.word	0x0049012b
    45a8:	013f0131 	.word	0x013f0131
    45ac:	014e0049 	.word	0x014e0049
    45b0:	0049015b 	.word	0x0049015b
    45b4:	00490049 	.word	0x00490049
    45b8:	00490049 	.word	0x00490049
    45bc:	00490049 	.word	0x00490049
    45c0:	00490161 	.word	0x00490161
    45c4:	01670049 	.word	0x01670049
    45c8:	0173016d 	.word	0x0173016d
    45cc:	00490049 	.word	0x00490049
    45d0:	0182      	.short	0x0182
    45d2:	f00b fd3d 	bl	10050 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    45d6:	f00b fcf7 	bl	ffc8 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    45da:	2800      	cmp	r0, #0
    45dc:	d1f9      	bne.n	45d2 <menu2()+0xae>
}
    45de:	b008      	add	sp, #32
    45e0:	bd10      	pop	{r4, pc}
      Serial.println();
    45e2:	48a1      	ldr	r0, [pc, #644]	; (4868 <menu2()+0x344>)
    45e4:	f009 f9d4 	bl	d990 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    45e8:	2127      	movs	r1, #39	; 0x27
    45ea:	48a0      	ldr	r0, [pc, #640]	; (486c <menu2()+0x348>)
    45ec:	f00b fd56 	bl	1009c <usb_serial_write>
    45f0:	489d      	ldr	r0, [pc, #628]	; (4868 <menu2()+0x344>)
    45f2:	f009 f9cd 	bl	d990 <Print::println()>
      rtc_get_datetime(&t);
    45f6:	a806      	add	r0, sp, #24
    45f8:	f000 fbdc 	bl	4db4 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    45fc:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    4600:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    4604:	f99d 001e 	ldrsb.w	r0, [sp, #30]
    4608:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    460c:	f99d 401b 	ldrsb.w	r4, [sp, #27]
    4610:	e9cd 3203 	strd	r3, r2, [sp, #12]
    4614:	e9cd 1001 	strd	r1, r0, [sp, #4]
    4618:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    461c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4620:	4993      	ldr	r1, [pc, #588]	; (4870 <menu2()+0x34c>)
    4622:	9400      	str	r4, [sp, #0]
    4624:	4890      	ldr	r0, [pc, #576]	; (4868 <menu2()+0x344>)
    4626:	f009 f9cf 	bl	d9c8 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    462a:	f000 fc47 	bl	4ebc <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    462e:	4604      	mov	r4, r0
    4630:	b128      	cbz	r0, 463e <menu2()+0x11a>
							  return write((const uint8_t *)str, strlen(str)); }
    4632:	f00e fc25 	bl	12e80 <strlen>
    4636:	4601      	mov	r1, r0
    4638:	4620      	mov	r0, r4
    463a:	f00b fd2f 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    463e:	488a      	ldr	r0, [pc, #552]	; (4868 <menu2()+0x344>)
    4640:	f009 f9a6 	bl	d990 <Print::println()>
    4644:	210c      	movs	r1, #12
    4646:	488b      	ldr	r0, [pc, #556]	; (4874 <menu2()+0x350>)
    4648:	f00b fd28 	bl	1009c <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    464c:	498a      	ldr	r1, [pc, #552]	; (4878 <menu2()+0x354>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    464e:	2300      	movs	r3, #0
    4650:	220a      	movs	r2, #10
    4652:	6809      	ldr	r1, [r1, #0]
    4654:	4884      	ldr	r0, [pc, #528]	; (4868 <menu2()+0x344>)
    4656:	f009 f9c5 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    465a:	4883      	ldr	r0, [pc, #524]	; (4868 <menu2()+0x344>)
    465c:	f009 f998 	bl	d990 <Print::println()>
    4660:	210c      	movs	r1, #12
    4662:	4886      	ldr	r0, [pc, #536]	; (487c <menu2()+0x358>)
    4664:	f00b fd1a 	bl	1009c <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    4668:	4985      	ldr	r1, [pc, #532]	; (4880 <menu2()+0x35c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    466a:	2300      	movs	r3, #0
    466c:	220a      	movs	r2, #10
    466e:	6809      	ldr	r1, [r1, #0]
    4670:	487d      	ldr	r0, [pc, #500]	; (4868 <menu2()+0x344>)
    4672:	f009 f9b7 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4676:	487c      	ldr	r0, [pc, #496]	; (4868 <menu2()+0x344>)
    4678:	f009 f98a 	bl	d990 <Print::println()>
    467c:	210c      	movs	r1, #12
    467e:	4881      	ldr	r0, [pc, #516]	; (4884 <menu2()+0x360>)
    4680:	f00b fd0c 	bl	1009c <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    4684:	4980      	ldr	r1, [pc, #512]	; (4888 <menu2()+0x364>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4686:	220a      	movs	r2, #10
    4688:	2300      	movs	r3, #0
    468a:	6809      	ldr	r1, [r1, #0]
    468c:	4876      	ldr	r0, [pc, #472]	; (4868 <menu2()+0x344>)
    468e:	f009 f9a9 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4692:	4875      	ldr	r0, [pc, #468]	; (4868 <menu2()+0x344>)
    4694:	f009 f97c 	bl	d990 <Print::println()>
    4698:	210c      	movs	r1, #12
    469a:	487c      	ldr	r0, [pc, #496]	; (488c <menu2()+0x368>)
    469c:	f00b fcfe 	bl	1009c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    46a0:	4b7b      	ldr	r3, [pc, #492]	; (4890 <menu2()+0x36c>)
	size_t println(long n)				{ return print(n) + println(); }
    46a2:	4871      	ldr	r0, [pc, #452]	; (4868 <menu2()+0x344>)
    46a4:	6819      	ldr	r1, [r3, #0]
    46a6:	f009 f967 	bl	d978 <Print::print(long)>
    46aa:	486f      	ldr	r0, [pc, #444]	; (4868 <menu2()+0x344>)
    46ac:	f009 f970 	bl	d990 <Print::println()>
    46b0:	210c      	movs	r1, #12
    46b2:	4878      	ldr	r0, [pc, #480]	; (4894 <menu2()+0x370>)
    46b4:	f00b fcf2 	bl	1009c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    46b8:	4b77      	ldr	r3, [pc, #476]	; (4898 <menu2()+0x374>)
	size_t print(int n)				{ return print((long)n); }
    46ba:	486b      	ldr	r0, [pc, #428]	; (4868 <menu2()+0x344>)
    46bc:	8819      	ldrh	r1, [r3, #0]
    46be:	b209      	sxth	r1, r1
    46c0:	f009 f95a 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46c4:	4868      	ldr	r0, [pc, #416]	; (4868 <menu2()+0x344>)
    46c6:	f009 f963 	bl	d990 <Print::println()>
    46ca:	210c      	movs	r1, #12
    46cc:	4873      	ldr	r0, [pc, #460]	; (489c <menu2()+0x378>)
    46ce:	f00b fce5 	bl	1009c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    46d2:	4b73      	ldr	r3, [pc, #460]	; (48a0 <menu2()+0x37c>)
	size_t print(int n)				{ return print((long)n); }
    46d4:	4864      	ldr	r0, [pc, #400]	; (4868 <menu2()+0x344>)
    46d6:	8819      	ldrh	r1, [r3, #0]
    46d8:	b209      	sxth	r1, r1
    46da:	f009 f94d 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46de:	4862      	ldr	r0, [pc, #392]	; (4868 <menu2()+0x344>)
    46e0:	f009 f956 	bl	d990 <Print::println()>
    46e4:	210c      	movs	r1, #12
    46e6:	486f      	ldr	r0, [pc, #444]	; (48a4 <menu2()+0x380>)
    46e8:	f00b fcd8 	bl	1009c <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    46ec:	4b6e      	ldr	r3, [pc, #440]	; (48a8 <menu2()+0x384>)
	size_t print(int n)				{ return print((long)n); }
    46ee:	485e      	ldr	r0, [pc, #376]	; (4868 <menu2()+0x344>)
    46f0:	8819      	ldrh	r1, [r3, #0]
    46f2:	b209      	sxth	r1, r1
    46f4:	f009 f940 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46f8:	485b      	ldr	r0, [pc, #364]	; (4868 <menu2()+0x344>)
    46fa:	f009 f949 	bl	d990 <Print::println()>
    46fe:	210c      	movs	r1, #12
    4700:	486a      	ldr	r0, [pc, #424]	; (48ac <menu2()+0x388>)
    4702:	f00b fccb 	bl	1009c <usb_serial_write>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    4706:	496a      	ldr	r1, [pc, #424]	; (48b0 <menu2()+0x38c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4708:	2300      	movs	r3, #0
    470a:	220a      	movs	r2, #10
    470c:	6809      	ldr	r1, [r1, #0]
    470e:	4856      	ldr	r0, [pc, #344]	; (4868 <menu2()+0x344>)
    4710:	f009 f968 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4714:	4854      	ldr	r0, [pc, #336]	; (4868 <menu2()+0x344>)
    4716:	f009 f93b 	bl	d990 <Print::println()>
    471a:	210c      	movs	r1, #12
    471c:	4865      	ldr	r0, [pc, #404]	; (48b4 <menu2()+0x390>)
    471e:	f00b fcbd 	bl	1009c <usb_serial_write>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    4722:	4965      	ldr	r1, [pc, #404]	; (48b8 <menu2()+0x394>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4724:	2300      	movs	r3, #0
    4726:	220a      	movs	r2, #10
    4728:	6809      	ldr	r1, [r1, #0]
    472a:	484f      	ldr	r0, [pc, #316]	; (4868 <menu2()+0x344>)
    472c:	f009 f95a 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4730:	484d      	ldr	r0, [pc, #308]	; (4868 <menu2()+0x344>)
    4732:	f009 f92d 	bl	d990 <Print::println()>
    4736:	210c      	movs	r1, #12
    4738:	4860      	ldr	r0, [pc, #384]	; (48bc <menu2()+0x398>)
    473a:	f00b fcaf 	bl	1009c <usb_serial_write>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    473e:	4960      	ldr	r1, [pc, #384]	; (48c0 <menu2()+0x39c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4740:	2300      	movs	r3, #0
    4742:	220a      	movs	r2, #10
    4744:	6809      	ldr	r1, [r1, #0]
    4746:	4848      	ldr	r0, [pc, #288]	; (4868 <menu2()+0x344>)
    4748:	f009 f94c 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    474c:	4846      	ldr	r0, [pc, #280]	; (4868 <menu2()+0x344>)
    474e:	f009 f91f 	bl	d990 <Print::println()>
    4752:	210c      	movs	r1, #12
    4754:	485b      	ldr	r0, [pc, #364]	; (48c4 <menu2()+0x3a0>)
    4756:	f00b fca1 	bl	1009c <usb_serial_write>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    475a:	495b      	ldr	r1, [pc, #364]	; (48c8 <menu2()+0x3a4>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    475c:	2300      	movs	r3, #0
    475e:	220a      	movs	r2, #10
    4760:	6809      	ldr	r1, [r1, #0]
    4762:	4841      	ldr	r0, [pc, #260]	; (4868 <menu2()+0x344>)
    4764:	f009 f93e 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4768:	483f      	ldr	r0, [pc, #252]	; (4868 <menu2()+0x344>)
    476a:	f009 f911 	bl	d990 <Print::println()>
    476e:	e732      	b.n	45d6 <menu2()+0xb2>
    4770:	210b      	movs	r1, #11
    4772:	4856      	ldr	r0, [pc, #344]	; (48cc <menu2()+0x3a8>)
    4774:	f00b fc92 	bl	1009c <usb_serial_write>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    4778:	494d      	ldr	r1, [pc, #308]	; (48b0 <menu2()+0x38c>)
    477a:	e7ef      	b.n	475c <menu2()+0x238>
    477c:	210b      	movs	r1, #11
    477e:	4854      	ldr	r0, [pc, #336]	; (48d0 <menu2()+0x3ac>)
    4780:	f00b fc8c 	bl	1009c <usb_serial_write>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    4784:	494c      	ldr	r1, [pc, #304]	; (48b8 <menu2()+0x394>)
    4786:	e7e9      	b.n	475c <menu2()+0x238>
    4788:	210b      	movs	r1, #11
    478a:	4852      	ldr	r0, [pc, #328]	; (48d4 <menu2()+0x3b0>)
    478c:	f00b fc86 	bl	1009c <usb_serial_write>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    4790:	494b      	ldr	r1, [pc, #300]	; (48c0 <menu2()+0x39c>)
    4792:	e7e3      	b.n	475c <menu2()+0x238>
    4794:	210b      	movs	r1, #11
    4796:	4850      	ldr	r0, [pc, #320]	; (48d8 <menu2()+0x3b4>)
    4798:	e7dd      	b.n	4756 <menu2()+0x232>
    479a:	210c      	movs	r1, #12
    479c:	4835      	ldr	r0, [pc, #212]	; (4874 <menu2()+0x350>)
    479e:	f00b fc7d 	bl	1009c <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    47a2:	4935      	ldr	r1, [pc, #212]	; (4878 <menu2()+0x354>)
    47a4:	e7da      	b.n	475c <menu2()+0x238>
    47a6:	210c      	movs	r1, #12
    47a8:	483c      	ldr	r0, [pc, #240]	; (489c <menu2()+0x378>)
    47aa:	f00b fc77 	bl	1009c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    47ae:	4b3c      	ldr	r3, [pc, #240]	; (48a0 <menu2()+0x37c>)
      Serial.print("again (g) = "); Serial.println(again);
    47b0:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    47b2:	482d      	ldr	r0, [pc, #180]	; (4868 <menu2()+0x344>)
    47b4:	b209      	sxth	r1, r1
    47b6:	f009 f8df 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47ba:	482b      	ldr	r0, [pc, #172]	; (4868 <menu2()+0x344>)
    47bc:	f009 f8e8 	bl	d990 <Print::println()>
    47c0:	e709      	b.n	45d6 <menu2()+0xb2>
      rtc_get_datetime(&t);
    47c2:	a806      	add	r0, sp, #24
    47c4:	f000 faf6 	bl	4db4 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    47c8:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    47cc:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    47d0:	9000      	str	r0, [sp, #0]
    47d2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    47d6:	4941      	ldr	r1, [pc, #260]	; (48dc <menu2()+0x3b8>)
    47d8:	4823      	ldr	r0, [pc, #140]	; (4868 <menu2()+0x344>)
    47da:	f009 f8f5 	bl	d9c8 <Print::printf(char const*, ...)>
    47de:	e6fa      	b.n	45d6 <menu2()+0xb2>
    47e0:	210c      	movs	r1, #12
    47e2:	482a      	ldr	r0, [pc, #168]	; (488c <menu2()+0x368>)
    47e4:	f00b fc5a 	bl	1009c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    47e8:	4b29      	ldr	r3, [pc, #164]	; (4890 <menu2()+0x36c>)
	size_t println(long n)				{ return print(n) + println(); }
    47ea:	481f      	ldr	r0, [pc, #124]	; (4868 <menu2()+0x344>)
    47ec:	6819      	ldr	r1, [r3, #0]
    47ee:	f009 f8c3 	bl	d978 <Print::print(long)>
    47f2:	481d      	ldr	r0, [pc, #116]	; (4868 <menu2()+0x344>)
    47f4:	f009 f8cc 	bl	d990 <Print::println()>
    47f8:	e6ed      	b.n	45d6 <menu2()+0xb2>
    47fa:	210c      	movs	r1, #12
    47fc:	4829      	ldr	r0, [pc, #164]	; (48a4 <menu2()+0x380>)
    47fe:	f00b fc4d 	bl	1009c <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    4802:	4b29      	ldr	r3, [pc, #164]	; (48a8 <menu2()+0x384>)
    4804:	e7d4      	b.n	47b0 <menu2()+0x28c>
    4806:	210c      	movs	r1, #12
    4808:	4835      	ldr	r0, [pc, #212]	; (48e0 <menu2()+0x3bc>)
    480a:	f00b fc47 	bl	1009c <usb_serial_write>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    480e:	491c      	ldr	r1, [pc, #112]	; (4880 <menu2()+0x35c>)
    4810:	e7a4      	b.n	475c <menu2()+0x238>
    4812:	210c      	movs	r1, #12
    4814:	481b      	ldr	r0, [pc, #108]	; (4884 <menu2()+0x360>)
    4816:	f00b fc41 	bl	1009c <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    481a:	491b      	ldr	r1, [pc, #108]	; (4888 <menu2()+0x364>)
    481c:	e79e      	b.n	475c <menu2()+0x238>
    481e:	210c      	movs	r1, #12
    4820:	481c      	ldr	r0, [pc, #112]	; (4894 <menu2()+0x370>)
    4822:	f00b fc3b 	bl	1009c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    4826:	4b1c      	ldr	r3, [pc, #112]	; (4898 <menu2()+0x374>)
    4828:	e7c2      	b.n	47b0 <menu2()+0x28c>
      rtc_get_datetime(&t);
    482a:	a806      	add	r0, sp, #24
    482c:	f000 fac2 	bl	4db4 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    4830:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    4834:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    4838:	9000      	str	r0, [sp, #0]
    483a:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    483e:	4929      	ldr	r1, [pc, #164]	; (48e4 <menu2()+0x3c0>)
    4840:	4809      	ldr	r0, [pc, #36]	; (4868 <menu2()+0x344>)
    4842:	f009 f8c1 	bl	d9c8 <Print::printf(char const*, ...)>
    4846:	e6c6      	b.n	45d6 <menu2()+0xb2>
    { uint16_t *params=loadParameters();
    4848:	f7ff fde0 	bl	440c <loadParameters()>
    484c:	4604      	mov	r4, r0
    484e:	210d      	movs	r1, #13
    4850:	4825      	ldr	r0, [pc, #148]	; (48e8 <menu2()+0x3c4>)
    4852:	f00b fc23 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4856:	8821      	ldrh	r1, [r4, #0]
    4858:	4803      	ldr	r0, [pc, #12]	; (4868 <menu2()+0x344>)
    485a:	f009 f88d 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    485e:	4802      	ldr	r0, [pc, #8]	; (4868 <menu2()+0x344>)
    4860:	f009 f896 	bl	d990 <Print::println()>
    4864:	e6b7      	b.n	45d6 <menu2()+0xb2>
    4866:	bf00      	nop
    4868:	20008bb4 	.word	0x20008bb4
    486c:	20000a2c 	.word	0x20000a2c
    4870:	2000065c 	.word	0x2000065c
    4874:	20000684 	.word	0x20000684
    4878:	20009550 	.word	0x20009550
    487c:	20000694 	.word	0x20000694
    4880:	20009554 	.word	0x20009554
    4884:	200006a4 	.word	0x200006a4
    4888:	20025b98 	.word	0x20025b98
    488c:	200006b4 	.word	0x200006b4
    4890:	20009534 	.word	0x20009534
    4894:	200006c4 	.word	0x200006c4
    4898:	20025bc4 	.word	0x20025bc4
    489c:	200006d4 	.word	0x200006d4
    48a0:	20025bbe 	.word	0x20025bbe
    48a4:	200006e4 	.word	0x200006e4
    48a8:	20009572 	.word	0x20009572
    48ac:	200006f4 	.word	0x200006f4
    48b0:	20025b90 	.word	0x20025b90
    48b4:	20000704 	.word	0x20000704
    48b8:	20009544 	.word	0x20009544
    48bc:	20000714 	.word	0x20000714
    48c0:	20009548 	.word	0x20009548
    48c4:	20000724 	.word	0x20000724
    48c8:	2000954c 	.word	0x2000954c
    48cc:	2000077c 	.word	0x2000077c
    48d0:	20000788 	.word	0x20000788
    48d4:	20000794 	.word	0x20000794
    48d8:	200007a0 	.word	0x200007a0
    48dc:	20000734 	.word	0x20000734
    48e0:	2000076c 	.word	0x2000076c
    48e4:	20000750 	.word	0x20000750
    48e8:	200007ac 	.word	0x200007ac

000048ec <menu(short)>:
{
    48ec:	b538      	push	{r3, r4, r5, lr}
    48ee:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    48f0:	f00b fb6a 	bl	ffc8 <usb_serial_available>
  if(Serial.available())
    48f4:	b908      	cbnz	r0, 48fa <menu(short)+0xe>
}
    48f6:	4620      	mov	r0, r4
    48f8:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    48fa:	f00b fba9 	bl	10050 <usb_serial_getchar>
    char ch=Serial.read();
    48fe:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    4900:	2873      	cmp	r0, #115	; 0x73
    4902:	d02c      	beq.n	495e <menu(short)+0x72>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4904:	2878      	cmp	r0, #120	; 0x78
    4906:	d832      	bhi.n	496e <menu(short)+0x82>
    4908:	2861      	cmp	r0, #97	; 0x61
    490a:	d911      	bls.n	4930 <menu(short)+0x44>
    490c:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
    4910:	2b16      	cmp	r3, #22
    4912:	d82c      	bhi.n	496e <menu(short)+0x82>
    4914:	e8df f003 	tbb	[pc, r3]
    4918:	402b2b3d 	.word	0x402b2b3d
    491c:	2b2b2b2b 	.word	0x2b2b2b2b
    4920:	462b2b2b 	.word	0x462b2b2b
    4924:	2b2b2b2b 	.word	0x2b2b2b2b
    4928:	2b2b2b55 	.word	0x2b2b2b55
    492c:	2b2b      	.short	0x2b2b
    492e:	3a          	.byte	0x3a
    492f:	00          	.byte	0x00
    4930:	283a      	cmp	r0, #58	; 0x3a
    4932:	d026      	beq.n	4982 <menu(short)+0x96>
    4934:	283f      	cmp	r0, #63	; 0x3f
    4936:	d10d      	bne.n	4954 <menu(short)+0x68>
    else if(ch=='?') menu2(); 
    4938:	f7ff fdf4 	bl	4524 <menu2()>
    493c:	e004      	b.n	4948 <menu(short)+0x5c>
    493e:	f00b fb87 	bl	10050 <usb_serial_getchar>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4942:	b2c0      	uxtb	r0, r0
    4944:	f00b fb94 	bl	10070 <usb_serial_putchar>
        virtual int available() { return usb_serial_available(); }
    4948:	f00b fb3e 	bl	ffc8 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    494c:	2800      	cmp	r0, #0
    494e:	d1f6      	bne.n	493e <menu(short)+0x52>
}
    4950:	4620      	mov	r0, r4
    4952:	bd38      	pop	{r3, r4, r5, pc}
    4954:	2821      	cmp	r0, #33	; 0x21
    4956:	d10a      	bne.n	496e <menu(short)+0x82>
    else if(ch=='!') menu3(); 
    4958:	f7ff fba4 	bl	40a4 <menu3()>
    495c:	e7f4      	b.n	4948 <menu(short)+0x5c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    495e:	2107      	movs	r1, #7
    4960:	4819      	ldr	r0, [pc, #100]	; (49c8 <menu(short)+0xdc>)
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    4962:	2400      	movs	r4, #0
    4964:	f00b fb9a 	bl	1009c <usb_serial_write>
    4968:	f7fc fb62 	bl	1030 <adcStatus()>
    496c:	e7ec      	b.n	4948 <menu(short)+0x5c>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    496e:	f00b fb7f 	bl	10070 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4972:	2140      	movs	r1, #64	; 0x40
    4974:	4815      	ldr	r0, [pc, #84]	; (49cc <menu(short)+0xe0>)
    4976:	f00b fb91 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    497a:	4815      	ldr	r0, [pc, #84]	; (49d0 <menu(short)+0xe4>)
    497c:	f009 f808 	bl	d990 <Print::println()>
    4980:	e7e2      	b.n	4948 <menu(short)+0x5c>
    else if(ch==':') status=menu1(status); 
    4982:	4620      	mov	r0, r4
    4984:	f7ff fd0a 	bl	439c <menu1(short)>
    4988:	4604      	mov	r4, r0
    498a:	e7dd      	b.n	4948 <menu(short)+0x5c>
    else if(ch=='x') {powerDown();}
    498c:	f7fc ffc2 	bl	1914 <powerDown()>
    4990:	e7da      	b.n	4948 <menu(short)+0x5c>
    else if(ch=='b') {reboot();}
    4992:	f7fb fc37 	bl	204 <reboot()>
    4996:	e7d7      	b.n	4948 <menu(short)+0x5c>
    4998:	2106      	movs	r1, #6
    499a:	480e      	ldr	r0, [pc, #56]	; (49d4 <menu(short)+0xe8>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    499c:	2405      	movs	r4, #5
    499e:	f00b fb7d 	bl	1009c <usb_serial_write>
    49a2:	e7d1      	b.n	4948 <menu(short)+0x5c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    49a4:	4d0c      	ldr	r5, [pc, #48]	; (49d8 <menu(short)+0xec>)
    49a6:	210a      	movs	r1, #10
    49a8:	480c      	ldr	r0, [pc, #48]	; (49dc <menu(short)+0xf0>)
    49aa:	882b      	ldrh	r3, [r5, #0]
    49ac:	f1c3 0301 	rsb	r3, r3, #1
    49b0:	802b      	strh	r3, [r5, #0]
    49b2:	f00b fb73 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    49b6:	f9b5 1000 	ldrsh.w	r1, [r5]
    49ba:	4805      	ldr	r0, [pc, #20]	; (49d0 <menu(short)+0xe4>)
    49bc:	f008 ffdc 	bl	d978 <Print::print(long)>
    49c0:	e7c2      	b.n	4948 <menu(short)+0x5c>
    else if(ch=='r') {resetUSB();}
    49c2:	f7fb fbef 	bl	1a4 <resetUSB()>
    49c6:	e7bf      	b.n	4948 <menu(short)+0x5c>
    49c8:	200005ec 	.word	0x200005ec
    49cc:	20000608 	.word	0x20000608
    49d0:	20008bb4 	.word	0x20008bb4
    49d4:	200005f4 	.word	0x200005f4
    49d8:	20025bbc 	.word	0x20025bbc
    49dc:	200005fc 	.word	0x200005fc

000049e0 <getStore()>:

uint16_t *getStore(void) {return store;}
    49e0:	4800      	ldr	r0, [pc, #0]	; (49e4 <getStore()+0x4>)
    49e2:	4770      	bx	lr
    49e4:	20024614 	.word	0x20024614

000049e8 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    49e8:	4a04      	ldr	r2, [pc, #16]	; (49fc <getDataCount()+0x14>)
    49ea:	4b05      	ldr	r3, [pc, #20]	; (4a00 <getDataCount()+0x18>)
    49ec:	6810      	ldr	r0, [r2, #0]
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	1ac0      	subs	r0, r0, r3
    49f2:	bf48      	it	mi
    49f4:	f500 5010 	addmi.w	r0, r0, #9216	; 0x2400
    49f8:	b280      	uxth	r0, r0
    49fa:	4770      	bx	lr
    49fc:	200245e8 	.word	0x200245e8
    4a00:	200245e4 	.word	0x200245e4

00004a04 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    4a04:	4b01      	ldr	r3, [pc, #4]	; (4a0c <queue_isBusy()+0x8>)
    4a06:	6818      	ldr	r0, [r3, #0]
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop
    4a0c:	200183d4 	.word	0x200183d4

00004a10 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    4a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    4a12:	2601      	movs	r6, #1
    4a14:	4d17      	ldr	r5, [pc, #92]	; (4a74 <pushData(unsigned long*)+0x64>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    4a16:	4c18      	ldr	r4, [pc, #96]	; (4a78 <pushData(unsigned long*)+0x68>)
  {
    4a18:	4601      	mov	r1, r0
    queue_busy=1;
    4a1a:	602e      	str	r6, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    4a1c:	6823      	ldr	r3, [r4, #0]
    4a1e:	4a17      	ldr	r2, [pc, #92]	; (4a7c <pushData(unsigned long*)+0x6c>)
    4a20:	4433      	add	r3, r6
    4a22:	4f17      	ldr	r7, [pc, #92]	; (4a80 <pushData(unsigned long*)+0x70>)
    4a24:	6810      	ldr	r0, [r2, #0]
    4a26:	fb87 2e03 	smull	r2, lr, r7, r3
    4a2a:	17da      	asrs	r2, r3, #31
    4a2c:	ebc2 22ee 	rsb	r2, r2, lr, asr #11
    4a30:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    4a34:	eba3 2382 	sub.w	r3, r3, r2, lsl #10
    4a38:	4283      	cmp	r3, r0
    4a3a:	d017      	beq.n	4a6c <pushData(unsigned long*)+0x5c>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    4a3c:	4b11      	ldr	r3, [pc, #68]	; (4a84 <pushData(unsigned long*)+0x74>)
    4a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a42:	6820      	ldr	r0, [r4, #0]
    4a44:	eb03 2040 	add.w	r0, r3, r0, lsl #9
    4a48:	f009 fda8 	bl	e59c <memcpy>
    tail = (tail+1)%MAXBUF;
    4a4c:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    4a4e:	4630      	mov	r0, r6
    tail = (tail+1)%MAXBUF;
    4a50:	3201      	adds	r2, #1
    4a52:	fb87 3702 	smull	r3, r7, r7, r2
    4a56:	17d3      	asrs	r3, r2, #31
    4a58:	ebc3 23e7 	rsb	r3, r3, r7, asr #11
    4a5c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4a60:	eba2 2383 	sub.w	r3, r2, r3, lsl #10
    queue_busy=0;
    4a64:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    4a66:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    4a68:	602a      	str	r2, [r5, #0]
  }
    4a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    4a6c:	2300      	movs	r3, #0
    4a6e:	4618      	mov	r0, r3
    4a70:	602b      	str	r3, [r5, #0]
  }
    4a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a74:	200183d4 	.word	0x200183d4
    4a78:	200245e8 	.word	0x200245e8
    4a7c:	200245e4 	.word	0x200245e4
    4a80:	38e38e39 	.word	0x38e38e39
    4a84:	70000000 	.word	0x70000000

00004a88 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    4a88:	b570      	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a8a:	4b13      	ldr	r3, [pc, #76]	; (4ad8 <pullData(unsigned long*)+0x50>)
    queue_busy=1;
    4a8c:	2401      	movs	r4, #1
    4a8e:	4e13      	ldr	r6, [pc, #76]	; (4adc <pullData(unsigned long*)+0x54>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a90:	4d13      	ldr	r5, [pc, #76]	; (4ae0 <pullData(unsigned long*)+0x58>)
    queue_busy=1;
    4a92:	6034      	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a94:	682a      	ldr	r2, [r5, #0]
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	429a      	cmp	r2, r3
    4a9a:	d018      	beq.n	4ace <pullData(unsigned long*)+0x46>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    4a9c:	4b11      	ldr	r3, [pc, #68]	; (4ae4 <pullData(unsigned long*)+0x5c>)
    4a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aa2:	6829      	ldr	r1, [r5, #0]
    4aa4:	eb03 2141 	add.w	r1, r3, r1, lsl #9
    4aa8:	f009 fd78 	bl	e59c <memcpy>
    head = (head+1)%MAXBUF;
    4aac:	682a      	ldr	r2, [r5, #0]
    4aae:	490e      	ldr	r1, [pc, #56]	; (4ae8 <pullData(unsigned long*)+0x60>)
    queue_busy=0;
    return 1; // signal success.
    4ab0:	4620      	mov	r0, r4
    head = (head+1)%MAXBUF;
    4ab2:	3201      	adds	r2, #1
    4ab4:	fb81 3102 	smull	r3, r1, r1, r2
    4ab8:	17d3      	asrs	r3, r2, #31
    4aba:	ebc3 23e1 	rsb	r3, r3, r1, asr #11
    4abe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4ac2:	eba2 2383 	sub.w	r3, r2, r3, lsl #10
    queue_busy=0;
    4ac6:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    4ac8:	602b      	str	r3, [r5, #0]
    queue_busy=0;
    4aca:	6032      	str	r2, [r6, #0]
  }
    4acc:	bd70      	pop	{r4, r5, r6, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4ace:	2300      	movs	r3, #0
    4ad0:	4618      	mov	r0, r3
    4ad2:	6033      	str	r3, [r6, #0]
  }
    4ad4:	bd70      	pop	{r4, r5, r6, pc}
    4ad6:	bf00      	nop
    4ad8:	200245e8 	.word	0x200245e8
    4adc:	200183d4 	.word	0x200183d4
    4ae0:	200245e4 	.word	0x200245e4
    4ae4:	70000000 	.word	0x70000000
    4ae8:	38e38e39 	.word	0x38e38e39

00004aec <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    4aec:	4a54      	ldr	r2, [pc, #336]	; (4c40 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    4aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4af2:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4af6:	f240 196d 	movw	r9, #365	; 0x16d
    4afa:	4e52      	ldr	r6, [pc, #328]	; (4c44 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4afc:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4afe:	4f52      	ldr	r7, [pc, #328]	; (4c48 <time2date(unsigned long, datetime_t*)+0x15c>)
    4b00:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4c5c <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    4b04:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4b08:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    4b0c:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4b0e:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    4b12:	4c4e      	ldr	r4, [pc, #312]	; (4c4c <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    4b14:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    4b18:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    4b1c:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4b20:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    4b22:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    4b26:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4b28:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    4b2c:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4b30:	4b47      	ldr	r3, [pc, #284]	; (4c50 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    4b32:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4b36:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4b3a:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    4b3c:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4b3e:	1ae2      	subs	r2, r4, r3
    4b40:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    4b44:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4b46:	089b      	lsrs	r3, r3, #2
    4b48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4b4c:	1ae4      	subs	r4, r4, r3
    4b4e:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4b50:	b2c3      	uxtb	r3, r0
    4b52:	f240 1c6d 	movw	ip, #365	; 0x16d
    4b56:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    4b5a:	f013 0403 	ands.w	r4, r3, #3
    4b5e:	fb06 f503 	mul.w	r5, r6, r3
    4b62:	d108      	bne.n	4b76 <time2date(unsigned long, datetime_t*)+0x8a>
    4b64:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    4b68:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    4b6c:	d303      	bcc.n	4b76 <time2date(unsigned long, datetime_t*)+0x8a>
    4b6e:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    4b72:	bf38      	it	cc
    4b74:	46cc      	movcc	ip, r9
    4b76:	4462      	add	r2, ip
    4b78:	3001      	adds	r0, #1
    4b7a:	4596      	cmp	lr, r2
    4b7c:	d2e8      	bcs.n	4b50 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b7e:	4d35      	ldr	r5, [pc, #212]	; (4c54 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    4b80:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b82:	fba5 0503 	umull	r0, r5, r5, r3
    4b86:	b3a4      	cbz	r4, 4bf2 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4b88:	096e      	lsrs	r6, r5, #5
    4b8a:	2764      	movs	r7, #100	; 0x64
    4b8c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4b90:	09ed      	lsrs	r5, r5, #7
    4b92:	fb07 3616 	mls	r6, r7, r6, r3
    4b96:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b9a:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    4b9e:	ebae 0e02 	sub.w	lr, lr, r2
    4ba2:	2300      	movs	r3, #0
    4ba4:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    4ba6:	4f2c      	ldr	r7, [pc, #176]	; (4c58 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    4ba8:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    4baa:	e00a      	b.n	4bc2 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    4bac:	f813 c007 	ldrb.w	ip, [r3, r7]
    4bb0:	4584      	cmp	ip, r0
    4bb2:	d837      	bhi.n	4c24 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    4bb4:	2a0c      	cmp	r2, #12
        time -= monthLength;
    4bb6:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    4bba:	d012      	beq.n	4be2 <time2date(unsigned long, datetime_t*)+0xf6>
    4bbc:	3201      	adds	r2, #1
    4bbe:	3301      	adds	r3, #1
    4bc0:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    4bc2:	2b01      	cmp	r3, #1
    4bc4:	fa5f fe83 	uxtb.w	lr, r3
    4bc8:	d1f0      	bne.n	4bac <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    4bca:	b91c      	cbnz	r4, 4bd4 <time2date(unsigned long, datetime_t*)+0xe8>
    4bcc:	b1f6      	cbz	r6, 4c0c <time2date(unsigned long, datetime_t*)+0x120>
    4bce:	f04f 0c1d 	mov.w	ip, #29
    4bd2:	e001      	b.n	4bd8 <time2date(unsigned long, datetime_t*)+0xec>
    4bd4:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    4bd8:	4560      	cmp	r0, ip
    4bda:	d32d      	bcc.n	4c38 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    4bdc:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    4be0:	e7ec      	b.n	4bbc <time2date(unsigned long, datetime_t*)+0xd0>
    4be2:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    4be6:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    4be8:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    4bec:	70c8      	strb	r0, [r1, #3]
  }
    4bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    4bf2:	2064      	movs	r0, #100	; 0x64
    4bf4:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4bf6:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    4bf8:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4bfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4c00:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    4c04:	b14e      	cbz	r6, 4c1a <time2date(unsigned long, datetime_t*)+0x12e>
    4c06:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    4c0a:	e7c8      	b.n	4b9e <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    4c0c:	2d00      	cmp	r5, #0
    4c0e:	bf14      	ite	ne
    4c10:	f04f 0c1c 	movne.w	ip, #28
    4c14:	f04f 0c1d 	moveq.w	ip, #29
    4c18:	e7de      	b.n	4bd8 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    4c1a:	2d00      	cmp	r5, #0
    4c1c:	d1bd      	bne.n	4b9a <time2date(unsigned long, datetime_t*)+0xae>
    4c1e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    4c22:	e7bc      	b.n	4b9e <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    4c24:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    4c28:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    4c2a:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    4c2e:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    4c30:	f881 e002 	strb.w	lr, [r1, #2]
  }
    4c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    4c38:	f04f 0e02 	mov.w	lr, #2
    4c3c:	e7d3      	b.n	4be6 <time2date(unsigned long, datetime_t*)+0xfa>
    4c3e:	bf00      	nop
    4c40:	88888889 	.word	0x88888889
    4c44:	c28f5c29 	.word	0xc28f5c29
    4c48:	028f5c28 	.word	0x028f5c28
    4c4c:	aaaaaaab 	.word	0xaaaaaaab
    4c50:	24924925 	.word	0x24924925
    4c54:	51eb851f 	.word	0x51eb851f
    4c58:	20000b40 	.word	0x20000b40
    4c5c:	00a3d70a 	.word	0x00a3d70a

00004c60 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    4c60:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    4c62:	4a35      	ldr	r2, [pc, #212]	; (4d38 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    4c64:	314e      	adds	r1, #78	; 0x4e
    4c66:	b2c9      	uxtb	r1, r1
  {
    4c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    4c6c:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    4c70:	b1e1      	cbz	r1, 4cac <date2time(datetime_t*)+0x4c>
    4c72:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    4c76:	f240 73b3 	movw	r3, #1971	; 0x7b3
    4c7a:	4d30      	ldr	r5, [pc, #192]	; (4d3c <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    4c7c:	4e30      	ldr	r6, [pc, #192]	; (4d40 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4c7e:	4f31      	ldr	r7, [pc, #196]	; (4d44 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    4c80:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 4d50 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    4c84:	4563      	cmp	r3, ip
    4c86:	fb05 f403 	mul.w	r4, r5, r3
    4c8a:	d00f      	beq.n	4cac <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    4c8c:	f013 0f03 	tst.w	r3, #3
    4c90:	f103 0301 	add.w	r3, r3, #1
    4c94:	d1f6      	bne.n	4c84 <date2time(datetime_t*)+0x24>
    4c96:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    4c9a:	d302      	bcc.n	4ca2 <date2time(datetime_t*)+0x42>
    4c9c:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    4ca0:	d3f0      	bcc.n	4c84 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    4ca2:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4ca4:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    4ca6:	fb05 f403 	mul.w	r4, r5, r3
    4caa:	d1ef      	bne.n	4c8c <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    4cac:	f990 e002 	ldrsb.w	lr, [r0, #2]
    4cb0:	f1be 0f01 	cmp.w	lr, #1
    4cb4:	dd29      	ble.n	4d0a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4cb6:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    4cba:	4e23      	ldr	r6, [pc, #140]	; (4d48 <date2time(datetime_t*)+0xe8>)
    4cbc:	2564      	movs	r5, #100	; 0x64
    4cbe:	f44f 74c8 	mov.w	r4, #400	; 0x190
    4cc2:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    4cc6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4d54 <date2time(datetime_t*)+0xf4>
    4cca:	4920      	ldr	r1, [pc, #128]	; (4d4c <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4ccc:	0977      	lsrs	r7, r6, #5
    4cce:	09f6      	lsrs	r6, r6, #7
    4cd0:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4cd4:	4d1b      	ldr	r5, [pc, #108]	; (4d44 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4cd6:	fb04 3616 	mls	r6, r4, r6, r3
    4cda:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    4cde:	2301      	movs	r3, #1
    4ce0:	e007      	b.n	4cf2 <date2time(datetime_t*)+0x92>
    4ce2:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4ce4:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    4ce8:	3101      	adds	r1, #1
    4cea:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4cec:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    4cf0:	d00b      	beq.n	4d0a <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4cf2:	2b02      	cmp	r3, #2
    4cf4:	d1f5      	bne.n	4ce2 <date2time(datetime_t*)+0x82>
    4cf6:	2c00      	cmp	r4, #0
    4cf8:	d1f3      	bne.n	4ce2 <date2time(datetime_t*)+0x82>
    4cfa:	b90f      	cbnz	r7, 4d00 <date2time(datetime_t*)+0xa0>
    4cfc:	2e00      	cmp	r6, #0
    4cfe:	d1f0      	bne.n	4ce2 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    4d00:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    4d02:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    4d04:	3101      	adds	r1, #1
    4d06:	4573      	cmp	r3, lr
    4d08:	d1f3      	bne.n	4cf2 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    4d0a:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    4d0e:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    4d12:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    4d16:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    4d1a:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    4d1e:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    4d20:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4d24:	f990 1003 	ldrsb.w	r1, [r0, #3]
    4d28:	4c06      	ldr	r4, [pc, #24]	; (4d44 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    4d2a:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4d2c:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    4d2e:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    4d32:	4410      	add	r0, r2
    4d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d38:	01e13380 	.word	0x01e13380
    4d3c:	c28f5c29 	.word	0xc28f5c29
    4d40:	028f5c28 	.word	0x028f5c28
    4d44:	00015180 	.word	0x00015180
    4d48:	51eb851f 	.word	0x51eb851f
    4d4c:	20000b40 	.word	0x20000b40
    4d50:	00a3d70a 	.word	0x00a3d70a
    4d54:	00263b80 	.word	0x00263b80

00004d58 <rtcSetup(unsigned char, unsigned char)>:

  #include "RV-3028-C7.h"
  RV3028 rtc;

  int16_t rtcSetup(uint8_t sda, uint8_t scl)
  {
    4d58:	b500      	push	{lr}
    Wire.begin();
    4d5a:	4811      	ldr	r0, [pc, #68]	; (4da0 <rtcSetup(unsigned char, unsigned char)+0x48>)
  {
    4d5c:	b083      	sub	sp, #12
    Wire.begin();
    4d5e:	f016 fac3 	bl	1b2e8 <___ZN7TwoWire5beginEv_veneer>
    if (rtc.begin() == false) {
    4d62:	2301      	movs	r3, #1
    4d64:	490e      	ldr	r1, [pc, #56]	; (4da0 <rtcSetup(unsigned char, unsigned char)+0x48>)
    4d66:	480f      	ldr	r0, [pc, #60]	; (4da4 <rtcSetup(unsigned char, unsigned char)+0x4c>)
    4d68:	461a      	mov	r2, r3
    4d6a:	9300      	str	r3, [sp, #0]
    4d6c:	f000 fccc 	bl	5708 <RV3028::begin(TwoWire&, bool, bool, bool)>
    4d70:	b950      	cbnz	r0, 4d88 <rtcSetup(unsigned char, unsigned char)+0x30>
    4d72:	210c      	movs	r1, #12
    4d74:	480c      	ldr	r0, [pc, #48]	; (4da8 <rtcSetup(unsigned char, unsigned char)+0x50>)
    4d76:	f00b f991 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d7a:	480c      	ldr	r0, [pc, #48]	; (4dac <rtcSetup(unsigned char, unsigned char)+0x54>)
    4d7c:	f008 fe08 	bl	d990 <Print::println()>
    {
      Serial.println("RTC online!");
    }

    return 1;
  }
    4d80:	2001      	movs	r0, #1
    4d82:	b003      	add	sp, #12
    4d84:	f85d fb04 	ldr.w	pc, [sp], #4
    4d88:	210b      	movs	r1, #11
    4d8a:	4809      	ldr	r0, [pc, #36]	; (4db0 <rtcSetup(unsigned char, unsigned char)+0x58>)
    4d8c:	f00b f986 	bl	1009c <usb_serial_write>
    4d90:	4806      	ldr	r0, [pc, #24]	; (4dac <rtcSetup(unsigned char, unsigned char)+0x54>)
    4d92:	f008 fdfd 	bl	d990 <Print::println()>
    4d96:	2001      	movs	r0, #1
    4d98:	b003      	add	sp, #12
    4d9a:	f85d fb04 	ldr.w	pc, [sp], #4
    4d9e:	bf00      	nop
    4da0:	20008bc4 	.word	0x20008bc4
    4da4:	2002540c 	.word	0x2002540c
    4da8:	20000810 	.word	0x20000810
    4dac:	20008bb4 	.word	0x20008bb4
    4db0:	20000820 	.word	0x20000820

00004db4 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    4db4:	b500      	push	{lr}
    4db6:	b083      	sub	sp, #12
    4db8:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    4dba:	f009 fe63 	bl	ea84 <rtc_get>
    4dbe:	9901      	ldr	r1, [sp, #4]
    4dc0:	f7ff fe94 	bl	4aec <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    4dc4:	2001      	movs	r0, #1
    4dc6:	b003      	add	sp, #12
    4dc8:	f85d fb04 	ldr.w	pc, [sp], #4

00004dcc <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    4dcc:	b570      	push	{r4, r5, r6, lr}
    4dce:	b082      	sub	sp, #8
    4dd0:	4614      	mov	r4, r2
    4dd2:	460d      	mov	r5, r1
    4dd4:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4dd6:	f009 fe55 	bl	ea84 <rtc_get>
    4dda:	4669      	mov	r1, sp
    4ddc:	f7ff fe86 	bl	4aec <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    4de0:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    4de4:	4608      	mov	r0, r1
    t.month=month;
    4de6:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    4dea:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    4dee:	f7ff ff37 	bl	4c60 <date2time(datetime_t*)>
    4df2:	f009 fe59 	bl	eaa8 <rtc_set>
    rtc_set_datetime(&t);
  }
    4df6:	b002      	add	sp, #8
    4df8:	bd70      	pop	{r4, r5, r6, pc}
    4dfa:	bf00      	nop

00004dfc <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    4dfc:	b570      	push	{r4, r5, r6, lr}
    4dfe:	b082      	sub	sp, #8
    4e00:	4614      	mov	r4, r2
    4e02:	460d      	mov	r5, r1
    4e04:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4e06:	f009 fe3d 	bl	ea84 <rtc_get>
    4e0a:	4669      	mov	r1, sp
    4e0c:	f7ff fe6e 	bl	4aec <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    4e10:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    4e14:	4608      	mov	r0, r1
    t.min=minutes;
    4e16:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    4e1a:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    4e1e:	f7ff ff1f 	bl	4c60 <date2time(datetime_t*)>
    4e22:	f009 fe41 	bl	eaa8 <rtc_set>
    rtc_set_datetime(&t);
  }
    4e26:	b002      	add	sp, #8
    4e28:	bd70      	pop	{r4, r5, r6, pc}
    4e2a:	bf00      	nop

00004e2c <rtcXferTime()>:

  void rtcXferTime(void)
  {
    4e2c:	b510      	push	{r4, lr}
    4e2e:	b086      	sub	sp, #24
    rtc.setUNIX(rtc_get());
    4e30:	f009 fe28 	bl	ea84 <rtc_get>
    4e34:	4601      	mov	r1, r0
    4e36:	4814      	ldr	r0, [pc, #80]	; (4e88 <rtcXferTime()+0x5c>)
    4e38:	f000 f868 	bl	4f0c <RV3028::setUNIX(unsigned long)>
    time2date(rtc_get(), t);
    4e3c:	f009 fe22 	bl	ea84 <rtc_get>
    4e40:	a904      	add	r1, sp, #16
    4e42:	f7ff fe53 	bl	4aec <time2date(unsigned long, datetime_t*)>
    datetime_t t;
    rtc_get_datetime(&t);
    if (rtc.setTime(t.sec, t.min, t.hour, t.day, t.day, t.month, t.year) == false) 
    4e46:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    4e4a:	f89d 1012 	ldrb.w	r1, [sp, #18]
    4e4e:	f89d 4013 	ldrb.w	r4, [sp, #19]
    4e52:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4e56:	f89d 2016 	ldrb.w	r2, [sp, #22]
    4e5a:	e9cd 1002 	strd	r1, r0, [sp, #8]
    4e5e:	e9cd 4400 	strd	r4, r4, [sp]
    4e62:	f89d 1017 	ldrb.w	r1, [sp, #23]
    4e66:	4808      	ldr	r0, [pc, #32]	; (4e88 <rtcXferTime()+0x5c>)
    4e68:	f000 fa30 	bl	52cc <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
    4e6c:	b108      	cbz	r0, 4e72 <rtcXferTime()+0x46>
    {
          Serial.println("Something went wrong setting the time");
    }
  }
    4e6e:	b006      	add	sp, #24
    4e70:	bd10      	pop	{r4, pc}
    4e72:	2125      	movs	r1, #37	; 0x25
    4e74:	4805      	ldr	r0, [pc, #20]	; (4e8c <rtcXferTime()+0x60>)
    4e76:	f00b f911 	bl	1009c <usb_serial_write>
    4e7a:	4805      	ldr	r0, [pc, #20]	; (4e90 <rtcXferTime()+0x64>)
    4e7c:	b006      	add	sp, #24
    4e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e82:	f008 bd85 	b.w	d990 <Print::println()>
    4e86:	bf00      	nop
    4e88:	2002540c 	.word	0x2002540c
    4e8c:	200004d0 	.word	0x200004d0
    4e90:	20008bb4 	.word	0x20008bb4

00004e94 <rtcSync()>:
  void rtcSync(void)
  {
    4e94:	b510      	push	{r4, lr}
    uint32_t to;
    to=rtc_get();
    4e96:	f009 fdf5 	bl	ea84 <rtc_get>
    4e9a:	4604      	mov	r4, r0
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4e9c:	4806      	ldr	r0, [pc, #24]	; (4eb8 <rtcSync()+0x24>)
    4e9e:	f000 fb39 	bl	5514 <RV3028::getUNIX()>
    4ea2:	42a0      	cmp	r0, r4
    4ea4:	d800      	bhi.n	4ea8 <rtcSync()+0x14>
  }
    4ea6:	bd10      	pop	{r4, pc}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4ea8:	4803      	ldr	r0, [pc, #12]	; (4eb8 <rtcSync()+0x24>)
    4eaa:	f000 fb33 	bl	5514 <RV3028::getUNIX()>
  }
    4eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4eb2:	f009 bdf9 	b.w	eaa8 <rtc_set>
    4eb6:	bf00      	nop
    4eb8:	2002540c 	.word	0x2002540c

00004ebc <rtcGetTimestamp()>:

  char * rtcGetTimestamp(void)
  { 
    4ebc:	b510      	push	{r4, lr}
    //PRINT TIME
    if (rtc.updateTime() == false) //Updates the time variables from RTC
    4ebe:	4809      	ldr	r0, [pc, #36]	; (4ee4 <rtcGetTimestamp()+0x28>)
    4ec0:	f000 fb10 	bl	54e4 <RV3028::updateTime()>
    4ec4:	b120      	cbz	r0, 4ed0 <rtcGetTimestamp()+0x14>
    {
      Serial.println("RTC failed to update");
      return 0;
    } else {
      return rtc.stringTimeStamp();
    4ec6:	4807      	ldr	r0, [pc, #28]	; (4ee4 <rtcGetTimestamp()+0x28>)
    }
  }
    4ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return rtc.stringTimeStamp();
    4ecc:	f000 b88a 	b.w	4fe4 <RV3028::stringTimeStamp()>
    4ed0:	4604      	mov	r4, r0
    4ed2:	2114      	movs	r1, #20
    4ed4:	4804      	ldr	r0, [pc, #16]	; (4ee8 <rtcGetTimestamp()+0x2c>)
    4ed6:	f00b f8e1 	bl	1009c <usb_serial_write>
    4eda:	4804      	ldr	r0, [pc, #16]	; (4eec <rtcGetTimestamp()+0x30>)
    4edc:	f008 fd58 	bl	d990 <Print::println()>
  }
    4ee0:	4620      	mov	r0, r4
    4ee2:	bd10      	pop	{r4, pc}
    4ee4:	2002540c 	.word	0x2002540c
    4ee8:	20000524 	.word	0x20000524
    4eec:	20008bb4 	.word	0x20008bb4

00004ef0 <_GLOBAL__sub_I__Z7initRTChh>:
  RV3028 rtc;
    4ef0:	4801      	ldr	r0, [pc, #4]	; (4ef8 <_GLOBAL__sub_I__Z7initRTChh+0x8>)
    4ef2:	f000 b809 	b.w	4f08 <RV3028::RV3028()>
    4ef6:	bf00      	nop
    4ef8:	2002540c 	.word	0x2002540c

00004efc <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    4efc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4f00:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4f04:	1a10      	subs	r0, r2, r0
    4f06:	4770      	bx	lr

00004f08 <RV3028::RV3028()>:
#define BUILD_SECOND ((BUILD_SECOND_0 * 10) + BUILD_SECOND_1)

RV3028::RV3028(void)
{

}
    4f08:	4770      	bx	lr
    4f0a:	bf00      	nop

00004f0c <RV3028::setUNIX(unsigned long)>:
	}
}

//ATTENTION: Real Time and UNIX Time are INDEPENDENT!
bool RV3028::setUNIX(uint32_t value)
{
    4f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return(true);
}

bool RV3028::writeMultipleRegisters(uint8_t addr, uint8_t * values, uint8_t len)
{
	_i2cPort->beginTransmission(RV3028_ADDR);
    4f0e:	6883      	ldr	r3, [r0, #8]
		transmitting = 1;
    4f10:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    4f12:	24a4      	movs	r4, #164	; 0xa4
{
    4f14:	4607      	mov	r7, r0
		transmitting = 1;
    4f16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    4f1a:	b083      	sub	sp, #12
		txBuffer[0] = (address << 1);
    4f1c:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
	unix_reg[0] = value;
    4f20:	b2cd      	uxtb	r5, r1
		txBufferLength = 1;
    4f22:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    4f26:	ac01      	add	r4, sp, #4
    4f28:	6880      	ldr	r0, [r0, #8]
    4f2a:	f10d 0607 	add.w	r6, sp, #7
	unix_reg[0] = value;
    4f2e:	9101      	str	r1, [sp, #4]
	_i2cPort->write(addr);
    4f30:	211b      	movs	r1, #27
    4f32:	6803      	ldr	r3, [r0, #0]
    4f34:	681b      	ldr	r3, [r3, #0]
    4f36:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    4f38:	e001      	b.n	4f3e <RV3028::setUNIX(unsigned long)+0x32>
	{
		_i2cPort->write(values[i]);
    4f3a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    4f3e:	68b8      	ldr	r0, [r7, #8]
    4f40:	4629      	mov	r1, r5
    4f42:	6803      	ldr	r3, [r0, #0]
    4f44:	681b      	ldr	r3, [r3, #0]
    4f46:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    4f48:	42a6      	cmp	r6, r4
    4f4a:	d1f6      	bne.n	4f3a <RV3028::setUNIX(unsigned long)+0x2e>
		return endTransmission(1);
    4f4c:	2101      	movs	r1, #1
    4f4e:	68b8      	ldr	r0, [r7, #8]
    4f50:	f008 fa52 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
}
    4f54:	fab0 f080 	clz	r0, r0
    4f58:	0940      	lsrs	r0, r0, #5
    4f5a:	b003      	add	sp, #12
    4f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f5e:	bf00      	nop

00004f60 <RV3028::readRegister(unsigned char)>:
{
    4f60:	b538      	push	{r3, r4, r5, lr}
		txBuffer[0] = (address << 1);
    4f62:	22a4      	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    4f64:	6883      	ldr	r3, [r0, #8]
		transmitting = 1;
    4f66:	2501      	movs	r5, #1
{
    4f68:	4604      	mov	r4, r0
		txBuffer[0] = (address << 1);
    4f6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    4f6e:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    4f72:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    4f76:	6880      	ldr	r0, [r0, #8]
    4f78:	6803      	ldr	r3, [r0, #0]
    4f7a:	681b      	ldr	r3, [r3, #0]
    4f7c:	4798      	blx	r3
		return endTransmission(1);
    4f7e:	4629      	mov	r1, r5
    4f80:	68a0      	ldr	r0, [r4, #8]
    4f82:	f008 fa39 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    4f86:	462b      	mov	r3, r5
    4f88:	462a      	mov	r2, r5
    4f8a:	2152      	movs	r1, #82	; 0x52
    4f8c:	68a0      	ldr	r0, [r4, #8]
    4f8e:	f008 fab3 	bl	d4f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (_i2cPort->available()) {
    4f92:	68a0      	ldr	r0, [r4, #8]
    4f94:	4a11      	ldr	r2, [pc, #68]	; (4fdc <RV3028::readRegister(unsigned char)+0x7c>)
    4f96:	6803      	ldr	r3, [r0, #0]
    4f98:	691b      	ldr	r3, [r3, #16]
    4f9a:	4293      	cmp	r3, r2
    4f9c:	d119      	bne.n	4fd2 <RV3028::readRegister(unsigned char)+0x72>
		return rxBufferLength - rxBufferIndex;
    4f9e:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    4fa2:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    4fa6:	1a98      	subs	r0, r3, r2
    4fa8:	b188      	cbz	r0, 4fce <RV3028::readRegister(unsigned char)+0x6e>
		return _i2cPort->read();
    4faa:	68a0      	ldr	r0, [r4, #8]
    4fac:	4a0c      	ldr	r2, [pc, #48]	; (4fe0 <RV3028::readRegister(unsigned char)+0x80>)
    4fae:	6803      	ldr	r3, [r0, #0]
    4fb0:	695b      	ldr	r3, [r3, #20]
    4fb2:	4293      	cmp	r3, r2
    4fb4:	d10f      	bne.n	4fd6 <RV3028::readRegister(unsigned char)+0x76>
		if (rxBufferIndex >= rxBufferLength) return -1;
    4fb6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    4fba:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4fbe:	429a      	cmp	r2, r3
    4fc0:	d905      	bls.n	4fce <RV3028::readRegister(unsigned char)+0x6e>
		return rxBuffer[rxBufferIndex++];
    4fc2:	1c5a      	adds	r2, r3, #1
    4fc4:	4403      	add	r3, r0
    4fc6:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    4fca:	7e98      	ldrb	r0, [r3, #26]
}
    4fcc:	bd38      	pop	{r3, r4, r5, pc}
		return (0xFF); //Error
    4fce:	20ff      	movs	r0, #255	; 0xff
}
    4fd0:	bd38      	pop	{r3, r4, r5, pc}
	if (_i2cPort->available()) {
    4fd2:	4798      	blx	r3
    4fd4:	e7e8      	b.n	4fa8 <RV3028::readRegister(unsigned char)+0x48>
		return _i2cPort->read();
    4fd6:	4798      	blx	r3
    4fd8:	b2c0      	uxtb	r0, r0
}
    4fda:	bd38      	pop	{r3, r4, r5, pc}
    4fdc:	00004efd 	.word	0x00004efd
    4fe0:	00001f49 	.word	0x00001f49

00004fe4 <RV3028::stringTimeStamp()>:
{
    4fe4:	b530      	push	{r4, r5, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4fe6:	2110      	movs	r1, #16
{
    4fe8:	b087      	sub	sp, #28
    4fea:	4604      	mov	r4, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4fec:	f7ff ffb8 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    4ff0:	0782      	lsls	r2, r0, #30
    4ff2:	d552      	bpl.n	509a <RV3028::stringTimeStamp()+0xb6>
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    4ff4:	2102      	movs	r1, #2
    4ff6:	4620      	mov	r0, r4
    4ff8:	f7ff ffb2 	bl	4f60 <RV3028::readRegister(unsigned char)>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4ffc:	2110      	movs	r1, #16
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    4ffe:	4605      	mov	r5, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5000:	4620      	mov	r0, r4
    5002:	f7ff ffad 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    5006:	0783      	lsls	r3, r0, #30
    5008:	f100 808c 	bmi.w	5124 <RV3028::stringTimeStamp()+0x140>
    500c:	2341      	movs	r3, #65	; 0x41
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    500e:	9304      	str	r3, [sp, #16]
    5010:	f894 e001 	ldrb.w	lr, [r4, #1]
    5014:	f894 c000 	ldrb.w	ip, [r4]
	return ((val / 0x10) * 10) + (val % 0x10);
    5018:	ea4f 151e 	mov.w	r5, lr, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    501c:	7921      	ldrb	r1, [r4, #4]
    501e:	78a0      	ldrb	r0, [r4, #2]
    5020:	79a2      	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    5022:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5026:	7963      	ldrb	r3, [r4, #5]
	return ((val / 0x10) * 10) + (val % 0x10);
    5028:	f00e 040f 	and.w	r4, lr, #15
    502c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    5030:	ea4f 151c 	mov.w	r5, ip, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5034:	b2e4      	uxtb	r4, r4
	return ((val / 0x10) * 10) + (val % 0x10);
    5036:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    503a:	9402      	str	r4, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    503c:	f00c 040f 	and.w	r4, ip, #15
    5040:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5044:	b2e4      	uxtb	r4, r4
    5046:	9403      	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    5048:	0904      	lsrs	r4, r0, #4
    504a:	f000 000f 	and.w	r0, r0, #15
    504e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5052:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    5056:	090c      	lsrs	r4, r1, #4
    5058:	f001 010f 	and.w	r1, r1, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    505c:	b2c0      	uxtb	r0, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    505e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5062:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5066:	091c      	lsrs	r4, r3, #4
    5068:	f003 030f 	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    506c:	b2c9      	uxtb	r1, r1
	return ((val / 0x10) * 10) + (val % 0x10);
    506e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5072:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    5076:	0914      	lsrs	r4, r2, #4
    5078:	f002 020f 	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    507c:	b2db      	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    507e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5082:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5086:	e9cd 1000 	strd	r1, r0, [sp]
    508a:	b2d2      	uxtb	r2, r2
    508c:	4928      	ldr	r1, [pc, #160]	; (5130 <RV3028::stringTimeStamp()+0x14c>)
    508e:	4829      	ldr	r0, [pc, #164]	; (5134 <RV3028::stringTimeStamp()+0x150>)
    5090:	f00d f96c 	bl	1236c <sprintf>
}
    5094:	4827      	ldr	r0, [pc, #156]	; (5134 <RV3028::stringTimeStamp()+0x150>)
    5096:	b007      	add	sp, #28
    5098:	bd30      	pop	{r4, r5, pc}
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    509a:	f894 e000 	ldrb.w	lr, [r4]
    509e:	f894 c001 	ldrb.w	ip, [r4, #1]
	return ((val / 0x10) * 10) + (val % 0x10);
    50a2:	ea4f 151e 	mov.w	r5, lr, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50a6:	7921      	ldrb	r1, [r4, #4]
    50a8:	78a0      	ldrb	r0, [r4, #2]
    50aa:	79a2      	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    50ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50b0:	7963      	ldrb	r3, [r4, #5]
	return ((val / 0x10) * 10) + (val % 0x10);
    50b2:	f00e 040f 	and.w	r4, lr, #15
    50b6:	ea4f 1e1c 	mov.w	lr, ip, lsr #4
    50ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    50be:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50c2:	b2e4      	uxtb	r4, r4
    50c4:	9403      	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    50c6:	f00c 040f 	and.w	r4, ip, #15
    50ca:	eb04 044e 	add.w	r4, r4, lr, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50ce:	b2e4      	uxtb	r4, r4
    50d0:	9402      	str	r4, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    50d2:	0904      	lsrs	r4, r0, #4
    50d4:	f000 000f 	and.w	r0, r0, #15
    50d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    50dc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    50e0:	090c      	lsrs	r4, r1, #4
    50e2:	f001 010f 	and.w	r1, r1, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50e6:	b2c0      	uxtb	r0, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    50e8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    50ec:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    50f0:	091c      	lsrs	r4, r3, #4
    50f2:	f003 030f 	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50f6:	b2c9      	uxtb	r1, r1
	return ((val / 0x10) * 10) + (val % 0x10);
    50f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    50fc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    5100:	0914      	lsrs	r4, r2, #4
    5102:	f002 020f 	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    5106:	b2db      	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    5108:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    510c:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    5110:	e9cd 1000 	strd	r1, r0, [sp]
    5114:	b2d2      	uxtb	r2, r2
    5116:	4908      	ldr	r1, [pc, #32]	; (5138 <RV3028::stringTimeStamp()+0x154>)
    5118:	4806      	ldr	r0, [pc, #24]	; (5134 <RV3028::stringTimeStamp()+0x150>)
    511a:	f00d f927 	bl	1236c <sprintf>
}
    511e:	4805      	ldr	r0, [pc, #20]	; (5134 <RV3028::stringTimeStamp()+0x150>)
    5120:	b007      	add	sp, #28
    5122:	bd30      	pop	{r4, r5, pc}
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    5124:	f015 0f20 	tst.w	r5, #32
    5128:	bf0c      	ite	eq
    512a:	2341      	moveq	r3, #65	; 0x41
    512c:	2350      	movne	r3, #80	; 0x50
    512e:	e76e      	b.n	500e <RV3028::stringTimeStamp()+0x2a>
    5130:	20000c08 	.word	0x20000c08
    5134:	20024dac 	.word	0x20024dac
    5138:	20000c38 	.word	0x20000c38

0000513c <RV3028::writeRegister(unsigned char, unsigned char)>:
{
    513c:	b570      	push	{r4, r5, r6, lr}
	_i2cPort->beginTransmission(RV3028_ADDR);
    513e:	6883      	ldr	r3, [r0, #8]
		txBuffer[0] = (address << 1);
    5140:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
		transmitting = 1;
    5144:	2501      	movs	r5, #1
{
    5146:	4604      	mov	r4, r0
		txBuffer[0] = (address << 1);
    5148:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
    514c:	4616      	mov	r6, r2
		transmitting = 1;
    514e:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    5152:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    5156:	6880      	ldr	r0, [r0, #8]
    5158:	6803      	ldr	r3, [r0, #0]
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	4798      	blx	r3
	_i2cPort->write(val);
    515e:	68a0      	ldr	r0, [r4, #8]
    5160:	4631      	mov	r1, r6
    5162:	6803      	ldr	r3, [r0, #0]
    5164:	681b      	ldr	r3, [r3, #0]
    5166:	4798      	blx	r3
		return endTransmission(1);
    5168:	4629      	mov	r1, r5
    516a:	68a0      	ldr	r0, [r4, #8]
    516c:	f008 f944 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
}
    5170:	fab0 f080 	clz	r0, r0
    5174:	0940      	lsrs	r0, r0, #5
    5176:	bd70      	pop	{r4, r5, r6, pc}

00005178 <RV3028::set12Hour()>:
{
    5178:	b538      	push	{r3, r4, r5, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    517a:	2110      	movs	r1, #16
{
    517c:	4605      	mov	r5, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    517e:	f7ff feef 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour() == false)
    5182:	0783      	lsls	r3, r0, #30
    5184:	d500      	bpl.n	5188 <RV3028::set12Hour()+0x10>
}
    5186:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t hour = BCDtoDEC(readRegister(RV3028_HOURS)); //Get the current hour in the RTC
    5188:	2102      	movs	r1, #2
    518a:	4628      	mov	r0, r5
    518c:	f7ff fee8 	bl	4f60 <RV3028::readRegister(unsigned char)>
    5190:	4603      	mov	r3, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    5192:	2110      	movs	r1, #16
    5194:	4628      	mov	r0, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    5196:	091a      	lsrs	r2, r3, #4
    5198:	f003 040f 	and.w	r4, r3, #15
    519c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    51a0:	eb04 0442 	add.w	r4, r4, r2, lsl #1
		uint8_t setting = readRegister(RV3028_CTRL2);
    51a4:	f7ff fedc 	bl	4f60 <RV3028::readRegister(unsigned char)>
    51a8:	4602      	mov	r2, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    51aa:	b2e4      	uxtb	r4, r4
		writeRegister(RV3028_CTRL2, setting);
    51ac:	2110      	movs	r1, #16
		setting |= (1 << CTRL2_12_24);
    51ae:	f042 0202 	orr.w	r2, r2, #2
		writeRegister(RV3028_CTRL2, setting);
    51b2:	4628      	mov	r0, r5
    51b4:	b2d2      	uxtb	r2, r2
    51b6:	f7ff ffc1 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 0)
    51ba:	b1bc      	cbz	r4, 51ec <RV3028::set12Hour()+0x74>
		else if (hour == 12)
    51bc:	2c0c      	cmp	r4, #12
    51be:	d01c      	beq.n	51fa <RV3028::set12Hour()+0x82>
		else if (hour > 12)
    51c0:	d91d      	bls.n	51fe <RV3028::set12Hour()+0x86>
			hour -= 12;
    51c2:	3c0c      	subs	r4, #12
	return ((val / 10) * 0x10) + (val % 10);
    51c4:	4b14      	ldr	r3, [pc, #80]	; (5218 <RV3028::set12Hour()+0xa0>)
			hour -= 12;
    51c6:	b2e4      	uxtb	r4, r4
	return ((val / 10) * 0x10) + (val % 10);
    51c8:	fba3 2304 	umull	r2, r3, r3, r4
    51cc:	08db      	lsrs	r3, r3, #3
    51ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    51d2:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    51d6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    51da:	f042 0220 	orr.w	r2, r2, #32
    51de:	b2d2      	uxtb	r2, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    51e0:	4628      	mov	r0, r5
    51e2:	2102      	movs	r1, #2
}
    51e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    51e8:	f7ff bfa8 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    51ec:	4628      	mov	r0, r5
	return ((val / 10) * 0x10) + (val % 10);
    51ee:	2212      	movs	r2, #18
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    51f0:	2102      	movs	r1, #2
}
    51f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    51f6:	f7ff bfa1 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    51fa:	2232      	movs	r2, #50	; 0x32
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    51fc:	e7f0      	b.n	51e0 <RV3028::set12Hour()+0x68>
	return ((val / 10) * 0x10) + (val % 10);
    51fe:	4b06      	ldr	r3, [pc, #24]	; (5218 <RV3028::set12Hour()+0xa0>)
    5200:	fba3 2304 	umull	r2, r3, r3, r4
    5204:	08db      	lsrs	r3, r3, #3
    5206:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    520a:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    520e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    5212:	b2d2      	uxtb	r2, r2
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    5214:	e7e4      	b.n	51e0 <RV3028::set12Hour()+0x68>
    5216:	bf00      	nop
    5218:	cccccccd 	.word	0xcccccccd

0000521c <RV3028::set24Hour() [clone .part.0]>:
void RV3028::set24Hour()
    521c:	b538      	push	{r3, r4, r5, lr}
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    521e:	2102      	movs	r1, #2
void RV3028::set24Hour()
    5220:	4605      	mov	r5, r0
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    5222:	f7ff fe9d 	bl	4f60 <RV3028::readRegister(unsigned char)>
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    5226:	f010 0f20 	tst.w	r0, #32
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    522a:	4604      	mov	r4, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    522c:	f04f 0110 	mov.w	r1, #16
    5230:	4628      	mov	r0, r5
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    5232:	d028      	beq.n	5286 <RV3028::set24Hour() [clone .part.0]+0x6a>
		uint8_t setting = readRegister(RV3028_CTRL2);
    5234:	f7ff fe94 	bl	4f60 <RV3028::readRegister(unsigned char)>
    5238:	4602      	mov	r2, r0
		writeRegister(RV3028_CTRL2, setting);
    523a:	2110      	movs	r1, #16
    523c:	4628      	mov	r0, r5
    523e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    5242:	f7ff ff7b 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    5246:	0923      	lsrs	r3, r4, #4
    5248:	f004 040f 	and.w	r4, r4, #15
    524c:	f003 030d 	and.w	r3, r3, #13
    5250:	340c      	adds	r4, #12
    5252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (pm == true) hour += 12; //2PM becomes 14
    5256:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    525a:	b2e4      	uxtb	r4, r4
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    525c:	2c0c      	cmp	r4, #12
    525e:	d025      	beq.n	52ac <RV3028::set24Hour() [clone .part.0]+0x90>
		if (hour == 24) hour = 12; //12PM becomes 24, but should really be 12
    5260:	2c18      	cmp	r4, #24
    5262:	d02a      	beq.n	52ba <RV3028::set24Hour() [clone .part.0]+0x9e>
	return ((val / 10) * 0x10) + (val % 10);
    5264:	4b18      	ldr	r3, [pc, #96]	; (52c8 <RV3028::set24Hour() [clone .part.0]+0xac>)
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5266:	4628      	mov	r0, r5
    5268:	2102      	movs	r1, #2
	return ((val / 10) * 0x10) + (val % 10);
    526a:	fba3 2304 	umull	r2, r3, r3, r4
    526e:	08db      	lsrs	r3, r3, #3
    5270:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5274:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    5278:	eb02 1203 	add.w	r2, r2, r3, lsl #4
}
    527c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ((val / 10) * 0x10) + (val % 10);
    5280:	b2d2      	uxtb	r2, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5282:	f7ff bf5b 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
		uint8_t setting = readRegister(RV3028_CTRL2);
    5286:	f7ff fe6b 	bl	4f60 <RV3028::readRegister(unsigned char)>
    528a:	4602      	mov	r2, r0
		writeRegister(RV3028_CTRL2, setting);
    528c:	2110      	movs	r1, #16
    528e:	4628      	mov	r0, r5
    5290:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    5294:	f7ff ff52 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    5298:	0923      	lsrs	r3, r4, #4
    529a:	f004 040f 	and.w	r4, r4, #15
    529e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    52a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    52a6:	b2e4      	uxtb	r4, r4
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    52a8:	2c0c      	cmp	r4, #12
    52aa:	d1d9      	bne.n	5260 <RV3028::set24Hour() [clone .part.0]+0x44>
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    52ac:	4628      	mov	r0, r5
    52ae:	2200      	movs	r2, #0
    52b0:	2102      	movs	r1, #2
}
    52b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    52b6:	f7ff bf41 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    52ba:	4628      	mov	r0, r5
    52bc:	2212      	movs	r2, #18
    52be:	2102      	movs	r1, #2
}
    52c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    52c4:	f7ff bf3a 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    52c8:	cccccccd 	.word	0xcccccccd

000052cc <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
{
    52cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52d0:	b085      	sub	sp, #20
    52d2:	4604      	mov	r4, r0
    52d4:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    52d8:	f89d e040 	ldrb.w	lr, [sp, #64]	; 0x40
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    52dc:	3530      	adds	r5, #48	; 0x30
{
    52de:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    52e2:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    52e6:	b2ed      	uxtb	r5, r5
{
    52e8:	f8cd e004 	str.w	lr, [sp, #4]
    52ec:	9700      	str	r7, [sp, #0]
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    52ee:	9502      	str	r5, [sp, #8]
	return ((val / 10) * 0x10) + (val % 10);
    52f0:	4d56      	ldr	r5, [pc, #344]	; (544c <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x180>)
    52f2:	fba5 6901 	umull	r6, r9, r5, r1
    52f6:	fba5 6802 	umull	r6, r8, r5, r2
    52fa:	fba5 6703 	umull	r6, r7, r5, r3
    52fe:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    5302:	fba5 e60c 	umull	lr, r6, r5, ip
    5306:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    530a:	08ff      	lsrs	r7, r7, #3
    530c:	08f6      	lsrs	r6, r6, #3
    530e:	9603      	str	r6, [sp, #12]
    5310:	9e00      	ldr	r6, [sp, #0]
    5312:	fba5 ae06 	umull	sl, lr, r5, r6
    5316:	9e01      	ldr	r6, [sp, #4]
    5318:	fba5 ba06 	umull	fp, sl, r5, r6
    531c:	9e02      	ldr	r6, [sp, #8]
    531e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    5322:	fba5 5b06 	umull	r5, fp, r5, r6
    5326:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    532a:	ea4f 05db 	mov.w	r5, fp, lsr #3
    532e:	eb09 0b89 	add.w	fp, r9, r9, lsl #2
    5332:	eba1 014b 	sub.w	r1, r1, fp, lsl #1
    5336:	eb01 1109 	add.w	r1, r1, r9, lsl #4
	_time[TIME_SECONDS] = DECtoBCD(sec);
    533a:	7001      	strb	r1, [r0, #0]
	return ((val / 10) * 0x10) + (val % 10);
    533c:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    5340:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5344:	2110      	movs	r1, #16
	return ((val / 10) * 0x10) + (val % 10);
    5346:	eb02 1208 	add.w	r2, r2, r8, lsl #4
	_time[TIME_MINUTES] = DECtoBCD(min);
    534a:	7042      	strb	r2, [r0, #1]
	return ((val / 10) * 0x10) + (val % 10);
    534c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
    5350:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    5354:	9a03      	ldr	r2, [sp, #12]
    5356:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    535a:	9f00      	ldr	r7, [sp, #0]
	_time[TIME_HOURS] = DECtoBCD(hour);
    535c:	7083      	strb	r3, [r0, #2]
	return ((val / 10) * 0x10) + (val % 10);
    535e:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5362:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
    5366:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
    536a:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    536e:	9a01      	ldr	r2, [sp, #4]
    5370:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
	_time[TIME_WEEKDAY] = DECtoBCD(weekday);
    5374:	f880 c003 	strb.w	ip, [r0, #3]
	return ((val / 10) * 0x10) + (val % 10);
    5378:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	_time[TIME_DATE] = DECtoBCD(date);
    537c:	7103      	strb	r3, [r0, #4]
	return ((val / 10) * 0x10) + (val % 10);
    537e:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    5382:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    5386:	eb03 130a 	add.w	r3, r3, sl, lsl #4
	_time[TIME_MONTH] = DECtoBCD(month);
    538a:	7143      	strb	r3, [r0, #5]
	return ((val / 10) * 0x10) + (val % 10);
    538c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    5390:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    5394:	eb03 1305 	add.w	r3, r3, r5, lsl #4
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    5398:	7183      	strb	r3, [r0, #6]
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    539a:	f7ff fde1 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour())
    539e:	f010 0102 	ands.w	r1, r0, #2
    53a2:	d02c      	beq.n	53fe <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x132>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    53a4:	2110      	movs	r1, #16
    53a6:	4620      	mov	r0, r4
    53a8:	f7ff fdda 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    53ac:	0783      	lsls	r3, r0, #30
    53ae:	d448      	bmi.n	5442 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x176>
	_i2cPort->beginTransmission(RV3028_ADDR);
    53b0:	68a3      	ldr	r3, [r4, #8]
		transmitting = 1;
    53b2:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    53b4:	21a4      	movs	r1, #164	; 0xa4
    53b6:	1e65      	subs	r5, r4, #1
		transmitting = 1;
    53b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    53bc:	1da6      	adds	r6, r4, #6
		txBuffer[0] = (address << 1);
    53be:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    53c2:	2100      	movs	r1, #0
		txBufferLength = 1;
    53c4:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
    53c8:	68a0      	ldr	r0, [r4, #8]
    53ca:	6803      	ldr	r3, [r0, #0]
    53cc:	681b      	ldr	r3, [r3, #0]
    53ce:	4798      	blx	r3
		_i2cPort->write(values[i]);
    53d0:	68a0      	ldr	r0, [r4, #8]
    53d2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    53d6:	6803      	ldr	r3, [r0, #0]
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    53dc:	42ae      	cmp	r6, r5
    53de:	d1f7      	bne.n	53d0 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x104>
		return endTransmission(1);
    53e0:	2101      	movs	r1, #1
    53e2:	68a0      	ldr	r0, [r4, #8]
    53e4:	f008 f808 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
    53e8:	4603      	mov	r3, r0
		set12Hour();
    53ea:	4620      	mov	r0, r4
	}

	if (_i2cPort->endTransmission() != 0)
    53ec:	fab3 f483 	clz	r4, r3
		set12Hour();
    53f0:	f7ff fec2 	bl	5178 <RV3028::set12Hour()>
	if (_i2cPort->endTransmission() != 0)
    53f4:	0964      	lsrs	r4, r4, #5
}
    53f6:	4620      	mov	r0, r4
    53f8:	b005      	add	sp, #20
    53fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_i2cPort->beginTransmission(RV3028_ADDR);
    53fe:	68a3      	ldr	r3, [r4, #8]
		transmitting = 1;
    5400:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    5402:	20a4      	movs	r0, #164	; 0xa4
    5404:	1e65      	subs	r5, r4, #1
		transmitting = 1;
    5406:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    540a:	1da6      	adds	r6, r4, #6
		txBufferLength = 1;
    540c:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    5410:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    5414:	68a0      	ldr	r0, [r4, #8]
    5416:	6803      	ldr	r3, [r0, #0]
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	4798      	blx	r3
		_i2cPort->write(values[i]);
    541c:	68a0      	ldr	r0, [r4, #8]
    541e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5422:	6803      	ldr	r3, [r0, #0]
    5424:	681b      	ldr	r3, [r3, #0]
    5426:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    5428:	42b5      	cmp	r5, r6
    542a:	d1f7      	bne.n	541c <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x150>
		return endTransmission(1);
    542c:	2101      	movs	r1, #1
    542e:	68a0      	ldr	r0, [r4, #8]
    5430:	f007 ffe2 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    5434:	fab0 f480 	clz	r4, r0
    5438:	0964      	lsrs	r4, r4, #5
}
    543a:	4620      	mov	r0, r4
    543c:	b005      	add	sp, #20
    543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5442:	4620      	mov	r0, r4
    5444:	f7ff feea 	bl	521c <RV3028::set24Hour() [clone .part.0]>
    5448:	e7b2      	b.n	53b0 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe4>
    544a:	bf00      	nop
    544c:	cccccccd 	.word	0xcccccccd

00005450 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:
{
    5450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		transmitting = 1;
    5454:	2401      	movs	r4, #1
    5456:	4690      	mov	r8, r2
    5458:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    545a:	22a4      	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    545c:	6883      	ldr	r3, [r0, #8]
{
    545e:	4605      	mov	r5, r0
		transmitting = 1;
    5460:	f883 4130 	strb.w	r4, [r3, #304]	; 0x130
		txBufferLength = 1;
    5464:	f883 412f 	strb.w	r4, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    5468:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    546c:	6880      	ldr	r0, [r0, #8]
    546e:	6803      	ldr	r3, [r0, #0]
    5470:	681b      	ldr	r3, [r3, #0]
    5472:	4798      	blx	r3
		return endTransmission(1);
    5474:	4621      	mov	r1, r4
    5476:	68a8      	ldr	r0, [r5, #8]
    5478:	f007 ffbe 	bl	d3f8 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    547c:	b110      	cbz	r0, 5484 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x34>
		return (false); //Error: Sensor did not ack
    547e:	2000      	movs	r0, #0
}
    5480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return requestFrom(address, quantity, (uint8_t)1);
    5484:	4623      	mov	r3, r4
    5486:	4632      	mov	r2, r6
    5488:	2152      	movs	r1, #82	; 0x52
    548a:	68a8      	ldr	r0, [r5, #8]
    548c:	f008 f834 	bl	d4f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	for (uint8_t i = 0; i < len; i++)
    5490:	b30e      	cbz	r6, 54d6 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x86>
    5492:	3e01      	subs	r6, #1
    5494:	f108 34ff 	add.w	r4, r8, #4294967295
    5498:	4f11      	ldr	r7, [pc, #68]	; (54e0 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x90>)
    549a:	fa58 f686 	uxtab	r6, r8, r6
    549e:	e00f      	b.n	54c0 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x70>
		if (rxBufferIndex >= rxBufferLength) return -1;
    54a0:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    54a4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    54a8:	428a      	cmp	r2, r1
		return rxBuffer[rxBufferIndex++];
    54aa:	f101 0201 	add.w	r2, r1, #1
    54ae:	4401      	add	r1, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    54b0:	d914      	bls.n	54dc <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x8c>
		return rxBuffer[rxBufferIndex++];
    54b2:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    54b6:	7e88      	ldrb	r0, [r1, #26]
		dest[i] = _i2cPort->read();
    54b8:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (uint8_t i = 0; i < len; i++)
    54bc:	42b4      	cmp	r4, r6
    54be:	d00a      	beq.n	54d6 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x86>
		dest[i] = _i2cPort->read();
    54c0:	68a8      	ldr	r0, [r5, #8]
    54c2:	6802      	ldr	r2, [r0, #0]
    54c4:	6952      	ldr	r2, [r2, #20]
    54c6:	42ba      	cmp	r2, r7
    54c8:	d0ea      	beq.n	54a0 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x50>
    54ca:	4790      	blx	r2
    54cc:	b2c0      	uxtb	r0, r0
    54ce:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (uint8_t i = 0; i < len; i++)
    54d2:	42b4      	cmp	r4, r6
    54d4:	d1f4      	bne.n	54c0 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x70>
	return(true);
    54d6:	2001      	movs	r0, #1
}
    54d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54dc:	20ff      	movs	r0, #255	; 0xff
    54de:	e7eb      	b.n	54b8 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x68>
    54e0:	00001f49 	.word	0x00001f49

000054e4 <RV3028::updateTime()>:
{
    54e4:	b538      	push	{r3, r4, r5, lr}
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    54e6:	2100      	movs	r1, #0
    54e8:	2307      	movs	r3, #7
    54ea:	4602      	mov	r2, r0
{
    54ec:	4605      	mov	r5, r0
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    54ee:	f7ff ffaf 	bl	5450 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
    54f2:	4604      	mov	r4, r0
    54f4:	b908      	cbnz	r0, 54fa <RV3028::updateTime()+0x16>
}
    54f6:	4620      	mov	r0, r4
    54f8:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    54fa:	2110      	movs	r1, #16
    54fc:	4628      	mov	r0, r5
    54fe:	f7ff fd2f 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    5502:	0783      	lsls	r3, r0, #30
    5504:	d5f7      	bpl.n	54f6 <RV3028::updateTime()+0x12>
    5506:	78ab      	ldrb	r3, [r5, #2]
}
    5508:	4620      	mov	r0, r4
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    550a:	f023 0320 	bic.w	r3, r3, #32
    550e:	70ab      	strb	r3, [r5, #2]
}
    5510:	bd38      	pop	{r3, r4, r5, pc}
    5512:	bf00      	nop

00005514 <RV3028::getUNIX()>:
{
    5514:	b500      	push	{lr}
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    5516:	2304      	movs	r3, #4
{
    5518:	b083      	sub	sp, #12
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    551a:	211b      	movs	r1, #27
    551c:	eb0d 0203 	add.w	r2, sp, r3
    5520:	f7ff ff96 	bl	5450 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    5524:	9801      	ldr	r0, [sp, #4]
    5526:	b003      	add	sp, #12
    5528:	f85d fb04 	ldr.w	pc, [sp], #4

0000552c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>:
		return (false); //Error: Sensor did not ack
	return(true);
}

bool RV3028::writeConfigEEPROM_RAMmirror(uint8_t eepromaddr, uint8_t val)
{
    552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return systick_millis_count;
    5530:	4d32      	ldr	r5, [pc, #200]	; (55fc <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xd0>)
    5532:	4604      	mov	r4, r0
    5534:	4688      	mov	r8, r1
    5536:	4691      	mov	r9, r2
    5538:	682e      	ldr	r6, [r5, #0]
}

//True if success, false if timeout occured
bool RV3028::waitforEEPROM()
{
	unsigned long timeout = millis() + 500;
    553a:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    553e:	e002      	b.n	5546 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x1a>
    5540:	682b      	ldr	r3, [r5, #0]
    5542:	429e      	cmp	r6, r3
    5544:	d905      	bls.n	5552 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x26>
    5546:	210e      	movs	r1, #14
    5548:	4620      	mov	r0, r4
    554a:	f7ff fd09 	bl	4f60 <RV3028::readRegister(unsigned char)>
    554e:	0601      	lsls	r1, r0, #24
    5550:	d4f6      	bmi.n	5540 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x14>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    5552:	210f      	movs	r1, #15
    5554:	4620      	mov	r0, r4
    5556:	f8d5 a000 	ldr.w	sl, [r5]
    555a:	f7ff fd01 	bl	4f60 <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    555e:	f040 0008 	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    5562:	210f      	movs	r1, #15
    5564:	b2c2      	uxtb	r2, r0
    5566:	4620      	mov	r0, r4
    5568:	f7ff fde8 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    556c:	4607      	mov	r7, r0
    556e:	b118      	cbz	r0, 5578 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x4c>

	return millis() < timeout;
    5570:	4556      	cmp	r6, sl
    5572:	bf94      	ite	ls
    5574:	2700      	movls	r7, #0
    5576:	2701      	movhi	r7, #1
	writeRegister(eepromaddr, val);
    5578:	464a      	mov	r2, r9
    557a:	4641      	mov	r1, r8
    557c:	4620      	mov	r0, r4
    557e:	f7ff fddd 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    5582:	2200      	movs	r2, #0
    5584:	2127      	movs	r1, #39	; 0x27
    5586:	4620      	mov	r0, r4
    5588:	f7ff fdd8 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_Update);
    558c:	2211      	movs	r2, #17
    558e:	2127      	movs	r1, #39	; 0x27
    5590:	4620      	mov	r0, r4
    5592:	f7ff fdd3 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    5596:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    5598:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    559c:	e002      	b.n	55a4 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x78>
    559e:	682b      	ldr	r3, [r5, #0]
    55a0:	429e      	cmp	r6, r3
    55a2:	d905      	bls.n	55b0 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x84>
    55a4:	210e      	movs	r1, #14
    55a6:	4620      	mov	r0, r4
    55a8:	f7ff fcda 	bl	4f60 <RV3028::readRegister(unsigned char)>
    55ac:	0602      	lsls	r2, r0, #24
    55ae:	d4f6      	bmi.n	559e <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x72>
    55b0:	682b      	ldr	r3, [r5, #0]
	ctrl1 = readRegister(RV3028_CTRL1);
    55b2:	210f      	movs	r1, #15
    55b4:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    55b6:	429e      	cmp	r6, r3
    55b8:	bf98      	it	ls
    55ba:	2700      	movls	r7, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    55bc:	f7ff fcd0 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    55c0:	1e02      	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    55c2:	f04f 010f 	mov.w	r1, #15
    55c6:	4620      	mov	r0, r4
    55c8:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
	if (ctrl1 == 0x00)success = false;
    55cc:	bf08      	it	eq
    55ce:	2700      	moveq	r7, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    55d0:	f7ff fdb4 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    55d4:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    55d6:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    55da:	e002      	b.n	55e2 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xb6>
    55dc:	682b      	ldr	r3, [r5, #0]
    55de:	429e      	cmp	r6, r3
    55e0:	d905      	bls.n	55ee <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xc2>
    55e2:	210e      	movs	r1, #14
    55e4:	4620      	mov	r0, r4
    55e6:	f7ff fcbb 	bl	4f60 <RV3028::readRegister(unsigned char)>
    55ea:	0603      	lsls	r3, r0, #24
    55ec:	d4f6      	bmi.n	55dc <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xb0>
    55ee:	682b      	ldr	r3, [r5, #0]
}
    55f0:	429e      	cmp	r6, r3
    55f2:	bf8c      	ite	hi
    55f4:	4638      	movhi	r0, r7
    55f6:	2000      	movls	r0, #0
    55f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55fc:	20025b88 	.word	0x20025b88

00005600 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>:
{
    5600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5604:	4d3f      	ldr	r5, [pc, #252]	; (5704 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x104>)
    5606:	4604      	mov	r4, r0
    5608:	4688      	mov	r8, r1
    560a:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    560c:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    5610:	e002      	b.n	5618 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x18>
    5612:	682b      	ldr	r3, [r5, #0]
    5614:	429e      	cmp	r6, r3
    5616:	d905      	bls.n	5624 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x24>
    5618:	210e      	movs	r1, #14
    561a:	4620      	mov	r0, r4
    561c:	f7ff fca0 	bl	4f60 <RV3028::readRegister(unsigned char)>
    5620:	0601      	lsls	r1, r0, #24
    5622:	d4f6      	bmi.n	5612 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x12>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    5624:	210f      	movs	r1, #15
    5626:	4620      	mov	r0, r4
    5628:	f8d5 9000 	ldr.w	r9, [r5]
    562c:	f7ff fc98 	bl	4f60 <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    5630:	f040 0008 	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    5634:	210f      	movs	r1, #15
    5636:	b2c2      	uxtb	r2, r0
    5638:	4620      	mov	r0, r4
    563a:	f7ff fd7f 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    563e:	4607      	mov	r7, r0
    5640:	b118      	cbz	r0, 564a <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x4a>
	return millis() < timeout;
    5642:	454e      	cmp	r6, r9
    5644:	bf94      	ite	ls
    5646:	2700      	movls	r7, #0
    5648:	2701      	movhi	r7, #1
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    564a:	4642      	mov	r2, r8
    564c:	2125      	movs	r1, #37	; 0x25
    564e:	4620      	mov	r0, r4
    5650:	f7ff fd74 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    5654:	2200      	movs	r2, #0
    5656:	2127      	movs	r1, #39	; 0x27
    5658:	4620      	mov	r0, r4
    565a:	f7ff fd6f 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_ReadSingle);
    565e:	2222      	movs	r2, #34	; 0x22
    5660:	2127      	movs	r1, #39	; 0x27
    5662:	4620      	mov	r0, r4
    5664:	f7ff fd6a 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
    5668:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    566a:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    566e:	e002      	b.n	5676 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x76>
    5670:	682b      	ldr	r3, [r5, #0]
    5672:	429e      	cmp	r6, r3
    5674:	d905      	bls.n	5682 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x82>
    5676:	210e      	movs	r1, #14
    5678:	4620      	mov	r0, r4
    567a:	f7ff fc71 	bl	4f60 <RV3028::readRegister(unsigned char)>
    567e:	0602      	lsls	r2, r0, #24
    5680:	d4f6      	bmi.n	5670 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x70>
    5682:	682b      	ldr	r3, [r5, #0]
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    5684:	2126      	movs	r1, #38	; 0x26
    5686:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    5688:	429e      	cmp	r6, r3
    568a:	bf98      	it	ls
    568c:	2700      	movls	r7, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    568e:	f7ff fc67 	bl	4f60 <RV3028::readRegister(unsigned char)>
    5692:	682e      	ldr	r6, [r5, #0]
    5694:	4680      	mov	r8, r0
	unsigned long timeout = millis() + 500;
    5696:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    569a:	e002      	b.n	56a2 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xa2>
    569c:	682b      	ldr	r3, [r5, #0]
    569e:	429e      	cmp	r6, r3
    56a0:	d905      	bls.n	56ae <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xae>
    56a2:	210e      	movs	r1, #14
    56a4:	4620      	mov	r0, r4
    56a6:	f7ff fc5b 	bl	4f60 <RV3028::readRegister(unsigned char)>
    56aa:	0603      	lsls	r3, r0, #24
    56ac:	d4f6      	bmi.n	569c <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x9c>
    56ae:	682b      	ldr	r3, [r5, #0]
	ctrl1 = readRegister(RV3028_CTRL1);
    56b0:	210f      	movs	r1, #15
    56b2:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    56b4:	429e      	cmp	r6, r3
    56b6:	d90f      	bls.n	56d8 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xd8>
	ctrl1 = readRegister(RV3028_CTRL1);
    56b8:	f7ff fc52 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    56bc:	b178      	cbz	r0, 56de <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xde>
	writeRegister(RV3028_CTRL1, ctrl1);
    56be:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
    56c2:	210f      	movs	r1, #15
    56c4:	4620      	mov	r0, r4
    56c6:	f7ff fd39 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    56ca:	2f00      	cmp	r7, #0
    56cc:	bf08      	it	eq
    56ce:	f04f 08ff 	moveq.w	r8, #255	; 0xff
}
    56d2:	4640      	mov	r0, r8
    56d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ctrl1 = readRegister(RV3028_CTRL1);
    56d8:	f7ff fc42 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    56dc:	b948      	cbnz	r0, 56f2 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xf2>
	writeRegister(RV3028_CTRL1, ctrl1);
    56de:	2200      	movs	r2, #0
    56e0:	210f      	movs	r1, #15
    56e2:	4620      	mov	r0, r4
	if (!success) return 0xFF;
    56e4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	writeRegister(RV3028_CTRL1, ctrl1);
    56e8:	f7ff fd28 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
}
    56ec:	4640      	mov	r0, r8
    56ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	writeRegister(RV3028_CTRL1, ctrl1);
    56f2:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
    56f6:	210f      	movs	r1, #15
    56f8:	4620      	mov	r0, r4
	if (!success) return 0xFF;
    56fa:	f04f 08ff 	mov.w	r8, #255	; 0xff
	writeRegister(RV3028_CTRL1, ctrl1);
    56fe:	f7ff fd1d 	bl	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    5702:	e7f3      	b.n	56ec <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xec>
    5704:	20025b88 	.word	0x20025b88

00005708 <RV3028::begin(TwoWire&, bool, bool, bool)>:
{
    5708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    570a:	4616      	mov	r6, r2
    570c:	4604      	mov	r4, r0
	_i2cPort = &wirePort;
    570e:	6081      	str	r1, [r0, #8]
	delay(1);
    5710:	2001      	movs	r0, #1
{
    5712:	461d      	mov	r5, r3
    5714:	f89d 7018 	ldrb.w	r7, [sp, #24]
	delay(1);
    5718:	f008 fc3c 	bl	df94 <delay>
	if (set_24Hour) { set24Hour(); delay(1); }
    571c:	bb36      	cbnz	r6, 576c <RV3028::begin(TwoWire&, bool, bool, bool)+0x64>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    571e:	b9b5      	cbnz	r5, 574e <RV3028::begin(TwoWire&, bool, bool, bool)+0x46>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    5720:	b177      	cbz	r7, 5740 <RV3028::begin(TwoWire&, bool, bool, bool)+0x38>
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    5722:	2137      	movs	r1, #55	; 0x37
    5724:	4620      	mov	r0, r4
    5726:	f7ff ff6b 	bl	5600 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
	if (EEPROMBackup == 0xFF) success = false;
    572a:	28ff      	cmp	r0, #255	; 0xff
    572c:	d02a      	beq.n	5784 <RV3028::begin(TwoWire&, bool, bool, bool)+0x7c>
	EEPROMBackup &= EEPROMBackup_BSM_CLEAR;		//Clear BSM Bits of EEPROM Backup Register
    572e:	f000 02f3 	and.w	r2, r0, #243	; 0xf3
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    5732:	2137      	movs	r1, #55	; 0x37
    5734:	4620      	mov	r0, r4
    5736:	f042 021c 	orr.w	r2, r2, #28
    573a:	f7ff fef7 	bl	552c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
    573e:	b330      	cbz	r0, 578e <RV3028::begin(TwoWire&, bool, bool, bool)+0x86>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    5740:	4620      	mov	r0, r4
    5742:	2200      	movs	r2, #0
    5744:	210e      	movs	r1, #14
}
    5746:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    574a:	f7ff bcf7 	b.w	513c <RV3028::writeRegister(unsigned char, unsigned char)>
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    574e:	2137      	movs	r1, #55	; 0x37
    5750:	4620      	mov	r0, r4
    5752:	f7ff ff55 	bl	5600 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
    5756:	4602      	mov	r2, r0
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    5758:	2137      	movs	r1, #55	; 0x37
    575a:	4620      	mov	r0, r4
    575c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    5760:	f7ff fee4 	bl	552c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    5764:	2001      	movs	r0, #1
    5766:	f008 fc15 	bl	df94 <delay>
    576a:	e7d9      	b.n	5720 <RV3028::begin(TwoWire&, bool, bool, bool)+0x18>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    576c:	2110      	movs	r1, #16
    576e:	4620      	mov	r0, r4
    5770:	f7ff fbf6 	bl	4f60 <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    5774:	0783      	lsls	r3, r0, #30
    5776:	d40c      	bmi.n	5792 <RV3028::begin(TwoWire&, bool, bool, bool)+0x8a>
	if (set_24Hour) { set24Hour(); delay(1); }
    5778:	2001      	movs	r0, #1
    577a:	f008 fc0b 	bl	df94 <delay>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    577e:	2d00      	cmp	r5, #0
    5780:	d0ce      	beq.n	5720 <RV3028::begin(TwoWire&, bool, bool, bool)+0x18>
    5782:	e7e4      	b.n	574e <RV3028::begin(TwoWire&, bool, bool, bool)+0x46>
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    5784:	4602      	mov	r2, r0
    5786:	2137      	movs	r1, #55	; 0x37
    5788:	4620      	mov	r0, r4
    578a:	f7ff fecf 	bl	552c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
}
    578e:	2000      	movs	r0, #0
    5790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5792:	4620      	mov	r0, r4
    5794:	f7ff fd42 	bl	521c <RV3028::set24Hour() [clone .part.0]>
    5798:	e7ee      	b.n	5778 <RV3028::begin(TwoWire&, bool, bool, bool)+0x70>
    579a:	bf00      	nop

0000579c <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
    579c:	6843      	ldr	r3, [r0, #4]
    579e:	2b13      	cmp	r3, #19
    57a0:	dc07      	bgt.n	57b2 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x16>
          sd_name[fsCount] = name;
    57a2:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
    57a6:	3301      	adds	r3, #1
          sd_name[fsCount] = name;
    57a8:	f8cc 2008 	str.w	r2, [ip, #8]
          sdx[fsCount++] = &fs;
    57ac:	6043      	str	r3, [r0, #4]
    57ae:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
    57b2:	4770      	bx	lr

000057b4 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    57b4:	2000      	movs	r0, #0
    57b6:	4770      	bx	lr

000057b8 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    57b8:	2001      	movs	r0, #1
    57ba:	4770      	bx	lr

000057bc <MTPStorage_SD::CloseIndex()>:
  bool isOpen() const {return m_fFile || m_xFile;}
    57bc:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  {
    57c0:	b510      	push	{r4, lr}
    57c2:	4604      	mov	r4, r0
    57c4:	b14b      	cbz	r3, 57da <MTPStorage_SD::CloseIndex()+0x1e>
    if(index_.isOpen()) {index_.close();}
    57c6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    57ca:	f005 f97f 	bl	aacc <FsBaseFile::close()>
    index_generated = false;
    57ce:	2300      	movs	r3, #0
    57d0:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    57d4:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  }
    57d8:	bd10      	pop	{r4, pc}
    57da:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    57de:	2b00      	cmp	r3, #0
    57e0:	d1f1      	bne.n	57c6 <MTPStorage_SD::CloseIndex()+0xa>
    57e2:	e7f4      	b.n	57ce <MTPStorage_SD::CloseIndex()+0x12>

000057e4 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    57e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    57e8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    57ea:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    57ee:	b14b      	cbz	r3, 5804 <MTPStorage_SD::totalSize(unsigned long)+0x20>
    57f0:	799a      	ldrb	r2, [r3, #6]
    57f2:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    57f6:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    57f8:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    57fa:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    57fc:	b280      	uxth	r0, r0
    57fe:	fba0 0101 	umull	r0, r1, r0, r1
    5802:	4770      	bx	lr
    5804:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5808:	b130      	cbz	r0, 5818 <MTPStorage_SD::totalSize(unsigned long)+0x34>
    580a:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    580e:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    5812:	fba1 0100 	umull	r0, r1, r1, r0
    5816:	4770      	bx	lr
    5818:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    581a:	4770      	bx	lr

0000581c <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
    581c:	b538      	push	{r3, r4, r5, lr}
    581e:	210a      	movs	r1, #10
    5820:	4604      	mov	r4, r0
    5822:	480a      	ldr	r0, [pc, #40]	; (584c <dbgPrint(unsigned short)+0x30>)
    5824:	f00a fc3a 	bl	1009c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5828:	4d09      	ldr	r5, [pc, #36]	; (5850 <dbgPrint(unsigned short)+0x34>)
    582a:	210b      	movs	r1, #11
    582c:	4809      	ldr	r0, [pc, #36]	; (5854 <dbgPrint(unsigned short)+0x38>)
    582e:	f00a fc35 	bl	1009c <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5832:	202e      	movs	r0, #46	; 0x2e
    5834:	f00a fc1c 	bl	10070 <usb_serial_putchar>
    5838:	4621      	mov	r1, r4
    583a:	4628      	mov	r0, r5
    583c:	f008 f89c 	bl	d978 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5840:	4628      	mov	r0, r5
  }
    5842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5846:	f008 b8a3 	b.w	d990 <Print::println()>
    584a:	bf00      	nop
    584c:	20000a54 	.word	0x20000a54
    5850:	20008bb4 	.word	0x20008bb4
    5854:	20000a60 	.word	0x20000a60

00005858 <MTPStorage_SD::write(char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    5858:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    585c:	b113      	cbz	r3, 5864 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    585e:	4618      	mov	r0, r3
    5860:	f003 bf38 	b.w	96d4 <FatFile::write(void const*, unsigned int)>
    5864:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
           m_xFile ? m_xFile->write(buf, count) : 0;
    5868:	b108      	cbz	r0, 586e <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    586a:	f002 bbd9 	b.w	8020 <ExFatFile::write(void const*, unsigned int)>
  }
    586e:	4770      	bx	lr

00005870 <MTPStorage_SD::OpenIndex() [clone .part.0]>:
  void MTPStorage_SD::OpenIndex() 
    5870:	b510      	push	{r4, lr}
    5872:	4604      	mov	r4, r0
    5874:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5876:	f240 2302 	movw	r3, #514	; 0x202
    587a:	4a15      	ldr	r2, [pc, #84]	; (58d0 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    587c:	4668      	mov	r0, sp
    587e:	6da1      	ldr	r1, [r4, #88]	; 0x58
    5880:	f005 fa3e 	bl	ad00 <FsVolume::open(char const*, int)>
class Stream : public Print
    5884:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5888:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    588c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
    5890:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    5894:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    5898:	a904      	add	r1, sp, #16
    589a:	f005 f8bd 	bl	aa18 <FsBaseFile::operator=(FsBaseFile const&)>
    589e:	4b0d      	ldr	r3, [pc, #52]	; (58d4 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    58a0:	a804      	add	r0, sp, #16
    58a2:	9300      	str	r3, [sp, #0]
    58a4:	f005 f912 	bl	aacc <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    58a8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    58ac:	b10b      	cbz	r3, 58b2 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
  }
    58ae:	b014      	add	sp, #80	; 0x50
    58b0:	bd10      	pop	{r4, pc}
    58b2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    58b6:	2b00      	cmp	r3, #0
    58b8:	d1f9      	bne.n	58ae <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    58ba:	2117      	movs	r1, #23
    58bc:	4806      	ldr	r0, [pc, #24]	; (58d8 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    58be:	f00a fbed 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58c2:	4806      	ldr	r0, [pc, #24]	; (58dc <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    58c4:	b014      	add	sp, #80	; 0x50
    58c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58ca:	f008 b861 	b.w	d990 <Print::println()>
    58ce:	bf00      	nop
    58d0:	20000b74 	.word	0x20000b74
    58d4:	20000c70 	.word	0x20000c70
    58d8:	20000b84 	.word	0x20000b84
    58dc:	20008bb4 	.word	0x20008bb4

000058e0 <MTPStorage_SD::ResetIndex()>:
    58e0:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  void MTPStorage_SD::ResetIndex() {
    58e4:	b510      	push	{r4, lr}
    58e6:	4604      	mov	r4, r0
    58e8:	b30b      	cbz	r3, 592e <MTPStorage_SD::ResetIndex()+0x4e>
    CloseIndex();
    58ea:	6823      	ldr	r3, [r4, #0]
    58ec:	4a16      	ldr	r2, [pc, #88]	; (5948 <MTPStorage_SD::ResetIndex()+0x68>)
    58ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    58f0:	4293      	cmp	r3, r2
    58f2:	d125      	bne.n	5940 <MTPStorage_SD::ResetIndex()+0x60>
    if(index_.isOpen()) {index_.close();}
    58f4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    58f8:	f005 f8e8 	bl	aacc <FsBaseFile::close()>
    index_generated = false;
    58fc:	2300      	movs	r3, #0
    58fe:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    5902:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    all_scanned_ = false;
    5906:	2100      	movs	r1, #0
    open_file_ = 0xFFFFFFFEUL;
    5908:	f06f 0201 	mvn.w	r2, #1
    590c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    all_scanned_ = false;
    5910:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    5914:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    5918:	b103      	cbz	r3, 591c <MTPStorage_SD::ResetIndex()+0x3c>
  }
    591a:	bd10      	pop	{r4, pc}
    591c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5920:	2b00      	cmp	r3, #0
    5922:	d1fa      	bne.n	591a <MTPStorage_SD::ResetIndex()+0x3a>
    5924:	4620      	mov	r0, r4
    5926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    592a:	f7ff bfa1 	b.w	5870 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    592e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5932:	2b00      	cmp	r3, #0
    5934:	d0f1      	beq.n	591a <MTPStorage_SD::ResetIndex()+0x3a>
    CloseIndex();
    5936:	6823      	ldr	r3, [r4, #0]
    5938:	4a03      	ldr	r2, [pc, #12]	; (5948 <MTPStorage_SD::ResetIndex()+0x68>)
    593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    593c:	4293      	cmp	r3, r2
    593e:	d0d9      	beq.n	58f4 <MTPStorage_SD::ResetIndex()+0x14>
    5940:	4620      	mov	r0, r4
    5942:	4798      	blx	r3
    5944:	e7df      	b.n	5906 <MTPStorage_SD::ResetIndex()+0x26>
    5946:	bf00      	nop
    5948:	000057bd 	.word	0x000057bd

0000594c <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5950:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    5954:	6db2      	ldr	r2, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    5956:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    595a:	2b00      	cmp	r3, #0
    595c:	f000 80bc 	beq.w	5ad8 <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    5960:	69d9      	ldr	r1, [r3, #28]
    5962:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5964:	2300      	movs	r3, #0
    5966:	220a      	movs	r2, #10
    5968:	486a      	ldr	r0, [pc, #424]	; (5b14 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    596a:	f008 f83b 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    596e:	4869      	ldr	r0, [pc, #420]	; (5b14 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    5970:	f008 f80e 	bl	d990 <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    5974:	6db5      	ldr	r5, [r6, #88]	; 0x58
  uint32_t freeClusterCount() {
    5976:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    597a:	b120      	cbz	r0, 5986 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    597c:	6803      	ldr	r3, [r0, #0]
    597e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5980:	4798      	blx	r3
    5982:	2800      	cmp	r0, #0
    5984:	d16c      	bne.n	5a60 <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5986:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    5988:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    598c:	2800      	cmp	r0, #0
    598e:	f000 808e 	beq.w	5aae <MTPStorage_SD::usedSize(unsigned long)+0x162>
    5992:	f004 fea3 	bl	a6dc <FatPartition::freeClusterCount()>
    5996:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5998:	2f00      	cmp	r7, #0
    599a:	f040 8091 	bne.w	5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    599e:	2300      	movs	r3, #0
    59a0:	220a      	movs	r2, #10
    59a2:	4621      	mov	r1, r4
    59a4:	485b      	ldr	r0, [pc, #364]	; (5b14 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59a6:	f008 f81d 	bl	d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    59aa:	485a      	ldr	r0, [pc, #360]	; (5b14 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    59ac:	f007 fff0 	bl	d990 <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    59b0:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    59b2:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    59b6:	2b00      	cmp	r3, #0
    59b8:	f000 8096 	beq.w	5ae8 <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    59bc:	69dc      	ldr	r4, [r3, #28]
    59be:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    59c2:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    59c4:	2800      	cmp	r0, #0
    59c6:	d05f      	beq.n	5a88 <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    59c8:	6803      	ldr	r3, [r0, #0]
    59ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    59cc:	4798      	blx	r3
    59ce:	bb38      	cbnz	r0, 5a20 <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    59d0:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    59d4:	f04f 0800 	mov.w	r8, #0
    59d8:	2800      	cmp	r0, #0
    59da:	d139      	bne.n	5a50 <MTPStorage_SD::usedSize(unsigned long)+0x104>
    59dc:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    59e0:	b11f      	cbz	r7, 59ea <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    59e2:	4638      	mov	r0, r7
    59e4:	f002 fefa 	bl	87dc <ExFatPartition::freeClusterCount()>
    59e8:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    59ea:	f1b8 0f00 	cmp.w	r8, #0
    59ee:	d035      	beq.n	5a5c <MTPStorage_SD::usedSize(unsigned long)+0x110>
    59f0:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    59f4:	b128      	cbz	r0, 5a02 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    59f6:	6803      	ldr	r3, [r0, #0]
    59f8:	2100      	movs	r1, #0
    59fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    59fc:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    59fe:	b100      	cbz	r0, 5a02 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    5a00:	1be4      	subs	r4, r4, r7
    5a02:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->bytesPerCluster() :
    5a04:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    5a08:	2b00      	cmp	r3, #0
    5a0a:	d147      	bne.n	5a9c <MTPStorage_SD::usedSize(unsigned long)+0x150>
    5a0c:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    5a10:	2800      	cmp	r0, #0
    5a12:	d07a      	beq.n	5b0a <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5a14:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    5a18:	fba4 0101 	umull	r0, r1, r4, r1
    5a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a20:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5a24:	2800      	cmp	r0, #0
    5a26:	d0ec      	beq.n	5a02 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    5a28:	6803      	ldr	r3, [r0, #0]
    5a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a2c:	4798      	blx	r3
    5a2e:	2800      	cmp	r0, #0
    5a30:	d1ce      	bne.n	59d0 <MTPStorage_SD::usedSize(unsigned long)+0x84>
    5a32:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a36:	2800      	cmp	r0, #0
    5a38:	d0e3      	beq.n	5a02 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    5a3a:	6803      	ldr	r3, [r0, #0]
    5a3c:	2101      	movs	r1, #1
    5a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a40:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5a42:	4680      	mov	r8, r0
    5a44:	2800      	cmp	r0, #0
    5a46:	d0dc      	beq.n	5a02 <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    5a48:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d0c5      	beq.n	59dc <MTPStorage_SD::usedSize(unsigned long)+0x90>
    5a50:	f004 fe44 	bl	a6dc <FatPartition::freeClusterCount()>
    5a54:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5a56:	f1b8 0f00 	cmp.w	r8, #0
    5a5a:	d1c9      	bne.n	59f0 <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    5a5c:	6db5      	ldr	r5, [r6, #88]	; 0x58
    5a5e:	e018      	b.n	5a92 <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5a60:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5a64:	b170      	cbz	r0, 5a84 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5a66:	6803      	ldr	r3, [r0, #0]
    5a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a6a:	4798      	blx	r3
    5a6c:	2800      	cmp	r0, #0
    5a6e:	d18a      	bne.n	5986 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    5a70:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a74:	b130      	cbz	r0, 5a84 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5a76:	6803      	ldr	r3, [r0, #0]
    5a78:	2101      	movs	r1, #1
    5a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a7c:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5a7e:	4607      	mov	r7, r0
    5a80:	2800      	cmp	r0, #0
    5a82:	d181      	bne.n	5988 <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    5a84:	2400      	movs	r4, #0
    5a86:	e78a      	b.n	599e <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5a88:	4618      	mov	r0, r3
    5a8a:	f004 fe27 	bl	a6dc <FatPartition::freeClusterCount()>
    5a8e:	6db5      	ldr	r5, [r6, #88]	; 0x58
    5a90:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    5a92:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    5a96:	1be4      	subs	r4, r4, r7
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d0b7      	beq.n	5a0c <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5a9c:	799b      	ldrb	r3, [r3, #6]
    5a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
    5aa2:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5aa4:	b289      	uxth	r1, r1
    5aa6:	fba1 0104 	umull	r0, r1, r1, r4
    5aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aae:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5ab2:	b328      	cbz	r0, 5b00 <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    5ab4:	f002 fe92 	bl	87dc <ExFatPartition::freeClusterCount()>
    5ab8:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5aba:	2f00      	cmp	r7, #0
    5abc:	f43f af6f 	beq.w	599e <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5ac0:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5ac4:	2800      	cmp	r0, #0
    5ac6:	d0dd      	beq.n	5a84 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5ac8:	6803      	ldr	r3, [r0, #0]
    5aca:	2100      	movs	r1, #0
    5acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5ace:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5ad0:	2800      	cmp	r0, #0
    5ad2:	f47f af64 	bne.w	599e <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5ad6:	e7d5      	b.n	5a84 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5ad8:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5adc:	2900      	cmp	r1, #0
    5ade:	f43f af41 	beq.w	5964 <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5ae2:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    5ae6:	e73d      	b.n	5964 <MTPStorage_SD::usedSize(unsigned long)+0x18>
    5ae8:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    5aec:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    5af0:	b147      	cbz	r7, 5b04 <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    5af2:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5af6:	2800      	cmp	r0, #0
    5af8:	f47f af66 	bne.w	59c8 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5afc:	4680      	mov	r8, r0
    5afe:	e770      	b.n	59e2 <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5b00:	4604      	mov	r4, r0
    5b02:	e749      	b.n	5998 <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5b04:	b118      	cbz	r0, 5b0e <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    5b06:	463c      	mov	r4, r7
    5b08:	e75e      	b.n	59c8 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    5b0a:	4601      	mov	r1, r0
    5b0c:	e7cd      	b.n	5aaa <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5b0e:	4607      	mov	r7, r0
    5b10:	4604      	mov	r4, r0
    5b12:	e7be      	b.n	5a92 <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5b14:	20008bb4 	.word	0x20008bb4

00005b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
    5b18:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  { OpenIndex();
    5b1c:	b570      	push	{r4, r5, r6, lr}
    5b1e:	4604      	mov	r4, r0
    5b20:	b082      	sub	sp, #8
    5b22:	4615      	mov	r5, r2
    5b24:	b1e3      	cbz	r3, 5b60 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x48>
    index_.seekSet((sizeof(r) * i));
    5b26:	f44f 728c 	mov.w	r2, #280	; 0x118
    5b2a:	fb02 f101 	mul.w	r1, r2, r1
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5b2e:	4618      	mov	r0, r3
    5b30:	f003 fc9a 	bl	9468 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    5b34:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5b38:	b138      	cbz	r0, 5b4a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x32>
    5b3a:	f44f 728c 	mov.w	r2, #280	; 0x118
    5b3e:	4629      	mov	r1, r5
  }
    5b40:	b002      	add	sp, #8
    5b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b46:	f003 bdc5 	b.w	96d4 <FatFile::write(void const*, unsigned int)>
    5b4a:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->write(buf, count) : 0;
    5b4e:	b320      	cbz	r0, 5b9a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x82>
    5b50:	f44f 728c 	mov.w	r2, #280	; 0x118
    5b54:	4629      	mov	r1, r5
    5b56:	b002      	add	sp, #8
    5b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b5c:	f002 ba60 	b.w	8020 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5b60:	f8d0 60f4 	ldr.w	r6, [r0, #244]	; 0xf4
    5b64:	b146      	cbz	r6, 5b78 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x60>
    index_.seekSet((sizeof(r) * i));
    5b66:	f44f 728c 	mov.w	r2, #280	; 0x118
    5b6a:	fb01 f202 	mul.w	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
    5b6e:	2300      	movs	r3, #0
    5b70:	4630      	mov	r0, r6
    5b72:	f001 fc25 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    5b76:	e7dd      	b.n	5b34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1c>
    5b78:	9101      	str	r1, [sp, #4]
    5b7a:	f7ff fe79 	bl	5870 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5b7e:	9901      	ldr	r1, [sp, #4]
    5b80:	f44f 728c 	mov.w	r2, #280	; 0x118
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5b84:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5b88:	fb01 f202 	mul.w	r2, r1, r2
    5b8c:	4611      	mov	r1, r2
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d1cd      	bne.n	5b2e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x16>
    5b92:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5b96:	2e00      	cmp	r6, #0
    5b98:	d1e9      	bne.n	5b6e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x56>
  }
    5b9a:	b002      	add	sp, #8
    5b9c:	bd70      	pop	{r4, r5, r6, pc}
    5b9e:	bf00      	nop

00005ba0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ba4:	4605      	mov	r5, r0
    index_generated = true;
    5ba6:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5ba8:	b0c7      	sub	sp, #284	; 0x11c
    5baa:	210d      	movs	r1, #13
    5bac:	482a      	ldr	r0, [pc, #168]	; (5c58 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    5bae:	f885 61ac 	strb.w	r6, [r5, #428]	; 0x1ac
    5bb2:	f00a fa73 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5bb6:	4829      	ldr	r0, [pc, #164]	; (5c5c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    5bb8:	f007 feea 	bl	d990 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5bbc:	6dab      	ldr	r3, [r5, #88]	; 0x58
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    5bbe:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5bc2:	b3a2      	cbz	r2, 5c2e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    5bc4:	466c      	mov	r4, sp
    5bc6:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5bc8:	4611      	mov	r1, r2
    5bca:	4633      	mov	r3, r6
    5bcc:	6020      	str	r0, [r4, #0]
    5bce:	4620      	mov	r0, r4
    5bd0:	4a21      	ldr	r2, [pc, #132]	; (5c58 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5bd2:	f003 f9ad 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    5bd6:	2800      	cmp	r0, #0
    5bd8:	d13a      	bne.n	5c50 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    5bda:	686b      	ldr	r3, [r5, #4]
    index_entries_ = 0;
    5bdc:	2600      	movs	r6, #0
    for(int ii=0; ii<num_storage; ii++)
    5bde:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    5be0:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
    index_entries_ = 0;
    5be4:	f8c5 61a8 	str.w	r6, [r5, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    5be8:	dd1e      	ble.n	5c28 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    5bea:	466c      	mov	r4, sp
      r.parent = 0xFFFFFFFFUL; // 
    5bec:	f04f 39ff 	mov.w	r9, #4294967295
      r.child = 0;
    5bf0:	4637      	mov	r7, r6
      r.isdir = true;
    5bf2:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    5bf6:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
      strcpy(r.name, "/");
    5bfa:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    5bfc:	4622      	mov	r2, r4
    5bfe:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    5c00:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    5c04:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    5c06:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    5c0a:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    5c0c:	f8c5 c1a8 	str.w	ip, [r5, #424]	; 0x1a8
      r.isdir = true;
    5c10:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    5c14:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    5c18:	f8ad 3018 	strh.w	r3, [sp, #24]
    WriteIndexRecord(new_record, r);
    5c1c:	f7ff ff7c 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    5c20:	f8d5 3198 	ldr.w	r3, [r5, #408]	; 0x198
    5c24:	429e      	cmp	r6, r3
    5c26:	dbe6      	blt.n	5bf6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
  }
    5c28:	b047      	add	sp, #284	; 0x11c
    5c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5c2e:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5c32:	2900      	cmp	r1, #0
    5c34:	d0d1      	beq.n	5bda <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5c36:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5c38:	4633      	mov	r3, r6
    5c3a:	6322      	str	r2, [r4, #48]	; 0x30
    5c3c:	4620      	mov	r0, r4
    5c3e:	4a06      	ldr	r2, [pc, #24]	; (5c58 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5c40:	f001 fe7c 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    5c44:	2800      	cmp	r0, #0
    5c46:	d0c8      	beq.n	5bda <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5c48:	4620      	mov	r0, r4
    5c4a:	f001 fedb 	bl	7a04 <ExFatFile::remove()>
    5c4e:	e7c4      	b.n	5bda <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5c50:	4620      	mov	r0, r4
    5c52:	f004 f9cd 	bl	9ff0 <FatFile::remove()>
    5c56:	e7c0      	b.n	5bda <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5c58:	20000b74 	.word	0x20000b74
    5c5c:	20008bb4 	.word	0x20008bb4

00005c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    5c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    5c62:	f44f 778c 	mov.w	r7, #280	; 0x118
  {
    5c66:	460c      	mov	r4, r1
    5c68:	4615      	mov	r5, r2
    memset(&ret, 0, sizeof(ret));
    5c6a:	2100      	movs	r1, #0
    5c6c:	463a      	mov	r2, r7
  {
    5c6e:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    5c70:	f00c fd22 	bl	126b8 <memset>
    if (i > index_entries_) 
    5c74:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    5c78:	42ab      	cmp	r3, r5
    5c7a:	d201      	bcs.n	5c80 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x20>
  }
    5c7c:	4630      	mov	r0, r6
    5c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5c80:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5c84:	b1c0      	cbz	r0, 5cb8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    5c86:	fb07 f105 	mul.w	r1, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5c8a:	f003 fbed 	bl	9468 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    5c8e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5c92:	b130      	cbz	r0, 5ca2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    5c94:	f44f 728c 	mov.w	r2, #280	; 0x118
    5c98:	4631      	mov	r1, r6
    5c9a:	f003 f99d 	bl	8fd8 <FatFile::read(void*, unsigned int)>
  }
    5c9e:	4630      	mov	r0, r6
    5ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ca2:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->read(buf, count) : -1;
    5ca6:	2800      	cmp	r0, #0
    5ca8:	d0e8      	beq.n	5c7c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5caa:	f44f 728c 	mov.w	r2, #280	; 0x118
    5cae:	4631      	mov	r1, r6
    5cb0:	f001 faa0 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    5cb4:	4630      	mov	r0, r6
    5cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5cb8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    5cbc:	b128      	cbz	r0, 5cca <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6a>
    index_.seekSet(sizeof(ret) * i);
    5cbe:	fb07 f205 	mul.w	r2, r7, r5
           m_xFile ? m_xFile->seekSet(pos) : false;
    5cc2:	2300      	movs	r3, #0
    5cc4:	f001 fb7c 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    5cc8:	e7e1      	b.n	5c8e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    5cca:	4620      	mov	r0, r4
    5ccc:	f7ff fdd0 	bl	5870 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5cd0:	fb07 f205 	mul.w	r2, r7, r5
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5cd4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5cd8:	4611      	mov	r1, r2
    5cda:	2800      	cmp	r0, #0
    5cdc:	d1d5      	bne.n	5c8a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    5cde:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5ce2:	2800      	cmp	r0, #0
    5ce4:	d0ca      	beq.n	5c7c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1c>
    5ce6:	e7ec      	b.n	5cc2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x62>

00005ce8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    5ce8:	b530      	push	{r4, r5, lr}
    { if (next_ == 0) return 0;
    5cea:	f8d0 51b0 	ldr.w	r5, [r0, #432]	; 0x1b0
  {
    5cee:	b0c7      	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    5cf0:	b325      	cbz	r5, 5d3c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    5cf2:	4604      	mov	r4, r0
    5cf4:	e008      	b.n	5d08 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
      { next_ = r.sibling;
    5cf6:	9b02      	ldr	r3, [sp, #8]
    5cf8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    5cfc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5d00:	b9cb      	cbnz	r3, 5d36 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    5d02:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
    5d06:	b1cd      	cbz	r5, 5d3c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    5d08:	462a      	mov	r2, r5
    5d0a:	4621      	mov	r1, r4
    5d0c:	4668      	mov	r0, sp
    5d0e:	f7ff ffa7 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    5d12:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
    5d16:	2b00      	cmp	r3, #0
    5d18:	d1ed      	bne.n	5cf6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    5d1a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    5d1e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      { next_++;
    5d22:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    5d24:	428a      	cmp	r2, r1
    5d26:	bf38      	it	cc
    5d28:	4613      	movcc	r3, r2
    5d2a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    5d2e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    5d32:	2b00      	cmp	r3, #0
    5d34:	d0e5      	beq.n	5d02 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
  }
    5d36:	4628      	mov	r0, r5
    5d38:	b047      	add	sp, #284	; 0x11c
    5d3a:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    5d3c:	2500      	movs	r5, #0
  }
    5d3e:	4628      	mov	r0, r5
    5d40:	b047      	add	sp, #284	; 0x11c
    5d42:	bd30      	pop	{r4, r5, pc}

00005d44 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    5d44:	b530      	push	{r4, r5, lr}
    5d46:	b0cd      	sub	sp, #308	; 0x134
    5d48:	4615      	mov	r5, r2
    5d4a:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    5d4c:	4601      	mov	r1, r0
    5d4e:	a806      	add	r0, sp, #24
  {
    5d50:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    5d52:	f7ff ff85 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    5d56:	4628      	mov	r0, r5
    5d58:	a90c      	add	r1, sp, #48	; 0x30
    5d5a:	f00c ffdf 	bl	12d1c <strcpy>
    *parent = r.parent;
    5d5e:	9b06      	ldr	r3, [sp, #24]
    5d60:	9a50      	ldr	r2, [sp, #320]	; 0x140
    5d62:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d64:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    5d68:	2b00      	cmp	r3, #0
    5d6a:	d13d      	bne.n	5de8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    5d6c:	9807      	ldr	r0, [sp, #28]
    5d6e:	6020      	str	r0, [r4, #0]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    5d70:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    5d74:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    5d78:	9851      	ldr	r0, [sp, #324]	; 0x144
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    5d7a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    *store = r.store;
    5d7e:	8003      	strh	r3, [r0, #0]
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    5d80:	f001 001f 	and.w	r0, r1, #31
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    5d84:	f002 041f 	and.w	r4, r2, #31
  return 1980 + (fatDate >> 9);
    5d88:	0a53      	lsrs	r3, r2, #9
    5d8a:	0040      	lsls	r0, r0, #1
    5d8c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    5d90:	9004      	str	r0, [sp, #16]
    5d92:	f3c1 1045 	ubfx	r0, r1, #5, #6
    5d96:	0ac9      	lsrs	r1, r1, #11
    5d98:	9003      	str	r0, [sp, #12]
    5d9a:	f3c2 1043 	ubfx	r0, r2, #5, #4
    5d9e:	4a14      	ldr	r2, [pc, #80]	; (5df0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    5da0:	9000      	str	r0, [sp, #0]
    5da2:	9852      	ldr	r0, [sp, #328]	; 0x148
    5da4:	e9cd 4101 	strd	r4, r1, [sp, #4]
    5da8:	2120      	movs	r1, #32
    5daa:	f00c fa9b 	bl	122e4 <snprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    5dae:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    5db2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    5db6:	f000 041f 	and.w	r4, r0, #31
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    5dba:	f3c0 1545 	ubfx	r5, r0, #5, #6
    5dbe:	0ac0      	lsrs	r0, r0, #11
    5dc0:	4a0b      	ldr	r2, [pc, #44]	; (5df0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    5dc2:	0064      	lsls	r4, r4, #1
    5dc4:	9503      	str	r5, [sp, #12]
  return 1980 + (fatDate >> 9);
    5dc6:	0a4b      	lsrs	r3, r1, #9
    5dc8:	9002      	str	r0, [sp, #8]
    5dca:	9404      	str	r4, [sp, #16]
    5dcc:	f3c1 1043 	ubfx	r0, r1, #5, #4
    5dd0:	f001 041f 	and.w	r4, r1, #31
    5dd4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
    5dd8:	2120      	movs	r1, #32
    5dda:	e9cd 0400 	strd	r0, r4, [sp]
    5dde:	9853      	ldr	r0, [sp, #332]	; 0x14c
    5de0:	f00c fa80 	bl	122e4 <snprintf>
  }
    5de4:	b04d      	add	sp, #308	; 0x134
    5de6:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5de8:	f04f 30ff 	mov.w	r0, #4294967295
    5dec:	e7bf      	b.n	5d6e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    5dee:	bf00      	nop
    5df0:	20000b54 	.word	0x20000b54

00005df4 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    5df4:	b500      	push	{lr}
    5df6:	b0c7      	sub	sp, #284	; 0x11c
    5df8:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    5dfa:	4601      	mov	r1, r0
    5dfc:	4668      	mov	r0, sp
    5dfe:	f7ff ff2f 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    5e02:	9801      	ldr	r0, [sp, #4]
    5e04:	b047      	add	sp, #284	; 0x11c
    5e06:	f85d fb04 	ldr.w	pc, [sp], #4
    5e0a:	bf00      	nop

00005e0c <MTPStorage_SD::close()>:
  {
    5e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e10:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->fileSize() :
    5e12:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    5e16:	b0c8      	sub	sp, #288	; 0x120
    5e18:	2800      	cmp	r0, #0
    5e1a:	d03a      	beq.n	5e92 <MTPStorage_SD::close()+0x86>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5e1c:	f10d 0602 	add.w	r6, sp, #2
    5e20:	466d      	mov	r5, sp
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint32_t fileSize() const {return m_fileSize;}
    5e22:	f8d0 901c 	ldr.w	r9, [r0, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    5e26:	f504 7a84 	add.w	sl, r4, #264	; 0x108
    5e2a:	4632      	mov	r2, r6
    5e2c:	4629      	mov	r1, r5
    5e2e:	f002 feb1 	bl	8b94 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    5e32:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    5e36:	2800      	cmp	r0, #0
    5e38:	d03d      	beq.n	5eb6 <MTPStorage_SD::close()+0xaa>
    5e3a:	f10d 0806 	add.w	r8, sp, #6
    5e3e:	af01      	add	r7, sp, #4
    5e40:	4642      	mov	r2, r8
    5e42:	4639      	mov	r1, r7
    5e44:	f002 fea6 	bl	8b94 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    5e48:	4650      	mov	r0, sl
    5e4a:	f004 fe3f 	bl	aacc <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    5e4e:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    5e52:	4621      	mov	r1, r4
    5e54:	a802      	add	r0, sp, #8
    5e56:	f7ff ff03 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    5e5a:	882b      	ldrh	r3, [r5, #0]
    r.cptime=cptime;
    5e5c:	8832      	ldrh	r2, [r6, #0]
    WriteIndexRecord(open_file_, r);
    5e5e:	4620      	mov	r0, r4
    r.mpdate=mpdate;
    5e60:	8839      	ldrh	r1, [r7, #0]
    r.cpdate=cpdate;
    5e62:	f8ad 3018 	strh.w	r3, [sp, #24]
    r.mptime=mptime;
    5e66:	f8b8 3000 	ldrh.w	r3, [r8]
    r.cptime=cptime;
    5e6a:	f8ad 201a 	strh.w	r2, [sp, #26]
    WriteIndexRecord(open_file_, r);
    5e6e:	aa02      	add	r2, sp, #8
    r.mpdate=mpdate;
    5e70:	f8ad 101c 	strh.w	r1, [sp, #28]
    WriteIndexRecord(open_file_, r);
    5e74:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    r.mptime=mptime;
    5e78:	f8ad 301e 	strh.w	r3, [sp, #30]
    r.child = size;
    5e7c:	f8cd 900c 	str.w	r9, [sp, #12]
    WriteIndexRecord(open_file_, r);
    5e80:	f7ff fe4a 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    5e84:	f06f 0301 	mvn.w	r3, #1
    5e88:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  }
    5e8c:	b048      	add	sp, #288	; 0x120
    5e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e92:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    5e96:	b1d0      	cbz	r0, 5ece <MTPStorage_SD::close()+0xc2>
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    5e98:	f10d 0602 	add.w	r6, sp, #2
    5e9c:	466d      	mov	r5, sp
    uint32_t size = (uint32_t) file_.size();
    5e9e:	f8d0 9010 	ldr.w	r9, [r0, #16]
    file_.getCreateDateTime(&cpdate,&cptime);
    5ea2:	f504 7a84 	add.w	sl, r4, #264	; 0x108
    5ea6:	4632      	mov	r2, r6
    5ea8:	4629      	mov	r1, r5
    5eaa:	f001 f91d 	bl	70e8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    5eae:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    5eb2:	2800      	cmp	r0, #0
    5eb4:	d1c1      	bne.n	5e3a <MTPStorage_SD::close()+0x2e>
    5eb6:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    5eba:	f10d 0806 	add.w	r8, sp, #6
    5ebe:	af01      	add	r7, sp, #4
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d0c1      	beq.n	5e48 <MTPStorage_SD::close()+0x3c>
    5ec4:	4642      	mov	r2, r8
    5ec6:	4639      	mov	r1, r7
    5ec8:	f001 f90e 	bl	70e8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    5ecc:	e7bc      	b.n	5e48 <MTPStorage_SD::close()+0x3c>
    5ece:	f504 7a84 	add.w	sl, r4, #264	; 0x108
    uint32_t size = (uint32_t) file_.size();
    5ed2:	4681      	mov	r9, r0
    5ed4:	f10d 0602 	add.w	r6, sp, #2
    5ed8:	466d      	mov	r5, sp
    5eda:	f10d 0806 	add.w	r8, sp, #6
    5ede:	af01      	add	r7, sp, #4
    5ee0:	e7b2      	b.n	5e48 <MTPStorage_SD::close()+0x3c>
    5ee2:	bf00      	nop

00005ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    5ee4:	b570      	push	{r4, r5, r6, lr}
    5ee6:	b0c6      	sub	sp, #280	; 0x118
    5ee8:	4614      	mov	r4, r2
    5eea:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    5eec:	460a      	mov	r2, r1
    5eee:	4601      	mov	r1, r0
    5ef0:	4668      	mov	r0, sp
  {
    5ef2:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    5ef4:	f7ff feb4 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    5ef8:	9900      	ldr	r1, [sp, #0]
    5efa:	1c4b      	adds	r3, r1, #1
    5efc:	d01b      	beq.n	5f36 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    5efe:	4633      	mov	r3, r6
    5f00:	4622      	mov	r2, r4
    5f02:	4628      	mov	r0, r5
    5f04:	f7ff ffee 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5f08:	4620      	mov	r0, r4
    5f0a:	f00c ffb9 	bl	12e80 <strlen>
    5f0e:	4420      	add	r0, r4
    5f10:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5f14:	2b2f      	cmp	r3, #47	; 0x2f
    5f16:	d108      	bne.n	5f2a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    5f18:	4632      	mov	r2, r6
    5f1a:	a906      	add	r1, sp, #24
    5f1c:	4620      	mov	r0, r4
    5f1e:	f00c fc1d 	bl	1275c <strlcat>
      return tmp.store;
    5f22:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    5f26:	b046      	add	sp, #280	; 0x118
    5f28:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5f2a:	4632      	mov	r2, r6
    5f2c:	4905      	ldr	r1, [pc, #20]	; (5f44 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    5f2e:	4620      	mov	r0, r4
    5f30:	f00c fc14 	bl	1275c <strlcat>
    5f34:	e7f0      	b.n	5f18 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    5f36:	4b03      	ldr	r3, [pc, #12]	; (5f44 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    5f38:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    5f3c:	881b      	ldrh	r3, [r3, #0]
    5f3e:	8023      	strh	r3, [r4, #0]
  }
    5f40:	b046      	add	sp, #280	; 0x118
    5f42:	bd70      	pop	{r4, r5, r6, pc}
    5f44:	20000b70 	.word	0x20000b70

00005f48 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    5f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f4a:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    5f52:	4617      	mov	r7, r2
    5f54:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5f56:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    5f58:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5f5a:	f7ff ffc3 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5f5e:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    5f60:	a810      	add	r0, sp, #64	; 0x40
    5f62:	f00c ff8d 	bl	12e80 <strlen>
    5f66:	4601      	mov	r1, r0
    5f68:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5f6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5f6e:	f00a f895 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f72:	4832      	ldr	r0, [pc, #200]	; (603c <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5f74:	f007 fd0c 	bl	d990 <Print::println()>
    Record p1 = ReadIndexRecord(handle);
    5f78:	462a      	mov	r2, r5
    5f7a:	4621      	mov	r1, r4
    5f7c:	a8d0      	add	r0, sp, #832	; 0x340
    5f7e:	f7ff fe6f 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    5f82:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f86:	a9d6      	add	r1, sp, #856	; 0x358
    5f88:	a890      	add	r0, sp, #576	; 0x240
    5f8a:	f00c fc1b 	bl	127c4 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    5f8e:	4639      	mov	r1, r7
    5f90:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f94:	a8d6      	add	r0, sp, #856	; 0x358
    5f96:	f00c fc15 	bl	127c4 <strlcpy>
    WriteIndexRecord(handle, p1);
    5f9a:	aad0      	add	r2, sp, #832	; 0x340
    5f9c:	4629      	mov	r1, r5
    5f9e:	4620      	mov	r0, r4
    5fa0:	f7ff fdba 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5fa4:	f44f 7380 	mov.w	r3, #256	; 0x100
    5fa8:	aa50      	add	r2, sp, #320	; 0x140
    5faa:	4629      	mov	r1, r5
    5fac:	4620      	mov	r0, r4
    5fae:	f7ff ff99 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    5fb2:	a850      	add	r0, sp, #320	; 0x140
    5fb4:	f00c ff64 	bl	12e80 <strlen>
    5fb8:	4601      	mov	r1, r0
    5fba:	a850      	add	r0, sp, #320	; 0x140
    5fbc:	f00a f86e 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fc0:	481e      	ldr	r0, [pc, #120]	; (603c <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5fc2:	f007 fce5 	bl	d990 <Print::println()>
    5fc6:	6db2      	ldr	r2, [r6, #88]	; 0x58
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5fc8:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5fcc:	b1cb      	cbz	r3, 6002 <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5fce:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    5fd2:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5fd4:	aa10      	add	r2, sp, #64	; 0x40
    5fd6:	a802      	add	r0, sp, #8
    5fd8:	e9cd 1301 	strd	r1, r3, [sp, #4]
    5fdc:	f002 ff26 	bl	8e2c <FatFile::open(FatFile*, char const*, int)>
    5fe0:	9901      	ldr	r1, [sp, #4]
    5fe2:	bb20      	cbnz	r0, 602e <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    5fe4:	a990      	add	r1, sp, #576	; 0x240
    5fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fea:	a8d6      	add	r0, sp, #856	; 0x358
    5fec:	f00c fbea 	bl	127c4 <strlcpy>
    WriteIndexRecord(handle, p1);
    5ff0:	4620      	mov	r0, r4
    5ff2:	aad0      	add	r2, sp, #832	; 0x340
    5ff4:	4629      	mov	r1, r5
    5ff6:	f7ff fd8f 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5ffa:	2000      	movs	r0, #0
  }
    5ffc:	f20d 4d5c 	addw	sp, sp, #1116	; 0x45c
    6000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6002:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    6006:	2900      	cmp	r1, #0
    6008:	d0ec      	beq.n	5fe4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    600a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    600e:	aa10      	add	r2, sp, #64	; 0x40
    6010:	a802      	add	r0, sp, #8
    6012:	930e      	str	r3, [sp, #56]	; 0x38
    6014:	9101      	str	r1, [sp, #4]
    6016:	f001 fc15 	bl	7844 <ExFatFile::open(ExFatFile*, char const*, int)>
    601a:	9901      	ldr	r1, [sp, #4]
    601c:	2800      	cmp	r0, #0
    601e:	d0e1      	beq.n	5fe4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    6020:	aa50      	add	r2, sp, #320	; 0x140
    6022:	a802      	add	r0, sp, #8
    6024:	f001 fe9c 	bl	7d60 <ExFatFile::rename(ExFatFile*, char const*)>
    6028:	2800      	cmp	r0, #0
    602a:	d1e7      	bne.n	5ffc <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    602c:	e7da      	b.n	5fe4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    602e:	aa50      	add	r2, sp, #320	; 0x140
    6030:	a802      	add	r0, sp, #8
    6032:	f003 f8db 	bl	91ec <FatFile::rename(FatFile*, char const*)>
    6036:	2800      	cmp	r0, #0
    6038:	d1e0      	bne.n	5ffc <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    603a:	e7d3      	b.n	5fe4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    603c:	20008bb4 	.word	0x20008bb4

00006040 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    6040:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    6044:	428b      	cmp	r3, r1
  {
    6046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    604a:	4604      	mov	r4, r0
    604c:	b0d4      	sub	sp, #336	; 0x150
    604e:	460d      	mov	r5, r1
    6050:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    6052:	d103      	bne.n	605c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    6054:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    6058:	4293      	cmp	r3, r2
    605a:	d02c      	beq.n	60b6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    605c:	f44f 7380 	mov.w	r3, #256	; 0x100
    6060:	4629      	mov	r1, r5
    6062:	4620      	mov	r0, r4
    6064:	aa14      	add	r2, sp, #80	; 0x50
    6066:	f7ff ff3d 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    606a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    606e:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    6070:	f504 7884 	add.w	r8, r4, #264	; 0x108
    6074:	b313      	cbz	r3, 60bc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    6076:	4640      	mov	r0, r8
    6078:	f004 fd28 	bl	aacc <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    607c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    6080:	aa14      	add	r2, sp, #80	; 0x50
    6082:	463b      	mov	r3, r7
    6084:	4668      	mov	r0, sp
    6086:	6db1      	ldr	r1, [r6, #88]	; 0x58
    6088:	f004 fe3a 	bl	ad00 <FsVolume::open(char const*, int)>
class Print
    608c:	9b01      	ldr	r3, [sp, #4]
    608e:	a904      	add	r1, sp, #16
    6090:	4640      	mov	r0, r8
    6092:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    6096:	9b02      	ldr	r3, [sp, #8]
    6098:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    609c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    60a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    60a4:	f004 fcb8 	bl	aa18 <FsBaseFile::operator=(FsBaseFile const&)>
    60a8:	4b07      	ldr	r3, [pc, #28]	; (60c8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    60aa:	a804      	add	r0, sp, #16
    60ac:	9300      	str	r3, [sp, #0]
    60ae:	f004 fd0d 	bl	aacc <FsBaseFile::close()>
    mode_ = mode;
    60b2:	e9c4 7568 	strd	r7, r5, [r4, #416]	; 0x1a0
  }
    60b6:	b054      	add	sp, #336	; 0x150
    60b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    60bc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    60c0:	2b00      	cmp	r3, #0
    60c2:	d1d8      	bne.n	6076 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    60c4:	e7da      	b.n	607c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    60c6:	bf00      	nop
    60c8:	20000c70 	.word	0x20000c70

000060cc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    60cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60ce:	4604      	mov	r4, r0
    60d0:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    60d2:	2200      	movs	r2, #0
  {
    60d4:	461d      	mov	r5, r3
    60d6:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    60d8:	f7ff ffb2 	bl	6040 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    60dc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    60e0:	b1ab      	cbz	r3, 610e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x42>
    60e2:	4631      	mov	r1, r6
    60e4:	4618      	mov	r0, r3
    60e6:	f003 f9bf 	bl	9468 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    60ea:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    60ee:	b128      	cbz	r0, 60fc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    60f0:	463a      	mov	r2, r7
    60f2:	4629      	mov	r1, r5
  }
    60f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60f8:	f002 bf6e 	b.w	8fd8 <FatFile::read(void*, unsigned int)>
    60fc:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->read(buf, count) : -1;
    6100:	b160      	cbz	r0, 611c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    6102:	463a      	mov	r2, r7
    6104:	4629      	mov	r1, r5
    6106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    610a:	f001 b873 	b.w	71f4 <ExFatFile::read(void*, unsigned int)>
    610e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->seekSet(pos) : false;
    6112:	b118      	cbz	r0, 611c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    6114:	4632      	mov	r2, r6
    6116:	f001 f953 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    611a:	e7e6      	b.n	60ea <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>
    611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    611e:	bf00      	nop

00006120 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    6120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    6124:	f1b2 3fff 	cmp.w	r2, #4294967295
    6128:	bf14      	ite	ne
    612a:	4691      	movne	r9, r2
    612c:	4689      	moveq	r9, r1
  {
    612e:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
    6132:	4604      	mov	r4, r0
    6134:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    6136:	464a      	mov	r2, r9
    6138:	4601      	mov	r1, r0
    613a:	a84e      	add	r0, sp, #312	; 0x138
  {
    613c:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    613e:	f7ff fd8f 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    6142:	f44f 7280 	mov.w	r2, #256	; 0x100
    6146:	99e2      	ldr	r1, [sp, #904]	; 0x388
    6148:	a89a      	add	r0, sp, #616	; 0x268
    614a:	f00c fb3b 	bl	127c4 <strlcpy>
  { uint32_t new_record = index_entries_++;
    614e:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    r.child = 0;
    6152:	f04f 0800 	mov.w	r8, #0
    r.scanned = 1;
    6156:	f04f 0a01 	mov.w	sl, #1
  { uint32_t new_record = index_entries_++;
    615a:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    615c:	aa94      	add	r2, sp, #592	; 0x250
    615e:	4629      	mov	r1, r5
    6160:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    6162:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    r.store = p.store;
    6166:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    616a:	f8cd 9250 	str.w	r9, [sp, #592]	; 0x250
    r.store = p.store;
    616e:	f8ad 325e 	strh.w	r3, [sp, #606]	; 0x25e
    r.sibling = p.child;
    6172:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    6174:	f88d 725c 	strb.w	r7, [sp, #604]	; 0x25c
    r.child = 0;
    6178:	f8cd 8254 	str.w	r8, [sp, #596]	; 0x254
    r.sibling = p.child;
    617c:	9396      	str	r3, [sp, #600]	; 0x258
    r.scanned = 1;
    617e:	f88d a25d 	strb.w	sl, [sp, #605]	; 0x25d
    r.mpdate = 0;
    6182:	e9cd 8898 	strd	r8, r8, [sp, #608]	; 0x260
    WriteIndexRecord(new_record, r);
    6186:	f7ff fcc7 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(parent, p);
    618a:	4649      	mov	r1, r9
    618c:	aa4e      	add	r2, sp, #312	; 0x138
    618e:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    6190:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    6192:	f7ff fcc1 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    6196:	b1d7      	cbz	r7, 61ce <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xae>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    6198:	eb04 0686 	add.w	r6, r4, r6, lsl #2
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    619c:	f44f 7380 	mov.w	r3, #256	; 0x100
    61a0:	4629      	mov	r1, r5
    61a2:	4620      	mov	r0, r4
    61a4:	aa0e      	add	r2, sp, #56	; 0x38
    61a6:	f7ff fe9d 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    61aa:	6db3      	ldr	r3, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    61ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    61b0:	b1c0      	cbz	r0, 61e4 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc4>
    return sub.mkdir(vwd(), path, pFlag);
    61b2:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    61b6:	4653      	mov	r3, sl
    61b8:	aa0e      	add	r2, sp, #56	; 0x38
    61ba:	4668      	mov	r0, sp
    61bc:	f8cd 8000 	str.w	r8, [sp]
    61c0:	f002 fdbe 	bl	8d40 <FatFile::mkdir(FatFile*, char const*, bool)>
  }
    61c4:	4628      	mov	r0, r5
    61c6:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    61ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    61ce:	f240 2202 	movw	r2, #514	; 0x202
    61d2:	4629      	mov	r1, r5
    61d4:	4620      	mov	r0, r4
    61d6:	f7ff ff33 	bl	6040 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    61da:	4628      	mov	r0, r5
    61dc:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    61e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61e4:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    61e8:	2900      	cmp	r1, #0
    61ea:	d0f6      	beq.n	61da <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xba>
    61ec:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    61ee:	4653      	mov	r3, sl
    61f0:	aa0e      	add	r2, sp, #56	; 0x38
    61f2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    61f6:	4668      	mov	r0, sp
    61f8:	f001 fe34 	bl	7e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    61fc:	4628      	mov	r0, r5
    61fe:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    6202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6206:	bf00      	nop

00006208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    6208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    620c:	f1b2 3fff 	cmp.w	r2, #4294967295
    6210:	bf14      	ite	ne
    6212:	4616      	movne	r6, r2
    6214:	460e      	moveq	r6, r1
    6216:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    621a:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    621c:	4681      	mov	r9, r0
    Record record = ReadIndexRecord(i);
    621e:	4632      	mov	r2, r6
    6220:	4668      	mov	r0, sp
    6222:	f7ff fd1d 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    6226:	f89d 200c 	ldrb.w	r2, [sp, #12]
    622a:	b112      	cbz	r2, 6232 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    622c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    6230:	b11a      	cbz	r2, 623a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
  }
    6232:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    6236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    623a:	4631      	mov	r1, r6
    623c:	4648      	mov	r0, r9
    623e:	f7ff feff 	bl	6040 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6242:	f8d9 2140 	ldr.w	r2, [r9, #320]	; 0x140
    6246:	2a00      	cmp	r2, #0
    6248:	f000 80b0 	beq.w	63ac <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1a4>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    624c:	2400      	movs	r4, #0
    624e:	f509 77ac 	add.w	r7, r9, #344	; 0x158
    6252:	f509 7b84 	add.w	fp, r9, #264	; 0x108
    6256:	f8df a164 	ldr.w	sl, [pc, #356]	; 63bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b4>
	constexpr Print() : write_error(0) {}
    625a:	4625      	mov	r5, r4
	constexpr Stream() : _timeout(1000), read_error(0) {}
    625c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    6260:	2200      	movs	r2, #0
    6262:	4659      	mov	r1, fp
    6264:	a84a      	add	r0, sp, #296	; 0x128
    6266:	f88d 5124 	strb.w	r5, [sp, #292]	; 0x124
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    626a:	f8cd a118 	str.w	sl, [sp, #280]	; 0x118
    626e:	e9cd 5847 	strd	r5, r8, [sp, #284]	; 0x11c
  FsBaseFile() {}
    6272:	e9cd 5558 	strd	r5, r5, [sp, #352]	; 0x160
    tmpFile.openNext(this, oflag);
    6276:	f004 fc95 	bl	aba4 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    627a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    627c:	a94a      	add	r1, sp, #296	; 0x128
    627e:	4638      	mov	r0, r7
    6280:	f8c9 214c 	str.w	r2, [r9, #332]	; 0x14c
class Stream : public Print
    6284:	9a48      	ldr	r2, [sp, #288]	; 0x120
    6286:	f8c9 2150 	str.w	r2, [r9, #336]	; 0x150
    628a:	f89d 2124 	ldrb.w	r2, [sp, #292]	; 0x124
    628e:	f889 2154 	strb.w	r2, [r9, #340]	; 0x154
    6292:	f004 fbc1 	bl	aa18 <FsBaseFile::operator=(FsBaseFile const&)>
    6296:	4b48      	ldr	r3, [pc, #288]	; (63b8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x1b0>)
  ~FsBaseFile() {close();}
    6298:	a84a      	add	r0, sp, #296	; 0x128
    629a:	9346      	str	r3, [sp, #280]	; 0x118
    629c:	f004 fc16 	bl	aacc <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    62a0:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
    62a4:	2800      	cmp	r0, #0
    62a6:	d051      	beq.n	634c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x144>
        r.store = record.store;
    62a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    62ac:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    62ae:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    62b0:	f8ad 2126 	strh.w	r2, [sp, #294]	; 0x126
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    62b4:	7802      	ldrb	r2, [r0, #0]
    62b6:	f002 0270 	and.w	r2, r2, #112	; 0x70
    62ba:	2a00      	cmp	r2, #0
    62bc:	bf14      	ite	ne
    62be:	2201      	movne	r2, #1
    62c0:	2200      	moveq	r2, #0
    62c2:	f88d 2124 	strb.w	r2, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    62c6:	d03f      	beq.n	6348 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x140>
    62c8:	2200      	movs	r2, #0
    62ca:	9247      	str	r2, [sp, #284]	; 0x11c
    return m_fFile ? m_fFile->getName(name, len) :
    62cc:	a94c      	add	r1, sp, #304	; 0x130
    62ce:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    62d2:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    62d6:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    return m_fFile ? m_fFile->getName(name, len) :
    62da:	f004 f817 	bl	a30c <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    62de:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
    62e2:	b1d0      	cbz	r0, 631a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x112>
    62e4:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    62e8:	a94a      	add	r1, sp, #296	; 0x128
    62ea:	f002 fc53 	bl	8b94 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    62ee:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
    62f2:	b1f8      	cbz	r0, 6334 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
    62f4:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    62f8:	a94b      	add	r1, sp, #300	; 0x12c
    62fa:	f002 fc5b 	bl	8bb4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
  { uint32_t new_record = index_entries_++;
    62fe:	f8d9 41a8 	ldr.w	r4, [r9, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6302:	4648      	mov	r0, r9
    6304:	aa46      	add	r2, sp, #280	; 0x118
  { uint32_t new_record = index_entries_++;
    6306:	1c61      	adds	r1, r4, #1
    6308:	f8c9 11a8 	str.w	r1, [r9, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    630c:	4621      	mov	r1, r4
    630e:	f7ff fc03 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    6312:	4638      	mov	r0, r7
    6314:	f004 fbda 	bl	aacc <FsBaseFile::close()>
      }
    6318:	e7a2      	b.n	6260 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x58>
    631a:	f8d9 0194 	ldr.w	r0, [r9, #404]	; 0x194
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
    631e:	2800      	cmp	r0, #0
    6320:	d0ed      	beq.n	62fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    6322:	f50d 7295 	add.w	r2, sp, #298	; 0x12a
    6326:	a94a      	add	r1, sp, #296	; 0x128
    6328:	f000 fede 	bl	70e8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    632c:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
    6330:	2800      	cmp	r0, #0
    6332:	d1df      	bne.n	62f4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    6334:	f8d9 0194 	ldr.w	r0, [r9, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    6338:	2800      	cmp	r0, #0
    633a:	d0e0      	beq.n	62fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
    633c:	f50d 7297 	add.w	r2, sp, #302	; 0x12e
    6340:	a94b      	add	r1, sp, #300	; 0x12c
    6342:	f000 fee3 	bl	710c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    6346:	e7da      	b.n	62fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf6>
  uint32_t fileSize() const {return m_fileSize;}
    6348:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    634a:	e7be      	b.n	62ca <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xc2>
  bool isOpen() const {return m_fFile || m_xFile;}
    634c:	f8d9 2194 	ldr.w	r2, [r9, #404]	; 0x194
    6350:	b1fa      	cbz	r2, 6392 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x18a>
        r.store = record.store;
    6352:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    6356:	9448      	str	r4, [sp, #288]	; 0x120
        r.parent = i;
    6358:	9646      	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    635a:	f8ad 1126 	strh.w	r1, [sp, #294]	; 0x126
           m_xFile ? m_xFile->isDir() : false;
    635e:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    6362:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    6366:	d010      	beq.n	638a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x182>
        r.isdir = child_.isDirectory();
    6368:	2101      	movs	r1, #1
    636a:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    636e:	9047      	str	r0, [sp, #284]	; 0x11c
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    6370:	a94c      	add	r1, sp, #304	; 0x130
    6372:	4610      	mov	r0, r2
    6374:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    6378:	f88d 5125 	strb.w	r5, [sp, #293]	; 0x125
    *name = 0;
    637c:	f88d 5130 	strb.w	r5, [sp, #304]	; 0x130
    6380:	f001 ffb4 	bl	82ec <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
    6384:	f8d9 0190 	ldr.w	r0, [r9, #400]	; 0x190
    6388:	e7ab      	b.n	62e2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.isdir = child_.isDirectory();
    638a:	f88d 1124 	strb.w	r1, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    638e:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    6390:	e7ed      	b.n	636e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x166>
      record.scanned = true;
    6392:	2501      	movs	r5, #1
      WriteIndexRecord(i, record);
    6394:	4631      	mov	r1, r6
    6396:	4648      	mov	r0, r9
    6398:	466a      	mov	r2, sp
      record.child = sibling;
    639a:	9401      	str	r4, [sp, #4]
      record.scanned = true;
    639c:	f88d 500d 	strb.w	r5, [sp, #13]
      WriteIndexRecord(i, record);
    63a0:	f7ff fbba 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    63a4:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
    63a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    63ac:	f8d9 2144 	ldr.w	r2, [r9, #324]	; 0x144
    63b0:	2a00      	cmp	r2, #0
    63b2:	f47f af4b 	bne.w	624c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    63b6:	e73c      	b.n	6232 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    63b8:	20000c70 	.word	0x20000c70
    63bc:	20000d98 	.word	0x20000d98

000063c0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    63c0:	b510      	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    63c2:	f1b2 3fff 	cmp.w	r2, #4294967295
    63c6:	bf08      	it	eq
    63c8:	460a      	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    63ca:	b0c8      	sub	sp, #288	; 0x120
    63cc:	4604      	mov	r4, r0
      ScanDir(store, parent);
    63ce:	9201      	str	r2, [sp, #4]
    63d0:	f7ff ff1a 	bl	6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    63d4:	2301      	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    63d6:	9a01      	ldr	r2, [sp, #4]
    63d8:	4621      	mov	r1, r4
    63da:	a802      	add	r0, sp, #8
      follow_sibling_ = true;
    63dc:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    63e0:	f7ff fc3e 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    63e4:	9b03      	ldr	r3, [sp, #12]
    63e6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  }
    63ea:	b048      	add	sp, #288	; 0x120
    63ec:	bd10      	pop	{r4, pc}
    63ee:	bf00      	nop

000063f0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    63f0:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
  { 
    63f4:	b570      	push	{r4, r5, r6, lr}
    63f6:	4605      	mov	r5, r0
    63f8:	460e      	mov	r6, r1
    63fa:	4614      	mov	r4, r2
  { if (index_generated) return; 
    63fc:	b323      	cbz	r3, 6448 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x58>
    if (parent) 
    63fe:	b134      	cbz	r4, 640e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1e>
    6400:	4622      	mov	r2, r4
    6402:	4631      	mov	r1, r6
    6404:	4628      	mov	r0, r5
  }
    6406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    640a:	f7ff bfd9 	b.w	63c0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
  { if (all_scanned_) return;
    640e:	f895 31ad 	ldrb.w	r3, [r5, #429]	; 0x1ad
    6412:	b993      	cbnz	r3, 643a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    all_scanned_ = true;
    6414:	2201      	movs	r2, #1
  { if (index_generated) return; 
    6416:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
    all_scanned_ = true;
    641a:	f885 21ad 	strb.w	r2, [r5, #429]	; 0x1ad
  { if (index_generated) return; 
    641e:	b1b3      	cbz	r3, 644e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5e>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    6420:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    6424:	b14b      	cbz	r3, 643a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    6426:	4622      	mov	r2, r4
    6428:	4631      	mov	r1, r6
    642a:	4628      	mov	r0, r5
    642c:	3401      	adds	r4, #1
    642e:	f7ff feeb 	bl	6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    6432:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    6436:	429c      	cmp	r4, r3
    6438:	d3f5      	bcc.n	6426 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x36>
      follow_sibling_ = false;
    643a:	2200      	movs	r2, #0
      next_ = 1;
    643c:	2301      	movs	r3, #1
      follow_sibling_ = false;
    643e:	f885 21b4 	strb.w	r2, [r5, #436]	; 0x1b4
      next_ = 1;
    6442:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
  }
    6446:	bd70      	pop	{r4, r5, r6, pc}
    6448:	f7ff fbaa 	bl	5ba0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    644c:	e7d7      	b.n	63fe <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    644e:	4628      	mov	r0, r5
    6450:	f7ff fba6 	bl	5ba0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    6454:	e7e4      	b.n	6420 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
    6456:	bf00      	nop

00006458 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    6458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    645c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    6460:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    6464:	2300      	movs	r3, #0
    6466:	4681      	mov	r9, r0
    6468:	4688      	mov	r8, r1
    646a:	a804      	add	r0, sp, #16
    646c:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
    6470:	4615      	mov	r5, r2
    6472:	f004 fc45 	bl	ad00 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    6476:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6478:	2b00      	cmp	r3, #0
    647a:	f000 80c7 	beq.w	660c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1b4>
  if(f1.isDirectory())
    647e:	781b      	ldrb	r3, [r3, #0]
    6480:	f013 0f70 	tst.w	r3, #112	; 0x70
    6484:	f000 80ca 	beq.w	661c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    648c:	2400      	movs	r4, #0
    648e:	af08      	add	r7, sp, #32
    6490:	4e7e      	ldr	r6, [pc, #504]	; (668c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    6492:	931a      	str	r3, [sp, #104]	; 0x68
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    6494:	f8df b200 	ldr.w	fp, [pc, #512]	; 6698 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6498:	4b7d      	ldr	r3, [pc, #500]	; (6690 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    649a:	9419      	str	r4, [sp, #100]	; 0x64
    649c:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    64a0:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    64a2:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    64a6:	4b7a      	ldr	r3, [pc, #488]	; (6690 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    tmpFile.openNext(this, oflag);
    64a8:	2200      	movs	r2, #0
    64aa:	4639      	mov	r1, r7
    64ac:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    64ae:	932c      	str	r3, [sp, #176]	; 0xb0
    64b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    64b4:	942d      	str	r4, [sp, #180]	; 0xb4
    64b6:	932e      	str	r3, [sp, #184]	; 0xb8
    64b8:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    64bc:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    64c0:	f004 fb70 	bl	aba4 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    64c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    64c6:	a930      	add	r1, sp, #192	; 0xc0
    64c8:	a81c      	add	r0, sp, #112	; 0x70
    64ca:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    64cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    64ce:	931a      	str	r3, [sp, #104]	; 0x68
    64d0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    64d4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    64d8:	f004 fa9e 	bl	aa18 <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    64dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    64de:	2b00      	cmp	r3, #0
    64e0:	d04f      	beq.n	6582 <MTPStorage_SD::removeFile(unsigned long, char*)+0x12a>
  ~FsBaseFile() {close();}
    64e2:	a830      	add	r0, sp, #192	; 0xc0
    64e4:	962c      	str	r6, [sp, #176]	; 0xb0
    64e6:	f004 faf1 	bl	aacc <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    64ea:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    64ec:	f88d 4200 	strb.w	r4, [sp, #512]	; 0x200
    return m_fFile ? m_fFile->getName(name, len) :
    64f0:	2800      	cmp	r0, #0
    64f2:	d03d      	beq.n	6570 <MTPStorage_SD::removeFile(unsigned long, char*)+0x118>
    64f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    64f8:	a980      	add	r1, sp, #512	; 0x200
    64fa:	f003 ff07 	bl	a30c <FatFile::getName(char*, unsigned int)>
    64fe:	ab80      	add	r3, sp, #512	; 0x200
    6500:	f44f 7180 	mov.w	r1, #256	; 0x100
    6504:	465a      	mov	r2, fp
    6506:	9300      	str	r3, [sp, #0]
    6508:	eb0d 0001 	add.w	r0, sp, r1
    650c:	462b      	mov	r3, r5
    650e:	f00b fee9 	bl	122e4 <snprintf>
    return m_fFile ? m_fFile->isDir() :
    6512:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    6514:	b14b      	cbz	r3, 652a <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    6516:	781b      	ldrb	r3, [r3, #0]
    6518:	f013 0f70 	tst.w	r3, #112	; 0x70
    651c:	d00c      	beq.n	6538 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    651e:	aa40      	add	r2, sp, #256	; 0x100
    6520:	4641      	mov	r1, r8
    6522:	4648      	mov	r0, r9
    6524:	f7ff ff98 	bl	6458 <MTPStorage_SD::removeFile(unsigned long, char*)>
    6528:	e7bd      	b.n	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    652a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    652c:	b123      	cbz	r3, 6538 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    652e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6532:	f013 0f50 	tst.w	r3, #80	; 0x50
    6536:	d1f2      	bne.n	651e <MTPStorage_SD::removeFile(unsigned long, char*)+0xc6>
							  return write((const uint8_t *)str, strlen(str)); }
    6538:	a840      	add	r0, sp, #256	; 0x100
    653a:	f00c fca1 	bl	12e80 <strlen>
    653e:	4601      	mov	r1, r0
    6540:	a840      	add	r0, sp, #256	; 0x100
    6542:	f009 fdab 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6546:	4853      	ldr	r0, [pc, #332]	; (6694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6548:	f007 fa22 	bl	d990 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    654c:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    6550:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    6554:	2900      	cmp	r1, #0
    6556:	d036      	beq.n	65c6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x16e>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6558:	aa40      	add	r2, sp, #256	; 0x100
    655a:	2301      	movs	r3, #1
    655c:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    655e:	942c      	str	r4, [sp, #176]	; 0xb0
    6560:	f002 fce6 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    6564:	2800      	cmp	r0, #0
    6566:	d09e      	beq.n	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    6568:	a82c      	add	r0, sp, #176	; 0xb0
    656a:	f003 fd41 	bl	9ff0 <FatFile::remove()>
    656e:	e79a      	b.n	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    6570:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    6572:	2800      	cmp	r0, #0
    6574:	d0c3      	beq.n	64fe <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
    6576:	f44f 7280 	mov.w	r2, #256	; 0x100
    657a:	a980      	add	r1, sp, #512	; 0x200
    657c:	f001 feb6 	bl	82ec <ExFatFile::getName8(char*, unsigned int)>
    6580:	e7bd      	b.n	64fe <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
  bool isOpen() const {return m_fFile || m_xFile;}
    6582:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    6584:	2b00      	cmp	r3, #0
    6586:	d1ac      	bne.n	64e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    6588:	a830      	add	r0, sp, #192	; 0xc0
    658a:	9303      	str	r3, [sp, #12]
    658c:	962c      	str	r6, [sp, #176]	; 0xb0
    658e:	f004 fa9d 	bl	aacc <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    6592:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    6596:	9b03      	ldr	r3, [sp, #12]
    6598:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    659c:	b330      	cbz	r0, 65ec <MTPStorage_SD::removeFile(unsigned long, char*)+0x194>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    659e:	4601      	mov	r1, r0
    65a0:	462a      	mov	r2, r5
    65a2:	a82c      	add	r0, sp, #176	; 0xb0
    65a4:	932c      	str	r3, [sp, #176]	; 0xb0
    65a6:	f002 fcc3 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    65aa:	2800      	cmp	r0, #0
    65ac:	d164      	bne.n	6678 <MTPStorage_SD::removeFile(unsigned long, char*)+0x220>
    65ae:	a81c      	add	r0, sp, #112	; 0x70
    65b0:	9618      	str	r6, [sp, #96]	; 0x60
    65b2:	f004 fa8b 	bl	aacc <FsBaseFile::close()>
    65b6:	4638      	mov	r0, r7
    65b8:	9604      	str	r6, [sp, #16]
    65ba:	f004 fa87 	bl	aacc <FsBaseFile::close()>
}
    65be:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
    65c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65c6:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    65ca:	2b00      	cmp	r3, #0
    65cc:	f43f af6b 	beq.w	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    65d0:	9138      	str	r1, [sp, #224]	; 0xe0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    65d2:	aa40      	add	r2, sp, #256	; 0x100
    65d4:	4619      	mov	r1, r3
    65d6:	a82c      	add	r0, sp, #176	; 0xb0
    65d8:	2301      	movs	r3, #1
    65da:	f001 f9af 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    65de:	2800      	cmp	r0, #0
    65e0:	f43f af61 	beq.w	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    65e4:	a82c      	add	r0, sp, #176	; 0xb0
    65e6:	f001 fa0d 	bl	7a04 <ExFatFile::remove()>
    65ea:	e75c      	b.n	64a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    65ec:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    65f0:	2900      	cmp	r1, #0
    65f2:	d0dc      	beq.n	65ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    65f4:	4603      	mov	r3, r0
    65f6:	9038      	str	r0, [sp, #224]	; 0xe0
    65f8:	462a      	mov	r2, r5
    65fa:	a82c      	add	r0, sp, #176	; 0xb0
    65fc:	f001 f99e 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6600:	2800      	cmp	r0, #0
    6602:	d0d4      	beq.n	65ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    6604:	a82c      	add	r0, sp, #176	; 0xb0
    6606:	f001 fa57 	bl	7ab8 <ExFatFile::rmdir()>
    660a:	e7d0      	b.n	65ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    660c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    660e:	b12b      	cbz	r3, 661c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
    6610:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6614:	f013 0f50 	tst.w	r3, #80	; 0x50
    6618:	f47f af36 	bne.w	6488 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    661c:	b135      	cbz	r5, 662c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1d4>
							  return write((const uint8_t *)str, strlen(str)); }
    661e:	4628      	mov	r0, r5
    6620:	f00c fc2e 	bl	12e80 <strlen>
    6624:	4601      	mov	r1, r0
    6626:	4628      	mov	r0, r5
    6628:	f009 fd38 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    662c:	4819      	ldr	r0, [pc, #100]	; (6694 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    662e:	f007 f9af 	bl	d990 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6632:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    6636:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    663a:	b15b      	cbz	r3, 6654 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    663c:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    663e:	4619      	mov	r1, r3
    6640:	462a      	mov	r2, r5
    6642:	2301      	movs	r3, #1
    6644:	9080      	str	r0, [sp, #512]	; 0x200
    6646:	a880      	add	r0, sp, #512	; 0x200
    6648:	f002 fc72 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    664c:	b9c0      	cbnz	r0, 6680 <MTPStorage_SD::removeFile(unsigned long, char*)+0x228>
    664e:	af08      	add	r7, sp, #32
    6650:	4e0e      	ldr	r6, [pc, #56]	; (668c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    6652:	e7b0      	b.n	65b6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    6654:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6658:	2900      	cmp	r1, #0
    665a:	d0f8      	beq.n	664e <MTPStorage_SD::removeFile(unsigned long, char*)+0x1f6>
    665c:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    665e:	462a      	mov	r2, r5
    6660:	2301      	movs	r3, #1
    6662:	a880      	add	r0, sp, #512	; 0x200
    6664:	af08      	add	r7, sp, #32
    6666:	4e09      	ldr	r6, [pc, #36]	; (668c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    6668:	f001 f968 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    666c:	2800      	cmp	r0, #0
    666e:	d0a2      	beq.n	65b6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    6670:	a880      	add	r0, sp, #512	; 0x200
    6672:	f001 f9c7 	bl	7a04 <ExFatFile::remove()>
    6676:	e79e      	b.n	65b6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6678:	a82c      	add	r0, sp, #176	; 0xb0
    667a:	f002 fead 	bl	93d8 <FatFile::rmdir()>
    667e:	e796      	b.n	65ae <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6680:	a880      	add	r0, sp, #512	; 0x200
    6682:	af08      	add	r7, sp, #32
    6684:	4e01      	ldr	r6, [pc, #4]	; (668c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    6686:	f003 fcb3 	bl	9ff0 <FatFile::remove()>
    668a:	e794      	b.n	65b6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    668c:	20000c70 	.word	0x20000c70
    6690:	20000d98 	.word	0x20000d98
    6694:	20008bb4 	.word	0x20008bb4
    6698:	20000b4c 	.word	0x20000b4c

0000669c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	f5ad 6dac 	sub.w	sp, sp, #1376	; 0x560
    66a2:	4604      	mov	r4, r0
    66a4:	460d      	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    66a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    66aa:	aa46      	add	r2, sp, #280	; 0x118
    66ac:	f7ff fc1a 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    66b0:	462a      	mov	r2, r5
    66b2:	4621      	mov	r1, r4
    66b4:	a886      	add	r0, sp, #536	; 0x218
    66b6:	f7ff fad3 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    66ba:	aa46      	add	r2, sp, #280	; 0x118
    66bc:	f8bd 1226 	ldrh.w	r1, [sp, #550]	; 0x226
    66c0:	4620      	mov	r0, r4
    66c2:	f7ff fec9 	bl	6458 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    66c6:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    66c8:	aa86      	add	r2, sp, #536	; 0x218
    66ca:	4629      	mov	r1, r5
    66cc:	4620      	mov	r0, r4
    r.name[0]=0;
    66ce:	f88d 3230 	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    66d2:	f7ff fa21 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    66d6:	9a86      	ldr	r2, [sp, #536]	; 0x218
    66d8:	4621      	mov	r1, r4
    66da:	a8cc      	add	r0, sp, #816	; 0x330
    66dc:	f7ff fac0 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    66e0:	9ecd      	ldr	r6, [sp, #820]	; 0x334
    66e2:	42b5      	cmp	r5, r6
    66e4:	d025      	beq.n	6732 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x96>
      Record x = ReadIndexRecord(is);
    66e6:	4632      	mov	r2, r6
    66e8:	4621      	mov	r1, r4
    66ea:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    66ee:	f7ff fab7 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    66f2:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    66f6:	4295      	cmp	r5, r2
    66f8:	d00f      	beq.n	671a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x7e>
    66fa:	4621      	mov	r1, r4
    66fc:	4668      	mov	r0, sp
    66fe:	4616      	mov	r6, r2
    6700:	f7ff faae 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6704:	f44f 728c 	mov.w	r2, #280	; 0x118
    6708:	4669      	mov	r1, sp
    670a:	f50d 6089 	add.w	r0, sp, #1096	; 0x448
    670e:	f007 ff45 	bl	e59c <memcpy>
    6712:	f8dd 2450 	ldr.w	r2, [sp, #1104]	; 0x450
    6716:	4295      	cmp	r5, r2
    6718:	d1ef      	bne.n	66fa <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      x.sibling = r.sibling;
    671a:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    671c:	f50d 6289 	add.w	r2, sp, #1096	; 0x448
    6720:	4631      	mov	r1, r6
    6722:	4620      	mov	r0, r4
      x.sibling = r.sibling;
    6724:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    6728:	f7ff f9f6 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    672c:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    6730:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    6732:	9b88      	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    6734:	aacc      	add	r2, sp, #816	; 0x330
    6736:	9986      	ldr	r1, [sp, #536]	; 0x218
    6738:	4620      	mov	r0, r4
      t.child = r.sibling;
    673a:	93cd      	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(r.parent, t);
    673c:	f7ff f9ec 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    6740:	f50d 6dac 	add.w	sp, sp, #1376	; 0x560
    6744:	bd70      	pop	{r4, r5, r6, pc}
    6746:	bf00      	nop

00006748 <MTPStorage_SD::DeleteObject(unsigned long)>:
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    6748:	1c4a      	adds	r2, r1, #1
    674a:	d004      	beq.n	6756 <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
  {
    674c:	b508      	push	{r3, lr}
    674e:	f7ff ffa5 	bl	669c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    6752:	2001      	movs	r0, #1
    6754:	bd08      	pop	{r3, pc}
    6756:	2001      	movs	r0, #1
    6758:	4770      	bx	lr
    675a:	bf00      	nop

0000675c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    675c:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    675e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6762:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    6766:	4605      	mov	r5, r0
    6768:	461e      	mov	r6, r3
    676a:	6d49      	ldr	r1, [r1, #84]	; 0x54
    676c:	2300      	movs	r3, #0
    676e:	4668      	mov	r0, sp
    6770:	f004 fac6 	bl	ad00 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6774:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6776:	2b00      	cmp	r3, #0
    6778:	f000 8082 	beq.w	6880 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    677c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    6780:	f240 2302 	movw	r3, #514	; 0x202
    6784:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    6788:	a814      	add	r0, sp, #80	; 0x50
    678a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    678c:	f004 fab8 	bl	ad00 <FsVolume::open(char const*, int)>
    6790:	9b26      	ldr	r3, [sp, #152]	; 0x98
    6792:	2b00      	cmp	r3, #0
    6794:	d07f      	beq.n	6896 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    6796:	f04f 34ff 	mov.w	r4, #4294967295
    679a:	e006      	b.n	67aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    679c:	4622      	mov	r2, r4
    679e:	a928      	add	r1, sp, #160	; 0xa0
    67a0:	f002 ff98 	bl	96d4 <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    67a4:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    67a8:	db1e      	blt.n	67e8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    67aa:	9812      	ldr	r0, [sp, #72]	; 0x48
    67ac:	2800      	cmp	r0, #0
    67ae:	d03c      	beq.n	682a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    67b0:	7803      	ldrb	r3, [r0, #0]
    67b2:	071a      	lsls	r2, r3, #28
    67b4:	d521      	bpl.n	67fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    67b6:	69c2      	ldr	r2, [r0, #28]
    67b8:	6943      	ldr	r3, [r0, #20]
    67ba:	429a      	cmp	r2, r3
    67bc:	d01d      	beq.n	67fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    67be:	f44f 6200 	mov.w	r2, #2048	; 0x800
    67c2:	a928      	add	r1, sp, #160	; 0xa0
    67c4:	f002 fc08 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    67c8:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    67ca:	2c00      	cmp	r4, #0
    67cc:	db4a      	blt.n	6864 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    67ce:	9826      	ldr	r0, [sp, #152]	; 0x98
    67d0:	2800      	cmp	r0, #0
    67d2:	d1e3      	bne.n	679c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    67d4:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    67d6:	2800      	cmp	r0, #0
    67d8:	d0e4      	beq.n	67a4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    67da:	4622      	mov	r2, r4
    67dc:	a928      	add	r1, sp, #160	; 0xa0
    67de:	f001 fc1f 	bl	8020 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    67e2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    67e6:	dae0      	bge.n	67aa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    67e8:	ad04      	add	r5, sp, #16
  f2.close();
    67ea:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    67ec:	4628      	mov	r0, r5
    67ee:	f004 f96d 	bl	aacc <FsBaseFile::close()>
  f2.close();
    67f2:	4630      	mov	r0, r6
    67f4:	f004 f96a 	bl	aacc <FsBaseFile::close()>
    67f8:	e009      	b.n	680e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    67fa:	ad04      	add	r5, sp, #16
  f2.close();
    67fc:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    67fe:	4628      	mov	r0, r5
    6800:	f004 f964 	bl	aacc <FsBaseFile::close()>
  f2.close();
    6804:	4630      	mov	r0, r6
    6806:	f004 f961 	bl	aacc <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    680a:	3401      	adds	r4, #1
    680c:	d032      	beq.n	6874 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    680e:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    6810:	4630      	mov	r0, r6
    6812:	4e28      	ldr	r6, [pc, #160]	; (68b4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    6814:	9614      	str	r6, [sp, #80]	; 0x50
    6816:	f004 f959 	bl	aacc <FsBaseFile::close()>
    681a:	4628      	mov	r0, r5
    681c:	9600      	str	r6, [sp, #0]
    681e:	f004 f955 	bl	aacc <FsBaseFile::close()>
}
    6822:	4620      	mov	r0, r4
    6824:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    6828:	bd70      	pop	{r4, r5, r6, pc}
    682a:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    682c:	2800      	cmp	r0, #0
    682e:	d0e4      	beq.n	67fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    6830:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6834:	071b      	lsls	r3, r3, #28
    6836:	d5e0      	bpl.n	67fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    6838:	6903      	ldr	r3, [r0, #16]
    683a:	6801      	ldr	r1, [r0, #0]
    683c:	6942      	ldr	r2, [r0, #20]
    683e:	1a5b      	subs	r3, r3, r1
    6840:	6845      	ldr	r5, [r0, #4]
    6842:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    6846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    684a:	f172 0200 	sbcs.w	r2, r2, #0
    684e:	d201      	bcs.n	6854 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    6850:	2b00      	cmp	r3, #0
    6852:	d0d2      	beq.n	67fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    6854:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6858:	a928      	add	r1, sp, #160	; 0xa0
    685a:	f000 fccb 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    685e:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    6860:	2c00      	cmp	r4, #0
    6862:	dab4      	bge.n	67ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    6864:	ad04      	add	r5, sp, #16
  f2.close();
    6866:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    6868:	4628      	mov	r0, r5
    686a:	f004 f92f 	bl	aacc <FsBaseFile::close()>
  f2.close();
    686e:	4630      	mov	r0, r6
    6870:	f004 f92c 	bl	aacc <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    6874:	f240 20c1 	movw	r0, #705	; 0x2c1
    6878:	2400      	movs	r4, #0
    687a:	f7fe ffcf 	bl	581c <dbgPrint(unsigned short)>
    687e:	e7c7      	b.n	6810 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    6880:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    6882:	2c00      	cmp	r4, #0
    6884:	f47f af7a 	bne.w	677c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6888:	f240 20b2 	movw	r0, #690	; 0x2b2
    688c:	ad04      	add	r5, sp, #16
    688e:	4e09      	ldr	r6, [pc, #36]	; (68b4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    6890:	f7fe ffc4 	bl	581c <dbgPrint(unsigned short)>
    6894:	e7c1      	b.n	681a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    6896:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    6898:	2c00      	cmp	r4, #0
    689a:	f47f af7c 	bne.w	6796 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    689e:	ad04      	add	r5, sp, #16
    68a0:	ae18      	add	r6, sp, #96	; 0x60
    68a2:	4628      	mov	r0, r5
    68a4:	f004 f912 	bl	aacc <FsBaseFile::close()>
    68a8:	f240 20b5 	movw	r0, #693	; 0x2b5
    68ac:	f7fe ffb6 	bl	581c <dbgPrint(unsigned short)>
    68b0:	e7ae      	b.n	6810 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    68b2:	bf00      	nop
    68b4:	20000c70 	.word	0x20000c70

000068b8 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    68b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68bc:	f5ad 6daa 	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    68c0:	f1b3 3fff 	cmp.w	r3, #4294967295
    68c4:	bf14      	ite	ne
    68c6:	461f      	movne	r7, r3
    68c8:	4617      	moveq	r7, r2
  { 
    68ca:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    68cc:	460a      	mov	r2, r1
  { 
    68ce:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    68d0:	4601      	mov	r1, r0
    68d2:	a882      	add	r0, sp, #520	; 0x208
    68d4:	f7ff f9c4 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    68d8:	463a      	mov	r2, r7
    68da:	4621      	mov	r1, r4
    68dc:	a8c8      	add	r0, sp, #800	; 0x320
    68de:	f7ff f9bf 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    68e2:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    68e6:	f1b8 0f00 	cmp.w	r8, #0
    68ea:	d022      	beq.n	6932 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x7a>
      ScanDir(p1.store+1,handle);
    68ec:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    68f0:	4632      	mov	r2, r6
    68f2:	4620      	mov	r0, r4
    68f4:	3101      	adds	r1, #1
    68f6:	f7ff fc87 	bl	6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    68fa:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    68fe:	6821      	ldr	r1, [r4, #0]
    6900:	a888      	add	r0, sp, #544	; 0x220
    6902:	3b00      	subs	r3, #0
    6904:	463a      	mov	r2, r7
    6906:	9000      	str	r0, [sp, #0]
    6908:	4620      	mov	r0, r4
    690a:	bf18      	it	ne
    690c:	2301      	movne	r3, #1
    690e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
    6910:	f8bd 132e 	ldrh.w	r1, [sp, #814]	; 0x32e
    6914:	47a8      	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    6916:	6823      	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    6918:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    691a:	4631      	mov	r1, r6
    691c:	f8bd 232e 	ldrh.w	r2, [sp, #814]	; 0x32e
    6920:	4620      	mov	r0, r4
    6922:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    6924:	462b      	mov	r3, r5
    6926:	47b0      	blx	r6
  }
    6928:	4628      	mov	r0, r5
    692a:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    692e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    6932:	a988      	add	r1, sp, #544	; 0x220
    6934:	f44f 7280 	mov.w	r2, #256	; 0x100
    6938:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
    693c:	f00b ff42 	bl	127c4 <strlcpy>
  { uint32_t new_record = index_entries_++;
    6940:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6944:	f50d 6287 	add.w	r2, sp, #1080	; 0x438
    6948:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    694a:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    694c:	4629      	mov	r1, r5
      r.parent = newParent;
    694e:	f8cd 7438 	str.w	r7, [sp, #1080]	; 0x438
  { uint32_t new_record = index_entries_++;
    6952:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      r.store = p2.store;
    6956:	f8bd 332e 	ldrh.w	r3, [sp, #814]	; 0x32e
      r.child = 0;
    695a:	f8cd 843c 	str.w	r8, [sp, #1084]	; 0x43c
      r.store = p2.store;
    695e:	f8ad 3446 	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    6962:	9bc9      	ldr	r3, [sp, #804]	; 0x324
      r.isdir = 0;
    6964:	f8ad 8444 	strh.w	r8, [sp, #1092]	; 0x444
      r.sibling = p2.child;
    6968:	f8cd 3440 	str.w	r3, [sp, #1088]	; 0x440
    WriteIndexRecord(new_record, r);
    696c:	f7ff f8d4 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    6970:	4639      	mov	r1, r7
    6972:	aac8      	add	r2, sp, #800	; 0x320
    6974:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    6976:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    6978:	95c9      	str	r5, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    697a:	f7ff f8cd 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    697e:	4631      	mov	r1, r6
    6980:	aa02      	add	r2, sp, #8
    6982:	f44f 7380 	mov.w	r3, #256	; 0x100
    6986:	4620      	mov	r0, r4
    6988:	f7ff faac 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    698c:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    698e:	463a      	mov	r2, r7
    6990:	4629      	mov	r1, r5
    6992:	f44f 7380 	mov.w	r3, #256	; 0x100
    6996:	4620      	mov	r0, r4
    6998:	f7ff faa4 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    699c:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    699e:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    69a0:	4631      	mov	r1, r6
    69a2:	1d20      	adds	r0, r4, #4
    69a4:	9700      	str	r7, [sp, #0]
    69a6:	f7ff fed9 	bl	675c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    69aa:	4628      	mov	r0, r5
    69ac:	f50d 6daa 	add.w	sp, sp, #1360	; 0x550
    69b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000069b4 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    69b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69b8:	f5ad 6dd4 	sub.w	sp, sp, #1696	; 0x6a0
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    69bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    69c0:	bf14      	ite	ne
    69c2:	4698      	movne	r8, r3
    69c4:	4690      	moveq	r8, r2
{ // assume handle and newHandle point to existing directories
    69c6:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    69c8:	460a      	mov	r2, r1
    69ca:	4601      	mov	r1, r0
    69cc:	a890      	add	r0, sp, #576	; 0x240
    69ce:	f7ff f947 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    69d2:	4642      	mov	r2, r8
    69d4:	4621      	mov	r1, r4
    69d6:	a8d6      	add	r0, sp, #856	; 0x358
  Record p1=ReadIndexRecord(handle);
    69d8:	f8bd 724e 	ldrh.w	r7, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    69dc:	f7ff f940 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    69e0:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    69e2:	2e00      	cmp	r6, #0
    69e4:	f000 8082 	beq.w	6aec <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x138>
  uint32_t iy= 0;
    69e8:	2500      	movs	r5, #0
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    69ea:	f104 0904 	add.w	r9, r4, #4
    69ee:	e025      	b.n	6a3c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
      sd_mkdir(py.store,newfilename);
    69f0:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
  FatFile() {}
    69f4:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    69f8:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    69fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    69fe:	6d99      	ldr	r1, [r3, #88]	; 0x58
    6a00:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6a02:	f8d1 0480 	ldr.w	r0, [r1, #1152]	; 0x480
    6a06:	2800      	cmp	r0, #0
    6a08:	d063      	beq.n	6ad2 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x11e>
    6a0a:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    6a0e:	a802      	add	r0, sp, #8
    6a10:	f8cd c008 	str.w	ip, [sp, #8]
    6a14:	f002 f994 	bl	8d40 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    6a18:	4632      	mov	r2, r6
    6a1a:	4639      	mov	r1, r7
    6a1c:	4620      	mov	r0, r4
    6a1e:	f7ff fbf3 	bl	6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    6a22:	6821      	ldr	r1, [r4, #0]
    6a24:	462b      	mov	r3, r5
    6a26:	f8bd 2366 	ldrh.w	r2, [sp, #870]	; 0x366
    6a2a:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
    6a2e:	4620      	mov	r0, r4
    6a30:	4631      	mov	r1, r6
    6a32:	47d0      	blx	sl
    ix = px.sibling;
    6a34:	f8dd 6478 	ldr.w	r6, [sp, #1144]	; 0x478
  while(ix)
    6a38:	2e00      	cmp	r6, #0
    6a3a:	d03f      	beq.n	6abc <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    Record px = ReadIndexRecord(ix) ;
    6a3c:	4632      	mov	r2, r6
    6a3e:	4621      	mov	r1, r4
    6a40:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
    6a44:	f7ff f90c 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    6a48:	f50d 618e 	add.w	r1, sp, #1136	; 0x470
    6a4c:	f44f 728c 	mov.w	r2, #280	; 0x118
    6a50:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    6a54:	f007 fda2 	bl	e59c <memcpy>
    py.sibling = iy;
    6a58:	f8cd 5590 	str.w	r5, [sp, #1424]	; 0x590
  { uint32_t new_record = index_entries_++;
    6a5c:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6a60:	f50d 62b1 	add.w	r2, sp, #1416	; 0x588
    py.store = p2.store;
    6a64:	f8bd 1366 	ldrh.w	r1, [sp, #870]	; 0x366
    WriteIndexRecord(new_record, r);
    6a68:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    6a6a:	1c6b      	adds	r3, r5, #1
    py.parent = newHandle;
    6a6c:	f8cd 8588 	str.w	r8, [sp, #1416]	; 0x588
    py.store = p2.store;
    6a70:	f8ad 1596 	strh.w	r1, [sp, #1430]	; 0x596
    WriteIndexRecord(new_record, r);
    6a74:	4629      	mov	r1, r5
  { uint32_t new_record = index_entries_++;
    6a76:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6a7a:	f7ff f84d 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    6a7e:	4631      	mov	r1, r6
    6a80:	aa10      	add	r2, sp, #64	; 0x40
    6a82:	f44f 7380 	mov.w	r3, #256	; 0x100
    6a86:	4620      	mov	r0, r4
    6a88:	f7ff fa2c 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    6a8c:	aa50      	add	r2, sp, #320	; 0x140
    6a8e:	4629      	mov	r1, r5
    6a90:	f44f 7380 	mov.w	r3, #256	; 0x100
    6a94:	4620      	mov	r0, r4
    6a96:	f7ff fa25 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    6a9a:	f89d 3594 	ldrb.w	r3, [sp, #1428]	; 0x594
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    6a9e:	aa10      	add	r2, sp, #64	; 0x40
    6aa0:	4639      	mov	r1, r7
    6aa2:	4648      	mov	r0, r9
    if(py.isdir) 
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d1a3      	bne.n	69f0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    6aa8:	ae50      	add	r6, sp, #320	; 0x140
    6aaa:	f8bd 3596 	ldrh.w	r3, [sp, #1430]	; 0x596
    6aae:	9600      	str	r6, [sp, #0]
    6ab0:	f7ff fe54 	bl	675c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    ix = px.sibling;
    6ab4:	f8dd 6478 	ldr.w	r6, [sp, #1144]	; 0x478
  while(ix)
    6ab8:	2e00      	cmp	r6, #0
    6aba:	d1bf      	bne.n	6a3c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
  WriteIndexRecord(newHandle,p2);
    6abc:	4620      	mov	r0, r4
    6abe:	aad6      	add	r2, sp, #856	; 0x358
    6ac0:	4641      	mov	r1, r8
  p2.child=iy;
    6ac2:	95d7      	str	r5, [sp, #860]	; 0x35c
  WriteIndexRecord(newHandle,p2);
    6ac4:	f7ff f828 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    6ac8:	2001      	movs	r0, #1
    6aca:	f50d 6dd4 	add.w	sp, sp, #1696	; 0x6a0
    6ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ad2:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6ad6:	2900      	cmp	r1, #0
    6ad8:	d09e      	beq.n	6a18 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  ExFatFile() {}
    6ada:	900e      	str	r0, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    6adc:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6ae0:	a802      	add	r0, sp, #8
    6ae2:	2301      	movs	r3, #1
    6ae4:	aa50      	add	r2, sp, #320	; 0x140
    6ae6:	f001 f9bd 	bl	7e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6aea:	e795      	b.n	6a18 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  uint32_t iy= 0;
    6aec:	4635      	mov	r5, r6
    6aee:	e7e5      	b.n	6abc <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>

00006af0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    6af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6af4:	461d      	mov	r5, r3
    6af6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6afa:	b08e      	sub	sp, #56	; 0x38
    6afc:	460e      	mov	r6, r1
    6afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6b00:	4604      	mov	r4, r0
    6b02:	4690      	mov	r8, r2
    6b04:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6b06:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    6b0a:	b199      	cbz	r1, 6b34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    6b0c:	2300      	movs	r3, #0
    6b0e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6b12:	463a      	mov	r2, r7
    6b14:	4668      	mov	r0, sp
    6b16:	9300      	str	r3, [sp, #0]
    6b18:	2301      	movs	r3, #1
    6b1a:	f002 f911 	bl	8d40 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    6b1e:	b1b0      	cbz	r0, 6b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6b20:	462b      	mov	r3, r5
    6b22:	4642      	mov	r2, r8
    6b24:	4631      	mov	r1, r6
    6b26:	4620      	mov	r0, r4
    6b28:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    6b2a:	b00e      	add	sp, #56	; 0x38
    6b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b30:	f000 b816 	b.w	6b60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    6b34:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6b38:	b14b      	cbz	r3, 6b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6b3a:	910c      	str	r1, [sp, #48]	; 0x30
    6b3c:	463a      	mov	r2, r7
    6b3e:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6b42:	4668      	mov	r0, sp
    6b44:	2301      	movs	r3, #1
    6b46:	f001 f98d 	bl	7e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    6b4a:	2800      	cmp	r0, #0
    6b4c:	d1e8      	bne.n	6b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    6b4e:	f240 20cb 	movw	r0, #715	; 0x2cb
    6b52:	f7fe fe63 	bl	581c <dbgPrint(unsigned short)>
}
    6b56:	2000      	movs	r0, #0
    6b58:	b00e      	add	sp, #56	; 0x38
    6b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b5e:	bf00      	nop

00006b60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    6b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b64:	461f      	mov	r7, r3
    6b66:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    6b6a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    6b6e:	460d      	mov	r5, r1
    6b70:	4619      	mov	r1, r3
    6b72:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,FILE_READ);
    6b74:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    6b76:	a812      	add	r0, sp, #72	; 0x48
    6b78:	2300      	movs	r3, #0
    6b7a:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    6b7c:	4616      	mov	r6, r2
    6b7e:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    6b82:	f004 f8bd 	bl	ad00 <FsVolume::open(char const*, int)>
    6b86:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6b88:	2b00      	cmp	r3, #0
    6b8a:	f000 8101 	beq.w	6d90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    6b8e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6b92:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6dd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6b96:	f8df b244 	ldr.w	fp, [pc, #580]	; 6ddc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    6b9a:	e01b      	b.n	6bd4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    6b9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ba0:	a97a      	add	r1, sp, #488	; 0x1e8
    6ba2:	f003 fbb3 	bl	a30c <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6ba6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6ba8:	2b00      	cmp	r3, #0
    6baa:	d067      	beq.n	6c7c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    6bac:	781b      	ldrb	r3, [r3, #0]
    6bae:	f013 0f70 	tst.w	r3, #112	; 0x70
    6bb2:	d06a      	beq.n	6c8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6bb4:	ab7a      	add	r3, sp, #488	; 0x1e8
    6bb6:	aa3a      	add	r2, sp, #232	; 0xe8
    6bb8:	4629      	mov	r1, r5
    6bba:	4620      	mov	r0, r4
    6bbc:	9300      	str	r3, [sp, #0]
    6bbe:	463b      	mov	r3, r7
    6bc0:	f7ff ff96 	bl	6af0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6bc4:	2800      	cmp	r0, #0
    6bc6:	f000 80f6 	beq.w	6db6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    6bca:	a82a      	add	r0, sp, #168	; 0xa8
    6bcc:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6bd0:	f003 ff7c 	bl	aacc <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    6bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bd8:	4631      	mov	r1, r6
    6bda:	a83a      	add	r0, sp, #232	; 0xe8
    6bdc:	f00b fdf2 	bl	127c4 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6be0:	a83a      	add	r0, sp, #232	; 0xe8
    6be2:	f00c f94d 	bl	12e80 <strlen>
    6be6:	ab3a      	add	r3, sp, #232	; 0xe8
    6be8:	4418      	add	r0, r3
    6bea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6bee:	2b2f      	cmp	r3, #47	; 0x2f
    6bf0:	d005      	beq.n	6bfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    6bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bf6:	4659      	mov	r1, fp
    6bf8:	a83a      	add	r0, sp, #232	; 0xe8
    6bfa:	f00b fdaf 	bl	1275c <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    6bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c02:	4651      	mov	r1, sl
    6c04:	a87a      	add	r0, sp, #488	; 0x1e8
    6c06:	f00b fddd 	bl	127c4 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    6c0a:	a87a      	add	r0, sp, #488	; 0x1e8
    6c0c:	f00c f938 	bl	12e80 <strlen>
    6c10:	ab7a      	add	r3, sp, #488	; 0x1e8
    6c12:	4418      	add	r0, r3
    6c14:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6c18:	2b2f      	cmp	r3, #47	; 0x2f
    6c1a:	d005      	beq.n	6c28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    6c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c20:	4659      	mov	r1, fp
    6c22:	a87a      	add	r0, sp, #488	; 0x1e8
    6c24:	f00b fd9a 	bl	1275c <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6c28:	4b69      	ldr	r3, [pc, #420]	; (6dd0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    6c2a:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    6c2c:	4641      	mov	r1, r8
    6c2e:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6c30:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6c36:	9227      	str	r2, [sp, #156]	; 0x9c
    6c38:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    6c3c:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    6c3e:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    6c42:	f003 ffaf 	bl	aba4 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6c46:	9838      	ldr	r0, [sp, #224]	; 0xe0
    6c48:	2200      	movs	r2, #0
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d055      	beq.n	6cfa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    6c4e:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    6c52:	a93a      	add	r1, sp, #232	; 0xe8
    6c54:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c58:	f003 fb58 	bl	a30c <FatFile::getName(char*, unsigned int)>
    *name = 0;
    6c5c:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    6c5e:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    6c60:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    6c64:	2800      	cmp	r0, #0
    6c66:	d199      	bne.n	6b9c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    6c68:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    6c6a:	b170      	cbz	r0, 6c8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    6c6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c70:	a97a      	add	r1, sp, #488	; 0x1e8
    6c72:	f001 fb3b 	bl	82ec <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6c76:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6c78:	2b00      	cmp	r3, #0
    6c7a:	d197      	bne.n	6bac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    6c7c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    6c7e:	b123      	cbz	r3, 6c8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    6c80:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6c84:	f013 0f50 	tst.w	r3, #80	; 0x50
    6c88:	d194      	bne.n	6bb4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6c8a:	ab7a      	add	r3, sp, #488	; 0x1e8
    6c8c:	aa3a      	add	r2, sp, #232	; 0xe8
    6c8e:	4629      	mov	r1, r5
    6c90:	4620      	mov	r0, r4
    6c92:	9300      	str	r3, [sp, #0]
    6c94:	463b      	mov	r3, r7
    6c96:	f7ff fd61 	bl	675c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6c9a:	2800      	cmp	r0, #0
    6c9c:	f000 8086 	beq.w	6dac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    6ca0:	a83a      	add	r0, sp, #232	; 0xe8
    6ca2:	f00c f8ed 	bl	12e80 <strlen>
    6ca6:	4601      	mov	r1, r0
    6ca8:	a83a      	add	r0, sp, #232	; 0xe8
    6caa:	f009 f9f7 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6cae:	4849      	ldr	r0, [pc, #292]	; (6dd4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    6cb0:	f006 fe6e 	bl	d990 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6cb4:	9b02      	ldr	r3, [sp, #8]
    6cb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6cb8:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6cbc:	b343      	cbz	r3, 6d10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6cbe:	4619      	mov	r1, r3
    6cc0:	2300      	movs	r3, #0
    6cc2:	aa3a      	add	r2, sp, #232	; 0xe8
    6cc4:	a804      	add	r0, sp, #16
    6cc6:	9304      	str	r3, [sp, #16]
    6cc8:	2301      	movs	r3, #1
    6cca:	f002 f931 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    6cce:	2800      	cmp	r0, #0
    6cd0:	d157      	bne.n	6d82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    6cd2:	f240 20e7 	movw	r0, #743	; 0x2e7
    6cd6:	f7fe fda1 	bl	581c <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    6cda:	a82a      	add	r0, sp, #168	; 0xa8
    6cdc:	2400      	movs	r4, #0
    6cde:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6ce2:	f003 fef3 	bl	aacc <FsBaseFile::close()>
    6ce6:	4640      	mov	r0, r8
    6ce8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    6cec:	f003 feee 	bl	aacc <FsBaseFile::close()>
}
    6cf0:	4620      	mov	r0, r4
    6cf2:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    6cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    6cfa:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    6cfc:	b1db      	cbz	r3, 6d36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    6cfe:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    6d02:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d06:	4618      	mov	r0, r3
    6d08:	a93a      	add	r1, sp, #232	; 0xe8
    6d0a:	f001 faef 	bl	82ec <ExFatFile::getName8(char*, unsigned int)>
    6d0e:	e7a5      	b.n	6c5c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    6d10:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6d14:	2900      	cmp	r1, #0
    6d16:	d0dc      	beq.n	6cd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    6d18:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6d1a:	aa3a      	add	r2, sp, #232	; 0xe8
    6d1c:	2301      	movs	r3, #1
    6d1e:	a804      	add	r0, sp, #16
    6d20:	f000 fe0c 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6d24:	2800      	cmp	r0, #0
    6d26:	d0d4      	beq.n	6cd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    6d28:	a804      	add	r0, sp, #16
    6d2a:	f000 fe6b 	bl	7a04 <ExFatFile::remove()>
    6d2e:	2800      	cmp	r0, #0
    6d30:	f47f af4b 	bne.w	6bca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6d34:	e7cd      	b.n	6cd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    6d36:	a82a      	add	r0, sp, #168	; 0xa8
    6d38:	9303      	str	r3, [sp, #12]
    6d3a:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6d3e:	f003 fec5 	bl	aacc <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    6d42:	9b02      	ldr	r3, [sp, #8]
    6d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    6d46:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    6d4a:	b170      	cbz	r0, 6d6a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    6d4c:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6d4e:	4601      	mov	r1, r0
    6d50:	4632      	mov	r2, r6
    6d52:	a826      	add	r0, sp, #152	; 0x98
    6d54:	9326      	str	r3, [sp, #152]	; 0x98
    6d56:	f002 f8eb 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    6d5a:	4604      	mov	r4, r0
    6d5c:	2800      	cmp	r0, #0
    6d5e:	d0c2      	beq.n	6ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6d60:	a826      	add	r0, sp, #152	; 0x98
    6d62:	f002 fb39 	bl	93d8 <FatFile::rmdir()>
    6d66:	4604      	mov	r4, r0
    6d68:	e7bd      	b.n	6ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6d6a:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    6d6e:	b131      	cbz	r1, 6d7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6d70:	4603      	mov	r3, r0
    6d72:	9032      	str	r0, [sp, #200]	; 0xc8
    6d74:	4632      	mov	r2, r6
    6d76:	a826      	add	r0, sp, #152	; 0x98
    6d78:	f000 fde0 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    6d7c:	bb00      	cbnz	r0, 6dc0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    6d7e:	2400      	movs	r4, #0
    6d80:	e7b1      	b.n	6ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6d82:	a804      	add	r0, sp, #16
    6d84:	f003 f934 	bl	9ff0 <FatFile::remove()>
    6d88:	2800      	cmp	r0, #0
    6d8a:	f47f af1e 	bne.w	6bca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6d8e:	e7a0      	b.n	6cd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    6d90:	9925      	ldr	r1, [sp, #148]	; 0x94
    6d92:	2900      	cmp	r1, #0
    6d94:	f47f aefb 	bne.w	6b8e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6d98:	f240 20ce 	movw	r0, #718	; 0x2ce
    6d9c:	460c      	mov	r4, r1
    6d9e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6da2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6dd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    6da6:	f7fe fd39 	bl	581c <dbgPrint(unsigned short)>
    6daa:	e79c      	b.n	6ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6dac:	f240 20e6 	movw	r0, #742	; 0x2e6
    6db0:	f7fe fd34 	bl	581c <dbgPrint(unsigned short)>
    6db4:	e791      	b.n	6cda <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6db6:	f240 20e2 	movw	r0, #738	; 0x2e2
    6dba:	f7fe fd2f 	bl	581c <dbgPrint(unsigned short)>
    6dbe:	e78c      	b.n	6cda <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    6dc0:	a826      	add	r0, sp, #152	; 0x98
    6dc2:	f000 fe79 	bl	7ab8 <ExFatFile::rmdir()>
    6dc6:	4604      	mov	r4, r0
    6dc8:	2800      	cmp	r0, #0
    6dca:	d0d8      	beq.n	6d7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    6dcc:	e78b      	b.n	6ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6dce:	bf00      	nop
    6dd0:	20000d98 	.word	0x20000d98
    6dd4:	20008bb4 	.word	0x20008bb4
    6dd8:	20000c70 	.word	0x20000c70
    6ddc:	20000b70 	.word	0x20000b70

00006de0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    6de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6de4:	460d      	mov	r5, r1
    6de6:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    6dea:	f1b3 3fff 	cmp.w	r3, #4294967295
    6dee:	bf14      	ite	ne
    6df0:	461f      	movne	r7, r3
    6df2:	4617      	moveq	r7, r2
  { 
    6df4:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6df6:	4601      	mov	r1, r0
    6df8:	462a      	mov	r2, r5
    6dfa:	a8d8      	add	r0, sp, #864	; 0x360
    6dfc:	f7fe ff30 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6e00:	463a      	mov	r2, r7
    6e02:	4621      	mov	r1, r4
    6e04:	f50d 608f 	add.w	r0, sp, #1144	; 0x478
    6e08:	f7fe ff2a 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    6e0c:	9ad8      	ldr	r2, [sp, #864]	; 0x360
    6e0e:	4621      	mov	r1, r4
    6e10:	f50d 60b2 	add.w	r0, sp, #1424	; 0x590
    6e14:	f7fe ff24 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    6e18:	f89d 336c 	ldrb.w	r3, [sp, #876]	; 0x36c
    6e1c:	b123      	cbz	r3, 6e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    6e1e:	f89d 336d 	ldrb.w	r3, [sp, #877]	; 0x36d
    6e22:	2b00      	cmp	r3, #0
    6e24:	f000 80f2 	beq.w	700c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    6e28:	f44f 728c 	mov.w	r2, #280	; 0x118
    6e2c:	a9d8      	add	r1, sp, #864	; 0x360
    6e2e:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    6e32:	f007 fbb3 	bl	e59c <memcpy>
    Record p2o = p2;
    6e36:	f44f 728c 	mov.w	r2, #280	; 0x118
    6e3a:	f50d 618f 	add.w	r1, sp, #1144	; 0x478
    6e3e:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
    6e42:	f007 fbab 	bl	e59c <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6e46:	f44f 7380 	mov.w	r3, #256	; 0x100
    6e4a:	aa58      	add	r2, sp, #352	; 0x160
    6e4c:	4629      	mov	r1, r5
    6e4e:	4620      	mov	r0, r4
    6e50:	f7ff f848 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    6e54:	f8dd 6594 	ldr.w	r6, [sp, #1428]	; 0x594
    6e58:	42ae      	cmp	r6, r5
    6e5a:	f000 8096 	beq.w	6f8a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    6e5e:	4632      	mov	r2, r6
    6e60:	4621      	mov	r1, r4
    6e62:	a804      	add	r0, sp, #16
    6e64:	f7fe fefc 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6e68:	f44f 728c 	mov.w	r2, #280	; 0x118
    6e6c:	a904      	add	r1, sp, #16
    6e6e:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6e72:	f007 fb93 	bl	e59c <memcpy>
        pxo = px;
    6e76:	f44f 728c 	mov.w	r2, #280	; 0x118
    6e7a:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6e7e:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6e82:	f007 fb8b 	bl	e59c <memcpy>
        while(handle != px.sibling)
    6e86:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6e8a:	4295      	cmp	r5, r2
    6e8c:	d017      	beq.n	6ebe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    6e8e:	4621      	mov	r1, r4
    6e90:	a804      	add	r0, sp, #16
    6e92:	4616      	mov	r6, r2
    6e94:	f7fe fee4 	bl	5c60 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6e98:	f44f 728c 	mov.w	r2, #280	; 0x118
    6e9c:	a904      	add	r1, sp, #16
    6e9e:	f50d 601f 	add.w	r0, sp, #2544	; 0x9f0
    6ea2:	f007 fb7b 	bl	e59c <memcpy>
          pxo = px;
    6ea6:	f44f 728c 	mov.w	r2, #280	; 0x118
    6eaa:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
    6eae:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
    6eb2:	f007 fb73 	bl	e59c <memcpy>
        while(handle != px.sibling)
    6eb6:	f8dd 29f8 	ldr.w	r2, [sp, #2552]	; 0x9f8
    6eba:	42aa      	cmp	r2, r5
    6ebc:	d1e7      	bne.n	6e8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    6ebe:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(jx, px);
    6ec0:	f50d 621f 	add.w	r2, sp, #2544	; 0x9f0
    6ec4:	4631      	mov	r1, r6
    6ec6:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    6ec8:	f8cd 39f8 	str.w	r3, [sp, #2552]	; 0x9f8
        WriteIndexRecord(jx, px);
    6ecc:	f7fe fe24 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    6ed0:	f8dd 347c 	ldr.w	r3, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6ed4:	aad8      	add	r2, sp, #864	; 0x360
    6ed6:	4629      	mov	r1, r5
    6ed8:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    6eda:	93da      	str	r3, [sp, #872]	; 0x368
      p1.store = p2.store;
    6edc:	f8bd 3486 	ldrh.w	r3, [sp, #1158]	; 0x486
      p1.parent = newParent;
    6ee0:	97d8      	str	r7, [sp, #864]	; 0x360
      p1.store = p2.store;
    6ee2:	f8ad 336e 	strh.w	r3, [sp, #878]	; 0x36e
      p2.child = handle;
    6ee6:	f8cd 547c 	str.w	r5, [sp, #1148]	; 0x47c
      WriteIndexRecord(handle, p1);
    6eea:	f7fe fe15 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    6eee:	f50d 628f 	add.w	r2, sp, #1144	; 0x478
    6ef2:	4639      	mov	r1, r7
    6ef4:	4620      	mov	r0, r4
    6ef6:	f7fe fe0f 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6efa:	f44f 7380 	mov.w	r3, #256	; 0x100
    6efe:	4629      	mov	r1, r5
    6f00:	aa98      	add	r2, sp, #608	; 0x260
    6f02:	4620      	mov	r0, r4
    6f04:	f7fe ffee 	bl	5ee4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    6f08:	f8bd 16b6 	ldrh.w	r1, [sp, #1718]	; 0x6b6
    6f0c:	f8bd 37ce 	ldrh.w	r3, [sp, #1998]	; 0x7ce
    6f10:	4299      	cmp	r1, r3
    6f12:	d046      	beq.n	6fa2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6f14:	aa98      	add	r2, sp, #608	; 0x260
    else if(!p1o.isdir)
    6f16:	f89d 96b4 	ldrb.w	r9, [sp, #1716]	; 0x6b4
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6f1a:	1d20      	adds	r0, r4, #4
    6f1c:	9200      	str	r2, [sp, #0]
    6f1e:	aa58      	add	r2, sp, #352	; 0x160
    else if(!p1o.isdir)
    6f20:	f1b9 0f00 	cmp.w	r9, #0
    6f24:	d00b      	beq.n	6f3e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6f26:	f7ff fde3 	bl	6af0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6f2a:	2800      	cmp	r0, #0
    6f2c:	f000 8092 	beq.w	7054 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6f30:	f04f 0801 	mov.w	r8, #1
  }
    6f34:	4640      	mov	r0, r8
    6f36:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    6f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6f3e:	f7ff fc0d 	bl	675c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6f42:	4680      	mov	r8, r0
    6f44:	2800      	cmp	r0, #0
    6f46:	d044      	beq.n	6fd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6f48:	f8bd 57ce 	ldrh.w	r5, [sp, #1998]	; 0x7ce
							  return write((const uint8_t *)str, strlen(str)); }
    6f4c:	a858      	add	r0, sp, #352	; 0x160
    6f4e:	f00b ff97 	bl	12e80 <strlen>
    6f52:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6f54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    6f58:	a858      	add	r0, sp, #352	; 0x160
    6f5a:	f009 f89f 	bl	1009c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6f5e:	484d      	ldr	r0, [pc, #308]	; (7094 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    6f60:	f006 fd16 	bl	d990 <Print::println()>
    6f64:	6daa      	ldr	r2, [r5, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    6f66:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6f6a:	2b00      	cmp	r3, #0
    6f6c:	d077      	beq.n	705e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    6f6e:	4619      	mov	r1, r3
    6f70:	aa58      	add	r2, sp, #352	; 0x160
    6f72:	2301      	movs	r3, #1
    6f74:	a84a      	add	r0, sp, #296	; 0x128
    6f76:	f8cd 9128 	str.w	r9, [sp, #296]	; 0x128
    6f7a:	f001 ffd9 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    6f7e:	2800      	cmp	r0, #0
    6f80:	d0d8      	beq.n	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6f82:	a84a      	add	r0, sp, #296	; 0x128
    6f84:	f003 f834 	bl	9ff0 <FatFile::remove()>
    6f88:	e7d4      	b.n	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    6f8a:	9bda      	ldr	r3, [sp, #872]	; 0x368
        WriteIndexRecord(p1.parent, p3);    
    6f8c:	f50d 62b2 	add.w	r2, sp, #1424	; 0x590
    6f90:	99d8      	ldr	r1, [sp, #864]	; 0x360
    6f92:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    6f94:	f8cd 3594 	str.w	r3, [sp, #1428]	; 0x594
    uint32_t jx=-1;
    6f98:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    6f9c:	f7fe fdbc 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6fa0:	e796      	b.n	6ed0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    6fa2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    6fa6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    6fa8:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6fac:	2b00      	cmp	r3, #0
    6fae:	d039      	beq.n	7024 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    6fb0:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6fb4:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6fb6:	aa58      	add	r2, sp, #352	; 0x160
    6fb8:	a84a      	add	r0, sp, #296	; 0x128
    6fba:	9103      	str	r1, [sp, #12]
    6fbc:	934a      	str	r3, [sp, #296]	; 0x128
    6fbe:	f001 ff35 	bl	8e2c <FatFile::open(FatFile*, char const*, int)>
    6fc2:	9903      	ldr	r1, [sp, #12]
    6fc4:	2800      	cmp	r0, #0
    6fc6:	d15c      	bne.n	7082 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6fc8:	f240 2043 	movw	r0, #579	; 0x243
    6fcc:	f7fe fc26 	bl	581c <dbgPrint(unsigned short)>
    6fd0:	e003      	b.n	6fda <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6fd2:	f240 2047 	movw	r0, #583	; 0x247
    6fd6:	f7fe fc21 	bl	581c <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6fda:	4631      	mov	r1, r6
    6fdc:	f60d 02d8 	addw	r2, sp, #2264	; 0x8d8
    6fe0:	4620      	mov	r0, r4
    return false;
    6fe2:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6fe6:	f7fe fd97 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    6fea:	f50d 62d5 	add.w	r2, sp, #1704	; 0x6a8
    6fee:	4629      	mov	r1, r5
    6ff0:	4620      	mov	r0, r4
    6ff2:	f7fe fd91 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    6ff6:	4620      	mov	r0, r4
    6ff8:	f50d 62f8 	add.w	r2, sp, #1984	; 0x7c0
    6ffc:	4639      	mov	r1, r7
    6ffe:	f7fe fd8b 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    7002:	4640      	mov	r0, r8
    7004:	f60d 3d0c 	addw	sp, sp, #2828	; 0xb0c
    7008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    700c:	462a      	mov	r2, r5
    700e:	f8bd 136e 	ldrh.w	r1, [sp, #878]	; 0x36e
    7012:	4620      	mov	r0, r4
    7014:	f7ff f8f8 	bl	6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    7018:	aad8      	add	r2, sp, #864	; 0x360
    701a:	4629      	mov	r1, r5
    701c:	4620      	mov	r0, r4
    701e:	f7fe fd7b 	bl	5b18 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    7022:	e701      	b.n	6e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    7024:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    7028:	2900      	cmp	r1, #0
    702a:	d0cd      	beq.n	6fc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    702c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    7030:	aa58      	add	r2, sp, #352	; 0x160
    7032:	a84a      	add	r0, sp, #296	; 0x128
    7034:	9356      	str	r3, [sp, #344]	; 0x158
    7036:	9103      	str	r1, [sp, #12]
    7038:	f000 fc04 	bl	7844 <ExFatFile::open(ExFatFile*, char const*, int)>
    703c:	9903      	ldr	r1, [sp, #12]
    703e:	2800      	cmp	r0, #0
    7040:	d0c2      	beq.n	6fc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    7042:	aa98      	add	r2, sp, #608	; 0x260
    7044:	a84a      	add	r0, sp, #296	; 0x128
    7046:	f000 fe8b 	bl	7d60 <ExFatFile::rename(ExFatFile*, char const*)>
    704a:	4680      	mov	r8, r0
    704c:	2800      	cmp	r0, #0
    704e:	f47f af71 	bne.w	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    7052:	e7b9      	b.n	6fc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    7054:	f240 204b 	movw	r0, #587	; 0x24b
    7058:	f7fe fbe0 	bl	581c <dbgPrint(unsigned short)>
    705c:	e7bd      	b.n	6fda <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    705e:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    7062:	2900      	cmp	r1, #0
    7064:	f43f af64 	beq.w	6f30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    7068:	9356      	str	r3, [sp, #344]	; 0x158
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    706a:	aa58      	add	r2, sp, #352	; 0x160
    706c:	2301      	movs	r3, #1
    706e:	a84a      	add	r0, sp, #296	; 0x128
    7070:	f000 fc64 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    7074:	2800      	cmp	r0, #0
    7076:	f43f af5d 	beq.w	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    707a:	a84a      	add	r0, sp, #296	; 0x128
    707c:	f000 fcc2 	bl	7a04 <ExFatFile::remove()>
    7080:	e758      	b.n	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    7082:	aa98      	add	r2, sp, #608	; 0x260
    7084:	a84a      	add	r0, sp, #296	; 0x128
    7086:	f002 f8b1 	bl	91ec <FatFile::rename(FatFile*, char const*)>
    708a:	4680      	mov	r8, r0
    708c:	2800      	cmp	r0, #0
    708e:	f47f af51 	bne.w	6f34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    7092:	e799      	b.n	6fc8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    7094:	20008bb4 	.word	0x20008bb4

00007098 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    7098:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    709a:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    709e:	b084      	sub	sp, #16
    70a0:	468c      	mov	ip, r1
    70a2:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    70a4:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    70a6:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    70a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    70ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    70b0:	ea4f 124c 	mov.w	r2, ip, lsl #5
    70b4:	4629      	mov	r1, r5
    70b6:	6a20      	ldr	r0, [r4, #32]
    70b8:	f001 faac 	bl	8614 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    70bc:	2801      	cmp	r0, #1
    70be:	d106      	bne.n	70ce <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    70c0:	4632      	mov	r2, r6
    70c2:	4629      	mov	r1, r5
    70c4:	6a20      	ldr	r0, [r4, #32]
    70c6:	f001 fa89 	bl	85dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    70ca:	b004      	add	sp, #16
    70cc:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    70ce:	2000      	movs	r0, #0
}
    70d0:	b004      	add	sp, #16
    70d2:	bd70      	pop	{r4, r5, r6, pc}

000070d4 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    70d4:	b510      	push	{r4, lr}
    70d6:	4604      	mov	r4, r0
  bool rtn = sync();
    70d8:	f000 fdba 	bl	7c50 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    70dc:	2300      	movs	r3, #0
    70de:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    70e2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    70e6:	bd10      	pop	{r4, pc}

000070e8 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    70e8:	b538      	push	{r3, r4, r5, lr}
    70ea:	4614      	mov	r4, r2
    70ec:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    70ee:	2200      	movs	r2, #0
    70f0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    70f4:	6a00      	ldr	r0, [r0, #32]
    70f6:	f001 fa71 	bl	85dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    70fa:	4603      	mov	r3, r0
    70fc:	b120      	cbz	r0, 7108 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    70fe:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    7100:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    7102:	802a      	strh	r2, [r5, #0]
    7104:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    7106:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    7108:	bd38      	pop	{r3, r4, r5, pc}
    710a:	bf00      	nop

0000710c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    710c:	b538      	push	{r3, r4, r5, lr}
    710e:	4614      	mov	r4, r2
    7110:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    7112:	2200      	movs	r2, #0
    7114:	f100 0124 	add.w	r1, r0, #36	; 0x24
    7118:	6a00      	ldr	r0, [r0, #32]
    711a:	f001 fa5f 	bl	85dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    711e:	4603      	mov	r3, r0
    7120:	b120      	cbz	r0, 712c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    7122:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    7124:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    7126:	802a      	strh	r2, [r5, #0]
    7128:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    712a:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    712c:	bd38      	pop	{r3, r4, r5, pc}
    712e:	bf00      	nop

00007130 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    7130:	b538      	push	{r3, r4, r5, lr}
    7132:	460d      	mov	r5, r1
  if (isOpen()) {
    7134:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    7138:	b109      	cbz	r1, 713e <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    713a:	2000      	movs	r0, #0
}
    713c:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    713e:	2238      	movs	r2, #56	; 0x38
    7140:	4604      	mov	r4, r0
    7142:	f00b fab9 	bl	126b8 <memset>
  m_flags = FILE_FLAG_READ;
    7146:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    7148:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    714a:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    714c:	4618      	mov	r0, r3
    714e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    7152:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    7156:	bd38      	pop	{r3, r4, r5, pc}

00007158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    7158:	b4f0      	push	{r4, r5, r6, r7}
    715a:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    715c:	7809      	ldrb	r1, [r1, #0]
    715e:	2920      	cmp	r1, #32
    7160:	d103      	bne.n	716a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    7162:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    7166:	2c20      	cmp	r4, #32
    7168:	d0fb      	beq.n	7162 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    716a:	6015      	str	r5, [r2, #0]
  fname->end = path;
    716c:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    716e:	782c      	ldrb	r4, [r5, #0]
    7170:	2c2f      	cmp	r4, #47	; 0x2f
    7172:	d011      	beq.n	7198 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    7174:	b184      	cbz	r4, 7198 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    7176:	1c6e      	adds	r6, r5, #1
    7178:	2c3c      	cmp	r4, #60	; 0x3c
    717a:	4f1d      	ldr	r7, [pc, #116]	; (71f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    717c:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    717e:	d82a      	bhi.n	71d6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    7180:	2c21      	cmp	r4, #33	; 0x21
    7182:	d812      	bhi.n	71aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    7184:	f104 3cff 	add.w	ip, r4, #4294967295
    7188:	f1bc 0f1e 	cmp.w	ip, #30
    718c:	d816      	bhi.n	71bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    718e:	2000      	movs	r0, #0
    7190:	bcf0      	pop	{r4, r5, r6, r7}
    7192:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    7194:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    7198:	2c20      	cmp	r4, #32
    719a:	d0fb      	beq.n	7194 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    719c:	2c2f      	cmp	r4, #47	; 0x2f
    719e:	d0f9      	beq.n	7194 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    71a0:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    71a2:	4611      	mov	r1, r2
}
    71a4:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    71a6:	f001 b907 	b.w	83b8 <ExFatFile::hashName(ExName_t*)>
    71aa:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    71ae:	fa5f fc8c 	uxtb.w	ip, ip
    71b2:	fa27 fc0c 	lsr.w	ip, r7, ip
    71b6:	f01c 0f01 	tst.w	ip, #1
    71ba:	d1e8      	bne.n	718e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    71bc:	2c2e      	cmp	r4, #46	; 0x2e
    71be:	d001      	beq.n	71c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    71c0:	2c20      	cmp	r4, #32
    71c2:	d10d      	bne.n	71e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    71c4:	f816 4b01 	ldrb.w	r4, [r6], #1
    71c8:	2c00      	cmp	r4, #0
    71ca:	d0e5      	beq.n	7198 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    71cc:	2c2f      	cmp	r4, #47	; 0x2f
    71ce:	d0e3      	beq.n	7198 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    71d0:	2c3c      	cmp	r4, #60	; 0x3c
    71d2:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    71d4:	d9d4      	bls.n	7180 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    71d6:	2c5c      	cmp	r4, #92	; 0x5c
    71d8:	d0d9      	beq.n	718e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    71da:	d903      	bls.n	71e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    71dc:	2c7c      	cmp	r4, #124	; 0x7c
    71de:	d0d6      	beq.n	718e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    71e0:	6096      	str	r6, [r2, #8]
    71e2:	e7ef      	b.n	71c4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    71e4:	3c3e      	subs	r4, #62	; 0x3e
    71e6:	2c01      	cmp	r4, #1
    71e8:	d8fa      	bhi.n	71e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    71ea:	2000      	movs	r0, #0
    71ec:	bcf0      	pop	{r4, r5, r6, r7}
    71ee:	4770      	bx	lr
    71f0:	05002101 	.word	0x05002101

000071f4 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    71f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    71f8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    71fc:	b083      	sub	sp, #12
    71fe:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    7200:	07dc      	lsls	r4, r3, #31
    7202:	d574      	bpl.n	72ee <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    7204:	0658      	lsls	r0, r3, #25
    7206:	460f      	mov	r7, r1
    7208:	4690      	mov	r8, r2
    720a:	f140 80b0 	bpl.w	736e <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    720e:	e9d5 2300 	ldrd	r2, r3, [r5]
    7212:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    7216:	eb18 0402 	adds.w	r4, r8, r2
    721a:	f143 0300 	adc.w	r3, r3, #0
    721e:	42a1      	cmp	r1, r4
    7220:	eb70 0303 	sbcs.w	r3, r0, r3
    7224:	f0c0 80a9 	bcc.w	737a <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    7228:	f1b8 0f00 	cmp.w	r8, #0
    722c:	d05b      	beq.n	72e6 <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    722e:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7230:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    7234:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7238:	f8d5 a020 	ldr.w	sl, [r5, #32]
    723c:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    7240:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    7242:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    7246:	2c00      	cmp	r4, #0
    7248:	d170      	bne.n	732c <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    724a:	4313      	orrs	r3, r2
    724c:	d170      	bne.n	7330 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    724e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7252:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    7254:	bf4c      	ite	mi
    7256:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    725a:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    725c:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    725e:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    7262:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    7264:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    7268:	0a63      	lsrs	r3, r4, #9
    726a:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    726c:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    7270:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    7272:	f1bb 0f00 	cmp.w	fp, #0
    7276:	d145      	bne.n	7304 <ExFatFile::read(void*, unsigned int)+0x110>
    7278:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    727c:	d342      	bcc.n	7304 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    727e:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    7282:	4291      	cmp	r1, r2
    7284:	d03e      	beq.n	7304 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    728a:	d358      	bcc.n	733e <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    728c:	f04f 0b01 	mov.w	fp, #1
    7290:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    7294:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7298:	0a73      	lsrs	r3, r6, #9
    729a:	459b      	cmp	fp, r3
    729c:	bf28      	it	cs
    729e:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    72a0:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    72a2:	ea4f 244b 	mov.w	r4, fp, lsl #9
    72a6:	d80a      	bhi.n	72be <ExFatFile::read(void*, unsigned int)+0xca>
    72a8:	eb01 030b 	add.w	r3, r1, fp
    72ac:	429a      	cmp	r2, r3
    72ae:	d206      	bcs.n	72be <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    72b0:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    72b4:	9101      	str	r1, [sp, #4]
    72b6:	f005 fded 	bl	ce94 <FsCache::sync()>
    72ba:	9901      	ldr	r1, [sp, #4]
    72bc:	b1b8      	cbz	r0, 72ee <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    72be:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    72c2:	465b      	mov	r3, fp
    72c4:	6802      	ldr	r2, [r0, #0]
    72c6:	f8d2 a014 	ldr.w	sl, [r2, #20]
    72ca:	463a      	mov	r2, r7
    72cc:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    72ce:	b170      	cbz	r0, 72ee <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    72d0:	4623      	mov	r3, r4
    dst += n;
    72d2:	4427      	add	r7, r4
    m_curPosition += n;
    72d4:	e9d5 1200 	ldrd	r1, r2, [r5]
    72d8:	185b      	adds	r3, r3, r1
    72da:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    72de:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    72e0:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    72e4:	d1a8      	bne.n	7238 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    72e6:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    72e8:	b003      	add	sp, #12
    72ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    72ee:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    72f2:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    72f6:	f043 0302 	orr.w	r3, r3, #2
    72fa:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    72fe:	b003      	add	sp, #12
    7300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    7304:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    7308:	2200      	movs	r2, #0
    730a:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    730e:	42b4      	cmp	r4, r6
    7310:	bf28      	it	cs
    7312:	4634      	movcs	r4, r6
    7314:	f005 fdea 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7318:	2800      	cmp	r0, #0
    731a:	d0e8      	beq.n	72ee <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    731c:	eb00 010b 	add.w	r1, r0, fp
    7320:	4622      	mov	r2, r4
    7322:	4638      	mov	r0, r7
    7324:	f007 f93a 	bl	e59c <memcpy>
    m_curPosition += n;
    7328:	4623      	mov	r3, r4
    732a:	e7d2      	b.n	72d2 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    732c:	69aa      	ldr	r2, [r5, #24]
    732e:	e796      	b.n	725e <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    7330:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    7334:	065b      	lsls	r3, r3, #25
    7336:	d50e      	bpl.n	7356 <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    7338:	69aa      	ldr	r2, [r5, #24]
    733a:	3201      	adds	r2, #1
    733c:	e78e      	b.n	725c <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    733e:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    7342:	463a      	mov	r2, r7
    7344:	6803      	ldr	r3, [r0, #0]
    7346:	691b      	ldr	r3, [r3, #16]
    7348:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    734a:	2800      	cmp	r0, #0
    734c:	d0cf      	beq.n	72ee <ExFatFile::read(void*, unsigned int)+0xfa>
    734e:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    7352:	461c      	mov	r4, r3
    7354:	e7bd      	b.n	72d2 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7356:	464a      	mov	r2, r9
    7358:	4650      	mov	r0, sl
    735a:	69a9      	ldr	r1, [r5, #24]
    735c:	f001 f99c 	bl	8698 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    7360:	2800      	cmp	r0, #0
    7362:	dbc4      	blt.n	72ee <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    7364:	d00c      	beq.n	7380 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    7366:	f8d5 a020 	ldr.w	sl, [r5, #32]
    736a:	69aa      	ldr	r2, [r5, #24]
    736c:	e777      	b.n	725e <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    736e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7372:	0719      	lsls	r1, r3, #28
    7374:	f57f af58 	bpl.w	7228 <ExFatFile::read(void*, unsigned int)+0x34>
    7378:	e749      	b.n	720e <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    737a:	eba1 0802 	sub.w	r8, r1, r2
    737e:	e753      	b.n	7228 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    7380:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7384:	f013 0f50 	tst.w	r3, #80	; 0x50
    7388:	d0b1      	beq.n	72ee <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    738a:	eba8 0806 	sub.w	r8, r8, r6
    738e:	4640      	mov	r0, r8
    7390:	e7aa      	b.n	72e8 <ExFatFile::read(void*, unsigned int)+0xf4>
    7392:	bf00      	nop

00007394 <ExFatFile::peek()>:
int ExFatFile::peek() {
    7394:	b5f0      	push	{r4, r5, r6, r7, lr}
    7396:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    7398:	2201      	movs	r2, #1
    739a:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    739c:	6985      	ldr	r5, [r0, #24]
    739e:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    73a2:	e9d0 6700 	ldrd	r6, r7, [r0]
    73a6:	f7ff ff25 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    73aa:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    73ac:	61a5      	str	r5, [r4, #24]
    73ae:	bf0c      	ite	eq
    73b0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    73b4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    73b8:	e9c4 6700 	strd	r6, r7, [r4]
}
    73bc:	b003      	add	sp, #12
    73be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000073c0 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    73c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73c4:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    73c6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    73ca:	b083      	sub	sp, #12
    73cc:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    73ce:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    73d2:	2b00      	cmp	r3, #0
    73d4:	d051      	beq.n	747a <ExFatFile::seekSet(unsigned long long)+0xba>
    73d6:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    73d8:	e9d0 1c00 	ldrd	r1, ip, [r0]
    73dc:	45bc      	cmp	ip, r7
    73de:	bf08      	it	eq
    73e0:	4291      	cmpeq	r1, r2
    73e2:	d05c      	beq.n	749e <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    73e4:	ea56 0207 	orrs.w	r2, r6, r7
    73e8:	d04d      	beq.n	7486 <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    73ea:	071d      	lsls	r5, r3, #28
    73ec:	d504      	bpl.n	73f8 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    73ee:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    73f2:	42b0      	cmp	r0, r6
    73f4:	41ba      	sbcs	r2, r7
    73f6:	d340      	bcc.n	747a <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    73f8:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    73fc:	1e75      	subs	r5, r6, #1
    73fe:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    7402:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7404:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7408:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    740c:	3209      	adds	r2, #9
    740e:	b2d2      	uxtb	r2, r2
    7410:	f1c2 0e20 	rsb	lr, r2, #32
    7414:	40d5      	lsrs	r5, r2
    7416:	f1a2 0920 	sub.w	r9, r2, #32
    741a:	fa00 fb0e 	lsl.w	fp, r0, lr
    741e:	fa20 f009 	lsr.w	r0, r0, r9
    7422:	ea45 050b 	orr.w	r5, r5, fp
    7426:	4305      	orrs	r5, r0
  if (isContiguous()) {
    7428:	9801      	ldr	r0, [sp, #4]
    742a:	0640      	lsls	r0, r0, #25
    742c:	d433      	bmi.n	7496 <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    742e:	1e48      	subs	r0, r1, #1
    7430:	fa20 f202 	lsr.w	r2, r0, r2
    7434:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    7438:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    743c:	fa00 fe0e 	lsl.w	lr, r0, lr
    7440:	fa20 f009 	lsr.w	r0, r0, r9
    7444:	ea42 020e 	orr.w	r2, r2, lr
    7448:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    744c:	d001      	beq.n	7452 <ExFatFile::seekSet(unsigned long long)+0x92>
    744e:	4295      	cmp	r5, r2
    7450:	d229      	bcs.n	74a6 <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    7452:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    7454:	bf4c      	ite	mi
    7456:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    745a:	69e3      	ldrpl	r3, [r4, #28]
    745c:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    745e:	f104 0918 	add.w	r9, r4, #24
    7462:	e006      	b.n	7472 <ExFatFile::seekSet(unsigned long long)+0xb2>
    7464:	69a1      	ldr	r1, [r4, #24]
    7466:	3d01      	subs	r5, #1
    7468:	6a20      	ldr	r0, [r4, #32]
    746a:	f001 f915 	bl	8698 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    746e:	2800      	cmp	r0, #0
    7470:	dd03      	ble.n	747a <ExFatFile::seekSet(unsigned long long)+0xba>
    7472:	464a      	mov	r2, r9
  while (nNew--) {
    7474:	2d00      	cmp	r5, #0
    7476:	d1f5      	bne.n	7464 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    7478:	e007      	b.n	748a <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    747a:	2000      	movs	r0, #0
  m_curCluster = tmp;
    747c:	f8c4 8018 	str.w	r8, [r4, #24]
}
    7480:	b003      	add	sp, #12
    7482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    7486:	2300      	movs	r3, #0
    7488:	6183      	str	r3, [r0, #24]
  return true;
    748a:	2001      	movs	r0, #1
  m_curPosition = pos;
    748c:	e9c4 6700 	strd	r6, r7, [r4]
}
    7490:	b003      	add	sp, #12
    7492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    7496:	69e3      	ldr	r3, [r4, #28]
    7498:	442b      	add	r3, r5
    749a:	61a3      	str	r3, [r4, #24]
    goto done;
    749c:	e7f5      	b.n	748a <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    749e:	2001      	movs	r0, #1
}
    74a0:	b003      	add	sp, #12
    74a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    74a6:	1aad      	subs	r5, r5, r2
    74a8:	e7d9      	b.n	745e <ExFatFile::seekSet(unsigned long long)+0x9e>
    74aa:	bf00      	nop

000074ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    74ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74b0:	4617      	mov	r7, r2
    74b2:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    74b6:	b08f      	sub	sp, #60	; 0x3c
    74b8:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    74ba:	2a00      	cmp	r2, #0
    74bc:	f040 80d7 	bne.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    74c0:	468b      	mov	fp, r1
    74c2:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    74c6:	f011 0f50 	tst.w	r1, #80	; 0x50
    74ca:	f000 80d0 	beq.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    74ce:	f003 0103 	and.w	r1, r3, #3
    74d2:	469a      	mov	sl, r3
    74d4:	2903      	cmp	r1, #3
    74d6:	f000 80ca 	beq.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    74da:	3101      	adds	r1, #1
    74dc:	f003 0008 	and.w	r0, r3, #8
    74e0:	ea41 0300 	orr.w	r3, r1, r0
    74e4:	9302      	str	r3, [sp, #8]
  if (fname) {
    74e6:	2f00      	cmp	r7, #0
    74e8:	f000 80cb 	beq.w	7682 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    74ec:	6939      	ldr	r1, [r7, #16]
    74ee:	f101 080e 	add.w	r8, r1, #14
    74f2:	49b6      	ldr	r1, [pc, #728]	; (77cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    74f4:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    74f8:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    74fc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    7500:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    7502:	f108 0802 	add.w	r8, r8, #2
    7506:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    750a:	d005      	beq.n	7518 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    750c:	2000      	movs	r0, #0
    750e:	2100      	movs	r1, #0
    m_curCluster = 0;
    7510:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    7514:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    7518:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    751a:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    751c:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    751e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7522:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    7524:	2220      	movs	r2, #32
    7526:	a906      	add	r1, sp, #24
    7528:	4658      	mov	r0, fp
    752a:	f7ff fe63 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    752e:	b300      	cbz	r0, 7572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    7530:	2820      	cmp	r0, #32
    7532:	f040 809c 	bne.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    7536:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    753a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    753e:	2a00      	cmp	r2, #0
    7540:	f2c0 80a2 	blt.w	7688 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    7544:	b934      	cbnz	r4, 7554 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    7546:	f8db 2000 	ldr.w	r2, [fp]
    754a:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    754e:	f8db 2018 	ldr.w	r2, [fp, #24]
    7552:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    7554:	4544      	cmp	r4, r8
    7556:	d201      	bcs.n	755c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    7558:	3401      	adds	r4, #1
    755a:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    755c:	2b00      	cmp	r3, #0
    755e:	f000 8113 	beq.w	7788 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    7562:	2220      	movs	r2, #32
    7564:	a906      	add	r1, sp, #24
    7566:	4658      	mov	r0, fp
      inSet = false;
    7568:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    756a:	f7ff fe43 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    756e:	2800      	cmp	r0, #0
    7570:	d1de      	bne.n	7530 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    7572:	f41a 7f00 	tst.w	sl, #512	; 0x200
    7576:	d07a      	beq.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7578:	9b02      	ldr	r3, [sp, #8]
    757a:	079b      	lsls	r3, r3, #30
    757c:	d577      	bpl.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    757e:	2f00      	cmp	r7, #0
    7580:	d075      	beq.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    7582:	4544      	cmp	r4, r8
    7584:	d217      	bcs.n	75b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    7586:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    758a:	2220      	movs	r2, #32
    758c:	a906      	add	r1, sp, #24
    758e:	4658      	mov	r0, fp
    7590:	f7ff fe30 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    7594:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    7596:	2800      	cmp	r0, #0
    7598:	d061      	beq.n	765e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    759a:	2820      	cmp	r0, #32
    759c:	d167      	bne.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    759e:	b92c      	cbnz	r4, 75ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    75a0:	f8db 2000 	ldr.w	r2, [fp]
    75a4:	f8db a018 	ldr.w	sl, [fp, #24]
    75a8:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    75ac:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    75ae:	45a0      	cmp	r8, r4
    75b0:	d8eb      	bhi.n	758a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    75b2:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    75b6:	2238      	movs	r2, #56	; 0x38
    75b8:	2100      	movs	r1, #0
    75ba:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    75bc:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    75c0:	f00b f87a 	bl	126b8 <memset>
  ExFatVolume* volume() const {return m_vol;}
    75c4:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    75c8:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    75cc:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    75ce:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    75d0:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    75d2:	2600      	movs	r6, #0
  m_dirPos = freePos;
    75d4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    75d8:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    75dc:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    75de:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    75e2:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    75e4:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    75e6:	f1b8 0f00 	cmp.w	r8, #0
    75ea:	d033      	beq.n	7654 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    75ec:	f108 39ff 	add.w	r9, r8, #4294967295
    75f0:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    75f2:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 77d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    75f6:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    75fa:	2201      	movs	r2, #1
    75fc:	4659      	mov	r1, fp
    75fe:	4628      	mov	r0, r5
    7600:	f7ff fd4a 	bl	7098 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    7604:	4604      	mov	r4, r0
    7606:	b390      	cbz	r0, 766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7608:	f990 2000 	ldrsb.w	r2, [r0]
    760c:	2a00      	cmp	r2, #0
    760e:	db2e      	blt.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    7610:	2220      	movs	r2, #32
    7612:	2100      	movs	r1, #0
    7614:	f00b f850 	bl	126b8 <memset>
    if (i == 0) {
    7618:	2e00      	cmp	r6, #0
    761a:	f000 80bc 	beq.w	7796 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    761e:	f1bb 0f01 	cmp.w	fp, #1
    7622:	f000 80d7 	beq.w	77d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    7626:	23c1      	movs	r3, #193	; 0xc1
    7628:	46a3      	mov	fp, r4
    762a:	341e      	adds	r4, #30
    762c:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    7630:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    7632:	4638      	mov	r0, r7
    7634:	b91b      	cbnz	r3, 763e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    7636:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    763a:	429a      	cmp	r2, r3
    763c:	d005      	beq.n	764a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    763e:	f005 fc7d 	bl	cf3c <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    7642:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    7646:	45a3      	cmp	fp, r4
    7648:	d1f2      	bne.n	7630 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    764a:	3601      	adds	r6, #1
    764c:	fa5f fb86 	uxtb.w	fp, r6
    7650:	45d8      	cmp	r8, fp
    7652:	d8d2      	bhi.n	75fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    7654:	4628      	mov	r0, r5
    7656:	f000 fafb 	bl	7c50 <ExFatFile::sync()>
    765a:	4606      	mov	r6, r0
    765c:	e00d      	b.n	767a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    765e:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    7660:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    7664:	f000 fb24 	bl	7cb0 <ExFatFile::addDirCluster()>
    7668:	2800      	cmp	r0, #0
    766a:	f040 8091 	bne.w	7790 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    766e:	2300      	movs	r3, #0
  return false;
    7670:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    7672:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    7676:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    767a:	4630      	mov	r0, r6
    767c:	b00f      	add	sp, #60	; 0x3c
    767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    7682:	f04f 0803 	mov.w	r8, #3
    7686:	e747      	b.n	7518 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    7688:	bb56      	cbnz	r6, 76e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    768a:	4544      	cmp	r4, r8
    768c:	bf38      	it	cc
    768e:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    7690:	2b85      	cmp	r3, #133	; 0x85
    7692:	f47f af47 	bne.w	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    7696:	4631      	mov	r1, r6
    7698:	2238      	movs	r2, #56	; 0x38
    769a:	4628      	mov	r0, r5
      inSet = true;
    769c:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    769e:	f00b f80b 	bl	126b8 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    76a2:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    76a6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    76aa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    76ae:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    76b2:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    76b4:	bf58      	it	pl
    76b6:	f043 0308 	orrpl.w	r3, r3, #8
    76ba:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    76be:	f8db 3000 	ldr.w	r3, [fp]
    76c2:	f8db 2020 	ldr.w	r2, [fp, #32]
    76c6:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    76c8:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    76ca:	f8db 2018 	ldr.w	r2, [fp, #24]
    76ce:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    76d2:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    76d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    76da:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    76de:	e721      	b.n	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    76e0:	2bc0      	cmp	r3, #192	; 0xc0
    76e2:	d028      	beq.n	7736 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    76e4:	2bc1      	cmp	r3, #193	; 0xc1
    76e6:	f47f af3c 	bne.w	7562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    76ea:	463a      	mov	r2, r7
    76ec:	a906      	add	r1, sp, #24
    76ee:	4628      	mov	r0, r5
    76f0:	f000 fdd6 	bl	82a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    76f4:	b1e8      	cbz	r0, 7732 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    76f6:	89bb      	ldrh	r3, [r7, #12]
    76f8:	b9db      	cbnz	r3, 7732 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    76fa:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    76fe:	429a      	cmp	r2, r3
    7700:	d117      	bne.n	7732 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    7702:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    7706:	d1b2      	bne.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    7708:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    770c:	d170      	bne.n	77f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    770e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    7712:	0798      	lsls	r0, r3, #30
    7714:	d46c      	bmi.n	77f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    7716:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    771a:	d1a8      	bne.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    771c:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    7720:	d0ab      	beq.n	767a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    7722:	4628      	mov	r0, r5
    7724:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    7728:	f7ff fe4a 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    772c:	2800      	cmp	r0, #0
    772e:	d1a4      	bne.n	767a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    7730:	e79d      	b.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7732:	4606      	mov	r6, r0
    7734:	e6f6      	b.n	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    7736:	9b02      	ldr	r3, [sp, #8]
    7738:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    773c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7740:	079b      	lsls	r3, r3, #30
    7742:	d502      	bpl.n	774a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    7744:	9b03      	ldr	r3, [sp, #12]
    7746:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    774c:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    774e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    7752:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    7756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    775a:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    775e:	2f00      	cmp	r7, #0
    7760:	d0cf      	beq.n	7702 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    7762:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    7766:	693a      	ldr	r2, [r7, #16]
    7768:	81bb      	strh	r3, [r7, #12]
    next = begin;
    776a:	683b      	ldr	r3, [r7, #0]
    776c:	607b      	str	r3, [r7, #4]
    776e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    7772:	429a      	cmp	r2, r3
    7774:	f47f aef5 	bne.w	7562 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    7778:	8abe      	ldrh	r6, [r7, #20]
    777a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    777e:	1af6      	subs	r6, r6, r3
    7780:	fab6 f686 	clz	r6, r6
    7784:	0976      	lsrs	r6, r6, #5
    7786:	e6cd      	b.n	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    7788:	2f00      	cmp	r7, #0
    778a:	f47f aef2 	bne.w	7572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    778e:	e76e      	b.n	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    7790:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    7794:	e70b      	b.n	75ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    7796:	2385      	movs	r3, #133	; 0x85
    7798:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    779a:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    779e:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    77a2:	f8da 3000 	ldr.w	r3, [sl]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d046      	beq.n	7838 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    77aa:	f10d 0213 	add.w	r2, sp, #19
    77ae:	f10d 0116 	add.w	r1, sp, #22
    77b2:	a805      	add	r0, sp, #20
    77b4:	4798      	blx	r3
    77b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    77ba:	8163      	strh	r3, [r4, #10]
    77bc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    77c0:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    77c2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    77c6:	7523      	strb	r3, [r4, #20]
    77c8:	e73f      	b.n	764a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    77ca:	bf00      	nop
    77cc:	88888889 	.word	0x88888889
    77d0:	20024cdc 	.word	0x20024cdc
      dirStream->type = EXFAT_TYPE_STREAM;
    77d4:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    77d6:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    77da:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    77dc:	9b02      	ldr	r3, [sp, #8]
    77de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    77e2:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    77e6:	693b      	ldr	r3, [r7, #16]
    77e8:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    77ea:	8abb      	ldrh	r3, [r7, #20]
    77ec:	80a3      	strh	r3, [r4, #4]
}
    77ee:	e72c      	b.n	764a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    77f0:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    77f4:	06d9      	lsls	r1, r3, #27
    77f6:	f53f af3a 	bmi.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    77fa:	f013 0101 	ands.w	r1, r3, #1
    77fe:	f47f af36 	bne.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    7802:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    7806:	d089      	beq.n	771c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    7808:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    780c:	0792      	lsls	r2, r2, #30
    780e:	f57f af2e 	bpl.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    7812:	2b00      	cmp	r3, #0
    7814:	f43f af2b 	beq.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    7818:	e9d5 3200 	ldrd	r3, r2, [r5]
    781c:	4313      	orrs	r3, r2
    781e:	d004      	beq.n	782a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    7820:	2200      	movs	r2, #0
    7822:	2300      	movs	r3, #0
    m_curCluster = 0;
    7824:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    7826:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    782a:	4628      	mov	r0, r5
    782c:	f000 fb86 	bl	7f3c <ExFatFile::truncate()>
    7830:	2800      	cmp	r0, #0
    7832:	f43f af1c 	beq.w	766e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7836:	e720      	b.n	767a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    7838:	f645 0321 	movw	r3, #22561	; 0x5821
    783c:	8163      	strh	r3, [r4, #10]
    783e:	81e3      	strh	r3, [r4, #14]
    7840:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    7842:	e702      	b.n	764a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00007844 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    7844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    7848:	2500      	movs	r5, #0
    784a:	b097      	sub	sp, #92	; 0x5c
    784c:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    784e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    7852:	9201      	str	r2, [sp, #4]
    7854:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    7856:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    785a:	2b00      	cmp	r3, #0
    785c:	d13e      	bne.n	78dc <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    785e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7862:	460f      	mov	r7, r1
    7864:	f013 0f50 	tst.w	r3, #80	; 0x50
    7868:	d038      	beq.n	78dc <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    786a:	7813      	ldrb	r3, [r2, #0]
    786c:	4604      	mov	r4, r0
    786e:	4616      	mov	r6, r2
    7870:	2b2f      	cmp	r3, #47	; 0x2f
    7872:	d037      	beq.n	78e4 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    7874:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    7878:	ab01      	add	r3, sp, #4
    787a:	aa02      	add	r2, sp, #8
    787c:	4631      	mov	r1, r6
    787e:	4620      	mov	r0, r4
    7880:	f7ff fc6a 	bl	7158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7884:	b350      	cbz	r0, 78dc <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    7886:	9e01      	ldr	r6, [sp, #4]
    7888:	7833      	ldrb	r3, [r6, #0]
    788a:	2b00      	cmp	r3, #0
    788c:	d03e      	beq.n	790c <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    788e:	2300      	movs	r3, #0
    7890:	aa02      	add	r2, sp, #8
    7892:	4639      	mov	r1, r7
    7894:	4620      	mov	r0, r4
    7896:	f7ff fe09 	bl	74ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    789a:	b1f8      	cbz	r0, 78dc <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    789c:	46a4      	mov	ip, r4
    789e:	ad08      	add	r5, sp, #32
    78a0:	f104 0730 	add.w	r7, r4, #48	; 0x30
    78a4:	f8dc 0000 	ldr.w	r0, [ip]
    78a8:	f10c 0c10 	add.w	ip, ip, #16
    78ac:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    78b0:	46ae      	mov	lr, r5
    78b2:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    78b6:	3510      	adds	r5, #16
    78b8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    78bc:	45bc      	cmp	ip, r7
    78be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    78c2:	d1ef      	bne.n	78a4 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    78c4:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    78c8:	af08      	add	r7, sp, #32
    tmpDir = *this;
    78ca:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    78cc:	4620      	mov	r0, r4
    78ce:	f000 f9bf 	bl	7c50 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    78d2:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    78d6:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    78da:	e7cd      	b.n	7878 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    78dc:	2000      	movs	r0, #0
}
    78de:	b017      	add	sp, #92	; 0x5c
    78e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    78e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    78e8:	292f      	cmp	r1, #47	; 0x2f
    78ea:	d0fb      	beq.n	78e4 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    78ec:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    78ee:	b9b1      	cbnz	r1, 791e <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    78f0:	2238      	movs	r2, #56	; 0x38
    78f2:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    78f4:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    78f6:	f00a fedf 	bl	126b8 <memset>
  m_flags = FILE_FLAG_READ;
    78fa:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    78fc:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    78fe:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    7900:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7902:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    7906:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    790a:	e7e8      	b.n	78de <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    790c:	464b      	mov	r3, r9
    790e:	aa02      	add	r2, sp, #8
    7910:	4639      	mov	r1, r7
    7912:	4620      	mov	r0, r4
    7914:	f7ff fdca 	bl	74ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    7918:	b017      	add	sp, #92	; 0x5c
    791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    791e:	2238      	movs	r2, #56	; 0x38
    7920:	2100      	movs	r1, #0
    7922:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7924:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    7926:	f00a fec7 	bl	126b8 <memset>
  m_flags = FILE_FLAG_READ;
    792a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    792c:	af08      	add	r7, sp, #32
  m_vol = vol;
    792e:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    7930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    7934:	2340      	movs	r3, #64	; 0x40
    7936:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    793a:	e79b      	b.n	7874 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

0000793c <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    793c:	b119      	cbz	r1, 7946 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    793e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    7942:	f7ff bf7f 	b.w	7844 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    7946:	4608      	mov	r0, r1
    7948:	4770      	bx	lr
    794a:	bf00      	nop

0000794c <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    794c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7950:	b963      	cbnz	r3, 796c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    7952:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7956:	f013 0f50 	tst.w	r3, #80	; 0x50
    795a:	d007      	beq.n	796c <ExFatFile::openNext(ExFatFile*, int)+0x20>
    795c:	680b      	ldr	r3, [r1, #0]
    795e:	f013 0c1f 	ands.w	ip, r3, #31
    7962:	d103      	bne.n	796c <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    7964:	4613      	mov	r3, r2
    7966:	4662      	mov	r2, ip
    7968:	f7ff bda0 	b.w	74ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    796c:	2000      	movs	r0, #0
    796e:	4770      	bx	lr

00007970 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7970:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    7972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7974:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7976:	6a00      	ldr	r0, [r0, #32]
    7978:	b101      	cbz	r1, 797c <ExFatFile::addCluster()+0xc>
    797a:	3101      	adds	r1, #1
    797c:	2201      	movs	r2, #1
    797e:	f000 fd51 	bl	8424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    7982:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7984:	4605      	mov	r5, r0
  if (find < 2) {
    7986:	d932      	bls.n	79ee <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    7988:	2301      	movs	r3, #1
    798a:	4601      	mov	r1, r0
    798c:	6a20      	ldr	r0, [r4, #32]
    798e:	461a      	mov	r2, r3
    7990:	f000 fda8 	bl	84e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7994:	4606      	mov	r6, r0
    7996:	b350      	cbz	r0, 79ee <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    7998:	69a3      	ldr	r3, [r4, #24]
    799a:	b35b      	cbz	r3, 79f4 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    799c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    79a0:	0651      	lsls	r1, r2, #25
    79a2:	d512      	bpl.n	79ca <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    79a4:	1c59      	adds	r1, r3, #1
    79a6:	42a9      	cmp	r1, r5
    79a8:	d018      	beq.n	79dc <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    79aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79ae:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    79b0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79b4:	e005      	b.n	79c2 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    79b6:	6a20      	ldr	r0, [r4, #32]
    79b8:	f000 fe90 	bl	86dc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79bc:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    79be:	b1b0      	cbz	r0, 79ee <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79c0:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    79c2:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79c4:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    79c6:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    79c8:	d3f5      	bcc.n	79b6 <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    79ca:	f04f 32ff 	mov.w	r2, #4294967295
    79ce:	4629      	mov	r1, r5
    79d0:	6a20      	ldr	r0, [r4, #32]
    79d2:	f000 fe83 	bl	86dc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    79d6:	b150      	cbz	r0, 79ee <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    79d8:	69a1      	ldr	r1, [r4, #24]
    79da:	b911      	cbnz	r1, 79e2 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    79dc:	4630      	mov	r0, r6
  m_curCluster = find;
    79de:	61a5      	str	r5, [r4, #24]
}
    79e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    79e2:	462a      	mov	r2, r5
    79e4:	6a20      	ldr	r0, [r4, #32]
    79e6:	f000 fe79 	bl	86dc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    79ea:	2800      	cmp	r0, #0
    79ec:	d1f6      	bne.n	79dc <ExFatFile::addCluster()+0x6c>
  return false;
    79ee:	2600      	movs	r6, #0
}
    79f0:	4630      	mov	r0, r6
    79f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    79f4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    79f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    79fc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    7a00:	e7ec      	b.n	79dc <ExFatFile::addCluster()+0x6c>
    7a02:	bf00      	nop

00007a04 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7a04:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    7a08:	079a      	lsls	r2, r3, #30
    7a0a:	d536      	bpl.n	7a7a <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    7a0c:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    7a0e:	b570      	push	{r4, r5, r6, lr}
    7a10:	4605      	mov	r5, r0
  if (m_firstCluster) {
    7a12:	b9a1      	cbnz	r1, 7a3e <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    7a14:	2400      	movs	r4, #0
    7a16:	4621      	mov	r1, r4
    7a18:	e007      	b.n	7a2a <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    7a1a:	7803      	ldrb	r3, [r0, #0]
    7a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a20:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    7a22:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    7a26:	428b      	cmp	r3, r1
    7a28:	d329      	bcc.n	7a7e <ExFatFile::remove()+0x7a>
    7a2a:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    7a2c:	2201      	movs	r2, #1
    7a2e:	4628      	mov	r0, r5
    7a30:	f7ff fb32 	bl	7098 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    7a34:	b2e1      	uxtb	r1, r4
    if (!cache) {
    7a36:	2800      	cmp	r0, #0
    7a38:	d1ef      	bne.n	7a1a <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    7a3a:	2000      	movs	r0, #0
    7a3c:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    7a3e:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7a40:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    7a42:	d534      	bpl.n	7aae <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7a44:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7a48:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    7a4c:	3309      	adds	r3, #9
    7a4e:	3a01      	subs	r2, #1
    7a50:	b2db      	uxtb	r3, r3
    7a52:	f144 34ff 	adc.w	r4, r4, #4294967295
    7a56:	f1c3 0c20 	rsb	ip, r3, #32
    7a5a:	40da      	lsrs	r2, r3
    7a5c:	3b20      	subs	r3, #32
    7a5e:	fa04 fc0c 	lsl.w	ip, r4, ip
    7a62:	fa24 f303 	lsr.w	r3, r4, r3
    7a66:	ea42 020c 	orr.w	r2, r2, ip
    7a6a:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    7a6c:	2300      	movs	r3, #0
    7a6e:	3201      	adds	r2, #1
    7a70:	f000 fd38 	bl	84e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7a74:	2800      	cmp	r0, #0
    7a76:	d1cd      	bne.n	7a14 <ExFatFile::remove()+0x10>
    7a78:	e7df      	b.n	7a3a <ExFatFile::remove()+0x36>
}
    7a7a:	2000      	movs	r0, #0
    7a7c:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    7a7e:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    7a80:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    7a82:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7a86:	4620      	mov	r0, r4
  m_flags = 0;
    7a88:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    7a8c:	f005 fa02 	bl	ce94 <FsCache::sync()>
    7a90:	2800      	cmp	r0, #0
    7a92:	d0d2      	beq.n	7a3a <ExFatFile::remove()+0x36>
    7a94:	f504 7004 	add.w	r0, r4, #528	; 0x210
    7a98:	f005 f9fc 	bl	ce94 <FsCache::sync()>
    7a9c:	2800      	cmp	r0, #0
    7a9e:	d0cc      	beq.n	7a3a <ExFatFile::remove()+0x36>
    7aa0:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    7aa4:	6803      	ldr	r3, [r0, #0]
}
    7aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7aaa:	6a1b      	ldr	r3, [r3, #32]
    7aac:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    7aae:	f000 fe35 	bl	871c <ExFatPartition::freeChain(unsigned long)>
    7ab2:	2800      	cmp	r0, #0
    7ab4:	d1ae      	bne.n	7a14 <ExFatFile::remove()+0x10>
    7ab6:	e7c0      	b.n	7a3a <ExFatFile::remove()+0x36>

00007ab8 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    7ab8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7abc:	06db      	lsls	r3, r3, #27
    7abe:	d401      	bmi.n	7ac4 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    7ac0:	2000      	movs	r0, #0
}
    7ac2:	4770      	bx	lr
bool ExFatFile::rmdir() {
    7ac4:	b510      	push	{r4, lr}
    seekSet(0);
    7ac6:	2200      	movs	r2, #0
    7ac8:	b088      	sub	sp, #32
    7aca:	2300      	movs	r3, #0
    7acc:	4604      	mov	r4, r0
    7ace:	f7ff fc77 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
  }
    7ad2:	e008      	b.n	7ae6 <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    7ad4:	2820      	cmp	r0, #32
    7ad6:	d11b      	bne.n	7b10 <ExFatFile::rmdir()+0x58>
    7ad8:	f99d 3000 	ldrsb.w	r3, [sp]
    7adc:	f89d 2000 	ldrb.w	r2, [sp]
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	db15      	blt.n	7b10 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    7ae4:	b132      	cbz	r2, 7af4 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    7ae6:	2220      	movs	r2, #32
    7ae8:	4669      	mov	r1, sp
    7aea:	4620      	mov	r0, r4
    7aec:	f7ff fb82 	bl	71f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    7af0:	2800      	cmp	r0, #0
    7af2:	d1ef      	bne.n	7ad4 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    7af4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    7af8:	2208      	movs	r2, #8
  return remove();
    7afa:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    7afc:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    7b00:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    7b04:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    7b08:	f7ff ff7c 	bl	7a04 <ExFatFile::remove()>
}
    7b0c:	b008      	add	sp, #32
    7b0e:	bd10      	pop	{r4, pc}
  return false;
    7b10:	2000      	movs	r0, #0
}
    7b12:	b008      	add	sp, #32
    7b14:	bd10      	pop	{r4, pc}
    7b16:	bf00      	nop

00007b18 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    7b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b1c:	f04f 0800 	mov.w	r8, #0
    7b20:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    7b22:	4f4a      	ldr	r7, [pc, #296]	; (7c4c <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    7b24:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    7b26:	4644      	mov	r4, r8
    7b28:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    7b2a:	2200      	movs	r2, #0
    7b2c:	4630      	mov	r0, r6
    7b2e:	f7ff fab3 	bl	7098 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    7b32:	4605      	mov	r5, r0
    7b34:	b130      	cbz	r0, 7b44 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    7b36:	7801      	ldrb	r1, [r0, #0]
    7b38:	29c0      	cmp	r1, #192	; 0xc0
    7b3a:	d069      	beq.n	7c10 <ExFatFile::syncDir()+0xf8>
    7b3c:	29c1      	cmp	r1, #193	; 0xc1
    7b3e:	d02b      	beq.n	7b98 <ExFatFile::syncDir()+0x80>
    7b40:	2985      	cmp	r1, #133	; 0x85
    7b42:	d009      	beq.n	7b58 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    7b44:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    7b48:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7b4a:	f043 0301 	orr.w	r3, r3, #1
    7b4e:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    7b52:	b002      	add	sp, #8
    7b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    7b58:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    7b5c:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7b60:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    7b62:	683b      	ldr	r3, [r7, #0]
    7b64:	b183      	cbz	r3, 7b88 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    7b66:	f10d 0203 	add.w	r2, sp, #3
    7b6a:	f10d 0106 	add.w	r1, sp, #6
    7b6e:	a801      	add	r0, sp, #4
    7b70:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    7b72:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    7b76:	81ab      	strh	r3, [r5, #12]
    7b78:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    7b7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7b7e:	81eb      	strh	r3, [r5, #14]
    7b80:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    7b82:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b86:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    7b88:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    7b8a:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7b8e:	f043 0301 	orr.w	r3, r3, #1
    7b92:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7b96:	7829      	ldrb	r1, [r5, #0]
    7b98:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7b9c:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7b9e:	fab0 f080 	clz	r0, r0
    7ba2:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7ba4:	e001      	b.n	7baa <ExFatFile::syncDir()+0x92>
    7ba6:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7ba8:	5ca9      	ldrb	r1, [r5, r2]
    7baa:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7bac:	2a01      	cmp	r2, #1
    7bae:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    7bb2:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    7bb6:	fa11 f383 	uxtah	r3, r1, r3
    7bba:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    7bbc:	d101      	bne.n	7bc2 <ExFatFile::syncDir()+0xaa>
    7bbe:	2800      	cmp	r0, #0
    7bc0:	d1f1      	bne.n	7ba6 <ExFatFile::syncDir()+0x8e>
    7bc2:	2a1f      	cmp	r2, #31
    7bc4:	d9f0      	bls.n	7ba8 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    7bc6:	f108 0801 	add.w	r8, r8, #1
    7bca:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    7bce:	fa5f f188 	uxtb.w	r1, r8
    7bd2:	428b      	cmp	r3, r1
    7bd4:	d2a9      	bcs.n	7b2a <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    7bd6:	2201      	movs	r2, #1
    7bd8:	f106 0124 	add.w	r1, r6, #36	; 0x24
    7bdc:	6a30      	ldr	r0, [r6, #32]
    7bde:	f000 fcfd 	bl	85dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    7be2:	2800      	cmp	r0, #0
    7be4:	d0ae      	beq.n	7b44 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    7be6:	6a35      	ldr	r5, [r6, #32]
    7be8:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7bea:	4628      	mov	r0, r5
    7bec:	f005 f952 	bl	ce94 <FsCache::sync()>
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d0a7      	beq.n	7b44 <ExFatFile::syncDir()+0x2c>
    7bf4:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7bf8:	f005 f94c 	bl	ce94 <FsCache::sync()>
    7bfc:	2800      	cmp	r0, #0
    7bfe:	d0a1      	beq.n	7b44 <ExFatFile::syncDir()+0x2c>
    7c00:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7c04:	6803      	ldr	r3, [r0, #0]
    7c06:	6a1b      	ldr	r3, [r3, #32]
    7c08:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d1a1      	bne.n	7b52 <ExFatFile::syncDir()+0x3a>
    7c0e:	e799      	b.n	7b44 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    7c10:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    7c14:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    7c18:	7843      	ldrb	r3, [r0, #1]
    7c1a:	bf14      	ite	ne
    7c1c:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    7c20:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    7c24:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    7c26:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    7c2a:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    7c2e:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    7c32:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7c36:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    7c38:	e9c5 0106 	strd	r0, r1, [r5, #24]
    7c3c:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7c40:	f043 0301 	orr.w	r3, r3, #1
    7c44:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7c48:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    7c4a:	e7a5      	b.n	7b98 <ExFatFile::syncDir()+0x80>
    7c4c:	20024cdc 	.word	0x20024cdc

00007c50 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    7c50:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    7c52:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7c56:	b343      	cbz	r3, 7caa <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7c58:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    7c5c:	4604      	mov	r4, r0
    7c5e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7c62:	2a00      	cmp	r2, #0
    7c64:	db0c      	blt.n	7c80 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    7c66:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7c68:	4628      	mov	r0, r5
    7c6a:	f005 f913 	bl	ce94 <FsCache::sync()>
    7c6e:	b978      	cbnz	r0, 7c90 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    7c70:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    7c74:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7c76:	f043 0301 	orr.w	r3, r3, #1
    7c7a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    7c7e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7c84:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    7c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7c8c:	f7ff bf44 	b.w	7b18 <ExFatFile::syncDir()>
    7c90:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7c94:	f005 f8fe 	bl	ce94 <FsCache::sync()>
    7c98:	2800      	cmp	r0, #0
    7c9a:	d0e9      	beq.n	7c70 <ExFatFile::sync()+0x20>
    7c9c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7ca0:	6803      	ldr	r3, [r0, #0]
    7ca2:	6a1b      	ldr	r3, [r3, #32]
    7ca4:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7ca6:	2800      	cmp	r0, #0
    7ca8:	d0e2      	beq.n	7c70 <ExFatFile::sync()+0x20>
    return true;
    7caa:	2001      	movs	r0, #1
}
    7cac:	bd38      	pop	{r3, r4, r5, pc}
    7cae:	bf00      	nop

00007cb0 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    7cb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7cb2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    7cb6:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7cb8:	065a      	lsls	r2, r3, #25
    7cba:	d44c      	bmi.n	7d56 <ExFatFile::addDirCluster()+0xa6>
    7cbc:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    7cbe:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    7cc0:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    7cc4:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    7cc6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    7cca:	d301      	bcc.n	7cd0 <ExFatFile::addDirCluster()+0x20>
}
    7ccc:	2000      	movs	r0, #0
    7cce:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    7cd0:	4628      	mov	r0, r5
    7cd2:	f7ff fe4d 	bl	7970 <ExFatFile::addCluster()>
    7cd6:	2800      	cmp	r0, #0
    7cd8:	d0f8      	beq.n	7ccc <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    7cda:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7cdc:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    7cde:	69ae      	ldr	r6, [r5, #24]
    7ce0:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    7ce4:	3e02      	subs	r6, #2
    7ce6:	409e      	lsls	r6, r3
    7ce8:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7cec:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    7cee:	1931      	adds	r1, r6, r4
    7cf0:	2205      	movs	r2, #5
    7cf2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7cf6:	3401      	adds	r4, #1
    7cf8:	f005 f8f8 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    7cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
    7d00:	2100      	movs	r1, #0
    if (!cache) {
    7d02:	2800      	cmp	r0, #0
    7d04:	d0e2      	beq.n	7ccc <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    7d06:	f00a fcd7 	bl	126b8 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7d0a:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7d0c:	2301      	movs	r3, #1
    7d0e:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7d12:	4093      	lsls	r3, r2
    7d14:	429c      	cmp	r4, r3
    7d16:	d3ea      	bcc.n	7cee <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    7d18:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7d1c:	065b      	lsls	r3, r3, #25
    7d1e:	d415      	bmi.n	7d4c <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7d20:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7d24:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    7d28:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7d2c:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    7d30:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    7d34:	189b      	adds	r3, r3, r2
    7d36:	f141 0000 	adc.w	r0, r1, #0
    7d3a:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    7d3c:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    7d40:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    7d42:	189b      	adds	r3, r3, r2
    7d44:	f141 0100 	adc.w	r1, r1, #0
    7d48:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    7d4c:	4628      	mov	r0, r5
}
    7d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    7d52:	f7ff bf7d 	b.w	7c50 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7d56:	6a00      	ldr	r0, [r0, #32]
    7d58:	f000 fde6 	bl	8928 <ExFatPartition::rootLength()>
    7d5c:	e7af      	b.n	7cbe <ExFatFile::addDirCluster()+0xe>
    7d5e:	bf00      	nop

00007d60 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7d60:	b570      	push	{r4, r5, r6, lr}
    7d62:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7d64:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7d68:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    7d6a:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    7d6c:	f010 0f18 	tst.w	r0, #24
    7d70:	930c      	str	r3, [sp, #48]	; 0x30
    7d72:	931a      	str	r3, [sp, #104]	; 0x68
    7d74:	d003      	beq.n	7d7e <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    7d76:	6a20      	ldr	r0, [r4, #32]
    7d78:	6a0b      	ldr	r3, [r1, #32]
    7d7a:	4298      	cmp	r0, r3
    7d7c:	d002      	beq.n	7d84 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    7d7e:	2000      	movs	r0, #0
}
    7d80:	b01c      	add	sp, #112	; 0x70
    7d82:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7d84:	f640 2301 	movw	r3, #2561	; 0xa01
    7d88:	4668      	mov	r0, sp
    7d8a:	f7ff fd5b 	bl	7844 <ExFatFile::open(ExFatFile*, char const*, int)>
    7d8e:	2800      	cmp	r0, #0
    7d90:	d0f5      	beq.n	7d7e <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    7d92:	46a4      	mov	ip, r4
    7d94:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7d98:	ad0e      	add	r5, sp, #56	; 0x38
    7d9a:	f8dc 0000 	ldr.w	r0, [ip]
    7d9e:	f10c 0c10 	add.w	ip, ip, #16
    7da2:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7da6:	46ae      	mov	lr, r5
    7da8:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7dac:	3510      	adds	r5, #16
    7dae:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7db2:	45b4      	cmp	ip, r6
    7db4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7db8:	d1ef      	bne.n	7d9a <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    7dba:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    7dbe:	aa09      	add	r2, sp, #36	; 0x24
    7dc0:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    7dc4:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    7dc6:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    7dca:	ca07      	ldmia	r2, {r0, r1, r2}
    7dcc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7dd0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7dd4:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    7dd6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7dda:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7dde:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7de2:	f7ff ff35 	bl	7c50 <ExFatFile::sync()>
    7de6:	2800      	cmp	r0, #0
    7de8:	d0c9      	beq.n	7d7e <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    7dea:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7dec:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7dee:	2308      	movs	r3, #8
  return oldFile.remove();
    7df0:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    7df2:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7df4:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7df8:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7dfc:	f7ff fe02 	bl	7a04 <ExFatFile::remove()>
    7e00:	e7be      	b.n	7d80 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    7e02:	bf00      	nop

00007e04 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7e04:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    7e06:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7e0a:	f013 0f50 	tst.w	r3, #80	; 0x50
    7e0e:	d102      	bne.n	7e16 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    7e10:	2500      	movs	r5, #0
}
    7e12:	4628      	mov	r0, r5
    7e14:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7e16:	f640 2302 	movw	r3, #2562	; 0xa02
    7e1a:	4604      	mov	r4, r0
    7e1c:	f7ff fb46 	bl	74ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7e20:	2800      	cmp	r0, #0
    7e22:	d0f5      	beq.n	7e10 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    7e24:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7e26:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    7e28:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    7e2c:	f7ff ff40 	bl	7cb0 <ExFatFile::addDirCluster()>
    7e30:	4605      	mov	r5, r0
    7e32:	2800      	cmp	r0, #0
    7e34:	d0ec      	beq.n	7e10 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    7e36:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    7e38:	2200      	movs	r2, #0
    7e3a:	2300      	movs	r3, #0
    7e3c:	4620      	mov	r0, r4
    7e3e:	61e1      	str	r1, [r4, #28]
    7e40:	f7ff fabe 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7e44:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    7e46:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7e4a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    7e4e:	2b00      	cmp	r3, #0
    7e50:	d0df      	beq.n	7e12 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7e52:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    7e54:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7e56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7e5e:	f7ff be5b 	b.w	7b18 <ExFatFile::syncDir()>
    7e62:	bf00      	nop

00007e64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7e64:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e66:	2500      	movs	r5, #0
    7e68:	b097      	sub	sp, #92	; 0x5c
    7e6a:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    7e6c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7e70:	9201      	str	r2, [sp, #4]
    7e72:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    7e76:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d146      	bne.n	7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7e7c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7e80:	460e      	mov	r6, r1
    7e82:	f013 0f50 	tst.w	r3, #80	; 0x50
    7e86:	d040      	beq.n	7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    7e88:	7813      	ldrb	r3, [r2, #0]
    7e8a:	4604      	mov	r4, r0
    7e8c:	4611      	mov	r1, r2
    7e8e:	2b2f      	cmp	r3, #47	; 0x2f
    7e90:	d03e      	beq.n	7f10 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    7e92:	ab01      	add	r3, sp, #4
    7e94:	aa02      	add	r2, sp, #8
    7e96:	4620      	mov	r0, r4
    7e98:	f7ff f95e 	bl	7158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d034      	beq.n	7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    7ea0:	9b01      	ldr	r3, [sp, #4]
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d041      	beq.n	7f2c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    7ea8:	2300      	movs	r3, #0
    7eaa:	aa02      	add	r2, sp, #8
    7eac:	4631      	mov	r1, r6
    7eae:	4620      	mov	r0, r4
    7eb0:	f7ff fafc 	bl	74ac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7eb4:	b930      	cbnz	r0, 7ec4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    7eb6:	b347      	cbz	r7, 7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7eb8:	aa02      	add	r2, sp, #8
    7eba:	4631      	mov	r1, r6
    7ebc:	4620      	mov	r0, r4
    7ebe:	f7ff ffa1 	bl	7e04 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    7ec2:	b310      	cbz	r0, 7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    7ec4:	46a4      	mov	ip, r4
    7ec6:	ad08      	add	r5, sp, #32
    7ec8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7ecc:	f8dc 0000 	ldr.w	r0, [ip]
    7ed0:	f10c 0c10 	add.w	ip, ip, #16
    7ed4:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7ed8:	46ae      	mov	lr, r5
    7eda:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7ede:	3510      	adds	r5, #16
    7ee0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7ee4:	45b4      	cmp	ip, r6
    7ee6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7eea:	d1ef      	bne.n	7ecc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    7eec:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    7ef0:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    7ef2:	6028      	str	r0, [r5, #0]
    close();
    7ef4:	4620      	mov	r0, r4
    7ef6:	f7ff f8ed 	bl	70d4 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    7efa:	9901      	ldr	r1, [sp, #4]
    7efc:	ab01      	add	r3, sp, #4
    7efe:	aa02      	add	r2, sp, #8
    7f00:	4620      	mov	r0, r4
    7f02:	f7ff f929 	bl	7158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7f06:	2800      	cmp	r0, #0
    7f08:	d1ca      	bne.n	7ea0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    7f0a:	2000      	movs	r0, #0
}
    7f0c:	b017      	add	sp, #92	; 0x5c
    7f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    7f10:	3101      	adds	r1, #1
    7f12:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    7f14:	780b      	ldrb	r3, [r1, #0]
    7f16:	2b2f      	cmp	r3, #47	; 0x2f
    7f18:	d0fa      	beq.n	7f10 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7f1a:	6a31      	ldr	r1, [r6, #32]
    7f1c:	a808      	add	r0, sp, #32
    7f1e:	f7ff f907 	bl	7130 <ExFatFile::openRoot(ExFatVolume*)>
    7f22:	2800      	cmp	r0, #0
    7f24:	d0f1      	beq.n	7f0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    7f26:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    7f28:	ae08      	add	r6, sp, #32
    7f2a:	e7b2      	b.n	7e92 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    7f2c:	aa02      	add	r2, sp, #8
    7f2e:	4631      	mov	r1, r6
    7f30:	4620      	mov	r0, r4
    7f32:	f7ff ff67 	bl	7e04 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    7f36:	b017      	add	sp, #92	; 0x5c
    7f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f3a:	bf00      	nop

00007f3c <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7f3c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7f40:	079a      	lsls	r2, r3, #30
    7f42:	d562      	bpl.n	800a <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    7f44:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7f46:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    7f48:	b082      	sub	sp, #8
    7f4a:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    7f4c:	b3a5      	cbz	r5, 7fb8 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    7f4e:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    7f52:	d034      	beq.n	7fbe <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7f54:	6a00      	ldr	r0, [r0, #32]
    7f56:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7f58:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7f5c:	3a01      	subs	r2, #1
    7f5e:	68e1      	ldr	r1, [r4, #12]
    7f60:	f10c 0c09 	add.w	ip, ip, #9
    7f64:	f141 31ff 	adc.w	r1, r1, #4294967295
    7f68:	fa5f fc8c 	uxtb.w	ip, ip
    7f6c:	f1cc 0e20 	rsb	lr, ip, #32
    7f70:	fa22 f20c 	lsr.w	r2, r2, ip
    7f74:	f1ac 0c20 	sub.w	ip, ip, #32
    7f78:	fa01 fe0e 	lsl.w	lr, r1, lr
    7f7c:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    7f80:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7f82:	ea42 020e 	orr.w	r2, r2, lr
    7f86:	ea42 020c 	orr.w	r2, r2, ip
    7f8a:	3201      	adds	r2, #1
    if (m_curCluster) {
    7f8c:	b319      	cbz	r1, 7fd6 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    7f8e:	3d01      	subs	r5, #1
    7f90:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    7f92:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    7f94:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    7f96:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7f98:	bb72      	cbnz	r2, 7ff8 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    7f9e:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    7fa0:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7fa4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    7fa8:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    7fac:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    7fb0:	f7ff fe4e 	bl	7c50 <ExFatFile::sync()>

 fail:
  return false;
}
    7fb4:	b002      	add	sp, #8
    7fb6:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    7fb8:	2001      	movs	r0, #1
}
    7fba:	b002      	add	sp, #8
    7fbc:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    7fbe:	6981      	ldr	r1, [r0, #24]
    7fc0:	b961      	cbnz	r1, 7fdc <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    7fc2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7fc4:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    7fc6:	4629      	mov	r1, r5
    7fc8:	6a20      	ldr	r0, [r4, #32]
    7fca:	f000 fba7 	bl	871c <ExFatPartition::freeChain(unsigned long)>
    7fce:	b1c8      	cbz	r0, 8004 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7fd0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7fd4:	e7e1      	b.n	7f9a <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    7fd6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7fd8:	61e1      	str	r1, [r4, #28]
    7fda:	e7dd      	b.n	7f98 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7fdc:	aa01      	add	r2, sp, #4
    7fde:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    7fe0:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7fe2:	f000 fb59 	bl	8698 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7fe6:	2800      	cmp	r0, #0
    7fe8:	db0c      	blt.n	8004 <ExFatFile::truncate()+0xc8>
      if (fg) {
    7fea:	d110      	bne.n	800e <ExFatFile::truncate()+0xd2>
    if (toFree) {
    7fec:	9d01      	ldr	r5, [sp, #4]
    7fee:	2d00      	cmp	r5, #0
    7ff0:	d1e9      	bne.n	7fc6 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7ff2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7ff6:	e7d0      	b.n	7f9a <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7ff8:	2300      	movs	r3, #0
    7ffa:	9901      	ldr	r1, [sp, #4]
    7ffc:	f000 fa72 	bl	84e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    8000:	2800      	cmp	r0, #0
    8002:	d1e5      	bne.n	7fd0 <ExFatFile::truncate()+0x94>
  return false;
    8004:	2000      	movs	r0, #0
}
    8006:	b002      	add	sp, #8
    8008:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    800a:	2000      	movs	r0, #0
}
    800c:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    800e:	f04f 32ff 	mov.w	r2, #4294967295
    8012:	69a1      	ldr	r1, [r4, #24]
    8014:	6a20      	ldr	r0, [r4, #32]
    8016:	f000 fb61 	bl	86dc <ExFatPartition::fatPut(unsigned long, unsigned long)>
    801a:	2800      	cmp	r0, #0
    801c:	d1e6      	bne.n	7fec <ExFatFile::truncate()+0xb0>
    801e:	e7f1      	b.n	8004 <ExFatFile::truncate()+0xc8>

00008020 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    8020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8024:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    8028:	b083      	sub	sp, #12
    802a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    802c:	079d      	lsls	r5, r3, #30
    802e:	f140 80a1 	bpl.w	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    8032:	4691      	mov	r9, r2
    8034:	071a      	lsls	r2, r3, #28
    8036:	460e      	mov	r6, r1
    8038:	f100 8095 	bmi.w	8166 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    803c:	f1b9 0f00 	cmp.w	r9, #0
    8040:	f000 8128 	beq.w	8294 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    8044:	6823      	ldr	r3, [r4, #0]
    8046:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    8048:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    804a:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    804c:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    8050:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    8054:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    8058:	f1b8 0f00 	cmp.w	r8, #0
    805c:	f040 8094 	bne.w	8188 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    8060:	2900      	cmp	r1, #0
    8062:	f000 80d4 	beq.w	820e <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    8066:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    806a:	065b      	lsls	r3, r3, #25
    806c:	f140 80ec 	bpl.w	8248 <ExFatFile::write(void const*, unsigned int)+0x228>
    8070:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    8074:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8078:	f10c 0c09 	add.w	ip, ip, #9
    807c:	3b01      	subs	r3, #1
    807e:	fa5f fc8c 	uxtb.w	ip, ip
    8082:	f142 32ff 	adc.w	r2, r2, #4294967295
    8086:	f1cc 0e20 	rsb	lr, ip, #32
    808a:	fa23 f30c 	lsr.w	r3, r3, ip
    808e:	f1ac 0c20 	sub.w	ip, ip, #32
    8092:	fa02 fe0e 	lsl.w	lr, r2, lr
    8096:	fa22 fc0c 	lsr.w	ip, r2, ip
    809a:	69e2      	ldr	r2, [r4, #28]
    809c:	ea43 030e 	orr.w	r3, r3, lr
    80a0:	ea43 030c 	orr.w	r3, r3, ip
    80a4:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    80a6:	4299      	cmp	r1, r3
    80a8:	f080 80d5 	bcs.w	8256 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    80ac:	3101      	adds	r1, #1
    80ae:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    80b0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    80b4:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    80b6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    80ba:	4091      	lsls	r1, r2
    80bc:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    80be:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    80c2:	f0c0 808a 	bcc.w	81da <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    80c6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    80ca:	f0c0 80a6 	bcc.w	821a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    80ce:	2301      	movs	r3, #1
    80d0:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    80d2:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    80d4:	eba3 0308 	sub.w	r3, r3, r8
    80d8:	4293      	cmp	r3, r2
    80da:	bf28      	it	cs
    80dc:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    80de:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    80e2:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    80e4:	ea4f 2843 	mov.w	r8, r3, lsl #9
    80e8:	d309      	bcc.n	80fe <ExFatFile::write(void const*, unsigned int)+0xde>
    80ea:	185f      	adds	r7, r3, r1
    80ec:	42ba      	cmp	r2, r7
    80ee:	d206      	bcs.n	80fe <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    80f0:	2200      	movs	r2, #0
    80f2:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    80f6:	f04f 32ff 	mov.w	r2, #4294967295
    80fa:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    80fe:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    8102:	4632      	mov	r2, r6
    8104:	6807      	ldr	r7, [r0, #0]
    8106:	6abf      	ldr	r7, [r7, #40]	; 0x28
    8108:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    810a:	b398      	cbz	r0, 8174 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    810c:	4643      	mov	r3, r8
    src += n;
    810e:	4446      	add	r6, r8
    toWrite -= n;
    8110:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    8114:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    8118:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    811c:	19db      	adds	r3, r3, r7
    811e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    8122:	4298      	cmp	r0, r3
    8124:	4191      	sbcs	r1, r2
    m_curPosition += n;
    8126:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    812a:	d207      	bcs.n	813c <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    812c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    8130:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    8134:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    8138:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    813c:	2d00      	cmp	r5, #0
    813e:	d183      	bne.n	8048 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    8140:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    8144:	4298      	cmp	r0, r3
    8146:	4191      	sbcs	r1, r2
    8148:	f0c0 8096 	bcc.w	8278 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    814c:	4b53      	ldr	r3, [pc, #332]	; (829c <ExFatFile::write(void const*, unsigned int)+0x27c>)
    814e:	681b      	ldr	r3, [r3, #0]
    8150:	2b00      	cmp	r3, #0
    8152:	f000 809d 	beq.w	8290 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8156:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    815a:	4648      	mov	r0, r9
    815c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8160:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    8164:	e00d      	b.n	8182 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    8166:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    816a:	f7ff f929 	bl	73c0 <ExFatFile::seekSet(unsigned long long)>
    816e:	2800      	cmp	r0, #0
    8170:	f47f af64 	bne.w	803c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    8174:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    8178:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    817a:	f043 0301 	orr.w	r3, r3, #1
    817e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    8182:	b003      	add	sp, #12
    8184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    8188:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    818c:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    818e:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    8192:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    8196:	4091      	lsls	r1, r2
    8198:	4441      	add	r1, r8
    819a:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    819c:	2f00      	cmp	r7, #0
    819e:	d08e      	beq.n	80be <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    81a0:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    81a4:	2201      	movs	r2, #1
    81a6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    81aa:	45a8      	cmp	r8, r5
    81ac:	bf28      	it	cs
    81ae:	46a8      	movcs	r8, r5
    81b0:	f004 fe9c 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    81b4:	2800      	cmp	r0, #0
    81b6:	d0dd      	beq.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    81b8:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    81ba:	4447      	add	r7, r8
      memcpy(dst, src, n);
    81bc:	4642      	mov	r2, r8
    81be:	4631      	mov	r1, r6
    81c0:	f006 f9ec 	bl	e59c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    81c4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    81c8:	6a20      	ldr	r0, [r4, #32]
    81ca:	d19f      	bne.n	810c <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    81cc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    81d0:	f004 fe60 	bl	ce94 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    81d4:	2800      	cmp	r0, #0
    81d6:	d199      	bne.n	810c <ExFatFile::write(void const*, unsigned int)+0xec>
    81d8:	e7cc      	b.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    81da:	6862      	ldr	r2, [r4, #4]
    81dc:	6963      	ldr	r3, [r4, #20]
    81de:	9200      	str	r2, [sp, #0]
    81e0:	9301      	str	r3, [sp, #4]
    81e2:	6922      	ldr	r2, [r4, #16]
    81e4:	6823      	ldr	r3, [r4, #0]
    81e6:	4293      	cmp	r3, r2
    81e8:	e9dd 2300 	ldrd	r2, r3, [sp]
    81ec:	419a      	sbcs	r2, r3
    81ee:	d212      	bcs.n	8216 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    81f0:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    81f2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    81f6:	f004 fe79 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    81fa:	2800      	cmp	r0, #0
    81fc:	d0ba      	beq.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    81fe:	462a      	mov	r2, r5
    8200:	4631      	mov	r1, r6
    8202:	4438      	add	r0, r7
    m_curPosition += n;
    8204:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    8206:	f006 f9c9 	bl	e59c <memcpy>
    m_curPosition += n;
    820a:	462b      	mov	r3, r5
    820c:	e77f      	b.n	810e <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    820e:	69e1      	ldr	r1, [r4, #28]
    8210:	b349      	cbz	r1, 8266 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    8212:	61a1      	str	r1, [r4, #24]
    8214:	e74c      	b.n	80b0 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8216:	2205      	movs	r2, #5
    8218:	e7eb      	b.n	81f2 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    821a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    821e:	428b      	cmp	r3, r1
    8220:	d106      	bne.n	8230 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    8222:	2300      	movs	r3, #0
    8224:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    8228:	f04f 33ff 	mov.w	r3, #4294967295
    822c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    8230:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    8234:	4632      	mov	r2, r6
    8236:	6803      	ldr	r3, [r0, #0]
    8238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    823a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    823c:	2800      	cmp	r0, #0
    823e:	d099      	beq.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
    8240:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    8244:	4698      	mov	r8, r3
    8246:	e762      	b.n	810e <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8248:	f104 0218 	add.w	r2, r4, #24
    824c:	f000 fa24 	bl	8698 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8250:	2800      	cmp	r0, #0
    8252:	db8f      	blt.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    8254:	d104      	bne.n	8260 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    8256:	4620      	mov	r0, r4
    8258:	f7ff fb8a 	bl	7970 <ExFatFile::addCluster()>
    825c:	2800      	cmp	r0, #0
    825e:	d089      	beq.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    8260:	69a1      	ldr	r1, [r4, #24]
    8262:	6a20      	ldr	r0, [r4, #32]
    8264:	e724      	b.n	80b0 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    8266:	4620      	mov	r0, r4
    8268:	f7ff fb82 	bl	7970 <ExFatFile::addCluster()>
    826c:	2800      	cmp	r0, #0
    826e:	d081      	beq.n	8174 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    8270:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    8272:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    8274:	61e1      	str	r1, [r4, #28]
    8276:	e71b      	b.n	80b0 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8278:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    827c:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    827e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8282:	f061 037f 	orn	r3, r1, #127	; 0x7f
    8286:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    828a:	b003      	add	sp, #12
    828c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8290:	4648      	mov	r0, r9
    8292:	e776      	b.n	8182 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    8294:	e9d4 3200 	ldrd	r3, r2, [r4]
    8298:	e752      	b.n	8140 <ExFatFile::write(void const*, unsigned int)+0x120>
    829a:	bf00      	nop
    829c:	20024cdc 	.word	0x20024cdc

000082a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    82a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82a4:	460c      	mov	r4, r1
    82a6:	4615      	mov	r5, r2
    82a8:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    82ac:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    82ae:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    82b0:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    82b4:	b91b      	cbnz	r3, 82be <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    82b6:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    82ba:	429a      	cmp	r2, r3
    82bc:	d00e      	beq.n	82dc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    82be:	f004 fe3d 	bl	cf3c <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    82c2:	f004 feff 	bl	d0c4 <toUpcase(unsigned short)>
    82c6:	4606      	mov	r6, r0
    82c8:	4638      	mov	r0, r7
    82ca:	f004 fefb 	bl	d0c4 <toUpcase(unsigned short)>
    82ce:	4286      	cmp	r6, r0
    82d0:	d109      	bne.n	82e6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    82d2:	4544      	cmp	r4, r8
    82d4:	d1ea      	bne.n	82ac <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    82d6:	2001      	movs	r0, #1
}
    82d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    82dc:	fab7 f087 	clz	r0, r7
    82e0:	0940      	lsrs	r0, r0, #5
}
    82e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    82e6:	2000      	movs	r0, #0
}
    82e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000082ec <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    82ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    82f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    82f4:	b083      	sub	sp, #12
    82f6:	4688      	mov	r8, r1
  if (!isOpen()) {
    82f8:	2b00      	cmp	r3, #0
    82fa:	d04f      	beq.n	839c <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    82fc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    8300:	4607      	mov	r7, r0
    8302:	2b01      	cmp	r3, #1
    8304:	d953      	bls.n	83ae <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8306:	3a01      	subs	r2, #1
  char* str = name;
    8308:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    830a:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    830e:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8310:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    8312:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 83b4 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    8316:	2200      	movs	r2, #0
    8318:	4651      	mov	r1, sl
    831a:	4638      	mov	r0, r7
    831c:	9301      	str	r3, [sp, #4]
    831e:	f7fe febb 	bl	7098 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    8322:	2800      	cmp	r0, #0
    8324:	d03a      	beq.n	839c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    8326:	7802      	ldrb	r2, [r0, #0]
    8328:	2ac1      	cmp	r2, #193	; 0xc1
    832a:	d137      	bne.n	839c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    832c:	4605      	mov	r5, r0
    832e:	f100 091e 	add.w	r9, r0, #30
    8332:	9b01      	ldr	r3, [sp, #4]
    8334:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    8338:	b324      	cbz	r4, 8384 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    833a:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    833e:	b292      	uxth	r2, r2
    8340:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    8344:	d22a      	bcs.n	839c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    8346:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    834a:	f3c0 0009 	ubfx	r0, r0, #0, #10
    834e:	4320      	orrs	r0, r4
    8350:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8354:	4619      	mov	r1, r3
    8356:	4632      	mov	r2, r6
    8358:	f004 fe16 	bl	cf88 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    835c:	4603      	mov	r3, r0
    835e:	b1e8      	cbz	r0, 839c <ExFatFile::getName8(char*, unsigned int)+0xb0>
    8360:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    8362:	454d      	cmp	r5, r9
    8364:	d1e6      	bne.n	8334 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8366:	f10a 0a01 	add.w	sl, sl, #1
    836a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    836e:	fa5f fa8a 	uxtb.w	sl, sl
    8372:	4552      	cmp	r2, sl
    8374:	d2cf      	bcs.n	8316 <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    8376:	eba3 0008 	sub.w	r0, r3, r8
    837a:	4698      	mov	r8, r3
  *str = '\0';
    837c:	2300      	movs	r3, #0
    837e:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    8382:	e00f      	b.n	83a4 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    8384:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    8388:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    838a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    838e:	d302      	bcc.n	8396 <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    8390:	2800      	cmp	r0, #0
    8392:	d1df      	bne.n	8354 <ExFatFile::getName8(char*, unsigned int)+0x68>
    8394:	e7ef      	b.n	8376 <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    8396:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    839a:	d306      	bcc.n	83aa <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    839c:	2300      	movs	r3, #0
  return 0;
    839e:	4618      	mov	r0, r3
  *name = 0;
    83a0:	f888 3000 	strb.w	r3, [r8]
}
    83a4:	b003      	add	sp, #12
    83a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83aa:	4604      	mov	r4, r0
    83ac:	e7d9      	b.n	8362 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    83ae:	2000      	movs	r0, #0
    83b0:	e7e4      	b.n	837c <ExFatFile::getName8(char*, unsigned int)+0x90>
    83b2:	bf00      	nop
    83b4:	000ffc00 	.word	0x000ffc00

000083b8 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    83b8:	b570      	push	{r4, r5, r6, lr}
    83ba:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    83bc:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    83be:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    83c2:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    83c4:	4619      	mov	r1, r3
  uint16_t hash = 0;
    83c6:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    83c8:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    83ca:	6123      	str	r3, [r4, #16]
    next = begin;
    83cc:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    83ce:	e017      	b.n	8400 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    83d0:	f004 fdb4 	bl	cf3c <FsName::get16()>
    if (u == 0XFFFF) {
    83d4:	42a8      	cmp	r0, r5
    83d6:	d022      	beq.n	841e <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    83d8:	f004 fe74 	bl	d0c4 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    83dc:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    83de:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    83e0:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    83e2:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    83e4:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    83e8:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    83ea:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    83ec:	fa52 f080 	uxtab	r0, r2, r0
    83f0:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    83f2:	f3c0 004e 	ubfx	r0, r0, #1, #15
    83f6:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    83fa:	fa16 f080 	uxtah	r0, r6, r0
    83fe:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    8400:	4620      	mov	r0, r4
    8402:	2900      	cmp	r1, #0
    8404:	d1e4      	bne.n	83d0 <ExFatFile::hashName(ExName_t*)+0x18>
    8406:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    840a:	429a      	cmp	r2, r3
    840c:	d1e0      	bne.n	83d0 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    840e:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    8410:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    8412:	3801      	subs	r0, #1
    8414:	28fe      	cmp	r0, #254	; 0xfe
    8416:	bf8c      	ite	hi
    8418:	2000      	movhi	r0, #0
    841a:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    841c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    841e:	2000      	movs	r0, #0
}
    8420:	bd70      	pop	{r4, r5, r6, pc}
    8422:	bf00      	nop

00008424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    8424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8428:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    842a:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    842c:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    842e:	2900      	cmp	r1, #0
    8430:	d042      	beq.n	84b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    8432:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    8436:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    843a:	4543      	cmp	r3, r8
    843c:	d942      	bls.n	84c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    843e:	f008 0307 	and.w	r3, r8, #7
    8442:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    8444:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    8448:	409d      	lsls	r5, r3
    844a:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    844c:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    844e:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    8450:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    8454:	2200      	movs	r2, #0
    8456:	4638      	mov	r0, r7
    8458:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    845c:	f004 fd46 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    8460:	b1e8      	cbz	r0, 849e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    8462:	f10b 3bff 	add.w	fp, fp, #4294967295
    8466:	4483      	add	fp, r0
    8468:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    846c:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    8470:	e00a      	b.n	8488 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    8472:	454a      	cmp	r2, r9
    8474:	d02b      	beq.n	84ce <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    8476:	45a0      	cmp	r8, r4
    8478:	d010      	beq.n	849c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    847a:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    847e:	42a5      	cmp	r5, r4
    8480:	d914      	bls.n	84ac <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    8482:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    8486:	d00c      	beq.n	84a2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    8488:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    848a:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    848c:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    8490:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    8494:	d0ed      	beq.n	8472 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    8496:	45a0      	cmp	r8, r4
        endAlloc++;
    8498:	4626      	mov	r6, r4
        if (endAlloc == start) {
    849a:	d1ee      	bne.n	847a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    849c:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    849e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    84a2:	4558      	cmp	r0, fp
      mask = 1;
    84a4:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    84a8:	d1e0      	bne.n	846c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    84aa:	e001      	b.n	84b0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    84ac:	2600      	movs	r6, #0
    84ae:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    84b0:	2501      	movs	r5, #1
    i = 0;
    84b2:	f04f 0b00 	mov.w	fp, #0
    84b6:	e7cb      	b.n	8450 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    84b8:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    84bc:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    84c0:	4543      	cmp	r3, r8
    84c2:	d8bc      	bhi.n	843e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    84c4:	f04f 0800 	mov.w	r8, #0
    84c8:	2501      	movs	r5, #1
    start = 0;
    84ca:	46c3      	mov	fp, r8
    84cc:	e7be      	b.n	844c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    84ce:	f1ba 0f00 	cmp.w	sl, #0
    84d2:	d104      	bne.n	84de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    84d4:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    84d8:	bf08      	it	eq
    84da:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    84de:	1cb0      	adds	r0, r6, #2
}
    84e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000084e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    84e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    84e8:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    84ea:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    84ec:	4615      	mov	r5, r2
    84ee:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    84f0:	1883      	adds	r3, r0, r2
    84f2:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    84f6:	4293      	cmp	r3, r2
    84f8:	d837      	bhi.n	856a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    84fa:	bbce      	cbnz	r6, 8570 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    84fc:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    8500:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    8502:	bf88      	it	hi
    8504:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    8508:	f000 0307 	and.w	r3, r0, #7
    850c:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    850e:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    8512:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    8516:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    8518:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    851c:	b2e4      	uxtb	r4, r4
    851e:	2201      	movs	r2, #1
    8520:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    8522:	188f      	adds	r7, r1, r2
    8524:	f004 fce2 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8528:	b1f8      	cbz	r0, 856a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    852a:	f109 3eff 	add.w	lr, r9, #4294967295
    852e:	4486      	add	lr, r0
    8530:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    8534:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    8538:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    853c:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    8540:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    8544:	bf14      	ite	ne
    8546:	2201      	movne	r2, #1
    8548:	2200      	moveq	r2, #0
    854a:	42b2      	cmp	r2, r6
    854c:	d00d      	beq.n	856a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    854e:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    8550:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    8554:	d018      	beq.n	8588 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    8556:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    855a:	d1ed      	bne.n	8538 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    855c:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    855e:	46a1      	mov	r9, r4
    8560:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    8564:	d1e6      	bne.n	8534 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    8566:	4639      	mov	r1, r7
    8568:	e7d9      	b.n	851e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    856a:	2000      	movs	r0, #0
}
    856c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    8570:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    8574:	428b      	cmp	r3, r1
    8576:	d9c7      	bls.n	8508 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    8578:	4281      	cmp	r1, r0
    857a:	d3c5      	bcc.n	8508 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    857c:	4293      	cmp	r3, r2
    857e:	bf28      	it	cs
    8580:	2300      	movcs	r3, #0
    8582:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    8586:	e7bf      	b.n	8508 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    8588:	2001      	movs	r0, #1
}
    858a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    858e:	bf00      	nop

00008590 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    8592:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8596:	3301      	adds	r3, #1
    8598:	428b      	cmp	r3, r1
    859a:	d201      	bcs.n	85a0 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    859c:	2000      	movs	r0, #0
}
    859e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85a0:	4607      	mov	r7, r0
    85a2:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    85a4:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    85a8:	2500      	movs	r5, #0
    85aa:	e005      	b.n	85b8 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    85ac:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    85b0:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    85b2:	3301      	adds	r3, #1
    85b4:	42a3      	cmp	r3, r4
    85b6:	d3f1      	bcc.n	859c <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    85b8:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    85bc:	2200      	movs	r2, #0
    85be:	4630      	mov	r0, r6
    85c0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    85c4:	f004 fc92 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    85c8:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    85ca:	2800      	cmp	r0, #0
    85cc:	d0e6      	beq.n	859c <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    85ce:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    85d2:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    85d4:	1c63      	adds	r3, r4, #1
    85d6:	d1e9      	bne.n	85ac <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    85d8:	1c68      	adds	r0, r5, #1
}
    85da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000085dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    85dc:	b538      	push	{r3, r4, r5, lr}
    85de:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    85e0:	680b      	ldr	r3, [r1, #0]
    85e2:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    85e6:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    85ea:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    85ee:	3b02      	subs	r3, #2
    85f0:	6865      	ldr	r5, [r4, #4]
    85f2:	fa03 f30c 	lsl.w	r3, r3, ip
    85f6:	4029      	ands	r1, r5
    85f8:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    85fc:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    8600:	4419      	add	r1, r3
    8602:	f004 fc73 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    8606:	b118      	cbz	r0, 8610 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    8608:	6863      	ldr	r3, [r4, #4]
    860a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    860e:	4418      	add	r0, r3
}
    8610:	bd38      	pop	{r3, r4, r5, pc}
    8612:	bf00      	nop

00008614 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    8614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8618:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    861a:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    861e:	6849      	ldr	r1, [r1, #4]
    8620:	400b      	ands	r3, r1
  pos->position += offset;
    8622:	4411      	add	r1, r2
    8624:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8626:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    8628:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    862c:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    8630:	b2d2      	uxtb	r2, r2
    8632:	40d3      	lsrs	r3, r2
  while (tmp--) {
    8634:	b32b      	cbz	r3, 8682 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    8636:	4680      	mov	r8, r0
    8638:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    863a:	f500 7904 	add.w	r9, r0, #528	; 0x210
    863e:	e005      	b.n	864c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    8640:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    8642:	3d01      	subs	r5, #1
      pos->cluster++;
    8644:	f103 0301 	add.w	r3, r3, #1
    8648:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    864a:	d31a      	bcc.n	8682 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    864c:	7a26      	ldrb	r6, [r4, #8]
    864e:	2e00      	cmp	r6, #0
    8650:	d1f6      	bne.n	8640 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    8652:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    8656:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    8658:	6827      	ldr	r7, [r4, #0]
    865a:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    865c:	3301      	adds	r3, #1
    865e:	429f      	cmp	r7, r3
    8660:	d812      	bhi.n	8688 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8662:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    8666:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    866a:	f004 fc3f 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    866e:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    8670:	b150      	cbz	r0, 8688 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8672:	f3c7 0708 	ubfx	r7, r7, #0, #9
    8676:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    8678:	1c5a      	adds	r2, r3, #1
    867a:	d009      	beq.n	8690 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    867c:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    867e:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    8680:	d2e4      	bcs.n	864c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    8682:	2001      	movs	r0, #1
}
    8684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    8688:	f04f 30ff 	mov.w	r0, #4294967295
}
    868c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    8690:	4630      	mov	r0, r6
}
    8692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8696:	bf00      	nop

00008698 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8698:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    869a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    869e:	3301      	adds	r3, #1
    86a0:	428b      	cmp	r3, r1
    86a2:	d202      	bcs.n	86aa <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    86a4:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    86a8:	bd38      	pop	{r3, r4, r5, pc}
    86aa:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    86ac:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    86b0:	4615      	mov	r5, r2
    86b2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    86b6:	2200      	movs	r2, #0
    86b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    86bc:	f004 fc16 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    86c0:	2800      	cmp	r0, #0
    86c2:	d0ef      	beq.n	86a4 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    86c4:	00a4      	lsls	r4, r4, #2
    86c6:	f3c4 0408 	ubfx	r4, r4, #0, #9
    86ca:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    86cc:	1c5a      	adds	r2, r3, #1
    86ce:	d002      	beq.n	86d6 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    86d0:	2001      	movs	r0, #1
  *value = next;
    86d2:	602b      	str	r3, [r5, #0]
}
    86d4:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    86d6:	2000      	movs	r0, #0
}
    86d8:	bd38      	pop	{r3, r4, r5, pc}
    86da:	bf00      	nop

000086dc <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    86dc:	2901      	cmp	r1, #1
    86de:	d91b      	bls.n	8718 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    86e0:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    86e2:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    86e6:	460c      	mov	r4, r1
    86e8:	3301      	adds	r3, #1
    86ea:	428b      	cmp	r3, r1
    86ec:	d201      	bcs.n	86f2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    86ee:	2000      	movs	r0, #0
}
    86f0:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    86f2:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    86f6:	4615      	mov	r5, r2
    86f8:	f500 7004 	add.w	r0, r0, #528	; 0x210
    86fc:	2201      	movs	r2, #1
    86fe:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    8702:	f004 fbf3 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8706:	4603      	mov	r3, r0
    8708:	2800      	cmp	r0, #0
    870a:	d0f0      	beq.n	86ee <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    870c:	00a4      	lsls	r4, r4, #2
  return true;
    870e:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8710:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    8714:	511d      	str	r5, [r3, r4]
}
    8716:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8718:	2000      	movs	r0, #0
}
    871a:	4770      	bx	lr

0000871c <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    871c:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8720:	3301      	adds	r3, #1
    8722:	4299      	cmp	r1, r3
    8724:	d901      	bls.n	872a <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    8726:	2000      	movs	r0, #0
    8728:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    872a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    872e:	4605      	mov	r5, r0
    8730:	b083      	sub	sp, #12
    8732:	460c      	mov	r4, r1
    8734:	f500 7904 	add.w	r9, r0, #528	; 0x210
    8738:	460f      	mov	r7, r1
    873a:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    873e:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    8742:	2200      	movs	r2, #0
    8744:	4648      	mov	r0, r9
    8746:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    874a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    874e:	f004 fbcd 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8752:	b190      	cbz	r0, 877a <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8754:	00a3      	lsls	r3, r4, #2
    8756:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    875a:	58c2      	ldr	r2, [r0, r3]
    875c:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    875e:	1c53      	adds	r3, r2, #1
    8760:	bf16      	itet	ne
    8762:	4616      	movne	r6, r2
    8764:	f04f 0a00 	moveq.w	sl, #0
    8768:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    876c:	2c01      	cmp	r4, #1
    876e:	d904      	bls.n	877a <ExFatPartition::freeChain(unsigned long)+0x5e>
    8770:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    8774:	3201      	adds	r2, #1
    8776:	4294      	cmp	r4, r2
    8778:	d903      	bls.n	8782 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    877a:	2000      	movs	r0, #0
    877c:	b003      	add	sp, #12
    877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8782:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    8786:	2201      	movs	r2, #1
    8788:	4648      	mov	r0, r9
    878a:	4459      	add	r1, fp
    878c:	f004 fbae 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8790:	2800      	cmp	r0, #0
    8792:	d0f2      	beq.n	877a <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    8794:	9b01      	ldr	r3, [sp, #4]
    8796:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    879a:	f1ba 0f00 	cmp.w	sl, #0
    879e:	d012      	beq.n	87c6 <ExFatPartition::freeChain(unsigned long)+0xaa>
    87a0:	3401      	adds	r4, #1
    87a2:	42b4      	cmp	r4, r6
    87a4:	d008      	beq.n	87b8 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    87a6:	2300      	movs	r3, #0
    87a8:	1be2      	subs	r2, r4, r7
    87aa:	4639      	mov	r1, r7
    87ac:	4628      	mov	r0, r5
    87ae:	f7ff fe99 	bl	84e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    87b2:	2800      	cmp	r0, #0
    87b4:	d0e1      	beq.n	877a <ExFatPartition::freeChain(unsigned long)+0x5e>
    87b6:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    87b8:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    87bc:	3301      	adds	r3, #1
    87be:	42b3      	cmp	r3, r6
    87c0:	d3db      	bcc.n	877a <ExFatPartition::freeChain(unsigned long)+0x5e>
    87c2:	4634      	mov	r4, r6
    87c4:	e7bb      	b.n	873e <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    87c6:	1c62      	adds	r2, r4, #1
    87c8:	4653      	mov	r3, sl
    87ca:	4639      	mov	r1, r7
    87cc:	4628      	mov	r0, r5
    87ce:	1bd2      	subs	r2, r2, r7
}
    87d0:	b003      	add	sp, #12
    87d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    87d6:	f7ff be85 	b.w	84e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    87da:	bf00      	nop

000087dc <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    87dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    87e0:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    87e2:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    87e4:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    87e8:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    87ec:	462c      	mov	r4, r5
    87ee:	2200      	movs	r2, #0
    87f0:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    87f2:	1c4f      	adds	r7, r1, #1
    87f4:	f004 fb7a 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    87f8:	b1a8      	cbz	r0, 8826 <ExFatPartition::freeClusterCount()+0x4a>
    87fa:	f100 3eff 	add.w	lr, r0, #4294967295
    87fe:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    8802:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    8806:	e005      	b.n	8814 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    8808:	b979      	cbnz	r1, 882a <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    880a:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    880c:	4284      	cmp	r4, r0
    880e:	d209      	bcs.n	8824 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    8810:	454c      	cmp	r4, r9
    8812:	d016      	beq.n	8842 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    8814:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8818:	29ff      	cmp	r1, #255	; 0xff
    881a:	d1f5      	bne.n	8808 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    881c:	3408      	adds	r4, #8
        usedCount+= 8;
    881e:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    8820:	4284      	cmp	r4, r0
    8822:	d3f5      	bcc.n	8810 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    8824:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    8826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    882a:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    882c:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    882e:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    8834:	bf18      	it	ne
    8836:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8838:	3a01      	subs	r2, #1
    883a:	fa5f f38c 	uxtb.w	r3, ip
    883e:	d1f6      	bne.n	882e <ExFatPartition::freeClusterCount()+0x52>
    8840:	e7e3      	b.n	880a <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    8842:	4639      	mov	r1, r7
    8844:	e7d3      	b.n	87ee <ExFatPartition::freeClusterCount()+0x12>
    8846:	bf00      	nop

00008848 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    884a:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    884c:	f04f 36ff 	mov.w	r6, #4294967295
    8850:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8854:	4615      	mov	r5, r2
  m_blockDev = dev;
    8856:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    885a:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    885c:	6041      	str	r1, [r0, #4]
    885e:	461a      	mov	r2, r3
    8860:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    8864:	4619      	mov	r1, r3
  m_fatType = 0;
    8866:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    886a:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    886c:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    886e:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    8872:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    8876:	4638      	mov	r0, r7
    8878:	f004 fb38 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    887c:	2d04      	cmp	r5, #4
    887e:	d80d      	bhi.n	889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    8880:	4606      	mov	r6, r0
    8882:	b158      	cbz	r0, 889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    8884:	b1bd      	cbz	r5, 88b6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    8886:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    8888:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    888c:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    8890:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    8894:	d102      	bne.n	889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    8896:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    889a:	b90b      	cbnz	r3, 88a0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    889c:	2000      	movs	r0, #0
}
    889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    88a0:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    88a4:	4638      	mov	r0, r7
    88a6:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    88aa:	4629      	mov	r1, r5
    88ac:	f004 fb1e 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    88b0:	4606      	mov	r6, r0
    88b2:	2800      	cmp	r0, #0
    88b4:	d0f2      	beq.n	889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    88b6:	2205      	movs	r2, #5
    88b8:	491a      	ldr	r1, [pc, #104]	; (8924 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    88ba:	1cf0      	adds	r0, r6, #3
    88bc:	f009 ffa4 	bl	12808 <strncmp>
    88c0:	2800      	cmp	r0, #0
    88c2:	d1eb      	bne.n	889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    88c4:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    88c8:	2b09      	cmp	r3, #9
    88ca:	d1e7      	bne.n	889c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    88cc:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    88ce:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    88d0:	442b      	add	r3, r5
    88d2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    88d6:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    88d8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    88dc:	6db3      	ldr	r3, [r6, #88]	; 0x58
    88de:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    88e0:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    88e2:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    88e6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    88e8:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    88ec:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    88ee:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    88f2:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    88f6:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    88fa:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    88fc:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8900:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8904:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    8908:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    890a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    890e:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    8912:	462a      	mov	r2, r5
    8914:	f7ff fd86 	bl	8424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    8918:	2340      	movs	r3, #64	; 0x40
  return true;
    891a:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    891c:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    8920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8922:	bf00      	nop
    8924:	20000b9c 	.word	0x20000b9c

00008928 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    8928:	b510      	push	{r4, lr}
    892a:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    892c:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    8930:	f7ff fe2e 	bl	8590 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    8934:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    8938:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    893a:	b2db      	uxtb	r3, r3
}
    893c:	4098      	lsls	r0, r3
    893e:	bd10      	pop	{r4, pc}

00008940 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    8940:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    8942:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    8946:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    8948:	2300      	movs	r3, #0
    894a:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    894c:	4668      	mov	r0, sp
    894e:	4621      	mov	r1, r4
    8950:	930c      	str	r3, [sp, #48]	; 0x30
    8952:	f7fe ff77 	bl	7844 <ExFatFile::open(ExFatFile*, char const*, int)>
    8956:	4605      	mov	r5, r0
    8958:	b1d8      	cbz	r0, 8992 <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    895a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    895e:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    8962:	d019      	beq.n	8998 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    8964:	46ee      	mov	lr, sp
    8966:	46a4      	mov	ip, r4
    8968:	ae0c      	add	r6, sp, #48	; 0x30
    896a:	4674      	mov	r4, lr
    896c:	f10c 0c10 	add.w	ip, ip, #16
    8970:	f10e 0e10 	add.w	lr, lr, #16
    8974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8976:	42b4      	cmp	r4, r6
    8978:	f84c 0c10 	str.w	r0, [ip, #-16]
    897c:	f84c 1c0c 	str.w	r1, [ip, #-12]
    8980:	f84c 2c08 	str.w	r2, [ip, #-8]
    8984:	f84c 3c04 	str.w	r3, [ip, #-4]
    8988:	d1ef      	bne.n	896a <ExFatVolume::chdir(char const*)+0x2a>
    898a:	f8de 0000 	ldr.w	r0, [lr]
    898e:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    8992:	4628      	mov	r0, r5
    8994:	b00e      	add	sp, #56	; 0x38
    8996:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8998:	461d      	mov	r5, r3
}
    899a:	4628      	mov	r0, r5
    899c:	b00e      	add	sp, #56	; 0x38
    899e:	bd70      	pop	{r4, r5, r6, pc}

000089a0 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    89a0:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    89a2:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    89a6:	b082      	sub	sp, #8
    89a8:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    89aa:	2b00      	cmp	r3, #0
    89ac:	db0d      	blt.n	89ca <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    89ae:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    89b0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    89b4:	f004 fa6e 	bl	ce94 <FsCache::sync()>
    89b8:	2800      	cmp	r0, #0
    89ba:	d13b      	bne.n	8a34 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    89bc:	7863      	ldrb	r3, [r4, #1]
  return false;
    89be:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    89c0:	f043 0301 	orr.w	r3, r3, #1
    89c4:	7063      	strb	r3, [r4, #1]
}
    89c6:	b002      	add	sp, #8
    89c8:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    89ca:	6880      	ldr	r0, [r0, #8]
    89cc:	2201      	movs	r2, #1
    89ce:	69a1      	ldr	r1, [r4, #24]
    89d0:	3028      	adds	r0, #40	; 0x28
    89d2:	f004 fa8b 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    89d6:	2800      	cmp	r0, #0
    89d8:	d0f0      	beq.n	89bc <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    89da:	88a5      	ldrh	r5, [r4, #4]
    89dc:	f005 050f 	and.w	r5, r5, #15
    89e0:	016b      	lsls	r3, r5, #5
    89e2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    89e6:	5cc3      	ldrb	r3, [r0, r3]
    89e8:	2be5      	cmp	r3, #229	; 0xe5
    89ea:	d0e7      	beq.n	89bc <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    89ec:	7823      	ldrb	r3, [r4, #0]
    89ee:	071b      	lsls	r3, r3, #28
    89f0:	d501      	bpl.n	89f6 <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    89f2:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    89f4:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    89f6:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    89f8:	4915      	ldr	r1, [pc, #84]	; (8a50 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    89fa:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    89fc:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    89fe:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8a00:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    8a02:	b166      	cbz	r6, 8a1e <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    8a04:	f10d 0203 	add.w	r2, sp, #3
    8a08:	f10d 0106 	add.w	r1, sp, #6
    8a0c:	a801      	add	r0, sp, #4
    8a0e:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    8a10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    8a14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8a18:	832b      	strh	r3, [r5, #24]
    8a1a:	826b      	strh	r3, [r5, #18]
    8a1c:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8a1e:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    8a20:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a26:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8a2a:	70a3      	strb	r3, [r4, #2]
    8a2c:	f004 fa32 	bl	ce94 <FsCache::sync()>
    8a30:	2800      	cmp	r0, #0
    8a32:	d0c3      	beq.n	89bc <FatFile::sync() [clone .part.0]+0x1c>
    8a34:	f505 700e 	add.w	r0, r5, #568	; 0x238
    8a38:	f004 fa2c 	bl	ce94 <FsCache::sync()>
    8a3c:	2800      	cmp	r0, #0
    8a3e:	d0bd      	beq.n	89bc <FatFile::sync() [clone .part.0]+0x1c>
    8a40:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    8a42:	6803      	ldr	r3, [r0, #0]
    8a44:	6a1b      	ldr	r3, [r3, #32]
    8a46:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a48:	2800      	cmp	r0, #0
    8a4a:	d0b7      	beq.n	89bc <FatFile::sync() [clone .part.0]+0x1c>
    8a4c:	e7bb      	b.n	89c6 <FatFile::sync() [clone .part.0]+0x26>
    8a4e:	bf00      	nop
    8a50:	20024cdc 	.word	0x20024cdc

00008a54 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    8a54:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    8a56:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    8a58:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    8a5c:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    8a5e:	6880      	ldr	r0, [r0, #8]
    8a60:	4629      	mov	r1, r5
    8a62:	f001 fdaf 	bl	a5c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    8a66:	b150      	cbz	r0, 8a7e <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    8a68:	b155      	cbz	r5, 8a80 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    8a6a:	6923      	ldr	r3, [r4, #16]
    8a6c:	3501      	adds	r5, #1
    8a6e:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    8a70:	78a3      	ldrb	r3, [r4, #2]
    8a72:	bf18      	it	ne
    8a74:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8a78:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a7c:	70a3      	strb	r3, [r4, #2]
}
    8a7e:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    8a80:	78a3      	ldrb	r3, [r4, #2]
    8a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8a86:	e7f7      	b.n	8a78 <FatFile::addCluster()+0x24>

00008a88 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    8a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    8a8a:	7804      	ldrb	r4, [r0, #0]
    8a8c:	f014 0420 	ands.w	r4, r4, #32
    8a90:	d104      	bne.n	8a9c <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    8a92:	4b1a      	ldr	r3, [pc, #104]	; (8afc <FatFile::addDirCluster()+0x74>)
    8a94:	4605      	mov	r5, r0
    8a96:	6942      	ldr	r2, [r0, #20]
    8a98:	429a      	cmp	r2, r3
    8a9a:	d302      	bcc.n	8aa2 <FatFile::addDirCluster()+0x1a>
  return false;
    8a9c:	2700      	movs	r7, #0
}
    8a9e:	4638      	mov	r0, r7
    8aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    8aa2:	f7ff ffd7 	bl	8a54 <FatFile::addCluster()>
    8aa6:	4607      	mov	r7, r0
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d0f7      	beq.n	8a9c <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    8aac:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8aae:	692e      	ldr	r6, [r5, #16]
    8ab0:	7982      	ldrb	r2, [r0, #6]
    8ab2:	3e02      	subs	r6, #2
    8ab4:	6941      	ldr	r1, [r0, #20]
    8ab6:	4096      	lsls	r6, r2
    8ab8:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    8aba:	7901      	ldrb	r1, [r0, #4]
    8abc:	b1a9      	cbz	r1, 8aea <FatFile::addDirCluster()+0x62>
    8abe:	4621      	mov	r1, r4
    8ac0:	e006      	b.n	8ad0 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    8ac2:	f009 fdf9 	bl	126b8 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    8ac6:	68a8      	ldr	r0, [r5, #8]
    8ac8:	b2e1      	uxtb	r1, r4
    8aca:	7902      	ldrb	r2, [r0, #4]
    8acc:	428a      	cmp	r2, r1
    8ace:	d90b      	bls.n	8ae8 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    8ad0:	4431      	add	r1, r6
    8ad2:	2205      	movs	r2, #5
    8ad4:	3028      	adds	r0, #40	; 0x28
    8ad6:	3401      	adds	r4, #1
    8ad8:	f004 fa08 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    8adc:	f44f 7200 	mov.w	r2, #512	; 0x200
    8ae0:	2100      	movs	r1, #0
    if (!pc) {
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d1ed      	bne.n	8ac2 <FatFile::addDirCluster()+0x3a>
    8ae6:	e7d9      	b.n	8a9c <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    8ae8:	7982      	ldrb	r2, [r0, #6]
    8aea:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    8aee:	6969      	ldr	r1, [r5, #20]
}
    8af0:	4638      	mov	r0, r7
    8af2:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    8af4:	fa11 f383 	uxtah	r3, r1, r3
    8af8:	616b      	str	r3, [r5, #20]
}
    8afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8afc:	001ffe00 	.word	0x001ffe00

00008b00 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    8b00:	b510      	push	{r4, lr}
    8b02:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    8b04:	6880      	ldr	r0, [r0, #8]
    8b06:	460a      	mov	r2, r1
    8b08:	3028      	adds	r0, #40	; 0x28
    8b0a:	69a1      	ldr	r1, [r4, #24]
    8b0c:	f004 f9ee 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8b10:	b120      	cbz	r0, 8b1c <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    8b12:	88a3      	ldrh	r3, [r4, #4]
    8b14:	f003 030f 	and.w	r3, r3, #15
    8b18:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    8b1c:	bd10      	pop	{r4, pc}
    8b1e:	bf00      	nop

00008b20 <FatFile::close()>:
bool FatFile::close() {
    8b20:	b510      	push	{r4, lr}
  if (!isOpen()) {
    8b22:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    8b24:	4604      	mov	r4, r0
  if (!isOpen()) {
    8b26:	b12b      	cbz	r3, 8b34 <FatFile::close()+0x14>
    8b28:	f7ff ff3a 	bl	89a0 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    8b2c:	2300      	movs	r3, #0
    8b2e:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8b30:	70a3      	strb	r3, [r4, #2]
}
    8b32:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    8b34:	2300      	movs	r3, #0
    return true;
    8b36:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    8b38:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8b3a:	70a3      	strb	r3, [r4, #2]
}
    8b3c:	bd10      	pop	{r4, pc}
    8b3e:	bf00      	nop

00008b40 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    8b40:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    8b42:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    8b44:	4605      	mov	r5, r0
    8b46:	460c      	mov	r4, r1
  if (!isOpen()) {
    8b48:	b113      	cbz	r3, 8b50 <FatFile::dirEntry(DirFat_t*)+0x10>
    8b4a:	f7ff ff29 	bl	89a0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    8b4e:	b1f0      	cbz	r0, 8b8e <FatFile::dirEntry(DirFat_t*)+0x4e>
    8b50:	68a8      	ldr	r0, [r5, #8]
    8b52:	2200      	movs	r2, #0
    8b54:	69a9      	ldr	r1, [r5, #24]
    8b56:	3028      	adds	r0, #40	; 0x28
    8b58:	f004 f9c8 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8b5c:	b1b8      	cbz	r0, 8b8e <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    8b5e:	88aa      	ldrh	r2, [r5, #4]
    8b60:	f002 020f 	and.w	r2, r2, #15
    8b64:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    8b68:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    8b6a:	685d      	ldr	r5, [r3, #4]
    8b6c:	5880      	ldr	r0, [r0, r2]
    8b6e:	6899      	ldr	r1, [r3, #8]
    8b70:	68da      	ldr	r2, [r3, #12]
    8b72:	6020      	str	r0, [r4, #0]
    8b74:	6065      	str	r5, [r4, #4]
    8b76:	60a1      	str	r1, [r4, #8]
    8b78:	60e2      	str	r2, [r4, #12]
    8b7a:	6918      	ldr	r0, [r3, #16]
    8b7c:	695d      	ldr	r5, [r3, #20]
    8b7e:	6999      	ldr	r1, [r3, #24]
    8b80:	69da      	ldr	r2, [r3, #28]
    8b82:	6120      	str	r0, [r4, #16]
  return true;
    8b84:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    8b86:	6165      	str	r5, [r4, #20]
    8b88:	61a1      	str	r1, [r4, #24]
    8b8a:	61e2      	str	r2, [r4, #28]
}
    8b8c:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8b8e:	2000      	movs	r0, #0
}
    8b90:	bd38      	pop	{r3, r4, r5, pc}
    8b92:	bf00      	nop

00008b94 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    8b94:	b530      	push	{r4, r5, lr}
    8b96:	b089      	sub	sp, #36	; 0x24
    8b98:	460d      	mov	r5, r1
    8b9a:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8b9c:	4669      	mov	r1, sp
    8b9e:	f7ff ffcf 	bl	8b40 <FatFile::dirEntry(DirFat_t*)>
    8ba2:	b128      	cbz	r0, 8bb0 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    8ba4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    8ba8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    8bac:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    8bae:	8023      	strh	r3, [r4, #0]
}
    8bb0:	b009      	add	sp, #36	; 0x24
    8bb2:	bd30      	pop	{r4, r5, pc}

00008bb4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    8bb4:	b530      	push	{r4, r5, lr}
    8bb6:	b089      	sub	sp, #36	; 0x24
    8bb8:	460d      	mov	r5, r1
    8bba:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    8bbc:	4669      	mov	r1, sp
    8bbe:	f7ff ffbf 	bl	8b40 <FatFile::dirEntry(DirFat_t*)>
    8bc2:	b128      	cbz	r0, 8bd0 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    8bc4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    8bc8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    8bcc:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    8bce:	8023      	strh	r3, [r4, #0]
}
    8bd0:	b009      	add	sp, #36	; 0x24
    8bd2:	bd30      	pop	{r4, r5, pc}

00008bd4 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8bd4:	780b      	ldrb	r3, [r1, #0]
    8bd6:	f013 0f70 	tst.w	r3, #112	; 0x70
    8bda:	d101      	bne.n	8be0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    8bdc:	2000      	movs	r0, #0
    8bde:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8be0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8be2:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8be6:	b089      	sub	sp, #36	; 0x24
    8be8:	460d      	mov	r5, r1
    8bea:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8bec:	f001 f84a 	bl	9c84 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8bf0:	b138      	cbz	r0, 8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    8bf2:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8bf4:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    8bf6:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    8bf8:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8bfa:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    8bfc:	f7ff ff44 	bl	8a88 <FatFile::addDirCluster()>
    8c00:	b910      	cbnz	r0, 8c08 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    8c02:	2000      	movs	r0, #0
    8c04:	b009      	add	sp, #36	; 0x24
    8c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    8c08:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    8c0a:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    8c0c:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    8c0e:	b16b      	cbz	r3, 8c2c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    8c10:	6963      	ldr	r3, [r4, #20]
    8c12:	b133      	cbz	r3, 8c22 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c14:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    8c16:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c18:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    8c1c:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8c20:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    8c22:	4620      	mov	r0, r4
    8c24:	f7ff febc 	bl	89a0 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    8c28:	2800      	cmp	r0, #0
    8c2a:	d0ea      	beq.n	8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8c2c:	68a0      	ldr	r0, [r4, #8]
    8c2e:	2201      	movs	r2, #1
    8c30:	69a1      	ldr	r1, [r4, #24]
    8c32:	3028      	adds	r0, #40	; 0x28
    8c34:	f004 f95a 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8c38:	2800      	cmp	r0, #0
    8c3a:	d0e2      	beq.n	8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    8c3c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    8c40:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    8c42:	f00c 0c0f 	and.w	ip, ip, #15
    8c46:	ea4f 134c 	mov.w	r3, ip, lsl #5
    8c4a:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    8c4e:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    8c52:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    8c54:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8c56:	6a23      	ldr	r3, [r4, #32]
    8c58:	f897 e006 	ldrb.w	lr, [r7, #6]
    8c5c:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    8c5e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    8c62:	f8dc 2008 	ldr.w	r2, [ip, #8]
    8c66:	f8dc 300c 	ldr.w	r3, [ip, #12]
    8c6a:	fa06 f60e 	lsl.w	r6, r6, lr
    8c6e:	46ee      	mov	lr, sp
    8c70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    8c74:	f8dc 0010 	ldr.w	r0, [ip, #16]
    8c78:	f8dc 1014 	ldr.w	r1, [ip, #20]
    8c7c:	f8dc 2018 	ldr.w	r2, [ip, #24]
    8c80:	f8dc 301c 	ldr.w	r3, [ip, #28]
    8c84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    8c88:	697b      	ldr	r3, [r7, #20]
    8c8a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8c8e:	2201      	movs	r2, #1
    8c90:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    8c92:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    8c96:	f8cd 3001 	str.w	r3, [sp, #1]
    8c9a:	f8cd 3005 	str.w	r3, [sp, #5]
    8c9e:	f8ad 3009 	strh.w	r3, [sp, #9]
    8ca2:	f004 f923 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8ca6:	4684      	mov	ip, r0
    8ca8:	2800      	cmp	r0, #0
    8caa:	d0aa      	beq.n	8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    8cac:	272e      	movs	r7, #46	; 0x2e
    8cae:	46ee      	mov	lr, sp
    8cb0:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    8cb4:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    8cb6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8cba:	f8cc 0000 	str.w	r0, [ip]
    8cbe:	f8cc 1004 	str.w	r1, [ip, #4]
    8cc2:	f8cc 2008 	str.w	r2, [ip, #8]
    8cc6:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    8cca:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    8cce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8cd2:	f8cc 0010 	str.w	r0, [ip, #16]
    8cd6:	f8cc 1014 	str.w	r1, [ip, #20]
    8cda:	f8cc 2018 	str.w	r2, [ip, #24]
    8cde:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8ce2:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8ce4:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8ce6:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8cea:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    8cee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8cf0:	f8cc 0020 	str.w	r0, [ip, #32]
    8cf4:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    8cf8:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    8cfc:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    8d00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8d02:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    8d06:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    8d0a:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    8d0e:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    8d12:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8d14:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8d18:	f004 f8bc 	bl	ce94 <FsCache::sync()>
    8d1c:	2800      	cmp	r0, #0
    8d1e:	f43f af70 	beq.w	8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8d22:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8d26:	f004 f8b5 	bl	ce94 <FsCache::sync()>
    8d2a:	2800      	cmp	r0, #0
    8d2c:	f43f af69 	beq.w	8c02 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8d30:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    8d32:	6803      	ldr	r3, [r0, #0]
    8d34:	6a1b      	ldr	r3, [r3, #32]
}
    8d36:	b009      	add	sp, #36	; 0x24
    8d38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8d3c:	4718      	bx	r3
    8d3e:	bf00      	nop

00008d40 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    8d44:	2600      	movs	r6, #0
    8d46:	b094      	sub	sp, #80	; 0x50
    8d48:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    8d4a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8d4c:	9201      	str	r2, [sp, #4]
    8d4e:	f8ad 6014 	strh.w	r6, [sp, #20]
    8d52:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    8d54:	2b00      	cmp	r3, #0
    8d56:	d141      	bne.n	8ddc <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8d58:	780b      	ldrb	r3, [r1, #0]
    8d5a:	460d      	mov	r5, r1
    8d5c:	f013 0f70 	tst.w	r3, #112	; 0x70
    8d60:	d03c      	beq.n	8ddc <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    8d62:	7813      	ldrb	r3, [r2, #0]
    8d64:	4604      	mov	r4, r0
    8d66:	4616      	mov	r6, r2
    8d68:	2b2f      	cmp	r3, #47	; 0x2f
    8d6a:	d03b      	beq.n	8de4 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    8d6c:	2700      	movs	r7, #0
    8d6e:	e028      	b.n	8dc2 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    8d70:	9e01      	ldr	r6, [sp, #4]
    8d72:	7836      	ldrb	r6, [r6, #0]
    8d74:	2e00      	cmp	r6, #0
    8d76:	d050      	beq.n	8e1a <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    8d78:	f000 ff84 	bl	9c84 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8d7c:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    8d7e:	aa02      	add	r2, sp, #8
    8d80:	4629      	mov	r1, r5
    8d82:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    8d84:	b92b      	cbnz	r3, 8d92 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    8d86:	f1b8 0f00 	cmp.w	r8, #0
    8d8a:	d027      	beq.n	8ddc <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8d8c:	f7ff ff22 	bl	8bd4 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8d90:	b320      	cbz	r0, 8ddc <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    8d92:	46a6      	mov	lr, r4
    8d94:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    8d98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8d9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8da0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8da4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8da8:	f8de 5000 	ldr.w	r5, [lr]
    8dac:	4620      	mov	r0, r4
  if (!isOpen()) {
    8dae:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    8db0:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    8db4:	b10b      	cbz	r3, 8dba <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    8db6:	f7ff fdf3 	bl	89a0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8dba:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    8dbc:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    8dbe:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8dc0:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8dc2:	4631      	mov	r1, r6
    8dc4:	ab01      	add	r3, sp, #4
    8dc6:	aa02      	add	r2, sp, #8
    8dc8:	4620      	mov	r0, r4
    8dca:	f001 f8a7 	bl	9f1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8dce:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    8dd0:	aa02      	add	r2, sp, #8
    8dd2:	4629      	mov	r1, r5
    8dd4:	2300      	movs	r3, #0
    8dd6:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8dd8:	2e00      	cmp	r6, #0
    8dda:	d1c9      	bne.n	8d70 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    8ddc:	2000      	movs	r0, #0
}
    8dde:	b014      	add	sp, #80	; 0x50
    8de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8de4:	3601      	adds	r6, #1
    8de6:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    8de8:	7833      	ldrb	r3, [r6, #0]
    8dea:	2b2f      	cmp	r3, #47	; 0x2f
    8dec:	d0fa      	beq.n	8de4 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    8dee:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    8df0:	2224      	movs	r2, #36	; 0x24
    8df2:	2100      	movs	r1, #0
    8df4:	a80b      	add	r0, sp, #44	; 0x2c
    8df6:	f009 fc5f 	bl	126b8 <memset>
  m_vol = vol;
    8dfa:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    8dfc:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8dfe:	2b10      	cmp	r3, #16
    8e00:	d003      	beq.n	8e0a <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    8e02:	2b20      	cmp	r3, #32
    8e04:	d00f      	beq.n	8e26 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    8e06:	2b0c      	cmp	r3, #12
    8e08:	d1e8      	bne.n	8ddc <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8e0a:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8e0c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    8e10:	2301      	movs	r3, #1
    parent = &tmpDir;
    8e12:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    8e14:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    8e18:	e7a8      	b.n	8d6c <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    8e1a:	aa02      	add	r2, sp, #8
    8e1c:	f7ff feda 	bl	8bd4 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    8e20:	b014      	add	sp, #80	; 0x50
    8e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    8e26:	2340      	movs	r3, #64	; 0x40
    8e28:	e7f0      	b.n	8e0c <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    8e2a:	bf00      	nop

00008e2c <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e30:	2500      	movs	r5, #0
    8e32:	b094      	sub	sp, #80	; 0x50
    8e34:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    8e36:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8e38:	9201      	str	r2, [sp, #4]
    8e3a:	9502      	str	r5, [sp, #8]
    8e3c:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    8e40:	2b00      	cmp	r3, #0
    8e42:	d137      	bne.n	8eb4 <FatFile::open(FatFile*, char const*, int)+0x88>
    8e44:	780b      	ldrb	r3, [r1, #0]
    8e46:	460e      	mov	r6, r1
    8e48:	f013 0f70 	tst.w	r3, #112	; 0x70
    8e4c:	d032      	beq.n	8eb4 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    8e4e:	7813      	ldrb	r3, [r2, #0]
    8e50:	4604      	mov	r4, r0
    8e52:	4615      	mov	r5, r2
    8e54:	2b2f      	cmp	r3, #47	; 0x2f
    8e56:	d031      	beq.n	8ebc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8e58:	2700      	movs	r7, #0
    8e5a:	e01e      	b.n	8e9a <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    8e5c:	9d01      	ldr	r5, [sp, #4]
    8e5e:	782d      	ldrb	r5, [r5, #0]
    8e60:	2d00      	cmp	r5, #0
    8e62:	d040      	beq.n	8ee6 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8e64:	f000 ff0e 	bl	9c84 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    8e68:	46a6      	mov	lr, r4
    8e6a:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    8e6e:	b308      	cbz	r0, 8eb4 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    8e70:	4666      	mov	r6, ip
  if (!isOpen()) {
    8e72:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    8e74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8e84:	f8de 3000 	ldr.w	r3, [lr]
    8e88:	4620      	mov	r0, r4
    8e8a:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    8e8e:	b10d      	cbz	r5, 8e94 <FatFile::open(FatFile*, char const*, int)+0x68>
    8e90:	f7ff fd86 	bl	89a0 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8e94:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    8e96:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8e98:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8e9a:	4629      	mov	r1, r5
    8e9c:	ab01      	add	r3, sp, #4
    8e9e:	aa0b      	add	r2, sp, #44	; 0x2c
    8ea0:	4620      	mov	r0, r4
    8ea2:	f001 f83b 	bl	9f1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8ea6:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    8ea8:	aa0b      	add	r2, sp, #44	; 0x2c
    8eaa:	4631      	mov	r1, r6
    8eac:	2300      	movs	r3, #0
    8eae:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8eb0:	2d00      	cmp	r5, #0
    8eb2:	d1d3      	bne.n	8e5c <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    8eb4:	2000      	movs	r0, #0
}
    8eb6:	b014      	add	sp, #80	; 0x50
    8eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8ebc:	3501      	adds	r5, #1
    8ebe:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    8ec0:	7829      	ldrb	r1, [r5, #0]
    8ec2:	292f      	cmp	r1, #47	; 0x2f
    8ec4:	d0fa      	beq.n	8ebc <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    8ec6:	b9a9      	cbnz	r1, 8ef4 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    8ec8:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8eca:	2224      	movs	r2, #36	; 0x24
    8ecc:	4620      	mov	r0, r4
    8ece:	f009 fbf3 	bl	126b8 <memset>
  m_vol = vol;
    8ed2:	60a5      	str	r5, [r4, #8]
    8ed4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8ed6:	2b10      	cmp	r3, #16
    8ed8:	d003      	beq.n	8ee2 <FatFile::open(FatFile*, char const*, int)+0xb6>
    8eda:	2b20      	cmp	r3, #32
    8edc:	d022      	beq.n	8f24 <FatFile::open(FatFile*, char const*, int)+0xf8>
    8ede:	2b0c      	cmp	r3, #12
    8ee0:	d1e8      	bne.n	8eb4 <FatFile::open(FatFile*, char const*, int)+0x88>
    8ee2:	2220      	movs	r2, #32
    8ee4:	e01f      	b.n	8f26 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    8ee6:	4643      	mov	r3, r8
    8ee8:	aa0b      	add	r2, sp, #44	; 0x2c
    8eea:	f000 fecb 	bl	9c84 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    8eee:	b014      	add	sp, #80	; 0x50
    8ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8ef4:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8ef6:	2224      	movs	r2, #36	; 0x24
    8ef8:	2100      	movs	r1, #0
    8efa:	a802      	add	r0, sp, #8
    8efc:	f009 fbdc 	bl	126b8 <memset>
  m_vol = vol;
    8f00:	9604      	str	r6, [sp, #16]
    8f02:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8f04:	2b10      	cmp	r3, #16
    8f06:	d003      	beq.n	8f10 <FatFile::open(FatFile*, char const*, int)+0xe4>
    8f08:	2b20      	cmp	r3, #32
    8f0a:	d003      	beq.n	8f14 <FatFile::open(FatFile*, char const*, int)+0xe8>
    8f0c:	2b0c      	cmp	r3, #12
    8f0e:	d1d1      	bne.n	8eb4 <FatFile::open(FatFile*, char const*, int)+0x88>
    8f10:	2320      	movs	r3, #32
    8f12:	e000      	b.n	8f16 <FatFile::open(FatFile*, char const*, int)+0xea>
    8f14:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8f16:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    8f1a:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    8f1c:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    8f1e:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    8f22:	e799      	b.n	8e58 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    8f24:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8f26:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8f28:	7022      	strb	r2, [r4, #0]
  return true;
    8f2a:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8f2c:	70a3      	strb	r3, [r4, #2]
  return true;
    8f2e:	e7c2      	b.n	8eb6 <FatFile::open(FatFile*, char const*, int)+0x8a>

00008f30 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    8f30:	b119      	cbz	r1, 8f3a <FatFile::open(FatVolume*, char const*, int)+0xa>
    8f32:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    8f36:	f7ff bf79 	b.w	8e2c <FatFile::open(FatFile*, char const*, int)>
}
    8f3a:	4608      	mov	r0, r1
    8f3c:	4770      	bx	lr
    8f3e:	bf00      	nop

00008f40 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    8f40:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    8f42:	b570      	push	{r4, r5, r6, lr}
    8f44:	460d      	mov	r5, r1
    8f46:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    8f48:	b993      	cbnz	r3, 8f70 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    8f4a:	7806      	ldrb	r6, [r0, #0]
    8f4c:	b10e      	cbz	r6, 8f52 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    8f4e:	4618      	mov	r0, r3
}
    8f50:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    8f52:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    8f54:	2224      	movs	r2, #36	; 0x24
    8f56:	4631      	mov	r1, r6
    8f58:	f009 fbae 	bl	126b8 <memset>
  m_vol = vol;
    8f5c:	60a5      	str	r5, [r4, #8]
    8f5e:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8f60:	2b10      	cmp	r3, #16
    8f62:	d018      	beq.n	8f96 <FatFile::openCluster(FatFile*)+0x56>
    8f64:	2b20      	cmp	r3, #32
    8f66:	d010      	beq.n	8f8a <FatFile::openCluster(FatFile*)+0x4a>
    8f68:	2b0c      	cmp	r3, #12
    8f6a:	d014      	beq.n	8f96 <FatFile::openCluster(FatFile*)+0x56>
    8f6c:	4630      	mov	r0, r6
}
    8f6e:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    8f70:	2224      	movs	r2, #36	; 0x24
    8f72:	2100      	movs	r1, #0
    8f74:	f009 fba0 	bl	126b8 <memset>
  m_flags = FILE_FLAG_READ;
    8f78:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8f7a:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8f7c:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8f7e:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    8f80:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    8f84:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8f86:	6223      	str	r3, [r4, #32]
}
    8f88:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8f8a:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8f8c:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8f8e:	7022      	strb	r2, [r4, #0]
  return true;
    8f90:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8f92:	70a3      	strb	r3, [r4, #2]
}
    8f94:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8f96:	2220      	movs	r2, #32
    8f98:	e7f8      	b.n	8f8c <FatFile::openCluster(FatFile*)+0x4c>
    8f9a:	bf00      	nop

00008f9c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    8f9c:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    8f9e:	7805      	ldrb	r5, [r0, #0]
    8fa0:	b10d      	cbz	r5, 8fa6 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    8fa2:	2000      	movs	r0, #0
}
    8fa4:	bd70      	pop	{r4, r5, r6, pc}
    8fa6:	460e      	mov	r6, r1
    8fa8:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    8faa:	2224      	movs	r2, #36	; 0x24
    8fac:	4629      	mov	r1, r5
    8fae:	f009 fb83 	bl	126b8 <memset>
  m_vol = vol;
    8fb2:	60a6      	str	r6, [r4, #8]
    8fb4:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8fb6:	2b10      	cmp	r3, #16
    8fb8:	d00b      	beq.n	8fd2 <FatFile::openRoot(FatVolume*)+0x36>
    8fba:	2b20      	cmp	r3, #32
    8fbc:	d003      	beq.n	8fc6 <FatFile::openRoot(FatVolume*)+0x2a>
    8fbe:	2b0c      	cmp	r3, #12
    8fc0:	d007      	beq.n	8fd2 <FatFile::openRoot(FatVolume*)+0x36>
    8fc2:	4628      	mov	r0, r5
}
    8fc4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8fc6:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8fc8:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8fca:	7022      	strb	r2, [r4, #0]
  return true;
    8fcc:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8fce:	70a3      	strb	r3, [r4, #2]
}
    8fd0:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8fd2:	2220      	movs	r2, #32
    8fd4:	e7f8      	b.n	8fc8 <FatFile::openRoot(FatVolume*)+0x2c>
    8fd6:	bf00      	nop

00008fd8 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    8fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fdc:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    8fe0:	7883      	ldrb	r3, [r0, #2]
    8fe2:	b083      	sub	sp, #12
    8fe4:	4605      	mov	r5, r0
  if (!isReadable()) {
    8fe6:	07df      	lsls	r7, r3, #31
    8fe8:	f140 808c 	bpl.w	9104 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    8fec:	4688      	mov	r8, r1
    8fee:	7801      	ldrb	r1, [r0, #0]
    8ff0:	4692      	mov	sl, r2
  if (isFile()) {
    8ff2:	070e      	lsls	r6, r1, #28
    8ff4:	f100 8091 	bmi.w	911a <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    8ff8:	068c      	lsls	r4, r1, #26
    8ffa:	d508      	bpl.n	900e <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    8ffc:	6883      	ldr	r3, [r0, #8]
    8ffe:	895a      	ldrh	r2, [r3, #10]
    9000:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    9002:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    9006:	b29b      	uxth	r3, r3
    9008:	459a      	cmp	sl, r3
    900a:	bf28      	it	cs
    900c:	469a      	movcs	sl, r3
  while (toRead) {
    900e:	f1ba 0f00 	cmp.w	sl, #0
    9012:	f000 80af 	beq.w	9174 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    9016:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9018:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    901c:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    901e:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    9020:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    9024:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    9028:	68af      	ldr	r7, [r5, #8]
    902a:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    902e:	d53d      	bpl.n	90ac <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    9030:	6a39      	ldr	r1, [r7, #32]
    9032:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    9036:	f1bb 0f00 	cmp.w	fp, #0
    903a:	d151      	bne.n	90e0 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    903c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9040:	d34e      	bcc.n	90e0 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    9042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    9044:	4291      	cmp	r1, r2
    9046:	d04b      	beq.n	90e0 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    9048:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    904c:	f0c0 8082 	bcc.w	9154 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    9050:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    9052:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    9054:	0680      	lsls	r0, r0, #26
    9056:	d405      	bmi.n	9064 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    9058:	7938      	ldrb	r0, [r7, #4]
    905a:	eba0 0009 	sub.w	r0, r0, r9
    905e:	4283      	cmp	r3, r0
    9060:	bf28      	it	cs
    9062:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    9064:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    9066:	ea4f 2443 	mov.w	r4, r3, lsl #9
    906a:	d80c      	bhi.n	9086 <FatFile::read(void*, unsigned int)+0xae>
    906c:	18c8      	adds	r0, r1, r3
    906e:	4282      	cmp	r2, r0
    9070:	d209      	bcs.n	9086 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    9072:	f107 0028 	add.w	r0, r7, #40	; 0x28
    9076:	e9cd 1300 	strd	r1, r3, [sp]
    907a:	f003 ff0b 	bl	ce94 <FsCache::sync()>
    907e:	e9dd 1300 	ldrd	r1, r3, [sp]
    9082:	2800      	cmp	r0, #0
    9084:	d03e      	beq.n	9104 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    9086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9088:	6802      	ldr	r2, [r0, #0]
    908a:	6957      	ldr	r7, [r2, #20]
    908c:	4642      	mov	r2, r8
    908e:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    9090:	2800      	cmp	r0, #0
    9092:	d037      	beq.n	9104 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    9094:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    9096:	1b36      	subs	r6, r6, r4
    dst += n;
    9098:	44a0      	add	r8, r4
    m_curPosition += n;
    909a:	4422      	add	r2, r4
    909c:	616a      	str	r2, [r5, #20]
  while (toRead) {
    909e:	d069      	beq.n	9174 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    90a0:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    90a2:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    90a6:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    90a8:	0688      	lsls	r0, r1, #26
    90aa:	d4c1      	bmi.n	9030 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    90ac:	f897 9005 	ldrb.w	r9, [r7, #5]
    90b0:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    90b4:	f1bb 0f00 	cmp.w	fp, #0
    90b8:	d136      	bne.n	9128 <FatFile::read(void*, unsigned int)+0x150>
    90ba:	f1b9 0f00 	cmp.w	r9, #0
    90be:	d133      	bne.n	9128 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    90c0:	2a00      	cmp	r2, #0
    90c2:	d133      	bne.n	912c <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    90c4:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    90c6:	bf4c      	ite	mi
    90c8:	6a3a      	ldrmi	r2, [r7, #32]
    90ca:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    90cc:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    90ce:	3a02      	subs	r2, #2
    90d0:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    90d2:	6979      	ldr	r1, [r7, #20]
    90d4:	4082      	lsls	r2, r0
    90d6:	4449      	add	r1, r9
    90d8:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    90da:	f1bb 0f00 	cmp.w	fp, #0
    90de:	d0ad      	beq.n	903c <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    90e0:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    90e4:	2200      	movs	r2, #0
    90e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
    90ea:	42b4      	cmp	r4, r6
    90ec:	bf28      	it	cs
    90ee:	4634      	movcs	r4, r6
    90f0:	f003 fefc 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    90f4:	b130      	cbz	r0, 9104 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    90f6:	eb00 010b 	add.w	r1, r0, fp
    90fa:	4622      	mov	r2, r4
    90fc:	4640      	mov	r0, r8
    90fe:	f005 fa4d 	bl	e59c <memcpy>
    9102:	e7c7      	b.n	9094 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    9104:	786b      	ldrb	r3, [r5, #1]
  return -1;
    9106:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    910a:	f043 0302 	orr.w	r3, r3, #2
    910e:	706b      	strb	r3, [r5, #1]
}
    9110:	b003      	add	sp, #12
    9112:	ecbd 8b02 	vpop	{d8}
    9116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    911a:	69c3      	ldr	r3, [r0, #28]
    911c:	6942      	ldr	r2, [r0, #20]
    911e:	1a9b      	subs	r3, r3, r2
    9120:	459a      	cmp	sl, r3
    9122:	bf28      	it	cs
    9124:	469a      	movcs	sl, r3
    9126:	e772      	b.n	900e <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    9128:	692a      	ldr	r2, [r5, #16]
    912a:	e7d0      	b.n	90ce <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    912c:	070b      	lsls	r3, r1, #28
    912e:	d505      	bpl.n	913c <FatFile::read(void*, unsigned int)+0x164>
    9130:	78aa      	ldrb	r2, [r5, #2]
    9132:	0654      	lsls	r4, r2, #25
    9134:	d502      	bpl.n	913c <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    9136:	692a      	ldr	r2, [r5, #16]
    9138:	3201      	adds	r2, #1
    913a:	e7c7      	b.n	90cc <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    913c:	ee18 2a10 	vmov	r2, s16
    9140:	4638      	mov	r0, r7
    9142:	6929      	ldr	r1, [r5, #16]
    9144:	f001 fa8c 	bl	a660 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9148:	2800      	cmp	r0, #0
    914a:	dbdb      	blt.n	9104 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    914c:	d00c      	beq.n	9168 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    914e:	68af      	ldr	r7, [r5, #8]
    9150:	692a      	ldr	r2, [r5, #16]
    9152:	e7bc      	b.n	90ce <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    9154:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9156:	4642      	mov	r2, r8
    9158:	6803      	ldr	r3, [r0, #0]
    915a:	691b      	ldr	r3, [r3, #16]
    915c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    915e:	2800      	cmp	r0, #0
    9160:	d0d0      	beq.n	9104 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    9162:	f44f 7400 	mov.w	r4, #512	; 0x200
    9166:	e795      	b.n	9094 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    9168:	782b      	ldrb	r3, [r5, #0]
    916a:	f013 0f70 	tst.w	r3, #112	; 0x70
    916e:	d0c9      	beq.n	9104 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    9170:	ebaa 0a06 	sub.w	sl, sl, r6
    9174:	4650      	mov	r0, sl
}
    9176:	b003      	add	sp, #12
    9178:	ecbd 8b02 	vpop	{d8}
    917c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009180 <FatFile::peek()>:
int FatFile::peek() {
    9180:	b570      	push	{r4, r5, r6, lr}
    9182:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    9184:	2201      	movs	r2, #1
    9186:	4604      	mov	r4, r0
    9188:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    918c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    9190:	f7ff ff22 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    9194:	2801      	cmp	r0, #1
    9196:	bf0c      	ite	eq
    9198:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    919c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    91a0:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    91a4:	b002      	add	sp, #8
    91a6:	bd70      	pop	{r4, r5, r6, pc}

000091a8 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    91a8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    91aa:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    91ae:	b530      	push	{r4, r5, lr}
    91b0:	4604      	mov	r4, r0
    91b2:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    91b4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    91b8:	d009      	beq.n	91ce <FatFile::readDirCache(bool)+0x26>
    91ba:	2901      	cmp	r1, #1
    91bc:	d107      	bne.n	91ce <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    91be:	3320      	adds	r3, #32
    91c0:	6143      	str	r3, [r0, #20]
    return m_buffer;
    91c2:	68a0      	ldr	r0, [r4, #8]
    91c4:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    91c6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    91ca:	b003      	add	sp, #12
    91cc:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    91ce:	2201      	movs	r2, #1
    91d0:	f10d 0107 	add.w	r1, sp, #7
    91d4:	4620      	mov	r0, r4
    91d6:	f7ff feff 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    91da:	b240      	sxtb	r0, r0
    91dc:	2801      	cmp	r0, #1
    91de:	d103      	bne.n	91e8 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    91e0:	6963      	ldr	r3, [r4, #20]
    91e2:	331f      	adds	r3, #31
    91e4:	6163      	str	r3, [r4, #20]
    91e6:	e7ec      	b.n	91c2 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    91e8:	2000      	movs	r0, #0
    91ea:	e7ee      	b.n	91ca <FatFile::readDirCache(bool)+0x22>

000091ec <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    91ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    91f0:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    91f2:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    91f4:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    91f6:	f013 0f18 	tst.w	r3, #24
    91fa:	9608      	str	r6, [sp, #32]
    91fc:	9611      	str	r6, [sp, #68]	; 0x44
    91fe:	d006      	beq.n	920e <FatFile::rename(FatFile*, char const*)+0x22>
    9200:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    9202:	6883      	ldr	r3, [r0, #8]
    9204:	688a      	ldr	r2, [r1, #8]
    9206:	4604      	mov	r4, r0
    9208:	460d      	mov	r5, r1
    920a:	429a      	cmp	r2, r3
    920c:	d003      	beq.n	9216 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    920e:	2000      	movs	r0, #0
}
    9210:	b01a      	add	sp, #104	; 0x68
    9212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9216:	f7ff fbc3 	bl	89a0 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    921a:	46a6      	mov	lr, r4
    921c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    9220:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    9224:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9228:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    922c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9230:	f8de 3000 	ldr.w	r3, [lr]
    9234:	4632      	mov	r2, r6
    9236:	69a1      	ldr	r1, [r4, #24]
    9238:	f8cc 3000 	str.w	r3, [ip]
    923c:	68a3      	ldr	r3, [r4, #8]
    923e:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9242:	f003 fe53 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    9246:	2800      	cmp	r0, #0
    9248:	d0e1      	beq.n	920e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    924a:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    924c:	46ec      	mov	ip, sp
  if (isFile()) {
    924e:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    9252:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    9256:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    925a:	0152      	lsls	r2, r2, #5
    925c:	f8de 1004 	ldr.w	r1, [lr, #4]
    9260:	5880      	ldr	r0, [r0, r2]
    9262:	f8de 300c 	ldr.w	r3, [lr, #12]
    9266:	f8de 2008 	ldr.w	r2, [lr, #8]
    926a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    926e:	f8de 1014 	ldr.w	r1, [lr, #20]
    9272:	f8de 2018 	ldr.w	r2, [lr, #24]
    9276:	f8de 301c 	ldr.w	r3, [lr, #28]
    927a:	f8de 0010 	ldr.w	r0, [lr, #16]
    927e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    9282:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    9286:	463a      	mov	r2, r7
    9288:	4629      	mov	r1, r5
  if (isFile()) {
    928a:	f040 809b 	bne.w	93c4 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    928e:	a808      	add	r0, sp, #32
    9290:	f7ff fd56 	bl	8d40 <FatFile::mkdir(FatFile*, char const*, bool)>
    9294:	2800      	cmp	r0, #0
    9296:	d0ba      	beq.n	920e <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    9298:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    929a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    929e:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    92a0:	990e      	ldr	r1, [sp, #56]	; 0x38
    92a2:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    92a4:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    92a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    92aa:	68a0      	ldr	r0, [r4, #8]
    92ac:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    92ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    92b0:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    92b2:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    92b4:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    92b6:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    92ba:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    92be:	f003 fe15 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    92c2:	2800      	cmp	r0, #0
    92c4:	d0a3      	beq.n	920e <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    92c6:	88a3      	ldrh	r3, [r4, #4]
    92c8:	f003 030f 	and.w	r3, r3, #15
    92cc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    92d0:	f8dd 300d 	ldr.w	r3, [sp, #13]
    92d4:	f8c0 300d 	str.w	r3, [r0, #13]
    92d8:	f8dd 3011 	ldr.w	r3, [sp, #17]
    92dc:	f8c0 3011 	str.w	r3, [r0, #17]
    92e0:	f8dd 3015 	ldr.w	r3, [sp, #21]
    92e4:	f8c0 3015 	str.w	r3, [r0, #21]
    92e8:	f8dd 3019 	ldr.w	r3, [sp, #25]
    92ec:	f8c0 3019 	str.w	r3, [r0, #25]
    92f0:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    92f4:	f8a0 301d 	strh.w	r3, [r0, #29]
    92f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    92fc:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    92fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9302:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    9304:	2e00      	cmp	r6, #0
    9306:	d03b      	beq.n	9380 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    9308:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    930a:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    930c:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    930e:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    9310:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9312:	408b      	lsls	r3, r1
    9314:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    9318:	4419      	add	r1, r3
    931a:	f003 fde7 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    931e:	4605      	mov	r5, r0
    9320:	2800      	cmp	r0, #0
    9322:	f43f af74 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    9326:	6a00      	ldr	r0, [r0, #32]
    9328:	466f      	mov	r7, sp
    932a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    932c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    932e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    9330:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9332:	6b28      	ldr	r0, [r5, #48]	; 0x30
    9334:	6b69      	ldr	r1, [r5, #52]	; 0x34
    9336:	6baa      	ldr	r2, [r5, #56]	; 0x38
    9338:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    933a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    933c:	4631      	mov	r1, r6
    933e:	68a0      	ldr	r0, [r4, #8]
    9340:	f001 f9a0 	bl	a684 <FatPartition::freeChain(unsigned long)>
    9344:	2800      	cmp	r0, #0
    9346:	f43f af62 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    934a:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    934c:	6a23      	ldr	r3, [r4, #32]
    934e:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    9350:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9352:	3b02      	subs	r3, #2
    9354:	f850 1c14 	ldr.w	r1, [r0, #-20]
    9358:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    935a:	2201      	movs	r2, #1
    935c:	4419      	add	r1, r3
    935e:	f003 fdc5 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    9362:	4606      	mov	r6, r0
    9364:	2800      	cmp	r0, #0
    9366:	f43f af52 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    936a:	466d      	mov	r5, sp
    936c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    936e:	6230      	str	r0, [r6, #32]
    9370:	6271      	str	r1, [r6, #36]	; 0x24
    9372:	62b2      	str	r2, [r6, #40]	; 0x28
    9374:	62f3      	str	r3, [r6, #44]	; 0x2c
    9376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9378:	6330      	str	r0, [r6, #48]	; 0x30
    937a:	6371      	str	r1, [r6, #52]	; 0x34
    937c:	63b2      	str	r2, [r6, #56]	; 0x38
    937e:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    9380:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    9382:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    9384:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    9386:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    9388:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    938a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    938e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    9392:	f000 fe2d 	bl	9ff0 <FatFile::remove()>
    9396:	2800      	cmp	r0, #0
    9398:	f43f af39 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    939c:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    939e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    93a2:	f003 fd77 	bl	ce94 <FsCache::sync()>
    93a6:	2800      	cmp	r0, #0
    93a8:	f43f af31 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
    93ac:	f504 700e 	add.w	r0, r4, #568	; 0x238
    93b0:	f003 fd70 	bl	ce94 <FsCache::sync()>
    93b4:	2800      	cmp	r0, #0
    93b6:	f43f af2a 	beq.w	920e <FatFile::rename(FatFile*, char const*)+0x22>
    93ba:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    93bc:	6803      	ldr	r3, [r0, #0]
    93be:	6a1b      	ldr	r3, [r3, #32]
    93c0:	4798      	blx	r3
    93c2:	e725      	b.n	9210 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    93c4:	f640 2301 	movw	r3, #2561	; 0xa01
    93c8:	4660      	mov	r0, ip
    93ca:	f7ff fd2f 	bl	8e2c <FatFile::open(FatFile*, char const*, int)>
    93ce:	2800      	cmp	r0, #0
    93d0:	f47f af63 	bne.w	929a <FatFile::rename(FatFile*, char const*)+0xae>
    93d4:	e71b      	b.n	920e <FatFile::rename(FatFile*, char const*)+0x22>
    93d6:	bf00      	nop

000093d8 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    93d8:	7803      	ldrb	r3, [r0, #0]
    93da:	06da      	lsls	r2, r3, #27
    93dc:	d401      	bmi.n	93e2 <FatFile::rmdir()+0xa>
}
    93de:	2000      	movs	r0, #0
    93e0:	4770      	bx	lr
  if (pos == m_curPosition) {
    93e2:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    93e4:	b530      	push	{r4, r5, lr}
    93e6:	4604      	mov	r4, r0
    93e8:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    93ea:	b133      	cbz	r3, 93fa <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    93ec:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    93ee:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    93f0:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    93f4:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    93f8:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    93fa:	2300      	movs	r3, #0
    93fc:	e00f      	b.n	941e <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    93fe:	6163      	str	r3, [r4, #20]
    9400:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9402:	016a      	lsls	r2, r5, #5
    9404:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    9406:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9408:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    940c:	b1ea      	cbz	r2, 944a <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    940e:	2ae5      	cmp	r2, #229	; 0xe5
    9410:	d004      	beq.n	941c <FatFile::rmdir()+0x44>
    9412:	2a2e      	cmp	r2, #46	; 0x2e
    9414:	d002      	beq.n	941c <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    9416:	7adb      	ldrb	r3, [r3, #11]
    9418:	071b      	lsls	r3, r3, #28
    941a:	d522      	bpl.n	9462 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    941c:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    941e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9422:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    9426:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    942a:	d1e8      	bne.n	93fe <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    942c:	2201      	movs	r2, #1
    942e:	f10d 0107 	add.w	r1, sp, #7
    9432:	4620      	mov	r0, r4
    9434:	f7ff fdd0 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    9438:	b240      	sxtb	r0, r0
    943a:	2801      	cmp	r0, #1
    943c:	d103      	bne.n	9446 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    943e:	6963      	ldr	r3, [r4, #20]
    9440:	331f      	adds	r3, #31
    9442:	6163      	str	r3, [r4, #20]
    9444:	e7dc      	b.n	9400 <FatFile::rmdir()+0x28>
      if (!getError()) {
    9446:	7863      	ldrb	r3, [r4, #1]
    9448:	b95b      	cbnz	r3, 9462 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    944a:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    944c:	2208      	movs	r2, #8
  return remove();
    944e:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    9450:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    9454:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    9456:	70a3      	strb	r3, [r4, #2]
}
    9458:	b003      	add	sp, #12
    945a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    945e:	f000 bdc7 	b.w	9ff0 <FatFile::remove()>
}
    9462:	2000      	movs	r0, #0
    9464:	b003      	add	sp, #12
    9466:	bd30      	pop	{r4, r5, pc}

00009468 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    9468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    946c:	7803      	ldrb	r3, [r0, #0]
    946e:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    9470:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    9472:	2b00      	cmp	r3, #0
    9474:	d039      	beq.n	94ea <FatFile::seekSet(unsigned long)+0x82>
    9476:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    9478:	6941      	ldr	r1, [r0, #20]
    947a:	42a9      	cmp	r1, r5
    947c:	d042      	beq.n	9504 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    947e:	2d00      	cmp	r5, #0
    9480:	d037      	beq.n	94f2 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    9482:	0718      	lsls	r0, r3, #28
    9484:	d52a      	bpl.n	94dc <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    9486:	69e2      	ldr	r2, [r4, #28]
    9488:	42aa      	cmp	r2, r5
    948a:	d32e      	bcc.n	94ea <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    948c:	f8d4 c008 	ldr.w	ip, [r4, #8]
    9490:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    9492:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    9494:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    9498:	f012 0f40 	tst.w	r2, #64	; 0x40
    949c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    94a0:	b2c0      	uxtb	r0, r0
    94a2:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    94a6:	d130      	bne.n	950a <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    94a8:	1e4a      	subs	r2, r1, #1
    94aa:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    94ac:	b109      	cbz	r1, 94b2 <FatFile::seekSet(unsigned long)+0x4a>
    94ae:	4296      	cmp	r6, r2
    94b0:	d22f      	bcs.n	9512 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    94b2:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    94b4:	bf4c      	ite	mi
    94b6:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    94ba:	6a23      	ldrpl	r3, [r4, #32]
    94bc:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    94be:	f104 0810 	add.w	r8, r4, #16
    94c2:	e006      	b.n	94d2 <FatFile::seekSet(unsigned long)+0x6a>
    94c4:	6921      	ldr	r1, [r4, #16]
    94c6:	3e01      	subs	r6, #1
    94c8:	68a0      	ldr	r0, [r4, #8]
    94ca:	f001 f8c9 	bl	a660 <FatPartition::fatGet(unsigned long, unsigned long*)>
    94ce:	2800      	cmp	r0, #0
    94d0:	dd0b      	ble.n	94ea <FatFile::seekSet(unsigned long)+0x82>
    94d2:	4642      	mov	r2, r8
  while (nNew--) {
    94d4:	2e00      	cmp	r6, #0
    94d6:	d1f5      	bne.n	94c4 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    94d8:	78a2      	ldrb	r2, [r4, #2]
    94da:	e00c      	b.n	94f6 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    94dc:	069a      	lsls	r2, r3, #26
    94de:	d5d5      	bpl.n	948c <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    94e0:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    94e2:	895b      	ldrh	r3, [r3, #10]
    94e4:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    94e8:	d9f6      	bls.n	94d8 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    94ea:	2000      	movs	r0, #0
  m_curCluster = tmp;
    94ec:	6127      	str	r7, [r4, #16]
}
    94ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94f2:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    94f4:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    94f6:	f022 0220 	bic.w	r2, r2, #32
  return true;
    94fa:	2001      	movs	r0, #1
  m_curPosition = pos;
    94fc:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    94fe:	70a2      	strb	r2, [r4, #2]
}
    9500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    9504:	2001      	movs	r0, #1
}
    9506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    950a:	6a23      	ldr	r3, [r4, #32]
    950c:	4433      	add	r3, r6
    950e:	6123      	str	r3, [r4, #16]
    goto done;
    9510:	e7f1      	b.n	94f6 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    9512:	1ab6      	subs	r6, r6, r2
    9514:	e7d3      	b.n	94be <FatFile::seekSet(unsigned long)+0x56>
    9516:	bf00      	nop

00009518 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    9518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    951c:	460e      	mov	r6, r1
    951e:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    9520:	2100      	movs	r1, #0
    9522:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    9524:	4604      	mov	r4, r0
    9526:	4698      	mov	r8, r3
    9528:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    952c:	f009 f8c4 	bl	126b8 <memset>
  m_vol = dirFile->m_vol;
    9530:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    9532:	6a33      	ldr	r3, [r6, #32]
    9534:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    9538:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    953a:	f005 050f 	and.w	r5, r5, #15
    953e:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    9542:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    9546:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    9548:	070b      	lsls	r3, r1, #28
    954a:	d411      	bmi.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    954c:	f001 0117 	and.w	r1, r1, #23
    9550:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    9552:	7ad3      	ldrb	r3, [r2, #11]
    9554:	f013 0f18 	tst.w	r3, #24
    9558:	d102      	bne.n	9560 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    955a:	f041 0108 	orr.w	r1, r1, #8
    955e:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    9560:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    9564:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    9566:	2b01      	cmp	r3, #1
    9568:	d038      	beq.n	95dc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    956a:	2b02      	cmp	r3, #2
    956c:	d006      	beq.n	957c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    956e:	b1f3      	cbz	r3, 95ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    9570:	2300      	movs	r3, #0
  return false;
    9572:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    9574:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    9576:	70a3      	strb	r3, [r4, #2]
}
    9578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    957c:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    957e:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    9580:	06cd      	lsls	r5, r1, #27
    9582:	d4f5      	bmi.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    9584:	07ce      	lsls	r6, r1, #31
    9586:	d4f3      	bmi.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9588:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    958c:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9590:	ea43 0301 	orr.w	r3, r3, r1
    9594:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    9596:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9598:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    959a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    959c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    959e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    95a2:	d012      	beq.n	95ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    95a4:	bb19      	cbnz	r1, 95ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    95a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95aa:	70a3      	strb	r3, [r4, #2]
    95ac:	e010      	b.n	95d0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    95ae:	f418 6f80 	tst.w	r8, #1024	; 0x400
    95b2:	d1dd      	bne.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    95b4:	f008 0308 	and.w	r3, r8, #8
    95b8:	f043 0301 	orr.w	r3, r3, #1
    95bc:	70a3      	strb	r3, [r4, #2]
    95be:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    95c0:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    95c2:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    95c4:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    95c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    95ca:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    95cc:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    95ce:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    95d0:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    95d4:	d104      	bne.n	95e0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    95d6:	2001      	movs	r0, #1
}
    95d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    95dc:	2302      	movs	r3, #2
    95de:	e7ce      	b.n	957e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    95e0:	69e1      	ldr	r1, [r4, #28]
    95e2:	4620      	mov	r0, r4
    95e4:	f7ff ff40 	bl	9468 <FatFile::seekSet(unsigned long)>
    95e8:	2800      	cmp	r0, #0
    95ea:	d1f4      	bne.n	95d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    95ec:	e7c0      	b.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    95ee:	f001 f849 	bl	a684 <FatPartition::freeChain(unsigned long)>
    95f2:	2800      	cmp	r0, #0
    95f4:	d0bc      	beq.n	9570 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    95f6:	78a3      	ldrb	r3, [r4, #2]
    95f8:	e7d5      	b.n	95a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    95fa:	bf00      	nop

000095fc <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    95fc:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    95fe:	2b00      	cmp	r3, #0
    9600:	d145      	bne.n	968e <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9606:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9608:	b084      	sub	sp, #16
    960a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    960c:	f013 0f70 	tst.w	r3, #112	; 0x70
    9610:	d030      	beq.n	9674 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    9612:	694b      	ldr	r3, [r1, #20]
    9614:	f013 051f 	ands.w	r5, r3, #31
    9618:	d12c      	bne.n	9674 <FatFile::openNext(FatFile*, int)+0x78>
    961a:	4606      	mov	r6, r0
    961c:	4690      	mov	r8, r2
    961e:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    9620:	2201      	movs	r2, #1
    9622:	f10d 010f 	add.w	r1, sp, #15
    9626:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9628:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    962c:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    962e:	f7ff fcd3 	bl	8fd8 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    9632:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9634:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    9638:	2801      	cmp	r0, #1
    963a:	d11b      	bne.n	9674 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    963c:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    963e:	68a1      	ldr	r1, [r4, #8]
    9640:	331f      	adds	r3, #31
    9642:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    9646:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    9648:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    964c:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    9650:	b182      	cbz	r2, 9674 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    9652:	2a2e      	cmp	r2, #46	; 0x2e
    9654:	d012      	beq.n	967c <FatFile::openNext(FatFile*, int)+0x80>
    9656:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    965a:	fab0 f080 	clz	r0, r0
    965e:	0940      	lsrs	r0, r0, #5
    9660:	b960      	cbnz	r0, 967c <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    9662:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    9666:	f011 0e08 	ands.w	lr, r1, #8
    966a:	d012      	beq.n	9692 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    966c:	290f      	cmp	r1, #15
    966e:	d007      	beq.n	9680 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    9670:	4605      	mov	r5, r0
    9672:	e7d5      	b.n	9620 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    9674:	2000      	movs	r0, #0
}
    9676:	b004      	add	sp, #16
    9678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    967c:	2500      	movs	r5, #0
    967e:	e7cf      	b.n	9620 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    9680:	0651      	lsls	r1, r2, #25
    9682:	d5cd      	bpl.n	9620 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    9684:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    9688:	f89c 900d 	ldrb.w	r9, [ip, #13]
    968c:	e7c8      	b.n	9620 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    968e:	2000      	movs	r0, #0
}
    9690:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    9692:	b185      	cbz	r5, 96b6 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    9694:	f10c 010a 	add.w	r1, ip, #10
    9698:	e001      	b.n	969e <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    969a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    969e:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    96a2:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    96a4:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    96a8:	fa52 f383 	uxtab	r3, r2, r3
    96ac:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    96b0:	d1f3      	bne.n	969a <FatFile::openNext(FatFile*, int)+0x9e>
    96b2:	45ce      	cmp	lr, r9
    96b4:	d1de      	bne.n	9674 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    96b6:	4643      	mov	r3, r8
    96b8:	b2ba      	uxth	r2, r7
    96ba:	4621      	mov	r1, r4
    96bc:	4630      	mov	r0, r6
    96be:	9500      	str	r5, [sp, #0]
    96c0:	f7ff ff2a 	bl	9518 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    96c4:	e7d7      	b.n	9676 <FatFile::openNext(FatFile*, int)+0x7a>
    96c6:	bf00      	nop

000096c8 <FatFile::sync()>:
  if (!isOpen()) {
    96c8:	7803      	ldrb	r3, [r0, #0]
    96ca:	b10b      	cbz	r3, 96d0 <FatFile::sync()+0x8>
    96cc:	f7ff b968 	b.w	89a0 <FatFile::sync() [clone .part.0]>
}
    96d0:	2001      	movs	r0, #1
    96d2:	4770      	bx	lr

000096d4 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    96d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    96d8:	7883      	ldrb	r3, [r0, #2]
    96da:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    96dc:	079c      	lsls	r4, r3, #30
    96de:	d577      	bpl.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    96e0:	4688      	mov	r8, r1
    96e2:	0719      	lsls	r1, r3, #28
    96e4:	4691      	mov	r9, r2
    96e6:	f100 80b5 	bmi.w	9854 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    96ea:	696b      	ldr	r3, [r5, #20]
    96ec:	eb13 0209 	adds.w	r2, r3, r9
    96f0:	d26e      	bcs.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    96f2:	f1b9 0f00 	cmp.w	r9, #0
    96f6:	d040      	beq.n	977a <FatFile::write(void const*, unsigned int)+0xa6>
    96f8:	464f      	mov	r7, r9
    m_status = 0;
    96fa:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    96fe:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    9700:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    9704:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    9706:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    9708:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    970c:	d13f      	bne.n	978e <FatFile::write(void const*, unsigned int)+0xba>
    970e:	2e00      	cmp	r6, #0
    9710:	d13d      	bne.n	978e <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    9712:	2900      	cmp	r1, #0
    9714:	d06e      	beq.n	97f4 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    9716:	78aa      	ldrb	r2, [r5, #2]
    9718:	0652      	lsls	r2, r2, #25
    971a:	d576      	bpl.n	980a <FatFile::write(void const*, unsigned int)+0x136>
    971c:	69ea      	ldr	r2, [r5, #28]
    971e:	429a      	cmp	r2, r3
    9720:	d973      	bls.n	980a <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    9722:	3101      	adds	r1, #1
    9724:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9726:	3902      	subs	r1, #2
    9728:	7982      	ldrb	r2, [r0, #6]
    972a:	6943      	ldr	r3, [r0, #20]
    972c:	4091      	lsls	r1, r2
    972e:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    9730:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    9734:	d353      	bcc.n	97de <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    9736:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    973a:	d370      	bcc.n	981e <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    973c:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    973e:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    9740:	1b1b      	subs	r3, r3, r4
    9742:	4293      	cmp	r3, r2
    9744:	bf28      	it	cs
    9746:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    9748:	6b42      	ldr	r2, [r0, #52]	; 0x34
    974a:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    974c:	ea4f 2443 	mov.w	r4, r3, lsl #9
    9750:	d307      	bcc.n	9762 <FatFile::write(void const*, unsigned int)+0x8e>
    9752:	185e      	adds	r6, r3, r1
    9754:	42b2      	cmp	r2, r6
    9756:	d204      	bcs.n	9762 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    9758:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    975c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    9760:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    9762:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9764:	4642      	mov	r2, r8
    9766:	6806      	ldr	r6, [r0, #0]
    9768:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    976a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    976c:	b380      	cbz	r0, 97d0 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    976e:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    9770:	1b3f      	subs	r7, r7, r4
    src += n;
    9772:	44a0      	add	r8, r4
    m_curPosition += n;
    9774:	4423      	add	r3, r4
    9776:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    9778:	d1c1      	bne.n	96fe <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    977a:	69ea      	ldr	r2, [r5, #28]
    977c:	429a      	cmp	r2, r3
    977e:	d276      	bcs.n	986e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9780:	78aa      	ldrb	r2, [r5, #2]
    9782:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    9784:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9786:	f062 037f 	orn	r3, r2, #127	; 0x7f
    978a:	70ab      	strb	r3, [r5, #2]
    978c:	e025      	b.n	97da <FatFile::write(void const*, unsigned int)+0x106>
    978e:	7982      	ldrb	r2, [r0, #6]
    9790:	3902      	subs	r1, #2
    9792:	6943      	ldr	r3, [r0, #20]
    9794:	4091      	lsls	r1, r2
    9796:	4419      	add	r1, r3
                      + sectorOfCluster;
    9798:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    979a:	2e00      	cmp	r6, #0
    979c:	d0c8      	beq.n	9730 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    979e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    97a2:	2201      	movs	r2, #1
    97a4:	42bc      	cmp	r4, r7
    97a6:	bf28      	it	cs
    97a8:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    97aa:	3028      	adds	r0, #40	; 0x28
    97ac:	f003 fb9e 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    97b0:	b170      	cbz	r0, 97d0 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    97b2:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    97b4:	4426      	add	r6, r4
      memcpy(dst, src, n);
    97b6:	4622      	mov	r2, r4
    97b8:	4641      	mov	r1, r8
    97ba:	f004 feef 	bl	e59c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    97be:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    97c2:	68a8      	ldr	r0, [r5, #8]
    97c4:	d1d3      	bne.n	976e <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    97c6:	3028      	adds	r0, #40	; 0x28
    97c8:	f003 fb64 	bl	ce94 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    97cc:	2800      	cmp	r0, #0
    97ce:	d1ce      	bne.n	976e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    97d0:	786b      	ldrb	r3, [r5, #1]
  return 0;
    97d2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    97d4:	f043 0301 	orr.w	r3, r3, #1
    97d8:	706b      	strb	r3, [r5, #1]
}
    97da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    97de:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    97e2:	696a      	ldr	r2, [r5, #20]
    97e4:	69eb      	ldr	r3, [r5, #28]
    97e6:	42bc      	cmp	r4, r7
    97e8:	bf28      	it	cs
    97ea:	463c      	movcs	r4, r7
    97ec:	429a      	cmp	r2, r3
    97ee:	d305      	bcc.n	97fc <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    97f0:	2205      	movs	r2, #5
    97f2:	e7da      	b.n	97aa <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    97f4:	6a29      	ldr	r1, [r5, #32]
    97f6:	b321      	cbz	r1, 9842 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    97f8:	6129      	str	r1, [r5, #16]
    97fa:	e794      	b.n	9726 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    97fc:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    97fe:	f013 0f20 	tst.w	r3, #32
    9802:	bf14      	ite	ne
    9804:	2205      	movne	r2, #5
    9806:	2201      	moveq	r2, #1
    9808:	e7cf      	b.n	97aa <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    980a:	f105 0210 	add.w	r2, r5, #16
    980e:	f000 ff27 	bl	a660 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9812:	2800      	cmp	r0, #0
    9814:	dbdc      	blt.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    9816:	d024      	beq.n	9862 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    9818:	68a8      	ldr	r0, [r5, #8]
    981a:	6929      	ldr	r1, [r5, #16]
    981c:	e783      	b.n	9726 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    981e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9820:	428b      	cmp	r3, r1
    9822:	d104      	bne.n	982e <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    9824:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    9828:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    982c:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    982e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9830:	4642      	mov	r2, r8
    9832:	6803      	ldr	r3, [r0, #0]
    9834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9836:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    9838:	2800      	cmp	r0, #0
    983a:	d0c9      	beq.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    983c:	f44f 7400 	mov.w	r4, #512	; 0x200
    9840:	e795      	b.n	976e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    9842:	4628      	mov	r0, r5
    9844:	f7ff f906 	bl	8a54 <FatFile::addCluster()>
    9848:	2800      	cmp	r0, #0
    984a:	d0c1      	beq.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    984c:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    984e:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    9850:	6229      	str	r1, [r5, #32]
    9852:	e768      	b.n	9726 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    9854:	69c1      	ldr	r1, [r0, #28]
    9856:	f7ff fe07 	bl	9468 <FatFile::seekSet(unsigned long)>
    985a:	2800      	cmp	r0, #0
    985c:	f47f af45 	bne.w	96ea <FatFile::write(void const*, unsigned int)+0x16>
    9860:	e7b6      	b.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    9862:	4628      	mov	r0, r5
    9864:	f7ff f8f6 	bl	8a54 <FatFile::addCluster()>
    9868:	2800      	cmp	r0, #0
    986a:	d1d5      	bne.n	9818 <FatFile::write(void const*, unsigned int)+0x144>
    986c:	e7b0      	b.n	97d0 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    986e:	4b05      	ldr	r3, [pc, #20]	; (9884 <FatFile::write(void const*, unsigned int)+0x1b0>)
    9870:	681b      	ldr	r3, [r3, #0]
    9872:	b12b      	cbz	r3, 9880 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    9874:	78ab      	ldrb	r3, [r5, #2]
    9876:	4648      	mov	r0, r9
    9878:	f063 037f 	orn	r3, r3, #127	; 0x7f
    987c:	70ab      	strb	r3, [r5, #2]
    987e:	e7ac      	b.n	97da <FatFile::write(void const*, unsigned int)+0x106>
    9880:	4648      	mov	r0, r9
    9882:	e7aa      	b.n	97da <FatFile::write(void const*, unsigned int)+0x106>
    9884:	20024cdc 	.word	0x20024cdc

00009888 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    988c:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    988e:	b08d      	sub	sp, #52	; 0x34
    9890:	4614      	mov	r4, r2
    next = begin;
    9892:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9894:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9896:	4606      	mov	r6, r0
    9898:	4689      	mov	r9, r1
  FatFile dir = *this;
    989a:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    989c:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    989e:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    98a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    98a6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    98a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    98ac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    98ae:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    98b2:	6065      	str	r5, [r4, #4]
    98b4:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    98b6:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    98b8:	f8a4 e00c 	strh.w	lr, [r4, #12]
    98bc:	2b00      	cmp	r3, #0
    98be:	d03f      	beq.n	9940 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    98c0:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    98c4:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    98c8:	a803      	add	r0, sp, #12
    98ca:	b289      	uxth	r1, r1
    98cc:	0149      	lsls	r1, r1, #5
    98ce:	f7ff fdcb 	bl	9468 <FatFile::seekSet(unsigned long)>
    98d2:	b350      	cbz	r0, 992a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    98d4:	2100      	movs	r1, #0
    98d6:	a803      	add	r0, sp, #12
    98d8:	f7ff fc66 	bl	91a8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    98dc:	4607      	mov	r7, r0
    98de:	b320      	cbz	r0, 992a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    98e0:	2500      	movs	r5, #0
    98e2:	e00d      	b.n	9900 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    98e4:	f003 fb2a 	bl	cf3c <FsName::get16()>
    98e8:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    98ea:	4658      	mov	r0, fp
    98ec:	f003 fbea 	bl	d0c4 <toUpcase(unsigned short)>
    98f0:	4683      	mov	fp, r0
    98f2:	4640      	mov	r0, r8
    98f4:	f003 fbe6 	bl	d0c4 <toUpcase(unsigned short)>
    98f8:	4583      	cmp	fp, r0
    98fa:	d116      	bne.n	992a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    98fc:	2d0d      	cmp	r5, #13
    98fe:	d018      	beq.n	9932 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    9900:	b2ea      	uxtb	r2, r5
    9902:	4639      	mov	r1, r7
    9904:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    9906:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    9908:	f000 fc18 	bl	a13c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    990c:	89a3      	ldrh	r3, [r4, #12]
    990e:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    9910:	4620      	mov	r0, r4
    9912:	2b00      	cmp	r3, #0
    9914:	d1e6      	bne.n	98e4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    9916:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    991a:	4293      	cmp	r3, r2
    991c:	d1e2      	bne.n	98e4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    991e:	fabb f08b 	clz	r0, fp
    9922:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    9924:	b00d      	add	sp, #52	; 0x34
    9926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    992a:	2000      	movs	r0, #0
}
    992c:	b00d      	add	sp, #52	; 0x34
    992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9932:	f10a 0a01 	add.w	sl, sl, #1
    9936:	9b01      	ldr	r3, [sp, #4]
    9938:	fa5f fa8a 	uxtb.w	sl, sl
    993c:	4553      	cmp	r3, sl
    993e:	d2c1      	bcs.n	98c4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    9940:	2001      	movs	r0, #1
    9942:	e7ef      	b.n	9924 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00009944 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    9948:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    994a:	b08d      	sub	sp, #52	; 0x34
    994c:	4616      	mov	r6, r2
    994e:	469a      	mov	sl, r3
  FatFile dir = *this;
    9950:	f10d 0c0c 	add.w	ip, sp, #12
    9954:	f102 0415 	add.w	r4, r2, #21
    9958:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    995c:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    995e:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    9962:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    9964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9968:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    996a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    996e:	683b      	ldr	r3, [r7, #0]
    9970:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9974:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    9978:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    997c:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    9980:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9982:	fa52 f383 	uxtab	r3, r2, r3
    9986:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    998a:	d1f3      	bne.n	9974 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    998c:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    998e:	f04f 0800 	mov.w	r8, #0
    next = begin;
    9992:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    9994:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9998:	f1ba 0f00 	cmp.w	sl, #0
    999c:	d04e      	beq.n	9a3c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    999e:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    99a0:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    99a2:	a803      	add	r0, sp, #12
    99a4:	1bd9      	subs	r1, r3, r7
    99a6:	b289      	uxth	r1, r1
    99a8:	0149      	lsls	r1, r1, #5
    99aa:	f7ff fd5d 	bl	9468 <FatFile::seekSet(unsigned long)>
    99ae:	2800      	cmp	r0, #0
    99b0:	d055      	beq.n	9a5e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    99b2:	2100      	movs	r1, #0
    99b4:	a803      	add	r0, sp, #12
    99b6:	f7ff fbf7 	bl	91a8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    99ba:	2800      	cmp	r0, #0
    99bc:	d04f      	beq.n	9a5e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    99be:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    99c0:	4557      	cmp	r7, sl
    99c2:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    99c6:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    99ca:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    99ce:	f04f 0500 	mov.w	r5, #0
    99d2:	f043 0301 	orr.w	r3, r3, #1
    99d6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    99da:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    99de:	bf0c      	ite	eq
    99e0:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    99e4:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    99e6:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    99e8:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    99ec:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    99ee:	7303      	strb	r3, [r0, #12]
    99f0:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    99f4:	f880 900d 	strb.w	r9, [r0, #13]
    99f8:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    99fa:	e006      	b.n	9a0a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    99fc:	f8ab 0000 	strh.w	r0, [fp]
    9a00:	3401      	adds	r4, #1
    9a02:	3501      	adds	r5, #1
    9a04:	f10b 0b02 	add.w	fp, fp, #2
    9a08:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    9a0a:	89b0      	ldrh	r0, [r6, #12]
    9a0c:	b918      	cbnz	r0, 9a16 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    9a0e:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    9a12:	429a      	cmp	r2, r3
    9a14:	d016      	beq.n	9a44 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    9a16:	4630      	mov	r0, r6
    9a18:	f003 fa90 	bl	cf3c <FsName::get16()>
  if (i < 5) {
    9a1c:	2d04      	cmp	r5, #4
    9a1e:	b2eb      	uxtb	r3, r5
    9a20:	d9ec      	bls.n	99fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    9a22:	2b0a      	cmp	r3, #10
    9a24:	d802      	bhi.n	9a2c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    9a26:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    9a2a:	e7e9      	b.n	9a00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    9a2c:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    9a2e:	f8ab 0005 	strh.w	r0, [fp, #5]
    9a32:	d1e5      	bne.n	9a00 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9a34:	3701      	adds	r7, #1
    9a36:	b2ff      	uxtb	r7, r7
    9a38:	45ba      	cmp	sl, r7
    9a3a:	d2b1      	bcs.n	99a0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    9a3c:	2001      	movs	r0, #1

 fail:
  return false;
}
    9a3e:	b00d      	add	sp, #52	; 0x34
    9a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    9a44:	f1b8 0f00 	cmp.w	r8, #0
    9a48:	d006      	beq.n	9a58 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    9a4a:	f108 0801 	add.w	r8, r8, #1
    9a4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    9a52:	fa5f f888 	uxtb.w	r8, r8
    9a56:	e7e1      	b.n	9a1c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    9a58:	f04f 0801 	mov.w	r8, #1
    9a5c:	e7de      	b.n	9a1c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    9a5e:	2000      	movs	r0, #0
}
    9a60:	b00d      	add	sp, #52	; 0x34
    9a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a66:	bf00      	nop

00009a68 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    9a68:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    9a6a:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    9a6e:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    9a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    9a76:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    9a7a:	4686      	mov	lr, r0
  const char* end = fname->end;
    9a7c:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    9a7e:	6051      	str	r1, [r2, #4]
    9a80:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    9a84:	781a      	ldrb	r2, [r3, #0]
    9a86:	2a2e      	cmp	r2, #46	; 0x2e
    9a88:	bf14      	ite	ne
    9a8a:	2001      	movne	r0, #1
    9a8c:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    9a8e:	d103      	bne.n	9a98 <FatFile::makeSFN(FatLfn_t*)+0x30>
    9a90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9a94:	2a2e      	cmp	r2, #46	; 0x2e
    9a96:	d0fb      	beq.n	9a90 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    9a98:	1e61      	subs	r1, r4, #1
    9a9a:	4299      	cmp	r1, r3
    9a9c:	d90b      	bls.n	9ab6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9a9e:	460a      	mov	r2, r1
    9aa0:	e002      	b.n	9aa8 <FatFile::makeSFN(FatLfn_t*)+0x40>
    9aa2:	4293      	cmp	r3, r2
    9aa4:	4611      	mov	r1, r2
    9aa6:	d006      	beq.n	9ab6 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9aa8:	4611      	mov	r1, r2
    9aaa:	3a01      	subs	r2, #1
    9aac:	f891 c000 	ldrb.w	ip, [r1]
    9ab0:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    9ab4:	d1f5      	bne.n	9aa2 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    9ab6:	429c      	cmp	r4, r3
    9ab8:	f04f 0500 	mov.w	r5, #0
    9abc:	f240 8086 	bls.w	9bcc <FatFile::makeSFN(FatLfn_t*)+0x164>
    9ac0:	2607      	movs	r6, #7
    9ac2:	2708      	movs	r7, #8
    9ac4:	46a9      	mov	r9, r5
    9ac6:	46a8      	mov	r8, r5
    9ac8:	e006      	b.n	9ad8 <FatFile::makeSFN(FatLfn_t*)+0x70>
    9aca:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    9acc:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    9ace:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9ad2:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    9ad4:	429c      	cmp	r4, r3
    9ad6:	d95b      	bls.n	9b90 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    9ad8:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    9ada:	2a2e      	cmp	r2, #46	; 0x2e
    9adc:	bf08      	it	eq
    9ade:	4299      	cmpeq	r1, r3
    9ae0:	d0f3      	beq.n	9aca <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    9ae2:	2a22      	cmp	r2, #34	; 0x22
    9ae4:	d00d      	beq.n	9b02 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    9ae6:	2a7c      	cmp	r2, #124	; 0x7c
    9ae8:	d00b      	beq.n	9b02 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    9aea:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    9aee:	f1bc 0f02 	cmp.w	ip, #2
    9af2:	d906      	bls.n	9b02 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    9af4:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    9af8:	f1bc 0f05 	cmp.w	ip, #5
    9afc:	d821      	bhi.n	9b42 <FatFile::makeSFN(FatLfn_t*)+0xda>
    9afe:	2a2d      	cmp	r2, #45	; 0x2d
    9b00:	d01f      	beq.n	9b42 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    9b02:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    9b06:	2a80      	cmp	r2, #128	; 0x80
    9b08:	d05d      	beq.n	9bc6 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    9b0a:	454e      	cmp	r6, r9
    9b0c:	d22f      	bcs.n	9b6e <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    9b0e:	4299      	cmp	r1, r3
    9b10:	bf2c      	ite	cs
    9b12:	2000      	movcs	r0, #0
    9b14:	2001      	movcc	r0, #1
    9b16:	2e0a      	cmp	r6, #10
    9b18:	bf08      	it	eq
    9b1a:	f040 0001 	orreq.w	r0, r0, #1
    9b1e:	2800      	cmp	r0, #0
    9b20:	d047      	beq.n	9bb2 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    9b22:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9b26:	2b20      	cmp	r3, #32
    9b28:	d040      	beq.n	9bac <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    9b2a:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    9b2e:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    9b30:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    9b32:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    9b34:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    9b36:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    9b3a:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    9b3c:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    9b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9b42:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    9b46:	f1bc 0f05 	cmp.w	ip, #5
    9b4a:	d9da      	bls.n	9b02 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    9b4c:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    9b50:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    9b54:	d8d5      	bhi.n	9b02 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    9b56:	454e      	cmp	r6, r9
    9b58:	d3d9      	bcc.n	9b0e <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    9b5a:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    9b5e:	f1bc 0f19 	cmp.w	ip, #25
    9b62:	d828      	bhi.n	9bb6 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    9b64:	3a20      	subs	r2, #32
        lc |= bit;
    9b66:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    9b68:	b2d2      	uxtb	r2, r2
        lc |= bit;
    9b6a:	b2ed      	uxtb	r5, r5
    9b6c:	e001      	b.n	9b72 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    9b6e:	2000      	movs	r0, #0
        c = '_';
    9b70:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    9b72:	f109 0c01 	add.w	ip, r9, #1
    9b76:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    9b78:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    9b7a:	f889 2016 	strb.w	r2, [r9, #22]
    9b7e:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    9b82:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    9b84:	4691      	mov	r9, r2
    9b86:	bf98      	it	ls
    9b88:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    9b8c:	429c      	cmp	r4, r3
    9b8e:	d8a3      	bhi.n	9ad8 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    9b90:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9b94:	2b20      	cmp	r3, #32
    9b96:	d009      	beq.n	9bac <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    9b98:	2800      	cmp	r0, #0
    9b9a:	d0c6      	beq.n	9b2a <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    9b9c:	ea18 0f05 	tst.w	r8, r5
    9ba0:	bf18      	it	ne
    9ba2:	2502      	movne	r5, #2
    9ba4:	f88e 5015 	strb.w	r5, [lr, #21]
}
    9ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    9bac:	2000      	movs	r0, #0
}
    9bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9bb2:	460b      	mov	r3, r1
    9bb4:	e78e      	b.n	9ad4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    9bb6:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    9bba:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    9bbe:	bf98      	it	ls
    9bc0:	ea47 0808 	orrls.w	r8, r7, r8
    9bc4:	e7d5      	b.n	9b72 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    9bc6:	3301      	adds	r3, #1
        is83 = false;
    9bc8:	2000      	movs	r0, #0
    9bca:	e783      	b.n	9ad4 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    9bcc:	46a8      	mov	r8, r5
    9bce:	e7df      	b.n	9b90 <FatFile::makeSFN(FatLfn_t*)+0x128>

00009bd0 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    9bd4:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    9bd8:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9bda:	460f      	mov	r7, r1
    9bdc:	4604      	mov	r4, r0
    9bde:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 9c80 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    9be2:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    9be6:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9bea:	f101 0616 	add.w	r6, r1, #22
    9bee:	f1b8 0f03 	cmp.w	r8, #3
    9bf2:	f8db 3000 	ldr.w	r3, [fp]
    9bf6:	bf28      	it	cs
    9bf8:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    9bfc:	442b      	add	r3, r5
    9bfe:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c00:	f108 0304 	add.w	r3, r8, #4
    9c04:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    9c06:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c0a:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    9c0c:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9c0e:	2a09      	cmp	r2, #9
    9c10:	f102 0137 	add.w	r1, r2, #55	; 0x37
    9c14:	bf98      	it	ls
    9c16:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    9c1a:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c1c:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9c1e:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9c20:	4598      	cmp	r8, r3
    9c22:	d1f0      	bne.n	9c06 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    9c24:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    9c28:	2100      	movs	r1, #0
    9c2a:	4620      	mov	r0, r4
    9c2c:	f883 a016 	strb.w	sl, [r3, #22]
    9c30:	f7ff fc1a 	bl	9468 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    9c34:	2101      	movs	r1, #1
    9c36:	4620      	mov	r0, r4
    9c38:	f7ff fab6 	bl	91a8 <FatFile::readDirCache(bool)>
    9c3c:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9c3e:	220b      	movs	r2, #11
    9c40:	4630      	mov	r0, r6
      if (!dir) {
    9c42:	b19b      	cbz	r3, 9c6c <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    9c44:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9c48:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    9c4a:	f1bc 0f00 	cmp.w	ip, #0
    9c4e:	d013      	beq.n	9c78 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    9c50:	7adb      	ldrb	r3, [r3, #11]
    9c52:	071b      	lsls	r3, r3, #28
    9c54:	d4ee      	bmi.n	9c34 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    9c56:	f008 fc83 	bl	12560 <memcmp>
    9c5a:	2800      	cmp	r0, #0
    9c5c:	d1ea      	bne.n	9c34 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    9c5e:	f109 39ff 	add.w	r9, r9, #4294967295
    9c62:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    9c66:	d1c2      	bne.n	9bee <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9c68:	4648      	mov	r0, r9
 fail:
    9c6a:	e003      	b.n	9c74 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    9c6c:	7860      	ldrb	r0, [r4, #1]
    9c6e:	fab0 f080 	clz	r0, r0
    9c72:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    9c74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    9c78:	2001      	movs	r0, #1
}
    9c7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c7e:	bf00      	nop
    9c80:	20025b88 	.word	0x20025b88

00009c84 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    9c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c88:	ed2d 8b02 	vpush	{d8}
    9c8c:	b08b      	sub	sp, #44	; 0x2c
    9c8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    9c92:	688b      	ldr	r3, [r1, #8]
    9c94:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    9c96:	780b      	ldrb	r3, [r1, #0]
    9c98:	f013 0f70 	tst.w	r3, #112	; 0x70
    9c9c:	d053      	beq.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    9c9e:	9b02      	ldr	r3, [sp, #8]
    9ca0:	781b      	ldrb	r3, [r3, #0]
    9ca2:	2b00      	cmp	r3, #0
    9ca4:	d14f      	bne.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    9ca6:	6913      	ldr	r3, [r2, #16]
    9ca8:	4690      	mov	r8, r2
    9caa:	4a9a      	ldr	r2, [pc, #616]	; (9f14 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    9cac:	460e      	mov	r6, r1
    9cae:	330c      	adds	r3, #12
    9cb0:	fba2 2303 	umull	r2, r3, r2, r3
    9cb4:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9cb8:	f898 3015 	ldrb.w	r3, [r8, #21]
    9cbc:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    9cbe:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9cc0:	f000 80a7 	beq.w	9e12 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    9cc4:	1c57      	adds	r7, r2, #1
    9cc6:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    9cc8:	2300      	movs	r3, #0
    seekSet(0);
    9cca:	4630      	mov	r0, r6
    9ccc:	4619      	mov	r1, r3
    9cce:	461c      	mov	r4, r3
    9cd0:	9306      	str	r3, [sp, #24]
    9cd2:	f7ff fbc9 	bl	9468 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9cd6:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    9cda:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    9cdc:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    9cde:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9ce0:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    9ce4:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9ce6:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    9ce8:	2100      	movs	r1, #0
    9cea:	4630      	mov	r0, r6
    9cec:	f7ff fa5c 	bl	91a8 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9cf0:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    9cf4:	4603      	mov	r3, r0
    9cf6:	b320      	cbz	r0, 9d42 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    9cf8:	7802      	ldrb	r2, [r0, #0]
    9cfa:	2ae5      	cmp	r2, #229	; 0xe5
    9cfc:	d029      	beq.n	9d52 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    9cfe:	b342      	cbz	r2, 9d52 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    9d00:	42bc      	cmp	r4, r7
    9d02:	bf38      	it	cc
    9d04:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9d06:	2a2e      	cmp	r2, #46	; 0x2e
    9d08:	d02b      	beq.n	9d62 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    9d0a:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    9d0e:	f1bc 0f0f 	cmp.w	ip, #15
    9d12:	d054      	beq.n	9dbe <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    9d14:	f01c 0c08 	ands.w	ip, ip, #8
    9d18:	d123      	bne.n	9d62 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    9d1a:	f1b9 0f00 	cmp.w	r9, #0
    9d1e:	f040 80d5 	bne.w	9ecc <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9d22:	220b      	movs	r2, #11
    9d24:	ee18 1a10 	vmov	r1, s16
    9d28:	f008 fc1a 	bl	12560 <memcmp>
    9d2c:	2800      	cmp	r0, #0
    9d2e:	d1da      	bne.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    9d30:	f898 3015 	ldrb.w	r3, [r8, #21]
    9d34:	f013 0301 	ands.w	r3, r3, #1
    9d38:	f000 80e4 	beq.w	9f04 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    9d3c:	2301      	movs	r3, #1
    9d3e:	9305      	str	r3, [sp, #20]
    9d40:	e7d1      	b.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    9d42:	7873      	ldrb	r3, [r6, #1]
    9d44:	b183      	cbz	r3, 9d68 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    9d46:	2000      	movs	r0, #0
}
    9d48:	b00b      	add	sp, #44	; 0x2c
    9d4a:	ecbd 8b02 	vpop	{d8}
    9d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9d52:	2c00      	cmp	r4, #0
    9d54:	bf08      	it	eq
    9d56:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    9d58:	42bc      	cmp	r4, r7
    9d5a:	d201      	bcs.n	9d60 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    9d5c:	3401      	adds	r4, #1
    9d5e:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    9d60:	b112      	cbz	r2, 9d68 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    9d62:	f04f 0900 	mov.w	r9, #0
    9d66:	e7be      	b.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    9d68:	9b03      	ldr	r3, [sp, #12]
    9d6a:	059a      	lsls	r2, r3, #22
    9d6c:	d5eb      	bpl.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    9d6e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    9d72:	3b01      	subs	r3, #1
    9d74:	2b01      	cmp	r3, #1
    9d76:	d8e6      	bhi.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    9d78:	2c00      	cmp	r4, #0
    9d7a:	bf08      	it	eq
    9d7c:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    9d7e:	42bc      	cmp	r4, r7
    9d80:	d303      	bcc.n	9d8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    9d82:	e048      	b.n	9e16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    9d84:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    9d86:	42a7      	cmp	r7, r4
    9d88:	d045      	beq.n	9e16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    9d8a:	2100      	movs	r1, #0
    9d8c:	4630      	mov	r0, r6
    9d8e:	f7ff fa0b 	bl	91a8 <FatFile::readDirCache(bool)>
    freeFound++;
    9d92:	1c63      	adds	r3, r4, #1
    if (!dir) {
    9d94:	2800      	cmp	r0, #0
    9d96:	d1f5      	bne.n	9d84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    9d98:	7873      	ldrb	r3, [r6, #1]
    9d9a:	2b00      	cmp	r3, #0
    9d9c:	d1d3      	bne.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    9d9e:	42a7      	cmp	r7, r4
    9da0:	d939      	bls.n	9e16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    9da2:	9d07      	ldr	r5, [sp, #28]
    9da4:	e005      	b.n	9db2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    9da6:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    9da8:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    9dac:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    9dae:	42a7      	cmp	r7, r4
    9db0:	d931      	bls.n	9e16 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    9db2:	4630      	mov	r0, r6
    9db4:	f7fe fe68 	bl	8a88 <FatFile::addDirCluster()>
    9db8:	2800      	cmp	r0, #0
    9dba:	d1f4      	bne.n	9da6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    9dbc:	e7c3      	b.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    9dbe:	f1b9 0f00 	cmp.w	r9, #0
    9dc2:	d119      	bne.n	9df8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    9dc4:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    9dc8:	9904      	ldr	r1, [sp, #16]
    9dca:	4559      	cmp	r1, fp
    9dcc:	d18b      	bne.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    9dce:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    9dd2:	d088      	beq.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    9dd4:	7b43      	ldrb	r3, [r0, #13]
    9dd6:	4689      	mov	r9, r1
    9dd8:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    9dda:	f1bb 0f01 	cmp.w	fp, #1
    9dde:	d182      	bne.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    9de0:	1c69      	adds	r1, r5, #1
    9de2:	464b      	mov	r3, r9
    9de4:	4642      	mov	r2, r8
    9de6:	4630      	mov	r0, r6
    9de8:	b289      	uxth	r1, r1
    9dea:	f7ff fd4d 	bl	9888 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    9dee:	2800      	cmp	r0, #0
    9df0:	bf08      	it	eq
    9df2:	f04f 0900 	moveq.w	r9, #0
    9df6:	e776      	b.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    9df8:	f10b 3bff 	add.w	fp, fp, #4294967295
    9dfc:	fa5f fb8b 	uxtb.w	fp, fp
    9e00:	455a      	cmp	r2, fp
    9e02:	d1ae      	bne.n	9d62 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    9e04:	7b43      	ldrb	r3, [r0, #13]
    9e06:	9a06      	ldr	r2, [sp, #24]
    9e08:	4293      	cmp	r3, r2
    9e0a:	d0e6      	beq.n	9dda <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    9e0c:	f04f 0900 	mov.w	r9, #0
    9e10:	e769      	b.n	9ce6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9e12:	2701      	movs	r7, #1
    9e14:	e758      	b.n	9cc8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    9e16:	9b05      	ldr	r3, [sp, #20]
    9e18:	b12b      	cbz	r3, 9e26 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    9e1a:	4641      	mov	r1, r8
    9e1c:	4630      	mov	r0, r6
    9e1e:	f7ff fed7 	bl	9bd0 <FatFile::makeUniqueSfn(FatLfn_t*)>
    9e22:	2800      	cmp	r0, #0
    9e24:	d08f      	beq.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    9e26:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9e28:	4642      	mov	r2, r8
    9e2a:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    9e2c:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    9e2e:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    9e32:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    9e34:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9e36:	4629      	mov	r1, r5
    9e38:	f7ff fd84 	bl	9944 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    9e3c:	2800      	cmp	r0, #0
    9e3e:	d082      	beq.n	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9e40:	0169      	lsls	r1, r5, #5
    9e42:	4630      	mov	r0, r6
    9e44:	f7ff fb10 	bl	9468 <FatFile::seekSet(unsigned long)>
    9e48:	2800      	cmp	r0, #0
    9e4a:	f43f af7c 	beq.w	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9e4e:	2100      	movs	r1, #0
    9e50:	4630      	mov	r0, r6
    9e52:	f7ff f9a9 	bl	91a8 <FatFile::readDirCache(bool)>
  if (!dir) {
    9e56:	4604      	mov	r4, r0
    9e58:	2800      	cmp	r0, #0
    9e5a:	f43f af74 	beq.w	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    9e5e:	2220      	movs	r2, #32
    9e60:	2100      	movs	r1, #0
    9e62:	f008 fc29 	bl	126b8 <memset>
  memcpy(dir->name, fname->sfn, 11);
    9e66:	f8d8 2016 	ldr.w	r2, [r8, #22]
    9e6a:	f8d8 301a 	ldr.w	r3, [r8, #26]
    9e6e:	6022      	str	r2, [r4, #0]
    9e70:	6063      	str	r3, [r4, #4]
    9e72:	f898 3020 	ldrb.w	r3, [r8, #32]
    9e76:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    9e7a:	72a3      	strb	r3, [r4, #10]
    9e7c:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9e7e:	f898 3015 	ldrb.w	r3, [r8, #21]
    9e82:	f003 0318 	and.w	r3, r3, #24
    9e86:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    9e88:	4b23      	ldr	r3, [pc, #140]	; (9f18 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    9e8a:	681b      	ldr	r3, [r3, #0]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	d03b      	beq.n	9f08 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    9e90:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    9e94:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    9e98:	a809      	add	r0, sp, #36	; 0x24
    9e9a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    9e9c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9ea0:	8223      	strh	r3, [r4, #16]
    9ea2:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    9ea6:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    9ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9eac:	7363      	strb	r3, [r4, #13]
    9eae:	9a07      	ldr	r2, [sp, #28]
    9eb0:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9eb4:	f043 0301 	orr.w	r3, r3, #1
    9eb8:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9ebc:	9b03      	ldr	r3, [sp, #12]
    9ebe:	462a      	mov	r2, r5
    9ec0:	4631      	mov	r1, r6
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	9700      	str	r7, [sp, #0]
    9ec6:	f7ff fb27 	bl	9518 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9eca:	e73d      	b.n	9d48 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    9ecc:	f1bb 0f01 	cmp.w	fp, #1
    9ed0:	f47f af39 	bne.w	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    9ed4:	300a      	adds	r0, #10
    9ed6:	e001      	b.n	9edc <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9ed8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9edc:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9ee0:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9ee2:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    9ee6:	fa52 f281 	uxtab	r2, r2, r1
    9eea:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    9eee:	d1f3      	bne.n	9ed8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    9ef0:	9b06      	ldr	r3, [sp, #24]
    9ef2:	4563      	cmp	r3, ip
    9ef4:	f47f af27 	bne.w	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9ef8:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    9efa:	9b03      	ldr	r3, [sp, #12]
    9efc:	0519      	lsls	r1, r3, #20
    9efe:	f53f af22 	bmi.w	9d46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9f02:	e7db      	b.n	9ebc <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    9f04:	461f      	mov	r7, r3
    9f06:	e7f8      	b.n	9efa <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    9f08:	f645 0321 	movw	r3, #22561	; 0x5821
    9f0c:	8223      	strh	r3, [r4, #16]
    9f0e:	8323      	strh	r3, [r4, #24]
    9f10:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    9f12:	e7cc      	b.n	9eae <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    9f14:	4ec4ec4f 	.word	0x4ec4ec4f
    9f18:	20024cdc 	.word	0x20024cdc

00009f1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    9f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f20:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    9f22:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    9f24:	b082      	sub	sp, #8
    9f26:	460c      	mov	r4, r1
  while (*path == ' ') {
    9f28:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    9f2a:	4615      	mov	r5, r2
  while (*path == ' ') {
    9f2c:	d103      	bne.n	9f36 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    9f2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9f32:	2b20      	cmp	r3, #32
    9f34:	d0fb      	beq.n	9f2e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    9f36:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    9f38:	7823      	ldrb	r3, [r4, #0]
    9f3a:	b363      	cbz	r3, 9f96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9f3c:	2b2f      	cmp	r3, #47	; 0x2f
    9f3e:	d02a      	beq.n	9f96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    9f40:	f04f 0800 	mov.w	r8, #0
    9f44:	4e29      	ldr	r6, [pc, #164]	; (9fec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    9f46:	1d21      	adds	r1, r4, #4
    9f48:	4620      	mov	r0, r4
    9f4a:	aa01      	add	r2, sp, #4
    9f4c:	f003 f86e 	bl	d02c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    9f50:	4604      	mov	r4, r0
    9f52:	b170      	cbz	r0, 9f72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    9f54:	9b01      	ldr	r3, [sp, #4]
    9f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9f5a:	d240      	bcs.n	9fde <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9f5c:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    9f5e:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9f62:	d831      	bhi.n	9fc8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    9f64:	2b3c      	cmp	r3, #60	; 0x3c
    9f66:	b2d9      	uxtb	r1, r3
    9f68:	d829      	bhi.n	9fbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    9f6a:	2921      	cmp	r1, #33	; 0x21
    9f6c:	d805      	bhi.n	9f7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    9f6e:	291f      	cmp	r1, #31
    9f70:	d809      	bhi.n	9f86 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    9f72:	2000      	movs	r0, #0
    9f74:	b002      	add	sp, #8
    9f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f7a:	3922      	subs	r1, #34	; 0x22
    9f7c:	b2c9      	uxtb	r1, r1
    9f7e:	fa26 f101 	lsr.w	r1, r6, r1
    9f82:	07ca      	lsls	r2, r1, #31
    9f84:	d4f5      	bmi.n	9f72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    9f86:	2b2e      	cmp	r3, #46	; 0x2e
    9f88:	d001      	beq.n	9f8e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9f8a:	2b20      	cmp	r3, #32
    9f8c:	d11c      	bne.n	9fc8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    9f8e:	7823      	ldrb	r3, [r4, #0]
    9f90:	b10b      	cbz	r3, 9f96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9f92:	2b2f      	cmp	r3, #47	; 0x2f
    9f94:	d1d7      	bne.n	9f46 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    9f96:	692b      	ldr	r3, [r5, #16]
    9f98:	3b01      	subs	r3, #1
    9f9a:	2bfe      	cmp	r3, #254	; 0xfe
    9f9c:	d8e9      	bhi.n	9f72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    9f9e:	7823      	ldrb	r3, [r4, #0]
    9fa0:	2b20      	cmp	r3, #32
    9fa2:	d103      	bne.n	9fac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    9fa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9fa8:	2b20      	cmp	r3, #32
    9faa:	d0fb      	beq.n	9fa4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    9fac:	2b2f      	cmp	r3, #47	; 0x2f
    9fae:	d0f9      	beq.n	9fa4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    9fb0:	4628      	mov	r0, r5
  *ptr = path;
    9fb2:	603c      	str	r4, [r7, #0]
}
    9fb4:	b002      	add	sp, #8
    9fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    9fba:	f7ff bd55 	b.w	9a68 <FatFile::makeSFN(FatLfn_t*)>
    9fbe:	295c      	cmp	r1, #92	; 0x5c
    9fc0:	d0d7      	beq.n	9f72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    9fc2:	d905      	bls.n	9fd0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    9fc4:	297c      	cmp	r1, #124	; 0x7c
    9fc6:	d0d4      	beq.n	9f72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    9fc8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9fcc:	60ac      	str	r4, [r5, #8]
    9fce:	e7de      	b.n	9f8e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9fd0:	393e      	subs	r1, #62	; 0x3e
    9fd2:	2901      	cmp	r1, #1
    9fd4:	d8f8      	bhi.n	9fc8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    9fd6:	2000      	movs	r0, #0
    9fd8:	b002      	add	sp, #8
    9fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    9fde:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    9fe2:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    9fe4:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9fe8:	e7d1      	b.n	9f8e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9fea:	bf00      	nop
    9fec:	05002101 	.word	0x05002101

00009ff0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    9ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    9ff2:	2300      	movs	r3, #0
    9ff4:	b08b      	sub	sp, #44	; 0x2c
    9ff6:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    9ff8:	7883      	ldrb	r3, [r0, #2]
    9ffa:	079a      	lsls	r2, r3, #30
    9ffc:	d524      	bpl.n	a048 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    9ffe:	6a01      	ldr	r1, [r0, #32]
    a000:	4605      	mov	r5, r0
    a002:	b119      	cbz	r1, a00c <FatFile::remove()+0x1c>
    a004:	6880      	ldr	r0, [r0, #8]
    a006:	f000 fb3d 	bl	a684 <FatPartition::freeChain(unsigned long)>
    a00a:	b1e8      	cbz	r0, a048 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    a00c:	2101      	movs	r1, #1
    a00e:	4628      	mov	r0, r5
    a010:	f7fe fd76 	bl	8b00 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a014:	b1c0      	cbz	r0, a048 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    a016:	1e42      	subs	r2, r0, #1
    a018:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    a01c:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    a01e:	01e3      	lsls	r3, r4, #7
    a020:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    a024:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    a028:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    a02a:	fa51 f383 	uxtab	r3, r1, r3
    a02e:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    a030:	d1f5      	bne.n	a01e <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    a032:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    a034:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    a036:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    a038:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    a03a:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a03c:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    a040:	70ab      	strb	r3, [r5, #2]
    a042:	f002 ff27 	bl	ce94 <FsCache::sync()>
    a046:	b910      	cbnz	r0, a04e <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    a048:	2000      	movs	r0, #0
}
    a04a:	b00b      	add	sp, #44	; 0x2c
    a04c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a04e:	f507 700e 	add.w	r0, r7, #568	; 0x238
    a052:	f002 ff1f 	bl	ce94 <FsCache::sync()>
    a056:	2800      	cmp	r0, #0
    a058:	d0f6      	beq.n	a048 <FatFile::remove()+0x58>
    a05a:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    a05c:	6803      	ldr	r3, [r0, #0]
    a05e:	6a1b      	ldr	r3, [r3, #32]
    a060:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    a062:	2800      	cmp	r0, #0
    a064:	d0f0      	beq.n	a048 <FatFile::remove()+0x58>
  if (!isLFN()) {
    a066:	78eb      	ldrb	r3, [r5, #3]
    a068:	2b00      	cmp	r3, #0
    a06a:	d0ee      	beq.n	a04a <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    a06c:	4629      	mov	r1, r5
    a06e:	a801      	add	r0, sp, #4
    a070:	f7fe ff66 	bl	8f40 <FatFile::openCluster(FatFile*)>
    a074:	2800      	cmp	r0, #0
    a076:	d0e7      	beq.n	a048 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a078:	78eb      	ldrb	r3, [r5, #3]
    a07a:	2b00      	cmp	r3, #0
    a07c:	d0e4      	beq.n	a048 <FatFile::remove()+0x58>
    a07e:	2701      	movs	r7, #1
    a080:	e021      	b.n	a0c6 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    a082:	a801      	add	r0, sp, #4
    a084:	f7ff f890 	bl	91a8 <FatFile::readDirCache(bool)>
    a088:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a08a:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    a08c:	2800      	cmp	r0, #0
    a08e:	d0db      	beq.n	a048 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a090:	7ac2      	ldrb	r2, [r0, #11]
    a092:	2a0f      	cmp	r2, #15
    a094:	d1d8      	bne.n	a048 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    a096:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a098:	fa5f fc83 	uxtb.w	ip, r3
    a09c:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a09e:	f002 031f 	and.w	r3, r2, #31
    a0a2:	428b      	cmp	r3, r1
    a0a4:	d1d0      	bne.n	a048 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    a0a6:	7b43      	ldrb	r3, [r0, #13]
    a0a8:	42a3      	cmp	r3, r4
    a0aa:	d1cd      	bne.n	a048 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    a0ac:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    a0ae:	68a9      	ldr	r1, [r5, #8]
    a0b0:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    a0b4:	f043 0301 	orr.w	r3, r3, #1
    a0b8:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    a0bc:	0653      	lsls	r3, r2, #25
    a0be:	d40d      	bmi.n	a0dc <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a0c0:	78eb      	ldrb	r3, [r5, #3]
    a0c2:	4563      	cmp	r3, ip
    a0c4:	d3c0      	bcc.n	a048 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    a0c6:	88a9      	ldrh	r1, [r5, #4]
    a0c8:	a801      	add	r0, sp, #4
    a0ca:	1bc9      	subs	r1, r1, r7
    a0cc:	b289      	uxth	r1, r1
    a0ce:	0149      	lsls	r1, r1, #5
    a0d0:	f7ff f9ca 	bl	9468 <FatFile::seekSet(unsigned long)>
    a0d4:	2100      	movs	r1, #0
    a0d6:	2800      	cmp	r0, #0
    a0d8:	d1d3      	bne.n	a082 <FatFile::remove()+0x92>
    a0da:	e7b5      	b.n	a048 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    a0dc:	68ac      	ldr	r4, [r5, #8]
    a0de:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a0e2:	f002 fed7 	bl	ce94 <FsCache::sync()>
    a0e6:	2800      	cmp	r0, #0
    a0e8:	d0ae      	beq.n	a048 <FatFile::remove()+0x58>
    a0ea:	f504 700e 	add.w	r0, r4, #568	; 0x238
    a0ee:	f002 fed1 	bl	ce94 <FsCache::sync()>
    a0f2:	2800      	cmp	r0, #0
    a0f4:	d0a8      	beq.n	a048 <FatFile::remove()+0x58>
    a0f6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    a0f8:	6803      	ldr	r3, [r0, #0]
    a0fa:	6a1b      	ldr	r3, [r3, #32]
    a0fc:	4798      	blx	r3
    a0fe:	e7a4      	b.n	a04a <FatFile::remove()+0x5a>

0000a100 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a104:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    a108:	b1a2      	cbz	r2, a134 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    a10a:	4605      	mov	r5, r0
    a10c:	460c      	mov	r4, r1
    a10e:	4698      	mov	r8, r3
    a110:	1857      	adds	r7, r2, r1
    a112:	e001      	b.n	a118 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    a114:	42bc      	cmp	r4, r7
    a116:	d00d      	beq.n	a134 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a118:	682b      	ldr	r3, [r5, #0]
    a11a:	4620      	mov	r0, r4
    a11c:	4649      	mov	r1, r9
    a11e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    a120:	47c0      	blx	r8
    a122:	4621      	mov	r1, r4
    a124:	4602      	mov	r2, r0
    a126:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    a128:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    a12a:	47b0      	blx	r6
    a12c:	2800      	cmp	r0, #0
    a12e:	d1f1      	bne.n	a114 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    a130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    a134:	2001      	movs	r0, #1
  }
    a136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a13a:	bf00      	nop

0000a13c <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    a13c:	2a04      	cmp	r2, #4
    a13e:	d804      	bhi.n	a14a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    a140:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    a144:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    a148:	4770      	bx	lr
  } else if (i < 11) {
    a14a:	2a0a      	cmp	r2, #10
    a14c:	d803      	bhi.n	a156 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    a14e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    a152:	8890      	ldrh	r0, [r2, #4]
    a154:	4770      	bx	lr
  } else if (i < 13) {
    a156:	2a0c      	cmp	r2, #12
    a158:	d803      	bhi.n	a162 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    a15a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a15e:	88c8      	ldrh	r0, [r1, #6]
    a160:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    a162:	2000      	movs	r0, #0
}
    a164:	4770      	bx	lr
    a166:	bf00      	nop

0000a168 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    a16a:	7804      	ldrb	r4, [r0, #0]
    a16c:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    a16e:	b17c      	cbz	r4, a190 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    a170:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    a174:	4617      	mov	r7, r2
    a176:	d007      	beq.n	a188 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    a178:	2a01      	cmp	r2, #1
    a17a:	d909      	bls.n	a190 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    a17c:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    a17e:	2300      	movs	r3, #0
    return 1;
    a180:	2001      	movs	r0, #1
    name[0] = '/';
    a182:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    a184:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    a186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    a188:	4621      	mov	r1, r4
    a18a:	f7fe fcb9 	bl	8b00 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    a18e:	b918      	cbnz	r0, a198 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    a190:	2300      	movs	r3, #0
  return 0;
    a192:	4618      	mov	r0, r3
  name[0] = '\0';
    a194:	7033      	strb	r3, [r6, #0]
}
    a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    a198:	4603      	mov	r3, r0
    a19a:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    a19c:	2108      	movs	r1, #8
    a19e:	e011      	b.n	a1c4 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    a1a0:	7b02      	ldrb	r2, [r0, #12]
    a1a2:	4211      	tst	r1, r2
    a1a4:	d003      	beq.n	a1ae <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    a1a6:	f10e 0e20 	add.w	lr, lr, #32
    a1aa:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    a1ae:	1c65      	adds	r5, r4, #1
    a1b0:	42bd      	cmp	r5, r7
    a1b2:	d2ed      	bcs.n	a190 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    a1b4:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    a1b8:	f806 e004 	strb.w	lr, [r6, r4]
    a1bc:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    a1be:	f1bc 0f0c 	cmp.w	ip, #12
    a1c2:	d010      	beq.n	a1e6 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    a1c4:	f1bc 0f08 	cmp.w	ip, #8
    a1c8:	d011      	beq.n	a1ee <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    a1ca:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    a1ce:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    a1d2:	2a19      	cmp	r2, #25
    a1d4:	d9e4      	bls.n	a1a0 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    a1d6:	f1be 0f20 	cmp.w	lr, #32
    a1da:	d1e8      	bne.n	a1ae <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    a1dc:	f10c 0c01 	add.w	ip, ip, #1
    a1e0:	f1bc 0f0c 	cmp.w	ip, #12
    a1e4:	d1ee      	bne.n	a1c4 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    a1e6:	2300      	movs	r3, #0
    a1e8:	4620      	mov	r0, r4
    a1ea:	5533      	strb	r3, [r6, r4]
}
    a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    a1ee:	781a      	ldrb	r2, [r3, #0]
    a1f0:	2a20      	cmp	r2, #32
    a1f2:	d0f8      	beq.n	a1e6 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    a1f4:	2110      	movs	r1, #16
      c = '.';
    a1f6:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    a1fa:	e7d8      	b.n	a1ae <FatFile::getSFN(char*, unsigned int)+0x46>

0000a1fc <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    a1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    a200:	2400      	movs	r4, #0
    a202:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    a204:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    a206:	4689      	mov	r9, r1
    a208:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    a20a:	2b00      	cmp	r3, #0
    a20c:	d055      	beq.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    a20e:	78c3      	ldrb	r3, [r0, #3]
    a210:	4606      	mov	r6, r0
    a212:	2b00      	cmp	r3, #0
    a214:	d058      	beq.n	a2c8 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    a216:	4601      	mov	r1, r0
    a218:	a801      	add	r0, sp, #4
    a21a:	4690      	mov	r8, r2
    a21c:	f7fe fe90 	bl	8f40 <FatFile::openCluster(FatFile*)>
    a220:	2800      	cmp	r0, #0
    a222:	d04a      	beq.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a224:	78f0      	ldrb	r0, [r6, #3]
    a226:	2800      	cmp	r0, #0
    a228:	d043      	beq.n	a2b2 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a22a:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    a22e:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a230:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a234:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    a236:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    a238:	a801      	add	r0, sp, #4
    a23a:	eba1 010a 	sub.w	r1, r1, sl
    a23e:	b289      	uxth	r1, r1
    a240:	0149      	lsls	r1, r1, #5
    a242:	f7ff f911 	bl	9468 <FatFile::seekSet(unsigned long)>
    a246:	b3c0      	cbz	r0, a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    a248:	2100      	movs	r1, #0
    a24a:	a801      	add	r0, sp, #4
    a24c:	f7fe ffac 	bl	91a8 <FatFile::readDirCache(bool)>
    if (!ldir) {
    a250:	b398      	cbz	r0, a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    a252:	7ac3      	ldrb	r3, [r0, #11]
    a254:	2b0f      	cmp	r3, #15
    a256:	d130      	bne.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    a258:	7803      	ldrb	r3, [r0, #0]
    a25a:	fa5f f18a 	uxtb.w	r1, sl
    a25e:	f003 031f 	and.w	r3, r3, #31
    a262:	428b      	cmp	r3, r1
    a264:	d129      	bne.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    a266:	1c47      	adds	r7, r0, #1
    a268:	2500      	movs	r5, #0
  if (i < 5) {
    a26a:	2d04      	cmp	r5, #4
    a26c:	b2eb      	uxtb	r3, r5
    a26e:	d83f      	bhi.n	a2f0 <FatFile::getName8(char*, unsigned int)+0xf4>
    a270:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    a272:	bb74      	cbnz	r4, a2d2 <FatFile::getName8(char*, unsigned int)+0xd6>
    a274:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    a278:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    a27a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    a27e:	d33e      	bcc.n	a2fe <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    a280:	b1a3      	cbz	r3, a2ac <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    a282:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    a284:	4659      	mov	r1, fp
    a286:	4642      	mov	r2, r8
    a288:	f002 fe7e 	bl	cf88 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    a28c:	4683      	mov	fp, r0
    a28e:	b1a0      	cbz	r0, a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    a290:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    a292:	3501      	adds	r5, #1
    a294:	3702      	adds	r7, #2
    a296:	2d0d      	cmp	r5, #13
    a298:	d1e7      	bne.n	a26a <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a29a:	f10a 0a01 	add.w	sl, sl, #1
    a29e:	78f1      	ldrb	r1, [r6, #3]
    a2a0:	fa5f f38a 	uxtb.w	r3, sl
    a2a4:	fa1f fa8a 	uxth.w	sl, sl
    a2a8:	4299      	cmp	r1, r3
    a2aa:	d2c4      	bcs.n	a236 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    a2ac:	ebab 0009 	sub.w	r0, fp, r9
    a2b0:	46d9      	mov	r9, fp
  *str = '\0';
    a2b2:	2300      	movs	r3, #0
    a2b4:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    a2b8:	e003      	b.n	a2c2 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    a2ba:	2300      	movs	r3, #0
  return 0;
    a2bc:	4618      	mov	r0, r3
  *name = 0;
    a2be:	f889 3000 	strb.w	r3, [r9]
}
    a2c2:	b00b      	add	sp, #44	; 0x2c
    a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    a2c8:	f7ff ff4e 	bl	a168 <FatFile::getSFN(char*, unsigned int)>
}
    a2cc:	b00b      	add	sp, #44	; 0x2c
    a2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    a2d2:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    a2d6:	b289      	uxth	r1, r1
    a2d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a2dc:	d2ed      	bcs.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    a2de:	4a0a      	ldr	r2, [pc, #40]	; (a308 <FatFile::getName8(char*, unsigned int)+0x10c>)
    a2e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a2e4:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    a2e8:	4318      	orrs	r0, r3
    a2ea:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    a2ee:	e7c9      	b.n	a284 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    a2f0:	2b0a      	cmp	r3, #10
    a2f2:	bf94      	ite	ls
    a2f4:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    a2f8:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    a2fc:	e7b9      	b.n	a272 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    a2fe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a302:	d2da      	bcs.n	a2ba <FatFile::getName8(char*, unsigned int)+0xbe>
    a304:	461c      	mov	r4, r3
    a306:	e7c4      	b.n	a292 <FatFile::getName8(char*, unsigned int)+0x96>
    a308:	000ffc00 	.word	0x000ffc00

0000a30c <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    a30c:	f7ff bf76 	b.w	a1fc <FatFile::getName8(char*, unsigned int)>

0000a310 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a314:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    a318:	b1c3      	cbz	r3, a34c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a31a:	4681      	mov	r9, r0
    a31c:	460c      	mov	r4, r1
    a31e:	4615      	mov	r5, r2
    a320:	185e      	adds	r6, r3, r1
    a322:	e002      	b.n	a32a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    a324:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a326:	42b4      	cmp	r4, r6
    a328:	d010      	beq.n	a34c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    a32a:	f8d9 3000 	ldr.w	r3, [r9]
    a32e:	4621      	mov	r1, r4
    a330:	462a      	mov	r2, r5
    a332:	4648      	mov	r0, r9
    a334:	691b      	ldr	r3, [r3, #16]
    a336:	4798      	blx	r3
    a338:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    a33a:	463a      	mov	r2, r7
    a33c:	4620      	mov	r0, r4
    a33e:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    a340:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    a342:	2b00      	cmp	r3, #0
    a344:	d1ee      	bne.n	a324 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    a346:	4618      	mov	r0, r3
    a348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    a34c:	2301      	movs	r3, #1
  }
    a34e:	4618      	mov	r0, r3
    a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a354 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    a354:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    a356:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    a358:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    a35c:	46a4      	mov	ip, r4
    a35e:	bf28      	it	cs
    a360:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    a364:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    a368:	4281      	cmp	r1, r0
    a36a:	d207      	bcs.n	a37c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    a36c:	f831 3b02 	ldrh.w	r3, [r1], #2
    a370:	b913      	cbnz	r3, a378 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    a372:	6853      	ldr	r3, [r2, #4]
    a374:	3301      	adds	r3, #1
    a376:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a378:	4288      	cmp	r0, r1
    a37a:	d8f7      	bhi.n	a36c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    a37c:	eba4 040c 	sub.w	r4, r4, ip
    a380:	6014      	str	r4, [r2, #0]
}
    a382:	f85d 4b04 	ldr.w	r4, [sp], #4
    a386:	4770      	bx	lr

0000a388 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    a388:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    a38a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    a38c:	2c80      	cmp	r4, #128	; 0x80
    a38e:	46a4      	mov	ip, r4
    a390:	bf28      	it	cs
    a392:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    a396:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    a39a:	4281      	cmp	r1, r0
    a39c:	d207      	bcs.n	a3ae <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    a39e:	f851 3b04 	ldr.w	r3, [r1], #4
    a3a2:	b913      	cbnz	r3, a3aa <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    a3a4:	6853      	ldr	r3, [r2, #4]
    a3a6:	3301      	adds	r3, #1
    a3a8:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a3aa:	4288      	cmp	r0, r1
    a3ac:	d8f7      	bhi.n	a39e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    a3ae:	eba4 040c 	sub.w	r4, r4, ip
    a3b2:	6014      	str	r4, [r2, #0]
}
    a3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3b8:	4770      	bx	lr
    a3ba:	bf00      	nop

0000a3bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a3c0:	79c3      	ldrb	r3, [r0, #7]
    a3c2:	4604      	mov	r4, r0
    a3c4:	460d      	mov	r5, r1
    a3c6:	4617      	mov	r7, r2
  if (fatType() == 32) {
    a3c8:	2b20      	cmp	r3, #32
    a3ca:	d059      	beq.n	a480 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    a3cc:	2b10      	cmp	r3, #16
    a3ce:	d030      	beq.n	a432 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    a3d0:	2b0c      	cmp	r3, #12
    a3d2:	d151      	bne.n	a478 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a3d4:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    a3d6:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a3da:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a3dc:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a3e0:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a3e4:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a3e8:	4648      	mov	r0, r9
    a3ea:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a3ec:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a3f0:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a3f4:	0952      	lsrs	r2, r2, #5
    a3f6:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    a3fa:	0052      	lsls	r2, r2, #1
    a3fc:	4641      	mov	r1, r8
    a3fe:	f002 fd75 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a402:	2800      	cmp	r0, #0
    a404:	d038      	beq.n	a478 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    a406:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    a40a:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    a40c:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    a40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a412:	d023      	beq.n	a45c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    a414:	4418      	add	r0, r3
    a416:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a418:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    a41a:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    a41c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a420:	bf4c      	ite	mi
    a422:	091b      	lsrmi	r3, r3, #4
    a424:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    a428:	429a      	cmp	r2, r3
    a42a:	d240      	bcs.n	a4ae <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    a42c:	2000      	movs	r0, #0
}
    a42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a432:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a434:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a438:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a43a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a43e:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a442:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a444:	fab2 f282 	clz	r2, r2
    a448:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a44a:	0052      	lsls	r2, r2, #1
    a44c:	f002 fd4e 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a450:	b190      	cbz	r0, a478 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a452:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    a454:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    a458:	5b43      	ldrh	r3, [r0, r5]
    a45a:	e025      	b.n	a4a8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a45c:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    a45e:	f108 0101 	add.w	r1, r8, #1
    a462:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a464:	f1a2 0202 	sub.w	r2, r2, #2
    a468:	fab2 f282 	clz	r2, r2
    a46c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a46e:	0052      	lsls	r2, r2, #1
    a470:	f002 fd3c 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a474:	2800      	cmp	r0, #0
    a476:	d1ce      	bne.n	a416 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    a478:	f04f 30ff 	mov.w	r0, #4294967295
}
    a47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a480:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a482:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a484:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a488:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a48c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a490:	fab2 f282 	clz	r2, r2
    a494:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a496:	0052      	lsls	r2, r2, #1
    a498:	f002 fd28 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a49c:	2800      	cmp	r0, #0
    a49e:	d0eb      	beq.n	a478 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a4a0:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    a4a2:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    a4a6:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    a4a8:	69e2      	ldr	r2, [r4, #28]
    a4aa:	429a      	cmp	r2, r3
    a4ac:	d3be      	bcc.n	a42c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    a4ae:	2001      	movs	r0, #1
  *value = next;
    a4b0:	603b      	str	r3, [r7, #0]
}
    a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4b6:	bf00      	nop

0000a4b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a4bc:	79c3      	ldrb	r3, [r0, #7]
    a4be:	4605      	mov	r5, r0
    a4c0:	460c      	mov	r4, r1
    a4c2:	4616      	mov	r6, r2
  if (fatType() == 32) {
    a4c4:	2b20      	cmp	r3, #32
    a4c6:	d048      	beq.n	a55a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    a4c8:	2b10      	cmp	r3, #16
    a4ca:	d02d      	beq.n	a528 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    a4cc:	2b0c      	cmp	r3, #12
    a4ce:	d141      	bne.n	a554 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    a4d0:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a4d4:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a4d6:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a4da:	fa11 f184 	uxtah	r1, r1, r4
    a4de:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a4e2:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a4e6:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4e8:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    a4ea:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a4ec:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a4ee:	4639      	mov	r1, r7
    a4f0:	bf14      	ite	ne
    a4f2:	2201      	movne	r2, #1
    a4f4:	2203      	moveq	r2, #3
    a4f6:	f002 fcf9 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a4fa:	b358      	cbz	r0, a554 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    a4fc:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    a500:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    a504:	d03f      	beq.n	a586 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    a506:	5cc2      	ldrb	r2, [r0, r3]
    a508:	f002 020f 	and.w	r2, r2, #15
    a50c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    a510:	54c2      	strb	r2, [r0, r3]
    index++;
    a512:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a518:	d03a      	beq.n	a590 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    a51a:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a51e:	4403      	add	r3, r0
    return true;
    a520:	2001      	movs	r0, #1
    pc[index] = tmp;
    a522:	701a      	strb	r2, [r3, #0]
}
    a524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a528:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a52a:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a52e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a530:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a534:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    a536:	4419      	add	r1, r3
    a538:	bf14      	ite	ne
    a53a:	2201      	movne	r2, #1
    a53c:	2203      	moveq	r2, #3
    a53e:	f002 fcd5 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a542:	4603      	mov	r3, r0
    a544:	b130      	cbz	r0, a554 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a546:	0064      	lsls	r4, r4, #1
    return true;
    a548:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    a54a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    a54e:	531e      	strh	r6, [r3, r4]
}
    a550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    a554:	2000      	movs	r0, #0
}
    a556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a55a:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a55c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a55e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a562:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a564:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    a568:	bf14      	ite	ne
    a56a:	2201      	movne	r2, #1
    a56c:	2203      	moveq	r2, #3
    a56e:	f002 fcbd 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a572:	4603      	mov	r3, r0
    a574:	2800      	cmp	r0, #0
    a576:	d0ed      	beq.n	a554 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a578:	00a4      	lsls	r4, r4, #2
    return true;
    a57a:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    a57c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    a580:	511e      	str	r6, [r3, r4]
}
    a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    a586:	54c6      	strb	r6, [r0, r3]
    index++;
    a588:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a58a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a58e:	d115      	bne.n	a5bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a590:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    a592:	1c79      	adds	r1, r7, #1
    a594:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a596:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a598:	bf14      	ite	ne
    a59a:	2201      	movne	r2, #1
    a59c:	2203      	moveq	r2, #3
    a59e:	f002 fca5 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a5a2:	4603      	mov	r3, r0
    a5a4:	2800      	cmp	r0, #0
    a5a6:	d0d5      	beq.n	a554 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    a5a8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    a5ac:	2c00      	cmp	r4, #0
    a5ae:	d1b7      	bne.n	a520 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    a5b0:	7819      	ldrb	r1, [r3, #0]
    a5b2:	f021 010f 	bic.w	r1, r1, #15
    a5b6:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    a5ba:	e7b1      	b.n	a520 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    a5bc:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a5c0:	4403      	add	r3, r0
    a5c2:	e7f5      	b.n	a5b0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000a5c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    a5c8:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a5ca:	b082      	sub	sp, #8
    a5cc:	4605      	mov	r5, r0
    a5ce:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    a5d0:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a5d2:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    a5d4:	d340      	bcc.n	a658 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    a5d6:	2701      	movs	r7, #1
    find++;
    a5d8:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    a5da:	69eb      	ldr	r3, [r5, #28]
    a5dc:	aa01      	add	r2, sp, #4
    a5de:	4628      	mov	r0, r5
    a5e0:	42a3      	cmp	r3, r4
    a5e2:	d205      	bcs.n	a5f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    a5e4:	bb9f      	cbnz	r7, a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    a5e6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    a5e8:	2701      	movs	r7, #1
    find++;
    a5ea:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    a5ec:	42a3      	cmp	r3, r4
    a5ee:	d32e      	bcc.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    a5f0:	42a6      	cmp	r6, r4
    a5f2:	bf18      	it	ne
    a5f4:	2c01      	cmpne	r4, #1
    a5f6:	4621      	mov	r1, r4
    a5f8:	d929      	bls.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a5fa:	f7ff fedf 	bl	a3bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    a5fe:	2800      	cmp	r0, #0
    a600:	db25      	blt.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    a602:	d0e9      	beq.n	a5d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a604:	9b01      	ldr	r3, [sp, #4]
    a606:	2b00      	cmp	r3, #0
    a608:	d1e6      	bne.n	a5d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    a60a:	b107      	cbz	r7, a60e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    a60c:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    a60e:	69eb      	ldr	r3, [r5, #28]
    a610:	42a3      	cmp	r3, r4
    a612:	d31c      	bcc.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a614:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    a618:	4621      	mov	r1, r4
    a61a:	4628      	mov	r0, r5
    a61c:	f7ff ff4c 	bl	a4b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    a620:	4607      	mov	r7, r0
    a622:	b1a0      	cbz	r0, a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    a624:	b93e      	cbnz	r6, a636 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    a626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a628:	2b00      	cmp	r3, #0
    a62a:	db01      	blt.n	a630 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    a62c:	3b01      	subs	r3, #1
    a62e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    a630:	f8c8 4000 	str.w	r4, [r8]
  return true;
    a634:	e00c      	b.n	a650 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    a636:	2e01      	cmp	r6, #1
    a638:	d009      	beq.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a63a:	69eb      	ldr	r3, [r5, #28]
    a63c:	429e      	cmp	r6, r3
    a63e:	d806      	bhi.n	a64e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a640:	4631      	mov	r1, r6
    a642:	4622      	mov	r2, r4
    a644:	4628      	mov	r0, r5
    a646:	f7ff ff37 	bl	a4b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    a64a:	2800      	cmp	r0, #0
    a64c:	d1eb      	bne.n	a626 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    a64e:	2700      	movs	r7, #0
}
    a650:	4638      	mov	r0, r7
    a652:	b002      	add	sp, #8
    a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a658:	460c      	mov	r4, r1
    setStart = false;
    a65a:	2700      	movs	r7, #0
    a65c:	e7bc      	b.n	a5d8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a65e:	bf00      	nop

0000a660 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    a660:	2901      	cmp	r1, #1
    a662:	d90c      	bls.n	a67e <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a664:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    a666:	69c4      	ldr	r4, [r0, #28]
    a668:	428c      	cmp	r4, r1
    a66a:	d303      	bcc.n	a674 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    a66c:	f85d 4b04 	ldr.w	r4, [sp], #4
    a670:	f7ff bea4 	b.w	a3bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    a674:	f04f 30ff 	mov.w	r0, #4294967295
    a678:	f85d 4b04 	ldr.w	r4, [sp], #4
    a67c:	4770      	bx	lr
    a67e:	f04f 30ff 	mov.w	r0, #4294967295
    a682:	4770      	bx	lr

0000a684 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    a684:	b570      	push	{r4, r5, r6, lr}
    a686:	4605      	mov	r5, r0
    a688:	b082      	sub	sp, #8
    a68a:	460c      	mov	r4, r1
    a68c:	e01d      	b.n	a6ca <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    a68e:	69eb      	ldr	r3, [r5, #28]
    a690:	429c      	cmp	r4, r3
    a692:	d81f      	bhi.n	a6d4 <FatPartition::freeChain(unsigned long)+0x50>
    a694:	f7ff fe92 	bl	a3bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    a698:	4606      	mov	r6, r0
    if (fg < 0) {
    a69a:	4621      	mov	r1, r4
    a69c:	2200      	movs	r2, #0
    a69e:	2e00      	cmp	r6, #0
    a6a0:	4628      	mov	r0, r5
    a6a2:	db17      	blt.n	a6d4 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    a6a4:	69eb      	ldr	r3, [r5, #28]
    a6a6:	429c      	cmp	r4, r3
    a6a8:	d814      	bhi.n	a6d4 <FatPartition::freeChain(unsigned long)+0x50>
    a6aa:	f7ff ff05 	bl	a4b8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    a6ae:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    a6b0:	b180      	cbz	r0, a6d4 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    a6b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a6b4:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    a6b6:	f103 0301 	add.w	r3, r3, #1
    a6ba:	bfa8      	it	ge
    a6bc:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    a6be:	68eb      	ldr	r3, [r5, #12]
    a6c0:	42a3      	cmp	r3, r4
    cluster = next;
    a6c2:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    a6c4:	bf88      	it	hi
    a6c6:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    a6c8:	b12e      	cbz	r6, a6d6 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    a6ca:	2c01      	cmp	r4, #1
    a6cc:	4621      	mov	r1, r4
    a6ce:	aa01      	add	r2, sp, #4
    a6d0:	4628      	mov	r0, r5
    a6d2:	d8dc      	bhi.n	a68e <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    a6d4:	2000      	movs	r0, #0
}
    a6d6:	b002      	add	sp, #8
    a6d8:	bd70      	pop	{r4, r5, r6, pc}
    a6da:	bf00      	nop

0000a6dc <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a6e0:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    a6e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    a6e4:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    a6e6:	2800      	cmp	r0, #0
    a6e8:	da1b      	bge.n	a722 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    a6ea:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    a6ec:	2a0c      	cmp	r2, #12
    a6ee:	d11b      	bne.n	a728 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    a6f0:	69f7      	ldr	r7, [r6, #28]
    a6f2:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    a6f4:	2b02      	cmp	r3, #2
    a6f6:	f240 80cd 	bls.w	a894 <FatPartition::freeClusterCount()+0x1b8>
    a6fa:	2402      	movs	r4, #2
    uint32_t free = 0;
    a6fc:	2500      	movs	r5, #0
    a6fe:	4621      	mov	r1, r4
    a700:	aa02      	add	r2, sp, #8
    a702:	4630      	mov	r0, r6
    a704:	f7ff fe5a 	bl	a3bc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    a708:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    a70a:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    a70e:	db06      	blt.n	a71e <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    a710:	d157      	bne.n	a7c2 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    a712:	42a7      	cmp	r7, r4
    a714:	461c      	mov	r4, r3
    a716:	d05c      	beq.n	a7d2 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    a718:	69f2      	ldr	r2, [r6, #28]
    a71a:	4293      	cmp	r3, r2
    a71c:	d9ef      	bls.n	a6fe <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    a71e:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    a722:	b004      	add	sp, #16
    a724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    a728:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    a72a:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    a72c:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    a730:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    a732:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    a734:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    a736:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a73a:	f100 8085 	bmi.w	a848 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    a73e:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    a740:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    a744:	2a20      	cmp	r2, #32
    return m_buffer;
    a746:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    a74a:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a74e:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    a752:	d042      	beq.n	a7da <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a754:	f8d6 8000 	ldr.w	r8, [r6]
    a758:	4b4f      	ldr	r3, [pc, #316]	; (a898 <FatPartition::freeClusterCount()+0x1bc>)
    a75a:	f8d8 2000 	ldr.w	r2, [r8]
    a75e:	f8d6 a018 	ldr.w	sl, [r6, #24]
    a762:	6995      	ldr	r5, [r2, #24]
    a764:	429d      	cmp	r5, r3
    a766:	d178      	bne.n	a85a <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    a768:	2c00      	cmp	r4, #0
    a76a:	f000 8082 	beq.w	a872 <FatPartition::freeClusterCount()+0x196>
    a76e:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    a772:	6913      	ldr	r3, [r2, #16]
    a774:	4651      	mov	r1, sl
    a776:	463a      	mov	r2, r7
    a778:	4640      	mov	r0, r8
    a77a:	4798      	blx	r3
    a77c:	2800      	cmp	r0, #0
    a77e:	d0ce      	beq.n	a71e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a780:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    a782:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a786:	468e      	mov	lr, r1
    a788:	bf28      	it	cs
    a78a:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    a78e:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    a792:	45bc      	cmp	ip, r7
    a794:	d90b      	bls.n	a7ae <FatPartition::freeClusterCount()+0xd2>
    a796:	9d03      	ldr	r5, [sp, #12]
    a798:	463b      	mov	r3, r7
    a79a:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    a79c:	f833 4b02 	ldrh.w	r4, [r3], #2
    a7a0:	b90c      	cbnz	r4, a7a6 <FatPartition::freeClusterCount()+0xca>
    a7a2:	3501      	adds	r5, #1
    a7a4:	4602      	mov	r2, r0
  while (p < e) {
    a7a6:	459c      	cmp	ip, r3
    a7a8:	d8f8      	bhi.n	a79c <FatPartition::freeClusterCount()+0xc0>
    a7aa:	b102      	cbz	r2, a7ae <FatPartition::freeClusterCount()+0xd2>
    a7ac:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a7ae:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    a7b2:	eba1 010e 	sub.w	r1, r1, lr
    a7b6:	45d1      	cmp	r9, sl
    a7b8:	9102      	str	r1, [sp, #8]
    a7ba:	d05a      	beq.n	a872 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a7bc:	f8d8 2000 	ldr.w	r2, [r8]
    a7c0:	e7d7      	b.n	a772 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    a7c2:	9a02      	ldr	r2, [sp, #8]
    a7c4:	2a00      	cmp	r2, #0
    a7c6:	d1a4      	bne.n	a712 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    a7c8:	42a7      	cmp	r7, r4
        free++;
    a7ca:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    a7ce:	461c      	mov	r4, r3
    a7d0:	d1a2      	bne.n	a718 <FatPartition::freeClusterCount()+0x3c>
    return free;
    a7d2:	4628      	mov	r0, r5
}
    a7d4:	b004      	add	sp, #16
    a7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a7da:	f8d6 a000 	ldr.w	sl, [r6]
    a7de:	4b2e      	ldr	r3, [pc, #184]	; (a898 <FatPartition::freeClusterCount()+0x1bc>)
    a7e0:	f8da 2000 	ldr.w	r2, [sl]
    a7e4:	f8d6 9018 	ldr.w	r9, [r6, #24]
    a7e8:	6995      	ldr	r5, [r2, #24]
    a7ea:	429d      	cmp	r5, r3
    a7ec:	d146      	bne.n	a87c <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    a7ee:	2c00      	cmp	r4, #0
    a7f0:	d03f      	beq.n	a872 <FatPartition::freeClusterCount()+0x196>
    a7f2:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    a7f6:	6913      	ldr	r3, [r2, #16]
    a7f8:	4649      	mov	r1, r9
    a7fa:	463a      	mov	r2, r7
    a7fc:	4650      	mov	r0, sl
    a7fe:	4798      	blx	r3
    a800:	2800      	cmp	r0, #0
    a802:	d08c      	beq.n	a71e <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a804:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    a808:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    a80c:	46e6      	mov	lr, ip
    a80e:	bf28      	it	cs
    a810:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    a814:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    a818:	42ba      	cmp	r2, r7
    a81a:	d90b      	bls.n	a834 <FatPartition::freeClusterCount()+0x158>
    a81c:	9d03      	ldr	r5, [sp, #12]
    a81e:	463b      	mov	r3, r7
    a820:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    a822:	f853 4b04 	ldr.w	r4, [r3], #4
    a826:	b90c      	cbnz	r4, a82c <FatPartition::freeClusterCount()+0x150>
    a828:	3501      	adds	r5, #1
    a82a:	4601      	mov	r1, r0
  while (p < e) {
    a82c:	429a      	cmp	r2, r3
    a82e:	d8f8      	bhi.n	a822 <FatPartition::freeClusterCount()+0x146>
    a830:	b101      	cbz	r1, a834 <FatPartition::freeClusterCount()+0x158>
    a832:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a834:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    a838:	ebac 030e 	sub.w	r3, ip, lr
    a83c:	45c8      	cmp	r8, r9
    a83e:	9302      	str	r3, [sp, #8]
    a840:	d017      	beq.n	a872 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a842:	f8da 2000 	ldr.w	r2, [sl]
    a846:	e7d6      	b.n	a7f6 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    a848:	f506 700e 	add.w	r0, r6, #568	; 0x238
    a84c:	f002 fb22 	bl	ce94 <FsCache::sync()>
    a850:	2800      	cmp	r0, #0
    a852:	f43f af64 	beq.w	a71e <FatPartition::freeClusterCount()+0x42>
    a856:	79f2      	ldrb	r2, [r6, #7]
    a858:	e771      	b.n	a73e <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a85a:	4623      	mov	r3, r4
    a85c:	ac02      	add	r4, sp, #8
    a85e:	463a      	mov	r2, r7
    a860:	4651      	mov	r1, sl
    a862:	9401      	str	r4, [sp, #4]
    a864:	4640      	mov	r0, r8
    a866:	4c0d      	ldr	r4, [pc, #52]	; (a89c <FatPartition::freeClusterCount()+0x1c0>)
    a868:	9400      	str	r4, [sp, #0]
    a86a:	47a8      	blx	r5
    a86c:	2800      	cmp	r0, #0
    a86e:	f43f af56 	beq.w	a71e <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    a872:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    a874:	6270      	str	r0, [r6, #36]	; 0x24
}
    a876:	b004      	add	sp, #16
    a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a87c:	4623      	mov	r3, r4
    a87e:	ac02      	add	r4, sp, #8
    a880:	463a      	mov	r2, r7
    a882:	4649      	mov	r1, r9
    a884:	9401      	str	r4, [sp, #4]
    a886:	4650      	mov	r0, sl
    a888:	4c05      	ldr	r4, [pc, #20]	; (a8a0 <FatPartition::freeClusterCount()+0x1c4>)
    a88a:	9400      	str	r4, [sp, #0]
    a88c:	47a8      	blx	r5
    a88e:	2800      	cmp	r0, #0
    a890:	d1ef      	bne.n	a872 <FatPartition::freeClusterCount()+0x196>
    a892:	e744      	b.n	a71e <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    a894:	2000      	movs	r0, #0
    a896:	e744      	b.n	a722 <FatPartition::freeClusterCount()+0x46>
    a898:	0000a311 	.word	0x0000a311
    a89c:	0000a355 	.word	0x0000a355
    a8a0:	0000a389 	.word	0x0000a389

0000a8a4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a8a4:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a8a6:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a8a8:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a8aa:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    a8ac:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    a8ae:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    a8b2:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    a8b6:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    a8b8:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    a8ba:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    a8bc:	62e1      	str	r1, [r4, #44]	; 0x2c
    a8be:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    a8c2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    a8c6:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a8ca:	6362      	str	r2, [r4, #52]	; 0x34
    a8cc:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    a8d0:	b1cd      	cbz	r5, a906 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    a8d2:	2d04      	cmp	r5, #4
    a8d4:	d901      	bls.n	a8da <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    a8d6:	2000      	movs	r0, #0
}
    a8d8:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    a8da:	461a      	mov	r2, r3
    a8dc:	4619      	mov	r1, r3
    a8de:	4630      	mov	r0, r6
    a8e0:	f002 fb04 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    a8e4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    a8e8:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    a8ec:	442b      	add	r3, r5
    a8ee:	011d      	lsls	r5, r3, #4
    a8f0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    a8f4:	2800      	cmp	r0, #0
    a8f6:	d0ee      	beq.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a8f8:	7919      	ldrb	r1, [r3, #4]
    a8fa:	2900      	cmp	r1, #0
    a8fc:	d0eb      	beq.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a8fe:	5d52      	ldrb	r2, [r2, r5]
    a900:	0652      	lsls	r2, r2, #25
    a902:	d1e8      	bne.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    a904:	689d      	ldr	r5, [r3, #8]
    a906:	2200      	movs	r2, #0
    a908:	4629      	mov	r1, r5
    a90a:	4630      	mov	r0, r6
    a90c:	f002 faee 	bl	ceec <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    a910:	2800      	cmp	r0, #0
    a912:	d0e0      	beq.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a914:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    a918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a91c:	d1db      	bne.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    a91e:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a920:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    a922:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a924:	2a01      	cmp	r2, #1
    a926:	d8d6      	bhi.n	a8d6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a928:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a92a:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a92c:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a92e:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a930:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    a932:	f04f 0300 	mov.w	r3, #0
    a936:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a938:	d044      	beq.n	a9c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    a93a:	2201      	movs	r2, #1
    a93c:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    a93e:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a940:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    a942:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a944:	4291      	cmp	r1, r2
    a946:	d004      	beq.n	a952 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    a948:	2b08      	cmp	r3, #8
    a94a:	d1f7      	bne.n	a93c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    a94c:	2000      	movs	r0, #0
    a94e:	71a3      	strb	r3, [r4, #6]
}
    a950:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    a952:	461e      	mov	r6, r3
    a954:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a956:	8ac1      	ldrh	r1, [r0, #22]
    a958:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a95a:	b909      	cbnz	r1, a960 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    a95c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a95e:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a960:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    a962:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    a966:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a968:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a96a:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a96c:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a96e:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a972:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a976:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    a97a:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a97e:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    a980:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    a984:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    a986:	b902      	cbnz	r2, a98a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    a988:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a98a:	1aed      	subs	r5, r5, r3
    a98c:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    a98e:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    a990:	1c5a      	adds	r2, r3, #1
    a992:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    a994:	f04f 32ff 	mov.w	r2, #4294967295
    a998:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    a99a:	f640 72f4 	movw	r2, #4084	; 0xff4
    a99e:	4293      	cmp	r3, r2
    a9a0:	d90c      	bls.n	a9bc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    a9a2:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    a9a6:	4293      	cmp	r3, r2
    a9a8:	d90a      	bls.n	a9c0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    a9aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    a9ac:	2320      	movs	r3, #32
    a9ae:	6222      	str	r2, [r4, #32]
  return true;
    a9b0:	2001      	movs	r0, #1
    m_fatType = 12;
    a9b2:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    a9b4:	6321      	str	r1, [r4, #48]	; 0x30
    a9b6:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    a9ba:	bd70      	pop	{r4, r5, r6, pc}
    a9bc:	230c      	movs	r3, #12
    a9be:	e7f7      	b.n	a9b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    a9c0:	2310      	movs	r3, #16
    a9c2:	e7f5      	b.n	a9b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a9c4:	461e      	mov	r6, r3
    a9c6:	e7c6      	b.n	a956 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

0000a9c8 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    a9c8:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    a9ca:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    a9ce:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    a9d0:	2300      	movs	r3, #0
    a9d2:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    a9d4:	a801      	add	r0, sp, #4
    a9d6:	4621      	mov	r1, r4
    a9d8:	9301      	str	r3, [sp, #4]
    a9da:	f7fe fa27 	bl	8e2c <FatFile::open(FatFile*, char const*, int)>
    a9de:	4605      	mov	r5, r0
    a9e0:	b198      	cbz	r0, aa0a <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    a9e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a9e6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a9ea:	d011      	beq.n	aa10 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    a9ec:	f10d 0e04 	add.w	lr, sp, #4
    a9f0:	46a4      	mov	ip, r4
    a9f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a9f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a9fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa02:	f8de 3000 	ldr.w	r3, [lr]
    aa06:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    aa0a:	4628      	mov	r0, r5
    aa0c:	b00b      	add	sp, #44	; 0x2c
    aa0e:	bd30      	pop	{r4, r5, pc}
  return false;
    aa10:	461d      	mov	r5, r3
}
    aa12:	4628      	mov	r0, r5
    aa14:	b00b      	add	sp, #44	; 0x2c
    aa16:	bd30      	pop	{r4, r5, pc}

0000aa18 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    aa18:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    aa1a:	b570      	push	{r4, r5, r6, lr}
    aa1c:	4604      	mov	r4, r0
  if (this == &from) return *this;
    aa1e:	d021      	beq.n	aa64 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    aa20:	6b80      	ldr	r0, [r0, #56]	; 0x38
    aa22:	460d      	mov	r5, r1
    aa24:	b118      	cbz	r0, aa2e <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    aa26:	f7fe f87b 	bl	8b20 <FatFile::close()>
    aa2a:	2800      	cmp	r0, #0
    aa2c:	d141      	bne.n	aab2 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    aa2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    aa30:	b118      	cbz	r0, aa3a <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    aa32:	f7fc fb4f 	bl	70d4 <ExFatFile::close()>
    aa36:	2800      	cmp	r0, #0
    aa38:	d141      	bne.n	aabe <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    aa3a:	6bae      	ldr	r6, [r5, #56]	; 0x38
    aa3c:	b1a6      	cbz	r6, aa68 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    aa3e:	4621      	mov	r1, r4
    aa40:	2024      	movs	r0, #36	; 0x24
    aa42:	f000 f8e9 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    aa46:	2300      	movs	r3, #0
    aa48:	4684      	mov	ip, r0
    aa4a:	8003      	strh	r3, [r0, #0]
    aa4c:	7083      	strb	r3, [r0, #2]
    aa4e:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    aa50:	6bad      	ldr	r5, [r5, #56]	; 0x38
    aa52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aa54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    aa5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    aa5e:	682b      	ldr	r3, [r5, #0]
    aa60:	f8cc 3000 	str.w	r3, [ip]
}
    aa64:	4620      	mov	r0, r4
    aa66:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    aa68:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    aa6a:	2b00      	cmp	r3, #0
    aa6c:	d0fa      	beq.n	aa64 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    aa6e:	4621      	mov	r1, r4
    aa70:	2038      	movs	r0, #56	; 0x38
    aa72:	f000 f8d1 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    aa76:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    aa7a:	8646      	strh	r6, [r0, #50]	; 0x32
    aa7c:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    aa7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    aa80:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    aa84:	681e      	ldr	r6, [r3, #0]
    aa86:	3310      	adds	r3, #16
    aa88:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    aa8c:	3010      	adds	r0, #16
    aa8e:	f853 1c08 	ldr.w	r1, [r3, #-8]
    aa92:	f853 2c04 	ldr.w	r2, [r3, #-4]
    aa96:	4563      	cmp	r3, ip
    aa98:	f840 6c10 	str.w	r6, [r0, #-16]
    aa9c:	f840 5c0c 	str.w	r5, [r0, #-12]
    aaa0:	f840 1c08 	str.w	r1, [r0, #-8]
    aaa4:	f840 2c04 	str.w	r2, [r0, #-4]
    aaa8:	d1ec      	bne.n	aa84 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    aaaa:	681b      	ldr	r3, [r3, #0]
    aaac:	6003      	str	r3, [r0, #0]
}
    aaae:	4620      	mov	r0, r4
    aab0:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    aab2:	2300      	movs	r3, #0
    aab4:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    aab6:	6bae      	ldr	r6, [r5, #56]	; 0x38
    aab8:	2e00      	cmp	r6, #0
    aaba:	d1c0      	bne.n	aa3e <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    aabc:	e7d4      	b.n	aa68 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    aabe:	2300      	movs	r3, #0
  if (from.m_fFile) {
    aac0:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    aac2:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    aac4:	2e00      	cmp	r6, #0
    aac6:	d1ba      	bne.n	aa3e <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    aac8:	e7ce      	b.n	aa68 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    aaca:	bf00      	nop

0000aacc <FsBaseFile::close()>:
bool FsBaseFile::close() {
    aacc:	b510      	push	{r4, lr}
    aace:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    aad0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    aad2:	b110      	cbz	r0, aada <FsBaseFile::close()+0xe>
    aad4:	f7fe f824 	bl	8b20 <FatFile::close()>
    aad8:	b930      	cbnz	r0, aae8 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    aada:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    aadc:	b110      	cbz	r0, aae4 <FsBaseFile::close()+0x18>
    aade:	f7fc faf9 	bl	70d4 <ExFatFile::close()>
    aae2:	b920      	cbnz	r0, aaee <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    aae4:	2000      	movs	r0, #0
}
    aae6:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    aae8:	2300      	movs	r3, #0
    aaea:	63a3      	str	r3, [r4, #56]	; 0x38
}
    aaec:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    aaee:	2300      	movs	r3, #0
    aaf0:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    aaf2:	bd10      	pop	{r4, pc}

0000aaf4 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    aaf4:	2900      	cmp	r1, #0
    aaf6:	d052      	beq.n	ab9e <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    aaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aafc:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    aafe:	6b80      	ldr	r0, [r0, #56]	; 0x38
    ab00:	460d      	mov	r5, r1
    ab02:	4617      	mov	r7, r2
    ab04:	461e      	mov	r6, r3
    ab06:	b110      	cbz	r0, ab0e <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    ab08:	f7fe f80a 	bl	8b20 <FatFile::close()>
    ab0c:	bba0      	cbnz	r0, ab78 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    ab0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    ab10:	b110      	cbz	r0, ab18 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    ab12:	f7fc fadf 	bl	70d4 <ExFatFile::close()>
    ab16:	bbb8      	cbnz	r0, ab88 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    ab18:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    ab1c:	f1b8 0f00 	cmp.w	r8, #0
    ab20:	d011      	beq.n	ab46 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    ab22:	4621      	mov	r1, r4
    ab24:	2024      	movs	r0, #36	; 0x24
    ab26:	f000 f877 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    ab2a:	4633      	mov	r3, r6
    ab2c:	2600      	movs	r6, #0
    ab2e:	463a      	mov	r2, r7
    ab30:	8006      	strh	r6, [r0, #0]
    ab32:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    ab34:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    ab36:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    ab3a:	f7fe f9f9 	bl	8f30 <FatFile::open(FatVolume*, char const*, int)>
    ab3e:	bb58      	cbnz	r0, ab98 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    ab40:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    ab42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    ab46:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    ab4a:	b193      	cbz	r3, ab72 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    ab4c:	4621      	mov	r1, r4
    ab4e:	2038      	movs	r0, #56	; 0x38
    ab50:	f000 f862 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    ab54:	4633      	mov	r3, r6
    ab56:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    ab5a:	463a      	mov	r2, r7
    ab5c:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    ab60:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    ab62:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    ab66:	f7fc fee9 	bl	793c <ExFatFile::open(ExFatVolume*, char const*, int)>
    ab6a:	b9a8      	cbnz	r0, ab98 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    ab6c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    ab6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    ab72:	2000      	movs	r0, #0
}
    ab74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    ab78:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    ab7a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    ab7e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    ab80:	f1b8 0f00 	cmp.w	r8, #0
    ab84:	d1cd      	bne.n	ab22 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    ab86:	e7de      	b.n	ab46 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    ab88:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    ab8a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    ab8e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    ab90:	f1b8 0f00 	cmp.w	r8, #0
    ab94:	d1c5      	bne.n	ab22 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    ab96:	e7d6      	b.n	ab46 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    ab98:	2001      	movs	r0, #1
}
    ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    ab9e:	2000      	movs	r0, #0
}
    aba0:	4770      	bx	lr
    aba2:	bf00      	nop

0000aba4 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aba6:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    aba8:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    abaa:	460d      	mov	r5, r1
    abac:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    abae:	b110      	cbz	r0, abb6 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    abb0:	f7fd ffb6 	bl	8b20 <FatFile::close()>
    abb4:	bb38      	cbnz	r0, ac06 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    abb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    abb8:	b110      	cbz	r0, abc0 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    abba:	f7fc fa8b 	bl	70d4 <ExFatFile::close()>
    abbe:	bb38      	cbnz	r0, ac10 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    abc0:	6bae      	ldr	r6, [r5, #56]	; 0x38
    abc2:	b176      	cbz	r6, abe2 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    abc4:	4621      	mov	r1, r4
    abc6:	2024      	movs	r0, #36	; 0x24
    abc8:	f000 f826 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    abcc:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    abce:	463a      	mov	r2, r7
    abd0:	8001      	strh	r1, [r0, #0]
    abd2:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    abd4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    abd6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    abd8:	f7fe fd10 	bl	95fc <FatFile::openNext(FatFile*, int)>
    abdc:	b988      	cbnz	r0, ac02 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    abde:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    abe2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    abe4:	2800      	cmp	r0, #0
    abe6:	d0fb      	beq.n	abe0 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    abe8:	4621      	mov	r1, r4
    abea:	2038      	movs	r0, #56	; 0x38
    abec:	f000 f814 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    abf0:	463a      	mov	r2, r7
    abf2:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    abf6:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    abf8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    abfa:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    abfc:	f7fc fea6 	bl	794c <ExFatFile::openNext(ExFatFile*, int)>
    ac00:	b120      	cbz	r0, ac0c <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    ac02:	2001      	movs	r0, #1
}
    ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    ac06:	2300      	movs	r3, #0
    ac08:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    ac0a:	e7d9      	b.n	abc0 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    ac0c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    ac0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    ac10:	2300      	movs	r3, #0
    ac12:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    ac14:	e7d4      	b.n	abc0 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    ac16:	bf00      	nop

0000ac18 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    ac18:	4608      	mov	r0, r1
    ac1a:	4770      	bx	lr

0000ac1c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    ac20:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    ac22:	4604      	mov	r4, r0
    ac24:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    ac26:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    ac2a:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    ac2e:	4601      	mov	r1, r0
    ac30:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    ac34:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    ac36:	f7ff ffef 	bl	ac18 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    ac3a:	4642      	mov	r2, r8
  ExFatPartition() {}
    ac3c:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    ac40:	4605      	mov	r5, r0
    ac42:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    ac46:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    ac4a:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    ac4e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    ac52:	f7fd fdf9 	bl	8848 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    ac56:	bba0      	cbnz	r0, acc2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    ac58:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    ac5a:	4621      	mov	r1, r4
    ac5c:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    ac60:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    ac64:	f7ff ffd8 	bl	ac18 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    ac68:	2302      	movs	r3, #2
    ac6a:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    ac6c:	4642      	mov	r2, r8
    ac6e:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    ac72:	4605      	mov	r5, r0
    ac74:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    ac78:	7203      	strb	r3, [r0, #8]
    ac7a:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    ac7e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    ac82:	f7ff fe0f 	bl	a8a4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    ac86:	b938      	cbnz	r0, ac98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    ac88:	2300      	movs	r3, #0
    ac8a:	4a1a      	ldr	r2, [pc, #104]	; (acf4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    ac8c:	4618      	mov	r0, r3
  m_cwv = nullptr;
    ac8e:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    ac90:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    ac98:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    ac9c:	4630      	mov	r0, r6
    ac9e:	f7fd ff3f 	bl	8b20 <FatFile::close()>
    return m_vwd.openRoot(this);
    aca2:	4629      	mov	r1, r5
    aca4:	4630      	mov	r0, r6
    aca6:	f7fe f979 	bl	8f9c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    acaa:	2800      	cmp	r0, #0
    acac:	d0ec      	beq.n	ac88 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    acae:	4b12      	ldr	r3, [pc, #72]	; (acf8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    acb0:	681a      	ldr	r2, [r3, #0]
    acb2:	b9aa      	cbnz	r2, ace0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    acb4:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    acb6:	4b0f      	ldr	r3, [pc, #60]	; (acf4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    acb8:	b1af      	cbz	r7, ace6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    acba:	2001      	movs	r0, #1
    m_cwv = this;
    acbc:	601c      	str	r4, [r3, #0]
}
    acbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    acc2:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    acc6:	4630      	mov	r0, r6
    acc8:	f7fc fa04 	bl	70d4 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    accc:	4629      	mov	r1, r5
    acce:	4630      	mov	r0, r6
    acd0:	f7fc fa2e 	bl	7130 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    acd4:	2800      	cmp	r0, #0
    acd6:	d0bf      	beq.n	ac58 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    acd8:	4b08      	ldr	r3, [pc, #32]	; (acfc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    acda:	681a      	ldr	r2, [r3, #0]
    acdc:	2a00      	cmp	r2, #0
    acde:	d0e9      	beq.n	acb4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    ace0:	4b04      	ldr	r3, [pc, #16]	; (acf4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    ace2:	2f00      	cmp	r7, #0
    ace4:	d1e9      	bne.n	acba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    ace6:	681a      	ldr	r2, [r3, #0]
    ace8:	2a00      	cmp	r2, #0
    acea:	d0e6      	beq.n	acba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    acec:	2001      	movs	r0, #1
}
    acee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acf2:	bf00      	nop
    acf4:	20024d14 	.word	0x20024d14
    acf8:	20024d18 	.word	0x20024d18
    acfc:	20024ce0 	.word	0x20024ce0

0000ad00 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    ad00:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    ad02:	2500      	movs	r5, #0
    ad04:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    ad08:	4604      	mov	r4, r0
    ad0a:	6045      	str	r5, [r0, #4]
    ad0c:	7305      	strb	r5, [r0, #12]
    ad0e:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    ad10:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    ad14:	4d03      	ldr	r5, [pc, #12]	; (ad24 <FsVolume::open(char const*, int)+0x24>)
    ad16:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    ad1a:	f7ff feeb 	bl	aaf4 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    ad1e:	4620      	mov	r0, r4
    ad20:	bd70      	pop	{r4, r5, r6, pc}
    ad22:	bf00      	nop
    ad24:	20000d98 	.word	0x20000d98

0000ad28 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    ad28:	f04f 30ff 	mov.w	r0, #4294967295
    ad2c:	4770      	bx	lr
    ad2e:	bf00      	nop

0000ad30 <SharedSpiCard::errorCode() const>:
  }
    ad30:	7c40      	ldrb	r0, [r0, #17]
    ad32:	4770      	bx	lr

0000ad34 <SharedSpiCard::errorData() const>:
  }
    ad34:	7d00      	ldrb	r0, [r0, #20]
    ad36:	4770      	bx	lr

0000ad38 <SharedSpiCard::type() const>:
  }
    ad38:	7d40      	ldrb	r0, [r0, #21]
    ad3a:	4770      	bx	lr

0000ad3c <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    ad3c:	2001      	movs	r0, #1
    ad3e:	4770      	bx	lr

0000ad40 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    ad40:	7f00      	ldrb	r0, [r0, #28]
    ad42:	4770      	bx	lr

0000ad44 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad48:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ad4a:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    ad4c:	4605      	mov	r5, r0
    ad4e:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ad50:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    ad52:	4691      	mov	r9, r2
    ad54:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ad56:	d028      	beq.n	adaa <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    ad58:	682b      	ldr	r3, [r5, #0]
    ad5a:	4621      	mov	r1, r4
    ad5c:	4628      	mov	r0, r5
    ad5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ad60:	4798      	blx	r3
    ad62:	b198      	cbz	r0, ad8c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    ad64:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    ad66:	f1b9 0f00 	cmp.w	r9, #0
    ad6a:	d012      	beq.n	ad92 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    ad6c:	eb04 0809 	add.w	r8, r4, r9
    ad70:	e001      	b.n	ad76 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    ad72:	45a0      	cmp	r8, r4
    ad74:	d00d      	beq.n	ad92 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    ad76:	4639      	mov	r1, r7
    ad78:	4620      	mov	r0, r4
    ad7a:	47b0      	blx	r6
    if (!writeData(src)) {
    ad7c:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    ad7e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    ad80:	4628      	mov	r0, r5
    ad82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    ad84:	3401      	adds	r4, #1
    if (!writeData(src)) {
    ad86:	4798      	blx	r3
    ad88:	2800      	cmp	r0, #0
    ad8a:	d1f2      	bne.n	ad72 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    ad8c:	2000      	movs	r0, #0
}
    ad8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    ad92:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ad94:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ad96:	444b      	add	r3, r9
    ad98:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ad9a:	2800      	cmp	r0, #0
    ad9c:	d1f7      	bne.n	ad8e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    ad9e:	682b      	ldr	r3, [r5, #0]
    ada0:	4628      	mov	r0, r5
    ada2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ada4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    ada8:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    adaa:	6983      	ldr	r3, [r0, #24]
    adac:	428b      	cmp	r3, r1
    adae:	d1d3      	bne.n	ad58 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    adb0:	e7d9      	b.n	ad66 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    adb2:	bf00      	nop

0000adb4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    adb4:	4770      	bx	lr
    adb6:	bf00      	nop

0000adb8 <SharedSpiCard::end()>:
    m_spiDriver.end();
    adb8:	3004      	adds	r0, #4
    adba:	f002 b817 	b.w	cdec <SdSpiArduinoDriver::end()>
    adbe:	bf00      	nop

0000adc0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    adc0:	b510      	push	{r4, lr}
    adc2:	4604      	mov	r4, r0
    adc4:	2120      	movs	r1, #32
    adc6:	f003 fc83 	bl	e6d0 <operator delete(void*, unsigned int)>
    adca:	4620      	mov	r0, r4
    adcc:	bd10      	pop	{r4, pc}
    adce:	bf00      	nop

0000add0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    add0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    add4:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    add6:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    add8:	4605      	mov	r5, r0
    adda:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    addc:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    adde:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ade0:	d024      	beq.n	ae2c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    ade2:	682b      	ldr	r3, [r5, #0]
    ade4:	4631      	mov	r1, r6
    ade6:	4628      	mov	r0, r5
    ade8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    adea:	4798      	blx	r3
    adec:	b178      	cbz	r0, ae0e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    adee:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    adf0:	b187      	cbz	r7, ae14 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    adf2:	2600      	movs	r6, #0
    adf4:	e001      	b.n	adfa <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    adf6:	42b7      	cmp	r7, r6
    adf8:	d00c      	beq.n	ae14 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    adfa:	682a      	ldr	r2, [r5, #0]
    adfc:	4621      	mov	r1, r4
    adfe:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae00:	3601      	adds	r6, #1
    if (!writeData(src)) {
    ae02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    ae04:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    ae08:	4790      	blx	r2
    ae0a:	2800      	cmp	r0, #0
    ae0c:	d1f3      	bne.n	adf6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    ae0e:	2000      	movs	r0, #0
}
    ae10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    ae14:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae16:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ae18:	443b      	add	r3, r7
    ae1a:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ae1c:	2800      	cmp	r0, #0
    ae1e:	d1f7      	bne.n	ae10 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    ae20:	682b      	ldr	r3, [r5, #0]
    ae22:	4628      	mov	r0, r5
    ae24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ae26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    ae2a:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ae2c:	6983      	ldr	r3, [r0, #24]
    ae2e:	428b      	cmp	r3, r1
    ae30:	d1d7      	bne.n	ade2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    ae32:	e7dd      	b.n	adf0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000ae34 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae38:	4e20      	ldr	r6, [pc, #128]	; (aebc <SharedSpiCard::writeStop()+0x88>)
    ae3a:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    ae3c:	f100 0804 	add.w	r8, r0, #4
    ae40:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    ae42:	f505 7516 	add.w	r5, r5, #600	; 0x258
    ae46:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    ae48:	e003      	b.n	ae52 <SharedSpiCard::writeStop()+0x1e>
    ae4a:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    ae4c:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    ae4e:	041b      	lsls	r3, r3, #16
    ae50:	d410      	bmi.n	ae74 <SharedSpiCard::writeStop()+0x40>
    ae52:	4640      	mov	r0, r8
    ae54:	f001 ffce 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    ae58:	28ff      	cmp	r0, #255	; 0xff
    ae5a:	4604      	mov	r4, r0
    ae5c:	d1f5      	bne.n	ae4a <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    ae5e:	21fd      	movs	r1, #253	; 0xfd
    ae60:	4640      	mov	r0, r8
    ae62:	f001 ffe5 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    ae66:	7cbb      	ldrb	r3, [r7, #18]
    ae68:	b9cb      	cbnz	r3, ae9e <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    ae6a:	2300      	movs	r3, #0
    ae6c:	2001      	movs	r0, #1
    ae6e:	74fb      	strb	r3, [r7, #19]
}
    ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    ae74:	231e      	movs	r3, #30
  if (m_spiActive) {
    ae76:	7cb8      	ldrb	r0, [r7, #18]
    ae78:	747b      	strb	r3, [r7, #17]
    ae7a:	2800      	cmp	r0, #0
    ae7c:	d0f8      	beq.n	ae70 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    ae7e:	7c38      	ldrb	r0, [r7, #16]
    ae80:	2101      	movs	r1, #1
    ae82:	f001 fef7 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ae86:	21ff      	movs	r1, #255	; 0xff
    ae88:	4640      	mov	r0, r8
    ae8a:	f001 ffd1 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ae8e:	4640      	mov	r0, r8
    ae90:	f001 ff84 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ae94:	2300      	movs	r3, #0
  return false;
    ae96:	4618      	mov	r0, r3
    m_spiActive = false;
    ae98:	74bb      	strb	r3, [r7, #18]
}
    ae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    ae9e:	2101      	movs	r1, #1
    aea0:	7c38      	ldrb	r0, [r7, #16]
    aea2:	f001 fee7 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aea6:	4621      	mov	r1, r4
    aea8:	4640      	mov	r0, r8
    aeaa:	f001 ffc1 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    aeae:	4640      	mov	r0, r8
    aeb0:	f001 ff74 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    aeb4:	2300      	movs	r3, #0
    aeb6:	74bb      	strb	r3, [r7, #18]
}
    aeb8:	e7d7      	b.n	ae6a <SharedSpiCard::writeStop()+0x36>
    aeba:	bf00      	nop
    aebc:	20025b88 	.word	0x20025b88

0000aec0 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    aec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    aec4:	7cc3      	ldrb	r3, [r0, #19]
    aec6:	2b01      	cmp	r3, #1
    aec8:	d035      	beq.n	af36 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    aeca:	7c86      	ldrb	r6, [r0, #18]
    aecc:	4604      	mov	r4, r0
    aece:	b14e      	cbz	r6, aee4 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    aed0:	3004      	adds	r0, #4
    aed2:	f001 ff8f 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    aed6:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    aeda:	bf18      	it	ne
    aedc:	2501      	movne	r5, #1
}
    aede:	4628      	mov	r0, r5
    aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    aee4:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    aee6:	f04f 0801 	mov.w	r8, #1
    aeea:	4638      	mov	r0, r7
    aeec:	f001 ff4c 	bl	cd88 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    aef0:	4631      	mov	r1, r6
    aef2:	7c20      	ldrb	r0, [r4, #16]
    aef4:	f001 febe 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aef8:	21ff      	movs	r1, #255	; 0xff
    aefa:	4638      	mov	r0, r7
    aefc:	f001 ff98 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    af00:	4638      	mov	r0, r7
    af02:	f884 8012 	strb.w	r8, [r4, #18]
    af06:	f001 ff75 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    af0a:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    af0c:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    af10:	bf18      	it	ne
    af12:	2501      	movne	r5, #1
  if (m_spiActive) {
    af14:	2b00      	cmp	r3, #0
    af16:	d0e2      	beq.n	aede <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    af18:	4641      	mov	r1, r8
    af1a:	7c20      	ldrb	r0, [r4, #16]
    af1c:	f001 feaa 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af20:	21ff      	movs	r1, #255	; 0xff
    af22:	4638      	mov	r0, r7
    af24:	f001 ff84 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af28:	4638      	mov	r0, r7
    af2a:	f001 ff37 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
}
    af2e:	4628      	mov	r0, r5
    m_spiActive = false;
    af30:	74a6      	strb	r6, [r4, #18]
}
    af32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    af36:	2500      	movs	r5, #0
}
    af38:	4628      	mov	r0, r5
    af3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af3e:	bf00      	nop

0000af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    af44:	4f20      	ldr	r7, [pc, #128]	; (afc8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    af46:	4604      	mov	r4, r0
    af48:	4688      	mov	r8, r1
    af4a:	4691      	mov	r9, r2
    af4c:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    af4e:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    af50:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    af54:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    af56:	e003      	b.n	af60 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    af58:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    af5a:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    af5c:	041b      	lsls	r3, r3, #16
    af5e:	d40d      	bmi.n	af7c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    af60:	4630      	mov	r0, r6
    af62:	f001 ff47 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    af66:	28ff      	cmp	r0, #255	; 0xff
    af68:	7520      	strb	r0, [r4, #20]
    af6a:	d0f5      	beq.n	af58 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    af6c:	28fe      	cmp	r0, #254	; 0xfe
    af6e:	d01a      	beq.n	afa6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    af70:	2318      	movs	r3, #24
  if (m_spiActive) {
    af72:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    af74:	7463      	strb	r3, [r4, #17]
    af76:	b930      	cbnz	r0, af86 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    af78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af7c:	231d      	movs	r3, #29
  if (m_spiActive) {
    af7e:	7ca0      	ldrb	r0, [r4, #18]
    af80:	7463      	strb	r3, [r4, #17]
    af82:	2800      	cmp	r0, #0
    af84:	d0f8      	beq.n	af78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    af86:	7c20      	ldrb	r0, [r4, #16]
    af88:	2101      	movs	r1, #1
    af8a:	f001 fe73 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af8e:	21ff      	movs	r1, #255	; 0xff
    af90:	4630      	mov	r0, r6
    af92:	f001 ff4d 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af96:	4630      	mov	r0, r6
    af98:	f001 ff00 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af9c:	2300      	movs	r3, #0
  return false;
    af9e:	4618      	mov	r0, r3
    m_spiActive = false;
    afa0:	74a3      	strb	r3, [r4, #18]
}
    afa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    afa6:	464a      	mov	r2, r9
    afa8:	4641      	mov	r1, r8
    afaa:	4630      	mov	r0, r6
    afac:	f001 ff2e 	bl	ce0c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    afb0:	7520      	strb	r0, [r4, #20]
    afb2:	b938      	cbnz	r0, afc4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    afb4:	4630      	mov	r0, r6
    afb6:	f001 ff1d 	bl	cdf4 <SdSpiArduinoDriver::receive()>
    afba:	4630      	mov	r0, r6
    afbc:	f001 ff1a 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  return true;
    afc0:	2001      	movs	r0, #1
    afc2:	e7d9      	b.n	af78 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    afc4:	2325      	movs	r3, #37	; 0x25
    afc6:	e7d4      	b.n	af72 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    afc8:	20025b88 	.word	0x20025b88

0000afcc <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    afcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    afce:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    afd0:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    afd2:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    afd4:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    afd6:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    afd8:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    afda:	f000 f85b 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    afde:	b9b0      	cbnz	r0, b00e <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    afe0:	7ca6      	ldrb	r6, [r4, #18]
    afe2:	b91e      	cbnz	r6, afec <SharedSpiCard::readStop()+0x20>
  return true;
    afe4:	2601      	movs	r6, #1
}
    afe6:	4630      	mov	r0, r6
    afe8:	b003      	add	sp, #12
    afea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    afec:	4605      	mov	r5, r0
    afee:	2101      	movs	r1, #1
    aff0:	7c20      	ldrb	r0, [r4, #16]
    aff2:	f001 fe3f 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aff6:	1d20      	adds	r0, r4, #4
    aff8:	21ff      	movs	r1, #255	; 0xff
    affa:	9001      	str	r0, [sp, #4]
    affc:	f001 ff18 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b000:	9801      	ldr	r0, [sp, #4]
    b002:	f001 fecb 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    b006:	4630      	mov	r0, r6
    m_spiActive = false;
    b008:	74a5      	strb	r5, [r4, #18]
}
    b00a:	b003      	add	sp, #12
    b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    b00e:	2309      	movs	r3, #9
  if (m_spiActive) {
    b010:	7ca6      	ldrb	r6, [r4, #18]
    b012:	7463      	strb	r3, [r4, #17]
    b014:	2e00      	cmp	r6, #0
    b016:	d0e6      	beq.n	afe6 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    b018:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b01a:	7c20      	ldrb	r0, [r4, #16]
    b01c:	2101      	movs	r1, #1
}
    b01e:	463e      	mov	r6, r7
    b020:	f001 fe28 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b024:	21ff      	movs	r1, #255	; 0xff
    b026:	4628      	mov	r0, r5
    b028:	f001 ff02 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b02c:	4628      	mov	r0, r5
    b02e:	f001 feb5 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
}
    b032:	4630      	mov	r0, r6
    m_spiActive = false;
    b034:	74a7      	strb	r7, [r4, #18]
}
    b036:	b003      	add	sp, #12
    b038:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b03a:	bf00      	nop

0000b03c <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    b03c:	7cc2      	ldrb	r2, [r0, #19]
    b03e:	2a02      	cmp	r2, #2
    b040:	d003      	beq.n	b04a <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    b042:	2a01      	cmp	r2, #1
    b044:	d004      	beq.n	b050 <SharedSpiCard::syncDevice()+0x14>
}
    b046:	2001      	movs	r0, #1
    b048:	4770      	bx	lr
    return writeStop();
    b04a:	6803      	ldr	r3, [r0, #0]
    b04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b04e:	4718      	bx	r3
    return readStop();
    b050:	f7ff bfbc 	b.w	afcc <SharedSpiCard::readStop()>

0000b054 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    b054:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    b056:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    b058:	460d      	mov	r5, r1
    b05a:	490d      	ldr	r1, [pc, #52]	; (b090 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    b05c:	4604      	mov	r4, r0
  if (!syncDevice()) {
    b05e:	6a1a      	ldr	r2, [r3, #32]
    b060:	428a      	cmp	r2, r1
    b062:	d10c      	bne.n	b07e <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    b064:	7cc2      	ldrb	r2, [r0, #19]
    b066:	2a02      	cmp	r2, #2
    b068:	d004      	beq.n	b074 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    b06a:	2a01      	cmp	r2, #1
    b06c:	d00b      	beq.n	b086 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    b06e:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    b070:	7725      	strb	r5, [r4, #28]
}
    b072:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    b074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b076:	4798      	blx	r3
  if (!syncDevice()) {
    b078:	2800      	cmp	r0, #0
    b07a:	d1f8      	bne.n	b06e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    b07c:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    b07e:	4790      	blx	r2
    b080:	2800      	cmp	r0, #0
    b082:	d0fb      	beq.n	b07c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    b084:	e7f3      	b.n	b06e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    b086:	f7ff ffa1 	bl	afcc <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    b08a:	2800      	cmp	r0, #0
    b08c:	d0f6      	beq.n	b07c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    b08e:	e7ee      	b.n	b06e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    b090:	0000b03d 	.word	0x0000b03d

0000b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    b098:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    b09a:	b082      	sub	sp, #8
    b09c:	460f      	mov	r7, r1
    b09e:	4935      	ldr	r1, [pc, #212]	; (b174 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    b0a0:	9201      	str	r2, [sp, #4]
    b0a2:	4606      	mov	r6, r0
  if (!syncDevice()) {
    b0a4:	6a1a      	ldr	r2, [r3, #32]
    b0a6:	428a      	cmp	r2, r1
    b0a8:	d15e      	bne.n	b168 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    b0aa:	7cc2      	ldrb	r2, [r0, #19]
    b0ac:	2a02      	cmp	r2, #2
    b0ae:	d041      	beq.n	b134 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    b0b0:	2a01      	cmp	r2, #1
    b0b2:	d05b      	beq.n	b16c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    b0b4:	7cb4      	ldrb	r4, [r6, #18]
    b0b6:	2c00      	cmp	r4, #0
    b0b8:	d047      	beq.n	b14a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    b0ba:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    b0bc:	2f0c      	cmp	r7, #12
    b0be:	d011      	beq.n	b0e4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    b0c0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b178 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    b0c4:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    b0c8:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    b0cc:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b0ce:	e004      	b.n	b0da <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    b0d0:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b0d4:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b0d6:	041a      	lsls	r2, r3, #16
    b0d8:	d434      	bmi.n	b144 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    b0da:	4628      	mov	r0, r5
    b0dc:	f001 fe8a 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b0e0:	28ff      	cmp	r0, #255	; 0xff
    b0e2:	d1f5      	bne.n	b0d0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    b0e4:	f10d 0804 	add.w	r8, sp, #4
    b0e8:	ac02      	add	r4, sp, #8
    b0ea:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    b0ee:	4628      	mov	r0, r5
    b0f0:	f001 fe9e 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    b0f4:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    b0f8:	4628      	mov	r0, r5
    b0fa:	f001 fe99 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    b0fe:	45a0      	cmp	r8, r4
    b100:	d1f8      	bne.n	b0f4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    b102:	2f00      	cmp	r7, #0
    b104:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    b106:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    b10a:	bf0c      	ite	eq
    b10c:	2195      	moveq	r1, #149	; 0x95
    b10e:	2187      	movne	r1, #135	; 0x87
    b110:	f001 fe8e 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b114:	4628      	mov	r0, r5
    b116:	f001 fe6d 	bl	cdf4 <SdSpiArduinoDriver::receive()>
    b11a:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    b11c:	3c01      	subs	r4, #1
    b11e:	f001 fe69 	bl	cdf4 <SdSpiArduinoDriver::receive()>
    b122:	0603      	lsls	r3, r0, #24
    b124:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    b126:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    b128:	d501      	bpl.n	b12e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    b12a:	2c00      	cmp	r4, #0
    b12c:	d1f5      	bne.n	b11a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    b12e:	b002      	add	sp, #8
    b130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    b134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b136:	4798      	blx	r3
  if (!syncDevice()) {
    b138:	2800      	cmp	r0, #0
    b13a:	d1bb      	bne.n	b0b4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    b13c:	20ff      	movs	r0, #255	; 0xff
}
    b13e:	b002      	add	sp, #8
    b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    b144:	2f00      	cmp	r7, #0
    b146:	d0cd      	beq.n	b0e4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    b148:	e7f8      	b.n	b13c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    b14a:	1d35      	adds	r5, r6, #4
    b14c:	4628      	mov	r0, r5
    b14e:	f001 fe1b 	bl	cd88 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    b152:	4621      	mov	r1, r4
    b154:	7c30      	ldrb	r0, [r6, #16]
    b156:	f001 fd8d 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b15a:	21ff      	movs	r1, #255	; 0xff
    b15c:	4628      	mov	r0, r5
    b15e:	f001 fe67 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    b162:	2301      	movs	r3, #1
    b164:	74b3      	strb	r3, [r6, #18]
}
    b166:	e7a9      	b.n	b0bc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    b168:	4790      	blx	r2
    b16a:	e7e5      	b.n	b138 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    b16c:	f7ff ff2e 	bl	afcc <SharedSpiCard::readStop()>
    b170:	e7e2      	b.n	b138 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    b172:	bf00      	nop
    b174:	0000b03d 	.word	0x0000b03d
    b178:	20025b88 	.word	0x20025b88

0000b17c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    b17e:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b180:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    b182:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    b184:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    b186:	f7ff ff85 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b18a:	b9e0      	cbnz	r0, b1c6 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    b18c:	1d37      	adds	r7, r6, #4
    b18e:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    b190:	4638      	mov	r0, r7
    b192:	f001 fe2f 	bl	cdf4 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    b196:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    b19a:	42a5      	cmp	r5, r4
    b19c:	d1f8      	bne.n	b190 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    b19e:	7cb4      	ldrb	r4, [r6, #18]
    b1a0:	b914      	cbnz	r4, b1a8 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    b1a2:	2401      	movs	r4, #1
}
    b1a4:	4620      	mov	r0, r4
    b1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    b1a8:	7c30      	ldrb	r0, [r6, #16]
    b1aa:	2101      	movs	r1, #1
    b1ac:	f001 fd62 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b1b0:	21ff      	movs	r1, #255	; 0xff
    b1b2:	4638      	mov	r0, r7
    b1b4:	f001 fe3c 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b1b8:	4638      	mov	r0, r7
    b1ba:	f001 fdef 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b1be:	2300      	movs	r3, #0
}
    b1c0:	4620      	mov	r0, r4
    m_spiActive = false;
    b1c2:	74b3      	strb	r3, [r6, #18]
}
    b1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    b1c6:	2312      	movs	r3, #18
  if (m_spiActive) {
    b1c8:	7cb4      	ldrb	r4, [r6, #18]
    b1ca:	7473      	strb	r3, [r6, #17]
    b1cc:	2c00      	cmp	r4, #0
    b1ce:	d0e9      	beq.n	b1a4 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    b1d0:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    b1d2:	7c30      	ldrb	r0, [r6, #16]
    b1d4:	2101      	movs	r1, #1
    b1d6:	f001 fd4d 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b1da:	21ff      	movs	r1, #255	; 0xff
    b1dc:	4620      	mov	r0, r4
    b1de:	f001 fe27 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b1e2:	4620      	mov	r0, r4
    b1e4:	f001 fdda 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b1e8:	2300      	movs	r3, #0
  return false;
    b1ea:	461c      	mov	r4, r3
    m_spiActive = false;
    b1ec:	74b3      	strb	r3, [r6, #18]
}
    b1ee:	4620      	mov	r0, r4
    b1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b1f2:	bf00      	nop

0000b1f4 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    b1f4:	b570      	push	{r4, r5, r6, lr}
    b1f6:	4616      	mov	r6, r2
    b1f8:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    b1fa:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    b1fc:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    b1fe:	f7ff ff49 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b202:	b1b0      	cbz	r0, b232 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    b204:	231b      	movs	r3, #27
    b206:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b208:	7ca0      	ldrb	r0, [r4, #18]
    b20a:	b908      	cbnz	r0, b210 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    b20c:	b002      	add	sp, #8
    b20e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b210:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b212:	7c20      	ldrb	r0, [r4, #16]
    b214:	2101      	movs	r1, #1
    b216:	f001 fd2d 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b21a:	21ff      	movs	r1, #255	; 0xff
    b21c:	4628      	mov	r0, r5
    b21e:	f001 fe07 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b222:	4628      	mov	r0, r5
    b224:	f001 fdba 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b228:	2300      	movs	r3, #0
  return false;
    b22a:	4618      	mov	r0, r3
    m_spiActive = false;
    b22c:	74a3      	strb	r3, [r4, #18]
}
    b22e:	b002      	add	sp, #8
    b230:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b232:	4605      	mov	r5, r0
    b234:	2210      	movs	r2, #16
    b236:	4631      	mov	r1, r6
    b238:	4620      	mov	r0, r4
    b23a:	f7ff fe81 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b23e:	2800      	cmp	r0, #0
    b240:	d0e2      	beq.n	b208 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    b242:	7ca6      	ldrb	r6, [r4, #18]
    b244:	2e00      	cmp	r6, #0
    b246:	d0e1      	beq.n	b20c <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    b248:	7c20      	ldrb	r0, [r4, #16]
    b24a:	2101      	movs	r1, #1
    b24c:	f001 fd12 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b250:	1d20      	adds	r0, r4, #4
    b252:	21ff      	movs	r1, #255	; 0xff
    b254:	9001      	str	r0, [sp, #4]
    b256:	f001 fdeb 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b25a:	9801      	ldr	r0, [sp, #4]
    b25c:	f001 fd9e 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
}
    b260:	4630      	mov	r0, r6
    m_spiActive = false;
    b262:	74a5      	strb	r5, [r4, #18]
}
    b264:	b002      	add	sp, #8
    b266:	bd70      	pop	{r4, r5, r6, pc}

0000b268 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b268:	6803      	ldr	r3, [r0, #0]
    b26a:	4a25      	ldr	r2, [pc, #148]	; (b300 <SharedSpiCard::sectorCount()+0x98>)
    b26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b26e:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    b270:	b500      	push	{lr}
    b272:	b085      	sub	sp, #20
    b274:	d10f      	bne.n	b296 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    b276:	466a      	mov	r2, sp
    b278:	2109      	movs	r1, #9
    b27a:	f7ff ffbb 	bl	b1f4 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b27e:	b138      	cbz	r0, b290 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    b280:	f89d 3000 	ldrb.w	r3, [sp]
    b284:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b288:	d008      	beq.n	b29c <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    b28a:	2b40      	cmp	r3, #64	; 0x40
    b28c:	d027      	beq.n	b2de <SharedSpiCard::sectorCount()+0x76>
    b28e:	2000      	movs	r0, #0
}
    b290:	b005      	add	sp, #20
    b292:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b296:	4669      	mov	r1, sp
    b298:	4798      	blx	r3
    b29a:	e7f0      	b.n	b27e <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b29c:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    b2a0:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b2a4:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b2a8:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b2ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    b2b0:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b2b2:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b2b6:	0080      	lsls	r0, r0, #2
    b2b8:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b2bc:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b2c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b2c4:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b2c8:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b2cc:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b2d0:	4413      	add	r3, r2
    b2d2:	3001      	adds	r0, #1
    b2d4:	3b07      	subs	r3, #7
    b2d6:	4098      	lsls	r0, r3
}
    b2d8:	b005      	add	sp, #20
    b2da:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b2de:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b2e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b2e6:	3001      	adds	r0, #1
    b2e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b2f0:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    b2f4:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    b2f8:	0280      	lsls	r0, r0, #10
    b2fa:	b005      	add	sp, #20
    b2fc:	f85d fb04 	ldr.w	pc, [sp], #4
    b300:	0000b625 	.word	0x0000b625

0000b304 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b304:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    b306:	460a      	mov	r2, r1
    b308:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    b30c:	b083      	sub	sp, #12
    b30e:	4d16      	ldr	r5, [pc, #88]	; (b368 <SharedSpiCard::readStart(unsigned long)+0x64>)
    b310:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b312:	42ab      	cmp	r3, r5
    b314:	d124      	bne.n	b360 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    b316:	7d40      	ldrb	r0, [r0, #21]
    b318:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    b31a:	f04f 0112 	mov.w	r1, #18
    b31e:	4620      	mov	r0, r4
    sector <<= 9;
    b320:	bf18      	it	ne
    b322:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    b324:	f7ff feb6 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b328:	b920      	cbnz	r0, b334 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    b32a:	2301      	movs	r3, #1
  return true;
    b32c:	4618      	mov	r0, r3
  m_state = READ_STATE;
    b32e:	74e3      	strb	r3, [r4, #19]
}
    b330:	b003      	add	sp, #12
    b332:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b334:	230c      	movs	r3, #12
  if (m_spiActive) {
    b336:	7ca0      	ldrb	r0, [r4, #18]
    b338:	7463      	strb	r3, [r4, #17]
    b33a:	2800      	cmp	r0, #0
    b33c:	d0f8      	beq.n	b330 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b33e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b340:	7c20      	ldrb	r0, [r4, #16]
    b342:	2101      	movs	r1, #1
    b344:	f001 fc96 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b348:	21ff      	movs	r1, #255	; 0xff
    b34a:	4628      	mov	r0, r5
    b34c:	f001 fd70 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b350:	4628      	mov	r0, r5
    b352:	f001 fd23 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b356:	2300      	movs	r3, #0
}
    b358:	4618      	mov	r0, r3
    m_spiActive = false;
    b35a:	74a3      	strb	r3, [r4, #18]
}
    b35c:	b003      	add	sp, #12
    b35e:	bd30      	pop	{r4, r5, pc}
    b360:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b362:	4798      	blx	r3
    b364:	9a01      	ldr	r2, [sp, #4]
    b366:	e7d7      	b.n	b318 <SharedSpiCard::readStart(unsigned long)+0x14>
    b368:	0000ad39 	.word	0x0000ad39

0000b36c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b36e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    b370:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    b372:	4606      	mov	r6, r0
    b374:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b376:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    b378:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b37a:	d102      	bne.n	b382 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    b37c:	6983      	ldr	r3, [r0, #24]
    b37e:	428b      	cmp	r3, r1
    b380:	d005      	beq.n	b38e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    b382:	4629      	mov	r1, r5
    b384:	4630      	mov	r0, r6
    b386:	f7ff ffbd 	bl	b304 <SharedSpiCard::readStart(unsigned long)>
    b38a:	b180      	cbz	r0, b3ae <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    b38c:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b38e:	b187      	cbz	r7, b3b2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    b390:	2500      	movs	r5, #0
    b392:	e001      	b.n	b398 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b394:	42af      	cmp	r7, r5
    b396:	d00c      	beq.n	b3b2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    b398:	4621      	mov	r1, r4
    b39a:	f44f 7200 	mov.w	r2, #512	; 0x200
    b39e:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b3a0:	3501      	adds	r5, #1
    b3a2:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    b3a6:	f7ff fdcb 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b3aa:	2800      	cmp	r0, #0
    b3ac:	d1f2      	bne.n	b394 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    b3ae:	2000      	movs	r0, #0
}
    b3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    b3b2:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b3b4:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b3b6:	443b      	add	r3, r7
    b3b8:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b3ba:	2800      	cmp	r0, #0
    b3bc:	d1f8      	bne.n	b3b0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    b3be:	4630      	mov	r0, r6
}
    b3c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    b3c4:	f7ff be02 	b.w	afcc <SharedSpiCard::readStop()>

0000b3c8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b3c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3cc:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3ce:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b3d0:	4606      	mov	r6, r0
    b3d2:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3d4:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b3d6:	4615      	mov	r5, r2
    b3d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    b3dc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    b3e0:	d102      	bne.n	b3e8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    b3e2:	6983      	ldr	r3, [r0, #24]
    b3e4:	428b      	cmp	r3, r1
    b3e6:	d005      	beq.n	b3f4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    b3e8:	4621      	mov	r1, r4
    b3ea:	4630      	mov	r0, r6
    b3ec:	f7ff ff8a 	bl	b304 <SharedSpiCard::readStart(unsigned long)>
    b3f0:	b1b0      	cbz	r0, b420 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    b3f2:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    b3f4:	f1bb 0f00 	cmp.w	fp, #0
    b3f8:	d015      	beq.n	b426 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    b3fa:	eb04 0a0b 	add.w	sl, r4, fp
    b3fe:	e002      	b.n	b406 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    b400:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    b402:	45a2      	cmp	sl, r4
    b404:	d00f      	beq.n	b426 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    b406:	f44f 7200 	mov.w	r2, #512	; 0x200
    b40a:	4629      	mov	r1, r5
    b40c:	4630      	mov	r0, r6
    b40e:	f7ff fd97 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b412:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    b414:	4642      	mov	r2, r8
    b416:	4620      	mov	r0, r4
    b418:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    b41a:	3401      	adds	r4, #1
    if (readData(dst)) {
    b41c:	2f00      	cmp	r7, #0
    b41e:	d1ef      	bne.n	b400 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    b420:	2000      	movs	r0, #0
}
    b422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    b426:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b428:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b42a:	445b      	add	r3, fp
    b42c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b42e:	2800      	cmp	r0, #0
    b430:	d1f7      	bne.n	b422 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    b432:	4630      	mov	r0, r6
}
    b434:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    b438:	f7ff bdc8 	b.w	afcc <SharedSpiCard::readStop()>

0000b43c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    b43c:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    b43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b442:	695f      	ldr	r7, [r3, #20]
    b444:	4b16      	ldr	r3, [pc, #88]	; (b4a0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    b446:	429f      	cmp	r7, r3
    b448:	d11f      	bne.n	b48a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    b44a:	7cc3      	ldrb	r3, [r0, #19]
    b44c:	4604      	mov	r4, r0
    b44e:	460d      	mov	r5, r1
    b450:	4616      	mov	r6, r2
    b452:	2b01      	cmp	r3, #1
    b454:	d102      	bne.n	b45c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    b456:	6983      	ldr	r3, [r0, #24]
    b458:	4299      	cmp	r1, r3
    b45a:	d005      	beq.n	b468 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    b45c:	4629      	mov	r1, r5
    b45e:	4620      	mov	r0, r4
    b460:	f7ff ff50 	bl	b304 <SharedSpiCard::readStart(unsigned long)>
    b464:	b170      	cbz	r0, b484 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    b466:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    b468:	f44f 7200 	mov.w	r2, #512	; 0x200
    b46c:	4631      	mov	r1, r6
    b46e:	4620      	mov	r0, r4
    b470:	f7ff fd66 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b474:	b130      	cbz	r0, b484 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    b476:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b478:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    b47a:	3301      	adds	r3, #1
    b47c:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b47e:	b148      	cbz	r0, b494 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    b480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    b484:	2000      	movs	r0, #0
}
    b486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    b48a:	46bc      	mov	ip, r7
    b48c:	2301      	movs	r3, #1
}
    b48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b492:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    b494:	4620      	mov	r0, r4
}
    b496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    b49a:	f7ff bd97 	b.w	afcc <SharedSpiCard::readStop()>
    b49e:	bf00      	nop
    b4a0:	0000b36d 	.word	0x0000b36d

0000b4a4 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b4a4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    b4a6:	460a      	mov	r2, r1
    b4a8:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    b4ac:	b083      	sub	sp, #12
    b4ae:	4d16      	ldr	r5, [pc, #88]	; (b508 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    b4b0:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b4b2:	42ab      	cmp	r3, r5
    b4b4:	d124      	bne.n	b500 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    b4b6:	7d40      	ldrb	r0, [r0, #21]
    b4b8:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    b4ba:	f04f 0119 	mov.w	r1, #25
    b4be:	4620      	mov	r0, r4
    sector <<= 9;
    b4c0:	bf18      	it	ne
    b4c2:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    b4c4:	f7ff fde6 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b4c8:	b920      	cbnz	r0, b4d4 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    b4ca:	2302      	movs	r3, #2
  return true;
    b4cc:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    b4ce:	74e3      	strb	r3, [r4, #19]
}
    b4d0:	b003      	add	sp, #12
    b4d2:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b4d4:	230e      	movs	r3, #14
  if (m_spiActive) {
    b4d6:	7ca0      	ldrb	r0, [r4, #18]
    b4d8:	7463      	strb	r3, [r4, #17]
    b4da:	2800      	cmp	r0, #0
    b4dc:	d0f8      	beq.n	b4d0 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b4de:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b4e0:	7c20      	ldrb	r0, [r4, #16]
    b4e2:	2101      	movs	r1, #1
    b4e4:	f001 fbc6 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b4e8:	21ff      	movs	r1, #255	; 0xff
    b4ea:	4628      	mov	r0, r5
    b4ec:	f001 fca0 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b4f0:	4628      	mov	r0, r5
    b4f2:	f001 fc53 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b4f6:	2300      	movs	r3, #0
}
    b4f8:	4618      	mov	r0, r3
    m_spiActive = false;
    b4fa:	74a3      	strb	r3, [r4, #18]
}
    b4fc:	b003      	add	sp, #12
    b4fe:	bd30      	pop	{r4, r5, pc}
    b500:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b502:	4798      	blx	r3
    b504:	9a01      	ldr	r2, [sp, #4]
    b506:	e7d7      	b.n	b4b8 <SharedSpiCard::writeStart(unsigned long)+0x14>
    b508:	0000ad39 	.word	0x0000ad39

0000b50c <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    b50c:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b50e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    b512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b514:	4617      	mov	r7, r2
    b516:	4a41      	ldr	r2, [pc, #260]	; (b61c <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    b518:	b085      	sub	sp, #20
    b51a:	4604      	mov	r4, r0
    b51c:	460e      	mov	r6, r1
    b51e:	4293      	cmp	r3, r2
    b520:	d145      	bne.n	b5ae <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    b522:	466a      	mov	r2, sp
    b524:	2109      	movs	r1, #9
    b526:	f7ff fe65 	bl	b1f4 <SharedSpiCard::readRegister(unsigned char, void*)>
    b52a:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    b52c:	b1b5      	cbz	r5, b55c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    b52e:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b532:	065a      	lsls	r2, r3, #25
    b534:	d518      	bpl.n	b568 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    b536:	7d63      	ldrb	r3, [r4, #21]
    b538:	2b03      	cmp	r3, #3
    b53a:	d001      	beq.n	b540 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    b53c:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    b53e:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    b540:	4632      	mov	r2, r6
    b542:	2120      	movs	r1, #32
    b544:	4620      	mov	r0, r4
    b546:	f7ff fda5 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    b54a:	b928      	cbnz	r0, b558 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    b54c:	463a      	mov	r2, r7
    b54e:	2121      	movs	r1, #33	; 0x21
    b550:	4620      	mov	r0, r4
    b552:	f7ff fd9f 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b556:	b370      	cbz	r0, b5b6 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    b558:	2326      	movs	r3, #38	; 0x26
    b55a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b55c:	7ca5      	ldrb	r5, [r4, #18]
    b55e:	b99d      	cbnz	r5, b588 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    b560:	4628      	mov	r0, r5
    b562:	b005      	add	sp, #20
    b564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    b568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b56c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b570:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b572:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b576:	1c7a      	adds	r2, r7, #1
    b578:	4332      	orrs	r2, r6
    b57a:	4213      	tst	r3, r2
    b57c:	d0db      	beq.n	b536 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    b57e:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    b580:	7ca5      	ldrb	r5, [r4, #18]
    b582:	7463      	strb	r3, [r4, #17]
    b584:	2d00      	cmp	r5, #0
    b586:	d0eb      	beq.n	b560 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    b588:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b58a:	7c20      	ldrb	r0, [r4, #16]
    b58c:	2101      	movs	r1, #1
    b58e:	f001 fb71 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b592:	21ff      	movs	r1, #255	; 0xff
    b594:	4628      	mov	r0, r5
    b596:	f001 fc4b 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b59a:	4628      	mov	r0, r5
    b59c:	f001 fbfe 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b5a0:	2300      	movs	r3, #0
  return false;
    b5a2:	461d      	mov	r5, r3
    m_spiActive = false;
    b5a4:	74a3      	strb	r3, [r4, #18]
}
    b5a6:	4628      	mov	r0, r5
    b5a8:	b005      	add	sp, #20
    b5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    b5ae:	4669      	mov	r1, sp
    b5b0:	4798      	blx	r3
    b5b2:	4605      	mov	r5, r0
    b5b4:	e7ba      	b.n	b52c <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    b5b6:	4602      	mov	r2, r0
    b5b8:	2126      	movs	r1, #38	; 0x26
    b5ba:	4620      	mov	r0, r4
    b5bc:	f7ff fd6a 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b5c0:	2800      	cmp	r0, #0
    b5c2:	d1c9      	bne.n	b558 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    b5c4:	f8df 8058 	ldr.w	r8, [pc, #88]	; b620 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    b5c8:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    b5cc:	f104 0904 	add.w	r9, r4, #4
    b5d0:	f8d8 3000 	ldr.w	r3, [r8]
    b5d4:	441f      	add	r7, r3
    b5d6:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    b5d8:	e004      	b.n	b5e4 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    b5da:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b5de:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    b5e0:	041b      	lsls	r3, r3, #16
    b5e2:	d417      	bmi.n	b614 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    b5e4:	4648      	mov	r0, r9
    b5e6:	f001 fc05 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b5ea:	28ff      	cmp	r0, #255	; 0xff
    b5ec:	4606      	mov	r6, r0
    b5ee:	d1f4      	bne.n	b5da <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    b5f0:	7ca3      	ldrb	r3, [r4, #18]
    b5f2:	2b00      	cmp	r3, #0
    b5f4:	d0b4      	beq.n	b560 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    b5f6:	2101      	movs	r1, #1
    b5f8:	7c20      	ldrb	r0, [r4, #16]
  return true;
    b5fa:	461d      	mov	r5, r3
    b5fc:	f001 fb3a 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b600:	4631      	mov	r1, r6
    b602:	4648      	mov	r0, r9
    b604:	f001 fc14 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b608:	4648      	mov	r0, r9
    b60a:	f001 fbc7 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b60e:	2300      	movs	r3, #0
    b610:	74a3      	strb	r3, [r4, #18]
}
    b612:	e7a5      	b.n	b560 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    b614:	2328      	movs	r3, #40	; 0x28
    b616:	7463      	strb	r3, [r4, #17]
    goto fail;
    b618:	e7a0      	b.n	b55c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    b61a:	bf00      	nop
    b61c:	0000b625 	.word	0x0000b625
    b620:	20025b88 	.word	0x20025b88

0000b624 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    b624:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b626:	2200      	movs	r2, #0
    b628:	b082      	sub	sp, #8
    b62a:	460e      	mov	r6, r1
    b62c:	2109      	movs	r1, #9
    b62e:	4604      	mov	r4, r0
    b630:	f7ff fd30 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b634:	b1b0      	cbz	r0, b664 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    b636:	231b      	movs	r3, #27
    b638:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b63a:	7ca0      	ldrb	r0, [r4, #18]
    b63c:	b908      	cbnz	r0, b642 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    b63e:	b002      	add	sp, #8
    b640:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b642:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b644:	7c20      	ldrb	r0, [r4, #16]
    b646:	2101      	movs	r1, #1
    b648:	f001 fb14 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b64c:	21ff      	movs	r1, #255	; 0xff
    b64e:	4628      	mov	r0, r5
    b650:	f001 fbee 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b654:	4628      	mov	r0, r5
    b656:	f001 fba1 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b65a:	2300      	movs	r3, #0
  return false;
    b65c:	4618      	mov	r0, r3
    m_spiActive = false;
    b65e:	74a3      	strb	r3, [r4, #18]
  }
    b660:	b002      	add	sp, #8
    b662:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b664:	4605      	mov	r5, r0
    b666:	2210      	movs	r2, #16
    b668:	4631      	mov	r1, r6
    b66a:	4620      	mov	r0, r4
    b66c:	f7ff fc68 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b670:	2800      	cmp	r0, #0
    b672:	d0e2      	beq.n	b63a <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    b674:	7ca6      	ldrb	r6, [r4, #18]
    b676:	2e00      	cmp	r6, #0
    b678:	d0e1      	beq.n	b63e <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    b67a:	7c20      	ldrb	r0, [r4, #16]
    b67c:	2101      	movs	r1, #1
    b67e:	f001 faf9 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b682:	1d20      	adds	r0, r4, #4
    b684:	21ff      	movs	r1, #255	; 0xff
    b686:	9001      	str	r0, [sp, #4]
    b688:	f001 fbd2 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b68c:	9801      	ldr	r0, [sp, #4]
    b68e:	f001 fb85 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
}
    b692:	4630      	mov	r0, r6
    m_spiActive = false;
    b694:	74a5      	strb	r5, [r4, #18]
  }
    b696:	b002      	add	sp, #8
    b698:	bd70      	pop	{r4, r5, r6, pc}
    b69a:	bf00      	nop

0000b69c <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    b69c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b69e:	2200      	movs	r2, #0
    b6a0:	b082      	sub	sp, #8
    b6a2:	460e      	mov	r6, r1
    b6a4:	210a      	movs	r1, #10
    b6a6:	4604      	mov	r4, r0
    b6a8:	f7ff fcf4 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b6ac:	b1b0      	cbz	r0, b6dc <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    b6ae:	231b      	movs	r3, #27
    b6b0:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b6b2:	7ca0      	ldrb	r0, [r4, #18]
    b6b4:	b908      	cbnz	r0, b6ba <SharedSpiCard::readCID(CID*)+0x1e>
  }
    b6b6:	b002      	add	sp, #8
    b6b8:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b6ba:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b6bc:	7c20      	ldrb	r0, [r4, #16]
    b6be:	2101      	movs	r1, #1
    b6c0:	f001 fad8 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b6c4:	21ff      	movs	r1, #255	; 0xff
    b6c6:	4628      	mov	r0, r5
    b6c8:	f001 fbb2 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b6cc:	4628      	mov	r0, r5
    b6ce:	f001 fb65 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b6d2:	2300      	movs	r3, #0
  return false;
    b6d4:	4618      	mov	r0, r3
    m_spiActive = false;
    b6d6:	74a3      	strb	r3, [r4, #18]
  }
    b6d8:	b002      	add	sp, #8
    b6da:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b6dc:	4605      	mov	r5, r0
    b6de:	2210      	movs	r2, #16
    b6e0:	4631      	mov	r1, r6
    b6e2:	4620      	mov	r0, r4
    b6e4:	f7ff fc2c 	bl	af40 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b6e8:	2800      	cmp	r0, #0
    b6ea:	d0e2      	beq.n	b6b2 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    b6ec:	7ca6      	ldrb	r6, [r4, #18]
    b6ee:	2e00      	cmp	r6, #0
    b6f0:	d0e1      	beq.n	b6b6 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    b6f2:	7c20      	ldrb	r0, [r4, #16]
    b6f4:	2101      	movs	r1, #1
    b6f6:	f001 fabd 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b6fa:	1d20      	adds	r0, r4, #4
    b6fc:	21ff      	movs	r1, #255	; 0xff
    b6fe:	9001      	str	r0, [sp, #4]
    b700:	f001 fb96 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b704:	9801      	ldr	r0, [sp, #4]
    b706:	f001 fb49 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
}
    b70a:	4630      	mov	r0, r6
    m_spiActive = false;
    b70c:	74a5      	strb	r5, [r4, #18]
  }
    b70e:	b002      	add	sp, #8
    b710:	bd70      	pop	{r4, r5, r6, pc}
    b712:	bf00      	nop

0000b714 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    b714:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    b716:	1d05      	adds	r5, r0, #4
    b718:	4616      	mov	r6, r2
    b71a:	4604      	mov	r4, r0
    b71c:	4628      	mov	r0, r5
    b71e:	f001 fb87 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    b722:	f44f 7200 	mov.w	r2, #512	; 0x200
    b726:	4631      	mov	r1, r6
    b728:	4628      	mov	r0, r5
    b72a:	f001 fb8b 	bl	ce44 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    b72e:	21ff      	movs	r1, #255	; 0xff
    b730:	4628      	mov	r0, r5
    b732:	f001 fb7d 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    b736:	21ff      	movs	r1, #255	; 0xff
    b738:	4628      	mov	r0, r5
    b73a:	f001 fb79 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b73e:	4628      	mov	r0, r5
    b740:	f001 fb58 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b744:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    b748:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b74a:	2b05      	cmp	r3, #5
    b74c:	d004      	beq.n	b758 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    b74e:	2320      	movs	r3, #32
  if (m_spiActive) {
    b750:	7ca0      	ldrb	r0, [r4, #18]
    b752:	7463      	strb	r3, [r4, #17]
    b754:	b910      	cbnz	r0, b75c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    b756:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    b758:	2001      	movs	r0, #1
}
    b75a:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    b75c:	7c20      	ldrb	r0, [r4, #16]
    b75e:	2101      	movs	r1, #1
    b760:	f001 fa88 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b764:	21ff      	movs	r1, #255	; 0xff
    b766:	4628      	mov	r0, r5
    b768:	f001 fb62 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b76c:	4628      	mov	r0, r5
    b76e:	f001 fb15 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b772:	2300      	movs	r3, #0
}
    b774:	4618      	mov	r0, r3
    m_spiActive = false;
    b776:	74a3      	strb	r3, [r4, #18]
}
    b778:	bd70      	pop	{r4, r5, r6, pc}
    b77a:	bf00      	nop

0000b77c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b780:	4d17      	ldr	r5, [pc, #92]	; (b7e0 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    b782:	4606      	mov	r6, r0
    b784:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    b786:	f100 0804 	add.w	r8, r0, #4
    b78a:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    b78c:	f504 7416 	add.w	r4, r4, #600	; 0x258
    b790:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b792:	e003      	b.n	b79c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    b794:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    b796:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b798:	041b      	lsls	r3, r3, #16
    b79a:	d40c      	bmi.n	b7b6 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    b79c:	4640      	mov	r0, r8
    b79e:	f001 fb29 	bl	cdf4 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b7a2:	28ff      	cmp	r0, #255	; 0xff
    b7a4:	d1f6      	bne.n	b794 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    b7a6:	463a      	mov	r2, r7
    b7a8:	21fc      	movs	r1, #252	; 0xfc
    b7aa:	4630      	mov	r0, r6
    b7ac:	f7ff ffb2 	bl	b714 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b7b0:	b118      	cbz	r0, b7ba <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    b7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    b7b6:	2324      	movs	r3, #36	; 0x24
    b7b8:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    b7ba:	7cb0      	ldrb	r0, [r6, #18]
    b7bc:	2800      	cmp	r0, #0
    b7be:	d0f8      	beq.n	b7b2 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    b7c0:	7c30      	ldrb	r0, [r6, #16]
    b7c2:	2101      	movs	r1, #1
    b7c4:	f001 fa56 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b7c8:	21ff      	movs	r1, #255	; 0xff
    b7ca:	4640      	mov	r0, r8
    b7cc:	f001 fb30 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b7d0:	4640      	mov	r0, r8
    b7d2:	f001 fae3 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b7d6:	2300      	movs	r3, #0
}
    b7d8:	4618      	mov	r0, r3
    m_spiActive = false;
    b7da:	74b3      	strb	r3, [r6, #18]
}
    b7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7e0:	20025b88 	.word	0x20025b88

0000b7e4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b7e4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b7e6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b7ea:	4616      	mov	r6, r2
    b7ec:	4a22      	ldr	r2, [pc, #136]	; (b878 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    b7ee:	b082      	sub	sp, #8
    b7f0:	4604      	mov	r4, r0
    b7f2:	460d      	mov	r5, r1
    b7f4:	4293      	cmp	r3, r2
    b7f6:	d13c      	bne.n	b872 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    b7f8:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    b7fa:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    b7fc:	f04f 0118 	mov.w	r1, #24
    b800:	4620      	mov	r0, r4
    sector <<= 9;
    b802:	bf18      	it	ne
    b804:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    b806:	462a      	mov	r2, r5
    b808:	f7ff fc44 	bl	b094 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b80c:	4605      	mov	r5, r0
    b80e:	b1b0      	cbz	r0, b83e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    b810:	230d      	movs	r3, #13
    b812:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b814:	7ca0      	ldrb	r0, [r4, #18]
    b816:	b908      	cbnz	r0, b81c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    b818:	b002      	add	sp, #8
    b81a:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b81c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b81e:	7c20      	ldrb	r0, [r4, #16]
    b820:	2101      	movs	r1, #1
    b822:	f001 fa27 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b826:	21ff      	movs	r1, #255	; 0xff
    b828:	4628      	mov	r0, r5
    b82a:	f001 fb01 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b82e:	4628      	mov	r0, r5
    b830:	f001 fab4 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b834:	2300      	movs	r3, #0
  return false;
    b836:	4618      	mov	r0, r3
    m_spiActive = false;
    b838:	74a3      	strb	r3, [r4, #18]
}
    b83a:	b002      	add	sp, #8
    b83c:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    b83e:	4632      	mov	r2, r6
    b840:	21fe      	movs	r1, #254	; 0xfe
    b842:	4620      	mov	r0, r4
    b844:	f7ff ff66 	bl	b714 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b848:	2800      	cmp	r0, #0
    b84a:	d0e3      	beq.n	b814 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    b84c:	7ca6      	ldrb	r6, [r4, #18]
    b84e:	2e00      	cmp	r6, #0
    b850:	d0e2      	beq.n	b818 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    b852:	7c20      	ldrb	r0, [r4, #16]
    b854:	2101      	movs	r1, #1
    b856:	f001 fa0d 	bl	cc74 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b85a:	1d20      	adds	r0, r4, #4
    b85c:	21ff      	movs	r1, #255	; 0xff
    b85e:	9001      	str	r0, [sp, #4]
    b860:	f001 fae6 	bl	ce30 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b864:	9801      	ldr	r0, [sp, #4]
    b866:	f001 fa99 	bl	cd9c <SdSpiArduinoDriver::deactivate()>
  return true;
    b86a:	4630      	mov	r0, r6
    m_spiActive = false;
    b86c:	74a5      	strb	r5, [r4, #18]
}
    b86e:	b002      	add	sp, #8
    b870:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    b872:	4798      	blx	r3
    b874:	e7c1      	b.n	b7fa <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    b876:	bf00      	nop
    b878:	0000ad39 	.word	0x0000ad39

0000b87c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b87c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    b87e:	7f04      	ldrb	r4, [r0, #28]
    b880:	b134      	cbz	r4, b890 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    b882:	6804      	ldr	r4, [r0, #0]
    b884:	2301      	movs	r3, #1
    b886:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    b888:	46a4      	mov	ip, r4
}
    b88a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    b88e:	4760      	bx	ip
}
    b890:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    b894:	f7ff bfa6 	b.w	b7e4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000b898 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    b898:	2000      	movs	r0, #0
    b89a:	4770      	bx	lr

0000b89c <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    b89c:	2000      	movs	r0, #0
    b89e:	4770      	bx	lr

0000b8a0 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    b8a0:	2000      	movs	r0, #0
    b8a2:	4770      	bx	lr

0000b8a4 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    b8a4:	4770      	bx	lr
    b8a6:	bf00      	nop

0000b8a8 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    b8a8:	4b08      	ldr	r3, [pc, #32]	; (b8cc <sdIrs()+0x24>)
    b8aa:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b8ac:	4a08      	ldr	r2, [pc, #32]	; (b8d0 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b8ae:	4809      	ldr	r0, [pc, #36]	; (b8d4 <sdIrs()+0x2c>)
static void sdIrs() {
    b8b0:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    b8b2:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    b8b4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    b8b6:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b8b8:	6812      	ldr	r2, [r2, #0]
}
    b8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    b8be:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    b8c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b8c2:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    b8c6:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    b8c8:	7001      	strb	r1, [r0, #0]
}
    b8ca:	4770      	bx	lr
    b8cc:	402c0000 	.word	0x402c0000
    b8d0:	20024cd8 	.word	0x20024cd8
    b8d4:	20025bd0 	.word	0x20025bd0

0000b8d8 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b8d8:	4b03      	ldr	r3, [pc, #12]	; (b8e8 <isBusyDat()+0x10>)
    b8da:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b8dc:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    b8e0:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b8e4:	4770      	bx	lr
    b8e6:	bf00      	nop
    b8e8:	402c0000 	.word	0x402c0000

0000b8ec <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    b8ec:	4b01      	ldr	r3, [pc, #4]	; (b8f4 <isBusyDMA()+0x8>)
    b8ee:	7818      	ldrb	r0, [r3, #0]
}
    b8f0:	4770      	bx	lr
    b8f2:	bf00      	nop
    b8f4:	20025bd0 	.word	0x20025bd0

0000b8f8 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b8f8:	4a2b      	ldr	r2, [pc, #172]	; (b9a8 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b8fa:	4b2c      	ldr	r3, [pc, #176]	; (b9ac <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b8fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b8fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b902:	492b      	ldr	r1, [pc, #172]	; (b9b0 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b904:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b90c:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    b90e:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b910:	4c28      	ldr	r4, [pc, #160]	; (b9b4 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b912:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b916:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    b91a:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b91e:	089b      	lsrs	r3, r3, #2
    b920:	fbb1 fef3 	udiv	lr, r1, r3
    b924:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b928:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    b92c:	d235      	bcs.n	b99a <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    b92e:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    b930:	461e      	mov	r6, r3
    b932:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b934:	011a      	lsls	r2, r3, #4
    b936:	fbbe f2f2 	udiv	r2, lr, r2
    b93a:	4282      	cmp	r2, r0
    b93c:	d901      	bls.n	b942 <setSdclk(unsigned long)+0x4a>
    b93e:	2bff      	cmp	r3, #255	; 0xff
    b940:	d9f6      	bls.n	b930 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b942:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b946:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b948:	4290      	cmp	r0, r2
    b94a:	d22a      	bcs.n	b9a2 <setSdclk(unsigned long)+0xaa>
    b94c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b950:	2201      	movs	r2, #1
    b952:	e000      	b.n	b956 <setSdclk(unsigned long)+0x5e>
    b954:	46a4      	mov	ip, r4
    dvs++;
    b956:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b958:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    b95c:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b95e:	fbbe f1fc 	udiv	r1, lr, ip
    b962:	4281      	cmp	r1, r0
    b964:	d917      	bls.n	b996 <setSdclk(unsigned long)+0x9e>
    b966:	2a10      	cmp	r2, #16
    b968:	d1f4      	bne.n	b954 <setSdclk(unsigned long)+0x5c>
    b96a:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b96c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b970:	4911      	ldr	r1, [pc, #68]	; (b9b8 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b972:	4a12      	ldr	r2, [pc, #72]	; (b9bc <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b974:	fb03 fc0c 	mul.w	ip, r3, ip
    b978:	fbbe f3fc 	udiv	r3, lr, ip
    b97c:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b97e:	4b10      	ldr	r3, [pc, #64]	; (b9c0 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b980:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b982:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b984:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b986:	4333      	orrs	r3, r6
    b988:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b98c:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    b98e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    b990:	071b      	lsls	r3, r3, #28
    b992:	d5fc      	bpl.n	b98e <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    b994:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b996:	012d      	lsls	r5, r5, #4
    b998:	e7e8      	b.n	b96c <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b99a:	4672      	mov	r2, lr
    b99c:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    b99e:	2301      	movs	r3, #1
    b9a0:	e7d2      	b.n	b948 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b9a2:	469c      	mov	ip, r3
    b9a4:	2500      	movs	r5, #0
    b9a6:	e7e1      	b.n	b96c <setSdclk(unsigned long)+0x74>
    b9a8:	400fc000 	.word	0x400fc000
    b9ac:	400d8000 	.word	0x400d8000
    b9b0:	5e69ec00 	.word	0x5e69ec00
    b9b4:	aaaaaaab 	.word	0xaaaaaaab
    b9b8:	200183d0 	.word	0x200183d0
    b9bc:	402c0000 	.word	0x402c0000
    b9c0:	fff0000f 	.word	0xfff0000f

0000b9c4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    b9c4:	4b01      	ldr	r3, [pc, #4]	; (b9cc <SdioCard::errorCode() const+0x8>)
}
    b9c6:	7818      	ldrb	r0, [r3, #0]
    b9c8:	4770      	bx	lr
    b9ca:	bf00      	nop
    b9cc:	20009574 	.word	0x20009574

0000b9d0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    b9d0:	4b01      	ldr	r3, [pc, #4]	; (b9d8 <SdioCard::errorData() const+0x8>)
    b9d2:	6818      	ldr	r0, [r3, #0]
}
    b9d4:	4770      	bx	lr
    b9d6:	bf00      	nop
    b9d8:	20024cd8 	.word	0x20024cd8

0000b9dc <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    b9dc:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    b9de:	4c07      	ldr	r4, [pc, #28]	; (b9fc <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    b9e0:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    b9e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b9e4:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    b9e8:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    b9ea:	f8cc 1004 	str.w	r1, [ip, #4]
    b9ee:	f8cc 2008 	str.w	r2, [ip, #8]
    b9f2:	f8cc 300c 	str.w	r3, [ip, #12]
}
    b9f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b9fa:	4770      	bx	lr
    b9fc:	200245ec 	.word	0x200245ec

0000ba00 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    ba00:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    ba02:	4c07      	ldr	r4, [pc, #28]	; (ba20 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    ba04:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    ba06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ba08:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    ba0c:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    ba0e:	f8cc 1004 	str.w	r1, [ip, #4]
    ba12:	f8cc 2008 	str.w	r2, [ip, #8]
    ba16:	f8cc 300c 	str.w	r3, [ip, #12]
}
    ba1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ba1e:	4770      	bx	lr
    ba20:	200245fc 	.word	0x200245fc

0000ba24 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    ba24:	4b02      	ldr	r3, [pc, #8]	; (ba30 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    ba26:	2001      	movs	r0, #1
  *ocr = m_ocr;
    ba28:	681b      	ldr	r3, [r3, #0]
    ba2a:	600b      	str	r3, [r1, #0]
}
    ba2c:	4770      	bx	lr
    ba2e:	bf00      	nop
    ba30:	2002460c 	.word	0x2002460c

0000ba34 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    ba34:	4770      	bx	lr
    ba36:	bf00      	nop

0000ba38 <SdioCard::~SdioCard()>:
    ba38:	b510      	push	{r4, lr}
    ba3a:	4604      	mov	r4, r0
    ba3c:	210c      	movs	r1, #12
    ba3e:	f002 fe47 	bl	e6d0 <operator delete(void*, unsigned int)>
    ba42:	4620      	mov	r0, r4
    ba44:	bd10      	pop	{r4, pc}
    ba46:	bf00      	nop

0000ba48 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    ba48:	4b04      	ldr	r3, [pc, #16]	; (ba5c <SdioCard::type() const+0x14>)
    ba4a:	781b      	ldrb	r3, [r3, #0]
    ba4c:	b123      	cbz	r3, ba58 <SdioCard::type() const+0x10>
    ba4e:	4b04      	ldr	r3, [pc, #16]	; (ba60 <SdioCard::type() const+0x18>)
    ba50:	7818      	ldrb	r0, [r3, #0]
    ba52:	3002      	adds	r0, #2
    ba54:	b2c0      	uxtb	r0, r0
    ba56:	4770      	bx	lr
    ba58:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    ba5a:	4770      	bx	lr
    ba5c:	20025bcd 	.word	0x20025bcd
    ba60:	20025bce 	.word	0x20025bce

0000ba64 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    ba64:	4b18      	ldr	r3, [pc, #96]	; (bac8 <SdioCard::sectorCount()+0x64>)
    ba66:	781a      	ldrb	r2, [r3, #0]
    ba68:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    ba6c:	d00f      	beq.n	ba8e <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    ba6e:	2a40      	cmp	r2, #64	; 0x40
    ba70:	d001      	beq.n	ba76 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    ba72:	2000      	movs	r0, #0
}
    ba74:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ba76:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ba78:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ba7a:	7a19      	ldrb	r1, [r3, #8]
    ba7c:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ba7e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ba82:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    ba86:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    ba8a:	0280      	lsls	r0, r0, #10
    ba8c:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ba8e:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ba90:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ba92:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ba94:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ba98:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ba9c:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    baa0:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    baa2:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    baa4:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    baa8:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    baaa:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    baae:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    bab2:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    bab4:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    bab8:	3001      	adds	r0, #1
    baba:	f003 030f 	and.w	r3, r3, #15
    babe:	4413      	add	r3, r2
    bac0:	3b07      	subs	r3, #7
    bac2:	4098      	lsls	r0, r3
}
    bac4:	f85d fb04 	ldr.w	pc, [sp], #4
    bac8:	200245fc 	.word	0x200245fc

0000bacc <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bacc:	4a40      	ldr	r2, [pc, #256]	; (bbd0 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bace:	2005      	movs	r0, #5
    bad0:	4940      	ldr	r1, [pc, #256]	; (bbd4 <initSDHC()+0x108>)
static void initSDHC() {
    bad2:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bad4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    bad8:	4b3f      	ldr	r3, [pc, #252]	; (bbd8 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bada:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    bade:	4d3f      	ldr	r5, [pc, #252]	; (bbdc <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    bae0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    bae4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    bae8:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    baec:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    baf0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    baf4:	f044 0418 	orr.w	r4, r4, #24
    baf8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    bafc:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    bb00:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    bb04:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    bb08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    bb0c:	f042 020c 	orr.w	r2, r2, #12
    bb10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    bb14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bb16:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    bb1a:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    bb1c:	69da      	ldr	r2, [r3, #28]
    bb1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    bb22:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    bb24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bb26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    bb2a:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bb2c:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    bb30:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    bb34:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    bb38:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    bb3c:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    bb40:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    bb44:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bb46:	4b26      	ldr	r3, [pc, #152]	; (bbe0 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    bb48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    bb4c:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    bb4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    bb50:	4313      	orrs	r3, r2
    bb52:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    bb54:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    bb56:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    bb5a:	d1fb      	bne.n	bb54 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    bb5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    bb60:	f7ff feca 	bl	b8f8 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bb64:	4b1b      	ldr	r3, [pc, #108]	; (bbd4 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    bb66:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    bb6a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    bb6e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bb72:	481c      	ldr	r0, [pc, #112]	; (bbe4 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    bb74:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    bb78:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    bb7c:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    bb80:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    bb84:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    bb88:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    bb8c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    bb90:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    bb94:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    bb98:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    bb9c:	4912      	ldr	r1, [pc, #72]	; (bbe8 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    bb9e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    bba2:	4b12      	ldr	r3, [pc, #72]	; (bbec <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    bba4:	6368      	str	r0, [r5, #52]	; 0x34
    bba6:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bbaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bbae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    bbb2:	490f      	ldr	r1, [pc, #60]	; (bbf0 <initSDHC()+0x124>)
    bbb4:	2060      	movs	r0, #96	; 0x60
    bbb6:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    bbba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    bbbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    bbc0:	4a06      	ldr	r2, [pc, #24]	; (bbdc <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    bbc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    bbc6:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    bbc8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    bbca:	011b      	lsls	r3, r3, #4
    bbcc:	d4fc      	bmi.n	bbc8 <initSDHC()+0xfc>
}
    bbce:	bd38      	pop	{r3, r4, r5, pc}
    bbd0:	400d8000 	.word	0x400d8000
    bbd4:	401f8000 	.word	0x401f8000
    bbd8:	400fc000 	.word	0x400fc000
    bbdc:	402c0000 	.word	0x402c0000
    bbe0:	01008000 	.word	0x01008000
    bbe4:	117f000b 	.word	0x117f000b
    bbe8:	20009800 	.word	0x20009800
    bbec:	0000b8a9 	.word	0x0000b8a9
    bbf0:	e000e400 	.word	0xe000e400

0000bbf4 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    bbf8:	f002 fa20 	bl	e03c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bbfc:	4e17      	ldr	r6, [pc, #92]	; (bc5c <waitTransferComplete() [clone .part.0]+0x68>)
    bbfe:	4d18      	ldr	r5, [pc, #96]	; (bc60 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    bc00:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc02:	f8df 8074 	ldr.w	r8, [pc, #116]	; bc78 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    bc06:	e004      	b.n	bc12 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc08:	f002 fa18 	bl	e03c <micros>
    bc0c:	1bc0      	subs	r0, r0, r7
    bc0e:	4540      	cmp	r0, r8
    bc10:	d81b      	bhi.n	bc4a <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bc12:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    bc14:	402c      	ands	r4, r5
    bc16:	d0f7      	beq.n	bc08 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    bc18:	4a12      	ldr	r2, [pc, #72]	; (bc64 <waitTransferComplete() [clone .part.0]+0x70>)
    bc1a:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    bc1c:	4b12      	ldr	r3, [pc, #72]	; (bc68 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    bc1e:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    bc20:	6b32      	ldr	r2, [r6, #48]	; 0x30
    bc22:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bc24:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bc26:	4a11      	ldr	r2, [pc, #68]	; (bc6c <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    bc28:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bc2a:	681b      	ldr	r3, [r3, #0]
    bc2c:	4213      	tst	r3, r2
    bc2e:	d009      	beq.n	bc44 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    bc30:	490f      	ldr	r1, [pc, #60]	; (bc70 <waitTransferComplete() [clone .part.0]+0x7c>)
    bc32:	241f      	movs	r4, #31
  m_errorLine = line;
    bc34:	4b0f      	ldr	r3, [pc, #60]	; (bc74 <waitTransferComplete() [clone .part.0]+0x80>)
    bc36:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    bc3a:	2000      	movs	r0, #0
  m_errorCode = code;
    bc3c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bc3e:	601a      	str	r2, [r3, #0]
}
    bc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    bc44:	2001      	movs	r0, #1
}
    bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    bc4a:	4a06      	ldr	r2, [pc, #24]	; (bc64 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    bc4c:	4b06      	ldr	r3, [pc, #24]	; (bc68 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    bc4e:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    bc50:	6b32      	ldr	r2, [r6, #48]	; 0x30
    bc52:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bc54:	681b      	ldr	r3, [r3, #0]
    bc56:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    bc58:	e7ea      	b.n	bc30 <waitTransferComplete() [clone .part.0]+0x3c>
    bc5a:	bf00      	nop
    bc5c:	402c0000 	.word	0x402c0000
    bc60:	117f0002 	.word	0x117f0002
    bc64:	20025bcf 	.word	0x20025bcf
    bc68:	20024cd8 	.word	0x20024cd8
    bc6c:	117f0000 	.word	0x117f0000
    bc70:	20009574 	.word	0x20009574
    bc74:	200183d8 	.word	0x200183d8
    bc78:	000f4240 	.word	0x000f4240

0000bc7c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    bc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    bc80:	4c26      	ldr	r4, [pc, #152]	; (bd1c <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    bc82:	460f      	mov	r7, r1
  if (!m_transferActive) {
    bc84:	7823      	ldrb	r3, [r4, #0]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d138      	bne.n	bcfc <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    bc8a:	4b25      	ldr	r3, [pc, #148]	; (bd20 <SdioCard::writeData(unsigned char const*)+0xa4>)
    bc8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bc8e:	05d2      	lsls	r2, r2, #23
    bc90:	d52b      	bpl.n	bcea <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bc92:	4d23      	ldr	r5, [pc, #140]	; (bd20 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc94:	f8df 8094 	ldr.w	r8, [pc, #148]	; bd2c <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bc98:	6aab      	ldr	r3, [r5, #40]	; 0x28
    bc9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    bc9e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    bca0:	f002 f9cc 	bl	e03c <micros>
    bca4:	4606      	mov	r6, r0
  while (fcn()) {
    bca6:	e004      	b.n	bcb2 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bca8:	f002 f9c8 	bl	e03c <micros>
    bcac:	1b80      	subs	r0, r0, r6
    bcae:	4540      	cmp	r0, r8
    bcb0:	d82a      	bhi.n	bd08 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    bcb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    bcb4:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    bcb8:	d0f6      	beq.n	bca8 <SdioCard::writeData(unsigned char const*)+0x2c>
    bcba:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    bcbe:	4818      	ldr	r0, [pc, #96]	; (bd20 <SdioCard::writeData(unsigned char const*)+0xa4>)
    bcc0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    bcc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
    bcc6:	055b      	lsls	r3, r3, #21
    bcc8:	d5fc      	bpl.n	bcc4 <SdioCard::writeData(unsigned char const*)+0x48>
    bcca:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    bcce:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    bcd2:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    bcd4:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    bcd6:	d1fa      	bne.n	bcce <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    bcd8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    bcdc:	45bc      	cmp	ip, r7
    bcde:	d1f1      	bne.n	bcc4 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    bce0:	2301      	movs	r3, #1
  return true;
    bce2:	4618      	mov	r0, r3
  m_transferActive = true;
    bce4:	7023      	strb	r3, [r4, #0]
}
    bce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bcea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    bcf0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    bcf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bcf4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bcf8:	629a      	str	r2, [r3, #40]	; 0x28
    bcfa:	e7ca      	b.n	bc92 <SdioCard::writeData(unsigned char const*)+0x16>
    bcfc:	f7ff ff7a 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bd00:	2800      	cmp	r0, #0
    bd02:	d1c2      	bne.n	bc8a <SdioCard::writeData(unsigned char const*)+0xe>
}
    bd04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    bd08:	4906      	ldr	r1, [pc, #24]	; (bd24 <SdioCard::writeData(unsigned char const*)+0xa8>)
    bd0a:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    bd0c:	4b06      	ldr	r3, [pc, #24]	; (bd28 <SdioCard::writeData(unsigned char const*)+0xac>)
    bd0e:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    bd12:	4648      	mov	r0, r9
  m_errorCode = code;
    bd14:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bd16:	601a      	str	r2, [r3, #0]
}
    bd18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bd1c:	20025bcf 	.word	0x20025bcf
    bd20:	402c0000 	.word	0x402c0000
    bd24:	20009574 	.word	0x20009574
    bd28:	200183d8 	.word	0x200183d8
    bd2c:	000f4240 	.word	0x000f4240

0000bd30 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd34:	4607      	mov	r7, r0
    bd36:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    bd38:	4c1f      	ldr	r4, [pc, #124]	; (bdb8 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    bd3a:	f002 f97f 	bl	e03c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd3e:	4e1f      	ldr	r6, [pc, #124]	; (bdbc <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bd40:	4605      	mov	r5, r0
  while (fcn()) {
    bd42:	e004      	b.n	bd4e <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd44:	f002 f97a 	bl	e03c <micros>
    bd48:	1b43      	subs	r3, r0, r5
    bd4a:	42b3      	cmp	r3, r6
    bd4c:	d824      	bhi.n	bd98 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    bd4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bd50:	07d9      	lsls	r1, r3, #31
    bd52:	d4f7      	bmi.n	bd44 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bd54:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    bd56:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bd5a:	d420      	bmi.n	bd9e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    bd5c:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    bd60:	4c15      	ldr	r4, [pc, #84]	; (bdb8 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    bd62:	4e17      	ldr	r6, [pc, #92]	; (bdc0 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    bd64:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    bd66:	f002 f969 	bl	e03c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd6a:	4f14      	ldr	r7, [pc, #80]	; (bdbc <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bd6c:	4605      	mov	r5, r0
  while (fcn()) {
    bd6e:	e004      	b.n	bd7a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd70:	f002 f964 	bl	e03c <micros>
    bd74:	1b40      	subs	r0, r0, r5
    bd76:	42b8      	cmp	r0, r7
    bd78:	d80e      	bhi.n	bd98 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    bd7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    bd7c:	4233      	tst	r3, r6
    bd7e:	d0f7      	beq.n	bd70 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    bd80:	6b22      	ldr	r2, [r4, #48]	; 0x30
    bd82:	4b10      	ldr	r3, [pc, #64]	; (bdc4 <cardCommand(unsigned long, unsigned long)+0x94>)
    bd84:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bd86:	681a      	ldr	r2, [r3, #0]
    bd88:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bd8a:	681a      	ldr	r2, [r3, #0]
    bd8c:	07d2      	lsls	r2, r2, #31
    bd8e:	d503      	bpl.n	bd98 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    bd90:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bd92:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    bd96:	d00b      	beq.n	bdb0 <cardCommand(unsigned long, unsigned long)+0x80>
    bd98:	2000      	movs	r0, #0
}
    bd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    bd9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    bda0:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    bda2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    bda6:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    bda8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    bdaa:	4313      	orrs	r3, r2
    bdac:	64a3      	str	r3, [r4, #72]	; 0x48
    bdae:	e7d5      	b.n	bd5c <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bdb0:	2001      	movs	r0, #1
}
    bdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdb6:	bf00      	nop
    bdb8:	402c0000 	.word	0x402c0000
    bdbc:	000f4240 	.word	0x000f4240
    bdc0:	000f0001 	.word	0x000f0001
    bdc4:	20024cd8 	.word	0x20024cd8

0000bdc8 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    bdc8:	4b15      	ldr	r3, [pc, #84]	; (be20 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    bdca:	b530      	push	{r4, r5, lr}
    bdcc:	460d      	mov	r5, r1
    bdce:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    bdd0:	6819      	ldr	r1, [r3, #0]
    bdd2:	f7ff ffad 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bdd6:	b308      	cbz	r0, be1c <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    bdd8:	4b12      	ldr	r3, [pc, #72]	; (be24 <readReg16(unsigned long, void*)+0x5c>)
    bdda:	f105 040f 	add.w	r4, r5, #15
    bdde:	691a      	ldr	r2, [r3, #16]
    bde0:	9200      	str	r2, [sp, #0]
    bde2:	6959      	ldr	r1, [r3, #20]
    bde4:	9101      	str	r1, [sp, #4]
    bde6:	6999      	ldr	r1, [r3, #24]
    bde8:	9102      	str	r1, [sp, #8]
    bdea:	69db      	ldr	r3, [r3, #28]
    bdec:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    bdee:	2300      	movs	r3, #0
    bdf0:	e001      	b.n	bdf6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    bdf2:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    bdf6:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    bdfa:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    bdfc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    be00:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    be04:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    be06:	fa22 f20c 	lsr.w	r2, r2, ip
    be0a:	f10e 0110 	add.w	r1, lr, #16
    be0e:	f804 2d01 	strb.w	r2, [r4, #-1]!
    be12:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    be16:	d1ec      	bne.n	bdf2 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    be18:	2300      	movs	r3, #0
    be1a:	73eb      	strb	r3, [r5, #15]
}
    be1c:	b005      	add	sp, #20
    be1e:	bd30      	pop	{r4, r5, pc}
    be20:	20024610 	.word	0x20024610
    be24:	402c0000 	.word	0x402c0000

0000be28 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    be28:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    be2a:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    be2c:	07db      	lsls	r3, r3, #31
    be2e:	d505      	bpl.n	be3c <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    be30:	4b15      	ldr	r3, [pc, #84]	; (be88 <SdioCard::isBusy()+0x60>)
    be32:	681b      	ldr	r3, [r3, #0]
    be34:	b1b3      	cbz	r3, be64 <SdioCard::isBusy()+0x3c>
}
    be36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    be3a:	4718      	bx	r3
    if (m_transferActive) {
    be3c:	4b13      	ldr	r3, [pc, #76]	; (be8c <SdioCard::isBusy()+0x64>)
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	b93b      	cbnz	r3, be52 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    be42:	4b13      	ldr	r3, [pc, #76]	; (be90 <SdioCard::isBusy()+0x68>)
    be44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    be46:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    be4a:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    be4e:	4620      	mov	r0, r4
    be50:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    be52:	4b0f      	ldr	r3, [pc, #60]	; (be90 <SdioCard::isBusy()+0x68>)
    be54:	4c0f      	ldr	r4, [pc, #60]	; (be94 <SdioCard::isBusy()+0x6c>)
    be56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be58:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    be5a:	fab4 f484 	clz	r4, r4
    be5e:	0964      	lsrs	r4, r4, #5
}
    be60:	4620      	mov	r0, r4
    be62:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    be64:	4b0c      	ldr	r3, [pc, #48]	; (be98 <SdioCard::isBusy()+0x70>)
    be66:	781c      	ldrb	r4, [r3, #0]
    be68:	2c00      	cmp	r4, #0
    be6a:	d0f0      	beq.n	be4e <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    be6c:	4b0b      	ldr	r3, [pc, #44]	; (be9c <SdioCard::isBusy()+0x74>)
    be6e:	480c      	ldr	r0, [pc, #48]	; (bea0 <SdioCard::isBusy()+0x78>)
    be70:	6819      	ldr	r1, [r3, #0]
    be72:	f7ff ff5d 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    be76:	2800      	cmp	r0, #0
    be78:	d0e9      	beq.n	be4e <SdioCard::isBusy()+0x26>
    be7a:	4b05      	ldr	r3, [pc, #20]	; (be90 <SdioCard::isBusy()+0x68>)
    be7c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    be7e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    be82:	f3c4 2400 	ubfx	r4, r4, #8, #1
    be86:	e7e2      	b.n	be4e <SdioCard::isBusy()+0x26>
    be88:	20024cd4 	.word	0x20024cd4
    be8c:	20025bcf 	.word	0x20025bcf
    be90:	402c0000 	.word	0x402c0000
    be94:	117f0002 	.word	0x117f0002
    be98:	20025bcc 	.word	0x20025bcc
    be9c:	20024610 	.word	0x20024610
    bea0:	0d1a0000 	.word	0x0d1a0000

0000bea4 <SdioCard::status()>:
uint32_t SdioCard::status() {
    bea4:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bea6:	4b04      	ldr	r3, [pc, #16]	; (beb8 <SdioCard::status()+0x14>)
    bea8:	4804      	ldr	r0, [pc, #16]	; (bebc <SdioCard::status()+0x18>)
    beaa:	6819      	ldr	r1, [r3, #0]
    beac:	f7ff ff40 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    beb0:	b108      	cbz	r0, beb6 <SdioCard::status()+0x12>
    beb2:	4b03      	ldr	r3, [pc, #12]	; (bec0 <SdioCard::status()+0x1c>)
    beb4:	6918      	ldr	r0, [r3, #16]
}
    beb6:	bd08      	pop	{r3, pc}
    beb8:	20024610 	.word	0x20024610
    bebc:	0d1a0000 	.word	0x0d1a0000
    bec0:	402c0000 	.word	0x402c0000

0000bec4 <isBusyCMD13()>:
static bool isBusyCMD13() {
    bec4:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bec6:	4b07      	ldr	r3, [pc, #28]	; (bee4 <isBusyCMD13()+0x20>)
    bec8:	4807      	ldr	r0, [pc, #28]	; (bee8 <isBusyCMD13()+0x24>)
    beca:	6819      	ldr	r1, [r3, #0]
    becc:	f7ff ff30 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bed0:	b130      	cbz	r0, bee0 <isBusyCMD13()+0x1c>
    bed2:	4b06      	ldr	r3, [pc, #24]	; (beec <isBusyCMD13()+0x28>)
    bed4:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    bed6:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    beda:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    bede:	bd08      	pop	{r3, pc}
    bee0:	2001      	movs	r0, #1
    bee2:	bd08      	pop	{r3, pc}
    bee4:	20024610 	.word	0x20024610
    bee8:	0d1a0000 	.word	0x0d1a0000
    beec:	402c0000 	.word	0x402c0000

0000bef0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    bef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    bef4:	4b29      	ldr	r3, [pc, #164]	; (bf9c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    bef6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    bef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; bfbc <SdioCard::writeStart(unsigned long)+0xcc>
    befc:	4e28      	ldr	r6, [pc, #160]	; (bfa0 <SdioCard::writeStart(unsigned long)+0xb0>)
    befe:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    bf02:	f002 f89b 	bl	e03c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf06:	4d27      	ldr	r5, [pc, #156]	; (bfa4 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    bf08:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf0a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bfc0 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf0e:	4f26      	ldr	r7, [pc, #152]	; (bfa8 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    bf10:	e006      	b.n	bf20 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bf12:	f002 f893 	bl	e03c <micros>
    bf16:	1b00      	subs	r0, r0, r4
    bf18:	42b8      	cmp	r0, r7
    bf1a:	d829      	bhi.n	bf70 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    bf1c:	f004 f93c 	bl	10198 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bf20:	6831      	ldr	r1, [r6, #0]
    bf22:	4628      	mov	r0, r5
    bf24:	f7ff ff04 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bf28:	2800      	cmp	r0, #0
    bf2a:	d0f2      	beq.n	bf12 <SdioCard::writeStart(unsigned long)+0x22>
    bf2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bf30:	05db      	lsls	r3, r3, #23
    bf32:	d5ee      	bpl.n	bf12 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    bf34:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bf36:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    bf3a:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bf3e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bf42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bf46:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bf4a:	4b18      	ldr	r3, [pc, #96]	; (bfac <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bf4c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bf50:	781b      	ldrb	r3, [r3, #0]
    bf52:	b1cb      	cbz	r3, bf88 <SdioCard::writeStart(unsigned long)+0x98>
    bf54:	4649      	mov	r1, r9
    bf56:	4816      	ldr	r0, [pc, #88]	; (bfb0 <SdioCard::writeStart(unsigned long)+0xc0>)
    bf58:	f7ff feea 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bf5c:	b930      	cbnz	r0, bf6c <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    bf5e:	4915      	ldr	r1, [pc, #84]	; (bfb4 <SdioCard::writeStart(unsigned long)+0xc4>)
    bf60:	240e      	movs	r4, #14
  m_errorLine = line;
    bf62:	4b15      	ldr	r3, [pc, #84]	; (bfb8 <SdioCard::writeStart(unsigned long)+0xc8>)
    bf64:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    bf68:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bf6a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    bf6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    bf70:	4a10      	ldr	r2, [pc, #64]	; (bfb4 <SdioCard::writeStart(unsigned long)+0xc4>)
    bf72:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bf74:	2000      	movs	r0, #0
  m_errorLine = line;
    bf76:	4b10      	ldr	r3, [pc, #64]	; (bfb8 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    bf78:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bf7a:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    bf7e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    bf82:	601a      	str	r2, [r3, #0]
}
    bf84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bf88:	ea4f 2949 	mov.w	r9, r9, lsl #9
    bf8c:	4808      	ldr	r0, [pc, #32]	; (bfb0 <SdioCard::writeStart(unsigned long)+0xc0>)
    bf8e:	4649      	mov	r1, r9
    bf90:	f7ff fece 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bf94:	2800      	cmp	r0, #0
    bf96:	d1e9      	bne.n	bf6c <SdioCard::writeStart(unsigned long)+0x7c>
    bf98:	e7e1      	b.n	bf5e <SdioCard::writeStart(unsigned long)+0x6e>
    bf9a:	bf00      	nop
    bf9c:	0000bec5 	.word	0x0000bec5
    bfa0:	20024610 	.word	0x20024610
    bfa4:	0d1a0000 	.word	0x0d1a0000
    bfa8:	000f4240 	.word	0x000f4240
    bfac:	20025bce 	.word	0x20025bce
    bfb0:	193a0020 	.word	0x193a0020
    bfb4:	20009574 	.word	0x20009574
    bfb8:	200183d8 	.word	0x200183d8
    bfbc:	20024cd4 	.word	0x20024cd4
    bfc0:	402c0000 	.word	0x402c0000

0000bfc4 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bfc8:	4c25      	ldr	r4, [pc, #148]	; (c060 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bfca:	2100      	movs	r1, #0
    bfcc:	4825      	ldr	r0, [pc, #148]	; (c064 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bfce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bfd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bfd4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bfd6:	f7ff feab 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    bfda:	4605      	mov	r5, r0
    bfdc:	b948      	cbnz	r0, bff2 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    bfde:	4922      	ldr	r1, [pc, #136]	; (c068 <SdioCard::readStop()+0xa4>)
    bfe0:	2009      	movs	r0, #9
  m_errorLine = line;
    bfe2:	4b22      	ldr	r3, [pc, #136]	; (c06c <SdioCard::readStop()+0xa8>)
    bfe4:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    bfe8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bfea:	601a      	str	r2, [r3, #0]
}
    bfec:	4628      	mov	r0, r5
    bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    bff2:	4b1f      	ldr	r3, [pc, #124]	; (c070 <SdioCard::readStop()+0xac>)
    bff4:	f8df 8080 	ldr.w	r8, [pc, #128]	; c078 <SdioCard::readStop()+0xb4>
    bff8:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    bffc:	f002 f81e 	bl	e03c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c000:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    c002:	4606      	mov	r6, r0
  while (fcn()) {
    c004:	01d8      	lsls	r0, r3, #7
    c006:	d418      	bmi.n	c03a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c008:	4f1a      	ldr	r7, [pc, #104]	; (c074 <SdioCard::readStop()+0xb0>)
    c00a:	e004      	b.n	c016 <SdioCard::readStop()+0x52>
    yield();
    c00c:	f004 f8c4 	bl	10198 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c010:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    c012:	01d9      	lsls	r1, r3, #7
    c014:	d411      	bmi.n	c03a <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c016:	f002 f811 	bl	e03c <micros>
    c01a:	1b83      	subs	r3, r0, r6
    c01c:	42bb      	cmp	r3, r7
    c01e:	d9f5      	bls.n	c00c <SdioCard::readStop()+0x48>
  m_errorCode = code;
    c020:	4a11      	ldr	r2, [pc, #68]	; (c068 <SdioCard::readStop()+0xa4>)
    c022:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c024:	2500      	movs	r5, #0
  m_errorLine = line;
    c026:	4b11      	ldr	r3, [pc, #68]	; (c06c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    c028:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c02a:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    c02e:	4628      	mov	r0, r5
      m_busyFcn = 0;
    c030:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    c034:	601a      	str	r2, [r3, #0]
}
    c036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    c03a:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    c03c:	4b08      	ldr	r3, [pc, #32]	; (c060 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    c03e:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    c042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c044:	0792      	lsls	r2, r2, #30
    c046:	d5d1      	bpl.n	bfec <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    c048:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c04a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c04c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    c04e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    c052:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    c056:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    c058:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    c05a:	629a      	str	r2, [r3, #40]	; 0x28
    c05c:	e7c6      	b.n	bfec <SdioCard::readStop()+0x28>
    c05e:	bf00      	nop
    c060:	402c0000 	.word	0x402c0000
    c064:	0cdb0000 	.word	0x0cdb0000
    c068:	20009574 	.word	0x20009574
    c06c:	200183d8 	.word	0x200183d8
    c070:	0000b8d9 	.word	0x0000b8d9
    c074:	000f4240 	.word	0x000f4240
    c078:	20024cd4 	.word	0x20024cd4

0000c07c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c080:	4682      	mov	sl, r0
    c082:	4689      	mov	r9, r1
    c084:	4e36      	ldr	r6, [pc, #216]	; (c160 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    c086:	f001 ffd9 	bl	e03c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c08a:	4d36      	ldr	r5, [pc, #216]	; (c164 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    c08c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c08e:	f8df 8100 	ldr.w	r8, [pc, #256]	; c190 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c092:	4f35      	ldr	r7, [pc, #212]	; (c168 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    c094:	e004      	b.n	c0a0 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c096:	f001 ffd1 	bl	e03c <micros>
    c09a:	1b03      	subs	r3, r0, r4
    c09c:	42bb      	cmp	r3, r7
    c09e:	d827      	bhi.n	c0f0 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c0a0:	6831      	ldr	r1, [r6, #0]
    c0a2:	4628      	mov	r0, r5
    c0a4:	f7ff fe44 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c0a8:	2800      	cmp	r0, #0
    c0aa:	d0f4      	beq.n	c096 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    c0ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c0b0:	05da      	lsls	r2, r3, #23
    c0b2:	d5f0      	bpl.n	c096 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    c0b4:	2301      	movs	r3, #1
    c0b6:	4d2d      	ldr	r5, [pc, #180]	; (c16c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    c0b8:	4f2d      	ldr	r7, [pc, #180]	; (c170 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c0ba:	4651      	mov	r1, sl
  m_dmaBusy = true;
    c0bc:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    c0be:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c0c0:	482c      	ldr	r0, [pc, #176]	; (c174 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    c0c2:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c0c4:	4b2c      	ldr	r3, [pc, #176]	; (c178 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    c0c6:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    c0ca:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c0ce:	4b2b      	ldr	r3, [pc, #172]	; (c17c <cardCMD6(unsigned long, unsigned char*)+0x100>)
    c0d0:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    c0d4:	f7ff fe2c 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c0d8:	4604      	mov	r4, r0
    c0da:	b9a0      	cbnz	r0, c106 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    c0dc:	4928      	ldr	r1, [pc, #160]	; (c180 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c0de:	2004      	movs	r0, #4
  m_errorLine = line;
    c0e0:	4b28      	ldr	r3, [pc, #160]	; (c184 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c0e2:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    c0e6:	7008      	strb	r0, [r1, #0]
}
    c0e8:	4620      	mov	r0, r4
  m_errorLine = line;
    c0ea:	601a      	str	r2, [r3, #0]
}
    c0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c0f0:	4923      	ldr	r1, [pc, #140]	; (c180 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c0f2:	200a      	movs	r0, #10
  m_errorLine = line;
    c0f4:	4b23      	ldr	r3, [pc, #140]	; (c184 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c0f6:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    c0fa:	2400      	movs	r4, #0
  m_errorCode = code;
    c0fc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c0fe:	601a      	str	r2, [r3, #0]
}
    c100:	4620      	mov	r0, r4
    c102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    c106:	4b20      	ldr	r3, [pc, #128]	; (c188 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    c108:	f8df 9088 	ldr.w	r9, [pc, #136]	; c194 <cardCMD6(unsigned long, unsigned char*)+0x118>
    c10c:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    c110:	f001 ff94 	bl	e03c <micros>
  return m_dmaBusy;
    c114:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    c116:	4606      	mov	r6, r0
  while (fcn()) {
    c118:	b1bb      	cbz	r3, c14a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c11a:	f8df 804c 	ldr.w	r8, [pc, #76]	; c168 <cardCMD6(unsigned long, unsigned char*)+0xec>
    c11e:	e003      	b.n	c128 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    c120:	f004 f83a 	bl	10198 <yield>
  return m_dmaBusy;
    c124:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    c126:	b183      	cbz	r3, c14a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c128:	f001 ff88 	bl	e03c <micros>
    c12c:	1b83      	subs	r3, r0, r6
    c12e:	4543      	cmp	r3, r8
    c130:	d9f6      	bls.n	c120 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    c132:	2300      	movs	r3, #0
    c134:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    c138:	4911      	ldr	r1, [pc, #68]	; (c180 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    c13a:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    c13c:	4b11      	ldr	r3, [pc, #68]	; (c184 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    c13e:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    c142:	2400      	movs	r4, #0
  m_errorCode = code;
    c144:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c146:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    c148:	e7da      	b.n	c100 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c14a:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    c14c:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c14e:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    c150:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c154:	d5f0      	bpl.n	c138 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    c156:	683a      	ldr	r2, [r7, #0]
    c158:	4b0c      	ldr	r3, [pc, #48]	; (c18c <cardCMD6(unsigned long, unsigned char*)+0x110>)
    c15a:	421a      	tst	r2, r3
    c15c:	d0d0      	beq.n	c100 <cardCMD6(unsigned long, unsigned char*)+0x84>
    c15e:	e7eb      	b.n	c138 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    c160:	20024610 	.word	0x20024610
    c164:	0d1a0000 	.word	0x0d1a0000
    c168:	000f4240 	.word	0x000f4240
    c16c:	20025bd0 	.word	0x20025bd0
    c170:	20024cd8 	.word	0x20024cd8
    c174:	063a0011 	.word	0x063a0011
    c178:	00010040 	.word	0x00010040
    c17c:	117f0002 	.word	0x117f0002
    c180:	20009574 	.word	0x20009574
    c184:	200183d8 	.word	0x200183d8
    c188:	0000b8ed 	.word	0x0000b8ed
    c18c:	117f0000 	.word	0x117f0000
    c190:	402c0000 	.word	0x402c0000
    c194:	20024cd4 	.word	0x20024cd4

0000c198 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    c19c:	4d32      	ldr	r5, [pc, #200]	; (c268 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    c19e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    c1a0:	7aab      	ldrb	r3, [r5, #10]
    c1a2:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    c1a6:	d112      	bne.n	c1ce <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    c1a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c1ac:	7aea      	ldrb	r2, [r5, #11]
    c1ae:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    c1b0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    c1b4:	1c62      	adds	r2, r4, #1
    c1b6:	430a      	orrs	r2, r1
    c1b8:	4213      	tst	r3, r2
    c1ba:	d008      	beq.n	c1ce <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    c1bc:	492b      	ldr	r1, [pc, #172]	; (c26c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c1be:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    c1c0:	4b2b      	ldr	r3, [pc, #172]	; (c270 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c1c2:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    c1c6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c1c8:	601a      	str	r2, [r3, #0]
}
    c1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    c1ce:	4b29      	ldr	r3, [pc, #164]	; (c274 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    c1d0:	781b      	ldrb	r3, [r3, #0]
    c1d2:	b90b      	cbnz	r3, c1d8 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    c1d4:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    c1d6:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    c1d8:	4827      	ldr	r0, [pc, #156]	; (c278 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    c1da:	f7ff fda9 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c1de:	b940      	cbnz	r0, c1f2 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    c1e0:	4922      	ldr	r1, [pc, #136]	; (c26c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c1e2:	240f      	movs	r4, #15
  m_errorLine = line;
    c1e4:	4b22      	ldr	r3, [pc, #136]	; (c270 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c1e6:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    c1ea:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c1ec:	601a      	str	r2, [r3, #0]
}
    c1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    c1f2:	4621      	mov	r1, r4
    c1f4:	4821      	ldr	r0, [pc, #132]	; (c27c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    c1f6:	f7ff fd9b 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c1fa:	b940      	cbnz	r0, c20e <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    c1fc:	491b      	ldr	r1, [pc, #108]	; (c26c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c1fe:	2410      	movs	r4, #16
  m_errorLine = line;
    c200:	4b1b      	ldr	r3, [pc, #108]	; (c270 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c202:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    c206:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c208:	601a      	str	r2, [r3, #0]
}
    c20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    c20e:	2100      	movs	r1, #0
    c210:	481b      	ldr	r0, [pc, #108]	; (c280 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    c212:	f7ff fd8d 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c216:	b938      	cbnz	r0, c228 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    c218:	4914      	ldr	r1, [pc, #80]	; (c26c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c21a:	2411      	movs	r4, #17
  m_errorLine = line;
    c21c:	4b14      	ldr	r3, [pc, #80]	; (c270 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c21e:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    c222:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c224:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    c226:	e7e2      	b.n	c1ee <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    c228:	f001 ff08 	bl	e03c <micros>
    c22c:	4e15      	ldr	r6, [pc, #84]	; (c284 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c22e:	4d16      	ldr	r5, [pc, #88]	; (c288 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    c230:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c232:	f8df 805c 	ldr.w	r8, [pc, #92]	; c290 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c236:	4f15      	ldr	r7, [pc, #84]	; (c28c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c238:	6831      	ldr	r1, [r6, #0]
    c23a:	4628      	mov	r0, r5
    c23c:	f7ff fd78 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c240:	b118      	cbz	r0, c24a <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    c242:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c246:	05db      	lsls	r3, r3, #23
    c248:	d4d1      	bmi.n	c1ee <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c24a:	f001 fef7 	bl	e03c <micros>
    c24e:	1b00      	subs	r0, r0, r4
    c250:	42b8      	cmp	r0, r7
    c252:	d9f1      	bls.n	c238 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    c254:	4905      	ldr	r1, [pc, #20]	; (c26c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    c256:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    c258:	4b05      	ldr	r3, [pc, #20]	; (c270 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    c25a:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    c25e:	2000      	movs	r0, #0
  m_errorCode = code;
    c260:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c262:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    c264:	e7c3      	b.n	c1ee <SdioCard::erase(unsigned long, unsigned long)+0x56>
    c266:	bf00      	nop
    c268:	200245fc 	.word	0x200245fc
    c26c:	20009574 	.word	0x20009574
    c270:	200183d8 	.word	0x200183d8
    c274:	20025bce 	.word	0x20025bce
    c278:	201a0000 	.word	0x201a0000
    c27c:	211a0000 	.word	0x211a0000
    c280:	261b0000 	.word	0x261b0000
    c284:	20024610 	.word	0x20024610
    c288:	0d1a0000 	.word	0x0d1a0000
    c28c:	000f4240 	.word	0x000f4240
    c290:	402c0000 	.word	0x402c0000

0000c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    c294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    c298:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    c29c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    c29e:	bf18      	it	ne
    c2a0:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    c2a2:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    c2a4:	9300      	str	r3, [sp, #0]
    c2a6:	2b00      	cmp	r3, #0
    c2a8:	bf08      	it	eq
    c2aa:	f044 0401 	orreq.w	r4, r4, #1
    c2ae:	b15c      	cbz	r4, c2c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c2b0:	4940      	ldr	r1, [pc, #256]	; (c3b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c2b2:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    c2b4:	4b40      	ldr	r3, [pc, #256]	; (c3b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    c2b6:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    c2ba:	2400      	movs	r4, #0
  m_errorCode = code;
    c2bc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c2be:	601a      	str	r2, [r3, #0]
}
    c2c0:	4620      	mov	r0, r4
    c2c2:	b003      	add	sp, #12
    c2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    c2c8:	4b3c      	ldr	r3, [pc, #240]	; (c3bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    c2ca:	4615      	mov	r5, r2
    c2cc:	4a3c      	ldr	r2, [pc, #240]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c2ce:	460e      	mov	r6, r1
    c2d0:	f8df 910c 	ldr.w	r9, [pc, #268]	; c3e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    c2d4:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c2d6:	f001 feb1 	bl	e03c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2da:	f8df 8108 	ldr.w	r8, [pc, #264]	; c3e4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    c2de:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2e0:	f8df b104 	ldr.w	fp, [pc, #260]	; c3e8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c2e4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c3d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    c2e8:	e006      	b.n	c2f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c2ea:	f001 fea7 	bl	e03c <micros>
    c2ee:	1bc0      	subs	r0, r0, r7
    c2f0:	4550      	cmp	r0, sl
    c2f2:	d844      	bhi.n	c37e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    c2f4:	f003 ff50 	bl	10198 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c2f8:	f8d9 1000 	ldr.w	r1, [r9]
    c2fc:	4640      	mov	r0, r8
    c2fe:	f7ff fd17 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c302:	2800      	cmp	r0, #0
    c304:	d0f1      	beq.n	c2ea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    c306:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    c30a:	05da      	lsls	r2, r3, #23
    c30c:	d5ed      	bpl.n	c2ea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c30e:	9a00      	ldr	r2, [sp, #0]
    c310:	4b2c      	ldr	r3, [pc, #176]	; (c3c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    c312:	492b      	ldr	r1, [pc, #172]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c314:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    c318:	2200      	movs	r2, #0
  m_dmaBusy = true;
    c31a:	4f2b      	ldr	r7, [pc, #172]	; (c3c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    c31c:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c31e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    c322:	2101      	movs	r1, #1
  m_irqstat = 0;
    c324:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c3ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    c328:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    c32a:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    c32e:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c332:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c336:	4b25      	ldr	r3, [pc, #148]	; (c3cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    c338:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c33c:	4b24      	ldr	r3, [pc, #144]	; (c3d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    c33e:	781b      	ldrb	r3, [r3, #0]
    c340:	b343      	cbz	r3, c394 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    c342:	4631      	mov	r1, r6
    c344:	9801      	ldr	r0, [sp, #4]
    c346:	f7ff fcf3 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c34a:	4681      	mov	r9, r0
    c34c:	2800      	cmp	r0, #0
    c34e:	d0b7      	beq.n	c2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    c350:	4b20      	ldr	r3, [pc, #128]	; (c3d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    c352:	4a1b      	ldr	r2, [pc, #108]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c354:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c356:	f001 fe71 	bl	e03c <micros>
  return m_dmaBusy;
    c35a:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    c35c:	4605      	mov	r5, r0
  while (fcn()) {
    c35e:	b1db      	cbz	r3, c398 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c360:	4e1d      	ldr	r6, [pc, #116]	; (c3d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    c362:	e003      	b.n	c36c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    c364:	f003 ff18 	bl	10198 <yield>
  return m_dmaBusy;
    c368:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    c36a:	b1ab      	cbz	r3, c398 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c36c:	f001 fe66 	bl	e03c <micros>
    c370:	1b40      	subs	r0, r0, r5
    c372:	42b0      	cmp	r0, r6
    c374:	d9f6      	bls.n	c364 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    c376:	2300      	movs	r3, #0
    c378:	4a11      	ldr	r2, [pc, #68]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c37a:	6013      	str	r3, [r2, #0]
      return true;
    c37c:	e7a0      	b.n	c2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    c37e:	4b0d      	ldr	r3, [pc, #52]	; (c3b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c380:	220a      	movs	r2, #10
      m_busyFcn = 0;
    c382:	2100      	movs	r1, #0
    c384:	480e      	ldr	r0, [pc, #56]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    c386:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    c388:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    c38c:	4b0a      	ldr	r3, [pc, #40]	; (c3b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    c38e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    c390:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    c392:	e795      	b.n	c2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c394:	0276      	lsls	r6, r6, #9
    c396:	e7d4      	b.n	c342 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    c398:	2300      	movs	r3, #0
    c39a:	4a09      	ldr	r2, [pc, #36]	; (c3c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c39c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c39e:	f8d8 3000 	ldr.w	r3, [r8]
    c3a2:	079b      	lsls	r3, r3, #30
    c3a4:	d58c      	bpl.n	c2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c3a6:	f8d8 2000 	ldr.w	r2, [r8]
    c3aa:	4b0c      	ldr	r3, [pc, #48]	; (c3dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    c3ac:	421a      	tst	r2, r3
    c3ae:	bf08      	it	eq
    c3b0:	464c      	moveq	r4, r9
    c3b2:	e785      	b.n	c2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c3b4:	20009574 	.word	0x20009574
    c3b8:	200183d8 	.word	0x200183d8
    c3bc:	0000bec5 	.word	0x0000bec5
    c3c0:	20024cd4 	.word	0x20024cd4
    c3c4:	1fff0000 	.word	0x1fff0000
    c3c8:	20025bd0 	.word	0x20025bd0
    c3cc:	117f0002 	.word	0x117f0002
    c3d0:	20025bce 	.word	0x20025bce
    c3d4:	0000b8ed 	.word	0x0000b8ed
    c3d8:	000f4240 	.word	0x000f4240
    c3dc:	117f0000 	.word	0x117f0000
    c3e0:	20024610 	.word	0x20024610
    c3e4:	0d1a0000 	.word	0x0d1a0000
    c3e8:	402c0000 	.word	0x402c0000
    c3ec:	20024cd8 	.word	0x20024cd8

0000c3f0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3f2:	4606      	mov	r6, r0
    c3f4:	7a00      	ldrb	r0, [r0, #8]
    c3f6:	460c      	mov	r4, r1
    c3f8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c3fa:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c3fc:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c3fe:	d413      	bmi.n	c428 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c400:	b183      	cbz	r3, c424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c402:	440f      	add	r7, r1
    c404:	e001      	b.n	c40a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    c406:	42bc      	cmp	r4, r7
    c408:	d00c      	beq.n	c424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    c40a:	6833      	ldr	r3, [r6, #0]
    c40c:	462a      	mov	r2, r5
    c40e:	4621      	mov	r1, r4
    c410:	4630      	mov	r0, r6
    c412:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    c414:	3401      	adds	r4, #1
    c416:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    c41a:	4798      	blx	r3
    c41c:	2800      	cmp	r0, #0
    c41e:	d1f2      	bne.n	c406 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    c420:	2000      	movs	r0, #0
}
    c422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c424:	2001      	movs	r0, #1
}
    c426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    c428:	0790      	lsls	r0, r2, #30
    c42a:	d012      	beq.n	c452 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c42c:	2b00      	cmp	r3, #0
    c42e:	d0f9      	beq.n	c424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c430:	440f      	add	r7, r1
    c432:	e001      	b.n	c438 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    c434:	42bc      	cmp	r4, r7
    c436:	d0f5      	beq.n	c424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    c438:	6833      	ldr	r3, [r6, #0]
    c43a:	462a      	mov	r2, r5
    c43c:	4621      	mov	r1, r4
    c43e:	4630      	mov	r0, r6
    c440:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c442:	3401      	adds	r4, #1
    c444:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    c448:	4798      	blx	r3
    c44a:	2800      	cmp	r0, #0
    c44c:	d1f2      	bne.n	c434 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    c44e:	2000      	movs	r0, #0
    c450:	e7e7      	b.n	c422 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    c452:	4806      	ldr	r0, [pc, #24]	; (c46c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    c454:	f7ff ff1e 	bl	c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c458:	2800      	cmp	r0, #0
    c45a:	d1e3      	bne.n	c424 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c45c:	4904      	ldr	r1, [pc, #16]	; (c470 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    c45e:	240c      	movs	r4, #12
  m_errorLine = line;
    c460:	4b04      	ldr	r3, [pc, #16]	; (c474 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    c462:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    c466:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c468:	601a      	str	r2, [r3, #0]
}
    c46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c46c:	123a0037 	.word	0x123a0037
    c470:	20009574 	.word	0x20009574
    c474:	200183d8 	.word	0x200183d8

0000c478 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c47a:	4606      	mov	r6, r0
    c47c:	7a00      	ldrb	r0, [r0, #8]
    c47e:	460c      	mov	r4, r1
    c480:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c482:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c484:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c486:	d413      	bmi.n	c4b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c488:	b183      	cbz	r3, c4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c48a:	440f      	add	r7, r1
    c48c:	e001      	b.n	c492 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    c48e:	42bc      	cmp	r4, r7
    c490:	d00c      	beq.n	c4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    c492:	6833      	ldr	r3, [r6, #0]
    c494:	462a      	mov	r2, r5
    c496:	4621      	mov	r1, r4
    c498:	4630      	mov	r0, r6
    c49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    c49c:	3401      	adds	r4, #1
    c49e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    c4a2:	4798      	blx	r3
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d1f2      	bne.n	c48e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    c4a8:	2000      	movs	r0, #0
}
    c4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c4ac:	2001      	movs	r0, #1
}
    c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    c4b0:	0790      	lsls	r0, r2, #30
    c4b2:	d012      	beq.n	c4da <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	d0f9      	beq.n	c4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c4b8:	440f      	add	r7, r1
    c4ba:	e001      	b.n	c4c0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    c4bc:	42bc      	cmp	r4, r7
    c4be:	d0f5      	beq.n	c4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    c4c0:	6833      	ldr	r3, [r6, #0]
    c4c2:	462a      	mov	r2, r5
    c4c4:	4621      	mov	r1, r4
    c4c6:	4630      	mov	r0, r6
    c4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c4ca:	3401      	adds	r4, #1
    c4cc:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    c4d0:	4798      	blx	r3
    c4d2:	2800      	cmp	r0, #0
    c4d4:	d1f2      	bne.n	c4bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    c4d6:	2000      	movs	r0, #0
    c4d8:	e7e7      	b.n	c4aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    c4da:	4806      	ldr	r0, [pc, #24]	; (c4f4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    c4dc:	f7ff feda 	bl	c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c4e0:	2800      	cmp	r0, #0
    c4e2:	d1e3      	bne.n	c4ac <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    c4e4:	4904      	ldr	r1, [pc, #16]	; (c4f8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    c4e6:	240e      	movs	r4, #14
  m_errorLine = line;
    c4e8:	4b04      	ldr	r3, [pc, #16]	; (c4fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    c4ea:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    c4ee:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c4f0:	601a      	str	r2, [r3, #0]
}
    c4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4f4:	193a0027 	.word	0x193a0027
    c4f8:	20009574 	.word	0x20009574
    c4fc:	200183d8 	.word	0x200183d8

0000c500 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    c504:	2500      	movs	r5, #0
  m_initDone = false;
    c506:	f8df 92c0 	ldr.w	r9, [pc, #704]	; c7c8 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    c50a:	4c9b      	ldr	r4, [pc, #620]	; (c778 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    c50c:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    c50e:	f8df 82bc 	ldr.w	r8, [pc, #700]	; c7cc <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    c512:	4e9a      	ldr	r6, [pc, #616]	; (c77c <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    c514:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    c516:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    c518:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    c51c:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    c51e:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    c522:	7035      	strb	r5, [r6, #0]
  initSDHC();
    c524:	f7ff fad2 	bl	bacc <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    c528:	4629      	mov	r1, r5
    c52a:	4628      	mov	r0, r5
    c52c:	f7ff fc00 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c530:	b950      	cbnz	r0, c548 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    c532:	2101      	movs	r1, #1
  m_errorLine = line;
    c534:	4b92      	ldr	r3, [pc, #584]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c536:	f240 228e 	movw	r2, #654	; 0x28e
    c53a:	4605      	mov	r5, r0
  m_errorCode = code;
    c53c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c53e:	601a      	str	r2, [r3, #0]
}
    c540:	4628      	mov	r0, r5
    c542:	b011      	add	sp, #68	; 0x44
    c544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c548:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    c54a:	4f8e      	ldr	r7, [pc, #568]	; (c784 <SdioCard::begin(SdioConfig)+0x284>)
    c54c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    c550:	4638      	mov	r0, r7
    c552:	f7ff fbed 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c556:	2800      	cmp	r0, #0
    c558:	d14e      	bne.n	c5f8 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    c55a:	3d01      	subs	r5, #1
    c55c:	d1f6      	bne.n	c54c <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    c55e:	7833      	ldrb	r3, [r6, #0]
    c560:	2b00      	cmp	r3, #0
    c562:	d03d      	beq.n	c5e0 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c564:	f8df b268 	ldr.w	fp, [pc, #616]	; c7d0 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    c568:	f001 fd68 	bl	e03c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c56c:	4e86      	ldr	r6, [pc, #536]	; (c788 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    c56e:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c570:	f8df a260 	ldr.w	sl, [pc, #608]	; c7d4 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c574:	4f85      	ldr	r7, [pc, #532]	; (c78c <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c576:	2100      	movs	r1, #0
    c578:	4630      	mov	r0, r6
    c57a:	f7ff fbd9 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c57e:	b950      	cbnz	r0, c596 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    c580:	2500      	movs	r5, #0
  m_errorCode = code;
    c582:	2117      	movs	r1, #23
  m_errorLine = line;
    c584:	4b7e      	ldr	r3, [pc, #504]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c586:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    c58a:	4628      	mov	r0, r5
  m_errorCode = code;
    c58c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c58e:	601a      	str	r2, [r3, #0]
}
    c590:	b011      	add	sp, #68	; 0x44
    c592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c596:	4659      	mov	r1, fp
    c598:	4650      	mov	r0, sl
    c59a:	f7ff fbc9 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c59e:	2800      	cmp	r0, #0
    c5a0:	d0ee      	beq.n	c580 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    c5a2:	f001 fd4b 	bl	e03c <micros>
    c5a6:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c5a8:	4b79      	ldr	r3, [pc, #484]	; (c790 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c5aa:	42b8      	cmp	r0, r7
    c5ac:	d8e8      	bhi.n	c580 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c5ae:	691a      	ldr	r2, [r3, #16]
    c5b0:	2a00      	cmp	r2, #0
    c5b2:	dae0      	bge.n	c576 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    c5b4:	6919      	ldr	r1, [r3, #16]
    c5b6:	4a77      	ldr	r2, [pc, #476]	; (c794 <SdioCard::begin(SdioConfig)+0x294>)
    c5b8:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    c5ba:	691b      	ldr	r3, [r3, #16]
    c5bc:	005a      	lsls	r2, r3, #1
    c5be:	d502      	bpl.n	c5c6 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    c5c0:	2301      	movs	r3, #1
    c5c2:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    c5c6:	2100      	movs	r1, #0
    c5c8:	4873      	ldr	r0, [pc, #460]	; (c798 <SdioCard::begin(SdioConfig)+0x298>)
    c5ca:	f7ff fbb1 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c5ce:	4605      	mov	r5, r0
    c5d0:	bb10      	cbnz	r0, c618 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    c5d2:	2102      	movs	r1, #2
  m_errorLine = line;
    c5d4:	4b6a      	ldr	r3, [pc, #424]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c5d6:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    c5da:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c5dc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    c5de:	e7af      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    c5e0:	f7ff fa74 	bl	bacc <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    c5e4:	4629      	mov	r1, r5
    c5e6:	4628      	mov	r0, r5
    c5e8:	f7ff fba2 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c5ec:	7833      	ldrb	r3, [r6, #0]
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d1b8      	bne.n	c564 <SdioCard::begin(SdioConfig)+0x64>
    c5f2:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    c5f6:	e7b7      	b.n	c568 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    c5f8:	4b65      	ldr	r3, [pc, #404]	; (c790 <SdioCard::begin(SdioConfig)+0x290>)
    c5fa:	691b      	ldr	r3, [r3, #16]
    c5fc:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    c600:	d007      	beq.n	c612 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    c602:	2106      	movs	r1, #6
  m_errorLine = line;
    c604:	4b5e      	ldr	r3, [pc, #376]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c606:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    c60a:	2500      	movs	r5, #0
  m_errorCode = code;
    c60c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c60e:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    c610:	e796      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    c612:	2301      	movs	r3, #1
    c614:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    c616:	e7a5      	b.n	c564 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    c618:	2100      	movs	r1, #0
    c61a:	4860      	ldr	r0, [pc, #384]	; (c79c <SdioCard::begin(SdioConfig)+0x29c>)
    c61c:	f7ff fb88 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c620:	4605      	mov	r5, r0
    c622:	b930      	cbnz	r0, c632 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    c624:	2103      	movs	r1, #3
  m_errorLine = line;
    c626:	4b56      	ldr	r3, [pc, #344]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c628:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    c62c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c62e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    c630:	e786      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c632:	4e57      	ldr	r6, [pc, #348]	; (c790 <SdioCard::begin(SdioConfig)+0x290>)
    c634:	4b5a      	ldr	r3, [pc, #360]	; (c7a0 <SdioCard::begin(SdioConfig)+0x2a0>)
    c636:	6932      	ldr	r2, [r6, #16]
    c638:	4f5a      	ldr	r7, [pc, #360]	; (c7a4 <SdioCard::begin(SdioConfig)+0x2a4>)
    c63a:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c63c:	495a      	ldr	r1, [pc, #360]	; (c7a8 <SdioCard::begin(SdioConfig)+0x2a8>)
    c63e:	485b      	ldr	r0, [pc, #364]	; (c7ac <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c640:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c642:	f7ff fbc1 	bl	bdc8 <readReg16(unsigned long, void*)>
    c646:	4605      	mov	r5, r0
    c648:	b930      	cbnz	r0, c658 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    c64a:	2107      	movs	r1, #7
  m_errorLine = line;
    c64c:	4b4c      	ldr	r3, [pc, #304]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c64e:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    c652:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c654:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    c656:	e773      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    c658:	4955      	ldr	r1, [pc, #340]	; (c7b0 <SdioCard::begin(SdioConfig)+0x2b0>)
    c65a:	4856      	ldr	r0, [pc, #344]	; (c7b4 <SdioCard::begin(SdioConfig)+0x2b4>)
    c65c:	f7ff fbb4 	bl	bdc8 <readReg16(unsigned long, void*)>
    c660:	4605      	mov	r5, r0
    c662:	b930      	cbnz	r0, c672 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    c664:	2108      	movs	r1, #8
  m_errorLine = line;
    c666:	4b46      	ldr	r3, [pc, #280]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c668:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    c66c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c66e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    c670:	e766      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    c672:	6839      	ldr	r1, [r7, #0]
    c674:	4850      	ldr	r0, [pc, #320]	; (c7b8 <SdioCard::begin(SdioConfig)+0x2b8>)
    c676:	f7ff fb5b 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c67a:	4605      	mov	r5, r0
    c67c:	b930      	cbnz	r0, c68c <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    c67e:	2105      	movs	r1, #5
  m_errorLine = line;
    c680:	4b3f      	ldr	r3, [pc, #252]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c682:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    c686:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c688:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    c68a:	e759      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c68c:	6839      	ldr	r1, [r7, #0]
    c68e:	483e      	ldr	r0, [pc, #248]	; (c788 <SdioCard::begin(SdioConfig)+0x288>)
    c690:	f7ff fb4e 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c694:	b938      	cbnz	r0, c6a6 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    c696:	2114      	movs	r1, #20
  m_errorLine = line;
    c698:	4b39      	ldr	r3, [pc, #228]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    c69a:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    c69e:	2500      	movs	r5, #0
  m_errorCode = code;
    c6a0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c6a2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    c6a4:	e74c      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c6a6:	2102      	movs	r1, #2
    c6a8:	4844      	ldr	r0, [pc, #272]	; (c7bc <SdioCard::begin(SdioConfig)+0x2bc>)
    c6aa:	f7ff fb41 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c6ae:	4605      	mov	r5, r0
    c6b0:	2800      	cmp	r0, #0
    c6b2:	d0f0      	beq.n	c696 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c6b4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c6b6:	4669      	mov	r1, sp
    c6b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c6bc:	f023 0306 	bic.w	r3, r3, #6
    c6c0:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    c6c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c6c4:	f043 0302 	orr.w	r3, r3, #2
    c6c8:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    c6ca:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    c6ce:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c6d0:	f7ff fcd4 	bl	c07c <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    c6d4:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    c6d8:	079b      	lsls	r3, r3, #30
    c6da:	d543      	bpl.n	c764 <SdioCard::begin(SdioConfig)+0x264>
    c6dc:	2800      	cmp	r0, #0
    c6de:	d041      	beq.n	c764 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    c6e0:	4e27      	ldr	r6, [pc, #156]	; (c780 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c6e2:	4669      	mov	r1, sp
    c6e4:	4836      	ldr	r0, [pc, #216]	; (c7c0 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    c6e6:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    c6ea:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c6ec:	f7ff fcc6 	bl	c07c <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    c6f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    c6f4:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    c6f8:	2b01      	cmp	r3, #1
    c6fa:	d136      	bne.n	c76a <SdioCard::begin(SdioConfig)+0x26a>
    c6fc:	b3a8      	cbz	r0, c76a <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    c6fe:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c702:	4c30      	ldr	r4, [pc, #192]	; (c7c4 <SdioCard::begin(SdioConfig)+0x2c4>)
    c704:	2305      	movs	r3, #5
    c706:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c70a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c70e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c712:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c716:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c71a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    c71e:	f7ff f8eb 	bl	b8f8 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c722:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c724:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c728:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c72c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c730:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c734:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c738:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c73c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c740:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c744:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    c748:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    c74c:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c750:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    c754:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    c756:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    c75a:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    c75e:	f889 3000 	strb.w	r3, [r9]
  return true;
    c762:	e6ed      	b.n	c540 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    c764:	f246 10a8 	movw	r0, #25000	; 0x61a8
    c768:	e7cb      	b.n	c702 <SdioCard::begin(SdioConfig)+0x202>
    c76a:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    c76e:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    c772:	6037      	str	r7, [r6, #0]
    c774:	e7c5      	b.n	c702 <SdioCard::begin(SdioConfig)+0x202>
    c776:	bf00      	nop
    c778:	20009574 	.word	0x20009574
    c77c:	20025bcd 	.word	0x20025bcd
    c780:	200183d8 	.word	0x200183d8
    c784:	081a0000 	.word	0x081a0000
    c788:	371a0000 	.word	0x371a0000
    c78c:	000f4240 	.word	0x000f4240
    c790:	402c0000 	.word	0x402c0000
    c794:	2002460c 	.word	0x2002460c
    c798:	02090000 	.word	0x02090000
    c79c:	031a0000 	.word	0x031a0000
    c7a0:	ffff0000 	.word	0xffff0000
    c7a4:	20024610 	.word	0x20024610
    c7a8:	200245fc 	.word	0x200245fc
    c7ac:	09090000 	.word	0x09090000
    c7b0:	200245ec 	.word	0x200245ec
    c7b4:	0a090000 	.word	0x0a090000
    c7b8:	071b0000 	.word	0x071b0000
    c7bc:	061a0000 	.word	0x061a0000
    c7c0:	80fffff1 	.word	0x80fffff1
    c7c4:	401f8000 	.word	0x401f8000
    c7c8:	20025bcc 	.word	0x20025bcc
    c7cc:	20025bce 	.word	0x20025bce
    c7d0:	40300000 	.word	0x40300000
    c7d4:	29020000 	.word	0x29020000

0000c7d8 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c7d8:	4b37      	ldr	r3, [pc, #220]	; (c8b8 <SdioCard::readData(unsigned char*)+0xe0>)
    c7da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c7dc:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    c7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7e2:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c7e4:	d40d      	bmi.n	c802 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c7e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c7ec:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    c7ee:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    c7f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c7f6:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c7f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c7fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    c7fe:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    c800:	b662      	cpsie	i
  uint32_t m = micros();
    c802:	f001 fc1b 	bl	e03c <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c806:	4e2c      	ldr	r6, [pc, #176]	; (c8b8 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c808:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c8d0 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    c80c:	4605      	mov	r5, r0
  while (fcn()) {
    c80e:	e004      	b.n	c81a <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c810:	f001 fc14 	bl	e03c <micros>
    c814:	1b43      	subs	r3, r0, r5
    c816:	4543      	cmp	r3, r8
    c818:	d837      	bhi.n	c88a <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c81a:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    c81c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    c820:	d0f6      	beq.n	c810 <SdioCard::readData(unsigned char*)+0x38>
    c822:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    c826:	4824      	ldr	r0, [pc, #144]	; (c8b8 <SdioCard::readData(unsigned char*)+0xe0>)
    c828:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    c82c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c82e:	051b      	lsls	r3, r3, #20
    c830:	d5fc      	bpl.n	c82c <SdioCard::readData(unsigned char*)+0x54>
    c832:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    c836:	6a02      	ldr	r2, [r0, #32]
    c838:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c83c:	459c      	cmp	ip, r3
    c83e:	d1fa      	bne.n	c836 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    c840:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    c844:	4567      	cmp	r7, ip
    c846:	d1f1      	bne.n	c82c <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    c848:	f001 fbf8 	bl	e03c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c84c:	4f1a      	ldr	r7, [pc, #104]	; (c8b8 <SdioCard::readData(unsigned char*)+0xe0>)
    c84e:	4d1b      	ldr	r5, [pc, #108]	; (c8bc <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    c850:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c852:	f8df 807c 	ldr.w	r8, [pc, #124]	; c8d0 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    c856:	e004      	b.n	c862 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c858:	f001 fbf0 	bl	e03c <micros>
    c85c:	1b83      	subs	r3, r0, r6
    c85e:	4543      	cmp	r3, r8
    c860:	d81d      	bhi.n	c89e <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c862:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    c864:	402c      	ands	r4, r5
    c866:	d0f7      	beq.n	c858 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    c868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c86a:	4a15      	ldr	r2, [pc, #84]	; (c8c0 <SdioCard::readData(unsigned char*)+0xe8>)
    c86c:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    c86e:	6813      	ldr	r3, [r2, #0]
    c870:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c872:	6813      	ldr	r3, [r2, #0]
    c874:	f013 0302 	ands.w	r3, r3, #2
    c878:	d01b      	beq.n	c8b2 <SdioCard::readData(unsigned char*)+0xda>
    c87a:	6812      	ldr	r2, [r2, #0]
    c87c:	4b11      	ldr	r3, [pc, #68]	; (c8c4 <SdioCard::readData(unsigned char*)+0xec>)
    c87e:	421a      	tst	r2, r3
    c880:	bf0c      	ite	eq
    c882:	2001      	moveq	r0, #1
    c884:	2000      	movne	r0, #0
}
    c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c88a:	490f      	ldr	r1, [pc, #60]	; (c8c8 <SdioCard::readData(unsigned char*)+0xf0>)
    c88c:	251a      	movs	r5, #26
  m_errorLine = line;
    c88e:	4b0f      	ldr	r3, [pc, #60]	; (c8cc <SdioCard::readData(unsigned char*)+0xf4>)
    c890:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    c894:	4620      	mov	r0, r4
  m_errorCode = code;
    c896:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c898:	601a      	str	r2, [r3, #0]
}
    c89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c89e:	490a      	ldr	r1, [pc, #40]	; (c8c8 <SdioCard::readData(unsigned char*)+0xf0>)
    c8a0:	251d      	movs	r5, #29
  m_errorLine = line;
    c8a2:	4b0a      	ldr	r3, [pc, #40]	; (c8cc <SdioCard::readData(unsigned char*)+0xf4>)
    c8a4:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    c8a8:	4620      	mov	r0, r4
  m_errorCode = code;
    c8aa:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c8ac:	601a      	str	r2, [r3, #0]
}
    c8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c8b2:	4618      	mov	r0, r3
}
    c8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8b8:	402c0000 	.word	0x402c0000
    c8bc:	117f0002 	.word	0x117f0002
    c8c0:	20024cd8 	.word	0x20024cd8
    c8c4:	117f0000 	.word	0x117f0000
    c8c8:	20009574 	.word	0x20009574
    c8cc:	200183d8 	.word	0x200183d8
    c8d0:	000f4240 	.word	0x000f4240

0000c8d4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    c8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    c8d8:	4b29      	ldr	r3, [pc, #164]	; (c980 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    c8da:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    c8dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; c9a0 <SdioCard::readStart(unsigned long)+0xcc>
    c8e0:	4e28      	ldr	r6, [pc, #160]	; (c984 <SdioCard::readStart(unsigned long)+0xb0>)
    c8e2:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    c8e6:	f001 fba9 	bl	e03c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c8ea:	4d27      	ldr	r5, [pc, #156]	; (c988 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    c8ec:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c8ee:	f8df 80b4 	ldr.w	r8, [pc, #180]	; c9a4 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8f2:	4f26      	ldr	r7, [pc, #152]	; (c98c <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    c8f4:	e006      	b.n	c904 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c8f6:	f001 fba1 	bl	e03c <micros>
    c8fa:	1b00      	subs	r0, r0, r4
    c8fc:	42b8      	cmp	r0, r7
    c8fe:	d829      	bhi.n	c954 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    c900:	f003 fc4a 	bl	10198 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c904:	6831      	ldr	r1, [r6, #0]
    c906:	4628      	mov	r0, r5
    c908:	f7ff fa12 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c90c:	2800      	cmp	r0, #0
    c90e:	d0f2      	beq.n	c8f6 <SdioCard::readStart(unsigned long)+0x22>
    c910:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c914:	05db      	lsls	r3, r3, #23
    c916:	d5ee      	bpl.n	c8f6 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    c918:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c91a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    c91e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c922:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    c926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c92a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c92e:	4b18      	ldr	r3, [pc, #96]	; (c990 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c930:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c934:	781b      	ldrb	r3, [r3, #0]
    c936:	b1cb      	cbz	r3, c96c <SdioCard::readStart(unsigned long)+0x98>
    c938:	4649      	mov	r1, r9
    c93a:	4816      	ldr	r0, [pc, #88]	; (c994 <SdioCard::readStart(unsigned long)+0xc0>)
    c93c:	f7ff f9f8 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c940:	b930      	cbnz	r0, c950 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    c942:	4915      	ldr	r1, [pc, #84]	; (c998 <SdioCard::readStart(unsigned long)+0xc4>)
    c944:	240c      	movs	r4, #12
  m_errorLine = line;
    c946:	4b15      	ldr	r3, [pc, #84]	; (c99c <SdioCard::readStart(unsigned long)+0xc8>)
    c948:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    c94c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c94e:	601a      	str	r2, [r3, #0]
}
    c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c954:	4a10      	ldr	r2, [pc, #64]	; (c998 <SdioCard::readStart(unsigned long)+0xc4>)
    c956:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c958:	2000      	movs	r0, #0
  m_errorLine = line;
    c95a:	4b10      	ldr	r3, [pc, #64]	; (c99c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    c95c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c95e:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    c962:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    c966:	601a      	str	r2, [r3, #0]
}
    c968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c96c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    c970:	4808      	ldr	r0, [pc, #32]	; (c994 <SdioCard::readStart(unsigned long)+0xc0>)
    c972:	4649      	mov	r1, r9
    c974:	f7ff f9dc 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c978:	2800      	cmp	r0, #0
    c97a:	d1e9      	bne.n	c950 <SdioCard::readStart(unsigned long)+0x7c>
    c97c:	e7e1      	b.n	c942 <SdioCard::readStart(unsigned long)+0x6e>
    c97e:	bf00      	nop
    c980:	0000bec5 	.word	0x0000bec5
    c984:	20024610 	.word	0x20024610
    c988:	0d1a0000 	.word	0x0d1a0000
    c98c:	000f4240 	.word	0x000f4240
    c990:	20025bce 	.word	0x20025bce
    c994:	123a0030 	.word	0x123a0030
    c998:	20009574 	.word	0x20009574
    c99c:	200183d8 	.word	0x200183d8
    c9a0:	20024cd4 	.word	0x20024cd4
    c9a4:	402c0000 	.word	0x402c0000

0000c9a8 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    c9ac:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c9ae:	4c1d      	ldr	r4, [pc, #116]	; (ca24 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    c9b0:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    c9b2:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c9b4:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c9b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c9b8:	481b      	ldr	r0, [pc, #108]	; (ca28 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c9ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c9be:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c9c0:	f7ff f9b6 	bl	bd30 <cardCommand(unsigned long, unsigned long)>
    c9c4:	b940      	cbnz	r0, c9d8 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    c9c6:	4919      	ldr	r1, [pc, #100]	; (ca2c <SdioCard::stopTransmission(bool)+0x84>)
    c9c8:	2409      	movs	r4, #9
  m_errorLine = line;
    c9ca:	4b19      	ldr	r3, [pc, #100]	; (ca30 <SdioCard::stopTransmission(bool)+0x88>)
    c9cc:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    c9d0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c9d2:	601a      	str	r2, [r3, #0]
}
    c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    c9d8:	2d00      	cmp	r5, #0
    c9da:	d0fb      	beq.n	c9d4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    c9dc:	4b15      	ldr	r3, [pc, #84]	; (ca34 <SdioCard::stopTransmission(bool)+0x8c>)
    c9de:	4e16      	ldr	r6, [pc, #88]	; (ca38 <SdioCard::stopTransmission(bool)+0x90>)
    c9e0:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    c9e2:	f001 fb2b 	bl	e03c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c9e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    c9e8:	4607      	mov	r7, r0
  while (fcn()) {
    c9ea:	01da      	lsls	r2, r3, #7
    c9ec:	d416      	bmi.n	ca1c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c9ee:	f8df 804c 	ldr.w	r8, [pc, #76]	; ca3c <SdioCard::stopTransmission(bool)+0x94>
    c9f2:	e004      	b.n	c9fe <SdioCard::stopTransmission(bool)+0x56>
    yield();
    c9f4:	f003 fbd0 	bl	10198 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c9f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    c9fa:	01db      	lsls	r3, r3, #7
    c9fc:	d40e      	bmi.n	ca1c <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c9fe:	f001 fb1d 	bl	e03c <micros>
    ca02:	1bc0      	subs	r0, r0, r7
    ca04:	4540      	cmp	r0, r8
    ca06:	d9f5      	bls.n	c9f4 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    ca08:	4a08      	ldr	r2, [pc, #32]	; (ca2c <SdioCard::stopTransmission(bool)+0x84>)
    ca0a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    ca0c:	2000      	movs	r0, #0
  m_errorLine = line;
    ca0e:	4b08      	ldr	r3, [pc, #32]	; (ca30 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    ca10:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ca12:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    ca16:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    ca18:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    ca1a:	e7db      	b.n	c9d4 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    ca1c:	2300      	movs	r3, #0
  return true;
    ca1e:	4628      	mov	r0, r5
  m_busyFcn = 0;
    ca20:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    ca22:	e7d7      	b.n	c9d4 <SdioCard::stopTransmission(bool)+0x2c>
    ca24:	402c0000 	.word	0x402c0000
    ca28:	0cdb0000 	.word	0x0cdb0000
    ca2c:	20009574 	.word	0x20009574
    ca30:	200183d8 	.word	0x200183d8
    ca34:	0000b8d9 	.word	0x0000b8d9
    ca38:	20024cd4 	.word	0x20024cd4
    ca3c:	000f4240 	.word	0x000f4240

0000ca40 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    ca40:	4b0a      	ldr	r3, [pc, #40]	; (ca6c <SdioCard::syncDevice()+0x2c>)
    ca42:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    ca44:	b510      	push	{r4, lr}
    ca46:	4604      	mov	r4, r0
  if (!m_transferActive) {
    ca48:	b91b      	cbnz	r3, ca52 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    ca4a:	7a63      	ldrb	r3, [r4, #9]
    ca4c:	b943      	cbnz	r3, ca60 <SdioCard::syncDevice()+0x20>
  return true;
    ca4e:	2001      	movs	r0, #1
}
    ca50:	bd10      	pop	{r4, pc}
    ca52:	f7ff f8cf 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ca56:	2800      	cmp	r0, #0
    ca58:	d0fa      	beq.n	ca50 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    ca5a:	7a63      	ldrb	r3, [r4, #9]
    ca5c:	2b00      	cmp	r3, #0
    ca5e:	d0f6      	beq.n	ca4e <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    ca60:	4620      	mov	r0, r4
    ca62:	2101      	movs	r1, #1
}
    ca64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    ca68:	f7ff bf9e 	b.w	c9a8 <SdioCard::stopTransmission(bool)>
    ca6c:	20025bcf 	.word	0x20025bcf

0000ca70 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca74:	4604      	mov	r4, r0
    ca76:	7a00      	ldrb	r0, [r0, #8]
    ca78:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    ca7c:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    ca7e:	f010 0501 	ands.w	r5, r0, #1
    ca82:	d013      	beq.n	caac <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    ca84:	0793      	lsls	r3, r2, #30
    ca86:	d03c      	beq.n	cb02 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    ca88:	2301      	movs	r3, #1
    ca8a:	4838      	ldr	r0, [pc, #224]	; (cb6c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    ca8c:	466a      	mov	r2, sp
    ca8e:	f7ff fc01 	bl	c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ca92:	2800      	cmp	r0, #0
    ca94:	d03a      	beq.n	cb0c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    ca96:	f44f 7200 	mov.w	r2, #512	; 0x200
    ca9a:	4669      	mov	r1, sp
    ca9c:	4630      	mov	r0, r6
    ca9e:	f001 fd7d 	bl	e59c <memcpy>
}
    caa2:	4628      	mov	r0, r5
    caa4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    caac:	f8df 80cc 	ldr.w	r8, [pc, #204]	; cb7c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    cab0:	460f      	mov	r7, r1
    cab2:	f898 3000 	ldrb.w	r3, [r8]
    cab6:	2b00      	cmp	r3, #0
    cab8:	d135      	bne.n	cb26 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    caba:	7a63      	ldrb	r3, [r4, #9]
    cabc:	2b01      	cmp	r3, #1
    cabe:	d039      	beq.n	cb34 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    cac0:	6822      	ldr	r2, [r4, #0]
    cac2:	492b      	ldr	r1, [pc, #172]	; (cb70 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    cac4:	6a12      	ldr	r2, [r2, #32]
    cac6:	428a      	cmp	r2, r1
    cac8:	d14a      	bne.n	cb60 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    caca:	f898 2000 	ldrb.w	r2, [r8]
    cace:	2a00      	cmp	r2, #0
    cad0:	d134      	bne.n	cb3c <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    cad2:	2b00      	cmp	r3, #0
    cad4:	d139      	bne.n	cb4a <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    cad6:	4639      	mov	r1, r7
    cad8:	4620      	mov	r0, r4
    cada:	f7ff fefb 	bl	c8d4 <SdioCard::readStart(unsigned long)>
    cade:	b1e8      	cbz	r0, cb1c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    cae0:	2301      	movs	r3, #1
      m_curSector = sector;
    cae2:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    cae4:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    cae6:	4631      	mov	r1, r6
    cae8:	4620      	mov	r0, r4
    caea:	f7ff fe75 	bl	c7d8 <SdioCard::readData(unsigned char*)>
    caee:	b1a8      	cbz	r0, cb1c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    caf0:	6863      	ldr	r3, [r4, #4]
  return true;
    caf2:	4605      	mov	r5, r0
    m_curSector++;
    caf4:	3301      	adds	r3, #1
}
    caf6:	4628      	mov	r0, r5
    m_curSector++;
    caf8:	6063      	str	r3, [r4, #4]
}
    cafa:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    cb02:	2301      	movs	r3, #1
    cb04:	4819      	ldr	r0, [pc, #100]	; (cb6c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    cb06:	f7ff fbc5 	bl	c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cb0a:	b938      	cbnz	r0, cb1c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    cb0c:	4919      	ldr	r1, [pc, #100]	; (cb74 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    cb0e:	200b      	movs	r0, #11
  m_errorLine = line;
    cb10:	4b19      	ldr	r3, [pc, #100]	; (cb78 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    cb12:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    cb16:	2500      	movs	r5, #0
  m_errorCode = code;
    cb18:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    cb1a:	601a      	str	r2, [r3, #0]
}
    cb1c:	4628      	mov	r0, r5
    cb1e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb26:	f7ff f865 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    cb2a:	2800      	cmp	r0, #0
    cb2c:	d0f6      	beq.n	cb1c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    cb2e:	7a63      	ldrb	r3, [r4, #9]
    cb30:	2b01      	cmp	r3, #1
    cb32:	d1c5      	bne.n	cac0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    cb34:	6862      	ldr	r2, [r4, #4]
    cb36:	42ba      	cmp	r2, r7
    cb38:	d1c2      	bne.n	cac0 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    cb3a:	e7d4      	b.n	cae6 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    cb3c:	f7ff f85a 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    cb40:	2800      	cmp	r0, #0
    cb42:	d0eb      	beq.n	cb1c <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    cb44:	7a63      	ldrb	r3, [r4, #9]
    cb46:	2b00      	cmp	r3, #0
    cb48:	d0c5      	beq.n	cad6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    cb4a:	2101      	movs	r1, #1
    cb4c:	4620      	mov	r0, r4
    cb4e:	f7ff ff2b 	bl	c9a8 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    cb52:	2800      	cmp	r0, #0
    cb54:	d1bf      	bne.n	cad6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    cb56:	4628      	mov	r0, r5
    cb58:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    cb60:	4620      	mov	r0, r4
    cb62:	4790      	blx	r2
    cb64:	2800      	cmp	r0, #0
    cb66:	d0f6      	beq.n	cb56 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    cb68:	e7b5      	b.n	cad6 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    cb6a:	bf00      	nop
    cb6c:	113a0011 	.word	0x113a0011
    cb70:	0000ca41 	.word	0x0000ca41
    cb74:	20009574 	.word	0x20009574
    cb78:	200183d8 	.word	0x200183d8
    cb7c:	20025bcf 	.word	0x20025bcf

0000cb80 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb84:	7a04      	ldrb	r4, [r0, #8]
    cb86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    cb8a:	460f      	mov	r7, r1
    cb8c:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    cb8e:	f014 0401 	ands.w	r4, r4, #1
    cb92:	d01d      	beq.n	cbd0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    cb94:	f012 0f03 	tst.w	r2, #3
    cb98:	d006      	beq.n	cba8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    cb9a:	4668      	mov	r0, sp
    cb9c:	4611      	mov	r1, r2
    cb9e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    cba2:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    cba4:	f001 fcfa 	bl	e59c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    cba8:	2301      	movs	r3, #1
    cbaa:	4642      	mov	r2, r8
    cbac:	4639      	mov	r1, r7
    cbae:	482c      	ldr	r0, [pc, #176]	; (cc60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    cbb0:	f7ff fb70 	bl	c294 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    cbb4:	4604      	mov	r4, r0
    cbb6:	b930      	cbnz	r0, cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    cbb8:	492a      	ldr	r1, [pc, #168]	; (cc64 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    cbba:	200d      	movs	r0, #13
  m_errorLine = line;
    cbbc:	4b2a      	ldr	r3, [pc, #168]	; (cc68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    cbbe:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    cbc2:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    cbc4:	601a      	str	r2, [r3, #0]
}
    cbc6:	4620      	mov	r0, r4
    cbc8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    cbd0:	4d26      	ldr	r5, [pc, #152]	; (cc6c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    cbd2:	4606      	mov	r6, r0
    cbd4:	782b      	ldrb	r3, [r5, #0]
    cbd6:	bb2b      	cbnz	r3, cc24 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cbd8:	7a73      	ldrb	r3, [r6, #9]
    cbda:	2b02      	cmp	r3, #2
    cbdc:	d029      	beq.n	cc32 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    cbde:	6832      	ldr	r2, [r6, #0]
    cbe0:	4923      	ldr	r1, [pc, #140]	; (cc70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    cbe2:	6a12      	ldr	r2, [r2, #32]
    cbe4:	428a      	cmp	r2, r1
    cbe6:	d136      	bne.n	cc56 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    cbe8:	782a      	ldrb	r2, [r5, #0]
    cbea:	bb32      	cbnz	r2, cc3a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    cbec:	2b00      	cmp	r3, #0
    cbee:	d12b      	bne.n	cc48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    cbf0:	6833      	ldr	r3, [r6, #0]
    cbf2:	4639      	mov	r1, r7
    cbf4:	4630      	mov	r0, r6
    cbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    cbf8:	4798      	blx	r3
    cbfa:	2800      	cmp	r0, #0
    cbfc:	d0e3      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    cbfe:	2302      	movs	r3, #2
      m_curSector = sector;
    cc00:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    cc02:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    cc04:	6833      	ldr	r3, [r6, #0]
    cc06:	4641      	mov	r1, r8
    cc08:	4630      	mov	r0, r6
    cc0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    cc0c:	4798      	blx	r3
    cc0e:	2800      	cmp	r0, #0
    cc10:	d0d9      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    cc12:	6873      	ldr	r3, [r6, #4]
  return true;
    cc14:	4604      	mov	r4, r0
    m_curSector++;
    cc16:	3301      	adds	r3, #1
}
    cc18:	4620      	mov	r0, r4
    m_curSector++;
    cc1a:	6073      	str	r3, [r6, #4]
}
    cc1c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc24:	f7fe ffe6 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    cc28:	2800      	cmp	r0, #0
    cc2a:	d0cc      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    cc2c:	7a73      	ldrb	r3, [r6, #9]
    cc2e:	2b02      	cmp	r3, #2
    cc30:	d1d5      	bne.n	cbde <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    cc32:	6872      	ldr	r2, [r6, #4]
    cc34:	42ba      	cmp	r2, r7
    cc36:	d1d2      	bne.n	cbde <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    cc38:	e7e4      	b.n	cc04 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    cc3a:	f7fe ffdb 	bl	bbf4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    cc3e:	2800      	cmp	r0, #0
    cc40:	d0c1      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    cc42:	7a73      	ldrb	r3, [r6, #9]
    cc44:	2b00      	cmp	r3, #0
    cc46:	d0d3      	beq.n	cbf0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    cc48:	2101      	movs	r1, #1
    cc4a:	4630      	mov	r0, r6
    cc4c:	f7ff feac 	bl	c9a8 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    cc50:	2800      	cmp	r0, #0
    cc52:	d0b8      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    cc54:	e7cc      	b.n	cbf0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    cc56:	4630      	mov	r0, r6
    cc58:	4790      	blx	r2
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d0b3      	beq.n	cbc6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    cc5e:	e7c7      	b.n	cbf0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    cc60:	183a0001 	.word	0x183a0001
    cc64:	20009574 	.word	0x20009574
    cc68:	200183d8 	.word	0x200183d8
    cc6c:	20025bcf 	.word	0x20025bcf
    cc70:	0000ca41 	.word	0x0000ca41

0000cc74 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    cc74:	f001 ba0c 	b.w	e090 <digitalWrite>

0000cc78 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    cc78:	b430      	push	{r4, r5}
    cc7a:	b082      	sub	sp, #8
    cc7c:	460c      	mov	r4, r1
    cc7e:	ab02      	add	r3, sp, #8
    cc80:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    cc84:	7cc3      	ldrb	r3, [r0, #19]
    cc86:	2b00      	cmp	r3, #0
    cc88:	d030      	beq.n	ccec <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    cc8a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    cc8c:	7cc3      	ldrb	r3, [r0, #19]
    cc8e:	07da      	lsls	r2, r3, #31
    cc90:	d508      	bpl.n	cca4 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    cc92:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cc96:	6945      	ldr	r5, [r0, #20]
    cc98:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    cc9c:	402a      	ands	r2, r5
    cc9e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    cca0:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    cca4:	079d      	lsls	r5, r3, #30
    cca6:	d508      	bpl.n	ccba <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    cca8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ccac:	6985      	ldr	r5, [r0, #24]
    ccae:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    ccb2:	402a      	ands	r2, r5
    ccb4:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    ccb6:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    ccba:	0759      	lsls	r1, r3, #29
    ccbc:	d508      	bpl.n	ccd0 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ccbe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ccc2:	69c5      	ldr	r5, [r0, #28]
    ccc4:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    ccc8:	402a      	ands	r2, r5
    ccca:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    cccc:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    ccd0:	071a      	lsls	r2, r3, #28
    ccd2:	d508      	bpl.n	cce6 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    ccd4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ccd8:	6a05      	ldr	r5, [r0, #32]
    ccda:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    ccde:	402a      	ands	r2, r5
    cce0:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    cce2:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    cce6:	06db      	lsls	r3, r3, #27
    cce8:	d42f      	bmi.n	cd4a <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    ccea:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    ccec:	6883      	ldr	r3, [r0, #8]
    ccee:	429c      	cmp	r4, r3
    ccf0:	d035      	beq.n	cd5e <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    ccf2:	4b22      	ldr	r3, [pc, #136]	; (cd7c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    ccf4:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    ccf6:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    ccf8:	4a21      	ldr	r2, [pc, #132]	; (cd80 <SPIClass::beginTransaction(SPISettings)+0x108>)
    ccfa:	f3c3 1101 	ubfx	r1, r3, #4, #2
    ccfe:	f3c3 6382 	ubfx	r3, r3, #26, #3
    cd02:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    cd06:	3301      	adds	r3, #1
    cd08:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    cd0c:	b1cc      	cbz	r4, cd42 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    cd0e:	4294      	cmp	r4, r2
    cd10:	d827      	bhi.n	cd62 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    cd12:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    cd16:	fbb2 f2f3 	udiv	r2, r2, r3
    cd1a:	4294      	cmp	r4, r2
    cd1c:	d32c      	bcc.n	cd78 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    cd1e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    cd22:	d320      	bcc.n	cd66 <SPIClass::beginTransaction(SPISettings)+0xee>
    cd24:	4c17      	ldr	r4, [pc, #92]	; (cd84 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cd26:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cd28:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cd2a:	2203      	movs	r2, #3
		port().CR = 0;
    cd2c:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    cd2e:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    cd30:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    cd32:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    cd34:	2201      	movs	r2, #1
		port().CCR = _ccr;
    cd36:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    cd38:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    cd3a:	611a      	str	r2, [r3, #16]
	}
    cd3c:	b002      	add	sp, #8
    cd3e:	bc30      	pop	{r4, r5}
    cd40:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    cd42:	4299      	cmp	r1, r3
    cd44:	d3ef      	bcc.n	cd26 <SPIClass::beginTransaction(SPISettings)+0xae>
    cd46:	1c53      	adds	r3, r2, #1
    cd48:	e7e9      	b.n	cd1e <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    cd4a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cd4e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    cd50:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    cd54:	400b      	ands	r3, r1
    cd56:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    cd58:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    cd5c:	e7c5      	b.n	ccea <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    cd5e:	68c4      	ldr	r4, [r0, #12]
    cd60:	e7e2      	b.n	cd28 <SPIClass::beginTransaction(SPISettings)+0xb0>
    cd62:	2400      	movs	r4, #0
    cd64:	e7df      	b.n	cd26 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    cd66:	2b02      	cmp	r3, #2
    cd68:	d9fb      	bls.n	cd62 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    cd6a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cd6c:	085a      	lsrs	r2, r3, #1
    cd6e:	0214      	lsls	r4, r2, #8
    cd70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    cd74:	431c      	orrs	r4, r3
    cd76:	e7d6      	b.n	cd26 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    cd78:	461a      	mov	r2, r3
    cd7a:	e7e4      	b.n	cd46 <SPIClass::beginTransaction(SPISettings)+0xce>
    cd7c:	400fc000 	.word	0x400fc000
    cd80:	20000e48 	.word	0x20000e48
    cd84:	007f7fff 	.word	0x007f7fff

0000cd88 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    cd88:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    cd8a:	4603      	mov	r3, r0
    cd8c:	f853 0b04 	ldr.w	r0, [r3], #4
    cd90:	e893 0006 	ldmia.w	r3, {r1, r2}
    cd94:	f7ff ff70 	bl	cc78 <SPIClass::beginTransaction(SPISettings)>
}
    cd98:	bd08      	pop	{r3, pc}
    cd9a:	bf00      	nop

0000cd9c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    cd9c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    cd9e:	7cd3      	ldrb	r3, [r2, #19]
    cda0:	b313      	cbz	r3, cde8 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    cda2:	07d8      	lsls	r0, r3, #31
    cda4:	d504      	bpl.n	cdb0 <SdSpiArduinoDriver::deactivate()+0x14>
    cda6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    cda8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cdac:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    cdb0:	0799      	lsls	r1, r3, #30
    cdb2:	d504      	bpl.n	cdbe <SdSpiArduinoDriver::deactivate()+0x22>
    cdb4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    cdb6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cdba:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    cdbe:	0758      	lsls	r0, r3, #29
    cdc0:	d504      	bpl.n	cdcc <SdSpiArduinoDriver::deactivate()+0x30>
    cdc2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    cdc4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cdc8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    cdcc:	0719      	lsls	r1, r3, #28
    cdce:	d504      	bpl.n	cdda <SdSpiArduinoDriver::deactivate()+0x3e>
    cdd0:	6b50      	ldr	r0, [r2, #52]	; 0x34
    cdd2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cdd6:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    cdda:	06db      	lsls	r3, r3, #27
    cddc:	d504      	bpl.n	cde8 <SdSpiArduinoDriver::deactivate()+0x4c>
    cdde:	6b92      	ldr	r2, [r2, #56]	; 0x38
    cde0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cde4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    cde8:	4770      	bx	lr
    cdea:	bf00      	nop

0000cdec <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    cdec:	6800      	ldr	r0, [r0, #0]
    cdee:	f000 b9f9 	b.w	d1e4 <SPIClass::end()>
    cdf2:	bf00      	nop

0000cdf4 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cdf4:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    cdf6:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cdf8:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    cdfa:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cdfc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cdfe:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ce02:	d0fb      	beq.n	cdfc <SdSpiArduinoDriver::receive()+0x8>
    ce04:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    ce06:	b2c0      	uxtb	r0, r0
    ce08:	4770      	bx	lr
    ce0a:	bf00      	nop

0000ce0c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ce0c:	b530      	push	{r4, r5, lr}
    ce0e:	460c      	mov	r4, r1
    ce10:	b083      	sub	sp, #12
    ce12:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    ce14:	21ff      	movs	r1, #255	; 0xff
    ce16:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    ce18:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    ce1a:	f005 fc4d 	bl	126b8 <memset>
		transfer(buf, buf, count);
    ce1e:	6828      	ldr	r0, [r5, #0]
    ce20:	9b01      	ldr	r3, [sp, #4]
    ce22:	4622      	mov	r2, r4
    ce24:	4621      	mov	r1, r4
    ce26:	f000 f9d9 	bl	d1dc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    ce2a:	2000      	movs	r0, #0
    ce2c:	b003      	add	sp, #12
    ce2e:	bd30      	pop	{r4, r5, pc}

0000ce30 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce30:	6803      	ldr	r3, [r0, #0]
    ce32:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    ce34:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ce36:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ce38:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ce3c:	d0fb      	beq.n	ce36 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    ce3e:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    ce40:	4770      	bx	lr
    ce42:	bf00      	nop

0000ce44 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    ce44:	1e53      	subs	r3, r2, #1
    ce46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    ce4a:	b530      	push	{r4, r5, lr}
    ce4c:	4614      	mov	r4, r2
    ce4e:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    ce52:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    ce54:	d311      	bcc.n	ce7a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    ce56:	b16a      	cbz	r2, ce74 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ce58:	6803      	ldr	r3, [r0, #0]
    ce5a:	1e48      	subs	r0, r1, #1
    ce5c:	6819      	ldr	r1, [r3, #0]
    ce5e:	1882      	adds	r2, r0, r2
		port().TDR = data;
    ce60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ce64:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    ce66:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    ce68:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    ce6c:	d0fb      	beq.n	ce66 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    ce6e:	4290      	cmp	r0, r2
    ce70:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    ce72:	d1f5      	bne.n	ce60 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    ce74:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    ce78:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    ce7a:	4668      	mov	r0, sp
    ce7c:	f001 fb8e 	bl	e59c <memcpy>
		transfer(buf, buf, count);
    ce80:	466a      	mov	r2, sp
    ce82:	4623      	mov	r3, r4
    ce84:	6828      	ldr	r0, [r5, #0]
    ce86:	4611      	mov	r1, r2
    ce88:	f000 f9a8 	bl	d1dc <SPIClass::transfer(void const*, void*, unsigned int)>
}
    ce8c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    ce90:	bd30      	pop	{r4, r5, pc}
    ce92:	bf00      	nop

0000ce94 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    ce94:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    ce96:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    ce98:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    ce9a:	07dc      	lsls	r4, r3, #31
    ce9c:	d51d      	bpl.n	ceda <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    ce9e:	4604      	mov	r4, r0
    cea0:	6840      	ldr	r0, [r0, #4]
    cea2:	f104 0210 	add.w	r2, r4, #16
    cea6:	6803      	ldr	r3, [r0, #0]
    cea8:	68e1      	ldr	r1, [r4, #12]
    ceaa:	9201      	str	r2, [sp, #4]
    ceac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ceae:	4798      	blx	r3
    ceb0:	9a01      	ldr	r2, [sp, #4]
    ceb2:	4605      	mov	r5, r0
    ceb4:	b1a8      	cbz	r0, cee2 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    ceb6:	7823      	ldrb	r3, [r4, #0]
    ceb8:	0799      	lsls	r1, r3, #30
    ceba:	d508      	bpl.n	cece <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cebc:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    cebe:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cec2:	4419      	add	r1, r3
    cec4:	6803      	ldr	r3, [r0, #0]
    cec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cec8:	4798      	blx	r3
    ceca:	b150      	cbz	r0, cee2 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    cecc:	7823      	ldrb	r3, [r4, #0]
    cece:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    ced2:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    ced4:	7023      	strb	r3, [r4, #0]
}
    ced6:	b003      	add	sp, #12
    ced8:	bd30      	pop	{r4, r5, pc}
  return true;
    ceda:	2501      	movs	r5, #1
}
    cedc:	4628      	mov	r0, r5
    cede:	b003      	add	sp, #12
    cee0:	bd30      	pop	{r4, r5, pc}
  return false;
    cee2:	2500      	movs	r5, #0
}
    cee4:	4628      	mov	r0, r5
    cee6:	b003      	add	sp, #12
    cee8:	bd30      	pop	{r4, r5, pc}
    ceea:	bf00      	nop

0000ceec <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    ceee:	6843      	ldr	r3, [r0, #4]
    cef0:	b30b      	cbz	r3, cf36 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    cef2:	68c3      	ldr	r3, [r0, #12]
    cef4:	4604      	mov	r4, r0
    cef6:	460f      	mov	r7, r1
    cef8:	4615      	mov	r5, r2
    cefa:	428b      	cmp	r3, r1
    cefc:	d106      	bne.n	cf0c <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    cefe:	f810 3b10 	ldrb.w	r3, [r0], #16
    cf02:	f005 0503 	and.w	r5, r5, #3
    cf06:	432b      	orrs	r3, r5
    cf08:	7023      	strb	r3, [r4, #0]
}
    cf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    cf0c:	f7ff ffc2 	bl	ce94 <FsCache::sync()>
    cf10:	b188      	cbz	r0, cf36 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    cf12:	076b      	lsls	r3, r5, #29
    cf14:	d505      	bpl.n	cf22 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    cf16:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cf1a:	4630      	mov	r0, r6
    m_sector = sector;
    cf1c:	2300      	movs	r3, #0
    cf1e:	60e7      	str	r7, [r4, #12]
    cf20:	e7ef      	b.n	cf02 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cf22:	6860      	ldr	r0, [r4, #4]
    cf24:	f104 0610 	add.w	r6, r4, #16
    cf28:	4639      	mov	r1, r7
    cf2a:	6803      	ldr	r3, [r0, #0]
    cf2c:	4632      	mov	r2, r6
    cf2e:	691b      	ldr	r3, [r3, #16]
    cf30:	4798      	blx	r3
    cf32:	2800      	cmp	r0, #0
    cf34:	d1f1      	bne.n	cf1a <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    cf36:	2000      	movs	r0, #0
}
    cf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf3a:	bf00      	nop

0000cf3c <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    cf3c:	b510      	push	{r4, lr}
    cf3e:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    cf40:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    cf42:	b082      	sub	sp, #8
  if (ls) {
    cf44:	b118      	cbz	r0, cf4e <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    cf46:	2300      	movs	r3, #0
    cf48:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    cf4a:	b002      	add	sp, #8
    cf4c:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    cf4e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    cf52:	428b      	cmp	r3, r1
    cf54:	d2f9      	bcs.n	cf4a <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    cf56:	aa01      	add	r2, sp, #4
    cf58:	4618      	mov	r0, r3
    cf5a:	f000 f867 	bl	d02c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    cf5e:	b180      	cbz	r0, cf82 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    cf60:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    cf62:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    cf64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    cf68:	d201      	bcs.n	cf6e <FsName::get16()+0x32>
      rtn = cp;
    cf6a:	b298      	uxth	r0, r3
    cf6c:	e7ed      	b.n	cf4a <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cf6e:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    cf70:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cf74:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    cf78:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cf7c:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    cf7e:	81a3      	strh	r3, [r4, #12]
    cf80:	e7e3      	b.n	cf4a <FsName::get16()+0xe>
  return 0XFFFF;
    cf82:	f64f 70ff 	movw	r0, #65535	; 0xffff
    cf86:	e7e0      	b.n	cf4a <FsName::get16()+0xe>

0000cf88 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    cf88:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    cf8a:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    cf8e:	d805      	bhi.n	cf9c <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    cf90:	b112      	cbz	r2, cf98 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    cf92:	460a      	mov	r2, r1
    cf94:	f802 0b01 	strb.w	r0, [r2], #1
  }
    cf98:	4610      	mov	r0, r2
    cf9a:	4770      	bx	lr
    } else if (cp < 0X800) {
    cf9c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cfa0:	d20f      	bcs.n	cfc2 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    cfa2:	2a01      	cmp	r2, #1
    cfa4:	d940      	bls.n	d028 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cfa6:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cfaa:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cfae:	460a      	mov	r2, r1
    cfb0:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cfb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cfb8:	f802 0b02 	strb.w	r0, [r2], #2
  }
    cfbc:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cfbe:	704b      	strb	r3, [r1, #1]
  }
    cfc0:	4770      	bx	lr
    } else if (cp < 0X10000) {
    cfc2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    cfc6:	d216      	bcs.n	cff6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    cfc8:	2a02      	cmp	r2, #2
    cfca:	d92d      	bls.n	d028 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cfcc:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cfd0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    cfd4:	1cca      	adds	r2, r1, #3
    cfd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    cfda:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cfdc:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cfe0:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cfe4:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cfe6:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cfea:	7048      	strb	r0, [r1, #1]
  }
    cfec:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cfee:	f881 e000 	strb.w	lr, [r1]
  }
    cff2:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    cff6:	2a03      	cmp	r2, #3
    cff8:	d916      	bls.n	d028 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cffa:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cffe:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d002:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d006:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    d00a:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    d00e:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d012:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d016:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    d01a:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d01c:	1d0a      	adds	r2, r1, #4
    d01e:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    d020:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    d024:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    d026:	e7b7      	b.n	cf98 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    d028:	2200      	movs	r2, #0
    d02a:	e7b5      	b.n	cf98 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000d02c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    d02c:	4288      	cmp	r0, r1
    d02e:	d23d      	bcs.n	d0ac <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    d030:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    d032:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    d034:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    d038:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    d03a:	2800      	cmp	r0, #0
    d03c:	da2d      	bge.n	d09a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    d03e:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    d042:	28c0      	cmp	r0, #192	; 0xc0
    d044:	d034      	beq.n	d0b0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    d046:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    d04a:	28e0      	cmp	r0, #224	; 0xe0
    d04c:	d034      	beq.n	d0b8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    d04e:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    d052:	28f0      	cmp	r0, #240	; 0xf0
    d054:	d126      	bne.n	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    d056:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    d05a:	2004      	movs	r0, #4
    if ((str + n) > end) {
    d05c:	4418      	add	r0, r3
    d05e:	4288      	cmp	r0, r1
    d060:	d820      	bhi.n	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    d062:	3301      	adds	r3, #1
      ch = str[i];
    d064:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    d068:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    d06c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    d070:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    d074:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    d078:	d114      	bne.n	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    d07a:	4283      	cmp	r3, r0
    d07c:	d1f2      	bne.n	d064 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    d07e:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    d082:	4b0f      	ldr	r3, [pc, #60]	; (d0c0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    d084:	4299      	cmp	r1, r3
    d086:	d80d      	bhi.n	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    d088:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    d08c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    d090:	d308      	bcc.n	d0a4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    d092:	6014      	str	r4, [r2, #0]
  }
    d094:	f85d 4b04 	ldr.w	r4, [sp], #4
    d098:	4770      	bx	lr
      return str + 1;
    d09a:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    d09c:	6014      	str	r4, [r2, #0]
  }
    d09e:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0a2:	4770      	bx	lr
      return nullptr;
    d0a4:	2000      	movs	r0, #0
  }
    d0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    d0aa:	4770      	bx	lr
      return nullptr;
    d0ac:	2000      	movs	r0, #0
  }
    d0ae:	4770      	bx	lr
      cp = ch & 0X1F;
    d0b0:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    d0b4:	2002      	movs	r0, #2
    d0b6:	e7d1      	b.n	d05c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    d0b8:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    d0bc:	2003      	movs	r0, #3
    d0be:	e7cd      	b.n	d05c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    d0c0:	0010ff7f 	.word	0x0010ff7f

0000d0c4 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    d0c4:	287e      	cmp	r0, #126	; 0x7e
    d0c6:	d93e      	bls.n	d146 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    d0c8:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    d0cc:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    d0ce:	b430      	push	{r4, r5}
    d0d0:	4c28      	ldr	r4, [pc, #160]	; (d174 <toUpcase(unsigned short)+0xb0>)
    d0d2:	e004      	b.n	d0de <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    d0d4:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    d0d8:	4282      	cmp	r2, r0
    d0da:	d820      	bhi.n	d11e <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    d0dc:	460b      	mov	r3, r1
  while (right - left > 1) {
    d0de:	ebac 0203 	sub.w	r2, ip, r3
    d0e2:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    d0e4:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    d0e8:	d8f4      	bhi.n	d0d4 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    d0ea:	b29b      	uxth	r3, r3
    d0ec:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    d0f0:	4290      	cmp	r0, r2
    d0f2:	d216      	bcs.n	d122 <toUpcase(unsigned short)+0x5e>
    d0f4:	244b      	movs	r4, #75	; 0x4b
    d0f6:	2300      	movs	r3, #0
    d0f8:	4d1f      	ldr	r5, [pc, #124]	; (d178 <toUpcase(unsigned short)+0xb4>)
    d0fa:	e004      	b.n	d106 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    d0fc:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    d100:	4282      	cmp	r2, r0
    d102:	d81e      	bhi.n	d142 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    d104:	460b      	mov	r3, r1
  while (right - left > 1) {
    d106:	1ae2      	subs	r2, r4, r3
    d108:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    d10a:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    d10e:	d8f5      	bhi.n	d0fc <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    d110:	b29b      	uxth	r3, r3
    d112:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    d116:	4282      	cmp	r2, r0
    d118:	d01f      	beq.n	d15a <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    d11a:	bc30      	pop	{r4, r5}
    d11c:	4770      	bx	lr
    mid = left + (right - left)/2;
    d11e:	468c      	mov	ip, r1
    d120:	e7dd      	b.n	d0de <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    d122:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    d126:	1a82      	subs	r2, r0, r2
    d128:	78e3      	ldrb	r3, [r4, #3]
    d12a:	429a      	cmp	r2, r3
    d12c:	dae2      	bge.n	d0f4 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    d12e:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    d132:	2b01      	cmp	r3, #1
    d134:	d016      	beq.n	d164 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    d136:	b1d3      	cbz	r3, d16e <toUpcase(unsigned short)+0xaa>
    d138:	b29b      	uxth	r3, r3
    d13a:	4403      	add	r3, r0
}
    d13c:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    d13e:	b298      	uxth	r0, r3
}
    d140:	4770      	bx	lr
    mid = left + (right - left)/2;
    d142:	460c      	mov	r4, r1
    d144:	e7df      	b.n	d106 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    d146:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    d14a:	2b19      	cmp	r3, #25
    d14c:	bf8c      	ite	hi
    d14e:	2300      	movhi	r3, #0
    d150:	2301      	movls	r3, #1
    d152:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    d156:	b298      	uxth	r0, r3
}
    d158:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    d15a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d15e:	8868      	ldrh	r0, [r5, #2]
}
    d160:	bc30      	pop	{r4, r5}
    d162:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    d164:	f002 0201 	and.w	r2, r2, #1
    d168:	1a83      	subs	r3, r0, r2
    d16a:	b298      	uxth	r0, r3
    d16c:	e7d5      	b.n	d11a <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    d16e:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    d172:	e7e2      	b.n	d13a <toUpcase(unsigned short)+0x76>
    d174:	20000a6c 	.word	0x20000a6c
    d178:	20000888 	.word	0x20000888

0000d17c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    d17c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d17e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    d180:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    d184:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    d186:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    d188:	b1a3      	cbz	r3, d1b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d18a:	b321      	cbz	r1, d1d6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    d18c:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    d190:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d192:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    d194:	6f25      	ldr	r5, [r4, #112]	; 0x70
    d196:	07af      	lsls	r7, r5, #30
    d198:	d407      	bmi.n	d1aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    d19a:	4615      	mov	r5, r2
				count_read--;
    d19c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    d19e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    d1a0:	b11a      	cbz	r2, d1aa <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    d1a2:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    d1a6:	462a      	mov	r2, r5
    d1a8:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    d1aa:	6965      	ldr	r5, [r4, #20]
    d1ac:	07ed      	lsls	r5, r5, #31
    d1ae:	d5f1      	bpl.n	d194 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    d1b0:	2b00      	cmp	r3, #0
    d1b2:	d1ea      	bne.n	d18a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    d1b4:	b16e      	cbz	r6, d1d2 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    d1b6:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    d1b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
    d1ba:	0789      	lsls	r1, r1, #30
    d1bc:	d4fa      	bmi.n	d1b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    d1be:	4611      	mov	r1, r2
			count_read--;
    d1c0:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    d1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    d1c4:	2a00      	cmp	r2, #0
    d1c6:	d0f5      	beq.n	d1b4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    d1c8:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    d1cc:	460a      	mov	r2, r1
	while (count_read) {
    d1ce:	2e00      	cmp	r6, #0
    d1d0:	d1f1      	bne.n	d1b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    d1d2:	bcf0      	pop	{r4, r5, r6, r7}
    d1d4:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    d1d6:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    d1da:	e7d9      	b.n	d190 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000d1dc <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    d1dc:	b10b      	cbz	r3, d1e2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    d1de:	f7ff bfcd 	b.w	d17c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    d1e2:	4770      	bx	lr

0000d1e4 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    d1e4:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    d1e6:	e9d3 1200 	ldrd	r1, r2, [r3]
    d1ea:	6809      	ldr	r1, [r1, #0]
    d1ec:	4211      	tst	r1, r2
    d1ee:	d100      	bne.n	d1f2 <SPIClass::end()+0xe>
    d1f0:	4770      	bx	lr
void SPIClass::end() {
    d1f2:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    d1f4:	6802      	ldr	r2, [r0, #0]
    d1f6:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    d1f8:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d1fa:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    d1fc:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    d1fe:	7c22      	ldrb	r2, [r4, #16]
    d200:	4413      	add	r3, r2
    d202:	7c18      	ldrb	r0, [r3, #16]
    d204:	f000 ff6e 	bl	e0e4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    d208:	7c62      	ldrb	r2, [r4, #17]
    d20a:	6863      	ldr	r3, [r4, #4]
    d20c:	2105      	movs	r1, #5
    d20e:	4413      	add	r3, r2
    d210:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    d214:	f000 ff66 	bl	e0e4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d218:	6863      	ldr	r3, [r4, #4]
    d21a:	7ca2      	ldrb	r2, [r4, #18]
    d21c:	2105      	movs	r1, #5
    d21e:	4413      	add	r3, r2
	}
}
    d220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    d224:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    d228:	f000 bf5c 	b.w	e0e4 <pinMode>

0000d22c <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    d22c:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    d230:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    d234:	429a      	cmp	r2, r3
    d236:	d902      	bls.n	d23e <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    d238:	4418      	add	r0, r3
    d23a:	7e80      	ldrb	r0, [r0, #26]
    d23c:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    d23e:	f04f 30ff 	mov.w	r0, #4294967295
	}
    d242:	4770      	bx	lr

0000d244 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    d244:	4770      	bx	lr
    d246:	bf00      	nop

0000d248 <TwoWire::write(unsigned char)>:
{
    d248:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    d24a:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    d24e:	b178      	cbz	r0, d270 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    d250:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    d254:	2a88      	cmp	r2, #136	; 0x88
    d256:	d903      	bls.n	d260 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    d258:	2201      	movs	r2, #1
			return 0;
    d25a:	2000      	movs	r0, #0
    d25c:	605a      	str	r2, [r3, #4]
    d25e:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    d260:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    d264:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    d266:	441a      	add	r2, r3
    d268:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    d26c:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    d270:	4770      	bx	lr
    d272:	bf00      	nop

0000d274 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    d274:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    d276:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    d27a:	b90c      	cbnz	r4, d280 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    d27c:	4620      	mov	r0, r4
    d27e:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    d280:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    d284:	4605      	mov	r5, r0
    d286:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    d28a:	42a2      	cmp	r2, r4
    d28c:	d80d      	bhi.n	d2aa <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    d28e:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    d290:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    d294:	4622      	mov	r2, r4
    d296:	4418      	add	r0, r3
    d298:	f001 f980 	bl	e59c <memcpy>
		txBufferLength += quantity;
    d29c:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    d2a0:	4620      	mov	r0, r4
		txBufferLength += quantity;
    d2a2:	4423      	add	r3, r4
    d2a4:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    d2a8:	bd38      	pop	{r3, r4, r5, pc}
    d2aa:	2201      	movs	r2, #1
    d2ac:	6042      	str	r2, [r0, #4]
    d2ae:	e7ef      	b.n	d290 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000d2b0 <TwoWire::force_clock()>:
{
    d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d2b4:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d2b8:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d2ba:	7e01      	ldrb	r1, [r0, #24]
{
    d2bc:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d2be:	7e43      	ldrb	r3, [r0, #25]
{
    d2c0:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d2c2:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d2c6:	4a38      	ldr	r2, [pc, #224]	; (d3a8 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d2c8:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d2cc:	4f37      	ldr	r7, [pc, #220]	; (d3ac <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d2ce:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d2d4:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    d2d8:	0109      	lsls	r1, r1, #4
    d2da:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    d2dc:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d2e0:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d2e4:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d2e8:	011b      	lsls	r3, r3, #4
    d2ea:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    d2ec:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d2ee:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    d2f2:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    d2f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d2fa:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d2fc:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    d2fe:	492c      	ldr	r1, [pc, #176]	; (d3b0 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d300:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d302:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d306:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    d308:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    d30c:	686b      	ldr	r3, [r5, #4]
    d30e:	4333      	orrs	r3, r6
    d310:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d312:	4b28      	ldr	r3, [pc, #160]	; (d3b4 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    d314:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d316:	683a      	ldr	r2, [r7, #0]
    d318:	fba3 3202 	umull	r3, r2, r3, r2
    d31c:	0c92      	lsrs	r2, r2, #18
    d31e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d322:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d324:	684b      	ldr	r3, [r1, #4]
    d326:	1b1b      	subs	r3, r3, r4
    d328:	429a      	cmp	r2, r3
    d32a:	d8fb      	bhi.n	d324 <TwoWire::force_clock()+0x74>
    d32c:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    d330:	4a1f      	ldr	r2, [pc, #124]	; (d3b0 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d332:	f8df e080 	ldr.w	lr, [pc, #128]	; d3b4 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    d336:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    d33a:	4203      	tst	r3, r0
    d33c:	d002      	beq.n	d344 <TwoWire::force_clock()+0x94>
    d33e:	68ab      	ldr	r3, [r5, #8]
    d340:	4233      	tst	r3, r6
    d342:	d12f      	bne.n	d3a4 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    d344:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    d348:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d34a:	6839      	ldr	r1, [r7, #0]
    d34c:	fbae 3101 	umull	r3, r1, lr, r1
    d350:	0c89      	lsrs	r1, r1, #18
    d352:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d356:	6853      	ldr	r3, [r2, #4]
    d358:	1b1b      	subs	r3, r3, r4
    d35a:	4299      	cmp	r1, r3
    d35c:	d8fb      	bhi.n	d356 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    d35e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    d362:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d364:	6839      	ldr	r1, [r7, #0]
    d366:	fbae 3101 	umull	r3, r1, lr, r1
    d36a:	0c89      	lsrs	r1, r1, #18
    d36c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d370:	6853      	ldr	r3, [r2, #4]
    d372:	1b1b      	subs	r3, r3, r4
    d374:	4299      	cmp	r1, r3
    d376:	d8fb      	bhi.n	d370 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    d378:	f1bc 0c01 	subs.w	ip, ip, #1
    d37c:	d1db      	bne.n	d336 <TwoWire::force_clock()+0x86>
	bool ret = false;
    d37e:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d380:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d384:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d386:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    d38a:	68db      	ldr	r3, [r3, #12]
    d38c:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d390:	f899 3019 	ldrb.w	r3, [r9, #25]
    d394:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    d398:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d39c:	6013      	str	r3, [r2, #0]
}
    d39e:	b003      	add	sp, #12
    d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    d3a4:	2001      	movs	r0, #1
    d3a6:	e7eb      	b.n	d380 <TwoWire::force_clock()+0xd0>
    d3a8:	20007c7c 	.word	0x20007c7c
    d3ac:	20008bb0 	.word	0x20008bb0
    d3b0:	e0001000 	.word	0xe0001000
    d3b4:	431bde83 	.word	0x431bde83

0000d3b8 <TwoWire::wait_idle()>:
	return systick_millis_count;
    d3b8:	4a0e      	ldr	r2, [pc, #56]	; (d3f4 <TwoWire::wait_idle()+0x3c>)
{
    d3ba:	b510      	push	{r4, lr}
    d3bc:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d3be:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d3c0:	e005      	b.n	d3ce <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    d3c2:	01db      	lsls	r3, r3, #7
    d3c4:	d407      	bmi.n	d3d6 <TwoWire::wait_idle()+0x1e>
    d3c6:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    d3c8:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    d3ca:	2b10      	cmp	r3, #16
    d3cc:	d808      	bhi.n	d3e0 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    d3ce:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    d3d0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    d3d4:	d1f5      	bne.n	d3c2 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    d3d6:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d3da:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d3dc:	6163      	str	r3, [r4, #20]
}
    d3de:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    d3e0:	f7ff ff66 	bl	d2b0 <TwoWire::force_clock()>
    d3e4:	2800      	cmp	r0, #0
    d3e6:	d0fa      	beq.n	d3de <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    d3e8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d3ec:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d3ee:	6163      	str	r3, [r4, #20]
	return true;
    d3f0:	e7f5      	b.n	d3de <TwoWire::wait_idle()+0x26>
    d3f2:	bf00      	nop
    d3f4:	20025b88 	.word	0x20025b88

0000d3f8 <TwoWire::endTransmission(unsigned char)>:
{
    d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    d3fc:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d400:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    d402:	f1ba 0f00 	cmp.w	sl, #0
    d406:	d04f      	beq.n	d4a8 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    d408:	4681      	mov	r9, r0
    d40a:	4688      	mov	r8, r1
    d40c:	f7ff ffd4 	bl	d3b8 <TwoWire::wait_idle()>
    d410:	2800      	cmp	r0, #0
    d412:	d049      	beq.n	d4a8 <TwoWire::endTransmission(unsigned char)+0xb0>
    d414:	4e37      	ldr	r6, [pc, #220]	; (d4f4 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    d416:	2400      	movs	r4, #0
    d418:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d41a:	e018      	b.n	d44e <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d41c:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    d41e:	0519      	lsls	r1, r3, #20
    d420:	d451      	bmi.n	d4c6 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    d422:	04da      	lsls	r2, r3, #19
    d424:	d455      	bmi.n	d4d2 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    d426:	0558      	lsls	r0, r3, #21
    d428:	d459      	bmi.n	d4de <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    d42a:	0499      	lsls	r1, r3, #18
    d42c:	d441      	bmi.n	d4b2 <TwoWire::endTransmission(unsigned char)+0xba>
    d42e:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    d430:	1bd2      	subs	r2, r2, r7
    d432:	2a32      	cmp	r2, #50	; 0x32
    d434:	d83d      	bhi.n	d4b2 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    d436:	4554      	cmp	r4, sl
    d438:	d907      	bls.n	d44a <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d43a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d43c:	0752      	lsls	r2, r2, #29
    d43e:	d104      	bne.n	d44a <TwoWire::endTransmission(unsigned char)+0x52>
    d440:	059b      	lsls	r3, r3, #22
    d442:	d455      	bmi.n	d4f0 <TwoWire::endTransmission(unsigned char)+0xf8>
    d444:	f1b8 0f00 	cmp.w	r8, #0
    d448:	d052      	beq.n	d4f0 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    d44a:	f002 fea5 	bl	10198 <yield>
		if (tx_index <= tx_len) {
    d44e:	4554      	cmp	r4, sl
    d450:	d8e4      	bhi.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d452:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    d454:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d456:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    d45a:	d4df      	bmi.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
    d45c:	e013      	b.n	d486 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d45e:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    d462:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    d464:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    d46a:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d46c:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d46e:	d01e      	beq.n	d4ae <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    d470:	458a      	cmp	sl, r1
				fifo_used++;
    d472:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d476:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d47a:	d90e      	bls.n	d49a <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d47c:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    d480:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d482:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d484:	d0ca      	beq.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    d486:	2101      	movs	r1, #1
				if (tx_index == 0) {
    d488:	2c00      	cmp	r4, #0
    d48a:	d0e8      	beq.n	d45e <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d48c:	4621      	mov	r1, r4
				fifo_used++;
    d48e:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d490:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    d492:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d494:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d498:	d8f0      	bhi.n	d47c <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d49a:	f1b8 0f00 	cmp.w	r8, #0
    d49e:	d0bd      	beq.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
    d4a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    d4a4:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    d4a6:	e7b9      	b.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    d4a8:	2004      	movs	r0, #4
}
    d4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    d4ae:	2401      	movs	r4, #1
    d4b0:	e7b4      	b.n	d41c <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4b2:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    d4b8:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d4be:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d4c0:	662a      	str	r2, [r5, #96]	; 0x60
}
    d4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4c6:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d4c8:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d4ce:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d4d0:	e7eb      	b.n	d4aa <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4d2:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    d4d4:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d4da:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    d4dc:	e7e5      	b.n	d4aa <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4de:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d4e0:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d4e4:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d4e6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d4ea:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d4ec:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d4ee:	e7dc      	b.n	d4aa <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    d4f0:	2000      	movs	r0, #0
    d4f2:	e7da      	b.n	d4aa <TwoWire::endTransmission(unsigned char)+0xb2>
    d4f4:	20025b88 	.word	0x20025b88

0000d4f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    d4f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4fc:	4683      	mov	fp, r0
    d4fe:	460c      	mov	r4, r1
    d500:	4615      	mov	r5, r2
    d502:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d504:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    d508:	f7ff ff56 	bl	d3b8 <TwoWire::wait_idle()>
    d50c:	2800      	cmp	r0, #0
    d50e:	f000 809e 	beq.w	d64e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    d512:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    d514:	2d01      	cmp	r5, #1
    d516:	f8df 813c 	ldr.w	r8, [pc, #316]	; d654 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d51a:	f240 4601 	movw	r6, #1025	; 0x401
    d51e:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    d520:	f04f 0100 	mov.w	r1, #0
    d524:	bf38      	it	cc
    d526:	2501      	movcc	r5, #1
    d528:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    d52c:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d52e:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    d530:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d534:	e020      	b.n	d578 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    d536:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d53a:	2b87      	cmp	r3, #135	; 0x87
    d53c:	d93f      	bls.n	d5be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d53e:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d542:	0510      	lsls	r0, r2, #20
    d544:	d45a      	bmi.n	d5fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    d546:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    d54a:	d170      	bne.n	d62e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    d54c:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    d550:	eba3 0309 	sub.w	r3, r3, r9
    d554:	2b32      	cmp	r3, #50	; 0x32
    d556:	d86a      	bhi.n	d62e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    d558:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d55c:	42ab      	cmp	r3, r5
    d55e:	d309      	bcc.n	d574 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d560:	2c02      	cmp	r4, #2
    d562:	d907      	bls.n	d574 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d564:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d568:	0759      	lsls	r1, r3, #29
    d56a:	d103      	bne.n	d574 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d56c:	0593      	lsls	r3, r2, #22
    d56e:	d44b      	bmi.n	d608 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    d570:	2f00      	cmp	r7, #0
    d572:	d049      	beq.n	d608 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    d574:	f002 fe10 	bl	10198 <yield>
		if (tx_state < 3) {
    d578:	2c02      	cmp	r4, #2
    d57a:	d8dc      	bhi.n	d536 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    d57c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    d580:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    d584:	075b      	lsls	r3, r3, #29
    d586:	d4d6      	bmi.n	d536 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d588:	1e68      	subs	r0, r5, #1
    d58a:	4422      	add	r2, r4
    d58c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    d590:	b94c      	cbnz	r4, d5a6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d592:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    d596:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    d598:	1b13      	subs	r3, r2, r4
    d59a:	2b03      	cmp	r3, #3
    d59c:	d8cb      	bhi.n	d536 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    d59e:	2c02      	cmp	r4, #2
    d5a0:	d8c9      	bhi.n	d536 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    d5a2:	2c00      	cmp	r4, #0
    d5a4:	d0f5      	beq.n	d592 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    d5a6:	2c01      	cmp	r4, #1
    d5a8:	d037      	beq.n	d61a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d5aa:	b11f      	cbz	r7, d5b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    d5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
    d5b0:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    d5b4:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    d5b8:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    d5ba:	2b87      	cmp	r3, #135	; 0x87
    d5bc:	d8bf      	bhi.n	d53e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d5be:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d5c2:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d5c6:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d5ca:	d0b8      	beq.n	d53e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d5cc:	1c59      	adds	r1, r3, #1
    d5ce:	449c      	add	ip, r3
    d5d0:	3319      	adds	r3, #25
    d5d2:	b2c9      	uxtb	r1, r1
    d5d4:	fa5f fc8c 	uxtb.w	ip, ip
    d5d8:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    d5dc:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d5e0:	1c4a      	adds	r2, r1, #1
    d5e2:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    d5e4:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d5e8:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    d5ea:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d5ee:	d0a6      	beq.n	d53e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d5f0:	2989      	cmp	r1, #137	; 0x89
    d5f2:	d1f3      	bne.n	d5dc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d5f4:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d5f8:	0510      	lsls	r0, r2, #20
    d5fa:	d5a4      	bpl.n	d546 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d5fc:	f8da 3010 	ldr.w	r3, [sl, #16]
    d600:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d604:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d608:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d60c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d610:	d106      	bne.n	d620 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    d612:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    d616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d61a:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    d61e:	e7ba      	b.n	d596 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d620:	f8da 3010 	ldr.w	r3, [sl, #16]
    d624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d628:	f8ca 3010 	str.w	r3, [sl, #16]
    d62c:	e7f1      	b.n	d612 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d62e:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d632:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d636:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d63a:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d63e:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d642:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d646:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d64a:	d0e2      	beq.n	d612 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    d64c:	e7e8      	b.n	d620 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    d64e:	2004      	movs	r0, #4
}
    d650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d654:	20025b88 	.word	0x20025b88

0000d658 <TwoWire::isr()>:
{
    d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d65a:	6906      	ldr	r6, [r0, #16]
{
    d65c:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    d65e:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    d662:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    d666:	d001      	beq.n	d66c <TwoWire::isr()+0x14>
    d668:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    d66c:	07a8      	lsls	r0, r5, #30
    d66e:	d50b      	bpl.n	d688 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    d670:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    d674:	0411      	lsls	r1, r2, #16
    d676:	d53d      	bpl.n	d6f4 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    d678:	2300      	movs	r3, #0
    d67a:	2101      	movs	r1, #1
    d67c:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    d680:	4423      	add	r3, r4
    d682:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    d686:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    d688:	07ea      	lsls	r2, r5, #31
    d68a:	d510      	bpl.n	d6ae <TwoWire::isr()+0x56>
		if (!transmitting) {
    d68c:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    d690:	b1f7      	cbz	r7, d6d0 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    d692:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    d696:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d69a:	42bb      	cmp	r3, r7
    d69c:	d926      	bls.n	d6ec <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    d69e:	1c7b      	adds	r3, r7, #1
    d6a0:	4427      	add	r7, r4
    d6a2:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    d6a6:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    d6aa:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    d6ae:	05ab      	lsls	r3, r5, #22
    d6b0:	d50d      	bpl.n	d6ce <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    d6b2:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    d6b6:	b118      	cbz	r0, d6c0 <TwoWire::isr()+0x68>
    d6b8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    d6bc:	b103      	cbz	r3, d6c0 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    d6be:	4798      	blx	r3
		rxBufferIndex = 0;
    d6c0:	2300      	movs	r3, #0
    d6c2:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    d6c6:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    d6ca:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    d6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    d6d0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    d6d4:	b103      	cbz	r3, d6d8 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    d6d6:	4798      	blx	r3
			txBufferIndex = 0;
    d6d8:	2300      	movs	r3, #0
    d6da:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    d6de:	2301      	movs	r3, #1
    d6e0:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    d6e4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d6e8:	42bb      	cmp	r3, r7
    d6ea:	d8d8      	bhi.n	d69e <TwoWire::isr()+0x46>
			port->STDR = 0;
    d6ec:	2300      	movs	r3, #0
    d6ee:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    d6f2:	e7dc      	b.n	d6ae <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    d6f4:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d6f8:	2b87      	cmp	r3, #135	; 0x87
    d6fa:	d8c5      	bhi.n	d688 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    d6fc:	1c59      	adds	r1, r3, #1
    d6fe:	b2c9      	uxtb	r1, r1
    d700:	e7be      	b.n	d680 <TwoWire::isr()+0x28>
    d702:	bf00      	nop

0000d704 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    d704:	4801      	ldr	r0, [pc, #4]	; (d70c <lpi2c1_isr()+0x8>)
    d706:	f7ff bfa7 	b.w	d658 <TwoWire::isr()>
    d70a:	bf00      	nop
    d70c:	20008bc4 	.word	0x20008bc4

0000d710 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    d710:	4801      	ldr	r0, [pc, #4]	; (d718 <lpi2c3_isr()+0x8>)
    d712:	f7ff bfa1 	b.w	d658 <TwoWire::isr()>
    d716:	bf00      	nop
    d718:	20008d04 	.word	0x20008d04

0000d71c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    d71c:	4801      	ldr	r0, [pc, #4]	; (d724 <lpi2c4_isr()+0x8>)
    d71e:	f7ff bf9b 	b.w	d658 <TwoWire::isr()>
    d722:	bf00      	nop
    d724:	20008e44 	.word	0x20008e44

0000d728 <TwoWire::setClock(unsigned long)>:
{
    d728:	b410      	push	{r4}
	if (frequency < 400000) {
    d72a:	4c14      	ldr	r4, [pc, #80]	; (d77c <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    d72c:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d72e:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    d730:	42a1      	cmp	r1, r4
	port->MCR = 0;
    d732:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    d734:	d814      	bhi.n	d760 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d736:	4c12      	ldr	r4, [pc, #72]	; (d780 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d738:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d73a:	4912      	ldr	r1, [pc, #72]	; (d784 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d73c:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d740:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d742:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d744:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d746:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    d748:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    d74a:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d74c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    d750:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    d752:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    d754:	6218      	str	r0, [r3, #32]
}
    d756:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d75a:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    d75c:	611a      	str	r2, [r3, #16]
}
    d75e:	4770      	bx	lr
	} else if (frequency < 1000000) {
    d760:	4809      	ldr	r0, [pc, #36]	; (d788 <TwoWire::setClock(unsigned long)+0x60>)
    d762:	4281      	cmp	r1, r0
    d764:	d907      	bls.n	d776 <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d766:	4c09      	ldr	r4, [pc, #36]	; (d78c <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d768:	4809      	ldr	r0, [pc, #36]	; (d790 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d76a:	490a      	ldr	r1, [pc, #40]	; (d794 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d76c:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    d76e:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d770:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d772:	62d9      	str	r1, [r3, #44]	; 0x2c
    d774:	e7e8      	b.n	d748 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    d776:	4c08      	ldr	r4, [pc, #32]	; (d798 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    d778:	4808      	ldr	r0, [pc, #32]	; (d79c <TwoWire::setClock(unsigned long)+0x74>)
    d77a:	e7f6      	b.n	d76a <TwoWire::setClock(unsigned long)+0x42>
    d77c:	00061a7f 	.word	0x00061a7f
    d780:	1928373b 	.word	0x1928373b
    d784:	05050bb8 	.word	0x05050bb8
    d788:	000f423f 	.word	0x000f423f
    d78c:	0407090a 	.word	0x0407090a
    d790:	01010960 	.word	0x01010960
    d794:	00057f00 	.word	0x00057f00
    d798:	0c121a1c 	.word	0x0c121a1c
    d79c:	02020e10 	.word	0x02020e10

0000d7a0 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    d7a0:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    d7a2:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    d7a4:	b921      	cbnz	r1, d7b0 <DMAChannel::begin(bool)+0x10>
    d7a6:	6803      	ldr	r3, [r0, #0]
    d7a8:	b113      	cbz	r3, d7b0 <DMAChannel::begin(bool)+0x10>
    d7aa:	7902      	ldrb	r2, [r0, #4]
    d7ac:	2a0f      	cmp	r2, #15
    d7ae:	d93b      	bls.n	d828 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    d7b0:	4c24      	ldr	r4, [pc, #144]	; (d844 <DMAChannel::begin(bool)+0xa4>)
    d7b2:	8821      	ldrh	r1, [r4, #0]
{
    d7b4:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    d7b6:	fa41 f203 	asr.w	r2, r1, r3
    d7ba:	f012 0201 	ands.w	r2, r2, #1
    d7be:	d008      	beq.n	d7d2 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d7c0:	3301      	adds	r3, #1
    d7c2:	2b10      	cmp	r3, #16
    d7c4:	d1f7      	bne.n	d7b6 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    d7c6:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    d7c8:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    d7ca:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    d7cc:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    d7ce:	bc30      	pop	{r4, r5}
    d7d0:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    d7d2:	f04f 0c01 	mov.w	ip, #1
    d7d6:	fa0c fc03 	lsl.w	ip, ip, r3
    d7da:	ea41 010c 	orr.w	r1, r1, ip
    d7de:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    d7e0:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d7e2:	4919      	ldr	r1, [pc, #100]	; (d848 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    d7e4:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d7e8:	4c18      	ldr	r4, [pc, #96]	; (d84c <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d7ea:	4419      	add	r1, r3
	channel = ch;
    d7ec:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d7f0:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d7f2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    d7f4:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    d7f8:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    d7fa:	f240 4482 	movw	r4, #1154	; 0x482
    d7fe:	4914      	ldr	r1, [pc, #80]	; (d850 <DMAChannel::begin(bool)+0xb0>)
    d800:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    d802:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    d806:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    d80a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    d80e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d812:	6003      	str	r3, [r0, #0]
}
    d814:	bc30      	pop	{r4, r5}
	*p++ = 0;
    d816:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    d81a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    d81e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    d822:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    d826:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    d828:	4c06      	ldr	r4, [pc, #24]	; (d844 <DMAChannel::begin(bool)+0xa4>)
    d82a:	8821      	ldrh	r1, [r4, #0]
    d82c:	fa41 f502 	asr.w	r5, r1, r2
    d830:	07ed      	lsls	r5, r5, #31
    d832:	d5bf      	bpl.n	d7b4 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    d834:	4d04      	ldr	r5, [pc, #16]	; (d848 <DMAChannel::begin(bool)+0xa8>)
    d836:	4415      	add	r5, r2
    d838:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    d83c:	d1ba      	bne.n	d7b4 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    d83e:	b662      	cpsie	i
		return;
    d840:	e7c5      	b.n	d7ce <DMAChannel::begin(bool)+0x2e>
    d842:	bf00      	nop
    d844:	20025bba 	.word	0x20025bba
    d848:	02007480 	.word	0x02007480
    d84c:	400fc000 	.word	0x400fc000
    d850:	400e8000 	.word	0x400e8000

0000d854 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    d854:	7903      	ldrb	r3, [r0, #4]
    d856:	2b0f      	cmp	r3, #15
    d858:	d811      	bhi.n	d87e <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    d85a:	4a09      	ldr	r2, [pc, #36]	; (d880 <DMAChannel::release()+0x2c>)
    d85c:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    d85e:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    d860:	4908      	ldr	r1, [pc, #32]	; (d884 <DMAChannel::release()+0x30>)
    d862:	2201      	movs	r2, #1
    d864:	f890 c004 	ldrb.w	ip, [r0, #4]
    d868:	880b      	ldrh	r3, [r1, #0]
    d86a:	fa02 f20c 	lsl.w	r2, r2, ip
    d86e:	ea23 0302 	bic.w	r3, r3, r2
    d872:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    d874:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    d876:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    d878:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    d87a:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    d87c:	6003      	str	r3, [r0, #0]
}
    d87e:	4770      	bx	lr
    d880:	400e8000 	.word	0x400e8000
    d884:	20025bba 	.word	0x20025bba

0000d888 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    d888:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d88a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d88e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d890:	4c0c      	ldr	r4, [pc, #48]	; (d8c4 <EventResponder::runFromInterrupt()+0x3c>)
    d892:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d894:	b180      	cbz	r0, d8b8 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d896:	4e0c      	ldr	r6, [pc, #48]	; (d8c8 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    d898:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    d89a:	6943      	ldr	r3, [r0, #20]
    d89c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    d89e:	b173      	cbz	r3, d8be <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    d8a0:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d8a2:	b902      	cbnz	r2, d8a6 <EventResponder::runFromInterrupt()+0x1e>
    d8a4:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    d8a6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    d8a8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    d8aa:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d8ac:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d8b0:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    d8b2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d8b4:	2800      	cmp	r0, #0
    d8b6:	d1f0      	bne.n	d89a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    d8b8:	b902      	cbnz	r2, d8bc <EventResponder::runFromInterrupt()+0x34>
    d8ba:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    d8bc:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    d8be:	6033      	str	r3, [r6, #0]
    d8c0:	e7ef      	b.n	d8a2 <EventResponder::runFromInterrupt()+0x1a>
    d8c2:	bf00      	nop
    d8c4:	20024cec 	.word	0x20024cec
    d8c8:	20024ce8 	.word	0x20024ce8

0000d8cc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    d8cc:	f7ff bfdc 	b.w	d888 <EventResponder::runFromInterrupt()>

0000d8d0 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    d8d0:	4904      	ldr	r1, [pc, #16]	; (d8e4 <systick_isr+0x14>)
	systick_millis_count++;
    d8d2:	4a05      	ldr	r2, [pc, #20]	; (d8e8 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    d8d4:	6849      	ldr	r1, [r1, #4]
    d8d6:	4b05      	ldr	r3, [pc, #20]	; (d8ec <systick_isr+0x1c>)
    d8d8:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    d8da:	6813      	ldr	r3, [r2, #0]
    d8dc:	3301      	adds	r3, #1
    d8de:	6013      	str	r3, [r2, #0]
}
    d8e0:	4770      	bx	lr
    d8e2:	bf00      	nop
    d8e4:	e0001000 	.word	0xe0001000
    d8e8:	20025b88 	.word	0x20025b88
    d8ec:	20025b84 	.word	0x20025b84

0000d8f0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d8f0:	4608      	mov	r0, r1
    d8f2:	f002 bbbd 	b.w	10070 <usb_serial_putchar>
    d8f6:	bf00      	nop

0000d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    d8f8:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d8fa:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    d8fc:	bf08      	it	eq
    d8fe:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d900:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    d902:	b391      	cbz	r1, d96a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d904:	f04f 0e21 	mov.w	lr, #33	; 0x21
    d908:	e001      	b.n	d90e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d90a:	fa5f fe86 	uxtb.w	lr, r6
    d90e:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    d912:	fbb1 f5f2 	udiv	r5, r1, r2
    d916:	fb02 1415 	mls	r4, r2, r5, r1
    d91a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d91e:	2c09      	cmp	r4, #9
    d920:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    d924:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d928:	bf98      	it	ls
    d92a:	fa5f f48c 	uxtbls.w	r4, ip
    d92e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    d932:	bf88      	it	hi
    d934:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    d936:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d938:	44ec      	add	ip, sp
			n /= base;
    d93a:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d93c:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    d940:	d2e3      	bcs.n	d90a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    d942:	b14b      	cbz	r3, d958 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    d944:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    d948:	222d      	movs	r2, #45	; 0x2d
		i--;
    d94a:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    d94e:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    d952:	446b      	add	r3, sp
    d954:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    d958:	6803      	ldr	r3, [r0, #0]
    d95a:	a901      	add	r1, sp, #4
    d95c:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    d960:	685b      	ldr	r3, [r3, #4]
    d962:	4471      	add	r1, lr
    d964:	4798      	blx	r3
}
    d966:	b00a      	add	sp, #40	; 0x28
    d968:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    d96a:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    d96c:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    d970:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    d974:	e7e5      	b.n	d942 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    d976:	bf00      	nop

0000d978 <Print::print(long)>:
	if (n < 0) {
    d978:	2900      	cmp	r1, #0
    d97a:	db03      	blt.n	d984 <Print::print(long)+0xc>
	uint8_t sign=0;
    d97c:	2300      	movs	r3, #0
	if (base == 0) {
    d97e:	220a      	movs	r2, #10
    d980:	f7ff bfba 	b.w	d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    d984:	4249      	negs	r1, r1
		sign = '-';
    d986:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    d988:	220a      	movs	r2, #10
    d98a:	f7ff bfb5 	b.w	d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d98e:	bf00      	nop

0000d990 <Print::println()>:
{
    d990:	b500      	push	{lr}
	return write(buf, 2);
    d992:	6803      	ldr	r3, [r0, #0]
{
    d994:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d996:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d99a:	2202      	movs	r2, #2
    d99c:	a901      	add	r1, sp, #4
    d99e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d9a0:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d9a4:	4798      	blx	r3
}
    d9a6:	b003      	add	sp, #12
    d9a8:	f85d fb04 	ldr.w	pc, [sp], #4

0000d9ac <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d9ac:	4b05      	ldr	r3, [pc, #20]	; (d9c4 <_write+0x18>)
    d9ae:	2802      	cmp	r0, #2
    d9b0:	bf88      	it	hi
    d9b2:	4603      	movhi	r3, r0
{
    d9b4:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d9b6:	681c      	ldr	r4, [r3, #0]
    d9b8:	4618      	mov	r0, r3
    d9ba:	6863      	ldr	r3, [r4, #4]
}
    d9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d9c0:	4718      	bx	r3
    d9c2:	bf00      	nop
    d9c4:	20008bb4 	.word	0x20008bb4

0000d9c8 <Print::printf(char const*, ...)>:
{
    d9c8:	b40e      	push	{r1, r2, r3}
    d9ca:	b500      	push	{lr}
    d9cc:	b082      	sub	sp, #8
    d9ce:	aa03      	add	r2, sp, #12
    d9d0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    d9d4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    d9d6:	f004 fd83 	bl	124e0 <vdprintf>
}
    d9da:	b002      	add	sp, #8
    d9dc:	f85d eb04 	ldr.w	lr, [sp], #4
    d9e0:	b003      	add	sp, #12
    d9e2:	4770      	bx	lr

0000d9e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    d9e4:	b95a      	cbnz	r2, d9fe <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    d9e6:	6803      	ldr	r3, [r0, #0]
    d9e8:	b2c9      	uxtb	r1, r1
    d9ea:	4a07      	ldr	r2, [pc, #28]	; (da08 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    d9ec:	681b      	ldr	r3, [r3, #0]
    d9ee:	4293      	cmp	r3, r2
{
    d9f0:	b500      	push	{lr}
    d9f2:	d106      	bne.n	da02 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    d9f4:	4608      	mov	r0, r1
}
    d9f6:	f85d eb04 	ldr.w	lr, [sp], #4
    d9fa:	f002 bb39 	b.w	10070 <usb_serial_putchar>
    d9fe:	f7ff bf7b 	b.w	d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    da02:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    da06:	4718      	bx	r3
    da08:	0000d8f1 	.word	0x0000d8f1

0000da0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    da0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da10:	b093      	sub	sp, #76	; 0x4c
    da12:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    da16:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    da1a:	2f01      	cmp	r7, #1
    da1c:	d944      	bls.n	daa8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    da1e:	461c      	mov	r4, r3
	if (n == 0) {
    da20:	4680      	mov	r8, r0
    da22:	4615      	mov	r5, r2
    da24:	ea52 0304 	orrs.w	r3, r2, r4
    da28:	d039      	beq.n	da9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    da2a:	2641      	movs	r6, #65	; 0x41
    da2c:	e001      	b.n	da32 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    da2e:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    da32:	4621      	mov	r1, r4
    da34:	4628      	mov	r0, r5
    da36:	463a      	mov	r2, r7
    da38:	2300      	movs	r3, #0
    da3a:	f002 fd3f 	bl	104bc <__aeabi_uldivmod>
    da3e:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    da42:	f106 0248 	add.w	r2, r6, #72	; 0x48
    da46:	f1bc 0f09 	cmp.w	ip, #9
    da4a:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    da4e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    da52:	446a      	add	r2, sp
    da54:	b2db      	uxtb	r3, r3
    da56:	bf98      	it	ls
    da58:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    da5c:	42bd      	cmp	r5, r7
			i--;
    da5e:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    da62:	4605      	mov	r5, r0
			if (n == 0) break;
    da64:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    da68:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    da6c:	460c      	mov	r4, r1
			if (n == 0) break;
    da6e:	d2de      	bcs.n	da2e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    da70:	f1b9 0f00 	cmp.w	r9, #0
    da74:	d007      	beq.n	da86 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    da76:	3e01      	subs	r6, #1
		buf[i] = '-';
    da78:	222d      	movs	r2, #45	; 0x2d
		i--;
    da7a:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    da7c:	f106 0348 	add.w	r3, r6, #72	; 0x48
    da80:	446b      	add	r3, sp
    da82:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    da86:	f8d8 3000 	ldr.w	r3, [r8]
    da8a:	a901      	add	r1, sp, #4
    da8c:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    da90:	4640      	mov	r0, r8
    da92:	685b      	ldr	r3, [r3, #4]
    da94:	4431      	add	r1, r6
    da96:	4798      	blx	r3
}
    da98:	b013      	add	sp, #76	; 0x4c
    da9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    da9e:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    daa0:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    daa2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    daa6:	e7e3      	b.n	da70 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    daa8:	2000      	movs	r0, #0
}
    daaa:	b013      	add	sp, #76	; 0x4c
    daac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000dab0 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    dab0:	eeb4 0b40 	vcmp.f64	d0, d0
{
    dab4:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    dab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    daba:	4605      	mov	r5, r0
    dabc:	ed2d 8b02 	vpush	{d8}
    dac0:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    dac2:	d67c      	bvs.n	dbbe <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    dac4:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    dac8:	ed9f 6b47 	vldr	d6, [pc, #284]	; dbe8 <Print::printFloat(double, unsigned char)+0x138>
    dacc:	eeb4 7b46 	vcmp.f64	d7, d6
    dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dad4:	dc6b      	bgt.n	dbae <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    dad6:	ed9f 7b46 	vldr	d7, [pc, #280]	; dbf0 <Print::printFloat(double, unsigned char)+0x140>
    dada:	eeb4 0bc7 	vcmpe.f64	d0, d7
    dade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dae2:	dc5a      	bgt.n	db9a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    dae4:	ed9f 7b44 	vldr	d7, [pc, #272]	; dbf8 <Print::printFloat(double, unsigned char)+0x148>
    dae8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    daec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    daf0:	d453      	bmi.n	db9a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    daf2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    daf6:	460c      	mov	r4, r1
    daf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dafc:	d45b      	bmi.n	dbb6 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    dafe:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    db00:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    db04:	2c00      	cmp	r4, #0
    db06:	d05e      	beq.n	dbc6 <Print::printFloat(double, unsigned char)+0x116>
    db08:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    db0c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; dc00 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    db10:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    db14:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    db18:	fa5f f28c 	uxtb.w	r2, ip
    db1c:	42a2      	cmp	r2, r4
    db1e:	d3f7      	bcc.n	db10 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    db20:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    db24:	220a      	movs	r2, #10
    db26:	4628      	mov	r0, r5
    db28:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    db2c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    db30:	ee17 1a90 	vmov	r1, s15
    db34:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    db38:	f7ff fede 	bl	d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    db3c:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    db3e:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    db42:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    db46:	4606      	mov	r6, r0
		buf[0] = '.';
    db48:	bf28      	it	cs
    db4a:	240f      	movcs	r4, #15
    db4c:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    db50:	f10d 0309 	add.w	r3, sp, #9
    db54:	aa02      	add	r2, sp, #8
    db56:	1e61      	subs	r1, r4, #1
    db58:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    db5c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    db60:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    db64:	edcd 7a01 	vstr	s15, [sp, #4]
    db68:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    db6c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    db70:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    db72:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    db76:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    db7a:	4291      	cmp	r1, r2
			remainder -= n; 
    db7c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    db80:	d1ec      	bne.n	db5c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    db82:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    db84:	3401      	adds	r4, #1
		count += write(buf, count);
    db86:	a902      	add	r1, sp, #8
    db88:	4628      	mov	r0, r5
    db8a:	685b      	ldr	r3, [r3, #4]
    db8c:	b2e2      	uxtb	r2, r4
    db8e:	4798      	blx	r3
	}
	return count;
}
    db90:	4630      	mov	r0, r6
    db92:	b006      	add	sp, #24
    db94:	ecbd 8b02 	vpop	{d8}
    db98:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    db9a:	682b      	ldr	r3, [r5, #0]
    db9c:	2203      	movs	r2, #3
    db9e:	491a      	ldr	r1, [pc, #104]	; (dc08 <Print::printFloat(double, unsigned char)+0x158>)
    dba0:	685b      	ldr	r3, [r3, #4]
    dba2:	b006      	add	sp, #24
    dba4:	ecbd 8b02 	vpop	{d8}
    dba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbac:	4718      	bx	r3
    dbae:	6803      	ldr	r3, [r0, #0]
    dbb0:	2203      	movs	r2, #3
    dbb2:	4916      	ldr	r1, [pc, #88]	; (dc0c <Print::printFloat(double, unsigned char)+0x15c>)
    dbb4:	e7f4      	b.n	dba0 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    dbb6:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    dbba:	2301      	movs	r3, #1
    dbbc:	e7a0      	b.n	db00 <Print::printFloat(double, unsigned char)+0x50>
    dbbe:	6803      	ldr	r3, [r0, #0]
    dbc0:	2203      	movs	r2, #3
    dbc2:	4913      	ldr	r1, [pc, #76]	; (dc10 <Print::printFloat(double, unsigned char)+0x160>)
    dbc4:	e7ec      	b.n	dba0 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    dbc6:	ee30 0b07 	vadd.f64	d0, d0, d7
    dbca:	220a      	movs	r2, #10
    dbcc:	4628      	mov	r0, r5
    dbce:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    dbd2:	ee17 1a90 	vmov	r1, s15
}
    dbd6:	b006      	add	sp, #24
    dbd8:	ecbd 8b02 	vpop	{d8}
    dbdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dbe0:	f7ff be8a 	b.w	d8f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    dbe4:	f3af 8000 	nop.w
    dbe8:	ffffffff 	.word	0xffffffff
    dbec:	7fefffff 	.word	0x7fefffff
    dbf0:	e0000000 	.word	0xe0000000
    dbf4:	41efffff 	.word	0x41efffff
    dbf8:	e0000000 	.word	0xe0000000
    dbfc:	c1efffff 	.word	0xc1efffff
    dc00:	9999999a 	.word	0x9999999a
    dc04:	3fb99999 	.word	0x3fb99999
    dc08:	20000c04 	.word	0x20000c04
    dc0c:	20000c00 	.word	0x20000c00
    dc10:	20000bfc 	.word	0x20000bfc

0000dc14 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    dc14:	f002 ba1c 	b.w	10050 <usb_serial_getchar>

0000dc18 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    dc18:	f002 b9b4 	b.w	ff84 <usb_serial_peekchar>

0000dc1c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    dc1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    dc20:	b392      	cbz	r2, dc88 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    dc22:	4617      	mov	r7, r2
    dc24:	fab3 f283 	clz	r2, r3
    dc28:	0952      	lsrs	r2, r2, #5
    dc2a:	b36b      	cbz	r3, dc88 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    dc2c:	f1b3 0801 	subs.w	r8, r3, #1
    dc30:	d025      	beq.n	dc7e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    dc32:	eb07 0a08 	add.w	sl, r7, r8
    dc36:	4683      	mov	fp, r0
    dc38:	4689      	mov	r9, r1
	size_t index = 0;
    dc3a:	4690      	mov	r8, r2
    dc3c:	4c17      	ldr	r4, [pc, #92]	; (dc9c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    dc3e:	4e18      	ldr	r6, [pc, #96]	; (dca0 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    dc40:	6825      	ldr	r5, [r4, #0]
    dc42:	e00b      	b.n	dc5c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    dc44:	f002 fa04 	bl	10050 <usb_serial_getchar>
    if (c >= 0) return c;
    dc48:	2800      	cmp	r0, #0
    dc4a:	da10      	bge.n	dc6e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    dc4c:	f002 faa4 	bl	10198 <yield>
    dc50:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    dc52:	f8db 2008 	ldr.w	r2, [fp, #8]
    dc56:	1b5b      	subs	r3, r3, r5
    dc58:	4293      	cmp	r3, r2
    dc5a:	d21a      	bcs.n	dc92 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    dc5c:	f8db 3000 	ldr.w	r3, [fp]
    dc60:	695b      	ldr	r3, [r3, #20]
    dc62:	42b3      	cmp	r3, r6
    dc64:	d0ee      	beq.n	dc44 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    dc66:	4658      	mov	r0, fp
    dc68:	4798      	blx	r3
    if (c >= 0) return c;
    dc6a:	2800      	cmp	r0, #0
    dc6c:	dbee      	blt.n	dc4c <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    dc6e:	4548      	cmp	r0, r9
    dc70:	d005      	beq.n	dc7e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    dc72:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    dc76:	45ba      	cmp	sl, r7
		index++;
    dc78:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    dc7c:	d1e0      	bne.n	dc40 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    dc7e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    dc80:	4640      	mov	r0, r8
	*buffer = 0;
    dc82:	703b      	strb	r3, [r7, #0]
}
    dc84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    dc88:	f04f 0800 	mov.w	r8, #0
}
    dc8c:	4640      	mov	r0, r8
    dc8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    dc92:	2301      	movs	r3, #1
    dc94:	f88b 300c 	strb.w	r3, [fp, #12]
    dc98:	e7f1      	b.n	dc7e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    dc9a:	bf00      	nop
    dc9c:	20025b88 	.word	0x20025b88
    dca0:	0000dc15 	.word	0x0000dc15

0000dca4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    dca4:	49a2      	ldr	r1, [pc, #648]	; (df30 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    dca6:	4ba3      	ldr	r3, [pc, #652]	; (df34 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    dca8:	4288      	cmp	r0, r1
{
    dcaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    dcae:	4ca2      	ldr	r4, [pc, #648]	; (df38 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    dcb0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    dcb2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    dcb4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    dcb8:	d91b      	bls.n	dcf2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    dcba:	4ba0      	ldr	r3, [pc, #640]	; (df3c <set_arm_clock+0x298>)
    dcbc:	4298      	cmp	r0, r3
    dcbe:	f240 8102 	bls.w	dec6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    dcc2:	1ac3      	subs	r3, r0, r3
    dcc4:	499e      	ldr	r1, [pc, #632]	; (df40 <set_arm_clock+0x29c>)
    dcc6:	0a1b      	lsrs	r3, r3, #8
    dcc8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dccc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    dcd0:	09db      	lsrs	r3, r3, #7
    dcd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dcd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    dcda:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dcde:	428b      	cmp	r3, r1
    dce0:	bf28      	it	cs
    dce2:	460b      	movcs	r3, r1
    dce4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    dce8:	4b96      	ldr	r3, [pc, #600]	; (df44 <set_arm_clock+0x2a0>)
    dcea:	fba3 3707 	umull	r3, r7, r3, r7
    dcee:	08ff      	lsrs	r7, r7, #3
    dcf0:	e004      	b.n	dcfc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    dcf2:	4f95      	ldr	r7, [pc, #596]	; (df48 <set_arm_clock+0x2a4>)
    dcf4:	42b8      	cmp	r0, r7
    dcf6:	bf8c      	ite	hi
    dcf8:	270e      	movhi	r7, #14
    dcfa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dcfc:	498d      	ldr	r1, [pc, #564]	; (df34 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dcfe:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dd02:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd06:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    dd08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    dd0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd10:	d20c      	bcs.n	dd2c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    dd12:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    dd16:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    dd1a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    dd1e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    dd22:	680b      	ldr	r3, [r1, #0]
    dd24:	2b00      	cmp	r3, #0
    dd26:	dafc      	bge.n	dd22 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    dd28:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    dd2c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    dd30:	d124      	bne.n	dd7c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    dd32:	4986      	ldr	r1, [pc, #536]	; (df4c <set_arm_clock+0x2a8>)
    dd34:	690c      	ldr	r4, [r1, #16]
    dd36:	4986      	ldr	r1, [pc, #536]	; (df50 <set_arm_clock+0x2ac>)
    dd38:	43a1      	bics	r1, r4
    dd3a:	f000 80ea 	beq.w	df12 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    dd3e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    dd42:	4634      	mov	r4, r6
    dd44:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    dd48:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    dd4c:	d004      	beq.n	dd58 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    dd4e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    dd52:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    dd54:	4b77      	ldr	r3, [pc, #476]	; (df34 <set_arm_clock+0x290>)
    dd56:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    dd58:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    dd5c:	d007      	beq.n	dd6e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    dd5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    dd62:	4974      	ldr	r1, [pc, #464]	; (df34 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    dd64:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    dd66:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    dd68:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    dd6a:	071a      	lsls	r2, r3, #28
    dd6c:	d4fc      	bmi.n	dd68 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    dd6e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    dd72:	4a70      	ldr	r2, [pc, #448]	; (df34 <set_arm_clock+0x290>)
    dd74:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    dd76:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dd78:	069b      	lsls	r3, r3, #26
    dd7a:	d4fc      	bmi.n	dd76 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    dd7c:	4c75      	ldr	r4, [pc, #468]	; (df54 <set_arm_clock+0x2b0>)
    dd7e:	42a0      	cmp	r0, r4
    dd80:	f200 80ce 	bhi.w	df20 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    dd84:	f04f 0c01 	mov.w	ip, #1
    dd88:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    dd8a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    dd8c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    dd90:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    dd94:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    dd98:	42a2      	cmp	r2, r4
    dd9a:	d818      	bhi.n	ddce <set_arm_clock+0x12a>
		if (div_arm < 8) {
    dd9c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    dda0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    dda4:	f040 808d 	bne.w	dec2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    dda8:	f1bc 0f04 	cmp.w	ip, #4
    ddac:	f200 8091 	bhi.w	ded2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    ddb0:	180a      	adds	r2, r1, r0
    ddb2:	42a2      	cmp	r2, r4
    ddb4:	f200 80a4 	bhi.w	df00 <set_arm_clock+0x25c>
    ddb8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    ddbc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    ddbe:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ddc2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    ddc6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ddca:	42a2      	cmp	r2, r4
    ddcc:	d9e6      	bls.n	dd9c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ddce:	f10c 31ff 	add.w	r1, ip, #4294967295
    ddd2:	028c      	lsls	r4, r1, #10
    ddd4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ddd8:	485f      	ldr	r0, [pc, #380]	; (df58 <set_arm_clock+0x2b4>)
    ddda:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    dddc:	4a5f      	ldr	r2, [pc, #380]	; (df5c <set_arm_clock+0x2b8>)
    ddde:	4290      	cmp	r0, r2
    dde0:	d97f      	bls.n	dee2 <set_arm_clock+0x23e>
    dde2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; df88 <set_arm_clock+0x2e4>
    dde6:	226c      	movs	r2, #108	; 0x6c
    dde8:	485d      	ldr	r0, [pc, #372]	; (df60 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ddea:	4d58      	ldr	r5, [pc, #352]	; (df4c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ddec:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ddf0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    ddf4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ddf8:	f8df c190 	ldr.w	ip, [pc, #400]	; df8c <set_arm_clock+0x2e8>
    ddfc:	ea0e 0c0c 	and.w	ip, lr, ip
    de00:	45d4      	cmp	ip, sl
    de02:	d009      	beq.n	de18 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    de04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    de08:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    de0c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    de10:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    de12:	682a      	ldr	r2, [r5, #0]
    de14:	2a00      	cmp	r2, #0
    de16:	dafc      	bge.n	de12 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    de18:	4a46      	ldr	r2, [pc, #280]	; (df34 <set_arm_clock+0x290>)
    de1a:	6915      	ldr	r5, [r2, #16]
    de1c:	f005 0507 	and.w	r5, r5, #7
    de20:	429d      	cmp	r5, r3
    de22:	d003      	beq.n	de2c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    de24:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    de26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    de28:	03dd      	lsls	r5, r3, #15
    de2a:	d4fc      	bmi.n	de26 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    de2c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    de30:	d009      	beq.n	de46 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    de32:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    de36:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    de3a:	4a3e      	ldr	r2, [pc, #248]	; (df34 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    de3c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    de3e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    de40:	6c93      	ldr	r3, [r2, #72]	; 0x48
    de42:	0799      	lsls	r1, r3, #30
    de44:	d4fc      	bmi.n	de40 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    de46:	4947      	ldr	r1, [pc, #284]	; (df64 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    de48:	4a47      	ldr	r2, [pc, #284]	; (df68 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    de4a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    de4c:	4291      	cmp	r1, r2
    de4e:	d83c      	bhi.n	deca <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    de50:	4b46      	ldr	r3, [pc, #280]	; (df6c <set_arm_clock+0x2c8>)
    de52:	09c9      	lsrs	r1, r1, #7
    de54:	fba3 3101 	umull	r3, r1, r3, r1
    de58:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    de5a:	1e4b      	subs	r3, r1, #1
    de5c:	021b      	lsls	r3, r3, #8
    de5e:	ea86 0203 	eor.w	r2, r6, r3
    de62:	f412 7f40 	tst.w	r2, #768	; 0x300
    de66:	d006      	beq.n	de76 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    de68:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    de6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    de70:	4a30      	ldr	r2, [pc, #192]	; (df34 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    de72:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    de74:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    de76:	4a2f      	ldr	r2, [pc, #188]	; (df34 <set_arm_clock+0x290>)
    de78:	6953      	ldr	r3, [r2, #20]
    de7a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    de7e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    de80:	6c93      	ldr	r3, [r2, #72]	; 0x48
    de82:	069b      	lsls	r3, r3, #26
    de84:	d4fc      	bmi.n	de80 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    de86:	4b3a      	ldr	r3, [pc, #232]	; (df70 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    de88:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    de8a:	fba3 2300 	umull	r2, r3, r3, r0
    de8e:	f04f 32ff 	mov.w	r2, #4294967295
    de92:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    de96:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    de9a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    de9e:	4a35      	ldr	r2, [pc, #212]	; (df74 <set_arm_clock+0x2d0>)
    dea0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    dea2:	4a35      	ldr	r2, [pc, #212]	; (df78 <set_arm_clock+0x2d4>)
    dea4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dea6:	4a35      	ldr	r2, [pc, #212]	; (df7c <set_arm_clock+0x2d8>)
    dea8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    deaa:	d208      	bcs.n	debe <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    deac:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    deb0:	4a21      	ldr	r2, [pc, #132]	; (df38 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    deb2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    deb6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    deb8:	6813      	ldr	r3, [r2, #0]
    deba:	2b00      	cmp	r3, #0
    debc:	dafc      	bge.n	deb8 <set_arm_clock+0x214>
	}

	return frequency;
}
    debe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dec2:	4673      	mov	r3, lr
    dec4:	e762      	b.n	dd8c <set_arm_clock+0xe8>
    dec6:	2712      	movs	r7, #18
    dec8:	e718      	b.n	dcfc <set_arm_clock+0x58>
    deca:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    dece:	2104      	movs	r1, #4
    ded0:	e7c5      	b.n	de5e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ded2:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ded6:	4820      	ldr	r0, [pc, #128]	; (df58 <set_arm_clock+0x2b4>)
    ded8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    deda:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dedc:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dede:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dee2:	4a27      	ldr	r2, [pc, #156]	; (df80 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    dee4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; df90 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dee8:	fba2 2000 	umull	r2, r0, r2, r0
    deec:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    deee:	4825      	ldr	r0, [pc, #148]	; (df84 <set_arm_clock+0x2e0>)
    def0:	2a36      	cmp	r2, #54	; 0x36
    def2:	bf38      	it	cc
    def4:	2236      	movcc	r2, #54	; 0x36
    def6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    defa:	ea42 0a0a 	orr.w	sl, r2, sl
    defe:	e774      	b.n	ddea <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    df00:	ea4f 248c 	mov.w	r4, ip, lsl #10
    df04:	2300      	movs	r3, #0
    df06:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    df0a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    df0e:	46ac      	mov	ip, r5
    df10:	e762      	b.n	ddd8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    df12:	461d      	mov	r5, r3
    df14:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    df18:	4611      	mov	r1, r2
    df1a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    df1e:	e713      	b.n	dd48 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    df20:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    df22:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    df26:	4602      	mov	r2, r0
    df28:	4631      	mov	r1, r6
    df2a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    df2c:	46e6      	mov	lr, ip
    df2e:	e753      	b.n	ddd8 <set_arm_clock+0x134>
    df30:	1f78a400 	.word	0x1f78a400
    df34:	400fc000 	.word	0x400fc000
    df38:	40080000 	.word	0x40080000
    df3c:	23c34600 	.word	0x23c34600
    df40:	004cb223 	.word	0x004cb223
    df44:	51eb851f 	.word	0x51eb851f
    df48:	016e3600 	.word	0x016e3600
    df4c:	400d8000 	.word	0x400d8000
    df50:	80003040 	.word	0x80003040
    df54:	269fb1ff 	.word	0x269fb1ff
    df58:	005b8d80 	.word	0x005b8d80
    df5c:	4df67eff 	.word	0x4df67eff
    df60:	4d3f6400 	.word	0x4d3f6400
    df64:	08f0d17f 	.word	0x08f0d17f
    df68:	2cb4177f 	.word	0x2cb4177f
    df6c:	00e5109f 	.word	0x00e5109f
    df70:	431bde83 	.word	0x431bde83
    df74:	20008bb0 	.word	0x20008bb0
    df78:	20008bac 	.word	0x20008bac
    df7c:	20025474 	.word	0x20025474
    df80:	165e9f81 	.word	0x165e9f81
    df84:	00b71b00 	.word	0x00b71b00
    df88:	8000206c 	.word	0x8000206c
    df8c:	8001307f 	.word	0x8001307f
    df90:	80002000 	.word	0x80002000

0000df94 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    df94:	b900      	cbnz	r0, df98 <delay+0x4>
    df96:	4770      	bx	lr
{
    df98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    df9c:	2101      	movs	r1, #1
    df9e:	4681      	mov	r9, r0
    dfa0:	4c21      	ldr	r4, [pc, #132]	; (e028 <delay+0x94>)
    dfa2:	4d22      	ldr	r5, [pc, #136]	; (e02c <delay+0x98>)
    dfa4:	4e22      	ldr	r6, [pc, #136]	; (e030 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    dfa6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    dfaa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    dfac:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    dfae:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    dfb2:	2b00      	cmp	r3, #0
    dfb4:	d1f7      	bne.n	dfa6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    dfb6:	491f      	ldr	r1, [pc, #124]	; (e034 <delay+0xa0>)
    dfb8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    dfba:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dfbe:	f8df a078 	ldr.w	sl, [pc, #120]	; e038 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    dfc2:	1a1b      	subs	r3, r3, r0
    dfc4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    dfc6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dfca:	f8da 2000 	ldr.w	r2, [sl]
    dfce:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    dfd2:	455a      	cmp	r2, fp
    dfd4:	bf94      	ite	ls
    dfd6:	4490      	addls	r8, r2
    dfd8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    dfda:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    dfde:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    dfe0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    dfe2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    dfe6:	2b00      	cmp	r3, #0
    dfe8:	d1f7      	bne.n	dfda <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    dfea:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dfec:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    dff0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    dff2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dff6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    dffa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    dffe:	bf94      	ite	ls
    e000:	4462      	addls	r2, ip
    e002:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    e006:	eba2 0208 	sub.w	r2, r2, r8
    e00a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    e00e:	d306      	bcc.n	e01e <delay+0x8a>
			if (--msec == 0) return;
    e010:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    e014:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    e018:	d1df      	bne.n	dfda <delay+0x46>
}
    e01a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    e01e:	f002 f8bb 	bl	10198 <yield>
		while ((micros() - start) >= 1000) {
    e022:	4904      	ldr	r1, [pc, #16]	; (e034 <delay+0xa0>)
    e024:	e7d9      	b.n	dfda <delay+0x46>
    e026:	bf00      	nop
    e028:	20025b8c 	.word	0x20025b8c
    e02c:	20025b88 	.word	0x20025b88
    e030:	20025b84 	.word	0x20025b84
    e034:	e0001000 	.word	0xe0001000
    e038:	20025474 	.word	0x20025474

0000e03c <micros>:
{
    e03c:	b430      	push	{r4, r5}
    e03e:	4b0f      	ldr	r3, [pc, #60]	; (e07c <micros+0x40>)
    e040:	f04f 0c01 	mov.w	ip, #1
    e044:	4d0e      	ldr	r5, [pc, #56]	; (e080 <micros+0x44>)
    e046:	4c0f      	ldr	r4, [pc, #60]	; (e084 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    e048:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    e04c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    e04e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    e050:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    e054:	2a00      	cmp	r2, #0
    e056:	d1f7      	bne.n	e048 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    e058:	4b0b      	ldr	r3, [pc, #44]	; (e088 <micros+0x4c>)
    e05a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e05c:	4a0b      	ldr	r2, [pc, #44]	; (e08c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    e05e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    e060:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e064:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    e066:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    e06a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    e06e:	bc30      	pop	{r4, r5}
    e070:	428a      	cmp	r2, r1
    e072:	bf94      	ite	ls
    e074:	1880      	addls	r0, r0, r2
    e076:	1840      	addhi	r0, r0, r1
    e078:	4770      	bx	lr
    e07a:	bf00      	nop
    e07c:	20025b8c 	.word	0x20025b8c
    e080:	20025b88 	.word	0x20025b88
    e084:	20025b84 	.word	0x20025b84
    e088:	e0001000 	.word	0xe0001000
    e08c:	20025474 	.word	0x20025474

0000e090 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    e090:	2836      	cmp	r0, #54	; 0x36
    e092:	d816      	bhi.n	e0c2 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    e094:	0102      	lsls	r2, r0, #4
    e096:	4b10      	ldr	r3, [pc, #64]	; (e0d8 <digitalWrite+0x48>)
    e098:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    e09c:	589b      	ldr	r3, [r3, r2]
{
    e09e:	b410      	push	{r4}
	mask = p->mask;
    e0a0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    e0a2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    e0a4:	4214      	tst	r4, r2
    e0a6:	d005      	beq.n	e0b4 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    e0a8:	b961      	cbnz	r1, e0c4 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    e0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    e0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    e0b2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e0b4:	6883      	ldr	r3, [r0, #8]
		if (val) {
    e0b6:	b151      	cbz	r1, e0ce <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e0b8:	4a08      	ldr	r2, [pc, #32]	; (e0dc <digitalWrite+0x4c>)
}
    e0ba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e0be:	601a      	str	r2, [r3, #0]
}
    e0c0:	4770      	bx	lr
    e0c2:	4770      	bx	lr
    e0c4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    e0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    e0cc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e0ce:	4a04      	ldr	r2, [pc, #16]	; (e0e0 <digitalWrite+0x50>)
}
    e0d0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e0d4:	601a      	str	r2, [r3, #0]
}
    e0d6:	4770      	bx	lr
    e0d8:	20007c7c 	.word	0x20007c7c
    e0dc:	0001f038 	.word	0x0001f038
    e0e0:	00013038 	.word	0x00013038

0000e0e4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    e0e4:	2836      	cmp	r0, #54	; 0x36
    e0e6:	d829      	bhi.n	e13c <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    e0e8:	4b16      	ldr	r3, [pc, #88]	; (e144 <pinMode+0x60>)
    e0ea:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e0ec:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    e0ee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e0f2:	589a      	ldr	r2, [r3, r2]
{
    e0f4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e0f6:	6853      	ldr	r3, [r2, #4]
    e0f8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    e0fa:	d00e      	beq.n	e11a <pinMode+0x36>
    e0fc:	2904      	cmp	r1, #4
    e0fe:	d00c      	beq.n	e11a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    e100:	ea23 0304 	bic.w	r3, r3, r4
    e104:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e106:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    e108:	b1a9      	cbz	r1, e136 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    e10a:	2902      	cmp	r1, #2
    e10c:	d017      	beq.n	e13e <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    e10e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    e110:	bf0c      	ite	eq
    e112:	4a0d      	ldreq	r2, [pc, #52]	; (e148 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    e114:	4a0d      	ldrne	r2, [pc, #52]	; (e14c <pinMode+0x68>)
    e116:	601a      	str	r2, [r3, #0]
    e118:	e007      	b.n	e12a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e11a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    e11c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    e11e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e120:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    e122:	d008      	beq.n	e136 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    e124:	f640 0238 	movw	r2, #2104	; 0x838
    e128:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    e12a:	6843      	ldr	r3, [r0, #4]
    e12c:	2215      	movs	r2, #21
}
    e12e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    e132:	601a      	str	r2, [r3, #0]
}
    e134:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    e136:	2238      	movs	r2, #56	; 0x38
    e138:	601a      	str	r2, [r3, #0]
    e13a:	e7f6      	b.n	e12a <pinMode+0x46>
    e13c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    e13e:	4a04      	ldr	r2, [pc, #16]	; (e150 <pinMode+0x6c>)
    e140:	601a      	str	r2, [r3, #0]
    e142:	e7f2      	b.n	e12a <pinMode+0x46>
    e144:	20007c7c 	.word	0x20007c7c
    e148:	00013038 	.word	0x00013038
    e14c:	00010038 	.word	0x00010038
    e150:	0001f038 	.word	0x0001f038

0000e154 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    e154:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e156:	4a12      	ldr	r2, [pc, #72]	; (e1a0 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    e158:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e15a:	4b12      	ldr	r3, [pc, #72]	; (e1a4 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    e15c:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    e15e:	4d12      	ldr	r5, [pc, #72]	; (e1a8 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    e160:	4c12      	ldr	r4, [pc, #72]	; (e1ac <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    e162:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    e166:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    e16a:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    e16e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    e172:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e176:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    e17a:	6953      	ldr	r3, [r2, #20]
    e17c:	07db      	lsls	r3, r3, #31
    e17e:	d5fc      	bpl.n	e17a <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e180:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    e182:	7823      	ldrb	r3, [r4, #0]
    e184:	07db      	lsls	r3, r3, #31
    e186:	d4f0      	bmi.n	e16a <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    e188:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    e18a:	4905      	ldr	r1, [pc, #20]	; (e1a0 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    e18c:	f043 0301 	orr.w	r3, r3, #1
    e190:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    e192:	680b      	ldr	r3, [r1, #0]
    e194:	07db      	lsls	r3, r3, #31
    e196:	d4fc      	bmi.n	e192 <flash_wait+0x3e>
	__enable_irq();
    e198:	b662      	cpsie	i
}
    e19a:	bc30      	pop	{r4, r5}
    e19c:	4770      	bx	lr
    e19e:	bf00      	nop
    e1a0:	402a8000 	.word	0x402a8000
    e1a4:	24010405 	.word	0x24010405
    e1a8:	000f0001 	.word	0x000f0001
    e1ac:	402a8100 	.word	0x402a8100

0000e1b0 <eeprom_initialize>:
{
    e1b0:	b570      	push	{r4, r5, r6, lr}
    e1b2:	4c0e      	ldr	r4, [pc, #56]	; (e1ec <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    e1b4:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    e1b8:	4e0d      	ldr	r6, [pc, #52]	; (e1f0 <eeprom_initialize+0x40>)
    e1ba:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e1be:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    e1c2:	2100      	movs	r1, #0
    e1c4:	e002      	b.n	e1cc <eeprom_initialize+0x1c>
		} while (p < end);
    e1c6:	42b3      	cmp	r3, r6
			index++;
    e1c8:	b281      	uxth	r1, r0
		} while (p < end);
    e1ca:	d204      	bcs.n	e1d6 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    e1cc:	881a      	ldrh	r2, [r3, #0]
			index++;
    e1ce:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    e1d0:	3302      	adds	r3, #2
    e1d2:	4572      	cmp	r2, lr
    e1d4:	d1f7      	bne.n	e1c6 <eeprom_initialize+0x16>
		sector_index[sector] = index;
    e1d6:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    e1da:	42ac      	cmp	r4, r5
    e1dc:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    e1e0:	d1ed      	bne.n	e1be <eeprom_initialize+0xe>
	initialized = 1;
    e1e2:	4b04      	ldr	r3, [pc, #16]	; (e1f4 <eeprom_initialize+0x44>)
    e1e4:	2201      	movs	r2, #1
    e1e6:	701a      	strb	r2, [r3, #0]
}
    e1e8:	bd70      	pop	{r4, r5, r6, pc}
    e1ea:	bf00      	nop
    e1ec:	20025942 	.word	0x20025942
    e1f0:	607c1000 	.word	0x607c1000
    e1f4:	20025bd6 	.word	0x20025bd6

0000e1f8 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    e1f8:	f241 03bb 	movw	r3, #4283	; 0x10bb
    e1fc:	4298      	cmp	r0, r3
    e1fe:	d82f      	bhi.n	e260 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    e200:	4b18      	ldr	r3, [pc, #96]	; (e264 <eeprom_read_byte+0x6c>)
{
    e202:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    e204:	781b      	ldrb	r3, [r3, #0]
    e206:	4604      	mov	r4, r0
    e208:	b33b      	cbz	r3, e25a <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    e20a:	08a0      	lsrs	r0, r4, #2
    e20c:	4b16      	ldr	r3, [pc, #88]	; (e268 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e20e:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    e212:	4c16      	ldr	r4, [pc, #88]	; (e26c <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    e214:	fba3 2300 	umull	r2, r3, r3, r0
    e218:	1ac2      	subs	r2, r0, r3
    e21a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e21e:	4a14      	ldr	r2, [pc, #80]	; (e270 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    e220:	095b      	lsrs	r3, r3, #5
    e222:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    e226:	469c      	mov	ip, r3
    e228:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e22c:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    e230:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    e232:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e236:	441a      	add	r2, r3
	end = p + sector_index[sector];
    e238:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e23c:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    e23e:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    e242:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    e246:	d907      	bls.n	e258 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    e248:	881a      	ldrh	r2, [r3, #0]
    e24a:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    e24c:	b2d4      	uxtb	r4, r2
    e24e:	428c      	cmp	r4, r1
    e250:	bf08      	it	eq
    e252:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    e254:	459c      	cmp	ip, r3
    e256:	d8f7      	bhi.n	e248 <eeprom_read_byte+0x50>
}
    e258:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    e25a:	f7ff ffa9 	bl	e1b0 <eeprom_initialize>
    e25e:	e7d4      	b.n	e20a <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    e260:	20ff      	movs	r0, #255	; 0xff
}
    e262:	4770      	bx	lr
    e264:	20025bd6 	.word	0x20025bd6
    e268:	04104105 	.word	0x04104105
    e26c:	20025944 	.word	0x20025944
    e270:	000607c0 	.word	0x000607c0

0000e274 <eeprom_read_block>:
	while (len--) {
    e274:	b162      	cbz	r2, e290 <eeprom_read_block+0x1c>
{
    e276:	b570      	push	{r4, r5, r6, lr}
    e278:	4605      	mov	r5, r0
    e27a:	460c      	mov	r4, r1
    e27c:	188e      	adds	r6, r1, r2
		*dest++ = eeprom_read_byte(p++);
    e27e:	4620      	mov	r0, r4
    e280:	3401      	adds	r4, #1
    e282:	f7ff ffb9 	bl	e1f8 <eeprom_read_byte>
    e286:	f805 0b01 	strb.w	r0, [r5], #1
	while (len--) {
    e28a:	42b4      	cmp	r4, r6
    e28c:	d1f7      	bne.n	e27e <eeprom_read_block+0xa>
}
    e28e:	bd70      	pop	{r4, r5, r6, pc}
    e290:	4770      	bx	lr
    e292:	bf00      	nop

0000e294 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e296:	460f      	mov	r7, r1
    e298:	4616      	mov	r6, r2
	__disable_irq();
    e29a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e29c:	4b34      	ldr	r3, [pc, #208]	; (e370 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e29e:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e2a2:	4a34      	ldr	r2, [pc, #208]	; (e374 <eepromemu_flash_write+0xe0>)
    e2a4:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e2a6:	2202      	movs	r2, #2
    e2a8:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    e2aa:	2200      	movs	r2, #0
    e2ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e2b0:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    e2b4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e2b8:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e2bc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e2c0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e2c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e2c8:	2201      	movs	r2, #1
    e2ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e2ce:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e2d2:	1982      	adds	r2, r0, r6
	asm("dsb");
    e2d4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e2d8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e2dc:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    e2e0:	3320      	adds	r3, #32
	} while (location < end_addr);
    e2e2:	429a      	cmp	r2, r3
    e2e4:	d8fa      	bhi.n	e2dc <eepromemu_flash_write+0x48>
	asm("dsb");
    e2e6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e2ea:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e2ee:	4d20      	ldr	r5, [pc, #128]	; (e370 <eepromemu_flash_write+0xdc>)
    e2f0:	696b      	ldr	r3, [r5, #20]
    e2f2:	07da      	lsls	r2, r3, #31
    e2f4:	d5fc      	bpl.n	e2f0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e2f6:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e2f8:	491f      	ldr	r1, [pc, #124]	; (e378 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e2fa:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e2fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e300:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e302:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e306:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e30a:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e30e:	4c18      	ldr	r4, [pc, #96]	; (e370 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e310:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    e314:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e318:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e31c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e320:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e324:	4d15      	ldr	r5, [pc, #84]	; (e37c <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e326:	e001      	b.n	e32c <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    e328:	065b      	lsls	r3, r3, #25
    e32a:	d409      	bmi.n	e340 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e32c:	6963      	ldr	r3, [r4, #20]
    e32e:	f013 0001 	ands.w	r0, r3, #1
    e332:	d0f9      	beq.n	e328 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    e334:	2341      	movs	r3, #65	; 0x41
    e336:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    e338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    e33c:	f7ff bf0a 	b.w	e154 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    e340:	2e08      	cmp	r6, #8
    e342:	d80a      	bhi.n	e35a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    e344:	b136      	cbz	r6, e354 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e346:	4632      	mov	r2, r6
    e348:	4639      	mov	r1, r7
				src += wrlen;
    e34a:	4437      	add	r7, r6
				len -= wrlen;
    e34c:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e34e:	4628      	mov	r0, r5
    e350:	f000 f924 	bl	e59c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    e354:	2340      	movs	r3, #64	; 0x40
    e356:	6163      	str	r3, [r4, #20]
    e358:	e7e8      	b.n	e32c <eepromemu_flash_write+0x98>
    e35a:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    e35e:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e360:	4639      	mov	r1, r7
    e362:	4632      	mov	r2, r6
				src += wrlen;
    e364:	4437      	add	r7, r6
				len -= wrlen;
    e366:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e368:	4628      	mov	r0, r5
    e36a:	f000 f917 	bl	e59c <memcpy>
				len -= wrlen;
    e36e:	e7f1      	b.n	e354 <eepromemu_flash_write+0xc0>
    e370:	402a8000 	.word	0x402a8000
    e374:	5af05af0 	.word	0x5af05af0
    e378:	08180432 	.word	0x08180432
    e37c:	402a8180 	.word	0x402a8180

0000e380 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    e380:	b410      	push	{r4}
	__disable_irq();
    e382:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e384:	4b28      	ldr	r3, [pc, #160]	; (e428 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e386:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e388:	4c28      	ldr	r4, [pc, #160]	; (e42c <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    e38a:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e38c:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e38e:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e392:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e394:	f240 4106 	movw	r1, #1030	; 0x406
    e398:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e39c:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    e39e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e3a2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e3a6:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    e3aa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e3ae:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e3b2:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e3b6:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e3b8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    e3bc:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    e3c0:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    e3c4:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    e3c8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    e3cc:	4299      	cmp	r1, r3
    e3ce:	bf34      	ite	cc
    e3d0:	2101      	movcc	r1, #1
    e3d2:	2180      	movcs	r1, #128	; 0x80
    e3d4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    e3d8:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    e3da:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    e3de:	461a      	mov	r2, r3
	} while (location < end_addr);
    e3e0:	f103 0320 	add.w	r3, r3, #32
    e3e4:	d1f8      	bne.n	e3d8 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    e3e6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e3ea:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e3ee:	4a0e      	ldr	r2, [pc, #56]	; (e428 <eepromemu_flash_erase_sector+0xa8>)
    e3f0:	6953      	ldr	r3, [r2, #20]
    e3f2:	07d9      	lsls	r1, r3, #31
    e3f4:	d5fc      	bpl.n	e3f0 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e3f6:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e3f8:	490d      	ldr	r1, [pc, #52]	; (e430 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e3fa:	4b0e      	ldr	r3, [pc, #56]	; (e434 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e3fc:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e3fe:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e400:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e404:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e408:	4907      	ldr	r1, [pc, #28]	; (e428 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e40a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e40e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e412:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e416:	694b      	ldr	r3, [r1, #20]
    e418:	07db      	lsls	r3, r3, #31
    e41a:	d5fc      	bpl.n	e416 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e41c:	2301      	movs	r3, #1
	flash_wait();
}
    e41e:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e422:	614b      	str	r3, [r1, #20]
	flash_wait();
    e424:	f7ff be96 	b.w	e154 <flash_wait>
    e428:	402a8000 	.word	0x402a8000
    e42c:	5af05af0 	.word	0x5af05af0
    e430:	08180420 	.word	0x08180420
    e434:	00fff000 	.word	0x00fff000

0000e438 <eeprom_write_byte>:
	if (addr > E2END) return;
    e438:	f241 03bb 	movw	r3, #4283	; 0x10bb
    e43c:	4298      	cmp	r0, r3
    e43e:	f200 8089 	bhi.w	e554 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    e442:	4b46      	ldr	r3, [pc, #280]	; (e55c <eeprom_write_byte+0x124>)
{
    e444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    e448:	781b      	ldrb	r3, [r3, #0]
{
    e44a:	b0c2      	sub	sp, #264	; 0x108
    e44c:	4605      	mov	r5, r0
    e44e:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    e450:	2b00      	cmp	r3, #0
    e452:	d07c      	beq.n	e54e <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    e454:	08ab      	lsrs	r3, r5, #2
    e456:	4e42      	ldr	r6, [pc, #264]	; (e560 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e458:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    e45c:	4f41      	ldr	r7, [pc, #260]	; (e564 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    e45e:	fba6 2603 	umull	r2, r6, r6, r3
    e462:	1b9a      	subs	r2, r3, r6
    e464:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    e468:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e46a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    e46e:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    e472:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e474:	4b3c      	ldr	r3, [pc, #240]	; (e568 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    e476:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e47a:	4433      	add	r3, r6
	end = p + sector_index[sector];
    e47c:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e47e:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    e482:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    e486:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    e48a:	d964      	bls.n	e556 <eeprom_write_byte+0x11e>
    e48c:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    e48e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    e492:	881a      	ldrh	r2, [r3, #0]
    e494:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    e496:	b2d1      	uxtb	r1, r2
    e498:	42a9      	cmp	r1, r5
    e49a:	bf08      	it	eq
    e49c:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    e4a0:	4298      	cmp	r0, r3
    e4a2:	d8f6      	bhi.n	e492 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    e4a4:	45e1      	cmp	r9, ip
    e4a6:	d041      	beq.n	e52c <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    e4a8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    e4ac:	d341      	bcc.n	e532 <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    e4ae:	ac02      	add	r4, sp, #8
    e4b0:	f44f 7280 	mov.w	r2, #256	; 0x100
    e4b4:	21ff      	movs	r1, #255	; 0xff
    e4b6:	4620      	mov	r0, r4
    e4b8:	f004 f8fe 	bl	126b8 <memset>
		while (p < end) {
    e4bc:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    e4c0:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e4c4:	4642      	mov	r2, r8
    e4c6:	4298      	cmp	r0, r3
    e4c8:	bf34      	ite	cc
    e4ca:	2001      	movcc	r0, #1
    e4cc:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    e4d0:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    e4d4:	4613      	mov	r3, r2
    e4d6:	3202      	adds	r2, #2
    e4d8:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    e4da:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    e4dc:	b2d9      	uxtb	r1, r3
    e4de:	ea4f 2313 	mov.w	r3, r3, lsr #8
    e4e2:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    e4e4:	d1f6      	bne.n	e4d4 <eeprom_write_byte+0x9c>
		buf[offset] = data;
    e4e6:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    e4ea:	f10d 0907 	add.w	r9, sp, #7
    e4ee:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    e4f2:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    e4f4:	464c      	mov	r4, r9
    e4f6:	4640      	mov	r0, r8
    e4f8:	f7ff ff42 	bl	e380 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    e4fc:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    e500:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    e504:	2202      	movs	r2, #2
    e506:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    e50a:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    e50c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    e510:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    e514:	d006      	beq.n	e524 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    e516:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    e51a:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    e51c:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    e520:	f7ff feb8 	bl	e294 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    e524:	45a2      	cmp	sl, r4
    e526:	d1e9      	bne.n	e4fc <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    e528:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    e52c:	b042      	add	sp, #264	; 0x108
    e52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    e532:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    e536:	a902      	add	r1, sp, #8
    e538:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    e53a:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    e53c:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    e540:	f7ff fea8 	bl	e294 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    e544:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    e548:	b042      	add	sp, #264	; 0x108
    e54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    e54e:	f7ff fe2f 	bl	e1b0 <eeprom_initialize>
    e552:	e77f      	b.n	e454 <eeprom_write_byte+0x1c>
    e554:	4770      	bx	lr
	uint8_t olddata=0xFF;
    e556:	f04f 0cff 	mov.w	ip, #255	; 0xff
    e55a:	e7a3      	b.n	e4a4 <eeprom_write_byte+0x6c>
    e55c:	20025bd6 	.word	0x20025bd6
    e560:	04104105 	.word	0x04104105
    e564:	20025944 	.word	0x20025944
    e568:	000607c0 	.word	0x000607c0

0000e56c <eeprom_write_block>:
	while (len--) {
    e56c:	b162      	cbz	r2, e588 <eeprom_write_block+0x1c>
{
    e56e:	b570      	push	{r4, r5, r6, lr}
    e570:	4605      	mov	r5, r0
    e572:	460c      	mov	r4, r1
    e574:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    e576:	4620      	mov	r0, r4
    e578:	3401      	adds	r4, #1
    e57a:	f815 1b01 	ldrb.w	r1, [r5], #1
    e57e:	f7ff ff5b 	bl	e438 <eeprom_write_byte>
	while (len--) {
    e582:	42b4      	cmp	r4, r6
    e584:	d1f7      	bne.n	e576 <eeprom_write_block+0xa>
}
    e586:	bd70      	pop	{r4, r5, r6, pc}
    e588:	4770      	bx	lr
    e58a:	bf00      	nop

0000e58c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e58c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e58e:	f7f2 f90d 	bl	7ac <setup>
	while (1) {
		loop();
    e592:	f7f1 fe3f 	bl	214 <loop>
		yield();
    e596:	f001 fdff 	bl	10198 <yield>
	while (1) {
    e59a:	e7fa      	b.n	e592 <main+0x6>

0000e59c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e59c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e59e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e5a2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e5a6:	d16d      	bne.n	e684 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e5a8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e5aa:	d341      	bcc.n	e630 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e5ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e5b0:	f840 3b04 	str.w	r3, [r0], #4
    e5b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e5b8:	f840 3b04 	str.w	r3, [r0], #4
    e5bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e5c0:	f840 3b04 	str.w	r3, [r0], #4
    e5c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e5c8:	f840 3b04 	str.w	r3, [r0], #4
    e5cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e5d0:	f840 3b04 	str.w	r3, [r0], #4
    e5d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e5d8:	f840 3b04 	str.w	r3, [r0], #4
    e5dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e5e0:	f840 3b04 	str.w	r3, [r0], #4
    e5e4:	f851 3b04 	ldr.w	r3, [r1], #4
    e5e8:	f840 3b04 	str.w	r3, [r0], #4
    e5ec:	f851 3b04 	ldr.w	r3, [r1], #4
    e5f0:	f840 3b04 	str.w	r3, [r0], #4
    e5f4:	f851 3b04 	ldr.w	r3, [r1], #4
    e5f8:	f840 3b04 	str.w	r3, [r0], #4
    e5fc:	f851 3b04 	ldr.w	r3, [r1], #4
    e600:	f840 3b04 	str.w	r3, [r0], #4
    e604:	f851 3b04 	ldr.w	r3, [r1], #4
    e608:	f840 3b04 	str.w	r3, [r0], #4
    e60c:	f851 3b04 	ldr.w	r3, [r1], #4
    e610:	f840 3b04 	str.w	r3, [r0], #4
    e614:	f851 3b04 	ldr.w	r3, [r1], #4
    e618:	f840 3b04 	str.w	r3, [r0], #4
    e61c:	f851 3b04 	ldr.w	r3, [r1], #4
    e620:	f840 3b04 	str.w	r3, [r0], #4
    e624:	f851 3b04 	ldr.w	r3, [r1], #4
    e628:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e62c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e62e:	d2bd      	bcs.n	e5ac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e630:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e632:	d311      	bcc.n	e658 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e634:	f851 3b04 	ldr.w	r3, [r1], #4
    e638:	f840 3b04 	str.w	r3, [r0], #4
    e63c:	f851 3b04 	ldr.w	r3, [r1], #4
    e640:	f840 3b04 	str.w	r3, [r0], #4
    e644:	f851 3b04 	ldr.w	r3, [r1], #4
    e648:	f840 3b04 	str.w	r3, [r0], #4
    e64c:	f851 3b04 	ldr.w	r3, [r1], #4
    e650:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e654:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e656:	d2ed      	bcs.n	e634 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e658:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e65a:	d305      	bcc.n	e668 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e65c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e660:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e664:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e666:	d2f9      	bcs.n	e65c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e668:	3204      	adds	r2, #4
	beq	.Ldone
    e66a:	d008      	beq.n	e67e <memcpy+0xe2>

	lsls	r2, r2, #31
    e66c:	07d2      	lsls	r2, r2, #31
	itt ne
    e66e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e670:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e674:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e678:	d301      	bcc.n	e67e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e67a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e67c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e67e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e680:	4770      	bx	lr
    e682:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e684:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    e686:	d313      	bcc.n	e6b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e688:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e68a:	d08d      	beq.n	e5a8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e68c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e690:	d08a      	beq.n	e5a8 <memcpy+0xc>

	rsb	r3, #4
    e692:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e696:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e698:	07db      	lsls	r3, r3, #31
	itt ne
    e69a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e69c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e6a0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e6a4:	d380      	bcc.n	e5a8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e6a6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e6aa:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e6ae:	e77b      	b.n	e5a8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e6b0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e6b2:	d3d9      	bcc.n	e668 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e6b4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e6b6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e6ba:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e6be:	d2f9      	bcs.n	e6b4 <memcpy+0x118>

	ldrb	r3, [r1]
    e6c0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e6c2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e6c4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e6c6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e6c8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e6ca:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e6cc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e6ce:	4770      	bx	lr

0000e6d0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    e6d0:	f002 b87a 	b.w	107c8 <free>

0000e6d4 <ultoa>:
	int i=0, j;
    e6d4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    e6d8:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    e6da:	4666      	mov	r6, ip
	int i=0, j;
    e6dc:	2400      	movs	r4, #0
    e6de:	e000      	b.n	e6e2 <ultoa+0xe>
		i++;
    e6e0:	3401      	adds	r4, #1
		digit = val % radix;
    e6e2:	fbb0 f5f2 	udiv	r5, r0, r2
    e6e6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e6ea:	2b09      	cmp	r3, #9
    e6ec:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    e6f0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    e6f4:	fa5f fe8e 	uxtb.w	lr, lr
    e6f8:	bf98      	it	ls
    e6fa:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    e6fe:	4290      	cmp	r0, r2
		val /= radix;
    e700:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e702:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    e706:	d2eb      	bcs.n	e6e0 <ultoa+0xc>
	buf[i + 1] = 0;
    e708:	1c63      	adds	r3, r4, #1
    e70a:	2200      	movs	r2, #0
    e70c:	18c8      	adds	r0, r1, r3
    e70e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    e710:	b17c      	cbz	r4, e732 <ultoa+0x5e>
		t = buf[j];
    e712:	4662      	mov	r2, ip
    e714:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    e718:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    e71c:	eba1 030c 	sub.w	r3, r1, ip
    e720:	3202      	adds	r2, #2
		buf[j] = buf[i];
    e722:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    e726:	3b01      	subs	r3, #1
    e728:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    e72a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    e72c:	4423      	add	r3, r4
    e72e:	429a      	cmp	r2, r3
    e730:	dbef      	blt.n	e712 <ultoa+0x3e>
}
    e732:	4608      	mov	r0, r1
    e734:	bd70      	pop	{r4, r5, r6, pc}
    e736:	bf00      	nop

0000e738 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e738:	eeb4 0a40 	vcmp.f32	s0, s0
{
    e73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    e740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    e744:	4616      	mov	r6, r2
	int awidth = abs(width);
    e746:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    e74a:	4607      	mov	r7, r0
    e74c:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    e750:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    e754:	eeb0 8a40 	vmov.f32	s16, s0
    e758:	b085      	sub	sp, #20
	if (isnanf(val)) {
    e75a:	f180 8148 	bvs.w	e9ee <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e75e:	eef0 7ac0 	vabs.f32	s15, s0
    e762:	ed9f 7ac5 	vldr	s14, [pc, #788]	; ea78 <dtostrf+0x340>
    e766:	eef4 7a47 	vcmp.f32	s15, s14
    e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e76e:	dd29      	ble.n	e7c4 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    e770:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e778:	f100 80ed 	bmi.w	e956 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e77c:	2a03      	cmp	r2, #3
    e77e:	f340 8091 	ble.w	e8a4 <dtostrf+0x16c>
    e782:	2303      	movs	r3, #3
		if (width<0) {
    e784:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e786:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    e78a:	f2c0 8085 	blt.w	e898 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e78e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e796:	f100 816a 	bmi.w	ea6e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e79a:	2149      	movs	r1, #73	; 0x49
    e79c:	234e      	movs	r3, #78	; 0x4e
    e79e:	2046      	movs	r0, #70	; 0x46
    e7a0:	1cf4      	adds	r4, r6, #3
    e7a2:	7031      	strb	r1, [r6, #0]
    e7a4:	70b0      	strb	r0, [r6, #2]
    e7a6:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e7a8:	b122      	cbz	r2, e7b4 <dtostrf+0x7c>
			*buf++ = ' ';
    e7aa:	4620      	mov	r0, r4
    e7ac:	2120      	movs	r1, #32
    e7ae:	4414      	add	r4, r2
    e7b0:	f003 ff82 	bl	126b8 <memset>
			awidth--;
		}
		*buf = 0;
    e7b4:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e7b6:	4620      	mov	r0, r4
		*buf = 0;
    e7b8:	7023      	strb	r3, [r4, #0]
}
    e7ba:	b005      	add	sp, #20
    e7bc:	ecbd 8b02 	vpop	{d8}
    e7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    e7c4:	4689      	mov	r9, r1
    e7c6:	460d      	mov	r5, r1
    e7c8:	aa02      	add	r2, sp, #8
    e7ca:	a901      	add	r1, sp, #4
    e7cc:	4648      	mov	r0, r9
    e7ce:	f003 fc9f 	bl	12110 <fcvtf>
	if (precision == 0 && decpt == 0) {
    e7d2:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    e7d6:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    e7d8:	ea59 030a 	orrs.w	r3, r9, sl
    e7dc:	d172      	bne.n	e8c4 <dtostrf+0x18c>
		decpt++;
    e7de:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    e7e0:	7802      	ldrb	r2, [r0, #0]
    e7e2:	4ca6      	ldr	r4, [pc, #664]	; (ea7c <dtostrf+0x344>)
		decpt++;
    e7e4:	469a      	mov	sl, r3
    e7e6:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    e7e8:	4ba5      	ldr	r3, [pc, #660]	; (ea80 <dtostrf+0x348>)
		decpt++;
    e7ea:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    e7ec:	2a34      	cmp	r2, #52	; 0x34
    e7ee:	bf88      	it	hi
    e7f0:	461c      	movhi	r4, r3
	if (sign) reqd++;
    e7f2:	9b02      	ldr	r3, [sp, #8]
    e7f4:	2b00      	cmp	r3, #0
    e7f6:	d07d      	beq.n	e8f4 <dtostrf+0x1bc>
    e7f8:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    e7fc:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e800:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e804:	f1bb 0f00 	cmp.w	fp, #0
    e808:	f340 80a1 	ble.w	e94e <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    e80c:	465a      	mov	r2, fp
    e80e:	2120      	movs	r1, #32
    e810:	4630      	mov	r0, r6
		e += pad;
    e812:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e814:	f003 ff50 	bl	126b8 <memset>
    e818:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    e81c:	222d      	movs	r2, #45	; 0x2d
    e81e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    e822:	f1ba 0f00 	cmp.w	sl, #0
    e826:	d177      	bne.n	e918 <dtostrf+0x1e0>
    e828:	f1b9 0f00 	cmp.w	r9, #0
    e82c:	d006      	beq.n	e83c <dtostrf+0x104>
		*p++ = '0';
    e82e:	461a      	mov	r2, r3
    e830:	2130      	movs	r1, #48	; 0x30
    e832:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    e836:	212e      	movs	r1, #46	; 0x2e
    e838:	7059      	strb	r1, [r3, #1]
    e83a:	4613      	mov	r3, r2
	while (p < e) {
    e83c:	42ab      	cmp	r3, r5
    e83e:	d21f      	bcs.n	e880 <dtostrf+0x148>
		*p++ = *s++;
    e840:	46a4      	mov	ip, r4
    e842:	4619      	mov	r1, r3
    e844:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e848:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e84c:	42a9      	cmp	r1, r5
    e84e:	d018      	beq.n	e882 <dtostrf+0x14a>
    e850:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e852:	202e      	movs	r0, #46	; 0x2e
    e854:	3c01      	subs	r4, #1
    e856:	e00b      	b.n	e870 <dtostrf+0x138>
    e858:	7058      	strb	r0, [r3, #1]
    e85a:	3302      	adds	r3, #2
		if (p == e) break;
    e85c:	3c01      	subs	r4, #1
	while (p < e) {
    e85e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e860:	4619      	mov	r1, r3
	while (p < e) {
    e862:	d20d      	bcs.n	e880 <dtostrf+0x148>
		*p++ = *s++;
    e864:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e868:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e86c:	42a9      	cmp	r1, r5
    e86e:	d008      	beq.n	e882 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    e870:	9401      	str	r4, [sp, #4]
    e872:	2c00      	cmp	r4, #0
    e874:	d0f0      	beq.n	e858 <dtostrf+0x120>
    e876:	460b      	mov	r3, r1
		if (p == e) break;
    e878:	3c01      	subs	r4, #1
	while (p < e) {
    e87a:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e87c:	4619      	mov	r1, r3
	while (p < e) {
    e87e:	d3f1      	bcc.n	e864 <dtostrf+0x12c>
    e880:	461d      	mov	r5, r3
	if (width < 0) {
    e882:	2f00      	cmp	r7, #0
    e884:	db6b      	blt.n	e95e <dtostrf+0x226>
	return buf;
    e886:	4634      	mov	r4, r6
	*p = 0;
    e888:	2300      	movs	r3, #0
}
    e88a:	4620      	mov	r0, r4
	*p = 0;
    e88c:	702b      	strb	r3, [r5, #0]
}
    e88e:	b005      	add	sp, #20
    e890:	ecbd 8b02 	vpop	{d8}
    e894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    e898:	b122      	cbz	r2, e8a4 <dtostrf+0x16c>
				*buf++ = ' ';
    e89a:	4630      	mov	r0, r6
    e89c:	2120      	movs	r1, #32
    e89e:	4416      	add	r6, r2
    e8a0:	f003 ff0a 	bl	126b8 <memset>
		if (val<0) *buf++ = '-';
    e8a4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e8ac:	f140 80bd 	bpl.w	ea2a <dtostrf+0x2f2>
    e8b0:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e8b2:	2249      	movs	r2, #73	; 0x49
    e8b4:	234e      	movs	r3, #78	; 0x4e
    e8b6:	2046      	movs	r0, #70	; 0x46
    e8b8:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    e8ba:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e8bc:	70f0      	strb	r0, [r6, #3]
    e8be:	7072      	strb	r2, [r6, #1]
    e8c0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e8c2:	e777      	b.n	e7b4 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    e8c4:	f1ca 0300 	rsb	r3, sl, #0
    e8c8:	4599      	cmp	r9, r3
    e8ca:	da57      	bge.n	e97c <dtostrf+0x244>
		decpt = -precision;
    e8cc:	f04f 0801 	mov.w	r8, #1
    e8d0:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    e8d4:	4c69      	ldr	r4, [pc, #420]	; (ea7c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    e8d6:	45c2      	cmp	sl, r8
		decpt = -precision;
    e8d8:	4640      	mov	r0, r8
    e8da:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    e8de:	bfb8      	it	lt
    e8e0:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e8e4:	f1ba 0f00 	cmp.w	sl, #0
    e8e8:	d152      	bne.n	e990 <dtostrf+0x258>
	if (sign) reqd++;
    e8ea:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    e8ec:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    e8f0:	2b00      	cmp	r3, #0
    e8f2:	d181      	bne.n	e7f8 <dtostrf+0xc0>
	pad = width - reqd;
    e8f4:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e8f8:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e8fc:	f1bb 0f00 	cmp.w	fp, #0
    e900:	dd27      	ble.n	e952 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    e902:	465a      	mov	r2, fp
    e904:	2120      	movs	r1, #32
    e906:	4630      	mov	r0, r6
		e += pad;
    e908:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e90a:	f003 fed5 	bl	126b8 <memset>
    e90e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    e912:	f1ba 0f00 	cmp.w	sl, #0
    e916:	d087      	beq.n	e828 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    e918:	f1ba 0f00 	cmp.w	sl, #0
    e91c:	da8e      	bge.n	e83c <dtostrf+0x104>
    e91e:	f1b9 0f00 	cmp.w	r9, #0
    e922:	d08b      	beq.n	e83c <dtostrf+0x104>
		*p++ = '0';
    e924:	4618      	mov	r0, r3
		*p++ = '.';
    e926:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    e928:	2130      	movs	r1, #48	; 0x30
    e92a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    e92e:	705a      	strb	r2, [r3, #1]
    e930:	4602      	mov	r2, r0
    e932:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    e934:	3301      	adds	r3, #1
			*p++ = '0';
    e936:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    e93a:	d1fb      	bne.n	e934 <dtostrf+0x1fc>
			*p++ = '0';
    e93c:	f1ba 0f00 	cmp.w	sl, #0
    e940:	9301      	str	r3, [sp, #4]
    e942:	f1ca 0300 	rsb	r3, sl, #0
    e946:	bfa8      	it	ge
    e948:	2301      	movge	r3, #1
    e94a:	4403      	add	r3, r0
    e94c:	e776      	b.n	e83c <dtostrf+0x104>
	if (pad > 0) {
    e94e:	4633      	mov	r3, r6
    e950:	e764      	b.n	e81c <dtostrf+0xe4>
    e952:	4633      	mov	r3, r6
    e954:	e765      	b.n	e822 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e956:	2a04      	cmp	r2, #4
    e958:	ddaa      	ble.n	e8b0 <dtostrf+0x178>
    e95a:	2304      	movs	r3, #4
    e95c:	e712      	b.n	e784 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    e95e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    e960:	f1b8 0f00 	cmp.w	r8, #0
    e964:	ea6f 0208 	mvn.w	r2, r8
    e968:	da8d      	bge.n	e886 <dtostrf+0x14e>
    e96a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e96e:	2120      	movs	r1, #32
    e970:	4628      	mov	r0, r5
    e972:	3201      	adds	r2, #1
    e974:	4415      	add	r5, r2
    e976:	f003 fe9f 	bl	126b8 <memset>
    e97a:	e784      	b.n	e886 <dtostrf+0x14e>
	reqd = strlen(s);
    e97c:	f004 fa80 	bl	12e80 <strlen>
    e980:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    e982:	45c2      	cmp	sl, r8
    e984:	bfb8      	it	lt
    e986:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e98a:	f1ba 0f00 	cmp.w	sl, #0
    e98e:	d0ac      	beq.n	e8ea <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    e990:	f1ba 0f00 	cmp.w	sl, #0
    e994:	f6bf af2d 	bge.w	e7f2 <dtostrf+0xba>
    e998:	f1b9 0f00 	cmp.w	r9, #0
    e99c:	f43f af29 	beq.w	e7f2 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    e9a0:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    e9a4:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    e9a8:	4283      	cmp	r3, r0
    e9aa:	f4bf af22 	bcs.w	e7f2 <dtostrf+0xba>
			while (newPrecision > 0) {
    e9ae:	f1b9 0f00 	cmp.w	r9, #0
    e9b2:	dd05      	ble.n	e9c0 <dtostrf+0x288>
				val *= 10.0f;
    e9b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    e9b8:	3d01      	subs	r5, #1
				val *= 10.0f;
    e9ba:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    e9be:	d1fb      	bne.n	e9b8 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e9c0:	aa02      	add	r2, sp, #8
    e9c2:	eeb0 0a48 	vmov.f32	s0, s16
    e9c6:	4628      	mov	r0, r5
    e9c8:	a903      	add	r1, sp, #12
    e9ca:	f003 fba1 	bl	12110 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e9ce:	f8dd a004 	ldr.w	sl, [sp, #4]
    e9d2:	9b03      	ldr	r3, [sp, #12]
    e9d4:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e9d8:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e9da:	eba3 030a 	sub.w	r3, r3, sl
    e9de:	4293      	cmp	r3, r2
    e9e0:	f47f af07 	bne.w	e7f2 <dtostrf+0xba>
    e9e4:	f10a 0a01 	add.w	sl, sl, #1
    e9e8:	f8cd a004 	str.w	sl, [sp, #4]
    e9ec:	e701      	b.n	e7f2 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    e9ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e9f6:	bf4c      	ite	mi
    e9f8:	2304      	movmi	r3, #4
    e9fa:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e9fc:	4293      	cmp	r3, r2
    e9fe:	da22      	bge.n	ea46 <dtostrf+0x30e>
		if (width<0) {
    ea00:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ea02:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    ea06:	db18      	blt.n	ea3a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea08:	ee10 3a10 	vmov	r3, s0
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	da02      	bge.n	ea16 <dtostrf+0x2de>
    ea10:	232d      	movs	r3, #45	; 0x2d
    ea12:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea16:	234e      	movs	r3, #78	; 0x4e
    ea18:	2141      	movs	r1, #65	; 0x41
    ea1a:	1cf4      	adds	r4, r6, #3
    ea1c:	7033      	strb	r3, [r6, #0]
    ea1e:	7071      	strb	r1, [r6, #1]
    ea20:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    ea22:	2a00      	cmp	r2, #0
    ea24:	f47f aec1 	bne.w	e7aa <dtostrf+0x72>
    ea28:	e6c4      	b.n	e7b4 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    ea2a:	2149      	movs	r1, #73	; 0x49
    ea2c:	224e      	movs	r2, #78	; 0x4e
    ea2e:	2346      	movs	r3, #70	; 0x46
    ea30:	1cf4      	adds	r4, r6, #3
    ea32:	7031      	strb	r1, [r6, #0]
    ea34:	7072      	strb	r2, [r6, #1]
    ea36:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    ea38:	e6bc      	b.n	e7b4 <dtostrf+0x7c>
			while (awidth) {
    ea3a:	b122      	cbz	r2, ea46 <dtostrf+0x30e>
				*buf++ = ' ';
    ea3c:	4630      	mov	r0, r6
    ea3e:	2120      	movs	r1, #32
    ea40:	4416      	add	r6, r2
    ea42:	f003 fe39 	bl	126b8 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea46:	ee18 3a10 	vmov	r3, s16
    ea4a:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea4c:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea50:	db05      	blt.n	ea5e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea52:	2241      	movs	r2, #65	; 0x41
    ea54:	1cf4      	adds	r4, r6, #3
    ea56:	7033      	strb	r3, [r6, #0]
    ea58:	7072      	strb	r2, [r6, #1]
    ea5a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    ea5c:	e6aa      	b.n	e7b4 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea5e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea60:	2241      	movs	r2, #65	; 0x41
    ea62:	1d34      	adds	r4, r6, #4
    ea64:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ea66:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ea68:	70b2      	strb	r2, [r6, #2]
    ea6a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    ea6c:	e6a2      	b.n	e7b4 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    ea6e:	232d      	movs	r3, #45	; 0x2d
    ea70:	f806 3b01 	strb.w	r3, [r6], #1
    ea74:	e691      	b.n	e79a <dtostrf+0x62>
    ea76:	bf00      	nop
    ea78:	7f7fffff 	.word	0x7f7fffff
    ea7c:	20007fec 	.word	0x20007fec
    ea80:	20007ff0 	.word	0x20007ff0

0000ea84 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    ea84:	4a07      	ldr	r2, [pc, #28]	; (eaa4 <rtc_get+0x20>)
    ea86:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    ea88:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    ea8a:	4619      	mov	r1, r3
    ea8c:	4684      	mov	ip, r0
    ea8e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    ea90:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    ea92:	4299      	cmp	r1, r3
    ea94:	d1f9      	bne.n	ea8a <rtc_get+0x6>
    ea96:	4584      	cmp	ip, r0
    ea98:	d1f7      	bne.n	ea8a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    ea9a:	0bdb      	lsrs	r3, r3, #15
}
    ea9c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    eaa0:	4770      	bx	lr
    eaa2:	bf00      	nop
    eaa4:	400d4000 	.word	0x400d4000

0000eaa8 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    eaa8:	4910      	ldr	r1, [pc, #64]	; (eaec <rtc_set+0x44>)
    eaaa:	688b      	ldr	r3, [r1, #8]
    eaac:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    eab0:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    eab2:	688b      	ldr	r3, [r1, #8]
    eab4:	07db      	lsls	r3, r3, #31
    eab6:	d4fc      	bmi.n	eab2 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    eab8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    eaba:	4a0c      	ldr	r2, [pc, #48]	; (eaec <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    eabc:	f023 0301 	bic.w	r3, r3, #1
    eac0:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    eac2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    eac4:	07d9      	lsls	r1, r3, #31
    eac6:	d4fc      	bmi.n	eac2 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    eac8:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    eaca:	4908      	ldr	r1, [pc, #32]	; (eaec <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    eacc:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    eace:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    ead0:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    ead2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    ead4:	f043 0301 	orr.w	r3, r3, #1
    ead8:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    eada:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    eadc:	07db      	lsls	r3, r3, #31
    eade:	d5fc      	bpl.n	eada <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    eae0:	688b      	ldr	r3, [r1, #8]
    eae2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    eae6:	608b      	str	r3, [r1, #8]
}
    eae8:	4770      	bx	lr
    eaea:	bf00      	nop
    eaec:	400d4000 	.word	0x400d4000

0000eaf0 <unused_interrupt_vector>:
	__disable_irq();
    eaf0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    eaf2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    eaf6:	4c52      	ldr	r4, [pc, #328]	; (ec40 <unused_interrupt_vector+0x150>)
    eaf8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    eafc:	f01e 0f04 	tst.w	lr, #4
    eb00:	bf0c      	ite	eq
    eb02:	f3ef 8208 	mrseq	r2, MSP
    eb06:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    eb0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    eb0e:	4e4d      	ldr	r6, [pc, #308]	; (ec44 <unused_interrupt_vector+0x154>)
	while (p < end) {
    eb10:	4d4d      	ldr	r5, [pc, #308]	; (ec48 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    eb12:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    eb16:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    eb1a:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    eb1e:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    eb22:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    eb26:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    eb2a:	6993      	ldr	r3, [r2, #24]
    eb2c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    eb30:	69d3      	ldr	r3, [r2, #28]
    eb32:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    eb36:	f000 f8d1 	bl	ecdc <tempmonGetTemp>
    eb3a:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    eb3e:	f7ff ffa1 	bl	ea84 <rtc_get>
	info->len = sizeof(*info) / 4;
    eb42:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    eb44:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    eb48:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    eb4c:	460b      	mov	r3, r1
    eb4e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    eb52:	493e      	ldr	r1, [pc, #248]	; (ec4c <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    eb54:	1d30      	adds	r0, r6, #4
    eb56:	405a      	eors	r2, r3
    eb58:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    eb5a:	f002 0301 	and.w	r3, r2, #1
    eb5e:	3c01      	subs	r4, #1
    eb60:	fb01 f303 	mul.w	r3, r1, r3
    eb64:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    eb68:	d1f7      	bne.n	eb5a <unused_interrupt_vector+0x6a>
	while (p < end) {
    eb6a:	42a8      	cmp	r0, r5
    eb6c:	d002      	beq.n	eb74 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    eb6e:	6873      	ldr	r3, [r6, #4]
    eb70:	4606      	mov	r6, r0
    eb72:	e7ef      	b.n	eb54 <unused_interrupt_vector+0x64>
	info->crc = crc;
    eb74:	4b32      	ldr	r3, [pc, #200]	; (ec40 <unused_interrupt_vector+0x150>)
    eb76:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    eb7a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    eb7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    eb82:	4930      	ldr	r1, [pc, #192]	; (ec44 <unused_interrupt_vector+0x154>)
    eb84:	4a32      	ldr	r2, [pc, #200]	; (ec50 <unused_interrupt_vector+0x160>)
    eb86:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    eb8a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    eb8e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eb92:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    eb96:	4a2f      	ldr	r2, [pc, #188]	; (ec54 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    eb98:	2502      	movs	r5, #2
    eb9a:	482f      	ldr	r0, [pc, #188]	; (ec58 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    eb9c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    eb9e:	492f      	ldr	r1, [pc, #188]	; (ec5c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    eba0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    eba4:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    eba6:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    eba8:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ebaa:	482d      	ldr	r0, [pc, #180]	; (ec60 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    ebac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    ebb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ebb4:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ebb6:	680b      	ldr	r3, [r1, #0]
    ebb8:	4283      	cmp	r3, r0
    ebba:	d83d      	bhi.n	ec38 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    ebbc:	4d26      	ldr	r5, [pc, #152]	; (ec58 <unused_interrupt_vector+0x168>)
    ebbe:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    ebc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ebc4:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    ebc8:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ebca:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    ebcc:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    ebd0:	4924      	ldr	r1, [pc, #144]	; (ec64 <unused_interrupt_vector+0x174>)
    ebd2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    ebd6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    ebda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    ebde:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    ebe2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    ebe6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    ebea:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    ebee:	e001      	b.n	ebf4 <unused_interrupt_vector+0x104>
		usb_isr();
    ebf0:	f000 f9ca 	bl	ef88 <usb_isr>
		if (PIT_TFLG0) {
    ebf4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d0f9      	beq.n	ebf0 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    ebfc:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    ebfe:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ec02:	2c4f      	cmp	r4, #79	; 0x4f
    ec04:	d9f4      	bls.n	ebf0 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec06:	4b18      	ldr	r3, [pc, #96]	; (ec68 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    ec08:	2002      	movs	r0, #2
    ec0a:	4918      	ldr	r1, [pc, #96]	; (ec6c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    ec10:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ec14:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec16:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ec1a:	b93b      	cbnz	r3, ec2c <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    ec1c:	4814      	ldr	r0, [pc, #80]	; (ec70 <unused_interrupt_vector+0x180>)
    ec1e:	4915      	ldr	r1, [pc, #84]	; (ec74 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec20:	4a0d      	ldr	r2, [pc, #52]	; (ec58 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    ec22:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ec24:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d0fa      	beq.n	ec22 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    ec2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ec30:	4a11      	ldr	r2, [pc, #68]	; (ec78 <unused_interrupt_vector+0x188>)
    ec32:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ec36:	e7fe      	b.n	ec36 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    ec38:	f7ff f834 	bl	dca4 <set_arm_clock>
    ec3c:	e7be      	b.n	ebbc <unused_interrupt_vector+0xcc>
    ec3e:	bf00      	nop
    ec40:	2027ff00 	.word	0x2027ff00
    ec44:	2027ff80 	.word	0x2027ff80
    ec48:	2027ffa8 	.word	0x2027ffa8
    ec4c:	edb88320 	.word	0xedb88320
    ec50:	2027ffa0 	.word	0x2027ffa0
    ec54:	400fc000 	.word	0x400fc000
    ec58:	40084000 	.word	0x40084000
    ec5c:	20008bb0 	.word	0x20008bb0
    ec60:	0bcd3d80 	.word	0x0bcd3d80
    ec64:	00249f00 	.word	0x00249f00
    ec68:	400d9000 	.word	0x400d9000
    ec6c:	402e0000 	.word	0x402e0000
    ec70:	400f8000 	.word	0x400f8000
    ec74:	0bad00f1 	.word	0x0bad00f1
    ec78:	05fa0004 	.word	0x05fa0004

0000ec7c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    ec7c:	490a      	ldr	r1, [pc, #40]	; (eca8 <_sbrk+0x2c>)
    ec7e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    ec80:	b138      	cbz	r0, ec92 <_sbrk+0x16>
{
    ec82:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    ec84:	1813      	adds	r3, r2, r0
    ec86:	4809      	ldr	r0, [pc, #36]	; (ecac <_sbrk+0x30>)
    ec88:	4283      	cmp	r3, r0
    ec8a:	d804      	bhi.n	ec96 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ec8c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    ec8e:	600b      	str	r3, [r1, #0]
}
    ec90:	bd08      	pop	{r3, pc}
    ec92:	4610      	mov	r0, r2
    ec94:	4770      	bx	lr
                        errno = ENOMEM;
    ec96:	f003 fe9b 	bl	129d0 <__errno>
    ec9a:	230c      	movs	r3, #12
                        return (void *)-1;
    ec9c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    eca0:	6003      	str	r3, [r0, #0]
}
    eca2:	4610      	mov	r0, r2
    eca4:	bd08      	pop	{r3, pc}
    eca6:	bf00      	nop
    eca8:	20008f8c 	.word	0x20008f8c
    ecac:	20280000 	.word	0x20280000

0000ecb0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    ecb0:	2000      	movs	r0, #0
    ecb2:	4770      	bx	lr

0000ecb4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    ecb4:	f04f 30ff 	mov.w	r0, #4294967295
    ecb8:	4770      	bx	lr
    ecba:	bf00      	nop

0000ecbc <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    ecbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ecc0:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    ecc2:	604b      	str	r3, [r1, #4]
}
    ecc4:	4770      	bx	lr
    ecc6:	bf00      	nop

0000ecc8 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    ecc8:	2001      	movs	r0, #1
    ecca:	4770      	bx	lr

0000eccc <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    eccc:	f04f 30ff 	mov.w	r0, #4294967295
    ecd0:	4770      	bx	lr
    ecd2:	bf00      	nop

0000ecd4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ecd4:	bf30      	wfi
    ecd6:	e7fd      	b.n	ecd4 <abort>

0000ecd8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    ecd8:	f7ff bf0a 	b.w	eaf0 <unused_interrupt_vector>

0000ecdc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    ecdc:	4a12      	ldr	r2, [pc, #72]	; (ed28 <tempmonGetTemp+0x4c>)
    ecde:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    ece2:	075b      	lsls	r3, r3, #29
    ece4:	d5fb      	bpl.n	ecde <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ece6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ecea:	4810      	ldr	r0, [pc, #64]	; (ed2c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ecec:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ecf0:	490f      	ldr	r1, [pc, #60]	; (ed30 <tempmonGetTemp+0x54>)
    ecf2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ecf6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ecfa:	ed91 6a00 	vldr	s12, [r1]
    ecfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ed02:	4a0c      	ldr	r2, [pc, #48]	; (ed34 <tempmonGetTemp+0x58>)
    ed04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ed08:	4b0b      	ldr	r3, [pc, #44]	; (ed38 <tempmonGetTemp+0x5c>)
    ed0a:	edd2 6a00 	vldr	s13, [r2]
    ed0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ed12:	ed93 7a00 	vldr	s14, [r3]
    ed16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ed1a:	ee67 7a86 	vmul.f32	s15, s15, s12
    ed1e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    ed22:	ee37 0a40 	vsub.f32	s0, s14, s0
    ed26:	4770      	bx	lr
    ed28:	400d8100 	.word	0x400d8100
    ed2c:	20025464 	.word	0x20025464
    ed30:	2002546c 	.word	0x2002546c
    ed34:	20025470 	.word	0x20025470
    ed38:	20025468 	.word	0x20025468

0000ed3c <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    ed3c:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    ed3e:	2900      	cmp	r1, #0
    ed40:	d131      	bne.n	eda6 <endpoint0_receive+0x6a>
    ed42:	4c2b      	ldr	r4, [pc, #172]	; (edf0 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    ed44:	4b2b      	ldr	r3, [pc, #172]	; (edf4 <endpoint0_receive+0xb8>)
    ed46:	2101      	movs	r1, #1
    ed48:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ed4a:	b1da      	cbz	r2, ed84 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed4c:	492a      	ldr	r1, [pc, #168]	; (edf8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    ed4e:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ed50:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed54:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ed58:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ed5a:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ed5c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed60:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ed64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    ed68:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ed6c:	4313      	orrs	r3, r2
    ed6e:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ed72:	4b22      	ldr	r3, [pc, #136]	; (edfc <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    ed74:	4920      	ldr	r1, [pc, #128]	; (edf8 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ed76:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    ed78:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	d1fb      	bne.n	ed78 <endpoint0_receive+0x3c>
}
    ed80:	bc30      	pop	{r4, r5}
    ed82:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed84:	491c      	ldr	r1, [pc, #112]	; (edf8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ed86:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed88:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ed8c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ed8e:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ed90:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ed94:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ed98:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ed9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eda0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eda4:	e7e5      	b.n	ed72 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eda6:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    eda8:	4b15      	ldr	r3, [pc, #84]	; (ee00 <endpoint0_receive+0xc4>)
    edaa:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    edac:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    edae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    edb2:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    edb4:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    edb6:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    edb8:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    edbc:	4c0c      	ldr	r4, [pc, #48]	; (edf0 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    edbe:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    edc0:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    edc4:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    edc6:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    edc8:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    edcc:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    edd0:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    edd2:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    edd4:	4908      	ldr	r1, [pc, #32]	; (edf8 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    edd6:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    edd8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eddc:	f043 0301 	orr.w	r3, r3, #1
    ede0:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ede4:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    ede8:	2b00      	cmp	r3, #0
    edea:	d1fb      	bne.n	ede4 <endpoint0_receive+0xa8>
    edec:	e7aa      	b.n	ed44 <endpoint0_receive+0x8>
    edee:	bf00      	nop
    edf0:	20000000 	.word	0x20000000
    edf4:	20009ac0 	.word	0x20009ac0
    edf8:	402e0000 	.word	0x402e0000
    edfc:	200252e8 	.word	0x200252e8
    ee00:	20009ae0 	.word	0x20009ae0

0000ee04 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ee04:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    ee06:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    ee08:	b11b      	cbz	r3, ee12 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ee0a:	6853      	ldr	r3, [r2, #4]
    ee0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    ee10:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    ee12:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ee14:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ee16:	b33c      	cbz	r4, ee68 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    ee18:	4b1a      	ldr	r3, [pc, #104]	; (ee84 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    ee1a:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ee1c:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    ee20:	420c      	tst	r4, r1
    ee22:	d11d      	bne.n	ee60 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ee24:	4e18      	ldr	r6, [pc, #96]	; (ee88 <schedule_transfer+0x84>)
    ee26:	6877      	ldr	r7, [r6, #4]
    ee28:	e004      	b.n	ee34 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ee2a:	6874      	ldr	r4, [r6, #4]
    ee2c:	1be4      	subs	r4, r4, r7
    ee2e:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    ee32:	d20b      	bcs.n	ee4c <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ee34:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ee38:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    ee3c:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ee40:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ee44:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ee48:	0464      	lsls	r4, r4, #17
    ee4a:	d5ee      	bpl.n	ee2a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ee4c:	400d      	ands	r5, r1
    ee4e:	d107      	bne.n	ee60 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ee50:	4c0c      	ldr	r4, [pc, #48]	; (ee84 <schedule_transfer+0x80>)
		endpoint->status = 0;
    ee52:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ee56:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ee5a:	430b      	orrs	r3, r1
    ee5c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ee60:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ee62:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ee64:	bcf0      	pop	{r4, r5, r6, r7}
    ee66:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ee68:	4d06      	ldr	r5, [pc, #24]	; (ee84 <schedule_transfer+0x80>)
	endpoint->status = 0;
    ee6a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ee6e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    ee72:	430b      	orrs	r3, r1
    ee74:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ee78:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ee7a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ee7c:	b662      	cpsie	i
}
    ee7e:	bcf0      	pop	{r4, r5, r6, r7}
    ee80:	4770      	bx	lr
    ee82:	bf00      	nop
    ee84:	402e0000 	.word	0x402e0000
    ee88:	e0001000 	.word	0xe0001000

0000ee8c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ee8c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ee8e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ee90:	b19d      	cbz	r5, eeba <run_callbacks+0x2e>
    ee92:	4606      	mov	r6, r0
    ee94:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ee96:	2400      	movs	r4, #0
    ee98:	e003      	b.n	eea2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ee9a:	6812      	ldr	r2, [r2, #0]
		count++;
    ee9c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    ee9e:	2a01      	cmp	r2, #1
    eea0:	d00c      	beq.n	eebc <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    eea2:	6853      	ldr	r3, [r2, #4]
    eea4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    eea8:	d0f7      	beq.n	ee9a <run_callbacks+0xe>
			ep->first_transfer = t;
    eeaa:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    eeac:	b12c      	cbz	r4, eeba <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    eeae:	4628      	mov	r0, r5
		ep->callback_function(first);
    eeb0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    eeb2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    eeb4:	4798      	blx	r3
	while (count) {
    eeb6:	3c01      	subs	r4, #1
    eeb8:	d1f9      	bne.n	eeae <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    eeba:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    eebc:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    eec0:	e7f4      	b.n	eeac <run_callbacks+0x20>
    eec2:	bf00      	nop

0000eec4 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    eec4:	b430      	push	{r4, r5}
	if (len > 0) {
    eec6:	b9d9      	cbnz	r1, ef00 <endpoint0_transmit.constprop.0+0x3c>
    eec8:	4c1f      	ldr	r4, [pc, #124]	; (ef48 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    eeca:	4b20      	ldr	r3, [pc, #128]	; (ef4c <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    eecc:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eece:	4a20      	ldr	r2, [pc, #128]	; (ef50 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    eed0:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eed2:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    eed6:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    eed8:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    eeda:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eede:	2480      	movs	r4, #128	; 0x80
    eee0:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eee2:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    eee6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    eeea:	481a      	ldr	r0, [pc, #104]	; (ef54 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    eeec:	432b      	orrs	r3, r5
    eeee:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    eef2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    eef4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    eef8:	2b00      	cmp	r3, #0
    eefa:	d1fb      	bne.n	eef4 <endpoint0_transmit.constprop.0+0x30>
}
    eefc:	bc30      	pop	{r4, r5}
    eefe:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef00:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ef02:	4b15      	ldr	r3, [pc, #84]	; (ef58 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ef04:	4c10      	ldr	r4, [pc, #64]	; (ef48 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    ef06:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef08:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ef0c:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    ef0e:	4a10      	ldr	r2, [pc, #64]	; (ef50 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ef10:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ef12:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ef16:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ef18:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ef1a:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ef1e:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ef20:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ef22:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ef26:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ef2a:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    ef2c:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ef2e:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ef30:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ef32:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ef36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef3a:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ef3e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ef42:	2b00      	cmp	r3, #0
    ef44:	d1fb      	bne.n	ef3e <endpoint0_transmit.constprop.0+0x7a>
    ef46:	e7c0      	b.n	eeca <endpoint0_transmit.constprop.0+0x6>
    ef48:	20000000 	.word	0x20000000
    ef4c:	20009ac0 	.word	0x20009ac0
    ef50:	402e0000 	.word	0x402e0000
    ef54:	200252e8 	.word	0x200252e8
    ef58:	20009ae0 	.word	0x20009ae0

0000ef5c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ef5c:	4908      	ldr	r1, [pc, #32]	; (ef80 <usb_stop_sof_interrupts+0x24>)
    ef5e:	2201      	movs	r2, #1
    ef60:	780b      	ldrb	r3, [r1, #0]
    ef62:	fa02 f000 	lsl.w	r0, r2, r0
    ef66:	ea23 0000 	bic.w	r0, r3, r0
    ef6a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    ef6c:	b930      	cbnz	r0, ef7c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ef6e:	4a05      	ldr	r2, [pc, #20]	; (ef84 <usb_stop_sof_interrupts+0x28>)
    ef70:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    ef74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ef78:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    ef7c:	4770      	bx	lr
    ef7e:	bf00      	nop
    ef80:	20025bdb 	.word	0x20025bdb
    ef84:	402e0000 	.word	0x402e0000

0000ef88 <usb_isr>:
{
    ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    ef8c:	4caa      	ldr	r4, [pc, #680]	; (f238 <usb_isr+0x2b0>)
{
    ef8e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    ef90:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ef94:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    ef96:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ef9a:	d54f      	bpl.n	f03c <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ef9c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    efa0:	2b00      	cmp	r3, #0
    efa2:	d046      	beq.n	f032 <usb_isr+0xaa>
    efa4:	4da5      	ldr	r5, [pc, #660]	; (f23c <usb_isr+0x2b4>)
    efa6:	f8df 92b0 	ldr.w	r9, [pc, #688]	; f258 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    efaa:	f8df 82c8 	ldr.w	r8, [pc, #712]	; f274 <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    efae:	4fa4      	ldr	r7, [pc, #656]	; (f240 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    efb0:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    efb4:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    efb8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    efbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    efc0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    efc4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    efc8:	049b      	lsls	r3, r3, #18
    efca:	d5f5      	bpl.n	efb8 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    efcc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    efd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    efd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    efd8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    efdc:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    efe0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    efe4:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    efe8:	d1fa      	bne.n	efe0 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    efea:	b291      	uxth	r1, r2
    efec:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    eff0:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    eff4:	f000 81b8 	beq.w	f368 <usb_isr+0x3e0>
    eff8:	f200 80f3 	bhi.w	f1e2 <usb_isr+0x25a>
    effc:	f240 3c02 	movw	ip, #770	; 0x302
    f000:	4561      	cmp	r1, ip
    f002:	f000 81cf 	beq.w	f3a4 <usb_isr+0x41c>
    f006:	f200 809a 	bhi.w	f13e <usb_isr+0x1b6>
    f00a:	2982      	cmp	r1, #130	; 0x82
    f00c:	f000 81b4 	beq.w	f378 <usb_isr+0x3f0>
    f010:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    f014:	f040 808a 	bne.w	f12c <usb_isr+0x1a4>
		if (endpoint > 7) break;
    f018:	f010 0f78 	tst.w	r0, #120	; 0x78
    f01c:	b283      	uxth	r3, r0
    f01e:	f000 81f4 	beq.w	f40a <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    f022:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f026:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    f02a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    f02e:	2b00      	cmp	r3, #0
    f030:	d1be      	bne.n	efb0 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    f032:	4a81      	ldr	r2, [pc, #516]	; (f238 <usb_isr+0x2b0>)
    f034:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    f038:	2b00      	cmp	r3, #0
    f03a:	d142      	bne.n	f0c2 <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    f03c:	0672      	lsls	r2, r6, #25
    f03e:	d516      	bpl.n	f06e <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    f040:	4b7d      	ldr	r3, [pc, #500]	; (f238 <usb_isr+0x2b0>)
    f042:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    f046:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    f04a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    f04e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    f052:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    f056:	2c00      	cmp	r4, #0
    f058:	d1fb      	bne.n	f052 <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    f05a:	f04f 32ff 	mov.w	r2, #4294967295
    f05e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    f062:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    f066:	f000 fe9b 	bl	fda0 <usb_serial_reset>
		endpointN_notify_mask = 0;
    f06a:	4b76      	ldr	r3, [pc, #472]	; (f244 <usb_isr+0x2bc>)
    f06c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    f06e:	01f4      	lsls	r4, r6, #7
    f070:	d503      	bpl.n	f07a <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    f072:	4b75      	ldr	r3, [pc, #468]	; (f248 <usb_isr+0x2c0>)
    f074:	681b      	ldr	r3, [r3, #0]
    f076:	b103      	cbz	r3, f07a <usb_isr+0xf2>
    f078:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    f07a:	01b0      	lsls	r0, r6, #6
    f07c:	d503      	bpl.n	f086 <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    f07e:	4b73      	ldr	r3, [pc, #460]	; (f24c <usb_isr+0x2c4>)
    f080:	681b      	ldr	r3, [r3, #0]
    f082:	b103      	cbz	r3, f086 <usb_isr+0xfe>
    f084:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    f086:	0771      	lsls	r1, r6, #29
    f088:	d508      	bpl.n	f09c <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    f08a:	4b6b      	ldr	r3, [pc, #428]	; (f238 <usb_isr+0x2b0>)
    f08c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    f090:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    f094:	d047      	beq.n	f126 <usb_isr+0x19e>
			usb_high_speed = 1;
    f096:	4b6e      	ldr	r3, [pc, #440]	; (f250 <usb_isr+0x2c8>)
    f098:	2201      	movs	r2, #1
    f09a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    f09c:	4b66      	ldr	r3, [pc, #408]	; (f238 <usb_isr+0x2b0>)
    f09e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    f0a2:	061a      	lsls	r2, r3, #24
    f0a4:	d50a      	bpl.n	f0bc <usb_isr+0x134>
    f0a6:	0633      	lsls	r3, r6, #24
    f0a8:	d508      	bpl.n	f0bc <usb_isr+0x134>
		if (usb_reboot_timer) {
    f0aa:	4a6a      	ldr	r2, [pc, #424]	; (f254 <usb_isr+0x2cc>)
    f0ac:	7813      	ldrb	r3, [r2, #0]
    f0ae:	b12b      	cbz	r3, f0bc <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    f0b0:	3b01      	subs	r3, #1
    f0b2:	b2db      	uxtb	r3, r3
    f0b4:	7013      	strb	r3, [r2, #0]
    f0b6:	2b00      	cmp	r3, #0
    f0b8:	f000 8230 	beq.w	f51c <usb_isr+0x594>
}
    f0bc:	b003      	add	sp, #12
    f0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    f0c2:	4965      	ldr	r1, [pc, #404]	; (f258 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    f0c4:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    f0c8:	6808      	ldr	r0, [r1, #0]
    f0ca:	4203      	tst	r3, r0
    f0cc:	f040 81c2 	bne.w	f454 <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    f0d0:	4a5c      	ldr	r2, [pc, #368]	; (f244 <usb_isr+0x2bc>)
    f0d2:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    f0d4:	401c      	ands	r4, r3
    f0d6:	d0b1      	beq.n	f03c <usb_isr+0xb4>
				while (tx) {
    f0d8:	ea5f 4814 	movs.w	r8, r4, lsr #16
    f0dc:	d010      	beq.n	f100 <usb_isr+0x178>
    f0de:	4d57      	ldr	r5, [pc, #348]	; (f23c <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    f0e0:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    f0e4:	fa98 f7a8 	rbit	r7, r8
    f0e8:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    f0ec:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    f0f0:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    f0f4:	3040      	adds	r0, #64	; 0x40
    f0f6:	f7ff fec9 	bl	ee8c <run_callbacks>
				while (tx) {
    f0fa:	ea38 0807 	bics.w	r8, r8, r7
    f0fe:	d1f1      	bne.n	f0e4 <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    f100:	b2a4      	uxth	r4, r4
				while(rx) {
    f102:	2c00      	cmp	r4, #0
    f104:	d09a      	beq.n	f03c <usb_isr+0xb4>
    f106:	4d4d      	ldr	r5, [pc, #308]	; (f23c <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    f108:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    f10c:	fa94 f7a4 	rbit	r7, r4
    f110:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    f114:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    f118:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    f11c:	f7ff feb6 	bl	ee8c <run_callbacks>
				while(rx) {
    f120:	43bc      	bics	r4, r7
    f122:	d1f3      	bne.n	f10c <usb_isr+0x184>
    f124:	e78a      	b.n	f03c <usb_isr+0xb4>
			usb_high_speed = 0;
    f126:	4a4a      	ldr	r2, [pc, #296]	; (f250 <usb_isr+0x2c8>)
    f128:	7013      	strb	r3, [r2, #0]
    f12a:	e7b7      	b.n	f09c <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    f12c:	2980      	cmp	r1, #128	; 0x80
    f12e:	f47f af78 	bne.w	f022 <usb_isr+0x9a>
		reply_buffer[0] = 0;
    f132:	484a      	ldr	r0, [pc, #296]	; (f25c <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    f134:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    f136:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    f138:	f7ff fec4 	bl	eec4 <endpoint0_transmit.constprop.0>
		return;
    f13c:	e775      	b.n	f02a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f13e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    f142:	f000 80f4 	beq.w	f32e <usb_isr+0x3a6>
    f146:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    f14a:	2901      	cmp	r1, #1
    f14c:	f63f af69 	bhi.w	f022 <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    f150:	4b43      	ldr	r3, [pc, #268]	; (f260 <usb_isr+0x2d8>)
    f152:	6859      	ldr	r1, [r3, #4]
    f154:	2900      	cmp	r1, #0
    f156:	f43f af64 	beq.w	f022 <usb_isr+0x9a>
    f15a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f15e:	fa1f fa80 	uxth.w	sl, r0
    f162:	e004      	b.n	f16e <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    f164:	6919      	ldr	r1, [r3, #16]
    f166:	330c      	adds	r3, #12
    f168:	2900      	cmp	r1, #0
    f16a:	f43f af5a 	beq.w	f022 <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    f16e:	f8b3 c000 	ldrh.w	ip, [r3]
    f172:	45f4      	cmp	ip, lr
    f174:	d1f6      	bne.n	f164 <usb_isr+0x1dc>
    f176:	885a      	ldrh	r2, [r3, #2]
    f178:	4552      	cmp	r2, sl
    f17a:	d1f3      	bne.n	f164 <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    f17c:	ea4f 221e 	mov.w	r2, lr, lsr #8
    f180:	2a03      	cmp	r2, #3
    f182:	f000 8185 	beq.w	f490 <usb_isr+0x508>
					datalen = list->length;
    f186:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    f18a:	0c00      	lsrs	r0, r0, #16
    f18c:	4582      	cmp	sl, r0
    f18e:	bf28      	it	cs
    f190:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    f192:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    f196:	f040 8181 	bne.w	f49c <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    f19a:	4b2d      	ldr	r3, [pc, #180]	; (f250 <usb_isr+0x2c8>)
    f19c:	4a31      	ldr	r2, [pc, #196]	; (f264 <usb_isr+0x2dc>)
    f19e:	7819      	ldrb	r1, [r3, #0]
    f1a0:	4b31      	ldr	r3, [pc, #196]	; (f268 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f1a2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; f26c <usb_isr+0x2e4>
    f1a6:	2900      	cmp	r1, #0
    f1a8:	bf0c      	ite	eq
    f1aa:	4611      	moveq	r1, r2
    f1ac:	4619      	movne	r1, r3
    f1ae:	482f      	ldr	r0, [pc, #188]	; (f26c <usb_isr+0x2e4>)
    f1b0:	4652      	mov	r2, sl
    f1b2:	f7ff f9f3 	bl	e59c <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f1b6:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    f1ba:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    f1be:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f1c2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f1c6:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f1ca:	3320      	adds	r3, #32
	} while (location < end_addr);
    f1cc:	429a      	cmp	r2, r3
    f1ce:	d8fa      	bhi.n	f1c6 <usb_isr+0x23e>
	asm("dsb");
    f1d0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f1d4:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    f1d8:	4824      	ldr	r0, [pc, #144]	; (f26c <usb_isr+0x2e4>)
    f1da:	4651      	mov	r1, sl
    f1dc:	f7ff fe72 	bl	eec4 <endpoint0_transmit.constprop.0>
				return;
    f1e0:	e723      	b.n	f02a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f1e2:	f242 3c21 	movw	ip, #8993	; 0x2321
    f1e6:	4561      	cmp	r1, ip
    f1e8:	d00d      	beq.n	f206 <usb_isr+0x27e>
    f1ea:	d877      	bhi.n	f2dc <usb_isr+0x354>
    f1ec:	f242 0c21 	movw	ip, #8225	; 0x2021
    f1f0:	4561      	cmp	r1, ip
    f1f2:	f000 808b 	beq.w	f30c <usb_isr+0x384>
    f1f6:	f242 2c21 	movw	ip, #8737	; 0x2221
    f1fa:	4561      	cmp	r1, ip
    f1fc:	d13c      	bne.n	f278 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    f1fe:	b280      	uxth	r0, r0
    f200:	2800      	cmp	r0, #0
    f202:	f000 80f9 	beq.w	f3f8 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    f206:	4b1a      	ldr	r3, [pc, #104]	; (f270 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    f208:	2200      	movs	r2, #0
    f20a:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    f20c:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    f20e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f210:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f212:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f214:	2280      	movs	r2, #128	; 0x80
    f216:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f218:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f21c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f220:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f228:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f22c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f230:	2b00      	cmp	r3, #0
    f232:	d1fb      	bne.n	f22c <usb_isr+0x2a4>
    f234:	e6f9      	b.n	f02a <usb_isr+0xa2>
    f236:	bf00      	nop
    f238:	402e0000 	.word	0x402e0000
    f23c:	20000000 	.word	0x20000000
    f240:	402e01c0 	.word	0x402e01c0
    f244:	200252ec 	.word	0x200252ec
    f248:	20025bac 	.word	0x20025bac
    f24c:	20025bb0 	.word	0x20025bb0
    f250:	20025be2 	.word	0x20025be2
    f254:	20025be3 	.word	0x20025be3
    f258:	200252e8 	.word	0x200252e8
    f25c:	20025404 	.word	0x20025404
    f260:	200089ec 	.word	0x200089ec
    f264:	60002960 	.word	0x60002960
    f268:	600029cc 	.word	0x600029cc
    f26c:	20200800 	.word	0x20200800
    f270:	20009ac0 	.word	0x20009ac0
    f274:	20025be1 	.word	0x20025be1
	switch (setup.wRequestAndType) {
    f278:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    f27c:	f47f aed1 	bne.w	f022 <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    f280:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    f284:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    f288:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    f28a:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    f28e:	4aa6      	ldr	r2, [pc, #664]	; (f528 <usb_isr+0x5a0>)
    f290:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    f294:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    f298:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    f29c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    f2a0:	f000 fd80 	bl	fda4 <usb_serial_configure>
		usb_mtp_configure();
    f2a4:	f000 faaa 	bl	f7fc <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    f2a8:	4aa0      	ldr	r2, [pc, #640]	; (f52c <usb_isr+0x5a4>)
    f2aa:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    f2ac:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f2ae:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f2b0:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f2b2:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    f2b4:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f2b6:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f2b8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    f2bc:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f2be:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f2c2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    f2c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    f2ca:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    f2ce:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    f2d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f2d6:	2b00      	cmp	r3, #0
    f2d8:	d1fb      	bne.n	f2d2 <usb_isr+0x34a>
    f2da:	e6a6      	b.n	f02a <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f2dc:	f246 4321 	movw	r3, #25633	; 0x6421
    f2e0:	4299      	cmp	r1, r3
    f2e2:	d01f      	beq.n	f324 <usb_isr+0x39c>
    f2e4:	f246 73a1 	movw	r3, #26529	; 0x67a1
    f2e8:	4299      	cmp	r1, r3
    f2ea:	f47f ae9a 	bne.w	f022 <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    f2ee:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    f2f2:	f4ff ae96 	bcc.w	f022 <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    f2f6:	4b8e      	ldr	r3, [pc, #568]	; (f530 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    f2f8:	2104      	movs	r1, #4
    f2fa:	488e      	ldr	r0, [pc, #568]	; (f534 <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    f2fc:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    f2fe:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    f300:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    f302:	2320      	movs	r3, #32
    f304:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    f306:	f7ff fddd 	bl	eec4 <endpoint0_transmit.constprop.0>
			return;
    f30a:	e68e      	b.n	f02a <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    f30c:	0c01      	lsrs	r1, r0, #16
    f30e:	2907      	cmp	r1, #7
    f310:	f47f ae87 	bne.w	f022 <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    f314:	4b88      	ldr	r3, [pc, #544]	; (f538 <usb_isr+0x5b0>)
    f316:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    f31a:	2201      	movs	r2, #1
    f31c:	4885      	ldr	r0, [pc, #532]	; (f534 <usb_isr+0x5ac>)
    f31e:	f7ff fd0d 	bl	ed3c <endpoint0_receive>
			return;
    f322:	e682      	b.n	f02a <usb_isr+0xa2>
		if (setup.wLength == 6) {
    f324:	0c01      	lsrs	r1, r0, #16
    f326:	2906      	cmp	r1, #6
    f328:	f47f ae7b 	bne.w	f022 <usb_isr+0x9a>
    f32c:	e7f2      	b.n	f314 <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    f32e:	497f      	ldr	r1, [pc, #508]	; (f52c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f330:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f332:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    f334:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f336:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f338:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f33a:	2380      	movs	r3, #128	; 0x80
    f33c:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f33e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f342:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f346:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f34a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f34e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f352:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f356:	2b00      	cmp	r3, #0
    f358:	d1fb      	bne.n	f352 <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    f35a:	0c13      	lsrs	r3, r2, #16
    f35c:	065b      	lsls	r3, r3, #25
    f35e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f362:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    f366:	e660      	b.n	f02a <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    f368:	4874      	ldr	r0, [pc, #464]	; (f53c <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    f36a:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    f36c:	f898 3000 	ldrb.w	r3, [r8]
    f370:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    f372:	f7ff fda7 	bl	eec4 <endpoint0_transmit.constprop.0>
		return;
    f376:	e658      	b.n	f02a <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    f378:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    f37a:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    f37e:	f47f ae50 	bne.w	f022 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    f386:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    f38a:	4a6c      	ldr	r2, [pc, #432]	; (f53c <usb_isr+0x5b4>)
    f38c:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f38e:	0618      	lsls	r0, r3, #24
    f390:	d47b      	bmi.n	f48a <usb_isr+0x502>
    f392:	07cb      	lsls	r3, r1, #31
    f394:	d501      	bpl.n	f39a <usb_isr+0x412>
			reply_buffer[0] = 1;
    f396:	2301      	movs	r3, #1
    f398:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    f39a:	2102      	movs	r1, #2
    f39c:	4867      	ldr	r0, [pc, #412]	; (f53c <usb_isr+0x5b4>)
    f39e:	f7ff fd91 	bl	eec4 <endpoint0_transmit.constprop.0>
		return;
    f3a2:	e642      	b.n	f02a <usb_isr+0xa2>
		if (endpoint > 7) break;
    f3a4:	f010 0f78 	tst.w	r0, #120	; 0x78
    f3a8:	b283      	uxth	r3, r0
    f3aa:	f47f ae3a 	bne.w	f022 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f3b2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    f3b6:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f3ba:	bf14      	ite	ne
    f3bc:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    f3c0:	f043 0301 	orreq.w	r3, r3, #1
    f3c4:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f3c8:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f3ca:	4b58      	ldr	r3, [pc, #352]	; (f52c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f3cc:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f3ce:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f3d0:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f3d2:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f3d4:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f3d6:	2280      	movs	r2, #128	; 0x80
    f3d8:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f3da:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f3de:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f3e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f3e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f3ea:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f3ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f3f2:	2b00      	cmp	r3, #0
    f3f4:	d1fb      	bne.n	f3ee <usb_isr+0x466>
    f3f6:	e618      	b.n	f02a <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f3f8:	4b51      	ldr	r3, [pc, #324]	; (f540 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f3fa:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f3fe:	6819      	ldr	r1, [r3, #0]
    f400:	4b50      	ldr	r3, [pc, #320]	; (f544 <usb_isr+0x5bc>)
    f402:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f404:	4b50      	ldr	r3, [pc, #320]	; (f548 <usb_isr+0x5c0>)
    f406:	701a      	strb	r2, [r3, #0]
    f408:	e6fd      	b.n	f206 <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    f40a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f40e:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    f412:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f416:	bf14      	ite	ne
    f418:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    f41c:	f023 0301 	biceq.w	r3, r3, #1
    f420:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f424:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f426:	4b41      	ldr	r3, [pc, #260]	; (f52c <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f428:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f42a:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f42c:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f42e:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f430:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f432:	2280      	movs	r2, #128	; 0x80
    f434:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f436:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f43a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f43e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f446:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f44a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f44e:	2b00      	cmp	r3, #0
    f450:	d1fb      	bne.n	f44a <usb_isr+0x4c2>
    f452:	e5ea      	b.n	f02a <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    f454:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f456:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    f45a:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    f45c:	4936      	ldr	r1, [pc, #216]	; (f538 <usb_isr+0x5b0>)
    f45e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f460:	8809      	ldrh	r1, [r1, #0]
    f462:	42a1      	cmp	r1, r4
    f464:	d02f      	beq.n	f4c6 <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    f466:	f246 4221 	movw	r2, #25633	; 0x6421
    f46a:	4291      	cmp	r1, r2
    f46c:	f47f ae30 	bne.w	f0d0 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    f470:	4a30      	ldr	r2, [pc, #192]	; (f534 <usb_isr+0x5ac>)
    f472:	7811      	ldrb	r1, [r2, #0]
    f474:	2901      	cmp	r1, #1
    f476:	f47f ae2b 	bne.w	f0d0 <usb_isr+0x148>
    f47a:	7852      	ldrb	r2, [r2, #1]
    f47c:	2a40      	cmp	r2, #64	; 0x40
    f47e:	f47f ae27 	bne.w	f0d0 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    f482:	4a2b      	ldr	r2, [pc, #172]	; (f530 <usb_isr+0x5a8>)
    f484:	2119      	movs	r1, #25
    f486:	7011      	strb	r1, [r2, #0]
    f488:	e622      	b.n	f0d0 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f48a:	03c9      	lsls	r1, r1, #15
    f48c:	d483      	bmi.n	f396 <usb_isr+0x40e>
    f48e:	e784      	b.n	f39a <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    f490:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    f492:	f891 a000 	ldrb.w	sl, [r1]
    f496:	4582      	cmp	sl, r0
    f498:	bf28      	it	cs
    f49a:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    f49c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    f4a0:	d135      	bne.n	f50e <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f4a2:	4b2a      	ldr	r3, [pc, #168]	; (f54c <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f4a4:	f8df b0bc 	ldr.w	fp, [pc, #188]	; f564 <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f4a8:	7819      	ldrb	r1, [r3, #0]
    f4aa:	4a29      	ldr	r2, [pc, #164]	; (f550 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f4ac:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    f4ae:	4b29      	ldr	r3, [pc, #164]	; (f554 <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f4b0:	2900      	cmp	r1, #0
    f4b2:	bf0c      	ite	eq
    f4b4:	4611      	moveq	r1, r2
    f4b6:	4619      	movne	r1, r3
    f4b8:	4652      	mov	r2, sl
    f4ba:	f7ff f86f 	bl	e59c <memcpy>
					usb_descriptor_buffer[1] = 7;
    f4be:	2307      	movs	r3, #7
    f4c0:	f88b 3001 	strb.w	r3, [fp, #1]
    f4c4:	e677      	b.n	f1b6 <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f4c6:	b280      	uxth	r0, r0
    f4c8:	2800      	cmp	r0, #0
    f4ca:	f47f ae01 	bne.w	f0d0 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f4ce:	4919      	ldr	r1, [pc, #100]	; (f534 <usb_isr+0x5ac>)
    f4d0:	4c21      	ldr	r4, [pc, #132]	; (f558 <usb_isr+0x5d0>)
    f4d2:	c903      	ldmia	r1, {r0, r1}
    f4d4:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    f4d6:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f4d8:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f4dc:	6020      	str	r0, [r4, #0]
    f4de:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    f4e0:	f47f adf6 	bne.w	f0d0 <usb_isr+0x148>
	__disable_irq();
    f4e4:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    f4e6:	481d      	ldr	r0, [pc, #116]	; (f55c <usb_isr+0x5d4>)
    f4e8:	7801      	ldrb	r1, [r0, #0]
    f4ea:	f041 0108 	orr.w	r1, r1, #8
    f4ee:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    f4f0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    f4f4:	060d      	lsls	r5, r1, #24
    f4f6:	d405      	bmi.n	f504 <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f4f8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f4fa:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f4fc:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f500:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    f504:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    f506:	4a16      	ldr	r2, [pc, #88]	; (f560 <usb_isr+0x5d8>)
    f508:	2150      	movs	r1, #80	; 0x50
    f50a:	7011      	strb	r1, [r2, #0]
    f50c:	e5e0      	b.n	f0d0 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    f50e:	f8df b054 	ldr.w	fp, [pc, #84]	; f564 <usb_isr+0x5dc>
    f512:	4652      	mov	r2, sl
    f514:	4658      	mov	r0, fp
    f516:	f7ff f841 	bl	e59c <memcpy>
    f51a:	e64c      	b.n	f1b6 <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    f51c:	2003      	movs	r0, #3
    f51e:	f7ff fd1d 	bl	ef5c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    f522:	f00b fed9 	bl	1b2d8 <___reboot_Teensyduino__veneer>
    f526:	bf00      	nop
    f528:	00cc0002 	.word	0x00cc0002
    f52c:	20009ac0 	.word	0x20009ac0
    f530:	20009575 	.word	0x20009575
    f534:	200252e0 	.word	0x200252e0
    f538:	2000c1c0 	.word	0x2000c1c0
    f53c:	20025404 	.word	0x20025404
    f540:	20025b88 	.word	0x20025b88
    f544:	20025ba8 	.word	0x20025ba8
    f548:	20025be0 	.word	0x20025be0
    f54c:	20025be2 	.word	0x20025be2
    f550:	600029cc 	.word	0x600029cc
    f554:	60002960 	.word	0x60002960
    f558:	20025ba0 	.word	0x20025ba0
    f55c:	20025bdb 	.word	0x20025bdb
    f560:	20025be3 	.word	0x20025be3
    f564:	20200800 	.word	0x20200800

0000f568 <usb_config_rx>:
{
    f568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f56c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f56e:	1e83      	subs	r3, r0, #2
    f570:	2b03      	cmp	r3, #3
    f572:	d901      	bls.n	f578 <usb_config_rx+0x10>
}
    f574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f578:	f8df 904c 	ldr.w	r9, [pc, #76]	; f5c8 <usb_config_rx+0x60>
    f57c:	4615      	mov	r5, r2
    f57e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    f580:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f582:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f586:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f588:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f58c:	2100      	movs	r1, #0
    f58e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f592:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    f594:	f003 f890 	bl	126b8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f598:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    f59c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f59e:	0952      	lsrs	r2, r2, #5
    f5a0:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    f5a4:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    f5a8:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f5ac:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    f5b0:	2f00      	cmp	r7, #0
    f5b2:	d0df      	beq.n	f574 <usb_config_rx+0xc>
    f5b4:	4a03      	ldr	r2, [pc, #12]	; (f5c4 <usb_config_rx+0x5c>)
    f5b6:	40b3      	lsls	r3, r6
    f5b8:	6811      	ldr	r1, [r2, #0]
    f5ba:	430b      	orrs	r3, r1
    f5bc:	6013      	str	r3, [r2, #0]
}
    f5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f5c2:	bf00      	nop
    f5c4:	200252ec 	.word	0x200252ec
    f5c8:	20000000 	.word	0x20000000

0000f5cc <usb_config_tx>:
{
    f5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f5d0:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f5d2:	1e81      	subs	r1, r0, #2
    f5d4:	2903      	cmp	r1, #3
    f5d6:	d901      	bls.n	f5dc <usb_config_tx+0x10>
}
    f5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f5dc:	01c7      	lsls	r7, r0, #7
    f5de:	f8df 904c 	ldr.w	r9, [pc, #76]	; f62c <usb_config_tx+0x60>
    f5e2:	4692      	mov	sl, r2
    f5e4:	4604      	mov	r4, r0
    f5e6:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    f5e8:	223c      	movs	r2, #60	; 0x3c
    f5ea:	2100      	movs	r1, #0
    f5ec:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f5ee:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f5f2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    f5f4:	f108 0004 	add.w	r0, r8, #4
    f5f8:	f003 f85e 	bl	126b8 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f5fc:	faba f28a 	clz	r2, sl
    f600:	0952      	lsrs	r2, r2, #5
    f602:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    f606:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    f60a:	2201      	movs	r2, #1
	qh->callback_function = callback;
    f60c:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f610:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    f614:	2e00      	cmp	r6, #0
    f616:	d0df      	beq.n	f5d8 <usb_config_tx+0xc>
    f618:	4b03      	ldr	r3, [pc, #12]	; (f628 <usb_config_tx+0x5c>)
    f61a:	3410      	adds	r4, #16
    f61c:	6819      	ldr	r1, [r3, #0]
    f61e:	40a2      	lsls	r2, r4
    f620:	430a      	orrs	r2, r1
    f622:	601a      	str	r2, [r3, #0]
}
    f624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f628:	200252ec 	.word	0x200252ec
    f62c:	20000000 	.word	0x20000000

0000f630 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    f630:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    f632:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    f634:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    f636:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    f63a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    f63e:	b410      	push	{r4}
	transfer->next = 1;
    f640:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    f642:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    f644:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    f648:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    f64a:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    f64e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    f652:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    f654:	6181      	str	r1, [r0, #24]
}
    f656:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    f65a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    f65e:	4770      	bx	lr

0000f660 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f660:	1e83      	subs	r3, r0, #2
{
    f662:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f664:	2b03      	cmp	r3, #3
    f666:	d900      	bls.n	f66a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    f668:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f66a:	4b06      	ldr	r3, [pc, #24]	; (f684 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    f66c:	f100 0110 	add.w	r1, r0, #16
    f670:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f674:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    f678:	fa0c f101 	lsl.w	r1, ip, r1
    f67c:	3040      	adds	r0, #64	; 0x40
    f67e:	f7ff bbc1 	b.w	ee04 <schedule_transfer>
    f682:	bf00      	nop
    f684:	20000000 	.word	0x20000000

0000f688 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f688:	1e83      	subs	r3, r0, #2
{
    f68a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f68c:	2b03      	cmp	r3, #3
    f68e:	d900      	bls.n	f692 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    f690:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    f692:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    f694:	4b02      	ldr	r3, [pc, #8]	; (f6a0 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    f696:	4081      	lsls	r1, r0
    f698:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    f69c:	f7ff bbb2 	b.w	ee04 <schedule_transfer>
    f6a0:	20000000 	.word	0x20000000

0000f6a4 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    f6a4:	4a08      	ldr	r2, [pc, #32]	; (f6c8 <usb_transfer_status+0x24>)
    f6a6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    f6aa:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    f6ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f6b0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    f6b4:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    f6b6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    f6ba:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    f6bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    f6c0:	d0f3      	beq.n	f6aa <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    f6c2:	4608      	mov	r0, r1
    f6c4:	4770      	bx	lr
    f6c6:	bf00      	nop
    f6c8:	402e0000 	.word	0x402e0000

0000f6cc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f6cc:	4a12      	ldr	r2, [pc, #72]	; (f718 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f6ce:	4b13      	ldr	r3, [pc, #76]	; (f71c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f6d0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    f6d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    f6d8:	4298      	cmp	r0, r3
{
    f6da:	b510      	push	{r4, lr}
    f6dc:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    f6de:	d202      	bcs.n	f6e6 <usb_init_serialnumber+0x1a>
    f6e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f6e4:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    f6e6:	4c0e      	ldr	r4, [pc, #56]	; (f720 <usb_init_serialnumber+0x54>)
    f6e8:	a901      	add	r1, sp, #4
    f6ea:	220a      	movs	r2, #10
    f6ec:	f7fe fff2 	bl	e6d4 <ultoa>
	for (i=0; i<10; i++) {
    f6f0:	a901      	add	r1, sp, #4
    f6f2:	2300      	movs	r3, #0
    f6f4:	4620      	mov	r0, r4
		char c = buf[i];
    f6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    f6fa:	3301      	adds	r3, #1
		if (!c) break;
    f6fc:	b13a      	cbz	r2, f70e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    f6fe:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    f700:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    f704:	d1f7      	bne.n	f6f6 <usb_init_serialnumber+0x2a>
    f706:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f708:	7023      	strb	r3, [r4, #0]
}
    f70a:	b004      	add	sp, #16
    f70c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f70e:	005b      	lsls	r3, r3, #1
    f710:	b2db      	uxtb	r3, r3
    f712:	7023      	strb	r3, [r4, #0]
}
    f714:	b004      	add	sp, #16
    f716:	bd10      	pop	{r4, pc}
    f718:	401f4400 	.word	0x401f4400
    f71c:	00989680 	.word	0x00989680
    f720:	2000955c 	.word	0x2000955c

0000f724 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    f724:	f000 bc5c 	b.w	ffe0 <usb_serial_flush_input>

0000f728 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    f728:	f000 bc4e 	b.w	ffc8 <usb_serial_available>

0000f72c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f72c:	f000 bcea 	b.w	10104 <usb_serial_flush_output>

0000f730 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f730:	f000 bcc0 	b.w	100b4 <usb_serial_write_buffer_free>

0000f734 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f734:	4608      	mov	r0, r1
    f736:	4611      	mov	r1, r2
    f738:	f000 bcb0 	b.w	1009c <usb_serial_write>

0000f73c <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    f73c:	4a02      	ldr	r2, [pc, #8]	; (f748 <txEvent_event+0xc>)
    f73e:	6813      	ldr	r3, [r2, #0]
    f740:	3301      	adds	r3, #1
    f742:	6013      	str	r3, [r2, #0]
    f744:	4770      	bx	lr
    f746:	bf00      	nop
    f748:	2002537c 	.word	0x2002537c

0000f74c <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    f74c:	4a0e      	ldr	r2, [pc, #56]	; (f788 <rx_event+0x3c>)
{
    f74e:	b410      	push	{r4}
	uint32_t head = rx_head;
    f750:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    f752:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    f754:	3301      	adds	r3, #1
    f756:	2b04      	cmp	r3, #4
    f758:	d811      	bhi.n	f77e <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    f75a:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f75e:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    f760:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f764:	4a09      	ldr	r2, [pc, #36]	; (f78c <rx_event+0x40>)
    f766:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    f76a:	4809      	ldr	r0, [pc, #36]	; (f790 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f76c:	8812      	ldrh	r2, [r2, #0]
    f76e:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    f770:	4908      	ldr	r1, [pc, #32]	; (f794 <rx_event+0x48>)
    f772:	54cc      	strb	r4, [r1, r3]
}
    f774:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    f778:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    f77c:	4770      	bx	lr
    f77e:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    f782:	4663      	mov	r3, ip
    f784:	e7eb      	b.n	f75e <rx_event+0x12>
    f786:	bf00      	nop
    f788:	20025bd7 	.word	0x20025bd7
    f78c:	20025bc0 	.word	0x20025bc0
    f790:	20025450 	.word	0x20025450
    f794:	2002543c 	.word	0x2002543c

0000f798 <rx_queue_transfer>:
{
    f798:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f79a:	4915      	ldr	r1, [pc, #84]	; (f7f0 <rx_queue_transfer+0x58>)
{
    f79c:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    f79e:	4d15      	ldr	r5, [pc, #84]	; (f7f4 <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f7a0:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    f7a4:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f7a8:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    f7aa:	448c      	add	ip, r1
	asm("dsb");
    f7ac:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f7b0:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f7b4:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    f7b8:	3220      	adds	r2, #32
	} while (location < end_addr);
    f7ba:	4594      	cmp	ip, r2
    f7bc:	d8fa      	bhi.n	f7b4 <rx_queue_transfer+0x1c>
	asm("dsb");
    f7be:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f7c2:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7c6:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7cc:	4d0a      	ldr	r5, [pc, #40]	; (f7f8 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7ce:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7d2:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    f7d6:	4628      	mov	r0, r5
    f7d8:	f7ff ff2a 	bl	f630 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f7dc:	4629      	mov	r1, r5
    f7de:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7e0:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f7e4:	f7ff ff50 	bl	f688 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f7e8:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    f7ec:	bd70      	pop	{r4, r5, r6, pc}
    f7ee:	bf00      	nop
    f7f0:	20200880 	.word	0x20200880
    f7f4:	20025bc0 	.word	0x20025bc0
    f7f8:	2000bf40 	.word	0x2000bf40

0000f7fc <usb_mtp_configure>:
	if (usb_high_speed) {
    f7fc:	4b1f      	ldr	r3, [pc, #124]	; (f87c <usb_mtp_configure+0x80>)
{
    f7fe:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    f800:	781b      	ldrb	r3, [r3, #0]
    f802:	2b00      	cmp	r3, #0
    f804:	d037      	beq.n	f876 <usb_mtp_configure+0x7a>
    f806:	f44f 7300 	mov.w	r3, #512	; 0x200
    f80a:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    f80c:	491c      	ldr	r1, [pc, #112]	; (f880 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f80e:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    f810:	4d1c      	ldr	r5, [pc, #112]	; (f884 <usb_mtp_configure+0x88>)
	tx_head = 0;
    f812:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    f814:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f816:	2100      	movs	r1, #0
    f818:	481b      	ldr	r0, [pc, #108]	; (f888 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    f81a:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f81c:	f002 ff4c 	bl	126b8 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f820:	2280      	movs	r2, #128	; 0x80
    f822:	2100      	movs	r1, #0
    f824:	4819      	ldr	r0, [pc, #100]	; (f88c <usb_mtp_configure+0x90>)
    f826:	f002 ff47 	bl	126b8 <memset>
	rx_head = 0;
    f82a:	4b19      	ldr	r3, [pc, #100]	; (f890 <usb_mtp_configure+0x94>)
	tx_head = 0;
    f82c:	4a19      	ldr	r2, [pc, #100]	; (f894 <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f82e:	4631      	mov	r1, r6
	rx_head = 0;
    f830:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f832:	2004      	movs	r0, #4
	rx_tail = 0;
    f834:	4b18      	ldr	r3, [pc, #96]	; (f898 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    f836:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f838:	4622      	mov	r2, r4
	rx_tail = 0;
    f83a:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f83c:	4623      	mov	r3, r4
    f83e:	f7ff fec5 	bl	f5cc <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f842:	4622      	mov	r2, r4
    f844:	8829      	ldrh	r1, [r5, #0]
    f846:	2004      	movs	r0, #4
    f848:	4b14      	ldr	r3, [pc, #80]	; (f89c <usb_mtp_configure+0xa0>)
    f84a:	f7ff fe8d 	bl	f568 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    f84e:	4622      	mov	r2, r4
    f850:	4b13      	ldr	r3, [pc, #76]	; (f8a0 <usb_mtp_configure+0xa4>)
    f852:	2120      	movs	r1, #32
    f854:	2005      	movs	r0, #5
    f856:	f7ff feb9 	bl	f5cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f85a:	4620      	mov	r0, r4
    f85c:	f7ff ff9c 	bl	f798 <rx_queue_transfer>
    f860:	2001      	movs	r0, #1
    f862:	f7ff ff99 	bl	f798 <rx_queue_transfer>
    f866:	2002      	movs	r0, #2
    f868:	f7ff ff96 	bl	f798 <rx_queue_transfer>
    f86c:	2003      	movs	r0, #3
}
    f86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f872:	f7ff bf91 	b.w	f798 <rx_queue_transfer>
    f876:	2340      	movs	r3, #64	; 0x40
    f878:	461e      	mov	r6, r3
    f87a:	e7c7      	b.n	f80c <usb_mtp_configure+0x10>
    f87c:	20025be2 	.word	0x20025be2
    f880:	20025bc8 	.word	0x20025bc8
    f884:	20025bc0 	.word	0x20025bc0
    f888:	2000c0c0 	.word	0x2000c0c0
    f88c:	2000bf40 	.word	0x2000bf40
    f890:	20025bd7 	.word	0x20025bd7
    f894:	20025bdd 	.word	0x20025bdd
    f898:	20025bd9 	.word	0x20025bd9
    f89c:	0000f74d 	.word	0x0000f74d
    f8a0:	0000f73d 	.word	0x0000f73d

0000f8a4 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    f8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    f8a8:	4e20      	ldr	r6, [pc, #128]	; (f92c <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    f8aa:	f8df b094 	ldr.w	fp, [pc, #148]	; f940 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f8ae:	4f20      	ldr	r7, [pc, #128]	; (f930 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    f8b0:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    f8b4:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f8b8:	783b      	ldrb	r3, [r7, #0]
    f8ba:	b353      	cbz	r3, f912 <usb_mtp_recv+0x6e>
    f8bc:	4682      	mov	sl, r0
    f8be:	460d      	mov	r5, r1
    f8c0:	b2e4      	uxtb	r4, r4
    f8c2:	f8df 8080 	ldr.w	r8, [pc, #128]	; f944 <usb_mtp_recv+0xa0>
    f8c6:	e008      	b.n	f8da <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    f8c8:	6833      	ldr	r3, [r6, #0]
    f8ca:	eba3 0309 	sub.w	r3, r3, r9
    f8ce:	42ab      	cmp	r3, r5
    f8d0:	d224      	bcs.n	f91c <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    f8d2:	f000 fc61 	bl	10198 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f8d6:	783b      	ldrb	r3, [r7, #0]
    f8d8:	b1db      	cbz	r3, f912 <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    f8da:	f898 3000 	ldrb.w	r3, [r8]
    f8de:	429c      	cmp	r4, r3
    f8e0:	d0f2      	beq.n	f8c8 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    f8e2:	3401      	adds	r4, #1
    f8e4:	2c04      	cmp	r4, #4
    f8e6:	d81d      	bhi.n	f924 <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    f8e8:	b2e3      	uxtb	r3, r4
    f8ea:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    f8ee:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    f8f0:	4b10      	ldr	r3, [pc, #64]	; (f934 <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    f8f2:	4a11      	ldr	r2, [pc, #68]	; (f938 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f8f4:	4911      	ldr	r1, [pc, #68]	; (f93c <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    f8f6:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    f8f8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    f8fc:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f900:	4622      	mov	r2, r4
    f902:	f7fe fe4b 	bl	e59c <memcpy>
	rx_queue_transfer(i);
    f906:	4628      	mov	r0, r5
    f908:	f7ff ff46 	bl	f798 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    f90c:	4620      	mov	r0, r4
    f90e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f912:	f04f 34ff 	mov.w	r4, #4294967295
}
    f916:	4620      	mov	r0, r4
    f918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    f91c:	2400      	movs	r4, #0
}
    f91e:	4620      	mov	r0, r4
    f920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f924:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    f926:	461c      	mov	r4, r3
    f928:	e7df      	b.n	f8ea <usb_mtp_recv+0x46>
    f92a:	bf00      	nop
    f92c:	20025b88 	.word	0x20025b88
    f930:	20025be1 	.word	0x20025be1
    f934:	20025450 	.word	0x20025450
    f938:	2002543c 	.word	0x2002543c
    f93c:	20200880 	.word	0x20200880
    f940:	20025bd9 	.word	0x20025bd9
    f944:	20025bd7 	.word	0x20025bd7

0000f948 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f948:	4b07      	ldr	r3, [pc, #28]	; (f968 <usb_mtp_available+0x20>)
    f94a:	781b      	ldrb	r3, [r3, #0]
    f94c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f950:	b14b      	cbz	r3, f966 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    f952:	4a06      	ldr	r2, [pc, #24]	; (f96c <usb_mtp_available+0x24>)
    f954:	4b06      	ldr	r3, [pc, #24]	; (f970 <usb_mtp_available+0x28>)
    f956:	7812      	ldrb	r2, [r2, #0]
    f958:	781b      	ldrb	r3, [r3, #0]
    f95a:	429a      	cmp	r2, r3
    f95c:	d002      	beq.n	f964 <usb_mtp_available+0x1c>
    f95e:	4b05      	ldr	r3, [pc, #20]	; (f974 <usb_mtp_available+0x2c>)
    f960:	8818      	ldrh	r0, [r3, #0]
    f962:	4770      	bx	lr
	if (!usb_configuration) return 0;
    f964:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    f966:	4770      	bx	lr
    f968:	20025be1 	.word	0x20025be1
    f96c:	20025bd7 	.word	0x20025bd7
    f970:	20025bd9 	.word	0x20025bd9
    f974:	20025bc0 	.word	0x20025bc0

0000f978 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    f97c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; fa40 <usb_mtp_send+0xc8>
    f980:	4c2a      	ldr	r4, [pc, #168]	; (fa2c <usb_mtp_send+0xb4>)
    f982:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    f986:	4e2a      	ldr	r6, [pc, #168]	; (fa30 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f988:	4f2a      	ldr	r7, [pc, #168]	; (fa34 <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    f98a:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    f98e:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f992:	783b      	ldrb	r3, [r7, #0]
    f994:	2b00      	cmp	r3, #0
    f996:	d042      	beq.n	fa1e <usb_mtp_send+0xa6>
    f998:	4682      	mov	sl, r0
    f99a:	4689      	mov	r9, r1
    f99c:	4615      	mov	r5, r2
    f99e:	e008      	b.n	f9b2 <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f9a0:	6833      	ldr	r3, [r6, #0]
    f9a2:	eba3 0308 	sub.w	r3, r3, r8
    f9a6:	42ab      	cmp	r3, r5
    f9a8:	d83d      	bhi.n	fa26 <usb_mtp_send+0xae>
		yield();
    f9aa:	f000 fbf5 	bl	10198 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f9ae:	783b      	ldrb	r3, [r7, #0]
    f9b0:	b3ab      	cbz	r3, fa1e <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    f9b2:	4620      	mov	r0, r4
    f9b4:	f7ff fe76 	bl	f6a4 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    f9b8:	0603      	lsls	r3, r0, #24
    f9ba:	d4f1      	bmi.n	f9a0 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f9bc:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    f9c0:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f9c2:	4d1d      	ldr	r5, [pc, #116]	; (fa38 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    f9c4:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f9c6:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    f9ca:	4628      	mov	r0, r5
    f9cc:	f7fe fde6 	bl	e59c <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    f9d0:	4a1a      	ldr	r2, [pc, #104]	; (fa3c <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f9d2:	462b      	mov	r3, r5
    f9d4:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f9d6:	442a      	add	r2, r5
	asm("dsb");
    f9d8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f9dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f9e0:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f9e4:	3320      	adds	r3, #32
	} while (location < end_addr);
    f9e6:	429a      	cmp	r2, r3
    f9e8:	d8fa      	bhi.n	f9e0 <usb_mtp_send+0x68>
	asm("dsb");
    f9ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f9ee:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    f9f2:	2300      	movs	r3, #0
    f9f4:	4629      	mov	r1, r5
    f9f6:	464a      	mov	r2, r9
    f9f8:	4620      	mov	r0, r4
    f9fa:	f7ff fe19 	bl	f630 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    f9fe:	4621      	mov	r1, r4
    fa00:	2004      	movs	r0, #4
    fa02:	f7ff fe2d 	bl	f660 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fa06:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    fa0a:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    fa0c:	3301      	adds	r3, #1
    fa0e:	b2db      	uxtb	r3, r3
    fa10:	2b03      	cmp	r3, #3
    fa12:	bf88      	it	hi
    fa14:	2300      	movhi	r3, #0
    fa16:	f88b 3000 	strb.w	r3, [fp]
}
    fa1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    fa1e:	f04f 30ff 	mov.w	r0, #4294967295
}
    fa22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    fa26:	2000      	movs	r0, #0
}
    fa28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa2c:	2000c0c0 	.word	0x2000c0c0
    fa30:	20025b88 	.word	0x20025b88
    fa34:	20025be1 	.word	0x20025be1
    fa38:	20201080 	.word	0x20201080
    fa3c:	20025bc8 	.word	0x20025bc8
    fa40:	20025bdd 	.word	0x20025bdd

0000fa44 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    fa46:	4c14      	ldr	r4, [pc, #80]	; (fa98 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fa48:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    fa4c:	4e13      	ldr	r6, [pc, #76]	; (fa9c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fa4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    fa52:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    fa56:	4f12      	ldr	r7, [pc, #72]	; (faa0 <rx_queue_transfer+0x5c>)
    fa58:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    fa5c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fa5e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    fa62:	4621      	mov	r1, r4
    fa64:	883a      	ldrh	r2, [r7, #0]
    fa66:	4630      	mov	r0, r6
    fa68:	f7ff fde2 	bl	f630 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    fa6c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    fa6e:	4423      	add	r3, r4
	asm("dsb");
    fa70:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    fa74:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    fa78:	3420      	adds	r4, #32
	} while (location < end_addr);
    fa7a:	42a3      	cmp	r3, r4
    fa7c:	d8fa      	bhi.n	fa74 <rx_queue_transfer+0x30>
	asm("dsb");
    fa7e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fa82:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    fa86:	2003      	movs	r0, #3
    fa88:	4631      	mov	r1, r6
    fa8a:	f7ff fdfd 	bl	f688 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    fa8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    fa92:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    fa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa98:	20201880 	.word	0x20201880
    fa9c:	2000bfc0 	.word	0x2000bfc0
    faa0:	20025bc2 	.word	0x20025bc2

0000faa4 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    faa4:	4b24      	ldr	r3, [pc, #144]	; (fb38 <rx_event+0x94>)
{
    faa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    faaa:	881c      	ldrh	r4, [r3, #0]
    faac:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    faae:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    fab0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    fab4:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    fab6:	2c00      	cmp	r4, #0
    fab8:	dd24      	ble.n	fb04 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    faba:	4920      	ldr	r1, [pc, #128]	; (fb3c <rx_event+0x98>)
		if (head != rx_tail) {
    fabc:	4820      	ldr	r0, [pc, #128]	; (fb40 <rx_event+0x9c>)
		uint32_t head = rx_head;
    fabe:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    fac0:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    fac2:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    fac4:	4e1f      	ldr	r6, [pc, #124]	; (fb44 <rx_event+0xa0>)
		if (head != rx_tail) {
    fac6:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    fac8:	481f      	ldr	r0, [pc, #124]	; (fb48 <rx_event+0xa4>)
		if (head != rx_tail) {
    faca:	d007      	beq.n	fadc <rx_event+0x38>
			uint32_t ii = rx_list[head];
    facc:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    fad0:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    fad4:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    fad8:	4294      	cmp	r4, r2
    fada:	d918      	bls.n	fb0e <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    fadc:	3301      	adds	r3, #1
		rx_index[i] = 0;
    fade:	2200      	movs	r2, #0
		rx_count[i] = len;
    fae0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    fae4:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    fae6:	4e19      	ldr	r6, [pc, #100]	; (fb4c <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    fae8:	bf88      	it	hi
    faea:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    faec:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    faf0:	bf98      	it	ls
    faf2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    faf4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    faf6:	4b16      	ldr	r3, [pc, #88]	; (fb50 <rx_event+0xac>)
		rx_head = head;
    faf8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    fafa:	681a      	ldr	r2, [r3, #0]
    fafc:	4414      	add	r4, r2
    fafe:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    fb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    fb04:	4628      	mov	r0, r5
}
    fb06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    fb0a:	f7ff bf9b 	b.w	fa44 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    fb0e:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    fb12:	4910      	ldr	r1, [pc, #64]	; (fb54 <rx_event+0xb0>)
    fb14:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    fb16:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    fb18:	4408      	add	r0, r1
    fb1a:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    fb1e:	f7fe fd3d 	bl	e59c <memcpy>
				rx_available += len;
    fb22:	4a0b      	ldr	r2, [pc, #44]	; (fb50 <rx_event+0xac>)
				rx_queue_transfer(i);
    fb24:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    fb26:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    fb2a:	6813      	ldr	r3, [r2, #0]
    fb2c:	4423      	add	r3, r4
}
    fb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    fb32:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    fb34:	f7ff bf86 	b.w	fa44 <rx_queue_transfer>
    fb38:	20025bc2 	.word	0x20025bc2
    fb3c:	20025bd8 	.word	0x20025bd8
    fb40:	20025bda 	.word	0x20025bda
    fb44:	2002541c 	.word	0x2002541c
    fb48:	20025444 	.word	0x20025444
    fb4c:	2002542c 	.word	0x2002542c
    fb50:	20025418 	.word	0x20025418
    fb54:	20201880 	.word	0x20201880

0000fb58 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    fb58:	4b1d      	ldr	r3, [pc, #116]	; (fbd0 <usb_serial_flush_callback+0x78>)
    fb5a:	781a      	ldrb	r2, [r3, #0]
    fb5c:	2a00      	cmp	r2, #0
    fb5e:	d136      	bne.n	fbce <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    fb60:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    fb64:	4a1b      	ldr	r2, [pc, #108]	; (fbd4 <usb_serial_flush_callback+0x7c>)
    fb66:	7812      	ldrb	r2, [r2, #0]
    fb68:	b38a      	cbz	r2, fbce <usb_serial_flush_callback+0x76>
{
    fb6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    fb6e:	4d1a      	ldr	r5, [pc, #104]	; (fbd8 <usb_serial_flush_callback+0x80>)
    fb70:	882a      	ldrh	r2, [r5, #0]
    fb72:	b352      	cbz	r2, fbca <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    fb74:	4e19      	ldr	r6, [pc, #100]	; (fbdc <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    fb76:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    fb7a:	4f19      	ldr	r7, [pc, #100]	; (fbe0 <usb_serial_flush_callback+0x88>)
    fb7c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fb7e:	4c19      	ldr	r4, [pc, #100]	; (fbe4 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    fb80:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fb84:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fb88:	4642      	mov	r2, r8
    fb8a:	4638      	mov	r0, r7
    fb8c:	4621      	mov	r1, r4
    fb8e:	f7ff fd4f 	bl	f630 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    fb92:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    fb96:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    fb9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fb9e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    fba2:	3420      	adds	r4, #32
	} while (location < end_addr);
    fba4:	42a2      	cmp	r2, r4
    fba6:	d8fa      	bhi.n	fb9e <usb_serial_flush_callback+0x46>
	asm("dsb");
    fba8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fbac:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    fbb0:	2003      	movs	r0, #3
    fbb2:	4639      	mov	r1, r7
    fbb4:	f7ff fd54 	bl	f660 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fbb8:	7833      	ldrb	r3, [r6, #0]
    fbba:	3301      	adds	r3, #1
    fbbc:	b2db      	uxtb	r3, r3
    fbbe:	2b03      	cmp	r3, #3
    fbc0:	bf88      	it	hi
    fbc2:	2300      	movhi	r3, #0
    fbc4:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    fbc6:	2300      	movs	r3, #0
    fbc8:	802b      	strh	r3, [r5, #0]
}
    fbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fbce:	4770      	bx	lr
    fbd0:	20025bdf 	.word	0x20025bdf
    fbd4:	20025be1 	.word	0x20025be1
    fbd8:	20025bc6 	.word	0x20025bc6
    fbdc:	20025bde 	.word	0x20025bde
    fbe0:	2000c140 	.word	0x2000c140
    fbe4:	20202880 	.word	0x20202880

0000fbe8 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    fbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbec:	b085      	sub	sp, #20
	while (size > 0) {
    fbee:	e9cd 1001 	strd	r1, r0, [sp, #4]
    fbf2:	2900      	cmp	r1, #0
    fbf4:	f000 80bf 	beq.w	fd76 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    fbf8:	2300      	movs	r3, #0
    fbfa:	4c60      	ldr	r4, [pc, #384]	; (fd7c <usb_serial_write.part.0+0x194>)
    fbfc:	f8df 8198 	ldr.w	r8, [pc, #408]	; fd98 <usb_serial_write.part.0+0x1b0>
    fc00:	f8df a198 	ldr.w	sl, [pc, #408]	; fd9c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    fc04:	4f5e      	ldr	r7, [pc, #376]	; (fd80 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    fc06:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    fc08:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    fc0a:	4a5e      	ldr	r2, [pc, #376]	; (fd84 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    fc0c:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    fc0e:	4b5e      	ldr	r3, [pc, #376]	; (fd88 <usb_serial_write.part.0+0x1a0>)
    fc10:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    fc12:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    fc16:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	f040 80a7 	bne.w	fd6e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    fc20:	461e      	mov	r6, r3
		int waiting=0;
    fc22:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    fc24:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    fc26:	4648      	mov	r0, r9
    fc28:	f7ff fd3c 	bl	f6a4 <usb_transfer_status>
			if (!(status & 0x80)) {
    fc2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    fc30:	f000 808c 	beq.w	fd4c <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    fc34:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    fc38:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    fc3c:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    fc40:	b905      	cbnz	r5, fc44 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    fc42:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    fc44:	2b00      	cmp	r3, #0
    fc46:	d17d      	bne.n	fd44 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    fc48:	683b      	ldr	r3, [r7, #0]
    fc4a:	1b9b      	subs	r3, r3, r6
    fc4c:	2b78      	cmp	r3, #120	; 0x78
    fc4e:	f200 8087 	bhi.w	fd60 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    fc52:	4b4e      	ldr	r3, [pc, #312]	; (fd8c <usb_serial_write.part.0+0x1a4>)
    fc54:	781b      	ldrb	r3, [r3, #0]
    fc56:	2b00      	cmp	r3, #0
    fc58:	d074      	beq.n	fd44 <usb_serial_write.part.0+0x15c>
			yield();
    fc5a:	f000 fa9d 	bl	10198 <yield>
			tx_noautoflush = 1;
    fc5e:	2201      	movs	r2, #1
		while (!tx_available) {
    fc60:	f8b8 3000 	ldrh.w	r3, [r8]
    fc64:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    fc66:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    fc68:	2b00      	cmp	r3, #0
    fc6a:	d0dc      	beq.n	fc26 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fc6c:	4a46      	ldr	r2, [pc, #280]	; (fd88 <usb_serial_write.part.0+0x1a0>)
    fc6e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    fc72:	7811      	ldrb	r1, [r2, #0]
    fc74:	461a      	mov	r2, r3
    fc76:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    fc7a:	4d45      	ldr	r5, [pc, #276]	; (fd90 <usb_serial_write.part.0+0x1a8>)
    fc7c:	02c9      	lsls	r1, r1, #11
    fc7e:	4428      	add	r0, r5
		if (size >= tx_available) {
    fc80:	9d01      	ldr	r5, [sp, #4]
    fc82:	4295      	cmp	r5, r2
    fc84:	d217      	bcs.n	fcb6 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    fc86:	9303      	str	r3, [sp, #12]
    fc88:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    fc8c:	462a      	mov	r2, r5
    fc8e:	f7fe fc85 	bl	e59c <memcpy>
			tx_available -= size;
    fc92:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fc94:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    fc98:	1b5b      	subs	r3, r3, r5
    fc9a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fc9e:	4b3d      	ldr	r3, [pc, #244]	; (fd94 <usb_serial_write.part.0+0x1ac>)
    fca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    fca4:	f3bf 8f4f 	dsb	sy
			sent += size;
    fca8:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    fcaa:	2300      	movs	r3, #0
			sent += size;
    fcac:	4428      	add	r0, r5
		tx_noautoflush = 0;
    fcae:	7023      	strb	r3, [r4, #0]
}
    fcb0:	b005      	add	sp, #20
    fcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fcb6:	4b36      	ldr	r3, [pc, #216]	; (fd90 <usb_serial_write.part.0+0x1a8>)
    fcb8:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    fcba:	9902      	ldr	r1, [sp, #8]
    fcbc:	f7fe fc6e 	bl	e59c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    fcc0:	2300      	movs	r3, #0
    fcc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fcc6:	4629      	mov	r1, r5
    fcc8:	4648      	mov	r0, r9
    fcca:	f7ff fcb1 	bl	f630 <usb_prepare_transfer>
	asm("dsb");
    fcce:	f3bf 8f4f 	dsb	sy
    fcd2:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    fcd6:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    fcda:	4293      	cmp	r3, r2
    fcdc:	bf34      	ite	cc
    fcde:	2301      	movcc	r3, #1
    fce0:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    fce2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fce6:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    fcea:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    fcee:	3520      	adds	r5, #32
	} while (location < end_addr);
    fcf0:	42ab      	cmp	r3, r5
    fcf2:	d1fa      	bne.n	fcea <usb_serial_write.part.0+0x102>
	asm("dsb");
    fcf4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fcf8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    fcfc:	2003      	movs	r0, #3
    fcfe:	4649      	mov	r1, r9
    fd00:	f7ff fcae 	bl	f660 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    fd04:	4a20      	ldr	r2, [pc, #128]	; (fd88 <usb_serial_write.part.0+0x1a0>)
    fd06:	7813      	ldrb	r3, [r2, #0]
    fd08:	3301      	adds	r3, #1
    fd0a:	b2db      	uxtb	r3, r3
    fd0c:	2b03      	cmp	r3, #3
    fd0e:	bf84      	itt	hi
    fd10:	2300      	movhi	r3, #0
    fd12:	4a1d      	ldrhi	r2, [pc, #116]	; (fd88 <usb_serial_write.part.0+0x1a0>)
    fd14:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    fd16:	f8b8 3000 	ldrh.w	r3, [r8]
    fd1a:	9a01      	ldr	r2, [sp, #4]
    fd1c:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    fd1e:	9a00      	ldr	r2, [sp, #0]
    fd20:	441a      	add	r2, r3
			size -= tx_available;
    fd22:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    fd24:	9200      	str	r2, [sp, #0]
			data += tx_available;
    fd26:	9a02      	ldr	r2, [sp, #8]
    fd28:	441a      	add	r2, r3
			tx_available = 0;
    fd2a:	2300      	movs	r3, #0
			data += tx_available;
    fd2c:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    fd2e:	4a19      	ldr	r2, [pc, #100]	; (fd94 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    fd30:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    fd34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    fd38:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    fd3c:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    fd3e:	2900      	cmp	r1, #0
    fd40:	f47f af62 	bne.w	fc08 <usb_serial_write.part.0+0x20>
	return sent;
    fd44:	9800      	ldr	r0, [sp, #0]
}
    fd46:	b005      	add	sp, #20
    fd48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    fd4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fd50:	4b0d      	ldr	r3, [pc, #52]	; (fd88 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    fd52:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fd56:	7819      	ldrb	r1, [r3, #0]
				break;
    fd58:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    fd5a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    fd5e:	e78a      	b.n	fc76 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    fd60:	2301      	movs	r3, #1
				return sent;
    fd62:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    fd64:	f88a 3000 	strb.w	r3, [sl]
}
    fd68:	b005      	add	sp, #20
    fd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fd6e:	461a      	mov	r2, r3
    fd70:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    fd74:	e77f      	b.n	fc76 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    fd76:	9801      	ldr	r0, [sp, #4]
	return sent;
    fd78:	e7e5      	b.n	fd46 <usb_serial_write.part.0+0x15e>
    fd7a:	bf00      	nop
    fd7c:	20025bdf 	.word	0x20025bdf
    fd80:	20025b88 	.word	0x20025b88
    fd84:	2000c140 	.word	0x2000c140
    fd88:	20025bde 	.word	0x20025bde
    fd8c:	20025be1 	.word	0x20025be1
    fd90:	20202880 	.word	0x20202880
    fd94:	402e0000 	.word	0x402e0000
    fd98:	20025bc6 	.word	0x20025bc6
    fd9c:	20025bdc 	.word	0x20025bdc

0000fda0 <usb_serial_reset>:
}
    fda0:	4770      	bx	lr
    fda2:	bf00      	nop

0000fda4 <usb_serial_configure>:
	if (usb_high_speed) {
    fda4:	4b2d      	ldr	r3, [pc, #180]	; (fe5c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fda6:	2100      	movs	r1, #0
    fda8:	2280      	movs	r2, #128	; 0x80
    fdaa:	482d      	ldr	r0, [pc, #180]	; (fe60 <usb_serial_configure+0xbc>)
{
    fdac:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    fdae:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    fdb0:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    fdb2:	4d2c      	ldr	r5, [pc, #176]	; (fe64 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    fdb4:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    fdb6:	4e2c      	ldr	r6, [pc, #176]	; (fe68 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    fdb8:	bf0c      	ite	eq
    fdba:	2340      	moveq	r3, #64	; 0x40
    fdbc:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    fdc0:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    fdc2:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fdc4:	f002 fc78 	bl	126b8 <memset>
	tx_head = 0;
    fdc8:	4a28      	ldr	r2, [pc, #160]	; (fe6c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fdca:	4621      	mov	r1, r4
	tx_available = 0;
    fdcc:	4b28      	ldr	r3, [pc, #160]	; (fe70 <usb_serial_configure+0xcc>)
	tx_head = 0;
    fdce:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fdd0:	f44f 7280 	mov.w	r2, #256	; 0x100
    fdd4:	4827      	ldr	r0, [pc, #156]	; (fe74 <usb_serial_configure+0xd0>)
	tx_available = 0;
    fdd6:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fdd8:	f002 fc6e 	bl	126b8 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    fddc:	4a26      	ldr	r2, [pc, #152]	; (fe78 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fdde:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    fde0:	4b26      	ldr	r3, [pc, #152]	; (fe7c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fde2:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    fde4:	e9c2 4400 	strd	r4, r4, [r2]
    fde8:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    fdec:	4a24      	ldr	r2, [pc, #144]	; (fe80 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    fdee:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    fdf2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    fdf4:	4a23      	ldr	r2, [pc, #140]	; (fe84 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    fdf6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    fdfa:	4b23      	ldr	r3, [pc, #140]	; (fe88 <usb_serial_configure+0xe4>)
    fdfc:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fdfe:	4623      	mov	r3, r4
	rx_available = 0;
    fe00:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fe02:	4622      	mov	r2, r4
    fe04:	f7ff fbe2 	bl	f5cc <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    fe08:	4622      	mov	r2, r4
    fe0a:	8831      	ldrh	r1, [r6, #0]
    fe0c:	2003      	movs	r0, #3
    fe0e:	4b1f      	ldr	r3, [pc, #124]	; (fe8c <usb_serial_configure+0xe8>)
    fe10:	f7ff fbaa 	bl	f568 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    fe14:	4623      	mov	r3, r4
    fe16:	2201      	movs	r2, #1
    fe18:	8829      	ldrh	r1, [r5, #0]
    fe1a:	2003      	movs	r0, #3
    fe1c:	f7ff fbd6 	bl	f5cc <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    fe20:	4620      	mov	r0, r4
    fe22:	3401      	adds	r4, #1
    fe24:	f7ff fe0e 	bl	fa44 <rx_queue_transfer>
    fe28:	2c08      	cmp	r4, #8
    fe2a:	d1f9      	bne.n	fe20 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    fe2c:	4b18      	ldr	r3, [pc, #96]	; (fe90 <usb_serial_configure+0xec>)
    fe2e:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    fe30:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    fe32:	4818      	ldr	r0, [pc, #96]	; (fe94 <usb_serial_configure+0xf0>)
    fe34:	4c18      	ldr	r4, [pc, #96]	; (fe98 <usb_serial_configure+0xf4>)
    fe36:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    fe38:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    fe3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    fe40:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    fe44:	4915      	ldr	r1, [pc, #84]	; (fe9c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    fe46:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    fe4a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    fe4e:	b121      	cbz	r1, fe5a <usb_serial_configure+0xb6>
    fe50:	4a13      	ldr	r2, [pc, #76]	; (fea0 <usb_serial_configure+0xfc>)
    fe52:	7813      	ldrb	r3, [r2, #0]
    fe54:	f043 0301 	orr.w	r3, r3, #1
    fe58:	7013      	strb	r3, [r2, #0]
}
    fe5a:	bd70      	pop	{r4, r5, r6, pc}
    fe5c:	20025be2 	.word	0x20025be2
    fe60:	2000c140 	.word	0x2000c140
    fe64:	20025bca 	.word	0x20025bca
    fe68:	20025bc2 	.word	0x20025bc2
    fe6c:	20025bde 	.word	0x20025bde
    fe70:	20025bc6 	.word	0x20025bc6
    fe74:	2000bfc0 	.word	0x2000bfc0
    fe78:	2002541c 	.word	0x2002541c
    fe7c:	2002542c 	.word	0x2002542c
    fe80:	20025bd8 	.word	0x20025bd8
    fe84:	20025418 	.word	0x20025418
    fe88:	20025bda 	.word	0x20025bda
    fe8c:	0000faa5 	.word	0x0000faa5
    fe90:	402e0000 	.word	0x402e0000
    fe94:	20025bac 	.word	0x20025bac
    fe98:	0000fb59 	.word	0x0000fb59
    fe9c:	00000000 	.word	0x00000000
    fea0:	20025be4 	.word	0x20025be4

0000fea4 <usb_serial_read>:
{
    fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fea8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    feac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    feb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ff7c <usb_serial_read+0xd8>
{
    feb4:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    feb6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    feba:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    febc:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    fec0:	2900      	cmp	r1, #0
    fec2:	d04f      	beq.n	ff64 <usb_serial_read+0xc0>
    fec4:	4680      	mov	r8, r0
    fec6:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    fec8:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    feca:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ff80 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    fece:	4b26      	ldr	r3, [pc, #152]	; (ff68 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    fed0:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fed4:	4925      	ldr	r1, [pc, #148]	; (ff6c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    fed6:	781b      	ldrb	r3, [r3, #0]
    fed8:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    feda:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    fede:	d03f      	beq.n	ff60 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    fee0:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    fee2:	4b23      	ldr	r3, [pc, #140]	; (ff70 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fee4:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    fee6:	bf28      	it	cs
    fee8:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    feea:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    feec:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fef0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    fef4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    fef6:	4b1f      	ldr	r3, [pc, #124]	; (ff74 <usb_serial_read+0xd0>)
    fef8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    fefc:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    ff00:	42aa      	cmp	r2, r5
    ff02:	d21c      	bcs.n	ff3e <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ff04:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    ff08:	4918      	ldr	r1, [pc, #96]	; (ff6c <usb_serial_read+0xc8>)
			rx_available -= len;
    ff0a:	4c1b      	ldr	r4, [pc, #108]	; (ff78 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ff0c:	4461      	add	r1, ip
    ff0e:	9201      	str	r2, [sp, #4]
    ff10:	f7fe fb44 	bl	e59c <memcpy>
			rx_available -= len;
    ff14:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    ff16:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    ff1a:	4658      	mov	r0, fp
			rx_index[i] += len;
    ff1c:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    ff1e:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    ff22:	442a      	add	r2, r5
			rx_available -= len;
    ff24:	4439      	add	r1, r7
			rx_index[i] += len;
    ff26:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    ff2a:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ff2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ff30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    ff34:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    ff38:	b003      	add	sp, #12
    ff3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ff3e:	462a      	mov	r2, r5
			count += avail;
    ff40:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ff42:	f7fe fb2b 	bl	e59c <memcpy>
			rx_available -= avail;
    ff46:	490c      	ldr	r1, [pc, #48]	; (ff78 <usb_serial_read+0xd4>)
			rx_tail = tail;
    ff48:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    ff4a:	4630      	mov	r0, r6
			rx_available -= avail;
    ff4c:	680a      	ldr	r2, [r1, #0]
			p += avail;
    ff4e:	44a8      	add	r8, r5
			rx_available -= avail;
    ff50:	1b52      	subs	r2, r2, r5
    ff52:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    ff54:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    ff58:	f7ff fd74 	bl	fa44 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    ff5c:	45bb      	cmp	fp, r7
    ff5e:	d8b6      	bhi.n	fece <usb_serial_read+0x2a>
	return count;
    ff60:	4638      	mov	r0, r7
    ff62:	e7e3      	b.n	ff2c <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    ff64:	4608      	mov	r0, r1
    ff66:	e7e1      	b.n	ff2c <usb_serial_read+0x88>
    ff68:	20025bd8 	.word	0x20025bd8
    ff6c:	20201880 	.word	0x20201880
    ff70:	20025444 	.word	0x20025444
    ff74:	2002541c 	.word	0x2002541c
    ff78:	20025418 	.word	0x20025418
    ff7c:	20025bda 	.word	0x20025bda
    ff80:	2002542c 	.word	0x2002542c

0000ff84 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    ff84:	4b0b      	ldr	r3, [pc, #44]	; (ffb4 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    ff86:	4a0c      	ldr	r2, [pc, #48]	; (ffb8 <usb_serial_peekchar+0x34>)
    ff88:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    ff8a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    ff8c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    ff8e:	428a      	cmp	r2, r1
    ff90:	d00d      	beq.n	ffae <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    ff92:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    ff94:	4809      	ldr	r0, [pc, #36]	; (ffbc <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ff96:	4a0a      	ldr	r2, [pc, #40]	; (ffc0 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    ff98:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ff9a:	490a      	ldr	r1, [pc, #40]	; (ffc4 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    ff9c:	bf28      	it	cs
    ff9e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ffa0:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ffa2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    ffa6:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    ffaa:	5c58      	ldrb	r0, [r3, r1]
    ffac:	4770      	bx	lr
	if (tail == rx_head) return -1;
    ffae:	f04f 30ff 	mov.w	r0, #4294967295
}
    ffb2:	4770      	bx	lr
    ffb4:	20025bd8 	.word	0x20025bd8
    ffb8:	20025bda 	.word	0x20025bda
    ffbc:	20025444 	.word	0x20025444
    ffc0:	20201880 	.word	0x20201880
    ffc4:	2002542c 	.word	0x2002542c

0000ffc8 <usb_serial_available>:
	uint32_t n = rx_available;
    ffc8:	4b04      	ldr	r3, [pc, #16]	; (ffdc <usb_serial_available+0x14>)
{
    ffca:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    ffcc:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ffce:	b10c      	cbz	r4, ffd4 <usb_serial_available+0xc>
}
    ffd0:	4620      	mov	r0, r4
    ffd2:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    ffd4:	f000 f8e0 	bl	10198 <yield>
}
    ffd8:	4620      	mov	r0, r4
    ffda:	bd10      	pop	{r4, pc}
    ffdc:	20025418 	.word	0x20025418

0000ffe0 <usb_serial_flush_input>:
{
    ffe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    ffe4:	4e14      	ldr	r6, [pc, #80]	; (10038 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    ffe6:	4d15      	ldr	r5, [pc, #84]	; (1003c <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    ffe8:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    ffea:	782a      	ldrb	r2, [r5, #0]
    ffec:	4293      	cmp	r3, r2
    ffee:	d021      	beq.n	10034 <usb_serial_flush_input+0x54>
    fff0:	b2dc      	uxtb	r4, r3
    fff2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 10044 <usb_serial_flush_input+0x64>
    fff6:	f8df b050 	ldr.w	fp, [pc, #80]	; 10048 <usb_serial_flush_input+0x68>
    fffa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1004c <usb_serial_flush_input+0x6c>
    fffe:	4f10      	ldr	r7, [pc, #64]	; (10040 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   10000:	3401      	adds	r4, #1
   10002:	2c08      	cmp	r4, #8
		rx_tail = tail;
   10004:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   10008:	d901      	bls.n	1000e <usb_serial_flush_input+0x2e>
   1000a:	2400      	movs	r4, #0
   1000c:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   1000e:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   10012:	f8db 3000 	ldr.w	r3, [fp]
   10016:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   1001a:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   1001e:	1a52      	subs	r2, r2, r1
   10020:	1a9b      	subs	r3, r3, r2
   10022:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   10026:	f7ff fd0d 	bl	fa44 <rx_queue_transfer>
		rx_tail = tail;
   1002a:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   1002e:	782b      	ldrb	r3, [r5, #0]
   10030:	42a3      	cmp	r3, r4
   10032:	d1e5      	bne.n	10000 <usb_serial_flush_input+0x20>
}
   10034:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10038:	20025bda 	.word	0x20025bda
   1003c:	20025bd8 	.word	0x20025bd8
   10040:	2002542c 	.word	0x2002542c
   10044:	20025444 	.word	0x20025444
   10048:	20025418 	.word	0x20025418
   1004c:	2002541c 	.word	0x2002541c

00010050 <usb_serial_getchar>:
{
   10050:	b500      	push	{lr}
   10052:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   10054:	2101      	movs	r1, #1
   10056:	f10d 0007 	add.w	r0, sp, #7
   1005a:	f7ff ff23 	bl	fea4 <usb_serial_read>
   1005e:	b120      	cbz	r0, 1006a <usb_serial_getchar+0x1a>
   10060:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   10064:	b003      	add	sp, #12
   10066:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   1006a:	f04f 30ff 	mov.w	r0, #4294967295
   1006e:	e7f9      	b.n	10064 <usb_serial_getchar+0x14>

00010070 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   10070:	4b09      	ldr	r3, [pc, #36]	; (10098 <usb_serial_putchar+0x28>)
{
   10072:	b500      	push	{lr}
   10074:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   10076:	781b      	ldrb	r3, [r3, #0]
{
   10078:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   1007c:	b13b      	cbz	r3, 1008e <usb_serial_putchar+0x1e>
   1007e:	2101      	movs	r1, #1
   10080:	f10d 0007 	add.w	r0, sp, #7
   10084:	f7ff fdb0 	bl	fbe8 <usb_serial_write.part.0>
}
   10088:	b003      	add	sp, #12
   1008a:	f85d fb04 	ldr.w	pc, [sp], #4
   1008e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   10092:	b003      	add	sp, #12
   10094:	f85d fb04 	ldr.w	pc, [sp], #4
   10098:	20025be1 	.word	0x20025be1

0001009c <usb_serial_write>:
	if (!usb_configuration) return 0;
   1009c:	4b04      	ldr	r3, [pc, #16]	; (100b0 <usb_serial_write+0x14>)
   1009e:	781b      	ldrb	r3, [r3, #0]
   100a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   100a4:	b10b      	cbz	r3, 100aa <usb_serial_write+0xe>
   100a6:	f7ff bd9f 	b.w	fbe8 <usb_serial_write.part.0>
}
   100aa:	4610      	mov	r0, r2
   100ac:	4770      	bx	lr
   100ae:	bf00      	nop
   100b0:	20025be1 	.word	0x20025be1

000100b4 <usb_serial_write_buffer_free>:
{
   100b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   100b8:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   100ba:	f8df 8044 	ldr.w	r8, [pc, #68]	; 10100 <usb_serial_write_buffer_free+0x4c>
   100be:	2301      	movs	r3, #1
   100c0:	4d0d      	ldr	r5, [pc, #52]	; (100f8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   100c2:	4627      	mov	r7, r4
   100c4:	4e0d      	ldr	r6, [pc, #52]	; (100fc <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   100c6:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   100ca:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   100cc:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   100ce:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   100d0:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   100d2:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   100d6:	d005      	beq.n	100e4 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   100d8:	f7ff fae4 	bl	f6a4 <usb_transfer_status>
   100dc:	0603      	lsls	r3, r0, #24
   100de:	bf58      	it	pl
   100e0:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   100e4:	2c04      	cmp	r4, #4
   100e6:	d1f0      	bne.n	100ca <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   100e8:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   100ec:	2300      	movs	r3, #0
}
   100ee:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   100f0:	f888 3000 	strb.w	r3, [r8]
}
   100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   100f8:	2000c140 	.word	0x2000c140
   100fc:	20025bde 	.word	0x20025bde
   10100:	20025bdf 	.word	0x20025bdf

00010104 <usb_serial_flush_output>:
{
   10104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   10108:	4b1d      	ldr	r3, [pc, #116]	; (10180 <usb_serial_flush_output+0x7c>)
   1010a:	781b      	ldrb	r3, [r3, #0]
   1010c:	b113      	cbz	r3, 10114 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   1010e:	4d1d      	ldr	r5, [pc, #116]	; (10184 <usb_serial_flush_output+0x80>)
   10110:	882a      	ldrh	r2, [r5, #0]
   10112:	b90a      	cbnz	r2, 10118 <usb_serial_flush_output+0x14>
}
   10114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   10118:	4e1b      	ldr	r6, [pc, #108]	; (10188 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   1011a:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   1011e:	491b      	ldr	r1, [pc, #108]	; (1018c <usb_serial_flush_output+0x88>)
   10120:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   10122:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   10124:	4c1a      	ldr	r4, [pc, #104]	; (10190 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   10126:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   1012a:	4f1a      	ldr	r7, [pc, #104]	; (10194 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1012c:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   10130:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   10132:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   10134:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   10136:	4621      	mov	r1, r4
   10138:	2300      	movs	r3, #0
   1013a:	f7ff fa79 	bl	f630 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   1013e:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   10142:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   10146:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1014a:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   1014e:	3420      	adds	r4, #32
	} while (location < end_addr);
   10150:	42a2      	cmp	r2, r4
   10152:	d8fa      	bhi.n	1014a <usb_serial_flush_output+0x46>
	asm("dsb");
   10154:	f3bf 8f4f 	dsb	sy
	asm("isb");
   10158:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   1015c:	2003      	movs	r0, #3
   1015e:	4641      	mov	r1, r8
   10160:	f7ff fa7e 	bl	f660 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   10164:	7833      	ldrb	r3, [r6, #0]
   10166:	3301      	adds	r3, #1
   10168:	b2db      	uxtb	r3, r3
   1016a:	2b03      	cmp	r3, #3
   1016c:	bf88      	it	hi
   1016e:	2300      	movhi	r3, #0
   10170:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   10172:	2300      	movs	r3, #0
   10174:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   10176:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   1017a:	703b      	strb	r3, [r7, #0]
}
   1017c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10180:	20025be1 	.word	0x20025be1
   10184:	20025bc6 	.word	0x20025bc6
   10188:	20025bde 	.word	0x20025bde
   1018c:	2000c140 	.word	0x2000c140
   10190:	20202880 	.word	0x20202880
   10194:	20025bdf 	.word	0x20025bdf

00010198 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
   10198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
   1019c:	4b2d      	ldr	r3, [pc, #180]	; (10254 <yield+0xbc>)
   1019e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
   101a0:	b166      	cbz	r6, 101bc <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
   101a2:	4f2d      	ldr	r7, [pc, #180]	; (10258 <yield+0xc0>)
   101a4:	783b      	ldrb	r3, [r7, #0]
   101a6:	b94b      	cbnz	r3, 101bc <yield+0x24>
	running = 1;
   101a8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   101aa:	07f1      	lsls	r1, r6, #31
	running = 1;
   101ac:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
   101ae:	d443      	bmi.n	10238 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
   101b0:	07b2      	lsls	r2, r6, #30
   101b2:	d426      	bmi.n	10202 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
   101b4:	2300      	movs	r3, #0
   101b6:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
   101b8:	0773      	lsls	r3, r6, #29
   101ba:	d401      	bmi.n	101c0 <yield+0x28>
		EventResponder::runFromYield();
	}
};
   101bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   101c0:	4b26      	ldr	r3, [pc, #152]	; (1025c <yield+0xc4>)
   101c2:	681a      	ldr	r2, [r3, #0]
   101c4:	2a00      	cmp	r2, #0
   101c6:	d0f9      	beq.n	101bc <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   101c8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   101cc:	2a00      	cmp	r2, #0
   101ce:	d1f5      	bne.n	101bc <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   101d0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   101d4:	b672      	cpsid	i
		EventResponder *first = firstYield;
   101d6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   101d8:	2800      	cmp	r0, #0
   101da:	d034      	beq.n	10246 <yield+0xae>
		if (runningFromYield) {
   101dc:	4c20      	ldr	r4, [pc, #128]	; (10260 <yield+0xc8>)
   101de:	7821      	ldrb	r1, [r4, #0]
   101e0:	2900      	cmp	r1, #0
   101e2:	d130      	bne.n	10246 <yield+0xae>
		runningFromYield = true;
   101e4:	2201      	movs	r2, #1
   101e6:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   101e8:	6942      	ldr	r2, [r0, #20]
   101ea:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   101ec:	2a00      	cmp	r2, #0
   101ee:	d02e      	beq.n	1024e <yield+0xb6>
			firstYield->_prev = nullptr;
   101f0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   101f2:	b905      	cbnz	r5, 101f6 <yield+0x5e>
   101f4:	b662      	cpsie	i
		first->_triggered = false;
   101f6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   101f8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   101fa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   101fc:	4798      	blx	r3
		runningFromYield = false;
   101fe:	7025      	strb	r5, [r4, #0]
   10200:	e7dc      	b.n	101bc <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   10202:	f8df 8064 	ldr.w	r8, [pc, #100]	; 10268 <yield+0xd0>
   10206:	f898 3000 	ldrb.w	r3, [r8]
   1020a:	2b00      	cmp	r3, #0
   1020c:	d0d2      	beq.n	101b4 <yield+0x1c>
   1020e:	2500      	movs	r5, #0
   10210:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1026c <yield+0xd4>
   10214:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   10216:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1021a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   1021c:	6823      	ldr	r3, [r4, #0]
   1021e:	4620      	mov	r0, r4
   10220:	691b      	ldr	r3, [r3, #16]
   10222:	4798      	blx	r3
   10224:	b110      	cbz	r0, 1022c <yield+0x94>
   10226:	6963      	ldr	r3, [r4, #20]
   10228:	689b      	ldr	r3, [r3, #8]
   1022a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1022c:	f898 2000 	ldrb.w	r2, [r8]
   10230:	b2eb      	uxtb	r3, r5
   10232:	429a      	cmp	r2, r3
   10234:	d8ef      	bhi.n	10216 <yield+0x7e>
   10236:	e7bd      	b.n	101b4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   10238:	f7ff fec6 	bl	ffc8 <usb_serial_available>
		if (Serial.available()) serialEvent();
   1023c:	2800      	cmp	r0, #0
   1023e:	d0b7      	beq.n	101b0 <yield+0x18>
   10240:	f3af 8000 	nop.w
   10244:	e7b4      	b.n	101b0 <yield+0x18>
		if (doit) __enable_irq();
   10246:	2d00      	cmp	r5, #0
   10248:	d1b8      	bne.n	101bc <yield+0x24>
   1024a:	b662      	cpsie	i
   1024c:	e7b6      	b.n	101bc <yield+0x24>
			lastYield = nullptr;
   1024e:	4b05      	ldr	r3, [pc, #20]	; (10264 <yield+0xcc>)
   10250:	601a      	str	r2, [r3, #0]
   10252:	e7ce      	b.n	101f2 <yield+0x5a>
   10254:	20025be4 	.word	0x20025be4
   10258:	20025bd3 	.word	0x20025bd3
   1025c:	20024ce4 	.word	0x20024ce4
   10260:	20025bd1 	.word	0x20025bd1
   10264:	20024cf0 	.word	0x20024cf0
   10268:	20025bd2 	.word	0x20025bd2
   1026c:	20024cf4 	.word	0x20024cf4

00010270 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   10270:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   10272:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   10274:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   10278:	4619      	mov	r1, r3
{
   1027a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1027c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   10280:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   10284:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10288:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   1028c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   10290:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   10292:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   10296:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   1029a:	b29b      	uxth	r3, r3
   1029c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   102a0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   102a4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   102a8:	3101      	adds	r1, #1
   102aa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   102ae:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   102b0:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   102b2:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   102b6:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   102b8:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   102ba:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   102bc:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   102be:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   102c2:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   102c4:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   102c6:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   102c8:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   102ca:	d1eb      	bne.n	102a4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   102cc:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   102d0:	b29b      	uxth	r3, r3
   102d2:	f043 030f 	orr.w	r3, r3, #15
   102d6:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   102da:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   102de:	b29b      	uxth	r3, r3
   102e0:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   102e4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   102e8:	bd10      	pop	{r4, pc}
   102ea:	bf00      	nop

000102ec <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   102ec:	4b37      	ldr	r3, [pc, #220]	; (103cc <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   102ee:	4a38      	ldr	r2, [pc, #224]	; (103d0 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   102f0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   102f2:	4838      	ldr	r0, [pc, #224]	; (103d4 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   102f4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   102f8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   102fa:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   102fc:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10300:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10304:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10308:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   1030c:	430a      	orrs	r2, r1
   1030e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   10312:	f7ff ffad 	bl	10270 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   10316:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1031a:	f7ff ffa9 	bl	10270 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   1031e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   10322:	f7ff ffa5 	bl	10270 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   10326:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1032a:	f7ff ffa1 	bl	10270 <flexpwm_init>
	for (i=0; i < 4; i++) {
   1032e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   10330:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10334:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   10338:	4611      	mov	r1, r2
   1033a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   1033e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   10342:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   10344:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   10346:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   10348:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   1034a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1034e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10350:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10352:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   10356:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10358:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1035a:	d1ee      	bne.n	1033a <pwm_init+0x4e>
   1035c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1035e:	481e      	ldr	r0, [pc, #120]	; (103d8 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10360:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10364:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   10368:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1036a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1036e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   10372:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   10376:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   1037a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1037c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1037e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   10380:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10382:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10386:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10388:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   1038a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1038e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10390:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   10392:	d1ee      	bne.n	10372 <pwm_init+0x86>
   10394:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   10396:	4811      	ldr	r0, [pc, #68]	; (103dc <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10398:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   1039a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   1039e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   103a0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   103a4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   103a8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   103ac:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   103b0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   103b2:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   103b4:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   103b6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   103b8:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   103ba:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   103bc:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   103be:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   103c2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   103c4:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   103c8:	d1ee      	bne.n	103a8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   103ca:	bd70      	pop	{r4, r5, r6, pc}
   103cc:	400fc000 	.word	0x400fc000
   103d0:	fc030000 	.word	0xfc030000
   103d4:	403dc000 	.word	0x403dc000
   103d8:	401e0000 	.word	0x401e0000
   103dc:	401e4000 	.word	0x401e4000

000103e0 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   103e0:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   103e2:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   103e6:	b15b      	cbz	r3, 10400 <sm_align_pool+0x20>
   103e8:	b1ba      	cbz	r2, 1041a <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   103ea:	4b0f      	ldr	r3, [pc, #60]	; (10428 <sm_align_pool+0x48>)
   103ec:	fba3 1302 	umull	r1, r3, r3, r2
   103f0:	08db      	lsrs	r3, r3, #3
   103f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   103f6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   103fa:	d10a      	bne.n	10412 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   103fc:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   103fe:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   10400:	4b09      	ldr	r3, [pc, #36]	; (10428 <sm_align_pool+0x48>)
   10402:	fba3 1302 	umull	r1, r3, r3, r2
   10406:	08db      	lsrs	r3, r3, #3
   10408:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   1040c:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   10410:	d001      	beq.n	10416 <sm_align_pool+0x36>
   10412:	1ad2      	subs	r2, r2, r3
   10414:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   10416:	2af0      	cmp	r2, #240	; 0xf0
   10418:	d8f0      	bhi.n	103fc <sm_align_pool+0x1c>
		errno = ENOSPC;
   1041a:	f002 fad9 	bl	129d0 <__errno>
   1041e:	221c      	movs	r2, #28
   10420:	4603      	mov	r3, r0
   10422:	2000      	movs	r0, #0
   10424:	601a      	str	r2, [r3, #0]
}
   10426:	bd08      	pop	{r3, pc}
   10428:	aaaaaaab 	.word	0xaaaaaaab

0001042c <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   1042c:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   1042e:	4604      	mov	r4, r0
   10430:	b338      	cbz	r0, 10482 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   10432:	b119      	cbz	r1, 1043c <sm_set_pool+0x10>
   10434:	fab2 f682 	clz	r6, r2
   10438:	0976      	lsrs	r6, r6, #5
   1043a:	b9a2      	cbnz	r2, 10466 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   1043c:	6820      	ldr	r0, [r4, #0]
   1043e:	b300      	cbz	r0, 10482 <sm_set_pool+0x56>
   10440:	6862      	ldr	r2, [r4, #4]
   10442:	b1f2      	cbz	r2, 10482 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   10444:	4b18      	ldr	r3, [pc, #96]	; (104a8 <sm_set_pool+0x7c>)
   10446:	4919      	ldr	r1, [pc, #100]	; (104ac <sm_set_pool+0x80>)
   10448:	fb02 f303 	mul.w	r3, r2, r3
   1044c:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   10450:	d317      	bcc.n	10482 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   10452:	68a3      	ldr	r3, [r4, #8]
   10454:	b9e3      	cbnz	r3, 10490 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   10456:	2200      	movs	r2, #0
			return 1;
   10458:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   1045a:	6022      	str	r2, [r4, #0]
   1045c:	6062      	str	r2, [r4, #4]
   1045e:	60a2      	str	r2, [r4, #8]
   10460:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   10462:	4618      	mov	r0, r3
   10464:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   10466:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   10468:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   1046a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   1046e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   10470:	f7ff ffb6 	bl	103e0 <sm_align_pool>
   10474:	4603      	mov	r3, r0
   10476:	2800      	cmp	r0, #0
   10478:	d0f3      	beq.n	10462 <sm_set_pool+0x36>
	if (do_zero) {
   1047a:	b96d      	cbnz	r5, 10498 <sm_set_pool+0x6c>
	return 1;
   1047c:	2301      	movs	r3, #1
}
   1047e:	4618      	mov	r0, r3
   10480:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   10482:	f002 faa5 	bl	129d0 <__errno>
   10486:	2216      	movs	r2, #22
		return 0;
   10488:	2300      	movs	r3, #0
		errno = EINVAL;
   1048a:	6002      	str	r2, [r0, #0]
}
   1048c:	4618      	mov	r0, r3
   1048e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   10490:	2100      	movs	r1, #0
   10492:	f002 f911 	bl	126b8 <memset>
   10496:	e7de      	b.n	10456 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   10498:	6862      	ldr	r2, [r4, #4]
   1049a:	4631      	mov	r1, r6
   1049c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   1049e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   104a0:	f002 f90a 	bl	126b8 <memset>
	return 1;
   104a4:	2301      	movs	r3, #1
   104a6:	e7dc      	b.n	10462 <sm_set_pool+0x36>
   104a8:	aaaaaaab 	.word	0xaaaaaaab
   104ac:	15555555 	.word	0x15555555

000104b0 <__aeabi_atexit>:
   104b0:	4603      	mov	r3, r0
   104b2:	4608      	mov	r0, r1
   104b4:	4619      	mov	r1, r3
   104b6:	f001 be25 	b.w	12104 <__cxa_atexit>
   104ba:	bf00      	nop

000104bc <__aeabi_uldivmod>:
   104bc:	b953      	cbnz	r3, 104d4 <__aeabi_uldivmod+0x18>
   104be:	b94a      	cbnz	r2, 104d4 <__aeabi_uldivmod+0x18>
   104c0:	2900      	cmp	r1, #0
   104c2:	bf08      	it	eq
   104c4:	2800      	cmpeq	r0, #0
   104c6:	bf1c      	itt	ne
   104c8:	f04f 31ff 	movne.w	r1, #4294967295
   104cc:	f04f 30ff 	movne.w	r0, #4294967295
   104d0:	f000 b970 	b.w	107b4 <__aeabi_idiv0>
   104d4:	f1ad 0c08 	sub.w	ip, sp, #8
   104d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   104dc:	f000 f806 	bl	104ec <__udivmoddi4>
   104e0:	f8dd e004 	ldr.w	lr, [sp, #4]
   104e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   104e8:	b004      	add	sp, #16
   104ea:	4770      	bx	lr

000104ec <__udivmoddi4>:
   104ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   104f0:	9e08      	ldr	r6, [sp, #32]
   104f2:	460d      	mov	r5, r1
   104f4:	4604      	mov	r4, r0
   104f6:	460f      	mov	r7, r1
   104f8:	2b00      	cmp	r3, #0
   104fa:	d14a      	bne.n	10592 <__udivmoddi4+0xa6>
   104fc:	428a      	cmp	r2, r1
   104fe:	4694      	mov	ip, r2
   10500:	d965      	bls.n	105ce <__udivmoddi4+0xe2>
   10502:	fab2 f382 	clz	r3, r2
   10506:	b143      	cbz	r3, 1051a <__udivmoddi4+0x2e>
   10508:	fa02 fc03 	lsl.w	ip, r2, r3
   1050c:	f1c3 0220 	rsb	r2, r3, #32
   10510:	409f      	lsls	r7, r3
   10512:	fa20 f202 	lsr.w	r2, r0, r2
   10516:	4317      	orrs	r7, r2
   10518:	409c      	lsls	r4, r3
   1051a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   1051e:	fa1f f58c 	uxth.w	r5, ip
   10522:	fbb7 f1fe 	udiv	r1, r7, lr
   10526:	0c22      	lsrs	r2, r4, #16
   10528:	fb0e 7711 	mls	r7, lr, r1, r7
   1052c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   10530:	fb01 f005 	mul.w	r0, r1, r5
   10534:	4290      	cmp	r0, r2
   10536:	d90a      	bls.n	1054e <__udivmoddi4+0x62>
   10538:	eb1c 0202 	adds.w	r2, ip, r2
   1053c:	f101 37ff 	add.w	r7, r1, #4294967295
   10540:	f080 811c 	bcs.w	1077c <__udivmoddi4+0x290>
   10544:	4290      	cmp	r0, r2
   10546:	f240 8119 	bls.w	1077c <__udivmoddi4+0x290>
   1054a:	3902      	subs	r1, #2
   1054c:	4462      	add	r2, ip
   1054e:	1a12      	subs	r2, r2, r0
   10550:	b2a4      	uxth	r4, r4
   10552:	fbb2 f0fe 	udiv	r0, r2, lr
   10556:	fb0e 2210 	mls	r2, lr, r0, r2
   1055a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1055e:	fb00 f505 	mul.w	r5, r0, r5
   10562:	42a5      	cmp	r5, r4
   10564:	d90a      	bls.n	1057c <__udivmoddi4+0x90>
   10566:	eb1c 0404 	adds.w	r4, ip, r4
   1056a:	f100 32ff 	add.w	r2, r0, #4294967295
   1056e:	f080 8107 	bcs.w	10780 <__udivmoddi4+0x294>
   10572:	42a5      	cmp	r5, r4
   10574:	f240 8104 	bls.w	10780 <__udivmoddi4+0x294>
   10578:	4464      	add	r4, ip
   1057a:	3802      	subs	r0, #2
   1057c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   10580:	1b64      	subs	r4, r4, r5
   10582:	2100      	movs	r1, #0
   10584:	b11e      	cbz	r6, 1058e <__udivmoddi4+0xa2>
   10586:	40dc      	lsrs	r4, r3
   10588:	2300      	movs	r3, #0
   1058a:	e9c6 4300 	strd	r4, r3, [r6]
   1058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10592:	428b      	cmp	r3, r1
   10594:	d908      	bls.n	105a8 <__udivmoddi4+0xbc>
   10596:	2e00      	cmp	r6, #0
   10598:	f000 80ed 	beq.w	10776 <__udivmoddi4+0x28a>
   1059c:	2100      	movs	r1, #0
   1059e:	e9c6 0500 	strd	r0, r5, [r6]
   105a2:	4608      	mov	r0, r1
   105a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   105a8:	fab3 f183 	clz	r1, r3
   105ac:	2900      	cmp	r1, #0
   105ae:	d149      	bne.n	10644 <__udivmoddi4+0x158>
   105b0:	42ab      	cmp	r3, r5
   105b2:	d302      	bcc.n	105ba <__udivmoddi4+0xce>
   105b4:	4282      	cmp	r2, r0
   105b6:	f200 80f8 	bhi.w	107aa <__udivmoddi4+0x2be>
   105ba:	1a84      	subs	r4, r0, r2
   105bc:	eb65 0203 	sbc.w	r2, r5, r3
   105c0:	2001      	movs	r0, #1
   105c2:	4617      	mov	r7, r2
   105c4:	2e00      	cmp	r6, #0
   105c6:	d0e2      	beq.n	1058e <__udivmoddi4+0xa2>
   105c8:	e9c6 4700 	strd	r4, r7, [r6]
   105cc:	e7df      	b.n	1058e <__udivmoddi4+0xa2>
   105ce:	b902      	cbnz	r2, 105d2 <__udivmoddi4+0xe6>
   105d0:	deff      	udf	#255	; 0xff
   105d2:	fab2 f382 	clz	r3, r2
   105d6:	2b00      	cmp	r3, #0
   105d8:	f040 8090 	bne.w	106fc <__udivmoddi4+0x210>
   105dc:	1a8a      	subs	r2, r1, r2
   105de:	ea4f 471c 	mov.w	r7, ip, lsr #16
   105e2:	fa1f fe8c 	uxth.w	lr, ip
   105e6:	2101      	movs	r1, #1
   105e8:	fbb2 f5f7 	udiv	r5, r2, r7
   105ec:	fb07 2015 	mls	r0, r7, r5, r2
   105f0:	0c22      	lsrs	r2, r4, #16
   105f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   105f6:	fb0e f005 	mul.w	r0, lr, r5
   105fa:	4290      	cmp	r0, r2
   105fc:	d908      	bls.n	10610 <__udivmoddi4+0x124>
   105fe:	eb1c 0202 	adds.w	r2, ip, r2
   10602:	f105 38ff 	add.w	r8, r5, #4294967295
   10606:	d202      	bcs.n	1060e <__udivmoddi4+0x122>
   10608:	4290      	cmp	r0, r2
   1060a:	f200 80cb 	bhi.w	107a4 <__udivmoddi4+0x2b8>
   1060e:	4645      	mov	r5, r8
   10610:	1a12      	subs	r2, r2, r0
   10612:	b2a4      	uxth	r4, r4
   10614:	fbb2 f0f7 	udiv	r0, r2, r7
   10618:	fb07 2210 	mls	r2, r7, r0, r2
   1061c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   10620:	fb0e fe00 	mul.w	lr, lr, r0
   10624:	45a6      	cmp	lr, r4
   10626:	d908      	bls.n	1063a <__udivmoddi4+0x14e>
   10628:	eb1c 0404 	adds.w	r4, ip, r4
   1062c:	f100 32ff 	add.w	r2, r0, #4294967295
   10630:	d202      	bcs.n	10638 <__udivmoddi4+0x14c>
   10632:	45a6      	cmp	lr, r4
   10634:	f200 80bb 	bhi.w	107ae <__udivmoddi4+0x2c2>
   10638:	4610      	mov	r0, r2
   1063a:	eba4 040e 	sub.w	r4, r4, lr
   1063e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   10642:	e79f      	b.n	10584 <__udivmoddi4+0x98>
   10644:	f1c1 0720 	rsb	r7, r1, #32
   10648:	408b      	lsls	r3, r1
   1064a:	fa22 fc07 	lsr.w	ip, r2, r7
   1064e:	ea4c 0c03 	orr.w	ip, ip, r3
   10652:	fa05 f401 	lsl.w	r4, r5, r1
   10656:	fa20 f307 	lsr.w	r3, r0, r7
   1065a:	40fd      	lsrs	r5, r7
   1065c:	ea4f 491c 	mov.w	r9, ip, lsr #16
   10660:	4323      	orrs	r3, r4
   10662:	fbb5 f8f9 	udiv	r8, r5, r9
   10666:	fa1f fe8c 	uxth.w	lr, ip
   1066a:	fb09 5518 	mls	r5, r9, r8, r5
   1066e:	0c1c      	lsrs	r4, r3, #16
   10670:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   10674:	fb08 f50e 	mul.w	r5, r8, lr
   10678:	42a5      	cmp	r5, r4
   1067a:	fa02 f201 	lsl.w	r2, r2, r1
   1067e:	fa00 f001 	lsl.w	r0, r0, r1
   10682:	d90b      	bls.n	1069c <__udivmoddi4+0x1b0>
   10684:	eb1c 0404 	adds.w	r4, ip, r4
   10688:	f108 3aff 	add.w	sl, r8, #4294967295
   1068c:	f080 8088 	bcs.w	107a0 <__udivmoddi4+0x2b4>
   10690:	42a5      	cmp	r5, r4
   10692:	f240 8085 	bls.w	107a0 <__udivmoddi4+0x2b4>
   10696:	f1a8 0802 	sub.w	r8, r8, #2
   1069a:	4464      	add	r4, ip
   1069c:	1b64      	subs	r4, r4, r5
   1069e:	b29d      	uxth	r5, r3
   106a0:	fbb4 f3f9 	udiv	r3, r4, r9
   106a4:	fb09 4413 	mls	r4, r9, r3, r4
   106a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   106ac:	fb03 fe0e 	mul.w	lr, r3, lr
   106b0:	45a6      	cmp	lr, r4
   106b2:	d908      	bls.n	106c6 <__udivmoddi4+0x1da>
   106b4:	eb1c 0404 	adds.w	r4, ip, r4
   106b8:	f103 35ff 	add.w	r5, r3, #4294967295
   106bc:	d26c      	bcs.n	10798 <__udivmoddi4+0x2ac>
   106be:	45a6      	cmp	lr, r4
   106c0:	d96a      	bls.n	10798 <__udivmoddi4+0x2ac>
   106c2:	3b02      	subs	r3, #2
   106c4:	4464      	add	r4, ip
   106c6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   106ca:	fba3 9502 	umull	r9, r5, r3, r2
   106ce:	eba4 040e 	sub.w	r4, r4, lr
   106d2:	42ac      	cmp	r4, r5
   106d4:	46c8      	mov	r8, r9
   106d6:	46ae      	mov	lr, r5
   106d8:	d356      	bcc.n	10788 <__udivmoddi4+0x29c>
   106da:	d053      	beq.n	10784 <__udivmoddi4+0x298>
   106dc:	b156      	cbz	r6, 106f4 <__udivmoddi4+0x208>
   106de:	ebb0 0208 	subs.w	r2, r0, r8
   106e2:	eb64 040e 	sbc.w	r4, r4, lr
   106e6:	fa04 f707 	lsl.w	r7, r4, r7
   106ea:	40ca      	lsrs	r2, r1
   106ec:	40cc      	lsrs	r4, r1
   106ee:	4317      	orrs	r7, r2
   106f0:	e9c6 7400 	strd	r7, r4, [r6]
   106f4:	4618      	mov	r0, r3
   106f6:	2100      	movs	r1, #0
   106f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106fc:	f1c3 0120 	rsb	r1, r3, #32
   10700:	fa02 fc03 	lsl.w	ip, r2, r3
   10704:	fa20 f201 	lsr.w	r2, r0, r1
   10708:	fa25 f101 	lsr.w	r1, r5, r1
   1070c:	409d      	lsls	r5, r3
   1070e:	432a      	orrs	r2, r5
   10710:	ea4f 471c 	mov.w	r7, ip, lsr #16
   10714:	fa1f fe8c 	uxth.w	lr, ip
   10718:	fbb1 f0f7 	udiv	r0, r1, r7
   1071c:	fb07 1510 	mls	r5, r7, r0, r1
   10720:	0c11      	lsrs	r1, r2, #16
   10722:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   10726:	fb00 f50e 	mul.w	r5, r0, lr
   1072a:	428d      	cmp	r5, r1
   1072c:	fa04 f403 	lsl.w	r4, r4, r3
   10730:	d908      	bls.n	10744 <__udivmoddi4+0x258>
   10732:	eb1c 0101 	adds.w	r1, ip, r1
   10736:	f100 38ff 	add.w	r8, r0, #4294967295
   1073a:	d22f      	bcs.n	1079c <__udivmoddi4+0x2b0>
   1073c:	428d      	cmp	r5, r1
   1073e:	d92d      	bls.n	1079c <__udivmoddi4+0x2b0>
   10740:	3802      	subs	r0, #2
   10742:	4461      	add	r1, ip
   10744:	1b49      	subs	r1, r1, r5
   10746:	b292      	uxth	r2, r2
   10748:	fbb1 f5f7 	udiv	r5, r1, r7
   1074c:	fb07 1115 	mls	r1, r7, r5, r1
   10750:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   10754:	fb05 f10e 	mul.w	r1, r5, lr
   10758:	4291      	cmp	r1, r2
   1075a:	d908      	bls.n	1076e <__udivmoddi4+0x282>
   1075c:	eb1c 0202 	adds.w	r2, ip, r2
   10760:	f105 38ff 	add.w	r8, r5, #4294967295
   10764:	d216      	bcs.n	10794 <__udivmoddi4+0x2a8>
   10766:	4291      	cmp	r1, r2
   10768:	d914      	bls.n	10794 <__udivmoddi4+0x2a8>
   1076a:	3d02      	subs	r5, #2
   1076c:	4462      	add	r2, ip
   1076e:	1a52      	subs	r2, r2, r1
   10770:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   10774:	e738      	b.n	105e8 <__udivmoddi4+0xfc>
   10776:	4631      	mov	r1, r6
   10778:	4630      	mov	r0, r6
   1077a:	e708      	b.n	1058e <__udivmoddi4+0xa2>
   1077c:	4639      	mov	r1, r7
   1077e:	e6e6      	b.n	1054e <__udivmoddi4+0x62>
   10780:	4610      	mov	r0, r2
   10782:	e6fb      	b.n	1057c <__udivmoddi4+0x90>
   10784:	4548      	cmp	r0, r9
   10786:	d2a9      	bcs.n	106dc <__udivmoddi4+0x1f0>
   10788:	ebb9 0802 	subs.w	r8, r9, r2
   1078c:	eb65 0e0c 	sbc.w	lr, r5, ip
   10790:	3b01      	subs	r3, #1
   10792:	e7a3      	b.n	106dc <__udivmoddi4+0x1f0>
   10794:	4645      	mov	r5, r8
   10796:	e7ea      	b.n	1076e <__udivmoddi4+0x282>
   10798:	462b      	mov	r3, r5
   1079a:	e794      	b.n	106c6 <__udivmoddi4+0x1da>
   1079c:	4640      	mov	r0, r8
   1079e:	e7d1      	b.n	10744 <__udivmoddi4+0x258>
   107a0:	46d0      	mov	r8, sl
   107a2:	e77b      	b.n	1069c <__udivmoddi4+0x1b0>
   107a4:	3d02      	subs	r5, #2
   107a6:	4462      	add	r2, ip
   107a8:	e732      	b.n	10610 <__udivmoddi4+0x124>
   107aa:	4608      	mov	r0, r1
   107ac:	e70a      	b.n	105c4 <__udivmoddi4+0xd8>
   107ae:	4464      	add	r4, ip
   107b0:	3802      	subs	r0, #2
   107b2:	e742      	b.n	1063a <__udivmoddi4+0x14e>

000107b4 <__aeabi_idiv0>:
   107b4:	4770      	bx	lr
   107b6:	bf00      	nop

000107b8 <malloc>:
   107b8:	4b02      	ldr	r3, [pc, #8]	; (107c4 <malloc+0xc>)
   107ba:	4601      	mov	r1, r0
   107bc:	6818      	ldr	r0, [r3, #0]
   107be:	f000 b80b 	b.w	107d8 <_malloc_r>
   107c2:	bf00      	nop
   107c4:	2000951c 	.word	0x2000951c

000107c8 <free>:
   107c8:	4b02      	ldr	r3, [pc, #8]	; (107d4 <free+0xc>)
   107ca:	4601      	mov	r1, r0
   107cc:	6818      	ldr	r0, [r3, #0]
   107ce:	f002 bc69 	b.w	130a4 <_free_r>
   107d2:	bf00      	nop
   107d4:	2000951c 	.word	0x2000951c

000107d8 <_malloc_r>:
   107d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107dc:	f101 060b 	add.w	r6, r1, #11
   107e0:	2e16      	cmp	r6, #22
   107e2:	b083      	sub	sp, #12
   107e4:	4604      	mov	r4, r0
   107e6:	d824      	bhi.n	10832 <_malloc_r+0x5a>
   107e8:	2910      	cmp	r1, #16
   107ea:	f200 80ba 	bhi.w	10962 <_malloc_r+0x18a>
   107ee:	f000 faa3 	bl	10d38 <__malloc_lock>
   107f2:	2610      	movs	r6, #16
   107f4:	2218      	movs	r2, #24
   107f6:	2002      	movs	r0, #2
   107f8:	4fb5      	ldr	r7, [pc, #724]	; (10ad0 <_malloc_r+0x2f8>)
   107fa:	443a      	add	r2, r7
   107fc:	f1a2 0108 	sub.w	r1, r2, #8
   10800:	6853      	ldr	r3, [r2, #4]
   10802:	428b      	cmp	r3, r1
   10804:	f000 80ba 	beq.w	1097c <_malloc_r+0x1a4>
   10808:	685a      	ldr	r2, [r3, #4]
   1080a:	68d9      	ldr	r1, [r3, #12]
   1080c:	f022 0203 	bic.w	r2, r2, #3
   10810:	441a      	add	r2, r3
   10812:	689d      	ldr	r5, [r3, #8]
   10814:	60e9      	str	r1, [r5, #12]
   10816:	608d      	str	r5, [r1, #8]
   10818:	6851      	ldr	r1, [r2, #4]
   1081a:	f041 0101 	orr.w	r1, r1, #1
   1081e:	4620      	mov	r0, r4
   10820:	6051      	str	r1, [r2, #4]
   10822:	f103 0508 	add.w	r5, r3, #8
   10826:	f000 fa8d 	bl	10d44 <__malloc_unlock>
   1082a:	4628      	mov	r0, r5
   1082c:	b003      	add	sp, #12
   1082e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10832:	f036 0607 	bics.w	r6, r6, #7
   10836:	f100 8094 	bmi.w	10962 <_malloc_r+0x18a>
   1083a:	42b1      	cmp	r1, r6
   1083c:	f200 8091 	bhi.w	10962 <_malloc_r+0x18a>
   10840:	f000 fa7a 	bl	10d38 <__malloc_lock>
   10844:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   10848:	f0c0 819a 	bcc.w	10b80 <_malloc_r+0x3a8>
   1084c:	0a73      	lsrs	r3, r6, #9
   1084e:	f000 808f 	beq.w	10970 <_malloc_r+0x198>
   10852:	2b04      	cmp	r3, #4
   10854:	f200 816f 	bhi.w	10b36 <_malloc_r+0x35e>
   10858:	09b3      	lsrs	r3, r6, #6
   1085a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   1085e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   10862:	00c3      	lsls	r3, r0, #3
   10864:	4f9a      	ldr	r7, [pc, #616]	; (10ad0 <_malloc_r+0x2f8>)
   10866:	443b      	add	r3, r7
   10868:	f1a3 0508 	sub.w	r5, r3, #8
   1086c:	685b      	ldr	r3, [r3, #4]
   1086e:	429d      	cmp	r5, r3
   10870:	d106      	bne.n	10880 <_malloc_r+0xa8>
   10872:	e00c      	b.n	1088e <_malloc_r+0xb6>
   10874:	2900      	cmp	r1, #0
   10876:	f280 8127 	bge.w	10ac8 <_malloc_r+0x2f0>
   1087a:	68db      	ldr	r3, [r3, #12]
   1087c:	429d      	cmp	r5, r3
   1087e:	d006      	beq.n	1088e <_malloc_r+0xb6>
   10880:	685a      	ldr	r2, [r3, #4]
   10882:	f022 0203 	bic.w	r2, r2, #3
   10886:	1b91      	subs	r1, r2, r6
   10888:	290f      	cmp	r1, #15
   1088a:	ddf3      	ble.n	10874 <_malloc_r+0x9c>
   1088c:	4660      	mov	r0, ip
   1088e:	693d      	ldr	r5, [r7, #16]
   10890:	f8df c250 	ldr.w	ip, [pc, #592]	; 10ae4 <_malloc_r+0x30c>
   10894:	4565      	cmp	r5, ip
   10896:	d07c      	beq.n	10992 <_malloc_r+0x1ba>
   10898:	686a      	ldr	r2, [r5, #4]
   1089a:	f022 0203 	bic.w	r2, r2, #3
   1089e:	1b93      	subs	r3, r2, r6
   108a0:	2b0f      	cmp	r3, #15
   108a2:	f300 817b 	bgt.w	10b9c <_malloc_r+0x3c4>
   108a6:	2b00      	cmp	r3, #0
   108a8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   108ac:	f280 816c 	bge.w	10b88 <_malloc_r+0x3b0>
   108b0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   108b4:	f080 811a 	bcs.w	10aec <_malloc_r+0x314>
   108b8:	08d3      	lsrs	r3, r2, #3
   108ba:	6879      	ldr	r1, [r7, #4]
   108bc:	3301      	adds	r3, #1
   108be:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   108c2:	2201      	movs	r2, #1
   108c4:	fa02 f20e 	lsl.w	r2, r2, lr
   108c8:	430a      	orrs	r2, r1
   108ca:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   108ce:	f8c5 e008 	str.w	lr, [r5, #8]
   108d2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   108d6:	3908      	subs	r1, #8
   108d8:	60e9      	str	r1, [r5, #12]
   108da:	607a      	str	r2, [r7, #4]
   108dc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   108e0:	f8ce 500c 	str.w	r5, [lr, #12]
   108e4:	1083      	asrs	r3, r0, #2
   108e6:	2101      	movs	r1, #1
   108e8:	4099      	lsls	r1, r3
   108ea:	4291      	cmp	r1, r2
   108ec:	d857      	bhi.n	1099e <_malloc_r+0x1c6>
   108ee:	4211      	tst	r1, r2
   108f0:	d106      	bne.n	10900 <_malloc_r+0x128>
   108f2:	f020 0003 	bic.w	r0, r0, #3
   108f6:	0049      	lsls	r1, r1, #1
   108f8:	4211      	tst	r1, r2
   108fa:	f100 0004 	add.w	r0, r0, #4
   108fe:	d0fa      	beq.n	108f6 <_malloc_r+0x11e>
   10900:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   10904:	464d      	mov	r5, r9
   10906:	4686      	mov	lr, r0
   10908:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1090c:	4545      	cmp	r5, r8
   1090e:	d108      	bne.n	10922 <_malloc_r+0x14a>
   10910:	e11d      	b.n	10b4e <_malloc_r+0x376>
   10912:	2b00      	cmp	r3, #0
   10914:	f280 8124 	bge.w	10b60 <_malloc_r+0x388>
   10918:	f8d8 800c 	ldr.w	r8, [r8, #12]
   1091c:	4545      	cmp	r5, r8
   1091e:	f000 8116 	beq.w	10b4e <_malloc_r+0x376>
   10922:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10926:	f022 0203 	bic.w	r2, r2, #3
   1092a:	1b93      	subs	r3, r2, r6
   1092c:	2b0f      	cmp	r3, #15
   1092e:	ddf0      	ble.n	10912 <_malloc_r+0x13a>
   10930:	4620      	mov	r0, r4
   10932:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   10936:	eb08 0106 	add.w	r1, r8, r6
   1093a:	f046 0601 	orr.w	r6, r6, #1
   1093e:	f8c8 6004 	str.w	r6, [r8, #4]
   10942:	60ec      	str	r4, [r5, #12]
   10944:	60a5      	str	r5, [r4, #8]
   10946:	f043 0401 	orr.w	r4, r3, #1
   1094a:	e9c7 1104 	strd	r1, r1, [r7, #16]
   1094e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10952:	604c      	str	r4, [r1, #4]
   10954:	f848 3002 	str.w	r3, [r8, r2]
   10958:	f000 f9f4 	bl	10d44 <__malloc_unlock>
   1095c:	f108 0508 	add.w	r5, r8, #8
   10960:	e002      	b.n	10968 <_malloc_r+0x190>
   10962:	230c      	movs	r3, #12
   10964:	6023      	str	r3, [r4, #0]
   10966:	2500      	movs	r5, #0
   10968:	4628      	mov	r0, r5
   1096a:	b003      	add	sp, #12
   1096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10970:	f44f 7300 	mov.w	r3, #512	; 0x200
   10974:	2040      	movs	r0, #64	; 0x40
   10976:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   1097a:	e773      	b.n	10864 <_malloc_r+0x8c>
   1097c:	68d3      	ldr	r3, [r2, #12]
   1097e:	429a      	cmp	r2, r3
   10980:	bf08      	it	eq
   10982:	3002      	addeq	r0, #2
   10984:	f47f af40 	bne.w	10808 <_malloc_r+0x30>
   10988:	693d      	ldr	r5, [r7, #16]
   1098a:	f8df c158 	ldr.w	ip, [pc, #344]	; 10ae4 <_malloc_r+0x30c>
   1098e:	4565      	cmp	r5, ip
   10990:	d182      	bne.n	10898 <_malloc_r+0xc0>
   10992:	687a      	ldr	r2, [r7, #4]
   10994:	1083      	asrs	r3, r0, #2
   10996:	2101      	movs	r1, #1
   10998:	4099      	lsls	r1, r3
   1099a:	4291      	cmp	r1, r2
   1099c:	d9a7      	bls.n	108ee <_malloc_r+0x116>
   1099e:	68bd      	ldr	r5, [r7, #8]
   109a0:	686b      	ldr	r3, [r5, #4]
   109a2:	f023 0903 	bic.w	r9, r3, #3
   109a6:	454e      	cmp	r6, r9
   109a8:	d803      	bhi.n	109b2 <_malloc_r+0x1da>
   109aa:	eba9 0306 	sub.w	r3, r9, r6
   109ae:	2b0f      	cmp	r3, #15
   109b0:	dc7a      	bgt.n	10aa8 <_malloc_r+0x2d0>
   109b2:	f8df b134 	ldr.w	fp, [pc, #308]	; 10ae8 <_malloc_r+0x310>
   109b6:	4b47      	ldr	r3, [pc, #284]	; (10ad4 <_malloc_r+0x2fc>)
   109b8:	f8db 2000 	ldr.w	r2, [fp]
   109bc:	681b      	ldr	r3, [r3, #0]
   109be:	3201      	adds	r2, #1
   109c0:	4433      	add	r3, r6
   109c2:	eb05 0a09 	add.w	sl, r5, r9
   109c6:	f000 8133 	beq.w	10c30 <_malloc_r+0x458>
   109ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   109ce:	330f      	adds	r3, #15
   109d0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   109d4:	f028 080f 	bic.w	r8, r8, #15
   109d8:	4641      	mov	r1, r8
   109da:	4620      	mov	r0, r4
   109dc:	f001 ffd0 	bl	12980 <_sbrk_r>
   109e0:	1c41      	adds	r1, r0, #1
   109e2:	4602      	mov	r2, r0
   109e4:	f000 80f3 	beq.w	10bce <_malloc_r+0x3f6>
   109e8:	4582      	cmp	sl, r0
   109ea:	f200 80ee 	bhi.w	10bca <_malloc_r+0x3f2>
   109ee:	4b3a      	ldr	r3, [pc, #232]	; (10ad8 <_malloc_r+0x300>)
   109f0:	6819      	ldr	r1, [r3, #0]
   109f2:	4441      	add	r1, r8
   109f4:	6019      	str	r1, [r3, #0]
   109f6:	4608      	mov	r0, r1
   109f8:	f000 814e 	beq.w	10c98 <_malloc_r+0x4c0>
   109fc:	f8db 1000 	ldr.w	r1, [fp]
   10a00:	9301      	str	r3, [sp, #4]
   10a02:	3101      	adds	r1, #1
   10a04:	bf1b      	ittet	ne
   10a06:	eba2 010a 	subne.w	r1, r2, sl
   10a0a:	1809      	addne	r1, r1, r0
   10a0c:	f8cb 2000 	streq.w	r2, [fp]
   10a10:	6019      	strne	r1, [r3, #0]
   10a12:	f012 0b07 	ands.w	fp, r2, #7
   10a16:	f000 8117 	beq.w	10c48 <_malloc_r+0x470>
   10a1a:	f1cb 0108 	rsb	r1, fp, #8
   10a1e:	440a      	add	r2, r1
   10a20:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   10a24:	4490      	add	r8, r2
   10a26:	3108      	adds	r1, #8
   10a28:	eba1 0108 	sub.w	r1, r1, r8
   10a2c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10a30:	4651      	mov	r1, sl
   10a32:	4620      	mov	r0, r4
   10a34:	9200      	str	r2, [sp, #0]
   10a36:	f001 ffa3 	bl	12980 <_sbrk_r>
   10a3a:	1c42      	adds	r2, r0, #1
   10a3c:	e9dd 2300 	ldrd	r2, r3, [sp]
   10a40:	f000 814f 	beq.w	10ce2 <_malloc_r+0x50a>
   10a44:	1a80      	subs	r0, r0, r2
   10a46:	eb00 080a 	add.w	r8, r0, sl
   10a4a:	6819      	ldr	r1, [r3, #0]
   10a4c:	60ba      	str	r2, [r7, #8]
   10a4e:	f048 0001 	orr.w	r0, r8, #1
   10a52:	4451      	add	r1, sl
   10a54:	42bd      	cmp	r5, r7
   10a56:	6050      	str	r0, [r2, #4]
   10a58:	6019      	str	r1, [r3, #0]
   10a5a:	f000 8129 	beq.w	10cb0 <_malloc_r+0x4d8>
   10a5e:	f1b9 0f0f 	cmp.w	r9, #15
   10a62:	f240 8127 	bls.w	10cb4 <_malloc_r+0x4dc>
   10a66:	6868      	ldr	r0, [r5, #4]
   10a68:	f1a9 0c0c 	sub.w	ip, r9, #12
   10a6c:	f02c 0c07 	bic.w	ip, ip, #7
   10a70:	f000 0001 	and.w	r0, r0, #1
   10a74:	ea40 000c 	orr.w	r0, r0, ip
   10a78:	6068      	str	r0, [r5, #4]
   10a7a:	f04f 0e05 	mov.w	lr, #5
   10a7e:	eb05 000c 	add.w	r0, r5, ip
   10a82:	f1bc 0f0f 	cmp.w	ip, #15
   10a86:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10a8a:	f200 8132 	bhi.w	10cf2 <_malloc_r+0x51a>
   10a8e:	6850      	ldr	r0, [r2, #4]
   10a90:	4615      	mov	r5, r2
   10a92:	4b12      	ldr	r3, [pc, #72]	; (10adc <_malloc_r+0x304>)
   10a94:	681a      	ldr	r2, [r3, #0]
   10a96:	428a      	cmp	r2, r1
   10a98:	bf38      	it	cc
   10a9a:	6019      	strcc	r1, [r3, #0]
   10a9c:	4b10      	ldr	r3, [pc, #64]	; (10ae0 <_malloc_r+0x308>)
   10a9e:	681a      	ldr	r2, [r3, #0]
   10aa0:	428a      	cmp	r2, r1
   10aa2:	bf38      	it	cc
   10aa4:	6019      	strcc	r1, [r3, #0]
   10aa6:	e094      	b.n	10bd2 <_malloc_r+0x3fa>
   10aa8:	19aa      	adds	r2, r5, r6
   10aaa:	f043 0301 	orr.w	r3, r3, #1
   10aae:	f046 0601 	orr.w	r6, r6, #1
   10ab2:	606e      	str	r6, [r5, #4]
   10ab4:	4620      	mov	r0, r4
   10ab6:	60ba      	str	r2, [r7, #8]
   10ab8:	6053      	str	r3, [r2, #4]
   10aba:	f000 f943 	bl	10d44 <__malloc_unlock>
   10abe:	3508      	adds	r5, #8
   10ac0:	4628      	mov	r0, r5
   10ac2:	b003      	add	sp, #12
   10ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ac8:	68d9      	ldr	r1, [r3, #12]
   10aca:	441a      	add	r2, r3
   10acc:	e6a1      	b.n	10812 <_malloc_r+0x3a>
   10ace:	bf00      	nop
   10ad0:	20009100 	.word	0x20009100
   10ad4:	20024f9c 	.word	0x20024f9c
   10ad8:	20024f6c 	.word	0x20024f6c
   10adc:	20024f94 	.word	0x20024f94
   10ae0:	20024f98 	.word	0x20024f98
   10ae4:	20009108 	.word	0x20009108
   10ae8:	20009508 	.word	0x20009508
   10aec:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   10af0:	ea4f 2352 	mov.w	r3, r2, lsr #9
   10af4:	d363      	bcc.n	10bbe <_malloc_r+0x3e6>
   10af6:	2b14      	cmp	r3, #20
   10af8:	f200 80b7 	bhi.w	10c6a <_malloc_r+0x492>
   10afc:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10b00:	00c9      	lsls	r1, r1, #3
   10b02:	335b      	adds	r3, #91	; 0x5b
   10b04:	eb07 0e01 	add.w	lr, r7, r1
   10b08:	5879      	ldr	r1, [r7, r1]
   10b0a:	f1ae 0e08 	sub.w	lr, lr, #8
   10b0e:	458e      	cmp	lr, r1
   10b10:	f000 8091 	beq.w	10c36 <_malloc_r+0x45e>
   10b14:	684b      	ldr	r3, [r1, #4]
   10b16:	f023 0303 	bic.w	r3, r3, #3
   10b1a:	4293      	cmp	r3, r2
   10b1c:	d902      	bls.n	10b24 <_malloc_r+0x34c>
   10b1e:	6889      	ldr	r1, [r1, #8]
   10b20:	458e      	cmp	lr, r1
   10b22:	d1f7      	bne.n	10b14 <_malloc_r+0x33c>
   10b24:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   10b28:	687a      	ldr	r2, [r7, #4]
   10b2a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   10b2e:	f8ce 5008 	str.w	r5, [lr, #8]
   10b32:	60cd      	str	r5, [r1, #12]
   10b34:	e6d6      	b.n	108e4 <_malloc_r+0x10c>
   10b36:	2b14      	cmp	r3, #20
   10b38:	d959      	bls.n	10bee <_malloc_r+0x416>
   10b3a:	2b54      	cmp	r3, #84	; 0x54
   10b3c:	f200 809d 	bhi.w	10c7a <_malloc_r+0x4a2>
   10b40:	0b33      	lsrs	r3, r6, #12
   10b42:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   10b46:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   10b4a:	00c3      	lsls	r3, r0, #3
   10b4c:	e68a      	b.n	10864 <_malloc_r+0x8c>
   10b4e:	f10e 0e01 	add.w	lr, lr, #1
   10b52:	f01e 0f03 	tst.w	lr, #3
   10b56:	f105 0508 	add.w	r5, r5, #8
   10b5a:	f47f aed5 	bne.w	10908 <_malloc_r+0x130>
   10b5e:	e051      	b.n	10c04 <_malloc_r+0x42c>
   10b60:	4442      	add	r2, r8
   10b62:	4645      	mov	r5, r8
   10b64:	6853      	ldr	r3, [r2, #4]
   10b66:	f8d8 100c 	ldr.w	r1, [r8, #12]
   10b6a:	f043 0301 	orr.w	r3, r3, #1
   10b6e:	6053      	str	r3, [r2, #4]
   10b70:	f855 3f08 	ldr.w	r3, [r5, #8]!
   10b74:	4620      	mov	r0, r4
   10b76:	60d9      	str	r1, [r3, #12]
   10b78:	608b      	str	r3, [r1, #8]
   10b7a:	f000 f8e3 	bl	10d44 <__malloc_unlock>
   10b7e:	e6f3      	b.n	10968 <_malloc_r+0x190>
   10b80:	08f0      	lsrs	r0, r6, #3
   10b82:	f106 0208 	add.w	r2, r6, #8
   10b86:	e637      	b.n	107f8 <_malloc_r+0x20>
   10b88:	442a      	add	r2, r5
   10b8a:	4620      	mov	r0, r4
   10b8c:	6853      	ldr	r3, [r2, #4]
   10b8e:	f043 0301 	orr.w	r3, r3, #1
   10b92:	6053      	str	r3, [r2, #4]
   10b94:	3508      	adds	r5, #8
   10b96:	f000 f8d5 	bl	10d44 <__malloc_unlock>
   10b9a:	e6e5      	b.n	10968 <_malloc_r+0x190>
   10b9c:	19a9      	adds	r1, r5, r6
   10b9e:	4620      	mov	r0, r4
   10ba0:	f046 0601 	orr.w	r6, r6, #1
   10ba4:	f043 0401 	orr.w	r4, r3, #1
   10ba8:	606e      	str	r6, [r5, #4]
   10baa:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10bae:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   10bb2:	604c      	str	r4, [r1, #4]
   10bb4:	50ab      	str	r3, [r5, r2]
   10bb6:	f000 f8c5 	bl	10d44 <__malloc_unlock>
   10bba:	3508      	adds	r5, #8
   10bbc:	e6d4      	b.n	10968 <_malloc_r+0x190>
   10bbe:	0993      	lsrs	r3, r2, #6
   10bc0:	f103 0139 	add.w	r1, r3, #57	; 0x39
   10bc4:	00c9      	lsls	r1, r1, #3
   10bc6:	3338      	adds	r3, #56	; 0x38
   10bc8:	e79c      	b.n	10b04 <_malloc_r+0x32c>
   10bca:	42bd      	cmp	r5, r7
   10bcc:	d05f      	beq.n	10c8e <_malloc_r+0x4b6>
   10bce:	68bd      	ldr	r5, [r7, #8]
   10bd0:	6868      	ldr	r0, [r5, #4]
   10bd2:	f020 0803 	bic.w	r8, r0, #3
   10bd6:	4546      	cmp	r6, r8
   10bd8:	eba8 0306 	sub.w	r3, r8, r6
   10bdc:	d802      	bhi.n	10be4 <_malloc_r+0x40c>
   10bde:	2b0f      	cmp	r3, #15
   10be0:	f73f af62 	bgt.w	10aa8 <_malloc_r+0x2d0>
   10be4:	4620      	mov	r0, r4
   10be6:	f000 f8ad 	bl	10d44 <__malloc_unlock>
   10bea:	2500      	movs	r5, #0
   10bec:	e6bc      	b.n	10968 <_malloc_r+0x190>
   10bee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   10bf2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   10bf6:	00c3      	lsls	r3, r0, #3
   10bf8:	e634      	b.n	10864 <_malloc_r+0x8c>
   10bfa:	f859 3908 	ldr.w	r3, [r9], #-8
   10bfe:	454b      	cmp	r3, r9
   10c00:	f040 8096 	bne.w	10d30 <_malloc_r+0x558>
   10c04:	f010 0f03 	tst.w	r0, #3
   10c08:	f100 30ff 	add.w	r0, r0, #4294967295
   10c0c:	d1f5      	bne.n	10bfa <_malloc_r+0x422>
   10c0e:	687b      	ldr	r3, [r7, #4]
   10c10:	ea23 0301 	bic.w	r3, r3, r1
   10c14:	607b      	str	r3, [r7, #4]
   10c16:	0049      	lsls	r1, r1, #1
   10c18:	4299      	cmp	r1, r3
   10c1a:	f63f aec0 	bhi.w	1099e <_malloc_r+0x1c6>
   10c1e:	b919      	cbnz	r1, 10c28 <_malloc_r+0x450>
   10c20:	e6bd      	b.n	1099e <_malloc_r+0x1c6>
   10c22:	0049      	lsls	r1, r1, #1
   10c24:	f10e 0e04 	add.w	lr, lr, #4
   10c28:	4219      	tst	r1, r3
   10c2a:	d0fa      	beq.n	10c22 <_malloc_r+0x44a>
   10c2c:	4670      	mov	r0, lr
   10c2e:	e667      	b.n	10900 <_malloc_r+0x128>
   10c30:	f103 0810 	add.w	r8, r3, #16
   10c34:	e6d0      	b.n	109d8 <_malloc_r+0x200>
   10c36:	109a      	asrs	r2, r3, #2
   10c38:	f04f 0801 	mov.w	r8, #1
   10c3c:	687b      	ldr	r3, [r7, #4]
   10c3e:	fa08 f202 	lsl.w	r2, r8, r2
   10c42:	431a      	orrs	r2, r3
   10c44:	607a      	str	r2, [r7, #4]
   10c46:	e770      	b.n	10b2a <_malloc_r+0x352>
   10c48:	eb02 0108 	add.w	r1, r2, r8
   10c4c:	4249      	negs	r1, r1
   10c4e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   10c52:	4651      	mov	r1, sl
   10c54:	4620      	mov	r0, r4
   10c56:	9200      	str	r2, [sp, #0]
   10c58:	f001 fe92 	bl	12980 <_sbrk_r>
   10c5c:	1c43      	adds	r3, r0, #1
   10c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
   10c62:	f47f aeef 	bne.w	10a44 <_malloc_r+0x26c>
   10c66:	46da      	mov	sl, fp
   10c68:	e6ef      	b.n	10a4a <_malloc_r+0x272>
   10c6a:	2b54      	cmp	r3, #84	; 0x54
   10c6c:	d825      	bhi.n	10cba <_malloc_r+0x4e2>
   10c6e:	0b13      	lsrs	r3, r2, #12
   10c70:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   10c74:	00c9      	lsls	r1, r1, #3
   10c76:	336e      	adds	r3, #110	; 0x6e
   10c78:	e744      	b.n	10b04 <_malloc_r+0x32c>
   10c7a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10c7e:	d825      	bhi.n	10ccc <_malloc_r+0x4f4>
   10c80:	0bf3      	lsrs	r3, r6, #15
   10c82:	f103 0078 	add.w	r0, r3, #120	; 0x78
   10c86:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   10c8a:	00c3      	lsls	r3, r0, #3
   10c8c:	e5ea      	b.n	10864 <_malloc_r+0x8c>
   10c8e:	4b29      	ldr	r3, [pc, #164]	; (10d34 <_malloc_r+0x55c>)
   10c90:	6818      	ldr	r0, [r3, #0]
   10c92:	4440      	add	r0, r8
   10c94:	6018      	str	r0, [r3, #0]
   10c96:	e6b1      	b.n	109fc <_malloc_r+0x224>
   10c98:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   10c9c:	f1bc 0f00 	cmp.w	ip, #0
   10ca0:	f47f aeac 	bne.w	109fc <_malloc_r+0x224>
   10ca4:	68bd      	ldr	r5, [r7, #8]
   10ca6:	44c8      	add	r8, r9
   10ca8:	f048 0001 	orr.w	r0, r8, #1
   10cac:	6068      	str	r0, [r5, #4]
   10cae:	e6f0      	b.n	10a92 <_malloc_r+0x2ba>
   10cb0:	4615      	mov	r5, r2
   10cb2:	e6ee      	b.n	10a92 <_malloc_r+0x2ba>
   10cb4:	2301      	movs	r3, #1
   10cb6:	6053      	str	r3, [r2, #4]
   10cb8:	e794      	b.n	10be4 <_malloc_r+0x40c>
   10cba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10cbe:	d823      	bhi.n	10d08 <_malloc_r+0x530>
   10cc0:	0bd3      	lsrs	r3, r2, #15
   10cc2:	f103 0178 	add.w	r1, r3, #120	; 0x78
   10cc6:	00c9      	lsls	r1, r1, #3
   10cc8:	3377      	adds	r3, #119	; 0x77
   10cca:	e71b      	b.n	10b04 <_malloc_r+0x32c>
   10ccc:	f240 5254 	movw	r2, #1364	; 0x554
   10cd0:	4293      	cmp	r3, r2
   10cd2:	d823      	bhi.n	10d1c <_malloc_r+0x544>
   10cd4:	0cb3      	lsrs	r3, r6, #18
   10cd6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   10cda:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   10cde:	00c3      	lsls	r3, r0, #3
   10ce0:	e5c0      	b.n	10864 <_malloc_r+0x8c>
   10ce2:	f1ab 0b08 	sub.w	fp, fp, #8
   10ce6:	44d8      	add	r8, fp
   10ce8:	eba8 0802 	sub.w	r8, r8, r2
   10cec:	f04f 0a00 	mov.w	sl, #0
   10cf0:	e6ab      	b.n	10a4a <_malloc_r+0x272>
   10cf2:	f105 0108 	add.w	r1, r5, #8
   10cf6:	4620      	mov	r0, r4
   10cf8:	9300      	str	r3, [sp, #0]
   10cfa:	f002 f9d3 	bl	130a4 <_free_r>
   10cfe:	68bd      	ldr	r5, [r7, #8]
   10d00:	9b00      	ldr	r3, [sp, #0]
   10d02:	6868      	ldr	r0, [r5, #4]
   10d04:	6819      	ldr	r1, [r3, #0]
   10d06:	e6c4      	b.n	10a92 <_malloc_r+0x2ba>
   10d08:	f240 5154 	movw	r1, #1364	; 0x554
   10d0c:	428b      	cmp	r3, r1
   10d0e:	d80b      	bhi.n	10d28 <_malloc_r+0x550>
   10d10:	0c93      	lsrs	r3, r2, #18
   10d12:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   10d16:	00c9      	lsls	r1, r1, #3
   10d18:	337c      	adds	r3, #124	; 0x7c
   10d1a:	e6f3      	b.n	10b04 <_malloc_r+0x32c>
   10d1c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   10d20:	207f      	movs	r0, #127	; 0x7f
   10d22:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   10d26:	e59d      	b.n	10864 <_malloc_r+0x8c>
   10d28:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   10d2c:	237e      	movs	r3, #126	; 0x7e
   10d2e:	e6e9      	b.n	10b04 <_malloc_r+0x32c>
   10d30:	687b      	ldr	r3, [r7, #4]
   10d32:	e770      	b.n	10c16 <_malloc_r+0x43e>
   10d34:	20024f6c 	.word	0x20024f6c

00010d38 <__malloc_lock>:
   10d38:	4801      	ldr	r0, [pc, #4]	; (10d40 <__malloc_lock+0x8>)
   10d3a:	f001 be77 	b.w	12a2c <__retarget_lock_acquire_recursive>
   10d3e:	bf00      	nop
   10d40:	20024f64 	.word	0x20024f64

00010d44 <__malloc_unlock>:
   10d44:	4801      	ldr	r0, [pc, #4]	; (10d4c <__malloc_unlock+0x8>)
   10d46:	f001 be73 	b.w	12a30 <__retarget_lock_release_recursive>
   10d4a:	bf00      	nop
   10d4c:	20024f64 	.word	0x20024f64

00010d50 <realloc>:
   10d50:	b410      	push	{r4}
   10d52:	4c04      	ldr	r4, [pc, #16]	; (10d64 <realloc+0x14>)
   10d54:	4603      	mov	r3, r0
   10d56:	460a      	mov	r2, r1
   10d58:	6820      	ldr	r0, [r4, #0]
   10d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10d5e:	4619      	mov	r1, r3
   10d60:	f000 b802 	b.w	10d68 <_realloc_r>
   10d64:	2000951c 	.word	0x2000951c

00010d68 <_realloc_r>:
   10d68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d6c:	4617      	mov	r7, r2
   10d6e:	2900      	cmp	r1, #0
   10d70:	f000 8098 	beq.w	10ea4 <_realloc_r+0x13c>
   10d74:	460c      	mov	r4, r1
   10d76:	f107 050b 	add.w	r5, r7, #11
   10d7a:	4680      	mov	r8, r0
   10d7c:	f7ff ffdc 	bl	10d38 <__malloc_lock>
   10d80:	2d16      	cmp	r5, #22
   10d82:	f854 1c04 	ldr.w	r1, [r4, #-4]
   10d86:	d85b      	bhi.n	10e40 <_realloc_r+0xd8>
   10d88:	2510      	movs	r5, #16
   10d8a:	462a      	mov	r2, r5
   10d8c:	42af      	cmp	r7, r5
   10d8e:	d85c      	bhi.n	10e4a <_realloc_r+0xe2>
   10d90:	f021 0603 	bic.w	r6, r1, #3
   10d94:	4296      	cmp	r6, r2
   10d96:	f1a4 0908 	sub.w	r9, r4, #8
   10d9a:	da62      	bge.n	10e62 <_realloc_r+0xfa>
   10d9c:	4bbc      	ldr	r3, [pc, #752]	; (11090 <_realloc_r+0x328>)
   10d9e:	f8d3 c008 	ldr.w	ip, [r3, #8]
   10da2:	eb09 0006 	add.w	r0, r9, r6
   10da6:	4584      	cmp	ip, r0
   10da8:	f000 8097 	beq.w	10eda <_realloc_r+0x172>
   10dac:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10db0:	f02c 0301 	bic.w	r3, ip, #1
   10db4:	4403      	add	r3, r0
   10db6:	685b      	ldr	r3, [r3, #4]
   10db8:	07db      	lsls	r3, r3, #31
   10dba:	d468      	bmi.n	10e8e <_realloc_r+0x126>
   10dbc:	f02c 0c03 	bic.w	ip, ip, #3
   10dc0:	eb06 030c 	add.w	r3, r6, ip
   10dc4:	4293      	cmp	r3, r2
   10dc6:	da47      	bge.n	10e58 <_realloc_r+0xf0>
   10dc8:	07cb      	lsls	r3, r1, #31
   10dca:	d410      	bmi.n	10dee <_realloc_r+0x86>
   10dcc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10dd0:	eba9 0a03 	sub.w	sl, r9, r3
   10dd4:	f8da 3004 	ldr.w	r3, [sl, #4]
   10dd8:	f023 0103 	bic.w	r1, r3, #3
   10ddc:	448c      	add	ip, r1
   10dde:	44b4      	add	ip, r6
   10de0:	4594      	cmp	ip, r2
   10de2:	f280 8111 	bge.w	11008 <_realloc_r+0x2a0>
   10de6:	1873      	adds	r3, r6, r1
   10de8:	4293      	cmp	r3, r2
   10dea:	f280 80e8 	bge.w	10fbe <_realloc_r+0x256>
   10dee:	4639      	mov	r1, r7
   10df0:	4640      	mov	r0, r8
   10df2:	f7ff fcf1 	bl	107d8 <_malloc_r>
   10df6:	4607      	mov	r7, r0
   10df8:	b1e0      	cbz	r0, 10e34 <_realloc_r+0xcc>
   10dfa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10dfe:	f023 0301 	bic.w	r3, r3, #1
   10e02:	444b      	add	r3, r9
   10e04:	f1a0 0208 	sub.w	r2, r0, #8
   10e08:	4293      	cmp	r3, r2
   10e0a:	f000 80d2 	beq.w	10fb2 <_realloc_r+0x24a>
   10e0e:	1f32      	subs	r2, r6, #4
   10e10:	2a24      	cmp	r2, #36	; 0x24
   10e12:	f200 80f5 	bhi.w	11000 <_realloc_r+0x298>
   10e16:	2a13      	cmp	r2, #19
   10e18:	f200 80ac 	bhi.w	10f74 <_realloc_r+0x20c>
   10e1c:	4603      	mov	r3, r0
   10e1e:	4622      	mov	r2, r4
   10e20:	6811      	ldr	r1, [r2, #0]
   10e22:	6019      	str	r1, [r3, #0]
   10e24:	6851      	ldr	r1, [r2, #4]
   10e26:	6059      	str	r1, [r3, #4]
   10e28:	6892      	ldr	r2, [r2, #8]
   10e2a:	609a      	str	r2, [r3, #8]
   10e2c:	4621      	mov	r1, r4
   10e2e:	4640      	mov	r0, r8
   10e30:	f002 f938 	bl	130a4 <_free_r>
   10e34:	4640      	mov	r0, r8
   10e36:	f7ff ff85 	bl	10d44 <__malloc_unlock>
   10e3a:	4638      	mov	r0, r7
   10e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e40:	f025 0507 	bic.w	r5, r5, #7
   10e44:	2d00      	cmp	r5, #0
   10e46:	462a      	mov	r2, r5
   10e48:	daa0      	bge.n	10d8c <_realloc_r+0x24>
   10e4a:	230c      	movs	r3, #12
   10e4c:	f8c8 3000 	str.w	r3, [r8]
   10e50:	2700      	movs	r7, #0
   10e52:	4638      	mov	r0, r7
   10e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e58:	461e      	mov	r6, r3
   10e5a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   10e5e:	60d3      	str	r3, [r2, #12]
   10e60:	609a      	str	r2, [r3, #8]
   10e62:	1b73      	subs	r3, r6, r5
   10e64:	2b0f      	cmp	r3, #15
   10e66:	d822      	bhi.n	10eae <_realloc_r+0x146>
   10e68:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10e6c:	f003 0301 	and.w	r3, r3, #1
   10e70:	4333      	orrs	r3, r6
   10e72:	444e      	add	r6, r9
   10e74:	f8c9 3004 	str.w	r3, [r9, #4]
   10e78:	6873      	ldr	r3, [r6, #4]
   10e7a:	f043 0301 	orr.w	r3, r3, #1
   10e7e:	6073      	str	r3, [r6, #4]
   10e80:	4640      	mov	r0, r8
   10e82:	4627      	mov	r7, r4
   10e84:	f7ff ff5e 	bl	10d44 <__malloc_unlock>
   10e88:	4638      	mov	r0, r7
   10e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e8e:	07c9      	lsls	r1, r1, #31
   10e90:	d4ad      	bmi.n	10dee <_realloc_r+0x86>
   10e92:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10e96:	eba9 0a03 	sub.w	sl, r9, r3
   10e9a:	f8da 1004 	ldr.w	r1, [sl, #4]
   10e9e:	f021 0103 	bic.w	r1, r1, #3
   10ea2:	e7a0      	b.n	10de6 <_realloc_r+0x7e>
   10ea4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ea8:	4611      	mov	r1, r2
   10eaa:	f7ff bc95 	b.w	107d8 <_malloc_r>
   10eae:	f8d9 2004 	ldr.w	r2, [r9, #4]
   10eb2:	eb09 0105 	add.w	r1, r9, r5
   10eb6:	f002 0201 	and.w	r2, r2, #1
   10eba:	444e      	add	r6, r9
   10ebc:	f043 0301 	orr.w	r3, r3, #1
   10ec0:	432a      	orrs	r2, r5
   10ec2:	f8c9 2004 	str.w	r2, [r9, #4]
   10ec6:	604b      	str	r3, [r1, #4]
   10ec8:	6873      	ldr	r3, [r6, #4]
   10eca:	f043 0301 	orr.w	r3, r3, #1
   10ece:	3108      	adds	r1, #8
   10ed0:	6073      	str	r3, [r6, #4]
   10ed2:	4640      	mov	r0, r8
   10ed4:	f002 f8e6 	bl	130a4 <_free_r>
   10ed8:	e7d2      	b.n	10e80 <_realloc_r+0x118>
   10eda:	f8dc 0004 	ldr.w	r0, [ip, #4]
   10ede:	f020 0b03 	bic.w	fp, r0, #3
   10ee2:	eb06 0c0b 	add.w	ip, r6, fp
   10ee6:	f105 0010 	add.w	r0, r5, #16
   10eea:	4584      	cmp	ip, r0
   10eec:	da4d      	bge.n	10f8a <_realloc_r+0x222>
   10eee:	07c9      	lsls	r1, r1, #31
   10ef0:	f53f af7d 	bmi.w	10dee <_realloc_r+0x86>
   10ef4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   10ef8:	eba9 0a01 	sub.w	sl, r9, r1
   10efc:	f8da 1004 	ldr.w	r1, [sl, #4]
   10f00:	f021 0103 	bic.w	r1, r1, #3
   10f04:	448b      	add	fp, r1
   10f06:	44b3      	add	fp, r6
   10f08:	4558      	cmp	r0, fp
   10f0a:	f73f af6c 	bgt.w	10de6 <_realloc_r+0x7e>
   10f0e:	4657      	mov	r7, sl
   10f10:	f8da 100c 	ldr.w	r1, [sl, #12]
   10f14:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10f18:	1f32      	subs	r2, r6, #4
   10f1a:	2a24      	cmp	r2, #36	; 0x24
   10f1c:	60c1      	str	r1, [r0, #12]
   10f1e:	6088      	str	r0, [r1, #8]
   10f20:	f200 80db 	bhi.w	110da <_realloc_r+0x372>
   10f24:	2a13      	cmp	r2, #19
   10f26:	f240 80d6 	bls.w	110d6 <_realloc_r+0x36e>
   10f2a:	6821      	ldr	r1, [r4, #0]
   10f2c:	f8ca 1008 	str.w	r1, [sl, #8]
   10f30:	6861      	ldr	r1, [r4, #4]
   10f32:	f8ca 100c 	str.w	r1, [sl, #12]
   10f36:	2a1b      	cmp	r2, #27
   10f38:	f200 80df 	bhi.w	110fa <_realloc_r+0x392>
   10f3c:	3408      	adds	r4, #8
   10f3e:	f10a 0210 	add.w	r2, sl, #16
   10f42:	6821      	ldr	r1, [r4, #0]
   10f44:	6011      	str	r1, [r2, #0]
   10f46:	6861      	ldr	r1, [r4, #4]
   10f48:	6051      	str	r1, [r2, #4]
   10f4a:	68a1      	ldr	r1, [r4, #8]
   10f4c:	6091      	str	r1, [r2, #8]
   10f4e:	eb0a 0105 	add.w	r1, sl, r5
   10f52:	ebab 0205 	sub.w	r2, fp, r5
   10f56:	f042 0201 	orr.w	r2, r2, #1
   10f5a:	6099      	str	r1, [r3, #8]
   10f5c:	604a      	str	r2, [r1, #4]
   10f5e:	f8da 3004 	ldr.w	r3, [sl, #4]
   10f62:	f003 0301 	and.w	r3, r3, #1
   10f66:	432b      	orrs	r3, r5
   10f68:	4640      	mov	r0, r8
   10f6a:	f8ca 3004 	str.w	r3, [sl, #4]
   10f6e:	f7ff fee9 	bl	10d44 <__malloc_unlock>
   10f72:	e76e      	b.n	10e52 <_realloc_r+0xea>
   10f74:	6823      	ldr	r3, [r4, #0]
   10f76:	6003      	str	r3, [r0, #0]
   10f78:	6863      	ldr	r3, [r4, #4]
   10f7a:	6043      	str	r3, [r0, #4]
   10f7c:	2a1b      	cmp	r2, #27
   10f7e:	d868      	bhi.n	11052 <_realloc_r+0x2ea>
   10f80:	f104 0208 	add.w	r2, r4, #8
   10f84:	f100 0308 	add.w	r3, r0, #8
   10f88:	e74a      	b.n	10e20 <_realloc_r+0xb8>
   10f8a:	eb09 0205 	add.w	r2, r9, r5
   10f8e:	609a      	str	r2, [r3, #8]
   10f90:	ebac 0305 	sub.w	r3, ip, r5
   10f94:	f043 0301 	orr.w	r3, r3, #1
   10f98:	6053      	str	r3, [r2, #4]
   10f9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10f9e:	f003 0301 	and.w	r3, r3, #1
   10fa2:	432b      	orrs	r3, r5
   10fa4:	4640      	mov	r0, r8
   10fa6:	f844 3c04 	str.w	r3, [r4, #-4]
   10faa:	f7ff fecb 	bl	10d44 <__malloc_unlock>
   10fae:	4627      	mov	r7, r4
   10fb0:	e74f      	b.n	10e52 <_realloc_r+0xea>
   10fb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   10fb6:	f023 0303 	bic.w	r3, r3, #3
   10fba:	441e      	add	r6, r3
   10fbc:	e751      	b.n	10e62 <_realloc_r+0xfa>
   10fbe:	4657      	mov	r7, sl
   10fc0:	f8da 100c 	ldr.w	r1, [sl, #12]
   10fc4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10fc8:	1f32      	subs	r2, r6, #4
   10fca:	2a24      	cmp	r2, #36	; 0x24
   10fcc:	60c1      	str	r1, [r0, #12]
   10fce:	6088      	str	r0, [r1, #8]
   10fd0:	d84c      	bhi.n	1106c <_realloc_r+0x304>
   10fd2:	2a13      	cmp	r2, #19
   10fd4:	d948      	bls.n	11068 <_realloc_r+0x300>
   10fd6:	6821      	ldr	r1, [r4, #0]
   10fd8:	f8ca 1008 	str.w	r1, [sl, #8]
   10fdc:	6861      	ldr	r1, [r4, #4]
   10fde:	f8ca 100c 	str.w	r1, [sl, #12]
   10fe2:	2a1b      	cmp	r2, #27
   10fe4:	d856      	bhi.n	11094 <_realloc_r+0x32c>
   10fe6:	3408      	adds	r4, #8
   10fe8:	f10a 0210 	add.w	r2, sl, #16
   10fec:	461e      	mov	r6, r3
   10fee:	6823      	ldr	r3, [r4, #0]
   10ff0:	6013      	str	r3, [r2, #0]
   10ff2:	6863      	ldr	r3, [r4, #4]
   10ff4:	6053      	str	r3, [r2, #4]
   10ff6:	68a3      	ldr	r3, [r4, #8]
   10ff8:	6093      	str	r3, [r2, #8]
   10ffa:	46d1      	mov	r9, sl
   10ffc:	463c      	mov	r4, r7
   10ffe:	e730      	b.n	10e62 <_realloc_r+0xfa>
   11000:	4621      	mov	r1, r4
   11002:	f001 fadd 	bl	125c0 <memmove>
   11006:	e711      	b.n	10e2c <_realloc_r+0xc4>
   11008:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   1100c:	4657      	mov	r7, sl
   1100e:	60cb      	str	r3, [r1, #12]
   11010:	6099      	str	r1, [r3, #8]
   11012:	f857 1f08 	ldr.w	r1, [r7, #8]!
   11016:	f8da 300c 	ldr.w	r3, [sl, #12]
   1101a:	60cb      	str	r3, [r1, #12]
   1101c:	1f32      	subs	r2, r6, #4
   1101e:	2a24      	cmp	r2, #36	; 0x24
   11020:	6099      	str	r1, [r3, #8]
   11022:	d82d      	bhi.n	11080 <_realloc_r+0x318>
   11024:	2a13      	cmp	r2, #19
   11026:	d929      	bls.n	1107c <_realloc_r+0x314>
   11028:	6823      	ldr	r3, [r4, #0]
   1102a:	f8ca 3008 	str.w	r3, [sl, #8]
   1102e:	6863      	ldr	r3, [r4, #4]
   11030:	f8ca 300c 	str.w	r3, [sl, #12]
   11034:	2a1b      	cmp	r2, #27
   11036:	d842      	bhi.n	110be <_realloc_r+0x356>
   11038:	3408      	adds	r4, #8
   1103a:	f10a 0310 	add.w	r3, sl, #16
   1103e:	6822      	ldr	r2, [r4, #0]
   11040:	601a      	str	r2, [r3, #0]
   11042:	6862      	ldr	r2, [r4, #4]
   11044:	605a      	str	r2, [r3, #4]
   11046:	68a2      	ldr	r2, [r4, #8]
   11048:	609a      	str	r2, [r3, #8]
   1104a:	4666      	mov	r6, ip
   1104c:	46d1      	mov	r9, sl
   1104e:	463c      	mov	r4, r7
   11050:	e707      	b.n	10e62 <_realloc_r+0xfa>
   11052:	68a3      	ldr	r3, [r4, #8]
   11054:	6083      	str	r3, [r0, #8]
   11056:	68e3      	ldr	r3, [r4, #12]
   11058:	60c3      	str	r3, [r0, #12]
   1105a:	2a24      	cmp	r2, #36	; 0x24
   1105c:	d026      	beq.n	110ac <_realloc_r+0x344>
   1105e:	f104 0210 	add.w	r2, r4, #16
   11062:	f100 0310 	add.w	r3, r0, #16
   11066:	e6db      	b.n	10e20 <_realloc_r+0xb8>
   11068:	463a      	mov	r2, r7
   1106a:	e7bf      	b.n	10fec <_realloc_r+0x284>
   1106c:	4621      	mov	r1, r4
   1106e:	4638      	mov	r0, r7
   11070:	461e      	mov	r6, r3
   11072:	46d1      	mov	r9, sl
   11074:	f001 faa4 	bl	125c0 <memmove>
   11078:	463c      	mov	r4, r7
   1107a:	e6f2      	b.n	10e62 <_realloc_r+0xfa>
   1107c:	463b      	mov	r3, r7
   1107e:	e7de      	b.n	1103e <_realloc_r+0x2d6>
   11080:	4621      	mov	r1, r4
   11082:	4638      	mov	r0, r7
   11084:	4666      	mov	r6, ip
   11086:	46d1      	mov	r9, sl
   11088:	f001 fa9a 	bl	125c0 <memmove>
   1108c:	463c      	mov	r4, r7
   1108e:	e6e8      	b.n	10e62 <_realloc_r+0xfa>
   11090:	20009100 	.word	0x20009100
   11094:	68a1      	ldr	r1, [r4, #8]
   11096:	f8ca 1010 	str.w	r1, [sl, #16]
   1109a:	68e1      	ldr	r1, [r4, #12]
   1109c:	f8ca 1014 	str.w	r1, [sl, #20]
   110a0:	2a24      	cmp	r2, #36	; 0x24
   110a2:	d020      	beq.n	110e6 <_realloc_r+0x37e>
   110a4:	3410      	adds	r4, #16
   110a6:	f10a 0218 	add.w	r2, sl, #24
   110aa:	e79f      	b.n	10fec <_realloc_r+0x284>
   110ac:	6923      	ldr	r3, [r4, #16]
   110ae:	6103      	str	r3, [r0, #16]
   110b0:	6961      	ldr	r1, [r4, #20]
   110b2:	6141      	str	r1, [r0, #20]
   110b4:	f104 0218 	add.w	r2, r4, #24
   110b8:	f100 0318 	add.w	r3, r0, #24
   110bc:	e6b0      	b.n	10e20 <_realloc_r+0xb8>
   110be:	68a3      	ldr	r3, [r4, #8]
   110c0:	f8ca 3010 	str.w	r3, [sl, #16]
   110c4:	68e3      	ldr	r3, [r4, #12]
   110c6:	f8ca 3014 	str.w	r3, [sl, #20]
   110ca:	2a24      	cmp	r2, #36	; 0x24
   110cc:	d021      	beq.n	11112 <_realloc_r+0x3aa>
   110ce:	3410      	adds	r4, #16
   110d0:	f10a 0318 	add.w	r3, sl, #24
   110d4:	e7b3      	b.n	1103e <_realloc_r+0x2d6>
   110d6:	463a      	mov	r2, r7
   110d8:	e733      	b.n	10f42 <_realloc_r+0x1da>
   110da:	4621      	mov	r1, r4
   110dc:	4638      	mov	r0, r7
   110de:	f001 fa6f 	bl	125c0 <memmove>
   110e2:	4b16      	ldr	r3, [pc, #88]	; (1113c <_realloc_r+0x3d4>)
   110e4:	e733      	b.n	10f4e <_realloc_r+0x1e6>
   110e6:	6922      	ldr	r2, [r4, #16]
   110e8:	f8ca 2018 	str.w	r2, [sl, #24]
   110ec:	6962      	ldr	r2, [r4, #20]
   110ee:	f8ca 201c 	str.w	r2, [sl, #28]
   110f2:	3418      	adds	r4, #24
   110f4:	f10a 0220 	add.w	r2, sl, #32
   110f8:	e778      	b.n	10fec <_realloc_r+0x284>
   110fa:	68a1      	ldr	r1, [r4, #8]
   110fc:	f8ca 1010 	str.w	r1, [sl, #16]
   11100:	68e1      	ldr	r1, [r4, #12]
   11102:	f8ca 1014 	str.w	r1, [sl, #20]
   11106:	2a24      	cmp	r2, #36	; 0x24
   11108:	d00d      	beq.n	11126 <_realloc_r+0x3be>
   1110a:	3410      	adds	r4, #16
   1110c:	f10a 0218 	add.w	r2, sl, #24
   11110:	e717      	b.n	10f42 <_realloc_r+0x1da>
   11112:	6923      	ldr	r3, [r4, #16]
   11114:	f8ca 3018 	str.w	r3, [sl, #24]
   11118:	6963      	ldr	r3, [r4, #20]
   1111a:	f8ca 301c 	str.w	r3, [sl, #28]
   1111e:	3418      	adds	r4, #24
   11120:	f10a 0320 	add.w	r3, sl, #32
   11124:	e78b      	b.n	1103e <_realloc_r+0x2d6>
   11126:	6922      	ldr	r2, [r4, #16]
   11128:	f8ca 2018 	str.w	r2, [sl, #24]
   1112c:	6962      	ldr	r2, [r4, #20]
   1112e:	f8ca 201c 	str.w	r2, [sl, #28]
   11132:	3418      	adds	r4, #24
   11134:	f10a 0220 	add.w	r2, sl, #32
   11138:	e703      	b.n	10f42 <_realloc_r+0x1da>
   1113a:	bf00      	nop
   1113c:	20009100 	.word	0x20009100

00011140 <_strtod_l>:
   11140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11144:	ed2d 8b10 	vpush	{d8-d15}
   11148:	b097      	sub	sp, #92	; 0x5c
   1114a:	468a      	mov	sl, r1
   1114c:	2100      	movs	r1, #0
   1114e:	9207      	str	r2, [sp, #28]
   11150:	9112      	str	r1, [sp, #72]	; 0x48
   11152:	2200      	movs	r2, #0
   11154:	2100      	movs	r1, #0
   11156:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1115a:	4680      	mov	r8, r0
   1115c:	4651      	mov	r1, sl
   1115e:	9111      	str	r1, [sp, #68]	; 0x44
   11160:	460f      	mov	r7, r1
   11162:	f811 2b01 	ldrb.w	r2, [r1], #1
   11166:	2a2d      	cmp	r2, #45	; 0x2d
   11168:	d85e      	bhi.n	11228 <_strtod_l+0xe8>
   1116a:	a001      	add	r0, pc, #4	; (adr r0, 11170 <_strtod_l+0x30>)
   1116c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   11170:	00011311 	.word	0x00011311
   11174:	00011229 	.word	0x00011229
   11178:	00011229 	.word	0x00011229
   1117c:	00011229 	.word	0x00011229
   11180:	00011229 	.word	0x00011229
   11184:	00011229 	.word	0x00011229
   11188:	00011229 	.word	0x00011229
   1118c:	00011229 	.word	0x00011229
   11190:	00011229 	.word	0x00011229
   11194:	0001115f 	.word	0x0001115f
   11198:	0001115f 	.word	0x0001115f
   1119c:	0001115f 	.word	0x0001115f
   111a0:	0001115f 	.word	0x0001115f
   111a4:	0001115f 	.word	0x0001115f
   111a8:	00011229 	.word	0x00011229
   111ac:	00011229 	.word	0x00011229
   111b0:	00011229 	.word	0x00011229
   111b4:	00011229 	.word	0x00011229
   111b8:	00011229 	.word	0x00011229
   111bc:	00011229 	.word	0x00011229
   111c0:	00011229 	.word	0x00011229
   111c4:	00011229 	.word	0x00011229
   111c8:	00011229 	.word	0x00011229
   111cc:	00011229 	.word	0x00011229
   111d0:	00011229 	.word	0x00011229
   111d4:	00011229 	.word	0x00011229
   111d8:	00011229 	.word	0x00011229
   111dc:	00011229 	.word	0x00011229
   111e0:	00011229 	.word	0x00011229
   111e4:	00011229 	.word	0x00011229
   111e8:	00011229 	.word	0x00011229
   111ec:	00011229 	.word	0x00011229
   111f0:	0001115f 	.word	0x0001115f
   111f4:	00011229 	.word	0x00011229
   111f8:	00011229 	.word	0x00011229
   111fc:	00011229 	.word	0x00011229
   11200:	00011229 	.word	0x00011229
   11204:	00011229 	.word	0x00011229
   11208:	00011229 	.word	0x00011229
   1120c:	00011229 	.word	0x00011229
   11210:	00011229 	.word	0x00011229
   11214:	00011229 	.word	0x00011229
   11218:	00011229 	.word	0x00011229
   1121c:	0001194b 	.word	0x0001194b
   11220:	00011229 	.word	0x00011229
   11224:	00011937 	.word	0x00011937
   11228:	2100      	movs	r1, #0
   1122a:	9109      	str	r1, [sp, #36]	; 0x24
   1122c:	2a30      	cmp	r2, #48	; 0x30
   1122e:	d07d      	beq.n	1132c <_strtod_l+0x1ec>
   11230:	2300      	movs	r3, #0
   11232:	9308      	str	r3, [sp, #32]
   11234:	2a2f      	cmp	r2, #47	; 0x2f
   11236:	4614      	mov	r4, r2
   11238:	f240 84cd 	bls.w	11bd6 <_strtod_l+0xa96>
   1123c:	f04f 0900 	mov.w	r9, #0
   11240:	4638      	mov	r0, r7
   11242:	464e      	mov	r6, r9
   11244:	464d      	mov	r5, r9
   11246:	e012      	b.n	1126e <_strtod_l+0x12e>
   11248:	3001      	adds	r0, #1
   1124a:	2d08      	cmp	r5, #8
   1124c:	9011      	str	r0, [sp, #68]	; 0x44
   1124e:	bfc8      	it	gt
   11250:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   11254:	7804      	ldrb	r4, [r0, #0]
   11256:	bfc6      	itte	gt
   11258:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1125c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   11260:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   11264:	2c2f      	cmp	r4, #47	; 0x2f
   11266:	f105 0501 	add.w	r5, r5, #1
   1126a:	4622      	mov	r2, r4
   1126c:	dd6f      	ble.n	1134e <_strtod_l+0x20e>
   1126e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   11272:	2c39      	cmp	r4, #57	; 0x39
   11274:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   11278:	dde6      	ble.n	11248 <_strtod_l+0x108>
   1127a:	499f      	ldr	r1, [pc, #636]	; (114f8 <_strtod_l+0x3b8>)
   1127c:	2201      	movs	r2, #1
   1127e:	f001 fac3 	bl	12808 <strncmp>
   11282:	2800      	cmp	r0, #0
   11284:	d137      	bne.n	112f6 <_strtod_l+0x1b6>
   11286:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11288:	461a      	mov	r2, r3
   1128a:	3301      	adds	r3, #1
   1128c:	9311      	str	r3, [sp, #68]	; 0x44
   1128e:	7854      	ldrb	r4, [r2, #1]
   11290:	2d00      	cmp	r5, #0
   11292:	f040 8543 	bne.w	11d1c <_strtod_l+0xbdc>
   11296:	2c30      	cmp	r4, #48	; 0x30
   11298:	f040 8524 	bne.w	11ce4 <_strtod_l+0xba4>
   1129c:	f1c3 0201 	rsb	r2, r3, #1
   112a0:	1898      	adds	r0, r3, r2
   112a2:	3301      	adds	r3, #1
   112a4:	9311      	str	r3, [sp, #68]	; 0x44
   112a6:	781c      	ldrb	r4, [r3, #0]
   112a8:	2c30      	cmp	r4, #48	; 0x30
   112aa:	d0f9      	beq.n	112a0 <_strtod_l+0x160>
   112ac:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   112b0:	2b08      	cmp	r3, #8
   112b2:	f200 8301 	bhi.w	118b8 <_strtod_l+0x778>
   112b6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   112b8:	1c43      	adds	r3, r0, #1
   112ba:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   112be:	930b      	str	r3, [sp, #44]	; 0x2c
   112c0:	2501      	movs	r5, #1
   112c2:	46bc      	mov	ip, r7
   112c4:	f04f 0e00 	mov.w	lr, #0
   112c8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   112cc:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   112d0:	2000      	movs	r0, #0
   112d2:	f10c 0301 	add.w	r3, ip, #1
   112d6:	9311      	str	r3, [sp, #68]	; 0x44
   112d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   112dc:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   112e0:	2909      	cmp	r1, #9
   112e2:	f200 82bb 	bhi.w	1185c <_strtod_l+0x71c>
   112e6:	3001      	adds	r0, #1
   112e8:	468b      	mov	fp, r1
   112ea:	2900      	cmp	r1, #0
   112ec:	f040 844f 	bne.w	11b8e <_strtod_l+0xa4e>
   112f0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   112f4:	e7ed      	b.n	112d2 <_strtod_l+0x192>
   112f6:	2000      	movs	r0, #0
   112f8:	2c65      	cmp	r4, #101	; 0x65
   112fa:	46ae      	mov	lr, r5
   112fc:	900b      	str	r0, [sp, #44]	; 0x2c
   112fe:	4684      	mov	ip, r0
   11300:	d001      	beq.n	11306 <_strtod_l+0x1c6>
   11302:	2c45      	cmp	r4, #69	; 0x45
   11304:	d130      	bne.n	11368 <_strtod_l+0x228>
   11306:	2d00      	cmp	r5, #0
   11308:	d16b      	bne.n	113e2 <_strtod_l+0x2a2>
   1130a:	9b08      	ldr	r3, [sp, #32]
   1130c:	4303      	orrs	r3, r0
   1130e:	d167      	bne.n	113e0 <_strtod_l+0x2a0>
   11310:	9b07      	ldr	r3, [sp, #28]
   11312:	ed9f 8b77 	vldr	d8, [pc, #476]	; 114f0 <_strtod_l+0x3b0>
   11316:	b113      	cbz	r3, 1131e <_strtod_l+0x1de>
   11318:	9b07      	ldr	r3, [sp, #28]
   1131a:	f8c3 a000 	str.w	sl, [r3]
   1131e:	eeb0 0b48 	vmov.f64	d0, d8
   11322:	b017      	add	sp, #92	; 0x5c
   11324:	ecbd 8b10 	vpop	{d8-d15}
   11328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1132c:	787a      	ldrb	r2, [r7, #1]
   1132e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   11332:	2a58      	cmp	r2, #88	; 0x58
   11334:	f000 840c 	beq.w	11b50 <_strtod_l+0xa10>
   11338:	3701      	adds	r7, #1
   1133a:	9711      	str	r7, [sp, #68]	; 0x44
   1133c:	783a      	ldrb	r2, [r7, #0]
   1133e:	2a30      	cmp	r2, #48	; 0x30
   11340:	d0fa      	beq.n	11338 <_strtod_l+0x1f8>
   11342:	2a00      	cmp	r2, #0
   11344:	f000 80b7 	beq.w	114b6 <_strtod_l+0x376>
   11348:	2301      	movs	r3, #1
   1134a:	9308      	str	r3, [sp, #32]
   1134c:	e772      	b.n	11234 <_strtod_l+0xf4>
   1134e:	496a      	ldr	r1, [pc, #424]	; (114f8 <_strtod_l+0x3b8>)
   11350:	2201      	movs	r2, #1
   11352:	f001 fa59 	bl	12808 <strncmp>
   11356:	2800      	cmp	r0, #0
   11358:	f000 80c0 	beq.w	114dc <_strtod_l+0x39c>
   1135c:	46ae      	mov	lr, r5
   1135e:	f04f 0c00 	mov.w	ip, #0
   11362:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11366:	4660      	mov	r0, ip
   11368:	f04f 0b00 	mov.w	fp, #0
   1136c:	2d00      	cmp	r5, #0
   1136e:	d07e      	beq.n	1146e <_strtod_l+0x32e>
   11370:	ee07 6a90 	vmov	s15, r6
   11374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11376:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   1137a:	ebab 0303 	sub.w	r3, fp, r3
   1137e:	f1be 0f00 	cmp.w	lr, #0
   11382:	bf08      	it	eq
   11384:	46ae      	moveq	lr, r5
   11386:	2d10      	cmp	r5, #16
   11388:	930a      	str	r3, [sp, #40]	; 0x28
   1138a:	462b      	mov	r3, r5
   1138c:	bfa8      	it	ge
   1138e:	2310      	movge	r3, #16
   11390:	2d09      	cmp	r5, #9
   11392:	ed8d 7b04 	vstr	d7, [sp, #16]
   11396:	dd0c      	ble.n	113b2 <_strtod_l+0x272>
   11398:	4a58      	ldr	r2, [pc, #352]	; (114fc <_strtod_l+0x3bc>)
   1139a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1139e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   113a2:	ee06 9a90 	vmov	s13, r9
   113a6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   113aa:	eea7 6b05 	vfma.f64	d6, d7, d5
   113ae:	ed8d 6b04 	vstr	d6, [sp, #16]
   113b2:	2d0f      	cmp	r5, #15
   113b4:	f300 80a8 	bgt.w	11508 <_strtod_l+0x3c8>
   113b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   113ba:	2a00      	cmp	r2, #0
   113bc:	f000 83e4 	beq.w	11b88 <_strtod_l+0xa48>
   113c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   113c2:	f340 833c 	ble.w	11a3e <_strtod_l+0x8fe>
   113c6:	2a16      	cmp	r2, #22
   113c8:	f340 8498 	ble.w	11cfc <_strtod_l+0xbbc>
   113cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   113ce:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   113d2:	428a      	cmp	r2, r1
   113d4:	f280 84a6 	bge.w	11d24 <_strtod_l+0xbe4>
   113d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   113da:	1aeb      	subs	r3, r5, r3
   113dc:	4413      	add	r3, r2
   113de:	e099      	b.n	11514 <_strtod_l+0x3d4>
   113e0:	2500      	movs	r5, #0
   113e2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   113e6:	f10a 0301 	add.w	r3, sl, #1
   113ea:	9311      	str	r3, [sp, #68]	; 0x44
   113ec:	f89a 4001 	ldrb.w	r4, [sl, #1]
   113f0:	2c2b      	cmp	r4, #43	; 0x2b
   113f2:	f000 825e 	beq.w	118b2 <_strtod_l+0x772>
   113f6:	2c2d      	cmp	r4, #45	; 0x2d
   113f8:	f000 81f7 	beq.w	117ea <_strtod_l+0x6aa>
   113fc:	2300      	movs	r3, #0
   113fe:	930a      	str	r3, [sp, #40]	; 0x28
   11400:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   11404:	2b09      	cmp	r3, #9
   11406:	f200 81eb 	bhi.w	117e0 <_strtod_l+0x6a0>
   1140a:	2c30      	cmp	r4, #48	; 0x30
   1140c:	d105      	bne.n	1141a <_strtod_l+0x2da>
   1140e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11410:	3301      	adds	r3, #1
   11412:	9311      	str	r3, [sp, #68]	; 0x44
   11414:	781c      	ldrb	r4, [r3, #0]
   11416:	2c30      	cmp	r4, #48	; 0x30
   11418:	d0fa      	beq.n	11410 <_strtod_l+0x2d0>
   1141a:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   1141e:	2b08      	cmp	r3, #8
   11420:	d8a2      	bhi.n	11368 <_strtod_l+0x228>
   11422:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11424:	920c      	str	r2, [sp, #48]	; 0x30
   11426:	1c53      	adds	r3, r2, #1
   11428:	9311      	str	r3, [sp, #68]	; 0x44
   1142a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1142e:	7854      	ldrb	r4, [r2, #1]
   11430:	2c2f      	cmp	r4, #47	; 0x2f
   11432:	dc07      	bgt.n	11444 <_strtod_l+0x304>
   11434:	e3de      	b.n	11bf4 <_strtod_l+0xab4>
   11436:	3301      	adds	r3, #1
   11438:	9311      	str	r3, [sp, #68]	; 0x44
   1143a:	784c      	ldrb	r4, [r1, #1]
   1143c:	2c2f      	cmp	r4, #47	; 0x2f
   1143e:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   11442:	dd06      	ble.n	11452 <_strtod_l+0x312>
   11444:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   11448:	2c39      	cmp	r4, #57	; 0x39
   1144a:	4619      	mov	r1, r3
   1144c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   11450:	ddf1      	ble.n	11436 <_strtod_l+0x2f6>
   11452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11454:	1a9b      	subs	r3, r3, r2
   11456:	2b08      	cmp	r3, #8
   11458:	f340 83cc 	ble.w	11bf4 <_strtod_l+0xab4>
   1145c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   11460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11462:	2b00      	cmp	r3, #0
   11464:	d082      	beq.n	1136c <_strtod_l+0x22c>
   11466:	f1cb 0b00 	rsb	fp, fp, #0
   1146a:	2d00      	cmp	r5, #0
   1146c:	d180      	bne.n	11370 <_strtod_l+0x230>
   1146e:	9b08      	ldr	r3, [sp, #32]
   11470:	4303      	orrs	r3, r0
   11472:	d120      	bne.n	114b6 <_strtod_l+0x376>
   11474:	f1bc 0f00 	cmp.w	ip, #0
   11478:	f47f af4a 	bne.w	11310 <_strtod_l+0x1d0>
   1147c:	2c69      	cmp	r4, #105	; 0x69
   1147e:	f000 83cf 	beq.w	11c20 <_strtod_l+0xae0>
   11482:	f300 82f3 	bgt.w	11a6c <_strtod_l+0x92c>
   11486:	2c49      	cmp	r4, #73	; 0x49
   11488:	f000 83ca 	beq.w	11c20 <_strtod_l+0xae0>
   1148c:	2c4e      	cmp	r4, #78	; 0x4e
   1148e:	f47f af3f 	bne.w	11310 <_strtod_l+0x1d0>
   11492:	491b      	ldr	r1, [pc, #108]	; (11500 <_strtod_l+0x3c0>)
   11494:	a811      	add	r0, sp, #68	; 0x44
   11496:	f002 fa27 	bl	138e8 <__match>
   1149a:	2800      	cmp	r0, #0
   1149c:	f43f af38 	beq.w	11310 <_strtod_l+0x1d0>
   114a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   114a2:	781b      	ldrb	r3, [r3, #0]
   114a4:	2b28      	cmp	r3, #40	; 0x28
   114a6:	f000 84f2 	beq.w	11e8e <_strtod_l+0xd4e>
   114aa:	4816      	ldr	r0, [pc, #88]	; (11504 <_strtod_l+0x3c4>)
   114ac:	f001 fd58 	bl	12f60 <nan>
   114b0:	eeb0 8b40 	vmov.f64	d8, d0
   114b4:	e001      	b.n	114ba <_strtod_l+0x37a>
   114b6:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 114f0 <_strtod_l+0x3b0>
   114ba:	9a07      	ldr	r2, [sp, #28]
   114bc:	b10a      	cbz	r2, 114c2 <_strtod_l+0x382>
   114be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   114c0:	6013      	str	r3, [r2, #0]
   114c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   114c4:	2b00      	cmp	r3, #0
   114c6:	f43f af2a 	beq.w	1131e <_strtod_l+0x1de>
   114ca:	eeb1 8b48 	vneg.f64	d8, d8
   114ce:	eeb0 0b48 	vmov.f64	d0, d8
   114d2:	b017      	add	sp, #92	; 0x5c
   114d4:	ecbd 8b10 	vpop	{d8-d15}
   114d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   114de:	900b      	str	r0, [sp, #44]	; 0x2c
   114e0:	1c5a      	adds	r2, r3, #1
   114e2:	9211      	str	r2, [sp, #68]	; 0x44
   114e4:	785c      	ldrb	r4, [r3, #1]
   114e6:	46ae      	mov	lr, r5
   114e8:	e6f8      	b.n	112dc <_strtod_l+0x19c>
   114ea:	bf00      	nop
   114ec:	f3af 8000 	nop.w
	...
   114f8:	20008320 	.word	0x20008320
   114fc:	20000328 	.word	0x20000328
   11500:	20001204 	.word	0x20001204
   11504:	20000560 	.word	0x20000560
   11508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1150a:	1aeb      	subs	r3, r5, r3
   1150c:	4413      	add	r3, r2
   1150e:	2b00      	cmp	r3, #0
   11510:	f340 82b0 	ble.w	11a74 <_strtod_l+0x934>
   11514:	f013 010f 	ands.w	r1, r3, #15
   11518:	d00a      	beq.n	11530 <_strtod_l+0x3f0>
   1151a:	4ac3      	ldr	r2, [pc, #780]	; (11828 <_strtod_l+0x6e8>)
   1151c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11520:	ed9d 6b04 	vldr	d6, [sp, #16]
   11524:	ed92 7b00 	vldr	d7, [r2]
   11528:	ee27 7b06 	vmul.f64	d7, d7, d6
   1152c:	ed8d 7b04 	vstr	d7, [sp, #16]
   11530:	f033 020f 	bics.w	r2, r3, #15
   11534:	f040 8238 	bne.w	119a8 <_strtod_l+0x868>
   11538:	2300      	movs	r3, #0
   1153a:	9308      	str	r3, [sp, #32]
   1153c:	9600      	str	r6, [sp, #0]
   1153e:	462b      	mov	r3, r5
   11540:	4672      	mov	r2, lr
   11542:	4639      	mov	r1, r7
   11544:	4640      	mov	r0, r8
   11546:	f002 fb5b 	bl	13c00 <__s2b>
   1154a:	4681      	mov	r9, r0
   1154c:	2800      	cmp	r0, #0
   1154e:	f000 82e1 	beq.w	11b14 <_strtod_l+0x9d4>
   11552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11554:	eba3 0b0b 	sub.w	fp, r3, fp
   11558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1155a:	ed9f eba9 	vldr	d14, [pc, #676]	; 11800 <_strtod_l+0x6c0>
   1155e:	2b00      	cmp	r3, #0
   11560:	ed9f cba9 	vldr	d12, [pc, #676]	; 11808 <_strtod_l+0x6c8>
   11564:	ed9f dbaa 	vldr	d13, [pc, #680]	; 11810 <_strtod_l+0x6d0>
   11568:	ed9f bbab 	vldr	d11, [pc, #684]	; 11818 <_strtod_l+0x6d8>
   1156c:	bfb4      	ite	lt
   1156e:	465a      	movlt	r2, fp
   11570:	2200      	movge	r2, #0
   11572:	f04f 0a00 	mov.w	sl, #0
   11576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1157a:	920b      	str	r2, [sp, #44]	; 0x2c
   1157c:	930c      	str	r3, [sp, #48]	; 0x30
   1157e:	4654      	mov	r4, sl
   11580:	f8d9 1004 	ldr.w	r1, [r9, #4]
   11584:	4640      	mov	r0, r8
   11586:	f002 fab9 	bl	13afc <_Balloc>
   1158a:	4606      	mov	r6, r0
   1158c:	2800      	cmp	r0, #0
   1158e:	f000 810e 	beq.w	117ae <_strtod_l+0x66e>
   11592:	f8d9 2010 	ldr.w	r2, [r9, #16]
   11596:	ed9d 8b04 	vldr	d8, [sp, #16]
   1159a:	3202      	adds	r2, #2
   1159c:	0092      	lsls	r2, r2, #2
   1159e:	f109 010c 	add.w	r1, r9, #12
   115a2:	300c      	adds	r0, #12
   115a4:	f7fc fffa 	bl	e59c <memcpy>
   115a8:	eeb0 0b48 	vmov.f64	d0, d8
   115ac:	aa14      	add	r2, sp, #80	; 0x50
   115ae:	a913      	add	r1, sp, #76	; 0x4c
   115b0:	4640      	mov	r0, r8
   115b2:	f002 fee1 	bl	14378 <__d2b>
   115b6:	9012      	str	r0, [sp, #72]	; 0x48
   115b8:	2800      	cmp	r0, #0
   115ba:	f000 80e4 	beq.w	11786 <_strtod_l+0x646>
   115be:	2101      	movs	r1, #1
   115c0:	4640      	mov	r0, r8
   115c2:	f002 fbc5 	bl	13d50 <__i2b>
   115c6:	4604      	mov	r4, r0
   115c8:	2800      	cmp	r0, #0
   115ca:	f000 80f0 	beq.w	117ae <_strtod_l+0x66e>
   115ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   115d0:	2a00      	cmp	r2, #0
   115d2:	f2c0 80de 	blt.w	11792 <_strtod_l+0x652>
   115d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   115d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   115da:	eb02 0b03 	add.w	fp, r2, r3
   115de:	9b08      	ldr	r3, [sp, #32]
   115e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   115e2:	1ad2      	subs	r2, r2, r3
   115e4:	442a      	add	r2, r5
   115e6:	4b91      	ldr	r3, [pc, #580]	; (1182c <_strtod_l+0x6ec>)
   115e8:	3a01      	subs	r2, #1
   115ea:	429a      	cmp	r2, r3
   115ec:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   115f0:	f280 8098 	bge.w	11724 <_strtod_l+0x5e4>
   115f4:	1a99      	subs	r1, r3, r2
   115f6:	291f      	cmp	r1, #31
   115f8:	eba5 0501 	sub.w	r5, r5, r1
   115fc:	f300 80e3 	bgt.w	117c6 <_strtod_l+0x686>
   11600:	2201      	movs	r2, #1
   11602:	fa02 f301 	lsl.w	r3, r2, r1
   11606:	930d      	str	r3, [sp, #52]	; 0x34
   11608:	2300      	movs	r3, #0
   1160a:	930e      	str	r3, [sp, #56]	; 0x38
   1160c:	442f      	add	r7, r5
   1160e:	9b08      	ldr	r3, [sp, #32]
   11610:	445d      	add	r5, fp
   11612:	45ab      	cmp	fp, r5
   11614:	465a      	mov	r2, fp
   11616:	441f      	add	r7, r3
   11618:	bfa8      	it	ge
   1161a:	462a      	movge	r2, r5
   1161c:	42ba      	cmp	r2, r7
   1161e:	bfa8      	it	ge
   11620:	463a      	movge	r2, r7
   11622:	2a00      	cmp	r2, #0
   11624:	dd03      	ble.n	1162e <_strtod_l+0x4ee>
   11626:	1aad      	subs	r5, r5, r2
   11628:	1abf      	subs	r7, r7, r2
   1162a:	ebab 0b02 	sub.w	fp, fp, r2
   1162e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11630:	2b00      	cmp	r3, #0
   11632:	f300 8088 	bgt.w	11746 <_strtod_l+0x606>
   11636:	2d00      	cmp	r5, #0
   11638:	f300 809c 	bgt.w	11774 <_strtod_l+0x634>
   1163c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1163e:	2b00      	cmp	r3, #0
   11640:	f300 80b7 	bgt.w	117b2 <_strtod_l+0x672>
   11644:	2f00      	cmp	r7, #0
   11646:	f300 80a9 	bgt.w	1179c <_strtod_l+0x65c>
   1164a:	f1bb 0f00 	cmp.w	fp, #0
   1164e:	dd08      	ble.n	11662 <_strtod_l+0x522>
   11650:	4621      	mov	r1, r4
   11652:	465a      	mov	r2, fp
   11654:	4640      	mov	r0, r8
   11656:	f002 fcb7 	bl	13fc8 <__lshift>
   1165a:	4604      	mov	r4, r0
   1165c:	2800      	cmp	r0, #0
   1165e:	f000 80a6 	beq.w	117ae <_strtod_l+0x66e>
   11662:	9912      	ldr	r1, [sp, #72]	; 0x48
   11664:	4632      	mov	r2, r6
   11666:	4640      	mov	r0, r8
   11668:	f002 fd48 	bl	140fc <__mdiff>
   1166c:	4682      	mov	sl, r0
   1166e:	2800      	cmp	r0, #0
   11670:	f000 809d 	beq.w	117ae <_strtod_l+0x66e>
   11674:	2300      	movs	r3, #0
   11676:	68c5      	ldr	r5, [r0, #12]
   11678:	60c3      	str	r3, [r0, #12]
   1167a:	4621      	mov	r1, r4
   1167c:	f002 fd1c 	bl	140b8 <__mcmp>
   11680:	2800      	cmp	r0, #0
   11682:	f2c0 83c7 	blt.w	11e14 <_strtod_l+0xcd4>
   11686:	f000 8361 	beq.w	11d4c <_strtod_l+0xc0c>
   1168a:	4621      	mov	r1, r4
   1168c:	4650      	mov	r0, sl
   1168e:	f002 fedd 	bl	1444c <__ratio>
   11692:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   11696:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1169e:	d846      	bhi.n	1172e <_strtod_l+0x5ee>
   116a0:	2d00      	cmp	r5, #0
   116a2:	f000 80cb 	beq.w	1183c <_strtod_l+0x6fc>
   116a6:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   116aa:	9805      	ldr	r0, [sp, #20]
   116ac:	4b60      	ldr	r3, [pc, #384]	; (11830 <_strtod_l+0x6f0>)
   116ae:	2200      	movs	r2, #0
   116b0:	4960      	ldr	r1, [pc, #384]	; (11834 <_strtod_l+0x6f4>)
   116b2:	f8df c184 	ldr.w	ip, [pc, #388]	; 11838 <_strtod_l+0x6f8>
   116b6:	ea00 0701 	and.w	r7, r0, r1
   116ba:	4567      	cmp	r7, ip
   116bc:	f000 80d4 	beq.w	11868 <_strtod_l+0x728>
   116c0:	9908      	ldr	r1, [sp, #32]
   116c2:	b159      	cbz	r1, 116dc <_strtod_l+0x59c>
   116c4:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   116c8:	d808      	bhi.n	116dc <_strtod_l+0x59c>
   116ca:	eeb4 9bcb 	vcmpe.f64	d9, d11
   116ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116d2:	f240 8156 	bls.w	11982 <_strtod_l+0x842>
   116d6:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   116da:	1bcb      	subs	r3, r1, r7
   116dc:	eeb0 0b48 	vmov.f64	d0, d8
   116e0:	ec43 2b1a 	vmov	d10, r2, r3
   116e4:	f002 fdb4 	bl	14250 <__ulp>
   116e8:	eeaa 8b00 	vfma.f64	d8, d10, d0
   116ec:	ed8d 8b04 	vstr	d8, [sp, #16]
   116f0:	ee18 3a90 	vmov	r3, s17
   116f4:	9a08      	ldr	r2, [sp, #32]
   116f6:	b922      	cbnz	r2, 11702 <_strtod_l+0x5c2>
   116f8:	4a4e      	ldr	r2, [pc, #312]	; (11834 <_strtod_l+0x6f4>)
   116fa:	401a      	ands	r2, r3
   116fc:	4297      	cmp	r7, r2
   116fe:	f000 80e4 	beq.w	118ca <_strtod_l+0x78a>
   11702:	9912      	ldr	r1, [sp, #72]	; 0x48
   11704:	4640      	mov	r0, r8
   11706:	f002 fa1f 	bl	13b48 <_Bfree>
   1170a:	4631      	mov	r1, r6
   1170c:	4640      	mov	r0, r8
   1170e:	f002 fa1b 	bl	13b48 <_Bfree>
   11712:	4621      	mov	r1, r4
   11714:	4640      	mov	r0, r8
   11716:	f002 fa17 	bl	13b48 <_Bfree>
   1171a:	4651      	mov	r1, sl
   1171c:	4640      	mov	r0, r8
   1171e:	f002 fa13 	bl	13b48 <_Bfree>
   11722:	e72d      	b.n	11580 <_strtod_l+0x440>
   11724:	2301      	movs	r3, #1
   11726:	2100      	movs	r1, #0
   11728:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   1172c:	e76e      	b.n	1160c <_strtod_l+0x4cc>
   1172e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11732:	ee20 9b09 	vmul.f64	d9, d0, d9
   11736:	2d00      	cmp	r5, #0
   11738:	d15f      	bne.n	117fa <_strtod_l+0x6ba>
   1173a:	eeb1 7b49 	vneg.f64	d7, d9
   1173e:	9805      	ldr	r0, [sp, #20]
   11740:	ec53 2b17 	vmov	r2, r3, d7
   11744:	e7b4      	b.n	116b0 <_strtod_l+0x570>
   11746:	4621      	mov	r1, r4
   11748:	461a      	mov	r2, r3
   1174a:	4640      	mov	r0, r8
   1174c:	f002 fbdc 	bl	13f08 <__pow5mult>
   11750:	4604      	mov	r4, r0
   11752:	b360      	cbz	r0, 117ae <_strtod_l+0x66e>
   11754:	4601      	mov	r1, r0
   11756:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11758:	4640      	mov	r0, r8
   1175a:	f002 fb27 	bl	13dac <__multiply>
   1175e:	b330      	cbz	r0, 117ae <_strtod_l+0x66e>
   11760:	900f      	str	r0, [sp, #60]	; 0x3c
   11762:	9912      	ldr	r1, [sp, #72]	; 0x48
   11764:	4640      	mov	r0, r8
   11766:	f002 f9ef 	bl	13b48 <_Bfree>
   1176a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1176c:	9212      	str	r2, [sp, #72]	; 0x48
   1176e:	2d00      	cmp	r5, #0
   11770:	f77f af64 	ble.w	1163c <_strtod_l+0x4fc>
   11774:	9912      	ldr	r1, [sp, #72]	; 0x48
   11776:	462a      	mov	r2, r5
   11778:	4640      	mov	r0, r8
   1177a:	f002 fc25 	bl	13fc8 <__lshift>
   1177e:	9012      	str	r0, [sp, #72]	; 0x48
   11780:	2800      	cmp	r0, #0
   11782:	f47f af5b 	bne.w	1163c <_strtod_l+0x4fc>
   11786:	2322      	movs	r3, #34	; 0x22
   11788:	ed9f 8b25 	vldr	d8, [pc, #148]	; 11820 <_strtod_l+0x6e0>
   1178c:	f8c8 3000 	str.w	r3, [r8]
   11790:	e0bc      	b.n	1190c <_strtod_l+0x7cc>
   11792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11794:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11798:	1a9f      	subs	r7, r3, r2
   1179a:	e720      	b.n	115de <_strtod_l+0x49e>
   1179c:	4631      	mov	r1, r6
   1179e:	463a      	mov	r2, r7
   117a0:	4640      	mov	r0, r8
   117a2:	f002 fc11 	bl	13fc8 <__lshift>
   117a6:	4606      	mov	r6, r0
   117a8:	2800      	cmp	r0, #0
   117aa:	f47f af4e 	bne.w	1164a <_strtod_l+0x50a>
   117ae:	9812      	ldr	r0, [sp, #72]	; 0x48
   117b0:	e7e9      	b.n	11786 <_strtod_l+0x646>
   117b2:	4631      	mov	r1, r6
   117b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   117b6:	4640      	mov	r0, r8
   117b8:	f002 fba6 	bl	13f08 <__pow5mult>
   117bc:	4606      	mov	r6, r0
   117be:	2800      	cmp	r0, #0
   117c0:	f47f af40 	bne.w	11644 <_strtod_l+0x504>
   117c4:	e7f3      	b.n	117ae <_strtod_l+0x66e>
   117c6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   117ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   117ce:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   117d2:	2101      	movs	r1, #1
   117d4:	32e2      	adds	r2, #226	; 0xe2
   117d6:	fa01 f302 	lsl.w	r3, r1, r2
   117da:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   117de:	e715      	b.n	1160c <_strtod_l+0x4cc>
   117e0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   117e4:	f04f 0b00 	mov.w	fp, #0
   117e8:	e5c0      	b.n	1136c <_strtod_l+0x22c>
   117ea:	2301      	movs	r3, #1
   117ec:	930a      	str	r3, [sp, #40]	; 0x28
   117ee:	f10a 0302 	add.w	r3, sl, #2
   117f2:	9311      	str	r3, [sp, #68]	; 0x44
   117f4:	f89a 4002 	ldrb.w	r4, [sl, #2]
   117f8:	e602      	b.n	11400 <_strtod_l+0x2c0>
   117fa:	eeb0 7b49 	vmov.f64	d7, d9
   117fe:	e79e      	b.n	1173e <_strtod_l+0x5fe>
   11800:	94a03595 	.word	0x94a03595
   11804:	3fcfffff 	.word	0x3fcfffff
   11808:	94a03595 	.word	0x94a03595
   1180c:	3fdfffff 	.word	0x3fdfffff
   11810:	35afe535 	.word	0x35afe535
   11814:	3fe00000 	.word	0x3fe00000
   11818:	ffc00000 	.word	0xffc00000
   1181c:	41dfffff 	.word	0x41dfffff
   11820:	00000000 	.word	0x00000000
   11824:	7ff00000 	.word	0x7ff00000
   11828:	20000328 	.word	0x20000328
   1182c:	fffffc02 	.word	0xfffffc02
   11830:	3ff00000 	.word	0x3ff00000
   11834:	7ff00000 	.word	0x7ff00000
   11838:	7fe00000 	.word	0x7fe00000
   1183c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11840:	2900      	cmp	r1, #0
   11842:	f000 8085 	beq.w	11950 <_strtod_l+0x810>
   11846:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1184a:	2901      	cmp	r1, #1
   1184c:	f000 81d8 	beq.w	11c00 <_strtod_l+0xac0>
   11850:	4610      	mov	r0, r2
   11852:	4bb7      	ldr	r3, [pc, #732]	; (11b30 <_strtod_l+0x9f0>)
   11854:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   11858:	2200      	movs	r2, #0
   1185a:	e729      	b.n	116b0 <_strtod_l+0x570>
   1185c:	2c65      	cmp	r4, #101	; 0x65
   1185e:	f04f 0c01 	mov.w	ip, #1
   11862:	f43f adbe 	beq.w	113e2 <_strtod_l+0x2a2>
   11866:	e54c      	b.n	11302 <_strtod_l+0x1c2>
   11868:	ec43 2b1a 	vmov	d10, r2, r3
   1186c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   11870:	9305      	str	r3, [sp, #20]
   11872:	ed9d fb04 	vldr	d15, [sp, #16]
   11876:	eeb0 0b4f 	vmov.f64	d0, d15
   1187a:	f002 fce9 	bl	14250 <__ulp>
   1187e:	49ad      	ldr	r1, [pc, #692]	; (11b34 <_strtod_l+0x9f4>)
   11880:	eeaa fb00 	vfma.f64	d15, d10, d0
   11884:	ee1f 3a90 	vmov	r3, s31
   11888:	4aab      	ldr	r2, [pc, #684]	; (11b38 <_strtod_l+0x9f8>)
   1188a:	4019      	ands	r1, r3
   1188c:	4291      	cmp	r1, r2
   1188e:	ed8d fb04 	vstr	d15, [sp, #16]
   11892:	d972      	bls.n	1197a <_strtod_l+0x83a>
   11894:	4ba9      	ldr	r3, [pc, #676]	; (11b3c <_strtod_l+0x9fc>)
   11896:	ee18 2a90 	vmov	r2, s17
   1189a:	429a      	cmp	r2, r3
   1189c:	d103      	bne.n	118a6 <_strtod_l+0x766>
   1189e:	ee18 3a10 	vmov	r3, s16
   118a2:	3301      	adds	r3, #1
   118a4:	d083      	beq.n	117ae <_strtod_l+0x66e>
   118a6:	4aa5      	ldr	r2, [pc, #660]	; (11b3c <_strtod_l+0x9fc>)
   118a8:	f04f 33ff 	mov.w	r3, #4294967295
   118ac:	e9cd 3204 	strd	r3, r2, [sp, #16]
   118b0:	e727      	b.n	11702 <_strtod_l+0x5c2>
   118b2:	2300      	movs	r3, #0
   118b4:	930a      	str	r3, [sp, #40]	; 0x28
   118b6:	e79a      	b.n	117ee <_strtod_l+0x6ae>
   118b8:	2c65      	cmp	r4, #101	; 0x65
   118ba:	f000 80d0 	beq.w	11a5e <_strtod_l+0x91e>
   118be:	2c45      	cmp	r4, #69	; 0x45
   118c0:	f000 80cd 	beq.w	11a5e <_strtod_l+0x91e>
   118c4:	f04f 0c01 	mov.w	ip, #1
   118c8:	e5d1      	b.n	1146e <_strtod_l+0x32e>
   118ca:	ec51 0b19 	vmov	r0, r1, d9
   118ce:	930d      	str	r3, [sp, #52]	; 0x34
   118d0:	f009 fcc8 	bl	1b264 <__aeabi_d2lz>
   118d4:	f009 fc98 	bl	1b208 <__aeabi_l2d>
   118d8:	9b04      	ldr	r3, [sp, #16]
   118da:	431d      	orrs	r5, r3
   118dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   118de:	ec41 0b17 	vmov	d7, r0, r1
   118e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   118e6:	431d      	orrs	r5, r3
   118e8:	ee39 9b47 	vsub.f64	d9, d9, d7
   118ec:	f000 80a0 	beq.w	11a30 <_strtod_l+0x8f0>
   118f0:	eeb4 9bcc 	vcmpe.f64	d9, d12
   118f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   118f8:	d405      	bmi.n	11906 <_strtod_l+0x7c6>
   118fa:	eeb4 9bcd 	vcmpe.f64	d9, d13
   118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11902:	f77f aefe 	ble.w	11702 <_strtod_l+0x5c2>
   11906:	ed9d 8b04 	vldr	d8, [sp, #16]
   1190a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1190c:	4601      	mov	r1, r0
   1190e:	4640      	mov	r0, r8
   11910:	f002 f91a 	bl	13b48 <_Bfree>
   11914:	4631      	mov	r1, r6
   11916:	4640      	mov	r0, r8
   11918:	f002 f916 	bl	13b48 <_Bfree>
   1191c:	4621      	mov	r1, r4
   1191e:	4640      	mov	r0, r8
   11920:	f002 f912 	bl	13b48 <_Bfree>
   11924:	4649      	mov	r1, r9
   11926:	4640      	mov	r0, r8
   11928:	f002 f90e 	bl	13b48 <_Bfree>
   1192c:	4651      	mov	r1, sl
   1192e:	4640      	mov	r0, r8
   11930:	f002 f90a 	bl	13b48 <_Bfree>
   11934:	e5c1      	b.n	114ba <_strtod_l+0x37a>
   11936:	2201      	movs	r2, #1
   11938:	9209      	str	r2, [sp, #36]	; 0x24
   1193a:	1c79      	adds	r1, r7, #1
   1193c:	9111      	str	r1, [sp, #68]	; 0x44
   1193e:	787a      	ldrb	r2, [r7, #1]
   11940:	2a00      	cmp	r2, #0
   11942:	f43f ace5 	beq.w	11310 <_strtod_l+0x1d0>
   11946:	460f      	mov	r7, r1
   11948:	e470      	b.n	1122c <_strtod_l+0xec>
   1194a:	2200      	movs	r2, #0
   1194c:	9209      	str	r2, [sp, #36]	; 0x24
   1194e:	e7f4      	b.n	1193a <_strtod_l+0x7fa>
   11950:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11954:	4610      	mov	r0, r2
   11956:	2b00      	cmp	r3, #0
   11958:	f47f af7b 	bne.w	11852 <_strtod_l+0x712>
   1195c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   11960:	eeb4 0bc7 	vcmpe.f64	d0, d7
   11964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11968:	f100 81d3 	bmi.w	11d12 <_strtod_l+0xbd2>
   1196c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11970:	ee20 9b09 	vmul.f64	d9, d0, d9
   11974:	eeb1 7b49 	vneg.f64	d7, d9
   11978:	e6e2      	b.n	11740 <_strtod_l+0x600>
   1197a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   1197e:	9305      	str	r3, [sp, #20]
   11980:	e6b8      	b.n	116f4 <_strtod_l+0x5b4>
   11982:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   11986:	ee19 3a10 	vmov	r3, s18
   1198a:	2b01      	cmp	r3, #1
   1198c:	bf38      	it	cc
   1198e:	2301      	movcc	r3, #1
   11990:	ee09 3a10 	vmov	s18, r3
   11994:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   11998:	2d00      	cmp	r5, #0
   1199a:	f040 813e 	bne.w	11c1a <_strtod_l+0xada>
   1199e:	eeb1 7b49 	vneg.f64	d7, d9
   119a2:	ec53 2b17 	vmov	r2, r3, d7
   119a6:	e696      	b.n	116d6 <_strtod_l+0x596>
   119a8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   119ac:	f300 80b2 	bgt.w	11b14 <_strtod_l+0x9d4>
   119b0:	2a10      	cmp	r2, #16
   119b2:	ea4f 1322 	mov.w	r3, r2, asr #4
   119b6:	f340 8286 	ble.w	11ec6 <_strtod_l+0xd86>
   119ba:	4c61      	ldr	r4, [pc, #388]	; (11b40 <_strtod_l+0xa00>)
   119bc:	ed9d 7b04 	vldr	d7, [sp, #16]
   119c0:	2000      	movs	r0, #0
   119c2:	4622      	mov	r2, r4
   119c4:	4601      	mov	r1, r0
   119c6:	f013 0f01 	tst.w	r3, #1
   119ca:	f101 0101 	add.w	r1, r1, #1
   119ce:	ea4f 0363 	mov.w	r3, r3, asr #1
   119d2:	d004      	beq.n	119de <_strtod_l+0x89e>
   119d4:	ed92 6b00 	vldr	d6, [r2]
   119d8:	2001      	movs	r0, #1
   119da:	ee27 7b06 	vmul.f64	d7, d7, d6
   119de:	2b01      	cmp	r3, #1
   119e0:	f102 0208 	add.w	r2, r2, #8
   119e4:	d1ef      	bne.n	119c6 <_strtod_l+0x886>
   119e6:	b108      	cbz	r0, 119ec <_strtod_l+0x8ac>
   119e8:	ed8d 7b04 	vstr	d7, [sp, #16]
   119ec:	9b05      	ldr	r3, [sp, #20]
   119ee:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   119f2:	9305      	str	r3, [sp, #20]
   119f4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   119f8:	ed9d 6b04 	vldr	d6, [sp, #16]
   119fc:	ed94 7b00 	vldr	d7, [r4]
   11a00:	4b4c      	ldr	r3, [pc, #304]	; (11b34 <_strtod_l+0x9f4>)
   11a02:	ee27 7b06 	vmul.f64	d7, d7, d6
   11a06:	ee17 2a90 	vmov	r2, s15
   11a0a:	494e      	ldr	r1, [pc, #312]	; (11b44 <_strtod_l+0xa04>)
   11a0c:	4013      	ands	r3, r2
   11a0e:	428b      	cmp	r3, r1
   11a10:	ed8d 7b04 	vstr	d7, [sp, #16]
   11a14:	d87e      	bhi.n	11b14 <_strtod_l+0x9d4>
   11a16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   11a1a:	428b      	cmp	r3, r1
   11a1c:	f240 81d6 	bls.w	11dcc <_strtod_l+0xc8c>
   11a20:	4c46      	ldr	r4, [pc, #280]	; (11b3c <_strtod_l+0x9fc>)
   11a22:	f04f 33ff 	mov.w	r3, #4294967295
   11a26:	e9cd 3404 	strd	r3, r4, [sp, #16]
   11a2a:	2300      	movs	r3, #0
   11a2c:	9308      	str	r3, [sp, #32]
   11a2e:	e585      	b.n	1153c <_strtod_l+0x3fc>
   11a30:	eeb4 9bce 	vcmpe.f64	d9, d14
   11a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11a38:	f57f ae63 	bpl.w	11702 <_strtod_l+0x5c2>
   11a3c:	e763      	b.n	11906 <_strtod_l+0x7c6>
   11a3e:	3216      	adds	r2, #22
   11a40:	f6ff ad62 	blt.w	11508 <_strtod_l+0x3c8>
   11a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11a46:	eba3 0b0b 	sub.w	fp, r3, fp
   11a4a:	4b3f      	ldr	r3, [pc, #252]	; (11b48 <_strtod_l+0xa08>)
   11a4c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   11a50:	ed93 7b00 	vldr	d7, [r3]
   11a54:	ed9d 6b04 	vldr	d6, [sp, #16]
   11a58:	ee86 8b07 	vdiv.f64	d8, d6, d7
   11a5c:	e52d      	b.n	114ba <_strtod_l+0x37a>
   11a5e:	f04f 0e00 	mov.w	lr, #0
   11a62:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11a66:	f04f 0c01 	mov.w	ip, #1
   11a6a:	e44e      	b.n	1130a <_strtod_l+0x1ca>
   11a6c:	2c6e      	cmp	r4, #110	; 0x6e
   11a6e:	f43f ad10 	beq.w	11492 <_strtod_l+0x352>
   11a72:	e44d      	b.n	11310 <_strtod_l+0x1d0>
   11a74:	f43f ad60 	beq.w	11538 <_strtod_l+0x3f8>
   11a78:	425b      	negs	r3, r3
   11a7a:	f013 010f 	ands.w	r1, r3, #15
   11a7e:	d00a      	beq.n	11a96 <_strtod_l+0x956>
   11a80:	4a31      	ldr	r2, [pc, #196]	; (11b48 <_strtod_l+0xa08>)
   11a82:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11a86:	ed9d 6b04 	vldr	d6, [sp, #16]
   11a8a:	ed92 7b00 	vldr	d7, [r2]
   11a8e:	ee86 7b07 	vdiv.f64	d7, d6, d7
   11a92:	ed8d 7b04 	vstr	d7, [sp, #16]
   11a96:	111b      	asrs	r3, r3, #4
   11a98:	f43f ad4e 	beq.w	11538 <_strtod_l+0x3f8>
   11a9c:	2b1f      	cmp	r3, #31
   11a9e:	dc33      	bgt.n	11b08 <_strtod_l+0x9c8>
   11aa0:	f013 0210 	ands.w	r2, r3, #16
   11aa4:	bf18      	it	ne
   11aa6:	226a      	movne	r2, #106	; 0x6a
   11aa8:	ed9d 7b04 	vldr	d7, [sp, #16]
   11aac:	9208      	str	r2, [sp, #32]
   11aae:	4a27      	ldr	r2, [pc, #156]	; (11b4c <_strtod_l+0xa0c>)
   11ab0:	2100      	movs	r1, #0
   11ab2:	07d8      	lsls	r0, r3, #31
   11ab4:	d504      	bpl.n	11ac0 <_strtod_l+0x980>
   11ab6:	ed92 6b00 	vldr	d6, [r2]
   11aba:	2101      	movs	r1, #1
   11abc:	ee27 7b06 	vmul.f64	d7, d7, d6
   11ac0:	105b      	asrs	r3, r3, #1
   11ac2:	f102 0208 	add.w	r2, r2, #8
   11ac6:	d1f4      	bne.n	11ab2 <_strtod_l+0x972>
   11ac8:	b109      	cbz	r1, 11ace <_strtod_l+0x98e>
   11aca:	ed8d 7b04 	vstr	d7, [sp, #16]
   11ace:	9b08      	ldr	r3, [sp, #32]
   11ad0:	b193      	cbz	r3, 11af8 <_strtod_l+0x9b8>
   11ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11ad6:	f3c1 520a 	ubfx	r2, r1, #20, #11
   11ada:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   11ade:	2b00      	cmp	r3, #0
   11ae0:	dd0a      	ble.n	11af8 <_strtod_l+0x9b8>
   11ae2:	2b1f      	cmp	r3, #31
   11ae4:	f340 822f 	ble.w	11f46 <_strtod_l+0xe06>
   11ae8:	2000      	movs	r0, #0
   11aea:	2b34      	cmp	r3, #52	; 0x34
   11aec:	9004      	str	r0, [sp, #16]
   11aee:	f340 8240 	ble.w	11f72 <_strtod_l+0xe32>
   11af2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   11af6:	9305      	str	r3, [sp, #20]
   11af8:	ed9d 7b04 	vldr	d7, [sp, #16]
   11afc:	eeb5 7b40 	vcmp.f64	d7, #0.0
   11b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11b04:	f47f ad1a 	bne.w	1153c <_strtod_l+0x3fc>
   11b08:	2322      	movs	r3, #34	; 0x22
   11b0a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 11b20 <_strtod_l+0x9e0>
   11b0e:	f8c8 3000 	str.w	r3, [r8]
   11b12:	e4d2      	b.n	114ba <_strtod_l+0x37a>
   11b14:	2322      	movs	r3, #34	; 0x22
   11b16:	ed9f 8b04 	vldr	d8, [pc, #16]	; 11b28 <_strtod_l+0x9e8>
   11b1a:	f8c8 3000 	str.w	r3, [r8]
   11b1e:	e4cc      	b.n	114ba <_strtod_l+0x37a>
	...
   11b2c:	7ff00000 	.word	0x7ff00000
   11b30:	bff00000 	.word	0xbff00000
   11b34:	7ff00000 	.word	0x7ff00000
   11b38:	7c9fffff 	.word	0x7c9fffff
   11b3c:	7fefffff 	.word	0x7fefffff
   11b40:	20000300 	.word	0x20000300
   11b44:	7ca00000 	.word	0x7ca00000
   11b48:	20000328 	.word	0x20000328
   11b4c:	200003f0 	.word	0x200003f0
   11b50:	9302      	str	r3, [sp, #8]
   11b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11b54:	9301      	str	r3, [sp, #4]
   11b56:	ab12      	add	r3, sp, #72	; 0x48
   11b58:	9300      	str	r3, [sp, #0]
   11b5a:	4aa7      	ldr	r2, [pc, #668]	; (11df8 <_strtod_l+0xcb8>)
   11b5c:	ab13      	add	r3, sp, #76	; 0x4c
   11b5e:	a911      	add	r1, sp, #68	; 0x44
   11b60:	4640      	mov	r0, r8
   11b62:	f001 fbf7 	bl	13354 <__gethex>
   11b66:	f010 050f 	ands.w	r5, r0, #15
   11b6a:	4604      	mov	r4, r0
   11b6c:	f43f aca3 	beq.w	114b6 <_strtod_l+0x376>
   11b70:	2d06      	cmp	r5, #6
   11b72:	d174      	bne.n	11c5e <_strtod_l+0xb1e>
   11b74:	9b07      	ldr	r3, [sp, #28]
   11b76:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 11de0 <_strtod_l+0xca0>
   11b7a:	3701      	adds	r7, #1
   11b7c:	2b00      	cmp	r3, #0
   11b7e:	f43f abce 	beq.w	1131e <_strtod_l+0x1de>
   11b82:	601f      	str	r7, [r3, #0]
   11b84:	f7ff bbcb 	b.w	1131e <_strtod_l+0x1de>
   11b88:	ed9d 8b04 	vldr	d8, [sp, #16]
   11b8c:	e495      	b.n	114ba <_strtod_l+0x37a>
   11b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11b90:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   11b94:	4403      	add	r3, r0
   11b96:	930b      	str	r3, [sp, #44]	; 0x2c
   11b98:	2801      	cmp	r0, #1
   11b9a:	f105 0301 	add.w	r3, r5, #1
   11b9e:	461a      	mov	r2, r3
   11ba0:	d014      	beq.n	11bcc <_strtod_l+0xa8c>
   11ba2:	4428      	add	r0, r5
   11ba4:	1e44      	subs	r4, r0, #1
   11ba6:	e003      	b.n	11bb0 <_strtod_l+0xa70>
   11ba8:	0046      	lsls	r6, r0, #1
   11baa:	429c      	cmp	r4, r3
   11bac:	d00d      	beq.n	11bca <_strtod_l+0xa8a>
   11bae:	3301      	adds	r3, #1
   11bb0:	462a      	mov	r2, r5
   11bb2:	2a08      	cmp	r2, #8
   11bb4:	461d      	mov	r5, r3
   11bb6:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   11bba:	d9f5      	bls.n	11ba8 <_strtod_l+0xa68>
   11bbc:	2b10      	cmp	r3, #16
   11bbe:	bfdc      	itt	le
   11bc0:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11bc4:	ea4f 0949 	movle.w	r9, r9, lsl #1
   11bc8:	e7ef      	b.n	11baa <_strtod_l+0xa6a>
   11bca:	3202      	adds	r2, #2
   11bcc:	2d08      	cmp	r5, #8
   11bce:	dc3c      	bgt.n	11c4a <_strtod_l+0xb0a>
   11bd0:	4615      	mov	r5, r2
   11bd2:	f7ff bb79 	b.w	112c8 <_strtod_l+0x188>
   11bd6:	4989      	ldr	r1, [pc, #548]	; (11dfc <_strtod_l+0xcbc>)
   11bd8:	2201      	movs	r2, #1
   11bda:	4638      	mov	r0, r7
   11bdc:	f000 fe14 	bl	12808 <strncmp>
   11be0:	2800      	cmp	r0, #0
   11be2:	f000 8082 	beq.w	11cea <_strtod_l+0xbaa>
   11be6:	f04f 0e00 	mov.w	lr, #0
   11bea:	46f1      	mov	r9, lr
   11bec:	4676      	mov	r6, lr
   11bee:	4675      	mov	r5, lr
   11bf0:	f7ff bbb5 	b.w	1135e <_strtod_l+0x21e>
   11bf4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   11bf8:	459b      	cmp	fp, r3
   11bfa:	bfa8      	it	ge
   11bfc:	469b      	movge	fp, r3
   11bfe:	e42f      	b.n	11460 <_strtod_l+0x320>
   11c00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11c04:	4618      	mov	r0, r3
   11c06:	2b00      	cmp	r3, #0
   11c08:	f47f ae23 	bne.w	11852 <_strtod_l+0x712>
   11c0c:	2322      	movs	r3, #34	; 0x22
   11c0e:	ed9f 8b74 	vldr	d8, [pc, #464]	; 11de0 <_strtod_l+0xca0>
   11c12:	9812      	ldr	r0, [sp, #72]	; 0x48
   11c14:	f8c8 3000 	str.w	r3, [r8]
   11c18:	e678      	b.n	1190c <_strtod_l+0x7cc>
   11c1a:	eeb0 7b49 	vmov.f64	d7, d9
   11c1e:	e6c0      	b.n	119a2 <_strtod_l+0x862>
   11c20:	4977      	ldr	r1, [pc, #476]	; (11e00 <_strtod_l+0xcc0>)
   11c22:	a811      	add	r0, sp, #68	; 0x44
   11c24:	f001 fe60 	bl	138e8 <__match>
   11c28:	2800      	cmp	r0, #0
   11c2a:	f43f ab71 	beq.w	11310 <_strtod_l+0x1d0>
   11c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11c30:	4974      	ldr	r1, [pc, #464]	; (11e04 <_strtod_l+0xcc4>)
   11c32:	3b01      	subs	r3, #1
   11c34:	a811      	add	r0, sp, #68	; 0x44
   11c36:	9311      	str	r3, [sp, #68]	; 0x44
   11c38:	f001 fe56 	bl	138e8 <__match>
   11c3c:	b910      	cbnz	r0, 11c44 <_strtod_l+0xb04>
   11c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11c40:	3301      	adds	r3, #1
   11c42:	9311      	str	r3, [sp, #68]	; 0x44
   11c44:	ed9f 8b68 	vldr	d8, [pc, #416]	; 11de8 <_strtod_l+0xca8>
   11c48:	e437      	b.n	114ba <_strtod_l+0x37a>
   11c4a:	2a10      	cmp	r2, #16
   11c4c:	bfdc      	itt	le
   11c4e:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   11c52:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   11c56:	4615      	mov	r5, r2
   11c58:	2000      	movs	r0, #0
   11c5a:	f7ff bb3a 	b.w	112d2 <_strtod_l+0x192>
   11c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11c60:	b13a      	cbz	r2, 11c72 <_strtod_l+0xb32>
   11c62:	2135      	movs	r1, #53	; 0x35
   11c64:	a814      	add	r0, sp, #80	; 0x50
   11c66:	f002 fc23 	bl	144b0 <__copybits>
   11c6a:	9912      	ldr	r1, [sp, #72]	; 0x48
   11c6c:	4640      	mov	r0, r8
   11c6e:	f001 ff6b 	bl	13b48 <_Bfree>
   11c72:	3d01      	subs	r5, #1
   11c74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11c76:	2d04      	cmp	r5, #4
   11c78:	f200 818f 	bhi.w	11f9a <_strtod_l+0xe5a>
   11c7c:	e8df f005 	tbb	[pc, r5]
   11c80:	1f2a2d03 	.word	0x1f2a2d03
   11c84:	03          	.byte	0x03
   11c85:	00          	.byte	0x00
   11c86:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11c88:	9204      	str	r2, [sp, #16]
   11c8a:	f203 4233 	addw	r2, r3, #1075	; 0x433
   11c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11c90:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11c94:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   11c98:	9305      	str	r3, [sp, #20]
   11c9a:	05e5      	lsls	r5, r4, #23
   11c9c:	d502      	bpl.n	11ca4 <_strtod_l+0xb64>
   11c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11ca2:	9305      	str	r3, [sp, #20]
   11ca4:	4a58      	ldr	r2, [pc, #352]	; (11e08 <_strtod_l+0xcc8>)
   11ca6:	401a      	ands	r2, r3
   11ca8:	ed9d 8b04 	vldr	d8, [sp, #16]
   11cac:	2a00      	cmp	r2, #0
   11cae:	f47f ac04 	bne.w	114ba <_strtod_l+0x37a>
   11cb2:	f000 fe8d 	bl	129d0 <__errno>
   11cb6:	2322      	movs	r3, #34	; 0x22
   11cb8:	6003      	str	r3, [r0, #0]
   11cba:	f7ff bbfe 	b.w	114ba <_strtod_l+0x37a>
   11cbe:	f04f 33ff 	mov.w	r3, #4294967295
   11cc2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   11cc6:	e9cd 3604 	strd	r3, r6, [sp, #16]
   11cca:	05e3      	lsls	r3, r4, #23
   11ccc:	f57f af5c 	bpl.w	11b88 <_strtod_l+0xa48>
   11cd0:	9b05      	ldr	r3, [sp, #20]
   11cd2:	e7e4      	b.n	11c9e <_strtod_l+0xb5e>
   11cd4:	4b4c      	ldr	r3, [pc, #304]	; (11e08 <_strtod_l+0xcc8>)
   11cd6:	9305      	str	r3, [sp, #20]
   11cd8:	e7f7      	b.n	11cca <_strtod_l+0xb8a>
   11cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11cdc:	9304      	str	r3, [sp, #16]
   11cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11ce0:	9305      	str	r3, [sp, #20]
   11ce2:	e7da      	b.n	11c9a <_strtod_l+0xb5a>
   11ce4:	2000      	movs	r0, #0
   11ce6:	f7ff bae1 	b.w	112ac <_strtod_l+0x16c>
   11cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11cec:	461a      	mov	r2, r3
   11cee:	3301      	adds	r3, #1
   11cf0:	9311      	str	r3, [sp, #68]	; 0x44
   11cf2:	7854      	ldrb	r4, [r2, #1]
   11cf4:	4606      	mov	r6, r0
   11cf6:	4681      	mov	r9, r0
   11cf8:	f7ff bacd 	b.w	11296 <_strtod_l+0x156>
   11cfc:	4b43      	ldr	r3, [pc, #268]	; (11e0c <_strtod_l+0xccc>)
   11cfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11d02:	ed93 8b00 	vldr	d8, [r3]
   11d06:	ed9d 7b04 	vldr	d7, [sp, #16]
   11d0a:	ee28 8b07 	vmul.f64	d8, d8, d7
   11d0e:	f7ff bbd4 	b.w	114ba <_strtod_l+0x37a>
   11d12:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   11d16:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11d1a:	e511      	b.n	11740 <_strtod_l+0x600>
   11d1c:	46ae      	mov	lr, r5
   11d1e:	900b      	str	r0, [sp, #44]	; 0x2c
   11d20:	f7ff badc 	b.w	112dc <_strtod_l+0x19c>
   11d24:	4b39      	ldr	r3, [pc, #228]	; (11e0c <_strtod_l+0xccc>)
   11d26:	f1c5 050f 	rsb	r5, r5, #15
   11d2a:	1b4a      	subs	r2, r1, r5
   11d2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11d34:	ed95 8b00 	vldr	d8, [r5]
   11d38:	ed93 7b00 	vldr	d7, [r3]
   11d3c:	ed9d 6b04 	vldr	d6, [sp, #16]
   11d40:	ee28 8b06 	vmul.f64	d8, d8, d6
   11d44:	ee28 8b07 	vmul.f64	d8, d8, d7
   11d48:	f7ff bbb7 	b.w	114ba <_strtod_l+0x37a>
   11d4c:	2d00      	cmp	r5, #0
   11d4e:	f000 8095 	beq.w	11e7c <_strtod_l+0xd3c>
   11d52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   11d56:	4b2e      	ldr	r3, [pc, #184]	; (11e10 <_strtod_l+0xcd0>)
   11d58:	f3cc 0113 	ubfx	r1, ip, #0, #20
   11d5c:	4299      	cmp	r1, r3
   11d5e:	4662      	mov	r2, ip
   11d60:	f000 80d2 	beq.w	11f08 <_strtod_l+0xdc8>
   11d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11d66:	2b00      	cmp	r3, #0
   11d68:	f000 80a5 	beq.w	11eb6 <_strtod_l+0xd76>
   11d6c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11d70:	4213      	tst	r3, r2
   11d72:	4617      	mov	r7, r2
   11d74:	d01a      	beq.n	11dac <_strtod_l+0xc6c>
   11d76:	eeb0 0b48 	vmov.f64	d0, d8
   11d7a:	2d00      	cmp	r5, #0
   11d7c:	f000 80a6 	beq.w	11ecc <_strtod_l+0xd8c>
   11d80:	f002 fa66 	bl	14250 <__ulp>
   11d84:	9b08      	ldr	r3, [sp, #32]
   11d86:	b17b      	cbz	r3, 11da8 <_strtod_l+0xc68>
   11d88:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11d8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11d90:	2b00      	cmp	r3, #0
   11d92:	dd09      	ble.n	11da8 <_strtod_l+0xc68>
   11d94:	051b      	lsls	r3, r3, #20
   11d96:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11d9a:	2000      	movs	r0, #0
   11d9c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11da0:	ec41 0b17 	vmov	d7, r0, r1
   11da4:	ee20 0b07 	vmul.f64	d0, d0, d7
   11da8:	ee38 8b00 	vadd.f64	d8, d8, d0
   11dac:	9b08      	ldr	r3, [sp, #32]
   11dae:	b15b      	cbz	r3, 11dc8 <_strtod_l+0xc88>
   11db0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 11df0 <_strtod_l+0xcb0>
   11db4:	4b14      	ldr	r3, [pc, #80]	; (11e08 <_strtod_l+0xcc8>)
   11db6:	ee28 8b07 	vmul.f64	d8, d8, d7
   11dba:	ee18 2a90 	vmov	r2, s17
   11dbe:	4013      	ands	r3, r2
   11dc0:	b913      	cbnz	r3, 11dc8 <_strtod_l+0xc88>
   11dc2:	2322      	movs	r3, #34	; 0x22
   11dc4:	f8c8 3000 	str.w	r3, [r8]
   11dc8:	9812      	ldr	r0, [sp, #72]	; 0x48
   11dca:	e59f      	b.n	1190c <_strtod_l+0x7cc>
   11dcc:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   11dd0:	9305      	str	r3, [sp, #20]
   11dd2:	2300      	movs	r3, #0
   11dd4:	9308      	str	r3, [sp, #32]
   11dd6:	f7ff bbb1 	b.w	1153c <_strtod_l+0x3fc>
   11dda:	bf00      	nop
   11ddc:	f3af 8000 	nop.w
	...
   11dec:	7ff00000 	.word	0x7ff00000
   11df0:	00000000 	.word	0x00000000
   11df4:	39500000 	.word	0x39500000
   11df8:	20007ff4 	.word	0x20007ff4
   11dfc:	20008320 	.word	0x20008320
   11e00:	200011f8 	.word	0x200011f8
   11e04:	200011fc 	.word	0x200011fc
   11e08:	7ff00000 	.word	0x7ff00000
   11e0c:	20000328 	.word	0x20000328
   11e10:	000fffff 	.word	0x000fffff
   11e14:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11e18:	430d      	orrs	r5, r1
   11e1a:	d1c7      	bne.n	11dac <_strtod_l+0xc6c>
   11e1c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11e20:	4617      	mov	r7, r2
   11e22:	2b00      	cmp	r3, #0
   11e24:	d1c2      	bne.n	11dac <_strtod_l+0xc6c>
   11e26:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11e2a:	0d1b      	lsrs	r3, r3, #20
   11e2c:	051b      	lsls	r3, r3, #20
   11e2e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11e32:	d9bb      	bls.n	11dac <_strtod_l+0xc6c>
   11e34:	f8da 3014 	ldr.w	r3, [sl, #20]
   11e38:	b91b      	cbnz	r3, 11e42 <_strtod_l+0xd02>
   11e3a:	f8da 3010 	ldr.w	r3, [sl, #16]
   11e3e:	2b01      	cmp	r3, #1
   11e40:	ddb4      	ble.n	11dac <_strtod_l+0xc6c>
   11e42:	4651      	mov	r1, sl
   11e44:	2201      	movs	r2, #1
   11e46:	4640      	mov	r0, r8
   11e48:	f002 f8be 	bl	13fc8 <__lshift>
   11e4c:	4621      	mov	r1, r4
   11e4e:	4682      	mov	sl, r0
   11e50:	f002 f932 	bl	140b8 <__mcmp>
   11e54:	2800      	cmp	r0, #0
   11e56:	dda9      	ble.n	11dac <_strtod_l+0xc6c>
   11e58:	9b08      	ldr	r3, [sp, #32]
   11e5a:	2b00      	cmp	r3, #0
   11e5c:	d17e      	bne.n	11f5c <_strtod_l+0xe1c>
   11e5e:	4b50      	ldr	r3, [pc, #320]	; (11fa0 <_strtod_l+0xe60>)
   11e60:	403b      	ands	r3, r7
   11e62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11e66:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   11e6a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   11e6e:	9305      	str	r3, [sp, #20]
   11e70:	f04f 33ff 	mov.w	r3, #4294967295
   11e74:	9304      	str	r3, [sp, #16]
   11e76:	ed9d 8b04 	vldr	d8, [sp, #16]
   11e7a:	e797      	b.n	11dac <_strtod_l+0xc6c>
   11e7c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11e80:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11e84:	430b      	orrs	r3, r1
   11e86:	4617      	mov	r7, r2
   11e88:	f47f af6c 	bne.w	11d64 <_strtod_l+0xc24>
   11e8c:	e7e4      	b.n	11e58 <_strtod_l+0xd18>
   11e8e:	4945      	ldr	r1, [pc, #276]	; (11fa4 <_strtod_l+0xe64>)
   11e90:	a811      	add	r0, sp, #68	; 0x44
   11e92:	aa14      	add	r2, sp, #80	; 0x50
   11e94:	f001 fd44 	bl	13920 <__hexnan>
   11e98:	2805      	cmp	r0, #5
   11e9a:	f47f ab06 	bne.w	114aa <_strtod_l+0x36a>
   11e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11ea0:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   11ea4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   11ea8:	9305      	str	r3, [sp, #20]
   11eaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11eac:	9304      	str	r3, [sp, #16]
   11eae:	ed9d 8b04 	vldr	d8, [sp, #16]
   11eb2:	f7ff bb02 	b.w	114ba <_strtod_l+0x37a>
   11eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11ebc:	4203      	tst	r3, r0
   11ebe:	f43f af75 	beq.w	11dac <_strtod_l+0xc6c>
   11ec2:	460f      	mov	r7, r1
   11ec4:	e757      	b.n	11d76 <_strtod_l+0xc36>
   11ec6:	4c38      	ldr	r4, [pc, #224]	; (11fa8 <_strtod_l+0xe68>)
   11ec8:	2100      	movs	r1, #0
   11eca:	e58f      	b.n	119ec <_strtod_l+0x8ac>
   11ecc:	f002 f9c0 	bl	14250 <__ulp>
   11ed0:	9b08      	ldr	r3, [sp, #32]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d055      	beq.n	11f82 <_strtod_l+0xe42>
   11ed6:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11eda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11ede:	2b00      	cmp	r3, #0
   11ee0:	dd09      	ble.n	11ef6 <_strtod_l+0xdb6>
   11ee2:	051b      	lsls	r3, r3, #20
   11ee4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11ee8:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11eec:	4628      	mov	r0, r5
   11eee:	ec41 0b17 	vmov	d7, r0, r1
   11ef2:	ee20 0b07 	vmul.f64	d0, d0, d7
   11ef6:	ee38 8b40 	vsub.f64	d8, d8, d0
   11efa:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f02:	f47f af55 	bne.w	11db0 <_strtod_l+0xc70>
   11f06:	e681      	b.n	11c0c <_strtod_l+0xacc>
   11f08:	9b08      	ldr	r3, [sp, #32]
   11f0a:	9904      	ldr	r1, [sp, #16]
   11f0c:	b31b      	cbz	r3, 11f56 <_strtod_l+0xe16>
   11f0e:	4b24      	ldr	r3, [pc, #144]	; (11fa0 <_strtod_l+0xe60>)
   11f10:	4013      	ands	r3, r2
   11f12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   11f16:	d81e      	bhi.n	11f56 <_strtod_l+0xe16>
   11f18:	0d1b      	lsrs	r3, r3, #20
   11f1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11f1e:	f04f 30ff 	mov.w	r0, #4294967295
   11f22:	fa00 f303 	lsl.w	r3, r0, r3
   11f26:	4299      	cmp	r1, r3
   11f28:	f47f af1c 	bne.w	11d64 <_strtod_l+0xc24>
   11f2c:	4b1f      	ldr	r3, [pc, #124]	; (11fac <_strtod_l+0xe6c>)
   11f2e:	429a      	cmp	r2, r3
   11f30:	d030      	beq.n	11f94 <_strtod_l+0xe54>
   11f32:	4b1b      	ldr	r3, [pc, #108]	; (11fa0 <_strtod_l+0xe60>)
   11f34:	4013      	ands	r3, r2
   11f36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   11f3a:	9305      	str	r3, [sp, #20]
   11f3c:	2300      	movs	r3, #0
   11f3e:	9304      	str	r3, [sp, #16]
   11f40:	ed9d 8b04 	vldr	d8, [sp, #16]
   11f44:	e732      	b.n	11dac <_strtod_l+0xc6c>
   11f46:	f04f 32ff 	mov.w	r2, #4294967295
   11f4a:	fa02 f303 	lsl.w	r3, r2, r3
   11f4e:	9a04      	ldr	r2, [sp, #16]
   11f50:	401a      	ands	r2, r3
   11f52:	9204      	str	r2, [sp, #16]
   11f54:	e5d0      	b.n	11af8 <_strtod_l+0x9b8>
   11f56:	f04f 33ff 	mov.w	r3, #4294967295
   11f5a:	e7e4      	b.n	11f26 <_strtod_l+0xde6>
   11f5c:	4b10      	ldr	r3, [pc, #64]	; (11fa0 <_strtod_l+0xe60>)
   11f5e:	403b      	ands	r3, r7
   11f60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11f64:	f73f af7d 	bgt.w	11e62 <_strtod_l+0xd22>
   11f68:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   11f6c:	f73f af20 	bgt.w	11db0 <_strtod_l+0xc70>
   11f70:	e64c      	b.n	11c0c <_strtod_l+0xacc>
   11f72:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11f76:	f04f 33ff 	mov.w	r3, #4294967295
   11f7a:	4093      	lsls	r3, r2
   11f7c:	400b      	ands	r3, r1
   11f7e:	9305      	str	r3, [sp, #20]
   11f80:	e5ba      	b.n	11af8 <_strtod_l+0x9b8>
   11f82:	ee38 8b40 	vsub.f64	d8, d8, d0
   11f86:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11f8e:	f47f af1b 	bne.w	11dc8 <_strtod_l+0xc88>
   11f92:	e63b      	b.n	11c0c <_strtod_l+0xacc>
   11f94:	3101      	adds	r1, #1
   11f96:	d1cc      	bne.n	11f32 <_strtod_l+0xdf2>
   11f98:	e409      	b.n	117ae <_strtod_l+0x66e>
   11f9a:	2300      	movs	r3, #0
   11f9c:	e67d      	b.n	11c9a <_strtod_l+0xb5a>
   11f9e:	bf00      	nop
   11fa0:	7ff00000 	.word	0x7ff00000
   11fa4:	20008008 	.word	0x20008008
   11fa8:	20000300 	.word	0x20000300
   11fac:	7fefffff 	.word	0x7fefffff

00011fb0 <_strtod_r>:
   11fb0:	4b01      	ldr	r3, [pc, #4]	; (11fb8 <_strtod_r+0x8>)
   11fb2:	f7ff b8c5 	b.w	11140 <_strtod_l>
   11fb6:	bf00      	nop
   11fb8:	20008f94 	.word	0x20008f94

00011fbc <_strtol_l.constprop.0>:
   11fbc:	2b01      	cmp	r3, #1
   11fbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fc2:	d040      	beq.n	12046 <_strtol_l.constprop.0+0x8a>
   11fc4:	2b24      	cmp	r3, #36	; 0x24
   11fc6:	4698      	mov	r8, r3
   11fc8:	d83d      	bhi.n	12046 <_strtol_l.constprop.0+0x8a>
   11fca:	4d4c      	ldr	r5, [pc, #304]	; (120fc <_strtol_l.constprop.0+0x140>)
   11fcc:	468e      	mov	lr, r1
   11fce:	4676      	mov	r6, lr
   11fd0:	f81e bb01 	ldrb.w	fp, [lr], #1
   11fd4:	f815 400b 	ldrb.w	r4, [r5, fp]
   11fd8:	f014 0408 	ands.w	r4, r4, #8
   11fdc:	d1f7      	bne.n	11fce <_strtol_l.constprop.0+0x12>
   11fde:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   11fe2:	d072      	beq.n	120ca <_strtol_l.constprop.0+0x10e>
   11fe4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   11fe8:	bf08      	it	eq
   11fea:	f89e b000 	ldrbeq.w	fp, [lr]
   11fee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   11ff2:	bf08      	it	eq
   11ff4:	f106 0e02 	addeq.w	lr, r6, #2
   11ff8:	2b00      	cmp	r3, #0
   11ffa:	d042      	beq.n	12082 <_strtol_l.constprop.0+0xc6>
   11ffc:	2b10      	cmp	r3, #16
   11ffe:	d057      	beq.n	120b0 <_strtol_l.constprop.0+0xf4>
   12000:	fbb9 f7f8 	udiv	r7, r9, r8
   12004:	2500      	movs	r5, #0
   12006:	462e      	mov	r6, r5
   12008:	fb08 9a17 	mls	sl, r8, r7, r9
   1200c:	e005      	b.n	1201a <_strtol_l.constprop.0+0x5e>
   1200e:	d033      	beq.n	12078 <_strtol_l.constprop.0+0xbc>
   12010:	fb08 c606 	mla	r6, r8, r6, ip
   12014:	2501      	movs	r5, #1
   12016:	f81e bb01 	ldrb.w	fp, [lr], #1
   1201a:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   1201e:	f1bc 0f09 	cmp.w	ip, #9
   12022:	d906      	bls.n	12032 <_strtol_l.constprop.0+0x76>
   12024:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   12028:	f1bc 0f19 	cmp.w	ip, #25
   1202c:	d812      	bhi.n	12054 <_strtol_l.constprop.0+0x98>
   1202e:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   12032:	4563      	cmp	r3, ip
   12034:	dd17      	ble.n	12066 <_strtol_l.constprop.0+0xaa>
   12036:	f1b5 3fff 	cmp.w	r5, #4294967295
   1203a:	d0ec      	beq.n	12016 <_strtol_l.constprop.0+0x5a>
   1203c:	42b7      	cmp	r7, r6
   1203e:	d2e6      	bcs.n	1200e <_strtol_l.constprop.0+0x52>
   12040:	f04f 35ff 	mov.w	r5, #4294967295
   12044:	e7e7      	b.n	12016 <_strtol_l.constprop.0+0x5a>
   12046:	f000 fcc3 	bl	129d0 <__errno>
   1204a:	2316      	movs	r3, #22
   1204c:	6003      	str	r3, [r0, #0]
   1204e:	2000      	movs	r0, #0
   12050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12054:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   12058:	f1bc 0f19 	cmp.w	ip, #25
   1205c:	d803      	bhi.n	12066 <_strtol_l.constprop.0+0xaa>
   1205e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   12062:	4563      	cmp	r3, ip
   12064:	dce7      	bgt.n	12036 <_strtol_l.constprop.0+0x7a>
   12066:	1c6b      	adds	r3, r5, #1
   12068:	d027      	beq.n	120ba <_strtol_l.constprop.0+0xfe>
   1206a:	b98c      	cbnz	r4, 12090 <_strtol_l.constprop.0+0xd4>
   1206c:	b10a      	cbz	r2, 12072 <_strtol_l.constprop.0+0xb6>
   1206e:	bba5      	cbnz	r5, 120da <_strtol_l.constprop.0+0x11e>
   12070:	6011      	str	r1, [r2, #0]
   12072:	4630      	mov	r0, r6
   12074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12078:	45e2      	cmp	sl, ip
   1207a:	dac9      	bge.n	12010 <_strtol_l.constprop.0+0x54>
   1207c:	f04f 35ff 	mov.w	r5, #4294967295
   12080:	e7c9      	b.n	12016 <_strtol_l.constprop.0+0x5a>
   12082:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   12086:	d005      	beq.n	12094 <_strtol_l.constprop.0+0xd8>
   12088:	f04f 080a 	mov.w	r8, #10
   1208c:	4643      	mov	r3, r8
   1208e:	e7b7      	b.n	12000 <_strtol_l.constprop.0+0x44>
   12090:	4276      	negs	r6, r6
   12092:	e7eb      	b.n	1206c <_strtol_l.constprop.0+0xb0>
   12094:	f89e 3000 	ldrb.w	r3, [lr]
   12098:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1209c:	2b58      	cmp	r3, #88	; 0x58
   1209e:	d121      	bne.n	120e4 <_strtol_l.constprop.0+0x128>
   120a0:	f04f 0810 	mov.w	r8, #16
   120a4:	f89e b001 	ldrb.w	fp, [lr, #1]
   120a8:	4643      	mov	r3, r8
   120aa:	f10e 0e02 	add.w	lr, lr, #2
   120ae:	e7a7      	b.n	12000 <_strtol_l.constprop.0+0x44>
   120b0:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   120b4:	d01a      	beq.n	120ec <_strtol_l.constprop.0+0x130>
   120b6:	4698      	mov	r8, r3
   120b8:	e7a2      	b.n	12000 <_strtol_l.constprop.0+0x44>
   120ba:	2322      	movs	r3, #34	; 0x22
   120bc:	6003      	str	r3, [r0, #0]
   120be:	b172      	cbz	r2, 120de <_strtol_l.constprop.0+0x122>
   120c0:	f10e 31ff 	add.w	r1, lr, #4294967295
   120c4:	464e      	mov	r6, r9
   120c6:	6011      	str	r1, [r2, #0]
   120c8:	e7d3      	b.n	12072 <_strtol_l.constprop.0+0xb6>
   120ca:	f89e b000 	ldrb.w	fp, [lr]
   120ce:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   120d2:	f106 0e02 	add.w	lr, r6, #2
   120d6:	2401      	movs	r4, #1
   120d8:	e78e      	b.n	11ff8 <_strtol_l.constprop.0+0x3c>
   120da:	46b1      	mov	r9, r6
   120dc:	e7f0      	b.n	120c0 <_strtol_l.constprop.0+0x104>
   120de:	464e      	mov	r6, r9
   120e0:	4630      	mov	r0, r6
   120e2:	e7c7      	b.n	12074 <_strtol_l.constprop.0+0xb8>
   120e4:	f04f 0808 	mov.w	r8, #8
   120e8:	4643      	mov	r3, r8
   120ea:	e789      	b.n	12000 <_strtol_l.constprop.0+0x44>
   120ec:	f89e 5000 	ldrb.w	r5, [lr]
   120f0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   120f4:	2d58      	cmp	r5, #88	; 0x58
   120f6:	d0d3      	beq.n	120a0 <_strtol_l.constprop.0+0xe4>
   120f8:	4698      	mov	r8, r3
   120fa:	e781      	b.n	12000 <_strtol_l.constprop.0+0x44>
   120fc:	20001075 	.word	0x20001075

00012100 <_strtol_r>:
   12100:	f7ff bf5c 	b.w	11fbc <_strtol_l.constprop.0>

00012104 <__cxa_atexit>:
   12104:	4613      	mov	r3, r2
   12106:	460a      	mov	r2, r1
   12108:	4601      	mov	r1, r0
   1210a:	2002      	movs	r0, #2
   1210c:	f000 bf36 	b.w	12f7c <__register_exitproc>

00012110 <fcvtf>:
   12110:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   12114:	2300      	movs	r3, #0
   12116:	f002 ba39 	b.w	1458c <fcvtbuf>
   1211a:	bf00      	nop

0001211c <stdio_exit_handler>:
   1211c:	4a02      	ldr	r2, [pc, #8]	; (12128 <stdio_exit_handler+0xc>)
   1211e:	4903      	ldr	r1, [pc, #12]	; (1212c <stdio_exit_handler+0x10>)
   12120:	4803      	ldr	r0, [pc, #12]	; (12130 <stdio_exit_handler+0x14>)
   12122:	f000 b8bb 	b.w	1229c <_fwalk_sglue>
   12126:	bf00      	nop
   12128:	20009510 	.word	0x20009510
   1212c:	000179c5 	.word	0x000179c5
   12130:	20008a88 	.word	0x20008a88

00012134 <cleanup_stdio>:
   12134:	4b0c      	ldr	r3, [pc, #48]	; (12168 <cleanup_stdio+0x34>)
   12136:	6841      	ldr	r1, [r0, #4]
   12138:	4299      	cmp	r1, r3
   1213a:	b510      	push	{r4, lr}
   1213c:	4604      	mov	r4, r0
   1213e:	d001      	beq.n	12144 <cleanup_stdio+0x10>
   12140:	f005 fc40 	bl	179c4 <_fclose_r>
   12144:	68a1      	ldr	r1, [r4, #8]
   12146:	4b09      	ldr	r3, [pc, #36]	; (1216c <cleanup_stdio+0x38>)
   12148:	4299      	cmp	r1, r3
   1214a:	d002      	beq.n	12152 <cleanup_stdio+0x1e>
   1214c:	4620      	mov	r0, r4
   1214e:	f005 fc39 	bl	179c4 <_fclose_r>
   12152:	68e1      	ldr	r1, [r4, #12]
   12154:	4b06      	ldr	r3, [pc, #24]	; (12170 <cleanup_stdio+0x3c>)
   12156:	4299      	cmp	r1, r3
   12158:	d004      	beq.n	12164 <cleanup_stdio+0x30>
   1215a:	4620      	mov	r0, r4
   1215c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12160:	f005 bc30 	b.w	179c4 <_fclose_r>
   12164:	bd10      	pop	{r4, pc}
   12166:	bf00      	nop
   12168:	20024fa0 	.word	0x20024fa0
   1216c:	20025008 	.word	0x20025008
   12170:	20025070 	.word	0x20025070

00012174 <global_stdio_init.part.0>:
   12174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12178:	4c2a      	ldr	r4, [pc, #168]	; (12224 <global_stdio_init.part.0+0xb0>)
   1217a:	4b2b      	ldr	r3, [pc, #172]	; (12228 <global_stdio_init.part.0+0xb4>)
   1217c:	482b      	ldr	r0, [pc, #172]	; (1222c <global_stdio_init.part.0+0xb8>)
   1217e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 12240 <global_stdio_init.part.0+0xcc>
   12182:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 12244 <global_stdio_init.part.0+0xd0>
   12186:	4f2a      	ldr	r7, [pc, #168]	; (12230 <global_stdio_init.part.0+0xbc>)
   12188:	6018      	str	r0, [r3, #0]
   1218a:	2500      	movs	r5, #0
   1218c:	2304      	movs	r3, #4
   1218e:	2208      	movs	r2, #8
   12190:	4629      	mov	r1, r5
   12192:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   12196:	4e27      	ldr	r6, [pc, #156]	; (12234 <global_stdio_init.part.0+0xc0>)
   12198:	6665      	str	r5, [r4, #100]	; 0x64
   1219a:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1219e:	e9c4 5500 	strd	r5, r5, [r4]
   121a2:	e9c4 5504 	strd	r5, r5, [r4, #16]
   121a6:	61a5      	str	r5, [r4, #24]
   121a8:	f000 fa86 	bl	126b8 <memset>
   121ac:	4b22      	ldr	r3, [pc, #136]	; (12238 <global_stdio_init.part.0+0xc4>)
   121ae:	6763      	str	r3, [r4, #116]	; 0x74
   121b0:	2208      	movs	r2, #8
   121b2:	4629      	mov	r1, r5
   121b4:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   121b8:	e9c4 4907 	strd	r4, r9, [r4, #28]
   121bc:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   121c0:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   121c4:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   121c8:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   121cc:	6725      	str	r5, [r4, #112]	; 0x70
   121ce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   121d2:	62e6      	str	r6, [r4, #44]	; 0x2c
   121d4:	f000 fa70 	bl	126b8 <memset>
   121d8:	4b18      	ldr	r3, [pc, #96]	; (1223c <global_stdio_init.part.0+0xc8>)
   121da:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   121de:	4629      	mov	r1, r5
   121e0:	f104 0368 	add.w	r3, r4, #104	; 0x68
   121e4:	2208      	movs	r2, #8
   121e6:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   121ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   121ee:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   121f2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   121f6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   121fa:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   121fe:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   12202:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   12206:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   1220a:	f000 fa55 	bl	126b8 <memset>
   1220e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   12212:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   12216:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   1221a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   1221e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12222:	bf00      	nop
   12224:	20024fa0 	.word	0x20024fa0
   12228:	200250d8 	.word	0x200250d8
   1222c:	0001211d 	.word	0x0001211d
   12230:	0001246d 	.word	0x0001246d
   12234:	0001248d 	.word	0x0001248d
   12238:	00010009 	.word	0x00010009
   1223c:	00020012 	.word	0x00020012
   12240:	00012405 	.word	0x00012405
   12244:	0001242d 	.word	0x0001242d

00012248 <__sinit>:
   12248:	b510      	push	{r4, lr}
   1224a:	4604      	mov	r4, r0
   1224c:	480a      	ldr	r0, [pc, #40]	; (12278 <__sinit+0x30>)
   1224e:	f000 fbed 	bl	12a2c <__retarget_lock_acquire_recursive>
   12252:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12254:	b923      	cbnz	r3, 12260 <__sinit+0x18>
   12256:	4b09      	ldr	r3, [pc, #36]	; (1227c <__sinit+0x34>)
   12258:	4a09      	ldr	r2, [pc, #36]	; (12280 <__sinit+0x38>)
   1225a:	681b      	ldr	r3, [r3, #0]
   1225c:	6362      	str	r2, [r4, #52]	; 0x34
   1225e:	b123      	cbz	r3, 1226a <__sinit+0x22>
   12260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12264:	4804      	ldr	r0, [pc, #16]	; (12278 <__sinit+0x30>)
   12266:	f000 bbe3 	b.w	12a30 <__retarget_lock_release_recursive>
   1226a:	f7ff ff83 	bl	12174 <global_stdio_init.part.0>
   1226e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12272:	4801      	ldr	r0, [pc, #4]	; (12278 <__sinit+0x30>)
   12274:	f000 bbdc 	b.w	12a30 <__retarget_lock_release_recursive>
   12278:	20024f68 	.word	0x20024f68
   1227c:	200250d8 	.word	0x200250d8
   12280:	00012135 	.word	0x00012135

00012284 <__sfp_lock_acquire>:
   12284:	4801      	ldr	r0, [pc, #4]	; (1228c <__sfp_lock_acquire+0x8>)
   12286:	f000 bbd1 	b.w	12a2c <__retarget_lock_acquire_recursive>
   1228a:	bf00      	nop
   1228c:	20024f68 	.word	0x20024f68

00012290 <__sfp_lock_release>:
   12290:	4801      	ldr	r0, [pc, #4]	; (12298 <__sfp_lock_release+0x8>)
   12292:	f000 bbcd 	b.w	12a30 <__retarget_lock_release_recursive>
   12296:	bf00      	nop
   12298:	20024f68 	.word	0x20024f68

0001229c <_fwalk_sglue>:
   1229c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   122a0:	4680      	mov	r8, r0
   122a2:	460f      	mov	r7, r1
   122a4:	4616      	mov	r6, r2
   122a6:	f04f 0900 	mov.w	r9, #0
   122aa:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   122ae:	3d01      	subs	r5, #1
   122b0:	d411      	bmi.n	122d6 <_fwalk_sglue+0x3a>
   122b2:	89a3      	ldrh	r3, [r4, #12]
   122b4:	2b01      	cmp	r3, #1
   122b6:	f105 35ff 	add.w	r5, r5, #4294967295
   122ba:	d908      	bls.n	122ce <_fwalk_sglue+0x32>
   122bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   122c0:	3301      	adds	r3, #1
   122c2:	4621      	mov	r1, r4
   122c4:	d003      	beq.n	122ce <_fwalk_sglue+0x32>
   122c6:	4640      	mov	r0, r8
   122c8:	47b8      	blx	r7
   122ca:	ea49 0900 	orr.w	r9, r9, r0
   122ce:	1c6b      	adds	r3, r5, #1
   122d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
   122d4:	d1ed      	bne.n	122b2 <_fwalk_sglue+0x16>
   122d6:	6836      	ldr	r6, [r6, #0]
   122d8:	2e00      	cmp	r6, #0
   122da:	d1e6      	bne.n	122aa <_fwalk_sglue+0xe>
   122dc:	4648      	mov	r0, r9
   122de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   122e2:	bf00      	nop

000122e4 <snprintf>:
   122e4:	b40c      	push	{r2, r3}
   122e6:	b510      	push	{r4, lr}
   122e8:	4b1f      	ldr	r3, [pc, #124]	; (12368 <snprintf+0x84>)
   122ea:	2900      	cmp	r1, #0
   122ec:	681c      	ldr	r4, [r3, #0]
   122ee:	b09c      	sub	sp, #112	; 0x70
   122f0:	db35      	blt.n	1235e <snprintf+0x7a>
   122f2:	f44f 7302 	mov.w	r3, #520	; 0x208
   122f6:	f8ad 3014 	strh.w	r3, [sp, #20]
   122fa:	9002      	str	r0, [sp, #8]
   122fc:	9006      	str	r0, [sp, #24]
   122fe:	ab1f      	add	r3, sp, #124	; 0x7c
   12300:	d018      	beq.n	12334 <snprintf+0x50>
   12302:	3901      	subs	r1, #1
   12304:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12308:	9104      	str	r1, [sp, #16]
   1230a:	9107      	str	r1, [sp, #28]
   1230c:	f8ad 2016 	strh.w	r2, [sp, #22]
   12310:	a902      	add	r1, sp, #8
   12312:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12314:	9301      	str	r3, [sp, #4]
   12316:	4620      	mov	r0, r4
   12318:	f002 f98a 	bl	14630 <_svfprintf_r>
   1231c:	1c42      	adds	r2, r0, #1
   1231e:	da01      	bge.n	12324 <snprintf+0x40>
   12320:	238b      	movs	r3, #139	; 0x8b
   12322:	6023      	str	r3, [r4, #0]
   12324:	9b02      	ldr	r3, [sp, #8]
   12326:	2200      	movs	r2, #0
   12328:	701a      	strb	r2, [r3, #0]
   1232a:	b01c      	add	sp, #112	; 0x70
   1232c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12330:	b002      	add	sp, #8
   12332:	4770      	bx	lr
   12334:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12338:	9104      	str	r1, [sp, #16]
   1233a:	9107      	str	r1, [sp, #28]
   1233c:	f8ad 2016 	strh.w	r2, [sp, #22]
   12340:	a902      	add	r1, sp, #8
   12342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12344:	9301      	str	r3, [sp, #4]
   12346:	4620      	mov	r0, r4
   12348:	f002 f972 	bl	14630 <_svfprintf_r>
   1234c:	1c43      	adds	r3, r0, #1
   1234e:	da01      	bge.n	12354 <snprintf+0x70>
   12350:	238b      	movs	r3, #139	; 0x8b
   12352:	6023      	str	r3, [r4, #0]
   12354:	b01c      	add	sp, #112	; 0x70
   12356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1235a:	b002      	add	sp, #8
   1235c:	4770      	bx	lr
   1235e:	238b      	movs	r3, #139	; 0x8b
   12360:	6023      	str	r3, [r4, #0]
   12362:	f04f 30ff 	mov.w	r0, #4294967295
   12366:	e7f5      	b.n	12354 <snprintf+0x70>
   12368:	2000951c 	.word	0x2000951c

0001236c <sprintf>:
   1236c:	b40e      	push	{r1, r2, r3}
   1236e:	b510      	push	{r4, lr}
   12370:	b09d      	sub	sp, #116	; 0x74
   12372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12376:	ab1f      	add	r3, sp, #124	; 0x7c
   12378:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1237c:	9104      	str	r1, [sp, #16]
   1237e:	4909      	ldr	r1, [pc, #36]	; (123a4 <sprintf+0x38>)
   12380:	f853 2b04 	ldr.w	r2, [r3], #4
   12384:	9002      	str	r0, [sp, #8]
   12386:	4c08      	ldr	r4, [pc, #32]	; (123a8 <sprintf+0x3c>)
   12388:	6808      	ldr	r0, [r1, #0]
   1238a:	9301      	str	r3, [sp, #4]
   1238c:	a902      	add	r1, sp, #8
   1238e:	9405      	str	r4, [sp, #20]
   12390:	f002 f94e 	bl	14630 <_svfprintf_r>
   12394:	9b02      	ldr	r3, [sp, #8]
   12396:	2200      	movs	r2, #0
   12398:	701a      	strb	r2, [r3, #0]
   1239a:	b01d      	add	sp, #116	; 0x74
   1239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123a0:	b003      	add	sp, #12
   123a2:	4770      	bx	lr
   123a4:	2000951c 	.word	0x2000951c
   123a8:	ffff0208 	.word	0xffff0208

000123ac <sscanf>:
   123ac:	b40e      	push	{r1, r2, r3}
   123ae:	b510      	push	{r4, lr}
   123b0:	b09f      	sub	sp, #124	; 0x7c
   123b2:	ac21      	add	r4, sp, #132	; 0x84
   123b4:	f44f 7101 	mov.w	r1, #516	; 0x204
   123b8:	f854 2b04 	ldr.w	r2, [r4], #4
   123bc:	9201      	str	r2, [sp, #4]
   123be:	f8ad 101c 	strh.w	r1, [sp, #28]
   123c2:	9004      	str	r0, [sp, #16]
   123c4:	9008      	str	r0, [sp, #32]
   123c6:	f000 fd5b 	bl	12e80 <strlen>
   123ca:	9005      	str	r0, [sp, #20]
   123cc:	9009      	str	r0, [sp, #36]	; 0x24
   123ce:	480b      	ldr	r0, [pc, #44]	; (123fc <sscanf+0x50>)
   123d0:	490b      	ldr	r1, [pc, #44]	; (12400 <sscanf+0x54>)
   123d2:	910c      	str	r1, [sp, #48]	; 0x30
   123d4:	2300      	movs	r3, #0
   123d6:	f64f 7cff 	movw	ip, #65535	; 0xffff
   123da:	9310      	str	r3, [sp, #64]	; 0x40
   123dc:	9315      	str	r3, [sp, #84]	; 0x54
   123de:	9a01      	ldr	r2, [sp, #4]
   123e0:	6800      	ldr	r0, [r0, #0]
   123e2:	f8ad c01e 	strh.w	ip, [sp, #30]
   123e6:	4623      	mov	r3, r4
   123e8:	a904      	add	r1, sp, #16
   123ea:	9403      	str	r4, [sp, #12]
   123ec:	f003 fec2 	bl	16174 <__ssvfscanf_r>
   123f0:	b01f      	add	sp, #124	; 0x7c
   123f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   123f6:	b003      	add	sp, #12
   123f8:	4770      	bx	lr
   123fa:	bf00      	nop
   123fc:	2000951c 	.word	0x2000951c
   12400:	00012429 	.word	0x00012429

00012404 <__sread>:
   12404:	b510      	push	{r4, lr}
   12406:	460c      	mov	r4, r1
   12408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1240c:	f000 faa2 	bl	12954 <_read_r>
   12410:	2800      	cmp	r0, #0
   12412:	db03      	blt.n	1241c <__sread+0x18>
   12414:	6d23      	ldr	r3, [r4, #80]	; 0x50
   12416:	4403      	add	r3, r0
   12418:	6523      	str	r3, [r4, #80]	; 0x50
   1241a:	bd10      	pop	{r4, pc}
   1241c:	89a3      	ldrh	r3, [r4, #12]
   1241e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   12422:	81a3      	strh	r3, [r4, #12]
   12424:	bd10      	pop	{r4, pc}
   12426:	bf00      	nop

00012428 <__seofread>:
   12428:	2000      	movs	r0, #0
   1242a:	4770      	bx	lr

0001242c <__swrite>:
   1242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12430:	460c      	mov	r4, r1
   12432:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   12436:	461f      	mov	r7, r3
   12438:	05cb      	lsls	r3, r1, #23
   1243a:	4605      	mov	r5, r0
   1243c:	4616      	mov	r6, r2
   1243e:	d40b      	bmi.n	12458 <__swrite+0x2c>
   12440:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   12444:	81a1      	strh	r1, [r4, #12]
   12446:	463b      	mov	r3, r7
   12448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1244c:	4632      	mov	r2, r6
   1244e:	4628      	mov	r0, r5
   12450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12454:	f000 baa6 	b.w	129a4 <_write_r>
   12458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1245c:	2302      	movs	r3, #2
   1245e:	2200      	movs	r2, #0
   12460:	f000 fa62 	bl	12928 <_lseek_r>
   12464:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   12468:	e7ea      	b.n	12440 <__swrite+0x14>
   1246a:	bf00      	nop

0001246c <__sseek>:
   1246c:	b510      	push	{r4, lr}
   1246e:	460c      	mov	r4, r1
   12470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12474:	f000 fa58 	bl	12928 <_lseek_r>
   12478:	89a3      	ldrh	r3, [r4, #12]
   1247a:	1c42      	adds	r2, r0, #1
   1247c:	bf0e      	itee	eq
   1247e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   12482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   12486:	6520      	strne	r0, [r4, #80]	; 0x50
   12488:	81a3      	strh	r3, [r4, #12]
   1248a:	bd10      	pop	{r4, pc}

0001248c <__sclose>:
   1248c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12490:	f000 ba38 	b.w	12904 <_close_r>

00012494 <_vdprintf_r>:
   12494:	b5f0      	push	{r4, r5, r6, r7, lr}
   12496:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1249a:	af04      	add	r7, sp, #16
   1249c:	9300      	str	r3, [sp, #0]
   1249e:	4613      	mov	r3, r2
   124a0:	f44f 7200 	mov.w	r2, #512	; 0x200
   124a4:	460e      	mov	r6, r1
   124a6:	9203      	str	r2, [sp, #12]
   124a8:	4639      	mov	r1, r7
   124aa:	aa03      	add	r2, sp, #12
   124ac:	4605      	mov	r5, r0
   124ae:	f000 f825 	bl	124fc <_vasnprintf_r>
   124b2:	b188      	cbz	r0, 124d8 <_vdprintf_r+0x44>
   124b4:	4604      	mov	r4, r0
   124b6:	4602      	mov	r2, r0
   124b8:	9b03      	ldr	r3, [sp, #12]
   124ba:	4631      	mov	r1, r6
   124bc:	4628      	mov	r0, r5
   124be:	f000 fa71 	bl	129a4 <_write_r>
   124c2:	42bc      	cmp	r4, r7
   124c4:	9003      	str	r0, [sp, #12]
   124c6:	d004      	beq.n	124d2 <_vdprintf_r+0x3e>
   124c8:	4628      	mov	r0, r5
   124ca:	4621      	mov	r1, r4
   124cc:	f000 fdea 	bl	130a4 <_free_r>
   124d0:	9803      	ldr	r0, [sp, #12]
   124d2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   124d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   124d8:	f04f 30ff 	mov.w	r0, #4294967295
   124dc:	e7f9      	b.n	124d2 <_vdprintf_r+0x3e>
   124de:	bf00      	nop

000124e0 <vdprintf>:
   124e0:	b410      	push	{r4}
   124e2:	4c05      	ldr	r4, [pc, #20]	; (124f8 <vdprintf+0x18>)
   124e4:	4684      	mov	ip, r0
   124e6:	4613      	mov	r3, r2
   124e8:	6820      	ldr	r0, [r4, #0]
   124ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   124ee:	460a      	mov	r2, r1
   124f0:	4661      	mov	r1, ip
   124f2:	f7ff bfcf 	b.w	12494 <_vdprintf_r>
   124f6:	bf00      	nop
   124f8:	2000951c 	.word	0x2000951c

000124fc <_vasnprintf_r>:
   124fc:	b530      	push	{r4, r5, lr}
   124fe:	6814      	ldr	r4, [r2, #0]
   12500:	4615      	mov	r5, r2
   12502:	b09b      	sub	sp, #108	; 0x6c
   12504:	461a      	mov	r2, r3
   12506:	b109      	cbz	r1, 1250c <_vasnprintf_r+0x10>
   12508:	2c00      	cmp	r4, #0
   1250a:	d119      	bne.n	12540 <_vasnprintf_r+0x44>
   1250c:	2100      	movs	r1, #0
   1250e:	f44f 7322 	mov.w	r3, #648	; 0x288
   12512:	f8ad 300c 	strh.w	r3, [sp, #12]
   12516:	9100      	str	r1, [sp, #0]
   12518:	9104      	str	r1, [sp, #16]
   1251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1251e:	9102      	str	r1, [sp, #8]
   12520:	9105      	str	r1, [sp, #20]
   12522:	f8ad 300e 	strh.w	r3, [sp, #14]
   12526:	4669      	mov	r1, sp
   12528:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1252a:	f002 f881 	bl	14630 <_svfprintf_r>
   1252e:	2800      	cmp	r0, #0
   12530:	db13      	blt.n	1255a <_vasnprintf_r+0x5e>
   12532:	9b00      	ldr	r3, [sp, #0]
   12534:	6028      	str	r0, [r5, #0]
   12536:	2200      	movs	r2, #0
   12538:	701a      	strb	r2, [r3, #0]
   1253a:	9804      	ldr	r0, [sp, #16]
   1253c:	b01b      	add	sp, #108	; 0x6c
   1253e:	bd30      	pop	{r4, r5, pc}
   12540:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   12544:	9100      	str	r1, [sp, #0]
   12546:	9104      	str	r1, [sp, #16]
   12548:	f8ad 300c 	strh.w	r3, [sp, #12]
   1254c:	4621      	mov	r1, r4
   1254e:	dae4      	bge.n	1251a <_vasnprintf_r+0x1e>
   12550:	238b      	movs	r3, #139	; 0x8b
   12552:	6003      	str	r3, [r0, #0]
   12554:	2000      	movs	r0, #0
   12556:	b01b      	add	sp, #108	; 0x6c
   12558:	bd30      	pop	{r4, r5, pc}
   1255a:	2000      	movs	r0, #0
   1255c:	e7ee      	b.n	1253c <_vasnprintf_r+0x40>
   1255e:	bf00      	nop

00012560 <memcmp>:
   12560:	2a03      	cmp	r2, #3
   12562:	b570      	push	{r4, r5, r6, lr}
   12564:	d914      	bls.n	12590 <memcmp+0x30>
   12566:	ea40 0301 	orr.w	r3, r0, r1
   1256a:	079b      	lsls	r3, r3, #30
   1256c:	d122      	bne.n	125b4 <memcmp+0x54>
   1256e:	4604      	mov	r4, r0
   12570:	460b      	mov	r3, r1
   12572:	4619      	mov	r1, r3
   12574:	4620      	mov	r0, r4
   12576:	680e      	ldr	r6, [r1, #0]
   12578:	6805      	ldr	r5, [r0, #0]
   1257a:	42b5      	cmp	r5, r6
   1257c:	f104 0404 	add.w	r4, r4, #4
   12580:	f103 0304 	add.w	r3, r3, #4
   12584:	d116      	bne.n	125b4 <memcmp+0x54>
   12586:	3a04      	subs	r2, #4
   12588:	2a03      	cmp	r2, #3
   1258a:	4620      	mov	r0, r4
   1258c:	4619      	mov	r1, r3
   1258e:	d8f0      	bhi.n	12572 <memcmp+0x12>
   12590:	1e54      	subs	r4, r2, #1
   12592:	b19a      	cbz	r2, 125bc <memcmp+0x5c>
   12594:	1e42      	subs	r2, r0, #1
   12596:	3901      	subs	r1, #1
   12598:	e001      	b.n	1259e <memcmp+0x3e>
   1259a:	18c3      	adds	r3, r0, r3
   1259c:	d00c      	beq.n	125b8 <memcmp+0x58>
   1259e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   125a2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   125a6:	45e6      	cmp	lr, ip
   125a8:	eba4 0302 	sub.w	r3, r4, r2
   125ac:	d0f5      	beq.n	1259a <memcmp+0x3a>
   125ae:	ebae 000c 	sub.w	r0, lr, ip
   125b2:	bd70      	pop	{r4, r5, r6, pc}
   125b4:	1e54      	subs	r4, r2, #1
   125b6:	e7ed      	b.n	12594 <memcmp+0x34>
   125b8:	4618      	mov	r0, r3
   125ba:	bd70      	pop	{r4, r5, r6, pc}
   125bc:	4610      	mov	r0, r2
   125be:	bd70      	pop	{r4, r5, r6, pc}

000125c0 <memmove>:
   125c0:	4288      	cmp	r0, r1
   125c2:	d90d      	bls.n	125e0 <memmove+0x20>
   125c4:	188b      	adds	r3, r1, r2
   125c6:	4283      	cmp	r3, r0
   125c8:	d90a      	bls.n	125e0 <memmove+0x20>
   125ca:	eb00 0c02 	add.w	ip, r0, r2
   125ce:	b1ba      	cbz	r2, 12600 <memmove+0x40>
   125d0:	4662      	mov	r2, ip
   125d2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   125d6:	f802 cd01 	strb.w	ip, [r2, #-1]!
   125da:	4299      	cmp	r1, r3
   125dc:	d1f9      	bne.n	125d2 <memmove+0x12>
   125de:	4770      	bx	lr
   125e0:	2a0f      	cmp	r2, #15
   125e2:	d80e      	bhi.n	12602 <memmove+0x42>
   125e4:	4603      	mov	r3, r0
   125e6:	f102 3cff 	add.w	ip, r2, #4294967295
   125ea:	b14a      	cbz	r2, 12600 <memmove+0x40>
   125ec:	f10c 0c01 	add.w	ip, ip, #1
   125f0:	3b01      	subs	r3, #1
   125f2:	448c      	add	ip, r1
   125f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   125f8:	f803 2f01 	strb.w	r2, [r3, #1]!
   125fc:	4561      	cmp	r1, ip
   125fe:	d1f9      	bne.n	125f4 <memmove+0x34>
   12600:	4770      	bx	lr
   12602:	ea40 0301 	orr.w	r3, r0, r1
   12606:	079b      	lsls	r3, r3, #30
   12608:	d150      	bne.n	126ac <memmove+0xec>
   1260a:	f1a2 0310 	sub.w	r3, r2, #16
   1260e:	b570      	push	{r4, r5, r6, lr}
   12610:	f101 0c20 	add.w	ip, r1, #32
   12614:	f023 050f 	bic.w	r5, r3, #15
   12618:	f101 0e10 	add.w	lr, r1, #16
   1261c:	f100 0410 	add.w	r4, r0, #16
   12620:	44ac      	add	ip, r5
   12622:	091b      	lsrs	r3, r3, #4
   12624:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   12628:	f844 5c10 	str.w	r5, [r4, #-16]
   1262c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   12630:	f844 5c0c 	str.w	r5, [r4, #-12]
   12634:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   12638:	f844 5c08 	str.w	r5, [r4, #-8]
   1263c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   12640:	f844 5c04 	str.w	r5, [r4, #-4]
   12644:	f10e 0e10 	add.w	lr, lr, #16
   12648:	45e6      	cmp	lr, ip
   1264a:	f104 0410 	add.w	r4, r4, #16
   1264e:	d1e9      	bne.n	12624 <memmove+0x64>
   12650:	3301      	adds	r3, #1
   12652:	f012 0f0c 	tst.w	r2, #12
   12656:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1265a:	f002 040f 	and.w	r4, r2, #15
   1265e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   12662:	d027      	beq.n	126b4 <memmove+0xf4>
   12664:	3c04      	subs	r4, #4
   12666:	f024 0603 	bic.w	r6, r4, #3
   1266a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1266e:	441e      	add	r6, r3
   12670:	1f1c      	subs	r4, r3, #4
   12672:	468e      	mov	lr, r1
   12674:	f85e 5b04 	ldr.w	r5, [lr], #4
   12678:	f844 5f04 	str.w	r5, [r4, #4]!
   1267c:	42b4      	cmp	r4, r6
   1267e:	d1f9      	bne.n	12674 <memmove+0xb4>
   12680:	f10c 0401 	add.w	r4, ip, #1
   12684:	f002 0203 	and.w	r2, r2, #3
   12688:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1268c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   12690:	f102 3cff 	add.w	ip, r2, #4294967295
   12694:	b14a      	cbz	r2, 126aa <memmove+0xea>
   12696:	f10c 0c01 	add.w	ip, ip, #1
   1269a:	3b01      	subs	r3, #1
   1269c:	448c      	add	ip, r1
   1269e:	f811 2b01 	ldrb.w	r2, [r1], #1
   126a2:	f803 2f01 	strb.w	r2, [r3, #1]!
   126a6:	4561      	cmp	r1, ip
   126a8:	d1f9      	bne.n	1269e <memmove+0xde>
   126aa:	bd70      	pop	{r4, r5, r6, pc}
   126ac:	f102 3cff 	add.w	ip, r2, #4294967295
   126b0:	4603      	mov	r3, r0
   126b2:	e79b      	b.n	125ec <memmove+0x2c>
   126b4:	4622      	mov	r2, r4
   126b6:	e7eb      	b.n	12690 <memmove+0xd0>

000126b8 <memset>:
   126b8:	0783      	lsls	r3, r0, #30
   126ba:	b530      	push	{r4, r5, lr}
   126bc:	d048      	beq.n	12750 <memset+0x98>
   126be:	1e54      	subs	r4, r2, #1
   126c0:	2a00      	cmp	r2, #0
   126c2:	d03f      	beq.n	12744 <memset+0x8c>
   126c4:	b2ca      	uxtb	r2, r1
   126c6:	4603      	mov	r3, r0
   126c8:	e001      	b.n	126ce <memset+0x16>
   126ca:	3c01      	subs	r4, #1
   126cc:	d33a      	bcc.n	12744 <memset+0x8c>
   126ce:	f803 2b01 	strb.w	r2, [r3], #1
   126d2:	079d      	lsls	r5, r3, #30
   126d4:	d1f9      	bne.n	126ca <memset+0x12>
   126d6:	2c03      	cmp	r4, #3
   126d8:	d92d      	bls.n	12736 <memset+0x7e>
   126da:	b2cd      	uxtb	r5, r1
   126dc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   126e0:	2c0f      	cmp	r4, #15
   126e2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   126e6:	d936      	bls.n	12756 <memset+0x9e>
   126e8:	f1a4 0210 	sub.w	r2, r4, #16
   126ec:	f022 0c0f 	bic.w	ip, r2, #15
   126f0:	f103 0e20 	add.w	lr, r3, #32
   126f4:	44e6      	add	lr, ip
   126f6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   126fa:	f103 0210 	add.w	r2, r3, #16
   126fe:	e942 5504 	strd	r5, r5, [r2, #-16]
   12702:	e942 5502 	strd	r5, r5, [r2, #-8]
   12706:	3210      	adds	r2, #16
   12708:	4572      	cmp	r2, lr
   1270a:	d1f8      	bne.n	126fe <memset+0x46>
   1270c:	f10c 0201 	add.w	r2, ip, #1
   12710:	f014 0f0c 	tst.w	r4, #12
   12714:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12718:	f004 0c0f 	and.w	ip, r4, #15
   1271c:	d013      	beq.n	12746 <memset+0x8e>
   1271e:	f1ac 0304 	sub.w	r3, ip, #4
   12722:	f023 0303 	bic.w	r3, r3, #3
   12726:	3304      	adds	r3, #4
   12728:	4413      	add	r3, r2
   1272a:	f842 5b04 	str.w	r5, [r2], #4
   1272e:	4293      	cmp	r3, r2
   12730:	d1fb      	bne.n	1272a <memset+0x72>
   12732:	f00c 0403 	and.w	r4, ip, #3
   12736:	b12c      	cbz	r4, 12744 <memset+0x8c>
   12738:	b2c9      	uxtb	r1, r1
   1273a:	441c      	add	r4, r3
   1273c:	f803 1b01 	strb.w	r1, [r3], #1
   12740:	429c      	cmp	r4, r3
   12742:	d1fb      	bne.n	1273c <memset+0x84>
   12744:	bd30      	pop	{r4, r5, pc}
   12746:	4664      	mov	r4, ip
   12748:	4613      	mov	r3, r2
   1274a:	2c00      	cmp	r4, #0
   1274c:	d1f4      	bne.n	12738 <memset+0x80>
   1274e:	e7f9      	b.n	12744 <memset+0x8c>
   12750:	4603      	mov	r3, r0
   12752:	4614      	mov	r4, r2
   12754:	e7bf      	b.n	126d6 <memset+0x1e>
   12756:	461a      	mov	r2, r3
   12758:	46a4      	mov	ip, r4
   1275a:	e7e0      	b.n	1271e <memset+0x66>

0001275c <strlcat>:
   1275c:	b570      	push	{r4, r5, r6, lr}
   1275e:	b34a      	cbz	r2, 127b4 <strlcat+0x58>
   12760:	4603      	mov	r3, r0
   12762:	1815      	adds	r5, r2, r0
   12764:	e002      	b.n	1276c <strlcat+0x10>
   12766:	429d      	cmp	r5, r3
   12768:	469c      	mov	ip, r3
   1276a:	d005      	beq.n	12778 <strlcat+0x1c>
   1276c:	469c      	mov	ip, r3
   1276e:	3301      	adds	r3, #1
   12770:	f89c 4000 	ldrb.w	r4, [ip]
   12774:	2c00      	cmp	r4, #0
   12776:	d1f6      	bne.n	12766 <strlcat+0xa>
   12778:	ebac 0600 	sub.w	r6, ip, r0
   1277c:	1b92      	subs	r2, r2, r6
   1277e:	1e55      	subs	r5, r2, #1
   12780:	b1ca      	cbz	r2, 127b6 <strlcat+0x5a>
   12782:	780c      	ldrb	r4, [r1, #0]
   12784:	460b      	mov	r3, r1
   12786:	b93c      	cbnz	r4, 12798 <strlcat+0x3c>
   12788:	e00f      	b.n	127aa <strlcat+0x4e>
   1278a:	f802 4b01 	strb.w	r4, [r2], #1
   1278e:	3d01      	subs	r5, #1
   12790:	4694      	mov	ip, r2
   12792:	785c      	ldrb	r4, [r3, #1]
   12794:	3301      	adds	r3, #1
   12796:	b134      	cbz	r4, 127a6 <strlcat+0x4a>
   12798:	4662      	mov	r2, ip
   1279a:	2d00      	cmp	r5, #0
   1279c:	d1f5      	bne.n	1278a <strlcat+0x2e>
   1279e:	785a      	ldrb	r2, [r3, #1]
   127a0:	3301      	adds	r3, #1
   127a2:	2a00      	cmp	r2, #0
   127a4:	d1f5      	bne.n	12792 <strlcat+0x36>
   127a6:	1a5b      	subs	r3, r3, r1
   127a8:	441e      	add	r6, r3
   127aa:	2300      	movs	r3, #0
   127ac:	f88c 3000 	strb.w	r3, [ip]
   127b0:	4630      	mov	r0, r6
   127b2:	bd70      	pop	{r4, r5, r6, pc}
   127b4:	4616      	mov	r6, r2
   127b6:	4608      	mov	r0, r1
   127b8:	f000 fb62 	bl	12e80 <strlen>
   127bc:	4406      	add	r6, r0
   127be:	4630      	mov	r0, r6
   127c0:	bd70      	pop	{r4, r5, r6, pc}
   127c2:	bf00      	nop

000127c4 <strlcpy>:
   127c4:	b1c2      	cbz	r2, 127f8 <strlcpy+0x34>
   127c6:	eb00 0c02 	add.w	ip, r0, r2
   127ca:	b500      	push	{lr}
   127cc:	460b      	mov	r3, r1
   127ce:	f10c 3eff 	add.w	lr, ip, #4294967295
   127d2:	e004      	b.n	127de <strlcpy+0x1a>
   127d4:	f813 2b01 	ldrb.w	r2, [r3], #1
   127d8:	f800 2b01 	strb.w	r2, [r0], #1
   127dc:	b142      	cbz	r2, 127f0 <strlcpy+0x2c>
   127de:	4586      	cmp	lr, r0
   127e0:	d1f8      	bne.n	127d4 <strlcpy+0x10>
   127e2:	2200      	movs	r2, #0
   127e4:	f80c 2c01 	strb.w	r2, [ip, #-1]
   127e8:	f813 2b01 	ldrb.w	r2, [r3], #1
   127ec:	2a00      	cmp	r2, #0
   127ee:	d1fb      	bne.n	127e8 <strlcpy+0x24>
   127f0:	1a59      	subs	r1, r3, r1
   127f2:	1e48      	subs	r0, r1, #1
   127f4:	f85d fb04 	ldr.w	pc, [sp], #4
   127f8:	460b      	mov	r3, r1
   127fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   127fe:	2a00      	cmp	r2, #0
   12800:	d1fb      	bne.n	127fa <strlcpy+0x36>
   12802:	1a59      	subs	r1, r3, r1
   12804:	1e48      	subs	r0, r1, #1
   12806:	4770      	bx	lr

00012808 <strncmp>:
   12808:	2a00      	cmp	r2, #0
   1280a:	d03e      	beq.n	1288a <strncmp+0x82>
   1280c:	ea40 0301 	orr.w	r3, r0, r1
   12810:	079b      	lsls	r3, r3, #30
   12812:	b530      	push	{r4, r5, lr}
   12814:	4684      	mov	ip, r0
   12816:	d12f      	bne.n	12878 <strncmp+0x70>
   12818:	2a03      	cmp	r2, #3
   1281a:	d92d      	bls.n	12878 <strncmp+0x70>
   1281c:	460b      	mov	r3, r1
   1281e:	e008      	b.n	12832 <strncmp+0x2a>
   12820:	3a04      	subs	r2, #4
   12822:	4684      	mov	ip, r0
   12824:	4619      	mov	r1, r3
   12826:	d025      	beq.n	12874 <strncmp+0x6c>
   12828:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   1282c:	d122      	bne.n	12874 <strncmp+0x6c>
   1282e:	2a03      	cmp	r2, #3
   12830:	d922      	bls.n	12878 <strncmp+0x70>
   12832:	6804      	ldr	r4, [r0, #0]
   12834:	4619      	mov	r1, r3
   12836:	f853 5b04 	ldr.w	r5, [r3], #4
   1283a:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   1283e:	42ac      	cmp	r4, r5
   12840:	4684      	mov	ip, r0
   12842:	ea2e 0e04 	bic.w	lr, lr, r4
   12846:	f100 0004 	add.w	r0, r0, #4
   1284a:	d0e9      	beq.n	12820 <strncmp+0x18>
   1284c:	f89c 0000 	ldrb.w	r0, [ip]
   12850:	780c      	ldrb	r4, [r1, #0]
   12852:	42a0      	cmp	r0, r4
   12854:	d11b      	bne.n	1288e <strncmp+0x86>
   12856:	46e6      	mov	lr, ip
   12858:	b168      	cbz	r0, 12876 <strncmp+0x6e>
   1285a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   1285e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   12862:	eba2 030e 	sub.w	r3, r2, lr
   12866:	42a0      	cmp	r0, r4
   12868:	f103 33ff 	add.w	r3, r3, #4294967295
   1286c:	d10f      	bne.n	1288e <strncmp+0x86>
   1286e:	eb1c 0303 	adds.w	r3, ip, r3
   12872:	d1f1      	bne.n	12858 <strncmp+0x50>
   12874:	2000      	movs	r0, #0
   12876:	bd30      	pop	{r4, r5, pc}
   12878:	f89c 0000 	ldrb.w	r0, [ip]
   1287c:	780c      	ldrb	r4, [r1, #0]
   1287e:	4284      	cmp	r4, r0
   12880:	d105      	bne.n	1288e <strncmp+0x86>
   12882:	2a01      	cmp	r2, #1
   12884:	d0f6      	beq.n	12874 <strncmp+0x6c>
   12886:	46e6      	mov	lr, ip
   12888:	e7e6      	b.n	12858 <strncmp+0x50>
   1288a:	4610      	mov	r0, r2
   1288c:	4770      	bx	lr
   1288e:	1b00      	subs	r0, r0, r4
   12890:	bd30      	pop	{r4, r5, pc}
   12892:	bf00      	nop

00012894 <strncpy>:
   12894:	ea40 0301 	orr.w	r3, r0, r1
   12898:	079b      	lsls	r3, r3, #30
   1289a:	b530      	push	{r4, r5, lr}
   1289c:	d101      	bne.n	128a2 <strncpy+0xe>
   1289e:	2a03      	cmp	r2, #3
   128a0:	d80f      	bhi.n	128c2 <strncpy+0x2e>
   128a2:	4684      	mov	ip, r0
   128a4:	f101 3eff 	add.w	lr, r1, #4294967295
   128a8:	e007      	b.n	128ba <strncpy+0x26>
   128aa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   128ae:	f803 1b01 	strb.w	r1, [r3], #1
   128b2:	1e54      	subs	r4, r2, #1
   128b4:	b1c1      	cbz	r1, 128e8 <strncpy+0x54>
   128b6:	469c      	mov	ip, r3
   128b8:	4622      	mov	r2, r4
   128ba:	4663      	mov	r3, ip
   128bc:	2a00      	cmp	r2, #0
   128be:	d1f4      	bne.n	128aa <strncpy+0x16>
   128c0:	bd30      	pop	{r4, r5, pc}
   128c2:	460b      	mov	r3, r1
   128c4:	4684      	mov	ip, r0
   128c6:	4619      	mov	r1, r3
   128c8:	f853 5b04 	ldr.w	r5, [r3], #4
   128cc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   128d0:	ea24 0405 	bic.w	r4, r4, r5
   128d4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   128d8:	d1e4      	bne.n	128a4 <strncpy+0x10>
   128da:	3a04      	subs	r2, #4
   128dc:	2a03      	cmp	r2, #3
   128de:	f84c 5b04 	str.w	r5, [ip], #4
   128e2:	4619      	mov	r1, r3
   128e4:	d8ef      	bhi.n	128c6 <strncpy+0x32>
   128e6:	e7dd      	b.n	128a4 <strncpy+0x10>
   128e8:	4494      	add	ip, r2
   128ea:	2c00      	cmp	r4, #0
   128ec:	d0e8      	beq.n	128c0 <strncpy+0x2c>
   128ee:	f803 1b01 	strb.w	r1, [r3], #1
   128f2:	4563      	cmp	r3, ip
   128f4:	d1fb      	bne.n	128ee <strncpy+0x5a>
   128f6:	bd30      	pop	{r4, r5, pc}

000128f8 <__locale_mb_cur_max>:
   128f8:	4b01      	ldr	r3, [pc, #4]	; (12900 <__locale_mb_cur_max+0x8>)
   128fa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   128fe:	4770      	bx	lr
   12900:	20008f94 	.word	0x20008f94

00012904 <_close_r>:
   12904:	b538      	push	{r3, r4, r5, lr}
   12906:	4d07      	ldr	r5, [pc, #28]	; (12924 <_close_r+0x20>)
   12908:	2200      	movs	r2, #0
   1290a:	4604      	mov	r4, r0
   1290c:	4608      	mov	r0, r1
   1290e:	602a      	str	r2, [r5, #0]
   12910:	f7fc f9d0 	bl	ecb4 <_close>
   12914:	1c43      	adds	r3, r0, #1
   12916:	d000      	beq.n	1291a <_close_r+0x16>
   12918:	bd38      	pop	{r3, r4, r5, pc}
   1291a:	682b      	ldr	r3, [r5, #0]
   1291c:	2b00      	cmp	r3, #0
   1291e:	d0fb      	beq.n	12918 <_close_r+0x14>
   12920:	6023      	str	r3, [r4, #0]
   12922:	bd38      	pop	{r3, r4, r5, pc}
   12924:	200252f0 	.word	0x200252f0

00012928 <_lseek_r>:
   12928:	b538      	push	{r3, r4, r5, lr}
   1292a:	460c      	mov	r4, r1
   1292c:	4d08      	ldr	r5, [pc, #32]	; (12950 <_lseek_r+0x28>)
   1292e:	4684      	mov	ip, r0
   12930:	4611      	mov	r1, r2
   12932:	4620      	mov	r0, r4
   12934:	461a      	mov	r2, r3
   12936:	2300      	movs	r3, #0
   12938:	602b      	str	r3, [r5, #0]
   1293a:	4664      	mov	r4, ip
   1293c:	f7fc f9c6 	bl	eccc <_lseek>
   12940:	1c43      	adds	r3, r0, #1
   12942:	d000      	beq.n	12946 <_lseek_r+0x1e>
   12944:	bd38      	pop	{r3, r4, r5, pc}
   12946:	682b      	ldr	r3, [r5, #0]
   12948:	2b00      	cmp	r3, #0
   1294a:	d0fb      	beq.n	12944 <_lseek_r+0x1c>
   1294c:	6023      	str	r3, [r4, #0]
   1294e:	bd38      	pop	{r3, r4, r5, pc}
   12950:	200252f0 	.word	0x200252f0

00012954 <_read_r>:
   12954:	b538      	push	{r3, r4, r5, lr}
   12956:	460c      	mov	r4, r1
   12958:	4d08      	ldr	r5, [pc, #32]	; (1297c <_read_r+0x28>)
   1295a:	4684      	mov	ip, r0
   1295c:	4611      	mov	r1, r2
   1295e:	4620      	mov	r0, r4
   12960:	461a      	mov	r2, r3
   12962:	2300      	movs	r3, #0
   12964:	602b      	str	r3, [r5, #0]
   12966:	4664      	mov	r4, ip
   12968:	f7fc f9a2 	bl	ecb0 <_read>
   1296c:	1c43      	adds	r3, r0, #1
   1296e:	d000      	beq.n	12972 <_read_r+0x1e>
   12970:	bd38      	pop	{r3, r4, r5, pc}
   12972:	682b      	ldr	r3, [r5, #0]
   12974:	2b00      	cmp	r3, #0
   12976:	d0fb      	beq.n	12970 <_read_r+0x1c>
   12978:	6023      	str	r3, [r4, #0]
   1297a:	bd38      	pop	{r3, r4, r5, pc}
   1297c:	200252f0 	.word	0x200252f0

00012980 <_sbrk_r>:
   12980:	b538      	push	{r3, r4, r5, lr}
   12982:	4d07      	ldr	r5, [pc, #28]	; (129a0 <_sbrk_r+0x20>)
   12984:	2200      	movs	r2, #0
   12986:	4604      	mov	r4, r0
   12988:	4608      	mov	r0, r1
   1298a:	602a      	str	r2, [r5, #0]
   1298c:	f7fc f976 	bl	ec7c <_sbrk>
   12990:	1c43      	adds	r3, r0, #1
   12992:	d000      	beq.n	12996 <_sbrk_r+0x16>
   12994:	bd38      	pop	{r3, r4, r5, pc}
   12996:	682b      	ldr	r3, [r5, #0]
   12998:	2b00      	cmp	r3, #0
   1299a:	d0fb      	beq.n	12994 <_sbrk_r+0x14>
   1299c:	6023      	str	r3, [r4, #0]
   1299e:	bd38      	pop	{r3, r4, r5, pc}
   129a0:	200252f0 	.word	0x200252f0

000129a4 <_write_r>:
   129a4:	b538      	push	{r3, r4, r5, lr}
   129a6:	460c      	mov	r4, r1
   129a8:	4d08      	ldr	r5, [pc, #32]	; (129cc <_write_r+0x28>)
   129aa:	4684      	mov	ip, r0
   129ac:	4611      	mov	r1, r2
   129ae:	4620      	mov	r0, r4
   129b0:	461a      	mov	r2, r3
   129b2:	2300      	movs	r3, #0
   129b4:	602b      	str	r3, [r5, #0]
   129b6:	4664      	mov	r4, ip
   129b8:	f7fa fff8 	bl	d9ac <_write>
   129bc:	1c43      	adds	r3, r0, #1
   129be:	d000      	beq.n	129c2 <_write_r+0x1e>
   129c0:	bd38      	pop	{r3, r4, r5, pc}
   129c2:	682b      	ldr	r3, [r5, #0]
   129c4:	2b00      	cmp	r3, #0
   129c6:	d0fb      	beq.n	129c0 <_write_r+0x1c>
   129c8:	6023      	str	r3, [r4, #0]
   129ca:	bd38      	pop	{r3, r4, r5, pc}
   129cc:	200252f0 	.word	0x200252f0

000129d0 <__errno>:
   129d0:	4b01      	ldr	r3, [pc, #4]	; (129d8 <__errno+0x8>)
   129d2:	6818      	ldr	r0, [r3, #0]
   129d4:	4770      	bx	lr
   129d6:	bf00      	nop
   129d8:	2000951c 	.word	0x2000951c

000129dc <__libc_init_array>:
   129dc:	b570      	push	{r4, r5, r6, lr}
   129de:	4e0d      	ldr	r6, [pc, #52]	; (12a14 <__libc_init_array+0x38>)
   129e0:	4d0d      	ldr	r5, [pc, #52]	; (12a18 <__libc_init_array+0x3c>)
   129e2:	1b76      	subs	r6, r6, r5
   129e4:	10b6      	asrs	r6, r6, #2
   129e6:	d006      	beq.n	129f6 <__libc_init_array+0x1a>
   129e8:	2400      	movs	r4, #0
   129ea:	f855 3b04 	ldr.w	r3, [r5], #4
   129ee:	3401      	adds	r4, #1
   129f0:	4798      	blx	r3
   129f2:	42a6      	cmp	r6, r4
   129f4:	d1f9      	bne.n	129ea <__libc_init_array+0xe>
   129f6:	4e09      	ldr	r6, [pc, #36]	; (12a1c <__libc_init_array+0x40>)
   129f8:	4d09      	ldr	r5, [pc, #36]	; (12a20 <__libc_init_array+0x44>)
   129fa:	1b76      	subs	r6, r6, r5
   129fc:	f008 fc78 	bl	1b2f0 <___init_veneer>
   12a00:	10b6      	asrs	r6, r6, #2
   12a02:	d006      	beq.n	12a12 <__libc_init_array+0x36>
   12a04:	2400      	movs	r4, #0
   12a06:	f855 3b04 	ldr.w	r3, [r5], #4
   12a0a:	3401      	adds	r4, #1
   12a0c:	4798      	blx	r3
   12a0e:	42a6      	cmp	r6, r4
   12a10:	d1f9      	bne.n	12a06 <__libc_init_array+0x2a>
   12a12:	bd70      	pop	{r4, r5, r6, pc}
   12a14:	60002818 	.word	0x60002818
   12a18:	60002818 	.word	0x60002818
   12a1c:	6000282c 	.word	0x6000282c
   12a20:	60002818 	.word	0x60002818

00012a24 <__retarget_lock_init_recursive>:
   12a24:	4770      	bx	lr
   12a26:	bf00      	nop

00012a28 <__retarget_lock_close_recursive>:
   12a28:	4770      	bx	lr
   12a2a:	bf00      	nop

00012a2c <__retarget_lock_acquire_recursive>:
   12a2c:	4770      	bx	lr
   12a2e:	bf00      	nop

00012a30 <__retarget_lock_release_recursive>:
   12a30:	4770      	bx	lr
   12a32:	bf00      	nop
	...
   12a40:	eba2 0003 	sub.w	r0, r2, r3
   12a44:	4770      	bx	lr
   12a46:	bf00      	nop

00012a48 <strcmp>:
   12a48:	7802      	ldrb	r2, [r0, #0]
   12a4a:	780b      	ldrb	r3, [r1, #0]
   12a4c:	2a01      	cmp	r2, #1
   12a4e:	bf28      	it	cs
   12a50:	429a      	cmpcs	r2, r3
   12a52:	d1f5      	bne.n	12a40 <__retarget_lock_release_recursive+0x10>
   12a54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   12a58:	ea40 0401 	orr.w	r4, r0, r1
   12a5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   12a60:	f06f 0c00 	mvn.w	ip, #0
   12a64:	ea4f 7244 	mov.w	r2, r4, lsl #29
   12a68:	b312      	cbz	r2, 12ab0 <strcmp+0x68>
   12a6a:	ea80 0401 	eor.w	r4, r0, r1
   12a6e:	f014 0f07 	tst.w	r4, #7
   12a72:	d16a      	bne.n	12b4a <strcmp+0x102>
   12a74:	f000 0407 	and.w	r4, r0, #7
   12a78:	f020 0007 	bic.w	r0, r0, #7
   12a7c:	f004 0503 	and.w	r5, r4, #3
   12a80:	f021 0107 	bic.w	r1, r1, #7
   12a84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12a88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12a8c:	f014 0f04 	tst.w	r4, #4
   12a90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12a94:	fa0c f405 	lsl.w	r4, ip, r5
   12a98:	ea62 0204 	orn	r2, r2, r4
   12a9c:	ea66 0604 	orn	r6, r6, r4
   12aa0:	d00a      	beq.n	12ab8 <strcmp+0x70>
   12aa2:	ea63 0304 	orn	r3, r3, r4
   12aa6:	4662      	mov	r2, ip
   12aa8:	ea67 0704 	orn	r7, r7, r4
   12aac:	4666      	mov	r6, ip
   12aae:	e003      	b.n	12ab8 <strcmp+0x70>
   12ab0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12ab4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12ab8:	fa82 f54c 	uadd8	r5, r2, ip
   12abc:	ea82 0406 	eor.w	r4, r2, r6
   12ac0:	faa4 f48c 	sel	r4, r4, ip
   12ac4:	bb6c      	cbnz	r4, 12b22 <strcmp+0xda>
   12ac6:	fa83 f54c 	uadd8	r5, r3, ip
   12aca:	ea83 0507 	eor.w	r5, r3, r7
   12ace:	faa5 f58c 	sel	r5, r5, ip
   12ad2:	b995      	cbnz	r5, 12afa <strcmp+0xb2>
   12ad4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   12ad8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   12adc:	fa82 f54c 	uadd8	r5, r2, ip
   12ae0:	ea82 0406 	eor.w	r4, r2, r6
   12ae4:	faa4 f48c 	sel	r4, r4, ip
   12ae8:	fa83 f54c 	uadd8	r5, r3, ip
   12aec:	ea83 0507 	eor.w	r5, r3, r7
   12af0:	faa5 f58c 	sel	r5, r5, ip
   12af4:	4325      	orrs	r5, r4
   12af6:	d0db      	beq.n	12ab0 <strcmp+0x68>
   12af8:	b99c      	cbnz	r4, 12b22 <strcmp+0xda>
   12afa:	ba2d      	rev	r5, r5
   12afc:	fab5 f485 	clz	r4, r5
   12b00:	f024 0407 	bic.w	r4, r4, #7
   12b04:	fa27 f104 	lsr.w	r1, r7, r4
   12b08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12b0c:	fa23 f304 	lsr.w	r3, r3, r4
   12b10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12b14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12b18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12b1c:	eba0 0001 	sub.w	r0, r0, r1
   12b20:	4770      	bx	lr
   12b22:	ba24      	rev	r4, r4
   12b24:	fab4 f484 	clz	r4, r4
   12b28:	f024 0407 	bic.w	r4, r4, #7
   12b2c:	fa26 f104 	lsr.w	r1, r6, r4
   12b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12b34:	fa22 f204 	lsr.w	r2, r2, r4
   12b38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12b3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12b40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12b44:	eba0 0001 	sub.w	r0, r0, r1
   12b48:	4770      	bx	lr
   12b4a:	f014 0f03 	tst.w	r4, #3
   12b4e:	d13c      	bne.n	12bca <strcmp+0x182>
   12b50:	f010 0403 	ands.w	r4, r0, #3
   12b54:	d128      	bne.n	12ba8 <strcmp+0x160>
   12b56:	f850 2b08 	ldr.w	r2, [r0], #8
   12b5a:	f851 3b08 	ldr.w	r3, [r1], #8
   12b5e:	fa82 f54c 	uadd8	r5, r2, ip
   12b62:	ea82 0503 	eor.w	r5, r2, r3
   12b66:	faa5 f58c 	sel	r5, r5, ip
   12b6a:	b95d      	cbnz	r5, 12b84 <strcmp+0x13c>
   12b6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   12b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12b74:	fa82 f54c 	uadd8	r5, r2, ip
   12b78:	ea82 0503 	eor.w	r5, r2, r3
   12b7c:	faa5 f58c 	sel	r5, r5, ip
   12b80:	2d00      	cmp	r5, #0
   12b82:	d0e8      	beq.n	12b56 <strcmp+0x10e>
   12b84:	ba2d      	rev	r5, r5
   12b86:	fab5 f485 	clz	r4, r5
   12b8a:	f024 0407 	bic.w	r4, r4, #7
   12b8e:	fa23 f104 	lsr.w	r1, r3, r4
   12b92:	fa22 f204 	lsr.w	r2, r2, r4
   12b96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12b9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12b9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12ba2:	eba0 0001 	sub.w	r0, r0, r1
   12ba6:	4770      	bx	lr
   12ba8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   12bac:	f020 0003 	bic.w	r0, r0, #3
   12bb0:	f850 2b08 	ldr.w	r2, [r0], #8
   12bb4:	f021 0103 	bic.w	r1, r1, #3
   12bb8:	f851 3b08 	ldr.w	r3, [r1], #8
   12bbc:	fa0c f404 	lsl.w	r4, ip, r4
   12bc0:	ea62 0204 	orn	r2, r2, r4
   12bc4:	ea63 0304 	orn	r3, r3, r4
   12bc8:	e7c9      	b.n	12b5e <strcmp+0x116>
   12bca:	f010 0403 	ands.w	r4, r0, #3
   12bce:	d01a      	beq.n	12c06 <strcmp+0x1be>
   12bd0:	eba1 0104 	sub.w	r1, r1, r4
   12bd4:	f020 0003 	bic.w	r0, r0, #3
   12bd8:	07e4      	lsls	r4, r4, #31
   12bda:	f850 2b04 	ldr.w	r2, [r0], #4
   12bde:	d006      	beq.n	12bee <strcmp+0x1a6>
   12be0:	d20f      	bcs.n	12c02 <strcmp+0x1ba>
   12be2:	788b      	ldrb	r3, [r1, #2]
   12be4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   12be8:	1ae4      	subs	r4, r4, r3
   12bea:	d106      	bne.n	12bfa <strcmp+0x1b2>
   12bec:	b12b      	cbz	r3, 12bfa <strcmp+0x1b2>
   12bee:	78cb      	ldrb	r3, [r1, #3]
   12bf0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   12bf4:	1ae4      	subs	r4, r4, r3
   12bf6:	d100      	bne.n	12bfa <strcmp+0x1b2>
   12bf8:	b91b      	cbnz	r3, 12c02 <strcmp+0x1ba>
   12bfa:	4620      	mov	r0, r4
   12bfc:	f85d 4b10 	ldr.w	r4, [sp], #16
   12c00:	4770      	bx	lr
   12c02:	f101 0104 	add.w	r1, r1, #4
   12c06:	f850 2b04 	ldr.w	r2, [r0], #4
   12c0a:	07cc      	lsls	r4, r1, #31
   12c0c:	f021 0103 	bic.w	r1, r1, #3
   12c10:	f851 3b04 	ldr.w	r3, [r1], #4
   12c14:	d848      	bhi.n	12ca8 <strcmp+0x260>
   12c16:	d224      	bcs.n	12c62 <strcmp+0x21a>
   12c18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   12c1c:	fa82 f54c 	uadd8	r5, r2, ip
   12c20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   12c24:	faa5 f58c 	sel	r5, r5, ip
   12c28:	d10a      	bne.n	12c40 <strcmp+0x1f8>
   12c2a:	b965      	cbnz	r5, 12c46 <strcmp+0x1fe>
   12c2c:	f851 3b04 	ldr.w	r3, [r1], #4
   12c30:	ea84 0402 	eor.w	r4, r4, r2
   12c34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   12c38:	d10e      	bne.n	12c58 <strcmp+0x210>
   12c3a:	f850 2b04 	ldr.w	r2, [r0], #4
   12c3e:	e7eb      	b.n	12c18 <strcmp+0x1d0>
   12c40:	ea4f 2313 	mov.w	r3, r3, lsr #8
   12c44:	e055      	b.n	12cf2 <strcmp+0x2aa>
   12c46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   12c4a:	d14d      	bne.n	12ce8 <strcmp+0x2a0>
   12c4c:	7808      	ldrb	r0, [r1, #0]
   12c4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12c52:	f1c0 0000 	rsb	r0, r0, #0
   12c56:	4770      	bx	lr
   12c58:	ea4f 6212 	mov.w	r2, r2, lsr #24
   12c5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12c60:	e047      	b.n	12cf2 <strcmp+0x2aa>
   12c62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   12c66:	fa82 f54c 	uadd8	r5, r2, ip
   12c6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   12c6e:	faa5 f58c 	sel	r5, r5, ip
   12c72:	d10a      	bne.n	12c8a <strcmp+0x242>
   12c74:	b965      	cbnz	r5, 12c90 <strcmp+0x248>
   12c76:	f851 3b04 	ldr.w	r3, [r1], #4
   12c7a:	ea84 0402 	eor.w	r4, r4, r2
   12c7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   12c82:	d10c      	bne.n	12c9e <strcmp+0x256>
   12c84:	f850 2b04 	ldr.w	r2, [r0], #4
   12c88:	e7eb      	b.n	12c62 <strcmp+0x21a>
   12c8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   12c8e:	e030      	b.n	12cf2 <strcmp+0x2aa>
   12c90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   12c94:	d128      	bne.n	12ce8 <strcmp+0x2a0>
   12c96:	880b      	ldrh	r3, [r1, #0]
   12c98:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12c9c:	e029      	b.n	12cf2 <strcmp+0x2aa>
   12c9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12ca2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   12ca6:	e024      	b.n	12cf2 <strcmp+0x2aa>
   12ca8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   12cac:	fa82 f54c 	uadd8	r5, r2, ip
   12cb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   12cb4:	faa5 f58c 	sel	r5, r5, ip
   12cb8:	d10a      	bne.n	12cd0 <strcmp+0x288>
   12cba:	b965      	cbnz	r5, 12cd6 <strcmp+0x28e>
   12cbc:	f851 3b04 	ldr.w	r3, [r1], #4
   12cc0:	ea84 0402 	eor.w	r4, r4, r2
   12cc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   12cc8:	d109      	bne.n	12cde <strcmp+0x296>
   12cca:	f850 2b04 	ldr.w	r2, [r0], #4
   12cce:	e7eb      	b.n	12ca8 <strcmp+0x260>
   12cd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   12cd4:	e00d      	b.n	12cf2 <strcmp+0x2aa>
   12cd6:	f015 0fff 	tst.w	r5, #255	; 0xff
   12cda:	d105      	bne.n	12ce8 <strcmp+0x2a0>
   12cdc:	680b      	ldr	r3, [r1, #0]
   12cde:	ea4f 2212 	mov.w	r2, r2, lsr #8
   12ce2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12ce6:	e004      	b.n	12cf2 <strcmp+0x2aa>
   12ce8:	f04f 0000 	mov.w	r0, #0
   12cec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12cf0:	4770      	bx	lr
   12cf2:	ba12      	rev	r2, r2
   12cf4:	ba1b      	rev	r3, r3
   12cf6:	fa82 f44c 	uadd8	r4, r2, ip
   12cfa:	ea82 0403 	eor.w	r4, r2, r3
   12cfe:	faa4 f58c 	sel	r5, r4, ip
   12d02:	fab5 f485 	clz	r4, r5
   12d06:	fa02 f204 	lsl.w	r2, r2, r4
   12d0a:	fa03 f304 	lsl.w	r3, r3, r4
   12d0e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12d12:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12d16:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   12d1a:	4770      	bx	lr

00012d1c <strcpy>:
   12d1c:	ea80 0201 	eor.w	r2, r0, r1
   12d20:	4684      	mov	ip, r0
   12d22:	f012 0f03 	tst.w	r2, #3
   12d26:	d14f      	bne.n	12dc8 <strcpy+0xac>
   12d28:	f011 0f03 	tst.w	r1, #3
   12d2c:	d132      	bne.n	12d94 <strcpy+0x78>
   12d2e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12d32:	f011 0f04 	tst.w	r1, #4
   12d36:	f851 3b04 	ldr.w	r3, [r1], #4
   12d3a:	d00b      	beq.n	12d54 <strcpy+0x38>
   12d3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12d40:	439a      	bics	r2, r3
   12d42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12d46:	bf04      	itt	eq
   12d48:	f84c 3b04 	streq.w	r3, [ip], #4
   12d4c:	f851 3b04 	ldreq.w	r3, [r1], #4
   12d50:	d116      	bne.n	12d80 <strcpy+0x64>
   12d52:	bf00      	nop
   12d54:	f851 4b04 	ldr.w	r4, [r1], #4
   12d58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12d5c:	439a      	bics	r2, r3
   12d5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12d62:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12d66:	d10b      	bne.n	12d80 <strcpy+0x64>
   12d68:	f84c 3b04 	str.w	r3, [ip], #4
   12d6c:	43a2      	bics	r2, r4
   12d6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12d72:	bf04      	itt	eq
   12d74:	f851 3b04 	ldreq.w	r3, [r1], #4
   12d78:	f84c 4b04 	streq.w	r4, [ip], #4
   12d7c:	d0ea      	beq.n	12d54 <strcpy+0x38>
   12d7e:	4623      	mov	r3, r4
   12d80:	f80c 3b01 	strb.w	r3, [ip], #1
   12d84:	f013 0fff 	tst.w	r3, #255	; 0xff
   12d88:	ea4f 2333 	mov.w	r3, r3, ror #8
   12d8c:	d1f8      	bne.n	12d80 <strcpy+0x64>
   12d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12d92:	4770      	bx	lr
   12d94:	f011 0f01 	tst.w	r1, #1
   12d98:	d006      	beq.n	12da8 <strcpy+0x8c>
   12d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   12d9e:	f80c 2b01 	strb.w	r2, [ip], #1
   12da2:	2a00      	cmp	r2, #0
   12da4:	bf08      	it	eq
   12da6:	4770      	bxeq	lr
   12da8:	f011 0f02 	tst.w	r1, #2
   12dac:	d0bf      	beq.n	12d2e <strcpy+0x12>
   12dae:	f831 2b02 	ldrh.w	r2, [r1], #2
   12db2:	f012 0fff 	tst.w	r2, #255	; 0xff
   12db6:	bf16      	itet	ne
   12db8:	f82c 2b02 	strhne.w	r2, [ip], #2
   12dbc:	f88c 2000 	strbeq.w	r2, [ip]
   12dc0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12dc4:	d1b3      	bne.n	12d2e <strcpy+0x12>
   12dc6:	4770      	bx	lr
   12dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
   12dcc:	f80c 2b01 	strb.w	r2, [ip], #1
   12dd0:	2a00      	cmp	r2, #0
   12dd2:	d1f9      	bne.n	12dc8 <strcpy+0xac>
   12dd4:	4770      	bx	lr
   12dd6:	bf00      	nop
	...

00012de0 <memchr>:
   12de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12de4:	2a10      	cmp	r2, #16
   12de6:	db2b      	blt.n	12e40 <memchr+0x60>
   12de8:	f010 0f07 	tst.w	r0, #7
   12dec:	d008      	beq.n	12e00 <memchr+0x20>
   12dee:	f810 3b01 	ldrb.w	r3, [r0], #1
   12df2:	3a01      	subs	r2, #1
   12df4:	428b      	cmp	r3, r1
   12df6:	d02d      	beq.n	12e54 <memchr+0x74>
   12df8:	f010 0f07 	tst.w	r0, #7
   12dfc:	b342      	cbz	r2, 12e50 <memchr+0x70>
   12dfe:	d1f6      	bne.n	12dee <memchr+0xe>
   12e00:	b4f0      	push	{r4, r5, r6, r7}
   12e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   12e0a:	f022 0407 	bic.w	r4, r2, #7
   12e0e:	f07f 0700 	mvns.w	r7, #0
   12e12:	2300      	movs	r3, #0
   12e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12e18:	3c08      	subs	r4, #8
   12e1a:	ea85 0501 	eor.w	r5, r5, r1
   12e1e:	ea86 0601 	eor.w	r6, r6, r1
   12e22:	fa85 f547 	uadd8	r5, r5, r7
   12e26:	faa3 f587 	sel	r5, r3, r7
   12e2a:	fa86 f647 	uadd8	r6, r6, r7
   12e2e:	faa5 f687 	sel	r6, r5, r7
   12e32:	b98e      	cbnz	r6, 12e58 <memchr+0x78>
   12e34:	d1ee      	bne.n	12e14 <memchr+0x34>
   12e36:	bcf0      	pop	{r4, r5, r6, r7}
   12e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12e3c:	f002 0207 	and.w	r2, r2, #7
   12e40:	b132      	cbz	r2, 12e50 <memchr+0x70>
   12e42:	f810 3b01 	ldrb.w	r3, [r0], #1
   12e46:	3a01      	subs	r2, #1
   12e48:	ea83 0301 	eor.w	r3, r3, r1
   12e4c:	b113      	cbz	r3, 12e54 <memchr+0x74>
   12e4e:	d1f8      	bne.n	12e42 <memchr+0x62>
   12e50:	2000      	movs	r0, #0
   12e52:	4770      	bx	lr
   12e54:	3801      	subs	r0, #1
   12e56:	4770      	bx	lr
   12e58:	2d00      	cmp	r5, #0
   12e5a:	bf06      	itte	eq
   12e5c:	4635      	moveq	r5, r6
   12e5e:	3803      	subeq	r0, #3
   12e60:	3807      	subne	r0, #7
   12e62:	f015 0f01 	tst.w	r5, #1
   12e66:	d107      	bne.n	12e78 <memchr+0x98>
   12e68:	3001      	adds	r0, #1
   12e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
   12e6e:	bf02      	ittt	eq
   12e70:	3001      	addeq	r0, #1
   12e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12e76:	3001      	addeq	r0, #1
   12e78:	bcf0      	pop	{r4, r5, r6, r7}
   12e7a:	3801      	subs	r0, #1
   12e7c:	4770      	bx	lr
   12e7e:	bf00      	nop

00012e80 <strlen>:
   12e80:	f890 f000 	pld	[r0]
   12e84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12e88:	f020 0107 	bic.w	r1, r0, #7
   12e8c:	f06f 0c00 	mvn.w	ip, #0
   12e90:	f010 0407 	ands.w	r4, r0, #7
   12e94:	f891 f020 	pld	[r1, #32]
   12e98:	f040 8049 	bne.w	12f2e <strlen+0xae>
   12e9c:	f04f 0400 	mov.w	r4, #0
   12ea0:	f06f 0007 	mvn.w	r0, #7
   12ea4:	e9d1 2300 	ldrd	r2, r3, [r1]
   12ea8:	f891 f040 	pld	[r1, #64]	; 0x40
   12eac:	f100 0008 	add.w	r0, r0, #8
   12eb0:	fa82 f24c 	uadd8	r2, r2, ip
   12eb4:	faa4 f28c 	sel	r2, r4, ip
   12eb8:	fa83 f34c 	uadd8	r3, r3, ip
   12ebc:	faa2 f38c 	sel	r3, r2, ip
   12ec0:	bb4b      	cbnz	r3, 12f16 <strlen+0x96>
   12ec2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12ec6:	fa82 f24c 	uadd8	r2, r2, ip
   12eca:	f100 0008 	add.w	r0, r0, #8
   12ece:	faa4 f28c 	sel	r2, r4, ip
   12ed2:	fa83 f34c 	uadd8	r3, r3, ip
   12ed6:	faa2 f38c 	sel	r3, r2, ip
   12eda:	b9e3      	cbnz	r3, 12f16 <strlen+0x96>
   12edc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12ee0:	fa82 f24c 	uadd8	r2, r2, ip
   12ee4:	f100 0008 	add.w	r0, r0, #8
   12ee8:	faa4 f28c 	sel	r2, r4, ip
   12eec:	fa83 f34c 	uadd8	r3, r3, ip
   12ef0:	faa2 f38c 	sel	r3, r2, ip
   12ef4:	b97b      	cbnz	r3, 12f16 <strlen+0x96>
   12ef6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12efa:	f101 0120 	add.w	r1, r1, #32
   12efe:	fa82 f24c 	uadd8	r2, r2, ip
   12f02:	f100 0008 	add.w	r0, r0, #8
   12f06:	faa4 f28c 	sel	r2, r4, ip
   12f0a:	fa83 f34c 	uadd8	r3, r3, ip
   12f0e:	faa2 f38c 	sel	r3, r2, ip
   12f12:	2b00      	cmp	r3, #0
   12f14:	d0c6      	beq.n	12ea4 <strlen+0x24>
   12f16:	2a00      	cmp	r2, #0
   12f18:	bf04      	itt	eq
   12f1a:	3004      	addeq	r0, #4
   12f1c:	461a      	moveq	r2, r3
   12f1e:	ba12      	rev	r2, r2
   12f20:	fab2 f282 	clz	r2, r2
   12f24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12f28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   12f2c:	4770      	bx	lr
   12f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   12f32:	f004 0503 	and.w	r5, r4, #3
   12f36:	f1c4 0000 	rsb	r0, r4, #0
   12f3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12f3e:	f014 0f04 	tst.w	r4, #4
   12f42:	f891 f040 	pld	[r1, #64]	; 0x40
   12f46:	fa0c f505 	lsl.w	r5, ip, r5
   12f4a:	ea62 0205 	orn	r2, r2, r5
   12f4e:	bf1c      	itt	ne
   12f50:	ea63 0305 	ornne	r3, r3, r5
   12f54:	4662      	movne	r2, ip
   12f56:	f04f 0400 	mov.w	r4, #0
   12f5a:	e7a9      	b.n	12eb0 <strlen+0x30>
   12f5c:	0000      	movs	r0, r0
	...

00012f60 <nan>:
   12f60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12f68 <nan+0x8>
   12f64:	4770      	bx	lr
   12f66:	bf00      	nop
   12f68:	00000000 	.word	0x00000000
   12f6c:	7ff80000 	.word	0x7ff80000

00012f70 <nanf>:
   12f70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 12f78 <nanf+0x8>
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop
   12f78:	7fc00000 	.word	0x7fc00000

00012f7c <__register_exitproc>:
   12f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f80:	f8df a07c 	ldr.w	sl, [pc, #124]	; 13000 <__register_exitproc+0x84>
   12f84:	4606      	mov	r6, r0
   12f86:	f8da 0000 	ldr.w	r0, [sl]
   12f8a:	4698      	mov	r8, r3
   12f8c:	460f      	mov	r7, r1
   12f8e:	4691      	mov	r9, r2
   12f90:	f7ff fd4c 	bl	12a2c <__retarget_lock_acquire_recursive>
   12f94:	4b18      	ldr	r3, [pc, #96]	; (12ff8 <__register_exitproc+0x7c>)
   12f96:	681c      	ldr	r4, [r3, #0]
   12f98:	b324      	cbz	r4, 12fe4 <__register_exitproc+0x68>
   12f9a:	6865      	ldr	r5, [r4, #4]
   12f9c:	2d1f      	cmp	r5, #31
   12f9e:	dc24      	bgt.n	12fea <__register_exitproc+0x6e>
   12fa0:	b95e      	cbnz	r6, 12fba <__register_exitproc+0x3e>
   12fa2:	1c6b      	adds	r3, r5, #1
   12fa4:	3502      	adds	r5, #2
   12fa6:	f8da 0000 	ldr.w	r0, [sl]
   12faa:	6063      	str	r3, [r4, #4]
   12fac:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   12fb0:	f7ff fd3e 	bl	12a30 <__retarget_lock_release_recursive>
   12fb4:	2000      	movs	r0, #0
   12fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12fba:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   12fbe:	2301      	movs	r3, #1
   12fc0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12fc4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   12fc8:	40ab      	lsls	r3, r5
   12fca:	431a      	orrs	r2, r3
   12fcc:	2e02      	cmp	r6, #2
   12fce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   12fd2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12fd6:	d1e4      	bne.n	12fa2 <__register_exitproc+0x26>
   12fd8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   12fdc:	431a      	orrs	r2, r3
   12fde:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   12fe2:	e7de      	b.n	12fa2 <__register_exitproc+0x26>
   12fe4:	4c05      	ldr	r4, [pc, #20]	; (12ffc <__register_exitproc+0x80>)
   12fe6:	601c      	str	r4, [r3, #0]
   12fe8:	e7d7      	b.n	12f9a <__register_exitproc+0x1e>
   12fea:	f8da 0000 	ldr.w	r0, [sl]
   12fee:	f7ff fd1f 	bl	12a30 <__retarget_lock_release_recursive>
   12ff2:	f04f 30ff 	mov.w	r0, #4294967295
   12ff6:	e7de      	b.n	12fb6 <__register_exitproc+0x3a>
   12ff8:	20024dcc 	.word	0x20024dcc
   12ffc:	20024dd0 	.word	0x20024dd0
   13000:	20008f88 	.word	0x20008f88

00013004 <_malloc_trim_r>:
   13004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13006:	4f24      	ldr	r7, [pc, #144]	; (13098 <_malloc_trim_r+0x94>)
   13008:	460c      	mov	r4, r1
   1300a:	4606      	mov	r6, r0
   1300c:	f7fd fe94 	bl	10d38 <__malloc_lock>
   13010:	68bb      	ldr	r3, [r7, #8]
   13012:	685d      	ldr	r5, [r3, #4]
   13014:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   13018:	310f      	adds	r1, #15
   1301a:	f025 0503 	bic.w	r5, r5, #3
   1301e:	194b      	adds	r3, r1, r5
   13020:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   13024:	f023 030f 	bic.w	r3, r3, #15
   13028:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1302c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   13030:	db07      	blt.n	13042 <_malloc_trim_r+0x3e>
   13032:	2100      	movs	r1, #0
   13034:	4630      	mov	r0, r6
   13036:	f7ff fca3 	bl	12980 <_sbrk_r>
   1303a:	68bb      	ldr	r3, [r7, #8]
   1303c:	442b      	add	r3, r5
   1303e:	4298      	cmp	r0, r3
   13040:	d004      	beq.n	1304c <_malloc_trim_r+0x48>
   13042:	4630      	mov	r0, r6
   13044:	f7fd fe7e 	bl	10d44 <__malloc_unlock>
   13048:	2000      	movs	r0, #0
   1304a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1304c:	4261      	negs	r1, r4
   1304e:	4630      	mov	r0, r6
   13050:	f7ff fc96 	bl	12980 <_sbrk_r>
   13054:	3001      	adds	r0, #1
   13056:	d00d      	beq.n	13074 <_malloc_trim_r+0x70>
   13058:	4a10      	ldr	r2, [pc, #64]	; (1309c <_malloc_trim_r+0x98>)
   1305a:	68bb      	ldr	r3, [r7, #8]
   1305c:	1b2d      	subs	r5, r5, r4
   1305e:	f045 0501 	orr.w	r5, r5, #1
   13062:	605d      	str	r5, [r3, #4]
   13064:	6813      	ldr	r3, [r2, #0]
   13066:	4630      	mov	r0, r6
   13068:	1b1b      	subs	r3, r3, r4
   1306a:	6013      	str	r3, [r2, #0]
   1306c:	f7fd fe6a 	bl	10d44 <__malloc_unlock>
   13070:	2001      	movs	r0, #1
   13072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13074:	2100      	movs	r1, #0
   13076:	4630      	mov	r0, r6
   13078:	f7ff fc82 	bl	12980 <_sbrk_r>
   1307c:	68ba      	ldr	r2, [r7, #8]
   1307e:	1a83      	subs	r3, r0, r2
   13080:	2b0f      	cmp	r3, #15
   13082:	ddde      	ble.n	13042 <_malloc_trim_r+0x3e>
   13084:	f043 0301 	orr.w	r3, r3, #1
   13088:	6053      	str	r3, [r2, #4]
   1308a:	4b05      	ldr	r3, [pc, #20]	; (130a0 <_malloc_trim_r+0x9c>)
   1308c:	4903      	ldr	r1, [pc, #12]	; (1309c <_malloc_trim_r+0x98>)
   1308e:	681b      	ldr	r3, [r3, #0]
   13090:	1ac0      	subs	r0, r0, r3
   13092:	6008      	str	r0, [r1, #0]
   13094:	e7d5      	b.n	13042 <_malloc_trim_r+0x3e>
   13096:	bf00      	nop
   13098:	20009100 	.word	0x20009100
   1309c:	20024f6c 	.word	0x20024f6c
   130a0:	20009508 	.word	0x20009508

000130a4 <_free_r>:
   130a4:	2900      	cmp	r1, #0
   130a6:	d061      	beq.n	1316c <_free_r+0xc8>
   130a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   130aa:	460c      	mov	r4, r1
   130ac:	4606      	mov	r6, r0
   130ae:	f7fd fe43 	bl	10d38 <__malloc_lock>
   130b2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   130b6:	4f7b      	ldr	r7, [pc, #492]	; (132a4 <_free_r+0x200>)
   130b8:	f1a4 0508 	sub.w	r5, r4, #8
   130bc:	f022 0101 	bic.w	r1, r2, #1
   130c0:	eb05 0c01 	add.w	ip, r5, r1
   130c4:	68b8      	ldr	r0, [r7, #8]
   130c6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   130ca:	4560      	cmp	r0, ip
   130cc:	f023 0303 	bic.w	r3, r3, #3
   130d0:	f000 808b 	beq.w	131ea <_free_r+0x146>
   130d4:	07d2      	lsls	r2, r2, #31
   130d6:	f8cc 3004 	str.w	r3, [ip, #4]
   130da:	d432      	bmi.n	13142 <_free_r+0x9e>
   130dc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   130e0:	1aad      	subs	r5, r5, r2
   130e2:	4411      	add	r1, r2
   130e4:	68aa      	ldr	r2, [r5, #8]
   130e6:	f107 0008 	add.w	r0, r7, #8
   130ea:	4282      	cmp	r2, r0
   130ec:	d06a      	beq.n	131c4 <_free_r+0x120>
   130ee:	eb0c 0403 	add.w	r4, ip, r3
   130f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   130f6:	68ec      	ldr	r4, [r5, #12]
   130f8:	60d4      	str	r4, [r2, #12]
   130fa:	f01e 0f01 	tst.w	lr, #1
   130fe:	60a2      	str	r2, [r4, #8]
   13100:	f000 8097 	beq.w	13232 <_free_r+0x18e>
   13104:	f041 0301 	orr.w	r3, r1, #1
   13108:	606b      	str	r3, [r5, #4]
   1310a:	f8cc 1000 	str.w	r1, [ip]
   1310e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13112:	d235      	bcs.n	13180 <_free_r+0xdc>
   13114:	6878      	ldr	r0, [r7, #4]
   13116:	08cb      	lsrs	r3, r1, #3
   13118:	2201      	movs	r2, #1
   1311a:	0949      	lsrs	r1, r1, #5
   1311c:	3301      	adds	r3, #1
   1311e:	408a      	lsls	r2, r1
   13120:	4302      	orrs	r2, r0
   13122:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   13126:	607a      	str	r2, [r7, #4]
   13128:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1312c:	3a08      	subs	r2, #8
   1312e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   13132:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   13136:	60cd      	str	r5, [r1, #12]
   13138:	4630      	mov	r0, r6
   1313a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1313e:	f7fd be01 	b.w	10d44 <__malloc_unlock>
   13142:	eb0c 0203 	add.w	r2, ip, r3
   13146:	6852      	ldr	r2, [r2, #4]
   13148:	07d0      	lsls	r0, r2, #31
   1314a:	d410      	bmi.n	1316e <_free_r+0xca>
   1314c:	4419      	add	r1, r3
   1314e:	f107 0008 	add.w	r0, r7, #8
   13152:	f8dc 3008 	ldr.w	r3, [ip, #8]
   13156:	4283      	cmp	r3, r0
   13158:	d073      	beq.n	13242 <_free_r+0x19e>
   1315a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1315e:	60da      	str	r2, [r3, #12]
   13160:	6093      	str	r3, [r2, #8]
   13162:	f041 0301 	orr.w	r3, r1, #1
   13166:	606b      	str	r3, [r5, #4]
   13168:	5069      	str	r1, [r5, r1]
   1316a:	e7d0      	b.n	1310e <_free_r+0x6a>
   1316c:	4770      	bx	lr
   1316e:	f041 0301 	orr.w	r3, r1, #1
   13172:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   13176:	f844 3c04 	str.w	r3, [r4, #-4]
   1317a:	f8cc 1000 	str.w	r1, [ip]
   1317e:	d3c9      	bcc.n	13114 <_free_r+0x70>
   13180:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   13184:	ea4f 2351 	mov.w	r3, r1, lsr #9
   13188:	d248      	bcs.n	1321c <_free_r+0x178>
   1318a:	098b      	lsrs	r3, r1, #6
   1318c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   13190:	f103 0238 	add.w	r2, r3, #56	; 0x38
   13194:	00c3      	lsls	r3, r0, #3
   13196:	18f8      	adds	r0, r7, r3
   13198:	58fb      	ldr	r3, [r7, r3]
   1319a:	3808      	subs	r0, #8
   1319c:	4298      	cmp	r0, r3
   1319e:	d059      	beq.n	13254 <_free_r+0x1b0>
   131a0:	685a      	ldr	r2, [r3, #4]
   131a2:	f022 0203 	bic.w	r2, r2, #3
   131a6:	428a      	cmp	r2, r1
   131a8:	d902      	bls.n	131b0 <_free_r+0x10c>
   131aa:	689b      	ldr	r3, [r3, #8]
   131ac:	4298      	cmp	r0, r3
   131ae:	d1f7      	bne.n	131a0 <_free_r+0xfc>
   131b0:	68d8      	ldr	r0, [r3, #12]
   131b2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   131b6:	6085      	str	r5, [r0, #8]
   131b8:	60dd      	str	r5, [r3, #12]
   131ba:	4630      	mov	r0, r6
   131bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   131c0:	f7fd bdc0 	b.w	10d44 <__malloc_unlock>
   131c4:	eb0c 0203 	add.w	r2, ip, r3
   131c8:	6852      	ldr	r2, [r2, #4]
   131ca:	07d2      	lsls	r2, r2, #31
   131cc:	d463      	bmi.n	13296 <_free_r+0x1f2>
   131ce:	440b      	add	r3, r1
   131d0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   131d4:	60ca      	str	r2, [r1, #12]
   131d6:	6091      	str	r1, [r2, #8]
   131d8:	f043 0201 	orr.w	r2, r3, #1
   131dc:	606a      	str	r2, [r5, #4]
   131de:	4630      	mov	r0, r6
   131e0:	50eb      	str	r3, [r5, r3]
   131e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   131e6:	f7fd bdad 	b.w	10d44 <__malloc_unlock>
   131ea:	440b      	add	r3, r1
   131ec:	07d1      	lsls	r1, r2, #31
   131ee:	d407      	bmi.n	13200 <_free_r+0x15c>
   131f0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   131f4:	1aad      	subs	r5, r5, r2
   131f6:	4413      	add	r3, r2
   131f8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   131fc:	60ca      	str	r2, [r1, #12]
   131fe:	6091      	str	r1, [r2, #8]
   13200:	f043 0201 	orr.w	r2, r3, #1
   13204:	606a      	str	r2, [r5, #4]
   13206:	4a28      	ldr	r2, [pc, #160]	; (132a8 <_free_r+0x204>)
   13208:	60bd      	str	r5, [r7, #8]
   1320a:	6812      	ldr	r2, [r2, #0]
   1320c:	429a      	cmp	r2, r3
   1320e:	d893      	bhi.n	13138 <_free_r+0x94>
   13210:	4b26      	ldr	r3, [pc, #152]	; (132ac <_free_r+0x208>)
   13212:	4630      	mov	r0, r6
   13214:	6819      	ldr	r1, [r3, #0]
   13216:	f7ff fef5 	bl	13004 <_malloc_trim_r>
   1321a:	e78d      	b.n	13138 <_free_r+0x94>
   1321c:	2b14      	cmp	r3, #20
   1321e:	d90a      	bls.n	13236 <_free_r+0x192>
   13220:	2b54      	cmp	r3, #84	; 0x54
   13222:	d81f      	bhi.n	13264 <_free_r+0x1c0>
   13224:	0b0b      	lsrs	r3, r1, #12
   13226:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1322a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1322e:	00c3      	lsls	r3, r0, #3
   13230:	e7b1      	b.n	13196 <_free_r+0xf2>
   13232:	4419      	add	r1, r3
   13234:	e78d      	b.n	13152 <_free_r+0xae>
   13236:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1323a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1323e:	00c3      	lsls	r3, r0, #3
   13240:	e7a9      	b.n	13196 <_free_r+0xf2>
   13242:	f041 0301 	orr.w	r3, r1, #1
   13246:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1324a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1324e:	606b      	str	r3, [r5, #4]
   13250:	5069      	str	r1, [r5, r1]
   13252:	e771      	b.n	13138 <_free_r+0x94>
   13254:	6879      	ldr	r1, [r7, #4]
   13256:	1092      	asrs	r2, r2, #2
   13258:	2401      	movs	r4, #1
   1325a:	fa04 f202 	lsl.w	r2, r4, r2
   1325e:	430a      	orrs	r2, r1
   13260:	607a      	str	r2, [r7, #4]
   13262:	e7a6      	b.n	131b2 <_free_r+0x10e>
   13264:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   13268:	d806      	bhi.n	13278 <_free_r+0x1d4>
   1326a:	0bcb      	lsrs	r3, r1, #15
   1326c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   13270:	f103 0277 	add.w	r2, r3, #119	; 0x77
   13274:	00c3      	lsls	r3, r0, #3
   13276:	e78e      	b.n	13196 <_free_r+0xf2>
   13278:	f240 5254 	movw	r2, #1364	; 0x554
   1327c:	4293      	cmp	r3, r2
   1327e:	d806      	bhi.n	1328e <_free_r+0x1ea>
   13280:	0c8b      	lsrs	r3, r1, #18
   13282:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   13286:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1328a:	00c3      	lsls	r3, r0, #3
   1328c:	e783      	b.n	13196 <_free_r+0xf2>
   1328e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   13292:	227e      	movs	r2, #126	; 0x7e
   13294:	e77f      	b.n	13196 <_free_r+0xf2>
   13296:	f041 0301 	orr.w	r3, r1, #1
   1329a:	606b      	str	r3, [r5, #4]
   1329c:	f8cc 1000 	str.w	r1, [ip]
   132a0:	e74a      	b.n	13138 <_free_r+0x94>
   132a2:	bf00      	nop
   132a4:	20009100 	.word	0x20009100
   132a8:	2000950c 	.word	0x2000950c
   132ac:	20024f9c 	.word	0x20024f9c

000132b0 <rshift>:
   132b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   132b4:	6904      	ldr	r4, [r0, #16]
   132b6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   132ba:	dd2f      	ble.n	1331c <rshift+0x6c>
   132bc:	f100 0e14 	add.w	lr, r0, #20
   132c0:	114e      	asrs	r6, r1, #5
   132c2:	f011 0c1f 	ands.w	ip, r1, #31
   132c6:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   132ca:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   132ce:	d02b      	beq.n	13328 <rshift+0x78>
   132d0:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   132d4:	3304      	adds	r3, #4
   132d6:	429d      	cmp	r5, r3
   132d8:	fa21 f10c 	lsr.w	r1, r1, ip
   132dc:	f1cc 0820 	rsb	r8, ip, #32
   132e0:	d918      	bls.n	13314 <rshift+0x64>
   132e2:	4677      	mov	r7, lr
   132e4:	681a      	ldr	r2, [r3, #0]
   132e6:	fa02 f208 	lsl.w	r2, r2, r8
   132ea:	430a      	orrs	r2, r1
   132ec:	f847 2b04 	str.w	r2, [r7], #4
   132f0:	f853 1b04 	ldr.w	r1, [r3], #4
   132f4:	429d      	cmp	r5, r3
   132f6:	fa21 f10c 	lsr.w	r1, r1, ip
   132fa:	d8f3      	bhi.n	132e4 <rshift+0x34>
   132fc:	1ba3      	subs	r3, r4, r6
   132fe:	009b      	lsls	r3, r3, #2
   13300:	3b05      	subs	r3, #5
   13302:	089b      	lsrs	r3, r3, #2
   13304:	3301      	adds	r3, #1
   13306:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1330a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1330e:	b1c9      	cbz	r1, 13344 <rshift+0x94>
   13310:	3404      	adds	r4, #4
   13312:	e017      	b.n	13344 <rshift+0x94>
   13314:	6141      	str	r1, [r0, #20]
   13316:	4674      	mov	r4, lr
   13318:	2900      	cmp	r1, #0
   1331a:	d1f9      	bne.n	13310 <rshift+0x60>
   1331c:	2300      	movs	r3, #0
   1331e:	6103      	str	r3, [r0, #16]
   13320:	2300      	movs	r3, #0
   13322:	6143      	str	r3, [r0, #20]
   13324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13328:	429d      	cmp	r5, r3
   1332a:	bf88      	it	hi
   1332c:	f100 0210 	addhi.w	r2, r0, #16
   13330:	d9f4      	bls.n	1331c <rshift+0x6c>
   13332:	f853 1b04 	ldr.w	r1, [r3], #4
   13336:	f842 1f04 	str.w	r1, [r2, #4]!
   1333a:	429d      	cmp	r5, r3
   1333c:	d8f9      	bhi.n	13332 <rshift+0x82>
   1333e:	1ba4      	subs	r4, r4, r6
   13340:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   13344:	eba4 030e 	sub.w	r3, r4, lr
   13348:	109b      	asrs	r3, r3, #2
   1334a:	4574      	cmp	r4, lr
   1334c:	6103      	str	r3, [r0, #16]
   1334e:	d0e7      	beq.n	13320 <rshift+0x70>
   13350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013354 <__gethex>:
   13354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13358:	ed2d 8b02 	vpush	{d8}
   1335c:	680c      	ldr	r4, [r1, #0]
   1335e:	468b      	mov	fp, r1
   13360:	78a1      	ldrb	r1, [r4, #2]
   13362:	b085      	sub	sp, #20
   13364:	2930      	cmp	r1, #48	; 0x30
   13366:	ee08 0a10 	vmov	s16, r0
   1336a:	4692      	mov	sl, r2
   1336c:	9302      	str	r3, [sp, #8]
   1336e:	f040 81ce 	bne.w	1370e <__gethex+0x3ba>
   13372:	f06f 0001 	mvn.w	r0, #1
   13376:	1b00      	subs	r0, r0, r4
   13378:	1ce2      	adds	r2, r4, #3
   1337a:	1883      	adds	r3, r0, r2
   1337c:	4614      	mov	r4, r2
   1337e:	f812 1b01 	ldrb.w	r1, [r2], #1
   13382:	2930      	cmp	r1, #48	; 0x30
   13384:	d0f9      	beq.n	1337a <__gethex+0x26>
   13386:	f8df 8300 	ldr.w	r8, [pc, #768]	; 13688 <__gethex+0x334>
   1338a:	f818 2001 	ldrb.w	r2, [r8, r1]
   1338e:	2a00      	cmp	r2, #0
   13390:	f000 80e5 	beq.w	1355e <__gethex+0x20a>
   13394:	7822      	ldrb	r2, [r4, #0]
   13396:	2700      	movs	r7, #0
   13398:	f818 2002 	ldrb.w	r2, [r8, r2]
   1339c:	463d      	mov	r5, r7
   1339e:	4626      	mov	r6, r4
   133a0:	b12a      	cbz	r2, 133ae <__gethex+0x5a>
   133a2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   133a6:	f818 2002 	ldrb.w	r2, [r8, r2]
   133aa:	2a00      	cmp	r2, #0
   133ac:	d1f9      	bne.n	133a2 <__gethex+0x4e>
   133ae:	49b5      	ldr	r1, [pc, #724]	; (13684 <__gethex+0x330>)
   133b0:	9301      	str	r3, [sp, #4]
   133b2:	2201      	movs	r2, #1
   133b4:	4630      	mov	r0, r6
   133b6:	f7ff fa27 	bl	12808 <strncmp>
   133ba:	9b01      	ldr	r3, [sp, #4]
   133bc:	4681      	mov	r9, r0
   133be:	2800      	cmp	r0, #0
   133c0:	d04d      	beq.n	1345e <__gethex+0x10a>
   133c2:	2d00      	cmp	r5, #0
   133c4:	d14e      	bne.n	13464 <__gethex+0x110>
   133c6:	7832      	ldrb	r2, [r6, #0]
   133c8:	46a9      	mov	r9, r5
   133ca:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   133ce:	2a50      	cmp	r2, #80	; 0x50
   133d0:	4635      	mov	r5, r6
   133d2:	d050      	beq.n	13476 <__gethex+0x122>
   133d4:	f8cb 6000 	str.w	r6, [fp]
   133d8:	2f00      	cmp	r7, #0
   133da:	d169      	bne.n	134b0 <__gethex+0x15c>
   133dc:	1b2b      	subs	r3, r5, r4
   133de:	3b01      	subs	r3, #1
   133e0:	2b07      	cmp	r3, #7
   133e2:	4639      	mov	r1, r7
   133e4:	dd04      	ble.n	133f0 <__gethex+0x9c>
   133e6:	105b      	asrs	r3, r3, #1
   133e8:	2b07      	cmp	r3, #7
   133ea:	f101 0101 	add.w	r1, r1, #1
   133ee:	dcfa      	bgt.n	133e6 <__gethex+0x92>
   133f0:	ee18 0a10 	vmov	r0, s16
   133f4:	f000 fb82 	bl	13afc <_Balloc>
   133f8:	4683      	mov	fp, r0
   133fa:	2800      	cmp	r0, #0
   133fc:	f000 8266 	beq.w	138cc <__gethex+0x578>
   13400:	f100 0614 	add.w	r6, r0, #20
   13404:	42ac      	cmp	r4, r5
   13406:	9601      	str	r6, [sp, #4]
   13408:	f080 81d2 	bcs.w	137b0 <__gethex+0x45c>
   1340c:	2700      	movs	r7, #0
   1340e:	f8cd 900c 	str.w	r9, [sp, #12]
   13412:	499c      	ldr	r1, [pc, #624]	; (13684 <__gethex+0x330>)
   13414:	46a1      	mov	r9, r4
   13416:	463c      	mov	r4, r7
   13418:	e00c      	b.n	13434 <__gethex+0xe0>
   1341a:	2f20      	cmp	r7, #32
   1341c:	d019      	beq.n	13452 <__gethex+0xfe>
   1341e:	4638      	mov	r0, r7
   13420:	3704      	adds	r7, #4
   13422:	782a      	ldrb	r2, [r5, #0]
   13424:	f818 2002 	ldrb.w	r2, [r8, r2]
   13428:	f002 020f 	and.w	r2, r2, #15
   1342c:	4082      	lsls	r2, r0
   1342e:	4314      	orrs	r4, r2
   13430:	454d      	cmp	r5, r9
   13432:	d047      	beq.n	134c4 <__gethex+0x170>
   13434:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   13438:	2a2e      	cmp	r2, #46	; 0x2e
   1343a:	d1ee      	bne.n	1341a <__gethex+0xc6>
   1343c:	454d      	cmp	r5, r9
   1343e:	d3ec      	bcc.n	1341a <__gethex+0xc6>
   13440:	2201      	movs	r2, #1
   13442:	4628      	mov	r0, r5
   13444:	f7ff f9e0 	bl	12808 <strncmp>
   13448:	498e      	ldr	r1, [pc, #568]	; (13684 <__gethex+0x330>)
   1344a:	2800      	cmp	r0, #0
   1344c:	d0f0      	beq.n	13430 <__gethex+0xdc>
   1344e:	2f20      	cmp	r7, #32
   13450:	d1e5      	bne.n	1341e <__gethex+0xca>
   13452:	2000      	movs	r0, #0
   13454:	f846 4b04 	str.w	r4, [r6], #4
   13458:	2704      	movs	r7, #4
   1345a:	4604      	mov	r4, r0
   1345c:	e7e1      	b.n	13422 <__gethex+0xce>
   1345e:	2d00      	cmp	r5, #0
   13460:	f000 8142 	beq.w	136e8 <__gethex+0x394>
   13464:	7832      	ldrb	r2, [r6, #0]
   13466:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1346a:	1bad      	subs	r5, r5, r6
   1346c:	2a50      	cmp	r2, #80	; 0x50
   1346e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   13472:	4635      	mov	r5, r6
   13474:	d1ae      	bne.n	133d4 <__gethex+0x80>
   13476:	786a      	ldrb	r2, [r5, #1]
   13478:	2a2b      	cmp	r2, #43	; 0x2b
   1347a:	f000 8125 	beq.w	136c8 <__gethex+0x374>
   1347e:	2a2d      	cmp	r2, #45	; 0x2d
   13480:	f000 80a5 	beq.w	135ce <__gethex+0x27a>
   13484:	1c6e      	adds	r6, r5, #1
   13486:	2000      	movs	r0, #0
   13488:	f818 1002 	ldrb.w	r1, [r8, r2]
   1348c:	1e4a      	subs	r2, r1, #1
   1348e:	2a18      	cmp	r2, #24
   13490:	f200 809b 	bhi.w	135ca <__gethex+0x276>
   13494:	7872      	ldrb	r2, [r6, #1]
   13496:	f818 2002 	ldrb.w	r2, [r8, r2]
   1349a:	3910      	subs	r1, #16
   1349c:	3601      	adds	r6, #1
   1349e:	2a00      	cmp	r2, #0
   134a0:	d15a      	bne.n	13558 <__gethex+0x204>
   134a2:	b100      	cbz	r0, 134a6 <__gethex+0x152>
   134a4:	4249      	negs	r1, r1
   134a6:	4489      	add	r9, r1
   134a8:	f8cb 6000 	str.w	r6, [fp]
   134ac:	2f00      	cmp	r7, #0
   134ae:	d095      	beq.n	133dc <__gethex+0x88>
   134b0:	2b00      	cmp	r3, #0
   134b2:	bf14      	ite	ne
   134b4:	2500      	movne	r5, #0
   134b6:	2506      	moveq	r5, #6
   134b8:	4628      	mov	r0, r5
   134ba:	b005      	add	sp, #20
   134bc:	ecbd 8b02 	vpop	{d8}
   134c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   134c8:	4623      	mov	r3, r4
   134ca:	f846 3b04 	str.w	r3, [r6], #4
   134ce:	4618      	mov	r0, r3
   134d0:	9b01      	ldr	r3, [sp, #4]
   134d2:	1af6      	subs	r6, r6, r3
   134d4:	10b6      	asrs	r6, r6, #2
   134d6:	f8cb 6010 	str.w	r6, [fp, #16]
   134da:	f000 fbe9 	bl	13cb0 <__hi0bits>
   134de:	0176      	lsls	r6, r6, #5
   134e0:	f8da 4000 	ldr.w	r4, [sl]
   134e4:	1a30      	subs	r0, r6, r0
   134e6:	42a0      	cmp	r0, r4
   134e8:	dc75      	bgt.n	135d6 <__gethex+0x282>
   134ea:	f2c0 80ef 	blt.w	136cc <__gethex+0x378>
   134ee:	2700      	movs	r7, #0
   134f0:	f8da 3008 	ldr.w	r3, [sl, #8]
   134f4:	454b      	cmp	r3, r9
   134f6:	f2c0 8151 	blt.w	1379c <__gethex+0x448>
   134fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   134fe:	454b      	cmp	r3, r9
   13500:	dd4a      	ble.n	13598 <__gethex+0x244>
   13502:	eba3 0909 	sub.w	r9, r3, r9
   13506:	454c      	cmp	r4, r9
   13508:	f300 8082 	bgt.w	13610 <__gethex+0x2bc>
   1350c:	f8da 200c 	ldr.w	r2, [sl, #12]
   13510:	2a02      	cmp	r2, #2
   13512:	f000 8165 	beq.w	137e0 <__gethex+0x48c>
   13516:	2a03      	cmp	r2, #3
   13518:	f000 8181 	beq.w	1381e <__gethex+0x4ca>
   1351c:	2a01      	cmp	r2, #1
   1351e:	f000 816f 	beq.w	13800 <__gethex+0x4ac>
   13522:	ee18 0a10 	vmov	r0, s16
   13526:	4659      	mov	r1, fp
   13528:	f000 fb0e 	bl	13b48 <_Bfree>
   1352c:	2550      	movs	r5, #80	; 0x50
   1352e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13530:	2300      	movs	r3, #0
   13532:	4628      	mov	r0, r5
   13534:	6013      	str	r3, [r2, #0]
   13536:	b005      	add	sp, #20
   13538:	ecbd 8b02 	vpop	{d8}
   1353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13544:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   13548:	f1a2 0110 	sub.w	r1, r2, #16
   1354c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   13550:	f818 2002 	ldrb.w	r2, [r8, r2]
   13554:	2a00      	cmp	r2, #0
   13556:	d0a4      	beq.n	134a2 <__gethex+0x14e>
   13558:	2a19      	cmp	r2, #25
   1355a:	ddf1      	ble.n	13540 <__gethex+0x1ec>
   1355c:	e7a1      	b.n	134a2 <__gethex+0x14e>
   1355e:	4949      	ldr	r1, [pc, #292]	; (13684 <__gethex+0x330>)
   13560:	9301      	str	r3, [sp, #4]
   13562:	2201      	movs	r2, #1
   13564:	4620      	mov	r0, r4
   13566:	f7ff f94f 	bl	12808 <strncmp>
   1356a:	9b01      	ldr	r3, [sp, #4]
   1356c:	2800      	cmp	r0, #0
   1356e:	d16d      	bne.n	1364c <__gethex+0x2f8>
   13570:	7861      	ldrb	r1, [r4, #1]
   13572:	f818 2001 	ldrb.w	r2, [r8, r1]
   13576:	1c65      	adds	r5, r4, #1
   13578:	2a00      	cmp	r2, #0
   1357a:	d069      	beq.n	13650 <__gethex+0x2fc>
   1357c:	2930      	cmp	r1, #48	; 0x30
   1357e:	462c      	mov	r4, r5
   13580:	d105      	bne.n	1358e <__gethex+0x23a>
   13582:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13586:	2b30      	cmp	r3, #48	; 0x30
   13588:	d0fb      	beq.n	13582 <__gethex+0x22e>
   1358a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1358e:	fab2 f782 	clz	r7, r2
   13592:	097f      	lsrs	r7, r7, #5
   13594:	2301      	movs	r3, #1
   13596:	e702      	b.n	1339e <__gethex+0x4a>
   13598:	2501      	movs	r5, #1
   1359a:	b157      	cbz	r7, 135b2 <__gethex+0x25e>
   1359c:	f8da 300c 	ldr.w	r3, [sl, #12]
   135a0:	2b02      	cmp	r3, #2
   135a2:	d05d      	beq.n	13660 <__gethex+0x30c>
   135a4:	2b03      	cmp	r3, #3
   135a6:	d05f      	beq.n	13668 <__gethex+0x314>
   135a8:	2b01      	cmp	r3, #1
   135aa:	f000 8084 	beq.w	136b6 <__gethex+0x362>
   135ae:	f045 0510 	orr.w	r5, r5, #16
   135b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   135b4:	f8c3 b000 	str.w	fp, [r3]
   135b8:	9b02      	ldr	r3, [sp, #8]
   135ba:	4628      	mov	r0, r5
   135bc:	f8c3 9000 	str.w	r9, [r3]
   135c0:	b005      	add	sp, #20
   135c2:	ecbd 8b02 	vpop	{d8}
   135c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ca:	462e      	mov	r6, r5
   135cc:	e702      	b.n	133d4 <__gethex+0x80>
   135ce:	2001      	movs	r0, #1
   135d0:	78aa      	ldrb	r2, [r5, #2]
   135d2:	1cae      	adds	r6, r5, #2
   135d4:	e758      	b.n	13488 <__gethex+0x134>
   135d6:	1b06      	subs	r6, r0, r4
   135d8:	4631      	mov	r1, r6
   135da:	4658      	mov	r0, fp
   135dc:	f000 ff96 	bl	1450c <__any_on>
   135e0:	4607      	mov	r7, r0
   135e2:	b178      	cbz	r0, 13604 <__gethex+0x2b0>
   135e4:	1e72      	subs	r2, r6, #1
   135e6:	1153      	asrs	r3, r2, #5
   135e8:	9901      	ldr	r1, [sp, #4]
   135ea:	2701      	movs	r7, #1
   135ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   135f0:	f002 031f 	and.w	r3, r2, #31
   135f4:	fa07 f303 	lsl.w	r3, r7, r3
   135f8:	420b      	tst	r3, r1
   135fa:	d003      	beq.n	13604 <__gethex+0x2b0>
   135fc:	42ba      	cmp	r2, r7
   135fe:	f300 80e2 	bgt.w	137c6 <__gethex+0x472>
   13602:	2702      	movs	r7, #2
   13604:	4631      	mov	r1, r6
   13606:	4658      	mov	r0, fp
   13608:	44b1      	add	r9, r6
   1360a:	f7ff fe51 	bl	132b0 <rshift>
   1360e:	e76f      	b.n	134f0 <__gethex+0x19c>
   13610:	f109 35ff 	add.w	r5, r9, #4294967295
   13614:	2f00      	cmp	r7, #0
   13616:	f040 80ce 	bne.w	137b6 <__gethex+0x462>
   1361a:	2d00      	cmp	r5, #0
   1361c:	f040 80cd 	bne.w	137ba <__gethex+0x466>
   13620:	116b      	asrs	r3, r5, #5
   13622:	9a01      	ldr	r2, [sp, #4]
   13624:	f005 051f 	and.w	r5, r5, #31
   13628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1362c:	2301      	movs	r3, #1
   1362e:	40ab      	lsls	r3, r5
   13630:	4213      	tst	r3, r2
   13632:	4649      	mov	r1, r9
   13634:	4658      	mov	r0, fp
   13636:	bf18      	it	ne
   13638:	f047 0702 	orrne.w	r7, r7, #2
   1363c:	eba4 0409 	sub.w	r4, r4, r9
   13640:	f7ff fe36 	bl	132b0 <rshift>
   13644:	2502      	movs	r5, #2
   13646:	f8da 9004 	ldr.w	r9, [sl, #4]
   1364a:	e7a6      	b.n	1359a <__gethex+0x246>
   1364c:	7821      	ldrb	r1, [r4, #0]
   1364e:	4625      	mov	r5, r4
   13650:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   13654:	2950      	cmp	r1, #80	; 0x50
   13656:	f000 80bf 	beq.w	137d8 <__gethex+0x484>
   1365a:	f8cb 5000 	str.w	r5, [fp]
   1365e:	e727      	b.n	134b0 <__gethex+0x15c>
   13660:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13662:	f1c3 0301 	rsb	r3, r3, #1
   13666:	9311      	str	r3, [sp, #68]	; 0x44
   13668:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1366a:	2b00      	cmp	r3, #0
   1366c:	d09f      	beq.n	135ae <__gethex+0x25a>
   1366e:	f8db 7010 	ldr.w	r7, [fp, #16]
   13672:	f8dd 8004 	ldr.w	r8, [sp, #4]
   13676:	00ba      	lsls	r2, r7, #2
   13678:	4643      	mov	r3, r8
   1367a:	9201      	str	r2, [sp, #4]
   1367c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   13680:	2100      	movs	r1, #0
   13682:	e007      	b.n	13694 <__gethex+0x340>
   13684:	20008320 	.word	0x20008320
   13688:	20000f10 	.word	0x20000f10
   1368c:	4298      	cmp	r0, r3
   1368e:	f843 1c04 	str.w	r1, [r3, #-4]
   13692:	d93f      	bls.n	13714 <__gethex+0x3c0>
   13694:	461e      	mov	r6, r3
   13696:	f853 2b04 	ldr.w	r2, [r3], #4
   1369a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1369e:	d0f5      	beq.n	1368c <__gethex+0x338>
   136a0:	3201      	adds	r2, #1
   136a2:	2d02      	cmp	r5, #2
   136a4:	6032      	str	r2, [r6, #0]
   136a6:	f000 80bf 	beq.w	13828 <__gethex+0x4d4>
   136aa:	f014 041f 	ands.w	r4, r4, #31
   136ae:	f040 80e7 	bne.w	13880 <__gethex+0x52c>
   136b2:	2521      	movs	r5, #33	; 0x21
   136b4:	e77d      	b.n	135b2 <__gethex+0x25e>
   136b6:	07ba      	lsls	r2, r7, #30
   136b8:	f57f af79 	bpl.w	135ae <__gethex+0x25a>
   136bc:	9b01      	ldr	r3, [sp, #4]
   136be:	681b      	ldr	r3, [r3, #0]
   136c0:	431f      	orrs	r7, r3
   136c2:	07fb      	lsls	r3, r7, #31
   136c4:	d4d3      	bmi.n	1366e <__gethex+0x31a>
   136c6:	e772      	b.n	135ae <__gethex+0x25a>
   136c8:	2000      	movs	r0, #0
   136ca:	e781      	b.n	135d0 <__gethex+0x27c>
   136cc:	1a22      	subs	r2, r4, r0
   136ce:	4659      	mov	r1, fp
   136d0:	ee18 0a10 	vmov	r0, s16
   136d4:	eba9 0902 	sub.w	r9, r9, r2
   136d8:	f000 fc76 	bl	13fc8 <__lshift>
   136dc:	f100 0314 	add.w	r3, r0, #20
   136e0:	4683      	mov	fp, r0
   136e2:	9301      	str	r3, [sp, #4]
   136e4:	2700      	movs	r7, #0
   136e6:	e703      	b.n	134f0 <__gethex+0x19c>
   136e8:	7872      	ldrb	r2, [r6, #1]
   136ea:	f818 0002 	ldrb.w	r0, [r8, r2]
   136ee:	1c71      	adds	r1, r6, #1
   136f0:	2800      	cmp	r0, #0
   136f2:	f000 80a0 	beq.w	13836 <__gethex+0x4e2>
   136f6:	460d      	mov	r5, r1
   136f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   136fc:	f818 0002 	ldrb.w	r0, [r8, r2]
   13700:	2800      	cmp	r0, #0
   13702:	d1f8      	bne.n	136f6 <__gethex+0x3a2>
   13704:	1b75      	subs	r5, r6, r5
   13706:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1370a:	460e      	mov	r6, r1
   1370c:	e65d      	b.n	133ca <__gethex+0x76>
   1370e:	3402      	adds	r4, #2
   13710:	2300      	movs	r3, #0
   13712:	e638      	b.n	13386 <__gethex+0x32>
   13714:	f8db 3008 	ldr.w	r3, [fp, #8]
   13718:	429f      	cmp	r7, r3
   1371a:	f280 808e 	bge.w	1383a <__gethex+0x4e6>
   1371e:	463b      	mov	r3, r7
   13720:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   13724:	2101      	movs	r1, #1
   13726:	3301      	adds	r3, #1
   13728:	2d02      	cmp	r5, #2
   1372a:	f8cb 3010 	str.w	r3, [fp, #16]
   1372e:	6151      	str	r1, [r2, #20]
   13730:	d07a      	beq.n	13828 <__gethex+0x4d4>
   13732:	429f      	cmp	r7, r3
   13734:	dab9      	bge.n	136aa <__gethex+0x356>
   13736:	2b00      	cmp	r3, #0
   13738:	f340 809b 	ble.w	13872 <__gethex+0x51e>
   1373c:	f8db 2014 	ldr.w	r2, [fp, #20]
   13740:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   13744:	f10b 0018 	add.w	r0, fp, #24
   13748:	4283      	cmp	r3, r0
   1374a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1374e:	f240 80b1 	bls.w	138b4 <__gethex+0x560>
   13752:	4644      	mov	r4, r8
   13754:	6801      	ldr	r1, [r0, #0]
   13756:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   1375a:	f844 2b04 	str.w	r2, [r4], #4
   1375e:	f850 2b04 	ldr.w	r2, [r0], #4
   13762:	4283      	cmp	r3, r0
   13764:	ea4f 0252 	mov.w	r2, r2, lsr #1
   13768:	d8f4      	bhi.n	13754 <__gethex+0x400>
   1376a:	eba3 030b 	sub.w	r3, r3, fp
   1376e:	3b19      	subs	r3, #25
   13770:	089b      	lsrs	r3, r3, #2
   13772:	3301      	adds	r3, #1
   13774:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   13778:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1377c:	2a00      	cmp	r2, #0
   1377e:	f040 809d 	bne.w	138bc <__gethex+0x568>
   13782:	eba3 0208 	sub.w	r2, r3, r8
   13786:	1092      	asrs	r2, r2, #2
   13788:	4543      	cmp	r3, r8
   1378a:	f8cb 2010 	str.w	r2, [fp, #16]
   1378e:	d073      	beq.n	13878 <__gethex+0x524>
   13790:	f8da 3008 	ldr.w	r3, [sl, #8]
   13794:	f109 0901 	add.w	r9, r9, #1
   13798:	454b      	cmp	r3, r9
   1379a:	da8a      	bge.n	136b2 <__gethex+0x35e>
   1379c:	ee18 0a10 	vmov	r0, s16
   137a0:	4659      	mov	r1, fp
   137a2:	f000 f9d1 	bl	13b48 <_Bfree>
   137a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   137a8:	2300      	movs	r3, #0
   137aa:	6013      	str	r3, [r2, #0]
   137ac:	25a3      	movs	r5, #163	; 0xa3
   137ae:	e683      	b.n	134b8 <__gethex+0x164>
   137b0:	9e01      	ldr	r6, [sp, #4]
   137b2:	2300      	movs	r3, #0
   137b4:	e689      	b.n	134ca <__gethex+0x176>
   137b6:	2701      	movs	r7, #1
   137b8:	e732      	b.n	13620 <__gethex+0x2cc>
   137ba:	4629      	mov	r1, r5
   137bc:	4658      	mov	r0, fp
   137be:	f000 fea5 	bl	1450c <__any_on>
   137c2:	4607      	mov	r7, r0
   137c4:	e72c      	b.n	13620 <__gethex+0x2cc>
   137c6:	1eb1      	subs	r1, r6, #2
   137c8:	4658      	mov	r0, fp
   137ca:	f000 fe9f 	bl	1450c <__any_on>
   137ce:	2800      	cmp	r0, #0
   137d0:	f43f af17 	beq.w	13602 <__gethex+0x2ae>
   137d4:	2703      	movs	r7, #3
   137d6:	e715      	b.n	13604 <__gethex+0x2b0>
   137d8:	f04f 0900 	mov.w	r9, #0
   137dc:	2701      	movs	r7, #1
   137de:	e64a      	b.n	13476 <__gethex+0x122>
   137e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   137e2:	2a00      	cmp	r2, #0
   137e4:	f47f ae9d 	bne.w	13522 <__gethex+0x1ce>
   137e8:	9902      	ldr	r1, [sp, #8]
   137ea:	600b      	str	r3, [r1, #0]
   137ec:	9b01      	ldr	r3, [sp, #4]
   137ee:	2201      	movs	r2, #1
   137f0:	f8cb 2010 	str.w	r2, [fp, #16]
   137f4:	601a      	str	r2, [r3, #0]
   137f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   137f8:	2562      	movs	r5, #98	; 0x62
   137fa:	f8c3 b000 	str.w	fp, [r3]
   137fe:	e65b      	b.n	134b8 <__gethex+0x164>
   13800:	454c      	cmp	r4, r9
   13802:	f47f ae8e 	bne.w	13522 <__gethex+0x1ce>
   13806:	2c01      	cmp	r4, #1
   13808:	d0ee      	beq.n	137e8 <__gethex+0x494>
   1380a:	1e61      	subs	r1, r4, #1
   1380c:	4658      	mov	r0, fp
   1380e:	f000 fe7d 	bl	1450c <__any_on>
   13812:	2800      	cmp	r0, #0
   13814:	f43f ae85 	beq.w	13522 <__gethex+0x1ce>
   13818:	f8da 3004 	ldr.w	r3, [sl, #4]
   1381c:	e7e4      	b.n	137e8 <__gethex+0x494>
   1381e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13820:	2a00      	cmp	r2, #0
   13822:	f43f ae7e 	beq.w	13522 <__gethex+0x1ce>
   13826:	e7df      	b.n	137e8 <__gethex+0x494>
   13828:	f8da 3000 	ldr.w	r3, [sl]
   1382c:	3b01      	subs	r3, #1
   1382e:	42a3      	cmp	r3, r4
   13830:	d034      	beq.n	1389c <__gethex+0x548>
   13832:	2522      	movs	r5, #34	; 0x22
   13834:	e6bd      	b.n	135b2 <__gethex+0x25e>
   13836:	460e      	mov	r6, r1
   13838:	e5c7      	b.n	133ca <__gethex+0x76>
   1383a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1383e:	ee18 0a10 	vmov	r0, s16
   13842:	3101      	adds	r1, #1
   13844:	f000 f95a 	bl	13afc <_Balloc>
   13848:	4606      	mov	r6, r0
   1384a:	b3c8      	cbz	r0, 138c0 <__gethex+0x56c>
   1384c:	f8db 3010 	ldr.w	r3, [fp, #16]
   13850:	3302      	adds	r3, #2
   13852:	009a      	lsls	r2, r3, #2
   13854:	f10b 010c 	add.w	r1, fp, #12
   13858:	300c      	adds	r0, #12
   1385a:	f7fa fe9f 	bl	e59c <memcpy>
   1385e:	4659      	mov	r1, fp
   13860:	ee18 0a10 	vmov	r0, s16
   13864:	f000 f970 	bl	13b48 <_Bfree>
   13868:	f106 0814 	add.w	r8, r6, #20
   1386c:	6933      	ldr	r3, [r6, #16]
   1386e:	46b3      	mov	fp, r6
   13870:	e756      	b.n	13720 <__gethex+0x3cc>
   13872:	2300      	movs	r3, #0
   13874:	f8cb 3010 	str.w	r3, [fp, #16]
   13878:	2300      	movs	r3, #0
   1387a:	f8cb 3014 	str.w	r3, [fp, #20]
   1387e:	e787      	b.n	13790 <__gethex+0x43c>
   13880:	9b01      	ldr	r3, [sp, #4]
   13882:	4443      	add	r3, r8
   13884:	f1c4 0420 	rsb	r4, r4, #32
   13888:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1388c:	f000 fa10 	bl	13cb0 <__hi0bits>
   13890:	42a0      	cmp	r0, r4
   13892:	f6bf af0e 	bge.w	136b2 <__gethex+0x35e>
   13896:	f8db 3010 	ldr.w	r3, [fp, #16]
   1389a:	e74c      	b.n	13736 <__gethex+0x3e2>
   1389c:	1163      	asrs	r3, r4, #5
   1389e:	f004 041f 	and.w	r4, r4, #31
   138a2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   138a6:	2301      	movs	r3, #1
   138a8:	40a3      	lsls	r3, r4
   138aa:	4213      	tst	r3, r2
   138ac:	bf0c      	ite	eq
   138ae:	2522      	moveq	r5, #34	; 0x22
   138b0:	2521      	movne	r5, #33	; 0x21
   138b2:	e67e      	b.n	135b2 <__gethex+0x25e>
   138b4:	f8c8 2000 	str.w	r2, [r8]
   138b8:	4643      	mov	r3, r8
   138ba:	b16a      	cbz	r2, 138d8 <__gethex+0x584>
   138bc:	3304      	adds	r3, #4
   138be:	e760      	b.n	13782 <__gethex+0x42e>
   138c0:	4b07      	ldr	r3, [pc, #28]	; (138e0 <__gethex+0x58c>)
   138c2:	4808      	ldr	r0, [pc, #32]	; (138e4 <__gethex+0x590>)
   138c4:	4632      	mov	r2, r6
   138c6:	2184      	movs	r1, #132	; 0x84
   138c8:	f004 fa5a 	bl	17d80 <__assert_func>
   138cc:	4b04      	ldr	r3, [pc, #16]	; (138e0 <__gethex+0x58c>)
   138ce:	4805      	ldr	r0, [pc, #20]	; (138e4 <__gethex+0x590>)
   138d0:	465a      	mov	r2, fp
   138d2:	21e4      	movs	r1, #228	; 0xe4
   138d4:	f004 fa54 	bl	17d80 <__assert_func>
   138d8:	f8cb 2010 	str.w	r2, [fp, #16]
   138dc:	e7cc      	b.n	13878 <__gethex+0x524>
   138de:	bf00      	nop
   138e0:	20000e98 	.word	0x20000e98
   138e4:	20000eac 	.word	0x20000eac

000138e8 <__match>:
   138e8:	b410      	push	{r4}
   138ea:	6804      	ldr	r4, [r0, #0]
   138ec:	e009      	b.n	13902 <__match+0x1a>
   138ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   138f2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   138f6:	f1bc 0f19 	cmp.w	ip, #25
   138fa:	bf98      	it	ls
   138fc:	3320      	addls	r3, #32
   138fe:	4293      	cmp	r3, r2
   13900:	d109      	bne.n	13916 <__match+0x2e>
   13902:	f811 2b01 	ldrb.w	r2, [r1], #1
   13906:	2a00      	cmp	r2, #0
   13908:	d1f1      	bne.n	138ee <__match+0x6>
   1390a:	3401      	adds	r4, #1
   1390c:	6004      	str	r4, [r0, #0]
   1390e:	2001      	movs	r0, #1
   13910:	f85d 4b04 	ldr.w	r4, [sp], #4
   13914:	4770      	bx	lr
   13916:	2000      	movs	r0, #0
   13918:	f85d 4b04 	ldr.w	r4, [sp], #4
   1391c:	4770      	bx	lr
   1391e:	bf00      	nop

00013920 <__hexnan>:
   13920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13924:	6809      	ldr	r1, [r1, #0]
   13926:	b085      	sub	sp, #20
   13928:	114b      	asrs	r3, r1, #5
   1392a:	f011 011f 	ands.w	r1, r1, #31
   1392e:	9002      	str	r0, [sp, #8]
   13930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13934:	9103      	str	r1, [sp, #12]
   13936:	f040 808f 	bne.w	13a58 <__hexnan+0x138>
   1393a:	1f1d      	subs	r5, r3, #4
   1393c:	9301      	str	r3, [sp, #4]
   1393e:	9b02      	ldr	r3, [sp, #8]
   13940:	9901      	ldr	r1, [sp, #4]
   13942:	681c      	ldr	r4, [r3, #0]
   13944:	2300      	movs	r3, #0
   13946:	f841 3c04 	str.w	r3, [r1, #-4]
   1394a:	7861      	ldrb	r1, [r4, #1]
   1394c:	3401      	adds	r4, #1
   1394e:	2900      	cmp	r1, #0
   13950:	f000 8098 	beq.w	13a84 <__hexnan+0x164>
   13954:	f8df 9174 	ldr.w	r9, [pc, #372]	; 13acc <__hexnan+0x1ac>
   13958:	46a8      	mov	r8, r5
   1395a:	46ac      	mov	ip, r5
   1395c:	469a      	mov	sl, r3
   1395e:	461e      	mov	r6, r3
   13960:	e00e      	b.n	13980 <__hexnan+0x60>
   13962:	2920      	cmp	r1, #32
   13964:	f200 808c 	bhi.w	13a80 <__hexnan+0x160>
   13968:	4556      	cmp	r6, sl
   1396a:	dd06      	ble.n	1397a <__hexnan+0x5a>
   1396c:	45c4      	cmp	ip, r8
   1396e:	d201      	bcs.n	13974 <__hexnan+0x54>
   13970:	2b07      	cmp	r3, #7
   13972:	dd5b      	ble.n	13a2c <__hexnan+0x10c>
   13974:	4562      	cmp	r2, ip
   13976:	d351      	bcc.n	13a1c <__hexnan+0xfc>
   13978:	2308      	movs	r3, #8
   1397a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   1397e:	b1a1      	cbz	r1, 139aa <__hexnan+0x8a>
   13980:	f819 0001 	ldrb.w	r0, [r9, r1]
   13984:	2800      	cmp	r0, #0
   13986:	d0ec      	beq.n	13962 <__hexnan+0x42>
   13988:	3301      	adds	r3, #1
   1398a:	2b08      	cmp	r3, #8
   1398c:	f106 0601 	add.w	r6, r6, #1
   13990:	dc3a      	bgt.n	13a08 <__hexnan+0xe8>
   13992:	f8dc 1000 	ldr.w	r1, [ip]
   13996:	0109      	lsls	r1, r1, #4
   13998:	f000 000f 	and.w	r0, r0, #15
   1399c:	4308      	orrs	r0, r1
   1399e:	f8cc 0000 	str.w	r0, [ip]
   139a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   139a6:	2900      	cmp	r1, #0
   139a8:	d1ea      	bne.n	13980 <__hexnan+0x60>
   139aa:	2e00      	cmp	r6, #0
   139ac:	d06a      	beq.n	13a84 <__hexnan+0x164>
   139ae:	45c4      	cmp	ip, r8
   139b0:	d201      	bcs.n	139b6 <__hexnan+0x96>
   139b2:	2b07      	cmp	r3, #7
   139b4:	dd74      	ble.n	13aa0 <__hexnan+0x180>
   139b6:	4562      	cmp	r2, ip
   139b8:	d252      	bcs.n	13a60 <__hexnan+0x140>
   139ba:	1f11      	subs	r1, r2, #4
   139bc:	4663      	mov	r3, ip
   139be:	f853 0b04 	ldr.w	r0, [r3], #4
   139c2:	f841 0f04 	str.w	r0, [r1, #4]!
   139c6:	42ab      	cmp	r3, r5
   139c8:	d9f9      	bls.n	139be <__hexnan+0x9e>
   139ca:	eba5 030c 	sub.w	r3, r5, ip
   139ce:	f023 0303 	bic.w	r3, r3, #3
   139d2:	1c69      	adds	r1, r5, #1
   139d4:	3304      	adds	r3, #4
   139d6:	f10c 0c01 	add.w	ip, ip, #1
   139da:	4561      	cmp	r1, ip
   139dc:	bf38      	it	cc
   139de:	2304      	movcc	r3, #4
   139e0:	4413      	add	r3, r2
   139e2:	2100      	movs	r1, #0
   139e4:	f843 1b04 	str.w	r1, [r3], #4
   139e8:	42ab      	cmp	r3, r5
   139ea:	d9fb      	bls.n	139e4 <__hexnan+0xc4>
   139ec:	9b01      	ldr	r3, [sp, #4]
   139ee:	f853 3c04 	ldr.w	r3, [r3, #-4]
   139f2:	b92b      	cbnz	r3, 13a00 <__hexnan+0xe0>
   139f4:	42aa      	cmp	r2, r5
   139f6:	d049      	beq.n	13a8c <__hexnan+0x16c>
   139f8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   139fc:	2b00      	cmp	r3, #0
   139fe:	d0f9      	beq.n	139f4 <__hexnan+0xd4>
   13a00:	2005      	movs	r0, #5
   13a02:	b005      	add	sp, #20
   13a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a08:	4562      	cmp	r2, ip
   13a0a:	d2b6      	bcs.n	1397a <__hexnan+0x5a>
   13a0c:	2300      	movs	r3, #0
   13a0e:	f84c 3c04 	str.w	r3, [ip, #-4]
   13a12:	4619      	mov	r1, r3
   13a14:	f1ac 0c04 	sub.w	ip, ip, #4
   13a18:	2301      	movs	r3, #1
   13a1a:	e7bd      	b.n	13998 <__hexnan+0x78>
   13a1c:	2300      	movs	r3, #0
   13a1e:	f1ac 0804 	sub.w	r8, ip, #4
   13a22:	f84c 3c04 	str.w	r3, [ip, #-4]
   13a26:	46b2      	mov	sl, r6
   13a28:	46c4      	mov	ip, r8
   13a2a:	e7a6      	b.n	1397a <__hexnan+0x5a>
   13a2c:	f1c3 0108 	rsb	r1, r3, #8
   13a30:	f8dc 3000 	ldr.w	r3, [ip]
   13a34:	0089      	lsls	r1, r1, #2
   13a36:	f1c1 0e20 	rsb	lr, r1, #32
   13a3a:	4660      	mov	r0, ip
   13a3c:	469b      	mov	fp, r3
   13a3e:	6847      	ldr	r7, [r0, #4]
   13a40:	fa07 f30e 	lsl.w	r3, r7, lr
   13a44:	ea43 030b 	orr.w	r3, r3, fp
   13a48:	fa27 fb01 	lsr.w	fp, r7, r1
   13a4c:	6003      	str	r3, [r0, #0]
   13a4e:	f840 bf04 	str.w	fp, [r0, #4]!
   13a52:	4540      	cmp	r0, r8
   13a54:	d3f3      	bcc.n	13a3e <__hexnan+0x11e>
   13a56:	e78d      	b.n	13974 <__hexnan+0x54>
   13a58:	1d19      	adds	r1, r3, #4
   13a5a:	9101      	str	r1, [sp, #4]
   13a5c:	461d      	mov	r5, r3
   13a5e:	e76e      	b.n	1393e <__hexnan+0x1e>
   13a60:	9b03      	ldr	r3, [sp, #12]
   13a62:	2b00      	cmp	r3, #0
   13a64:	d0c2      	beq.n	139ec <__hexnan+0xcc>
   13a66:	9b03      	ldr	r3, [sp, #12]
   13a68:	9801      	ldr	r0, [sp, #4]
   13a6a:	f1c3 0120 	rsb	r1, r3, #32
   13a6e:	f04f 33ff 	mov.w	r3, #4294967295
   13a72:	40cb      	lsrs	r3, r1
   13a74:	f850 1c04 	ldr.w	r1, [r0, #-4]
   13a78:	400b      	ands	r3, r1
   13a7a:	f840 3c04 	str.w	r3, [r0, #-4]
   13a7e:	e7b8      	b.n	139f2 <__hexnan+0xd2>
   13a80:	2929      	cmp	r1, #41	; 0x29
   13a82:	d009      	beq.n	13a98 <__hexnan+0x178>
   13a84:	2004      	movs	r0, #4
   13a86:	b005      	add	sp, #20
   13a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a8c:	2301      	movs	r3, #1
   13a8e:	2005      	movs	r0, #5
   13a90:	602b      	str	r3, [r5, #0]
   13a92:	b005      	add	sp, #20
   13a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a98:	9902      	ldr	r1, [sp, #8]
   13a9a:	3401      	adds	r4, #1
   13a9c:	600c      	str	r4, [r1, #0]
   13a9e:	e784      	b.n	139aa <__hexnan+0x8a>
   13aa0:	f8dc 1000 	ldr.w	r1, [ip]
   13aa4:	f1c3 0308 	rsb	r3, r3, #8
   13aa8:	009b      	lsls	r3, r3, #2
   13aaa:	f1c3 0720 	rsb	r7, r3, #32
   13aae:	4664      	mov	r4, ip
   13ab0:	4608      	mov	r0, r1
   13ab2:	6866      	ldr	r6, [r4, #4]
   13ab4:	fa06 f107 	lsl.w	r1, r6, r7
   13ab8:	4301      	orrs	r1, r0
   13aba:	fa26 f003 	lsr.w	r0, r6, r3
   13abe:	6021      	str	r1, [r4, #0]
   13ac0:	f844 0f04 	str.w	r0, [r4, #4]!
   13ac4:	4544      	cmp	r4, r8
   13ac6:	d3f4      	bcc.n	13ab2 <__hexnan+0x192>
   13ac8:	e775      	b.n	139b6 <__hexnan+0x96>
   13aca:	bf00      	nop
   13acc:	20000f10 	.word	0x20000f10

00013ad0 <__ascii_mbtowc>:
   13ad0:	b082      	sub	sp, #8
   13ad2:	b149      	cbz	r1, 13ae8 <__ascii_mbtowc+0x18>
   13ad4:	b15a      	cbz	r2, 13aee <__ascii_mbtowc+0x1e>
   13ad6:	b16b      	cbz	r3, 13af4 <__ascii_mbtowc+0x24>
   13ad8:	7813      	ldrb	r3, [r2, #0]
   13ada:	600b      	str	r3, [r1, #0]
   13adc:	7812      	ldrb	r2, [r2, #0]
   13ade:	1e10      	subs	r0, r2, #0
   13ae0:	bf18      	it	ne
   13ae2:	2001      	movne	r0, #1
   13ae4:	b002      	add	sp, #8
   13ae6:	4770      	bx	lr
   13ae8:	a901      	add	r1, sp, #4
   13aea:	2a00      	cmp	r2, #0
   13aec:	d1f3      	bne.n	13ad6 <__ascii_mbtowc+0x6>
   13aee:	4610      	mov	r0, r2
   13af0:	b002      	add	sp, #8
   13af2:	4770      	bx	lr
   13af4:	f06f 0001 	mvn.w	r0, #1
   13af8:	e7f4      	b.n	13ae4 <__ascii_mbtowc+0x14>
   13afa:	bf00      	nop

00013afc <_Balloc>:
   13afc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13afe:	b570      	push	{r4, r5, r6, lr}
   13b00:	4605      	mov	r5, r0
   13b02:	460c      	mov	r4, r1
   13b04:	b14b      	cbz	r3, 13b1a <_Balloc+0x1e>
   13b06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   13b0a:	b180      	cbz	r0, 13b2e <_Balloc+0x32>
   13b0c:	6802      	ldr	r2, [r0, #0]
   13b0e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   13b12:	2300      	movs	r3, #0
   13b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
   13b18:	bd70      	pop	{r4, r5, r6, pc}
   13b1a:	2221      	movs	r2, #33	; 0x21
   13b1c:	2104      	movs	r1, #4
   13b1e:	f004 f94f 	bl	17dc0 <_calloc_r>
   13b22:	4603      	mov	r3, r0
   13b24:	6468      	str	r0, [r5, #68]	; 0x44
   13b26:	2800      	cmp	r0, #0
   13b28:	d1ed      	bne.n	13b06 <_Balloc+0xa>
   13b2a:	2000      	movs	r0, #0
   13b2c:	bd70      	pop	{r4, r5, r6, pc}
   13b2e:	2101      	movs	r1, #1
   13b30:	fa01 f604 	lsl.w	r6, r1, r4
   13b34:	1d72      	adds	r2, r6, #5
   13b36:	0092      	lsls	r2, r2, #2
   13b38:	4628      	mov	r0, r5
   13b3a:	f004 f941 	bl	17dc0 <_calloc_r>
   13b3e:	2800      	cmp	r0, #0
   13b40:	d0f3      	beq.n	13b2a <_Balloc+0x2e>
   13b42:	e9c0 4601 	strd	r4, r6, [r0, #4]
   13b46:	e7e4      	b.n	13b12 <_Balloc+0x16>

00013b48 <_Bfree>:
   13b48:	b131      	cbz	r1, 13b58 <_Bfree+0x10>
   13b4a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13b4c:	684a      	ldr	r2, [r1, #4]
   13b4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13b52:	6008      	str	r0, [r1, #0]
   13b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   13b58:	4770      	bx	lr
   13b5a:	bf00      	nop

00013b5c <__multadd>:
   13b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b60:	690e      	ldr	r6, [r1, #16]
   13b62:	4680      	mov	r8, r0
   13b64:	460f      	mov	r7, r1
   13b66:	461d      	mov	r5, r3
   13b68:	f101 0e14 	add.w	lr, r1, #20
   13b6c:	2000      	movs	r0, #0
   13b6e:	f8de 1000 	ldr.w	r1, [lr]
   13b72:	b28c      	uxth	r4, r1
   13b74:	fb02 5304 	mla	r3, r2, r4, r5
   13b78:	0c09      	lsrs	r1, r1, #16
   13b7a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   13b7e:	fb02 cc01 	mla	ip, r2, r1, ip
   13b82:	3001      	adds	r0, #1
   13b84:	b29c      	uxth	r4, r3
   13b86:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   13b8a:	4286      	cmp	r6, r0
   13b8c:	f84e 4b04 	str.w	r4, [lr], #4
   13b90:	ea4f 451c 	mov.w	r5, ip, lsr #16
   13b94:	dceb      	bgt.n	13b6e <__multadd+0x12>
   13b96:	b13d      	cbz	r5, 13ba8 <__multadd+0x4c>
   13b98:	68bb      	ldr	r3, [r7, #8]
   13b9a:	42b3      	cmp	r3, r6
   13b9c:	dd07      	ble.n	13bae <__multadd+0x52>
   13b9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13ba2:	3601      	adds	r6, #1
   13ba4:	615d      	str	r5, [r3, #20]
   13ba6:	613e      	str	r6, [r7, #16]
   13ba8:	4638      	mov	r0, r7
   13baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bae:	6879      	ldr	r1, [r7, #4]
   13bb0:	4640      	mov	r0, r8
   13bb2:	3101      	adds	r1, #1
   13bb4:	f7ff ffa2 	bl	13afc <_Balloc>
   13bb8:	4604      	mov	r4, r0
   13bba:	b1b0      	cbz	r0, 13bea <__multadd+0x8e>
   13bbc:	693a      	ldr	r2, [r7, #16]
   13bbe:	3202      	adds	r2, #2
   13bc0:	f107 010c 	add.w	r1, r7, #12
   13bc4:	0092      	lsls	r2, r2, #2
   13bc6:	300c      	adds	r0, #12
   13bc8:	f7fa fce8 	bl	e59c <memcpy>
   13bcc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   13bd0:	687a      	ldr	r2, [r7, #4]
   13bd2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13bd6:	6039      	str	r1, [r7, #0]
   13bd8:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   13bdc:	4627      	mov	r7, r4
   13bde:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13be2:	3601      	adds	r6, #1
   13be4:	615d      	str	r5, [r3, #20]
   13be6:	613e      	str	r6, [r7, #16]
   13be8:	e7de      	b.n	13ba8 <__multadd+0x4c>
   13bea:	4b03      	ldr	r3, [pc, #12]	; (13bf8 <__multadd+0x9c>)
   13bec:	4803      	ldr	r0, [pc, #12]	; (13bfc <__multadd+0xa0>)
   13bee:	4622      	mov	r2, r4
   13bf0:	21ba      	movs	r1, #186	; 0xba
   13bf2:	f004 f8c5 	bl	17d80 <__assert_func>
   13bf6:	bf00      	nop
   13bf8:	20000e98 	.word	0x20000e98
   13bfc:	20001010 	.word	0x20001010

00013c00 <__s2b>:
   13c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13c04:	4617      	mov	r7, r2
   13c06:	4a27      	ldr	r2, [pc, #156]	; (13ca4 <__s2b+0xa4>)
   13c08:	461e      	mov	r6, r3
   13c0a:	3308      	adds	r3, #8
   13c0c:	460c      	mov	r4, r1
   13c0e:	2e09      	cmp	r6, #9
   13c10:	fb82 1203 	smull	r1, r2, r2, r3
   13c14:	ea4f 73e3 	mov.w	r3, r3, asr #31
   13c18:	4605      	mov	r5, r0
   13c1a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   13c1e:	dd39      	ble.n	13c94 <__s2b+0x94>
   13c20:	f04f 0c01 	mov.w	ip, #1
   13c24:	2100      	movs	r1, #0
   13c26:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   13c2a:	4563      	cmp	r3, ip
   13c2c:	f101 0101 	add.w	r1, r1, #1
   13c30:	dcf9      	bgt.n	13c26 <__s2b+0x26>
   13c32:	4628      	mov	r0, r5
   13c34:	f7ff ff62 	bl	13afc <_Balloc>
   13c38:	4601      	mov	r1, r0
   13c3a:	b368      	cbz	r0, 13c98 <__s2b+0x98>
   13c3c:	9b08      	ldr	r3, [sp, #32]
   13c3e:	6143      	str	r3, [r0, #20]
   13c40:	2f09      	cmp	r7, #9
   13c42:	f04f 0301 	mov.w	r3, #1
   13c46:	6103      	str	r3, [r0, #16]
   13c48:	dc12      	bgt.n	13c70 <__s2b+0x70>
   13c4a:	340a      	adds	r4, #10
   13c4c:	2709      	movs	r7, #9
   13c4e:	42be      	cmp	r6, r7
   13c50:	dd0b      	ble.n	13c6a <__s2b+0x6a>
   13c52:	1bf2      	subs	r2, r6, r7
   13c54:	18a6      	adds	r6, r4, r2
   13c56:	f814 3b01 	ldrb.w	r3, [r4], #1
   13c5a:	220a      	movs	r2, #10
   13c5c:	3b30      	subs	r3, #48	; 0x30
   13c5e:	4628      	mov	r0, r5
   13c60:	f7ff ff7c 	bl	13b5c <__multadd>
   13c64:	42a6      	cmp	r6, r4
   13c66:	4601      	mov	r1, r0
   13c68:	d1f5      	bne.n	13c56 <__s2b+0x56>
   13c6a:	4608      	mov	r0, r1
   13c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13c70:	f104 0909 	add.w	r9, r4, #9
   13c74:	46c8      	mov	r8, r9
   13c76:	443c      	add	r4, r7
   13c78:	f818 3b01 	ldrb.w	r3, [r8], #1
   13c7c:	220a      	movs	r2, #10
   13c7e:	3b30      	subs	r3, #48	; 0x30
   13c80:	4628      	mov	r0, r5
   13c82:	f7ff ff6b 	bl	13b5c <__multadd>
   13c86:	45a0      	cmp	r8, r4
   13c88:	4601      	mov	r1, r0
   13c8a:	d1f5      	bne.n	13c78 <__s2b+0x78>
   13c8c:	f1a7 0408 	sub.w	r4, r7, #8
   13c90:	444c      	add	r4, r9
   13c92:	e7dc      	b.n	13c4e <__s2b+0x4e>
   13c94:	2100      	movs	r1, #0
   13c96:	e7cc      	b.n	13c32 <__s2b+0x32>
   13c98:	460a      	mov	r2, r1
   13c9a:	4b03      	ldr	r3, [pc, #12]	; (13ca8 <__s2b+0xa8>)
   13c9c:	4803      	ldr	r0, [pc, #12]	; (13cac <__s2b+0xac>)
   13c9e:	21d3      	movs	r1, #211	; 0xd3
   13ca0:	f004 f86e 	bl	17d80 <__assert_func>
   13ca4:	38e38e39 	.word	0x38e38e39
   13ca8:	20000e98 	.word	0x20000e98
   13cac:	20001010 	.word	0x20001010

00013cb0 <__hi0bits>:
   13cb0:	0c03      	lsrs	r3, r0, #16
   13cb2:	041b      	lsls	r3, r3, #16
   13cb4:	b9d3      	cbnz	r3, 13cec <__hi0bits+0x3c>
   13cb6:	0400      	lsls	r0, r0, #16
   13cb8:	2310      	movs	r3, #16
   13cba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   13cbe:	bf04      	itt	eq
   13cc0:	0200      	lsleq	r0, r0, #8
   13cc2:	3308      	addeq	r3, #8
   13cc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   13cc8:	bf04      	itt	eq
   13cca:	0100      	lsleq	r0, r0, #4
   13ccc:	3304      	addeq	r3, #4
   13cce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   13cd2:	bf04      	itt	eq
   13cd4:	0080      	lsleq	r0, r0, #2
   13cd6:	3302      	addeq	r3, #2
   13cd8:	2800      	cmp	r0, #0
   13cda:	db05      	blt.n	13ce8 <__hi0bits+0x38>
   13cdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   13ce0:	f103 0301 	add.w	r3, r3, #1
   13ce4:	bf08      	it	eq
   13ce6:	2320      	moveq	r3, #32
   13ce8:	4618      	mov	r0, r3
   13cea:	4770      	bx	lr
   13cec:	2300      	movs	r3, #0
   13cee:	e7e4      	b.n	13cba <__hi0bits+0xa>

00013cf0 <__lo0bits>:
   13cf0:	6803      	ldr	r3, [r0, #0]
   13cf2:	f013 0207 	ands.w	r2, r3, #7
   13cf6:	d008      	beq.n	13d0a <__lo0bits+0x1a>
   13cf8:	07d9      	lsls	r1, r3, #31
   13cfa:	d41f      	bmi.n	13d3c <__lo0bits+0x4c>
   13cfc:	079a      	lsls	r2, r3, #30
   13cfe:	d522      	bpl.n	13d46 <__lo0bits+0x56>
   13d00:	085b      	lsrs	r3, r3, #1
   13d02:	6003      	str	r3, [r0, #0]
   13d04:	2201      	movs	r2, #1
   13d06:	4610      	mov	r0, r2
   13d08:	4770      	bx	lr
   13d0a:	b299      	uxth	r1, r3
   13d0c:	b909      	cbnz	r1, 13d12 <__lo0bits+0x22>
   13d0e:	0c1b      	lsrs	r3, r3, #16
   13d10:	2210      	movs	r2, #16
   13d12:	b2d9      	uxtb	r1, r3
   13d14:	b909      	cbnz	r1, 13d1a <__lo0bits+0x2a>
   13d16:	3208      	adds	r2, #8
   13d18:	0a1b      	lsrs	r3, r3, #8
   13d1a:	0719      	lsls	r1, r3, #28
   13d1c:	bf04      	itt	eq
   13d1e:	091b      	lsreq	r3, r3, #4
   13d20:	3204      	addeq	r2, #4
   13d22:	0799      	lsls	r1, r3, #30
   13d24:	bf04      	itt	eq
   13d26:	089b      	lsreq	r3, r3, #2
   13d28:	3202      	addeq	r2, #2
   13d2a:	07d9      	lsls	r1, r3, #31
   13d2c:	d403      	bmi.n	13d36 <__lo0bits+0x46>
   13d2e:	085b      	lsrs	r3, r3, #1
   13d30:	f102 0201 	add.w	r2, r2, #1
   13d34:	d005      	beq.n	13d42 <__lo0bits+0x52>
   13d36:	6003      	str	r3, [r0, #0]
   13d38:	4610      	mov	r0, r2
   13d3a:	4770      	bx	lr
   13d3c:	2200      	movs	r2, #0
   13d3e:	4610      	mov	r0, r2
   13d40:	4770      	bx	lr
   13d42:	2220      	movs	r2, #32
   13d44:	e7df      	b.n	13d06 <__lo0bits+0x16>
   13d46:	089b      	lsrs	r3, r3, #2
   13d48:	2202      	movs	r2, #2
   13d4a:	6003      	str	r3, [r0, #0]
   13d4c:	4610      	mov	r0, r2
   13d4e:	4770      	bx	lr

00013d50 <__i2b>:
   13d50:	b538      	push	{r3, r4, r5, lr}
   13d52:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13d54:	4604      	mov	r4, r0
   13d56:	460d      	mov	r5, r1
   13d58:	b14b      	cbz	r3, 13d6e <__i2b+0x1e>
   13d5a:	6858      	ldr	r0, [r3, #4]
   13d5c:	b1b0      	cbz	r0, 13d8c <__i2b+0x3c>
   13d5e:	6802      	ldr	r2, [r0, #0]
   13d60:	605a      	str	r2, [r3, #4]
   13d62:	2200      	movs	r2, #0
   13d64:	2301      	movs	r3, #1
   13d66:	e9c0 3504 	strd	r3, r5, [r0, #16]
   13d6a:	60c2      	str	r2, [r0, #12]
   13d6c:	bd38      	pop	{r3, r4, r5, pc}
   13d6e:	2221      	movs	r2, #33	; 0x21
   13d70:	2104      	movs	r1, #4
   13d72:	f004 f825 	bl	17dc0 <_calloc_r>
   13d76:	4603      	mov	r3, r0
   13d78:	6460      	str	r0, [r4, #68]	; 0x44
   13d7a:	2800      	cmp	r0, #0
   13d7c:	d1ed      	bne.n	13d5a <__i2b+0xa>
   13d7e:	4b09      	ldr	r3, [pc, #36]	; (13da4 <__i2b+0x54>)
   13d80:	4809      	ldr	r0, [pc, #36]	; (13da8 <__i2b+0x58>)
   13d82:	2200      	movs	r2, #0
   13d84:	f240 1145 	movw	r1, #325	; 0x145
   13d88:	f003 fffa 	bl	17d80 <__assert_func>
   13d8c:	221c      	movs	r2, #28
   13d8e:	2101      	movs	r1, #1
   13d90:	4620      	mov	r0, r4
   13d92:	f004 f815 	bl	17dc0 <_calloc_r>
   13d96:	2800      	cmp	r0, #0
   13d98:	d0f1      	beq.n	13d7e <__i2b+0x2e>
   13d9a:	2201      	movs	r2, #1
   13d9c:	2302      	movs	r3, #2
   13d9e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   13da2:	e7de      	b.n	13d62 <__i2b+0x12>
   13da4:	20000e98 	.word	0x20000e98
   13da8:	20001010 	.word	0x20001010

00013dac <__multiply>:
   13dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13db0:	690e      	ldr	r6, [r1, #16]
   13db2:	6915      	ldr	r5, [r2, #16]
   13db4:	42ae      	cmp	r6, r5
   13db6:	b085      	sub	sp, #20
   13db8:	4688      	mov	r8, r1
   13dba:	4614      	mov	r4, r2
   13dbc:	db05      	blt.n	13dca <__multiply+0x1e>
   13dbe:	462a      	mov	r2, r5
   13dc0:	4623      	mov	r3, r4
   13dc2:	4635      	mov	r5, r6
   13dc4:	460c      	mov	r4, r1
   13dc6:	4616      	mov	r6, r2
   13dc8:	4698      	mov	r8, r3
   13dca:	68a3      	ldr	r3, [r4, #8]
   13dcc:	6861      	ldr	r1, [r4, #4]
   13dce:	19af      	adds	r7, r5, r6
   13dd0:	42bb      	cmp	r3, r7
   13dd2:	bfb8      	it	lt
   13dd4:	3101      	addlt	r1, #1
   13dd6:	f7ff fe91 	bl	13afc <_Balloc>
   13dda:	9001      	str	r0, [sp, #4]
   13ddc:	2800      	cmp	r0, #0
   13dde:	f000 8087 	beq.w	13ef0 <__multiply+0x144>
   13de2:	9b01      	ldr	r3, [sp, #4]
   13de4:	f103 0914 	add.w	r9, r3, #20
   13de8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   13dec:	45d1      	cmp	r9, sl
   13dee:	d205      	bcs.n	13dfc <__multiply+0x50>
   13df0:	464b      	mov	r3, r9
   13df2:	2200      	movs	r2, #0
   13df4:	f843 2b04 	str.w	r2, [r3], #4
   13df8:	459a      	cmp	sl, r3
   13dfa:	d8fb      	bhi.n	13df4 <__multiply+0x48>
   13dfc:	f108 0814 	add.w	r8, r8, #20
   13e00:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   13e04:	f104 0314 	add.w	r3, r4, #20
   13e08:	45d8      	cmp	r8, fp
   13e0a:	461a      	mov	r2, r3
   13e0c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13e10:	d25f      	bcs.n	13ed2 <__multiply+0x126>
   13e12:	1b2b      	subs	r3, r5, r4
   13e14:	3b15      	subs	r3, #21
   13e16:	f023 0303 	bic.w	r3, r3, #3
   13e1a:	3304      	adds	r3, #4
   13e1c:	3415      	adds	r4, #21
   13e1e:	42a5      	cmp	r5, r4
   13e20:	bf38      	it	cc
   13e22:	2304      	movcc	r3, #4
   13e24:	e9cd a702 	strd	sl, r7, [sp, #8]
   13e28:	46ac      	mov	ip, r5
   13e2a:	461f      	mov	r7, r3
   13e2c:	4692      	mov	sl, r2
   13e2e:	e005      	b.n	13e3c <__multiply+0x90>
   13e30:	0c09      	lsrs	r1, r1, #16
   13e32:	d129      	bne.n	13e88 <__multiply+0xdc>
   13e34:	45c3      	cmp	fp, r8
   13e36:	f109 0904 	add.w	r9, r9, #4
   13e3a:	d948      	bls.n	13ece <__multiply+0x122>
   13e3c:	f858 1b04 	ldr.w	r1, [r8], #4
   13e40:	b28d      	uxth	r5, r1
   13e42:	2d00      	cmp	r5, #0
   13e44:	d0f4      	beq.n	13e30 <__multiply+0x84>
   13e46:	4656      	mov	r6, sl
   13e48:	464c      	mov	r4, r9
   13e4a:	2300      	movs	r3, #0
   13e4c:	f856 1b04 	ldr.w	r1, [r6], #4
   13e50:	6822      	ldr	r2, [r4, #0]
   13e52:	fa1f fe81 	uxth.w	lr, r1
   13e56:	b290      	uxth	r0, r2
   13e58:	0c09      	lsrs	r1, r1, #16
   13e5a:	fb05 000e 	mla	r0, r5, lr, r0
   13e5e:	0c12      	lsrs	r2, r2, #16
   13e60:	4403      	add	r3, r0
   13e62:	fb05 2201 	mla	r2, r5, r1, r2
   13e66:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   13e6a:	b29b      	uxth	r3, r3
   13e6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13e70:	45b4      	cmp	ip, r6
   13e72:	f844 3b04 	str.w	r3, [r4], #4
   13e76:	ea4f 4312 	mov.w	r3, r2, lsr #16
   13e7a:	d8e7      	bhi.n	13e4c <__multiply+0xa0>
   13e7c:	f849 3007 	str.w	r3, [r9, r7]
   13e80:	f858 1c04 	ldr.w	r1, [r8, #-4]
   13e84:	0c09      	lsrs	r1, r1, #16
   13e86:	d0d5      	beq.n	13e34 <__multiply+0x88>
   13e88:	f8d9 3000 	ldr.w	r3, [r9]
   13e8c:	4650      	mov	r0, sl
   13e8e:	461a      	mov	r2, r3
   13e90:	464c      	mov	r4, r9
   13e92:	2600      	movs	r6, #0
   13e94:	8805      	ldrh	r5, [r0, #0]
   13e96:	0c12      	lsrs	r2, r2, #16
   13e98:	fb01 2205 	mla	r2, r1, r5, r2
   13e9c:	4416      	add	r6, r2
   13e9e:	b29b      	uxth	r3, r3
   13ea0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13ea4:	f844 3b04 	str.w	r3, [r4], #4
   13ea8:	f850 5b04 	ldr.w	r5, [r0], #4
   13eac:	6822      	ldr	r2, [r4, #0]
   13eae:	0c2d      	lsrs	r5, r5, #16
   13eb0:	b293      	uxth	r3, r2
   13eb2:	fb01 3305 	mla	r3, r1, r5, r3
   13eb6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   13eba:	4584      	cmp	ip, r0
   13ebc:	ea4f 4613 	mov.w	r6, r3, lsr #16
   13ec0:	d8e8      	bhi.n	13e94 <__multiply+0xe8>
   13ec2:	45c3      	cmp	fp, r8
   13ec4:	f849 3007 	str.w	r3, [r9, r7]
   13ec8:	f109 0904 	add.w	r9, r9, #4
   13ecc:	d8b6      	bhi.n	13e3c <__multiply+0x90>
   13ece:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   13ed2:	2f00      	cmp	r7, #0
   13ed4:	dc02      	bgt.n	13edc <__multiply+0x130>
   13ed6:	e005      	b.n	13ee4 <__multiply+0x138>
   13ed8:	3f01      	subs	r7, #1
   13eda:	d003      	beq.n	13ee4 <__multiply+0x138>
   13edc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d0f9      	beq.n	13ed8 <__multiply+0x12c>
   13ee4:	9b01      	ldr	r3, [sp, #4]
   13ee6:	4618      	mov	r0, r3
   13ee8:	611f      	str	r7, [r3, #16]
   13eea:	b005      	add	sp, #20
   13eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ef0:	4b03      	ldr	r3, [pc, #12]	; (13f00 <__multiply+0x154>)
   13ef2:	4804      	ldr	r0, [pc, #16]	; (13f04 <__multiply+0x158>)
   13ef4:	9a01      	ldr	r2, [sp, #4]
   13ef6:	f44f 71b1 	mov.w	r1, #354	; 0x162
   13efa:	f003 ff41 	bl	17d80 <__assert_func>
   13efe:	bf00      	nop
   13f00:	20000e98 	.word	0x20000e98
   13f04:	20001010 	.word	0x20001010

00013f08 <__pow5mult>:
   13f08:	f012 0303 	ands.w	r3, r2, #3
   13f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f10:	4614      	mov	r4, r2
   13f12:	4606      	mov	r6, r0
   13f14:	d132      	bne.n	13f7c <__pow5mult+0x74>
   13f16:	460d      	mov	r5, r1
   13f18:	10a4      	asrs	r4, r4, #2
   13f1a:	d020      	beq.n	13f5e <__pow5mult+0x56>
   13f1c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   13f20:	f1b8 0f00 	cmp.w	r8, #0
   13f24:	d033      	beq.n	13f8e <__pow5mult+0x86>
   13f26:	07e3      	lsls	r3, r4, #31
   13f28:	f04f 0700 	mov.w	r7, #0
   13f2c:	d407      	bmi.n	13f3e <__pow5mult+0x36>
   13f2e:	1064      	asrs	r4, r4, #1
   13f30:	d015      	beq.n	13f5e <__pow5mult+0x56>
   13f32:	f8d8 0000 	ldr.w	r0, [r8]
   13f36:	b1a8      	cbz	r0, 13f64 <__pow5mult+0x5c>
   13f38:	4680      	mov	r8, r0
   13f3a:	07e3      	lsls	r3, r4, #31
   13f3c:	d5f7      	bpl.n	13f2e <__pow5mult+0x26>
   13f3e:	4642      	mov	r2, r8
   13f40:	4629      	mov	r1, r5
   13f42:	4630      	mov	r0, r6
   13f44:	f7ff ff32 	bl	13dac <__multiply>
   13f48:	b1b5      	cbz	r5, 13f78 <__pow5mult+0x70>
   13f4a:	6869      	ldr	r1, [r5, #4]
   13f4c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   13f4e:	1064      	asrs	r4, r4, #1
   13f50:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   13f54:	602a      	str	r2, [r5, #0]
   13f56:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   13f5a:	4605      	mov	r5, r0
   13f5c:	d1e9      	bne.n	13f32 <__pow5mult+0x2a>
   13f5e:	4628      	mov	r0, r5
   13f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f64:	4642      	mov	r2, r8
   13f66:	4641      	mov	r1, r8
   13f68:	4630      	mov	r0, r6
   13f6a:	f7ff ff1f 	bl	13dac <__multiply>
   13f6e:	f8c8 0000 	str.w	r0, [r8]
   13f72:	6007      	str	r7, [r0, #0]
   13f74:	4680      	mov	r8, r0
   13f76:	e7e0      	b.n	13f3a <__pow5mult+0x32>
   13f78:	4605      	mov	r5, r0
   13f7a:	e7d8      	b.n	13f2e <__pow5mult+0x26>
   13f7c:	3b01      	subs	r3, #1
   13f7e:	4a0f      	ldr	r2, [pc, #60]	; (13fbc <__pow5mult+0xb4>)
   13f80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13f84:	2300      	movs	r3, #0
   13f86:	f7ff fde9 	bl	13b5c <__multadd>
   13f8a:	4605      	mov	r5, r0
   13f8c:	e7c4      	b.n	13f18 <__pow5mult+0x10>
   13f8e:	2101      	movs	r1, #1
   13f90:	4630      	mov	r0, r6
   13f92:	f7ff fdb3 	bl	13afc <_Balloc>
   13f96:	4680      	mov	r8, r0
   13f98:	b140      	cbz	r0, 13fac <__pow5mult+0xa4>
   13f9a:	2301      	movs	r3, #1
   13f9c:	f240 2271 	movw	r2, #625	; 0x271
   13fa0:	e9c0 3204 	strd	r3, r2, [r0, #16]
   13fa4:	2300      	movs	r3, #0
   13fa6:	6430      	str	r0, [r6, #64]	; 0x40
   13fa8:	6003      	str	r3, [r0, #0]
   13faa:	e7bc      	b.n	13f26 <__pow5mult+0x1e>
   13fac:	4b04      	ldr	r3, [pc, #16]	; (13fc0 <__pow5mult+0xb8>)
   13fae:	4805      	ldr	r0, [pc, #20]	; (13fc4 <__pow5mult+0xbc>)
   13fb0:	4642      	mov	r2, r8
   13fb2:	f240 1145 	movw	r1, #325	; 0x145
   13fb6:	f003 fee3 	bl	17d80 <__assert_func>
   13fba:	bf00      	nop
   13fbc:	20008068 	.word	0x20008068
   13fc0:	20000e98 	.word	0x20000e98
   13fc4:	20001010 	.word	0x20001010

00013fc8 <__lshift>:
   13fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13fcc:	460d      	mov	r5, r1
   13fce:	4614      	mov	r4, r2
   13fd0:	692f      	ldr	r7, [r5, #16]
   13fd2:	68ab      	ldr	r3, [r5, #8]
   13fd4:	6849      	ldr	r1, [r1, #4]
   13fd6:	eb07 1762 	add.w	r7, r7, r2, asr #5
   13fda:	1c7e      	adds	r6, r7, #1
   13fdc:	429e      	cmp	r6, r3
   13fde:	4680      	mov	r8, r0
   13fe0:	ea4f 1962 	mov.w	r9, r2, asr #5
   13fe4:	dd04      	ble.n	13ff0 <__lshift+0x28>
   13fe6:	005b      	lsls	r3, r3, #1
   13fe8:	429e      	cmp	r6, r3
   13fea:	f101 0101 	add.w	r1, r1, #1
   13fee:	dcfa      	bgt.n	13fe6 <__lshift+0x1e>
   13ff0:	4640      	mov	r0, r8
   13ff2:	f7ff fd83 	bl	13afc <_Balloc>
   13ff6:	4684      	mov	ip, r0
   13ff8:	2800      	cmp	r0, #0
   13ffa:	d052      	beq.n	140a2 <__lshift+0xda>
   13ffc:	f1b9 0f00 	cmp.w	r9, #0
   14000:	f100 0214 	add.w	r2, r0, #20
   14004:	dd0e      	ble.n	14024 <__lshift+0x5c>
   14006:	f109 0105 	add.w	r1, r9, #5
   1400a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1400e:	4613      	mov	r3, r2
   14010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   14014:	2000      	movs	r0, #0
   14016:	f843 0b04 	str.w	r0, [r3], #4
   1401a:	428b      	cmp	r3, r1
   1401c:	d1fb      	bne.n	14016 <__lshift+0x4e>
   1401e:	f1ae 0314 	sub.w	r3, lr, #20
   14022:	441a      	add	r2, r3
   14024:	6929      	ldr	r1, [r5, #16]
   14026:	f105 0314 	add.w	r3, r5, #20
   1402a:	f014 0e1f 	ands.w	lr, r4, #31
   1402e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14032:	d02e      	beq.n	14092 <__lshift+0xca>
   14034:	f1ce 0920 	rsb	r9, lr, #32
   14038:	4610      	mov	r0, r2
   1403a:	f04f 0a00 	mov.w	sl, #0
   1403e:	681c      	ldr	r4, [r3, #0]
   14040:	fa04 f40e 	lsl.w	r4, r4, lr
   14044:	ea44 040a 	orr.w	r4, r4, sl
   14048:	f840 4b04 	str.w	r4, [r0], #4
   1404c:	f853 4b04 	ldr.w	r4, [r3], #4
   14050:	4299      	cmp	r1, r3
   14052:	fa24 fa09 	lsr.w	sl, r4, r9
   14056:	d8f2      	bhi.n	1403e <__lshift+0x76>
   14058:	1b4b      	subs	r3, r1, r5
   1405a:	3b15      	subs	r3, #21
   1405c:	f023 0303 	bic.w	r3, r3, #3
   14060:	3304      	adds	r3, #4
   14062:	f105 0015 	add.w	r0, r5, #21
   14066:	4281      	cmp	r1, r0
   14068:	bf38      	it	cc
   1406a:	2304      	movcc	r3, #4
   1406c:	f1ba 0f00 	cmp.w	sl, #0
   14070:	bf18      	it	ne
   14072:	4637      	movne	r7, r6
   14074:	f842 a003 	str.w	sl, [r2, r3]
   14078:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1407c:	686a      	ldr	r2, [r5, #4]
   1407e:	f8cc 7010 	str.w	r7, [ip, #16]
   14082:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   14086:	6029      	str	r1, [r5, #0]
   14088:	4660      	mov	r0, ip
   1408a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14092:	3a04      	subs	r2, #4
   14094:	f853 0b04 	ldr.w	r0, [r3], #4
   14098:	f842 0f04 	str.w	r0, [r2, #4]!
   1409c:	4299      	cmp	r1, r3
   1409e:	d8f9      	bhi.n	14094 <__lshift+0xcc>
   140a0:	e7ea      	b.n	14078 <__lshift+0xb0>
   140a2:	4b03      	ldr	r3, [pc, #12]	; (140b0 <__lshift+0xe8>)
   140a4:	4803      	ldr	r0, [pc, #12]	; (140b4 <__lshift+0xec>)
   140a6:	4662      	mov	r2, ip
   140a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   140ac:	f003 fe68 	bl	17d80 <__assert_func>
   140b0:	20000e98 	.word	0x20000e98
   140b4:	20001010 	.word	0x20001010

000140b8 <__mcmp>:
   140b8:	690b      	ldr	r3, [r1, #16]
   140ba:	4684      	mov	ip, r0
   140bc:	6900      	ldr	r0, [r0, #16]
   140be:	1ac0      	subs	r0, r0, r3
   140c0:	d116      	bne.n	140f0 <__mcmp+0x38>
   140c2:	f10c 0c14 	add.w	ip, ip, #20
   140c6:	3114      	adds	r1, #20
   140c8:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   140cc:	b410      	push	{r4}
   140ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   140d2:	e001      	b.n	140d8 <__mcmp+0x20>
   140d4:	4594      	cmp	ip, r2
   140d6:	d208      	bcs.n	140ea <__mcmp+0x32>
   140d8:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   140dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   140e0:	428c      	cmp	r4, r1
   140e2:	d0f7      	beq.n	140d4 <__mcmp+0x1c>
   140e4:	d205      	bcs.n	140f2 <__mcmp+0x3a>
   140e6:	f04f 30ff 	mov.w	r0, #4294967295
   140ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   140ee:	4770      	bx	lr
   140f0:	4770      	bx	lr
   140f2:	2001      	movs	r0, #1
   140f4:	f85d 4b04 	ldr.w	r4, [sp], #4
   140f8:	4770      	bx	lr
   140fa:	bf00      	nop

000140fc <__mdiff>:
   140fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14100:	690f      	ldr	r7, [r1, #16]
   14102:	6913      	ldr	r3, [r2, #16]
   14104:	1aff      	subs	r7, r7, r3
   14106:	2f00      	cmp	r7, #0
   14108:	460e      	mov	r6, r1
   1410a:	4690      	mov	r8, r2
   1410c:	d17f      	bne.n	1420e <__mdiff+0x112>
   1410e:	f101 0514 	add.w	r5, r1, #20
   14112:	3214      	adds	r2, #20
   14114:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   14118:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1411c:	e001      	b.n	14122 <__mdiff+0x26>
   1411e:	429d      	cmp	r5, r3
   14120:	d278      	bcs.n	14214 <__mdiff+0x118>
   14122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   14126:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1412a:	42a1      	cmp	r1, r4
   1412c:	d0f7      	beq.n	1411e <__mdiff+0x22>
   1412e:	d369      	bcc.n	14204 <__mdiff+0x108>
   14130:	6871      	ldr	r1, [r6, #4]
   14132:	f7ff fce3 	bl	13afc <_Balloc>
   14136:	4681      	mov	r9, r0
   14138:	2800      	cmp	r0, #0
   1413a:	d077      	beq.n	1422c <__mdiff+0x130>
   1413c:	6935      	ldr	r5, [r6, #16]
   1413e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   14142:	60c7      	str	r7, [r0, #12]
   14144:	f108 0e14 	add.w	lr, r8, #20
   14148:	f106 0014 	add.w	r0, r6, #20
   1414c:	f109 0a14 	add.w	sl, r9, #20
   14150:	f106 0110 	add.w	r1, r6, #16
   14154:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   14158:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1415c:	4656      	mov	r6, sl
   1415e:	f04f 0c00 	mov.w	ip, #0
   14162:	f85e 4b04 	ldr.w	r4, [lr], #4
   14166:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1416a:	b2a3      	uxth	r3, r4
   1416c:	fa1c fc8b 	uxtah	ip, ip, fp
   14170:	ebac 0303 	sub.w	r3, ip, r3
   14174:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   14178:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1417c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   14180:	b29b      	uxth	r3, r3
   14182:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   14186:	4572      	cmp	r2, lr
   14188:	f846 3b04 	str.w	r3, [r6], #4
   1418c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   14190:	d8e7      	bhi.n	14162 <__mdiff+0x66>
   14192:	eba2 0108 	sub.w	r1, r2, r8
   14196:	3915      	subs	r1, #21
   14198:	f108 0815 	add.w	r8, r8, #21
   1419c:	4542      	cmp	r2, r8
   1419e:	f021 0403 	bic.w	r4, r1, #3
   141a2:	f104 0404 	add.w	r4, r4, #4
   141a6:	bf38      	it	cc
   141a8:	2404      	movcc	r4, #4
   141aa:	4420      	add	r0, r4
   141ac:	f021 0203 	bic.w	r2, r1, #3
   141b0:	bf38      	it	cc
   141b2:	2200      	movcc	r2, #0
   141b4:	4287      	cmp	r7, r0
   141b6:	4452      	add	r2, sl
   141b8:	4454      	add	r4, sl
   141ba:	d918      	bls.n	141ee <__mdiff+0xf2>
   141bc:	4626      	mov	r6, r4
   141be:	4601      	mov	r1, r0
   141c0:	f851 3b04 	ldr.w	r3, [r1], #4
   141c4:	fa1c fc83 	uxtah	ip, ip, r3
   141c8:	ea4f 422c 	mov.w	r2, ip, asr #16
   141cc:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   141d0:	fa1f fc8c 	uxth.w	ip, ip
   141d4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   141d8:	428f      	cmp	r7, r1
   141da:	f846 3b04 	str.w	r3, [r6], #4
   141de:	ea4f 4c22 	mov.w	ip, r2, asr #16
   141e2:	d8ed      	bhi.n	141c0 <__mdiff+0xc4>
   141e4:	3f01      	subs	r7, #1
   141e6:	1a3f      	subs	r7, r7, r0
   141e8:	f027 0703 	bic.w	r7, r7, #3
   141ec:	19e2      	adds	r2, r4, r7
   141ee:	b923      	cbnz	r3, 141fa <__mdiff+0xfe>
   141f0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   141f4:	3d01      	subs	r5, #1
   141f6:	2b00      	cmp	r3, #0
   141f8:	d0fa      	beq.n	141f0 <__mdiff+0xf4>
   141fa:	f8c9 5010 	str.w	r5, [r9, #16]
   141fe:	4648      	mov	r0, r9
   14200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14204:	4633      	mov	r3, r6
   14206:	2701      	movs	r7, #1
   14208:	4646      	mov	r6, r8
   1420a:	4698      	mov	r8, r3
   1420c:	e790      	b.n	14130 <__mdiff+0x34>
   1420e:	dbf9      	blt.n	14204 <__mdiff+0x108>
   14210:	2700      	movs	r7, #0
   14212:	e78d      	b.n	14130 <__mdiff+0x34>
   14214:	2100      	movs	r1, #0
   14216:	f7ff fc71 	bl	13afc <_Balloc>
   1421a:	4681      	mov	r9, r0
   1421c:	b168      	cbz	r0, 1423a <__mdiff+0x13e>
   1421e:	2201      	movs	r2, #1
   14220:	2300      	movs	r3, #0
   14222:	e9c9 2304 	strd	r2, r3, [r9, #16]
   14226:	4648      	mov	r0, r9
   14228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1422c:	4b06      	ldr	r3, [pc, #24]	; (14248 <__mdiff+0x14c>)
   1422e:	4807      	ldr	r0, [pc, #28]	; (1424c <__mdiff+0x150>)
   14230:	464a      	mov	r2, r9
   14232:	f240 2145 	movw	r1, #581	; 0x245
   14236:	f003 fda3 	bl	17d80 <__assert_func>
   1423a:	4b03      	ldr	r3, [pc, #12]	; (14248 <__mdiff+0x14c>)
   1423c:	4803      	ldr	r0, [pc, #12]	; (1424c <__mdiff+0x150>)
   1423e:	464a      	mov	r2, r9
   14240:	f240 2137 	movw	r1, #567	; 0x237
   14244:	f003 fd9c 	bl	17d80 <__assert_func>
   14248:	20000e98 	.word	0x20000e98
   1424c:	20001010 	.word	0x20001010

00014250 <__ulp>:
   14250:	b082      	sub	sp, #8
   14252:	ed8d 0b00 	vstr	d0, [sp]
   14256:	4b16      	ldr	r3, [pc, #88]	; (142b0 <__ulp+0x60>)
   14258:	9a01      	ldr	r2, [sp, #4]
   1425a:	4013      	ands	r3, r2
   1425c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   14260:	2b00      	cmp	r3, #0
   14262:	dd06      	ble.n	14272 <__ulp+0x22>
   14264:	2200      	movs	r2, #0
   14266:	4619      	mov	r1, r3
   14268:	4610      	mov	r0, r2
   1426a:	ec41 0b10 	vmov	d0, r0, r1
   1426e:	b002      	add	sp, #8
   14270:	4770      	bx	lr
   14272:	425b      	negs	r3, r3
   14274:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   14278:	ea4f 5223 	mov.w	r2, r3, asr #20
   1427c:	da09      	bge.n	14292 <__ulp+0x42>
   1427e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   14282:	4113      	asrs	r3, r2
   14284:	2200      	movs	r2, #0
   14286:	4619      	mov	r1, r3
   14288:	4610      	mov	r0, r2
   1428a:	ec41 0b10 	vmov	d0, r0, r1
   1428e:	b002      	add	sp, #8
   14290:	4770      	bx	lr
   14292:	f1a2 0314 	sub.w	r3, r2, #20
   14296:	2b1e      	cmp	r3, #30
   14298:	bfda      	itte	le
   1429a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1429e:	40da      	lsrle	r2, r3
   142a0:	2201      	movgt	r2, #1
   142a2:	2300      	movs	r3, #0
   142a4:	4619      	mov	r1, r3
   142a6:	4610      	mov	r0, r2
   142a8:	ec41 0b10 	vmov	d0, r0, r1
   142ac:	b002      	add	sp, #8
   142ae:	4770      	bx	lr
   142b0:	7ff00000 	.word	0x7ff00000

000142b4 <__b2d>:
   142b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142b6:	6904      	ldr	r4, [r0, #16]
   142b8:	f100 0614 	add.w	r6, r0, #20
   142bc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   142c0:	1f27      	subs	r7, r4, #4
   142c2:	f854 5c04 	ldr.w	r5, [r4, #-4]
   142c6:	4628      	mov	r0, r5
   142c8:	f7ff fcf2 	bl	13cb0 <__hi0bits>
   142cc:	f1c0 0320 	rsb	r3, r0, #32
   142d0:	280a      	cmp	r0, #10
   142d2:	600b      	str	r3, [r1, #0]
   142d4:	dd1b      	ble.n	1430e <__b2d+0x5a>
   142d6:	42be      	cmp	r6, r7
   142d8:	d20b      	bcs.n	142f2 <__b2d+0x3e>
   142da:	380b      	subs	r0, #11
   142dc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   142e0:	d12e      	bne.n	14340 <__b2d+0x8c>
   142e2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   142e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   142ea:	460a      	mov	r2, r1
   142ec:	ec43 2b10 	vmov	d0, r2, r3
   142f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142f2:	f1b0 010b 	subs.w	r1, r0, #11
   142f6:	d0f4      	beq.n	142e2 <__b2d+0x2e>
   142f8:	fa05 f101 	lsl.w	r1, r5, r1
   142fc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   14300:	2100      	movs	r1, #0
   14302:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14306:	460a      	mov	r2, r1
   14308:	ec43 2b10 	vmov	d0, r2, r3
   1430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1430e:	f1c0 0c0b 	rsb	ip, r0, #11
   14312:	fa25 f10c 	lsr.w	r1, r5, ip
   14316:	42be      	cmp	r6, r7
   14318:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1431c:	bf38      	it	cc
   1431e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   14322:	f100 0015 	add.w	r0, r0, #21
   14326:	bf34      	ite	cc
   14328:	fa21 f10c 	lsrcc.w	r1, r1, ip
   1432c:	2100      	movcs	r1, #0
   1432e:	fa05 f000 	lsl.w	r0, r5, r0
   14332:	4301      	orrs	r1, r0
   14334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14338:	460a      	mov	r2, r1
   1433a:	ec43 2b10 	vmov	d0, r2, r3
   1433e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14340:	f1c0 0c20 	rsb	ip, r0, #32
   14344:	4085      	lsls	r5, r0
   14346:	fa21 f30c 	lsr.w	r3, r1, ip
   1434a:	ea45 0703 	orr.w	r7, r5, r3
   1434e:	f1a4 0508 	sub.w	r5, r4, #8
   14352:	42ae      	cmp	r6, r5
   14354:	fa01 f100 	lsl.w	r1, r1, r0
   14358:	bf3c      	itt	cc
   1435a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   1435e:	fa20 f00c 	lsrcc.w	r0, r0, ip
   14362:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   14366:	bf38      	it	cc
   14368:	4301      	orrcc	r1, r0
   1436a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1436e:	460a      	mov	r2, r1
   14370:	ec43 2b10 	vmov	d0, r2, r3
   14374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14376:	bf00      	nop

00014378 <__d2b>:
   14378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1437c:	4688      	mov	r8, r1
   1437e:	b083      	sub	sp, #12
   14380:	2101      	movs	r1, #1
   14382:	ec57 6b10 	vmov	r6, r7, d0
   14386:	4615      	mov	r5, r2
   14388:	f7ff fbb8 	bl	13afc <_Balloc>
   1438c:	4604      	mov	r4, r0
   1438e:	2800      	cmp	r0, #0
   14390:	d051      	beq.n	14436 <__d2b+0xbe>
   14392:	f3c7 590a 	ubfx	r9, r7, #20, #11
   14396:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1439a:	f1b9 0f00 	cmp.w	r9, #0
   1439e:	d001      	beq.n	143a4 <__d2b+0x2c>
   143a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   143a4:	2e00      	cmp	r6, #0
   143a6:	9301      	str	r3, [sp, #4]
   143a8:	d118      	bne.n	143dc <__d2b+0x64>
   143aa:	a801      	add	r0, sp, #4
   143ac:	f7ff fca0 	bl	13cf0 <__lo0bits>
   143b0:	9a01      	ldr	r2, [sp, #4]
   143b2:	6162      	str	r2, [r4, #20]
   143b4:	2201      	movs	r2, #1
   143b6:	f100 0320 	add.w	r3, r0, #32
   143ba:	6122      	str	r2, [r4, #16]
   143bc:	f1b9 0f00 	cmp.w	r9, #0
   143c0:	d025      	beq.n	1440e <__d2b+0x96>
   143c2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   143c6:	eb09 0203 	add.w	r2, r9, r3
   143ca:	4620      	mov	r0, r4
   143cc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   143d0:	f8c8 2000 	str.w	r2, [r8]
   143d4:	602b      	str	r3, [r5, #0]
   143d6:	b003      	add	sp, #12
   143d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   143dc:	4668      	mov	r0, sp
   143de:	9600      	str	r6, [sp, #0]
   143e0:	f7ff fc86 	bl	13cf0 <__lo0bits>
   143e4:	4603      	mov	r3, r0
   143e6:	b310      	cbz	r0, 1442e <__d2b+0xb6>
   143e8:	e9dd 0200 	ldrd	r0, r2, [sp]
   143ec:	f1c3 0120 	rsb	r1, r3, #32
   143f0:	fa02 f101 	lsl.w	r1, r2, r1
   143f4:	4301      	orrs	r1, r0
   143f6:	40da      	lsrs	r2, r3
   143f8:	6161      	str	r1, [r4, #20]
   143fa:	9201      	str	r2, [sp, #4]
   143fc:	2a00      	cmp	r2, #0
   143fe:	61a2      	str	r2, [r4, #24]
   14400:	bf14      	ite	ne
   14402:	2202      	movne	r2, #2
   14404:	2201      	moveq	r2, #1
   14406:	6122      	str	r2, [r4, #16]
   14408:	f1b9 0f00 	cmp.w	r9, #0
   1440c:	d1d9      	bne.n	143c2 <__d2b+0x4a>
   1440e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   14412:	f8c8 3000 	str.w	r3, [r8]
   14416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1441a:	6918      	ldr	r0, [r3, #16]
   1441c:	f7ff fc48 	bl	13cb0 <__hi0bits>
   14420:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   14424:	4620      	mov	r0, r4
   14426:	602b      	str	r3, [r5, #0]
   14428:	b003      	add	sp, #12
   1442a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1442e:	9a00      	ldr	r2, [sp, #0]
   14430:	6162      	str	r2, [r4, #20]
   14432:	9a01      	ldr	r2, [sp, #4]
   14434:	e7e2      	b.n	143fc <__d2b+0x84>
   14436:	4b03      	ldr	r3, [pc, #12]	; (14444 <__d2b+0xcc>)
   14438:	4803      	ldr	r0, [pc, #12]	; (14448 <__d2b+0xd0>)
   1443a:	4622      	mov	r2, r4
   1443c:	f240 310f 	movw	r1, #783	; 0x30f
   14440:	f003 fc9e 	bl	17d80 <__assert_func>
   14444:	20000e98 	.word	0x20000e98
   14448:	20001010 	.word	0x20001010

0001444c <__ratio>:
   1444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1444e:	b083      	sub	sp, #12
   14450:	460e      	mov	r6, r1
   14452:	4669      	mov	r1, sp
   14454:	4607      	mov	r7, r0
   14456:	f7ff ff2d 	bl	142b4 <__b2d>
   1445a:	a901      	add	r1, sp, #4
   1445c:	4630      	mov	r0, r6
   1445e:	ec55 4b10 	vmov	r4, r5, d0
   14462:	eeb0 7b40 	vmov.f64	d7, d0
   14466:	f7ff ff25 	bl	142b4 <__b2d>
   1446a:	6933      	ldr	r3, [r6, #16]
   1446c:	693a      	ldr	r2, [r7, #16]
   1446e:	1ad2      	subs	r2, r2, r3
   14470:	e9dd 3100 	ldrd	r3, r1, [sp]
   14474:	1a5b      	subs	r3, r3, r1
   14476:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1447a:	2b00      	cmp	r3, #0
   1447c:	dd09      	ble.n	14492 <__ratio+0x46>
   1447e:	ee17 2a90 	vmov	r2, s15
   14482:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   14486:	ec45 4b17 	vmov	d7, r4, r5
   1448a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1448e:	b003      	add	sp, #12
   14490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14492:	ee10 2a90 	vmov	r2, s1
   14496:	ec51 0b10 	vmov	r0, r1, d0
   1449a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1449e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   144a2:	ec41 0b10 	vmov	d0, r0, r1
   144a6:	ee87 0b00 	vdiv.f64	d0, d7, d0
   144aa:	b003      	add	sp, #12
   144ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144ae:	bf00      	nop

000144b0 <__copybits>:
   144b0:	3901      	subs	r1, #1
   144b2:	1149      	asrs	r1, r1, #5
   144b4:	f101 0c01 	add.w	ip, r1, #1
   144b8:	6911      	ldr	r1, [r2, #16]
   144ba:	f102 0314 	add.w	r3, r2, #20
   144be:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   144c2:	428b      	cmp	r3, r1
   144c4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   144c8:	d217      	bcs.n	144fa <__copybits+0x4a>
   144ca:	b510      	push	{r4, lr}
   144cc:	f1a0 0e04 	sub.w	lr, r0, #4
   144d0:	f853 4b04 	ldr.w	r4, [r3], #4
   144d4:	f84e 4f04 	str.w	r4, [lr, #4]!
   144d8:	4299      	cmp	r1, r3
   144da:	d8f9      	bhi.n	144d0 <__copybits+0x20>
   144dc:	1a8a      	subs	r2, r1, r2
   144de:	f1a2 0315 	sub.w	r3, r2, #21
   144e2:	f023 0303 	bic.w	r3, r3, #3
   144e6:	3304      	adds	r3, #4
   144e8:	4418      	add	r0, r3
   144ea:	4584      	cmp	ip, r0
   144ec:	d904      	bls.n	144f8 <__copybits+0x48>
   144ee:	2300      	movs	r3, #0
   144f0:	f840 3b04 	str.w	r3, [r0], #4
   144f4:	4584      	cmp	ip, r0
   144f6:	d8fb      	bhi.n	144f0 <__copybits+0x40>
   144f8:	bd10      	pop	{r4, pc}
   144fa:	4584      	cmp	ip, r0
   144fc:	d905      	bls.n	1450a <__copybits+0x5a>
   144fe:	2300      	movs	r3, #0
   14500:	f840 3b04 	str.w	r3, [r0], #4
   14504:	4584      	cmp	ip, r0
   14506:	d8fb      	bhi.n	14500 <__copybits+0x50>
   14508:	4770      	bx	lr
   1450a:	4770      	bx	lr

0001450c <__any_on>:
   1450c:	6903      	ldr	r3, [r0, #16]
   1450e:	114a      	asrs	r2, r1, #5
   14510:	4293      	cmp	r3, r2
   14512:	f100 0014 	add.w	r0, r0, #20
   14516:	da09      	bge.n	1452c <__any_on+0x20>
   14518:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1451c:	e002      	b.n	14524 <__any_on+0x18>
   1451e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   14522:	b9c2      	cbnz	r2, 14556 <__any_on+0x4a>
   14524:	4283      	cmp	r3, r0
   14526:	d8fa      	bhi.n	1451e <__any_on+0x12>
   14528:	2000      	movs	r0, #0
   1452a:	4770      	bx	lr
   1452c:	dd10      	ble.n	14550 <__any_on+0x44>
   1452e:	f011 011f 	ands.w	r1, r1, #31
   14532:	d00d      	beq.n	14550 <__any_on+0x44>
   14534:	b410      	push	{r4}
   14536:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   1453a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   1453e:	fa24 f201 	lsr.w	r2, r4, r1
   14542:	408a      	lsls	r2, r1
   14544:	4294      	cmp	r4, r2
   14546:	d00c      	beq.n	14562 <__any_on+0x56>
   14548:	2001      	movs	r0, #1
   1454a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1454e:	4770      	bx	lr
   14550:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   14554:	e7e6      	b.n	14524 <__any_on+0x18>
   14556:	2001      	movs	r0, #1
   14558:	4770      	bx	lr
   1455a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1455e:	2a00      	cmp	r2, #0
   14560:	d1f2      	bne.n	14548 <__any_on+0x3c>
   14562:	4283      	cmp	r3, r0
   14564:	d8f9      	bhi.n	1455a <__any_on+0x4e>
   14566:	2000      	movs	r0, #0
   14568:	f85d 4b04 	ldr.w	r4, [sp], #4
   1456c:	4770      	bx	lr
   1456e:	bf00      	nop

00014570 <__ascii_wctomb>:
   14570:	b149      	cbz	r1, 14586 <__ascii_wctomb+0x16>
   14572:	2aff      	cmp	r2, #255	; 0xff
   14574:	d802      	bhi.n	1457c <__ascii_wctomb+0xc>
   14576:	700a      	strb	r2, [r1, #0]
   14578:	2001      	movs	r0, #1
   1457a:	4770      	bx	lr
   1457c:	238a      	movs	r3, #138	; 0x8a
   1457e:	6003      	str	r3, [r0, #0]
   14580:	f04f 30ff 	mov.w	r0, #4294967295
   14584:	4770      	bx	lr
   14586:	4608      	mov	r0, r1
   14588:	4770      	bx	lr
   1458a:	bf00      	nop

0001458c <fcvtbuf>:
   1458c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14590:	460e      	mov	r6, r1
   14592:	4926      	ldr	r1, [pc, #152]	; (1462c <fcvtbuf+0xa0>)
   14594:	b087      	sub	sp, #28
   14596:	680f      	ldr	r7, [r1, #0]
   14598:	4604      	mov	r4, r0
   1459a:	4690      	mov	r8, r2
   1459c:	461d      	mov	r5, r3
   1459e:	b353      	cbz	r3, 145f6 <fcvtbuf+0x6a>
   145a0:	aa05      	add	r2, sp, #20
   145a2:	4633      	mov	r3, r6
   145a4:	9201      	str	r2, [sp, #4]
   145a6:	2103      	movs	r1, #3
   145a8:	4622      	mov	r2, r4
   145aa:	f8cd 8000 	str.w	r8, [sp]
   145ae:	4638      	mov	r0, r7
   145b0:	f003 fcd6 	bl	17f60 <_dtoa_r>
   145b4:	9b05      	ldr	r3, [sp, #20]
   145b6:	6832      	ldr	r2, [r6, #0]
   145b8:	4298      	cmp	r0, r3
   145ba:	4684      	mov	ip, r0
   145bc:	f1c2 0200 	rsb	r2, r2, #0
   145c0:	4629      	mov	r1, r5
   145c2:	d209      	bcs.n	145d8 <fcvtbuf+0x4c>
   145c4:	1a10      	subs	r0, r2, r0
   145c6:	f81c 3b01 	ldrb.w	r3, [ip], #1
   145ca:	f801 3b01 	strb.w	r3, [r1], #1
   145ce:	9b05      	ldr	r3, [sp, #20]
   145d0:	4563      	cmp	r3, ip
   145d2:	eb00 020c 	add.w	r2, r0, ip
   145d6:	d8f6      	bhi.n	145c6 <fcvtbuf+0x3a>
   145d8:	4294      	cmp	r4, r2
   145da:	dd24      	ble.n	14626 <fcvtbuf+0x9a>
   145dc:	1aa2      	subs	r2, r4, r2
   145de:	440a      	add	r2, r1
   145e0:	2330      	movs	r3, #48	; 0x30
   145e2:	f801 3b01 	strb.w	r3, [r1], #1
   145e6:	4291      	cmp	r1, r2
   145e8:	d1fb      	bne.n	145e2 <fcvtbuf+0x56>
   145ea:	2300      	movs	r3, #0
   145ec:	7013      	strb	r3, [r2, #0]
   145ee:	4628      	mov	r0, r5
   145f0:	b007      	add	sp, #28
   145f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   145f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   145f8:	f100 0323 	add.w	r3, r0, #35	; 0x23
   145fc:	429a      	cmp	r2, r3
   145fe:	dd01      	ble.n	14604 <fcvtbuf+0x78>
   14600:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   14602:	e7cd      	b.n	145a0 <fcvtbuf+0x14>
   14604:	f100 0924 	add.w	r9, r0, #36	; 0x24
   14608:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1460a:	464a      	mov	r2, r9
   1460c:	4638      	mov	r0, r7
   1460e:	ed8d 0b02 	vstr	d0, [sp, #8]
   14612:	f7fc fba9 	bl	10d68 <_realloc_r>
   14616:	4605      	mov	r5, r0
   14618:	2800      	cmp	r0, #0
   1461a:	d0e8      	beq.n	145ee <fcvtbuf+0x62>
   1461c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   14620:	ed9d 0b02 	vldr	d0, [sp, #8]
   14624:	e7bc      	b.n	145a0 <fcvtbuf+0x14>
   14626:	460a      	mov	r2, r1
   14628:	e7df      	b.n	145ea <fcvtbuf+0x5e>
   1462a:	bf00      	nop
   1462c:	2000951c 	.word	0x2000951c

00014630 <_svfprintf_r>:
   14630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14634:	ed2d 8b08 	vpush	{d8-d11}
   14638:	b0d1      	sub	sp, #324	; 0x144
   1463a:	460c      	mov	r4, r1
   1463c:	ee0b 1a10 	vmov	s22, r1
   14640:	4690      	mov	r8, r2
   14642:	9308      	str	r3, [sp, #32]
   14644:	4683      	mov	fp, r0
   14646:	f003 fb59 	bl	17cfc <_localeconv_r>
   1464a:	6803      	ldr	r3, [r0, #0]
   1464c:	9312      	str	r3, [sp, #72]	; 0x48
   1464e:	4618      	mov	r0, r3
   14650:	f7fe fc16 	bl	12e80 <strlen>
   14654:	af20      	add	r7, sp, #128	; 0x80
   14656:	9010      	str	r0, [sp, #64]	; 0x40
   14658:	2208      	movs	r2, #8
   1465a:	2100      	movs	r1, #0
   1465c:	4638      	mov	r0, r7
   1465e:	f7fe f82b 	bl	126b8 <memset>
   14662:	89a3      	ldrh	r3, [r4, #12]
   14664:	061b      	lsls	r3, r3, #24
   14666:	d503      	bpl.n	14670 <_svfprintf_r+0x40>
   14668:	6923      	ldr	r3, [r4, #16]
   1466a:	2b00      	cmp	r3, #0
   1466c:	f000 8755 	beq.w	1551a <_svfprintf_r+0xeea>
   14670:	2300      	movs	r3, #0
   14672:	ed9f 8b83 	vldr	d8, [pc, #524]	; 14880 <_svfprintf_r+0x250>
   14676:	ed9f 9b84 	vldr	d9, [pc, #528]	; 14888 <_svfprintf_r+0x258>
   1467a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   1467e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   14682:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   14686:	aa27      	add	r2, sp, #156	; 0x9c
   14688:	930e      	str	r3, [sp, #56]	; 0x38
   1468a:	9224      	str	r2, [sp, #144]	; 0x90
   1468c:	4692      	mov	sl, r2
   1468e:	9311      	str	r3, [sp, #68]	; 0x44
   14690:	9304      	str	r3, [sp, #16]
   14692:	4644      	mov	r4, r8
   14694:	46a1      	mov	r9, r4
   14696:	4b7e      	ldr	r3, [pc, #504]	; (14890 <_svfprintf_r+0x260>)
   14698:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1469c:	f7fe f92c 	bl	128f8 <__locale_mb_cur_max>
   146a0:	464a      	mov	r2, r9
   146a2:	4603      	mov	r3, r0
   146a4:	a91c      	add	r1, sp, #112	; 0x70
   146a6:	9700      	str	r7, [sp, #0]
   146a8:	4658      	mov	r0, fp
   146aa:	47a8      	blx	r5
   146ac:	2800      	cmp	r0, #0
   146ae:	f000 80b0 	beq.w	14812 <_svfprintf_r+0x1e2>
   146b2:	f2c0 80a6 	blt.w	14802 <_svfprintf_r+0x1d2>
   146b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   146b8:	2a25      	cmp	r2, #37	; 0x25
   146ba:	4603      	mov	r3, r0
   146bc:	d001      	beq.n	146c2 <_svfprintf_r+0x92>
   146be:	4499      	add	r9, r3
   146c0:	e7e9      	b.n	14696 <_svfprintf_r+0x66>
   146c2:	ebb9 0504 	subs.w	r5, r9, r4
   146c6:	4606      	mov	r6, r0
   146c8:	f040 80a7 	bne.w	1481a <_svfprintf_r+0x1ea>
   146cc:	2300      	movs	r3, #0
   146ce:	f04f 32ff 	mov.w	r2, #4294967295
   146d2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   146d6:	4698      	mov	r8, r3
   146d8:	9306      	str	r3, [sp, #24]
   146da:	f109 0901 	add.w	r9, r9, #1
   146de:	f899 3000 	ldrb.w	r3, [r9]
   146e2:	9203      	str	r2, [sp, #12]
   146e4:	252b      	movs	r5, #43	; 0x2b
   146e6:	2620      	movs	r6, #32
   146e8:	f109 0901 	add.w	r9, r9, #1
   146ec:	f1a3 0220 	sub.w	r2, r3, #32
   146f0:	2a5a      	cmp	r2, #90	; 0x5a
   146f2:	f200 80cf 	bhi.w	14894 <_svfprintf_r+0x264>
   146f6:	e8df f012 	tbh	[pc, r2, lsl #1]
   146fa:	02e8      	.short	0x02e8
   146fc:	00cd00cd 	.word	0x00cd00cd
   14700:	00cd02e3 	.word	0x00cd02e3
   14704:	00cd00cd 	.word	0x00cd00cd
   14708:	00cd006a 	.word	0x00cd006a
   1470c:	020500cd 	.word	0x020500cd
   14710:	00cd0284 	.word	0x00cd0284
   14714:	02c90210 	.word	0x02c90210
   14718:	02bd00cd 	.word	0x02bd00cd
   1471c:	005b005b 	.word	0x005b005b
   14720:	005b005b 	.word	0x005b005b
   14724:	005b005b 	.word	0x005b005b
   14728:	005b005b 	.word	0x005b005b
   1472c:	00cd005b 	.word	0x00cd005b
   14730:	00cd00cd 	.word	0x00cd00cd
   14734:	00cd00cd 	.word	0x00cd00cd
   14738:	00cd00cd 	.word	0x00cd00cd
   1473c:	00cd0153 	.word	0x00cd0153
   14740:	021a0183 	.word	0x021a0183
   14744:	01530153 	.word	0x01530153
   14748:	00cd0153 	.word	0x00cd0153
   1474c:	00cd00cd 	.word	0x00cd00cd
   14750:	021500cd 	.word	0x021500cd
   14754:	00cd00cd 	.word	0x00cd00cd
   14758:	00cd0296 	.word	0x00cd0296
   1475c:	00cd00cd 	.word	0x00cd00cd
   14760:	00cd01ab 	.word	0x00cd01ab
   14764:	00cd02aa 	.word	0x00cd02aa
   14768:	06e300cd 	.word	0x06e300cd
   1476c:	00cd00cd 	.word	0x00cd00cd
   14770:	00cd00cd 	.word	0x00cd00cd
   14774:	00cd00cd 	.word	0x00cd00cd
   14778:	00cd00cd 	.word	0x00cd00cd
   1477c:	00cd0153 	.word	0x00cd0153
   14780:	01de0183 	.word	0x01de0183
   14784:	01530153 	.word	0x01530153
   14788:	02770153 	.word	0x02770153
   1478c:	007f01de 	.word	0x007f01de
   14790:	028900cd 	.word	0x028900cd
   14794:	025f00cd 	.word	0x025f00cd
   14798:	022f06e0 	.word	0x022f06e0
   1479c:	00cd007f 	.word	0x00cd007f
   147a0:	007c01ab 	.word	0x007c01ab
   147a4:	00cd06b8 	.word	0x00cd06b8
   147a8:	06bd00cd 	.word	0x06bd00cd
   147ac:	007c00cd 	.word	0x007c00cd
   147b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   147b4:	2100      	movs	r1, #0
   147b6:	f819 3b01 	ldrb.w	r3, [r9], #1
   147ba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   147be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   147c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   147c6:	2a09      	cmp	r2, #9
   147c8:	d9f5      	bls.n	147b6 <_svfprintf_r+0x186>
   147ca:	9106      	str	r1, [sp, #24]
   147cc:	e78e      	b.n	146ec <_svfprintf_r+0xbc>
   147ce:	4658      	mov	r0, fp
   147d0:	f003 fa94 	bl	17cfc <_localeconv_r>
   147d4:	6843      	ldr	r3, [r0, #4]
   147d6:	9315      	str	r3, [sp, #84]	; 0x54
   147d8:	4618      	mov	r0, r3
   147da:	f7fe fb51 	bl	12e80 <strlen>
   147de:	9016      	str	r0, [sp, #88]	; 0x58
   147e0:	4658      	mov	r0, fp
   147e2:	f003 fa8b 	bl	17cfc <_localeconv_r>
   147e6:	6883      	ldr	r3, [r0, #8]
   147e8:	9313      	str	r3, [sp, #76]	; 0x4c
   147ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   147ec:	2b00      	cmp	r3, #0
   147ee:	f040 862d 	bne.w	1544c <_svfprintf_r+0xe1c>
   147f2:	f899 3000 	ldrb.w	r3, [r9]
   147f6:	e777      	b.n	146e8 <_svfprintf_r+0xb8>
   147f8:	f899 3000 	ldrb.w	r3, [r9]
   147fc:	f048 0820 	orr.w	r8, r8, #32
   14800:	e772      	b.n	146e8 <_svfprintf_r+0xb8>
   14802:	2208      	movs	r2, #8
   14804:	2100      	movs	r1, #0
   14806:	4638      	mov	r0, r7
   14808:	f7fd ff56 	bl	126b8 <memset>
   1480c:	2301      	movs	r3, #1
   1480e:	4499      	add	r9, r3
   14810:	e741      	b.n	14696 <_svfprintf_r+0x66>
   14812:	ebb9 0504 	subs.w	r5, r9, r4
   14816:	4606      	mov	r6, r0
   14818:	d011      	beq.n	1483e <_svfprintf_r+0x20e>
   1481a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1481c:	442b      	add	r3, r5
   1481e:	9326      	str	r3, [sp, #152]	; 0x98
   14820:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14822:	3301      	adds	r3, #1
   14824:	2b07      	cmp	r3, #7
   14826:	e9ca 4500 	strd	r4, r5, [sl]
   1482a:	9325      	str	r3, [sp, #148]	; 0x94
   1482c:	dc1c      	bgt.n	14868 <_svfprintf_r+0x238>
   1482e:	f10a 0a08 	add.w	sl, sl, #8
   14832:	9b04      	ldr	r3, [sp, #16]
   14834:	442b      	add	r3, r5
   14836:	9304      	str	r3, [sp, #16]
   14838:	2e00      	cmp	r6, #0
   1483a:	f47f af47 	bne.w	146cc <_svfprintf_r+0x9c>
   1483e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   14840:	2b00      	cmp	r3, #0
   14842:	f041 820b 	bne.w	15c5c <_svfprintf_r+0x162c>
   14846:	ee1b 3a10 	vmov	r3, s22
   1484a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1484e:	f013 0f40 	tst.w	r3, #64	; 0x40
   14852:	9b04      	ldr	r3, [sp, #16]
   14854:	bf18      	it	ne
   14856:	f04f 33ff 	movne.w	r3, #4294967295
   1485a:	9304      	str	r3, [sp, #16]
   1485c:	9804      	ldr	r0, [sp, #16]
   1485e:	b051      	add	sp, #324	; 0x144
   14860:	ecbd 8b08 	vpop	{d8-d11}
   14864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14868:	ee1b 1a10 	vmov	r1, s22
   1486c:	aa24      	add	r2, sp, #144	; 0x90
   1486e:	4658      	mov	r0, fp
   14870:	f004 fd6a 	bl	19348 <__ssprint_r>
   14874:	2800      	cmp	r0, #0
   14876:	d1e6      	bne.n	14846 <_svfprintf_r+0x216>
   14878:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1487c:	e7d9      	b.n	14832 <_svfprintf_r+0x202>
   1487e:	bf00      	nop
	...
   14888:	ffffffff 	.word	0xffffffff
   1488c:	7fefffff 	.word	0x7fefffff
   14890:	20008f94 	.word	0x20008f94
   14894:	930b      	str	r3, [sp, #44]	; 0x2c
   14896:	2b00      	cmp	r3, #0
   14898:	d0d1      	beq.n	1483e <_svfprintf_r+0x20e>
   1489a:	2100      	movs	r1, #0
   1489c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   148a0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   148a4:	2301      	movs	r3, #1
   148a6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   148aa:	9302      	str	r3, [sp, #8]
   148ac:	9107      	str	r1, [sp, #28]
   148ae:	9305      	str	r3, [sp, #20]
   148b0:	9103      	str	r1, [sp, #12]
   148b2:	910f      	str	r1, [sp, #60]	; 0x3c
   148b4:	ac37      	add	r4, sp, #220	; 0xdc
   148b6:	f018 0302 	ands.w	r3, r8, #2
   148ba:	9309      	str	r3, [sp, #36]	; 0x24
   148bc:	d002      	beq.n	148c4 <_svfprintf_r+0x294>
   148be:	9b02      	ldr	r3, [sp, #8]
   148c0:	3302      	adds	r3, #2
   148c2:	9302      	str	r3, [sp, #8]
   148c4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   148c8:	930a      	str	r3, [sp, #40]	; 0x28
   148ca:	d105      	bne.n	148d8 <_svfprintf_r+0x2a8>
   148cc:	9b06      	ldr	r3, [sp, #24]
   148ce:	9a02      	ldr	r2, [sp, #8]
   148d0:	1a9d      	subs	r5, r3, r2
   148d2:	2d00      	cmp	r5, #0
   148d4:	f300 8369 	bgt.w	14faa <_svfprintf_r+0x97a>
   148d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   148da:	b189      	cbz	r1, 14900 <_svfprintf_r+0x2d0>
   148dc:	9925      	ldr	r1, [sp, #148]	; 0x94
   148de:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   148e2:	3101      	adds	r1, #1
   148e4:	3201      	adds	r2, #1
   148e6:	f8ca 0000 	str.w	r0, [sl]
   148ea:	2907      	cmp	r1, #7
   148ec:	f04f 0001 	mov.w	r0, #1
   148f0:	9226      	str	r2, [sp, #152]	; 0x98
   148f2:	9125      	str	r1, [sp, #148]	; 0x94
   148f4:	f8ca 0004 	str.w	r0, [sl, #4]
   148f8:	f300 83a2 	bgt.w	15040 <_svfprintf_r+0xa10>
   148fc:	f10a 0a08 	add.w	sl, sl, #8
   14900:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14902:	b183      	cbz	r3, 14926 <_svfprintf_r+0x2f6>
   14904:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14906:	a91a      	add	r1, sp, #104	; 0x68
   14908:	3301      	adds	r3, #1
   1490a:	3202      	adds	r2, #2
   1490c:	f8ca 1000 	str.w	r1, [sl]
   14910:	2b07      	cmp	r3, #7
   14912:	f04f 0102 	mov.w	r1, #2
   14916:	9226      	str	r2, [sp, #152]	; 0x98
   14918:	9325      	str	r3, [sp, #148]	; 0x94
   1491a:	f8ca 1004 	str.w	r1, [sl, #4]
   1491e:	f300 83a3 	bgt.w	15068 <_svfprintf_r+0xa38>
   14922:	f10a 0a08 	add.w	sl, sl, #8
   14926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14928:	2b80      	cmp	r3, #128	; 0x80
   1492a:	f000 826c 	beq.w	14e06 <_svfprintf_r+0x7d6>
   1492e:	9b03      	ldr	r3, [sp, #12]
   14930:	9905      	ldr	r1, [sp, #20]
   14932:	1a5d      	subs	r5, r3, r1
   14934:	2d00      	cmp	r5, #0
   14936:	f300 82a5 	bgt.w	14e84 <_svfprintf_r+0x854>
   1493a:	f418 7f80 	tst.w	r8, #256	; 0x100
   1493e:	f040 820d 	bne.w	14d5c <_svfprintf_r+0x72c>
   14942:	9b05      	ldr	r3, [sp, #20]
   14944:	f8ca 3004 	str.w	r3, [sl, #4]
   14948:	441a      	add	r2, r3
   1494a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1494c:	f8ca 4000 	str.w	r4, [sl]
   14950:	3301      	adds	r3, #1
   14952:	2b07      	cmp	r3, #7
   14954:	9226      	str	r2, [sp, #152]	; 0x98
   14956:	9325      	str	r3, [sp, #148]	; 0x94
   14958:	f300 831b 	bgt.w	14f92 <_svfprintf_r+0x962>
   1495c:	f10a 0a08 	add.w	sl, sl, #8
   14960:	f018 0f04 	tst.w	r8, #4
   14964:	d005      	beq.n	14972 <_svfprintf_r+0x342>
   14966:	9b06      	ldr	r3, [sp, #24]
   14968:	9902      	ldr	r1, [sp, #8]
   1496a:	1a5c      	subs	r4, r3, r1
   1496c:	2c00      	cmp	r4, #0
   1496e:	f300 8388 	bgt.w	15082 <_svfprintf_r+0xa52>
   14972:	9b04      	ldr	r3, [sp, #16]
   14974:	9906      	ldr	r1, [sp, #24]
   14976:	9802      	ldr	r0, [sp, #8]
   14978:	4281      	cmp	r1, r0
   1497a:	bfac      	ite	ge
   1497c:	185b      	addge	r3, r3, r1
   1497e:	181b      	addlt	r3, r3, r0
   14980:	9304      	str	r3, [sp, #16]
   14982:	2a00      	cmp	r2, #0
   14984:	f040 82b0 	bne.w	14ee8 <_svfprintf_r+0x8b8>
   14988:	2300      	movs	r3, #0
   1498a:	9325      	str	r3, [sp, #148]	; 0x94
   1498c:	9b07      	ldr	r3, [sp, #28]
   1498e:	b11b      	cbz	r3, 14998 <_svfprintf_r+0x368>
   14990:	9907      	ldr	r1, [sp, #28]
   14992:	4658      	mov	r0, fp
   14994:	f7fe fb86 	bl	130a4 <_free_r>
   14998:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1499c:	464c      	mov	r4, r9
   1499e:	e679      	b.n	14694 <_svfprintf_r+0x64>
   149a0:	930b      	str	r3, [sp, #44]	; 0x2c
   149a2:	9b08      	ldr	r3, [sp, #32]
   149a4:	3307      	adds	r3, #7
   149a6:	f023 0307 	bic.w	r3, r3, #7
   149aa:	ecb3 8b02 	vldmia	r3!, {d8}
   149ae:	eeb0 7bc8 	vabs.f64	d7, d8
   149b2:	eeb4 7b49 	vcmp.f64	d7, d9
   149b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149ba:	9308      	str	r3, [sp, #32]
   149bc:	f340 84e9 	ble.w	15392 <_svfprintf_r+0xd62>
   149c0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   149c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   149c8:	f101 8059 	bmi.w	15a7e <_svfprintf_r+0x144e>
   149cc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   149d0:	4cab      	ldr	r4, [pc, #684]	; (14c80 <_svfprintf_r+0x650>)
   149d2:	4bac      	ldr	r3, [pc, #688]	; (14c84 <_svfprintf_r+0x654>)
   149d4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   149d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   149da:	2a47      	cmp	r2, #71	; 0x47
   149dc:	bfc8      	it	gt
   149de:	461c      	movgt	r4, r3
   149e0:	2300      	movs	r3, #0
   149e2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   149e6:	2203      	movs	r2, #3
   149e8:	9307      	str	r3, [sp, #28]
   149ea:	9202      	str	r2, [sp, #8]
   149ec:	9205      	str	r2, [sp, #20]
   149ee:	9303      	str	r3, [sp, #12]
   149f0:	930f      	str	r3, [sp, #60]	; 0x3c
   149f2:	2900      	cmp	r1, #0
   149f4:	f43f af5f 	beq.w	148b6 <_svfprintf_r+0x286>
   149f8:	9b02      	ldr	r3, [sp, #8]
   149fa:	3301      	adds	r3, #1
   149fc:	9302      	str	r3, [sp, #8]
   149fe:	e75a      	b.n	148b6 <_svfprintf_r+0x286>
   14a00:	2b43      	cmp	r3, #67	; 0x43
   14a02:	930b      	str	r3, [sp, #44]	; 0x2c
   14a04:	d003      	beq.n	14a0e <_svfprintf_r+0x3de>
   14a06:	f018 0f10 	tst.w	r8, #16
   14a0a:	f000 855d 	beq.w	154c8 <_svfprintf_r+0xe98>
   14a0e:	9d08      	ldr	r5, [sp, #32]
   14a10:	2208      	movs	r2, #8
   14a12:	2100      	movs	r1, #0
   14a14:	a822      	add	r0, sp, #136	; 0x88
   14a16:	ac37      	add	r4, sp, #220	; 0xdc
   14a18:	f7fd fe4e 	bl	126b8 <memset>
   14a1c:	ab22      	add	r3, sp, #136	; 0x88
   14a1e:	f855 2b04 	ldr.w	r2, [r5], #4
   14a22:	4621      	mov	r1, r4
   14a24:	4658      	mov	r0, fp
   14a26:	f004 fb65 	bl	190f4 <_wcrtomb_r>
   14a2a:	4603      	mov	r3, r0
   14a2c:	3301      	adds	r3, #1
   14a2e:	9005      	str	r0, [sp, #20]
   14a30:	f001 82ee 	beq.w	16010 <_svfprintf_r+0x19e0>
   14a34:	9b05      	ldr	r3, [sp, #20]
   14a36:	9508      	str	r5, [sp, #32]
   14a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14a3c:	9302      	str	r3, [sp, #8]
   14a3e:	2100      	movs	r1, #0
   14a40:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   14a44:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14a48:	9107      	str	r1, [sp, #28]
   14a4a:	9103      	str	r1, [sp, #12]
   14a4c:	910f      	str	r1, [sp, #60]	; 0x3c
   14a4e:	e732      	b.n	148b6 <_svfprintf_r+0x286>
   14a50:	930b      	str	r3, [sp, #44]	; 0x2c
   14a52:	9b08      	ldr	r3, [sp, #32]
   14a54:	461a      	mov	r2, r3
   14a56:	2300      	movs	r3, #0
   14a58:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   14a5c:	4613      	mov	r3, r2
   14a5e:	f853 4b04 	ldr.w	r4, [r3], #4
   14a62:	9308      	str	r3, [sp, #32]
   14a64:	2c00      	cmp	r4, #0
   14a66:	f000 8548 	beq.w	154fa <_svfprintf_r+0xeca>
   14a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a6c:	2b53      	cmp	r3, #83	; 0x53
   14a6e:	f000 86ec 	beq.w	1584a <_svfprintf_r+0x121a>
   14a72:	f018 0310 	ands.w	r3, r8, #16
   14a76:	930c      	str	r3, [sp, #48]	; 0x30
   14a78:	f040 86e7 	bne.w	1584a <_svfprintf_r+0x121a>
   14a7c:	9b03      	ldr	r3, [sp, #12]
   14a7e:	1c5d      	adds	r5, r3, #1
   14a80:	f001 80e5 	beq.w	15c4e <_svfprintf_r+0x161e>
   14a84:	990c      	ldr	r1, [sp, #48]	; 0x30
   14a86:	461a      	mov	r2, r3
   14a88:	4620      	mov	r0, r4
   14a8a:	f7fe f9a9 	bl	12de0 <memchr>
   14a8e:	9007      	str	r0, [sp, #28]
   14a90:	2800      	cmp	r0, #0
   14a92:	f001 8328 	beq.w	160e6 <_svfprintf_r+0x1ab6>
   14a96:	9b07      	ldr	r3, [sp, #28]
   14a98:	1b1a      	subs	r2, r3, r4
   14a9a:	9205      	str	r2, [sp, #20]
   14a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14a9e:	9303      	str	r3, [sp, #12]
   14aa0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14aa4:	930f      	str	r3, [sp, #60]	; 0x3c
   14aa6:	930d      	str	r3, [sp, #52]	; 0x34
   14aa8:	9307      	str	r3, [sp, #28]
   14aaa:	2373      	movs	r3, #115	; 0x73
   14aac:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14ab0:	9202      	str	r2, [sp, #8]
   14ab2:	930b      	str	r3, [sp, #44]	; 0x2c
   14ab4:	e79d      	b.n	149f2 <_svfprintf_r+0x3c2>
   14ab6:	f018 0f20 	tst.w	r8, #32
   14aba:	930b      	str	r3, [sp, #44]	; 0x2c
   14abc:	9b08      	ldr	r3, [sp, #32]
   14abe:	d03d      	beq.n	14b3c <_svfprintf_r+0x50c>
   14ac0:	3307      	adds	r3, #7
   14ac2:	f023 0307 	bic.w	r3, r3, #7
   14ac6:	461a      	mov	r2, r3
   14ac8:	4611      	mov	r1, r2
   14aca:	685b      	ldr	r3, [r3, #4]
   14acc:	f851 2b08 	ldr.w	r2, [r1], #8
   14ad0:	9108      	str	r1, [sp, #32]
   14ad2:	4619      	mov	r1, r3
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	f2c0 840c 	blt.w	152f2 <_svfprintf_r+0xcc2>
   14ada:	9b03      	ldr	r3, [sp, #12]
   14adc:	3301      	adds	r3, #1
   14ade:	f000 829e 	beq.w	1501e <_svfprintf_r+0x9ee>
   14ae2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   14ae6:	ea52 0301 	orrs.w	r3, r2, r1
   14aea:	9002      	str	r0, [sp, #8]
   14aec:	f040 8299 	bne.w	15022 <_svfprintf_r+0x9f2>
   14af0:	9b03      	ldr	r3, [sp, #12]
   14af2:	2b00      	cmp	r3, #0
   14af4:	f040 829a 	bne.w	1502c <_svfprintf_r+0x9fc>
   14af8:	4680      	mov	r8, r0
   14afa:	2300      	movs	r3, #0
   14afc:	9303      	str	r3, [sp, #12]
   14afe:	9305      	str	r3, [sp, #20]
   14b00:	ac50      	add	r4, sp, #320	; 0x140
   14b02:	e106      	b.n	14d12 <_svfprintf_r+0x6e2>
   14b04:	9b08      	ldr	r3, [sp, #32]
   14b06:	f853 2b04 	ldr.w	r2, [r3], #4
   14b0a:	9206      	str	r2, [sp, #24]
   14b0c:	2a00      	cmp	r2, #0
   14b0e:	f280 8419 	bge.w	15344 <_svfprintf_r+0xd14>
   14b12:	9a06      	ldr	r2, [sp, #24]
   14b14:	9308      	str	r3, [sp, #32]
   14b16:	4252      	negs	r2, r2
   14b18:	9206      	str	r2, [sp, #24]
   14b1a:	f899 3000 	ldrb.w	r3, [r9]
   14b1e:	f048 0804 	orr.w	r8, r8, #4
   14b22:	e5e1      	b.n	146e8 <_svfprintf_r+0xb8>
   14b24:	f899 3000 	ldrb.w	r3, [r9]
   14b28:	f048 0808 	orr.w	r8, r8, #8
   14b2c:	e5dc      	b.n	146e8 <_svfprintf_r+0xb8>
   14b2e:	f048 0810 	orr.w	r8, r8, #16
   14b32:	f018 0f20 	tst.w	r8, #32
   14b36:	930b      	str	r3, [sp, #44]	; 0x2c
   14b38:	9b08      	ldr	r3, [sp, #32]
   14b3a:	d1c1      	bne.n	14ac0 <_svfprintf_r+0x490>
   14b3c:	f018 0f10 	tst.w	r8, #16
   14b40:	f040 840b 	bne.w	1535a <_svfprintf_r+0xd2a>
   14b44:	f018 0f40 	tst.w	r8, #64	; 0x40
   14b48:	f000 8403 	beq.w	15352 <_svfprintf_r+0xd22>
   14b4c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   14b50:	9308      	str	r3, [sp, #32]
   14b52:	17d1      	asrs	r1, r2, #31
   14b54:	460b      	mov	r3, r1
   14b56:	e7bd      	b.n	14ad4 <_svfprintf_r+0x4a4>
   14b58:	9b08      	ldr	r3, [sp, #32]
   14b5a:	f048 0202 	orr.w	r2, r8, #2
   14b5e:	9202      	str	r2, [sp, #8]
   14b60:	f853 2b04 	ldr.w	r2, [r3], #4
   14b64:	9308      	str	r3, [sp, #32]
   14b66:	f647 0330 	movw	r3, #30768	; 0x7830
   14b6a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   14b6e:	2078      	movs	r0, #120	; 0x78
   14b70:	4b45      	ldr	r3, [pc, #276]	; (14c88 <_svfprintf_r+0x658>)
   14b72:	9311      	str	r3, [sp, #68]	; 0x44
   14b74:	2100      	movs	r1, #0
   14b76:	2302      	movs	r3, #2
   14b78:	900b      	str	r0, [sp, #44]	; 0x2c
   14b7a:	2000      	movs	r0, #0
   14b7c:	9c03      	ldr	r4, [sp, #12]
   14b7e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   14b82:	1c60      	adds	r0, r4, #1
   14b84:	f000 80ad 	beq.w	14ce2 <_svfprintf_r+0x6b2>
   14b88:	9802      	ldr	r0, [sp, #8]
   14b8a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   14b8e:	ea52 0001 	orrs.w	r0, r2, r1
   14b92:	f040 80a4 	bne.w	14cde <_svfprintf_r+0x6ae>
   14b96:	2c00      	cmp	r4, #0
   14b98:	f040 86ae 	bne.w	158f8 <_svfprintf_r+0x12c8>
   14b9c:	2b00      	cmp	r3, #0
   14b9e:	d1ac      	bne.n	14afa <_svfprintf_r+0x4ca>
   14ba0:	9b02      	ldr	r3, [sp, #8]
   14ba2:	f013 0301 	ands.w	r3, r3, #1
   14ba6:	9305      	str	r3, [sp, #20]
   14ba8:	f000 83d1 	beq.w	1534e <_svfprintf_r+0xd1e>
   14bac:	2330      	movs	r3, #48	; 0x30
   14bae:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   14bb2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   14bb6:	e0ac      	b.n	14d12 <_svfprintf_r+0x6e2>
   14bb8:	f018 0f20 	tst.w	r8, #32
   14bbc:	f040 83d4 	bne.w	15368 <_svfprintf_r+0xd38>
   14bc0:	f018 0f10 	tst.w	r8, #16
   14bc4:	f040 869f 	bne.w	15906 <_svfprintf_r+0x12d6>
   14bc8:	f018 0f40 	tst.w	r8, #64	; 0x40
   14bcc:	f040 8797 	bne.w	15afe <_svfprintf_r+0x14ce>
   14bd0:	f418 7f00 	tst.w	r8, #512	; 0x200
   14bd4:	f000 8697 	beq.w	15906 <_svfprintf_r+0x12d6>
   14bd8:	9b08      	ldr	r3, [sp, #32]
   14bda:	9904      	ldr	r1, [sp, #16]
   14bdc:	f853 2b04 	ldr.w	r2, [r3], #4
   14be0:	9308      	str	r3, [sp, #32]
   14be2:	7011      	strb	r1, [r2, #0]
   14be4:	464c      	mov	r4, r9
   14be6:	e555      	b.n	14694 <_svfprintf_r+0x64>
   14be8:	f899 3000 	ldrb.w	r3, [r9]
   14bec:	2b68      	cmp	r3, #104	; 0x68
   14bee:	bf03      	ittte	eq
   14bf0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14bf4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   14bf8:	f109 0901 	addeq.w	r9, r9, #1
   14bfc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   14c00:	e572      	b.n	146e8 <_svfprintf_r+0xb8>
   14c02:	f899 3000 	ldrb.w	r3, [r9]
   14c06:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   14c0a:	e56d      	b.n	146e8 <_svfprintf_r+0xb8>
   14c0c:	f899 3000 	ldrb.w	r3, [r9]
   14c10:	2b6c      	cmp	r3, #108	; 0x6c
   14c12:	bf03      	ittte	eq
   14c14:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14c18:	f048 0820 	orreq.w	r8, r8, #32
   14c1c:	f109 0901 	addeq.w	r9, r9, #1
   14c20:	f048 0810 	orrne.w	r8, r8, #16
   14c24:	e560      	b.n	146e8 <_svfprintf_r+0xb8>
   14c26:	930b      	str	r3, [sp, #44]	; 0x2c
   14c28:	f048 0810 	orr.w	r8, r8, #16
   14c2c:	f018 0120 	ands.w	r1, r8, #32
   14c30:	f000 8351 	beq.w	152d6 <_svfprintf_r+0xca6>
   14c34:	9b08      	ldr	r3, [sp, #32]
   14c36:	3307      	adds	r3, #7
   14c38:	f023 0307 	bic.w	r3, r3, #7
   14c3c:	6859      	ldr	r1, [r3, #4]
   14c3e:	f853 2b08 	ldr.w	r2, [r3], #8
   14c42:	9308      	str	r3, [sp, #32]
   14c44:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14c48:	9302      	str	r3, [sp, #8]
   14c4a:	2300      	movs	r3, #0
   14c4c:	e795      	b.n	14b7a <_svfprintf_r+0x54a>
   14c4e:	930b      	str	r3, [sp, #44]	; 0x2c
   14c50:	f048 0310 	orr.w	r3, r8, #16
   14c54:	9302      	str	r3, [sp, #8]
   14c56:	9b02      	ldr	r3, [sp, #8]
   14c58:	f013 0120 	ands.w	r1, r3, #32
   14c5c:	f000 8329 	beq.w	152b2 <_svfprintf_r+0xc82>
   14c60:	9b08      	ldr	r3, [sp, #32]
   14c62:	3307      	adds	r3, #7
   14c64:	f023 0307 	bic.w	r3, r3, #7
   14c68:	6859      	ldr	r1, [r3, #4]
   14c6a:	f853 2b08 	ldr.w	r2, [r3], #8
   14c6e:	9308      	str	r3, [sp, #32]
   14c70:	2301      	movs	r3, #1
   14c72:	e782      	b.n	14b7a <_svfprintf_r+0x54a>
   14c74:	f899 3000 	ldrb.w	r3, [r9]
   14c78:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   14c7c:	e534      	b.n	146e8 <_svfprintf_r+0xb8>
   14c7e:	bf00      	nop
   14c80:	20001208 	.word	0x20001208
   14c84:	20000c00 	.word	0x20000c00
   14c88:	20001210 	.word	0x20001210
   14c8c:	4649      	mov	r1, r9
   14c8e:	f811 3b01 	ldrb.w	r3, [r1], #1
   14c92:	2b2a      	cmp	r3, #42	; 0x2a
   14c94:	f001 8249 	beq.w	1612a <_svfprintf_r+0x1afa>
   14c98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14c9c:	2a09      	cmp	r2, #9
   14c9e:	4689      	mov	r9, r1
   14ca0:	bf98      	it	ls
   14ca2:	2100      	movls	r1, #0
   14ca4:	f201 8144 	bhi.w	15f30 <_svfprintf_r+0x1900>
   14ca8:	f819 3b01 	ldrb.w	r3, [r9], #1
   14cac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   14cb0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   14cb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14cb8:	2a09      	cmp	r2, #9
   14cba:	d9f5      	bls.n	14ca8 <_svfprintf_r+0x678>
   14cbc:	9103      	str	r1, [sp, #12]
   14cbe:	e515      	b.n	146ec <_svfprintf_r+0xbc>
   14cc0:	f899 3000 	ldrb.w	r3, [r9]
   14cc4:	f048 0801 	orr.w	r8, r8, #1
   14cc8:	e50e      	b.n	146e8 <_svfprintf_r+0xb8>
   14cca:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   14cce:	2b00      	cmp	r3, #0
   14cd0:	f47f ad8f 	bne.w	147f2 <_svfprintf_r+0x1c2>
   14cd4:	f899 3000 	ldrb.w	r3, [r9]
   14cd8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   14cdc:	e504      	b.n	146e8 <_svfprintf_r+0xb8>
   14cde:	f8cd 8008 	str.w	r8, [sp, #8]
   14ce2:	2b01      	cmp	r3, #1
   14ce4:	f000 819d 	beq.w	15022 <_svfprintf_r+0x9f2>
   14ce8:	2b02      	cmp	r3, #2
   14cea:	ac50      	add	r4, sp, #320	; 0x140
   14cec:	d120      	bne.n	14d30 <_svfprintf_r+0x700>
   14cee:	9811      	ldr	r0, [sp, #68]	; 0x44
   14cf0:	f002 030f 	and.w	r3, r2, #15
   14cf4:	0912      	lsrs	r2, r2, #4
   14cf6:	5cc3      	ldrb	r3, [r0, r3]
   14cf8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14cfc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   14d00:	0909      	lsrs	r1, r1, #4
   14d02:	ea52 0301 	orrs.w	r3, r2, r1
   14d06:	d1f3      	bne.n	14cf0 <_svfprintf_r+0x6c0>
   14d08:	ab50      	add	r3, sp, #320	; 0x140
   14d0a:	1b1b      	subs	r3, r3, r4
   14d0c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14d10:	9305      	str	r3, [sp, #20]
   14d12:	9a05      	ldr	r2, [sp, #20]
   14d14:	9803      	ldr	r0, [sp, #12]
   14d16:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14d1a:	4282      	cmp	r2, r0
   14d1c:	f04f 0300 	mov.w	r3, #0
   14d20:	bfb8      	it	lt
   14d22:	4602      	movlt	r2, r0
   14d24:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14d28:	9307      	str	r3, [sp, #28]
   14d2a:	9202      	str	r2, [sp, #8]
   14d2c:	930f      	str	r3, [sp, #60]	; 0x3c
   14d2e:	e660      	b.n	149f2 <_svfprintf_r+0x3c2>
   14d30:	f002 0307 	and.w	r3, r2, #7
   14d34:	08d2      	lsrs	r2, r2, #3
   14d36:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   14d3a:	08c9      	lsrs	r1, r1, #3
   14d3c:	3330      	adds	r3, #48	; 0x30
   14d3e:	ea52 0501 	orrs.w	r5, r2, r1
   14d42:	4620      	mov	r0, r4
   14d44:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14d48:	d1f2      	bne.n	14d30 <_svfprintf_r+0x700>
   14d4a:	9a02      	ldr	r2, [sp, #8]
   14d4c:	07d1      	lsls	r1, r2, #31
   14d4e:	f100 824d 	bmi.w	151ec <_svfprintf_r+0xbbc>
   14d52:	ab50      	add	r3, sp, #320	; 0x140
   14d54:	1b1b      	subs	r3, r3, r4
   14d56:	4690      	mov	r8, r2
   14d58:	9305      	str	r3, [sp, #20]
   14d5a:	e7da      	b.n	14d12 <_svfprintf_r+0x6e2>
   14d5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14d5e:	2b65      	cmp	r3, #101	; 0x65
   14d60:	f340 80d4 	ble.w	14f0c <_svfprintf_r+0x8dc>
   14d64:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14d6c:	f040 81c1 	bne.w	150f2 <_svfprintf_r+0xac2>
   14d70:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14d72:	49ba      	ldr	r1, [pc, #744]	; (1505c <_svfprintf_r+0xa2c>)
   14d74:	f8ca 1000 	str.w	r1, [sl]
   14d78:	3301      	adds	r3, #1
   14d7a:	3201      	adds	r2, #1
   14d7c:	2101      	movs	r1, #1
   14d7e:	2b07      	cmp	r3, #7
   14d80:	9226      	str	r2, [sp, #152]	; 0x98
   14d82:	9325      	str	r3, [sp, #148]	; 0x94
   14d84:	f8ca 1004 	str.w	r1, [sl, #4]
   14d88:	f300 8551 	bgt.w	1582e <_svfprintf_r+0x11fe>
   14d8c:	f10a 0a08 	add.w	sl, sl, #8
   14d90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14d92:	990e      	ldr	r1, [sp, #56]	; 0x38
   14d94:	428b      	cmp	r3, r1
   14d96:	f280 82d0 	bge.w	1533a <_svfprintf_r+0xd0a>
   14d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14d9c:	9912      	ldr	r1, [sp, #72]	; 0x48
   14d9e:	441a      	add	r2, r3
   14da0:	e9ca 1300 	strd	r1, r3, [sl]
   14da4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14da6:	9226      	str	r2, [sp, #152]	; 0x98
   14da8:	3301      	adds	r3, #1
   14daa:	2b07      	cmp	r3, #7
   14dac:	9325      	str	r3, [sp, #148]	; 0x94
   14dae:	f300 8397 	bgt.w	154e0 <_svfprintf_r+0xeb0>
   14db2:	f10a 0a08 	add.w	sl, sl, #8
   14db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14db8:	1e5c      	subs	r4, r3, #1
   14dba:	2c00      	cmp	r4, #0
   14dbc:	f77f add0 	ble.w	14960 <_svfprintf_r+0x330>
   14dc0:	2c10      	cmp	r4, #16
   14dc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14dc4:	f340 856e 	ble.w	158a4 <_svfprintf_r+0x1274>
   14dc8:	ee1b 6a10 	vmov	r6, s22
   14dcc:	2510      	movs	r5, #16
   14dce:	e005      	b.n	14ddc <_svfprintf_r+0x7ac>
   14dd0:	f10a 0a08 	add.w	sl, sl, #8
   14dd4:	3c10      	subs	r4, #16
   14dd6:	2c10      	cmp	r4, #16
   14dd8:	f340 8564 	ble.w	158a4 <_svfprintf_r+0x1274>
   14ddc:	3301      	adds	r3, #1
   14dde:	49a0      	ldr	r1, [pc, #640]	; (15060 <_svfprintf_r+0xa30>)
   14de0:	3210      	adds	r2, #16
   14de2:	2b07      	cmp	r3, #7
   14de4:	e9ca 1500 	strd	r1, r5, [sl]
   14de8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14dec:	ddf0      	ble.n	14dd0 <_svfprintf_r+0x7a0>
   14dee:	aa24      	add	r2, sp, #144	; 0x90
   14df0:	4631      	mov	r1, r6
   14df2:	4658      	mov	r0, fp
   14df4:	f004 faa8 	bl	19348 <__ssprint_r>
   14df8:	2800      	cmp	r0, #0
   14dfa:	d17e      	bne.n	14efa <_svfprintf_r+0x8ca>
   14dfc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14e00:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e04:	e7e6      	b.n	14dd4 <_svfprintf_r+0x7a4>
   14e06:	9b06      	ldr	r3, [sp, #24]
   14e08:	9902      	ldr	r1, [sp, #8]
   14e0a:	1a5d      	subs	r5, r3, r1
   14e0c:	2d00      	cmp	r5, #0
   14e0e:	f77f ad8e 	ble.w	1492e <_svfprintf_r+0x2fe>
   14e12:	2d10      	cmp	r5, #16
   14e14:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e16:	dd21      	ble.n	14e5c <_svfprintf_r+0x82c>
   14e18:	9409      	str	r4, [sp, #36]	; 0x24
   14e1a:	2610      	movs	r6, #16
   14e1c:	ee1b 4a10 	vmov	r4, s22
   14e20:	e004      	b.n	14e2c <_svfprintf_r+0x7fc>
   14e22:	3d10      	subs	r5, #16
   14e24:	2d10      	cmp	r5, #16
   14e26:	f10a 0a08 	add.w	sl, sl, #8
   14e2a:	dd16      	ble.n	14e5a <_svfprintf_r+0x82a>
   14e2c:	3301      	adds	r3, #1
   14e2e:	498c      	ldr	r1, [pc, #560]	; (15060 <_svfprintf_r+0xa30>)
   14e30:	3210      	adds	r2, #16
   14e32:	2b07      	cmp	r3, #7
   14e34:	e9ca 1600 	strd	r1, r6, [sl]
   14e38:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14e3c:	ddf1      	ble.n	14e22 <_svfprintf_r+0x7f2>
   14e3e:	aa24      	add	r2, sp, #144	; 0x90
   14e40:	4621      	mov	r1, r4
   14e42:	4658      	mov	r0, fp
   14e44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e48:	f004 fa7e 	bl	19348 <__ssprint_r>
   14e4c:	2800      	cmp	r0, #0
   14e4e:	d154      	bne.n	14efa <_svfprintf_r+0x8ca>
   14e50:	3d10      	subs	r5, #16
   14e52:	2d10      	cmp	r5, #16
   14e54:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14e58:	dce8      	bgt.n	14e2c <_svfprintf_r+0x7fc>
   14e5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14e5c:	4980      	ldr	r1, [pc, #512]	; (15060 <_svfprintf_r+0xa30>)
   14e5e:	f8ca 5004 	str.w	r5, [sl, #4]
   14e62:	3301      	adds	r3, #1
   14e64:	442a      	add	r2, r5
   14e66:	2b07      	cmp	r3, #7
   14e68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14e6c:	f8ca 1000 	str.w	r1, [sl]
   14e70:	f300 8526 	bgt.w	158c0 <_svfprintf_r+0x1290>
   14e74:	9b03      	ldr	r3, [sp, #12]
   14e76:	9905      	ldr	r1, [sp, #20]
   14e78:	1a5d      	subs	r5, r3, r1
   14e7a:	2d00      	cmp	r5, #0
   14e7c:	f10a 0a08 	add.w	sl, sl, #8
   14e80:	f77f ad5b 	ble.w	1493a <_svfprintf_r+0x30a>
   14e84:	2d10      	cmp	r5, #16
   14e86:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e88:	dd1f      	ble.n	14eca <_svfprintf_r+0x89a>
   14e8a:	4651      	mov	r1, sl
   14e8c:	2610      	movs	r6, #16
   14e8e:	ee1b aa10 	vmov	sl, s22
   14e92:	e004      	b.n	14e9e <_svfprintf_r+0x86e>
   14e94:	3d10      	subs	r5, #16
   14e96:	2d10      	cmp	r5, #16
   14e98:	f101 0108 	add.w	r1, r1, #8
   14e9c:	dd14      	ble.n	14ec8 <_svfprintf_r+0x898>
   14e9e:	3301      	adds	r3, #1
   14ea0:	486f      	ldr	r0, [pc, #444]	; (15060 <_svfprintf_r+0xa30>)
   14ea2:	3210      	adds	r2, #16
   14ea4:	2b07      	cmp	r3, #7
   14ea6:	e9c1 0600 	strd	r0, r6, [r1]
   14eaa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14eae:	ddf1      	ble.n	14e94 <_svfprintf_r+0x864>
   14eb0:	aa24      	add	r2, sp, #144	; 0x90
   14eb2:	4651      	mov	r1, sl
   14eb4:	4658      	mov	r0, fp
   14eb6:	f004 fa47 	bl	19348 <__ssprint_r>
   14eba:	b9f0      	cbnz	r0, 14efa <_svfprintf_r+0x8ca>
   14ebc:	3d10      	subs	r5, #16
   14ebe:	2d10      	cmp	r5, #16
   14ec0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14ec4:	a927      	add	r1, sp, #156	; 0x9c
   14ec6:	dcea      	bgt.n	14e9e <_svfprintf_r+0x86e>
   14ec8:	468a      	mov	sl, r1
   14eca:	3301      	adds	r3, #1
   14ecc:	4964      	ldr	r1, [pc, #400]	; (15060 <_svfprintf_r+0xa30>)
   14ece:	f8ca 5004 	str.w	r5, [sl, #4]
   14ed2:	442a      	add	r2, r5
   14ed4:	2b07      	cmp	r3, #7
   14ed6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14eda:	f8ca 1000 	str.w	r1, [sl]
   14ede:	f300 81da 	bgt.w	15296 <_svfprintf_r+0xc66>
   14ee2:	f10a 0a08 	add.w	sl, sl, #8
   14ee6:	e528      	b.n	1493a <_svfprintf_r+0x30a>
   14ee8:	ee1b 1a10 	vmov	r1, s22
   14eec:	aa24      	add	r2, sp, #144	; 0x90
   14eee:	4658      	mov	r0, fp
   14ef0:	f004 fa2a 	bl	19348 <__ssprint_r>
   14ef4:	2800      	cmp	r0, #0
   14ef6:	f43f ad47 	beq.w	14988 <_svfprintf_r+0x358>
   14efa:	9b07      	ldr	r3, [sp, #28]
   14efc:	2b00      	cmp	r3, #0
   14efe:	f43f aca2 	beq.w	14846 <_svfprintf_r+0x216>
   14f02:	9907      	ldr	r1, [sp, #28]
   14f04:	4658      	mov	r0, fp
   14f06:	f7fe f8cd 	bl	130a4 <_free_r>
   14f0a:	e49c      	b.n	14846 <_svfprintf_r+0x216>
   14f0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14f0e:	2b01      	cmp	r3, #1
   14f10:	f340 817a 	ble.w	15208 <_svfprintf_r+0xbd8>
   14f14:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f16:	f8ca 4000 	str.w	r4, [sl]
   14f1a:	3301      	adds	r3, #1
   14f1c:	3201      	adds	r2, #1
   14f1e:	2101      	movs	r1, #1
   14f20:	2b07      	cmp	r3, #7
   14f22:	9226      	str	r2, [sp, #152]	; 0x98
   14f24:	9325      	str	r3, [sp, #148]	; 0x94
   14f26:	f8ca 1004 	str.w	r1, [sl, #4]
   14f2a:	f300 81f8 	bgt.w	1531e <_svfprintf_r+0xcee>
   14f2e:	f10a 0a08 	add.w	sl, sl, #8
   14f32:	9910      	ldr	r1, [sp, #64]	; 0x40
   14f34:	9812      	ldr	r0, [sp, #72]	; 0x48
   14f36:	3301      	adds	r3, #1
   14f38:	440a      	add	r2, r1
   14f3a:	2b07      	cmp	r3, #7
   14f3c:	e9ca 0100 	strd	r0, r1, [sl]
   14f40:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f44:	f300 81dd 	bgt.w	15302 <_svfprintf_r+0xcd2>
   14f48:	f10a 0a08 	add.w	sl, sl, #8
   14f4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14f54:	f000 8177 	beq.w	15246 <_svfprintf_r+0xc16>
   14f58:	990e      	ldr	r1, [sp, #56]	; 0x38
   14f5a:	3301      	adds	r3, #1
   14f5c:	3901      	subs	r1, #1
   14f5e:	3401      	adds	r4, #1
   14f60:	440a      	add	r2, r1
   14f62:	2b07      	cmp	r3, #7
   14f64:	f8ca 4000 	str.w	r4, [sl]
   14f68:	9325      	str	r3, [sp, #148]	; 0x94
   14f6a:	f8ca 1004 	str.w	r1, [sl, #4]
   14f6e:	9226      	str	r2, [sp, #152]	; 0x98
   14f70:	f300 815b 	bgt.w	1522a <_svfprintf_r+0xbfa>
   14f74:	f10a 0a08 	add.w	sl, sl, #8
   14f78:	9914      	ldr	r1, [sp, #80]	; 0x50
   14f7a:	f8ca 1004 	str.w	r1, [sl, #4]
   14f7e:	3301      	adds	r3, #1
   14f80:	440a      	add	r2, r1
   14f82:	2b07      	cmp	r3, #7
   14f84:	a91e      	add	r1, sp, #120	; 0x78
   14f86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f8a:	f8ca 1000 	str.w	r1, [sl]
   14f8e:	f77f ace5 	ble.w	1495c <_svfprintf_r+0x32c>
   14f92:	ee1b 1a10 	vmov	r1, s22
   14f96:	aa24      	add	r2, sp, #144	; 0x90
   14f98:	4658      	mov	r0, fp
   14f9a:	f004 f9d5 	bl	19348 <__ssprint_r>
   14f9e:	2800      	cmp	r0, #0
   14fa0:	d1ab      	bne.n	14efa <_svfprintf_r+0x8ca>
   14fa2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14fa4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14fa8:	e4da      	b.n	14960 <_svfprintf_r+0x330>
   14faa:	2d10      	cmp	r5, #16
   14fac:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   14fb0:	4e2c      	ldr	r6, [pc, #176]	; (15064 <_svfprintf_r+0xa34>)
   14fb2:	dd24      	ble.n	14ffe <_svfprintf_r+0x9ce>
   14fb4:	9417      	str	r4, [sp, #92]	; 0x5c
   14fb6:	2310      	movs	r3, #16
   14fb8:	ee1b 4a10 	vmov	r4, s22
   14fbc:	4608      	mov	r0, r1
   14fbe:	e004      	b.n	14fca <_svfprintf_r+0x99a>
   14fc0:	3d10      	subs	r5, #16
   14fc2:	2d10      	cmp	r5, #16
   14fc4:	f10a 0a08 	add.w	sl, sl, #8
   14fc8:	dd17      	ble.n	14ffa <_svfprintf_r+0x9ca>
   14fca:	3001      	adds	r0, #1
   14fcc:	3210      	adds	r2, #16
   14fce:	2807      	cmp	r0, #7
   14fd0:	e9ca 6300 	strd	r6, r3, [sl]
   14fd4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   14fd8:	ddf2      	ble.n	14fc0 <_svfprintf_r+0x990>
   14fda:	aa24      	add	r2, sp, #144	; 0x90
   14fdc:	4621      	mov	r1, r4
   14fde:	4658      	mov	r0, fp
   14fe0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14fe4:	f004 f9b0 	bl	19348 <__ssprint_r>
   14fe8:	2800      	cmp	r0, #0
   14fea:	d186      	bne.n	14efa <_svfprintf_r+0x8ca>
   14fec:	3d10      	subs	r5, #16
   14fee:	2d10      	cmp	r5, #16
   14ff0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   14ff4:	f04f 0310 	mov.w	r3, #16
   14ff8:	dce7      	bgt.n	14fca <_svfprintf_r+0x99a>
   14ffa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   14ffc:	4601      	mov	r1, r0
   14ffe:	3101      	adds	r1, #1
   15000:	442a      	add	r2, r5
   15002:	2907      	cmp	r1, #7
   15004:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   15008:	f8ca 6000 	str.w	r6, [sl]
   1500c:	f8ca 5004 	str.w	r5, [sl, #4]
   15010:	f300 83bd 	bgt.w	1578e <_svfprintf_r+0x115e>
   15014:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15018:	f10a 0a08 	add.w	sl, sl, #8
   1501c:	e45d      	b.n	148da <_svfprintf_r+0x2aa>
   1501e:	f8cd 8008 	str.w	r8, [sp, #8]
   15022:	2a0a      	cmp	r2, #10
   15024:	f171 0300 	sbcs.w	r3, r1, #0
   15028:	f080 8345 	bcs.w	156b6 <_svfprintf_r+0x1086>
   1502c:	3230      	adds	r2, #48	; 0x30
   1502e:	2301      	movs	r3, #1
   15030:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15034:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   15038:	9305      	str	r3, [sp, #20]
   1503a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1503e:	e668      	b.n	14d12 <_svfprintf_r+0x6e2>
   15040:	ee1b 1a10 	vmov	r1, s22
   15044:	aa24      	add	r2, sp, #144	; 0x90
   15046:	4658      	mov	r0, fp
   15048:	f004 f97e 	bl	19348 <__ssprint_r>
   1504c:	2800      	cmp	r0, #0
   1504e:	f47f af54 	bne.w	14efa <_svfprintf_r+0x8ca>
   15052:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15054:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15058:	e452      	b.n	14900 <_svfprintf_r+0x2d0>
   1505a:	bf00      	nop
   1505c:	20007fec 	.word	0x20007fec
   15060:	20008a64 	.word	0x20008a64
   15064:	20002cb8 	.word	0x20002cb8
   15068:	ee1b 1a10 	vmov	r1, s22
   1506c:	aa24      	add	r2, sp, #144	; 0x90
   1506e:	4658      	mov	r0, fp
   15070:	f004 f96a 	bl	19348 <__ssprint_r>
   15074:	2800      	cmp	r0, #0
   15076:	f47f af40 	bne.w	14efa <_svfprintf_r+0x8ca>
   1507a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1507c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15080:	e451      	b.n	14926 <_svfprintf_r+0x2f6>
   15082:	2c10      	cmp	r4, #16
   15084:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15086:	4ebe      	ldr	r6, [pc, #760]	; (15380 <_svfprintf_r+0xd50>)
   15088:	dd1f      	ble.n	150ca <_svfprintf_r+0xa9a>
   1508a:	ee1b 8a10 	vmov	r8, s22
   1508e:	2510      	movs	r5, #16
   15090:	e004      	b.n	1509c <_svfprintf_r+0xa6c>
   15092:	3c10      	subs	r4, #16
   15094:	2c10      	cmp	r4, #16
   15096:	f10a 0a08 	add.w	sl, sl, #8
   1509a:	dd16      	ble.n	150ca <_svfprintf_r+0xa9a>
   1509c:	3301      	adds	r3, #1
   1509e:	3210      	adds	r2, #16
   150a0:	2b07      	cmp	r3, #7
   150a2:	e9ca 6500 	strd	r6, r5, [sl]
   150a6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   150aa:	ddf2      	ble.n	15092 <_svfprintf_r+0xa62>
   150ac:	aa24      	add	r2, sp, #144	; 0x90
   150ae:	4641      	mov	r1, r8
   150b0:	4658      	mov	r0, fp
   150b2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   150b6:	f004 f947 	bl	19348 <__ssprint_r>
   150ba:	2800      	cmp	r0, #0
   150bc:	f47f af1d 	bne.w	14efa <_svfprintf_r+0x8ca>
   150c0:	3c10      	subs	r4, #16
   150c2:	2c10      	cmp	r4, #16
   150c4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   150c8:	dce8      	bgt.n	1509c <_svfprintf_r+0xa6c>
   150ca:	3301      	adds	r3, #1
   150cc:	4422      	add	r2, r4
   150ce:	2b07      	cmp	r3, #7
   150d0:	e9ca 6400 	strd	r6, r4, [sl]
   150d4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   150d8:	f77f ac4b 	ble.w	14972 <_svfprintf_r+0x342>
   150dc:	ee1b 1a10 	vmov	r1, s22
   150e0:	aa24      	add	r2, sp, #144	; 0x90
   150e2:	4658      	mov	r0, fp
   150e4:	f004 f930 	bl	19348 <__ssprint_r>
   150e8:	2800      	cmp	r0, #0
   150ea:	f47f af06 	bne.w	14efa <_svfprintf_r+0x8ca>
   150ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
   150f0:	e43f      	b.n	14972 <_svfprintf_r+0x342>
   150f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   150f4:	2900      	cmp	r1, #0
   150f6:	f340 835a 	ble.w	157ae <_svfprintf_r+0x117e>
   150fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   150fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150fe:	429e      	cmp	r6, r3
   15100:	bfa8      	it	ge
   15102:	461e      	movge	r6, r3
   15104:	2e00      	cmp	r6, #0
   15106:	dd0b      	ble.n	15120 <_svfprintf_r+0xaf0>
   15108:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1510a:	3301      	adds	r3, #1
   1510c:	4432      	add	r2, r6
   1510e:	2b07      	cmp	r3, #7
   15110:	e9ca 4600 	strd	r4, r6, [sl]
   15114:	9226      	str	r2, [sp, #152]	; 0x98
   15116:	9325      	str	r3, [sp, #148]	; 0x94
   15118:	f300 8689 	bgt.w	15e2e <_svfprintf_r+0x17fe>
   1511c:	f10a 0a08 	add.w	sl, sl, #8
   15120:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15122:	2e00      	cmp	r6, #0
   15124:	bfa8      	it	ge
   15126:	1bad      	subge	r5, r5, r6
   15128:	2d00      	cmp	r5, #0
   1512a:	f300 8203 	bgt.w	15534 <_svfprintf_r+0xf04>
   1512e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15130:	f418 6f80 	tst.w	r8, #1024	; 0x400
   15134:	4423      	add	r3, r4
   15136:	9305      	str	r3, [sp, #20]
   15138:	f040 821f 	bne.w	1557a <_svfprintf_r+0xf4a>
   1513c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1513e:	990e      	ldr	r1, [sp, #56]	; 0x38
   15140:	428b      	cmp	r3, r1
   15142:	db03      	blt.n	1514c <_svfprintf_r+0xb1c>
   15144:	f018 0f01 	tst.w	r8, #1
   15148:	f000 84cf 	beq.w	15aea <_svfprintf_r+0x14ba>
   1514c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1514e:	9812      	ldr	r0, [sp, #72]	; 0x48
   15150:	440a      	add	r2, r1
   15152:	e9ca 0100 	strd	r0, r1, [sl]
   15156:	9925      	ldr	r1, [sp, #148]	; 0x94
   15158:	9226      	str	r2, [sp, #152]	; 0x98
   1515a:	3101      	adds	r1, #1
   1515c:	2907      	cmp	r1, #7
   1515e:	9125      	str	r1, [sp, #148]	; 0x94
   15160:	f300 86a5 	bgt.w	15eae <_svfprintf_r+0x187e>
   15164:	f10a 0a08 	add.w	sl, sl, #8
   15168:	990e      	ldr	r1, [sp, #56]	; 0x38
   1516a:	1865      	adds	r5, r4, r1
   1516c:	1acc      	subs	r4, r1, r3
   1516e:	9b05      	ldr	r3, [sp, #20]
   15170:	1aed      	subs	r5, r5, r3
   15172:	42a5      	cmp	r5, r4
   15174:	bfa8      	it	ge
   15176:	4625      	movge	r5, r4
   15178:	2d00      	cmp	r5, #0
   1517a:	dd0d      	ble.n	15198 <_svfprintf_r+0xb68>
   1517c:	f8ca 3000 	str.w	r3, [sl]
   15180:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15182:	f8ca 5004 	str.w	r5, [sl, #4]
   15186:	3301      	adds	r3, #1
   15188:	442a      	add	r2, r5
   1518a:	2b07      	cmp	r3, #7
   1518c:	9226      	str	r2, [sp, #152]	; 0x98
   1518e:	9325      	str	r3, [sp, #148]	; 0x94
   15190:	f300 86bb 	bgt.w	15f0a <_svfprintf_r+0x18da>
   15194:	f10a 0a08 	add.w	sl, sl, #8
   15198:	2d00      	cmp	r5, #0
   1519a:	bfa8      	it	ge
   1519c:	1b64      	subge	r4, r4, r5
   1519e:	2c00      	cmp	r4, #0
   151a0:	f77f abde 	ble.w	14960 <_svfprintf_r+0x330>
   151a4:	2c10      	cmp	r4, #16
   151a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   151a8:	f340 837c 	ble.w	158a4 <_svfprintf_r+0x1274>
   151ac:	ee1b 6a10 	vmov	r6, s22
   151b0:	2510      	movs	r5, #16
   151b2:	e005      	b.n	151c0 <_svfprintf_r+0xb90>
   151b4:	f10a 0a08 	add.w	sl, sl, #8
   151b8:	3c10      	subs	r4, #16
   151ba:	2c10      	cmp	r4, #16
   151bc:	f340 8372 	ble.w	158a4 <_svfprintf_r+0x1274>
   151c0:	3301      	adds	r3, #1
   151c2:	4970      	ldr	r1, [pc, #448]	; (15384 <_svfprintf_r+0xd54>)
   151c4:	3210      	adds	r2, #16
   151c6:	2b07      	cmp	r3, #7
   151c8:	e9ca 1500 	strd	r1, r5, [sl]
   151cc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   151d0:	ddf0      	ble.n	151b4 <_svfprintf_r+0xb84>
   151d2:	aa24      	add	r2, sp, #144	; 0x90
   151d4:	4631      	mov	r1, r6
   151d6:	4658      	mov	r0, fp
   151d8:	f004 f8b6 	bl	19348 <__ssprint_r>
   151dc:	2800      	cmp	r0, #0
   151de:	f47f ae8c 	bne.w	14efa <_svfprintf_r+0x8ca>
   151e2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   151e6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   151ea:	e7e5      	b.n	151b8 <_svfprintf_r+0xb88>
   151ec:	2b30      	cmp	r3, #48	; 0x30
   151ee:	f43f ad8b 	beq.w	14d08 <_svfprintf_r+0x6d8>
   151f2:	2330      	movs	r3, #48	; 0x30
   151f4:	3802      	subs	r0, #2
   151f6:	f804 3c01 	strb.w	r3, [r4, #-1]
   151fa:	ab50      	add	r3, sp, #320	; 0x140
   151fc:	1a1b      	subs	r3, r3, r0
   151fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15202:	9305      	str	r3, [sp, #20]
   15204:	4604      	mov	r4, r0
   15206:	e584      	b.n	14d12 <_svfprintf_r+0x6e2>
   15208:	f018 0f01 	tst.w	r8, #1
   1520c:	f47f ae82 	bne.w	14f14 <_svfprintf_r+0x8e4>
   15210:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15212:	f8ca 4000 	str.w	r4, [sl]
   15216:	3301      	adds	r3, #1
   15218:	3201      	adds	r2, #1
   1521a:	2101      	movs	r1, #1
   1521c:	2b07      	cmp	r3, #7
   1521e:	9226      	str	r2, [sp, #152]	; 0x98
   15220:	9325      	str	r3, [sp, #148]	; 0x94
   15222:	f8ca 1004 	str.w	r1, [sl, #4]
   15226:	f77f aea5 	ble.w	14f74 <_svfprintf_r+0x944>
   1522a:	ee1b 1a10 	vmov	r1, s22
   1522e:	aa24      	add	r2, sp, #144	; 0x90
   15230:	4658      	mov	r0, fp
   15232:	f004 f889 	bl	19348 <__ssprint_r>
   15236:	2800      	cmp	r0, #0
   15238:	f47f ae5f 	bne.w	14efa <_svfprintf_r+0x8ca>
   1523c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15240:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15244:	e698      	b.n	14f78 <_svfprintf_r+0x948>
   15246:	990e      	ldr	r1, [sp, #56]	; 0x38
   15248:	1e4c      	subs	r4, r1, #1
   1524a:	2c00      	cmp	r4, #0
   1524c:	f77f ae94 	ble.w	14f78 <_svfprintf_r+0x948>
   15250:	2c10      	cmp	r4, #16
   15252:	f340 8361 	ble.w	15918 <_svfprintf_r+0x12e8>
   15256:	ee1b 6a10 	vmov	r6, s22
   1525a:	2510      	movs	r5, #16
   1525c:	e005      	b.n	1526a <_svfprintf_r+0xc3a>
   1525e:	f10a 0a08 	add.w	sl, sl, #8
   15262:	3c10      	subs	r4, #16
   15264:	2c10      	cmp	r4, #16
   15266:	f340 8357 	ble.w	15918 <_svfprintf_r+0x12e8>
   1526a:	3301      	adds	r3, #1
   1526c:	4945      	ldr	r1, [pc, #276]	; (15384 <_svfprintf_r+0xd54>)
   1526e:	3210      	adds	r2, #16
   15270:	2b07      	cmp	r3, #7
   15272:	e9ca 1500 	strd	r1, r5, [sl]
   15276:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1527a:	ddf0      	ble.n	1525e <_svfprintf_r+0xc2e>
   1527c:	aa24      	add	r2, sp, #144	; 0x90
   1527e:	4631      	mov	r1, r6
   15280:	4658      	mov	r0, fp
   15282:	f004 f861 	bl	19348 <__ssprint_r>
   15286:	2800      	cmp	r0, #0
   15288:	f47f ae37 	bne.w	14efa <_svfprintf_r+0x8ca>
   1528c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15290:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15294:	e7e5      	b.n	15262 <_svfprintf_r+0xc32>
   15296:	ee1b 1a10 	vmov	r1, s22
   1529a:	aa24      	add	r2, sp, #144	; 0x90
   1529c:	4658      	mov	r0, fp
   1529e:	f004 f853 	bl	19348 <__ssprint_r>
   152a2:	2800      	cmp	r0, #0
   152a4:	f47f ae29 	bne.w	14efa <_svfprintf_r+0x8ca>
   152a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   152aa:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   152ae:	f7ff bb44 	b.w	1493a <_svfprintf_r+0x30a>
   152b2:	9b02      	ldr	r3, [sp, #8]
   152b4:	f013 0310 	ands.w	r3, r3, #16
   152b8:	f040 80c1 	bne.w	1543e <_svfprintf_r+0xe0e>
   152bc:	9a02      	ldr	r2, [sp, #8]
   152be:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   152c2:	f000 837a 	beq.w	159ba <_svfprintf_r+0x138a>
   152c6:	9808      	ldr	r0, [sp, #32]
   152c8:	f850 2b04 	ldr.w	r2, [r0], #4
   152cc:	9008      	str	r0, [sp, #32]
   152ce:	4619      	mov	r1, r3
   152d0:	b292      	uxth	r2, r2
   152d2:	2301      	movs	r3, #1
   152d4:	e451      	b.n	14b7a <_svfprintf_r+0x54a>
   152d6:	f018 0310 	ands.w	r3, r8, #16
   152da:	d155      	bne.n	15388 <_svfprintf_r+0xd58>
   152dc:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   152e0:	f000 835d 	beq.w	1599e <_svfprintf_r+0x136e>
   152e4:	9808      	ldr	r0, [sp, #32]
   152e6:	f850 2b04 	ldr.w	r2, [r0], #4
   152ea:	9008      	str	r0, [sp, #32]
   152ec:	4619      	mov	r1, r3
   152ee:	b292      	uxth	r2, r2
   152f0:	e4a8      	b.n	14c44 <_svfprintf_r+0x614>
   152f2:	4252      	negs	r2, r2
   152f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   152f8:	f8cd 8008 	str.w	r8, [sp, #8]
   152fc:	202d      	movs	r0, #45	; 0x2d
   152fe:	2301      	movs	r3, #1
   15300:	e43c      	b.n	14b7c <_svfprintf_r+0x54c>
   15302:	ee1b 1a10 	vmov	r1, s22
   15306:	aa24      	add	r2, sp, #144	; 0x90
   15308:	4658      	mov	r0, fp
   1530a:	f004 f81d 	bl	19348 <__ssprint_r>
   1530e:	2800      	cmp	r0, #0
   15310:	f47f adf3 	bne.w	14efa <_svfprintf_r+0x8ca>
   15314:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15318:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1531c:	e616      	b.n	14f4c <_svfprintf_r+0x91c>
   1531e:	ee1b 1a10 	vmov	r1, s22
   15322:	aa24      	add	r2, sp, #144	; 0x90
   15324:	4658      	mov	r0, fp
   15326:	f004 f80f 	bl	19348 <__ssprint_r>
   1532a:	2800      	cmp	r0, #0
   1532c:	f47f ade5 	bne.w	14efa <_svfprintf_r+0x8ca>
   15330:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15334:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15338:	e5fb      	b.n	14f32 <_svfprintf_r+0x902>
   1533a:	f018 0f01 	tst.w	r8, #1
   1533e:	f43f ab0f 	beq.w	14960 <_svfprintf_r+0x330>
   15342:	e52a      	b.n	14d9a <_svfprintf_r+0x76a>
   15344:	9308      	str	r3, [sp, #32]
   15346:	f899 3000 	ldrb.w	r3, [r9]
   1534a:	f7ff b9cd 	b.w	146e8 <_svfprintf_r+0xb8>
   1534e:	ac50      	add	r4, sp, #320	; 0x140
   15350:	e4df      	b.n	14d12 <_svfprintf_r+0x6e2>
   15352:	f418 7f00 	tst.w	r8, #512	; 0x200
   15356:	f040 83db 	bne.w	15b10 <_svfprintf_r+0x14e0>
   1535a:	f853 2b04 	ldr.w	r2, [r3], #4
   1535e:	9308      	str	r3, [sp, #32]
   15360:	17d1      	asrs	r1, r2, #31
   15362:	460b      	mov	r3, r1
   15364:	f7ff bbb6 	b.w	14ad4 <_svfprintf_r+0x4a4>
   15368:	9b08      	ldr	r3, [sp, #32]
   1536a:	9804      	ldr	r0, [sp, #16]
   1536c:	f853 1b04 	ldr.w	r1, [r3], #4
   15370:	9308      	str	r3, [sp, #32]
   15372:	17c2      	asrs	r2, r0, #31
   15374:	e9c1 0200 	strd	r0, r2, [r1]
   15378:	464c      	mov	r4, r9
   1537a:	f7ff b98b 	b.w	14694 <_svfprintf_r+0x64>
   1537e:	bf00      	nop
   15380:	20002cb8 	.word	0x20002cb8
   15384:	20008a64 	.word	0x20008a64
   15388:	9b08      	ldr	r3, [sp, #32]
   1538a:	f853 2b04 	ldr.w	r2, [r3], #4
   1538e:	9308      	str	r3, [sp, #32]
   15390:	e458      	b.n	14c44 <_svfprintf_r+0x614>
   15392:	eeb4 8b48 	vcmp.f64	d8, d8
   15396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1539a:	f180 8694 	bvs.w	160c6 <_svfprintf_r+0x1a96>
   1539e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   153a0:	2b61      	cmp	r3, #97	; 0x61
   153a2:	f000 8552 	beq.w	15e4a <_svfprintf_r+0x181a>
   153a6:	2b41      	cmp	r3, #65	; 0x41
   153a8:	f000 85c0 	beq.w	15f2c <_svfprintf_r+0x18fc>
   153ac:	9b03      	ldr	r3, [sp, #12]
   153ae:	3301      	adds	r3, #1
   153b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   153b2:	f023 0520 	bic.w	r5, r3, #32
   153b6:	f000 8480 	beq.w	15cba <_svfprintf_r+0x168a>
   153ba:	2d47      	cmp	r5, #71	; 0x47
   153bc:	d104      	bne.n	153c8 <_svfprintf_r+0xd98>
   153be:	9b03      	ldr	r3, [sp, #12]
   153c0:	2b00      	cmp	r3, #0
   153c2:	bf08      	it	eq
   153c4:	2301      	moveq	r3, #1
   153c6:	9303      	str	r3, [sp, #12]
   153c8:	ee18 3a90 	vmov	r3, s17
   153cc:	2b00      	cmp	r3, #0
   153ce:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   153d2:	4646      	mov	r6, r8
   153d4:	f2c0 8618 	blt.w	16008 <_svfprintf_r+0x19d8>
   153d8:	eeb0 ab48 	vmov.f64	d10, d8
   153dc:	2300      	movs	r3, #0
   153de:	4690      	mov	r8, r2
   153e0:	9309      	str	r3, [sp, #36]	; 0x24
   153e2:	9307      	str	r3, [sp, #28]
   153e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   153e6:	3b41      	subs	r3, #65	; 0x41
   153e8:	2b25      	cmp	r3, #37	; 0x25
   153ea:	f200 8398 	bhi.w	15b1e <_svfprintf_r+0x14ee>
   153ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   153f2:	046f      	.short	0x046f
   153f4:	03960396 	.word	0x03960396
   153f8:	04680396 	.word	0x04680396
   153fc:	0396046c 	.word	0x0396046c
   15400:	03960396 	.word	0x03960396
   15404:	03960396 	.word	0x03960396
   15408:	03960396 	.word	0x03960396
   1540c:	03960396 	.word	0x03960396
   15410:	03960396 	.word	0x03960396
   15414:	03960396 	.word	0x03960396
   15418:	03960396 	.word	0x03960396
   1541c:	03960396 	.word	0x03960396
   15420:	03960396 	.word	0x03960396
   15424:	03960396 	.word	0x03960396
   15428:	03960396 	.word	0x03960396
   1542c:	03960396 	.word	0x03960396
   15430:	03960396 	.word	0x03960396
   15434:	03960396 	.word	0x03960396
   15438:	04680396 	.word	0x04680396
   1543c:	046c      	.short	0x046c
   1543e:	9b08      	ldr	r3, [sp, #32]
   15440:	f853 2b04 	ldr.w	r2, [r3], #4
   15444:	9308      	str	r3, [sp, #32]
   15446:	2301      	movs	r3, #1
   15448:	f7ff bb97 	b.w	14b7a <_svfprintf_r+0x54a>
   1544c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1544e:	2b00      	cmp	r3, #0
   15450:	f43f a9cf 	beq.w	147f2 <_svfprintf_r+0x1c2>
   15454:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15456:	781b      	ldrb	r3, [r3, #0]
   15458:	2b00      	cmp	r3, #0
   1545a:	f43f a9ca 	beq.w	147f2 <_svfprintf_r+0x1c2>
   1545e:	f899 3000 	ldrb.w	r3, [r9]
   15462:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   15466:	f7ff b93f 	b.w	146e8 <_svfprintf_r+0xb8>
   1546a:	930b      	str	r3, [sp, #44]	; 0x2c
   1546c:	f8cd 8008 	str.w	r8, [sp, #8]
   15470:	f7ff bbf1 	b.w	14c56 <_svfprintf_r+0x626>
   15474:	930b      	str	r3, [sp, #44]	; 0x2c
   15476:	4b9a      	ldr	r3, [pc, #616]	; (156e0 <_svfprintf_r+0x10b0>)
   15478:	9311      	str	r3, [sp, #68]	; 0x44
   1547a:	f018 0120 	ands.w	r1, r8, #32
   1547e:	f000 8105 	beq.w	1568c <_svfprintf_r+0x105c>
   15482:	9b08      	ldr	r3, [sp, #32]
   15484:	3307      	adds	r3, #7
   15486:	f023 0307 	bic.w	r3, r3, #7
   1548a:	6859      	ldr	r1, [r3, #4]
   1548c:	f853 2b08 	ldr.w	r2, [r3], #8
   15490:	9308      	str	r3, [sp, #32]
   15492:	f018 0f01 	tst.w	r8, #1
   15496:	d00a      	beq.n	154ae <_svfprintf_r+0xe7e>
   15498:	ea52 0301 	orrs.w	r3, r2, r1
   1549c:	d007      	beq.n	154ae <_svfprintf_r+0xe7e>
   1549e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   154a0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   154a4:	2330      	movs	r3, #48	; 0x30
   154a6:	f048 0802 	orr.w	r8, r8, #2
   154aa:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   154ae:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   154b2:	9302      	str	r3, [sp, #8]
   154b4:	2302      	movs	r3, #2
   154b6:	f7ff bb60 	b.w	14b7a <_svfprintf_r+0x54a>
   154ba:	930b      	str	r3, [sp, #44]	; 0x2c
   154bc:	f7ff bbb6 	b.w	14c2c <_svfprintf_r+0x5fc>
   154c0:	930b      	str	r3, [sp, #44]	; 0x2c
   154c2:	4b88      	ldr	r3, [pc, #544]	; (156e4 <_svfprintf_r+0x10b4>)
   154c4:	9311      	str	r3, [sp, #68]	; 0x44
   154c6:	e7d8      	b.n	1547a <_svfprintf_r+0xe4a>
   154c8:	9b08      	ldr	r3, [sp, #32]
   154ca:	2101      	movs	r1, #1
   154cc:	f853 2b04 	ldr.w	r2, [r3], #4
   154d0:	9102      	str	r1, [sp, #8]
   154d2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   154d6:	9308      	str	r3, [sp, #32]
   154d8:	9105      	str	r1, [sp, #20]
   154da:	ac37      	add	r4, sp, #220	; 0xdc
   154dc:	f7ff baaf 	b.w	14a3e <_svfprintf_r+0x40e>
   154e0:	ee1b 1a10 	vmov	r1, s22
   154e4:	aa24      	add	r2, sp, #144	; 0x90
   154e6:	4658      	mov	r0, fp
   154e8:	f003 ff2e 	bl	19348 <__ssprint_r>
   154ec:	2800      	cmp	r0, #0
   154ee:	f47f ad04 	bne.w	14efa <_svfprintf_r+0x8ca>
   154f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   154f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   154f8:	e45d      	b.n	14db6 <_svfprintf_r+0x786>
   154fa:	9b03      	ldr	r3, [sp, #12]
   154fc:	9407      	str	r4, [sp, #28]
   154fe:	2b06      	cmp	r3, #6
   15500:	4622      	mov	r2, r4
   15502:	bf28      	it	cs
   15504:	2306      	movcs	r3, #6
   15506:	9403      	str	r4, [sp, #12]
   15508:	4621      	mov	r1, r4
   1550a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1550e:	4c76      	ldr	r4, [pc, #472]	; (156e8 <_svfprintf_r+0x10b8>)
   15510:	9302      	str	r3, [sp, #8]
   15512:	9305      	str	r3, [sp, #20]
   15514:	920f      	str	r2, [sp, #60]	; 0x3c
   15516:	f7ff ba6c 	b.w	149f2 <_svfprintf_r+0x3c2>
   1551a:	2140      	movs	r1, #64	; 0x40
   1551c:	4658      	mov	r0, fp
   1551e:	f7fb f95b 	bl	107d8 <_malloc_r>
   15522:	6020      	str	r0, [r4, #0]
   15524:	6120      	str	r0, [r4, #16]
   15526:	2800      	cmp	r0, #0
   15528:	f000 860f 	beq.w	1614a <_svfprintf_r+0x1b1a>
   1552c:	2340      	movs	r3, #64	; 0x40
   1552e:	6163      	str	r3, [r4, #20]
   15530:	f7ff b89e 	b.w	14670 <_svfprintf_r+0x40>
   15534:	2d10      	cmp	r5, #16
   15536:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15538:	f340 825d 	ble.w	159f6 <_svfprintf_r+0x13c6>
   1553c:	4651      	mov	r1, sl
   1553e:	2610      	movs	r6, #16
   15540:	ee1b aa10 	vmov	sl, s22
   15544:	e004      	b.n	15550 <_svfprintf_r+0xf20>
   15546:	3108      	adds	r1, #8
   15548:	3d10      	subs	r5, #16
   1554a:	2d10      	cmp	r5, #16
   1554c:	f340 8252 	ble.w	159f4 <_svfprintf_r+0x13c4>
   15550:	3301      	adds	r3, #1
   15552:	4866      	ldr	r0, [pc, #408]	; (156ec <_svfprintf_r+0x10bc>)
   15554:	3210      	adds	r2, #16
   15556:	2b07      	cmp	r3, #7
   15558:	e9c1 0600 	strd	r0, r6, [r1]
   1555c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15560:	ddf1      	ble.n	15546 <_svfprintf_r+0xf16>
   15562:	aa24      	add	r2, sp, #144	; 0x90
   15564:	4651      	mov	r1, sl
   15566:	4658      	mov	r0, fp
   15568:	f003 feee 	bl	19348 <__ssprint_r>
   1556c:	2800      	cmp	r0, #0
   1556e:	f47f acc4 	bne.w	14efa <_svfprintf_r+0x8ca>
   15572:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15576:	a927      	add	r1, sp, #156	; 0x9c
   15578:	e7e6      	b.n	15548 <_svfprintf_r+0xf18>
   1557a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1557c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   15580:	18e3      	adds	r3, r4, r3
   15582:	9303      	str	r3, [sp, #12]
   15584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15586:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1558a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1558c:	9d05      	ldr	r5, [sp, #20]
   1558e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   15592:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   15596:	940b      	str	r4, [sp, #44]	; 0x2c
   15598:	ee1b 1a10 	vmov	r1, s22
   1559c:	4650      	mov	r0, sl
   1559e:	2b00      	cmp	r3, #0
   155a0:	d034      	beq.n	1560c <_svfprintf_r+0xfdc>
   155a2:	f1b8 0f00 	cmp.w	r8, #0
   155a6:	d135      	bne.n	15614 <_svfprintf_r+0xfe4>
   155a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   155aa:	3b01      	subs	r3, #1
   155ac:	3e01      	subs	r6, #1
   155ae:	930d      	str	r3, [sp, #52]	; 0x34
   155b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   155b2:	e9c0 3900 	strd	r3, r9, [r0]
   155b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   155b8:	3301      	adds	r3, #1
   155ba:	444a      	add	r2, r9
   155bc:	2b07      	cmp	r3, #7
   155be:	9226      	str	r2, [sp, #152]	; 0x98
   155c0:	9325      	str	r3, [sp, #148]	; 0x94
   155c2:	dc6c      	bgt.n	1569e <_svfprintf_r+0x106e>
   155c4:	3008      	adds	r0, #8
   155c6:	9b03      	ldr	r3, [sp, #12]
   155c8:	f896 c000 	ldrb.w	ip, [r6]
   155cc:	1b5b      	subs	r3, r3, r5
   155ce:	4563      	cmp	r3, ip
   155d0:	bfa8      	it	ge
   155d2:	4663      	movge	r3, ip
   155d4:	2b00      	cmp	r3, #0
   155d6:	469a      	mov	sl, r3
   155d8:	dd0c      	ble.n	155f4 <_svfprintf_r+0xfc4>
   155da:	9c25      	ldr	r4, [sp, #148]	; 0x94
   155dc:	3401      	adds	r4, #1
   155de:	441a      	add	r2, r3
   155e0:	2c07      	cmp	r4, #7
   155e2:	e9c0 5300 	strd	r5, r3, [r0]
   155e6:	9226      	str	r2, [sp, #152]	; 0x98
   155e8:	9425      	str	r4, [sp, #148]	; 0x94
   155ea:	f300 8177 	bgt.w	158dc <_svfprintf_r+0x12ac>
   155ee:	f896 c000 	ldrb.w	ip, [r6]
   155f2:	3008      	adds	r0, #8
   155f4:	f1ba 0f00 	cmp.w	sl, #0
   155f8:	bfac      	ite	ge
   155fa:	ebac 040a 	subge.w	r4, ip, sl
   155fe:	4664      	movlt	r4, ip
   15600:	2c00      	cmp	r4, #0
   15602:	dc0a      	bgt.n	1561a <_svfprintf_r+0xfea>
   15604:	4465      	add	r5, ip
   15606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15608:	2b00      	cmp	r3, #0
   1560a:	d1ca      	bne.n	155a2 <_svfprintf_r+0xf72>
   1560c:	f1b8 0f00 	cmp.w	r8, #0
   15610:	f000 83ac 	beq.w	15d6c <_svfprintf_r+0x173c>
   15614:	f108 38ff 	add.w	r8, r8, #4294967295
   15618:	e7ca      	b.n	155b0 <_svfprintf_r+0xf80>
   1561a:	2c10      	cmp	r4, #16
   1561c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   15620:	dd24      	ble.n	1566c <_svfprintf_r+0x103c>
   15622:	9505      	str	r5, [sp, #20]
   15624:	f04f 0a10 	mov.w	sl, #16
   15628:	4663      	mov	r3, ip
   1562a:	460d      	mov	r5, r1
   1562c:	e004      	b.n	15638 <_svfprintf_r+0x1008>
   1562e:	3c10      	subs	r4, #16
   15630:	2c10      	cmp	r4, #16
   15632:	f100 0008 	add.w	r0, r0, #8
   15636:	dd16      	ble.n	15666 <_svfprintf_r+0x1036>
   15638:	3301      	adds	r3, #1
   1563a:	492c      	ldr	r1, [pc, #176]	; (156ec <_svfprintf_r+0x10bc>)
   1563c:	3210      	adds	r2, #16
   1563e:	2b07      	cmp	r3, #7
   15640:	e9c0 1a00 	strd	r1, sl, [r0]
   15644:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15648:	ddf1      	ble.n	1562e <_svfprintf_r+0xffe>
   1564a:	aa24      	add	r2, sp, #144	; 0x90
   1564c:	4629      	mov	r1, r5
   1564e:	4658      	mov	r0, fp
   15650:	f003 fe7a 	bl	19348 <__ssprint_r>
   15654:	2800      	cmp	r0, #0
   15656:	f47f ac50 	bne.w	14efa <_svfprintf_r+0x8ca>
   1565a:	3c10      	subs	r4, #16
   1565c:	2c10      	cmp	r4, #16
   1565e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15662:	a827      	add	r0, sp, #156	; 0x9c
   15664:	dce8      	bgt.n	15638 <_svfprintf_r+0x1008>
   15666:	4629      	mov	r1, r5
   15668:	9d05      	ldr	r5, [sp, #20]
   1566a:	469c      	mov	ip, r3
   1566c:	f10c 0301 	add.w	r3, ip, #1
   15670:	4422      	add	r2, r4
   15672:	6044      	str	r4, [r0, #4]
   15674:	2b07      	cmp	r3, #7
   15676:	4c1d      	ldr	r4, [pc, #116]	; (156ec <_svfprintf_r+0x10bc>)
   15678:	6004      	str	r4, [r0, #0]
   1567a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1567e:	f300 83c6 	bgt.w	15e0e <_svfprintf_r+0x17de>
   15682:	f896 c000 	ldrb.w	ip, [r6]
   15686:	3008      	adds	r0, #8
   15688:	4465      	add	r5, ip
   1568a:	e7bc      	b.n	15606 <_svfprintf_r+0xfd6>
   1568c:	f018 0310 	ands.w	r3, r8, #16
   15690:	f000 80c2 	beq.w	15818 <_svfprintf_r+0x11e8>
   15694:	9b08      	ldr	r3, [sp, #32]
   15696:	f853 2b04 	ldr.w	r2, [r3], #4
   1569a:	9308      	str	r3, [sp, #32]
   1569c:	e6f9      	b.n	15492 <_svfprintf_r+0xe62>
   1569e:	aa24      	add	r2, sp, #144	; 0x90
   156a0:	4658      	mov	r0, fp
   156a2:	9105      	str	r1, [sp, #20]
   156a4:	f003 fe50 	bl	19348 <__ssprint_r>
   156a8:	2800      	cmp	r0, #0
   156aa:	f47f ac26 	bne.w	14efa <_svfprintf_r+0x8ca>
   156ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
   156b0:	9905      	ldr	r1, [sp, #20]
   156b2:	a827      	add	r0, sp, #156	; 0x9c
   156b4:	e787      	b.n	155c6 <_svfprintf_r+0xf96>
   156b6:	9802      	ldr	r0, [sp, #8]
   156b8:	f8cd a01c 	str.w	sl, [sp, #28]
   156bc:	ac50      	add	r4, sp, #320	; 0x140
   156be:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   156c2:	2500      	movs	r5, #0
   156c4:	ee0a ba10 	vmov	s20, fp
   156c8:	4b09      	ldr	r3, [pc, #36]	; (156f0 <_svfprintf_r+0x10c0>)
   156ca:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   156ce:	f8cd 9014 	str.w	r9, [sp, #20]
   156d2:	46a3      	mov	fp, r4
   156d4:	f04f 0805 	mov.w	r8, #5
   156d8:	46ac      	mov	ip, r5
   156da:	4604      	mov	r4, r0
   156dc:	e010      	b.n	15700 <_svfprintf_r+0x10d0>
   156de:	bf00      	nop
   156e0:	20001210 	.word	0x20001210
   156e4:	20001224 	.word	0x20001224
   156e8:	20001238 	.word	0x20001238
   156ec:	20008a64 	.word	0x20008a64
   156f0:	cccccccd 	.word	0xcccccccd
   156f4:	2a0a      	cmp	r2, #10
   156f6:	f171 0100 	sbcs.w	r1, r1, #0
   156fa:	d336      	bcc.n	1576a <_svfprintf_r+0x113a>
   156fc:	464a      	mov	r2, r9
   156fe:	4631      	mov	r1, r6
   15700:	1850      	adds	r0, r2, r1
   15702:	f140 0000 	adc.w	r0, r0, #0
   15706:	fba3 5600 	umull	r5, r6, r3, r0
   1570a:	f026 0503 	bic.w	r5, r6, #3
   1570e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   15712:	1b40      	subs	r0, r0, r5
   15714:	1a15      	subs	r5, r2, r0
   15716:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   1571a:	f161 0e00 	sbc.w	lr, r1, #0
   1571e:	fb06 f605 	mul.w	r6, r6, r5
   15722:	fba5 9503 	umull	r9, r5, r5, r3
   15726:	fb03 660e 	mla	r6, r3, lr, r6
   1572a:	f009 0e01 	and.w	lr, r9, #1
   1572e:	442e      	add	r6, r5
   15730:	fbae 5e08 	umull	r5, lr, lr, r8
   15734:	182d      	adds	r5, r5, r0
   15736:	ea4f 0959 	mov.w	r9, r9, lsr #1
   1573a:	3530      	adds	r5, #48	; 0x30
   1573c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   15740:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   15744:	f10c 0c01 	add.w	ip, ip, #1
   15748:	f10b 3bff 	add.w	fp, fp, #4294967295
   1574c:	0876      	lsrs	r6, r6, #1
   1574e:	2c00      	cmp	r4, #0
   15750:	d0d0      	beq.n	156f4 <_svfprintf_r+0x10c4>
   15752:	f89a 0000 	ldrb.w	r0, [sl]
   15756:	4584      	cmp	ip, r0
   15758:	d1cc      	bne.n	156f4 <_svfprintf_r+0x10c4>
   1575a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1575e:	d0c9      	beq.n	156f4 <_svfprintf_r+0x10c4>
   15760:	2a0a      	cmp	r2, #10
   15762:	f171 0100 	sbcs.w	r1, r1, #0
   15766:	f080 818f 	bcs.w	15a88 <_svfprintf_r+0x1458>
   1576a:	465c      	mov	r4, fp
   1576c:	ab50      	add	r3, sp, #320	; 0x140
   1576e:	1b1b      	subs	r3, r3, r4
   15770:	f8dd 9014 	ldr.w	r9, [sp, #20]
   15774:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   15778:	ee1a ba10 	vmov	fp, s20
   1577c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   15780:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15784:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   15788:	9305      	str	r3, [sp, #20]
   1578a:	f7ff bac2 	b.w	14d12 <_svfprintf_r+0x6e2>
   1578e:	ee1b 1a10 	vmov	r1, s22
   15792:	aa24      	add	r2, sp, #144	; 0x90
   15794:	4658      	mov	r0, fp
   15796:	f003 fdd7 	bl	19348 <__ssprint_r>
   1579a:	2800      	cmp	r0, #0
   1579c:	f47f abad 	bne.w	14efa <_svfprintf_r+0x8ca>
   157a0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   157a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   157a6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   157aa:	f7ff b896 	b.w	148da <_svfprintf_r+0x2aa>
   157ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
   157b0:	48be      	ldr	r0, [pc, #760]	; (15aac <_svfprintf_r+0x147c>)
   157b2:	f8ca 0000 	str.w	r0, [sl]
   157b6:	3301      	adds	r3, #1
   157b8:	3201      	adds	r2, #1
   157ba:	2001      	movs	r0, #1
   157bc:	2b07      	cmp	r3, #7
   157be:	9226      	str	r2, [sp, #152]	; 0x98
   157c0:	9325      	str	r3, [sp, #148]	; 0x94
   157c2:	f8ca 0004 	str.w	r0, [sl, #4]
   157c6:	f300 8177 	bgt.w	15ab8 <_svfprintf_r+0x1488>
   157ca:	f10a 0a08 	add.w	sl, sl, #8
   157ce:	2900      	cmp	r1, #0
   157d0:	f040 80af 	bne.w	15932 <_svfprintf_r+0x1302>
   157d4:	990e      	ldr	r1, [sp, #56]	; 0x38
   157d6:	f008 0301 	and.w	r3, r8, #1
   157da:	430b      	orrs	r3, r1
   157dc:	f43f a8c0 	beq.w	14960 <_svfprintf_r+0x330>
   157e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   157e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   157e4:	441a      	add	r2, r3
   157e6:	e9ca 1300 	strd	r1, r3, [sl]
   157ea:	9b25      	ldr	r3, [sp, #148]	; 0x94
   157ec:	9226      	str	r2, [sp, #152]	; 0x98
   157ee:	3301      	adds	r3, #1
   157f0:	2b07      	cmp	r3, #7
   157f2:	9325      	str	r3, [sp, #148]	; 0x94
   157f4:	f300 8252 	bgt.w	15c9c <_svfprintf_r+0x166c>
   157f8:	f10a 0a08 	add.w	sl, sl, #8
   157fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   157fe:	f8ca 4000 	str.w	r4, [sl]
   15802:	3301      	adds	r3, #1
   15804:	440a      	add	r2, r1
   15806:	2b07      	cmp	r3, #7
   15808:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1580c:	f8ca 1004 	str.w	r1, [sl, #4]
   15810:	f77f a8a4 	ble.w	1495c <_svfprintf_r+0x32c>
   15814:	f7ff bbbd 	b.w	14f92 <_svfprintf_r+0x962>
   15818:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1581c:	f000 80dd 	beq.w	159da <_svfprintf_r+0x13aa>
   15820:	9808      	ldr	r0, [sp, #32]
   15822:	f850 2b04 	ldr.w	r2, [r0], #4
   15826:	9008      	str	r0, [sp, #32]
   15828:	4619      	mov	r1, r3
   1582a:	b292      	uxth	r2, r2
   1582c:	e631      	b.n	15492 <_svfprintf_r+0xe62>
   1582e:	ee1b 1a10 	vmov	r1, s22
   15832:	aa24      	add	r2, sp, #144	; 0x90
   15834:	4658      	mov	r0, fp
   15836:	f003 fd87 	bl	19348 <__ssprint_r>
   1583a:	2800      	cmp	r0, #0
   1583c:	f47f ab5d 	bne.w	14efa <_svfprintf_r+0x8ca>
   15840:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15842:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15846:	f7ff baa3 	b.w	14d90 <_svfprintf_r+0x760>
   1584a:	ae22      	add	r6, sp, #136	; 0x88
   1584c:	2208      	movs	r2, #8
   1584e:	2100      	movs	r1, #0
   15850:	4630      	mov	r0, r6
   15852:	941d      	str	r4, [sp, #116]	; 0x74
   15854:	f7fc ff30 	bl	126b8 <memset>
   15858:	9b03      	ldr	r3, [sp, #12]
   1585a:	1c5a      	adds	r2, r3, #1
   1585c:	f000 80db 	beq.w	15a16 <_svfprintf_r+0x13e6>
   15860:	2500      	movs	r5, #0
   15862:	f8cd 9008 	str.w	r9, [sp, #8]
   15866:	f8cd 801c 	str.w	r8, [sp, #28]
   1586a:	4699      	mov	r9, r3
   1586c:	46a8      	mov	r8, r5
   1586e:	e00c      	b.n	1588a <_svfprintf_r+0x125a>
   15870:	a937      	add	r1, sp, #220	; 0xdc
   15872:	4658      	mov	r0, fp
   15874:	f003 fc3e 	bl	190f4 <_wcrtomb_r>
   15878:	1c43      	adds	r3, r0, #1
   1587a:	4440      	add	r0, r8
   1587c:	f000 83c8 	beq.w	16010 <_svfprintf_r+0x19e0>
   15880:	4548      	cmp	r0, r9
   15882:	dc08      	bgt.n	15896 <_svfprintf_r+0x1266>
   15884:	f000 8418 	beq.w	160b8 <_svfprintf_r+0x1a88>
   15888:	4680      	mov	r8, r0
   1588a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1588c:	5952      	ldr	r2, [r2, r5]
   1588e:	4633      	mov	r3, r6
   15890:	3504      	adds	r5, #4
   15892:	2a00      	cmp	r2, #0
   15894:	d1ec      	bne.n	15870 <_svfprintf_r+0x1240>
   15896:	f8cd 8014 	str.w	r8, [sp, #20]
   1589a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1589e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   158a2:	e0c5      	b.n	15a30 <_svfprintf_r+0x1400>
   158a4:	3301      	adds	r3, #1
   158a6:	4982      	ldr	r1, [pc, #520]	; (15ab0 <_svfprintf_r+0x1480>)
   158a8:	f8ca 4004 	str.w	r4, [sl, #4]
   158ac:	4422      	add	r2, r4
   158ae:	2b07      	cmp	r3, #7
   158b0:	f8ca 1000 	str.w	r1, [sl]
   158b4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   158b8:	f77f a850 	ble.w	1495c <_svfprintf_r+0x32c>
   158bc:	f7ff bb69 	b.w	14f92 <_svfprintf_r+0x962>
   158c0:	ee1b 1a10 	vmov	r1, s22
   158c4:	aa24      	add	r2, sp, #144	; 0x90
   158c6:	4658      	mov	r0, fp
   158c8:	f003 fd3e 	bl	19348 <__ssprint_r>
   158cc:	2800      	cmp	r0, #0
   158ce:	f47f ab14 	bne.w	14efa <_svfprintf_r+0x8ca>
   158d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   158d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   158d8:	f7ff b829 	b.w	1492e <_svfprintf_r+0x2fe>
   158dc:	aa24      	add	r2, sp, #144	; 0x90
   158de:	4658      	mov	r0, fp
   158e0:	9105      	str	r1, [sp, #20]
   158e2:	f003 fd31 	bl	19348 <__ssprint_r>
   158e6:	2800      	cmp	r0, #0
   158e8:	f47f ab07 	bne.w	14efa <_svfprintf_r+0x8ca>
   158ec:	f896 c000 	ldrb.w	ip, [r6]
   158f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   158f2:	9905      	ldr	r1, [sp, #20]
   158f4:	a827      	add	r0, sp, #156	; 0x9c
   158f6:	e67d      	b.n	155f4 <_svfprintf_r+0xfc4>
   158f8:	2b01      	cmp	r3, #1
   158fa:	f8cd 8008 	str.w	r8, [sp, #8]
   158fe:	f47f a9f3 	bne.w	14ce8 <_svfprintf_r+0x6b8>
   15902:	f7ff bb93 	b.w	1502c <_svfprintf_r+0x9fc>
   15906:	9b08      	ldr	r3, [sp, #32]
   15908:	9904      	ldr	r1, [sp, #16]
   1590a:	f853 2b04 	ldr.w	r2, [r3], #4
   1590e:	464c      	mov	r4, r9
   15910:	6011      	str	r1, [r2, #0]
   15912:	9308      	str	r3, [sp, #32]
   15914:	f7fe bebe 	b.w	14694 <_svfprintf_r+0x64>
   15918:	3301      	adds	r3, #1
   1591a:	4965      	ldr	r1, [pc, #404]	; (15ab0 <_svfprintf_r+0x1480>)
   1591c:	f8ca 4004 	str.w	r4, [sl, #4]
   15920:	4422      	add	r2, r4
   15922:	2b07      	cmp	r3, #7
   15924:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15928:	f8ca 1000 	str.w	r1, [sl]
   1592c:	f77f ab22 	ble.w	14f74 <_svfprintf_r+0x944>
   15930:	e47b      	b.n	1522a <_svfprintf_r+0xbfa>
   15932:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15934:	9812      	ldr	r0, [sp, #72]	; 0x48
   15936:	441a      	add	r2, r3
   15938:	e9ca 0300 	strd	r0, r3, [sl]
   1593c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1593e:	9226      	str	r2, [sp, #152]	; 0x98
   15940:	3301      	adds	r3, #1
   15942:	2b07      	cmp	r3, #7
   15944:	9325      	str	r3, [sp, #148]	; 0x94
   15946:	f300 81a9 	bgt.w	15c9c <_svfprintf_r+0x166c>
   1594a:	f10a 0a08 	add.w	sl, sl, #8
   1594e:	2900      	cmp	r1, #0
   15950:	f6bf af54 	bge.w	157fc <_svfprintf_r+0x11cc>
   15954:	424d      	negs	r5, r1
   15956:	3110      	adds	r1, #16
   15958:	f280 830f 	bge.w	15f7a <_svfprintf_r+0x194a>
   1595c:	ee1b 1a10 	vmov	r1, s22
   15960:	2610      	movs	r6, #16
   15962:	e005      	b.n	15970 <_svfprintf_r+0x1340>
   15964:	f10a 0a08 	add.w	sl, sl, #8
   15968:	3d10      	subs	r5, #16
   1596a:	2d10      	cmp	r5, #16
   1596c:	f340 8305 	ble.w	15f7a <_svfprintf_r+0x194a>
   15970:	3301      	adds	r3, #1
   15972:	484f      	ldr	r0, [pc, #316]	; (15ab0 <_svfprintf_r+0x1480>)
   15974:	3210      	adds	r2, #16
   15976:	2b07      	cmp	r3, #7
   15978:	e9ca 0600 	strd	r0, r6, [sl]
   1597c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15980:	ddf0      	ble.n	15964 <_svfprintf_r+0x1334>
   15982:	aa24      	add	r2, sp, #144	; 0x90
   15984:	4658      	mov	r0, fp
   15986:	9103      	str	r1, [sp, #12]
   15988:	f003 fcde 	bl	19348 <__ssprint_r>
   1598c:	2800      	cmp	r0, #0
   1598e:	f47f aab4 	bne.w	14efa <_svfprintf_r+0x8ca>
   15992:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15996:	9903      	ldr	r1, [sp, #12]
   15998:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1599c:	e7e4      	b.n	15968 <_svfprintf_r+0x1338>
   1599e:	9b08      	ldr	r3, [sp, #32]
   159a0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   159a4:	bf1a      	itte	ne
   159a6:	4611      	movne	r1, r2
   159a8:	f853 2b04 	ldrne.w	r2, [r3], #4
   159ac:	f853 2b04 	ldreq.w	r2, [r3], #4
   159b0:	9308      	str	r3, [sp, #32]
   159b2:	bf18      	it	ne
   159b4:	b2d2      	uxtbne	r2, r2
   159b6:	f7ff b945 	b.w	14c44 <_svfprintf_r+0x614>
   159ba:	9b02      	ldr	r3, [sp, #8]
   159bc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   159c0:	9b08      	ldr	r3, [sp, #32]
   159c2:	bf1a      	itte	ne
   159c4:	4611      	movne	r1, r2
   159c6:	f853 2b04 	ldrne.w	r2, [r3], #4
   159ca:	f853 2b04 	ldreq.w	r2, [r3], #4
   159ce:	9308      	str	r3, [sp, #32]
   159d0:	bf18      	it	ne
   159d2:	b2d2      	uxtbne	r2, r2
   159d4:	2301      	movs	r3, #1
   159d6:	f7ff b8d0 	b.w	14b7a <_svfprintf_r+0x54a>
   159da:	9b08      	ldr	r3, [sp, #32]
   159dc:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   159e0:	bf1a      	itte	ne
   159e2:	4611      	movne	r1, r2
   159e4:	f853 2b04 	ldrne.w	r2, [r3], #4
   159e8:	f853 2b04 	ldreq.w	r2, [r3], #4
   159ec:	9308      	str	r3, [sp, #32]
   159ee:	bf18      	it	ne
   159f0:	b2d2      	uxtbne	r2, r2
   159f2:	e54e      	b.n	15492 <_svfprintf_r+0xe62>
   159f4:	468a      	mov	sl, r1
   159f6:	3301      	adds	r3, #1
   159f8:	492d      	ldr	r1, [pc, #180]	; (15ab0 <_svfprintf_r+0x1480>)
   159fa:	f8ca 5004 	str.w	r5, [sl, #4]
   159fe:	442a      	add	r2, r5
   15a00:	2b07      	cmp	r3, #7
   15a02:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15a06:	f8ca 1000 	str.w	r1, [sl]
   15a0a:	f300 8139 	bgt.w	15c80 <_svfprintf_r+0x1650>
   15a0e:	f10a 0a08 	add.w	sl, sl, #8
   15a12:	f7ff bb8c 	b.w	1512e <_svfprintf_r+0xafe>
   15a16:	2300      	movs	r3, #0
   15a18:	4619      	mov	r1, r3
   15a1a:	9600      	str	r6, [sp, #0]
   15a1c:	aa1d      	add	r2, sp, #116	; 0x74
   15a1e:	4658      	mov	r0, fp
   15a20:	f003 fb8e 	bl	19140 <_wcsrtombs_r>
   15a24:	4603      	mov	r3, r0
   15a26:	3301      	adds	r3, #1
   15a28:	9005      	str	r0, [sp, #20]
   15a2a:	f000 82f1 	beq.w	16010 <_svfprintf_r+0x19e0>
   15a2e:	941d      	str	r4, [sp, #116]	; 0x74
   15a30:	9b05      	ldr	r3, [sp, #20]
   15a32:	2b00      	cmp	r3, #0
   15a34:	d04e      	beq.n	15ad4 <_svfprintf_r+0x14a4>
   15a36:	2b63      	cmp	r3, #99	; 0x63
   15a38:	f300 8118 	bgt.w	15c6c <_svfprintf_r+0x163c>
   15a3c:	2300      	movs	r3, #0
   15a3e:	9307      	str	r3, [sp, #28]
   15a40:	ac37      	add	r4, sp, #220	; 0xdc
   15a42:	2208      	movs	r2, #8
   15a44:	2100      	movs	r1, #0
   15a46:	4630      	mov	r0, r6
   15a48:	f7fc fe36 	bl	126b8 <memset>
   15a4c:	9d05      	ldr	r5, [sp, #20]
   15a4e:	9600      	str	r6, [sp, #0]
   15a50:	462b      	mov	r3, r5
   15a52:	aa1d      	add	r2, sp, #116	; 0x74
   15a54:	4621      	mov	r1, r4
   15a56:	4658      	mov	r0, fp
   15a58:	f003 fb72 	bl	19140 <_wcsrtombs_r>
   15a5c:	4285      	cmp	r5, r0
   15a5e:	f040 837c 	bne.w	1615a <_svfprintf_r+0x1b2a>
   15a62:	9a05      	ldr	r2, [sp, #20]
   15a64:	2300      	movs	r3, #0
   15a66:	54a3      	strb	r3, [r4, r2]
   15a68:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15a6c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15a70:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15a74:	9303      	str	r3, [sp, #12]
   15a76:	9202      	str	r2, [sp, #8]
   15a78:	930f      	str	r3, [sp, #60]	; 0x3c
   15a7a:	f7fe bfba 	b.w	149f2 <_svfprintf_r+0x3c2>
   15a7e:	212d      	movs	r1, #45	; 0x2d
   15a80:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15a84:	f7fe bfa4 	b.w	149d0 <_svfprintf_r+0x3a0>
   15a88:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15a8a:	9915      	ldr	r1, [sp, #84]	; 0x54
   15a8c:	ebab 0b03 	sub.w	fp, fp, r3
   15a90:	461a      	mov	r2, r3
   15a92:	4658      	mov	r0, fp
   15a94:	f7fc fefe 	bl	12894 <strncpy>
   15a98:	f89a 2001 	ldrb.w	r2, [sl, #1]
   15a9c:	4b05      	ldr	r3, [pc, #20]	; (15ab4 <_svfprintf_r+0x1484>)
   15a9e:	b10a      	cbz	r2, 15aa4 <_svfprintf_r+0x1474>
   15aa0:	f10a 0a01 	add.w	sl, sl, #1
   15aa4:	f04f 0c00 	mov.w	ip, #0
   15aa8:	e628      	b.n	156fc <_svfprintf_r+0x10cc>
   15aaa:	bf00      	nop
   15aac:	20007fec 	.word	0x20007fec
   15ab0:	20008a64 	.word	0x20008a64
   15ab4:	cccccccd 	.word	0xcccccccd
   15ab8:	ee1b 1a10 	vmov	r1, s22
   15abc:	aa24      	add	r2, sp, #144	; 0x90
   15abe:	4658      	mov	r0, fp
   15ac0:	f003 fc42 	bl	19348 <__ssprint_r>
   15ac4:	2800      	cmp	r0, #0
   15ac6:	f47f aa18 	bne.w	14efa <_svfprintf_r+0x8ca>
   15aca:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15acc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ace:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15ad2:	e67c      	b.n	157ce <_svfprintf_r+0x119e>
   15ad4:	9b05      	ldr	r3, [sp, #20]
   15ad6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15ada:	930f      	str	r3, [sp, #60]	; 0x3c
   15adc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15ae0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15ae4:	9307      	str	r3, [sp, #28]
   15ae6:	f7fe bf84 	b.w	149f2 <_svfprintf_r+0x3c2>
   15aea:	990e      	ldr	r1, [sp, #56]	; 0x38
   15aec:	9805      	ldr	r0, [sp, #20]
   15aee:	1865      	adds	r5, r4, r1
   15af0:	1a2d      	subs	r5, r5, r0
   15af2:	1acc      	subs	r4, r1, r3
   15af4:	42a5      	cmp	r5, r4
   15af6:	bfa8      	it	ge
   15af8:	4625      	movge	r5, r4
   15afa:	f7ff bb4d 	b.w	15198 <_svfprintf_r+0xb68>
   15afe:	9b08      	ldr	r3, [sp, #32]
   15b00:	9904      	ldr	r1, [sp, #16]
   15b02:	f853 2b04 	ldr.w	r2, [r3], #4
   15b06:	9308      	str	r3, [sp, #32]
   15b08:	8011      	strh	r1, [r2, #0]
   15b0a:	464c      	mov	r4, r9
   15b0c:	f7fe bdc2 	b.w	14694 <_svfprintf_r+0x64>
   15b10:	f913 2b04 	ldrsb.w	r2, [r3], #4
   15b14:	9308      	str	r3, [sp, #32]
   15b16:	17d1      	asrs	r1, r2, #31
   15b18:	460b      	mov	r3, r1
   15b1a:	f7fe bfdb 	b.w	14ad4 <_svfprintf_r+0x4a4>
   15b1e:	9a03      	ldr	r2, [sp, #12]
   15b20:	2102      	movs	r1, #2
   15b22:	ab22      	add	r3, sp, #136	; 0x88
   15b24:	9301      	str	r3, [sp, #4]
   15b26:	ab1d      	add	r3, sp, #116	; 0x74
   15b28:	9300      	str	r3, [sp, #0]
   15b2a:	4658      	mov	r0, fp
   15b2c:	ab1b      	add	r3, sp, #108	; 0x6c
   15b2e:	eeb0 0b4a 	vmov.f64	d0, d10
   15b32:	9202      	str	r2, [sp, #8]
   15b34:	f002 fa14 	bl	17f60 <_dtoa_r>
   15b38:	2d47      	cmp	r5, #71	; 0x47
   15b3a:	9a02      	ldr	r2, [sp, #8]
   15b3c:	4604      	mov	r4, r0
   15b3e:	f000 8161 	beq.w	15e04 <_svfprintf_r+0x17d4>
   15b42:	2d46      	cmp	r5, #70	; 0x46
   15b44:	4410      	add	r0, r2
   15b46:	d105      	bne.n	15b54 <_svfprintf_r+0x1524>
   15b48:	7823      	ldrb	r3, [r4, #0]
   15b4a:	2b30      	cmp	r3, #48	; 0x30
   15b4c:	f000 826f 	beq.w	1602e <_svfprintf_r+0x19fe>
   15b50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15b52:	4410      	add	r0, r2
   15b54:	eeb5 ab40 	vcmp.f64	d10, #0.0
   15b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15b5c:	f040 8146 	bne.w	15dec <_svfprintf_r+0x17bc>
   15b60:	4603      	mov	r3, r0
   15b62:	1b1b      	subs	r3, r3, r4
   15b64:	930e      	str	r3, [sp, #56]	; 0x38
   15b66:	2d47      	cmp	r5, #71	; 0x47
   15b68:	f000 8110 	beq.w	15d8c <_svfprintf_r+0x175c>
   15b6c:	2d46      	cmp	r5, #70	; 0x46
   15b6e:	f000 81b5 	beq.w	15edc <_svfprintf_r+0x18ac>
   15b72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15b74:	930c      	str	r3, [sp, #48]	; 0x30
   15b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b78:	2d41      	cmp	r5, #65	; 0x41
   15b7a:	f103 33ff 	add.w	r3, r3, #4294967295
   15b7e:	931b      	str	r3, [sp, #108]	; 0x6c
   15b80:	f000 81e5 	beq.w	15f4e <_svfprintf_r+0x191e>
   15b84:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   15b88:	2100      	movs	r1, #0
   15b8a:	2b00      	cmp	r3, #0
   15b8c:	bfb8      	it	lt
   15b8e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   15b90:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   15b94:	bfba      	itte	lt
   15b96:	f1c3 0301 	rsblt	r3, r3, #1
   15b9a:	222d      	movlt	r2, #45	; 0x2d
   15b9c:	222b      	movge	r2, #43	; 0x2b
   15b9e:	2b09      	cmp	r3, #9
   15ba0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   15ba4:	f340 81da 	ble.w	15f5c <_svfprintf_r+0x192c>
   15ba8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   15bac:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 15fcc <_svfprintf_r+0x199c>
   15bb0:	462a      	mov	r2, r5
   15bb2:	4610      	mov	r0, r2
   15bb4:	fb8c 2103 	smull	r2, r1, ip, r3
   15bb8:	17da      	asrs	r2, r3, #31
   15bba:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   15bbe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15bc2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   15bc6:	3130      	adds	r1, #48	; 0x30
   15bc8:	f800 1c01 	strb.w	r1, [r0, #-1]
   15bcc:	4619      	mov	r1, r3
   15bce:	2963      	cmp	r1, #99	; 0x63
   15bd0:	4613      	mov	r3, r2
   15bd2:	f100 32ff 	add.w	r2, r0, #4294967295
   15bd6:	dcec      	bgt.n	15bb2 <_svfprintf_r+0x1582>
   15bd8:	3330      	adds	r3, #48	; 0x30
   15bda:	b2d9      	uxtb	r1, r3
   15bdc:	1e83      	subs	r3, r0, #2
   15bde:	429d      	cmp	r5, r3
   15be0:	f802 1c01 	strb.w	r1, [r2, #-1]
   15be4:	f240 828b 	bls.w	160fe <_svfprintf_r+0x1ace>
   15be8:	4613      	mov	r3, r2
   15bea:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15bee:	e001      	b.n	15bf4 <_svfprintf_r+0x15c4>
   15bf0:	f813 1b01 	ldrb.w	r1, [r3], #1
   15bf4:	f802 1b01 	strb.w	r1, [r2], #1
   15bf8:	429d      	cmp	r5, r3
   15bfa:	d1f9      	bne.n	15bf0 <_svfprintf_r+0x15c0>
   15bfc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   15c00:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15c04:	1a1b      	subs	r3, r3, r0
   15c06:	4413      	add	r3, r2
   15c08:	aa1e      	add	r2, sp, #120	; 0x78
   15c0a:	1a9b      	subs	r3, r3, r2
   15c0c:	9314      	str	r3, [sp, #80]	; 0x50
   15c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15c12:	2b01      	cmp	r3, #1
   15c14:	441a      	add	r2, r3
   15c16:	9205      	str	r2, [sp, #20]
   15c18:	f340 8203 	ble.w	16022 <_svfprintf_r+0x19f2>
   15c1c:	9b05      	ldr	r3, [sp, #20]
   15c1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15c20:	4413      	add	r3, r2
   15c22:	9305      	str	r3, [sp, #20]
   15c24:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   15c28:	9a05      	ldr	r2, [sp, #20]
   15c2a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   15c2e:	2300      	movs	r3, #0
   15c30:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15c34:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15c38:	930f      	str	r3, [sp, #60]	; 0x3c
   15c3a:	9202      	str	r2, [sp, #8]
   15c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15c3e:	2b00      	cmp	r3, #0
   15c40:	f040 80b1 	bne.w	15da6 <_svfprintf_r+0x1776>
   15c44:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15c48:	9303      	str	r3, [sp, #12]
   15c4a:	f7fe bed2 	b.w	149f2 <_svfprintf_r+0x3c2>
   15c4e:	4620      	mov	r0, r4
   15c50:	f7fd f916 	bl	12e80 <strlen>
   15c54:	4602      	mov	r2, r0
   15c56:	9005      	str	r0, [sp, #20]
   15c58:	f7fe bf20 	b.w	14a9c <_svfprintf_r+0x46c>
   15c5c:	ee1b 1a10 	vmov	r1, s22
   15c60:	aa24      	add	r2, sp, #144	; 0x90
   15c62:	4658      	mov	r0, fp
   15c64:	f003 fb70 	bl	19348 <__ssprint_r>
   15c68:	f7fe bded 	b.w	14846 <_svfprintf_r+0x216>
   15c6c:	1c59      	adds	r1, r3, #1
   15c6e:	4658      	mov	r0, fp
   15c70:	f7fa fdb2 	bl	107d8 <_malloc_r>
   15c74:	4604      	mov	r4, r0
   15c76:	2800      	cmp	r0, #0
   15c78:	f000 81ca 	beq.w	16010 <_svfprintf_r+0x19e0>
   15c7c:	9007      	str	r0, [sp, #28]
   15c7e:	e6e0      	b.n	15a42 <_svfprintf_r+0x1412>
   15c80:	ee1b 1a10 	vmov	r1, s22
   15c84:	aa24      	add	r2, sp, #144	; 0x90
   15c86:	4658      	mov	r0, fp
   15c88:	f003 fb5e 	bl	19348 <__ssprint_r>
   15c8c:	2800      	cmp	r0, #0
   15c8e:	f47f a934 	bne.w	14efa <_svfprintf_r+0x8ca>
   15c92:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15c94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15c98:	f7ff ba49 	b.w	1512e <_svfprintf_r+0xafe>
   15c9c:	ee1b 1a10 	vmov	r1, s22
   15ca0:	aa24      	add	r2, sp, #144	; 0x90
   15ca2:	4658      	mov	r0, fp
   15ca4:	f003 fb50 	bl	19348 <__ssprint_r>
   15ca8:	2800      	cmp	r0, #0
   15caa:	f47f a926 	bne.w	14efa <_svfprintf_r+0x8ca>
   15cae:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15cb2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15cb4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15cb8:	e649      	b.n	1594e <_svfprintf_r+0x131e>
   15cba:	2306      	movs	r3, #6
   15cbc:	9303      	str	r3, [sp, #12]
   15cbe:	f7ff bb83 	b.w	153c8 <_svfprintf_r+0xd98>
   15cc2:	9b03      	ldr	r3, [sp, #12]
   15cc4:	2102      	movs	r1, #2
   15cc6:	1c5a      	adds	r2, r3, #1
   15cc8:	e72b      	b.n	15b22 <_svfprintf_r+0x14f2>
   15cca:	9a03      	ldr	r2, [sp, #12]
   15ccc:	2103      	movs	r1, #3
   15cce:	e728      	b.n	15b22 <_svfprintf_r+0x14f2>
   15cd0:	a81b      	add	r0, sp, #108	; 0x6c
   15cd2:	eeb0 0b4a 	vmov.f64	d0, d10
   15cd6:	f002 f817 	bl	17d08 <frexp>
   15cda:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15cde:	ee20 0b07 	vmul.f64	d0, d0, d7
   15ce2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15cea:	d101      	bne.n	15cf0 <_svfprintf_r+0x16c0>
   15cec:	2301      	movs	r3, #1
   15cee:	931b      	str	r3, [sp, #108]	; 0x6c
   15cf0:	48b3      	ldr	r0, [pc, #716]	; (15fc0 <_svfprintf_r+0x1990>)
   15cf2:	9b03      	ldr	r3, [sp, #12]
   15cf4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   15cf8:	3b01      	subs	r3, #1
   15cfa:	4622      	mov	r2, r4
   15cfc:	e004      	b.n	15d08 <_svfprintf_r+0x16d8>
   15cfe:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d06:	d013      	beq.n	15d30 <_svfprintf_r+0x1700>
   15d08:	ee20 0b05 	vmul.f64	d0, d0, d5
   15d0c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   15d10:	f1b3 3fff 	cmp.w	r3, #4294967295
   15d14:	ee17 1a90 	vmov	r1, s15
   15d18:	5c41      	ldrb	r1, [r0, r1]
   15d1a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   15d1e:	4694      	mov	ip, r2
   15d20:	ee30 0b46 	vsub.f64	d0, d0, d6
   15d24:	f802 1b01 	strb.w	r1, [r2], #1
   15d28:	4619      	mov	r1, r3
   15d2a:	f103 33ff 	add.w	r3, r3, #4294967295
   15d2e:	d1e6      	bne.n	15cfe <_svfprintf_r+0x16ce>
   15d30:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   15d34:	eeb4 0bc6 	vcmpe.f64	d0, d6
   15d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d3c:	f300 8148 	bgt.w	15fd0 <_svfprintf_r+0x19a0>
   15d40:	eeb4 0b46 	vcmp.f64	d0, d6
   15d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15d48:	d104      	bne.n	15d54 <_svfprintf_r+0x1724>
   15d4a:	ee17 3a90 	vmov	r3, s15
   15d4e:	07db      	lsls	r3, r3, #31
   15d50:	f100 813e 	bmi.w	15fd0 <_svfprintf_r+0x19a0>
   15d54:	2900      	cmp	r1, #0
   15d56:	db06      	blt.n	15d66 <_svfprintf_r+0x1736>
   15d58:	1c4b      	adds	r3, r1, #1
   15d5a:	4413      	add	r3, r2
   15d5c:	2130      	movs	r1, #48	; 0x30
   15d5e:	f802 1b01 	strb.w	r1, [r2], #1
   15d62:	4293      	cmp	r3, r2
   15d64:	d1fb      	bne.n	15d5e <_svfprintf_r+0x172e>
   15d66:	1b13      	subs	r3, r2, r4
   15d68:	930e      	str	r3, [sp, #56]	; 0x38
   15d6a:	e6fc      	b.n	15b66 <_svfprintf_r+0x1536>
   15d6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   15d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15d70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   15d74:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   15d78:	9613      	str	r6, [sp, #76]	; 0x4c
   15d7a:	18e3      	adds	r3, r4, r3
   15d7c:	429d      	cmp	r5, r3
   15d7e:	4629      	mov	r1, r5
   15d80:	bf28      	it	cs
   15d82:	4619      	movcs	r1, r3
   15d84:	4682      	mov	sl, r0
   15d86:	9105      	str	r1, [sp, #20]
   15d88:	f7ff b9d8 	b.w	1513c <_svfprintf_r+0xb0c>
   15d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15d8e:	930c      	str	r3, [sp, #48]	; 0x30
   15d90:	1cda      	adds	r2, r3, #3
   15d92:	db02      	blt.n	15d9a <_svfprintf_r+0x176a>
   15d94:	9a03      	ldr	r2, [sp, #12]
   15d96:	4293      	cmp	r3, r2
   15d98:	dd0c      	ble.n	15db4 <_svfprintf_r+0x1784>
   15d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15d9c:	3b02      	subs	r3, #2
   15d9e:	930b      	str	r3, [sp, #44]	; 0x2c
   15da0:	f023 0520 	bic.w	r5, r3, #32
   15da4:	e6e7      	b.n	15b76 <_svfprintf_r+0x1546>
   15da6:	212d      	movs	r1, #45	; 0x2d
   15da8:	2300      	movs	r3, #0
   15daa:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15dae:	9303      	str	r3, [sp, #12]
   15db0:	f7fe be22 	b.w	149f8 <_svfprintf_r+0x3c8>
   15db4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15db6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15db8:	4293      	cmp	r3, r2
   15dba:	f2c0 80bd 	blt.w	15f38 <_svfprintf_r+0x1908>
   15dbe:	07f0      	lsls	r0, r6, #31
   15dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15dc2:	f140 8132 	bpl.w	1602a <_svfprintf_r+0x19fa>
   15dc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15dc8:	4413      	add	r3, r2
   15dca:	9305      	str	r3, [sp, #20]
   15dcc:	0571      	lsls	r1, r6, #21
   15dce:	d503      	bpl.n	15dd8 <_svfprintf_r+0x17a8>
   15dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15dd2:	2b00      	cmp	r3, #0
   15dd4:	f300 8135 	bgt.w	16042 <_svfprintf_r+0x1a12>
   15dd8:	9b05      	ldr	r3, [sp, #20]
   15dda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15dde:	9302      	str	r3, [sp, #8]
   15de0:	2367      	movs	r3, #103	; 0x67
   15de2:	930b      	str	r3, [sp, #44]	; 0x2c
   15de4:	2300      	movs	r3, #0
   15de6:	930f      	str	r3, [sp, #60]	; 0x3c
   15de8:	930d      	str	r3, [sp, #52]	; 0x34
   15dea:	e727      	b.n	15c3c <_svfprintf_r+0x160c>
   15dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15dee:	4283      	cmp	r3, r0
   15df0:	f4bf aeb7 	bcs.w	15b62 <_svfprintf_r+0x1532>
   15df4:	2130      	movs	r1, #48	; 0x30
   15df6:	1c5a      	adds	r2, r3, #1
   15df8:	9222      	str	r2, [sp, #136]	; 0x88
   15dfa:	7019      	strb	r1, [r3, #0]
   15dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15dfe:	4298      	cmp	r0, r3
   15e00:	d8f9      	bhi.n	15df6 <_svfprintf_r+0x17c6>
   15e02:	e6ae      	b.n	15b62 <_svfprintf_r+0x1532>
   15e04:	07f3      	lsls	r3, r6, #31
   15e06:	f100 80a7 	bmi.w	15f58 <_svfprintf_r+0x1928>
   15e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15e0c:	e6a9      	b.n	15b62 <_svfprintf_r+0x1532>
   15e0e:	aa24      	add	r2, sp, #144	; 0x90
   15e10:	4658      	mov	r0, fp
   15e12:	9105      	str	r1, [sp, #20]
   15e14:	f003 fa98 	bl	19348 <__ssprint_r>
   15e18:	2800      	cmp	r0, #0
   15e1a:	f47f a86e 	bne.w	14efa <_svfprintf_r+0x8ca>
   15e1e:	f896 c000 	ldrb.w	ip, [r6]
   15e22:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15e24:	9905      	ldr	r1, [sp, #20]
   15e26:	a827      	add	r0, sp, #156	; 0x9c
   15e28:	4465      	add	r5, ip
   15e2a:	f7ff bbec 	b.w	15606 <_svfprintf_r+0xfd6>
   15e2e:	ee1b 1a10 	vmov	r1, s22
   15e32:	aa24      	add	r2, sp, #144	; 0x90
   15e34:	4658      	mov	r0, fp
   15e36:	f003 fa87 	bl	19348 <__ssprint_r>
   15e3a:	2800      	cmp	r0, #0
   15e3c:	f47f a85d 	bne.w	14efa <_svfprintf_r+0x8ca>
   15e40:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15e42:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15e46:	f7ff b96b 	b.w	15120 <_svfprintf_r+0xaf0>
   15e4a:	2378      	movs	r3, #120	; 0x78
   15e4c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15e50:	2330      	movs	r3, #48	; 0x30
   15e52:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   15e56:	9b03      	ldr	r3, [sp, #12]
   15e58:	2b63      	cmp	r3, #99	; 0x63
   15e5a:	f048 0602 	orr.w	r6, r8, #2
   15e5e:	f300 80a6 	bgt.w	15fae <_svfprintf_r+0x197e>
   15e62:	2300      	movs	r3, #0
   15e64:	9307      	str	r3, [sp, #28]
   15e66:	ac37      	add	r4, sp, #220	; 0xdc
   15e68:	ee18 3a90 	vmov	r3, s17
   15e6c:	2b00      	cmp	r3, #0
   15e6e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   15e72:	db2b      	blt.n	15ecc <_svfprintf_r+0x189c>
   15e74:	eeb0 ab48 	vmov.f64	d10, d8
   15e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e7a:	f023 0520 	bic.w	r5, r3, #32
   15e7e:	2300      	movs	r3, #0
   15e80:	9309      	str	r3, [sp, #36]	; 0x24
   15e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15e84:	2b61      	cmp	r3, #97	; 0x61
   15e86:	f47f aaad 	bne.w	153e4 <_svfprintf_r+0xdb4>
   15e8a:	eeb0 0b4a 	vmov.f64	d0, d10
   15e8e:	a81b      	add	r0, sp, #108	; 0x6c
   15e90:	f001 ff3a 	bl	17d08 <frexp>
   15e94:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15e98:	ee20 0b07 	vmul.f64	d0, d0, d7
   15e9c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ea4:	d101      	bne.n	15eaa <_svfprintf_r+0x187a>
   15ea6:	2301      	movs	r3, #1
   15ea8:	931b      	str	r3, [sp, #108]	; 0x6c
   15eaa:	4846      	ldr	r0, [pc, #280]	; (15fc4 <_svfprintf_r+0x1994>)
   15eac:	e721      	b.n	15cf2 <_svfprintf_r+0x16c2>
   15eae:	ee1b 1a10 	vmov	r1, s22
   15eb2:	aa24      	add	r2, sp, #144	; 0x90
   15eb4:	4658      	mov	r0, fp
   15eb6:	f003 fa47 	bl	19348 <__ssprint_r>
   15eba:	2800      	cmp	r0, #0
   15ebc:	f47f a81d 	bne.w	14efa <_svfprintf_r+0x8ca>
   15ec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15ec2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ec4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15ec8:	f7ff b94e 	b.w	15168 <_svfprintf_r+0xb38>
   15ecc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ece:	f023 0520 	bic.w	r5, r3, #32
   15ed2:	232d      	movs	r3, #45	; 0x2d
   15ed4:	9309      	str	r3, [sp, #36]	; 0x24
   15ed6:	eeb1 ab48 	vneg.f64	d10, d8
   15eda:	e7d2      	b.n	15e82 <_svfprintf_r+0x1852>
   15edc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15ede:	920c      	str	r2, [sp, #48]	; 0x30
   15ee0:	2a00      	cmp	r2, #0
   15ee2:	f006 0301 	and.w	r3, r6, #1
   15ee6:	f340 810d 	ble.w	16104 <_svfprintf_r+0x1ad4>
   15eea:	9903      	ldr	r1, [sp, #12]
   15eec:	430b      	orrs	r3, r1
   15eee:	f040 80cf 	bne.w	16090 <_svfprintf_r+0x1a60>
   15ef2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15ef4:	9305      	str	r3, [sp, #20]
   15ef6:	2366      	movs	r3, #102	; 0x66
   15ef8:	930b      	str	r3, [sp, #44]	; 0x2c
   15efa:	0572      	lsls	r2, r6, #21
   15efc:	f100 80a3 	bmi.w	16046 <_svfprintf_r+0x1a16>
   15f00:	9b05      	ldr	r3, [sp, #20]
   15f02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15f06:	9302      	str	r3, [sp, #8]
   15f08:	e76c      	b.n	15de4 <_svfprintf_r+0x17b4>
   15f0a:	ee1b 1a10 	vmov	r1, s22
   15f0e:	aa24      	add	r2, sp, #144	; 0x90
   15f10:	4658      	mov	r0, fp
   15f12:	f003 fa19 	bl	19348 <__ssprint_r>
   15f16:	2800      	cmp	r0, #0
   15f18:	f47e afef 	bne.w	14efa <_svfprintf_r+0x8ca>
   15f1c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   15f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15f20:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15f22:	1b1c      	subs	r4, r3, r4
   15f24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15f28:	f7ff b936 	b.w	15198 <_svfprintf_r+0xb68>
   15f2c:	2358      	movs	r3, #88	; 0x58
   15f2e:	e78d      	b.n	15e4c <_svfprintf_r+0x181c>
   15f30:	2200      	movs	r2, #0
   15f32:	9203      	str	r2, [sp, #12]
   15f34:	f7fe bbda 	b.w	146ec <_svfprintf_r+0xbc>
   15f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15f3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15f3c:	189a      	adds	r2, r3, r2
   15f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15f40:	9205      	str	r2, [sp, #20]
   15f42:	2b00      	cmp	r3, #0
   15f44:	f340 80ab 	ble.w	1609e <_svfprintf_r+0x1a6e>
   15f48:	2367      	movs	r3, #103	; 0x67
   15f4a:	930b      	str	r3, [sp, #44]	; 0x2c
   15f4c:	e7d5      	b.n	15efa <_svfprintf_r+0x18ca>
   15f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15f50:	320f      	adds	r2, #15
   15f52:	b2d2      	uxtb	r2, r2
   15f54:	2101      	movs	r1, #1
   15f56:	e618      	b.n	15b8a <_svfprintf_r+0x155a>
   15f58:	18a0      	adds	r0, r4, r2
   15f5a:	e5fb      	b.n	15b54 <_svfprintf_r+0x1524>
   15f5c:	2900      	cmp	r1, #0
   15f5e:	f040 80a8 	bne.w	160b2 <_svfprintf_r+0x1a82>
   15f62:	2230      	movs	r2, #48	; 0x30
   15f64:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   15f68:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   15f6c:	3330      	adds	r3, #48	; 0x30
   15f6e:	f802 3b01 	strb.w	r3, [r2], #1
   15f72:	ab1e      	add	r3, sp, #120	; 0x78
   15f74:	1ad3      	subs	r3, r2, r3
   15f76:	9314      	str	r3, [sp, #80]	; 0x50
   15f78:	e649      	b.n	15c0e <_svfprintf_r+0x15de>
   15f7a:	3301      	adds	r3, #1
   15f7c:	4912      	ldr	r1, [pc, #72]	; (15fc8 <_svfprintf_r+0x1998>)
   15f7e:	f8ca 5004 	str.w	r5, [sl, #4]
   15f82:	442a      	add	r2, r5
   15f84:	2b07      	cmp	r3, #7
   15f86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15f8a:	f8ca 1000 	str.w	r1, [sl]
   15f8e:	f77f ac33 	ble.w	157f8 <_svfprintf_r+0x11c8>
   15f92:	ee1b 1a10 	vmov	r1, s22
   15f96:	aa24      	add	r2, sp, #144	; 0x90
   15f98:	4658      	mov	r0, fp
   15f9a:	f003 f9d5 	bl	19348 <__ssprint_r>
   15f9e:	2800      	cmp	r0, #0
   15fa0:	f47e afab 	bne.w	14efa <_svfprintf_r+0x8ca>
   15fa4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15fa8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15fac:	e426      	b.n	157fc <_svfprintf_r+0x11cc>
   15fae:	1c59      	adds	r1, r3, #1
   15fb0:	4658      	mov	r0, fp
   15fb2:	f7fa fc11 	bl	107d8 <_malloc_r>
   15fb6:	4604      	mov	r4, r0
   15fb8:	b350      	cbz	r0, 16010 <_svfprintf_r+0x19e0>
   15fba:	9007      	str	r0, [sp, #28]
   15fbc:	e754      	b.n	15e68 <_svfprintf_r+0x1838>
   15fbe:	bf00      	nop
   15fc0:	20001224 	.word	0x20001224
   15fc4:	20001210 	.word	0x20001210
   15fc8:	20008a64 	.word	0x20008a64
   15fcc:	66666667 	.word	0x66666667
   15fd0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   15fd4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   15fd8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   15fdc:	4561      	cmp	r1, ip
   15fde:	4613      	mov	r3, r2
   15fe0:	d10a      	bne.n	15ff8 <_svfprintf_r+0x19c8>
   15fe2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   15fe6:	f803 ec01 	strb.w	lr, [r3, #-1]
   15fea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15fec:	1e59      	subs	r1, r3, #1
   15fee:	9122      	str	r1, [sp, #136]	; 0x88
   15ff0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   15ff4:	458c      	cmp	ip, r1
   15ff6:	d0f6      	beq.n	15fe6 <_svfprintf_r+0x19b6>
   15ff8:	2939      	cmp	r1, #57	; 0x39
   15ffa:	bf16      	itet	ne
   15ffc:	3101      	addne	r1, #1
   15ffe:	7a81      	ldrbeq	r1, [r0, #10]
   16000:	b2c9      	uxtbne	r1, r1
   16002:	f803 1c01 	strb.w	r1, [r3, #-1]
   16006:	e6ae      	b.n	15d66 <_svfprintf_r+0x1736>
   16008:	2300      	movs	r3, #0
   1600a:	4690      	mov	r8, r2
   1600c:	9307      	str	r3, [sp, #28]
   1600e:	e760      	b.n	15ed2 <_svfprintf_r+0x18a2>
   16010:	ee1b 2a10 	vmov	r2, s22
   16014:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   16018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1601c:	8193      	strh	r3, [r2, #12]
   1601e:	f7fe bc16 	b.w	1484e <_svfprintf_r+0x21e>
   16022:	07f5      	lsls	r5, r6, #31
   16024:	f57f adfe 	bpl.w	15c24 <_svfprintf_r+0x15f4>
   16028:	e5f8      	b.n	15c1c <_svfprintf_r+0x15ec>
   1602a:	9305      	str	r3, [sp, #20]
   1602c:	e6ce      	b.n	15dcc <_svfprintf_r+0x179c>
   1602e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   16032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16036:	f43f ad8b 	beq.w	15b50 <_svfprintf_r+0x1520>
   1603a:	f1c2 0201 	rsb	r2, r2, #1
   1603e:	921b      	str	r2, [sp, #108]	; 0x6c
   16040:	e587      	b.n	15b52 <_svfprintf_r+0x1522>
   16042:	2367      	movs	r3, #103	; 0x67
   16044:	930b      	str	r3, [sp, #44]	; 0x2c
   16046:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16048:	780b      	ldrb	r3, [r1, #0]
   1604a:	2bff      	cmp	r3, #255	; 0xff
   1604c:	d079      	beq.n	16142 <_svfprintf_r+0x1b12>
   1604e:	2500      	movs	r5, #0
   16050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16052:	4628      	mov	r0, r5
   16054:	e003      	b.n	1605e <_svfprintf_r+0x1a2e>
   16056:	3001      	adds	r0, #1
   16058:	3101      	adds	r1, #1
   1605a:	2bff      	cmp	r3, #255	; 0xff
   1605c:	d008      	beq.n	16070 <_svfprintf_r+0x1a40>
   1605e:	4293      	cmp	r3, r2
   16060:	da06      	bge.n	16070 <_svfprintf_r+0x1a40>
   16062:	1ad2      	subs	r2, r2, r3
   16064:	784b      	ldrb	r3, [r1, #1]
   16066:	2b00      	cmp	r3, #0
   16068:	d1f5      	bne.n	16056 <_svfprintf_r+0x1a26>
   1606a:	780b      	ldrb	r3, [r1, #0]
   1606c:	3501      	adds	r5, #1
   1606e:	e7f4      	b.n	1605a <_svfprintf_r+0x1a2a>
   16070:	920c      	str	r2, [sp, #48]	; 0x30
   16072:	9113      	str	r1, [sp, #76]	; 0x4c
   16074:	900d      	str	r0, [sp, #52]	; 0x34
   16076:	950f      	str	r5, [sp, #60]	; 0x3c
   16078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1607a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1607c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1607e:	4413      	add	r3, r2
   16080:	9a05      	ldr	r2, [sp, #20]
   16082:	fb01 2303 	mla	r3, r1, r3, r2
   16086:	9305      	str	r3, [sp, #20]
   16088:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1608c:	9302      	str	r3, [sp, #8]
   1608e:	e5d5      	b.n	15c3c <_svfprintf_r+0x160c>
   16090:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16092:	18d3      	adds	r3, r2, r3
   16094:	4419      	add	r1, r3
   16096:	2366      	movs	r3, #102	; 0x66
   16098:	9105      	str	r1, [sp, #20]
   1609a:	930b      	str	r3, [sp, #44]	; 0x2c
   1609c:	e72d      	b.n	15efa <_svfprintf_r+0x18ca>
   1609e:	f1c3 0301 	rsb	r3, r3, #1
   160a2:	441a      	add	r2, r3
   160a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   160a8:	9302      	str	r3, [sp, #8]
   160aa:	2367      	movs	r3, #103	; 0x67
   160ac:	9205      	str	r2, [sp, #20]
   160ae:	930b      	str	r3, [sp, #44]	; 0x2c
   160b0:	e698      	b.n	15de4 <_svfprintf_r+0x17b4>
   160b2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   160b6:	e759      	b.n	15f6c <_svfprintf_r+0x193c>
   160b8:	9b03      	ldr	r3, [sp, #12]
   160ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
   160be:	f8dd 801c 	ldr.w	r8, [sp, #28]
   160c2:	9305      	str	r3, [sp, #20]
   160c4:	e4b4      	b.n	15a30 <_svfprintf_r+0x1400>
   160c6:	ee18 3a90 	vmov	r3, s17
   160ca:	2b00      	cmp	r3, #0
   160cc:	bfb4      	ite	lt
   160ce:	212d      	movlt	r1, #45	; 0x2d
   160d0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   160d4:	4c25      	ldr	r4, [pc, #148]	; (1616c <_svfprintf_r+0x1b3c>)
   160d6:	4b26      	ldr	r3, [pc, #152]	; (16170 <_svfprintf_r+0x1b40>)
   160d8:	bfb8      	it	lt
   160da:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   160de:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   160e2:	f7fe bc79 	b.w	149d8 <_svfprintf_r+0x3a8>
   160e6:	9b03      	ldr	r3, [sp, #12]
   160e8:	9302      	str	r3, [sp, #8]
   160ea:	9305      	str	r3, [sp, #20]
   160ec:	2373      	movs	r3, #115	; 0x73
   160ee:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   160f2:	9003      	str	r0, [sp, #12]
   160f4:	900f      	str	r0, [sp, #60]	; 0x3c
   160f6:	900d      	str	r0, [sp, #52]	; 0x34
   160f8:	930b      	str	r3, [sp, #44]	; 0x2c
   160fa:	f7fe bc7a 	b.w	149f2 <_svfprintf_r+0x3c2>
   160fe:	2302      	movs	r3, #2
   16100:	9314      	str	r3, [sp, #80]	; 0x50
   16102:	e584      	b.n	15c0e <_svfprintf_r+0x15de>
   16104:	9a03      	ldr	r2, [sp, #12]
   16106:	4313      	orrs	r3, r2
   16108:	d105      	bne.n	16116 <_svfprintf_r+0x1ae6>
   1610a:	2301      	movs	r3, #1
   1610c:	2266      	movs	r2, #102	; 0x66
   1610e:	9302      	str	r3, [sp, #8]
   16110:	920b      	str	r2, [sp, #44]	; 0x2c
   16112:	9305      	str	r3, [sp, #20]
   16114:	e666      	b.n	15de4 <_svfprintf_r+0x17b4>
   16116:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16118:	3301      	adds	r3, #1
   1611a:	441a      	add	r2, r3
   1611c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   16120:	9302      	str	r3, [sp, #8]
   16122:	2366      	movs	r3, #102	; 0x66
   16124:	9205      	str	r2, [sp, #20]
   16126:	930b      	str	r3, [sp, #44]	; 0x2c
   16128:	e65c      	b.n	15de4 <_svfprintf_r+0x17b4>
   1612a:	9a08      	ldr	r2, [sp, #32]
   1612c:	f899 3001 	ldrb.w	r3, [r9, #1]
   16130:	4689      	mov	r9, r1
   16132:	f852 1b04 	ldr.w	r1, [r2], #4
   16136:	9208      	str	r2, [sp, #32]
   16138:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1613c:	9103      	str	r1, [sp, #12]
   1613e:	f7fe bad3 	b.w	146e8 <_svfprintf_r+0xb8>
   16142:	2300      	movs	r3, #0
   16144:	930f      	str	r3, [sp, #60]	; 0x3c
   16146:	930d      	str	r3, [sp, #52]	; 0x34
   16148:	e796      	b.n	16078 <_svfprintf_r+0x1a48>
   1614a:	230c      	movs	r3, #12
   1614c:	f8cb 3000 	str.w	r3, [fp]
   16150:	f04f 33ff 	mov.w	r3, #4294967295
   16154:	9304      	str	r3, [sp, #16]
   16156:	f7fe bb81 	b.w	1485c <_svfprintf_r+0x22c>
   1615a:	ee1b 2a10 	vmov	r2, s22
   1615e:	8993      	ldrh	r3, [r2, #12]
   16160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16164:	8193      	strh	r3, [r2, #12]
   16166:	f7fe bec8 	b.w	14efa <_svfprintf_r+0x8ca>
   1616a:	bf00      	nop
   1616c:	2000120c 	.word	0x2000120c
   16170:	20000bfc 	.word	0x20000bfc

00016174 <__ssvfscanf_r>:
   16174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16178:	ed2d 8b02 	vpush	{d8}
   1617c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   16180:	468b      	mov	fp, r1
   16182:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   16186:	af02      	add	r7, sp, #8
   16188:	048c      	lsls	r4, r1, #18
   1618a:	4681      	mov	r9, r0
   1618c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1618e:	633b      	str	r3, [r7, #48]	; 0x30
   16190:	d409      	bmi.n	161a6 <__ssvfscanf_r+0x32>
   16192:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   16196:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1619a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1619e:	f8ab 100c 	strh.w	r1, [fp, #12]
   161a2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   161a6:	2300      	movs	r3, #0
   161a8:	461c      	mov	r4, r3
   161aa:	2208      	movs	r2, #8
   161ac:	4619      	mov	r1, r3
   161ae:	f107 0058 	add.w	r0, r7, #88	; 0x58
   161b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   161b4:	46a2      	mov	sl, r4
   161b6:	f7fc fa7f 	bl	126b8 <memset>
   161ba:	643c      	str	r4, [r7, #64]	; 0x40
   161bc:	627c      	str	r4, [r7, #36]	; 0x24
   161be:	63bc      	str	r4, [r7, #56]	; 0x38
   161c0:	647c      	str	r4, [r7, #68]	; 0x44
   161c2:	4b83      	ldr	r3, [pc, #524]	; (163d0 <__ssvfscanf_r+0x25c>)
   161c4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   161c8:	f7fc fb96 	bl	128f8 <__locale_mb_cur_max>
   161cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
   161d0:	4603      	mov	r3, r0
   161d2:	9200      	str	r2, [sp, #0]
   161d4:	f107 0154 	add.w	r1, r7, #84	; 0x54
   161d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   161da:	4648      	mov	r0, r9
   161dc:	47a0      	blx	r4
   161de:	1e05      	subs	r5, r0, #0
   161e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   161e2:	db33      	blt.n	1624c <__ssvfscanf_r+0xd8>
   161e4:	442b      	add	r3, r5
   161e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   161e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   161ea:	462e      	mov	r6, r5
   161ec:	2b00      	cmp	r3, #0
   161ee:	f000 80b6 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   161f2:	2d01      	cmp	r5, #1
   161f4:	d038      	beq.n	16268 <__ssvfscanf_r+0xf4>
   161f6:	2b25      	cmp	r3, #37	; 0x25
   161f8:	d040      	beq.n	1627c <__ssvfscanf_r+0x108>
   161fa:	2d00      	cmp	r5, #0
   161fc:	d0e1      	beq.n	161c2 <__ssvfscanf_r+0x4e>
   161fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16200:	1b9e      	subs	r6, r3, r6
   16202:	f8db 3004 	ldr.w	r3, [fp, #4]
   16206:	1e74      	subs	r4, r6, #1
   16208:	2b00      	cmp	r3, #0
   1620a:	f340 8098 	ble.w	1633e <__ssvfscanf_r+0x1ca>
   1620e:	f8db 1000 	ldr.w	r1, [fp]
   16212:	f894 c001 	ldrb.w	ip, [r4, #1]
   16216:	f891 e000 	ldrb.w	lr, [r1]
   1621a:	1ca3      	adds	r3, r4, #2
   1621c:	eb0a 0003 	add.w	r0, sl, r3
   16220:	45e6      	cmp	lr, ip
   16222:	f101 0101 	add.w	r1, r1, #1
   16226:	eba3 0206 	sub.w	r2, r3, r6
   1622a:	f104 0401 	add.w	r4, r4, #1
   1622e:	eba0 0006 	sub.w	r0, r0, r6
   16232:	f040 8094 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   16236:	f8db 3004 	ldr.w	r3, [fp, #4]
   1623a:	f8cb 1000 	str.w	r1, [fp]
   1623e:	3b01      	subs	r3, #1
   16240:	42aa      	cmp	r2, r5
   16242:	f8cb 3004 	str.w	r3, [fp, #4]
   16246:	dbdf      	blt.n	16208 <__ssvfscanf_r+0x94>
   16248:	4682      	mov	sl, r0
   1624a:	e7ba      	b.n	161c2 <__ssvfscanf_r+0x4e>
   1624c:	3301      	adds	r3, #1
   1624e:	64fb      	str	r3, [r7, #76]	; 0x4c
   16250:	2208      	movs	r2, #8
   16252:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   16256:	2100      	movs	r1, #0
   16258:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1625c:	657b      	str	r3, [r7, #84]	; 0x54
   1625e:	f7fc fa2b 	bl	126b8 <memset>
   16262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16264:	2b00      	cmp	r3, #0
   16266:	d07a      	beq.n	1635e <__ssvfscanf_r+0x1ea>
   16268:	4e5a      	ldr	r6, [pc, #360]	; (163d4 <__ssvfscanf_r+0x260>)
   1626a:	5cf2      	ldrb	r2, [r6, r3]
   1626c:	0710      	lsls	r0, r2, #28
   1626e:	f100 851c 	bmi.w	16caa <__ssvfscanf_r+0xb36>
   16272:	2b25      	cmp	r3, #37	; 0x25
   16274:	f040 8086 	bne.w	16384 <__ssvfscanf_r+0x210>
   16278:	2501      	movs	r5, #1
   1627a:	462e      	mov	r6, r5
   1627c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1627e:	2400      	movs	r4, #0
   16280:	7802      	ldrb	r2, [r0, #0]
   16282:	46a0      	mov	r8, r4
   16284:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   16288:	1c41      	adds	r1, r0, #1
   1628a:	2b55      	cmp	r3, #85	; 0x55
   1628c:	d867      	bhi.n	1635e <__ssvfscanf_r+0x1ea>
   1628e:	e8df f013 	tbh	[pc, r3, lsl #1]
   16292:	070a      	.short	0x070a
   16294:	00660066 	.word	0x00660066
   16298:	00660066 	.word	0x00660066
   1629c:	00660701 	.word	0x00660701
   162a0:	00660066 	.word	0x00660066
   162a4:	00660066 	.word	0x00660066
   162a8:	060c060c 	.word	0x060c060c
   162ac:	060c060c 	.word	0x060c060c
   162b0:	060c060c 	.word	0x060c060c
   162b4:	060c060c 	.word	0x060c060c
   162b8:	060c060c 	.word	0x060c060c
   162bc:	00660066 	.word	0x00660066
   162c0:	00660066 	.word	0x00660066
   162c4:	00660066 	.word	0x00660066
   162c8:	06180066 	.word	0x06180066
   162cc:	048e0066 	.word	0x048e0066
   162d0:	061804c9 	.word	0x061804c9
   162d4:	06180618 	.word	0x06180618
   162d8:	00660066 	.word	0x00660066
   162dc:	00660066 	.word	0x00660066
   162e0:	00660082 	.word	0x00660082
   162e4:	04bf0066 	.word	0x04bf0066
   162e8:	00660066 	.word	0x00660066
   162ec:	00890066 	.word	0x00890066
   162f0:	00660066 	.word	0x00660066
   162f4:	00660066 	.word	0x00660066
   162f8:	0066066b 	.word	0x0066066b
   162fc:	06dd0066 	.word	0x06dd0066
   16300:	00660066 	.word	0x00660066
   16304:	00660066 	.word	0x00660066
   16308:	06180066 	.word	0x06180066
   1630c:	04900066 	.word	0x04900066
   16310:	061804cb 	.word	0x061804cb
   16314:	06180618 	.word	0x06180618
   16318:	06d206be 	.word	0x06d206be
   1631c:	00660082 	.word	0x00660082
   16320:	06f306e7 	.word	0x06f306e7
   16324:	04c106ac 	.word	0x04c106ac
   16328:	006606da 	.word	0x006606da
   1632c:	008b0066 	.word	0x008b0066
   16330:	06ca007d 	.word	0x06ca007d
   16334:	00660066 	.word	0x00660066
   16338:	0066066b 	.word	0x0066066b
   1633c:	007d      	.short	0x007d
   1633e:	4659      	mov	r1, fp
   16340:	4648      	mov	r0, r9
   16342:	f003 f8c1 	bl	194c8 <__ssrefill_r>
   16346:	2800      	cmp	r0, #0
   16348:	f43f af61 	beq.w	1620e <__ssvfscanf_r+0x9a>
   1634c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1634e:	2b00      	cmp	r3, #0
   16350:	f001 8052 	beq.w	173f8 <__ssvfscanf_r+0x1284>
   16354:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   16358:	065a      	lsls	r2, r3, #25
   1635a:	f101 804d 	bmi.w	173f8 <__ssvfscanf_r+0x1284>
   1635e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16360:	b143      	cbz	r3, 16374 <__ssvfscanf_r+0x200>
   16362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16364:	f8d3 8000 	ldr.w	r8, [r3]
   16368:	f1b8 0f00 	cmp.w	r8, #0
   1636c:	d002      	beq.n	16374 <__ssvfscanf_r+0x200>
   1636e:	4640      	mov	r0, r8
   16370:	f7fa fa2a 	bl	107c8 <free>
   16374:	6c78      	ldr	r0, [r7, #68]	; 0x44
   16376:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   1637a:	46bd      	mov	sp, r7
   1637c:	ecbd 8b02 	vpop	{d8}
   16380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16386:	2501      	movs	r5, #1
   16388:	1e5e      	subs	r6, r3, #1
   1638a:	e73a      	b.n	16202 <__ssvfscanf_r+0x8e>
   1638c:	0723      	lsls	r3, r4, #28
   1638e:	d1e6      	bne.n	1635e <__ssvfscanf_r+0x1ea>
   16390:	7842      	ldrb	r2, [r0, #1]
   16392:	4608      	mov	r0, r1
   16394:	e776      	b.n	16284 <__ssvfscanf_r+0x110>
   16396:	0722      	lsls	r2, r4, #28
   16398:	d1e1      	bne.n	1635e <__ssvfscanf_r+0x1ea>
   1639a:	7842      	ldrb	r2, [r0, #1]
   1639c:	f044 0402 	orr.w	r4, r4, #2
   163a0:	4608      	mov	r0, r1
   163a2:	e76f      	b.n	16284 <__ssvfscanf_r+0x110>
   163a4:	f044 0401 	orr.w	r4, r4, #1
   163a8:	64f9      	str	r1, [r7, #76]	; 0x4c
   163aa:	2502      	movs	r5, #2
   163ac:	f8db 3004 	ldr.w	r3, [fp, #4]
   163b0:	2b00      	cmp	r3, #0
   163b2:	f340 8408 	ble.w	16bc6 <__ssvfscanf_r+0xa52>
   163b6:	0660      	lsls	r0, r4, #25
   163b8:	f140 840f 	bpl.w	16bda <__ssvfscanf_r+0xa66>
   163bc:	1e6b      	subs	r3, r5, #1
   163be:	2b03      	cmp	r3, #3
   163c0:	f201 80eb 	bhi.w	1759a <__ssvfscanf_r+0x1426>
   163c4:	e8df f013 	tbh	[pc, r3, lsl #1]
   163c8:	01f1027b 	.word	0x01f1027b
   163cc:	0008014b 	.word	0x0008014b
   163d0:	20008f94 	.word	0x20008f94
   163d4:	20001075 	.word	0x20001075
   163d8:	4648      	mov	r0, r9
   163da:	f001 fc8f 	bl	17cfc <_localeconv_r>
   163de:	6803      	ldr	r3, [r0, #0]
   163e0:	623b      	str	r3, [r7, #32]
   163e2:	f108 33ff 	add.w	r3, r8, #4294967295
   163e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   163ea:	f240 855a 	bls.w	16ea2 <__ssvfscanf_r+0xd2e>
   163ee:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   163f2:	eb08 0305 	add.w	r3, r8, r5
   163f6:	613b      	str	r3, [r7, #16]
   163f8:	f240 185d 	movw	r8, #349	; 0x15d
   163fc:	2600      	movs	r6, #0
   163fe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16402:	ee08 9a10 	vmov	s16, r9
   16406:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1640a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1640c:	637e      	str	r6, [r7, #52]	; 0x34
   1640e:	61fe      	str	r6, [r7, #28]
   16410:	64be      	str	r6, [r7, #72]	; 0x48
   16412:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   16416:	62bb      	str	r3, [r7, #40]	; 0x28
   16418:	461d      	mov	r5, r3
   1641a:	4646      	mov	r6, r8
   1641c:	f8db 1000 	ldr.w	r1, [fp]
   16420:	780a      	ldrb	r2, [r1, #0]
   16422:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   16426:	2b4e      	cmp	r3, #78	; 0x4e
   16428:	d850      	bhi.n	164cc <__ssvfscanf_r+0x358>
   1642a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1642e:	037e      	.short	0x037e
   16430:	037e004f 	.word	0x037e004f
   16434:	004f004f 	.word	0x004f004f
   16438:	00a600a3 	.word	0x00a600a3
   1643c:	00a600a6 	.word	0x00a600a6
   16440:	00a600a6 	.word	0x00a600a6
   16444:	00a600a6 	.word	0x00a600a6
   16448:	00a600a6 	.word	0x00a600a6
   1644c:	004f004f 	.word	0x004f004f
   16450:	004f004f 	.word	0x004f004f
   16454:	004f004f 	.word	0x004f004f
   16458:	0374004f 	.word	0x0374004f
   1645c:	030b030b 	.word	0x030b030b
   16460:	039e030b 	.word	0x039e030b
   16464:	004f0394 	.word	0x004f0394
   16468:	0384004f 	.word	0x0384004f
   1646c:	004f004f 	.word	0x004f004f
   16470:	004f004f 	.word	0x004f004f
   16474:	004f035d 	.word	0x004f035d
   16478:	004f033a 	.word	0x004f033a
   1647c:	004f004f 	.word	0x004f004f
   16480:	004f0333 	.word	0x004f0333
   16484:	004f004f 	.word	0x004f004f
   16488:	036d031e 	.word	0x036d031e
   1648c:	004f004f 	.word	0x004f004f
   16490:	004f004f 	.word	0x004f004f
   16494:	004f004f 	.word	0x004f004f
   16498:	0374004f 	.word	0x0374004f
   1649c:	030b030b 	.word	0x030b030b
   164a0:	039e030b 	.word	0x039e030b
   164a4:	004f0394 	.word	0x004f0394
   164a8:	0384004f 	.word	0x0384004f
   164ac:	004f004f 	.word	0x004f004f
   164b0:	004f004f 	.word	0x004f004f
   164b4:	004f035d 	.word	0x004f035d
   164b8:	004f033a 	.word	0x004f033a
   164bc:	004f004f 	.word	0x004f004f
   164c0:	004f0333 	.word	0x004f0333
   164c4:	004f004f 	.word	0x004f004f
   164c8:	036d031e 	.word	0x036d031e
   164cc:	05a0      	lsls	r0, r4, #22
   164ce:	d56f      	bpl.n	165b0 <__ssvfscanf_r+0x43c>
   164d0:	6a38      	ldr	r0, [r7, #32]
   164d2:	7803      	ldrb	r3, [r0, #0]
   164d4:	4293      	cmp	r3, r2
   164d6:	d16b      	bne.n	165b0 <__ssvfscanf_r+0x43c>
   164d8:	e9c7 4502 	strd	r4, r5, [r7, #8]
   164dc:	607e      	str	r6, [r7, #4]
   164de:	4681      	mov	r9, r0
   164e0:	ee18 6a10 	vmov	r6, s16
   164e4:	f04f 0800 	mov.w	r8, #0
   164e8:	465c      	mov	r4, fp
   164ea:	e007      	b.n	164fc <__ssvfscanf_r+0x388>
   164ec:	6021      	str	r1, [r4, #0]
   164ee:	f891 e000 	ldrb.w	lr, [r1]
   164f2:	f899 0000 	ldrb.w	r0, [r9]
   164f6:	4586      	cmp	lr, r0
   164f8:	d11c      	bne.n	16534 <__ssvfscanf_r+0x3c0>
   164fa:	46da      	mov	sl, fp
   164fc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   16500:	4645      	mov	r5, r8
   16502:	f10a 0b01 	add.w	fp, sl, #1
   16506:	3101      	adds	r1, #1
   16508:	f108 0801 	add.w	r8, r8, #1
   1650c:	2800      	cmp	r0, #0
   1650e:	f000 8664 	beq.w	171da <__ssvfscanf_r+0x1066>
   16512:	6860      	ldr	r0, [r4, #4]
   16514:	3801      	subs	r0, #1
   16516:	2800      	cmp	r0, #0
   16518:	6060      	str	r0, [r4, #4]
   1651a:	dce7      	bgt.n	164ec <__ssvfscanf_r+0x378>
   1651c:	4621      	mov	r1, r4
   1651e:	4630      	mov	r0, r6
   16520:	f002 ffd2 	bl	194c8 <__ssrefill_r>
   16524:	b930      	cbnz	r0, 16534 <__ssvfscanf_r+0x3c0>
   16526:	6821      	ldr	r1, [r4, #0]
   16528:	f899 0000 	ldrb.w	r0, [r9]
   1652c:	f891 e000 	ldrb.w	lr, [r1]
   16530:	4586      	cmp	lr, r0
   16532:	d0e2      	beq.n	164fa <__ssvfscanf_r+0x386>
   16534:	46a3      	mov	fp, r4
   16536:	6a3a      	ldr	r2, [r7, #32]
   16538:	68bc      	ldr	r4, [r7, #8]
   1653a:	613d      	str	r5, [r7, #16]
   1653c:	462b      	mov	r3, r5
   1653e:	46b1      	mov	r9, r6
   16540:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16542:	68fd      	ldr	r5, [r7, #12]
   16544:	64bd      	str	r5, [r7, #72]	; 0x48
   16546:	3301      	adds	r3, #1
   16548:	465d      	mov	r5, fp
   1654a:	eb02 0803 	add.w	r8, r2, r3
   1654e:	46b3      	mov	fp, r6
   16550:	4626      	mov	r6, r4
   16552:	4614      	mov	r4, r2
   16554:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   16558:	462a      	mov	r2, r5
   1655a:	4648      	mov	r0, r9
   1655c:	f002 ff74 	bl	19448 <_sungetc_r>
   16560:	4544      	cmp	r4, r8
   16562:	d1f7      	bne.n	16554 <__ssvfscanf_r+0x3e0>
   16564:	693b      	ldr	r3, [r7, #16]
   16566:	4634      	mov	r4, r6
   16568:	ebaa 0a03 	sub.w	sl, sl, r3
   1656c:	465e      	mov	r6, fp
   1656e:	46ab      	mov	fp, r5
   16570:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16572:	e020      	b.n	165b6 <__ssvfscanf_r+0x442>
   16574:	05e0      	lsls	r0, r4, #23
   16576:	f100 8501 	bmi.w	16f7c <__ssvfscanf_r+0xe08>
   1657a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1657c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1657e:	42d9      	cmn	r1, r3
   16580:	d116      	bne.n	165b0 <__ssvfscanf_r+0x43c>
   16582:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   16586:	f805 2b01 	strb.w	r2, [r5], #1
   1658a:	3e01      	subs	r6, #1
   1658c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16590:	3b01      	subs	r3, #1
   16592:	2b00      	cmp	r3, #0
   16594:	f10a 0a01 	add.w	sl, sl, #1
   16598:	f8cb 3004 	str.w	r3, [fp, #4]
   1659c:	f340 836f 	ble.w	16c7e <__ssvfscanf_r+0xb0a>
   165a0:	f8db 3000 	ldr.w	r3, [fp]
   165a4:	3301      	adds	r3, #1
   165a6:	f8cb 3000 	str.w	r3, [fp]
   165aa:	2e00      	cmp	r6, #0
   165ac:	f47f af36 	bne.w	1641c <__ssvfscanf_r+0x2a8>
   165b0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   165b2:	ee18 9a10 	vmov	r9, s16
   165b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   165b8:	2b00      	cmp	r3, #0
   165ba:	f040 82dc 	bne.w	16b76 <__ssvfscanf_r+0xa02>
   165be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   165c0:	3b01      	subs	r3, #1
   165c2:	2b01      	cmp	r3, #1
   165c4:	f241 8016 	bls.w	175f4 <__ssvfscanf_r+0x1480>
   165c8:	1e73      	subs	r3, r6, #1
   165ca:	2b06      	cmp	r3, #6
   165cc:	f240 8627 	bls.w	1721e <__ssvfscanf_r+0x10aa>
   165d0:	05e3      	lsls	r3, r4, #23
   165d2:	d51b      	bpl.n	1660c <__ssvfscanf_r+0x498>
   165d4:	0566      	lsls	r6, r4, #21
   165d6:	f101 80b5 	bmi.w	17744 <__ssvfscanf_r+0x15d0>
   165da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   165de:	2965      	cmp	r1, #101	; 0x65
   165e0:	f105 33ff 	add.w	r3, r5, #4294967295
   165e4:	f10a 36ff 	add.w	r6, sl, #4294967295
   165e8:	d00a      	beq.n	16600 <__ssvfscanf_r+0x48c>
   165ea:	2945      	cmp	r1, #69	; 0x45
   165ec:	d008      	beq.n	16600 <__ssvfscanf_r+0x48c>
   165ee:	465a      	mov	r2, fp
   165f0:	4648      	mov	r0, r9
   165f2:	f002 ff29 	bl	19448 <_sungetc_r>
   165f6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   165fa:	f1aa 0602 	sub.w	r6, sl, #2
   165fe:	1eab      	subs	r3, r5, #2
   16600:	465a      	mov	r2, fp
   16602:	4648      	mov	r0, r9
   16604:	46b2      	mov	sl, r6
   16606:	461d      	mov	r5, r3
   16608:	f002 ff1e 	bl	19448 <_sungetc_r>
   1660c:	f014 0210 	ands.w	r2, r4, #16
   16610:	f47f add7 	bne.w	161c2 <__ssvfscanf_r+0x4e>
   16614:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   16618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1661c:	702a      	strb	r2, [r5, #0]
   1661e:	f000 84d2 	beq.w	16fc6 <__ssvfscanf_r+0xe52>
   16622:	69bb      	ldr	r3, [r7, #24]
   16624:	2b00      	cmp	r3, #0
   16626:	f040 872c 	bne.w	17482 <__ssvfscanf_r+0x130e>
   1662a:	4648      	mov	r0, r9
   1662c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1662e:	2200      	movs	r2, #0
   16630:	f7fb fcbe 	bl	11fb0 <_strtod_r>
   16634:	07e0      	lsls	r0, r4, #31
   16636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16638:	f100 85c9 	bmi.w	171ce <__ssvfscanf_r+0x105a>
   1663c:	07a1      	lsls	r1, r4, #30
   1663e:	f100 85c6 	bmi.w	171ce <__ssvfscanf_r+0x105a>
   16642:	eeb4 0b40 	vcmp.f64	d0, d0
   16646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1664a:	f853 4b04 	ldr.w	r4, [r3], #4
   1664e:	f180 86f4 	bvs.w	1743a <__ssvfscanf_r+0x12c6>
   16652:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   16656:	633b      	str	r3, [r7, #48]	; 0x30
   16658:	ed84 0a00 	vstr	s0, [r4]
   1665c:	e3a2      	b.n	16da4 <__ssvfscanf_r+0xc30>
   1665e:	f108 33ff 	add.w	r3, r8, #4294967295
   16662:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   16666:	f240 83a2 	bls.w	16dae <__ssvfscanf_r+0xc3a>
   1666a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1666e:	eb08 0302 	add.w	r3, r8, r2
   16672:	63fb      	str	r3, [r7, #60]	; 0x3c
   16674:	f240 185d 	movw	r8, #349	; 0x15d
   16678:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1667c:	2200      	movs	r2, #0
   1667e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   16680:	62bb      	str	r3, [r7, #40]	; 0x28
   16682:	4659      	mov	r1, fp
   16684:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   16688:	46d3      	mov	fp, sl
   1668a:	461d      	mov	r5, r3
   1668c:	4692      	mov	sl, r2
   1668e:	680a      	ldr	r2, [r1, #0]
   16690:	7810      	ldrb	r0, [r2, #0]
   16692:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   16696:	2b4d      	cmp	r3, #77	; 0x4d
   16698:	d860      	bhi.n	1675c <__ssvfscanf_r+0x5e8>
   1669a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1669e:	0282      	.short	0x0282
   166a0:	0282005f 	.word	0x0282005f
   166a4:	005f005f 	.word	0x005f005f
   166a8:	01e002cd 	.word	0x01e002cd
   166ac:	01e001e0 	.word	0x01e001e0
   166b0:	01e001e0 	.word	0x01e001e0
   166b4:	01e001e0 	.word	0x01e001e0
   166b8:	026f026f 	.word	0x026f026f
   166bc:	005f005f 	.word	0x005f005f
   166c0:	005f005f 	.word	0x005f005f
   166c4:	005f005f 	.word	0x005f005f
   166c8:	004e005f 	.word	0x004e005f
   166cc:	004e004e 	.word	0x004e004e
   166d0:	004e004e 	.word	0x004e004e
   166d4:	005f004e 	.word	0x005f004e
   166d8:	005f005f 	.word	0x005f005f
   166dc:	005f005f 	.word	0x005f005f
   166e0:	005f005f 	.word	0x005f005f
   166e4:	005f005f 	.word	0x005f005f
   166e8:	005f005f 	.word	0x005f005f
   166ec:	005f005f 	.word	0x005f005f
   166f0:	005f005f 	.word	0x005f005f
   166f4:	005f005f 	.word	0x005f005f
   166f8:	005f0276 	.word	0x005f0276
   166fc:	005f005f 	.word	0x005f005f
   16700:	005f005f 	.word	0x005f005f
   16704:	005f005f 	.word	0x005f005f
   16708:	004e005f 	.word	0x004e005f
   1670c:	004e004e 	.word	0x004e004e
   16710:	004e004e 	.word	0x004e004e
   16714:	005f004e 	.word	0x005f004e
   16718:	005f005f 	.word	0x005f005f
   1671c:	005f005f 	.word	0x005f005f
   16720:	005f005f 	.word	0x005f005f
   16724:	005f005f 	.word	0x005f005f
   16728:	005f005f 	.word	0x005f005f
   1672c:	005f005f 	.word	0x005f005f
   16730:	005f005f 	.word	0x005f005f
   16734:	005f005f 	.word	0x005f005f
   16738:	0276      	.short	0x0276
   1673a:	2e0a      	cmp	r6, #10
   1673c:	dd0e      	ble.n	1675c <__ssvfscanf_r+0x5e8>
   1673e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   16742:	684b      	ldr	r3, [r1, #4]
   16744:	f805 0b01 	strb.w	r0, [r5], #1
   16748:	3b01      	subs	r3, #1
   1674a:	2b00      	cmp	r3, #0
   1674c:	604b      	str	r3, [r1, #4]
   1674e:	f340 828d 	ble.w	16c6c <__ssvfscanf_r+0xaf8>
   16752:	3201      	adds	r2, #1
   16754:	600a      	str	r2, [r1, #0]
   16756:	f1b8 0801 	subs.w	r8, r8, #1
   1675a:	d198      	bne.n	1668e <__ssvfscanf_r+0x51a>
   1675c:	05e0      	lsls	r0, r4, #23
   1675e:	46d0      	mov	r8, sl
   16760:	63be      	str	r6, [r7, #56]	; 0x38
   16762:	46da      	mov	sl, fp
   16764:	468b      	mov	fp, r1
   16766:	d507      	bpl.n	16778 <__ssvfscanf_r+0x604>
   16768:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1676a:	429d      	cmp	r5, r3
   1676c:	f200 8422 	bhi.w	16fb4 <__ssvfscanf_r+0xe40>
   16770:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16772:	429d      	cmp	r5, r3
   16774:	f43f adf3 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   16778:	f014 0210 	ands.w	r2, r4, #16
   1677c:	d110      	bne.n	167a0 <__ssvfscanf_r+0x62c>
   1677e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16782:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   16784:	702a      	strb	r2, [r5, #0]
   16786:	4648      	mov	r0, r9
   16788:	47b0      	blx	r6
   1678a:	06a1      	lsls	r1, r4, #26
   1678c:	f140 8408 	bpl.w	16fa0 <__ssvfscanf_r+0xe2c>
   16790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16792:	f853 2b04 	ldr.w	r2, [r3], #4
   16796:	6010      	str	r0, [r2, #0]
   16798:	633b      	str	r3, [r7, #48]	; 0x30
   1679a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1679c:	3301      	adds	r3, #1
   1679e:	647b      	str	r3, [r7, #68]	; 0x44
   167a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   167a2:	1aed      	subs	r5, r5, r3
   167a4:	4445      	add	r5, r8
   167a6:	44aa      	add	sl, r5
   167a8:	e50b      	b.n	161c2 <__ssvfscanf_r+0x4e>
   167aa:	f1b8 0f00 	cmp.w	r8, #0
   167ae:	bf08      	it	eq
   167b0:	f04f 38ff 	moveq.w	r8, #4294967295
   167b4:	07e0      	lsls	r0, r4, #31
   167b6:	f140 8295 	bpl.w	16ce4 <__ssvfscanf_r+0xb70>
   167ba:	f014 0310 	ands.w	r3, r4, #16
   167be:	637b      	str	r3, [r7, #52]	; 0x34
   167c0:	f040 8474 	bne.w	170ac <__ssvfscanf_r+0xf38>
   167c4:	0621      	lsls	r1, r4, #24
   167c6:	f140 8666 	bpl.w	17496 <__ssvfscanf_r+0x1322>
   167ca:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   167cc:	f854 3b04 	ldr.w	r3, [r4], #4
   167d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   167d2:	2b00      	cmp	r3, #0
   167d4:	f43f adc3 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   167d8:	2080      	movs	r0, #128	; 0x80
   167da:	f7f9 ffed 	bl	107b8 <malloc>
   167de:	64b8      	str	r0, [r7, #72]	; 0x48
   167e0:	2800      	cmp	r0, #0
   167e2:	f000 8778 	beq.w	176d6 <__ssvfscanf_r+0x1562>
   167e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   167ea:	601a      	str	r2, [r3, #0]
   167ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   167ee:	88d5      	ldrh	r5, [r2, #6]
   167f0:	8893      	ldrh	r3, [r2, #4]
   167f2:	429d      	cmp	r5, r3
   167f4:	f080 8552 	bcs.w	1729c <__ssvfscanf_r+0x1128>
   167f8:	6810      	ldr	r0, [r2, #0]
   167fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167fc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16802:	633c      	str	r4, [r7, #48]	; 0x30
   16804:	3501      	adds	r5, #1
   16806:	80dd      	strh	r5, [r3, #6]
   16808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1680a:	62bb      	str	r3, [r7, #40]	; 0x28
   1680c:	2320      	movs	r3, #32
   1680e:	623b      	str	r3, [r7, #32]
   16810:	f8db 3000 	ldr.w	r3, [fp]
   16814:	4eb1      	ldr	r6, [pc, #708]	; (16adc <__ssvfscanf_r+0x968>)
   16816:	781b      	ldrb	r3, [r3, #0]
   16818:	5cf3      	ldrb	r3, [r6, r3]
   1681a:	f013 0308 	ands.w	r3, r3, #8
   1681e:	f040 84bb 	bne.w	17198 <__ssvfscanf_r+0x1024>
   16822:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16824:	627e      	str	r6, [r7, #36]	; 0x24
   16826:	461d      	mov	r5, r3
   16828:	f7fc f866 	bl	128f8 <__locale_mb_cur_max>
   1682c:	42a8      	cmp	r0, r5
   1682e:	f43f ad8d 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   16832:	e9db 3200 	ldrd	r3, r2, [fp]
   16836:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1683a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1683e:	5541      	strb	r1, [r0, r5]
   16840:	3a01      	subs	r2, #1
   16842:	2c03      	cmp	r4, #3
   16844:	e9cb 3200 	strd	r3, r2, [fp]
   16848:	f105 0501 	add.w	r5, r5, #1
   1684c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   16850:	d102      	bne.n	16858 <__ssvfscanf_r+0x6e4>
   16852:	6833      	ldr	r3, [r6, #0]
   16854:	2b04      	cmp	r3, #4
   16856:	d004      	beq.n	16862 <__ssvfscanf_r+0x6ee>
   16858:	2208      	movs	r2, #8
   1685a:	2100      	movs	r1, #0
   1685c:	4630      	mov	r0, r6
   1685e:	f7fb ff2b 	bl	126b8 <memset>
   16862:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   16866:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16868:	9600      	str	r6, [sp, #0]
   1686a:	462b      	mov	r3, r5
   1686c:	4648      	mov	r0, r9
   1686e:	f002 fc17 	bl	190a0 <_mbrtowc_r>
   16872:	1c42      	adds	r2, r0, #1
   16874:	4604      	mov	r4, r0
   16876:	f43f ad69 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   1687a:	2800      	cmp	r0, #0
   1687c:	f040 8478 	bne.w	17170 <__ssvfscanf_r+0xffc>
   16880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16882:	6018      	str	r0, [r3, #0]
   16884:	f002 fc68 	bl	19158 <iswspace>
   16888:	2800      	cmp	r0, #0
   1688a:	f040 865c 	bne.w	17546 <__ssvfscanf_r+0x13d2>
   1688e:	44aa      	add	sl, r5
   16890:	f108 38ff 	add.w	r8, r8, #4294967295
   16894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16896:	2b00      	cmp	r3, #0
   16898:	f040 8633 	bne.w	17502 <__ssvfscanf_r+0x138e>
   1689c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1689e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   168a0:	3304      	adds	r3, #4
   168a2:	64bb      	str	r3, [r7, #72]	; 0x48
   168a4:	2a00      	cmp	r2, #0
   168a6:	f000 862c 	beq.w	17502 <__ssvfscanf_r+0x138e>
   168aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   168ac:	1a9d      	subs	r5, r3, r2
   168ae:	6a3b      	ldr	r3, [r7, #32]
   168b0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   168b4:	f240 8756 	bls.w	17764 <__ssvfscanf_r+0x15f0>
   168b8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   168ba:	f000 bc5c 	b.w	17176 <__ssvfscanf_r+0x1002>
   168be:	f1b8 0f00 	cmp.w	r8, #0
   168c2:	bf08      	it	eq
   168c4:	f04f 38ff 	moveq.w	r8, #4294967295
   168c8:	07e0      	lsls	r0, r4, #31
   168ca:	f140 827b 	bpl.w	16dc4 <__ssvfscanf_r+0xc50>
   168ce:	f014 0310 	ands.w	r3, r4, #16
   168d2:	62bb      	str	r3, [r7, #40]	; 0x28
   168d4:	f040 83f3 	bne.w	170be <__ssvfscanf_r+0xf4a>
   168d8:	0621      	lsls	r1, r4, #24
   168da:	f140 85ed 	bpl.w	174b8 <__ssvfscanf_r+0x1344>
   168de:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   168e0:	f856 3b04 	ldr.w	r3, [r6], #4
   168e4:	623b      	str	r3, [r7, #32]
   168e6:	2b00      	cmp	r3, #0
   168e8:	f43f ad39 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   168ec:	2080      	movs	r0, #128	; 0x80
   168ee:	f7f9 ff63 	bl	107b8 <malloc>
   168f2:	4604      	mov	r4, r0
   168f4:	2800      	cmp	r0, #0
   168f6:	f000 86ee 	beq.w	176d6 <__ssvfscanf_r+0x1562>
   168fa:	6a3b      	ldr	r3, [r7, #32]
   168fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   168fe:	6018      	str	r0, [r3, #0]
   16900:	88d5      	ldrh	r5, [r2, #6]
   16902:	8893      	ldrh	r3, [r2, #4]
   16904:	429d      	cmp	r5, r3
   16906:	f080 84dd 	bcs.w	172c4 <__ssvfscanf_r+0x1150>
   1690a:	6810      	ldr	r0, [r2, #0]
   1690c:	6a3b      	ldr	r3, [r7, #32]
   1690e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16914:	633e      	str	r6, [r7, #48]	; 0x30
   16916:	3501      	adds	r5, #1
   16918:	80dd      	strh	r5, [r3, #6]
   1691a:	2320      	movs	r3, #32
   1691c:	61fc      	str	r4, [r7, #28]
   1691e:	61bb      	str	r3, [r7, #24]
   16920:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   16922:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   16926:	2500      	movs	r5, #0
   16928:	46c2      	mov	sl, r8
   1692a:	46a0      	mov	r8, r4
   1692c:	f7fb ffe4 	bl	128f8 <__locale_mb_cur_max>
   16930:	42a8      	cmp	r0, r5
   16932:	f43f ad0b 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   16936:	e9db 3200 	ldrd	r3, r2, [fp]
   1693a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1693e:	3a01      	subs	r2, #1
   16940:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   16944:	e9cb 3200 	strd	r3, r2, [fp]
   16948:	2e03      	cmp	r6, #3
   1694a:	f105 0301 	add.w	r3, r5, #1
   1694e:	5541      	strb	r1, [r0, r5]
   16950:	64bb      	str	r3, [r7, #72]	; 0x48
   16952:	f107 0460 	add.w	r4, r7, #96	; 0x60
   16956:	d102      	bne.n	1695e <__ssvfscanf_r+0x7ea>
   16958:	6823      	ldr	r3, [r4, #0]
   1695a:	2b04      	cmp	r3, #4
   1695c:	d004      	beq.n	16968 <__ssvfscanf_r+0x7f4>
   1695e:	2208      	movs	r2, #8
   16960:	2100      	movs	r1, #0
   16962:	4620      	mov	r0, r4
   16964:	f7fb fea8 	bl	126b8 <memset>
   16968:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   1696c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1696e:	9400      	str	r4, [sp, #0]
   16970:	4641      	mov	r1, r8
   16972:	4648      	mov	r0, r9
   16974:	f002 fb94 	bl	190a0 <_mbrtowc_r>
   16978:	1c42      	adds	r2, r0, #1
   1697a:	4606      	mov	r6, r0
   1697c:	f43f ace6 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   16980:	2800      	cmp	r0, #0
   16982:	f040 82ca 	bne.w	16f1a <__ssvfscanf_r+0xda6>
   16986:	f8c8 0000 	str.w	r0, [r8]
   1698a:	4605      	mov	r5, r0
   1698c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   16990:	2208      	movs	r2, #8
   16992:	2100      	movs	r1, #0
   16994:	4618      	mov	r0, r3
   16996:	637b      	str	r3, [r7, #52]	; 0x34
   16998:	f7fb fe8e 	bl	126b8 <memset>
   1699c:	4950      	ldr	r1, [pc, #320]	; (16ae0 <__ssvfscanf_r+0x96c>)
   1699e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   169a0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   169a4:	462a      	mov	r2, r5
   169a6:	4648      	mov	r0, r9
   169a8:	460d      	mov	r5, r1
   169aa:	f107 0150 	add.w	r1, r7, #80	; 0x50
   169ae:	47a8      	blx	r5
   169b0:	2801      	cmp	r0, #1
   169b2:	f000 83d5 	beq.w	17160 <__ssvfscanf_r+0xfec>
   169b6:	2200      	movs	r2, #0
   169b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   169bc:	5c9b      	ldrb	r3, [r3, r2]
   169be:	2b00      	cmp	r3, #0
   169c0:	f000 85a1 	beq.w	17506 <__ssvfscanf_r+0x1392>
   169c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   169c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   169c8:	2e03      	cmp	r6, #3
   169ca:	4413      	add	r3, r2
   169cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   169ce:	f000 83ca 	beq.w	17166 <__ssvfscanf_r+0xff2>
   169d2:	f10a 3aff 	add.w	sl, sl, #4294967295
   169d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   169d8:	b95b      	cbnz	r3, 169f2 <__ssvfscanf_r+0x87e>
   169da:	6a3b      	ldr	r3, [r7, #32]
   169dc:	f108 0804 	add.w	r8, r8, #4
   169e0:	b13b      	cbz	r3, 169f2 <__ssvfscanf_r+0x87e>
   169e2:	69fb      	ldr	r3, [r7, #28]
   169e4:	eba8 0403 	sub.w	r4, r8, r3
   169e8:	69bb      	ldr	r3, [r7, #24]
   169ea:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   169ee:	f240 8405 	bls.w	171fc <__ssvfscanf_r+0x1088>
   169f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   169f6:	2b00      	cmp	r3, #0
   169f8:	f04f 0500 	mov.w	r5, #0
   169fc:	f340 8296 	ble.w	16f2c <__ssvfscanf_r+0xdb8>
   16a00:	f1ba 0f00 	cmp.w	sl, #0
   16a04:	d192      	bne.n	1692c <__ssvfscanf_r+0x7b8>
   16a06:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16a0a:	627e      	str	r6, [r7, #36]	; 0x24
   16a0c:	4644      	mov	r4, r8
   16a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a10:	2b00      	cmp	r3, #0
   16a12:	f47f abd6 	bne.w	161c2 <__ssvfscanf_r+0x4e>
   16a16:	6023      	str	r3, [r4, #0]
   16a18:	6a3b      	ldr	r3, [r7, #32]
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	f000 81c2 	beq.w	16da4 <__ssvfscanf_r+0xc30>
   16a20:	69fb      	ldr	r3, [r7, #28]
   16a22:	69ba      	ldr	r2, [r7, #24]
   16a24:	1ae1      	subs	r1, r4, r3
   16a26:	108b      	asrs	r3, r1, #2
   16a28:	3301      	adds	r3, #1
   16a2a:	429a      	cmp	r2, r3
   16a2c:	f240 81ba 	bls.w	16da4 <__ssvfscanf_r+0xc30>
   16a30:	6a3c      	ldr	r4, [r7, #32]
   16a32:	3104      	adds	r1, #4
   16a34:	6820      	ldr	r0, [r4, #0]
   16a36:	f7fa f98b 	bl	10d50 <realloc>
   16a3a:	2800      	cmp	r0, #0
   16a3c:	f000 81b2 	beq.w	16da4 <__ssvfscanf_r+0xc30>
   16a40:	6020      	str	r0, [r4, #0]
   16a42:	e1af      	b.n	16da4 <__ssvfscanf_r+0xc30>
   16a44:	0521      	lsls	r1, r4, #20
   16a46:	f57f adb3 	bpl.w	165b0 <__ssvfscanf_r+0x43c>
   16a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16a4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16a4e:	185b      	adds	r3, r3, r1
   16a50:	f47f adae 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16a54:	64bb      	str	r3, [r7, #72]	; 0x48
   16a56:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   16a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   16a5c:	e593      	b.n	16586 <__ssvfscanf_r+0x412>
   16a5e:	4b21      	ldr	r3, [pc, #132]	; (16ae4 <__ssvfscanf_r+0x970>)
   16a60:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   16a64:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16a68:	e66b      	b.n	16742 <__ssvfscanf_r+0x5ce>
   16a6a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   16a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   16a72:	f47f ad9d 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16a78:	2b01      	cmp	r3, #1
   16a7a:	f47f ad99 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16a7e:	2330      	movs	r3, #48	; 0x30
   16a80:	f805 3b01 	strb.w	r3, [r5], #1
   16a84:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16a88:	2300      	movs	r3, #0
   16a8a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   16a8e:	3e01      	subs	r6, #1
   16a90:	637b      	str	r3, [r7, #52]	; 0x34
   16a92:	e578      	b.n	16586 <__ssvfscanf_r+0x412>
   16a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16a96:	2b06      	cmp	r3, #6
   16a98:	f040 8574 	bne.w	17584 <__ssvfscanf_r+0x1410>
   16a9c:	2307      	movs	r3, #7
   16a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   16aa0:	e571      	b.n	16586 <__ssvfscanf_r+0x412>
   16aa2:	0523      	lsls	r3, r4, #20
   16aa4:	f57f ad84 	bpl.w	165b0 <__ssvfscanf_r+0x43c>
   16aa8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   16aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16ab0:	d005      	beq.n	16abe <__ssvfscanf_r+0x94a>
   16ab2:	0561      	lsls	r1, r4, #21
   16ab4:	f57f ad7c 	bpl.w	165b0 <__ssvfscanf_r+0x43c>
   16ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16aba:	2b00      	cmp	r3, #0
   16abc:	d047      	beq.n	16b4e <__ssvfscanf_r+0x9da>
   16abe:	05a3      	lsls	r3, r4, #22
   16ac0:	d404      	bmi.n	16acc <__ssvfscanf_r+0x958>
   16ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ac4:	69f9      	ldr	r1, [r7, #28]
   16ac6:	1a5b      	subs	r3, r3, r1
   16ac8:	e9c7 5305 	strd	r5, r3, [r7, #20]
   16acc:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   16ad0:	2300      	movs	r3, #0
   16ad2:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   16ad6:	637b      	str	r3, [r7, #52]	; 0x34
   16ad8:	e555      	b.n	16586 <__ssvfscanf_r+0x412>
   16ada:	bf00      	nop
   16adc:	20001075 	.word	0x20001075
   16ae0:	20008f94 	.word	0x20008f94
   16ae4:	20002c94 	.word	0x20002c94
   16ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aea:	2b00      	cmp	r3, #0
   16aec:	f000 81ff 	beq.w	16eee <__ssvfscanf_r+0xd7a>
   16af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16af2:	2b02      	cmp	r3, #2
   16af4:	f000 83b0 	beq.w	17258 <__ssvfscanf_r+0x10e4>
   16af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16afa:	2b01      	cmp	r3, #1
   16afc:	f000 81f1 	beq.w	16ee2 <__ssvfscanf_r+0xd6e>
   16b00:	2b04      	cmp	r3, #4
   16b02:	f000 81ee 	beq.w	16ee2 <__ssvfscanf_r+0xd6e>
   16b06:	e553      	b.n	165b0 <__ssvfscanf_r+0x43c>
   16b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b0a:	2b07      	cmp	r3, #7
   16b0c:	f040 853a 	bne.w	17584 <__ssvfscanf_r+0x1410>
   16b10:	2308      	movs	r3, #8
   16b12:	64bb      	str	r3, [r7, #72]	; 0x48
   16b14:	e537      	b.n	16586 <__ssvfscanf_r+0x412>
   16b16:	0520      	lsls	r0, r4, #20
   16b18:	f100 81f9 	bmi.w	16f0e <__ssvfscanf_r+0xd9a>
   16b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b1e:	2b01      	cmp	r3, #1
   16b20:	f47f ad46 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16b24:	2302      	movs	r3, #2
   16b26:	63fb      	str	r3, [r7, #60]	; 0x3c
   16b28:	e52d      	b.n	16586 <__ssvfscanf_r+0x412>
   16b2a:	0623      	lsls	r3, r4, #24
   16b2c:	f57f ad40 	bpl.w	165b0 <__ssvfscanf_r+0x43c>
   16b30:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16b34:	e527      	b.n	16586 <__ssvfscanf_r+0x412>
   16b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b38:	2b00      	cmp	r3, #0
   16b3a:	f040 81cc 	bne.w	16ed6 <__ssvfscanf_r+0xd62>
   16b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b40:	b9b3      	cbnz	r3, 16b70 <__ssvfscanf_r+0x9fc>
   16b42:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16b46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   16b4a:	f000 8520 	beq.w	1758e <__ssvfscanf_r+0x141a>
   16b4e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16b50:	ee18 9a10 	vmov	r9, s16
   16b54:	e533      	b.n	165be <__ssvfscanf_r+0x44a>
   16b56:	0521      	lsls	r1, r4, #20
   16b58:	f100 81b7 	bmi.w	16eca <__ssvfscanf_r+0xd56>
   16b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b5e:	2b02      	cmp	r3, #2
   16b60:	f040 8510 	bne.w	17584 <__ssvfscanf_r+0x1410>
   16b64:	2303      	movs	r3, #3
   16b66:	64bb      	str	r3, [r7, #72]	; 0x48
   16b68:	e50d      	b.n	16586 <__ssvfscanf_r+0x412>
   16b6a:	0520      	lsls	r0, r4, #20
   16b6c:	d59c      	bpl.n	16aa8 <__ssvfscanf_r+0x934>
   16b6e:	e76c      	b.n	16a4a <__ssvfscanf_r+0x8d6>
   16b70:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16b72:	ee18 9a10 	vmov	r9, s16
   16b76:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16b7a:	e520      	b.n	165be <__ssvfscanf_r+0x44a>
   16b7c:	4b8d      	ldr	r3, [pc, #564]	; (16db4 <__ssvfscanf_r+0xc40>)
   16b7e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16b82:	2e08      	cmp	r6, #8
   16b84:	f73f addb 	bgt.w	1673e <__ssvfscanf_r+0x5ca>
   16b88:	e5e8      	b.n	1675c <__ssvfscanf_r+0x5e8>
   16b8a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   16b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16b92:	f47f ade3 	bne.w	1675c <__ssvfscanf_r+0x5e8>
   16b96:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   16b9a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   16b9e:	2610      	movs	r6, #16
   16ba0:	e5cf      	b.n	16742 <__ssvfscanf_r+0x5ce>
   16ba2:	0623      	lsls	r3, r4, #24
   16ba4:	f57f adda 	bpl.w	1675c <__ssvfscanf_r+0x5e8>
   16ba8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16bac:	e5c9      	b.n	16742 <__ssvfscanf_r+0x5ce>
   16bae:	f044 0401 	orr.w	r4, r4, #1
   16bb2:	f8db 3004 	ldr.w	r3, [fp, #4]
   16bb6:	64f9      	str	r1, [r7, #76]	; 0x4c
   16bb8:	2b00      	cmp	r3, #0
   16bba:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16bbe:	f04f 0500 	mov.w	r5, #0
   16bc2:	f73f abf8 	bgt.w	163b6 <__ssvfscanf_r+0x242>
   16bc6:	4659      	mov	r1, fp
   16bc8:	4648      	mov	r0, r9
   16bca:	f002 fc7d 	bl	194c8 <__ssrefill_r>
   16bce:	2800      	cmp	r0, #0
   16bd0:	f47f abbc 	bne.w	1634c <__ssvfscanf_r+0x1d8>
   16bd4:	0660      	lsls	r0, r4, #25
   16bd6:	f53f abf1 	bmi.w	163bc <__ssvfscanf_r+0x248>
   16bda:	f8db 2000 	ldr.w	r2, [fp]
   16bde:	4e76      	ldr	r6, [pc, #472]	; (16db8 <__ssvfscanf_r+0xc44>)
   16be0:	7813      	ldrb	r3, [r2, #0]
   16be2:	5cf3      	ldrb	r3, [r6, r3]
   16be4:	0719      	lsls	r1, r3, #28
   16be6:	f57f abe9 	bpl.w	163bc <__ssvfscanf_r+0x248>
   16bea:	f8db 3004 	ldr.w	r3, [fp, #4]
   16bee:	3b01      	subs	r3, #1
   16bf0:	2b00      	cmp	r3, #0
   16bf2:	f10a 0a01 	add.w	sl, sl, #1
   16bf6:	f8cb 3004 	str.w	r3, [fp, #4]
   16bfa:	f102 0201 	add.w	r2, r2, #1
   16bfe:	dd4a      	ble.n	16c96 <__ssvfscanf_r+0xb22>
   16c00:	f8cb 2000 	str.w	r2, [fp]
   16c04:	7813      	ldrb	r3, [r2, #0]
   16c06:	5cf3      	ldrb	r3, [r6, r3]
   16c08:	0719      	lsls	r1, r3, #28
   16c0a:	f57f abd7 	bpl.w	163bc <__ssvfscanf_r+0x248>
   16c0e:	e7ec      	b.n	16bea <__ssvfscanf_r+0xa76>
   16c10:	f044 0401 	orr.w	r4, r4, #1
   16c14:	4b69      	ldr	r3, [pc, #420]	; (16dbc <__ssvfscanf_r+0xc48>)
   16c16:	62fb      	str	r3, [r7, #44]	; 0x2c
   16c18:	2308      	movs	r3, #8
   16c1a:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   16c1e:	2503      	movs	r5, #3
   16c20:	f7ff bbc4 	b.w	163ac <__ssvfscanf_r+0x238>
   16c24:	f044 0401 	orr.w	r4, r4, #1
   16c28:	4b65      	ldr	r3, [pc, #404]	; (16dc0 <__ssvfscanf_r+0xc4c>)
   16c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   16c2c:	230a      	movs	r3, #10
   16c2e:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c30:	63bb      	str	r3, [r7, #56]	; 0x38
   16c32:	2503      	movs	r5, #3
   16c34:	f7ff bbba 	b.w	163ac <__ssvfscanf_r+0x238>
   16c38:	0523      	lsls	r3, r4, #20
   16c3a:	f57f ad82 	bpl.w	16742 <__ssvfscanf_r+0x5ce>
   16c3e:	b916      	cbnz	r6, 16c46 <__ssvfscanf_r+0xad2>
   16c40:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16c44:	2608      	movs	r6, #8
   16c46:	0563      	lsls	r3, r4, #21
   16c48:	f100 81a6 	bmi.w	16f98 <__ssvfscanf_r+0xe24>
   16c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16c4e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   16c52:	b11b      	cbz	r3, 16c5c <__ssvfscanf_r+0xae8>
   16c54:	3b01      	subs	r3, #1
   16c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   16c58:	f108 0801 	add.w	r8, r8, #1
   16c5c:	684b      	ldr	r3, [r1, #4]
   16c5e:	3b01      	subs	r3, #1
   16c60:	2b00      	cmp	r3, #0
   16c62:	f10a 0a01 	add.w	sl, sl, #1
   16c66:	604b      	str	r3, [r1, #4]
   16c68:	f73f ad73 	bgt.w	16752 <__ssvfscanf_r+0x5de>
   16c6c:	4648      	mov	r0, r9
   16c6e:	64b9      	str	r1, [r7, #72]	; 0x48
   16c70:	f002 fc2a 	bl	194c8 <__ssrefill_r>
   16c74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16c76:	2800      	cmp	r0, #0
   16c78:	f43f ad6d 	beq.w	16756 <__ssvfscanf_r+0x5e2>
   16c7c:	e56e      	b.n	1675c <__ssvfscanf_r+0x5e8>
   16c7e:	ee18 0a10 	vmov	r0, s16
   16c82:	4659      	mov	r1, fp
   16c84:	f002 fc20 	bl	194c8 <__ssrefill_r>
   16c88:	2800      	cmp	r0, #0
   16c8a:	f47f ac91 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16c8e:	2e00      	cmp	r6, #0
   16c90:	f47f abc4 	bne.w	1641c <__ssvfscanf_r+0x2a8>
   16c94:	e48c      	b.n	165b0 <__ssvfscanf_r+0x43c>
   16c96:	4659      	mov	r1, fp
   16c98:	4648      	mov	r0, r9
   16c9a:	f002 fc15 	bl	194c8 <__ssrefill_r>
   16c9e:	2800      	cmp	r0, #0
   16ca0:	f47f ab54 	bne.w	1634c <__ssvfscanf_r+0x1d8>
   16ca4:	f8db 2000 	ldr.w	r2, [fp]
   16ca8:	e79a      	b.n	16be0 <__ssvfscanf_r+0xa6c>
   16caa:	f8db 2004 	ldr.w	r2, [fp, #4]
   16cae:	e00f      	b.n	16cd0 <__ssvfscanf_r+0xb5c>
   16cb0:	f8db 3000 	ldr.w	r3, [fp]
   16cb4:	781a      	ldrb	r2, [r3, #0]
   16cb6:	5cb2      	ldrb	r2, [r6, r2]
   16cb8:	0711      	lsls	r1, r2, #28
   16cba:	f103 0301 	add.w	r3, r3, #1
   16cbe:	f57f aa80 	bpl.w	161c2 <__ssvfscanf_r+0x4e>
   16cc2:	f8db 2004 	ldr.w	r2, [fp, #4]
   16cc6:	3a01      	subs	r2, #1
   16cc8:	e9cb 3200 	strd	r3, r2, [fp]
   16ccc:	f10a 0a01 	add.w	sl, sl, #1
   16cd0:	2a00      	cmp	r2, #0
   16cd2:	dced      	bgt.n	16cb0 <__ssvfscanf_r+0xb3c>
   16cd4:	4659      	mov	r1, fp
   16cd6:	4648      	mov	r0, r9
   16cd8:	f002 fbf6 	bl	194c8 <__ssrefill_r>
   16cdc:	2800      	cmp	r0, #0
   16cde:	d0e7      	beq.n	16cb0 <__ssvfscanf_r+0xb3c>
   16ce0:	f7ff ba6f 	b.w	161c2 <__ssvfscanf_r+0x4e>
   16ce4:	06e1      	lsls	r1, r4, #27
   16ce6:	f100 8349 	bmi.w	1737c <__ssvfscanf_r+0x1208>
   16cea:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16cee:	f000 83ab 	beq.w	17448 <__ssvfscanf_r+0x12d4>
   16cf2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16cf4:	f854 6b04 	ldr.w	r6, [r4], #4
   16cf8:	64be      	str	r6, [r7, #72]	; 0x48
   16cfa:	2e00      	cmp	r6, #0
   16cfc:	f43f ab2f 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   16d00:	2020      	movs	r0, #32
   16d02:	f7f9 fd59 	bl	107b8 <malloc>
   16d06:	4605      	mov	r5, r0
   16d08:	2800      	cmp	r0, #0
   16d0a:	f000 8462 	beq.w	175d2 <__ssvfscanf_r+0x145e>
   16d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16d10:	6030      	str	r0, [r6, #0]
   16d12:	8893      	ldrh	r3, [r2, #4]
   16d14:	88d6      	ldrh	r6, [r2, #6]
   16d16:	429e      	cmp	r6, r3
   16d18:	f080 82a8 	bcs.w	1726c <__ssvfscanf_r+0x10f8>
   16d1c:	6810      	ldr	r0, [r2, #0]
   16d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16d20:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16d26:	633c      	str	r4, [r7, #48]	; 0x30
   16d28:	3601      	adds	r6, #1
   16d2a:	80de      	strh	r6, [r3, #6]
   16d2c:	2320      	movs	r3, #32
   16d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   16d30:	f8db 2000 	ldr.w	r2, [fp]
   16d34:	4e20      	ldr	r6, [pc, #128]	; (16db8 <__ssvfscanf_r+0xc44>)
   16d36:	7811      	ldrb	r1, [r2, #0]
   16d38:	5c71      	ldrb	r1, [r6, r1]
   16d3a:	0708      	lsls	r0, r1, #28
   16d3c:	f100 82ac 	bmi.w	17298 <__ssvfscanf_r+0x1124>
   16d40:	4633      	mov	r3, r6
   16d42:	462c      	mov	r4, r5
   16d44:	4610      	mov	r0, r2
   16d46:	462e      	mov	r6, r5
   16d48:	f8db 1004 	ldr.w	r1, [fp, #4]
   16d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16d4e:	3901      	subs	r1, #1
   16d50:	f8cb 1004 	str.w	r1, [fp, #4]
   16d54:	1c41      	adds	r1, r0, #1
   16d56:	f8cb 1000 	str.w	r1, [fp]
   16d5a:	4635      	mov	r5, r6
   16d5c:	7801      	ldrb	r1, [r0, #0]
   16d5e:	f805 1b01 	strb.w	r1, [r5], #1
   16d62:	b122      	cbz	r2, 16d6e <__ssvfscanf_r+0xbfa>
   16d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16d66:	1b2e      	subs	r6, r5, r4
   16d68:	4296      	cmp	r6, r2
   16d6a:	f080 837a 	bcs.w	17462 <__ssvfscanf_r+0x12ee>
   16d6e:	f1b8 0801 	subs.w	r8, r8, #1
   16d72:	d00b      	beq.n	16d8c <__ssvfscanf_r+0xc18>
   16d74:	f8db 1004 	ldr.w	r1, [fp, #4]
   16d78:	2900      	cmp	r1, #0
   16d7a:	462e      	mov	r6, r5
   16d7c:	f340 83ae 	ble.w	174dc <__ssvfscanf_r+0x1368>
   16d80:	f8db 0000 	ldr.w	r0, [fp]
   16d84:	7801      	ldrb	r1, [r0, #0]
   16d86:	5c59      	ldrb	r1, [r3, r1]
   16d88:	0709      	lsls	r1, r1, #28
   16d8a:	d5dd      	bpl.n	16d48 <__ssvfscanf_r+0xbd4>
   16d8c:	1b29      	subs	r1, r5, r4
   16d8e:	448a      	add	sl, r1
   16d90:	3101      	adds	r1, #1
   16d92:	f04f 0300 	mov.w	r3, #0
   16d96:	702b      	strb	r3, [r5, #0]
   16d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16d9a:	b11b      	cbz	r3, 16da4 <__ssvfscanf_r+0xc30>
   16d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16d9e:	428b      	cmp	r3, r1
   16da0:	f200 8394 	bhi.w	174cc <__ssvfscanf_r+0x1358>
   16da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16da6:	3301      	adds	r3, #1
   16da8:	647b      	str	r3, [r7, #68]	; 0x44
   16daa:	f7ff ba0a 	b.w	161c2 <__ssvfscanf_r+0x4e>
   16dae:	2300      	movs	r3, #0
   16db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   16db2:	e461      	b.n	16678 <__ssvfscanf_r+0x504>
   16db4:	20002c94 	.word	0x20002c94
   16db8:	20001075 	.word	0x20001075
   16dbc:	00018d8d 	.word	0x00018d8d
   16dc0:	00012101 	.word	0x00012101
   16dc4:	06e6      	lsls	r6, r4, #27
   16dc6:	f100 8181 	bmi.w	170cc <__ssvfscanf_r+0xf58>
   16dca:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16dce:	f000 836d 	beq.w	174ac <__ssvfscanf_r+0x1338>
   16dd2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16dd4:	f854 6b04 	ldr.w	r6, [r4], #4
   16dd8:	64be      	str	r6, [r7, #72]	; 0x48
   16dda:	2e00      	cmp	r6, #0
   16ddc:	f43f aabf 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   16de0:	2020      	movs	r0, #32
   16de2:	f7f9 fce9 	bl	107b8 <malloc>
   16de6:	4605      	mov	r5, r0
   16de8:	2800      	cmp	r0, #0
   16dea:	f000 83f2 	beq.w	175d2 <__ssvfscanf_r+0x145e>
   16dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16df0:	6030      	str	r0, [r6, #0]
   16df2:	8893      	ldrh	r3, [r2, #4]
   16df4:	88d6      	ldrh	r6, [r2, #6]
   16df6:	429e      	cmp	r6, r3
   16df8:	f080 827a 	bcs.w	172f0 <__ssvfscanf_r+0x117c>
   16dfc:	6810      	ldr	r0, [r2, #0]
   16dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16e00:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16e06:	633c      	str	r4, [r7, #48]	; 0x30
   16e08:	3601      	adds	r6, #1
   16e0a:	80de      	strh	r6, [r3, #6]
   16e0c:	2420      	movs	r4, #32
   16e0e:	f8db 2000 	ldr.w	r2, [fp]
   16e12:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16e16:	4619      	mov	r1, r3
   16e18:	7813      	ldrb	r3, [r2, #0]
   16e1a:	5ccb      	ldrb	r3, [r1, r3]
   16e1c:	2b00      	cmp	r3, #0
   16e1e:	f43f aa9e 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   16e22:	ee08 9a10 	vmov	s16, r9
   16e26:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   16e2a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   16e2e:	462e      	mov	r6, r5
   16e30:	46a2      	mov	sl, r4
   16e32:	4610      	mov	r0, r2
   16e34:	460c      	mov	r4, r1
   16e36:	f8db 1004 	ldr.w	r1, [fp, #4]
   16e3a:	1c43      	adds	r3, r0, #1
   16e3c:	3901      	subs	r1, #1
   16e3e:	e9cb 3100 	strd	r3, r1, [fp]
   16e42:	4629      	mov	r1, r5
   16e44:	7800      	ldrb	r0, [r0, #0]
   16e46:	f801 0b01 	strb.w	r0, [r1], #1
   16e4a:	f1b9 0f00 	cmp.w	r9, #0
   16e4e:	d002      	beq.n	16e56 <__ssvfscanf_r+0xce2>
   16e50:	1b8d      	subs	r5, r1, r6
   16e52:	4555      	cmp	r5, sl
   16e54:	d27a      	bcs.n	16f4c <__ssvfscanf_r+0xdd8>
   16e56:	460d      	mov	r5, r1
   16e58:	f1b8 0801 	subs.w	r8, r8, #1
   16e5c:	d00a      	beq.n	16e74 <__ssvfscanf_r+0xd00>
   16e5e:	f8db 1004 	ldr.w	r1, [fp, #4]
   16e62:	2900      	cmp	r1, #0
   16e64:	f340 816a 	ble.w	1713c <__ssvfscanf_r+0xfc8>
   16e68:	f8db 0000 	ldr.w	r0, [fp]
   16e6c:	7801      	ldrb	r1, [r0, #0]
   16e6e:	5c61      	ldrb	r1, [r4, r1]
   16e70:	2900      	cmp	r1, #0
   16e72:	d1e0      	bne.n	16e36 <__ssvfscanf_r+0xcc2>
   16e74:	4654      	mov	r4, sl
   16e76:	ee18 9a10 	vmov	r9, s16
   16e7a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16e7e:	1bae      	subs	r6, r5, r6
   16e80:	f43f aa6d 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   16e84:	f04f 0300 	mov.w	r3, #0
   16e88:	702b      	strb	r3, [r5, #0]
   16e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16e8c:	b11b      	cbz	r3, 16e96 <__ssvfscanf_r+0xd22>
   16e8e:	1c71      	adds	r1, r6, #1
   16e90:	428c      	cmp	r4, r1
   16e92:	f200 832d 	bhi.w	174f0 <__ssvfscanf_r+0x137c>
   16e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16e98:	3301      	adds	r3, #1
   16e9a:	44b2      	add	sl, r6
   16e9c:	647b      	str	r3, [r7, #68]	; 0x44
   16e9e:	f7ff b990 	b.w	161c2 <__ssvfscanf_r+0x4e>
   16ea2:	2300      	movs	r3, #0
   16ea4:	613b      	str	r3, [r7, #16]
   16ea6:	f7ff baa9 	b.w	163fc <__ssvfscanf_r+0x288>
   16eaa:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   16eae:	f47f aa56 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   16eb2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16eb6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   16eba:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   16ebe:	f7ff ba67 	b.w	16390 <__ssvfscanf_r+0x21c>
   16ec2:	64f9      	str	r1, [r7, #76]	; 0x4c
   16ec4:	2504      	movs	r5, #4
   16ec6:	f7ff ba71 	b.w	163ac <__ssvfscanf_r+0x238>
   16eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ecc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16ece:	185b      	adds	r3, r3, r1
   16ed0:	f47f ae44 	bne.w	16b5c <__ssvfscanf_r+0x9e8>
   16ed4:	e5be      	b.n	16a54 <__ssvfscanf_r+0x8e0>
   16ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16ed8:	2b03      	cmp	r3, #3
   16eda:	d002      	beq.n	16ee2 <__ssvfscanf_r+0xd6e>
   16edc:	2b05      	cmp	r3, #5
   16ede:	f47f ab67 	bne.w	165b0 <__ssvfscanf_r+0x43c>
   16ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16ee4:	3301      	adds	r3, #1
   16ee6:	b2db      	uxtb	r3, r3
   16ee8:	64bb      	str	r3, [r7, #72]	; 0x48
   16eea:	f7ff bb4c 	b.w	16586 <__ssvfscanf_r+0x412>
   16eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ef0:	2b00      	cmp	r3, #0
   16ef2:	f47f ae01 	bne.w	16af8 <__ssvfscanf_r+0x984>
   16ef6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   16efe:	f47f adfb 	bne.w	16af8 <__ssvfscanf_r+0x984>
   16f02:	2301      	movs	r3, #1
   16f04:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f0a:	f7ff bb3c 	b.w	16586 <__ssvfscanf_r+0x412>
   16f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16f12:	185b      	adds	r3, r3, r1
   16f14:	f47f ae02 	bne.w	16b1c <__ssvfscanf_r+0x9a8>
   16f18:	e59c      	b.n	16a54 <__ssvfscanf_r+0x8e0>
   16f1a:	1c83      	adds	r3, r0, #2
   16f1c:	f040 845b 	bne.w	177d6 <__ssvfscanf_r+0x1662>
   16f20:	f8db 3004 	ldr.w	r3, [fp, #4]
   16f24:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16f26:	2b00      	cmp	r3, #0
   16f28:	f73f ad00 	bgt.w	1692c <__ssvfscanf_r+0x7b8>
   16f2c:	4659      	mov	r1, fp
   16f2e:	4648      	mov	r0, r9
   16f30:	f002 faca 	bl	194c8 <__ssrefill_r>
   16f34:	2800      	cmp	r0, #0
   16f36:	f43f ad63 	beq.w	16a00 <__ssvfscanf_r+0x88c>
   16f3a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16f3e:	627e      	str	r6, [r7, #36]	; 0x24
   16f40:	4644      	mov	r4, r8
   16f42:	2d00      	cmp	r5, #0
   16f44:	f43f ad63 	beq.w	16a0e <__ssvfscanf_r+0x89a>
   16f48:	f7ff ba00 	b.w	1634c <__ssvfscanf_r+0x1d8>
   16f4c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16f50:	4630      	mov	r0, r6
   16f52:	4651      	mov	r1, sl
   16f54:	f7f9 fefc 	bl	10d50 <realloc>
   16f58:	4606      	mov	r6, r0
   16f5a:	2800      	cmp	r0, #0
   16f5c:	f000 8339 	beq.w	175d2 <__ssvfscanf_r+0x145e>
   16f60:	4405      	add	r5, r0
   16f62:	f8c9 0000 	str.w	r0, [r9]
   16f66:	e777      	b.n	16e58 <__ssvfscanf_r+0xce4>
   16f68:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16f6c:	4bbc      	ldr	r3, [pc, #752]	; (17260 <__ssvfscanf_r+0x10ec>)
   16f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16f70:	2310      	movs	r3, #16
   16f72:	64f9      	str	r1, [r7, #76]	; 0x4c
   16f74:	63bb      	str	r3, [r7, #56]	; 0x38
   16f76:	2503      	movs	r5, #3
   16f78:	f7ff ba18 	b.w	163ac <__ssvfscanf_r+0x238>
   16f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f7e:	3301      	adds	r3, #1
   16f80:	637b      	str	r3, [r7, #52]	; 0x34
   16f82:	693b      	ldr	r3, [r7, #16]
   16f84:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16f88:	2b00      	cmp	r3, #0
   16f8a:	f43f aafe 	beq.w	1658a <__ssvfscanf_r+0x416>
   16f8e:	693b      	ldr	r3, [r7, #16]
   16f90:	3b01      	subs	r3, #1
   16f92:	613b      	str	r3, [r7, #16]
   16f94:	f7ff bafa 	b.w	1658c <__ssvfscanf_r+0x418>
   16f98:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   16f9c:	f7ff bbd1 	b.w	16742 <__ssvfscanf_r+0x5ce>
   16fa0:	0722      	lsls	r2, r4, #28
   16fa2:	f140 81c7 	bpl.w	17334 <__ssvfscanf_r+0x11c0>
   16fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16fa8:	f853 2b04 	ldr.w	r2, [r3], #4
   16fac:	633b      	str	r3, [r7, #48]	; 0x30
   16fae:	7010      	strb	r0, [r2, #0]
   16fb0:	f7ff bbf3 	b.w	1679a <__ssvfscanf_r+0x626>
   16fb4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16fb8:	465a      	mov	r2, fp
   16fba:	4648      	mov	r0, r9
   16fbc:	3d01      	subs	r5, #1
   16fbe:	f002 fa43 	bl	19448 <_sungetc_r>
   16fc2:	f7ff bbd5 	b.w	16770 <__ssvfscanf_r+0x5fc>
   16fc6:	69fb      	ldr	r3, [r7, #28]
   16fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16fca:	4293      	cmp	r3, r2
   16fcc:	f43f ab2d 	beq.w	1662a <__ssvfscanf_r+0x4b6>
   16fd0:	1a9a      	subs	r2, r3, r2
   16fd2:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   16fd6:	429d      	cmp	r5, r3
   16fd8:	bf28      	it	cs
   16fda:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   16fde:	49a1      	ldr	r1, [pc, #644]	; (17264 <__ssvfscanf_r+0x10f0>)
   16fe0:	4628      	mov	r0, r5
   16fe2:	f7fb f9c3 	bl	1236c <sprintf>
   16fe6:	f7ff bb20 	b.w	1662a <__ssvfscanf_r+0x4b6>
   16fea:	06e2      	lsls	r2, r4, #27
   16fec:	f100 8131 	bmi.w	17252 <__ssvfscanf_r+0x10de>
   16ff0:	0723      	lsls	r3, r4, #28
   16ff2:	f100 81ba 	bmi.w	1736a <__ssvfscanf_r+0x11f6>
   16ff6:	0766      	lsls	r6, r4, #29
   16ff8:	f140 82b4 	bpl.w	17564 <__ssvfscanf_r+0x13f0>
   16ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16ffe:	64f9      	str	r1, [r7, #76]	; 0x4c
   17000:	f853 2b04 	ldr.w	r2, [r3], #4
   17004:	633b      	str	r3, [r7, #48]	; 0x30
   17006:	f8a2 a000 	strh.w	sl, [r2]
   1700a:	f7ff b8da 	b.w	161c2 <__ssvfscanf_r+0x4e>
   1700e:	0723      	lsls	r3, r4, #28
   17010:	f47f a9a5 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   17014:	7842      	ldrb	r2, [r0, #1]
   17016:	2a68      	cmp	r2, #104	; 0x68
   17018:	f000 8186 	beq.w	17328 <__ssvfscanf_r+0x11b4>
   1701c:	f044 0404 	orr.w	r4, r4, #4
   17020:	4608      	mov	r0, r1
   17022:	f7ff b92f 	b.w	16284 <__ssvfscanf_r+0x110>
   17026:	4b8e      	ldr	r3, [pc, #568]	; (17260 <__ssvfscanf_r+0x10ec>)
   17028:	62fb      	str	r3, [r7, #44]	; 0x2c
   1702a:	230a      	movs	r3, #10
   1702c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1702e:	63bb      	str	r3, [r7, #56]	; 0x38
   17030:	2503      	movs	r5, #3
   17032:	f7ff b9bb 	b.w	163ac <__ssvfscanf_r+0x238>
   17036:	4b8c      	ldr	r3, [pc, #560]	; (17268 <__ssvfscanf_r+0x10f4>)
   17038:	62fb      	str	r3, [r7, #44]	; 0x2c
   1703a:	2300      	movs	r3, #0
   1703c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1703e:	63bb      	str	r3, [r7, #56]	; 0x38
   17040:	2503      	movs	r5, #3
   17042:	f7ff b9b3 	b.w	163ac <__ssvfscanf_r+0x238>
   17046:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1704a:	e78f      	b.n	16f6c <__ssvfscanf_r+0xdf8>
   1704c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   17050:	f000 fdde 	bl	17c10 <__sccl>
   17054:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   17058:	64f8      	str	r0, [r7, #76]	; 0x4c
   1705a:	2501      	movs	r5, #1
   1705c:	f7ff b9a6 	b.w	163ac <__ssvfscanf_r+0x238>
   17060:	0722      	lsls	r2, r4, #28
   17062:	f47f a97c 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   17066:	7842      	ldrb	r2, [r0, #1]
   17068:	2a6c      	cmp	r2, #108	; 0x6c
   1706a:	f000 8157 	beq.w	1731c <__ssvfscanf_r+0x11a8>
   1706e:	f044 0401 	orr.w	r4, r4, #1
   17072:	4608      	mov	r0, r1
   17074:	f7ff b906 	b.w	16284 <__ssvfscanf_r+0x110>
   17078:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1707c:	f47f a96f 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   17080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17082:	2a00      	cmp	r2, #0
   17084:	f000 81e7 	beq.w	17456 <__ssvfscanf_r+0x12e2>
   17088:	7842      	ldrb	r2, [r0, #1]
   1708a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1708e:	4608      	mov	r0, r1
   17090:	f7ff b8f8 	b.w	16284 <__ssvfscanf_r+0x110>
   17094:	ea58 0804 	orrs.w	r8, r8, r4
   17098:	f47f a961 	bne.w	1635e <__ssvfscanf_r+0x1ea>
   1709c:	7842      	ldrb	r2, [r0, #1]
   1709e:	2410      	movs	r4, #16
   170a0:	4608      	mov	r0, r1
   170a2:	f7ff b8ef 	b.w	16284 <__ssvfscanf_r+0x110>
   170a6:	64f9      	str	r1, [r7, #76]	; 0x4c
   170a8:	f7ff b8a7 	b.w	161fa <__ssvfscanf_r+0x86>
   170ac:	2300      	movs	r3, #0
   170ae:	623b      	str	r3, [r7, #32]
   170b0:	62bb      	str	r3, [r7, #40]	; 0x28
   170b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   170b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   170b8:	64bb      	str	r3, [r7, #72]	; 0x48
   170ba:	f7ff bba9 	b.w	16810 <__ssvfscanf_r+0x69c>
   170be:	2300      	movs	r3, #0
   170c0:	e9c7 3306 	strd	r3, r3, [r7, #24]
   170c4:	623b      	str	r3, [r7, #32]
   170c6:	f107 0454 	add.w	r4, r7, #84	; 0x54
   170ca:	e429      	b.n	16920 <__ssvfscanf_r+0x7ac>
   170cc:	f8db 3000 	ldr.w	r3, [fp]
   170d0:	f107 0270 	add.w	r2, r7, #112	; 0x70
   170d4:	4611      	mov	r1, r2
   170d6:	781a      	ldrb	r2, [r3, #0]
   170d8:	5c8a      	ldrb	r2, [r1, r2]
   170da:	2a00      	cmp	r2, #0
   170dc:	f43f a93f 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   170e0:	3301      	adds	r3, #1
   170e2:	f8cb 3000 	str.w	r3, [fp]
   170e6:	f8db 3004 	ldr.w	r3, [fp, #4]
   170ea:	f1b8 0f01 	cmp.w	r8, #1
   170ee:	f103 33ff 	add.w	r3, r3, #4294967295
   170f2:	f8cb 3004 	str.w	r3, [fp, #4]
   170f6:	bf18      	it	ne
   170f8:	460c      	movne	r4, r1
   170fa:	d114      	bne.n	17126 <__ssvfscanf_r+0xfb2>
   170fc:	f7ff bb53 	b.w	167a6 <__ssvfscanf_r+0x632>
   17100:	f8db 3000 	ldr.w	r3, [fp]
   17104:	781a      	ldrb	r2, [r3, #0]
   17106:	5ca2      	ldrb	r2, [r4, r2]
   17108:	3301      	adds	r3, #1
   1710a:	2a00      	cmp	r2, #0
   1710c:	f43f ab4b 	beq.w	167a6 <__ssvfscanf_r+0x632>
   17110:	f8cb 3000 	str.w	r3, [fp]
   17114:	f8db 3004 	ldr.w	r3, [fp, #4]
   17118:	3501      	adds	r5, #1
   1711a:	3b01      	subs	r3, #1
   1711c:	4545      	cmp	r5, r8
   1711e:	f8cb 3004 	str.w	r3, [fp, #4]
   17122:	f43f ab40 	beq.w	167a6 <__ssvfscanf_r+0x632>
   17126:	2b00      	cmp	r3, #0
   17128:	dcea      	bgt.n	17100 <__ssvfscanf_r+0xf8c>
   1712a:	4659      	mov	r1, fp
   1712c:	4648      	mov	r0, r9
   1712e:	f002 f9cb 	bl	194c8 <__ssrefill_r>
   17132:	2800      	cmp	r0, #0
   17134:	d0e4      	beq.n	17100 <__ssvfscanf_r+0xf8c>
   17136:	44aa      	add	sl, r5
   17138:	f7ff b843 	b.w	161c2 <__ssvfscanf_r+0x4e>
   1713c:	ee18 0a10 	vmov	r0, s16
   17140:	4659      	mov	r1, fp
   17142:	f002 f9c1 	bl	194c8 <__ssrefill_r>
   17146:	2800      	cmp	r0, #0
   17148:	f43f ae8e 	beq.w	16e68 <__ssvfscanf_r+0xcf4>
   1714c:	42b5      	cmp	r5, r6
   1714e:	4654      	mov	r4, sl
   17150:	ee18 9a10 	vmov	r9, s16
   17154:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   17158:	f47f ae91 	bne.w	16e7e <__ssvfscanf_r+0xd0a>
   1715c:	f7ff b8f6 	b.w	1634c <__ssvfscanf_r+0x1d8>
   17160:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   17164:	e428      	b.n	169b8 <__ssvfscanf_r+0x844>
   17166:	6823      	ldr	r3, [r4, #0]
   17168:	2b04      	cmp	r3, #4
   1716a:	f47f ac32 	bne.w	169d2 <__ssvfscanf_r+0x85e>
   1716e:	e432      	b.n	169d6 <__ssvfscanf_r+0x862>
   17170:	1c83      	adds	r3, r0, #2
   17172:	f040 8339 	bne.w	177e8 <__ssvfscanf_r+0x1674>
   17176:	f8db 3004 	ldr.w	r3, [fp, #4]
   1717a:	2b00      	cmp	r3, #0
   1717c:	f340 81d7 	ble.w	1752e <__ssvfscanf_r+0x13ba>
   17180:	f8db 3000 	ldr.w	r3, [fp]
   17184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17186:	781b      	ldrb	r3, [r3, #0]
   17188:	5cd3      	ldrb	r3, [r2, r3]
   1718a:	0718      	lsls	r0, r3, #28
   1718c:	d403      	bmi.n	17196 <__ssvfscanf_r+0x1022>
   1718e:	f1b8 0f00 	cmp.w	r8, #0
   17192:	f47f ab49 	bne.w	16828 <__ssvfscanf_r+0x6b4>
   17196:	627c      	str	r4, [r7, #36]	; 0x24
   17198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1719a:	2b00      	cmp	r3, #0
   1719c:	f47f a811 	bne.w	161c2 <__ssvfscanf_r+0x4e>
   171a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   171a2:	6013      	str	r3, [r2, #0]
   171a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   171a6:	2b00      	cmp	r3, #0
   171a8:	f43f adfc 	beq.w	16da4 <__ssvfscanf_r+0xc30>
   171ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   171ae:	1ad1      	subs	r1, r2, r3
   171b0:	108b      	asrs	r3, r1, #2
   171b2:	6a3a      	ldr	r2, [r7, #32]
   171b4:	3301      	adds	r3, #1
   171b6:	429a      	cmp	r2, r3
   171b8:	f67f adf4 	bls.w	16da4 <__ssvfscanf_r+0xc30>
   171bc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   171be:	3104      	adds	r1, #4
   171c0:	6820      	ldr	r0, [r4, #0]
   171c2:	f7f9 fdc5 	bl	10d50 <realloc>
   171c6:	2800      	cmp	r0, #0
   171c8:	f47f ac3a 	bne.w	16a40 <__ssvfscanf_r+0x8cc>
   171cc:	e5ea      	b.n	16da4 <__ssvfscanf_r+0xc30>
   171ce:	f853 2b04 	ldr.w	r2, [r3], #4
   171d2:	ed82 0b00 	vstr	d0, [r2]
   171d6:	633b      	str	r3, [r7, #48]	; 0x30
   171d8:	e5e4      	b.n	16da4 <__ssvfscanf_r+0xc30>
   171da:	68fd      	ldr	r5, [r7, #12]
   171dc:	6a39      	ldr	r1, [r7, #32]
   171de:	687e      	ldr	r6, [r7, #4]
   171e0:	4628      	mov	r0, r5
   171e2:	4642      	mov	r2, r8
   171e4:	46a3      	mov	fp, r4
   171e6:	68bc      	ldr	r4, [r7, #8]
   171e8:	f000 fd56 	bl	17c98 <stpncpy>
   171ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   171ee:	61fb      	str	r3, [r7, #28]
   171f0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   171f4:	3e01      	subs	r6, #1
   171f6:	4605      	mov	r5, r0
   171f8:	f7ff b9c8 	b.w	1658c <__ssvfscanf_r+0x418>
   171fc:	69f8      	ldr	r0, [r7, #28]
   171fe:	00d9      	lsls	r1, r3, #3
   17200:	461d      	mov	r5, r3
   17202:	f7f9 fda5 	bl	10d50 <realloc>
   17206:	61f8      	str	r0, [r7, #28]
   17208:	2800      	cmp	r0, #0
   1720a:	f000 8264 	beq.w	176d6 <__ssvfscanf_r+0x1562>
   1720e:	6a3a      	ldr	r2, [r7, #32]
   17210:	006b      	lsls	r3, r5, #1
   17212:	eb00 0804 	add.w	r8, r0, r4
   17216:	6010      	str	r0, [r2, #0]
   17218:	61bb      	str	r3, [r7, #24]
   1721a:	f7ff bbea 	b.w	169f2 <__ssvfscanf_r+0x87e>
   1721e:	2e02      	cmp	r6, #2
   17220:	f240 82c4 	bls.w	177ac <__ssvfscanf_r+0x1638>
   17224:	2e03      	cmp	r6, #3
   17226:	f43f a9d3 	beq.w	165d0 <__ssvfscanf_r+0x45c>
   1722a:	3e04      	subs	r6, #4
   1722c:	fa5f f886 	uxtb.w	r8, r6
   17230:	ea6f 0308 	mvn.w	r3, r8
   17234:	18ee      	adds	r6, r5, r3
   17236:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1723a:	465a      	mov	r2, fp
   1723c:	4648      	mov	r0, r9
   1723e:	f002 f903 	bl	19448 <_sungetc_r>
   17242:	42ae      	cmp	r6, r5
   17244:	d1f7      	bne.n	17236 <__ssvfscanf_r+0x10c2>
   17246:	f10a 3aff 	add.w	sl, sl, #4294967295
   1724a:	ebaa 0a08 	sub.w	sl, sl, r8
   1724e:	f7ff b9bf 	b.w	165d0 <__ssvfscanf_r+0x45c>
   17252:	64f9      	str	r1, [r7, #76]	; 0x4c
   17254:	f7fe bfb5 	b.w	161c2 <__ssvfscanf_r+0x4e>
   17258:	2303      	movs	r3, #3
   1725a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1725c:	f7ff b993 	b.w	16586 <__ssvfscanf_r+0x412>
   17260:	00018d8d 	.word	0x00018d8d
   17264:	2000106c 	.word	0x2000106c
   17268:	00012101 	.word	0x00012101
   1726c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17270:	4293      	cmp	r3, r2
   17272:	f200 8297 	bhi.w	177a4 <__ssvfscanf_r+0x1630>
   17276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17278:	3308      	adds	r3, #8
   1727a:	b29b      	uxth	r3, r3
   1727c:	6810      	ldr	r0, [r2, #0]
   1727e:	63f8      	str	r0, [r7, #60]	; 0x3c
   17280:	0099      	lsls	r1, r3, #2
   17282:	637b      	str	r3, [r7, #52]	; 0x34
   17284:	f7f9 fd64 	bl	10d50 <realloc>
   17288:	2800      	cmp	r0, #0
   1728a:	f000 827b 	beq.w	17784 <__ssvfscanf_r+0x1610>
   1728e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17292:	8093      	strh	r3, [r2, #4]
   17294:	6010      	str	r0, [r2, #0]
   17296:	e542      	b.n	16d1e <__ssvfscanf_r+0xbaa>
   17298:	2101      	movs	r1, #1
   1729a:	e57a      	b.n	16d92 <__ssvfscanf_r+0xc1e>
   1729c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   172a0:	4293      	cmp	r3, r2
   172a2:	f200 8293 	bhi.w	177cc <__ssvfscanf_r+0x1658>
   172a6:	3308      	adds	r3, #8
   172a8:	b29e      	uxth	r6, r3
   172aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   172ac:	00b1      	lsls	r1, r6, #2
   172ae:	6818      	ldr	r0, [r3, #0]
   172b0:	f7f9 fd4e 	bl	10d50 <realloc>
   172b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   172b6:	2800      	cmp	r0, #0
   172b8:	f000 823e 	beq.w	17738 <__ssvfscanf_r+0x15c4>
   172bc:	809e      	strh	r6, [r3, #4]
   172be:	6018      	str	r0, [r3, #0]
   172c0:	f7ff ba9b 	b.w	167fa <__ssvfscanf_r+0x686>
   172c4:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   172c8:	4293      	cmp	r3, r2
   172ca:	f200 827f 	bhi.w	177cc <__ssvfscanf_r+0x1658>
   172ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   172d0:	3308      	adds	r3, #8
   172d2:	b29b      	uxth	r3, r3
   172d4:	0099      	lsls	r1, r3, #2
   172d6:	6810      	ldr	r0, [r2, #0]
   172d8:	64bb      	str	r3, [r7, #72]	; 0x48
   172da:	f7f9 fd39 	bl	10d50 <realloc>
   172de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   172e0:	2800      	cmp	r0, #0
   172e2:	f000 8228 	beq.w	17736 <__ssvfscanf_r+0x15c2>
   172e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   172e8:	8093      	strh	r3, [r2, #4]
   172ea:	6010      	str	r0, [r2, #0]
   172ec:	f7ff bb0e 	b.w	1690c <__ssvfscanf_r+0x798>
   172f0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   172f4:	4293      	cmp	r3, r2
   172f6:	f200 8255 	bhi.w	177a4 <__ssvfscanf_r+0x1630>
   172fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   172fc:	3308      	adds	r3, #8
   172fe:	b29b      	uxth	r3, r3
   17300:	6810      	ldr	r0, [r2, #0]
   17302:	63f8      	str	r0, [r7, #60]	; 0x3c
   17304:	0099      	lsls	r1, r3, #2
   17306:	637b      	str	r3, [r7, #52]	; 0x34
   17308:	f7f9 fd22 	bl	10d50 <realloc>
   1730c:	2800      	cmp	r0, #0
   1730e:	f000 8239 	beq.w	17784 <__ssvfscanf_r+0x1610>
   17312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17316:	8093      	strh	r3, [r2, #4]
   17318:	6010      	str	r0, [r2, #0]
   1731a:	e570      	b.n	16dfe <__ssvfscanf_r+0xc8a>
   1731c:	7882      	ldrb	r2, [r0, #2]
   1731e:	f044 0402 	orr.w	r4, r4, #2
   17322:	3002      	adds	r0, #2
   17324:	f7fe bfae 	b.w	16284 <__ssvfscanf_r+0x110>
   17328:	7882      	ldrb	r2, [r0, #2]
   1732a:	f044 0408 	orr.w	r4, r4, #8
   1732e:	3002      	adds	r0, #2
   17330:	f7fe bfa8 	b.w	16284 <__ssvfscanf_r+0x110>
   17334:	0763      	lsls	r3, r4, #29
   17336:	d458      	bmi.n	173ea <__ssvfscanf_r+0x1276>
   17338:	f014 0201 	ands.w	r2, r4, #1
   1733c:	f47f aa28 	bne.w	16790 <__ssvfscanf_r+0x61c>
   17340:	07a6      	lsls	r6, r4, #30
   17342:	f57f aa25 	bpl.w	16790 <__ssvfscanf_r+0x61c>
   17346:	4bb3      	ldr	r3, [pc, #716]	; (17614 <__ssvfscanf_r+0x14a0>)
   17348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1734a:	4299      	cmp	r1, r3
   1734c:	4648      	mov	r0, r9
   1734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   17352:	f000 823d 	beq.w	177d0 <__ssvfscanf_r+0x165c>
   17356:	f001 fdd1 	bl	18efc <_strtoll_r>
   1735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1735c:	f853 2b04 	ldr.w	r2, [r3], #4
   17360:	633b      	str	r3, [r7, #48]	; 0x30
   17362:	e9c2 0100 	strd	r0, r1, [r2]
   17366:	f7ff ba18 	b.w	1679a <__ssvfscanf_r+0x626>
   1736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1736c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1736e:	f853 2b04 	ldr.w	r2, [r3], #4
   17372:	633b      	str	r3, [r7, #48]	; 0x30
   17374:	f882 a000 	strb.w	sl, [r2]
   17378:	f7fe bf23 	b.w	161c2 <__ssvfscanf_r+0x4e>
   1737c:	f8db 3000 	ldr.w	r3, [fp]
   17380:	4ea5      	ldr	r6, [pc, #660]	; (17618 <__ssvfscanf_r+0x14a4>)
   17382:	781a      	ldrb	r2, [r3, #0]
   17384:	5cb2      	ldrb	r2, [r6, r2]
   17386:	0712      	lsls	r2, r2, #28
   17388:	f53e af1b 	bmi.w	161c2 <__ssvfscanf_r+0x4e>
   1738c:	3301      	adds	r3, #1
   1738e:	f8cb 3000 	str.w	r3, [fp]
   17392:	f8db 3004 	ldr.w	r3, [fp, #4]
   17396:	f1b8 0f01 	cmp.w	r8, #1
   1739a:	f103 33ff 	add.w	r3, r3, #4294967295
   1739e:	f8cb 3004 	str.w	r3, [fp, #4]
   173a2:	bf08      	it	eq
   173a4:	f10a 0a01 	addeq.w	sl, sl, #1
   173a8:	f43e af0b 	beq.w	161c2 <__ssvfscanf_r+0x4e>
   173ac:	2401      	movs	r4, #1
   173ae:	e011      	b.n	173d4 <__ssvfscanf_r+0x1260>
   173b0:	f8db 3000 	ldr.w	r3, [fp]
   173b4:	781a      	ldrb	r2, [r3, #0]
   173b6:	5cb2      	ldrb	r2, [r6, r2]
   173b8:	0715      	lsls	r5, r2, #28
   173ba:	f103 0301 	add.w	r3, r3, #1
   173be:	d411      	bmi.n	173e4 <__ssvfscanf_r+0x1270>
   173c0:	f8cb 3000 	str.w	r3, [fp]
   173c4:	f8db 3004 	ldr.w	r3, [fp, #4]
   173c8:	3401      	adds	r4, #1
   173ca:	3b01      	subs	r3, #1
   173cc:	4544      	cmp	r4, r8
   173ce:	f8cb 3004 	str.w	r3, [fp, #4]
   173d2:	d007      	beq.n	173e4 <__ssvfscanf_r+0x1270>
   173d4:	2b00      	cmp	r3, #0
   173d6:	dceb      	bgt.n	173b0 <__ssvfscanf_r+0x123c>
   173d8:	4659      	mov	r1, fp
   173da:	4648      	mov	r0, r9
   173dc:	f002 f874 	bl	194c8 <__ssrefill_r>
   173e0:	2800      	cmp	r0, #0
   173e2:	d0e5      	beq.n	173b0 <__ssvfscanf_r+0x123c>
   173e4:	44a2      	add	sl, r4
   173e6:	f7fe beec 	b.w	161c2 <__ssvfscanf_r+0x4e>
   173ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   173ec:	f853 2b04 	ldr.w	r2, [r3], #4
   173f0:	633b      	str	r3, [r7, #48]	; 0x30
   173f2:	8010      	strh	r0, [r2, #0]
   173f4:	f7ff b9d1 	b.w	1679a <__ssvfscanf_r+0x626>
   173f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   173fa:	2b00      	cmp	r3, #0
   173fc:	f000 816e 	beq.w	176dc <__ssvfscanf_r+0x1568>
   17400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17402:	f8d3 8000 	ldr.w	r8, [r3]
   17406:	88de      	ldrh	r6, [r3, #6]
   17408:	b176      	cbz	r6, 17428 <__ssvfscanf_r+0x12b4>
   1740a:	2400      	movs	r4, #0
   1740c:	f1a8 0504 	sub.w	r5, r8, #4
   17410:	46a1      	mov	r9, r4
   17412:	f855 3f04 	ldr.w	r3, [r5, #4]!
   17416:	6818      	ldr	r0, [r3, #0]
   17418:	f7f9 f9d6 	bl	107c8 <free>
   1741c:	3401      	adds	r4, #1
   1741e:	682b      	ldr	r3, [r5, #0]
   17420:	42a6      	cmp	r6, r4
   17422:	f8c3 9000 	str.w	r9, [r3]
   17426:	d1f4      	bne.n	17412 <__ssvfscanf_r+0x129e>
   17428:	f04f 33ff 	mov.w	r3, #4294967295
   1742c:	647b      	str	r3, [r7, #68]	; 0x44
   1742e:	f1b8 0f00 	cmp.w	r8, #0
   17432:	f47e af9c 	bne.w	1636e <__ssvfscanf_r+0x1fa>
   17436:	f7fe bf9d 	b.w	16374 <__ssvfscanf_r+0x200>
   1743a:	4878      	ldr	r0, [pc, #480]	; (1761c <__ssvfscanf_r+0x14a8>)
   1743c:	633b      	str	r3, [r7, #48]	; 0x30
   1743e:	f7fb fd97 	bl	12f70 <nanf>
   17442:	ed84 0a00 	vstr	s0, [r4]
   17446:	e4ad      	b.n	16da4 <__ssvfscanf_r+0xc30>
   17448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1744a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1744c:	f852 5b04 	ldr.w	r5, [r2], #4
   17450:	633a      	str	r2, [r7, #48]	; 0x30
   17452:	64bc      	str	r4, [r7, #72]	; 0x48
   17454:	e46c      	b.n	16d30 <__ssvfscanf_r+0xbbc>
   17456:	b082      	sub	sp, #8
   17458:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1745c:	ab02      	add	r3, sp, #8
   1745e:	643b      	str	r3, [r7, #64]	; 0x40
   17460:	e612      	b.n	17088 <__ssvfscanf_r+0xf14>
   17462:	637b      	str	r3, [r7, #52]	; 0x34
   17464:	0053      	lsls	r3, r2, #1
   17466:	4620      	mov	r0, r4
   17468:	4619      	mov	r1, r3
   1746a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1746c:	f7f9 fc70 	bl	10d50 <realloc>
   17470:	4604      	mov	r4, r0
   17472:	2800      	cmp	r0, #0
   17474:	f000 80ad 	beq.w	175d2 <__ssvfscanf_r+0x145e>
   17478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1747a:	1985      	adds	r5, r0, r6
   1747c:	6018      	str	r0, [r3, #0]
   1747e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17480:	e475      	b.n	16d6e <__ssvfscanf_r+0xbfa>
   17482:	697d      	ldr	r5, [r7, #20]
   17484:	4629      	mov	r1, r5
   17486:	230a      	movs	r3, #10
   17488:	3101      	adds	r1, #1
   1748a:	4648      	mov	r0, r9
   1748c:	f7fa fe38 	bl	12100 <_strtol_r>
   17490:	69bb      	ldr	r3, [r7, #24]
   17492:	1ac2      	subs	r2, r0, r3
   17494:	e59d      	b.n	16fd2 <__ssvfscanf_r+0xe5e>
   17496:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1749a:	f853 1b04 	ldr.w	r1, [r3], #4
   1749e:	623a      	str	r2, [r7, #32]
   174a0:	64b9      	str	r1, [r7, #72]	; 0x48
   174a2:	633b      	str	r3, [r7, #48]	; 0x30
   174a4:	62ba      	str	r2, [r7, #40]	; 0x28
   174a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   174a8:	f7ff b9b2 	b.w	16810 <__ssvfscanf_r+0x69c>
   174ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   174ae:	64bc      	str	r4, [r7, #72]	; 0x48
   174b0:	f853 5b04 	ldr.w	r5, [r3], #4
   174b4:	633b      	str	r3, [r7, #48]	; 0x30
   174b6:	e4aa      	b.n	16e0e <__ssvfscanf_r+0xc9a>
   174b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   174ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   174bc:	f853 4b04 	ldr.w	r4, [r3], #4
   174c0:	61ba      	str	r2, [r7, #24]
   174c2:	e9c7 2207 	strd	r2, r2, [r7, #28]
   174c6:	633b      	str	r3, [r7, #48]	; 0x30
   174c8:	f7ff ba2a 	b.w	16920 <__ssvfscanf_r+0x7ac>
   174cc:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   174ce:	6820      	ldr	r0, [r4, #0]
   174d0:	f7f9 fc3e 	bl	10d50 <realloc>
   174d4:	2800      	cmp	r0, #0
   174d6:	f47f aab3 	bne.w	16a40 <__ssvfscanf_r+0x8cc>
   174da:	e463      	b.n	16da4 <__ssvfscanf_r+0xc30>
   174dc:	4659      	mov	r1, fp
   174de:	4648      	mov	r0, r9
   174e0:	637b      	str	r3, [r7, #52]	; 0x34
   174e2:	f001 fff1 	bl	194c8 <__ssrefill_r>
   174e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   174e8:	2800      	cmp	r0, #0
   174ea:	f43f ac49 	beq.w	16d80 <__ssvfscanf_r+0xc0c>
   174ee:	e44d      	b.n	16d8c <__ssvfscanf_r+0xc18>
   174f0:	6818      	ldr	r0, [r3, #0]
   174f2:	461c      	mov	r4, r3
   174f4:	f7f9 fc2c 	bl	10d50 <realloc>
   174f8:	2800      	cmp	r0, #0
   174fa:	f43f accc 	beq.w	16e96 <__ssvfscanf_r+0xd22>
   174fe:	6020      	str	r0, [r4, #0]
   17500:	e4c9      	b.n	16e96 <__ssvfscanf_r+0xd22>
   17502:	2500      	movs	r5, #0
   17504:	e637      	b.n	17176 <__ssvfscanf_r+0x1002>
   17506:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   17508:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1750c:	627e      	str	r6, [r7, #36]	; 0x24
   1750e:	4644      	mov	r4, r8
   17510:	2d00      	cmp	r5, #0
   17512:	f43f aa7c 	beq.w	16a0e <__ssvfscanf_r+0x89a>
   17516:	3d01      	subs	r5, #1
   17518:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1751c:	465a      	mov	r2, fp
   1751e:	5d59      	ldrb	r1, [r3, r5]
   17520:	4648      	mov	r0, r9
   17522:	f001 ff91 	bl	19448 <_sungetc_r>
   17526:	2d00      	cmp	r5, #0
   17528:	d1f5      	bne.n	17516 <__ssvfscanf_r+0x13a2>
   1752a:	f7ff ba70 	b.w	16a0e <__ssvfscanf_r+0x89a>
   1752e:	4659      	mov	r1, fp
   17530:	4648      	mov	r0, r9
   17532:	f001 ffc9 	bl	194c8 <__ssrefill_r>
   17536:	2800      	cmp	r0, #0
   17538:	f43f ae22 	beq.w	17180 <__ssvfscanf_r+0x100c>
   1753c:	627c      	str	r4, [r7, #36]	; 0x24
   1753e:	2d00      	cmp	r5, #0
   17540:	f47e af04 	bne.w	1634c <__ssvfscanf_r+0x1d8>
   17544:	e628      	b.n	17198 <__ssvfscanf_r+0x1024>
   17546:	627c      	str	r4, [r7, #36]	; 0x24
   17548:	2d00      	cmp	r5, #0
   1754a:	f43f ae25 	beq.w	17198 <__ssvfscanf_r+0x1024>
   1754e:	3d01      	subs	r5, #1
   17550:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   17554:	465a      	mov	r2, fp
   17556:	5d59      	ldrb	r1, [r3, r5]
   17558:	4648      	mov	r0, r9
   1755a:	f001 ff75 	bl	19448 <_sungetc_r>
   1755e:	2d00      	cmp	r5, #0
   17560:	d1f5      	bne.n	1754e <__ssvfscanf_r+0x13da>
   17562:	e619      	b.n	17198 <__ssvfscanf_r+0x1024>
   17564:	07e5      	lsls	r5, r4, #31
   17566:	d43c      	bmi.n	175e2 <__ssvfscanf_r+0x146e>
   17568:	07a4      	lsls	r4, r4, #30
   1756a:	d53a      	bpl.n	175e2 <__ssvfscanf_r+0x146e>
   1756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1756e:	64f9      	str	r1, [r7, #76]	; 0x4c
   17570:	f853 2b04 	ldr.w	r2, [r3], #4
   17574:	633b      	str	r3, [r7, #48]	; 0x30
   17576:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1757a:	f8c2 a000 	str.w	sl, [r2]
   1757e:	6053      	str	r3, [r2, #4]
   17580:	f7fe be1f 	b.w	161c2 <__ssvfscanf_r+0x4e>
   17584:	ee18 9a10 	vmov	r9, s16
   17588:	461e      	mov	r6, r3
   1758a:	f7ff b814 	b.w	165b6 <__ssvfscanf_r+0x442>
   1758e:	2301      	movs	r3, #1
   17590:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   17594:	64bb      	str	r3, [r7, #72]	; 0x48
   17596:	f7fe bff6 	b.w	16586 <__ssvfscanf_r+0x412>
   1759a:	f1b8 0f01 	cmp.w	r8, #1
   1759e:	bf38      	it	cc
   175a0:	f04f 0801 	movcc.w	r8, #1
   175a4:	f014 0301 	ands.w	r3, r4, #1
   175a8:	d13a      	bne.n	17620 <__ssvfscanf_r+0x14ac>
   175aa:	06e5      	lsls	r5, r4, #27
   175ac:	f100 8136 	bmi.w	1781c <__ssvfscanf_r+0x16a8>
   175b0:	0624      	lsls	r4, r4, #24
   175b2:	f140 814c 	bpl.w	1784e <__ssvfscanf_r+0x16da>
   175b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   175b8:	f853 5b04 	ldr.w	r5, [r3], #4
   175bc:	64bb      	str	r3, [r7, #72]	; 0x48
   175be:	2d00      	cmp	r5, #0
   175c0:	f43e aecd 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   175c4:	4640      	mov	r0, r8
   175c6:	f7f9 f8f7 	bl	107b8 <malloc>
   175ca:	4603      	mov	r3, r0
   175cc:	2800      	cmp	r0, #0
   175ce:	f040 80dc 	bne.w	1778a <__ssvfscanf_r+0x1616>
   175d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   175d4:	2b00      	cmp	r3, #0
   175d6:	f000 8081 	beq.w	176dc <__ssvfscanf_r+0x1568>
   175da:	f8d3 8000 	ldr.w	r8, [r3]
   175de:	88de      	ldrh	r6, [r3, #6]
   175e0:	e712      	b.n	17408 <__ssvfscanf_r+0x1294>
   175e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   175e4:	64f9      	str	r1, [r7, #76]	; 0x4c
   175e6:	f853 2b04 	ldr.w	r2, [r3], #4
   175ea:	f8c2 a000 	str.w	sl, [r2]
   175ee:	633b      	str	r3, [r7, #48]	; 0x30
   175f0:	f7fe bde7 	b.w	161c2 <__ssvfscanf_r+0x4e>
   175f4:	462b      	mov	r3, r5
   175f6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   175f8:	42ab      	cmp	r3, r5
   175fa:	f67e aeb0 	bls.w	1635e <__ssvfscanf_r+0x1ea>
   175fe:	461c      	mov	r4, r3
   17600:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   17604:	465a      	mov	r2, fp
   17606:	4648      	mov	r0, r9
   17608:	f001 ff1e 	bl	19448 <_sungetc_r>
   1760c:	42ac      	cmp	r4, r5
   1760e:	d1f7      	bne.n	17600 <__ssvfscanf_r+0x148c>
   17610:	f7fe bea5 	b.w	1635e <__ssvfscanf_r+0x1ea>
   17614:	00018d8d 	.word	0x00018d8d
   17618:	20001075 	.word	0x20001075
   1761c:	20000560 	.word	0x20000560
   17620:	f014 0310 	ands.w	r3, r4, #16
   17624:	637b      	str	r3, [r7, #52]	; 0x34
   17626:	d05e      	beq.n	176e6 <__ssvfscanf_r+0x1572>
   17628:	2500      	movs	r5, #0
   1762a:	63fd      	str	r5, [r7, #60]	; 0x3c
   1762c:	64bd      	str	r5, [r7, #72]	; 0x48
   1762e:	462e      	mov	r6, r5
   17630:	2400      	movs	r4, #0
   17632:	464b      	mov	r3, r9
   17634:	46c1      	mov	r9, r8
   17636:	46a8      	mov	r8, r5
   17638:	4625      	mov	r5, r4
   1763a:	461c      	mov	r4, r3
   1763c:	f7fb f95c 	bl	128f8 <__locale_mb_cur_max>
   17640:	42a8      	cmp	r0, r5
   17642:	f43e ae83 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   17646:	e9db 3200 	ldrd	r3, r2, [fp]
   1764a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1764e:	3a01      	subs	r2, #1
   17650:	e9cb 3200 	strd	r3, r2, [fp]
   17654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17656:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1765a:	2a03      	cmp	r2, #3
   1765c:	5541      	strb	r1, [r0, r5]
   1765e:	f105 0301 	add.w	r3, r5, #1
   17662:	f107 0568 	add.w	r5, r7, #104	; 0x68
   17666:	d102      	bne.n	1766e <__ssvfscanf_r+0x14fa>
   17668:	682a      	ldr	r2, [r5, #0]
   1766a:	2a04      	cmp	r2, #4
   1766c:	d006      	beq.n	1767c <__ssvfscanf_r+0x1508>
   1766e:	2208      	movs	r2, #8
   17670:	2100      	movs	r1, #0
   17672:	4628      	mov	r0, r5
   17674:	62bb      	str	r3, [r7, #40]	; 0x28
   17676:	f7fb f81f 	bl	126b8 <memset>
   1767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1767c:	9500      	str	r5, [sp, #0]
   1767e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   17682:	4631      	mov	r1, r6
   17684:	4620      	mov	r0, r4
   17686:	62bb      	str	r3, [r7, #40]	; 0x28
   17688:	f001 fd0a 	bl	190a0 <_mbrtowc_r>
   1768c:	1c43      	adds	r3, r0, #1
   1768e:	6278      	str	r0, [r7, #36]	; 0x24
   17690:	f43e ae5c 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   17694:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17696:	2800      	cmp	r0, #0
   17698:	f040 8147 	bne.w	1792a <__ssvfscanf_r+0x17b6>
   1769c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1769e:	b902      	cbnz	r2, 176a2 <__ssvfscanf_r+0x152e>
   176a0:	6032      	str	r2, [r6, #0]
   176a2:	449a      	add	sl, r3
   176a4:	f109 39ff 	add.w	r9, r9, #4294967295
   176a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176aa:	2b00      	cmp	r3, #0
   176ac:	f040 8175 	bne.w	1799a <__ssvfscanf_r+0x1826>
   176b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   176b2:	2b00      	cmp	r3, #0
   176b4:	f000 8170 	beq.w	17998 <__ssvfscanf_r+0x1824>
   176b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176ba:	1af5      	subs	r5, r6, r3
   176bc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   176c0:	f200 816a 	bhi.w	17998 <__ssvfscanf_r+0x1824>
   176c4:	4618      	mov	r0, r3
   176c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   176ca:	f7f9 fb41 	bl	10d50 <realloc>
   176ce:	63f8      	str	r0, [r7, #60]	; 0x3c
   176d0:	2800      	cmp	r0, #0
   176d2:	f040 815c 	bne.w	1798e <__ssvfscanf_r+0x181a>
   176d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   176d8:	2b00      	cmp	r3, #0
   176da:	d12d      	bne.n	17738 <__ssvfscanf_r+0x15c4>
   176dc:	f04f 33ff 	mov.w	r3, #4294967295
   176e0:	647b      	str	r3, [r7, #68]	; 0x44
   176e2:	f7fe be47 	b.w	16374 <__ssvfscanf_r+0x200>
   176e6:	0622      	lsls	r2, r4, #24
   176e8:	f140 808f 	bpl.w	1780a <__ssvfscanf_r+0x1696>
   176ec:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   176ee:	f854 3b04 	ldr.w	r3, [r4], #4
   176f2:	64bb      	str	r3, [r7, #72]	; 0x48
   176f4:	2b00      	cmp	r3, #0
   176f6:	f43e ae32 	beq.w	1635e <__ssvfscanf_r+0x1ea>
   176fa:	2080      	movs	r0, #128	; 0x80
   176fc:	f7f9 f85c 	bl	107b8 <malloc>
   17700:	4606      	mov	r6, r0
   17702:	2800      	cmp	r0, #0
   17704:	d0e7      	beq.n	176d6 <__ssvfscanf_r+0x1562>
   17706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17708:	6018      	str	r0, [r3, #0]
   1770a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1770c:	88dd      	ldrh	r5, [r3, #6]
   1770e:	889a      	ldrh	r2, [r3, #4]
   17710:	4295      	cmp	r5, r2
   17712:	f0c0 80b3 	bcc.w	1787c <__ssvfscanf_r+0x1708>
   17716:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1771a:	428a      	cmp	r2, r1
   1771c:	d856      	bhi.n	177cc <__ssvfscanf_r+0x1658>
   1771e:	3208      	adds	r2, #8
   17720:	b293      	uxth	r3, r2
   17722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17724:	63fb      	str	r3, [r7, #60]	; 0x3c
   17726:	0099      	lsls	r1, r3, #2
   17728:	6810      	ldr	r0, [r2, #0]
   1772a:	f7f9 fb11 	bl	10d50 <realloc>
   1772e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17730:	2800      	cmp	r0, #0
   17732:	f040 80ae 	bne.w	17892 <__ssvfscanf_r+0x171e>
   17736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17738:	88db      	ldrh	r3, [r3, #6]
   1773a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1773c:	461e      	mov	r6, r3
   1773e:	f8d2 8000 	ldr.w	r8, [r2]
   17742:	e661      	b.n	17408 <__ssvfscanf_r+0x1294>
   17744:	462b      	mov	r3, r5
   17746:	6abd      	ldr	r5, [r7, #40]	; 0x28
   17748:	42ab      	cmp	r3, r5
   1774a:	f67e ae08 	bls.w	1635e <__ssvfscanf_r+0x1ea>
   1774e:	461c      	mov	r4, r3
   17750:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   17754:	465a      	mov	r2, fp
   17756:	4648      	mov	r0, r9
   17758:	f001 fe76 	bl	19448 <_sungetc_r>
   1775c:	42ac      	cmp	r4, r5
   1775e:	d1f7      	bne.n	17750 <__ssvfscanf_r+0x15dc>
   17760:	f7fe bdfd 	b.w	1635e <__ssvfscanf_r+0x1ea>
   17764:	4610      	mov	r0, r2
   17766:	00d9      	lsls	r1, r3, #3
   17768:	461e      	mov	r6, r3
   1776a:	f7f9 faf1 	bl	10d50 <realloc>
   1776e:	62b8      	str	r0, [r7, #40]	; 0x28
   17770:	2800      	cmp	r0, #0
   17772:	d0b0      	beq.n	176d6 <__ssvfscanf_r+0x1562>
   17774:	1942      	adds	r2, r0, r5
   17776:	64ba      	str	r2, [r7, #72]	; 0x48
   17778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1777a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1777c:	6010      	str	r0, [r2, #0]
   1777e:	0073      	lsls	r3, r6, #1
   17780:	623b      	str	r3, [r7, #32]
   17782:	e4f8      	b.n	17176 <__ssvfscanf_r+0x1002>
   17784:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17788:	e63e      	b.n	17408 <__ssvfscanf_r+0x1294>
   1778a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1778c:	6028      	str	r0, [r5, #0]
   1778e:	88ce      	ldrh	r6, [r1, #6]
   17790:	888a      	ldrh	r2, [r1, #4]
   17792:	4296      	cmp	r6, r2
   17794:	f0c0 808e 	bcc.w	178b4 <__ssvfscanf_r+0x1740>
   17798:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1779c:	428a      	cmp	r2, r1
   1779e:	6338      	str	r0, [r7, #48]	; 0x30
   177a0:	f240 80a5 	bls.w	178ee <__ssvfscanf_r+0x177a>
   177a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   177a6:	f8d3 8000 	ldr.w	r8, [r3]
   177aa:	e62d      	b.n	17408 <__ssvfscanf_r+0x1294>
   177ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   177ae:	4295      	cmp	r5, r2
   177b0:	f67e add5 	bls.w	1635e <__ssvfscanf_r+0x1ea>
   177b4:	462c      	mov	r4, r5
   177b6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   177b8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   177bc:	465a      	mov	r2, fp
   177be:	4648      	mov	r0, r9
   177c0:	f001 fe42 	bl	19448 <_sungetc_r>
   177c4:	42ac      	cmp	r4, r5
   177c6:	d1f7      	bne.n	177b8 <__ssvfscanf_r+0x1644>
   177c8:	f7fe bdc9 	b.w	1635e <__ssvfscanf_r+0x1ea>
   177cc:	462b      	mov	r3, r5
   177ce:	e7b4      	b.n	1773a <__ssvfscanf_r+0x15c6>
   177d0:	f001 fc64 	bl	1909c <_strtoull_r>
   177d4:	e5c1      	b.n	1735a <__ssvfscanf_r+0x11e6>
   177d6:	f8d8 3000 	ldr.w	r3, [r8]
   177da:	461d      	mov	r5, r3
   177dc:	3301      	adds	r3, #1
   177de:	f47f a8d5 	bne.w	1698c <__ssvfscanf_r+0x818>
   177e2:	462a      	mov	r2, r5
   177e4:	f7ff b8e8 	b.w	169b8 <__ssvfscanf_r+0x844>
   177e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   177ea:	6818      	ldr	r0, [r3, #0]
   177ec:	f001 fcb4 	bl	19158 <iswspace>
   177f0:	2800      	cmp	r0, #0
   177f2:	f47f aea8 	bne.w	17546 <__ssvfscanf_r+0x13d2>
   177f6:	2c03      	cmp	r4, #3
   177f8:	44aa      	add	sl, r5
   177fa:	f47f a849 	bne.w	16890 <__ssvfscanf_r+0x71c>
   177fe:	6833      	ldr	r3, [r6, #0]
   17800:	2b04      	cmp	r3, #4
   17802:	f47f a845 	bne.w	16890 <__ssvfscanf_r+0x71c>
   17806:	f7ff b845 	b.w	16894 <__ssvfscanf_r+0x720>
   1780a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1780e:	f853 6b04 	ldr.w	r6, [r3], #4
   17812:	633b      	str	r3, [r7, #48]	; 0x30
   17814:	4615      	mov	r5, r2
   17816:	63fa      	str	r2, [r7, #60]	; 0x3c
   17818:	64ba      	str	r2, [r7, #72]	; 0x48
   1781a:	e709      	b.n	17630 <__ssvfscanf_r+0x14bc>
   1781c:	461c      	mov	r4, r3
   1781e:	f8db 3004 	ldr.w	r3, [fp, #4]
   17822:	4598      	cmp	r8, r3
   17824:	dd39      	ble.n	1789a <__ssvfscanf_r+0x1726>
   17826:	f8db 2000 	ldr.w	r2, [fp]
   1782a:	441a      	add	r2, r3
   1782c:	f8cb 2000 	str.w	r2, [fp]
   17830:	4659      	mov	r1, fp
   17832:	4648      	mov	r0, r9
   17834:	441c      	add	r4, r3
   17836:	eba8 0803 	sub.w	r8, r8, r3
   1783a:	f001 fe45 	bl	194c8 <__ssrefill_r>
   1783e:	2800      	cmp	r0, #0
   17840:	d0ed      	beq.n	1781e <__ssvfscanf_r+0x16aa>
   17842:	2c00      	cmp	r4, #0
   17844:	f43e ad82 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   17848:	44a2      	add	sl, r4
   1784a:	f7fe bcba 	b.w	161c2 <__ssvfscanf_r+0x4e>
   1784e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   17850:	4643      	mov	r3, r8
   17852:	6829      	ldr	r1, [r5, #0]
   17854:	f8cd b000 	str.w	fp, [sp]
   17858:	2201      	movs	r2, #1
   1785a:	4648      	mov	r0, r9
   1785c:	f001 fe52 	bl	19504 <_sfread_r>
   17860:	4604      	mov	r4, r0
   17862:	2800      	cmp	r0, #0
   17864:	f43e ad72 	beq.w	1634c <__ssvfscanf_r+0x1d8>
   17868:	3504      	adds	r5, #4
   1786a:	64bd      	str	r5, [r7, #72]	; 0x48
   1786c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1786e:	3301      	adds	r3, #1
   17870:	647b      	str	r3, [r7, #68]	; 0x44
   17872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17874:	633b      	str	r3, [r7, #48]	; 0x30
   17876:	44a2      	add	sl, r4
   17878:	f7fe bca3 	b.w	161c2 <__ssvfscanf_r+0x4e>
   1787c:	6818      	ldr	r0, [r3, #0]
   1787e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17880:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   17884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17886:	633c      	str	r4, [r7, #48]	; 0x30
   17888:	3501      	adds	r5, #1
   1788a:	80dd      	strh	r5, [r3, #6]
   1788c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1788e:	2520      	movs	r5, #32
   17890:	e6ce      	b.n	17630 <__ssvfscanf_r+0x14bc>
   17892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17894:	8093      	strh	r3, [r2, #4]
   17896:	6010      	str	r0, [r2, #0]
   17898:	e7f1      	b.n	1787e <__ssvfscanf_r+0x170a>
   1789a:	eba3 0308 	sub.w	r3, r3, r8
   1789e:	f8cb 3004 	str.w	r3, [fp, #4]
   178a2:	f8db 3000 	ldr.w	r3, [fp]
   178a6:	4444      	add	r4, r8
   178a8:	4443      	add	r3, r8
   178aa:	f8cb 3000 	str.w	r3, [fp]
   178ae:	44a2      	add	sl, r4
   178b0:	f7fe bc87 	b.w	161c2 <__ssvfscanf_r+0x4e>
   178b4:	680a      	ldr	r2, [r1, #0]
   178b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   178b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   178ba:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   178be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   178c0:	3601      	adds	r6, #1
   178c2:	b2b6      	uxth	r6, r6
   178c4:	80d6      	strh	r6, [r2, #6]
   178c6:	4619      	mov	r1, r3
   178c8:	f8cd b000 	str.w	fp, [sp]
   178cc:	4643      	mov	r3, r8
   178ce:	2201      	movs	r2, #1
   178d0:	4648      	mov	r0, r9
   178d2:	f001 fe17 	bl	19504 <_sfread_r>
   178d6:	4604      	mov	r4, r0
   178d8:	b1d8      	cbz	r0, 17912 <__ssvfscanf_r+0x179e>
   178da:	4580      	cmp	r8, r0
   178dc:	d9c6      	bls.n	1786c <__ssvfscanf_r+0x16f8>
   178de:	6828      	ldr	r0, [r5, #0]
   178e0:	4621      	mov	r1, r4
   178e2:	f7f9 fa35 	bl	10d50 <realloc>
   178e6:	2800      	cmp	r0, #0
   178e8:	d0c0      	beq.n	1786c <__ssvfscanf_r+0x16f8>
   178ea:	6028      	str	r0, [r5, #0]
   178ec:	e7be      	b.n	1786c <__ssvfscanf_r+0x16f8>
   178ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   178f0:	3208      	adds	r2, #8
   178f2:	b294      	uxth	r4, r2
   178f4:	681a      	ldr	r2, [r3, #0]
   178f6:	637a      	str	r2, [r7, #52]	; 0x34
   178f8:	4610      	mov	r0, r2
   178fa:	00a1      	lsls	r1, r4, #2
   178fc:	f7f9 fa28 	bl	10d50 <realloc>
   17900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17902:	63f8      	str	r0, [r7, #60]	; 0x3c
   17904:	2800      	cmp	r0, #0
   17906:	d05b      	beq.n	179c0 <__ssvfscanf_r+0x184c>
   17908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1790a:	809c      	strh	r4, [r3, #4]
   1790c:	6018      	str	r0, [r3, #0]
   1790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17910:	e7d2      	b.n	178b8 <__ssvfscanf_r+0x1744>
   17912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17914:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17918:	2b00      	cmp	r3, #0
   1791a:	f43f ad75 	beq.w	17408 <__ssvfscanf_r+0x1294>
   1791e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   17922:	065b      	lsls	r3, r3, #25
   17924:	f57e ad1d 	bpl.w	16362 <__ssvfscanf_r+0x1ee>
   17928:	e56a      	b.n	17400 <__ssvfscanf_r+0x128c>
   1792a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1792c:	3202      	adds	r2, #2
   1792e:	d11d      	bne.n	1796c <__ssvfscanf_r+0x17f8>
   17930:	f8db 2004 	ldr.w	r2, [fp, #4]
   17934:	2a00      	cmp	r2, #0
   17936:	461d      	mov	r5, r3
   17938:	f73f ae80 	bgt.w	1763c <__ssvfscanf_r+0x14c8>
   1793c:	4659      	mov	r1, fp
   1793e:	4620      	mov	r0, r4
   17940:	f001 fdc2 	bl	194c8 <__ssrefill_r>
   17944:	b9e0      	cbnz	r0, 17980 <__ssvfscanf_r+0x180c>
   17946:	f1b9 0f00 	cmp.w	r9, #0
   1794a:	f47f ae77 	bne.w	1763c <__ssvfscanf_r+0x14c8>
   1794e:	4645      	mov	r5, r8
   17950:	46a1      	mov	r9, r4
   17952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17954:	b123      	cbz	r3, 17960 <__ssvfscanf_r+0x17ec>
   17956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17958:	1af1      	subs	r1, r6, r3
   1795a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   1795e:	d827      	bhi.n	179b0 <__ssvfscanf_r+0x183c>
   17960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17962:	2b00      	cmp	r3, #0
   17964:	f47e ac2d 	bne.w	161c2 <__ssvfscanf_r+0x4e>
   17968:	f7ff ba1c 	b.w	16da4 <__ssvfscanf_r+0xc30>
   1796c:	449a      	add	sl, r3
   1796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17970:	2b03      	cmp	r3, #3
   17972:	f47f ae97 	bne.w	176a4 <__ssvfscanf_r+0x1530>
   17976:	682b      	ldr	r3, [r5, #0]
   17978:	2b04      	cmp	r3, #4
   1797a:	f47f ae93 	bne.w	176a4 <__ssvfscanf_r+0x1530>
   1797e:	e693      	b.n	176a8 <__ssvfscanf_r+0x1534>
   17980:	46a1      	mov	r9, r4
   17982:	462c      	mov	r4, r5
   17984:	4645      	mov	r5, r8
   17986:	2c00      	cmp	r4, #0
   17988:	d0e3      	beq.n	17952 <__ssvfscanf_r+0x17de>
   1798a:	f7fe bcdf 	b.w	1634c <__ssvfscanf_r+0x1d8>
   1798e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17990:	1946      	adds	r6, r0, r5
   17992:	6010      	str	r0, [r2, #0]
   17994:	ea4f 0848 	mov.w	r8, r8, lsl #1
   17998:	3604      	adds	r6, #4
   1799a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1799e:	2b00      	cmp	r3, #0
   179a0:	f04f 0500 	mov.w	r5, #0
   179a4:	ddca      	ble.n	1793c <__ssvfscanf_r+0x17c8>
   179a6:	f1b9 0f00 	cmp.w	r9, #0
   179aa:	f47f ae47 	bne.w	1763c <__ssvfscanf_r+0x14c8>
   179ae:	e7ce      	b.n	1794e <__ssvfscanf_r+0x17da>
   179b0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   179b2:	6820      	ldr	r0, [r4, #0]
   179b4:	f7f9 f9cc 	bl	10d50 <realloc>
   179b8:	2800      	cmp	r0, #0
   179ba:	d0d1      	beq.n	17960 <__ssvfscanf_r+0x17ec>
   179bc:	6020      	str	r0, [r4, #0]
   179be:	e7cf      	b.n	17960 <__ssvfscanf_r+0x17ec>
   179c0:	4690      	mov	r8, r2
   179c2:	e521      	b.n	17408 <__ssvfscanf_r+0x1294>

000179c4 <_fclose_r>:
   179c4:	b570      	push	{r4, r5, r6, lr}
   179c6:	2900      	cmp	r1, #0
   179c8:	d04b      	beq.n	17a62 <_fclose_r+0x9e>
   179ca:	4606      	mov	r6, r0
   179cc:	460c      	mov	r4, r1
   179ce:	b110      	cbz	r0, 179d6 <_fclose_r+0x12>
   179d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   179d2:	2b00      	cmp	r3, #0
   179d4:	d048      	beq.n	17a68 <_fclose_r+0xa4>
   179d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   179d8:	07d8      	lsls	r0, r3, #31
   179da:	d534      	bpl.n	17a46 <_fclose_r+0x82>
   179dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   179e0:	2b00      	cmp	r3, #0
   179e2:	d03e      	beq.n	17a62 <_fclose_r+0x9e>
   179e4:	4621      	mov	r1, r4
   179e6:	4630      	mov	r0, r6
   179e8:	f000 f850 	bl	17a8c <__sflush_r>
   179ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   179ee:	4605      	mov	r5, r0
   179f0:	b133      	cbz	r3, 17a00 <_fclose_r+0x3c>
   179f2:	69e1      	ldr	r1, [r4, #28]
   179f4:	4630      	mov	r0, r6
   179f6:	4798      	blx	r3
   179f8:	2800      	cmp	r0, #0
   179fa:	bfb8      	it	lt
   179fc:	f04f 35ff 	movlt.w	r5, #4294967295
   17a00:	89a3      	ldrh	r3, [r4, #12]
   17a02:	061a      	lsls	r2, r3, #24
   17a04:	d43c      	bmi.n	17a80 <_fclose_r+0xbc>
   17a06:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17a08:	b141      	cbz	r1, 17a1c <_fclose_r+0x58>
   17a0a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17a0e:	4299      	cmp	r1, r3
   17a10:	d002      	beq.n	17a18 <_fclose_r+0x54>
   17a12:	4630      	mov	r0, r6
   17a14:	f7fb fb46 	bl	130a4 <_free_r>
   17a18:	2300      	movs	r3, #0
   17a1a:	6323      	str	r3, [r4, #48]	; 0x30
   17a1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   17a1e:	b121      	cbz	r1, 17a2a <_fclose_r+0x66>
   17a20:	4630      	mov	r0, r6
   17a22:	f7fb fb3f 	bl	130a4 <_free_r>
   17a26:	2300      	movs	r3, #0
   17a28:	6463      	str	r3, [r4, #68]	; 0x44
   17a2a:	f7fa fc2b 	bl	12284 <__sfp_lock_acquire>
   17a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17a30:	2200      	movs	r2, #0
   17a32:	07db      	lsls	r3, r3, #31
   17a34:	81a2      	strh	r2, [r4, #12]
   17a36:	d51f      	bpl.n	17a78 <_fclose_r+0xb4>
   17a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17a3a:	f7fa fff5 	bl	12a28 <__retarget_lock_close_recursive>
   17a3e:	f7fa fc27 	bl	12290 <__sfp_lock_release>
   17a42:	4628      	mov	r0, r5
   17a44:	bd70      	pop	{r4, r5, r6, pc}
   17a46:	89a3      	ldrh	r3, [r4, #12]
   17a48:	0599      	lsls	r1, r3, #22
   17a4a:	d4cb      	bmi.n	179e4 <_fclose_r+0x20>
   17a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17a4e:	f7fa ffed 	bl	12a2c <__retarget_lock_acquire_recursive>
   17a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17a56:	2b00      	cmp	r3, #0
   17a58:	d1c4      	bne.n	179e4 <_fclose_r+0x20>
   17a5a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   17a5c:	f015 0501 	ands.w	r5, r5, #1
   17a60:	d005      	beq.n	17a6e <_fclose_r+0xaa>
   17a62:	2500      	movs	r5, #0
   17a64:	4628      	mov	r0, r5
   17a66:	bd70      	pop	{r4, r5, r6, pc}
   17a68:	f7fa fbee 	bl	12248 <__sinit>
   17a6c:	e7b3      	b.n	179d6 <_fclose_r+0x12>
   17a6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17a70:	f7fa ffde 	bl	12a30 <__retarget_lock_release_recursive>
   17a74:	4628      	mov	r0, r5
   17a76:	bd70      	pop	{r4, r5, r6, pc}
   17a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17a7a:	f7fa ffd9 	bl	12a30 <__retarget_lock_release_recursive>
   17a7e:	e7db      	b.n	17a38 <_fclose_r+0x74>
   17a80:	6921      	ldr	r1, [r4, #16]
   17a82:	4630      	mov	r0, r6
   17a84:	f7fb fb0e 	bl	130a4 <_free_r>
   17a88:	e7bd      	b.n	17a06 <_fclose_r+0x42>
   17a8a:	bf00      	nop

00017a8c <__sflush_r>:
   17a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   17a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a94:	460c      	mov	r4, r1
   17a96:	0711      	lsls	r1, r2, #28
   17a98:	4680      	mov	r8, r0
   17a9a:	d447      	bmi.n	17b2c <__sflush_r+0xa0>
   17a9c:	6863      	ldr	r3, [r4, #4]
   17a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   17aa2:	2b00      	cmp	r3, #0
   17aa4:	81a2      	strh	r2, [r4, #12]
   17aa6:	dd5e      	ble.n	17b66 <__sflush_r+0xda>
   17aa8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   17aaa:	2d00      	cmp	r5, #0
   17aac:	d058      	beq.n	17b60 <__sflush_r+0xd4>
   17aae:	2300      	movs	r3, #0
   17ab0:	f8d8 6000 	ldr.w	r6, [r8]
   17ab4:	f8c8 3000 	str.w	r3, [r8]
   17ab8:	b293      	uxth	r3, r2
   17aba:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   17abe:	d156      	bne.n	17b6e <__sflush_r+0xe2>
   17ac0:	2301      	movs	r3, #1
   17ac2:	69e1      	ldr	r1, [r4, #28]
   17ac4:	4640      	mov	r0, r8
   17ac6:	47a8      	blx	r5
   17ac8:	1c43      	adds	r3, r0, #1
   17aca:	d067      	beq.n	17b9c <__sflush_r+0x110>
   17acc:	89a3      	ldrh	r3, [r4, #12]
   17ace:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   17ad0:	075f      	lsls	r7, r3, #29
   17ad2:	d505      	bpl.n	17ae0 <__sflush_r+0x54>
   17ad4:	6863      	ldr	r3, [r4, #4]
   17ad6:	1ac0      	subs	r0, r0, r3
   17ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ada:	b10b      	cbz	r3, 17ae0 <__sflush_r+0x54>
   17adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17ade:	1ac0      	subs	r0, r0, r3
   17ae0:	69e1      	ldr	r1, [r4, #28]
   17ae2:	4602      	mov	r2, r0
   17ae4:	2300      	movs	r3, #0
   17ae6:	4640      	mov	r0, r8
   17ae8:	47a8      	blx	r5
   17aea:	1c41      	adds	r1, r0, #1
   17aec:	d141      	bne.n	17b72 <__sflush_r+0xe6>
   17aee:	f8d8 3000 	ldr.w	r3, [r8]
   17af2:	2b00      	cmp	r3, #0
   17af4:	d03d      	beq.n	17b72 <__sflush_r+0xe6>
   17af6:	2b1d      	cmp	r3, #29
   17af8:	d001      	beq.n	17afe <__sflush_r+0x72>
   17afa:	2b16      	cmp	r3, #22
   17afc:	d156      	bne.n	17bac <__sflush_r+0x120>
   17afe:	89a3      	ldrh	r3, [r4, #12]
   17b00:	6922      	ldr	r2, [r4, #16]
   17b02:	6022      	str	r2, [r4, #0]
   17b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17b08:	2100      	movs	r1, #0
   17b0a:	6061      	str	r1, [r4, #4]
   17b0c:	81a3      	strh	r3, [r4, #12]
   17b0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17b10:	f8c8 6000 	str.w	r6, [r8]
   17b14:	b321      	cbz	r1, 17b60 <__sflush_r+0xd4>
   17b16:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17b1a:	4299      	cmp	r1, r3
   17b1c:	d002      	beq.n	17b24 <__sflush_r+0x98>
   17b1e:	4640      	mov	r0, r8
   17b20:	f7fb fac0 	bl	130a4 <_free_r>
   17b24:	2000      	movs	r0, #0
   17b26:	6320      	str	r0, [r4, #48]	; 0x30
   17b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b2c:	6926      	ldr	r6, [r4, #16]
   17b2e:	b1be      	cbz	r6, 17b60 <__sflush_r+0xd4>
   17b30:	b293      	uxth	r3, r2
   17b32:	6825      	ldr	r5, [r4, #0]
   17b34:	6026      	str	r6, [r4, #0]
   17b36:	079a      	lsls	r2, r3, #30
   17b38:	bf0c      	ite	eq
   17b3a:	6963      	ldreq	r3, [r4, #20]
   17b3c:	2300      	movne	r3, #0
   17b3e:	1bad      	subs	r5, r5, r6
   17b40:	60a3      	str	r3, [r4, #8]
   17b42:	e00b      	b.n	17b5c <__sflush_r+0xd0>
   17b44:	462b      	mov	r3, r5
   17b46:	4632      	mov	r2, r6
   17b48:	69e1      	ldr	r1, [r4, #28]
   17b4a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   17b4c:	4640      	mov	r0, r8
   17b4e:	47b8      	blx	r7
   17b50:	f1b0 0c00 	subs.w	ip, r0, #0
   17b54:	eba5 050c 	sub.w	r5, r5, ip
   17b58:	4466      	add	r6, ip
   17b5a:	dd17      	ble.n	17b8c <__sflush_r+0x100>
   17b5c:	2d00      	cmp	r5, #0
   17b5e:	dcf1      	bgt.n	17b44 <__sflush_r+0xb8>
   17b60:	2000      	movs	r0, #0
   17b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17b68:	2b00      	cmp	r3, #0
   17b6a:	dc9d      	bgt.n	17aa8 <__sflush_r+0x1c>
   17b6c:	e7f8      	b.n	17b60 <__sflush_r+0xd4>
   17b6e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   17b70:	e7ae      	b.n	17ad0 <__sflush_r+0x44>
   17b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17b76:	6922      	ldr	r2, [r4, #16]
   17b78:	6022      	str	r2, [r4, #0]
   17b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17b7e:	81a3      	strh	r3, [r4, #12]
   17b80:	2200      	movs	r2, #0
   17b82:	04db      	lsls	r3, r3, #19
   17b84:	6062      	str	r2, [r4, #4]
   17b86:	d5c2      	bpl.n	17b0e <__sflush_r+0x82>
   17b88:	6520      	str	r0, [r4, #80]	; 0x50
   17b8a:	e7c0      	b.n	17b0e <__sflush_r+0x82>
   17b8c:	89a3      	ldrh	r3, [r4, #12]
   17b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17b92:	f04f 30ff 	mov.w	r0, #4294967295
   17b96:	81a3      	strh	r3, [r4, #12]
   17b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b9c:	f8d8 3000 	ldr.w	r3, [r8]
   17ba0:	2b00      	cmp	r3, #0
   17ba2:	d093      	beq.n	17acc <__sflush_r+0x40>
   17ba4:	2b1d      	cmp	r3, #29
   17ba6:	d006      	beq.n	17bb6 <__sflush_r+0x12a>
   17ba8:	2b16      	cmp	r3, #22
   17baa:	d004      	beq.n	17bb6 <__sflush_r+0x12a>
   17bac:	89a3      	ldrh	r3, [r4, #12]
   17bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17bb2:	81a3      	strh	r3, [r4, #12]
   17bb4:	e7d5      	b.n	17b62 <__sflush_r+0xd6>
   17bb6:	f8c8 6000 	str.w	r6, [r8]
   17bba:	e7d1      	b.n	17b60 <__sflush_r+0xd4>

00017bbc <_fflush_r>:
   17bbc:	b538      	push	{r3, r4, r5, lr}
   17bbe:	460c      	mov	r4, r1
   17bc0:	4605      	mov	r5, r0
   17bc2:	b108      	cbz	r0, 17bc8 <_fflush_r+0xc>
   17bc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17bc6:	b303      	cbz	r3, 17c0a <_fflush_r+0x4e>
   17bc8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   17bcc:	b188      	cbz	r0, 17bf2 <_fflush_r+0x36>
   17bce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17bd0:	07db      	lsls	r3, r3, #31
   17bd2:	d401      	bmi.n	17bd8 <_fflush_r+0x1c>
   17bd4:	0581      	lsls	r1, r0, #22
   17bd6:	d50f      	bpl.n	17bf8 <_fflush_r+0x3c>
   17bd8:	4628      	mov	r0, r5
   17bda:	4621      	mov	r1, r4
   17bdc:	f7ff ff56 	bl	17a8c <__sflush_r>
   17be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17be2:	07da      	lsls	r2, r3, #31
   17be4:	4605      	mov	r5, r0
   17be6:	d402      	bmi.n	17bee <_fflush_r+0x32>
   17be8:	89a3      	ldrh	r3, [r4, #12]
   17bea:	059b      	lsls	r3, r3, #22
   17bec:	d508      	bpl.n	17c00 <_fflush_r+0x44>
   17bee:	4628      	mov	r0, r5
   17bf0:	bd38      	pop	{r3, r4, r5, pc}
   17bf2:	4605      	mov	r5, r0
   17bf4:	4628      	mov	r0, r5
   17bf6:	bd38      	pop	{r3, r4, r5, pc}
   17bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17bfa:	f7fa ff17 	bl	12a2c <__retarget_lock_acquire_recursive>
   17bfe:	e7eb      	b.n	17bd8 <_fflush_r+0x1c>
   17c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17c02:	f7fa ff15 	bl	12a30 <__retarget_lock_release_recursive>
   17c06:	4628      	mov	r0, r5
   17c08:	bd38      	pop	{r3, r4, r5, pc}
   17c0a:	f7fa fb1d 	bl	12248 <__sinit>
   17c0e:	e7db      	b.n	17bc8 <_fflush_r+0xc>

00017c10 <__sccl>:
   17c10:	b570      	push	{r4, r5, r6, lr}
   17c12:	780c      	ldrb	r4, [r1, #0]
   17c14:	2c5e      	cmp	r4, #94	; 0x5e
   17c16:	4686      	mov	lr, r0
   17c18:	d01e      	beq.n	17c58 <__sccl+0x48>
   17c1a:	2200      	movs	r2, #0
   17c1c:	1c48      	adds	r0, r1, #1
   17c1e:	4694      	mov	ip, r2
   17c20:	f10e 33ff 	add.w	r3, lr, #4294967295
   17c24:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   17c28:	f803 2f01 	strb.w	r2, [r3, #1]!
   17c2c:	428b      	cmp	r3, r1
   17c2e:	d1fb      	bne.n	17c28 <__sccl+0x18>
   17c30:	b184      	cbz	r4, 17c54 <__sccl+0x44>
   17c32:	f08c 0101 	eor.w	r1, ip, #1
   17c36:	f80e 1004 	strb.w	r1, [lr, r4]
   17c3a:	1c45      	adds	r5, r0, #1
   17c3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   17c40:	2b2d      	cmp	r3, #45	; 0x2d
   17c42:	d00e      	beq.n	17c62 <__sccl+0x52>
   17c44:	2b5d      	cmp	r3, #93	; 0x5d
   17c46:	d003      	beq.n	17c50 <__sccl+0x40>
   17c48:	b11b      	cbz	r3, 17c52 <__sccl+0x42>
   17c4a:	461c      	mov	r4, r3
   17c4c:	4628      	mov	r0, r5
   17c4e:	e7f2      	b.n	17c36 <__sccl+0x26>
   17c50:	4628      	mov	r0, r5
   17c52:	bd70      	pop	{r4, r5, r6, pc}
   17c54:	3801      	subs	r0, #1
   17c56:	bd70      	pop	{r4, r5, r6, pc}
   17c58:	2201      	movs	r2, #1
   17c5a:	784c      	ldrb	r4, [r1, #1]
   17c5c:	1c88      	adds	r0, r1, #2
   17c5e:	4694      	mov	ip, r2
   17c60:	e7de      	b.n	17c20 <__sccl+0x10>
   17c62:	f890 c001 	ldrb.w	ip, [r0, #1]
   17c66:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   17c6a:	d0ee      	beq.n	17c4a <__sccl+0x3a>
   17c6c:	4564      	cmp	r4, ip
   17c6e:	dcec      	bgt.n	17c4a <__sccl+0x3a>
   17c70:	1c66      	adds	r6, r4, #1
   17c72:	3002      	adds	r0, #2
   17c74:	eb0e 0206 	add.w	r2, lr, r6
   17c78:	f802 1b01 	strb.w	r1, [r2], #1
   17c7c:	eba2 030e 	sub.w	r3, r2, lr
   17c80:	3b01      	subs	r3, #1
   17c82:	459c      	cmp	ip, r3
   17c84:	dcf8      	bgt.n	17c78 <__sccl+0x68>
   17c86:	ebac 0304 	sub.w	r3, ip, r4
   17c8a:	3b01      	subs	r3, #1
   17c8c:	4564      	cmp	r4, ip
   17c8e:	bfa8      	it	ge
   17c90:	2300      	movge	r3, #0
   17c92:	3502      	adds	r5, #2
   17c94:	199c      	adds	r4, r3, r6
   17c96:	e7d1      	b.n	17c3c <__sccl+0x2c>

00017c98 <stpncpy>:
   17c98:	ea41 0300 	orr.w	r3, r1, r0
   17c9c:	079b      	lsls	r3, r3, #30
   17c9e:	b430      	push	{r4, r5}
   17ca0:	d101      	bne.n	17ca6 <stpncpy+0xe>
   17ca2:	2a03      	cmp	r2, #3
   17ca4:	d80f      	bhi.n	17cc6 <stpncpy+0x2e>
   17ca6:	f101 3cff 	add.w	ip, r1, #4294967295
   17caa:	e007      	b.n	17cbc <stpncpy+0x24>
   17cac:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   17cb0:	f803 1b01 	strb.w	r1, [r3], #1
   17cb4:	1e54      	subs	r4, r2, #1
   17cb6:	b1c1      	cbz	r1, 17cea <stpncpy+0x52>
   17cb8:	4622      	mov	r2, r4
   17cba:	4618      	mov	r0, r3
   17cbc:	4603      	mov	r3, r0
   17cbe:	2a00      	cmp	r2, #0
   17cc0:	d1f4      	bne.n	17cac <stpncpy+0x14>
   17cc2:	bc30      	pop	{r4, r5}
   17cc4:	4770      	bx	lr
   17cc6:	460b      	mov	r3, r1
   17cc8:	4619      	mov	r1, r3
   17cca:	f853 5b04 	ldr.w	r5, [r3], #4
   17cce:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   17cd2:	ea24 0405 	bic.w	r4, r4, r5
   17cd6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17cda:	d1e4      	bne.n	17ca6 <stpncpy+0xe>
   17cdc:	3a04      	subs	r2, #4
   17cde:	2a03      	cmp	r2, #3
   17ce0:	f840 5b04 	str.w	r5, [r0], #4
   17ce4:	4619      	mov	r1, r3
   17ce6:	d8ef      	bhi.n	17cc8 <stpncpy+0x30>
   17ce8:	e7dd      	b.n	17ca6 <stpncpy+0xe>
   17cea:	4402      	add	r2, r0
   17cec:	2c00      	cmp	r4, #0
   17cee:	d0e8      	beq.n	17cc2 <stpncpy+0x2a>
   17cf0:	f803 1b01 	strb.w	r1, [r3], #1
   17cf4:	4293      	cmp	r3, r2
   17cf6:	d1fb      	bne.n	17cf0 <stpncpy+0x58>
   17cf8:	bc30      	pop	{r4, r5}
   17cfa:	4770      	bx	lr

00017cfc <_localeconv_r>:
   17cfc:	4800      	ldr	r0, [pc, #0]	; (17d00 <_localeconv_r+0x4>)
   17cfe:	4770      	bx	lr
   17d00:	20009084 	.word	0x20009084
   17d04:	00000000 	.word	0x00000000

00017d08 <frexp>:
   17d08:	b430      	push	{r4, r5}
   17d0a:	b082      	sub	sp, #8
   17d0c:	ed8d 0b00 	vstr	d0, [sp]
   17d10:	9a01      	ldr	r2, [sp, #4]
   17d12:	4c19      	ldr	r4, [pc, #100]	; (17d78 <frexp+0x70>)
   17d14:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17d18:	2100      	movs	r1, #0
   17d1a:	42a3      	cmp	r3, r4
   17d1c:	6001      	str	r1, [r0, #0]
   17d1e:	dc21      	bgt.n	17d64 <frexp+0x5c>
   17d20:	9c00      	ldr	r4, [sp, #0]
   17d22:	431c      	orrs	r4, r3
   17d24:	d01e      	beq.n	17d64 <frexp+0x5c>
   17d26:	4c15      	ldr	r4, [pc, #84]	; (17d7c <frexp+0x74>)
   17d28:	4014      	ands	r4, r2
   17d2a:	b954      	cbnz	r4, 17d42 <frexp+0x3a>
   17d2c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 17d70 <frexp+0x68>
   17d30:	ee20 7b07 	vmul.f64	d7, d0, d7
   17d34:	ed8d 7b00 	vstr	d7, [sp]
   17d38:	9a01      	ldr	r2, [sp, #4]
   17d3a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   17d3e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17d42:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   17d46:	e9dd 4500 	ldrd	r4, r5, [sp]
   17d4a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   17d4e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   17d52:	151b      	asrs	r3, r3, #20
   17d54:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   17d58:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   17d5c:	e9cd 4500 	strd	r4, r5, [sp]
   17d60:	440b      	add	r3, r1
   17d62:	6003      	str	r3, [r0, #0]
   17d64:	ed9d 0b00 	vldr	d0, [sp]
   17d68:	b002      	add	sp, #8
   17d6a:	bc30      	pop	{r4, r5}
   17d6c:	4770      	bx	lr
   17d6e:	bf00      	nop
   17d70:	00000000 	.word	0x00000000
   17d74:	43500000 	.word	0x43500000
   17d78:	7fefffff 	.word	0x7fefffff
   17d7c:	7ff00000 	.word	0x7ff00000

00017d80 <__assert_func>:
   17d80:	b500      	push	{lr}
   17d82:	4c0b      	ldr	r4, [pc, #44]	; (17db0 <__assert_func+0x30>)
   17d84:	6825      	ldr	r5, [r4, #0]
   17d86:	4614      	mov	r4, r2
   17d88:	68ee      	ldr	r6, [r5, #12]
   17d8a:	461a      	mov	r2, r3
   17d8c:	b085      	sub	sp, #20
   17d8e:	4603      	mov	r3, r0
   17d90:	460d      	mov	r5, r1
   17d92:	b14c      	cbz	r4, 17da8 <__assert_func+0x28>
   17d94:	4907      	ldr	r1, [pc, #28]	; (17db4 <__assert_func+0x34>)
   17d96:	9500      	str	r5, [sp, #0]
   17d98:	e9cd 1401 	strd	r1, r4, [sp, #4]
   17d9c:	4630      	mov	r0, r6
   17d9e:	4906      	ldr	r1, [pc, #24]	; (17db8 <__assert_func+0x38>)
   17da0:	f001 fabe 	bl	19320 <fiprintf>
   17da4:	f7f6 ff96 	bl	ecd4 <abort>
   17da8:	4904      	ldr	r1, [pc, #16]	; (17dbc <__assert_func+0x3c>)
   17daa:	460c      	mov	r4, r1
   17dac:	e7f3      	b.n	17d96 <__assert_func+0x16>
   17dae:	bf00      	nop
   17db0:	2000951c 	.word	0x2000951c
   17db4:	20000e58 	.word	0x20000e58
   17db8:	20000e68 	.word	0x20000e68
   17dbc:	20000560 	.word	0x20000560

00017dc0 <_calloc_r>:
   17dc0:	b538      	push	{r3, r4, r5, lr}
   17dc2:	fba1 1402 	umull	r1, r4, r1, r2
   17dc6:	bb8c      	cbnz	r4, 17e2c <_calloc_r+0x6c>
   17dc8:	f7f8 fd06 	bl	107d8 <_malloc_r>
   17dcc:	4605      	mov	r5, r0
   17dce:	b1e0      	cbz	r0, 17e0a <_calloc_r+0x4a>
   17dd0:	f850 2c04 	ldr.w	r2, [r0, #-4]
   17dd4:	f022 0203 	bic.w	r2, r2, #3
   17dd8:	3a04      	subs	r2, #4
   17dda:	2a24      	cmp	r2, #36	; 0x24
   17ddc:	d817      	bhi.n	17e0e <_calloc_r+0x4e>
   17dde:	2a13      	cmp	r2, #19
   17de0:	d91a      	bls.n	17e18 <_calloc_r+0x58>
   17de2:	2a1b      	cmp	r2, #27
   17de4:	e9c0 4400 	strd	r4, r4, [r0]
   17de8:	d91d      	bls.n	17e26 <_calloc_r+0x66>
   17dea:	2a24      	cmp	r2, #36	; 0x24
   17dec:	bf14      	ite	ne
   17dee:	f100 0210 	addne.w	r2, r0, #16
   17df2:	f100 0218 	addeq.w	r2, r0, #24
   17df6:	f04f 0300 	mov.w	r3, #0
   17dfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
   17dfe:	bf04      	itt	eq
   17e00:	6104      	streq	r4, [r0, #16]
   17e02:	6144      	streq	r4, [r0, #20]
   17e04:	e9c2 3300 	strd	r3, r3, [r2]
   17e08:	6093      	str	r3, [r2, #8]
   17e0a:	4628      	mov	r0, r5
   17e0c:	bd38      	pop	{r3, r4, r5, pc}
   17e0e:	4621      	mov	r1, r4
   17e10:	f7fa fc52 	bl	126b8 <memset>
   17e14:	4628      	mov	r0, r5
   17e16:	bd38      	pop	{r3, r4, r5, pc}
   17e18:	4602      	mov	r2, r0
   17e1a:	2300      	movs	r3, #0
   17e1c:	e9c2 3300 	strd	r3, r3, [r2]
   17e20:	6093      	str	r3, [r2, #8]
   17e22:	4628      	mov	r0, r5
   17e24:	bd38      	pop	{r3, r4, r5, pc}
   17e26:	f100 0208 	add.w	r2, r0, #8
   17e2a:	e7f6      	b.n	17e1a <_calloc_r+0x5a>
   17e2c:	f7fa fdd0 	bl	129d0 <__errno>
   17e30:	230c      	movs	r3, #12
   17e32:	2500      	movs	r5, #0
   17e34:	6003      	str	r3, [r0, #0]
   17e36:	e7e8      	b.n	17e0a <_calloc_r+0x4a>

00017e38 <quorem>:
   17e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e3c:	6903      	ldr	r3, [r0, #16]
   17e3e:	690c      	ldr	r4, [r1, #16]
   17e40:	42a3      	cmp	r3, r4
   17e42:	b083      	sub	sp, #12
   17e44:	f2c0 8087 	blt.w	17f56 <quorem+0x11e>
   17e48:	3c01      	subs	r4, #1
   17e4a:	f101 0514 	add.w	r5, r1, #20
   17e4e:	00a3      	lsls	r3, r4, #2
   17e50:	f100 0814 	add.w	r8, r0, #20
   17e54:	9300      	str	r3, [sp, #0]
   17e56:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17e5a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17e5e:	3301      	adds	r3, #1
   17e60:	4681      	mov	r9, r0
   17e62:	429a      	cmp	r2, r3
   17e64:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   17e68:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   17e6c:	9001      	str	r0, [sp, #4]
   17e6e:	fbb2 f6f3 	udiv	r6, r2, r3
   17e72:	d33b      	bcc.n	17eec <quorem+0xb4>
   17e74:	f04f 0c00 	mov.w	ip, #0
   17e78:	46ae      	mov	lr, r5
   17e7a:	4640      	mov	r0, r8
   17e7c:	46e2      	mov	sl, ip
   17e7e:	4663      	mov	r3, ip
   17e80:	f85e bb04 	ldr.w	fp, [lr], #4
   17e84:	6802      	ldr	r2, [r0, #0]
   17e86:	fa1f fc8b 	uxth.w	ip, fp
   17e8a:	fb06 330c 	mla	r3, r6, ip, r3
   17e8e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   17e92:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   17e96:	fb06 cc0b 	mla	ip, r6, fp, ip
   17e9a:	b29b      	uxth	r3, r3
   17e9c:	ebaa 0303 	sub.w	r3, sl, r3
   17ea0:	fa1f fa8c 	uxth.w	sl, ip
   17ea4:	fa13 f382 	uxtah	r3, r3, r2
   17ea8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   17eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
   17eb0:	b29b      	uxth	r3, r3
   17eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   17eb6:	4577      	cmp	r7, lr
   17eb8:	f840 3b04 	str.w	r3, [r0], #4
   17ebc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   17ec0:	ea4f 431c 	mov.w	r3, ip, lsr #16
   17ec4:	d2dc      	bcs.n	17e80 <quorem+0x48>
   17ec6:	9b00      	ldr	r3, [sp, #0]
   17ec8:	f858 3003 	ldr.w	r3, [r8, r3]
   17ecc:	b973      	cbnz	r3, 17eec <quorem+0xb4>
   17ece:	9b01      	ldr	r3, [sp, #4]
   17ed0:	3b04      	subs	r3, #4
   17ed2:	4598      	cmp	r8, r3
   17ed4:	d304      	bcc.n	17ee0 <quorem+0xa8>
   17ed6:	e007      	b.n	17ee8 <quorem+0xb0>
   17ed8:	4598      	cmp	r8, r3
   17eda:	f104 34ff 	add.w	r4, r4, #4294967295
   17ede:	d203      	bcs.n	17ee8 <quorem+0xb0>
   17ee0:	f853 2904 	ldr.w	r2, [r3], #-4
   17ee4:	2a00      	cmp	r2, #0
   17ee6:	d0f7      	beq.n	17ed8 <quorem+0xa0>
   17ee8:	f8c9 4010 	str.w	r4, [r9, #16]
   17eec:	4648      	mov	r0, r9
   17eee:	f7fc f8e3 	bl	140b8 <__mcmp>
   17ef2:	2800      	cmp	r0, #0
   17ef4:	db2b      	blt.n	17f4e <quorem+0x116>
   17ef6:	3601      	adds	r6, #1
   17ef8:	4641      	mov	r1, r8
   17efa:	2300      	movs	r3, #0
   17efc:	f855 0b04 	ldr.w	r0, [r5], #4
   17f00:	f8d1 c000 	ldr.w	ip, [r1]
   17f04:	b282      	uxth	r2, r0
   17f06:	1a9a      	subs	r2, r3, r2
   17f08:	0c03      	lsrs	r3, r0, #16
   17f0a:	fa12 f28c 	uxtah	r2, r2, ip
   17f0e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   17f12:	eb03 4322 	add.w	r3, r3, r2, asr #16
   17f16:	b292      	uxth	r2, r2
   17f18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17f1c:	42af      	cmp	r7, r5
   17f1e:	f841 2b04 	str.w	r2, [r1], #4
   17f22:	ea4f 4323 	mov.w	r3, r3, asr #16
   17f26:	d2e9      	bcs.n	17efc <quorem+0xc4>
   17f28:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17f2c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   17f30:	b96a      	cbnz	r2, 17f4e <quorem+0x116>
   17f32:	3b04      	subs	r3, #4
   17f34:	4598      	cmp	r8, r3
   17f36:	d304      	bcc.n	17f42 <quorem+0x10a>
   17f38:	e007      	b.n	17f4a <quorem+0x112>
   17f3a:	4598      	cmp	r8, r3
   17f3c:	f104 34ff 	add.w	r4, r4, #4294967295
   17f40:	d203      	bcs.n	17f4a <quorem+0x112>
   17f42:	f853 2904 	ldr.w	r2, [r3], #-4
   17f46:	2a00      	cmp	r2, #0
   17f48:	d0f7      	beq.n	17f3a <quorem+0x102>
   17f4a:	f8c9 4010 	str.w	r4, [r9, #16]
   17f4e:	4630      	mov	r0, r6
   17f50:	b003      	add	sp, #12
   17f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f56:	2000      	movs	r0, #0
   17f58:	b003      	add	sp, #12
   17f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f5e:	bf00      	nop

00017f60 <_dtoa_r>:
   17f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f64:	ed2d 8b02 	vpush	{d8}
   17f68:	b08f      	sub	sp, #60	; 0x3c
   17f6a:	ed8d 0b02 	vstr	d0, [sp, #8]
   17f6e:	9101      	str	r1, [sp, #4]
   17f70:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17f72:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   17f74:	9305      	str	r3, [sp, #20]
   17f76:	ec57 6b10 	vmov	r6, r7, d0
   17f7a:	4604      	mov	r4, r0
   17f7c:	4693      	mov	fp, r2
   17f7e:	b141      	cbz	r1, 17f92 <_dtoa_r+0x32>
   17f80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   17f82:	604a      	str	r2, [r1, #4]
   17f84:	2301      	movs	r3, #1
   17f86:	4093      	lsls	r3, r2
   17f88:	608b      	str	r3, [r1, #8]
   17f8a:	f7fb fddd 	bl	13b48 <_Bfree>
   17f8e:	2300      	movs	r3, #0
   17f90:	63a3      	str	r3, [r4, #56]	; 0x38
   17f92:	f1b7 0800 	subs.w	r8, r7, #0
   17f96:	bfb4      	ite	lt
   17f98:	2301      	movlt	r3, #1
   17f9a:	2300      	movge	r3, #0
   17f9c:	602b      	str	r3, [r5, #0]
   17f9e:	4bbe      	ldr	r3, [pc, #760]	; (18298 <_dtoa_r+0x338>)
   17fa0:	bfbc      	itt	lt
   17fa2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   17fa6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   17faa:	ea33 0308 	bics.w	r3, r3, r8
   17fae:	f000 809f 	beq.w	180f0 <_dtoa_r+0x190>
   17fb2:	ed9d 8b02 	vldr	d8, [sp, #8]
   17fb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   17fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17fbe:	d111      	bne.n	17fe4 <_dtoa_r+0x84>
   17fc0:	9a05      	ldr	r2, [sp, #20]
   17fc2:	2301      	movs	r3, #1
   17fc4:	6013      	str	r3, [r2, #0]
   17fc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17fc8:	2b00      	cmp	r3, #0
   17fca:	f000 823f 	beq.w	1844c <_dtoa_r+0x4ec>
   17fce:	4bb3      	ldr	r3, [pc, #716]	; (1829c <_dtoa_r+0x33c>)
   17fd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17fd2:	6013      	str	r3, [r2, #0]
   17fd4:	3b01      	subs	r3, #1
   17fd6:	9300      	str	r3, [sp, #0]
   17fd8:	9800      	ldr	r0, [sp, #0]
   17fda:	b00f      	add	sp, #60	; 0x3c
   17fdc:	ecbd 8b02 	vpop	{d8}
   17fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe4:	aa0c      	add	r2, sp, #48	; 0x30
   17fe6:	a90d      	add	r1, sp, #52	; 0x34
   17fe8:	4620      	mov	r0, r4
   17fea:	eeb0 0b48 	vmov.f64	d0, d8
   17fee:	f7fc f9c3 	bl	14378 <__d2b>
   17ff2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   17ff6:	4605      	mov	r5, r0
   17ff8:	f040 8092 	bne.w	18120 <_dtoa_r+0x1c0>
   17ffc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   18000:	440b      	add	r3, r1
   18002:	f203 4232 	addw	r2, r3, #1074	; 0x432
   18006:	2a20      	cmp	r2, #32
   18008:	f340 82fa 	ble.w	18600 <_dtoa_r+0x6a0>
   1800c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   18010:	fa08 f802 	lsl.w	r8, r8, r2
   18014:	f203 4212 	addw	r2, r3, #1042	; 0x412
   18018:	40d6      	lsrs	r6, r2
   1801a:	ea48 0206 	orr.w	r2, r8, r6
   1801e:	ee07 2a10 	vmov	s14, r2
   18022:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   18026:	1e58      	subs	r0, r3, #1
   18028:	ee17 6a90 	vmov	r6, s15
   1802c:	ec53 2b17 	vmov	r2, r3, d7
   18030:	f04f 0a01 	mov.w	sl, #1
   18034:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   18038:	ed9f 3b91 	vldr	d3, [pc, #580]	; 18280 <_dtoa_r+0x320>
   1803c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 18288 <_dtoa_r+0x328>
   18040:	ed9f 5b93 	vldr	d5, [pc, #588]	; 18290 <_dtoa_r+0x330>
   18044:	ee06 0a90 	vmov	s13, r0
   18048:	ec43 2b12 	vmov	d2, r2, r3
   1804c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   18050:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   18054:	ee32 6b46 	vsub.f64	d6, d2, d6
   18058:	eea6 7b03 	vfma.f64	d7, d6, d3
   1805c:	eea4 7b05 	vfma.f64	d7, d4, d5
   18060:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18064:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   18068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1806c:	ee16 7a90 	vmov	r7, s13
   18070:	d508      	bpl.n	18084 <_dtoa_r+0x124>
   18072:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   18076:	eeb4 6b47 	vcmp.f64	d6, d7
   1807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1807e:	bf18      	it	ne
   18080:	f107 37ff 	addne.w	r7, r7, #4294967295
   18084:	2f16      	cmp	r7, #22
   18086:	f200 8145 	bhi.w	18314 <_dtoa_r+0x3b4>
   1808a:	4b85      	ldr	r3, [pc, #532]	; (182a0 <_dtoa_r+0x340>)
   1808c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   18090:	ed93 7b00 	vldr	d7, [r3]
   18094:	eeb4 8bc7 	vcmpe.f64	d8, d7
   18098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1809c:	d557      	bpl.n	1814e <_dtoa_r+0x1ee>
   1809e:	1a09      	subs	r1, r1, r0
   180a0:	2300      	movs	r3, #0
   180a2:	f1b1 0801 	subs.w	r8, r1, #1
   180a6:	f107 37ff 	add.w	r7, r7, #4294967295
   180aa:	930a      	str	r3, [sp, #40]	; 0x28
   180ac:	f100 8139 	bmi.w	18322 <_dtoa_r+0x3c2>
   180b0:	2300      	movs	r3, #0
   180b2:	9306      	str	r3, [sp, #24]
   180b4:	2f00      	cmp	r7, #0
   180b6:	da52      	bge.n	1815e <_dtoa_r+0x1fe>
   180b8:	9b06      	ldr	r3, [sp, #24]
   180ba:	9704      	str	r7, [sp, #16]
   180bc:	1bdb      	subs	r3, r3, r7
   180be:	9306      	str	r3, [sp, #24]
   180c0:	427b      	negs	r3, r7
   180c2:	9308      	str	r3, [sp, #32]
   180c4:	9b01      	ldr	r3, [sp, #4]
   180c6:	2b09      	cmp	r3, #9
   180c8:	f04f 0700 	mov.w	r7, #0
   180cc:	d84e      	bhi.n	1816c <_dtoa_r+0x20c>
   180ce:	2b05      	cmp	r3, #5
   180d0:	f340 829d 	ble.w	1860e <_dtoa_r+0x6ae>
   180d4:	3b04      	subs	r3, #4
   180d6:	9301      	str	r3, [sp, #4]
   180d8:	2600      	movs	r6, #0
   180da:	9b01      	ldr	r3, [sp, #4]
   180dc:	1e9a      	subs	r2, r3, #2
   180de:	2a03      	cmp	r2, #3
   180e0:	f200 8125 	bhi.w	1832e <_dtoa_r+0x3ce>
   180e4:	e8df f012 	tbh	[pc, r2, lsl #1]
   180e8:	03a703aa 	.word	0x03a703aa
   180ec:	037e039d 	.word	0x037e039d
   180f0:	9a05      	ldr	r2, [sp, #20]
   180f2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   180f6:	f242 730f 	movw	r3, #9999	; 0x270f
   180fa:	ea58 0806 	orrs.w	r8, r8, r6
   180fe:	6013      	str	r3, [r2, #0]
   18100:	d11e      	bne.n	18140 <_dtoa_r+0x1e0>
   18102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18104:	2b00      	cmp	r3, #0
   18106:	f000 8591 	beq.w	18c2c <_dtoa_r+0xccc>
   1810a:	4b66      	ldr	r3, [pc, #408]	; (182a4 <_dtoa_r+0x344>)
   1810c:	9300      	str	r3, [sp, #0]
   1810e:	3308      	adds	r3, #8
   18110:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   18112:	9800      	ldr	r0, [sp, #0]
   18114:	6013      	str	r3, [r2, #0]
   18116:	b00f      	add	sp, #60	; 0x3c
   18118:	ecbd 8b02 	vpop	{d8}
   1811c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18120:	ee18 6a90 	vmov	r6, s17
   18124:	f3c6 0613 	ubfx	r6, r6, #0, #20
   18128:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1812c:	ec53 2b18 	vmov	r2, r3, d8
   18130:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   18134:	990c      	ldr	r1, [sp, #48]	; 0x30
   18136:	f04f 0a00 	mov.w	sl, #0
   1813a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1813e:	e77b      	b.n	18038 <_dtoa_r+0xd8>
   18140:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18142:	2b00      	cmp	r3, #0
   18144:	f040 833b 	bne.w	187be <_dtoa_r+0x85e>
   18148:	4b57      	ldr	r3, [pc, #348]	; (182a8 <_dtoa_r+0x348>)
   1814a:	9300      	str	r3, [sp, #0]
   1814c:	e744      	b.n	17fd8 <_dtoa_r+0x78>
   1814e:	1a09      	subs	r1, r1, r0
   18150:	2300      	movs	r3, #0
   18152:	f1b1 0801 	subs.w	r8, r1, #1
   18156:	930a      	str	r3, [sp, #40]	; 0x28
   18158:	f100 80e3 	bmi.w	18322 <_dtoa_r+0x3c2>
   1815c:	9306      	str	r3, [sp, #24]
   1815e:	2300      	movs	r3, #0
   18160:	9308      	str	r3, [sp, #32]
   18162:	9b01      	ldr	r3, [sp, #4]
   18164:	9704      	str	r7, [sp, #16]
   18166:	2b09      	cmp	r3, #9
   18168:	44b8      	add	r8, r7
   1816a:	d9b0      	bls.n	180ce <_dtoa_r+0x16e>
   1816c:	2300      	movs	r3, #0
   1816e:	2601      	movs	r6, #1
   18170:	9301      	str	r3, [sp, #4]
   18172:	9607      	str	r6, [sp, #28]
   18174:	f04f 39ff 	mov.w	r9, #4294967295
   18178:	469b      	mov	fp, r3
   1817a:	2100      	movs	r1, #0
   1817c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1817e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   18182:	4620      	mov	r0, r4
   18184:	f7fb fcba 	bl	13afc <_Balloc>
   18188:	9000      	str	r0, [sp, #0]
   1818a:	2800      	cmp	r0, #0
   1818c:	f000 8540 	beq.w	18c10 <_dtoa_r+0xcb0>
   18190:	9b00      	ldr	r3, [sp, #0]
   18192:	63a3      	str	r3, [r4, #56]	; 0x38
   18194:	f1b9 0f0e 	cmp.w	r9, #14
   18198:	f200 80dc 	bhi.w	18354 <_dtoa_r+0x3f4>
   1819c:	2e00      	cmp	r6, #0
   1819e:	f000 80d9 	beq.w	18354 <_dtoa_r+0x3f4>
   181a2:	9b04      	ldr	r3, [sp, #16]
   181a4:	2b00      	cmp	r3, #0
   181a6:	f340 83de 	ble.w	18966 <_dtoa_r+0xa06>
   181aa:	4a3d      	ldr	r2, [pc, #244]	; (182a0 <_dtoa_r+0x340>)
   181ac:	f003 010f 	and.w	r1, r3, #15
   181b0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   181b4:	ed92 7b00 	vldr	d7, [r2]
   181b8:	111a      	asrs	r2, r3, #4
   181ba:	05db      	lsls	r3, r3, #23
   181bc:	f140 8382 	bpl.w	188c4 <_dtoa_r+0x964>
   181c0:	493a      	ldr	r1, [pc, #232]	; (182ac <_dtoa_r+0x34c>)
   181c2:	ed91 6b08 	vldr	d6, [r1, #32]
   181c6:	f002 020f 	and.w	r2, r2, #15
   181ca:	2003      	movs	r0, #3
   181cc:	ee88 5b06 	vdiv.f64	d5, d8, d6
   181d0:	b15a      	cbz	r2, 181ea <_dtoa_r+0x28a>
   181d2:	4936      	ldr	r1, [pc, #216]	; (182ac <_dtoa_r+0x34c>)
   181d4:	07d6      	lsls	r6, r2, #31
   181d6:	d504      	bpl.n	181e2 <_dtoa_r+0x282>
   181d8:	ed91 6b00 	vldr	d6, [r1]
   181dc:	3001      	adds	r0, #1
   181de:	ee27 7b06 	vmul.f64	d7, d7, d6
   181e2:	1052      	asrs	r2, r2, #1
   181e4:	f101 0108 	add.w	r1, r1, #8
   181e8:	d1f4      	bne.n	181d4 <_dtoa_r+0x274>
   181ea:	ee85 6b07 	vdiv.f64	d6, d5, d7
   181ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   181f0:	b13b      	cbz	r3, 18202 <_dtoa_r+0x2a2>
   181f2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   181f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   181fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   181fe:	f100 84ae 	bmi.w	18b5e <_dtoa_r+0xbfe>
   18202:	ee07 0a90 	vmov	s15, r0
   18206:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1820a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1820e:	eea5 7b06 	vfma.f64	d7, d5, d6
   18212:	ee17 2a90 	vmov	r2, s15
   18216:	ec51 0b17 	vmov	r0, r1, d7
   1821a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1821e:	f1b9 0f00 	cmp.w	r9, #0
   18222:	f000 8388 	beq.w	18936 <_dtoa_r+0x9d6>
   18226:	9e04      	ldr	r6, [sp, #16]
   18228:	464a      	mov	r2, r9
   1822a:	9b07      	ldr	r3, [sp, #28]
   1822c:	2b00      	cmp	r3, #0
   1822e:	f000 8447 	beq.w	18ac0 <_dtoa_r+0xb60>
   18232:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   18236:	4b1a      	ldr	r3, [pc, #104]	; (182a0 <_dtoa_r+0x340>)
   18238:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1823c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   18240:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   18244:	ee36 7b47 	vsub.f64	d7, d6, d7
   18248:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1824c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   18250:	ec41 0b16 	vmov	d6, r0, r1
   18254:	ee14 0a90 	vmov	r0, s9
   18258:	ee35 5b46 	vsub.f64	d5, d5, d6
   1825c:	9900      	ldr	r1, [sp, #0]
   1825e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   18262:	3030      	adds	r0, #48	; 0x30
   18264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18268:	f801 0b01 	strb.w	r0, [r1], #1
   1826c:	f300 84ac 	bgt.w	18bc8 <_dtoa_r+0xc68>
   18270:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   18274:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18278:	f04f 0c00 	mov.w	ip, #0
   1827c:	e031      	b.n	182e2 <_dtoa_r+0x382>
   1827e:	bf00      	nop
   18280:	636f4361 	.word	0x636f4361
   18284:	3fd287a7 	.word	0x3fd287a7
   18288:	8b60c8b3 	.word	0x8b60c8b3
   1828c:	3fc68a28 	.word	0x3fc68a28
   18290:	509f79fb 	.word	0x509f79fb
   18294:	3fd34413 	.word	0x3fd34413
   18298:	7ff00000 	.word	0x7ff00000
   1829c:	20007fed 	.word	0x20007fed
   182a0:	20000328 	.word	0x20000328
   182a4:	20001178 	.word	0x20001178
   182a8:	20001184 	.word	0x20001184
   182ac:	20000300 	.word	0x20000300
   182b0:	f10c 0c01 	add.w	ip, ip, #1
   182b4:	4594      	cmp	ip, r2
   182b6:	da4d      	bge.n	18354 <_dtoa_r+0x3f4>
   182b8:	ee27 7b04 	vmul.f64	d7, d7, d4
   182bc:	ee25 5b04 	vmul.f64	d5, d5, d4
   182c0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   182c4:	ee16 3a90 	vmov	r3, s13
   182c8:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   182cc:	3330      	adds	r3, #48	; 0x30
   182ce:	ee37 7b43 	vsub.f64	d7, d7, d3
   182d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   182d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   182da:	f801 3b01 	strb.w	r3, [r1], #1
   182de:	f100 8473 	bmi.w	18bc8 <_dtoa_r+0xc68>
   182e2:	ee32 6b47 	vsub.f64	d6, d2, d7
   182e6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   182ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   182ee:	d5df      	bpl.n	182b0 <_dtoa_r+0x350>
   182f0:	9a00      	ldr	r2, [sp, #0]
   182f2:	9604      	str	r6, [sp, #16]
   182f4:	e002      	b.n	182fc <_dtoa_r+0x39c>
   182f6:	428a      	cmp	r2, r1
   182f8:	f000 8450 	beq.w	18b9c <_dtoa_r+0xc3c>
   182fc:	4689      	mov	r9, r1
   182fe:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   18302:	2b39      	cmp	r3, #57	; 0x39
   18304:	d0f7      	beq.n	182f6 <_dtoa_r+0x396>
   18306:	3301      	adds	r3, #1
   18308:	b2db      	uxtb	r3, r3
   1830a:	700b      	strb	r3, [r1, #0]
   1830c:	9b04      	ldr	r3, [sp, #16]
   1830e:	3301      	adds	r3, #1
   18310:	9304      	str	r3, [sp, #16]
   18312:	e155      	b.n	185c0 <_dtoa_r+0x660>
   18314:	1a09      	subs	r1, r1, r0
   18316:	2301      	movs	r3, #1
   18318:	f1b1 0801 	subs.w	r8, r1, #1
   1831c:	930a      	str	r3, [sp, #40]	; 0x28
   1831e:	f57f aec7 	bpl.w	180b0 <_dtoa_r+0x150>
   18322:	f1c1 0301 	rsb	r3, r1, #1
   18326:	9306      	str	r3, [sp, #24]
   18328:	f04f 0800 	mov.w	r8, #0
   1832c:	e6c2      	b.n	180b4 <_dtoa_r+0x154>
   1832e:	2600      	movs	r6, #0
   18330:	63e6      	str	r6, [r4, #60]	; 0x3c
   18332:	4631      	mov	r1, r6
   18334:	4620      	mov	r0, r4
   18336:	f7fb fbe1 	bl	13afc <_Balloc>
   1833a:	9000      	str	r0, [sp, #0]
   1833c:	2800      	cmp	r0, #0
   1833e:	f000 8467 	beq.w	18c10 <_dtoa_r+0xcb0>
   18342:	9b00      	ldr	r3, [sp, #0]
   18344:	63a3      	str	r3, [r4, #56]	; 0x38
   18346:	f04f 33ff 	mov.w	r3, #4294967295
   1834a:	930b      	str	r3, [sp, #44]	; 0x2c
   1834c:	4699      	mov	r9, r3
   1834e:	2301      	movs	r3, #1
   18350:	46b3      	mov	fp, r6
   18352:	9307      	str	r3, [sp, #28]
   18354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18356:	2a00      	cmp	r2, #0
   18358:	db55      	blt.n	18406 <_dtoa_r+0x4a6>
   1835a:	9904      	ldr	r1, [sp, #16]
   1835c:	290e      	cmp	r1, #14
   1835e:	dc52      	bgt.n	18406 <_dtoa_r+0x4a6>
   18360:	4bb7      	ldr	r3, [pc, #732]	; (18640 <_dtoa_r+0x6e0>)
   18362:	f1bb 0f00 	cmp.w	fp, #0
   18366:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1836a:	ed93 6b00 	vldr	d6, [r3]
   1836e:	da15      	bge.n	1839c <_dtoa_r+0x43c>
   18370:	f1b9 0f00 	cmp.w	r9, #0
   18374:	dc12      	bgt.n	1839c <_dtoa_r+0x43c>
   18376:	f040 82f2 	bne.w	1895e <_dtoa_r+0x9fe>
   1837a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1837e:	ee26 7b07 	vmul.f64	d7, d6, d7
   18382:	eeb4 8bc7 	vcmpe.f64	d8, d7
   18386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1838a:	46ca      	mov	sl, r9
   1838c:	464e      	mov	r6, r9
   1838e:	f200 826d 	bhi.w	1886c <_dtoa_r+0x90c>
   18392:	f8dd 8000 	ldr.w	r8, [sp]
   18396:	ea6f 0b0b 	mvn.w	fp, fp
   1839a:	e270      	b.n	1887e <_dtoa_r+0x91e>
   1839c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   183a0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   183a4:	9900      	ldr	r1, [sp, #0]
   183a6:	ee17 3a10 	vmov	r3, s14
   183aa:	f1b9 0f01 	cmp.w	r9, #1
   183ae:	f103 0330 	add.w	r3, r3, #48	; 0x30
   183b2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   183b6:	f801 3b01 	strb.w	r3, [r1], #1
   183ba:	eea5 8b46 	vfms.f64	d8, d5, d6
   183be:	f000 8334 	beq.w	18a2a <_dtoa_r+0xaca>
   183c2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   183c6:	2301      	movs	r3, #1
   183c8:	e011      	b.n	183ee <_dtoa_r+0x48e>
   183ca:	ee88 7b06 	vdiv.f64	d7, d8, d6
   183ce:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   183d2:	3301      	adds	r3, #1
   183d4:	ee17 2a10 	vmov	r2, s14
   183d8:	454b      	cmp	r3, r9
   183da:	f102 0230 	add.w	r2, r2, #48	; 0x30
   183de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   183e2:	f801 2b01 	strb.w	r2, [r1], #1
   183e6:	eea5 8b46 	vfms.f64	d8, d5, d6
   183ea:	f000 831e 	beq.w	18a2a <_dtoa_r+0xaca>
   183ee:	ee28 8b04 	vmul.f64	d8, d8, d4
   183f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   183f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   183fa:	d1e6      	bne.n	183ca <_dtoa_r+0x46a>
   183fc:	9b04      	ldr	r3, [sp, #16]
   183fe:	3301      	adds	r3, #1
   18400:	9304      	str	r3, [sp, #16]
   18402:	4689      	mov	r9, r1
   18404:	e0dc      	b.n	185c0 <_dtoa_r+0x660>
   18406:	9b07      	ldr	r3, [sp, #28]
   18408:	b343      	cbz	r3, 1845c <_dtoa_r+0x4fc>
   1840a:	9b01      	ldr	r3, [sp, #4]
   1840c:	2b01      	cmp	r3, #1
   1840e:	f340 8276 	ble.w	188fe <_dtoa_r+0x99e>
   18412:	9b08      	ldr	r3, [sp, #32]
   18414:	f109 3aff 	add.w	sl, r9, #4294967295
   18418:	4553      	cmp	r3, sl
   1841a:	f280 823f 	bge.w	1889c <_dtoa_r+0x93c>
   1841e:	9b08      	ldr	r3, [sp, #32]
   18420:	f8cd a020 	str.w	sl, [sp, #32]
   18424:	ebaa 0203 	sub.w	r2, sl, r3
   18428:	4417      	add	r7, r2
   1842a:	f04f 0a00 	mov.w	sl, #0
   1842e:	f1b9 0f00 	cmp.w	r9, #0
   18432:	f2c0 8325 	blt.w	18a80 <_dtoa_r+0xb20>
   18436:	9b06      	ldr	r3, [sp, #24]
   18438:	9309      	str	r3, [sp, #36]	; 0x24
   1843a:	444b      	add	r3, r9
   1843c:	44c8      	add	r8, r9
   1843e:	9306      	str	r3, [sp, #24]
   18440:	2101      	movs	r1, #1
   18442:	4620      	mov	r0, r4
   18444:	f7fb fc84 	bl	13d50 <__i2b>
   18448:	4606      	mov	r6, r0
   1844a:	e00c      	b.n	18466 <_dtoa_r+0x506>
   1844c:	4b7d      	ldr	r3, [pc, #500]	; (18644 <_dtoa_r+0x6e4>)
   1844e:	9300      	str	r3, [sp, #0]
   18450:	9800      	ldr	r0, [sp, #0]
   18452:	b00f      	add	sp, #60	; 0x3c
   18454:	ecbd 8b02 	vpop	{d8}
   18458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1845c:	9b06      	ldr	r3, [sp, #24]
   1845e:	f8dd a020 	ldr.w	sl, [sp, #32]
   18462:	9e07      	ldr	r6, [sp, #28]
   18464:	9309      	str	r3, [sp, #36]	; 0x24
   18466:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18468:	b16b      	cbz	r3, 18486 <_dtoa_r+0x526>
   1846a:	f1b8 0f00 	cmp.w	r8, #0
   1846e:	dd0a      	ble.n	18486 <_dtoa_r+0x526>
   18470:	4543      	cmp	r3, r8
   18472:	9906      	ldr	r1, [sp, #24]
   18474:	461a      	mov	r2, r3
   18476:	bfa8      	it	ge
   18478:	4642      	movge	r2, r8
   1847a:	1a89      	subs	r1, r1, r2
   1847c:	1a9b      	subs	r3, r3, r2
   1847e:	9106      	str	r1, [sp, #24]
   18480:	9309      	str	r3, [sp, #36]	; 0x24
   18482:	eba8 0802 	sub.w	r8, r8, r2
   18486:	9b08      	ldr	r3, [sp, #32]
   18488:	b163      	cbz	r3, 184a4 <_dtoa_r+0x544>
   1848a:	9b07      	ldr	r3, [sp, #28]
   1848c:	2b00      	cmp	r3, #0
   1848e:	f000 82a7 	beq.w	189e0 <_dtoa_r+0xa80>
   18492:	f1ba 0f00 	cmp.w	sl, #0
   18496:	f300 8204 	bgt.w	188a2 <_dtoa_r+0x942>
   1849a:	9b08      	ldr	r3, [sp, #32]
   1849c:	ebb3 020a 	subs.w	r2, r3, sl
   184a0:	f040 82ff 	bne.w	18aa2 <_dtoa_r+0xb42>
   184a4:	2101      	movs	r1, #1
   184a6:	4620      	mov	r0, r4
   184a8:	f7fb fc52 	bl	13d50 <__i2b>
   184ac:	2f00      	cmp	r7, #0
   184ae:	4682      	mov	sl, r0
   184b0:	f300 80af 	bgt.w	18612 <_dtoa_r+0x6b2>
   184b4:	9b01      	ldr	r3, [sp, #4]
   184b6:	2b01      	cmp	r3, #1
   184b8:	f340 8187 	ble.w	187ca <_dtoa_r+0x86a>
   184bc:	2300      	movs	r3, #0
   184be:	9308      	str	r3, [sp, #32]
   184c0:	2001      	movs	r0, #1
   184c2:	2f00      	cmp	r7, #0
   184c4:	f040 80b1 	bne.w	1862a <_dtoa_r+0x6ca>
   184c8:	4440      	add	r0, r8
   184ca:	f010 001f 	ands.w	r0, r0, #31
   184ce:	f000 817a 	beq.w	187c6 <_dtoa_r+0x866>
   184d2:	f1c0 0220 	rsb	r2, r0, #32
   184d6:	2a04      	cmp	r2, #4
   184d8:	f300 8088 	bgt.w	185ec <_dtoa_r+0x68c>
   184dc:	f040 81f6 	bne.w	188cc <_dtoa_r+0x96c>
   184e0:	9b06      	ldr	r3, [sp, #24]
   184e2:	2b00      	cmp	r3, #0
   184e4:	dd05      	ble.n	184f2 <_dtoa_r+0x592>
   184e6:	4629      	mov	r1, r5
   184e8:	461a      	mov	r2, r3
   184ea:	4620      	mov	r0, r4
   184ec:	f7fb fd6c 	bl	13fc8 <__lshift>
   184f0:	4605      	mov	r5, r0
   184f2:	f1b8 0f00 	cmp.w	r8, #0
   184f6:	dd05      	ble.n	18504 <_dtoa_r+0x5a4>
   184f8:	4651      	mov	r1, sl
   184fa:	4642      	mov	r2, r8
   184fc:	4620      	mov	r0, r4
   184fe:	f7fb fd63 	bl	13fc8 <__lshift>
   18502:	4682      	mov	sl, r0
   18504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18506:	2b00      	cmp	r3, #0
   18508:	f040 813f 	bne.w	1878a <_dtoa_r+0x82a>
   1850c:	f1b9 0f00 	cmp.w	r9, #0
   18510:	f340 8125 	ble.w	1875e <_dtoa_r+0x7fe>
   18514:	9b07      	ldr	r3, [sp, #28]
   18516:	2b00      	cmp	r3, #0
   18518:	f040 80a3 	bne.w	18662 <_dtoa_r+0x702>
   1851c:	9b04      	ldr	r3, [sp, #16]
   1851e:	3301      	adds	r3, #1
   18520:	9304      	str	r3, [sp, #16]
   18522:	f8dd 8000 	ldr.w	r8, [sp]
   18526:	2701      	movs	r7, #1
   18528:	e007      	b.n	1853a <_dtoa_r+0x5da>
   1852a:	4629      	mov	r1, r5
   1852c:	2300      	movs	r3, #0
   1852e:	220a      	movs	r2, #10
   18530:	4620      	mov	r0, r4
   18532:	f7fb fb13 	bl	13b5c <__multadd>
   18536:	3701      	adds	r7, #1
   18538:	4605      	mov	r5, r0
   1853a:	4651      	mov	r1, sl
   1853c:	4628      	mov	r0, r5
   1853e:	f7ff fc7b 	bl	17e38 <quorem>
   18542:	45b9      	cmp	r9, r7
   18544:	f100 0030 	add.w	r0, r0, #48	; 0x30
   18548:	f808 0b01 	strb.w	r0, [r8], #1
   1854c:	dced      	bgt.n	1852a <_dtoa_r+0x5ca>
   1854e:	f1b9 0f00 	cmp.w	r9, #0
   18552:	9a00      	ldr	r2, [sp, #0]
   18554:	bfcc      	ite	gt
   18556:	46cb      	movgt	fp, r9
   18558:	f04f 0b01 	movle.w	fp, #1
   1855c:	4603      	mov	r3, r0
   1855e:	4493      	add	fp, r2
   18560:	2700      	movs	r7, #0
   18562:	4629      	mov	r1, r5
   18564:	2201      	movs	r2, #1
   18566:	4620      	mov	r0, r4
   18568:	9301      	str	r3, [sp, #4]
   1856a:	f7fb fd2d 	bl	13fc8 <__lshift>
   1856e:	4651      	mov	r1, sl
   18570:	4605      	mov	r5, r0
   18572:	f7fb fda1 	bl	140b8 <__mcmp>
   18576:	2800      	cmp	r0, #0
   18578:	f340 81af 	ble.w	188da <_dtoa_r+0x97a>
   1857c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   18580:	9a00      	ldr	r2, [sp, #0]
   18582:	f10b 3bff 	add.w	fp, fp, #4294967295
   18586:	e004      	b.n	18592 <_dtoa_r+0x632>
   18588:	455a      	cmp	r2, fp
   1858a:	f000 81b1 	beq.w	188f0 <_dtoa_r+0x990>
   1858e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   18592:	2b39      	cmp	r3, #57	; 0x39
   18594:	f10b 0901 	add.w	r9, fp, #1
   18598:	d0f6      	beq.n	18588 <_dtoa_r+0x628>
   1859a:	3301      	adds	r3, #1
   1859c:	f88b 3000 	strb.w	r3, [fp]
   185a0:	4651      	mov	r1, sl
   185a2:	4620      	mov	r0, r4
   185a4:	f7fb fad0 	bl	13b48 <_Bfree>
   185a8:	b156      	cbz	r6, 185c0 <_dtoa_r+0x660>
   185aa:	b12f      	cbz	r7, 185b8 <_dtoa_r+0x658>
   185ac:	42b7      	cmp	r7, r6
   185ae:	d003      	beq.n	185b8 <_dtoa_r+0x658>
   185b0:	4639      	mov	r1, r7
   185b2:	4620      	mov	r0, r4
   185b4:	f7fb fac8 	bl	13b48 <_Bfree>
   185b8:	4631      	mov	r1, r6
   185ba:	4620      	mov	r0, r4
   185bc:	f7fb fac4 	bl	13b48 <_Bfree>
   185c0:	4629      	mov	r1, r5
   185c2:	4620      	mov	r0, r4
   185c4:	f7fb fac0 	bl	13b48 <_Bfree>
   185c8:	2300      	movs	r3, #0
   185ca:	f889 3000 	strb.w	r3, [r9]
   185ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   185d2:	601a      	str	r2, [r3, #0]
   185d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   185d6:	2b00      	cmp	r3, #0
   185d8:	f43f acfe 	beq.w	17fd8 <_dtoa_r+0x78>
   185dc:	9800      	ldr	r0, [sp, #0]
   185de:	f8c3 9000 	str.w	r9, [r3]
   185e2:	b00f      	add	sp, #60	; 0x3c
   185e4:	ecbd 8b02 	vpop	{d8}
   185e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185ec:	f1c0 001c 	rsb	r0, r0, #28
   185f0:	9b06      	ldr	r3, [sp, #24]
   185f2:	4403      	add	r3, r0
   185f4:	9306      	str	r3, [sp, #24]
   185f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   185f8:	4403      	add	r3, r0
   185fa:	9309      	str	r3, [sp, #36]	; 0x24
   185fc:	4480      	add	r8, r0
   185fe:	e76f      	b.n	184e0 <_dtoa_r+0x580>
   18600:	f1c2 0220 	rsb	r2, r2, #32
   18604:	fa06 f202 	lsl.w	r2, r6, r2
   18608:	ee07 2a10 	vmov	s14, r2
   1860c:	e509      	b.n	18022 <_dtoa_r+0xc2>
   1860e:	2601      	movs	r6, #1
   18610:	e563      	b.n	180da <_dtoa_r+0x17a>
   18612:	4601      	mov	r1, r0
   18614:	463a      	mov	r2, r7
   18616:	4620      	mov	r0, r4
   18618:	f7fb fc76 	bl	13f08 <__pow5mult>
   1861c:	9b01      	ldr	r3, [sp, #4]
   1861e:	2b01      	cmp	r3, #1
   18620:	4682      	mov	sl, r0
   18622:	f340 81c5 	ble.w	189b0 <_dtoa_r+0xa50>
   18626:	2300      	movs	r3, #0
   18628:	9308      	str	r3, [sp, #32]
   1862a:	f8da 2010 	ldr.w	r2, [sl, #16]
   1862e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   18632:	6910      	ldr	r0, [r2, #16]
   18634:	f7fb fb3c 	bl	13cb0 <__hi0bits>
   18638:	f1c0 0020 	rsb	r0, r0, #32
   1863c:	e744      	b.n	184c8 <_dtoa_r+0x568>
   1863e:	bf00      	nop
   18640:	20000328 	.word	0x20000328
   18644:	20007fec 	.word	0x20007fec
   18648:	4631      	mov	r1, r6
   1864a:	2300      	movs	r3, #0
   1864c:	220a      	movs	r2, #10
   1864e:	4620      	mov	r0, r4
   18650:	f7fb fa84 	bl	13b5c <__multadd>
   18654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18656:	2b00      	cmp	r3, #0
   18658:	4606      	mov	r6, r0
   1865a:	f340 82ce 	ble.w	18bfa <_dtoa_r+0xc9a>
   1865e:	9704      	str	r7, [sp, #16]
   18660:	4699      	mov	r9, r3
   18662:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18664:	2b00      	cmp	r3, #0
   18666:	dd05      	ble.n	18674 <_dtoa_r+0x714>
   18668:	4631      	mov	r1, r6
   1866a:	461a      	mov	r2, r3
   1866c:	4620      	mov	r0, r4
   1866e:	f7fb fcab 	bl	13fc8 <__lshift>
   18672:	4606      	mov	r6, r0
   18674:	9b08      	ldr	r3, [sp, #32]
   18676:	2b00      	cmp	r3, #0
   18678:	f040 81eb 	bne.w	18a52 <_dtoa_r+0xaf2>
   1867c:	46b0      	mov	r8, r6
   1867e:	9b02      	ldr	r3, [sp, #8]
   18680:	9f00      	ldr	r7, [sp, #0]
   18682:	f003 0201 	and.w	r2, r3, #1
   18686:	1e7b      	subs	r3, r7, #1
   18688:	444b      	add	r3, r9
   1868a:	9308      	str	r3, [sp, #32]
   1868c:	9b01      	ldr	r3, [sp, #4]
   1868e:	920a      	str	r2, [sp, #40]	; 0x28
   18690:	4313      	orrs	r3, r2
   18692:	9309      	str	r3, [sp, #36]	; 0x24
   18694:	4651      	mov	r1, sl
   18696:	4628      	mov	r0, r5
   18698:	f7ff fbce 	bl	17e38 <quorem>
   1869c:	4631      	mov	r1, r6
   1869e:	4683      	mov	fp, r0
   186a0:	4628      	mov	r0, r5
   186a2:	f7fb fd09 	bl	140b8 <__mcmp>
   186a6:	4642      	mov	r2, r8
   186a8:	4651      	mov	r1, sl
   186aa:	4681      	mov	r9, r0
   186ac:	4620      	mov	r0, r4
   186ae:	f7fb fd25 	bl	140fc <__mdiff>
   186b2:	68c2      	ldr	r2, [r0, #12]
   186b4:	4601      	mov	r1, r0
   186b6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   186ba:	2a00      	cmp	r2, #0
   186bc:	d142      	bne.n	18744 <_dtoa_r+0x7e4>
   186be:	e9cd 0306 	strd	r0, r3, [sp, #24]
   186c2:	4628      	mov	r0, r5
   186c4:	f7fb fcf8 	bl	140b8 <__mcmp>
   186c8:	9906      	ldr	r1, [sp, #24]
   186ca:	9002      	str	r0, [sp, #8]
   186cc:	4620      	mov	r0, r4
   186ce:	f7fb fa3b 	bl	13b48 <_Bfree>
   186d2:	9a02      	ldr	r2, [sp, #8]
   186d4:	9b07      	ldr	r3, [sp, #28]
   186d6:	b91a      	cbnz	r2, 186e0 <_dtoa_r+0x780>
   186d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   186da:	2900      	cmp	r1, #0
   186dc:	f000 827e 	beq.w	18bdc <_dtoa_r+0xc7c>
   186e0:	f1b9 0f00 	cmp.w	r9, #0
   186e4:	f2c0 8183 	blt.w	189ee <_dtoa_r+0xa8e>
   186e8:	9901      	ldr	r1, [sp, #4]
   186ea:	ea49 0901 	orr.w	r9, r9, r1
   186ee:	990a      	ldr	r1, [sp, #40]	; 0x28
   186f0:	ea51 0909 	orrs.w	r9, r1, r9
   186f4:	f000 817b 	beq.w	189ee <_dtoa_r+0xa8e>
   186f8:	2a00      	cmp	r2, #0
   186fa:	f300 81c6 	bgt.w	18a8a <_dtoa_r+0xb2a>
   186fe:	9a08      	ldr	r2, [sp, #32]
   18700:	703b      	strb	r3, [r7, #0]
   18702:	f107 0901 	add.w	r9, r7, #1
   18706:	4297      	cmp	r7, r2
   18708:	46cb      	mov	fp, r9
   1870a:	f000 81c4 	beq.w	18a96 <_dtoa_r+0xb36>
   1870e:	4629      	mov	r1, r5
   18710:	2300      	movs	r3, #0
   18712:	220a      	movs	r2, #10
   18714:	4620      	mov	r0, r4
   18716:	f7fb fa21 	bl	13b5c <__multadd>
   1871a:	4546      	cmp	r6, r8
   1871c:	4605      	mov	r5, r0
   1871e:	4631      	mov	r1, r6
   18720:	f04f 0300 	mov.w	r3, #0
   18724:	f04f 020a 	mov.w	r2, #10
   18728:	4620      	mov	r0, r4
   1872a:	d012      	beq.n	18752 <_dtoa_r+0x7f2>
   1872c:	f7fb fa16 	bl	13b5c <__multadd>
   18730:	4641      	mov	r1, r8
   18732:	4606      	mov	r6, r0
   18734:	2300      	movs	r3, #0
   18736:	220a      	movs	r2, #10
   18738:	4620      	mov	r0, r4
   1873a:	f7fb fa0f 	bl	13b5c <__multadd>
   1873e:	464f      	mov	r7, r9
   18740:	4680      	mov	r8, r0
   18742:	e7a7      	b.n	18694 <_dtoa_r+0x734>
   18744:	4620      	mov	r0, r4
   18746:	9302      	str	r3, [sp, #8]
   18748:	f7fb f9fe 	bl	13b48 <_Bfree>
   1874c:	9b02      	ldr	r3, [sp, #8]
   1874e:	2201      	movs	r2, #1
   18750:	e7c6      	b.n	186e0 <_dtoa_r+0x780>
   18752:	f7fb fa03 	bl	13b5c <__multadd>
   18756:	464f      	mov	r7, r9
   18758:	4606      	mov	r6, r0
   1875a:	4680      	mov	r8, r0
   1875c:	e79a      	b.n	18694 <_dtoa_r+0x734>
   1875e:	9b01      	ldr	r3, [sp, #4]
   18760:	2b02      	cmp	r3, #2
   18762:	dc71      	bgt.n	18848 <_dtoa_r+0x8e8>
   18764:	9b07      	ldr	r3, [sp, #28]
   18766:	2b00      	cmp	r3, #0
   18768:	f47f af7b 	bne.w	18662 <_dtoa_r+0x702>
   1876c:	9b04      	ldr	r3, [sp, #16]
   1876e:	4651      	mov	r1, sl
   18770:	3301      	adds	r3, #1
   18772:	4628      	mov	r0, r5
   18774:	9304      	str	r3, [sp, #16]
   18776:	f7ff fb5f 	bl	17e38 <quorem>
   1877a:	f8dd b000 	ldr.w	fp, [sp]
   1877e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18782:	f80b 3b01 	strb.w	r3, [fp], #1
   18786:	2700      	movs	r7, #0
   18788:	e6eb      	b.n	18562 <_dtoa_r+0x602>
   1878a:	4651      	mov	r1, sl
   1878c:	4628      	mov	r0, r5
   1878e:	f7fb fc93 	bl	140b8 <__mcmp>
   18792:	2800      	cmp	r0, #0
   18794:	f6bf aeba 	bge.w	1850c <_dtoa_r+0x5ac>
   18798:	4629      	mov	r1, r5
   1879a:	2300      	movs	r3, #0
   1879c:	220a      	movs	r2, #10
   1879e:	4620      	mov	r0, r4
   187a0:	f7fb f9dc 	bl	13b5c <__multadd>
   187a4:	9b04      	ldr	r3, [sp, #16]
   187a6:	1e5f      	subs	r7, r3, #1
   187a8:	9b07      	ldr	r3, [sp, #28]
   187aa:	4605      	mov	r5, r0
   187ac:	2b00      	cmp	r3, #0
   187ae:	f47f af4b 	bne.w	18648 <_dtoa_r+0x6e8>
   187b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   187b4:	2b00      	cmp	r3, #0
   187b6:	f340 8218 	ble.w	18bea <_dtoa_r+0xc8a>
   187ba:	4699      	mov	r9, r3
   187bc:	e6b1      	b.n	18522 <_dtoa_r+0x5c2>
   187be:	4bbc      	ldr	r3, [pc, #752]	; (18ab0 <_dtoa_r+0xb50>)
   187c0:	9300      	str	r3, [sp, #0]
   187c2:	3303      	adds	r3, #3
   187c4:	e4a4      	b.n	18110 <_dtoa_r+0x1b0>
   187c6:	201c      	movs	r0, #28
   187c8:	e712      	b.n	185f0 <_dtoa_r+0x690>
   187ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   187ce:	2800      	cmp	r0, #0
   187d0:	f47f ae74 	bne.w	184bc <_dtoa_r+0x55c>
   187d4:	f3c1 0213 	ubfx	r2, r1, #0, #20
   187d8:	2a00      	cmp	r2, #0
   187da:	f000 80f4 	beq.w	189c6 <_dtoa_r+0xa66>
   187de:	9b02      	ldr	r3, [sp, #8]
   187e0:	9308      	str	r3, [sp, #32]
   187e2:	e66d      	b.n	184c0 <_dtoa_r+0x560>
   187e4:	2301      	movs	r3, #1
   187e6:	9307      	str	r3, [sp, #28]
   187e8:	9b04      	ldr	r3, [sp, #16]
   187ea:	445b      	add	r3, fp
   187ec:	f103 0901 	add.w	r9, r3, #1
   187f0:	f1b9 0f01 	cmp.w	r9, #1
   187f4:	46cc      	mov	ip, r9
   187f6:	930b      	str	r3, [sp, #44]	; 0x2c
   187f8:	bfb8      	it	lt
   187fa:	f04f 0c01 	movlt.w	ip, #1
   187fe:	2100      	movs	r1, #0
   18800:	f1bc 0f17 	cmp.w	ip, #23
   18804:	63e1      	str	r1, [r4, #60]	; 0x3c
   18806:	f77f acbc 	ble.w	18182 <_dtoa_r+0x222>
   1880a:	2001      	movs	r0, #1
   1880c:	2204      	movs	r2, #4
   1880e:	0052      	lsls	r2, r2, #1
   18810:	f102 0314 	add.w	r3, r2, #20
   18814:	4563      	cmp	r3, ip
   18816:	4601      	mov	r1, r0
   18818:	f100 0001 	add.w	r0, r0, #1
   1881c:	d9f7      	bls.n	1880e <_dtoa_r+0x8ae>
   1881e:	63e1      	str	r1, [r4, #60]	; 0x3c
   18820:	e4af      	b.n	18182 <_dtoa_r+0x222>
   18822:	2301      	movs	r3, #1
   18824:	9307      	str	r3, [sp, #28]
   18826:	f1bb 0f00 	cmp.w	fp, #0
   1882a:	dd52      	ble.n	188d2 <_dtoa_r+0x972>
   1882c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   18830:	46d9      	mov	r9, fp
   18832:	46dc      	mov	ip, fp
   18834:	e7e3      	b.n	187fe <_dtoa_r+0x89e>
   18836:	2300      	movs	r3, #0
   18838:	9307      	str	r3, [sp, #28]
   1883a:	e7d5      	b.n	187e8 <_dtoa_r+0x888>
   1883c:	2300      	movs	r3, #0
   1883e:	9307      	str	r3, [sp, #28]
   18840:	e7f1      	b.n	18826 <_dtoa_r+0x8c6>
   18842:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   18846:	9704      	str	r7, [sp, #16]
   18848:	f1b9 0f00 	cmp.w	r9, #0
   1884c:	f47f ada1 	bne.w	18392 <_dtoa_r+0x432>
   18850:	4651      	mov	r1, sl
   18852:	464b      	mov	r3, r9
   18854:	2205      	movs	r2, #5
   18856:	4620      	mov	r0, r4
   18858:	f7fb f980 	bl	13b5c <__multadd>
   1885c:	4601      	mov	r1, r0
   1885e:	4682      	mov	sl, r0
   18860:	4628      	mov	r0, r5
   18862:	f7fb fc29 	bl	140b8 <__mcmp>
   18866:	2800      	cmp	r0, #0
   18868:	f77f ad93 	ble.w	18392 <_dtoa_r+0x432>
   1886c:	9b04      	ldr	r3, [sp, #16]
   1886e:	f103 0b01 	add.w	fp, r3, #1
   18872:	9b00      	ldr	r3, [sp, #0]
   18874:	2231      	movs	r2, #49	; 0x31
   18876:	4698      	mov	r8, r3
   18878:	f803 2b01 	strb.w	r2, [r3], #1
   1887c:	9300      	str	r3, [sp, #0]
   1887e:	4651      	mov	r1, sl
   18880:	4620      	mov	r0, r4
   18882:	f7fb f961 	bl	13b48 <_Bfree>
   18886:	f10b 0301 	add.w	r3, fp, #1
   1888a:	f8dd 9000 	ldr.w	r9, [sp]
   1888e:	9304      	str	r3, [sp, #16]
   18890:	f8cd 8000 	str.w	r8, [sp]
   18894:	2e00      	cmp	r6, #0
   18896:	f47f ae8f 	bne.w	185b8 <_dtoa_r+0x658>
   1889a:	e691      	b.n	185c0 <_dtoa_r+0x660>
   1889c:	eba3 0a0a 	sub.w	sl, r3, sl
   188a0:	e5c5      	b.n	1842e <_dtoa_r+0x4ce>
   188a2:	4631      	mov	r1, r6
   188a4:	4652      	mov	r2, sl
   188a6:	4620      	mov	r0, r4
   188a8:	f7fb fb2e 	bl	13f08 <__pow5mult>
   188ac:	462a      	mov	r2, r5
   188ae:	4601      	mov	r1, r0
   188b0:	4606      	mov	r6, r0
   188b2:	4620      	mov	r0, r4
   188b4:	f7fb fa7a 	bl	13dac <__multiply>
   188b8:	4629      	mov	r1, r5
   188ba:	4605      	mov	r5, r0
   188bc:	4620      	mov	r0, r4
   188be:	f7fb f943 	bl	13b48 <_Bfree>
   188c2:	e5ea      	b.n	1849a <_dtoa_r+0x53a>
   188c4:	2002      	movs	r0, #2
   188c6:	eeb0 5b48 	vmov.f64	d5, d8
   188ca:	e481      	b.n	181d0 <_dtoa_r+0x270>
   188cc:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   188d0:	e68e      	b.n	185f0 <_dtoa_r+0x690>
   188d2:	f04f 0b01 	mov.w	fp, #1
   188d6:	46d9      	mov	r9, fp
   188d8:	e44f      	b.n	1817a <_dtoa_r+0x21a>
   188da:	d103      	bne.n	188e4 <_dtoa_r+0x984>
   188dc:	9b01      	ldr	r3, [sp, #4]
   188de:	07db      	lsls	r3, r3, #31
   188e0:	f53f ae4c 	bmi.w	1857c <_dtoa_r+0x61c>
   188e4:	46d9      	mov	r9, fp
   188e6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   188ea:	2b30      	cmp	r3, #48	; 0x30
   188ec:	d0fa      	beq.n	188e4 <_dtoa_r+0x984>
   188ee:	e657      	b.n	185a0 <_dtoa_r+0x640>
   188f0:	9b04      	ldr	r3, [sp, #16]
   188f2:	9a00      	ldr	r2, [sp, #0]
   188f4:	3301      	adds	r3, #1
   188f6:	9304      	str	r3, [sp, #16]
   188f8:	2331      	movs	r3, #49	; 0x31
   188fa:	7013      	strb	r3, [r2, #0]
   188fc:	e650      	b.n	185a0 <_dtoa_r+0x640>
   188fe:	f1ba 0f00 	cmp.w	sl, #0
   18902:	f000 8123 	beq.w	18b4c <_dtoa_r+0xbec>
   18906:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1890a:	9b06      	ldr	r3, [sp, #24]
   1890c:	9309      	str	r3, [sp, #36]	; 0x24
   1890e:	4413      	add	r3, r2
   18910:	f8dd a020 	ldr.w	sl, [sp, #32]
   18914:	9306      	str	r3, [sp, #24]
   18916:	4490      	add	r8, r2
   18918:	e592      	b.n	18440 <_dtoa_r+0x4e0>
   1891a:	ee07 0a90 	vmov	s15, r0
   1891e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   18922:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   18926:	eea6 5b07 	vfma.f64	d5, d6, d7
   1892a:	ee15 2a90 	vmov	r2, s11
   1892e:	ec51 0b15 	vmov	r0, r1, d5
   18932:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   18936:	ec41 0b15 	vmov	d5, r0, r1
   1893a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1893e:	ee36 7b47 	vsub.f64	d7, d6, d7
   18942:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1894a:	f300 8137 	bgt.w	18bbc <_dtoa_r+0xc5c>
   1894e:	eeb1 5b45 	vneg.f64	d5, d5
   18952:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1895a:	f57f acfb 	bpl.w	18354 <_dtoa_r+0x3f4>
   1895e:	f04f 0a00 	mov.w	sl, #0
   18962:	4656      	mov	r6, sl
   18964:	e515      	b.n	18392 <_dtoa_r+0x432>
   18966:	f000 80f5 	beq.w	18b54 <_dtoa_r+0xbf4>
   1896a:	9b04      	ldr	r3, [sp, #16]
   1896c:	4951      	ldr	r1, [pc, #324]	; (18ab4 <_dtoa_r+0xb54>)
   1896e:	425a      	negs	r2, r3
   18970:	f002 000f 	and.w	r0, r2, #15
   18974:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   18978:	ed91 6b00 	vldr	d6, [r1]
   1897c:	1112      	asrs	r2, r2, #4
   1897e:	ee28 6b06 	vmul.f64	d6, d8, d6
   18982:	f000 8142 	beq.w	18c0a <_dtoa_r+0xcaa>
   18986:	eeb0 7b46 	vmov.f64	d7, d6
   1898a:	494b      	ldr	r1, [pc, #300]	; (18ab8 <_dtoa_r+0xb58>)
   1898c:	2600      	movs	r6, #0
   1898e:	2002      	movs	r0, #2
   18990:	07d3      	lsls	r3, r2, #31
   18992:	d505      	bpl.n	189a0 <_dtoa_r+0xa40>
   18994:	ed91 5b00 	vldr	d5, [r1]
   18998:	3001      	adds	r0, #1
   1899a:	2601      	movs	r6, #1
   1899c:	ee27 7b05 	vmul.f64	d7, d7, d5
   189a0:	1052      	asrs	r2, r2, #1
   189a2:	f101 0108 	add.w	r1, r1, #8
   189a6:	d1f3      	bne.n	18990 <_dtoa_r+0xa30>
   189a8:	2e00      	cmp	r6, #0
   189aa:	fe06 6b07 	vseleq.f64	d6, d6, d7
   189ae:	e41e      	b.n	181ee <_dtoa_r+0x28e>
   189b0:	9b02      	ldr	r3, [sp, #8]
   189b2:	2b00      	cmp	r3, #0
   189b4:	f47f ae37 	bne.w	18626 <_dtoa_r+0x6c6>
   189b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   189bc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   189c0:	2a00      	cmp	r2, #0
   189c2:	f040 8137 	bne.w	18c34 <_dtoa_r+0xcd4>
   189c6:	4a3d      	ldr	r2, [pc, #244]	; (18abc <_dtoa_r+0xb5c>)
   189c8:	400a      	ands	r2, r1
   189ca:	2a00      	cmp	r2, #0
   189cc:	f000 80fa 	beq.w	18bc4 <_dtoa_r+0xc64>
   189d0:	9b06      	ldr	r3, [sp, #24]
   189d2:	3301      	adds	r3, #1
   189d4:	9306      	str	r3, [sp, #24]
   189d6:	2301      	movs	r3, #1
   189d8:	f108 0801 	add.w	r8, r8, #1
   189dc:	9308      	str	r3, [sp, #32]
   189de:	e56f      	b.n	184c0 <_dtoa_r+0x560>
   189e0:	4629      	mov	r1, r5
   189e2:	9a08      	ldr	r2, [sp, #32]
   189e4:	4620      	mov	r0, r4
   189e6:	f7fb fa8f 	bl	13f08 <__pow5mult>
   189ea:	4605      	mov	r5, r0
   189ec:	e55a      	b.n	184a4 <_dtoa_r+0x544>
   189ee:	2a00      	cmp	r2, #0
   189f0:	dd12      	ble.n	18a18 <_dtoa_r+0xab8>
   189f2:	4629      	mov	r1, r5
   189f4:	2201      	movs	r2, #1
   189f6:	4620      	mov	r0, r4
   189f8:	9301      	str	r3, [sp, #4]
   189fa:	f7fb fae5 	bl	13fc8 <__lshift>
   189fe:	4651      	mov	r1, sl
   18a00:	4605      	mov	r5, r0
   18a02:	f7fb fb59 	bl	140b8 <__mcmp>
   18a06:	2800      	cmp	r0, #0
   18a08:	9b01      	ldr	r3, [sp, #4]
   18a0a:	f340 80e1 	ble.w	18bd0 <_dtoa_r+0xc70>
   18a0e:	2b39      	cmp	r3, #57	; 0x39
   18a10:	f000 80ca 	beq.w	18ba8 <_dtoa_r+0xc48>
   18a14:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   18a18:	46b9      	mov	r9, r7
   18a1a:	f809 3b01 	strb.w	r3, [r9], #1
   18a1e:	9b04      	ldr	r3, [sp, #16]
   18a20:	3301      	adds	r3, #1
   18a22:	4637      	mov	r7, r6
   18a24:	9304      	str	r3, [sp, #16]
   18a26:	4646      	mov	r6, r8
   18a28:	e5ba      	b.n	185a0 <_dtoa_r+0x640>
   18a2a:	ee38 8b08 	vadd.f64	d8, d8, d8
   18a2e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   18a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18a36:	dc0a      	bgt.n	18a4e <_dtoa_r+0xaee>
   18a38:	eeb4 8b46 	vcmp.f64	d8, d6
   18a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18a40:	f47f acdc 	bne.w	183fc <_dtoa_r+0x49c>
   18a44:	ee17 3a10 	vmov	r3, s14
   18a48:	07d8      	lsls	r0, r3, #31
   18a4a:	f57f acd7 	bpl.w	183fc <_dtoa_r+0x49c>
   18a4e:	9a00      	ldr	r2, [sp, #0]
   18a50:	e454      	b.n	182fc <_dtoa_r+0x39c>
   18a52:	6871      	ldr	r1, [r6, #4]
   18a54:	4620      	mov	r0, r4
   18a56:	f7fb f851 	bl	13afc <_Balloc>
   18a5a:	4607      	mov	r7, r0
   18a5c:	2800      	cmp	r0, #0
   18a5e:	f000 80de 	beq.w	18c1e <_dtoa_r+0xcbe>
   18a62:	6933      	ldr	r3, [r6, #16]
   18a64:	3302      	adds	r3, #2
   18a66:	009a      	lsls	r2, r3, #2
   18a68:	f106 010c 	add.w	r1, r6, #12
   18a6c:	300c      	adds	r0, #12
   18a6e:	f7f5 fd95 	bl	e59c <memcpy>
   18a72:	4639      	mov	r1, r7
   18a74:	2201      	movs	r2, #1
   18a76:	4620      	mov	r0, r4
   18a78:	f7fb faa6 	bl	13fc8 <__lshift>
   18a7c:	4680      	mov	r8, r0
   18a7e:	e5fe      	b.n	1867e <_dtoa_r+0x71e>
   18a80:	9b06      	ldr	r3, [sp, #24]
   18a82:	eba3 0309 	sub.w	r3, r3, r9
   18a86:	9309      	str	r3, [sp, #36]	; 0x24
   18a88:	e4da      	b.n	18440 <_dtoa_r+0x4e0>
   18a8a:	2b39      	cmp	r3, #57	; 0x39
   18a8c:	f000 808c 	beq.w	18ba8 <_dtoa_r+0xc48>
   18a90:	46b9      	mov	r9, r7
   18a92:	3301      	adds	r3, #1
   18a94:	e7c1      	b.n	18a1a <_dtoa_r+0xaba>
   18a96:	9a04      	ldr	r2, [sp, #16]
   18a98:	3201      	adds	r2, #1
   18a9a:	4637      	mov	r7, r6
   18a9c:	9204      	str	r2, [sp, #16]
   18a9e:	4646      	mov	r6, r8
   18aa0:	e55f      	b.n	18562 <_dtoa_r+0x602>
   18aa2:	4629      	mov	r1, r5
   18aa4:	4620      	mov	r0, r4
   18aa6:	f7fb fa2f 	bl	13f08 <__pow5mult>
   18aaa:	4605      	mov	r5, r0
   18aac:	e4fa      	b.n	184a4 <_dtoa_r+0x544>
   18aae:	bf00      	nop
   18ab0:	20001184 	.word	0x20001184
   18ab4:	20000328 	.word	0x20000328
   18ab8:	20000300 	.word	0x20000300
   18abc:	7ff00000 	.word	0x7ff00000
   18ac0:	4b5e      	ldr	r3, [pc, #376]	; (18c3c <_dtoa_r+0xcdc>)
   18ac2:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   18ac6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   18aca:	ed1c 3b02 	vldr	d3, [ip, #-8]
   18ace:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   18ad2:	ee36 7b47 	vsub.f64	d7, d6, d7
   18ad6:	ec41 0b16 	vmov	d6, r0, r1
   18ada:	ee15 1a90 	vmov	r1, s11
   18ade:	ee23 3b06 	vmul.f64	d3, d3, d6
   18ae2:	9800      	ldr	r0, [sp, #0]
   18ae4:	3130      	adds	r1, #48	; 0x30
   18ae6:	2a01      	cmp	r2, #1
   18ae8:	f800 1b01 	strb.w	r1, [r0], #1
   18aec:	f000 8083 	beq.w	18bf6 <_dtoa_r+0xc96>
   18af0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18af4:	9b00      	ldr	r3, [sp, #0]
   18af6:	1899      	adds	r1, r3, r2
   18af8:	ee27 7b04 	vmul.f64	d7, d7, d4
   18afc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18b00:	ee16 3a90 	vmov	r3, s13
   18b04:	3330      	adds	r3, #48	; 0x30
   18b06:	f800 3b01 	strb.w	r3, [r0], #1
   18b0a:	4281      	cmp	r1, r0
   18b0c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   18b10:	ee37 7b45 	vsub.f64	d7, d7, d5
   18b14:	d1f0      	bne.n	18af8 <_dtoa_r+0xb98>
   18b16:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   18b1a:	ee33 5b06 	vadd.f64	d5, d3, d6
   18b1e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   18b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18b26:	f53f abe3 	bmi.w	182f0 <_dtoa_r+0x390>
   18b2a:	ee36 6b43 	vsub.f64	d6, d6, d3
   18b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   18b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18b36:	f77f ac0d 	ble.w	18354 <_dtoa_r+0x3f4>
   18b3a:	4689      	mov	r9, r1
   18b3c:	3901      	subs	r1, #1
   18b3e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   18b42:	2b30      	cmp	r3, #48	; 0x30
   18b44:	d0f9      	beq.n	18b3a <_dtoa_r+0xbda>
   18b46:	1c73      	adds	r3, r6, #1
   18b48:	9304      	str	r3, [sp, #16]
   18b4a:	e539      	b.n	185c0 <_dtoa_r+0x660>
   18b4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18b4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   18b52:	e6da      	b.n	1890a <_dtoa_r+0x9aa>
   18b54:	2002      	movs	r0, #2
   18b56:	eeb0 6b48 	vmov.f64	d6, d8
   18b5a:	f7ff bb48 	b.w	181ee <_dtoa_r+0x28e>
   18b5e:	f1b9 0f00 	cmp.w	r9, #0
   18b62:	f43f aeda 	beq.w	1891a <_dtoa_r+0x9ba>
   18b66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18b68:	2a00      	cmp	r2, #0
   18b6a:	f77f abf3 	ble.w	18354 <_dtoa_r+0x3f4>
   18b6e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18b72:	ee26 6b04 	vmul.f64	d6, d6, d4
   18b76:	3001      	adds	r0, #1
   18b78:	ee07 0a90 	vmov	s15, r0
   18b7c:	9b04      	ldr	r3, [sp, #16]
   18b7e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   18b82:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   18b86:	eea6 7b05 	vfma.f64	d7, d6, d5
   18b8a:	ee17 ca90 	vmov	ip, s15
   18b8e:	ec51 0b17 	vmov	r0, r1, d7
   18b92:	1e5e      	subs	r6, r3, #1
   18b94:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   18b98:	f7ff bb47 	b.w	1822a <_dtoa_r+0x2ca>
   18b9c:	9b04      	ldr	r3, [sp, #16]
   18b9e:	3301      	adds	r3, #1
   18ba0:	9304      	str	r3, [sp, #16]
   18ba2:	2331      	movs	r3, #49	; 0x31
   18ba4:	f7ff bbb1 	b.w	1830a <_dtoa_r+0x3aa>
   18ba8:	9b04      	ldr	r3, [sp, #16]
   18baa:	46bb      	mov	fp, r7
   18bac:	3301      	adds	r3, #1
   18bae:	9304      	str	r3, [sp, #16]
   18bb0:	2339      	movs	r3, #57	; 0x39
   18bb2:	4637      	mov	r7, r6
   18bb4:	f80b 3b01 	strb.w	r3, [fp], #1
   18bb8:	4646      	mov	r6, r8
   18bba:	e4e1      	b.n	18580 <_dtoa_r+0x620>
   18bbc:	f04f 0a00 	mov.w	sl, #0
   18bc0:	4656      	mov	r6, sl
   18bc2:	e653      	b.n	1886c <_dtoa_r+0x90c>
   18bc4:	9208      	str	r2, [sp, #32]
   18bc6:	e47b      	b.n	184c0 <_dtoa_r+0x560>
   18bc8:	1c73      	adds	r3, r6, #1
   18bca:	9304      	str	r3, [sp, #16]
   18bcc:	4689      	mov	r9, r1
   18bce:	e4f7      	b.n	185c0 <_dtoa_r+0x660>
   18bd0:	f47f af22 	bne.w	18a18 <_dtoa_r+0xab8>
   18bd4:	07da      	lsls	r2, r3, #31
   18bd6:	f57f af1f 	bpl.w	18a18 <_dtoa_r+0xab8>
   18bda:	e718      	b.n	18a0e <_dtoa_r+0xaae>
   18bdc:	2b39      	cmp	r3, #57	; 0x39
   18bde:	d0e3      	beq.n	18ba8 <_dtoa_r+0xc48>
   18be0:	f1b9 0f00 	cmp.w	r9, #0
   18be4:	f73f af16 	bgt.w	18a14 <_dtoa_r+0xab4>
   18be8:	e716      	b.n	18a18 <_dtoa_r+0xab8>
   18bea:	9b01      	ldr	r3, [sp, #4]
   18bec:	2b02      	cmp	r3, #2
   18bee:	f73f ae28 	bgt.w	18842 <_dtoa_r+0x8e2>
   18bf2:	9704      	str	r7, [sp, #16]
   18bf4:	e5ba      	b.n	1876c <_dtoa_r+0x80c>
   18bf6:	4601      	mov	r1, r0
   18bf8:	e78d      	b.n	18b16 <_dtoa_r+0xbb6>
   18bfa:	9b01      	ldr	r3, [sp, #4]
   18bfc:	2b02      	cmp	r3, #2
   18bfe:	f73f ae20 	bgt.w	18842 <_dtoa_r+0x8e2>
   18c02:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   18c06:	9704      	str	r7, [sp, #16]
   18c08:	e52b      	b.n	18662 <_dtoa_r+0x702>
   18c0a:	2002      	movs	r0, #2
   18c0c:	f7ff baef 	b.w	181ee <_dtoa_r+0x28e>
   18c10:	4b0b      	ldr	r3, [pc, #44]	; (18c40 <_dtoa_r+0xce0>)
   18c12:	480c      	ldr	r0, [pc, #48]	; (18c44 <_dtoa_r+0xce4>)
   18c14:	2200      	movs	r2, #0
   18c16:	f240 11af 	movw	r1, #431	; 0x1af
   18c1a:	f7ff f8b1 	bl	17d80 <__assert_func>
   18c1e:	4b08      	ldr	r3, [pc, #32]	; (18c40 <_dtoa_r+0xce0>)
   18c20:	4808      	ldr	r0, [pc, #32]	; (18c44 <_dtoa_r+0xce4>)
   18c22:	463a      	mov	r2, r7
   18c24:	f240 21ef 	movw	r1, #751	; 0x2ef
   18c28:	f7ff f8aa 	bl	17d80 <__assert_func>
   18c2c:	4b06      	ldr	r3, [pc, #24]	; (18c48 <_dtoa_r+0xce8>)
   18c2e:	9300      	str	r3, [sp, #0]
   18c30:	f7ff b9d2 	b.w	17fd8 <_dtoa_r+0x78>
   18c34:	9b02      	ldr	r3, [sp, #8]
   18c36:	9308      	str	r3, [sp, #32]
   18c38:	e4f7      	b.n	1862a <_dtoa_r+0x6ca>
   18c3a:	bf00      	nop
   18c3c:	20000328 	.word	0x20000328
   18c40:	20000e98 	.word	0x20000e98
   18c44:	20001188 	.word	0x20001188
   18c48:	20001178 	.word	0x20001178

00018c4c <_strtoul_l.constprop.0>:
   18c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c50:	4607      	mov	r7, r0
   18c52:	484c      	ldr	r0, [pc, #304]	; (18d84 <_strtoul_l.constprop.0+0x138>)
   18c54:	460e      	mov	r6, r1
   18c56:	4635      	mov	r5, r6
   18c58:	f816 eb01 	ldrb.w	lr, [r6], #1
   18c5c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   18c60:	f01c 0c08 	ands.w	ip, ip, #8
   18c64:	d1f7      	bne.n	18c56 <_strtoul_l.constprop.0+0xa>
   18c66:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   18c6a:	d05a      	beq.n	18d22 <_strtoul_l.constprop.0+0xd6>
   18c6c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   18c70:	bf03      	ittte	eq
   18c72:	f896 e000 	ldrbeq.w	lr, [r6]
   18c76:	4664      	moveq	r4, ip
   18c78:	1cae      	addeq	r6, r5, #2
   18c7a:	4664      	movne	r4, ip
   18c7c:	b15b      	cbz	r3, 18c96 <_strtoul_l.constprop.0+0x4a>
   18c7e:	2b10      	cmp	r3, #16
   18c80:	d054      	beq.n	18d2c <_strtoul_l.constprop.0+0xe0>
   18c82:	f04f 38ff 	mov.w	r8, #4294967295
   18c86:	fbb8 f8f3 	udiv	r8, r8, r3
   18c8a:	fb03 fa08 	mul.w	sl, r3, r8
   18c8e:	ea6f 0a0a 	mvn.w	sl, sl
   18c92:	4699      	mov	r9, r3
   18c94:	e008      	b.n	18ca8 <_strtoul_l.constprop.0+0x5c>
   18c96:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18c9a:	d05a      	beq.n	18d52 <_strtoul_l.constprop.0+0x106>
   18c9c:	230a      	movs	r3, #10
   18c9e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 18d88 <_strtoul_l.constprop.0+0x13c>
   18ca2:	f04f 0a05 	mov.w	sl, #5
   18ca6:	4699      	mov	r9, r3
   18ca8:	2500      	movs	r5, #0
   18caa:	4628      	mov	r0, r5
   18cac:	e005      	b.n	18cba <_strtoul_l.constprop.0+0x6e>
   18cae:	d02c      	beq.n	18d0a <_strtoul_l.constprop.0+0xbe>
   18cb0:	fb09 c000 	mla	r0, r9, r0, ip
   18cb4:	2501      	movs	r5, #1
   18cb6:	f816 eb01 	ldrb.w	lr, [r6], #1
   18cba:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   18cbe:	f1bc 0f09 	cmp.w	ip, #9
   18cc2:	d906      	bls.n	18cd2 <_strtoul_l.constprop.0+0x86>
   18cc4:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   18cc8:	f1bc 0f19 	cmp.w	ip, #25
   18ccc:	d80b      	bhi.n	18ce6 <_strtoul_l.constprop.0+0x9a>
   18cce:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   18cd2:	4563      	cmp	r3, ip
   18cd4:	dd10      	ble.n	18cf8 <_strtoul_l.constprop.0+0xac>
   18cd6:	f1b5 3fff 	cmp.w	r5, #4294967295
   18cda:	d0ec      	beq.n	18cb6 <_strtoul_l.constprop.0+0x6a>
   18cdc:	4540      	cmp	r0, r8
   18cde:	d9e6      	bls.n	18cae <_strtoul_l.constprop.0+0x62>
   18ce0:	f04f 35ff 	mov.w	r5, #4294967295
   18ce4:	e7e7      	b.n	18cb6 <_strtoul_l.constprop.0+0x6a>
   18ce6:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   18cea:	f1bc 0f19 	cmp.w	ip, #25
   18cee:	d803      	bhi.n	18cf8 <_strtoul_l.constprop.0+0xac>
   18cf0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   18cf4:	4563      	cmp	r3, ip
   18cf6:	dcee      	bgt.n	18cd6 <_strtoul_l.constprop.0+0x8a>
   18cf8:	1c6b      	adds	r3, r5, #1
   18cfa:	d00b      	beq.n	18d14 <_strtoul_l.constprop.0+0xc8>
   18cfc:	b104      	cbz	r4, 18d00 <_strtoul_l.constprop.0+0xb4>
   18cfe:	4240      	negs	r0, r0
   18d00:	b10a      	cbz	r2, 18d06 <_strtoul_l.constprop.0+0xba>
   18d02:	b965      	cbnz	r5, 18d1e <_strtoul_l.constprop.0+0xd2>
   18d04:	6011      	str	r1, [r2, #0]
   18d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18d0a:	45d4      	cmp	ip, sl
   18d0c:	ddd0      	ble.n	18cb0 <_strtoul_l.constprop.0+0x64>
   18d0e:	f04f 35ff 	mov.w	r5, #4294967295
   18d12:	e7d0      	b.n	18cb6 <_strtoul_l.constprop.0+0x6a>
   18d14:	2322      	movs	r3, #34	; 0x22
   18d16:	603b      	str	r3, [r7, #0]
   18d18:	4628      	mov	r0, r5
   18d1a:	2a00      	cmp	r2, #0
   18d1c:	d0f3      	beq.n	18d06 <_strtoul_l.constprop.0+0xba>
   18d1e:	1e71      	subs	r1, r6, #1
   18d20:	e7f0      	b.n	18d04 <_strtoul_l.constprop.0+0xb8>
   18d22:	f896 e000 	ldrb.w	lr, [r6]
   18d26:	2401      	movs	r4, #1
   18d28:	1cae      	adds	r6, r5, #2
   18d2a:	e7a7      	b.n	18c7c <_strtoul_l.constprop.0+0x30>
   18d2c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18d30:	d121      	bne.n	18d76 <_strtoul_l.constprop.0+0x12a>
   18d32:	7830      	ldrb	r0, [r6, #0]
   18d34:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   18d38:	2858      	cmp	r0, #88	; 0x58
   18d3a:	d116      	bne.n	18d6a <_strtoul_l.constprop.0+0x11e>
   18d3c:	f04f 0910 	mov.w	r9, #16
   18d40:	f896 e001 	ldrb.w	lr, [r6, #1]
   18d44:	f04f 0a0f 	mov.w	sl, #15
   18d48:	3602      	adds	r6, #2
   18d4a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18d4e:	464b      	mov	r3, r9
   18d50:	e7aa      	b.n	18ca8 <_strtoul_l.constprop.0+0x5c>
   18d52:	7833      	ldrb	r3, [r6, #0]
   18d54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18d58:	2b58      	cmp	r3, #88	; 0x58
   18d5a:	d0ef      	beq.n	18d3c <_strtoul_l.constprop.0+0xf0>
   18d5c:	2308      	movs	r3, #8
   18d5e:	f04f 0a07 	mov.w	sl, #7
   18d62:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18d66:	4699      	mov	r9, r3
   18d68:	e79e      	b.n	18ca8 <_strtoul_l.constprop.0+0x5c>
   18d6a:	4699      	mov	r9, r3
   18d6c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18d70:	f04f 0a0f 	mov.w	sl, #15
   18d74:	e798      	b.n	18ca8 <_strtoul_l.constprop.0+0x5c>
   18d76:	f04f 0a0f 	mov.w	sl, #15
   18d7a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18d7e:	4699      	mov	r9, r3
   18d80:	e792      	b.n	18ca8 <_strtoul_l.constprop.0+0x5c>
   18d82:	bf00      	nop
   18d84:	20001075 	.word	0x20001075
   18d88:	19999999 	.word	0x19999999

00018d8c <_strtoul_r>:
   18d8c:	f7ff bf5e 	b.w	18c4c <_strtoul_l.constprop.0>

00018d90 <_strtoll_l.constprop.0>:
   18d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d94:	b085      	sub	sp, #20
   18d96:	461f      	mov	r7, r3
   18d98:	4b57      	ldr	r3, [pc, #348]	; (18ef8 <_strtoll_l.constprop.0+0x168>)
   18d9a:	9003      	str	r0, [sp, #12]
   18d9c:	468a      	mov	sl, r1
   18d9e:	9200      	str	r2, [sp, #0]
   18da0:	460d      	mov	r5, r1
   18da2:	462a      	mov	r2, r5
   18da4:	f815 4b01 	ldrb.w	r4, [r5], #1
   18da8:	5d1e      	ldrb	r6, [r3, r4]
   18daa:	f016 0608 	ands.w	r6, r6, #8
   18dae:	d1f8      	bne.n	18da2 <_strtoll_l.constprop.0+0x12>
   18db0:	2c2d      	cmp	r4, #45	; 0x2d
   18db2:	d075      	beq.n	18ea0 <_strtoll_l.constprop.0+0x110>
   18db4:	2c2b      	cmp	r4, #43	; 0x2b
   18db6:	bf05      	ittet	eq
   18db8:	782c      	ldrbeq	r4, [r5, #0]
   18dba:	9602      	streq	r6, [sp, #8]
   18dbc:	9602      	strne	r6, [sp, #8]
   18dbe:	1c95      	addeq	r5, r2, #2
   18dc0:	f04f 36ff 	mov.w	r6, #4294967295
   18dc4:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   18dc8:	b12f      	cbz	r7, 18dd6 <_strtoll_l.constprop.0+0x46>
   18dca:	2f10      	cmp	r7, #16
   18dcc:	d06f      	beq.n	18eae <_strtoll_l.constprop.0+0x11e>
   18dce:	46b8      	mov	r8, r7
   18dd0:	ea4f 79e7 	mov.w	r9, r7, asr #31
   18dd4:	e005      	b.n	18de2 <_strtoll_l.constprop.0+0x52>
   18dd6:	2c30      	cmp	r4, #48	; 0x30
   18dd8:	d074      	beq.n	18ec4 <_strtoll_l.constprop.0+0x134>
   18dda:	f04f 080a 	mov.w	r8, #10
   18dde:	46b9      	mov	r9, r7
   18de0:	4647      	mov	r7, r8
   18de2:	4642      	mov	r2, r8
   18de4:	464b      	mov	r3, r9
   18de6:	4630      	mov	r0, r6
   18de8:	4659      	mov	r1, fp
   18dea:	f7f7 fb67 	bl	104bc <__aeabi_uldivmod>
   18dee:	2300      	movs	r3, #0
   18df0:	9201      	str	r2, [sp, #4]
   18df2:	4684      	mov	ip, r0
   18df4:	460a      	mov	r2, r1
   18df6:	4618      	mov	r0, r3
   18df8:	4619      	mov	r1, r3
   18dfa:	e011      	b.n	18e20 <_strtoll_l.constprop.0+0x90>
   18dfc:	428a      	cmp	r2, r1
   18dfe:	bf08      	it	eq
   18e00:	4584      	cmpeq	ip, r0
   18e02:	d03d      	beq.n	18e80 <_strtoll_l.constprop.0+0xf0>
   18e04:	fb00 f309 	mul.w	r3, r0, r9
   18e08:	fb08 3301 	mla	r3, r8, r1, r3
   18e0c:	fba0 0108 	umull	r0, r1, r0, r8
   18e10:	440b      	add	r3, r1
   18e12:	eb1e 0000 	adds.w	r0, lr, r0
   18e16:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   18e1a:	2301      	movs	r3, #1
   18e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
   18e20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   18e24:	f1be 0f09 	cmp.w	lr, #9
   18e28:	d906      	bls.n	18e38 <_strtoll_l.constprop.0+0xa8>
   18e2a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   18e2e:	f1be 0f19 	cmp.w	lr, #25
   18e32:	d80c      	bhi.n	18e4e <_strtoll_l.constprop.0+0xbe>
   18e34:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   18e38:	4577      	cmp	r7, lr
   18e3a:	dd11      	ble.n	18e60 <_strtoll_l.constprop.0+0xd0>
   18e3c:	1c5c      	adds	r4, r3, #1
   18e3e:	d0ed      	beq.n	18e1c <_strtoll_l.constprop.0+0x8c>
   18e40:	4584      	cmp	ip, r0
   18e42:	eb72 0301 	sbcs.w	r3, r2, r1
   18e46:	d2d9      	bcs.n	18dfc <_strtoll_l.constprop.0+0x6c>
   18e48:	f04f 33ff 	mov.w	r3, #4294967295
   18e4c:	e7e6      	b.n	18e1c <_strtoll_l.constprop.0+0x8c>
   18e4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   18e52:	f1be 0f19 	cmp.w	lr, #25
   18e56:	d803      	bhi.n	18e60 <_strtoll_l.constprop.0+0xd0>
   18e58:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   18e5c:	4577      	cmp	r7, lr
   18e5e:	dced      	bgt.n	18e3c <_strtoll_l.constprop.0+0xac>
   18e60:	1c5a      	adds	r2, r3, #1
   18e62:	d013      	beq.n	18e8c <_strtoll_l.constprop.0+0xfc>
   18e64:	9a02      	ldr	r2, [sp, #8]
   18e66:	b112      	cbz	r2, 18e6e <_strtoll_l.constprop.0+0xde>
   18e68:	4240      	negs	r0, r0
   18e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18e6e:	9a00      	ldr	r2, [sp, #0]
   18e70:	b11a      	cbz	r2, 18e7a <_strtoll_l.constprop.0+0xea>
   18e72:	bba3      	cbnz	r3, 18ede <_strtoll_l.constprop.0+0x14e>
   18e74:	9b00      	ldr	r3, [sp, #0]
   18e76:	f8c3 a000 	str.w	sl, [r3]
   18e7a:	b005      	add	sp, #20
   18e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e80:	9b01      	ldr	r3, [sp, #4]
   18e82:	4573      	cmp	r3, lr
   18e84:	dabe      	bge.n	18e04 <_strtoll_l.constprop.0+0x74>
   18e86:	f04f 33ff 	mov.w	r3, #4294967295
   18e8a:	e7c7      	b.n	18e1c <_strtoll_l.constprop.0+0x8c>
   18e8c:	9a03      	ldr	r2, [sp, #12]
   18e8e:	2322      	movs	r3, #34	; 0x22
   18e90:	6013      	str	r3, [r2, #0]
   18e92:	9b00      	ldr	r3, [sp, #0]
   18e94:	b333      	cbz	r3, 18ee4 <_strtoll_l.constprop.0+0x154>
   18e96:	f105 3aff 	add.w	sl, r5, #4294967295
   18e9a:	4630      	mov	r0, r6
   18e9c:	4659      	mov	r1, fp
   18e9e:	e7e9      	b.n	18e74 <_strtoll_l.constprop.0+0xe4>
   18ea0:	2301      	movs	r3, #1
   18ea2:	782c      	ldrb	r4, [r5, #0]
   18ea4:	9302      	str	r3, [sp, #8]
   18ea6:	1c95      	adds	r5, r2, #2
   18ea8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   18eac:	e78c      	b.n	18dc8 <_strtoll_l.constprop.0+0x38>
   18eae:	2c30      	cmp	r4, #48	; 0x30
   18eb0:	d104      	bne.n	18ebc <_strtoll_l.constprop.0+0x12c>
   18eb2:	782b      	ldrb	r3, [r5, #0]
   18eb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18eb8:	2b58      	cmp	r3, #88	; 0x58
   18eba:	d008      	beq.n	18ece <_strtoll_l.constprop.0+0x13e>
   18ebc:	46b8      	mov	r8, r7
   18ebe:	f04f 0900 	mov.w	r9, #0
   18ec2:	e78e      	b.n	18de2 <_strtoll_l.constprop.0+0x52>
   18ec4:	782b      	ldrb	r3, [r5, #0]
   18ec6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18eca:	2b58      	cmp	r3, #88	; 0x58
   18ecc:	d10f      	bne.n	18eee <_strtoll_l.constprop.0+0x15e>
   18ece:	f04f 0810 	mov.w	r8, #16
   18ed2:	786c      	ldrb	r4, [r5, #1]
   18ed4:	f04f 0900 	mov.w	r9, #0
   18ed8:	3502      	adds	r5, #2
   18eda:	4647      	mov	r7, r8
   18edc:	e781      	b.n	18de2 <_strtoll_l.constprop.0+0x52>
   18ede:	4606      	mov	r6, r0
   18ee0:	468b      	mov	fp, r1
   18ee2:	e7d8      	b.n	18e96 <_strtoll_l.constprop.0+0x106>
   18ee4:	4630      	mov	r0, r6
   18ee6:	4659      	mov	r1, fp
   18ee8:	b005      	add	sp, #20
   18eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18eee:	f04f 0808 	mov.w	r8, #8
   18ef2:	46b9      	mov	r9, r7
   18ef4:	4647      	mov	r7, r8
   18ef6:	e774      	b.n	18de2 <_strtoll_l.constprop.0+0x52>
   18ef8:	20001075 	.word	0x20001075

00018efc <_strtoll_r>:
   18efc:	f7ff bf48 	b.w	18d90 <_strtoll_l.constprop.0>

00018f00 <_strtoull_l.constprop.0>:
   18f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f04:	b085      	sub	sp, #20
   18f06:	468b      	mov	fp, r1
   18f08:	9201      	str	r2, [sp, #4]
   18f0a:	4a62      	ldr	r2, [pc, #392]	; (19094 <_strtoull_l.constprop.0+0x194>)
   18f0c:	9003      	str	r0, [sp, #12]
   18f0e:	461e      	mov	r6, r3
   18f10:	460d      	mov	r5, r1
   18f12:	4629      	mov	r1, r5
   18f14:	f815 4b01 	ldrb.w	r4, [r5], #1
   18f18:	5d13      	ldrb	r3, [r2, r4]
   18f1a:	f013 0308 	ands.w	r3, r3, #8
   18f1e:	d1f8      	bne.n	18f12 <_strtoull_l.constprop.0+0x12>
   18f20:	2c2d      	cmp	r4, #45	; 0x2d
   18f22:	f000 8082 	beq.w	1902a <_strtoull_l.constprop.0+0x12a>
   18f26:	2c2b      	cmp	r4, #43	; 0x2b
   18f28:	bf03      	ittte	eq
   18f2a:	782c      	ldrbeq	r4, [r5, #0]
   18f2c:	9302      	streq	r3, [sp, #8]
   18f2e:	1c8d      	addeq	r5, r1, #2
   18f30:	9302      	strne	r3, [sp, #8]
   18f32:	b1be      	cbz	r6, 18f64 <_strtoull_l.constprop.0+0x64>
   18f34:	2e10      	cmp	r6, #16
   18f36:	d07d      	beq.n	19034 <_strtoull_l.constprop.0+0x134>
   18f38:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   18f3c:	4632      	mov	r2, r6
   18f3e:	4653      	mov	r3, sl
   18f40:	f04f 30ff 	mov.w	r0, #4294967295
   18f44:	f04f 31ff 	mov.w	r1, #4294967295
   18f48:	f7f7 fab8 	bl	104bc <__aeabi_uldivmod>
   18f4c:	4632      	mov	r2, r6
   18f4e:	4607      	mov	r7, r0
   18f50:	4688      	mov	r8, r1
   18f52:	4653      	mov	r3, sl
   18f54:	f04f 30ff 	mov.w	r0, #4294967295
   18f58:	f04f 31ff 	mov.w	r1, #4294967295
   18f5c:	46b1      	mov	r9, r6
   18f5e:	f7f7 faad 	bl	104bc <__aeabi_uldivmod>
   18f62:	e00a      	b.n	18f7a <_strtoull_l.constprop.0+0x7a>
   18f64:	2c30      	cmp	r4, #48	; 0x30
   18f66:	d079      	beq.n	1905c <_strtoull_l.constprop.0+0x15c>
   18f68:	f04f 090a 	mov.w	r9, #10
   18f6c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 19098 <_strtoull_l.constprop.0+0x198>
   18f70:	46b2      	mov	sl, r6
   18f72:	2205      	movs	r2, #5
   18f74:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   18f78:	464e      	mov	r6, r9
   18f7a:	f04f 0c00 	mov.w	ip, #0
   18f7e:	4660      	mov	r0, ip
   18f80:	4661      	mov	r1, ip
   18f82:	e011      	b.n	18fa8 <_strtoull_l.constprop.0+0xa8>
   18f84:	4541      	cmp	r1, r8
   18f86:	bf08      	it	eq
   18f88:	42b8      	cmpeq	r0, r7
   18f8a:	d03e      	beq.n	1900a <_strtoull_l.constprop.0+0x10a>
   18f8c:	fb00 f40a 	mul.w	r4, r0, sl
   18f90:	fb09 4101 	mla	r1, r9, r1, r4
   18f94:	fba0 0409 	umull	r0, r4, r0, r9
   18f98:	4421      	add	r1, r4
   18f9a:	1818      	adds	r0, r3, r0
   18f9c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   18fa0:	f04f 0c01 	mov.w	ip, #1
   18fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
   18fa8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   18fac:	2b09      	cmp	r3, #9
   18fae:	d905      	bls.n	18fbc <_strtoull_l.constprop.0+0xbc>
   18fb0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   18fb4:	2b19      	cmp	r3, #25
   18fb6:	d80d      	bhi.n	18fd4 <_strtoull_l.constprop.0+0xd4>
   18fb8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   18fbc:	429e      	cmp	r6, r3
   18fbe:	dd11      	ble.n	18fe4 <_strtoull_l.constprop.0+0xe4>
   18fc0:	f1bc 3fff 	cmp.w	ip, #4294967295
   18fc4:	d0ee      	beq.n	18fa4 <_strtoull_l.constprop.0+0xa4>
   18fc6:	4287      	cmp	r7, r0
   18fc8:	eb78 0401 	sbcs.w	r4, r8, r1
   18fcc:	d2da      	bcs.n	18f84 <_strtoull_l.constprop.0+0x84>
   18fce:	f04f 3cff 	mov.w	ip, #4294967295
   18fd2:	e7e7      	b.n	18fa4 <_strtoull_l.constprop.0+0xa4>
   18fd4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18fd8:	2b19      	cmp	r3, #25
   18fda:	d803      	bhi.n	18fe4 <_strtoull_l.constprop.0+0xe4>
   18fdc:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   18fe0:	429e      	cmp	r6, r3
   18fe2:	dced      	bgt.n	18fc0 <_strtoull_l.constprop.0+0xc0>
   18fe4:	f1bc 3fff 	cmp.w	ip, #4294967295
   18fe8:	d014      	beq.n	19014 <_strtoull_l.constprop.0+0x114>
   18fea:	9b02      	ldr	r3, [sp, #8]
   18fec:	b113      	cbz	r3, 18ff4 <_strtoull_l.constprop.0+0xf4>
   18fee:	4240      	negs	r0, r0
   18ff0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18ff4:	9b01      	ldr	r3, [sp, #4]
   18ff6:	b12b      	cbz	r3, 19004 <_strtoull_l.constprop.0+0x104>
   18ff8:	f1bc 0f00 	cmp.w	ip, #0
   18ffc:	d112      	bne.n	19024 <_strtoull_l.constprop.0+0x124>
   18ffe:	9b01      	ldr	r3, [sp, #4]
   19000:	f8c3 b000 	str.w	fp, [r3]
   19004:	b005      	add	sp, #20
   19006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1900a:	4293      	cmp	r3, r2
   1900c:	ddbe      	ble.n	18f8c <_strtoull_l.constprop.0+0x8c>
   1900e:	f04f 3cff 	mov.w	ip, #4294967295
   19012:	e7c7      	b.n	18fa4 <_strtoull_l.constprop.0+0xa4>
   19014:	9a03      	ldr	r2, [sp, #12]
   19016:	2322      	movs	r3, #34	; 0x22
   19018:	6013      	str	r3, [r2, #0]
   1901a:	9b01      	ldr	r3, [sp, #4]
   1901c:	4660      	mov	r0, ip
   1901e:	4661      	mov	r1, ip
   19020:	2b00      	cmp	r3, #0
   19022:	d0ef      	beq.n	19004 <_strtoull_l.constprop.0+0x104>
   19024:	f105 3bff 	add.w	fp, r5, #4294967295
   19028:	e7e9      	b.n	18ffe <_strtoull_l.constprop.0+0xfe>
   1902a:	2301      	movs	r3, #1
   1902c:	782c      	ldrb	r4, [r5, #0]
   1902e:	9302      	str	r3, [sp, #8]
   19030:	1c8d      	adds	r5, r1, #2
   19032:	e77e      	b.n	18f32 <_strtoull_l.constprop.0+0x32>
   19034:	2c30      	cmp	r4, #48	; 0x30
   19036:	d123      	bne.n	19080 <_strtoull_l.constprop.0+0x180>
   19038:	782b      	ldrb	r3, [r5, #0]
   1903a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1903e:	2b58      	cmp	r3, #88	; 0x58
   19040:	d11b      	bne.n	1907a <_strtoull_l.constprop.0+0x17a>
   19042:	f04f 0910 	mov.w	r9, #16
   19046:	786c      	ldrb	r4, [r5, #1]
   19048:	220f      	movs	r2, #15
   1904a:	3502      	adds	r5, #2
   1904c:	f04f 37ff 	mov.w	r7, #4294967295
   19050:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   19054:	f04f 0a00 	mov.w	sl, #0
   19058:	464e      	mov	r6, r9
   1905a:	e78e      	b.n	18f7a <_strtoull_l.constprop.0+0x7a>
   1905c:	782b      	ldrb	r3, [r5, #0]
   1905e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   19062:	2b58      	cmp	r3, #88	; 0x58
   19064:	d0ed      	beq.n	19042 <_strtoull_l.constprop.0+0x142>
   19066:	f04f 0908 	mov.w	r9, #8
   1906a:	46b2      	mov	sl, r6
   1906c:	2207      	movs	r2, #7
   1906e:	f04f 37ff 	mov.w	r7, #4294967295
   19072:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   19076:	464e      	mov	r6, r9
   19078:	e77f      	b.n	18f7a <_strtoull_l.constprop.0+0x7a>
   1907a:	f04f 0a00 	mov.w	sl, #0
   1907e:	e75d      	b.n	18f3c <_strtoull_l.constprop.0+0x3c>
   19080:	220f      	movs	r2, #15
   19082:	f04f 37ff 	mov.w	r7, #4294967295
   19086:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1908a:	46b1      	mov	r9, r6
   1908c:	f04f 0a00 	mov.w	sl, #0
   19090:	e773      	b.n	18f7a <_strtoull_l.constprop.0+0x7a>
   19092:	bf00      	nop
   19094:	20001075 	.word	0x20001075
   19098:	19999999 	.word	0x19999999

0001909c <_strtoull_r>:
   1909c:	f7ff bf30 	b.w	18f00 <_strtoull_l.constprop.0>

000190a0 <_mbrtowc_r>:
   190a0:	b570      	push	{r4, r5, r6, lr}
   190a2:	b082      	sub	sp, #8
   190a4:	4604      	mov	r4, r0
   190a6:	9d06      	ldr	r5, [sp, #24]
   190a8:	b155      	cbz	r5, 190c0 <_mbrtowc_r+0x20>
   190aa:	b16a      	cbz	r2, 190c8 <_mbrtowc_r+0x28>
   190ac:	480f      	ldr	r0, [pc, #60]	; (190ec <_mbrtowc_r+0x4c>)
   190ae:	9500      	str	r5, [sp, #0]
   190b0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   190b4:	4620      	mov	r0, r4
   190b6:	47b0      	blx	r6
   190b8:	1c43      	adds	r3, r0, #1
   190ba:	d010      	beq.n	190de <_mbrtowc_r+0x3e>
   190bc:	b002      	add	sp, #8
   190be:	bd70      	pop	{r4, r5, r6, pc}
   190c0:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   190c4:	2a00      	cmp	r2, #0
   190c6:	d1f1      	bne.n	190ac <_mbrtowc_r+0xc>
   190c8:	4b08      	ldr	r3, [pc, #32]	; (190ec <_mbrtowc_r+0x4c>)
   190ca:	9500      	str	r5, [sp, #0]
   190cc:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   190d0:	4611      	mov	r1, r2
   190d2:	2301      	movs	r3, #1
   190d4:	4a06      	ldr	r2, [pc, #24]	; (190f0 <_mbrtowc_r+0x50>)
   190d6:	4620      	mov	r0, r4
   190d8:	47b0      	blx	r6
   190da:	1c43      	adds	r3, r0, #1
   190dc:	d1ee      	bne.n	190bc <_mbrtowc_r+0x1c>
   190de:	2200      	movs	r2, #0
   190e0:	238a      	movs	r3, #138	; 0x8a
   190e2:	602a      	str	r2, [r5, #0]
   190e4:	6023      	str	r3, [r4, #0]
   190e6:	b002      	add	sp, #8
   190e8:	bd70      	pop	{r4, r5, r6, pc}
   190ea:	bf00      	nop
   190ec:	20008f94 	.word	0x20008f94
   190f0:	20000560 	.word	0x20000560

000190f4 <_wcrtomb_r>:
   190f4:	b570      	push	{r4, r5, r6, lr}
   190f6:	4605      	mov	r5, r0
   190f8:	b084      	sub	sp, #16
   190fa:	b15b      	cbz	r3, 19114 <_wcrtomb_r+0x20>
   190fc:	461c      	mov	r4, r3
   190fe:	b169      	cbz	r1, 1911c <_wcrtomb_r+0x28>
   19100:	4b0e      	ldr	r3, [pc, #56]	; (1913c <_wcrtomb_r+0x48>)
   19102:	4628      	mov	r0, r5
   19104:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   19108:	4623      	mov	r3, r4
   1910a:	47b0      	blx	r6
   1910c:	1c43      	adds	r3, r0, #1
   1910e:	d00f      	beq.n	19130 <_wcrtomb_r+0x3c>
   19110:	b004      	add	sp, #16
   19112:	bd70      	pop	{r4, r5, r6, pc}
   19114:	f500 7482 	add.w	r4, r0, #260	; 0x104
   19118:	2900      	cmp	r1, #0
   1911a:	d1f1      	bne.n	19100 <_wcrtomb_r+0xc>
   1911c:	4a07      	ldr	r2, [pc, #28]	; (1913c <_wcrtomb_r+0x48>)
   1911e:	4623      	mov	r3, r4
   19120:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   19124:	4628      	mov	r0, r5
   19126:	460a      	mov	r2, r1
   19128:	a901      	add	r1, sp, #4
   1912a:	47b0      	blx	r6
   1912c:	1c43      	adds	r3, r0, #1
   1912e:	d1ef      	bne.n	19110 <_wcrtomb_r+0x1c>
   19130:	2200      	movs	r2, #0
   19132:	238a      	movs	r3, #138	; 0x8a
   19134:	6022      	str	r2, [r4, #0]
   19136:	602b      	str	r3, [r5, #0]
   19138:	b004      	add	sp, #16
   1913a:	bd70      	pop	{r4, r5, r6, pc}
   1913c:	20008f94 	.word	0x20008f94

00019140 <_wcsrtombs_r>:
   19140:	b510      	push	{r4, lr}
   19142:	b082      	sub	sp, #8
   19144:	9c04      	ldr	r4, [sp, #16]
   19146:	e9cd 3400 	strd	r3, r4, [sp]
   1914a:	f04f 33ff 	mov.w	r3, #4294967295
   1914e:	f001 fd9f 	bl	1ac90 <_wcsnrtombs_r>
   19152:	b002      	add	sp, #8
   19154:	bd10      	pop	{r4, pc}
   19156:	bf00      	nop

00019158 <iswspace>:
   19158:	2100      	movs	r1, #0
   1915a:	f000 b801 	b.w	19160 <iswspace_l>
   1915e:	bf00      	nop

00019160 <iswspace_l>:
   19160:	b510      	push	{r4, lr}
   19162:	f000 f8ab 	bl	192bc <_jp2uc_l>
   19166:	4604      	mov	r4, r0
   19168:	f001 fda4 	bl	1acb4 <category>
   1916c:	f1a0 031a 	sub.w	r3, r0, #26
   19170:	b2db      	uxtb	r3, r3
   19172:	2b02      	cmp	r3, #2
   19174:	d906      	bls.n	19184 <iswspace_l+0x24>
   19176:	f1a4 0009 	sub.w	r0, r4, #9
   1917a:	2804      	cmp	r0, #4
   1917c:	bf8c      	ite	hi
   1917e:	2000      	movhi	r0, #0
   19180:	2001      	movls	r0, #1
   19182:	bd10      	pop	{r4, pc}
   19184:	2001      	movs	r0, #1
   19186:	bd10      	pop	{r4, pc}

00019188 <__jp2uc>:
   19188:	2902      	cmp	r1, #2
   1918a:	d032      	beq.n	191f2 <__jp2uc+0x6a>
   1918c:	2903      	cmp	r1, #3
   1918e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   19192:	bf1d      	ittte	ne
   19194:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   19198:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1919c:	b2d2      	uxtbne	r2, r2
   1919e:	b2c2      	uxtbeq	r2, r0
   191a0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   191a4:	b2c9      	uxtb	r1, r1
   191a6:	291f      	cmp	r1, #31
   191a8:	d806      	bhi.n	191b8 <__jp2uc+0x30>
   191aa:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   191ae:	4288      	cmp	r0, r1
   191b0:	d969      	bls.n	19286 <__jp2uc+0xfe>
   191b2:	f04f 30ff 	mov.w	r0, #4294967295
   191b6:	4770      	bx	lr
   191b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   191bc:	b2c9      	uxtb	r1, r1
   191be:	2924      	cmp	r1, #36	; 0x24
   191c0:	d80e      	bhi.n	191e0 <__jp2uc+0x58>
   191c2:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   191c6:	4288      	cmp	r0, r1
   191c8:	d8f3      	bhi.n	191b2 <__jp2uc+0x2a>
   191ca:	3bd0      	subs	r3, #208	; 0xd0
   191cc:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   191d0:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   191d4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   191d8:	4a30      	ldr	r2, [pc, #192]	; (1929c <__jp2uc+0x114>)
   191da:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   191de:	4770      	bx	lr
   191e0:	3ba1      	subs	r3, #161	; 0xa1
   191e2:	2b07      	cmp	r3, #7
   191e4:	d8e5      	bhi.n	191b2 <__jp2uc+0x2a>
   191e6:	e8df f003 	tbb	[pc, r3]
   191ea:	3e48      	.short	0x3e48
   191ec:	25292e34 	.word	0x25292e34
   191f0:	1921      	.short	0x1921
   191f2:	b2c2      	uxtb	r2, r0
   191f4:	2a9e      	cmp	r2, #158	; 0x9e
   191f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
   191fa:	d90b      	bls.n	19214 <__jp2uc+0x8c>
   191fc:	3223      	adds	r2, #35	; 0x23
   191fe:	b2d2      	uxtb	r2, r2
   19200:	2380      	movs	r3, #128	; 0x80
   19202:	299f      	cmp	r1, #159	; 0x9f
   19204:	bf94      	ite	ls
   19206:	3970      	subls	r1, #112	; 0x70
   19208:	3150      	addhi	r1, #80	; 0x50
   1920a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1920e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   19212:	e7c5      	b.n	191a0 <__jp2uc+0x18>
   19214:	3a7e      	subs	r2, #126	; 0x7e
   19216:	b2d2      	uxtb	r2, r2
   19218:	237f      	movs	r3, #127	; 0x7f
   1921a:	e7f2      	b.n	19202 <__jp2uc+0x7a>
   1921c:	2ac0      	cmp	r2, #192	; 0xc0
   1921e:	d8c8      	bhi.n	191b2 <__jp2uc+0x2a>
   19220:	4b1f      	ldr	r3, [pc, #124]	; (192a0 <__jp2uc+0x118>)
   19222:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19226:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1922a:	4770      	bx	lr
   1922c:	2af1      	cmp	r2, #241	; 0xf1
   1922e:	d8c0      	bhi.n	191b2 <__jp2uc+0x2a>
   19230:	4b1c      	ldr	r3, [pc, #112]	; (192a4 <__jp2uc+0x11c>)
   19232:	e019      	b.n	19268 <__jp2uc+0xe0>
   19234:	2ad8      	cmp	r2, #216	; 0xd8
   19236:	d8bc      	bhi.n	191b2 <__jp2uc+0x2a>
   19238:	4b1b      	ldr	r3, [pc, #108]	; (192a8 <__jp2uc+0x120>)
   1923a:	e015      	b.n	19268 <__jp2uc+0xe0>
   1923c:	2af6      	cmp	r2, #246	; 0xf6
   1923e:	d8b8      	bhi.n	191b2 <__jp2uc+0x2a>
   19240:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   19244:	4770      	bx	lr
   19246:	2af3      	cmp	r2, #243	; 0xf3
   19248:	d8b3      	bhi.n	191b2 <__jp2uc+0x2a>
   1924a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1924e:	3020      	adds	r0, #32
   19250:	4770      	bx	lr
   19252:	4b16      	ldr	r3, [pc, #88]	; (192ac <__jp2uc+0x124>)
   19254:	4413      	add	r3, r2
   19256:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1925a:	2b00      	cmp	r3, #0
   1925c:	d0a9      	beq.n	191b2 <__jp2uc+0x2a>
   1925e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   19262:	3060      	adds	r0, #96	; 0x60
   19264:	4770      	bx	lr
   19266:	4b12      	ldr	r3, [pc, #72]	; (192b0 <__jp2uc+0x128>)
   19268:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1926c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19270:	2800      	cmp	r0, #0
   19272:	bf08      	it	eq
   19274:	f04f 30ff 	moveq.w	r0, #4294967295
   19278:	4770      	bx	lr
   1927a:	4b0e      	ldr	r3, [pc, #56]	; (192b4 <__jp2uc+0x12c>)
   1927c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19280:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19284:	4770      	bx	lr
   19286:	3bb0      	subs	r3, #176	; 0xb0
   19288:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1928c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19290:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   19294:	4a08      	ldr	r2, [pc, #32]	; (192b8 <__jp2uc+0x130>)
   19296:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1929a:	4770      	bx	lr
   1929c:	20006200 	.word	0x20006200
   192a0:	20001528 	.word	0x20001528
   192a4:	20001484 	.word	0x20001484
   192a8:	20001414 	.word	0x20001414
   192ac:	200013b8 	.word	0x200013b8
   192b0:	200012fc 	.word	0x200012fc
   192b4:	20001240 	.word	0x20001240
   192b8:	20001568 	.word	0x20001568

000192bc <_jp2uc_l>:
   192bc:	b538      	push	{r3, r4, r5, lr}
   192be:	4605      	mov	r5, r0
   192c0:	b1b9      	cbz	r1, 192f2 <_jp2uc_l+0x36>
   192c2:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   192c6:	4912      	ldr	r1, [pc, #72]	; (19310 <_jp2uc_l+0x54>)
   192c8:	4620      	mov	r0, r4
   192ca:	f7f9 fbbd 	bl	12a48 <strcmp>
   192ce:	b928      	cbnz	r0, 192dc <_jp2uc_l+0x20>
   192d0:	4628      	mov	r0, r5
   192d2:	2101      	movs	r1, #1
   192d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   192d8:	f7ff bf56 	b.w	19188 <__jp2uc>
   192dc:	490d      	ldr	r1, [pc, #52]	; (19314 <_jp2uc_l+0x58>)
   192de:	4620      	mov	r0, r4
   192e0:	f7f9 fbb2 	bl	12a48 <strcmp>
   192e4:	b938      	cbnz	r0, 192f6 <_jp2uc_l+0x3a>
   192e6:	4628      	mov	r0, r5
   192e8:	2102      	movs	r1, #2
   192ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   192ee:	f7ff bf4b 	b.w	19188 <__jp2uc>
   192f2:	4c09      	ldr	r4, [pc, #36]	; (19318 <_jp2uc_l+0x5c>)
   192f4:	e7e7      	b.n	192c6 <_jp2uc_l+0xa>
   192f6:	4909      	ldr	r1, [pc, #36]	; (1931c <_jp2uc_l+0x60>)
   192f8:	4620      	mov	r0, r4
   192fa:	f7f9 fba5 	bl	12a48 <strcmp>
   192fe:	b928      	cbnz	r0, 1930c <_jp2uc_l+0x50>
   19300:	4628      	mov	r0, r5
   19302:	2103      	movs	r1, #3
   19304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19308:	f7ff bf3e 	b.w	19188 <__jp2uc>
   1930c:	4628      	mov	r0, r5
   1930e:	bd38      	pop	{r3, r4, r5, pc}
   19310:	200011e4 	.word	0x200011e4
   19314:	200011e8 	.word	0x200011e8
   19318:	200090be 	.word	0x200090be
   1931c:	200011f0 	.word	0x200011f0

00019320 <fiprintf>:
   19320:	b40e      	push	{r1, r2, r3}
   19322:	b510      	push	{r4, lr}
   19324:	b083      	sub	sp, #12
   19326:	ab05      	add	r3, sp, #20
   19328:	4c06      	ldr	r4, [pc, #24]	; (19344 <fiprintf+0x24>)
   1932a:	f853 2b04 	ldr.w	r2, [r3], #4
   1932e:	9301      	str	r3, [sp, #4]
   19330:	4601      	mov	r1, r0
   19332:	6820      	ldr	r0, [r4, #0]
   19334:	f000 f97c 	bl	19630 <_vfiprintf_r>
   19338:	b003      	add	sp, #12
   1933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1933e:	b003      	add	sp, #12
   19340:	4770      	bx	lr
   19342:	bf00      	nop
   19344:	2000951c 	.word	0x2000951c

00019348 <__ssprint_r>:
   19348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1934c:	6893      	ldr	r3, [r2, #8]
   1934e:	6817      	ldr	r7, [r2, #0]
   19350:	b083      	sub	sp, #12
   19352:	4692      	mov	sl, r2
   19354:	2b00      	cmp	r3, #0
   19356:	d070      	beq.n	1943a <__ssprint_r+0xf2>
   19358:	4681      	mov	r9, r0
   1935a:	688a      	ldr	r2, [r1, #8]
   1935c:	6808      	ldr	r0, [r1, #0]
   1935e:	460c      	mov	r4, r1
   19360:	3708      	adds	r7, #8
   19362:	e043      	b.n	193ec <__ssprint_r+0xa4>
   19364:	89a3      	ldrh	r3, [r4, #12]
   19366:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1936a:	d02e      	beq.n	193ca <__ssprint_r+0x82>
   1936c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   19370:	eba0 0801 	sub.w	r8, r0, r1
   19374:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   19378:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1937c:	f108 0001 	add.w	r0, r8, #1
   19380:	1076      	asrs	r6, r6, #1
   19382:	4428      	add	r0, r5
   19384:	42b0      	cmp	r0, r6
   19386:	4632      	mov	r2, r6
   19388:	bf84      	itt	hi
   1938a:	4606      	movhi	r6, r0
   1938c:	4632      	movhi	r2, r6
   1938e:	055b      	lsls	r3, r3, #21
   19390:	d537      	bpl.n	19402 <__ssprint_r+0xba>
   19392:	4611      	mov	r1, r2
   19394:	4648      	mov	r0, r9
   19396:	f7f7 fa1f 	bl	107d8 <_malloc_r>
   1939a:	9001      	str	r0, [sp, #4]
   1939c:	2800      	cmp	r0, #0
   1939e:	d03a      	beq.n	19416 <__ssprint_r+0xce>
   193a0:	4642      	mov	r2, r8
   193a2:	6921      	ldr	r1, [r4, #16]
   193a4:	f7f5 f8fa 	bl	e59c <memcpy>
   193a8:	89a2      	ldrh	r2, [r4, #12]
   193aa:	9b01      	ldr	r3, [sp, #4]
   193ac:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   193b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   193b4:	81a2      	strh	r2, [r4, #12]
   193b6:	eba6 0208 	sub.w	r2, r6, r8
   193ba:	eb03 0008 	add.w	r0, r3, r8
   193be:	6166      	str	r6, [r4, #20]
   193c0:	60a2      	str	r2, [r4, #8]
   193c2:	6123      	str	r3, [r4, #16]
   193c4:	6020      	str	r0, [r4, #0]
   193c6:	462e      	mov	r6, r5
   193c8:	46a8      	mov	r8, r5
   193ca:	4642      	mov	r2, r8
   193cc:	4659      	mov	r1, fp
   193ce:	f7f9 f8f7 	bl	125c0 <memmove>
   193d2:	f8da 3008 	ldr.w	r3, [sl, #8]
   193d6:	68a2      	ldr	r2, [r4, #8]
   193d8:	6820      	ldr	r0, [r4, #0]
   193da:	1b92      	subs	r2, r2, r6
   193dc:	4440      	add	r0, r8
   193de:	1b5b      	subs	r3, r3, r5
   193e0:	60a2      	str	r2, [r4, #8]
   193e2:	6020      	str	r0, [r4, #0]
   193e4:	f8ca 3008 	str.w	r3, [sl, #8]
   193e8:	b33b      	cbz	r3, 1943a <__ssprint_r+0xf2>
   193ea:	3708      	adds	r7, #8
   193ec:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   193f0:	2d00      	cmp	r5, #0
   193f2:	d0fa      	beq.n	193ea <__ssprint_r+0xa2>
   193f4:	42aa      	cmp	r2, r5
   193f6:	4616      	mov	r6, r2
   193f8:	4690      	mov	r8, r2
   193fa:	d9b3      	bls.n	19364 <__ssprint_r+0x1c>
   193fc:	462e      	mov	r6, r5
   193fe:	46a8      	mov	r8, r5
   19400:	e7e3      	b.n	193ca <__ssprint_r+0x82>
   19402:	4648      	mov	r0, r9
   19404:	f7f7 fcb0 	bl	10d68 <_realloc_r>
   19408:	4603      	mov	r3, r0
   1940a:	2800      	cmp	r0, #0
   1940c:	d1d3      	bne.n	193b6 <__ssprint_r+0x6e>
   1940e:	6921      	ldr	r1, [r4, #16]
   19410:	4648      	mov	r0, r9
   19412:	f7f9 fe47 	bl	130a4 <_free_r>
   19416:	89a3      	ldrh	r3, [r4, #12]
   19418:	220c      	movs	r2, #12
   1941a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1941e:	f8c9 2000 	str.w	r2, [r9]
   19422:	f04f 30ff 	mov.w	r0, #4294967295
   19426:	81a3      	strh	r3, [r4, #12]
   19428:	2200      	movs	r2, #0
   1942a:	2300      	movs	r3, #0
   1942c:	f8ca 2008 	str.w	r2, [sl, #8]
   19430:	f8ca 3004 	str.w	r3, [sl, #4]
   19434:	b003      	add	sp, #12
   19436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1943a:	2000      	movs	r0, #0
   1943c:	2300      	movs	r3, #0
   1943e:	f8ca 3004 	str.w	r3, [sl, #4]
   19442:	b003      	add	sp, #12
   19444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019448 <_sungetc_r>:
   19448:	b538      	push	{r3, r4, r5, lr}
   1944a:	1c4b      	adds	r3, r1, #1
   1944c:	d01a      	beq.n	19484 <_sungetc_r+0x3c>
   1944e:	8993      	ldrh	r3, [r2, #12]
   19450:	4614      	mov	r4, r2
   19452:	6b12      	ldr	r2, [r2, #48]	; 0x30
   19454:	f023 0320 	bic.w	r3, r3, #32
   19458:	81a3      	strh	r3, [r4, #12]
   1945a:	b2cd      	uxtb	r5, r1
   1945c:	b1aa      	cbz	r2, 1948a <_sungetc_r+0x42>
   1945e:	6862      	ldr	r2, [r4, #4]
   19460:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19462:	429a      	cmp	r2, r3
   19464:	da09      	bge.n	1947a <_sungetc_r+0x32>
   19466:	6823      	ldr	r3, [r4, #0]
   19468:	1e5a      	subs	r2, r3, #1
   1946a:	6022      	str	r2, [r4, #0]
   1946c:	f803 5c01 	strb.w	r5, [r3, #-1]
   19470:	6863      	ldr	r3, [r4, #4]
   19472:	3301      	adds	r3, #1
   19474:	6063      	str	r3, [r4, #4]
   19476:	4628      	mov	r0, r5
   19478:	bd38      	pop	{r3, r4, r5, pc}
   1947a:	4621      	mov	r1, r4
   1947c:	f001 fa58 	bl	1a930 <__submore>
   19480:	2800      	cmp	r0, #0
   19482:	d0f0      	beq.n	19466 <_sungetc_r+0x1e>
   19484:	f04f 35ff 	mov.w	r5, #4294967295
   19488:	e7f5      	b.n	19476 <_sungetc_r+0x2e>
   1948a:	6923      	ldr	r3, [r4, #16]
   1948c:	6822      	ldr	r2, [r4, #0]
   1948e:	b12b      	cbz	r3, 1949c <_sungetc_r+0x54>
   19490:	4293      	cmp	r3, r2
   19492:	d203      	bcs.n	1949c <_sungetc_r+0x54>
   19494:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   19498:	42ab      	cmp	r3, r5
   1949a:	d00f      	beq.n	194bc <_sungetc_r+0x74>
   1949c:	6861      	ldr	r1, [r4, #4]
   1949e:	63e1      	str	r1, [r4, #60]	; 0x3c
   194a0:	4623      	mov	r3, r4
   194a2:	63a2      	str	r2, [r4, #56]	; 0x38
   194a4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   194a8:	2203      	movs	r2, #3
   194aa:	6362      	str	r2, [r4, #52]	; 0x34
   194ac:	6321      	str	r1, [r4, #48]	; 0x30
   194ae:	f803 5f42 	strb.w	r5, [r3, #66]!
   194b2:	2201      	movs	r2, #1
   194b4:	e9c4 3200 	strd	r3, r2, [r4]
   194b8:	4628      	mov	r0, r5
   194ba:	bd38      	pop	{r3, r4, r5, pc}
   194bc:	6863      	ldr	r3, [r4, #4]
   194be:	3a01      	subs	r2, #1
   194c0:	3301      	adds	r3, #1
   194c2:	e9c4 2300 	strd	r2, r3, [r4]
   194c6:	e7d6      	b.n	19476 <_sungetc_r+0x2e>

000194c8 <__ssrefill_r>:
   194c8:	b510      	push	{r4, lr}
   194ca:	460c      	mov	r4, r1
   194cc:	6b09      	ldr	r1, [r1, #48]	; 0x30
   194ce:	b169      	cbz	r1, 194ec <__ssrefill_r+0x24>
   194d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   194d4:	4299      	cmp	r1, r3
   194d6:	d001      	beq.n	194dc <__ssrefill_r+0x14>
   194d8:	f7f9 fde4 	bl	130a4 <_free_r>
   194dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   194de:	6063      	str	r3, [r4, #4]
   194e0:	2000      	movs	r0, #0
   194e2:	6320      	str	r0, [r4, #48]	; 0x30
   194e4:	b113      	cbz	r3, 194ec <__ssrefill_r+0x24>
   194e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   194e8:	6023      	str	r3, [r4, #0]
   194ea:	bd10      	pop	{r4, pc}
   194ec:	89a3      	ldrh	r3, [r4, #12]
   194ee:	6921      	ldr	r1, [r4, #16]
   194f0:	2200      	movs	r2, #0
   194f2:	f043 0320 	orr.w	r3, r3, #32
   194f6:	e9c4 1200 	strd	r1, r2, [r4]
   194fa:	81a3      	strh	r3, [r4, #12]
   194fc:	f04f 30ff 	mov.w	r0, #4294967295
   19500:	bd10      	pop	{r4, pc}
   19502:	bf00      	nop

00019504 <_sfread_r>:
   19504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19508:	b085      	sub	sp, #20
   1950a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1950e:	fb02 f303 	mul.w	r3, r2, r3
   19512:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19514:	9301      	str	r3, [sp, #4]
   19516:	b3a3      	cbz	r3, 19582 <_sfread_r+0x7e>
   19518:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1951c:	9b01      	ldr	r3, [sp, #4]
   1951e:	4553      	cmp	r3, sl
   19520:	468b      	mov	fp, r1
   19522:	d946      	bls.n	195b2 <_sfread_r+0xae>
   19524:	46a0      	mov	r8, r4
   19526:	9d01      	ldr	r5, [sp, #4]
   19528:	f858 1b40 	ldr.w	r1, [r8], #64
   1952c:	4607      	mov	r7, r0
   1952e:	2600      	movs	r6, #0
   19530:	4652      	mov	r2, sl
   19532:	4658      	mov	r0, fp
   19534:	f7f5 f832 	bl	e59c <memcpy>
   19538:	6823      	ldr	r3, [r4, #0]
   1953a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1953c:	4453      	add	r3, sl
   1953e:	46a9      	mov	r9, r5
   19540:	e9c4 3600 	strd	r3, r6, [r4]
   19544:	4611      	mov	r1, r2
   19546:	4638      	mov	r0, r7
   19548:	44d3      	add	fp, sl
   1954a:	eba5 050a 	sub.w	r5, r5, sl
   1954e:	b1e2      	cbz	r2, 1958a <_sfread_r+0x86>
   19550:	4542      	cmp	r2, r8
   19552:	d001      	beq.n	19558 <_sfread_r+0x54>
   19554:	f7f9 fda6 	bl	130a4 <_free_r>
   19558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1955a:	6326      	str	r6, [r4, #48]	; 0x30
   1955c:	6063      	str	r3, [r4, #4]
   1955e:	b1a3      	cbz	r3, 1958a <_sfread_r+0x86>
   19560:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   19562:	6021      	str	r1, [r4, #0]
   19564:	42ab      	cmp	r3, r5
   19566:	469a      	mov	sl, r3
   19568:	d3e2      	bcc.n	19530 <_sfread_r+0x2c>
   1956a:	9b02      	ldr	r3, [sp, #8]
   1956c:	9301      	str	r3, [sp, #4]
   1956e:	462a      	mov	r2, r5
   19570:	4658      	mov	r0, fp
   19572:	f7f5 f813 	bl	e59c <memcpy>
   19576:	e9d4 3200 	ldrd	r3, r2, [r4]
   1957a:	1b52      	subs	r2, r2, r5
   1957c:	442b      	add	r3, r5
   1957e:	e9c4 3200 	strd	r3, r2, [r4]
   19582:	9801      	ldr	r0, [sp, #4]
   19584:	b005      	add	sp, #20
   19586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1958a:	9a01      	ldr	r2, [sp, #4]
   1958c:	9b03      	ldr	r3, [sp, #12]
   1958e:	4452      	add	r2, sl
   19590:	eba2 0209 	sub.w	r2, r2, r9
   19594:	fbb2 f3f3 	udiv	r3, r2, r3
   19598:	9301      	str	r3, [sp, #4]
   1959a:	89a3      	ldrh	r3, [r4, #12]
   1959c:	6922      	ldr	r2, [r4, #16]
   1959e:	9801      	ldr	r0, [sp, #4]
   195a0:	f043 0320 	orr.w	r3, r3, #32
   195a4:	81a3      	strh	r3, [r4, #12]
   195a6:	2300      	movs	r3, #0
   195a8:	e9c4 2300 	strd	r2, r3, [r4]
   195ac:	b005      	add	sp, #20
   195ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195b2:	6821      	ldr	r1, [r4, #0]
   195b4:	461d      	mov	r5, r3
   195b6:	e7d8      	b.n	1956a <_sfread_r+0x66>

000195b8 <__sprint_r.part.0>:
   195b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   195be:	049c      	lsls	r4, r3, #18
   195c0:	4690      	mov	r8, r2
   195c2:	d52d      	bpl.n	19620 <__sprint_r.part.0+0x68>
   195c4:	6893      	ldr	r3, [r2, #8]
   195c6:	6812      	ldr	r2, [r2, #0]
   195c8:	b343      	cbz	r3, 1961c <__sprint_r.part.0+0x64>
   195ca:	468b      	mov	fp, r1
   195cc:	4606      	mov	r6, r0
   195ce:	f102 0908 	add.w	r9, r2, #8
   195d2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   195d6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   195da:	d015      	beq.n	19608 <__sprint_r.part.0+0x50>
   195dc:	3d04      	subs	r5, #4
   195de:	2400      	movs	r4, #0
   195e0:	e001      	b.n	195e6 <__sprint_r.part.0+0x2e>
   195e2:	42a7      	cmp	r7, r4
   195e4:	d00e      	beq.n	19604 <__sprint_r.part.0+0x4c>
   195e6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   195ea:	465a      	mov	r2, fp
   195ec:	4630      	mov	r0, r6
   195ee:	f001 fa97 	bl	1ab20 <_fputwc_r>
   195f2:	1c43      	adds	r3, r0, #1
   195f4:	f104 0401 	add.w	r4, r4, #1
   195f8:	d1f3      	bne.n	195e2 <__sprint_r.part.0+0x2a>
   195fa:	2300      	movs	r3, #0
   195fc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   19600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19604:	f8d8 3008 	ldr.w	r3, [r8, #8]
   19608:	f02a 0a03 	bic.w	sl, sl, #3
   1960c:	eba3 030a 	sub.w	r3, r3, sl
   19610:	f8c8 3008 	str.w	r3, [r8, #8]
   19614:	f109 0908 	add.w	r9, r9, #8
   19618:	2b00      	cmp	r3, #0
   1961a:	d1da      	bne.n	195d2 <__sprint_r.part.0+0x1a>
   1961c:	2000      	movs	r0, #0
   1961e:	e7ec      	b.n	195fa <__sprint_r.part.0+0x42>
   19620:	f001 f80c 	bl	1a63c <__sfvwrite_r>
   19624:	2300      	movs	r3, #0
   19626:	e9c8 3301 	strd	r3, r3, [r8, #4]
   1962a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1962e:	bf00      	nop

00019630 <_vfiprintf_r>:
   19630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	ed2d 8b02 	vpush	{d8}
   19638:	b0c5      	sub	sp, #276	; 0x114
   1963a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   1963e:	4683      	mov	fp, r0
   19640:	ee08 1a10 	vmov	s16, r1
   19644:	4616      	mov	r6, r2
   19646:	2100      	movs	r1, #0
   19648:	2208      	movs	r2, #8
   1964a:	4650      	mov	r0, sl
   1964c:	461c      	mov	r4, r3
   1964e:	9307      	str	r3, [sp, #28]
   19650:	f7f9 f832 	bl	126b8 <memset>
   19654:	f1bb 0f00 	cmp.w	fp, #0
   19658:	d004      	beq.n	19664 <_vfiprintf_r+0x34>
   1965a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1965e:	2b00      	cmp	r3, #0
   19660:	f000 86a0 	beq.w	1a3a4 <_vfiprintf_r+0xd74>
   19664:	ee18 2a10 	vmov	r2, s16
   19668:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1966a:	07db      	lsls	r3, r3, #31
   1966c:	f140 8513 	bpl.w	1a096 <_vfiprintf_r+0xa66>
   19670:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   19674:	b28a      	uxth	r2, r1
   19676:	0495      	lsls	r5, r2, #18
   19678:	d40b      	bmi.n	19692 <_vfiprintf_r+0x62>
   1967a:	ee18 3a10 	vmov	r3, s16
   1967e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   19682:	8199      	strh	r1, [r3, #12]
   19684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   19686:	b28a      	uxth	r2, r1
   19688:	ee18 1a10 	vmov	r1, s16
   1968c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   19690:	664b      	str	r3, [r1, #100]	; 0x64
   19692:	0710      	lsls	r0, r2, #28
   19694:	f140 8105 	bpl.w	198a2 <_vfiprintf_r+0x272>
   19698:	ee18 3a10 	vmov	r3, s16
   1969c:	691b      	ldr	r3, [r3, #16]
   1969e:	2b00      	cmp	r3, #0
   196a0:	f000 80ff 	beq.w	198a2 <_vfiprintf_r+0x272>
   196a4:	f002 031a 	and.w	r3, r2, #26
   196a8:	2b0a      	cmp	r3, #10
   196aa:	f000 810a 	beq.w	198c2 <_vfiprintf_r+0x292>
   196ae:	2300      	movs	r3, #0
   196b0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   196b4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   196b8:	aa1b      	add	r2, sp, #108	; 0x6c
   196ba:	930c      	str	r3, [sp, #48]	; 0x30
   196bc:	9218      	str	r2, [sp, #96]	; 0x60
   196be:	4691      	mov	r9, r2
   196c0:	930b      	str	r3, [sp, #44]	; 0x2c
   196c2:	9305      	str	r3, [sp, #20]
   196c4:	46b0      	mov	r8, r6
   196c6:	4644      	mov	r4, r8
   196c8:	4ba8      	ldr	r3, [pc, #672]	; (1996c <_vfiprintf_r+0x33c>)
   196ca:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   196ce:	f7f9 f913 	bl	128f8 <__locale_mb_cur_max>
   196d2:	4622      	mov	r2, r4
   196d4:	4603      	mov	r3, r0
   196d6:	a912      	add	r1, sp, #72	; 0x48
   196d8:	f8cd a000 	str.w	sl, [sp]
   196dc:	4658      	mov	r0, fp
   196de:	47a8      	blx	r5
   196e0:	2800      	cmp	r0, #0
   196e2:	f000 8145 	beq.w	19970 <_vfiprintf_r+0x340>
   196e6:	f2c0 8139 	blt.w	1995c <_vfiprintf_r+0x32c>
   196ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
   196ec:	2a25      	cmp	r2, #37	; 0x25
   196ee:	4603      	mov	r3, r0
   196f0:	d001      	beq.n	196f6 <_vfiprintf_r+0xc6>
   196f2:	441c      	add	r4, r3
   196f4:	e7e8      	b.n	196c8 <_vfiprintf_r+0x98>
   196f6:	ebb4 0608 	subs.w	r6, r4, r8
   196fa:	4605      	mov	r5, r0
   196fc:	f040 813c 	bne.w	19978 <_vfiprintf_r+0x348>
   19700:	2300      	movs	r3, #0
   19702:	7861      	ldrb	r1, [r4, #1]
   19704:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19708:	f104 0801 	add.w	r8, r4, #1
   1970c:	9306      	str	r3, [sp, #24]
   1970e:	f04f 37ff 	mov.w	r7, #4294967295
   19712:	461e      	mov	r6, r3
   19714:	242b      	movs	r4, #43	; 0x2b
   19716:	f108 0801 	add.w	r8, r8, #1
   1971a:	f1a1 0320 	sub.w	r3, r1, #32
   1971e:	2b5a      	cmp	r3, #90	; 0x5a
   19720:	f200 8178 	bhi.w	19a14 <_vfiprintf_r+0x3e4>
   19724:	e8df f013 	tbh	[pc, r3, lsl #1]
   19728:	017602b5 	.word	0x017602b5
   1972c:	02b00176 	.word	0x02b00176
   19730:	01760176 	.word	0x01760176
   19734:	006a0176 	.word	0x006a0176
   19738:	01760176 	.word	0x01760176
   1973c:	028d027d 	.word	0x028d027d
   19740:	02880176 	.word	0x02880176
   19744:	01760297 	.word	0x01760297
   19748:	005b0292 	.word	0x005b0292
   1974c:	005b005b 	.word	0x005b005b
   19750:	005b005b 	.word	0x005b005b
   19754:	005b005b 	.word	0x005b005b
   19758:	005b005b 	.word	0x005b005b
   1975c:	01760176 	.word	0x01760176
   19760:	01760176 	.word	0x01760176
   19764:	01760176 	.word	0x01760176
   19768:	01760176 	.word	0x01760176
   1976c:	025c0176 	.word	0x025c0176
   19770:	01760084 	.word	0x01760084
   19774:	01760176 	.word	0x01760176
   19778:	01760176 	.word	0x01760176
   1977c:	01760176 	.word	0x01760176
   19780:	01760176 	.word	0x01760176
   19784:	00e80176 	.word	0x00e80176
   19788:	01760176 	.word	0x01760176
   1978c:	02330176 	.word	0x02330176
   19790:	02da0176 	.word	0x02da0176
   19794:	01760176 	.word	0x01760176
   19798:	0176058b 	.word	0x0176058b
   1979c:	01760176 	.word	0x01760176
   197a0:	01760176 	.word	0x01760176
   197a4:	01760176 	.word	0x01760176
   197a8:	01760176 	.word	0x01760176
   197ac:	025c0176 	.word	0x025c0176
   197b0:	01760086 	.word	0x01760086
   197b4:	01760176 	.word	0x01760176
   197b8:	008602cd 	.word	0x008602cd
   197bc:	0176007f 	.word	0x0176007f
   197c0:	017602c0 	.word	0x017602c0
   197c4:	00ea02fd 	.word	0x00ea02fd
   197c8:	007f02ed 	.word	0x007f02ed
   197cc:	02330176 	.word	0x02330176
   197d0:	0569007c 	.word	0x0569007c
   197d4:	01760176 	.word	0x01760176
   197d8:	0176056b 	.word	0x0176056b
   197dc:	007c      	.short	0x007c
   197de:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   197e2:	2200      	movs	r2, #0
   197e4:	f818 1b01 	ldrb.w	r1, [r8], #1
   197e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   197ec:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   197f0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   197f4:	2b09      	cmp	r3, #9
   197f6:	d9f5      	bls.n	197e4 <_vfiprintf_r+0x1b4>
   197f8:	9206      	str	r2, [sp, #24]
   197fa:	e78e      	b.n	1971a <_vfiprintf_r+0xea>
   197fc:	4658      	mov	r0, fp
   197fe:	f7fe fa7d 	bl	17cfc <_localeconv_r>
   19802:	6843      	ldr	r3, [r0, #4]
   19804:	930d      	str	r3, [sp, #52]	; 0x34
   19806:	4618      	mov	r0, r3
   19808:	f7f9 fb3a 	bl	12e80 <strlen>
   1980c:	900e      	str	r0, [sp, #56]	; 0x38
   1980e:	4605      	mov	r5, r0
   19810:	4658      	mov	r0, fp
   19812:	f7fe fa73 	bl	17cfc <_localeconv_r>
   19816:	6883      	ldr	r3, [r0, #8]
   19818:	930b      	str	r3, [sp, #44]	; 0x2c
   1981a:	2d00      	cmp	r5, #0
   1981c:	f040 84d6 	bne.w	1a1cc <_vfiprintf_r+0xb9c>
   19820:	f898 1000 	ldrb.w	r1, [r8]
   19824:	e777      	b.n	19716 <_vfiprintf_r+0xe6>
   19826:	f898 1000 	ldrb.w	r1, [r8]
   1982a:	f046 0620 	orr.w	r6, r6, #32
   1982e:	e772      	b.n	19716 <_vfiprintf_r+0xe6>
   19830:	f046 0610 	orr.w	r6, r6, #16
   19834:	06b4      	lsls	r4, r6, #26
   19836:	f140 818e 	bpl.w	19b56 <_vfiprintf_r+0x526>
   1983a:	9b07      	ldr	r3, [sp, #28]
   1983c:	3307      	adds	r3, #7
   1983e:	f023 0307 	bic.w	r3, r3, #7
   19842:	461a      	mov	r2, r3
   19844:	6859      	ldr	r1, [r3, #4]
   19846:	f852 3b08 	ldr.w	r3, [r2], #8
   1984a:	9207      	str	r2, [sp, #28]
   1984c:	460a      	mov	r2, r1
   1984e:	2900      	cmp	r1, #0
   19850:	f2c0 8470 	blt.w	1a134 <_vfiprintf_r+0xb04>
   19854:	1c79      	adds	r1, r7, #1
   19856:	f000 85a2 	beq.w	1a39e <_vfiprintf_r+0xd6e>
   1985a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   1985e:	9103      	str	r1, [sp, #12]
   19860:	ea53 0102 	orrs.w	r1, r3, r2
   19864:	f000 843f 	beq.w	1a0e6 <_vfiprintf_r+0xab6>
   19868:	2b0a      	cmp	r3, #10
   1986a:	f172 0100 	sbcs.w	r1, r2, #0
   1986e:	f080 8541 	bcs.w	1a2f4 <_vfiprintf_r+0xcc4>
   19872:	3330      	adds	r3, #48	; 0x30
   19874:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   19878:	9e03      	ldr	r6, [sp, #12]
   1987a:	2301      	movs	r3, #1
   1987c:	9304      	str	r3, [sp, #16]
   1987e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   19882:	9b04      	ldr	r3, [sp, #16]
   19884:	42bb      	cmp	r3, r7
   19886:	bfb8      	it	lt
   19888:	463b      	movlt	r3, r7
   1988a:	9303      	str	r3, [sp, #12]
   1988c:	2300      	movs	r3, #0
   1988e:	9308      	str	r3, [sp, #32]
   19890:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19894:	2b00      	cmp	r3, #0
   19896:	f000 80cb 	beq.w	19a30 <_vfiprintf_r+0x400>
   1989a:	9b03      	ldr	r3, [sp, #12]
   1989c:	3301      	adds	r3, #1
   1989e:	9303      	str	r3, [sp, #12]
   198a0:	e0c6      	b.n	19a30 <_vfiprintf_r+0x400>
   198a2:	ee18 1a10 	vmov	r1, s16
   198a6:	4658      	mov	r0, fp
   198a8:	ee18 5a10 	vmov	r5, s16
   198ac:	f001 f87c 	bl	1a9a8 <__swsetup_r>
   198b0:	2800      	cmp	r0, #0
   198b2:	f040 8652 	bne.w	1a55a <_vfiprintf_r+0xf2a>
   198b6:	89aa      	ldrh	r2, [r5, #12]
   198b8:	f002 031a 	and.w	r3, r2, #26
   198bc:	2b0a      	cmp	r3, #10
   198be:	f47f aef6 	bne.w	196ae <_vfiprintf_r+0x7e>
   198c2:	ee18 1a10 	vmov	r1, s16
   198c6:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   198ca:	2b00      	cmp	r3, #0
   198cc:	f6ff aeef 	blt.w	196ae <_vfiprintf_r+0x7e>
   198d0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   198d2:	07db      	lsls	r3, r3, #31
   198d4:	d402      	bmi.n	198dc <_vfiprintf_r+0x2ac>
   198d6:	0597      	lsls	r7, r2, #22
   198d8:	f140 8612 	bpl.w	1a500 <_vfiprintf_r+0xed0>
   198dc:	ee18 1a10 	vmov	r1, s16
   198e0:	4623      	mov	r3, r4
   198e2:	4632      	mov	r2, r6
   198e4:	4658      	mov	r0, fp
   198e6:	f000 fe69 	bl	1a5bc <__sbprintf>
   198ea:	9005      	str	r0, [sp, #20]
   198ec:	9805      	ldr	r0, [sp, #20]
   198ee:	b045      	add	sp, #276	; 0x114
   198f0:	ecbd 8b02 	vpop	{d8}
   198f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198f8:	f046 0610 	orr.w	r6, r6, #16
   198fc:	f016 0220 	ands.w	r2, r6, #32
   19900:	f000 8136 	beq.w	19b70 <_vfiprintf_r+0x540>
   19904:	9b07      	ldr	r3, [sp, #28]
   19906:	3307      	adds	r3, #7
   19908:	f023 0307 	bic.w	r3, r3, #7
   1990c:	4619      	mov	r1, r3
   1990e:	685a      	ldr	r2, [r3, #4]
   19910:	f851 3b08 	ldr.w	r3, [r1], #8
   19914:	9107      	str	r1, [sp, #28]
   19916:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1991a:	9103      	str	r1, [sp, #12]
   1991c:	2100      	movs	r1, #0
   1991e:	2000      	movs	r0, #0
   19920:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   19924:	1c78      	adds	r0, r7, #1
   19926:	f000 8210 	beq.w	19d4a <_vfiprintf_r+0x71a>
   1992a:	9803      	ldr	r0, [sp, #12]
   1992c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   19930:	ea53 0002 	orrs.w	r0, r3, r2
   19934:	f040 8208 	bne.w	19d48 <_vfiprintf_r+0x718>
   19938:	2f00      	cmp	r7, #0
   1993a:	f040 8538 	bne.w	1a3ae <_vfiprintf_r+0xd7e>
   1993e:	2900      	cmp	r1, #0
   19940:	f040 83d5 	bne.w	1a0ee <_vfiprintf_r+0xabe>
   19944:	9b03      	ldr	r3, [sp, #12]
   19946:	f013 0301 	ands.w	r3, r3, #1
   1994a:	9304      	str	r3, [sp, #16]
   1994c:	f000 8411 	beq.w	1a172 <_vfiprintf_r+0xb42>
   19950:	2330      	movs	r3, #48	; 0x30
   19952:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   19956:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1995a:	e792      	b.n	19882 <_vfiprintf_r+0x252>
   1995c:	2208      	movs	r2, #8
   1995e:	2100      	movs	r1, #0
   19960:	4650      	mov	r0, sl
   19962:	f7f8 fea9 	bl	126b8 <memset>
   19966:	2301      	movs	r3, #1
   19968:	441c      	add	r4, r3
   1996a:	e6ad      	b.n	196c8 <_vfiprintf_r+0x98>
   1996c:	20008f94 	.word	0x20008f94
   19970:	ebb4 0608 	subs.w	r6, r4, r8
   19974:	4605      	mov	r5, r0
   19976:	d01b      	beq.n	199b0 <_vfiprintf_r+0x380>
   19978:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1997a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1997c:	3301      	adds	r3, #1
   1997e:	4432      	add	r2, r6
   19980:	2b07      	cmp	r3, #7
   19982:	e9c9 8600 	strd	r8, r6, [r9]
   19986:	921a      	str	r2, [sp, #104]	; 0x68
   19988:	9319      	str	r3, [sp, #100]	; 0x64
   1998a:	dd1c      	ble.n	199c6 <_vfiprintf_r+0x396>
   1998c:	2a00      	cmp	r2, #0
   1998e:	f000 83a6 	beq.w	1a0de <_vfiprintf_r+0xaae>
   19992:	ee18 1a10 	vmov	r1, s16
   19996:	aa18      	add	r2, sp, #96	; 0x60
   19998:	4658      	mov	r0, fp
   1999a:	f7ff fe0d 	bl	195b8 <__sprint_r.part.0>
   1999e:	bb20      	cbnz	r0, 199ea <_vfiprintf_r+0x3ba>
   199a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   199a4:	9b05      	ldr	r3, [sp, #20]
   199a6:	4433      	add	r3, r6
   199a8:	9305      	str	r3, [sp, #20]
   199aa:	2d00      	cmp	r5, #0
   199ac:	f47f aea8 	bne.w	19700 <_vfiprintf_r+0xd0>
   199b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   199b2:	2b00      	cmp	r3, #0
   199b4:	f040 85c1 	bne.w	1a53a <_vfiprintf_r+0xf0a>
   199b8:	ee18 3a10 	vmov	r3, s16
   199bc:	2200      	movs	r2, #0
   199be:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   199c2:	9219      	str	r2, [sp, #100]	; 0x64
   199c4:	e015      	b.n	199f2 <_vfiprintf_r+0x3c2>
   199c6:	f109 0908 	add.w	r9, r9, #8
   199ca:	e7eb      	b.n	199a4 <_vfiprintf_r+0x374>
   199cc:	ee18 1a10 	vmov	r1, s16
   199d0:	aa18      	add	r2, sp, #96	; 0x60
   199d2:	4658      	mov	r0, fp
   199d4:	f7ff fdf0 	bl	195b8 <__sprint_r.part.0>
   199d8:	2800      	cmp	r0, #0
   199da:	f000 80a6 	beq.w	19b2a <_vfiprintf_r+0x4fa>
   199de:	9b08      	ldr	r3, [sp, #32]
   199e0:	b11b      	cbz	r3, 199ea <_vfiprintf_r+0x3ba>
   199e2:	9908      	ldr	r1, [sp, #32]
   199e4:	4658      	mov	r0, fp
   199e6:	f7f9 fb5d 	bl	130a4 <_free_r>
   199ea:	ee18 3a10 	vmov	r3, s16
   199ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   199f2:	ee18 2a10 	vmov	r2, s16
   199f6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   199f8:	f012 0f01 	tst.w	r2, #1
   199fc:	b29a      	uxth	r2, r3
   199fe:	f000 80a0 	beq.w	19b42 <_vfiprintf_r+0x512>
   19a02:	0650      	lsls	r0, r2, #25
   19a04:	f100 85b2 	bmi.w	1a56c <_vfiprintf_r+0xf3c>
   19a08:	9805      	ldr	r0, [sp, #20]
   19a0a:	b045      	add	sp, #276	; 0x114
   19a0c:	ecbd 8b02 	vpop	{d8}
   19a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a14:	2900      	cmp	r1, #0
   19a16:	d0cb      	beq.n	199b0 <_vfiprintf_r+0x380>
   19a18:	2300      	movs	r3, #0
   19a1a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19a1e:	2301      	movs	r3, #1
   19a20:	e9cd 3303 	strd	r3, r3, [sp, #12]
   19a24:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   19a28:	ac2b      	add	r4, sp, #172	; 0xac
   19a2a:	2300      	movs	r3, #0
   19a2c:	9308      	str	r3, [sp, #32]
   19a2e:	461f      	mov	r7, r3
   19a30:	f016 0302 	ands.w	r3, r6, #2
   19a34:	9309      	str	r3, [sp, #36]	; 0x24
   19a36:	d002      	beq.n	19a3e <_vfiprintf_r+0x40e>
   19a38:	9b03      	ldr	r3, [sp, #12]
   19a3a:	3302      	adds	r3, #2
   19a3c:	9303      	str	r3, [sp, #12]
   19a3e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   19a42:	930a      	str	r3, [sp, #40]	; 0x28
   19a44:	d105      	bne.n	19a52 <_vfiprintf_r+0x422>
   19a46:	9b06      	ldr	r3, [sp, #24]
   19a48:	9a03      	ldr	r2, [sp, #12]
   19a4a:	1a9d      	subs	r5, r3, r2
   19a4c:	2d00      	cmp	r5, #0
   19a4e:	f300 827b 	bgt.w	19f48 <_vfiprintf_r+0x918>
   19a52:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19a56:	1c41      	adds	r1, r0, #1
   19a58:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   19a5c:	b182      	cbz	r2, 19a80 <_vfiprintf_r+0x450>
   19a5e:	2201      	movs	r2, #1
   19a60:	3301      	adds	r3, #1
   19a62:	f8c9 2004 	str.w	r2, [r9, #4]
   19a66:	2907      	cmp	r1, #7
   19a68:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   19a6c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19a70:	f8c9 2000 	str.w	r2, [r9]
   19a74:	f300 824a 	bgt.w	19f0c <_vfiprintf_r+0x8dc>
   19a78:	4608      	mov	r0, r1
   19a7a:	f109 0908 	add.w	r9, r9, #8
   19a7e:	3101      	adds	r1, #1
   19a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19a82:	b1e2      	cbz	r2, 19abe <_vfiprintf_r+0x48e>
   19a84:	aa11      	add	r2, sp, #68	; 0x44
   19a86:	3302      	adds	r3, #2
   19a88:	f8c9 2000 	str.w	r2, [r9]
   19a8c:	2907      	cmp	r1, #7
   19a8e:	f04f 0202 	mov.w	r2, #2
   19a92:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19a96:	f8c9 2004 	str.w	r2, [r9, #4]
   19a9a:	f340 8250 	ble.w	19f3e <_vfiprintf_r+0x90e>
   19a9e:	2b00      	cmp	r3, #0
   19aa0:	f000 8343 	beq.w	1a12a <_vfiprintf_r+0xafa>
   19aa4:	ee18 1a10 	vmov	r1, s16
   19aa8:	aa18      	add	r2, sp, #96	; 0x60
   19aaa:	4658      	mov	r0, fp
   19aac:	f7ff fd84 	bl	195b8 <__sprint_r.part.0>
   19ab0:	2800      	cmp	r0, #0
   19ab2:	d194      	bne.n	199de <_vfiprintf_r+0x3ae>
   19ab4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19ab8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19abc:	1c41      	adds	r1, r0, #1
   19abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19ac0:	2a80      	cmp	r2, #128	; 0x80
   19ac2:	f000 8184 	beq.w	19dce <_vfiprintf_r+0x79e>
   19ac6:	9a04      	ldr	r2, [sp, #16]
   19ac8:	1abd      	subs	r5, r7, r2
   19aca:	2d00      	cmp	r5, #0
   19acc:	f300 81d7 	bgt.w	19e7e <_vfiprintf_r+0x84e>
   19ad0:	9a04      	ldr	r2, [sp, #16]
   19ad2:	f8c9 4000 	str.w	r4, [r9]
   19ad6:	4413      	add	r3, r2
   19ad8:	2907      	cmp	r1, #7
   19ada:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19ade:	f8c9 2004 	str.w	r2, [r9, #4]
   19ae2:	f340 816e 	ble.w	19dc2 <_vfiprintf_r+0x792>
   19ae6:	2b00      	cmp	r3, #0
   19ae8:	f000 8275 	beq.w	19fd6 <_vfiprintf_r+0x9a6>
   19aec:	ee18 1a10 	vmov	r1, s16
   19af0:	aa18      	add	r2, sp, #96	; 0x60
   19af2:	4658      	mov	r0, fp
   19af4:	f7ff fd60 	bl	195b8 <__sprint_r.part.0>
   19af8:	2800      	cmp	r0, #0
   19afa:	f47f af70 	bne.w	199de <_vfiprintf_r+0x3ae>
   19afe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19b00:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b04:	0775      	lsls	r5, r6, #29
   19b06:	d505      	bpl.n	19b14 <_vfiprintf_r+0x4e4>
   19b08:	9a06      	ldr	r2, [sp, #24]
   19b0a:	9903      	ldr	r1, [sp, #12]
   19b0c:	1a54      	subs	r4, r2, r1
   19b0e:	2c00      	cmp	r4, #0
   19b10:	f300 826b 	bgt.w	19fea <_vfiprintf_r+0x9ba>
   19b14:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   19b18:	9803      	ldr	r0, [sp, #12]
   19b1a:	4281      	cmp	r1, r0
   19b1c:	bfac      	ite	ge
   19b1e:	1852      	addge	r2, r2, r1
   19b20:	1812      	addlt	r2, r2, r0
   19b22:	9205      	str	r2, [sp, #20]
   19b24:	2b00      	cmp	r3, #0
   19b26:	f47f af51 	bne.w	199cc <_vfiprintf_r+0x39c>
   19b2a:	9908      	ldr	r1, [sp, #32]
   19b2c:	2300      	movs	r3, #0
   19b2e:	9319      	str	r3, [sp, #100]	; 0x64
   19b30:	2900      	cmp	r1, #0
   19b32:	f000 8149 	beq.w	19dc8 <_vfiprintf_r+0x798>
   19b36:	4658      	mov	r0, fp
   19b38:	f7f9 fab4 	bl	130a4 <_free_r>
   19b3c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b40:	e5c1      	b.n	196c6 <_vfiprintf_r+0x96>
   19b42:	059c      	lsls	r4, r3, #22
   19b44:	f53f af5d 	bmi.w	19a02 <_vfiprintf_r+0x3d2>
   19b48:	ee18 4a10 	vmov	r4, s16
   19b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19b4e:	f7f8 ff6f 	bl	12a30 <__retarget_lock_release_recursive>
   19b52:	89a2      	ldrh	r2, [r4, #12]
   19b54:	e755      	b.n	19a02 <_vfiprintf_r+0x3d2>
   19b56:	06f0      	lsls	r0, r6, #27
   19b58:	9a07      	ldr	r2, [sp, #28]
   19b5a:	f100 831f 	bmi.w	1a19c <_vfiprintf_r+0xb6c>
   19b5e:	0671      	lsls	r1, r6, #25
   19b60:	f140 8319 	bpl.w	1a196 <_vfiprintf_r+0xb66>
   19b64:	f932 3b04 	ldrsh.w	r3, [r2], #4
   19b68:	9207      	str	r2, [sp, #28]
   19b6a:	17da      	asrs	r2, r3, #31
   19b6c:	4611      	mov	r1, r2
   19b6e:	e66e      	b.n	1984e <_vfiprintf_r+0x21e>
   19b70:	f016 0310 	ands.w	r3, r6, #16
   19b74:	9907      	ldr	r1, [sp, #28]
   19b76:	f040 8309 	bne.w	1a18c <_vfiprintf_r+0xb5c>
   19b7a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   19b7e:	f000 8301 	beq.w	1a184 <_vfiprintf_r+0xb54>
   19b82:	461a      	mov	r2, r3
   19b84:	f851 3b04 	ldr.w	r3, [r1], #4
   19b88:	9107      	str	r1, [sp, #28]
   19b8a:	b29b      	uxth	r3, r3
   19b8c:	e6c3      	b.n	19916 <_vfiprintf_r+0x2e6>
   19b8e:	9b07      	ldr	r3, [sp, #28]
   19b90:	461a      	mov	r2, r3
   19b92:	2300      	movs	r3, #0
   19b94:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19b98:	4613      	mov	r3, r2
   19b9a:	f853 4b04 	ldr.w	r4, [r3], #4
   19b9e:	9303      	str	r3, [sp, #12]
   19ba0:	2c00      	cmp	r4, #0
   19ba2:	f000 8412 	beq.w	1a3ca <_vfiprintf_r+0xd9a>
   19ba6:	2953      	cmp	r1, #83	; 0x53
   19ba8:	f000 8365 	beq.w	1a276 <_vfiprintf_r+0xc46>
   19bac:	f016 0510 	ands.w	r5, r6, #16
   19bb0:	f040 8361 	bne.w	1a276 <_vfiprintf_r+0xc46>
   19bb4:	1c7b      	adds	r3, r7, #1
   19bb6:	f000 84b3 	beq.w	1a520 <_vfiprintf_r+0xef0>
   19bba:	463a      	mov	r2, r7
   19bbc:	4629      	mov	r1, r5
   19bbe:	4620      	mov	r0, r4
   19bc0:	f7f9 f90e 	bl	12de0 <memchr>
   19bc4:	9008      	str	r0, [sp, #32]
   19bc6:	2800      	cmp	r0, #0
   19bc8:	f000 849f 	beq.w	1a50a <_vfiprintf_r+0xeda>
   19bcc:	1b03      	subs	r3, r0, r4
   19bce:	9a03      	ldr	r2, [sp, #12]
   19bd0:	9304      	str	r3, [sp, #16]
   19bd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19bd6:	462f      	mov	r7, r5
   19bd8:	9207      	str	r2, [sp, #28]
   19bda:	9303      	str	r3, [sp, #12]
   19bdc:	9508      	str	r5, [sp, #32]
   19bde:	e657      	b.n	19890 <_vfiprintf_r+0x260>
   19be0:	2943      	cmp	r1, #67	; 0x43
   19be2:	d002      	beq.n	19bea <_vfiprintf_r+0x5ba>
   19be4:	06f5      	lsls	r5, r6, #27
   19be6:	f140 832d 	bpl.w	1a244 <_vfiprintf_r+0xc14>
   19bea:	9d07      	ldr	r5, [sp, #28]
   19bec:	2208      	movs	r2, #8
   19bee:	2100      	movs	r1, #0
   19bf0:	a816      	add	r0, sp, #88	; 0x58
   19bf2:	ac2b      	add	r4, sp, #172	; 0xac
   19bf4:	f7f8 fd60 	bl	126b8 <memset>
   19bf8:	ab16      	add	r3, sp, #88	; 0x58
   19bfa:	f855 2b04 	ldr.w	r2, [r5], #4
   19bfe:	4621      	mov	r1, r4
   19c00:	4658      	mov	r0, fp
   19c02:	f7ff fa77 	bl	190f4 <_wcrtomb_r>
   19c06:	4603      	mov	r3, r0
   19c08:	3301      	adds	r3, #1
   19c0a:	9004      	str	r0, [sp, #16]
   19c0c:	f000 84b3 	beq.w	1a576 <_vfiprintf_r+0xf46>
   19c10:	9b04      	ldr	r3, [sp, #16]
   19c12:	9507      	str	r5, [sp, #28]
   19c14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19c18:	9303      	str	r3, [sp, #12]
   19c1a:	2300      	movs	r3, #0
   19c1c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19c20:	e703      	b.n	19a2a <_vfiprintf_r+0x3fa>
   19c22:	9b07      	ldr	r3, [sp, #28]
   19c24:	f853 2b04 	ldr.w	r2, [r3], #4
   19c28:	9206      	str	r2, [sp, #24]
   19c2a:	2a00      	cmp	r2, #0
   19c2c:	f280 829c 	bge.w	1a168 <_vfiprintf_r+0xb38>
   19c30:	9a06      	ldr	r2, [sp, #24]
   19c32:	4252      	negs	r2, r2
   19c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19c38:	f898 1000 	ldrb.w	r1, [r8]
   19c3c:	f046 0604 	orr.w	r6, r6, #4
   19c40:	e569      	b.n	19716 <_vfiprintf_r+0xe6>
   19c42:	f898 1000 	ldrb.w	r1, [r8]
   19c46:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   19c4a:	e564      	b.n	19716 <_vfiprintf_r+0xe6>
   19c4c:	f898 1000 	ldrb.w	r1, [r8]
   19c50:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   19c54:	e55f      	b.n	19716 <_vfiprintf_r+0xe6>
   19c56:	4642      	mov	r2, r8
   19c58:	f812 1b01 	ldrb.w	r1, [r2], #1
   19c5c:	292a      	cmp	r1, #42	; 0x2a
   19c5e:	f000 8496 	beq.w	1a58e <_vfiprintf_r+0xf5e>
   19c62:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19c66:	2b09      	cmp	r3, #9
   19c68:	4690      	mov	r8, r2
   19c6a:	f04f 0700 	mov.w	r7, #0
   19c6e:	f63f ad54 	bhi.w	1971a <_vfiprintf_r+0xea>
   19c72:	f818 1b01 	ldrb.w	r1, [r8], #1
   19c76:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   19c7a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   19c7e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19c82:	2b09      	cmp	r3, #9
   19c84:	d9f5      	bls.n	19c72 <_vfiprintf_r+0x642>
   19c86:	e548      	b.n	1971a <_vfiprintf_r+0xea>
   19c88:	f898 1000 	ldrb.w	r1, [r8]
   19c8c:	f046 0601 	orr.w	r6, r6, #1
   19c90:	e541      	b.n	19716 <_vfiprintf_r+0xe6>
   19c92:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19c96:	2b00      	cmp	r3, #0
   19c98:	f47f adc2 	bne.w	19820 <_vfiprintf_r+0x1f0>
   19c9c:	2320      	movs	r3, #32
   19c9e:	f898 1000 	ldrb.w	r1, [r8]
   19ca2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19ca6:	e536      	b.n	19716 <_vfiprintf_r+0xe6>
   19ca8:	f898 1000 	ldrb.w	r1, [r8]
   19cac:	296c      	cmp	r1, #108	; 0x6c
   19cae:	bf03      	ittte	eq
   19cb0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19cb4:	f046 0620 	orreq.w	r6, r6, #32
   19cb8:	f108 0801 	addeq.w	r8, r8, #1
   19cbc:	f046 0610 	orrne.w	r6, r6, #16
   19cc0:	e529      	b.n	19716 <_vfiprintf_r+0xe6>
   19cc2:	f898 1000 	ldrb.w	r1, [r8]
   19cc6:	2968      	cmp	r1, #104	; 0x68
   19cc8:	bf03      	ittte	eq
   19cca:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19cce:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   19cd2:	f108 0801 	addeq.w	r8, r8, #1
   19cd6:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   19cda:	e51c      	b.n	19716 <_vfiprintf_r+0xe6>
   19cdc:	f046 0310 	orr.w	r3, r6, #16
   19ce0:	9303      	str	r3, [sp, #12]
   19ce2:	9b03      	ldr	r3, [sp, #12]
   19ce4:	f013 0220 	ands.w	r2, r3, #32
   19ce8:	f000 8206 	beq.w	1a0f8 <_vfiprintf_r+0xac8>
   19cec:	9b07      	ldr	r3, [sp, #28]
   19cee:	3307      	adds	r3, #7
   19cf0:	f023 0307 	bic.w	r3, r3, #7
   19cf4:	4619      	mov	r1, r3
   19cf6:	685a      	ldr	r2, [r3, #4]
   19cf8:	f851 3b08 	ldr.w	r3, [r1], #8
   19cfc:	9107      	str	r1, [sp, #28]
   19cfe:	2101      	movs	r1, #1
   19d00:	e60d      	b.n	1991e <_vfiprintf_r+0x2ee>
   19d02:	9a07      	ldr	r2, [sp, #28]
   19d04:	f046 0302 	orr.w	r3, r6, #2
   19d08:	9303      	str	r3, [sp, #12]
   19d0a:	f852 3b04 	ldr.w	r3, [r2], #4
   19d0e:	9207      	str	r2, [sp, #28]
   19d10:	f647 0230 	movw	r2, #30768	; 0x7830
   19d14:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   19d18:	4ab8      	ldr	r2, [pc, #736]	; (19ffc <_vfiprintf_r+0x9cc>)
   19d1a:	920c      	str	r2, [sp, #48]	; 0x30
   19d1c:	2102      	movs	r1, #2
   19d1e:	2200      	movs	r2, #0
   19d20:	e5fd      	b.n	1991e <_vfiprintf_r+0x2ee>
   19d22:	06b7      	lsls	r7, r6, #26
   19d24:	f100 8248 	bmi.w	1a1b8 <_vfiprintf_r+0xb88>
   19d28:	06f5      	lsls	r5, r6, #27
   19d2a:	f100 8346 	bmi.w	1a3ba <_vfiprintf_r+0xd8a>
   19d2e:	0674      	lsls	r4, r6, #25
   19d30:	f100 83d5 	bmi.w	1a4de <_vfiprintf_r+0xeae>
   19d34:	05b0      	lsls	r0, r6, #22
   19d36:	f140 8340 	bpl.w	1a3ba <_vfiprintf_r+0xd8a>
   19d3a:	9b07      	ldr	r3, [sp, #28]
   19d3c:	9905      	ldr	r1, [sp, #20]
   19d3e:	f853 2b04 	ldr.w	r2, [r3], #4
   19d42:	9307      	str	r3, [sp, #28]
   19d44:	7011      	strb	r1, [r2, #0]
   19d46:	e4be      	b.n	196c6 <_vfiprintf_r+0x96>
   19d48:	9603      	str	r6, [sp, #12]
   19d4a:	2901      	cmp	r1, #1
   19d4c:	f43f ad8c 	beq.w	19868 <_vfiprintf_r+0x238>
   19d50:	2902      	cmp	r1, #2
   19d52:	ac44      	add	r4, sp, #272	; 0x110
   19d54:	d111      	bne.n	19d7a <_vfiprintf_r+0x74a>
   19d56:	980c      	ldr	r0, [sp, #48]	; 0x30
   19d58:	f003 010f 	and.w	r1, r3, #15
   19d5c:	091b      	lsrs	r3, r3, #4
   19d5e:	5c41      	ldrb	r1, [r0, r1]
   19d60:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19d64:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   19d68:	0912      	lsrs	r2, r2, #4
   19d6a:	ea53 0102 	orrs.w	r1, r3, r2
   19d6e:	d1f3      	bne.n	19d58 <_vfiprintf_r+0x728>
   19d70:	9e03      	ldr	r6, [sp, #12]
   19d72:	ab44      	add	r3, sp, #272	; 0x110
   19d74:	1b1b      	subs	r3, r3, r4
   19d76:	9304      	str	r3, [sp, #16]
   19d78:	e583      	b.n	19882 <_vfiprintf_r+0x252>
   19d7a:	f003 0107 	and.w	r1, r3, #7
   19d7e:	08db      	lsrs	r3, r3, #3
   19d80:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   19d84:	08d2      	lsrs	r2, r2, #3
   19d86:	3130      	adds	r1, #48	; 0x30
   19d88:	ea53 0502 	orrs.w	r5, r3, r2
   19d8c:	4620      	mov	r0, r4
   19d8e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19d92:	d1f2      	bne.n	19d7a <_vfiprintf_r+0x74a>
   19d94:	9e03      	ldr	r6, [sp, #12]
   19d96:	07f3      	lsls	r3, r6, #31
   19d98:	d5eb      	bpl.n	19d72 <_vfiprintf_r+0x742>
   19d9a:	2930      	cmp	r1, #48	; 0x30
   19d9c:	d0e8      	beq.n	19d70 <_vfiprintf_r+0x740>
   19d9e:	2330      	movs	r3, #48	; 0x30
   19da0:	3802      	subs	r0, #2
   19da2:	f804 3c01 	strb.w	r3, [r4, #-1]
   19da6:	ab44      	add	r3, sp, #272	; 0x110
   19da8:	1a1b      	subs	r3, r3, r0
   19daa:	9e03      	ldr	r6, [sp, #12]
   19dac:	9304      	str	r3, [sp, #16]
   19dae:	4604      	mov	r4, r0
   19db0:	e567      	b.n	19882 <_vfiprintf_r+0x252>
   19db2:	9b04      	ldr	r3, [sp, #16]
   19db4:	941b      	str	r4, [sp, #108]	; 0x6c
   19db6:	2201      	movs	r2, #1
   19db8:	931c      	str	r3, [sp, #112]	; 0x70
   19dba:	931a      	str	r3, [sp, #104]	; 0x68
   19dbc:	9219      	str	r2, [sp, #100]	; 0x64
   19dbe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19dc2:	f109 0908 	add.w	r9, r9, #8
   19dc6:	e69d      	b.n	19b04 <_vfiprintf_r+0x4d4>
   19dc8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19dcc:	e47b      	b.n	196c6 <_vfiprintf_r+0x96>
   19dce:	9a06      	ldr	r2, [sp, #24]
   19dd0:	9d03      	ldr	r5, [sp, #12]
   19dd2:	1b55      	subs	r5, r2, r5
   19dd4:	2d00      	cmp	r5, #0
   19dd6:	f77f ae76 	ble.w	19ac6 <_vfiprintf_r+0x496>
   19dda:	2d10      	cmp	r5, #16
   19ddc:	f340 83bb 	ble.w	1a556 <_vfiprintf_r+0xf26>
   19de0:	9409      	str	r4, [sp, #36]	; 0x24
   19de2:	ee18 4a10 	vmov	r4, s16
   19de6:	e007      	b.n	19df8 <_vfiprintf_r+0x7c8>
   19de8:	f100 0c02 	add.w	ip, r0, #2
   19dec:	f109 0908 	add.w	r9, r9, #8
   19df0:	4610      	mov	r0, r2
   19df2:	3d10      	subs	r5, #16
   19df4:	2d10      	cmp	r5, #16
   19df6:	dd1e      	ble.n	19e36 <_vfiprintf_r+0x806>
   19df8:	4981      	ldr	r1, [pc, #516]	; (1a000 <_vfiprintf_r+0x9d0>)
   19dfa:	f8c9 1000 	str.w	r1, [r9]
   19dfe:	1c42      	adds	r2, r0, #1
   19e00:	3310      	adds	r3, #16
   19e02:	2110      	movs	r1, #16
   19e04:	2a07      	cmp	r2, #7
   19e06:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19e0a:	f8c9 1004 	str.w	r1, [r9, #4]
   19e0e:	ddeb      	ble.n	19de8 <_vfiprintf_r+0x7b8>
   19e10:	aa18      	add	r2, sp, #96	; 0x60
   19e12:	2b00      	cmp	r3, #0
   19e14:	d074      	beq.n	19f00 <_vfiprintf_r+0x8d0>
   19e16:	4621      	mov	r1, r4
   19e18:	4658      	mov	r0, fp
   19e1a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e1e:	f7ff fbcb 	bl	195b8 <__sprint_r.part.0>
   19e22:	2800      	cmp	r0, #0
   19e24:	f47f addb 	bne.w	199de <_vfiprintf_r+0x3ae>
   19e28:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19e2c:	3d10      	subs	r5, #16
   19e2e:	2d10      	cmp	r5, #16
   19e30:	f100 0c01 	add.w	ip, r0, #1
   19e34:	dce0      	bgt.n	19df8 <_vfiprintf_r+0x7c8>
   19e36:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19e38:	4a71      	ldr	r2, [pc, #452]	; (1a000 <_vfiprintf_r+0x9d0>)
   19e3a:	f8c9 5004 	str.w	r5, [r9, #4]
   19e3e:	442b      	add	r3, r5
   19e40:	f1bc 0f07 	cmp.w	ip, #7
   19e44:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   19e48:	f8c9 2000 	str.w	r2, [r9]
   19e4c:	f340 8194 	ble.w	1a178 <_vfiprintf_r+0xb48>
   19e50:	2b00      	cmp	r3, #0
   19e52:	f000 831f 	beq.w	1a494 <_vfiprintf_r+0xe64>
   19e56:	ee18 1a10 	vmov	r1, s16
   19e5a:	aa18      	add	r2, sp, #96	; 0x60
   19e5c:	4658      	mov	r0, fp
   19e5e:	f7ff fbab 	bl	195b8 <__sprint_r.part.0>
   19e62:	2800      	cmp	r0, #0
   19e64:	f47f adbb 	bne.w	199de <_vfiprintf_r+0x3ae>
   19e68:	9a04      	ldr	r2, [sp, #16]
   19e6a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19e6e:	1abd      	subs	r5, r7, r2
   19e70:	2d00      	cmp	r5, #0
   19e72:	f100 0101 	add.w	r1, r0, #1
   19e76:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e7a:	f77f ae29 	ble.w	19ad0 <_vfiprintf_r+0x4a0>
   19e7e:	2d10      	cmp	r5, #16
   19e80:	dd29      	ble.n	19ed6 <_vfiprintf_r+0x8a6>
   19e82:	9409      	str	r4, [sp, #36]	; 0x24
   19e84:	2710      	movs	r7, #16
   19e86:	ee18 4a10 	vmov	r4, s16
   19e8a:	e007      	b.n	19e9c <_vfiprintf_r+0x86c>
   19e8c:	f100 0c02 	add.w	ip, r0, #2
   19e90:	f109 0908 	add.w	r9, r9, #8
   19e94:	4610      	mov	r0, r2
   19e96:	3d10      	subs	r5, #16
   19e98:	2d10      	cmp	r5, #16
   19e9a:	dd1a      	ble.n	19ed2 <_vfiprintf_r+0x8a2>
   19e9c:	1c42      	adds	r2, r0, #1
   19e9e:	4958      	ldr	r1, [pc, #352]	; (1a000 <_vfiprintf_r+0x9d0>)
   19ea0:	3310      	adds	r3, #16
   19ea2:	2a07      	cmp	r2, #7
   19ea4:	e9c9 1700 	strd	r1, r7, [r9]
   19ea8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19eac:	ddee      	ble.n	19e8c <_vfiprintf_r+0x85c>
   19eae:	aa18      	add	r2, sp, #96	; 0x60
   19eb0:	b303      	cbz	r3, 19ef4 <_vfiprintf_r+0x8c4>
   19eb2:	4621      	mov	r1, r4
   19eb4:	4658      	mov	r0, fp
   19eb6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19eba:	f7ff fb7d 	bl	195b8 <__sprint_r.part.0>
   19ebe:	2800      	cmp	r0, #0
   19ec0:	f47f ad8d 	bne.w	199de <_vfiprintf_r+0x3ae>
   19ec4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19ec8:	3d10      	subs	r5, #16
   19eca:	2d10      	cmp	r5, #16
   19ecc:	f100 0c01 	add.w	ip, r0, #1
   19ed0:	dce4      	bgt.n	19e9c <_vfiprintf_r+0x86c>
   19ed2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19ed4:	4661      	mov	r1, ip
   19ed6:	4a4a      	ldr	r2, [pc, #296]	; (1a000 <_vfiprintf_r+0x9d0>)
   19ed8:	f8c9 5004 	str.w	r5, [r9, #4]
   19edc:	442b      	add	r3, r5
   19ede:	2907      	cmp	r1, #7
   19ee0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19ee4:	f8c9 2000 	str.w	r2, [r9]
   19ee8:	f300 80e7 	bgt.w	1a0ba <_vfiprintf_r+0xa8a>
   19eec:	f109 0908 	add.w	r9, r9, #8
   19ef0:	3101      	adds	r1, #1
   19ef2:	e5ed      	b.n	19ad0 <_vfiprintf_r+0x4a0>
   19ef4:	f04f 0c01 	mov.w	ip, #1
   19ef8:	4618      	mov	r0, r3
   19efa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19efe:	e7ca      	b.n	19e96 <_vfiprintf_r+0x866>
   19f00:	f04f 0c01 	mov.w	ip, #1
   19f04:	4618      	mov	r0, r3
   19f06:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f0a:	e772      	b.n	19df2 <_vfiprintf_r+0x7c2>
   19f0c:	2b00      	cmp	r3, #0
   19f0e:	f000 8104 	beq.w	1a11a <_vfiprintf_r+0xaea>
   19f12:	ee18 1a10 	vmov	r1, s16
   19f16:	aa18      	add	r2, sp, #96	; 0x60
   19f18:	4658      	mov	r0, fp
   19f1a:	f7ff fb4d 	bl	195b8 <__sprint_r.part.0>
   19f1e:	2800      	cmp	r0, #0
   19f20:	f47f ad5d 	bne.w	199de <_vfiprintf_r+0x3ae>
   19f24:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19f28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f2c:	1c41      	adds	r1, r0, #1
   19f2e:	e5a7      	b.n	19a80 <_vfiprintf_r+0x450>
   19f30:	2302      	movs	r3, #2
   19f32:	aa11      	add	r2, sp, #68	; 0x44
   19f34:	931c      	str	r3, [sp, #112]	; 0x70
   19f36:	921b      	str	r2, [sp, #108]	; 0x6c
   19f38:	2101      	movs	r1, #1
   19f3a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f3e:	4608      	mov	r0, r1
   19f40:	f109 0908 	add.w	r9, r9, #8
   19f44:	1c41      	adds	r1, r0, #1
   19f46:	e5ba      	b.n	19abe <_vfiprintf_r+0x48e>
   19f48:	2d10      	cmp	r5, #16
   19f4a:	f340 82e5 	ble.w	1a518 <_vfiprintf_r+0xee8>
   19f4e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19f52:	940f      	str	r4, [sp, #60]	; 0x3c
   19f54:	4608      	mov	r0, r1
   19f56:	ee18 4a10 	vmov	r4, s16
   19f5a:	e007      	b.n	19f6c <_vfiprintf_r+0x93c>
   19f5c:	f100 0c02 	add.w	ip, r0, #2
   19f60:	f109 0908 	add.w	r9, r9, #8
   19f64:	4610      	mov	r0, r2
   19f66:	3d10      	subs	r5, #16
   19f68:	2d10      	cmp	r5, #16
   19f6a:	dd1d      	ble.n	19fa8 <_vfiprintf_r+0x978>
   19f6c:	4925      	ldr	r1, [pc, #148]	; (1a004 <_vfiprintf_r+0x9d4>)
   19f6e:	f8c9 1000 	str.w	r1, [r9]
   19f72:	1c42      	adds	r2, r0, #1
   19f74:	3310      	adds	r3, #16
   19f76:	2110      	movs	r1, #16
   19f78:	2a07      	cmp	r2, #7
   19f7a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19f7e:	f8c9 1004 	str.w	r1, [r9, #4]
   19f82:	ddeb      	ble.n	19f5c <_vfiprintf_r+0x92c>
   19f84:	aa18      	add	r2, sp, #96	; 0x60
   19f86:	b303      	cbz	r3, 19fca <_vfiprintf_r+0x99a>
   19f88:	4621      	mov	r1, r4
   19f8a:	4658      	mov	r0, fp
   19f8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f90:	f7ff fb12 	bl	195b8 <__sprint_r.part.0>
   19f94:	2800      	cmp	r0, #0
   19f96:	f47f ad22 	bne.w	199de <_vfiprintf_r+0x3ae>
   19f9a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19f9e:	3d10      	subs	r5, #16
   19fa0:	2d10      	cmp	r5, #16
   19fa2:	f100 0c01 	add.w	ip, r0, #1
   19fa6:	dce1      	bgt.n	19f6c <_vfiprintf_r+0x93c>
   19fa8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   19faa:	4660      	mov	r0, ip
   19fac:	4a15      	ldr	r2, [pc, #84]	; (1a004 <_vfiprintf_r+0x9d4>)
   19fae:	f8c9 5004 	str.w	r5, [r9, #4]
   19fb2:	442b      	add	r3, r5
   19fb4:	2807      	cmp	r0, #7
   19fb6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   19fba:	f8c9 2000 	str.w	r2, [r9]
   19fbe:	f300 80c1 	bgt.w	1a144 <_vfiprintf_r+0xb14>
   19fc2:	f109 0908 	add.w	r9, r9, #8
   19fc6:	1c41      	adds	r1, r0, #1
   19fc8:	e546      	b.n	19a58 <_vfiprintf_r+0x428>
   19fca:	4618      	mov	r0, r3
   19fcc:	f04f 0c01 	mov.w	ip, #1
   19fd0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19fd4:	e7c7      	b.n	19f66 <_vfiprintf_r+0x936>
   19fd6:	0776      	lsls	r6, r6, #29
   19fd8:	9319      	str	r3, [sp, #100]	; 0x64
   19fda:	d553      	bpl.n	1a084 <_vfiprintf_r+0xa54>
   19fdc:	9a06      	ldr	r2, [sp, #24]
   19fde:	9903      	ldr	r1, [sp, #12]
   19fe0:	1a54      	subs	r4, r2, r1
   19fe2:	2c00      	cmp	r4, #0
   19fe4:	dd4e      	ble.n	1a084 <_vfiprintf_r+0xa54>
   19fe6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19fea:	2c10      	cmp	r4, #16
   19fec:	f340 82b0 	ble.w	1a550 <_vfiprintf_r+0xf20>
   19ff0:	9919      	ldr	r1, [sp, #100]	; 0x64
   19ff2:	ee18 6a10 	vmov	r6, s16
   19ff6:	2510      	movs	r5, #16
   19ff8:	e00d      	b.n	1a016 <_vfiprintf_r+0x9e6>
   19ffa:	bf00      	nop
   19ffc:	20001210 	.word	0x20001210
   1a000:	20008a74 	.word	0x20008a74
   1a004:	20002cc8 	.word	0x20002cc8
   1a008:	1c88      	adds	r0, r1, #2
   1a00a:	f109 0908 	add.w	r9, r9, #8
   1a00e:	4611      	mov	r1, r2
   1a010:	3c10      	subs	r4, #16
   1a012:	2c10      	cmp	r4, #16
   1a014:	dd1a      	ble.n	1a04c <_vfiprintf_r+0xa1c>
   1a016:	1c4a      	adds	r2, r1, #1
   1a018:	48b3      	ldr	r0, [pc, #716]	; (1a2e8 <_vfiprintf_r+0xcb8>)
   1a01a:	3310      	adds	r3, #16
   1a01c:	2a07      	cmp	r2, #7
   1a01e:	e9c9 0500 	strd	r0, r5, [r9]
   1a022:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1a026:	ddef      	ble.n	1a008 <_vfiprintf_r+0x9d8>
   1a028:	aa18      	add	r2, sp, #96	; 0x60
   1a02a:	b333      	cbz	r3, 1a07a <_vfiprintf_r+0xa4a>
   1a02c:	4631      	mov	r1, r6
   1a02e:	4658      	mov	r0, fp
   1a030:	f7ff fac2 	bl	195b8 <__sprint_r.part.0>
   1a034:	2800      	cmp	r0, #0
   1a036:	f47f acd2 	bne.w	199de <_vfiprintf_r+0x3ae>
   1a03a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1a03e:	3c10      	subs	r4, #16
   1a040:	2c10      	cmp	r4, #16
   1a042:	f101 0001 	add.w	r0, r1, #1
   1a046:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a04a:	dce4      	bgt.n	1a016 <_vfiprintf_r+0x9e6>
   1a04c:	4aa6      	ldr	r2, [pc, #664]	; (1a2e8 <_vfiprintf_r+0xcb8>)
   1a04e:	f8c9 4004 	str.w	r4, [r9, #4]
   1a052:	4423      	add	r3, r4
   1a054:	2807      	cmp	r0, #7
   1a056:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1a05a:	f8c9 2000 	str.w	r2, [r9]
   1a05e:	f77f ad59 	ble.w	19b14 <_vfiprintf_r+0x4e4>
   1a062:	b17b      	cbz	r3, 1a084 <_vfiprintf_r+0xa54>
   1a064:	ee18 1a10 	vmov	r1, s16
   1a068:	aa18      	add	r2, sp, #96	; 0x60
   1a06a:	4658      	mov	r0, fp
   1a06c:	f7ff faa4 	bl	195b8 <__sprint_r.part.0>
   1a070:	2800      	cmp	r0, #0
   1a072:	f47f acb4 	bne.w	199de <_vfiprintf_r+0x3ae>
   1a076:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a078:	e54c      	b.n	19b14 <_vfiprintf_r+0x4e4>
   1a07a:	2001      	movs	r0, #1
   1a07c:	4619      	mov	r1, r3
   1a07e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a082:	e7c5      	b.n	1a010 <_vfiprintf_r+0x9e0>
   1a084:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1a088:	9903      	ldr	r1, [sp, #12]
   1a08a:	428a      	cmp	r2, r1
   1a08c:	bfac      	ite	ge
   1a08e:	189b      	addge	r3, r3, r2
   1a090:	185b      	addlt	r3, r3, r1
   1a092:	9305      	str	r3, [sp, #20]
   1a094:	e549      	b.n	19b2a <_vfiprintf_r+0x4fa>
   1a096:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1a09a:	058f      	lsls	r7, r1, #22
   1a09c:	ee18 3a10 	vmov	r3, s16
   1a0a0:	b28a      	uxth	r2, r1
   1a0a2:	f53f aae8 	bmi.w	19676 <_vfiprintf_r+0x46>
   1a0a6:	ee18 5a10 	vmov	r5, s16
   1a0aa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a0ac:	f7f8 fcbe 	bl	12a2c <__retarget_lock_acquire_recursive>
   1a0b0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   1a0b4:	b28a      	uxth	r2, r1
   1a0b6:	f7ff bade 	b.w	19676 <_vfiprintf_r+0x46>
   1a0ba:	2b00      	cmp	r3, #0
   1a0bc:	f43f ae79 	beq.w	19db2 <_vfiprintf_r+0x782>
   1a0c0:	ee18 1a10 	vmov	r1, s16
   1a0c4:	aa18      	add	r2, sp, #96	; 0x60
   1a0c6:	4658      	mov	r0, fp
   1a0c8:	f7ff fa76 	bl	195b8 <__sprint_r.part.0>
   1a0cc:	2800      	cmp	r0, #0
   1a0ce:	f47f ac86 	bne.w	199de <_vfiprintf_r+0x3ae>
   1a0d2:	9919      	ldr	r1, [sp, #100]	; 0x64
   1a0d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a0d6:	3101      	adds	r1, #1
   1a0d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a0dc:	e4f8      	b.n	19ad0 <_vfiprintf_r+0x4a0>
   1a0de:	9219      	str	r2, [sp, #100]	; 0x64
   1a0e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a0e4:	e45e      	b.n	199a4 <_vfiprintf_r+0x374>
   1a0e6:	2f00      	cmp	r7, #0
   1a0e8:	f47f abc3 	bne.w	19872 <_vfiprintf_r+0x242>
   1a0ec:	9e03      	ldr	r6, [sp, #12]
   1a0ee:	2700      	movs	r7, #0
   1a0f0:	9704      	str	r7, [sp, #16]
   1a0f2:	ac44      	add	r4, sp, #272	; 0x110
   1a0f4:	f7ff bbc5 	b.w	19882 <_vfiprintf_r+0x252>
   1a0f8:	9b03      	ldr	r3, [sp, #12]
   1a0fa:	f013 0310 	ands.w	r3, r3, #16
   1a0fe:	d154      	bne.n	1a1aa <_vfiprintf_r+0xb7a>
   1a100:	9a03      	ldr	r2, [sp, #12]
   1a102:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   1a106:	f000 816b 	beq.w	1a3e0 <_vfiprintf_r+0xdb0>
   1a10a:	9907      	ldr	r1, [sp, #28]
   1a10c:	461a      	mov	r2, r3
   1a10e:	f851 3b04 	ldr.w	r3, [r1], #4
   1a112:	9107      	str	r1, [sp, #28]
   1a114:	b29b      	uxth	r3, r3
   1a116:	2101      	movs	r1, #1
   1a118:	e401      	b.n	1991e <_vfiprintf_r+0x2ee>
   1a11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a11c:	2a00      	cmp	r2, #0
   1a11e:	d164      	bne.n	1a1ea <_vfiprintf_r+0xbba>
   1a120:	4618      	mov	r0, r3
   1a122:	2101      	movs	r1, #1
   1a124:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a128:	e4c9      	b.n	19abe <_vfiprintf_r+0x48e>
   1a12a:	2101      	movs	r1, #1
   1a12c:	4618      	mov	r0, r3
   1a12e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a132:	e4c4      	b.n	19abe <_vfiprintf_r+0x48e>
   1a134:	425b      	negs	r3, r3
   1a136:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1a13a:	9603      	str	r6, [sp, #12]
   1a13c:	202d      	movs	r0, #45	; 0x2d
   1a13e:	2101      	movs	r1, #1
   1a140:	f7ff bbee 	b.w	19920 <_vfiprintf_r+0x2f0>
   1a144:	2b00      	cmp	r3, #0
   1a146:	f000 8088 	beq.w	1a25a <_vfiprintf_r+0xc2a>
   1a14a:	ee18 1a10 	vmov	r1, s16
   1a14e:	aa18      	add	r2, sp, #96	; 0x60
   1a150:	4658      	mov	r0, fp
   1a152:	f7ff fa31 	bl	195b8 <__sprint_r.part.0>
   1a156:	2800      	cmp	r0, #0
   1a158:	f47f ac41 	bne.w	199de <_vfiprintf_r+0x3ae>
   1a15c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1a160:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a164:	1c41      	adds	r1, r0, #1
   1a166:	e477      	b.n	19a58 <_vfiprintf_r+0x428>
   1a168:	f898 1000 	ldrb.w	r1, [r8]
   1a16c:	9307      	str	r3, [sp, #28]
   1a16e:	f7ff bad2 	b.w	19716 <_vfiprintf_r+0xe6>
   1a172:	ac44      	add	r4, sp, #272	; 0x110
   1a174:	f7ff bb85 	b.w	19882 <_vfiprintf_r+0x252>
   1a178:	f109 0908 	add.w	r9, r9, #8
   1a17c:	f10c 0101 	add.w	r1, ip, #1
   1a180:	4660      	mov	r0, ip
   1a182:	e4a0      	b.n	19ac6 <_vfiprintf_r+0x496>
   1a184:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1a188:	f040 8197 	bne.w	1a4ba <_vfiprintf_r+0xe8a>
   1a18c:	f851 3b04 	ldr.w	r3, [r1], #4
   1a190:	9107      	str	r1, [sp, #28]
   1a192:	f7ff bbc0 	b.w	19916 <_vfiprintf_r+0x2e6>
   1a196:	05b3      	lsls	r3, r6, #22
   1a198:	f100 8188 	bmi.w	1a4ac <_vfiprintf_r+0xe7c>
   1a19c:	f852 3b04 	ldr.w	r3, [r2], #4
   1a1a0:	9207      	str	r2, [sp, #28]
   1a1a2:	17da      	asrs	r2, r3, #31
   1a1a4:	4611      	mov	r1, r2
   1a1a6:	f7ff bb52 	b.w	1984e <_vfiprintf_r+0x21e>
   1a1aa:	9907      	ldr	r1, [sp, #28]
   1a1ac:	f851 3b04 	ldr.w	r3, [r1], #4
   1a1b0:	9107      	str	r1, [sp, #28]
   1a1b2:	2101      	movs	r1, #1
   1a1b4:	f7ff bbb3 	b.w	1991e <_vfiprintf_r+0x2ee>
   1a1b8:	9b07      	ldr	r3, [sp, #28]
   1a1ba:	9805      	ldr	r0, [sp, #20]
   1a1bc:	f853 1b04 	ldr.w	r1, [r3], #4
   1a1c0:	9307      	str	r3, [sp, #28]
   1a1c2:	17c2      	asrs	r2, r0, #31
   1a1c4:	e9c1 0200 	strd	r0, r2, [r1]
   1a1c8:	f7ff ba7d 	b.w	196c6 <_vfiprintf_r+0x96>
   1a1cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a1ce:	2b00      	cmp	r3, #0
   1a1d0:	f43f ab26 	beq.w	19820 <_vfiprintf_r+0x1f0>
   1a1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a1d6:	781b      	ldrb	r3, [r3, #0]
   1a1d8:	2b00      	cmp	r3, #0
   1a1da:	f43f ab21 	beq.w	19820 <_vfiprintf_r+0x1f0>
   1a1de:	f898 1000 	ldrb.w	r1, [r8]
   1a1e2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   1a1e6:	f7ff ba96 	b.w	19716 <_vfiprintf_r+0xe6>
   1a1ea:	2302      	movs	r3, #2
   1a1ec:	aa11      	add	r2, sp, #68	; 0x44
   1a1ee:	931c      	str	r3, [sp, #112]	; 0x70
   1a1f0:	921b      	str	r2, [sp, #108]	; 0x6c
   1a1f2:	2001      	movs	r0, #1
   1a1f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a1f8:	e6a2      	b.n	19f40 <_vfiprintf_r+0x910>
   1a1fa:	9603      	str	r6, [sp, #12]
   1a1fc:	e571      	b.n	19ce2 <_vfiprintf_r+0x6b2>
   1a1fe:	4b3b      	ldr	r3, [pc, #236]	; (1a2ec <_vfiprintf_r+0xcbc>)
   1a200:	930c      	str	r3, [sp, #48]	; 0x30
   1a202:	f016 0220 	ands.w	r2, r6, #32
   1a206:	d059      	beq.n	1a2bc <_vfiprintf_r+0xc8c>
   1a208:	9b07      	ldr	r3, [sp, #28]
   1a20a:	3307      	adds	r3, #7
   1a20c:	f023 0307 	bic.w	r3, r3, #7
   1a210:	4618      	mov	r0, r3
   1a212:	685a      	ldr	r2, [r3, #4]
   1a214:	f850 3b08 	ldr.w	r3, [r0], #8
   1a218:	9007      	str	r0, [sp, #28]
   1a21a:	07f4      	lsls	r4, r6, #31
   1a21c:	d509      	bpl.n	1a232 <_vfiprintf_r+0xc02>
   1a21e:	ea53 0002 	orrs.w	r0, r3, r2
   1a222:	d006      	beq.n	1a232 <_vfiprintf_r+0xc02>
   1a224:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   1a228:	2130      	movs	r1, #48	; 0x30
   1a22a:	f046 0602 	orr.w	r6, r6, #2
   1a22e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1a232:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1a236:	9103      	str	r1, [sp, #12]
   1a238:	2102      	movs	r1, #2
   1a23a:	f7ff bb70 	b.w	1991e <_vfiprintf_r+0x2ee>
   1a23e:	4b2c      	ldr	r3, [pc, #176]	; (1a2f0 <_vfiprintf_r+0xcc0>)
   1a240:	930c      	str	r3, [sp, #48]	; 0x30
   1a242:	e7de      	b.n	1a202 <_vfiprintf_r+0xbd2>
   1a244:	9b07      	ldr	r3, [sp, #28]
   1a246:	2101      	movs	r1, #1
   1a248:	f853 2b04 	ldr.w	r2, [r3], #4
   1a24c:	9103      	str	r1, [sp, #12]
   1a24e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1a252:	9307      	str	r3, [sp, #28]
   1a254:	9104      	str	r1, [sp, #16]
   1a256:	ac2b      	add	r4, sp, #172	; 0xac
   1a258:	e4df      	b.n	19c1a <_vfiprintf_r+0x5ea>
   1a25a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1a25e:	2a00      	cmp	r2, #0
   1a260:	f040 8132 	bne.w	1a4c8 <_vfiprintf_r+0xe98>
   1a264:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a266:	2a00      	cmp	r2, #0
   1a268:	f47f ae62 	bne.w	19f30 <_vfiprintf_r+0x900>
   1a26c:	4618      	mov	r0, r3
   1a26e:	2101      	movs	r1, #1
   1a270:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a274:	e427      	b.n	19ac6 <_vfiprintf_r+0x496>
   1a276:	2100      	movs	r1, #0
   1a278:	2208      	movs	r2, #8
   1a27a:	a816      	add	r0, sp, #88	; 0x58
   1a27c:	9413      	str	r4, [sp, #76]	; 0x4c
   1a27e:	f7f8 fa1b 	bl	126b8 <memset>
   1a282:	1c79      	adds	r1, r7, #1
   1a284:	f000 80bc 	beq.w	1a400 <_vfiprintf_r+0xdd0>
   1a288:	2500      	movs	r5, #0
   1a28a:	9407      	str	r4, [sp, #28]
   1a28c:	462c      	mov	r4, r5
   1a28e:	e00c      	b.n	1a2aa <_vfiprintf_r+0xc7a>
   1a290:	a92b      	add	r1, sp, #172	; 0xac
   1a292:	4658      	mov	r0, fp
   1a294:	f7fe ff2e 	bl	190f4 <_wcrtomb_r>
   1a298:	1c42      	adds	r2, r0, #1
   1a29a:	4420      	add	r0, r4
   1a29c:	f000 816b 	beq.w	1a576 <_vfiprintf_r+0xf46>
   1a2a0:	42b8      	cmp	r0, r7
   1a2a2:	dc08      	bgt.n	1a2b6 <_vfiprintf_r+0xc86>
   1a2a4:	f000 8170 	beq.w	1a588 <_vfiprintf_r+0xf58>
   1a2a8:	4604      	mov	r4, r0
   1a2aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a2ac:	5952      	ldr	r2, [r2, r5]
   1a2ae:	ab16      	add	r3, sp, #88	; 0x58
   1a2b0:	3504      	adds	r5, #4
   1a2b2:	2a00      	cmp	r2, #0
   1a2b4:	d1ec      	bne.n	1a290 <_vfiprintf_r+0xc60>
   1a2b6:	9404      	str	r4, [sp, #16]
   1a2b8:	9c07      	ldr	r4, [sp, #28]
   1a2ba:	e0af      	b.n	1a41c <_vfiprintf_r+0xdec>
   1a2bc:	f016 0310 	ands.w	r3, r6, #16
   1a2c0:	9807      	ldr	r0, [sp, #28]
   1a2c2:	d10c      	bne.n	1a2de <_vfiprintf_r+0xcae>
   1a2c4:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   1a2c8:	d005      	beq.n	1a2d6 <_vfiprintf_r+0xca6>
   1a2ca:	461a      	mov	r2, r3
   1a2cc:	f850 3b04 	ldr.w	r3, [r0], #4
   1a2d0:	9007      	str	r0, [sp, #28]
   1a2d2:	b29b      	uxth	r3, r3
   1a2d4:	e7a1      	b.n	1a21a <_vfiprintf_r+0xbea>
   1a2d6:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1a2da:	f040 80e1 	bne.w	1a4a0 <_vfiprintf_r+0xe70>
   1a2de:	f850 3b04 	ldr.w	r3, [r0], #4
   1a2e2:	9007      	str	r0, [sp, #28]
   1a2e4:	e799      	b.n	1a21a <_vfiprintf_r+0xbea>
   1a2e6:	bf00      	nop
   1a2e8:	20002cc8 	.word	0x20002cc8
   1a2ec:	20001210 	.word	0x20001210
   1a2f0:	20001224 	.word	0x20001224
   1a2f4:	9903      	ldr	r1, [sp, #12]
   1a2f6:	9704      	str	r7, [sp, #16]
   1a2f8:	ac44      	add	r4, sp, #272	; 0x110
   1a2fa:	469e      	mov	lr, r3
   1a2fc:	ee08 ba90 	vmov	s17, fp
   1a300:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   1a304:	f04f 0c00 	mov.w	ip, #0
   1a308:	4623      	mov	r3, r4
   1a30a:	e006      	b.n	1a31a <_vfiprintf_r+0xcea>
   1a30c:	f1be 0f0a 	cmp.w	lr, #10
   1a310:	f172 0200 	sbcs.w	r2, r2, #0
   1a314:	d339      	bcc.n	1a38a <_vfiprintf_r+0xd5a>
   1a316:	46a6      	mov	lr, r4
   1a318:	462a      	mov	r2, r5
   1a31a:	49a6      	ldr	r1, [pc, #664]	; (1a5b4 <_vfiprintf_r+0xf84>)
   1a31c:	eb1e 0002 	adds.w	r0, lr, r2
   1a320:	f140 0000 	adc.w	r0, r0, #0
   1a324:	460f      	mov	r7, r1
   1a326:	fba1 1400 	umull	r1, r4, r1, r0
   1a32a:	f024 0103 	bic.w	r1, r4, #3
   1a32e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1a332:	1a40      	subs	r0, r0, r1
   1a334:	ebbe 0100 	subs.w	r1, lr, r0
   1a338:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1a33c:	f162 0400 	sbc.w	r4, r2, #0
   1a340:	fb05 f501 	mul.w	r5, r5, r1
   1a344:	fb07 5504 	mla	r5, r7, r4, r5
   1a348:	fba1 4107 	umull	r4, r1, r1, r7
   1a34c:	440d      	add	r5, r1
   1a34e:	2705      	movs	r7, #5
   1a350:	f004 0101 	and.w	r1, r4, #1
   1a354:	fba1 1b07 	umull	r1, fp, r1, r7
   1a358:	1809      	adds	r1, r1, r0
   1a35a:	0864      	lsrs	r4, r4, #1
   1a35c:	3130      	adds	r1, #48	; 0x30
   1a35e:	f803 1c01 	strb.w	r1, [r3, #-1]
   1a362:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1a366:	f10c 0c01 	add.w	ip, ip, #1
   1a36a:	3b01      	subs	r3, #1
   1a36c:	086d      	lsrs	r5, r5, #1
   1a36e:	2e00      	cmp	r6, #0
   1a370:	d0cc      	beq.n	1a30c <_vfiprintf_r+0xcdc>
   1a372:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a374:	7809      	ldrb	r1, [r1, #0]
   1a376:	4561      	cmp	r1, ip
   1a378:	d1c8      	bne.n	1a30c <_vfiprintf_r+0xcdc>
   1a37a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a37e:	d0c5      	beq.n	1a30c <_vfiprintf_r+0xcdc>
   1a380:	f1be 0f0a 	cmp.w	lr, #10
   1a384:	f172 0200 	sbcs.w	r2, r2, #0
   1a388:	d26c      	bcs.n	1a464 <_vfiprintf_r+0xe34>
   1a38a:	461c      	mov	r4, r3
   1a38c:	ab44      	add	r3, sp, #272	; 0x110
   1a38e:	1b1b      	subs	r3, r3, r4
   1a390:	9f04      	ldr	r7, [sp, #16]
   1a392:	9e03      	ldr	r6, [sp, #12]
   1a394:	9304      	str	r3, [sp, #16]
   1a396:	ee18 ba90 	vmov	fp, s17
   1a39a:	f7ff ba72 	b.w	19882 <_vfiprintf_r+0x252>
   1a39e:	9603      	str	r6, [sp, #12]
   1a3a0:	f7ff ba62 	b.w	19868 <_vfiprintf_r+0x238>
   1a3a4:	4658      	mov	r0, fp
   1a3a6:	f7f7 ff4f 	bl	12248 <__sinit>
   1a3aa:	f7ff b95b 	b.w	19664 <_vfiprintf_r+0x34>
   1a3ae:	2901      	cmp	r1, #1
   1a3b0:	9603      	str	r6, [sp, #12]
   1a3b2:	f47f accd 	bne.w	19d50 <_vfiprintf_r+0x720>
   1a3b6:	f7ff ba5c 	b.w	19872 <_vfiprintf_r+0x242>
   1a3ba:	9b07      	ldr	r3, [sp, #28]
   1a3bc:	9905      	ldr	r1, [sp, #20]
   1a3be:	f853 2b04 	ldr.w	r2, [r3], #4
   1a3c2:	6011      	str	r1, [r2, #0]
   1a3c4:	9307      	str	r3, [sp, #28]
   1a3c6:	f7ff b97e 	b.w	196c6 <_vfiprintf_r+0x96>
   1a3ca:	2f06      	cmp	r7, #6
   1a3cc:	463b      	mov	r3, r7
   1a3ce:	9a03      	ldr	r2, [sp, #12]
   1a3d0:	4c79      	ldr	r4, [pc, #484]	; (1a5b8 <_vfiprintf_r+0xf88>)
   1a3d2:	9207      	str	r2, [sp, #28]
   1a3d4:	bf28      	it	cs
   1a3d6:	2306      	movcs	r3, #6
   1a3d8:	9304      	str	r3, [sp, #16]
   1a3da:	9303      	str	r3, [sp, #12]
   1a3dc:	f7ff bb25 	b.w	19a2a <_vfiprintf_r+0x3fa>
   1a3e0:	9b03      	ldr	r3, [sp, #12]
   1a3e2:	9907      	ldr	r1, [sp, #28]
   1a3e4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   1a3e8:	bf14      	ite	ne
   1a3ea:	f851 3b04 	ldrne.w	r3, [r1], #4
   1a3ee:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a3f2:	9107      	str	r1, [sp, #28]
   1a3f4:	bf1c      	itt	ne
   1a3f6:	4602      	movne	r2, r0
   1a3f8:	b2db      	uxtbne	r3, r3
   1a3fa:	2101      	movs	r1, #1
   1a3fc:	f7ff ba8f 	b.w	1991e <_vfiprintf_r+0x2ee>
   1a400:	ab16      	add	r3, sp, #88	; 0x58
   1a402:	9300      	str	r3, [sp, #0]
   1a404:	2300      	movs	r3, #0
   1a406:	4619      	mov	r1, r3
   1a408:	aa13      	add	r2, sp, #76	; 0x4c
   1a40a:	4658      	mov	r0, fp
   1a40c:	f7fe fe98 	bl	19140 <_wcsrtombs_r>
   1a410:	4603      	mov	r3, r0
   1a412:	3301      	adds	r3, #1
   1a414:	9004      	str	r0, [sp, #16]
   1a416:	f000 80ae 	beq.w	1a576 <_vfiprintf_r+0xf46>
   1a41a:	9413      	str	r4, [sp, #76]	; 0x4c
   1a41c:	9b04      	ldr	r3, [sp, #16]
   1a41e:	2b00      	cmp	r3, #0
   1a420:	d030      	beq.n	1a484 <_vfiprintf_r+0xe54>
   1a422:	2b63      	cmp	r3, #99	; 0x63
   1a424:	dc63      	bgt.n	1a4ee <_vfiprintf_r+0xebe>
   1a426:	2300      	movs	r3, #0
   1a428:	9308      	str	r3, [sp, #32]
   1a42a:	ac2b      	add	r4, sp, #172	; 0xac
   1a42c:	2208      	movs	r2, #8
   1a42e:	2100      	movs	r1, #0
   1a430:	a816      	add	r0, sp, #88	; 0x58
   1a432:	f7f8 f941 	bl	126b8 <memset>
   1a436:	9d04      	ldr	r5, [sp, #16]
   1a438:	ab16      	add	r3, sp, #88	; 0x58
   1a43a:	9300      	str	r3, [sp, #0]
   1a43c:	aa13      	add	r2, sp, #76	; 0x4c
   1a43e:	462b      	mov	r3, r5
   1a440:	4621      	mov	r1, r4
   1a442:	4658      	mov	r0, fp
   1a444:	f7fe fe7c 	bl	19140 <_wcsrtombs_r>
   1a448:	4285      	cmp	r5, r0
   1a44a:	f040 80ab 	bne.w	1a5a4 <_vfiprintf_r+0xf74>
   1a44e:	9b03      	ldr	r3, [sp, #12]
   1a450:	9a04      	ldr	r2, [sp, #16]
   1a452:	9307      	str	r3, [sp, #28]
   1a454:	2300      	movs	r3, #0
   1a456:	54a3      	strb	r3, [r4, r2]
   1a458:	461f      	mov	r7, r3
   1a45a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1a45e:	9303      	str	r3, [sp, #12]
   1a460:	f7ff ba16 	b.w	19890 <_vfiprintf_r+0x260>
   1a464:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a466:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a468:	1a9b      	subs	r3, r3, r2
   1a46a:	4618      	mov	r0, r3
   1a46c:	9308      	str	r3, [sp, #32]
   1a46e:	f7f8 fa11 	bl	12894 <strncpy>
   1a472:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a474:	9b08      	ldr	r3, [sp, #32]
   1a476:	784a      	ldrb	r2, [r1, #1]
   1a478:	b10a      	cbz	r2, 1a47e <_vfiprintf_r+0xe4e>
   1a47a:	3101      	adds	r1, #1
   1a47c:	910b      	str	r1, [sp, #44]	; 0x2c
   1a47e:	f04f 0c00 	mov.w	ip, #0
   1a482:	e748      	b.n	1a316 <_vfiprintf_r+0xce6>
   1a484:	9b03      	ldr	r3, [sp, #12]
   1a486:	9307      	str	r3, [sp, #28]
   1a488:	9b04      	ldr	r3, [sp, #16]
   1a48a:	9303      	str	r3, [sp, #12]
   1a48c:	461f      	mov	r7, r3
   1a48e:	9308      	str	r3, [sp, #32]
   1a490:	f7ff b9fe 	b.w	19890 <_vfiprintf_r+0x260>
   1a494:	2101      	movs	r1, #1
   1a496:	4618      	mov	r0, r3
   1a498:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a49c:	f7ff bb13 	b.w	19ac6 <_vfiprintf_r+0x496>
   1a4a0:	f850 3b04 	ldr.w	r3, [r0], #4
   1a4a4:	9007      	str	r0, [sp, #28]
   1a4a6:	4622      	mov	r2, r4
   1a4a8:	b2db      	uxtb	r3, r3
   1a4aa:	e6b6      	b.n	1a21a <_vfiprintf_r+0xbea>
   1a4ac:	f912 3b04 	ldrsb.w	r3, [r2], #4
   1a4b0:	9207      	str	r2, [sp, #28]
   1a4b2:	17da      	asrs	r2, r3, #31
   1a4b4:	4611      	mov	r1, r2
   1a4b6:	f7ff b9ca 	b.w	1984e <_vfiprintf_r+0x21e>
   1a4ba:	f851 3b04 	ldr.w	r3, [r1], #4
   1a4be:	9107      	str	r1, [sp, #28]
   1a4c0:	4602      	mov	r2, r0
   1a4c2:	b2db      	uxtb	r3, r3
   1a4c4:	f7ff ba27 	b.w	19916 <_vfiprintf_r+0x2e6>
   1a4c8:	2301      	movs	r3, #1
   1a4ca:	931c      	str	r3, [sp, #112]	; 0x70
   1a4cc:	2101      	movs	r1, #1
   1a4ce:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1a4d2:	931b      	str	r3, [sp, #108]	; 0x6c
   1a4d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a4d8:	460b      	mov	r3, r1
   1a4da:	f7ff bacd 	b.w	19a78 <_vfiprintf_r+0x448>
   1a4de:	9b07      	ldr	r3, [sp, #28]
   1a4e0:	9905      	ldr	r1, [sp, #20]
   1a4e2:	f853 2b04 	ldr.w	r2, [r3], #4
   1a4e6:	9307      	str	r3, [sp, #28]
   1a4e8:	8011      	strh	r1, [r2, #0]
   1a4ea:	f7ff b8ec 	b.w	196c6 <_vfiprintf_r+0x96>
   1a4ee:	1c59      	adds	r1, r3, #1
   1a4f0:	4658      	mov	r0, fp
   1a4f2:	f7f6 f971 	bl	107d8 <_malloc_r>
   1a4f6:	4604      	mov	r4, r0
   1a4f8:	2800      	cmp	r0, #0
   1a4fa:	d03c      	beq.n	1a576 <_vfiprintf_r+0xf46>
   1a4fc:	9008      	str	r0, [sp, #32]
   1a4fe:	e795      	b.n	1a42c <_vfiprintf_r+0xdfc>
   1a500:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1a502:	f7f8 fa95 	bl	12a30 <__retarget_lock_release_recursive>
   1a506:	f7ff b9e9 	b.w	198dc <_vfiprintf_r+0x2ac>
   1a50a:	9b03      	ldr	r3, [sp, #12]
   1a50c:	9307      	str	r3, [sp, #28]
   1a50e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1a512:	9f08      	ldr	r7, [sp, #32]
   1a514:	f7ff b9bc 	b.w	19890 <_vfiprintf_r+0x260>
   1a518:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a51a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a51c:	3001      	adds	r0, #1
   1a51e:	e545      	b.n	19fac <_vfiprintf_r+0x97c>
   1a520:	9b03      	ldr	r3, [sp, #12]
   1a522:	9307      	str	r3, [sp, #28]
   1a524:	4620      	mov	r0, r4
   1a526:	f7f8 fcab 	bl	12e80 <strlen>
   1a52a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1a52e:	462f      	mov	r7, r5
   1a530:	9004      	str	r0, [sp, #16]
   1a532:	9303      	str	r3, [sp, #12]
   1a534:	9508      	str	r5, [sp, #32]
   1a536:	f7ff b9ab 	b.w	19890 <_vfiprintf_r+0x260>
   1a53a:	ee18 1a10 	vmov	r1, s16
   1a53e:	aa18      	add	r2, sp, #96	; 0x60
   1a540:	4658      	mov	r0, fp
   1a542:	f7ff f839 	bl	195b8 <__sprint_r.part.0>
   1a546:	2800      	cmp	r0, #0
   1a548:	f43f aa36 	beq.w	199b8 <_vfiprintf_r+0x388>
   1a54c:	f7ff ba4d 	b.w	199ea <_vfiprintf_r+0x3ba>
   1a550:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a552:	3001      	adds	r0, #1
   1a554:	e57a      	b.n	1a04c <_vfiprintf_r+0xa1c>
   1a556:	468c      	mov	ip, r1
   1a558:	e46e      	b.n	19e38 <_vfiprintf_r+0x808>
   1a55a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a55c:	07d9      	lsls	r1, r3, #31
   1a55e:	d405      	bmi.n	1a56c <_vfiprintf_r+0xf3c>
   1a560:	89ab      	ldrh	r3, [r5, #12]
   1a562:	059a      	lsls	r2, r3, #22
   1a564:	d402      	bmi.n	1a56c <_vfiprintf_r+0xf3c>
   1a566:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a568:	f7f8 fa62 	bl	12a30 <__retarget_lock_release_recursive>
   1a56c:	f04f 33ff 	mov.w	r3, #4294967295
   1a570:	9305      	str	r3, [sp, #20]
   1a572:	f7ff ba49 	b.w	19a08 <_vfiprintf_r+0x3d8>
   1a576:	ee18 2a10 	vmov	r2, s16
   1a57a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a582:	8193      	strh	r3, [r2, #12]
   1a584:	f7ff ba35 	b.w	199f2 <_vfiprintf_r+0x3c2>
   1a588:	9c07      	ldr	r4, [sp, #28]
   1a58a:	9704      	str	r7, [sp, #16]
   1a58c:	e746      	b.n	1a41c <_vfiprintf_r+0xdec>
   1a58e:	9b07      	ldr	r3, [sp, #28]
   1a590:	f898 1001 	ldrb.w	r1, [r8, #1]
   1a594:	f853 7b04 	ldr.w	r7, [r3], #4
   1a598:	9307      	str	r3, [sp, #28]
   1a59a:	4690      	mov	r8, r2
   1a59c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   1a5a0:	f7ff b8b9 	b.w	19716 <_vfiprintf_r+0xe6>
   1a5a4:	ee18 2a10 	vmov	r2, s16
   1a5a8:	8993      	ldrh	r3, [r2, #12]
   1a5aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a5ae:	8193      	strh	r3, [r2, #12]
   1a5b0:	f7ff ba15 	b.w	199de <_vfiprintf_r+0x3ae>
   1a5b4:	cccccccd 	.word	0xcccccccd
   1a5b8:	20001238 	.word	0x20001238

0001a5bc <__sbprintf>:
   1a5bc:	b570      	push	{r4, r5, r6, lr}
   1a5be:	460c      	mov	r4, r1
   1a5c0:	8989      	ldrh	r1, [r1, #12]
   1a5c2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1a5c6:	f021 0102 	bic.w	r1, r1, #2
   1a5ca:	f8ad 1014 	strh.w	r1, [sp, #20]
   1a5ce:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a5d0:	911b      	str	r1, [sp, #108]	; 0x6c
   1a5d2:	89e1      	ldrh	r1, [r4, #14]
   1a5d4:	f8ad 1016 	strh.w	r1, [sp, #22]
   1a5d8:	69e1      	ldr	r1, [r4, #28]
   1a5da:	9109      	str	r1, [sp, #36]	; 0x24
   1a5dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a5de:	910b      	str	r1, [sp, #44]	; 0x2c
   1a5e0:	a91c      	add	r1, sp, #112	; 0x70
   1a5e2:	9102      	str	r1, [sp, #8]
   1a5e4:	9106      	str	r1, [sp, #24]
   1a5e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a5ea:	4606      	mov	r6, r0
   1a5ec:	9104      	str	r1, [sp, #16]
   1a5ee:	9107      	str	r1, [sp, #28]
   1a5f0:	a818      	add	r0, sp, #96	; 0x60
   1a5f2:	2100      	movs	r1, #0
   1a5f4:	e9cd 3200 	strd	r3, r2, [sp]
   1a5f8:	9108      	str	r1, [sp, #32]
   1a5fa:	f7f8 fa13 	bl	12a24 <__retarget_lock_init_recursive>
   1a5fe:	e9dd 3200 	ldrd	r3, r2, [sp]
   1a602:	a902      	add	r1, sp, #8
   1a604:	4630      	mov	r0, r6
   1a606:	f7ff f813 	bl	19630 <_vfiprintf_r>
   1a60a:	1e05      	subs	r5, r0, #0
   1a60c:	db07      	blt.n	1a61e <__sbprintf+0x62>
   1a60e:	a902      	add	r1, sp, #8
   1a610:	4630      	mov	r0, r6
   1a612:	f7fd fad3 	bl	17bbc <_fflush_r>
   1a616:	2800      	cmp	r0, #0
   1a618:	bf18      	it	ne
   1a61a:	f04f 35ff 	movne.w	r5, #4294967295
   1a61e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a622:	065b      	lsls	r3, r3, #25
   1a624:	d503      	bpl.n	1a62e <__sbprintf+0x72>
   1a626:	89a3      	ldrh	r3, [r4, #12]
   1a628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a62c:	81a3      	strh	r3, [r4, #12]
   1a62e:	9818      	ldr	r0, [sp, #96]	; 0x60
   1a630:	f7f8 f9fa 	bl	12a28 <__retarget_lock_close_recursive>
   1a634:	4628      	mov	r0, r5
   1a636:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1a63a:	bd70      	pop	{r4, r5, r6, pc}

0001a63c <__sfvwrite_r>:
   1a63c:	6893      	ldr	r3, [r2, #8]
   1a63e:	2b00      	cmp	r3, #0
   1a640:	f000 8085 	beq.w	1a74e <__sfvwrite_r+0x112>
   1a644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a648:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1a64c:	460c      	mov	r4, r1
   1a64e:	0719      	lsls	r1, r3, #28
   1a650:	4680      	mov	r8, r0
   1a652:	b083      	sub	sp, #12
   1a654:	4617      	mov	r7, r2
   1a656:	b298      	uxth	r0, r3
   1a658:	d525      	bpl.n	1a6a6 <__sfvwrite_r+0x6a>
   1a65a:	6923      	ldr	r3, [r4, #16]
   1a65c:	b31b      	cbz	r3, 1a6a6 <__sfvwrite_r+0x6a>
   1a65e:	f010 0302 	ands.w	r3, r0, #2
   1a662:	683d      	ldr	r5, [r7, #0]
   1a664:	d02d      	beq.n	1a6c2 <__sfvwrite_r+0x86>
   1a666:	f04f 0a00 	mov.w	sl, #0
   1a66a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1a92c <__sfvwrite_r+0x2f0>
   1a66e:	4656      	mov	r6, sl
   1a670:	46b9      	mov	r9, r7
   1a672:	455e      	cmp	r6, fp
   1a674:	4633      	mov	r3, r6
   1a676:	4652      	mov	r2, sl
   1a678:	bf28      	it	cs
   1a67a:	465b      	movcs	r3, fp
   1a67c:	4640      	mov	r0, r8
   1a67e:	2e00      	cmp	r6, #0
   1a680:	d052      	beq.n	1a728 <__sfvwrite_r+0xec>
   1a682:	69e1      	ldr	r1, [r4, #28]
   1a684:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a686:	47b8      	blx	r7
   1a688:	2800      	cmp	r0, #0
   1a68a:	dd56      	ble.n	1a73a <__sfvwrite_r+0xfe>
   1a68c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1a690:	1a1b      	subs	r3, r3, r0
   1a692:	4482      	add	sl, r0
   1a694:	1a36      	subs	r6, r6, r0
   1a696:	f8c9 3008 	str.w	r3, [r9, #8]
   1a69a:	2b00      	cmp	r3, #0
   1a69c:	d1e9      	bne.n	1a672 <__sfvwrite_r+0x36>
   1a69e:	2000      	movs	r0, #0
   1a6a0:	b003      	add	sp, #12
   1a6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6a6:	4621      	mov	r1, r4
   1a6a8:	4640      	mov	r0, r8
   1a6aa:	f000 f97d 	bl	1a9a8 <__swsetup_r>
   1a6ae:	2800      	cmp	r0, #0
   1a6b0:	f040 8138 	bne.w	1a924 <__sfvwrite_r+0x2e8>
   1a6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a6b8:	683d      	ldr	r5, [r7, #0]
   1a6ba:	b298      	uxth	r0, r3
   1a6bc:	f010 0302 	ands.w	r3, r0, #2
   1a6c0:	d1d1      	bne.n	1a666 <__sfvwrite_r+0x2a>
   1a6c2:	f010 0901 	ands.w	r9, r0, #1
   1a6c6:	d144      	bne.n	1a752 <__sfvwrite_r+0x116>
   1a6c8:	464e      	mov	r6, r9
   1a6ca:	9700      	str	r7, [sp, #0]
   1a6cc:	b346      	cbz	r6, 1a720 <__sfvwrite_r+0xe4>
   1a6ce:	0582      	lsls	r2, r0, #22
   1a6d0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1a6d4:	f140 8085 	bpl.w	1a7e2 <__sfvwrite_r+0x1a6>
   1a6d8:	45b3      	cmp	fp, r6
   1a6da:	465a      	mov	r2, fp
   1a6dc:	f200 80b4 	bhi.w	1a848 <__sfvwrite_r+0x20c>
   1a6e0:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1a6e4:	f040 80c1 	bne.w	1a86a <__sfvwrite_r+0x22e>
   1a6e8:	6820      	ldr	r0, [r4, #0]
   1a6ea:	9201      	str	r2, [sp, #4]
   1a6ec:	4649      	mov	r1, r9
   1a6ee:	f7f7 ff67 	bl	125c0 <memmove>
   1a6f2:	68a3      	ldr	r3, [r4, #8]
   1a6f4:	9a01      	ldr	r2, [sp, #4]
   1a6f6:	eba3 010b 	sub.w	r1, r3, fp
   1a6fa:	6823      	ldr	r3, [r4, #0]
   1a6fc:	60a1      	str	r1, [r4, #8]
   1a6fe:	4413      	add	r3, r2
   1a700:	46b2      	mov	sl, r6
   1a702:	6023      	str	r3, [r4, #0]
   1a704:	2600      	movs	r6, #0
   1a706:	9a00      	ldr	r2, [sp, #0]
   1a708:	6893      	ldr	r3, [r2, #8]
   1a70a:	eba3 030a 	sub.w	r3, r3, sl
   1a70e:	44d1      	add	r9, sl
   1a710:	6093      	str	r3, [r2, #8]
   1a712:	2b00      	cmp	r3, #0
   1a714:	d0c3      	beq.n	1a69e <__sfvwrite_r+0x62>
   1a716:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1a71a:	b280      	uxth	r0, r0
   1a71c:	2e00      	cmp	r6, #0
   1a71e:	d1d6      	bne.n	1a6ce <__sfvwrite_r+0x92>
   1a720:	e9d5 9600 	ldrd	r9, r6, [r5]
   1a724:	3508      	adds	r5, #8
   1a726:	e7d1      	b.n	1a6cc <__sfvwrite_r+0x90>
   1a728:	e9d5 a600 	ldrd	sl, r6, [r5]
   1a72c:	3508      	adds	r5, #8
   1a72e:	e7a0      	b.n	1a672 <__sfvwrite_r+0x36>
   1a730:	4621      	mov	r1, r4
   1a732:	4640      	mov	r0, r8
   1a734:	f7fd fa42 	bl	17bbc <_fflush_r>
   1a738:	b388      	cbz	r0, 1a79e <__sfvwrite_r+0x162>
   1a73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a742:	f04f 30ff 	mov.w	r0, #4294967295
   1a746:	81a3      	strh	r3, [r4, #12]
   1a748:	b003      	add	sp, #12
   1a74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a74e:	2000      	movs	r0, #0
   1a750:	4770      	bx	lr
   1a752:	461e      	mov	r6, r3
   1a754:	46ba      	mov	sl, r7
   1a756:	4699      	mov	r9, r3
   1a758:	4618      	mov	r0, r3
   1a75a:	9500      	str	r5, [sp, #0]
   1a75c:	461f      	mov	r7, r3
   1a75e:	b366      	cbz	r6, 1a7ba <__sfvwrite_r+0x17e>
   1a760:	2800      	cmp	r0, #0
   1a762:	d032      	beq.n	1a7ca <__sfvwrite_r+0x18e>
   1a764:	464a      	mov	r2, r9
   1a766:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1a76a:	6820      	ldr	r0, [r4, #0]
   1a76c:	68a5      	ldr	r5, [r4, #8]
   1a76e:	42b2      	cmp	r2, r6
   1a770:	bf28      	it	cs
   1a772:	4632      	movcs	r2, r6
   1a774:	4288      	cmp	r0, r1
   1a776:	d904      	bls.n	1a782 <__sfvwrite_r+0x146>
   1a778:	eb05 0b03 	add.w	fp, r5, r3
   1a77c:	455a      	cmp	r2, fp
   1a77e:	f300 80a7 	bgt.w	1a8d0 <__sfvwrite_r+0x294>
   1a782:	4293      	cmp	r3, r2
   1a784:	dc64      	bgt.n	1a850 <__sfvwrite_r+0x214>
   1a786:	69e1      	ldr	r1, [r4, #28]
   1a788:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1a78a:	463a      	mov	r2, r7
   1a78c:	4640      	mov	r0, r8
   1a78e:	47a8      	blx	r5
   1a790:	f1b0 0b00 	subs.w	fp, r0, #0
   1a794:	ddd1      	ble.n	1a73a <__sfvwrite_r+0xfe>
   1a796:	ebb9 090b 	subs.w	r9, r9, fp
   1a79a:	d0c9      	beq.n	1a730 <__sfvwrite_r+0xf4>
   1a79c:	2001      	movs	r0, #1
   1a79e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1a7a2:	eba3 030b 	sub.w	r3, r3, fp
   1a7a6:	445f      	add	r7, fp
   1a7a8:	eba6 060b 	sub.w	r6, r6, fp
   1a7ac:	f8ca 3008 	str.w	r3, [sl, #8]
   1a7b0:	2b00      	cmp	r3, #0
   1a7b2:	f43f af74 	beq.w	1a69e <__sfvwrite_r+0x62>
   1a7b6:	2e00      	cmp	r6, #0
   1a7b8:	d1d2      	bne.n	1a760 <__sfvwrite_r+0x124>
   1a7ba:	9a00      	ldr	r2, [sp, #0]
   1a7bc:	6856      	ldr	r6, [r2, #4]
   1a7be:	4613      	mov	r3, r2
   1a7c0:	3208      	adds	r2, #8
   1a7c2:	9200      	str	r2, [sp, #0]
   1a7c4:	2e00      	cmp	r6, #0
   1a7c6:	d0f8      	beq.n	1a7ba <__sfvwrite_r+0x17e>
   1a7c8:	681f      	ldr	r7, [r3, #0]
   1a7ca:	4632      	mov	r2, r6
   1a7cc:	210a      	movs	r1, #10
   1a7ce:	4638      	mov	r0, r7
   1a7d0:	f7f8 fb06 	bl	12de0 <memchr>
   1a7d4:	2800      	cmp	r0, #0
   1a7d6:	f000 809c 	beq.w	1a912 <__sfvwrite_r+0x2d6>
   1a7da:	3001      	adds	r0, #1
   1a7dc:	eba0 0907 	sub.w	r9, r0, r7
   1a7e0:	e7c0      	b.n	1a764 <__sfvwrite_r+0x128>
   1a7e2:	6820      	ldr	r0, [r4, #0]
   1a7e4:	6923      	ldr	r3, [r4, #16]
   1a7e6:	4298      	cmp	r0, r3
   1a7e8:	d816      	bhi.n	1a818 <__sfvwrite_r+0x1dc>
   1a7ea:	6962      	ldr	r2, [r4, #20]
   1a7ec:	42b2      	cmp	r2, r6
   1a7ee:	d813      	bhi.n	1a818 <__sfvwrite_r+0x1dc>
   1a7f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1a7f4:	42b3      	cmp	r3, r6
   1a7f6:	bf28      	it	cs
   1a7f8:	4633      	movcs	r3, r6
   1a7fa:	69e1      	ldr	r1, [r4, #28]
   1a7fc:	fb93 f3f2 	sdiv	r3, r3, r2
   1a800:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a802:	fb02 f303 	mul.w	r3, r2, r3
   1a806:	4640      	mov	r0, r8
   1a808:	464a      	mov	r2, r9
   1a80a:	47b8      	blx	r7
   1a80c:	f1b0 0a00 	subs.w	sl, r0, #0
   1a810:	dd93      	ble.n	1a73a <__sfvwrite_r+0xfe>
   1a812:	eba6 060a 	sub.w	r6, r6, sl
   1a816:	e776      	b.n	1a706 <__sfvwrite_r+0xca>
   1a818:	45b3      	cmp	fp, r6
   1a81a:	46da      	mov	sl, fp
   1a81c:	bf28      	it	cs
   1a81e:	46b2      	movcs	sl, r6
   1a820:	4652      	mov	r2, sl
   1a822:	4649      	mov	r1, r9
   1a824:	f7f7 fecc 	bl	125c0 <memmove>
   1a828:	68a3      	ldr	r3, [r4, #8]
   1a82a:	6822      	ldr	r2, [r4, #0]
   1a82c:	eba3 030a 	sub.w	r3, r3, sl
   1a830:	4452      	add	r2, sl
   1a832:	60a3      	str	r3, [r4, #8]
   1a834:	6022      	str	r2, [r4, #0]
   1a836:	2b00      	cmp	r3, #0
   1a838:	d1eb      	bne.n	1a812 <__sfvwrite_r+0x1d6>
   1a83a:	4621      	mov	r1, r4
   1a83c:	4640      	mov	r0, r8
   1a83e:	f7fd f9bd 	bl	17bbc <_fflush_r>
   1a842:	2800      	cmp	r0, #0
   1a844:	d0e5      	beq.n	1a812 <__sfvwrite_r+0x1d6>
   1a846:	e778      	b.n	1a73a <__sfvwrite_r+0xfe>
   1a848:	6820      	ldr	r0, [r4, #0]
   1a84a:	46b3      	mov	fp, r6
   1a84c:	4632      	mov	r2, r6
   1a84e:	e74c      	b.n	1a6ea <__sfvwrite_r+0xae>
   1a850:	4639      	mov	r1, r7
   1a852:	9201      	str	r2, [sp, #4]
   1a854:	f7f7 feb4 	bl	125c0 <memmove>
   1a858:	9a01      	ldr	r2, [sp, #4]
   1a85a:	68a3      	ldr	r3, [r4, #8]
   1a85c:	1a9b      	subs	r3, r3, r2
   1a85e:	60a3      	str	r3, [r4, #8]
   1a860:	6823      	ldr	r3, [r4, #0]
   1a862:	4413      	add	r3, r2
   1a864:	6023      	str	r3, [r4, #0]
   1a866:	4693      	mov	fp, r2
   1a868:	e795      	b.n	1a796 <__sfvwrite_r+0x15a>
   1a86a:	6823      	ldr	r3, [r4, #0]
   1a86c:	6921      	ldr	r1, [r4, #16]
   1a86e:	eba3 0b01 	sub.w	fp, r3, r1
   1a872:	6963      	ldr	r3, [r4, #20]
   1a874:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1a878:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1a87c:	f10b 0301 	add.w	r3, fp, #1
   1a880:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1a884:	4433      	add	r3, r6
   1a886:	4553      	cmp	r3, sl
   1a888:	4652      	mov	r2, sl
   1a88a:	bf84      	itt	hi
   1a88c:	469a      	movhi	sl, r3
   1a88e:	4652      	movhi	r2, sl
   1a890:	0543      	lsls	r3, r0, #21
   1a892:	d52c      	bpl.n	1a8ee <__sfvwrite_r+0x2b2>
   1a894:	4611      	mov	r1, r2
   1a896:	4640      	mov	r0, r8
   1a898:	f7f5 ff9e 	bl	107d8 <_malloc_r>
   1a89c:	2800      	cmp	r0, #0
   1a89e:	d03b      	beq.n	1a918 <__sfvwrite_r+0x2dc>
   1a8a0:	465a      	mov	r2, fp
   1a8a2:	6921      	ldr	r1, [r4, #16]
   1a8a4:	9001      	str	r0, [sp, #4]
   1a8a6:	f7f3 fe79 	bl	e59c <memcpy>
   1a8aa:	89a2      	ldrh	r2, [r4, #12]
   1a8ac:	9b01      	ldr	r3, [sp, #4]
   1a8ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1a8b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a8b6:	81a2      	strh	r2, [r4, #12]
   1a8b8:	eb03 000b 	add.w	r0, r3, fp
   1a8bc:	6123      	str	r3, [r4, #16]
   1a8be:	ebaa 030b 	sub.w	r3, sl, fp
   1a8c2:	f8c4 a014 	str.w	sl, [r4, #20]
   1a8c6:	60a3      	str	r3, [r4, #8]
   1a8c8:	6020      	str	r0, [r4, #0]
   1a8ca:	46b3      	mov	fp, r6
   1a8cc:	4632      	mov	r2, r6
   1a8ce:	e70c      	b.n	1a6ea <__sfvwrite_r+0xae>
   1a8d0:	4639      	mov	r1, r7
   1a8d2:	465a      	mov	r2, fp
   1a8d4:	f7f7 fe74 	bl	125c0 <memmove>
   1a8d8:	6823      	ldr	r3, [r4, #0]
   1a8da:	445b      	add	r3, fp
   1a8dc:	6023      	str	r3, [r4, #0]
   1a8de:	4621      	mov	r1, r4
   1a8e0:	4640      	mov	r0, r8
   1a8e2:	f7fd f96b 	bl	17bbc <_fflush_r>
   1a8e6:	2800      	cmp	r0, #0
   1a8e8:	f43f af55 	beq.w	1a796 <__sfvwrite_r+0x15a>
   1a8ec:	e725      	b.n	1a73a <__sfvwrite_r+0xfe>
   1a8ee:	4640      	mov	r0, r8
   1a8f0:	f7f6 fa3a 	bl	10d68 <_realloc_r>
   1a8f4:	4603      	mov	r3, r0
   1a8f6:	2800      	cmp	r0, #0
   1a8f8:	d1de      	bne.n	1a8b8 <__sfvwrite_r+0x27c>
   1a8fa:	6921      	ldr	r1, [r4, #16]
   1a8fc:	4640      	mov	r0, r8
   1a8fe:	f7f8 fbd1 	bl	130a4 <_free_r>
   1a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a906:	220c      	movs	r2, #12
   1a908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1a90c:	f8c8 2000 	str.w	r2, [r8]
   1a910:	e715      	b.n	1a73e <__sfvwrite_r+0x102>
   1a912:	1c72      	adds	r2, r6, #1
   1a914:	4691      	mov	r9, r2
   1a916:	e726      	b.n	1a766 <__sfvwrite_r+0x12a>
   1a918:	220c      	movs	r2, #12
   1a91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a91e:	f8c8 2000 	str.w	r2, [r8]
   1a922:	e70c      	b.n	1a73e <__sfvwrite_r+0x102>
   1a924:	f04f 30ff 	mov.w	r0, #4294967295
   1a928:	e6ba      	b.n	1a6a0 <__sfvwrite_r+0x64>
   1a92a:	bf00      	nop
   1a92c:	7ffffc00 	.word	0x7ffffc00

0001a930 <__submore>:
   1a930:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1a934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a938:	460c      	mov	r4, r1
   1a93a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1a93c:	4299      	cmp	r1, r3
   1a93e:	d014      	beq.n	1a96a <__submore+0x3a>
   1a940:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1a942:	0077      	lsls	r7, r6, #1
   1a944:	463a      	mov	r2, r7
   1a946:	f7f6 fa0f 	bl	10d68 <_realloc_r>
   1a94a:	4605      	mov	r5, r0
   1a94c:	b340      	cbz	r0, 1a9a0 <__submore+0x70>
   1a94e:	eb00 0806 	add.w	r8, r0, r6
   1a952:	4601      	mov	r1, r0
   1a954:	4632      	mov	r2, r6
   1a956:	4640      	mov	r0, r8
   1a958:	f7f3 fe20 	bl	e59c <memcpy>
   1a95c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   1a960:	f8c4 8000 	str.w	r8, [r4]
   1a964:	2000      	movs	r0, #0
   1a966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a96a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a96e:	f7f5 ff33 	bl	107d8 <_malloc_r>
   1a972:	b1a8      	cbz	r0, 1a9a0 <__submore+0x70>
   1a974:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a978:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a97c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   1a980:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1a984:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1a988:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1a98c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1a990:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   1a994:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   1a998:	6023      	str	r3, [r4, #0]
   1a99a:	2000      	movs	r0, #0
   1a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9a0:	f04f 30ff 	mov.w	r0, #4294967295
   1a9a4:	e7df      	b.n	1a966 <__submore+0x36>
   1a9a6:	bf00      	nop

0001a9a8 <__swsetup_r>:
   1a9a8:	b538      	push	{r3, r4, r5, lr}
   1a9aa:	4b31      	ldr	r3, [pc, #196]	; (1aa70 <__swsetup_r+0xc8>)
   1a9ac:	681b      	ldr	r3, [r3, #0]
   1a9ae:	4605      	mov	r5, r0
   1a9b0:	460c      	mov	r4, r1
   1a9b2:	b113      	cbz	r3, 1a9ba <__swsetup_r+0x12>
   1a9b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a9b6:	2a00      	cmp	r2, #0
   1a9b8:	d04e      	beq.n	1aa58 <__swsetup_r+0xb0>
   1a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a9be:	0718      	lsls	r0, r3, #28
   1a9c0:	b29a      	uxth	r2, r3
   1a9c2:	d51c      	bpl.n	1a9fe <__swsetup_r+0x56>
   1a9c4:	6921      	ldr	r1, [r4, #16]
   1a9c6:	b329      	cbz	r1, 1aa14 <__swsetup_r+0x6c>
   1a9c8:	f012 0001 	ands.w	r0, r2, #1
   1a9cc:	d007      	beq.n	1a9de <__swsetup_r+0x36>
   1a9ce:	2000      	movs	r0, #0
   1a9d0:	60a0      	str	r0, [r4, #8]
   1a9d2:	6960      	ldr	r0, [r4, #20]
   1a9d4:	4240      	negs	r0, r0
   1a9d6:	61a0      	str	r0, [r4, #24]
   1a9d8:	b139      	cbz	r1, 1a9ea <__swsetup_r+0x42>
   1a9da:	2000      	movs	r0, #0
   1a9dc:	bd38      	pop	{r3, r4, r5, pc}
   1a9de:	0795      	lsls	r5, r2, #30
   1a9e0:	bf58      	it	pl
   1a9e2:	6960      	ldrpl	r0, [r4, #20]
   1a9e4:	60a0      	str	r0, [r4, #8]
   1a9e6:	2900      	cmp	r1, #0
   1a9e8:	d1f7      	bne.n	1a9da <__swsetup_r+0x32>
   1a9ea:	0612      	lsls	r2, r2, #24
   1a9ec:	bf58      	it	pl
   1a9ee:	4608      	movpl	r0, r1
   1a9f0:	d5f4      	bpl.n	1a9dc <__swsetup_r+0x34>
   1a9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a9f6:	81a3      	strh	r3, [r4, #12]
   1a9f8:	f04f 30ff 	mov.w	r0, #4294967295
   1a9fc:	bd38      	pop	{r3, r4, r5, pc}
   1a9fe:	06d1      	lsls	r1, r2, #27
   1aa00:	d52e      	bpl.n	1aa60 <__swsetup_r+0xb8>
   1aa02:	0752      	lsls	r2, r2, #29
   1aa04:	d414      	bmi.n	1aa30 <__swsetup_r+0x88>
   1aa06:	6921      	ldr	r1, [r4, #16]
   1aa08:	f043 0308 	orr.w	r3, r3, #8
   1aa0c:	81a3      	strh	r3, [r4, #12]
   1aa0e:	b29a      	uxth	r2, r3
   1aa10:	2900      	cmp	r1, #0
   1aa12:	d1d9      	bne.n	1a9c8 <__swsetup_r+0x20>
   1aa14:	f402 7020 	and.w	r0, r2, #640	; 0x280
   1aa18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1aa1c:	d0d4      	beq.n	1a9c8 <__swsetup_r+0x20>
   1aa1e:	4621      	mov	r1, r4
   1aa20:	4628      	mov	r0, r5
   1aa22:	f000 f977 	bl	1ad14 <__smakebuf_r>
   1aa26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aa2a:	6921      	ldr	r1, [r4, #16]
   1aa2c:	b29a      	uxth	r2, r3
   1aa2e:	e7cb      	b.n	1a9c8 <__swsetup_r+0x20>
   1aa30:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1aa32:	b151      	cbz	r1, 1aa4a <__swsetup_r+0xa2>
   1aa34:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1aa38:	4291      	cmp	r1, r2
   1aa3a:	d004      	beq.n	1aa46 <__swsetup_r+0x9e>
   1aa3c:	4628      	mov	r0, r5
   1aa3e:	f7f8 fb31 	bl	130a4 <_free_r>
   1aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aa46:	2200      	movs	r2, #0
   1aa48:	6322      	str	r2, [r4, #48]	; 0x30
   1aa4a:	6921      	ldr	r1, [r4, #16]
   1aa4c:	2200      	movs	r2, #0
   1aa4e:	e9c4 1200 	strd	r1, r2, [r4]
   1aa52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1aa56:	e7d7      	b.n	1aa08 <__swsetup_r+0x60>
   1aa58:	4618      	mov	r0, r3
   1aa5a:	f7f7 fbf5 	bl	12248 <__sinit>
   1aa5e:	e7ac      	b.n	1a9ba <__swsetup_r+0x12>
   1aa60:	2209      	movs	r2, #9
   1aa62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1aa66:	602a      	str	r2, [r5, #0]
   1aa68:	f04f 30ff 	mov.w	r0, #4294967295
   1aa6c:	81a3      	strh	r3, [r4, #12]
   1aa6e:	bd38      	pop	{r3, r4, r5, pc}
   1aa70:	2000951c 	.word	0x2000951c

0001aa74 <__fputwc>:
   1aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1aa78:	b082      	sub	sp, #8
   1aa7a:	4682      	mov	sl, r0
   1aa7c:	4688      	mov	r8, r1
   1aa7e:	4614      	mov	r4, r2
   1aa80:	f7f7 ff3a 	bl	128f8 <__locale_mb_cur_max>
   1aa84:	2801      	cmp	r0, #1
   1aa86:	d103      	bne.n	1aa90 <__fputwc+0x1c>
   1aa88:	f108 33ff 	add.w	r3, r8, #4294967295
   1aa8c:	2bfe      	cmp	r3, #254	; 0xfe
   1aa8e:	d936      	bls.n	1aafe <__fputwc+0x8a>
   1aa90:	f10d 0904 	add.w	r9, sp, #4
   1aa94:	4642      	mov	r2, r8
   1aa96:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1aa9a:	4649      	mov	r1, r9
   1aa9c:	4650      	mov	r0, sl
   1aa9e:	f7fe fb29 	bl	190f4 <_wcrtomb_r>
   1aaa2:	1c42      	adds	r2, r0, #1
   1aaa4:	4606      	mov	r6, r0
   1aaa6:	d032      	beq.n	1ab0e <__fputwc+0x9a>
   1aaa8:	b320      	cbz	r0, 1aaf4 <__fputwc+0x80>
   1aaaa:	f89d c004 	ldrb.w	ip, [sp, #4]
   1aaae:	2500      	movs	r5, #0
   1aab0:	e009      	b.n	1aac6 <__fputwc+0x52>
   1aab2:	6823      	ldr	r3, [r4, #0]
   1aab4:	1c5a      	adds	r2, r3, #1
   1aab6:	6022      	str	r2, [r4, #0]
   1aab8:	f883 c000 	strb.w	ip, [r3]
   1aabc:	3501      	adds	r5, #1
   1aabe:	42b5      	cmp	r5, r6
   1aac0:	d218      	bcs.n	1aaf4 <__fputwc+0x80>
   1aac2:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1aac6:	68a3      	ldr	r3, [r4, #8]
   1aac8:	3b01      	subs	r3, #1
   1aaca:	2b00      	cmp	r3, #0
   1aacc:	60a3      	str	r3, [r4, #8]
   1aace:	daf0      	bge.n	1aab2 <__fputwc+0x3e>
   1aad0:	69a7      	ldr	r7, [r4, #24]
   1aad2:	42bb      	cmp	r3, r7
   1aad4:	4661      	mov	r1, ip
   1aad6:	4622      	mov	r2, r4
   1aad8:	4650      	mov	r0, sl
   1aada:	db02      	blt.n	1aae2 <__fputwc+0x6e>
   1aadc:	f1bc 0f0a 	cmp.w	ip, #10
   1aae0:	d1e7      	bne.n	1aab2 <__fputwc+0x3e>
   1aae2:	f000 f983 	bl	1adec <__swbuf_r>
   1aae6:	1c43      	adds	r3, r0, #1
   1aae8:	d1e8      	bne.n	1aabc <__fputwc+0x48>
   1aaea:	4606      	mov	r6, r0
   1aaec:	4630      	mov	r0, r6
   1aaee:	b002      	add	sp, #8
   1aaf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aaf4:	4646      	mov	r6, r8
   1aaf6:	4630      	mov	r0, r6
   1aaf8:	b002      	add	sp, #8
   1aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1aafe:	fa5f fc88 	uxtb.w	ip, r8
   1ab02:	f88d c004 	strb.w	ip, [sp, #4]
   1ab06:	4606      	mov	r6, r0
   1ab08:	f10d 0904 	add.w	r9, sp, #4
   1ab0c:	e7cf      	b.n	1aaae <__fputwc+0x3a>
   1ab0e:	89a3      	ldrh	r3, [r4, #12]
   1ab10:	4630      	mov	r0, r6
   1ab12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ab16:	81a3      	strh	r3, [r4, #12]
   1ab18:	b002      	add	sp, #8
   1ab1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ab1e:	bf00      	nop

0001ab20 <_fputwc_r>:
   1ab20:	b530      	push	{r4, r5, lr}
   1ab22:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1ab24:	f013 0f01 	tst.w	r3, #1
   1ab28:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1ab2c:	4614      	mov	r4, r2
   1ab2e:	b083      	sub	sp, #12
   1ab30:	4605      	mov	r5, r0
   1ab32:	b29a      	uxth	r2, r3
   1ab34:	d101      	bne.n	1ab3a <_fputwc_r+0x1a>
   1ab36:	0598      	lsls	r0, r3, #22
   1ab38:	d51c      	bpl.n	1ab74 <_fputwc_r+0x54>
   1ab3a:	0490      	lsls	r0, r2, #18
   1ab3c:	d406      	bmi.n	1ab4c <_fputwc_r+0x2c>
   1ab3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1ab40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1ab44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1ab48:	81a3      	strh	r3, [r4, #12]
   1ab4a:	6662      	str	r2, [r4, #100]	; 0x64
   1ab4c:	4622      	mov	r2, r4
   1ab4e:	4628      	mov	r0, r5
   1ab50:	f7ff ff90 	bl	1aa74 <__fputwc>
   1ab54:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ab56:	07da      	lsls	r2, r3, #31
   1ab58:	4605      	mov	r5, r0
   1ab5a:	d402      	bmi.n	1ab62 <_fputwc_r+0x42>
   1ab5c:	89a3      	ldrh	r3, [r4, #12]
   1ab5e:	059b      	lsls	r3, r3, #22
   1ab60:	d502      	bpl.n	1ab68 <_fputwc_r+0x48>
   1ab62:	4628      	mov	r0, r5
   1ab64:	b003      	add	sp, #12
   1ab66:	bd30      	pop	{r4, r5, pc}
   1ab68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ab6a:	f7f7 ff61 	bl	12a30 <__retarget_lock_release_recursive>
   1ab6e:	4628      	mov	r0, r5
   1ab70:	b003      	add	sp, #12
   1ab72:	bd30      	pop	{r4, r5, pc}
   1ab74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ab76:	9101      	str	r1, [sp, #4]
   1ab78:	f7f7 ff58 	bl	12a2c <__retarget_lock_acquire_recursive>
   1ab7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ab80:	9901      	ldr	r1, [sp, #4]
   1ab82:	b29a      	uxth	r2, r3
   1ab84:	e7d9      	b.n	1ab3a <_fputwc_r+0x1a>
   1ab86:	bf00      	nop

0001ab88 <_wcsnrtombs_l>:
   1ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab8c:	b08b      	sub	sp, #44	; 0x2c
   1ab8e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   1ab92:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1ab94:	9103      	str	r1, [sp, #12]
   1ab96:	4681      	mov	r9, r0
   1ab98:	9205      	str	r2, [sp, #20]
   1ab9a:	461e      	mov	r6, r3
   1ab9c:	f1b8 0f00 	cmp.w	r8, #0
   1aba0:	d05c      	beq.n	1ac5c <_wcsnrtombs_l+0xd4>
   1aba2:	9b03      	ldr	r3, [sp, #12]
   1aba4:	2b00      	cmp	r3, #0
   1aba6:	d05e      	beq.n	1ac66 <_wcsnrtombs_l+0xde>
   1aba8:	9b05      	ldr	r3, [sp, #20]
   1abaa:	681d      	ldr	r5, [r3, #0]
   1abac:	2f00      	cmp	r7, #0
   1abae:	d06a      	beq.n	1ac86 <_wcsnrtombs_l+0xfe>
   1abb0:	1e74      	subs	r4, r6, #1
   1abb2:	b34e      	cbz	r6, 1ac08 <_wcsnrtombs_l+0x80>
   1abb4:	9b03      	ldr	r3, [sp, #12]
   1abb6:	9304      	str	r3, [sp, #16]
   1abb8:	3d04      	subs	r5, #4
   1abba:	2600      	movs	r6, #0
   1abbc:	9501      	str	r5, [sp, #4]
   1abbe:	e00b      	b.n	1abd8 <_wcsnrtombs_l+0x50>
   1abc0:	9b03      	ldr	r3, [sp, #12]
   1abc2:	bb2b      	cbnz	r3, 1ac10 <_wcsnrtombs_l+0x88>
   1abc4:	9b01      	ldr	r3, [sp, #4]
   1abc6:	681a      	ldr	r2, [r3, #0]
   1abc8:	2a00      	cmp	r2, #0
   1abca:	d03a      	beq.n	1ac42 <_wcsnrtombs_l+0xba>
   1abcc:	45bc      	cmp	ip, r7
   1abce:	d25c      	bcs.n	1ac8a <_wcsnrtombs_l+0x102>
   1abd0:	3c01      	subs	r4, #1
   1abd2:	1c63      	adds	r3, r4, #1
   1abd4:	4666      	mov	r6, ip
   1abd6:	d017      	beq.n	1ac08 <_wcsnrtombs_l+0x80>
   1abd8:	f8d8 3000 	ldr.w	r3, [r8]
   1abdc:	9302      	str	r3, [sp, #8]
   1abde:	9b01      	ldr	r3, [sp, #4]
   1abe0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   1abe4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1abe8:	9301      	str	r3, [sp, #4]
   1abea:	a907      	add	r1, sp, #28
   1abec:	4643      	mov	r3, r8
   1abee:	4648      	mov	r0, r9
   1abf0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1abf4:	47a8      	blx	r5
   1abf6:	1c42      	adds	r2, r0, #1
   1abf8:	d03a      	beq.n	1ac70 <_wcsnrtombs_l+0xe8>
   1abfa:	eb00 0c06 	add.w	ip, r0, r6
   1abfe:	45bc      	cmp	ip, r7
   1ac00:	d9de      	bls.n	1abc0 <_wcsnrtombs_l+0x38>
   1ac02:	9b02      	ldr	r3, [sp, #8]
   1ac04:	e9c8 3b00 	strd	r3, fp, [r8]
   1ac08:	4630      	mov	r0, r6
   1ac0a:	b00b      	add	sp, #44	; 0x2c
   1ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac10:	2800      	cmp	r0, #0
   1ac12:	dd0e      	ble.n	1ac32 <_wcsnrtombs_l+0xaa>
   1ac14:	9b04      	ldr	r3, [sp, #16]
   1ac16:	9d01      	ldr	r5, [sp, #4]
   1ac18:	4418      	add	r0, r3
   1ac1a:	1e5a      	subs	r2, r3, #1
   1ac1c:	a907      	add	r1, sp, #28
   1ac1e:	f100 3eff 	add.w	lr, r0, #4294967295
   1ac22:	f811 3b01 	ldrb.w	r3, [r1], #1
   1ac26:	f802 3f01 	strb.w	r3, [r2, #1]!
   1ac2a:	4572      	cmp	r2, lr
   1ac2c:	d1f9      	bne.n	1ac22 <_wcsnrtombs_l+0x9a>
   1ac2e:	9501      	str	r5, [sp, #4]
   1ac30:	9004      	str	r0, [sp, #16]
   1ac32:	9b05      	ldr	r3, [sp, #20]
   1ac34:	681a      	ldr	r2, [r3, #0]
   1ac36:	3204      	adds	r2, #4
   1ac38:	601a      	str	r2, [r3, #0]
   1ac3a:	9b01      	ldr	r3, [sp, #4]
   1ac3c:	681a      	ldr	r2, [r3, #0]
   1ac3e:	2a00      	cmp	r2, #0
   1ac40:	d1c4      	bne.n	1abcc <_wcsnrtombs_l+0x44>
   1ac42:	9b03      	ldr	r3, [sp, #12]
   1ac44:	b10b      	cbz	r3, 1ac4a <_wcsnrtombs_l+0xc2>
   1ac46:	9b05      	ldr	r3, [sp, #20]
   1ac48:	601a      	str	r2, [r3, #0]
   1ac4a:	f10c 36ff 	add.w	r6, ip, #4294967295
   1ac4e:	2200      	movs	r2, #0
   1ac50:	4630      	mov	r0, r6
   1ac52:	f8c8 2000 	str.w	r2, [r8]
   1ac56:	b00b      	add	sp, #44	; 0x2c
   1ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac5c:	9b03      	ldr	r3, [sp, #12]
   1ac5e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1ac62:	2b00      	cmp	r3, #0
   1ac64:	d1a0      	bne.n	1aba8 <_wcsnrtombs_l+0x20>
   1ac66:	9b05      	ldr	r3, [sp, #20]
   1ac68:	f04f 37ff 	mov.w	r7, #4294967295
   1ac6c:	681d      	ldr	r5, [r3, #0]
   1ac6e:	e79f      	b.n	1abb0 <_wcsnrtombs_l+0x28>
   1ac70:	4606      	mov	r6, r0
   1ac72:	218a      	movs	r1, #138	; 0x8a
   1ac74:	2200      	movs	r2, #0
   1ac76:	4630      	mov	r0, r6
   1ac78:	f8c9 1000 	str.w	r1, [r9]
   1ac7c:	f8c8 2000 	str.w	r2, [r8]
   1ac80:	b00b      	add	sp, #44	; 0x2c
   1ac82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac86:	463e      	mov	r6, r7
   1ac88:	e7be      	b.n	1ac08 <_wcsnrtombs_l+0x80>
   1ac8a:	4666      	mov	r6, ip
   1ac8c:	e7bc      	b.n	1ac08 <_wcsnrtombs_l+0x80>
   1ac8e:	bf00      	nop

0001ac90 <_wcsnrtombs_r>:
   1ac90:	b510      	push	{r4, lr}
   1ac92:	b084      	sub	sp, #16
   1ac94:	4c05      	ldr	r4, [pc, #20]	; (1acac <_wcsnrtombs_r+0x1c>)
   1ac96:	9806      	ldr	r0, [sp, #24]
   1ac98:	9000      	str	r0, [sp, #0]
   1ac9a:	9807      	ldr	r0, [sp, #28]
   1ac9c:	9001      	str	r0, [sp, #4]
   1ac9e:	4804      	ldr	r0, [pc, #16]	; (1acb0 <_wcsnrtombs_r+0x20>)
   1aca0:	6800      	ldr	r0, [r0, #0]
   1aca2:	9402      	str	r4, [sp, #8]
   1aca4:	f7ff ff70 	bl	1ab88 <_wcsnrtombs_l>
   1aca8:	b004      	add	sp, #16
   1acaa:	bd10      	pop	{r4, pc}
   1acac:	20008f94 	.word	0x20008f94
   1acb0:	2000951c 	.word	0x2000951c

0001acb4 <category>:
   1acb4:	4b15      	ldr	r3, [pc, #84]	; (1ad0c <category+0x58>)
   1acb6:	4298      	cmp	r0, r3
   1acb8:	d823      	bhi.n	1ad02 <category+0x4e>
   1acba:	b570      	push	{r4, r5, r6, lr}
   1acbc:	4e14      	ldr	r6, [pc, #80]	; (1ad10 <category+0x5c>)
   1acbe:	f04f 0e00 	mov.w	lr, #0
   1acc2:	f640 04db 	movw	r4, #2267	; 0x8db
   1acc6:	e003      	b.n	1acd0 <category+0x1c>
   1acc8:	f102 0e01 	add.w	lr, r2, #1
   1accc:	45a6      	cmp	lr, r4
   1acce:	dc16      	bgt.n	1acfe <category+0x4a>
   1acd0:	eb04 020e 	add.w	r2, r4, lr
   1acd4:	f022 0301 	bic.w	r3, r2, #1
   1acd8:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1acdc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1ace0:	1052      	asrs	r2, r2, #1
   1ace2:	7859      	ldrb	r1, [r3, #1]
   1ace4:	885d      	ldrh	r5, [r3, #2]
   1ace6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1acea:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1acee:	448c      	add	ip, r1
   1acf0:	4560      	cmp	r0, ip
   1acf2:	d8e9      	bhi.n	1acc8 <category+0x14>
   1acf4:	4288      	cmp	r0, r1
   1acf6:	d206      	bcs.n	1ad06 <category+0x52>
   1acf8:	1e54      	subs	r4, r2, #1
   1acfa:	45a6      	cmp	lr, r4
   1acfc:	dde8      	ble.n	1acd0 <category+0x1c>
   1acfe:	20ff      	movs	r0, #255	; 0xff
   1ad00:	bd70      	pop	{r4, r5, r6, pc}
   1ad02:	20ff      	movs	r0, #255	; 0xff
   1ad04:	4770      	bx	lr
   1ad06:	7818      	ldrb	r0, [r3, #0]
   1ad08:	bd70      	pop	{r4, r5, r6, pc}
   1ad0a:	bf00      	nop
   1ad0c:	000e01ef 	.word	0x000e01ef
   1ad10:	20002cd8 	.word	0x20002cd8

0001ad14 <__smakebuf_r>:
   1ad14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad18:	898b      	ldrh	r3, [r1, #12]
   1ad1a:	460c      	mov	r4, r1
   1ad1c:	0799      	lsls	r1, r3, #30
   1ad1e:	b096      	sub	sp, #88	; 0x58
   1ad20:	d508      	bpl.n	1ad34 <__smakebuf_r+0x20>
   1ad22:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1ad26:	2201      	movs	r2, #1
   1ad28:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1ad2c:	6023      	str	r3, [r4, #0]
   1ad2e:	b016      	add	sp, #88	; 0x58
   1ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1ad38:	2900      	cmp	r1, #0
   1ad3a:	4606      	mov	r6, r0
   1ad3c:	db25      	blt.n	1ad8a <__smakebuf_r+0x76>
   1ad3e:	466a      	mov	r2, sp
   1ad40:	f000 f8ac 	bl	1ae9c <_fstat_r>
   1ad44:	2800      	cmp	r0, #0
   1ad46:	db1f      	blt.n	1ad88 <__smakebuf_r+0x74>
   1ad48:	9d01      	ldr	r5, [sp, #4]
   1ad4a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1ad4e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1ad52:	fab5 f585 	clz	r5, r5
   1ad56:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1ad5a:	096d      	lsrs	r5, r5, #5
   1ad5c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1ad60:	4641      	mov	r1, r8
   1ad62:	4630      	mov	r0, r6
   1ad64:	f7f5 fd38 	bl	107d8 <_malloc_r>
   1ad68:	b1e0      	cbz	r0, 1ada4 <__smakebuf_r+0x90>
   1ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ad6e:	f8c4 8014 	str.w	r8, [r4, #20]
   1ad72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ad76:	6020      	str	r0, [r4, #0]
   1ad78:	6120      	str	r0, [r4, #16]
   1ad7a:	81a3      	strh	r3, [r4, #12]
   1ad7c:	bb35      	cbnz	r5, 1adcc <__smakebuf_r+0xb8>
   1ad7e:	433b      	orrs	r3, r7
   1ad80:	81a3      	strh	r3, [r4, #12]
   1ad82:	b016      	add	sp, #88	; 0x58
   1ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad88:	89a3      	ldrh	r3, [r4, #12]
   1ad8a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1ad8e:	d019      	beq.n	1adc4 <__smakebuf_r+0xb0>
   1ad90:	f04f 0840 	mov.w	r8, #64	; 0x40
   1ad94:	2500      	movs	r5, #0
   1ad96:	4641      	mov	r1, r8
   1ad98:	4630      	mov	r0, r6
   1ad9a:	462f      	mov	r7, r5
   1ad9c:	f7f5 fd1c 	bl	107d8 <_malloc_r>
   1ada0:	2800      	cmp	r0, #0
   1ada2:	d1e2      	bne.n	1ad6a <__smakebuf_r+0x56>
   1ada4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ada8:	059a      	lsls	r2, r3, #22
   1adaa:	d4c0      	bmi.n	1ad2e <__smakebuf_r+0x1a>
   1adac:	f023 0303 	bic.w	r3, r3, #3
   1adb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1adb4:	f043 0302 	orr.w	r3, r3, #2
   1adb8:	2101      	movs	r1, #1
   1adba:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1adbe:	81a3      	strh	r3, [r4, #12]
   1adc0:	6022      	str	r2, [r4, #0]
   1adc2:	e7b4      	b.n	1ad2e <__smakebuf_r+0x1a>
   1adc4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1adc8:	462f      	mov	r7, r5
   1adca:	e7c9      	b.n	1ad60 <__smakebuf_r+0x4c>
   1adcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1add0:	4630      	mov	r0, r6
   1add2:	f000 f879 	bl	1aec8 <_isatty_r>
   1add6:	b910      	cbnz	r0, 1adde <__smakebuf_r+0xca>
   1add8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1addc:	e7cf      	b.n	1ad7e <__smakebuf_r+0x6a>
   1adde:	89a3      	ldrh	r3, [r4, #12]
   1ade0:	f023 0303 	bic.w	r3, r3, #3
   1ade4:	f043 0301 	orr.w	r3, r3, #1
   1ade8:	b21b      	sxth	r3, r3
   1adea:	e7c8      	b.n	1ad7e <__smakebuf_r+0x6a>

0001adec <__swbuf_r>:
   1adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adee:	460d      	mov	r5, r1
   1adf0:	4614      	mov	r4, r2
   1adf2:	4606      	mov	r6, r0
   1adf4:	b110      	cbz	r0, 1adfc <__swbuf_r+0x10>
   1adf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d04c      	beq.n	1ae96 <__swbuf_r+0xaa>
   1adfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ae00:	69a3      	ldr	r3, [r4, #24]
   1ae02:	60a3      	str	r3, [r4, #8]
   1ae04:	0717      	lsls	r7, r2, #28
   1ae06:	b290      	uxth	r0, r2
   1ae08:	d51b      	bpl.n	1ae42 <__swbuf_r+0x56>
   1ae0a:	6923      	ldr	r3, [r4, #16]
   1ae0c:	b1cb      	cbz	r3, 1ae42 <__swbuf_r+0x56>
   1ae0e:	b2ed      	uxtb	r5, r5
   1ae10:	0481      	lsls	r1, r0, #18
   1ae12:	462f      	mov	r7, r5
   1ae14:	d522      	bpl.n	1ae5c <__swbuf_r+0x70>
   1ae16:	6822      	ldr	r2, [r4, #0]
   1ae18:	6961      	ldr	r1, [r4, #20]
   1ae1a:	1ad3      	subs	r3, r2, r3
   1ae1c:	4299      	cmp	r1, r3
   1ae1e:	dd29      	ble.n	1ae74 <__swbuf_r+0x88>
   1ae20:	3301      	adds	r3, #1
   1ae22:	68a1      	ldr	r1, [r4, #8]
   1ae24:	3901      	subs	r1, #1
   1ae26:	60a1      	str	r1, [r4, #8]
   1ae28:	1c51      	adds	r1, r2, #1
   1ae2a:	6021      	str	r1, [r4, #0]
   1ae2c:	7015      	strb	r5, [r2, #0]
   1ae2e:	6962      	ldr	r2, [r4, #20]
   1ae30:	429a      	cmp	r2, r3
   1ae32:	d027      	beq.n	1ae84 <__swbuf_r+0x98>
   1ae34:	89a3      	ldrh	r3, [r4, #12]
   1ae36:	07db      	lsls	r3, r3, #31
   1ae38:	d501      	bpl.n	1ae3e <__swbuf_r+0x52>
   1ae3a:	2d0a      	cmp	r5, #10
   1ae3c:	d022      	beq.n	1ae84 <__swbuf_r+0x98>
   1ae3e:	4638      	mov	r0, r7
   1ae40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae42:	4621      	mov	r1, r4
   1ae44:	4630      	mov	r0, r6
   1ae46:	f7ff fdaf 	bl	1a9a8 <__swsetup_r>
   1ae4a:	bb08      	cbnz	r0, 1ae90 <__swbuf_r+0xa4>
   1ae4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ae50:	6923      	ldr	r3, [r4, #16]
   1ae52:	b290      	uxth	r0, r2
   1ae54:	b2ed      	uxtb	r5, r5
   1ae56:	0481      	lsls	r1, r0, #18
   1ae58:	462f      	mov	r7, r5
   1ae5a:	d4dc      	bmi.n	1ae16 <__swbuf_r+0x2a>
   1ae5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1ae60:	81a2      	strh	r2, [r4, #12]
   1ae62:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1ae64:	6961      	ldr	r1, [r4, #20]
   1ae66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1ae6a:	6662      	str	r2, [r4, #100]	; 0x64
   1ae6c:	6822      	ldr	r2, [r4, #0]
   1ae6e:	1ad3      	subs	r3, r2, r3
   1ae70:	4299      	cmp	r1, r3
   1ae72:	dcd5      	bgt.n	1ae20 <__swbuf_r+0x34>
   1ae74:	4621      	mov	r1, r4
   1ae76:	4630      	mov	r0, r6
   1ae78:	f7fc fea0 	bl	17bbc <_fflush_r>
   1ae7c:	b940      	cbnz	r0, 1ae90 <__swbuf_r+0xa4>
   1ae7e:	6822      	ldr	r2, [r4, #0]
   1ae80:	2301      	movs	r3, #1
   1ae82:	e7ce      	b.n	1ae22 <__swbuf_r+0x36>
   1ae84:	4621      	mov	r1, r4
   1ae86:	4630      	mov	r0, r6
   1ae88:	f7fc fe98 	bl	17bbc <_fflush_r>
   1ae8c:	2800      	cmp	r0, #0
   1ae8e:	d0d6      	beq.n	1ae3e <__swbuf_r+0x52>
   1ae90:	f04f 37ff 	mov.w	r7, #4294967295
   1ae94:	e7d3      	b.n	1ae3e <__swbuf_r+0x52>
   1ae96:	f7f7 f9d7 	bl	12248 <__sinit>
   1ae9a:	e7af      	b.n	1adfc <__swbuf_r+0x10>

0001ae9c <_fstat_r>:
   1ae9c:	b570      	push	{r4, r5, r6, lr}
   1ae9e:	460c      	mov	r4, r1
   1aea0:	4d08      	ldr	r5, [pc, #32]	; (1aec4 <_fstat_r+0x28>)
   1aea2:	4603      	mov	r3, r0
   1aea4:	2600      	movs	r6, #0
   1aea6:	4620      	mov	r0, r4
   1aea8:	4611      	mov	r1, r2
   1aeaa:	461c      	mov	r4, r3
   1aeac:	602e      	str	r6, [r5, #0]
   1aeae:	f7f3 ff05 	bl	ecbc <_fstat>
   1aeb2:	1c43      	adds	r3, r0, #1
   1aeb4:	d000      	beq.n	1aeb8 <_fstat_r+0x1c>
   1aeb6:	bd70      	pop	{r4, r5, r6, pc}
   1aeb8:	682b      	ldr	r3, [r5, #0]
   1aeba:	2b00      	cmp	r3, #0
   1aebc:	d0fb      	beq.n	1aeb6 <_fstat_r+0x1a>
   1aebe:	6023      	str	r3, [r4, #0]
   1aec0:	bd70      	pop	{r4, r5, r6, pc}
   1aec2:	bf00      	nop
   1aec4:	200252f0 	.word	0x200252f0

0001aec8 <_isatty_r>:
   1aec8:	b538      	push	{r3, r4, r5, lr}
   1aeca:	4d07      	ldr	r5, [pc, #28]	; (1aee8 <_isatty_r+0x20>)
   1aecc:	2200      	movs	r2, #0
   1aece:	4604      	mov	r4, r0
   1aed0:	4608      	mov	r0, r1
   1aed2:	602a      	str	r2, [r5, #0]
   1aed4:	f7f3 fef8 	bl	ecc8 <_isatty>
   1aed8:	1c43      	adds	r3, r0, #1
   1aeda:	d000      	beq.n	1aede <_isatty_r+0x16>
   1aedc:	bd38      	pop	{r3, r4, r5, pc}
   1aede:	682b      	ldr	r3, [r5, #0]
   1aee0:	2b00      	cmp	r3, #0
   1aee2:	d0fb      	beq.n	1aedc <_isatty_r+0x14>
   1aee4:	6023      	str	r3, [r4, #0]
   1aee6:	bd38      	pop	{r3, r4, r5, pc}
   1aee8:	200252f0 	.word	0x200252f0

0001aeec <__aeabi_drsub>:
   1aeec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1aef0:	e002      	b.n	1aef8 <__adddf3>
   1aef2:	bf00      	nop

0001aef4 <__aeabi_dsub>:
   1aef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001aef8 <__adddf3>:
   1aef8:	b530      	push	{r4, r5, lr}
   1aefa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1aefe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1af02:	ea94 0f05 	teq	r4, r5
   1af06:	bf08      	it	eq
   1af08:	ea90 0f02 	teqeq	r0, r2
   1af0c:	bf1f      	itttt	ne
   1af0e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1af12:	ea55 0c02 	orrsne.w	ip, r5, r2
   1af16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1af1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1af1e:	f000 80e2 	beq.w	1b0e6 <__adddf3+0x1ee>
   1af22:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1af26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1af2a:	bfb8      	it	lt
   1af2c:	426d      	neglt	r5, r5
   1af2e:	dd0c      	ble.n	1af4a <__adddf3+0x52>
   1af30:	442c      	add	r4, r5
   1af32:	ea80 0202 	eor.w	r2, r0, r2
   1af36:	ea81 0303 	eor.w	r3, r1, r3
   1af3a:	ea82 0000 	eor.w	r0, r2, r0
   1af3e:	ea83 0101 	eor.w	r1, r3, r1
   1af42:	ea80 0202 	eor.w	r2, r0, r2
   1af46:	ea81 0303 	eor.w	r3, r1, r3
   1af4a:	2d36      	cmp	r5, #54	; 0x36
   1af4c:	bf88      	it	hi
   1af4e:	bd30      	pophi	{r4, r5, pc}
   1af50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1af54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1af58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1af5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1af60:	d002      	beq.n	1af68 <__adddf3+0x70>
   1af62:	4240      	negs	r0, r0
   1af64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1af68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1af6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1af70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1af74:	d002      	beq.n	1af7c <__adddf3+0x84>
   1af76:	4252      	negs	r2, r2
   1af78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1af7c:	ea94 0f05 	teq	r4, r5
   1af80:	f000 80a7 	beq.w	1b0d2 <__adddf3+0x1da>
   1af84:	f1a4 0401 	sub.w	r4, r4, #1
   1af88:	f1d5 0e20 	rsbs	lr, r5, #32
   1af8c:	db0d      	blt.n	1afaa <__adddf3+0xb2>
   1af8e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1af92:	fa22 f205 	lsr.w	r2, r2, r5
   1af96:	1880      	adds	r0, r0, r2
   1af98:	f141 0100 	adc.w	r1, r1, #0
   1af9c:	fa03 f20e 	lsl.w	r2, r3, lr
   1afa0:	1880      	adds	r0, r0, r2
   1afa2:	fa43 f305 	asr.w	r3, r3, r5
   1afa6:	4159      	adcs	r1, r3
   1afa8:	e00e      	b.n	1afc8 <__adddf3+0xd0>
   1afaa:	f1a5 0520 	sub.w	r5, r5, #32
   1afae:	f10e 0e20 	add.w	lr, lr, #32
   1afb2:	2a01      	cmp	r2, #1
   1afb4:	fa03 fc0e 	lsl.w	ip, r3, lr
   1afb8:	bf28      	it	cs
   1afba:	f04c 0c02 	orrcs.w	ip, ip, #2
   1afbe:	fa43 f305 	asr.w	r3, r3, r5
   1afc2:	18c0      	adds	r0, r0, r3
   1afc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1afc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1afcc:	d507      	bpl.n	1afde <__adddf3+0xe6>
   1afce:	f04f 0e00 	mov.w	lr, #0
   1afd2:	f1dc 0c00 	rsbs	ip, ip, #0
   1afd6:	eb7e 0000 	sbcs.w	r0, lr, r0
   1afda:	eb6e 0101 	sbc.w	r1, lr, r1
   1afde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1afe2:	d31b      	bcc.n	1b01c <__adddf3+0x124>
   1afe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1afe8:	d30c      	bcc.n	1b004 <__adddf3+0x10c>
   1afea:	0849      	lsrs	r1, r1, #1
   1afec:	ea5f 0030 	movs.w	r0, r0, rrx
   1aff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1aff4:	f104 0401 	add.w	r4, r4, #1
   1aff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1affc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1b000:	f080 809a 	bcs.w	1b138 <__adddf3+0x240>
   1b004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1b008:	bf08      	it	eq
   1b00a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1b00e:	f150 0000 	adcs.w	r0, r0, #0
   1b012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1b016:	ea41 0105 	orr.w	r1, r1, r5
   1b01a:	bd30      	pop	{r4, r5, pc}
   1b01c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1b020:	4140      	adcs	r0, r0
   1b022:	eb41 0101 	adc.w	r1, r1, r1
   1b026:	3c01      	subs	r4, #1
   1b028:	bf28      	it	cs
   1b02a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1b02e:	d2e9      	bcs.n	1b004 <__adddf3+0x10c>
   1b030:	f091 0f00 	teq	r1, #0
   1b034:	bf04      	itt	eq
   1b036:	4601      	moveq	r1, r0
   1b038:	2000      	moveq	r0, #0
   1b03a:	fab1 f381 	clz	r3, r1
   1b03e:	bf08      	it	eq
   1b040:	3320      	addeq	r3, #32
   1b042:	f1a3 030b 	sub.w	r3, r3, #11
   1b046:	f1b3 0220 	subs.w	r2, r3, #32
   1b04a:	da0c      	bge.n	1b066 <__adddf3+0x16e>
   1b04c:	320c      	adds	r2, #12
   1b04e:	dd08      	ble.n	1b062 <__adddf3+0x16a>
   1b050:	f102 0c14 	add.w	ip, r2, #20
   1b054:	f1c2 020c 	rsb	r2, r2, #12
   1b058:	fa01 f00c 	lsl.w	r0, r1, ip
   1b05c:	fa21 f102 	lsr.w	r1, r1, r2
   1b060:	e00c      	b.n	1b07c <__adddf3+0x184>
   1b062:	f102 0214 	add.w	r2, r2, #20
   1b066:	bfd8      	it	le
   1b068:	f1c2 0c20 	rsble	ip, r2, #32
   1b06c:	fa01 f102 	lsl.w	r1, r1, r2
   1b070:	fa20 fc0c 	lsr.w	ip, r0, ip
   1b074:	bfdc      	itt	le
   1b076:	ea41 010c 	orrle.w	r1, r1, ip
   1b07a:	4090      	lslle	r0, r2
   1b07c:	1ae4      	subs	r4, r4, r3
   1b07e:	bfa2      	ittt	ge
   1b080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1b084:	4329      	orrge	r1, r5
   1b086:	bd30      	popge	{r4, r5, pc}
   1b088:	ea6f 0404 	mvn.w	r4, r4
   1b08c:	3c1f      	subs	r4, #31
   1b08e:	da1c      	bge.n	1b0ca <__adddf3+0x1d2>
   1b090:	340c      	adds	r4, #12
   1b092:	dc0e      	bgt.n	1b0b2 <__adddf3+0x1ba>
   1b094:	f104 0414 	add.w	r4, r4, #20
   1b098:	f1c4 0220 	rsb	r2, r4, #32
   1b09c:	fa20 f004 	lsr.w	r0, r0, r4
   1b0a0:	fa01 f302 	lsl.w	r3, r1, r2
   1b0a4:	ea40 0003 	orr.w	r0, r0, r3
   1b0a8:	fa21 f304 	lsr.w	r3, r1, r4
   1b0ac:	ea45 0103 	orr.w	r1, r5, r3
   1b0b0:	bd30      	pop	{r4, r5, pc}
   1b0b2:	f1c4 040c 	rsb	r4, r4, #12
   1b0b6:	f1c4 0220 	rsb	r2, r4, #32
   1b0ba:	fa20 f002 	lsr.w	r0, r0, r2
   1b0be:	fa01 f304 	lsl.w	r3, r1, r4
   1b0c2:	ea40 0003 	orr.w	r0, r0, r3
   1b0c6:	4629      	mov	r1, r5
   1b0c8:	bd30      	pop	{r4, r5, pc}
   1b0ca:	fa21 f004 	lsr.w	r0, r1, r4
   1b0ce:	4629      	mov	r1, r5
   1b0d0:	bd30      	pop	{r4, r5, pc}
   1b0d2:	f094 0f00 	teq	r4, #0
   1b0d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1b0da:	bf06      	itte	eq
   1b0dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1b0e0:	3401      	addeq	r4, #1
   1b0e2:	3d01      	subne	r5, #1
   1b0e4:	e74e      	b.n	1af84 <__adddf3+0x8c>
   1b0e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b0ea:	bf18      	it	ne
   1b0ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1b0f0:	d029      	beq.n	1b146 <__adddf3+0x24e>
   1b0f2:	ea94 0f05 	teq	r4, r5
   1b0f6:	bf08      	it	eq
   1b0f8:	ea90 0f02 	teqeq	r0, r2
   1b0fc:	d005      	beq.n	1b10a <__adddf3+0x212>
   1b0fe:	ea54 0c00 	orrs.w	ip, r4, r0
   1b102:	bf04      	itt	eq
   1b104:	4619      	moveq	r1, r3
   1b106:	4610      	moveq	r0, r2
   1b108:	bd30      	pop	{r4, r5, pc}
   1b10a:	ea91 0f03 	teq	r1, r3
   1b10e:	bf1e      	ittt	ne
   1b110:	2100      	movne	r1, #0
   1b112:	2000      	movne	r0, #0
   1b114:	bd30      	popne	{r4, r5, pc}
   1b116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1b11a:	d105      	bne.n	1b128 <__adddf3+0x230>
   1b11c:	0040      	lsls	r0, r0, #1
   1b11e:	4149      	adcs	r1, r1
   1b120:	bf28      	it	cs
   1b122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1b126:	bd30      	pop	{r4, r5, pc}
   1b128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1b12c:	bf3c      	itt	cc
   1b12e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1b132:	bd30      	popcc	{r4, r5, pc}
   1b134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1b13c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1b140:	f04f 0000 	mov.w	r0, #0
   1b144:	bd30      	pop	{r4, r5, pc}
   1b146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1b14a:	bf1a      	itte	ne
   1b14c:	4619      	movne	r1, r3
   1b14e:	4610      	movne	r0, r2
   1b150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1b154:	bf1c      	itt	ne
   1b156:	460b      	movne	r3, r1
   1b158:	4602      	movne	r2, r0
   1b15a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1b15e:	bf06      	itte	eq
   1b160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1b164:	ea91 0f03 	teqeq	r1, r3
   1b168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1b16c:	bd30      	pop	{r4, r5, pc}
   1b16e:	bf00      	nop

0001b170 <__aeabi_ui2d>:
   1b170:	f090 0f00 	teq	r0, #0
   1b174:	bf04      	itt	eq
   1b176:	2100      	moveq	r1, #0
   1b178:	4770      	bxeq	lr
   1b17a:	b530      	push	{r4, r5, lr}
   1b17c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b180:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b184:	f04f 0500 	mov.w	r5, #0
   1b188:	f04f 0100 	mov.w	r1, #0
   1b18c:	e750      	b.n	1b030 <__adddf3+0x138>
   1b18e:	bf00      	nop

0001b190 <__aeabi_i2d>:
   1b190:	f090 0f00 	teq	r0, #0
   1b194:	bf04      	itt	eq
   1b196:	2100      	moveq	r1, #0
   1b198:	4770      	bxeq	lr
   1b19a:	b530      	push	{r4, r5, lr}
   1b19c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b1a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b1a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1b1a8:	bf48      	it	mi
   1b1aa:	4240      	negmi	r0, r0
   1b1ac:	f04f 0100 	mov.w	r1, #0
   1b1b0:	e73e      	b.n	1b030 <__adddf3+0x138>
   1b1b2:	bf00      	nop

0001b1b4 <__aeabi_f2d>:
   1b1b4:	0042      	lsls	r2, r0, #1
   1b1b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1b1ba:	ea4f 0131 	mov.w	r1, r1, rrx
   1b1be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1b1c2:	bf1f      	itttt	ne
   1b1c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1b1c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1b1cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1b1d0:	4770      	bxne	lr
   1b1d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1b1d6:	bf08      	it	eq
   1b1d8:	4770      	bxeq	lr
   1b1da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1b1de:	bf04      	itt	eq
   1b1e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1b1e4:	4770      	bxeq	lr
   1b1e6:	b530      	push	{r4, r5, lr}
   1b1e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   1b1ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1b1f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1b1f4:	e71c      	b.n	1b030 <__adddf3+0x138>
   1b1f6:	bf00      	nop

0001b1f8 <__aeabi_ul2d>:
   1b1f8:	ea50 0201 	orrs.w	r2, r0, r1
   1b1fc:	bf08      	it	eq
   1b1fe:	4770      	bxeq	lr
   1b200:	b530      	push	{r4, r5, lr}
   1b202:	f04f 0500 	mov.w	r5, #0
   1b206:	e00a      	b.n	1b21e <__aeabi_l2d+0x16>

0001b208 <__aeabi_l2d>:
   1b208:	ea50 0201 	orrs.w	r2, r0, r1
   1b20c:	bf08      	it	eq
   1b20e:	4770      	bxeq	lr
   1b210:	b530      	push	{r4, r5, lr}
   1b212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1b216:	d502      	bpl.n	1b21e <__aeabi_l2d+0x16>
   1b218:	4240      	negs	r0, r0
   1b21a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b21e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1b222:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1b226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1b22a:	f43f aed8 	beq.w	1afde <__adddf3+0xe6>
   1b22e:	f04f 0203 	mov.w	r2, #3
   1b232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b236:	bf18      	it	ne
   1b238:	3203      	addne	r2, #3
   1b23a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1b23e:	bf18      	it	ne
   1b240:	3203      	addne	r2, #3
   1b242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1b246:	f1c2 0320 	rsb	r3, r2, #32
   1b24a:	fa00 fc03 	lsl.w	ip, r0, r3
   1b24e:	fa20 f002 	lsr.w	r0, r0, r2
   1b252:	fa01 fe03 	lsl.w	lr, r1, r3
   1b256:	ea40 000e 	orr.w	r0, r0, lr
   1b25a:	fa21 f102 	lsr.w	r1, r1, r2
   1b25e:	4414      	add	r4, r2
   1b260:	e6bd      	b.n	1afde <__adddf3+0xe6>
   1b262:	bf00      	nop

0001b264 <__aeabi_d2lz>:
   1b264:	b508      	push	{r3, lr}
   1b266:	4602      	mov	r2, r0
   1b268:	460b      	mov	r3, r1
   1b26a:	ec43 2b17 	vmov	d7, r2, r3
   1b26e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1b272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b276:	d403      	bmi.n	1b280 <__aeabi_d2lz+0x1c>
   1b278:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1b27c:	f000 b80c 	b.w	1b298 <__aeabi_d2ulz>
   1b280:	eeb1 7b47 	vneg.f64	d7, d7
   1b284:	ec51 0b17 	vmov	r0, r1, d7
   1b288:	f000 f806 	bl	1b298 <__aeabi_d2ulz>
   1b28c:	4240      	negs	r0, r0
   1b28e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b292:	bd08      	pop	{r3, pc}
   1b294:	0000      	movs	r0, r0
	...

0001b298 <__aeabi_d2ulz>:
   1b298:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1b2c8 <__aeabi_d2ulz+0x30>
   1b29c:	ec41 0b17 	vmov	d7, r0, r1
   1b2a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1b2d0 <__aeabi_d2ulz+0x38>
   1b2a4:	ee27 6b06 	vmul.f64	d6, d7, d6
   1b2a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1b2ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   1b2b0:	eea4 7b45 	vfms.f64	d7, d4, d5
   1b2b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   1b2b8:	ee16 1a10 	vmov	r1, s12
   1b2bc:	ee17 0a90 	vmov	r0, s15
   1b2c0:	4770      	bx	lr
   1b2c2:	bf00      	nop
   1b2c4:	f3af 8000 	nop.w
   1b2c8:	00000000 	.word	0x00000000
   1b2cc:	3df00000 	.word	0x3df00000
   1b2d0:	00000000 	.word	0x00000000
   1b2d4:	41f00000 	.word	0x41f00000

0001b2d8 <___reboot_Teensyduino__veneer>:
   1b2d8:	f85f f000 	ldr.w	pc, [pc]	; 1b2dc <___reboot_Teensyduino__veneer+0x4>
   1b2dc:	60002705 	.word	0x60002705

0001b2e0 <__usb_init_veneer>:
   1b2e0:	f85f f000 	ldr.w	pc, [pc]	; 1b2e4 <__usb_init_veneer+0x4>
   1b2e4:	6000261d 	.word	0x6000261d

0001b2e8 <___ZN7TwoWire5beginEv_veneer>:
   1b2e8:	f85f f000 	ldr.w	pc, [pc]	; 1b2ec <___ZN7TwoWire5beginEv_veneer+0x4>
   1b2ec:	60001789 	.word	0x60001789

0001b2f0 <___init_veneer>:
   1b2f0:	f85f f000 	ldr.w	pc, [pc]	; 1b2f4 <___init_veneer+0x4>
   1b2f4:	600027ad 	.word	0x600027ad

0001b2f8 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   1b2f8:	f85f f000 	ldr.w	pc, [pc]	; 1b2fc <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1b2fc:	6000188d 	.word	0x6000188d

0001b300 <___ZN16CrashReportClasscvbEv_veneer>:
   1b300:	f85f f000 	ldr.w	pc, [pc]	; 1b304 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1b304:	60001f91 	.word	0x60001f91
	...

Disassembly of section .fini:

0001b310 <_fini>:
   1b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b312:	bf00      	nop


C:\Users\zimme\AppData\Local\Temp\arduino\sketches\A5394982E70389E0D0C97A4E173256C7/microPAM_V3.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	200096c0 	.word	0x200096c0
6000142c:	20043360 	.word	0x20043360

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fd16 	bl	60001e70 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fcb4 	bl	60001e80 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 fee2 	bl	60002314 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f881 	bl	60002668 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fcf0 	bl	60001f90 <configure_external_ram>
	analog_init();
600015b0:	f001 f814 	bl	600025dc <analog_init>
	pwm_init();
600015b4:	f001 f870 	bl	60002698 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 feda 	bl	60002370 <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fc5a 	bl	60001e74 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f000 ff6b 	bl	600024a0 <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fc53 	bl	60001e7c <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fc4f 	bl	60001e78 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f855 	bl	60002688 <____libc_init_array_veneer>
	main();
600015de:	f001 f857 	bl	60002690 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	00019848 	.word	0x00019848
600015f0:	600027d8 	.word	0x600027d8
600015f4:	00000000 	.word	0x00000000
600015f8:	200096c0 	.word	0x200096c0
600015fc:	6001c024 	.word	0x6001c024
60001600:	20000000 	.word	0x20000000
60001604:	20009400 	.word	0x20009400
60001608:	0000d029 	.word	0x0000d029
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000c23d 	.word	0x0000c23d
6000161c:	200432d8 	.word	0x200432d8
60001620:	0000c241 	.word	0x0000c241
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	200432dc 	.word	0x200432dc
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001674:	4b20      	ldr	r3, [pc, #128]	; (600016f8 <CrashReportClass::clear()+0x84>)
60001676:	2000      	movs	r0, #0
{
60001678:	b430      	push	{r4, r5}
	info->ipsr  = 0;
6000167a:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
6000167e:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001682:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001686:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
6000168a:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000168e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001692:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001696:	4919      	ldr	r1, [pc, #100]	; (600016fc <CrashReportClass::clear()+0x88>)
60001698:	4a19      	ldr	r2, [pc, #100]	; (60001700 <CrashReportClass::clear()+0x8c>)
6000169a:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000169e:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
600016a2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016a6:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600016aa:	4b16      	ldr	r3, [pc, #88]	; (60001704 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
600016ac:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600016ae:	4c16      	ldr	r4, [pc, #88]	; (60001708 <CrashReportClass::clear()+0x94>)
600016b0:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600016b2:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
600016b4:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
600016b8:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
600016ba:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
600016bc:	4b13      	ldr	r3, [pc, #76]	; (6000170c <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600016be:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
600016c2:	4618      	mov	r0, r3
600016c4:	3302      	adds	r3, #2
600016c6:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
600016c8:	42a3      	cmp	r3, r4
			a += *p++;
600016ca:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
600016ce:	4411      	add	r1, r2
		while (len > 0) {
600016d0:	d1f7      	bne.n	600016c2 <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
600016d2:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
600016d4:	4b0c      	ldr	r3, [pc, #48]	; (60001708 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
600016d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
600016da:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
600016de:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600016e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600016e6:	4a09      	ldr	r2, [pc, #36]	; (6000170c <CrashReportClass::clear()+0x98>)
600016e8:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600016ec:	f3bf 8f4f 	dsb	sy
	asm("isb");
600016f0:	f3bf 8f6f 	isb	sy
}
600016f4:	bc30      	pop	{r4, r5}
600016f6:	4770      	bx	lr
600016f8:	2027ff00 	.word	0x2027ff00
600016fc:	2027ff80 	.word	0x2027ff80
60001700:	2027ffa0 	.word	0x2027ffa0
60001704:	400f8000 	.word	0x400f8000
60001708:	2027f000 	.word	0x2027f000
6000170c:	2027ffc0 	.word	0x2027ffc0

60001710 <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
60001710:	4bb2      	ldr	r3, [pc, #712]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001712:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001716:	2a0b      	cmp	r2, #11
{
60001718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
6000171c:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000171e:	d11b      	bne.n	60001758 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
60001720:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
60001724:	49ae      	ldr	r1, [pc, #696]	; (600019e0 <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001726:	4baf      	ldr	r3, [pc, #700]	; (600019e4 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
60001728:	4eaf      	ldr	r6, [pc, #700]	; (600019e8 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
6000172a:	f101 0c04 	add.w	ip, r1, #4
6000172e:	4050      	eors	r0, r2
60001730:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001732:	f000 0201 	and.w	r2, r0, #1
60001736:	3c01      	subs	r4, #1
60001738:	fb03 f202 	mul.w	r2, r3, r2
6000173c:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
60001740:	d1f7      	bne.n	60001732 <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
60001742:	45b4      	cmp	ip, r6
60001744:	d002      	beq.n	6000174c <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
60001746:	684a      	ldr	r2, [r1, #4]
60001748:	4661      	mov	r1, ip
6000174a:	e7ee      	b.n	6000172a <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
6000174c:	f8df 828c 	ldr.w	r8, [pc, #652]	; 600019dc <CrashReportClass::printTo(Print&) const+0x2cc>
60001750:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
60001754:	4298      	cmp	r0, r3
60001756:	d079      	beq.n	6000184c <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001758:	682b      	ldr	r3, [r5, #0]
6000175a:	2217      	movs	r2, #23
6000175c:	49a3      	ldr	r1, [pc, #652]	; (600019ec <CrashReportClass::printTo(Print&) const+0x2dc>)
6000175e:	4628      	mov	r0, r5
60001760:	685b      	ldr	r3, [r3, #4]
60001762:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001764:	4628      	mov	r0, r5
60001766:	f000 ff83 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000176a:	682b      	ldr	r3, [r5, #0]
6000176c:	2248      	movs	r2, #72	; 0x48
6000176e:	49a0      	ldr	r1, [pc, #640]	; (600019f0 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001770:	685b      	ldr	r3, [r3, #4]
60001772:	4628      	mov	r0, r5
60001774:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001776:	4628      	mov	r0, r5
60001778:	f000 ff7a 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000177c:	682b      	ldr	r3, [r5, #0]
6000177e:	2249      	movs	r2, #73	; 0x49
60001780:	499c      	ldr	r1, [pc, #624]	; (600019f4 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001782:	685b      	ldr	r3, [r3, #4]
60001784:	4628      	mov	r0, r5
60001786:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001788:	4628      	mov	r0, r5
6000178a:	f000 ff71 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000178e:	682b      	ldr	r3, [r5, #0]
60001790:	2224      	movs	r2, #36	; 0x24
60001792:	4999      	ldr	r1, [pc, #612]	; (600019f8 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001794:	685b      	ldr	r3, [r3, #4]
60001796:	4628      	mov	r0, r5
60001798:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000179a:	4628      	mov	r0, r5
6000179c:	f000 ff68 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017a0:	682b      	ldr	r3, [r5, #0]
600017a2:	2247      	movs	r2, #71	; 0x47
600017a4:	4995      	ldr	r1, [pc, #596]	; (600019fc <CrashReportClass::printTo(Print&) const+0x2ec>)
600017a6:	685b      	ldr	r3, [r3, #4]
600017a8:	4628      	mov	r0, r5
600017aa:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017ac:	4628      	mov	r0, r5
600017ae:	f000 ff5f 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600017b2:	682b      	ldr	r3, [r5, #0]
600017b4:	223f      	movs	r2, #63	; 0x3f
600017b6:	4992      	ldr	r1, [pc, #584]	; (60001a00 <CrashReportClass::printTo(Print&) const+0x2f0>)
600017b8:	685b      	ldr	r3, [r3, #4]
600017ba:	4628      	mov	r0, r5
600017bc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017be:	4628      	mov	r0, r5
600017c0:	f000 ff56 	bl	60002670 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
600017c4:	4b8f      	ldr	r3, [pc, #572]	; (60001a04 <CrashReportClass::printTo(Print&) const+0x2f4>)
600017c6:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600017c8:	07a2      	lsls	r2, r4, #30
600017ca:	d50d      	bpl.n	600017e8 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
600017cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
600017ce:	4b8e      	ldr	r3, [pc, #568]	; (60001a08 <CrashReportClass::printTo(Print&) const+0x2f8>)
600017d0:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
600017d2:	682b      	ldr	r3, [r5, #0]
600017d4:	f000 8174 	beq.w	60001ac0 <CrashReportClass::printTo(Print&) const+0x3b0>
600017d8:	2240      	movs	r2, #64	; 0x40
600017da:	498c      	ldr	r1, [pc, #560]	; (60001a0c <CrashReportClass::printTo(Print&) const+0x2fc>)
600017dc:	685b      	ldr	r3, [r3, #4]
600017de:	4628      	mov	r0, r5
600017e0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600017e2:	4628      	mov	r0, r5
600017e4:	f000 ff44 	bl	60002670 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600017e8:	0767      	lsls	r7, r4, #29
600017ea:	f100 815f 	bmi.w	60001aac <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600017ee:	0726      	lsls	r6, r4, #28
600017f0:	f100 8152 	bmi.w	60001a98 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600017f4:	06e0      	lsls	r0, r4, #27
600017f6:	f100 8145 	bmi.w	60001a84 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
600017fa:	06a1      	lsls	r1, r4, #26
600017fc:	f100 8138 	bmi.w	60001a70 <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001800:	0662      	lsls	r2, r4, #25
60001802:	f100 812b 	bmi.w	60001a5c <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001806:	0623      	lsls	r3, r4, #24
60001808:	f100 80dd 	bmi.w	600019c6 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000180c:	f414 7480 	ands.w	r4, r4, #256	; 0x100
60001810:	f040 80ad 	bne.w	6000196e <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001814:	4b71      	ldr	r3, [pc, #452]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001816:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
6000181a:	b196      	cbz	r6, 60001842 <CrashReportClass::printTo(Print&) const+0x132>
6000181c:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001820:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001822:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001824:	487a      	ldr	r0, [pc, #488]	; (60001a10 <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
60001826:	4619      	mov	r1, r3
60001828:	3302      	adds	r3, #2
6000182a:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
6000182c:	4283      	cmp	r3, r0
			a += *p++;
6000182e:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001832:	4414      	add	r4, r2
		while (len > 0) {
60001834:	d1f7      	bne.n	60001826 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
60001836:	b293      	uxth	r3, r2
		return a | (b << 16);
60001838:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
6000183c:	429f      	cmp	r7, r3
6000183e:	f000 817c 	beq.w	60001b3a <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
60001842:	f7ff ff17 	bl	60001674 <CrashReportClass::clear()>
}
60001846:	2001      	movs	r0, #1
60001848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
6000184c:	682b      	ldr	r3, [r5, #0]
6000184e:	220c      	movs	r2, #12
60001850:	4970      	ldr	r1, [pc, #448]	; (60001a14 <CrashReportClass::printTo(Print&) const+0x304>)
60001852:	4628      	mov	r0, r5
60001854:	685b      	ldr	r3, [r3, #4]
60001856:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001858:	4628      	mov	r0, r5
6000185a:	f000 ff09 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000185e:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
60001860:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
60001864:	4628      	mov	r0, r5
    info->time /= 60;
60001866:	4b6c      	ldr	r3, [pc, #432]	; (60001a18 <CrashReportClass::printTo(Print&) const+0x308>)
60001868:	f8d2 a004 	ldr.w	sl, [r2, #4]
6000186c:	fba3 2709 	umull	r2, r7, r3, r9
60001870:	496a      	ldr	r1, [pc, #424]	; (60001a1c <CrashReportClass::printTo(Print&) const+0x30c>)
60001872:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
60001874:	fba3 2307 	umull	r2, r3, r3, r7
60001878:	2226      	movs	r2, #38	; 0x26
6000187a:	095e      	lsrs	r6, r3, #5
6000187c:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
60001880:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
60001882:	4967      	ldr	r1, [pc, #412]	; (60001a20 <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001884:	220a      	movs	r2, #10
60001886:	4628      	mov	r0, r5
60001888:	fba1 3106 	umull	r3, r1, r1, r6
6000188c:	4623      	mov	r3, r4
6000188e:	0909      	lsrs	r1, r1, #4
60001890:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001894:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001898:	f000 fed6 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000189c:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
6000189e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
600018a2:	2201      	movs	r2, #1
600018a4:	685b      	ldr	r3, [r3, #4]
600018a6:	4628      	mov	r0, r5
600018a8:	495e      	ldr	r1, [pc, #376]	; (60001a24 <CrashReportClass::printTo(Print&) const+0x314>)
600018aa:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018ac:	4623      	mov	r3, r4
600018ae:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
600018b2:	220a      	movs	r2, #10
600018b4:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
600018b6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
600018ba:	f000 fec5 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018be:	682b      	ldr	r3, [r5, #0]
600018c0:	2201      	movs	r2, #1
600018c2:	4958      	ldr	r1, [pc, #352]	; (60001a24 <CrashReportClass::printTo(Print&) const+0x314>)
600018c4:	685b      	ldr	r3, [r3, #4]
600018c6:	4628      	mov	r0, r5
600018c8:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
600018ca:	4623      	mov	r3, r4
600018cc:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
600018d0:	220a      	movs	r2, #10
600018d2:	4628      	mov	r0, r5
600018d4:	f000 feb8 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
600018d8:	4628      	mov	r0, r5
600018da:	f000 fec9 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018de:	682b      	ldr	r3, [r5, #0]
600018e0:	2224      	movs	r2, #36	; 0x24
600018e2:	4951      	ldr	r1, [pc, #324]	; (60001a28 <CrashReportClass::printTo(Print&) const+0x318>)
600018e4:	685b      	ldr	r3, [r3, #4]
600018e6:	4628      	mov	r0, r5
600018e8:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
600018ea:	4623      	mov	r3, r4
600018ec:	2210      	movs	r2, #16
600018ee:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
600018f2:	4628      	mov	r0, r5
600018f4:	f000 fea8 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
600018f8:	4628      	mov	r0, r5
600018fa:	f000 feb9 	bl	60002670 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
600018fe:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001902:	2e00      	cmp	r6, #0
60001904:	f040 80df 	bne.w	60001ac6 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001908:	4e34      	ldr	r6, [pc, #208]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
6000190a:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
6000190e:	2c00      	cmp	r4, #0
60001910:	f040 80fa 	bne.w	60001b08 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001914:	682b      	ldr	r3, [r5, #0]
60001916:	2222      	movs	r2, #34	; 0x22
60001918:	4944      	ldr	r1, [pc, #272]	; (60001a2c <CrashReportClass::printTo(Print&) const+0x31c>)
6000191a:	4628      	mov	r0, r5
6000191c:	685b      	ldr	r3, [r3, #4]
6000191e:	4798      	blx	r3
    p.print(info->temp);
60001920:	4b2e      	ldr	r3, [pc, #184]	; (600019dc <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001922:	2102      	movs	r1, #2
60001924:	4628      	mov	r0, r5
60001926:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
6000192a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
6000192e:	f000 fea3 	bl	60002678 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001932:	682b      	ldr	r3, [r5, #0]
60001934:	2205      	movs	r2, #5
60001936:	493e      	ldr	r1, [pc, #248]	; (60001a30 <CrashReportClass::printTo(Print&) const+0x320>)
60001938:	685b      	ldr	r3, [r3, #4]
6000193a:	4628      	mov	r0, r5
6000193c:	4798      	blx	r3
6000193e:	682b      	ldr	r3, [r5, #0]
60001940:	221d      	movs	r2, #29
60001942:	493c      	ldr	r1, [pc, #240]	; (60001a34 <CrashReportClass::printTo(Print&) const+0x324>)
60001944:	685b      	ldr	r3, [r3, #4]
60001946:	4628      	mov	r0, r5
60001948:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
6000194a:	4a3b      	ldr	r2, [pc, #236]	; (60001a38 <CrashReportClass::printTo(Print&) const+0x328>)
6000194c:	483b      	ldr	r0, [pc, #236]	; (60001a3c <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000194e:	2300      	movs	r3, #0
60001950:	6811      	ldr	r1, [r2, #0]
60001952:	220a      	movs	r2, #10
60001954:	fba0 0101 	umull	r0, r1, r0, r1
60001958:	4628      	mov	r0, r5
6000195a:	0c89      	lsrs	r1, r1, #18
6000195c:	f000 fe74 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001960:	682b      	ldr	r3, [r5, #0]
60001962:	2204      	movs	r2, #4
60001964:	4936      	ldr	r1, [pc, #216]	; (60001a40 <CrashReportClass::printTo(Print&) const+0x330>)
60001966:	685b      	ldr	r3, [r3, #4]
60001968:	4628      	mov	r0, r5
6000196a:	4798      	blx	r3
6000196c:	e72a      	b.n	600017c4 <CrashReportClass::printTo(Print&) const+0xb4>
6000196e:	682b      	ldr	r3, [r5, #0]
60001970:	2229      	movs	r2, #41	; 0x29
60001972:	4934      	ldr	r1, [pc, #208]	; (60001a44 <CrashReportClass::printTo(Print&) const+0x334>)
60001974:	4628      	mov	r0, r5
60001976:	685b      	ldr	r3, [r3, #4]
60001978:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000197a:	4628      	mov	r0, r5
6000197c:	f000 fe78 	bl	60002670 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001980:	4920      	ldr	r1, [pc, #128]	; (60001a04 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001982:	6828      	ldr	r0, [r5, #0]
60001984:	2221      	movs	r2, #33	; 0x21
60001986:	688b      	ldr	r3, [r1, #8]
60001988:	6844      	ldr	r4, [r0, #4]
6000198a:	4628      	mov	r0, r5
6000198c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001990:	608b      	str	r3, [r1, #8]
60001992:	492d      	ldr	r1, [pc, #180]	; (60001a48 <CrashReportClass::printTo(Print&) const+0x338>)
60001994:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001996:	4628      	mov	r0, r5
60001998:	f000 fe6a 	bl	60002670 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000199c:	682b      	ldr	r3, [r5, #0]
6000199e:	2242      	movs	r2, #66	; 0x42
600019a0:	492a      	ldr	r1, [pc, #168]	; (60001a4c <CrashReportClass::printTo(Print&) const+0x33c>)
600019a2:	685b      	ldr	r3, [r3, #4]
600019a4:	4628      	mov	r0, r5
600019a6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019a8:	4628      	mov	r0, r5
600019aa:	f000 fe61 	bl	60002670 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600019ae:	4a28      	ldr	r2, [pc, #160]	; (60001a50 <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
600019b0:	4b28      	ldr	r3, [pc, #160]	; (60001a54 <CrashReportClass::printTo(Print&) const+0x344>)
600019b2:	2107      	movs	r1, #7
600019b4:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600019b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
600019b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600019bc:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600019be:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
600019c2:	bf30      	wfi
600019c4:	e7fd      	b.n	600019c2 <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
600019c6:	682b      	ldr	r3, [r5, #0]
600019c8:	2221      	movs	r2, #33	; 0x21
600019ca:	4923      	ldr	r1, [pc, #140]	; (60001a58 <CrashReportClass::printTo(Print&) const+0x348>)
600019cc:	4628      	mov	r0, r5
600019ce:	685b      	ldr	r3, [r3, #4]
600019d0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019d2:	4628      	mov	r0, r5
600019d4:	f000 fe4c 	bl	60002670 <___ZN5Print7printlnEv_veneer>
600019d8:	e718      	b.n	6000180c <CrashReportClass::printTo(Print&) const+0xfc>
600019da:	bf00      	nop
600019dc:	2027ff00 	.word	0x2027ff00
600019e0:	2027ff80 	.word	0x2027ff80
600019e4:	edb88320 	.word	0xedb88320
600019e8:	2027ffa8 	.word	0x2027ffa8
600019ec:	200084b8 	.word	0x200084b8
600019f0:	200084d0 	.word	0x200084d0
600019f4:	2000851c 	.word	0x2000851c
600019f8:	20008568 	.word	0x20008568
600019fc:	20008590 	.word	0x20008590
60001a00:	200085d8 	.word	0x200085d8
60001a04:	400f8000 	.word	0x400f8000
60001a08:	0bad00f1 	.word	0x0bad00f1
60001a0c:	20008664 	.word	0x20008664
60001a10:	2027ffdc 	.word	0x2027ffdc
60001a14:	20007fa0 	.word	0x20007fa0
60001a18:	88888889 	.word	0x88888889
60001a1c:	20007fb0 	.word	0x20007fb0
60001a20:	aaaaaaab 	.word	0xaaaaaaab
60001a24:	20007fd8 	.word	0x20007fd8
60001a28:	20007fdc 	.word	0x20007fdc
60001a2c:	20008464 	.word	0x20008464
60001a30:	20008488 	.word	0x20008488
60001a34:	20008490 	.word	0x20008490
60001a38:	20008a50 	.word	0x20008a50
60001a3c:	431bde83 	.word	0x431bde83
60001a40:	200084b0 	.word	0x200084b0
60001a44:	20008798 	.word	0x20008798
60001a48:	200087c4 	.word	0x200087c4
60001a4c:	200087e8 	.word	0x200087e8
60001a50:	400d4000 	.word	0x400d4000
60001a54:	400ac000 	.word	0x400ac000
60001a58:	20008774 	.word	0x20008774
							  return write((const uint8_t *)str, strlen(str)); }
60001a5c:	682b      	ldr	r3, [r5, #0]
60001a5e:	2221      	movs	r2, #33	; 0x21
60001a60:	499c      	ldr	r1, [pc, #624]	; (60001cd4 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001a62:	4628      	mov	r0, r5
60001a64:	685b      	ldr	r3, [r3, #4]
60001a66:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a68:	4628      	mov	r0, r5
60001a6a:	f000 fe01 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001a6e:	e6ca      	b.n	60001806 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001a70:	682b      	ldr	r3, [r5, #0]
60001a72:	2229      	movs	r2, #41	; 0x29
60001a74:	4998      	ldr	r1, [pc, #608]	; (60001cd8 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001a76:	4628      	mov	r0, r5
60001a78:	685b      	ldr	r3, [r3, #4]
60001a7a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a7c:	4628      	mov	r0, r5
60001a7e:	f000 fdf7 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001a82:	e6bd      	b.n	60001800 <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001a84:	682b      	ldr	r3, [r5, #0]
60001a86:	2226      	movs	r2, #38	; 0x26
60001a88:	4994      	ldr	r1, [pc, #592]	; (60001cdc <CrashReportClass::printTo(Print&) const+0x5cc>)
60001a8a:	4628      	mov	r0, r5
60001a8c:	685b      	ldr	r3, [r3, #4]
60001a8e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001a90:	4628      	mov	r0, r5
60001a92:	f000 fded 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001a96:	e6b0      	b.n	600017fa <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001a98:	682b      	ldr	r3, [r5, #0]
60001a9a:	222a      	movs	r2, #42	; 0x2a
60001a9c:	4990      	ldr	r1, [pc, #576]	; (60001ce0 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001a9e:	4628      	mov	r0, r5
60001aa0:	685b      	ldr	r3, [r3, #4]
60001aa2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001aa4:	4628      	mov	r0, r5
60001aa6:	f000 fde3 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001aaa:	e6a3      	b.n	600017f4 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001aac:	682b      	ldr	r3, [r5, #0]
60001aae:	2227      	movs	r2, #39	; 0x27
60001ab0:	498c      	ldr	r1, [pc, #560]	; (60001ce4 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001ab2:	4628      	mov	r0, r5
60001ab4:	685b      	ldr	r3, [r3, #4]
60001ab6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ab8:	4628      	mov	r0, r5
60001aba:	f000 fdd9 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001abe:	e696      	b.n	600017ee <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001ac0:	2248      	movs	r2, #72	; 0x48
60001ac2:	4989      	ldr	r1, [pc, #548]	; (60001ce8 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001ac4:	e68a      	b.n	600017dc <CrashReportClass::printTo(Print&) const+0xcc>
60001ac6:	682b      	ldr	r3, [r5, #0]
60001ac8:	2208      	movs	r2, #8
60001aca:	4988      	ldr	r1, [pc, #544]	; (60001cec <CrashReportClass::printTo(Print&) const+0x5dc>)
60001acc:	4628      	mov	r0, r5
60001ace:	685b      	ldr	r3, [r3, #4]
60001ad0:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ad2:	4623      	mov	r3, r4
60001ad4:	2210      	movs	r2, #16
60001ad6:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001ada:	4628      	mov	r0, r5
60001adc:	f000 fdb4 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ae0:	4628      	mov	r0, r5
60001ae2:	f000 fdc5 	bl	60002670 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001ae6:	07f4      	lsls	r4, r6, #31
60001ae8:	d469      	bmi.n	60001bbe <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001aea:	07b0      	lsls	r0, r6, #30
60001aec:	f100 8153 	bmi.w	60001d96 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001af0:	0731      	lsls	r1, r6, #28
60001af2:	f100 8144 	bmi.w	60001d7e <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001af6:	06f2      	lsls	r2, r6, #27
60001af8:	f100 815d 	bmi.w	60001db6 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001afc:	06b3      	lsls	r3, r6, #26
60001afe:	d567      	bpl.n	60001bd0 <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001b00:	682b      	ldr	r3, [r5, #0]
60001b02:	222a      	movs	r2, #42	; 0x2a
60001b04:	497a      	ldr	r1, [pc, #488]	; (60001cf0 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001b06:	e05d      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001b08:	682b      	ldr	r3, [r5, #0]
60001b0a:	2208      	movs	r2, #8
60001b0c:	4979      	ldr	r1, [pc, #484]	; (60001cf4 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001b0e:	4628      	mov	r0, r5
60001b10:	685b      	ldr	r3, [r3, #4]
60001b12:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b14:	2300      	movs	r3, #0
60001b16:	2210      	movs	r2, #16
60001b18:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001b1c:	4628      	mov	r0, r5
60001b1e:	f000 fd93 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001b22:	4628      	mov	r0, r5
60001b24:	f000 fda4 	bl	60002670 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001b28:	07a0      	lsls	r0, r4, #30
60001b2a:	d467      	bmi.n	60001bfc <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001b2c:	0061      	lsls	r1, r4, #1
60001b2e:	f57f aef1 	bpl.w	60001914 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001b32:	682b      	ldr	r3, [r5, #0]
60001b34:	221b      	movs	r2, #27
60001b36:	4970      	ldr	r1, [pc, #448]	; (60001cf8 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001b38:	e063      	b.n	60001c02 <CrashReportClass::printTo(Print&) const+0x4f2>
60001b3a:	2401      	movs	r4, #1
60001b3c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001d34 <CrashReportClass::printTo(Print&) const+0x624>
60001b40:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001d38 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001b44:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001d1c <CrashReportClass::printTo(Print&) const+0x60c>
60001b48:	e005      	b.n	60001b56 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001b4a:	3401      	adds	r4, #1
60001b4c:	2c07      	cmp	r4, #7
60001b4e:	f43f ae78 	beq.w	60001842 <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001b52:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001b56:	1e63      	subs	r3, r4, #1
60001b58:	2701      	movs	r7, #1
60001b5a:	fa07 f203 	lsl.w	r2, r7, r3
60001b5e:	4232      	tst	r2, r6
60001b60:	d0f3      	beq.n	60001b4a <CrashReportClass::printTo(Print&) const+0x43a>
60001b62:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001b66:	682b      	ldr	r3, [r5, #0]
60001b68:	220e      	movs	r2, #14
60001b6a:	4651      	mov	r1, sl
60001b6c:	685b      	ldr	r3, [r3, #4]
60001b6e:	4628      	mov	r0, r5
60001b70:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001b72:	4621      	mov	r1, r4
60001b74:	4628      	mov	r0, r5
60001b76:	f000 fd6b 	bl	60002650 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b7a:	682b      	ldr	r3, [r5, #0]
60001b7c:	2205      	movs	r2, #5
60001b7e:	495f      	ldr	r1, [pc, #380]	; (60001cfc <CrashReportClass::printTo(Print&) const+0x5ec>)
60001b80:	685b      	ldr	r3, [r3, #4]
60001b82:	4628      	mov	r0, r5
60001b84:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001b86:	6871      	ldr	r1, [r6, #4]
60001b88:	2300      	movs	r3, #0
60001b8a:	220a      	movs	r2, #10
60001b8c:	4628      	mov	r0, r5
60001b8e:	f000 fd5b 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b92:	682b      	ldr	r3, [r5, #0]
60001b94:	2204      	movs	r2, #4
60001b96:	495a      	ldr	r1, [pc, #360]	; (60001d00 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001b98:	685b      	ldr	r3, [r3, #4]
60001b9a:	4628      	mov	r0, r5
60001b9c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001b9e:	6871      	ldr	r1, [r6, #4]
60001ba0:	2300      	movs	r3, #0
60001ba2:	2210      	movs	r2, #16
60001ba4:	4628      	mov	r0, r5
60001ba6:	f000 fd4f 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001baa:	682b      	ldr	r3, [r5, #0]
60001bac:	463a      	mov	r2, r7
60001bae:	4955      	ldr	r1, [pc, #340]	; (60001d04 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001bb0:	685b      	ldr	r3, [r3, #4]
60001bb2:	4628      	mov	r0, r5
60001bb4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bb6:	4628      	mov	r0, r5
60001bb8:	f000 fd5a 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001bbc:	e7c5      	b.n	60001b4a <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001bbe:	682b      	ldr	r3, [r5, #0]
60001bc0:	2228      	movs	r2, #40	; 0x28
60001bc2:	4951      	ldr	r1, [pc, #324]	; (60001d08 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001bc4:	685b      	ldr	r3, [r3, #4]
60001bc6:	4628      	mov	r0, r5
60001bc8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bca:	4628      	mov	r0, r5
60001bcc:	f000 fd50 	bl	60002670 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001bd0:	0637      	lsls	r7, r6, #24
60001bd2:	d43c      	bmi.n	60001c4e <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001bd4:	05f4      	lsls	r4, r6, #23
60001bd6:	d41b      	bmi.n	60001c10 <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001bd8:	05b0      	lsls	r0, r6, #22
60001bda:	f100 80d8 	bmi.w	60001d8e <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001bde:	0571      	lsls	r1, r6, #21
60001be0:	f100 80d1 	bmi.w	60001d86 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001be4:	0532      	lsls	r2, r6, #20
60001be6:	f100 80e2 	bmi.w	60001dae <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001bea:	04f3      	lsls	r3, r6, #19
60001bec:	f100 80db 	bmi.w	60001da6 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001bf0:	04b7      	lsls	r7, r6, #18
60001bf2:	d516      	bpl.n	60001c22 <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001bf4:	682b      	ldr	r3, [r5, #0]
60001bf6:	2231      	movs	r2, #49	; 0x31
60001bf8:	4944      	ldr	r1, [pc, #272]	; (60001d0c <CrashReportClass::printTo(Print&) const+0x5fc>)
60001bfa:	e00c      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001bfc:	682b      	ldr	r3, [r5, #0]
60001bfe:	2226      	movs	r2, #38	; 0x26
60001c00:	4943      	ldr	r1, [pc, #268]	; (60001d10 <CrashReportClass::printTo(Print&) const+0x600>)
60001c02:	4628      	mov	r0, r5
60001c04:	685b      	ldr	r3, [r3, #4]
60001c06:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c08:	4628      	mov	r0, r5
60001c0a:	f000 fd31 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001c0e:	e681      	b.n	60001914 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001c10:	682b      	ldr	r3, [r5, #0]
60001c12:	2220      	movs	r2, #32
60001c14:	493f      	ldr	r1, [pc, #252]	; (60001d14 <CrashReportClass::printTo(Print&) const+0x604>)
60001c16:	685b      	ldr	r3, [r3, #4]
60001c18:	4628      	mov	r0, r5
60001c1a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c1c:	4628      	mov	r0, r5
60001c1e:	f000 fd27 	bl	60002670 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001c22:	0434      	lsls	r4, r6, #16
60001c24:	d440      	bmi.n	60001ca8 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001c26:	03f0      	lsls	r0, r6, #15
60001c28:	d42e      	bmi.n	60001c88 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001c2a:	03b1      	lsls	r1, r6, #14
60001c2c:	f100 80b7 	bmi.w	60001d9e <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001c30:	0372      	lsls	r2, r6, #13
60001c32:	d44b      	bmi.n	60001ccc <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001c34:	0333      	lsls	r3, r6, #12
60001c36:	f100 80c6 	bmi.w	60001dc6 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001c3a:	01f7      	lsls	r7, r6, #7
60001c3c:	f100 80bf 	bmi.w	60001dbe <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001c40:	01b4      	lsls	r4, r6, #6
60001c42:	f57f ae61 	bpl.w	60001908 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001c46:	682b      	ldr	r3, [r5, #0]
60001c48:	221b      	movs	r2, #27
60001c4a:	4933      	ldr	r1, [pc, #204]	; (60001d18 <CrashReportClass::printTo(Print&) const+0x608>)
60001c4c:	e01f      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001c4e:	682b      	ldr	r3, [r5, #0]
60001c50:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001c52:	4c32      	ldr	r4, [pc, #200]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
60001c54:	4628      	mov	r0, r5
60001c56:	4932      	ldr	r1, [pc, #200]	; (60001d20 <CrashReportClass::printTo(Print&) const+0x610>)
60001c58:	685b      	ldr	r3, [r3, #4]
60001c5a:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c5c:	2210      	movs	r2, #16
60001c5e:	2300      	movs	r3, #0
60001c60:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001c64:	4628      	mov	r0, r5
60001c66:	f000 fcef 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001c6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001c6e:	2a1f      	cmp	r2, #31
60001c70:	d964      	bls.n	60001d3c <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001c72:	4b2c      	ldr	r3, [pc, #176]	; (60001d24 <CrashReportClass::printTo(Print&) const+0x614>)
60001c74:	429a      	cmp	r2, r3
60001c76:	d303      	bcc.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001c78:	3320      	adds	r3, #32
60001c7a:	429a      	cmp	r2, r3
60001c7c:	f0c0 80a7 	bcc.w	60001dce <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001c80:	4628      	mov	r0, r5
60001c82:	f000 fcf5 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001c86:	e7a5      	b.n	60001bd4 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c88:	682b      	ldr	r3, [r5, #0]
60001c8a:	2223      	movs	r2, #35	; 0x23
60001c8c:	4926      	ldr	r1, [pc, #152]	; (60001d28 <CrashReportClass::printTo(Print&) const+0x618>)
60001c8e:	685b      	ldr	r3, [r3, #4]
60001c90:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001c92:	4e22      	ldr	r6, [pc, #136]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
60001c94:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c96:	4628      	mov	r0, r5
60001c98:	f000 fcea 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001c9c:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001ca0:	2c00      	cmp	r4, #0
60001ca2:	f43f ae37 	beq.w	60001914 <CrashReportClass::printTo(Print&) const+0x204>
60001ca6:	e72f      	b.n	60001b08 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001ca8:	682b      	ldr	r3, [r5, #0]
60001caa:	2221      	movs	r2, #33	; 0x21
60001cac:	491f      	ldr	r1, [pc, #124]	; (60001d2c <CrashReportClass::printTo(Print&) const+0x61c>)
60001cae:	4628      	mov	r0, r5
60001cb0:	685b      	ldr	r3, [r3, #4]
60001cb2:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001cb4:	4919      	ldr	r1, [pc, #100]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001cb6:	2300      	movs	r3, #0
60001cb8:	2210      	movs	r2, #16
60001cba:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001cbe:	4628      	mov	r0, r5
60001cc0:	f000 fcc2 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001cc4:	4628      	mov	r0, r5
60001cc6:	f000 fcd3 	bl	60002670 <___ZN5Print7printlnEv_veneer>
60001cca:	e7ac      	b.n	60001c26 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001ccc:	682b      	ldr	r3, [r5, #0]
60001cce:	2228      	movs	r2, #40	; 0x28
60001cd0:	4917      	ldr	r1, [pc, #92]	; (60001d30 <CrashReportClass::printTo(Print&) const+0x620>)
60001cd2:	e7dc      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001cd4:	20008750 	.word	0x20008750
60001cd8:	20008724 	.word	0x20008724
60001cdc:	200086fc 	.word	0x200086fc
60001ce0:	200086d0 	.word	0x200086d0
60001ce4:	200086a8 	.word	0x200086a8
60001ce8:	20008618 	.word	0x20008618
60001cec:	20008004 	.word	0x20008004
60001cf0:	200080b4 	.word	0x200080b4
60001cf4:	20008414 	.word	0x20008414
60001cf8:	20008448 	.word	0x20008448
60001cfc:	2000883c 	.word	0x2000883c
60001d00:	20008844 	.word	0x20008844
60001d04:	20008564 	.word	0x20008564
60001d08:	20008010 	.word	0x20008010
60001d0c:	200082d8 	.word	0x200082d8
60001d10:	20008420 	.word	0x20008420
60001d14:	200081c8 	.word	0x200081c8
60001d18:	200083f8 	.word	0x200083f8
60001d1c:	2027ff00 	.word	0x2027ff00
60001d20:	200080e0 	.word	0x200080e0
60001d24:	20043360 	.word	0x20043360
60001d28:	20008330 	.word	0x20008330
60001d2c:	2000830c 	.word	0x2000830c
60001d30:	20008388 	.word	0x20008388
60001d34:	2000882c 	.word	0x2000882c
60001d38:	2027ffc0 	.word	0x2027ffc0
60001d3c:	682b      	ldr	r3, [r5, #0]
60001d3e:	221e      	movs	r2, #30
60001d40:	4926      	ldr	r1, [pc, #152]	; (60001ddc <CrashReportClass::printTo(Print&) const+0x6cc>)
60001d42:	4628      	mov	r0, r5
60001d44:	685b      	ldr	r3, [r3, #4]
60001d46:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d48:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d4c:	2300      	movs	r3, #0
60001d4e:	2210      	movs	r2, #16
60001d50:	4628      	mov	r0, r5
60001d52:	f000 fc79 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d56:	682b      	ldr	r3, [r5, #0]
60001d58:	223e      	movs	r2, #62	; 0x3e
60001d5a:	4921      	ldr	r1, [pc, #132]	; (60001de0 <CrashReportClass::printTo(Print&) const+0x6d0>)
60001d5c:	685b      	ldr	r3, [r3, #4]
60001d5e:	4628      	mov	r0, r5
60001d60:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d62:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001d66:	2300      	movs	r3, #0
60001d68:	2210      	movs	r2, #16
60001d6a:	4628      	mov	r0, r5
60001d6c:	f000 fc6c 	bl	60002648 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	221d      	movs	r2, #29
60001d74:	491b      	ldr	r1, [pc, #108]	; (60001de4 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001d76:	685b      	ldr	r3, [r3, #4]
60001d78:	4628      	mov	r0, r5
60001d7a:	4798      	blx	r3
60001d7c:	e780      	b.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001d7e:	682b      	ldr	r3, [r5, #0]
60001d80:	2229      	movs	r2, #41	; 0x29
60001d82:	4919      	ldr	r1, [pc, #100]	; (60001de8 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001d84:	e71e      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001d86:	682b      	ldr	r3, [r5, #0]
60001d88:	2244      	movs	r2, #68	; 0x44
60001d8a:	4918      	ldr	r1, [pc, #96]	; (60001dec <CrashReportClass::printTo(Print&) const+0x6dc>)
60001d8c:	e743      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001d8e:	682b      	ldr	r3, [r5, #0]
60001d90:	222c      	movs	r2, #44	; 0x2c
60001d92:	4917      	ldr	r1, [pc, #92]	; (60001df0 <CrashReportClass::printTo(Print&) const+0x6e0>)
60001d94:	e73f      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001d96:	682b      	ldr	r3, [r5, #0]
60001d98:	2221      	movs	r2, #33	; 0x21
60001d9a:	4916      	ldr	r1, [pc, #88]	; (60001df4 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001d9c:	e712      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001d9e:	682b      	ldr	r3, [r5, #0]
60001da0:	2232      	movs	r2, #50	; 0x32
60001da2:	4915      	ldr	r1, [pc, #84]	; (60001df8 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001da4:	e773      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001da6:	682b      	ldr	r3, [r5, #0]
60001da8:	2233      	movs	r2, #51	; 0x33
60001daa:	4914      	ldr	r1, [pc, #80]	; (60001dfc <CrashReportClass::printTo(Print&) const+0x6ec>)
60001dac:	e733      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001dae:	682b      	ldr	r3, [r5, #0]
60001db0:	223f      	movs	r2, #63	; 0x3f
60001db2:	4913      	ldr	r1, [pc, #76]	; (60001e00 <CrashReportClass::printTo(Print&) const+0x6f0>)
60001db4:	e72f      	b.n	60001c16 <CrashReportClass::printTo(Print&) const+0x506>
60001db6:	682b      	ldr	r3, [r5, #0]
60001db8:	2225      	movs	r2, #37	; 0x25
60001dba:	4912      	ldr	r1, [pc, #72]	; (60001e04 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001dbc:	e702      	b.n	60001bc4 <CrashReportClass::printTo(Print&) const+0x4b4>
60001dbe:	682b      	ldr	r3, [r5, #0]
60001dc0:	2228      	movs	r2, #40	; 0x28
60001dc2:	4911      	ldr	r1, [pc, #68]	; (60001e08 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001dc4:	e763      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001dc6:	682b      	ldr	r3, [r5, #0]
60001dc8:	2216      	movs	r2, #22
60001dca:	4910      	ldr	r1, [pc, #64]	; (60001e0c <CrashReportClass::printTo(Print&) const+0x6fc>)
60001dcc:	e75f      	b.n	60001c8e <CrashReportClass::printTo(Print&) const+0x57e>
60001dce:	682b      	ldr	r3, [r5, #0]
60001dd0:	2241      	movs	r2, #65	; 0x41
60001dd2:	490f      	ldr	r1, [pc, #60]	; (60001e10 <CrashReportClass::printTo(Print&) const+0x700>)
60001dd4:	4628      	mov	r0, r5
60001dd6:	685b      	ldr	r3, [r3, #4]
60001dd8:	4798      	blx	r3
60001dda:	e751      	b.n	60001c80 <CrashReportClass::printTo(Print&) const+0x570>
60001ddc:	20008104 	.word	0x20008104
60001de0:	20008124 	.word	0x20008124
60001de4:	20008164 	.word	0x20008164
60001de8:	20008060 	.word	0x20008060
60001dec:	2000821c 	.word	0x2000821c
60001df0:	200081ec 	.word	0x200081ec
60001df4:	2000803c 	.word	0x2000803c
60001df8:	20008354 	.word	0x20008354
60001dfc:	200082a4 	.word	0x200082a4
60001e00:	20008264 	.word	0x20008264
60001e04:	2000808c 	.word	0x2000808c
60001e08:	200083cc 	.word	0x200083cc
60001e0c:	200083b4 	.word	0x200083b4
60001e10:	20008184 	.word	0x20008184

60001e14 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001e14:	4b12      	ldr	r3, [pc, #72]	; (60001e60 <CrashReportClass::operator bool()+0x4c>)
60001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001e1a:	2b0b      	cmp	r3, #11
60001e1c:	d11e      	bne.n	60001e5c <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001e1e:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e22:	4810      	ldr	r0, [pc, #64]	; (60001e64 <CrashReportClass::operator bool()+0x50>)
{
60001e24:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001e26:	4d10      	ldr	r5, [pc, #64]	; (60001e68 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001e28:	4c10      	ldr	r4, [pc, #64]	; (60001e6c <CrashReportClass::operator bool()+0x58>)
60001e2a:	e001      	b.n	60001e30 <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001e2c:	686b      	ldr	r3, [r5, #4]
60001e2e:	4675      	mov	r5, lr
60001e30:	f105 0e04 	add.w	lr, r5, #4
60001e34:	405a      	eors	r2, r3
60001e36:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e38:	f002 0301 	and.w	r3, r2, #1
60001e3c:	3901      	subs	r1, #1
60001e3e:	fb00 f303 	mul.w	r3, r0, r3
60001e42:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001e46:	d1f7      	bne.n	60001e38 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001e48:	45a6      	cmp	lr, r4
60001e4a:	d1ef      	bne.n	60001e2c <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001e4c:	4b04      	ldr	r3, [pc, #16]	; (60001e60 <CrashReportClass::operator bool()+0x4c>)
60001e4e:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001e52:	1a80      	subs	r0, r0, r2
60001e54:	fab0 f080 	clz	r0, r0
60001e58:	0940      	lsrs	r0, r0, #5
}
60001e5a:	bd30      	pop	{r4, r5, pc}
	return false;
60001e5c:	2000      	movs	r0, #0
}
60001e5e:	4770      	bx	lr
60001e60:	2027ff00 	.word	0x2027ff00
60001e64:	edb88320 	.word	0xedb88320
60001e68:	2027ff80 	.word	0x2027ff80
60001e6c:	2027ffa8 	.word	0x2027ffa8

60001e70 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001e70:	4770      	bx	lr
60001e72:	bf00      	nop

60001e74 <startup_default_middle_hook>:
60001e74:	4770      	bx	lr
60001e76:	bf00      	nop

60001e78 <startup_default_late_hook>:
60001e78:	4770      	bx	lr
60001e7a:	bf00      	nop

60001e7c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001e7c:	bf00      	nop
60001e7e:	4770      	bx	lr

60001e80 <configure_cache>:
{
60001e80:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001e82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001e86:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e88:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e8a:	4831      	ldr	r0, [pc, #196]	; (60001f50 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001e8c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001e90:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e94:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001e96:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001e9a:	482e      	ldr	r0, [pc, #184]	; (60001f54 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001e9c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001ea0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001ea2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001ea6:	482c      	ldr	r0, [pc, #176]	; (60001f58 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001ea8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001eac:	4a2b      	ldr	r2, [pc, #172]	; (60001f5c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001eae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001eb2:	4c2b      	ldr	r4, [pc, #172]	; (60001f60 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001eb4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001eb8:	482a      	ldr	r0, [pc, #168]	; (60001f64 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001eba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001ebe:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001ec2:	4c29      	ldr	r4, [pc, #164]	; (60001f68 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001ec4:	4829      	ldr	r0, [pc, #164]	; (60001f6c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001ec6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001eca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ece:	4c28      	ldr	r4, [pc, #160]	; (60001f70 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001ed0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001ed4:	4827      	ldr	r0, [pc, #156]	; (60001f74 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001ed6:	4a28      	ldr	r2, [pc, #160]	; (60001f78 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001ed8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001edc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001ee0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ee4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001ee8:	4c24      	ldr	r4, [pc, #144]	; (60001f7c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001eea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001eec:	4824      	ldr	r0, [pc, #144]	; (60001f80 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001eee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001ef2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001ef6:	4a23      	ldr	r2, [pc, #140]	; (60001f84 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001ef8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001efc:	4c22      	ldr	r4, [pc, #136]	; (60001f88 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001efe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f02:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001f06:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f0a:	4820      	ldr	r0, [pc, #128]	; (60001f8c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001f0c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f10:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001f12:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001f16:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001f1a:	bf00      	nop
	asm("nop");
60001f1c:	bf00      	nop
	asm("nop");
60001f1e:	bf00      	nop
	asm("nop");
60001f20:	bf00      	nop
	asm("nop");
60001f22:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001f24:	2201      	movs	r2, #1
60001f26:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001f2a:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f2e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001f32:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001f36:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001f3a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f3e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001f42:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001f46:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60001f4a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60001f4e:	4770      	bx	lr
60001f50:	1000003f 	.word	0x1000003f
60001f54:	07080025 	.word	0x07080025
60001f58:	00100009 	.word	0x00100009
60001f5c:	20043360 	.word	0x20043360
60001f60:	00200013 	.word	0x00200013
60001f64:	07020021 	.word	0x07020021
60001f68:	20000014 	.word	0x20000014
60001f6c:	13080025 	.word	0x13080025
60001f70:	10000009 	.word	0x10000009
60001f74:	20200016 	.word	0x20200016
60001f78:	130b0027 	.word	0x130b0027
60001f7c:	40000017 	.word	0x40000017
60001f80:	60000018 	.word	0x60000018
60001f84:	070b002f 	.word	0x070b002f
60001f88:	70000019 	.word	0x70000019
60001f8c:	8000001a 	.word	0x8000001a

60001f90 <configure_external_ram>:
{
60001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f92:	4bb8      	ldr	r3, [pc, #736]	; (60002274 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001f94:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f96:	4eb8      	ldr	r6, [pc, #736]	; (60002278 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001f98:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001f9a:	4fb8      	ldr	r7, [pc, #736]	; (6000227c <configure_external_ram+0x2ec>)
{
60001f9c:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001f9e:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fa2:	49b7      	ldr	r1, [pc, #732]	; (60002280 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001fa4:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fa8:	4db6      	ldr	r5, [pc, #728]	; (60002284 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001faa:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001fae:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fb2:	4cb5      	ldr	r4, [pc, #724]	; (60002288 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001fb4:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fb8:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fbc:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fc0:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001fc4:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001fc8:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001fcc:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001fce:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001fd0:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001fd2:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001fd4:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001fe2:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001fe6:	4aa9      	ldr	r2, [pc, #676]	; (6000228c <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001fe8:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001fec:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ff0:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ff4:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ff8:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ffc:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ffe:	4ba4      	ldr	r3, [pc, #656]	; (60002290 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002000:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002002:	48a4      	ldr	r0, [pc, #656]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002004:	49a4      	ldr	r1, [pc, #656]	; (60002298 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002006:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002008:	4aa4      	ldr	r2, [pc, #656]	; (6000229c <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000200a:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000200c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60002010:	f043 030c 	orr.w	r3, r3, #12
60002014:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002018:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000201c:	6803      	ldr	r3, [r0, #0]
6000201e:	f043 0302 	orr.w	r3, r3, #2
60002022:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002024:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002026:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002028:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
6000202c:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000202e:	4b9c      	ldr	r3, [pc, #624]	; (600022a0 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60002030:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002032:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002034:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002036:	4c9b      	ldr	r4, [pc, #620]	; (600022a4 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002038:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000203a:	4a9b      	ldr	r2, [pc, #620]	; (600022a8 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000203c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002040:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002042:	68c3      	ldr	r3, [r0, #12]
60002044:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60002048:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000204a:	6a03      	ldr	r3, [r0, #32]
6000204c:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000204e:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002050:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002052:	6a03      	ldr	r3, [r0, #32]
60002054:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60002056:	4a95      	ldr	r2, [pc, #596]	; (600022ac <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002058:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000205a:	4c95      	ldr	r4, [pc, #596]	; (600022b0 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000205c:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000205e:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002060:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60002062:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002064:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000206c:	f043 0301 	orr.w	r3, r3, #1
60002070:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002074:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002078:	498e      	ldr	r1, [pc, #568]	; (600022b4 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
6000207a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
6000207e:	f043 0301 	orr.w	r3, r3, #1
60002082:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002086:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
6000208a:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000208c:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000208e:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002090:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002094:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002096:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002098:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000209a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000209e:	6803      	ldr	r3, [r0, #0]
600020a0:	f023 0302 	bic.w	r3, r3, #2
600020a4:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020a6:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020a8:	4b83      	ldr	r3, [pc, #524]	; (600022b8 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
600020aa:	4984      	ldr	r1, [pc, #528]	; (600022bc <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020ac:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
600020ae:	f843 2b04 	str.w	r2, [r3], #4
600020b2:	428b      	cmp	r3, r1
600020b4:	d1fb      	bne.n	600020ae <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600020b6:	4a77      	ldr	r2, [pc, #476]	; (60002294 <configure_external_ram+0x304>)
600020b8:	6813      	ldr	r3, [r2, #0]
600020ba:	f043 0301 	orr.w	r3, r3, #1
600020be:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600020c0:	6813      	ldr	r3, [r2, #0]
600020c2:	f013 0301 	ands.w	r3, r3, #1
600020c6:	d1fb      	bne.n	600020c0 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020c8:	487a      	ldr	r0, [pc, #488]	; (600022b4 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020ca:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600020cc:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600020d0:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020d2:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600020d6:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020d8:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600020dc:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020e0:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600020e4:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020e8:	4975      	ldr	r1, [pc, #468]	; (600022c0 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600020ea:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600020ee:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020f2:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600020f6:	4873      	ldr	r0, [pc, #460]	; (600022c4 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600020f8:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600020fc:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002100:	4c71      	ldr	r4, [pc, #452]	; (600022c8 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002102:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002106:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
6000210a:	4970      	ldr	r1, [pc, #448]	; (600022cc <configure_external_ram+0x33c>)
6000210c:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002110:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60002112:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002116:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000211a:	485e      	ldr	r0, [pc, #376]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000211c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002120:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002124:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002128:	6943      	ldr	r3, [r0, #20]
6000212a:	07da      	lsls	r2, r3, #31
6000212c:	d5fc      	bpl.n	60002128 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000212e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002130:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002136:	4957      	ldr	r1, [pc, #348]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002138:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000213a:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000213e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002142:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002146:	694b      	ldr	r3, [r1, #20]
60002148:	07db      	lsls	r3, r3, #31
6000214a:	d5fc      	bpl.n	60002146 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000214c:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000214e:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002150:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002154:	4a4f      	ldr	r2, [pc, #316]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002156:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002158:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000215c:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002160:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002164:	6953      	ldr	r3, [r2, #20]
60002166:	07df      	lsls	r7, r3, #31
60002168:	d5fc      	bpl.n	60002164 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000216a:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
6000216c:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000216e:	4858      	ldr	r0, [pc, #352]	; (600022d0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002170:	4948      	ldr	r1, [pc, #288]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002172:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60002174:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002178:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000217c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002180:	694b      	ldr	r3, [r1, #20]
60002182:	07de      	lsls	r6, r3, #31
60002184:	d5fc      	bpl.n	60002180 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002186:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000218a:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000218e:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60002190:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002192:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002194:	4293      	cmp	r3, r2
60002196:	d165      	bne.n	60002264 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002198:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000219a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000219e:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021a0:	483c      	ldr	r0, [pc, #240]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
600021a2:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021a6:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021aa:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ae:	6943      	ldr	r3, [r0, #20]
600021b0:	07dd      	lsls	r5, r3, #31
600021b2:	d5fc      	bpl.n	600021ae <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021b4:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021b6:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021ba:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021bc:	4a35      	ldr	r2, [pc, #212]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021be:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600021c0:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021c4:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021c8:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021cc:	6953      	ldr	r3, [r2, #20]
600021ce:	07dc      	lsls	r4, r3, #31
600021d0:	d5fc      	bpl.n	600021cc <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021d2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021d4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021dc:	492d      	ldr	r1, [pc, #180]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021de:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600021e0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021e4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ec:	694b      	ldr	r3, [r1, #20]
600021ee:	07d8      	lsls	r0, r3, #31
600021f0:	d5fc      	bpl.n	600021ec <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f2:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600021f4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021fc:	4a25      	ldr	r2, [pc, #148]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021fe:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60002200:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002204:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002208:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000220c:	6953      	ldr	r3, [r2, #20]
6000220e:	07d9      	lsls	r1, r3, #31
60002210:	d5fc      	bpl.n	6000220c <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002212:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002214:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002218:	482d      	ldr	r0, [pc, #180]	; (600022d0 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000221a:	491e      	ldr	r1, [pc, #120]	; (60002294 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000221c:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000221e:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002222:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002226:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000222a:	694b      	ldr	r3, [r1, #20]
6000222c:	07da      	lsls	r2, r3, #31
6000222e:	d5fc      	bpl.n	6000222a <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60002230:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60002234:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002238:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000223a:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000223c:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
6000223e:	4293      	cmp	r3, r2
60002240:	d050      	beq.n	600022e4 <configure_external_ram+0x354>
60002242:	2508      	movs	r5, #8
60002244:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60002248:	4922      	ldr	r1, [pc, #136]	; (600022d4 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000224a:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
6000224c:	4b22      	ldr	r3, [pc, #136]	; (600022d8 <configure_external_ram+0x348>)
			external_psram_size = 16;
6000224e:	4a23      	ldr	r2, [pc, #140]	; (600022dc <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002250:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60002252:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60002254:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60002256:	2301      	movs	r3, #1
60002258:	4821      	ldr	r0, [pc, #132]	; (600022e0 <configure_external_ram+0x350>)
6000225a:	4422      	add	r2, r4
6000225c:	f000 fa10 	bl	60002680 <__sm_set_pool_veneer>
}
60002260:	b003      	add	sp, #12
60002262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60002264:	4b1e      	ldr	r3, [pc, #120]	; (600022e0 <configure_external_ram+0x350>)
60002266:	2200      	movs	r2, #0
60002268:	e9c3 2200 	strd	r2, r2, [r3]
6000226c:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60002270:	b003      	add	sp, #12
60002272:	bdf0      	pop	{r4, r5, r6, r7, pc}
60002274:	401f8000 	.word	0x401f8000
60002278:	0001b0f9 	.word	0x0001b0f9
6000227c:	000110f9 	.word	0x000110f9
60002280:	401f8400 	.word	0x401f8400
60002284:	000170f9 	.word	0x000170f9
60002288:	400fc000 	.word	0x400fc000
6000228c:	1ffffcff 	.word	0x1ffffcff
60002290:	a0000300 	.word	0xa0000300
60002294:	402a4000 	.word	0x402a4000
60002298:	402a8000 	.word	0x402a8000
6000229c:	ffff0012 	.word	0xffff0012
600022a0:	00f737ff 	.word	0x00f737ff
600022a4:	80000040 	.word	0x80000040
600022a8:	7cf0ff00 	.word	0x7cf0ff00
600022ac:	830f00ff 	.word	0x830f00ff
600022b0:	00020063 	.word	0x00020063
600022b4:	5af05af0 	.word	0x5af05af0
600022b8:	402a4200 	.word	0x402a4200
600022bc:	402a4300 	.word	0x402a4300
600022c0:	3018049f 	.word	0x3018049f
600022c4:	0a1806eb 	.word	0x0a1806eb
600022c8:	0a180638 	.word	0x0a180638
600022cc:	26013206 	.word	0x26013206
600022d0:	00030004 	.word	0x00030004
600022d4:	70000000 	.word	0x70000000
600022d8:	70000000 	.word	0x70000000
600022dc:	20043325 	.word	0x20043325
600022e0:	20042ad4 	.word	0x20042ad4
	FLEXSPI2_IPCR0 = addr;
600022e4:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022ec:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ee:	4808      	ldr	r0, [pc, #32]	; (60002310 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
600022f0:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022f4:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f8:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fc:	6943      	ldr	r3, [r0, #20]
600022fe:	07db      	lsls	r3, r3, #31
60002300:	d5fc      	bpl.n	600022fc <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002302:	2301      	movs	r3, #1
60002304:	2510      	movs	r5, #16
60002306:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
6000230a:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
6000230c:	e79c      	b.n	60002248 <configure_external_ram+0x2b8>
6000230e:	bf00      	nop
60002310:	402a4000 	.word	0x402a4000

60002314 <usb_pll_start>:
{
60002314:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002316:	4a15      	ldr	r2, [pc, #84]	; (6000236c <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002318:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000231a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000231e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002322:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002326:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000232a:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000232e:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60002330:	f013 0f02 	tst.w	r3, #2
60002334:	d10e      	bne.n	60002354 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60002336:	f413 5f00 	tst.w	r3, #8192	; 0x2000
6000233a:	d00f      	beq.n	6000235c <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
6000233c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60002340:	d00e      	beq.n	60002360 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60002342:	2b00      	cmp	r3, #0
60002344:	daf3      	bge.n	6000232e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002346:	f413 3f80 	tst.w	r3, #65536	; 0x10000
6000234a:	d10b      	bne.n	60002364 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
6000234c:	065b      	lsls	r3, r3, #25
6000234e:	d50b      	bpl.n	60002368 <usb_pll_start+0x54>
}
60002350:	bcf0      	pop	{r4, r5, r6, r7}
60002352:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002354:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002356:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002358:	6190      	str	r0, [r2, #24]
			continue;
6000235a:	e7e8      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000235c:	6155      	str	r5, [r2, #20]
			continue;
6000235e:	e7e6      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002360:	6156      	str	r6, [r2, #20]
			continue;
60002362:	e7e4      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002364:	6191      	str	r1, [r2, #24]
			continue;
60002366:	e7e2      	b.n	6000232e <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002368:	6157      	str	r7, [r2, #20]
			continue;
6000236a:	e7e0      	b.n	6000232e <usb_pll_start+0x1a>
6000236c:	400d8000 	.word	0x400d8000

60002370 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002370:	4a3f      	ldr	r2, [pc, #252]	; (60002470 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002372:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60002374:	493f      	ldr	r1, [pc, #252]	; (60002474 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002376:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000237a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000237e:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002382:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60002478 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002386:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000238a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 6000247c <tempmon_init+0x10c>
{
6000238e:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002394:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002398:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000239c:	4d38      	ldr	r5, [pc, #224]	; (60002480 <tempmon_init+0x110>)
6000239e:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023a0:	4c38      	ldr	r4, [pc, #224]	; (60002484 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023a2:	4839      	ldr	r0, [pc, #228]	; (60002488 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600023a4:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023a6:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600023aa:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023ac:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
600023b4:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023b8:	ee07 1a10 	vmov	s14, r1
600023bc:	4b33      	ldr	r3, [pc, #204]	; (6000248c <tempmon_init+0x11c>)
600023be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
600023c2:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600023c8:	4931      	ldr	r1, [pc, #196]	; (60002490 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ca:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ce:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023d2:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023d6:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023da:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
600023de:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023e2:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600023e6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023ea:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600023ee:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f2:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600023f6:	4827      	ldr	r0, [pc, #156]	; (60002494 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023f8:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600023fc:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002400:	ee75 5a87 	vadd.f32	s11, s11, s14
60002404:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002408:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000240c:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002410:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002414:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002418:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000241c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002420:	ee16 3a10 	vmov	r3, s12
60002424:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000242c:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60002430:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002432:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002436:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
6000243e:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60002442:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60002444:	4914      	ldr	r1, [pc, #80]	; (60002498 <tempmon_init+0x128>)
60002446:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
6000244a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
6000244e:	f043 0302 	orr.w	r3, r3, #2
60002452:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60002456:	4b11      	ldr	r3, [pc, #68]	; (6000249c <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002458:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
6000245c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002464:	2201      	movs	r2, #1
}
60002466:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002468:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000246c:	4770      	bx	lr
6000246e:	bf00      	nop
60002470:	400d8100 	.word	0x400d8100
60002474:	401f4400 	.word	0x401f4400
60002478:	42aa0000 	.word	0x42aa0000
6000247c:	42b40000 	.word	0x42b40000
60002480:	20042c3c 	.word	0x20042c3c
60002484:	20042c38 	.word	0x20042c38
60002488:	20042c40 	.word	0x20042c40
6000248c:	20042c44 	.word	0x20042c44
60002490:	0fff0000 	.word	0x0fff0000
60002494:	e000e400 	.word	0xe000e400
60002498:	20009400 	.word	0x20009400
6000249c:	0000d211 	.word	0x0000d211

600024a0 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600024a0:	4b31      	ldr	r3, [pc, #196]	; (60002568 <usb_init+0xc8>)
600024a2:	f640 7261 	movw	r2, #3937	; 0xf61
{
600024a6:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600024a8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600024ac:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
600024b0:	f000 f8c6 	bl	60002640 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024b4:	4a2d      	ldr	r2, [pc, #180]	; (6000256c <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
600024b6:	492e      	ldr	r1, [pc, #184]	; (60002570 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024bc:	482d      	ldr	r0, [pc, #180]	; (60002574 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600024be:	f043 0303 	orr.w	r3, r3, #3
600024c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024c6:	4b2c      	ldr	r3, [pc, #176]	; (60002578 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
600024c8:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600024cc:	6802      	ldr	r2, [r0, #0]
600024ce:	421a      	tst	r2, r3
600024d0:	d103      	bne.n	600024da <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600024d2:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
600024d6:	079a      	lsls	r2, r3, #30
600024d8:	d01b      	beq.n	60002512 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024da:	4a25      	ldr	r2, [pc, #148]	; (60002570 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600024dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
600024e0:	4b24      	ldr	r3, [pc, #144]	; (60002574 <usb_init+0xd4>)
600024e2:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600024e4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024e8:	f043 0302 	orr.w	r3, r3, #2
600024ec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600024f0:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600024f4:	079b      	lsls	r3, r3, #30
600024f6:	d4fb      	bmi.n	600024f0 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600024f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
600024fc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002500:	4b1c      	ldr	r3, [pc, #112]	; (60002574 <usb_init+0xd4>)
60002502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002506:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000250a:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000250c:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000250e:	f000 f8a7 	bl	60002660 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002512:	4a18      	ldr	r2, [pc, #96]	; (60002574 <usb_init+0xd4>)
60002514:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002518:	4c15      	ldr	r4, [pc, #84]	; (60002570 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
6000251a:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000251c:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000251e:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002520:	4b16      	ldr	r3, [pc, #88]	; (6000257c <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60002522:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002524:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002528:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000252c:	4618      	mov	r0, r3
6000252e:	f000 f893 	bl	60002658 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60002532:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60002536:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002538:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000253c:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002540:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002542:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60002546:	641a      	str	r2, [r3, #64]	; 0x40
60002548:	4b0d      	ldr	r3, [pc, #52]	; (60002580 <usb_init+0xe0>)
6000254a:	4a0e      	ldr	r2, [pc, #56]	; (60002584 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000254c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60002550:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002554:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60002558:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000255c:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000255e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60002562:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60002566:	bd10      	pop	{r4, pc}
60002568:	400d8000 	.word	0x400d8000
6000256c:	400fc000 	.word	0x400fc000
60002570:	402e0000 	.word	0x402e0000
60002574:	400d9000 	.word	0x400d9000
60002578:	001e1c00 	.word	0x001e1c00
6000257c:	20000000 	.word	0x20000000
60002580:	20009400 	.word	0x20009400
60002584:	0000d4c1 	.word	0x0000d4c1

60002588 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002588:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000258a:	4b0e      	ldr	r3, [pc, #56]	; (600025c4 <_reboot_Teensyduino_+0x3c>)
6000258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000258e:	079b      	lsls	r3, r3, #30
60002590:	d400      	bmi.n	60002594 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60002592:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002594:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002596:	4b0c      	ldr	r3, [pc, #48]	; (600025c8 <_reboot_Teensyduino_+0x40>)
60002598:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000259a:	4a0c      	ldr	r2, [pc, #48]	; (600025cc <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
6000259c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
600025a4:	490a      	ldr	r1, [pc, #40]	; (600025d0 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025a6:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
600025aa:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600025ac:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600025ae:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
600025b6:	4807      	ldr	r0, [pc, #28]	; (600025d4 <_reboot_Teensyduino_+0x4c>)
600025b8:	4a07      	ldr	r2, [pc, #28]	; (600025d8 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025ba:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
600025bc:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600025be:	689b      	ldr	r3, [r3, #8]
600025c0:	4798      	blx	r3
	}
	__builtin_unreachable();
600025c2:	bf00      	nop
600025c4:	401f4400 	.word	0x401f4400
600025c8:	402e0000 	.word	0x402e0000
600025cc:	400ac000 	.word	0x400ac000
600025d0:	00200003 	.word	0x00200003
600025d4:	20208000 	.word	0x20208000
600025d8:	eb120000 	.word	0xeb120000

600025dc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025dc:	4b10      	ldr	r3, [pc, #64]	; (60002620 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025de:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025e0:	4a10      	ldr	r2, [pc, #64]	; (60002624 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025e4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
600025e8:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600025ea:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025ec:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600025f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
600025f2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
600025f6:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600025f8:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600025fa:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600025fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
600025fe:	061b      	lsls	r3, r3, #24
60002600:	d4fc      	bmi.n	600025fc <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002602:	4a09      	ldr	r2, [pc, #36]	; (60002628 <analog_init+0x4c>)
60002604:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002608:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000260a:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000260c:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000260e:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002610:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002614:	d1fb      	bne.n	6000260e <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002616:	4a05      	ldr	r2, [pc, #20]	; (6000262c <analog_init+0x50>)
60002618:	7013      	strb	r3, [r2, #0]
}
6000261a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000261e:	4770      	bx	lr
60002620:	400fc000 	.word	0x400fc000
60002624:	400c4000 	.word	0x400c4000
60002628:	400c8000 	.word	0x400c8000
6000262c:	20043324 	.word	0x20043324

60002630 <_init>:
60002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002632:	bf00      	nop
60002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
60002636:	bc08      	pop	{r3}
60002638:	469e      	mov	lr, r3
6000263a:	4770      	bx	lr
6000263c:	0000      	movs	r0, r0
	...

60002640 <__usb_init_serialnumber_veneer>:
60002640:	f85f f000 	ldr.w	pc, [pc]	; 60002644 <__usb_init_serialnumber_veneer+0x4>
60002644:	0000dc05 	.word	0x0000dc05

60002648 <___ZN5Print11printNumberEmhh_veneer>:
60002648:	f85f f000 	ldr.w	pc, [pc]	; 6000264c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000264c:	0000c355 	.word	0x0000c355

60002650 <___ZN5Print5printEl_veneer>:
60002650:	f85f f000 	ldr.w	pc, [pc]	; 60002654 <___ZN5Print5printEl_veneer+0x4>
60002654:	0000c2e9 	.word	0x0000c2e9

60002658 <__memset_veneer>:
60002658:	f85f f000 	ldr.w	pc, [pc]	; 6000265c <__memset_veneer+0x4>
6000265c:	00010bf1 	.word	0x00010bf1

60002660 <__delay_veneer>:
60002660:	f85f f000 	ldr.w	pc, [pc]	; 60002664 <__delay_veneer+0x4>
60002664:	0000c905 	.word	0x0000c905

60002668 <__set_arm_clock_veneer>:
60002668:	f85f f000 	ldr.w	pc, [pc]	; 6000266c <__set_arm_clock_veneer+0x4>
6000266c:	0000c615 	.word	0x0000c615

60002670 <___ZN5Print7printlnEv_veneer>:
60002670:	f85f f000 	ldr.w	pc, [pc]	; 60002674 <___ZN5Print7printlnEv_veneer+0x4>
60002674:	0000c301 	.word	0x0000c301

60002678 <___ZN5Print10printFloatEdh_veneer>:
60002678:	f85f f000 	ldr.w	pc, [pc]	; 6000267c <___ZN5Print10printFloatEdh_veneer+0x4>
6000267c:	0000c421 	.word	0x0000c421

60002680 <__sm_set_pool_veneer>:
60002680:	f85f f000 	ldr.w	pc, [pc]	; 60002684 <__sm_set_pool_veneer+0x4>
60002684:	0000e965 	.word	0x0000e965

60002688 <____libc_init_array_veneer>:
60002688:	f85f f000 	ldr.w	pc, [pc]	; 6000268c <____libc_init_array_veneer+0x4>
6000268c:	00010f15 	.word	0x00010f15

60002690 <__main_veneer>:
60002690:	f85f f000 	ldr.w	pc, [pc]	; 60002694 <__main_veneer+0x4>
60002694:	0000cac5 	.word	0x0000cac5

60002698 <__pwm_init_veneer>:
60002698:	f85f f000 	ldr.w	pc, [pc]	; 6000269c <__pwm_init_veneer+0x4>
6000269c:	0000e825 	.word	0x0000e825

600026a0 <__frame_dummy_init_array_entry>:
600026a0:	00000045 000006d1 00000db1 00001b29     E...........)...

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	200096c0 	.word	0x200096c0
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
      3c:	200096c0 	.word	0x200096c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    WriteIndexRecord(handle, p1);
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
    }
  }
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
      60:	20042b64 	.word	0x20042b64
      64:	60026400 	.word	0x60026400

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
      74:	4b0b      	ldr	r3, [pc, #44]	; (a4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      76:	4d0c      	ldr	r5, [pc, #48]	; (a8 <MTPStorage_SD::~MTPStorage_SD()+0x38>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      78:	f500 70ac 	add.w	r0, r0, #344	; 0x158
      7c:	6023      	str	r3, [r4, #0]
      7e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
      82:	f009 fc95 	bl	99b0 <FsBaseFile::close()>
      86:	f504 7084 	add.w	r0, r4, #264	; 0x108
      8a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
      8e:	f009 fc8f 	bl	99b0 <FsBaseFile::close()>
      92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
      96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
      9a:	f009 fc89 	bl	99b0 <FsBaseFile::close()>
      9e:	4620      	mov	r0, r4
      a0:	bd38      	pop	{r3, r4, r5, pc}
      a2:	bf00      	nop
      a4:	20000b60 	.word	0x20000b60
      a8:	20000b3c 	.word	0x20000b3c

000000ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      ac:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
      b0:	b083      	sub	sp, #12
      b2:	f88d 1007 	strb.w	r1, [sp, #7]
      b6:	b143      	cbz	r3, ca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b8:	2201      	movs	r2, #1
      ba:	f10d 0107 	add.w	r1, sp, #7
      be:	4618      	mov	r0, r3
      c0:	f008 fa7a 	bl	85b8 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      c4:	b003      	add	sp, #12
      c6:	f85d fb04 	ldr.w	pc, [sp], #4
      ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      cc:	2800      	cmp	r0, #0
      ce:	d0f9      	beq.n	c4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      d0:	2201      	movs	r2, #1
      d2:	f10d 0107 	add.w	r1, sp, #7
      d6:	f006 ff5f 	bl	6f98 <ExFatFile::write(void const*, unsigned int)>
      da:	b003      	add	sp, #12
      dc:	f85d fb04 	ldr.w	pc, [sp], #4

000000e0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
      e2:	b113      	cbz	r3, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      e4:	4618      	mov	r0, r3
      e6:	f008 ba61 	b.w	85ac <FatFile::sync()>
      ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      ec:	b108      	cbz	r0, f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      ee:	f006 bd6b 	b.w	6bc8 <ExFatFile::sync()>
  }
      f2:	4770      	bx	lr

000000f4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      f6:	b500      	push	{lr}
      f8:	b083      	sub	sp, #12
      fa:	b163      	cbz	r3, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      fc:	2201      	movs	r2, #1
      fe:	f10d 0107 	add.w	r1, sp, #7
     102:	4618      	mov	r0, r3
     104:	f007 feda 	bl	7ebc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     108:	2801      	cmp	r0, #1
     10a:	d10c      	bne.n	126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     110:	b003      	add	sp, #12
     112:	f85d fb04 	ldr.w	pc, [sp], #4
     116:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     118:	b128      	cbz	r0, 126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     11a:	2201      	movs	r2, #1
     11c:	f10d 0107 	add.w	r1, sp, #7
     120:	f006 f824 	bl	616c <ExFatFile::read(void*, unsigned int)>
     124:	e7f0      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     126:	f04f 30ff 	mov.w	r0, #4294967295
     12a:	e7f1      	b.n	110 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000012c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     12c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     12e:	b113      	cbz	r3, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     130:	4618      	mov	r0, r3
     132:	f007 bf97 	b.w	8064 <FatFile::peek()>
     136:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     138:	b108      	cbz	r0, 13e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     13a:	f006 b8e7 	b.w	630c <ExFatFile::peek()>
  }
     13e:	f04f 30ff 	mov.w	r0, #4294967295
     142:	4770      	bx	lr

00000144 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     144:	6c83      	ldr	r3, [r0, #72]	; 0x48
     146:	b153      	cbz	r3, 15e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     148:	7818      	ldrb	r0, [r3, #0]
     14a:	f010 0008 	ands.w	r0, r0, #8
     14e:	d00d      	beq.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     150:	69d8      	ldr	r0, [r3, #28]
     152:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     154:	1ac0      	subs	r0, r0, r3
     156:	bf48      	it	mi
     158:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     15c:	4770      	bx	lr
     15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     160:	b1a3      	cbz	r3, 18c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     162:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     166:	f010 0008 	ands.w	r0, r0, #8
     16a:	d100      	bne.n	16e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     16c:	4770      	bx	lr
     16e:	6918      	ldr	r0, [r3, #16]
     170:	6819      	ldr	r1, [r3, #0]
     172:	695a      	ldr	r2, [r3, #20]
     174:	1a40      	subs	r0, r0, r1
     176:	685b      	ldr	r3, [r3, #4]
     178:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     17c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     180:	f173 0300 	sbcs.w	r3, r3, #0
     184:	d3f2      	bcc.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     18a:	4770      	bx	lr
     18c:	4618      	mov	r0, r3
    return BaseFile::available();
     18e:	e7ed      	b.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000190 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     190:	6c83      	ldr	r3, [r0, #72]	; 0x48
     192:	b113      	cbz	r3, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     194:	4618      	mov	r0, r3
     196:	f008 ba0f 	b.w	85b8 <FatFile::write(void const*, unsigned int)>
     19a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     19c:	b108      	cbz	r0, 1a2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     19e:	f006 befb 	b.w	6f98 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     1a2:	4770      	bx	lr

000001a4 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     1a4:	4b11      	ldr	r3, [pc, #68]	; (1ec <resetUSB()+0x48>)
     1a6:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a8:	2064      	movs	r0, #100	; 0x64
  {
     1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1ae:	4d10      	ldr	r5, [pc, #64]	; (1f0 <resetUSB()+0x4c>)
     1b0:	4e10      	ldr	r6, [pc, #64]	; (1f4 <resetUSB()+0x50>)
     1b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 200 <resetUSB()+0x5c>
     1b6:	4f10      	ldr	r7, [pc, #64]	; (1f8 <resetUSB()+0x54>)
    while(!Serial) mtpd.loop();
     1b8:	4c10      	ldr	r4, [pc, #64]	; (1fc <resetUSB()+0x58>)
    USB1_USBCMD = 0;  // disconnect USB
     1ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1be:	f00c fba1 	bl	c904 <delay>
    usb_init();
     1c2:	f019 fb31 	bl	19828 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1c6:	f00e fa83 	bl	e6d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1ca:	782b      	ldrb	r3, [r5, #0]
    while(!Serial) mtpd.loop();
     1cc:	4620      	mov	r0, r4
     1ce:	b153      	cbz	r3, 1e6 <resetUSB()+0x42>
     1d0:	7833      	ldrb	r3, [r6, #0]
     1d2:	07db      	lsls	r3, r3, #31
     1d4:	d507      	bpl.n	1e6 <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1d6:	f8d8 3000 	ldr.w	r3, [r8]
     1da:	683a      	ldr	r2, [r7, #0]
     1dc:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1de:	2b0e      	cmp	r3, #14
     1e0:	d901      	bls.n	1e6 <resetUSB()+0x42>
  }
     1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(!Serial) mtpd.loop();
     1e6:	f003 f8f7 	bl	33d8 <MTPD::loop()>
     1ea:	e7ec      	b.n	1c6 <resetUSB()+0x22>
     1ec:	402e0000 	.word	0x402e0000
     1f0:	20043330 	.word	0x20043330
     1f4:	2004332f 	.word	0x2004332f
     1f8:	200432f8 	.word	0x200432f8
     1fc:	20009700 	.word	0x20009700
     200:	200432dc 	.word	0x200432dc

00000204 <loop>:
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     208:	4c70      	ldr	r4, [pc, #448]	; (3cc <loop+0x1c8>)
     20a:	b08b      	sub	sp, #44	; 0x2c
     20c:	4d70      	ldr	r5, [pc, #448]	; (3d0 <loop+0x1cc>)
     20e:	6823      	ldr	r3, [r4, #0]
     210:	3301      	adds	r3, #1
     212:	6023      	str	r3, [r4, #0]
     214:	f004 f95e 	bl	44d4 <getDataCount()>
     218:	882b      	ldrh	r3, [r5, #0]
     21a:	4283      	cmp	r3, r0
     21c:	4b6d      	ldr	r3, [pc, #436]	; (3d4 <loop+0x1d0>)
     21e:	681a      	ldr	r2, [r3, #0]
     220:	bf38      	it	cc
     222:	8028      	strhcc	r0, [r5, #0]
     224:	07d2      	lsls	r2, r2, #31
     226:	d533      	bpl.n	290 <loop+0x8c>
     228:	4e6b      	ldr	r6, [pc, #428]	; (3d8 <loop+0x1d4>)
     22a:	8830      	ldrh	r0, [r6, #0]
     22c:	b200      	sxth	r0, r0
     22e:	f004 f8e9 	bl	4404 <menu(short)>
     232:	8030      	strh	r0, [r6, #0]
    if(status<0)
     234:	8833      	ldrh	r3, [r6, #0]
     236:	041b      	lsls	r3, r3, #16
     238:	d436      	bmi.n	2a8 <loop+0xa4>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     23a:	4f68      	ldr	r7, [pc, #416]	; (3dc <loop+0x1d8>)
     23c:	f04f 0808 	mov.w	r8, #8
     240:	f8c7 8084 	str.w	r8, [r7, #132]	; 0x84
      status=saveData(status);  
     244:	8830      	ldrh	r0, [r6, #0]
     246:	b200      	sxth	r0, r0
     248:	f001 fbd6 	bl	19f8 <saveData(short)>
     24c:	8030      	strh	r0, [r6, #0]
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     24e:	f8c7 8088 	str.w	r8, [r7, #136]	; 0x88
  if((t1=millis())>(t0+1000))
     252:	4e63      	ldr	r6, [pc, #396]	; (3e0 <loop+0x1dc>)
	return systick_millis_count;
     254:	4a63      	ldr	r2, [pc, #396]	; (3e4 <loop+0x1e0>)
     256:	6833      	ldr	r3, [r6, #0]
     258:	6817      	ldr	r7, [r2, #0]
     25a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     25e:	42bb      	cmp	r3, r7
     260:	d213      	bcs.n	28a <loop+0x86>
    if(monitor)
     262:	4b61      	ldr	r3, [pc, #388]	; (3e8 <loop+0x1e4>)
     264:	f9b3 3000 	ldrsh.w	r3, [r3]
     268:	bb13      	cbnz	r3, 2b0 <loop+0xac>
     26a:	4b60      	ldr	r3, [pc, #384]	; (3ec <loop+0x1e8>)
     26c:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 42c <loop+0x228>
     270:	9306      	str	r3, [sp, #24]
     272:	4b5f      	ldr	r3, [pc, #380]	; (3f0 <loop+0x1ec>)
     274:	9307      	str	r3, [sp, #28]
    loopCount=0;
     276:	2300      	movs	r3, #0
    procMiss=0;
     278:	9a06      	ldr	r2, [sp, #24]
    t0=t1;
     27a:	6037      	str	r7, [r6, #0]
    procMiss=0;
     27c:	6013      	str	r3, [r2, #0]
    disk_count=0;
     27e:	9a07      	ldr	r2, [sp, #28]
    loopCount=0;
     280:	6023      	str	r3, [r4, #0]
    procCount=0;
     282:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     286:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     288:	6013      	str	r3, [r2, #0]
}
     28a:	b00b      	add	sp, #44	; 0x2c
     28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     290:	4a58      	ldr	r2, [pc, #352]	; (3f4 <loop+0x1f0>)
     292:	4e51      	ldr	r6, [pc, #324]	; (3d8 <loop+0x1d4>)
     294:	6812      	ldr	r2, [r2, #0]
     296:	2a01      	cmp	r2, #1
     298:	f04f 32ff 	mov.w	r2, #4294967295
     29c:	bf18      	it	ne
     29e:	2200      	movne	r2, #0
     2a0:	8032      	strh	r2, [r6, #0]
     2a2:	2201      	movs	r2, #1
     2a4:	601a      	str	r2, [r3, #0]
     2a6:	e7c0      	b.n	22a <loop+0x26>
    { mtpd.loop();
     2a8:	4853      	ldr	r0, [pc, #332]	; (3f8 <loop+0x1f4>)
     2aa:	f003 f895 	bl	33d8 <MTPD::loop()>
     2ae:	e7d0      	b.n	252 <loop+0x4e>
      rtc_get_datetime(&t);
     2b0:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2b2:	f8df b178 	ldr.w	fp, [pc, #376]	; 42c <loop+0x228>
      rtc_get_datetime(&t);
     2b6:	f004 fac3 	bl	4840 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2ba:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     2c2:	9304      	str	r3, [sp, #16]
     2c4:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     2c8:	494c      	ldr	r1, [pc, #304]	; (3fc <loop+0x1f8>)
     2ca:	9303      	str	r3, [sp, #12]
     2cc:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     2d0:	484b      	ldr	r0, [pc, #300]	; (400 <loop+0x1fc>)
     2d2:	9302      	str	r3, [sp, #8]
     2d4:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     2d8:	9301      	str	r3, [sp, #4]
     2da:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     2de:	9300      	str	r3, [sp, #0]
     2e0:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     2e4:	f00c f828 	bl	c338 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2e8:	2103      	movs	r1, #3
     2ea:	4846      	ldr	r0, [pc, #280]	; (404 <loop+0x200>)
     2ec:	f00e f972 	bl	e5d4 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     2f0:	2300      	movs	r3, #0
     2f2:	220a      	movs	r2, #10
     2f4:	6821      	ldr	r1, [r4, #0]
     2f6:	4842      	ldr	r0, [pc, #264]	; (400 <loop+0x1fc>)
     2f8:	f00c f82c 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     2fc:	2101      	movs	r1, #1
     2fe:	4842      	ldr	r0, [pc, #264]	; (408 <loop+0x204>)
     300:	f00e f968 	bl	e5d4 <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     304:	4b39      	ldr	r3, [pc, #228]	; (3ec <loop+0x1e8>)
     306:	220a      	movs	r2, #10
     308:	f8db 1000 	ldr.w	r1, [fp]
     30c:	9306      	str	r3, [sp, #24]
     30e:	2300      	movs	r3, #0
     310:	483b      	ldr	r0, [pc, #236]	; (400 <loop+0x1fc>)
     312:	f00c f81f 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     316:	2101      	movs	r1, #1
     318:	483b      	ldr	r0, [pc, #236]	; (408 <loop+0x204>)
     31a:	f00e f95b 	bl	e5d4 <usb_serial_write>
     31e:	9906      	ldr	r1, [sp, #24]
     320:	2300      	movs	r3, #0
     322:	220a      	movs	r2, #10
     324:	6809      	ldr	r1, [r1, #0]
     326:	4836      	ldr	r0, [pc, #216]	; (400 <loop+0x1fc>)
     328:	f00c f814 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     32c:	2101      	movs	r1, #1
     32e:	4836      	ldr	r0, [pc, #216]	; (408 <loop+0x204>)
     330:	f00e f950 	bl	e5d4 <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");
     334:	4b2e      	ldr	r3, [pc, #184]	; (3f0 <loop+0x1ec>)
      Serial.printf("%3d",mxb); Serial.print("  ");
     336:	882a      	ldrh	r2, [r5, #0]
     338:	4934      	ldr	r1, [pc, #208]	; (40c <loop+0x208>)
     33a:	4831      	ldr	r0, [pc, #196]	; (400 <loop+0x1fc>)
      Serial.print(disk_count); Serial.print("  ; ");
     33c:	9307      	str	r3, [sp, #28]
      Serial.printf("%3d",mxb); Serial.print("  ");
     33e:	f00b fffb 	bl	c338 <Print::printf(char const*, ...)>
     342:	2102      	movs	r1, #2
     344:	4832      	ldr	r0, [pc, #200]	; (410 <loop+0x20c>)
     346:	f00e f945 	bl	e5d4 <usb_serial_write>
     34a:	9907      	ldr	r1, [sp, #28]
     34c:	2300      	movs	r3, #0
     34e:	220a      	movs	r2, #10
     350:	6809      	ldr	r1, [r1, #0]
     352:	482b      	ldr	r0, [pc, #172]	; (400 <loop+0x1fc>)
     354:	f00b fffe 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     358:	2104      	movs	r1, #4
     35a:	482e      	ldr	r0, [pc, #184]	; (414 <loop+0x210>)
     35c:	f00e f93a 	bl	e5d4 <usb_serial_write>
      if(proc==0)
     360:	4b2d      	ldr	r3, [pc, #180]	; (418 <loop+0x214>)
     362:	881b      	ldrh	r3, [r3, #0]
     364:	b21b      	sxth	r3, r3
     366:	b98b      	cbnz	r3, 38c <loop+0x188>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     368:	4699      	mov	r9, r3
     36a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 430 <loop+0x22c>
     36e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 400 <loop+0x1fc>
     372:	4b2a      	ldr	r3, [pc, #168]	; (41c <loop+0x218>)
     374:	4651      	mov	r1, sl
     376:	4640      	mov	r0, r8
     378:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     37c:	f109 0901 	add.w	r9, r9, #1
     380:	f00b ffda 	bl	c338 <Print::printf(char const*, ...)>
     384:	f1b9 0f08 	cmp.w	r9, #8
     388:	d1f3      	bne.n	372 <loop+0x16e>
     38a:	e774      	b.n	276 <loop+0x72>
     38c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 434 <loop+0x230>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     390:	4923      	ldr	r1, [pc, #140]	; (420 <loop+0x21c>)
     392:	f8df 906c 	ldr.w	r9, [pc, #108]	; 400 <loop+0x1fc>
     396:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     39a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     39e:	4648      	mov	r0, r9
     3a0:	f00b ffca 	bl	c338 <Print::printf(char const*, ...)>
     3a4:	491e      	ldr	r1, [pc, #120]	; (420 <loop+0x21c>)
     3a6:	45d0      	cmp	r8, sl
     3a8:	d1f7      	bne.n	39a <loop+0x196>
        Serial.printf("%2d",max_stat);
     3aa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 438 <loop+0x234>
     3ae:	491d      	ldr	r1, [pc, #116]	; (424 <loop+0x220>)
     3b0:	f8d8 2000 	ldr.w	r2, [r8]
     3b4:	4812      	ldr	r0, [pc, #72]	; (400 <loop+0x1fc>)
     3b6:	f00b ffbf 	bl	c338 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3ba:	2260      	movs	r2, #96	; 0x60
     3bc:	2100      	movs	r1, #0
     3be:	481a      	ldr	r0, [pc, #104]	; (428 <loop+0x224>)
     3c0:	f010 fc16 	bl	10bf0 <memset>
        max_stat=0;        
     3c4:	2300      	movs	r3, #0
     3c6:	f8c8 3000 	str.w	r3, [r8]
     3ca:	e754      	b.n	276 <loop+0x72>
     3cc:	20042324 	.word	0x20042324
     3d0:	20043304 	.word	0x20043304
     3d4:	2000bdcc 	.word	0x2000bdcc
     3d8:	20043306 	.word	0x20043306
     3dc:	42004000 	.word	0x42004000
     3e0:	20042320 	.word	0x20042320
     3e4:	200432dc 	.word	0x200432dc
     3e8:	2004330e 	.word	0x2004330e
     3ec:	20042b80 	.word	0x20042b80
     3f0:	20042abc 	.word	0x20042abc
     3f4:	200432ec 	.word	0x200432ec
     3f8:	20009700 	.word	0x20009700
     3fc:	20007ec4 	.word	0x20007ec4
     400:	20008a54 	.word	0x20008a54
     404:	20007ee8 	.word	0x20007ee8
     408:	20000b1c 	.word	0x20000b1c
     40c:	20007eec 	.word	0x20007eec
     410:	20007ef0 	.word	0x20007ef0
     414:	20007ef4 	.word	0x20007ef4
     418:	20043310 	.word	0x20043310
     41c:	20042b38 	.word	0x20042b38
     420:	20007f04 	.word	0x20007f04
     424:	20007f0c 	.word	0x20007f0c
     428:	20042b84 	.word	0x20042b84
     42c:	20042b7c 	.word	0x20042b7c
     430:	20007efc 	.word	0x20007efc
     434:	20042b80 	.word	0x20042b80
     438:	20042b58 	.word	0x20042b58

0000043c <setup1()>:
{ while(!Serial) {}
     43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     43e:	4c18      	ldr	r4, [pc, #96]	; (4a0 <setup1()+0x64>)
     440:	4d18      	ldr	r5, [pc, #96]	; (4a4 <setup1()+0x68>)
     442:	4f19      	ldr	r7, [pc, #100]	; (4a8 <setup1()+0x6c>)
     444:	4e19      	ldr	r6, [pc, #100]	; (4ac <setup1()+0x70>)
		yield();
     446:	f00e f943 	bl	e6d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     44a:	7823      	ldrb	r3, [r4, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d0fa      	beq.n	446 <setup1()+0xa>
     450:	782b      	ldrb	r3, [r5, #0]
     452:	07db      	lsls	r3, r3, #31
     454:	d5f7      	bpl.n	446 <setup1()+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     456:	683b      	ldr	r3, [r7, #0]
     458:	6832      	ldr	r2, [r6, #0]
     45a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     45c:	2b0e      	cmp	r3, #14
     45e:	d9f2      	bls.n	446 <setup1()+0xa>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     460:	2106      	movs	r1, #6
     462:	4813      	ldr	r0, [pc, #76]	; (4b0 <setup1()+0x74>)
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     464:	4c13      	ldr	r4, [pc, #76]	; (4b4 <setup1()+0x78>)
     466:	f00e f8b5 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     46a:	4813      	ldr	r0, [pc, #76]	; (4b8 <setup1()+0x7c>)
     46c:	f00b ff48 	bl	c300 <Print::println()>
     470:	6823      	ldr	r3, [r4, #0]
     472:	b92b      	cbnz	r3, 480 <setup1()+0x44>
     474:	2001      	movs	r0, #1
     476:	f00c fa45 	bl	c904 <delay>
     47a:	6823      	ldr	r3, [r4, #0]
     47c:	2b00      	cmp	r3, #0
     47e:	d0f9      	beq.n	474 <setup1()+0x38>
  i2s_setup();
     480:	f000 fbea 	bl	c58 <i2s_setup()>
  dma_setup();
     484:	f000 fc2e 	bl	ce4 <dma_setup()>
  adc_init();
     488:	f000 fca4 	bl	dd4 <adc_init()>
     48c:	210b      	movs	r1, #11
     48e:	480b      	ldr	r0, [pc, #44]	; (4bc <setup1()+0x80>)
     490:	f00e f8a0 	bl	e5d4 <usb_serial_write>
     494:	4808      	ldr	r0, [pc, #32]	; (4b8 <setup1()+0x7c>)
}
     496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     49a:	f00b bf31 	b.w	c300 <Print::println()>
     49e:	bf00      	nop
     4a0:	20043330 	.word	0x20043330
     4a4:	2004332f 	.word	0x2004332f
     4a8:	200432dc 	.word	0x200432dc
     4ac:	200432f8 	.word	0x200432f8
     4b0:	20000780 	.word	0x20000780
     4b4:	2004311c 	.word	0x2004311c
     4b8:	20008a54 	.word	0x20008a54
     4bc:	20000788 	.word	0x20000788

000004c0 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4c4:	4c78      	ldr	r4, [pc, #480]	; (6a8 <storage_configure()+0x1e8>)
    sdioConfigBackup = sdioConfig;
     4c6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     4c8:	22ff      	movs	r2, #255	; 0xff
     4ca:	b082      	sub	sp, #8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4cc:	f504 6592 	add.w	r5, r4, #1168	; 0x490
     4d0:	4619      	mov	r1, r3
     4d2:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     4d6:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
     4d8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4dc:	f00a ff82 	bl	b3e4 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     4e0:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     4e2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     4e6:	f00a f9df 	bl	a8a8 <SdioCard::errorCode() const>
     4ea:	b938      	cbnz	r0, 4fc <storage_configure()+0x3c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     4ec:	2301      	movs	r3, #1
     4ee:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     4f2:	4620      	mov	r0, r4
     4f4:	461a      	mov	r2, r3
     4f6:	f009 fb03 	bl	9b00 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     4fa:	b970      	cbnz	r0, 51a <storage_configure()+0x5a>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
        }
        
        if(!sdx[ii].begin(SdioConfig(FIFO_SDIO))) 
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     4fc:	486b      	ldr	r0, [pc, #428]	; (6ac <storage_configure()+0x1ec>)
     4fe:	23fe      	movs	r3, #254	; 0xfe
     500:	2200      	movs	r2, #0
     502:	496b      	ldr	r1, [pc, #428]	; (6b0 <storage_configure()+0x1f0>)
     504:	6804      	ldr	r4, [r0, #0]
     506:	486b      	ldr	r0, [pc, #428]	; (6b4 <storage_configure()+0x1f4>)
     508:	9400      	str	r4, [sp, #0]
     50a:	f00b ff15 	bl	c338 <Print::printf(char const*, ...)>
     50e:	4869      	ldr	r0, [pc, #420]	; (6b4 <storage_configure()+0x1f4>)
            Serial.print("; total clusters: "); Serial.print(totalSize); 
            Serial.print(" free clusters: "); Serial.print(freeSize);
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
        }
      }
  }
     510:	b002      	add	sp, #8
     512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     516:	f00b bef3 	b.w	c300 <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     51a:	4b67      	ldr	r3, [pc, #412]	; (6b8 <storage_configure()+0x1f8>)
          storage.addFilesystem(sdx[ii], sd_str[ii]);
     51c:	4f63      	ldr	r7, [pc, #396]	; (6ac <storage_configure()+0x1ec>)
     51e:	685a      	ldr	r2, [r3, #4]
     520:	2a13      	cmp	r2, #19
     522:	dc06      	bgt.n	532 <storage_configure()+0x72>
          sdx[fsCount++] = &fs;
     524:	1c50      	adds	r0, r2, #1
          sd_name[fsCount] = name;
     526:	eb03 0182 	add.w	r1, r3, r2, lsl #2
          sdx[fsCount++] = &fs;
     52a:	6058      	str	r0, [r3, #4]
          sd_name[fsCount] = name;
     52c:	683b      	ldr	r3, [r7, #0]
          sdx[fsCount++] = &fs;
     52e:	658c      	str	r4, [r1, #88]	; 0x58
          sd_name[fsCount] = name;
     530:	608b      	str	r3, [r1, #8]
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     532:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     536:	2b00      	cmp	r3, #0
     538:	d068      	beq.n	60c <storage_configure()+0x14c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     53a:	69de      	ldr	r6, [r3, #28]
     53c:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     540:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     542:	2800      	cmp	r0, #0
     544:	f000 80a1 	beq.w	68a <storage_configure()+0x1ca>
     548:	6803      	ldr	r3, [r0, #0]
     54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d16b      	bne.n	62a <storage_configure()+0x16a>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     552:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     556:	2800      	cmp	r0, #0
     558:	f040 808c 	bne.w	674 <storage_configure()+0x1b4>
     55c:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     560:	2d00      	cmp	r5, #0
     562:	f000 8098 	beq.w	696 <storage_configure()+0x1d6>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     566:	4680      	mov	r8, r0
     568:	4628      	mov	r0, r5
     56a:	f007 f8f3 	bl	7754 <ExFatPartition::freeClusterCount()>
     56e:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     570:	f1b8 0f00 	cmp.w	r8, #0
     574:	d00b      	beq.n	58e <storage_configure()+0xce>
     576:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     57a:	2800      	cmp	r0, #0
     57c:	f000 8083 	beq.w	686 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     580:	6803      	ldr	r3, [r0, #0]
     582:	2100      	movs	r1, #0
     584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     586:	4798      	blx	r3
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     588:	2800      	cmp	r0, #0
     58a:	bf08      	it	eq
     58c:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     58e:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     592:	2b00      	cmp	r3, #0
     594:	d066      	beq.n	664 <storage_configure()+0x1a4>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     596:	799b      	ldrb	r3, [r3, #6]
     598:	f44f 7800 	mov.w	r8, #512	; 0x200
     59c:	fa08 f803 	lsl.w	r8, r8, r3
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5a0:	f3c8 2885 	ubfx	r8, r8, #10, #6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5a4:	2400      	movs	r4, #0
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5a6:	683a      	ldr	r2, [r7, #0]
     5a8:	23fe      	movs	r3, #254	; 0xfe
     5aa:	270a      	movs	r7, #10
     5ac:	9200      	str	r2, [sp, #0]
     5ae:	4622      	mov	r2, r4
     5b0:	4942      	ldr	r1, [pc, #264]	; (6bc <storage_configure()+0x1fc>)
     5b2:	4840      	ldr	r0, [pc, #256]	; (6b4 <storage_configure()+0x1f4>)
     5b4:	f00b fec0 	bl	c338 <Print::printf(char const*, ...)>
     5b8:	2112      	movs	r1, #18
     5ba:	4841      	ldr	r0, [pc, #260]	; (6c0 <storage_configure()+0x200>)
     5bc:	f00e f80a 	bl	e5d4 <usb_serial_write>
     5c0:	4632      	mov	r2, r6
     5c2:	4623      	mov	r3, r4
     5c4:	483b      	ldr	r0, [pc, #236]	; (6b4 <storage_configure()+0x1f4>)
     5c6:	e9cd 7400 	strd	r7, r4, [sp]
     5ca:	f00b fed7 	bl	c37c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5ce:	2110      	movs	r1, #16
     5d0:	483c      	ldr	r0, [pc, #240]	; (6c4 <storage_configure()+0x204>)
     5d2:	f00d ffff 	bl	e5d4 <usb_serial_write>
     5d6:	462a      	mov	r2, r5
     5d8:	4623      	mov	r3, r4
     5da:	4836      	ldr	r0, [pc, #216]	; (6b4 <storage_configure()+0x1f4>)
     5dc:	e9cd 7400 	strd	r7, r4, [sp]
     5e0:	f00b fecc 	bl	c37c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5e4:	210e      	movs	r1, #14
     5e6:	4838      	ldr	r0, [pc, #224]	; (6c8 <storage_configure()+0x208>)
     5e8:	f00d fff4 	bl	e5d4 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     5ec:	4623      	mov	r3, r4
     5ee:	463a      	mov	r2, r7
     5f0:	4641      	mov	r1, r8
     5f2:	4830      	ldr	r0, [pc, #192]	; (6b4 <storage_configure()+0x1f4>)
     5f4:	f00b feae 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5f8:	2106      	movs	r1, #6
     5fa:	4834      	ldr	r0, [pc, #208]	; (6cc <storage_configure()+0x20c>)
     5fc:	f00d ffea 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     600:	482c      	ldr	r0, [pc, #176]	; (6b4 <storage_configure()+0x1f4>)
  }
     602:	b002      	add	sp, #8
     604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     608:	f00b be7a 	b.w	c300 <Print::println()>
     60c:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     610:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     614:	2b00      	cmp	r3, #0
     616:	d033      	beq.n	680 <storage_configure()+0x1c0>
          uint64_t totalSize = sdx[ii].clusterCount();
     618:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     61c:	2800      	cmp	r0, #0
     61e:	d193      	bne.n	548 <storage_configure()+0x88>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     620:	4618      	mov	r0, r3
     622:	f007 f897 	bl	7754 <ExFatPartition::freeClusterCount()>
     626:	4605      	mov	r5, r0
     628:	e7b1      	b.n	58e <storage_configure()+0xce>
     62a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     62e:	b350      	cbz	r0, 686 <storage_configure()+0x1c6>
     630:	6803      	ldr	r3, [r0, #0]
     632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     634:	4798      	blx	r3
     636:	2800      	cmp	r0, #0
     638:	d18b      	bne.n	552 <storage_configure()+0x92>
     63a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     63e:	b310      	cbz	r0, 686 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     640:	6803      	ldr	r3, [r0, #0]
     642:	2101      	movs	r1, #1
     644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     646:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     648:	4680      	mov	r8, r0
     64a:	b340      	cbz	r0, 69e <storage_configure()+0x1de>
    return m_fVol ? m_fVol->freeClusterCount() :
     64c:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     650:	b990      	cbnz	r0, 678 <storage_configure()+0x1b8>
     652:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     656:	2d00      	cmp	r5, #0
     658:	d186      	bne.n	568 <storage_configure()+0xa8>
     65a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     65e:	2800      	cmp	r0, #0
     660:	d18e      	bne.n	580 <storage_configure()+0xc0>
     662:	4605      	mov	r5, r0
     664:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     668:	b1db      	cbz	r3, 6a2 <storage_configure()+0x1e2>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     66a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
     66e:	ea4f 2893 	mov.w	r8, r3, lsr #10
     672:	e797      	b.n	5a4 <storage_configure()+0xe4>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     674:	f04f 0800 	mov.w	r8, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     678:	f008 ffa2 	bl	95c0 <FatPartition::freeClusterCount()>
     67c:	4605      	mov	r5, r0
     67e:	e777      	b.n	570 <storage_configure()+0xb0>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     680:	b140      	cbz	r0, 694 <storage_configure()+0x1d4>
     682:	461e      	mov	r6, r3
     684:	e760      	b.n	548 <storage_configure()+0x88>
     686:	4605      	mov	r5, r0
     688:	e781      	b.n	58e <storage_configure()+0xce>
     68a:	4618      	mov	r0, r3
     68c:	f008 ff98 	bl	95c0 <FatPartition::freeClusterCount()>
     690:	4605      	mov	r5, r0
     692:	e77c      	b.n	58e <storage_configure()+0xce>
     694:	4606      	mov	r6, r0
  uint32_t bytesPerCluster() const {
     696:	f04f 0800 	mov.w	r8, #0
     69a:	4645      	mov	r5, r8
     69c:	e782      	b.n	5a4 <storage_configure()+0xe4>
     69e:	4605      	mov	r5, r0
     6a0:	e775      	b.n	58e <storage_configure()+0xce>
     6a2:	4698      	mov	r8, r3
     6a4:	e77e      	b.n	5a4 <storage_configure()+0xe4>
     6a6:	bf00      	nop
     6a8:	20042c4c 	.word	0x20042c4c
     6ac:	20009020 	.word	0x20009020
     6b0:	20000520 	.word	0x20000520
     6b4:	20008a54 	.word	0x20008a54
     6b8:	20043120 	.word	0x20043120
     6bc:	2000054c 	.word	0x2000054c
     6c0:	20000564 	.word	0x20000564
     6c4:	20000578 	.word	0x20000578
     6c8:	2000058c 	.word	0x2000058c
     6cc:	2000059c 	.word	0x2000059c

000006d0 <_GLOBAL__sub_I_storage>:
  }
     6d0:	b538      	push	{r3, r4, r5, lr}
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	492f      	ldr	r1, [pc, #188]	; (790 <_GLOBAL__sub_I_storage+0xc0>)
        fsCount = 0;
     6d4:	2400      	movs	r4, #0
     6d6:	4d2f      	ldr	r5, [pc, #188]	; (794 <_GLOBAL__sub_I_storage+0xc4>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6dc:	4b2e      	ldr	r3, [pc, #184]	; (798 <_GLOBAL__sub_I_storage+0xc8>)
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6de:	6029      	str	r1, [r5, #0]
     6e0:	f06f 0101 	mvn.w	r1, #1
        fsCount = 0;
     6e4:	606c      	str	r4, [r5, #4]
  MTPStorage_SD storage;
     6e6:	4628      	mov	r0, r5
     6e8:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
     6ec:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
     6f0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
     6f4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
     6f8:	f885 4154 	strb.w	r4, [r5, #340]	; 0x154
     6fc:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     700:	f8c5 41a8 	str.w	r4, [r5, #424]	; 0x1a8
     704:	f8a5 41ac 	strh.w	r4, [r5, #428]	; 0x1ac
     708:	e9c5 422b 	strd	r4, r2, [r5, #172]	; 0xac
     70c:	e9c5 423f 	strd	r4, r2, [r5, #252]	; 0xfc
     710:	e9c5 4253 	strd	r4, r2, [r5, #332]	; 0x14c
     714:	e9c5 4168 	strd	r4, r1, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     718:	e9c5 443c 	strd	r4, r4, [r5, #240]	; 0xf0
     71c:	e9c5 4450 	strd	r4, r4, [r5, #320]	; 0x140
     720:	e9c5 4464 	strd	r4, r4, [r5, #400]	; 0x190
     724:	e9c5 4466 	strd	r4, r4, [r5, #408]	; 0x198
     728:	4a1c      	ldr	r2, [pc, #112]	; (79c <_GLOBAL__sub_I_storage+0xcc>)
     72a:	491d      	ldr	r1, [pc, #116]	; (7a0 <_GLOBAL__sub_I_storage+0xd0>)
     72c:	f00e f95c 	bl	e9e8 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     730:	481c      	ldr	r0, [pc, #112]	; (7a4 <_GLOBAL__sub_I_storage+0xd4>)
  FsVolume() {}
     732:	4b1d      	ldr	r3, [pc, #116]	; (7a8 <_GLOBAL__sub_I_storage+0xd8>)
     734:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
     738:	6005      	str	r5, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     73a:	481c      	ldr	r0, [pc, #112]	; (7ac <_GLOBAL__sub_I_storage+0xdc>)
     73c:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
     740:	f881 4424 	strb.w	r4, [r1, #1060]	; 0x424
     744:	f8c1 4428 	str.w	r4, [r1, #1064]	; 0x428
	SPISettings() : _clock(4000000) {
     748:	4919      	ldr	r1, [pc, #100]	; (7b0 <_GLOBAL__sub_I_storage+0xe0>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     74a:	4d1a      	ldr	r5, [pc, #104]	; (7b4 <_GLOBAL__sub_I_storage+0xe4>)
     74c:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     750:	2007      	movs	r0, #7
	SPISettings() : _clock(4000000) {
     752:	f8c3 14a4 	str.w	r1, [r3, #1188]	; 0x4a4
  SharedSpiCard() {}
     756:	2129      	movs	r1, #41	; 0x29
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     758:	f8c3 04a8 	str.w	r0, [r3, #1192]	; 0x4a8
  SdFs sdx[nsd];
     75c:	4620      	mov	r0, r4
     75e:	f883 14ad 	strb.w	r1, [r3, #1197]	; 0x4ad
     762:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     766:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     76a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     76e:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
     772:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     776:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     77a:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
     77e:	f8c3 549c 	str.w	r5, [r3, #1180]	; 0x49c
     782:	4a06      	ldr	r2, [pc, #24]	; (79c <_GLOBAL__sub_I_storage+0xcc>)
     784:	490c      	ldr	r1, [pc, #48]	; (7b8 <_GLOBAL__sub_I_storage+0xe8>)
  }
     786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     78a:	f00e b92d 	b.w	e9e8 <__aeabi_atexit>
     78e:	bf00      	nop
     790:	20000b60 	.word	0x20000b60
     794:	20043120 	.word	0x20043120
     798:	20000c64 	.word	0x20000c64
     79c:	20008a70 	.word	0x20008a70
     7a0:	00000071 	.word	0x00000071
     7a4:	20009700 	.word	0x20009700
     7a8:	20042c4c 	.word	0x20042c4c
     7ac:	20000c88 	.word	0x20000c88
     7b0:	003d0900 	.word	0x003d0900
     7b4:	20000bcc 	.word	0x20000bcc
     7b8:	0000006d 	.word	0x0000006d

000007bc <setup>:
{
     7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     7c0:	4d75      	ldr	r5, [pc, #468]	; (998 <setup+0x1dc>)
     7c2:	b087      	sub	sp, #28
    set_arm_clock(48'000'000);
     7c4:	4875      	ldr	r0, [pc, #468]	; (99c <setup+0x1e0>)
				if (elapsed > 750) break;
     7c6:	f240 28ee 	movw	r8, #750	; 0x2ee
     7ca:	f00b ff23 	bl	c614 <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     7ce:	4c74      	ldr	r4, [pc, #464]	; (9a0 <setup+0x1e4>)
     7d0:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7d2:	4f74      	ldr	r7, [pc, #464]	; (9a4 <setup+0x1e8>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7d4:	f8df 9204 	ldr.w	r9, [pc, #516]	; 9dc <setup+0x220>
		yield();
     7d8:	f00d ff7a 	bl	e6d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7dc:	7823      	ldrb	r3, [r4, #0]
     7de:	2b00      	cmp	r3, #0
     7e0:	f000 80a4 	beq.w	92c <setup+0x170>
     7e4:	783b      	ldrb	r3, [r7, #0]
     7e6:	07d9      	lsls	r1, r3, #31
     7e8:	f140 80a0 	bpl.w	92c <setup+0x170>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7ec:	682b      	ldr	r3, [r5, #0]
     7ee:	f8d9 2000 	ldr.w	r2, [r9]
     7f2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7f4:	2b0e      	cmp	r3, #14
     7f6:	f240 8099 	bls.w	92c <setup+0x170>
  uint16_t *params=loadParameters();
     7fa:	f003 fb9f 	bl	3f3c <loadParameters()>
  if(params[0]==1)
     7fe:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     800:	4607      	mov	r7, r0
  if(params[0]==1)
     802:	2b01      	cmp	r3, #1
     804:	f000 80aa 	beq.w	95c <setup+0x1a0>
     808:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     80a:	f242 760f 	movw	r6, #9999	; 0x270f
     80e:	42b3      	cmp	r3, r6
     810:	d818      	bhi.n	844 <setup+0x88>
     812:	f8df 8190 	ldr.w	r8, [pc, #400]	; 9a4 <setup+0x1e8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     816:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 9dc <setup+0x220>
		yield();
     81a:	f00d ff59 	bl	e6d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     81e:	7823      	ldrb	r3, [r4, #0]
     820:	2b00      	cmp	r3, #0
     822:	f000 80a6 	beq.w	972 <setup+0x1b6>
     826:	f898 3000 	ldrb.w	r3, [r8]
     82a:	07da      	lsls	r2, r3, #31
     82c:	f140 80a1 	bpl.w	972 <setup+0x1b6>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     830:	682b      	ldr	r3, [r5, #0]
     832:	f8d9 2000 	ldr.w	r2, [r9]
     836:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     838:	2b0e      	cmp	r3, #14
     83a:	f240 809a 	bls.w	972 <setup+0x1b6>
     83e:	4b5a      	ldr	r3, [pc, #360]	; (9a8 <setup+0x1ec>)
     840:	2201      	movs	r2, #1
     842:	601a      	str	r2, [r3, #0]
     844:	682b      	ldr	r3, [r5, #0]
  while(millis()<10'000) if(Serial) { break;}
     846:	f242 760f 	movw	r6, #9999	; 0x270f
     84a:	42b3      	cmp	r3, r6
     84c:	d812      	bhi.n	874 <setup+0xb8>
     84e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 9a4 <setup+0x1e8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     852:	f8df 9188 	ldr.w	r9, [pc, #392]	; 9dc <setup+0x220>
		yield();
     856:	f00d ff3b 	bl	e6d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     85a:	7823      	ldrb	r3, [r4, #0]
     85c:	2b00      	cmp	r3, #0
     85e:	d070      	beq.n	942 <setup+0x186>
     860:	f898 3000 	ldrb.w	r3, [r8]
     864:	07db      	lsls	r3, r3, #31
     866:	d56c      	bpl.n	942 <setup+0x186>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     868:	682b      	ldr	r3, [r5, #0]
     86a:	f8d9 2000 	ldr.w	r2, [r9]
     86e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     870:	2b0e      	cmp	r3, #14
     872:	d966      	bls.n	942 <setup+0x186>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     874:	2126      	movs	r1, #38	; 0x26
     876:	484d      	ldr	r0, [pc, #308]	; (9ac <setup+0x1f0>)
     878:	f00d feac 	bl	e5d4 <usb_serial_write>
     87c:	484c      	ldr	r0, [pc, #304]	; (9b0 <setup+0x1f4>)
     87e:	f00b fd3f 	bl	c300 <Print::println()>
     882:	210c      	movs	r1, #12
     884:	484b      	ldr	r0, [pc, #300]	; (9b4 <setup+0x1f8>)
     886:	f00d fea5 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     88a:	8839      	ldrh	r1, [r7, #0]
     88c:	4848      	ldr	r0, [pc, #288]	; (9b0 <setup+0x1f4>)
     88e:	f00b fd2b 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     892:	4847      	ldr	r0, [pc, #284]	; (9b0 <setup+0x1f4>)
     894:	f00b fd34 	bl	c300 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     898:	4847      	ldr	r0, [pc, #284]	; (9b8 <setup+0x1fc>)
     89a:	f018 ffc9 	bl	19830 <___ZN16CrashReportClasscvbEv_veneer>
     89e:	2800      	cmp	r0, #0
     8a0:	d174      	bne.n	98c <setup+0x1d0>
  storage_configure();
     8a2:	f7ff fe0d 	bl	4c0 <storage_configure()>
  rtc_setup();
     8a6:	2113      	movs	r1, #19
     8a8:	2012      	movs	r0, #18
     8aa:	f003 ffc7 	bl	483c <rtc_setup(unsigned char, unsigned char)>
     8ae:	2110      	movs	r1, #16
     8b0:	4842      	ldr	r0, [pc, #264]	; (9bc <setup+0x200>)
     8b2:	f00d fe8f 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8b6:	483e      	ldr	r0, [pc, #248]	; (9b0 <setup+0x1f4>)
     8b8:	f00b fd22 	bl	c300 <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8bc:	a804      	add	r0, sp, #16
     8be:	f003 ffbf 	bl	4840 <rtc_get_datetime(datetime_t*)>
     8c2:	2800      	cmp	r0, #0
     8c4:	d05a      	beq.n	97c <setup+0x1c0>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8c6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     8ca:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     8ce:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     8d2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     8d6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     8da:	e9cd 2102 	strd	r2, r1, [sp, #8]
     8de:	e9cd 0400 	strd	r0, r4, [sp]
     8e2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  setup_ready=1;
     8e6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8e8:	4935      	ldr	r1, [pc, #212]	; (9c0 <setup+0x204>)
     8ea:	4831      	ldr	r0, [pc, #196]	; (9b0 <setup+0x1f4>)
     8ec:	f00b fd24 	bl	c338 <Print::printf(char const*, ...)>
                           t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     8f0:	482f      	ldr	r0, [pc, #188]	; (9b0 <setup+0x1f4>)
     8f2:	f00b fd05 	bl	c300 <Print::println()>
     8f6:	210b      	movs	r1, #11
     8f8:	4832      	ldr	r0, [pc, #200]	; (9c4 <setup+0x208>)
     8fa:	f00d fe6b 	bl	e5d4 <usb_serial_write>
     8fe:	482c      	ldr	r0, [pc, #176]	; (9b0 <setup+0x1f4>)
     900:	f00b fcfe 	bl	c300 <Print::println()>
  filing_init();
     904:	f001 f92a 	bl	1b5c <filing_init()>
     908:	210a      	movs	r1, #10
     90a:	482f      	ldr	r0, [pc, #188]	; (9c8 <setup+0x20c>)
     90c:	f00d fe62 	bl	e5d4 <usb_serial_write>
     910:	4827      	ldr	r0, [pc, #156]	; (9b0 <setup+0x1f4>)
     912:	f00b fcf5 	bl	c300 <Print::println()>
  setup_ready=1;
     916:	4b2d      	ldr	r3, [pc, #180]	; (9cc <setup+0x210>)
     918:	601c      	str	r4, [r3, #0]
    setup1();
     91a:	f7ff fd8f 	bl	43c <setup1()>
    pinMode(13,OUTPUT);
     91e:	4621      	mov	r1, r4
     920:	200d      	movs	r0, #13
     922:	f00c f897 	bl	ca54 <pinMode>
}
     926:	b007      	add	sp, #28
     928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     92c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     92e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     930:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     932:	b152      	cbz	r2, 94a <setup+0x18e>
				if (elapsed > 2000) break;
     934:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     938:	f63f af5f 	bhi.w	7fa <setup+0x3e>
			yield();
     93c:	f00d fec8 	bl	e6d0 <yield>
     940:	e74a      	b.n	7d8 <setup+0x1c>
     942:	682b      	ldr	r3, [r5, #0]
  while(millis()<10'000) if(Serial) { break;}
     944:	42b3      	cmp	r3, r6
     946:	d986      	bls.n	856 <setup+0x9a>
     948:	e794      	b.n	874 <setup+0xb8>
				if (elapsed > 750) break;
     94a:	4543      	cmp	r3, r8
     94c:	d9f6      	bls.n	93c <setup+0x180>
  uint16_t *params=loadParameters();
     94e:	f003 faf5 	bl	3f3c <loadParameters()>
  if(params[0]==1)
     952:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     954:	4607      	mov	r7, r0
  if(params[0]==1)
     956:	2b01      	cmp	r3, #1
     958:	f47f af56 	bne.w	808 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     95c:	4b1c      	ldr	r3, [pc, #112]	; (9d0 <setup+0x214>)
     95e:	4a1d      	ldr	r2, [pc, #116]	; (9d4 <setup+0x218>)
     960:	681b      	ldr	r3, [r3, #0]
     962:	6812      	ldr	r2, [r2, #0]
     964:	4293      	cmp	r3, r2
     966:	4a10      	ldr	r2, [pc, #64]	; (9a8 <setup+0x1ec>)
     968:	bf8c      	ite	hi
     96a:	2300      	movhi	r3, #0
     96c:	2301      	movls	r3, #1
     96e:	6013      	str	r3, [r2, #0]
     970:	e768      	b.n	844 <setup+0x88>
     972:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     974:	42b3      	cmp	r3, r6
     976:	f67f af50 	bls.w	81a <setup+0x5e>
     97a:	e763      	b.n	844 <setup+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     97c:	2114      	movs	r1, #20
     97e:	4816      	ldr	r0, [pc, #88]	; (9d8 <setup+0x21c>)
     980:	f00d fe28 	bl	e5d4 <usb_serial_write>
     984:	480a      	ldr	r0, [pc, #40]	; (9b0 <setup+0x1f4>)
     986:	f00b fcbb 	bl	c300 <Print::println()>
     98a:	e79c      	b.n	8c6 <setup+0x10a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     98c:	4908      	ldr	r1, [pc, #32]	; (9b0 <setup+0x1f4>)
     98e:	480a      	ldr	r0, [pc, #40]	; (9b8 <setup+0x1fc>)
     990:	f018 ff46 	bl	19820 <___ZNK16CrashReportClass7printToER5Print_veneer>
     994:	e785      	b.n	8a2 <setup+0xe6>
     996:	bf00      	nop
     998:	200432dc 	.word	0x200432dc
     99c:	02dc6c00 	.word	0x02dc6c00
     9a0:	20043330 	.word	0x20043330
     9a4:	2004332f 	.word	0x2004332f
     9a8:	200432ec 	.word	0x200432ec
     9ac:	2000094c 	.word	0x2000094c
     9b0:	20008a54 	.word	0x20008a54
     9b4:	20007f1c 	.word	0x20007f1c
     9b8:	20008a48 	.word	0x20008a48
     9bc:	20007f2c 	.word	0x20007f2c
     9c0:	20007f58 	.word	0x20007f58
     9c4:	20007f80 	.word	0x20007f80
     9c8:	20007f8c 	.word	0x20007f8c
     9cc:	2004311c 	.word	0x2004311c
     9d0:	20009038 	.word	0x20009038
     9d4:	20009034 	.word	0x20009034
     9d8:	20007f40 	.word	0x20007f40
     9dc:	200432f8 	.word	0x200432f8

000009e0 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9e0:	b510      	push	{r4, lr}
     9e2:	4604      	mov	r4, r0
		release();
     9e4:	f00b fbee 	bl	c1c4 <DMAChannel::release()>
	}
     9e8:	4620      	mov	r0, r4
     9ea:	bd10      	pop	{r4, pc}

000009ec <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     9ec:	4b2a      	ldr	r3, [pc, #168]	; (a98 <acq_isr()+0xac>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9ee:	4a2b      	ldr	r2, [pc, #172]	; (a9c <acq_isr()+0xb0>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9f0:	492b      	ldr	r1, [pc, #172]	; (aa0 <acq_isr()+0xb4>)
  {
     9f2:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     9f4:	681c      	ldr	r4, [r3, #0]
     9f6:	7918      	ldrb	r0, [r3, #4]
     9f8:	6923      	ldr	r3, [r4, #16]
     9fa:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9fc:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9fe:	bf28      	it	cs
     a00:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a04:	4696      	mov	lr, r2
	asm("dsb");
     a06:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     a0a:	f502 6180 	add.w	r1, r2, #1024	; 0x400
     a0e:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     a12:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
     a16:	4299      	cmp	r1, r3
     a18:	bf34      	ite	cc
     a1a:	2101      	movcc	r1, #1
     a1c:	2120      	movcs	r1, #32
     a1e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     a22:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     a24:	f8c0 2f5c 	str.w	r2, [r0, #3932]	; 0xf5c
		location += 32;
     a28:	461a      	mov	r2, r3
	} while (location < end_addr);
     a2a:	f103 0320 	add.w	r3, r3, #32
     a2e:	d1f8      	bne.n	a22 <acq_isr()+0x36>
	asm("dsb");
     a30:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a34:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a38:	491a      	ldr	r1, [pc, #104]	; (aa4 <acq_isr()+0xb8>)
    for(int ii=0; ii<NSAMP; ii++) 
     a3a:	2300      	movs	r3, #0
     a3c:	481a      	ldr	r0, [pc, #104]	; (aa8 <acq_isr()+0xbc>)
     a3e:	f10e 0404 	add.w	r4, lr, #4
{ procCount++;
     a42:	680a      	ldr	r2, [r1, #0]
     a44:	3201      	adds	r2, #1
     a46:	600a      	str	r2, [r1, #0]
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>SHIFT;   
     a48:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>SHIFT;   
     a4c:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
     a50:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>SHIFT;   
     a54:	1209      	asrs	r1, r1, #8
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>SHIFT;   
     a56:	1212      	asrs	r2, r2, #8
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>SHIFT;   
     a58:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
    for(int ii=0; ii<NSAMP; ii++) 
     a5c:	3301      	adds	r3, #1
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>SHIFT;   
     a5e:	f8cc 2004 	str.w	r2, [ip, #4]
    for(int ii=0; ii<NSAMP; ii++) 
     a62:	2b80      	cmp	r3, #128	; 0x80
     a64:	d1f0      	bne.n	a48 <acq_isr()+0x5c>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     a66:	4a11      	ldr	r2, [pc, #68]	; (aac <acq_isr()+0xc0>)
     a68:	8813      	ldrh	r3, [r2, #0]
     a6a:	b21b      	sxth	r3, r3
     a6c:	b123      	cbz	r3, a78 <acq_isr()+0x8c>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a6e:	8813      	ldrh	r3, [r2, #0]
     a70:	b21b      	sxth	r3, r3
     a72:	2b01      	cmp	r3, #1
     a74:	d00a      	beq.n	a8c <acq_isr()+0xa0>
  }
     a76:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a78:	480b      	ldr	r0, [pc, #44]	; (aa8 <acq_isr()+0xbc>)
     a7a:	f003 fd3f 	bl	44fc <pushData(unsigned long*)>
     a7e:	2800      	cmp	r0, #0
     a80:	d1f9      	bne.n	a76 <acq_isr()+0x8a>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a82:	4a0b      	ldr	r2, [pc, #44]	; (ab0 <acq_isr()+0xc4>)
     a84:	6813      	ldr	r3, [r2, #0]
     a86:	3301      	adds	r3, #1
     a88:	6013      	str	r3, [r2, #0]
  }
     a8a:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a8c:	4806      	ldr	r0, [pc, #24]	; (aa8 <acq_isr()+0xbc>)
     a8e:	f000 f9a5 	bl	ddc <compress(void*)>
     a92:	2800      	cmp	r0, #0
     a94:	d1ef      	bne.n	a76 <acq_isr()+0x8a>
     a96:	e7f4      	b.n	a82 <acq_isr()+0x96>
     a98:	200413dc 	.word	0x200413dc
     a9c:	20200400 	.word	0x20200400
     aa0:	400e8000 	.word	0x400e8000
     aa4:	20042b7c 	.word	0x20042b7c
     aa8:	200426bc 	.word	0x200426bc
     aac:	20043310 	.word	0x20043310
     ab0:	20042b80 	.word	0x20042b80
     ab4:	00000000 	.word	0x00000000

00000ab8 <setAudioFrequency(int)>:
  {
     ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     abc:	2105      	movs	r1, #5
     abe:	4681      	mov	r9, r0
     ac0:	4859      	ldr	r0, [pc, #356]	; (c28 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     ac2:	4f5a      	ldr	r7, [pc, #360]	; (c2c <setAudioFrequency(int)+0x174>)
     ac4:	ed2d 8b02 	vpush	{d8}
     ac8:	b083      	sub	sp, #12
     aca:	f00d fd83 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ace:	2180      	movs	r1, #128	; 0x80
     ad0:	4857      	ldr	r0, [pc, #348]	; (c30 <setAudioFrequency(int)+0x178>)
     ad2:	f00b fc09 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ad6:	4856      	ldr	r0, [pc, #344]	; (c30 <setAudioFrequency(int)+0x178>)
     ad8:	f00b fc12 	bl	c300 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     adc:	231a      	movs	r3, #26
     ade:	ea4f 10c9 	mov.w	r0, r9, lsl #7
    } while ((n2>64 && n0<54));
     ae2:	f8df c170 	ldr.w	ip, [pc, #368]	; c54 <setAudioFrequency(int)+0x19c>
    {   n0++;
     ae6:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ae8:	4602      	mov	r2, r0
        n1=0;
     aea:	2400      	movs	r4, #0
        {   n1++; 
     aec:	46a0      	mov	r8, r4
     aee:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     af0:	fb97 f6f2 	sdiv	r6, r7, r2
     af4:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     af6:	4402      	add	r2, r0
     af8:	2d40      	cmp	r5, #64	; 0x40
     afa:	bfd4      	ite	le
     afc:	2100      	movle	r1, #0
     afe:	2101      	movgt	r1, #1
     b00:	2c08      	cmp	r4, #8
     b02:	dc01      	bgt.n	b08 <setAudioFrequency(int)+0x50>
     b04:	2900      	cmp	r1, #0
     b06:	d1f1      	bne.n	aec <setAudioFrequency(int)+0x34>
    } while ((n2>64 && n0<54));
     b08:	2b35      	cmp	r3, #53	; 0x35
     b0a:	4467      	add	r7, ip
     b0c:	dc01      	bgt.n	b12 <setAudioFrequency(int)+0x5a>
     b0e:	2900      	cmp	r1, #0
     b10:	d1e9      	bne.n	ae6 <setAudioFrequency(int)+0x2e>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b12:	464a      	mov	r2, r9
     b14:	4947      	ldr	r1, [pc, #284]	; (c34 <setAudioFrequency(int)+0x17c>)
     b16:	4846      	ldr	r0, [pc, #280]	; (c30 <setAudioFrequency(int)+0x178>)
     b18:	e9cd 4500 	strd	r4, r5, [sp]
     b1c:	f00b fc0c 	bl	c338 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b20:	ee07 9a90 	vmov	s15, r9
     b24:	ee06 5a90 	vmov	s13, r5
     b28:	2103      	movs	r1, #3
     b2a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b2e:	ee07 4a90 	vmov	s15, r4
     b32:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b36:	4840      	ldr	r0, [pc, #256]	; (c38 <setAudioFrequency(int)+0x180>)
     b38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b3c:	ed9f 3b34 	vldr	d3, [pc, #208]	; c10 <setAudioFrequency(int)+0x158>
     b40:	ed9f 4b35 	vldr	d4, [pc, #212]	; c18 <setAudioFrequency(int)+0x160>
     b44:	ee25 5b03 	vmul.f64	d5, d5, d3
     b48:	ee25 7b07 	vmul.f64	d7, d5, d7
     b4c:	ee27 7b06 	vmul.f64	d7, d7, d6
     b50:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b54:	f00d fd3e 	bl	e5d4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b58:	2102      	movs	r1, #2
     b5a:	4835      	ldr	r0, [pc, #212]	; (c30 <setAudioFrequency(int)+0x178>)
     b5c:	eeb0 0b48 	vmov.f64	d0, d8
     b60:	f00b fc5e 	bl	c420 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b64:	4832      	ldr	r0, [pc, #200]	; (c30 <setAudioFrequency(int)+0x178>)
     b66:	f00b fbcb 	bl	c300 <Print::println()>
    int c0 = C;
     b6a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b6e:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b72:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b76:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b7e:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b82:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b86:	4a2d      	ldr	r2, [pc, #180]	; (c3c <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     b88:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b8c:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     b8e:	ed9f 6b24 	vldr	d6, [pc, #144]	; c20 <setAudioFrequency(int)+0x168>
     b92:	ee98 7b06 	vfnms.f64	d7, d8, d6
     b96:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     b9a:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b9e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     ba2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     ba6:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     baa:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     bb0:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bb2:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bb4:	2b00      	cmp	r3, #0
     bb6:	dafc      	bge.n	bb2 <setAudioFrequency(int)+0xfa>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bb8:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bbc:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc0:	481f      	ldr	r0, [pc, #124]	; (c40 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bc2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bc6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bca:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bcc:	491d      	ldr	r1, [pc, #116]	; (c44 <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bce:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bd2:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bd4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     bd8:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bda:	69ca      	ldr	r2, [r1, #28]
     bdc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be4:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     be6:	4a18      	ldr	r2, [pc, #96]	; (c48 <setAudioFrequency(int)+0x190>)
     be8:	6a88      	ldr	r0, [r1, #40]	; 0x28
     bea:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bec:	4817      	ldr	r0, [pc, #92]	; (c4c <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bee:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf0:	4a17      	ldr	r2, [pc, #92]	; (c50 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bf2:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bf4:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf6:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf8:	401a      	ands	r2, r3
     bfa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bfe:	6042      	str	r2, [r0, #4]
  }
     c00:	b003      	add	sp, #12
     c02:	ecbd 8b02 	vpop	{d8}
     c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c0a:	bf00      	nop
     c0c:	f3af 8000 	nop.w
     c10:	00000000 	.word	0x00000000
     c14:	40600000 	.word	0x40600000
     c18:	00000000 	.word	0x00000000
     c1c:	4176e360 	.word	0x4176e360
     c20:	00000000 	.word	0x00000000
     c24:	40c38800 	.word	0x40c38800
     c28:	200004f4 	.word	0x200004f4
     c2c:	269fb200 	.word	0x269fb200
     c30:	20008a54 	.word	0x20008a54
     c34:	200004fc 	.word	0x200004fc
     c38:	2000051c 	.word	0x2000051c
     c3c:	400d8000 	.word	0x400d8000
     c40:	ff7f7fff 	.word	0xff7f7fff
     c44:	400fc000 	.word	0x400fc000
     c48:	fffffe00 	.word	0xfffffe00
     c4c:	400ac000 	.word	0x400ac000
     c50:	fff7fff8 	.word	0xfff7fff8
     c54:	016e3600 	.word	0x016e3600

00000c58 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c58:	4a1a      	ldr	r2, [pc, #104]	; (cc4 <i2s_setup()+0x6c>)
     c5a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c5c:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c5e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c62:	4c19      	ldr	r4, [pc, #100]	; (cc8 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c64:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c66:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c6a:	2b00      	cmp	r3, #0
     c6c:	db28      	blt.n	cc0 <i2s_setup()+0x68>
    int fs = fsamp;
     c6e:	4b17      	ldr	r3, [pc, #92]	; (ccc <i2s_setup()+0x74>)
     c70:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c72:	f7ff ff21 	bl	ab8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c76:	4b16      	ldr	r3, [pc, #88]	; (cd0 <i2s_setup()+0x78>)
     c78:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c7a:	4916      	ldr	r1, [pc, #88]	; (cd4 <i2s_setup()+0x7c>)
     c7c:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c7e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c82:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c86:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c8a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c8e:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c90:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     c98:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c9a:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     c9e:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     ca2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     ca6:	490c      	ldr	r1, [pc, #48]	; (cd8 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     ca8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cac:	4a0b      	ldr	r2, [pc, #44]	; (cdc <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     cae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cb2:	4b0b      	ldr	r3, [pc, #44]	; (ce0 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cb4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cb8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cc0:	bd10      	pop	{r4, pc}
     cc2:	bf00      	nop
     cc4:	400fc000 	.word	0x400fc000
     cc8:	40384000 	.word	0x40384000
     ccc:	20009014 	.word	0x20009014
     cd0:	401f8000 	.word	0x401f8000
     cd4:	401f8400 	.word	0x401f8400
     cd8:	00011f1b 	.word	0x00011f1b
     cdc:	1f1f1f00 	.word	0x1f1f1f00
     ce0:	92000001 	.word	0x92000001

00000ce4 <dma_setup()>:
  {
     ce4:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     ce6:	4c1c      	ldr	r4, [pc, #112]	; (d58 <dma_setup()+0x74>)
     ce8:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     cea:	4d1c      	ldr	r5, [pc, #112]	; (d5c <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     cec:	4620      	mov	r0, r4
     cee:	f00b fa0f 	bl	c110 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cf2:	6823      	ldr	r3, [r4, #0]
     cf4:	481a      	ldr	r0, [pc, #104]	; (d60 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     cfa:	491a      	ldr	r1, [pc, #104]	; (d64 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cfc:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     cfe:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d00:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d02:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     d04:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d06:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d08:	4d17      	ldr	r5, [pc, #92]	; (d68 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     d0a:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d0c:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d0e:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d10:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d12:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d14:	2204      	movs	r2, #4
     d16:	4915      	ldr	r1, [pc, #84]	; (d6c <dma_setup()+0x88>)
     d18:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d1a:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d1c:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d1e:	4d14      	ldr	r5, [pc, #80]	; (d70 <dma_setup()+0x8c>)
     d20:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d22:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d26:	4b13      	ldr	r3, [pc, #76]	; (d74 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d28:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d2c:	2101      	movs	r1, #1
     d2e:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d30:	4811      	ldr	r0, [pc, #68]	; (d78 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d32:	f002 051f 	and.w	r5, r2, #31
     d36:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d3a:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3e:	40a9      	lsls	r1, r5
     d40:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d42:	4d0e      	ldr	r5, [pc, #56]	; (d7c <dma_setup()+0x98>)
     d44:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d48:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d4a:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d4c:	490c      	ldr	r1, [pc, #48]	; (d80 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d4e:	4b0d      	ldr	r3, [pc, #52]	; (d84 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d50:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d52:	7922      	ldrb	r2, [r4, #4]
     d54:	76da      	strb	r2, [r3, #27]
  }
     d56:	bd38      	pop	{r3, r4, r5, pc}
     d58:	200413dc 	.word	0x200413dc
     d5c:	02020000 	.word	0x02020000
     d60:	403840a0 	.word	0x403840a0
     d64:	20200000 	.word	0x20200000
     d68:	fffff800 	.word	0xfffff800
     d6c:	400ec000 	.word	0x400ec000
     d70:	80000013 	.word	0x80000013
     d74:	38003840 	.word	0x38003840
     d78:	20009400 	.word	0x20009400
     d7c:	000009ed 	.word	0x000009ed
     d80:	e000e400 	.word	0xe000e400
     d84:	400e8000 	.word	0x400e8000

00000d88 <acqModifyFrequency(unsigned long)>:
  {
     d88:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d8a:	4c08      	ldr	r4, [pc, #32]	; (dac <acqModifyFrequency(unsigned long)+0x24>)
     d8c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d90:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     d94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     d98:	f7ff fe8e 	bl	ab8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     d9c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     da0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     da4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     da8:	bd10      	pop	{r4, pc}
     daa:	bf00      	nop
     dac:	40384000 	.word	0x40384000

00000db0 <_GLOBAL__sub_I_procCount>:
		begin();
     db0:	4805      	ldr	r0, [pc, #20]	; (dc8 <_GLOBAL__sub_I_procCount+0x18>)
     db2:	2100      	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     db4:	b508      	push	{r3, lr}
     db6:	f00b f9ab 	bl	c110 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     dba:	4a04      	ldr	r2, [pc, #16]	; (dcc <_GLOBAL__sub_I_procCount+0x1c>)
     dbc:	4904      	ldr	r1, [pc, #16]	; (dd0 <_GLOBAL__sub_I_procCount+0x20>)
     dbe:	4802      	ldr	r0, [pc, #8]	; (dc8 <_GLOBAL__sub_I_procCount+0x18>)
}
     dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     dc4:	f00d be10 	b.w	e9e8 <__aeabi_atexit>
     dc8:	200413dc 	.word	0x200413dc
     dcc:	20008a70 	.word	0x20008a70
     dd0:	000009e1 	.word	0x000009e1

00000dd4 <adc_init()>:
        }
        Serial.println();
    }
#else
    // there is no ADC to be controlled
    void adc_init(void) {}
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop

00000dd8 <acqPower(int)>:
    void acqPower(int flag) {(void) flag;}
     dd8:	4770      	bx	lr
     dda:	bf00      	nop

00000ddc <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de0:	b083      	sub	sp, #12
     de2:	4605      	mov	r5, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     de4:	f00c f8ea 	bl	cfbc <rtc_get>
     de8:	4683      	mov	fp, r0
  uint32_t t1;
  t1 = micros();
     dea:	f00b fddf 	bl	c9ac <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
     dee:	4ba7      	ldr	r3, [pc, #668]	; (108c <compress(void*)+0x2b0>)
     df0:	1f2c      	subs	r4, r5, #4
  t1 = micros();
     df2:	4682      	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
     df4:	681a      	ldr	r2, [r3, #0]
     df6:	f505 757f 	add.w	r5, r5, #1020	; 0x3fc
     dfa:	4623      	mov	r3, r4
     dfc:	1f11      	subs	r1, r2, #4
     dfe:	f853 0f04 	ldr.w	r0, [r3, #4]!
     e02:	42ab      	cmp	r3, r5
     e04:	f841 0f04 	str.w	r0, [r1, #4]!
     e08:	d1f9      	bne.n	dfe <compress(void*)+0x22>
     e0a:	1d11      	adds	r1, r2, #4
     e0c:	f502 707f 	add.w	r0, r2, #1020	; 0x3fc
     e10:	460b      	mov	r3, r1
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
     e12:	f853 2f04 	ldr.w	r2, [r3, #4]!
     e16:	f854 5f04 	ldr.w	r5, [r4, #4]!
     e1a:	4298      	cmp	r0, r3
     e1c:	eba2 0205 	sub.w	r2, r2, r5
     e20:	601a      	str	r2, [r3, #0]
     e22:	d1f6      	bne.n	e12 <compress(void*)+0x36>

  // find maximum in filtered data 
  int32_t mx = 0;
     e24:	2200      	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
     e26:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
     e2a:	2b00      	cmp	r3, #0
     e2c:	bfb8      	it	lt
     e2e:	425b      	neglt	r3, r3
     e30:	429a      	cmp	r2, r3
     e32:	bfb8      	it	lt
     e34:	461a      	movlt	r2, r3
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
     e36:	4281      	cmp	r1, r0
     e38:	d1f5      	bne.n	e26 <compress(void*)+0x4a>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     e3a:	2702      	movs	r7, #2
     e3c:	2001      	movs	r0, #1
     e3e:	e003      	b.n	e48 <compress(void*)+0x6c>
     e40:	3701      	adds	r7, #1
     e42:	2f18      	cmp	r7, #24
     e44:	f000 8118 	beq.w	1078 <compress(void*)+0x29c>
     e48:	1e79      	subs	r1, r7, #1
     e4a:	fa00 f301 	lsl.w	r3, r0, r1
     e4e:	4293      	cmp	r3, r2
     e50:	ddf6      	ble.n	e40 <compress(void*)+0x64>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
     e52:	ea4f 08c7 	mov.w	r8, r7, lsl #3
  uint32_t msk = (1 << nb) - 1;
     e56:	40b8      	lsls	r0, r7
  int ndat = NH + NCHAN_ACQ + ncmp;
     e58:	f108 0308 	add.w	r3, r8, #8
  uint32_t msk = (1 << nb) - 1;
     e5c:	3801      	subs	r0, #1
  int ndat = NH + NCHAN_ACQ + ncmp;
     e5e:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
     e60:	f108 0302 	add.w	r3, r8, #2
  ndat= ((ndat>>1) + 1)<<1;
     e64:	f108 080a 	add.w	r8, r8, #10
  proc_stat[nb-1]++;
     e68:	4c89      	ldr	r4, [pc, #548]	; (1090 <compress(void*)+0x2b4>)
  if((uint32_t)nb>max_stat) max_stat=nb;
     e6a:	4d8a      	ldr	r5, [pc, #552]	; (1094 <compress(void*)+0x2b8>)
  proc_stat[nb-1]++;
     e6c:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
     e70:	3201      	adds	r2, #1
     e72:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
     e76:	682a      	ldr	r2, [r5, #0]
     e78:	42ba      	cmp	r2, r7
     e7a:	4a87      	ldr	r2, [pc, #540]	; (1098 <compress(void*)+0x2bc>)
     e7c:	f1a2 0904 	sub.w	r9, r2, #4
     e80:	bf38      	it	cc
     e82:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
     e84:	464c      	mov	r4, r9
     e86:	f509 767f 	add.w	r6, r9, #1020	; 0x3fc
     e8a:	f852 1f04 	ldr.w	r1, [r2, #4]!
     e8e:	4001      	ands	r1, r0
     e90:	42b2      	cmp	r2, r6
     e92:	6011      	str	r1, [r2, #0]
     e94:	d1f9      	bne.n	e8a <compress(void*)+0xae>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
     e96:	4d81      	ldr	r5, [pc, #516]	; (109c <compress(void*)+0x2c0>)
     e98:	f44f 7200 	mov.w	r2, #512	; 0x200
     e9c:	2100      	movs	r1, #0
     e9e:	9300      	str	r3, [sp, #0]
     ea0:	4628      	mov	r0, r5
     ea2:	f00f fea5 	bl	10bf0 <memset>
  *iptr++ = nb | shift<<16;
     ea6:	4a7e      	ldr	r2, [pc, #504]	; (10a0 <compress(void*)+0x2c4>)
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
     ea8:	2100      	movs	r1, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
     eaa:	9b00      	ldr	r3, [sp, #0]
  *iptr++ = nb | shift<<16;
     eac:	8812      	ldrh	r2, [r2, #0]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
     eae:	f04f 0c20 	mov.w	ip, #32
    outData[kk++] = tempData[1]; tempData[1] = 0;
     eb2:	2008      	movs	r0, #8
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
     eb4:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
     eb6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
     eba:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
     ebc:	f8d9 2000 	ldr.w	r2, [r9]
     ec0:	f8c9 1000 	str.w	r1, [r9]
     ec4:	61aa      	str	r2, [r5, #24]
    outData[kk++] = tempData[1]; tempData[1] = 0;
     ec6:	f8d9 2004 	ldr.w	r2, [r9, #4]
     eca:	f8c9 1004 	str.w	r1, [r9, #4]
     ece:	61ea      	str	r2, [r5, #28]
  *iptr++ = 0xA5A5A5A5;
     ed0:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     ed4:	602a      	str	r2, [r5, #0]
  *iptr++ = NCHAN_ACQ;
     ed6:	2202      	movs	r2, #2
  *iptr++ = t1;
     ed8:	e9c5 ba02 	strd	fp, sl, [r5, #8]
  *iptr++ = NCHAN_ACQ;
     edc:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     ede:	e00a      	b.n	ef6 <compress(void*)+0x11a>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
     ee0:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
     ee4:	4694      	mov	ip, r2
     ee6:	ea41 010e 	orr.w	r1, r1, lr
     eea:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     eee:	42a6      	cmp	r6, r4
     ef0:	d018      	beq.n	f24 <compress(void*)+0x148>
      {   outData[kk] |= (tempData[ii] << nx);
     ef2:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
     ef6:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
     efa:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
     efc:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
     f00:	dcee      	bgt.n	ee0 <compress(void*)+0x104>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f02:	eba7 0e0c 	sub.w	lr, r7, ip
     f06:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
     f0a:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
     f0e:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
     f12:	d130      	bne.n	f76 <compress(void*)+0x19a>
      {   outData[kk++] |= tempData[ii];
     f14:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     f16:	42a6      	cmp	r6, r4
          nx=MBIT;
     f18:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
     f1c:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     f20:	4648      	mov	r0, r9
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
     f22:	d1e6      	bne.n	ef2 <compress(void*)+0x116>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
     f24:	4e5f      	ldr	r6, [pc, #380]	; (10a4 <compress(void*)+0x2c8>)
     f26:	6834      	ldr	r4, [r6, #0]
     f28:	eb04 0208 	add.w	r2, r4, r8
     f2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
     f30:	dc2d      	bgt.n	f8e <compress(void*)+0x1b2>
     f32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     f36:	4a5c      	ldr	r2, [pc, #368]	; (10a8 <compress(void*)+0x2cc>)
     f38:	4858      	ldr	r0, [pc, #352]	; (109c <compress(void*)+0x2c0>)
     f3a:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
     f3e:	4423      	add	r3, r4
     f40:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     f44:	2300      	movs	r3, #0
     f46:	e001      	b.n	f4c <compress(void*)+0x170>
     f48:	f850 1f04 	ldr.w	r1, [r0, #4]!
     f4c:	3301      	adds	r3, #1
     f4e:	f842 1f04 	str.w	r1, [r2, #4]!
     f52:	4543      	cmp	r3, r8
     f54:	dbf8      	blt.n	f48 <compress(void*)+0x16c>
     f56:	f1b8 0f00 	cmp.w	r8, #0
     f5a:	f108 33ff 	add.w	r3, r8, #4294967295
     f5e:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
     f62:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
     f66:	bfd8      	it	le
     f68:	2300      	movle	r3, #0
     f6a:	4423      	add	r3, r4
     f6c:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
     f6e:	4638      	mov	r0, r7
     f70:	b003      	add	sp, #12
     f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f76:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
     f7a:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
     f7e:	ea4e 0202 	orr.w	r2, lr, r2
     f82:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
     f86:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
     f88:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
     f8c:	e7af      	b.n	eee <compress(void*)+0x112>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
     f8e:	2cfa      	cmp	r4, #250	; 0xfa
     f90:	dd23      	ble.n	fda <compress(void*)+0x1fe>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
     f92:	2cff      	cmp	r4, #255	; 0xff
     f94:	dc0b      	bgt.n	fae <compress(void*)+0x1d2>
     f96:	f5c4 7280 	rsb	r2, r4, #256	; 0x100
     f9a:	4843      	ldr	r0, [pc, #268]	; (10a8 <compress(void*)+0x2cc>)
     f9c:	2100      	movs	r1, #0
     f9e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fa2:	0092      	lsls	r2, r2, #2
     fa4:	f00f fe24 	bl	10bf0 <memset>
     fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
     fac:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
     fae:	483e      	ldr	r0, [pc, #248]	; (10a8 <compress(void*)+0x2cc>)
     fb0:	f003 faa4 	bl	44fc <pushData(unsigned long*)>
     fb4:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     fb6:	ea4f 0288 	mov.w	r2, r8, lsl #2
     fba:	4938      	ldr	r1, [pc, #224]	; (109c <compress(void*)+0x2c0>)
      if(!pushData(dout)) ret = 0;
     fbc:	bf18      	it	ne
     fbe:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
     fc0:	f1b8 0f00 	cmp.w	r8, #0
     fc4:	4838      	ldr	r0, [pc, #224]	; (10a8 <compress(void*)+0x2cc>)
     fc6:	bfd8      	it	le
     fc8:	2204      	movle	r2, #4
     fca:	f00b fd83 	bl	cad4 <memcpy>
}
     fce:	4638      	mov	r0, r7
     fd0:	f8c6 8000 	str.w	r8, [r6]
     fd4:	b003      	add	sp, #12
     fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
     fda:	f1c4 02fa 	rsb	r2, r4, #250	; 0xfa
     fde:	4832      	ldr	r0, [pc, #200]	; (10a8 <compress(void*)+0x2cc>)
     fe0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     fe4:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
     fe8:	616b      	str	r3, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
     fea:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
     fee:	4d2b      	ldr	r5, [pc, #172]	; (109c <compress(void*)+0x2c0>)
     ff0:	4423      	add	r3, r4
     ff2:	4629      	mov	r1, r5
     ff4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     ff8:	f500 707f 	add.w	r0, r0, #1020	; 0x3fc
     ffc:	e001      	b.n	1002 <compress(void*)+0x226>
     ffe:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1002:	f843 2f04 	str.w	r2, [r3, #4]!
    1006:	4298      	cmp	r0, r3
    1008:	d1f9      	bne.n	ffe <compress(void*)+0x222>
    100a:	f44f 7380 	mov.w	r3, #256	; 0x100
      if(!pushData(dout)) ret = 0;
    100e:	4826      	ldr	r0, [pc, #152]	; (10a8 <compress(void*)+0x2cc>)
    1010:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
    1014:	6033      	str	r3, [r6, #0]
    1016:	f003 fa71 	bl	44fc <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    101a:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
    101c:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
    101e:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    1020:	4a22      	ldr	r2, [pc, #136]	; (10ac <compress(void*)+0x2d0>)
      if(!pushData(dout)) ret = 0;
    1022:	bf18      	it	ne
    1024:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
    1026:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    102a:	f8df e070 	ldr.w	lr, [pc, #112]	; 109c <compress(void*)+0x2c0>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    102e:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1030:	f8df c074 	ldr.w	ip, [pc, #116]	; 10a8 <compress(void*)+0x2cc>
      while (ii < ndat) dout[nout++] = outData[ii++];
    1034:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    1036:	ea42 0203 	orr.w	r2, r2, r3
    103a:	f04f 0306 	mov.w	r3, #6
    103e:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    1040:	6033      	str	r3, [r6, #0]
    1042:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1046:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    104a:	e89e 0003 	ldmia.w	lr, {r0, r1}
    104e:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    1052:	da8c      	bge.n	f6e <compress(void*)+0x192>
    1054:	f5a4 7280 	sub.w	r2, r4, #256	; 0x100
    1058:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    105c:	f10c 0008 	add.w	r0, ip, #8
    1060:	4442      	add	r2, r8
    1062:	0092      	lsls	r2, r2, #2
    1064:	f00b fd36 	bl	cad4 <memcpy>
    1068:	f1a4 03fa 	sub.w	r3, r4, #250	; 0xfa
}
    106c:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    106e:	4443      	add	r3, r8
    1070:	6033      	str	r3, [r6, #0]
}
    1072:	b003      	add	sp, #12
    1074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1078:	22c8      	movs	r2, #200	; 0xc8
    107a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    107e:	f04f 08ca 	mov.w	r8, #202	; 0xca
    1082:	23c2      	movs	r3, #194	; 0xc2
    1084:	2117      	movs	r1, #23
    1086:	9201      	str	r2, [sp, #4]
    1088:	e6ee      	b.n	e68 <compress(void*)+0x8c>
    108a:	bf00      	nop
    108c:	2000903c 	.word	0x2000903c
    1090:	20042b84 	.word	0x20042b84
    1094:	20042b58 	.word	0x20042b58
    1098:	20041ed8 	.word	0x20041ed8
    109c:	20041884 	.word	0x20041884
    10a0:	20009056 	.word	0x20009056
    10a4:	20042328 	.word	0x20042328
    10a8:	200413e4 	.word	0x200413e4
    10ac:	ffff0000 	.word	0xffff0000

000010b0 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    10b0:	b570      	push	{r4, r5, r6, lr}
    10b2:	b082      	sub	sp, #8
    10b4:	4606      	mov	r6, r0
    10b6:	4614      	mov	r4, r2
    10b8:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    10ba:	4668      	mov	r0, sp
    10bc:	f003 fbc0 	bl	4840 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    10c0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    10c4:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    10c8:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    10cc:	2a0c      	cmp	r2, #12
    10ce:	bf98      	it	ls
    10d0:	f1bc 0f1f 	cmpls.w	ip, #31
    10d4:	d804      	bhi.n	10e0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    10d6:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    10da:	b29b      	uxth	r3, r3
    10dc:	2b7f      	cmp	r3, #127	; 0x7f
    10de:	d920      	bls.n	1122 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    10e0:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    10e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    10e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    10ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    10f0:	2a17      	cmp	r2, #23
    10f2:	bf98      	it	ls
    10f4:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    10f6:	f8a6 c000 	strh.w	ip, [r6]
    10fa:	d801      	bhi.n	1100 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    10fc:	293b      	cmp	r1, #59	; 0x3b
    10fe:	d905      	bls.n	110c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    1100:	2300      	movs	r3, #0
    *ms10 = 0;
    1102:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    1104:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    1106:	7022      	strb	r2, [r4, #0]
}
    1108:	b002      	add	sp, #8
    110a:	bd70      	pop	{r4, r5, r6, pc}
    110c:	015b      	lsls	r3, r3, #5
    110e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    1112:	2200      	movs	r2, #0
    1114:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    1118:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    111a:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    111c:	7022      	strb	r2, [r4, #0]
}
    111e:	b002      	add	sp, #8
    1120:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    1122:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    1126:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    112a:	fa1f fc8c 	uxth.w	ip, ip
    112e:	e7d9      	b.n	10e4 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

00001130 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    1130:	4b04      	ldr	r3, [pc, #16]	; (1144 <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1132:	b510      	push	{r4, lr}
    1134:	4604      	mov	r4, r0
    1136:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    113a:	f008 fc39 	bl	99b0 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    113e:	4620      	mov	r0, r4
    1140:	bd10      	pop	{r4, pc}
    1142:	bf00      	nop
    1144:	20000b3c 	.word	0x20000b3c

00001148 <checkEndOfFile(short) [clone .part.0]>:

    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    1148:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  {
    uint32_t tt = rtc_get();
    114a:	f00b ff37 	bl	cfbc <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    114e:	4b10      	ldr	r3, [pc, #64]	; (1190 <checkEndOfFile(short) [clone .part.0]+0x48>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1150:	4a10      	ldr	r2, [pc, #64]	; (1194 <checkEndOfFile(short) [clone .part.0]+0x4c>)
    uint32_t dt1 = tt % t_acq;
    1152:	6819      	ldr	r1, [r3, #0]
    1154:	fbb0 f3f1 	udiv	r3, r0, r1
    1158:	fb01 0313 	mls	r3, r1, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    115c:	6811      	ldr	r1, [r2, #0]
    115e:	428b      	cmp	r3, r1
    1160:	d213      	bcs.n	118a <checkEndOfFile(short) [clone .part.0]+0x42>
    dta = dt1;
    1162:	6013      	str	r3, [r2, #0]
    //
    if(state == DOCLOSE)                // in case of DOCLOSE
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    1164:	490c      	ldr	r1, [pc, #48]	; (1198 <checkEndOfFile(short) [clone .part.0]+0x50>)
    1166:	4b0d      	ldr	r3, [pc, #52]	; (119c <checkEndOfFile(short) [clone .part.0]+0x54>)
    1168:	680c      	ldr	r4, [r1, #0]
    116a:	681a      	ldr	r2, [r3, #0]
    116c:	4294      	cmp	r4, r2
    116e:	d90a      	bls.n	1186 <checkEndOfFile(short) [clone .part.0]+0x3e>
    {
      uint32_t dt2 = (tt % t_rep);
    1170:	680a      	ldr	r2, [r1, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1172:	681b      	ldr	r3, [r3, #0]
      uint32_t dt2 = (tt % t_rep);
    1174:	fbb0 f1f2 	udiv	r1, r0, r2
    1178:	fb02 0011 	mls	r0, r2, r1, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    117c:	4298      	cmp	r0, r3
    117e:	bf34      	ite	cc
    1180:	2003      	movcc	r0, #3
    1182:	2004      	movcs	r0, #4
    }
  }
  return state;

}
    1184:	bd10      	pop	{r4, pc}
    1186:	2003      	movs	r0, #3
    1188:	bd10      	pop	{r4, pc}
    dta = dt1;
    118a:	2002      	movs	r0, #2
    118c:	6013      	str	r3, [r2, #0]
}
    118e:	bd10      	pop	{r4, pc}
    1190:	20009030 	.word	0x20009030
    1194:	2004231c 	.word	0x2004231c
    1198:	20009038 	.word	0x20009038
    119c:	20009034 	.word	0x20009034

000011a0 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    11a0:	b538      	push	{r3, r4, r5, lr}
    11a2:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    11a4:	b149      	cbz	r1, 11ba <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    11a6:	4608      	mov	r0, r1
    11a8:	460d      	mov	r5, r1
    11aa:	f010 f909 	bl	113c0 <strlen>
    11ae:	6823      	ldr	r3, [r4, #0]
    11b0:	4602      	mov	r2, r0
    11b2:	4629      	mov	r1, r5
    11b4:	685b      	ldr	r3, [r3, #4]
    11b6:	4620      	mov	r0, r4
    11b8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    11ba:	4620      	mov	r0, r4
    11bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    11c0:	f00b b89e 	b.w	c300 <Print::println()>

000011c4 <timeStamp()>:
{
    11c4:	b510      	push	{r4, lr}
    11c6:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    11c8:	4c0d      	ldr	r4, [pc, #52]	; (1200 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    11ca:	a804      	add	r0, sp, #16
    11cc:	f003 fb38 	bl	4840 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    11d0:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    11d4:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    11d8:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    11dc:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    11e0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    11e4:	e9cd 1000 	strd	r1, r0, [sp]
    11e8:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    11ec:	4620      	mov	r0, r4
    11ee:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    11f2:	4904      	ldr	r1, [pc, #16]	; (1204 <timeStamp()+0x40>)
    11f4:	f00f fb56 	bl	108a4 <sprintf>
}
    11f8:	4620      	mov	r0, r4
    11fa:	b006      	add	sp, #24
    11fc:	bd10      	pop	{r4, pc}
    11fe:	bf00      	nop
    1200:	2004232c 	.word	0x2004232c
    1204:	200007c4 	.word	0x200007c4

00001208 <headerInit(long, long, long, int)>:
  int nbytes=nbits/8;
    1208:	2a00      	cmp	r2, #0
    120a:	bfb4      	ite	lt
    120c:	f102 0c07 	addlt.w	ip, r2, #7
    1210:	4694      	movge	ip, r2
{
    1212:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
    1214:	ea4f 0cec 	mov.w	ip, ip, asr #3
  memcpy(wav_hdr.rId,"RIFF",4);
    1218:	4c30      	ldr	r4, [pc, #192]	; (12dc <headerInit(long, long, long, int)+0xd4>)
{
    121a:	b083      	sub	sp, #12
  wav_hdr.nChannels=nchan;
    121c:	fa1f fe81 	uxth.w	lr, r1
  wav_hdr.nSamplesPerSec=fsamp;
    1220:	61a0      	str	r0, [r4, #24]
    1222:	9301      	str	r3, [sp, #4]
  wav_hdr.nChannels=nchan;
    1224:	f8a4 e016 	strh.w	lr, [r4, #22]
  wav_hdr.nBlockAlign=nchan*nbytes;
    1228:	fb1c fe0e 	smulbb	lr, ip, lr
  strcpy(&wav_hdr.info[0], MAGIC);
    122c:	4b2c      	ldr	r3, [pc, #176]	; (12e0 <headerInit(long, long, long, int)+0xd8>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    122e:	fb00 fc0c 	mul.w	ip, r0, ip
  wav_hdr.nBlockAlign=nchan*nbytes;
    1232:	f8a4 e020 	strh.w	lr, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    1236:	fb01 f50c 	mul.w	r5, r1, ip
  wav_hdr.nBitsPerSamples=nbits;
    123a:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    123c:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    123e:	e893 0003 	ldmia.w	r3, {r0, r1}
  memcpy(wav_hdr.wId,"WAVE",4);
    1242:	4b28      	ldr	r3, [pc, #160]	; (12e4 <headerInit(long, long, long, int)+0xdc>)
  strcpy(&wav_hdr.info[0], MAGIC);
    1244:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  memcpy(wav_hdr.wId,"WAVE",4);
    1248:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.dId,"data",4);
    124a:	4b27      	ldr	r3, [pc, #156]	; (12e8 <headerInit(long, long, long, int)+0xe0>)
  memcpy(wav_hdr.rId,"RIFF",4);
    124c:	4927      	ldr	r1, [pc, #156]	; (12ec <headerInit(long, long, long, int)+0xe4>)
  memcpy(wav_hdr.dId,"data",4);
    124e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    1252:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
    1256:	62e0      	str	r0, [r4, #44]	; 0x2c
  memcpy(wav_hdr.rId,"RIFF",4);
    1258:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    125a:	6063      	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    125c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
  memcpy(wav_hdr.fId,"fmt ",4);
    1260:	4823      	ldr	r0, [pc, #140]	; (12f0 <headerInit(long, long, long, int)+0xe8>)
  memcpy(wav_hdr.iId,"info",4);
    1262:	4924      	ldr	r1, [pc, #144]	; (12f4 <headerInit(long, long, long, int)+0xec>)
  memcpy(wav_hdr.fId,"fmt ",4);
    1264:	60e0      	str	r0, [r4, #12]
  wav_hdr.fLen = 0x10;
    1266:	2010      	movs	r0, #16
  memcpy(wav_hdr.iId,"info",4);
    1268:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.dLen = 0; // will be updated at closing
    126a:	2100      	movs	r1, #0
  wav_hdr.iLen = 512 - 13*4;
    126c:	62a3      	str	r3, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    126e:	2301      	movs	r3, #1
  wav_hdr.dLen = 0; // will be updated at closing
    1270:	f8c4 11fc 	str.w	r1, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    1274:	82a3      	strh	r3, [r4, #20]
  wav_hdr.fLen = 0x10;
    1276:	6120      	str	r0, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
    1278:	f7ff ffa4 	bl	11c4 <timeStamp()>
    127c:	4601      	mov	r1, r0
    127e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    1282:	f00f ffeb 	bl	1125c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    1286:	9a01      	ldr	r2, [sp, #4]
    1288:	491b      	ldr	r1, [pc, #108]	; (12f8 <headerInit(long, long, long, int)+0xf0>)
    128a:	f104 0040 	add.w	r0, r4, #64	; 0x40
    128e:	f00f fb09 	bl	108a4 <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    1292:	f003 f91b 	bl	44cc <getStore()>
    1296:	6805      	ldr	r5, [r0, #0]
    1298:	6841      	ldr	r1, [r0, #4]
    129a:	6882      	ldr	r2, [r0, #8]
    129c:	68c3      	ldr	r3, [r0, #12]
    129e:	f8c4 504a 	str.w	r5, [r4, #74]	; 0x4a
    12a2:	f8c4 104e 	str.w	r1, [r4, #78]	; 0x4e
    12a6:	f8c4 2052 	str.w	r2, [r4, #82]	; 0x52
    12aa:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
    12ae:	6905      	ldr	r5, [r0, #16]
    12b0:	6982      	ldr	r2, [r0, #24]
    12b2:	6941      	ldr	r1, [r0, #20]
    12b4:	69c3      	ldr	r3, [r0, #28]
    12b6:	f8c4 505a 	str.w	r5, [r4, #90]	; 0x5a
  strcpy(&wav_hdr.info[62]," end");
    12ba:	4d10      	ldr	r5, [pc, #64]	; (12fc <headerInit(long, long, long, int)+0xf4>)
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    12bc:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
  strcpy(&wav_hdr.info[62]," end");
    12c0:	6828      	ldr	r0, [r5, #0]
    12c2:	792a      	ldrb	r2, [r5, #4]
    12c4:	f8c4 006a 	str.w	r0, [r4, #106]	; 0x6a
}
    12c8:	4620      	mov	r0, r4
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    12ca:	f8c4 105e 	str.w	r1, [r4, #94]	; 0x5e
    12ce:	f8c4 3066 	str.w	r3, [r4, #102]	; 0x66
  strcpy(&wav_hdr.info[62]," end");
    12d2:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
}
    12d6:	b003      	add	sp, #12
    12d8:	bd30      	pop	{r4, r5, pc}
    12da:	bf00      	nop
    12dc:	20041c84 	.word	0x20041c84
    12e0:	20000418 	.word	0x20000418
    12e4:	45564157 	.word	0x45564157
    12e8:	61746164 	.word	0x61746164
    12ec:	46464952 	.word	0x46464952
    12f0:	20746d66 	.word	0x20746d66
    12f4:	6f666e69 	.word	0x6f666e69
    12f8:	20000420 	.word	0x20000420
    12fc:	20000428 	.word	0x20000428

00001300 <writeHeader(char*)>:
{ 
    1300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    1304:	4c21      	ldr	r4, [pc, #132]	; (138c <writeHeader(char*)+0x8c>)
    1306:	4607      	mov	r7, r0
    1308:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    130a:	b373      	cbz	r3, 136a <writeHeader(char*)+0x6a>
    130c:	695e      	ldr	r6, [r3, #20]
    130e:	2500      	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    1310:	4632      	mov	r2, r6
    1312:	462b      	mov	r3, r5
    1314:	491e      	ldr	r1, [pc, #120]	; (1390 <writeHeader(char*)+0x90>)
    1316:	481f      	ldr	r0, [pc, #124]	; (1394 <writeHeader(char*)+0x94>)
    1318:	f00b f80e 	bl	c338 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    131c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    131e:	b1e0      	cbz	r0, 135a <writeHeader(char*)+0x5a>
    1320:	2100      	movs	r1, #0
    1322:	f007 f813 	bl	834c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    1326:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1328:	b170      	cbz	r0, 1348 <writeHeader(char*)+0x48>
    132a:	4639      	mov	r1, r7
    132c:	f44f 7200 	mov.w	r2, #512	; 0x200
    1330:	f007 f942 	bl	85b8 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1334:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    1336:	b1e8      	cbz	r0, 1374 <writeHeader(char*)+0x74>
    1338:	b10d      	cbz	r5, 133e <writeHeader(char*)+0x3e>
}
    133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    133e:	4631      	mov	r1, r6
    1340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1344:	f007 b802 	b.w	834c <FatFile::seekSet(unsigned long)>
    1348:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    134a:	2800      	cmp	r0, #0
    134c:	d0f5      	beq.n	133a <writeHeader(char*)+0x3a>
    134e:	4639      	mov	r1, r7
    1350:	f44f 7200 	mov.w	r2, #512	; 0x200
    1354:	f005 fe20 	bl	6f98 <ExFatFile::write(void const*, unsigned int)>
    1358:	e7ec      	b.n	1334 <writeHeader(char*)+0x34>
    135a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    135c:	2800      	cmp	r0, #0
    135e:	d0ec      	beq.n	133a <writeHeader(char*)+0x3a>
    1360:	2200      	movs	r2, #0
    1362:	2300      	movs	r3, #0
    1364:	f004 ffe8 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    1368:	e7dd      	b.n	1326 <writeHeader(char*)+0x26>
    136a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    136c:	b15b      	cbz	r3, 1386 <writeHeader(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    136e:	e9d3 6500 	ldrd	r6, r5, [r3]
    1372:	e7cd      	b.n	1310 <writeHeader(char*)+0x10>
    1374:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    1376:	2800      	cmp	r0, #0
    1378:	d0df      	beq.n	133a <writeHeader(char*)+0x3a>
    137a:	4632      	mov	r2, r6
    137c:	462b      	mov	r3, r5
    137e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1382:	f004 bfd9 	b.w	6338 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    1386:	461e      	mov	r6, r3
    1388:	461d      	mov	r5, r3
    138a:	e7c1      	b.n	1310 <writeHeader(char*)+0x10>
    138c:	20042ae4 	.word	0x20042ae4
    1390:	200004c8 	.word	0x200004c8
    1394:	20008a54 	.word	0x20008a54

00001398 <makeHeader(long*)>:
{
    1398:	b530      	push	{r4, r5, lr}
    139a:	b089      	sub	sp, #36	; 0x24
    139c:	4604      	mov	r4, r0
    rtc_get_datetime(&t);
    139e:	a806      	add	r0, sp, #24
    13a0:	f003 fa4e 	bl	4840 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    13a4:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    13a8:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    13ac:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    13b0:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    13b4:	e9cd 3003 	strd	r3, r0, [sp, #12]
    13b8:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    13bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    13c0:	9000      	str	r0, [sp, #0]
    13c2:	4620      	mov	r0, r4
    13c4:	e9cd 2101 	strd	r2, r1, [sp, #4]
    13c8:	4a16      	ldr	r2, [pc, #88]	; (1424 <makeHeader(long*)+0x8c>)
    13ca:	4917      	ldr	r1, [pc, #92]	; (1428 <makeHeader(long*)+0x90>)
    13cc:	f00f fa6a 	bl	108a4 <sprintf>
    header[7] = fsamp;
    13d0:	4916      	ldr	r1, [pc, #88]	; (142c <makeHeader(long*)+0x94>)
    header[9] = t_acq;
    13d2:	4b17      	ldr	r3, [pc, #92]	; (1430 <makeHeader(long*)+0x98>)
    header[7] = fsamp;
    13d4:	680d      	ldr	r5, [r1, #0]
    header[9] = t_acq;
    13d6:	681b      	ldr	r3, [r3, #0]
    header[10] = t_on;
    13d8:	4816      	ldr	r0, [pc, #88]	; (1434 <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
    13da:	6263      	str	r3, [r4, #36]	; 0x24
    header[11] = t_rep;
    13dc:	4a16      	ldr	r2, [pc, #88]	; (1438 <makeHeader(long*)+0xa0>)
    header[6] = SerNum;      // serial number
    13de:	4917      	ldr	r1, [pc, #92]	; (143c <makeHeader(long*)+0xa4>)
    header[12] = proc;
    13e0:	4b17      	ldr	r3, [pc, #92]	; (1440 <makeHeader(long*)+0xa8>)
    header[10] = t_on;
    13e2:	6800      	ldr	r0, [r0, #0]
    header[6] = SerNum;      // serial number
    13e4:	6809      	ldr	r1, [r1, #0]
    header[11] = t_rep;
    13e6:	6812      	ldr	r2, [r2, #0]
    header[12] = proc;
    13e8:	881b      	ldrh	r3, [r3, #0]
    header[6] = SerNum;      // serial number
    13ea:	61a1      	str	r1, [r4, #24]
    header[12] = proc;
    13ec:	b21b      	sxth	r3, r3
    header[14] = again;
    13ee:	4915      	ldr	r1, [pc, #84]	; (1444 <makeHeader(long*)+0xac>)
    header[11] = t_rep;
    13f0:	62e2      	str	r2, [r4, #44]	; 0x2c
    header[13] = shift;
    13f2:	4a15      	ldr	r2, [pc, #84]	; (1448 <makeHeader(long*)+0xb0>)
    header[12] = proc;
    13f4:	6323      	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    13f6:	8812      	ldrh	r2, [r2, #0]
    header[14] = again;
    13f8:	880b      	ldrh	r3, [r1, #0]
    header[15] = dgain;
    13fa:	4914      	ldr	r1, [pc, #80]	; (144c <makeHeader(long*)+0xb4>)
    header[13] = shift;
    13fc:	b212      	sxth	r2, r2
    header[14] = again;
    13fe:	b21b      	sxth	r3, r3
    header[10] = t_on;
    1400:	62a0      	str	r0, [r4, #40]	; 0x28
    header[8] = NCHAN_ACQ;
    1402:	2002      	movs	r0, #2
    header[7] = fsamp;
    1404:	61e5      	str	r5, [r4, #28]
    header[14] = again;
    1406:	63a3      	str	r3, [r4, #56]	; 0x38
    header[5] = 20;          // SW version
    1408:	2514      	movs	r5, #20
    header[15] = dgain;
    140a:	880b      	ldrh	r3, [r1, #0]
    header[8] = NCHAN_ACQ;
    140c:	6220      	str	r0, [r4, #32]
}
    140e:	2001      	movs	r0, #1
    header[15] = dgain;
    1410:	b21b      	sxth	r3, r3
    header[13] = shift;
    1412:	6362      	str	r2, [r4, #52]	; 0x34
    header[127]=0x55555555;
    1414:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    1418:	6165      	str	r5, [r4, #20]
    header[15] = dgain;
    141a:	63e3      	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    141c:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
}
    1420:	b009      	add	sp, #36	; 0x24
    1422:	bd30      	pop	{r4, r5, pc}
    1424:	20000418 	.word	0x20000418
    1428:	20000430 	.word	0x20000430
    142c:	20009014 	.word	0x20009014
    1430:	20009030 	.word	0x20009030
    1434:	20009034 	.word	0x20009034
    1438:	20009038 	.word	0x20009038
    143c:	2000bdc8 	.word	0x2000bdc8
    1440:	20043310 	.word	0x20043310
    1444:	20043308 	.word	0x20043308
    1448:	20009056 	.word	0x20009056
    144c:	2004330a 	.word	0x2004330a

00001450 <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    1450:	b530      	push	{r4, r5, lr}
    1452:	b087      	sub	sp, #28
    1454:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1456:	a804      	add	r0, sp, #16
    1458:	f003 f9f2 	bl	4840 <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    145c:	4915      	ldr	r1, [pc, #84]	; (14b4 <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    145e:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(d==d0) return 0; // same day
    1462:	680b      	ldr	r3, [r1, #0]
    1464:	429a      	cmp	r2, r3
    1466:	d022      	beq.n	14ae <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1468:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    146c:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    1470:	4b11      	ldr	r3, [pc, #68]	; (14b8 <newDirectory(char*)+0x68>)
    1472:	e9cd 5202 	strd	r5, r2, [sp, #8]
    1476:	681b      	ldr	r3, [r3, #0]
    1478:	9001      	str	r0, [sp, #4]
    147a:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  d0=d;
    147e:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1480:	4a0e      	ldr	r2, [pc, #56]	; (14bc <newDirectory(char*)+0x6c>)
    1482:	490f      	ldr	r1, [pc, #60]	; (14c0 <newDirectory(char*)+0x70>)
    1484:	9000      	str	r0, [sp, #0]
    1486:	4620      	mov	r0, r4
    1488:	f00f fa0c 	bl	108a4 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    148c:	480d      	ldr	r0, [pc, #52]	; (14c4 <newDirectory(char*)+0x74>)
    148e:	f00a ff37 	bl	c300 <Print::println()>
    1492:	2102      	movs	r1, #2
    1494:	480c      	ldr	r0, [pc, #48]	; (14c8 <newDirectory(char*)+0x78>)
    1496:	f00d f89d 	bl	e5d4 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    149a:	4620      	mov	r0, r4
    149c:	f00f ff90 	bl	113c0 <strlen>
    14a0:	4601      	mov	r1, r0
    14a2:	4620      	mov	r0, r4
    14a4:	f00d f896 	bl	e5d4 <usb_serial_write>
          return 1;   // have new directory
    14a8:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    14aa:	b007      	add	sp, #28
    14ac:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    14ae:	2000      	movs	r0, #0
}
    14b0:	b007      	add	sp, #28
    14b2:	bd30      	pop	{r4, r5, pc}
    14b4:	20008a64 	.word	0x20008a64
    14b8:	2000bdc8 	.word	0x2000bdc8
    14bc:	200004d4 	.word	0x200004d4
    14c0:	200004d8 	.word	0x200004d8
    14c4:	20008a54 	.word	0x20008a54
    14c8:	200009a4 	.word	0x200009a4

000014cc <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    14cc:	b510      	push	{r4, lr}
    14ce:	b088      	sub	sp, #32
    14d0:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    14d2:	a806      	add	r0, sp, #24
    14d4:	f003 f9b4 	bl	4840 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    14d8:	4b1b      	ldr	r3, [pc, #108]	; (1548 <newFileName(char*)+0x7c>)
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    14da:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    14de:	881b      	ldrh	r3, [r3, #0]
    14e0:	b21b      	sxth	r3, r3
    14e2:	bb23      	cbnz	r3, 152e <newFileName(char*)+0x62>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    14e4:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    14e8:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    14ec:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    14f0:	e9cd 3003 	strd	r3, r0, [sp, #12]
    14f4:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    14f8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    14fc:	9000      	str	r0, [sp, #0]
    14fe:	4620      	mov	r0, r4
    1500:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1504:	4a11      	ldr	r2, [pc, #68]	; (154c <newFileName(char*)+0x80>)
    1506:	4912      	ldr	r1, [pc, #72]	; (1550 <newFileName(char*)+0x84>)
    1508:	f00f f9cc 	bl	108a4 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    150c:	4811      	ldr	r0, [pc, #68]	; (1554 <newFileName(char*)+0x88>)
    150e:	f00a fef7 	bl	c300 <Print::println()>
    1512:	2102      	movs	r1, #2
    1514:	4810      	ldr	r0, [pc, #64]	; (1558 <newFileName(char*)+0x8c>)
    1516:	f00d f85d 	bl	e5d4 <usb_serial_write>
    151a:	4620      	mov	r0, r4
    151c:	f00f ff50 	bl	113c0 <strlen>
    1520:	4601      	mov	r1, r0
    1522:	4620      	mov	r0, r4
    1524:	f00d f856 	bl	e5d4 <usb_serial_write>
    return 1;
}
    1528:	2001      	movs	r0, #1
    152a:	b008      	add	sp, #32
    152c:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    152e:	f99d 101e 	ldrsb.w	r1, [sp, #30]
    1532:	f99d 301d 	ldrsb.w	r3, [sp, #29]
    1536:	4a05      	ldr	r2, [pc, #20]	; (154c <newFileName(char*)+0x80>)
    1538:	e9cd 1000 	strd	r1, r0, [sp]
    153c:	4907      	ldr	r1, [pc, #28]	; (155c <newFileName(char*)+0x90>)
    153e:	4620      	mov	r0, r4
    1540:	f00f f9b0 	bl	108a4 <sprintf>
    1544:	e7e2      	b.n	150c <newFileName(char*)+0x40>
    1546:	bf00      	nop
    1548:	20043310 	.word	0x20043310
    154c:	2000048c 	.word	0x2000048c
    1550:	20000490 	.word	0x20000490
    1554:	20008a54 	.word	0x20008a54
    1558:	200009a4 	.word	0x200009a4
    155c:	200004b4 	.word	0x200004b4

00001560 <getAlarmTime(unsigned long)>:
#include "core_pins.h"

uint32_t getAlarmTime(uint32_t secs)
{
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1560:	4b2a      	ldr	r3, [pc, #168]	; (160c <getAlarmTime(unsigned long)+0xac>)
    1562:	492b      	ldr	r1, [pc, #172]	; (1610 <getAlarmTime(unsigned long)+0xb0>)
    1564:	4a2b      	ldr	r2, [pc, #172]	; (1614 <getAlarmTime(unsigned long)+0xb4>)
{
    1566:	b430      	push	{r4, r5}
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1568:	fba3 4300 	umull	r4, r3, r3, r0
    156c:	0c1b      	lsrs	r3, r3, #16
    156e:	fb01 0313 	mls	r3, r1, r3, r0

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1572:	4929      	ldr	r1, [pc, #164]	; (1618 <getAlarmTime(unsigned long)+0xb8>)
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1574:	fba2 2303 	umull	r2, r3, r2, r3
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1578:	680c      	ldr	r4, [r1, #0]
    157a:	ebb4 2fd3 	cmp.w	r4, r3, lsr #11
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    157e:	ea4f 22d3 	mov.w	r2, r3, lsr #11
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1582:	d80c      	bhi.n	159e <getAlarmTime(unsigned long)+0x3e>
    1584:	4b25      	ldr	r3, [pc, #148]	; (161c <getAlarmTime(unsigned long)+0xbc>)
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	4293      	cmp	r3, r2
    158a:	d908      	bls.n	159e <getAlarmTime(unsigned long)+0x3e>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    158c:	4b24      	ldr	r3, [pc, #144]	; (1620 <getAlarmTime(unsigned long)+0xc0>)
    158e:	681a      	ldr	r2, [r3, #0]
    1590:	681b      	ldr	r3, [r3, #0]
    1592:	fbb0 f2f2 	udiv	r2, r0, r2
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    1596:	bc30      	pop	{r4, r5}
      secs = ((secs/t_rep)+1)*t_rep;
    1598:	fb02 3003 	mla	r0, r2, r3, r3
}
    159c:	4770      	bx	lr
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    159e:	4c21      	ldr	r4, [pc, #132]	; (1624 <getAlarmTime(unsigned long)+0xc4>)
    15a0:	6823      	ldr	r3, [r4, #0]
    15a2:	4293      	cmp	r3, r2
    15a4:	d803      	bhi.n	15ae <getAlarmTime(unsigned long)+0x4e>
    15a6:	4b20      	ldr	r3, [pc, #128]	; (1628 <getAlarmTime(unsigned long)+0xc8>)
    15a8:	681b      	ldr	r3, [r3, #0]
    15aa:	4293      	cmp	r3, r2
    15ac:	d8ee      	bhi.n	158c <getAlarmTime(unsigned long)+0x2c>
    uint32_t dd = secs/(24*3600); // days
    15ae:	4b17      	ldr	r3, [pc, #92]	; (160c <getAlarmTime(unsigned long)+0xac>)
    15b0:	fba3 5300 	umull	r5, r3, r3, r0
    else if (hh<t_1)  // from mid-night to t_1
    15b4:	680d      	ldr	r5, [r1, #0]
    15b6:	4295      	cmp	r5, r2
    uint32_t dd = secs/(24*3600); // days
    15b8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    else if (hh<t_1)  // from mid-night to t_1
    15bc:	d909      	bls.n	15d2 <getAlarmTime(unsigned long)+0x72>
      secs = dd*(24*3600) + t_1*3600;
    15be:	680a      	ldr	r2, [r1, #0]
    15c0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    15c4:	4912      	ldr	r1, [pc, #72]	; (1610 <getAlarmTime(unsigned long)+0xb0>)
    15c6:	fb00 f202 	mul.w	r2, r0, r2
    15ca:	fb01 2003 	mla	r0, r1, r3, r2
}
    15ce:	bc30      	pop	{r4, r5}
    15d0:	4770      	bx	lr
    else if (hh>=t_2) // between the two recording periods
    15d2:	4d12      	ldr	r5, [pc, #72]	; (161c <getAlarmTime(unsigned long)+0xbc>)
    15d4:	682d      	ldr	r5, [r5, #0]
    15d6:	4295      	cmp	r5, r2
    15d8:	d90e      	bls.n	15f8 <getAlarmTime(unsigned long)+0x98>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    15da:	4c13      	ldr	r4, [pc, #76]	; (1628 <getAlarmTime(unsigned long)+0xc8>)
    15dc:	6825      	ldr	r5, [r4, #0]
    15de:	4295      	cmp	r5, r2
    15e0:	d8f5      	bhi.n	15ce <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    15e2:	680a      	ldr	r2, [r1, #0]
    15e4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    15e8:	6824      	ldr	r4, [r4, #0]
    15ea:	4909      	ldr	r1, [pc, #36]	; (1610 <getAlarmTime(unsigned long)+0xb0>)
    15ec:	1b12      	subs	r2, r2, r4
    15ee:	fb00 1202 	mla	r2, r0, r2, r1
    15f2:	fb01 2003 	mla	r0, r1, r3, r2
    15f6:	e7ea      	b.n	15ce <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + t_3*3600;
    15f8:	6822      	ldr	r2, [r4, #0]
    15fa:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    15fe:	4904      	ldr	r1, [pc, #16]	; (1610 <getAlarmTime(unsigned long)+0xb0>)
    1600:	fb00 f202 	mul.w	r2, r0, r2
}
    1604:	bc30      	pop	{r4, r5}
      secs = dd*(24*3600) + t_3*3600;
    1606:	fb01 2003 	mla	r0, r1, r3, r2
}
    160a:	4770      	bx	lr
    160c:	c22e4507 	.word	0xc22e4507
    1610:	00015180 	.word	0x00015180
    1614:	91a2b3c5 	.word	0x91a2b3c5
    1618:	200432e4 	.word	0x200432e4
    161c:	20009024 	.word	0x20009024
    1620:	20009038 	.word	0x20009038
    1624:	20009028 	.word	0x20009028
    1628:	2000902c 	.word	0x2000902c

0000162c <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR; // save control register
    162c:	4a19      	ldr	r2, [pc, #100]	; (1694 <do_hibernate(unsigned long)+0x68>)
{
    162e:	b538      	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
    1630:	6b95      	ldr	r5, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
    1632:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    1634:	f043 0301 	orr.w	r3, r3, #1
    1638:	64d3      	str	r3, [r2, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    163a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    163c:	f023 0302 	bic.w	r3, r3, #2
    1640:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    1642:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1644:	0799      	lsls	r1, r3, #30
    1646:	d4fc      	bmi.n	1642 <do_hibernate(unsigned long)+0x16>

    __disable_irq();
    1648:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    164a:	4c12      	ldr	r4, [pc, #72]	; (1694 <do_hibernate(unsigned long)+0x68>)
    164c:	6d20      	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    164e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    1650:	6d62      	ldr	r2, [r4, #84]	; 0x54
    1652:	6d21      	ldr	r1, [r4, #80]	; 0x50
    1654:	429a      	cmp	r2, r3
    1656:	d1f9      	bne.n	164c <do_hibernate(unsigned long)+0x20>
    1658:	4281      	cmp	r1, r0
    165a:	d1f7      	bne.n	164c <do_hibernate(unsigned long)+0x20>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    165c:	0bdb      	lsrs	r3, r3, #15

    //set alarm
    secs = getAlarmTime(secs);
    165e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    1662:	f7ff ff7d 	bl	1560 <getAlarmTime(unsigned long)>

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    1666:	4a0b      	ldr	r2, [pc, #44]	; (1694 <do_hibernate(unsigned long)+0x68>)
    SNVS_LPTAR = secs;
    1668:	65a0      	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    166a:	6d93      	ldr	r3, [r2, #88]	; 0x58
    166c:	4283      	cmp	r3, r0
    166e:	d1fc      	bne.n	166a <do_hibernate(unsigned long)+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    1670:	f045 0502 	orr.w	r5, r5, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    1674:	4c07      	ldr	r4, [pc, #28]	; (1694 <do_hibernate(unsigned long)+0x68>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    1676:	6395      	str	r5, [r2, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    1678:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    167a:	079b      	lsls	r3, r3, #30
    167c:	d5fc      	bpl.n	1678 <do_hibernate(unsigned long)+0x4c>

    __enable_irq();
    167e:	b662      	cpsie	i
  
    // shutdown acq board
    acqPower(LOW);
    1680:	2000      	movs	r0, #0
    1682:	f7ff fba9 	bl	dd8 <acqPower(int)>
    //
    SNVS_LPCR |= (1 << 6); // turn off power
    1686:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    168c:	63a3      	str	r3, [r4, #56]	; 0x38
    while (1) asm("wfi");  
    168e:	bf30      	wfi
    1690:	e7fd      	b.n	168e <do_hibernate(unsigned long)+0x62>
    1692:	bf00      	nop
    1694:	400d4000 	.word	0x400d4000

00001698 <storeData(short)>:
{
    1698:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    169a:	4604      	mov	r4, r0
{
    169c:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    169e:	2800      	cmp	r0, #0
    16a0:	d049      	beq.n	1736 <storeData(short)+0x9e>
    if(status==OPENED) // file is open: write first record (header)
    16a2:	2801      	cmp	r0, #1
    16a4:	d009      	beq.n	16ba <storeData(short)+0x22>
    if(status==RUNNING) // file is open and header written: store data records
    16a6:	2802      	cmp	r0, #2
    16a8:	f000 80d3 	beq.w	1852 <storeData(short)+0x1ba>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    16ac:	1ec3      	subs	r3, r0, #3
    16ae:	b29b      	uxth	r3, r3
    16b0:	2b02      	cmp	r3, #2
    16b2:	f240 8108 	bls.w	18c6 <storeData(short)+0x22e>
}
    16b6:	b014      	add	sp, #80	; 0x50
    16b8:	bd70      	pop	{r4, r5, r6, pc}
    16ba:	4da9      	ldr	r5, [pc, #676]	; (1960 <storeData(short)+0x2c8>)
        if(proc==0)
    16bc:	4ba9      	ldr	r3, [pc, #676]	; (1964 <storeData(short)+0x2cc>)
    {   nbuf=0;
    16be:	2200      	movs	r2, #0
    16c0:	4ea9      	ldr	r6, [pc, #676]	; (1968 <storeData(short)+0x2d0>)
        if(proc==0)
    16c2:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    16c4:	6032      	str	r2, [r6, #0]
        if(proc==0)
    16c6:	b21b      	sxth	r3, r3
    16c8:	2b00      	cmp	r3, #0
    16ca:	f040 8088 	bne.w	17de <storeData(short)+0x146>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    16ce:	49a7      	ldr	r1, [pc, #668]	; (196c <storeData(short)+0x2d4>)
    16d0:	2218      	movs	r2, #24
    16d2:	4ba7      	ldr	r3, [pc, #668]	; (1970 <storeData(short)+0x2d8>)
    16d4:	6808      	ldr	r0, [r1, #0]
    16d6:	2102      	movs	r1, #2
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	f7ff fd95 	bl	1208 <headerInit(long, long, long, int)>
    16de:	4601      	mov	r1, r0
    return m_fFile ? m_fFile->write(buf, count) :
    16e0:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    16e2:	2800      	cmp	r0, #0
    16e4:	f000 8083 	beq.w	17ee <storeData(short)+0x156>
    16e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    16ec:	f006 ff64 	bl	85b8 <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    16f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    16f4:	f0c0 8085 	bcc.w	1802 <storeData(short)+0x16a>
    16f8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    16fa:	2800      	cmp	r0, #0
    16fc:	f000 80a0 	beq.w	1840 <storeData(short)+0x1a8>
    1700:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    1704:	499b      	ldr	r1, [pc, #620]	; (1974 <storeData(short)+0x2dc>)
    1706:	f006 ff57 	bl	85b8 <FatFile::write(void const*, unsigned int)>
    170a:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    170c:	f5b4 5f10 	cmp.w	r4, #9216	; 0x2400
    1710:	f0c0 80b1 	bcc.w	1876 <storeData(short)+0x1de>
        disk_count++;
    1714:	4998      	ldr	r1, [pc, #608]	; (1978 <storeData(short)+0x2e0>)
          nbuf++;
    1716:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1718:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    171a:	3301      	adds	r3, #1
        disk_count++;
    171c:	3201      	adds	r2, #1
          nbuf++;
    171e:	6033      	str	r3, [r6, #0]
        disk_count++;
    1720:	600a      	str	r2, [r1, #0]
    1722:	4996      	ldr	r1, [pc, #600]	; (197c <storeData(short)+0x2e4>)
        if((nbuf % 1000)==0 ) file.flush();
    1724:	4a96      	ldr	r2, [pc, #600]	; (1980 <storeData(short)+0x2e8>)
        disk_count++;
    1726:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    172a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    172e:	d27f      	bcs.n	1830 <storeData(short)+0x198>
    1730:	2002      	movs	r0, #2
}
    1732:	b014      	add	sp, #80	; 0x50
    1734:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1736:	4893      	ldr	r0, [pc, #588]	; (1984 <storeData(short)+0x2ec>)
    1738:	f7ff fe8a 	bl	1450 <newDirectory(char*)>
    173c:	b1e8      	cbz	r0, 177a <storeData(short)+0xe2>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    173e:	4d92      	ldr	r5, [pc, #584]	; (1988 <storeData(short)+0x2f0>)
    1740:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    1742:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1746:	2a00      	cmp	r2, #0
    1748:	f000 80c5 	beq.w	18d6 <storeData(short)+0x23e>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    174c:	466e      	mov	r6, sp
    174e:	4611      	mov	r1, r2
    1750:	4623      	mov	r3, r4
    1752:	4a8c      	ldr	r2, [pc, #560]	; (1984 <storeData(short)+0x2ec>)
    1754:	4630      	mov	r0, r6
  FatFile() {}
    1756:	9400      	str	r4, [sp, #0]
    1758:	f006 fb5c 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    175c:	2800      	cmp	r0, #0
    175e:	f000 80c7 	beq.w	18f0 <storeData(short)+0x258>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1762:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    1764:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    1768:	2800      	cmp	r0, #0
    176a:	f000 80d9 	beq.w	1920 <storeData(short)+0x288>
    176e:	4985      	ldr	r1, [pc, #532]	; (1984 <storeData(short)+0x2ec>)
    1770:	f008 f89c 	bl	98ac <FatVolume::chdir(char const*)>
    1774:	2800      	cmp	r0, #0
    1776:	f000 80dc 	beq.w	1932 <storeData(short)+0x29a>
        if(newFileName(fileName))
    177a:	4884      	ldr	r0, [pc, #528]	; (198c <storeData(short)+0x2f4>)
    177c:	f7ff fea6 	bl	14cc <newFileName(char*)>
    1780:	2800      	cmp	r0, #0
    1782:	f000 812e 	beq.w	19e2 <storeData(short)+0x34a>
            file = sd->open(fileName, FILE_WRITE); 
    1786:	4980      	ldr	r1, [pc, #512]	; (1988 <storeData(short)+0x2f0>)
    1788:	f244 2302 	movw	r3, #16898	; 0x4202
    178c:	4a7f      	ldr	r2, [pc, #508]	; (198c <storeData(short)+0x2f4>)
    178e:	4668      	mov	r0, sp
    1790:	6809      	ldr	r1, [r1, #0]
    1792:	f008 fa27 	bl	9be4 <FsVolume::open(char const*, int)>
class Print
    1796:	4d72      	ldr	r5, [pc, #456]	; (1960 <storeData(short)+0x2c8>)
class Stream : public Print
    1798:	f89d 300c 	ldrb.w	r3, [sp, #12]
    179c:	f105 0010 	add.w	r0, r5, #16
    17a0:	732b      	strb	r3, [r5, #12]
    17a2:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    17a6:	e9c5 1201 	strd	r1, r2, [r5, #4]
    17aa:	a904      	add	r1, sp, #16
    17ac:	f008 f8a6 	bl	98fc <FsBaseFile::operator=(FsBaseFile const&)>
    17b0:	4b77      	ldr	r3, [pc, #476]	; (1990 <storeData(short)+0x2f8>)
  ~FsBaseFile() {close();}
    17b2:	a804      	add	r0, sp, #16
    17b4:	9300      	str	r3, [sp, #0]
    17b6:	f008 f8fb 	bl	99b0 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    17ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
    17bc:	2b00      	cmp	r3, #0
    17be:	f47f af7d 	bne.w	16bc <storeData(short)+0x24>
    17c2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    17c4:	2b00      	cmp	r3, #0
    17c6:	f47f af79 	bne.w	16bc <storeData(short)+0x24>
    17ca:	2111      	movs	r1, #17
    17cc:	4871      	ldr	r0, [pc, #452]	; (1994 <storeData(short)+0x2fc>)
    17ce:	f00c ff01 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    17d2:	4871      	ldr	r0, [pc, #452]	; (1998 <storeData(short)+0x300>)
    17d4:	f00a fd94 	bl	c300 <Print::println()>
                return STOPPED; 
    17d8:	f04f 30ff 	mov.w	r0, #4294967295
    17dc:	e76b      	b.n	16b6 <storeData(short)+0x1e>
          makeHeader(fileHeader);
    17de:	486f      	ldr	r0, [pc, #444]	; (199c <storeData(short)+0x304>)
    17e0:	f7ff fdda 	bl	1398 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    17e4:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    17e6:	496d      	ldr	r1, [pc, #436]	; (199c <storeData(short)+0x304>)
    17e8:	2800      	cmp	r0, #0
    17ea:	f47f af7d 	bne.w	16e8 <storeData(short)+0x50>
    17ee:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    17f0:	b1e0      	cbz	r0, 182c <storeData(short)+0x194>
    17f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    17f6:	f005 fbcf 	bl	6f98 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    17fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    17fe:	f4bf af7b 	bcs.w	16f8 <storeData(short)+0x60>
  bool isOpen() const {return m_fFile || m_xFile;}
    1802:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1804:	2b00      	cmp	r3, #0
    1806:	f000 80e6 	beq.w	19d6 <storeData(short)+0x33e>
    180a:	2403      	movs	r4, #3
        {   if(proc==0)
    180c:	4b55      	ldr	r3, [pc, #340]	; (1964 <storeData(short)+0x2cc>)
    180e:	881b      	ldrh	r3, [r3, #0]
    1810:	b21b      	sxth	r3, r3
    1812:	b30b      	cbz	r3, 1858 <storeData(short)+0x1c0>
            file.close();
    1814:	4862      	ldr	r0, [pc, #392]	; (19a0 <storeData(short)+0x308>)
    1816:	f008 f8cb 	bl	99b0 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    181a:	2c04      	cmp	r4, #4
    181c:	f000 80e4 	beq.w	19e8 <storeData(short)+0x350>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    1820:	1ee0      	subs	r0, r4, #3
    1822:	bf18      	it	ne
    1824:	f04f 30ff 	movne.w	r0, #4294967295
}
    1828:	b014      	add	sp, #80	; 0x50
    182a:	bd70      	pop	{r4, r5, r6, pc}
    182c:	2403      	movs	r4, #3
    182e:	e7f7      	b.n	1820 <storeData(short)+0x188>
    return m_fFile ? m_fFile->sync() :
    1830:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1832:	2800      	cmp	r0, #0
    1834:	f000 8084 	beq.w	1940 <storeData(short)+0x2a8>
    1838:	f006 feb8 	bl	85ac <FatFile::sync()>
    183c:	2002      	movs	r0, #2
    183e:	e73a      	b.n	16b6 <storeData(short)+0x1e>
    1840:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1842:	b1b8      	cbz	r0, 1874 <storeData(short)+0x1dc>
    1844:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    1848:	494a      	ldr	r1, [pc, #296]	; (1974 <storeData(short)+0x2dc>)
    184a:	f005 fba5 	bl	6f98 <ExFatFile::write(void const*, unsigned int)>
    184e:	4604      	mov	r4, r0
    1850:	e75c      	b.n	170c <storeData(short)+0x74>
    1852:	4d43      	ldr	r5, [pc, #268]	; (1960 <storeData(short)+0x2c8>)
    1854:	4e44      	ldr	r6, [pc, #272]	; (1968 <storeData(short)+0x2d0>)
    1856:	e74f      	b.n	16f8 <storeData(short)+0x60>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1858:	4b43      	ldr	r3, [pc, #268]	; (1968 <storeData(short)+0x2d0>)
  wav_hdr.dLen = nbytes;
    185a:	4852      	ldr	r0, [pc, #328]	; (19a4 <storeData(short)+0x30c>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    185c:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    185e:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1860:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    1864:	029b      	lsls	r3, r3, #10
  wav_hdr.rLen += wav_hdr.dLen;
    1866:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    1868:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    186c:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    186e:	f7ff fd47 	bl	1300 <writeHeader(char*)>
    1872:	e7cf      	b.n	1814 <storeData(short)+0x17c>
    1874:	4604      	mov	r4, r0
    1876:	2101      	movs	r1, #1
    1878:	484b      	ldr	r0, [pc, #300]	; (19a8 <storeData(short)+0x310>)
    187a:	f00c feab 	bl	e5d4 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    187e:	2300      	movs	r3, #0
    1880:	220a      	movs	r2, #10
    1882:	4621      	mov	r1, r4
    1884:	4844      	ldr	r0, [pc, #272]	; (1998 <storeData(short)+0x300>)
    1886:	f00a fd65 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    188a:	2101      	movs	r1, #1
    188c:	4847      	ldr	r0, [pc, #284]	; (19ac <storeData(short)+0x314>)
    188e:	f00c fea1 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1892:	2102      	movs	r1, #2
    1894:	4840      	ldr	r0, [pc, #256]	; (1998 <storeData(short)+0x300>)
    1896:	f00a fd27 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    189a:	483f      	ldr	r0, [pc, #252]	; (1998 <storeData(short)+0x300>)
    189c:	f00a fd30 	bl	c300 <Print::println()>
        disk_count++;
    18a0:	4935      	ldr	r1, [pc, #212]	; (1978 <storeData(short)+0x2e0>)
    18a2:	4836      	ldr	r0, [pc, #216]	; (197c <storeData(short)+0x2e4>)
    18a4:	6833      	ldr	r3, [r6, #0]
    18a6:	680a      	ldr	r2, [r1, #0]
    18a8:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    18ac:	4834      	ldr	r0, [pc, #208]	; (1980 <storeData(short)+0x2e8>)
        disk_count++;
    18ae:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    18b0:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    18b4:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    18b6:	d3a4      	bcc.n	1802 <storeData(short)+0x16a>
    return m_fFile ? m_fFile->sync() :
    18b8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    18ba:	2800      	cmp	r0, #0
    18bc:	d048      	beq.n	1950 <storeData(short)+0x2b8>
          status=DOCLOSE; 
    18be:	2403      	movs	r4, #3
    18c0:	f006 fe74 	bl	85ac <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    18c4:	e000      	b.n	18c8 <storeData(short)+0x230>
    18c6:	4d26      	ldr	r5, [pc, #152]	; (1960 <storeData(short)+0x2c8>)
  bool isOpen() const {return m_fFile || m_xFile;}
    18c8:	6cab      	ldr	r3, [r5, #72]	; 0x48
    18ca:	2b00      	cmp	r3, #0
    18cc:	d19e      	bne.n	180c <storeData(short)+0x174>
    18ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    18d0:	2b00      	cmp	r3, #0
    18d2:	d19b      	bne.n	180c <storeData(short)+0x174>
    18d4:	e7a1      	b.n	181a <storeData(short)+0x182>
    18d6:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    18da:	b1d1      	cbz	r1, 1912 <storeData(short)+0x27a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    18dc:	466e      	mov	r6, sp
    18de:	4613      	mov	r3, r2
  ExFatFile() {}
    18e0:	920c      	str	r2, [sp, #48]	; 0x30
    18e2:	4630      	mov	r0, r6
    18e4:	4a27      	ldr	r2, [pc, #156]	; (1984 <storeData(short)+0x2ec>)
    18e6:	f004 ffe5 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    18ea:	2800      	cmp	r0, #0
    18ec:	f47f af39 	bne.w	1762 <storeData(short)+0xca>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    18f0:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    18f2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    18f6:	2a00      	cmp	r2, #0
    18f8:	d05e      	beq.n	19b8 <storeData(short)+0x320>
    18fa:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    18fc:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1900:	2301      	movs	r3, #1
    1902:	4630      	mov	r0, r6
    1904:	4a1f      	ldr	r2, [pc, #124]	; (1984 <storeData(short)+0x2ec>)
    1906:	9400      	str	r4, [sp, #0]
    1908:	f006 f98c 	bl	7c24 <FatFile::mkdir(FatFile*, char const*, bool)>
    190c:	2800      	cmp	r0, #0
    190e:	f47f af28 	bne.w	1762 <storeData(short)+0xca>
    1912:	4821      	ldr	r0, [pc, #132]	; (1998 <storeData(short)+0x300>)
    1914:	4926      	ldr	r1, [pc, #152]	; (19b0 <storeData(short)+0x318>)
    1916:	f7ff fc43 	bl	11a0 <Print::println(char const*) [clone .isra.0]>
    191a:	f04f 30ff 	mov.w	r0, #4294967295
    191e:	e6ca      	b.n	16b6 <storeData(short)+0x1e>
    1920:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1924:	b128      	cbz	r0, 1932 <storeData(short)+0x29a>
    1926:	4917      	ldr	r1, [pc, #92]	; (1984 <storeData(short)+0x2ec>)
    1928:	f005 ffc6 	bl	78b8 <ExFatVolume::chdir(char const*)>
    192c:	2800      	cmp	r0, #0
    192e:	f47f af24 	bne.w	177a <storeData(short)+0xe2>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1932:	4819      	ldr	r0, [pc, #100]	; (1998 <storeData(short)+0x300>)
    1934:	491f      	ldr	r1, [pc, #124]	; (19b4 <storeData(short)+0x31c>)
    1936:	f7ff fc33 	bl	11a0 <Print::println(char const*) [clone .isra.0]>
    193a:	f04f 30ff 	mov.w	r0, #4294967295
    193e:	e6ba      	b.n	16b6 <storeData(short)+0x1e>
    1940:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1942:	2800      	cmp	r0, #0
    1944:	f43f aef4 	beq.w	1730 <storeData(short)+0x98>
    1948:	f005 f93e 	bl	6bc8 <ExFatFile::sync()>
    194c:	2002      	movs	r0, #2
    194e:	e6b2      	b.n	16b6 <storeData(short)+0x1e>
    1950:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
          status=DOCLOSE; 
    1952:	2403      	movs	r4, #3
    1954:	2800      	cmp	r0, #0
    1956:	f43f af63 	beq.w	1820 <storeData(short)+0x188>
    195a:	f005 f935 	bl	6bc8 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    195e:	e7b3      	b.n	18c8 <storeData(short)+0x230>
    1960:	20042ae4 	.word	0x20042ae4
    1964:	20043310 	.word	0x20043310
    1968:	20042b60 	.word	0x20042b60
    196c:	20009014 	.word	0x20009014
    1970:	2000bdc8 	.word	0x2000bdc8
    1974:	2000bdd0 	.word	0x2000bdd0
    1978:	20042abc 	.word	0x20042abc
    197c:	26e978d5 	.word	0x26e978d5
    1980:	00418937 	.word	0x00418937
    1984:	20041834 	.word	0x20041834
    1988:	2000901c 	.word	0x2000901c
    198c:	20041e84 	.word	0x20041e84
    1990:	20000b3c 	.word	0x20000b3c
    1994:	200007ac 	.word	0x200007ac
    1998:	20008a54 	.word	0x20008a54
    199c:	2000e1d0 	.word	0x2000e1d0
    19a0:	20042af4 	.word	0x20042af4
    19a4:	20041c84 	.word	0x20041c84
    19a8:	200007c0 	.word	0x200007c0
    19ac:	20000b1c 	.word	0x20000b1c
    19b0:	20000794 	.word	0x20000794
    19b4:	200007a0 	.word	0x200007a0
    19b8:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    19bc:	2900      	cmp	r1, #0
    19be:	d0a8      	beq.n	1912 <storeData(short)+0x27a>
    19c0:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    19c2:	2301      	movs	r3, #1
    19c4:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    19c8:	4630      	mov	r0, r6
    19ca:	4a09      	ldr	r2, [pc, #36]	; (19f0 <storeData(short)+0x358>)
    19cc:	f005 fa06 	bl	6ddc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    19d0:	2800      	cmp	r0, #0
    19d2:	d09e      	beq.n	1912 <storeData(short)+0x27a>
    19d4:	e6c5      	b.n	1762 <storeData(short)+0xca>
  bool isOpen() const {return m_fFile || m_xFile;}
    19d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    19d8:	2403      	movs	r4, #3
    19da:	2b00      	cmp	r3, #0
    19dc:	f47f af16 	bne.w	180c <storeData(short)+0x174>
    19e0:	e71e      	b.n	1820 <storeData(short)+0x188>
        {  return STOPPED; // if file open fails: don't do anything
    19e2:	f04f 30ff 	mov.w	r0, #4294967295
    19e6:	e666      	b.n	16b6 <storeData(short)+0x1e>
        { do_hibernate(t_rep);
    19e8:	4b02      	ldr	r3, [pc, #8]	; (19f4 <storeData(short)+0x35c>)
    19ea:	6818      	ldr	r0, [r3, #0]
    19ec:	f7ff fe1e 	bl	162c <do_hibernate(unsigned long)>
    19f0:	20041834 	.word	0x20041834
    19f4:	20009038 	.word	0x20009038

000019f8 <saveData(short)>:
{
    19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19fa:	4605      	mov	r5, r0
    if(status==STOPPED) 
    19fc:	3001      	adds	r0, #1
    19fe:	d046      	beq.n	1a8e <saveData(short)+0x96>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1a00:	4b3f      	ldr	r3, [pc, #252]	; (1b00 <saveData(short)+0x108>)
    1a02:	2208      	movs	r2, #8
    if(status<CLOSED) return status; // we are stopped: don't do anything
    1a04:	2d00      	cmp	r5, #0
    1a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1a0a:	db54      	blt.n	1ab6 <saveData(short)+0xbe>
  if(state==RUNNING)
    1a0c:	2d02      	cmp	r5, #2
    1a0e:	d073      	beq.n	1af8 <saveData(short)+0x100>
    if(getDataCount() >= NDBL)
    1a10:	f002 fd60 	bl	44d4 <getDataCount()>
    1a14:	280b      	cmp	r0, #11
    1a16:	d950      	bls.n	1aba <saveData(short)+0xc2>
      digitalWrite(13,HIGH);
    1a18:	2101      	movs	r1, #1
    1a1a:	200d      	movs	r0, #13
    1a1c:	f00a fff0 	bl	ca00 <digitalWrite>
      if(proc==0)
    1a20:	4b38      	ldr	r3, [pc, #224]	; (1b04 <saveData(short)+0x10c>)
    1a22:	881b      	ldrh	r3, [r3, #0]
    1a24:	b21b      	sxth	r3, r3
    1a26:	2b00      	cmp	r3, #0
    1a28:	d14d      	bne.n	1ac6 <saveData(short)+0xce>
    1a2a:	4f37      	ldr	r7, [pc, #220]	; (1b08 <saveData(short)+0x110>)
    1a2c:	f5a7 5640 	sub.w	r6, r7, #12288	; 0x3000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1a30:	f002 fd5e 	bl	44f0 <queue_isBusy()>
    1a34:	4604      	mov	r4, r0
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1a36:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1a38:	2c00      	cmp	r4, #0
    1a3a:	d1f9      	bne.n	1a30 <saveData(short)+0x38>
        for(int ii=0; ii<NDBL; ii++)
    1a3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1a40:	f002 fd96 	bl	4570 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1a44:	42be      	cmp	r6, r7
    1a46:	d1f3      	bne.n	1a30 <saveData(short)+0x38>
    1a48:	4930      	ldr	r1, [pc, #192]	; (1b0c <saveData(short)+0x114>)
    1a4a:	4b31      	ldr	r3, [pc, #196]	; (1b10 <saveData(short)+0x118>)
    1a4c:	460a      	mov	r2, r1
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1a4e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1a52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    1a56:	3401      	adds	r4, #1
    1a58:	2c08      	cmp	r4, #8
    1a5a:	d1f8      	bne.n	1a4e <saveData(short)+0x56>
    1a5c:	4b2d      	ldr	r3, [pc, #180]	; (1b14 <saveData(short)+0x11c>)
    1a5e:	482e      	ldr	r0, [pc, #184]	; (1b18 <saveData(short)+0x120>)
            outptr[jj++]=(inpp[ii]) &0xff;
    1a60:	f851 2f04 	ldr.w	r2, [r1, #4]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1a64:	3303      	adds	r3, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1a66:	ea4f 2e12 	mov.w	lr, r2, lsr #8
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1a6a:	4281      	cmp	r1, r0
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1a6c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            outptr[jj++]=(inpp[ii]) &0xff;
    1a70:	f803 2c03 	strb.w	r2, [r3, #-3]
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1a74:	f803 ec02 	strb.w	lr, [r3, #-2]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1a78:	f803 cc01 	strb.w	ip, [r3, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1a7c:	d1f0      	bne.n	1a60 <saveData(short)+0x68>
      if(haveStore)
    1a7e:	4b27      	ldr	r3, [pc, #156]	; (1b1c <saveData(short)+0x124>)
    1a80:	681b      	ldr	r3, [r3, #0]
    1a82:	b1c3      	cbz	r3, 1ab6 <saveData(short)+0xbe>
        status=storeData(status);
    1a84:	4628      	mov	r0, r5
}
    1a86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status=storeData(status);
    1a8a:	f7ff be05 	b.w	1698 <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    1a8e:	f002 fd2f 	bl	44f0 <queue_isBusy()>
    1a92:	4604      	mov	r4, r0
    1a94:	2800      	cmp	r0, #0
    1a96:	d1fa      	bne.n	1a8e <saveData(short)+0x96>
      pullData((uint32_t*)tempBuffer0);
    1a98:	4821      	ldr	r0, [pc, #132]	; (1b20 <saveData(short)+0x128>)
    1a9a:	f002 fd69 	bl	4570 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1a9e:	4a1b      	ldr	r2, [pc, #108]	; (1b0c <saveData(short)+0x114>)
    1aa0:	4b1b      	ldr	r3, [pc, #108]	; (1b10 <saveData(short)+0x118>)
    1aa2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1aa6:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1aaa:	3401      	adds	r4, #1
    1aac:	2c08      	cmp	r4, #8
    1aae:	d1f8      	bne.n	1aa2 <saveData(short)+0xaa>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1ab0:	4b13      	ldr	r3, [pc, #76]	; (1b00 <saveData(short)+0x108>)
    1ab2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    1ab6:	4628      	mov	r0, r5
    1ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      digitalWrite(13,LOW);
    1aba:	2100      	movs	r1, #0
    1abc:	200d      	movs	r0, #13
    1abe:	f00a ff9f 	bl	ca00 <digitalWrite>
}
    1ac2:	4628      	mov	r0, r5
    1ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ac6:	4e13      	ldr	r6, [pc, #76]	; (1b14 <saveData(short)+0x11c>)
    1ac8:	f506 5740 	add.w	r7, r6, #12288	; 0x3000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1acc:	f002 fd10 	bl	44f0 <queue_isBusy()>
    1ad0:	4604      	mov	r4, r0
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1ad2:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1ad4:	2c00      	cmp	r4, #0
    1ad6:	d1f9      	bne.n	1acc <saveData(short)+0xd4>
        for(int ii=0; ii<NDBL; ii++)
    1ad8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1adc:	f002 fd48 	bl	4570 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1ae0:	42be      	cmp	r6, r7
    1ae2:	d1f3      	bne.n	1acc <saveData(short)+0xd4>
    1ae4:	4a0f      	ldr	r2, [pc, #60]	; (1b24 <saveData(short)+0x12c>)
    1ae6:	4b0a      	ldr	r3, [pc, #40]	; (1b10 <saveData(short)+0x118>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1ae8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1aec:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1af0:	3401      	adds	r4, #1
    1af2:	2c08      	cmp	r4, #8
    1af4:	d1f8      	bne.n	1ae8 <saveData(short)+0xf0>
    1af6:	e7c2      	b.n	1a7e <saveData(short)+0x86>
    1af8:	f7ff fb26 	bl	1148 <checkEndOfFile(short) [clone .part.0]>
    1afc:	4605      	mov	r5, r0
    1afe:	e787      	b.n	1a10 <saveData(short)+0x18>
    1b00:	42004000 	.word	0x42004000
    1b04:	20043310 	.word	0x20043310
    1b08:	200413dc 	.word	0x200413dc
    1b0c:	2003e3d8 	.word	0x2003e3d8
    1b10:	20042b38 	.word	0x20042b38
    1b14:	2000bdd0 	.word	0x2000bdd0
    1b18:	200413d8 	.word	0x200413d8
    1b1c:	20042b34 	.word	0x20042b34
    1b20:	2003e3dc 	.word	0x2003e3dc
    1b24:	2000bdcc 	.word	0x2000bdcc

00001b28 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    1b28:	4808      	ldr	r0, [pc, #32]	; (1b4c <_GLOBAL__sub_I_t_acq+0x24>)
    1b2a:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    1b30:	4a07      	ldr	r2, [pc, #28]	; (1b50 <_GLOBAL__sub_I_t_acq+0x28>)
}
    1b32:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1b34:	4c07      	ldr	r4, [pc, #28]	; (1b54 <_GLOBAL__sub_I_t_acq+0x2c>)
    1b36:	7303      	strb	r3, [r0, #12]
    1b38:	6004      	str	r4, [r0, #0]
    1b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b3e:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    1b42:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    1b46:	4904      	ldr	r1, [pc, #16]	; (1b58 <_GLOBAL__sub_I_t_acq+0x30>)
    1b48:	f00c bf4e 	b.w	e9e8 <__aeabi_atexit>
    1b4c:	20042ae4 	.word	0x20042ae4
    1b50:	20008a70 	.word	0x20008a70
    1b54:	20000c64 	.word	0x20000c64
    1b58:	00001131 	.word	0x00001131

00001b5c <filing_init()>:
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b5c:	4b29      	ldr	r3, [pc, #164]	; (1c04 <filing_init()+0xa8>)
    1b5e:	4a2a      	ldr	r2, [pc, #168]	; (1c08 <filing_init()+0xac>)
    1b60:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  FsDateTime::callback = dateTime;
    1b64:	4929      	ldr	r1, [pc, #164]	; (1c0c <filing_init()+0xb0>)
    1b66:	482a      	ldr	r0, [pc, #168]	; (1c10 <filing_init()+0xb4>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
    1b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FsDateTime::callback = dateTime;
    1b70:	2605      	movs	r6, #5
    1b72:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1c24 <filing_init()+0xc8>
    spiConfigBackupPin = 255;
    1b76:	27ff      	movs	r7, #255	; 0xff
    1b78:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1c28 <filing_init()+0xcc>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b7c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c18 <filing_init()+0xbc>
    1b80:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1b82:	6013      	str	r3, [r2, #0]
    if (sd->begin(SD_CONFIG)) 
    1b84:	f8d8 4000 	ldr.w	r4, [r8]
    sdioConfigBackup = sdioConfig;
    1b88:	2300      	movs	r3, #0
    1b8a:	f504 6592 	add.w	r5, r4, #1168	; 0x490
    1b8e:	4619      	mov	r1, r3
    1b90:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
    1b94:	4628      	mov	r0, r5
    spiConfigBackupPin = 255;
    1b96:	f884 74bc 	strb.w	r7, [r4, #1212]	; 0x4bc
    1b9a:	f009 fc23 	bl	b3e4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1b9e:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1ba0:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    1ba4:	f008 fe80 	bl	a8a8 <SdioCard::errorCode() const>
    1ba8:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1baa:	2301      	movs	r3, #1
    1bac:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
    1bae:	b992      	cbnz	r2, 1bd6 <filing_init()+0x7a>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1bb0:	461a      	mov	r2, r3
    1bb2:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    1bb6:	f007 ffa3 	bl	9b00 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1bba:	b160      	cbz	r0, 1bd6 <filing_init()+0x7a>
    1bbc:	2111      	movs	r1, #17
    1bbe:	4815      	ldr	r0, [pc, #84]	; (1c14 <filing_init()+0xb8>)
    1bc0:	f00c fd08 	bl	e5d4 <usb_serial_write>
    1bc4:	4814      	ldr	r0, [pc, #80]	; (1c18 <filing_init()+0xbc>)
    1bc6:	f00a fb9b 	bl	c300 <Print::println()>
      haveStore=1;
    1bca:	2301      	movs	r3, #1
    1bcc:	4a13      	ldr	r2, [pc, #76]	; (1c1c <filing_init()+0xc0>)
      return 1;
    1bce:	4618      	mov	r0, r3
      haveStore=1;
    1bd0:	6013      	str	r3, [r2, #0]
}
    1bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1bd6:	210f      	movs	r1, #15
    1bd8:	4650      	mov	r0, sl
    1bda:	f00c fcfb 	bl	e5d4 <usb_serial_write>
    1bde:	4648      	mov	r0, r9
    1be0:	f00a fb8e 	bl	c300 <Print::println()>
      delay(100);
    1be4:	2064      	movs	r0, #100	; 0x64
    1be6:	f00a fe8d 	bl	c904 <delay>
  for(int ii=0; ii<5;ii++)
    1bea:	3e01      	subs	r6, #1
    1bec:	d1ca      	bne.n	1b84 <filing_init()+0x28>
    1bee:	211b      	movs	r1, #27
    1bf0:	480b      	ldr	r0, [pc, #44]	; (1c20 <filing_init()+0xc4>)
    1bf2:	f00c fcef 	bl	e5d4 <usb_serial_write>
    1bf6:	4808      	ldr	r0, [pc, #32]	; (1c18 <filing_init()+0xbc>)
    1bf8:	f00a fb82 	bl	c300 <Print::println()>
  return 0;
    1bfc:	4630      	mov	r0, r6
}
    1bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c02:	bf00      	nop
    1c04:	401f4400 	.word	0x401f4400
    1c08:	2000bdc8 	.word	0x2000bdc8
    1c0c:	200422dc 	.word	0x200422dc
    1c10:	000010b1 	.word	0x000010b1
    1c14:	2000044c 	.word	0x2000044c
    1c18:	20008a54 	.word	0x20008a54
    1c1c:	20042b34 	.word	0x20042b34
    1c20:	20000470 	.word	0x20000470
    1c24:	2000901c 	.word	0x2000901c
    1c28:	20000460 	.word	0x20000460

00001c2c <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1c2c:	6840      	ldr	r0, [r0, #4]
    1c2e:	4770      	bx	lr

00001c30 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1c30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1c34:	6888      	ldr	r0, [r1, #8]
    1c36:	4770      	bx	lr

00001c38 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    1c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c3c:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    1c3e:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    1c42:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    1c44:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    1c48:	b91b      	cbnz	r3, 1c52 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    1c4a:	4f19      	ldr	r7, [pc, #100]	; (1cb0 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1c4c:	f500 7108 	add.w	r1, r0, #544	; 0x220
    1c50:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    1c52:	4433      	add	r3, r6
        while(pos<len)
    1c54:	2e00      	cmp	r6, #0
        write_length_ += len;
    1c56:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
        while(pos<len)
    1c5a:	dd27      	ble.n	1cac <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1c5c:	f500 6984 	add.w	r9, r0, #1056	; 0x420
        int pos = 0; // into data
    1c60:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1c62:	f500 7808 	add.w	r8, r0, #544	; 0x220
    1c66:	4f12      	ldr	r7, [pc, #72]	; (1cb0 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1c68:	e001      	b.n	1c6e <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    1c6a:	42a6      	cmp	r6, r4
    1c6c:	dd1e      	ble.n	1cac <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1c6e:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    1c70:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    1c72:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1c74:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    1c78:	4618      	mov	r0, r3
    1c7a:	4592      	cmp	sl, r2
    1c7c:	bfa8      	it	ge
    1c7e:	4692      	movge	sl, r2
    1c80:	4652      	mov	r2, sl
          pos += to_copy;
    1c82:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    1c84:	f00a ff26 	bl	cad4 <memcpy>
    1c88:	4603      	mov	r3, r0
          src += to_copy;
    1c8a:	4455      	add	r5, sl
          dst += to_copy;
    1c8c:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c8e:	454b      	cmp	r3, r9
          dst += to_copy;
    1c90:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c92:	d1ea      	bne.n	1c6a <MTPD::write(char const*, int) [clone .part.0]+0x32>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1c94:	223c      	movs	r2, #60	; 0x3c
    1c96:	f44f 7100 	mov.w	r1, #512	; 0x200
    1c9a:	4640      	mov	r0, r8
    1c9c:	f00c f908 	bl	deb0 <usb_mtp_send>
    1ca0:	2800      	cmp	r0, #0
    1ca2:	ddf7      	ble.n	1c94 <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    1ca4:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    1ca6:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    1caa:	dce0      	bgt.n	1c6e <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    1cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cb0:	200423a8 	.word	0x200423a8

00001cb4 <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    1cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cb6:	4607      	mov	r7, r0
    1cb8:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    1cba:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    1cbc:	460c      	mov	r4, r1
    { if (write_get_length_) 
    1cbe:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
    { write8(strlen(str) + 1);
    1cc2:	f00f fb7d 	bl	113c0 <strlen>
    1cc6:	3001      	adds	r0, #1
    { if (write_get_length_) 
    1cc8:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    1ccc:	f88d 0006 	strb.w	r0, [sp, #6]
    1cd0:	b396      	cbz	r6, 1d38 <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    1cd2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1cd6:	3301      	adds	r3, #1
    1cd8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1cdc:	7823      	ldrb	r3, [r4, #0]
    1cde:	b973      	cbnz	r3, 1cfe <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    1ce0:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1ce4:	3302      	adds	r3, #2
    1ce6:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    1cea:	b003      	add	sp, #12
    1cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    1cee:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1cf2:	4413      	add	r3, r2
    1cf4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1cf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1cfc:	b17b      	cbz	r3, 1d1e <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    1cfe:	2202      	movs	r2, #2
    1d00:	f10d 0106 	add.w	r1, sp, #6
    1d04:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1d06:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1d0a:	2e00      	cmp	r6, #0
    1d0c:	d1ef      	bne.n	1cee <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    1d0e:	f7ff ff93 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1d12:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    1d16:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1d1a:	2b00      	cmp	r3, #0
    1d1c:	d1ef      	bne.n	1cfe <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    1d1e:	2300      	movs	r3, #0
    1d20:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1d24:	2e00      	cmp	r6, #0
    1d26:	d1db      	bne.n	1ce0 <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    1d28:	2202      	movs	r2, #2
    1d2a:	f10d 0106 	add.w	r1, sp, #6
    1d2e:	4638      	mov	r0, r7
    1d30:	f7ff ff82 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
  }
    1d34:	b003      	add	sp, #12
    1d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d38:	2201      	movs	r2, #1
    1d3a:	f10d 0106 	add.w	r1, sp, #6
    1d3e:	4638      	mov	r0, r7
    1d40:	f7ff ff7a 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1d44:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    1d46:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d1d7      	bne.n	1cfe <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    1d4e:	e7e6      	b.n	1d1e <MTPD::writestring(char const*) [clone .part.0]+0x6a>

00001d50 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1d50:	b570      	push	{r4, r5, r6, lr}
    1d52:	f24d 4302 	movw	r3, #54274	; 0xd402
    1d56:	b082      	sub	sp, #8
    { if (write_get_length_) 
    1d58:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1d5c:	4605      	mov	r5, r0
    1d5e:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1d62:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    1d66:	b31b      	cbz	r3, 1db0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    1d68:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    1d6c:	3302      	adds	r3, #2
    1d6e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    1d72:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    1d76:	3302      	adds	r3, #2
    1d78:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    1d7c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    1d80:	3301      	adds	r3, #1
    1d82:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    1d86:	491e      	ldr	r1, [pc, #120]	; (1e00 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    1d88:	4628      	mov	r0, r5
    1d8a:	f7ff ff93 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    1d8e:	491c      	ldr	r1, [pc, #112]	; (1e00 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    1d90:	4628      	mov	r0, r5
    1d92:	f7ff ff8f 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    1d96:	2200      	movs	r2, #0
    { if (write_get_length_) 
    1d98:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    1d9c:	f88d 2006 	strb.w	r2, [sp, #6]
    1da0:	b333      	cbz	r3, 1df0 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    1da2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    1da6:	3301      	adds	r3, #1
    1da8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    1dac:	b002      	add	sp, #8
    1dae:	bd70      	pop	{r4, r5, r6, pc}
    1db0:	2202      	movs	r2, #2
    1db2:	f10d 0106 	add.w	r1, sp, #6
    1db6:	f7ff ff3f 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    1dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    1dbe:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
        write16(0xFFFF); // string type
    1dc2:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1dc6:	2e00      	cmp	r6, #0
    1dc8:	d1d3      	bne.n	1d72 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    1dca:	2202      	movs	r2, #2
    1dcc:	f10d 0106 	add.w	r1, sp, #6
    1dd0:	4628      	mov	r0, r5
    1dd2:	f7ff ff31 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    1dd6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
        write8(0);       // read-only
    1dda:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    1dde:	2b00      	cmp	r3, #0
    1de0:	d1cc      	bne.n	1d7c <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    1de2:	2201      	movs	r2, #1
    1de4:	f10d 0106 	add.w	r1, sp, #6
    1de8:	4628      	mov	r0, r5
    1dea:	f7ff ff25 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    1dee:	e7ca      	b.n	1d86 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    1df0:	2201      	movs	r2, #1
    1df2:	f10d 0106 	add.w	r1, sp, #6
    1df6:	4628      	mov	r0, r5
    1df8:	f7ff ff1e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
  }
    1dfc:	b002      	add	sp, #8
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
    1e00:	20000b08 	.word	0x20000b08

00001e04 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    1e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    { if (write_get_length_) 
    1e08:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  void MTPD::WriteDescriptor() {
    1e0c:	b087      	sub	sp, #28
    1e0e:	2464      	movs	r4, #100	; 0x64
    1e10:	4607      	mov	r7, r0
    { if (write_get_length_) 
    1e12:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    1e16:	f8ad 4004 	strh.w	r4, [sp, #4]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	f000 813b 	beq.w	2096 <MTPD::WriteDescriptor()+0x292>
        write_length_ += len;
    1e20:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1e24:	f10d 0804 	add.w	r8, sp, #4
    1e28:	3302      	adds	r3, #2
    1e2a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1e2e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1e32:	3304      	adds	r3, #4
    1e34:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1e38:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1e3c:	3302      	adds	r3, #2
    1e3e:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    1e42:	49ac      	ldr	r1, [pc, #688]	; (20f4 <MTPD::WriteDescriptor()+0x2f0>)
    1e44:	4638      	mov	r0, r7
    1e46:	f7ff ff35 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    write16(0);    // functional mode
    1e4a:	2200      	movs	r2, #0
    { if (write_get_length_) 
    1e4c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    1e50:	f8ad 2004 	strh.w	r2, [sp, #4]
    1e54:	2b00      	cmp	r3, #0
    1e56:	f000 810a 	beq.w	206e <MTPD::WriteDescriptor()+0x26a>
        write_length_ += len;
    1e5a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1e5e:	3302      	adds	r3, #2
    1e60:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1e64:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1e68:	2601      	movs	r6, #1
    1e6a:	3304      	adds	r3, #4
    1e6c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1e70:	4ca1      	ldr	r4, [pc, #644]	; (20f8 <MTPD::WriteDescriptor()+0x2f4>)
    write32(supported_op_num);
    1e72:	f241 0301 	movw	r3, #4097	; 0x1001
    1e76:	f104 0926 	add.w	r9, r4, #38	; 0x26
    1e7a:	e008      	b.n	1e8e <MTPD::WriteDescriptor()+0x8a>
        write_length_ += len;
    1e7c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1e80:	454c      	cmp	r4, r9
        write_length_ += len;
    1e82:	4413      	add	r3, r2
    1e84:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1e88:	d00e      	beq.n	1ea8 <MTPD::WriteDescriptor()+0xa4>
    1e8a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    1e8e:	2202      	movs	r2, #2
    1e90:	4641      	mov	r1, r8
    1e92:	4638      	mov	r0, r7
    1e94:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    1e98:	2e00      	cmp	r6, #0
    1e9a:	d1ef      	bne.n	1e7c <MTPD::WriteDescriptor()+0x78>
    1e9c:	f7ff fecc 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1ea0:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    1ea2:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    1ea6:	d1f0      	bne.n	1e8a <MTPD::WriteDescriptor()+0x86>
    write32(supported_event_num);      
    1ea8:	2204      	movs	r2, #4
    1eaa:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    1eac:	2e00      	cmp	r6, #0
    1eae:	f000 80d7 	beq.w	2060 <MTPD::WriteDescriptor()+0x25c>
        write_length_ += len;
    1eb2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1eb6:	4413      	add	r3, r2
    1eb8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1ebc:	4c8f      	ldr	r4, [pc, #572]	; (20fc <MTPD::WriteDescriptor()+0x2f8>)
    write32(supported_event_num);      
    1ebe:	f244 0304 	movw	r3, #16388	; 0x4004
    1ec2:	2202      	movs	r2, #2
    1ec4:	4641      	mov	r1, r8
    1ec6:	f104 0906 	add.w	r9, r4, #6
    1eca:	4638      	mov	r0, r7
    1ecc:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    1ed0:	b17e      	cbz	r6, 1ef2 <MTPD::WriteDescriptor()+0xee>
        write_length_ += len;
    1ed2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    1ed6:	454c      	cmp	r4, r9
        write_length_ += len;
    1ed8:	4413      	add	r3, r2
    1eda:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    1ede:	d00e      	beq.n	1efe <MTPD::WriteDescriptor()+0xfa>
    1ee0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    1ee4:	2202      	movs	r2, #2
    1ee6:	4641      	mov	r1, r8
    1ee8:	4638      	mov	r0, r7
    1eea:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    1eee:	2e00      	cmp	r6, #0
    1ef0:	d1ef      	bne.n	1ed2 <MTPD::WriteDescriptor()+0xce>
    1ef2:	f7ff fea1 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    1ef6:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    1ef8:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    1efc:	d1f0      	bne.n	1ee0 <MTPD::WriteDescriptor()+0xdc>
    write32(1);       // Device properties (array of uint16)
    1efe:	2301      	movs	r3, #1
    1f00:	9301      	str	r3, [sp, #4]
    { if (write_get_length_) 
    1f02:	2e00      	cmp	r6, #0
    1f04:	d068      	beq.n	1fd8 <MTPD::WriteDescriptor()+0x1d4>
        write_length_ += len;
    1f06:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f0a:	3304      	adds	r3, #4
    1f0c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1f10:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f14:	3302      	adds	r3, #2
    1f16:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1f1a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f1e:	3304      	adds	r3, #4
    1f20:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1f24:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f28:	3304      	adds	r3, #4
    1f2a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1f2e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f32:	3302      	adds	r3, #2
    1f34:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1f38:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f3c:	3302      	adds	r3, #2
    1f3e:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    1f42:	496f      	ldr	r1, [pc, #444]	; (2100 <MTPD::WriteDescriptor()+0x2fc>)
    1f44:	4638      	mov	r0, r7
    1f46:	f7ff feb5 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    1f4a:	496e      	ldr	r1, [pc, #440]	; (2104 <MTPD::WriteDescriptor()+0x300>)
    1f4c:	4638      	mov	r0, r7
    1f4e:	f7ff feb1 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    1f52:	4642      	mov	r2, r8
    1f54:	2102      	movs	r1, #2
    1f56:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 2108 <MTPD::WriteDescriptor()+0x304>
    1f5a:	2003      	movs	r0, #3
    1f5c:	f00a fe88 	bl	cc70 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    1f60:	2214      	movs	r2, #20
    1f62:	496a      	ldr	r1, [pc, #424]	; (210c <MTPD::WriteDescriptor()+0x308>)
    1f64:	4640      	mov	r0, r8
    1f66:	f00e fe95 	bl	10c94 <strlcat>
    if (*str) 
    1f6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1f6e:	b1bb      	cbz	r3, 1fa0 <MTPD::WriteDescriptor()+0x19c>
    1f70:	4641      	mov	r1, r8
    1f72:	4638      	mov	r0, r7
    1f74:	f7ff fe9e 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    1f78:	4b65      	ldr	r3, [pc, #404]	; (2110 <MTPD::WriteDescriptor()+0x30c>)
    1f7a:	4642      	mov	r2, r8
    1f7c:	f103 0014 	add.w	r0, r3, #20
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    1f80:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    1f84:	4283      	cmp	r3, r0
    1f86:	f802 1b01 	strb.w	r1, [r2], #1
    1f8a:	d1f9      	bne.n	1f80 <MTPD::WriteDescriptor()+0x17c>
    if (*str) 
    1f8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    1f90:	b19b      	cbz	r3, 1fba <MTPD::WriteDescriptor()+0x1b6>
    1f92:	4641      	mov	r1, r8
    1f94:	4638      	mov	r0, r7
    1f96:	f7ff fe8d 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
  }
    1f9a:	b007      	add	sp, #28
    1f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if (write_get_length_) 
    1fa0:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    1fa4:	f88d 3003 	strb.w	r3, [sp, #3]
    1fa8:	2a00      	cmp	r2, #0
    1faa:	f000 809c 	beq.w	20e6 <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
    1fae:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1fb2:	3301      	adds	r3, #1
    1fb4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    1fb8:	e7de      	b.n	1f78 <MTPD::WriteDescriptor()+0x174>
    { if (write_get_length_) 
    1fba:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    1fbe:	f88d 3003 	strb.w	r3, [sp, #3]
    1fc2:	2a00      	cmp	r2, #0
    1fc4:	f000 8086 	beq.w	20d4 <MTPD::WriteDescriptor()+0x2d0>
        write_length_ += len;
    1fc8:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1fcc:	3301      	adds	r3, #1
    1fce:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    1fd2:	b007      	add	sp, #28
    1fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fd8:	2204      	movs	r2, #4
    1fda:	4641      	mov	r1, r8
    1fdc:	4638      	mov	r0, r7
    1fde:	f7ff fe2b 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    1fe2:	f24d 4202 	movw	r2, #54274	; 0xd402
    { if (write_get_length_) 
    1fe6:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0xd402);  // Device friendly name
    1fea:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d18e      	bne.n	1f10 <MTPD::WriteDescriptor()+0x10c>
    1ff2:	2202      	movs	r2, #2
    1ff4:	4641      	mov	r1, r8
    1ff6:	4638      	mov	r0, r7
    1ff8:	f7ff fe1e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    1ffc:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(0);       // Capture formats (array of uint16)
    2000:	9601      	str	r6, [sp, #4]
    { if (write_get_length_) 
    2002:	2b00      	cmp	r3, #0
    2004:	d189      	bne.n	1f1a <MTPD::WriteDescriptor()+0x116>
    2006:	2204      	movs	r2, #4
    2008:	4641      	mov	r1, r8
    200a:	4638      	mov	r0, r7
    200c:	2402      	movs	r4, #2
    200e:	f7ff fe13 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2012:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(2);       // Playback formats (array of uint16)
    2016:	9401      	str	r4, [sp, #4]
    { if (write_get_length_) 
    2018:	2b00      	cmp	r3, #0
    201a:	d183      	bne.n	1f24 <MTPD::WriteDescriptor()+0x120>
    201c:	2204      	movs	r2, #4
    201e:	4641      	mov	r1, r8
    2020:	4638      	mov	r0, r7
    2022:	f7ff fe09 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2026:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    202a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3000);  // Undefined format
    202e:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    2032:	2b00      	cmp	r3, #0
    2034:	f47f af7b 	bne.w	1f2e <MTPD::WriteDescriptor()+0x12a>
    2038:	4622      	mov	r2, r4
    203a:	4641      	mov	r1, r8
    203c:	4638      	mov	r0, r7
    203e:	f7ff fdfb 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2042:	f243 0201 	movw	r2, #12289	; 0x3001
    2046:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3001);  // Folders (associations)
    204a:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    204e:	2b00      	cmp	r3, #0
    2050:	f47f af72 	bne.w	1f38 <MTPD::WriteDescriptor()+0x134>
    2054:	4622      	mov	r2, r4
    2056:	4641      	mov	r1, r8
    2058:	4638      	mov	r0, r7
    205a:	f7ff fded 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    205e:	e770      	b.n	1f42 <MTPD::WriteDescriptor()+0x13e>
    2060:	4641      	mov	r1, r8
    2062:	4638      	mov	r0, r7
    2064:	f7ff fde8 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2068:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    206c:	e726      	b.n	1ebc <MTPD::WriteDescriptor()+0xb8>
    206e:	2202      	movs	r2, #2
    2070:	4641      	mov	r1, r8
    2072:	4638      	mov	r0, r7
    2074:	f7ff fde0 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2078:	2214      	movs	r2, #20
    207a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(supported_op_num);
    207e:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2080:	2b00      	cmp	r3, #0
    2082:	f47f aeef 	bne.w	1e64 <MTPD::WriteDescriptor()+0x60>
    2086:	2204      	movs	r2, #4
    2088:	4641      	mov	r1, r8
    208a:	4638      	mov	r0, r7
    208c:	f7ff fdd4 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2090:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    2094:	e6ec      	b.n	1e70 <MTPD::WriteDescriptor()+0x6c>
    2096:	f10d 0804 	add.w	r8, sp, #4
    209a:	2202      	movs	r2, #2
    209c:	4641      	mov	r1, r8
    209e:	f7ff fdcb 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    20a2:	2206      	movs	r2, #6
    20a4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(6);    // MTP extension
    20a8:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    20aa:	2b00      	cmp	r3, #0
    20ac:	f47f aebf 	bne.w	1e2e <MTPD::WriteDescriptor()+0x2a>
    20b0:	2204      	movs	r2, #4
    20b2:	4641      	mov	r1, r8
    20b4:	4638      	mov	r0, r7
    20b6:	f7ff fdbf 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    20ba:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(100);  // MTP version
    20be:	f8ad 4004 	strh.w	r4, [sp, #4]
    { if (write_get_length_) 
    20c2:	2b00      	cmp	r3, #0
    20c4:	f47f aeb8 	bne.w	1e38 <MTPD::WriteDescriptor()+0x34>
    20c8:	2202      	movs	r2, #2
    20ca:	4641      	mov	r1, r8
    20cc:	4638      	mov	r0, r7
    20ce:	f7ff fdb3 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    20d2:	e6b6      	b.n	1e42 <MTPD::WriteDescriptor()+0x3e>
    20d4:	2201      	movs	r2, #1
    20d6:	f10d 0103 	add.w	r1, sp, #3
    20da:	4638      	mov	r0, r7
    20dc:	f7ff fdac 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
  }
    20e0:	b007      	add	sp, #28
    20e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    20e6:	2201      	movs	r2, #1
    20e8:	f10d 0103 	add.w	r1, sp, #3
    20ec:	4638      	mov	r0, r7
    20ee:	f7ff fda3 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    20f2:	e741      	b.n	1f78 <MTPD::WriteDescriptor()+0x174>
    20f4:	20000ae0 	.word	0x20000ae0
    20f8:	2000091c 	.word	0x2000091c
    20fc:	20000944 	.word	0x20000944
    2100:	20000af4 	.word	0x20000af4
    2104:	20000b08 	.word	0x20000b08
    2108:	3fcb851f 	.word	0x3fcb851f
    210c:	20000afc 	.word	0x20000afc
    2110:	20009040 	.word	0x20009040

00002114 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    2114:	b5f0      	push	{r4, r5, r6, r7, lr}
    2116:	4606      	mov	r6, r0
    uint32_t num=storage_->get_FSCount();
    2118:	6800      	ldr	r0, [r0, #0]
    211a:	4a1b      	ldr	r2, [pc, #108]	; (2188 <MTPD::WriteStorageIDs()+0x74>)
  void MTPD::WriteStorageIDs() {
    211c:	b083      	sub	sp, #12
    uint32_t num=storage_->get_FSCount();
    211e:	6803      	ldr	r3, [r0, #0]
    2120:	685b      	ldr	r3, [r3, #4]
    2122:	4293      	cmp	r3, r2
    2124:	d12c      	bne.n	2180 <MTPD::WriteStorageIDs()+0x6c>
      uint32_t sd_getFSCount(void) {return fsCount;}
    2126:	6847      	ldr	r7, [r0, #4]
    { if (write_get_length_) 
    2128:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    212c:	9701      	str	r7, [sp, #4]
    212e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2132:	b1f3      	cbz	r3, 2172 <MTPD::WriteStorageIDs()+0x5e>
        write_length_ += len;
    2134:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2138:	3304      	adds	r3, #4
    213a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    213e:	b1b7      	cbz	r7, 216e <MTPD::WriteStorageIDs()+0x5a>
    2140:	2400      	movs	r4, #0
    2142:	e006      	b.n	2152 <MTPD::WriteStorageIDs()+0x3e>
        write_length_ += len;
    2144:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2148:	42bc      	cmp	r4, r7
        write_length_ += len;
    214a:	4413      	add	r3, r2
    214c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2150:	d00d      	beq.n	216e <MTPD::WriteStorageIDs()+0x5a>
    2152:	3401      	adds	r4, #1
    2154:	2204      	movs	r2, #4
    { if (write_get_length_) 
    2156:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    215a:	4630      	mov	r0, r6
    215c:	eb0d 0102 	add.w	r1, sp, r2
    2160:	9401      	str	r4, [sp, #4]
    2162:	2b00      	cmp	r3, #0
    2164:	d1ee      	bne.n	2144 <MTPD::WriteStorageIDs()+0x30>
    2166:	f7ff fd67 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    216a:	42bc      	cmp	r4, r7
    216c:	d1f1      	bne.n	2152 <MTPD::WriteStorageIDs()+0x3e>
  }
    216e:	b003      	add	sp, #12
    2170:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2172:	2204      	movs	r2, #4
    2174:	4630      	mov	r0, r6
    2176:	eb0d 0102 	add.w	r1, sp, r2
    217a:	f7ff fd5d 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    217e:	e7de      	b.n	213e <MTPD::WriteStorageIDs()+0x2a>
    uint32_t num=storage_->get_FSCount();
    2180:	4798      	blx	r3
    2182:	4607      	mov	r7, r0
    2184:	e7d0      	b.n	2128 <MTPD::WriteStorageIDs()+0x14>
    2186:	bf00      	nop
    2188:	00001c2d 	.word	0x00001c2d

0000218c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	4605      	mov	r5, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2192:	6800      	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    2194:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    2196:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2198:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    219a:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    219e:	4631      	mov	r1, r6
    21a0:	695b      	ldr	r3, [r3, #20]
    21a2:	4798      	blx	r3
    21a4:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    21a6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    21aa:	bf14      	ite	ne
    21ac:	2201      	movne	r2, #1
    21ae:	2204      	moveq	r2, #4
    21b0:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    21b4:	2b00      	cmp	r3, #0
    21b6:	d07c      	beq.n	22b2 <MTPD::GetStorageInfo(unsigned long)+0x126>
        write_length_ += len;
    21b8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21bc:	3302      	adds	r3, #2
    21be:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    21c2:	6828      	ldr	r0, [r5, #0]
    21c4:	4631      	mov	r1, r6
    21c6:	6803      	ldr	r3, [r0, #0]
    21c8:	699b      	ldr	r3, [r3, #24]
    21ca:	4798      	blx	r3
    { if (write_get_length_) 
    21cc:	f894 7424 	ldrb.w	r7, [r4, #1060]	; 0x424
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    21d0:	3001      	adds	r0, #1
    21d2:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    21d6:	2f00      	cmp	r7, #0
    21d8:	f000 80a7 	beq.w	232a <MTPD::GetStorageInfo(unsigned long)+0x19e>
        write_length_ += len;
    21dc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21e0:	3302      	adds	r3, #2
    21e2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    21e6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21ea:	3302      	adds	r3, #2
    21ec:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    uint64_t ntotal = storage_->totalSize(store) ; 
    21f0:	6828      	ldr	r0, [r5, #0]
    21f2:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    21f4:	f04f 0b00 	mov.w	fp, #0
    21f8:	6803      	ldr	r3, [r0, #0]
    21fa:	68db      	ldr	r3, [r3, #12]
    21fc:	4798      	blx	r3
    21fe:	4607      	mov	r7, r0
    uint64_t nused = storage_->usedSize(store) ; 
    2200:	6828      	ldr	r0, [r5, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    2202:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    2204:	4631      	mov	r1, r6
    2206:	6803      	ldr	r3, [r0, #0]
    2208:	691b      	ldr	r3, [r3, #16]
    220a:	4798      	blx	r3
    220c:	4681      	mov	r9, r0
    220e:	468a      	mov	sl, r1
    2210:	4855      	ldr	r0, [pc, #340]	; (2368 <MTPD::GetStorageInfo(unsigned long)+0x1dc>)
    2212:	2105      	movs	r1, #5
    2214:	f00c f9de 	bl	e5d4 <usb_serial_write>
    2218:	230a      	movs	r3, #10
    221a:	463a      	mov	r2, r7
    221c:	4853      	ldr	r0, [pc, #332]	; (236c <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    221e:	9300      	str	r3, [sp, #0]
    2220:	4643      	mov	r3, r8
    2222:	f8cd b004 	str.w	fp, [sp, #4]
    2226:	f00a f8a9 	bl	c37c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    222a:	4850      	ldr	r0, [pc, #320]	; (236c <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    222c:	f00a f868 	bl	c300 <Print::println()>
    2230:	2105      	movs	r1, #5
    2232:	484f      	ldr	r0, [pc, #316]	; (2370 <MTPD::GetStorageInfo(unsigned long)+0x1e4>)
    2234:	f00c f9ce 	bl	e5d4 <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2238:	230a      	movs	r3, #10
    223a:	464a      	mov	r2, r9
    223c:	484b      	ldr	r0, [pc, #300]	; (236c <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    223e:	9300      	str	r3, [sp, #0]
    2240:	4653      	mov	r3, sl
    2242:	f8cd b004 	str.w	fp, [sp, #4]
    2246:	f00a f899 	bl	c37c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    224a:	4848      	ldr	r0, [pc, #288]	; (236c <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    224c:	f00a f858 	bl	c300 <Print::println()>
    { if (write_get_length_) 
    2250:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2254:	e9cd 7802 	strd	r7, r8, [sp, #8]
    2258:	2b00      	cmp	r3, #0
    225a:	d043      	beq.n	22e4 <MTPD::GetStorageInfo(unsigned long)+0x158>
        write_length_ += len;
    225c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2260:	3308      	adds	r3, #8
    2262:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2266:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    226a:	3308      	adds	r3, #8
    226c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2270:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2274:	3304      	adds	r3, #4
    2276:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    const char *name = storage_->get_FSName(store);
    227a:	6828      	ldr	r0, [r5, #0]
    227c:	4a3d      	ldr	r2, [pc, #244]	; (2374 <MTPD::GetStorageInfo(unsigned long)+0x1e8>)
    227e:	6803      	ldr	r3, [r0, #0]
    2280:	689b      	ldr	r3, [r3, #8]
    2282:	4293      	cmp	r3, r2
    2284:	d16b      	bne.n	235e <MTPD::GetStorageInfo(unsigned long)+0x1d2>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    2286:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    228a:	6881      	ldr	r1, [r0, #8]
    if (*str) 
    228c:	780b      	ldrb	r3, [r1, #0]
    228e:	b1b3      	cbz	r3, 22be <MTPD::GetStorageInfo(unsigned long)+0x132>
    2290:	4628      	mov	r0, r5
    2292:	f7ff fd0f 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    2296:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    229a:	2200      	movs	r2, #0
    229c:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    22a0:	b9c3      	cbnz	r3, 22d4 <MTPD::GetStorageInfo(unsigned long)+0x148>
    22a2:	2201      	movs	r2, #1
    22a4:	a902      	add	r1, sp, #8
    22a6:	4628      	mov	r0, r5
    22a8:	f7ff fcc6 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
  }
    22ac:	b005      	add	sp, #20
    22ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22b2:	2202      	movs	r2, #2
    22b4:	a902      	add	r1, sp, #8
    22b6:	4628      	mov	r0, r5
    22b8:	f7ff fcbe 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    22bc:	e781      	b.n	21c2 <MTPD::GetStorageInfo(unsigned long)+0x36>
    { if (write_get_length_) 
    22be:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    22c2:	f88d 3008 	strb.w	r3, [sp, #8]
    22c6:	2a00      	cmp	r2, #0
    22c8:	d041      	beq.n	234e <MTPD::GetStorageInfo(unsigned long)+0x1c2>
        write_length_ += len;
    22ca:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    22ce:	3301      	adds	r3, #1
    22d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    22d4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    22d8:	3301      	adds	r3, #1
    22da:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    22de:	b005      	add	sp, #20
    22e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22e4:	2208      	movs	r2, #8
    22e6:	4628      	mov	r0, r5
    22e8:	eb0d 0102 	add.w	r1, sp, r2
    22ec:	f7ff fca4 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    22f0:	ebb7 0709 	subs.w	r7, r7, r9
    22f4:	eb68 030a 	sbc.w	r3, r8, sl
    22f8:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    22fc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2300:	2b00      	cmp	r3, #0
    2302:	d1b0      	bne.n	2266 <MTPD::GetStorageInfo(unsigned long)+0xda>
    2304:	2208      	movs	r2, #8
    2306:	4628      	mov	r0, r5
    2308:	eb0d 0102 	add.w	r1, sp, r2
    230c:	f7ff fc94 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2310:	f04f 32ff 	mov.w	r2, #4294967295
    2314:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write32(0xFFFFFFFFUL);  // free space (objects)
    2318:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    231a:	2b00      	cmp	r3, #0
    231c:	d1a8      	bne.n	2270 <MTPD::GetStorageInfo(unsigned long)+0xe4>
    231e:	2204      	movs	r2, #4
    2320:	a902      	add	r1, sp, #8
    2322:	4628      	mov	r0, r5
    2324:	f7ff fc88 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2328:	e7a7      	b.n	227a <MTPD::GetStorageInfo(unsigned long)+0xee>
    232a:	2202      	movs	r2, #2
    232c:	4628      	mov	r0, r5
    232e:	a902      	add	r1, sp, #8
    2330:	f7ff fc82 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2334:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2338:	f8ad 7008 	strh.w	r7, [sp, #8]
    233c:	2b00      	cmp	r3, #0
    233e:	f47f af52 	bne.w	21e6 <MTPD::GetStorageInfo(unsigned long)+0x5a>
    2342:	2202      	movs	r2, #2
    2344:	a902      	add	r1, sp, #8
    2346:	4628      	mov	r0, r5
    2348:	f7ff fc76 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    234c:	e750      	b.n	21f0 <MTPD::GetStorageInfo(unsigned long)+0x64>
    234e:	2201      	movs	r2, #1
    2350:	a902      	add	r1, sp, #8
    2352:	4628      	mov	r0, r5
    2354:	f7ff fc70 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2358:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    235c:	e79d      	b.n	229a <MTPD::GetStorageInfo(unsigned long)+0x10e>
    const char *name = storage_->get_FSName(store);
    235e:	4631      	mov	r1, r6
    2360:	4798      	blx	r3
    2362:	4601      	mov	r1, r0
    2364:	e792      	b.n	228c <MTPD::GetStorageInfo(unsigned long)+0x100>
    2366:	bf00      	nop
    2368:	20000ad0 	.word	0x20000ad0
    236c:	20008a54 	.word	0x20008a54
    2370:	20000ad8 	.word	0x20000ad8
    2374:	00001c31 	.word	0x00001c31

00002378 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    2378:	b570      	push	{r4, r5, r6, lr}
    237a:	4606      	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    237c:	6800      	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    237e:	1e4d      	subs	r5, r1, #1
    int num = 0;
    2380:	2400      	movs	r4, #0
    storage_->StartGetObjectHandles(store, parent);
    2382:	6803      	ldr	r3, [r0, #0]
    2384:	4629      	mov	r1, r5
    2386:	69db      	ldr	r3, [r3, #28]
    2388:	4798      	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    238a:	e000      	b.n	238e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    238c:	3401      	adds	r4, #1
    238e:	6830      	ldr	r0, [r6, #0]
    2390:	4629      	mov	r1, r5
    2392:	6803      	ldr	r3, [r0, #0]
    2394:	6a1b      	ldr	r3, [r3, #32]
    2396:	4798      	blx	r3
    2398:	2800      	cmp	r0, #0
    239a:	d1f7      	bne.n	238c <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
  }
    239c:	4620      	mov	r0, r4
    239e:	bd70      	pop	{r4, r5, r6, pc}

000023a0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    23a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    23a2:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    23a6:	b083      	sub	sp, #12
    if (write_get_length_) {
    23a8:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    23ac:	b13b      	cbz	r3, 23be <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    23ae:	f7ff ffe3 	bl	2378 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    23b2:	3001      	adds	r0, #1
      write_length_ *= 4;
    23b4:	0080      	lsls	r0, r0, #2
    23b6:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
  }
    23ba:	b003      	add	sp, #12
    23bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      write32(GetNumObjects(storage, parent));
    23be:	4604      	mov	r4, r0
    23c0:	460e      	mov	r6, r1
    23c2:	4617      	mov	r7, r2
    23c4:	f7ff ffd8 	bl	2378 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    { if (write_get_length_) 
    23c8:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    23cc:	9001      	str	r0, [sp, #4]
    23ce:	bb13      	cbnz	r3, 2416 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x76>
    23d0:	2204      	movs	r2, #4
    23d2:	4620      	mov	r0, r4
    23d4:	eb0d 0102 	add.w	r1, sp, r2
    23d8:	f7ff fc2e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    23dc:	6820      	ldr	r0, [r4, #0]
  { uint32_t store = Storage2Store(storage);
    23de:	3e01      	subs	r6, #1
      storage_->StartGetObjectHandles(store, parent);
    23e0:	463a      	mov	r2, r7
    23e2:	6803      	ldr	r3, [r0, #0]
    23e4:	4631      	mov	r1, r6
    23e6:	69db      	ldr	r3, [r3, #28]
    23e8:	4798      	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    23ea:	6820      	ldr	r0, [r4, #0]
    23ec:	4631      	mov	r1, r6
    23ee:	6803      	ldr	r3, [r0, #0]
    23f0:	6a1b      	ldr	r3, [r3, #32]
    23f2:	4798      	blx	r3
        write_length_ += len;
    23f4:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    23f6:	4603      	mov	r3, r0
    23f8:	4620      	mov	r0, r4
    23fa:	eb0d 0102 	add.w	r1, sp, r2
    23fe:	2b00      	cmp	r3, #0
    2400:	d0db      	beq.n	23ba <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1a>
    { if (write_get_length_) 
    2402:	f895 7424 	ldrb.w	r7, [r5, #1060]	; 0x424
    2406:	9301      	str	r3, [sp, #4]
    2408:	b15f      	cbz	r7, 2422 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x82>
        write_length_ += len;
    240a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    240e:	3304      	adds	r3, #4
    2410:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2414:	e7e9      	b.n	23ea <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>
    2416:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    241a:	3304      	adds	r3, #4
    241c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2420:	e7dc      	b.n	23dc <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x3c>
    2422:	f7ff fc09 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2426:	e7e0      	b.n	23ea <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>

00002428 <MTPD::GetObjectInfo(unsigned long)>:
  {
    2428:	b5f0      	push	{r4, r5, r6, r7, lr}
    242a:	4605      	mov	r5, r0
    242c:	b0c7      	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    242e:	6800      	ldr	r0, [r0, #0]
    2430:	f10d 040a 	add.w	r4, sp, #10
    2434:	af04      	add	r7, sp, #16
    2436:	6802      	ldr	r2, [r0, #0]
    2438:	ab03      	add	r3, sp, #12
    243a:	e9cd 7400 	strd	r7, r4, [sp]
    243e:	6a56      	ldr	r6, [r2, #36]	; 0x24
    2440:	aa06      	add	r2, sp, #24
    2442:	47b0      	blx	r6
    uint32_t storage = Store2Storage(store);
    2444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    { if (write_get_length_) 
    2448:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    uint32_t storage = Store2Storage(store);
    244c:	3301      	adds	r3, #1
    244e:	9305      	str	r3, [sp, #20]
    { if (write_get_length_) 
    2450:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2454:	2b00      	cmp	r3, #0
    2456:	f000 8090 	beq.w	257a <MTPD::GetObjectInfo(unsigned long)+0x152>
        write_length_ += len;
    245a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    245e:	3304      	adds	r3, #4
    2460:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2464:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2468:	3302      	adds	r3, #2
    246a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    246e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2472:	3302      	adds	r3, #2
    2474:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2478:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    247c:	3304      	adds	r3, #4
    247e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2482:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2486:	3302      	adds	r3, #2
    2488:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    248c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2490:	3304      	adds	r3, #4
    2492:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2496:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    249a:	3304      	adds	r3, #4
    249c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24a0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24a4:	3304      	adds	r3, #4
    24a6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24aa:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24ae:	3304      	adds	r3, #4
    24b0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24b4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24b8:	3304      	adds	r3, #4
    24ba:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24be:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24c2:	3304      	adds	r3, #4
    24c4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24c8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24cc:	3304      	adds	r3, #4
    24ce:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24d2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24d6:	3302      	adds	r3, #2
    24d8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24dc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24e0:	3304      	adds	r3, #4
    24e2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    24e6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    24ea:	3304      	adds	r3, #4
    24ec:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    24f0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    24f4:	b323      	cbz	r3, 2540 <MTPD::GetObjectInfo(unsigned long)+0x118>
    24f6:	a906      	add	r1, sp, #24
    24f8:	4628      	mov	r0, r5
    24fa:	f7ff fbdb 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    24fe:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    { write8(0);
    2502:	2300      	movs	r3, #0
    2504:	f88d 3014 	strb.w	r3, [sp, #20]
    { if (write_get_length_) 
    2508:	bb36      	cbnz	r6, 2558 <MTPD::GetObjectInfo(unsigned long)+0x130>
    250a:	2201      	movs	r2, #1
    250c:	a905      	add	r1, sp, #20
    250e:	4628      	mov	r0, r5
    2510:	f7ff fb92 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2514:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    2518:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    251c:	bb0b      	cbnz	r3, 2562 <MTPD::GetObjectInfo(unsigned long)+0x13a>
    251e:	2201      	movs	r2, #1
    2520:	a905      	add	r1, sp, #20
    2522:	4628      	mov	r0, r5
    2524:	f7ff fb88 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2528:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    252c:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    2530:	b9e3      	cbnz	r3, 256c <MTPD::GetObjectInfo(unsigned long)+0x144>
    2532:	2201      	movs	r2, #1
    2534:	a905      	add	r1, sp, #20
    2536:	4628      	mov	r0, r5
    2538:	f7ff fb7e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
  }
    253c:	b047      	add	sp, #284	; 0x11c
    253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2540:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    2544:	f88d 3014 	strb.w	r3, [sp, #20]
    2548:	2a00      	cmp	r2, #0
    254a:	f000 80c8 	beq.w	26de <MTPD::GetObjectInfo(unsigned long)+0x2b6>
        write_length_ += len;
    254e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2552:	3301      	adds	r3, #1
    2554:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2558:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    255c:	3301      	adds	r3, #1
    255e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2562:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2566:	3301      	adds	r3, #1
    2568:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    256c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2570:	3301      	adds	r3, #1
    2572:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2576:	b047      	add	sp, #284	; 0x11c
    2578:	bdf0      	pop	{r4, r5, r6, r7, pc}
    257a:	2204      	movs	r2, #4
    257c:	a905      	add	r1, sp, #20
    257e:	4628      	mov	r0, r5
    2580:	f7ff fb5a 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2584:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    2586:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    258a:	3301      	adds	r3, #1
    258c:	f243 0301 	movw	r3, #12289	; 0x3001
    2590:	bf18      	it	ne
    2592:	2300      	movne	r3, #0
    2594:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    2598:	2e00      	cmp	r6, #0
    259a:	f47f af63 	bne.w	2464 <MTPD::GetObjectInfo(unsigned long)+0x3c>
    259e:	2202      	movs	r2, #2
    25a0:	a905      	add	r1, sp, #20
    25a2:	4628      	mov	r0, r5
    25a4:	f7ff fb48 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    25a8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25ac:	f8ad 6014 	strh.w	r6, [sp, #20]
    25b0:	2b00      	cmp	r3, #0
    25b2:	f47f af5c 	bne.w	246e <MTPD::GetObjectInfo(unsigned long)+0x46>
    25b6:	2202      	movs	r2, #2
    25b8:	a905      	add	r1, sp, #20
    25ba:	4628      	mov	r0, r5
    25bc:	f7ff fb3c 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    25c0:	9b03      	ldr	r3, [sp, #12]
    25c2:	9305      	str	r3, [sp, #20]
    25c4:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25c8:	2b00      	cmp	r3, #0
    25ca:	f47f af55 	bne.w	2478 <MTPD::GetObjectInfo(unsigned long)+0x50>
    25ce:	2204      	movs	r2, #4
    25d0:	a905      	add	r1, sp, #20
    25d2:	4628      	mov	r0, r5
    25d4:	f7ff fb30 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    25d8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25dc:	f8ad 6014 	strh.w	r6, [sp, #20]
    25e0:	2b00      	cmp	r3, #0
    25e2:	f47f af4e 	bne.w	2482 <MTPD::GetObjectInfo(unsigned long)+0x5a>
    25e6:	2202      	movs	r2, #2
    25e8:	a905      	add	r1, sp, #20
    25ea:	4628      	mov	r0, r5
    25ec:	f7ff fb24 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    25f0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25f4:	9605      	str	r6, [sp, #20]
    25f6:	2b00      	cmp	r3, #0
    25f8:	f47f af48 	bne.w	248c <MTPD::GetObjectInfo(unsigned long)+0x64>
    25fc:	2204      	movs	r2, #4
    25fe:	a905      	add	r1, sp, #20
    2600:	4628      	mov	r0, r5
    2602:	f7ff fb19 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2606:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    260a:	9605      	str	r6, [sp, #20]
    260c:	2b00      	cmp	r3, #0
    260e:	f47f af42 	bne.w	2496 <MTPD::GetObjectInfo(unsigned long)+0x6e>
    2612:	2204      	movs	r2, #4
    2614:	a905      	add	r1, sp, #20
    2616:	4628      	mov	r0, r5
    2618:	f7ff fb0e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    261c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2620:	9605      	str	r6, [sp, #20]
    2622:	2b00      	cmp	r3, #0
    2624:	f47f af3c 	bne.w	24a0 <MTPD::GetObjectInfo(unsigned long)+0x78>
    2628:	2204      	movs	r2, #4
    262a:	a905      	add	r1, sp, #20
    262c:	4628      	mov	r0, r5
    262e:	f7ff fb03 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2632:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2636:	9605      	str	r6, [sp, #20]
    2638:	2b00      	cmp	r3, #0
    263a:	f47f af36 	bne.w	24aa <MTPD::GetObjectInfo(unsigned long)+0x82>
    263e:	2204      	movs	r2, #4
    2640:	a905      	add	r1, sp, #20
    2642:	4628      	mov	r0, r5
    2644:	f7ff faf8 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2648:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    264c:	9605      	str	r6, [sp, #20]
    264e:	2b00      	cmp	r3, #0
    2650:	f47f af30 	bne.w	24b4 <MTPD::GetObjectInfo(unsigned long)+0x8c>
    2654:	2204      	movs	r2, #4
    2656:	a905      	add	r1, sp, #20
    2658:	4628      	mov	r0, r5
    265a:	f7ff faed 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    265e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2662:	9605      	str	r6, [sp, #20]
    2664:	2b00      	cmp	r3, #0
    2666:	f47f af2a 	bne.w	24be <MTPD::GetObjectInfo(unsigned long)+0x96>
    266a:	2204      	movs	r2, #4
    266c:	a905      	add	r1, sp, #20
    266e:	4628      	mov	r0, r5
    2670:	f7ff fae2 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2674:	683b      	ldr	r3, [r7, #0]
    2676:	9305      	str	r3, [sp, #20]
    2678:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    267c:	2b00      	cmp	r3, #0
    267e:	f47f af23 	bne.w	24c8 <MTPD::GetObjectInfo(unsigned long)+0xa0>
    2682:	2204      	movs	r2, #4
    2684:	a905      	add	r1, sp, #20
    2686:	4628      	mov	r0, r5
    2688:	f7ff fad6 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    268c:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    268e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2692:	f1a3 33ff 	sub.w	r3, r3, #4294967295
    2696:	fab3 f383 	clz	r3, r3
    269a:	095b      	lsrs	r3, r3, #5
    269c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    26a0:	2e00      	cmp	r6, #0
    26a2:	f47f af16 	bne.w	24d2 <MTPD::GetObjectInfo(unsigned long)+0xaa>
    26a6:	2202      	movs	r2, #2
    26a8:	a905      	add	r1, sp, #20
    26aa:	4628      	mov	r0, r5
    26ac:	f7ff fac4 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    26b0:	9605      	str	r6, [sp, #20]
    26b2:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    26b6:	2e00      	cmp	r6, #0
    26b8:	f47f af10 	bne.w	24dc <MTPD::GetObjectInfo(unsigned long)+0xb4>
    26bc:	2204      	movs	r2, #4
    26be:	a905      	add	r1, sp, #20
    26c0:	4628      	mov	r0, r5
    26c2:	f7ff fab9 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    26c6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    26ca:	9605      	str	r6, [sp, #20]
    26cc:	2b00      	cmp	r3, #0
    26ce:	f47f af0a 	bne.w	24e6 <MTPD::GetObjectInfo(unsigned long)+0xbe>
    26d2:	2204      	movs	r2, #4
    26d4:	a905      	add	r1, sp, #20
    26d6:	4628      	mov	r0, r5
    26d8:	f7ff faae 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    26dc:	e708      	b.n	24f0 <MTPD::GetObjectInfo(unsigned long)+0xc8>
    26de:	2201      	movs	r2, #1
    26e0:	a905      	add	r1, sp, #20
    26e2:	4628      	mov	r0, r5
    26e4:	f7ff faa8 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    26e8:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    26ec:	e709      	b.n	2502 <MTPD::GetObjectInfo(unsigned long)+0xda>
    26ee:	bf00      	nop

000026f0 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    26f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    26f4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2774 <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    26f8:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    {
    26fc:	b082      	sub	sp, #8
    26fe:	4607      	mov	r7, r0
      write32(propertyListNum);
    2700:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2704:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    2708:	9301      	str	r3, [sp, #4]
    270a:	b34a      	cbz	r2, 2760 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    270c:	f8d5 2428 	ldr.w	r2, [r5, #1064]	; 0x428
    2710:	3204      	adds	r2, #4
    2712:	f8c5 2428 	str.w	r2, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2716:	b303      	cbz	r3, 275a <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2718:	4e15      	ldr	r6, [pc, #84]	; (2770 <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    271a:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    271e:	2400      	movs	r4, #0
    2720:	e00b      	b.n	273a <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    2722:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2726:	3401      	adds	r4, #1
        write_length_ += len;
    2728:	4413      	add	r3, r2
    272a:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    272e:	f8d8 3000 	ldr.w	r3, [r8]
    2732:	42a3      	cmp	r3, r4
    2734:	d911      	bls.n	275a <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2736:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    273a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    273e:	2202      	movs	r2, #2
    2740:	a901      	add	r1, sp, #4
    2742:	4638      	mov	r0, r7
    2744:	f8ad c004 	strh.w	ip, [sp, #4]
    2748:	2b00      	cmp	r3, #0
    274a:	d1ea      	bne.n	2722 <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    274c:	f7ff fa74 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2750:	3401      	adds	r4, #1
    2752:	f8d8 3000 	ldr.w	r3, [r8]
    2756:	42a3      	cmp	r3, r4
    2758:	d8ed      	bhi.n	2736 <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    275a:	b002      	add	sp, #8
    275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2760:	2204      	movs	r2, #4
    2762:	eb0d 0102 	add.w	r1, sp, r2
    2766:	f7ff fa67 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    276a:	f8d8 3000 	ldr.w	r3, [r8]
    276e:	e7d2      	b.n	2716 <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2770:	2000090c 	.word	0x2000090c
    2774:	20009018 	.word	0x20009018

00002778 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2778:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    277c:	440b      	add	r3, r1
    {
    277e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2780:	b085      	sub	sp, #20
      switch(p1)
    2782:	2b43      	cmp	r3, #67	; 0x43
    2784:	f200 808e 	bhi.w	28a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2788:	e8df f013 	tbh	[pc, r3, lsl #1]
    278c:	010700b9 	.word	0x010700b9
    2790:	01610125 	.word	0x01610125
    2794:	008c008c 	.word	0x008c008c
    2798:	0196008e 	.word	0x0196008e
    279c:	008c01a2 	.word	0x008c01a2
    27a0:	008c00d7 	.word	0x008c00d7
    27a4:	008c008c 	.word	0x008c008c
    27a8:	008c008c 	.word	0x008c008c
    27ac:	008c008c 	.word	0x008c008c
    27b0:	008c008c 	.word	0x008c008c
    27b4:	008c008c 	.word	0x008c008c
    27b8:	008c008c 	.word	0x008c008c
    27bc:	008c008c 	.word	0x008c008c
    27c0:	008c008c 	.word	0x008c008c
    27c4:	008c008c 	.word	0x008c008c
    27c8:	008c008c 	.word	0x008c008c
    27cc:	008c008c 	.word	0x008c008c
    27d0:	008c008c 	.word	0x008c008c
    27d4:	008c008c 	.word	0x008c008c
    27d8:	008c008c 	.word	0x008c008c
    27dc:	008c008c 	.word	0x008c008c
    27e0:	008c008c 	.word	0x008c008c
    27e4:	008c008c 	.word	0x008c008c
    27e8:	008c008c 	.word	0x008c008c
    27ec:	008c008c 	.word	0x008c008c
    27f0:	008c008c 	.word	0x008c008c
    27f4:	008c008c 	.word	0x008c008c
    27f8:	008c008c 	.word	0x008c008c
    27fc:	008c008c 	.word	0x008c008c
    2800:	008c008c 	.word	0x008c008c
    2804:	008c008c 	.word	0x008c008c
    2808:	008c008c 	.word	0x008c008c
    280c:	008c01ae 	.word	0x008c01ae
    2810:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2814:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2818:	f64d 4244 	movw	r2, #56388	; 0xdc44
    281c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2820:	f8ad 2008 	strh.w	r2, [sp, #8]
    2824:	2b00      	cmp	r3, #0
    2826:	d14a      	bne.n	28be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2828:	2202      	movs	r2, #2
    282a:	a902      	add	r1, sp, #8
    282c:	9001      	str	r0, [sp, #4]
    282e:	f7ff fa03 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2832:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2836:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    283a:	9801      	ldr	r0, [sp, #4]
    283c:	f8ad 3008 	strh.w	r3, [sp, #8]
    2840:	2e00      	cmp	r6, #0
    2842:	d141      	bne.n	28c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2844:	2202      	movs	r2, #2
    2846:	a902      	add	r1, sp, #8
    2848:	9001      	str	r0, [sp, #4]
    284a:	f7ff f9f5 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    284e:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2852:	9801      	ldr	r0, [sp, #4]
    2854:	f88d 6008 	strb.w	r6, [sp, #8]
    2858:	2d00      	cmp	r5, #0
    285a:	d13a      	bne.n	28d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    285c:	2201      	movs	r2, #1
    285e:	a902      	add	r1, sp, #8
    2860:	9001      	str	r0, [sp, #4]
    2862:	f7ff f9e9 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2866:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    286a:	9801      	ldr	r0, [sp, #4]
    286c:	f88d 5008 	strb.w	r5, [sp, #8]
    2870:	bba6      	cbnz	r6, 28dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2872:	2201      	movs	r2, #1
    2874:	a902      	add	r1, sp, #8
    2876:	9001      	str	r0, [sp, #4]
    2878:	f7ff f9de 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    287c:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2880:	9801      	ldr	r0, [sp, #4]
    2882:	9602      	str	r6, [sp, #8]
    2884:	bb7d      	cbnz	r5, 28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2886:	2204      	movs	r2, #4
    2888:	a902      	add	r1, sp, #8
    288a:	9001      	str	r0, [sp, #4]
    288c:	f7ff f9d4 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2890:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2894:	9801      	ldr	r0, [sp, #4]
    2896:	f88d 5008 	strb.w	r5, [sp, #8]
    289a:	bb4b      	cbnz	r3, 28f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    289c:	2201      	movs	r2, #1
    289e:	a902      	add	r1, sp, #8
    28a0:	f7ff f9ca 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    }
    28a4:	b005      	add	sp, #20
    28a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    28a8:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    28ac:	f64d 4207 	movw	r2, #56327	; 0xdc07
    28b0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28b4:	f8ad 2008 	strh.w	r2, [sp, #8]
    28b8:	2b00      	cmp	r3, #0
    28ba:	f000 8170 	beq.w	2b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    28be:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28c2:	3302      	adds	r3, #2
    28c4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28c8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28cc:	3302      	adds	r3, #2
    28ce:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28d2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28d6:	3301      	adds	r3, #1
    28d8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28dc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28e0:	3301      	adds	r3, #1
    28e2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28e6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28ea:	3304      	adds	r3, #4
    28ec:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28f0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28f4:	3301      	adds	r3, #1
    28f6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    }
    28fa:	b005      	add	sp, #20
    28fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    28fe:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2902:	f64d 4201 	movw	r2, #56321	; 0xdc01
    2906:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    290a:	f8ad 2008 	strh.w	r2, [sp, #8]
    290e:	b1f3      	cbz	r3, 294e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    2910:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2914:	3302      	adds	r3, #2
    2916:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    291a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    291e:	3302      	adds	r3, #2
    2920:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2924:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2928:	3301      	adds	r3, #1
    292a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    292e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2932:	3304      	adds	r3, #4
    2934:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2938:	e7d5      	b.n	28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    293a:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    293e:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    2942:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2946:	f8ad 2008 	strh.w	r2, [sp, #8]
    294a:	2b00      	cmp	r3, #0
    294c:	d1e0      	bne.n	2910 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    294e:	2202      	movs	r2, #2
    2950:	a902      	add	r1, sp, #8
    2952:	9001      	str	r0, [sp, #4]
    2954:	f7ff f970 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2958:	2306      	movs	r3, #6
    295a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    295e:	9801      	ldr	r0, [sp, #4]
    2960:	f8ad 3008 	strh.w	r3, [sp, #8]
    2964:	2e00      	cmp	r6, #0
    2966:	d1d8      	bne.n	291a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    2968:	2202      	movs	r2, #2
    296a:	a902      	add	r1, sp, #8
    296c:	9001      	str	r0, [sp, #4]
    296e:	f7ff f963 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2972:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2976:	9801      	ldr	r0, [sp, #4]
    2978:	f88d 6008 	strb.w	r6, [sp, #8]
    297c:	2d00      	cmp	r5, #0
    297e:	d1d1      	bne.n	2924 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    2980:	2201      	movs	r2, #1
    2982:	a902      	add	r1, sp, #8
    2984:	9001      	str	r0, [sp, #4]
    2986:	f7ff f957 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    298a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    298e:	9801      	ldr	r0, [sp, #4]
    2990:	9502      	str	r5, [sp, #8]
    2992:	2e00      	cmp	r6, #0
    2994:	d1cb      	bne.n	292e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    2996:	2204      	movs	r2, #4
    2998:	e76c      	b.n	2874 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    299a:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    299e:	f64d 4202 	movw	r2, #56322	; 0xdc02
    29a2:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    29a6:	f8ad 2008 	strh.w	r2, [sp, #8]
    29aa:	b1f3      	cbz	r3, 29ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    29ac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29b0:	3302      	adds	r3, #2
    29b2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29b6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29ba:	3302      	adds	r3, #2
    29bc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29c0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29c4:	3301      	adds	r3, #1
    29c6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29ca:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29ce:	3302      	adds	r3, #2
    29d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    29d4:	e787      	b.n	28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    29d6:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    29da:	f64d 4203 	movw	r2, #56323	; 0xdc03
    29de:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    29e2:	f8ad 2008 	strh.w	r2, [sp, #8]
    29e6:	2b00      	cmp	r3, #0
    29e8:	d1e0      	bne.n	29ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    29ea:	2202      	movs	r2, #2
    29ec:	a902      	add	r1, sp, #8
    29ee:	9001      	str	r0, [sp, #4]
    29f0:	2604      	movs	r6, #4
    29f2:	f7ff f921 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    29f6:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    29fa:	9801      	ldr	r0, [sp, #4]
    29fc:	f8ad 6008 	strh.w	r6, [sp, #8]
    2a00:	2d00      	cmp	r5, #0
    2a02:	d1d8      	bne.n	29b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    2a04:	2202      	movs	r2, #2
    2a06:	a902      	add	r1, sp, #8
    2a08:	9001      	str	r0, [sp, #4]
    2a0a:	f7ff f915 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2a0e:	f88d 5008 	strb.w	r5, [sp, #8]
    2a12:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2a16:	9801      	ldr	r0, [sp, #4]
    2a18:	2d00      	cmp	r5, #0
    2a1a:	d1d1      	bne.n	29c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    2a1c:	2201      	movs	r2, #1
    2a1e:	a902      	add	r1, sp, #8
    2a20:	9001      	str	r0, [sp, #4]
    2a22:	f7ff f909 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2a26:	f8ad 5008 	strh.w	r5, [sp, #8]
    2a2a:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2a2e:	9801      	ldr	r0, [sp, #4]
    2a30:	2d00      	cmp	r5, #0
    2a32:	d1ca      	bne.n	29ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    2a34:	2202      	movs	r2, #2
    2a36:	a902      	add	r1, sp, #8
    2a38:	9001      	str	r0, [sp, #4]
    2a3a:	f7ff f8fd 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2a3e:	9502      	str	r5, [sp, #8]
    2a40:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2a44:	9801      	ldr	r0, [sp, #4]
    2a46:	2d00      	cmp	r5, #0
    2a48:	f43f af1d 	beq.w	2886 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    2a4c:	e74b      	b.n	28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2a4e:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2a52:	f64d 4204 	movw	r2, #56324	; 0xdc04
    2a56:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a5a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	f040 80e1 	bne.w	2c26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    2a64:	2202      	movs	r2, #2
    2a66:	a902      	add	r1, sp, #8
    2a68:	9001      	str	r0, [sp, #4]
    2a6a:	2508      	movs	r5, #8
    2a6c:	f7ff f8e4 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2a70:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2a74:	9801      	ldr	r0, [sp, #4]
    2a76:	f8ad 5008 	strh.w	r5, [sp, #8]
    2a7a:	2e00      	cmp	r6, #0
    2a7c:	f040 80d8 	bne.w	2c30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    2a80:	2202      	movs	r2, #2
    2a82:	a902      	add	r1, sp, #8
    2a84:	9001      	str	r0, [sp, #4]
    2a86:	f7ff f8d7 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2a8a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a8e:	9801      	ldr	r0, [sp, #4]
    2a90:	f88d 6008 	strb.w	r6, [sp, #8]
    2a94:	2b00      	cmp	r3, #0
    2a96:	f040 80d0 	bne.w	2c3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    2a9a:	2201      	movs	r2, #1
    2a9c:	a902      	add	r1, sp, #8
    2a9e:	9001      	str	r0, [sp, #4]
    2aa0:	f7ff f8ca 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2aa4:	2200      	movs	r2, #0
    2aa6:	2300      	movs	r3, #0
    2aa8:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2aac:	9801      	ldr	r0, [sp, #4]
    2aae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2ab2:	bbb6      	cbnz	r6, 2b22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2ab4:	462a      	mov	r2, r5
    2ab6:	e6dd      	b.n	2874 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2ab8:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2abc:	f64d 4208 	movw	r2, #56328	; 0xdc08
    2ac0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ac4:	f8ad 2008 	strh.w	r2, [sp, #8]
    2ac8:	2b00      	cmp	r3, #0
    2aca:	f43f aead 	beq.w	2828 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2ace:	e6f6      	b.n	28be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2ad0:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2ad4:	f64d 4209 	movw	r2, #56329	; 0xdc09
    2ad8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2adc:	f8ad 2008 	strh.w	r2, [sp, #8]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	f43f aea1 	beq.w	2828 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2ae6:	e6ea      	b.n	28be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2ae8:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2aec:	f64d 4241 	movw	r2, #56385	; 0xdc41
    2af0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2af4:	f8ad 2008 	strh.w	r2, [sp, #8]
    2af8:	b1cb      	cbz	r3, 2b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    2afa:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2afe:	3302      	adds	r3, #2
    2b00:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b04:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b08:	3302      	adds	r3, #2
    2b0a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b0e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b12:	3301      	adds	r3, #1
    2b14:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b18:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b1c:	3308      	adds	r3, #8
    2b1e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b22:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b26:	3308      	adds	r3, #8
    2b28:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2b2c:	e6db      	b.n	28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2b2e:	2202      	movs	r2, #2
    2b30:	a902      	add	r1, sp, #8
    2b32:	9001      	str	r0, [sp, #4]
    2b34:	f7ff f880 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2b38:	230a      	movs	r3, #10
    2b3a:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2b3e:	9801      	ldr	r0, [sp, #4]
    2b40:	f8ad 3008 	strh.w	r3, [sp, #8]
    2b44:	2d00      	cmp	r5, #0
    2b46:	d1dd      	bne.n	2b04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    2b48:	2202      	movs	r2, #2
    2b4a:	a902      	add	r1, sp, #8
    2b4c:	9001      	str	r0, [sp, #4]
    2b4e:	f7ff f873 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2b52:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b56:	9801      	ldr	r0, [sp, #4]
    2b58:	f88d 5008 	strb.w	r5, [sp, #8]
    2b5c:	2b00      	cmp	r3, #0
    2b5e:	d1d6      	bne.n	2b0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    2b60:	2201      	movs	r2, #1
    2b62:	a902      	add	r1, sp, #8
    2b64:	9001      	str	r0, [sp, #4]
    2b66:	2600      	movs	r6, #0
    2b68:	f7ff f866 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2b6c:	2700      	movs	r7, #0
    2b6e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b72:	9801      	ldr	r0, [sp, #4]
    2b74:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d1cd      	bne.n	2b18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2b7c:	2208      	movs	r2, #8
    2b7e:	9001      	str	r0, [sp, #4]
    2b80:	eb0d 0102 	add.w	r1, sp, r2
    2b84:	f7ff f858 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2b88:	9801      	ldr	r0, [sp, #4]
    2b8a:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2b8e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2b92:	2e00      	cmp	r6, #0
    2b94:	d1c5      	bne.n	2b22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2b96:	2208      	movs	r2, #8
    2b98:	eb0d 0102 	add.w	r1, sp, r2
    2b9c:	e66b      	b.n	2876 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    2b9e:	2202      	movs	r2, #2
    2ba0:	a902      	add	r1, sp, #8
    2ba2:	9001      	str	r0, [sp, #4]
    2ba4:	f7ff f848 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2bac:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2bb0:	9801      	ldr	r0, [sp, #4]
    2bb2:	f8ad 2008 	strh.w	r2, [sp, #8]
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	f47f ae86 	bne.w	28c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2bbc:	2202      	movs	r2, #2
    2bbe:	a902      	add	r1, sp, #8
    2bc0:	9001      	str	r0, [sp, #4]
    2bc2:	2501      	movs	r5, #1
    2bc4:	f7ff f838 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2bc8:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2bcc:	9801      	ldr	r0, [sp, #4]
    2bce:	f88d 5008 	strb.w	r5, [sp, #8]
    2bd2:	2e00      	cmp	r6, #0
    2bd4:	f47f ae7d 	bne.w	28d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2bd8:	462a      	mov	r2, r5
    2bda:	a902      	add	r1, sp, #8
    2bdc:	9001      	str	r0, [sp, #4]
    2bde:	f7ff f82b 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2be2:	f88d 6008 	strb.w	r6, [sp, #8]
    2be6:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2bea:	9801      	ldr	r0, [sp, #4]
    2bec:	2e00      	cmp	r6, #0
    2bee:	f47f ae75 	bne.w	28dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2bf2:	462a      	mov	r2, r5
    2bf4:	a902      	add	r1, sp, #8
    2bf6:	9001      	str	r0, [sp, #4]
    2bf8:	f7ff f81e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2bfc:	9602      	str	r6, [sp, #8]
    2bfe:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2c02:	9801      	ldr	r0, [sp, #4]
    2c04:	2e00      	cmp	r6, #0
    2c06:	f47f ae6e 	bne.w	28e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2c0a:	2204      	movs	r2, #4
    2c0c:	a902      	add	r1, sp, #8
    2c0e:	9001      	str	r0, [sp, #4]
    2c10:	f7ff f812 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2c14:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2c18:	9801      	ldr	r0, [sp, #4]
    2c1a:	f88d 6008 	strb.w	r6, [sp, #8]
    2c1e:	2b00      	cmp	r3, #0
    2c20:	f43f ae3c 	beq.w	289c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    2c24:	e664      	b.n	28f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    2c26:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c2a:	3302      	adds	r3, #2
    2c2c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2c30:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c34:	3302      	adds	r3, #2
    2c36:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2c3a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c3e:	3301      	adds	r3, #1
    2c40:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2c44:	e76d      	b.n	2b22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2c46:	bf00      	nop

00002c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    2c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2c4c:	4604      	mov	r4, r0
    2c4e:	b0c7      	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2c50:	6800      	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    2c52:	4615      	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2c54:	f10d 070a 	add.w	r7, sp, #10
    2c58:	f10d 0810 	add.w	r8, sp, #16
    2c5c:	6803      	ldr	r3, [r0, #0]
    2c5e:	aa06      	add	r2, sp, #24
    2c60:	9701      	str	r7, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    2c62:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2c64:	f8cd 8000 	str.w	r8, [sp]
    2c68:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    2c6c:	ab03      	add	r3, sp, #12
    2c6e:	47c8      	blx	r9
      switch(p2)
    2c70:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    2c74:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    2c76:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    2c78:	9903      	ldr	r1, [sp, #12]
      uint32_t storage = Store2Storage(store);
    2c7a:	1c55      	adds	r5, r2, #1
      switch(p2)
    2c7c:	2b43      	cmp	r3, #67	; 0x43
    2c7e:	d851      	bhi.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    2c80:	e8df f003 	tbb	[pc, r3]
    2c84:	96baa789 	.word	0x96baa789
    2c88:	5b535050 	.word	0x5b535050
    2c8c:	5077505b 	.word	0x5077505b
    2c90:	50505050 	.word	0x50505050
    2c94:	50505050 	.word	0x50505050
    2c98:	50505050 	.word	0x50505050
    2c9c:	50505050 	.word	0x50505050
    2ca0:	50505050 	.word	0x50505050
    2ca4:	50505050 	.word	0x50505050
    2ca8:	50505050 	.word	0x50505050
    2cac:	50505050 	.word	0x50505050
    2cb0:	50505050 	.word	0x50505050
    2cb4:	50505050 	.word	0x50505050
    2cb8:	50505050 	.word	0x50505050
    2cbc:	50505050 	.word	0x50505050
    2cc0:	50505050 	.word	0x50505050
    2cc4:	53505022 	.word	0x53505022
          write32(p1);
    2cc8:	9605      	str	r6, [sp, #20]
    { if (write_get_length_) 
    2cca:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    2cce:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	f040 80b6 	bne.w	2e44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1fc>
    2cd8:	2204      	movs	r2, #4
    2cda:	a905      	add	r1, sp, #20
    2cdc:	4620      	mov	r0, r4
    2cde:	f7fe ffab 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2ce2:	f8d8 3000 	ldr.w	r3, [r8]
    2ce6:	9305      	str	r3, [sp, #20]
    2ce8:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    2cec:	2b00      	cmp	r3, #0
    2cee:	f040 80ae 	bne.w	2e4e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x206>
    2cf2:	2204      	movs	r2, #4
    2cf4:	a905      	add	r1, sp, #20
    2cf6:	4620      	mov	r0, r4
    2cf8:	f7fe ff9e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2cfc:	f896 7424 	ldrb.w	r7, [r6, #1060]	; 0x424
          write32(storage);
    2d00:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    2d02:	2f00      	cmp	r7, #0
    2d04:	d15a      	bne.n	2dbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    2d06:	2204      	movs	r2, #4
    2d08:	a905      	add	r1, sp, #20
    2d0a:	4620      	mov	r0, r4
    2d0c:	f7fe ff94 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    2d10:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    2d14:	9705      	str	r7, [sp, #20]
    { if (write_get_length_) 
    2d16:	2b00      	cmp	r3, #0
    2d18:	d155      	bne.n	2dc6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
    2d1a:	2204      	movs	r2, #4
    2d1c:	a905      	add	r1, sp, #20
    2d1e:	4620      	mov	r0, r4
    2d20:	f7fe ff8a 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2d24:	b047      	add	sp, #284	; 0x11c
    2d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*str) 
    2d2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2d2e:	b193      	cbz	r3, 2d56 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10e>
    2d30:	a906      	add	r1, sp, #24
    2d32:	4620      	mov	r0, r4
    2d34:	f7fe ffbe 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
    2d38:	e7f4      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2d3a:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    2d3e:	2100      	movs	r1, #0
    2d40:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    2d44:	f88d 1014 	strb.w	r1, [sp, #20]
    2d48:	b16a      	cbz	r2, 2d66 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x11e>
        write_length_ += len;
    2d4a:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    2d4e:	3201      	adds	r2, #1
    2d50:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    2d54:	e7e6      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2d56:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
    2d5a:	f88d 3014 	strb.w	r3, [sp, #20]
    2d5e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
    2d62:	2900      	cmp	r1, #0
    2d64:	d156      	bne.n	2e14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    2d66:	2201      	movs	r2, #1
    2d68:	a905      	add	r1, sp, #20
    2d6a:	4620      	mov	r0, r4
    2d6c:	f7fe ff64 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2d70:	e7d8      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write32((store==parent)? 0: parent);
    2d72:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2d76:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
          write32((store==parent)? 0: parent);
    2d7a:	429a      	cmp	r2, r3
    2d7c:	bf08      	it	eq
    2d7e:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    2d80:	f891 2424 	ldrb.w	r2, [r1, #1060]	; 0x424
    2d84:	9305      	str	r3, [sp, #20]
    2d86:	2a00      	cmp	r2, #0
    2d88:	d0c7      	beq.n	2d1a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    2d8a:	f8d1 3428 	ldr.w	r3, [r1, #1064]	; 0x428
    2d8e:	3304      	adds	r3, #4
    2d90:	f8c1 3428 	str.w	r3, [r1, #1064]	; 0x428
    2d94:	e7c6      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2d96:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    2d9a:	9505      	str	r5, [sp, #20]
    2d9c:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    2da0:	2a00      	cmp	r2, #0
    2da2:	d0ba      	beq.n	2d1a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    2da4:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    2da8:	3204      	adds	r2, #4
    2daa:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    2dae:	e7b9      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2db0:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    2db4:	9105      	str	r1, [sp, #20]
    2db6:	f896 5424 	ldrb.w	r5, [r6, #1060]	; 0x424
    2dba:	b3bd      	cbz	r5, 2e2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e4>
        write_length_ += len;
    2dbc:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    2dc0:	3304      	adds	r3, #4
    2dc2:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    2dc6:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    2dca:	3304      	adds	r3, #4
    2dcc:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    2dd0:	e7a8      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write16(dir?0x3001:0x3000);
    2dd2:	3101      	adds	r1, #1
    { if (write_get_length_) 
    2dd4:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
          write16(dir?0x3001:0x3000);
    2dd8:	f243 0301 	movw	r3, #12289	; 0x3001
    { if (write_get_length_) 
    2ddc:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
          write16(dir?0x3001:0x3000);
    2de0:	bf18      	it	ne
    2de2:	f44f 5340 	movne.w	r3, #12288	; 0x3000
    2de6:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    2dea:	b169      	cbz	r1, 2e08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c0>
        write_length_ += len;
    2dec:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    2df0:	3302      	adds	r3, #2
    2df2:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    2df6:	e795      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2df8:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    2dfc:	2100      	movs	r1, #0
    2dfe:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    2e02:	f8ad 1014 	strh.w	r1, [sp, #20]
    2e06:	b95a      	cbnz	r2, 2e20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d8>
    2e08:	2202      	movs	r2, #2
    2e0a:	a905      	add	r1, sp, #20
    2e0c:	4620      	mov	r0, r4
    2e0e:	f7fe ff13 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
          break;
    2e12:	e787      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
    2e14:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    2e18:	3301      	adds	r3, #1
    2e1a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    2e1e:	e781      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    2e20:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    2e24:	3202      	adds	r2, #2
    2e26:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    2e2a:	e77b      	b.n	2d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    2e2c:	2204      	movs	r2, #4
    2e2e:	a905      	add	r1, sp, #20
    2e30:	4620      	mov	r0, r4
    2e32:	f7fe ff01 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    2e36:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    2e3a:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    2e3c:	2b00      	cmp	r3, #0
    2e3e:	f43f af6c 	beq.w	2d1a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
    2e42:	e7c0      	b.n	2dc6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
        write_length_ += len;
    2e44:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    2e48:	3304      	adds	r3, #4
    2e4a:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    2e4e:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    2e52:	3304      	adds	r3, #4
    2e54:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    { if (write_get_length_) 
    2e58:	e7b0      	b.n	2dbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    2e5a:	bf00      	nop

00002e5c <MTPD::GetObject(unsigned long)>:
    {
    2e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e60:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    2e62:	6800      	ldr	r0, [r0, #0]
    2e64:	6803      	ldr	r3, [r0, #0]
      if (write_get_length_) {
    2e66:	f50b 5800 	add.w	r8, fp, #8192	; 0x2000
    {
    2e6a:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    2e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    2e70:	b085      	sub	sp, #20
    2e72:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    2e76:	4798      	blx	r3
      if (write_get_length_) {
    2e78:	f898 6424 	ldrb.w	r6, [r8, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    2e7c:	4682      	mov	sl, r0
      if (write_get_length_) {
    2e7e:	b14e      	cbz	r6, 2e94 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    2e80:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    2e84:	4403      	add	r3, r0
    2e86:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    }
    2e8a:	b005      	add	sp, #20
    2e8c:	ecbd 8b02 	vpop	{d8}
    2e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    2e94:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    2e98:	f8c8 4420 	str.w	r4, [r8, #1056]	; 0x420
        while(pos<size)
    2e9c:	2800      	cmp	r0, #0
    2e9e:	d060      	beq.n	2f62 <MTPD::GetObject(unsigned long)+0x106>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2ea0:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ea4:	f50b 7908 	add.w	r9, fp, #544	; 0x220
            disk_pos=0;
    2ea8:	f8cd b00c 	str.w	fp, [sp, #12]
        uint32_t len = sizeof(MTPHeader);
    2eac:	250c      	movs	r5, #12
            disk_pos=0;
    2eae:	469b      	mov	fp, r3
    2eb0:	e022      	b.n	2ef8 <MTPD::GetObject(unsigned long)+0x9c>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2eb2:	ebaa 0306 	sub.w	r3, sl, r6
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2eb6:	eb0b 0104 	add.w	r1, fp, r4
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2eba:	9302      	str	r3, [sp, #8]
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    2ebc:	f5c4 5300 	rsb	r3, r4, #8192	; 0x2000
    2ec0:	9f02      	ldr	r7, [sp, #8]
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    2ec2:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2ec6:	eb09 0005 	add.w	r0, r9, r5
    2eca:	429f      	cmp	r7, r3
    2ecc:	bf28      	it	cs
    2ece:	461f      	movcs	r7, r3
    2ed0:	4297      	cmp	r7, r2
    2ed2:	bf28      	it	cs
    2ed4:	4617      	movcs	r7, r2
    2ed6:	463a      	mov	r2, r7
          len += to_copy;
    2ed8:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2eda:	f009 fdfb 	bl	cad4 <memcpy>
          disk_pos += to_copy;
    2ede:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    2ee2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    2ee6:	443e      	add	r6, r7
          disk_pos += to_copy;
    2ee8:	443b      	add	r3, r7
    2eea:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    2eee:	d021      	beq.n	2f34 <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    2ef0:	45b2      	cmp	sl, r6
    2ef2:	d92b      	bls.n	2f4c <MTPD::GetObject(unsigned long)+0xf0>
          if(disk_pos==DISK_BUFFER_SIZE)
    2ef4:	f8d8 4420 	ldr.w	r4, [r8, #1056]	; 0x420
    2ef8:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    2efc:	d1d9      	bne.n	2eb2 <MTPD::GetObject(unsigned long)+0x56>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2efe:	ebaa 0706 	sub.w	r7, sl, r6
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2f02:	9b03      	ldr	r3, [sp, #12]
    2f04:	4632      	mov	r2, r6
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    2f06:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    2f0a:	6818      	ldr	r0, [r3, #0]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    2f0c:	9702      	str	r7, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2f0e:	465b      	mov	r3, fp
    2f10:	6801      	ldr	r1, [r0, #0]
    2f12:	bf34      	ite	cc
    2f14:	46bc      	movcc	ip, r7
    2f16:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    2f1a:	f8cd c000 	str.w	ip, [sp]
    2f1e:	6b09      	ldr	r1, [r1, #48]	; 0x30
    2f20:	460f      	mov	r7, r1
    2f22:	ee18 1a10 	vmov	r1, s16
    2f26:	47b8      	blx	r7
            disk_pos=0;
    2f28:	2200      	movs	r2, #0
    2f2a:	4623      	mov	r3, r4
    2f2c:	4659      	mov	r1, fp
    2f2e:	f8c8 2420 	str.w	r2, [r8, #1056]	; 0x420
    2f32:	e7c5      	b.n	2ec0 <MTPD::GetObject(unsigned long)+0x64>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f34:	223c      	movs	r2, #60	; 0x3c
    2f36:	f44f 7100 	mov.w	r1, #512	; 0x200
    2f3a:	4648      	mov	r0, r9
    2f3c:	f00a ffb8 	bl	deb0 <usb_mtp_send>
    2f40:	2800      	cmp	r0, #0
    2f42:	ddf7      	ble.n	2f34 <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    2f44:	45b2      	cmp	sl, r6
            len=0;
    2f46:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    2f4a:	d8d3      	bhi.n	2ef4 <MTPD::GetObject(unsigned long)+0x98>
        if(len>0)
    2f4c:	2d00      	cmp	r5, #0
    2f4e:	d09c      	beq.n	2e8a <MTPD::GetObject(unsigned long)+0x2e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f50:	223c      	movs	r2, #60	; 0x3c
    2f52:	f44f 7100 	mov.w	r1, #512	; 0x200
    2f56:	4648      	mov	r0, r9
    2f58:	f00a ffaa 	bl	deb0 <usb_mtp_send>
    2f5c:	2800      	cmp	r0, #0
    2f5e:	ddf7      	ble.n	2f50 <MTPD::GetObject(unsigned long)+0xf4>
    2f60:	e793      	b.n	2e8a <MTPD::GetObject(unsigned long)+0x2e>
    2f62:	f50b 7908 	add.w	r9, fp, #544	; 0x220
    2f66:	e7f3      	b.n	2f50 <MTPD::GetObject(unsigned long)+0xf4>

00002f68 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    2f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f6c:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    2f6e:	6800      	ldr	r0, [r0, #0]
    {
    2f70:	461c      	mov	r4, r3
    2f72:	4615      	mov	r5, r2
      uint32_t size = storage_->GetSize(object_id);
    2f74:	6803      	ldr	r3, [r0, #0]
    {
    2f76:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    2f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    2f7c:	b087      	sub	sp, #28
    2f7e:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    2f82:	4798      	blx	r3
      if(NumBytes == 0xffffffff) NumBytes=size;
    2f84:	1c63      	adds	r3, r4, #1
      size -= offset;
    2f86:	eba0 0805 	sub.w	r8, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    2f8a:	d002      	beq.n	2f92 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x2a>
    2f8c:	45a0      	cmp	r8, r4
    2f8e:	bf28      	it	cs
    2f90:	46a0      	movcs	r8, r4
      if (write_get_length_) {
    2f92:	f50b 5700 	add.w	r7, fp, #8192	; 0x2000
    2f96:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
    2f9a:	9304      	str	r3, [sp, #16]
    2f9c:	b153      	cbz	r3, 2fb4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    2f9e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    2fa2:	4443      	add	r3, r8
    2fa4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    }
    2fa8:	4640      	mov	r0, r8
    2faa:	b007      	add	sp, #28
    2fac:	ecbd 8b02 	vpop	{d8}
    2fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    2fb4:	f44f 5400 	mov.w	r4, #8192	; 0x2000
        while(pos<size)
    2fb8:	4545      	cmp	r5, r8
        disk_pos=DISK_BUFFER_SIZE;
    2fba:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
        while(pos<size)
    2fbe:	d2f3      	bcs.n	2fa8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    2fc0:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2fc4:	f50b 7a08 	add.w	sl, fp, #544	; 0x220
        uint32_t len = sizeof(MTPHeader);
    2fc8:	f8cd b014 	str.w	fp, [sp, #20]
    2fcc:	260c      	movs	r6, #12
    2fce:	469b      	mov	fp, r3
    2fd0:	9403      	str	r4, [sp, #12]
    2fd2:	e01f      	b.n	3014 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xac>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    2fd4:	f5c2 5300 	rsb	r3, r2, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2fd8:	445a      	add	r2, fp
    2fda:	4611      	mov	r1, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    2fdc:	454b      	cmp	r3, r9
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    2fde:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2fe2:	eb0a 0006 	add.w	r0, sl, r6
    2fe6:	bf28      	it	cs
    2fe8:	464b      	movcs	r3, r9
    2fea:	429c      	cmp	r4, r3
    2fec:	bf28      	it	cs
    2fee:	461c      	movcs	r4, r3
    2ff0:	4622      	mov	r2, r4
          len += to_copy;
    2ff2:	4426      	add	r6, r4
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    2ff4:	f009 fd6e 	bl	cad4 <memcpy>
          disk_pos += to_copy;
    2ff8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    2ffc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    3000:	4425      	add	r5, r4
          disk_pos += to_copy;
    3002:	4423      	add	r3, r4
    3004:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3008:	d022      	beq.n	3050 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
        while(pos<size)
    300a:	45a8      	cmp	r8, r5
    300c:	d9cc      	bls.n	2fa8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    300e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3012:	9303      	str	r3, [sp, #12]
    3014:	9a03      	ldr	r2, [sp, #12]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3016:	eba8 0905 	sub.w	r9, r8, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    301a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    301e:	d1d9      	bne.n	2fd4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6c>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3020:	9b05      	ldr	r3, [sp, #20]
    3022:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
    3026:	462a      	mov	r2, r5
    3028:	6818      	ldr	r0, [r3, #0]
    302a:	bf34      	ite	cc
    302c:	46cc      	movcc	ip, r9
    302e:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    3032:	465b      	mov	r3, fp
    3034:	6801      	ldr	r1, [r0, #0]
    3036:	f8cd c000 	str.w	ip, [sp]
    303a:	6b09      	ldr	r1, [r1, #48]	; 0x30
    303c:	460c      	mov	r4, r1
    303e:	ee18 1a10 	vmov	r1, s16
    3042:	47a0      	blx	r4
            disk_pos=0;
    3044:	4659      	mov	r1, fp
    3046:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    304a:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
    304e:	e7c5      	b.n	2fdc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x74>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3050:	223c      	movs	r2, #60	; 0x3c
    3052:	f44f 7100 	mov.w	r1, #512	; 0x200
    3056:	4650      	mov	r0, sl
    3058:	f00a ff2a 	bl	deb0 <usb_mtp_send>
    305c:	2800      	cmp	r0, #0
    305e:	ddf7      	ble.n	3050 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
            len=0;
    3060:	2600      	movs	r6, #0
    3062:	e7d2      	b.n	300a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>

00003064 <MTPD::read(char*, unsigned long)>:
    {
    3064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    3068:	4616      	mov	r6, r2
    306a:	b36a      	cbz	r2, 30c8 <MTPD::read(char*, unsigned long)+0x64>
    306c:	460f      	mov	r7, r1
    306e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 30d0 <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    3072:	f100 0920 	add.w	r9, r0, #32
          index=0;
    3076:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    307a:	f8d8 4000 	ldr.w	r4, [r8]
    307e:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    3082:	42b5      	cmp	r5, r6
    3084:	bf28      	it	cs
    3086:	4635      	movcs	r5, r6
        if (data) {
    3088:	b137      	cbz	r7, 3098 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    308a:	4638      	mov	r0, r7
    308c:	462a      	mov	r2, r5
    308e:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    3092:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    3094:	f009 fd1e 	bl	cad4 <memcpy>
        index += to_copy;
    3098:	442c      	add	r4, r5
        size -= to_copy;
    309a:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    309c:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    30a0:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    30a4:	d003      	beq.n	30ae <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    30a6:	2e00      	cmp	r6, #0
    30a8:	d1e7      	bne.n	307a <MTPD::read(char*, unsigned long)+0x16>
    }
    30aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while(!usb_mtp_available());
    30ae:	f00a fee7 	bl	de80 <usb_mtp_available>
    30b2:	2800      	cmp	r0, #0
    30b4:	d0fb      	beq.n	30ae <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    30b6:	213c      	movs	r1, #60	; 0x3c
    30b8:	4648      	mov	r0, r9
    30ba:	f00a fe8f 	bl	dddc <usb_mtp_recv>
          index=0;
    30be:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    30c2:	2e00      	cmp	r6, #0
    30c4:	d1d9      	bne.n	307a <MTPD::read(char*, unsigned long)+0x16>
    30c6:	e7f0      	b.n	30aa <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    30c8:	4b01      	ldr	r3, [pc, #4]	; (30d0 <MTPD::read(char*, unsigned long)+0x6c>)
    30ca:	601a      	str	r2, [r3, #0]
    }
    30cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30d0:	200423a4 	.word	0x200423a4

000030d4 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    30d4:	b570      	push	{r4, r5, r6, lr}
    30d6:	b082      	sub	sp, #8
    30d8:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    30da:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    30dc:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    30de:	f10d 0106 	add.w	r1, sp, #6
    30e2:	f7ff ffbf 	bl	3064 <MTPD::read(char*, unsigned long)>
    30e6:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    30ea:	b17c      	cbz	r4, 310c <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    30ec:	b165      	cbz	r5, 3108 <MTPD::readstring(char*)+0x34>
    30ee:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    30f0:	2202      	movs	r2, #2
    30f2:	f10d 0106 	add.w	r1, sp, #6
    30f6:	4630      	mov	r0, r6
    30f8:	f7ff ffb4 	bl	3064 <MTPD::read(char*, unsigned long)>
    30fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    3100:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    3104:	42a5      	cmp	r5, r4
    3106:	d1f3      	bne.n	30f0 <MTPD::readstring(char*)+0x1c>
  }
    3108:	b002      	add	sp, #8
    310a:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    310c:	006a      	lsls	r2, r5, #1
    310e:	4621      	mov	r1, r4
    3110:	4630      	mov	r0, r6
  }
    3112:	b002      	add	sp, #8
    3114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    3118:	f7ff bfa4 	b.w	3064 <MTPD::read(char*, unsigned long)>

0000311c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    311c:	b530      	push	{r4, r5, lr}
    311e:	b0c1      	sub	sp, #260	; 0x104
    3120:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    3122:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3124:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    3126:	4669      	mov	r1, sp
    3128:	f7ff ff9c 	bl	3064 <MTPD::read(char*, unsigned long)>
        readstring(filename);
    312c:	4669      	mov	r1, sp
    312e:	4620      	mov	r0, r4
    3130:	f7ff ffd0 	bl	30d4 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    3134:	6820      	ldr	r0, [r4, #0]
    3136:	466a      	mov	r2, sp
    3138:	4629      	mov	r1, r5
    313a:	6803      	ldr	r3, [r0, #0]
    313c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    313e:	4798      	blx	r3
    3140:	f242 0201 	movw	r2, #8193	; 0x2001
    3144:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    3148:	2800      	cmp	r0, #0
    314a:	bf14      	ite	ne
    314c:	4610      	movne	r0, r2
    314e:	4618      	moveq	r0, r3
    3150:	b041      	add	sp, #260	; 0x104
    3152:	bd30      	pop	{r4, r5, pc}

00003154 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3158:	4605      	mov	r5, r0
    315a:	b0c5      	sub	sp, #276	; 0x114
    315c:	4689      	mov	r9, r1
    315e:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    3160:	f100 0420 	add.w	r4, r0, #32
      while(!usb_mtp_available());
    3164:	f00a fe8c 	bl	de80 <usb_mtp_available>
    3168:	2800      	cmp	r0, #0
    316a:	d0fb      	beq.n	3164 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    316c:	213c      	movs	r1, #60	; 0x3c
    316e:	4620      	mov	r0, r4
    3170:	f00a fe34 	bl	dddc <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3174:	ae04      	add	r6, sp, #16
        index=0;
    3176:	4b4c      	ldr	r3, [pc, #304]	; (32a8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
    3178:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    317a:	4628      	mov	r0, r5
    317c:	4631      	mov	r1, r6
        index=0;
    317e:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    3180:	220c      	movs	r2, #12
    3182:	f7ff ff6f 	bl	3064 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3186:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    3188:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    318c:	2b02      	cmp	r3, #2
    318e:	f000 8086 	beq.w	329e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14a>
    3192:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3196:	2204      	movs	r2, #4
    3198:	4631      	mov	r1, r6
    319a:	4628      	mov	r0, r5
    319c:	f7ff ff62 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31a0:	2202      	movs	r2, #2
    31a2:	4631      	mov	r1, r6
    31a4:	4628      	mov	r0, r5
    31a6:	f7ff ff5d 	bl	3064 <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    31aa:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31ae:	f8b6 b000 	ldrh.w	fp, [r6]
    31b2:	2202      	movs	r2, #2
    31b4:	4631      	mov	r1, r6
    31b6:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    31b8:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31bc:	f7ff ff52 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31c0:	2204      	movs	r2, #4
    31c2:	4631      	mov	r1, r6
    31c4:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    31c6:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31ca:	f7ff ff4b 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31ce:	2202      	movs	r2, #2
    31d0:	4631      	mov	r1, r6
    31d2:	4628      	mov	r0, r5
    31d4:	f7ff ff46 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    31d8:	2204      	movs	r2, #4
    31da:	4631      	mov	r1, r6
    31dc:	4628      	mov	r0, r5
    31de:	f7ff ff41 	bl	3064 <MTPD::read(char*, unsigned long)>
    31e2:	2204      	movs	r2, #4
    31e4:	4631      	mov	r1, r6
    31e6:	4628      	mov	r0, r5
    31e8:	f7ff ff3c 	bl	3064 <MTPD::read(char*, unsigned long)>
    31ec:	2204      	movs	r2, #4
    31ee:	4631      	mov	r1, r6
    31f0:	4628      	mov	r0, r5
    31f2:	f7ff ff37 	bl	3064 <MTPD::read(char*, unsigned long)>
    31f6:	2204      	movs	r2, #4
    31f8:	4631      	mov	r1, r6
    31fa:	4628      	mov	r0, r5
    31fc:	f7ff ff32 	bl	3064 <MTPD::read(char*, unsigned long)>
    3200:	2204      	movs	r2, #4
    3202:	4631      	mov	r1, r6
    3204:	4628      	mov	r0, r5
    3206:	f7ff ff2d 	bl	3064 <MTPD::read(char*, unsigned long)>
    320a:	2204      	movs	r2, #4
    320c:	4631      	mov	r1, r6
    320e:	4628      	mov	r0, r5
    3210:	f7ff ff28 	bl	3064 <MTPD::read(char*, unsigned long)>
    3214:	2204      	movs	r2, #4
    3216:	4631      	mov	r1, r6
    3218:	4628      	mov	r0, r5
    321a:	f7ff ff23 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    321e:	2202      	movs	r2, #2
    3220:	4631      	mov	r1, r6
    3222:	4628      	mov	r0, r5
    3224:	f7ff ff1e 	bl	3064 <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3228:	2204      	movs	r2, #4
    322a:	4631      	mov	r1, r6
    322c:	4628      	mov	r0, r5
    322e:	f7ff ff19 	bl	3064 <MTPD::read(char*, unsigned long)>
    3232:	2204      	movs	r2, #4
    3234:	4631      	mov	r1, r6
    3236:	4628      	mov	r0, r5
    3238:	f7ff ff14 	bl	3064 <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    323c:	4631      	mov	r1, r6
    323e:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3240:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3244:	f7ff ff46 	bl	30d4 <MTPD::readstring(char*)>
    3248:	4630      	mov	r0, r6
    324a:	f00e f8b9 	bl	113c0 <strlen>
    324e:	3001      	adds	r0, #1
    3250:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    3254:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    3258:	2c03      	cmp	r4, #3
    325a:	dd0c      	ble.n	3276 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    325c:	af03      	add	r7, sp, #12
    325e:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3260:	2204      	movs	r2, #4
    3262:	4639      	mov	r1, r7
    3264:	4628      	mov	r0, r5
    3266:	f7ff fefd 	bl	3064 <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    326a:	2c03      	cmp	r4, #3
    326c:	dcf7      	bgt.n	325e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    326e:	f1a8 0805 	sub.w	r8, r8, #5
    3272:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    3276:	b13c      	cbz	r4, 3288 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    3278:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    327a:	2201      	movs	r2, #1
    327c:	4639      	mov	r1, r7
    327e:	4628      	mov	r0, r5
    3280:	f7ff fef0 	bl	3064 <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    3284:	3c01      	subs	r4, #1
    3286:	d1f8      	bne.n	327a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    3288:	6828      	ldr	r0, [r5, #0]
    328a:	465b      	mov	r3, fp
    328c:	4652      	mov	r2, sl
    328e:	4649      	mov	r1, r9
    3290:	6804      	ldr	r4, [r0, #0]
    3292:	9600      	str	r6, [sp, #0]
    3294:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    3296:	47a0      	blx	r4
    }
    3298:	b045      	add	sp, #276	; 0x114
    329a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    329e:	6833      	ldr	r3, [r6, #0]
    32a0:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    32a4:	e777      	b.n	3196 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    32a6:	bf00      	nop
    32a8:	200423a4 	.word	0x200423a4

000032ac <MTPD::SendObject()>:
    { 
    32ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    32b0:	f100 0a20 	add.w	sl, r0, #32
    { 
    32b4:	b087      	sub	sp, #28
    32b6:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    32b8:	f00a fde2 	bl	de80 <usb_mtp_available>
    32bc:	2800      	cmp	r0, #0
    32be:	d0fb      	beq.n	32b8 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    32c0:	213c      	movs	r1, #60	; 0x3c
    32c2:	4650      	mov	r0, sl
    32c4:	f00a fd8a 	bl	dddc <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    32c8:	220c      	movs	r2, #12
        index=0;
    32ca:	4b42      	ldr	r3, [pc, #264]	; (33d4 <MTPD::SendObject()+0x128>)
    32cc:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    32ce:	eb0d 0102 	add.w	r1, sp, r2
    32d2:	9800      	ldr	r0, [sp, #0]
        index=0;
    32d4:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    32d6:	f7ff fec5 	bl	3064 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    32da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    32de:	2b02      	cmp	r3, #2
    32e0:	d00d      	beq.n	32fe <MTPD::SendObject()+0x52>
      disk_pos=0;
    32e2:	9b00      	ldr	r3, [sp, #0]
    32e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    32e8:	f8c3 4420 	str.w	r4, [r3, #1056]	; 0x420
      storage_->close();
    32ec:	9b00      	ldr	r3, [sp, #0]
    32ee:	6818      	ldr	r0, [r3, #0]
    32f0:	6803      	ldr	r3, [r0, #0]
    32f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    32f4:	4798      	blx	r3
      return true;
    32f6:	2001      	movs	r0, #1
    }
    32f8:	b007      	add	sp, #28
    32fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    32fe:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    3300:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    3302:	f1a3 090c 	sub.w	r9, r3, #12
      disk_pos=0;
    3306:	f502 5700 	add.w	r7, r2, #8192	; 0x2000
      while((int)len>0)
    330a:	45a1      	cmp	r9, r4
      disk_pos=0;
    330c:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
      while((int)len>0)
    3310:	ddec      	ble.n	32ec <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    3312:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3314:	4620      	mov	r0, r4
    3316:	f502 6b84 	add.w	fp, r2, #1056	; 0x420
          disk_pos =0;
    331a:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    331c:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3320:	f5c0 5400 	rsb	r4, r0, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3324:	eb0a 0108 	add.w	r1, sl, r8
    3328:	4458      	add	r0, fp
    332a:	454e      	cmp	r6, r9
    332c:	bf28      	it	cs
    332e:	464e      	movcs	r6, r9
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3330:	42b4      	cmp	r4, r6
    3332:	bf28      	it	cs
    3334:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3336:	4622      	mov	r2, r4
        len -= to_copy;
    3338:	eba9 0504 	sub.w	r5, r9, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    333c:	f009 fbca 	bl	cad4 <memcpy>
        disk_pos += to_copy;
    3340:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    3344:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    3346:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    334a:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    334e:	d022      	beq.n	3396 <MTPD::SendObject()+0xea>
        if(len>0)  // we have still data to be transfered
    3350:	b98d      	cbnz	r5, 3376 <MTPD::SendObject()+0xca>
      if(disk_pos)
    3352:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    3356:	2a00      	cmp	r2, #0
    3358:	d0c8      	beq.n	32ec <MTPD::SendObject()+0x40>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    335a:	9b00      	ldr	r3, [sp, #0]
    335c:	4659      	mov	r1, fp
    335e:	6818      	ldr	r0, [r3, #0]
    3360:	6803      	ldr	r3, [r0, #0]
    3362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3364:	4798      	blx	r3
    3366:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    336a:	4298      	cmp	r0, r3
    336c:	d2be      	bcs.n	32ec <MTPD::SendObject()+0x40>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    336e:	2000      	movs	r0, #0
    }
    3370:	b007      	add	sp, #28
    3372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    3376:	f00a fd83 	bl	de80 <usb_mtp_available>
    337a:	2800      	cmp	r0, #0
    337c:	d0fb      	beq.n	3376 <MTPD::SendObject()+0xca>
      return usb_mtp_recv(data_buffer,60);
    337e:	213c      	movs	r1, #60	; 0x3c
    3380:	4650      	mov	r0, sl
    3382:	f00a fd2b 	bl	dddc <usb_mtp_recv>
      while((int)len>0)
    3386:	2d00      	cmp	r5, #0
    3388:	dde3      	ble.n	3352 <MTPD::SendObject()+0xa6>
      if(disk_pos)
    338a:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
    338e:	46a9      	mov	r9, r5
          index=0;
    3390:	f04f 0800 	mov.w	r8, #0
    3394:	e7c2      	b.n	331c <MTPD::SendObject()+0x70>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    3396:	9b00      	ldr	r3, [sp, #0]
    3398:	4659      	mov	r1, fp
    339a:	6818      	ldr	r0, [r3, #0]
    339c:	6803      	ldr	r3, [r0, #0]
    339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    33a0:	4798      	blx	r3
    33a2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    33a6:	d3e2      	bcc.n	336e <MTPD::SendObject()+0xc2>
          disk_pos =0;
    33a8:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    33aa:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    33ac:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    33b0:	d0ce      	beq.n	3350 <MTPD::SendObject()+0xa4>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    33b2:	eb04 0108 	add.w	r1, r4, r8
    33b6:	4658      	mov	r0, fp
    33b8:	9201      	str	r2, [sp, #4]
            len -= bytes;
    33ba:	eba9 0506 	sub.w	r5, r9, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    33be:	4451      	add	r1, sl
    33c0:	f009 fb88 	bl	cad4 <memcpy>
            disk_pos += bytes;
    33c4:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    33c8:	9a01      	ldr	r2, [sp, #4]
    33ca:	4413      	add	r3, r2
    33cc:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            len -= bytes;
    33d0:	e7be      	b.n	3350 <MTPD::SendObject()+0xa4>
    33d2:	bf00      	nop
    33d4:	200423a4 	.word	0x200423a4

000033d8 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    33d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33dc:	b08d      	sub	sp, #52	; 0x34
    33de:	4604      	mov	r4, r0
    33e0:	f00a fd4e 	bl	de80 <usb_mtp_available>
    33e4:	b910      	cbnz	r0, 33ec <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    33e6:	b00d      	add	sp, #52	; 0x34
    33e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    33ec:	f104 0520 	add.w	r5, r4, #32
      return usb_mtp_recv(data_buffer,60);
    33f0:	213c      	movs	r1, #60	; 0x3c
    33f2:	4628      	mov	r0, r5
    33f4:	f00a fcf2 	bl	dddc <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    33f8:	2800      	cmp	r0, #0
    33fa:	d0f4      	beq.n	33e6 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    33fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    33fe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    3400:	6a23      	ldr	r3, [r4, #32]
    3402:	48a6      	ldr	r0, [pc, #664]	; (369c <MTPD::loop()+0x2c4>)
    3404:	e9cd 2100 	strd	r2, r1, [sp]
    3408:	49a5      	ldr	r1, [pc, #660]	; (36a0 <MTPD::loop()+0x2c8>)
    340a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    340c:	f008 ff94 	bl	c338 <Print::printf(char const*, ...)>
    3410:	6a23      	ldr	r3, [r4, #32]
    3412:	2b0c      	cmp	r3, #12
    3414:	d867      	bhi.n	34e6 <MTPD::loop()+0x10e>
    3416:	49a3      	ldr	r1, [pc, #652]	; (36a4 <MTPD::loop()+0x2cc>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    3418:	f242 0601 	movw	r6, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    341c:	489f      	ldr	r0, [pc, #636]	; (369c <MTPD::loop()+0x2c4>)
        TID=id;
    341e:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3422:	f008 ff89 	bl	c338 <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    3426:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
        if(typ==2) return_code=0x2005; // we should only get cmds
    3428:	f242 0305 	movw	r3, #8197	; 0x2005
        int op = CONTAINER->op;
    342c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
        int id = CONTAINER->transaction_id;
    342e:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
        if(typ==2) return_code=0x2005; // we should only get cmds
    3432:	2a02      	cmp	r2, #2
    3434:	bf08      	it	eq
    3436:	461e      	moveq	r6, r3
        switch (op)
    3438:	f241 021b 	movw	r2, #4123	; 0x101b
        int p3 = CONTAINER->params[2];
    343c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch (op)
    343e:	4291      	cmp	r1, r2
        int len= CONTAINER->len;
    3440:	6a27      	ldr	r7, [r4, #32]
        int p2 = CONTAINER->params[1];
    3442:	e9d4 ab0b 	ldrd	sl, fp, [r4, #44]	; 0x2c
        TID=id;
    3446:	f8c8 942c 	str.w	r9, [r8, #1068]	; 0x42c
        switch (op)
    344a:	d826      	bhi.n	349a <MTPD::loop()+0xc2>
    344c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    3450:	f240 80cc 	bls.w	35ec <MTPD::loop()+0x214>
    3454:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    3458:	440a      	add	r2, r1
    345a:	2a1a      	cmp	r2, #26
    345c:	f200 80c6 	bhi.w	35ec <MTPD::loop()+0x214>
    3460:	e8df f012 	tbh	[pc, r2, lsl #1]
    3464:	01b901c4 	.word	0x01b901c4
    3468:	00e100dd 	.word	0x00e100dd
    346c:	01130128 	.word	0x01130128
    3470:	027202a7 	.word	0x027202a7
    3474:	00c402e1 	.word	0x00c402e1
    3478:	02660249 	.word	0x02660249
    347c:	00c4025a 	.word	0x00c4025a
    3480:	00c400c4 	.word	0x00c400c4
    3484:	00c400c4 	.word	0x00c400c4
    3488:	022000c4 	.word	0x022000c4
    348c:	00c401f7 	.word	0x00c401f7
    3490:	00c400c4 	.word	0x00c400c4
    3494:	019701a7 	.word	0x019701a7
    3498:	015d      	.short	0x015d
    349a:	f246 73ff 	movw	r3, #26623	; 0x67ff
    349e:	440b      	add	r3, r1
    34a0:	b29b      	uxth	r3, r3
    34a2:	2b03      	cmp	r3, #3
    34a4:	f200 80a2 	bhi.w	35ec <MTPD::loop()+0x214>
    34a8:	4b7f      	ldr	r3, [pc, #508]	; (36a8 <MTPD::loop()+0x2d0>)
    34aa:	440b      	add	r3, r1
    34ac:	2b02      	cmp	r3, #2
    34ae:	f200 8347 	bhi.w	3b40 <MTPD::loop()+0x768>
    34b2:	e8df f003 	tbb	[pc, r3]
    34b6:	2e65      	.short	0x2e65
    34b8:	02          	.byte	0x02
    34b9:	00          	.byte	0x00
      while(!usb_mtp_available());
    34ba:	f00a fce1 	bl	de80 <usb_mtp_available>
    34be:	2800      	cmp	r0, #0
    34c0:	d0fb      	beq.n	34ba <MTPD::loop()+0xe2>
      return usb_mtp_recv(data_buffer,60);
    34c2:	213c      	movs	r1, #60	; 0x3c
    34c4:	4628      	mov	r0, r5
    34c6:	f00a fc89 	bl	dddc <usb_mtp_recv>
        index=0;
    34ca:	4b78      	ldr	r3, [pc, #480]	; (36ac <MTPD::loop()+0x2d4>)
    34cc:	2200      	movs	r2, #0
    34ce:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    34d0:	f64d 4307 	movw	r3, #56327	; 0xdc07
    34d4:	459b      	cmp	fp, r3
    34d6:	f040 82db 	bne.w	3a90 <MTPD::loop()+0x6b8>
    34da:	4651      	mov	r1, sl
    34dc:	4620      	mov	r0, r4
    34de:	f7ff fe1d 	bl	311c <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    34e2:	b286      	uxth	r6, r0
    34e4:	e09c      	b.n	3620 <MTPD::loop()+0x248>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    34e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    34e8:	4971      	ldr	r1, [pc, #452]	; (36b0 <MTPD::loop()+0x2d8>)
    34ea:	486c      	ldr	r0, [pc, #432]	; (369c <MTPD::loop()+0x2c4>)
    34ec:	f008 ff24 	bl	c338 <Print::printf(char const*, ...)>
    34f0:	6a23      	ldr	r3, [r4, #32]
    34f2:	2b10      	cmp	r3, #16
    34f4:	d98f      	bls.n	3416 <MTPD::loop()+0x3e>
    34f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    34f8:	496d      	ldr	r1, [pc, #436]	; (36b0 <MTPD::loop()+0x2d8>)
    34fa:	4868      	ldr	r0, [pc, #416]	; (369c <MTPD::loop()+0x2c4>)
    34fc:	f008 ff1c 	bl	c338 <Print::printf(char const*, ...)>
    3500:	6a23      	ldr	r3, [r4, #32]
    3502:	2b14      	cmp	r3, #20
    3504:	d987      	bls.n	3416 <MTPD::loop()+0x3e>
    3506:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3508:	4969      	ldr	r1, [pc, #420]	; (36b0 <MTPD::loop()+0x2d8>)
    350a:	4864      	ldr	r0, [pc, #400]	; (369c <MTPD::loop()+0x2c4>)
    350c:	f008 ff14 	bl	c338 <Print::printf(char const*, ...)>
    3510:	e781      	b.n	3416 <MTPD::loop()+0x3e>
              TRANSMIT(getObjectPropValue(p1,p2));
    3512:	2300      	movs	r3, #0
    3514:	2201      	movs	r2, #1
    3516:	4651      	mov	r1, sl
    3518:	4620      	mov	r0, r4
    351a:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    351e:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3522:	465a      	mov	r2, fp
    3524:	f7ff fb90 	bl	2c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3528:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    352c:	2300      	movs	r3, #0
    352e:	a904      	add	r1, sp, #16
    3530:	320c      	adds	r2, #12
    3532:	4620      	mov	r0, r4
    3534:	9204      	str	r2, [sp, #16]
    3536:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3538:	f8ad 2016 	strh.w	r2, [sp, #22]
    353c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    353e:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3542:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3546:	2302      	movs	r3, #2
    3548:	9206      	str	r2, [sp, #24]
    354a:	220c      	movs	r2, #12
    354c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3550:	f7fe fb72 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    3554:	465a      	mov	r2, fp
    3556:	4651      	mov	r1, sl
    3558:	4620      	mov	r0, r4
    355a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    355e:	f7ff fb73 	bl	2c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3562:	9b04      	ldr	r3, [sp, #16]
    3564:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3568:	f1bb 0f00 	cmp.w	fp, #0
    356c:	d006      	beq.n	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    356e:	223c      	movs	r2, #60	; 0x3c
    3570:	4659      	mov	r1, fp
    3572:	4640      	mov	r0, r8
    3574:	f00a fc9c 	bl	deb0 <usb_mtp_send>
    3578:	2800      	cmp	r0, #0
    357a:	ddf8      	ble.n	356e <MTPD::loop()+0x196>
            CONTAINER->op=return_code;
    357c:	b2b6      	uxth	r6, r6
              break;
    357e:	e039      	b.n	35f4 <MTPD::loop()+0x21c>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3580:	2300      	movs	r3, #0
    3582:	2201      	movs	r2, #1
    3584:	4651      	mov	r1, sl
    3586:	4620      	mov	r0, r4
    3588:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    358c:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3590:	465a      	mov	r2, fp
    3592:	f7ff f8f1 	bl	2778 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3596:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    359a:	2300      	movs	r3, #0
    359c:	a904      	add	r1, sp, #16
    359e:	320c      	adds	r2, #12
    35a0:	4620      	mov	r0, r4
    35a2:	9204      	str	r2, [sp, #16]
    35a4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    35a6:	f8ad 2016 	strh.w	r2, [sp, #22]
    35aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    35ac:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    35b0:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    35b4:	2302      	movs	r3, #2
    35b6:	9206      	str	r2, [sp, #24]
    35b8:	220c      	movs	r2, #12
    35ba:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    35be:	f7fe fb3b 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    35c2:	465a      	mov	r2, fp
    35c4:	4651      	mov	r1, sl
    35c6:	4620      	mov	r0, r4
    35c8:	f504 7808 	add.w	r8, r4, #544	; 0x220
    35cc:	f7ff f8d4 	bl	2778 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    35d0:	9b04      	ldr	r3, [sp, #16]
    35d2:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    35d6:	f1bb 0f00 	cmp.w	fp, #0
    35da:	d0cf      	beq.n	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35dc:	223c      	movs	r2, #60	; 0x3c
    35de:	4659      	mov	r1, fp
    35e0:	4640      	mov	r0, r8
    35e2:	f00a fc65 	bl	deb0 <usb_mtp_send>
    35e6:	2800      	cmp	r0, #0
    35e8:	ddf8      	ble.n	35dc <MTPD::loop()+0x204>
    35ea:	e7c7      	b.n	357c <MTPD::loop()+0x1a4>
            TRANSMIT(WriteDescriptor());
    35ec:	f504 7808 	add.w	r8, r4, #544	; 0x220
    35f0:	f242 0605 	movw	r6, #8197	; 0x2005
            CONTAINER->type=3;
    35f4:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    35f6:	4629      	mov	r1, r5
    35f8:	463a      	mov	r2, r7
    35fa:	4640      	mov	r0, r8
            CONTAINER->op=return_code;
    35fc:	84e6      	strh	r6, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    35fe:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
            CONTAINER->len=len;
    3602:	6227      	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
    3604:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
            CONTAINER->type=3;
    3608:	84a3      	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    360a:	f009 fa63 	bl	cad4 <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    360e:	223c      	movs	r2, #60	; 0x3c
    3610:	4639      	mov	r1, r7
    3612:	4640      	mov	r0, r8
    3614:	f00a fc4c 	bl	deb0 <usb_mtp_send>
    3618:	2800      	cmp	r0, #0
    361a:	ddf8      	ble.n	360e <MTPD::loop()+0x236>
    361c:	e6e3      	b.n	33e6 <MTPD::loop()+0xe>
            CONTAINER->op=return_code;
    361e:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3620:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3624:	e7e6      	b.n	35f4 <MTPD::loop()+0x21c>
              TRANSMIT(WriteStorageIDs());
    3626:	f04f 0b00 	mov.w	fp, #0
    362a:	2301      	movs	r3, #1
    362c:	4620      	mov	r0, r4
    362e:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3632:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3636:	f7fe fd6d 	bl	2114 <MTPD::WriteStorageIDs()>
    363a:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    363e:	220c      	movs	r2, #12
    3640:	a904      	add	r1, sp, #16
    3642:	330c      	adds	r3, #12
    3644:	4620      	mov	r0, r4
    3646:	9304      	str	r3, [sp, #16]
    3648:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    364a:	f8ad 3016 	strh.w	r3, [sp, #22]
    364e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3650:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3654:	9306      	str	r3, [sp, #24]
    3656:	2302      	movs	r3, #2
    3658:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    365c:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3660:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3664:	f7fe fae8 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    3668:	4620      	mov	r0, r4
    366a:	f7fe fd53 	bl	2114 <MTPD::WriteStorageIDs()>
    366e:	9b04      	ldr	r3, [sp, #16]
    3670:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3674:	f1bb 0f00 	cmp.w	fp, #0
    3678:	d080      	beq.n	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    367a:	223c      	movs	r2, #60	; 0x3c
    367c:	4659      	mov	r1, fp
    367e:	4640      	mov	r0, r8
    3680:	f00a fc16 	bl	deb0 <usb_mtp_send>
    3684:	2800      	cmp	r0, #0
    3686:	ddf8      	ble.n	367a <MTPD::loop()+0x2a2>
    3688:	e778      	b.n	357c <MTPD::loop()+0x1a4>
            if (p2) 
    368a:	f1bb 0f00 	cmp.w	fp, #0
    368e:	f000 820c 	beq.w	3aaa <MTPD::loop()+0x6d2>
            TRANSMIT(WriteDescriptor());
    3692:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3696:	f242 0614 	movw	r6, #8212	; 0x2014
    369a:	e7ab      	b.n	35f4 <MTPD::loop()+0x21c>
    369c:	20008a54 	.word	0x20008a54
    36a0:	20000b10 	.word	0x20000b10
    36a4:	20000b24 	.word	0x20000b24
    36a8:	ffff67fe 	.word	0xffff67fe
    36ac:	200423a4 	.word	0x200423a4
    36b0:	20000b20 	.word	0x20000b20
            TRANSMIT(GetStorageInfo(p1));
    36b4:	f04f 0b00 	mov.w	fp, #0
    36b8:	2301      	movs	r3, #1
    36ba:	4651      	mov	r1, sl
    36bc:	4620      	mov	r0, r4
    36be:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    36c2:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    36c6:	f7fe fd61 	bl	218c <MTPD::GetStorageInfo(unsigned long)>
    36ca:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    36ce:	220c      	movs	r2, #12
    36d0:	a904      	add	r1, sp, #16
    36d2:	330c      	adds	r3, #12
    36d4:	4620      	mov	r0, r4
    36d6:	9304      	str	r3, [sp, #16]
    36d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    36da:	f8ad 3016 	strh.w	r3, [sp, #22]
    36de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    36e0:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    36e4:	9306      	str	r3, [sp, #24]
    36e6:	2302      	movs	r3, #2
    36e8:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    36ec:	f504 7808 	add.w	r8, r4, #544	; 0x220
    36f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    36f4:	f7fe faa0 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    36f8:	4651      	mov	r1, sl
    36fa:	4620      	mov	r0, r4
    36fc:	f7fe fd46 	bl	218c <MTPD::GetStorageInfo(unsigned long)>
    3700:	9b04      	ldr	r3, [sp, #16]
    3702:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3706:	f1bb 0f00 	cmp.w	fp, #0
    370a:	f43f af37 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    370e:	223c      	movs	r2, #60	; 0x3c
    3710:	4659      	mov	r1, fp
    3712:	4640      	mov	r0, r8
    3714:	f00a fbcc 	bl	deb0 <usb_mtp_send>
    3718:	2800      	cmp	r0, #0
    371a:	ddf8      	ble.n	370e <MTPD::loop()+0x336>
    371c:	e72e      	b.n	357c <MTPD::loop()+0x1a4>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    371e:	2200      	movs	r2, #0
    3720:	4651      	mov	r1, sl
    3722:	4620      	mov	r0, r4
    3724:	9303      	str	r3, [sp, #12]
    3726:	f8c8 2428 	str.w	r2, [r8, #1064]	; 0x428
    372a:	2201      	movs	r2, #1
    372c:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3730:	465a      	mov	r2, fp
    3732:	f7ff fc19 	bl	2f68 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3736:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    373a:	2300      	movs	r3, #0
    373c:	a904      	add	r1, sp, #16
    373e:	320c      	adds	r2, #12
    3740:	9007      	str	r0, [sp, #28]
    3742:	4620      	mov	r0, r4
    3744:	9204      	str	r2, [sp, #16]
    3746:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3748:	f8ad 2016 	strh.w	r2, [sp, #22]
    374c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    374e:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3752:	9206      	str	r2, [sp, #24]
    3754:	2202      	movs	r2, #2
    3756:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    375a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    375e:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3762:	2220      	movs	r2, #32
    3764:	f7fe fa68 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3768:	9b03      	ldr	r3, [sp, #12]
    376a:	465a      	mov	r2, fp
    376c:	4651      	mov	r1, sl
    376e:	4620      	mov	r0, r4
    3770:	f7ff fbfa 	bl	2f68 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3774:	9b04      	ldr	r3, [sp, #16]
    3776:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    377a:	f1bb 0f00 	cmp.w	fp, #0
    377e:	f43f aefd 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3782:	223c      	movs	r2, #60	; 0x3c
    3784:	4659      	mov	r1, fp
    3786:	4640      	mov	r0, r8
    3788:	f00a fb92 	bl	deb0 <usb_mtp_send>
    378c:	2800      	cmp	r0, #0
    378e:	ddf8      	ble.n	3782 <MTPD::loop()+0x3aa>
    3790:	e6f4      	b.n	357c <MTPD::loop()+0x1a4>
      return storage_->copy(handle,store1,newHandle);
    3792:	6820      	ldr	r0, [r4, #0]
    3794:	f10b 32ff 	add.w	r2, fp, #4294967295
    3798:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    379a:	f504 7808 	add.w	r8, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    379e:	6806      	ldr	r6, [r0, #0]
    37a0:	6d36      	ldr	r6, [r6, #80]	; 0x50
    37a2:	47b0      	blx	r6
              if(!return_code) 
    37a4:	2800      	cmp	r0, #0
    37a6:	f040 817b 	bne.w	3aa0 <MTPD::loop()+0x6c8>
            TRANSMIT(WriteDescriptor());
    37aa:	f242 0605 	movw	r6, #8197	; 0x2005
    37ae:	270c      	movs	r7, #12
    37b0:	e720      	b.n	35f4 <MTPD::loop()+0x21c>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    37b2:	6820      	ldr	r0, [r4, #0]
    37b4:	f10b 32ff 	add.w	r2, fp, #4294967295
    37b8:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    37ba:	f504 7808 	add.w	r8, r4, #544	; 0x220
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    37be:	6806      	ldr	r6, [r0, #0]
              break;
    37c0:	270c      	movs	r7, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    37c2:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    37c4:	47b0      	blx	r6
    37c6:	f242 0601 	movw	r6, #8193	; 0x2001
    37ca:	f242 0305 	movw	r3, #8197	; 0x2005
    37ce:	2800      	cmp	r0, #0
    37d0:	bf08      	it	eq
    37d2:	461e      	moveq	r6, r3
              break;
    37d4:	e70e      	b.n	35f4 <MTPD::loop()+0x21c>
      storage_->ResetIndex();
    37d6:	6820      	ldr	r0, [r4, #0]
            CONTAINER->op=return_code;
    37d8:	b2b6      	uxth	r6, r6
      sessionID_ = id;
    37da:	4bc7      	ldr	r3, [pc, #796]	; (3af8 <MTPD::loop()+0x720>)
            TRANSMIT(WriteDescriptor());
    37dc:	f504 7808 	add.w	r8, r4, #544	; 0x220
      sessionID_ = id;
    37e0:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    37e4:	6803      	ldr	r3, [r0, #0]
    37e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    37e8:	4798      	blx	r3
    }
    37ea:	e703      	b.n	35f4 <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    37ec:	f04f 0b00 	mov.w	fp, #0
    37f0:	2301      	movs	r3, #1
    37f2:	4620      	mov	r0, r4
    37f4:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    37f8:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    37fc:	f7fe fb02 	bl	1e04 <MTPD::WriteDescriptor()>
    3800:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3804:	220c      	movs	r2, #12
    3806:	a904      	add	r1, sp, #16
    3808:	330c      	adds	r3, #12
    380a:	4620      	mov	r0, r4
    380c:	9304      	str	r3, [sp, #16]
    380e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3810:	f8ad 3016 	strh.w	r3, [sp, #22]
    3814:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3816:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    381a:	9306      	str	r3, [sp, #24]
    381c:	2302      	movs	r3, #2
    381e:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3822:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3826:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    382a:	f7fe fa05 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    382e:	4620      	mov	r0, r4
    3830:	f7fe fae8 	bl	1e04 <MTPD::WriteDescriptor()>
    3834:	9b04      	ldr	r3, [sp, #16]
    3836:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    383a:	f1bb 0f00 	cmp.w	fp, #0
    383e:	f43f ae9d 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3842:	223c      	movs	r2, #60	; 0x3c
    3844:	4659      	mov	r1, fp
    3846:	4640      	mov	r0, r8
    3848:	f00a fb32 	bl	deb0 <usb_mtp_send>
    384c:	2800      	cmp	r0, #0
    384e:	ddf8      	ble.n	3842 <MTPD::loop()+0x46a>
    3850:	e694      	b.n	357c <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropValue(p1));
    3852:	2301      	movs	r3, #1
    3854:	f04f 0b00 	mov.w	fp, #0
    3858:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    385c:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3860:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3864:	459a      	cmp	sl, r3
    3866:	f000 814d 	beq.w	3b04 <MTPD::loop()+0x72c>
              TRANSMIT(GetDevicePropValue(p1));
    386a:	220c      	movs	r2, #12
    386c:	4ba3      	ldr	r3, [pc, #652]	; (3afc <MTPD::loop()+0x724>)
    386e:	a904      	add	r1, sp, #16
    3870:	4620      	mov	r0, r4
    3872:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3876:	f8cd 9018 	str.w	r9, [sp, #24]
    387a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    387e:	f7fe f9db 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3882:	9b04      	ldr	r3, [sp, #16]
    3884:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3888:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    388c:	f1bb 0f00 	cmp.w	fp, #0
    3890:	f43f ae74 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3894:	223c      	movs	r2, #60	; 0x3c
    3896:	4659      	mov	r1, fp
    3898:	4640      	mov	r0, r8
    389a:	f00a fb09 	bl	deb0 <usb_mtp_send>
    389e:	2800      	cmp	r0, #0
    38a0:	ddf8      	ble.n	3894 <MTPD::loop()+0x4bc>
    38a2:	e66b      	b.n	357c <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropDesc(p1));
    38a4:	2301      	movs	r3, #1
    38a6:	f04f 0b00 	mov.w	fp, #0
    38aa:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    38ae:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    38b2:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    38b6:	459a      	cmp	sl, r3
    38b8:	f000 8101 	beq.w	3abe <MTPD::loop()+0x6e6>
              TRANSMIT(GetDevicePropDesc(p1));
    38bc:	220c      	movs	r2, #12
    38be:	4b90      	ldr	r3, [pc, #576]	; (3b00 <MTPD::loop()+0x728>)
    38c0:	a904      	add	r1, sp, #16
    38c2:	4620      	mov	r0, r4
    38c4:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    38c8:	f8cd 9018 	str.w	r9, [sp, #24]
    38cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    38d0:	f7fe f9b2 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    38d4:	9b04      	ldr	r3, [sp, #16]
    38d6:	f504 7808 	add.w	r8, r4, #544	; 0x220
    38da:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    38de:	f1bb 0f00 	cmp.w	fp, #0
    38e2:	f43f ae4b 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38e6:	223c      	movs	r2, #60	; 0x3c
    38e8:	4659      	mov	r1, fp
    38ea:	4640      	mov	r0, r8
    38ec:	f00a fae0 	bl	deb0 <usb_mtp_send>
    38f0:	2800      	cmp	r0, #0
    38f2:	ddf8      	ble.n	38e6 <MTPD::loop()+0x50e>
    38f4:	e642      	b.n	357c <MTPD::loop()+0x1a4>
              if (p2) {
    38f6:	f1bb 0f00 	cmp.w	fp, #0
    38fa:	f47f aeca 	bne.w	3692 <MTPD::loop()+0x2ba>
                if (!storage_->DeleteObject(p1)) {
    38fe:	6820      	ldr	r0, [r4, #0]
    3900:	4651      	mov	r1, sl
    3902:	6803      	ldr	r3, [r0, #0]
    3904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3906:	4798      	blx	r3
    3908:	2800      	cmp	r0, #0
    390a:	f47f ae88 	bne.w	361e <MTPD::loop()+0x246>
            TRANSMIT(WriteDescriptor());
    390e:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3912:	f242 0612 	movw	r6, #8210	; 0x2012
    3916:	e66d      	b.n	35f4 <MTPD::loop()+0x21c>
              if(!SendObject()) return_code = 0x2005;
    3918:	4620      	mov	r0, r4
    391a:	f7ff fcc7 	bl	32ac <MTPD::SendObject()>
    391e:	2800      	cmp	r0, #0
    3920:	f040 80b9 	bne.w	3a96 <MTPD::loop()+0x6be>
            TRANSMIT(WriteDescriptor());
    3924:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3928:	f242 0605 	movw	r6, #8197	; 0x2005
    392c:	270c      	movs	r7, #12
    392e:	e661      	b.n	35f4 <MTPD::loop()+0x21c>
              p3 = SendObjectInfo(p1, // storage
    3930:	465a      	mov	r2, fp
    3932:	4651      	mov	r1, sl
    3934:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3936:	b2b6      	uxth	r6, r6
              p3 = SendObjectInfo(p1, // storage
    3938:	f7ff fc0c 	bl	3154 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    393c:	f504 7808 	add.w	r8, r4, #544	; 0x220
              break;
    3940:	2718      	movs	r7, #24
              CONTAINER->params[2]=p3;
    3942:	e9c4 b00c 	strd	fp, r0, [r4, #48]	; 0x30
              break;
    3946:	e655      	b.n	35f4 <MTPD::loop()+0x21c>
            TRANSMIT(GetObjectInfo(p1));
    3948:	f04f 0b00 	mov.w	fp, #0
    394c:	2301      	movs	r3, #1
    394e:	4651      	mov	r1, sl
    3950:	4620      	mov	r0, r4
    3952:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3956:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    395a:	f7fe fd65 	bl	2428 <MTPD::GetObjectInfo(unsigned long)>
    395e:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3962:	220c      	movs	r2, #12
    3964:	a904      	add	r1, sp, #16
    3966:	330c      	adds	r3, #12
    3968:	4620      	mov	r0, r4
    396a:	9304      	str	r3, [sp, #16]
    396c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    396e:	f8ad 3016 	strh.w	r3, [sp, #22]
    3972:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3974:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3978:	9306      	str	r3, [sp, #24]
    397a:	2302      	movs	r3, #2
    397c:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3980:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3984:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3988:	f7fe f956 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    398c:	4651      	mov	r1, sl
    398e:	4620      	mov	r0, r4
    3990:	f7fe fd4a 	bl	2428 <MTPD::GetObjectInfo(unsigned long)>
    3994:	9b04      	ldr	r3, [sp, #16]
    3996:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    399a:	f1bb 0f00 	cmp.w	fp, #0
    399e:	f43f aded 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39a2:	223c      	movs	r2, #60	; 0x3c
    39a4:	4659      	mov	r1, fp
    39a6:	4640      	mov	r0, r8
    39a8:	f00a fa82 	bl	deb0 <usb_mtp_send>
    39ac:	2800      	cmp	r0, #0
    39ae:	ddf8      	ble.n	39a2 <MTPD::loop()+0x5ca>
    39b0:	e5e4      	b.n	357c <MTPD::loop()+0x1a4>
            if (p2) 
    39b2:	f1bb 0f00 	cmp.w	fp, #0
    39b6:	f47f ae6c 	bne.w	3692 <MTPD::loop()+0x2ba>
              TRANSMIT(GetObjectHandles(p1, p3));
    39ba:	2201      	movs	r2, #1
    39bc:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
      write_length_ = GetNumObjects(storage, parent);
    39c0:	4651      	mov	r1, sl
    39c2:	4620      	mov	r0, r4
              TRANSMIT(GetObjectHandles(p1, p3));
    39c4:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
      write_length_ = GetNumObjects(storage, parent);
    39c8:	461a      	mov	r2, r3
    39ca:	9303      	str	r3, [sp, #12]
    39cc:	f7fe fcd4 	bl	2378 <MTPD::GetNumObjects(unsigned long, unsigned long)>
              TRANSMIT(GetObjectHandles(p1, p3));
    39d0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      write_length_ *= 4;
    39d2:	0080      	lsls	r0, r0, #2
    39d4:	a904      	add	r1, sp, #16
              TRANSMIT(GetObjectHandles(p1, p3));
    39d6:	f8ad 2016 	strh.w	r2, [sp, #22]
    39da:	3010      	adds	r0, #16
    39dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    39de:	9004      	str	r0, [sp, #16]
    39e0:	4620      	mov	r0, r4
    39e2:	9206      	str	r2, [sp, #24]
    39e4:	2202      	movs	r2, #2
    39e6:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    39ea:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    39ee:	f504 7808 	add.w	r8, r4, #544	; 0x220
    39f2:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    39f6:	220c      	movs	r2, #12
    39f8:	f7fe f91e 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    39fc:	9b03      	ldr	r3, [sp, #12]
    39fe:	4651      	mov	r1, sl
    3a00:	4620      	mov	r0, r4
    3a02:	461a      	mov	r2, r3
    3a04:	f7fe fccc 	bl	23a0 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3a08:	9b04      	ldr	r3, [sp, #16]
    3a0a:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a0e:	f1bb 0f00 	cmp.w	fp, #0
    3a12:	f43f adb3 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a16:	223c      	movs	r2, #60	; 0x3c
    3a18:	4659      	mov	r1, fp
    3a1a:	4640      	mov	r0, r8
    3a1c:	f00a fa48 	bl	deb0 <usb_mtp_send>
    3a20:	2800      	cmp	r0, #0
    3a22:	ddf8      	ble.n	3a16 <MTPD::loop()+0x63e>
    3a24:	e5aa      	b.n	357c <MTPD::loop()+0x1a4>
            TRANSMIT(GetObject(p1));
    3a26:	f04f 0b00 	mov.w	fp, #0
    3a2a:	2301      	movs	r3, #1
    3a2c:	4651      	mov	r1, sl
    3a2e:	4620      	mov	r0, r4
    3a30:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3a34:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3a38:	f7ff fa10 	bl	2e5c <MTPD::GetObject(unsigned long)>
    3a3c:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3a40:	220c      	movs	r2, #12
    3a42:	a904      	add	r1, sp, #16
    3a44:	330c      	adds	r3, #12
    3a46:	4620      	mov	r0, r4
    3a48:	9304      	str	r3, [sp, #16]
    3a4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3a4c:	f8ad 3016 	strh.w	r3, [sp, #22]
    3a50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3a52:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3a56:	9306      	str	r3, [sp, #24]
    3a58:	2302      	movs	r3, #2
    3a5a:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3a5e:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a62:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3a66:	f7fe f8e7 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    3a6a:	4651      	mov	r1, sl
    3a6c:	4620      	mov	r0, r4
    3a6e:	f7ff f9f5 	bl	2e5c <MTPD::GetObject(unsigned long)>
    3a72:	9b04      	ldr	r3, [sp, #16]
    3a74:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a78:	f1bb 0f00 	cmp.w	fp, #0
    3a7c:	f43f ad7e 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a80:	223c      	movs	r2, #60	; 0x3c
    3a82:	4659      	mov	r1, fp
    3a84:	4640      	mov	r0, r8
    3a86:	f00a fa13 	bl	deb0 <usb_mtp_send>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	ddf8      	ble.n	3a80 <MTPD::loop()+0x6a8>
    3a8e:	e575      	b.n	357c <MTPD::loop()+0x1a4>
    3a90:	f242 0605 	movw	r6, #8197	; 0x2005
              break;
    3a94:	e5c4      	b.n	3620 <MTPD::loop()+0x248>
            CONTAINER->op=return_code;
    3a96:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3a98:	f504 7808 	add.w	r8, r4, #544	; 0x220
            CONTAINER->op=return_code;
    3a9c:	270c      	movs	r7, #12
    3a9e:	e5a9      	b.n	35f4 <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3aa0:	4682      	mov	sl, r0
    3aa2:	f242 0601 	movw	r6, #8193	; 0x2001
    3aa6:	2710      	movs	r7, #16
    3aa8:	e5a4      	b.n	35f4 <MTPD::loop()+0x21c>
                p1 = GetNumObjects(p1, p3);
    3aaa:	4651      	mov	r1, sl
    3aac:	461a      	mov	r2, r3
    3aae:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3ab0:	b2b6      	uxth	r6, r6
                p1 = GetNumObjects(p1, p3);
    3ab2:	f7fe fc61 	bl	2378 <MTPD::GetNumObjects(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3ab6:	f504 7808 	add.w	r8, r4, #544	; 0x220
                p1 = GetNumObjects(p1, p3);
    3aba:	4682      	mov	sl, r0
    3abc:	e59a      	b.n	35f4 <MTPD::loop()+0x21c>
    3abe:	4620      	mov	r0, r4
    3ac0:	f7fe f946 	bl	1d50 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3ac4:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3ac8:	4620      	mov	r0, r4
    3aca:	220c      	movs	r2, #12
    3acc:	330c      	adds	r3, #12
    3ace:	a904      	add	r1, sp, #16
    3ad0:	9304      	str	r3, [sp, #16]
    3ad2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3ad4:	f8ad 3016 	strh.w	r3, [sp, #22]
    3ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ada:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ade:	9306      	str	r3, [sp, #24]
    3ae0:	2302      	movs	r3, #2
    3ae2:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3ae6:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3aea:	f7fe f8a5 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    3aee:	4620      	mov	r0, r4
    3af0:	f7fe f92e 	bl	1d50 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    3af4:	e6ee      	b.n	38d4 <MTPD::loop()+0x4fc>
    3af6:	bf00      	nop
    3af8:	20043118 	.word	0x20043118
    3afc:	10150002 	.word	0x10150002
    3b00:	10140002 	.word	0x10140002
    if (*str) 
    3b04:	4620      	mov	r0, r4
    3b06:	4929      	ldr	r1, [pc, #164]	; (3bac <MTPD::loop()+0x7d4>)
    3b08:	f7fe f8d4 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3b0c:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3b10:	a904      	add	r1, sp, #16
    3b12:	4620      	mov	r0, r4
    3b14:	330c      	adds	r3, #12
    3b16:	220c      	movs	r2, #12
    3b18:	9304      	str	r3, [sp, #16]
    3b1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3b1c:	f8ad 3016 	strh.w	r3, [sp, #22]
    3b20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b22:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b26:	9306      	str	r3, [sp, #24]
    3b28:	2302      	movs	r3, #2
    3b2a:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b2e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3b32:	f7fe f881 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    3b36:	491d      	ldr	r1, [pc, #116]	; (3bac <MTPD::loop()+0x7d4>)
    3b38:	4620      	mov	r0, r4
    3b3a:	f7fe f8bb 	bl	1cb4 <MTPD::writestring(char const*) [clone .part.0]>
  }
    3b3e:	e6a0      	b.n	3882 <MTPD::loop()+0x4aa>
              TRANSMIT(getObjectPropsSupported(p1));
    3b40:	f04f 0b00 	mov.w	fp, #0
    3b44:	2301      	movs	r3, #1
    3b46:	4651      	mov	r1, sl
    3b48:	4620      	mov	r0, r4
    3b4a:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b4e:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3b52:	f7fe fdcd 	bl	26f0 <MTPD::getObjectPropsSupported(unsigned long)>
    3b56:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3b5a:	220c      	movs	r2, #12
    3b5c:	a904      	add	r1, sp, #16
    3b5e:	330c      	adds	r3, #12
    3b60:	4620      	mov	r0, r4
    3b62:	9304      	str	r3, [sp, #16]
    3b64:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3b66:	f8ad 3016 	strh.w	r3, [sp, #22]
    3b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b6c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b70:	9306      	str	r3, [sp, #24]
    3b72:	2302      	movs	r3, #2
    3b74:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b78:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b7c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3b80:	f7fe f85a 	bl	1c38 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    3b84:	4651      	mov	r1, sl
    3b86:	4620      	mov	r0, r4
    3b88:	f7fe fdb2 	bl	26f0 <MTPD::getObjectPropsSupported(unsigned long)>
    3b8c:	9b04      	ldr	r3, [sp, #16]
    3b8e:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3b92:	f1bb 0f00 	cmp.w	fp, #0
    3b96:	f43f acf1 	beq.w	357c <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b9a:	223c      	movs	r2, #60	; 0x3c
    3b9c:	4659      	mov	r1, fp
    3b9e:	4640      	mov	r0, r8
    3ba0:	f00a f986 	bl	deb0 <usb_mtp_send>
    3ba4:	2800      	cmp	r0, #0
    3ba6:	ddf8      	ble.n	3b9a <MTPD::loop()+0x7c2>
    3ba8:	e4e8      	b.n	357c <MTPD::loop()+0x1a4>
    3baa:	bf00      	nop
    3bac:	20000b08 	.word	0x20000b08

00003bb0 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    3bb0:	b510      	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    3bb2:	f00a fca5 	bl	e500 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    3bb6:	2800      	cmp	r0, #0
    3bb8:	d0fb      	beq.n	3bb2 <menuGetLine()+0x2>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    3bba:	4c0b      	ldr	r4, [pc, #44]	; (3be8 <menuGetLine()+0x38>)
    3bbc:	210d      	movs	r1, #13
    3bbe:	2328      	movs	r3, #40	; 0x28
    3bc0:	480a      	ldr	r0, [pc, #40]	; (3bec <menuGetLine()+0x3c>)
    3bc2:	4622      	mov	r2, r4
    3bc4:	f008 fce2 	bl	c58c <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    3bc8:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    3bca:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    3bcc:	4620      	mov	r0, r4
  buffer[count]=0;
    3bce:	54e2      	strb	r2, [r4, r3]
    3bd0:	f00d fbf6 	bl	113c0 <strlen>
    3bd4:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3bd6:	4620      	mov	r0, r4
    3bd8:	f00a fcfc 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3bdc:	4803      	ldr	r0, [pc, #12]	; (3bec <menuGetLine()+0x3c>)
    3bde:	f008 fb8f 	bl	c300 <Print::println()>
  Serial.println(buffer);
  return buffer;
}
    3be2:	4620      	mov	r0, r4
    3be4:	bd10      	pop	{r4, pc}
    3be6:	bf00      	nop
    3be8:	2004237c 	.word	0x2004237c
    3bec:	20008a54 	.word	0x20008a54

00003bf0 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    3bf0:	b530      	push	{r4, r5, lr}
    3bf2:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    3bf4:	f00a fc84 	bl	e500 <usb_serial_available>

    while(!Serial.available()) ;
    3bf8:	2800      	cmp	r0, #0
    3bfa:	d0fb      	beq.n	3bf4 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    3bfc:	f00a fcc4 	bl	e588 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    3c00:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    3c02:	2864      	cmp	r0, #100	; 0x64
    3c04:	d04b      	beq.n	3c9e <menu3()+0xae>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    3c06:	3831      	subs	r0, #49	; 0x31
    3c08:	2846      	cmp	r0, #70	; 0x46
    3c0a:	d85c      	bhi.n	3cc6 <menu3()+0xd6>
    3c0c:	e8df f010 	tbh	[pc, r0, lsl #1]
    3c10:	00710067 	.word	0x00710067
    3c14:	0085007b 	.word	0x0085007b
    3c18:	005b005b 	.word	0x005b005b
    3c1c:	005b005b 	.word	0x005b005b
    3c20:	005b005b 	.word	0x005b005b
    3c24:	005b005b 	.word	0x005b005b
    3c28:	005b005b 	.word	0x005b005b
    3c2c:	005b005b 	.word	0x005b005b
    3c30:	005b005b 	.word	0x005b005b
    3c34:	005b005b 	.word	0x005b005b
    3c38:	005b005b 	.word	0x005b005b
    3c3c:	005b005b 	.word	0x005b005b
    3c40:	005b005b 	.word	0x005b005b
    3c44:	005b005b 	.word	0x005b005b
    3c48:	005b005b 	.word	0x005b005b
    3c4c:	005b005b 	.word	0x005b005b
    3c50:	005b005b 	.word	0x005b005b
    3c54:	005b005b 	.word	0x005b005b
    3c58:	005b005b 	.word	0x005b005b
    3c5c:	005b005b 	.word	0x005b005b
    3c60:	005b005b 	.word	0x005b005b
    3c64:	005b005b 	.word	0x005b005b
    3c68:	005b005b 	.word	0x005b005b
    3c6c:	005b005b 	.word	0x005b005b
    3c70:	005b008f 	.word	0x005b008f
    3c74:	005b0099 	.word	0x005b0099
    3c78:	00a3005b 	.word	0x00a3005b
    3c7c:	005b00b2 	.word	0x005b00b2
    3c80:	005b005b 	.word	0x005b005b
    3c84:	005b005b 	.word	0x005b005b
    3c88:	005b005b 	.word	0x005b005b
    3c8c:	005b00bc 	.word	0x005b00bc
    3c90:	00c6005b 	.word	0x00c6005b
    3c94:	00e000d0 	.word	0x00e000d0
    3c98:	005b005b 	.word	0x005b005b
    3c9c:	005d      	.short	0x005d
{ char *buffer=menuGetLine();
    3c9e:	f7ff ff87 	bl	3bb0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    3ca2:	ad07      	add	r5, sp, #28
    3ca4:	f10d 0113 	add.w	r1, sp, #19
    3ca8:	ac06      	add	r4, sp, #24
    3caa:	aa05      	add	r2, sp, #20
    3cac:	f10d 0312 	add.w	r3, sp, #18
    3cb0:	9400      	str	r4, [sp, #0]
    3cb2:	e9cd 1501 	strd	r1, r5, [sp, #4]
    3cb6:	4951      	ldr	r1, [pc, #324]	; (3dfc <menu3()+0x20c>)
    3cb8:	f00c fe14 	bl	108e4 <sscanf>
      rtcSetDate(year,month,day);
    3cbc:	9805      	ldr	r0, [sp, #20]
    3cbe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    3cc2:	f000 fdc9 	bl	4858 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    3cc6:	b009      	add	sp, #36	; 0x24
    3cc8:	bd30      	pop	{r4, r5, pc}
{ char *buffer=menuGetLine();
    3cca:	f7ff ff71 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3cce:	aa07      	add	r2, sp, #28
    3cd0:	494b      	ldr	r1, [pc, #300]	; (3e00 <menu3()+0x210>)
    3cd2:	f00c fe07 	bl	108e4 <sscanf>
    3cd6:	4b4b      	ldr	r3, [pc, #300]	; (3e04 <menu3()+0x214>)
    3cd8:	9a07      	ldr	r2, [sp, #28]
    3cda:	801a      	strh	r2, [r3, #0]
  return 1;
    3cdc:	e7f3      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3cde:	f7ff ff67 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3ce2:	aa07      	add	r2, sp, #28
    3ce4:	4946      	ldr	r1, [pc, #280]	; (3e00 <menu3()+0x210>)
    3ce6:	f00c fdfd 	bl	108e4 <sscanf>
    3cea:	4b47      	ldr	r3, [pc, #284]	; (3e08 <menu3()+0x218>)
    3cec:	9a07      	ldr	r2, [sp, #28]
    3cee:	801a      	strh	r2, [r3, #0]
  return 1;
    3cf0:	e7e9      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3cf2:	f7ff ff5d 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3cf6:	aa07      	add	r2, sp, #28
    3cf8:	4941      	ldr	r1, [pc, #260]	; (3e00 <menu3()+0x210>)
    3cfa:	f00c fdf3 	bl	108e4 <sscanf>
    3cfe:	4b43      	ldr	r3, [pc, #268]	; (3e0c <menu3()+0x21c>)
    3d00:	9a07      	ldr	r2, [sp, #28]
    3d02:	801a      	strh	r2, [r3, #0]
  return 1;
    3d04:	e7df      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d06:	f7ff ff53 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3d0a:	aa07      	add	r2, sp, #28
    3d0c:	493c      	ldr	r1, [pc, #240]	; (3e00 <menu3()+0x210>)
    3d0e:	f00c fde9 	bl	108e4 <sscanf>
    3d12:	4b3f      	ldr	r3, [pc, #252]	; (3e10 <menu3()+0x220>)
    3d14:	9a07      	ldr	r2, [sp, #28]
    3d16:	801a      	strh	r2, [r3, #0]
  return 1;
    3d18:	e7d5      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d1a:	f7ff ff49 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3d1e:	aa07      	add	r2, sp, #28
    3d20:	4937      	ldr	r1, [pc, #220]	; (3e00 <menu3()+0x210>)
    3d22:	f00c fddf 	bl	108e4 <sscanf>
    3d26:	4b3b      	ldr	r3, [pc, #236]	; (3e14 <menu3()+0x224>)
    3d28:	9a07      	ldr	r2, [sp, #28]
    3d2a:	801a      	strh	r2, [r3, #0]
}
    3d2c:	e7cb      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d2e:	f7ff ff3f 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    3d32:	aa07      	add	r2, sp, #28
    3d34:	4932      	ldr	r1, [pc, #200]	; (3e00 <menu3()+0x210>)
    3d36:	f00c fdd5 	bl	108e4 <sscanf>
    3d3a:	4b37      	ldr	r3, [pc, #220]	; (3e18 <menu3()+0x228>)
    3d3c:	9a07      	ldr	r2, [sp, #28]
    3d3e:	601a      	str	r2, [r3, #0]
  return 1;
    3d40:	e7c1      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d42:	f7ff ff35 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3d46:	aa07      	add	r2, sp, #28
    3d48:	492d      	ldr	r1, [pc, #180]	; (3e00 <menu3()+0x210>)
    3d4a:	f00c fdcb 	bl	108e4 <sscanf>
    3d4e:	4b33      	ldr	r3, [pc, #204]	; (3e1c <menu3()+0x22c>)
    3d50:	9a07      	ldr	r2, [sp, #28]
    3d52:	801a      	strh	r2, [r3, #0]
  return 1;
    3d54:	e7b7      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d56:	f7ff ff2b 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    3d5a:	aa07      	add	r2, sp, #28
    3d5c:	4928      	ldr	r1, [pc, #160]	; (3e00 <menu3()+0x210>)
    3d5e:	f00c fdc1 	bl	108e4 <sscanf>
    3d62:	4b2f      	ldr	r3, [pc, #188]	; (3e20 <menu3()+0x230>)
    3d64:	9a07      	ldr	r2, [sp, #28]
    3d66:	601a      	str	r2, [r3, #0]
      acqModifyFrequency(fsamp);
    3d68:	6818      	ldr	r0, [r3, #0]
}
    3d6a:	b009      	add	sp, #36	; 0x24
    3d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      acqModifyFrequency(fsamp);
    3d70:	f7fd b80a 	b.w	d88 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    3d74:	f7ff ff1c 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3d78:	aa07      	add	r2, sp, #28
    3d7a:	4921      	ldr	r1, [pc, #132]	; (3e00 <menu3()+0x210>)
    3d7c:	f00c fdb2 	bl	108e4 <sscanf>
    3d80:	4b28      	ldr	r3, [pc, #160]	; (3e24 <menu3()+0x234>)
    3d82:	9a07      	ldr	r2, [sp, #28]
    3d84:	801a      	strh	r2, [r3, #0]
  return 1;
    3d86:	e79e      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d88:	f7ff ff12 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    3d8c:	aa07      	add	r2, sp, #28
    3d8e:	491c      	ldr	r1, [pc, #112]	; (3e00 <menu3()+0x210>)
    3d90:	f00c fda8 	bl	108e4 <sscanf>
    3d94:	4b24      	ldr	r3, [pc, #144]	; (3e28 <menu3()+0x238>)
    3d96:	9a07      	ldr	r2, [sp, #28]
    3d98:	601a      	str	r2, [r3, #0]
  return 1;
    3d9a:	e794      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3d9c:	f7ff ff08 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    3da0:	aa07      	add	r2, sp, #28
    3da2:	4917      	ldr	r1, [pc, #92]	; (3e00 <menu3()+0x210>)
    3da4:	f00c fd9e 	bl	108e4 <sscanf>
    3da8:	4b20      	ldr	r3, [pc, #128]	; (3e2c <menu3()+0x23c>)
    3daa:	9a07      	ldr	r2, [sp, #28]
    3dac:	601a      	str	r2, [r3, #0]
  return 1;
    3dae:	e78a      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3db0:	f7ff fefe 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3db4:	aa07      	add	r2, sp, #28
    3db6:	4912      	ldr	r1, [pc, #72]	; (3e00 <menu3()+0x210>)
    3db8:	f00c fd94 	bl	108e4 <sscanf>
    3dbc:	4b1c      	ldr	r3, [pc, #112]	; (3e30 <menu3()+0x240>)
    3dbe:	9a07      	ldr	r2, [sp, #28]
    3dc0:	801a      	strh	r2, [r3, #0]
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    3dc2:	881a      	ldrh	r2, [r3, #0]
    3dc4:	0412      	lsls	r2, r2, #16
    3dc6:	f57f af7e 	bpl.w	3cc6 <menu3()+0xd6>
    3dca:	2200      	movs	r2, #0
    3dcc:	801a      	strh	r2, [r3, #0]
    3dce:	e77a      	b.n	3cc6 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3dd0:	f7ff feee 	bl	3bb0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    3dd4:	ad07      	add	r5, sp, #28
    3dd6:	f10d 0113 	add.w	r1, sp, #19
    3dda:	ac06      	add	r4, sp, #24
    3ddc:	aa05      	add	r2, sp, #20
    3dde:	f10d 0312 	add.w	r3, sp, #18
    3de2:	9400      	str	r4, [sp, #0]
    3de4:	e9cd 1501 	strd	r1, r5, [sp, #4]
    3de8:	4904      	ldr	r1, [pc, #16]	; (3dfc <menu3()+0x20c>)
    3dea:	f00c fd7b 	bl	108e4 <sscanf>
      rtcSetTime(hour,minutes,seconds);
    3dee:	9805      	ldr	r0, [sp, #20]
    3df0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    3df4:	f000 fd48 	bl	4888 <rtcSetTime(int, int, int)>
    3df8:	e765      	b.n	3cc6 <menu3()+0xd6>
    3dfa:	bf00      	nop
    3dfc:	20000774 	.word	0x20000774
    3e00:	2000077c 	.word	0x2000077c
    3e04:	20041814 	.word	0x20041814
    3e08:	200432e4 	.word	0x200432e4
    3e0c:	20009024 	.word	0x20009024
    3e10:	20009028 	.word	0x20009028
    3e14:	2000902c 	.word	0x2000902c
    3e18:	20009030 	.word	0x20009030
    3e1c:	20043310 	.word	0x20043310
    3e20:	20009014 	.word	0x20009014
    3e24:	20043308 	.word	0x20043308
    3e28:	20009034 	.word	0x20009034
    3e2c:	20009038 	.word	0x20009038
    3e30:	20009056 	.word	0x20009056

00003e34 <saveParameters()>:
{
//    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
}

void saveParameters(void)
{
    3e34:	b430      	push	{r4, r5}
  store[1]  = t_acq;
  store[2]  = t_on;
  store[3]  = t_off;
  store[4]  = t_rep;
    3e36:	4819      	ldr	r0, [pc, #100]	; (3e9c <saveParameters()+0x68>)
  store[1]  = t_acq;
    3e38:	4c19      	ldr	r4, [pc, #100]	; (3ea0 <saveParameters()+0x6c>)
  store[5]  = proc;
    3e3a:	4b1a      	ldr	r3, [pc, #104]	; (3ea4 <saveParameters()+0x70>)
  store[2]  = t_on;
    3e3c:	491a      	ldr	r1, [pc, #104]	; (3ea8 <saveParameters()+0x74>)
  store[3]  = t_off;
    3e3e:	4a1b      	ldr	r2, [pc, #108]	; (3eac <saveParameters()+0x78>)
  store[1]  = t_acq;
    3e40:	6825      	ldr	r5, [r4, #0]
  store[2]  = t_on;
    3e42:	6809      	ldr	r1, [r1, #0]
  store[3]  = t_off;
    3e44:	6812      	ldr	r2, [r2, #0]
  store[4]  = t_rep;
    3e46:	6804      	ldr	r4, [r0, #0]
  store[5]  = proc;
    3e48:	8818      	ldrh	r0, [r3, #0]
  store[1]  = t_acq;
    3e4a:	4b19      	ldr	r3, [pc, #100]	; (3eb0 <saveParameters()+0x7c>)
  store[3]  = t_off;
    3e4c:	80da      	strh	r2, [r3, #6]
  store[6]  = shift;
    3e4e:	4a19      	ldr	r2, [pc, #100]	; (3eb4 <saveParameters()+0x80>)
  store[2]  = t_on;
    3e50:	8099      	strh	r1, [r3, #4]
  store[6]  = shift;
    3e52:	8812      	ldrh	r2, [r2, #0]
  store[7]  = t_1;
    3e54:	4918      	ldr	r1, [pc, #96]	; (3eb8 <saveParameters()+0x84>)
  store[6]  = shift;
    3e56:	819a      	strh	r2, [r3, #12]
  store[8]  = t_2;
    3e58:	4a18      	ldr	r2, [pc, #96]	; (3ebc <saveParameters()+0x88>)
  store[4]  = t_rep;
    3e5a:	811c      	strh	r4, [r3, #8]
  store[7]  = t_1;
    3e5c:	680c      	ldr	r4, [r1, #0]
  store[8]  = t_2;
    3e5e:	6812      	ldr	r2, [r2, #0]
  store[9]  = t_3;
  store[10] = t_4;
    3e60:	4917      	ldr	r1, [pc, #92]	; (3ec0 <saveParameters()+0x8c>)
  store[5]  = proc;
    3e62:	8158      	strh	r0, [r3, #10]
  store[8]  = t_2;
    3e64:	821a      	strh	r2, [r3, #16]
  store[9]  = t_3;
    3e66:	4817      	ldr	r0, [pc, #92]	; (3ec4 <saveParameters()+0x90>)
  store[11] = fsamp/1000;
    3e68:	4a17      	ldr	r2, [pc, #92]	; (3ec8 <saveParameters()+0x94>)
  store[7]  = t_1;
    3e6a:	81dc      	strh	r4, [r3, #14]
  store[9]  = t_3;
    3e6c:	6804      	ldr	r4, [r0, #0]
  store[10] = t_4;
    3e6e:	6808      	ldr	r0, [r1, #0]
  store[11] = fsamp/1000;
    3e70:	6812      	ldr	r2, [r2, #0]
    3e72:	4916      	ldr	r1, [pc, #88]	; (3ecc <saveParameters()+0x98>)
  store[10] = t_4;
    3e74:	8298      	strh	r0, [r3, #20]
  store[11] = fsamp/1000;
    3e76:	fb81 0102 	smull	r0, r1, r1, r2
    3e7a:	17d2      	asrs	r2, r2, #31
  store[9]  = t_3;
    3e7c:	825c      	strh	r4, [r3, #18]
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
    3e7e:	2000      	movs	r0, #0
  store[11] = fsamp/1000;
    3e80:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  store[13] = dgain;
    3e84:	4c12      	ldr	r4, [pc, #72]	; (3ed0 <saveParameters()+0x9c>)
  store[12] = again;
    3e86:	4913      	ldr	r1, [pc, #76]	; (3ed4 <saveParameters()+0xa0>)
  store[11] = fsamp/1000;
    3e88:	82da      	strh	r2, [r3, #22]
  store[12] = again;
    3e8a:	8809      	ldrh	r1, [r1, #0]
  store[13] = dgain;
    3e8c:	8822      	ldrh	r2, [r4, #0]
  store[1]  = t_acq;
    3e8e:	805d      	strh	r5, [r3, #2]
  store[14] = 0;
    3e90:	61d8      	str	r0, [r3, #28]
  store[12] = again;
    3e92:	8319      	strh	r1, [r3, #24]
  store[13] = dgain;
    3e94:	835a      	strh	r2, [r3, #26]
  store[15] = 0;

  storeConfig(store, 16);
}
    3e96:	bc30      	pop	{r4, r5}
    3e98:	4770      	bx	lr
    3e9a:	bf00      	nop
    3e9c:	20009038 	.word	0x20009038
    3ea0:	20009030 	.word	0x20009030
    3ea4:	20043310 	.word	0x20043310
    3ea8:	20009034 	.word	0x20009034
    3eac:	200432e8 	.word	0x200432e8
    3eb0:	20041814 	.word	0x20041814
    3eb4:	20009056 	.word	0x20009056
    3eb8:	200432e4 	.word	0x200432e4
    3ebc:	20009024 	.word	0x20009024
    3ec0:	2000902c 	.word	0x2000902c
    3ec4:	20009028 	.word	0x20009028
    3ec8:	20009014 	.word	0x20009014
    3ecc:	10624dd3 	.word	0x10624dd3
    3ed0:	2004330a 	.word	0x2004330a
    3ed4:	20043308 	.word	0x20043308

00003ed8 <menu1(short)>:
{   // have ':'
    3ed8:	b510      	push	{r4, lr}
    3eda:	4604      	mov	r4, r0
    3edc:	b082      	sub	sp, #8
        virtual int available() { return usb_serial_available(); }
    3ede:	f00a fb0f 	bl	e500 <usb_serial_available>
    while(!Serial.available()) ;
    3ee2:	2800      	cmp	r0, #0
    3ee4:	d0fb      	beq.n	3ede <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    3ee6:	f00a fb4f 	bl	e588 <usb_serial_getchar>
    ch=Serial.read();
    3eea:	b2c3      	uxtb	r3, r0
    if(ch=='w') 
    3eec:	2b77      	cmp	r3, #119	; 0x77
    3eee:	d004      	beq.n	3efa <menu1(short)+0x22>
    else if(ch=='m') 
    3ef0:	2b6d      	cmp	r3, #109	; 0x6d
    3ef2:	d00e      	beq.n	3f12 <menu1(short)+0x3a>
}
    3ef4:	4620      	mov	r0, r4
    3ef6:	b002      	add	sp, #8
    3ef8:	bd10      	pop	{r4, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3efa:	210f      	movs	r1, #15
    3efc:	480b      	ldr	r0, [pc, #44]	; (3f2c <menu1(short)+0x54>)
    3efe:	f00a fb69 	bl	e5d4 <usb_serial_write>
    3f02:	480b      	ldr	r0, [pc, #44]	; (3f30 <menu1(short)+0x58>)
    3f04:	f008 f9fc 	bl	c300 <Print::println()>
      saveParameters();
    3f08:	f7ff ff94 	bl	3e34 <saveParameters()>
}
    3f0c:	4620      	mov	r0, r4
    3f0e:	b002      	add	sp, #8
    3f10:	bd10      	pop	{r4, pc}
{ char *buffer=menuGetLine();
    3f12:	f7ff fe4d 	bl	3bb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3f16:	aa01      	add	r2, sp, #4
    3f18:	4906      	ldr	r1, [pc, #24]	; (3f34 <menu1(short)+0x5c>)
    3f1a:	f00c fce3 	bl	108e4 <sscanf>
    3f1e:	4b06      	ldr	r3, [pc, #24]	; (3f38 <menu1(short)+0x60>)
    3f20:	9a01      	ldr	r2, [sp, #4]
}
    3f22:	4620      	mov	r0, r4
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3f24:	801a      	strh	r2, [r3, #0]
}
    3f26:	b002      	add	sp, #8
    3f28:	bd10      	pop	{r4, pc}
    3f2a:	bf00      	nop
    3f2c:	20000604 	.word	0x20000604
    3f30:	20008a54 	.word	0x20008a54
    3f34:	2000077c 	.word	0x2000077c
    3f38:	2004330e 	.word	0x2004330e

00003f3c <loadParameters()>:

uint16_t *loadParameters(void)
{
  loadConfig(store,16);
  if(store[0]==1)
    3f3c:	4b38      	ldr	r3, [pc, #224]	; (4020 <loadParameters()+0xe4>)
    3f3e:	881a      	ldrh	r2, [r3, #0]
    3f40:	2a01      	cmp	r2, #1
{
    3f42:	b410      	push	{r4}
  if(store[0]==1)
    3f44:	d038      	beq.n	3fb8 <loadParameters()+0x7c>
    dgain   = store[13];
  }
  else
  {
    store[0]  = 0;
    store[1]  = t_acq    = T_ACQ;
    3f46:	203c      	movs	r0, #60	; 0x3c
    3f48:	4c36      	ldr	r4, [pc, #216]	; (4024 <loadParameters()+0xe8>)
    store[0]  = 0;
    3f4a:	2200      	movs	r2, #0
    store[3]  = t_off    = T_OFF;
    store[4]  = t_rep    = T_REP;
    3f4c:	f44f 7116 	mov.w	r1, #600	; 0x258
    store[1]  = t_acq    = T_ACQ;
    3f50:	6020      	str	r0, [r4, #0]
    store[5]  = proc     = PROC_MODE;
    store[6]  = shift    = SHIFT;
    3f52:	f04f 0c08 	mov.w	ip, #8
    store[1]  = t_acq    = T_ACQ;
    3f56:	8058      	strh	r0, [r3, #2]
    store[3]  = t_off    = T_OFF;
    3f58:	4833      	ldr	r0, [pc, #204]	; (4028 <loadParameters()+0xec>)
    store[5]  = proc     = PROC_MODE;
    3f5a:	4c34      	ldr	r4, [pc, #208]	; (402c <loadParameters()+0xf0>)
    store[3]  = t_off    = T_OFF;
    3f5c:	6002      	str	r2, [r0, #0]
    store[4]  = t_rep    = T_REP;
    3f5e:	4834      	ldr	r0, [pc, #208]	; (4030 <loadParameters()+0xf4>)
    3f60:	8119      	strh	r1, [r3, #8]
    3f62:	6001      	str	r1, [r0, #0]
    store[7]  = t_1      = T_1;
    store[8]  = t_2      = T_2;
    3f64:	210c      	movs	r1, #12
    store[5]  = proc     = PROC_MODE;
    3f66:	8022      	strh	r2, [r4, #0]
    store[9]  = t_3      = T_3;
    store[10] = t_4      = T_4;
    3f68:	2018      	movs	r0, #24
    store[6]  = shift    = SHIFT;
    3f6a:	4c32      	ldr	r4, [pc, #200]	; (4034 <loadParameters()+0xf8>)
    store[8]  = t_2      = T_2;
    3f6c:	8219      	strh	r1, [r3, #16]
    store[6]  = shift    = SHIFT;
    3f6e:	f8a4 c000 	strh.w	ip, [r4]
    store[7]  = t_1      = T_1;
    3f72:	4c31      	ldr	r4, [pc, #196]	; (4038 <loadParameters()+0xfc>)
    store[9]  = t_3      = T_3;
    3f74:	8259      	strh	r1, [r3, #18]
    store[7]  = t_1      = T_1;
    3f76:	6022      	str	r2, [r4, #0]
    store[8]  = t_2      = T_2;
    3f78:	4c30      	ldr	r4, [pc, #192]	; (403c <loadParameters()+0x100>)
    store[10] = t_4      = T_4;
    3f7a:	8298      	strh	r0, [r3, #20]
    store[8]  = t_2      = T_2;
    3f7c:	6021      	str	r1, [r4, #0]
    store[9]  = t_3      = T_3;
    3f7e:	4c30      	ldr	r4, [pc, #192]	; (4040 <loadParameters()+0x104>)
    store[6]  = shift    = SHIFT;
    3f80:	f8a3 c00c 	strh.w	ip, [r3, #12]
    store[11] = (fsamp   = FSAMP)/1000; 
    3f84:	f04f 0c30 	mov.w	ip, #48	; 0x30
    store[9]  = t_3      = T_3;
    3f88:	6021      	str	r1, [r4, #0]
    store[10] = t_4      = T_4;
    3f8a:	4c2e      	ldr	r4, [pc, #184]	; (4044 <loadParameters()+0x108>)
    store[11] = (fsamp   = FSAMP)/1000; 
    3f8c:	492e      	ldr	r1, [pc, #184]	; (4048 <loadParameters()+0x10c>)
    store[10] = t_4      = T_4;
    3f8e:	6020      	str	r0, [r4, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    3f90:	f64b 3080 	movw	r0, #48000	; 0xbb80
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    3f94:	f85d 4b04 	ldr.w	r4, [sp], #4
    store[11] = (fsamp   = FSAMP)/1000; 
    3f98:	6008      	str	r0, [r1, #0]
    store[12] = again    = AGAIN;
    3f9a:	482c      	ldr	r0, [pc, #176]	; (404c <loadParameters()+0x110>)
    store[13] = dgain    = DGAIN;
    3f9c:	492c      	ldr	r1, [pc, #176]	; (4050 <loadParameters()+0x114>)
    store[12] = again    = AGAIN;
    3f9e:	8002      	strh	r2, [r0, #0]
    store[0]  = 0;
    3fa0:	801a      	strh	r2, [r3, #0]
}
    3fa2:	481f      	ldr	r0, [pc, #124]	; (4020 <loadParameters()+0xe4>)
    store[3]  = t_off    = T_OFF;
    3fa4:	80da      	strh	r2, [r3, #6]
    store[5]  = proc     = PROC_MODE;
    3fa6:	815a      	strh	r2, [r3, #10]
    store[7]  = t_1      = T_1;
    3fa8:	81da      	strh	r2, [r3, #14]
    store[12] = again    = AGAIN;
    3faa:	831a      	strh	r2, [r3, #24]
    store[13] = dgain    = DGAIN;
    3fac:	835a      	strh	r2, [r3, #26]
    store[14] = 0;
    3fae:	61da      	str	r2, [r3, #28]
    store[11] = (fsamp   = FSAMP)/1000; 
    3fb0:	f8a3 c016 	strh.w	ip, [r3, #22]
    store[13] = dgain    = DGAIN;
    3fb4:	800a      	strh	r2, [r1, #0]
}
    3fb6:	4770      	bx	lr
    t_acq   = store[1];
    3fb8:	885c      	ldrh	r4, [r3, #2]
    fsamp   = store[11]*1000;
    3fba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    t_acq   = store[1];
    3fbe:	4819      	ldr	r0, [pc, #100]	; (4024 <loadParameters()+0xe8>)
    fsamp   = store[11]*1000;
    3fc0:	8ada      	ldrh	r2, [r3, #22]
    t_acq   = store[1];
    3fc2:	6004      	str	r4, [r0, #0]
    t_on    = store[2];
    3fc4:	889c      	ldrh	r4, [r3, #4]
    fsamp   = store[11]*1000;
    3fc6:	fb01 f202 	mul.w	r2, r1, r2
    t_on    = store[2];
    3fca:	4822      	ldr	r0, [pc, #136]	; (4054 <loadParameters()+0x118>)
    fsamp   = store[11]*1000;
    3fcc:	491e      	ldr	r1, [pc, #120]	; (4048 <loadParameters()+0x10c>)
    t_on    = store[2];
    3fce:	6004      	str	r4, [r0, #0]
    t_off   = store[3];
    3fd0:	88dc      	ldrh	r4, [r3, #6]
    3fd2:	4815      	ldr	r0, [pc, #84]	; (4028 <loadParameters()+0xec>)
    3fd4:	6004      	str	r4, [r0, #0]
    t_rep   = store[4];
    3fd6:	891c      	ldrh	r4, [r3, #8]
    3fd8:	4815      	ldr	r0, [pc, #84]	; (4030 <loadParameters()+0xf4>)
    3fda:	6004      	str	r4, [r0, #0]
    proc    = store[5];
    3fdc:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
    3fe0:	4812      	ldr	r0, [pc, #72]	; (402c <loadParameters()+0xf0>)
    3fe2:	8004      	strh	r4, [r0, #0]
    shift   = store[6];
    3fe4:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
    3fe8:	4812      	ldr	r0, [pc, #72]	; (4034 <loadParameters()+0xf8>)
    3fea:	8004      	strh	r4, [r0, #0]
    t_1     = store[7];
    3fec:	89dc      	ldrh	r4, [r3, #14]
    3fee:	4812      	ldr	r0, [pc, #72]	; (4038 <loadParameters()+0xfc>)
    3ff0:	6004      	str	r4, [r0, #0]
    t_2     = store[8];
    3ff2:	8a1c      	ldrh	r4, [r3, #16]
    3ff4:	4811      	ldr	r0, [pc, #68]	; (403c <loadParameters()+0x100>)
    3ff6:	6004      	str	r4, [r0, #0]
    t_3     = store[9];
    3ff8:	8a5c      	ldrh	r4, [r3, #18]
    3ffa:	4811      	ldr	r0, [pc, #68]	; (4040 <loadParameters()+0x104>)
    3ffc:	6004      	str	r4, [r0, #0]
    t_4     = store[10];
    3ffe:	8a9c      	ldrh	r4, [r3, #20]
    4000:	4810      	ldr	r0, [pc, #64]	; (4044 <loadParameters()+0x108>)
    4002:	6004      	str	r4, [r0, #0]
    fsamp   = store[11]*1000;
    4004:	600a      	str	r2, [r1, #0]
    again   = store[12];
    4006:	f9b3 0018 	ldrsh.w	r0, [r3, #24]
    dgain   = store[13];
    400a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    again   = store[12];
    400e:	490f      	ldr	r1, [pc, #60]	; (404c <loadParameters()+0x110>)
    dgain   = store[13];
    4010:	4b0f      	ldr	r3, [pc, #60]	; (4050 <loadParameters()+0x114>)
    again   = store[12];
    4012:	8008      	strh	r0, [r1, #0]
}
    4014:	f85d 4b04 	ldr.w	r4, [sp], #4
    4018:	4801      	ldr	r0, [pc, #4]	; (4020 <loadParameters()+0xe4>)
    dgain   = store[13];
    401a:	801a      	strh	r2, [r3, #0]
}
    401c:	4770      	bx	lr
    401e:	bf00      	nop
    4020:	20041814 	.word	0x20041814
    4024:	20009030 	.word	0x20009030
    4028:	200432e8 	.word	0x200432e8
    402c:	20043310 	.word	0x20043310
    4030:	20009038 	.word	0x20009038
    4034:	20009056 	.word	0x20009056
    4038:	200432e4 	.word	0x200432e4
    403c:	20009024 	.word	0x20009024
    4040:	20009028 	.word	0x20009028
    4044:	2000902c 	.word	0x2000902c
    4048:	20009014 	.word	0x20009014
    404c:	20043308 	.word	0x20043308
    4050:	2004330a 	.word	0x2004330a
    4054:	20009034 	.word	0x20009034

00004058 <menu2()>:
{   // have '?'
    4058:	b510      	push	{r4, lr}
    405a:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    405c:	f00a fa50 	bl	e500 <usb_serial_available>
    while(!Serial.available()) ;
    4060:	2800      	cmp	r0, #0
    4062:	d0fb      	beq.n	405c <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    4064:	f00a fa90 	bl	e588 <usb_serial_getchar>
    ch=Serial.read();
    4068:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    406a:	2870      	cmp	r0, #112	; 0x70
    406c:	d053      	beq.n	4116 <menu2()+0xbe>
    else if(ch=='d') // get date
    406e:	3831      	subs	r0, #49	; 0x31
    4070:	2846      	cmp	r0, #70	; 0x46
    4072:	d84a      	bhi.n	410a <menu2()+0xb2>
    4074:	e8df f010 	tbh	[pc, r0, lsl #1]
    4078:	011e0118 	.word	0x011e0118
    407c:	012a0124 	.word	0x012a0124
    4080:	00490049 	.word	0x00490049
    4084:	00490049 	.word	0x00490049
    4088:	00490049 	.word	0x00490049
    408c:	00490049 	.word	0x00490049
    4090:	00490049 	.word	0x00490049
    4094:	00490049 	.word	0x00490049
    4098:	00490049 	.word	0x00490049
    409c:	00490049 	.word	0x00490049
    40a0:	00490049 	.word	0x00490049
    40a4:	00490049 	.word	0x00490049
    40a8:	00490049 	.word	0x00490049
    40ac:	00490049 	.word	0x00490049
    40b0:	00490049 	.word	0x00490049
    40b4:	00490049 	.word	0x00490049
    40b8:	00490049 	.word	0x00490049
    40bc:	00490049 	.word	0x00490049
    40c0:	00490049 	.word	0x00490049
    40c4:	00490049 	.word	0x00490049
    40c8:	00490049 	.word	0x00490049
    40cc:	00490049 	.word	0x00490049
    40d0:	00490049 	.word	0x00490049
    40d4:	00490049 	.word	0x00490049
    40d8:	0049012d 	.word	0x0049012d
    40dc:	01410133 	.word	0x01410133
    40e0:	01500049 	.word	0x01500049
    40e4:	0049015d 	.word	0x0049015d
    40e8:	00490049 	.word	0x00490049
    40ec:	00490049 	.word	0x00490049
    40f0:	00490049 	.word	0x00490049
    40f4:	00490163 	.word	0x00490163
    40f8:	01690049 	.word	0x01690049
    40fc:	0175016f 	.word	0x0175016f
    4100:	00490049 	.word	0x00490049
    4104:	0109      	.short	0x0109
    4106:	f00a fa3f 	bl	e588 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    410a:	f00a f9f9 	bl	e500 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    410e:	2800      	cmp	r0, #0
    4110:	d1f9      	bne.n	4106 <menu2()+0xae>
}
    4112:	b008      	add	sp, #32
    4114:	bd10      	pop	{r4, pc}
      Serial.println();
    4116:	489a      	ldr	r0, [pc, #616]	; (4380 <menu2()+0x328>)
    4118:	f008 f8f2 	bl	c300 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    411c:	2126      	movs	r1, #38	; 0x26
    411e:	4899      	ldr	r0, [pc, #612]	; (4384 <menu2()+0x32c>)
    4120:	f00a fa58 	bl	e5d4 <usb_serial_write>
    4124:	4896      	ldr	r0, [pc, #600]	; (4380 <menu2()+0x328>)
    4126:	f008 f8eb 	bl	c300 <Print::println()>
      rtc_get_datetime(&t);
    412a:	a806      	add	r0, sp, #24
    412c:	f000 fb88 	bl	4840 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now: %4d-%02d-%02d %02d:%02d:%02d %d\n",
    4130:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    4134:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    4138:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    413c:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4140:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    4144:	9000      	str	r0, [sp, #0]
    4146:	488e      	ldr	r0, [pc, #568]	; (4380 <menu2()+0x328>)
    4148:	e9cd 3203 	strd	r3, r2, [sp, #12]
    414c:	e9cd 1401 	strd	r1, r4, [sp, #4]
    4150:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    4154:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4158:	498b      	ldr	r1, [pc, #556]	; (4388 <menu2()+0x330>)
    415a:	f008 f8ed 	bl	c338 <Print::printf(char const*, ...)>
    415e:	210c      	movs	r1, #12
    4160:	488a      	ldr	r0, [pc, #552]	; (438c <menu2()+0x334>)
    4162:	f00a fa37 	bl	e5d4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    4166:	498a      	ldr	r1, [pc, #552]	; (4390 <menu2()+0x338>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4168:	2300      	movs	r3, #0
    416a:	220a      	movs	r2, #10
    416c:	6809      	ldr	r1, [r1, #0]
    416e:	4884      	ldr	r0, [pc, #528]	; (4380 <menu2()+0x328>)
    4170:	f008 f8f0 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4174:	4882      	ldr	r0, [pc, #520]	; (4380 <menu2()+0x328>)
    4176:	f008 f8c3 	bl	c300 <Print::println()>
    417a:	210c      	movs	r1, #12
    417c:	4885      	ldr	r0, [pc, #532]	; (4394 <menu2()+0x33c>)
    417e:	f00a fa29 	bl	e5d4 <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    4182:	4985      	ldr	r1, [pc, #532]	; (4398 <menu2()+0x340>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4184:	2300      	movs	r3, #0
    4186:	220a      	movs	r2, #10
    4188:	6809      	ldr	r1, [r1, #0]
    418a:	487d      	ldr	r0, [pc, #500]	; (4380 <menu2()+0x328>)
    418c:	f008 f8e2 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4190:	487b      	ldr	r0, [pc, #492]	; (4380 <menu2()+0x328>)
    4192:	f008 f8b5 	bl	c300 <Print::println()>
    4196:	210c      	movs	r1, #12
    4198:	4880      	ldr	r0, [pc, #512]	; (439c <menu2()+0x344>)
    419a:	f00a fa1b 	bl	e5d4 <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    419e:	4980      	ldr	r1, [pc, #512]	; (43a0 <menu2()+0x348>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    41a0:	220a      	movs	r2, #10
    41a2:	2300      	movs	r3, #0
    41a4:	6809      	ldr	r1, [r1, #0]
    41a6:	4876      	ldr	r0, [pc, #472]	; (4380 <menu2()+0x328>)
    41a8:	f008 f8d4 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    41ac:	4874      	ldr	r0, [pc, #464]	; (4380 <menu2()+0x328>)
    41ae:	f008 f8a7 	bl	c300 <Print::println()>
    41b2:	210c      	movs	r1, #12
    41b4:	487b      	ldr	r0, [pc, #492]	; (43a4 <menu2()+0x34c>)
    41b6:	f00a fa0d 	bl	e5d4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    41ba:	4b7b      	ldr	r3, [pc, #492]	; (43a8 <menu2()+0x350>)
	size_t println(long n)				{ return print(n) + println(); }
    41bc:	4870      	ldr	r0, [pc, #448]	; (4380 <menu2()+0x328>)
    41be:	6819      	ldr	r1, [r3, #0]
    41c0:	f008 f892 	bl	c2e8 <Print::print(long)>
    41c4:	486e      	ldr	r0, [pc, #440]	; (4380 <menu2()+0x328>)
    41c6:	f008 f89b 	bl	c300 <Print::println()>
    41ca:	210c      	movs	r1, #12
    41cc:	4877      	ldr	r0, [pc, #476]	; (43ac <menu2()+0x354>)
    41ce:	f00a fa01 	bl	e5d4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    41d2:	4b77      	ldr	r3, [pc, #476]	; (43b0 <menu2()+0x358>)
	size_t print(int n)				{ return print((long)n); }
    41d4:	486a      	ldr	r0, [pc, #424]	; (4380 <menu2()+0x328>)
    41d6:	8819      	ldrh	r1, [r3, #0]
    41d8:	b209      	sxth	r1, r1
    41da:	f008 f885 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41de:	4868      	ldr	r0, [pc, #416]	; (4380 <menu2()+0x328>)
    41e0:	f008 f88e 	bl	c300 <Print::println()>
    41e4:	210c      	movs	r1, #12
    41e6:	4873      	ldr	r0, [pc, #460]	; (43b4 <menu2()+0x35c>)
    41e8:	f00a f9f4 	bl	e5d4 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    41ec:	4b72      	ldr	r3, [pc, #456]	; (43b8 <menu2()+0x360>)
	size_t print(int n)				{ return print((long)n); }
    41ee:	4864      	ldr	r0, [pc, #400]	; (4380 <menu2()+0x328>)
    41f0:	8819      	ldrh	r1, [r3, #0]
    41f2:	b209      	sxth	r1, r1
    41f4:	f008 f878 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41f8:	4861      	ldr	r0, [pc, #388]	; (4380 <menu2()+0x328>)
    41fa:	f008 f881 	bl	c300 <Print::println()>
    41fe:	210c      	movs	r1, #12
    4200:	486e      	ldr	r0, [pc, #440]	; (43bc <menu2()+0x364>)
    4202:	f00a f9e7 	bl	e5d4 <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    4206:	4b6e      	ldr	r3, [pc, #440]	; (43c0 <menu2()+0x368>)
	size_t print(int n)				{ return print((long)n); }
    4208:	485d      	ldr	r0, [pc, #372]	; (4380 <menu2()+0x328>)
    420a:	8819      	ldrh	r1, [r3, #0]
    420c:	b209      	sxth	r1, r1
    420e:	f008 f86b 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4212:	485b      	ldr	r0, [pc, #364]	; (4380 <menu2()+0x328>)
    4214:	f008 f874 	bl	c300 <Print::println()>
    4218:	210c      	movs	r1, #12
    421a:	486a      	ldr	r0, [pc, #424]	; (43c4 <menu2()+0x36c>)
    421c:	f00a f9da 	bl	e5d4 <usb_serial_write>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    4220:	4969      	ldr	r1, [pc, #420]	; (43c8 <menu2()+0x370>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4222:	2300      	movs	r3, #0
    4224:	220a      	movs	r2, #10
    4226:	6809      	ldr	r1, [r1, #0]
    4228:	4855      	ldr	r0, [pc, #340]	; (4380 <menu2()+0x328>)
    422a:	f008 f893 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    422e:	4854      	ldr	r0, [pc, #336]	; (4380 <menu2()+0x328>)
    4230:	f008 f866 	bl	c300 <Print::println()>
    4234:	210c      	movs	r1, #12
    4236:	4865      	ldr	r0, [pc, #404]	; (43cc <menu2()+0x374>)
    4238:	f00a f9cc 	bl	e5d4 <usb_serial_write>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    423c:	4964      	ldr	r1, [pc, #400]	; (43d0 <menu2()+0x378>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    423e:	2300      	movs	r3, #0
    4240:	220a      	movs	r2, #10
    4242:	6809      	ldr	r1, [r1, #0]
    4244:	484e      	ldr	r0, [pc, #312]	; (4380 <menu2()+0x328>)
    4246:	f008 f885 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    424a:	484d      	ldr	r0, [pc, #308]	; (4380 <menu2()+0x328>)
    424c:	f008 f858 	bl	c300 <Print::println()>
    4250:	210c      	movs	r1, #12
    4252:	4860      	ldr	r0, [pc, #384]	; (43d4 <menu2()+0x37c>)
    4254:	f00a f9be 	bl	e5d4 <usb_serial_write>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    4258:	495f      	ldr	r1, [pc, #380]	; (43d8 <menu2()+0x380>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    425a:	2300      	movs	r3, #0
    425c:	220a      	movs	r2, #10
    425e:	6809      	ldr	r1, [r1, #0]
    4260:	4847      	ldr	r0, [pc, #284]	; (4380 <menu2()+0x328>)
    4262:	f008 f877 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4266:	4846      	ldr	r0, [pc, #280]	; (4380 <menu2()+0x328>)
    4268:	f008 f84a 	bl	c300 <Print::println()>
    426c:	210c      	movs	r1, #12
    426e:	485b      	ldr	r0, [pc, #364]	; (43dc <menu2()+0x384>)
    4270:	f00a f9b0 	bl	e5d4 <usb_serial_write>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    4274:	495a      	ldr	r1, [pc, #360]	; (43e0 <menu2()+0x388>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4276:	2300      	movs	r3, #0
    4278:	220a      	movs	r2, #10
    427a:	6809      	ldr	r1, [r1, #0]
    427c:	4840      	ldr	r0, [pc, #256]	; (4380 <menu2()+0x328>)
    427e:	f008 f869 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4282:	483f      	ldr	r0, [pc, #252]	; (4380 <menu2()+0x328>)
    4284:	f008 f83c 	bl	c300 <Print::println()>
    4288:	e73f      	b.n	410a <menu2()+0xb2>
    { uint16_t *params=loadParameters();
    428a:	f7ff fe57 	bl	3f3c <loadParameters()>
    428e:	4604      	mov	r4, r0
    4290:	210d      	movs	r1, #13
    4292:	4854      	ldr	r0, [pc, #336]	; (43e4 <menu2()+0x38c>)
    4294:	f00a f99e 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4298:	8821      	ldrh	r1, [r4, #0]
    429a:	4839      	ldr	r0, [pc, #228]	; (4380 <menu2()+0x328>)
    429c:	f008 f824 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    42a0:	4837      	ldr	r0, [pc, #220]	; (4380 <menu2()+0x328>)
    42a2:	f008 f82d 	bl	c300 <Print::println()>
    42a6:	e730      	b.n	410a <menu2()+0xb2>
    42a8:	210b      	movs	r1, #11
    42aa:	484f      	ldr	r0, [pc, #316]	; (43e8 <menu2()+0x390>)
    42ac:	f00a f992 	bl	e5d4 <usb_serial_write>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    42b0:	4945      	ldr	r1, [pc, #276]	; (43c8 <menu2()+0x370>)
    42b2:	e7e0      	b.n	4276 <menu2()+0x21e>
    42b4:	210b      	movs	r1, #11
    42b6:	484d      	ldr	r0, [pc, #308]	; (43ec <menu2()+0x394>)
    42b8:	f00a f98c 	bl	e5d4 <usb_serial_write>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    42bc:	4944      	ldr	r1, [pc, #272]	; (43d0 <menu2()+0x378>)
    42be:	e7da      	b.n	4276 <menu2()+0x21e>
    42c0:	210b      	movs	r1, #11
    42c2:	484b      	ldr	r0, [pc, #300]	; (43f0 <menu2()+0x398>)
    42c4:	f00a f986 	bl	e5d4 <usb_serial_write>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    42c8:	4943      	ldr	r1, [pc, #268]	; (43d8 <menu2()+0x380>)
    42ca:	e7d4      	b.n	4276 <menu2()+0x21e>
    42cc:	210b      	movs	r1, #11
    42ce:	4849      	ldr	r0, [pc, #292]	; (43f4 <menu2()+0x39c>)
    42d0:	e7ce      	b.n	4270 <menu2()+0x218>
    42d2:	210c      	movs	r1, #12
    42d4:	482d      	ldr	r0, [pc, #180]	; (438c <menu2()+0x334>)
    42d6:	f00a f97d 	bl	e5d4 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    42da:	492d      	ldr	r1, [pc, #180]	; (4390 <menu2()+0x338>)
    42dc:	e7cb      	b.n	4276 <menu2()+0x21e>
    42de:	210c      	movs	r1, #12
    42e0:	4834      	ldr	r0, [pc, #208]	; (43b4 <menu2()+0x35c>)
    42e2:	f00a f977 	bl	e5d4 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    42e6:	4b34      	ldr	r3, [pc, #208]	; (43b8 <menu2()+0x360>)
      Serial.print("again (g) = "); Serial.println(again);
    42e8:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    42ea:	4825      	ldr	r0, [pc, #148]	; (4380 <menu2()+0x328>)
    42ec:	b209      	sxth	r1, r1
    42ee:	f007 fffb 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    42f2:	4823      	ldr	r0, [pc, #140]	; (4380 <menu2()+0x328>)
    42f4:	f008 f804 	bl	c300 <Print::println()>
    42f8:	e707      	b.n	410a <menu2()+0xb2>
      rtc_get_datetime(&t);
    42fa:	a806      	add	r0, sp, #24
    42fc:	f000 faa0 	bl	4840 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    4300:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4304:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    4308:	9000      	str	r0, [sp, #0]
    430a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    430e:	493a      	ldr	r1, [pc, #232]	; (43f8 <menu2()+0x3a0>)
    4310:	481b      	ldr	r0, [pc, #108]	; (4380 <menu2()+0x328>)
    4312:	f008 f811 	bl	c338 <Print::printf(char const*, ...)>
    4316:	e6f8      	b.n	410a <menu2()+0xb2>
    4318:	210c      	movs	r1, #12
    431a:	4822      	ldr	r0, [pc, #136]	; (43a4 <menu2()+0x34c>)
    431c:	f00a f95a 	bl	e5d4 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    4320:	4b21      	ldr	r3, [pc, #132]	; (43a8 <menu2()+0x350>)
	size_t println(long n)				{ return print(n) + println(); }
    4322:	4817      	ldr	r0, [pc, #92]	; (4380 <menu2()+0x328>)
    4324:	6819      	ldr	r1, [r3, #0]
    4326:	f007 ffdf 	bl	c2e8 <Print::print(long)>
    432a:	4815      	ldr	r0, [pc, #84]	; (4380 <menu2()+0x328>)
    432c:	f007 ffe8 	bl	c300 <Print::println()>
    4330:	e6eb      	b.n	410a <menu2()+0xb2>
    4332:	210c      	movs	r1, #12
    4334:	4821      	ldr	r0, [pc, #132]	; (43bc <menu2()+0x364>)
    4336:	f00a f94d 	bl	e5d4 <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    433a:	4b21      	ldr	r3, [pc, #132]	; (43c0 <menu2()+0x368>)
    433c:	e7d4      	b.n	42e8 <menu2()+0x290>
    433e:	210c      	movs	r1, #12
    4340:	482e      	ldr	r0, [pc, #184]	; (43fc <menu2()+0x3a4>)
    4342:	f00a f947 	bl	e5d4 <usb_serial_write>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    4346:	4914      	ldr	r1, [pc, #80]	; (4398 <menu2()+0x340>)
    4348:	e795      	b.n	4276 <menu2()+0x21e>
    434a:	210c      	movs	r1, #12
    434c:	4813      	ldr	r0, [pc, #76]	; (439c <menu2()+0x344>)
    434e:	f00a f941 	bl	e5d4 <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    4352:	4913      	ldr	r1, [pc, #76]	; (43a0 <menu2()+0x348>)
    4354:	e78f      	b.n	4276 <menu2()+0x21e>
    4356:	210c      	movs	r1, #12
    4358:	4814      	ldr	r0, [pc, #80]	; (43ac <menu2()+0x354>)
    435a:	f00a f93b 	bl	e5d4 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    435e:	4b14      	ldr	r3, [pc, #80]	; (43b0 <menu2()+0x358>)
    4360:	e7c2      	b.n	42e8 <menu2()+0x290>
      rtc_get_datetime(&t);
    4362:	a806      	add	r0, sp, #24
    4364:	f000 fa6c 	bl	4840 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    4368:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    436c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    4370:	9000      	str	r0, [sp, #0]
    4372:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    4376:	4922      	ldr	r1, [pc, #136]	; (4400 <menu2()+0x3a8>)
    4378:	4801      	ldr	r0, [pc, #4]	; (4380 <menu2()+0x328>)
    437a:	f007 ffdd 	bl	c338 <Print::printf(char const*, ...)>
    437e:	e6c4      	b.n	410a <menu2()+0xb2>
    4380:	20008a54 	.word	0x20008a54
    4384:	20000974 	.word	0x20000974
    4388:	20000614 	.word	0x20000614
    438c:	2000063c 	.word	0x2000063c
    4390:	20009030 	.word	0x20009030
    4394:	2000064c 	.word	0x2000064c
    4398:	20009034 	.word	0x20009034
    439c:	2000065c 	.word	0x2000065c
    43a0:	20009038 	.word	0x20009038
    43a4:	2000066c 	.word	0x2000066c
    43a8:	20009014 	.word	0x20009014
    43ac:	2000067c 	.word	0x2000067c
    43b0:	20009056 	.word	0x20009056
    43b4:	2000068c 	.word	0x2000068c
    43b8:	20043310 	.word	0x20043310
    43bc:	2000069c 	.word	0x2000069c
    43c0:	20043308 	.word	0x20043308
    43c4:	200006ac 	.word	0x200006ac
    43c8:	200432e4 	.word	0x200432e4
    43cc:	200006bc 	.word	0x200006bc
    43d0:	20009024 	.word	0x20009024
    43d4:	200006cc 	.word	0x200006cc
    43d8:	20009028 	.word	0x20009028
    43dc:	200006dc 	.word	0x200006dc
    43e0:	2000902c 	.word	0x2000902c
    43e4:	20000764 	.word	0x20000764
    43e8:	20000734 	.word	0x20000734
    43ec:	20000740 	.word	0x20000740
    43f0:	2000074c 	.word	0x2000074c
    43f4:	20000758 	.word	0x20000758
    43f8:	200006ec 	.word	0x200006ec
    43fc:	20000724 	.word	0x20000724
    4400:	20000708 	.word	0x20000708

00004404 <menu(short)>:
{
    4404:	b538      	push	{r3, r4, r5, lr}
    4406:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    4408:	f00a f87a 	bl	e500 <usb_serial_available>
  if(Serial.available())
    440c:	b908      	cbnz	r0, 4412 <menu(short)+0xe>
}
    440e:	4620      	mov	r0, r4
    4410:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    4412:	f00a f8b9 	bl	e588 <usb_serial_getchar>
    char ch=Serial.read();
    4416:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    4418:	2873      	cmp	r0, #115	; 0x73
    441a:	d020      	beq.n	445e <menu(short)+0x5a>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    441c:	2865      	cmp	r0, #101	; 0x65
    441e:	d042      	beq.n	44a6 <menu(short)+0xa2>
    4420:	d806      	bhi.n	4430 <menu(short)+0x2c>
    4422:	283a      	cmp	r0, #58	; 0x3a
    4424:	d03a      	beq.n	449c <menu(short)+0x98>
    4426:	283f      	cmp	r0, #63	; 0x3f
    4428:	d114      	bne.n	4454 <menu(short)+0x50>
    else if(ch=='?') menu2(); 
    442a:	f7ff fe15 	bl	4058 <menu2()>
    442e:	e00b      	b.n	4448 <menu(short)+0x44>
    4430:	286d      	cmp	r0, #109	; 0x6d
    4432:	d01a      	beq.n	446a <menu(short)+0x66>
    4434:	2872      	cmp	r0, #114	; 0x72
    4436:	d127      	bne.n	4488 <menu(short)+0x84>
    else if(ch=='r') {resetUSB();}
    4438:	f7fb feb4 	bl	1a4 <resetUSB()>
    443c:	e004      	b.n	4448 <menu(short)+0x44>
    443e:	f00a f8a3 	bl	e588 <usb_serial_getchar>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4442:	b2c0      	uxtb	r0, r0
    4444:	f00a f8b0 	bl	e5a8 <usb_serial_putchar>
        virtual int available() { return usb_serial_available(); }
    4448:	f00a f85a 	bl	e500 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    444c:	2800      	cmp	r0, #0
    444e:	d1f6      	bne.n	443e <menu(short)+0x3a>
}
    4450:	4620      	mov	r0, r4
    4452:	bd38      	pop	{r3, r4, r5, pc}
    4454:	2821      	cmp	r0, #33	; 0x21
    4456:	d117      	bne.n	4488 <menu(short)+0x84>
    else if(ch=='!') menu3(); 
    4458:	f7ff fbca 	bl	3bf0 <menu3()>
    445c:	e7f4      	b.n	4448 <menu(short)+0x44>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    445e:	2107      	movs	r1, #7
    4460:	4814      	ldr	r0, [pc, #80]	; (44b4 <menu(short)+0xb0>)
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    4462:	2400      	movs	r4, #0
    4464:	f00a f8b6 	bl	e5d4 <usb_serial_write>
    4468:	e7ee      	b.n	4448 <menu(short)+0x44>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    446a:	4d13      	ldr	r5, [pc, #76]	; (44b8 <menu(short)+0xb4>)
    446c:	210a      	movs	r1, #10
    446e:	4813      	ldr	r0, [pc, #76]	; (44bc <menu(short)+0xb8>)
    4470:	882b      	ldrh	r3, [r5, #0]
    4472:	f1c3 0301 	rsb	r3, r3, #1
    4476:	802b      	strh	r3, [r5, #0]
    4478:	f00a f8ac 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    447c:	f9b5 1000 	ldrsh.w	r1, [r5]
    4480:	480f      	ldr	r0, [pc, #60]	; (44c0 <menu(short)+0xbc>)
    4482:	f007 ff31 	bl	c2e8 <Print::print(long)>
    4486:	e7df      	b.n	4448 <menu(short)+0x44>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4488:	f00a f88e 	bl	e5a8 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    448c:	2140      	movs	r1, #64	; 0x40
    448e:	480d      	ldr	r0, [pc, #52]	; (44c4 <menu(short)+0xc0>)
    4490:	f00a f8a0 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4494:	480a      	ldr	r0, [pc, #40]	; (44c0 <menu(short)+0xbc>)
    4496:	f007 ff33 	bl	c300 <Print::println()>
    449a:	e7d5      	b.n	4448 <menu(short)+0x44>
    else if(ch==':') status=menu1(status); 
    449c:	4620      	mov	r0, r4
    449e:	f7ff fd1b 	bl	3ed8 <menu1(short)>
    44a2:	4604      	mov	r4, r0
    44a4:	e7d0      	b.n	4448 <menu(short)+0x44>
    44a6:	2106      	movs	r1, #6
    44a8:	4807      	ldr	r0, [pc, #28]	; (44c8 <menu(short)+0xc4>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    44aa:	2405      	movs	r4, #5
    44ac:	f00a f892 	bl	e5d4 <usb_serial_write>
    44b0:	e7ca      	b.n	4448 <menu(short)+0x44>
    44b2:	bf00      	nop
    44b4:	200005a4 	.word	0x200005a4
    44b8:	2004330e 	.word	0x2004330e
    44bc:	200005b4 	.word	0x200005b4
    44c0:	20008a54 	.word	0x20008a54
    44c4:	200005c0 	.word	0x200005c0
    44c8:	200005ac 	.word	0x200005ac

000044cc <getStore()>:

uint16_t *getStore(void) {return store;}
    44cc:	4800      	ldr	r0, [pc, #0]	; (44d0 <getStore()+0x4>)
    44ce:	4770      	bx	lr
    44d0:	20041814 	.word	0x20041814

000044d4 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    44d4:	4a04      	ldr	r2, [pc, #16]	; (44e8 <getDataCount()+0x14>)
    44d6:	4b05      	ldr	r3, [pc, #20]	; (44ec <getDataCount()+0x18>)
    44d8:	6810      	ldr	r0, [r2, #0]
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	1ac0      	subs	r0, r0, r3
    44de:	bf48      	it	mi
    44e0:	30c0      	addmi	r0, #192	; 0xc0
    44e2:	b280      	uxth	r0, r0
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop
    44e8:	200417e8 	.word	0x200417e8
    44ec:	200417e4 	.word	0x200417e4

000044f0 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    44f0:	4b01      	ldr	r3, [pc, #4]	; (44f8 <queue_isBusy()+0x8>)
    44f2:	6818      	ldr	r0, [r3, #0]
    44f4:	4770      	bx	lr
    44f6:	bf00      	nop
    44f8:	2000e3d4 	.word	0x2000e3d4

000044fc <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    44fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ( (tail+1)%MAXBUF == head ) return 0;
    44fe:	4c17      	ldr	r4, [pc, #92]	; (455c <pushData(unsigned long*)+0x60>)
  {
    4500:	4601      	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) return 0;
    4502:	4a17      	ldr	r2, [pc, #92]	; (4560 <pushData(unsigned long*)+0x64>)
    4504:	6823      	ldr	r3, [r4, #0]
    4506:	4d17      	ldr	r5, [pc, #92]	; (4564 <pushData(unsigned long*)+0x68>)
    4508:	3301      	adds	r3, #1
    450a:	6816      	ldr	r6, [r2, #0]
    450c:	fb85 2003 	smull	r2, r0, r5, r3
    4510:	17da      	asrs	r2, r3, #31
    4512:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    4516:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    451a:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    451e:	42b3      	cmp	r3, r6
    4520:	d01a      	beq.n	4558 <pushData(unsigned long*)+0x5c>
    //while(busy); 
    queue_busy=1;
    4522:	2601      	movs	r6, #1
    4524:	4f10      	ldr	r7, [pc, #64]	; (4568 <pushData(unsigned long*)+0x6c>)
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    4526:	4b11      	ldr	r3, [pc, #68]	; (456c <pushData(unsigned long*)+0x70>)
    4528:	f44f 6280 	mov.w	r2, #1024	; 0x400
    queue_busy=1;
    452c:	603e      	str	r6, [r7, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    452e:	6820      	ldr	r0, [r4, #0]
    4530:	eb03 2080 	add.w	r0, r3, r0, lsl #10
    4534:	f008 face 	bl	cad4 <memcpy>
    tail = (tail+1)%MAXBUF;
    4538:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    453a:	4630      	mov	r0, r6
    tail = (tail+1)%MAXBUF;
    453c:	4432      	add	r2, r6
    453e:	fb85 3502 	smull	r3, r5, r5, r2
    4542:	17d3      	asrs	r3, r2, #31
    4544:	ebc3 1365 	rsb	r3, r3, r5, asr #5
    4548:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    454c:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    queue_busy=0;
    4550:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    4552:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    4554:	603a      	str	r2, [r7, #0]
  }
    4556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) return 0;
    4558:	2000      	movs	r0, #0
  }
    455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    455c:	200417e8 	.word	0x200417e8
    4560:	200417e4 	.word	0x200417e4
    4564:	2aaaaaab 	.word	0x2aaaaaab
    4568:	2000e3d4 	.word	0x2000e3d4
    456c:	2000e3d8 	.word	0x2000e3d8

00004570 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    4570:	4b12      	ldr	r3, [pc, #72]	; (45bc <pullData(unsigned long*)+0x4c>)
  {
    4572:	b570      	push	{r4, r5, r6, lr}
    if ( head==tail ) return 0;
    4574:	4c12      	ldr	r4, [pc, #72]	; (45c0 <pullData(unsigned long*)+0x50>)
    4576:	6822      	ldr	r2, [r4, #0]
    4578:	681b      	ldr	r3, [r3, #0]
    457a:	429a      	cmp	r2, r3
    457c:	d01b      	beq.n	45b6 <pullData(unsigned long*)+0x46>
    //while(busy); 
    queue_busy=1;
    457e:	2501      	movs	r5, #1
    4580:	4e10      	ldr	r6, [pc, #64]	; (45c4 <pullData(unsigned long*)+0x54>)
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    4582:	4b11      	ldr	r3, [pc, #68]	; (45c8 <pullData(unsigned long*)+0x58>)
    4584:	f44f 6280 	mov.w	r2, #1024	; 0x400
    queue_busy=1;
    4588:	6035      	str	r5, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    458a:	6821      	ldr	r1, [r4, #0]
    458c:	eb03 2181 	add.w	r1, r3, r1, lsl #10
    4590:	f008 faa0 	bl	cad4 <memcpy>
    head = (head+1)%MAXBUF;
    4594:	6822      	ldr	r2, [r4, #0]
    4596:	490d      	ldr	r1, [pc, #52]	; (45cc <pullData(unsigned long*)+0x5c>)
    queue_busy=0;
    return 1;
    4598:	4628      	mov	r0, r5
    head = (head+1)%MAXBUF;
    459a:	442a      	add	r2, r5
    459c:	fb81 3102 	smull	r3, r1, r1, r2
    45a0:	17d3      	asrs	r3, r2, #31
    45a2:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    45a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    45aa:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    queue_busy=0;
    45ae:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    45b0:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    45b2:	6032      	str	r2, [r6, #0]
  }
    45b4:	bd70      	pop	{r4, r5, r6, pc}
    if ( head==tail ) return 0;
    45b6:	2000      	movs	r0, #0
  }
    45b8:	bd70      	pop	{r4, r5, r6, pc}
    45ba:	bf00      	nop
    45bc:	200417e8 	.word	0x200417e8
    45c0:	200417e4 	.word	0x200417e4
    45c4:	2000e3d4 	.word	0x2000e3d4
    45c8:	2000e3d8 	.word	0x2000e3d8
    45cc:	2aaaaaab 	.word	0x2aaaaaab

000045d0 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    45d0:	4a54      	ldr	r2, [pc, #336]	; (4724 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    45d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    45d6:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    45da:	f240 196d 	movw	r9, #365	; 0x16d
    45de:	4e52      	ldr	r6, [pc, #328]	; (4728 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    45e0:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    45e2:	4f52      	ldr	r7, [pc, #328]	; (472c <time2date(unsigned long, datetime_t*)+0x15c>)
    45e4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4740 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    45e8:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    45ec:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    45f0:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    45f2:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    45f6:	4c4e      	ldr	r4, [pc, #312]	; (4730 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    45f8:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    45fc:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    4600:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4604:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    4606:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    460a:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    460c:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    4610:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4614:	4b47      	ldr	r3, [pc, #284]	; (4734 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    4616:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    461a:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    461e:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    4620:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4622:	1ae2      	subs	r2, r4, r3
    4624:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    4628:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    462a:	089b      	lsrs	r3, r3, #2
    462c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4630:	1ae4      	subs	r4, r4, r3
    4632:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4634:	b2c3      	uxtb	r3, r0
    4636:	f240 1c6d 	movw	ip, #365	; 0x16d
    463a:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    463e:	f013 0403 	ands.w	r4, r3, #3
    4642:	fb06 f503 	mul.w	r5, r6, r3
    4646:	d108      	bne.n	465a <time2date(unsigned long, datetime_t*)+0x8a>
    4648:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    464c:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    4650:	d303      	bcc.n	465a <time2date(unsigned long, datetime_t*)+0x8a>
    4652:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    4656:	bf38      	it	cc
    4658:	46cc      	movcc	ip, r9
    465a:	4462      	add	r2, ip
    465c:	3001      	adds	r0, #1
    465e:	4596      	cmp	lr, r2
    4660:	d2e8      	bcs.n	4634 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    4662:	4d35      	ldr	r5, [pc, #212]	; (4738 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    4664:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    4666:	fba5 0503 	umull	r0, r5, r5, r3
    466a:	b3a4      	cbz	r4, 46d6 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    466c:	096e      	lsrs	r6, r5, #5
    466e:	2764      	movs	r7, #100	; 0x64
    4670:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4674:	09ed      	lsrs	r5, r5, #7
    4676:	fb07 3616 	mls	r6, r7, r6, r3
    467a:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    467e:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    4682:	ebae 0e02 	sub.w	lr, lr, r2
    4686:	2300      	movs	r3, #0
    4688:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    468a:	4f2c      	ldr	r7, [pc, #176]	; (473c <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    468c:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    468e:	e00a      	b.n	46a6 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    4690:	f813 c007 	ldrb.w	ip, [r3, r7]
    4694:	4584      	cmp	ip, r0
    4696:	d837      	bhi.n	4708 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    4698:	2a0c      	cmp	r2, #12
        time -= monthLength;
    469a:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    469e:	d012      	beq.n	46c6 <time2date(unsigned long, datetime_t*)+0xf6>
    46a0:	3201      	adds	r2, #1
    46a2:	3301      	adds	r3, #1
    46a4:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    46a6:	2b01      	cmp	r3, #1
    46a8:	fa5f fe83 	uxtb.w	lr, r3
    46ac:	d1f0      	bne.n	4690 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    46ae:	b91c      	cbnz	r4, 46b8 <time2date(unsigned long, datetime_t*)+0xe8>
    46b0:	b1f6      	cbz	r6, 46f0 <time2date(unsigned long, datetime_t*)+0x120>
    46b2:	f04f 0c1d 	mov.w	ip, #29
    46b6:	e001      	b.n	46bc <time2date(unsigned long, datetime_t*)+0xec>
    46b8:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    46bc:	4560      	cmp	r0, ip
    46be:	d32d      	bcc.n	471c <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    46c0:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    46c4:	e7ec      	b.n	46a0 <time2date(unsigned long, datetime_t*)+0xd0>
    46c6:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    46ca:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    46cc:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    46d0:	70c8      	strb	r0, [r1, #3]
  }
    46d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    46d6:	2064      	movs	r0, #100	; 0x64
    46d8:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    46da:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    46dc:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    46e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    46e4:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    46e8:	b14e      	cbz	r6, 46fe <time2date(unsigned long, datetime_t*)+0x12e>
    46ea:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    46ee:	e7c8      	b.n	4682 <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    46f0:	2d00      	cmp	r5, #0
    46f2:	bf14      	ite	ne
    46f4:	f04f 0c1c 	movne.w	ip, #28
    46f8:	f04f 0c1d 	moveq.w	ip, #29
    46fc:	e7de      	b.n	46bc <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    46fe:	2d00      	cmp	r5, #0
    4700:	d1bd      	bne.n	467e <time2date(unsigned long, datetime_t*)+0xae>
    4702:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    4706:	e7bc      	b.n	4682 <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    4708:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    470c:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    470e:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    4712:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    4714:	f881 e002 	strb.w	lr, [r1, #2]
  }
    4718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    471c:	f04f 0e02 	mov.w	lr, #2
    4720:	e7d3      	b.n	46ca <time2date(unsigned long, datetime_t*)+0xfa>
    4722:	bf00      	nop
    4724:	88888889 	.word	0x88888889
    4728:	c28f5c29 	.word	0xc28f5c29
    472c:	028f5c28 	.word	0x028f5c28
    4730:	aaaaaaab 	.word	0xaaaaaaab
    4734:	24924925 	.word	0x24924925
    4738:	51eb851f 	.word	0x51eb851f
    473c:	20000a88 	.word	0x20000a88
    4740:	00a3d70a 	.word	0x00a3d70a

00004744 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    4744:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    4746:	4a35      	ldr	r2, [pc, #212]	; (481c <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    4748:	314e      	adds	r1, #78	; 0x4e
    474a:	b2c9      	uxtb	r1, r1
  {
    474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    4750:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    4754:	b1e1      	cbz	r1, 4790 <date2time(datetime_t*)+0x4c>
    4756:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    475a:	f240 73b3 	movw	r3, #1971	; 0x7b3
    475e:	4d30      	ldr	r5, [pc, #192]	; (4820 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    4760:	4e30      	ldr	r6, [pc, #192]	; (4824 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4762:	4f31      	ldr	r7, [pc, #196]	; (4828 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    4764:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 4834 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    4768:	4563      	cmp	r3, ip
    476a:	fb05 f403 	mul.w	r4, r5, r3
    476e:	d00f      	beq.n	4790 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    4770:	f013 0f03 	tst.w	r3, #3
    4774:	f103 0301 	add.w	r3, r3, #1
    4778:	d1f6      	bne.n	4768 <date2time(datetime_t*)+0x24>
    477a:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    477e:	d302      	bcc.n	4786 <date2time(datetime_t*)+0x42>
    4780:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    4784:	d3f0      	bcc.n	4768 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    4786:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4788:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    478a:	fb05 f403 	mul.w	r4, r5, r3
    478e:	d1ef      	bne.n	4770 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    4790:	f990 e002 	ldrsb.w	lr, [r0, #2]
    4794:	f1be 0f01 	cmp.w	lr, #1
    4798:	dd29      	ble.n	47ee <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    479a:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    479e:	4e23      	ldr	r6, [pc, #140]	; (482c <date2time(datetime_t*)+0xe8>)
    47a0:	2564      	movs	r5, #100	; 0x64
    47a2:	f44f 74c8 	mov.w	r4, #400	; 0x190
    47a6:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    47aa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4838 <date2time(datetime_t*)+0xf4>
    47ae:	4920      	ldr	r1, [pc, #128]	; (4830 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    47b0:	0977      	lsrs	r7, r6, #5
    47b2:	09f6      	lsrs	r6, r6, #7
    47b4:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    47b8:	4d1b      	ldr	r5, [pc, #108]	; (4828 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    47ba:	fb04 3616 	mls	r6, r4, r6, r3
    47be:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    47c2:	2301      	movs	r3, #1
    47c4:	e007      	b.n	47d6 <date2time(datetime_t*)+0x92>
    47c6:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    47c8:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    47cc:	3101      	adds	r1, #1
    47ce:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    47d0:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    47d4:	d00b      	beq.n	47ee <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    47d6:	2b02      	cmp	r3, #2
    47d8:	d1f5      	bne.n	47c6 <date2time(datetime_t*)+0x82>
    47da:	2c00      	cmp	r4, #0
    47dc:	d1f3      	bne.n	47c6 <date2time(datetime_t*)+0x82>
    47de:	b90f      	cbnz	r7, 47e4 <date2time(datetime_t*)+0xa0>
    47e0:	2e00      	cmp	r6, #0
    47e2:	d1f0      	bne.n	47c6 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    47e4:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    47e6:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    47e8:	3101      	adds	r1, #1
    47ea:	4573      	cmp	r3, lr
    47ec:	d1f3      	bne.n	47d6 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    47ee:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    47f2:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    47f6:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    47fa:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    47fe:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    4802:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    4804:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4808:	f990 1003 	ldrsb.w	r1, [r0, #3]
    480c:	4c06      	ldr	r4, [pc, #24]	; (4828 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    480e:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4810:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    4812:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    4816:	4410      	add	r0, r2
    4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    481c:	01e13380 	.word	0x01e13380
    4820:	c28f5c29 	.word	0xc28f5c29
    4824:	028f5c28 	.word	0x028f5c28
    4828:	00015180 	.word	0x00015180
    482c:	51eb851f 	.word	0x51eb851f
    4830:	20000a88 	.word	0x20000a88
    4834:	00a3d70a 	.word	0x00a3d70a
    4838:	00263b80 	.word	0x00263b80

0000483c <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    483c:	2001      	movs	r0, #1
    483e:	4770      	bx	lr

00004840 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    4840:	b500      	push	{lr}
    4842:	b083      	sub	sp, #12
    4844:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    4846:	f008 fbb9 	bl	cfbc <rtc_get>
    484a:	9901      	ldr	r1, [sp, #4]
    484c:	f7ff fec0 	bl	45d0 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    4850:	2001      	movs	r0, #1
    4852:	b003      	add	sp, #12
    4854:	f85d fb04 	ldr.w	pc, [sp], #4

00004858 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    4858:	b570      	push	{r4, r5, r6, lr}
    485a:	b082      	sub	sp, #8
    485c:	4614      	mov	r4, r2
    485e:	460d      	mov	r5, r1
    4860:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4862:	f008 fbab 	bl	cfbc <rtc_get>
    4866:	4669      	mov	r1, sp
    4868:	f7ff feb2 	bl	45d0 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    486c:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    4870:	4608      	mov	r0, r1
    t.month=month;
    4872:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    4876:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    487a:	f7ff ff63 	bl	4744 <date2time(datetime_t*)>
    487e:	f008 fbaf 	bl	cfe0 <rtc_set>
    rtc_set_datetime(&t);
  }
    4882:	b002      	add	sp, #8
    4884:	bd70      	pop	{r4, r5, r6, pc}
    4886:	bf00      	nop

00004888 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	b082      	sub	sp, #8
    488c:	4614      	mov	r4, r2
    488e:	460d      	mov	r5, r1
    4890:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4892:	f008 fb93 	bl	cfbc <rtc_get>
    4896:	4669      	mov	r1, sp
    4898:	f7ff fe9a 	bl	45d0 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    489c:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    48a0:	4608      	mov	r0, r1
    t.min=minutes;
    48a2:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    48a6:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    48aa:	f7ff ff4b 	bl	4744 <date2time(datetime_t*)>
    48ae:	f008 fb97 	bl	cfe0 <rtc_set>
    rtc_set_datetime(&t);
  }
    48b2:	b002      	add	sp, #8
    48b4:	bd70      	pop	{r4, r5, r6, pc}
    48b6:	bf00      	nop

000048b8 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
    48b8:	6843      	ldr	r3, [r0, #4]
    48ba:	2b13      	cmp	r3, #19
    48bc:	dc07      	bgt.n	48ce <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x16>
          sd_name[fsCount] = name;
    48be:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
    48c2:	3301      	adds	r3, #1
          sd_name[fsCount] = name;
    48c4:	f8cc 2008 	str.w	r2, [ip, #8]
          sdx[fsCount++] = &fs;
    48c8:	6043      	str	r3, [r0, #4]
    48ca:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
    48ce:	4770      	bx	lr

000048d0 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    48d0:	2000      	movs	r0, #0
    48d2:	4770      	bx	lr

000048d4 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    48d4:	2001      	movs	r0, #1
    48d6:	4770      	bx	lr

000048d8 <MTPStorage_SD::CloseIndex()>:
  bool isOpen() const {return m_fFile || m_xFile;}
    48d8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  {
    48dc:	b510      	push	{r4, lr}
    48de:	4604      	mov	r4, r0
    48e0:	b14b      	cbz	r3, 48f6 <MTPStorage_SD::CloseIndex()+0x1e>
    if(index_.isOpen()) {index_.close();}
    48e2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    48e6:	f005 f863 	bl	99b0 <FsBaseFile::close()>
    index_generated = false;
    48ea:	2300      	movs	r3, #0
    48ec:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    48f0:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  }
    48f4:	bd10      	pop	{r4, pc}
    48f6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    48fa:	2b00      	cmp	r3, #0
    48fc:	d1f1      	bne.n	48e2 <MTPStorage_SD::CloseIndex()+0xa>
    48fe:	e7f4      	b.n	48ea <MTPStorage_SD::CloseIndex()+0x12>

00004900 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    4900:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4904:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4906:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    490a:	b14b      	cbz	r3, 4920 <MTPStorage_SD::totalSize(unsigned long)+0x20>
    490c:	799a      	ldrb	r2, [r3, #6]
    490e:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    4912:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4914:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    4916:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4918:	b280      	uxth	r0, r0
    491a:	fba0 0101 	umull	r0, r1, r0, r1
    491e:	4770      	bx	lr
    4920:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    4924:	b130      	cbz	r0, 4934 <MTPStorage_SD::totalSize(unsigned long)+0x34>
    4926:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    492a:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    492e:	fba1 0100 	umull	r0, r1, r1, r0
    4932:	4770      	bx	lr
    4934:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    4936:	4770      	bx	lr

00004938 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
    4938:	b538      	push	{r3, r4, r5, lr}
    493a:	210a      	movs	r1, #10
    493c:	4604      	mov	r4, r0
    493e:	480a      	ldr	r0, [pc, #40]	; (4968 <dbgPrint(unsigned short)+0x30>)
    4940:	f009 fe48 	bl	e5d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4944:	4d09      	ldr	r5, [pc, #36]	; (496c <dbgPrint(unsigned short)+0x34>)
    4946:	210b      	movs	r1, #11
    4948:	4809      	ldr	r0, [pc, #36]	; (4970 <dbgPrint(unsigned short)+0x38>)
    494a:	f009 fe43 	bl	e5d4 <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    494e:	202e      	movs	r0, #46	; 0x2e
    4950:	f009 fe2a 	bl	e5a8 <usb_serial_putchar>
    4954:	4621      	mov	r1, r4
    4956:	4628      	mov	r0, r5
    4958:	f007 fcc6 	bl	c2e8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    495c:	4628      	mov	r0, r5
  }
    495e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4962:	f007 bccd 	b.w	c300 <Print::println()>
    4966:	bf00      	nop
    4968:	2000099c 	.word	0x2000099c
    496c:	20008a54 	.word	0x20008a54
    4970:	200009a8 	.word	0x200009a8

00004974 <MTPStorage_SD::write(char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    4974:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4978:	b113      	cbz	r3, 4980 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    497a:	4618      	mov	r0, r3
    497c:	f003 be1c 	b.w	85b8 <FatFile::write(void const*, unsigned int)>
    4980:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
           m_xFile ? m_xFile->write(buf, count) : 0;
    4984:	b108      	cbz	r0, 498a <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    4986:	f002 bb07 	b.w	6f98 <ExFatFile::write(void const*, unsigned int)>
  }
    498a:	4770      	bx	lr

0000498c <MTPStorage_SD::OpenIndex() [clone .part.0]>:
  void MTPStorage_SD::OpenIndex() 
    498c:	b510      	push	{r4, lr}
    498e:	4604      	mov	r4, r0
    4990:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    4992:	f240 2302 	movw	r3, #514	; 0x202
    4996:	4a15      	ldr	r2, [pc, #84]	; (49ec <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    4998:	4668      	mov	r0, sp
    499a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    499c:	f005 f922 	bl	9be4 <FsVolume::open(char const*, int)>
class Stream : public Print
    49a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    49a4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    49a8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
    49ac:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    49b0:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    49b4:	a904      	add	r1, sp, #16
    49b6:	f004 ffa1 	bl	98fc <FsBaseFile::operator=(FsBaseFile const&)>
    49ba:	4b0d      	ldr	r3, [pc, #52]	; (49f0 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    49bc:	a804      	add	r0, sp, #16
    49be:	9300      	str	r3, [sp, #0]
    49c0:	f004 fff6 	bl	99b0 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    49c4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    49c8:	b10b      	cbz	r3, 49ce <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
  }
    49ca:	b014      	add	sp, #80	; 0x50
    49cc:	bd10      	pop	{r4, pc}
    49ce:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    49d2:	2b00      	cmp	r3, #0
    49d4:	d1f9      	bne.n	49ca <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    49d6:	2117      	movs	r1, #23
    49d8:	4806      	ldr	r0, [pc, #24]	; (49f4 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    49da:	f009 fdfb 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49de:	4806      	ldr	r0, [pc, #24]	; (49f8 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    49e0:	b014      	add	sp, #80	; 0x50
    49e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49e6:	f007 bc8b 	b.w	c300 <Print::println()>
    49ea:	bf00      	nop
    49ec:	20000aa0 	.word	0x20000aa0
    49f0:	20000b3c 	.word	0x20000b3c
    49f4:	20000ab0 	.word	0x20000ab0
    49f8:	20008a54 	.word	0x20008a54

000049fc <MTPStorage_SD::ResetIndex()>:
    49fc:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  void MTPStorage_SD::ResetIndex() {
    4a00:	b510      	push	{r4, lr}
    4a02:	4604      	mov	r4, r0
    4a04:	b30b      	cbz	r3, 4a4a <MTPStorage_SD::ResetIndex()+0x4e>
    CloseIndex();
    4a06:	6823      	ldr	r3, [r4, #0]
    4a08:	4a16      	ldr	r2, [pc, #88]	; (4a64 <MTPStorage_SD::ResetIndex()+0x68>)
    4a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a0c:	4293      	cmp	r3, r2
    4a0e:	d125      	bne.n	4a5c <MTPStorage_SD::ResetIndex()+0x60>
    if(index_.isOpen()) {index_.close();}
    4a10:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    4a14:	f004 ffcc 	bl	99b0 <FsBaseFile::close()>
    index_generated = false;
    4a18:	2300      	movs	r3, #0
    4a1a:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    4a1e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    all_scanned_ = false;
    4a22:	2100      	movs	r1, #0
    open_file_ = 0xFFFFFFFEUL;
    4a24:	f06f 0201 	mvn.w	r2, #1
    4a28:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    all_scanned_ = false;
    4a2c:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    4a30:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    4a34:	b103      	cbz	r3, 4a38 <MTPStorage_SD::ResetIndex()+0x3c>
  }
    4a36:	bd10      	pop	{r4, pc}
    4a38:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    4a3c:	2b00      	cmp	r3, #0
    4a3e:	d1fa      	bne.n	4a36 <MTPStorage_SD::ResetIndex()+0x3a>
    4a40:	4620      	mov	r0, r4
    4a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a46:	f7ff bfa1 	b.w	498c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    4a4a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d0f1      	beq.n	4a36 <MTPStorage_SD::ResetIndex()+0x3a>
    CloseIndex();
    4a52:	6823      	ldr	r3, [r4, #0]
    4a54:	4a03      	ldr	r2, [pc, #12]	; (4a64 <MTPStorage_SD::ResetIndex()+0x68>)
    4a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4a58:	4293      	cmp	r3, r2
    4a5a:	d0d9      	beq.n	4a10 <MTPStorage_SD::ResetIndex()+0x14>
    4a5c:	4620      	mov	r0, r4
    4a5e:	4798      	blx	r3
    4a60:	e7df      	b.n	4a22 <MTPStorage_SD::ResetIndex()+0x26>
    4a62:	bf00      	nop
    4a64:	000048d9 	.word	0x000048d9

00004a68 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    4a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a6c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    4a70:	6db2      	ldr	r2, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4a72:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    4a76:	2b00      	cmp	r3, #0
    4a78:	f000 80bc 	beq.w	4bf4 <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    4a7c:	69d9      	ldr	r1, [r3, #28]
    4a7e:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4a80:	2300      	movs	r3, #0
    4a82:	220a      	movs	r2, #10
    4a84:	486a      	ldr	r0, [pc, #424]	; (4c30 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4a86:	f007 fc65 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4a8a:	4869      	ldr	r0, [pc, #420]	; (4c30 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4a8c:	f007 fc38 	bl	c300 <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    4a90:	6db5      	ldr	r5, [r6, #88]	; 0x58
  uint32_t freeClusterCount() {
    4a92:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4a96:	b120      	cbz	r0, 4aa2 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    4a98:	6803      	ldr	r3, [r0, #0]
    4a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4a9c:	4798      	blx	r3
    4a9e:	2800      	cmp	r0, #0
    4aa0:	d16c      	bne.n	4b7c <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4aa2:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4aa4:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    4aa8:	2800      	cmp	r0, #0
    4aaa:	f000 808e 	beq.w	4bca <MTPStorage_SD::usedSize(unsigned long)+0x162>
    4aae:	f004 fd87 	bl	95c0 <FatPartition::freeClusterCount()>
    4ab2:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4ab4:	2f00      	cmp	r7, #0
    4ab6:	f040 8091 	bne.w	4bdc <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4aba:	2300      	movs	r3, #0
    4abc:	220a      	movs	r2, #10
    4abe:	4621      	mov	r1, r4
    4ac0:	485b      	ldr	r0, [pc, #364]	; (4c30 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4ac2:	f007 fc47 	bl	c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4ac6:	485a      	ldr	r0, [pc, #360]	; (4c30 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4ac8:	f007 fc1a 	bl	c300 <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    4acc:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4ace:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    4ad2:	2b00      	cmp	r3, #0
    4ad4:	f000 8096 	beq.w	4c04 <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    4ad8:	69dc      	ldr	r4, [r3, #28]
    4ada:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    4ade:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4ae0:	2800      	cmp	r0, #0
    4ae2:	d05f      	beq.n	4ba4 <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    4ae4:	6803      	ldr	r3, [r0, #0]
    4ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ae8:	4798      	blx	r3
    4aea:	bb38      	cbnz	r0, 4b3c <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    4aec:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4af0:	f04f 0800 	mov.w	r8, #0
    4af4:	2800      	cmp	r0, #0
    4af6:	d139      	bne.n	4b6c <MTPStorage_SD::usedSize(unsigned long)+0x104>
    4af8:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4afc:	b11f      	cbz	r7, 4b06 <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    4afe:	4638      	mov	r0, r7
    4b00:	f002 fe28 	bl	7754 <ExFatPartition::freeClusterCount()>
    4b04:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4b06:	f1b8 0f00 	cmp.w	r8, #0
    4b0a:	d035      	beq.n	4b78 <MTPStorage_SD::usedSize(unsigned long)+0x110>
    4b0c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4b10:	b128      	cbz	r0, 4b1e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    4b12:	6803      	ldr	r3, [r0, #0]
    4b14:	2100      	movs	r1, #0
    4b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b18:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4b1a:	b100      	cbz	r0, 4b1e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    4b1c:	1be4      	subs	r4, r4, r7
    4b1e:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->bytesPerCluster() :
    4b20:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    4b24:	2b00      	cmp	r3, #0
    4b26:	d147      	bne.n	4bb8 <MTPStorage_SD::usedSize(unsigned long)+0x150>
    4b28:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4b2c:	2800      	cmp	r0, #0
    4b2e:	d07a      	beq.n	4c26 <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4b30:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    4b34:	fba4 0101 	umull	r0, r1, r4, r1
    4b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4b3c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4b40:	2800      	cmp	r0, #0
    4b42:	d0ec      	beq.n	4b1e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    4b44:	6803      	ldr	r3, [r0, #0]
    4b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b48:	4798      	blx	r3
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d1ce      	bne.n	4aec <MTPStorage_SD::usedSize(unsigned long)+0x84>
    4b4e:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4b52:	2800      	cmp	r0, #0
    4b54:	d0e3      	beq.n	4b1e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    4b56:	6803      	ldr	r3, [r0, #0]
    4b58:	2101      	movs	r1, #1
    4b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b5c:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4b5e:	4680      	mov	r8, r0
    4b60:	2800      	cmp	r0, #0
    4b62:	d0dc      	beq.n	4b1e <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    4b64:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    4b68:	2800      	cmp	r0, #0
    4b6a:	d0c5      	beq.n	4af8 <MTPStorage_SD::usedSize(unsigned long)+0x90>
    4b6c:	f004 fd28 	bl	95c0 <FatPartition::freeClusterCount()>
    4b70:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4b72:	f1b8 0f00 	cmp.w	r8, #0
    4b76:	d1c9      	bne.n	4b0c <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    4b78:	6db5      	ldr	r5, [r6, #88]	; 0x58
    4b7a:	e018      	b.n	4bae <MTPStorage_SD::usedSize(unsigned long)+0x146>
    4b7c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4b80:	b170      	cbz	r0, 4ba0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    4b82:	6803      	ldr	r3, [r0, #0]
    4b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b86:	4798      	blx	r3
    4b88:	2800      	cmp	r0, #0
    4b8a:	d18a      	bne.n	4aa2 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    4b8c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4b90:	b130      	cbz	r0, 4ba0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    4b92:	6803      	ldr	r3, [r0, #0]
    4b94:	2101      	movs	r1, #1
    4b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4b98:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4b9a:	4607      	mov	r7, r0
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d181      	bne.n	4aa4 <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    4ba0:	2400      	movs	r4, #0
    4ba2:	e78a      	b.n	4aba <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4ba4:	4618      	mov	r0, r3
    4ba6:	f004 fd0b 	bl	95c0 <FatPartition::freeClusterCount()>
    4baa:	6db5      	ldr	r5, [r6, #88]	; 0x58
    4bac:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    4bae:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    4bb2:	1be4      	subs	r4, r4, r7
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d0b7      	beq.n	4b28 <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4bb8:	799b      	ldrb	r3, [r3, #6]
    4bba:	f44f 7100 	mov.w	r1, #512	; 0x200
    4bbe:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4bc0:	b289      	uxth	r1, r1
    4bc2:	fba1 0104 	umull	r0, r1, r1, r4
    4bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bca:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4bce:	b328      	cbz	r0, 4c1c <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    4bd0:	f002 fdc0 	bl	7754 <ExFatPartition::freeClusterCount()>
    4bd4:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4bd6:	2f00      	cmp	r7, #0
    4bd8:	f43f af6f 	beq.w	4aba <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4bdc:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4be0:	2800      	cmp	r0, #0
    4be2:	d0dd      	beq.n	4ba0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    4be4:	6803      	ldr	r3, [r0, #0]
    4be6:	2100      	movs	r1, #0
    4be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4bea:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4bec:	2800      	cmp	r0, #0
    4bee:	f47f af64 	bne.w	4aba <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4bf2:	e7d5      	b.n	4ba0 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    4bf4:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    4bf8:	2900      	cmp	r1, #0
    4bfa:	f43f af41 	beq.w	4a80 <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4bfe:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    4c02:	e73d      	b.n	4a80 <MTPStorage_SD::usedSize(unsigned long)+0x18>
    4c04:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    4c08:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    4c0c:	b147      	cbz	r7, 4c20 <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    4c0e:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4c12:	2800      	cmp	r0, #0
    4c14:	f47f af66 	bne.w	4ae4 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4c18:	4680      	mov	r8, r0
    4c1a:	e770      	b.n	4afe <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4c1c:	4604      	mov	r4, r0
    4c1e:	e749      	b.n	4ab4 <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4c20:	b118      	cbz	r0, 4c2a <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    4c22:	463c      	mov	r4, r7
    4c24:	e75e      	b.n	4ae4 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    4c26:	4601      	mov	r1, r0
    4c28:	e7cd      	b.n	4bc6 <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4c2a:	4607      	mov	r7, r0
    4c2c:	4604      	mov	r4, r0
    4c2e:	e7be      	b.n	4bae <MTPStorage_SD::usedSize(unsigned long)+0x146>
    4c30:	20008a54 	.word	0x20008a54

00004c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    4c34:	b570      	push	{r4, r5, r6, lr}
    4c36:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    4c3a:	b082      	sub	sp, #8
    4c3c:	4604      	mov	r4, r0
    4c3e:	4615      	mov	r5, r2
    4c40:	b1de      	cbz	r6, 4c7a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x46>
    index_.seekSet((sizeof(r) * i));
    4c42:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4c46:	0109      	lsls	r1, r1, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4c48:	4630      	mov	r0, r6
    4c4a:	f003 fb7f 	bl	834c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    4c4e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    4c52:	b138      	cbz	r0, 4c64 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    4c54:	f44f 7288 	mov.w	r2, #272	; 0x110
    4c58:	4629      	mov	r1, r5
  }
    4c5a:	b002      	add	sp, #8
    4c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c60:	f003 bcaa 	b.w	85b8 <FatFile::write(void const*, unsigned int)>
    4c64:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->write(buf, count) : 0;
    4c68:	b310      	cbz	r0, 4cb0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7c>
    4c6a:	f44f 7288 	mov.w	r2, #272	; 0x110
    4c6e:	4629      	mov	r1, r5
    4c70:	b002      	add	sp, #8
    4c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c76:	f002 b98f 	b.w	6f98 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    4c7a:	f8d0 60f4 	ldr.w	r6, [r0, #244]	; 0xf4
    4c7e:	b13e      	cbz	r6, 4c90 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x5c>
    index_.seekSet((sizeof(r) * i));
    4c80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4c84:	010a      	lsls	r2, r1, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4c86:	2300      	movs	r3, #0
    4c88:	4630      	mov	r0, r6
    4c8a:	f001 fb55 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    4c8e:	e7de      	b.n	4c4e <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1a>
    4c90:	9101      	str	r1, [sp, #4]
    4c92:	f7ff fe7b 	bl	498c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    4c96:	9901      	ldr	r1, [sp, #4]
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4c98:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
    4c9c:	eb01 1301 	add.w	r3, r1, r1, lsl #4
    4ca0:	011a      	lsls	r2, r3, #4
    4ca2:	4611      	mov	r1, r2
    4ca4:	2e00      	cmp	r6, #0
    4ca6:	d1cf      	bne.n	4c48 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14>
    4ca8:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4cac:	2e00      	cmp	r6, #0
    4cae:	d1ea      	bne.n	4c86 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x52>
  }
    4cb0:	b002      	add	sp, #8
    4cb2:	bd70      	pop	{r4, r5, r6, pc}

00004cb4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    4cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cb8:	4605      	mov	r5, r0
    index_generated = true;
    4cba:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    4cbc:	b0c5      	sub	sp, #276	; 0x114
    4cbe:	210d      	movs	r1, #13
    4cc0:	482a      	ldr	r0, [pc, #168]	; (4d6c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    4cc2:	f885 61ac 	strb.w	r6, [r5, #428]	; 0x1ac
    4cc6:	f009 fc85 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cca:	4829      	ldr	r0, [pc, #164]	; (4d70 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    4ccc:	f007 fb18 	bl	c300 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    4cd0:	6dab      	ldr	r3, [r5, #88]	; 0x58
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    4cd2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4cd6:	b3a2      	cbz	r2, 4d42 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    4cd8:	466c      	mov	r4, sp
    4cda:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4cdc:	4611      	mov	r1, r2
    4cde:	4633      	mov	r3, r6
    4ce0:	6020      	str	r0, [r4, #0]
    4ce2:	4620      	mov	r0, r4
    4ce4:	4a21      	ldr	r2, [pc, #132]	; (4d6c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    4ce6:	f003 f895 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    4cea:	2800      	cmp	r0, #0
    4cec:	d13a      	bne.n	4d64 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    4cee:	686b      	ldr	r3, [r5, #4]
    index_entries_ = 0;
    4cf0:	2600      	movs	r6, #0
    for(int ii=0; ii<num_storage; ii++)
    4cf2:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    4cf4:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
    index_entries_ = 0;
    4cf8:	f8c5 61a8 	str.w	r6, [r5, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    4cfc:	dd1e      	ble.n	4d3c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    4cfe:	466c      	mov	r4, sp
      r.parent = 0xFFFFFFFFUL; // 
    4d00:	f04f 39ff 	mov.w	r9, #4294967295
      r.child = 0;
    4d04:	4637      	mov	r7, r6
      r.isdir = true;
    4d06:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    4d0a:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
      strcpy(r.name, "/");
    4d0e:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    4d10:	4622      	mov	r2, r4
    4d12:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    4d14:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    4d18:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    4d1a:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    4d1e:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    4d20:	f8c5 c1a8 	str.w	ip, [r5, #424]	; 0x1a8
      r.isdir = true;
    4d24:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    4d28:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    4d2c:	f8ad 3010 	strh.w	r3, [sp, #16]
    WriteIndexRecord(new_record, r);
    4d30:	f7ff ff80 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    4d34:	f8d5 3198 	ldr.w	r3, [r5, #408]	; 0x198
    4d38:	429e      	cmp	r6, r3
    4d3a:	dbe6      	blt.n	4d0a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
  }
    4d3c:	b045      	add	sp, #276	; 0x114
    4d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4d42:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    4d46:	2900      	cmp	r1, #0
    4d48:	d0d1      	beq.n	4cee <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    4d4a:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4d4c:	4633      	mov	r3, r6
    4d4e:	6322      	str	r2, [r4, #48]	; 0x30
    4d50:	4620      	mov	r0, r4
    4d52:	4a06      	ldr	r2, [pc, #24]	; (4d6c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    4d54:	f001 fdae 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4d58:	2800      	cmp	r0, #0
    4d5a:	d0c8      	beq.n	4cee <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    4d5c:	4620      	mov	r0, r4
    4d5e:	f001 fe0d 	bl	697c <ExFatFile::remove()>
    4d62:	e7c4      	b.n	4cee <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    4d64:	4620      	mov	r0, r4
    4d66:	f004 f8b5 	bl	8ed4 <FatFile::remove()>
    4d6a:	e7c0      	b.n	4cee <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    4d6c:	20000aa0 	.word	0x20000aa0
    4d70:	20008a54 	.word	0x20008a54

00004d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    4d74:	b570      	push	{r4, r5, r6, lr}
    4d76:	460d      	mov	r5, r1
    4d78:	4614      	mov	r4, r2
    memset(&ret, 0, sizeof(ret));
    4d7a:	2100      	movs	r1, #0
    4d7c:	f44f 7288 	mov.w	r2, #272	; 0x110
  {
    4d80:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    4d82:	f00b ff35 	bl	10bf0 <memset>
    if (i > index_entries_) 
    4d86:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    4d8a:	42a3      	cmp	r3, r4
    4d8c:	d201      	bcs.n	4d92 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
  }
    4d8e:	4630      	mov	r0, r6
    4d90:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    4d92:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    4d96:	b1c8      	cbz	r0, 4dcc <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    4d98:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4d9c:	0121      	lsls	r1, r4, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4d9e:	f003 fad5 	bl	834c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    4da2:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    4da6:	b130      	cbz	r0, 4db6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    4da8:	f44f 7288 	mov.w	r2, #272	; 0x110
    4dac:	4631      	mov	r1, r6
    4dae:	f003 f885 	bl	7ebc <FatFile::read(void*, unsigned int)>
  }
    4db2:	4630      	mov	r0, r6
    4db4:	bd70      	pop	{r4, r5, r6, pc}
    4db6:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->read(buf, count) : -1;
    4dba:	2800      	cmp	r0, #0
    4dbc:	d0e7      	beq.n	4d8e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    4dbe:	f44f 7288 	mov.w	r2, #272	; 0x110
    4dc2:	4631      	mov	r1, r6
    4dc4:	f001 f9d2 	bl	616c <ExFatFile::read(void*, unsigned int)>
    4dc8:	4630      	mov	r0, r6
    4dca:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    4dcc:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    4dd0:	b130      	cbz	r0, 4de0 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6c>
    index_.seekSet(sizeof(ret) * i);
    4dd2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4dd6:	0122      	lsls	r2, r4, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4dd8:	2300      	movs	r3, #0
    4dda:	f001 faad 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    4dde:	e7e0      	b.n	4da2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    4de0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4de4:	4628      	mov	r0, r5
    4de6:	f7ff fdd1 	bl	498c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4dea:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    4dee:	0122      	lsls	r2, r4, #4
    4df0:	4611      	mov	r1, r2
    4df2:	2800      	cmp	r0, #0
    4df4:	d1d3      	bne.n	4d9e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    4df6:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4dfa:	2800      	cmp	r0, #0
    4dfc:	d0c7      	beq.n	4d8e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    4dfe:	e7eb      	b.n	4dd8 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x64>

00004e00 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    4e00:	b530      	push	{r4, r5, lr}
    { if (next_ == 0) return 0;
    4e02:	f8d0 51b0 	ldr.w	r5, [r0, #432]	; 0x1b0
  {
    4e06:	b0c5      	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    4e08:	b325      	cbz	r5, 4e54 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    4e0a:	4604      	mov	r4, r0
    4e0c:	e008      	b.n	4e20 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
      { next_ = r.sibling;
    4e0e:	9b02      	ldr	r3, [sp, #8]
    4e10:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    4e14:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4e18:	b9cb      	cbnz	r3, 4e4e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    4e1a:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
    4e1e:	b1cd      	cbz	r5, 4e54 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    4e20:	462a      	mov	r2, r5
    4e22:	4621      	mov	r1, r4
    4e24:	4668      	mov	r0, sp
    4e26:	f7ff ffa5 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    4e2a:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
    4e2e:	2b00      	cmp	r3, #0
    4e30:	d1ed      	bne.n	4e0e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    4e32:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    4e36:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      { next_++;
    4e3a:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    4e3c:	428a      	cmp	r2, r1
    4e3e:	bf38      	it	cc
    4e40:	4613      	movcc	r3, r2
    4e42:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    4e46:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	d0e5      	beq.n	4e1a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
  }
    4e4e:	4628      	mov	r0, r5
    4e50:	b045      	add	sp, #276	; 0x114
    4e52:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    4e54:	2500      	movs	r5, #0
  }
    4e56:	4628      	mov	r0, r5
    4e58:	b045      	add	sp, #276	; 0x114
    4e5a:	bd30      	pop	{r4, r5, pc}

00004e5c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    4e5c:	b530      	push	{r4, r5, lr}
    4e5e:	b0c5      	sub	sp, #276	; 0x114
    4e60:	4615      	mov	r5, r2
    4e62:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    4e64:	4601      	mov	r1, r0
    4e66:	4668      	mov	r0, sp
  {
    4e68:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    4e6a:	f7ff ff83 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    4e6e:	4628      	mov	r0, r5
    4e70:	a904      	add	r1, sp, #16
    4e72:	f00c f9f3 	bl	1125c <strcpy>
    *parent = r.parent;
    4e76:	9b00      	ldr	r3, [sp, #0]
    4e78:	9a48      	ldr	r2, [sp, #288]	; 0x120
    4e7a:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    4e7c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4e80:	b93b      	cbnz	r3, 4e92 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    4e82:	9a01      	ldr	r2, [sp, #4]
    4e84:	6022      	str	r2, [r4, #0]
    *store = r.store;
    4e86:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    4e8a:	9a49      	ldr	r2, [sp, #292]	; 0x124
    4e8c:	8013      	strh	r3, [r2, #0]
  }
    4e8e:	b045      	add	sp, #276	; 0x114
    4e90:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    4e92:	f04f 32ff 	mov.w	r2, #4294967295
    4e96:	e7f5      	b.n	4e84 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

00004e98 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    4e98:	b500      	push	{lr}
    4e9a:	b0c5      	sub	sp, #276	; 0x114
    4e9c:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    4e9e:	4601      	mov	r1, r0
    4ea0:	4668      	mov	r0, sp
    4ea2:	f7ff ff67 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    4ea6:	9801      	ldr	r0, [sp, #4]
    4ea8:	b045      	add	sp, #276	; 0x114
    4eaa:	f85d fb04 	ldr.w	pc, [sp], #4
    4eae:	bf00      	nop

00004eb0 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    4eb0:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
  {
    4eb4:	b530      	push	{r4, r5, lr}
    4eb6:	4604      	mov	r4, r0
    4eb8:	b0c5      	sub	sp, #276	; 0x114
    4eba:	b1bb      	cbz	r3, 4eec <MTPStorage_SD::close()+0x3c>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint32_t fileSize() const {return m_fileSize;}
    4ebc:	69dd      	ldr	r5, [r3, #28]
    file_.close();
    4ebe:	f504 7084 	add.w	r0, r4, #264	; 0x108
    4ec2:	f004 fd75 	bl	99b0 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    4ec6:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    4eca:	4621      	mov	r1, r4
    4ecc:	4668      	mov	r0, sp
    4ece:	f7ff ff51 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    4ed2:	466a      	mov	r2, sp
    4ed4:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    4ed8:	4620      	mov	r0, r4
    r.child = size;
    4eda:	9501      	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    4edc:	f7ff feaa 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    4ee0:	f06f 0301 	mvn.w	r3, #1
    4ee4:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  }
    4ee8:	b045      	add	sp, #276	; 0x114
    4eea:	bd30      	pop	{r4, r5, pc}
    4eec:	f8d0 5144 	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    4ef0:	2d00      	cmp	r5, #0
    4ef2:	d0e4      	beq.n	4ebe <MTPStorage_SD::close()+0xe>
    uint32_t size = (uint32_t) file_.size();
    4ef4:	692d      	ldr	r5, [r5, #16]
    4ef6:	e7e2      	b.n	4ebe <MTPStorage_SD::close()+0xe>

00004ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    4ef8:	b570      	push	{r4, r5, r6, lr}
    4efa:	b0c4      	sub	sp, #272	; 0x110
    4efc:	4614      	mov	r4, r2
    4efe:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    4f00:	460a      	mov	r2, r1
    4f02:	4601      	mov	r1, r0
    4f04:	4668      	mov	r0, sp
  {
    4f06:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    4f08:	f7ff ff34 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    4f0c:	9900      	ldr	r1, [sp, #0]
    4f0e:	1c4b      	adds	r3, r1, #1
    4f10:	d01b      	beq.n	4f4a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    4f12:	4633      	mov	r3, r6
    4f14:	4622      	mov	r2, r4
    4f16:	4628      	mov	r0, r5
    4f18:	f7ff ffee 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    4f1c:	4620      	mov	r0, r4
    4f1e:	f00c fa4f 	bl	113c0 <strlen>
    4f22:	4420      	add	r0, r4
    4f24:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    4f28:	2b2f      	cmp	r3, #47	; 0x2f
    4f2a:	d108      	bne.n	4f3e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    4f2c:	4632      	mov	r2, r6
    4f2e:	a904      	add	r1, sp, #16
    4f30:	4620      	mov	r0, r4
    4f32:	f00b feaf 	bl	10c94 <strlcat>
      return tmp.store;
    4f36:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    4f3a:	b044      	add	sp, #272	; 0x110
    4f3c:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    4f3e:	4632      	mov	r2, r6
    4f40:	4905      	ldr	r1, [pc, #20]	; (4f58 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    4f42:	4620      	mov	r0, r4
    4f44:	f00b fea6 	bl	10c94 <strlcat>
    4f48:	e7f0      	b.n	4f2c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    4f4a:	4b03      	ldr	r3, [pc, #12]	; (4f58 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    4f4c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    4f50:	881b      	ldrh	r3, [r3, #0]
    4f52:	8023      	strh	r3, [r4, #0]
  }
    4f54:	b044      	add	sp, #272	; 0x110
    4f56:	bd70      	pop	{r4, r5, r6, pc}
    4f58:	20000a9c 	.word	0x20000a9c

00004f5c <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    4f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f5e:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    4f62:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    4f66:	4617      	mov	r7, r2
    4f68:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    4f6a:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    4f6c:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    4f6e:	f7ff ffc3 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    4f72:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    4f74:	a810      	add	r0, sp, #64	; 0x40
    4f76:	f00c fa23 	bl	113c0 <strlen>
    4f7a:	4601      	mov	r1, r0
    4f7c:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    4f7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    4f82:	f009 fb27 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f86:	4832      	ldr	r0, [pc, #200]	; (5050 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    4f88:	f007 f9ba 	bl	c300 <Print::println()>
    Record p1 = ReadIndexRecord(handle);
    4f8c:	462a      	mov	r2, r5
    4f8e:	4621      	mov	r1, r4
    4f90:	a8d0      	add	r0, sp, #832	; 0x340
    4f92:	f7ff feef 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    4f96:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f9a:	a9d4      	add	r1, sp, #848	; 0x350
    4f9c:	a890      	add	r0, sp, #576	; 0x240
    4f9e:	f00b fead 	bl	10cfc <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    4fa2:	4639      	mov	r1, r7
    4fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
    4fa8:	a8d4      	add	r0, sp, #848	; 0x350
    4faa:	f00b fea7 	bl	10cfc <strlcpy>
    WriteIndexRecord(handle, p1);
    4fae:	aad0      	add	r2, sp, #832	; 0x340
    4fb0:	4629      	mov	r1, r5
    4fb2:	4620      	mov	r0, r4
    4fb4:	f7ff fe3e 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    4fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
    4fbc:	aa50      	add	r2, sp, #320	; 0x140
    4fbe:	4629      	mov	r1, r5
    4fc0:	4620      	mov	r0, r4
    4fc2:	f7ff ff99 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    4fc6:	a850      	add	r0, sp, #320	; 0x140
    4fc8:	f00c f9fa 	bl	113c0 <strlen>
    4fcc:	4601      	mov	r1, r0
    4fce:	a850      	add	r0, sp, #320	; 0x140
    4fd0:	f009 fb00 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4fd4:	481e      	ldr	r0, [pc, #120]	; (5050 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    4fd6:	f007 f993 	bl	c300 <Print::println()>
    4fda:	6db2      	ldr	r2, [r6, #88]	; 0x58
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    4fdc:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    4fe0:	b1cb      	cbz	r3, 5016 <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    4fe2:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    4fe6:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    4fe8:	aa10      	add	r2, sp, #64	; 0x40
    4fea:	a802      	add	r0, sp, #8
    4fec:	e9cd 1301 	strd	r1, r3, [sp, #4]
    4ff0:	f002 fe8e 	bl	7d10 <FatFile::open(FatFile*, char const*, int)>
    4ff4:	9901      	ldr	r1, [sp, #4]
    4ff6:	bb20      	cbnz	r0, 5042 <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    4ff8:	a990      	add	r1, sp, #576	; 0x240
    4ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ffe:	a8d4      	add	r0, sp, #848	; 0x350
    5000:	f00b fe7c 	bl	10cfc <strlcpy>
    WriteIndexRecord(handle, p1);
    5004:	4620      	mov	r0, r4
    5006:	aad0      	add	r2, sp, #832	; 0x340
    5008:	4629      	mov	r1, r5
    500a:	f7ff fe13 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    500e:	2000      	movs	r0, #0
  }
    5010:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
    5014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5016:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    501a:	2900      	cmp	r1, #0
    501c:	d0ec      	beq.n	4ff8 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    501e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5022:	aa10      	add	r2, sp, #64	; 0x40
    5024:	a802      	add	r0, sp, #8
    5026:	930e      	str	r3, [sp, #56]	; 0x38
    5028:	9101      	str	r1, [sp, #4]
    502a:	f001 fbc7 	bl	67bc <ExFatFile::open(ExFatFile*, char const*, int)>
    502e:	9901      	ldr	r1, [sp, #4]
    5030:	2800      	cmp	r0, #0
    5032:	d0e1      	beq.n	4ff8 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5034:	aa50      	add	r2, sp, #320	; 0x140
    5036:	a802      	add	r0, sp, #8
    5038:	f001 fe4e 	bl	6cd8 <ExFatFile::rename(ExFatFile*, char const*)>
    503c:	2800      	cmp	r0, #0
    503e:	d1e7      	bne.n	5010 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    5040:	e7da      	b.n	4ff8 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5042:	aa50      	add	r2, sp, #320	; 0x140
    5044:	a802      	add	r0, sp, #8
    5046:	f003 f843 	bl	80d0 <FatFile::rename(FatFile*, char const*)>
    504a:	2800      	cmp	r0, #0
    504c:	d1e0      	bne.n	5010 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    504e:	e7d3      	b.n	4ff8 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5050:	20008a54 	.word	0x20008a54

00005054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    5054:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    5058:	428b      	cmp	r3, r1
  {
    505a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    505e:	4604      	mov	r4, r0
    5060:	b0d4      	sub	sp, #336	; 0x150
    5062:	460d      	mov	r5, r1
    5064:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    5066:	d103      	bne.n	5070 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    5068:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    506c:	4293      	cmp	r3, r2
    506e:	d02c      	beq.n	50ca <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    5070:	f44f 7380 	mov.w	r3, #256	; 0x100
    5074:	4629      	mov	r1, r5
    5076:	4620      	mov	r0, r4
    5078:	aa14      	add	r2, sp, #80	; 0x50
    507a:	f7ff ff3d 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    507e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5082:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    5084:	f504 7884 	add.w	r8, r4, #264	; 0x108
    5088:	b313      	cbz	r3, 50d0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    508a:	4640      	mov	r0, r8
    508c:	f004 fc90 	bl	99b0 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5090:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5094:	aa14      	add	r2, sp, #80	; 0x50
    5096:	463b      	mov	r3, r7
    5098:	4668      	mov	r0, sp
    509a:	6db1      	ldr	r1, [r6, #88]	; 0x58
    509c:	f004 fda2 	bl	9be4 <FsVolume::open(char const*, int)>
class Print
    50a0:	9b01      	ldr	r3, [sp, #4]
    50a2:	a904      	add	r1, sp, #16
    50a4:	4640      	mov	r0, r8
    50a6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    50aa:	9b02      	ldr	r3, [sp, #8]
    50ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    50b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    50b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    50b8:	f004 fc20 	bl	98fc <FsBaseFile::operator=(FsBaseFile const&)>
    50bc:	4b07      	ldr	r3, [pc, #28]	; (50dc <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    50be:	a804      	add	r0, sp, #16
    50c0:	9300      	str	r3, [sp, #0]
    50c2:	f004 fc75 	bl	99b0 <FsBaseFile::close()>
    mode_ = mode;
    50c6:	e9c4 7568 	strd	r7, r5, [r4, #416]	; 0x1a0
  }
    50ca:	b054      	add	sp, #336	; 0x150
    50cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    50d0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    50d4:	2b00      	cmp	r3, #0
    50d6:	d1d8      	bne.n	508a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    50d8:	e7da      	b.n	5090 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    50da:	bf00      	nop
    50dc:	20000b3c 	.word	0x20000b3c

000050e0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    50e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50e2:	4604      	mov	r4, r0
    50e4:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    50e6:	2200      	movs	r2, #0
  {
    50e8:	461d      	mov	r5, r3
    50ea:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    50ec:	f7ff ffb2 	bl	5054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    50f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    50f4:	b1ab      	cbz	r3, 5122 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x42>
    50f6:	4631      	mov	r1, r6
    50f8:	4618      	mov	r0, r3
    50fa:	f003 f927 	bl	834c <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    50fe:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    5102:	b128      	cbz	r0, 5110 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    5104:	463a      	mov	r2, r7
    5106:	4629      	mov	r1, r5
  }
    5108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    510c:	f002 bed6 	b.w	7ebc <FatFile::read(void*, unsigned int)>
    5110:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->read(buf, count) : -1;
    5114:	b160      	cbz	r0, 5130 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    5116:	463a      	mov	r2, r7
    5118:	4629      	mov	r1, r5
    511a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    511e:	f001 b825 	b.w	616c <ExFatFile::read(void*, unsigned int)>
    5122:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->seekSet(pos) : false;
    5126:	b118      	cbz	r0, 5130 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    5128:	4632      	mov	r2, r6
    512a:	f001 f905 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    512e:	e7e6      	b.n	50fe <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>
    5130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5132:	bf00      	nop

00005134 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    5134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    5138:	f1b2 3fff 	cmp.w	r2, #4294967295
    513c:	bf14      	ite	ne
    513e:	4690      	movne	r8, r2
    5140:	4688      	moveq	r8, r1
  {
    5142:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
    5146:	4604      	mov	r4, r0
    5148:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    514a:	4642      	mov	r2, r8
    514c:	4601      	mov	r1, r0
    514e:	a84e      	add	r0, sp, #312	; 0x138
  {
    5150:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    5152:	f7ff fe0f 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    5156:	f44f 7280 	mov.w	r2, #256	; 0x100
    515a:	99de      	ldr	r1, [sp, #888]	; 0x378
    515c:	a896      	add	r0, sp, #600	; 0x258
    515e:	f00b fdcd 	bl	10cfc <strlcpy>
  { uint32_t new_record = index_entries_++;
    5162:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    r.child = 0;
    5166:	f04f 0a00 	mov.w	sl, #0
    r.scanned = 1;
    516a:	f04f 0901 	mov.w	r9, #1
  { uint32_t new_record = index_entries_++;
    516e:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    5170:	aa92      	add	r2, sp, #584	; 0x248
    5172:	4629      	mov	r1, r5
    5174:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    5176:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    r.store = p.store;
    517a:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    517e:	f8cd 8248 	str.w	r8, [sp, #584]	; 0x248
    r.store = p.store;
    5182:	f8ad 3256 	strh.w	r3, [sp, #598]	; 0x256
    r.sibling = p.child;
    5186:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    5188:	f88d 7254 	strb.w	r7, [sp, #596]	; 0x254
    r.sibling = p.child;
    518c:	9394      	str	r3, [sp, #592]	; 0x250
    r.child = 0;
    518e:	f8cd a24c 	str.w	sl, [sp, #588]	; 0x24c
    r.scanned = 1;
    5192:	f88d 9255 	strb.w	r9, [sp, #597]	; 0x255
    WriteIndexRecord(new_record, r);
    5196:	f7ff fd4d 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(parent, p);
    519a:	4641      	mov	r1, r8
    519c:	aa4e      	add	r2, sp, #312	; 0x138
    519e:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    51a0:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    51a2:	f7ff fd47 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    51a6:	b1d7      	cbz	r7, 51de <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xaa>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    51a8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    51ac:	f44f 7380 	mov.w	r3, #256	; 0x100
    51b0:	4629      	mov	r1, r5
    51b2:	4620      	mov	r0, r4
    51b4:	aa0e      	add	r2, sp, #56	; 0x38
    51b6:	f7ff fe9f 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    51ba:	6db3      	ldr	r3, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    51bc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    51c0:	b1c0      	cbz	r0, 51f4 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc0>
    return sub.mkdir(vwd(), path, pFlag);
    51c2:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    51c6:	464b      	mov	r3, r9
    51c8:	aa0e      	add	r2, sp, #56	; 0x38
    51ca:	4668      	mov	r0, sp
    51cc:	f8cd a000 	str.w	sl, [sp]
    51d0:	f002 fd28 	bl	7c24 <FatFile::mkdir(FatFile*, char const*, bool)>
  }
    51d4:	4628      	mov	r0, r5
    51d6:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    51da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    51de:	f240 2202 	movw	r2, #514	; 0x202
    51e2:	4629      	mov	r1, r5
    51e4:	4620      	mov	r0, r4
    51e6:	f7ff ff35 	bl	5054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    51ea:	4628      	mov	r0, r5
    51ec:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    51f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51f4:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    51f8:	2900      	cmp	r1, #0
    51fa:	d0f6      	beq.n	51ea <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xb6>
    51fc:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    51fe:	464b      	mov	r3, r9
    5200:	aa0e      	add	r2, sp, #56	; 0x38
    5202:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5206:	4668      	mov	r0, sp
    5208:	f001 fde8 	bl	6ddc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    520c:	4628      	mov	r0, r5
    520e:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    5212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5216:	bf00      	nop

00005218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    5218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    521c:	f1b2 3fff 	cmp.w	r2, #4294967295
    5220:	bf14      	ite	ne
    5222:	4616      	movne	r6, r2
    5224:	460e      	moveq	r6, r1
    5226:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    522a:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    522c:	4604      	mov	r4, r0
    Record record = ReadIndexRecord(i);
    522e:	4632      	mov	r2, r6
    5230:	4668      	mov	r0, sp
    5232:	f7ff fd9f 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    5236:	f89d 300c 	ldrb.w	r3, [sp, #12]
    523a:	b113      	cbz	r3, 5242 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    523c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    5240:	b11a      	cbz	r2, 524a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
  }
    5242:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    5246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    524a:	4631      	mov	r1, r6
    524c:	4620      	mov	r0, r4
    524e:	f7ff ff01 	bl	5054 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5252:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5256:	2b00      	cmp	r3, #0
    5258:	f000 8087 	beq.w	536a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x152>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    525c:	2500      	movs	r5, #0
    525e:	f504 77ac 	add.w	r7, r4, #344	; 0x158
    5262:	f504 7b84 	add.w	fp, r4, #264	; 0x108
    5266:	f8df a114 	ldr.w	sl, [pc, #276]	; 537c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x164>
	constexpr Print() : write_error(0) {}
    526a:	46a9      	mov	r9, r5
	constexpr Stream() : _timeout(1000), read_error(0) {}
    526c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    5270:	e027      	b.n	52c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xaa>
        r.store = record.store;
    5272:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    5276:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    5278:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    527a:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    527e:	7802      	ldrb	r2, [r0, #0]
    5280:	f002 0270 	and.w	r2, r2, #112	; 0x70
    5284:	2a00      	cmp	r2, #0
    5286:	bf14      	ite	ne
    5288:	2201      	movne	r2, #1
    528a:	2200      	moveq	r2, #0
    528c:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5290:	d05c      	beq.n	534c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x134>
    5292:	2200      	movs	r2, #0
    5294:	9245      	str	r2, [sp, #276]	; 0x114
    return m_fFile ? m_fFile->getName(name, len) :
    5296:	a948      	add	r1, sp, #288	; 0x120
    5298:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    529c:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    52a0:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    return m_fFile ? m_fFile->getName(name, len) :
    52a4:	f003 ffa4 	bl	91f0 <FatFile::getName(char*, unsigned int)>
  { uint32_t new_record = index_entries_++;
    52a8:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    52ac:	4620      	mov	r0, r4
    52ae:	aa44      	add	r2, sp, #272	; 0x110
  { uint32_t new_record = index_entries_++;
    52b0:	1c69      	adds	r1, r5, #1
    52b2:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    52b6:	4629      	mov	r1, r5
    52b8:	f7ff fcbc 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    52bc:	4638      	mov	r0, r7
    52be:	f004 fb77 	bl	99b0 <FsBaseFile::close()>
    tmpFile.openNext(this, oflag);
    52c2:	2200      	movs	r2, #0
    52c4:	4659      	mov	r1, fp
    52c6:	a848      	add	r0, sp, #288	; 0x120
    52c8:	f88d 911c 	strb.w	r9, [sp, #284]	; 0x11c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    52cc:	f8cd a110 	str.w	sl, [sp, #272]	; 0x110
    52d0:	e9cd 9845 	strd	r9, r8, [sp, #276]	; 0x114
  FsBaseFile() {}
    52d4:	e9cd 9956 	strd	r9, r9, [sp, #344]	; 0x158
    tmpFile.openNext(this, oflag);
    52d8:	f004 fbd6 	bl	9a88 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    52dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
    52de:	a948      	add	r1, sp, #288	; 0x120
    52e0:	4638      	mov	r0, r7
    52e2:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
class Stream : public Print
    52e6:	9a46      	ldr	r2, [sp, #280]	; 0x118
    52e8:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    52ec:	f89d 211c 	ldrb.w	r2, [sp, #284]	; 0x11c
    52f0:	f884 2154 	strb.w	r2, [r4, #340]	; 0x154
    52f4:	f004 fb02 	bl	98fc <FsBaseFile::operator=(FsBaseFile const&)>
    52f8:	4b1f      	ldr	r3, [pc, #124]	; (5378 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x160>)
  ~FsBaseFile() {close();}
    52fa:	a848      	add	r0, sp, #288	; 0x120
    52fc:	9344      	str	r3, [sp, #272]	; 0x110
    52fe:	f004 fb57 	bl	99b0 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5302:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    5306:	2800      	cmp	r0, #0
    5308:	d1b3      	bne.n	5272 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a>
    530a:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    530e:	b1fa      	cbz	r2, 5350 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
        r.store = record.store;
    5310:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    5314:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    5316:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    5318:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
           m_xFile ? m_xFile->isDir() : false;
    531c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    5320:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    5324:	d00e      	beq.n	5344 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
        r.isdir = child_.isDirectory();
    5326:	2101      	movs	r1, #1
    5328:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    532c:	9045      	str	r0, [sp, #276]	; 0x114
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    532e:	a948      	add	r1, sp, #288	; 0x120
    5330:	4610      	mov	r0, r2
    5332:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5336:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    533a:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    533e:	f001 ff91 	bl	7264 <ExFatFile::getName8(char*, unsigned int)>
    5342:	e7b1      	b.n	52a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
        r.isdir = child_.isDirectory();
    5344:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5348:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    534a:	e7ef      	b.n	532c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
  uint32_t fileSize() const {return m_fileSize;}
    534c:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    534e:	e7a1      	b.n	5294 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c>
      record.scanned = true;
    5350:	2301      	movs	r3, #1
      WriteIndexRecord(i, record);
    5352:	4631      	mov	r1, r6
    5354:	4620      	mov	r0, r4
    5356:	466a      	mov	r2, sp
      record.child = sibling;
    5358:	9501      	str	r5, [sp, #4]
      record.scanned = true;
    535a:	f88d 300d 	strb.w	r3, [sp, #13]
      WriteIndexRecord(i, record);
    535e:	f7ff fc69 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    5362:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    5366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    536a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    536e:	2b00      	cmp	r3, #0
    5370:	f47f af74 	bne.w	525c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    5374:	e765      	b.n	5242 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    5376:	bf00      	nop
    5378:	20000b3c 	.word	0x20000b3c
    537c:	20000c64 	.word	0x20000c64

00005380 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    5380:	b510      	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    5382:	f1b2 3fff 	cmp.w	r2, #4294967295
    5386:	bf08      	it	eq
    5388:	460a      	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    538a:	b0c6      	sub	sp, #280	; 0x118
    538c:	4604      	mov	r4, r0
      ScanDir(store, parent);
    538e:	9201      	str	r2, [sp, #4]
    5390:	f7ff ff42 	bl	5218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    5394:	2301      	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    5396:	9a01      	ldr	r2, [sp, #4]
    5398:	4621      	mov	r1, r4
    539a:	a802      	add	r0, sp, #8
      follow_sibling_ = true;
    539c:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    53a0:	f7ff fce8 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    53a4:	9b03      	ldr	r3, [sp, #12]
    53a6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  }
    53aa:	b046      	add	sp, #280	; 0x118
    53ac:	bd10      	pop	{r4, pc}
    53ae:	bf00      	nop

000053b0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    53b0:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
  { 
    53b4:	b570      	push	{r4, r5, r6, lr}
    53b6:	4605      	mov	r5, r0
    53b8:	460e      	mov	r6, r1
    53ba:	4614      	mov	r4, r2
  { if (index_generated) return; 
    53bc:	b323      	cbz	r3, 5408 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x58>
    if (parent) 
    53be:	b134      	cbz	r4, 53ce <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1e>
    53c0:	4622      	mov	r2, r4
    53c2:	4631      	mov	r1, r6
    53c4:	4628      	mov	r0, r5
  }
    53c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53ca:	f7ff bfd9 	b.w	5380 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
  { if (all_scanned_) return;
    53ce:	f895 31ad 	ldrb.w	r3, [r5, #429]	; 0x1ad
    53d2:	b993      	cbnz	r3, 53fa <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    all_scanned_ = true;
    53d4:	2201      	movs	r2, #1
  { if (index_generated) return; 
    53d6:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
    all_scanned_ = true;
    53da:	f885 21ad 	strb.w	r2, [r5, #429]	; 0x1ad
  { if (index_generated) return; 
    53de:	b1b3      	cbz	r3, 540e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5e>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    53e0:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    53e4:	b14b      	cbz	r3, 53fa <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    53e6:	4622      	mov	r2, r4
    53e8:	4631      	mov	r1, r6
    53ea:	4628      	mov	r0, r5
    53ec:	3401      	adds	r4, #1
    53ee:	f7ff ff13 	bl	5218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    53f2:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    53f6:	429c      	cmp	r4, r3
    53f8:	d3f5      	bcc.n	53e6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x36>
      follow_sibling_ = false;
    53fa:	2200      	movs	r2, #0
      next_ = 1;
    53fc:	2301      	movs	r3, #1
      follow_sibling_ = false;
    53fe:	f885 21b4 	strb.w	r2, [r5, #436]	; 0x1b4
      next_ = 1;
    5402:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
  }
    5406:	bd70      	pop	{r4, r5, r6, pc}
    5408:	f7ff fc54 	bl	4cb4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    540c:	e7d7      	b.n	53be <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    540e:	4628      	mov	r0, r5
    5410:	f7ff fc50 	bl	4cb4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    5414:	e7e4      	b.n	53e0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
    5416:	bf00      	nop

00005418 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    5418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    541c:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    5420:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5424:	2300      	movs	r3, #0
    5426:	4681      	mov	r9, r0
    5428:	4688      	mov	r8, r1
    542a:	a804      	add	r0, sp, #16
    542c:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
    5430:	4615      	mov	r5, r2
    5432:	f004 fbd7 	bl	9be4 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    5436:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5438:	2b00      	cmp	r3, #0
    543a:	f000 80c7 	beq.w	55cc <MTPStorage_SD::removeFile(unsigned long, char*)+0x1b4>
  if(f1.isDirectory())
    543e:	781b      	ldrb	r3, [r3, #0]
    5440:	f013 0f70 	tst.w	r3, #112	; 0x70
    5444:	f000 80ca 	beq.w	55dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    544c:	2400      	movs	r4, #0
    544e:	af08      	add	r7, sp, #32
    5450:	4e7e      	ldr	r6, [pc, #504]	; (564c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    5452:	931a      	str	r3, [sp, #104]	; 0x68
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    5454:	f8df b200 	ldr.w	fp, [pc, #512]	; 5658 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5458:	4b7d      	ldr	r3, [pc, #500]	; (5650 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    545a:	9419      	str	r4, [sp, #100]	; 0x64
    545c:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    5460:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    5462:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5466:	4b7a      	ldr	r3, [pc, #488]	; (5650 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    tmpFile.openNext(this, oflag);
    5468:	2200      	movs	r2, #0
    546a:	4639      	mov	r1, r7
    546c:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    546e:	932c      	str	r3, [sp, #176]	; 0xb0
    5470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5474:	942d      	str	r4, [sp, #180]	; 0xb4
    5476:	932e      	str	r3, [sp, #184]	; 0xb8
    5478:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    547c:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    5480:	f004 fb02 	bl	9a88 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5484:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    5486:	a930      	add	r1, sp, #192	; 0xc0
    5488:	a81c      	add	r0, sp, #112	; 0x70
    548a:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    548c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    548e:	931a      	str	r3, [sp, #104]	; 0x68
    5490:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    5494:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    5498:	f004 fa30 	bl	98fc <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    549c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    549e:	2b00      	cmp	r3, #0
    54a0:	d04f      	beq.n	5542 <MTPStorage_SD::removeFile(unsigned long, char*)+0x12a>
  ~FsBaseFile() {close();}
    54a2:	a830      	add	r0, sp, #192	; 0xc0
    54a4:	962c      	str	r6, [sp, #176]	; 0xb0
    54a6:	f004 fa83 	bl	99b0 <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    54aa:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    54ac:	f88d 4200 	strb.w	r4, [sp, #512]	; 0x200
    return m_fFile ? m_fFile->getName(name, len) :
    54b0:	2800      	cmp	r0, #0
    54b2:	d03d      	beq.n	5530 <MTPStorage_SD::removeFile(unsigned long, char*)+0x118>
    54b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    54b8:	a980      	add	r1, sp, #512	; 0x200
    54ba:	f003 fe99 	bl	91f0 <FatFile::getName(char*, unsigned int)>
    54be:	ab80      	add	r3, sp, #512	; 0x200
    54c0:	f44f 7180 	mov.w	r1, #256	; 0x100
    54c4:	465a      	mov	r2, fp
    54c6:	9300      	str	r3, [sp, #0]
    54c8:	eb0d 0001 	add.w	r0, sp, r1
    54cc:	462b      	mov	r3, r5
    54ce:	f00b f9a5 	bl	1081c <snprintf>
    return m_fFile ? m_fFile->isDir() :
    54d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    54d4:	b14b      	cbz	r3, 54ea <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	f013 0f70 	tst.w	r3, #112	; 0x70
    54dc:	d00c      	beq.n	54f8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    54de:	aa40      	add	r2, sp, #256	; 0x100
    54e0:	4641      	mov	r1, r8
    54e2:	4648      	mov	r0, r9
    54e4:	f7ff ff98 	bl	5418 <MTPStorage_SD::removeFile(unsigned long, char*)>
    54e8:	e7bd      	b.n	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    54ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    54ec:	b123      	cbz	r3, 54f8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    54ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    54f2:	f013 0f50 	tst.w	r3, #80	; 0x50
    54f6:	d1f2      	bne.n	54de <MTPStorage_SD::removeFile(unsigned long, char*)+0xc6>
							  return write((const uint8_t *)str, strlen(str)); }
    54f8:	a840      	add	r0, sp, #256	; 0x100
    54fa:	f00b ff61 	bl	113c0 <strlen>
    54fe:	4601      	mov	r1, r0
    5500:	a840      	add	r0, sp, #256	; 0x100
    5502:	f009 f867 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5506:	4853      	ldr	r0, [pc, #332]	; (5654 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    5508:	f006 fefa 	bl	c300 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    550c:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    5510:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    5514:	2900      	cmp	r1, #0
    5516:	d036      	beq.n	5586 <MTPStorage_SD::removeFile(unsigned long, char*)+0x16e>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5518:	aa40      	add	r2, sp, #256	; 0x100
    551a:	2301      	movs	r3, #1
    551c:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    551e:	942c      	str	r4, [sp, #176]	; 0xb0
    5520:	f002 fc78 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    5524:	2800      	cmp	r0, #0
    5526:	d09e      	beq.n	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5528:	a82c      	add	r0, sp, #176	; 0xb0
    552a:	f003 fcd3 	bl	8ed4 <FatFile::remove()>
    552e:	e79a      	b.n	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5530:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    5532:	2800      	cmp	r0, #0
    5534:	d0c3      	beq.n	54be <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
    5536:	f44f 7280 	mov.w	r2, #256	; 0x100
    553a:	a980      	add	r1, sp, #512	; 0x200
    553c:	f001 fe92 	bl	7264 <ExFatFile::getName8(char*, unsigned int)>
    5540:	e7bd      	b.n	54be <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
  bool isOpen() const {return m_fFile || m_xFile;}
    5542:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    5544:	2b00      	cmp	r3, #0
    5546:	d1ac      	bne.n	54a2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    5548:	a830      	add	r0, sp, #192	; 0xc0
    554a:	9303      	str	r3, [sp, #12]
    554c:	962c      	str	r6, [sp, #176]	; 0xb0
    554e:	f004 fa2f 	bl	99b0 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5552:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    5556:	9b03      	ldr	r3, [sp, #12]
    5558:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    555c:	b330      	cbz	r0, 55ac <MTPStorage_SD::removeFile(unsigned long, char*)+0x194>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    555e:	4601      	mov	r1, r0
    5560:	462a      	mov	r2, r5
    5562:	a82c      	add	r0, sp, #176	; 0xb0
    5564:	932c      	str	r3, [sp, #176]	; 0xb0
    5566:	f002 fc55 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    556a:	2800      	cmp	r0, #0
    556c:	d164      	bne.n	5638 <MTPStorage_SD::removeFile(unsigned long, char*)+0x220>
    556e:	a81c      	add	r0, sp, #112	; 0x70
    5570:	9618      	str	r6, [sp, #96]	; 0x60
    5572:	f004 fa1d 	bl	99b0 <FsBaseFile::close()>
    5576:	4638      	mov	r0, r7
    5578:	9604      	str	r6, [sp, #16]
    557a:	f004 fa19 	bl	99b0 <FsBaseFile::close()>
}
    557e:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
    5582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5586:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    558a:	2b00      	cmp	r3, #0
    558c:	f43f af6b 	beq.w	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    5590:	9138      	str	r1, [sp, #224]	; 0xe0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5592:	aa40      	add	r2, sp, #256	; 0x100
    5594:	4619      	mov	r1, r3
    5596:	a82c      	add	r0, sp, #176	; 0xb0
    5598:	2301      	movs	r3, #1
    559a:	f001 f98b 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    559e:	2800      	cmp	r0, #0
    55a0:	f43f af61 	beq.w	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    55a4:	a82c      	add	r0, sp, #176	; 0xb0
    55a6:	f001 f9e9 	bl	697c <ExFatFile::remove()>
    55aa:	e75c      	b.n	5466 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    55ac:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    55b0:	2900      	cmp	r1, #0
    55b2:	d0dc      	beq.n	556e <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    55b4:	4603      	mov	r3, r0
    55b6:	9038      	str	r0, [sp, #224]	; 0xe0
    55b8:	462a      	mov	r2, r5
    55ba:	a82c      	add	r0, sp, #176	; 0xb0
    55bc:	f001 f97a 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    55c0:	2800      	cmp	r0, #0
    55c2:	d0d4      	beq.n	556e <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    55c4:	a82c      	add	r0, sp, #176	; 0xb0
    55c6:	f001 fa33 	bl	6a30 <ExFatFile::rmdir()>
    55ca:	e7d0      	b.n	556e <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    55cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    55ce:	b12b      	cbz	r3, 55dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
    55d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    55d4:	f013 0f50 	tst.w	r3, #80	; 0x50
    55d8:	f47f af36 	bne.w	5448 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    55dc:	b135      	cbz	r5, 55ec <MTPStorage_SD::removeFile(unsigned long, char*)+0x1d4>
							  return write((const uint8_t *)str, strlen(str)); }
    55de:	4628      	mov	r0, r5
    55e0:	f00b feee 	bl	113c0 <strlen>
    55e4:	4601      	mov	r1, r0
    55e6:	4628      	mov	r0, r5
    55e8:	f008 fff4 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55ec:	4819      	ldr	r0, [pc, #100]	; (5654 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    55ee:	f006 fe87 	bl	c300 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    55f2:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    55f6:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    55fa:	b15b      	cbz	r3, 5614 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    55fc:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    55fe:	4619      	mov	r1, r3
    5600:	462a      	mov	r2, r5
    5602:	2301      	movs	r3, #1
    5604:	9080      	str	r0, [sp, #512]	; 0x200
    5606:	a880      	add	r0, sp, #512	; 0x200
    5608:	f002 fc04 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    560c:	b9c0      	cbnz	r0, 5640 <MTPStorage_SD::removeFile(unsigned long, char*)+0x228>
    560e:	af08      	add	r7, sp, #32
    5610:	4e0e      	ldr	r6, [pc, #56]	; (564c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    5612:	e7b0      	b.n	5576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    5614:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5618:	2900      	cmp	r1, #0
    561a:	d0f8      	beq.n	560e <MTPStorage_SD::removeFile(unsigned long, char*)+0x1f6>
    561c:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    561e:	462a      	mov	r2, r5
    5620:	2301      	movs	r3, #1
    5622:	a880      	add	r0, sp, #512	; 0x200
    5624:	af08      	add	r7, sp, #32
    5626:	4e09      	ldr	r6, [pc, #36]	; (564c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    5628:	f001 f944 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    562c:	2800      	cmp	r0, #0
    562e:	d0a2      	beq.n	5576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    5630:	a880      	add	r0, sp, #512	; 0x200
    5632:	f001 f9a3 	bl	697c <ExFatFile::remove()>
    5636:	e79e      	b.n	5576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5638:	a82c      	add	r0, sp, #176	; 0xb0
    563a:	f002 fe3f 	bl	82bc <FatFile::rmdir()>
    563e:	e796      	b.n	556e <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5640:	a880      	add	r0, sp, #512	; 0x200
    5642:	af08      	add	r7, sp, #32
    5644:	4e01      	ldr	r6, [pc, #4]	; (564c <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    5646:	f003 fc45 	bl	8ed4 <FatFile::remove()>
    564a:	e794      	b.n	5576 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    564c:	20000b3c 	.word	0x20000b3c
    5650:	20000c64 	.word	0x20000c64
    5654:	20008a54 	.word	0x20008a54
    5658:	20000a94 	.word	0x20000a94

0000565c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    565c:	b570      	push	{r4, r5, r6, lr}
    565e:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
    5662:	4604      	mov	r4, r0
    5664:	460d      	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    5666:	f44f 7380 	mov.w	r3, #256	; 0x100
    566a:	aa44      	add	r2, sp, #272	; 0x110
    566c:	f7ff fc44 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    5670:	462a      	mov	r2, r5
    5672:	4621      	mov	r1, r4
    5674:	a884      	add	r0, sp, #528	; 0x210
    5676:	f7ff fb7d 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    567a:	aa44      	add	r2, sp, #272	; 0x110
    567c:	f8bd 121e 	ldrh.w	r1, [sp, #542]	; 0x21e
    5680:	4620      	mov	r0, r4
    5682:	f7ff fec9 	bl	5418 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    5686:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    5688:	aa84      	add	r2, sp, #528	; 0x210
    568a:	4629      	mov	r1, r5
    568c:	4620      	mov	r0, r4
    r.name[0]=0;
    568e:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    5692:	f7ff facf 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    5696:	9a84      	ldr	r2, [sp, #528]	; 0x210
    5698:	4621      	mov	r1, r4
    569a:	a8c8      	add	r0, sp, #800	; 0x320
    569c:	f7ff fb6a 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    56a0:	9ec9      	ldr	r6, [sp, #804]	; 0x324
    56a2:	42b5      	cmp	r5, r6
    56a4:	d025      	beq.n	56f2 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x96>
      Record x = ReadIndexRecord(is);
    56a6:	4632      	mov	r2, r6
    56a8:	4621      	mov	r1, r4
    56aa:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    56ae:	f7ff fb61 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    56b2:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    56b6:	4295      	cmp	r5, r2
    56b8:	d00f      	beq.n	56da <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x7e>
    56ba:	4621      	mov	r1, r4
    56bc:	4668      	mov	r0, sp
    56be:	4616      	mov	r6, r2
    56c0:	f7ff fb58 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    56c4:	f44f 7288 	mov.w	r2, #272	; 0x110
    56c8:	4669      	mov	r1, sp
    56ca:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    56ce:	f007 fa01 	bl	cad4 <memcpy>
    56d2:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    56d6:	4295      	cmp	r5, r2
    56d8:	d1ef      	bne.n	56ba <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      x.sibling = r.sibling;
    56da:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    56dc:	f50d 6286 	add.w	r2, sp, #1072	; 0x430
    56e0:	4631      	mov	r1, r6
    56e2:	4620      	mov	r0, r4
      x.sibling = r.sibling;
    56e4:	f8cd 3438 	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    56e8:	f7ff faa4 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    56ec:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    56f0:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    56f2:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    56f4:	aac8      	add	r2, sp, #800	; 0x320
    56f6:	9984      	ldr	r1, [sp, #528]	; 0x210
    56f8:	4620      	mov	r0, r4
      t.child = r.sibling;
    56fa:	93c9      	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    56fc:	f7ff fa9a 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    5700:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	bf00      	nop

00005708 <MTPStorage_SD::DeleteObject(unsigned long)>:
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    5708:	1c4a      	adds	r2, r1, #1
    570a:	d004      	beq.n	5716 <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
  {
    570c:	b508      	push	{r3, lr}
    570e:	f7ff ffa5 	bl	565c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    5712:	2001      	movs	r0, #1
    5714:	bd08      	pop	{r3, pc}
    5716:	2001      	movs	r0, #1
    5718:	4770      	bx	lr
    571a:	bf00      	nop

0000571c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    571c:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    571e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5722:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    5726:	4605      	mov	r5, r0
    5728:	461e      	mov	r6, r3
    572a:	6d49      	ldr	r1, [r1, #84]	; 0x54
    572c:	2300      	movs	r3, #0
    572e:	4668      	mov	r0, sp
    5730:	f004 fa58 	bl	9be4 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5734:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5736:	2b00      	cmp	r3, #0
    5738:	f000 8082 	beq.w	5840 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    573c:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    5740:	f240 2302 	movw	r3, #514	; 0x202
    5744:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    5748:	a814      	add	r0, sp, #80	; 0x50
    574a:	6d69      	ldr	r1, [r5, #84]	; 0x54
    574c:	f004 fa4a 	bl	9be4 <FsVolume::open(char const*, int)>
    5750:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5752:	2b00      	cmp	r3, #0
    5754:	d07f      	beq.n	5856 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    5756:	f04f 34ff 	mov.w	r4, #4294967295
    575a:	e006      	b.n	576a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    575c:	4622      	mov	r2, r4
    575e:	a928      	add	r1, sp, #160	; 0xa0
    5760:	f002 ff2a 	bl	85b8 <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    5764:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    5768:	db1e      	blt.n	57a8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    576a:	9812      	ldr	r0, [sp, #72]	; 0x48
    576c:	2800      	cmp	r0, #0
    576e:	d03c      	beq.n	57ea <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    5770:	7803      	ldrb	r3, [r0, #0]
    5772:	071a      	lsls	r2, r3, #28
    5774:	d521      	bpl.n	57ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    5776:	69c2      	ldr	r2, [r0, #28]
    5778:	6943      	ldr	r3, [r0, #20]
    577a:	429a      	cmp	r2, r3
    577c:	d01d      	beq.n	57ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    577e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5782:	a928      	add	r1, sp, #160	; 0xa0
    5784:	f002 fb9a 	bl	7ebc <FatFile::read(void*, unsigned int)>
    5788:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    578a:	2c00      	cmp	r4, #0
    578c:	db4a      	blt.n	5824 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    578e:	9826      	ldr	r0, [sp, #152]	; 0x98
    5790:	2800      	cmp	r0, #0
    5792:	d1e3      	bne.n	575c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    5794:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    5796:	2800      	cmp	r0, #0
    5798:	d0e4      	beq.n	5764 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    579a:	4622      	mov	r2, r4
    579c:	a928      	add	r1, sp, #160	; 0xa0
    579e:	f001 fbfb 	bl	6f98 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    57a2:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    57a6:	dae0      	bge.n	576a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    57a8:	ad04      	add	r5, sp, #16
  f2.close();
    57aa:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    57ac:	4628      	mov	r0, r5
    57ae:	f004 f8ff 	bl	99b0 <FsBaseFile::close()>
  f2.close();
    57b2:	4630      	mov	r0, r6
    57b4:	f004 f8fc 	bl	99b0 <FsBaseFile::close()>
    57b8:	e009      	b.n	57ce <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    57ba:	ad04      	add	r5, sp, #16
  f2.close();
    57bc:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    57be:	4628      	mov	r0, r5
    57c0:	f004 f8f6 	bl	99b0 <FsBaseFile::close()>
  f2.close();
    57c4:	4630      	mov	r0, r6
    57c6:	f004 f8f3 	bl	99b0 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    57ca:	3401      	adds	r4, #1
    57cc:	d032      	beq.n	5834 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    57ce:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    57d0:	4630      	mov	r0, r6
    57d2:	4e28      	ldr	r6, [pc, #160]	; (5874 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    57d4:	9614      	str	r6, [sp, #80]	; 0x50
    57d6:	f004 f8eb 	bl	99b0 <FsBaseFile::close()>
    57da:	4628      	mov	r0, r5
    57dc:	9600      	str	r6, [sp, #0]
    57de:	f004 f8e7 	bl	99b0 <FsBaseFile::close()>
}
    57e2:	4620      	mov	r0, r4
    57e4:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    57e8:	bd70      	pop	{r4, r5, r6, pc}
    57ea:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    57ec:	2800      	cmp	r0, #0
    57ee:	d0e4      	beq.n	57ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    57f0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    57f4:	071b      	lsls	r3, r3, #28
    57f6:	d5e0      	bpl.n	57ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    57f8:	6903      	ldr	r3, [r0, #16]
    57fa:	6801      	ldr	r1, [r0, #0]
    57fc:	6942      	ldr	r2, [r0, #20]
    57fe:	1a5b      	subs	r3, r3, r1
    5800:	6845      	ldr	r5, [r0, #4]
    5802:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    5806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    580a:	f172 0200 	sbcs.w	r2, r2, #0
    580e:	d201      	bcs.n	5814 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    5810:	2b00      	cmp	r3, #0
    5812:	d0d2      	beq.n	57ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    5814:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5818:	a928      	add	r1, sp, #160	; 0xa0
    581a:	f000 fca7 	bl	616c <ExFatFile::read(void*, unsigned int)>
    581e:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    5820:	2c00      	cmp	r4, #0
    5822:	dab4      	bge.n	578e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    5824:	ad04      	add	r5, sp, #16
  f2.close();
    5826:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    5828:	4628      	mov	r0, r5
    582a:	f004 f8c1 	bl	99b0 <FsBaseFile::close()>
  f2.close();
    582e:	4630      	mov	r0, r6
    5830:	f004 f8be 	bl	99b0 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    5834:	f44f 702b 	mov.w	r0, #684	; 0x2ac
    5838:	2400      	movs	r4, #0
    583a:	f7ff f87d 	bl	4938 <dbgPrint(unsigned short)>
    583e:	e7c7      	b.n	57d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    5840:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    5842:	2c00      	cmp	r4, #0
    5844:	f47f af7a 	bne.w	573c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    5848:	f240 209d 	movw	r0, #669	; 0x29d
    584c:	ad04      	add	r5, sp, #16
    584e:	4e09      	ldr	r6, [pc, #36]	; (5874 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    5850:	f7ff f872 	bl	4938 <dbgPrint(unsigned short)>
    5854:	e7c1      	b.n	57da <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    5856:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    5858:	2c00      	cmp	r4, #0
    585a:	f47f af7c 	bne.w	5756 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    585e:	ad04      	add	r5, sp, #16
    5860:	ae18      	add	r6, sp, #96	; 0x60
    5862:	4628      	mov	r0, r5
    5864:	f004 f8a4 	bl	99b0 <FsBaseFile::close()>
    5868:	f44f 7028 	mov.w	r0, #672	; 0x2a0
    586c:	f7ff f864 	bl	4938 <dbgPrint(unsigned short)>
    5870:	e7ae      	b.n	57d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    5872:	bf00      	nop
    5874:	20000b3c 	.word	0x20000b3c

00005878 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    5878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    587c:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    5880:	f1b3 3fff 	cmp.w	r3, #4294967295
    5884:	bf14      	ite	ne
    5886:	461f      	movne	r7, r3
    5888:	4617      	moveq	r7, r2
  { 
    588a:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    588c:	460a      	mov	r2, r1
  { 
    588e:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    5890:	4601      	mov	r1, r0
    5892:	a882      	add	r0, sp, #520	; 0x208
    5894:	f7ff fa6e 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5898:	463a      	mov	r2, r7
    589a:	4621      	mov	r1, r4
    589c:	a8c6      	add	r0, sp, #792	; 0x318
    589e:	f7ff fa69 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    58a2:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    58a6:	f1b8 0f00 	cmp.w	r8, #0
    58aa:	d022      	beq.n	58f2 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x7a>
      ScanDir(p1.store+1,handle);
    58ac:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    58b0:	4632      	mov	r2, r6
    58b2:	4620      	mov	r0, r4
    58b4:	3101      	adds	r1, #1
    58b6:	f7ff fcaf 	bl	5218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    58ba:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    58be:	6821      	ldr	r1, [r4, #0]
    58c0:	a886      	add	r0, sp, #536	; 0x218
    58c2:	3b00      	subs	r3, #0
    58c4:	463a      	mov	r2, r7
    58c6:	9000      	str	r0, [sp, #0]
    58c8:	4620      	mov	r0, r4
    58ca:	bf18      	it	ne
    58cc:	2301      	movne	r3, #1
    58ce:	6acd      	ldr	r5, [r1, #44]	; 0x2c
    58d0:	f8bd 1326 	ldrh.w	r1, [sp, #806]	; 0x326
    58d4:	47a8      	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    58d6:	6823      	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    58d8:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    58da:	4631      	mov	r1, r6
    58dc:	f8bd 2326 	ldrh.w	r2, [sp, #806]	; 0x326
    58e0:	4620      	mov	r0, r4
    58e2:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    58e4:	462b      	mov	r3, r5
    58e6:	47b0      	blx	r6
  }
    58e8:	4628      	mov	r0, r5
    58ea:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    58ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    58f2:	a986      	add	r1, sp, #536	; 0x218
    58f4:	f44f 7280 	mov.w	r2, #256	; 0x100
    58f8:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
    58fc:	f00b f9fe 	bl	10cfc <strlcpy>
  { uint32_t new_record = index_entries_++;
    5900:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5904:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
    5908:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    590a:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    590c:	4629      	mov	r1, r5
      r.parent = newParent;
    590e:	f8cd 7428 	str.w	r7, [sp, #1064]	; 0x428
  { uint32_t new_record = index_entries_++;
    5912:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      r.store = p2.store;
    5916:	f8bd 3326 	ldrh.w	r3, [sp, #806]	; 0x326
      r.child = 0;
    591a:	f8cd 842c 	str.w	r8, [sp, #1068]	; 0x42c
      r.store = p2.store;
    591e:	f8ad 3436 	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    5922:	9bc7      	ldr	r3, [sp, #796]	; 0x31c
      r.isdir = 0;
    5924:	f8ad 8434 	strh.w	r8, [sp, #1076]	; 0x434
      r.sibling = p2.child;
    5928:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    WriteIndexRecord(new_record, r);
    592c:	f7ff f982 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    5930:	4639      	mov	r1, r7
    5932:	aac6      	add	r2, sp, #792	; 0x318
    5934:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    5936:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    5938:	95c7      	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    593a:	f7ff f97b 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    593e:	4631      	mov	r1, r6
    5940:	aa02      	add	r2, sp, #8
    5942:	f44f 7380 	mov.w	r3, #256	; 0x100
    5946:	4620      	mov	r0, r4
    5948:	f7ff fad6 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    594c:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    594e:	463a      	mov	r2, r7
    5950:	4629      	mov	r1, r5
    5952:	f44f 7380 	mov.w	r3, #256	; 0x100
    5956:	4620      	mov	r0, r4
    5958:	f7ff face 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    595c:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    595e:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    5960:	4631      	mov	r1, r6
    5962:	1d20      	adds	r0, r4, #4
    5964:	9700      	str	r7, [sp, #0]
    5966:	f7ff fed9 	bl	571c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    596a:	4628      	mov	r0, r5
    596c:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    5970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005974 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    5974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5978:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    597c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5980:	bf14      	ite	ne
    5982:	4698      	movne	r8, r3
    5984:	4690      	moveq	r8, r2
{ // assume handle and newHandle point to existing directories
    5986:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    5988:	460a      	mov	r2, r1
    598a:	4601      	mov	r1, r0
    598c:	a890      	add	r0, sp, #576	; 0x240
    598e:	f7ff f9f1 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    5992:	4642      	mov	r2, r8
    5994:	4621      	mov	r1, r4
    5996:	a8d4      	add	r0, sp, #848	; 0x350
  Record p1=ReadIndexRecord(handle);
    5998:	f8bd 724e 	ldrh.w	r7, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    599c:	f7ff f9ea 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    59a0:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    59a2:	2e00      	cmp	r6, #0
    59a4:	f000 8082 	beq.w	5aac <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x138>
  uint32_t iy= 0;
    59a8:	2500      	movs	r5, #0
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    59aa:	f104 0904 	add.w	r9, r4, #4
    59ae:	e025      	b.n	59fc <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
      sd_mkdir(py.store,newfilename);
    59b0:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
  FatFile() {}
    59b4:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    59b8:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    59ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    59be:	6d99      	ldr	r1, [r3, #88]	; 0x58
    59c0:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    59c2:	f8d1 0480 	ldr.w	r0, [r1, #1152]	; 0x480
    59c6:	2800      	cmp	r0, #0
    59c8:	d063      	beq.n	5a92 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x11e>
    59ca:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    59ce:	a802      	add	r0, sp, #8
    59d0:	f8cd c008 	str.w	ip, [sp, #8]
    59d4:	f002 f926 	bl	7c24 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    59d8:	4632      	mov	r2, r6
    59da:	4639      	mov	r1, r7
    59dc:	4620      	mov	r0, r4
    59de:	f7ff fc1b 	bl	5218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    59e2:	6821      	ldr	r1, [r4, #0]
    59e4:	462b      	mov	r3, r5
    59e6:	f8bd 235e 	ldrh.w	r2, [sp, #862]	; 0x35e
    59ea:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
    59ee:	4620      	mov	r0, r4
    59f0:	4631      	mov	r1, r6
    59f2:	47d0      	blx	sl
    ix = px.sibling;
    59f4:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    59f8:	2e00      	cmp	r6, #0
    59fa:	d03f      	beq.n	5a7c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    Record px = ReadIndexRecord(ix) ;
    59fc:	4632      	mov	r2, r6
    59fe:	4621      	mov	r1, r4
    5a00:	f50d 608c 	add.w	r0, sp, #1120	; 0x460
    5a04:	f7ff f9b6 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    5a08:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
    5a0c:	f44f 7288 	mov.w	r2, #272	; 0x110
    5a10:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    5a14:	f007 f85e 	bl	cad4 <memcpy>
    py.sibling = iy;
    5a18:	f8cd 5578 	str.w	r5, [sp, #1400]	; 0x578
  { uint32_t new_record = index_entries_++;
    5a1c:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5a20:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
    py.store = p2.store;
    5a24:	f8bd 135e 	ldrh.w	r1, [sp, #862]	; 0x35e
    WriteIndexRecord(new_record, r);
    5a28:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    5a2a:	1c6b      	adds	r3, r5, #1
    py.parent = newHandle;
    5a2c:	f8cd 8570 	str.w	r8, [sp, #1392]	; 0x570
    py.store = p2.store;
    5a30:	f8ad 157e 	strh.w	r1, [sp, #1406]	; 0x57e
    WriteIndexRecord(new_record, r);
    5a34:	4629      	mov	r1, r5
  { uint32_t new_record = index_entries_++;
    5a36:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5a3a:	f7ff f8fb 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    5a3e:	4631      	mov	r1, r6
    5a40:	aa10      	add	r2, sp, #64	; 0x40
    5a42:	f44f 7380 	mov.w	r3, #256	; 0x100
    5a46:	4620      	mov	r0, r4
    5a48:	f7ff fa56 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    5a4c:	aa50      	add	r2, sp, #320	; 0x140
    5a4e:	4629      	mov	r1, r5
    5a50:	f44f 7380 	mov.w	r3, #256	; 0x100
    5a54:	4620      	mov	r0, r4
    5a56:	f7ff fa4f 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    5a5a:	f89d 357c 	ldrb.w	r3, [sp, #1404]	; 0x57c
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    5a5e:	aa10      	add	r2, sp, #64	; 0x40
    5a60:	4639      	mov	r1, r7
    5a62:	4648      	mov	r0, r9
    if(py.isdir) 
    5a64:	2b00      	cmp	r3, #0
    5a66:	d1a3      	bne.n	59b0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    5a68:	ae50      	add	r6, sp, #320	; 0x140
    5a6a:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
    5a6e:	9600      	str	r6, [sp, #0]
    5a70:	f7ff fe54 	bl	571c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    ix = px.sibling;
    5a74:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    5a78:	2e00      	cmp	r6, #0
    5a7a:	d1bf      	bne.n	59fc <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
  WriteIndexRecord(newHandle,p2);
    5a7c:	4620      	mov	r0, r4
    5a7e:	aad4      	add	r2, sp, #848	; 0x350
    5a80:	4641      	mov	r1, r8
  p2.child=iy;
    5a82:	95d5      	str	r5, [sp, #852]	; 0x354
  WriteIndexRecord(newHandle,p2);
    5a84:	f7ff f8d6 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    5a88:	2001      	movs	r0, #1
    5a8a:	f50d 6dd0 	add.w	sp, sp, #1664	; 0x680
    5a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a92:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5a96:	2900      	cmp	r1, #0
    5a98:	d09e      	beq.n	59d8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  ExFatFile() {}
    5a9a:	900e      	str	r0, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    5a9c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5aa0:	a802      	add	r0, sp, #8
    5aa2:	2301      	movs	r3, #1
    5aa4:	aa50      	add	r2, sp, #320	; 0x140
    5aa6:	f001 f999 	bl	6ddc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5aaa:	e795      	b.n	59d8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  uint32_t iy= 0;
    5aac:	4635      	mov	r5, r6
    5aae:	e7e5      	b.n	5a7c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>

00005ab0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    5ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ab4:	461d      	mov	r5, r3
    5ab6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    5aba:	b08e      	sub	sp, #56	; 0x38
    5abc:	460e      	mov	r6, r1
    5abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5ac0:	4604      	mov	r4, r0
    5ac2:	4690      	mov	r8, r2
    5ac4:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    5ac6:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    5aca:	b199      	cbz	r1, 5af4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    5acc:	2300      	movs	r3, #0
    5ace:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5ad2:	463a      	mov	r2, r7
    5ad4:	4668      	mov	r0, sp
    5ad6:	9300      	str	r3, [sp, #0]
    5ad8:	2301      	movs	r3, #1
    5ada:	f002 f8a3 	bl	7c24 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    5ade:	b1b0      	cbz	r0, 5b0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    5ae0:	462b      	mov	r3, r5
    5ae2:	4642      	mov	r2, r8
    5ae4:	4631      	mov	r1, r6
    5ae6:	4620      	mov	r0, r4
    5ae8:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5aea:	b00e      	add	sp, #56	; 0x38
    5aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5af0:	f000 b816 	b.w	5b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    5af4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5af8:	b14b      	cbz	r3, 5b0e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    5afa:	910c      	str	r1, [sp, #48]	; 0x30
    5afc:	463a      	mov	r2, r7
    5afe:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    5b02:	4668      	mov	r0, sp
    5b04:	2301      	movs	r3, #1
    5b06:	f001 f969 	bl	6ddc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5b0a:	2800      	cmp	r0, #0
    5b0c:	d1e8      	bne.n	5ae0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    5b0e:	f240 20b6 	movw	r0, #694	; 0x2b6
    5b12:	f7fe ff11 	bl	4938 <dbgPrint(unsigned short)>
}
    5b16:	2000      	movs	r0, #0
    5b18:	b00e      	add	sp, #56	; 0x38
    5b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b1e:	bf00      	nop

00005b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    5b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b24:	461f      	mov	r7, r3
    5b26:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    5b2a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    5b2e:	460d      	mov	r5, r1
    5b30:	4619      	mov	r1, r3
    5b32:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,FILE_READ);
    5b34:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5b36:	a812      	add	r0, sp, #72	; 0x48
    5b38:	2300      	movs	r3, #0
    5b3a:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    5b3c:	4616      	mov	r6, r2
    5b3e:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    5b42:	f004 f84f 	bl	9be4 <FsVolume::open(char const*, int)>
    5b46:	9b24      	ldr	r3, [sp, #144]	; 0x90
    5b48:	2b00      	cmp	r3, #0
    5b4a:	f000 8101 	beq.w	5d50 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    5b4e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    5b52:	f8df 9244 	ldr.w	r9, [pc, #580]	; 5d98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    5b56:	f8df b244 	ldr.w	fp, [pc, #580]	; 5d9c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    5b5a:	e01b      	b.n	5b94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    5b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b60:	a97a      	add	r1, sp, #488	; 0x1e8
    5b62:	f003 fb45 	bl	91f0 <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    5b66:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d067      	beq.n	5c3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    5b6c:	781b      	ldrb	r3, [r3, #0]
    5b6e:	f013 0f70 	tst.w	r3, #112	; 0x70
    5b72:	d06a      	beq.n	5c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5b74:	ab7a      	add	r3, sp, #488	; 0x1e8
    5b76:	aa3a      	add	r2, sp, #232	; 0xe8
    5b78:	4629      	mov	r1, r5
    5b7a:	4620      	mov	r0, r4
    5b7c:	9300      	str	r3, [sp, #0]
    5b7e:	463b      	mov	r3, r7
    5b80:	f7ff ff96 	bl	5ab0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5b84:	2800      	cmp	r0, #0
    5b86:	f000 80f6 	beq.w	5d76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    5b8a:	a82a      	add	r0, sp, #168	; 0xa8
    5b8c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5b90:	f003 ff0e 	bl	99b0 <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    5b94:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b98:	4631      	mov	r1, r6
    5b9a:	a83a      	add	r0, sp, #232	; 0xe8
    5b9c:	f00b f8ae 	bl	10cfc <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    5ba0:	a83a      	add	r0, sp, #232	; 0xe8
    5ba2:	f00b fc0d 	bl	113c0 <strlen>
    5ba6:	ab3a      	add	r3, sp, #232	; 0xe8
    5ba8:	4418      	add	r0, r3
    5baa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5bae:	2b2f      	cmp	r3, #47	; 0x2f
    5bb0:	d005      	beq.n	5bbe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    5bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bb6:	4659      	mov	r1, fp
    5bb8:	a83a      	add	r0, sp, #232	; 0xe8
    5bba:	f00b f86b 	bl	10c94 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    5bbe:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bc2:	4651      	mov	r1, sl
    5bc4:	a87a      	add	r0, sp, #488	; 0x1e8
    5bc6:	f00b f899 	bl	10cfc <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    5bca:	a87a      	add	r0, sp, #488	; 0x1e8
    5bcc:	f00b fbf8 	bl	113c0 <strlen>
    5bd0:	ab7a      	add	r3, sp, #488	; 0x1e8
    5bd2:	4418      	add	r0, r3
    5bd4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5bd8:	2b2f      	cmp	r3, #47	; 0x2f
    5bda:	d005      	beq.n	5be8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    5bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
    5be0:	4659      	mov	r1, fp
    5be2:	a87a      	add	r0, sp, #488	; 0x1e8
    5be4:	f00b f856 	bl	10c94 <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5be8:	4b69      	ldr	r3, [pc, #420]	; (5d90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    5bea:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    5bec:	4641      	mov	r1, r8
    5bee:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5bf0:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5bf6:	9227      	str	r2, [sp, #156]	; 0x9c
    5bf8:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    5bfc:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    5bfe:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    5c02:	f003 ff41 	bl	9a88 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5c06:	9838      	ldr	r0, [sp, #224]	; 0xe0
    5c08:	2200      	movs	r2, #0
    5c0a:	2800      	cmp	r0, #0
    5c0c:	d055      	beq.n	5cba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    5c0e:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    5c12:	a93a      	add	r1, sp, #232	; 0xe8
    5c14:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c18:	f003 faea 	bl	91f0 <FatFile::getName(char*, unsigned int)>
    *name = 0;
    5c1c:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    5c1e:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    5c20:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    5c24:	2800      	cmp	r0, #0
    5c26:	d199      	bne.n	5b5c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    5c28:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    5c2a:	b170      	cbz	r0, 5c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    5c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c30:	a97a      	add	r1, sp, #488	; 0x1e8
    5c32:	f001 fb17 	bl	7264 <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    5c36:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d197      	bne.n	5b6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    5c3c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    5c3e:	b123      	cbz	r3, 5c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    5c40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5c44:	f013 0f50 	tst.w	r3, #80	; 0x50
    5c48:	d194      	bne.n	5b74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5c4a:	ab7a      	add	r3, sp, #488	; 0x1e8
    5c4c:	aa3a      	add	r2, sp, #232	; 0xe8
    5c4e:	4629      	mov	r1, r5
    5c50:	4620      	mov	r0, r4
    5c52:	9300      	str	r3, [sp, #0]
    5c54:	463b      	mov	r3, r7
    5c56:	f7ff fd61 	bl	571c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5c5a:	2800      	cmp	r0, #0
    5c5c:	f000 8086 	beq.w	5d6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    5c60:	a83a      	add	r0, sp, #232	; 0xe8
    5c62:	f00b fbad 	bl	113c0 <strlen>
    5c66:	4601      	mov	r1, r0
    5c68:	a83a      	add	r0, sp, #232	; 0xe8
    5c6a:	f008 fcb3 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c6e:	4849      	ldr	r0, [pc, #292]	; (5d94 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    5c70:	f006 fb46 	bl	c300 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5c74:	9b02      	ldr	r3, [sp, #8]
    5c76:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    5c78:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5c7c:	b343      	cbz	r3, 5cd0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5c7e:	4619      	mov	r1, r3
    5c80:	2300      	movs	r3, #0
    5c82:	aa3a      	add	r2, sp, #232	; 0xe8
    5c84:	a804      	add	r0, sp, #16
    5c86:	9304      	str	r3, [sp, #16]
    5c88:	2301      	movs	r3, #1
    5c8a:	f002 f8c3 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    5c8e:	2800      	cmp	r0, #0
    5c90:	d157      	bne.n	5d42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    5c92:	f240 20d2 	movw	r0, #722	; 0x2d2
    5c96:	f7fe fe4f 	bl	4938 <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    5c9a:	a82a      	add	r0, sp, #168	; 0xa8
    5c9c:	2400      	movs	r4, #0
    5c9e:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5ca2:	f003 fe85 	bl	99b0 <FsBaseFile::close()>
    5ca6:	4640      	mov	r0, r8
    5ca8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    5cac:	f003 fe80 	bl	99b0 <FsBaseFile::close()>
}
    5cb0:	4620      	mov	r0, r4
    5cb2:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    5cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5cba:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    5cbc:	b1db      	cbz	r3, 5cf6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    5cbe:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    5cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5cc6:	4618      	mov	r0, r3
    5cc8:	a93a      	add	r1, sp, #232	; 0xe8
    5cca:	f001 facb 	bl	7264 <ExFatFile::getName8(char*, unsigned int)>
    5cce:	e7a5      	b.n	5c1c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    5cd0:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5cd4:	2900      	cmp	r1, #0
    5cd6:	d0dc      	beq.n	5c92 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    5cd8:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5cda:	aa3a      	add	r2, sp, #232	; 0xe8
    5cdc:	2301      	movs	r3, #1
    5cde:	a804      	add	r0, sp, #16
    5ce0:	f000 fde8 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5ce4:	2800      	cmp	r0, #0
    5ce6:	d0d4      	beq.n	5c92 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    5ce8:	a804      	add	r0, sp, #16
    5cea:	f000 fe47 	bl	697c <ExFatFile::remove()>
    5cee:	2800      	cmp	r0, #0
    5cf0:	f47f af4b 	bne.w	5b8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    5cf4:	e7cd      	b.n	5c92 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    5cf6:	a82a      	add	r0, sp, #168	; 0xa8
    5cf8:	9303      	str	r3, [sp, #12]
    5cfa:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5cfe:	f003 fe57 	bl	99b0 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5d02:	9b02      	ldr	r3, [sp, #8]
    5d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    5d06:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    5d0a:	b170      	cbz	r0, 5d2a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    5d0c:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5d0e:	4601      	mov	r1, r0
    5d10:	4632      	mov	r2, r6
    5d12:	a826      	add	r0, sp, #152	; 0x98
    5d14:	9326      	str	r3, [sp, #152]	; 0x98
    5d16:	f002 f87d 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    5d1a:	4604      	mov	r4, r0
    5d1c:	2800      	cmp	r0, #0
    5d1e:	d0c2      	beq.n	5ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    5d20:	a826      	add	r0, sp, #152	; 0x98
    5d22:	f002 facb 	bl	82bc <FatFile::rmdir()>
    5d26:	4604      	mov	r4, r0
    5d28:	e7bd      	b.n	5ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    5d2a:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    5d2e:	b131      	cbz	r1, 5d3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5d30:	4603      	mov	r3, r0
    5d32:	9032      	str	r0, [sp, #200]	; 0xc8
    5d34:	4632      	mov	r2, r6
    5d36:	a826      	add	r0, sp, #152	; 0x98
    5d38:	f000 fdbc 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5d3c:	bb00      	cbnz	r0, 5d80 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    5d3e:	2400      	movs	r4, #0
    5d40:	e7b1      	b.n	5ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5d42:	a804      	add	r0, sp, #16
    5d44:	f003 f8c6 	bl	8ed4 <FatFile::remove()>
    5d48:	2800      	cmp	r0, #0
    5d4a:	f47f af1e 	bne.w	5b8a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    5d4e:	e7a0      	b.n	5c92 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    5d50:	9925      	ldr	r1, [sp, #148]	; 0x94
    5d52:	2900      	cmp	r1, #0
    5d54:	f47f aefb 	bne.w	5b4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    5d58:	f240 20b9 	movw	r0, #697	; 0x2b9
    5d5c:	460c      	mov	r4, r1
    5d5e:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    5d62:	f8df 9034 	ldr.w	r9, [pc, #52]	; 5d98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    5d66:	f7fe fde7 	bl	4938 <dbgPrint(unsigned short)>
    5d6a:	e79c      	b.n	5ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5d6c:	f240 20d1 	movw	r0, #721	; 0x2d1
    5d70:	f7fe fde2 	bl	4938 <dbgPrint(unsigned short)>
    5d74:	e791      	b.n	5c9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5d76:	f240 20cd 	movw	r0, #717	; 0x2cd
    5d7a:	f7fe fddd 	bl	4938 <dbgPrint(unsigned short)>
    5d7e:	e78c      	b.n	5c9a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    5d80:	a826      	add	r0, sp, #152	; 0x98
    5d82:	f000 fe55 	bl	6a30 <ExFatFile::rmdir()>
    5d86:	4604      	mov	r4, r0
    5d88:	2800      	cmp	r0, #0
    5d8a:	d0d8      	beq.n	5d3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    5d8c:	e78b      	b.n	5ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    5d8e:	bf00      	nop
    5d90:	20000c64 	.word	0x20000c64
    5d94:	20008a54 	.word	0x20008a54
    5d98:	20000b3c 	.word	0x20000b3c
    5d9c:	20000a9c 	.word	0x20000a9c

00005da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    5da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5da4:	460d      	mov	r5, r1
    5da6:	f6ad 2dcc 	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    5daa:	f1b3 3fff 	cmp.w	r3, #4294967295
    5dae:	bf14      	ite	ne
    5db0:	461f      	movne	r7, r3
    5db2:	4617      	moveq	r7, r2
  { 
    5db4:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    5db6:	4601      	mov	r1, r0
    5db8:	462a      	mov	r2, r5
    5dba:	a8d6      	add	r0, sp, #856	; 0x358
    5dbc:	f7fe ffda 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5dc0:	463a      	mov	r2, r7
    5dc2:	4621      	mov	r1, r4
    5dc4:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
    5dc8:	f7fe ffd4 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    5dcc:	9ad6      	ldr	r2, [sp, #856]	; 0x358
    5dce:	4621      	mov	r1, r4
    5dd0:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    5dd4:	f7fe ffce 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    5dd8:	f89d 3364 	ldrb.w	r3, [sp, #868]	; 0x364
    5ddc:	b123      	cbz	r3, 5de8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    5dde:	f89d 3365 	ldrb.w	r3, [sp, #869]	; 0x365
    5de2:	2b00      	cmp	r3, #0
    5de4:	f000 80f2 	beq.w	5fcc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    5de8:	f44f 7288 	mov.w	r2, #272	; 0x110
    5dec:	a9d6      	add	r1, sp, #856	; 0x358
    5dee:	f50d 60d1 	add.w	r0, sp, #1672	; 0x688
    5df2:	f006 fe6f 	bl	cad4 <memcpy>
    Record p2o = p2;
    5df6:	f44f 7288 	mov.w	r2, #272	; 0x110
    5dfa:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
    5dfe:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    5e02:	f006 fe67 	bl	cad4 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5e06:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e0a:	aa56      	add	r2, sp, #344	; 0x158
    5e0c:	4629      	mov	r1, r5
    5e0e:	4620      	mov	r0, r4
    5e10:	f7ff f872 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    5e14:	f8dd 657c 	ldr.w	r6, [sp, #1404]	; 0x57c
    5e18:	42ae      	cmp	r6, r5
    5e1a:	f000 8096 	beq.w	5f4a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    5e1e:	4632      	mov	r2, r6
    5e20:	4621      	mov	r1, r4
    5e22:	a804      	add	r0, sp, #16
    5e24:	f7fe ffa6 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5e28:	f44f 7288 	mov.w	r2, #272	; 0x110
    5e2c:	a904      	add	r1, sp, #16
    5e2e:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    5e32:	f006 fe4f 	bl	cad4 <memcpy>
        pxo = px;
    5e36:	f44f 7288 	mov.w	r2, #272	; 0x110
    5e3a:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    5e3e:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    5e42:	f006 fe47 	bl	cad4 <memcpy>
        while(handle != px.sibling)
    5e46:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    5e4a:	4295      	cmp	r5, r2
    5e4c:	d017      	beq.n	5e7e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    5e4e:	4621      	mov	r1, r4
    5e50:	a804      	add	r0, sp, #16
    5e52:	4616      	mov	r6, r2
    5e54:	f7fe ff8e 	bl	4d74 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5e58:	f44f 7288 	mov.w	r2, #272	; 0x110
    5e5c:	a904      	add	r1, sp, #16
    5e5e:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    5e62:	f006 fe37 	bl	cad4 <memcpy>
          pxo = px;
    5e66:	f44f 7288 	mov.w	r2, #272	; 0x110
    5e6a:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    5e6e:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    5e72:	f006 fe2f 	bl	cad4 <memcpy>
        while(handle != px.sibling)
    5e76:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    5e7a:	42aa      	cmp	r2, r5
    5e7c:	d1e7      	bne.n	5e4e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    5e7e:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(jx, px);
    5e80:	f60d 12b8 	addw	r2, sp, #2488	; 0x9b8
    5e84:	4631      	mov	r1, r6
    5e86:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    5e88:	f8cd 39c0 	str.w	r3, [sp, #2496]	; 0x9c0
        WriteIndexRecord(jx, px);
    5e8c:	f7fe fed2 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    5e90:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    5e94:	aad6      	add	r2, sp, #856	; 0x358
    5e96:	4629      	mov	r1, r5
    5e98:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    5e9a:	93d8      	str	r3, [sp, #864]	; 0x360
      p1.store = p2.store;
    5e9c:	f8bd 3476 	ldrh.w	r3, [sp, #1142]	; 0x476
      p1.parent = newParent;
    5ea0:	97d6      	str	r7, [sp, #856]	; 0x358
      p1.store = p2.store;
    5ea2:	f8ad 3366 	strh.w	r3, [sp, #870]	; 0x366
      p2.child = handle;
    5ea6:	f8cd 546c 	str.w	r5, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    5eaa:	f7fe fec3 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    5eae:	f50d 628d 	add.w	r2, sp, #1128	; 0x468
    5eb2:	4639      	mov	r1, r7
    5eb4:	4620      	mov	r0, r4
    5eb6:	f7fe febd 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5eba:	f44f 7380 	mov.w	r3, #256	; 0x100
    5ebe:	4629      	mov	r1, r5
    5ec0:	aa96      	add	r2, sp, #600	; 0x258
    5ec2:	4620      	mov	r0, r4
    5ec4:	f7ff f818 	bl	4ef8 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    5ec8:	f8bd 1696 	ldrh.w	r1, [sp, #1686]	; 0x696
    5ecc:	f8bd 37a6 	ldrh.w	r3, [sp, #1958]	; 0x7a6
    5ed0:	4299      	cmp	r1, r3
    5ed2:	d046      	beq.n	5f62 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5ed4:	aa96      	add	r2, sp, #600	; 0x258
    else if(!p1o.isdir)
    5ed6:	f89d 9694 	ldrb.w	r9, [sp, #1684]	; 0x694
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5eda:	1d20      	adds	r0, r4, #4
    5edc:	9200      	str	r2, [sp, #0]
    5ede:	aa56      	add	r2, sp, #344	; 0x158
    else if(!p1o.isdir)
    5ee0:	f1b9 0f00 	cmp.w	r9, #0
    5ee4:	d00b      	beq.n	5efe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5ee6:	f7ff fde3 	bl	5ab0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5eea:	2800      	cmp	r0, #0
    5eec:	f000 8092 	beq.w	6014 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5ef0:	f04f 0801 	mov.w	r8, #1
  }
    5ef4:	4640      	mov	r0, r8
    5ef6:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    5efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    5efe:	f7ff fc0d 	bl	571c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5f02:	4680      	mov	r8, r0
    5f04:	2800      	cmp	r0, #0
    5f06:	d044      	beq.n	5f92 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5f08:	f8bd 57a6 	ldrh.w	r5, [sp, #1958]	; 0x7a6
							  return write((const uint8_t *)str, strlen(str)); }
    5f0c:	a856      	add	r0, sp, #344	; 0x158
    5f0e:	f00b fa57 	bl	113c0 <strlen>
    5f12:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5f14:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    5f18:	a856      	add	r0, sp, #344	; 0x158
    5f1a:	f008 fb5b 	bl	e5d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f1e:	484d      	ldr	r0, [pc, #308]	; (6054 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    5f20:	f006 f9ee 	bl	c300 <Print::println()>
    5f24:	6daa      	ldr	r2, [r5, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    5f26:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5f2a:	2b00      	cmp	r3, #0
    5f2c:	d077      	beq.n	601e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    5f2e:	4619      	mov	r1, r3
    5f30:	aa56      	add	r2, sp, #344	; 0x158
    5f32:	2301      	movs	r3, #1
    5f34:	a848      	add	r0, sp, #288	; 0x120
    5f36:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
    5f3a:	f001 ff6b 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    5f3e:	2800      	cmp	r0, #0
    5f40:	d0d8      	beq.n	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    5f42:	a848      	add	r0, sp, #288	; 0x120
    5f44:	f002 ffc6 	bl	8ed4 <FatFile::remove()>
    5f48:	e7d4      	b.n	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    5f4a:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(p1.parent, p3);    
    5f4c:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    5f50:	99d6      	ldr	r1, [sp, #856]	; 0x358
    5f52:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    5f54:	f8cd 357c 	str.w	r3, [sp, #1404]	; 0x57c
    uint32_t jx=-1;
    5f58:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    5f5c:	f7fe fe6a 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5f60:	e796      	b.n	5e90 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5f62:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    5f66:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5f68:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d039      	beq.n	5fe4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    5f70:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    5f74:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5f76:	aa56      	add	r2, sp, #344	; 0x158
    5f78:	a848      	add	r0, sp, #288	; 0x120
    5f7a:	9103      	str	r1, [sp, #12]
    5f7c:	9348      	str	r3, [sp, #288]	; 0x120
    5f7e:	f001 fec7 	bl	7d10 <FatFile::open(FatFile*, char const*, int)>
    5f82:	9903      	ldr	r1, [sp, #12]
    5f84:	2800      	cmp	r0, #0
    5f86:	d15c      	bne.n	6042 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    5f88:	f240 202e 	movw	r0, #558	; 0x22e
    5f8c:	f7fe fcd4 	bl	4938 <dbgPrint(unsigned short)>
    5f90:	e003      	b.n	5f9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    5f92:	f240 2032 	movw	r0, #562	; 0x232
    5f96:	f7fe fccf 	bl	4938 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5f9a:	4631      	mov	r1, r6
    5f9c:	f60d 02a8 	addw	r2, sp, #2216	; 0x8a8
    5fa0:	4620      	mov	r0, r4
    return false;
    5fa2:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    5fa6:	f7fe fe45 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    5faa:	f50d 62d1 	add.w	r2, sp, #1672	; 0x688
    5fae:	4629      	mov	r1, r5
    5fb0:	4620      	mov	r0, r4
    5fb2:	f7fe fe3f 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    5fb6:	4620      	mov	r0, r4
    5fb8:	f50d 62f3 	add.w	r2, sp, #1944	; 0x798
    5fbc:	4639      	mov	r1, r7
    5fbe:	f7fe fe39 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    5fc2:	4640      	mov	r0, r8
    5fc4:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    5fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    5fcc:	462a      	mov	r2, r5
    5fce:	f8bd 1366 	ldrh.w	r1, [sp, #870]	; 0x366
    5fd2:	4620      	mov	r0, r4
    5fd4:	f7ff f920 	bl	5218 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    5fd8:	aad6      	add	r2, sp, #856	; 0x358
    5fda:	4629      	mov	r1, r5
    5fdc:	4620      	mov	r0, r4
    5fde:	f7fe fe29 	bl	4c34 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    5fe2:	e701      	b.n	5de8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    5fe4:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    5fe8:	2900      	cmp	r1, #0
    5fea:	d0cd      	beq.n	5f88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    5fec:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5ff0:	aa56      	add	r2, sp, #344	; 0x158
    5ff2:	a848      	add	r0, sp, #288	; 0x120
    5ff4:	9354      	str	r3, [sp, #336]	; 0x150
    5ff6:	9103      	str	r1, [sp, #12]
    5ff8:	f000 fbe0 	bl	67bc <ExFatFile::open(ExFatFile*, char const*, int)>
    5ffc:	9903      	ldr	r1, [sp, #12]
    5ffe:	2800      	cmp	r0, #0
    6000:	d0c2      	beq.n	5f88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6002:	aa96      	add	r2, sp, #600	; 0x258
    6004:	a848      	add	r0, sp, #288	; 0x120
    6006:	f000 fe67 	bl	6cd8 <ExFatFile::rename(ExFatFile*, char const*)>
    600a:	4680      	mov	r8, r0
    600c:	2800      	cmp	r0, #0
    600e:	f47f af71 	bne.w	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6012:	e7b9      	b.n	5f88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6014:	f240 2036 	movw	r0, #566	; 0x236
    6018:	f7fe fc8e 	bl	4938 <dbgPrint(unsigned short)>
    601c:	e7bd      	b.n	5f9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    601e:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6022:	2900      	cmp	r1, #0
    6024:	f43f af64 	beq.w	5ef0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    6028:	9354      	str	r3, [sp, #336]	; 0x150
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    602a:	aa56      	add	r2, sp, #344	; 0x158
    602c:	2301      	movs	r3, #1
    602e:	a848      	add	r0, sp, #288	; 0x120
    6030:	f000 fc40 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6034:	2800      	cmp	r0, #0
    6036:	f43f af5d 	beq.w	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    603a:	a848      	add	r0, sp, #288	; 0x120
    603c:	f000 fc9e 	bl	697c <ExFatFile::remove()>
    6040:	e758      	b.n	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6042:	aa96      	add	r2, sp, #600	; 0x258
    6044:	a848      	add	r0, sp, #288	; 0x120
    6046:	f002 f843 	bl	80d0 <FatFile::rename(FatFile*, char const*)>
    604a:	4680      	mov	r8, r0
    604c:	2800      	cmp	r0, #0
    604e:	f47f af51 	bne.w	5ef4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6052:	e799      	b.n	5f88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6054:	20008a54 	.word	0x20008a54

00006058 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6058:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    605a:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    605e:	b084      	sub	sp, #16
    6060:	468c      	mov	ip, r1
    6062:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    6064:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6066:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    6068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    606c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    6070:	ea4f 124c 	mov.w	r2, ip, lsl #5
    6074:	4629      	mov	r1, r5
    6076:	6a20      	ldr	r0, [r4, #32]
    6078:	f001 fa88 	bl	758c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    607c:	2801      	cmp	r0, #1
    607e:	d106      	bne.n	608e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    6080:	4632      	mov	r2, r6
    6082:	4629      	mov	r1, r5
    6084:	6a20      	ldr	r0, [r4, #32]
    6086:	f001 fa65 	bl	7554 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    608a:	b004      	add	sp, #16
    608c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    608e:	2000      	movs	r0, #0
}
    6090:	b004      	add	sp, #16
    6092:	bd70      	pop	{r4, r5, r6, pc}

00006094 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    6094:	b510      	push	{r4, lr}
    6096:	4604      	mov	r4, r0
  bool rtn = sync();
    6098:	f000 fd96 	bl	6bc8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    609c:	2300      	movs	r3, #0
    609e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    60a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    60a6:	bd10      	pop	{r4, pc}

000060a8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    60a8:	b538      	push	{r3, r4, r5, lr}
    60aa:	460d      	mov	r5, r1
  if (isOpen()) {
    60ac:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    60b0:	b109      	cbz	r1, 60b6 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    60b2:	2000      	movs	r0, #0
}
    60b4:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    60b6:	2238      	movs	r2, #56	; 0x38
    60b8:	4604      	mov	r4, r0
    60ba:	f00a fd99 	bl	10bf0 <memset>
  m_flags = FILE_FLAG_READ;
    60be:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    60c0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    60c2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    60c4:	4618      	mov	r0, r3
    60c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    60ca:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    60ce:	bd38      	pop	{r3, r4, r5, pc}

000060d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    60d0:	b4f0      	push	{r4, r5, r6, r7}
    60d2:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    60d4:	7809      	ldrb	r1, [r1, #0]
    60d6:	2920      	cmp	r1, #32
    60d8:	d103      	bne.n	60e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    60da:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    60de:	2c20      	cmp	r4, #32
    60e0:	d0fb      	beq.n	60da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    60e2:	6015      	str	r5, [r2, #0]
  fname->end = path;
    60e4:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    60e6:	782c      	ldrb	r4, [r5, #0]
    60e8:	2c2f      	cmp	r4, #47	; 0x2f
    60ea:	d011      	beq.n	6110 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    60ec:	b184      	cbz	r4, 6110 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    60ee:	1c6e      	adds	r6, r5, #1
    60f0:	2c3c      	cmp	r4, #60	; 0x3c
    60f2:	4f1d      	ldr	r7, [pc, #116]	; (6168 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    60f4:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    60f6:	d82a      	bhi.n	614e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    60f8:	2c21      	cmp	r4, #33	; 0x21
    60fa:	d812      	bhi.n	6122 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    60fc:	f104 3cff 	add.w	ip, r4, #4294967295
    6100:	f1bc 0f1e 	cmp.w	ip, #30
    6104:	d816      	bhi.n	6134 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    6106:	2000      	movs	r0, #0
    6108:	bcf0      	pop	{r4, r5, r6, r7}
    610a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    610c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    6110:	2c20      	cmp	r4, #32
    6112:	d0fb      	beq.n	610c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    6114:	2c2f      	cmp	r4, #47	; 0x2f
    6116:	d0f9      	beq.n	610c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    6118:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    611a:	4611      	mov	r1, r2
}
    611c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    611e:	f001 b907 	b.w	7330 <ExFatFile::hashName(ExName_t*)>
    6122:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    6126:	fa5f fc8c 	uxtb.w	ip, ip
    612a:	fa27 fc0c 	lsr.w	ip, r7, ip
    612e:	f01c 0f01 	tst.w	ip, #1
    6132:	d1e8      	bne.n	6106 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    6134:	2c2e      	cmp	r4, #46	; 0x2e
    6136:	d001      	beq.n	613c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6138:	2c20      	cmp	r4, #32
    613a:	d10d      	bne.n	6158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    613c:	f816 4b01 	ldrb.w	r4, [r6], #1
    6140:	2c00      	cmp	r4, #0
    6142:	d0e5      	beq.n	6110 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6144:	2c2f      	cmp	r4, #47	; 0x2f
    6146:	d0e3      	beq.n	6110 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    6148:	2c3c      	cmp	r4, #60	; 0x3c
    614a:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    614c:	d9d4      	bls.n	60f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    614e:	2c5c      	cmp	r4, #92	; 0x5c
    6150:	d0d9      	beq.n	6106 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    6152:	d903      	bls.n	615c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    6154:	2c7c      	cmp	r4, #124	; 0x7c
    6156:	d0d6      	beq.n	6106 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    6158:	6096      	str	r6, [r2, #8]
    615a:	e7ef      	b.n	613c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    615c:	3c3e      	subs	r4, #62	; 0x3e
    615e:	2c01      	cmp	r4, #1
    6160:	d8fa      	bhi.n	6158 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    6162:	2000      	movs	r0, #0
    6164:	bcf0      	pop	{r4, r5, r6, r7}
    6166:	4770      	bx	lr
    6168:	05002101 	.word	0x05002101

0000616c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    616c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6170:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6174:	b083      	sub	sp, #12
    6176:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    6178:	07dc      	lsls	r4, r3, #31
    617a:	d574      	bpl.n	6266 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    617c:	0658      	lsls	r0, r3, #25
    617e:	460f      	mov	r7, r1
    6180:	4690      	mov	r8, r2
    6182:	f140 80b0 	bpl.w	62e6 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    6186:	e9d5 2300 	ldrd	r2, r3, [r5]
    618a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    618e:	eb18 0402 	adds.w	r4, r8, r2
    6192:	f143 0300 	adc.w	r3, r3, #0
    6196:	42a1      	cmp	r1, r4
    6198:	eb70 0303 	sbcs.w	r3, r0, r3
    619c:	f0c0 80a9 	bcc.w	62f2 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    61a0:	f1b8 0f00 	cmp.w	r8, #0
    61a4:	d05b      	beq.n	625e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    61a6:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    61a8:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    61ac:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    61b0:	f8d5 a020 	ldr.w	sl, [r5, #32]
    61b4:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    61b8:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    61ba:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    61be:	2c00      	cmp	r4, #0
    61c0:	d170      	bne.n	62a4 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    61c2:	4313      	orrs	r3, r2
    61c4:	d170      	bne.n	62a8 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    61c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    61ca:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    61cc:	bf4c      	ite	mi
    61ce:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    61d2:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    61d4:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    61d6:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    61da:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    61dc:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    61e0:	0a63      	lsrs	r3, r4, #9
    61e2:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    61e4:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    61e8:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    61ea:	f1bb 0f00 	cmp.w	fp, #0
    61ee:	d145      	bne.n	627c <ExFatFile::read(void*, unsigned int)+0x110>
    61f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    61f4:	d342      	bcc.n	627c <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    61f6:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    61fa:	4291      	cmp	r1, r2
    61fc:	d03e      	beq.n	627c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    61fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    6202:	d358      	bcc.n	62b6 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6204:	f04f 0b01 	mov.w	fp, #1
    6208:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    620c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6210:	0a73      	lsrs	r3, r6, #9
    6212:	459b      	cmp	fp, r3
    6214:	bf28      	it	cs
    6216:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    6218:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    621a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    621e:	d80a      	bhi.n	6236 <ExFatFile::read(void*, unsigned int)+0xca>
    6220:	eb01 030b 	add.w	r3, r1, fp
    6224:	429a      	cmp	r2, r3
    6226:	d206      	bcs.n	6236 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    6228:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    622c:	9101      	str	r1, [sp, #4]
    622e:	f005 fda3 	bl	bd78 <FsCache::sync()>
    6232:	9901      	ldr	r1, [sp, #4]
    6234:	b1b8      	cbz	r0, 6266 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    6236:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    623a:	465b      	mov	r3, fp
    623c:	6802      	ldr	r2, [r0, #0]
    623e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    6242:	463a      	mov	r2, r7
    6244:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6246:	b170      	cbz	r0, 6266 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6248:	4623      	mov	r3, r4
    dst += n;
    624a:	4427      	add	r7, r4
    m_curPosition += n;
    624c:	e9d5 1200 	ldrd	r1, r2, [r5]
    6250:	185b      	adds	r3, r3, r1
    6252:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    6256:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    6258:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    625c:	d1a8      	bne.n	61b0 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    625e:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6260:	b003      	add	sp, #12
    6262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    6266:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    626a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    626e:	f043 0302 	orr.w	r3, r3, #2
    6272:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    6276:	b003      	add	sp, #12
    6278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    627c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    6280:	2200      	movs	r2, #0
    6282:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    6286:	42b4      	cmp	r4, r6
    6288:	bf28      	it	cs
    628a:	4634      	movcs	r4, r6
    628c:	f005 fda0 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6290:	2800      	cmp	r0, #0
    6292:	d0e8      	beq.n	6266 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6294:	eb00 010b 	add.w	r1, r0, fp
    6298:	4622      	mov	r2, r4
    629a:	4638      	mov	r0, r7
    629c:	f006 fc1a 	bl	cad4 <memcpy>
    m_curPosition += n;
    62a0:	4623      	mov	r3, r4
    62a2:	e7d2      	b.n	624a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    62a4:	69aa      	ldr	r2, [r5, #24]
    62a6:	e796      	b.n	61d6 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    62a8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    62ac:	065b      	lsls	r3, r3, #25
    62ae:	d50e      	bpl.n	62ce <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    62b0:	69aa      	ldr	r2, [r5, #24]
    62b2:	3201      	adds	r2, #1
    62b4:	e78e      	b.n	61d4 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    62b6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    62ba:	463a      	mov	r2, r7
    62bc:	6803      	ldr	r3, [r0, #0]
    62be:	691b      	ldr	r3, [r3, #16]
    62c0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    62c2:	2800      	cmp	r0, #0
    62c4:	d0cf      	beq.n	6266 <ExFatFile::read(void*, unsigned int)+0xfa>
    62c6:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    62ca:	461c      	mov	r4, r3
    62cc:	e7bd      	b.n	624a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    62ce:	464a      	mov	r2, r9
    62d0:	4650      	mov	r0, sl
    62d2:	69a9      	ldr	r1, [r5, #24]
    62d4:	f001 f99c 	bl	7610 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    62d8:	2800      	cmp	r0, #0
    62da:	dbc4      	blt.n	6266 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    62dc:	d00c      	beq.n	62f8 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    62de:	f8d5 a020 	ldr.w	sl, [r5, #32]
    62e2:	69aa      	ldr	r2, [r5, #24]
    62e4:	e777      	b.n	61d6 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    62e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    62ea:	0719      	lsls	r1, r3, #28
    62ec:	f57f af58 	bpl.w	61a0 <ExFatFile::read(void*, unsigned int)+0x34>
    62f0:	e749      	b.n	6186 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    62f2:	eba1 0802 	sub.w	r8, r1, r2
    62f6:	e753      	b.n	61a0 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    62f8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    62fc:	f013 0f50 	tst.w	r3, #80	; 0x50
    6300:	d0b1      	beq.n	6266 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    6302:	eba8 0806 	sub.w	r8, r8, r6
    6306:	4640      	mov	r0, r8
    6308:	e7aa      	b.n	6260 <ExFatFile::read(void*, unsigned int)+0xf4>
    630a:	bf00      	nop

0000630c <ExFatFile::peek()>:
int ExFatFile::peek() {
    630c:	b5f0      	push	{r4, r5, r6, r7, lr}
    630e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6310:	2201      	movs	r2, #1
    6312:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6314:	6985      	ldr	r5, [r0, #24]
    6316:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    631a:	e9d0 6700 	ldrd	r6, r7, [r0]
    631e:	f7ff ff25 	bl	616c <ExFatFile::read(void*, unsigned int)>
    6322:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    6324:	61a5      	str	r5, [r4, #24]
    6326:	bf0c      	ite	eq
    6328:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    632c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    6330:	e9c4 6700 	strd	r6, r7, [r4]
}
    6334:	b003      	add	sp, #12
    6336:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006338 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    6338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    633c:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    633e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6342:	b083      	sub	sp, #12
    6344:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6346:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    634a:	2b00      	cmp	r3, #0
    634c:	d051      	beq.n	63f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    634e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6350:	e9d0 1c00 	ldrd	r1, ip, [r0]
    6354:	45bc      	cmp	ip, r7
    6356:	bf08      	it	eq
    6358:	4291      	cmpeq	r1, r2
    635a:	d05c      	beq.n	6416 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    635c:	ea56 0207 	orrs.w	r2, r6, r7
    6360:	d04d      	beq.n	63fe <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6362:	071d      	lsls	r5, r3, #28
    6364:	d504      	bpl.n	6370 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    6366:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    636a:	42b0      	cmp	r0, r6
    636c:	41ba      	sbcs	r2, r7
    636e:	d340      	bcc.n	63f2 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    6370:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    6374:	1e75      	subs	r5, r6, #1
    6376:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    637a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    637c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6380:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    6384:	3209      	adds	r2, #9
    6386:	b2d2      	uxtb	r2, r2
    6388:	f1c2 0e20 	rsb	lr, r2, #32
    638c:	40d5      	lsrs	r5, r2
    638e:	f1a2 0920 	sub.w	r9, r2, #32
    6392:	fa00 fb0e 	lsl.w	fp, r0, lr
    6396:	fa20 f009 	lsr.w	r0, r0, r9
    639a:	ea45 050b 	orr.w	r5, r5, fp
    639e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    63a0:	9801      	ldr	r0, [sp, #4]
    63a2:	0640      	lsls	r0, r0, #25
    63a4:	d433      	bmi.n	640e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    63a6:	1e48      	subs	r0, r1, #1
    63a8:	fa20 f202 	lsr.w	r2, r0, r2
    63ac:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    63b0:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    63b4:	fa00 fe0e 	lsl.w	lr, r0, lr
    63b8:	fa20 f009 	lsr.w	r0, r0, r9
    63bc:	ea42 020e 	orr.w	r2, r2, lr
    63c0:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    63c4:	d001      	beq.n	63ca <ExFatFile::seekSet(unsigned long long)+0x92>
    63c6:	4295      	cmp	r5, r2
    63c8:	d229      	bcs.n	641e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    63ca:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    63cc:	bf4c      	ite	mi
    63ce:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    63d2:	69e3      	ldrpl	r3, [r4, #28]
    63d4:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    63d6:	f104 0918 	add.w	r9, r4, #24
    63da:	e006      	b.n	63ea <ExFatFile::seekSet(unsigned long long)+0xb2>
    63dc:	69a1      	ldr	r1, [r4, #24]
    63de:	3d01      	subs	r5, #1
    63e0:	6a20      	ldr	r0, [r4, #32]
    63e2:	f001 f915 	bl	7610 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    63e6:	2800      	cmp	r0, #0
    63e8:	dd03      	ble.n	63f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    63ea:	464a      	mov	r2, r9
  while (nNew--) {
    63ec:	2d00      	cmp	r5, #0
    63ee:	d1f5      	bne.n	63dc <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    63f0:	e007      	b.n	6402 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    63f2:	2000      	movs	r0, #0
  m_curCluster = tmp;
    63f4:	f8c4 8018 	str.w	r8, [r4, #24]
}
    63f8:	b003      	add	sp, #12
    63fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    63fe:	2300      	movs	r3, #0
    6400:	6183      	str	r3, [r0, #24]
  return true;
    6402:	2001      	movs	r0, #1
  m_curPosition = pos;
    6404:	e9c4 6700 	strd	r6, r7, [r4]
}
    6408:	b003      	add	sp, #12
    640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    640e:	69e3      	ldr	r3, [r4, #28]
    6410:	442b      	add	r3, r5
    6412:	61a3      	str	r3, [r4, #24]
    goto done;
    6414:	e7f5      	b.n	6402 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    6416:	2001      	movs	r0, #1
}
    6418:	b003      	add	sp, #12
    641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    641e:	1aad      	subs	r5, r5, r2
    6420:	e7d9      	b.n	63d6 <ExFatFile::seekSet(unsigned long long)+0x9e>
    6422:	bf00      	nop

00006424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    6424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6428:	4617      	mov	r7, r2
    642a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    642e:	b08f      	sub	sp, #60	; 0x3c
    6430:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    6432:	2a00      	cmp	r2, #0
    6434:	f040 80d7 	bne.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    6438:	468b      	mov	fp, r1
    643a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    643e:	f011 0f50 	tst.w	r1, #80	; 0x50
    6442:	f000 80d0 	beq.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    6446:	f003 0103 	and.w	r1, r3, #3
    644a:	469a      	mov	sl, r3
    644c:	2903      	cmp	r1, #3
    644e:	f000 80ca 	beq.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    6452:	3101      	adds	r1, #1
    6454:	f003 0008 	and.w	r0, r3, #8
    6458:	ea41 0300 	orr.w	r3, r1, r0
    645c:	9302      	str	r3, [sp, #8]
  if (fname) {
    645e:	2f00      	cmp	r7, #0
    6460:	f000 80cb 	beq.w	65fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    6464:	6939      	ldr	r1, [r7, #16]
    6466:	f101 080e 	add.w	r8, r1, #14
    646a:	49b6      	ldr	r1, [pc, #728]	; (6744 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    646c:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    6470:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    6474:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    6478:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    647a:	f108 0802 	add.w	r8, r8, #2
    647e:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    6482:	d005      	beq.n	6490 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    6484:	2000      	movs	r0, #0
    6486:	2100      	movs	r1, #0
    m_curCluster = 0;
    6488:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    648c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    6490:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6492:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    6494:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    649a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    649c:	2220      	movs	r2, #32
    649e:	a906      	add	r1, sp, #24
    64a0:	4658      	mov	r0, fp
    64a2:	f7ff fe63 	bl	616c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    64a6:	b300      	cbz	r0, 64ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    64a8:	2820      	cmp	r0, #32
    64aa:	f040 809c 	bne.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    64ae:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    64b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    64b6:	2a00      	cmp	r2, #0
    64b8:	f2c0 80a2 	blt.w	6600 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    64bc:	b934      	cbnz	r4, 64cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    64be:	f8db 2000 	ldr.w	r2, [fp]
    64c2:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    64c6:	f8db 2018 	ldr.w	r2, [fp, #24]
    64ca:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    64cc:	4544      	cmp	r4, r8
    64ce:	d201      	bcs.n	64d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    64d0:	3401      	adds	r4, #1
    64d2:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    64d4:	2b00      	cmp	r3, #0
    64d6:	f000 8113 	beq.w	6700 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    64da:	2220      	movs	r2, #32
    64dc:	a906      	add	r1, sp, #24
    64de:	4658      	mov	r0, fp
      inSet = false;
    64e0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    64e2:	f7ff fe43 	bl	616c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    64e6:	2800      	cmp	r0, #0
    64e8:	d1de      	bne.n	64a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    64ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
    64ee:	d07a      	beq.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    64f0:	9b02      	ldr	r3, [sp, #8]
    64f2:	079b      	lsls	r3, r3, #30
    64f4:	d577      	bpl.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    64f6:	2f00      	cmp	r7, #0
    64f8:	d075      	beq.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    64fa:	4544      	cmp	r4, r8
    64fc:	d217      	bcs.n	652e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    64fe:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    6502:	2220      	movs	r2, #32
    6504:	a906      	add	r1, sp, #24
    6506:	4658      	mov	r0, fp
    6508:	f7ff fe30 	bl	616c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    650c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    650e:	2800      	cmp	r0, #0
    6510:	d061      	beq.n	65d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    6512:	2820      	cmp	r0, #32
    6514:	d167      	bne.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    6516:	b92c      	cbnz	r4, 6524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    6518:	f8db 2000 	ldr.w	r2, [fp]
    651c:	f8db a018 	ldr.w	sl, [fp, #24]
    6520:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    6524:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    6526:	45a0      	cmp	r8, r4
    6528:	d8eb      	bhi.n	6502 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    652a:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    652e:	2238      	movs	r2, #56	; 0x38
    6530:	2100      	movs	r1, #0
    6532:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6534:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    6538:	f00a fb5a 	bl	10bf0 <memset>
  ExFatVolume* volume() const {return m_vol;}
    653c:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    6540:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    6544:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    6546:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    6548:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    654a:	2600      	movs	r6, #0
  m_dirPos = freePos;
    654c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    6550:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    6554:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    6556:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    655a:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    655c:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    655e:	f1b8 0f00 	cmp.w	r8, #0
    6562:	d033      	beq.n	65cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    6564:	f108 39ff 	add.w	r9, r8, #4294967295
    6568:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    656a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 6748 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    656e:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    6572:	2201      	movs	r2, #1
    6574:	4659      	mov	r1, fp
    6576:	4628      	mov	r0, r5
    6578:	f7ff fd6e 	bl	6058 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    657c:	4604      	mov	r4, r0
    657e:	b390      	cbz	r0, 65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    6580:	f990 2000 	ldrsb.w	r2, [r0]
    6584:	2a00      	cmp	r2, #0
    6586:	db2e      	blt.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    6588:	2220      	movs	r2, #32
    658a:	2100      	movs	r1, #0
    658c:	f00a fb30 	bl	10bf0 <memset>
    if (i == 0) {
    6590:	2e00      	cmp	r6, #0
    6592:	f000 80bc 	beq.w	670e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    6596:	f1bb 0f01 	cmp.w	fp, #1
    659a:	f000 80d7 	beq.w	674c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    659e:	23c1      	movs	r3, #193	; 0xc1
    65a0:	46a3      	mov	fp, r4
    65a2:	341e      	adds	r4, #30
    65a4:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    65a8:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    65aa:	4638      	mov	r0, r7
    65ac:	b91b      	cbnz	r3, 65b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    65ae:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    65b2:	429a      	cmp	r2, r3
    65b4:	d005      	beq.n	65c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    65b6:	f005 fc33 	bl	be20 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    65ba:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    65be:	45a3      	cmp	fp, r4
    65c0:	d1f2      	bne.n	65a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    65c2:	3601      	adds	r6, #1
    65c4:	fa5f fb86 	uxtb.w	fp, r6
    65c8:	45d8      	cmp	r8, fp
    65ca:	d8d2      	bhi.n	6572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    65cc:	4628      	mov	r0, r5
    65ce:	f000 fafb 	bl	6bc8 <ExFatFile::sync()>
    65d2:	4606      	mov	r6, r0
    65d4:	e00d      	b.n	65f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    65d6:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    65d8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    65dc:	f000 fb24 	bl	6c28 <ExFatFile::addDirCluster()>
    65e0:	2800      	cmp	r0, #0
    65e2:	f040 8091 	bne.w	6708 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    65e6:	2300      	movs	r3, #0
  return false;
    65e8:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    65ea:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    65ee:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    65f2:	4630      	mov	r0, r6
    65f4:	b00f      	add	sp, #60	; 0x3c
    65f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    65fa:	f04f 0803 	mov.w	r8, #3
    65fe:	e747      	b.n	6490 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    6600:	bb56      	cbnz	r6, 6658 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    6602:	4544      	cmp	r4, r8
    6604:	bf38      	it	cc
    6606:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    6608:	2b85      	cmp	r3, #133	; 0x85
    660a:	f47f af47 	bne.w	649c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    660e:	4631      	mov	r1, r6
    6610:	2238      	movs	r2, #56	; 0x38
    6612:	4628      	mov	r0, r5
      inSet = true;
    6614:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    6616:	f00a faeb 	bl	10bf0 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    661a:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    661e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    6622:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    6626:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    662a:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    662c:	bf58      	it	pl
    662e:	f043 0308 	orrpl.w	r3, r3, #8
    6632:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    6636:	f8db 3000 	ldr.w	r3, [fp]
    663a:	f8db 2020 	ldr.w	r2, [fp, #32]
    663e:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    6640:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    6642:	f8db 2018 	ldr.w	r2, [fp, #24]
    6646:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    664a:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    664e:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    6652:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    6656:	e721      	b.n	649c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6658:	2bc0      	cmp	r3, #192	; 0xc0
    665a:	d028      	beq.n	66ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    665c:	2bc1      	cmp	r3, #193	; 0xc1
    665e:	f47f af3c 	bne.w	64da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    6662:	463a      	mov	r2, r7
    6664:	a906      	add	r1, sp, #24
    6666:	4628      	mov	r0, r5
    6668:	f000 fdd6 	bl	7218 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    666c:	b1e8      	cbz	r0, 66aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    666e:	89bb      	ldrh	r3, [r7, #12]
    6670:	b9db      	cbnz	r3, 66aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    6672:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    6676:	429a      	cmp	r2, r3
    6678:	d117      	bne.n	66aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    667a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    667e:	d1b2      	bne.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    6680:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    6684:	d170      	bne.n	6768 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    6686:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    668a:	0798      	lsls	r0, r3, #30
    668c:	d46c      	bmi.n	6768 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    668e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    6692:	d1a8      	bne.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6694:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    6698:	d0ab      	beq.n	65f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    669a:	4628      	mov	r0, r5
    669c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    66a0:	f7ff fe4a 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    66a4:	2800      	cmp	r0, #0
    66a6:	d1a4      	bne.n	65f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    66a8:	e79d      	b.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    66aa:	4606      	mov	r6, r0
    66ac:	e6f6      	b.n	649c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    66ae:	9b02      	ldr	r3, [sp, #8]
    66b0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    66b4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    66b8:	079b      	lsls	r3, r3, #30
    66ba:	d502      	bpl.n	66c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    66bc:	9b03      	ldr	r3, [sp, #12]
    66be:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    66c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    66c4:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    66c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    66ca:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    66ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    66d2:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    66d6:	2f00      	cmp	r7, #0
    66d8:	d0cf      	beq.n	667a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    66da:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    66de:	693a      	ldr	r2, [r7, #16]
    66e0:	81bb      	strh	r3, [r7, #12]
    next = begin;
    66e2:	683b      	ldr	r3, [r7, #0]
    66e4:	607b      	str	r3, [r7, #4]
    66e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    66ea:	429a      	cmp	r2, r3
    66ec:	f47f aef5 	bne.w	64da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    66f0:	8abe      	ldrh	r6, [r7, #20]
    66f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    66f6:	1af6      	subs	r6, r6, r3
    66f8:	fab6 f686 	clz	r6, r6
    66fc:	0976      	lsrs	r6, r6, #5
    66fe:	e6cd      	b.n	649c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    6700:	2f00      	cmp	r7, #0
    6702:	f47f aef2 	bne.w	64ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    6706:	e76e      	b.n	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    6708:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    670c:	e70b      	b.n	6526 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    670e:	2385      	movs	r3, #133	; 0x85
    6710:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    6712:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    6716:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    671a:	f8da 3000 	ldr.w	r3, [sl]
    671e:	2b00      	cmp	r3, #0
    6720:	d046      	beq.n	67b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    6722:	f10d 0213 	add.w	r2, sp, #19
    6726:	f10d 0116 	add.w	r1, sp, #22
    672a:	a805      	add	r0, sp, #20
    672c:	4798      	blx	r3
    672e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    6732:	8163      	strh	r3, [r4, #10]
    6734:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6738:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    673a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    673e:	7523      	strb	r3, [r4, #20]
    6740:	e73f      	b.n	65c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    6742:	bf00      	nop
    6744:	88888889 	.word	0x88888889
    6748:	200422dc 	.word	0x200422dc
      dirStream->type = EXFAT_TYPE_STREAM;
    674c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    674e:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    6752:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6754:	9b02      	ldr	r3, [sp, #8]
    6756:	f063 037f 	orn	r3, r3, #127	; 0x7f
    675a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    675e:	693b      	ldr	r3, [r7, #16]
    6760:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    6762:	8abb      	ldrh	r3, [r7, #20]
    6764:	80a3      	strh	r3, [r4, #4]
}
    6766:	e72c      	b.n	65c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6768:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    676c:	06d9      	lsls	r1, r3, #27
    676e:	f53f af3a 	bmi.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    6772:	f013 0101 	ands.w	r1, r3, #1
    6776:	f47f af36 	bne.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    677a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    677e:	d089      	beq.n	6694 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    6780:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    6784:	0792      	lsls	r2, r2, #30
    6786:	f57f af2e 	bpl.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    678a:	2b00      	cmp	r3, #0
    678c:	f43f af2b 	beq.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    6790:	e9d5 3200 	ldrd	r3, r2, [r5]
    6794:	4313      	orrs	r3, r2
    6796:	d004      	beq.n	67a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    6798:	2200      	movs	r2, #0
    679a:	2300      	movs	r3, #0
    m_curCluster = 0;
    679c:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    679e:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    67a2:	4628      	mov	r0, r5
    67a4:	f000 fb86 	bl	6eb4 <ExFatFile::truncate()>
    67a8:	2800      	cmp	r0, #0
    67aa:	f43f af1c 	beq.w	65e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    67ae:	e720      	b.n	65f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    67b0:	f645 0321 	movw	r3, #22561	; 0x5821
    67b4:	8163      	strh	r3, [r4, #10]
    67b6:	81e3      	strh	r3, [r4, #14]
    67b8:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    67ba:	e702      	b.n	65c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

000067bc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    67bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    67c0:	2500      	movs	r5, #0
    67c2:	b097      	sub	sp, #92	; 0x5c
    67c4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    67c6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    67ca:	9201      	str	r2, [sp, #4]
    67cc:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    67ce:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    67d2:	2b00      	cmp	r3, #0
    67d4:	d13e      	bne.n	6854 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    67d6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    67da:	460f      	mov	r7, r1
    67dc:	f013 0f50 	tst.w	r3, #80	; 0x50
    67e0:	d038      	beq.n	6854 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    67e2:	7813      	ldrb	r3, [r2, #0]
    67e4:	4604      	mov	r4, r0
    67e6:	4616      	mov	r6, r2
    67e8:	2b2f      	cmp	r3, #47	; 0x2f
    67ea:	d037      	beq.n	685c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    67ec:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    67f0:	ab01      	add	r3, sp, #4
    67f2:	aa02      	add	r2, sp, #8
    67f4:	4631      	mov	r1, r6
    67f6:	4620      	mov	r0, r4
    67f8:	f7ff fc6a 	bl	60d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    67fc:	b350      	cbz	r0, 6854 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    67fe:	9e01      	ldr	r6, [sp, #4]
    6800:	7833      	ldrb	r3, [r6, #0]
    6802:	2b00      	cmp	r3, #0
    6804:	d03e      	beq.n	6884 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6806:	2300      	movs	r3, #0
    6808:	aa02      	add	r2, sp, #8
    680a:	4639      	mov	r1, r7
    680c:	4620      	mov	r0, r4
    680e:	f7ff fe09 	bl	6424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6812:	b1f8      	cbz	r0, 6854 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    6814:	46a4      	mov	ip, r4
    6816:	ad08      	add	r5, sp, #32
    6818:	f104 0730 	add.w	r7, r4, #48	; 0x30
    681c:	f8dc 0000 	ldr.w	r0, [ip]
    6820:	f10c 0c10 	add.w	ip, ip, #16
    6824:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6828:	46ae      	mov	lr, r5
    682a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    682e:	3510      	adds	r5, #16
    6830:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6834:	45bc      	cmp	ip, r7
    6836:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    683a:	d1ef      	bne.n	681c <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    683c:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    6840:	af08      	add	r7, sp, #32
    tmpDir = *this;
    6842:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    6844:	4620      	mov	r0, r4
    6846:	f000 f9bf 	bl	6bc8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    684a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    684e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    6852:	e7cd      	b.n	67f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    6854:	2000      	movs	r0, #0
}
    6856:	b017      	add	sp, #92	; 0x5c
    6858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    685c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    6860:	292f      	cmp	r1, #47	; 0x2f
    6862:	d0fb      	beq.n	685c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    6864:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    6866:	b9b1      	cbnz	r1, 6896 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    6868:	2238      	movs	r2, #56	; 0x38
    686a:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    686c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    686e:	f00a f9bf 	bl	10bf0 <memset>
  m_flags = FILE_FLAG_READ;
    6872:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    6874:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    6876:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    6878:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    687a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    687e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    6882:	e7e8      	b.n	6856 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    6884:	464b      	mov	r3, r9
    6886:	aa02      	add	r2, sp, #8
    6888:	4639      	mov	r1, r7
    688a:	4620      	mov	r0, r4
    688c:	f7ff fdca 	bl	6424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    6890:	b017      	add	sp, #92	; 0x5c
    6892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    6896:	2238      	movs	r2, #56	; 0x38
    6898:	2100      	movs	r1, #0
    689a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    689c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    689e:	f00a f9a7 	bl	10bf0 <memset>
  m_flags = FILE_FLAG_READ;
    68a2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    68a4:	af08      	add	r7, sp, #32
  m_vol = vol;
    68a6:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    68a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    68ac:	2340      	movs	r3, #64	; 0x40
    68ae:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    68b2:	e79b      	b.n	67ec <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

000068b4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    68b4:	b119      	cbz	r1, 68be <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    68b6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    68ba:	f7ff bf7f 	b.w	67bc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    68be:	4608      	mov	r0, r1
    68c0:	4770      	bx	lr
    68c2:	bf00      	nop

000068c4 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    68c4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    68c8:	b963      	cbnz	r3, 68e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    68ca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    68ce:	f013 0f50 	tst.w	r3, #80	; 0x50
    68d2:	d007      	beq.n	68e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    68d4:	680b      	ldr	r3, [r1, #0]
    68d6:	f013 0c1f 	ands.w	ip, r3, #31
    68da:	d103      	bne.n	68e4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    68dc:	4613      	mov	r3, r2
    68de:	4662      	mov	r2, ip
    68e0:	f7ff bda0 	b.w	6424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    68e4:	2000      	movs	r0, #0
    68e6:	4770      	bx	lr

000068e8 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    68e8:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    68ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68ec:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    68ee:	6a00      	ldr	r0, [r0, #32]
    68f0:	b101      	cbz	r1, 68f4 <ExFatFile::addCluster()+0xc>
    68f2:	3101      	adds	r1, #1
    68f4:	2201      	movs	r2, #1
    68f6:	f000 fd51 	bl	739c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    68fa:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    68fc:	4605      	mov	r5, r0
  if (find < 2) {
    68fe:	d932      	bls.n	6966 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6900:	2301      	movs	r3, #1
    6902:	4601      	mov	r1, r0
    6904:	6a20      	ldr	r0, [r4, #32]
    6906:	461a      	mov	r2, r3
    6908:	f000 fda8 	bl	745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    690c:	4606      	mov	r6, r0
    690e:	b350      	cbz	r0, 6966 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6910:	69a3      	ldr	r3, [r4, #24]
    6912:	b35b      	cbz	r3, 696c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6914:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6918:	0651      	lsls	r1, r2, #25
    691a:	d512      	bpl.n	6942 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    691c:	1c59      	adds	r1, r3, #1
    691e:	42a9      	cmp	r1, r5
    6920:	d018      	beq.n	6954 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6922:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6926:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6928:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    692c:	e005      	b.n	693a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    692e:	6a20      	ldr	r0, [r4, #32]
    6930:	f000 fe90 	bl	7654 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6934:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    6936:	b1b0      	cbz	r0, 6966 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6938:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    693a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    693c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    693e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6940:	d3f5      	bcc.n	692e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6942:	f04f 32ff 	mov.w	r2, #4294967295
    6946:	4629      	mov	r1, r5
    6948:	6a20      	ldr	r0, [r4, #32]
    694a:	f000 fe83 	bl	7654 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    694e:	b150      	cbz	r0, 6966 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    6950:	69a1      	ldr	r1, [r4, #24]
    6952:	b911      	cbnz	r1, 695a <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    6954:	4630      	mov	r0, r6
  m_curCluster = find;
    6956:	61a5      	str	r5, [r4, #24]
}
    6958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    695a:	462a      	mov	r2, r5
    695c:	6a20      	ldr	r0, [r4, #32]
    695e:	f000 fe79 	bl	7654 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6962:	2800      	cmp	r0, #0
    6964:	d1f6      	bne.n	6954 <ExFatFile::addCluster()+0x6c>
  return false;
    6966:	2600      	movs	r6, #0
}
    6968:	4630      	mov	r0, r6
    696a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    696c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6974:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    6978:	e7ec      	b.n	6954 <ExFatFile::addCluster()+0x6c>
    697a:	bf00      	nop

0000697c <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    697c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    6980:	079a      	lsls	r2, r3, #30
    6982:	d536      	bpl.n	69f2 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    6984:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    6986:	b570      	push	{r4, r5, r6, lr}
    6988:	4605      	mov	r5, r0
  if (m_firstCluster) {
    698a:	b9a1      	cbnz	r1, 69b6 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    698c:	2400      	movs	r4, #0
    698e:	4621      	mov	r1, r4
    6990:	e007      	b.n	69a2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    6992:	7803      	ldrb	r3, [r0, #0]
    6994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6998:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    699a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    699e:	428b      	cmp	r3, r1
    69a0:	d329      	bcc.n	69f6 <ExFatFile::remove()+0x7a>
    69a2:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    69a4:	2201      	movs	r2, #1
    69a6:	4628      	mov	r0, r5
    69a8:	f7ff fb56 	bl	6058 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    69ac:	b2e1      	uxtb	r1, r4
    if (!cache) {
    69ae:	2800      	cmp	r0, #0
    69b0:	d1ef      	bne.n	6992 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    69b2:	2000      	movs	r0, #0
    69b4:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    69b6:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    69b8:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    69ba:	d534      	bpl.n	6a26 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    69bc:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    69c0:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    69c4:	3309      	adds	r3, #9
    69c6:	3a01      	subs	r2, #1
    69c8:	b2db      	uxtb	r3, r3
    69ca:	f144 34ff 	adc.w	r4, r4, #4294967295
    69ce:	f1c3 0c20 	rsb	ip, r3, #32
    69d2:	40da      	lsrs	r2, r3
    69d4:	3b20      	subs	r3, #32
    69d6:	fa04 fc0c 	lsl.w	ip, r4, ip
    69da:	fa24 f303 	lsr.w	r3, r4, r3
    69de:	ea42 020c 	orr.w	r2, r2, ip
    69e2:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    69e4:	2300      	movs	r3, #0
    69e6:	3201      	adds	r2, #1
    69e8:	f000 fd38 	bl	745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    69ec:	2800      	cmp	r0, #0
    69ee:	d1cd      	bne.n	698c <ExFatFile::remove()+0x10>
    69f0:	e7df      	b.n	69b2 <ExFatFile::remove()+0x36>
}
    69f2:	2000      	movs	r0, #0
    69f4:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    69f6:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    69f8:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    69fa:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    69fe:	4620      	mov	r0, r4
  m_flags = 0;
    6a00:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    6a04:	f005 f9b8 	bl	bd78 <FsCache::sync()>
    6a08:	2800      	cmp	r0, #0
    6a0a:	d0d2      	beq.n	69b2 <ExFatFile::remove()+0x36>
    6a0c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6a10:	f005 f9b2 	bl	bd78 <FsCache::sync()>
    6a14:	2800      	cmp	r0, #0
    6a16:	d0cc      	beq.n	69b2 <ExFatFile::remove()+0x36>
    6a18:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6a1c:	6803      	ldr	r3, [r0, #0]
}
    6a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6a22:	6a1b      	ldr	r3, [r3, #32]
    6a24:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    6a26:	f000 fe35 	bl	7694 <ExFatPartition::freeChain(unsigned long)>
    6a2a:	2800      	cmp	r0, #0
    6a2c:	d1ae      	bne.n	698c <ExFatFile::remove()+0x10>
    6a2e:	e7c0      	b.n	69b2 <ExFatFile::remove()+0x36>

00006a30 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6a30:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6a34:	06db      	lsls	r3, r3, #27
    6a36:	d401      	bmi.n	6a3c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6a38:	2000      	movs	r0, #0
}
    6a3a:	4770      	bx	lr
bool ExFatFile::rmdir() {
    6a3c:	b510      	push	{r4, lr}
    seekSet(0);
    6a3e:	2200      	movs	r2, #0
    6a40:	b088      	sub	sp, #32
    6a42:	2300      	movs	r3, #0
    6a44:	4604      	mov	r4, r0
    6a46:	f7ff fc77 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
  }
    6a4a:	e008      	b.n	6a5e <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6a4c:	2820      	cmp	r0, #32
    6a4e:	d11b      	bne.n	6a88 <ExFatFile::rmdir()+0x58>
    6a50:	f99d 3000 	ldrsb.w	r3, [sp]
    6a54:	f89d 2000 	ldrb.w	r2, [sp]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	db15      	blt.n	6a88 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    6a5c:	b132      	cbz	r2, 6a6c <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    6a5e:	2220      	movs	r2, #32
    6a60:	4669      	mov	r1, sp
    6a62:	4620      	mov	r0, r4
    6a64:	f7ff fb82 	bl	616c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6a68:	2800      	cmp	r0, #0
    6a6a:	d1ef      	bne.n	6a4c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    6a6c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    6a70:	2208      	movs	r2, #8
  return remove();
    6a72:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    6a74:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6a78:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6a7c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6a80:	f7ff ff7c 	bl	697c <ExFatFile::remove()>
}
    6a84:	b008      	add	sp, #32
    6a86:	bd10      	pop	{r4, pc}
  return false;
    6a88:	2000      	movs	r0, #0
}
    6a8a:	b008      	add	sp, #32
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	bf00      	nop

00006a90 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a94:	f04f 0800 	mov.w	r8, #0
    6a98:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6a9a:	4f4a      	ldr	r7, [pc, #296]	; (6bc4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    6a9c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    6a9e:	4644      	mov	r4, r8
    6aa0:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6aa2:	2200      	movs	r2, #0
    6aa4:	4630      	mov	r0, r6
    6aa6:	f7ff fad7 	bl	6058 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6aaa:	4605      	mov	r5, r0
    6aac:	b130      	cbz	r0, 6abc <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    6aae:	7801      	ldrb	r1, [r0, #0]
    6ab0:	29c0      	cmp	r1, #192	; 0xc0
    6ab2:	d069      	beq.n	6b88 <ExFatFile::syncDir()+0xf8>
    6ab4:	29c1      	cmp	r1, #193	; 0xc1
    6ab6:	d02b      	beq.n	6b10 <ExFatFile::syncDir()+0x80>
    6ab8:	2985      	cmp	r1, #133	; 0x85
    6aba:	d009      	beq.n	6ad0 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6abc:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    6ac0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6ac2:	f043 0301 	orr.w	r3, r3, #1
    6ac6:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    6aca:	b002      	add	sp, #8
    6acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6ad0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    6ad4:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6ad8:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6ada:	683b      	ldr	r3, [r7, #0]
    6adc:	b183      	cbz	r3, 6b00 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    6ade:	f10d 0203 	add.w	r2, sp, #3
    6ae2:	f10d 0106 	add.w	r1, sp, #6
    6ae6:	a801      	add	r0, sp, #4
    6ae8:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    6aea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6aee:	81ab      	strh	r3, [r5, #12]
    6af0:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    6af2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6af6:	81eb      	strh	r3, [r5, #14]
    6af8:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    6afa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6afe:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    6b00:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6b02:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6b06:	f043 0301 	orr.w	r3, r3, #1
    6b0a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6b0e:	7829      	ldrb	r1, [r5, #0]
    6b10:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b14:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6b16:	fab0 f080 	clz	r0, r0
    6b1a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b1c:	e001      	b.n	6b22 <ExFatFile::syncDir()+0x92>
    6b1e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6b20:	5ca9      	ldrb	r1, [r5, r2]
    6b22:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b24:	2a01      	cmp	r2, #1
    6b26:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6b2a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    6b2e:	fa11 f383 	uxtah	r3, r1, r3
    6b32:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b34:	d101      	bne.n	6b3a <ExFatFile::syncDir()+0xaa>
    6b36:	2800      	cmp	r0, #0
    6b38:	d1f1      	bne.n	6b1e <ExFatFile::syncDir()+0x8e>
    6b3a:	2a1f      	cmp	r2, #31
    6b3c:	d9f0      	bls.n	6b20 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6b3e:	f108 0801 	add.w	r8, r8, #1
    6b42:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    6b46:	fa5f f188 	uxtb.w	r1, r8
    6b4a:	428b      	cmp	r3, r1
    6b4c:	d2a9      	bcs.n	6aa2 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6b4e:	2201      	movs	r2, #1
    6b50:	f106 0124 	add.w	r1, r6, #36	; 0x24
    6b54:	6a30      	ldr	r0, [r6, #32]
    6b56:	f000 fcfd 	bl	7554 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6b5a:	2800      	cmp	r0, #0
    6b5c:	d0ae      	beq.n	6abc <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    6b5e:	6a35      	ldr	r5, [r6, #32]
    6b60:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6b62:	4628      	mov	r0, r5
    6b64:	f005 f908 	bl	bd78 <FsCache::sync()>
    6b68:	2800      	cmp	r0, #0
    6b6a:	d0a7      	beq.n	6abc <ExFatFile::syncDir()+0x2c>
    6b6c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    6b70:	f005 f902 	bl	bd78 <FsCache::sync()>
    6b74:	2800      	cmp	r0, #0
    6b76:	d0a1      	beq.n	6abc <ExFatFile::syncDir()+0x2c>
    6b78:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    6b7c:	6803      	ldr	r3, [r0, #0]
    6b7e:	6a1b      	ldr	r3, [r3, #32]
    6b80:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6b82:	2800      	cmp	r0, #0
    6b84:	d1a1      	bne.n	6aca <ExFatFile::syncDir()+0x3a>
    6b86:	e799      	b.n	6abc <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    6b88:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    6b8c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6b90:	7843      	ldrb	r3, [r0, #1]
    6b92:	bf14      	ite	ne
    6b94:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6b98:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    6b9c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6b9e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    6ba2:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6ba6:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    6baa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6bae:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6bb0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    6bb4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6bb8:	f043 0301 	orr.w	r3, r3, #1
    6bbc:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6bc0:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    6bc2:	e7a5      	b.n	6b10 <ExFatFile::syncDir()+0x80>
    6bc4:	200422dc 	.word	0x200422dc

00006bc8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6bc8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    6bca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6bce:	b343      	cbz	r3, 6c22 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6bd0:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    6bd4:	4604      	mov	r4, r0
    6bd6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6bda:	2a00      	cmp	r2, #0
    6bdc:	db0c      	blt.n	6bf8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    6bde:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6be0:	4628      	mov	r0, r5
    6be2:	f005 f8c9 	bl	bd78 <FsCache::sync()>
    6be6:	b978      	cbnz	r0, 6c08 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    6be8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6bec:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6bee:	f043 0301 	orr.w	r3, r3, #1
    6bf2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    6bf6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6bfc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    6c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    6c04:	f7ff bf44 	b.w	6a90 <ExFatFile::syncDir()>
    6c08:	f505 7004 	add.w	r0, r5, #528	; 0x210
    6c0c:	f005 f8b4 	bl	bd78 <FsCache::sync()>
    6c10:	2800      	cmp	r0, #0
    6c12:	d0e9      	beq.n	6be8 <ExFatFile::sync()+0x20>
    6c14:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    6c18:	6803      	ldr	r3, [r0, #0]
    6c1a:	6a1b      	ldr	r3, [r3, #32]
    6c1c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6c1e:	2800      	cmp	r0, #0
    6c20:	d0e2      	beq.n	6be8 <ExFatFile::sync()+0x20>
    return true;
    6c22:	2001      	movs	r0, #1
}
    6c24:	bd38      	pop	{r3, r4, r5, pc}
    6c26:	bf00      	nop

00006c28 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6c28:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6c2a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6c2e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6c30:	065a      	lsls	r2, r3, #25
    6c32:	d44c      	bmi.n	6cce <ExFatFile::addDirCluster()+0xa6>
    6c34:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6c36:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    6c38:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    6c3c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    6c3e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    6c42:	d301      	bcc.n	6c48 <ExFatFile::addDirCluster()+0x20>
}
    6c44:	2000      	movs	r0, #0
    6c46:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    6c48:	4628      	mov	r0, r5
    6c4a:	f7ff fe4d 	bl	68e8 <ExFatFile::addCluster()>
    6c4e:	2800      	cmp	r0, #0
    6c50:	d0f8      	beq.n	6c44 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    6c52:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6c54:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6c56:	69ae      	ldr	r6, [r5, #24]
    6c58:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6c5c:	3e02      	subs	r6, #2
    6c5e:	409e      	lsls	r6, r3
    6c60:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6c64:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    6c66:	1931      	adds	r1, r6, r4
    6c68:	2205      	movs	r2, #5
    6c6a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6c6e:	3401      	adds	r4, #1
    6c70:	f005 f8ae 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    6c74:	f44f 7200 	mov.w	r2, #512	; 0x200
    6c78:	2100      	movs	r1, #0
    if (!cache) {
    6c7a:	2800      	cmp	r0, #0
    6c7c:	d0e2      	beq.n	6c44 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    6c7e:	f009 ffb7 	bl	10bf0 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6c82:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6c84:	2301      	movs	r3, #1
    6c86:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    6c8a:	4093      	lsls	r3, r2
    6c8c:	429c      	cmp	r4, r3
    6c8e:	d3ea      	bcc.n	6c66 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    6c90:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6c94:	065b      	lsls	r3, r3, #25
    6c96:	d415      	bmi.n	6cc4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c98:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    6c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    6ca0:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6ca4:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6ca8:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    6cac:	189b      	adds	r3, r3, r2
    6cae:	f141 0000 	adc.w	r0, r1, #0
    6cb2:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    6cb4:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    6cb8:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    6cba:	189b      	adds	r3, r3, r2
    6cbc:	f141 0100 	adc.w	r1, r1, #0
    6cc0:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    6cc4:	4628      	mov	r0, r5
}
    6cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    6cca:	f7ff bf7d 	b.w	6bc8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6cce:	6a00      	ldr	r0, [r0, #32]
    6cd0:	f000 fde6 	bl	78a0 <ExFatPartition::rootLength()>
    6cd4:	e7af      	b.n	6c36 <ExFatFile::addDirCluster()+0xe>
    6cd6:	bf00      	nop

00006cd8 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6cd8:	b570      	push	{r4, r5, r6, lr}
    6cda:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    6cdc:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6ce0:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    6ce2:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    6ce4:	f010 0f18 	tst.w	r0, #24
    6ce8:	930c      	str	r3, [sp, #48]	; 0x30
    6cea:	931a      	str	r3, [sp, #104]	; 0x68
    6cec:	d003      	beq.n	6cf6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    6cee:	6a20      	ldr	r0, [r4, #32]
    6cf0:	6a0b      	ldr	r3, [r1, #32]
    6cf2:	4298      	cmp	r0, r3
    6cf4:	d002      	beq.n	6cfc <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    6cf6:	2000      	movs	r0, #0
}
    6cf8:	b01c      	add	sp, #112	; 0x70
    6cfa:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6cfc:	f640 2301 	movw	r3, #2561	; 0xa01
    6d00:	4668      	mov	r0, sp
    6d02:	f7ff fd5b 	bl	67bc <ExFatFile::open(ExFatFile*, char const*, int)>
    6d06:	2800      	cmp	r0, #0
    6d08:	d0f5      	beq.n	6cf6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    6d0a:	46a4      	mov	ip, r4
    6d0c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6d10:	ad0e      	add	r5, sp, #56	; 0x38
    6d12:	f8dc 0000 	ldr.w	r0, [ip]
    6d16:	f10c 0c10 	add.w	ip, ip, #16
    6d1a:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6d1e:	46ae      	mov	lr, r5
    6d20:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    6d24:	3510      	adds	r5, #16
    6d26:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6d2a:	45b4      	cmp	ip, r6
    6d2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6d30:	d1ef      	bne.n	6d12 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    6d32:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    6d36:	aa09      	add	r2, sp, #36	; 0x24
    6d38:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6d3c:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    6d3e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    6d42:	ca07      	ldmia	r2, {r0, r1, r2}
    6d44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6d48:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6d4c:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    6d4e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6d56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6d5a:	f7ff ff35 	bl	6bc8 <ExFatFile::sync()>
    6d5e:	2800      	cmp	r0, #0
    6d60:	d0c9      	beq.n	6cf6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    6d62:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    6d64:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    6d66:	2308      	movs	r3, #8
  return oldFile.remove();
    6d68:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    6d6a:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6d6c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6d70:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6d74:	f7ff fe02 	bl	697c <ExFatFile::remove()>
    6d78:	e7be      	b.n	6cf8 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    6d7a:	bf00      	nop

00006d7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6d7c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    6d7e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6d82:	f013 0f50 	tst.w	r3, #80	; 0x50
    6d86:	d102      	bne.n	6d8e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    6d88:	2500      	movs	r5, #0
}
    6d8a:	4628      	mov	r0, r5
    6d8c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6d8e:	f640 2302 	movw	r3, #2562	; 0xa02
    6d92:	4604      	mov	r4, r0
    6d94:	f7ff fb46 	bl	6424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6d98:	2800      	cmp	r0, #0
    6d9a:	d0f5      	beq.n	6d88 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    6d9c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    6d9e:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6da0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6da4:	f7ff ff40 	bl	6c28 <ExFatFile::addDirCluster()>
    6da8:	4605      	mov	r5, r0
    6daa:	2800      	cmp	r0, #0
    6dac:	d0ec      	beq.n	6d88 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    6dae:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    6db0:	2200      	movs	r2, #0
    6db2:	2300      	movs	r3, #0
    6db4:	4620      	mov	r0, r4
    6db6:	61e1      	str	r1, [r4, #28]
    6db8:	f7ff fabe 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6dbc:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    6dbe:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6dc2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    6dc6:	2b00      	cmp	r3, #0
    6dc8:	d0df      	beq.n	6d8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6dca:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    6dcc:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6dce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    6dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    6dd6:	f7ff be5b 	b.w	6a90 <ExFatFile::syncDir()>
    6dda:	bf00      	nop

00006ddc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dde:	2500      	movs	r5, #0
    6de0:	b097      	sub	sp, #92	; 0x5c
    6de2:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    6de4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6de8:	9201      	str	r2, [sp, #4]
    6dea:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    6dee:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    6df0:	2b00      	cmp	r3, #0
    6df2:	d146      	bne.n	6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    6df4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6df8:	460e      	mov	r6, r1
    6dfa:	f013 0f50 	tst.w	r3, #80	; 0x50
    6dfe:	d040      	beq.n	6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    6e00:	7813      	ldrb	r3, [r2, #0]
    6e02:	4604      	mov	r4, r0
    6e04:	4611      	mov	r1, r2
    6e06:	2b2f      	cmp	r3, #47	; 0x2f
    6e08:	d03e      	beq.n	6e88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    6e0a:	ab01      	add	r3, sp, #4
    6e0c:	aa02      	add	r2, sp, #8
    6e0e:	4620      	mov	r0, r4
    6e10:	f7ff f95e 	bl	60d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6e14:	2800      	cmp	r0, #0
    6e16:	d034      	beq.n	6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    6e18:	9b01      	ldr	r3, [sp, #4]
    6e1a:	781b      	ldrb	r3, [r3, #0]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	d041      	beq.n	6ea4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6e20:	2300      	movs	r3, #0
    6e22:	aa02      	add	r2, sp, #8
    6e24:	4631      	mov	r1, r6
    6e26:	4620      	mov	r0, r4
    6e28:	f7ff fafc 	bl	6424 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6e2c:	b930      	cbnz	r0, 6e3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    6e2e:	b347      	cbz	r7, 6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    6e30:	aa02      	add	r2, sp, #8
    6e32:	4631      	mov	r1, r6
    6e34:	4620      	mov	r0, r4
    6e36:	f7ff ffa1 	bl	6d7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6e3a:	b310      	cbz	r0, 6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    6e3c:	46a4      	mov	ip, r4
    6e3e:	ad08      	add	r5, sp, #32
    6e40:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6e44:	f8dc 0000 	ldr.w	r0, [ip]
    6e48:	f10c 0c10 	add.w	ip, ip, #16
    6e4c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6e50:	46ae      	mov	lr, r5
    6e52:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    6e56:	3510      	adds	r5, #16
    6e58:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6e5c:	45b4      	cmp	ip, r6
    6e5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6e62:	d1ef      	bne.n	6e44 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    6e64:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    6e68:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    6e6a:	6028      	str	r0, [r5, #0]
    close();
    6e6c:	4620      	mov	r0, r4
    6e6e:	f7ff f911 	bl	6094 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6e72:	9901      	ldr	r1, [sp, #4]
    6e74:	ab01      	add	r3, sp, #4
    6e76:	aa02      	add	r2, sp, #8
    6e78:	4620      	mov	r0, r4
    6e7a:	f7ff f929 	bl	60d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6e7e:	2800      	cmp	r0, #0
    6e80:	d1ca      	bne.n	6e18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    6e82:	2000      	movs	r0, #0
}
    6e84:	b017      	add	sp, #92	; 0x5c
    6e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    6e88:	3101      	adds	r1, #1
    6e8a:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    6e8c:	780b      	ldrb	r3, [r1, #0]
    6e8e:	2b2f      	cmp	r3, #47	; 0x2f
    6e90:	d0fa      	beq.n	6e88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6e92:	6a31      	ldr	r1, [r6, #32]
    6e94:	a808      	add	r0, sp, #32
    6e96:	f7ff f907 	bl	60a8 <ExFatFile::openRoot(ExFatVolume*)>
    6e9a:	2800      	cmp	r0, #0
    6e9c:	d0f1      	beq.n	6e82 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    6e9e:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    6ea0:	ae08      	add	r6, sp, #32
    6ea2:	e7b2      	b.n	6e0a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    6ea4:	aa02      	add	r2, sp, #8
    6ea6:	4631      	mov	r1, r6
    6ea8:	4620      	mov	r0, r4
    6eaa:	f7ff ff67 	bl	6d7c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    6eae:	b017      	add	sp, #92	; 0x5c
    6eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6eb2:	bf00      	nop

00006eb4 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6eb4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6eb8:	079a      	lsls	r2, r3, #30
    6eba:	d562      	bpl.n	6f82 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    6ebc:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    6ebe:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    6ec0:	b082      	sub	sp, #8
    6ec2:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    6ec4:	b3a5      	cbz	r5, 6f30 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    6ec6:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    6eca:	d034      	beq.n	6f36 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6ecc:	6a00      	ldr	r0, [r0, #32]
    6ece:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6ed0:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    6ed4:	3a01      	subs	r2, #1
    6ed6:	68e1      	ldr	r1, [r4, #12]
    6ed8:	f10c 0c09 	add.w	ip, ip, #9
    6edc:	f141 31ff 	adc.w	r1, r1, #4294967295
    6ee0:	fa5f fc8c 	uxtb.w	ip, ip
    6ee4:	f1cc 0e20 	rsb	lr, ip, #32
    6ee8:	fa22 f20c 	lsr.w	r2, r2, ip
    6eec:	f1ac 0c20 	sub.w	ip, ip, #32
    6ef0:	fa01 fe0e 	lsl.w	lr, r1, lr
    6ef4:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    6ef8:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6efa:	ea42 020e 	orr.w	r2, r2, lr
    6efe:	ea42 020c 	orr.w	r2, r2, ip
    6f02:	3201      	adds	r2, #1
    if (m_curCluster) {
    6f04:	b319      	cbz	r1, 6f4e <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    6f06:	3d01      	subs	r5, #1
    6f08:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    6f0a:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6f0c:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    6f0e:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6f10:	bb72      	cbnz	r2, 6f70 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6f12:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    6f16:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    6f18:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6f1c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    6f20:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    6f24:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    6f28:	f7ff fe4e 	bl	6bc8 <ExFatFile::sync()>

 fail:
  return false;
}
    6f2c:	b002      	add	sp, #8
    6f2e:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    6f30:	2001      	movs	r0, #1
}
    6f32:	b002      	add	sp, #8
    6f34:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    6f36:	6981      	ldr	r1, [r0, #24]
    6f38:	b961      	cbnz	r1, 6f54 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    6f3a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6f3c:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    6f3e:	4629      	mov	r1, r5
    6f40:	6a20      	ldr	r0, [r4, #32]
    6f42:	f000 fba7 	bl	7694 <ExFatPartition::freeChain(unsigned long)>
    6f46:	b1c8      	cbz	r0, 6f7c <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6f48:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6f4c:	e7e1      	b.n	6f12 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    6f4e:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    6f50:	61e1      	str	r1, [r4, #28]
    6f52:	e7dd      	b.n	6f10 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6f54:	aa01      	add	r2, sp, #4
    6f56:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    6f58:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6f5a:	f000 fb59 	bl	7610 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6f5e:	2800      	cmp	r0, #0
    6f60:	db0c      	blt.n	6f7c <ExFatFile::truncate()+0xc8>
      if (fg) {
    6f62:	d110      	bne.n	6f86 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    6f64:	9d01      	ldr	r5, [sp, #4]
    6f66:	2d00      	cmp	r5, #0
    6f68:	d1e9      	bne.n	6f3e <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6f6a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6f6e:	e7d0      	b.n	6f12 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6f70:	2300      	movs	r3, #0
    6f72:	9901      	ldr	r1, [sp, #4]
    6f74:	f000 fa72 	bl	745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6f78:	2800      	cmp	r0, #0
    6f7a:	d1e5      	bne.n	6f48 <ExFatFile::truncate()+0x94>
  return false;
    6f7c:	2000      	movs	r0, #0
}
    6f7e:	b002      	add	sp, #8
    6f80:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    6f82:	2000      	movs	r0, #0
}
    6f84:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6f86:	f04f 32ff 	mov.w	r2, #4294967295
    6f8a:	69a1      	ldr	r1, [r4, #24]
    6f8c:	6a20      	ldr	r0, [r4, #32]
    6f8e:	f000 fb61 	bl	7654 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6f92:	2800      	cmp	r0, #0
    6f94:	d1e6      	bne.n	6f64 <ExFatFile::truncate()+0xb0>
    6f96:	e7f1      	b.n	6f7c <ExFatFile::truncate()+0xc8>

00006f98 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6f9c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6fa0:	b083      	sub	sp, #12
    6fa2:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6fa4:	079d      	lsls	r5, r3, #30
    6fa6:	f140 80a1 	bpl.w	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6faa:	4691      	mov	r9, r2
    6fac:	071a      	lsls	r2, r3, #28
    6fae:	460e      	mov	r6, r1
    6fb0:	f100 8095 	bmi.w	70de <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    6fb4:	f1b9 0f00 	cmp.w	r9, #0
    6fb8:	f000 8128 	beq.w	720c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6fbc:	6823      	ldr	r3, [r4, #0]
    6fbe:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6fc0:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6fc2:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6fc4:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    6fc8:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6fcc:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    6fd0:	f1b8 0f00 	cmp.w	r8, #0
    6fd4:	f040 8094 	bne.w	7100 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    6fd8:	2900      	cmp	r1, #0
    6fda:	f000 80d4 	beq.w	7186 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    6fde:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6fe2:	065b      	lsls	r3, r3, #25
    6fe4:	f140 80ec 	bpl.w	71c0 <ExFatFile::write(void const*, unsigned int)+0x228>
    6fe8:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6fec:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6ff0:	f10c 0c09 	add.w	ip, ip, #9
    6ff4:	3b01      	subs	r3, #1
    6ff6:	fa5f fc8c 	uxtb.w	ip, ip
    6ffa:	f142 32ff 	adc.w	r2, r2, #4294967295
    6ffe:	f1cc 0e20 	rsb	lr, ip, #32
    7002:	fa23 f30c 	lsr.w	r3, r3, ip
    7006:	f1ac 0c20 	sub.w	ip, ip, #32
    700a:	fa02 fe0e 	lsl.w	lr, r2, lr
    700e:	fa22 fc0c 	lsr.w	ip, r2, ip
    7012:	69e2      	ldr	r2, [r4, #28]
    7014:	ea43 030e 	orr.w	r3, r3, lr
    7018:	ea43 030c 	orr.w	r3, r3, ip
    701c:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    701e:	4299      	cmp	r1, r3
    7020:	f080 80d5 	bcs.w	71ce <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    7024:	3101      	adds	r1, #1
    7026:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    7028:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    702c:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    702e:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7032:	4091      	lsls	r1, r2
    7034:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7036:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    703a:	f0c0 808a 	bcc.w	7152 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    703e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    7042:	f0c0 80a6 	bcc.w	7192 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7046:	2301      	movs	r3, #1
    7048:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    704a:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    704c:	eba3 0308 	sub.w	r3, r3, r8
    7050:	4293      	cmp	r3, r2
    7052:	bf28      	it	cs
    7054:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7056:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    705a:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    705c:	ea4f 2843 	mov.w	r8, r3, lsl #9
    7060:	d309      	bcc.n	7076 <ExFatFile::write(void const*, unsigned int)+0xde>
    7062:	185f      	adds	r7, r3, r1
    7064:	42ba      	cmp	r2, r7
    7066:	d206      	bcs.n	7076 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    7068:	2200      	movs	r2, #0
    706a:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    706e:	f04f 32ff 	mov.w	r2, #4294967295
    7072:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    7076:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    707a:	4632      	mov	r2, r6
    707c:	6807      	ldr	r7, [r0, #0]
    707e:	6abf      	ldr	r7, [r7, #40]	; 0x28
    7080:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    7082:	b398      	cbz	r0, 70ec <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    7084:	4643      	mov	r3, r8
    src += n;
    7086:	4446      	add	r6, r8
    toWrite -= n;
    7088:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    708c:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    7090:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    7094:	19db      	adds	r3, r3, r7
    7096:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    709a:	4298      	cmp	r0, r3
    709c:	4191      	sbcs	r1, r2
    m_curPosition += n;
    709e:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    70a2:	d207      	bcs.n	70b4 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    70a4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    70a8:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    70ac:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    70b0:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    70b4:	2d00      	cmp	r5, #0
    70b6:	d183      	bne.n	6fc0 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    70b8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    70bc:	4298      	cmp	r0, r3
    70be:	4191      	sbcs	r1, r2
    70c0:	f0c0 8096 	bcc.w	71f0 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    70c4:	4b53      	ldr	r3, [pc, #332]	; (7214 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    70c6:	681b      	ldr	r3, [r3, #0]
    70c8:	2b00      	cmp	r3, #0
    70ca:	f000 809d 	beq.w	7208 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    70ce:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    70d2:	4648      	mov	r0, r9
    70d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    70d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    70dc:	e00d      	b.n	70fa <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    70de:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    70e2:	f7ff f929 	bl	6338 <ExFatFile::seekSet(unsigned long long)>
    70e6:	2800      	cmp	r0, #0
    70e8:	f47f af64 	bne.w	6fb4 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    70ec:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    70f0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    70f2:	f043 0301 	orr.w	r3, r3, #1
    70f6:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    70fa:	b003      	add	sp, #12
    70fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    7100:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7104:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    7106:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    710a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    710e:	4091      	lsls	r1, r2
    7110:	4441      	add	r1, r8
    7112:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7114:	2f00      	cmp	r7, #0
    7116:	d08e      	beq.n	7036 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    7118:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    711c:	2201      	movs	r2, #1
    711e:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7122:	45a8      	cmp	r8, r5
    7124:	bf28      	it	cs
    7126:	46a8      	movcs	r8, r5
    7128:	f004 fe52 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    712c:	2800      	cmp	r0, #0
    712e:	d0dd      	beq.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7130:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7132:	4447      	add	r7, r8
      memcpy(dst, src, n);
    7134:	4642      	mov	r2, r8
    7136:	4631      	mov	r1, r6
    7138:	f005 fccc 	bl	cad4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    713c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7140:	6a20      	ldr	r0, [r4, #32]
    7142:	d19f      	bne.n	7084 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    7144:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7148:	f004 fe16 	bl	bd78 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    714c:	2800      	cmp	r0, #0
    714e:	d199      	bne.n	7084 <ExFatFile::write(void const*, unsigned int)+0xec>
    7150:	e7cc      	b.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7152:	6862      	ldr	r2, [r4, #4]
    7154:	6963      	ldr	r3, [r4, #20]
    7156:	9200      	str	r2, [sp, #0]
    7158:	9301      	str	r3, [sp, #4]
    715a:	6922      	ldr	r2, [r4, #16]
    715c:	6823      	ldr	r3, [r4, #0]
    715e:	4293      	cmp	r3, r2
    7160:	e9dd 2300 	ldrd	r2, r3, [sp]
    7164:	419a      	sbcs	r2, r3
    7166:	d212      	bcs.n	718e <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7168:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    716a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    716e:	f004 fe2f 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7172:	2800      	cmp	r0, #0
    7174:	d0ba      	beq.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7176:	462a      	mov	r2, r5
    7178:	4631      	mov	r1, r6
    717a:	4438      	add	r0, r7
    m_curPosition += n;
    717c:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    717e:	f005 fca9 	bl	cad4 <memcpy>
    m_curPosition += n;
    7182:	462b      	mov	r3, r5
    7184:	e77f      	b.n	7086 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    7186:	69e1      	ldr	r1, [r4, #28]
    7188:	b349      	cbz	r1, 71de <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    718a:	61a1      	str	r1, [r4, #24]
    718c:	e74c      	b.n	7028 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    718e:	2205      	movs	r2, #5
    7190:	e7eb      	b.n	716a <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    7192:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    7196:	428b      	cmp	r3, r1
    7198:	d106      	bne.n	71a8 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    719a:	2300      	movs	r3, #0
    719c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    71a0:	f04f 33ff 	mov.w	r3, #4294967295
    71a4:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    71a8:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    71ac:	4632      	mov	r2, r6
    71ae:	6803      	ldr	r3, [r0, #0]
    71b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    71b2:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    71b4:	2800      	cmp	r0, #0
    71b6:	d099      	beq.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
    71b8:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    71bc:	4698      	mov	r8, r3
    71be:	e762      	b.n	7086 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    71c0:	f104 0218 	add.w	r2, r4, #24
    71c4:	f000 fa24 	bl	7610 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    71c8:	2800      	cmp	r0, #0
    71ca:	db8f      	blt.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    71cc:	d104      	bne.n	71d8 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    71ce:	4620      	mov	r0, r4
    71d0:	f7ff fb8a 	bl	68e8 <ExFatFile::addCluster()>
    71d4:	2800      	cmp	r0, #0
    71d6:	d089      	beq.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    71d8:	69a1      	ldr	r1, [r4, #24]
    71da:	6a20      	ldr	r0, [r4, #32]
    71dc:	e724      	b.n	7028 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    71de:	4620      	mov	r0, r4
    71e0:	f7ff fb82 	bl	68e8 <ExFatFile::addCluster()>
    71e4:	2800      	cmp	r0, #0
    71e6:	d081      	beq.n	70ec <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    71e8:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    71ea:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    71ec:	61e1      	str	r1, [r4, #28]
    71ee:	e71b      	b.n	7028 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    71f0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    71f4:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    71f6:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    71fa:	f061 037f 	orn	r3, r1, #127	; 0x7f
    71fe:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7202:	b003      	add	sp, #12
    7204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7208:	4648      	mov	r0, r9
    720a:	e776      	b.n	70fa <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    720c:	e9d4 3200 	ldrd	r3, r2, [r4]
    7210:	e752      	b.n	70b8 <ExFatFile::write(void const*, unsigned int)+0x120>
    7212:	bf00      	nop
    7214:	200422dc 	.word	0x200422dc

00007218 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    7218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    721c:	460c      	mov	r4, r1
    721e:	4615      	mov	r5, r2
    7220:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    7224:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    7226:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    7228:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    722c:	b91b      	cbnz	r3, 7236 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    722e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    7232:	429a      	cmp	r2, r3
    7234:	d00e      	beq.n	7254 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    7236:	f004 fdf3 	bl	be20 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    723a:	f004 feb5 	bl	bfa8 <toUpcase(unsigned short)>
    723e:	4606      	mov	r6, r0
    7240:	4638      	mov	r0, r7
    7242:	f004 feb1 	bl	bfa8 <toUpcase(unsigned short)>
    7246:	4286      	cmp	r6, r0
    7248:	d109      	bne.n	725e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    724a:	4544      	cmp	r4, r8
    724c:	d1ea      	bne.n	7224 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    724e:	2001      	movs	r0, #1
}
    7250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    7254:	fab7 f087 	clz	r0, r7
    7258:	0940      	lsrs	r0, r0, #5
}
    725a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    725e:	2000      	movs	r0, #0
}
    7260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007264 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    7264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    7268:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    726c:	b083      	sub	sp, #12
    726e:	4688      	mov	r8, r1
  if (!isOpen()) {
    7270:	2b00      	cmp	r3, #0
    7272:	d04f      	beq.n	7314 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7274:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    7278:	4607      	mov	r7, r0
    727a:	2b01      	cmp	r3, #1
    727c:	d953      	bls.n	7326 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    727e:	3a01      	subs	r2, #1
  char* str = name;
    7280:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7282:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    7286:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7288:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    728a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 732c <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    728e:	2200      	movs	r2, #0
    7290:	4651      	mov	r1, sl
    7292:	4638      	mov	r0, r7
    7294:	9301      	str	r3, [sp, #4]
    7296:	f7fe fedf 	bl	6058 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    729a:	2800      	cmp	r0, #0
    729c:	d03a      	beq.n	7314 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    729e:	7802      	ldrb	r2, [r0, #0]
    72a0:	2ac1      	cmp	r2, #193	; 0xc1
    72a2:	d137      	bne.n	7314 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    72a4:	4605      	mov	r5, r0
    72a6:	f100 091e 	add.w	r9, r0, #30
    72aa:	9b01      	ldr	r3, [sp, #4]
    72ac:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    72b0:	b324      	cbz	r4, 72fc <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    72b2:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    72b6:	b292      	uxth	r2, r2
    72b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    72bc:	d22a      	bcs.n	7314 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    72be:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    72c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
    72c6:	4320      	orrs	r0, r4
    72c8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    72cc:	4619      	mov	r1, r3
    72ce:	4632      	mov	r2, r6
    72d0:	f004 fdcc 	bl	be6c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    72d4:	4603      	mov	r3, r0
    72d6:	b1e8      	cbz	r0, 7314 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    72d8:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    72da:	454d      	cmp	r5, r9
    72dc:	d1e6      	bne.n	72ac <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    72de:	f10a 0a01 	add.w	sl, sl, #1
    72e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    72e6:	fa5f fa8a 	uxtb.w	sl, sl
    72ea:	4552      	cmp	r2, sl
    72ec:	d2cf      	bcs.n	728e <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    72ee:	eba3 0008 	sub.w	r0, r3, r8
    72f2:	4698      	mov	r8, r3
  *str = '\0';
    72f4:	2300      	movs	r3, #0
    72f6:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    72fa:	e00f      	b.n	731c <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    72fc:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    7300:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    7302:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    7306:	d302      	bcc.n	730e <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    7308:	2800      	cmp	r0, #0
    730a:	d1df      	bne.n	72cc <ExFatFile::getName8(char*, unsigned int)+0x68>
    730c:	e7ef      	b.n	72ee <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    730e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    7312:	d306      	bcc.n	7322 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    7314:	2300      	movs	r3, #0
  return 0;
    7316:	4618      	mov	r0, r3
  *name = 0;
    7318:	f888 3000 	strb.w	r3, [r8]
}
    731c:	b003      	add	sp, #12
    731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7322:	4604      	mov	r4, r0
    7324:	e7d9      	b.n	72da <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7326:	2000      	movs	r0, #0
    7328:	e7e4      	b.n	72f4 <ExFatFile::getName8(char*, unsigned int)+0x90>
    732a:	bf00      	nop
    732c:	000ffc00 	.word	0x000ffc00

00007330 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    7330:	b570      	push	{r4, r5, r6, lr}
    7332:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    7334:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    7336:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    733a:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    733c:	4619      	mov	r1, r3
  uint16_t hash = 0;
    733e:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    7340:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    7342:	6123      	str	r3, [r4, #16]
    next = begin;
    7344:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    7346:	e017      	b.n	7378 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    7348:	f004 fd6a 	bl	be20 <FsName::get16()>
    if (u == 0XFFFF) {
    734c:	42a8      	cmp	r0, r5
    734e:	d022      	beq.n	7396 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    7350:	f004 fe2a 	bl	bfa8 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    7354:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7356:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    7358:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    735a:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    735c:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    7360:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    7362:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7364:	fa52 f080 	uxtab	r0, r2, r0
    7368:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    736a:	f3c0 004e 	ubfx	r0, r0, #1, #15
    736e:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    7372:	fa16 f080 	uxtah	r0, r6, r0
    7376:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    7378:	4620      	mov	r0, r4
    737a:	2900      	cmp	r1, #0
    737c:	d1e4      	bne.n	7348 <ExFatFile::hashName(ExName_t*)+0x18>
    737e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    7382:	429a      	cmp	r2, r3
    7384:	d1e0      	bne.n	7348 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    7386:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    7388:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    738a:	3801      	subs	r0, #1
    738c:	28fe      	cmp	r0, #254	; 0xfe
    738e:	bf8c      	ite	hi
    7390:	2000      	movhi	r0, #0
    7392:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    7394:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7396:	2000      	movs	r0, #0
}
    7398:	bd70      	pop	{r4, r5, r6, pc}
    739a:	bf00      	nop

0000739c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    739c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73a0:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    73a2:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    73a4:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    73a6:	2900      	cmp	r1, #0
    73a8:	d042      	beq.n	7430 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    73aa:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    73ae:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    73b2:	4543      	cmp	r3, r8
    73b4:	d942      	bls.n	743c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    73b6:	f008 0307 	and.w	r3, r8, #7
    73ba:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    73bc:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    73c0:	409d      	lsls	r5, r3
    73c2:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    73c4:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    73c6:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    73c8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    73cc:	2200      	movs	r2, #0
    73ce:	4638      	mov	r0, r7
    73d0:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    73d4:	f004 fcfc 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    73d8:	b1e8      	cbz	r0, 7416 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    73da:	f10b 3bff 	add.w	fp, fp, #4294967295
    73de:	4483      	add	fp, r0
    73e0:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    73e4:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    73e8:	e00a      	b.n	7400 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    73ea:	454a      	cmp	r2, r9
    73ec:	d02b      	beq.n	7446 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    73ee:	45a0      	cmp	r8, r4
    73f0:	d010      	beq.n	7414 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    73f2:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    73f6:	42a5      	cmp	r5, r4
    73f8:	d914      	bls.n	7424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    73fa:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    73fe:	d00c      	beq.n	741a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    7400:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    7402:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    7404:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    7408:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    740c:	d0ed      	beq.n	73ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    740e:	45a0      	cmp	r8, r4
        endAlloc++;
    7410:	4626      	mov	r6, r4
        if (endAlloc == start) {
    7412:	d1ee      	bne.n	73f2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    7414:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    7416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    741a:	4558      	cmp	r0, fp
      mask = 1;
    741c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    7420:	d1e0      	bne.n	73e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    7422:	e001      	b.n	7428 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    7424:	2600      	movs	r6, #0
    7426:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    7428:	2501      	movs	r5, #1
    i = 0;
    742a:	f04f 0b00 	mov.w	fp, #0
    742e:	e7cb      	b.n	73c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7430:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    7434:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    7438:	4543      	cmp	r3, r8
    743a:	d8bc      	bhi.n	73b6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    743c:	f04f 0800 	mov.w	r8, #0
    7440:	2501      	movs	r5, #1
    start = 0;
    7442:	46c3      	mov	fp, r8
    7444:	e7be      	b.n	73c4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    7446:	f1ba 0f00 	cmp.w	sl, #0
    744a:	d104      	bne.n	7456 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    744c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    7450:	bf08      	it	eq
    7452:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    7456:	1cb0      	adds	r0, r6, #2
}
    7458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7460:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    7462:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    7464:	4615      	mov	r5, r2
    7466:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7468:	1883      	adds	r3, r0, r2
    746a:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    746e:	4293      	cmp	r3, r2
    7470:	d837      	bhi.n	74e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    7472:	bbce      	cbnz	r6, 74e8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    7474:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    7478:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    747a:	bf88      	it	hi
    747c:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    7480:	f000 0307 	and.w	r3, r0, #7
    7484:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    7486:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    748a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    748e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    7490:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    7494:	b2e4      	uxtb	r4, r4
    7496:	2201      	movs	r2, #1
    7498:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    749a:	188f      	adds	r7, r1, r2
    749c:	f004 fc98 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    74a0:	b1f8      	cbz	r0, 74e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    74a2:	f109 3eff 	add.w	lr, r9, #4294967295
    74a6:	4486      	add	lr, r0
    74a8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    74ac:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    74b0:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    74b4:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    74b8:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    74bc:	bf14      	ite	ne
    74be:	2201      	movne	r2, #1
    74c0:	2200      	moveq	r2, #0
    74c2:	42b2      	cmp	r2, r6
    74c4:	d00d      	beq.n	74e2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    74c6:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    74c8:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    74cc:	d018      	beq.n	7500 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    74ce:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    74d2:	d1ed      	bne.n	74b0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    74d4:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    74d6:	46a1      	mov	r9, r4
    74d8:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    74dc:	d1e6      	bne.n	74ac <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    74de:	4639      	mov	r1, r7
    74e0:	e7d9      	b.n	7496 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    74e2:	2000      	movs	r0, #0
}
    74e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    74e8:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    74ec:	428b      	cmp	r3, r1
    74ee:	d9c7      	bls.n	7480 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    74f0:	4281      	cmp	r1, r0
    74f2:	d3c5      	bcc.n	7480 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    74f4:	4293      	cmp	r3, r2
    74f6:	bf28      	it	cs
    74f8:	2300      	movcs	r3, #0
    74fa:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    74fe:	e7bf      	b.n	7480 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    7500:	2001      	movs	r0, #1
}
    7502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7506:	bf00      	nop

00007508 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    7508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    750a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    750e:	3301      	adds	r3, #1
    7510:	428b      	cmp	r3, r1
    7512:	d201      	bcs.n	7518 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    7514:	2000      	movs	r0, #0
}
    7516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7518:	4607      	mov	r7, r0
    751a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    751c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    7520:	2500      	movs	r5, #0
    7522:	e005      	b.n	7530 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    7524:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    7528:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    752a:	3301      	adds	r3, #1
    752c:	42a3      	cmp	r3, r4
    752e:	d3f1      	bcc.n	7514 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7530:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    7534:	2200      	movs	r2, #0
    7536:	4630      	mov	r0, r6
    7538:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    753c:	f004 fc48 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    7540:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    7542:	2800      	cmp	r0, #0
    7544:	d0e6      	beq.n	7514 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    7546:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    754a:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    754c:	1c63      	adds	r3, r4, #1
    754e:	d1e9      	bne.n	7524 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    7550:	1c68      	adds	r0, r5, #1
}
    7552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007554 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    7554:	b538      	push	{r3, r4, r5, lr}
    7556:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    7558:	680b      	ldr	r3, [r1, #0]
    755a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    755e:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    7562:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    7566:	3b02      	subs	r3, #2
    7568:	6865      	ldr	r5, [r4, #4]
    756a:	fa03 f30c 	lsl.w	r3, r3, ip
    756e:	4029      	ands	r1, r5
    7570:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7574:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    7578:	4419      	add	r1, r3
    757a:	f004 fc29 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    757e:	b118      	cbz	r0, 7588 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    7580:	6863      	ldr	r3, [r4, #4]
    7582:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7586:	4418      	add	r0, r3
}
    7588:	bd38      	pop	{r3, r4, r5, pc}
    758a:	bf00      	nop

0000758c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    758c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7590:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    7592:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7596:	6849      	ldr	r1, [r1, #4]
    7598:	400b      	ands	r3, r1
  pos->position += offset;
    759a:	4411      	add	r1, r2
    759c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    759e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    75a0:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    75a4:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    75a8:	b2d2      	uxtb	r2, r2
    75aa:	40d3      	lsrs	r3, r2
  while (tmp--) {
    75ac:	b32b      	cbz	r3, 75fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    75ae:	4680      	mov	r8, r0
    75b0:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    75b2:	f500 7904 	add.w	r9, r0, #528	; 0x210
    75b6:	e005      	b.n	75c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    75b8:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    75ba:	3d01      	subs	r5, #1
      pos->cluster++;
    75bc:	f103 0301 	add.w	r3, r3, #1
    75c0:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    75c2:	d31a      	bcc.n	75fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    75c4:	7a26      	ldrb	r6, [r4, #8]
    75c6:	2e00      	cmp	r6, #0
    75c8:	d1f6      	bne.n	75b8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    75ca:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    75ce:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    75d0:	6827      	ldr	r7, [r4, #0]
    75d2:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    75d4:	3301      	adds	r3, #1
    75d6:	429f      	cmp	r7, r3
    75d8:	d812      	bhi.n	7600 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    75da:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    75de:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    75e2:	f004 fbf5 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    75e6:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    75e8:	b150      	cbz	r0, 7600 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    75ea:	f3c7 0708 	ubfx	r7, r7, #0, #9
    75ee:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    75f0:	1c5a      	adds	r2, r3, #1
    75f2:	d009      	beq.n	7608 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    75f4:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    75f6:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    75f8:	d2e4      	bcs.n	75c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    75fa:	2001      	movs	r0, #1
}
    75fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    7600:	f04f 30ff 	mov.w	r0, #4294967295
}
    7604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    7608:	4630      	mov	r0, r6
}
    760a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    760e:	bf00      	nop

00007610 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7610:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    7612:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7616:	3301      	adds	r3, #1
    7618:	428b      	cmp	r3, r1
    761a:	d202      	bcs.n	7622 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    761c:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    7620:	bd38      	pop	{r3, r4, r5, pc}
    7622:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7624:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    7628:	4615      	mov	r5, r2
    762a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    762e:	2200      	movs	r2, #0
    7630:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7634:	f004 fbcc 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7638:	2800      	cmp	r0, #0
    763a:	d0ef      	beq.n	761c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    763c:	00a4      	lsls	r4, r4, #2
    763e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    7642:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    7644:	1c5a      	adds	r2, r3, #1
    7646:	d002      	beq.n	764e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    7648:	2001      	movs	r0, #1
  *value = next;
    764a:	602b      	str	r3, [r5, #0]
}
    764c:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    764e:	2000      	movs	r0, #0
}
    7650:	bd38      	pop	{r3, r4, r5, pc}
    7652:	bf00      	nop

00007654 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7654:	2901      	cmp	r1, #1
    7656:	d91b      	bls.n	7690 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7658:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    765a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    765e:	460c      	mov	r4, r1
    7660:	3301      	adds	r3, #1
    7662:	428b      	cmp	r3, r1
    7664:	d201      	bcs.n	766a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7666:	2000      	movs	r0, #0
}
    7668:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    766a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    766e:	4615      	mov	r5, r2
    7670:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7674:	2201      	movs	r2, #1
    7676:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    767a:	f004 fba9 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    767e:	4603      	mov	r3, r0
    7680:	2800      	cmp	r0, #0
    7682:	d0f0      	beq.n	7666 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    7684:	00a4      	lsls	r4, r4, #2
  return true;
    7686:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    7688:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    768c:	511d      	str	r5, [r3, r4]
}
    768e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    7690:	2000      	movs	r0, #0
}
    7692:	4770      	bx	lr

00007694 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    7694:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7698:	3301      	adds	r3, #1
    769a:	4299      	cmp	r1, r3
    769c:	d901      	bls.n	76a2 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    769e:	2000      	movs	r0, #0
    76a0:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    76a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    76a6:	4605      	mov	r5, r0
    76a8:	b083      	sub	sp, #12
    76aa:	460c      	mov	r4, r1
    76ac:	f500 7904 	add.w	r9, r0, #528	; 0x210
    76b0:	460f      	mov	r7, r1
    76b2:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    76b6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    76ba:	2200      	movs	r2, #0
    76bc:	4648      	mov	r0, r9
    76be:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    76c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    76c6:	f004 fb83 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    76ca:	b190      	cbz	r0, 76f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    76cc:	00a3      	lsls	r3, r4, #2
    76ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    76d2:	58c2      	ldr	r2, [r0, r3]
    76d4:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    76d6:	1c53      	adds	r3, r2, #1
    76d8:	bf16      	itet	ne
    76da:	4616      	movne	r6, r2
    76dc:	f04f 0a00 	moveq.w	sl, #0
    76e0:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    76e4:	2c01      	cmp	r4, #1
    76e6:	d904      	bls.n	76f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    76e8:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    76ec:	3201      	adds	r2, #1
    76ee:	4294      	cmp	r4, r2
    76f0:	d903      	bls.n	76fa <ExFatPartition::freeChain(unsigned long)+0x66>
}
    76f2:	2000      	movs	r0, #0
    76f4:	b003      	add	sp, #12
    76f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    76fa:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    76fe:	2201      	movs	r2, #1
    7700:	4648      	mov	r0, r9
    7702:	4459      	add	r1, fp
    7704:	f004 fb64 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7708:	2800      	cmp	r0, #0
    770a:	d0f2      	beq.n	76f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    770c:	9b01      	ldr	r3, [sp, #4]
    770e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    7712:	f1ba 0f00 	cmp.w	sl, #0
    7716:	d012      	beq.n	773e <ExFatPartition::freeChain(unsigned long)+0xaa>
    7718:	3401      	adds	r4, #1
    771a:	42b4      	cmp	r4, r6
    771c:	d008      	beq.n	7730 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    771e:	2300      	movs	r3, #0
    7720:	1be2      	subs	r2, r4, r7
    7722:	4639      	mov	r1, r7
    7724:	4628      	mov	r0, r5
    7726:	f7ff fe99 	bl	745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    772a:	2800      	cmp	r0, #0
    772c:	d0e1      	beq.n	76f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    772e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    7730:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    7734:	3301      	adds	r3, #1
    7736:	42b3      	cmp	r3, r6
    7738:	d3db      	bcc.n	76f2 <ExFatPartition::freeChain(unsigned long)+0x5e>
    773a:	4634      	mov	r4, r6
    773c:	e7bb      	b.n	76b6 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    773e:	1c62      	adds	r2, r4, #1
    7740:	4653      	mov	r3, sl
    7742:	4639      	mov	r1, r7
    7744:	4628      	mov	r0, r5
    7746:	1bd2      	subs	r2, r2, r7
}
    7748:	b003      	add	sp, #12
    774a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    774e:	f7ff be85 	b.w	745c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7752:	bf00      	nop

00007754 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    7754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    7758:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    775a:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    775c:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    7760:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    7764:	462c      	mov	r4, r5
    7766:	2200      	movs	r2, #0
    7768:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    776a:	1c4f      	adds	r7, r1, #1
    776c:	f004 fb30 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    7770:	b1a8      	cbz	r0, 779e <ExFatPartition::freeClusterCount()+0x4a>
    7772:	f100 3eff 	add.w	lr, r0, #4294967295
    7776:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    777a:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    777e:	e005      	b.n	778c <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    7780:	b979      	cbnz	r1, 77a2 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    7782:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    7784:	4284      	cmp	r4, r0
    7786:	d209      	bcs.n	779c <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7788:	454c      	cmp	r4, r9
    778a:	d016      	beq.n	77ba <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    778c:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    7790:	29ff      	cmp	r1, #255	; 0xff
    7792:	d1f5      	bne.n	7780 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    7794:	3408      	adds	r4, #8
        usedCount+= 8;
    7796:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    7798:	4284      	cmp	r4, r0
    779a:	d3f5      	bcc.n	7788 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    779c:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    77a2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    77a4:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    77a6:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    77a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    77ac:	bf18      	it	ne
    77ae:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    77b0:	3a01      	subs	r2, #1
    77b2:	fa5f f38c 	uxtb.w	r3, ip
    77b6:	d1f6      	bne.n	77a6 <ExFatPartition::freeClusterCount()+0x52>
    77b8:	e7e3      	b.n	7782 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    77ba:	4639      	mov	r1, r7
    77bc:	e7d3      	b.n	7766 <ExFatPartition::freeClusterCount()+0x12>
    77be:	bf00      	nop

000077c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    77c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    77c2:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    77c4:	f04f 36ff 	mov.w	r6, #4294967295
    77c8:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    77cc:	4615      	mov	r5, r2
  m_blockDev = dev;
    77ce:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    77d2:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    77d4:	6041      	str	r1, [r0, #4]
    77d6:	461a      	mov	r2, r3
    77d8:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    77dc:	4619      	mov	r1, r3
  m_fatType = 0;
    77de:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    77e2:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    77e4:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    77e6:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    77ea:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    77ee:	4638      	mov	r0, r7
    77f0:	f004 faee 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    77f4:	2d04      	cmp	r5, #4
    77f6:	d80d      	bhi.n	7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    77f8:	4606      	mov	r6, r0
    77fa:	b158      	cbz	r0, 7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    77fc:	b1bd      	cbz	r5, 782e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    77fe:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7800:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    7804:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    7808:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    780c:	d102      	bne.n	7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    780e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    7812:	b90b      	cbnz	r3, 7818 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    7814:	2000      	movs	r0, #0
}
    7816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    7818:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    781c:	4638      	mov	r0, r7
    781e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    7822:	4629      	mov	r1, r5
    7824:	f004 fad4 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    7828:	4606      	mov	r6, r0
    782a:	2800      	cmp	r0, #0
    782c:	d0f2      	beq.n	7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    782e:	2205      	movs	r2, #5
    7830:	491a      	ldr	r1, [pc, #104]	; (789c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    7832:	1cf0      	adds	r0, r6, #3
    7834:	f009 fa84 	bl	10d40 <strncmp>
    7838:	2800      	cmp	r0, #0
    783a:	d1eb      	bne.n	7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    783c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    7840:	2b09      	cmp	r3, #9
    7842:	d1e7      	bne.n	7814 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7844:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    7846:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7848:	442b      	add	r3, r5
    784a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    784e:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    7850:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7854:	6db3      	ldr	r3, [r6, #88]	; 0x58
    7856:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7858:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    785a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    785e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    7860:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    7864:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7866:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    786a:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    786e:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    7872:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7874:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7878:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    787c:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    7880:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7882:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    7886:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    788a:	462a      	mov	r2, r5
    788c:	f7ff fd86 	bl	739c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7890:	2340      	movs	r3, #64	; 0x40
  return true;
    7892:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    7894:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    7898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    789a:	bf00      	nop
    789c:	20000ac8 	.word	0x20000ac8

000078a0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    78a0:	b510      	push	{r4, lr}
    78a2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    78a4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    78a8:	f7ff fe2e 	bl	7508 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    78ac:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    78b0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    78b2:	b2db      	uxtb	r3, r3
}
    78b4:	4098      	lsls	r0, r3
    78b6:	bd10      	pop	{r4, pc}

000078b8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    78b8:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    78ba:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    78be:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    78c0:	2300      	movs	r3, #0
    78c2:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    78c4:	4668      	mov	r0, sp
    78c6:	4621      	mov	r1, r4
    78c8:	930c      	str	r3, [sp, #48]	; 0x30
    78ca:	f7fe ff77 	bl	67bc <ExFatFile::open(ExFatFile*, char const*, int)>
    78ce:	4605      	mov	r5, r0
    78d0:	b1d8      	cbz	r0, 790a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    78d2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    78d6:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    78da:	d019      	beq.n	7910 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    78dc:	46ee      	mov	lr, sp
    78de:	46a4      	mov	ip, r4
    78e0:	ae0c      	add	r6, sp, #48	; 0x30
    78e2:	4674      	mov	r4, lr
    78e4:	f10c 0c10 	add.w	ip, ip, #16
    78e8:	f10e 0e10 	add.w	lr, lr, #16
    78ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    78ee:	42b4      	cmp	r4, r6
    78f0:	f84c 0c10 	str.w	r0, [ip, #-16]
    78f4:	f84c 1c0c 	str.w	r1, [ip, #-12]
    78f8:	f84c 2c08 	str.w	r2, [ip, #-8]
    78fc:	f84c 3c04 	str.w	r3, [ip, #-4]
    7900:	d1ef      	bne.n	78e2 <ExFatVolume::chdir(char const*)+0x2a>
    7902:	f8de 0000 	ldr.w	r0, [lr]
    7906:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    790a:	4628      	mov	r0, r5
    790c:	b00e      	add	sp, #56	; 0x38
    790e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7910:	461d      	mov	r5, r3
}
    7912:	4628      	mov	r0, r5
    7914:	b00e      	add	sp, #56	; 0x38
    7916:	bd70      	pop	{r4, r5, r6, pc}

00007918 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7918:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    791a:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    791e:	b082      	sub	sp, #8
    7920:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7922:	2b00      	cmp	r3, #0
    7924:	db0d      	blt.n	7942 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7926:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7928:	f105 0028 	add.w	r0, r5, #40	; 0x28
    792c:	f004 fa24 	bl	bd78 <FsCache::sync()>
    7930:	2800      	cmp	r0, #0
    7932:	d13b      	bne.n	79ac <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7934:	7863      	ldrb	r3, [r4, #1]
  return false;
    7936:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7938:	f043 0301 	orr.w	r3, r3, #1
    793c:	7063      	strb	r3, [r4, #1]
}
    793e:	b002      	add	sp, #8
    7940:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    7942:	6880      	ldr	r0, [r0, #8]
    7944:	2201      	movs	r2, #1
    7946:	69a1      	ldr	r1, [r4, #24]
    7948:	3028      	adds	r0, #40	; 0x28
    794a:	f004 fa41 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    794e:	2800      	cmp	r0, #0
    7950:	d0f0      	beq.n	7934 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    7952:	88a5      	ldrh	r5, [r4, #4]
    7954:	f005 050f 	and.w	r5, r5, #15
    7958:	016b      	lsls	r3, r5, #5
    795a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    795e:	5cc3      	ldrb	r3, [r0, r3]
    7960:	2be5      	cmp	r3, #229	; 0xe5
    7962:	d0e7      	beq.n	7934 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    7964:	7823      	ldrb	r3, [r4, #0]
    7966:	071b      	lsls	r3, r3, #28
    7968:	d501      	bpl.n	796e <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    796a:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    796c:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    796e:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    7970:	4915      	ldr	r1, [pc, #84]	; (79c8 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7972:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7974:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    7976:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7978:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    797a:	b166      	cbz	r6, 7996 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    797c:	f10d 0203 	add.w	r2, sp, #3
    7980:	f10d 0106 	add.w	r1, sp, #6
    7984:	a801      	add	r0, sp, #4
    7986:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    7988:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    798c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7990:	832b      	strh	r3, [r5, #24]
    7992:	826b      	strh	r3, [r5, #18]
    7994:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7996:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7998:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    799a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    799e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    79a2:	70a3      	strb	r3, [r4, #2]
    79a4:	f004 f9e8 	bl	bd78 <FsCache::sync()>
    79a8:	2800      	cmp	r0, #0
    79aa:	d0c3      	beq.n	7934 <FatFile::sync() [clone .part.0]+0x1c>
    79ac:	f505 700e 	add.w	r0, r5, #568	; 0x238
    79b0:	f004 f9e2 	bl	bd78 <FsCache::sync()>
    79b4:	2800      	cmp	r0, #0
    79b6:	d0bd      	beq.n	7934 <FatFile::sync() [clone .part.0]+0x1c>
    79b8:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    79ba:	6803      	ldr	r3, [r0, #0]
    79bc:	6a1b      	ldr	r3, [r3, #32]
    79be:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    79c0:	2800      	cmp	r0, #0
    79c2:	d0b7      	beq.n	7934 <FatFile::sync() [clone .part.0]+0x1c>
    79c4:	e7bb      	b.n	793e <FatFile::sync() [clone .part.0]+0x26>
    79c6:	bf00      	nop
    79c8:	200422dc 	.word	0x200422dc

000079cc <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    79cc:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    79ce:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    79d0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    79d4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    79d6:	6880      	ldr	r0, [r0, #8]
    79d8:	4629      	mov	r1, r5
    79da:	f001 fd65 	bl	94a8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    79de:	b150      	cbz	r0, 79f6 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    79e0:	b155      	cbz	r5, 79f8 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    79e2:	6923      	ldr	r3, [r4, #16]
    79e4:	3501      	adds	r5, #1
    79e6:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    79e8:	78a3      	ldrb	r3, [r4, #2]
    79ea:	bf18      	it	ne
    79ec:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    79f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    79f4:	70a3      	strb	r3, [r4, #2]
}
    79f6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    79f8:	78a3      	ldrb	r3, [r4, #2]
    79fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    79fe:	e7f7      	b.n	79f0 <FatFile::addCluster()+0x24>

00007a00 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    7a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    7a02:	7804      	ldrb	r4, [r0, #0]
    7a04:	f014 0420 	ands.w	r4, r4, #32
    7a08:	d104      	bne.n	7a14 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    7a0a:	4b1a      	ldr	r3, [pc, #104]	; (7a74 <FatFile::addDirCluster()+0x74>)
    7a0c:	4605      	mov	r5, r0
    7a0e:	6942      	ldr	r2, [r0, #20]
    7a10:	429a      	cmp	r2, r3
    7a12:	d302      	bcc.n	7a1a <FatFile::addDirCluster()+0x1a>
  return false;
    7a14:	2700      	movs	r7, #0
}
    7a16:	4638      	mov	r0, r7
    7a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    7a1a:	f7ff ffd7 	bl	79cc <FatFile::addCluster()>
    7a1e:	4607      	mov	r7, r0
    7a20:	2800      	cmp	r0, #0
    7a22:	d0f7      	beq.n	7a14 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    7a24:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a26:	692e      	ldr	r6, [r5, #16]
    7a28:	7982      	ldrb	r2, [r0, #6]
    7a2a:	3e02      	subs	r6, #2
    7a2c:	6941      	ldr	r1, [r0, #20]
    7a2e:	4096      	lsls	r6, r2
    7a30:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7a32:	7901      	ldrb	r1, [r0, #4]
    7a34:	b1a9      	cbz	r1, 7a62 <FatFile::addDirCluster()+0x62>
    7a36:	4621      	mov	r1, r4
    7a38:	e006      	b.n	7a48 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    7a3a:	f009 f8d9 	bl	10bf0 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7a3e:	68a8      	ldr	r0, [r5, #8]
    7a40:	b2e1      	uxtb	r1, r4
    7a42:	7902      	ldrb	r2, [r0, #4]
    7a44:	428a      	cmp	r2, r1
    7a46:	d90b      	bls.n	7a60 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    7a48:	4431      	add	r1, r6
    7a4a:	2205      	movs	r2, #5
    7a4c:	3028      	adds	r0, #40	; 0x28
    7a4e:	3401      	adds	r4, #1
    7a50:	f004 f9be 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    7a54:	f44f 7200 	mov.w	r2, #512	; 0x200
    7a58:	2100      	movs	r1, #0
    if (!pc) {
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d1ed      	bne.n	7a3a <FatFile::addDirCluster()+0x3a>
    7a5e:	e7d9      	b.n	7a14 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7a60:	7982      	ldrb	r2, [r0, #6]
    7a62:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    7a66:	6969      	ldr	r1, [r5, #20]
}
    7a68:	4638      	mov	r0, r7
    7a6a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7a6c:	fa11 f383 	uxtah	r3, r1, r3
    7a70:	616b      	str	r3, [r5, #20]
}
    7a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a74:	001ffe00 	.word	0x001ffe00

00007a78 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7a78:	b510      	push	{r4, lr}
    7a7a:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    7a7c:	6880      	ldr	r0, [r0, #8]
    7a7e:	460a      	mov	r2, r1
    7a80:	3028      	adds	r0, #40	; 0x28
    7a82:	69a1      	ldr	r1, [r4, #24]
    7a84:	f004 f9a4 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7a88:	b120      	cbz	r0, 7a94 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    7a8a:	88a3      	ldrh	r3, [r4, #4]
    7a8c:	f003 030f 	and.w	r3, r3, #15
    7a90:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    7a94:	bd10      	pop	{r4, pc}
    7a96:	bf00      	nop

00007a98 <FatFile::close()>:
bool FatFile::close() {
    7a98:	b510      	push	{r4, lr}
  if (!isOpen()) {
    7a9a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    7a9c:	4604      	mov	r4, r0
  if (!isOpen()) {
    7a9e:	b12b      	cbz	r3, 7aac <FatFile::close()+0x14>
    7aa0:	f7ff ff3a 	bl	7918 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    7aa4:	2300      	movs	r3, #0
    7aa6:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7aa8:	70a3      	strb	r3, [r4, #2]
}
    7aaa:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    7aac:	2300      	movs	r3, #0
    return true;
    7aae:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    7ab0:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7ab2:	70a3      	strb	r3, [r4, #2]
}
    7ab4:	bd10      	pop	{r4, pc}
    7ab6:	bf00      	nop

00007ab8 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7ab8:	780b      	ldrb	r3, [r1, #0]
    7aba:	f013 0f70 	tst.w	r3, #112	; 0x70
    7abe:	d101      	bne.n	7ac4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    7ac0:	2000      	movs	r0, #0
    7ac2:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7ac6:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7aca:	b089      	sub	sp, #36	; 0x24
    7acc:	460d      	mov	r5, r1
    7ace:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7ad0:	f001 f84a 	bl	8b68 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7ad4:	b138      	cbz	r0, 7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    7ad6:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7ad8:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7ada:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7adc:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7ade:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7ae0:	f7ff ff8e 	bl	7a00 <FatFile::addDirCluster()>
    7ae4:	b910      	cbnz	r0, 7aec <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    7ae6:	2000      	movs	r0, #0
    7ae8:	b009      	add	sp, #36	; 0x24
    7aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    7aec:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    7aee:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    7af0:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    7af2:	b16b      	cbz	r3, 7b10 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    7af4:	6963      	ldr	r3, [r4, #20]
    7af6:	b133      	cbz	r3, 7b06 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7af8:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    7afa:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7afc:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    7b00:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7b04:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    7b06:	4620      	mov	r0, r4
    7b08:	f7ff ff06 	bl	7918 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    7b0c:	2800      	cmp	r0, #0
    7b0e:	d0ea      	beq.n	7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7b10:	68a0      	ldr	r0, [r4, #8]
    7b12:	2201      	movs	r2, #1
    7b14:	69a1      	ldr	r1, [r4, #24]
    7b16:	3028      	adds	r0, #40	; 0x28
    7b18:	f004 f95a 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7b1c:	2800      	cmp	r0, #0
    7b1e:	d0e2      	beq.n	7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    7b20:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7b24:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    7b26:	f00c 0c0f 	and.w	ip, ip, #15
    7b2a:	ea4f 134c 	mov.w	r3, ip, lsl #5
    7b2e:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7b32:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    7b36:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    7b38:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7b3a:	6a23      	ldr	r3, [r4, #32]
    7b3c:	f897 e006 	ldrb.w	lr, [r7, #6]
    7b40:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    7b42:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7b46:	f8dc 2008 	ldr.w	r2, [ip, #8]
    7b4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    7b4e:	fa06 f60e 	lsl.w	r6, r6, lr
    7b52:	46ee      	mov	lr, sp
    7b54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7b58:	f8dc 0010 	ldr.w	r0, [ip, #16]
    7b5c:	f8dc 1014 	ldr.w	r1, [ip, #20]
    7b60:	f8dc 2018 	ldr.w	r2, [ip, #24]
    7b64:	f8dc 301c 	ldr.w	r3, [ip, #28]
    7b68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    7b6c:	697b      	ldr	r3, [r7, #20]
    7b6e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7b72:	2201      	movs	r2, #1
    7b74:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    7b76:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    7b7a:	f8cd 3001 	str.w	r3, [sp, #1]
    7b7e:	f8cd 3005 	str.w	r3, [sp, #5]
    7b82:	f8ad 3009 	strh.w	r3, [sp, #9]
    7b86:	f004 f923 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7b8a:	4684      	mov	ip, r0
    7b8c:	2800      	cmp	r0, #0
    7b8e:	d0aa      	beq.n	7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    7b90:	272e      	movs	r7, #46	; 0x2e
    7b92:	46ee      	mov	lr, sp
    7b94:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    7b98:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    7b9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7b9e:	f8cc 0000 	str.w	r0, [ip]
    7ba2:	f8cc 1004 	str.w	r1, [ip, #4]
    7ba6:	f8cc 2008 	str.w	r2, [ip, #8]
    7baa:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    7bae:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    7bb2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7bb6:	f8cc 0010 	str.w	r0, [ip, #16]
    7bba:	f8cc 1014 	str.w	r1, [ip, #20]
    7bbe:	f8cc 2018 	str.w	r2, [ip, #24]
    7bc2:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7bc6:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7bc8:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7bca:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7bce:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7bd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7bd4:	f8cc 0020 	str.w	r0, [ip, #32]
    7bd8:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    7bdc:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7be0:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7be4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7be6:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    7bea:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    7bee:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7bf2:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7bf6:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7bf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7bfc:	f004 f8bc 	bl	bd78 <FsCache::sync()>
    7c00:	2800      	cmp	r0, #0
    7c02:	f43f af70 	beq.w	7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7c06:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7c0a:	f004 f8b5 	bl	bd78 <FsCache::sync()>
    7c0e:	2800      	cmp	r0, #0
    7c10:	f43f af69 	beq.w	7ae6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7c14:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7c16:	6803      	ldr	r3, [r0, #0]
    7c18:	6a1b      	ldr	r3, [r3, #32]
}
    7c1a:	b009      	add	sp, #36	; 0x24
    7c1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7c20:	4718      	bx	r3
    7c22:	bf00      	nop

00007c24 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    7c28:	2600      	movs	r6, #0
    7c2a:	b094      	sub	sp, #80	; 0x50
    7c2c:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    7c2e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7c30:	9201      	str	r2, [sp, #4]
    7c32:	f8ad 6014 	strh.w	r6, [sp, #20]
    7c36:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d141      	bne.n	7cc0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7c3c:	780b      	ldrb	r3, [r1, #0]
    7c3e:	460d      	mov	r5, r1
    7c40:	f013 0f70 	tst.w	r3, #112	; 0x70
    7c44:	d03c      	beq.n	7cc0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    7c46:	7813      	ldrb	r3, [r2, #0]
    7c48:	4604      	mov	r4, r0
    7c4a:	4616      	mov	r6, r2
    7c4c:	2b2f      	cmp	r3, #47	; 0x2f
    7c4e:	d03b      	beq.n	7cc8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    7c50:	2700      	movs	r7, #0
    7c52:	e028      	b.n	7ca6 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    7c54:	9e01      	ldr	r6, [sp, #4]
    7c56:	7836      	ldrb	r6, [r6, #0]
    7c58:	2e00      	cmp	r6, #0
    7c5a:	d050      	beq.n	7cfe <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    7c5c:	f000 ff84 	bl	8b68 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c60:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    7c62:	aa02      	add	r2, sp, #8
    7c64:	4629      	mov	r1, r5
    7c66:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    7c68:	b92b      	cbnz	r3, 7c76 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    7c6a:	f1b8 0f00 	cmp.w	r8, #0
    7c6e:	d027      	beq.n	7cc0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7c70:	f7ff ff22 	bl	7ab8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7c74:	b320      	cbz	r0, 7cc0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    7c76:	46a6      	mov	lr, r4
    7c78:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7c7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7c88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7c8c:	f8de 5000 	ldr.w	r5, [lr]
    7c90:	4620      	mov	r0, r4
  if (!isOpen()) {
    7c92:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    7c94:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    7c98:	b10b      	cbz	r3, 7c9e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    7c9a:	f7ff fe3d 	bl	7918 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    7c9e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    7ca0:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    7ca2:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    7ca4:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    7ca6:	4631      	mov	r1, r6
    7ca8:	ab01      	add	r3, sp, #4
    7caa:	aa02      	add	r2, sp, #8
    7cac:	4620      	mov	r0, r4
    7cae:	f001 f8a7 	bl	8e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7cb2:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    7cb4:	aa02      	add	r2, sp, #8
    7cb6:	4629      	mov	r1, r5
    7cb8:	2300      	movs	r3, #0
    7cba:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    7cbc:	2e00      	cmp	r6, #0
    7cbe:	d1c9      	bne.n	7c54 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    7cc0:	2000      	movs	r0, #0
}
    7cc2:	b014      	add	sp, #80	; 0x50
    7cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7cc8:	3601      	adds	r6, #1
    7cca:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    7ccc:	7833      	ldrb	r3, [r6, #0]
    7cce:	2b2f      	cmp	r3, #47	; 0x2f
    7cd0:	d0fa      	beq.n	7cc8 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7cd2:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    7cd4:	2224      	movs	r2, #36	; 0x24
    7cd6:	2100      	movs	r1, #0
    7cd8:	a80b      	add	r0, sp, #44	; 0x2c
    7cda:	f008 ff89 	bl	10bf0 <memset>
  m_vol = vol;
    7cde:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    7ce0:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7ce2:	2b10      	cmp	r3, #16
    7ce4:	d003      	beq.n	7cee <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    7ce6:	2b20      	cmp	r3, #32
    7ce8:	d00f      	beq.n	7d0a <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    7cea:	2b0c      	cmp	r3, #12
    7cec:	d1e8      	bne.n	7cc0 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7cee:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7cf0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    7cf4:	2301      	movs	r3, #1
    parent = &tmpDir;
    7cf6:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    7cf8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    7cfc:	e7a8      	b.n	7c50 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    7cfe:	aa02      	add	r2, sp, #8
    7d00:	f7ff feda 	bl	7ab8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    7d04:	b014      	add	sp, #80	; 0x50
    7d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    7d0a:	2340      	movs	r3, #64	; 0x40
    7d0c:	e7f0      	b.n	7cf0 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    7d0e:	bf00      	nop

00007d10 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d14:	2500      	movs	r5, #0
    7d16:	b094      	sub	sp, #80	; 0x50
    7d18:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    7d1a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7d1c:	9201      	str	r2, [sp, #4]
    7d1e:	9502      	str	r5, [sp, #8]
    7d20:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7d24:	2b00      	cmp	r3, #0
    7d26:	d137      	bne.n	7d98 <FatFile::open(FatFile*, char const*, int)+0x88>
    7d28:	780b      	ldrb	r3, [r1, #0]
    7d2a:	460e      	mov	r6, r1
    7d2c:	f013 0f70 	tst.w	r3, #112	; 0x70
    7d30:	d032      	beq.n	7d98 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    7d32:	7813      	ldrb	r3, [r2, #0]
    7d34:	4604      	mov	r4, r0
    7d36:	4615      	mov	r5, r2
    7d38:	2b2f      	cmp	r3, #47	; 0x2f
    7d3a:	d031      	beq.n	7da0 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d3c:	2700      	movs	r7, #0
    7d3e:	e01e      	b.n	7d7e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    7d40:	9d01      	ldr	r5, [sp, #4]
    7d42:	782d      	ldrb	r5, [r5, #0]
    7d44:	2d00      	cmp	r5, #0
    7d46:	d040      	beq.n	7dca <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d48:	f000 ff0e 	bl	8b68 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    7d4c:	46a6      	mov	lr, r4
    7d4e:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d52:	b308      	cbz	r0, 7d98 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    7d54:	4666      	mov	r6, ip
  if (!isOpen()) {
    7d56:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    7d58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7d5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7d60:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7d64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7d68:	f8de 3000 	ldr.w	r3, [lr]
    7d6c:	4620      	mov	r0, r4
    7d6e:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    7d72:	b10d      	cbz	r5, 7d78 <FatFile::open(FatFile*, char const*, int)+0x68>
    7d74:	f7ff fdd0 	bl	7918 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    7d78:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    7d7a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    7d7c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    7d7e:	4629      	mov	r1, r5
    7d80:	ab01      	add	r3, sp, #4
    7d82:	aa0b      	add	r2, sp, #44	; 0x2c
    7d84:	4620      	mov	r0, r4
    7d86:	f001 f83b 	bl	8e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7d8a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    7d8c:	aa0b      	add	r2, sp, #44	; 0x2c
    7d8e:	4631      	mov	r1, r6
    7d90:	2300      	movs	r3, #0
    7d92:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    7d94:	2d00      	cmp	r5, #0
    7d96:	d1d3      	bne.n	7d40 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    7d98:	2000      	movs	r0, #0
}
    7d9a:	b014      	add	sp, #80	; 0x50
    7d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7da0:	3501      	adds	r5, #1
    7da2:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    7da4:	7829      	ldrb	r1, [r5, #0]
    7da6:	292f      	cmp	r1, #47	; 0x2f
    7da8:	d0fa      	beq.n	7da0 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    7daa:	b9a9      	cbnz	r1, 7dd8 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    7dac:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    7dae:	2224      	movs	r2, #36	; 0x24
    7db0:	4620      	mov	r0, r4
    7db2:	f008 ff1d 	bl	10bf0 <memset>
  m_vol = vol;
    7db6:	60a5      	str	r5, [r4, #8]
    7db8:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7dba:	2b10      	cmp	r3, #16
    7dbc:	d003      	beq.n	7dc6 <FatFile::open(FatFile*, char const*, int)+0xb6>
    7dbe:	2b20      	cmp	r3, #32
    7dc0:	d022      	beq.n	7e08 <FatFile::open(FatFile*, char const*, int)+0xf8>
    7dc2:	2b0c      	cmp	r3, #12
    7dc4:	d1e8      	bne.n	7d98 <FatFile::open(FatFile*, char const*, int)+0x88>
    7dc6:	2220      	movs	r2, #32
    7dc8:	e01f      	b.n	7e0a <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    7dca:	4643      	mov	r3, r8
    7dcc:	aa0b      	add	r2, sp, #44	; 0x2c
    7dce:	f000 fecb 	bl	8b68 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    7dd2:	b014      	add	sp, #80	; 0x50
    7dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7dd8:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    7dda:	2224      	movs	r2, #36	; 0x24
    7ddc:	2100      	movs	r1, #0
    7dde:	a802      	add	r0, sp, #8
    7de0:	f008 ff06 	bl	10bf0 <memset>
  m_vol = vol;
    7de4:	9604      	str	r6, [sp, #16]
    7de6:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    7de8:	2b10      	cmp	r3, #16
    7dea:	d003      	beq.n	7df4 <FatFile::open(FatFile*, char const*, int)+0xe4>
    7dec:	2b20      	cmp	r3, #32
    7dee:	d003      	beq.n	7df8 <FatFile::open(FatFile*, char const*, int)+0xe8>
    7df0:	2b0c      	cmp	r3, #12
    7df2:	d1d1      	bne.n	7d98 <FatFile::open(FatFile*, char const*, int)+0x88>
    7df4:	2320      	movs	r3, #32
    7df6:	e000      	b.n	7dfa <FatFile::open(FatFile*, char const*, int)+0xea>
    7df8:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7dfa:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    7dfe:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    7e00:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    7e02:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    7e06:	e799      	b.n	7d3c <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    7e08:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    7e0a:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7e0c:	7022      	strb	r2, [r4, #0]
  return true;
    7e0e:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7e10:	70a3      	strb	r3, [r4, #2]
  return true;
    7e12:	e7c2      	b.n	7d9a <FatFile::open(FatFile*, char const*, int)+0x8a>

00007e14 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7e14:	b119      	cbz	r1, 7e1e <FatFile::open(FatVolume*, char const*, int)+0xa>
    7e16:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    7e1a:	f7ff bf79 	b.w	7d10 <FatFile::open(FatFile*, char const*, int)>
}
    7e1e:	4608      	mov	r0, r1
    7e20:	4770      	bx	lr
    7e22:	bf00      	nop

00007e24 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    7e24:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    7e26:	b570      	push	{r4, r5, r6, lr}
    7e28:	460d      	mov	r5, r1
    7e2a:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    7e2c:	b993      	cbnz	r3, 7e54 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    7e2e:	7806      	ldrb	r6, [r0, #0]
    7e30:	b10e      	cbz	r6, 7e36 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    7e32:	4618      	mov	r0, r3
}
    7e34:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    7e36:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    7e38:	2224      	movs	r2, #36	; 0x24
    7e3a:	4631      	mov	r1, r6
    7e3c:	f008 fed8 	bl	10bf0 <memset>
  m_vol = vol;
    7e40:	60a5      	str	r5, [r4, #8]
    7e42:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7e44:	2b10      	cmp	r3, #16
    7e46:	d018      	beq.n	7e7a <FatFile::openCluster(FatFile*)+0x56>
    7e48:	2b20      	cmp	r3, #32
    7e4a:	d010      	beq.n	7e6e <FatFile::openCluster(FatFile*)+0x4a>
    7e4c:	2b0c      	cmp	r3, #12
    7e4e:	d014      	beq.n	7e7a <FatFile::openCluster(FatFile*)+0x56>
    7e50:	4630      	mov	r0, r6
}
    7e52:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    7e54:	2224      	movs	r2, #36	; 0x24
    7e56:	2100      	movs	r1, #0
    7e58:	f008 feca 	bl	10bf0 <memset>
  m_flags = FILE_FLAG_READ;
    7e5c:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7e5e:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7e60:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7e62:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    7e64:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    7e68:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    7e6a:	6223      	str	r3, [r4, #32]
}
    7e6c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7e6e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    7e70:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7e72:	7022      	strb	r2, [r4, #0]
  return true;
    7e74:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7e76:	70a3      	strb	r3, [r4, #2]
}
    7e78:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7e7a:	2220      	movs	r2, #32
    7e7c:	e7f8      	b.n	7e70 <FatFile::openCluster(FatFile*)+0x4c>
    7e7e:	bf00      	nop

00007e80 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    7e80:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    7e82:	7805      	ldrb	r5, [r0, #0]
    7e84:	b10d      	cbz	r5, 7e8a <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    7e86:	2000      	movs	r0, #0
}
    7e88:	bd70      	pop	{r4, r5, r6, pc}
    7e8a:	460e      	mov	r6, r1
    7e8c:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    7e8e:	2224      	movs	r2, #36	; 0x24
    7e90:	4629      	mov	r1, r5
    7e92:	f008 fead 	bl	10bf0 <memset>
  m_vol = vol;
    7e96:	60a6      	str	r6, [r4, #8]
    7e98:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    7e9a:	2b10      	cmp	r3, #16
    7e9c:	d00b      	beq.n	7eb6 <FatFile::openRoot(FatVolume*)+0x36>
    7e9e:	2b20      	cmp	r3, #32
    7ea0:	d003      	beq.n	7eaa <FatFile::openRoot(FatVolume*)+0x2a>
    7ea2:	2b0c      	cmp	r3, #12
    7ea4:	d007      	beq.n	7eb6 <FatFile::openRoot(FatVolume*)+0x36>
    7ea6:	4628      	mov	r0, r5
}
    7ea8:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7eaa:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    7eac:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7eae:	7022      	strb	r2, [r4, #0]
  return true;
    7eb0:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    7eb2:	70a3      	strb	r3, [r4, #2]
}
    7eb4:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    7eb6:	2220      	movs	r2, #32
    7eb8:	e7f8      	b.n	7eac <FatFile::openRoot(FatVolume*)+0x2c>
    7eba:	bf00      	nop

00007ebc <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    7ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ec0:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7ec4:	7883      	ldrb	r3, [r0, #2]
    7ec6:	b083      	sub	sp, #12
    7ec8:	4605      	mov	r5, r0
  if (!isReadable()) {
    7eca:	07df      	lsls	r7, r3, #31
    7ecc:	f140 808c 	bpl.w	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    7ed0:	4688      	mov	r8, r1
    7ed2:	7801      	ldrb	r1, [r0, #0]
    7ed4:	4692      	mov	sl, r2
  if (isFile()) {
    7ed6:	070e      	lsls	r6, r1, #28
    7ed8:	f100 8091 	bmi.w	7ffe <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    7edc:	068c      	lsls	r4, r1, #26
    7ede:	d508      	bpl.n	7ef2 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7ee0:	6883      	ldr	r3, [r0, #8]
    7ee2:	895a      	ldrh	r2, [r3, #10]
    7ee4:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    7ee6:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7eea:	b29b      	uxth	r3, r3
    7eec:	459a      	cmp	sl, r3
    7eee:	bf28      	it	cs
    7ef0:	469a      	movcs	sl, r3
  while (toRead) {
    7ef2:	f1ba 0f00 	cmp.w	sl, #0
    7ef6:	f000 80af 	beq.w	8058 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7efa:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7efc:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    7f00:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7f02:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    7f04:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7f08:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7f0c:	68af      	ldr	r7, [r5, #8]
    7f0e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    7f12:	d53d      	bpl.n	7f90 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    7f14:	6a39      	ldr	r1, [r7, #32]
    7f16:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    7f1a:	f1bb 0f00 	cmp.w	fp, #0
    7f1e:	d151      	bne.n	7fc4 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7f20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    7f24:	d34e      	bcc.n	7fc4 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    7f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7f28:	4291      	cmp	r1, r2
    7f2a:	d04b      	beq.n	7fc4 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7f2c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    7f30:	f0c0 8082 	bcc.w	8038 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    7f34:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    7f36:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    7f38:	0680      	lsls	r0, r0, #26
    7f3a:	d405      	bmi.n	7f48 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7f3c:	7938      	ldrb	r0, [r7, #4]
    7f3e:	eba0 0009 	sub.w	r0, r0, r9
    7f42:	4283      	cmp	r3, r0
    7f44:	bf28      	it	cs
    7f46:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    7f48:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    7f4a:	ea4f 2443 	mov.w	r4, r3, lsl #9
    7f4e:	d80c      	bhi.n	7f6a <FatFile::read(void*, unsigned int)+0xae>
    7f50:	18c8      	adds	r0, r1, r3
    7f52:	4282      	cmp	r2, r0
    7f54:	d209      	bcs.n	7f6a <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    7f56:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7f5a:	e9cd 1300 	strd	r1, r3, [sp]
    7f5e:	f003 ff0b 	bl	bd78 <FsCache::sync()>
    7f62:	e9dd 1300 	ldrd	r1, r3, [sp]
    7f66:	2800      	cmp	r0, #0
    7f68:	d03e      	beq.n	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    7f6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7f6c:	6802      	ldr	r2, [r0, #0]
    7f6e:	6957      	ldr	r7, [r2, #20]
    7f70:	4642      	mov	r2, r8
    7f72:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7f74:	2800      	cmp	r0, #0
    7f76:	d037      	beq.n	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    7f78:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    7f7a:	1b36      	subs	r6, r6, r4
    dst += n;
    7f7c:	44a0      	add	r8, r4
    m_curPosition += n;
    7f7e:	4422      	add	r2, r4
    7f80:	616a      	str	r2, [r5, #20]
  while (toRead) {
    7f82:	d069      	beq.n	8058 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7f84:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7f86:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    7f8a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    7f8c:	0688      	lsls	r0, r1, #26
    7f8e:	d4c1      	bmi.n	7f14 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    7f90:	f897 9005 	ldrb.w	r9, [r7, #5]
    7f94:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    7f98:	f1bb 0f00 	cmp.w	fp, #0
    7f9c:	d136      	bne.n	800c <FatFile::read(void*, unsigned int)+0x150>
    7f9e:	f1b9 0f00 	cmp.w	r9, #0
    7fa2:	d133      	bne.n	800c <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    7fa4:	2a00      	cmp	r2, #0
    7fa6:	d133      	bne.n	8010 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7fa8:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    7faa:	bf4c      	ite	mi
    7fac:	6a3a      	ldrmi	r2, [r7, #32]
    7fae:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    7fb0:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7fb2:	3a02      	subs	r2, #2
    7fb4:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7fb6:	6979      	ldr	r1, [r7, #20]
    7fb8:	4082      	lsls	r2, r0
    7fba:	4449      	add	r1, r9
    7fbc:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    7fbe:	f1bb 0f00 	cmp.w	fp, #0
    7fc2:	d0ad      	beq.n	7f20 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    7fc4:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7fc8:	2200      	movs	r2, #0
    7fca:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7fce:	42b4      	cmp	r4, r6
    7fd0:	bf28      	it	cs
    7fd2:	4634      	movcs	r4, r6
    7fd4:	f003 fefc 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7fd8:	b130      	cbz	r0, 7fe8 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    7fda:	eb00 010b 	add.w	r1, r0, fp
    7fde:	4622      	mov	r2, r4
    7fe0:	4640      	mov	r0, r8
    7fe2:	f004 fd77 	bl	cad4 <memcpy>
    7fe6:	e7c7      	b.n	7f78 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    7fe8:	786b      	ldrb	r3, [r5, #1]
  return -1;
    7fea:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7fee:	f043 0302 	orr.w	r3, r3, #2
    7ff2:	706b      	strb	r3, [r5, #1]
}
    7ff4:	b003      	add	sp, #12
    7ff6:	ecbd 8b02 	vpop	{d8}
    7ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7ffe:	69c3      	ldr	r3, [r0, #28]
    8000:	6942      	ldr	r2, [r0, #20]
    8002:	1a9b      	subs	r3, r3, r2
    8004:	459a      	cmp	sl, r3
    8006:	bf28      	it	cs
    8008:	469a      	movcs	sl, r3
    800a:	e772      	b.n	7ef2 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    800c:	692a      	ldr	r2, [r5, #16]
    800e:	e7d0      	b.n	7fb2 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    8010:	070b      	lsls	r3, r1, #28
    8012:	d505      	bpl.n	8020 <FatFile::read(void*, unsigned int)+0x164>
    8014:	78aa      	ldrb	r2, [r5, #2]
    8016:	0654      	lsls	r4, r2, #25
    8018:	d502      	bpl.n	8020 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    801a:	692a      	ldr	r2, [r5, #16]
    801c:	3201      	adds	r2, #1
    801e:	e7c7      	b.n	7fb0 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8020:	ee18 2a10 	vmov	r2, s16
    8024:	4638      	mov	r0, r7
    8026:	6929      	ldr	r1, [r5, #16]
    8028:	f001 fa8c 	bl	9544 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    802c:	2800      	cmp	r0, #0
    802e:	dbdb      	blt.n	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    8030:	d00c      	beq.n	804c <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8032:	68af      	ldr	r7, [r5, #8]
    8034:	692a      	ldr	r2, [r5, #16]
    8036:	e7bc      	b.n	7fb2 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    8038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    803a:	4642      	mov	r2, r8
    803c:	6803      	ldr	r3, [r0, #0]
    803e:	691b      	ldr	r3, [r3, #16]
    8040:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    8042:	2800      	cmp	r0, #0
    8044:	d0d0      	beq.n	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    8046:	f44f 7400 	mov.w	r4, #512	; 0x200
    804a:	e795      	b.n	7f78 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    804c:	782b      	ldrb	r3, [r5, #0]
    804e:	f013 0f70 	tst.w	r3, #112	; 0x70
    8052:	d0c9      	beq.n	7fe8 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    8054:	ebaa 0a06 	sub.w	sl, sl, r6
    8058:	4650      	mov	r0, sl
}
    805a:	b003      	add	sp, #12
    805c:	ecbd 8b02 	vpop	{d8}
    8060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008064 <FatFile::peek()>:
int FatFile::peek() {
    8064:	b570      	push	{r4, r5, r6, lr}
    8066:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8068:	2201      	movs	r2, #1
    806a:	4604      	mov	r4, r0
    806c:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    8070:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    8074:	f7ff ff22 	bl	7ebc <FatFile::read(void*, unsigned int)>
    8078:	2801      	cmp	r0, #1
    807a:	bf0c      	ite	eq
    807c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    8080:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    8084:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    8088:	b002      	add	sp, #8
    808a:	bd70      	pop	{r4, r5, r6, pc}

0000808c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    808c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    808e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    8092:	b530      	push	{r4, r5, lr}
    8094:	4604      	mov	r4, r0
    8096:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8098:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    809c:	d009      	beq.n	80b2 <FatFile::readDirCache(bool)+0x26>
    809e:	2901      	cmp	r1, #1
    80a0:	d107      	bne.n	80b2 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    80a2:	3320      	adds	r3, #32
    80a4:	6143      	str	r3, [r0, #20]
    return m_buffer;
    80a6:	68a0      	ldr	r0, [r4, #8]
    80a8:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    80aa:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    80ae:	b003      	add	sp, #12
    80b0:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    80b2:	2201      	movs	r2, #1
    80b4:	f10d 0107 	add.w	r1, sp, #7
    80b8:	4620      	mov	r0, r4
    80ba:	f7ff feff 	bl	7ebc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    80be:	b240      	sxtb	r0, r0
    80c0:	2801      	cmp	r0, #1
    80c2:	d103      	bne.n	80cc <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    80c4:	6963      	ldr	r3, [r4, #20]
    80c6:	331f      	adds	r3, #31
    80c8:	6163      	str	r3, [r4, #20]
    80ca:	e7ec      	b.n	80a6 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    80cc:	2000      	movs	r0, #0
    80ce:	e7ee      	b.n	80ae <FatFile::readDirCache(bool)+0x22>

000080d0 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    80d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    80d4:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    80d6:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    80d8:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    80da:	f013 0f18 	tst.w	r3, #24
    80de:	9608      	str	r6, [sp, #32]
    80e0:	9611      	str	r6, [sp, #68]	; 0x44
    80e2:	d006      	beq.n	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    80e4:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    80e6:	6883      	ldr	r3, [r0, #8]
    80e8:	688a      	ldr	r2, [r1, #8]
    80ea:	4604      	mov	r4, r0
    80ec:	460d      	mov	r5, r1
    80ee:	429a      	cmp	r2, r3
    80f0:	d003      	beq.n	80fa <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    80f2:	2000      	movs	r0, #0
}
    80f4:	b01a      	add	sp, #104	; 0x68
    80f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80fa:	f7ff fc0d 	bl	7918 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    80fe:	46a6      	mov	lr, r4
    8100:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    8104:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8108:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    810c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8110:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8114:	f8de 3000 	ldr.w	r3, [lr]
    8118:	4632      	mov	r2, r6
    811a:	69a1      	ldr	r1, [r4, #24]
    811c:	f8cc 3000 	str.w	r3, [ip]
    8120:	68a3      	ldr	r3, [r4, #8]
    8122:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8126:	f003 fe53 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    812a:	2800      	cmp	r0, #0
    812c:	d0e1      	beq.n	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    812e:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    8130:	46ec      	mov	ip, sp
  if (isFile()) {
    8132:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    8136:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    813a:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    813e:	0152      	lsls	r2, r2, #5
    8140:	f8de 1004 	ldr.w	r1, [lr, #4]
    8144:	5880      	ldr	r0, [r0, r2]
    8146:	f8de 300c 	ldr.w	r3, [lr, #12]
    814a:	f8de 2008 	ldr.w	r2, [lr, #8]
    814e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8152:	f8de 1014 	ldr.w	r1, [lr, #20]
    8156:	f8de 2018 	ldr.w	r2, [lr, #24]
    815a:	f8de 301c 	ldr.w	r3, [lr, #28]
    815e:	f8de 0010 	ldr.w	r0, [lr, #16]
    8162:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8166:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    816a:	463a      	mov	r2, r7
    816c:	4629      	mov	r1, r5
  if (isFile()) {
    816e:	f040 809b 	bne.w	82a8 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    8172:	a808      	add	r0, sp, #32
    8174:	f7ff fd56 	bl	7c24 <FatFile::mkdir(FatFile*, char const*, bool)>
    8178:	2800      	cmp	r0, #0
    817a:	d0ba      	beq.n	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    817c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    817e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    8182:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    8184:	990e      	ldr	r1, [sp, #56]	; 0x38
    8186:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    8188:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    818a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    818e:	68a0      	ldr	r0, [r4, #8]
    8190:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    8192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8194:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    8196:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    8198:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    819a:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    819e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    81a2:	f003 fe15 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    81a6:	2800      	cmp	r0, #0
    81a8:	d0a3      	beq.n	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    81aa:	88a3      	ldrh	r3, [r4, #4]
    81ac:	f003 030f 	and.w	r3, r3, #15
    81b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    81b4:	f8dd 300d 	ldr.w	r3, [sp, #13]
    81b8:	f8c0 300d 	str.w	r3, [r0, #13]
    81bc:	f8dd 3011 	ldr.w	r3, [sp, #17]
    81c0:	f8c0 3011 	str.w	r3, [r0, #17]
    81c4:	f8dd 3015 	ldr.w	r3, [sp, #21]
    81c8:	f8c0 3015 	str.w	r3, [r0, #21]
    81cc:	f8dd 3019 	ldr.w	r3, [sp, #25]
    81d0:	f8c0 3019 	str.w	r3, [r0, #25]
    81d4:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    81d8:	f8a0 301d 	strh.w	r3, [r0, #29]
    81dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
    81e0:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    81e2:	f89d 300b 	ldrb.w	r3, [sp, #11]
    81e6:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    81e8:	2e00      	cmp	r6, #0
    81ea:	d03b      	beq.n	8264 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    81ec:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    81ee:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    81f0:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    81f2:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    81f4:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    81f6:	408b      	lsls	r3, r1
    81f8:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    81fc:	4419      	add	r1, r3
    81fe:	f003 fde7 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8202:	4605      	mov	r5, r0
    8204:	2800      	cmp	r0, #0
    8206:	f43f af74 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    820a:	6a00      	ldr	r0, [r0, #32]
    820c:	466f      	mov	r7, sp
    820e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8210:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    8212:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    8214:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8216:	6b28      	ldr	r0, [r5, #48]	; 0x30
    8218:	6b69      	ldr	r1, [r5, #52]	; 0x34
    821a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    821c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    821e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    8220:	4631      	mov	r1, r6
    8222:	68a0      	ldr	r0, [r4, #8]
    8224:	f001 f9a0 	bl	9568 <FatPartition::freeChain(unsigned long)>
    8228:	2800      	cmp	r0, #0
    822a:	f43f af62 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    822e:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8230:	6a23      	ldr	r3, [r4, #32]
    8232:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    8234:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8236:	3b02      	subs	r3, #2
    8238:	f850 1c14 	ldr.w	r1, [r0, #-20]
    823c:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    823e:	2201      	movs	r2, #1
    8240:	4419      	add	r1, r3
    8242:	f003 fdc5 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8246:	4606      	mov	r6, r0
    8248:	2800      	cmp	r0, #0
    824a:	f43f af52 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    824e:	466d      	mov	r5, sp
    8250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8252:	6230      	str	r0, [r6, #32]
    8254:	6271      	str	r1, [r6, #36]	; 0x24
    8256:	62b2      	str	r2, [r6, #40]	; 0x28
    8258:	62f3      	str	r3, [r6, #44]	; 0x2c
    825a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    825c:	6330      	str	r0, [r6, #48]	; 0x30
    825e:	6371      	str	r1, [r6, #52]	; 0x34
    8260:	63b2      	str	r2, [r6, #56]	; 0x38
    8262:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8264:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    8266:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    8268:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    826a:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    826c:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    826e:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    8272:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    8276:	f000 fe2d 	bl	8ed4 <FatFile::remove()>
    827a:	2800      	cmp	r0, #0
    827c:	f43f af39 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    8280:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8282:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8286:	f003 fd77 	bl	bd78 <FsCache::sync()>
    828a:	2800      	cmp	r0, #0
    828c:	f43f af31 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    8290:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8294:	f003 fd70 	bl	bd78 <FsCache::sync()>
    8298:	2800      	cmp	r0, #0
    829a:	f43f af2a 	beq.w	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    829e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    82a0:	6803      	ldr	r3, [r0, #0]
    82a2:	6a1b      	ldr	r3, [r3, #32]
    82a4:	4798      	blx	r3
    82a6:	e725      	b.n	80f4 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    82a8:	f640 2301 	movw	r3, #2561	; 0xa01
    82ac:	4660      	mov	r0, ip
    82ae:	f7ff fd2f 	bl	7d10 <FatFile::open(FatFile*, char const*, int)>
    82b2:	2800      	cmp	r0, #0
    82b4:	f47f af63 	bne.w	817e <FatFile::rename(FatFile*, char const*)+0xae>
    82b8:	e71b      	b.n	80f2 <FatFile::rename(FatFile*, char const*)+0x22>
    82ba:	bf00      	nop

000082bc <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    82bc:	7803      	ldrb	r3, [r0, #0]
    82be:	06da      	lsls	r2, r3, #27
    82c0:	d401      	bmi.n	82c6 <FatFile::rmdir()+0xa>
}
    82c2:	2000      	movs	r0, #0
    82c4:	4770      	bx	lr
  if (pos == m_curPosition) {
    82c6:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    82c8:	b530      	push	{r4, r5, lr}
    82ca:	4604      	mov	r4, r0
    82cc:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    82ce:	b133      	cbz	r3, 82de <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    82d0:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    82d2:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    82d4:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    82d8:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    82dc:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    82de:	2300      	movs	r3, #0
    82e0:	e00f      	b.n	8302 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    82e2:	6163      	str	r3, [r4, #20]
    82e4:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    82e6:	016a      	lsls	r2, r5, #5
    82e8:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    82ea:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    82ec:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    82f0:	b1ea      	cbz	r2, 832e <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    82f2:	2ae5      	cmp	r2, #229	; 0xe5
    82f4:	d004      	beq.n	8300 <FatFile::rmdir()+0x44>
    82f6:	2a2e      	cmp	r2, #46	; 0x2e
    82f8:	d002      	beq.n	8300 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    82fa:	7adb      	ldrb	r3, [r3, #11]
    82fc:	071b      	lsls	r3, r3, #28
    82fe:	d522      	bpl.n	8346 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8300:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    8302:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8306:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    830a:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    830e:	d1e8      	bne.n	82e2 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    8310:	2201      	movs	r2, #1
    8312:	f10d 0107 	add.w	r1, sp, #7
    8316:	4620      	mov	r0, r4
    8318:	f7ff fdd0 	bl	7ebc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    831c:	b240      	sxtb	r0, r0
    831e:	2801      	cmp	r0, #1
    8320:	d103      	bne.n	832a <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    8322:	6963      	ldr	r3, [r4, #20]
    8324:	331f      	adds	r3, #31
    8326:	6163      	str	r3, [r4, #20]
    8328:	e7dc      	b.n	82e4 <FatFile::rmdir()+0x28>
      if (!getError()) {
    832a:	7863      	ldrb	r3, [r4, #1]
    832c:	b95b      	cbnz	r3, 8346 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    832e:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    8330:	2208      	movs	r2, #8
  return remove();
    8332:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    8334:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    8338:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    833a:	70a3      	strb	r3, [r4, #2]
}
    833c:	b003      	add	sp, #12
    833e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    8342:	f000 bdc7 	b.w	8ed4 <FatFile::remove()>
}
    8346:	2000      	movs	r0, #0
    8348:	b003      	add	sp, #12
    834a:	bd30      	pop	{r4, r5, pc}

0000834c <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    834c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    8350:	7803      	ldrb	r3, [r0, #0]
    8352:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    8354:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    8356:	2b00      	cmp	r3, #0
    8358:	d039      	beq.n	83ce <FatFile::seekSet(unsigned long)+0x82>
    835a:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    835c:	6941      	ldr	r1, [r0, #20]
    835e:	42a9      	cmp	r1, r5
    8360:	d042      	beq.n	83e8 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    8362:	2d00      	cmp	r5, #0
    8364:	d037      	beq.n	83d6 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    8366:	0718      	lsls	r0, r3, #28
    8368:	d52a      	bpl.n	83c0 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    836a:	69e2      	ldr	r2, [r4, #28]
    836c:	42aa      	cmp	r2, r5
    836e:	d32e      	bcc.n	83ce <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    8370:	f8d4 c008 	ldr.w	ip, [r4, #8]
    8374:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    8376:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    8378:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    837c:	f012 0f40 	tst.w	r2, #64	; 0x40
    8380:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    8384:	b2c0      	uxtb	r0, r0
    8386:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    838a:	d130      	bne.n	83ee <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    838c:	1e4a      	subs	r2, r1, #1
    838e:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    8390:	b109      	cbz	r1, 8396 <FatFile::seekSet(unsigned long)+0x4a>
    8392:	4296      	cmp	r6, r2
    8394:	d22f      	bcs.n	83f6 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8396:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    8398:	bf4c      	ite	mi
    839a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    839e:	6a23      	ldrpl	r3, [r4, #32]
    83a0:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    83a2:	f104 0810 	add.w	r8, r4, #16
    83a6:	e006      	b.n	83b6 <FatFile::seekSet(unsigned long)+0x6a>
    83a8:	6921      	ldr	r1, [r4, #16]
    83aa:	3e01      	subs	r6, #1
    83ac:	68a0      	ldr	r0, [r4, #8]
    83ae:	f001 f8c9 	bl	9544 <FatPartition::fatGet(unsigned long, unsigned long*)>
    83b2:	2800      	cmp	r0, #0
    83b4:	dd0b      	ble.n	83ce <FatFile::seekSet(unsigned long)+0x82>
    83b6:	4642      	mov	r2, r8
  while (nNew--) {
    83b8:	2e00      	cmp	r6, #0
    83ba:	d1f5      	bne.n	83a8 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    83bc:	78a2      	ldrb	r2, [r4, #2]
    83be:	e00c      	b.n	83da <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    83c0:	069a      	lsls	r2, r3, #26
    83c2:	d5d5      	bpl.n	8370 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    83c4:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    83c6:	895b      	ldrh	r3, [r3, #10]
    83c8:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    83cc:	d9f6      	bls.n	83bc <FatFile::seekSet(unsigned long)+0x70>
  return false;
    83ce:	2000      	movs	r0, #0
  m_curCluster = tmp;
    83d0:	6127      	str	r7, [r4, #16]
}
    83d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83d6:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    83d8:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    83da:	f022 0220 	bic.w	r2, r2, #32
  return true;
    83de:	2001      	movs	r0, #1
  m_curPosition = pos;
    83e0:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    83e2:	70a2      	strb	r2, [r4, #2]
}
    83e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    83e8:	2001      	movs	r0, #1
}
    83ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    83ee:	6a23      	ldr	r3, [r4, #32]
    83f0:	4433      	add	r3, r6
    83f2:	6123      	str	r3, [r4, #16]
    goto done;
    83f4:	e7f1      	b.n	83da <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    83f6:	1ab6      	subs	r6, r6, r2
    83f8:	e7d3      	b.n	83a2 <FatFile::seekSet(unsigned long)+0x56>
    83fa:	bf00      	nop

000083fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    83fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8400:	460e      	mov	r6, r1
    8402:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    8404:	2100      	movs	r1, #0
    8406:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    8408:	4604      	mov	r4, r0
    840a:	4698      	mov	r8, r3
    840c:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    8410:	f008 fbee 	bl	10bf0 <memset>
  m_vol = dirFile->m_vol;
    8414:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    8416:	6a33      	ldr	r3, [r6, #32]
    8418:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    841c:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    841e:	f005 050f 	and.w	r5, r5, #15
    8422:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    8426:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    842a:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    842c:	070b      	lsls	r3, r1, #28
    842e:	d411      	bmi.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    8430:	f001 0117 	and.w	r1, r1, #23
    8434:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    8436:	7ad3      	ldrb	r3, [r2, #11]
    8438:	f013 0f18 	tst.w	r3, #24
    843c:	d102      	bne.n	8444 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    843e:	f041 0108 	orr.w	r1, r1, #8
    8442:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    8444:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    8448:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    844a:	2b01      	cmp	r3, #1
    844c:	d038      	beq.n	84c0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    844e:	2b02      	cmp	r3, #2
    8450:	d006      	beq.n	8460 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    8452:	b1f3      	cbz	r3, 8492 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    8454:	2300      	movs	r3, #0
  return false;
    8456:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    8458:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    845a:	70a3      	strb	r3, [r4, #2]
}
    845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    8460:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    8462:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    8464:	06cd      	lsls	r5, r1, #27
    8466:	d4f5      	bmi.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    8468:	07ce      	lsls	r6, r1, #31
    846a:	d4f3      	bmi.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    846c:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    8470:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8474:	ea43 0301 	orr.w	r3, r3, r1
    8478:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    847a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    847c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    847e:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    8480:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8482:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    8486:	d012      	beq.n	84ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    8488:	bb19      	cbnz	r1, 84d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    848a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    848e:	70a3      	strb	r3, [r4, #2]
    8490:	e010      	b.n	84b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    8492:	f418 6f80 	tst.w	r8, #1024	; 0x400
    8496:	d1dd      	bne.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8498:	f008 0308 	and.w	r3, r8, #8
    849c:	f043 0301 	orr.w	r3, r3, #1
    84a0:	70a3      	strb	r3, [r4, #2]
    84a2:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    84a4:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    84a6:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    84a8:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    84aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    84ae:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    84b0:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    84b2:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    84b4:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    84b8:	d104      	bne.n	84c4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    84ba:	2001      	movs	r0, #1
}
    84bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    84c0:	2302      	movs	r3, #2
    84c2:	e7ce      	b.n	8462 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    84c4:	69e1      	ldr	r1, [r4, #28]
    84c6:	4620      	mov	r0, r4
    84c8:	f7ff ff40 	bl	834c <FatFile::seekSet(unsigned long)>
    84cc:	2800      	cmp	r0, #0
    84ce:	d1f4      	bne.n	84ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    84d0:	e7c0      	b.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    84d2:	f001 f849 	bl	9568 <FatPartition::freeChain(unsigned long)>
    84d6:	2800      	cmp	r0, #0
    84d8:	d0bc      	beq.n	8454 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    84da:	78a3      	ldrb	r3, [r4, #2]
    84dc:	e7d5      	b.n	848a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    84de:	bf00      	nop

000084e0 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    84e0:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    84e2:	2b00      	cmp	r3, #0
    84e4:	d145      	bne.n	8572 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    84e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    84ea:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    84ec:	b084      	sub	sp, #16
    84ee:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    84f0:	f013 0f70 	tst.w	r3, #112	; 0x70
    84f4:	d030      	beq.n	8558 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    84f6:	694b      	ldr	r3, [r1, #20]
    84f8:	f013 051f 	ands.w	r5, r3, #31
    84fc:	d12c      	bne.n	8558 <FatFile::openNext(FatFile*, int)+0x78>
    84fe:	4606      	mov	r6, r0
    8500:	4690      	mov	r8, r2
    8502:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    8504:	2201      	movs	r2, #1
    8506:	f10d 010f 	add.w	r1, sp, #15
    850a:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    850c:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    8510:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    8512:	f7ff fcd3 	bl	7ebc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    8516:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    8518:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    851c:	2801      	cmp	r0, #1
    851e:	d11b      	bne.n	8558 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    8520:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    8522:	68a1      	ldr	r1, [r4, #8]
    8524:	331f      	adds	r3, #31
    8526:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    852a:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    852c:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    8530:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    8534:	b182      	cbz	r2, 8558 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    8536:	2a2e      	cmp	r2, #46	; 0x2e
    8538:	d012      	beq.n	8560 <FatFile::openNext(FatFile*, int)+0x80>
    853a:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    853e:	fab0 f080 	clz	r0, r0
    8542:	0940      	lsrs	r0, r0, #5
    8544:	b960      	cbnz	r0, 8560 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    8546:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    854a:	f011 0e08 	ands.w	lr, r1, #8
    854e:	d012      	beq.n	8576 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    8550:	290f      	cmp	r1, #15
    8552:	d007      	beq.n	8564 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    8554:	4605      	mov	r5, r0
    8556:	e7d5      	b.n	8504 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    8558:	2000      	movs	r0, #0
}
    855a:	b004      	add	sp, #16
    855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    8560:	2500      	movs	r5, #0
    8562:	e7cf      	b.n	8504 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8564:	0651      	lsls	r1, r2, #25
    8566:	d5cd      	bpl.n	8504 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    8568:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    856c:	f89c 900d 	ldrb.w	r9, [ip, #13]
    8570:	e7c8      	b.n	8504 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    8572:	2000      	movs	r0, #0
}
    8574:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    8576:	b185      	cbz	r5, 859a <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    8578:	f10c 010a 	add.w	r1, ip, #10
    857c:	e001      	b.n	8582 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    857e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    8582:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    8586:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8588:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    858c:	fa52 f383 	uxtab	r3, r2, r3
    8590:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    8594:	d1f3      	bne.n	857e <FatFile::openNext(FatFile*, int)+0x9e>
    8596:	45ce      	cmp	lr, r9
    8598:	d1de      	bne.n	8558 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    859a:	4643      	mov	r3, r8
    859c:	b2ba      	uxth	r2, r7
    859e:	4621      	mov	r1, r4
    85a0:	4630      	mov	r0, r6
    85a2:	9500      	str	r5, [sp, #0]
    85a4:	f7ff ff2a 	bl	83fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    85a8:	e7d7      	b.n	855a <FatFile::openNext(FatFile*, int)+0x7a>
    85aa:	bf00      	nop

000085ac <FatFile::sync()>:
  if (!isOpen()) {
    85ac:	7803      	ldrb	r3, [r0, #0]
    85ae:	b10b      	cbz	r3, 85b4 <FatFile::sync()+0x8>
    85b0:	f7ff b9b2 	b.w	7918 <FatFile::sync() [clone .part.0]>
}
    85b4:	2001      	movs	r0, #1
    85b6:	4770      	bx	lr

000085b8 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    85b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    85bc:	7883      	ldrb	r3, [r0, #2]
    85be:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    85c0:	079c      	lsls	r4, r3, #30
    85c2:	d577      	bpl.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    85c4:	4688      	mov	r8, r1
    85c6:	0719      	lsls	r1, r3, #28
    85c8:	4691      	mov	r9, r2
    85ca:	f100 80b5 	bmi.w	8738 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    85ce:	696b      	ldr	r3, [r5, #20]
    85d0:	eb13 0209 	adds.w	r2, r3, r9
    85d4:	d26e      	bcs.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    85d6:	f1b9 0f00 	cmp.w	r9, #0
    85da:	d040      	beq.n	865e <FatFile::write(void const*, unsigned int)+0xa6>
    85dc:	464f      	mov	r7, r9
    m_status = 0;
    85de:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    85e2:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    85e4:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    85e8:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    85ea:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    85ec:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    85f0:	d13f      	bne.n	8672 <FatFile::write(void const*, unsigned int)+0xba>
    85f2:	2e00      	cmp	r6, #0
    85f4:	d13d      	bne.n	8672 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    85f6:	2900      	cmp	r1, #0
    85f8:	d06e      	beq.n	86d8 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    85fa:	78aa      	ldrb	r2, [r5, #2]
    85fc:	0652      	lsls	r2, r2, #25
    85fe:	d576      	bpl.n	86ee <FatFile::write(void const*, unsigned int)+0x136>
    8600:	69ea      	ldr	r2, [r5, #28]
    8602:	429a      	cmp	r2, r3
    8604:	d973      	bls.n	86ee <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    8606:	3101      	adds	r1, #1
    8608:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    860a:	3902      	subs	r1, #2
    860c:	7982      	ldrb	r2, [r0, #6]
    860e:	6943      	ldr	r3, [r0, #20]
    8610:	4091      	lsls	r1, r2
    8612:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    8614:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    8618:	d353      	bcc.n	86c2 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    861a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    861e:	d370      	bcc.n	8702 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8620:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8622:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8624:	1b1b      	subs	r3, r3, r4
    8626:	4293      	cmp	r3, r2
    8628:	bf28      	it	cs
    862a:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    862c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    862e:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    8630:	ea4f 2443 	mov.w	r4, r3, lsl #9
    8634:	d307      	bcc.n	8646 <FatFile::write(void const*, unsigned int)+0x8e>
    8636:	185e      	adds	r6, r3, r1
    8638:	42b2      	cmp	r2, r6
    863a:	d204      	bcs.n	8646 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    863c:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    8640:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8644:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    8646:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8648:	4642      	mov	r2, r8
    864a:	6806      	ldr	r6, [r0, #0]
    864c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    864e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8650:	b380      	cbz	r0, 86b4 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    8652:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    8654:	1b3f      	subs	r7, r7, r4
    src += n;
    8656:	44a0      	add	r8, r4
    m_curPosition += n;
    8658:	4423      	add	r3, r4
    865a:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    865c:	d1c1      	bne.n	85e2 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    865e:	69ea      	ldr	r2, [r5, #28]
    8660:	429a      	cmp	r2, r3
    8662:	d276      	bcs.n	8752 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8664:	78aa      	ldrb	r2, [r5, #2]
    8666:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    8668:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    866a:	f062 037f 	orn	r3, r2, #127	; 0x7f
    866e:	70ab      	strb	r3, [r5, #2]
    8670:	e025      	b.n	86be <FatFile::write(void const*, unsigned int)+0x106>
    8672:	7982      	ldrb	r2, [r0, #6]
    8674:	3902      	subs	r1, #2
    8676:	6943      	ldr	r3, [r0, #20]
    8678:	4091      	lsls	r1, r2
    867a:	4419      	add	r1, r3
                      + sectorOfCluster;
    867c:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    867e:	2e00      	cmp	r6, #0
    8680:	d0c8      	beq.n	8614 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    8682:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    8686:	2201      	movs	r2, #1
    8688:	42bc      	cmp	r4, r7
    868a:	bf28      	it	cs
    868c:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    868e:	3028      	adds	r0, #40	; 0x28
    8690:	f003 fb9e 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8694:	b170      	cbz	r0, 86b4 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    8696:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8698:	4426      	add	r6, r4
      memcpy(dst, src, n);
    869a:	4622      	mov	r2, r4
    869c:	4641      	mov	r1, r8
    869e:	f004 fa19 	bl	cad4 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    86a2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    86a6:	68a8      	ldr	r0, [r5, #8]
    86a8:	d1d3      	bne.n	8652 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    86aa:	3028      	adds	r0, #40	; 0x28
    86ac:	f003 fb64 	bl	bd78 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    86b0:	2800      	cmp	r0, #0
    86b2:	d1ce      	bne.n	8652 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    86b4:	786b      	ldrb	r3, [r5, #1]
  return 0;
    86b6:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    86b8:	f043 0301 	orr.w	r3, r3, #1
    86bc:	706b      	strb	r3, [r5, #1]
}
    86be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    86c2:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    86c6:	696a      	ldr	r2, [r5, #20]
    86c8:	69eb      	ldr	r3, [r5, #28]
    86ca:	42bc      	cmp	r4, r7
    86cc:	bf28      	it	cs
    86ce:	463c      	movcs	r4, r7
    86d0:	429a      	cmp	r2, r3
    86d2:	d305      	bcc.n	86e0 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    86d4:	2205      	movs	r2, #5
    86d6:	e7da      	b.n	868e <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    86d8:	6a29      	ldr	r1, [r5, #32]
    86da:	b321      	cbz	r1, 8726 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    86dc:	6129      	str	r1, [r5, #16]
    86de:	e794      	b.n	860a <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    86e0:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    86e2:	f013 0f20 	tst.w	r3, #32
    86e6:	bf14      	ite	ne
    86e8:	2205      	movne	r2, #5
    86ea:	2201      	moveq	r2, #1
    86ec:	e7cf      	b.n	868e <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    86ee:	f105 0210 	add.w	r2, r5, #16
    86f2:	f000 ff27 	bl	9544 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    86f6:	2800      	cmp	r0, #0
    86f8:	dbdc      	blt.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    86fa:	d024      	beq.n	8746 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    86fc:	68a8      	ldr	r0, [r5, #8]
    86fe:	6929      	ldr	r1, [r5, #16]
    8700:	e783      	b.n	860a <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    8702:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8704:	428b      	cmp	r3, r1
    8706:	d104      	bne.n	8712 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    8708:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    870c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8710:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    8712:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8714:	4642      	mov	r2, r8
    8716:	6803      	ldr	r3, [r0, #0]
    8718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    871a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    871c:	2800      	cmp	r0, #0
    871e:	d0c9      	beq.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    8720:	f44f 7400 	mov.w	r4, #512	; 0x200
    8724:	e795      	b.n	8652 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    8726:	4628      	mov	r0, r5
    8728:	f7ff f950 	bl	79cc <FatFile::addCluster()>
    872c:	2800      	cmp	r0, #0
    872e:	d0c1      	beq.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    8730:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    8732:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    8734:	6229      	str	r1, [r5, #32]
    8736:	e768      	b.n	860a <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    8738:	69c1      	ldr	r1, [r0, #28]
    873a:	f7ff fe07 	bl	834c <FatFile::seekSet(unsigned long)>
    873e:	2800      	cmp	r0, #0
    8740:	f47f af45 	bne.w	85ce <FatFile::write(void const*, unsigned int)+0x16>
    8744:	e7b6      	b.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    8746:	4628      	mov	r0, r5
    8748:	f7ff f940 	bl	79cc <FatFile::addCluster()>
    874c:	2800      	cmp	r0, #0
    874e:	d1d5      	bne.n	86fc <FatFile::write(void const*, unsigned int)+0x144>
    8750:	e7b0      	b.n	86b4 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    8752:	4b05      	ldr	r3, [pc, #20]	; (8768 <FatFile::write(void const*, unsigned int)+0x1b0>)
    8754:	681b      	ldr	r3, [r3, #0]
    8756:	b12b      	cbz	r3, 8764 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8758:	78ab      	ldrb	r3, [r5, #2]
    875a:	4648      	mov	r0, r9
    875c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8760:	70ab      	strb	r3, [r5, #2]
    8762:	e7ac      	b.n	86be <FatFile::write(void const*, unsigned int)+0x106>
    8764:	4648      	mov	r0, r9
    8766:	e7aa      	b.n	86be <FatFile::write(void const*, unsigned int)+0x106>
    8768:	200422dc 	.word	0x200422dc

0000876c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8770:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8772:	b08d      	sub	sp, #52	; 0x34
    8774:	4614      	mov	r4, r2
    next = begin;
    8776:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8778:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    877a:	4606      	mov	r6, r0
    877c:	4689      	mov	r9, r1
  FatFile dir = *this;
    877e:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8780:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    8782:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    8786:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    878a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    878c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    8790:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8792:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    8796:	6065      	str	r5, [r4, #4]
    8798:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    879a:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    879c:	f8a4 e00c 	strh.w	lr, [r4, #12]
    87a0:	2b00      	cmp	r3, #0
    87a2:	d03f      	beq.n	8824 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    87a4:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    87a8:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    87ac:	a803      	add	r0, sp, #12
    87ae:	b289      	uxth	r1, r1
    87b0:	0149      	lsls	r1, r1, #5
    87b2:	f7ff fdcb 	bl	834c <FatFile::seekSet(unsigned long)>
    87b6:	b350      	cbz	r0, 880e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    87b8:	2100      	movs	r1, #0
    87ba:	a803      	add	r0, sp, #12
    87bc:	f7ff fc66 	bl	808c <FatFile::readDirCache(bool)>
    if (!ldir) {
    87c0:	4607      	mov	r7, r0
    87c2:	b320      	cbz	r0, 880e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    87c4:	2500      	movs	r5, #0
    87c6:	e00d      	b.n	87e4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    87c8:	f003 fb2a 	bl	be20 <FsName::get16()>
    87cc:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    87ce:	4658      	mov	r0, fp
    87d0:	f003 fbea 	bl	bfa8 <toUpcase(unsigned short)>
    87d4:	4683      	mov	fp, r0
    87d6:	4640      	mov	r0, r8
    87d8:	f003 fbe6 	bl	bfa8 <toUpcase(unsigned short)>
    87dc:	4583      	cmp	fp, r0
    87de:	d116      	bne.n	880e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    87e0:	2d0d      	cmp	r5, #13
    87e2:	d018      	beq.n	8816 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    87e4:	b2ea      	uxtb	r2, r5
    87e6:	4639      	mov	r1, r7
    87e8:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    87ea:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    87ec:	f000 fc18 	bl	9020 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    87f0:	89a3      	ldrh	r3, [r4, #12]
    87f2:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    87f4:	4620      	mov	r0, r4
    87f6:	2b00      	cmp	r3, #0
    87f8:	d1e6      	bne.n	87c8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    87fa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    87fe:	4293      	cmp	r3, r2
    8800:	d1e2      	bne.n	87c8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    8802:	fabb f08b 	clz	r0, fp
    8806:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    8808:	b00d      	add	sp, #52	; 0x34
    880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    880e:	2000      	movs	r0, #0
}
    8810:	b00d      	add	sp, #52	; 0x34
    8812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8816:	f10a 0a01 	add.w	sl, sl, #1
    881a:	9b01      	ldr	r3, [sp, #4]
    881c:	fa5f fa8a 	uxtb.w	sl, sl
    8820:	4553      	cmp	r3, sl
    8822:	d2c1      	bcs.n	87a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    8824:	2001      	movs	r0, #1
    8826:	e7ef      	b.n	8808 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00008828 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    882c:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    882e:	b08d      	sub	sp, #52	; 0x34
    8830:	4616      	mov	r6, r2
    8832:	469a      	mov	sl, r3
  FatFile dir = *this;
    8834:	f10d 0c0c 	add.w	ip, sp, #12
    8838:	f102 0415 	add.w	r4, r2, #21
    883c:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8840:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    8842:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    8846:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    884c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    884e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8852:	683b      	ldr	r3, [r7, #0]
    8854:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8858:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    885c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    8860:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8864:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8866:	fa52 f383 	uxtab	r3, r2, r3
    886a:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    886e:	d1f3      	bne.n	8858 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    8870:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    8872:	f04f 0800 	mov.w	r8, #0
    next = begin;
    8876:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8878:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    887c:	f1ba 0f00 	cmp.w	sl, #0
    8880:	d04e      	beq.n	8920 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    8882:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8884:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8886:	a803      	add	r0, sp, #12
    8888:	1bd9      	subs	r1, r3, r7
    888a:	b289      	uxth	r1, r1
    888c:	0149      	lsls	r1, r1, #5
    888e:	f7ff fd5d 	bl	834c <FatFile::seekSet(unsigned long)>
    8892:	2800      	cmp	r0, #0
    8894:	d055      	beq.n	8942 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8896:	2100      	movs	r1, #0
    8898:	a803      	add	r0, sp, #12
    889a:	f7ff fbf7 	bl	808c <FatFile::readDirCache(bool)>
    if (!ldir) {
    889e:	2800      	cmp	r0, #0
    88a0:	d04f      	beq.n	8942 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    88a2:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    88a4:	4557      	cmp	r7, sl
    88a6:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    88aa:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    88ae:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    88b2:	f04f 0500 	mov.w	r5, #0
    88b6:	f043 0301 	orr.w	r3, r3, #1
    88ba:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    88be:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    88c2:	bf0c      	ite	eq
    88c4:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    88c8:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    88ca:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    88cc:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    88d0:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    88d2:	7303      	strb	r3, [r0, #12]
    88d4:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    88d8:	f880 900d 	strb.w	r9, [r0, #13]
    88dc:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    88de:	e006      	b.n	88ee <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    88e0:	f8ab 0000 	strh.w	r0, [fp]
    88e4:	3401      	adds	r4, #1
    88e6:	3501      	adds	r5, #1
    88e8:	f10b 0b02 	add.w	fp, fp, #2
    88ec:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    88ee:	89b0      	ldrh	r0, [r6, #12]
    88f0:	b918      	cbnz	r0, 88fa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    88f2:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    88f6:	429a      	cmp	r2, r3
    88f8:	d016      	beq.n	8928 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    88fa:	4630      	mov	r0, r6
    88fc:	f003 fa90 	bl	be20 <FsName::get16()>
  if (i < 5) {
    8900:	2d04      	cmp	r5, #4
    8902:	b2eb      	uxtb	r3, r5
    8904:	d9ec      	bls.n	88e0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    8906:	2b0a      	cmp	r3, #10
    8908:	d802      	bhi.n	8910 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    890a:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    890e:	e7e9      	b.n	88e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    8910:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    8912:	f8ab 0005 	strh.w	r0, [fp, #5]
    8916:	d1e5      	bne.n	88e4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8918:	3701      	adds	r7, #1
    891a:	b2ff      	uxtb	r7, r7
    891c:	45ba      	cmp	sl, r7
    891e:	d2b1      	bcs.n	8884 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8920:	2001      	movs	r0, #1

 fail:
  return false;
}
    8922:	b00d      	add	sp, #52	; 0x34
    8924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    8928:	f1b8 0f00 	cmp.w	r8, #0
    892c:	d006      	beq.n	893c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    892e:	f108 0801 	add.w	r8, r8, #1
    8932:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8936:	fa5f f888 	uxtb.w	r8, r8
    893a:	e7e1      	b.n	8900 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    893c:	f04f 0801 	mov.w	r8, #1
    8940:	e7de      	b.n	8900 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    8942:	2000      	movs	r0, #0
}
    8944:	b00d      	add	sp, #52	; 0x34
    8946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    894a:	bf00      	nop

0000894c <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    894c:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    894e:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    8952:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    8956:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    895a:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    895e:	4686      	mov	lr, r0
  const char* end = fname->end;
    8960:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    8962:	6051      	str	r1, [r2, #4]
    8964:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8968:	781a      	ldrb	r2, [r3, #0]
    896a:	2a2e      	cmp	r2, #46	; 0x2e
    896c:	bf14      	ite	ne
    896e:	2001      	movne	r0, #1
    8970:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8972:	d103      	bne.n	897c <FatFile::makeSFN(FatLfn_t*)+0x30>
    8974:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8978:	2a2e      	cmp	r2, #46	; 0x2e
    897a:	d0fb      	beq.n	8974 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    897c:	1e61      	subs	r1, r4, #1
    897e:	4299      	cmp	r1, r3
    8980:	d90b      	bls.n	899a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    8982:	460a      	mov	r2, r1
    8984:	e002      	b.n	898c <FatFile::makeSFN(FatLfn_t*)+0x40>
    8986:	4293      	cmp	r3, r2
    8988:	4611      	mov	r1, r2
    898a:	d006      	beq.n	899a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    898c:	4611      	mov	r1, r2
    898e:	3a01      	subs	r2, #1
    8990:	f891 c000 	ldrb.w	ip, [r1]
    8994:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    8998:	d1f5      	bne.n	8986 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    899a:	429c      	cmp	r4, r3
    899c:	f04f 0500 	mov.w	r5, #0
    89a0:	f240 8086 	bls.w	8ab0 <FatFile::makeSFN(FatLfn_t*)+0x164>
    89a4:	2607      	movs	r6, #7
    89a6:	2708      	movs	r7, #8
    89a8:	46a9      	mov	r9, r5
    89aa:	46a8      	mov	r8, r5
    89ac:	e006      	b.n	89bc <FatFile::makeSFN(FatLfn_t*)+0x70>
    89ae:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    89b0:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    89b2:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    89b6:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    89b8:	429c      	cmp	r4, r3
    89ba:	d95b      	bls.n	8a74 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    89bc:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    89be:	2a2e      	cmp	r2, #46	; 0x2e
    89c0:	bf08      	it	eq
    89c2:	4299      	cmpeq	r1, r3
    89c4:	d0f3      	beq.n	89ae <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    89c6:	2a22      	cmp	r2, #34	; 0x22
    89c8:	d00d      	beq.n	89e6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    89ca:	2a7c      	cmp	r2, #124	; 0x7c
    89cc:	d00b      	beq.n	89e6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    89ce:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    89d2:	f1bc 0f02 	cmp.w	ip, #2
    89d6:	d906      	bls.n	89e6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    89d8:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    89dc:	f1bc 0f05 	cmp.w	ip, #5
    89e0:	d821      	bhi.n	8a26 <FatFile::makeSFN(FatLfn_t*)+0xda>
    89e2:	2a2d      	cmp	r2, #45	; 0x2d
    89e4:	d01f      	beq.n	8a26 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    89e6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    89ea:	2a80      	cmp	r2, #128	; 0x80
    89ec:	d05d      	beq.n	8aaa <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    89ee:	454e      	cmp	r6, r9
    89f0:	d22f      	bcs.n	8a52 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    89f2:	4299      	cmp	r1, r3
    89f4:	bf2c      	ite	cs
    89f6:	2000      	movcs	r0, #0
    89f8:	2001      	movcc	r0, #1
    89fa:	2e0a      	cmp	r6, #10
    89fc:	bf08      	it	eq
    89fe:	f040 0001 	orreq.w	r0, r0, #1
    8a02:	2800      	cmp	r0, #0
    8a04:	d047      	beq.n	8a96 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8a06:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8a0a:	2b20      	cmp	r3, #32
    8a0c:	d040      	beq.n	8a90 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    8a0e:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8a12:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8a14:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8a16:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    8a18:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8a1a:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8a1e:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8a20:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    8a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8a26:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    8a2a:	f1bc 0f05 	cmp.w	ip, #5
    8a2e:	d9da      	bls.n	89e6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    8a30:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    8a34:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    8a38:	d8d5      	bhi.n	89e6 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    8a3a:	454e      	cmp	r6, r9
    8a3c:	d3d9      	bcc.n	89f2 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    8a3e:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    8a42:	f1bc 0f19 	cmp.w	ip, #25
    8a46:	d828      	bhi.n	8a9a <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    8a48:	3a20      	subs	r2, #32
        lc |= bit;
    8a4a:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    8a4c:	b2d2      	uxtb	r2, r2
        lc |= bit;
    8a4e:	b2ed      	uxtb	r5, r5
    8a50:	e001      	b.n	8a56 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    8a52:	2000      	movs	r0, #0
        c = '_';
    8a54:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    8a56:	f109 0c01 	add.w	ip, r9, #1
    8a5a:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    8a5c:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    8a5e:	f889 2016 	strb.w	r2, [r9, #22]
    8a62:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    8a66:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    8a68:	4691      	mov	r9, r2
    8a6a:	bf98      	it	ls
    8a6c:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    8a70:	429c      	cmp	r4, r3
    8a72:	d8a3      	bhi.n	89bc <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    8a74:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8a78:	2b20      	cmp	r3, #32
    8a7a:	d009      	beq.n	8a90 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    8a7c:	2800      	cmp	r0, #0
    8a7e:	d0c6      	beq.n	8a0e <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8a80:	ea18 0f05 	tst.w	r8, r5
    8a84:	bf18      	it	ne
    8a86:	2502      	movne	r5, #2
    8a88:	f88e 5015 	strb.w	r5, [lr, #21]
}
    8a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    8a90:	2000      	movs	r0, #0
}
    8a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8a96:	460b      	mov	r3, r1
    8a98:	e78e      	b.n	89b8 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    8a9a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    8a9e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    8aa2:	bf98      	it	ls
    8aa4:	ea47 0808 	orrls.w	r8, r7, r8
    8aa8:	e7d5      	b.n	8a56 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    8aaa:	3301      	adds	r3, #1
        is83 = false;
    8aac:	2000      	movs	r0, #0
    8aae:	e783      	b.n	89b8 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    8ab0:	46a8      	mov	r8, r5
    8ab2:	e7df      	b.n	8a74 <FatFile::makeSFN(FatLfn_t*)+0x128>

00008ab4 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8ab8:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8abc:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8abe:	460f      	mov	r7, r1
    8ac0:	4604      	mov	r4, r0
    8ac2:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8b64 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    8ac6:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    8aca:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8ace:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    8ad2:	f1b8 0f03 	cmp.w	r8, #3
    8ad6:	f8db 3000 	ldr.w	r3, [fp]
    8ada:	bf28      	it	cs
    8adc:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    8ae0:	442b      	add	r3, r5
    8ae2:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8ae4:	f108 0304 	add.w	r3, r8, #4
    8ae8:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8aea:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8aee:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    8af0:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8af2:	2a09      	cmp	r2, #9
    8af4:	f102 0137 	add.w	r1, r2, #55	; 0x37
    8af8:	bf98      	it	ls
    8afa:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    8afe:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b00:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8b02:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8b04:	4598      	cmp	r8, r3
    8b06:	d1f0      	bne.n	8aea <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    8b08:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    8b0c:	2100      	movs	r1, #0
    8b0e:	4620      	mov	r0, r4
    8b10:	f883 a016 	strb.w	sl, [r3, #22]
    8b14:	f7ff fc1a 	bl	834c <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8b18:	2101      	movs	r1, #1
    8b1a:	4620      	mov	r0, r4
    8b1c:	f7ff fab6 	bl	808c <FatFile::readDirCache(bool)>
    8b20:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b22:	220b      	movs	r2, #11
    8b24:	4630      	mov	r0, r6
      if (!dir) {
    8b26:	b19b      	cbz	r3, 8b50 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    8b28:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b2c:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    8b2e:	f1bc 0f00 	cmp.w	ip, #0
    8b32:	d013      	beq.n	8b5c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8b34:	7adb      	ldrb	r3, [r3, #11]
    8b36:	071b      	lsls	r3, r3, #28
    8b38:	d4ee      	bmi.n	8b18 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8b3a:	f007 ffad 	bl	10a98 <memcmp>
    8b3e:	2800      	cmp	r0, #0
    8b40:	d1ea      	bne.n	8b18 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8b42:	f109 39ff 	add.w	r9, r9, #4294967295
    8b46:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    8b4a:	d1c2      	bne.n	8ad2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8b4c:	4648      	mov	r0, r9
 fail:
    8b4e:	e003      	b.n	8b58 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    8b50:	7860      	ldrb	r0, [r4, #1]
    8b52:	fab0 f080 	clz	r0, r0
    8b56:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    8b58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8b5c:	2001      	movs	r0, #1
}
    8b5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b62:	bf00      	nop
    8b64:	200432dc 	.word	0x200432dc

00008b68 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b6c:	ed2d 8b02 	vpush	{d8}
    8b70:	b08b      	sub	sp, #44	; 0x2c
    8b72:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8b76:	688b      	ldr	r3, [r1, #8]
    8b78:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    8b7a:	780b      	ldrb	r3, [r1, #0]
    8b7c:	f013 0f70 	tst.w	r3, #112	; 0x70
    8b80:	d053      	beq.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    8b82:	9b02      	ldr	r3, [sp, #8]
    8b84:	781b      	ldrb	r3, [r3, #0]
    8b86:	2b00      	cmp	r3, #0
    8b88:	d14f      	bne.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8b8a:	6913      	ldr	r3, [r2, #16]
    8b8c:	4690      	mov	r8, r2
    8b8e:	4a9a      	ldr	r2, [pc, #616]	; (8df8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    8b90:	460e      	mov	r6, r1
    8b92:	330c      	adds	r3, #12
    8b94:	fba2 2303 	umull	r2, r3, r2, r3
    8b98:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8b9c:	f898 3015 	ldrb.w	r3, [r8, #21]
    8ba0:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    8ba2:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8ba4:	f000 80a7 	beq.w	8cf6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    8ba8:	1c57      	adds	r7, r2, #1
    8baa:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    8bac:	2300      	movs	r3, #0
    seekSet(0);
    8bae:	4630      	mov	r0, r6
    8bb0:	4619      	mov	r1, r3
    8bb2:	461c      	mov	r4, r3
    8bb4:	9306      	str	r3, [sp, #24]
    8bb6:	f7ff fbc9 	bl	834c <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8bba:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    8bbe:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    8bc0:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    8bc2:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8bc4:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    8bc8:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8bca:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    8bcc:	2100      	movs	r1, #0
    8bce:	4630      	mov	r0, r6
    8bd0:	f7ff fa5c 	bl	808c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8bd4:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    8bd8:	4603      	mov	r3, r0
    8bda:	b320      	cbz	r0, 8c26 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8bdc:	7802      	ldrb	r2, [r0, #0]
    8bde:	2ae5      	cmp	r2, #229	; 0xe5
    8be0:	d029      	beq.n	8c36 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    8be2:	b342      	cbz	r2, 8c36 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    8be4:	42bc      	cmp	r4, r7
    8be6:	bf38      	it	cc
    8be8:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8bea:	2a2e      	cmp	r2, #46	; 0x2e
    8bec:	d02b      	beq.n	8c46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8bee:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    8bf2:	f1bc 0f0f 	cmp.w	ip, #15
    8bf6:	d054      	beq.n	8ca2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    8bf8:	f01c 0c08 	ands.w	ip, ip, #8
    8bfc:	d123      	bne.n	8c46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    8bfe:	f1b9 0f00 	cmp.w	r9, #0
    8c02:	f040 80d5 	bne.w	8db0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8c06:	220b      	movs	r2, #11
    8c08:	ee18 1a10 	vmov	r1, s16
    8c0c:	f007 ff44 	bl	10a98 <memcmp>
    8c10:	2800      	cmp	r0, #0
    8c12:	d1da      	bne.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8c14:	f898 3015 	ldrb.w	r3, [r8, #21]
    8c18:	f013 0301 	ands.w	r3, r3, #1
    8c1c:	f000 80e4 	beq.w	8de8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    8c20:	2301      	movs	r3, #1
    8c22:	9305      	str	r3, [sp, #20]
    8c24:	e7d1      	b.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    8c26:	7873      	ldrb	r3, [r6, #1]
    8c28:	b183      	cbz	r3, 8c4c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    8c2a:	2000      	movs	r0, #0
}
    8c2c:	b00b      	add	sp, #44	; 0x2c
    8c2e:	ecbd 8b02 	vpop	{d8}
    8c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8c36:	2c00      	cmp	r4, #0
    8c38:	bf08      	it	eq
    8c3a:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8c3c:	42bc      	cmp	r4, r7
    8c3e:	d201      	bcs.n	8c44 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    8c40:	3401      	adds	r4, #1
    8c42:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8c44:	b112      	cbz	r2, 8c4c <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    8c46:	f04f 0900 	mov.w	r9, #0
    8c4a:	e7be      	b.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8c4c:	9b03      	ldr	r3, [sp, #12]
    8c4e:	059a      	lsls	r2, r3, #22
    8c50:	d5eb      	bpl.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8c52:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8c56:	3b01      	subs	r3, #1
    8c58:	2b01      	cmp	r3, #1
    8c5a:	d8e6      	bhi.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    8c5c:	2c00      	cmp	r4, #0
    8c5e:	bf08      	it	eq
    8c60:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    8c62:	42bc      	cmp	r4, r7
    8c64:	d303      	bcc.n	8c6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    8c66:	e048      	b.n	8cfa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    8c68:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8c6a:	42a7      	cmp	r7, r4
    8c6c:	d045      	beq.n	8cfa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    8c6e:	2100      	movs	r1, #0
    8c70:	4630      	mov	r0, r6
    8c72:	f7ff fa0b 	bl	808c <FatFile::readDirCache(bool)>
    freeFound++;
    8c76:	1c63      	adds	r3, r4, #1
    if (!dir) {
    8c78:	2800      	cmp	r0, #0
    8c7a:	d1f5      	bne.n	8c68 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    8c7c:	7873      	ldrb	r3, [r6, #1]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	d1d3      	bne.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    8c82:	42a7      	cmp	r7, r4
    8c84:	d939      	bls.n	8cfa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    8c86:	9d07      	ldr	r5, [sp, #28]
    8c88:	e005      	b.n	8c96 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8c8a:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8c8c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8c90:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8c92:	42a7      	cmp	r7, r4
    8c94:	d931      	bls.n	8cfa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    8c96:	4630      	mov	r0, r6
    8c98:	f7fe feb2 	bl	7a00 <FatFile::addDirCluster()>
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d1f4      	bne.n	8c8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    8ca0:	e7c3      	b.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    8ca2:	f1b9 0f00 	cmp.w	r9, #0
    8ca6:	d119      	bne.n	8cdc <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    8ca8:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    8cac:	9904      	ldr	r1, [sp, #16]
    8cae:	4559      	cmp	r1, fp
    8cb0:	d18b      	bne.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    8cb2:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    8cb6:	d088      	beq.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    8cb8:	7b43      	ldrb	r3, [r0, #13]
    8cba:	4689      	mov	r9, r1
    8cbc:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    8cbe:	f1bb 0f01 	cmp.w	fp, #1
    8cc2:	d182      	bne.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8cc4:	1c69      	adds	r1, r5, #1
    8cc6:	464b      	mov	r3, r9
    8cc8:	4642      	mov	r2, r8
    8cca:	4630      	mov	r0, r6
    8ccc:	b289      	uxth	r1, r1
    8cce:	f7ff fd4d 	bl	876c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8cd2:	2800      	cmp	r0, #0
    8cd4:	bf08      	it	eq
    8cd6:	f04f 0900 	moveq.w	r9, #0
    8cda:	e776      	b.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8cdc:	f10b 3bff 	add.w	fp, fp, #4294967295
    8ce0:	fa5f fb8b 	uxtb.w	fp, fp
    8ce4:	455a      	cmp	r2, fp
    8ce6:	d1ae      	bne.n	8c46 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    8ce8:	7b43      	ldrb	r3, [r0, #13]
    8cea:	9a06      	ldr	r2, [sp, #24]
    8cec:	4293      	cmp	r3, r2
    8cee:	d0e6      	beq.n	8cbe <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    8cf0:	f04f 0900 	mov.w	r9, #0
    8cf4:	e769      	b.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8cf6:	2701      	movs	r7, #1
    8cf8:	e758      	b.n	8bac <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    8cfa:	9b05      	ldr	r3, [sp, #20]
    8cfc:	b12b      	cbz	r3, 8d0a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    8cfe:	4641      	mov	r1, r8
    8d00:	4630      	mov	r0, r6
    8d02:	f7ff fed7 	bl	8ab4 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8d06:	2800      	cmp	r0, #0
    8d08:	d08f      	beq.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    8d0a:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8d0c:	4642      	mov	r2, r8
    8d0e:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    8d10:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    8d12:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    8d16:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    8d18:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8d1a:	4629      	mov	r1, r5
    8d1c:	f7ff fd84 	bl	8828 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8d20:	2800      	cmp	r0, #0
    8d22:	d082      	beq.n	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8d24:	0169      	lsls	r1, r5, #5
    8d26:	4630      	mov	r0, r6
    8d28:	f7ff fb10 	bl	834c <FatFile::seekSet(unsigned long)>
    8d2c:	2800      	cmp	r0, #0
    8d2e:	f43f af7c 	beq.w	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    8d32:	2100      	movs	r1, #0
    8d34:	4630      	mov	r0, r6
    8d36:	f7ff f9a9 	bl	808c <FatFile::readDirCache(bool)>
  if (!dir) {
    8d3a:	4604      	mov	r4, r0
    8d3c:	2800      	cmp	r0, #0
    8d3e:	f43f af74 	beq.w	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    8d42:	2220      	movs	r2, #32
    8d44:	2100      	movs	r1, #0
    8d46:	f007 ff53 	bl	10bf0 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8d4a:	f8d8 2016 	ldr.w	r2, [r8, #22]
    8d4e:	f8d8 301a 	ldr.w	r3, [r8, #26]
    8d52:	6022      	str	r2, [r4, #0]
    8d54:	6063      	str	r3, [r4, #4]
    8d56:	f898 3020 	ldrb.w	r3, [r8, #32]
    8d5a:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    8d5e:	72a3      	strb	r3, [r4, #10]
    8d60:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8d62:	f898 3015 	ldrb.w	r3, [r8, #21]
    8d66:	f003 0318 	and.w	r3, r3, #24
    8d6a:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8d6c:	4b23      	ldr	r3, [pc, #140]	; (8dfc <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    8d6e:	681b      	ldr	r3, [r3, #0]
    8d70:	2b00      	cmp	r3, #0
    8d72:	d03b      	beq.n	8dec <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    8d74:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    8d78:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    8d7c:	a809      	add	r0, sp, #36	; 0x24
    8d7e:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8d80:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    8d84:	8223      	strh	r3, [r4, #16]
    8d86:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    8d8a:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    8d90:	7363      	strb	r3, [r4, #13]
    8d92:	9a07      	ldr	r2, [sp, #28]
    8d94:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8d98:	f043 0301 	orr.w	r3, r3, #1
    8d9c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8da0:	9b03      	ldr	r3, [sp, #12]
    8da2:	462a      	mov	r2, r5
    8da4:	4631      	mov	r1, r6
    8da6:	9802      	ldr	r0, [sp, #8]
    8da8:	9700      	str	r7, [sp, #0]
    8daa:	f7ff fb27 	bl	83fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8dae:	e73d      	b.n	8c2c <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8db0:	f1bb 0f01 	cmp.w	fp, #1
    8db4:	f47f af39 	bne.w	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    8db8:	300a      	adds	r0, #10
    8dba:	e001      	b.n	8dc0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8dbc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8dc0:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    8dc4:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8dc6:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    8dca:	fa52 f281 	uxtab	r2, r2, r1
    8dce:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    8dd2:	d1f3      	bne.n	8dbc <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    8dd4:	9b06      	ldr	r3, [sp, #24]
    8dd6:	4563      	cmp	r3, ip
    8dd8:	f47f af27 	bne.w	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    8ddc:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    8dde:	9b03      	ldr	r3, [sp, #12]
    8de0:	0519      	lsls	r1, r3, #20
    8de2:	f53f af22 	bmi.w	8c2a <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    8de6:	e7db      	b.n	8da0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    8de8:	461f      	mov	r7, r3
    8dea:	e7f8      	b.n	8dde <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    8dec:	f645 0321 	movw	r3, #22561	; 0x5821
    8df0:	8223      	strh	r3, [r4, #16]
    8df2:	8323      	strh	r3, [r4, #24]
    8df4:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8df6:	e7cc      	b.n	8d92 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    8df8:	4ec4ec4f 	.word	0x4ec4ec4f
    8dfc:	200422dc 	.word	0x200422dc

00008e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e04:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8e06:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    8e08:	b082      	sub	sp, #8
    8e0a:	460c      	mov	r4, r1
  while (*path == ' ') {
    8e0c:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    8e0e:	4615      	mov	r5, r2
  while (*path == ' ') {
    8e10:	d103      	bne.n	8e1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    8e12:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8e16:	2b20      	cmp	r3, #32
    8e18:	d0fb      	beq.n	8e12 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    8e1a:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    8e1c:	7823      	ldrb	r3, [r4, #0]
    8e1e:	b363      	cbz	r3, 8e7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    8e20:	2b2f      	cmp	r3, #47	; 0x2f
    8e22:	d02a      	beq.n	8e7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    8e24:	f04f 0800 	mov.w	r8, #0
    8e28:	4e29      	ldr	r6, [pc, #164]	; (8ed0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8e2a:	1d21      	adds	r1, r4, #4
    8e2c:	4620      	mov	r0, r4
    8e2e:	aa01      	add	r2, sp, #4
    8e30:	f003 f86e 	bl	bf10 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8e34:	4604      	mov	r4, r0
    8e36:	b170      	cbz	r0, 8e56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    8e38:	9b01      	ldr	r3, [sp, #4]
    8e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8e3e:	d240      	bcs.n	8ec2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8e40:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8e42:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8e46:	d831      	bhi.n	8eac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    8e48:	2b3c      	cmp	r3, #60	; 0x3c
    8e4a:	b2d9      	uxtb	r1, r3
    8e4c:	d829      	bhi.n	8ea2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    8e4e:	2921      	cmp	r1, #33	; 0x21
    8e50:	d805      	bhi.n	8e5e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    8e52:	291f      	cmp	r1, #31
    8e54:	d809      	bhi.n	8e6a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    8e56:	2000      	movs	r0, #0
    8e58:	b002      	add	sp, #8
    8e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e5e:	3922      	subs	r1, #34	; 0x22
    8e60:	b2c9      	uxtb	r1, r1
    8e62:	fa26 f101 	lsr.w	r1, r6, r1
    8e66:	07ca      	lsls	r2, r1, #31
    8e68:	d4f5      	bmi.n	8e56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    8e6a:	2b2e      	cmp	r3, #46	; 0x2e
    8e6c:	d001      	beq.n	8e72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8e6e:	2b20      	cmp	r3, #32
    8e70:	d11c      	bne.n	8eac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    8e72:	7823      	ldrb	r3, [r4, #0]
    8e74:	b10b      	cbz	r3, 8e7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    8e76:	2b2f      	cmp	r3, #47	; 0x2f
    8e78:	d1d7      	bne.n	8e2a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8e7a:	692b      	ldr	r3, [r5, #16]
    8e7c:	3b01      	subs	r3, #1
    8e7e:	2bfe      	cmp	r3, #254	; 0xfe
    8e80:	d8e9      	bhi.n	8e56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8e82:	7823      	ldrb	r3, [r4, #0]
    8e84:	2b20      	cmp	r3, #32
    8e86:	d103      	bne.n	8e90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    8e88:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    8e8c:	2b20      	cmp	r3, #32
    8e8e:	d0fb      	beq.n	8e88 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    8e90:	2b2f      	cmp	r3, #47	; 0x2f
    8e92:	d0f9      	beq.n	8e88 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    8e94:	4628      	mov	r0, r5
  *ptr = path;
    8e96:	603c      	str	r4, [r7, #0]
}
    8e98:	b002      	add	sp, #8
    8e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    8e9e:	f7ff bd55 	b.w	894c <FatFile::makeSFN(FatLfn_t*)>
    8ea2:	295c      	cmp	r1, #92	; 0x5c
    8ea4:	d0d7      	beq.n	8e56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    8ea6:	d905      	bls.n	8eb4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    8ea8:	297c      	cmp	r1, #124	; 0x7c
    8eaa:	d0d4      	beq.n	8e56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    8eac:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    8eb0:	60ac      	str	r4, [r5, #8]
    8eb2:	e7de      	b.n	8e72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8eb4:	393e      	subs	r1, #62	; 0x3e
    8eb6:	2901      	cmp	r1, #1
    8eb8:	d8f8      	bhi.n	8eac <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    8eba:	2000      	movs	r0, #0
    8ebc:	b002      	add	sp, #8
    8ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    8ec2:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    8ec6:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    8ec8:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    8ecc:	e7d1      	b.n	8e72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    8ece:	bf00      	nop
    8ed0:	05002101 	.word	0x05002101

00008ed4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    8ed6:	2300      	movs	r3, #0
    8ed8:	b08b      	sub	sp, #44	; 0x2c
    8eda:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8edc:	7883      	ldrb	r3, [r0, #2]
    8ede:	079a      	lsls	r2, r3, #30
    8ee0:	d524      	bpl.n	8f2c <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8ee2:	6a01      	ldr	r1, [r0, #32]
    8ee4:	4605      	mov	r5, r0
    8ee6:	b119      	cbz	r1, 8ef0 <FatFile::remove()+0x1c>
    8ee8:	6880      	ldr	r0, [r0, #8]
    8eea:	f000 fb3d 	bl	9568 <FatPartition::freeChain(unsigned long)>
    8eee:	b1e8      	cbz	r0, 8f2c <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8ef0:	2101      	movs	r1, #1
    8ef2:	4628      	mov	r0, r5
    8ef4:	f7fe fdc0 	bl	7a78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8ef8:	b1c0      	cbz	r0, 8f2c <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    8efa:	1e42      	subs	r2, r0, #1
    8efc:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    8f00:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8f02:	01e3      	lsls	r3, r4, #7
    8f04:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    8f08:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8f0c:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8f0e:	fa51 f383 	uxtab	r3, r1, r3
    8f12:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    8f14:	d1f5      	bne.n	8f02 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    8f16:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    8f18:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    8f1a:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    8f1c:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    8f1e:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8f20:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    8f24:	70ab      	strb	r3, [r5, #2]
    8f26:	f002 ff27 	bl	bd78 <FsCache::sync()>
    8f2a:	b910      	cbnz	r0, 8f32 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8f2c:	2000      	movs	r0, #0
}
    8f2e:	b00b      	add	sp, #44	; 0x2c
    8f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f32:	f507 700e 	add.w	r0, r7, #568	; 0x238
    8f36:	f002 ff1f 	bl	bd78 <FsCache::sync()>
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d0f6      	beq.n	8f2c <FatFile::remove()+0x58>
    8f3e:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    8f40:	6803      	ldr	r3, [r0, #0]
    8f42:	6a1b      	ldr	r3, [r3, #32]
    8f44:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8f46:	2800      	cmp	r0, #0
    8f48:	d0f0      	beq.n	8f2c <FatFile::remove()+0x58>
  if (!isLFN()) {
    8f4a:	78eb      	ldrb	r3, [r5, #3]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d0ee      	beq.n	8f2e <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    8f50:	4629      	mov	r1, r5
    8f52:	a801      	add	r0, sp, #4
    8f54:	f7fe ff66 	bl	7e24 <FatFile::openCluster(FatFile*)>
    8f58:	2800      	cmp	r0, #0
    8f5a:	d0e7      	beq.n	8f2c <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8f5c:	78eb      	ldrb	r3, [r5, #3]
    8f5e:	2b00      	cmp	r3, #0
    8f60:	d0e4      	beq.n	8f2c <FatFile::remove()+0x58>
    8f62:	2701      	movs	r7, #1
    8f64:	e021      	b.n	8faa <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8f66:	a801      	add	r0, sp, #4
    8f68:	f7ff f890 	bl	808c <FatFile::readDirCache(bool)>
    8f6c:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8f6e:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    8f70:	2800      	cmp	r0, #0
    8f72:	d0db      	beq.n	8f2c <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8f74:	7ac2      	ldrb	r2, [r0, #11]
    8f76:	2a0f      	cmp	r2, #15
    8f78:	d1d8      	bne.n	8f2c <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8f7a:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8f7c:	fa5f fc83 	uxtb.w	ip, r3
    8f80:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8f82:	f002 031f 	and.w	r3, r2, #31
    8f86:	428b      	cmp	r3, r1
    8f88:	d1d0      	bne.n	8f2c <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    8f8a:	7b43      	ldrb	r3, [r0, #13]
    8f8c:	42a3      	cmp	r3, r4
    8f8e:	d1cd      	bne.n	8f2c <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    8f90:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    8f92:	68a9      	ldr	r1, [r5, #8]
    8f94:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    8f98:	f043 0301 	orr.w	r3, r3, #1
    8f9c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    8fa0:	0653      	lsls	r3, r2, #25
    8fa2:	d40d      	bmi.n	8fc0 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8fa4:	78eb      	ldrb	r3, [r5, #3]
    8fa6:	4563      	cmp	r3, ip
    8fa8:	d3c0      	bcc.n	8f2c <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8faa:	88a9      	ldrh	r1, [r5, #4]
    8fac:	a801      	add	r0, sp, #4
    8fae:	1bc9      	subs	r1, r1, r7
    8fb0:	b289      	uxth	r1, r1
    8fb2:	0149      	lsls	r1, r1, #5
    8fb4:	f7ff f9ca 	bl	834c <FatFile::seekSet(unsigned long)>
    8fb8:	2100      	movs	r1, #0
    8fba:	2800      	cmp	r0, #0
    8fbc:	d1d3      	bne.n	8f66 <FatFile::remove()+0x92>
    8fbe:	e7b5      	b.n	8f2c <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    8fc0:	68ac      	ldr	r4, [r5, #8]
    8fc2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8fc6:	f002 fed7 	bl	bd78 <FsCache::sync()>
    8fca:	2800      	cmp	r0, #0
    8fcc:	d0ae      	beq.n	8f2c <FatFile::remove()+0x58>
    8fce:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8fd2:	f002 fed1 	bl	bd78 <FsCache::sync()>
    8fd6:	2800      	cmp	r0, #0
    8fd8:	d0a8      	beq.n	8f2c <FatFile::remove()+0x58>
    8fda:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    8fdc:	6803      	ldr	r3, [r0, #0]
    8fde:	6a1b      	ldr	r3, [r3, #32]
    8fe0:	4798      	blx	r3
    8fe2:	e7a4      	b.n	8f2e <FatFile::remove()+0x5a>

00008fe4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    8fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8fec:	b1a2      	cbz	r2, 9018 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8fee:	4605      	mov	r5, r0
    8ff0:	460c      	mov	r4, r1
    8ff2:	4698      	mov	r8, r3
    8ff4:	1857      	adds	r7, r2, r1
    8ff6:	e001      	b.n	8ffc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    8ff8:	42bc      	cmp	r4, r7
    8ffa:	d00d      	beq.n	9018 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8ffc:	682b      	ldr	r3, [r5, #0]
    8ffe:	4620      	mov	r0, r4
    9000:	4649      	mov	r1, r9
    9002:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    9004:	47c0      	blx	r8
    9006:	4621      	mov	r1, r4
    9008:	4602      	mov	r2, r0
    900a:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    900c:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    900e:	47b0      	blx	r6
    9010:	2800      	cmp	r0, #0
    9012:	d1f1      	bne.n	8ff8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    9014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    9018:	2001      	movs	r0, #1
  }
    901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    901e:	bf00      	nop

00009020 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    9020:	2a04      	cmp	r2, #4
    9022:	d804      	bhi.n	902e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9024:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9028:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    902c:	4770      	bx	lr
  } else if (i < 11) {
    902e:	2a0a      	cmp	r2, #10
    9030:	d803      	bhi.n	903a <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    9032:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9036:	8890      	ldrh	r0, [r2, #4]
    9038:	4770      	bx	lr
  } else if (i < 13) {
    903a:	2a0c      	cmp	r2, #12
    903c:	d803      	bhi.n	9046 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    903e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9042:	88c8      	ldrh	r0, [r1, #6]
    9044:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9046:	2000      	movs	r0, #0
}
    9048:	4770      	bx	lr
    904a:	bf00      	nop

0000904c <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    904e:	7804      	ldrb	r4, [r0, #0]
    9050:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    9052:	b17c      	cbz	r4, 9074 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9054:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9058:	4617      	mov	r7, r2
    905a:	d007      	beq.n	906c <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    905c:	2a01      	cmp	r2, #1
    905e:	d909      	bls.n	9074 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    9060:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    9062:	2300      	movs	r3, #0
    return 1;
    9064:	2001      	movs	r0, #1
    name[0] = '/';
    9066:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    9068:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    906c:	4621      	mov	r1, r4
    906e:	f7fe fd03 	bl	7a78 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9072:	b918      	cbnz	r0, 907c <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    9074:	2300      	movs	r3, #0
  return 0;
    9076:	4618      	mov	r0, r3
  name[0] = '\0';
    9078:	7033      	strb	r3, [r6, #0]
}
    907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    907c:	4603      	mov	r3, r0
    907e:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9080:	2108      	movs	r1, #8
    9082:	e011      	b.n	90a8 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9084:	7b02      	ldrb	r2, [r0, #12]
    9086:	4211      	tst	r1, r2
    9088:	d003      	beq.n	9092 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    908a:	f10e 0e20 	add.w	lr, lr, #32
    908e:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    9092:	1c65      	adds	r5, r4, #1
    9094:	42bd      	cmp	r5, r7
    9096:	d2ed      	bcs.n	9074 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    9098:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    909c:	f806 e004 	strb.w	lr, [r6, r4]
    90a0:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    90a2:	f1bc 0f0c 	cmp.w	ip, #12
    90a6:	d010      	beq.n	90ca <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    90a8:	f1bc 0f08 	cmp.w	ip, #8
    90ac:	d011      	beq.n	90d2 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    90ae:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    90b2:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    90b6:	2a19      	cmp	r2, #25
    90b8:	d9e4      	bls.n	9084 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    90ba:	f1be 0f20 	cmp.w	lr, #32
    90be:	d1e8      	bne.n	9092 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    90c0:	f10c 0c01 	add.w	ip, ip, #1
    90c4:	f1bc 0f0c 	cmp.w	ip, #12
    90c8:	d1ee      	bne.n	90a8 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    90ca:	2300      	movs	r3, #0
    90cc:	4620      	mov	r0, r4
    90ce:	5533      	strb	r3, [r6, r4]
}
    90d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    90d2:	781a      	ldrb	r2, [r3, #0]
    90d4:	2a20      	cmp	r2, #32
    90d6:	d0f8      	beq.n	90ca <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    90d8:	2110      	movs	r1, #16
      c = '.';
    90da:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    90de:	e7d8      	b.n	9092 <FatFile::getSFN(char*, unsigned int)+0x46>

000090e0 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    90e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    90e4:	2400      	movs	r4, #0
    90e6:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    90e8:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    90ea:	4689      	mov	r9, r1
    90ec:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    90ee:	2b00      	cmp	r3, #0
    90f0:	d055      	beq.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    90f2:	78c3      	ldrb	r3, [r0, #3]
    90f4:	4606      	mov	r6, r0
    90f6:	2b00      	cmp	r3, #0
    90f8:	d058      	beq.n	91ac <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    90fa:	4601      	mov	r1, r0
    90fc:	a801      	add	r0, sp, #4
    90fe:	4690      	mov	r8, r2
    9100:	f7fe fe90 	bl	7e24 <FatFile::openCluster(FatFile*)>
    9104:	2800      	cmp	r0, #0
    9106:	d04a      	beq.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9108:	78f0      	ldrb	r0, [r6, #3]
    910a:	2800      	cmp	r0, #0
    910c:	d043      	beq.n	9196 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    910e:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    9112:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9114:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9118:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    911a:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    911c:	a801      	add	r0, sp, #4
    911e:	eba1 010a 	sub.w	r1, r1, sl
    9122:	b289      	uxth	r1, r1
    9124:	0149      	lsls	r1, r1, #5
    9126:	f7ff f911 	bl	834c <FatFile::seekSet(unsigned long)>
    912a:	b3c0      	cbz	r0, 919e <FatFile::getName8(char*, unsigned int)+0xbe>
    912c:	2100      	movs	r1, #0
    912e:	a801      	add	r0, sp, #4
    9130:	f7fe ffac 	bl	808c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9134:	b398      	cbz	r0, 919e <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9136:	7ac3      	ldrb	r3, [r0, #11]
    9138:	2b0f      	cmp	r3, #15
    913a:	d130      	bne.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
    913c:	7803      	ldrb	r3, [r0, #0]
    913e:	fa5f f18a 	uxtb.w	r1, sl
    9142:	f003 031f 	and.w	r3, r3, #31
    9146:	428b      	cmp	r3, r1
    9148:	d129      	bne.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
    914a:	1c47      	adds	r7, r0, #1
    914c:	2500      	movs	r5, #0
  if (i < 5) {
    914e:	2d04      	cmp	r5, #4
    9150:	b2eb      	uxtb	r3, r5
    9152:	d83f      	bhi.n	91d4 <FatFile::getName8(char*, unsigned int)+0xf4>
    9154:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    9156:	bb74      	cbnz	r4, 91b6 <FatFile::getName8(char*, unsigned int)+0xd6>
    9158:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    915c:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    915e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9162:	d33e      	bcc.n	91e2 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    9164:	b1a3      	cbz	r3, 9190 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    9166:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9168:	4659      	mov	r1, fp
    916a:	4642      	mov	r2, r8
    916c:	f002 fe7e 	bl	be6c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    9170:	4683      	mov	fp, r0
    9172:	b1a0      	cbz	r0, 919e <FatFile::getName8(char*, unsigned int)+0xbe>
    9174:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    9176:	3501      	adds	r5, #1
    9178:	3702      	adds	r7, #2
    917a:	2d0d      	cmp	r5, #13
    917c:	d1e7      	bne.n	914e <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    917e:	f10a 0a01 	add.w	sl, sl, #1
    9182:	78f1      	ldrb	r1, [r6, #3]
    9184:	fa5f f38a 	uxtb.w	r3, sl
    9188:	fa1f fa8a 	uxth.w	sl, sl
    918c:	4299      	cmp	r1, r3
    918e:	d2c4      	bcs.n	911a <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    9190:	ebab 0009 	sub.w	r0, fp, r9
    9194:	46d9      	mov	r9, fp
  *str = '\0';
    9196:	2300      	movs	r3, #0
    9198:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    919c:	e003      	b.n	91a6 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    919e:	2300      	movs	r3, #0
  return 0;
    91a0:	4618      	mov	r0, r3
  *name = 0;
    91a2:	f889 3000 	strb.w	r3, [r9]
}
    91a6:	b00b      	add	sp, #44	; 0x2c
    91a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    91ac:	f7ff ff4e 	bl	904c <FatFile::getSFN(char*, unsigned int)>
}
    91b0:	b00b      	add	sp, #44	; 0x2c
    91b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    91b6:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    91ba:	b289      	uxth	r1, r1
    91bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    91c0:	d2ed      	bcs.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    91c2:	4a0a      	ldr	r2, [pc, #40]	; (91ec <FatFile::getName8(char*, unsigned int)+0x10c>)
    91c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    91c8:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    91cc:	4318      	orrs	r0, r3
    91ce:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    91d2:	e7c9      	b.n	9168 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    91d4:	2b0a      	cmp	r3, #10
    91d6:	bf94      	ite	ls
    91d8:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    91dc:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    91e0:	e7b9      	b.n	9156 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    91e2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    91e6:	d2da      	bcs.n	919e <FatFile::getName8(char*, unsigned int)+0xbe>
    91e8:	461c      	mov	r4, r3
    91ea:	e7c4      	b.n	9176 <FatFile::getName8(char*, unsigned int)+0x96>
    91ec:	000ffc00 	.word	0x000ffc00

000091f0 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    91f0:	f7ff bf76 	b.w	90e0 <FatFile::getName8(char*, unsigned int)>

000091f4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    91f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    91f8:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    91fc:	b1c3      	cbz	r3, 9230 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    91fe:	4681      	mov	r9, r0
    9200:	460c      	mov	r4, r1
    9202:	4615      	mov	r5, r2
    9204:	185e      	adds	r6, r3, r1
    9206:	e002      	b.n	920e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    9208:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    920a:	42b4      	cmp	r4, r6
    920c:	d010      	beq.n	9230 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    920e:	f8d9 3000 	ldr.w	r3, [r9]
    9212:	4621      	mov	r1, r4
    9214:	462a      	mov	r2, r5
    9216:	4648      	mov	r0, r9
    9218:	691b      	ldr	r3, [r3, #16]
    921a:	4798      	blx	r3
    921c:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    921e:	463a      	mov	r2, r7
    9220:	4620      	mov	r0, r4
    9222:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    9224:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    9226:	2b00      	cmp	r3, #0
    9228:	d1ee      	bne.n	9208 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    922a:	4618      	mov	r0, r3
    922c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    9230:	2301      	movs	r3, #1
  }
    9232:	4618      	mov	r0, r3
    9234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009238 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    9238:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    923a:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    923c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    9240:	46a4      	mov	ip, r4
    9242:	bf28      	it	cs
    9244:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9248:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    924c:	4281      	cmp	r1, r0
    924e:	d207      	bcs.n	9260 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    9250:	f831 3b02 	ldrh.w	r3, [r1], #2
    9254:	b913      	cbnz	r3, 925c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9256:	6853      	ldr	r3, [r2, #4]
    9258:	3301      	adds	r3, #1
    925a:	6053      	str	r3, [r2, #4]
  while (p < e) {
    925c:	4288      	cmp	r0, r1
    925e:	d8f7      	bhi.n	9250 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    9260:	eba4 040c 	sub.w	r4, r4, ip
    9264:	6014      	str	r4, [r2, #0]
}
    9266:	f85d 4b04 	ldr.w	r4, [sp], #4
    926a:	4770      	bx	lr

0000926c <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    926c:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    926e:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    9270:	2c80      	cmp	r4, #128	; 0x80
    9272:	46a4      	mov	ip, r4
    9274:	bf28      	it	cs
    9276:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    927a:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    927e:	4281      	cmp	r1, r0
    9280:	d207      	bcs.n	9292 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    9282:	f851 3b04 	ldr.w	r3, [r1], #4
    9286:	b913      	cbnz	r3, 928e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9288:	6853      	ldr	r3, [r2, #4]
    928a:	3301      	adds	r3, #1
    928c:	6053      	str	r3, [r2, #4]
  while (p < e) {
    928e:	4288      	cmp	r0, r1
    9290:	d8f7      	bhi.n	9282 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    9292:	eba4 040c 	sub.w	r4, r4, ip
    9296:	6014      	str	r4, [r2, #0]
}
    9298:	f85d 4b04 	ldr.w	r4, [sp], #4
    929c:	4770      	bx	lr
    929e:	bf00      	nop

000092a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    92a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    92a4:	79c3      	ldrb	r3, [r0, #7]
    92a6:	4604      	mov	r4, r0
    92a8:	460d      	mov	r5, r1
    92aa:	4617      	mov	r7, r2
  if (fatType() == 32) {
    92ac:	2b20      	cmp	r3, #32
    92ae:	d059      	beq.n	9364 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    92b0:	2b10      	cmp	r3, #16
    92b2:	d030      	beq.n	9316 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    92b4:	2b0c      	cmp	r3, #12
    92b6:	d151      	bne.n	935c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92b8:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    92ba:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    92be:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    92c0:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    92c4:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92c8:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    92cc:	4648      	mov	r0, r9
    92ce:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    92d0:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    92d4:	f3c1 2146 	ubfx	r1, r1, #9, #7
    92d8:	0952      	lsrs	r2, r2, #5
    92da:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    92de:	0052      	lsls	r2, r2, #1
    92e0:	4641      	mov	r1, r8
    92e2:	f002 fd75 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    92e6:	2800      	cmp	r0, #0
    92e8:	d038      	beq.n	935c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    92ea:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    92ee:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    92f0:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    92f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    92f6:	d023      	beq.n	9340 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    92f8:	4418      	add	r0, r3
    92fa:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    92fc:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    92fe:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    9300:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    9304:	bf4c      	ite	mi
    9306:	091b      	lsrmi	r3, r3, #4
    9308:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    930c:	429a      	cmp	r2, r3
    930e:	d240      	bcs.n	9392 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    9310:	2000      	movs	r0, #0
}
    9312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9316:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    9318:	f3c1 2107 	ubfx	r1, r1, #8, #8
    931c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    931e:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9322:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9326:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9328:	fab2 f282 	clz	r2, r2
    932c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    932e:	0052      	lsls	r2, r2, #1
    9330:	f002 fd4e 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9334:	b190      	cbz	r0, 935c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    9336:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    9338:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    933c:	5b43      	ldrh	r3, [r0, r5]
    933e:	e025      	b.n	938c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9340:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    9342:	f108 0101 	add.w	r1, r8, #1
    9346:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9348:	f1a2 0202 	sub.w	r2, r2, #2
    934c:	fab2 f282 	clz	r2, r2
    9350:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    9352:	0052      	lsls	r2, r2, #1
    9354:	f002 fd3c 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9358:	2800      	cmp	r0, #0
    935a:	d1ce      	bne.n	92fa <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    935c:	f04f 30ff 	mov.w	r0, #4294967295
}
    9360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9364:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9366:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9368:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    936c:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9370:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9374:	fab2 f282 	clz	r2, r2
    9378:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    937a:	0052      	lsls	r2, r2, #1
    937c:	f002 fd28 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9380:	2800      	cmp	r0, #0
    9382:	d0eb      	beq.n	935c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9384:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    9386:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    938a:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    938c:	69e2      	ldr	r2, [r4, #28]
    938e:	429a      	cmp	r2, r3
    9390:	d3be      	bcc.n	9310 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    9392:	2001      	movs	r0, #1
  *value = next;
    9394:	603b      	str	r3, [r7, #0]
}
    9396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    939a:	bf00      	nop

0000939c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    939c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    93a0:	79c3      	ldrb	r3, [r0, #7]
    93a2:	4605      	mov	r5, r0
    93a4:	460c      	mov	r4, r1
    93a6:	4616      	mov	r6, r2
  if (fatType() == 32) {
    93a8:	2b20      	cmp	r3, #32
    93aa:	d048      	beq.n	943e <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    93ac:	2b10      	cmp	r3, #16
    93ae:	d02d      	beq.n	940c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    93b0:	2b0c      	cmp	r3, #12
    93b2:	d141      	bne.n	9438 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    93b4:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    93b8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    93ba:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    93be:	fa11 f184 	uxtah	r1, r1, r4
    93c2:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    93c6:	f3c1 2146 	ubfx	r1, r1, #9, #7
    93ca:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    93cc:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    93ce:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    93d0:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    93d2:	4639      	mov	r1, r7
    93d4:	bf14      	ite	ne
    93d6:	2201      	movne	r2, #1
    93d8:	2203      	moveq	r2, #3
    93da:	f002 fcf9 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    93de:	b358      	cbz	r0, 9438 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    93e0:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    93e4:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    93e8:	d03f      	beq.n	946a <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    93ea:	5cc2      	ldrb	r2, [r0, r3]
    93ec:	f002 020f 	and.w	r2, r2, #15
    93f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    93f4:	54c2      	strb	r2, [r0, r3]
    index++;
    93f6:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    93f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    93fc:	d03a      	beq.n	9474 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    93fe:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    9402:	4403      	add	r3, r0
    return true;
    9404:	2001      	movs	r0, #1
    pc[index] = tmp;
    9406:	701a      	strb	r2, [r3, #0]
}
    9408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    940c:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    940e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    9412:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9414:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9418:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    941a:	4419      	add	r1, r3
    941c:	bf14      	ite	ne
    941e:	2201      	movne	r2, #1
    9420:	2203      	moveq	r2, #3
    9422:	f002 fcd5 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9426:	4603      	mov	r3, r0
    9428:	b130      	cbz	r0, 9438 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    942a:	0064      	lsls	r4, r4, #1
    return true;
    942c:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    942e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    9432:	531e      	strh	r6, [r3, r4]
}
    9434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    9438:	2000      	movs	r0, #0
}
    943a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    943e:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9440:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9442:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9446:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9448:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    944c:	bf14      	ite	ne
    944e:	2201      	movne	r2, #1
    9450:	2203      	moveq	r2, #3
    9452:	f002 fcbd 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9456:	4603      	mov	r3, r0
    9458:	2800      	cmp	r0, #0
    945a:	d0ed      	beq.n	9438 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    945c:	00a4      	lsls	r4, r4, #2
    return true;
    945e:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    9460:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9464:	511e      	str	r6, [r3, r4]
}
    9466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    946a:	54c6      	strb	r6, [r0, r3]
    index++;
    946c:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9472:	d115      	bne.n	94a0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9474:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    9476:	1c79      	adds	r1, r7, #1
    9478:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    947a:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    947c:	bf14      	ite	ne
    947e:	2201      	movne	r2, #1
    9480:	2203      	moveq	r2, #3
    9482:	f002 fca5 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9486:	4603      	mov	r3, r0
    9488:	2800      	cmp	r0, #0
    948a:	d0d5      	beq.n	9438 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    948c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    9490:	2c00      	cmp	r4, #0
    9492:	d1b7      	bne.n	9404 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9494:	7819      	ldrb	r1, [r3, #0]
    9496:	f021 010f 	bic.w	r1, r1, #15
    949a:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    949e:	e7b1      	b.n	9404 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    94a0:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    94a4:	4403      	add	r3, r0
    94a6:	e7f5      	b.n	9494 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

000094a8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    94a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    94ac:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    94ae:	b082      	sub	sp, #8
    94b0:	4605      	mov	r5, r0
    94b2:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    94b4:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    94b6:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    94b8:	d340      	bcc.n	953c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    94ba:	2701      	movs	r7, #1
    find++;
    94bc:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    94be:	69eb      	ldr	r3, [r5, #28]
    94c0:	aa01      	add	r2, sp, #4
    94c2:	4628      	mov	r0, r5
    94c4:	42a3      	cmp	r3, r4
    94c6:	d205      	bcs.n	94d4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    94c8:	bb9f      	cbnz	r7, 9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    94ca:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    94cc:	2701      	movs	r7, #1
    find++;
    94ce:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    94d0:	42a3      	cmp	r3, r4
    94d2:	d32e      	bcc.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    94d4:	42a6      	cmp	r6, r4
    94d6:	bf18      	it	ne
    94d8:	2c01      	cmpne	r4, #1
    94da:	4621      	mov	r1, r4
    94dc:	d929      	bls.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    94de:	f7ff fedf 	bl	92a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    94e2:	2800      	cmp	r0, #0
    94e4:	db25      	blt.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    94e6:	d0e9      	beq.n	94bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    94e8:	9b01      	ldr	r3, [sp, #4]
    94ea:	2b00      	cmp	r3, #0
    94ec:	d1e6      	bne.n	94bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    94ee:	b107      	cbz	r7, 94f2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    94f0:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    94f2:	69eb      	ldr	r3, [r5, #28]
    94f4:	42a3      	cmp	r3, r4
    94f6:	d31c      	bcc.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    94f8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    94fc:	4621      	mov	r1, r4
    94fe:	4628      	mov	r0, r5
    9500:	f7ff ff4c 	bl	939c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    9504:	4607      	mov	r7, r0
    9506:	b1a0      	cbz	r0, 9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    9508:	b93e      	cbnz	r6, 951a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    950a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    950c:	2b00      	cmp	r3, #0
    950e:	db01      	blt.n	9514 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    9510:	3b01      	subs	r3, #1
    9512:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    9514:	f8c8 4000 	str.w	r4, [r8]
  return true;
    9518:	e00c      	b.n	9534 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    951a:	2e01      	cmp	r6, #1
    951c:	d009      	beq.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    951e:	69eb      	ldr	r3, [r5, #28]
    9520:	429e      	cmp	r6, r3
    9522:	d806      	bhi.n	9532 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    9524:	4631      	mov	r1, r6
    9526:	4622      	mov	r2, r4
    9528:	4628      	mov	r0, r5
    952a:	f7ff ff37 	bl	939c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    952e:	2800      	cmp	r0, #0
    9530:	d1eb      	bne.n	950a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    9532:	2700      	movs	r7, #0
}
    9534:	4638      	mov	r0, r7
    9536:	b002      	add	sp, #8
    9538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    953c:	460c      	mov	r4, r1
    setStart = false;
    953e:	2700      	movs	r7, #0
    9540:	e7bc      	b.n	94bc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    9542:	bf00      	nop

00009544 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    9544:	2901      	cmp	r1, #1
    9546:	d90c      	bls.n	9562 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9548:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    954a:	69c4      	ldr	r4, [r0, #28]
    954c:	428c      	cmp	r4, r1
    954e:	d303      	bcc.n	9558 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    9550:	f85d 4b04 	ldr.w	r4, [sp], #4
    9554:	f7ff bea4 	b.w	92a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    9558:	f04f 30ff 	mov.w	r0, #4294967295
    955c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9560:	4770      	bx	lr
    9562:	f04f 30ff 	mov.w	r0, #4294967295
    9566:	4770      	bx	lr

00009568 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9568:	b570      	push	{r4, r5, r6, lr}
    956a:	4605      	mov	r5, r0
    956c:	b082      	sub	sp, #8
    956e:	460c      	mov	r4, r1
    9570:	e01d      	b.n	95ae <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    9572:	69eb      	ldr	r3, [r5, #28]
    9574:	429c      	cmp	r4, r3
    9576:	d81f      	bhi.n	95b8 <FatPartition::freeChain(unsigned long)+0x50>
    9578:	f7ff fe92 	bl	92a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    957c:	4606      	mov	r6, r0
    if (fg < 0) {
    957e:	4621      	mov	r1, r4
    9580:	2200      	movs	r2, #0
    9582:	2e00      	cmp	r6, #0
    9584:	4628      	mov	r0, r5
    9586:	db17      	blt.n	95b8 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    9588:	69eb      	ldr	r3, [r5, #28]
    958a:	429c      	cmp	r4, r3
    958c:	d814      	bhi.n	95b8 <FatPartition::freeChain(unsigned long)+0x50>
    958e:	f7ff ff05 	bl	939c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    9592:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    9594:	b180      	cbz	r0, 95b8 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    9596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9598:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    959a:	f103 0301 	add.w	r3, r3, #1
    959e:	bfa8      	it	ge
    95a0:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    95a2:	68eb      	ldr	r3, [r5, #12]
    95a4:	42a3      	cmp	r3, r4
    cluster = next;
    95a6:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    95a8:	bf88      	it	hi
    95aa:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    95ac:	b12e      	cbz	r6, 95ba <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    95ae:	2c01      	cmp	r4, #1
    95b0:	4621      	mov	r1, r4
    95b2:	aa01      	add	r2, sp, #4
    95b4:	4628      	mov	r0, r5
    95b6:	d8dc      	bhi.n	9572 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    95b8:	2000      	movs	r0, #0
}
    95ba:	b002      	add	sp, #8
    95bc:	bd70      	pop	{r4, r5, r6, pc}
    95be:	bf00      	nop

000095c0 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    95c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95c4:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    95c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    95c8:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    95ca:	2800      	cmp	r0, #0
    95cc:	da1b      	bge.n	9606 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    95ce:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    95d0:	2a0c      	cmp	r2, #12
    95d2:	d11b      	bne.n	960c <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    95d4:	69f7      	ldr	r7, [r6, #28]
    95d6:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    95d8:	2b02      	cmp	r3, #2
    95da:	f240 80cd 	bls.w	9778 <FatPartition::freeClusterCount()+0x1b8>
    95de:	2402      	movs	r4, #2
    uint32_t free = 0;
    95e0:	2500      	movs	r5, #0
    95e2:	4621      	mov	r1, r4
    95e4:	aa02      	add	r2, sp, #8
    95e6:	4630      	mov	r0, r6
    95e8:	f7ff fe5a 	bl	92a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    95ec:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    95ee:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    95f2:	db06      	blt.n	9602 <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    95f4:	d157      	bne.n	96a6 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    95f6:	42a7      	cmp	r7, r4
    95f8:	461c      	mov	r4, r3
    95fa:	d05c      	beq.n	96b6 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    95fc:	69f2      	ldr	r2, [r6, #28]
    95fe:	4293      	cmp	r3, r2
    9600:	d9ef      	bls.n	95e2 <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    9602:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    9606:	b004      	add	sp, #16
    9608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    960c:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    960e:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    9610:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    9614:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    9616:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    9618:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    961a:	e9cd 1002 	strd	r1, r0, [sp, #8]
    961e:	f100 8085 	bmi.w	972c <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    9622:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    9624:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    9628:	2a20      	cmp	r2, #32
    return m_buffer;
    962a:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    962e:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9632:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    9636:	d042      	beq.n	96be <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    9638:	f8d6 8000 	ldr.w	r8, [r6]
    963c:	4b4f      	ldr	r3, [pc, #316]	; (977c <FatPartition::freeClusterCount()+0x1bc>)
    963e:	f8d8 2000 	ldr.w	r2, [r8]
    9642:	f8d6 a018 	ldr.w	sl, [r6, #24]
    9646:	6995      	ldr	r5, [r2, #24]
    9648:	429d      	cmp	r5, r3
    964a:	d178      	bne.n	973e <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    964c:	2c00      	cmp	r4, #0
    964e:	f000 8082 	beq.w	9756 <FatPartition::freeClusterCount()+0x196>
    9652:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    9656:	6913      	ldr	r3, [r2, #16]
    9658:	4651      	mov	r1, sl
    965a:	463a      	mov	r2, r7
    965c:	4640      	mov	r0, r8
    965e:	4798      	blx	r3
    9660:	2800      	cmp	r0, #0
    9662:	d0ce      	beq.n	9602 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    9664:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    9666:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    966a:	468e      	mov	lr, r1
    966c:	bf28      	it	cs
    966e:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    9672:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    9676:	45bc      	cmp	ip, r7
    9678:	d90b      	bls.n	9692 <FatPartition::freeClusterCount()+0xd2>
    967a:	9d03      	ldr	r5, [sp, #12]
    967c:	463b      	mov	r3, r7
    967e:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    9680:	f833 4b02 	ldrh.w	r4, [r3], #2
    9684:	b90c      	cbnz	r4, 968a <FatPartition::freeClusterCount()+0xca>
    9686:	3501      	adds	r5, #1
    9688:	4602      	mov	r2, r0
  while (p < e) {
    968a:	459c      	cmp	ip, r3
    968c:	d8f8      	bhi.n	9680 <FatPartition::freeClusterCount()+0xc0>
    968e:	b102      	cbz	r2, 9692 <FatPartition::freeClusterCount()+0xd2>
    9690:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    9692:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    9696:	eba1 010e 	sub.w	r1, r1, lr
    969a:	45d1      	cmp	r9, sl
    969c:	9102      	str	r1, [sp, #8]
    969e:	d05a      	beq.n	9756 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    96a0:	f8d8 2000 	ldr.w	r2, [r8]
    96a4:	e7d7      	b.n	9656 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    96a6:	9a02      	ldr	r2, [sp, #8]
    96a8:	2a00      	cmp	r2, #0
    96aa:	d1a4      	bne.n	95f6 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    96ac:	42a7      	cmp	r7, r4
        free++;
    96ae:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    96b2:	461c      	mov	r4, r3
    96b4:	d1a2      	bne.n	95fc <FatPartition::freeClusterCount()+0x3c>
    return free;
    96b6:	4628      	mov	r0, r5
}
    96b8:	b004      	add	sp, #16
    96ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    96be:	f8d6 a000 	ldr.w	sl, [r6]
    96c2:	4b2e      	ldr	r3, [pc, #184]	; (977c <FatPartition::freeClusterCount()+0x1bc>)
    96c4:	f8da 2000 	ldr.w	r2, [sl]
    96c8:	f8d6 9018 	ldr.w	r9, [r6, #24]
    96cc:	6995      	ldr	r5, [r2, #24]
    96ce:	429d      	cmp	r5, r3
    96d0:	d146      	bne.n	9760 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    96d2:	2c00      	cmp	r4, #0
    96d4:	d03f      	beq.n	9756 <FatPartition::freeClusterCount()+0x196>
    96d6:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    96da:	6913      	ldr	r3, [r2, #16]
    96dc:	4649      	mov	r1, r9
    96de:	463a      	mov	r2, r7
    96e0:	4650      	mov	r0, sl
    96e2:	4798      	blx	r3
    96e4:	2800      	cmp	r0, #0
    96e6:	d08c      	beq.n	9602 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    96e8:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    96ec:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    96f0:	46e6      	mov	lr, ip
    96f2:	bf28      	it	cs
    96f4:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    96f8:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    96fc:	42ba      	cmp	r2, r7
    96fe:	d90b      	bls.n	9718 <FatPartition::freeClusterCount()+0x158>
    9700:	9d03      	ldr	r5, [sp, #12]
    9702:	463b      	mov	r3, r7
    9704:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    9706:	f853 4b04 	ldr.w	r4, [r3], #4
    970a:	b90c      	cbnz	r4, 9710 <FatPartition::freeClusterCount()+0x150>
    970c:	3501      	adds	r5, #1
    970e:	4601      	mov	r1, r0
  while (p < e) {
    9710:	429a      	cmp	r2, r3
    9712:	d8f8      	bhi.n	9706 <FatPartition::freeClusterCount()+0x146>
    9714:	b101      	cbz	r1, 9718 <FatPartition::freeClusterCount()+0x158>
    9716:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    9718:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    971c:	ebac 030e 	sub.w	r3, ip, lr
    9720:	45c8      	cmp	r8, r9
    9722:	9302      	str	r3, [sp, #8]
    9724:	d017      	beq.n	9756 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    9726:	f8da 2000 	ldr.w	r2, [sl]
    972a:	e7d6      	b.n	96da <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    972c:	f506 700e 	add.w	r0, r6, #568	; 0x238
    9730:	f002 fb22 	bl	bd78 <FsCache::sync()>
    9734:	2800      	cmp	r0, #0
    9736:	f43f af64 	beq.w	9602 <FatPartition::freeClusterCount()+0x42>
    973a:	79f2      	ldrb	r2, [r6, #7]
    973c:	e771      	b.n	9622 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    973e:	4623      	mov	r3, r4
    9740:	ac02      	add	r4, sp, #8
    9742:	463a      	mov	r2, r7
    9744:	4651      	mov	r1, sl
    9746:	9401      	str	r4, [sp, #4]
    9748:	4640      	mov	r0, r8
    974a:	4c0d      	ldr	r4, [pc, #52]	; (9780 <FatPartition::freeClusterCount()+0x1c0>)
    974c:	9400      	str	r4, [sp, #0]
    974e:	47a8      	blx	r5
    9750:	2800      	cmp	r0, #0
    9752:	f43f af56 	beq.w	9602 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    9756:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    9758:	6270      	str	r0, [r6, #36]	; 0x24
}
    975a:	b004      	add	sp, #16
    975c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9760:	4623      	mov	r3, r4
    9762:	ac02      	add	r4, sp, #8
    9764:	463a      	mov	r2, r7
    9766:	4649      	mov	r1, r9
    9768:	9401      	str	r4, [sp, #4]
    976a:	4650      	mov	r0, sl
    976c:	4c05      	ldr	r4, [pc, #20]	; (9784 <FatPartition::freeClusterCount()+0x1c4>)
    976e:	9400      	str	r4, [sp, #0]
    9770:	47a8      	blx	r5
    9772:	2800      	cmp	r0, #0
    9774:	d1ef      	bne.n	9756 <FatPartition::freeClusterCount()+0x196>
    9776:	e744      	b.n	9602 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    9778:	2000      	movs	r0, #0
    977a:	e744      	b.n	9606 <FatPartition::freeClusterCount()+0x46>
    977c:	000091f5 	.word	0x000091f5
    9780:	00009239 	.word	0x00009239
    9784:	0000926d 	.word	0x0000926d

00009788 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9788:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    978a:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    978c:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    978e:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    9790:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    9792:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    9796:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    979a:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    979c:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    979e:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    97a0:	62e1      	str	r1, [r4, #44]	; 0x2c
    97a2:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    97a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    97aa:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    97ae:	6362      	str	r2, [r4, #52]	; 0x34
    97b0:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    97b4:	b1cd      	cbz	r5, 97ea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    97b6:	2d04      	cmp	r5, #4
    97b8:	d901      	bls.n	97be <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    97ba:	2000      	movs	r0, #0
}
    97bc:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    97be:	461a      	mov	r2, r3
    97c0:	4619      	mov	r1, r3
    97c2:	4630      	mov	r0, r6
    97c4:	f002 fb04 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    97c8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    97cc:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    97d0:	442b      	add	r3, r5
    97d2:	011d      	lsls	r5, r3, #4
    97d4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    97d8:	2800      	cmp	r0, #0
    97da:	d0ee      	beq.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    97dc:	7919      	ldrb	r1, [r3, #4]
    97de:	2900      	cmp	r1, #0
    97e0:	d0eb      	beq.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    97e2:	5d52      	ldrb	r2, [r2, r5]
    97e4:	0652      	lsls	r2, r2, #25
    97e6:	d1e8      	bne.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    97e8:	689d      	ldr	r5, [r3, #8]
    97ea:	2200      	movs	r2, #0
    97ec:	4629      	mov	r1, r5
    97ee:	4630      	mov	r0, r6
    97f0:	f002 faee 	bl	bdd0 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    97f4:	2800      	cmp	r0, #0
    97f6:	d0e0      	beq.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    97f8:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    97fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9800:	d1db      	bne.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    9802:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9804:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    9806:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9808:	2a01      	cmp	r2, #1
    980a:	d8d6      	bhi.n	97ba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    980c:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    980e:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9810:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9812:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9814:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    9816:	f04f 0300 	mov.w	r3, #0
    981a:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    981c:	d044      	beq.n	98a8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    981e:	2201      	movs	r2, #1
    9820:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    9822:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9824:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    9826:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9828:	4291      	cmp	r1, r2
    982a:	d004      	beq.n	9836 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    982c:	2b08      	cmp	r3, #8
    982e:	d1f7      	bne.n	9820 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    9830:	2000      	movs	r0, #0
    9832:	71a3      	strb	r3, [r4, #6]
}
    9834:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    9836:	461e      	mov	r6, r3
    9838:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    983a:	8ac1      	ldrh	r1, [r0, #22]
    983c:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    983e:	b909      	cbnz	r1, 9844 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    9840:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9842:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9844:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    9846:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    984a:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    984c:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    984e:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9850:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9852:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9856:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    985a:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    985e:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9862:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    9864:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    9868:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    986a:	b902      	cbnz	r2, 986e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    986c:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    986e:	1aed      	subs	r5, r5, r3
    9870:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9872:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    9874:	1c5a      	adds	r2, r3, #1
    9876:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9878:	f04f 32ff 	mov.w	r2, #4294967295
    987c:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    987e:	f640 72f4 	movw	r2, #4084	; 0xff4
    9882:	4293      	cmp	r3, r2
    9884:	d90c      	bls.n	98a0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9886:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    988a:	4293      	cmp	r3, r2
    988c:	d90a      	bls.n	98a4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    988e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9890:	2320      	movs	r3, #32
    9892:	6222      	str	r2, [r4, #32]
  return true;
    9894:	2001      	movs	r0, #1
    m_fatType = 12;
    9896:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9898:	6321      	str	r1, [r4, #48]	; 0x30
    989a:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    989e:	bd70      	pop	{r4, r5, r6, pc}
    98a0:	230c      	movs	r3, #12
    98a2:	e7f7      	b.n	9894 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    98a4:	2310      	movs	r3, #16
    98a6:	e7f5      	b.n	9894 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    98a8:	461e      	mov	r6, r3
    98aa:	e7c6      	b.n	983a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

000098ac <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    98ac:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    98ae:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    98b2:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    98b4:	2300      	movs	r3, #0
    98b6:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    98b8:	a801      	add	r0, sp, #4
    98ba:	4621      	mov	r1, r4
    98bc:	9301      	str	r3, [sp, #4]
    98be:	f7fe fa27 	bl	7d10 <FatFile::open(FatFile*, char const*, int)>
    98c2:	4605      	mov	r5, r0
    98c4:	b198      	cbz	r0, 98ee <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    98c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    98ca:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    98ce:	d011      	beq.n	98f4 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    98d0:	f10d 0e04 	add.w	lr, sp, #4
    98d4:	46a4      	mov	ip, r4
    98d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    98da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    98de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    98e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    98e6:	f8de 3000 	ldr.w	r3, [lr]
    98ea:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    98ee:	4628      	mov	r0, r5
    98f0:	b00b      	add	sp, #44	; 0x2c
    98f2:	bd30      	pop	{r4, r5, pc}
  return false;
    98f4:	461d      	mov	r5, r3
}
    98f6:	4628      	mov	r0, r5
    98f8:	b00b      	add	sp, #44	; 0x2c
    98fa:	bd30      	pop	{r4, r5, pc}

000098fc <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    98fc:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    98fe:	b570      	push	{r4, r5, r6, lr}
    9900:	4604      	mov	r4, r0
  if (this == &from) return *this;
    9902:	d021      	beq.n	9948 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    9904:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9906:	460d      	mov	r5, r1
    9908:	b118      	cbz	r0, 9912 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    990a:	f7fe f8c5 	bl	7a98 <FatFile::close()>
    990e:	2800      	cmp	r0, #0
    9910:	d141      	bne.n	9996 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9912:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9914:	b118      	cbz	r0, 991e <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    9916:	f7fc fbbd 	bl	6094 <ExFatFile::close()>
    991a:	2800      	cmp	r0, #0
    991c:	d141      	bne.n	99a2 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    991e:	6bae      	ldr	r6, [r5, #56]	; 0x38
    9920:	b1a6      	cbz	r6, 994c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    9922:	4621      	mov	r1, r4
    9924:	2024      	movs	r0, #36	; 0x24
    9926:	f000 f8e9 	bl	9afc <operator new(unsigned int, unsigned long*)>
    992a:	2300      	movs	r3, #0
    992c:	4684      	mov	ip, r0
    992e:	8003      	strh	r3, [r0, #0]
    9930:	7083      	strb	r3, [r0, #2]
    9932:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9934:	6bad      	ldr	r5, [r5, #56]	; 0x38
    9936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9938:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    993c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    993e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9942:	682b      	ldr	r3, [r5, #0]
    9944:	f8cc 3000 	str.w	r3, [ip]
}
    9948:	4620      	mov	r0, r4
    994a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    994c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    994e:	2b00      	cmp	r3, #0
    9950:	d0fa      	beq.n	9948 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    9952:	4621      	mov	r1, r4
    9954:	2038      	movs	r0, #56	; 0x38
    9956:	f000 f8d1 	bl	9afc <operator new(unsigned int, unsigned long*)>
    995a:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    995e:	8646      	strh	r6, [r0, #50]	; 0x32
    9960:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9962:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9964:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    9968:	681e      	ldr	r6, [r3, #0]
    996a:	3310      	adds	r3, #16
    996c:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    9970:	3010      	adds	r0, #16
    9972:	f853 1c08 	ldr.w	r1, [r3, #-8]
    9976:	f853 2c04 	ldr.w	r2, [r3, #-4]
    997a:	4563      	cmp	r3, ip
    997c:	f840 6c10 	str.w	r6, [r0, #-16]
    9980:	f840 5c0c 	str.w	r5, [r0, #-12]
    9984:	f840 1c08 	str.w	r1, [r0, #-8]
    9988:	f840 2c04 	str.w	r2, [r0, #-4]
    998c:	d1ec      	bne.n	9968 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    998e:	681b      	ldr	r3, [r3, #0]
    9990:	6003      	str	r3, [r0, #0]
}
    9992:	4620      	mov	r0, r4
    9994:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    9996:	2300      	movs	r3, #0
    9998:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    999a:	6bae      	ldr	r6, [r5, #56]	; 0x38
    999c:	2e00      	cmp	r6, #0
    999e:	d1c0      	bne.n	9922 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    99a0:	e7d4      	b.n	994c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    99a2:	2300      	movs	r3, #0
  if (from.m_fFile) {
    99a4:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    99a6:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    99a8:	2e00      	cmp	r6, #0
    99aa:	d1ba      	bne.n	9922 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    99ac:	e7ce      	b.n	994c <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    99ae:	bf00      	nop

000099b0 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    99b0:	b510      	push	{r4, lr}
    99b2:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    99b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
    99b6:	b110      	cbz	r0, 99be <FsBaseFile::close()+0xe>
    99b8:	f7fe f86e 	bl	7a98 <FatFile::close()>
    99bc:	b930      	cbnz	r0, 99cc <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    99be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    99c0:	b110      	cbz	r0, 99c8 <FsBaseFile::close()+0x18>
    99c2:	f7fc fb67 	bl	6094 <ExFatFile::close()>
    99c6:	b920      	cbnz	r0, 99d2 <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    99c8:	2000      	movs	r0, #0
}
    99ca:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    99cc:	2300      	movs	r3, #0
    99ce:	63a3      	str	r3, [r4, #56]	; 0x38
}
    99d0:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    99d2:	2300      	movs	r3, #0
    99d4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    99d6:	bd10      	pop	{r4, pc}

000099d8 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    99d8:	2900      	cmp	r1, #0
    99da:	d052      	beq.n	9a82 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    99dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99e0:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    99e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    99e4:	460d      	mov	r5, r1
    99e6:	4617      	mov	r7, r2
    99e8:	461e      	mov	r6, r3
    99ea:	b110      	cbz	r0, 99f2 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    99ec:	f7fe f854 	bl	7a98 <FatFile::close()>
    99f0:	bba0      	cbnz	r0, 9a5c <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    99f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    99f4:	b110      	cbz	r0, 99fc <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    99f6:	f7fc fb4d 	bl	6094 <ExFatFile::close()>
    99fa:	bbb8      	cbnz	r0, 9a6c <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    99fc:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    9a00:	f1b8 0f00 	cmp.w	r8, #0
    9a04:	d011      	beq.n	9a2a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    9a06:	4621      	mov	r1, r4
    9a08:	2024      	movs	r0, #36	; 0x24
    9a0a:	f000 f877 	bl	9afc <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9a0e:	4633      	mov	r3, r6
    9a10:	2600      	movs	r6, #0
    9a12:	463a      	mov	r2, r7
    9a14:	8006      	strh	r6, [r0, #0]
    9a16:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    9a18:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9a1a:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9a1e:	f7fe f9f9 	bl	7e14 <FatFile::open(FatVolume*, char const*, int)>
    9a22:	bb58      	cbnz	r0, 9a7c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    9a24:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    9a2a:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9a2e:	b193      	cbz	r3, 9a56 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    9a30:	4621      	mov	r1, r4
    9a32:	2038      	movs	r0, #56	; 0x38
    9a34:	f000 f862 	bl	9afc <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9a38:	4633      	mov	r3, r6
    9a3a:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    9a3e:	463a      	mov	r2, r7
    9a40:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9a44:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9a46:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9a4a:	f7fc ff33 	bl	68b4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9a4e:	b9a8      	cbnz	r0, 9a7c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    9a50:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9a56:	2000      	movs	r0, #0
}
    9a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    9a5c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9a5e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    9a62:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    9a64:	f1b8 0f00 	cmp.w	r8, #0
    9a68:	d1cd      	bne.n	9a06 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    9a6a:	e7de      	b.n	9a2a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    9a6c:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9a6e:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    9a72:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    9a74:	f1b8 0f00 	cmp.w	r8, #0
    9a78:	d1c5      	bne.n	9a06 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    9a7a:	e7d6      	b.n	9a2a <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    9a7c:	2001      	movs	r0, #1
}
    9a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9a82:	2000      	movs	r0, #0
}
    9a84:	4770      	bx	lr
    9a86:	bf00      	nop

00009a88 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a8a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9a8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9a8e:	460d      	mov	r5, r1
    9a90:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    9a92:	b110      	cbz	r0, 9a9a <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    9a94:	f7fe f800 	bl	7a98 <FatFile::close()>
    9a98:	bb38      	cbnz	r0, 9aea <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    9a9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9a9c:	b110      	cbz	r0, 9aa4 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    9a9e:	f7fc faf9 	bl	6094 <ExFatFile::close()>
    9aa2:	bb38      	cbnz	r0, 9af4 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    9aa4:	6bae      	ldr	r6, [r5, #56]	; 0x38
    9aa6:	b176      	cbz	r6, 9ac6 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    9aa8:	4621      	mov	r1, r4
    9aaa:	2024      	movs	r0, #36	; 0x24
    9aac:	f000 f826 	bl	9afc <operator new(unsigned int, unsigned long*)>
    9ab0:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9ab2:	463a      	mov	r2, r7
    9ab4:	8001      	strh	r1, [r0, #0]
    9ab6:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    9ab8:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9aba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9abc:	f7fe fd10 	bl	84e0 <FatFile::openNext(FatFile*, int)>
    9ac0:	b988      	cbnz	r0, 9ae6 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    9ac2:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    9ac6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    9ac8:	2800      	cmp	r0, #0
    9aca:	d0fb      	beq.n	9ac4 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    9acc:	4621      	mov	r1, r4
    9ace:	2038      	movs	r0, #56	; 0x38
    9ad0:	f000 f814 	bl	9afc <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9ad4:	463a      	mov	r2, r7
    9ad6:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    9ada:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9adc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9ade:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9ae0:	f7fc fef0 	bl	68c4 <ExFatFile::openNext(ExFatFile*, int)>
    9ae4:	b120      	cbz	r0, 9af0 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    9ae6:	2001      	movs	r0, #1
}
    9ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    9aea:	2300      	movs	r3, #0
    9aec:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9aee:	e7d9      	b.n	9aa4 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    9af0:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    9af4:	2300      	movs	r3, #0
    9af6:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9af8:	e7d4      	b.n	9aa4 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    9afa:	bf00      	nop

00009afc <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9afc:	4608      	mov	r0, r1
    9afe:	4770      	bx	lr

00009b00 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    9b04:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9b06:	4604      	mov	r4, r0
    9b08:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    9b0a:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9b0e:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9b12:	4601      	mov	r1, r0
    9b14:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9b18:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    9b1a:	f7ff ffef 	bl	9afc <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    9b1e:	4642      	mov	r2, r8
  ExFatPartition() {}
    9b20:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9b24:	4605      	mov	r5, r0
    9b26:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9b2a:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    9b2e:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    9b32:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9b36:	f7fd fe43 	bl	77c0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9b3a:	bba0      	cbnz	r0, 9ba6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9b3c:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9b3e:	4621      	mov	r1, r4
    9b40:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    9b44:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9b48:	f7ff ffd8 	bl	9afc <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    9b4c:	2302      	movs	r3, #2
    9b4e:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    9b50:	4642      	mov	r2, r8
    9b52:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    9b56:	4605      	mov	r5, r0
    9b58:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    9b5c:	7203      	strb	r3, [r0, #8]
    9b5e:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    9b62:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9b66:	f7ff fe0f 	bl	9788 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9b6a:	b938      	cbnz	r0, 9b7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9b6c:	2300      	movs	r3, #0
    9b6e:	4a1a      	ldr	r2, [pc, #104]	; (9bd8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    9b70:	4618      	mov	r0, r3
  m_cwv = nullptr;
    9b72:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    9b74:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    9b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    9b7c:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9b80:	4630      	mov	r0, r6
    9b82:	f7fd ff89 	bl	7a98 <FatFile::close()>
    return m_vwd.openRoot(this);
    9b86:	4629      	mov	r1, r5
    9b88:	4630      	mov	r0, r6
    9b8a:	f7fe f979 	bl	7e80 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    9b8e:	2800      	cmp	r0, #0
    9b90:	d0ec      	beq.n	9b6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    9b92:	4b12      	ldr	r3, [pc, #72]	; (9bdc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    9b94:	681a      	ldr	r2, [r3, #0]
    9b96:	b9aa      	cbnz	r2, 9bc4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    9b98:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    9b9a:	4b0f      	ldr	r3, [pc, #60]	; (9bd8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    9b9c:	b1af      	cbz	r7, 9bca <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    9b9e:	2001      	movs	r0, #1
    m_cwv = this;
    9ba0:	601c      	str	r4, [r3, #0]
}
    9ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    9ba6:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9baa:	4630      	mov	r0, r6
    9bac:	f7fc fa72 	bl	6094 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9bb0:	4629      	mov	r1, r5
    9bb2:	4630      	mov	r0, r6
    9bb4:	f7fc fa78 	bl	60a8 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    9bb8:	2800      	cmp	r0, #0
    9bba:	d0bf      	beq.n	9b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    9bbc:	4b08      	ldr	r3, [pc, #32]	; (9be0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9bbe:	681a      	ldr	r2, [r3, #0]
    9bc0:	2a00      	cmp	r2, #0
    9bc2:	d0e9      	beq.n	9b98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    9bc4:	4b04      	ldr	r3, [pc, #16]	; (9bd8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    9bc6:	2f00      	cmp	r7, #0
    9bc8:	d1e9      	bne.n	9b9e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    9bca:	681a      	ldr	r2, [r3, #0]
    9bcc:	2a00      	cmp	r2, #0
    9bce:	d0e6      	beq.n	9b9e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    9bd0:	2001      	movs	r0, #1
}
    9bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bd6:	bf00      	nop
    9bd8:	20042314 	.word	0x20042314
    9bdc:	20042318 	.word	0x20042318
    9be0:	200422e0 	.word	0x200422e0

00009be4 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9be4:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    9be6:	2500      	movs	r5, #0
    9be8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    9bec:	4604      	mov	r4, r0
    9bee:	6045      	str	r5, [r0, #4]
    9bf0:	7305      	strb	r5, [r0, #12]
    9bf2:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    9bf4:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9bf8:	4d03      	ldr	r5, [pc, #12]	; (9c08 <FsVolume::open(char const*, int)+0x24>)
    9bfa:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9bfe:	f7ff feeb 	bl	99d8 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9c02:	4620      	mov	r0, r4
    9c04:	bd70      	pop	{r4, r5, r6, pc}
    9c06:	bf00      	nop
    9c08:	20000c64 	.word	0x20000c64

00009c0c <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9c0c:	f04f 30ff 	mov.w	r0, #4294967295
    9c10:	4770      	bx	lr
    9c12:	bf00      	nop

00009c14 <SharedSpiCard::errorCode() const>:
  }
    9c14:	7c40      	ldrb	r0, [r0, #17]
    9c16:	4770      	bx	lr

00009c18 <SharedSpiCard::errorData() const>:
  }
    9c18:	7d00      	ldrb	r0, [r0, #20]
    9c1a:	4770      	bx	lr

00009c1c <SharedSpiCard::type() const>:
  }
    9c1c:	7d40      	ldrb	r0, [r0, #21]
    9c1e:	4770      	bx	lr

00009c20 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9c20:	2001      	movs	r0, #1
    9c22:	4770      	bx	lr

00009c24 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9c24:	7f00      	ldrb	r0, [r0, #28]
    9c26:	4770      	bx	lr

00009c28 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c2c:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c2e:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9c30:	4605      	mov	r5, r0
    9c32:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c34:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9c36:	4691      	mov	r9, r2
    9c38:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c3a:	d028      	beq.n	9c8e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    9c3c:	682b      	ldr	r3, [r5, #0]
    9c3e:	4621      	mov	r1, r4
    9c40:	4628      	mov	r0, r5
    9c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9c44:	4798      	blx	r3
    9c46:	b198      	cbz	r0, 9c70 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    9c48:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9c4a:	f1b9 0f00 	cmp.w	r9, #0
    9c4e:	d012      	beq.n	9c76 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    9c50:	eb04 0809 	add.w	r8, r4, r9
    9c54:	e001      	b.n	9c5a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    9c56:	45a0      	cmp	r8, r4
    9c58:	d00d      	beq.n	9c76 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    9c5a:	4639      	mov	r1, r7
    9c5c:	4620      	mov	r0, r4
    9c5e:	47b0      	blx	r6
    if (!writeData(src)) {
    9c60:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    9c62:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9c64:	4628      	mov	r0, r5
    9c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    9c68:	3401      	adds	r4, #1
    if (!writeData(src)) {
    9c6a:	4798      	blx	r3
    9c6c:	2800      	cmp	r0, #0
    9c6e:	d1f2      	bne.n	9c56 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    9c70:	2000      	movs	r0, #0
}
    9c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    9c76:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9c78:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9c7a:	444b      	add	r3, r9
    9c7c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9c7e:	2800      	cmp	r0, #0
    9c80:	d1f7      	bne.n	9c72 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9c82:	682b      	ldr	r3, [r5, #0]
    9c84:	4628      	mov	r0, r5
    9c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9c88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    9c8c:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9c8e:	6983      	ldr	r3, [r0, #24]
    9c90:	428b      	cmp	r3, r1
    9c92:	d1d3      	bne.n	9c3c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    9c94:	e7d9      	b.n	9c4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    9c96:	bf00      	nop

00009c98 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9c98:	4770      	bx	lr
    9c9a:	bf00      	nop

00009c9c <SharedSpiCard::end()>:
    m_spiDriver.end();
    9c9c:	3004      	adds	r0, #4
    9c9e:	f002 b817 	b.w	bcd0 <SdSpiArduinoDriver::end()>
    9ca2:	bf00      	nop

00009ca4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9ca4:	b510      	push	{r4, lr}
    9ca6:	4604      	mov	r4, r0
    9ca8:	2120      	movs	r1, #32
    9caa:	f002 ffad 	bl	cc08 <operator delete(void*, unsigned int)>
    9cae:	4620      	mov	r0, r4
    9cb0:	bd10      	pop	{r4, pc}
    9cb2:	bf00      	nop

00009cb4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    9cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cb8:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9cba:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    9cbc:	4605      	mov	r5, r0
    9cbe:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9cc0:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    9cc2:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9cc4:	d024      	beq.n	9d10 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    9cc6:	682b      	ldr	r3, [r5, #0]
    9cc8:	4631      	mov	r1, r6
    9cca:	4628      	mov	r0, r5
    9ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9cce:	4798      	blx	r3
    9cd0:	b178      	cbz	r0, 9cf2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    9cd2:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    9cd4:	b187      	cbz	r7, 9cf8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    9cd6:	2600      	movs	r6, #0
    9cd8:	e001      	b.n	9cde <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9cda:	42b7      	cmp	r7, r6
    9cdc:	d00c      	beq.n	9cf8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    9cde:	682a      	ldr	r2, [r5, #0]
    9ce0:	4621      	mov	r1, r4
    9ce2:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    9ce4:	3601      	adds	r6, #1
    if (!writeData(src)) {
    9ce6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    9ce8:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    9cec:	4790      	blx	r2
    9cee:	2800      	cmp	r0, #0
    9cf0:	d1f3      	bne.n	9cda <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    9cf2:	2000      	movs	r0, #0
}
    9cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    9cf8:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9cfa:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9cfc:	443b      	add	r3, r7
    9cfe:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9d00:	2800      	cmp	r0, #0
    9d02:	d1f7      	bne.n	9cf4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    9d04:	682b      	ldr	r3, [r5, #0]
    9d06:	4628      	mov	r0, r5
    9d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    9d0e:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9d10:	6983      	ldr	r3, [r0, #24]
    9d12:	428b      	cmp	r3, r1
    9d14:	d1d7      	bne.n	9cc6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9d16:	e7dd      	b.n	9cd4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009d18 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d1c:	4e20      	ldr	r6, [pc, #128]	; (9da0 <SharedSpiCard::writeStop()+0x88>)
    9d1e:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    9d20:	f100 0804 	add.w	r8, r0, #4
    9d24:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    9d26:	f505 7516 	add.w	r5, r5, #600	; 0x258
    9d2a:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9d2c:	e003      	b.n	9d36 <SharedSpiCard::writeStop()+0x1e>
    9d2e:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9d30:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9d32:	041b      	lsls	r3, r3, #16
    9d34:	d410      	bmi.n	9d58 <SharedSpiCard::writeStop()+0x40>
    9d36:	4640      	mov	r0, r8
    9d38:	f001 ffce 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9d3c:	28ff      	cmp	r0, #255	; 0xff
    9d3e:	4604      	mov	r4, r0
    9d40:	d1f5      	bne.n	9d2e <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    9d42:	21fd      	movs	r1, #253	; 0xfd
    9d44:	4640      	mov	r0, r8
    9d46:	f001 ffe5 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    9d4a:	7cbb      	ldrb	r3, [r7, #18]
    9d4c:	b9cb      	cbnz	r3, 9d82 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    9d4e:	2300      	movs	r3, #0
    9d50:	2001      	movs	r0, #1
    9d52:	74fb      	strb	r3, [r7, #19]
}
    9d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    9d58:	231e      	movs	r3, #30
  if (m_spiActive) {
    9d5a:	7cb8      	ldrb	r0, [r7, #18]
    9d5c:	747b      	strb	r3, [r7, #17]
    9d5e:	2800      	cmp	r0, #0
    9d60:	d0f8      	beq.n	9d54 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    9d62:	7c38      	ldrb	r0, [r7, #16]
    9d64:	2101      	movs	r1, #1
    9d66:	f001 fef7 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d6a:	21ff      	movs	r1, #255	; 0xff
    9d6c:	4640      	mov	r0, r8
    9d6e:	f001 ffd1 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9d72:	4640      	mov	r0, r8
    9d74:	f001 ff84 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9d78:	2300      	movs	r3, #0
  return false;
    9d7a:	4618      	mov	r0, r3
    m_spiActive = false;
    9d7c:	74bb      	strb	r3, [r7, #18]
}
    9d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    9d82:	2101      	movs	r1, #1
    9d84:	7c38      	ldrb	r0, [r7, #16]
    9d86:	f001 fee7 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9d8a:	4621      	mov	r1, r4
    9d8c:	4640      	mov	r0, r8
    9d8e:	f001 ffc1 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9d92:	4640      	mov	r0, r8
    9d94:	f001 ff74 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9d98:	2300      	movs	r3, #0
    9d9a:	74bb      	strb	r3, [r7, #18]
}
    9d9c:	e7d7      	b.n	9d4e <SharedSpiCard::writeStop()+0x36>
    9d9e:	bf00      	nop
    9da0:	200432dc 	.word	0x200432dc

00009da4 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    9da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    9da8:	7cc3      	ldrb	r3, [r0, #19]
    9daa:	2b01      	cmp	r3, #1
    9dac:	d035      	beq.n	9e1a <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    9dae:	7c86      	ldrb	r6, [r0, #18]
    9db0:	4604      	mov	r4, r0
    9db2:	b14e      	cbz	r6, 9dc8 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    9db4:	3004      	adds	r0, #4
    9db6:	f001 ff8f 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9dba:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9dbe:	bf18      	it	ne
    9dc0:	2501      	movne	r5, #1
}
    9dc2:	4628      	mov	r0, r5
    9dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    9dc8:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    9dca:	f04f 0801 	mov.w	r8, #1
    9dce:	4638      	mov	r0, r7
    9dd0:	f001 ff4c 	bl	bc6c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    9dd4:	4631      	mov	r1, r6
    9dd6:	7c20      	ldrb	r0, [r4, #16]
    9dd8:	f001 febe 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9ddc:	21ff      	movs	r1, #255	; 0xff
    9dde:	4638      	mov	r0, r7
    9de0:	f001 ff98 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9de4:	4638      	mov	r0, r7
    9de6:	f884 8012 	strb.w	r8, [r4, #18]
    9dea:	f001 ff75 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    9dee:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    9df0:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    9df4:	bf18      	it	ne
    9df6:	2501      	movne	r5, #1
  if (m_spiActive) {
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d0e2      	beq.n	9dc2 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    9dfc:	4641      	mov	r1, r8
    9dfe:	7c20      	ldrb	r0, [r4, #16]
    9e00:	f001 feaa 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9e04:	21ff      	movs	r1, #255	; 0xff
    9e06:	4638      	mov	r0, r7
    9e08:	f001 ff84 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9e0c:	4638      	mov	r0, r7
    9e0e:	f001 ff37 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
}
    9e12:	4628      	mov	r0, r5
    m_spiActive = false;
    9e14:	74a6      	strb	r6, [r4, #18]
}
    9e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9e1a:	2500      	movs	r5, #0
}
    9e1c:	4628      	mov	r0, r5
    9e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e22:	bf00      	nop

00009e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    9e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e28:	4f20      	ldr	r7, [pc, #128]	; (9eac <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    9e2a:	4604      	mov	r4, r0
    9e2c:	4688      	mov	r8, r1
    9e2e:	4691      	mov	r9, r2
    9e30:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    9e32:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    9e34:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    9e38:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9e3a:	e003      	b.n	9e44 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    9e3c:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9e3e:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9e40:	041b      	lsls	r3, r3, #16
    9e42:	d40d      	bmi.n	9e60 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    9e44:	4630      	mov	r0, r6
    9e46:	f001 ff47 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9e4a:	28ff      	cmp	r0, #255	; 0xff
    9e4c:	7520      	strb	r0, [r4, #20]
    9e4e:	d0f5      	beq.n	9e3c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    9e50:	28fe      	cmp	r0, #254	; 0xfe
    9e52:	d01a      	beq.n	9e8a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    9e54:	2318      	movs	r3, #24
  if (m_spiActive) {
    9e56:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    9e58:	7463      	strb	r3, [r4, #17]
    9e5a:	b930      	cbnz	r0, 9e6a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    9e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e60:	231d      	movs	r3, #29
  if (m_spiActive) {
    9e62:	7ca0      	ldrb	r0, [r4, #18]
    9e64:	7463      	strb	r3, [r4, #17]
    9e66:	2800      	cmp	r0, #0
    9e68:	d0f8      	beq.n	9e5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    9e6a:	7c20      	ldrb	r0, [r4, #16]
    9e6c:	2101      	movs	r1, #1
    9e6e:	f001 fe73 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9e72:	21ff      	movs	r1, #255	; 0xff
    9e74:	4630      	mov	r0, r6
    9e76:	f001 ff4d 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9e7a:	4630      	mov	r0, r6
    9e7c:	f001 ff00 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9e80:	2300      	movs	r3, #0
  return false;
    9e82:	4618      	mov	r0, r3
    m_spiActive = false;
    9e84:	74a3      	strb	r3, [r4, #18]
}
    9e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    9e8a:	464a      	mov	r2, r9
    9e8c:	4641      	mov	r1, r8
    9e8e:	4630      	mov	r0, r6
    9e90:	f001 ff2e 	bl	bcf0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    9e94:	7520      	strb	r0, [r4, #20]
    9e96:	b938      	cbnz	r0, 9ea8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    9e98:	4630      	mov	r0, r6
    9e9a:	f001 ff1d 	bl	bcd8 <SdSpiArduinoDriver::receive()>
    9e9e:	4630      	mov	r0, r6
    9ea0:	f001 ff1a 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  return true;
    9ea4:	2001      	movs	r0, #1
    9ea6:	e7d9      	b.n	9e5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    9ea8:	2325      	movs	r3, #37	; 0x25
    9eaa:	e7d4      	b.n	9e56 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    9eac:	200432dc 	.word	0x200432dc

00009eb0 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    9eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    9eb2:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    9eb4:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    9eb6:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    9eb8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    9eba:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    9ebc:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    9ebe:	f000 f85b 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9ec2:	b9b0      	cbnz	r0, 9ef2 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    9ec4:	7ca6      	ldrb	r6, [r4, #18]
    9ec6:	b91e      	cbnz	r6, 9ed0 <SharedSpiCard::readStop()+0x20>
  return true;
    9ec8:	2601      	movs	r6, #1
}
    9eca:	4630      	mov	r0, r6
    9ecc:	b003      	add	sp, #12
    9ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    9ed0:	4605      	mov	r5, r0
    9ed2:	2101      	movs	r1, #1
    9ed4:	7c20      	ldrb	r0, [r4, #16]
    9ed6:	f001 fe3f 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9eda:	1d20      	adds	r0, r4, #4
    9edc:	21ff      	movs	r1, #255	; 0xff
    9ede:	9001      	str	r0, [sp, #4]
    9ee0:	f001 ff18 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9ee4:	9801      	ldr	r0, [sp, #4]
    9ee6:	f001 fecb 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    9eea:	4630      	mov	r0, r6
    m_spiActive = false;
    9eec:	74a5      	strb	r5, [r4, #18]
}
    9eee:	b003      	add	sp, #12
    9ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    9ef2:	2309      	movs	r3, #9
  if (m_spiActive) {
    9ef4:	7ca6      	ldrb	r6, [r4, #18]
    9ef6:	7463      	strb	r3, [r4, #17]
    9ef8:	2e00      	cmp	r6, #0
    9efa:	d0e6      	beq.n	9eca <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    9efc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    9efe:	7c20      	ldrb	r0, [r4, #16]
    9f00:	2101      	movs	r1, #1
}
    9f02:	463e      	mov	r6, r7
    9f04:	f001 fe28 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9f08:	21ff      	movs	r1, #255	; 0xff
    9f0a:	4628      	mov	r0, r5
    9f0c:	f001 ff02 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    9f10:	4628      	mov	r0, r5
    9f12:	f001 feb5 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
}
    9f16:	4630      	mov	r0, r6
    m_spiActive = false;
    9f18:	74a7      	strb	r7, [r4, #18]
}
    9f1a:	b003      	add	sp, #12
    9f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9f1e:	bf00      	nop

00009f20 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    9f20:	7cc2      	ldrb	r2, [r0, #19]
    9f22:	2a02      	cmp	r2, #2
    9f24:	d003      	beq.n	9f2e <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    9f26:	2a01      	cmp	r2, #1
    9f28:	d004      	beq.n	9f34 <SharedSpiCard::syncDevice()+0x14>
}
    9f2a:	2001      	movs	r0, #1
    9f2c:	4770      	bx	lr
    return writeStop();
    9f2e:	6803      	ldr	r3, [r0, #0]
    9f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9f32:	4718      	bx	r3
    return readStop();
    9f34:	f7ff bfbc 	b.w	9eb0 <SharedSpiCard::readStop()>

00009f38 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9f38:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    9f3a:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9f3c:	460d      	mov	r5, r1
    9f3e:	490d      	ldr	r1, [pc, #52]	; (9f74 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    9f40:	4604      	mov	r4, r0
  if (!syncDevice()) {
    9f42:	6a1a      	ldr	r2, [r3, #32]
    9f44:	428a      	cmp	r2, r1
    9f46:	d10c      	bne.n	9f62 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    9f48:	7cc2      	ldrb	r2, [r0, #19]
    9f4a:	2a02      	cmp	r2, #2
    9f4c:	d004      	beq.n	9f58 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    9f4e:	2a01      	cmp	r2, #1
    9f50:	d00b      	beq.n	9f6a <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    9f52:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    9f54:	7725      	strb	r5, [r4, #28]
}
    9f56:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    9f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    9f5a:	4798      	blx	r3
  if (!syncDevice()) {
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d1f8      	bne.n	9f52 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    9f60:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    9f62:	4790      	blx	r2
    9f64:	2800      	cmp	r0, #0
    9f66:	d0fb      	beq.n	9f60 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9f68:	e7f3      	b.n	9f52 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    9f6a:	f7ff ffa1 	bl	9eb0 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    9f6e:	2800      	cmp	r0, #0
    9f70:	d0f6      	beq.n	9f60 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    9f72:	e7ee      	b.n	9f52 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    9f74:	00009f21 	.word	0x00009f21

00009f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    9f7c:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    9f7e:	b082      	sub	sp, #8
    9f80:	460f      	mov	r7, r1
    9f82:	4935      	ldr	r1, [pc, #212]	; (a058 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    9f84:	9201      	str	r2, [sp, #4]
    9f86:	4606      	mov	r6, r0
  if (!syncDevice()) {
    9f88:	6a1a      	ldr	r2, [r3, #32]
    9f8a:	428a      	cmp	r2, r1
    9f8c:	d15e      	bne.n	a04c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    9f8e:	7cc2      	ldrb	r2, [r0, #19]
    9f90:	2a02      	cmp	r2, #2
    9f92:	d041      	beq.n	a018 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    9f94:	2a01      	cmp	r2, #1
    9f96:	d05b      	beq.n	a050 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    9f98:	7cb4      	ldrb	r4, [r6, #18]
    9f9a:	2c00      	cmp	r4, #0
    9f9c:	d047      	beq.n	a02e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    9f9e:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    9fa0:	2f0c      	cmp	r7, #12
    9fa2:	d011      	beq.n	9fc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    9fa4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a05c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    9fa8:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    9fac:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    9fb0:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    9fb2:	e004      	b.n	9fbe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    9fb4:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    9fb8:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    9fba:	041a      	lsls	r2, r3, #16
    9fbc:	d434      	bmi.n	a028 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    9fbe:	4628      	mov	r0, r5
    9fc0:	f001 fe8a 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9fc4:	28ff      	cmp	r0, #255	; 0xff
    9fc6:	d1f5      	bne.n	9fb4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    9fc8:	f10d 0804 	add.w	r8, sp, #4
    9fcc:	ac02      	add	r4, sp, #8
    9fce:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    9fd2:	4628      	mov	r0, r5
    9fd4:	f001 fe9e 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    9fd8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    9fdc:	4628      	mov	r0, r5
    9fde:	f001 fe99 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9fe2:	45a0      	cmp	r8, r4
    9fe4:	d1f8      	bne.n	9fd8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    9fe6:	2f00      	cmp	r7, #0
    9fe8:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    9fea:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    9fee:	bf0c      	ite	eq
    9ff0:	2195      	moveq	r1, #149	; 0x95
    9ff2:	2187      	movne	r1, #135	; 0x87
    9ff4:	f001 fe8e 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9ff8:	4628      	mov	r0, r5
    9ffa:	f001 fe6d 	bl	bcd8 <SdSpiArduinoDriver::receive()>
    9ffe:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    a000:	3c01      	subs	r4, #1
    a002:	f001 fe69 	bl	bcd8 <SdSpiArduinoDriver::receive()>
    a006:	0603      	lsls	r3, r0, #24
    a008:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    a00a:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    a00c:	d501      	bpl.n	a012 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    a00e:	2c00      	cmp	r4, #0
    a010:	d1f5      	bne.n	9ffe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    a012:	b002      	add	sp, #8
    a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    a018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a01a:	4798      	blx	r3
  if (!syncDevice()) {
    a01c:	2800      	cmp	r0, #0
    a01e:	d1bb      	bne.n	9f98 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    a020:	20ff      	movs	r0, #255	; 0xff
}
    a022:	b002      	add	sp, #8
    a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a028:	2f00      	cmp	r7, #0
    a02a:	d0cd      	beq.n	9fc8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    a02c:	e7f8      	b.n	a020 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    a02e:	1d35      	adds	r5, r6, #4
    a030:	4628      	mov	r0, r5
    a032:	f001 fe1b 	bl	bc6c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a036:	4621      	mov	r1, r4
    a038:	7c30      	ldrb	r0, [r6, #16]
    a03a:	f001 fd8d 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a03e:	21ff      	movs	r1, #255	; 0xff
    a040:	4628      	mov	r0, r5
    a042:	f001 fe67 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    a046:	2301      	movs	r3, #1
    a048:	74b3      	strb	r3, [r6, #18]
}
    a04a:	e7a9      	b.n	9fa0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    a04c:	4790      	blx	r2
    a04e:	e7e5      	b.n	a01c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    a050:	f7ff ff2e 	bl	9eb0 <SharedSpiCard::readStop()>
    a054:	e7e2      	b.n	a01c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    a056:	bf00      	nop
    a058:	00009f21 	.word	0x00009f21
    a05c:	200432dc 	.word	0x200432dc

0000a060 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    a062:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a064:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a066:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a068:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    a06a:	f7ff ff85 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a06e:	b9e0      	cbnz	r0, a0aa <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    a070:	1d37      	adds	r7, r6, #4
    a072:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a074:	4638      	mov	r0, r7
    a076:	f001 fe2f 	bl	bcd8 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a07a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a07e:	42a5      	cmp	r5, r4
    a080:	d1f8      	bne.n	a074 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    a082:	7cb4      	ldrb	r4, [r6, #18]
    a084:	b914      	cbnz	r4, a08c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a086:	2401      	movs	r4, #1
}
    a088:	4620      	mov	r0, r4
    a08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    a08c:	7c30      	ldrb	r0, [r6, #16]
    a08e:	2101      	movs	r1, #1
    a090:	f001 fd62 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a094:	21ff      	movs	r1, #255	; 0xff
    a096:	4638      	mov	r0, r7
    a098:	f001 fe3c 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a09c:	4638      	mov	r0, r7
    a09e:	f001 fdef 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a0a2:	2300      	movs	r3, #0
}
    a0a4:	4620      	mov	r0, r4
    m_spiActive = false;
    a0a6:	74b3      	strb	r3, [r6, #18]
}
    a0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a0aa:	2312      	movs	r3, #18
  if (m_spiActive) {
    a0ac:	7cb4      	ldrb	r4, [r6, #18]
    a0ae:	7473      	strb	r3, [r6, #17]
    a0b0:	2c00      	cmp	r4, #0
    a0b2:	d0e9      	beq.n	a088 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    a0b4:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    a0b6:	7c30      	ldrb	r0, [r6, #16]
    a0b8:	2101      	movs	r1, #1
    a0ba:	f001 fd4d 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a0be:	21ff      	movs	r1, #255	; 0xff
    a0c0:	4620      	mov	r0, r4
    a0c2:	f001 fe27 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a0c6:	4620      	mov	r0, r4
    a0c8:	f001 fdda 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a0cc:	2300      	movs	r3, #0
  return false;
    a0ce:	461c      	mov	r4, r3
    m_spiActive = false;
    a0d0:	74b3      	strb	r3, [r6, #18]
}
    a0d2:	4620      	mov	r0, r4
    a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d6:	bf00      	nop

0000a0d8 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a0d8:	b570      	push	{r4, r5, r6, lr}
    a0da:	4616      	mov	r6, r2
    a0dc:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    a0de:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a0e0:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    a0e2:	f7ff ff49 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a0e6:	b1b0      	cbz	r0, a116 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    a0e8:	231b      	movs	r3, #27
    a0ea:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a0ec:	7ca0      	ldrb	r0, [r4, #18]
    a0ee:	b908      	cbnz	r0, a0f4 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    a0f0:	b002      	add	sp, #8
    a0f2:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a0f4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a0f6:	7c20      	ldrb	r0, [r4, #16]
    a0f8:	2101      	movs	r1, #1
    a0fa:	f001 fd2d 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a0fe:	21ff      	movs	r1, #255	; 0xff
    a100:	4628      	mov	r0, r5
    a102:	f001 fe07 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a106:	4628      	mov	r0, r5
    a108:	f001 fdba 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a10c:	2300      	movs	r3, #0
  return false;
    a10e:	4618      	mov	r0, r3
    m_spiActive = false;
    a110:	74a3      	strb	r3, [r4, #18]
}
    a112:	b002      	add	sp, #8
    a114:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a116:	4605      	mov	r5, r0
    a118:	2210      	movs	r2, #16
    a11a:	4631      	mov	r1, r6
    a11c:	4620      	mov	r0, r4
    a11e:	f7ff fe81 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a122:	2800      	cmp	r0, #0
    a124:	d0e2      	beq.n	a0ec <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    a126:	7ca6      	ldrb	r6, [r4, #18]
    a128:	2e00      	cmp	r6, #0
    a12a:	d0e1      	beq.n	a0f0 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    a12c:	7c20      	ldrb	r0, [r4, #16]
    a12e:	2101      	movs	r1, #1
    a130:	f001 fd12 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a134:	1d20      	adds	r0, r4, #4
    a136:	21ff      	movs	r1, #255	; 0xff
    a138:	9001      	str	r0, [sp, #4]
    a13a:	f001 fdeb 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a13e:	9801      	ldr	r0, [sp, #4]
    a140:	f001 fd9e 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
}
    a144:	4630      	mov	r0, r6
    m_spiActive = false;
    a146:	74a5      	strb	r5, [r4, #18]
}
    a148:	b002      	add	sp, #8
    a14a:	bd70      	pop	{r4, r5, r6, pc}

0000a14c <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a14c:	6803      	ldr	r3, [r0, #0]
    a14e:	4a25      	ldr	r2, [pc, #148]	; (a1e4 <SharedSpiCard::sectorCount()+0x98>)
    a150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a152:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    a154:	b500      	push	{lr}
    a156:	b085      	sub	sp, #20
    a158:	d10f      	bne.n	a17a <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    a15a:	466a      	mov	r2, sp
    a15c:	2109      	movs	r1, #9
    a15e:	f7ff ffbb 	bl	a0d8 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a162:	b138      	cbz	r0, a174 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a164:	f89d 3000 	ldrb.w	r3, [sp]
    a168:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a16c:	d008      	beq.n	a180 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a16e:	2b40      	cmp	r3, #64	; 0x40
    a170:	d027      	beq.n	a1c2 <SharedSpiCard::sectorCount()+0x76>
    a172:	2000      	movs	r0, #0
}
    a174:	b005      	add	sp, #20
    a176:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a17a:	4669      	mov	r1, sp
    a17c:	4798      	blx	r3
    a17e:	e7f0      	b.n	a162 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a180:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    a184:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a188:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a18c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a190:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    a194:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a196:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a19a:	0080      	lsls	r0, r0, #2
    a19c:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1a0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a1a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1a8:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1ac:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a1b0:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a1b4:	4413      	add	r3, r2
    a1b6:	3001      	adds	r0, #1
    a1b8:	3b07      	subs	r3, #7
    a1ba:	4098      	lsls	r0, r3
}
    a1bc:	b005      	add	sp, #20
    a1be:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a1c2:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a1c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a1ca:	3001      	adds	r0, #1
    a1cc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a1d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a1d4:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a1d8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    a1dc:	0280      	lsls	r0, r0, #10
    a1de:	b005      	add	sp, #20
    a1e0:	f85d fb04 	ldr.w	pc, [sp], #4
    a1e4:	0000a509 	.word	0x0000a509

0000a1e8 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a1e8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    a1ea:	460a      	mov	r2, r1
    a1ec:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a1ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    a1f0:	b083      	sub	sp, #12
    a1f2:	4d16      	ldr	r5, [pc, #88]	; (a24c <SharedSpiCard::readStart(unsigned long)+0x64>)
    a1f4:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a1f6:	42ab      	cmp	r3, r5
    a1f8:	d124      	bne.n	a244 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    a1fa:	7d40      	ldrb	r0, [r0, #21]
    a1fc:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    a1fe:	f04f 0112 	mov.w	r1, #18
    a202:	4620      	mov	r0, r4
    sector <<= 9;
    a204:	bf18      	it	ne
    a206:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    a208:	f7ff feb6 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a20c:	b920      	cbnz	r0, a218 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    a20e:	2301      	movs	r3, #1
  return true;
    a210:	4618      	mov	r0, r3
  m_state = READ_STATE;
    a212:	74e3      	strb	r3, [r4, #19]
}
    a214:	b003      	add	sp, #12
    a216:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a218:	230c      	movs	r3, #12
  if (m_spiActive) {
    a21a:	7ca0      	ldrb	r0, [r4, #18]
    a21c:	7463      	strb	r3, [r4, #17]
    a21e:	2800      	cmp	r0, #0
    a220:	d0f8      	beq.n	a214 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a222:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a224:	7c20      	ldrb	r0, [r4, #16]
    a226:	2101      	movs	r1, #1
    a228:	f001 fc96 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a22c:	21ff      	movs	r1, #255	; 0xff
    a22e:	4628      	mov	r0, r5
    a230:	f001 fd70 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a234:	4628      	mov	r0, r5
    a236:	f001 fd23 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a23a:	2300      	movs	r3, #0
}
    a23c:	4618      	mov	r0, r3
    m_spiActive = false;
    a23e:	74a3      	strb	r3, [r4, #18]
}
    a240:	b003      	add	sp, #12
    a242:	bd30      	pop	{r4, r5, pc}
    a244:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a246:	4798      	blx	r3
    a248:	9a01      	ldr	r2, [sp, #4]
    a24a:	e7d7      	b.n	a1fc <SharedSpiCard::readStart(unsigned long)+0x14>
    a24c:	00009c1d 	.word	0x00009c1d

0000a250 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a252:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    a254:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    a256:	4606      	mov	r6, r0
    a258:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a25a:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    a25c:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a25e:	d102      	bne.n	a266 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a260:	6983      	ldr	r3, [r0, #24]
    a262:	428b      	cmp	r3, r1
    a264:	d005      	beq.n	a272 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    a266:	4629      	mov	r1, r5
    a268:	4630      	mov	r0, r6
    a26a:	f7ff ffbd 	bl	a1e8 <SharedSpiCard::readStart(unsigned long)>
    a26e:	b180      	cbz	r0, a292 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    a270:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a272:	b187      	cbz	r7, a296 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    a274:	2500      	movs	r5, #0
    a276:	e001      	b.n	a27c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a278:	42af      	cmp	r7, r5
    a27a:	d00c      	beq.n	a296 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    a27c:	4621      	mov	r1, r4
    a27e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a282:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a284:	3501      	adds	r5, #1
    a286:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    a28a:	f7ff fdcb 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a28e:	2800      	cmp	r0, #0
    a290:	d1f2      	bne.n	a278 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    a292:	2000      	movs	r0, #0
}
    a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    a296:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a298:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a29a:	443b      	add	r3, r7
    a29c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a29e:	2800      	cmp	r0, #0
    a2a0:	d1f8      	bne.n	a294 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    a2a2:	4630      	mov	r0, r6
}
    a2a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    a2a8:	f7ff be02 	b.w	9eb0 <SharedSpiCard::readStop()>

0000a2ac <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2b0:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2b2:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2b4:	4606      	mov	r6, r0
    a2b6:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2b8:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a2ba:	4615      	mov	r5, r2
    a2bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    a2c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    a2c4:	d102      	bne.n	a2cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    a2c6:	6983      	ldr	r3, [r0, #24]
    a2c8:	428b      	cmp	r3, r1
    a2ca:	d005      	beq.n	a2d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a2cc:	4621      	mov	r1, r4
    a2ce:	4630      	mov	r0, r6
    a2d0:	f7ff ff8a 	bl	a1e8 <SharedSpiCard::readStart(unsigned long)>
    a2d4:	b1b0      	cbz	r0, a304 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    a2d6:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a2d8:	f1bb 0f00 	cmp.w	fp, #0
    a2dc:	d015      	beq.n	a30a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    a2de:	eb04 0a0b 	add.w	sl, r4, fp
    a2e2:	e002      	b.n	a2ea <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    a2e4:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    a2e6:	45a2      	cmp	sl, r4
    a2e8:	d00f      	beq.n	a30a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    a2ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    a2ee:	4629      	mov	r1, r5
    a2f0:	4630      	mov	r0, r6
    a2f2:	f7ff fd97 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a2f6:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    a2f8:	4642      	mov	r2, r8
    a2fa:	4620      	mov	r0, r4
    a2fc:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    a2fe:	3401      	adds	r4, #1
    if (readData(dst)) {
    a300:	2f00      	cmp	r7, #0
    a302:	d1ef      	bne.n	a2e4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    a304:	2000      	movs	r0, #0
}
    a306:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    a30a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a30c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a30e:	445b      	add	r3, fp
    a310:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a312:	2800      	cmp	r0, #0
    a314:	d1f7      	bne.n	a306 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    a316:	4630      	mov	r0, r6
}
    a318:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    a31c:	f7ff bdc8 	b.w	9eb0 <SharedSpiCard::readStop()>

0000a320 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    a320:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a326:	695f      	ldr	r7, [r3, #20]
    a328:	4b16      	ldr	r3, [pc, #88]	; (a384 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    a32a:	429f      	cmp	r7, r3
    a32c:	d11f      	bne.n	a36e <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    a32e:	7cc3      	ldrb	r3, [r0, #19]
    a330:	4604      	mov	r4, r0
    a332:	460d      	mov	r5, r1
    a334:	4616      	mov	r6, r2
    a336:	2b01      	cmp	r3, #1
    a338:	d102      	bne.n	a340 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    a33a:	6983      	ldr	r3, [r0, #24]
    a33c:	4299      	cmp	r1, r3
    a33e:	d005      	beq.n	a34c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    a340:	4629      	mov	r1, r5
    a342:	4620      	mov	r0, r4
    a344:	f7ff ff50 	bl	a1e8 <SharedSpiCard::readStart(unsigned long)>
    a348:	b170      	cbz	r0, a368 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    a34a:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    a34c:	f44f 7200 	mov.w	r2, #512	; 0x200
    a350:	4631      	mov	r1, r6
    a352:	4620      	mov	r0, r4
    a354:	f7ff fd66 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a358:	b130      	cbz	r0, a368 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    a35a:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a35c:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    a35e:	3301      	adds	r3, #1
    a360:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a362:	b148      	cbz	r0, a378 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    a368:	2000      	movs	r0, #0
}
    a36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    a36e:	46bc      	mov	ip, r7
    a370:	2301      	movs	r3, #1
}
    a372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a376:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    a378:	4620      	mov	r0, r4
}
    a37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    a37e:	f7ff bd97 	b.w	9eb0 <SharedSpiCard::readStop()>
    a382:	bf00      	nop
    a384:	0000a251 	.word	0x0000a251

0000a388 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a388:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    a38a:	460a      	mov	r2, r1
    a38c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a38e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    a390:	b083      	sub	sp, #12
    a392:	4d16      	ldr	r5, [pc, #88]	; (a3ec <SharedSpiCard::writeStart(unsigned long)+0x64>)
    a394:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a396:	42ab      	cmp	r3, r5
    a398:	d124      	bne.n	a3e4 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    a39a:	7d40      	ldrb	r0, [r0, #21]
    a39c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    a39e:	f04f 0119 	mov.w	r1, #25
    a3a2:	4620      	mov	r0, r4
    sector <<= 9;
    a3a4:	bf18      	it	ne
    a3a6:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    a3a8:	f7ff fde6 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a3ac:	b920      	cbnz	r0, a3b8 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    a3ae:	2302      	movs	r3, #2
  return true;
    a3b0:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    a3b2:	74e3      	strb	r3, [r4, #19]
}
    a3b4:	b003      	add	sp, #12
    a3b6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a3b8:	230e      	movs	r3, #14
  if (m_spiActive) {
    a3ba:	7ca0      	ldrb	r0, [r4, #18]
    a3bc:	7463      	strb	r3, [r4, #17]
    a3be:	2800      	cmp	r0, #0
    a3c0:	d0f8      	beq.n	a3b4 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a3c2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a3c4:	7c20      	ldrb	r0, [r4, #16]
    a3c6:	2101      	movs	r1, #1
    a3c8:	f001 fbc6 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a3cc:	21ff      	movs	r1, #255	; 0xff
    a3ce:	4628      	mov	r0, r5
    a3d0:	f001 fca0 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a3d4:	4628      	mov	r0, r5
    a3d6:	f001 fc53 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a3da:	2300      	movs	r3, #0
}
    a3dc:	4618      	mov	r0, r3
    m_spiActive = false;
    a3de:	74a3      	strb	r3, [r4, #18]
}
    a3e0:	b003      	add	sp, #12
    a3e2:	bd30      	pop	{r4, r5, pc}
    a3e4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a3e6:	4798      	blx	r3
    a3e8:	9a01      	ldr	r2, [sp, #4]
    a3ea:	e7d7      	b.n	a39c <SharedSpiCard::writeStart(unsigned long)+0x14>
    a3ec:	00009c1d 	.word	0x00009c1d

0000a3f0 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    a3f0:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    a3f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a3f8:	4617      	mov	r7, r2
    a3fa:	4a41      	ldr	r2, [pc, #260]	; (a500 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    a3fc:	b085      	sub	sp, #20
    a3fe:	4604      	mov	r4, r0
    a400:	460e      	mov	r6, r1
    a402:	4293      	cmp	r3, r2
    a404:	d145      	bne.n	a492 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    a406:	466a      	mov	r2, sp
    a408:	2109      	movs	r1, #9
    a40a:	f7ff fe65 	bl	a0d8 <SharedSpiCard::readRegister(unsigned char, void*)>
    a40e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    a410:	b1b5      	cbz	r5, a440 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    a412:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a416:	065a      	lsls	r2, r3, #25
    a418:	d518      	bpl.n	a44c <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a41a:	7d63      	ldrb	r3, [r4, #21]
    a41c:	2b03      	cmp	r3, #3
    a41e:	d001      	beq.n	a424 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    a420:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    a422:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    a424:	4632      	mov	r2, r6
    a426:	2120      	movs	r1, #32
    a428:	4620      	mov	r0, r4
    a42a:	f7ff fda5 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a42e:	b928      	cbnz	r0, a43c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    a430:	463a      	mov	r2, r7
    a432:	2121      	movs	r1, #33	; 0x21
    a434:	4620      	mov	r0, r4
    a436:	f7ff fd9f 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a43a:	b370      	cbz	r0, a49a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    a43c:	2326      	movs	r3, #38	; 0x26
    a43e:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a440:	7ca5      	ldrb	r5, [r4, #18]
    a442:	b99d      	cbnz	r5, a46c <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    a444:	4628      	mov	r0, r5
    a446:	b005      	add	sp, #20
    a448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a450:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a454:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a456:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a45a:	1c7a      	adds	r2, r7, #1
    a45c:	4332      	orrs	r2, r6
    a45e:	4213      	tst	r3, r2
    a460:	d0db      	beq.n	a41a <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    a462:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    a464:	7ca5      	ldrb	r5, [r4, #18]
    a466:	7463      	strb	r3, [r4, #17]
    a468:	2d00      	cmp	r5, #0
    a46a:	d0eb      	beq.n	a444 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    a46c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a46e:	7c20      	ldrb	r0, [r4, #16]
    a470:	2101      	movs	r1, #1
    a472:	f001 fb71 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a476:	21ff      	movs	r1, #255	; 0xff
    a478:	4628      	mov	r0, r5
    a47a:	f001 fc4b 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a47e:	4628      	mov	r0, r5
    a480:	f001 fbfe 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a484:	2300      	movs	r3, #0
  return false;
    a486:	461d      	mov	r5, r3
    m_spiActive = false;
    a488:	74a3      	strb	r3, [r4, #18]
}
    a48a:	4628      	mov	r0, r5
    a48c:	b005      	add	sp, #20
    a48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    a492:	4669      	mov	r1, sp
    a494:	4798      	blx	r3
    a496:	4605      	mov	r5, r0
    a498:	e7ba      	b.n	a410 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    a49a:	4602      	mov	r2, r0
    a49c:	2126      	movs	r1, #38	; 0x26
    a49e:	4620      	mov	r0, r4
    a4a0:	f7ff fd6a 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4a4:	2800      	cmp	r0, #0
    a4a6:	d1c9      	bne.n	a43c <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    a4a8:	f8df 8058 	ldr.w	r8, [pc, #88]	; a504 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    a4ac:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    a4b0:	f104 0904 	add.w	r9, r4, #4
    a4b4:	f8d8 3000 	ldr.w	r3, [r8]
    a4b8:	441f      	add	r7, r3
    a4ba:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    a4bc:	e004      	b.n	a4c8 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    a4be:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    a4c2:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    a4c4:	041b      	lsls	r3, r3, #16
    a4c6:	d417      	bmi.n	a4f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    a4c8:	4648      	mov	r0, r9
    a4ca:	f001 fc05 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a4ce:	28ff      	cmp	r0, #255	; 0xff
    a4d0:	4606      	mov	r6, r0
    a4d2:	d1f4      	bne.n	a4be <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    a4d4:	7ca3      	ldrb	r3, [r4, #18]
    a4d6:	2b00      	cmp	r3, #0
    a4d8:	d0b4      	beq.n	a444 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    a4da:	2101      	movs	r1, #1
    a4dc:	7c20      	ldrb	r0, [r4, #16]
  return true;
    a4de:	461d      	mov	r5, r3
    a4e0:	f001 fb3a 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a4e4:	4631      	mov	r1, r6
    a4e6:	4648      	mov	r0, r9
    a4e8:	f001 fc14 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a4ec:	4648      	mov	r0, r9
    a4ee:	f001 fbc7 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a4f2:	2300      	movs	r3, #0
    a4f4:	74a3      	strb	r3, [r4, #18]
}
    a4f6:	e7a5      	b.n	a444 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    a4f8:	2328      	movs	r3, #40	; 0x28
    a4fa:	7463      	strb	r3, [r4, #17]
    goto fail;
    a4fc:	e7a0      	b.n	a440 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    a4fe:	bf00      	nop
    a500:	0000a509 	.word	0x0000a509
    a504:	200432dc 	.word	0x200432dc

0000a508 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a508:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a50a:	2200      	movs	r2, #0
    a50c:	b082      	sub	sp, #8
    a50e:	460e      	mov	r6, r1
    a510:	2109      	movs	r1, #9
    a512:	4604      	mov	r4, r0
    a514:	f7ff fd30 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a518:	b1b0      	cbz	r0, a548 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    a51a:	231b      	movs	r3, #27
    a51c:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a51e:	7ca0      	ldrb	r0, [r4, #18]
    a520:	b908      	cbnz	r0, a526 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    a522:	b002      	add	sp, #8
    a524:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a526:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a528:	7c20      	ldrb	r0, [r4, #16]
    a52a:	2101      	movs	r1, #1
    a52c:	f001 fb14 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a530:	21ff      	movs	r1, #255	; 0xff
    a532:	4628      	mov	r0, r5
    a534:	f001 fbee 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a538:	4628      	mov	r0, r5
    a53a:	f001 fba1 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a53e:	2300      	movs	r3, #0
  return false;
    a540:	4618      	mov	r0, r3
    m_spiActive = false;
    a542:	74a3      	strb	r3, [r4, #18]
  }
    a544:	b002      	add	sp, #8
    a546:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a548:	4605      	mov	r5, r0
    a54a:	2210      	movs	r2, #16
    a54c:	4631      	mov	r1, r6
    a54e:	4620      	mov	r0, r4
    a550:	f7ff fc68 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a554:	2800      	cmp	r0, #0
    a556:	d0e2      	beq.n	a51e <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    a558:	7ca6      	ldrb	r6, [r4, #18]
    a55a:	2e00      	cmp	r6, #0
    a55c:	d0e1      	beq.n	a522 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    a55e:	7c20      	ldrb	r0, [r4, #16]
    a560:	2101      	movs	r1, #1
    a562:	f001 faf9 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a566:	1d20      	adds	r0, r4, #4
    a568:	21ff      	movs	r1, #255	; 0xff
    a56a:	9001      	str	r0, [sp, #4]
    a56c:	f001 fbd2 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a570:	9801      	ldr	r0, [sp, #4]
    a572:	f001 fb85 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
}
    a576:	4630      	mov	r0, r6
    m_spiActive = false;
    a578:	74a5      	strb	r5, [r4, #18]
  }
    a57a:	b002      	add	sp, #8
    a57c:	bd70      	pop	{r4, r5, r6, pc}
    a57e:	bf00      	nop

0000a580 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a580:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a582:	2200      	movs	r2, #0
    a584:	b082      	sub	sp, #8
    a586:	460e      	mov	r6, r1
    a588:	210a      	movs	r1, #10
    a58a:	4604      	mov	r4, r0
    a58c:	f7ff fcf4 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a590:	b1b0      	cbz	r0, a5c0 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    a592:	231b      	movs	r3, #27
    a594:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a596:	7ca0      	ldrb	r0, [r4, #18]
    a598:	b908      	cbnz	r0, a59e <SharedSpiCard::readCID(CID*)+0x1e>
  }
    a59a:	b002      	add	sp, #8
    a59c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a59e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a5a0:	7c20      	ldrb	r0, [r4, #16]
    a5a2:	2101      	movs	r1, #1
    a5a4:	f001 fad8 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a5a8:	21ff      	movs	r1, #255	; 0xff
    a5aa:	4628      	mov	r0, r5
    a5ac:	f001 fbb2 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a5b0:	4628      	mov	r0, r5
    a5b2:	f001 fb65 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a5b6:	2300      	movs	r3, #0
  return false;
    a5b8:	4618      	mov	r0, r3
    m_spiActive = false;
    a5ba:	74a3      	strb	r3, [r4, #18]
  }
    a5bc:	b002      	add	sp, #8
    a5be:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a5c0:	4605      	mov	r5, r0
    a5c2:	2210      	movs	r2, #16
    a5c4:	4631      	mov	r1, r6
    a5c6:	4620      	mov	r0, r4
    a5c8:	f7ff fc2c 	bl	9e24 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a5cc:	2800      	cmp	r0, #0
    a5ce:	d0e2      	beq.n	a596 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    a5d0:	7ca6      	ldrb	r6, [r4, #18]
    a5d2:	2e00      	cmp	r6, #0
    a5d4:	d0e1      	beq.n	a59a <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    a5d6:	7c20      	ldrb	r0, [r4, #16]
    a5d8:	2101      	movs	r1, #1
    a5da:	f001 fabd 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a5de:	1d20      	adds	r0, r4, #4
    a5e0:	21ff      	movs	r1, #255	; 0xff
    a5e2:	9001      	str	r0, [sp, #4]
    a5e4:	f001 fb96 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a5e8:	9801      	ldr	r0, [sp, #4]
    a5ea:	f001 fb49 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
}
    a5ee:	4630      	mov	r0, r6
    m_spiActive = false;
    a5f0:	74a5      	strb	r5, [r4, #18]
  }
    a5f2:	b002      	add	sp, #8
    a5f4:	bd70      	pop	{r4, r5, r6, pc}
    a5f6:	bf00      	nop

0000a5f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a5f8:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    a5fa:	1d05      	adds	r5, r0, #4
    a5fc:	4616      	mov	r6, r2
    a5fe:	4604      	mov	r4, r0
    a600:	4628      	mov	r0, r5
    a602:	f001 fb87 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a606:	f44f 7200 	mov.w	r2, #512	; 0x200
    a60a:	4631      	mov	r1, r6
    a60c:	4628      	mov	r0, r5
    a60e:	f001 fb8b 	bl	bd28 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a612:	21ff      	movs	r1, #255	; 0xff
    a614:	4628      	mov	r0, r5
    a616:	f001 fb7d 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    a61a:	21ff      	movs	r1, #255	; 0xff
    a61c:	4628      	mov	r0, r5
    a61e:	f001 fb79 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a622:	4628      	mov	r0, r5
    a624:	f001 fb58 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a628:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    a62c:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a62e:	2b05      	cmp	r3, #5
    a630:	d004      	beq.n	a63c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    a632:	2320      	movs	r3, #32
  if (m_spiActive) {
    a634:	7ca0      	ldrb	r0, [r4, #18]
    a636:	7463      	strb	r3, [r4, #17]
    a638:	b910      	cbnz	r0, a640 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    a63a:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    a63c:	2001      	movs	r0, #1
}
    a63e:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    a640:	7c20      	ldrb	r0, [r4, #16]
    a642:	2101      	movs	r1, #1
    a644:	f001 fa88 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a648:	21ff      	movs	r1, #255	; 0xff
    a64a:	4628      	mov	r0, r5
    a64c:	f001 fb62 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a650:	4628      	mov	r0, r5
    a652:	f001 fb15 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a656:	2300      	movs	r3, #0
}
    a658:	4618      	mov	r0, r3
    m_spiActive = false;
    a65a:	74a3      	strb	r3, [r4, #18]
}
    a65c:	bd70      	pop	{r4, r5, r6, pc}
    a65e:	bf00      	nop

0000a660 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a664:	4d17      	ldr	r5, [pc, #92]	; (a6c4 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    a666:	4606      	mov	r6, r0
    a668:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    a66a:	f100 0804 	add.w	r8, r0, #4
    a66e:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    a670:	f504 7416 	add.w	r4, r4, #600	; 0x258
    a674:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    a676:	e003      	b.n	a680 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    a678:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a67a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a67c:	041b      	lsls	r3, r3, #16
    a67e:	d40c      	bmi.n	a69a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    a680:	4640      	mov	r0, r8
    a682:	f001 fb29 	bl	bcd8 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a686:	28ff      	cmp	r0, #255	; 0xff
    a688:	d1f6      	bne.n	a678 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a68a:	463a      	mov	r2, r7
    a68c:	21fc      	movs	r1, #252	; 0xfc
    a68e:	4630      	mov	r0, r6
    a690:	f7ff ffb2 	bl	a5f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a694:	b118      	cbz	r0, a69e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    a696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    a69a:	2324      	movs	r3, #36	; 0x24
    a69c:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    a69e:	7cb0      	ldrb	r0, [r6, #18]
    a6a0:	2800      	cmp	r0, #0
    a6a2:	d0f8      	beq.n	a696 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    a6a4:	7c30      	ldrb	r0, [r6, #16]
    a6a6:	2101      	movs	r1, #1
    a6a8:	f001 fa56 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a6ac:	21ff      	movs	r1, #255	; 0xff
    a6ae:	4640      	mov	r0, r8
    a6b0:	f001 fb30 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a6b4:	4640      	mov	r0, r8
    a6b6:	f001 fae3 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a6ba:	2300      	movs	r3, #0
}
    a6bc:	4618      	mov	r0, r3
    m_spiActive = false;
    a6be:	74b3      	strb	r3, [r6, #18]
}
    a6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6c4:	200432dc 	.word	0x200432dc

0000a6c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a6c8:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a6ca:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a6cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a6ce:	4616      	mov	r6, r2
    a6d0:	4a22      	ldr	r2, [pc, #136]	; (a75c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    a6d2:	b082      	sub	sp, #8
    a6d4:	4604      	mov	r4, r0
    a6d6:	460d      	mov	r5, r1
    a6d8:	4293      	cmp	r3, r2
    a6da:	d13c      	bne.n	a756 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    a6dc:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    a6de:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    a6e0:	f04f 0118 	mov.w	r1, #24
    a6e4:	4620      	mov	r0, r4
    sector <<= 9;
    a6e6:	bf18      	it	ne
    a6e8:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a6ea:	462a      	mov	r2, r5
    a6ec:	f7ff fc44 	bl	9f78 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a6f0:	4605      	mov	r5, r0
    a6f2:	b1b0      	cbz	r0, a722 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    a6f4:	230d      	movs	r3, #13
    a6f6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a6f8:	7ca0      	ldrb	r0, [r4, #18]
    a6fa:	b908      	cbnz	r0, a700 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    a6fc:	b002      	add	sp, #8
    a6fe:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a700:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a702:	7c20      	ldrb	r0, [r4, #16]
    a704:	2101      	movs	r1, #1
    a706:	f001 fa27 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a70a:	21ff      	movs	r1, #255	; 0xff
    a70c:	4628      	mov	r0, r5
    a70e:	f001 fb01 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a712:	4628      	mov	r0, r5
    a714:	f001 fab4 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a718:	2300      	movs	r3, #0
  return false;
    a71a:	4618      	mov	r0, r3
    m_spiActive = false;
    a71c:	74a3      	strb	r3, [r4, #18]
}
    a71e:	b002      	add	sp, #8
    a720:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a722:	4632      	mov	r2, r6
    a724:	21fe      	movs	r1, #254	; 0xfe
    a726:	4620      	mov	r0, r4
    a728:	f7ff ff66 	bl	a5f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a72c:	2800      	cmp	r0, #0
    a72e:	d0e3      	beq.n	a6f8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    a730:	7ca6      	ldrb	r6, [r4, #18]
    a732:	2e00      	cmp	r6, #0
    a734:	d0e2      	beq.n	a6fc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    a736:	7c20      	ldrb	r0, [r4, #16]
    a738:	2101      	movs	r1, #1
    a73a:	f001 fa0d 	bl	bb58 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a73e:	1d20      	adds	r0, r4, #4
    a740:	21ff      	movs	r1, #255	; 0xff
    a742:	9001      	str	r0, [sp, #4]
    a744:	f001 fae6 	bl	bd14 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a748:	9801      	ldr	r0, [sp, #4]
    a74a:	f001 fa99 	bl	bc80 <SdSpiArduinoDriver::deactivate()>
  return true;
    a74e:	4630      	mov	r0, r6
    m_spiActive = false;
    a750:	74a5      	strb	r5, [r4, #18]
}
    a752:	b002      	add	sp, #8
    a754:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    a756:	4798      	blx	r3
    a758:	e7c1      	b.n	a6de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    a75a:	bf00      	nop
    a75c:	00009c1d 	.word	0x00009c1d

0000a760 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a760:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    a762:	7f04      	ldrb	r4, [r0, #28]
    a764:	b134      	cbz	r4, a774 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    a766:	6804      	ldr	r4, [r0, #0]
    a768:	2301      	movs	r3, #1
    a76a:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    a76c:	46a4      	mov	ip, r4
}
    a76e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    a772:	4760      	bx	ip
}
    a774:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    a778:	f7ff bfa6 	b.w	a6c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000a77c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    a77c:	2000      	movs	r0, #0
    a77e:	4770      	bx	lr

0000a780 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    a780:	2000      	movs	r0, #0
    a782:	4770      	bx	lr

0000a784 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    a784:	2000      	movs	r0, #0
    a786:	4770      	bx	lr

0000a788 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    a788:	4770      	bx	lr
    a78a:	bf00      	nop

0000a78c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    a78c:	4b08      	ldr	r3, [pc, #32]	; (a7b0 <sdIrs()+0x24>)
    a78e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    a790:	4a08      	ldr	r2, [pc, #32]	; (a7b4 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    a792:	4809      	ldr	r0, [pc, #36]	; (a7b8 <sdIrs()+0x2c>)
static void sdIrs() {
    a794:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    a796:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    a798:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    a79a:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    a79c:	6812      	ldr	r2, [r2, #0]
}
    a79e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    a7a2:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    a7a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    a7a6:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    a7aa:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    a7ac:	7001      	strb	r1, [r0, #0]
}
    a7ae:	4770      	bx	lr
    a7b0:	402c0000 	.word	0x402c0000
    a7b4:	200422d8 	.word	0x200422d8
    a7b8:	20043320 	.word	0x20043320

0000a7bc <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    a7bc:	4b03      	ldr	r3, [pc, #12]	; (a7cc <isBusyDat()+0x10>)
    a7be:	6a58      	ldr	r0, [r3, #36]	; 0x24
    a7c0:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    a7c4:	f3c0 6000 	ubfx	r0, r0, #24, #1
    a7c8:	4770      	bx	lr
    a7ca:	bf00      	nop
    a7cc:	402c0000 	.word	0x402c0000

0000a7d0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    a7d0:	4b01      	ldr	r3, [pc, #4]	; (a7d8 <isBusyDMA()+0x8>)
    a7d2:	7818      	ldrb	r0, [r3, #0]
}
    a7d4:	4770      	bx	lr
    a7d6:	bf00      	nop
    a7d8:	20043320 	.word	0x20043320

0000a7dc <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a7dc:	4a2b      	ldr	r2, [pc, #172]	; (a88c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a7de:	4b2c      	ldr	r3, [pc, #176]	; (a890 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a7e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a7e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    a7e6:	492b      	ldr	r1, [pc, #172]	; (a894 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a7e8:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    a7f0:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    a7f2:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a7f4:	4c28      	ldr	r4, [pc, #160]	; (a898 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    a7f6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a7fa:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    a7fe:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    a802:	089b      	lsrs	r3, r3, #2
    a804:	fbb1 fef3 	udiv	lr, r1, r3
    a808:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a80c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    a810:	d235      	bcs.n	a87e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    a812:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    a814:	461e      	mov	r6, r3
    a816:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a818:	011a      	lsls	r2, r3, #4
    a81a:	fbbe f2f2 	udiv	r2, lr, r2
    a81e:	4282      	cmp	r2, r0
    a820:	d901      	bls.n	a826 <setSdclk(unsigned long)+0x4a>
    a822:	2bff      	cmp	r3, #255	; 0xff
    a824:	d9f6      	bls.n	a814 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a826:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a82a:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a82c:	4290      	cmp	r0, r2
    a82e:	d22a      	bcs.n	a886 <setSdclk(unsigned long)+0xaa>
    a830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a834:	2201      	movs	r2, #1
    a836:	e000      	b.n	a83a <setSdclk(unsigned long)+0x5e>
    a838:	46a4      	mov	ip, r4
    dvs++;
    a83a:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a83c:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    a840:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a842:	fbbe f1fc 	udiv	r1, lr, ip
    a846:	4281      	cmp	r1, r0
    a848:	d917      	bls.n	a87a <setSdclk(unsigned long)+0x9e>
    a84a:	2a10      	cmp	r2, #16
    a84c:	d1f4      	bne.n	a838 <setSdclk(unsigned long)+0x5c>
    a84e:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a854:	4911      	ldr	r1, [pc, #68]	; (a89c <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a856:	4a12      	ldr	r2, [pc, #72]	; (a8a0 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    a858:	fb03 fc0c 	mul.w	ip, r3, ip
    a85c:	fbbe f3fc 	udiv	r3, lr, ip
    a860:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a862:	4b10      	ldr	r3, [pc, #64]	; (a8a4 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    a864:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    a866:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a868:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    a86a:	4333      	orrs	r3, r6
    a86c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a870:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    a872:	6a53      	ldr	r3, [r2, #36]	; 0x24
    a874:	071b      	lsls	r3, r3, #28
    a876:	d5fc      	bpl.n	a872 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    a878:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    a87a:	012d      	lsls	r5, r5, #4
    a87c:	e7e8      	b.n	a850 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    a87e:	4672      	mov	r2, lr
    a880:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    a882:	2301      	movs	r3, #1
    a884:	e7d2      	b.n	a82c <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    a886:	469c      	mov	ip, r3
    a888:	2500      	movs	r5, #0
    a88a:	e7e1      	b.n	a850 <setSdclk(unsigned long)+0x74>
    a88c:	400fc000 	.word	0x400fc000
    a890:	400d8000 	.word	0x400d8000
    a894:	5e69ec00 	.word	0x5e69ec00
    a898:	aaaaaaab 	.word	0xaaaaaaab
    a89c:	2000e3d0 	.word	0x2000e3d0
    a8a0:	402c0000 	.word	0x402c0000
    a8a4:	fff0000f 	.word	0xfff0000f

0000a8a8 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    a8a8:	4b01      	ldr	r3, [pc, #4]	; (a8b0 <SdioCard::errorCode() const+0x8>)
}
    a8aa:	7818      	ldrb	r0, [r3, #0]
    a8ac:	4770      	bx	lr
    a8ae:	bf00      	nop
    a8b0:	20009058 	.word	0x20009058

0000a8b4 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    a8b4:	4b01      	ldr	r3, [pc, #4]	; (a8bc <SdioCard::errorData() const+0x8>)
    a8b6:	6818      	ldr	r0, [r3, #0]
}
    a8b8:	4770      	bx	lr
    a8ba:	bf00      	nop
    a8bc:	200422d8 	.word	0x200422d8

0000a8c0 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    a8c0:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    a8c2:	4c07      	ldr	r4, [pc, #28]	; (a8e0 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    a8c4:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    a8c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a8c8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a8cc:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    a8ce:	f8cc 1004 	str.w	r1, [ip, #4]
    a8d2:	f8cc 2008 	str.w	r2, [ip, #8]
    a8d6:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a8da:	f85d 4b04 	ldr.w	r4, [sp], #4
    a8de:	4770      	bx	lr
    a8e0:	200417ec 	.word	0x200417ec

0000a8e4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    a8e4:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    a8e6:	4c07      	ldr	r4, [pc, #28]	; (a904 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    a8e8:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    a8ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    a8ec:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    a8f0:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    a8f2:	f8cc 1004 	str.w	r1, [ip, #4]
    a8f6:	f8cc 2008 	str.w	r2, [ip, #8]
    a8fa:	f8cc 300c 	str.w	r3, [ip, #12]
}
    a8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    a902:	4770      	bx	lr
    a904:	200417fc 	.word	0x200417fc

0000a908 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    a908:	4b02      	ldr	r3, [pc, #8]	; (a914 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    a90a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    a90c:	681b      	ldr	r3, [r3, #0]
    a90e:	600b      	str	r3, [r1, #0]
}
    a910:	4770      	bx	lr
    a912:	bf00      	nop
    a914:	2004180c 	.word	0x2004180c

0000a918 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    a918:	4770      	bx	lr
    a91a:	bf00      	nop

0000a91c <SdioCard::~SdioCard()>:
    a91c:	b510      	push	{r4, lr}
    a91e:	4604      	mov	r4, r0
    a920:	210c      	movs	r1, #12
    a922:	f002 f971 	bl	cc08 <operator delete(void*, unsigned int)>
    a926:	4620      	mov	r0, r4
    a928:	bd10      	pop	{r4, pc}
    a92a:	bf00      	nop

0000a92c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    a92c:	4b04      	ldr	r3, [pc, #16]	; (a940 <SdioCard::type() const+0x14>)
    a92e:	781b      	ldrb	r3, [r3, #0]
    a930:	b123      	cbz	r3, a93c <SdioCard::type() const+0x10>
    a932:	4b04      	ldr	r3, [pc, #16]	; (a944 <SdioCard::type() const+0x18>)
    a934:	7818      	ldrb	r0, [r3, #0]
    a936:	3002      	adds	r0, #2
    a938:	b2c0      	uxtb	r0, r0
    a93a:	4770      	bx	lr
    a93c:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    a93e:	4770      	bx	lr
    a940:	2004331d 	.word	0x2004331d
    a944:	2004331e 	.word	0x2004331e

0000a948 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    a948:	4b18      	ldr	r3, [pc, #96]	; (a9ac <SdioCard::sectorCount()+0x64>)
    a94a:	781a      	ldrb	r2, [r3, #0]
    a94c:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    a950:	d00f      	beq.n	a972 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    a952:	2a40      	cmp	r2, #64	; 0x40
    a954:	d001      	beq.n	a95a <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    a956:	2000      	movs	r0, #0
}
    a958:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a95a:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a95c:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a95e:	7a19      	ldrb	r1, [r3, #8]
    a960:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a962:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a966:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a96a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    a96e:	0280      	lsls	r0, r0, #10
    a970:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a972:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a974:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a976:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a978:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a97c:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a980:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a984:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    a986:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a988:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    a98c:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    a98e:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a992:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a996:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a998:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    a99c:	3001      	adds	r0, #1
    a99e:	f003 030f 	and.w	r3, r3, #15
    a9a2:	4413      	add	r3, r2
    a9a4:	3b07      	subs	r3, #7
    a9a6:	4098      	lsls	r0, r3
}
    a9a8:	f85d fb04 	ldr.w	pc, [sp], #4
    a9ac:	200417fc 	.word	0x200417fc

0000a9b0 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a9b0:	4a40      	ldr	r2, [pc, #256]	; (aab4 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    a9b2:	2005      	movs	r0, #5
    a9b4:	4940      	ldr	r1, [pc, #256]	; (aab8 <initSDHC()+0x108>)
static void initSDHC() {
    a9b6:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a9b8:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a9bc:	4b3f      	ldr	r3, [pc, #252]	; (aabc <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a9be:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    a9c2:	4d3f      	ldr	r5, [pc, #252]	; (aac0 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    a9c4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    a9c8:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a9cc:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    a9d0:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    a9d4:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a9d8:	f044 0418 	orr.w	r4, r4, #24
    a9dc:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    a9e0:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    a9e4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    a9e8:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    a9ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    a9f0:	f042 020c 	orr.w	r2, r2, #12
    a9f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    a9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    a9fa:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    a9fe:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    aa00:	69da      	ldr	r2, [r3, #28]
    aa02:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    aa06:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    aa08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    aa0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    aa0e:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa10:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa14:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa18:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa1c:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa20:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa24:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    aa28:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa2a:	4b26      	ldr	r3, [pc, #152]	; (aac4 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    aa2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    aa30:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    aa32:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    aa34:	4313      	orrs	r3, r2
    aa36:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    aa38:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    aa3a:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    aa3e:	d1fb      	bne.n	aa38 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    aa40:	f44f 70c8 	mov.w	r0, #400	; 0x190
    aa44:	f7ff feca 	bl	a7dc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa48:	4b1b      	ldr	r3, [pc, #108]	; (aab8 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aa4a:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aa4e:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    aa52:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aa56:	481c      	ldr	r0, [pc, #112]	; (aac8 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    aa58:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    aa5c:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    aa60:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    aa64:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    aa68:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    aa6c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    aa70:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    aa74:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    aa78:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    aa7c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    aa80:	4912      	ldr	r1, [pc, #72]	; (aacc <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    aa82:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    aa86:	4b12      	ldr	r3, [pc, #72]	; (aad0 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    aa88:	6368      	str	r0, [r5, #52]	; 0x34
    aa8a:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aa8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    aa92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    aa96:	490f      	ldr	r1, [pc, #60]	; (aad4 <initSDHC()+0x124>)
    aa98:	2060      	movs	r0, #96	; 0x60
    aa9a:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    aa9e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    aaa2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    aaa4:	4a06      	ldr	r2, [pc, #24]	; (aac0 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    aaa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    aaaa:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    aaac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    aaae:	011b      	lsls	r3, r3, #4
    aab0:	d4fc      	bmi.n	aaac <initSDHC()+0xfc>
}
    aab2:	bd38      	pop	{r3, r4, r5, pc}
    aab4:	400d8000 	.word	0x400d8000
    aab8:	401f8000 	.word	0x401f8000
    aabc:	400fc000 	.word	0x400fc000
    aac0:	402c0000 	.word	0x402c0000
    aac4:	01008000 	.word	0x01008000
    aac8:	117f000b 	.word	0x117f000b
    aacc:	20009400 	.word	0x20009400
    aad0:	0000a78d 	.word	0x0000a78d
    aad4:	e000e400 	.word	0xe000e400

0000aad8 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    aadc:	f001 ff66 	bl	c9ac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aae0:	4e17      	ldr	r6, [pc, #92]	; (ab40 <waitTransferComplete() [clone .part.0]+0x68>)
    aae2:	4d18      	ldr	r5, [pc, #96]	; (ab44 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    aae4:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aae6:	f8df 8074 	ldr.w	r8, [pc, #116]	; ab5c <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    aaea:	e004      	b.n	aaf6 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aaec:	f001 ff5e 	bl	c9ac <micros>
    aaf0:	1bc0      	subs	r0, r0, r7
    aaf2:	4540      	cmp	r0, r8
    aaf4:	d81b      	bhi.n	ab2e <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aaf6:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    aaf8:	402c      	ands	r4, r5
    aafa:	d0f7      	beq.n	aaec <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    aafc:	4a12      	ldr	r2, [pc, #72]	; (ab48 <waitTransferComplete() [clone .part.0]+0x70>)
    aafe:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    ab00:	4b12      	ldr	r3, [pc, #72]	; (ab4c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    ab02:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    ab04:	6b32      	ldr	r2, [r6, #48]	; 0x30
    ab06:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ab08:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab0a:	4a11      	ldr	r2, [pc, #68]	; (ab50 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    ab0c:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab0e:	681b      	ldr	r3, [r3, #0]
    ab10:	4213      	tst	r3, r2
    ab12:	d009      	beq.n	ab28 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    ab14:	490f      	ldr	r1, [pc, #60]	; (ab54 <waitTransferComplete() [clone .part.0]+0x7c>)
    ab16:	241f      	movs	r4, #31
  m_errorLine = line;
    ab18:	4b0f      	ldr	r3, [pc, #60]	; (ab58 <waitTransferComplete() [clone .part.0]+0x80>)
    ab1a:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    ab1e:	2000      	movs	r0, #0
  m_errorCode = code;
    ab20:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ab22:	601a      	str	r2, [r3, #0]
}
    ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    ab28:	2001      	movs	r0, #1
}
    ab2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    ab2e:	4a06      	ldr	r2, [pc, #24]	; (ab48 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    ab30:	4b06      	ldr	r3, [pc, #24]	; (ab4c <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    ab32:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    ab34:	6b32      	ldr	r2, [r6, #48]	; 0x30
    ab36:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ab38:	681b      	ldr	r3, [r3, #0]
    ab3a:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    ab3c:	e7ea      	b.n	ab14 <waitTransferComplete() [clone .part.0]+0x3c>
    ab3e:	bf00      	nop
    ab40:	402c0000 	.word	0x402c0000
    ab44:	117f0002 	.word	0x117f0002
    ab48:	2004331f 	.word	0x2004331f
    ab4c:	200422d8 	.word	0x200422d8
    ab50:	117f0000 	.word	0x117f0000
    ab54:	20009058 	.word	0x20009058
    ab58:	2003e3d8 	.word	0x2003e3d8
    ab5c:	000f4240 	.word	0x000f4240

0000ab60 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    ab64:	4c26      	ldr	r4, [pc, #152]	; (ac00 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    ab66:	460f      	mov	r7, r1
  if (!m_transferActive) {
    ab68:	7823      	ldrb	r3, [r4, #0]
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d138      	bne.n	abe0 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    ab6e:	4b25      	ldr	r3, [pc, #148]	; (ac04 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ab70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ab72:	05d2      	lsls	r2, r2, #23
    ab74:	d52b      	bpl.n	abce <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab76:	4d23      	ldr	r5, [pc, #140]	; (ac04 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab78:	f8df 8094 	ldr.w	r8, [pc, #148]	; ac10 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ab7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ab7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ab82:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    ab84:	f001 ff12 	bl	c9ac <micros>
    ab88:	4606      	mov	r6, r0
  while (fcn()) {
    ab8a:	e004      	b.n	ab96 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ab8c:	f001 ff0e 	bl	c9ac <micros>
    ab90:	1b80      	subs	r0, r0, r6
    ab92:	4540      	cmp	r0, r8
    ab94:	d82a      	bhi.n	abec <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    ab96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    ab98:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    ab9c:	d0f6      	beq.n	ab8c <SdioCard::writeData(unsigned char const*)+0x2c>
    ab9e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    aba2:	4818      	ldr	r0, [pc, #96]	; (ac04 <SdioCard::writeData(unsigned char const*)+0xa4>)
    aba4:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    aba8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    abaa:	055b      	lsls	r3, r3, #21
    abac:	d5fc      	bpl.n	aba8 <SdioCard::writeData(unsigned char const*)+0x48>
    abae:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    abb2:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    abb6:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    abb8:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    abba:	d1fa      	bne.n	abb2 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    abbc:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    abc0:	45bc      	cmp	ip, r7
    abc2:	d1f1      	bne.n	aba8 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    abc4:	2301      	movs	r3, #1
  return true;
    abc6:	4618      	mov	r0, r3
  m_transferActive = true;
    abc8:	7023      	strb	r3, [r4, #0]
}
    abca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    abce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    abd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    abd4:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    abd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    abd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    abdc:	629a      	str	r2, [r3, #40]	; 0x28
    abde:	e7ca      	b.n	ab76 <SdioCard::writeData(unsigned char const*)+0x16>
    abe0:	f7ff ff7a 	bl	aad8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    abe4:	2800      	cmp	r0, #0
    abe6:	d1c2      	bne.n	ab6e <SdioCard::writeData(unsigned char const*)+0xe>
}
    abe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    abec:	4906      	ldr	r1, [pc, #24]	; (ac08 <SdioCard::writeData(unsigned char const*)+0xa8>)
    abee:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    abf0:	4b06      	ldr	r3, [pc, #24]	; (ac0c <SdioCard::writeData(unsigned char const*)+0xac>)
    abf2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    abf6:	4648      	mov	r0, r9
  m_errorCode = code;
    abf8:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    abfa:	601a      	str	r2, [r3, #0]
}
    abfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ac00:	2004331f 	.word	0x2004331f
    ac04:	402c0000 	.word	0x402c0000
    ac08:	20009058 	.word	0x20009058
    ac0c:	2003e3d8 	.word	0x2003e3d8
    ac10:	000f4240 	.word	0x000f4240

0000ac14 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    ac14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac18:	4607      	mov	r7, r0
    ac1a:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ac1c:	4c1f      	ldr	r4, [pc, #124]	; (ac9c <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    ac1e:	f001 fec5 	bl	c9ac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac22:	4e1f      	ldr	r6, [pc, #124]	; (aca0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    ac24:	4605      	mov	r5, r0
  while (fcn()) {
    ac26:	e004      	b.n	ac32 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac28:	f001 fec0 	bl	c9ac <micros>
    ac2c:	1b43      	subs	r3, r0, r5
    ac2e:	42b3      	cmp	r3, r6
    ac30:	d824      	bhi.n	ac7c <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    ac32:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    ac34:	07d9      	lsls	r1, r3, #31
    ac36:	d4f7      	bmi.n	ac28 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ac38:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    ac3a:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    ac3e:	d420      	bmi.n	ac82 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    ac40:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    ac44:	4c15      	ldr	r4, [pc, #84]	; (ac9c <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    ac46:	4e17      	ldr	r6, [pc, #92]	; (aca4 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    ac48:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    ac4a:	f001 feaf 	bl	c9ac <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac4e:	4f14      	ldr	r7, [pc, #80]	; (aca0 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    ac50:	4605      	mov	r5, r0
  while (fcn()) {
    ac52:	e004      	b.n	ac5e <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ac54:	f001 feaa 	bl	c9ac <micros>
    ac58:	1b40      	subs	r0, r0, r5
    ac5a:	42b8      	cmp	r0, r7
    ac5c:	d80e      	bhi.n	ac7c <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    ac5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    ac60:	4233      	tst	r3, r6
    ac62:	d0f7      	beq.n	ac54 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    ac64:	6b22      	ldr	r2, [r4, #48]	; 0x30
    ac66:	4b10      	ldr	r3, [pc, #64]	; (aca8 <cardCommand(unsigned long, unsigned long)+0x94>)
    ac68:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    ac6a:	681a      	ldr	r2, [r3, #0]
    ac6c:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ac6e:	681a      	ldr	r2, [r3, #0]
    ac70:	07d2      	lsls	r2, r2, #31
    ac72:	d503      	bpl.n	ac7c <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    ac74:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ac76:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    ac7a:	d00b      	beq.n	ac94 <cardCommand(unsigned long, unsigned long)+0x80>
    ac7c:	2000      	movs	r0, #0
}
    ac7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ac82:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    ac84:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    ac86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    ac8a:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    ac8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    ac8e:	4313      	orrs	r3, r2
    ac90:	64a3      	str	r3, [r4, #72]	; 0x48
    ac92:	e7d5      	b.n	ac40 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    ac94:	2001      	movs	r0, #1
}
    ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac9a:	bf00      	nop
    ac9c:	402c0000 	.word	0x402c0000
    aca0:	000f4240 	.word	0x000f4240
    aca4:	000f0001 	.word	0x000f0001
    aca8:	200422d8 	.word	0x200422d8

0000acac <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    acac:	4b15      	ldr	r3, [pc, #84]	; (ad04 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    acae:	b530      	push	{r4, r5, lr}
    acb0:	460d      	mov	r5, r1
    acb2:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    acb4:	6819      	ldr	r1, [r3, #0]
    acb6:	f7ff ffad 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    acba:	b308      	cbz	r0, ad00 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    acbc:	4b12      	ldr	r3, [pc, #72]	; (ad08 <readReg16(unsigned long, void*)+0x5c>)
    acbe:	f105 040f 	add.w	r4, r5, #15
    acc2:	691a      	ldr	r2, [r3, #16]
    acc4:	9200      	str	r2, [sp, #0]
    acc6:	6959      	ldr	r1, [r3, #20]
    acc8:	9101      	str	r1, [sp, #4]
    acca:	6999      	ldr	r1, [r3, #24]
    accc:	9102      	str	r1, [sp, #8]
    acce:	69db      	ldr	r3, [r3, #28]
    acd0:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    acd2:	2300      	movs	r3, #0
    acd4:	e001      	b.n	acda <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    acd6:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    acda:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    acde:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    ace0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ace4:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    ace8:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    acea:	fa22 f20c 	lsr.w	r2, r2, ip
    acee:	f10e 0110 	add.w	r1, lr, #16
    acf2:	f804 2d01 	strb.w	r2, [r4, #-1]!
    acf6:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    acfa:	d1ec      	bne.n	acd6 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    acfc:	2300      	movs	r3, #0
    acfe:	73eb      	strb	r3, [r5, #15]
}
    ad00:	b005      	add	sp, #20
    ad02:	bd30      	pop	{r4, r5, pc}
    ad04:	20041810 	.word	0x20041810
    ad08:	402c0000 	.word	0x402c0000

0000ad0c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    ad0c:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    ad0e:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    ad10:	07db      	lsls	r3, r3, #31
    ad12:	d505      	bpl.n	ad20 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad14:	4b15      	ldr	r3, [pc, #84]	; (ad6c <SdioCard::isBusy()+0x60>)
    ad16:	681b      	ldr	r3, [r3, #0]
    ad18:	b1b3      	cbz	r3, ad48 <SdioCard::isBusy()+0x3c>
}
    ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad1e:	4718      	bx	r3
    if (m_transferActive) {
    ad20:	4b13      	ldr	r3, [pc, #76]	; (ad70 <SdioCard::isBusy()+0x64>)
    ad22:	781b      	ldrb	r3, [r3, #0]
    ad24:	b93b      	cbnz	r3, ad36 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    ad26:	4b13      	ldr	r3, [pc, #76]	; (ad74 <SdioCard::isBusy()+0x68>)
    ad28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    ad2a:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    ad2e:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    ad32:	4620      	mov	r0, r4
    ad34:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ad36:	4b0f      	ldr	r3, [pc, #60]	; (ad74 <SdioCard::isBusy()+0x68>)
    ad38:	4c0f      	ldr	r4, [pc, #60]	; (ad78 <SdioCard::isBusy()+0x6c>)
    ad3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    ad3c:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    ad3e:	fab4 f484 	clz	r4, r4
    ad42:	0964      	lsrs	r4, r4, #5
}
    ad44:	4620      	mov	r0, r4
    ad46:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad48:	4b0c      	ldr	r3, [pc, #48]	; (ad7c <SdioCard::isBusy()+0x70>)
    ad4a:	781c      	ldrb	r4, [r3, #0]
    ad4c:	2c00      	cmp	r4, #0
    ad4e:	d0f0      	beq.n	ad32 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad50:	4b0b      	ldr	r3, [pc, #44]	; (ad80 <SdioCard::isBusy()+0x74>)
    ad52:	480c      	ldr	r0, [pc, #48]	; (ad84 <SdioCard::isBusy()+0x78>)
    ad54:	6819      	ldr	r1, [r3, #0]
    ad56:	f7ff ff5d 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    ad5a:	2800      	cmp	r0, #0
    ad5c:	d0e9      	beq.n	ad32 <SdioCard::isBusy()+0x26>
    ad5e:	4b05      	ldr	r3, [pc, #20]	; (ad74 <SdioCard::isBusy()+0x68>)
    ad60:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    ad62:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    ad66:	f3c4 2400 	ubfx	r4, r4, #8, #1
    ad6a:	e7e2      	b.n	ad32 <SdioCard::isBusy()+0x26>
    ad6c:	200422d4 	.word	0x200422d4
    ad70:	2004331f 	.word	0x2004331f
    ad74:	402c0000 	.word	0x402c0000
    ad78:	117f0002 	.word	0x117f0002
    ad7c:	2004331c 	.word	0x2004331c
    ad80:	20041810 	.word	0x20041810
    ad84:	0d1a0000 	.word	0x0d1a0000

0000ad88 <SdioCard::status()>:
uint32_t SdioCard::status() {
    ad88:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ad8a:	4b04      	ldr	r3, [pc, #16]	; (ad9c <SdioCard::status()+0x14>)
    ad8c:	4804      	ldr	r0, [pc, #16]	; (ada0 <SdioCard::status()+0x18>)
    ad8e:	6819      	ldr	r1, [r3, #0]
    ad90:	f7ff ff40 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    ad94:	b108      	cbz	r0, ad9a <SdioCard::status()+0x12>
    ad96:	4b03      	ldr	r3, [pc, #12]	; (ada4 <SdioCard::status()+0x1c>)
    ad98:	6918      	ldr	r0, [r3, #16]
}
    ad9a:	bd08      	pop	{r3, pc}
    ad9c:	20041810 	.word	0x20041810
    ada0:	0d1a0000 	.word	0x0d1a0000
    ada4:	402c0000 	.word	0x402c0000

0000ada8 <isBusyCMD13()>:
static bool isBusyCMD13() {
    ada8:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adaa:	4b07      	ldr	r3, [pc, #28]	; (adc8 <isBusyCMD13()+0x20>)
    adac:	4807      	ldr	r0, [pc, #28]	; (adcc <isBusyCMD13()+0x24>)
    adae:	6819      	ldr	r1, [r3, #0]
    adb0:	f7ff ff30 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    adb4:	b130      	cbz	r0, adc4 <isBusyCMD13()+0x1c>
    adb6:	4b06      	ldr	r3, [pc, #24]	; (add0 <isBusyCMD13()+0x28>)
    adb8:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    adba:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    adbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    adc2:	bd08      	pop	{r3, pc}
    adc4:	2001      	movs	r0, #1
    adc6:	bd08      	pop	{r3, pc}
    adc8:	20041810 	.word	0x20041810
    adcc:	0d1a0000 	.word	0x0d1a0000
    add0:	402c0000 	.word	0x402c0000

0000add4 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    add4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    add8:	4b29      	ldr	r3, [pc, #164]	; (ae80 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    adda:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    addc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; aea0 <SdioCard::writeStart(unsigned long)+0xcc>
    ade0:	4e28      	ldr	r6, [pc, #160]	; (ae84 <SdioCard::writeStart(unsigned long)+0xb0>)
    ade2:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    ade6:	f001 fde1 	bl	c9ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adea:	4d27      	ldr	r5, [pc, #156]	; (ae88 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    adec:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    adee:	f8df 80b4 	ldr.w	r8, [pc, #180]	; aea4 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    adf2:	4f26      	ldr	r7, [pc, #152]	; (ae8c <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    adf4:	e006      	b.n	ae04 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    adf6:	f001 fdd9 	bl	c9ac <micros>
    adfa:	1b00      	subs	r0, r0, r4
    adfc:	42b8      	cmp	r0, r7
    adfe:	d829      	bhi.n	ae54 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    ae00:	f003 fc66 	bl	e6d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ae04:	6831      	ldr	r1, [r6, #0]
    ae06:	4628      	mov	r0, r5
    ae08:	f7ff ff04 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    ae0c:	2800      	cmp	r0, #0
    ae0e:	d0f2      	beq.n	adf6 <SdioCard::writeStart(unsigned long)+0x22>
    ae10:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    ae14:	05db      	lsls	r3, r3, #23
    ae16:	d5ee      	bpl.n	adf6 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    ae18:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ae1a:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    ae1e:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ae22:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    ae26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    ae2a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae2e:	4b18      	ldr	r3, [pc, #96]	; (ae90 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    ae30:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae34:	781b      	ldrb	r3, [r3, #0]
    ae36:	b1cb      	cbz	r3, ae6c <SdioCard::writeStart(unsigned long)+0x98>
    ae38:	4649      	mov	r1, r9
    ae3a:	4816      	ldr	r0, [pc, #88]	; (ae94 <SdioCard::writeStart(unsigned long)+0xc0>)
    ae3c:	f7ff feea 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    ae40:	b930      	cbnz	r0, ae50 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    ae42:	4915      	ldr	r1, [pc, #84]	; (ae98 <SdioCard::writeStart(unsigned long)+0xc4>)
    ae44:	240e      	movs	r4, #14
  m_errorLine = line;
    ae46:	4b15      	ldr	r3, [pc, #84]	; (ae9c <SdioCard::writeStart(unsigned long)+0xc8>)
    ae48:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    ae4c:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ae4e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    ae50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    ae54:	4a10      	ldr	r2, [pc, #64]	; (ae98 <SdioCard::writeStart(unsigned long)+0xc4>)
    ae56:	210a      	movs	r1, #10
      m_busyFcn = 0;
    ae58:	2000      	movs	r0, #0
  m_errorLine = line;
    ae5a:	4b10      	ldr	r3, [pc, #64]	; (ae9c <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    ae5c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    ae5e:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    ae62:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    ae66:	601a      	str	r2, [r3, #0]
}
    ae68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    ae6c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    ae70:	4808      	ldr	r0, [pc, #32]	; (ae94 <SdioCard::writeStart(unsigned long)+0xc0>)
    ae72:	4649      	mov	r1, r9
    ae74:	f7ff fece 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    ae78:	2800      	cmp	r0, #0
    ae7a:	d1e9      	bne.n	ae50 <SdioCard::writeStart(unsigned long)+0x7c>
    ae7c:	e7e1      	b.n	ae42 <SdioCard::writeStart(unsigned long)+0x6e>
    ae7e:	bf00      	nop
    ae80:	0000ada9 	.word	0x0000ada9
    ae84:	20041810 	.word	0x20041810
    ae88:	0d1a0000 	.word	0x0d1a0000
    ae8c:	000f4240 	.word	0x000f4240
    ae90:	2004331e 	.word	0x2004331e
    ae94:	193a0020 	.word	0x193a0020
    ae98:	20009058 	.word	0x20009058
    ae9c:	2003e3d8 	.word	0x2003e3d8
    aea0:	200422d4 	.word	0x200422d4
    aea4:	402c0000 	.word	0x402c0000

0000aea8 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    aeac:	4c25      	ldr	r4, [pc, #148]	; (af44 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    aeae:	2100      	movs	r1, #0
    aeb0:	4825      	ldr	r0, [pc, #148]	; (af48 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    aeb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    aeb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    aeb8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    aeba:	f7ff feab 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    aebe:	4605      	mov	r5, r0
    aec0:	b948      	cbnz	r0, aed6 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    aec2:	4922      	ldr	r1, [pc, #136]	; (af4c <SdioCard::readStop()+0xa4>)
    aec4:	2009      	movs	r0, #9
  m_errorLine = line;
    aec6:	4b22      	ldr	r3, [pc, #136]	; (af50 <SdioCard::readStop()+0xa8>)
    aec8:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    aecc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    aece:	601a      	str	r2, [r3, #0]
}
    aed0:	4628      	mov	r0, r5
    aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    aed6:	4b1f      	ldr	r3, [pc, #124]	; (af54 <SdioCard::readStop()+0xac>)
    aed8:	f8df 8080 	ldr.w	r8, [pc, #128]	; af5c <SdioCard::readStop()+0xb4>
    aedc:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    aee0:	f001 fd64 	bl	c9ac <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    aee6:	4606      	mov	r6, r0
  while (fcn()) {
    aee8:	01d8      	lsls	r0, r3, #7
    aeea:	d418      	bmi.n	af1e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aeec:	4f1a      	ldr	r7, [pc, #104]	; (af58 <SdioCard::readStop()+0xb0>)
    aeee:	e004      	b.n	aefa <SdioCard::readStop()+0x52>
    yield();
    aef0:	f003 fbee 	bl	e6d0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    aef6:	01d9      	lsls	r1, r3, #7
    aef8:	d411      	bmi.n	af1e <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aefa:	f001 fd57 	bl	c9ac <micros>
    aefe:	1b83      	subs	r3, r0, r6
    af00:	42bb      	cmp	r3, r7
    af02:	d9f5      	bls.n	aef0 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    af04:	4a11      	ldr	r2, [pc, #68]	; (af4c <SdioCard::readStop()+0xa4>)
    af06:	210a      	movs	r1, #10
      m_busyFcn = 0;
    af08:	2500      	movs	r5, #0
  m_errorLine = line;
    af0a:	4b11      	ldr	r3, [pc, #68]	; (af50 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    af0c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    af0e:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    af12:	4628      	mov	r0, r5
      m_busyFcn = 0;
    af14:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    af18:	601a      	str	r2, [r3, #0]
}
    af1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    af1e:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    af20:	4b08      	ldr	r3, [pc, #32]	; (af44 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    af22:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    af26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    af28:	0792      	lsls	r2, r2, #30
    af2a:	d5d1      	bpl.n	aed0 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    af2c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    af2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    af30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    af32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    af36:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    af3a:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    af3c:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    af3e:	629a      	str	r2, [r3, #40]	; 0x28
    af40:	e7c6      	b.n	aed0 <SdioCard::readStop()+0x28>
    af42:	bf00      	nop
    af44:	402c0000 	.word	0x402c0000
    af48:	0cdb0000 	.word	0x0cdb0000
    af4c:	20009058 	.word	0x20009058
    af50:	2003e3d8 	.word	0x2003e3d8
    af54:	0000a7bd 	.word	0x0000a7bd
    af58:	000f4240 	.word	0x000f4240
    af5c:	200422d4 	.word	0x200422d4

0000af60 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af64:	4682      	mov	sl, r0
    af66:	4689      	mov	r9, r1
    af68:	4e36      	ldr	r6, [pc, #216]	; (b044 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    af6a:	f001 fd1f 	bl	c9ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    af6e:	4d36      	ldr	r5, [pc, #216]	; (b048 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    af70:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    af72:	f8df 8100 	ldr.w	r8, [pc, #256]	; b074 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af76:	4f35      	ldr	r7, [pc, #212]	; (b04c <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    af78:	e004      	b.n	af84 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af7a:	f001 fd17 	bl	c9ac <micros>
    af7e:	1b03      	subs	r3, r0, r4
    af80:	42bb      	cmp	r3, r7
    af82:	d827      	bhi.n	afd4 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    af84:	6831      	ldr	r1, [r6, #0]
    af86:	4628      	mov	r0, r5
    af88:	f7ff fe44 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    af8c:	2800      	cmp	r0, #0
    af8e:	d0f4      	beq.n	af7a <cardCMD6(unsigned long, unsigned char*)+0x1a>
    af90:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    af94:	05da      	lsls	r2, r3, #23
    af96:	d5f0      	bpl.n	af7a <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    af98:	2301      	movs	r3, #1
    af9a:	4d2d      	ldr	r5, [pc, #180]	; (b050 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    af9c:	4f2d      	ldr	r7, [pc, #180]	; (b054 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    af9e:	4651      	mov	r1, sl
  m_dmaBusy = true;
    afa0:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    afa2:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    afa4:	482c      	ldr	r0, [pc, #176]	; (b058 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    afa6:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    afa8:	4b2c      	ldr	r3, [pc, #176]	; (b05c <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    afaa:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    afae:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    afb2:	4b2b      	ldr	r3, [pc, #172]	; (b060 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    afb4:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    afb8:	f7ff fe2c 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    afbc:	4604      	mov	r4, r0
    afbe:	b9a0      	cbnz	r0, afea <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    afc0:	4928      	ldr	r1, [pc, #160]	; (b064 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    afc2:	2004      	movs	r0, #4
  m_errorLine = line;
    afc4:	4b28      	ldr	r3, [pc, #160]	; (b068 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    afc6:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    afca:	7008      	strb	r0, [r1, #0]
}
    afcc:	4620      	mov	r0, r4
  m_errorLine = line;
    afce:	601a      	str	r2, [r3, #0]
}
    afd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    afd4:	4923      	ldr	r1, [pc, #140]	; (b064 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    afd6:	200a      	movs	r0, #10
  m_errorLine = line;
    afd8:	4b23      	ldr	r3, [pc, #140]	; (b068 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    afda:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    afde:	2400      	movs	r4, #0
  m_errorCode = code;
    afe0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    afe2:	601a      	str	r2, [r3, #0]
}
    afe4:	4620      	mov	r0, r4
    afe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    afea:	4b20      	ldr	r3, [pc, #128]	; (b06c <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    afec:	f8df 9088 	ldr.w	r9, [pc, #136]	; b078 <cardCMD6(unsigned long, unsigned char*)+0x118>
    aff0:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    aff4:	f001 fcda 	bl	c9ac <micros>
  return m_dmaBusy;
    aff8:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    affa:	4606      	mov	r6, r0
  while (fcn()) {
    affc:	b1bb      	cbz	r3, b02e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    affe:	f8df 804c 	ldr.w	r8, [pc, #76]	; b04c <cardCMD6(unsigned long, unsigned char*)+0xec>
    b002:	e003      	b.n	b00c <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    b004:	f003 fb64 	bl	e6d0 <yield>
  return m_dmaBusy;
    b008:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    b00a:	b183      	cbz	r3, b02e <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b00c:	f001 fcce 	bl	c9ac <micros>
    b010:	1b83      	subs	r3, r0, r6
    b012:	4543      	cmp	r3, r8
    b014:	d9f6      	bls.n	b004 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    b016:	2300      	movs	r3, #0
    b018:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    b01c:	4911      	ldr	r1, [pc, #68]	; (b064 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b01e:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b020:	4b11      	ldr	r3, [pc, #68]	; (b068 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b022:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    b026:	2400      	movs	r4, #0
  m_errorCode = code;
    b028:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b02a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b02c:	e7da      	b.n	afe4 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b02e:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    b030:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b032:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    b034:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b038:	d5f0      	bpl.n	b01c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b03a:	683a      	ldr	r2, [r7, #0]
    b03c:	4b0c      	ldr	r3, [pc, #48]	; (b070 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    b03e:	421a      	tst	r2, r3
    b040:	d0d0      	beq.n	afe4 <cardCMD6(unsigned long, unsigned char*)+0x84>
    b042:	e7eb      	b.n	b01c <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b044:	20041810 	.word	0x20041810
    b048:	0d1a0000 	.word	0x0d1a0000
    b04c:	000f4240 	.word	0x000f4240
    b050:	20043320 	.word	0x20043320
    b054:	200422d8 	.word	0x200422d8
    b058:	063a0011 	.word	0x063a0011
    b05c:	00010040 	.word	0x00010040
    b060:	117f0002 	.word	0x117f0002
    b064:	20009058 	.word	0x20009058
    b068:	2003e3d8 	.word	0x2003e3d8
    b06c:	0000a7d1 	.word	0x0000a7d1
    b070:	117f0000 	.word	0x117f0000
    b074:	402c0000 	.word	0x402c0000
    b078:	200422d4 	.word	0x200422d4

0000b07c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    b080:	4d32      	ldr	r5, [pc, #200]	; (b14c <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b082:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    b084:	7aab      	ldrb	r3, [r5, #10]
    b086:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    b08a:	d112      	bne.n	b0b2 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    b08c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b090:	7aea      	ldrb	r2, [r5, #11]
    b092:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b094:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b098:	1c62      	adds	r2, r4, #1
    b09a:	430a      	orrs	r2, r1
    b09c:	4213      	tst	r3, r2
    b09e:	d008      	beq.n	b0b2 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    b0a0:	492b      	ldr	r1, [pc, #172]	; (b150 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b0a2:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    b0a4:	4b2b      	ldr	r3, [pc, #172]	; (b154 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b0a6:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    b0aa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b0ac:	601a      	str	r2, [r3, #0]
}
    b0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    b0b2:	4b29      	ldr	r3, [pc, #164]	; (b158 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    b0b4:	781b      	ldrb	r3, [r3, #0]
    b0b6:	b90b      	cbnz	r3, b0bc <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    b0b8:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    b0ba:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    b0bc:	4827      	ldr	r0, [pc, #156]	; (b15c <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    b0be:	f7ff fda9 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b0c2:	b940      	cbnz	r0, b0d6 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    b0c4:	4922      	ldr	r1, [pc, #136]	; (b150 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b0c6:	240f      	movs	r4, #15
  m_errorLine = line;
    b0c8:	4b22      	ldr	r3, [pc, #136]	; (b154 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b0ca:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    b0ce:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b0d0:	601a      	str	r2, [r3, #0]
}
    b0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b0d6:	4621      	mov	r1, r4
    b0d8:	4821      	ldr	r0, [pc, #132]	; (b160 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    b0da:	f7ff fd9b 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b0de:	b940      	cbnz	r0, b0f2 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    b0e0:	491b      	ldr	r1, [pc, #108]	; (b150 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b0e2:	2410      	movs	r4, #16
  m_errorLine = line;
    b0e4:	4b1b      	ldr	r3, [pc, #108]	; (b154 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b0e6:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    b0ea:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b0ec:	601a      	str	r2, [r3, #0]
}
    b0ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b0f2:	2100      	movs	r1, #0
    b0f4:	481b      	ldr	r0, [pc, #108]	; (b164 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    b0f6:	f7ff fd8d 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b0fa:	b938      	cbnz	r0, b10c <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    b0fc:	4914      	ldr	r1, [pc, #80]	; (b150 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b0fe:	2411      	movs	r4, #17
  m_errorLine = line;
    b100:	4b14      	ldr	r3, [pc, #80]	; (b154 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b102:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    b106:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b108:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    b10a:	e7e2      	b.n	b0d2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    b10c:	f001 fc4e 	bl	c9ac <micros>
    b110:	4e15      	ldr	r6, [pc, #84]	; (b168 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b112:	4d16      	ldr	r5, [pc, #88]	; (b16c <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    b114:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b116:	f8df 805c 	ldr.w	r8, [pc, #92]	; b174 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b11a:	4f15      	ldr	r7, [pc, #84]	; (b170 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b11c:	6831      	ldr	r1, [r6, #0]
    b11e:	4628      	mov	r0, r5
    b120:	f7ff fd78 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b124:	b118      	cbz	r0, b12e <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    b126:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b12a:	05db      	lsls	r3, r3, #23
    b12c:	d4d1      	bmi.n	b0d2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b12e:	f001 fc3d 	bl	c9ac <micros>
    b132:	1b00      	subs	r0, r0, r4
    b134:	42b8      	cmp	r0, r7
    b136:	d9f1      	bls.n	b11c <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    b138:	4905      	ldr	r1, [pc, #20]	; (b150 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b13a:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    b13c:	4b05      	ldr	r3, [pc, #20]	; (b154 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b13e:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b142:	2000      	movs	r0, #0
  m_errorCode = code;
    b144:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b146:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b148:	e7c3      	b.n	b0d2 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    b14a:	bf00      	nop
    b14c:	200417fc 	.word	0x200417fc
    b150:	20009058 	.word	0x20009058
    b154:	2003e3d8 	.word	0x2003e3d8
    b158:	2004331e 	.word	0x2004331e
    b15c:	201a0000 	.word	0x201a0000
    b160:	211a0000 	.word	0x211a0000
    b164:	261b0000 	.word	0x261b0000
    b168:	20041810 	.word	0x20041810
    b16c:	0d1a0000 	.word	0x0d1a0000
    b170:	000f4240 	.word	0x000f4240
    b174:	402c0000 	.word	0x402c0000

0000b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    b17c:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    b180:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    b182:	bf18      	it	ne
    b184:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    b186:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    b188:	9300      	str	r3, [sp, #0]
    b18a:	2b00      	cmp	r3, #0
    b18c:	bf08      	it	eq
    b18e:	f044 0401 	orreq.w	r4, r4, #1
    b192:	b15c      	cbz	r4, b1ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b194:	4940      	ldr	r1, [pc, #256]	; (b298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b196:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b198:	4b40      	ldr	r3, [pc, #256]	; (b29c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    b19a:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    b19e:	2400      	movs	r4, #0
  m_errorCode = code;
    b1a0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b1a2:	601a      	str	r2, [r3, #0]
}
    b1a4:	4620      	mov	r0, r4
    b1a6:	b003      	add	sp, #12
    b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    b1ac:	4b3c      	ldr	r3, [pc, #240]	; (b2a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    b1ae:	4615      	mov	r5, r2
    b1b0:	4a3c      	ldr	r2, [pc, #240]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b1b2:	460e      	mov	r6, r1
    b1b4:	f8df 910c 	ldr.w	r9, [pc, #268]	; b2c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    b1b8:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b1ba:	f001 fbf7 	bl	c9ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b1be:	f8df 8108 	ldr.w	r8, [pc, #264]	; b2c8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    b1c2:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b1c4:	f8df b104 	ldr.w	fp, [pc, #260]	; b2cc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b1c8:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b2bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    b1cc:	e006      	b.n	b1dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b1ce:	f001 fbed 	bl	c9ac <micros>
    b1d2:	1bc0      	subs	r0, r0, r7
    b1d4:	4550      	cmp	r0, sl
    b1d6:	d844      	bhi.n	b262 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    b1d8:	f003 fa7a 	bl	e6d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b1dc:	f8d9 1000 	ldr.w	r1, [r9]
    b1e0:	4640      	mov	r0, r8
    b1e2:	f7ff fd17 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b1e6:	2800      	cmp	r0, #0
    b1e8:	d0f1      	beq.n	b1ce <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    b1ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    b1ee:	05da      	lsls	r2, r3, #23
    b1f0:	d5ed      	bpl.n	b1ce <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b1f2:	9a00      	ldr	r2, [sp, #0]
    b1f4:	4b2c      	ldr	r3, [pc, #176]	; (b2a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    b1f6:	492b      	ldr	r1, [pc, #172]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b1f8:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    b1fc:	2200      	movs	r2, #0
  m_dmaBusy = true;
    b1fe:	4f2b      	ldr	r7, [pc, #172]	; (b2ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    b200:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    b206:	2101      	movs	r1, #1
  m_irqstat = 0;
    b208:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b2d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    b20c:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    b20e:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    b212:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b216:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b21a:	4b25      	ldr	r3, [pc, #148]	; (b2b0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    b21c:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b220:	4b24      	ldr	r3, [pc, #144]	; (b2b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    b222:	781b      	ldrb	r3, [r3, #0]
    b224:	b343      	cbz	r3, b278 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    b226:	4631      	mov	r1, r6
    b228:	9801      	ldr	r0, [sp, #4]
    b22a:	f7ff fcf3 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b22e:	4681      	mov	r9, r0
    b230:	2800      	cmp	r0, #0
    b232:	d0b7      	beq.n	b1a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    b234:	4b20      	ldr	r3, [pc, #128]	; (b2b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    b236:	4a1b      	ldr	r2, [pc, #108]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b238:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b23a:	f001 fbb7 	bl	c9ac <micros>
  return m_dmaBusy;
    b23e:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    b240:	4605      	mov	r5, r0
  while (fcn()) {
    b242:	b1db      	cbz	r3, b27c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b244:	4e1d      	ldr	r6, [pc, #116]	; (b2bc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    b246:	e003      	b.n	b250 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    b248:	f003 fa42 	bl	e6d0 <yield>
  return m_dmaBusy;
    b24c:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    b24e:	b1ab      	cbz	r3, b27c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b250:	f001 fbac 	bl	c9ac <micros>
    b254:	1b40      	subs	r0, r0, r5
    b256:	42b0      	cmp	r0, r6
    b258:	d9f6      	bls.n	b248 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    b25a:	2300      	movs	r3, #0
    b25c:	4a11      	ldr	r2, [pc, #68]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b25e:	6013      	str	r3, [r2, #0]
      return true;
    b260:	e7a0      	b.n	b1a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    b262:	4b0d      	ldr	r3, [pc, #52]	; (b298 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b264:	220a      	movs	r2, #10
      m_busyFcn = 0;
    b266:	2100      	movs	r1, #0
    b268:	480e      	ldr	r0, [pc, #56]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    b26a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b26c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b270:	4b0a      	ldr	r3, [pc, #40]	; (b29c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    b272:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    b274:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b276:	e795      	b.n	b1a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b278:	0276      	lsls	r6, r6, #9
    b27a:	e7d4      	b.n	b226 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    b27c:	2300      	movs	r3, #0
    b27e:	4a09      	ldr	r2, [pc, #36]	; (b2a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b280:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b282:	f8d8 3000 	ldr.w	r3, [r8]
    b286:	079b      	lsls	r3, r3, #30
    b288:	d58c      	bpl.n	b1a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b28a:	f8d8 2000 	ldr.w	r2, [r8]
    b28e:	4b0c      	ldr	r3, [pc, #48]	; (b2c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    b290:	421a      	tst	r2, r3
    b292:	bf08      	it	eq
    b294:	464c      	moveq	r4, r9
    b296:	e785      	b.n	b1a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b298:	20009058 	.word	0x20009058
    b29c:	2003e3d8 	.word	0x2003e3d8
    b2a0:	0000ada9 	.word	0x0000ada9
    b2a4:	200422d4 	.word	0x200422d4
    b2a8:	1fff0000 	.word	0x1fff0000
    b2ac:	20043320 	.word	0x20043320
    b2b0:	117f0002 	.word	0x117f0002
    b2b4:	2004331e 	.word	0x2004331e
    b2b8:	0000a7d1 	.word	0x0000a7d1
    b2bc:	000f4240 	.word	0x000f4240
    b2c0:	117f0000 	.word	0x117f0000
    b2c4:	20041810 	.word	0x20041810
    b2c8:	0d1a0000 	.word	0x0d1a0000
    b2cc:	402c0000 	.word	0x402c0000
    b2d0:	200422d8 	.word	0x200422d8

0000b2d4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2d6:	4606      	mov	r6, r0
    b2d8:	7a00      	ldrb	r0, [r0, #8]
    b2da:	460c      	mov	r4, r1
    b2dc:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b2de:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b2e0:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b2e2:	d413      	bmi.n	b30c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b2e4:	b183      	cbz	r3, b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b2e6:	440f      	add	r7, r1
    b2e8:	e001      	b.n	b2ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    b2ea:	42bc      	cmp	r4, r7
    b2ec:	d00c      	beq.n	b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    b2ee:	6833      	ldr	r3, [r6, #0]
    b2f0:	462a      	mov	r2, r5
    b2f2:	4621      	mov	r1, r4
    b2f4:	4630      	mov	r0, r6
    b2f6:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    b2f8:	3401      	adds	r4, #1
    b2fa:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    b2fe:	4798      	blx	r3
    b300:	2800      	cmp	r0, #0
    b302:	d1f2      	bne.n	b2ea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    b304:	2000      	movs	r0, #0
}
    b306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b308:	2001      	movs	r0, #1
}
    b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    b30c:	0790      	lsls	r0, r2, #30
    b30e:	d012      	beq.n	b336 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b310:	2b00      	cmp	r3, #0
    b312:	d0f9      	beq.n	b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b314:	440f      	add	r7, r1
    b316:	e001      	b.n	b31c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    b318:	42bc      	cmp	r4, r7
    b31a:	d0f5      	beq.n	b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    b31c:	6833      	ldr	r3, [r6, #0]
    b31e:	462a      	mov	r2, r5
    b320:	4621      	mov	r1, r4
    b322:	4630      	mov	r0, r6
    b324:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b326:	3401      	adds	r4, #1
    b328:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    b32c:	4798      	blx	r3
    b32e:	2800      	cmp	r0, #0
    b330:	d1f2      	bne.n	b318 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    b332:	2000      	movs	r0, #0
    b334:	e7e7      	b.n	b306 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b336:	4806      	ldr	r0, [pc, #24]	; (b350 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    b338:	f7ff ff1e 	bl	b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b33c:	2800      	cmp	r0, #0
    b33e:	d1e3      	bne.n	b308 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b340:	4904      	ldr	r1, [pc, #16]	; (b354 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b342:	240c      	movs	r4, #12
  m_errorLine = line;
    b344:	4b04      	ldr	r3, [pc, #16]	; (b358 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b346:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    b34a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b34c:	601a      	str	r2, [r3, #0]
}
    b34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b350:	123a0037 	.word	0x123a0037
    b354:	20009058 	.word	0x20009058
    b358:	2003e3d8 	.word	0x2003e3d8

0000b35c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b35e:	4606      	mov	r6, r0
    b360:	7a00      	ldrb	r0, [r0, #8]
    b362:	460c      	mov	r4, r1
    b364:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b366:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b368:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b36a:	d413      	bmi.n	b394 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b36c:	b183      	cbz	r3, b390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b36e:	440f      	add	r7, r1
    b370:	e001      	b.n	b376 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    b372:	42bc      	cmp	r4, r7
    b374:	d00c      	beq.n	b390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    b376:	6833      	ldr	r3, [r6, #0]
    b378:	462a      	mov	r2, r5
    b37a:	4621      	mov	r1, r4
    b37c:	4630      	mov	r0, r6
    b37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    b380:	3401      	adds	r4, #1
    b382:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    b386:	4798      	blx	r3
    b388:	2800      	cmp	r0, #0
    b38a:	d1f2      	bne.n	b372 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    b38c:	2000      	movs	r0, #0
}
    b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b390:	2001      	movs	r0, #1
}
    b392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    b394:	0790      	lsls	r0, r2, #30
    b396:	d012      	beq.n	b3be <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b398:	2b00      	cmp	r3, #0
    b39a:	d0f9      	beq.n	b390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b39c:	440f      	add	r7, r1
    b39e:	e001      	b.n	b3a4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    b3a0:	42bc      	cmp	r4, r7
    b3a2:	d0f5      	beq.n	b390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    b3a4:	6833      	ldr	r3, [r6, #0]
    b3a6:	462a      	mov	r2, r5
    b3a8:	4621      	mov	r1, r4
    b3aa:	4630      	mov	r0, r6
    b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b3ae:	3401      	adds	r4, #1
    b3b0:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    b3b4:	4798      	blx	r3
    b3b6:	2800      	cmp	r0, #0
    b3b8:	d1f2      	bne.n	b3a0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    b3ba:	2000      	movs	r0, #0
    b3bc:	e7e7      	b.n	b38e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b3be:	4806      	ldr	r0, [pc, #24]	; (b3d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    b3c0:	f7ff feda 	bl	b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b3c4:	2800      	cmp	r0, #0
    b3c6:	d1e3      	bne.n	b390 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    b3c8:	4904      	ldr	r1, [pc, #16]	; (b3dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b3ca:	240e      	movs	r4, #14
  m_errorLine = line;
    b3cc:	4b04      	ldr	r3, [pc, #16]	; (b3e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b3ce:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    b3d2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b3d4:	601a      	str	r2, [r3, #0]
}
    b3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3d8:	193a0027 	.word	0x193a0027
    b3dc:	20009058 	.word	0x20009058
    b3e0:	2003e3d8 	.word	0x2003e3d8

0000b3e4 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    b3e8:	2500      	movs	r5, #0
  m_initDone = false;
    b3ea:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b6ac <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    b3ee:	4c9b      	ldr	r4, [pc, #620]	; (b65c <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    b3f0:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    b3f2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b6b0 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    b3f6:	4e9a      	ldr	r6, [pc, #616]	; (b660 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    b3f8:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b3fa:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    b3fc:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    b400:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    b402:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    b406:	7035      	strb	r5, [r6, #0]
  initSDHC();
    b408:	f7ff fad2 	bl	a9b0 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b40c:	4629      	mov	r1, r5
    b40e:	4628      	mov	r0, r5
    b410:	f7ff fc00 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b414:	b950      	cbnz	r0, b42c <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    b416:	2101      	movs	r1, #1
  m_errorLine = line;
    b418:	4b92      	ldr	r3, [pc, #584]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b41a:	f240 228e 	movw	r2, #654	; 0x28e
    b41e:	4605      	mov	r5, r0
  m_errorCode = code;
    b420:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b422:	601a      	str	r2, [r3, #0]
}
    b424:	4628      	mov	r0, r5
    b426:	b011      	add	sp, #68	; 0x44
    b428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b42c:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b42e:	4f8e      	ldr	r7, [pc, #568]	; (b668 <SdioCard::begin(SdioConfig)+0x284>)
    b430:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    b434:	4638      	mov	r0, r7
    b436:	f7ff fbed 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b43a:	2800      	cmp	r0, #0
    b43c:	d14e      	bne.n	b4dc <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b43e:	3d01      	subs	r5, #1
    b440:	d1f6      	bne.n	b430 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    b442:	7833      	ldrb	r3, [r6, #0]
    b444:	2b00      	cmp	r3, #0
    b446:	d03d      	beq.n	b4c4 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b448:	f8df b268 	ldr.w	fp, [pc, #616]	; b6b4 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    b44c:	f001 faae 	bl	c9ac <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b450:	4e86      	ldr	r6, [pc, #536]	; (b66c <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    b452:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b454:	f8df a260 	ldr.w	sl, [pc, #608]	; b6b8 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b458:	4f85      	ldr	r7, [pc, #532]	; (b670 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b45a:	2100      	movs	r1, #0
    b45c:	4630      	mov	r0, r6
    b45e:	f7ff fbd9 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b462:	b950      	cbnz	r0, b47a <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    b464:	2500      	movs	r5, #0
  m_errorCode = code;
    b466:	2117      	movs	r1, #23
  m_errorLine = line;
    b468:	4b7e      	ldr	r3, [pc, #504]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b46a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    b46e:	4628      	mov	r0, r5
  m_errorCode = code;
    b470:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b472:	601a      	str	r2, [r3, #0]
}
    b474:	b011      	add	sp, #68	; 0x44
    b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b47a:	4659      	mov	r1, fp
    b47c:	4650      	mov	r0, sl
    b47e:	f7ff fbc9 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b482:	2800      	cmp	r0, #0
    b484:	d0ee      	beq.n	b464 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b486:	f001 fa91 	bl	c9ac <micros>
    b48a:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b48c:	4b79      	ldr	r3, [pc, #484]	; (b674 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b48e:	42b8      	cmp	r0, r7
    b490:	d8e8      	bhi.n	b464 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b492:	691a      	ldr	r2, [r3, #16]
    b494:	2a00      	cmp	r2, #0
    b496:	dae0      	bge.n	b45a <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    b498:	6919      	ldr	r1, [r3, #16]
    b49a:	4a77      	ldr	r2, [pc, #476]	; (b678 <SdioCard::begin(SdioConfig)+0x294>)
    b49c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b49e:	691b      	ldr	r3, [r3, #16]
    b4a0:	005a      	lsls	r2, r3, #1
    b4a2:	d502      	bpl.n	b4aa <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    b4a4:	2301      	movs	r3, #1
    b4a6:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b4aa:	2100      	movs	r1, #0
    b4ac:	4873      	ldr	r0, [pc, #460]	; (b67c <SdioCard::begin(SdioConfig)+0x298>)
    b4ae:	f7ff fbb1 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b4b2:	4605      	mov	r5, r0
    b4b4:	bb10      	cbnz	r0, b4fc <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    b4b6:	2102      	movs	r1, #2
  m_errorLine = line;
    b4b8:	4b6a      	ldr	r3, [pc, #424]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b4ba:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    b4be:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b4c0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b4c2:	e7af      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    b4c4:	f7ff fa74 	bl	a9b0 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    b4c8:	4629      	mov	r1, r5
    b4ca:	4628      	mov	r0, r5
    b4cc:	f7ff fba2 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b4d0:	7833      	ldrb	r3, [r6, #0]
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	d1b8      	bne.n	b448 <SdioCard::begin(SdioConfig)+0x64>
    b4d6:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    b4da:	e7b7      	b.n	b44c <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b4dc:	4b65      	ldr	r3, [pc, #404]	; (b674 <SdioCard::begin(SdioConfig)+0x290>)
    b4de:	691b      	ldr	r3, [r3, #16]
    b4e0:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b4e4:	d007      	beq.n	b4f6 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    b4e6:	2106      	movs	r1, #6
  m_errorLine = line;
    b4e8:	4b5e      	ldr	r3, [pc, #376]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b4ea:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    b4ee:	2500      	movs	r5, #0
  m_errorCode = code;
    b4f0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b4f2:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b4f4:	e796      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    b4f6:	2301      	movs	r3, #1
    b4f8:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    b4fa:	e7a5      	b.n	b448 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b4fc:	2100      	movs	r1, #0
    b4fe:	4860      	ldr	r0, [pc, #384]	; (b680 <SdioCard::begin(SdioConfig)+0x29c>)
    b500:	f7ff fb88 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b504:	4605      	mov	r5, r0
    b506:	b930      	cbnz	r0, b516 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    b508:	2103      	movs	r1, #3
  m_errorLine = line;
    b50a:	4b56      	ldr	r3, [pc, #344]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b50c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    b510:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b512:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b514:	e786      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b516:	4e57      	ldr	r6, [pc, #348]	; (b674 <SdioCard::begin(SdioConfig)+0x290>)
    b518:	4b5a      	ldr	r3, [pc, #360]	; (b684 <SdioCard::begin(SdioConfig)+0x2a0>)
    b51a:	6932      	ldr	r2, [r6, #16]
    b51c:	4f5a      	ldr	r7, [pc, #360]	; (b688 <SdioCard::begin(SdioConfig)+0x2a4>)
    b51e:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b520:	495a      	ldr	r1, [pc, #360]	; (b68c <SdioCard::begin(SdioConfig)+0x2a8>)
    b522:	485b      	ldr	r0, [pc, #364]	; (b690 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b524:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b526:	f7ff fbc1 	bl	acac <readReg16(unsigned long, void*)>
    b52a:	4605      	mov	r5, r0
    b52c:	b930      	cbnz	r0, b53c <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    b52e:	2107      	movs	r1, #7
  m_errorLine = line;
    b530:	4b4c      	ldr	r3, [pc, #304]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b532:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    b536:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b538:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b53a:	e773      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b53c:	4955      	ldr	r1, [pc, #340]	; (b694 <SdioCard::begin(SdioConfig)+0x2b0>)
    b53e:	4856      	ldr	r0, [pc, #344]	; (b698 <SdioCard::begin(SdioConfig)+0x2b4>)
    b540:	f7ff fbb4 	bl	acac <readReg16(unsigned long, void*)>
    b544:	4605      	mov	r5, r0
    b546:	b930      	cbnz	r0, b556 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    b548:	2108      	movs	r1, #8
  m_errorLine = line;
    b54a:	4b46      	ldr	r3, [pc, #280]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b54c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    b550:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b552:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b554:	e766      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b556:	6839      	ldr	r1, [r7, #0]
    b558:	4850      	ldr	r0, [pc, #320]	; (b69c <SdioCard::begin(SdioConfig)+0x2b8>)
    b55a:	f7ff fb5b 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b55e:	4605      	mov	r5, r0
    b560:	b930      	cbnz	r0, b570 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    b562:	2105      	movs	r1, #5
  m_errorLine = line;
    b564:	4b3f      	ldr	r3, [pc, #252]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b566:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    b56a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b56c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b56e:	e759      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b570:	6839      	ldr	r1, [r7, #0]
    b572:	483e      	ldr	r0, [pc, #248]	; (b66c <SdioCard::begin(SdioConfig)+0x288>)
    b574:	f7ff fb4e 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b578:	b938      	cbnz	r0, b58a <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    b57a:	2114      	movs	r1, #20
  m_errorLine = line;
    b57c:	4b39      	ldr	r3, [pc, #228]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    b57e:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    b582:	2500      	movs	r5, #0
  m_errorCode = code;
    b584:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b586:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b588:	e74c      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b58a:	2102      	movs	r1, #2
    b58c:	4844      	ldr	r0, [pc, #272]	; (b6a0 <SdioCard::begin(SdioConfig)+0x2bc>)
    b58e:	f7ff fb41 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b592:	4605      	mov	r5, r0
    b594:	2800      	cmp	r0, #0
    b596:	d0f0      	beq.n	b57a <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b598:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b59a:	4669      	mov	r1, sp
    b59c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b5a0:	f023 0306 	bic.w	r3, r3, #6
    b5a4:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b5a6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    b5a8:	f043 0302 	orr.w	r3, r3, #2
    b5ac:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b5ae:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    b5b2:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b5b4:	f7ff fcd4 	bl	af60 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    b5b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    b5bc:	079b      	lsls	r3, r3, #30
    b5be:	d543      	bpl.n	b648 <SdioCard::begin(SdioConfig)+0x264>
    b5c0:	2800      	cmp	r0, #0
    b5c2:	d041      	beq.n	b648 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    b5c4:	4e27      	ldr	r6, [pc, #156]	; (b664 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b5c6:	4669      	mov	r1, sp
    b5c8:	4836      	ldr	r0, [pc, #216]	; (b6a4 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    b5ca:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    b5ce:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b5d0:	f7ff fcc6 	bl	af60 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    b5d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b5d8:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    b5dc:	2b01      	cmp	r3, #1
    b5de:	d136      	bne.n	b64e <SdioCard::begin(SdioConfig)+0x26a>
    b5e0:	b3a8      	cbz	r0, b64e <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    b5e2:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b5e6:	4c30      	ldr	r4, [pc, #192]	; (b6a8 <SdioCard::begin(SdioConfig)+0x2c4>)
    b5e8:	2305      	movs	r3, #5
    b5ea:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b5ee:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b5f2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b5f6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b5fa:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b5fe:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    b602:	f7ff f8eb 	bl	a7dc <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b606:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b608:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b60c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b610:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b614:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b618:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b61c:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b620:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b624:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b628:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b62c:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b630:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b634:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    b638:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b63a:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b63e:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    b642:	f889 3000 	strb.w	r3, [r9]
  return true;
    b646:	e6ed      	b.n	b424 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    b648:	f246 10a8 	movw	r0, #25000	; 0x61a8
    b64c:	e7cb      	b.n	b5e6 <SdioCard::begin(SdioConfig)+0x202>
    b64e:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    b652:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    b656:	6037      	str	r7, [r6, #0]
    b658:	e7c5      	b.n	b5e6 <SdioCard::begin(SdioConfig)+0x202>
    b65a:	bf00      	nop
    b65c:	20009058 	.word	0x20009058
    b660:	2004331d 	.word	0x2004331d
    b664:	2003e3d8 	.word	0x2003e3d8
    b668:	081a0000 	.word	0x081a0000
    b66c:	371a0000 	.word	0x371a0000
    b670:	000f4240 	.word	0x000f4240
    b674:	402c0000 	.word	0x402c0000
    b678:	2004180c 	.word	0x2004180c
    b67c:	02090000 	.word	0x02090000
    b680:	031a0000 	.word	0x031a0000
    b684:	ffff0000 	.word	0xffff0000
    b688:	20041810 	.word	0x20041810
    b68c:	200417fc 	.word	0x200417fc
    b690:	09090000 	.word	0x09090000
    b694:	200417ec 	.word	0x200417ec
    b698:	0a090000 	.word	0x0a090000
    b69c:	071b0000 	.word	0x071b0000
    b6a0:	061a0000 	.word	0x061a0000
    b6a4:	80fffff1 	.word	0x80fffff1
    b6a8:	401f8000 	.word	0x401f8000
    b6ac:	2004331c 	.word	0x2004331c
    b6b0:	2004331e 	.word	0x2004331e
    b6b4:	40300000 	.word	0x40300000
    b6b8:	29020000 	.word	0x29020000

0000b6bc <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b6bc:	4b37      	ldr	r3, [pc, #220]	; (b79c <SdioCard::readData(unsigned char*)+0xe0>)
    b6be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b6c0:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    b6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c6:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b6c8:	d40d      	bmi.n	b6e6 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b6ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b6d0:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b6d2:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b6d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b6da:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b6dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b6de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b6e2:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b6e4:	b662      	cpsie	i
  uint32_t m = micros();
    b6e6:	f001 f961 	bl	c9ac <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b6ea:	4e2c      	ldr	r6, [pc, #176]	; (b79c <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b6ec:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b7b4 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    b6f0:	4605      	mov	r5, r0
  while (fcn()) {
    b6f2:	e004      	b.n	b6fe <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b6f4:	f001 f95a 	bl	c9ac <micros>
    b6f8:	1b43      	subs	r3, r0, r5
    b6fa:	4543      	cmp	r3, r8
    b6fc:	d837      	bhi.n	b76e <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b6fe:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    b700:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    b704:	d0f6      	beq.n	b6f4 <SdioCard::readData(unsigned char*)+0x38>
    b706:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b70a:	4824      	ldr	r0, [pc, #144]	; (b79c <SdioCard::readData(unsigned char*)+0xe0>)
    b70c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    b710:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b712:	051b      	lsls	r3, r3, #20
    b714:	d5fc      	bpl.n	b710 <SdioCard::readData(unsigned char*)+0x54>
    b716:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b71a:	6a02      	ldr	r2, [r0, #32]
    b71c:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b720:	459c      	cmp	ip, r3
    b722:	d1fa      	bne.n	b71a <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b724:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b728:	4567      	cmp	r7, ip
    b72a:	d1f1      	bne.n	b710 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    b72c:	f001 f93e 	bl	c9ac <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b730:	4f1a      	ldr	r7, [pc, #104]	; (b79c <SdioCard::readData(unsigned char*)+0xe0>)
    b732:	4d1b      	ldr	r5, [pc, #108]	; (b7a0 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    b734:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b736:	f8df 807c 	ldr.w	r8, [pc, #124]	; b7b4 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    b73a:	e004      	b.n	b746 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b73c:	f001 f936 	bl	c9ac <micros>
    b740:	1b83      	subs	r3, r0, r6
    b742:	4543      	cmp	r3, r8
    b744:	d81d      	bhi.n	b782 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b746:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    b748:	402c      	ands	r4, r5
    b74a:	d0f7      	beq.n	b73c <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b74e:	4a15      	ldr	r2, [pc, #84]	; (b7a4 <SdioCard::readData(unsigned char*)+0xe8>)
    b750:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b752:	6813      	ldr	r3, [r2, #0]
    b754:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b756:	6813      	ldr	r3, [r2, #0]
    b758:	f013 0302 	ands.w	r3, r3, #2
    b75c:	d01b      	beq.n	b796 <SdioCard::readData(unsigned char*)+0xda>
    b75e:	6812      	ldr	r2, [r2, #0]
    b760:	4b11      	ldr	r3, [pc, #68]	; (b7a8 <SdioCard::readData(unsigned char*)+0xec>)
    b762:	421a      	tst	r2, r3
    b764:	bf0c      	ite	eq
    b766:	2001      	moveq	r0, #1
    b768:	2000      	movne	r0, #0
}
    b76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b76e:	490f      	ldr	r1, [pc, #60]	; (b7ac <SdioCard::readData(unsigned char*)+0xf0>)
    b770:	251a      	movs	r5, #26
  m_errorLine = line;
    b772:	4b0f      	ldr	r3, [pc, #60]	; (b7b0 <SdioCard::readData(unsigned char*)+0xf4>)
    b774:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    b778:	4620      	mov	r0, r4
  m_errorCode = code;
    b77a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b77c:	601a      	str	r2, [r3, #0]
}
    b77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    b782:	490a      	ldr	r1, [pc, #40]	; (b7ac <SdioCard::readData(unsigned char*)+0xf0>)
    b784:	251d      	movs	r5, #29
  m_errorLine = line;
    b786:	4b0a      	ldr	r3, [pc, #40]	; (b7b0 <SdioCard::readData(unsigned char*)+0xf4>)
    b788:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    b78c:	4620      	mov	r0, r4
  m_errorCode = code;
    b78e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    b790:	601a      	str	r2, [r3, #0]
}
    b792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b796:	4618      	mov	r0, r3
}
    b798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b79c:	402c0000 	.word	0x402c0000
    b7a0:	117f0002 	.word	0x117f0002
    b7a4:	200422d8 	.word	0x200422d8
    b7a8:	117f0000 	.word	0x117f0000
    b7ac:	20009058 	.word	0x20009058
    b7b0:	2003e3d8 	.word	0x2003e3d8
    b7b4:	000f4240 	.word	0x000f4240

0000b7b8 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    b7bc:	4b29      	ldr	r3, [pc, #164]	; (b864 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    b7be:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    b7c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b884 <SdioCard::readStart(unsigned long)+0xcc>
    b7c4:	4e28      	ldr	r6, [pc, #160]	; (b868 <SdioCard::readStart(unsigned long)+0xb0>)
    b7c6:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    b7ca:	f001 f8ef 	bl	c9ac <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b7ce:	4d27      	ldr	r5, [pc, #156]	; (b86c <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    b7d0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b7d2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b888 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b7d6:	4f26      	ldr	r7, [pc, #152]	; (b870 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    b7d8:	e006      	b.n	b7e8 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b7da:	f001 f8e7 	bl	c9ac <micros>
    b7de:	1b00      	subs	r0, r0, r4
    b7e0:	42b8      	cmp	r0, r7
    b7e2:	d829      	bhi.n	b838 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    b7e4:	f002 ff74 	bl	e6d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b7e8:	6831      	ldr	r1, [r6, #0]
    b7ea:	4628      	mov	r0, r5
    b7ec:	f7ff fa12 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b7f0:	2800      	cmp	r0, #0
    b7f2:	d0f2      	beq.n	b7da <SdioCard::readStart(unsigned long)+0x22>
    b7f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b7f8:	05db      	lsls	r3, r3, #23
    b7fa:	d5ee      	bpl.n	b7da <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    b7fc:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b7fe:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    b802:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b806:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    b80a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    b80e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b812:	4b18      	ldr	r3, [pc, #96]	; (b874 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b814:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b818:	781b      	ldrb	r3, [r3, #0]
    b81a:	b1cb      	cbz	r3, b850 <SdioCard::readStart(unsigned long)+0x98>
    b81c:	4649      	mov	r1, r9
    b81e:	4816      	ldr	r0, [pc, #88]	; (b878 <SdioCard::readStart(unsigned long)+0xc0>)
    b820:	f7ff f9f8 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b824:	b930      	cbnz	r0, b834 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    b826:	4915      	ldr	r1, [pc, #84]	; (b87c <SdioCard::readStart(unsigned long)+0xc4>)
    b828:	240c      	movs	r4, #12
  m_errorLine = line;
    b82a:	4b15      	ldr	r3, [pc, #84]	; (b880 <SdioCard::readStart(unsigned long)+0xc8>)
    b82c:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    b830:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b832:	601a      	str	r2, [r3, #0]
}
    b834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b838:	4a10      	ldr	r2, [pc, #64]	; (b87c <SdioCard::readStart(unsigned long)+0xc4>)
    b83a:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b83c:	2000      	movs	r0, #0
  m_errorLine = line;
    b83e:	4b10      	ldr	r3, [pc, #64]	; (b880 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    b840:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b842:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    b846:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    b84a:	601a      	str	r2, [r3, #0]
}
    b84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b850:	ea4f 2949 	mov.w	r9, r9, lsl #9
    b854:	4808      	ldr	r0, [pc, #32]	; (b878 <SdioCard::readStart(unsigned long)+0xc0>)
    b856:	4649      	mov	r1, r9
    b858:	f7ff f9dc 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b85c:	2800      	cmp	r0, #0
    b85e:	d1e9      	bne.n	b834 <SdioCard::readStart(unsigned long)+0x7c>
    b860:	e7e1      	b.n	b826 <SdioCard::readStart(unsigned long)+0x6e>
    b862:	bf00      	nop
    b864:	0000ada9 	.word	0x0000ada9
    b868:	20041810 	.word	0x20041810
    b86c:	0d1a0000 	.word	0x0d1a0000
    b870:	000f4240 	.word	0x000f4240
    b874:	2004331e 	.word	0x2004331e
    b878:	123a0030 	.word	0x123a0030
    b87c:	20009058 	.word	0x20009058
    b880:	2003e3d8 	.word	0x2003e3d8
    b884:	200422d4 	.word	0x200422d4
    b888:	402c0000 	.word	0x402c0000

0000b88c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    b890:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b892:	4c1d      	ldr	r4, [pc, #116]	; (b908 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    b894:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    b896:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b898:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b89a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b89c:	481b      	ldr	r0, [pc, #108]	; (b90c <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b89e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b8a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b8a4:	f7ff f9b6 	bl	ac14 <cardCommand(unsigned long, unsigned long)>
    b8a8:	b940      	cbnz	r0, b8bc <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    b8aa:	4919      	ldr	r1, [pc, #100]	; (b910 <SdioCard::stopTransmission(bool)+0x84>)
    b8ac:	2409      	movs	r4, #9
  m_errorLine = line;
    b8ae:	4b19      	ldr	r3, [pc, #100]	; (b914 <SdioCard::stopTransmission(bool)+0x88>)
    b8b0:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    b8b4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b8b6:	601a      	str	r2, [r3, #0]
}
    b8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    b8bc:	2d00      	cmp	r5, #0
    b8be:	d0fb      	beq.n	b8b8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    b8c0:	4b15      	ldr	r3, [pc, #84]	; (b918 <SdioCard::stopTransmission(bool)+0x8c>)
    b8c2:	4e16      	ldr	r6, [pc, #88]	; (b91c <SdioCard::stopTransmission(bool)+0x90>)
    b8c4:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    b8c6:	f001 f871 	bl	c9ac <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    b8cc:	4607      	mov	r7, r0
  while (fcn()) {
    b8ce:	01da      	lsls	r2, r3, #7
    b8d0:	d416      	bmi.n	b900 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b8d2:	f8df 804c 	ldr.w	r8, [pc, #76]	; b920 <SdioCard::stopTransmission(bool)+0x94>
    b8d6:	e004      	b.n	b8e2 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    b8d8:	f002 fefa 	bl	e6d0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    b8de:	01db      	lsls	r3, r3, #7
    b8e0:	d40e      	bmi.n	b900 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b8e2:	f001 f863 	bl	c9ac <micros>
    b8e6:	1bc0      	subs	r0, r0, r7
    b8e8:	4540      	cmp	r0, r8
    b8ea:	d9f5      	bls.n	b8d8 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    b8ec:	4a08      	ldr	r2, [pc, #32]	; (b910 <SdioCard::stopTransmission(bool)+0x84>)
    b8ee:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b8f0:	2000      	movs	r0, #0
  m_errorLine = line;
    b8f2:	4b08      	ldr	r3, [pc, #32]	; (b914 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    b8f4:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b8f6:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    b8fa:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    b8fc:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    b8fe:	e7db      	b.n	b8b8 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    b900:	2300      	movs	r3, #0
  return true;
    b902:	4628      	mov	r0, r5
  m_busyFcn = 0;
    b904:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    b906:	e7d7      	b.n	b8b8 <SdioCard::stopTransmission(bool)+0x2c>
    b908:	402c0000 	.word	0x402c0000
    b90c:	0cdb0000 	.word	0x0cdb0000
    b910:	20009058 	.word	0x20009058
    b914:	2003e3d8 	.word	0x2003e3d8
    b918:	0000a7bd 	.word	0x0000a7bd
    b91c:	200422d4 	.word	0x200422d4
    b920:	000f4240 	.word	0x000f4240

0000b924 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    b924:	4b0a      	ldr	r3, [pc, #40]	; (b950 <SdioCard::syncDevice()+0x2c>)
    b926:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    b928:	b510      	push	{r4, lr}
    b92a:	4604      	mov	r4, r0
  if (!m_transferActive) {
    b92c:	b91b      	cbnz	r3, b936 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    b92e:	7a63      	ldrb	r3, [r4, #9]
    b930:	b943      	cbnz	r3, b944 <SdioCard::syncDevice()+0x20>
  return true;
    b932:	2001      	movs	r0, #1
}
    b934:	bd10      	pop	{r4, pc}
    b936:	f7ff f8cf 	bl	aad8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    b93a:	2800      	cmp	r0, #0
    b93c:	d0fa      	beq.n	b934 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    b93e:	7a63      	ldrb	r3, [r4, #9]
    b940:	2b00      	cmp	r3, #0
    b942:	d0f6      	beq.n	b932 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    b944:	4620      	mov	r0, r4
    b946:	2101      	movs	r1, #1
}
    b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    b94c:	f7ff bf9e 	b.w	b88c <SdioCard::stopTransmission(bool)>
    b950:	2004331f 	.word	0x2004331f

0000b954 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b958:	4604      	mov	r4, r0
    b95a:	7a00      	ldrb	r0, [r0, #8]
    b95c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    b960:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    b962:	f010 0501 	ands.w	r5, r0, #1
    b966:	d013      	beq.n	b990 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    b968:	0793      	lsls	r3, r2, #30
    b96a:	d03c      	beq.n	b9e6 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b96c:	2301      	movs	r3, #1
    b96e:	4838      	ldr	r0, [pc, #224]	; (ba50 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    b970:	466a      	mov	r2, sp
    b972:	f7ff fc01 	bl	b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b976:	2800      	cmp	r0, #0
    b978:	d03a      	beq.n	b9f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    b97a:	f44f 7200 	mov.w	r2, #512	; 0x200
    b97e:	4669      	mov	r1, sp
    b980:	4630      	mov	r0, r6
    b982:	f001 f8a7 	bl	cad4 <memcpy>
}
    b986:	4628      	mov	r0, r5
    b988:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    b990:	f8df 80cc 	ldr.w	r8, [pc, #204]	; ba60 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    b994:	460f      	mov	r7, r1
    b996:	f898 3000 	ldrb.w	r3, [r8]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d135      	bne.n	ba0a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    b99e:	7a63      	ldrb	r3, [r4, #9]
    b9a0:	2b01      	cmp	r3, #1
    b9a2:	d039      	beq.n	ba18 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    b9a4:	6822      	ldr	r2, [r4, #0]
    b9a6:	492b      	ldr	r1, [pc, #172]	; (ba54 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    b9a8:	6a12      	ldr	r2, [r2, #32]
    b9aa:	428a      	cmp	r2, r1
    b9ac:	d14a      	bne.n	ba44 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    b9ae:	f898 2000 	ldrb.w	r2, [r8]
    b9b2:	2a00      	cmp	r2, #0
    b9b4:	d134      	bne.n	ba20 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    b9b6:	2b00      	cmp	r3, #0
    b9b8:	d139      	bne.n	ba2e <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    b9ba:	4639      	mov	r1, r7
    b9bc:	4620      	mov	r0, r4
    b9be:	f7ff fefb 	bl	b7b8 <SdioCard::readStart(unsigned long)>
    b9c2:	b1e8      	cbz	r0, ba00 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    b9c4:	2301      	movs	r3, #1
      m_curSector = sector;
    b9c6:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    b9c8:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    b9ca:	4631      	mov	r1, r6
    b9cc:	4620      	mov	r0, r4
    b9ce:	f7ff fe75 	bl	b6bc <SdioCard::readData(unsigned char*)>
    b9d2:	b1a8      	cbz	r0, ba00 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    b9d4:	6863      	ldr	r3, [r4, #4]
  return true;
    b9d6:	4605      	mov	r5, r0
    m_curSector++;
    b9d8:	3301      	adds	r3, #1
}
    b9da:	4628      	mov	r0, r5
    m_curSector++;
    b9dc:	6063      	str	r3, [r4, #4]
}
    b9de:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    b9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    b9e6:	2301      	movs	r3, #1
    b9e8:	4819      	ldr	r0, [pc, #100]	; (ba50 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    b9ea:	f7ff fbc5 	bl	b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b9ee:	b938      	cbnz	r0, ba00 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    b9f0:	4919      	ldr	r1, [pc, #100]	; (ba58 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    b9f2:	200b      	movs	r0, #11
  m_errorLine = line;
    b9f4:	4b19      	ldr	r3, [pc, #100]	; (ba5c <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    b9f6:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    b9fa:	2500      	movs	r5, #0
  m_errorCode = code;
    b9fc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b9fe:	601a      	str	r2, [r3, #0]
}
    ba00:	4628      	mov	r0, r5
    ba02:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ba06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba0a:	f7ff f865 	bl	aad8 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    ba0e:	2800      	cmp	r0, #0
    ba10:	d0f6      	beq.n	ba00 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    ba12:	7a63      	ldrb	r3, [r4, #9]
    ba14:	2b01      	cmp	r3, #1
    ba16:	d1c5      	bne.n	b9a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    ba18:	6862      	ldr	r2, [r4, #4]
    ba1a:	42ba      	cmp	r2, r7
    ba1c:	d1c2      	bne.n	b9a4 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    ba1e:	e7d4      	b.n	b9ca <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    ba20:	f7ff f85a 	bl	aad8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ba24:	2800      	cmp	r0, #0
    ba26:	d0eb      	beq.n	ba00 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    ba28:	7a63      	ldrb	r3, [r4, #9]
    ba2a:	2b00      	cmp	r3, #0
    ba2c:	d0c5      	beq.n	b9ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    ba2e:	2101      	movs	r1, #1
    ba30:	4620      	mov	r0, r4
    ba32:	f7ff ff2b 	bl	b88c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    ba36:	2800      	cmp	r0, #0
    ba38:	d1bf      	bne.n	b9ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    ba3a:	4628      	mov	r0, r5
    ba3c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    ba44:	4620      	mov	r0, r4
    ba46:	4790      	blx	r2
    ba48:	2800      	cmp	r0, #0
    ba4a:	d0f6      	beq.n	ba3a <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    ba4c:	e7b5      	b.n	b9ba <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    ba4e:	bf00      	nop
    ba50:	113a0011 	.word	0x113a0011
    ba54:	0000b925 	.word	0x0000b925
    ba58:	20009058 	.word	0x20009058
    ba5c:	2003e3d8 	.word	0x2003e3d8
    ba60:	2004331f 	.word	0x2004331f

0000ba64 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba68:	7a04      	ldrb	r4, [r0, #8]
    ba6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    ba6e:	460f      	mov	r7, r1
    ba70:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    ba72:	f014 0401 	ands.w	r4, r4, #1
    ba76:	d01d      	beq.n	bab4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    ba78:	f012 0f03 	tst.w	r2, #3
    ba7c:	d006      	beq.n	ba8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    ba7e:	4668      	mov	r0, sp
    ba80:	4611      	mov	r1, r2
    ba82:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    ba86:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    ba88:	f001 f824 	bl	cad4 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    ba8c:	2301      	movs	r3, #1
    ba8e:	4642      	mov	r2, r8
    ba90:	4639      	mov	r1, r7
    ba92:	482c      	ldr	r0, [pc, #176]	; (bb44 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    ba94:	f7ff fb70 	bl	b178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    ba98:	4604      	mov	r4, r0
    ba9a:	b930      	cbnz	r0, baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    ba9c:	492a      	ldr	r1, [pc, #168]	; (bb48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    ba9e:	200d      	movs	r0, #13
  m_errorLine = line;
    baa0:	4b2a      	ldr	r3, [pc, #168]	; (bb4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    baa2:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    baa6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    baa8:	601a      	str	r2, [r3, #0]
}
    baaa:	4620      	mov	r0, r4
    baac:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    bab4:	4d26      	ldr	r5, [pc, #152]	; (bb50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    bab6:	4606      	mov	r6, r0
    bab8:	782b      	ldrb	r3, [r5, #0]
    baba:	bb2b      	cbnz	r3, bb08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    babc:	7a73      	ldrb	r3, [r6, #9]
    babe:	2b02      	cmp	r3, #2
    bac0:	d029      	beq.n	bb16 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    bac2:	6832      	ldr	r2, [r6, #0]
    bac4:	4923      	ldr	r1, [pc, #140]	; (bb54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    bac6:	6a12      	ldr	r2, [r2, #32]
    bac8:	428a      	cmp	r2, r1
    baca:	d136      	bne.n	bb3a <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    bacc:	782a      	ldrb	r2, [r5, #0]
    bace:	bb32      	cbnz	r2, bb1e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    bad0:	2b00      	cmp	r3, #0
    bad2:	d12b      	bne.n	bb2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    bad4:	6833      	ldr	r3, [r6, #0]
    bad6:	4639      	mov	r1, r7
    bad8:	4630      	mov	r0, r6
    bada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    badc:	4798      	blx	r3
    bade:	2800      	cmp	r0, #0
    bae0:	d0e3      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    bae2:	2302      	movs	r3, #2
      m_curSector = sector;
    bae4:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    bae6:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    bae8:	6833      	ldr	r3, [r6, #0]
    baea:	4641      	mov	r1, r8
    baec:	4630      	mov	r0, r6
    baee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    baf0:	4798      	blx	r3
    baf2:	2800      	cmp	r0, #0
    baf4:	d0d9      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    baf6:	6873      	ldr	r3, [r6, #4]
  return true;
    baf8:	4604      	mov	r4, r0
    m_curSector++;
    bafa:	3301      	adds	r3, #1
}
    bafc:	4620      	mov	r0, r4
    m_curSector++;
    bafe:	6073      	str	r3, [r6, #4]
}
    bb00:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb08:	f7fe ffe6 	bl	aad8 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    bb0c:	2800      	cmp	r0, #0
    bb0e:	d0cc      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    bb10:	7a73      	ldrb	r3, [r6, #9]
    bb12:	2b02      	cmp	r3, #2
    bb14:	d1d5      	bne.n	bac2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bb16:	6872      	ldr	r2, [r6, #4]
    bb18:	42ba      	cmp	r2, r7
    bb1a:	d1d2      	bne.n	bac2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bb1c:	e7e4      	b.n	bae8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    bb1e:	f7fe ffdb 	bl	aad8 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bb22:	2800      	cmp	r0, #0
    bb24:	d0c1      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    bb26:	7a73      	ldrb	r3, [r6, #9]
    bb28:	2b00      	cmp	r3, #0
    bb2a:	d0d3      	beq.n	bad4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    bb2c:	2101      	movs	r1, #1
    bb2e:	4630      	mov	r0, r6
    bb30:	f7ff feac 	bl	b88c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    bb34:	2800      	cmp	r0, #0
    bb36:	d0b8      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bb38:	e7cc      	b.n	bad4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    bb3a:	4630      	mov	r0, r6
    bb3c:	4790      	blx	r2
    bb3e:	2800      	cmp	r0, #0
    bb40:	d0b3      	beq.n	baaa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bb42:	e7c7      	b.n	bad4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    bb44:	183a0001 	.word	0x183a0001
    bb48:	20009058 	.word	0x20009058
    bb4c:	2003e3d8 	.word	0x2003e3d8
    bb50:	2004331f 	.word	0x2004331f
    bb54:	0000b925 	.word	0x0000b925

0000bb58 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    bb58:	f000 bf52 	b.w	ca00 <digitalWrite>

0000bb5c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    bb5c:	b430      	push	{r4, r5}
    bb5e:	b082      	sub	sp, #8
    bb60:	460c      	mov	r4, r1
    bb62:	ab02      	add	r3, sp, #8
    bb64:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    bb68:	7cc3      	ldrb	r3, [r0, #19]
    bb6a:	2b00      	cmp	r3, #0
    bb6c:	d030      	beq.n	bbd0 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    bb6e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    bb70:	7cc3      	ldrb	r3, [r0, #19]
    bb72:	07da      	lsls	r2, r3, #31
    bb74:	d508      	bpl.n	bb88 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    bb76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb7a:	6945      	ldr	r5, [r0, #20]
    bb7c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    bb80:	402a      	ands	r2, r5
    bb82:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    bb84:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    bb88:	079d      	lsls	r5, r3, #30
    bb8a:	d508      	bpl.n	bb9e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    bb8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb90:	6985      	ldr	r5, [r0, #24]
    bb92:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    bb96:	402a      	ands	r2, r5
    bb98:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    bb9a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    bb9e:	0759      	lsls	r1, r3, #29
    bba0:	d508      	bpl.n	bbb4 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    bba2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bba6:	69c5      	ldr	r5, [r0, #28]
    bba8:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    bbac:	402a      	ands	r2, r5
    bbae:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    bbb0:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    bbb4:	071a      	lsls	r2, r3, #28
    bbb6:	d508      	bpl.n	bbca <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    bbb8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bbbc:	6a05      	ldr	r5, [r0, #32]
    bbbe:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    bbc2:	402a      	ands	r2, r5
    bbc4:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    bbc6:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    bbca:	06db      	lsls	r3, r3, #27
    bbcc:	d42f      	bmi.n	bc2e <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    bbce:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    bbd0:	6883      	ldr	r3, [r0, #8]
    bbd2:	429c      	cmp	r4, r3
    bbd4:	d035      	beq.n	bc42 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    bbd6:	4b22      	ldr	r3, [pc, #136]	; (bc60 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    bbd8:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    bbda:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    bbdc:	4a21      	ldr	r2, [pc, #132]	; (bc64 <SPIClass::beginTransaction(SPISettings)+0x108>)
    bbde:	f3c3 1101 	ubfx	r1, r3, #4, #2
    bbe2:	f3c3 6382 	ubfx	r3, r3, #26, #3
    bbe6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    bbea:	3301      	adds	r3, #1
    bbec:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    bbf0:	b1cc      	cbz	r4, bc26 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    bbf2:	4294      	cmp	r4, r2
    bbf4:	d827      	bhi.n	bc46 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    bbf6:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    bbfa:	fbb2 f2f3 	udiv	r2, r2, r3
    bbfe:	4294      	cmp	r4, r2
    bc00:	d32c      	bcc.n	bc5c <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    bc02:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    bc06:	d320      	bcc.n	bc4a <SPIClass::beginTransaction(SPISettings)+0xee>
    bc08:	4c17      	ldr	r4, [pc, #92]	; (bc68 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bc0a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bc0c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bc0e:	2203      	movs	r2, #3
		port().CR = 0;
    bc10:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    bc12:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    bc14:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bc16:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    bc18:	2201      	movs	r2, #1
		port().CCR = _ccr;
    bc1a:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    bc1c:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    bc1e:	611a      	str	r2, [r3, #16]
	}
    bc20:	b002      	add	sp, #8
    bc22:	bc30      	pop	{r4, r5}
    bc24:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    bc26:	4299      	cmp	r1, r3
    bc28:	d3ef      	bcc.n	bc0a <SPIClass::beginTransaction(SPISettings)+0xae>
    bc2a:	1c53      	adds	r3, r2, #1
    bc2c:	e7e9      	b.n	bc02 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    bc2e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc32:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bc34:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    bc38:	400b      	ands	r3, r1
    bc3a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bc3c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    bc40:	e7c5      	b.n	bbce <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    bc42:	68c4      	ldr	r4, [r0, #12]
    bc44:	e7e2      	b.n	bc0c <SPIClass::beginTransaction(SPISettings)+0xb0>
    bc46:	2400      	movs	r4, #0
    bc48:	e7df      	b.n	bc0a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    bc4a:	2b02      	cmp	r3, #2
    bc4c:	d9fb      	bls.n	bc46 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    bc4e:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bc50:	085a      	lsrs	r2, r3, #1
    bc52:	0214      	lsls	r4, r2, #8
    bc54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    bc58:	431c      	orrs	r4, r3
    bc5a:	e7d6      	b.n	bc0a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    bc5c:	461a      	mov	r2, r3
    bc5e:	e7e4      	b.n	bc2a <SPIClass::beginTransaction(SPISettings)+0xce>
    bc60:	400fc000 	.word	0x400fc000
    bc64:	20000cf0 	.word	0x20000cf0
    bc68:	007f7fff 	.word	0x007f7fff

0000bc6c <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    bc6c:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    bc6e:	4603      	mov	r3, r0
    bc70:	f853 0b04 	ldr.w	r0, [r3], #4
    bc74:	e893 0006 	ldmia.w	r3, {r1, r2}
    bc78:	f7ff ff70 	bl	bb5c <SPIClass::beginTransaction(SPISettings)>
}
    bc7c:	bd08      	pop	{r3, pc}
    bc7e:	bf00      	nop

0000bc80 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bc80:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    bc82:	7cd3      	ldrb	r3, [r2, #19]
    bc84:	b313      	cbz	r3, bccc <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bc86:	07d8      	lsls	r0, r3, #31
    bc88:	d504      	bpl.n	bc94 <SdSpiArduinoDriver::deactivate()+0x14>
    bc8a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    bc8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc90:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bc94:	0799      	lsls	r1, r3, #30
    bc96:	d504      	bpl.n	bca2 <SdSpiArduinoDriver::deactivate()+0x22>
    bc98:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bc9a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bc9e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bca2:	0758      	lsls	r0, r3, #29
    bca4:	d504      	bpl.n	bcb0 <SdSpiArduinoDriver::deactivate()+0x30>
    bca6:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bca8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bcac:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bcb0:	0719      	lsls	r1, r3, #28
    bcb2:	d504      	bpl.n	bcbe <SdSpiArduinoDriver::deactivate()+0x3e>
    bcb4:	6b50      	ldr	r0, [r2, #52]	; 0x34
    bcb6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bcba:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bcbe:	06db      	lsls	r3, r3, #27
    bcc0:	d504      	bpl.n	bccc <SdSpiArduinoDriver::deactivate()+0x4c>
    bcc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
    bcc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bcc8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bccc:	4770      	bx	lr
    bcce:	bf00      	nop

0000bcd0 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    bcd0:	6800      	ldr	r0, [r0, #0]
    bcd2:	f000 b9f9 	b.w	c0c8 <SPIClass::end()>
    bcd6:	bf00      	nop

0000bcd8 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bcd8:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    bcda:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bcdc:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    bcde:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bce0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bce2:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bce6:	d0fb      	beq.n	bce0 <SdSpiArduinoDriver::receive()+0x8>
    bce8:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    bcea:	b2c0      	uxtb	r0, r0
    bcec:	4770      	bx	lr
    bcee:	bf00      	nop

0000bcf0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bcf0:	b530      	push	{r4, r5, lr}
    bcf2:	460c      	mov	r4, r1
    bcf4:	b083      	sub	sp, #12
    bcf6:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bcf8:	21ff      	movs	r1, #255	; 0xff
    bcfa:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bcfc:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    bcfe:	f004 ff77 	bl	10bf0 <memset>
		transfer(buf, buf, count);
    bd02:	6828      	ldr	r0, [r5, #0]
    bd04:	9b01      	ldr	r3, [sp, #4]
    bd06:	4622      	mov	r2, r4
    bd08:	4621      	mov	r1, r4
    bd0a:	f000 f9d9 	bl	c0c0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bd0e:	2000      	movs	r0, #0
    bd10:	b003      	add	sp, #12
    bd12:	bd30      	pop	{r4, r5, pc}

0000bd14 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bd14:	6803      	ldr	r3, [r0, #0]
    bd16:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bd18:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bd1a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bd1c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bd20:	d0fb      	beq.n	bd1a <SdSpiArduinoDriver::send(unsigned char)+0x6>
    bd22:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    bd24:	4770      	bx	lr
    bd26:	bf00      	nop

0000bd28 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bd28:	1e53      	subs	r3, r2, #1
    bd2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bd2e:	b530      	push	{r4, r5, lr}
    bd30:	4614      	mov	r4, r2
    bd32:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bd36:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    bd38:	d311      	bcc.n	bd5e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bd3a:	b16a      	cbz	r2, bd58 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bd3c:	6803      	ldr	r3, [r0, #0]
    bd3e:	1e48      	subs	r0, r1, #1
    bd40:	6819      	ldr	r1, [r3, #0]
    bd42:	1882      	adds	r2, r0, r2
		port().TDR = data;
    bd44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bd48:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bd4a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bd4c:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bd50:	d0fb      	beq.n	bd4a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    bd52:	4290      	cmp	r0, r2
    bd54:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    bd56:	d1f5      	bne.n	bd44 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    bd58:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bd5c:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    bd5e:	4668      	mov	r0, sp
    bd60:	f000 feb8 	bl	cad4 <memcpy>
		transfer(buf, buf, count);
    bd64:	466a      	mov	r2, sp
    bd66:	4623      	mov	r3, r4
    bd68:	6828      	ldr	r0, [r5, #0]
    bd6a:	4611      	mov	r1, r2
    bd6c:	f000 f9a8 	bl	c0c0 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    bd70:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    bd74:	bd30      	pop	{r4, r5, pc}
    bd76:	bf00      	nop

0000bd78 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    bd78:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    bd7a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    bd7c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    bd7e:	07dc      	lsls	r4, r3, #31
    bd80:	d51d      	bpl.n	bdbe <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    bd82:	4604      	mov	r4, r0
    bd84:	6840      	ldr	r0, [r0, #4]
    bd86:	f104 0210 	add.w	r2, r4, #16
    bd8a:	6803      	ldr	r3, [r0, #0]
    bd8c:	68e1      	ldr	r1, [r4, #12]
    bd8e:	9201      	str	r2, [sp, #4]
    bd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd92:	4798      	blx	r3
    bd94:	9a01      	ldr	r2, [sp, #4]
    bd96:	4605      	mov	r5, r0
    bd98:	b1a8      	cbz	r0, bdc6 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    bd9a:	7823      	ldrb	r3, [r4, #0]
    bd9c:	0799      	lsls	r1, r3, #30
    bd9e:	d508      	bpl.n	bdb2 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bda0:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    bda2:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    bda6:	4419      	add	r1, r3
    bda8:	6803      	ldr	r3, [r0, #0]
    bdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bdac:	4798      	blx	r3
    bdae:	b150      	cbz	r0, bdc6 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    bdb0:	7823      	ldrb	r3, [r4, #0]
    bdb2:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    bdb6:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    bdb8:	7023      	strb	r3, [r4, #0]
}
    bdba:	b003      	add	sp, #12
    bdbc:	bd30      	pop	{r4, r5, pc}
  return true;
    bdbe:	2501      	movs	r5, #1
}
    bdc0:	4628      	mov	r0, r5
    bdc2:	b003      	add	sp, #12
    bdc4:	bd30      	pop	{r4, r5, pc}
  return false;
    bdc6:	2500      	movs	r5, #0
}
    bdc8:	4628      	mov	r0, r5
    bdca:	b003      	add	sp, #12
    bdcc:	bd30      	pop	{r4, r5, pc}
    bdce:	bf00      	nop

0000bdd0 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    bdd2:	6843      	ldr	r3, [r0, #4]
    bdd4:	b30b      	cbz	r3, be1a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    bdd6:	68c3      	ldr	r3, [r0, #12]
    bdd8:	4604      	mov	r4, r0
    bdda:	460f      	mov	r7, r1
    bddc:	4615      	mov	r5, r2
    bdde:	428b      	cmp	r3, r1
    bde0:	d106      	bne.n	bdf0 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    bde2:	f810 3b10 	ldrb.w	r3, [r0], #16
    bde6:	f005 0503 	and.w	r5, r5, #3
    bdea:	432b      	orrs	r3, r5
    bdec:	7023      	strb	r3, [r4, #0]
}
    bdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    bdf0:	f7ff ffc2 	bl	bd78 <FsCache::sync()>
    bdf4:	b188      	cbz	r0, be1a <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    bdf6:	076b      	lsls	r3, r5, #29
    bdf8:	d505      	bpl.n	be06 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    bdfa:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    bdfe:	4630      	mov	r0, r6
    m_sector = sector;
    be00:	2300      	movs	r3, #0
    be02:	60e7      	str	r7, [r4, #12]
    be04:	e7ef      	b.n	bde6 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    be06:	6860      	ldr	r0, [r4, #4]
    be08:	f104 0610 	add.w	r6, r4, #16
    be0c:	4639      	mov	r1, r7
    be0e:	6803      	ldr	r3, [r0, #0]
    be10:	4632      	mov	r2, r6
    be12:	691b      	ldr	r3, [r3, #16]
    be14:	4798      	blx	r3
    be16:	2800      	cmp	r0, #0
    be18:	d1f1      	bne.n	bdfe <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    be1a:	2000      	movs	r0, #0
}
    be1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be1e:	bf00      	nop

0000be20 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    be20:	b510      	push	{r4, lr}
    be22:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    be24:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    be26:	b082      	sub	sp, #8
  if (ls) {
    be28:	b118      	cbz	r0, be32 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    be2a:	2300      	movs	r3, #0
    be2c:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    be2e:	b002      	add	sp, #8
    be30:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    be32:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    be36:	428b      	cmp	r3, r1
    be38:	d2f9      	bcs.n	be2e <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    be3a:	aa01      	add	r2, sp, #4
    be3c:	4618      	mov	r0, r3
    be3e:	f000 f867 	bl	bf10 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    be42:	b180      	cbz	r0, be66 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    be44:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    be46:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    be48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    be4c:	d201      	bcs.n	be52 <FsName::get16()+0x32>
      rtn = cp;
    be4e:	b298      	uxth	r0, r3
    be50:	e7ed      	b.n	be2e <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    be52:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    be54:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    be58:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    be5c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    be60:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    be62:	81a3      	strh	r3, [r4, #12]
    be64:	e7e3      	b.n	be2e <FsName::get16()+0xe>
  return 0XFFFF;
    be66:	f64f 70ff 	movw	r0, #65535	; 0xffff
    be6a:	e7e0      	b.n	be2e <FsName::get16()+0xe>

0000be6c <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    be6c:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    be6e:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    be72:	d805      	bhi.n	be80 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    be74:	b112      	cbz	r2, be7c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    be76:	460a      	mov	r2, r1
    be78:	f802 0b01 	strb.w	r0, [r2], #1
  }
    be7c:	4610      	mov	r0, r2
    be7e:	4770      	bx	lr
    } else if (cp < 0X800) {
    be80:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    be84:	d20f      	bcs.n	bea6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    be86:	2a01      	cmp	r2, #1
    be88:	d940      	bls.n	bf0c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    be8a:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be8e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    be92:	460a      	mov	r2, r1
    be94:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    be98:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    be9c:	f802 0b02 	strb.w	r0, [r2], #2
  }
    bea0:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bea2:	704b      	strb	r3, [r1, #1]
  }
    bea4:	4770      	bx	lr
    } else if (cp < 0X10000) {
    bea6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    beaa:	d216      	bcs.n	beda <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    beac:	2a02      	cmp	r2, #2
    beae:	d92d      	bls.n	bf0c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    beb0:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    beb4:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    beb8:	1cca      	adds	r2, r1, #3
    beba:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    bebe:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bec0:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bec4:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bec8:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    beca:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bece:	7048      	strb	r0, [r1, #1]
  }
    bed0:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    bed2:	f881 e000 	strb.w	lr, [r1]
  }
    bed6:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    beda:	2a03      	cmp	r2, #3
    bedc:	d916      	bls.n	bf0c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    bede:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    bee2:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bee6:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    beea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    beee:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    bef2:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    befa:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    befe:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bf00:	1d0a      	adds	r2, r1, #4
    bf02:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    bf04:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    bf08:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    bf0a:	e7b7      	b.n	be7c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    bf0c:	2200      	movs	r2, #0
    bf0e:	e7b5      	b.n	be7c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000bf10 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    bf10:	4288      	cmp	r0, r1
    bf12:	d23d      	bcs.n	bf90 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    bf14:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    bf16:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    bf18:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    bf1c:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    bf1e:	2800      	cmp	r0, #0
    bf20:	da2d      	bge.n	bf7e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    bf22:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    bf26:	28c0      	cmp	r0, #192	; 0xc0
    bf28:	d034      	beq.n	bf94 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    bf2a:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    bf2e:	28e0      	cmp	r0, #224	; 0xe0
    bf30:	d034      	beq.n	bf9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    bf32:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    bf36:	28f0      	cmp	r0, #240	; 0xf0
    bf38:	d126      	bne.n	bf88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    bf3a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    bf3e:	2004      	movs	r0, #4
    if ((str + n) > end) {
    bf40:	4418      	add	r0, r3
    bf42:	4288      	cmp	r0, r1
    bf44:	d820      	bhi.n	bf88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    bf46:	3301      	adds	r3, #1
      ch = str[i];
    bf48:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    bf4c:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    bf50:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    bf54:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    bf58:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    bf5c:	d114      	bne.n	bf88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    bf5e:	4283      	cmp	r3, r0
    bf60:	d1f2      	bne.n	bf48 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    bf62:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    bf66:	4b0f      	ldr	r3, [pc, #60]	; (bfa4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    bf68:	4299      	cmp	r1, r3
    bf6a:	d80d      	bhi.n	bf88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    bf6c:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    bf70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    bf74:	d308      	bcc.n	bf88 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    bf76:	6014      	str	r4, [r2, #0]
  }
    bf78:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf7c:	4770      	bx	lr
      return str + 1;
    bf7e:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    bf80:	6014      	str	r4, [r2, #0]
  }
    bf82:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf86:	4770      	bx	lr
      return nullptr;
    bf88:	2000      	movs	r0, #0
  }
    bf8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf8e:	4770      	bx	lr
      return nullptr;
    bf90:	2000      	movs	r0, #0
  }
    bf92:	4770      	bx	lr
      cp = ch & 0X1F;
    bf94:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    bf98:	2002      	movs	r0, #2
    bf9a:	e7d1      	b.n	bf40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    bf9c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    bfa0:	2003      	movs	r0, #3
    bfa2:	e7cd      	b.n	bf40 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    bfa4:	0010ff7f 	.word	0x0010ff7f

0000bfa8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    bfa8:	287e      	cmp	r0, #126	; 0x7e
    bfaa:	d93e      	bls.n	c02a <toUpcase(unsigned short)+0x82>
  size_t right = size;
    bfac:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    bfb0:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    bfb2:	b430      	push	{r4, r5}
    bfb4:	4c28      	ldr	r4, [pc, #160]	; (c058 <toUpcase(unsigned short)+0xb0>)
    bfb6:	e004      	b.n	bfc2 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    bfb8:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    bfbc:	4282      	cmp	r2, r0
    bfbe:	d820      	bhi.n	c002 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    bfc0:	460b      	mov	r3, r1
  while (right - left > 1) {
    bfc2:	ebac 0203 	sub.w	r2, ip, r3
    bfc6:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    bfc8:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    bfcc:	d8f4      	bhi.n	bfb8 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    bfce:	b29b      	uxth	r3, r3
    bfd0:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    bfd4:	4290      	cmp	r0, r2
    bfd6:	d216      	bcs.n	c006 <toUpcase(unsigned short)+0x5e>
    bfd8:	244b      	movs	r4, #75	; 0x4b
    bfda:	2300      	movs	r3, #0
    bfdc:	4d1f      	ldr	r5, [pc, #124]	; (c05c <toUpcase(unsigned short)+0xb4>)
    bfde:	e004      	b.n	bfea <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    bfe0:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    bfe4:	4282      	cmp	r2, r0
    bfe6:	d81e      	bhi.n	c026 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    bfe8:	460b      	mov	r3, r1
  while (right - left > 1) {
    bfea:	1ae2      	subs	r2, r4, r3
    bfec:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    bfee:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    bff2:	d8f5      	bhi.n	bfe0 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    bff4:	b29b      	uxth	r3, r3
    bff6:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    bffa:	4282      	cmp	r2, r0
    bffc:	d01f      	beq.n	c03e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    bffe:	bc30      	pop	{r4, r5}
    c000:	4770      	bx	lr
    mid = left + (right - left)/2;
    c002:	468c      	mov	ip, r1
    c004:	e7dd      	b.n	bfc2 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c006:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c00a:	1a82      	subs	r2, r0, r2
    c00c:	78e3      	ldrb	r3, [r4, #3]
    c00e:	429a      	cmp	r2, r3
    c010:	dae2      	bge.n	bfd8 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    c012:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    c016:	2b01      	cmp	r3, #1
    c018:	d016      	beq.n	c048 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    c01a:	b1d3      	cbz	r3, c052 <toUpcase(unsigned short)+0xaa>
    c01c:	b29b      	uxth	r3, r3
    c01e:	4403      	add	r3, r0
}
    c020:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    c022:	b298      	uxth	r0, r3
}
    c024:	4770      	bx	lr
    mid = left + (right - left)/2;
    c026:	460c      	mov	r4, r1
    c028:	e7df      	b.n	bfea <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    c02a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    c02e:	2b19      	cmp	r3, #25
    c030:	bf8c      	ite	hi
    c032:	2300      	movhi	r3, #0
    c034:	2301      	movls	r3, #1
    c036:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    c03a:	b298      	uxth	r0, r3
}
    c03c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c03e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c042:	8868      	ldrh	r0, [r5, #2]
}
    c044:	bc30      	pop	{r4, r5}
    c046:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    c048:	f002 0201 	and.w	r2, r2, #1
    c04c:	1a83      	subs	r3, r0, r2
    c04e:	b298      	uxth	r0, r3
    c050:	e7d5      	b.n	bffe <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    c052:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c056:	e7e2      	b.n	c01e <toUpcase(unsigned short)+0x76>
    c058:	200009b4 	.word	0x200009b4
    c05c:	200007e0 	.word	0x200007e0

0000c060 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    c060:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c062:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c064:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    c068:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c06a:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    c06c:	b1a3      	cbz	r3, c098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c06e:	b321      	cbz	r1, c0ba <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    c070:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    c074:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c076:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c078:	6f25      	ldr	r5, [r4, #112]	; 0x70
    c07a:	07af      	lsls	r7, r5, #30
    c07c:	d407      	bmi.n	c08e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    c07e:	4615      	mov	r5, r2
				count_read--;
    c080:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c082:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    c084:	b11a      	cbz	r2, c08e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c086:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    c08a:	462a      	mov	r2, r5
    c08c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    c08e:	6965      	ldr	r5, [r4, #20]
    c090:	07ed      	lsls	r5, r5, #31
    c092:	d5f1      	bpl.n	c078 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    c094:	2b00      	cmp	r3, #0
    c096:	d1ea      	bne.n	c06e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    c098:	b16e      	cbz	r6, c0b6 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    c09a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c09c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    c09e:	0789      	lsls	r1, r1, #30
    c0a0:	d4fa      	bmi.n	c098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    c0a2:	4611      	mov	r1, r2
			count_read--;
    c0a4:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c0a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    c0a8:	2a00      	cmp	r2, #0
    c0aa:	d0f5      	beq.n	c098 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c0ac:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    c0b0:	460a      	mov	r2, r1
	while (count_read) {
    c0b2:	2e00      	cmp	r6, #0
    c0b4:	d1f1      	bne.n	c09a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    c0b6:	bcf0      	pop	{r4, r5, r6, r7}
    c0b8:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c0ba:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    c0be:	e7d9      	b.n	c074 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000c0c0 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    c0c0:	b10b      	cbz	r3, c0c6 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    c0c2:	f7ff bfcd 	b.w	c060 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    c0c6:	4770      	bx	lr

0000c0c8 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c0c8:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    c0ca:	e9d3 1200 	ldrd	r1, r2, [r3]
    c0ce:	6809      	ldr	r1, [r1, #0]
    c0d0:	4211      	tst	r1, r2
    c0d2:	d100      	bne.n	c0d6 <SPIClass::end()+0xe>
    c0d4:	4770      	bx	lr
void SPIClass::end() {
    c0d6:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c0d8:	6802      	ldr	r2, [r0, #0]
    c0da:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    c0dc:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c0de:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    c0e0:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c0e2:	7c22      	ldrb	r2, [r4, #16]
    c0e4:	4413      	add	r3, r2
    c0e6:	7c18      	ldrb	r0, [r3, #16]
    c0e8:	f000 fcb4 	bl	ca54 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    c0ec:	7c62      	ldrb	r2, [r4, #17]
    c0ee:	6863      	ldr	r3, [r4, #4]
    c0f0:	2105      	movs	r1, #5
    c0f2:	4413      	add	r3, r2
    c0f4:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    c0f8:	f000 fcac 	bl	ca54 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c0fc:	6863      	ldr	r3, [r4, #4]
    c0fe:	7ca2      	ldrb	r2, [r4, #18]
    c100:	2105      	movs	r1, #5
    c102:	4413      	add	r3, r2
	}
}
    c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c108:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    c10c:	f000 bca2 	b.w	ca54 <pinMode>

0000c110 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c110:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c112:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c114:	b921      	cbnz	r1, c120 <DMAChannel::begin(bool)+0x10>
    c116:	6803      	ldr	r3, [r0, #0]
    c118:	b113      	cbz	r3, c120 <DMAChannel::begin(bool)+0x10>
    c11a:	7902      	ldrb	r2, [r0, #4]
    c11c:	2a0f      	cmp	r2, #15
    c11e:	d93b      	bls.n	c198 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c120:	4c24      	ldr	r4, [pc, #144]	; (c1b4 <DMAChannel::begin(bool)+0xa4>)
    c122:	8821      	ldrh	r1, [r4, #0]
{
    c124:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c126:	fa41 f203 	asr.w	r2, r1, r3
    c12a:	f012 0201 	ands.w	r2, r2, #1
    c12e:	d008      	beq.n	c142 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c130:	3301      	adds	r3, #1
    c132:	2b10      	cmp	r3, #16
    c134:	d1f7      	bne.n	c126 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c136:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    c138:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c13a:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c13c:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c13e:	bc30      	pop	{r4, r5}
    c140:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c142:	f04f 0c01 	mov.w	ip, #1
    c146:	fa0c fc03 	lsl.w	ip, ip, r3
    c14a:	ea41 010c 	orr.w	r1, r1, ip
    c14e:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    c150:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c152:	4919      	ldr	r1, [pc, #100]	; (c1b8 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c154:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c158:	4c18      	ldr	r4, [pc, #96]	; (c1bc <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c15a:	4419      	add	r1, r3
	channel = ch;
    c15c:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c160:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c162:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    c164:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    c168:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c16a:	f240 4482 	movw	r4, #1154	; 0x482
    c16e:	4914      	ldr	r1, [pc, #80]	; (c1c0 <DMAChannel::begin(bool)+0xb0>)
    c170:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c172:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c176:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c17a:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c17e:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c182:	6003      	str	r3, [r0, #0]
}
    c184:	bc30      	pop	{r4, r5}
	*p++ = 0;
    c186:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    c18a:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c18e:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c192:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    c196:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c198:	4c06      	ldr	r4, [pc, #24]	; (c1b4 <DMAChannel::begin(bool)+0xa4>)
    c19a:	8821      	ldrh	r1, [r4, #0]
    c19c:	fa41 f502 	asr.w	r5, r1, r2
    c1a0:	07ed      	lsls	r5, r5, #31
    c1a2:	d5bf      	bpl.n	c124 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c1a4:	4d04      	ldr	r5, [pc, #16]	; (c1b8 <DMAChannel::begin(bool)+0xa8>)
    c1a6:	4415      	add	r5, r2
    c1a8:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    c1ac:	d1ba      	bne.n	c124 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c1ae:	b662      	cpsie	i
		return;
    c1b0:	e7c5      	b.n	c13e <DMAChannel::begin(bool)+0x2e>
    c1b2:	bf00      	nop
    c1b4:	2004330c 	.word	0x2004330c
    c1b8:	02007480 	.word	0x02007480
    c1bc:	400fc000 	.word	0x400fc000
    c1c0:	400e8000 	.word	0x400e8000

0000c1c4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c1c4:	7903      	ldrb	r3, [r0, #4]
    c1c6:	2b0f      	cmp	r3, #15
    c1c8:	d811      	bhi.n	c1ee <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    c1ca:	4a09      	ldr	r2, [pc, #36]	; (c1f0 <DMAChannel::release()+0x2c>)
    c1cc:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    c1ce:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c1d0:	4908      	ldr	r1, [pc, #32]	; (c1f4 <DMAChannel::release()+0x30>)
    c1d2:	2201      	movs	r2, #1
    c1d4:	f890 c004 	ldrb.w	ip, [r0, #4]
    c1d8:	880b      	ldrh	r3, [r1, #0]
    c1da:	fa02 f20c 	lsl.w	r2, r2, ip
    c1de:	ea23 0302 	bic.w	r3, r3, r2
    c1e2:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    c1e4:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c1e6:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    c1e8:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    c1ea:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    c1ec:	6003      	str	r3, [r0, #0]
}
    c1ee:	4770      	bx	lr
    c1f0:	400e8000 	.word	0x400e8000
    c1f4:	2004330c 	.word	0x2004330c

0000c1f8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c1f8:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c1fa:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c1fe:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c200:	4c0c      	ldr	r4, [pc, #48]	; (c234 <EventResponder::runFromInterrupt()+0x3c>)
    c202:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c204:	b180      	cbz	r0, c228 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    c206:	4e0c      	ldr	r6, [pc, #48]	; (c238 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    c208:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    c20a:	6943      	ldr	r3, [r0, #20]
    c20c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    c20e:	b173      	cbz	r3, c22e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    c210:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c212:	b902      	cbnz	r2, c216 <EventResponder::runFromInterrupt()+0x1e>
    c214:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c216:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    c218:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    c21a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c21c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    c220:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    c222:	6820      	ldr	r0, [r4, #0]
		if (first) {
    c224:	2800      	cmp	r0, #0
    c226:	d1f0      	bne.n	c20a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    c228:	b902      	cbnz	r2, c22c <EventResponder::runFromInterrupt()+0x34>
    c22a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    c22c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    c22e:	6033      	str	r3, [r6, #0]
    c230:	e7ef      	b.n	c212 <EventResponder::runFromInterrupt()+0x1a>
    c232:	bf00      	nop
    c234:	200422ec 	.word	0x200422ec
    c238:	200422e8 	.word	0x200422e8

0000c23c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c23c:	f7ff bfdc 	b.w	c1f8 <EventResponder::runFromInterrupt()>

0000c240 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c240:	4904      	ldr	r1, [pc, #16]	; (c254 <systick_isr+0x14>)
	systick_millis_count++;
    c242:	4a05      	ldr	r2, [pc, #20]	; (c258 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    c244:	6849      	ldr	r1, [r1, #4]
    c246:	4b05      	ldr	r3, [pc, #20]	; (c25c <systick_isr+0x1c>)
    c248:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    c24a:	6813      	ldr	r3, [r2, #0]
    c24c:	3301      	adds	r3, #1
    c24e:	6013      	str	r3, [r2, #0]
}
    c250:	4770      	bx	lr
    c252:	bf00      	nop
    c254:	e0001000 	.word	0xe0001000
    c258:	200432dc 	.word	0x200432dc
    c25c:	200432d8 	.word	0x200432d8

0000c260 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c260:	4608      	mov	r0, r1
    c262:	f002 b9a1 	b.w	e5a8 <usb_serial_putchar>
    c266:	bf00      	nop

0000c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c268:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c26a:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    c26c:	bf08      	it	eq
    c26e:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c270:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    c272:	b391      	cbz	r1, c2da <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    c274:	f04f 0e21 	mov.w	lr, #33	; 0x21
    c278:	e001      	b.n	c27e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c27a:	fa5f fe86 	uxtb.w	lr, r6
    c27e:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    c282:	fbb1 f5f2 	udiv	r5, r1, r2
    c286:	fb02 1415 	mls	r4, r2, r5, r1
    c28a:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c28e:	2c09      	cmp	r4, #9
    c290:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    c294:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    c298:	bf98      	it	ls
    c29a:	fa5f f48c 	uxtbls.w	r4, ip
    c29e:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    c2a2:	bf88      	it	hi
    c2a4:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    c2a6:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c2a8:	44ec      	add	ip, sp
			n /= base;
    c2aa:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c2ac:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    c2b0:	d2e3      	bcs.n	c27a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    c2b2:	b14b      	cbz	r3, c2c8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    c2b4:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    c2b8:	222d      	movs	r2, #45	; 0x2d
		i--;
    c2ba:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    c2be:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    c2c2:	446b      	add	r3, sp
    c2c4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c2c8:	6803      	ldr	r3, [r0, #0]
    c2ca:	a901      	add	r1, sp, #4
    c2cc:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    c2d0:	685b      	ldr	r3, [r3, #4]
    c2d2:	4471      	add	r1, lr
    c2d4:	4798      	blx	r3
}
    c2d6:	b00a      	add	sp, #40	; 0x28
    c2d8:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    c2da:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c2dc:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c2e0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    c2e4:	e7e5      	b.n	c2b2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    c2e6:	bf00      	nop

0000c2e8 <Print::print(long)>:
	if (n < 0) {
    c2e8:	2900      	cmp	r1, #0
    c2ea:	db03      	blt.n	c2f4 <Print::print(long)+0xc>
	uint8_t sign=0;
    c2ec:	2300      	movs	r3, #0
	if (base == 0) {
    c2ee:	220a      	movs	r2, #10
    c2f0:	f7ff bfba 	b.w	c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    c2f4:	4249      	negs	r1, r1
		sign = '-';
    c2f6:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    c2f8:	220a      	movs	r2, #10
    c2fa:	f7ff bfb5 	b.w	c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c2fe:	bf00      	nop

0000c300 <Print::println()>:
{
    c300:	b500      	push	{lr}
	return write(buf, 2);
    c302:	6803      	ldr	r3, [r0, #0]
{
    c304:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    c306:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    c30a:	2202      	movs	r2, #2
    c30c:	a901      	add	r1, sp, #4
    c30e:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    c310:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    c314:	4798      	blx	r3
}
    c316:	b003      	add	sp, #12
    c318:	f85d fb04 	ldr.w	pc, [sp], #4

0000c31c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c31c:	4b05      	ldr	r3, [pc, #20]	; (c334 <_write+0x18>)
    c31e:	2802      	cmp	r0, #2
    c320:	bf88      	it	hi
    c322:	4603      	movhi	r3, r0
{
    c324:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c326:	681c      	ldr	r4, [r3, #0]
    c328:	4618      	mov	r0, r3
    c32a:	6863      	ldr	r3, [r4, #4]
}
    c32c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c330:	4718      	bx	r3
    c332:	bf00      	nop
    c334:	20008a54 	.word	0x20008a54

0000c338 <Print::printf(char const*, ...)>:
{
    c338:	b40e      	push	{r1, r2, r3}
    c33a:	b500      	push	{lr}
    c33c:	b082      	sub	sp, #8
    c33e:	aa03      	add	r2, sp, #12
    c340:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c344:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c346:	f004 fb67 	bl	10a18 <vdprintf>
}
    c34a:	b002      	add	sp, #8
    c34c:	f85d eb04 	ldr.w	lr, [sp], #4
    c350:	b003      	add	sp, #12
    c352:	4770      	bx	lr

0000c354 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    c354:	b95a      	cbnz	r2, c36e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    c356:	6803      	ldr	r3, [r0, #0]
    c358:	b2c9      	uxtb	r1, r1
    c35a:	4a07      	ldr	r2, [pc, #28]	; (c378 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    c35c:	681b      	ldr	r3, [r3, #0]
    c35e:	4293      	cmp	r3, r2
{
    c360:	b500      	push	{lr}
    c362:	d106      	bne.n	c372 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    c364:	4608      	mov	r0, r1
}
    c366:	f85d eb04 	ldr.w	lr, [sp], #4
    c36a:	f002 b91d 	b.w	e5a8 <usb_serial_putchar>
    c36e:	f7ff bf7b 	b.w	c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c372:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    c376:	4718      	bx	r3
    c378:	0000c261 	.word	0x0000c261

0000c37c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c37c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c380:	b093      	sub	sp, #76	; 0x4c
    c382:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    c386:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c38a:	2f01      	cmp	r7, #1
    c38c:	d944      	bls.n	c418 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    c38e:	461c      	mov	r4, r3
	if (n == 0) {
    c390:	4680      	mov	r8, r0
    c392:	4615      	mov	r5, r2
    c394:	ea52 0304 	orrs.w	r3, r2, r4
    c398:	d039      	beq.n	c40e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    c39a:	2641      	movs	r6, #65	; 0x41
    c39c:	e001      	b.n	c3a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    c39e:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    c3a2:	4621      	mov	r1, r4
    c3a4:	4628      	mov	r0, r5
    c3a6:	463a      	mov	r2, r7
    c3a8:	2300      	movs	r3, #0
    c3aa:	f002 fb23 	bl	e9f4 <__aeabi_uldivmod>
    c3ae:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c3b2:	f106 0248 	add.w	r2, r6, #72	; 0x48
    c3b6:	f1bc 0f09 	cmp.w	ip, #9
    c3ba:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    c3be:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    c3c2:	446a      	add	r2, sp
    c3c4:	b2db      	uxtb	r3, r3
    c3c6:	bf98      	it	ls
    c3c8:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    c3cc:	42bd      	cmp	r5, r7
			i--;
    c3ce:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    c3d2:	4605      	mov	r5, r0
			if (n == 0) break;
    c3d4:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c3d8:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    c3dc:	460c      	mov	r4, r1
			if (n == 0) break;
    c3de:	d2de      	bcs.n	c39e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    c3e0:	f1b9 0f00 	cmp.w	r9, #0
    c3e4:	d007      	beq.n	c3f6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    c3e6:	3e01      	subs	r6, #1
		buf[i] = '-';
    c3e8:	222d      	movs	r2, #45	; 0x2d
		i--;
    c3ea:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    c3ec:	f106 0348 	add.w	r3, r6, #72	; 0x48
    c3f0:	446b      	add	r3, sp
    c3f2:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c3f6:	f8d8 3000 	ldr.w	r3, [r8]
    c3fa:	a901      	add	r1, sp, #4
    c3fc:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    c400:	4640      	mov	r0, r8
    c402:	685b      	ldr	r3, [r3, #4]
    c404:	4431      	add	r1, r6
    c406:	4798      	blx	r3
}
    c408:	b013      	add	sp, #76	; 0x4c
    c40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    c40e:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c410:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c412:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    c416:	e7e3      	b.n	c3e0 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    c418:	2000      	movs	r0, #0
}
    c41a:	b013      	add	sp, #76	; 0x4c
    c41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c420 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c420:	eeb4 0b40 	vcmp.f64	d0, d0
{
    c424:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    c426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    c42a:	4605      	mov	r5, r0
    c42c:	ed2d 8b02 	vpush	{d8}
    c430:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    c432:	d67c      	bvs.n	c52e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c434:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c438:	ed9f 6b47 	vldr	d6, [pc, #284]	; c558 <Print::printFloat(double, unsigned char)+0x138>
    c43c:	eeb4 7b46 	vcmp.f64	d7, d6
    c440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c444:	dc6b      	bgt.n	c51e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c446:	ed9f 7b46 	vldr	d7, [pc, #280]	; c560 <Print::printFloat(double, unsigned char)+0x140>
    c44a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c452:	dc5a      	bgt.n	c50a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c454:	ed9f 7b44 	vldr	d7, [pc, #272]	; c568 <Print::printFloat(double, unsigned char)+0x148>
    c458:	eeb4 0bc7 	vcmpe.f64	d0, d7
    c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c460:	d453      	bmi.n	c50a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    c462:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    c466:	460c      	mov	r4, r1
    c468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c46c:	d45b      	bmi.n	c526 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    c46e:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    c470:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    c474:	2c00      	cmp	r4, #0
    c476:	d05e      	beq.n	c536 <Print::printFloat(double, unsigned char)+0x116>
    c478:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    c47c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; c570 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    c480:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    c484:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    c488:	fa5f f28c 	uxtb.w	r2, ip
    c48c:	42a2      	cmp	r2, r4
    c48e:	d3f7      	bcc.n	c480 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    c490:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    c494:	220a      	movs	r2, #10
    c496:	4628      	mov	r0, r5
    c498:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    c49c:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    c4a0:	ee17 1a90 	vmov	r1, s15
    c4a4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    c4a8:	f7ff fede 	bl	c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c4ac:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    c4ae:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    c4b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    c4b6:	4606      	mov	r6, r0
		buf[0] = '.';
    c4b8:	bf28      	it	cs
    c4ba:	240f      	movcs	r4, #15
    c4bc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c4c0:	f10d 0309 	add.w	r3, sp, #9
    c4c4:	aa02      	add	r2, sp, #8
    c4c6:	1e61      	subs	r1, r4, #1
    c4c8:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    c4cc:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    c4d0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c4d4:	edcd 7a01 	vstr	s15, [sp, #4]
    c4d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    c4dc:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    c4e0:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    c4e2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    c4e6:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    c4ea:	4291      	cmp	r1, r2
			remainder -= n; 
    c4ec:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    c4f0:	d1ec      	bne.n	c4cc <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    c4f2:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    c4f4:	3401      	adds	r4, #1
		count += write(buf, count);
    c4f6:	a902      	add	r1, sp, #8
    c4f8:	4628      	mov	r0, r5
    c4fa:	685b      	ldr	r3, [r3, #4]
    c4fc:	b2e2      	uxtb	r2, r4
    c4fe:	4798      	blx	r3
	}
	return count;
}
    c500:	4630      	mov	r0, r6
    c502:	b006      	add	sp, #24
    c504:	ecbd 8b02 	vpop	{d8}
    c508:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    c50a:	682b      	ldr	r3, [r5, #0]
    c50c:	2203      	movs	r2, #3
    c50e:	491a      	ldr	r1, [pc, #104]	; (c578 <Print::printFloat(double, unsigned char)+0x158>)
    c510:	685b      	ldr	r3, [r3, #4]
    c512:	b006      	add	sp, #24
    c514:	ecbd 8b02 	vpop	{d8}
    c518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c51c:	4718      	bx	r3
    c51e:	6803      	ldr	r3, [r0, #0]
    c520:	2203      	movs	r2, #3
    c522:	4916      	ldr	r1, [pc, #88]	; (c57c <Print::printFloat(double, unsigned char)+0x15c>)
    c524:	e7f4      	b.n	c510 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    c526:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    c52a:	2301      	movs	r3, #1
    c52c:	e7a0      	b.n	c470 <Print::printFloat(double, unsigned char)+0x50>
    c52e:	6803      	ldr	r3, [r0, #0]
    c530:	2203      	movs	r2, #3
    c532:	4913      	ldr	r1, [pc, #76]	; (c580 <Print::printFloat(double, unsigned char)+0x160>)
    c534:	e7ec      	b.n	c510 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    c536:	ee30 0b07 	vadd.f64	d0, d0, d7
    c53a:	220a      	movs	r2, #10
    c53c:	4628      	mov	r0, r5
    c53e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    c542:	ee17 1a90 	vmov	r1, s15
}
    c546:	b006      	add	sp, #24
    c548:	ecbd 8b02 	vpop	{d8}
    c54c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c550:	f7ff be8a 	b.w	c268 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c554:	f3af 8000 	nop.w
    c558:	ffffffff 	.word	0xffffffff
    c55c:	7fefffff 	.word	0x7fefffff
    c560:	e0000000 	.word	0xe0000000
    c564:	41efffff 	.word	0x41efffff
    c568:	e0000000 	.word	0xe0000000
    c56c:	c1efffff 	.word	0xc1efffff
    c570:	9999999a 	.word	0x9999999a
    c574:	3fb99999 	.word	0x3fb99999
    c578:	20000b30 	.word	0x20000b30
    c57c:	20000b2c 	.word	0x20000b2c
    c580:	20000b28 	.word	0x20000b28

0000c584 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c584:	f002 b800 	b.w	e588 <usb_serial_getchar>

0000c588 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c588:	f001 bf98 	b.w	e4bc <usb_serial_peekchar>

0000c58c <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c58c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    c590:	b392      	cbz	r2, c5f8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    c592:	4617      	mov	r7, r2
    c594:	fab3 f283 	clz	r2, r3
    c598:	0952      	lsrs	r2, r2, #5
    c59a:	b36b      	cbz	r3, c5f8 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    c59c:	f1b3 0801 	subs.w	r8, r3, #1
    c5a0:	d025      	beq.n	c5ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    c5a2:	eb07 0a08 	add.w	sl, r7, r8
    c5a6:	4683      	mov	fp, r0
    c5a8:	4689      	mov	r9, r1
	size_t index = 0;
    c5aa:	4690      	mov	r8, r2
    c5ac:	4c17      	ldr	r4, [pc, #92]	; (c60c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    c5ae:	4e18      	ldr	r6, [pc, #96]	; (c610 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    c5b0:	6825      	ldr	r5, [r4, #0]
    c5b2:	e00b      	b.n	c5cc <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    c5b4:	f001 ffe8 	bl	e588 <usb_serial_getchar>
    if (c >= 0) return c;
    c5b8:	2800      	cmp	r0, #0
    c5ba:	da10      	bge.n	c5de <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    c5bc:	f002 f888 	bl	e6d0 <yield>
    c5c0:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    c5c2:	f8db 2008 	ldr.w	r2, [fp, #8]
    c5c6:	1b5b      	subs	r3, r3, r5
    c5c8:	4293      	cmp	r3, r2
    c5ca:	d21a      	bcs.n	c602 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    c5cc:	f8db 3000 	ldr.w	r3, [fp]
    c5d0:	695b      	ldr	r3, [r3, #20]
    c5d2:	42b3      	cmp	r3, r6
    c5d4:	d0ee      	beq.n	c5b4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    c5d6:	4658      	mov	r0, fp
    c5d8:	4798      	blx	r3
    if (c >= 0) return c;
    c5da:	2800      	cmp	r0, #0
    c5dc:	dbee      	blt.n	c5bc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    c5de:	4548      	cmp	r0, r9
    c5e0:	d005      	beq.n	c5ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    c5e2:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    c5e6:	45ba      	cmp	sl, r7
		index++;
    c5e8:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    c5ec:	d1e0      	bne.n	c5b0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    c5ee:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    c5f0:	4640      	mov	r0, r8
	*buffer = 0;
    c5f2:	703b      	strb	r3, [r7, #0]
}
    c5f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    c5f8:	f04f 0800 	mov.w	r8, #0
}
    c5fc:	4640      	mov	r0, r8
    c5fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c602:	2301      	movs	r3, #1
    c604:	f88b 300c 	strb.w	r3, [fp, #12]
    c608:	e7f1      	b.n	c5ee <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    c60a:	bf00      	nop
    c60c:	200432dc 	.word	0x200432dc
    c610:	0000c585 	.word	0x0000c585

0000c614 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    c614:	49a2      	ldr	r1, [pc, #648]	; (c8a0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c616:	4ba3      	ldr	r3, [pc, #652]	; (c8a4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    c618:	4288      	cmp	r0, r1
{
    c61a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    c61e:	4ca2      	ldr	r4, [pc, #648]	; (c8a8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    c620:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    c622:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    c624:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    c628:	d91b      	bls.n	c662 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    c62a:	4ba0      	ldr	r3, [pc, #640]	; (c8ac <set_arm_clock+0x298>)
    c62c:	4298      	cmp	r0, r3
    c62e:	f240 8102 	bls.w	c836 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    c632:	1ac3      	subs	r3, r0, r3
    c634:	499e      	ldr	r1, [pc, #632]	; (c8b0 <set_arm_clock+0x29c>)
    c636:	0a1b      	lsrs	r3, r3, #8
    c638:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c63c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    c640:	09db      	lsrs	r3, r3, #7
    c642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c646:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c64a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c64e:	428b      	cmp	r3, r1
    c650:	bf28      	it	cs
    c652:	460b      	movcs	r3, r1
    c654:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    c658:	4b96      	ldr	r3, [pc, #600]	; (c8b4 <set_arm_clock+0x2a0>)
    c65a:	fba3 3707 	umull	r3, r7, r3, r7
    c65e:	08ff      	lsrs	r7, r7, #3
    c660:	e004      	b.n	c66c <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    c662:	4f95      	ldr	r7, [pc, #596]	; (c8b8 <set_arm_clock+0x2a4>)
    c664:	42b8      	cmp	r0, r7
    c666:	bf8c      	ite	hi
    c668:	270e      	movhi	r7, #14
    c66a:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c66c:	498d      	ldr	r1, [pc, #564]	; (c8a4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c66e:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c672:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c676:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    c678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    c67c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    c680:	d20c      	bcs.n	c69c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c682:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c686:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c68a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    c68e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c692:	680b      	ldr	r3, [r1, #0]
    c694:	2b00      	cmp	r3, #0
    c696:	dafc      	bge.n	c692 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c698:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    c69c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    c6a0:	d124      	bne.n	c6ec <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    c6a2:	4986      	ldr	r1, [pc, #536]	; (c8bc <set_arm_clock+0x2a8>)
    c6a4:	690c      	ldr	r4, [r1, #16]
    c6a6:	4986      	ldr	r1, [pc, #536]	; (c8c0 <set_arm_clock+0x2ac>)
    c6a8:	43a1      	bics	r1, r4
    c6aa:	f000 80ea 	beq.w	c882 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    c6ae:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    c6b2:	4634      	mov	r4, r6
    c6b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    c6b8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    c6bc:	d004      	beq.n	c6c8 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    c6be:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    c6c2:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    c6c4:	4b77      	ldr	r3, [pc, #476]	; (c8a4 <set_arm_clock+0x290>)
    c6c6:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    c6c8:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    c6cc:	d007      	beq.n	c6de <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    c6ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    c6d2:	4974      	ldr	r1, [pc, #464]	; (c8a4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    c6d4:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    c6d6:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    c6d8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    c6da:	071a      	lsls	r2, r3, #28
    c6dc:	d4fc      	bmi.n	c6d8 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    c6de:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    c6e2:	4a70      	ldr	r2, [pc, #448]	; (c8a4 <set_arm_clock+0x290>)
    c6e4:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c6e6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c6e8:	069b      	lsls	r3, r3, #26
    c6ea:	d4fc      	bmi.n	c6e6 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    c6ec:	4c75      	ldr	r4, [pc, #468]	; (c8c4 <set_arm_clock+0x2b0>)
    c6ee:	42a0      	cmp	r0, r4
    c6f0:	f200 80ce 	bhi.w	c890 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    c6f4:	f04f 0c01 	mov.w	ip, #1
    c6f8:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    c6fa:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    c6fc:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    c700:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    c704:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c708:	42a2      	cmp	r2, r4
    c70a:	d818      	bhi.n	c73e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    c70c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    c710:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    c714:	f040 808d 	bne.w	c832 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    c718:	f1bc 0f04 	cmp.w	ip, #4
    c71c:	f200 8091 	bhi.w	c842 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    c720:	180a      	adds	r2, r1, r0
    c722:	42a2      	cmp	r2, r4
    c724:	f200 80a4 	bhi.w	c870 <set_arm_clock+0x25c>
    c728:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    c72c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    c72e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c732:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    c736:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c73a:	42a2      	cmp	r2, r4
    c73c:	d9e6      	bls.n	c70c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c73e:	f10c 31ff 	add.w	r1, ip, #4294967295
    c742:	028c      	lsls	r4, r1, #10
    c744:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c748:	485f      	ldr	r0, [pc, #380]	; (c8c8 <set_arm_clock+0x2b4>)
    c74a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    c74c:	4a5f      	ldr	r2, [pc, #380]	; (c8cc <set_arm_clock+0x2b8>)
    c74e:	4290      	cmp	r0, r2
    c750:	d97f      	bls.n	c852 <set_arm_clock+0x23e>
    c752:	f8df a1a4 	ldr.w	sl, [pc, #420]	; c8f8 <set_arm_clock+0x2e4>
    c756:	226c      	movs	r2, #108	; 0x6c
    c758:	485d      	ldr	r0, [pc, #372]	; (c8d0 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c75a:	4d58      	ldr	r5, [pc, #352]	; (c8bc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    c75c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c760:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    c764:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    c768:	f8df c190 	ldr.w	ip, [pc, #400]	; c8fc <set_arm_clock+0x2e8>
    c76c:	ea0e 0c0c 	and.w	ip, lr, ip
    c770:	45d4      	cmp	ip, sl
    c772:	d009      	beq.n	c788 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    c774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    c778:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    c77c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    c780:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    c782:	682a      	ldr	r2, [r5, #0]
    c784:	2a00      	cmp	r2, #0
    c786:	dafc      	bge.n	c782 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    c788:	4a46      	ldr	r2, [pc, #280]	; (c8a4 <set_arm_clock+0x290>)
    c78a:	6915      	ldr	r5, [r2, #16]
    c78c:	f005 0507 	and.w	r5, r5, #7
    c790:	429d      	cmp	r5, r3
    c792:	d003      	beq.n	c79c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    c794:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    c796:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c798:	03dd      	lsls	r5, r3, #15
    c79a:	d4fc      	bmi.n	c796 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c79c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    c7a0:	d009      	beq.n	c7b6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    c7a2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c7a6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    c7aa:	4a3e      	ldr	r2, [pc, #248]	; (c8a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    c7ac:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    c7ae:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    c7b0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c7b2:	0799      	lsls	r1, r3, #30
    c7b4:	d4fc      	bmi.n	c7b0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    c7b6:	4947      	ldr	r1, [pc, #284]	; (c8d4 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    c7b8:	4a47      	ldr	r2, [pc, #284]	; (c8d8 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    c7ba:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    c7bc:	4291      	cmp	r1, r2
    c7be:	d83c      	bhi.n	c83a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    c7c0:	4b46      	ldr	r3, [pc, #280]	; (c8dc <set_arm_clock+0x2c8>)
    c7c2:	09c9      	lsrs	r1, r1, #7
    c7c4:	fba3 3101 	umull	r3, r1, r3, r1
    c7c8:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    c7ca:	1e4b      	subs	r3, r1, #1
    c7cc:	021b      	lsls	r3, r3, #8
    c7ce:	ea86 0203 	eor.w	r2, r6, r3
    c7d2:	f412 7f40 	tst.w	r2, #768	; 0x300
    c7d6:	d006      	beq.n	c7e6 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    c7d8:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c7dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    c7e0:	4a30      	ldr	r2, [pc, #192]	; (c8a4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    c7e2:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    c7e4:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    c7e6:	4a2f      	ldr	r2, [pc, #188]	; (c8a4 <set_arm_clock+0x290>)
    c7e8:	6953      	ldr	r3, [r2, #20]
    c7ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    c7ee:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    c7f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c7f2:	069b      	lsls	r3, r3, #26
    c7f4:	d4fc      	bmi.n	c7f0 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    c7f6:	4b3a      	ldr	r3, [pc, #232]	; (c8e0 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c7f8:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    c7fa:	fba3 2300 	umull	r2, r3, r3, r0
    c7fe:	f04f 32ff 	mov.w	r2, #4294967295
    c802:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    c806:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    c80a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    c80e:	4a35      	ldr	r2, [pc, #212]	; (c8e4 <set_arm_clock+0x2d0>)
    c810:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    c812:	4a35      	ldr	r2, [pc, #212]	; (c8e8 <set_arm_clock+0x2d4>)
    c814:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    c816:	4a35      	ldr	r2, [pc, #212]	; (c8ec <set_arm_clock+0x2d8>)
    c818:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    c81a:	d208      	bcs.n	c82e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    c81c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    c820:	4a21      	ldr	r2, [pc, #132]	; (c8a8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    c822:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    c826:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    c828:	6813      	ldr	r3, [r2, #0]
    c82a:	2b00      	cmp	r3, #0
    c82c:	dafc      	bge.n	c828 <set_arm_clock+0x214>
	}

	return frequency;
}
    c82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c832:	4673      	mov	r3, lr
    c834:	e762      	b.n	c6fc <set_arm_clock+0xe8>
    c836:	2712      	movs	r7, #18
    c838:	e718      	b.n	c66c <set_arm_clock+0x58>
    c83a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    c83e:	2104      	movs	r1, #4
    c840:	e7c5      	b.n	c7ce <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c842:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c846:	4820      	ldr	r0, [pc, #128]	; (c8c8 <set_arm_clock+0x2b4>)
    c848:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c84a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c84c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c84e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c852:	4a27      	ldr	r2, [pc, #156]	; (c8f0 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    c854:	f8df a0a8 	ldr.w	sl, [pc, #168]	; c900 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    c858:	fba2 2000 	umull	r2, r0, r2, r0
    c85c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    c85e:	4825      	ldr	r0, [pc, #148]	; (c8f4 <set_arm_clock+0x2e0>)
    c860:	2a36      	cmp	r2, #54	; 0x36
    c862:	bf38      	it	cc
    c864:	2236      	movcc	r2, #54	; 0x36
    c866:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    c86a:	ea42 0a0a 	orr.w	sl, r2, sl
    c86e:	e774      	b.n	c75a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    c870:	ea4f 248c 	mov.w	r4, ip, lsl #10
    c874:	2300      	movs	r3, #0
    c876:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    c87a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    c87e:	46ac      	mov	ip, r5
    c880:	e762      	b.n	c748 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    c882:	461d      	mov	r5, r3
    c884:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    c888:	4611      	mov	r1, r2
    c88a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    c88e:	e713      	b.n	c6b8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    c890:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    c892:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    c896:	4602      	mov	r2, r0
    c898:	4631      	mov	r1, r6
    c89a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    c89c:	46e6      	mov	lr, ip
    c89e:	e753      	b.n	c748 <set_arm_clock+0x134>
    c8a0:	1f78a400 	.word	0x1f78a400
    c8a4:	400fc000 	.word	0x400fc000
    c8a8:	40080000 	.word	0x40080000
    c8ac:	23c34600 	.word	0x23c34600
    c8b0:	004cb223 	.word	0x004cb223
    c8b4:	51eb851f 	.word	0x51eb851f
    c8b8:	016e3600 	.word	0x016e3600
    c8bc:	400d8000 	.word	0x400d8000
    c8c0:	80003040 	.word	0x80003040
    c8c4:	269fb1ff 	.word	0x269fb1ff
    c8c8:	005b8d80 	.word	0x005b8d80
    c8cc:	4df67eff 	.word	0x4df67eff
    c8d0:	4d3f6400 	.word	0x4d3f6400
    c8d4:	08f0d17f 	.word	0x08f0d17f
    c8d8:	2cb4177f 	.word	0x2cb4177f
    c8dc:	00e5109f 	.word	0x00e5109f
    c8e0:	431bde83 	.word	0x431bde83
    c8e4:	20008a50 	.word	0x20008a50
    c8e8:	20008a4c 	.word	0x20008a4c
    c8ec:	20042c48 	.word	0x20042c48
    c8f0:	165e9f81 	.word	0x165e9f81
    c8f4:	00b71b00 	.word	0x00b71b00
    c8f8:	8000206c 	.word	0x8000206c
    c8fc:	8001307f 	.word	0x8001307f
    c900:	80002000 	.word	0x80002000

0000c904 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    c904:	b900      	cbnz	r0, c908 <delay+0x4>
    c906:	4770      	bx	lr
{
    c908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c90c:	2101      	movs	r1, #1
    c90e:	4681      	mov	r9, r0
    c910:	4c21      	ldr	r4, [pc, #132]	; (c998 <delay+0x94>)
    c912:	4d22      	ldr	r5, [pc, #136]	; (c99c <delay+0x98>)
    c914:	4e22      	ldr	r6, [pc, #136]	; (c9a0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c916:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    c91a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    c91c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c91e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    c922:	2b00      	cmp	r3, #0
    c924:	d1f7      	bne.n	c916 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    c926:	491f      	ldr	r1, [pc, #124]	; (c9a4 <delay+0xa0>)
    c928:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    c92a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c92e:	f8df a078 	ldr.w	sl, [pc, #120]	; c9a8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    c932:	1a1b      	subs	r3, r3, r0
    c934:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    c936:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c93a:	f8da 2000 	ldr.w	r2, [sl]
    c93e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    c942:	455a      	cmp	r2, fp
    c944:	bf94      	ite	ls
    c946:	4490      	addls	r8, r2
    c948:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c94a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    c94e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    c950:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c952:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    c956:	2b00      	cmp	r3, #0
    c958:	d1f7      	bne.n	c94a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    c95a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c95c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    c960:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    c962:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c966:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    c96a:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    c96e:	bf94      	ite	ls
    c970:	4462      	addls	r2, ip
    c972:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    c976:	eba2 0208 	sub.w	r2, r2, r8
    c97a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    c97e:	d306      	bcc.n	c98e <delay+0x8a>
			if (--msec == 0) return;
    c980:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    c984:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    c988:	d1df      	bne.n	c94a <delay+0x46>
}
    c98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    c98e:	f001 fe9f 	bl	e6d0 <yield>
		while ((micros() - start) >= 1000) {
    c992:	4904      	ldr	r1, [pc, #16]	; (c9a4 <delay+0xa0>)
    c994:	e7d9      	b.n	c94a <delay+0x46>
    c996:	bf00      	nop
    c998:	200432e0 	.word	0x200432e0
    c99c:	200432dc 	.word	0x200432dc
    c9a0:	200432d8 	.word	0x200432d8
    c9a4:	e0001000 	.word	0xe0001000
    c9a8:	20042c48 	.word	0x20042c48

0000c9ac <micros>:
{
    c9ac:	b430      	push	{r4, r5}
    c9ae:	4b0f      	ldr	r3, [pc, #60]	; (c9ec <micros+0x40>)
    c9b0:	f04f 0c01 	mov.w	ip, #1
    c9b4:	4d0e      	ldr	r5, [pc, #56]	; (c9f0 <micros+0x44>)
    c9b6:	4c0f      	ldr	r4, [pc, #60]	; (c9f4 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    c9b8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    c9bc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    c9be:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    c9c0:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    c9c4:	2a00      	cmp	r2, #0
    c9c6:	d1f7      	bne.n	c9b8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    c9c8:	4b0b      	ldr	r3, [pc, #44]	; (c9f8 <micros+0x4c>)
    c9ca:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c9cc:	4a0b      	ldr	r2, [pc, #44]	; (c9fc <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    c9ce:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    c9d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c9d4:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    c9d6:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    c9da:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    c9de:	bc30      	pop	{r4, r5}
    c9e0:	428a      	cmp	r2, r1
    c9e2:	bf94      	ite	ls
    c9e4:	1880      	addls	r0, r0, r2
    c9e6:	1840      	addhi	r0, r0, r1
    c9e8:	4770      	bx	lr
    c9ea:	bf00      	nop
    c9ec:	200432e0 	.word	0x200432e0
    c9f0:	200432dc 	.word	0x200432dc
    c9f4:	200432d8 	.word	0x200432d8
    c9f8:	e0001000 	.word	0xe0001000
    c9fc:	20042c48 	.word	0x20042c48

0000ca00 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ca00:	2836      	cmp	r0, #54	; 0x36
    ca02:	d816      	bhi.n	ca32 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    ca04:	0102      	lsls	r2, r0, #4
    ca06:	4b10      	ldr	r3, [pc, #64]	; (ca48 <digitalWrite+0x48>)
    ca08:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    ca0c:	589b      	ldr	r3, [r3, r2]
{
    ca0e:	b410      	push	{r4}
	mask = p->mask;
    ca10:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    ca12:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    ca14:	4214      	tst	r4, r2
    ca16:	d005      	beq.n	ca24 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    ca18:	b961      	cbnz	r1, ca34 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ca1a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    ca1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    ca22:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ca24:	6883      	ldr	r3, [r0, #8]
		if (val) {
    ca26:	b151      	cbz	r1, ca3e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ca28:	4a08      	ldr	r2, [pc, #32]	; (ca4c <digitalWrite+0x4c>)
}
    ca2a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ca2e:	601a      	str	r2, [r3, #0]
}
    ca30:	4770      	bx	lr
    ca32:	4770      	bx	lr
    ca34:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    ca38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    ca3c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ca3e:	4a04      	ldr	r2, [pc, #16]	; (ca50 <digitalWrite+0x50>)
}
    ca40:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ca44:	601a      	str	r2, [r3, #0]
}
    ca46:	4770      	bx	lr
    ca48:	20007b24 	.word	0x20007b24
    ca4c:	0001f038 	.word	0x0001f038
    ca50:	00013038 	.word	0x00013038

0000ca54 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ca54:	2836      	cmp	r0, #54	; 0x36
    ca56:	d829      	bhi.n	caac <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    ca58:	4b16      	ldr	r3, [pc, #88]	; (cab4 <pinMode+0x60>)
    ca5a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ca5c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    ca5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ca62:	589a      	ldr	r2, [r3, r2]
{
    ca64:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ca66:	6853      	ldr	r3, [r2, #4]
    ca68:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ca6a:	d00e      	beq.n	ca8a <pinMode+0x36>
    ca6c:	2904      	cmp	r1, #4
    ca6e:	d00c      	beq.n	ca8a <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ca70:	ea23 0304 	bic.w	r3, r3, r4
    ca74:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ca76:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    ca78:	b1a9      	cbz	r1, caa6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    ca7a:	2902      	cmp	r1, #2
    ca7c:	d017      	beq.n	caae <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    ca7e:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ca80:	bf0c      	ite	eq
    ca82:	4a0d      	ldreq	r2, [pc, #52]	; (cab8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ca84:	4a0d      	ldrne	r2, [pc, #52]	; (cabc <pinMode+0x68>)
    ca86:	601a      	str	r2, [r3, #0]
    ca88:	e007      	b.n	ca9a <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ca8a:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    ca8c:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ca8e:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ca90:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    ca92:	d008      	beq.n	caa6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ca94:	f640 0238 	movw	r2, #2104	; 0x838
    ca98:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    ca9a:	6843      	ldr	r3, [r0, #4]
    ca9c:	2215      	movs	r2, #21
}
    ca9e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    caa2:	601a      	str	r2, [r3, #0]
}
    caa4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    caa6:	2238      	movs	r2, #56	; 0x38
    caa8:	601a      	str	r2, [r3, #0]
    caaa:	e7f6      	b.n	ca9a <pinMode+0x46>
    caac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    caae:	4a04      	ldr	r2, [pc, #16]	; (cac0 <pinMode+0x6c>)
    cab0:	601a      	str	r2, [r3, #0]
    cab2:	e7f2      	b.n	ca9a <pinMode+0x46>
    cab4:	20007b24 	.word	0x20007b24
    cab8:	00013038 	.word	0x00013038
    cabc:	00010038 	.word	0x00010038
    cac0:	0001f038 	.word	0x0001f038

0000cac4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    cac4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    cac6:	f7f3 fe79 	bl	7bc <setup>
	while (1) {
		loop();
    caca:	f7f3 fb9b 	bl	204 <loop>
		yield();
    cace:	f001 fdff 	bl	e6d0 <yield>
	while (1) {
    cad2:	e7fa      	b.n	caca <main+0x6>

0000cad4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    cad4:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    cad6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    cada:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    cade:	d16d      	bne.n	cbbc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cae0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    cae2:	d341      	bcc.n	cb68 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cae4:	f851 3b04 	ldr.w	r3, [r1], #4
    cae8:	f840 3b04 	str.w	r3, [r0], #4
    caec:	f851 3b04 	ldr.w	r3, [r1], #4
    caf0:	f840 3b04 	str.w	r3, [r0], #4
    caf4:	f851 3b04 	ldr.w	r3, [r1], #4
    caf8:	f840 3b04 	str.w	r3, [r0], #4
    cafc:	f851 3b04 	ldr.w	r3, [r1], #4
    cb00:	f840 3b04 	str.w	r3, [r0], #4
    cb04:	f851 3b04 	ldr.w	r3, [r1], #4
    cb08:	f840 3b04 	str.w	r3, [r0], #4
    cb0c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb10:	f840 3b04 	str.w	r3, [r0], #4
    cb14:	f851 3b04 	ldr.w	r3, [r1], #4
    cb18:	f840 3b04 	str.w	r3, [r0], #4
    cb1c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb20:	f840 3b04 	str.w	r3, [r0], #4
    cb24:	f851 3b04 	ldr.w	r3, [r1], #4
    cb28:	f840 3b04 	str.w	r3, [r0], #4
    cb2c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb30:	f840 3b04 	str.w	r3, [r0], #4
    cb34:	f851 3b04 	ldr.w	r3, [r1], #4
    cb38:	f840 3b04 	str.w	r3, [r0], #4
    cb3c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb40:	f840 3b04 	str.w	r3, [r0], #4
    cb44:	f851 3b04 	ldr.w	r3, [r1], #4
    cb48:	f840 3b04 	str.w	r3, [r0], #4
    cb4c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb50:	f840 3b04 	str.w	r3, [r0], #4
    cb54:	f851 3b04 	ldr.w	r3, [r1], #4
    cb58:	f840 3b04 	str.w	r3, [r0], #4
    cb5c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb60:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    cb64:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    cb66:	d2bd      	bcs.n	cae4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    cb68:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    cb6a:	d311      	bcc.n	cb90 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    cb6c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb70:	f840 3b04 	str.w	r3, [r0], #4
    cb74:	f851 3b04 	ldr.w	r3, [r1], #4
    cb78:	f840 3b04 	str.w	r3, [r0], #4
    cb7c:	f851 3b04 	ldr.w	r3, [r1], #4
    cb80:	f840 3b04 	str.w	r3, [r0], #4
    cb84:	f851 3b04 	ldr.w	r3, [r1], #4
    cb88:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    cb8c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    cb8e:	d2ed      	bcs.n	cb6c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    cb90:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    cb92:	d305      	bcc.n	cba0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    cb94:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    cb98:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    cb9c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    cb9e:	d2f9      	bcs.n	cb94 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    cba0:	3204      	adds	r2, #4
	beq	.Ldone
    cba2:	d008      	beq.n	cbb6 <memcpy+0xe2>

	lsls	r2, r2, #31
    cba4:	07d2      	lsls	r2, r2, #31
	itt ne
    cba6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    cba8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    cbac:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    cbb0:	d301      	bcc.n	cbb6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    cbb2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    cbb4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    cbb6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    cbb8:	4770      	bx	lr
    cbba:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    cbbc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    cbbe:	d313      	bcc.n	cbe8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    cbc0:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    cbc2:	d08d      	beq.n	cae0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    cbc4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    cbc8:	d08a      	beq.n	cae0 <memcpy+0xc>

	rsb	r3, #4
    cbca:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    cbce:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    cbd0:	07db      	lsls	r3, r3, #31
	itt ne
    cbd2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    cbd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    cbd8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    cbdc:	d380      	bcc.n	cae0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    cbde:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    cbe2:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    cbe6:	e77b      	b.n	cae0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    cbe8:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    cbea:	d3d9      	bcc.n	cba0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    cbec:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    cbee:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    cbf2:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    cbf6:	d2f9      	bcs.n	cbec <memcpy+0x118>

	ldrb	r3, [r1]
    cbf8:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    cbfa:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    cbfc:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    cbfe:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    cc00:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    cc02:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    cc04:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    cc06:	4770      	bx	lr

0000cc08 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    cc08:	f002 b87a 	b.w	ed00 <free>

0000cc0c <ultoa>:
	int i=0, j;
    cc0c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    cc10:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    cc12:	4666      	mov	r6, ip
	int i=0, j;
    cc14:	2400      	movs	r4, #0
    cc16:	e000      	b.n	cc1a <ultoa+0xe>
		i++;
    cc18:	3401      	adds	r4, #1
		digit = val % radix;
    cc1a:	fbb0 f5f2 	udiv	r5, r0, r2
    cc1e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc22:	2b09      	cmp	r3, #9
    cc24:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    cc28:	f103 0330 	add.w	r3, r3, #48	; 0x30
    cc2c:	fa5f fe8e 	uxtb.w	lr, lr
    cc30:	bf98      	it	ls
    cc32:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    cc36:	4290      	cmp	r0, r2
		val /= radix;
    cc38:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc3a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    cc3e:	d2eb      	bcs.n	cc18 <ultoa+0xc>
	buf[i + 1] = 0;
    cc40:	1c63      	adds	r3, r4, #1
    cc42:	2200      	movs	r2, #0
    cc44:	18c8      	adds	r0, r1, r3
    cc46:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    cc48:	b17c      	cbz	r4, cc6a <ultoa+0x5e>
		t = buf[j];
    cc4a:	4662      	mov	r2, ip
    cc4c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    cc50:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    cc54:	eba1 030c 	sub.w	r3, r1, ip
    cc58:	3202      	adds	r2, #2
		buf[j] = buf[i];
    cc5a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    cc5e:	3b01      	subs	r3, #1
    cc60:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    cc62:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    cc64:	4423      	add	r3, r4
    cc66:	429a      	cmp	r2, r3
    cc68:	dbef      	blt.n	cc4a <ultoa+0x3e>
}
    cc6a:	4608      	mov	r0, r1
    cc6c:	bd70      	pop	{r4, r5, r6, pc}
    cc6e:	bf00      	nop

0000cc70 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    cc70:	eeb4 0a40 	vcmp.f32	s0, s0
{
    cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    cc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    cc7c:	4616      	mov	r6, r2
	int awidth = abs(width);
    cc7e:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    cc82:	4607      	mov	r7, r0
    cc84:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    cc88:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    cc8c:	eeb0 8a40 	vmov.f32	s16, s0
    cc90:	b085      	sub	sp, #20
	if (isnanf(val)) {
    cc92:	f180 8148 	bvs.w	cf26 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    cc96:	eef0 7ac0 	vabs.f32	s15, s0
    cc9a:	ed9f 7ac5 	vldr	s14, [pc, #788]	; cfb0 <dtostrf+0x340>
    cc9e:	eef4 7a47 	vcmp.f32	s15, s14
    cca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cca6:	dd29      	ble.n	ccfc <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    cca8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ccb0:	f100 80ed 	bmi.w	ce8e <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ccb4:	2a03      	cmp	r2, #3
    ccb6:	f340 8091 	ble.w	cddc <dtostrf+0x16c>
    ccba:	2303      	movs	r3, #3
		if (width<0) {
    ccbc:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ccbe:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    ccc2:	f2c0 8085 	blt.w	cdd0 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    ccc6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    ccca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ccce:	f100 816a 	bmi.w	cfa6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    ccd2:	2149      	movs	r1, #73	; 0x49
    ccd4:	234e      	movs	r3, #78	; 0x4e
    ccd6:	2046      	movs	r0, #70	; 0x46
    ccd8:	1cf4      	adds	r4, r6, #3
    ccda:	7031      	strb	r1, [r6, #0]
    ccdc:	70b0      	strb	r0, [r6, #2]
    ccde:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    cce0:	b122      	cbz	r2, ccec <dtostrf+0x7c>
			*buf++ = ' ';
    cce2:	4620      	mov	r0, r4
    cce4:	2120      	movs	r1, #32
    cce6:	4414      	add	r4, r2
    cce8:	f003 ff82 	bl	10bf0 <memset>
			awidth--;
		}
		*buf = 0;
    ccec:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    ccee:	4620      	mov	r0, r4
		*buf = 0;
    ccf0:	7023      	strb	r3, [r4, #0]
}
    ccf2:	b005      	add	sp, #20
    ccf4:	ecbd 8b02 	vpop	{d8}
    ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    ccfc:	4689      	mov	r9, r1
    ccfe:	460d      	mov	r5, r1
    cd00:	aa02      	add	r2, sp, #8
    cd02:	a901      	add	r1, sp, #4
    cd04:	4648      	mov	r0, r9
    cd06:	f003 fc9f 	bl	10648 <fcvtf>
	if (precision == 0 && decpt == 0) {
    cd0a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    cd0e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    cd10:	ea59 030a 	orrs.w	r3, r9, sl
    cd14:	d172      	bne.n	cdfc <dtostrf+0x18c>
		decpt++;
    cd16:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    cd18:	7802      	ldrb	r2, [r0, #0]
    cd1a:	4ca6      	ldr	r4, [pc, #664]	; (cfb4 <dtostrf+0x344>)
		decpt++;
    cd1c:	469a      	mov	sl, r3
    cd1e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    cd20:	4ba5      	ldr	r3, [pc, #660]	; (cfb8 <dtostrf+0x348>)
		decpt++;
    cd22:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    cd24:	2a34      	cmp	r2, #52	; 0x34
    cd26:	bf88      	it	hi
    cd28:	461c      	movhi	r4, r3
	if (sign) reqd++;
    cd2a:	9b02      	ldr	r3, [sp, #8]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	d07d      	beq.n	ce2c <dtostrf+0x1bc>
    cd30:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    cd34:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    cd38:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    cd3c:	f1bb 0f00 	cmp.w	fp, #0
    cd40:	f340 80a1 	ble.w	ce86 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    cd44:	465a      	mov	r2, fp
    cd46:	2120      	movs	r1, #32
    cd48:	4630      	mov	r0, r6
		e += pad;
    cd4a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    cd4c:	f003 ff50 	bl	10bf0 <memset>
    cd50:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    cd54:	222d      	movs	r2, #45	; 0x2d
    cd56:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    cd5a:	f1ba 0f00 	cmp.w	sl, #0
    cd5e:	d177      	bne.n	ce50 <dtostrf+0x1e0>
    cd60:	f1b9 0f00 	cmp.w	r9, #0
    cd64:	d006      	beq.n	cd74 <dtostrf+0x104>
		*p++ = '0';
    cd66:	461a      	mov	r2, r3
    cd68:	2130      	movs	r1, #48	; 0x30
    cd6a:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    cd6e:	212e      	movs	r1, #46	; 0x2e
    cd70:	7059      	strb	r1, [r3, #1]
    cd72:	4613      	mov	r3, r2
	while (p < e) {
    cd74:	42ab      	cmp	r3, r5
    cd76:	d21f      	bcs.n	cdb8 <dtostrf+0x148>
		*p++ = *s++;
    cd78:	46a4      	mov	ip, r4
    cd7a:	4619      	mov	r1, r3
    cd7c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    cd80:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    cd84:	42a9      	cmp	r1, r5
    cd86:	d018      	beq.n	cdba <dtostrf+0x14a>
    cd88:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    cd8a:	202e      	movs	r0, #46	; 0x2e
    cd8c:	3c01      	subs	r4, #1
    cd8e:	e00b      	b.n	cda8 <dtostrf+0x138>
    cd90:	7058      	strb	r0, [r3, #1]
    cd92:	3302      	adds	r3, #2
		if (p == e) break;
    cd94:	3c01      	subs	r4, #1
	while (p < e) {
    cd96:	42ab      	cmp	r3, r5
		*p++ = *s++;
    cd98:	4619      	mov	r1, r3
	while (p < e) {
    cd9a:	d20d      	bcs.n	cdb8 <dtostrf+0x148>
		*p++ = *s++;
    cd9c:	f81c 2b01 	ldrb.w	r2, [ip], #1
    cda0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    cda4:	42a9      	cmp	r1, r5
    cda6:	d008      	beq.n	cdba <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    cda8:	9401      	str	r4, [sp, #4]
    cdaa:	2c00      	cmp	r4, #0
    cdac:	d0f0      	beq.n	cd90 <dtostrf+0x120>
    cdae:	460b      	mov	r3, r1
		if (p == e) break;
    cdb0:	3c01      	subs	r4, #1
	while (p < e) {
    cdb2:	42ab      	cmp	r3, r5
		*p++ = *s++;
    cdb4:	4619      	mov	r1, r3
	while (p < e) {
    cdb6:	d3f1      	bcc.n	cd9c <dtostrf+0x12c>
    cdb8:	461d      	mov	r5, r3
	if (width < 0) {
    cdba:	2f00      	cmp	r7, #0
    cdbc:	db6b      	blt.n	ce96 <dtostrf+0x226>
	return buf;
    cdbe:	4634      	mov	r4, r6
	*p = 0;
    cdc0:	2300      	movs	r3, #0
}
    cdc2:	4620      	mov	r0, r4
	*p = 0;
    cdc4:	702b      	strb	r3, [r5, #0]
}
    cdc6:	b005      	add	sp, #20
    cdc8:	ecbd 8b02 	vpop	{d8}
    cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    cdd0:	b122      	cbz	r2, cddc <dtostrf+0x16c>
				*buf++ = ' ';
    cdd2:	4630      	mov	r0, r6
    cdd4:	2120      	movs	r1, #32
    cdd6:	4416      	add	r6, r2
    cdd8:	f003 ff0a 	bl	10bf0 <memset>
		if (val<0) *buf++ = '-';
    cddc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    cde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cde4:	f140 80bd 	bpl.w	cf62 <dtostrf+0x2f2>
    cde8:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    cdea:	2249      	movs	r2, #73	; 0x49
    cdec:	234e      	movs	r3, #78	; 0x4e
    cdee:	2046      	movs	r0, #70	; 0x46
    cdf0:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    cdf2:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    cdf4:	70f0      	strb	r0, [r6, #3]
    cdf6:	7072      	strb	r2, [r6, #1]
    cdf8:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    cdfa:	e777      	b.n	ccec <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    cdfc:	f1ca 0300 	rsb	r3, sl, #0
    ce00:	4599      	cmp	r9, r3
    ce02:	da57      	bge.n	ceb4 <dtostrf+0x244>
		decpt = -precision;
    ce04:	f04f 0801 	mov.w	r8, #1
    ce08:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    ce0c:	4c69      	ldr	r4, [pc, #420]	; (cfb4 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    ce0e:	45c2      	cmp	sl, r8
		decpt = -precision;
    ce10:	4640      	mov	r0, r8
    ce12:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    ce16:	bfb8      	it	lt
    ce18:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    ce1c:	f1ba 0f00 	cmp.w	sl, #0
    ce20:	d152      	bne.n	cec8 <dtostrf+0x258>
	if (sign) reqd++;
    ce22:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    ce24:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    ce28:	2b00      	cmp	r3, #0
    ce2a:	d181      	bne.n	cd30 <dtostrf+0xc0>
	pad = width - reqd;
    ce2c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    ce30:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    ce34:	f1bb 0f00 	cmp.w	fp, #0
    ce38:	dd27      	ble.n	ce8a <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    ce3a:	465a      	mov	r2, fp
    ce3c:	2120      	movs	r1, #32
    ce3e:	4630      	mov	r0, r6
		e += pad;
    ce40:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    ce42:	f003 fed5 	bl	10bf0 <memset>
    ce46:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    ce4a:	f1ba 0f00 	cmp.w	sl, #0
    ce4e:	d087      	beq.n	cd60 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    ce50:	f1ba 0f00 	cmp.w	sl, #0
    ce54:	da8e      	bge.n	cd74 <dtostrf+0x104>
    ce56:	f1b9 0f00 	cmp.w	r9, #0
    ce5a:	d08b      	beq.n	cd74 <dtostrf+0x104>
		*p++ = '0';
    ce5c:	4618      	mov	r0, r3
		*p++ = '.';
    ce5e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    ce60:	2130      	movs	r1, #48	; 0x30
    ce62:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    ce66:	705a      	strb	r2, [r3, #1]
    ce68:	4602      	mov	r2, r0
    ce6a:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    ce6c:	3301      	adds	r3, #1
			*p++ = '0';
    ce6e:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    ce72:	d1fb      	bne.n	ce6c <dtostrf+0x1fc>
			*p++ = '0';
    ce74:	f1ba 0f00 	cmp.w	sl, #0
    ce78:	9301      	str	r3, [sp, #4]
    ce7a:	f1ca 0300 	rsb	r3, sl, #0
    ce7e:	bfa8      	it	ge
    ce80:	2301      	movge	r3, #1
    ce82:	4403      	add	r3, r0
    ce84:	e776      	b.n	cd74 <dtostrf+0x104>
	if (pad > 0) {
    ce86:	4633      	mov	r3, r6
    ce88:	e764      	b.n	cd54 <dtostrf+0xe4>
    ce8a:	4633      	mov	r3, r6
    ce8c:	e765      	b.n	cd5a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ce8e:	2a04      	cmp	r2, #4
    ce90:	ddaa      	ble.n	cde8 <dtostrf+0x178>
    ce92:	2304      	movs	r3, #4
    ce94:	e712      	b.n	ccbc <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    ce96:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    ce98:	f1b8 0f00 	cmp.w	r8, #0
    ce9c:	ea6f 0208 	mvn.w	r2, r8
    cea0:	da8d      	bge.n	cdbe <dtostrf+0x14e>
    cea2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    cea6:	2120      	movs	r1, #32
    cea8:	4628      	mov	r0, r5
    ceaa:	3201      	adds	r2, #1
    ceac:	4415      	add	r5, r2
    ceae:	f003 fe9f 	bl	10bf0 <memset>
    ceb2:	e784      	b.n	cdbe <dtostrf+0x14e>
	reqd = strlen(s);
    ceb4:	f004 fa84 	bl	113c0 <strlen>
    ceb8:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    ceba:	45c2      	cmp	sl, r8
    cebc:	bfb8      	it	lt
    cebe:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    cec2:	f1ba 0f00 	cmp.w	sl, #0
    cec6:	d0ac      	beq.n	ce22 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    cec8:	f1ba 0f00 	cmp.w	sl, #0
    cecc:	f6bf af2d 	bge.w	cd2a <dtostrf+0xba>
    ced0:	f1b9 0f00 	cmp.w	r9, #0
    ced4:	f43f af29 	beq.w	cd2a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    ced8:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    cedc:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    cee0:	4283      	cmp	r3, r0
    cee2:	f4bf af22 	bcs.w	cd2a <dtostrf+0xba>
			while (newPrecision > 0) {
    cee6:	f1b9 0f00 	cmp.w	r9, #0
    ceea:	dd05      	ble.n	cef8 <dtostrf+0x288>
				val *= 10.0f;
    ceec:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    cef0:	3d01      	subs	r5, #1
				val *= 10.0f;
    cef2:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    cef6:	d1fb      	bne.n	cef0 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    cef8:	aa02      	add	r2, sp, #8
    cefa:	eeb0 0a48 	vmov.f32	s0, s16
    cefe:	4628      	mov	r0, r5
    cf00:	a903      	add	r1, sp, #12
    cf02:	f003 fba1 	bl	10648 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    cf06:	f8dd a004 	ldr.w	sl, [sp, #4]
    cf0a:	9b03      	ldr	r3, [sp, #12]
    cf0c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    cf10:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    cf12:	eba3 030a 	sub.w	r3, r3, sl
    cf16:	4293      	cmp	r3, r2
    cf18:	f47f af07 	bne.w	cd2a <dtostrf+0xba>
    cf1c:	f10a 0a01 	add.w	sl, sl, #1
    cf20:	f8cd a004 	str.w	sl, [sp, #4]
    cf24:	e701      	b.n	cd2a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    cf26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cf2e:	bf4c      	ite	mi
    cf30:	2304      	movmi	r3, #4
    cf32:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    cf34:	4293      	cmp	r3, r2
    cf36:	da22      	bge.n	cf7e <dtostrf+0x30e>
		if (width<0) {
    cf38:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    cf3a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    cf3e:	db18      	blt.n	cf72 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    cf40:	ee10 3a10 	vmov	r3, s0
    cf44:	2b00      	cmp	r3, #0
    cf46:	da02      	bge.n	cf4e <dtostrf+0x2de>
    cf48:	232d      	movs	r3, #45	; 0x2d
    cf4a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    cf4e:	234e      	movs	r3, #78	; 0x4e
    cf50:	2141      	movs	r1, #65	; 0x41
    cf52:	1cf4      	adds	r4, r6, #3
    cf54:	7033      	strb	r3, [r6, #0]
    cf56:	7071      	strb	r1, [r6, #1]
    cf58:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    cf5a:	2a00      	cmp	r2, #0
    cf5c:	f47f aec1 	bne.w	cce2 <dtostrf+0x72>
    cf60:	e6c4      	b.n	ccec <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    cf62:	2149      	movs	r1, #73	; 0x49
    cf64:	224e      	movs	r2, #78	; 0x4e
    cf66:	2346      	movs	r3, #70	; 0x46
    cf68:	1cf4      	adds	r4, r6, #3
    cf6a:	7031      	strb	r1, [r6, #0]
    cf6c:	7072      	strb	r2, [r6, #1]
    cf6e:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    cf70:	e6bc      	b.n	ccec <dtostrf+0x7c>
			while (awidth) {
    cf72:	b122      	cbz	r2, cf7e <dtostrf+0x30e>
				*buf++ = ' ';
    cf74:	4630      	mov	r0, r6
    cf76:	2120      	movs	r1, #32
    cf78:	4416      	add	r6, r2
    cf7a:	f003 fe39 	bl	10bf0 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    cf7e:	ee18 3a10 	vmov	r3, s16
    cf82:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    cf84:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    cf88:	db05      	blt.n	cf96 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    cf8a:	2241      	movs	r2, #65	; 0x41
    cf8c:	1cf4      	adds	r4, r6, #3
    cf8e:	7033      	strb	r3, [r6, #0]
    cf90:	7072      	strb	r2, [r6, #1]
    cf92:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    cf94:	e6aa      	b.n	ccec <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    cf96:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    cf98:	2241      	movs	r2, #65	; 0x41
    cf9a:	1d34      	adds	r4, r6, #4
    cf9c:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    cf9e:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    cfa0:	70b2      	strb	r2, [r6, #2]
    cfa2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    cfa4:	e6a2      	b.n	ccec <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    cfa6:	232d      	movs	r3, #45	; 0x2d
    cfa8:	f806 3b01 	strb.w	r3, [r6], #1
    cfac:	e691      	b.n	ccd2 <dtostrf+0x62>
    cfae:	bf00      	nop
    cfb0:	7f7fffff 	.word	0x7f7fffff
    cfb4:	20007e94 	.word	0x20007e94
    cfb8:	20007e98 	.word	0x20007e98

0000cfbc <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    cfbc:	4a07      	ldr	r2, [pc, #28]	; (cfdc <rtc_get+0x20>)
    cfbe:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    cfc0:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    cfc2:	4619      	mov	r1, r3
    cfc4:	4684      	mov	ip, r0
    cfc6:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    cfc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    cfca:	4299      	cmp	r1, r3
    cfcc:	d1f9      	bne.n	cfc2 <rtc_get+0x6>
    cfce:	4584      	cmp	ip, r0
    cfd0:	d1f7      	bne.n	cfc2 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    cfd2:	0bdb      	lsrs	r3, r3, #15
}
    cfd4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    cfd8:	4770      	bx	lr
    cfda:	bf00      	nop
    cfdc:	400d4000 	.word	0x400d4000

0000cfe0 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    cfe0:	4910      	ldr	r1, [pc, #64]	; (d024 <rtc_set+0x44>)
    cfe2:	688b      	ldr	r3, [r1, #8]
    cfe4:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    cfe8:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    cfea:	688b      	ldr	r3, [r1, #8]
    cfec:	07db      	lsls	r3, r3, #31
    cfee:	d4fc      	bmi.n	cfea <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    cff0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    cff2:	4a0c      	ldr	r2, [pc, #48]	; (d024 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    cff4:	f023 0301 	bic.w	r3, r3, #1
    cff8:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    cffa:	6b93      	ldr	r3, [r2, #56]	; 0x38
    cffc:	07d9      	lsls	r1, r3, #31
    cffe:	d4fc      	bmi.n	cffa <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    d000:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    d002:	4908      	ldr	r1, [pc, #32]	; (d024 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    d004:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    d006:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    d008:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    d00a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    d00c:	f043 0301 	orr.w	r3, r3, #1
    d010:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    d012:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    d014:	07db      	lsls	r3, r3, #31
    d016:	d5fc      	bpl.n	d012 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    d018:	688b      	ldr	r3, [r1, #8]
    d01a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    d01e:	608b      	str	r3, [r1, #8]
}
    d020:	4770      	bx	lr
    d022:	bf00      	nop
    d024:	400d4000 	.word	0x400d4000

0000d028 <unused_interrupt_vector>:
	__disable_irq();
    d028:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    d02a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    d02e:	4c52      	ldr	r4, [pc, #328]	; (d178 <unused_interrupt_vector+0x150>)
    d030:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    d034:	f01e 0f04 	tst.w	lr, #4
    d038:	bf0c      	ite	eq
    d03a:	f3ef 8208 	mrseq	r2, MSP
    d03e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    d042:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    d046:	4e4d      	ldr	r6, [pc, #308]	; (d17c <unused_interrupt_vector+0x154>)
	while (p < end) {
    d048:	4d4d      	ldr	r5, [pc, #308]	; (d180 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    d04a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    d04e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    d052:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    d056:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    d05a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    d05e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    d062:	6993      	ldr	r3, [r2, #24]
    d064:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    d068:	69d3      	ldr	r3, [r2, #28]
    d06a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    d06e:	f000 f8d1 	bl	d214 <tempmonGetTemp>
    d072:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    d076:	f7ff ffa1 	bl	cfbc <rtc_get>
	info->len = sizeof(*info) / 4;
    d07a:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    d07c:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    d080:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    d084:	460b      	mov	r3, r1
    d086:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d08a:	493e      	ldr	r1, [pc, #248]	; (d184 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    d08c:	1d30      	adds	r0, r6, #4
    d08e:	405a      	eors	r2, r3
    d090:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    d092:	f002 0301 	and.w	r3, r2, #1
    d096:	3c01      	subs	r4, #1
    d098:	fb01 f303 	mul.w	r3, r1, r3
    d09c:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    d0a0:	d1f7      	bne.n	d092 <unused_interrupt_vector+0x6a>
	while (p < end) {
    d0a2:	42a8      	cmp	r0, r5
    d0a4:	d002      	beq.n	d0ac <unused_interrupt_vector+0x84>
		crc ^= *p++;
    d0a6:	6873      	ldr	r3, [r6, #4]
    d0a8:	4606      	mov	r6, r0
    d0aa:	e7ef      	b.n	d08c <unused_interrupt_vector+0x64>
	info->crc = crc;
    d0ac:	4b32      	ldr	r3, [pc, #200]	; (d178 <unused_interrupt_vector+0x150>)
    d0ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    d0b2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    d0b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d0ba:	4930      	ldr	r1, [pc, #192]	; (d17c <unused_interrupt_vector+0x154>)
    d0bc:	4a32      	ldr	r2, [pc, #200]	; (d188 <unused_interrupt_vector+0x160>)
    d0be:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    d0c2:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    d0c6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d0ca:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d0ce:	4a2f      	ldr	r2, [pc, #188]	; (d18c <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    d0d0:	2502      	movs	r5, #2
    d0d2:	482f      	ldr	r0, [pc, #188]	; (d190 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d0d4:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d0d6:	492f      	ldr	r1, [pc, #188]	; (d194 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    d0d8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    d0dc:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    d0de:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    d0e0:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d0e2:	482d      	ldr	r0, [pc, #180]	; (d198 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    d0e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d0ec:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d0ee:	680b      	ldr	r3, [r1, #0]
    d0f0:	4283      	cmp	r3, r0
    d0f2:	d83d      	bhi.n	d170 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    d0f4:	4d26      	ldr	r5, [pc, #152]	; (d190 <unused_interrupt_vector+0x168>)
    d0f6:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    d0f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d0fc:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    d100:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    d102:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    d104:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    d108:	4924      	ldr	r1, [pc, #144]	; (d19c <unused_interrupt_vector+0x174>)
    d10a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    d10e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    d112:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    d116:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    d11a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    d11e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    d122:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    d126:	e001      	b.n	d12c <unused_interrupt_vector+0x104>
		usb_isr();
    d128:	f000 f9ca 	bl	d4c0 <usb_isr>
		if (PIT_TFLG0) {
    d12c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    d130:	2b00      	cmp	r3, #0
    d132:	d0f9      	beq.n	d128 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    d134:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    d136:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    d13a:	2c4f      	cmp	r4, #79	; 0x4f
    d13c:	d9f4      	bls.n	d128 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d13e:	4b18      	ldr	r3, [pc, #96]	; (d1a0 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    d140:	2002      	movs	r0, #2
    d142:	4918      	ldr	r1, [pc, #96]	; (d1a4 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    d148:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    d14c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d14e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    d152:	b93b      	cbnz	r3, d164 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    d154:	4814      	ldr	r0, [pc, #80]	; (d1a8 <unused_interrupt_vector+0x180>)
    d156:	4915      	ldr	r1, [pc, #84]	; (d1ac <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d158:	4a0d      	ldr	r2, [pc, #52]	; (d190 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    d15a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    d15c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    d160:	2b00      	cmp	r3, #0
    d162:	d0fa      	beq.n	d15a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    d164:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d168:	4a11      	ldr	r2, [pc, #68]	; (d1b0 <unused_interrupt_vector+0x188>)
    d16a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    d16e:	e7fe      	b.n	d16e <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    d170:	f7ff fa50 	bl	c614 <set_arm_clock>
    d174:	e7be      	b.n	d0f4 <unused_interrupt_vector+0xcc>
    d176:	bf00      	nop
    d178:	2027ff00 	.word	0x2027ff00
    d17c:	2027ff80 	.word	0x2027ff80
    d180:	2027ffa8 	.word	0x2027ffa8
    d184:	edb88320 	.word	0xedb88320
    d188:	2027ffa0 	.word	0x2027ffa0
    d18c:	400fc000 	.word	0x400fc000
    d190:	40084000 	.word	0x40084000
    d194:	20008a50 	.word	0x20008a50
    d198:	0bcd3d80 	.word	0x0bcd3d80
    d19c:	00249f00 	.word	0x00249f00
    d1a0:	400d9000 	.word	0x400d9000
    d1a4:	402e0000 	.word	0x402e0000
    d1a8:	400f8000 	.word	0x400f8000
    d1ac:	0bad00f1 	.word	0x0bad00f1
    d1b0:	05fa0004 	.word	0x05fa0004

0000d1b4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    d1b4:	490a      	ldr	r1, [pc, #40]	; (d1e0 <_sbrk+0x2c>)
    d1b6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    d1b8:	b138      	cbz	r0, d1ca <_sbrk+0x16>
{
    d1ba:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    d1bc:	1813      	adds	r3, r2, r0
    d1be:	4809      	ldr	r0, [pc, #36]	; (d1e4 <_sbrk+0x30>)
    d1c0:	4283      	cmp	r3, r0
    d1c2:	d804      	bhi.n	d1ce <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    d1c4:	4610      	mov	r0, r2
                __brkval = prev + incr;
    d1c6:	600b      	str	r3, [r1, #0]
}
    d1c8:	bd08      	pop	{r3, pc}
    d1ca:	4610      	mov	r0, r2
    d1cc:	4770      	bx	lr
                        errno = ENOMEM;
    d1ce:	f003 fe9b 	bl	10f08 <__errno>
    d1d2:	230c      	movs	r3, #12
                        return (void *)-1;
    d1d4:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    d1d8:	6003      	str	r3, [r0, #0]
}
    d1da:	4610      	mov	r0, r2
    d1dc:	bd08      	pop	{r3, pc}
    d1de:	bf00      	nop
    d1e0:	20008a6c 	.word	0x20008a6c
    d1e4:	20280000 	.word	0x20280000

0000d1e8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    d1e8:	2000      	movs	r0, #0
    d1ea:	4770      	bx	lr

0000d1ec <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    d1ec:	f04f 30ff 	mov.w	r0, #4294967295
    d1f0:	4770      	bx	lr
    d1f2:	bf00      	nop

0000d1f4 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    d1f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    d1f8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    d1fa:	604b      	str	r3, [r1, #4]
}
    d1fc:	4770      	bx	lr
    d1fe:	bf00      	nop

0000d200 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    d200:	2001      	movs	r0, #1
    d202:	4770      	bx	lr

0000d204 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    d204:	f04f 30ff 	mov.w	r0, #4294967295
    d208:	4770      	bx	lr
    d20a:	bf00      	nop

0000d20c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    d20c:	bf30      	wfi
    d20e:	e7fd      	b.n	d20c <abort>

0000d210 <Panic_Temp_isr>:
  unused_interrupt_vector();
    d210:	f7ff bf0a 	b.w	d028 <unused_interrupt_vector>

0000d214 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    d214:	4a12      	ldr	r2, [pc, #72]	; (d260 <tempmonGetTemp+0x4c>)
    d216:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    d21a:	075b      	lsls	r3, r3, #29
    d21c:	d5fb      	bpl.n	d216 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d21e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d222:	4810      	ldr	r0, [pc, #64]	; (d264 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d224:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d228:	490f      	ldr	r1, [pc, #60]	; (d268 <tempmonGetTemp+0x54>)
    d22a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    d22e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    d232:	ed91 6a00 	vldr	s12, [r1]
    d236:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d23a:	4a0c      	ldr	r2, [pc, #48]	; (d26c <tempmonGetTemp+0x58>)
    d23c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    d240:	4b0b      	ldr	r3, [pc, #44]	; (d270 <tempmonGetTemp+0x5c>)
    d242:	edd2 6a00 	vldr	s13, [r2]
    d246:	ee77 7ac7 	vsub.f32	s15, s15, s14
    d24a:	ed93 7a00 	vldr	s14, [r3]
    d24e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    d252:	ee67 7a86 	vmul.f32	s15, s15, s12
    d256:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    d25a:	ee37 0a40 	vsub.f32	s0, s14, s0
    d25e:	4770      	bx	lr
    d260:	400d8100 	.word	0x400d8100
    d264:	20042c38 	.word	0x20042c38
    d268:	20042c40 	.word	0x20042c40
    d26c:	20042c44 	.word	0x20042c44
    d270:	20042c3c 	.word	0x20042c3c

0000d274 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    d274:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    d276:	2900      	cmp	r1, #0
    d278:	d131      	bne.n	d2de <endpoint0_receive+0x6a>
    d27a:	4c2b      	ldr	r4, [pc, #172]	; (d328 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    d27c:	4b2b      	ldr	r3, [pc, #172]	; (d32c <endpoint0_receive+0xb8>)
    d27e:	2101      	movs	r1, #1
    d280:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d282:	b1da      	cbz	r2, d2bc <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d284:	492a      	ldr	r1, [pc, #168]	; (d330 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    d286:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d288:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d28c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    d290:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d292:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    d294:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d298:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    d29c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    d2a0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    d2a4:	4313      	orrs	r3, r2
    d2a6:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    d2aa:	4b22      	ldr	r3, [pc, #136]	; (d334 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    d2ac:	4920      	ldr	r1, [pc, #128]	; (d330 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    d2ae:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    d2b0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    d2b4:	2b00      	cmp	r3, #0
    d2b6:	d1fb      	bne.n	d2b0 <endpoint0_receive+0x3c>
}
    d2b8:	bc30      	pop	{r4, r5}
    d2ba:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d2bc:	491c      	ldr	r1, [pc, #112]	; (d330 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d2be:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d2c0:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    d2c4:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d2c6:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    d2c8:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d2cc:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d2d0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    d2d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d2d8:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    d2dc:	e7e5      	b.n	d2aa <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d2de:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    d2e0:	4b15      	ldr	r3, [pc, #84]	; (d338 <endpoint0_receive+0xc4>)
    d2e2:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    d2e4:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d2e6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    d2ea:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    d2ec:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d2ee:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    d2f0:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    d2f4:	4c0c      	ldr	r4, [pc, #48]	; (d328 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    d2f6:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    d2f8:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    d2fc:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    d2fe:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    d300:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    d304:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    d308:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    d30a:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    d30c:	4908      	ldr	r1, [pc, #32]	; (d330 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    d30e:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    d310:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    d314:	f043 0301 	orr.w	r3, r3, #1
    d318:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    d31c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    d320:	2b00      	cmp	r3, #0
    d322:	d1fb      	bne.n	d31c <endpoint0_receive+0xa8>
    d324:	e7aa      	b.n	d27c <endpoint0_receive+0x8>
    d326:	bf00      	nop
    d328:	20000000 	.word	0x20000000
    d32c:	200096c0 	.word	0x200096c0
    d330:	402e0000 	.word	0x402e0000
    d334:	20042ac8 	.word	0x20042ac8
    d338:	200096e0 	.word	0x200096e0

0000d33c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    d33c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    d33e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    d340:	b11b      	cbz	r3, d34a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    d342:	6853      	ldr	r3, [r2, #4]
    d344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    d348:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    d34a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    d34c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    d34e:	b33c      	cbz	r4, d3a0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    d350:	4b1a      	ldr	r3, [pc, #104]	; (d3bc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    d352:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    d354:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    d358:	420c      	tst	r4, r1
    d35a:	d11d      	bne.n	d398 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    d35c:	4e18      	ldr	r6, [pc, #96]	; (d3c0 <schedule_transfer+0x84>)
    d35e:	6877      	ldr	r7, [r6, #4]
    d360:	e004      	b.n	d36c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    d362:	6874      	ldr	r4, [r6, #4]
    d364:	1be4      	subs	r4, r4, r7
    d366:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    d36a:	d20b      	bcs.n	d384 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    d36c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    d370:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    d374:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    d378:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    d37c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    d380:	0464      	lsls	r4, r4, #17
    d382:	d5ee      	bpl.n	d362 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    d384:	400d      	ands	r5, r1
    d386:	d107      	bne.n	d398 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    d388:	4c0c      	ldr	r4, [pc, #48]	; (d3bc <schedule_transfer+0x80>)
		endpoint->status = 0;
    d38a:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    d38e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d392:	430b      	orrs	r3, r1
    d394:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    d398:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    d39a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    d39c:	bcf0      	pop	{r4, r5, r6, r7}
    d39e:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    d3a0:	4d06      	ldr	r5, [pc, #24]	; (d3bc <schedule_transfer+0x80>)
	endpoint->status = 0;
    d3a2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    d3a6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    d3aa:	430b      	orrs	r3, r1
    d3ac:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    d3b0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    d3b2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    d3b4:	b662      	cpsie	i
}
    d3b6:	bcf0      	pop	{r4, r5, r6, r7}
    d3b8:	4770      	bx	lr
    d3ba:	bf00      	nop
    d3bc:	402e0000 	.word	0x402e0000
    d3c0:	e0001000 	.word	0xe0001000

0000d3c4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    d3c4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    d3c6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    d3c8:	b19d      	cbz	r5, d3f2 <run_callbacks+0x2e>
    d3ca:	4606      	mov	r6, r0
    d3cc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    d3ce:	2400      	movs	r4, #0
    d3d0:	e003      	b.n	d3da <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    d3d2:	6812      	ldr	r2, [r2, #0]
		count++;
    d3d4:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    d3d6:	2a01      	cmp	r2, #1
    d3d8:	d00c      	beq.n	d3f4 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    d3da:	6853      	ldr	r3, [r2, #4]
    d3dc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    d3e0:	d0f7      	beq.n	d3d2 <run_callbacks+0xe>
			ep->first_transfer = t;
    d3e2:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    d3e4:	b12c      	cbz	r4, d3f2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    d3e6:	4628      	mov	r0, r5
		ep->callback_function(first);
    d3e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    d3ea:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    d3ec:	4798      	blx	r3
	while (count) {
    d3ee:	3c01      	subs	r4, #1
    d3f0:	d1f9      	bne.n	d3e6 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    d3f2:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    d3f4:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    d3f8:	e7f4      	b.n	d3e4 <run_callbacks+0x20>
    d3fa:	bf00      	nop

0000d3fc <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    d3fc:	b430      	push	{r4, r5}
	if (len > 0) {
    d3fe:	b9d9      	cbnz	r1, d438 <endpoint0_transmit.constprop.0+0x3c>
    d400:	4c1f      	ldr	r4, [pc, #124]	; (d480 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    d402:	4b20      	ldr	r3, [pc, #128]	; (d484 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    d404:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d406:	4a20      	ldr	r2, [pc, #128]	; (d488 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    d408:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d40a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    d40e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    d410:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    d412:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d416:	2480      	movs	r4, #128	; 0x80
    d418:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d41a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    d41e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    d422:	481a      	ldr	r0, [pc, #104]	; (d48c <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    d424:	432b      	orrs	r3, r5
    d426:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    d42a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    d42c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    d430:	2b00      	cmp	r3, #0
    d432:	d1fb      	bne.n	d42c <endpoint0_transmit.constprop.0+0x30>
}
    d434:	bc30      	pop	{r4, r5}
    d436:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d438:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    d43a:	4b15      	ldr	r3, [pc, #84]	; (d490 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    d43c:	4c10      	ldr	r4, [pc, #64]	; (d480 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    d43e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d440:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    d444:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    d446:	4a10      	ldr	r2, [pc, #64]	; (d488 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    d448:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    d44a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    d44e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    d450:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    d452:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    d456:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    d458:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    d45a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    d45e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    d462:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    d464:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    d466:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    d468:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    d46a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    d46e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d472:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    d476:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    d47a:	2b00      	cmp	r3, #0
    d47c:	d1fb      	bne.n	d476 <endpoint0_transmit.constprop.0+0x7a>
    d47e:	e7c0      	b.n	d402 <endpoint0_transmit.constprop.0+0x6>
    d480:	20000000 	.word	0x20000000
    d484:	200096c0 	.word	0x200096c0
    d488:	402e0000 	.word	0x402e0000
    d48c:	20042ac8 	.word	0x20042ac8
    d490:	200096e0 	.word	0x200096e0

0000d494 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    d494:	4908      	ldr	r1, [pc, #32]	; (d4b8 <usb_stop_sof_interrupts+0x24>)
    d496:	2201      	movs	r2, #1
    d498:	780b      	ldrb	r3, [r1, #0]
    d49a:	fa02 f000 	lsl.w	r0, r2, r0
    d49e:	ea23 0000 	bic.w	r0, r3, r0
    d4a2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    d4a4:	b930      	cbnz	r0, d4b4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    d4a6:	4a05      	ldr	r2, [pc, #20]	; (d4bc <usb_stop_sof_interrupts+0x28>)
    d4a8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    d4ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d4b0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    d4b4:	4770      	bx	lr
    d4b6:	bf00      	nop
    d4b8:	2004332a 	.word	0x2004332a
    d4bc:	402e0000 	.word	0x402e0000

0000d4c0 <usb_isr>:
{
    d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    d4c4:	4caa      	ldr	r4, [pc, #680]	; (d770 <usb_isr+0x2b0>)
{
    d4c6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    d4c8:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    d4cc:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    d4ce:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    d4d2:	d54f      	bpl.n	d574 <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    d4d4:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    d4d8:	2b00      	cmp	r3, #0
    d4da:	d046      	beq.n	d56a <usb_isr+0xaa>
    d4dc:	4da5      	ldr	r5, [pc, #660]	; (d774 <usb_isr+0x2b4>)
    d4de:	f8df 92b0 	ldr.w	r9, [pc, #688]	; d790 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    d4e2:	f8df 82c8 	ldr.w	r8, [pc, #712]	; d7ac <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    d4e6:	4fa4      	ldr	r7, [pc, #656]	; (d778 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    d4e8:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    d4ec:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    d4f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    d4f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d4f8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    d4fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    d500:	049b      	lsls	r3, r3, #18
    d502:	d5f5      	bpl.n	d4f0 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    d504:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    d508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    d50c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    d510:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    d514:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    d518:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    d51c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    d520:	d1fa      	bne.n	d518 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    d522:	b291      	uxth	r1, r2
    d524:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    d528:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    d52c:	f000 81b8 	beq.w	d8a0 <usb_isr+0x3e0>
    d530:	f200 80f3 	bhi.w	d71a <usb_isr+0x25a>
    d534:	f240 3c02 	movw	ip, #770	; 0x302
    d538:	4561      	cmp	r1, ip
    d53a:	f000 81cf 	beq.w	d8dc <usb_isr+0x41c>
    d53e:	f200 809a 	bhi.w	d676 <usb_isr+0x1b6>
    d542:	2982      	cmp	r1, #130	; 0x82
    d544:	f000 81b4 	beq.w	d8b0 <usb_isr+0x3f0>
    d548:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    d54c:	f040 808a 	bne.w	d664 <usb_isr+0x1a4>
		if (endpoint > 7) break;
    d550:	f010 0f78 	tst.w	r0, #120	; 0x78
    d554:	b283      	uxth	r3, r0
    d556:	f000 81f4 	beq.w	d942 <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    d55a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    d55e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    d562:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    d566:	2b00      	cmp	r3, #0
    d568:	d1be      	bne.n	d4e8 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    d56a:	4a81      	ldr	r2, [pc, #516]	; (d770 <usb_isr+0x2b0>)
    d56c:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    d570:	2b00      	cmp	r3, #0
    d572:	d142      	bne.n	d5fa <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    d574:	0672      	lsls	r2, r6, #25
    d576:	d516      	bpl.n	d5a6 <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    d578:	4b7d      	ldr	r3, [pc, #500]	; (d770 <usb_isr+0x2b0>)
    d57a:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    d57e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    d582:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    d586:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    d58a:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    d58e:	2c00      	cmp	r4, #0
    d590:	d1fb      	bne.n	d58a <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    d592:	f04f 32ff 	mov.w	r2, #4294967295
    d596:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    d59a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    d59e:	f000 fe9b 	bl	e2d8 <usb_serial_reset>
		endpointN_notify_mask = 0;
    d5a2:	4b76      	ldr	r3, [pc, #472]	; (d77c <usb_isr+0x2bc>)
    d5a4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    d5a6:	01f4      	lsls	r4, r6, #7
    d5a8:	d503      	bpl.n	d5b2 <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    d5aa:	4b75      	ldr	r3, [pc, #468]	; (d780 <usb_isr+0x2c0>)
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	b103      	cbz	r3, d5b2 <usb_isr+0xf2>
    d5b0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    d5b2:	01b0      	lsls	r0, r6, #6
    d5b4:	d503      	bpl.n	d5be <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    d5b6:	4b73      	ldr	r3, [pc, #460]	; (d784 <usb_isr+0x2c4>)
    d5b8:	681b      	ldr	r3, [r3, #0]
    d5ba:	b103      	cbz	r3, d5be <usb_isr+0xfe>
    d5bc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    d5be:	0771      	lsls	r1, r6, #29
    d5c0:	d508      	bpl.n	d5d4 <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    d5c2:	4b6b      	ldr	r3, [pc, #428]	; (d770 <usb_isr+0x2b0>)
    d5c4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    d5c8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    d5cc:	d047      	beq.n	d65e <usb_isr+0x19e>
			usb_high_speed = 1;
    d5ce:	4b6e      	ldr	r3, [pc, #440]	; (d788 <usb_isr+0x2c8>)
    d5d0:	2201      	movs	r2, #1
    d5d2:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    d5d4:	4b66      	ldr	r3, [pc, #408]	; (d770 <usb_isr+0x2b0>)
    d5d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    d5da:	061a      	lsls	r2, r3, #24
    d5dc:	d50a      	bpl.n	d5f4 <usb_isr+0x134>
    d5de:	0633      	lsls	r3, r6, #24
    d5e0:	d508      	bpl.n	d5f4 <usb_isr+0x134>
		if (usb_reboot_timer) {
    d5e2:	4a6a      	ldr	r2, [pc, #424]	; (d78c <usb_isr+0x2cc>)
    d5e4:	7813      	ldrb	r3, [r2, #0]
    d5e6:	b12b      	cbz	r3, d5f4 <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    d5e8:	3b01      	subs	r3, #1
    d5ea:	b2db      	uxtb	r3, r3
    d5ec:	7013      	strb	r3, [r2, #0]
    d5ee:	2b00      	cmp	r3, #0
    d5f0:	f000 8230 	beq.w	da54 <usb_isr+0x594>
}
    d5f4:	b003      	add	sp, #12
    d5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    d5fa:	4965      	ldr	r1, [pc, #404]	; (d790 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    d5fc:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    d600:	6808      	ldr	r0, [r1, #0]
    d602:	4203      	tst	r3, r0
    d604:	f040 81c2 	bne.w	d98c <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    d608:	4a5c      	ldr	r2, [pc, #368]	; (d77c <usb_isr+0x2bc>)
    d60a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    d60c:	401c      	ands	r4, r3
    d60e:	d0b1      	beq.n	d574 <usb_isr+0xb4>
				while (tx) {
    d610:	ea5f 4814 	movs.w	r8, r4, lsr #16
    d614:	d010      	beq.n	d638 <usb_isr+0x178>
    d616:	4d57      	ldr	r5, [pc, #348]	; (d774 <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    d618:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    d61c:	fa98 f7a8 	rbit	r7, r8
    d620:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    d624:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    d628:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    d62c:	3040      	adds	r0, #64	; 0x40
    d62e:	f7ff fec9 	bl	d3c4 <run_callbacks>
				while (tx) {
    d632:	ea38 0807 	bics.w	r8, r8, r7
    d636:	d1f1      	bne.n	d61c <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    d638:	b2a4      	uxth	r4, r4
				while(rx) {
    d63a:	2c00      	cmp	r4, #0
    d63c:	d09a      	beq.n	d574 <usb_isr+0xb4>
    d63e:	4d4d      	ldr	r5, [pc, #308]	; (d774 <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    d640:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    d644:	fa94 f7a4 	rbit	r7, r4
    d648:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    d64c:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    d650:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    d654:	f7ff feb6 	bl	d3c4 <run_callbacks>
				while(rx) {
    d658:	43bc      	bics	r4, r7
    d65a:	d1f3      	bne.n	d644 <usb_isr+0x184>
    d65c:	e78a      	b.n	d574 <usb_isr+0xb4>
			usb_high_speed = 0;
    d65e:	4a4a      	ldr	r2, [pc, #296]	; (d788 <usb_isr+0x2c8>)
    d660:	7013      	strb	r3, [r2, #0]
    d662:	e7b7      	b.n	d5d4 <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    d664:	2980      	cmp	r1, #128	; 0x80
    d666:	f47f af78 	bne.w	d55a <usb_isr+0x9a>
		reply_buffer[0] = 0;
    d66a:	484a      	ldr	r0, [pc, #296]	; (d794 <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    d66c:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    d66e:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    d670:	f7ff fec4 	bl	d3fc <endpoint0_transmit.constprop.0>
		return;
    d674:	e775      	b.n	d562 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    d676:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    d67a:	f000 80f4 	beq.w	d866 <usb_isr+0x3a6>
    d67e:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    d682:	2901      	cmp	r1, #1
    d684:	f63f af69 	bhi.w	d55a <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    d688:	4b43      	ldr	r3, [pc, #268]	; (d798 <usb_isr+0x2d8>)
    d68a:	6859      	ldr	r1, [r3, #4]
    d68c:	2900      	cmp	r1, #0
    d68e:	f43f af64 	beq.w	d55a <usb_isr+0x9a>
    d692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d696:	fa1f fa80 	uxth.w	sl, r0
    d69a:	e004      	b.n	d6a6 <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    d69c:	6919      	ldr	r1, [r3, #16]
    d69e:	330c      	adds	r3, #12
    d6a0:	2900      	cmp	r1, #0
    d6a2:	f43f af5a 	beq.w	d55a <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    d6a6:	f8b3 c000 	ldrh.w	ip, [r3]
    d6aa:	45f4      	cmp	ip, lr
    d6ac:	d1f6      	bne.n	d69c <usb_isr+0x1dc>
    d6ae:	885a      	ldrh	r2, [r3, #2]
    d6b0:	4552      	cmp	r2, sl
    d6b2:	d1f3      	bne.n	d69c <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    d6b4:	ea4f 221e 	mov.w	r2, lr, lsr #8
    d6b8:	2a03      	cmp	r2, #3
    d6ba:	f000 8185 	beq.w	d9c8 <usb_isr+0x508>
					datalen = list->length;
    d6be:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    d6c2:	0c00      	lsrs	r0, r0, #16
    d6c4:	4582      	cmp	sl, r0
    d6c6:	bf28      	it	cs
    d6c8:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    d6ca:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    d6ce:	f040 8181 	bne.w	d9d4 <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    d6d2:	4b2d      	ldr	r3, [pc, #180]	; (d788 <usb_isr+0x2c8>)
    d6d4:	4a31      	ldr	r2, [pc, #196]	; (d79c <usb_isr+0x2dc>)
    d6d6:	7819      	ldrb	r1, [r3, #0]
    d6d8:	4b31      	ldr	r3, [pc, #196]	; (d7a0 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    d6da:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d7a4 <usb_isr+0x2e4>
    d6de:	2900      	cmp	r1, #0
    d6e0:	bf0c      	ite	eq
    d6e2:	4611      	moveq	r1, r2
    d6e4:	4619      	movne	r1, r3
    d6e6:	482f      	ldr	r0, [pc, #188]	; (d7a4 <usb_isr+0x2e4>)
    d6e8:	4652      	mov	r2, sl
    d6ea:	f7ff f9f3 	bl	cad4 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d6ee:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d6f2:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    d6f6:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    d6fa:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d6fe:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    d702:	3320      	adds	r3, #32
	} while (location < end_addr);
    d704:	429a      	cmp	r2, r3
    d706:	d8fa      	bhi.n	d6fe <usb_isr+0x23e>
	asm("dsb");
    d708:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d70c:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    d710:	4824      	ldr	r0, [pc, #144]	; (d7a4 <usb_isr+0x2e4>)
    d712:	4651      	mov	r1, sl
    d714:	f7ff fe72 	bl	d3fc <endpoint0_transmit.constprop.0>
				return;
    d718:	e723      	b.n	d562 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    d71a:	f242 3c21 	movw	ip, #8993	; 0x2321
    d71e:	4561      	cmp	r1, ip
    d720:	d00d      	beq.n	d73e <usb_isr+0x27e>
    d722:	d877      	bhi.n	d814 <usb_isr+0x354>
    d724:	f242 0c21 	movw	ip, #8225	; 0x2021
    d728:	4561      	cmp	r1, ip
    d72a:	f000 808b 	beq.w	d844 <usb_isr+0x384>
    d72e:	f242 2c21 	movw	ip, #8737	; 0x2221
    d732:	4561      	cmp	r1, ip
    d734:	d13c      	bne.n	d7b0 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    d736:	b280      	uxth	r0, r0
    d738:	2800      	cmp	r0, #0
    d73a:	f000 80f9 	beq.w	d930 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    d73e:	4b1a      	ldr	r3, [pc, #104]	; (d7a8 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    d740:	2200      	movs	r2, #0
    d742:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    d744:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    d746:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    d748:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    d74a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d74c:	2280      	movs	r2, #128	; 0x80
    d74e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d750:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    d754:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d758:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d75c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d760:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    d764:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d768:	2b00      	cmp	r3, #0
    d76a:	d1fb      	bne.n	d764 <usb_isr+0x2a4>
    d76c:	e6f9      	b.n	d562 <usb_isr+0xa2>
    d76e:	bf00      	nop
    d770:	402e0000 	.word	0x402e0000
    d774:	20000000 	.word	0x20000000
    d778:	402e01c0 	.word	0x402e01c0
    d77c:	20042acc 	.word	0x20042acc
    d780:	200432fc 	.word	0x200432fc
    d784:	20043300 	.word	0x20043300
    d788:	20043331 	.word	0x20043331
    d78c:	20043332 	.word	0x20043332
    d790:	20042ac8 	.word	0x20042ac8
    d794:	20042be4 	.word	0x20042be4
    d798:	20008890 	.word	0x20008890
    d79c:	600026f4 	.word	0x600026f4
    d7a0:	60002760 	.word	0x60002760
    d7a4:	20200800 	.word	0x20200800
    d7a8:	200096c0 	.word	0x200096c0
    d7ac:	20043330 	.word	0x20043330
	switch (setup.wRequestAndType) {
    d7b0:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    d7b4:	f47f aed1 	bne.w	d55a <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    d7b8:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    d7bc:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    d7c0:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    d7c2:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    d7c6:	4aa6      	ldr	r2, [pc, #664]	; (da60 <usb_isr+0x5a0>)
    d7c8:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    d7cc:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    d7d0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    d7d4:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    d7d8:	f000 fd80 	bl	e2dc <usb_serial_configure>
		usb_mtp_configure();
    d7dc:	f000 faaa 	bl	dd34 <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    d7e0:	4aa0      	ldr	r2, [pc, #640]	; (da64 <usb_isr+0x5a4>)
    d7e2:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    d7e4:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    d7e6:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    d7e8:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d7ea:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    d7ec:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d7ee:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d7f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    d7f4:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d7f6:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d7fa:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    d7fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    d802:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    d806:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    d80a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d80e:	2b00      	cmp	r3, #0
    d810:	d1fb      	bne.n	d80a <usb_isr+0x34a>
    d812:	e6a6      	b.n	d562 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    d814:	f246 4321 	movw	r3, #25633	; 0x6421
    d818:	4299      	cmp	r1, r3
    d81a:	d01f      	beq.n	d85c <usb_isr+0x39c>
    d81c:	f246 73a1 	movw	r3, #26529	; 0x67a1
    d820:	4299      	cmp	r1, r3
    d822:	f47f ae9a 	bne.w	d55a <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    d826:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    d82a:	f4ff ae96 	bcc.w	d55a <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    d82e:	4b8e      	ldr	r3, [pc, #568]	; (da68 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    d830:	2104      	movs	r1, #4
    d832:	488e      	ldr	r0, [pc, #568]	; (da6c <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    d834:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    d836:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    d838:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    d83a:	2320      	movs	r3, #32
    d83c:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    d83e:	f7ff fddd 	bl	d3fc <endpoint0_transmit.constprop.0>
			return;
    d842:	e68e      	b.n	d562 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    d844:	0c01      	lsrs	r1, r0, #16
    d846:	2907      	cmp	r1, #7
    d848:	f47f ae87 	bne.w	d55a <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    d84c:	4b88      	ldr	r3, [pc, #544]	; (da70 <usb_isr+0x5b0>)
    d84e:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    d852:	2201      	movs	r2, #1
    d854:	4885      	ldr	r0, [pc, #532]	; (da6c <usb_isr+0x5ac>)
    d856:	f7ff fd0d 	bl	d274 <endpoint0_receive>
			return;
    d85a:	e682      	b.n	d562 <usb_isr+0xa2>
		if (setup.wLength == 6) {
    d85c:	0c01      	lsrs	r1, r0, #16
    d85e:	2906      	cmp	r1, #6
    d860:	f47f ae7b 	bne.w	d55a <usb_isr+0x9a>
    d864:	e7f2      	b.n	d84c <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    d866:	497f      	ldr	r1, [pc, #508]	; (da64 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    d868:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    d86a:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    d86c:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    d86e:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    d870:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d872:	2380      	movs	r3, #128	; 0x80
    d874:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d876:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    d87a:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d87e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d886:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    d88a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d88e:	2b00      	cmp	r3, #0
    d890:	d1fb      	bne.n	d88a <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    d892:	0c13      	lsrs	r3, r2, #16
    d894:	065b      	lsls	r3, r3, #25
    d896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d89a:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    d89e:	e660      	b.n	d562 <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    d8a0:	4874      	ldr	r0, [pc, #464]	; (da74 <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    d8a2:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    d8a4:	f898 3000 	ldrb.w	r3, [r8]
    d8a8:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    d8aa:	f7ff fda7 	bl	d3fc <endpoint0_transmit.constprop.0>
		return;
    d8ae:	e658      	b.n	d562 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    d8b0:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    d8b2:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    d8b6:	f47f ae50 	bne.w	d55a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    d8ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    d8be:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    d8c2:	4a6c      	ldr	r2, [pc, #432]	; (da74 <usb_isr+0x5b4>)
    d8c4:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    d8c6:	0618      	lsls	r0, r3, #24
    d8c8:	d47b      	bmi.n	d9c2 <usb_isr+0x502>
    d8ca:	07cb      	lsls	r3, r1, #31
    d8cc:	d501      	bpl.n	d8d2 <usb_isr+0x412>
			reply_buffer[0] = 1;
    d8ce:	2301      	movs	r3, #1
    d8d0:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    d8d2:	2102      	movs	r1, #2
    d8d4:	4867      	ldr	r0, [pc, #412]	; (da74 <usb_isr+0x5b4>)
    d8d6:	f7ff fd91 	bl	d3fc <endpoint0_transmit.constprop.0>
		return;
    d8da:	e642      	b.n	d562 <usb_isr+0xa2>
		if (endpoint > 7) break;
    d8dc:	f010 0f78 	tst.w	r0, #120	; 0x78
    d8e0:	b283      	uxth	r3, r0
    d8e2:	f47f ae3a 	bne.w	d55a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    d8e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    d8ea:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    d8ee:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    d8f2:	bf14      	ite	ne
    d8f4:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    d8f8:	f043 0301 	orreq.w	r3, r3, #1
    d8fc:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    d900:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    d902:	4b58      	ldr	r3, [pc, #352]	; (da64 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    d904:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    d906:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    d908:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    d90a:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    d90c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d90e:	2280      	movs	r2, #128	; 0x80
    d910:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d912:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    d916:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d91a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d91e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d922:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    d926:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d92a:	2b00      	cmp	r3, #0
    d92c:	d1fb      	bne.n	d926 <usb_isr+0x466>
    d92e:	e618      	b.n	d562 <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d930:	4b51      	ldr	r3, [pc, #324]	; (da78 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    d932:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    d936:	6819      	ldr	r1, [r3, #0]
    d938:	4b50      	ldr	r3, [pc, #320]	; (da7c <usb_isr+0x5bc>)
    d93a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    d93c:	4b50      	ldr	r3, [pc, #320]	; (da80 <usb_isr+0x5c0>)
    d93e:	701a      	strb	r2, [r3, #0]
    d940:	e6fd      	b.n	d73e <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    d942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    d946:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    d94a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    d94e:	bf14      	ite	ne
    d950:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    d954:	f023 0301 	biceq.w	r3, r3, #1
    d958:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    d95c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    d95e:	4b41      	ldr	r3, [pc, #260]	; (da64 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    d960:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    d962:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    d964:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    d966:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    d968:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    d96a:	2280      	movs	r2, #128	; 0x80
    d96c:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    d96e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    d972:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    d976:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d97a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d97e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    d982:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    d986:	2b00      	cmp	r3, #0
    d988:	d1fb      	bne.n	d982 <usb_isr+0x4c2>
    d98a:	e5ea      	b.n	d562 <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    d98c:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    d98e:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    d992:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    d994:	4936      	ldr	r1, [pc, #216]	; (da70 <usb_isr+0x5b0>)
    d996:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    d998:	8809      	ldrh	r1, [r1, #0]
    d99a:	42a1      	cmp	r1, r4
    d99c:	d02f      	beq.n	d9fe <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    d99e:	f246 4221 	movw	r2, #25633	; 0x6421
    d9a2:	4291      	cmp	r1, r2
    d9a4:	f47f ae30 	bne.w	d608 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    d9a8:	4a30      	ldr	r2, [pc, #192]	; (da6c <usb_isr+0x5ac>)
    d9aa:	7811      	ldrb	r1, [r2, #0]
    d9ac:	2901      	cmp	r1, #1
    d9ae:	f47f ae2b 	bne.w	d608 <usb_isr+0x148>
    d9b2:	7852      	ldrb	r2, [r2, #1]
    d9b4:	2a40      	cmp	r2, #64	; 0x40
    d9b6:	f47f ae27 	bne.w	d608 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    d9ba:	4a2b      	ldr	r2, [pc, #172]	; (da68 <usb_isr+0x5a8>)
    d9bc:	2119      	movs	r1, #25
    d9be:	7011      	strb	r1, [r2, #0]
    d9c0:	e622      	b.n	d608 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    d9c2:	03c9      	lsls	r1, r1, #15
    d9c4:	d483      	bmi.n	d8ce <usb_isr+0x40e>
    d9c6:	e784      	b.n	d8d2 <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    d9c8:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    d9ca:	f891 a000 	ldrb.w	sl, [r1]
    d9ce:	4582      	cmp	sl, r0
    d9d0:	bf28      	it	cs
    d9d2:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    d9d4:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    d9d8:	d135      	bne.n	da46 <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    d9da:	4b2a      	ldr	r3, [pc, #168]	; (da84 <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    d9dc:	f8df b0bc 	ldr.w	fp, [pc, #188]	; da9c <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    d9e0:	7819      	ldrb	r1, [r3, #0]
    d9e2:	4a29      	ldr	r2, [pc, #164]	; (da88 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    d9e4:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    d9e6:	4b29      	ldr	r3, [pc, #164]	; (da8c <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    d9e8:	2900      	cmp	r1, #0
    d9ea:	bf0c      	ite	eq
    d9ec:	4611      	moveq	r1, r2
    d9ee:	4619      	movne	r1, r3
    d9f0:	4652      	mov	r2, sl
    d9f2:	f7ff f86f 	bl	cad4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    d9f6:	2307      	movs	r3, #7
    d9f8:	f88b 3001 	strb.w	r3, [fp, #1]
    d9fc:	e677      	b.n	d6ee <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    d9fe:	b280      	uxth	r0, r0
    da00:	2800      	cmp	r0, #0
    da02:	f47f ae01 	bne.w	d608 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    da06:	4919      	ldr	r1, [pc, #100]	; (da6c <usb_isr+0x5ac>)
    da08:	4c21      	ldr	r4, [pc, #132]	; (da90 <usb_isr+0x5d0>)
    da0a:	c903      	ldmia	r1, {r0, r1}
    da0c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    da0e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    da10:	ea4f 4111 	mov.w	r1, r1, lsr #16
    da14:	6020      	str	r0, [r4, #0]
    da16:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    da18:	f47f adf6 	bne.w	d608 <usb_isr+0x148>
	__disable_irq();
    da1c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    da1e:	481d      	ldr	r0, [pc, #116]	; (da94 <usb_isr+0x5d4>)
    da20:	7801      	ldrb	r1, [r0, #0]
    da22:	f041 0108 	orr.w	r1, r1, #8
    da26:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    da28:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    da2c:	060d      	lsls	r5, r1, #24
    da2e:	d405      	bmi.n	da3c <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    da30:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    da32:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    da34:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    da38:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    da3c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    da3e:	4a16      	ldr	r2, [pc, #88]	; (da98 <usb_isr+0x5d8>)
    da40:	2150      	movs	r1, #80	; 0x50
    da42:	7011      	strb	r1, [r2, #0]
    da44:	e5e0      	b.n	d608 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    da46:	f8df b054 	ldr.w	fp, [pc, #84]	; da9c <usb_isr+0x5dc>
    da4a:	4652      	mov	r2, sl
    da4c:	4658      	mov	r0, fp
    da4e:	f7ff f841 	bl	cad4 <memcpy>
    da52:	e64c      	b.n	d6ee <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    da54:	2003      	movs	r0, #3
    da56:	f7ff fd1d 	bl	d494 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    da5a:	f00b fedd 	bl	19818 <___reboot_Teensyduino__veneer>
    da5e:	bf00      	nop
    da60:	00cc0002 	.word	0x00cc0002
    da64:	200096c0 	.word	0x200096c0
    da68:	20009059 	.word	0x20009059
    da6c:	20042ac0 	.word	0x20042ac0
    da70:	2000bdc0 	.word	0x2000bdc0
    da74:	20042be4 	.word	0x20042be4
    da78:	200432dc 	.word	0x200432dc
    da7c:	200432f8 	.word	0x200432f8
    da80:	2004332f 	.word	0x2004332f
    da84:	20043331 	.word	0x20043331
    da88:	60002760 	.word	0x60002760
    da8c:	600026f4 	.word	0x600026f4
    da90:	200432f0 	.word	0x200432f0
    da94:	2004332a 	.word	0x2004332a
    da98:	20043332 	.word	0x20043332
    da9c:	20200800 	.word	0x20200800

0000daa0 <usb_config_rx>:
{
    daa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    daa4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    daa6:	1e83      	subs	r3, r0, #2
    daa8:	2b03      	cmp	r3, #3
    daaa:	d901      	bls.n	dab0 <usb_config_rx+0x10>
}
    daac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    dab0:	f8df 904c 	ldr.w	r9, [pc, #76]	; db00 <usb_config_rx+0x60>
    dab4:	4615      	mov	r5, r2
    dab6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    dab8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    daba:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    dabe:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    dac0:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    dac4:	2100      	movs	r1, #0
    dac6:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    daca:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    dacc:	f003 f890 	bl	10bf0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    dad0:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    dad4:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    dad6:	0952      	lsrs	r2, r2, #5
    dad8:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    dadc:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    dae0:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    dae4:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    dae8:	2f00      	cmp	r7, #0
    daea:	d0df      	beq.n	daac <usb_config_rx+0xc>
    daec:	4a03      	ldr	r2, [pc, #12]	; (dafc <usb_config_rx+0x5c>)
    daee:	40b3      	lsls	r3, r6
    daf0:	6811      	ldr	r1, [r2, #0]
    daf2:	430b      	orrs	r3, r1
    daf4:	6013      	str	r3, [r2, #0]
}
    daf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dafa:	bf00      	nop
    dafc:	20042acc 	.word	0x20042acc
    db00:	20000000 	.word	0x20000000

0000db04 <usb_config_tx>:
{
    db04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db08:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    db0a:	1e81      	subs	r1, r0, #2
    db0c:	2903      	cmp	r1, #3
    db0e:	d901      	bls.n	db14 <usb_config_tx+0x10>
}
    db10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    db14:	01c7      	lsls	r7, r0, #7
    db16:	f8df 904c 	ldr.w	r9, [pc, #76]	; db64 <usb_config_tx+0x60>
    db1a:	4692      	mov	sl, r2
    db1c:	4604      	mov	r4, r0
    db1e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    db20:	223c      	movs	r2, #60	; 0x3c
    db22:	2100      	movs	r1, #0
    db24:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    db26:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    db2a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    db2c:	f108 0004 	add.w	r0, r8, #4
    db30:	f003 f85e 	bl	10bf0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    db34:	faba f28a 	clz	r2, sl
    db38:	0952      	lsrs	r2, r2, #5
    db3a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    db3e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    db42:	2201      	movs	r2, #1
	qh->callback_function = callback;
    db44:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    db48:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    db4c:	2e00      	cmp	r6, #0
    db4e:	d0df      	beq.n	db10 <usb_config_tx+0xc>
    db50:	4b03      	ldr	r3, [pc, #12]	; (db60 <usb_config_tx+0x5c>)
    db52:	3410      	adds	r4, #16
    db54:	6819      	ldr	r1, [r3, #0]
    db56:	40a2      	lsls	r2, r4
    db58:	430a      	orrs	r2, r1
    db5a:	601a      	str	r2, [r3, #0]
}
    db5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db60:	20042acc 	.word	0x20042acc
    db64:	20000000 	.word	0x20000000

0000db68 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    db68:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    db6a:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    db6c:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    db6e:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    db72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    db76:	b410      	push	{r4}
	transfer->next = 1;
    db78:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    db7a:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    db7c:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    db80:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    db82:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    db86:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    db8a:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    db8c:	6181      	str	r1, [r0, #24]
}
    db8e:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    db92:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    db96:	4770      	bx	lr

0000db98 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    db98:	1e83      	subs	r3, r0, #2
{
    db9a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    db9c:	2b03      	cmp	r3, #3
    db9e:	d900      	bls.n	dba2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    dba0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    dba2:	4b06      	ldr	r3, [pc, #24]	; (dbbc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    dba4:	f100 0110 	add.w	r1, r0, #16
    dba8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    dbac:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    dbb0:	fa0c f101 	lsl.w	r1, ip, r1
    dbb4:	3040      	adds	r0, #64	; 0x40
    dbb6:	f7ff bbc1 	b.w	d33c <schedule_transfer>
    dbba:	bf00      	nop
    dbbc:	20000000 	.word	0x20000000

0000dbc0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    dbc0:	1e83      	subs	r3, r0, #2
{
    dbc2:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    dbc4:	2b03      	cmp	r3, #3
    dbc6:	d900      	bls.n	dbca <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    dbc8:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    dbca:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    dbcc:	4b02      	ldr	r3, [pc, #8]	; (dbd8 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    dbce:	4081      	lsls	r1, r0
    dbd0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    dbd4:	f7ff bbb2 	b.w	d33c <schedule_transfer>
    dbd8:	20000000 	.word	0x20000000

0000dbdc <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    dbdc:	4a08      	ldr	r2, [pc, #32]	; (dc00 <usb_transfer_status+0x24>)
    dbde:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    dbe2:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    dbe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    dbe8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    dbec:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    dbee:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    dbf2:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    dbf4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    dbf8:	d0f3      	beq.n	dbe2 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    dbfa:	4608      	mov	r0, r1
    dbfc:	4770      	bx	lr
    dbfe:	bf00      	nop
    dc00:	402e0000 	.word	0x402e0000

0000dc04 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    dc04:	4a12      	ldr	r2, [pc, #72]	; (dc50 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    dc06:	4b13      	ldr	r3, [pc, #76]	; (dc54 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    dc08:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    dc0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    dc10:	4298      	cmp	r0, r3
{
    dc12:	b510      	push	{r4, lr}
    dc14:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    dc16:	d202      	bcs.n	dc1e <usb_init_serialnumber+0x1a>
    dc18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    dc1c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    dc1e:	4c0e      	ldr	r4, [pc, #56]	; (dc58 <usb_init_serialnumber+0x54>)
    dc20:	a901      	add	r1, sp, #4
    dc22:	220a      	movs	r2, #10
    dc24:	f7fe fff2 	bl	cc0c <ultoa>
	for (i=0; i<10; i++) {
    dc28:	a901      	add	r1, sp, #4
    dc2a:	2300      	movs	r3, #0
    dc2c:	4620      	mov	r0, r4
		char c = buf[i];
    dc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    dc32:	3301      	adds	r3, #1
		if (!c) break;
    dc34:	b13a      	cbz	r2, dc46 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    dc36:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    dc38:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    dc3c:	d1f7      	bne.n	dc2e <usb_init_serialnumber+0x2a>
    dc3e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    dc40:	7023      	strb	r3, [r4, #0]
}
    dc42:	b004      	add	sp, #16
    dc44:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    dc46:	005b      	lsls	r3, r3, #1
    dc48:	b2db      	uxtb	r3, r3
    dc4a:	7023      	strb	r3, [r4, #0]
}
    dc4c:	b004      	add	sp, #16
    dc4e:	bd10      	pop	{r4, pc}
    dc50:	401f4400 	.word	0x401f4400
    dc54:	00989680 	.word	0x00989680
    dc58:	20009040 	.word	0x20009040

0000dc5c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    dc5c:	f000 bc5c 	b.w	e518 <usb_serial_flush_input>

0000dc60 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    dc60:	f000 bc4e 	b.w	e500 <usb_serial_available>

0000dc64 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    dc64:	f000 bcea 	b.w	e63c <usb_serial_flush_output>

0000dc68 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    dc68:	f000 bcc0 	b.w	e5ec <usb_serial_write_buffer_free>

0000dc6c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    dc6c:	4608      	mov	r0, r1
    dc6e:	4611      	mov	r1, r2
    dc70:	f000 bcb0 	b.w	e5d4 <usb_serial_write>

0000dc74 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    dc74:	4a02      	ldr	r2, [pc, #8]	; (dc80 <txEvent_event+0xc>)
    dc76:	6813      	ldr	r3, [r2, #0]
    dc78:	3301      	adds	r3, #1
    dc7a:	6013      	str	r3, [r2, #0]
    dc7c:	4770      	bx	lr
    dc7e:	bf00      	nop
    dc80:	20042b5c 	.word	0x20042b5c

0000dc84 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    dc84:	4a0e      	ldr	r2, [pc, #56]	; (dcc0 <rx_event+0x3c>)
{
    dc86:	b410      	push	{r4}
	uint32_t head = rx_head;
    dc88:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    dc8a:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    dc8c:	3301      	adds	r3, #1
    dc8e:	2b04      	cmp	r3, #4
    dc90:	d811      	bhi.n	dcb6 <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    dc92:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dc96:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    dc98:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dc9c:	4a09      	ldr	r2, [pc, #36]	; (dcc4 <rx_event+0x40>)
    dc9e:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    dca2:	4809      	ldr	r0, [pc, #36]	; (dcc8 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dca4:	8812      	ldrh	r2, [r2, #0]
    dca6:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    dca8:	4908      	ldr	r1, [pc, #32]	; (dccc <rx_event+0x48>)
    dcaa:	54cc      	strb	r4, [r1, r3]
}
    dcac:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    dcb0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    dcb4:	4770      	bx	lr
    dcb6:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    dcba:	4663      	mov	r3, ip
    dcbc:	e7eb      	b.n	dc96 <rx_event+0x12>
    dcbe:	bf00      	nop
    dcc0:	20043326 	.word	0x20043326
    dcc4:	20043312 	.word	0x20043312
    dcc8:	20042c24 	.word	0x20042c24
    dccc:	20042c10 	.word	0x20042c10

0000dcd0 <rx_queue_transfer>:
{
    dcd0:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    dcd2:	4915      	ldr	r1, [pc, #84]	; (dd28 <rx_queue_transfer+0x58>)
{
    dcd4:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    dcd6:	4d15      	ldr	r5, [pc, #84]	; (dd2c <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    dcd8:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    dcdc:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    dce0:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    dce2:	448c      	add	ip, r1
	asm("dsb");
    dce4:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    dce8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    dcec:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    dcf0:	3220      	adds	r2, #32
	} while (location < end_addr);
    dcf2:	4594      	cmp	ip, r2
    dcf4:	d8fa      	bhi.n	dcec <rx_queue_transfer+0x1c>
	asm("dsb");
    dcf6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    dcfa:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dcfe:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dd00:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dd04:	4d0a      	ldr	r5, [pc, #40]	; (dd30 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dd06:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    dd0a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    dd0e:	4628      	mov	r0, r5
    dd10:	f7ff ff2a 	bl	db68 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    dd14:	4629      	mov	r1, r5
    dd16:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    dd18:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    dd1c:	f7ff ff50 	bl	dbc0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    dd20:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    dd24:	bd70      	pop	{r4, r5, r6, pc}
    dd26:	bf00      	nop
    dd28:	20200880 	.word	0x20200880
    dd2c:	20043312 	.word	0x20043312
    dd30:	2000bb40 	.word	0x2000bb40

0000dd34 <usb_mtp_configure>:
	if (usb_high_speed) {
    dd34:	4b1f      	ldr	r3, [pc, #124]	; (ddb4 <usb_mtp_configure+0x80>)
{
    dd36:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    dd38:	781b      	ldrb	r3, [r3, #0]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d037      	beq.n	ddae <usb_mtp_configure+0x7a>
    dd3e:	f44f 7300 	mov.w	r3, #512	; 0x200
    dd42:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    dd44:	491c      	ldr	r1, [pc, #112]	; (ddb8 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    dd46:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    dd48:	4d1c      	ldr	r5, [pc, #112]	; (ddbc <usb_mtp_configure+0x88>)
	tx_head = 0;
    dd4a:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    dd4c:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    dd4e:	2100      	movs	r1, #0
    dd50:	481b      	ldr	r0, [pc, #108]	; (ddc0 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    dd52:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    dd54:	f002 ff4c 	bl	10bf0 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    dd58:	2280      	movs	r2, #128	; 0x80
    dd5a:	2100      	movs	r1, #0
    dd5c:	4819      	ldr	r0, [pc, #100]	; (ddc4 <usb_mtp_configure+0x90>)
    dd5e:	f002 ff47 	bl	10bf0 <memset>
	rx_head = 0;
    dd62:	4b19      	ldr	r3, [pc, #100]	; (ddc8 <usb_mtp_configure+0x94>)
	tx_head = 0;
    dd64:	4a19      	ldr	r2, [pc, #100]	; (ddcc <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    dd66:	4631      	mov	r1, r6
	rx_head = 0;
    dd68:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    dd6a:	2004      	movs	r0, #4
	rx_tail = 0;
    dd6c:	4b18      	ldr	r3, [pc, #96]	; (ddd0 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    dd6e:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    dd70:	4622      	mov	r2, r4
	rx_tail = 0;
    dd72:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    dd74:	4623      	mov	r3, r4
    dd76:	f7ff fec5 	bl	db04 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    dd7a:	4622      	mov	r2, r4
    dd7c:	8829      	ldrh	r1, [r5, #0]
    dd7e:	2004      	movs	r0, #4
    dd80:	4b14      	ldr	r3, [pc, #80]	; (ddd4 <usb_mtp_configure+0xa0>)
    dd82:	f7ff fe8d 	bl	daa0 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    dd86:	4622      	mov	r2, r4
    dd88:	4b13      	ldr	r3, [pc, #76]	; (ddd8 <usb_mtp_configure+0xa4>)
    dd8a:	2120      	movs	r1, #32
    dd8c:	2005      	movs	r0, #5
    dd8e:	f7ff feb9 	bl	db04 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    dd92:	4620      	mov	r0, r4
    dd94:	f7ff ff9c 	bl	dcd0 <rx_queue_transfer>
    dd98:	2001      	movs	r0, #1
    dd9a:	f7ff ff99 	bl	dcd0 <rx_queue_transfer>
    dd9e:	2002      	movs	r0, #2
    dda0:	f7ff ff96 	bl	dcd0 <rx_queue_transfer>
    dda4:	2003      	movs	r0, #3
}
    dda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ddaa:	f7ff bf91 	b.w	dcd0 <rx_queue_transfer>
    ddae:	2340      	movs	r3, #64	; 0x40
    ddb0:	461e      	mov	r6, r3
    ddb2:	e7c7      	b.n	dd44 <usb_mtp_configure+0x10>
    ddb4:	20043331 	.word	0x20043331
    ddb8:	20043318 	.word	0x20043318
    ddbc:	20043312 	.word	0x20043312
    ddc0:	2000bcc0 	.word	0x2000bcc0
    ddc4:	2000bb40 	.word	0x2000bb40
    ddc8:	20043326 	.word	0x20043326
    ddcc:	2004332c 	.word	0x2004332c
    ddd0:	20043328 	.word	0x20043328
    ddd4:	0000dc85 	.word	0x0000dc85
    ddd8:	0000dc75 	.word	0x0000dc75

0000dddc <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    dddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    dde0:	4e20      	ldr	r6, [pc, #128]	; (de64 <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    dde2:	f8df b094 	ldr.w	fp, [pc, #148]	; de78 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    dde6:	4f20      	ldr	r7, [pc, #128]	; (de68 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    dde8:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    ddec:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    ddf0:	783b      	ldrb	r3, [r7, #0]
    ddf2:	b353      	cbz	r3, de4a <usb_mtp_recv+0x6e>
    ddf4:	4682      	mov	sl, r0
    ddf6:	460d      	mov	r5, r1
    ddf8:	b2e4      	uxtb	r4, r4
    ddfa:	f8df 8080 	ldr.w	r8, [pc, #128]	; de7c <usb_mtp_recv+0xa0>
    ddfe:	e008      	b.n	de12 <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    de00:	6833      	ldr	r3, [r6, #0]
    de02:	eba3 0309 	sub.w	r3, r3, r9
    de06:	42ab      	cmp	r3, r5
    de08:	d224      	bcs.n	de54 <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    de0a:	f000 fc61 	bl	e6d0 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    de0e:	783b      	ldrb	r3, [r7, #0]
    de10:	b1db      	cbz	r3, de4a <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    de12:	f898 3000 	ldrb.w	r3, [r8]
    de16:	429c      	cmp	r4, r3
    de18:	d0f2      	beq.n	de00 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    de1a:	3401      	adds	r4, #1
    de1c:	2c04      	cmp	r4, #4
    de1e:	d81d      	bhi.n	de5c <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    de20:	b2e3      	uxtb	r3, r4
    de22:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    de26:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    de28:	4b10      	ldr	r3, [pc, #64]	; (de6c <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    de2a:	4a11      	ldr	r2, [pc, #68]	; (de70 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    de2c:	4911      	ldr	r1, [pc, #68]	; (de74 <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    de2e:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    de30:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    de34:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    de38:	4622      	mov	r2, r4
    de3a:	f7fe fe4b 	bl	cad4 <memcpy>
	rx_queue_transfer(i);
    de3e:	4628      	mov	r0, r5
    de40:	f7ff ff46 	bl	dcd0 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    de44:	4620      	mov	r0, r4
    de46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    de4a:	f04f 34ff 	mov.w	r4, #4294967295
}
    de4e:	4620      	mov	r0, r4
    de50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    de54:	2400      	movs	r4, #0
}
    de56:	4620      	mov	r0, r4
    de58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de5c:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    de5e:	461c      	mov	r4, r3
    de60:	e7df      	b.n	de22 <usb_mtp_recv+0x46>
    de62:	bf00      	nop
    de64:	200432dc 	.word	0x200432dc
    de68:	20043330 	.word	0x20043330
    de6c:	20042c24 	.word	0x20042c24
    de70:	20042c10 	.word	0x20042c10
    de74:	20200880 	.word	0x20200880
    de78:	20043328 	.word	0x20043328
    de7c:	20043326 	.word	0x20043326

0000de80 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    de80:	4b07      	ldr	r3, [pc, #28]	; (dea0 <usb_mtp_available+0x20>)
    de82:	781b      	ldrb	r3, [r3, #0]
    de84:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    de88:	b14b      	cbz	r3, de9e <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    de8a:	4a06      	ldr	r2, [pc, #24]	; (dea4 <usb_mtp_available+0x24>)
    de8c:	4b06      	ldr	r3, [pc, #24]	; (dea8 <usb_mtp_available+0x28>)
    de8e:	7812      	ldrb	r2, [r2, #0]
    de90:	781b      	ldrb	r3, [r3, #0]
    de92:	429a      	cmp	r2, r3
    de94:	d002      	beq.n	de9c <usb_mtp_available+0x1c>
    de96:	4b05      	ldr	r3, [pc, #20]	; (deac <usb_mtp_available+0x2c>)
    de98:	8818      	ldrh	r0, [r3, #0]
    de9a:	4770      	bx	lr
	if (!usb_configuration) return 0;
    de9c:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    de9e:	4770      	bx	lr
    dea0:	20043330 	.word	0x20043330
    dea4:	20043326 	.word	0x20043326
    dea8:	20043328 	.word	0x20043328
    deac:	20043312 	.word	0x20043312

0000deb0 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    deb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    deb4:	f8df b0c0 	ldr.w	fp, [pc, #192]	; df78 <usb_mtp_send+0xc8>
    deb8:	4c2a      	ldr	r4, [pc, #168]	; (df64 <usb_mtp_send+0xb4>)
    deba:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    debe:	4e2a      	ldr	r6, [pc, #168]	; (df68 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    dec0:	4f2a      	ldr	r7, [pc, #168]	; (df6c <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    dec2:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    dec6:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    deca:	783b      	ldrb	r3, [r7, #0]
    decc:	2b00      	cmp	r3, #0
    dece:	d042      	beq.n	df56 <usb_mtp_send+0xa6>
    ded0:	4682      	mov	sl, r0
    ded2:	4689      	mov	r9, r1
    ded4:	4615      	mov	r5, r2
    ded6:	e008      	b.n	deea <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    ded8:	6833      	ldr	r3, [r6, #0]
    deda:	eba3 0308 	sub.w	r3, r3, r8
    dede:	42ab      	cmp	r3, r5
    dee0:	d83d      	bhi.n	df5e <usb_mtp_send+0xae>
		yield();
    dee2:	f000 fbf5 	bl	e6d0 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    dee6:	783b      	ldrb	r3, [r7, #0]
    dee8:	b3ab      	cbz	r3, df56 <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    deea:	4620      	mov	r0, r4
    deec:	f7ff fe76 	bl	dbdc <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    def0:	0603      	lsls	r3, r0, #24
    def2:	d4f1      	bmi.n	ded8 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    def4:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    def8:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    defa:	4d1d      	ldr	r5, [pc, #116]	; (df70 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    defc:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    defe:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    df02:	4628      	mov	r0, r5
    df04:	f7fe fde6 	bl	cad4 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    df08:	4a1a      	ldr	r2, [pc, #104]	; (df74 <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    df0a:	462b      	mov	r3, r5
    df0c:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    df0e:	442a      	add	r2, r5
	asm("dsb");
    df10:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    df14:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    df18:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    df1c:	3320      	adds	r3, #32
	} while (location < end_addr);
    df1e:	429a      	cmp	r2, r3
    df20:	d8fa      	bhi.n	df18 <usb_mtp_send+0x68>
	asm("dsb");
    df22:	f3bf 8f4f 	dsb	sy
	asm("isb");
    df26:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    df2a:	2300      	movs	r3, #0
    df2c:	4629      	mov	r1, r5
    df2e:	464a      	mov	r2, r9
    df30:	4620      	mov	r0, r4
    df32:	f7ff fe19 	bl	db68 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    df36:	4621      	mov	r1, r4
    df38:	2004      	movs	r0, #4
    df3a:	f7ff fe2d 	bl	db98 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    df3e:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    df42:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    df44:	3301      	adds	r3, #1
    df46:	b2db      	uxtb	r3, r3
    df48:	2b03      	cmp	r3, #3
    df4a:	bf88      	it	hi
    df4c:	2300      	movhi	r3, #0
    df4e:	f88b 3000 	strb.w	r3, [fp]
}
    df52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    df56:	f04f 30ff 	mov.w	r0, #4294967295
}
    df5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    df5e:	2000      	movs	r0, #0
}
    df60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df64:	2000bcc0 	.word	0x2000bcc0
    df68:	200432dc 	.word	0x200432dc
    df6c:	20043330 	.word	0x20043330
    df70:	20201080 	.word	0x20201080
    df74:	20043318 	.word	0x20043318
    df78:	2004332c 	.word	0x2004332c

0000df7c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    df7e:	4c14      	ldr	r4, [pc, #80]	; (dfd0 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    df80:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    df84:	4e13      	ldr	r6, [pc, #76]	; (dfd4 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    df86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    df8a:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    df8e:	4f12      	ldr	r7, [pc, #72]	; (dfd8 <rx_queue_transfer+0x5c>)
    df90:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    df94:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    df96:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    df9a:	4621      	mov	r1, r4
    df9c:	883a      	ldrh	r2, [r7, #0]
    df9e:	4630      	mov	r0, r6
    dfa0:	f7ff fde2 	bl	db68 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    dfa4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    dfa6:	4423      	add	r3, r4
	asm("dsb");
    dfa8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    dfac:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    dfb0:	3420      	adds	r4, #32
	} while (location < end_addr);
    dfb2:	42a3      	cmp	r3, r4
    dfb4:	d8fa      	bhi.n	dfac <rx_queue_transfer+0x30>
	asm("dsb");
    dfb6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    dfba:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    dfbe:	2003      	movs	r0, #3
    dfc0:	4631      	mov	r1, r6
    dfc2:	f7ff fdfd 	bl	dbc0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    dfc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    dfca:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dfd0:	20201880 	.word	0x20201880
    dfd4:	2000bbc0 	.word	0x2000bbc0
    dfd8:	20043314 	.word	0x20043314

0000dfdc <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dfdc:	4b24      	ldr	r3, [pc, #144]	; (e070 <rx_event+0x94>)
{
    dfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dfe2:	881c      	ldrh	r4, [r3, #0]
    dfe4:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    dfe6:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    dfe8:	f3c3 430e 	ubfx	r3, r3, #16, #15
    dfec:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    dfee:	2c00      	cmp	r4, #0
    dff0:	dd24      	ble.n	e03c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    dff2:	4920      	ldr	r1, [pc, #128]	; (e074 <rx_event+0x98>)
		if (head != rx_tail) {
    dff4:	4820      	ldr	r0, [pc, #128]	; (e078 <rx_event+0x9c>)
		uint32_t head = rx_head;
    dff6:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    dff8:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    dffa:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    dffc:	4e1f      	ldr	r6, [pc, #124]	; (e07c <rx_event+0xa0>)
		if (head != rx_tail) {
    dffe:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    e000:	481f      	ldr	r0, [pc, #124]	; (e080 <rx_event+0xa4>)
		if (head != rx_tail) {
    e002:	d007      	beq.n	e014 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    e004:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    e008:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    e00c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    e010:	4294      	cmp	r4, r2
    e012:	d918      	bls.n	e046 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    e014:	3301      	adds	r3, #1
		rx_index[i] = 0;
    e016:	2200      	movs	r2, #0
		rx_count[i] = len;
    e018:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    e01c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    e01e:	4e19      	ldr	r6, [pc, #100]	; (e084 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    e020:	bf88      	it	hi
    e022:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    e024:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    e028:	bf98      	it	ls
    e02a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    e02c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    e02e:	4b16      	ldr	r3, [pc, #88]	; (e088 <rx_event+0xac>)
		rx_head = head;
    e030:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    e032:	681a      	ldr	r2, [r3, #0]
    e034:	4414      	add	r4, r2
    e036:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    e038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    e03c:	4628      	mov	r0, r5
}
    e03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    e042:	f7ff bf9b 	b.w	df7c <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e046:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    e04a:	4910      	ldr	r1, [pc, #64]	; (e08c <rx_event+0xb0>)
    e04c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    e04e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    e050:	4408      	add	r0, r1
    e052:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    e056:	f7fe fd3d 	bl	cad4 <memcpy>
				rx_available += len;
    e05a:	4a0b      	ldr	r2, [pc, #44]	; (e088 <rx_event+0xac>)
				rx_queue_transfer(i);
    e05c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    e05e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    e062:	6813      	ldr	r3, [r2, #0]
    e064:	4423      	add	r3, r4
}
    e066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    e06a:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    e06c:	f7ff bf86 	b.w	df7c <rx_queue_transfer>
    e070:	20043314 	.word	0x20043314
    e074:	20043327 	.word	0x20043327
    e078:	20043329 	.word	0x20043329
    e07c:	20042bf0 	.word	0x20042bf0
    e080:	20042c18 	.word	0x20042c18
    e084:	20042c00 	.word	0x20042c00
    e088:	20042bec 	.word	0x20042bec
    e08c:	20201880 	.word	0x20201880

0000e090 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    e090:	4b1d      	ldr	r3, [pc, #116]	; (e108 <usb_serial_flush_callback+0x78>)
    e092:	781a      	ldrb	r2, [r3, #0]
    e094:	2a00      	cmp	r2, #0
    e096:	d136      	bne.n	e106 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    e098:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    e09c:	4a1b      	ldr	r2, [pc, #108]	; (e10c <usb_serial_flush_callback+0x7c>)
    e09e:	7812      	ldrb	r2, [r2, #0]
    e0a0:	b38a      	cbz	r2, e106 <usb_serial_flush_callback+0x76>
{
    e0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    e0a6:	4d1a      	ldr	r5, [pc, #104]	; (e110 <usb_serial_flush_callback+0x80>)
    e0a8:	882a      	ldrh	r2, [r5, #0]
    e0aa:	b352      	cbz	r2, e102 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    e0ac:	4e19      	ldr	r6, [pc, #100]	; (e114 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    e0ae:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    e0b2:	4f19      	ldr	r7, [pc, #100]	; (e118 <usb_serial_flush_callback+0x88>)
    e0b4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e0b6:	4c19      	ldr	r4, [pc, #100]	; (e11c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    e0b8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e0bc:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e0c0:	4642      	mov	r2, r8
    e0c2:	4638      	mov	r0, r7
    e0c4:	4621      	mov	r1, r4
    e0c6:	f7ff fd4f 	bl	db68 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    e0ca:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    e0ce:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e0d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e0d6:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    e0da:	3420      	adds	r4, #32
	} while (location < end_addr);
    e0dc:	42a2      	cmp	r2, r4
    e0de:	d8fa      	bhi.n	e0d6 <usb_serial_flush_callback+0x46>
	asm("dsb");
    e0e0:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e0e4:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e0e8:	2003      	movs	r0, #3
    e0ea:	4639      	mov	r1, r7
    e0ec:	f7ff fd54 	bl	db98 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e0f0:	7833      	ldrb	r3, [r6, #0]
    e0f2:	3301      	adds	r3, #1
    e0f4:	b2db      	uxtb	r3, r3
    e0f6:	2b03      	cmp	r3, #3
    e0f8:	bf88      	it	hi
    e0fa:	2300      	movhi	r3, #0
    e0fc:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    e0fe:	2300      	movs	r3, #0
    e100:	802b      	strh	r3, [r5, #0]
}
    e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e106:	4770      	bx	lr
    e108:	2004332e 	.word	0x2004332e
    e10c:	20043330 	.word	0x20043330
    e110:	20043316 	.word	0x20043316
    e114:	2004332d 	.word	0x2004332d
    e118:	2000bd40 	.word	0x2000bd40
    e11c:	20202880 	.word	0x20202880

0000e120 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e124:	b085      	sub	sp, #20
	while (size > 0) {
    e126:	e9cd 1001 	strd	r1, r0, [sp, #4]
    e12a:	2900      	cmp	r1, #0
    e12c:	f000 80bf 	beq.w	e2ae <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    e130:	2300      	movs	r3, #0
    e132:	4c60      	ldr	r4, [pc, #384]	; (e2b4 <usb_serial_write.part.0+0x194>)
    e134:	f8df 8198 	ldr.w	r8, [pc, #408]	; e2d0 <usb_serial_write.part.0+0x1b0>
    e138:	f8df a198 	ldr.w	sl, [pc, #408]	; e2d4 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    e13c:	4f5e      	ldr	r7, [pc, #376]	; (e2b8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    e13e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    e140:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    e142:	4a5e      	ldr	r2, [pc, #376]	; (e2bc <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    e144:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    e146:	4b5e      	ldr	r3, [pc, #376]	; (e2c0 <usb_serial_write.part.0+0x1a0>)
    e148:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    e14a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    e14e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    e152:	2b00      	cmp	r3, #0
    e154:	f040 80a7 	bne.w	e2a6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    e158:	461e      	mov	r6, r3
		int waiting=0;
    e15a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    e15c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    e15e:	4648      	mov	r0, r9
    e160:	f7ff fd3c 	bl	dbdc <usb_transfer_status>
			if (!(status & 0x80)) {
    e164:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    e168:	f000 808c 	beq.w	e284 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    e16c:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    e170:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    e174:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    e178:	b905      	cbnz	r5, e17c <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    e17a:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    e17c:	2b00      	cmp	r3, #0
    e17e:	d17d      	bne.n	e27c <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    e180:	683b      	ldr	r3, [r7, #0]
    e182:	1b9b      	subs	r3, r3, r6
    e184:	2b78      	cmp	r3, #120	; 0x78
    e186:	f200 8087 	bhi.w	e298 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    e18a:	4b4e      	ldr	r3, [pc, #312]	; (e2c4 <usb_serial_write.part.0+0x1a4>)
    e18c:	781b      	ldrb	r3, [r3, #0]
    e18e:	2b00      	cmp	r3, #0
    e190:	d074      	beq.n	e27c <usb_serial_write.part.0+0x15c>
			yield();
    e192:	f000 fa9d 	bl	e6d0 <yield>
			tx_noautoflush = 1;
    e196:	2201      	movs	r2, #1
		while (!tx_available) {
    e198:	f8b8 3000 	ldrh.w	r3, [r8]
    e19c:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    e19e:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    e1a0:	2b00      	cmp	r3, #0
    e1a2:	d0dc      	beq.n	e15e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e1a4:	4a46      	ldr	r2, [pc, #280]	; (e2c0 <usb_serial_write.part.0+0x1a0>)
    e1a6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    e1aa:	7811      	ldrb	r1, [r2, #0]
    e1ac:	461a      	mov	r2, r3
    e1ae:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    e1b2:	4d45      	ldr	r5, [pc, #276]	; (e2c8 <usb_serial_write.part.0+0x1a8>)
    e1b4:	02c9      	lsls	r1, r1, #11
    e1b6:	4428      	add	r0, r5
		if (size >= tx_available) {
    e1b8:	9d01      	ldr	r5, [sp, #4]
    e1ba:	4295      	cmp	r5, r2
    e1bc:	d217      	bcs.n	e1ee <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    e1be:	9303      	str	r3, [sp, #12]
    e1c0:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    e1c4:	462a      	mov	r2, r5
    e1c6:	f7fe fc85 	bl	cad4 <memcpy>
			tx_available -= size;
    e1ca:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e1cc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    e1d0:	1b5b      	subs	r3, r3, r5
    e1d2:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    e1d6:	4b3d      	ldr	r3, [pc, #244]	; (e2cc <usb_serial_write.part.0+0x1ac>)
    e1d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    e1dc:	f3bf 8f4f 	dsb	sy
			sent += size;
    e1e0:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    e1e2:	2300      	movs	r3, #0
			sent += size;
    e1e4:	4428      	add	r0, r5
		tx_noautoflush = 0;
    e1e6:	7023      	strb	r3, [r4, #0]
}
    e1e8:	b005      	add	sp, #20
    e1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e1ee:	4b36      	ldr	r3, [pc, #216]	; (e2c8 <usb_serial_write.part.0+0x1a8>)
    e1f0:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    e1f2:	9902      	ldr	r1, [sp, #8]
    e1f4:	f7fe fc6e 	bl	cad4 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    e1f8:	2300      	movs	r3, #0
    e1fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e1fe:	4629      	mov	r1, r5
    e200:	4648      	mov	r0, r9
    e202:	f7ff fcb1 	bl	db68 <usb_prepare_transfer>
	asm("dsb");
    e206:	f3bf 8f4f 	dsb	sy
    e20a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    e20e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    e212:	4293      	cmp	r3, r2
    e214:	bf34      	ite	cc
    e216:	2301      	movcc	r3, #1
    e218:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    e21a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e21e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    e222:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    e226:	3520      	adds	r5, #32
	} while (location < end_addr);
    e228:	42ab      	cmp	r3, r5
    e22a:	d1fa      	bne.n	e222 <usb_serial_write.part.0+0x102>
	asm("dsb");
    e22c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e230:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    e234:	2003      	movs	r0, #3
    e236:	4649      	mov	r1, r9
    e238:	f7ff fcae 	bl	db98 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    e23c:	4a20      	ldr	r2, [pc, #128]	; (e2c0 <usb_serial_write.part.0+0x1a0>)
    e23e:	7813      	ldrb	r3, [r2, #0]
    e240:	3301      	adds	r3, #1
    e242:	b2db      	uxtb	r3, r3
    e244:	2b03      	cmp	r3, #3
    e246:	bf84      	itt	hi
    e248:	2300      	movhi	r3, #0
    e24a:	4a1d      	ldrhi	r2, [pc, #116]	; (e2c0 <usb_serial_write.part.0+0x1a0>)
    e24c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    e24e:	f8b8 3000 	ldrh.w	r3, [r8]
    e252:	9a01      	ldr	r2, [sp, #4]
    e254:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    e256:	9a00      	ldr	r2, [sp, #0]
    e258:	441a      	add	r2, r3
			size -= tx_available;
    e25a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    e25c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    e25e:	9a02      	ldr	r2, [sp, #8]
    e260:	441a      	add	r2, r3
			tx_available = 0;
    e262:	2300      	movs	r3, #0
			data += tx_available;
    e264:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    e266:	4a19      	ldr	r2, [pc, #100]	; (e2cc <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    e268:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    e26c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    e270:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    e274:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    e276:	2900      	cmp	r1, #0
    e278:	f47f af62 	bne.w	e140 <usb_serial_write.part.0+0x20>
	return sent;
    e27c:	9800      	ldr	r0, [sp, #0]
}
    e27e:	b005      	add	sp, #20
    e280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    e284:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e288:	4b0d      	ldr	r3, [pc, #52]	; (e2c0 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    e28a:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e28e:	7819      	ldrb	r1, [r3, #0]
				break;
    e290:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    e292:	f8a8 2000 	strh.w	r2, [r8]
				break;
    e296:	e78a      	b.n	e1ae <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    e298:	2301      	movs	r3, #1
				return sent;
    e29a:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    e29c:	f88a 3000 	strb.w	r3, [sl]
}
    e2a0:	b005      	add	sp, #20
    e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    e2a6:	461a      	mov	r2, r3
    e2a8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    e2ac:	e77f      	b.n	e1ae <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    e2ae:	9801      	ldr	r0, [sp, #4]
	return sent;
    e2b0:	e7e5      	b.n	e27e <usb_serial_write.part.0+0x15e>
    e2b2:	bf00      	nop
    e2b4:	2004332e 	.word	0x2004332e
    e2b8:	200432dc 	.word	0x200432dc
    e2bc:	2000bd40 	.word	0x2000bd40
    e2c0:	2004332d 	.word	0x2004332d
    e2c4:	20043330 	.word	0x20043330
    e2c8:	20202880 	.word	0x20202880
    e2cc:	402e0000 	.word	0x402e0000
    e2d0:	20043316 	.word	0x20043316
    e2d4:	2004332b 	.word	0x2004332b

0000e2d8 <usb_serial_reset>:
}
    e2d8:	4770      	bx	lr
    e2da:	bf00      	nop

0000e2dc <usb_serial_configure>:
	if (usb_high_speed) {
    e2dc:	4b2d      	ldr	r3, [pc, #180]	; (e394 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e2de:	2100      	movs	r1, #0
    e2e0:	2280      	movs	r2, #128	; 0x80
    e2e2:	482d      	ldr	r0, [pc, #180]	; (e398 <usb_serial_configure+0xbc>)
{
    e2e4:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e2e6:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    e2e8:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    e2ea:	4d2c      	ldr	r5, [pc, #176]	; (e39c <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    e2ec:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    e2ee:	4e2c      	ldr	r6, [pc, #176]	; (e3a0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    e2f0:	bf0c      	ite	eq
    e2f2:	2340      	moveq	r3, #64	; 0x40
    e2f4:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    e2f8:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    e2fa:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e2fc:	f002 fc78 	bl	10bf0 <memset>
	tx_head = 0;
    e300:	4a28      	ldr	r2, [pc, #160]	; (e3a4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e302:	4621      	mov	r1, r4
	tx_available = 0;
    e304:	4b28      	ldr	r3, [pc, #160]	; (e3a8 <usb_serial_configure+0xcc>)
	tx_head = 0;
    e306:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e308:	f44f 7280 	mov.w	r2, #256	; 0x100
    e30c:	4827      	ldr	r0, [pc, #156]	; (e3ac <usb_serial_configure+0xd0>)
	tx_available = 0;
    e30e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e310:	f002 fc6e 	bl	10bf0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    e314:	4a26      	ldr	r2, [pc, #152]	; (e3b0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e316:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    e318:	4b26      	ldr	r3, [pc, #152]	; (e3b4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e31a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    e31c:	e9c2 4400 	strd	r4, r4, [r2]
    e320:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    e324:	4a24      	ldr	r2, [pc, #144]	; (e3b8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    e326:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    e32a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    e32c:	4a23      	ldr	r2, [pc, #140]	; (e3bc <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    e32e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    e332:	4b23      	ldr	r3, [pc, #140]	; (e3c0 <usb_serial_configure+0xe4>)
    e334:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e336:	4623      	mov	r3, r4
	rx_available = 0;
    e338:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    e33a:	4622      	mov	r2, r4
    e33c:	f7ff fbe2 	bl	db04 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e340:	4622      	mov	r2, r4
    e342:	8831      	ldrh	r1, [r6, #0]
    e344:	2003      	movs	r0, #3
    e346:	4b1f      	ldr	r3, [pc, #124]	; (e3c4 <usb_serial_configure+0xe8>)
    e348:	f7ff fbaa 	bl	daa0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    e34c:	4623      	mov	r3, r4
    e34e:	2201      	movs	r2, #1
    e350:	8829      	ldrh	r1, [r5, #0]
    e352:	2003      	movs	r0, #3
    e354:	f7ff fbd6 	bl	db04 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    e358:	4620      	mov	r0, r4
    e35a:	3401      	adds	r4, #1
    e35c:	f7ff fe0e 	bl	df7c <rx_queue_transfer>
    e360:	2c08      	cmp	r4, #8
    e362:	d1f9      	bne.n	e358 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    e364:	4b18      	ldr	r3, [pc, #96]	; (e3c8 <usb_serial_configure+0xec>)
    e366:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    e368:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    e36a:	4818      	ldr	r0, [pc, #96]	; (e3cc <usb_serial_configure+0xf0>)
    e36c:	4c18      	ldr	r4, [pc, #96]	; (e3d0 <usb_serial_configure+0xf4>)
    e36e:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    e370:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    e374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e378:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    e37c:	4915      	ldr	r1, [pc, #84]	; (e3d4 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    e37e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    e382:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    e386:	b121      	cbz	r1, e392 <usb_serial_configure+0xb6>
    e388:	4a13      	ldr	r2, [pc, #76]	; (e3d8 <usb_serial_configure+0xfc>)
    e38a:	7813      	ldrb	r3, [r2, #0]
    e38c:	f043 0301 	orr.w	r3, r3, #1
    e390:	7013      	strb	r3, [r2, #0]
}
    e392:	bd70      	pop	{r4, r5, r6, pc}
    e394:	20043331 	.word	0x20043331
    e398:	2000bd40 	.word	0x2000bd40
    e39c:	2004331a 	.word	0x2004331a
    e3a0:	20043314 	.word	0x20043314
    e3a4:	2004332d 	.word	0x2004332d
    e3a8:	20043316 	.word	0x20043316
    e3ac:	2000bbc0 	.word	0x2000bbc0
    e3b0:	20042bf0 	.word	0x20042bf0
    e3b4:	20042c00 	.word	0x20042c00
    e3b8:	20043327 	.word	0x20043327
    e3bc:	20042bec 	.word	0x20042bec
    e3c0:	20043329 	.word	0x20043329
    e3c4:	0000dfdd 	.word	0x0000dfdd
    e3c8:	402e0000 	.word	0x402e0000
    e3cc:	200432fc 	.word	0x200432fc
    e3d0:	0000e091 	.word	0x0000e091
    e3d4:	00000000 	.word	0x00000000
    e3d8:	20043333 	.word	0x20043333

0000e3dc <usb_serial_read>:
{
    e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e3e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e3e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    e3e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e4b4 <usb_serial_read+0xd8>
{
    e3ec:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e3ee:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    e3f2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    e3f4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    e3f8:	2900      	cmp	r1, #0
    e3fa:	d04f      	beq.n	e49c <usb_serial_read+0xc0>
    e3fc:	4680      	mov	r8, r0
    e3fe:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    e400:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    e402:	f8df 90b4 	ldr.w	r9, [pc, #180]	; e4b8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    e406:	4b26      	ldr	r3, [pc, #152]	; (e4a0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    e408:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e40c:	4925      	ldr	r1, [pc, #148]	; (e4a4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    e40e:	781b      	ldrb	r3, [r3, #0]
    e410:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    e412:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    e416:	d03f      	beq.n	e498 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    e418:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    e41a:	4b23      	ldr	r3, [pc, #140]	; (e4a8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e41c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    e41e:	bf28      	it	cs
    e420:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    e422:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    e424:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e428:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    e42c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    e42e:	4b1f      	ldr	r3, [pc, #124]	; (e4ac <usb_serial_read+0xd0>)
    e430:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    e434:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    e438:	42aa      	cmp	r2, r5
    e43a:	d21c      	bcs.n	e476 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e43c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    e440:	4918      	ldr	r1, [pc, #96]	; (e4a4 <usb_serial_read+0xc8>)
			rx_available -= len;
    e442:	4c1b      	ldr	r4, [pc, #108]	; (e4b0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    e444:	4461      	add	r1, ip
    e446:	9201      	str	r2, [sp, #4]
    e448:	f7fe fb44 	bl	cad4 <memcpy>
			rx_available -= len;
    e44c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    e44e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    e452:	4658      	mov	r0, fp
			rx_index[i] += len;
    e454:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    e456:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    e45a:	442a      	add	r2, r5
			rx_available -= len;
    e45c:	4439      	add	r1, r7
			rx_index[i] += len;
    e45e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    e462:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e464:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e46c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    e470:	b003      	add	sp, #12
    e472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e476:	462a      	mov	r2, r5
			count += avail;
    e478:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    e47a:	f7fe fb2b 	bl	cad4 <memcpy>
			rx_available -= avail;
    e47e:	490c      	ldr	r1, [pc, #48]	; (e4b0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    e480:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    e482:	4630      	mov	r0, r6
			rx_available -= avail;
    e484:	680a      	ldr	r2, [r1, #0]
			p += avail;
    e486:	44a8      	add	r8, r5
			rx_available -= avail;
    e488:	1b52      	subs	r2, r2, r5
    e48a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    e48c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    e490:	f7ff fd74 	bl	df7c <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    e494:	45bb      	cmp	fp, r7
    e496:	d8b6      	bhi.n	e406 <usb_serial_read+0x2a>
	return count;
    e498:	4638      	mov	r0, r7
    e49a:	e7e3      	b.n	e464 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    e49c:	4608      	mov	r0, r1
    e49e:	e7e1      	b.n	e464 <usb_serial_read+0x88>
    e4a0:	20043327 	.word	0x20043327
    e4a4:	20201880 	.word	0x20201880
    e4a8:	20042c18 	.word	0x20042c18
    e4ac:	20042bf0 	.word	0x20042bf0
    e4b0:	20042bec 	.word	0x20042bec
    e4b4:	20043329 	.word	0x20043329
    e4b8:	20042c00 	.word	0x20042c00

0000e4bc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    e4bc:	4b0b      	ldr	r3, [pc, #44]	; (e4ec <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    e4be:	4a0c      	ldr	r2, [pc, #48]	; (e4f0 <usb_serial_peekchar+0x34>)
    e4c0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    e4c2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    e4c4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    e4c6:	428a      	cmp	r2, r1
    e4c8:	d00d      	beq.n	e4e6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    e4ca:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    e4cc:	4809      	ldr	r0, [pc, #36]	; (e4f4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e4ce:	4a0a      	ldr	r2, [pc, #40]	; (e4f8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    e4d0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e4d2:	490a      	ldr	r1, [pc, #40]	; (e4fc <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    e4d4:	bf28      	it	cs
    e4d6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    e4d8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    e4da:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    e4de:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    e4e2:	5c58      	ldrb	r0, [r3, r1]
    e4e4:	4770      	bx	lr
	if (tail == rx_head) return -1;
    e4e6:	f04f 30ff 	mov.w	r0, #4294967295
}
    e4ea:	4770      	bx	lr
    e4ec:	20043327 	.word	0x20043327
    e4f0:	20043329 	.word	0x20043329
    e4f4:	20042c18 	.word	0x20042c18
    e4f8:	20201880 	.word	0x20201880
    e4fc:	20042c00 	.word	0x20042c00

0000e500 <usb_serial_available>:
	uint32_t n = rx_available;
    e500:	4b04      	ldr	r3, [pc, #16]	; (e514 <usb_serial_available+0x14>)
{
    e502:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    e504:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    e506:	b10c      	cbz	r4, e50c <usb_serial_available+0xc>
}
    e508:	4620      	mov	r0, r4
    e50a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    e50c:	f000 f8e0 	bl	e6d0 <yield>
}
    e510:	4620      	mov	r0, r4
    e512:	bd10      	pop	{r4, pc}
    e514:	20042bec 	.word	0x20042bec

0000e518 <usb_serial_flush_input>:
{
    e518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    e51c:	4e14      	ldr	r6, [pc, #80]	; (e570 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    e51e:	4d15      	ldr	r5, [pc, #84]	; (e574 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    e520:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    e522:	782a      	ldrb	r2, [r5, #0]
    e524:	4293      	cmp	r3, r2
    e526:	d021      	beq.n	e56c <usb_serial_flush_input+0x54>
    e528:	b2dc      	uxtb	r4, r3
    e52a:	f8df 9050 	ldr.w	r9, [pc, #80]	; e57c <usb_serial_flush_input+0x64>
    e52e:	f8df b050 	ldr.w	fp, [pc, #80]	; e580 <usb_serial_flush_input+0x68>
    e532:	f8df 8050 	ldr.w	r8, [pc, #80]	; e584 <usb_serial_flush_input+0x6c>
    e536:	4f10      	ldr	r7, [pc, #64]	; (e578 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    e538:	3401      	adds	r4, #1
    e53a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    e53c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    e540:	d901      	bls.n	e546 <usb_serial_flush_input+0x2e>
    e542:	2400      	movs	r4, #0
    e544:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    e546:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    e54a:	f8db 3000 	ldr.w	r3, [fp]
    e54e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    e552:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    e556:	1a52      	subs	r2, r2, r1
    e558:	1a9b      	subs	r3, r3, r2
    e55a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    e55e:	f7ff fd0d 	bl	df7c <rx_queue_transfer>
		rx_tail = tail;
    e562:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    e566:	782b      	ldrb	r3, [r5, #0]
    e568:	42a3      	cmp	r3, r4
    e56a:	d1e5      	bne.n	e538 <usb_serial_flush_input+0x20>
}
    e56c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e570:	20043329 	.word	0x20043329
    e574:	20043327 	.word	0x20043327
    e578:	20042c00 	.word	0x20042c00
    e57c:	20042c18 	.word	0x20042c18
    e580:	20042bec 	.word	0x20042bec
    e584:	20042bf0 	.word	0x20042bf0

0000e588 <usb_serial_getchar>:
{
    e588:	b500      	push	{lr}
    e58a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    e58c:	2101      	movs	r1, #1
    e58e:	f10d 0007 	add.w	r0, sp, #7
    e592:	f7ff ff23 	bl	e3dc <usb_serial_read>
    e596:	b120      	cbz	r0, e5a2 <usb_serial_getchar+0x1a>
    e598:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    e59c:	b003      	add	sp, #12
    e59e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    e5a2:	f04f 30ff 	mov.w	r0, #4294967295
    e5a6:	e7f9      	b.n	e59c <usb_serial_getchar+0x14>

0000e5a8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    e5a8:	4b09      	ldr	r3, [pc, #36]	; (e5d0 <usb_serial_putchar+0x28>)
{
    e5aa:	b500      	push	{lr}
    e5ac:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    e5ae:	781b      	ldrb	r3, [r3, #0]
{
    e5b0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    e5b4:	b13b      	cbz	r3, e5c6 <usb_serial_putchar+0x1e>
    e5b6:	2101      	movs	r1, #1
    e5b8:	f10d 0007 	add.w	r0, sp, #7
    e5bc:	f7ff fdb0 	bl	e120 <usb_serial_write.part.0>
}
    e5c0:	b003      	add	sp, #12
    e5c2:	f85d fb04 	ldr.w	pc, [sp], #4
    e5c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    e5ca:	b003      	add	sp, #12
    e5cc:	f85d fb04 	ldr.w	pc, [sp], #4
    e5d0:	20043330 	.word	0x20043330

0000e5d4 <usb_serial_write>:
	if (!usb_configuration) return 0;
    e5d4:	4b04      	ldr	r3, [pc, #16]	; (e5e8 <usb_serial_write+0x14>)
    e5d6:	781b      	ldrb	r3, [r3, #0]
    e5d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    e5dc:	b10b      	cbz	r3, e5e2 <usb_serial_write+0xe>
    e5de:	f7ff bd9f 	b.w	e120 <usb_serial_write.part.0>
}
    e5e2:	4610      	mov	r0, r2
    e5e4:	4770      	bx	lr
    e5e6:	bf00      	nop
    e5e8:	20043330 	.word	0x20043330

0000e5ec <usb_serial_write_buffer_free>:
{
    e5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    e5f0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    e5f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; e638 <usb_serial_write_buffer_free+0x4c>
    e5f6:	2301      	movs	r3, #1
    e5f8:	4d0d      	ldr	r5, [pc, #52]	; (e630 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    e5fa:	4627      	mov	r7, r4
    e5fc:	4e0d      	ldr	r6, [pc, #52]	; (e634 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    e5fe:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    e602:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e604:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    e606:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    e608:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    e60a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    e60e:	d005      	beq.n	e61c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    e610:	f7ff fae4 	bl	dbdc <usb_transfer_status>
    e614:	0603      	lsls	r3, r0, #24
    e616:	bf58      	it	pl
    e618:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    e61c:	2c04      	cmp	r4, #4
    e61e:	d1f0      	bne.n	e602 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    e620:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    e624:	2300      	movs	r3, #0
}
    e626:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    e628:	f888 3000 	strb.w	r3, [r8]
}
    e62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e630:	2000bd40 	.word	0x2000bd40
    e634:	2004332d 	.word	0x2004332d
    e638:	2004332e 	.word	0x2004332e

0000e63c <usb_serial_flush_output>:
{
    e63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    e640:	4b1d      	ldr	r3, [pc, #116]	; (e6b8 <usb_serial_flush_output+0x7c>)
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	b113      	cbz	r3, e64c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    e646:	4d1d      	ldr	r5, [pc, #116]	; (e6bc <usb_serial_flush_output+0x80>)
    e648:	882a      	ldrh	r2, [r5, #0]
    e64a:	b90a      	cbnz	r2, e650 <usb_serial_flush_output+0x14>
}
    e64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    e650:	4e1b      	ldr	r6, [pc, #108]	; (e6c0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    e652:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    e656:	491b      	ldr	r1, [pc, #108]	; (e6c4 <usb_serial_flush_output+0x88>)
    e658:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e65a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e65c:	4c1a      	ldr	r4, [pc, #104]	; (e6c8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    e65e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    e662:	4f1a      	ldr	r7, [pc, #104]	; (e6cc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    e664:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    e668:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e66a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    e66c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    e66e:	4621      	mov	r1, r4
    e670:	2300      	movs	r3, #0
    e672:	f7ff fa79 	bl	db68 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    e676:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    e67a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e67e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e682:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    e686:	3420      	adds	r4, #32
	} while (location < end_addr);
    e688:	42a2      	cmp	r2, r4
    e68a:	d8fa      	bhi.n	e682 <usb_serial_flush_output+0x46>
	asm("dsb");
    e68c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e690:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    e694:	2003      	movs	r0, #3
    e696:	4641      	mov	r1, r8
    e698:	f7ff fa7e 	bl	db98 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    e69c:	7833      	ldrb	r3, [r6, #0]
    e69e:	3301      	adds	r3, #1
    e6a0:	b2db      	uxtb	r3, r3
    e6a2:	2b03      	cmp	r3, #3
    e6a4:	bf88      	it	hi
    e6a6:	2300      	movhi	r3, #0
    e6a8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    e6aa:	2300      	movs	r3, #0
    e6ac:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    e6ae:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    e6b2:	703b      	strb	r3, [r7, #0]
}
    e6b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e6b8:	20043330 	.word	0x20043330
    e6bc:	20043316 	.word	0x20043316
    e6c0:	2004332d 	.word	0x2004332d
    e6c4:	2000bd40 	.word	0x2000bd40
    e6c8:	20202880 	.word	0x20202880
    e6cc:	2004332e 	.word	0x2004332e

0000e6d0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    e6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    e6d4:	4b2d      	ldr	r3, [pc, #180]	; (e78c <yield+0xbc>)
    e6d6:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    e6d8:	b166      	cbz	r6, e6f4 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    e6da:	4f2d      	ldr	r7, [pc, #180]	; (e790 <yield+0xc0>)
    e6dc:	783b      	ldrb	r3, [r7, #0]
    e6de:	b94b      	cbnz	r3, e6f4 <yield+0x24>
	running = 1;
    e6e0:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    e6e2:	07f1      	lsls	r1, r6, #31
	running = 1;
    e6e4:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    e6e6:	d443      	bmi.n	e770 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    e6e8:	07b2      	lsls	r2, r6, #30
    e6ea:	d426      	bmi.n	e73a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    e6ec:	2300      	movs	r3, #0
    e6ee:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    e6f0:	0773      	lsls	r3, r6, #29
    e6f2:	d401      	bmi.n	e6f8 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    e6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    e6f8:	4b26      	ldr	r3, [pc, #152]	; (e794 <yield+0xc4>)
    e6fa:	681a      	ldr	r2, [r3, #0]
    e6fc:	2a00      	cmp	r2, #0
    e6fe:	d0f9      	beq.n	e6f4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    e700:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    e704:	2a00      	cmp	r2, #0
    e706:	d1f5      	bne.n	e6f4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e708:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    e70c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    e70e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    e710:	2800      	cmp	r0, #0
    e712:	d034      	beq.n	e77e <yield+0xae>
		if (runningFromYield) {
    e714:	4c20      	ldr	r4, [pc, #128]	; (e798 <yield+0xc8>)
    e716:	7821      	ldrb	r1, [r4, #0]
    e718:	2900      	cmp	r1, #0
    e71a:	d130      	bne.n	e77e <yield+0xae>
		runningFromYield = true;
    e71c:	2201      	movs	r2, #1
    e71e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    e720:	6942      	ldr	r2, [r0, #20]
    e722:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    e724:	2a00      	cmp	r2, #0
    e726:	d02e      	beq.n	e786 <yield+0xb6>
			firstYield->_prev = nullptr;
    e728:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    e72a:	b905      	cbnz	r5, e72e <yield+0x5e>
    e72c:	b662      	cpsie	i
		first->_triggered = false;
    e72e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    e730:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    e732:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    e734:	4798      	blx	r3
		runningFromYield = false;
    e736:	7025      	strb	r5, [r4, #0]
    e738:	e7dc      	b.n	e6f4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    e73a:	f8df 8064 	ldr.w	r8, [pc, #100]	; e7a0 <yield+0xd0>
    e73e:	f898 3000 	ldrb.w	r3, [r8]
    e742:	2b00      	cmp	r3, #0
    e744:	d0d2      	beq.n	e6ec <yield+0x1c>
    e746:	2500      	movs	r5, #0
    e748:	f8df 9058 	ldr.w	r9, [pc, #88]	; e7a4 <yield+0xd4>
    e74c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    e74e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    e752:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    e754:	6823      	ldr	r3, [r4, #0]
    e756:	4620      	mov	r0, r4
    e758:	691b      	ldr	r3, [r3, #16]
    e75a:	4798      	blx	r3
    e75c:	b110      	cbz	r0, e764 <yield+0x94>
    e75e:	6963      	ldr	r3, [r4, #20]
    e760:	689b      	ldr	r3, [r3, #8]
    e762:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    e764:	f898 2000 	ldrb.w	r2, [r8]
    e768:	b2eb      	uxtb	r3, r5
    e76a:	429a      	cmp	r2, r3
    e76c:	d8ef      	bhi.n	e74e <yield+0x7e>
    e76e:	e7bd      	b.n	e6ec <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    e770:	f7ff fec6 	bl	e500 <usb_serial_available>
		if (Serial.available()) serialEvent();
    e774:	2800      	cmp	r0, #0
    e776:	d0b7      	beq.n	e6e8 <yield+0x18>
    e778:	f3af 8000 	nop.w
    e77c:	e7b4      	b.n	e6e8 <yield+0x18>
		if (doit) __enable_irq();
    e77e:	2d00      	cmp	r5, #0
    e780:	d1b8      	bne.n	e6f4 <yield+0x24>
    e782:	b662      	cpsie	i
    e784:	e7b6      	b.n	e6f4 <yield+0x24>
			lastYield = nullptr;
    e786:	4b05      	ldr	r3, [pc, #20]	; (e79c <yield+0xcc>)
    e788:	601a      	str	r2, [r3, #0]
    e78a:	e7ce      	b.n	e72a <yield+0x5a>
    e78c:	20043333 	.word	0x20043333
    e790:	20043323 	.word	0x20043323
    e794:	200422e4 	.word	0x200422e4
    e798:	20043321 	.word	0x20043321
    e79c:	200422f0 	.word	0x200422f0
    e7a0:	20043322 	.word	0x20043322
    e7a4:	200422f4 	.word	0x200422f4

0000e7a8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    e7a8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    e7aa:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    e7ac:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    e7b0:	4619      	mov	r1, r3
{
    e7b2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e7b4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e7b8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    e7bc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e7c0:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    e7c4:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    e7c8:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    e7ca:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    e7ce:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e7d2:	b29b      	uxth	r3, r3
    e7d4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    e7d8:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e7dc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    e7e0:	3101      	adds	r1, #1
    e7e2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    e7e6:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    e7e8:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    e7ea:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    e7ee:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    e7f0:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    e7f2:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    e7f4:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    e7f6:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    e7fa:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    e7fc:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    e7fe:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    e800:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    e802:	d1eb      	bne.n	e7dc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    e804:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e808:	b29b      	uxth	r3, r3
    e80a:	f043 030f 	orr.w	r3, r3, #15
    e80e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    e812:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    e816:	b29b      	uxth	r3, r3
    e818:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    e81c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    e820:	bd10      	pop	{r4, pc}
    e822:	bf00      	nop

0000e824 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e824:	4b37      	ldr	r3, [pc, #220]	; (e904 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e826:	4a38      	ldr	r2, [pc, #224]	; (e908 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e828:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    e82a:	4838      	ldr	r0, [pc, #224]	; (e90c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e82c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    e830:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    e832:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e834:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e838:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e83c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e840:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    e844:	430a      	orrs	r2, r1
    e846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    e84a:	f7ff ffad 	bl	e7a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    e84e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e852:	f7ff ffa9 	bl	e7a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    e856:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e85a:	f7ff ffa5 	bl	e7a8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    e85e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    e862:	f7ff ffa1 	bl	e7a8 <flexpwm_init>
	for (i=0; i < 4; i++) {
    e866:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e868:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e86c:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    e870:	4611      	mov	r1, r2
    e872:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e876:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e87a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e87c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e87e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e880:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e882:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e886:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e888:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e88a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e88e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e890:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    e892:	d1ee      	bne.n	e872 <pwm_init+0x4e>
    e894:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e896:	481e      	ldr	r0, [pc, #120]	; (e910 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e898:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e89c:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    e8a0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e8a2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e8a6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    e8aa:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e8ae:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e8b2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e8b4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e8b6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e8b8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e8ba:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e8be:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e8c0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e8c2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e8c6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e8c8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    e8ca:	d1ee      	bne.n	e8aa <pwm_init+0x86>
    e8cc:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    e8ce:	4811      	ldr	r0, [pc, #68]	; (e914 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e8d0:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e8d2:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    e8d6:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e8d8:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e8dc:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    e8e0:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    e8e4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    e8e8:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    e8ea:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    e8ec:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    e8ee:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    e8f0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    e8f2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    e8f4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    e8f6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    e8fa:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    e8fc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    e900:	d1ee      	bne.n	e8e0 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    e902:	bd70      	pop	{r4, r5, r6, pc}
    e904:	400fc000 	.word	0x400fc000
    e908:	fc030000 	.word	0xfc030000
    e90c:	403dc000 	.word	0x403dc000
    e910:	401e0000 	.word	0x401e0000
    e914:	401e4000 	.word	0x401e4000

0000e918 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    e918:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    e91a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    e91e:	b15b      	cbz	r3, e938 <sm_align_pool+0x20>
    e920:	b1ba      	cbz	r2, e952 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    e922:	4b0f      	ldr	r3, [pc, #60]	; (e960 <sm_align_pool+0x48>)
    e924:	fba3 1302 	umull	r1, r3, r3, r2
    e928:	08db      	lsrs	r3, r3, #3
    e92a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e92e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    e932:	d10a      	bne.n	e94a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    e934:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    e936:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    e938:	4b09      	ldr	r3, [pc, #36]	; (e960 <sm_align_pool+0x48>)
    e93a:	fba3 1302 	umull	r1, r3, r3, r2
    e93e:	08db      	lsrs	r3, r3, #3
    e940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    e944:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    e948:	d001      	beq.n	e94e <sm_align_pool+0x36>
    e94a:	1ad2      	subs	r2, r2, r3
    e94c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    e94e:	2af0      	cmp	r2, #240	; 0xf0
    e950:	d8f0      	bhi.n	e934 <sm_align_pool+0x1c>
		errno = ENOSPC;
    e952:	f002 fad9 	bl	10f08 <__errno>
    e956:	221c      	movs	r2, #28
    e958:	4603      	mov	r3, r0
    e95a:	2000      	movs	r0, #0
    e95c:	601a      	str	r2, [r3, #0]
}
    e95e:	bd08      	pop	{r3, pc}
    e960:	aaaaaaab 	.word	0xaaaaaaab

0000e964 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    e964:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    e966:	4604      	mov	r4, r0
    e968:	b338      	cbz	r0, e9ba <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    e96a:	b119      	cbz	r1, e974 <sm_set_pool+0x10>
    e96c:	fab2 f682 	clz	r6, r2
    e970:	0976      	lsrs	r6, r6, #5
    e972:	b9a2      	cbnz	r2, e99e <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    e974:	6820      	ldr	r0, [r4, #0]
    e976:	b300      	cbz	r0, e9ba <sm_set_pool+0x56>
    e978:	6862      	ldr	r2, [r4, #4]
    e97a:	b1f2      	cbz	r2, e9ba <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    e97c:	4b18      	ldr	r3, [pc, #96]	; (e9e0 <sm_set_pool+0x7c>)
    e97e:	4919      	ldr	r1, [pc, #100]	; (e9e4 <sm_set_pool+0x80>)
    e980:	fb02 f303 	mul.w	r3, r2, r3
    e984:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    e988:	d317      	bcc.n	e9ba <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    e98a:	68a3      	ldr	r3, [r4, #8]
    e98c:	b9e3      	cbnz	r3, e9c8 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    e98e:	2200      	movs	r2, #0
			return 1;
    e990:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    e992:	6022      	str	r2, [r4, #0]
    e994:	6062      	str	r2, [r4, #4]
    e996:	60a2      	str	r2, [r4, #8]
    e998:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    e99a:	4618      	mov	r0, r3
    e99c:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    e99e:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    e9a0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    e9a2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    e9a6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    e9a8:	f7ff ffb6 	bl	e918 <sm_align_pool>
    e9ac:	4603      	mov	r3, r0
    e9ae:	2800      	cmp	r0, #0
    e9b0:	d0f3      	beq.n	e99a <sm_set_pool+0x36>
	if (do_zero) {
    e9b2:	b96d      	cbnz	r5, e9d0 <sm_set_pool+0x6c>
	return 1;
    e9b4:	2301      	movs	r3, #1
}
    e9b6:	4618      	mov	r0, r3
    e9b8:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    e9ba:	f002 faa5 	bl	10f08 <__errno>
    e9be:	2216      	movs	r2, #22
		return 0;
    e9c0:	2300      	movs	r3, #0
		errno = EINVAL;
    e9c2:	6002      	str	r2, [r0, #0]
}
    e9c4:	4618      	mov	r0, r3
    e9c6:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    e9c8:	2100      	movs	r1, #0
    e9ca:	f002 f911 	bl	10bf0 <memset>
    e9ce:	e7de      	b.n	e98e <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    e9d0:	6862      	ldr	r2, [r4, #4]
    e9d2:	4631      	mov	r1, r6
    e9d4:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    e9d6:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    e9d8:	f002 f90a 	bl	10bf0 <memset>
	return 1;
    e9dc:	2301      	movs	r3, #1
    e9de:	e7dc      	b.n	e99a <sm_set_pool+0x36>
    e9e0:	aaaaaaab 	.word	0xaaaaaaab
    e9e4:	15555555 	.word	0x15555555

0000e9e8 <__aeabi_atexit>:
    e9e8:	4603      	mov	r3, r0
    e9ea:	4608      	mov	r0, r1
    e9ec:	4619      	mov	r1, r3
    e9ee:	f001 be25 	b.w	1063c <__cxa_atexit>
    e9f2:	bf00      	nop

0000e9f4 <__aeabi_uldivmod>:
    e9f4:	b953      	cbnz	r3, ea0c <__aeabi_uldivmod+0x18>
    e9f6:	b94a      	cbnz	r2, ea0c <__aeabi_uldivmod+0x18>
    e9f8:	2900      	cmp	r1, #0
    e9fa:	bf08      	it	eq
    e9fc:	2800      	cmpeq	r0, #0
    e9fe:	bf1c      	itt	ne
    ea00:	f04f 31ff 	movne.w	r1, #4294967295
    ea04:	f04f 30ff 	movne.w	r0, #4294967295
    ea08:	f000 b970 	b.w	ecec <__aeabi_idiv0>
    ea0c:	f1ad 0c08 	sub.w	ip, sp, #8
    ea10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ea14:	f000 f806 	bl	ea24 <__udivmoddi4>
    ea18:	f8dd e004 	ldr.w	lr, [sp, #4]
    ea1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ea20:	b004      	add	sp, #16
    ea22:	4770      	bx	lr

0000ea24 <__udivmoddi4>:
    ea24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ea28:	9e08      	ldr	r6, [sp, #32]
    ea2a:	460d      	mov	r5, r1
    ea2c:	4604      	mov	r4, r0
    ea2e:	460f      	mov	r7, r1
    ea30:	2b00      	cmp	r3, #0
    ea32:	d14a      	bne.n	eaca <__udivmoddi4+0xa6>
    ea34:	428a      	cmp	r2, r1
    ea36:	4694      	mov	ip, r2
    ea38:	d965      	bls.n	eb06 <__udivmoddi4+0xe2>
    ea3a:	fab2 f382 	clz	r3, r2
    ea3e:	b143      	cbz	r3, ea52 <__udivmoddi4+0x2e>
    ea40:	fa02 fc03 	lsl.w	ip, r2, r3
    ea44:	f1c3 0220 	rsb	r2, r3, #32
    ea48:	409f      	lsls	r7, r3
    ea4a:	fa20 f202 	lsr.w	r2, r0, r2
    ea4e:	4317      	orrs	r7, r2
    ea50:	409c      	lsls	r4, r3
    ea52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    ea56:	fa1f f58c 	uxth.w	r5, ip
    ea5a:	fbb7 f1fe 	udiv	r1, r7, lr
    ea5e:	0c22      	lsrs	r2, r4, #16
    ea60:	fb0e 7711 	mls	r7, lr, r1, r7
    ea64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    ea68:	fb01 f005 	mul.w	r0, r1, r5
    ea6c:	4290      	cmp	r0, r2
    ea6e:	d90a      	bls.n	ea86 <__udivmoddi4+0x62>
    ea70:	eb1c 0202 	adds.w	r2, ip, r2
    ea74:	f101 37ff 	add.w	r7, r1, #4294967295
    ea78:	f080 811c 	bcs.w	ecb4 <__udivmoddi4+0x290>
    ea7c:	4290      	cmp	r0, r2
    ea7e:	f240 8119 	bls.w	ecb4 <__udivmoddi4+0x290>
    ea82:	3902      	subs	r1, #2
    ea84:	4462      	add	r2, ip
    ea86:	1a12      	subs	r2, r2, r0
    ea88:	b2a4      	uxth	r4, r4
    ea8a:	fbb2 f0fe 	udiv	r0, r2, lr
    ea8e:	fb0e 2210 	mls	r2, lr, r0, r2
    ea92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    ea96:	fb00 f505 	mul.w	r5, r0, r5
    ea9a:	42a5      	cmp	r5, r4
    ea9c:	d90a      	bls.n	eab4 <__udivmoddi4+0x90>
    ea9e:	eb1c 0404 	adds.w	r4, ip, r4
    eaa2:	f100 32ff 	add.w	r2, r0, #4294967295
    eaa6:	f080 8107 	bcs.w	ecb8 <__udivmoddi4+0x294>
    eaaa:	42a5      	cmp	r5, r4
    eaac:	f240 8104 	bls.w	ecb8 <__udivmoddi4+0x294>
    eab0:	4464      	add	r4, ip
    eab2:	3802      	subs	r0, #2
    eab4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    eab8:	1b64      	subs	r4, r4, r5
    eaba:	2100      	movs	r1, #0
    eabc:	b11e      	cbz	r6, eac6 <__udivmoddi4+0xa2>
    eabe:	40dc      	lsrs	r4, r3
    eac0:	2300      	movs	r3, #0
    eac2:	e9c6 4300 	strd	r4, r3, [r6]
    eac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eaca:	428b      	cmp	r3, r1
    eacc:	d908      	bls.n	eae0 <__udivmoddi4+0xbc>
    eace:	2e00      	cmp	r6, #0
    ead0:	f000 80ed 	beq.w	ecae <__udivmoddi4+0x28a>
    ead4:	2100      	movs	r1, #0
    ead6:	e9c6 0500 	strd	r0, r5, [r6]
    eada:	4608      	mov	r0, r1
    eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eae0:	fab3 f183 	clz	r1, r3
    eae4:	2900      	cmp	r1, #0
    eae6:	d149      	bne.n	eb7c <__udivmoddi4+0x158>
    eae8:	42ab      	cmp	r3, r5
    eaea:	d302      	bcc.n	eaf2 <__udivmoddi4+0xce>
    eaec:	4282      	cmp	r2, r0
    eaee:	f200 80f8 	bhi.w	ece2 <__udivmoddi4+0x2be>
    eaf2:	1a84      	subs	r4, r0, r2
    eaf4:	eb65 0203 	sbc.w	r2, r5, r3
    eaf8:	2001      	movs	r0, #1
    eafa:	4617      	mov	r7, r2
    eafc:	2e00      	cmp	r6, #0
    eafe:	d0e2      	beq.n	eac6 <__udivmoddi4+0xa2>
    eb00:	e9c6 4700 	strd	r4, r7, [r6]
    eb04:	e7df      	b.n	eac6 <__udivmoddi4+0xa2>
    eb06:	b902      	cbnz	r2, eb0a <__udivmoddi4+0xe6>
    eb08:	deff      	udf	#255	; 0xff
    eb0a:	fab2 f382 	clz	r3, r2
    eb0e:	2b00      	cmp	r3, #0
    eb10:	f040 8090 	bne.w	ec34 <__udivmoddi4+0x210>
    eb14:	1a8a      	subs	r2, r1, r2
    eb16:	ea4f 471c 	mov.w	r7, ip, lsr #16
    eb1a:	fa1f fe8c 	uxth.w	lr, ip
    eb1e:	2101      	movs	r1, #1
    eb20:	fbb2 f5f7 	udiv	r5, r2, r7
    eb24:	fb07 2015 	mls	r0, r7, r5, r2
    eb28:	0c22      	lsrs	r2, r4, #16
    eb2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    eb2e:	fb0e f005 	mul.w	r0, lr, r5
    eb32:	4290      	cmp	r0, r2
    eb34:	d908      	bls.n	eb48 <__udivmoddi4+0x124>
    eb36:	eb1c 0202 	adds.w	r2, ip, r2
    eb3a:	f105 38ff 	add.w	r8, r5, #4294967295
    eb3e:	d202      	bcs.n	eb46 <__udivmoddi4+0x122>
    eb40:	4290      	cmp	r0, r2
    eb42:	f200 80cb 	bhi.w	ecdc <__udivmoddi4+0x2b8>
    eb46:	4645      	mov	r5, r8
    eb48:	1a12      	subs	r2, r2, r0
    eb4a:	b2a4      	uxth	r4, r4
    eb4c:	fbb2 f0f7 	udiv	r0, r2, r7
    eb50:	fb07 2210 	mls	r2, r7, r0, r2
    eb54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    eb58:	fb0e fe00 	mul.w	lr, lr, r0
    eb5c:	45a6      	cmp	lr, r4
    eb5e:	d908      	bls.n	eb72 <__udivmoddi4+0x14e>
    eb60:	eb1c 0404 	adds.w	r4, ip, r4
    eb64:	f100 32ff 	add.w	r2, r0, #4294967295
    eb68:	d202      	bcs.n	eb70 <__udivmoddi4+0x14c>
    eb6a:	45a6      	cmp	lr, r4
    eb6c:	f200 80bb 	bhi.w	ece6 <__udivmoddi4+0x2c2>
    eb70:	4610      	mov	r0, r2
    eb72:	eba4 040e 	sub.w	r4, r4, lr
    eb76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    eb7a:	e79f      	b.n	eabc <__udivmoddi4+0x98>
    eb7c:	f1c1 0720 	rsb	r7, r1, #32
    eb80:	408b      	lsls	r3, r1
    eb82:	fa22 fc07 	lsr.w	ip, r2, r7
    eb86:	ea4c 0c03 	orr.w	ip, ip, r3
    eb8a:	fa05 f401 	lsl.w	r4, r5, r1
    eb8e:	fa20 f307 	lsr.w	r3, r0, r7
    eb92:	40fd      	lsrs	r5, r7
    eb94:	ea4f 491c 	mov.w	r9, ip, lsr #16
    eb98:	4323      	orrs	r3, r4
    eb9a:	fbb5 f8f9 	udiv	r8, r5, r9
    eb9e:	fa1f fe8c 	uxth.w	lr, ip
    eba2:	fb09 5518 	mls	r5, r9, r8, r5
    eba6:	0c1c      	lsrs	r4, r3, #16
    eba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    ebac:	fb08 f50e 	mul.w	r5, r8, lr
    ebb0:	42a5      	cmp	r5, r4
    ebb2:	fa02 f201 	lsl.w	r2, r2, r1
    ebb6:	fa00 f001 	lsl.w	r0, r0, r1
    ebba:	d90b      	bls.n	ebd4 <__udivmoddi4+0x1b0>
    ebbc:	eb1c 0404 	adds.w	r4, ip, r4
    ebc0:	f108 3aff 	add.w	sl, r8, #4294967295
    ebc4:	f080 8088 	bcs.w	ecd8 <__udivmoddi4+0x2b4>
    ebc8:	42a5      	cmp	r5, r4
    ebca:	f240 8085 	bls.w	ecd8 <__udivmoddi4+0x2b4>
    ebce:	f1a8 0802 	sub.w	r8, r8, #2
    ebd2:	4464      	add	r4, ip
    ebd4:	1b64      	subs	r4, r4, r5
    ebd6:	b29d      	uxth	r5, r3
    ebd8:	fbb4 f3f9 	udiv	r3, r4, r9
    ebdc:	fb09 4413 	mls	r4, r9, r3, r4
    ebe0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    ebe4:	fb03 fe0e 	mul.w	lr, r3, lr
    ebe8:	45a6      	cmp	lr, r4
    ebea:	d908      	bls.n	ebfe <__udivmoddi4+0x1da>
    ebec:	eb1c 0404 	adds.w	r4, ip, r4
    ebf0:	f103 35ff 	add.w	r5, r3, #4294967295
    ebf4:	d26c      	bcs.n	ecd0 <__udivmoddi4+0x2ac>
    ebf6:	45a6      	cmp	lr, r4
    ebf8:	d96a      	bls.n	ecd0 <__udivmoddi4+0x2ac>
    ebfa:	3b02      	subs	r3, #2
    ebfc:	4464      	add	r4, ip
    ebfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    ec02:	fba3 9502 	umull	r9, r5, r3, r2
    ec06:	eba4 040e 	sub.w	r4, r4, lr
    ec0a:	42ac      	cmp	r4, r5
    ec0c:	46c8      	mov	r8, r9
    ec0e:	46ae      	mov	lr, r5
    ec10:	d356      	bcc.n	ecc0 <__udivmoddi4+0x29c>
    ec12:	d053      	beq.n	ecbc <__udivmoddi4+0x298>
    ec14:	b156      	cbz	r6, ec2c <__udivmoddi4+0x208>
    ec16:	ebb0 0208 	subs.w	r2, r0, r8
    ec1a:	eb64 040e 	sbc.w	r4, r4, lr
    ec1e:	fa04 f707 	lsl.w	r7, r4, r7
    ec22:	40ca      	lsrs	r2, r1
    ec24:	40cc      	lsrs	r4, r1
    ec26:	4317      	orrs	r7, r2
    ec28:	e9c6 7400 	strd	r7, r4, [r6]
    ec2c:	4618      	mov	r0, r3
    ec2e:	2100      	movs	r1, #0
    ec30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ec34:	f1c3 0120 	rsb	r1, r3, #32
    ec38:	fa02 fc03 	lsl.w	ip, r2, r3
    ec3c:	fa20 f201 	lsr.w	r2, r0, r1
    ec40:	fa25 f101 	lsr.w	r1, r5, r1
    ec44:	409d      	lsls	r5, r3
    ec46:	432a      	orrs	r2, r5
    ec48:	ea4f 471c 	mov.w	r7, ip, lsr #16
    ec4c:	fa1f fe8c 	uxth.w	lr, ip
    ec50:	fbb1 f0f7 	udiv	r0, r1, r7
    ec54:	fb07 1510 	mls	r5, r7, r0, r1
    ec58:	0c11      	lsrs	r1, r2, #16
    ec5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    ec5e:	fb00 f50e 	mul.w	r5, r0, lr
    ec62:	428d      	cmp	r5, r1
    ec64:	fa04 f403 	lsl.w	r4, r4, r3
    ec68:	d908      	bls.n	ec7c <__udivmoddi4+0x258>
    ec6a:	eb1c 0101 	adds.w	r1, ip, r1
    ec6e:	f100 38ff 	add.w	r8, r0, #4294967295
    ec72:	d22f      	bcs.n	ecd4 <__udivmoddi4+0x2b0>
    ec74:	428d      	cmp	r5, r1
    ec76:	d92d      	bls.n	ecd4 <__udivmoddi4+0x2b0>
    ec78:	3802      	subs	r0, #2
    ec7a:	4461      	add	r1, ip
    ec7c:	1b49      	subs	r1, r1, r5
    ec7e:	b292      	uxth	r2, r2
    ec80:	fbb1 f5f7 	udiv	r5, r1, r7
    ec84:	fb07 1115 	mls	r1, r7, r5, r1
    ec88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    ec8c:	fb05 f10e 	mul.w	r1, r5, lr
    ec90:	4291      	cmp	r1, r2
    ec92:	d908      	bls.n	eca6 <__udivmoddi4+0x282>
    ec94:	eb1c 0202 	adds.w	r2, ip, r2
    ec98:	f105 38ff 	add.w	r8, r5, #4294967295
    ec9c:	d216      	bcs.n	eccc <__udivmoddi4+0x2a8>
    ec9e:	4291      	cmp	r1, r2
    eca0:	d914      	bls.n	eccc <__udivmoddi4+0x2a8>
    eca2:	3d02      	subs	r5, #2
    eca4:	4462      	add	r2, ip
    eca6:	1a52      	subs	r2, r2, r1
    eca8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    ecac:	e738      	b.n	eb20 <__udivmoddi4+0xfc>
    ecae:	4631      	mov	r1, r6
    ecb0:	4630      	mov	r0, r6
    ecb2:	e708      	b.n	eac6 <__udivmoddi4+0xa2>
    ecb4:	4639      	mov	r1, r7
    ecb6:	e6e6      	b.n	ea86 <__udivmoddi4+0x62>
    ecb8:	4610      	mov	r0, r2
    ecba:	e6fb      	b.n	eab4 <__udivmoddi4+0x90>
    ecbc:	4548      	cmp	r0, r9
    ecbe:	d2a9      	bcs.n	ec14 <__udivmoddi4+0x1f0>
    ecc0:	ebb9 0802 	subs.w	r8, r9, r2
    ecc4:	eb65 0e0c 	sbc.w	lr, r5, ip
    ecc8:	3b01      	subs	r3, #1
    ecca:	e7a3      	b.n	ec14 <__udivmoddi4+0x1f0>
    eccc:	4645      	mov	r5, r8
    ecce:	e7ea      	b.n	eca6 <__udivmoddi4+0x282>
    ecd0:	462b      	mov	r3, r5
    ecd2:	e794      	b.n	ebfe <__udivmoddi4+0x1da>
    ecd4:	4640      	mov	r0, r8
    ecd6:	e7d1      	b.n	ec7c <__udivmoddi4+0x258>
    ecd8:	46d0      	mov	r8, sl
    ecda:	e77b      	b.n	ebd4 <__udivmoddi4+0x1b0>
    ecdc:	3d02      	subs	r5, #2
    ecde:	4462      	add	r2, ip
    ece0:	e732      	b.n	eb48 <__udivmoddi4+0x124>
    ece2:	4608      	mov	r0, r1
    ece4:	e70a      	b.n	eafc <__udivmoddi4+0xd8>
    ece6:	4464      	add	r4, ip
    ece8:	3802      	subs	r0, #2
    ecea:	e742      	b.n	eb72 <__udivmoddi4+0x14e>

0000ecec <__aeabi_idiv0>:
    ecec:	4770      	bx	lr
    ecee:	bf00      	nop

0000ecf0 <malloc>:
    ecf0:	4b02      	ldr	r3, [pc, #8]	; (ecfc <malloc+0xc>)
    ecf2:	4601      	mov	r1, r0
    ecf4:	6818      	ldr	r0, [r3, #0]
    ecf6:	f000 b80b 	b.w	ed10 <_malloc_r>
    ecfa:	bf00      	nop
    ecfc:	20008ffc 	.word	0x20008ffc

0000ed00 <free>:
    ed00:	4b02      	ldr	r3, [pc, #8]	; (ed0c <free+0xc>)
    ed02:	4601      	mov	r1, r0
    ed04:	6818      	ldr	r0, [r3, #0]
    ed06:	f002 bc6d 	b.w	115e4 <_free_r>
    ed0a:	bf00      	nop
    ed0c:	20008ffc 	.word	0x20008ffc

0000ed10 <_malloc_r>:
    ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed14:	f101 060b 	add.w	r6, r1, #11
    ed18:	2e16      	cmp	r6, #22
    ed1a:	b083      	sub	sp, #12
    ed1c:	4604      	mov	r4, r0
    ed1e:	d824      	bhi.n	ed6a <_malloc_r+0x5a>
    ed20:	2910      	cmp	r1, #16
    ed22:	f200 80ba 	bhi.w	ee9a <_malloc_r+0x18a>
    ed26:	f000 faa3 	bl	f270 <__malloc_lock>
    ed2a:	2610      	movs	r6, #16
    ed2c:	2218      	movs	r2, #24
    ed2e:	2002      	movs	r0, #2
    ed30:	4fb5      	ldr	r7, [pc, #724]	; (f008 <_malloc_r+0x2f8>)
    ed32:	443a      	add	r2, r7
    ed34:	f1a2 0108 	sub.w	r1, r2, #8
    ed38:	6853      	ldr	r3, [r2, #4]
    ed3a:	428b      	cmp	r3, r1
    ed3c:	f000 80ba 	beq.w	eeb4 <_malloc_r+0x1a4>
    ed40:	685a      	ldr	r2, [r3, #4]
    ed42:	68d9      	ldr	r1, [r3, #12]
    ed44:	f022 0203 	bic.w	r2, r2, #3
    ed48:	441a      	add	r2, r3
    ed4a:	689d      	ldr	r5, [r3, #8]
    ed4c:	60e9      	str	r1, [r5, #12]
    ed4e:	608d      	str	r5, [r1, #8]
    ed50:	6851      	ldr	r1, [r2, #4]
    ed52:	f041 0101 	orr.w	r1, r1, #1
    ed56:	4620      	mov	r0, r4
    ed58:	6051      	str	r1, [r2, #4]
    ed5a:	f103 0508 	add.w	r5, r3, #8
    ed5e:	f000 fa8d 	bl	f27c <__malloc_unlock>
    ed62:	4628      	mov	r0, r5
    ed64:	b003      	add	sp, #12
    ed66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed6a:	f036 0607 	bics.w	r6, r6, #7
    ed6e:	f100 8094 	bmi.w	ee9a <_malloc_r+0x18a>
    ed72:	42b1      	cmp	r1, r6
    ed74:	f200 8091 	bhi.w	ee9a <_malloc_r+0x18a>
    ed78:	f000 fa7a 	bl	f270 <__malloc_lock>
    ed7c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ed80:	f0c0 819a 	bcc.w	f0b8 <_malloc_r+0x3a8>
    ed84:	0a73      	lsrs	r3, r6, #9
    ed86:	f000 808f 	beq.w	eea8 <_malloc_r+0x198>
    ed8a:	2b04      	cmp	r3, #4
    ed8c:	f200 816f 	bhi.w	f06e <_malloc_r+0x35e>
    ed90:	09b3      	lsrs	r3, r6, #6
    ed92:	f103 0039 	add.w	r0, r3, #57	; 0x39
    ed96:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    ed9a:	00c3      	lsls	r3, r0, #3
    ed9c:	4f9a      	ldr	r7, [pc, #616]	; (f008 <_malloc_r+0x2f8>)
    ed9e:	443b      	add	r3, r7
    eda0:	f1a3 0508 	sub.w	r5, r3, #8
    eda4:	685b      	ldr	r3, [r3, #4]
    eda6:	429d      	cmp	r5, r3
    eda8:	d106      	bne.n	edb8 <_malloc_r+0xa8>
    edaa:	e00c      	b.n	edc6 <_malloc_r+0xb6>
    edac:	2900      	cmp	r1, #0
    edae:	f280 8127 	bge.w	f000 <_malloc_r+0x2f0>
    edb2:	68db      	ldr	r3, [r3, #12]
    edb4:	429d      	cmp	r5, r3
    edb6:	d006      	beq.n	edc6 <_malloc_r+0xb6>
    edb8:	685a      	ldr	r2, [r3, #4]
    edba:	f022 0203 	bic.w	r2, r2, #3
    edbe:	1b91      	subs	r1, r2, r6
    edc0:	290f      	cmp	r1, #15
    edc2:	ddf3      	ble.n	edac <_malloc_r+0x9c>
    edc4:	4660      	mov	r0, ip
    edc6:	693d      	ldr	r5, [r7, #16]
    edc8:	f8df c250 	ldr.w	ip, [pc, #592]	; f01c <_malloc_r+0x30c>
    edcc:	4565      	cmp	r5, ip
    edce:	d07c      	beq.n	eeca <_malloc_r+0x1ba>
    edd0:	686a      	ldr	r2, [r5, #4]
    edd2:	f022 0203 	bic.w	r2, r2, #3
    edd6:	1b93      	subs	r3, r2, r6
    edd8:	2b0f      	cmp	r3, #15
    edda:	f300 817b 	bgt.w	f0d4 <_malloc_r+0x3c4>
    edde:	2b00      	cmp	r3, #0
    ede0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    ede4:	f280 816c 	bge.w	f0c0 <_malloc_r+0x3b0>
    ede8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    edec:	f080 811a 	bcs.w	f024 <_malloc_r+0x314>
    edf0:	08d3      	lsrs	r3, r2, #3
    edf2:	6879      	ldr	r1, [r7, #4]
    edf4:	3301      	adds	r3, #1
    edf6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    edfa:	2201      	movs	r2, #1
    edfc:	fa02 f20e 	lsl.w	r2, r2, lr
    ee00:	430a      	orrs	r2, r1
    ee02:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    ee06:	f8c5 e008 	str.w	lr, [r5, #8]
    ee0a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    ee0e:	3908      	subs	r1, #8
    ee10:	60e9      	str	r1, [r5, #12]
    ee12:	607a      	str	r2, [r7, #4]
    ee14:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    ee18:	f8ce 500c 	str.w	r5, [lr, #12]
    ee1c:	1083      	asrs	r3, r0, #2
    ee1e:	2101      	movs	r1, #1
    ee20:	4099      	lsls	r1, r3
    ee22:	4291      	cmp	r1, r2
    ee24:	d857      	bhi.n	eed6 <_malloc_r+0x1c6>
    ee26:	4211      	tst	r1, r2
    ee28:	d106      	bne.n	ee38 <_malloc_r+0x128>
    ee2a:	f020 0003 	bic.w	r0, r0, #3
    ee2e:	0049      	lsls	r1, r1, #1
    ee30:	4211      	tst	r1, r2
    ee32:	f100 0004 	add.w	r0, r0, #4
    ee36:	d0fa      	beq.n	ee2e <_malloc_r+0x11e>
    ee38:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    ee3c:	464d      	mov	r5, r9
    ee3e:	4686      	mov	lr, r0
    ee40:	f8d5 800c 	ldr.w	r8, [r5, #12]
    ee44:	4545      	cmp	r5, r8
    ee46:	d108      	bne.n	ee5a <_malloc_r+0x14a>
    ee48:	e11d      	b.n	f086 <_malloc_r+0x376>
    ee4a:	2b00      	cmp	r3, #0
    ee4c:	f280 8124 	bge.w	f098 <_malloc_r+0x388>
    ee50:	f8d8 800c 	ldr.w	r8, [r8, #12]
    ee54:	4545      	cmp	r5, r8
    ee56:	f000 8116 	beq.w	f086 <_malloc_r+0x376>
    ee5a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ee5e:	f022 0203 	bic.w	r2, r2, #3
    ee62:	1b93      	subs	r3, r2, r6
    ee64:	2b0f      	cmp	r3, #15
    ee66:	ddf0      	ble.n	ee4a <_malloc_r+0x13a>
    ee68:	4620      	mov	r0, r4
    ee6a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    ee6e:	eb08 0106 	add.w	r1, r8, r6
    ee72:	f046 0601 	orr.w	r6, r6, #1
    ee76:	f8c8 6004 	str.w	r6, [r8, #4]
    ee7a:	60ec      	str	r4, [r5, #12]
    ee7c:	60a5      	str	r5, [r4, #8]
    ee7e:	f043 0401 	orr.w	r4, r3, #1
    ee82:	e9c7 1104 	strd	r1, r1, [r7, #16]
    ee86:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    ee8a:	604c      	str	r4, [r1, #4]
    ee8c:	f848 3002 	str.w	r3, [r8, r2]
    ee90:	f000 f9f4 	bl	f27c <__malloc_unlock>
    ee94:	f108 0508 	add.w	r5, r8, #8
    ee98:	e002      	b.n	eea0 <_malloc_r+0x190>
    ee9a:	230c      	movs	r3, #12
    ee9c:	6023      	str	r3, [r4, #0]
    ee9e:	2500      	movs	r5, #0
    eea0:	4628      	mov	r0, r5
    eea2:	b003      	add	sp, #12
    eea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eea8:	f44f 7300 	mov.w	r3, #512	; 0x200
    eeac:	2040      	movs	r0, #64	; 0x40
    eeae:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    eeb2:	e773      	b.n	ed9c <_malloc_r+0x8c>
    eeb4:	68d3      	ldr	r3, [r2, #12]
    eeb6:	429a      	cmp	r2, r3
    eeb8:	bf08      	it	eq
    eeba:	3002      	addeq	r0, #2
    eebc:	f47f af40 	bne.w	ed40 <_malloc_r+0x30>
    eec0:	693d      	ldr	r5, [r7, #16]
    eec2:	f8df c158 	ldr.w	ip, [pc, #344]	; f01c <_malloc_r+0x30c>
    eec6:	4565      	cmp	r5, ip
    eec8:	d182      	bne.n	edd0 <_malloc_r+0xc0>
    eeca:	687a      	ldr	r2, [r7, #4]
    eecc:	1083      	asrs	r3, r0, #2
    eece:	2101      	movs	r1, #1
    eed0:	4099      	lsls	r1, r3
    eed2:	4291      	cmp	r1, r2
    eed4:	d9a7      	bls.n	ee26 <_malloc_r+0x116>
    eed6:	68bd      	ldr	r5, [r7, #8]
    eed8:	686b      	ldr	r3, [r5, #4]
    eeda:	f023 0903 	bic.w	r9, r3, #3
    eede:	454e      	cmp	r6, r9
    eee0:	d803      	bhi.n	eeea <_malloc_r+0x1da>
    eee2:	eba9 0306 	sub.w	r3, r9, r6
    eee6:	2b0f      	cmp	r3, #15
    eee8:	dc7a      	bgt.n	efe0 <_malloc_r+0x2d0>
    eeea:	f8df b134 	ldr.w	fp, [pc, #308]	; f020 <_malloc_r+0x310>
    eeee:	4b47      	ldr	r3, [pc, #284]	; (f00c <_malloc_r+0x2fc>)
    eef0:	f8db 2000 	ldr.w	r2, [fp]
    eef4:	681b      	ldr	r3, [r3, #0]
    eef6:	3201      	adds	r2, #1
    eef8:	4433      	add	r3, r6
    eefa:	eb05 0a09 	add.w	sl, r5, r9
    eefe:	f000 8133 	beq.w	f168 <_malloc_r+0x458>
    ef02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    ef06:	330f      	adds	r3, #15
    ef08:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    ef0c:	f028 080f 	bic.w	r8, r8, #15
    ef10:	4641      	mov	r1, r8
    ef12:	4620      	mov	r0, r4
    ef14:	f001 ffd0 	bl	10eb8 <_sbrk_r>
    ef18:	1c41      	adds	r1, r0, #1
    ef1a:	4602      	mov	r2, r0
    ef1c:	f000 80f3 	beq.w	f106 <_malloc_r+0x3f6>
    ef20:	4582      	cmp	sl, r0
    ef22:	f200 80ee 	bhi.w	f102 <_malloc_r+0x3f2>
    ef26:	4b3a      	ldr	r3, [pc, #232]	; (f010 <_malloc_r+0x300>)
    ef28:	6819      	ldr	r1, [r3, #0]
    ef2a:	4441      	add	r1, r8
    ef2c:	6019      	str	r1, [r3, #0]
    ef2e:	4608      	mov	r0, r1
    ef30:	f000 814e 	beq.w	f1d0 <_malloc_r+0x4c0>
    ef34:	f8db 1000 	ldr.w	r1, [fp]
    ef38:	9301      	str	r3, [sp, #4]
    ef3a:	3101      	adds	r1, #1
    ef3c:	bf1b      	ittet	ne
    ef3e:	eba2 010a 	subne.w	r1, r2, sl
    ef42:	1809      	addne	r1, r1, r0
    ef44:	f8cb 2000 	streq.w	r2, [fp]
    ef48:	6019      	strne	r1, [r3, #0]
    ef4a:	f012 0b07 	ands.w	fp, r2, #7
    ef4e:	f000 8117 	beq.w	f180 <_malloc_r+0x470>
    ef52:	f1cb 0108 	rsb	r1, fp, #8
    ef56:	440a      	add	r2, r1
    ef58:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    ef5c:	4490      	add	r8, r2
    ef5e:	3108      	adds	r1, #8
    ef60:	eba1 0108 	sub.w	r1, r1, r8
    ef64:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    ef68:	4651      	mov	r1, sl
    ef6a:	4620      	mov	r0, r4
    ef6c:	9200      	str	r2, [sp, #0]
    ef6e:	f001 ffa3 	bl	10eb8 <_sbrk_r>
    ef72:	1c42      	adds	r2, r0, #1
    ef74:	e9dd 2300 	ldrd	r2, r3, [sp]
    ef78:	f000 814f 	beq.w	f21a <_malloc_r+0x50a>
    ef7c:	1a80      	subs	r0, r0, r2
    ef7e:	eb00 080a 	add.w	r8, r0, sl
    ef82:	6819      	ldr	r1, [r3, #0]
    ef84:	60ba      	str	r2, [r7, #8]
    ef86:	f048 0001 	orr.w	r0, r8, #1
    ef8a:	4451      	add	r1, sl
    ef8c:	42bd      	cmp	r5, r7
    ef8e:	6050      	str	r0, [r2, #4]
    ef90:	6019      	str	r1, [r3, #0]
    ef92:	f000 8129 	beq.w	f1e8 <_malloc_r+0x4d8>
    ef96:	f1b9 0f0f 	cmp.w	r9, #15
    ef9a:	f240 8127 	bls.w	f1ec <_malloc_r+0x4dc>
    ef9e:	6868      	ldr	r0, [r5, #4]
    efa0:	f1a9 0c0c 	sub.w	ip, r9, #12
    efa4:	f02c 0c07 	bic.w	ip, ip, #7
    efa8:	f000 0001 	and.w	r0, r0, #1
    efac:	ea40 000c 	orr.w	r0, r0, ip
    efb0:	6068      	str	r0, [r5, #4]
    efb2:	f04f 0e05 	mov.w	lr, #5
    efb6:	eb05 000c 	add.w	r0, r5, ip
    efba:	f1bc 0f0f 	cmp.w	ip, #15
    efbe:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    efc2:	f200 8132 	bhi.w	f22a <_malloc_r+0x51a>
    efc6:	6850      	ldr	r0, [r2, #4]
    efc8:	4615      	mov	r5, r2
    efca:	4b12      	ldr	r3, [pc, #72]	; (f014 <_malloc_r+0x304>)
    efcc:	681a      	ldr	r2, [r3, #0]
    efce:	428a      	cmp	r2, r1
    efd0:	bf38      	it	cc
    efd2:	6019      	strcc	r1, [r3, #0]
    efd4:	4b10      	ldr	r3, [pc, #64]	; (f018 <_malloc_r+0x308>)
    efd6:	681a      	ldr	r2, [r3, #0]
    efd8:	428a      	cmp	r2, r1
    efda:	bf38      	it	cc
    efdc:	6019      	strcc	r1, [r3, #0]
    efde:	e094      	b.n	f10a <_malloc_r+0x3fa>
    efe0:	19aa      	adds	r2, r5, r6
    efe2:	f043 0301 	orr.w	r3, r3, #1
    efe6:	f046 0601 	orr.w	r6, r6, #1
    efea:	606e      	str	r6, [r5, #4]
    efec:	4620      	mov	r0, r4
    efee:	60ba      	str	r2, [r7, #8]
    eff0:	6053      	str	r3, [r2, #4]
    eff2:	f000 f943 	bl	f27c <__malloc_unlock>
    eff6:	3508      	adds	r5, #8
    eff8:	4628      	mov	r0, r5
    effa:	b003      	add	sp, #12
    effc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f000:	68d9      	ldr	r1, [r3, #12]
    f002:	441a      	add	r2, r3
    f004:	e6a1      	b.n	ed4a <_malloc_r+0x3a>
    f006:	bf00      	nop
    f008:	20008be0 	.word	0x20008be0
    f00c:	2004257c 	.word	0x2004257c
    f010:	2004254c 	.word	0x2004254c
    f014:	20042574 	.word	0x20042574
    f018:	20042578 	.word	0x20042578
    f01c:	20008be8 	.word	0x20008be8
    f020:	20008fe8 	.word	0x20008fe8
    f024:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    f028:	ea4f 2352 	mov.w	r3, r2, lsr #9
    f02c:	d363      	bcc.n	f0f6 <_malloc_r+0x3e6>
    f02e:	2b14      	cmp	r3, #20
    f030:	f200 80b7 	bhi.w	f1a2 <_malloc_r+0x492>
    f034:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    f038:	00c9      	lsls	r1, r1, #3
    f03a:	335b      	adds	r3, #91	; 0x5b
    f03c:	eb07 0e01 	add.w	lr, r7, r1
    f040:	5879      	ldr	r1, [r7, r1]
    f042:	f1ae 0e08 	sub.w	lr, lr, #8
    f046:	458e      	cmp	lr, r1
    f048:	f000 8091 	beq.w	f16e <_malloc_r+0x45e>
    f04c:	684b      	ldr	r3, [r1, #4]
    f04e:	f023 0303 	bic.w	r3, r3, #3
    f052:	4293      	cmp	r3, r2
    f054:	d902      	bls.n	f05c <_malloc_r+0x34c>
    f056:	6889      	ldr	r1, [r1, #8]
    f058:	458e      	cmp	lr, r1
    f05a:	d1f7      	bne.n	f04c <_malloc_r+0x33c>
    f05c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    f060:	687a      	ldr	r2, [r7, #4]
    f062:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    f066:	f8ce 5008 	str.w	r5, [lr, #8]
    f06a:	60cd      	str	r5, [r1, #12]
    f06c:	e6d6      	b.n	ee1c <_malloc_r+0x10c>
    f06e:	2b14      	cmp	r3, #20
    f070:	d959      	bls.n	f126 <_malloc_r+0x416>
    f072:	2b54      	cmp	r3, #84	; 0x54
    f074:	f200 809d 	bhi.w	f1b2 <_malloc_r+0x4a2>
    f078:	0b33      	lsrs	r3, r6, #12
    f07a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    f07e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    f082:	00c3      	lsls	r3, r0, #3
    f084:	e68a      	b.n	ed9c <_malloc_r+0x8c>
    f086:	f10e 0e01 	add.w	lr, lr, #1
    f08a:	f01e 0f03 	tst.w	lr, #3
    f08e:	f105 0508 	add.w	r5, r5, #8
    f092:	f47f aed5 	bne.w	ee40 <_malloc_r+0x130>
    f096:	e051      	b.n	f13c <_malloc_r+0x42c>
    f098:	4442      	add	r2, r8
    f09a:	4645      	mov	r5, r8
    f09c:	6853      	ldr	r3, [r2, #4]
    f09e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    f0a2:	f043 0301 	orr.w	r3, r3, #1
    f0a6:	6053      	str	r3, [r2, #4]
    f0a8:	f855 3f08 	ldr.w	r3, [r5, #8]!
    f0ac:	4620      	mov	r0, r4
    f0ae:	60d9      	str	r1, [r3, #12]
    f0b0:	608b      	str	r3, [r1, #8]
    f0b2:	f000 f8e3 	bl	f27c <__malloc_unlock>
    f0b6:	e6f3      	b.n	eea0 <_malloc_r+0x190>
    f0b8:	08f0      	lsrs	r0, r6, #3
    f0ba:	f106 0208 	add.w	r2, r6, #8
    f0be:	e637      	b.n	ed30 <_malloc_r+0x20>
    f0c0:	442a      	add	r2, r5
    f0c2:	4620      	mov	r0, r4
    f0c4:	6853      	ldr	r3, [r2, #4]
    f0c6:	f043 0301 	orr.w	r3, r3, #1
    f0ca:	6053      	str	r3, [r2, #4]
    f0cc:	3508      	adds	r5, #8
    f0ce:	f000 f8d5 	bl	f27c <__malloc_unlock>
    f0d2:	e6e5      	b.n	eea0 <_malloc_r+0x190>
    f0d4:	19a9      	adds	r1, r5, r6
    f0d6:	4620      	mov	r0, r4
    f0d8:	f046 0601 	orr.w	r6, r6, #1
    f0dc:	f043 0401 	orr.w	r4, r3, #1
    f0e0:	606e      	str	r6, [r5, #4]
    f0e2:	e9c7 1104 	strd	r1, r1, [r7, #16]
    f0e6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    f0ea:	604c      	str	r4, [r1, #4]
    f0ec:	50ab      	str	r3, [r5, r2]
    f0ee:	f000 f8c5 	bl	f27c <__malloc_unlock>
    f0f2:	3508      	adds	r5, #8
    f0f4:	e6d4      	b.n	eea0 <_malloc_r+0x190>
    f0f6:	0993      	lsrs	r3, r2, #6
    f0f8:	f103 0139 	add.w	r1, r3, #57	; 0x39
    f0fc:	00c9      	lsls	r1, r1, #3
    f0fe:	3338      	adds	r3, #56	; 0x38
    f100:	e79c      	b.n	f03c <_malloc_r+0x32c>
    f102:	42bd      	cmp	r5, r7
    f104:	d05f      	beq.n	f1c6 <_malloc_r+0x4b6>
    f106:	68bd      	ldr	r5, [r7, #8]
    f108:	6868      	ldr	r0, [r5, #4]
    f10a:	f020 0803 	bic.w	r8, r0, #3
    f10e:	4546      	cmp	r6, r8
    f110:	eba8 0306 	sub.w	r3, r8, r6
    f114:	d802      	bhi.n	f11c <_malloc_r+0x40c>
    f116:	2b0f      	cmp	r3, #15
    f118:	f73f af62 	bgt.w	efe0 <_malloc_r+0x2d0>
    f11c:	4620      	mov	r0, r4
    f11e:	f000 f8ad 	bl	f27c <__malloc_unlock>
    f122:	2500      	movs	r5, #0
    f124:	e6bc      	b.n	eea0 <_malloc_r+0x190>
    f126:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    f12a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    f12e:	00c3      	lsls	r3, r0, #3
    f130:	e634      	b.n	ed9c <_malloc_r+0x8c>
    f132:	f859 3908 	ldr.w	r3, [r9], #-8
    f136:	454b      	cmp	r3, r9
    f138:	f040 8096 	bne.w	f268 <_malloc_r+0x558>
    f13c:	f010 0f03 	tst.w	r0, #3
    f140:	f100 30ff 	add.w	r0, r0, #4294967295
    f144:	d1f5      	bne.n	f132 <_malloc_r+0x422>
    f146:	687b      	ldr	r3, [r7, #4]
    f148:	ea23 0301 	bic.w	r3, r3, r1
    f14c:	607b      	str	r3, [r7, #4]
    f14e:	0049      	lsls	r1, r1, #1
    f150:	4299      	cmp	r1, r3
    f152:	f63f aec0 	bhi.w	eed6 <_malloc_r+0x1c6>
    f156:	b919      	cbnz	r1, f160 <_malloc_r+0x450>
    f158:	e6bd      	b.n	eed6 <_malloc_r+0x1c6>
    f15a:	0049      	lsls	r1, r1, #1
    f15c:	f10e 0e04 	add.w	lr, lr, #4
    f160:	4219      	tst	r1, r3
    f162:	d0fa      	beq.n	f15a <_malloc_r+0x44a>
    f164:	4670      	mov	r0, lr
    f166:	e667      	b.n	ee38 <_malloc_r+0x128>
    f168:	f103 0810 	add.w	r8, r3, #16
    f16c:	e6d0      	b.n	ef10 <_malloc_r+0x200>
    f16e:	109a      	asrs	r2, r3, #2
    f170:	f04f 0801 	mov.w	r8, #1
    f174:	687b      	ldr	r3, [r7, #4]
    f176:	fa08 f202 	lsl.w	r2, r8, r2
    f17a:	431a      	orrs	r2, r3
    f17c:	607a      	str	r2, [r7, #4]
    f17e:	e770      	b.n	f062 <_malloc_r+0x352>
    f180:	eb02 0108 	add.w	r1, r2, r8
    f184:	4249      	negs	r1, r1
    f186:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    f18a:	4651      	mov	r1, sl
    f18c:	4620      	mov	r0, r4
    f18e:	9200      	str	r2, [sp, #0]
    f190:	f001 fe92 	bl	10eb8 <_sbrk_r>
    f194:	1c43      	adds	r3, r0, #1
    f196:	e9dd 2300 	ldrd	r2, r3, [sp]
    f19a:	f47f aeef 	bne.w	ef7c <_malloc_r+0x26c>
    f19e:	46da      	mov	sl, fp
    f1a0:	e6ef      	b.n	ef82 <_malloc_r+0x272>
    f1a2:	2b54      	cmp	r3, #84	; 0x54
    f1a4:	d825      	bhi.n	f1f2 <_malloc_r+0x4e2>
    f1a6:	0b13      	lsrs	r3, r2, #12
    f1a8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    f1ac:	00c9      	lsls	r1, r1, #3
    f1ae:	336e      	adds	r3, #110	; 0x6e
    f1b0:	e744      	b.n	f03c <_malloc_r+0x32c>
    f1b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f1b6:	d825      	bhi.n	f204 <_malloc_r+0x4f4>
    f1b8:	0bf3      	lsrs	r3, r6, #15
    f1ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
    f1be:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    f1c2:	00c3      	lsls	r3, r0, #3
    f1c4:	e5ea      	b.n	ed9c <_malloc_r+0x8c>
    f1c6:	4b29      	ldr	r3, [pc, #164]	; (f26c <_malloc_r+0x55c>)
    f1c8:	6818      	ldr	r0, [r3, #0]
    f1ca:	4440      	add	r0, r8
    f1cc:	6018      	str	r0, [r3, #0]
    f1ce:	e6b1      	b.n	ef34 <_malloc_r+0x224>
    f1d0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    f1d4:	f1bc 0f00 	cmp.w	ip, #0
    f1d8:	f47f aeac 	bne.w	ef34 <_malloc_r+0x224>
    f1dc:	68bd      	ldr	r5, [r7, #8]
    f1de:	44c8      	add	r8, r9
    f1e0:	f048 0001 	orr.w	r0, r8, #1
    f1e4:	6068      	str	r0, [r5, #4]
    f1e6:	e6f0      	b.n	efca <_malloc_r+0x2ba>
    f1e8:	4615      	mov	r5, r2
    f1ea:	e6ee      	b.n	efca <_malloc_r+0x2ba>
    f1ec:	2301      	movs	r3, #1
    f1ee:	6053      	str	r3, [r2, #4]
    f1f0:	e794      	b.n	f11c <_malloc_r+0x40c>
    f1f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    f1f6:	d823      	bhi.n	f240 <_malloc_r+0x530>
    f1f8:	0bd3      	lsrs	r3, r2, #15
    f1fa:	f103 0178 	add.w	r1, r3, #120	; 0x78
    f1fe:	00c9      	lsls	r1, r1, #3
    f200:	3377      	adds	r3, #119	; 0x77
    f202:	e71b      	b.n	f03c <_malloc_r+0x32c>
    f204:	f240 5254 	movw	r2, #1364	; 0x554
    f208:	4293      	cmp	r3, r2
    f20a:	d823      	bhi.n	f254 <_malloc_r+0x544>
    f20c:	0cb3      	lsrs	r3, r6, #18
    f20e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    f212:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    f216:	00c3      	lsls	r3, r0, #3
    f218:	e5c0      	b.n	ed9c <_malloc_r+0x8c>
    f21a:	f1ab 0b08 	sub.w	fp, fp, #8
    f21e:	44d8      	add	r8, fp
    f220:	eba8 0802 	sub.w	r8, r8, r2
    f224:	f04f 0a00 	mov.w	sl, #0
    f228:	e6ab      	b.n	ef82 <_malloc_r+0x272>
    f22a:	f105 0108 	add.w	r1, r5, #8
    f22e:	4620      	mov	r0, r4
    f230:	9300      	str	r3, [sp, #0]
    f232:	f002 f9d7 	bl	115e4 <_free_r>
    f236:	68bd      	ldr	r5, [r7, #8]
    f238:	9b00      	ldr	r3, [sp, #0]
    f23a:	6868      	ldr	r0, [r5, #4]
    f23c:	6819      	ldr	r1, [r3, #0]
    f23e:	e6c4      	b.n	efca <_malloc_r+0x2ba>
    f240:	f240 5154 	movw	r1, #1364	; 0x554
    f244:	428b      	cmp	r3, r1
    f246:	d80b      	bhi.n	f260 <_malloc_r+0x550>
    f248:	0c93      	lsrs	r3, r2, #18
    f24a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    f24e:	00c9      	lsls	r1, r1, #3
    f250:	337c      	adds	r3, #124	; 0x7c
    f252:	e6f3      	b.n	f03c <_malloc_r+0x32c>
    f254:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    f258:	207f      	movs	r0, #127	; 0x7f
    f25a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    f25e:	e59d      	b.n	ed9c <_malloc_r+0x8c>
    f260:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    f264:	237e      	movs	r3, #126	; 0x7e
    f266:	e6e9      	b.n	f03c <_malloc_r+0x32c>
    f268:	687b      	ldr	r3, [r7, #4]
    f26a:	e770      	b.n	f14e <_malloc_r+0x43e>
    f26c:	2004254c 	.word	0x2004254c

0000f270 <__malloc_lock>:
    f270:	4801      	ldr	r0, [pc, #4]	; (f278 <__malloc_lock+0x8>)
    f272:	f001 be77 	b.w	10f64 <__retarget_lock_acquire_recursive>
    f276:	bf00      	nop
    f278:	20042544 	.word	0x20042544

0000f27c <__malloc_unlock>:
    f27c:	4801      	ldr	r0, [pc, #4]	; (f284 <__malloc_unlock+0x8>)
    f27e:	f001 be73 	b.w	10f68 <__retarget_lock_release_recursive>
    f282:	bf00      	nop
    f284:	20042544 	.word	0x20042544

0000f288 <realloc>:
    f288:	b410      	push	{r4}
    f28a:	4c04      	ldr	r4, [pc, #16]	; (f29c <realloc+0x14>)
    f28c:	4603      	mov	r3, r0
    f28e:	460a      	mov	r2, r1
    f290:	6820      	ldr	r0, [r4, #0]
    f292:	f85d 4b04 	ldr.w	r4, [sp], #4
    f296:	4619      	mov	r1, r3
    f298:	f000 b802 	b.w	f2a0 <_realloc_r>
    f29c:	20008ffc 	.word	0x20008ffc

0000f2a0 <_realloc_r>:
    f2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f2a4:	4617      	mov	r7, r2
    f2a6:	2900      	cmp	r1, #0
    f2a8:	f000 8098 	beq.w	f3dc <_realloc_r+0x13c>
    f2ac:	460c      	mov	r4, r1
    f2ae:	f107 050b 	add.w	r5, r7, #11
    f2b2:	4680      	mov	r8, r0
    f2b4:	f7ff ffdc 	bl	f270 <__malloc_lock>
    f2b8:	2d16      	cmp	r5, #22
    f2ba:	f854 1c04 	ldr.w	r1, [r4, #-4]
    f2be:	d85b      	bhi.n	f378 <_realloc_r+0xd8>
    f2c0:	2510      	movs	r5, #16
    f2c2:	462a      	mov	r2, r5
    f2c4:	42af      	cmp	r7, r5
    f2c6:	d85c      	bhi.n	f382 <_realloc_r+0xe2>
    f2c8:	f021 0603 	bic.w	r6, r1, #3
    f2cc:	4296      	cmp	r6, r2
    f2ce:	f1a4 0908 	sub.w	r9, r4, #8
    f2d2:	da62      	bge.n	f39a <_realloc_r+0xfa>
    f2d4:	4bbc      	ldr	r3, [pc, #752]	; (f5c8 <_realloc_r+0x328>)
    f2d6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    f2da:	eb09 0006 	add.w	r0, r9, r6
    f2de:	4584      	cmp	ip, r0
    f2e0:	f000 8097 	beq.w	f412 <_realloc_r+0x172>
    f2e4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    f2e8:	f02c 0301 	bic.w	r3, ip, #1
    f2ec:	4403      	add	r3, r0
    f2ee:	685b      	ldr	r3, [r3, #4]
    f2f0:	07db      	lsls	r3, r3, #31
    f2f2:	d468      	bmi.n	f3c6 <_realloc_r+0x126>
    f2f4:	f02c 0c03 	bic.w	ip, ip, #3
    f2f8:	eb06 030c 	add.w	r3, r6, ip
    f2fc:	4293      	cmp	r3, r2
    f2fe:	da47      	bge.n	f390 <_realloc_r+0xf0>
    f300:	07cb      	lsls	r3, r1, #31
    f302:	d410      	bmi.n	f326 <_realloc_r+0x86>
    f304:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f308:	eba9 0a03 	sub.w	sl, r9, r3
    f30c:	f8da 3004 	ldr.w	r3, [sl, #4]
    f310:	f023 0103 	bic.w	r1, r3, #3
    f314:	448c      	add	ip, r1
    f316:	44b4      	add	ip, r6
    f318:	4594      	cmp	ip, r2
    f31a:	f280 8111 	bge.w	f540 <_realloc_r+0x2a0>
    f31e:	1873      	adds	r3, r6, r1
    f320:	4293      	cmp	r3, r2
    f322:	f280 80e8 	bge.w	f4f6 <_realloc_r+0x256>
    f326:	4639      	mov	r1, r7
    f328:	4640      	mov	r0, r8
    f32a:	f7ff fcf1 	bl	ed10 <_malloc_r>
    f32e:	4607      	mov	r7, r0
    f330:	b1e0      	cbz	r0, f36c <_realloc_r+0xcc>
    f332:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f336:	f023 0301 	bic.w	r3, r3, #1
    f33a:	444b      	add	r3, r9
    f33c:	f1a0 0208 	sub.w	r2, r0, #8
    f340:	4293      	cmp	r3, r2
    f342:	f000 80d2 	beq.w	f4ea <_realloc_r+0x24a>
    f346:	1f32      	subs	r2, r6, #4
    f348:	2a24      	cmp	r2, #36	; 0x24
    f34a:	f200 80f5 	bhi.w	f538 <_realloc_r+0x298>
    f34e:	2a13      	cmp	r2, #19
    f350:	f200 80ac 	bhi.w	f4ac <_realloc_r+0x20c>
    f354:	4603      	mov	r3, r0
    f356:	4622      	mov	r2, r4
    f358:	6811      	ldr	r1, [r2, #0]
    f35a:	6019      	str	r1, [r3, #0]
    f35c:	6851      	ldr	r1, [r2, #4]
    f35e:	6059      	str	r1, [r3, #4]
    f360:	6892      	ldr	r2, [r2, #8]
    f362:	609a      	str	r2, [r3, #8]
    f364:	4621      	mov	r1, r4
    f366:	4640      	mov	r0, r8
    f368:	f002 f93c 	bl	115e4 <_free_r>
    f36c:	4640      	mov	r0, r8
    f36e:	f7ff ff85 	bl	f27c <__malloc_unlock>
    f372:	4638      	mov	r0, r7
    f374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f378:	f025 0507 	bic.w	r5, r5, #7
    f37c:	2d00      	cmp	r5, #0
    f37e:	462a      	mov	r2, r5
    f380:	daa0      	bge.n	f2c4 <_realloc_r+0x24>
    f382:	230c      	movs	r3, #12
    f384:	f8c8 3000 	str.w	r3, [r8]
    f388:	2700      	movs	r7, #0
    f38a:	4638      	mov	r0, r7
    f38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f390:	461e      	mov	r6, r3
    f392:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    f396:	60d3      	str	r3, [r2, #12]
    f398:	609a      	str	r2, [r3, #8]
    f39a:	1b73      	subs	r3, r6, r5
    f39c:	2b0f      	cmp	r3, #15
    f39e:	d822      	bhi.n	f3e6 <_realloc_r+0x146>
    f3a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    f3a4:	f003 0301 	and.w	r3, r3, #1
    f3a8:	4333      	orrs	r3, r6
    f3aa:	444e      	add	r6, r9
    f3ac:	f8c9 3004 	str.w	r3, [r9, #4]
    f3b0:	6873      	ldr	r3, [r6, #4]
    f3b2:	f043 0301 	orr.w	r3, r3, #1
    f3b6:	6073      	str	r3, [r6, #4]
    f3b8:	4640      	mov	r0, r8
    f3ba:	4627      	mov	r7, r4
    f3bc:	f7ff ff5e 	bl	f27c <__malloc_unlock>
    f3c0:	4638      	mov	r0, r7
    f3c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f3c6:	07c9      	lsls	r1, r1, #31
    f3c8:	d4ad      	bmi.n	f326 <_realloc_r+0x86>
    f3ca:	f854 3c08 	ldr.w	r3, [r4, #-8]
    f3ce:	eba9 0a03 	sub.w	sl, r9, r3
    f3d2:	f8da 1004 	ldr.w	r1, [sl, #4]
    f3d6:	f021 0103 	bic.w	r1, r1, #3
    f3da:	e7a0      	b.n	f31e <_realloc_r+0x7e>
    f3dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3e0:	4611      	mov	r1, r2
    f3e2:	f7ff bc95 	b.w	ed10 <_malloc_r>
    f3e6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    f3ea:	eb09 0105 	add.w	r1, r9, r5
    f3ee:	f002 0201 	and.w	r2, r2, #1
    f3f2:	444e      	add	r6, r9
    f3f4:	f043 0301 	orr.w	r3, r3, #1
    f3f8:	432a      	orrs	r2, r5
    f3fa:	f8c9 2004 	str.w	r2, [r9, #4]
    f3fe:	604b      	str	r3, [r1, #4]
    f400:	6873      	ldr	r3, [r6, #4]
    f402:	f043 0301 	orr.w	r3, r3, #1
    f406:	3108      	adds	r1, #8
    f408:	6073      	str	r3, [r6, #4]
    f40a:	4640      	mov	r0, r8
    f40c:	f002 f8ea 	bl	115e4 <_free_r>
    f410:	e7d2      	b.n	f3b8 <_realloc_r+0x118>
    f412:	f8dc 0004 	ldr.w	r0, [ip, #4]
    f416:	f020 0b03 	bic.w	fp, r0, #3
    f41a:	eb06 0c0b 	add.w	ip, r6, fp
    f41e:	f105 0010 	add.w	r0, r5, #16
    f422:	4584      	cmp	ip, r0
    f424:	da4d      	bge.n	f4c2 <_realloc_r+0x222>
    f426:	07c9      	lsls	r1, r1, #31
    f428:	f53f af7d 	bmi.w	f326 <_realloc_r+0x86>
    f42c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    f430:	eba9 0a01 	sub.w	sl, r9, r1
    f434:	f8da 1004 	ldr.w	r1, [sl, #4]
    f438:	f021 0103 	bic.w	r1, r1, #3
    f43c:	448b      	add	fp, r1
    f43e:	44b3      	add	fp, r6
    f440:	4558      	cmp	r0, fp
    f442:	f73f af6c 	bgt.w	f31e <_realloc_r+0x7e>
    f446:	4657      	mov	r7, sl
    f448:	f8da 100c 	ldr.w	r1, [sl, #12]
    f44c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f450:	1f32      	subs	r2, r6, #4
    f452:	2a24      	cmp	r2, #36	; 0x24
    f454:	60c1      	str	r1, [r0, #12]
    f456:	6088      	str	r0, [r1, #8]
    f458:	f200 80db 	bhi.w	f612 <_realloc_r+0x372>
    f45c:	2a13      	cmp	r2, #19
    f45e:	f240 80d6 	bls.w	f60e <_realloc_r+0x36e>
    f462:	6821      	ldr	r1, [r4, #0]
    f464:	f8ca 1008 	str.w	r1, [sl, #8]
    f468:	6861      	ldr	r1, [r4, #4]
    f46a:	f8ca 100c 	str.w	r1, [sl, #12]
    f46e:	2a1b      	cmp	r2, #27
    f470:	f200 80df 	bhi.w	f632 <_realloc_r+0x392>
    f474:	3408      	adds	r4, #8
    f476:	f10a 0210 	add.w	r2, sl, #16
    f47a:	6821      	ldr	r1, [r4, #0]
    f47c:	6011      	str	r1, [r2, #0]
    f47e:	6861      	ldr	r1, [r4, #4]
    f480:	6051      	str	r1, [r2, #4]
    f482:	68a1      	ldr	r1, [r4, #8]
    f484:	6091      	str	r1, [r2, #8]
    f486:	eb0a 0105 	add.w	r1, sl, r5
    f48a:	ebab 0205 	sub.w	r2, fp, r5
    f48e:	f042 0201 	orr.w	r2, r2, #1
    f492:	6099      	str	r1, [r3, #8]
    f494:	604a      	str	r2, [r1, #4]
    f496:	f8da 3004 	ldr.w	r3, [sl, #4]
    f49a:	f003 0301 	and.w	r3, r3, #1
    f49e:	432b      	orrs	r3, r5
    f4a0:	4640      	mov	r0, r8
    f4a2:	f8ca 3004 	str.w	r3, [sl, #4]
    f4a6:	f7ff fee9 	bl	f27c <__malloc_unlock>
    f4aa:	e76e      	b.n	f38a <_realloc_r+0xea>
    f4ac:	6823      	ldr	r3, [r4, #0]
    f4ae:	6003      	str	r3, [r0, #0]
    f4b0:	6863      	ldr	r3, [r4, #4]
    f4b2:	6043      	str	r3, [r0, #4]
    f4b4:	2a1b      	cmp	r2, #27
    f4b6:	d868      	bhi.n	f58a <_realloc_r+0x2ea>
    f4b8:	f104 0208 	add.w	r2, r4, #8
    f4bc:	f100 0308 	add.w	r3, r0, #8
    f4c0:	e74a      	b.n	f358 <_realloc_r+0xb8>
    f4c2:	eb09 0205 	add.w	r2, r9, r5
    f4c6:	609a      	str	r2, [r3, #8]
    f4c8:	ebac 0305 	sub.w	r3, ip, r5
    f4cc:	f043 0301 	orr.w	r3, r3, #1
    f4d0:	6053      	str	r3, [r2, #4]
    f4d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f4d6:	f003 0301 	and.w	r3, r3, #1
    f4da:	432b      	orrs	r3, r5
    f4dc:	4640      	mov	r0, r8
    f4de:	f844 3c04 	str.w	r3, [r4, #-4]
    f4e2:	f7ff fecb 	bl	f27c <__malloc_unlock>
    f4e6:	4627      	mov	r7, r4
    f4e8:	e74f      	b.n	f38a <_realloc_r+0xea>
    f4ea:	f850 3c04 	ldr.w	r3, [r0, #-4]
    f4ee:	f023 0303 	bic.w	r3, r3, #3
    f4f2:	441e      	add	r6, r3
    f4f4:	e751      	b.n	f39a <_realloc_r+0xfa>
    f4f6:	4657      	mov	r7, sl
    f4f8:	f8da 100c 	ldr.w	r1, [sl, #12]
    f4fc:	f857 0f08 	ldr.w	r0, [r7, #8]!
    f500:	1f32      	subs	r2, r6, #4
    f502:	2a24      	cmp	r2, #36	; 0x24
    f504:	60c1      	str	r1, [r0, #12]
    f506:	6088      	str	r0, [r1, #8]
    f508:	d84c      	bhi.n	f5a4 <_realloc_r+0x304>
    f50a:	2a13      	cmp	r2, #19
    f50c:	d948      	bls.n	f5a0 <_realloc_r+0x300>
    f50e:	6821      	ldr	r1, [r4, #0]
    f510:	f8ca 1008 	str.w	r1, [sl, #8]
    f514:	6861      	ldr	r1, [r4, #4]
    f516:	f8ca 100c 	str.w	r1, [sl, #12]
    f51a:	2a1b      	cmp	r2, #27
    f51c:	d856      	bhi.n	f5cc <_realloc_r+0x32c>
    f51e:	3408      	adds	r4, #8
    f520:	f10a 0210 	add.w	r2, sl, #16
    f524:	461e      	mov	r6, r3
    f526:	6823      	ldr	r3, [r4, #0]
    f528:	6013      	str	r3, [r2, #0]
    f52a:	6863      	ldr	r3, [r4, #4]
    f52c:	6053      	str	r3, [r2, #4]
    f52e:	68a3      	ldr	r3, [r4, #8]
    f530:	6093      	str	r3, [r2, #8]
    f532:	46d1      	mov	r9, sl
    f534:	463c      	mov	r4, r7
    f536:	e730      	b.n	f39a <_realloc_r+0xfa>
    f538:	4621      	mov	r1, r4
    f53a:	f001 fadd 	bl	10af8 <memmove>
    f53e:	e711      	b.n	f364 <_realloc_r+0xc4>
    f540:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    f544:	4657      	mov	r7, sl
    f546:	60cb      	str	r3, [r1, #12]
    f548:	6099      	str	r1, [r3, #8]
    f54a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    f54e:	f8da 300c 	ldr.w	r3, [sl, #12]
    f552:	60cb      	str	r3, [r1, #12]
    f554:	1f32      	subs	r2, r6, #4
    f556:	2a24      	cmp	r2, #36	; 0x24
    f558:	6099      	str	r1, [r3, #8]
    f55a:	d82d      	bhi.n	f5b8 <_realloc_r+0x318>
    f55c:	2a13      	cmp	r2, #19
    f55e:	d929      	bls.n	f5b4 <_realloc_r+0x314>
    f560:	6823      	ldr	r3, [r4, #0]
    f562:	f8ca 3008 	str.w	r3, [sl, #8]
    f566:	6863      	ldr	r3, [r4, #4]
    f568:	f8ca 300c 	str.w	r3, [sl, #12]
    f56c:	2a1b      	cmp	r2, #27
    f56e:	d842      	bhi.n	f5f6 <_realloc_r+0x356>
    f570:	3408      	adds	r4, #8
    f572:	f10a 0310 	add.w	r3, sl, #16
    f576:	6822      	ldr	r2, [r4, #0]
    f578:	601a      	str	r2, [r3, #0]
    f57a:	6862      	ldr	r2, [r4, #4]
    f57c:	605a      	str	r2, [r3, #4]
    f57e:	68a2      	ldr	r2, [r4, #8]
    f580:	609a      	str	r2, [r3, #8]
    f582:	4666      	mov	r6, ip
    f584:	46d1      	mov	r9, sl
    f586:	463c      	mov	r4, r7
    f588:	e707      	b.n	f39a <_realloc_r+0xfa>
    f58a:	68a3      	ldr	r3, [r4, #8]
    f58c:	6083      	str	r3, [r0, #8]
    f58e:	68e3      	ldr	r3, [r4, #12]
    f590:	60c3      	str	r3, [r0, #12]
    f592:	2a24      	cmp	r2, #36	; 0x24
    f594:	d026      	beq.n	f5e4 <_realloc_r+0x344>
    f596:	f104 0210 	add.w	r2, r4, #16
    f59a:	f100 0310 	add.w	r3, r0, #16
    f59e:	e6db      	b.n	f358 <_realloc_r+0xb8>
    f5a0:	463a      	mov	r2, r7
    f5a2:	e7bf      	b.n	f524 <_realloc_r+0x284>
    f5a4:	4621      	mov	r1, r4
    f5a6:	4638      	mov	r0, r7
    f5a8:	461e      	mov	r6, r3
    f5aa:	46d1      	mov	r9, sl
    f5ac:	f001 faa4 	bl	10af8 <memmove>
    f5b0:	463c      	mov	r4, r7
    f5b2:	e6f2      	b.n	f39a <_realloc_r+0xfa>
    f5b4:	463b      	mov	r3, r7
    f5b6:	e7de      	b.n	f576 <_realloc_r+0x2d6>
    f5b8:	4621      	mov	r1, r4
    f5ba:	4638      	mov	r0, r7
    f5bc:	4666      	mov	r6, ip
    f5be:	46d1      	mov	r9, sl
    f5c0:	f001 fa9a 	bl	10af8 <memmove>
    f5c4:	463c      	mov	r4, r7
    f5c6:	e6e8      	b.n	f39a <_realloc_r+0xfa>
    f5c8:	20008be0 	.word	0x20008be0
    f5cc:	68a1      	ldr	r1, [r4, #8]
    f5ce:	f8ca 1010 	str.w	r1, [sl, #16]
    f5d2:	68e1      	ldr	r1, [r4, #12]
    f5d4:	f8ca 1014 	str.w	r1, [sl, #20]
    f5d8:	2a24      	cmp	r2, #36	; 0x24
    f5da:	d020      	beq.n	f61e <_realloc_r+0x37e>
    f5dc:	3410      	adds	r4, #16
    f5de:	f10a 0218 	add.w	r2, sl, #24
    f5e2:	e79f      	b.n	f524 <_realloc_r+0x284>
    f5e4:	6923      	ldr	r3, [r4, #16]
    f5e6:	6103      	str	r3, [r0, #16]
    f5e8:	6961      	ldr	r1, [r4, #20]
    f5ea:	6141      	str	r1, [r0, #20]
    f5ec:	f104 0218 	add.w	r2, r4, #24
    f5f0:	f100 0318 	add.w	r3, r0, #24
    f5f4:	e6b0      	b.n	f358 <_realloc_r+0xb8>
    f5f6:	68a3      	ldr	r3, [r4, #8]
    f5f8:	f8ca 3010 	str.w	r3, [sl, #16]
    f5fc:	68e3      	ldr	r3, [r4, #12]
    f5fe:	f8ca 3014 	str.w	r3, [sl, #20]
    f602:	2a24      	cmp	r2, #36	; 0x24
    f604:	d021      	beq.n	f64a <_realloc_r+0x3aa>
    f606:	3410      	adds	r4, #16
    f608:	f10a 0318 	add.w	r3, sl, #24
    f60c:	e7b3      	b.n	f576 <_realloc_r+0x2d6>
    f60e:	463a      	mov	r2, r7
    f610:	e733      	b.n	f47a <_realloc_r+0x1da>
    f612:	4621      	mov	r1, r4
    f614:	4638      	mov	r0, r7
    f616:	f001 fa6f 	bl	10af8 <memmove>
    f61a:	4b16      	ldr	r3, [pc, #88]	; (f674 <_realloc_r+0x3d4>)
    f61c:	e733      	b.n	f486 <_realloc_r+0x1e6>
    f61e:	6922      	ldr	r2, [r4, #16]
    f620:	f8ca 2018 	str.w	r2, [sl, #24]
    f624:	6962      	ldr	r2, [r4, #20]
    f626:	f8ca 201c 	str.w	r2, [sl, #28]
    f62a:	3418      	adds	r4, #24
    f62c:	f10a 0220 	add.w	r2, sl, #32
    f630:	e778      	b.n	f524 <_realloc_r+0x284>
    f632:	68a1      	ldr	r1, [r4, #8]
    f634:	f8ca 1010 	str.w	r1, [sl, #16]
    f638:	68e1      	ldr	r1, [r4, #12]
    f63a:	f8ca 1014 	str.w	r1, [sl, #20]
    f63e:	2a24      	cmp	r2, #36	; 0x24
    f640:	d00d      	beq.n	f65e <_realloc_r+0x3be>
    f642:	3410      	adds	r4, #16
    f644:	f10a 0218 	add.w	r2, sl, #24
    f648:	e717      	b.n	f47a <_realloc_r+0x1da>
    f64a:	6923      	ldr	r3, [r4, #16]
    f64c:	f8ca 3018 	str.w	r3, [sl, #24]
    f650:	6963      	ldr	r3, [r4, #20]
    f652:	f8ca 301c 	str.w	r3, [sl, #28]
    f656:	3418      	adds	r4, #24
    f658:	f10a 0320 	add.w	r3, sl, #32
    f65c:	e78b      	b.n	f576 <_realloc_r+0x2d6>
    f65e:	6922      	ldr	r2, [r4, #16]
    f660:	f8ca 2018 	str.w	r2, [sl, #24]
    f664:	6962      	ldr	r2, [r4, #20]
    f666:	f8ca 201c 	str.w	r2, [sl, #28]
    f66a:	3418      	adds	r4, #24
    f66c:	f10a 0220 	add.w	r2, sl, #32
    f670:	e703      	b.n	f47a <_realloc_r+0x1da>
    f672:	bf00      	nop
    f674:	20008be0 	.word	0x20008be0

0000f678 <_strtod_l>:
    f678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f67c:	ed2d 8b10 	vpush	{d8-d15}
    f680:	b097      	sub	sp, #92	; 0x5c
    f682:	468a      	mov	sl, r1
    f684:	2100      	movs	r1, #0
    f686:	9207      	str	r2, [sp, #28]
    f688:	9112      	str	r1, [sp, #72]	; 0x48
    f68a:	2200      	movs	r2, #0
    f68c:	2100      	movs	r1, #0
    f68e:	e9cd 1204 	strd	r1, r2, [sp, #16]
    f692:	4680      	mov	r8, r0
    f694:	4651      	mov	r1, sl
    f696:	9111      	str	r1, [sp, #68]	; 0x44
    f698:	460f      	mov	r7, r1
    f69a:	f811 2b01 	ldrb.w	r2, [r1], #1
    f69e:	2a2d      	cmp	r2, #45	; 0x2d
    f6a0:	d85e      	bhi.n	f760 <_strtod_l+0xe8>
    f6a2:	a001      	add	r0, pc, #4	; (adr r0, f6a8 <_strtod_l+0x30>)
    f6a4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    f6a8:	0000f849 	.word	0x0000f849
    f6ac:	0000f761 	.word	0x0000f761
    f6b0:	0000f761 	.word	0x0000f761
    f6b4:	0000f761 	.word	0x0000f761
    f6b8:	0000f761 	.word	0x0000f761
    f6bc:	0000f761 	.word	0x0000f761
    f6c0:	0000f761 	.word	0x0000f761
    f6c4:	0000f761 	.word	0x0000f761
    f6c8:	0000f761 	.word	0x0000f761
    f6cc:	0000f697 	.word	0x0000f697
    f6d0:	0000f697 	.word	0x0000f697
    f6d4:	0000f697 	.word	0x0000f697
    f6d8:	0000f697 	.word	0x0000f697
    f6dc:	0000f697 	.word	0x0000f697
    f6e0:	0000f761 	.word	0x0000f761
    f6e4:	0000f761 	.word	0x0000f761
    f6e8:	0000f761 	.word	0x0000f761
    f6ec:	0000f761 	.word	0x0000f761
    f6f0:	0000f761 	.word	0x0000f761
    f6f4:	0000f761 	.word	0x0000f761
    f6f8:	0000f761 	.word	0x0000f761
    f6fc:	0000f761 	.word	0x0000f761
    f700:	0000f761 	.word	0x0000f761
    f704:	0000f761 	.word	0x0000f761
    f708:	0000f761 	.word	0x0000f761
    f70c:	0000f761 	.word	0x0000f761
    f710:	0000f761 	.word	0x0000f761
    f714:	0000f761 	.word	0x0000f761
    f718:	0000f761 	.word	0x0000f761
    f71c:	0000f761 	.word	0x0000f761
    f720:	0000f761 	.word	0x0000f761
    f724:	0000f761 	.word	0x0000f761
    f728:	0000f697 	.word	0x0000f697
    f72c:	0000f761 	.word	0x0000f761
    f730:	0000f761 	.word	0x0000f761
    f734:	0000f761 	.word	0x0000f761
    f738:	0000f761 	.word	0x0000f761
    f73c:	0000f761 	.word	0x0000f761
    f740:	0000f761 	.word	0x0000f761
    f744:	0000f761 	.word	0x0000f761
    f748:	0000f761 	.word	0x0000f761
    f74c:	0000f761 	.word	0x0000f761
    f750:	0000f761 	.word	0x0000f761
    f754:	0000fe83 	.word	0x0000fe83
    f758:	0000f761 	.word	0x0000f761
    f75c:	0000fe6f 	.word	0x0000fe6f
    f760:	2100      	movs	r1, #0
    f762:	9109      	str	r1, [sp, #36]	; 0x24
    f764:	2a30      	cmp	r2, #48	; 0x30
    f766:	d07d      	beq.n	f864 <_strtod_l+0x1ec>
    f768:	2300      	movs	r3, #0
    f76a:	9308      	str	r3, [sp, #32]
    f76c:	2a2f      	cmp	r2, #47	; 0x2f
    f76e:	4614      	mov	r4, r2
    f770:	f240 84cd 	bls.w	1010e <_strtod_l+0xa96>
    f774:	f04f 0900 	mov.w	r9, #0
    f778:	4638      	mov	r0, r7
    f77a:	464e      	mov	r6, r9
    f77c:	464d      	mov	r5, r9
    f77e:	e012      	b.n	f7a6 <_strtod_l+0x12e>
    f780:	3001      	adds	r0, #1
    f782:	2d08      	cmp	r5, #8
    f784:	9011      	str	r0, [sp, #68]	; 0x44
    f786:	bfc8      	it	gt
    f788:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
    f78c:	7804      	ldrb	r4, [r0, #0]
    f78e:	bfc6      	itte	gt
    f790:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
    f794:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
    f798:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
    f79c:	2c2f      	cmp	r4, #47	; 0x2f
    f79e:	f105 0501 	add.w	r5, r5, #1
    f7a2:	4622      	mov	r2, r4
    f7a4:	dd6f      	ble.n	f886 <_strtod_l+0x20e>
    f7a6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    f7aa:	2c39      	cmp	r4, #57	; 0x39
    f7ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    f7b0:	dde6      	ble.n	f780 <_strtod_l+0x108>
    f7b2:	499f      	ldr	r1, [pc, #636]	; (fa30 <_strtod_l+0x3b8>)
    f7b4:	2201      	movs	r2, #1
    f7b6:	f001 fac3 	bl	10d40 <strncmp>
    f7ba:	2800      	cmp	r0, #0
    f7bc:	d137      	bne.n	f82e <_strtod_l+0x1b6>
    f7be:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f7c0:	461a      	mov	r2, r3
    f7c2:	3301      	adds	r3, #1
    f7c4:	9311      	str	r3, [sp, #68]	; 0x44
    f7c6:	7854      	ldrb	r4, [r2, #1]
    f7c8:	2d00      	cmp	r5, #0
    f7ca:	f040 8543 	bne.w	10254 <_strtod_l+0xbdc>
    f7ce:	2c30      	cmp	r4, #48	; 0x30
    f7d0:	f040 8524 	bne.w	1021c <_strtod_l+0xba4>
    f7d4:	f1c3 0201 	rsb	r2, r3, #1
    f7d8:	1898      	adds	r0, r3, r2
    f7da:	3301      	adds	r3, #1
    f7dc:	9311      	str	r3, [sp, #68]	; 0x44
    f7de:	781c      	ldrb	r4, [r3, #0]
    f7e0:	2c30      	cmp	r4, #48	; 0x30
    f7e2:	d0f9      	beq.n	f7d8 <_strtod_l+0x160>
    f7e4:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    f7e8:	2b08      	cmp	r3, #8
    f7ea:	f200 8301 	bhi.w	fdf0 <_strtod_l+0x778>
    f7ee:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f7f0:	1c43      	adds	r3, r0, #1
    f7f2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    f7f6:	930b      	str	r3, [sp, #44]	; 0x2c
    f7f8:	2501      	movs	r5, #1
    f7fa:	46bc      	mov	ip, r7
    f7fc:	f04f 0e00 	mov.w	lr, #0
    f800:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    f804:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
    f808:	2000      	movs	r0, #0
    f80a:	f10c 0301 	add.w	r3, ip, #1
    f80e:	9311      	str	r3, [sp, #68]	; 0x44
    f810:	f89c 4001 	ldrb.w	r4, [ip, #1]
    f814:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
    f818:	2909      	cmp	r1, #9
    f81a:	f200 82bb 	bhi.w	fd94 <_strtod_l+0x71c>
    f81e:	3001      	adds	r0, #1
    f820:	468b      	mov	fp, r1
    f822:	2900      	cmp	r1, #0
    f824:	f040 844f 	bne.w	100c6 <_strtod_l+0xa4e>
    f828:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
    f82c:	e7ed      	b.n	f80a <_strtod_l+0x192>
    f82e:	2000      	movs	r0, #0
    f830:	2c65      	cmp	r4, #101	; 0x65
    f832:	46ae      	mov	lr, r5
    f834:	900b      	str	r0, [sp, #44]	; 0x2c
    f836:	4684      	mov	ip, r0
    f838:	d001      	beq.n	f83e <_strtod_l+0x1c6>
    f83a:	2c45      	cmp	r4, #69	; 0x45
    f83c:	d130      	bne.n	f8a0 <_strtod_l+0x228>
    f83e:	2d00      	cmp	r5, #0
    f840:	d16b      	bne.n	f91a <_strtod_l+0x2a2>
    f842:	9b08      	ldr	r3, [sp, #32]
    f844:	4303      	orrs	r3, r0
    f846:	d167      	bne.n	f918 <_strtod_l+0x2a0>
    f848:	9b07      	ldr	r3, [sp, #28]
    f84a:	ed9f 8b77 	vldr	d8, [pc, #476]	; fa28 <_strtod_l+0x3b0>
    f84e:	b113      	cbz	r3, f856 <_strtod_l+0x1de>
    f850:	9b07      	ldr	r3, [sp, #28]
    f852:	f8c3 a000 	str.w	sl, [r3]
    f856:	eeb0 0b48 	vmov.f64	d0, d8
    f85a:	b017      	add	sp, #92	; 0x5c
    f85c:	ecbd 8b10 	vpop	{d8-d15}
    f860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f864:	787a      	ldrb	r2, [r7, #1]
    f866:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    f86a:	2a58      	cmp	r2, #88	; 0x58
    f86c:	f000 840c 	beq.w	10088 <_strtod_l+0xa10>
    f870:	3701      	adds	r7, #1
    f872:	9711      	str	r7, [sp, #68]	; 0x44
    f874:	783a      	ldrb	r2, [r7, #0]
    f876:	2a30      	cmp	r2, #48	; 0x30
    f878:	d0fa      	beq.n	f870 <_strtod_l+0x1f8>
    f87a:	2a00      	cmp	r2, #0
    f87c:	f000 80b7 	beq.w	f9ee <_strtod_l+0x376>
    f880:	2301      	movs	r3, #1
    f882:	9308      	str	r3, [sp, #32]
    f884:	e772      	b.n	f76c <_strtod_l+0xf4>
    f886:	496a      	ldr	r1, [pc, #424]	; (fa30 <_strtod_l+0x3b8>)
    f888:	2201      	movs	r2, #1
    f88a:	f001 fa59 	bl	10d40 <strncmp>
    f88e:	2800      	cmp	r0, #0
    f890:	f000 80c0 	beq.w	fa14 <_strtod_l+0x39c>
    f894:	46ae      	mov	lr, r5
    f896:	f04f 0c00 	mov.w	ip, #0
    f89a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    f89e:	4660      	mov	r0, ip
    f8a0:	f04f 0b00 	mov.w	fp, #0
    f8a4:	2d00      	cmp	r5, #0
    f8a6:	d07e      	beq.n	f9a6 <_strtod_l+0x32e>
    f8a8:	ee07 6a90 	vmov	s15, r6
    f8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f8ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    f8b2:	ebab 0303 	sub.w	r3, fp, r3
    f8b6:	f1be 0f00 	cmp.w	lr, #0
    f8ba:	bf08      	it	eq
    f8bc:	46ae      	moveq	lr, r5
    f8be:	2d10      	cmp	r5, #16
    f8c0:	930a      	str	r3, [sp, #40]	; 0x28
    f8c2:	462b      	mov	r3, r5
    f8c4:	bfa8      	it	ge
    f8c6:	2310      	movge	r3, #16
    f8c8:	2d09      	cmp	r5, #9
    f8ca:	ed8d 7b04 	vstr	d7, [sp, #16]
    f8ce:	dd0c      	ble.n	f8ea <_strtod_l+0x272>
    f8d0:	4a58      	ldr	r2, [pc, #352]	; (fa34 <_strtod_l+0x3bc>)
    f8d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f8d6:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
    f8da:	ee06 9a90 	vmov	s13, r9
    f8de:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    f8e2:	eea7 6b05 	vfma.f64	d6, d7, d5
    f8e6:	ed8d 6b04 	vstr	d6, [sp, #16]
    f8ea:	2d0f      	cmp	r5, #15
    f8ec:	f300 80a8 	bgt.w	fa40 <_strtod_l+0x3c8>
    f8f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f8f2:	2a00      	cmp	r2, #0
    f8f4:	f000 83e4 	beq.w	100c0 <_strtod_l+0xa48>
    f8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f8fa:	f340 833c 	ble.w	ff76 <_strtod_l+0x8fe>
    f8fe:	2a16      	cmp	r2, #22
    f900:	f340 8498 	ble.w	10234 <_strtod_l+0xbbc>
    f904:	990a      	ldr	r1, [sp, #40]	; 0x28
    f906:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
    f90a:	428a      	cmp	r2, r1
    f90c:	f280 84a6 	bge.w	1025c <_strtod_l+0xbe4>
    f910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f912:	1aeb      	subs	r3, r5, r3
    f914:	4413      	add	r3, r2
    f916:	e099      	b.n	fa4c <_strtod_l+0x3d4>
    f918:	2500      	movs	r5, #0
    f91a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
    f91e:	f10a 0301 	add.w	r3, sl, #1
    f922:	9311      	str	r3, [sp, #68]	; 0x44
    f924:	f89a 4001 	ldrb.w	r4, [sl, #1]
    f928:	2c2b      	cmp	r4, #43	; 0x2b
    f92a:	f000 825e 	beq.w	fdea <_strtod_l+0x772>
    f92e:	2c2d      	cmp	r4, #45	; 0x2d
    f930:	f000 81f7 	beq.w	fd22 <_strtod_l+0x6aa>
    f934:	2300      	movs	r3, #0
    f936:	930a      	str	r3, [sp, #40]	; 0x28
    f938:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    f93c:	2b09      	cmp	r3, #9
    f93e:	f200 81eb 	bhi.w	fd18 <_strtod_l+0x6a0>
    f942:	2c30      	cmp	r4, #48	; 0x30
    f944:	d105      	bne.n	f952 <_strtod_l+0x2da>
    f946:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f948:	3301      	adds	r3, #1
    f94a:	9311      	str	r3, [sp, #68]	; 0x44
    f94c:	781c      	ldrb	r4, [r3, #0]
    f94e:	2c30      	cmp	r4, #48	; 0x30
    f950:	d0fa      	beq.n	f948 <_strtod_l+0x2d0>
    f952:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
    f956:	2b08      	cmp	r3, #8
    f958:	d8a2      	bhi.n	f8a0 <_strtod_l+0x228>
    f95a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f95c:	920c      	str	r2, [sp, #48]	; 0x30
    f95e:	1c53      	adds	r3, r2, #1
    f960:	9311      	str	r3, [sp, #68]	; 0x44
    f962:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
    f966:	7854      	ldrb	r4, [r2, #1]
    f968:	2c2f      	cmp	r4, #47	; 0x2f
    f96a:	dc07      	bgt.n	f97c <_strtod_l+0x304>
    f96c:	e3de      	b.n	1012c <_strtod_l+0xab4>
    f96e:	3301      	adds	r3, #1
    f970:	9311      	str	r3, [sp, #68]	; 0x44
    f972:	784c      	ldrb	r4, [r1, #1]
    f974:	2c2f      	cmp	r4, #47	; 0x2f
    f976:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
    f97a:	dd06      	ble.n	f98a <_strtod_l+0x312>
    f97c:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
    f980:	2c39      	cmp	r4, #57	; 0x39
    f982:	4619      	mov	r1, r3
    f984:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    f988:	ddf1      	ble.n	f96e <_strtod_l+0x2f6>
    f98a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f98c:	1a9b      	subs	r3, r3, r2
    f98e:	2b08      	cmp	r3, #8
    f990:	f340 83cc 	ble.w	1012c <_strtod_l+0xab4>
    f994:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
    f998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f99a:	2b00      	cmp	r3, #0
    f99c:	d082      	beq.n	f8a4 <_strtod_l+0x22c>
    f99e:	f1cb 0b00 	rsb	fp, fp, #0
    f9a2:	2d00      	cmp	r5, #0
    f9a4:	d180      	bne.n	f8a8 <_strtod_l+0x230>
    f9a6:	9b08      	ldr	r3, [sp, #32]
    f9a8:	4303      	orrs	r3, r0
    f9aa:	d120      	bne.n	f9ee <_strtod_l+0x376>
    f9ac:	f1bc 0f00 	cmp.w	ip, #0
    f9b0:	f47f af4a 	bne.w	f848 <_strtod_l+0x1d0>
    f9b4:	2c69      	cmp	r4, #105	; 0x69
    f9b6:	f000 83cf 	beq.w	10158 <_strtod_l+0xae0>
    f9ba:	f300 82f3 	bgt.w	ffa4 <_strtod_l+0x92c>
    f9be:	2c49      	cmp	r4, #73	; 0x49
    f9c0:	f000 83ca 	beq.w	10158 <_strtod_l+0xae0>
    f9c4:	2c4e      	cmp	r4, #78	; 0x4e
    f9c6:	f47f af3f 	bne.w	f848 <_strtod_l+0x1d0>
    f9ca:	491b      	ldr	r1, [pc, #108]	; (fa38 <_strtod_l+0x3c0>)
    f9cc:	a811      	add	r0, sp, #68	; 0x44
    f9ce:	f002 fa2b 	bl	11e28 <__match>
    f9d2:	2800      	cmp	r0, #0
    f9d4:	f43f af38 	beq.w	f848 <_strtod_l+0x1d0>
    f9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	2b28      	cmp	r3, #40	; 0x28
    f9de:	f000 84f2 	beq.w	103c6 <_strtod_l+0xd4e>
    f9e2:	4816      	ldr	r0, [pc, #88]	; (fa3c <_strtod_l+0x3c4>)
    f9e4:	f001 fd5c 	bl	114a0 <nan>
    f9e8:	eeb0 8b40 	vmov.f64	d8, d0
    f9ec:	e001      	b.n	f9f2 <_strtod_l+0x37a>
    f9ee:	ed9f 8b0e 	vldr	d8, [pc, #56]	; fa28 <_strtod_l+0x3b0>
    f9f2:	9a07      	ldr	r2, [sp, #28]
    f9f4:	b10a      	cbz	r2, f9fa <_strtod_l+0x382>
    f9f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f9f8:	6013      	str	r3, [r2, #0]
    f9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	f43f af2a 	beq.w	f856 <_strtod_l+0x1de>
    fa02:	eeb1 8b48 	vneg.f64	d8, d8
    fa06:	eeb0 0b48 	vmov.f64	d0, d8
    fa0a:	b017      	add	sp, #92	; 0x5c
    fa0c:	ecbd 8b10 	vpop	{d8-d15}
    fa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fa14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa16:	900b      	str	r0, [sp, #44]	; 0x2c
    fa18:	1c5a      	adds	r2, r3, #1
    fa1a:	9211      	str	r2, [sp, #68]	; 0x44
    fa1c:	785c      	ldrb	r4, [r3, #1]
    fa1e:	46ae      	mov	lr, r5
    fa20:	e6f8      	b.n	f814 <_strtod_l+0x19c>
    fa22:	bf00      	nop
    fa24:	f3af 8000 	nop.w
	...
    fa30:	200081c4 	.word	0x200081c4
    fa34:	20000328 	.word	0x20000328
    fa38:	200010ac 	.word	0x200010ac
    fa3c:	20000518 	.word	0x20000518
    fa40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa42:	1aeb      	subs	r3, r5, r3
    fa44:	4413      	add	r3, r2
    fa46:	2b00      	cmp	r3, #0
    fa48:	f340 82b0 	ble.w	ffac <_strtod_l+0x934>
    fa4c:	f013 010f 	ands.w	r1, r3, #15
    fa50:	d00a      	beq.n	fa68 <_strtod_l+0x3f0>
    fa52:	4ac3      	ldr	r2, [pc, #780]	; (fd60 <_strtod_l+0x6e8>)
    fa54:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    fa58:	ed9d 6b04 	vldr	d6, [sp, #16]
    fa5c:	ed92 7b00 	vldr	d7, [r2]
    fa60:	ee27 7b06 	vmul.f64	d7, d7, d6
    fa64:	ed8d 7b04 	vstr	d7, [sp, #16]
    fa68:	f033 020f 	bics.w	r2, r3, #15
    fa6c:	f040 8238 	bne.w	fee0 <_strtod_l+0x868>
    fa70:	2300      	movs	r3, #0
    fa72:	9308      	str	r3, [sp, #32]
    fa74:	9600      	str	r6, [sp, #0]
    fa76:	462b      	mov	r3, r5
    fa78:	4672      	mov	r2, lr
    fa7a:	4639      	mov	r1, r7
    fa7c:	4640      	mov	r0, r8
    fa7e:	f002 fb5f 	bl	12140 <__s2b>
    fa82:	4681      	mov	r9, r0
    fa84:	2800      	cmp	r0, #0
    fa86:	f000 82e1 	beq.w	1004c <_strtod_l+0x9d4>
    fa8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fa8c:	eba3 0b0b 	sub.w	fp, r3, fp
    fa90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa92:	ed9f eba9 	vldr	d14, [pc, #676]	; fd38 <_strtod_l+0x6c0>
    fa96:	2b00      	cmp	r3, #0
    fa98:	ed9f cba9 	vldr	d12, [pc, #676]	; fd40 <_strtod_l+0x6c8>
    fa9c:	ed9f dbaa 	vldr	d13, [pc, #680]	; fd48 <_strtod_l+0x6d0>
    faa0:	ed9f bbab 	vldr	d11, [pc, #684]	; fd50 <_strtod_l+0x6d8>
    faa4:	bfb4      	ite	lt
    faa6:	465a      	movlt	r2, fp
    faa8:	2200      	movge	r2, #0
    faaa:	f04f 0a00 	mov.w	sl, #0
    faae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fab2:	920b      	str	r2, [sp, #44]	; 0x2c
    fab4:	930c      	str	r3, [sp, #48]	; 0x30
    fab6:	4654      	mov	r4, sl
    fab8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    fabc:	4640      	mov	r0, r8
    fabe:	f002 fabd 	bl	1203c <_Balloc>
    fac2:	4606      	mov	r6, r0
    fac4:	2800      	cmp	r0, #0
    fac6:	f000 810e 	beq.w	fce6 <_strtod_l+0x66e>
    faca:	f8d9 2010 	ldr.w	r2, [r9, #16]
    face:	ed9d 8b04 	vldr	d8, [sp, #16]
    fad2:	3202      	adds	r2, #2
    fad4:	0092      	lsls	r2, r2, #2
    fad6:	f109 010c 	add.w	r1, r9, #12
    fada:	300c      	adds	r0, #12
    fadc:	f7fc fffa 	bl	cad4 <memcpy>
    fae0:	eeb0 0b48 	vmov.f64	d0, d8
    fae4:	aa14      	add	r2, sp, #80	; 0x50
    fae6:	a913      	add	r1, sp, #76	; 0x4c
    fae8:	4640      	mov	r0, r8
    faea:	f002 fee5 	bl	128b8 <__d2b>
    faee:	9012      	str	r0, [sp, #72]	; 0x48
    faf0:	2800      	cmp	r0, #0
    faf2:	f000 80e4 	beq.w	fcbe <_strtod_l+0x646>
    faf6:	2101      	movs	r1, #1
    faf8:	4640      	mov	r0, r8
    fafa:	f002 fbc9 	bl	12290 <__i2b>
    fafe:	4604      	mov	r4, r0
    fb00:	2800      	cmp	r0, #0
    fb02:	f000 80f0 	beq.w	fce6 <_strtod_l+0x66e>
    fb06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fb08:	2a00      	cmp	r2, #0
    fb0a:	f2c0 80de 	blt.w	fcca <_strtod_l+0x652>
    fb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb10:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    fb12:	eb02 0b03 	add.w	fp, r2, r3
    fb16:	9b08      	ldr	r3, [sp, #32]
    fb18:	9d14      	ldr	r5, [sp, #80]	; 0x50
    fb1a:	1ad2      	subs	r2, r2, r3
    fb1c:	442a      	add	r2, r5
    fb1e:	4b91      	ldr	r3, [pc, #580]	; (fd64 <_strtod_l+0x6ec>)
    fb20:	3a01      	subs	r2, #1
    fb22:	429a      	cmp	r2, r3
    fb24:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
    fb28:	f280 8098 	bge.w	fc5c <_strtod_l+0x5e4>
    fb2c:	1a99      	subs	r1, r3, r2
    fb2e:	291f      	cmp	r1, #31
    fb30:	eba5 0501 	sub.w	r5, r5, r1
    fb34:	f300 80e3 	bgt.w	fcfe <_strtod_l+0x686>
    fb38:	2201      	movs	r2, #1
    fb3a:	fa02 f301 	lsl.w	r3, r2, r1
    fb3e:	930d      	str	r3, [sp, #52]	; 0x34
    fb40:	2300      	movs	r3, #0
    fb42:	930e      	str	r3, [sp, #56]	; 0x38
    fb44:	442f      	add	r7, r5
    fb46:	9b08      	ldr	r3, [sp, #32]
    fb48:	445d      	add	r5, fp
    fb4a:	45ab      	cmp	fp, r5
    fb4c:	465a      	mov	r2, fp
    fb4e:	441f      	add	r7, r3
    fb50:	bfa8      	it	ge
    fb52:	462a      	movge	r2, r5
    fb54:	42ba      	cmp	r2, r7
    fb56:	bfa8      	it	ge
    fb58:	463a      	movge	r2, r7
    fb5a:	2a00      	cmp	r2, #0
    fb5c:	dd03      	ble.n	fb66 <_strtod_l+0x4ee>
    fb5e:	1aad      	subs	r5, r5, r2
    fb60:	1abf      	subs	r7, r7, r2
    fb62:	ebab 0b02 	sub.w	fp, fp, r2
    fb66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fb68:	2b00      	cmp	r3, #0
    fb6a:	f300 8088 	bgt.w	fc7e <_strtod_l+0x606>
    fb6e:	2d00      	cmp	r5, #0
    fb70:	f300 809c 	bgt.w	fcac <_strtod_l+0x634>
    fb74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fb76:	2b00      	cmp	r3, #0
    fb78:	f300 80b7 	bgt.w	fcea <_strtod_l+0x672>
    fb7c:	2f00      	cmp	r7, #0
    fb7e:	f300 80a9 	bgt.w	fcd4 <_strtod_l+0x65c>
    fb82:	f1bb 0f00 	cmp.w	fp, #0
    fb86:	dd08      	ble.n	fb9a <_strtod_l+0x522>
    fb88:	4621      	mov	r1, r4
    fb8a:	465a      	mov	r2, fp
    fb8c:	4640      	mov	r0, r8
    fb8e:	f002 fcbb 	bl	12508 <__lshift>
    fb92:	4604      	mov	r4, r0
    fb94:	2800      	cmp	r0, #0
    fb96:	f000 80a6 	beq.w	fce6 <_strtod_l+0x66e>
    fb9a:	9912      	ldr	r1, [sp, #72]	; 0x48
    fb9c:	4632      	mov	r2, r6
    fb9e:	4640      	mov	r0, r8
    fba0:	f002 fd4c 	bl	1263c <__mdiff>
    fba4:	4682      	mov	sl, r0
    fba6:	2800      	cmp	r0, #0
    fba8:	f000 809d 	beq.w	fce6 <_strtod_l+0x66e>
    fbac:	2300      	movs	r3, #0
    fbae:	68c5      	ldr	r5, [r0, #12]
    fbb0:	60c3      	str	r3, [r0, #12]
    fbb2:	4621      	mov	r1, r4
    fbb4:	f002 fd20 	bl	125f8 <__mcmp>
    fbb8:	2800      	cmp	r0, #0
    fbba:	f2c0 83c7 	blt.w	1034c <_strtod_l+0xcd4>
    fbbe:	f000 8361 	beq.w	10284 <_strtod_l+0xc0c>
    fbc2:	4621      	mov	r1, r4
    fbc4:	4650      	mov	r0, sl
    fbc6:	f002 fee1 	bl	1298c <__ratio>
    fbca:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
    fbce:	eeb4 0bc7 	vcmpe.f64	d0, d7
    fbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fbd6:	d846      	bhi.n	fc66 <_strtod_l+0x5ee>
    fbd8:	2d00      	cmp	r5, #0
    fbda:	f000 80cb 	beq.w	fd74 <_strtod_l+0x6fc>
    fbde:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    fbe2:	9805      	ldr	r0, [sp, #20]
    fbe4:	4b60      	ldr	r3, [pc, #384]	; (fd68 <_strtod_l+0x6f0>)
    fbe6:	2200      	movs	r2, #0
    fbe8:	4960      	ldr	r1, [pc, #384]	; (fd6c <_strtod_l+0x6f4>)
    fbea:	f8df c184 	ldr.w	ip, [pc, #388]	; fd70 <_strtod_l+0x6f8>
    fbee:	ea00 0701 	and.w	r7, r0, r1
    fbf2:	4567      	cmp	r7, ip
    fbf4:	f000 80d4 	beq.w	fda0 <_strtod_l+0x728>
    fbf8:	9908      	ldr	r1, [sp, #32]
    fbfa:	b159      	cbz	r1, fc14 <_strtod_l+0x59c>
    fbfc:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
    fc00:	d808      	bhi.n	fc14 <_strtod_l+0x59c>
    fc02:	eeb4 9bcb 	vcmpe.f64	d9, d11
    fc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fc0a:	f240 8156 	bls.w	feba <_strtod_l+0x842>
    fc0e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
    fc12:	1bcb      	subs	r3, r1, r7
    fc14:	eeb0 0b48 	vmov.f64	d0, d8
    fc18:	ec43 2b1a 	vmov	d10, r2, r3
    fc1c:	f002 fdb8 	bl	12790 <__ulp>
    fc20:	eeaa 8b00 	vfma.f64	d8, d10, d0
    fc24:	ed8d 8b04 	vstr	d8, [sp, #16]
    fc28:	ee18 3a90 	vmov	r3, s17
    fc2c:	9a08      	ldr	r2, [sp, #32]
    fc2e:	b922      	cbnz	r2, fc3a <_strtod_l+0x5c2>
    fc30:	4a4e      	ldr	r2, [pc, #312]	; (fd6c <_strtod_l+0x6f4>)
    fc32:	401a      	ands	r2, r3
    fc34:	4297      	cmp	r7, r2
    fc36:	f000 80e4 	beq.w	fe02 <_strtod_l+0x78a>
    fc3a:	9912      	ldr	r1, [sp, #72]	; 0x48
    fc3c:	4640      	mov	r0, r8
    fc3e:	f002 fa23 	bl	12088 <_Bfree>
    fc42:	4631      	mov	r1, r6
    fc44:	4640      	mov	r0, r8
    fc46:	f002 fa1f 	bl	12088 <_Bfree>
    fc4a:	4621      	mov	r1, r4
    fc4c:	4640      	mov	r0, r8
    fc4e:	f002 fa1b 	bl	12088 <_Bfree>
    fc52:	4651      	mov	r1, sl
    fc54:	4640      	mov	r0, r8
    fc56:	f002 fa17 	bl	12088 <_Bfree>
    fc5a:	e72d      	b.n	fab8 <_strtod_l+0x440>
    fc5c:	2301      	movs	r3, #1
    fc5e:	2100      	movs	r1, #0
    fc60:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
    fc64:	e76e      	b.n	fb44 <_strtod_l+0x4cc>
    fc66:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    fc6a:	ee20 9b09 	vmul.f64	d9, d0, d9
    fc6e:	2d00      	cmp	r5, #0
    fc70:	d15f      	bne.n	fd32 <_strtod_l+0x6ba>
    fc72:	eeb1 7b49 	vneg.f64	d7, d9
    fc76:	9805      	ldr	r0, [sp, #20]
    fc78:	ec53 2b17 	vmov	r2, r3, d7
    fc7c:	e7b4      	b.n	fbe8 <_strtod_l+0x570>
    fc7e:	4621      	mov	r1, r4
    fc80:	461a      	mov	r2, r3
    fc82:	4640      	mov	r0, r8
    fc84:	f002 fbe0 	bl	12448 <__pow5mult>
    fc88:	4604      	mov	r4, r0
    fc8a:	b360      	cbz	r0, fce6 <_strtod_l+0x66e>
    fc8c:	4601      	mov	r1, r0
    fc8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fc90:	4640      	mov	r0, r8
    fc92:	f002 fb2b 	bl	122ec <__multiply>
    fc96:	b330      	cbz	r0, fce6 <_strtod_l+0x66e>
    fc98:	900f      	str	r0, [sp, #60]	; 0x3c
    fc9a:	9912      	ldr	r1, [sp, #72]	; 0x48
    fc9c:	4640      	mov	r0, r8
    fc9e:	f002 f9f3 	bl	12088 <_Bfree>
    fca2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    fca4:	9212      	str	r2, [sp, #72]	; 0x48
    fca6:	2d00      	cmp	r5, #0
    fca8:	f77f af64 	ble.w	fb74 <_strtod_l+0x4fc>
    fcac:	9912      	ldr	r1, [sp, #72]	; 0x48
    fcae:	462a      	mov	r2, r5
    fcb0:	4640      	mov	r0, r8
    fcb2:	f002 fc29 	bl	12508 <__lshift>
    fcb6:	9012      	str	r0, [sp, #72]	; 0x48
    fcb8:	2800      	cmp	r0, #0
    fcba:	f47f af5b 	bne.w	fb74 <_strtod_l+0x4fc>
    fcbe:	2322      	movs	r3, #34	; 0x22
    fcc0:	ed9f 8b25 	vldr	d8, [pc, #148]	; fd58 <_strtod_l+0x6e0>
    fcc4:	f8c8 3000 	str.w	r3, [r8]
    fcc8:	e0bc      	b.n	fe44 <_strtod_l+0x7cc>
    fcca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fccc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    fcd0:	1a9f      	subs	r7, r3, r2
    fcd2:	e720      	b.n	fb16 <_strtod_l+0x49e>
    fcd4:	4631      	mov	r1, r6
    fcd6:	463a      	mov	r2, r7
    fcd8:	4640      	mov	r0, r8
    fcda:	f002 fc15 	bl	12508 <__lshift>
    fcde:	4606      	mov	r6, r0
    fce0:	2800      	cmp	r0, #0
    fce2:	f47f af4e 	bne.w	fb82 <_strtod_l+0x50a>
    fce6:	9812      	ldr	r0, [sp, #72]	; 0x48
    fce8:	e7e9      	b.n	fcbe <_strtod_l+0x646>
    fcea:	4631      	mov	r1, r6
    fcec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fcee:	4640      	mov	r0, r8
    fcf0:	f002 fbaa 	bl	12448 <__pow5mult>
    fcf4:	4606      	mov	r6, r0
    fcf6:	2800      	cmp	r0, #0
    fcf8:	f47f af40 	bne.w	fb7c <_strtod_l+0x504>
    fcfc:	e7f3      	b.n	fce6 <_strtod_l+0x66e>
    fcfe:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
    fd02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    fd06:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
    fd0a:	2101      	movs	r1, #1
    fd0c:	32e2      	adds	r2, #226	; 0xe2
    fd0e:	fa01 f302 	lsl.w	r3, r1, r2
    fd12:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    fd16:	e715      	b.n	fb44 <_strtod_l+0x4cc>
    fd18:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
    fd1c:	f04f 0b00 	mov.w	fp, #0
    fd20:	e5c0      	b.n	f8a4 <_strtod_l+0x22c>
    fd22:	2301      	movs	r3, #1
    fd24:	930a      	str	r3, [sp, #40]	; 0x28
    fd26:	f10a 0302 	add.w	r3, sl, #2
    fd2a:	9311      	str	r3, [sp, #68]	; 0x44
    fd2c:	f89a 4002 	ldrb.w	r4, [sl, #2]
    fd30:	e602      	b.n	f938 <_strtod_l+0x2c0>
    fd32:	eeb0 7b49 	vmov.f64	d7, d9
    fd36:	e79e      	b.n	fc76 <_strtod_l+0x5fe>
    fd38:	94a03595 	.word	0x94a03595
    fd3c:	3fcfffff 	.word	0x3fcfffff
    fd40:	94a03595 	.word	0x94a03595
    fd44:	3fdfffff 	.word	0x3fdfffff
    fd48:	35afe535 	.word	0x35afe535
    fd4c:	3fe00000 	.word	0x3fe00000
    fd50:	ffc00000 	.word	0xffc00000
    fd54:	41dfffff 	.word	0x41dfffff
    fd58:	00000000 	.word	0x00000000
    fd5c:	7ff00000 	.word	0x7ff00000
    fd60:	20000328 	.word	0x20000328
    fd64:	fffffc02 	.word	0xfffffc02
    fd68:	3ff00000 	.word	0x3ff00000
    fd6c:	7ff00000 	.word	0x7ff00000
    fd70:	7fe00000 	.word	0x7fe00000
    fd74:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    fd78:	2900      	cmp	r1, #0
    fd7a:	f000 8085 	beq.w	fe88 <_strtod_l+0x810>
    fd7e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    fd82:	2901      	cmp	r1, #1
    fd84:	f000 81d8 	beq.w	10138 <_strtod_l+0xac0>
    fd88:	4610      	mov	r0, r2
    fd8a:	4bb7      	ldr	r3, [pc, #732]	; (10068 <_strtod_l+0x9f0>)
    fd8c:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
    fd90:	2200      	movs	r2, #0
    fd92:	e729      	b.n	fbe8 <_strtod_l+0x570>
    fd94:	2c65      	cmp	r4, #101	; 0x65
    fd96:	f04f 0c01 	mov.w	ip, #1
    fd9a:	f43f adbe 	beq.w	f91a <_strtod_l+0x2a2>
    fd9e:	e54c      	b.n	f83a <_strtod_l+0x1c2>
    fda0:	ec43 2b1a 	vmov	d10, r2, r3
    fda4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
    fda8:	9305      	str	r3, [sp, #20]
    fdaa:	ed9d fb04 	vldr	d15, [sp, #16]
    fdae:	eeb0 0b4f 	vmov.f64	d0, d15
    fdb2:	f002 fced 	bl	12790 <__ulp>
    fdb6:	49ad      	ldr	r1, [pc, #692]	; (1006c <_strtod_l+0x9f4>)
    fdb8:	eeaa fb00 	vfma.f64	d15, d10, d0
    fdbc:	ee1f 3a90 	vmov	r3, s31
    fdc0:	4aab      	ldr	r2, [pc, #684]	; (10070 <_strtod_l+0x9f8>)
    fdc2:	4019      	ands	r1, r3
    fdc4:	4291      	cmp	r1, r2
    fdc6:	ed8d fb04 	vstr	d15, [sp, #16]
    fdca:	d972      	bls.n	feb2 <_strtod_l+0x83a>
    fdcc:	4ba9      	ldr	r3, [pc, #676]	; (10074 <_strtod_l+0x9fc>)
    fdce:	ee18 2a90 	vmov	r2, s17
    fdd2:	429a      	cmp	r2, r3
    fdd4:	d103      	bne.n	fdde <_strtod_l+0x766>
    fdd6:	ee18 3a10 	vmov	r3, s16
    fdda:	3301      	adds	r3, #1
    fddc:	d083      	beq.n	fce6 <_strtod_l+0x66e>
    fdde:	4aa5      	ldr	r2, [pc, #660]	; (10074 <_strtod_l+0x9fc>)
    fde0:	f04f 33ff 	mov.w	r3, #4294967295
    fde4:	e9cd 3204 	strd	r3, r2, [sp, #16]
    fde8:	e727      	b.n	fc3a <_strtod_l+0x5c2>
    fdea:	2300      	movs	r3, #0
    fdec:	930a      	str	r3, [sp, #40]	; 0x28
    fdee:	e79a      	b.n	fd26 <_strtod_l+0x6ae>
    fdf0:	2c65      	cmp	r4, #101	; 0x65
    fdf2:	f000 80d0 	beq.w	ff96 <_strtod_l+0x91e>
    fdf6:	2c45      	cmp	r4, #69	; 0x45
    fdf8:	f000 80cd 	beq.w	ff96 <_strtod_l+0x91e>
    fdfc:	f04f 0c01 	mov.w	ip, #1
    fe00:	e5d1      	b.n	f9a6 <_strtod_l+0x32e>
    fe02:	ec51 0b19 	vmov	r0, r1, d9
    fe06:	930d      	str	r3, [sp, #52]	; 0x34
    fe08:	f009 fccc 	bl	197a4 <__aeabi_d2lz>
    fe0c:	f009 fc9c 	bl	19748 <__aeabi_l2d>
    fe10:	9b04      	ldr	r3, [sp, #16]
    fe12:	431d      	orrs	r5, r3
    fe14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fe16:	ec41 0b17 	vmov	d7, r0, r1
    fe1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    fe1e:	431d      	orrs	r5, r3
    fe20:	ee39 9b47 	vsub.f64	d9, d9, d7
    fe24:	f000 80a0 	beq.w	ff68 <_strtod_l+0x8f0>
    fe28:	eeb4 9bcc 	vcmpe.f64	d9, d12
    fe2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe30:	d405      	bmi.n	fe3e <_strtod_l+0x7c6>
    fe32:	eeb4 9bcd 	vcmpe.f64	d9, d13
    fe36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fe3a:	f77f aefe 	ble.w	fc3a <_strtod_l+0x5c2>
    fe3e:	ed9d 8b04 	vldr	d8, [sp, #16]
    fe42:	9812      	ldr	r0, [sp, #72]	; 0x48
    fe44:	4601      	mov	r1, r0
    fe46:	4640      	mov	r0, r8
    fe48:	f002 f91e 	bl	12088 <_Bfree>
    fe4c:	4631      	mov	r1, r6
    fe4e:	4640      	mov	r0, r8
    fe50:	f002 f91a 	bl	12088 <_Bfree>
    fe54:	4621      	mov	r1, r4
    fe56:	4640      	mov	r0, r8
    fe58:	f002 f916 	bl	12088 <_Bfree>
    fe5c:	4649      	mov	r1, r9
    fe5e:	4640      	mov	r0, r8
    fe60:	f002 f912 	bl	12088 <_Bfree>
    fe64:	4651      	mov	r1, sl
    fe66:	4640      	mov	r0, r8
    fe68:	f002 f90e 	bl	12088 <_Bfree>
    fe6c:	e5c1      	b.n	f9f2 <_strtod_l+0x37a>
    fe6e:	2201      	movs	r2, #1
    fe70:	9209      	str	r2, [sp, #36]	; 0x24
    fe72:	1c79      	adds	r1, r7, #1
    fe74:	9111      	str	r1, [sp, #68]	; 0x44
    fe76:	787a      	ldrb	r2, [r7, #1]
    fe78:	2a00      	cmp	r2, #0
    fe7a:	f43f ace5 	beq.w	f848 <_strtod_l+0x1d0>
    fe7e:	460f      	mov	r7, r1
    fe80:	e470      	b.n	f764 <_strtod_l+0xec>
    fe82:	2200      	movs	r2, #0
    fe84:	9209      	str	r2, [sp, #36]	; 0x24
    fe86:	e7f4      	b.n	fe72 <_strtod_l+0x7fa>
    fe88:	f3c2 0313 	ubfx	r3, r2, #0, #20
    fe8c:	4610      	mov	r0, r2
    fe8e:	2b00      	cmp	r3, #0
    fe90:	f47f af7b 	bne.w	fd8a <_strtod_l+0x712>
    fe94:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    fe98:	eeb4 0bc7 	vcmpe.f64	d0, d7
    fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    fea0:	f100 81d3 	bmi.w	1024a <_strtod_l+0xbd2>
    fea4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
    fea8:	ee20 9b09 	vmul.f64	d9, d0, d9
    feac:	eeb1 7b49 	vneg.f64	d7, d9
    feb0:	e6e2      	b.n	fc78 <_strtod_l+0x600>
    feb2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
    feb6:	9305      	str	r3, [sp, #20]
    feb8:	e6b8      	b.n	fc2c <_strtod_l+0x5b4>
    feba:	eebc 9bc9 	vcvt.u32.f64	s18, d9
    febe:	ee19 3a10 	vmov	r3, s18
    fec2:	2b01      	cmp	r3, #1
    fec4:	bf38      	it	cc
    fec6:	2301      	movcc	r3, #1
    fec8:	ee09 3a10 	vmov	s18, r3
    fecc:	eeb8 9b49 	vcvt.f64.u32	d9, s18
    fed0:	2d00      	cmp	r5, #0
    fed2:	f040 813e 	bne.w	10152 <_strtod_l+0xada>
    fed6:	eeb1 7b49 	vneg.f64	d7, d9
    feda:	ec53 2b17 	vmov	r2, r3, d7
    fede:	e696      	b.n	fc0e <_strtod_l+0x596>
    fee0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
    fee4:	f300 80b2 	bgt.w	1004c <_strtod_l+0x9d4>
    fee8:	2a10      	cmp	r2, #16
    feea:	ea4f 1322 	mov.w	r3, r2, asr #4
    feee:	f340 8286 	ble.w	103fe <_strtod_l+0xd86>
    fef2:	4c61      	ldr	r4, [pc, #388]	; (10078 <_strtod_l+0xa00>)
    fef4:	ed9d 7b04 	vldr	d7, [sp, #16]
    fef8:	2000      	movs	r0, #0
    fefa:	4622      	mov	r2, r4
    fefc:	4601      	mov	r1, r0
    fefe:	f013 0f01 	tst.w	r3, #1
    ff02:	f101 0101 	add.w	r1, r1, #1
    ff06:	ea4f 0363 	mov.w	r3, r3, asr #1
    ff0a:	d004      	beq.n	ff16 <_strtod_l+0x89e>
    ff0c:	ed92 6b00 	vldr	d6, [r2]
    ff10:	2001      	movs	r0, #1
    ff12:	ee27 7b06 	vmul.f64	d7, d7, d6
    ff16:	2b01      	cmp	r3, #1
    ff18:	f102 0208 	add.w	r2, r2, #8
    ff1c:	d1ef      	bne.n	fefe <_strtod_l+0x886>
    ff1e:	b108      	cbz	r0, ff24 <_strtod_l+0x8ac>
    ff20:	ed8d 7b04 	vstr	d7, [sp, #16]
    ff24:	9b05      	ldr	r3, [sp, #20]
    ff26:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    ff2a:	9305      	str	r3, [sp, #20]
    ff2c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
    ff30:	ed9d 6b04 	vldr	d6, [sp, #16]
    ff34:	ed94 7b00 	vldr	d7, [r4]
    ff38:	4b4c      	ldr	r3, [pc, #304]	; (1006c <_strtod_l+0x9f4>)
    ff3a:	ee27 7b06 	vmul.f64	d7, d7, d6
    ff3e:	ee17 2a90 	vmov	r2, s15
    ff42:	494e      	ldr	r1, [pc, #312]	; (1007c <_strtod_l+0xa04>)
    ff44:	4013      	ands	r3, r2
    ff46:	428b      	cmp	r3, r1
    ff48:	ed8d 7b04 	vstr	d7, [sp, #16]
    ff4c:	d87e      	bhi.n	1004c <_strtod_l+0x9d4>
    ff4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
    ff52:	428b      	cmp	r3, r1
    ff54:	f240 81d6 	bls.w	10304 <_strtod_l+0xc8c>
    ff58:	4c46      	ldr	r4, [pc, #280]	; (10074 <_strtod_l+0x9fc>)
    ff5a:	f04f 33ff 	mov.w	r3, #4294967295
    ff5e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    ff62:	2300      	movs	r3, #0
    ff64:	9308      	str	r3, [sp, #32]
    ff66:	e585      	b.n	fa74 <_strtod_l+0x3fc>
    ff68:	eeb4 9bce 	vcmpe.f64	d9, d14
    ff6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ff70:	f57f ae63 	bpl.w	fc3a <_strtod_l+0x5c2>
    ff74:	e763      	b.n	fe3e <_strtod_l+0x7c6>
    ff76:	3216      	adds	r2, #22
    ff78:	f6ff ad62 	blt.w	fa40 <_strtod_l+0x3c8>
    ff7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ff7e:	eba3 0b0b 	sub.w	fp, r3, fp
    ff82:	4b3f      	ldr	r3, [pc, #252]	; (10080 <_strtod_l+0xa08>)
    ff84:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    ff88:	ed93 7b00 	vldr	d7, [r3]
    ff8c:	ed9d 6b04 	vldr	d6, [sp, #16]
    ff90:	ee86 8b07 	vdiv.f64	d8, d6, d7
    ff94:	e52d      	b.n	f9f2 <_strtod_l+0x37a>
    ff96:	f04f 0e00 	mov.w	lr, #0
    ff9a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    ff9e:	f04f 0c01 	mov.w	ip, #1
    ffa2:	e44e      	b.n	f842 <_strtod_l+0x1ca>
    ffa4:	2c6e      	cmp	r4, #110	; 0x6e
    ffa6:	f43f ad10 	beq.w	f9ca <_strtod_l+0x352>
    ffaa:	e44d      	b.n	f848 <_strtod_l+0x1d0>
    ffac:	f43f ad60 	beq.w	fa70 <_strtod_l+0x3f8>
    ffb0:	425b      	negs	r3, r3
    ffb2:	f013 010f 	ands.w	r1, r3, #15
    ffb6:	d00a      	beq.n	ffce <_strtod_l+0x956>
    ffb8:	4a31      	ldr	r2, [pc, #196]	; (10080 <_strtod_l+0xa08>)
    ffba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    ffbe:	ed9d 6b04 	vldr	d6, [sp, #16]
    ffc2:	ed92 7b00 	vldr	d7, [r2]
    ffc6:	ee86 7b07 	vdiv.f64	d7, d6, d7
    ffca:	ed8d 7b04 	vstr	d7, [sp, #16]
    ffce:	111b      	asrs	r3, r3, #4
    ffd0:	f43f ad4e 	beq.w	fa70 <_strtod_l+0x3f8>
    ffd4:	2b1f      	cmp	r3, #31
    ffd6:	dc33      	bgt.n	10040 <_strtod_l+0x9c8>
    ffd8:	f013 0210 	ands.w	r2, r3, #16
    ffdc:	bf18      	it	ne
    ffde:	226a      	movne	r2, #106	; 0x6a
    ffe0:	ed9d 7b04 	vldr	d7, [sp, #16]
    ffe4:	9208      	str	r2, [sp, #32]
    ffe6:	4a27      	ldr	r2, [pc, #156]	; (10084 <_strtod_l+0xa0c>)
    ffe8:	2100      	movs	r1, #0
    ffea:	07d8      	lsls	r0, r3, #31
    ffec:	d504      	bpl.n	fff8 <_strtod_l+0x980>
    ffee:	ed92 6b00 	vldr	d6, [r2]
    fff2:	2101      	movs	r1, #1
    fff4:	ee27 7b06 	vmul.f64	d7, d7, d6
    fff8:	105b      	asrs	r3, r3, #1
    fffa:	f102 0208 	add.w	r2, r2, #8
    fffe:	d1f4      	bne.n	ffea <_strtod_l+0x972>
   10000:	b109      	cbz	r1, 10006 <_strtod_l+0x98e>
   10002:	ed8d 7b04 	vstr	d7, [sp, #16]
   10006:	9b08      	ldr	r3, [sp, #32]
   10008:	b193      	cbz	r3, 10030 <_strtod_l+0x9b8>
   1000a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1000e:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10012:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   10016:	2b00      	cmp	r3, #0
   10018:	dd0a      	ble.n	10030 <_strtod_l+0x9b8>
   1001a:	2b1f      	cmp	r3, #31
   1001c:	f340 822f 	ble.w	1047e <_strtod_l+0xe06>
   10020:	2000      	movs	r0, #0
   10022:	2b34      	cmp	r3, #52	; 0x34
   10024:	9004      	str	r0, [sp, #16]
   10026:	f340 8240 	ble.w	104aa <_strtod_l+0xe32>
   1002a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1002e:	9305      	str	r3, [sp, #20]
   10030:	ed9d 7b04 	vldr	d7, [sp, #16]
   10034:	eeb5 7b40 	vcmp.f64	d7, #0.0
   10038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1003c:	f47f ad1a 	bne.w	fa74 <_strtod_l+0x3fc>
   10040:	2322      	movs	r3, #34	; 0x22
   10042:	ed9f 8b05 	vldr	d8, [pc, #20]	; 10058 <_strtod_l+0x9e0>
   10046:	f8c8 3000 	str.w	r3, [r8]
   1004a:	e4d2      	b.n	f9f2 <_strtod_l+0x37a>
   1004c:	2322      	movs	r3, #34	; 0x22
   1004e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 10060 <_strtod_l+0x9e8>
   10052:	f8c8 3000 	str.w	r3, [r8]
   10056:	e4cc      	b.n	f9f2 <_strtod_l+0x37a>
	...
   10064:	7ff00000 	.word	0x7ff00000
   10068:	bff00000 	.word	0xbff00000
   1006c:	7ff00000 	.word	0x7ff00000
   10070:	7c9fffff 	.word	0x7c9fffff
   10074:	7fefffff 	.word	0x7fefffff
   10078:	20000300 	.word	0x20000300
   1007c:	7ca00000 	.word	0x7ca00000
   10080:	20000328 	.word	0x20000328
   10084:	200003f0 	.word	0x200003f0
   10088:	9302      	str	r3, [sp, #8]
   1008a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1008c:	9301      	str	r3, [sp, #4]
   1008e:	ab12      	add	r3, sp, #72	; 0x48
   10090:	9300      	str	r3, [sp, #0]
   10092:	4aa7      	ldr	r2, [pc, #668]	; (10330 <_strtod_l+0xcb8>)
   10094:	ab13      	add	r3, sp, #76	; 0x4c
   10096:	a911      	add	r1, sp, #68	; 0x44
   10098:	4640      	mov	r0, r8
   1009a:	f001 fbfb 	bl	11894 <__gethex>
   1009e:	f010 050f 	ands.w	r5, r0, #15
   100a2:	4604      	mov	r4, r0
   100a4:	f43f aca3 	beq.w	f9ee <_strtod_l+0x376>
   100a8:	2d06      	cmp	r5, #6
   100aa:	d174      	bne.n	10196 <_strtod_l+0xb1e>
   100ac:	9b07      	ldr	r3, [sp, #28]
   100ae:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 10318 <_strtod_l+0xca0>
   100b2:	3701      	adds	r7, #1
   100b4:	2b00      	cmp	r3, #0
   100b6:	f43f abce 	beq.w	f856 <_strtod_l+0x1de>
   100ba:	601f      	str	r7, [r3, #0]
   100bc:	f7ff bbcb 	b.w	f856 <_strtod_l+0x1de>
   100c0:	ed9d 8b04 	vldr	d8, [sp, #16]
   100c4:	e495      	b.n	f9f2 <_strtod_l+0x37a>
   100c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   100c8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   100cc:	4403      	add	r3, r0
   100ce:	930b      	str	r3, [sp, #44]	; 0x2c
   100d0:	2801      	cmp	r0, #1
   100d2:	f105 0301 	add.w	r3, r5, #1
   100d6:	461a      	mov	r2, r3
   100d8:	d014      	beq.n	10104 <_strtod_l+0xa8c>
   100da:	4428      	add	r0, r5
   100dc:	1e44      	subs	r4, r0, #1
   100de:	e003      	b.n	100e8 <_strtod_l+0xa70>
   100e0:	0046      	lsls	r6, r0, #1
   100e2:	429c      	cmp	r4, r3
   100e4:	d00d      	beq.n	10102 <_strtod_l+0xa8a>
   100e6:	3301      	adds	r3, #1
   100e8:	462a      	mov	r2, r5
   100ea:	2a08      	cmp	r2, #8
   100ec:	461d      	mov	r5, r3
   100ee:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   100f2:	d9f5      	bls.n	100e0 <_strtod_l+0xa68>
   100f4:	2b10      	cmp	r3, #16
   100f6:	bfdc      	itt	le
   100f8:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   100fc:	ea4f 0949 	movle.w	r9, r9, lsl #1
   10100:	e7ef      	b.n	100e2 <_strtod_l+0xa6a>
   10102:	3202      	adds	r2, #2
   10104:	2d08      	cmp	r5, #8
   10106:	dc3c      	bgt.n	10182 <_strtod_l+0xb0a>
   10108:	4615      	mov	r5, r2
   1010a:	f7ff bb79 	b.w	f800 <_strtod_l+0x188>
   1010e:	4989      	ldr	r1, [pc, #548]	; (10334 <_strtod_l+0xcbc>)
   10110:	2201      	movs	r2, #1
   10112:	4638      	mov	r0, r7
   10114:	f000 fe14 	bl	10d40 <strncmp>
   10118:	2800      	cmp	r0, #0
   1011a:	f000 8082 	beq.w	10222 <_strtod_l+0xbaa>
   1011e:	f04f 0e00 	mov.w	lr, #0
   10122:	46f1      	mov	r9, lr
   10124:	4676      	mov	r6, lr
   10126:	4675      	mov	r5, lr
   10128:	f7ff bbb5 	b.w	f896 <_strtod_l+0x21e>
   1012c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   10130:	459b      	cmp	fp, r3
   10132:	bfa8      	it	ge
   10134:	469b      	movge	fp, r3
   10136:	e42f      	b.n	f998 <_strtod_l+0x320>
   10138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1013c:	4618      	mov	r0, r3
   1013e:	2b00      	cmp	r3, #0
   10140:	f47f ae23 	bne.w	fd8a <_strtod_l+0x712>
   10144:	2322      	movs	r3, #34	; 0x22
   10146:	ed9f 8b74 	vldr	d8, [pc, #464]	; 10318 <_strtod_l+0xca0>
   1014a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1014c:	f8c8 3000 	str.w	r3, [r8]
   10150:	e678      	b.n	fe44 <_strtod_l+0x7cc>
   10152:	eeb0 7b49 	vmov.f64	d7, d9
   10156:	e6c0      	b.n	feda <_strtod_l+0x862>
   10158:	4977      	ldr	r1, [pc, #476]	; (10338 <_strtod_l+0xcc0>)
   1015a:	a811      	add	r0, sp, #68	; 0x44
   1015c:	f001 fe64 	bl	11e28 <__match>
   10160:	2800      	cmp	r0, #0
   10162:	f43f ab71 	beq.w	f848 <_strtod_l+0x1d0>
   10166:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10168:	4974      	ldr	r1, [pc, #464]	; (1033c <_strtod_l+0xcc4>)
   1016a:	3b01      	subs	r3, #1
   1016c:	a811      	add	r0, sp, #68	; 0x44
   1016e:	9311      	str	r3, [sp, #68]	; 0x44
   10170:	f001 fe5a 	bl	11e28 <__match>
   10174:	b910      	cbnz	r0, 1017c <_strtod_l+0xb04>
   10176:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10178:	3301      	adds	r3, #1
   1017a:	9311      	str	r3, [sp, #68]	; 0x44
   1017c:	ed9f 8b68 	vldr	d8, [pc, #416]	; 10320 <_strtod_l+0xca8>
   10180:	e437      	b.n	f9f2 <_strtod_l+0x37a>
   10182:	2a10      	cmp	r2, #16
   10184:	bfdc      	itt	le
   10186:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1018a:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   1018e:	4615      	mov	r5, r2
   10190:	2000      	movs	r0, #0
   10192:	f7ff bb3a 	b.w	f80a <_strtod_l+0x192>
   10196:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10198:	b13a      	cbz	r2, 101aa <_strtod_l+0xb32>
   1019a:	2135      	movs	r1, #53	; 0x35
   1019c:	a814      	add	r0, sp, #80	; 0x50
   1019e:	f002 fc27 	bl	129f0 <__copybits>
   101a2:	9912      	ldr	r1, [sp, #72]	; 0x48
   101a4:	4640      	mov	r0, r8
   101a6:	f001 ff6f 	bl	12088 <_Bfree>
   101aa:	3d01      	subs	r5, #1
   101ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   101ae:	2d04      	cmp	r5, #4
   101b0:	f200 818f 	bhi.w	104d2 <_strtod_l+0xe5a>
   101b4:	e8df f005 	tbb	[pc, r5]
   101b8:	1f2a2d03 	.word	0x1f2a2d03
   101bc:	03          	.byte	0x03
   101bd:	00          	.byte	0x00
   101be:	9a14      	ldr	r2, [sp, #80]	; 0x50
   101c0:	9204      	str	r2, [sp, #16]
   101c2:	f203 4233 	addw	r2, r3, #1075	; 0x433
   101c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   101c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   101cc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   101d0:	9305      	str	r3, [sp, #20]
   101d2:	05e5      	lsls	r5, r4, #23
   101d4:	d502      	bpl.n	101dc <_strtod_l+0xb64>
   101d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   101da:	9305      	str	r3, [sp, #20]
   101dc:	4a58      	ldr	r2, [pc, #352]	; (10340 <_strtod_l+0xcc8>)
   101de:	401a      	ands	r2, r3
   101e0:	ed9d 8b04 	vldr	d8, [sp, #16]
   101e4:	2a00      	cmp	r2, #0
   101e6:	f47f ac04 	bne.w	f9f2 <_strtod_l+0x37a>
   101ea:	f000 fe8d 	bl	10f08 <__errno>
   101ee:	2322      	movs	r3, #34	; 0x22
   101f0:	6003      	str	r3, [r0, #0]
   101f2:	f7ff bbfe 	b.w	f9f2 <_strtod_l+0x37a>
   101f6:	f04f 33ff 	mov.w	r3, #4294967295
   101fa:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   101fe:	e9cd 3604 	strd	r3, r6, [sp, #16]
   10202:	05e3      	lsls	r3, r4, #23
   10204:	f57f af5c 	bpl.w	100c0 <_strtod_l+0xa48>
   10208:	9b05      	ldr	r3, [sp, #20]
   1020a:	e7e4      	b.n	101d6 <_strtod_l+0xb5e>
   1020c:	4b4c      	ldr	r3, [pc, #304]	; (10340 <_strtod_l+0xcc8>)
   1020e:	9305      	str	r3, [sp, #20]
   10210:	e7f7      	b.n	10202 <_strtod_l+0xb8a>
   10212:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10214:	9304      	str	r3, [sp, #16]
   10216:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10218:	9305      	str	r3, [sp, #20]
   1021a:	e7da      	b.n	101d2 <_strtod_l+0xb5a>
   1021c:	2000      	movs	r0, #0
   1021e:	f7ff bae1 	b.w	f7e4 <_strtod_l+0x16c>
   10222:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10224:	461a      	mov	r2, r3
   10226:	3301      	adds	r3, #1
   10228:	9311      	str	r3, [sp, #68]	; 0x44
   1022a:	7854      	ldrb	r4, [r2, #1]
   1022c:	4606      	mov	r6, r0
   1022e:	4681      	mov	r9, r0
   10230:	f7ff bacd 	b.w	f7ce <_strtod_l+0x156>
   10234:	4b43      	ldr	r3, [pc, #268]	; (10344 <_strtod_l+0xccc>)
   10236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1023a:	ed93 8b00 	vldr	d8, [r3]
   1023e:	ed9d 7b04 	vldr	d7, [sp, #16]
   10242:	ee28 8b07 	vmul.f64	d8, d8, d7
   10246:	f7ff bbd4 	b.w	f9f2 <_strtod_l+0x37a>
   1024a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   1024e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10252:	e511      	b.n	fc78 <_strtod_l+0x600>
   10254:	46ae      	mov	lr, r5
   10256:	900b      	str	r0, [sp, #44]	; 0x2c
   10258:	f7ff badc 	b.w	f814 <_strtod_l+0x19c>
   1025c:	4b39      	ldr	r3, [pc, #228]	; (10344 <_strtod_l+0xccc>)
   1025e:	f1c5 050f 	rsb	r5, r5, #15
   10262:	1b4a      	subs	r2, r1, r5
   10264:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1026c:	ed95 8b00 	vldr	d8, [r5]
   10270:	ed93 7b00 	vldr	d7, [r3]
   10274:	ed9d 6b04 	vldr	d6, [sp, #16]
   10278:	ee28 8b06 	vmul.f64	d8, d8, d6
   1027c:	ee28 8b07 	vmul.f64	d8, d8, d7
   10280:	f7ff bbb7 	b.w	f9f2 <_strtod_l+0x37a>
   10284:	2d00      	cmp	r5, #0
   10286:	f000 8095 	beq.w	103b4 <_strtod_l+0xd3c>
   1028a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   1028e:	4b2e      	ldr	r3, [pc, #184]	; (10348 <_strtod_l+0xcd0>)
   10290:	f3cc 0113 	ubfx	r1, ip, #0, #20
   10294:	4299      	cmp	r1, r3
   10296:	4662      	mov	r2, ip
   10298:	f000 80d2 	beq.w	10440 <_strtod_l+0xdc8>
   1029c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1029e:	2b00      	cmp	r3, #0
   102a0:	f000 80a5 	beq.w	103ee <_strtod_l+0xd76>
   102a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   102a8:	4213      	tst	r3, r2
   102aa:	4617      	mov	r7, r2
   102ac:	d01a      	beq.n	102e4 <_strtod_l+0xc6c>
   102ae:	eeb0 0b48 	vmov.f64	d0, d8
   102b2:	2d00      	cmp	r5, #0
   102b4:	f000 80a6 	beq.w	10404 <_strtod_l+0xd8c>
   102b8:	f002 fa6a 	bl	12790 <__ulp>
   102bc:	9b08      	ldr	r3, [sp, #32]
   102be:	b17b      	cbz	r3, 102e0 <_strtod_l+0xc68>
   102c0:	f3c7 530a 	ubfx	r3, r7, #20, #11
   102c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   102c8:	2b00      	cmp	r3, #0
   102ca:	dd09      	ble.n	102e0 <_strtod_l+0xc68>
   102cc:	051b      	lsls	r3, r3, #20
   102ce:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   102d2:	2000      	movs	r0, #0
   102d4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   102d8:	ec41 0b17 	vmov	d7, r0, r1
   102dc:	ee20 0b07 	vmul.f64	d0, d0, d7
   102e0:	ee38 8b00 	vadd.f64	d8, d8, d0
   102e4:	9b08      	ldr	r3, [sp, #32]
   102e6:	b15b      	cbz	r3, 10300 <_strtod_l+0xc88>
   102e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 10328 <_strtod_l+0xcb0>
   102ec:	4b14      	ldr	r3, [pc, #80]	; (10340 <_strtod_l+0xcc8>)
   102ee:	ee28 8b07 	vmul.f64	d8, d8, d7
   102f2:	ee18 2a90 	vmov	r2, s17
   102f6:	4013      	ands	r3, r2
   102f8:	b913      	cbnz	r3, 10300 <_strtod_l+0xc88>
   102fa:	2322      	movs	r3, #34	; 0x22
   102fc:	f8c8 3000 	str.w	r3, [r8]
   10300:	9812      	ldr	r0, [sp, #72]	; 0x48
   10302:	e59f      	b.n	fe44 <_strtod_l+0x7cc>
   10304:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   10308:	9305      	str	r3, [sp, #20]
   1030a:	2300      	movs	r3, #0
   1030c:	9308      	str	r3, [sp, #32]
   1030e:	f7ff bbb1 	b.w	fa74 <_strtod_l+0x3fc>
   10312:	bf00      	nop
   10314:	f3af 8000 	nop.w
	...
   10324:	7ff00000 	.word	0x7ff00000
   10328:	00000000 	.word	0x00000000
   1032c:	39500000 	.word	0x39500000
   10330:	20007e9c 	.word	0x20007e9c
   10334:	200081c4 	.word	0x200081c4
   10338:	200010a0 	.word	0x200010a0
   1033c:	200010a4 	.word	0x200010a4
   10340:	7ff00000 	.word	0x7ff00000
   10344:	20000328 	.word	0x20000328
   10348:	000fffff 	.word	0x000fffff
   1034c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10350:	430d      	orrs	r5, r1
   10352:	d1c7      	bne.n	102e4 <_strtod_l+0xc6c>
   10354:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10358:	4617      	mov	r7, r2
   1035a:	2b00      	cmp	r3, #0
   1035c:	d1c2      	bne.n	102e4 <_strtod_l+0xc6c>
   1035e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10362:	0d1b      	lsrs	r3, r3, #20
   10364:	051b      	lsls	r3, r3, #20
   10366:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1036a:	d9bb      	bls.n	102e4 <_strtod_l+0xc6c>
   1036c:	f8da 3014 	ldr.w	r3, [sl, #20]
   10370:	b91b      	cbnz	r3, 1037a <_strtod_l+0xd02>
   10372:	f8da 3010 	ldr.w	r3, [sl, #16]
   10376:	2b01      	cmp	r3, #1
   10378:	ddb4      	ble.n	102e4 <_strtod_l+0xc6c>
   1037a:	4651      	mov	r1, sl
   1037c:	2201      	movs	r2, #1
   1037e:	4640      	mov	r0, r8
   10380:	f002 f8c2 	bl	12508 <__lshift>
   10384:	4621      	mov	r1, r4
   10386:	4682      	mov	sl, r0
   10388:	f002 f936 	bl	125f8 <__mcmp>
   1038c:	2800      	cmp	r0, #0
   1038e:	dda9      	ble.n	102e4 <_strtod_l+0xc6c>
   10390:	9b08      	ldr	r3, [sp, #32]
   10392:	2b00      	cmp	r3, #0
   10394:	d17e      	bne.n	10494 <_strtod_l+0xe1c>
   10396:	4b50      	ldr	r3, [pc, #320]	; (104d8 <_strtod_l+0xe60>)
   10398:	403b      	ands	r3, r7
   1039a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1039e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   103a2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   103a6:	9305      	str	r3, [sp, #20]
   103a8:	f04f 33ff 	mov.w	r3, #4294967295
   103ac:	9304      	str	r3, [sp, #16]
   103ae:	ed9d 8b04 	vldr	d8, [sp, #16]
   103b2:	e797      	b.n	102e4 <_strtod_l+0xc6c>
   103b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   103b8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   103bc:	430b      	orrs	r3, r1
   103be:	4617      	mov	r7, r2
   103c0:	f47f af6c 	bne.w	1029c <_strtod_l+0xc24>
   103c4:	e7e4      	b.n	10390 <_strtod_l+0xd18>
   103c6:	4945      	ldr	r1, [pc, #276]	; (104dc <_strtod_l+0xe64>)
   103c8:	a811      	add	r0, sp, #68	; 0x44
   103ca:	aa14      	add	r2, sp, #80	; 0x50
   103cc:	f001 fd48 	bl	11e60 <__hexnan>
   103d0:	2805      	cmp	r0, #5
   103d2:	f47f ab06 	bne.w	f9e2 <_strtod_l+0x36a>
   103d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   103d8:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   103dc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   103e0:	9305      	str	r3, [sp, #20]
   103e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   103e4:	9304      	str	r3, [sp, #16]
   103e6:	ed9d 8b04 	vldr	d8, [sp, #16]
   103ea:	f7ff bb02 	b.w	f9f2 <_strtod_l+0x37a>
   103ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   103f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103f4:	4203      	tst	r3, r0
   103f6:	f43f af75 	beq.w	102e4 <_strtod_l+0xc6c>
   103fa:	460f      	mov	r7, r1
   103fc:	e757      	b.n	102ae <_strtod_l+0xc36>
   103fe:	4c38      	ldr	r4, [pc, #224]	; (104e0 <_strtod_l+0xe68>)
   10400:	2100      	movs	r1, #0
   10402:	e58f      	b.n	ff24 <_strtod_l+0x8ac>
   10404:	f002 f9c4 	bl	12790 <__ulp>
   10408:	9b08      	ldr	r3, [sp, #32]
   1040a:	2b00      	cmp	r3, #0
   1040c:	d055      	beq.n	104ba <_strtod_l+0xe42>
   1040e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   10412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10416:	2b00      	cmp	r3, #0
   10418:	dd09      	ble.n	1042e <_strtod_l+0xdb6>
   1041a:	051b      	lsls	r3, r3, #20
   1041c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   10420:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   10424:	4628      	mov	r0, r5
   10426:	ec41 0b17 	vmov	d7, r0, r1
   1042a:	ee20 0b07 	vmul.f64	d0, d0, d7
   1042e:	ee38 8b40 	vsub.f64	d8, d8, d0
   10432:	eeb5 8b40 	vcmp.f64	d8, #0.0
   10436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1043a:	f47f af55 	bne.w	102e8 <_strtod_l+0xc70>
   1043e:	e681      	b.n	10144 <_strtod_l+0xacc>
   10440:	9b08      	ldr	r3, [sp, #32]
   10442:	9904      	ldr	r1, [sp, #16]
   10444:	b31b      	cbz	r3, 1048e <_strtod_l+0xe16>
   10446:	4b24      	ldr	r3, [pc, #144]	; (104d8 <_strtod_l+0xe60>)
   10448:	4013      	ands	r3, r2
   1044a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1044e:	d81e      	bhi.n	1048e <_strtod_l+0xe16>
   10450:	0d1b      	lsrs	r3, r3, #20
   10452:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10456:	f04f 30ff 	mov.w	r0, #4294967295
   1045a:	fa00 f303 	lsl.w	r3, r0, r3
   1045e:	4299      	cmp	r1, r3
   10460:	f47f af1c 	bne.w	1029c <_strtod_l+0xc24>
   10464:	4b1f      	ldr	r3, [pc, #124]	; (104e4 <_strtod_l+0xe6c>)
   10466:	429a      	cmp	r2, r3
   10468:	d030      	beq.n	104cc <_strtod_l+0xe54>
   1046a:	4b1b      	ldr	r3, [pc, #108]	; (104d8 <_strtod_l+0xe60>)
   1046c:	4013      	ands	r3, r2
   1046e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   10472:	9305      	str	r3, [sp, #20]
   10474:	2300      	movs	r3, #0
   10476:	9304      	str	r3, [sp, #16]
   10478:	ed9d 8b04 	vldr	d8, [sp, #16]
   1047c:	e732      	b.n	102e4 <_strtod_l+0xc6c>
   1047e:	f04f 32ff 	mov.w	r2, #4294967295
   10482:	fa02 f303 	lsl.w	r3, r2, r3
   10486:	9a04      	ldr	r2, [sp, #16]
   10488:	401a      	ands	r2, r3
   1048a:	9204      	str	r2, [sp, #16]
   1048c:	e5d0      	b.n	10030 <_strtod_l+0x9b8>
   1048e:	f04f 33ff 	mov.w	r3, #4294967295
   10492:	e7e4      	b.n	1045e <_strtod_l+0xde6>
   10494:	4b10      	ldr	r3, [pc, #64]	; (104d8 <_strtod_l+0xe60>)
   10496:	403b      	ands	r3, r7
   10498:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1049c:	f73f af7d 	bgt.w	1039a <_strtod_l+0xd22>
   104a0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   104a4:	f73f af20 	bgt.w	102e8 <_strtod_l+0xc70>
   104a8:	e64c      	b.n	10144 <_strtod_l+0xacc>
   104aa:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   104ae:	f04f 33ff 	mov.w	r3, #4294967295
   104b2:	4093      	lsls	r3, r2
   104b4:	400b      	ands	r3, r1
   104b6:	9305      	str	r3, [sp, #20]
   104b8:	e5ba      	b.n	10030 <_strtod_l+0x9b8>
   104ba:	ee38 8b40 	vsub.f64	d8, d8, d0
   104be:	eeb5 8b40 	vcmp.f64	d8, #0.0
   104c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   104c6:	f47f af1b 	bne.w	10300 <_strtod_l+0xc88>
   104ca:	e63b      	b.n	10144 <_strtod_l+0xacc>
   104cc:	3101      	adds	r1, #1
   104ce:	d1cc      	bne.n	1046a <_strtod_l+0xdf2>
   104d0:	e409      	b.n	fce6 <_strtod_l+0x66e>
   104d2:	2300      	movs	r3, #0
   104d4:	e67d      	b.n	101d2 <_strtod_l+0xb5a>
   104d6:	bf00      	nop
   104d8:	7ff00000 	.word	0x7ff00000
   104dc:	20007eb0 	.word	0x20007eb0
   104e0:	20000300 	.word	0x20000300
   104e4:	7fefffff 	.word	0x7fefffff

000104e8 <_strtod_r>:
   104e8:	4b01      	ldr	r3, [pc, #4]	; (104f0 <_strtod_r+0x8>)
   104ea:	f7ff b8c5 	b.w	f678 <_strtod_l>
   104ee:	bf00      	nop
   104f0:	20008a74 	.word	0x20008a74

000104f4 <_strtol_l.constprop.0>:
   104f4:	2b01      	cmp	r3, #1
   104f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104fa:	d040      	beq.n	1057e <_strtol_l.constprop.0+0x8a>
   104fc:	2b24      	cmp	r3, #36	; 0x24
   104fe:	4698      	mov	r8, r3
   10500:	d83d      	bhi.n	1057e <_strtol_l.constprop.0+0x8a>
   10502:	4d4c      	ldr	r5, [pc, #304]	; (10634 <_strtol_l.constprop.0+0x140>)
   10504:	468e      	mov	lr, r1
   10506:	4676      	mov	r6, lr
   10508:	f81e bb01 	ldrb.w	fp, [lr], #1
   1050c:	f815 400b 	ldrb.w	r4, [r5, fp]
   10510:	f014 0408 	ands.w	r4, r4, #8
   10514:	d1f7      	bne.n	10506 <_strtol_l.constprop.0+0x12>
   10516:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   1051a:	d072      	beq.n	10602 <_strtol_l.constprop.0+0x10e>
   1051c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   10520:	bf08      	it	eq
   10522:	f89e b000 	ldrbeq.w	fp, [lr]
   10526:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   1052a:	bf08      	it	eq
   1052c:	f106 0e02 	addeq.w	lr, r6, #2
   10530:	2b00      	cmp	r3, #0
   10532:	d042      	beq.n	105ba <_strtol_l.constprop.0+0xc6>
   10534:	2b10      	cmp	r3, #16
   10536:	d057      	beq.n	105e8 <_strtol_l.constprop.0+0xf4>
   10538:	fbb9 f7f8 	udiv	r7, r9, r8
   1053c:	2500      	movs	r5, #0
   1053e:	462e      	mov	r6, r5
   10540:	fb08 9a17 	mls	sl, r8, r7, r9
   10544:	e005      	b.n	10552 <_strtol_l.constprop.0+0x5e>
   10546:	d033      	beq.n	105b0 <_strtol_l.constprop.0+0xbc>
   10548:	fb08 c606 	mla	r6, r8, r6, ip
   1054c:	2501      	movs	r5, #1
   1054e:	f81e bb01 	ldrb.w	fp, [lr], #1
   10552:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   10556:	f1bc 0f09 	cmp.w	ip, #9
   1055a:	d906      	bls.n	1056a <_strtol_l.constprop.0+0x76>
   1055c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   10560:	f1bc 0f19 	cmp.w	ip, #25
   10564:	d812      	bhi.n	1058c <_strtol_l.constprop.0+0x98>
   10566:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   1056a:	4563      	cmp	r3, ip
   1056c:	dd17      	ble.n	1059e <_strtol_l.constprop.0+0xaa>
   1056e:	f1b5 3fff 	cmp.w	r5, #4294967295
   10572:	d0ec      	beq.n	1054e <_strtol_l.constprop.0+0x5a>
   10574:	42b7      	cmp	r7, r6
   10576:	d2e6      	bcs.n	10546 <_strtol_l.constprop.0+0x52>
   10578:	f04f 35ff 	mov.w	r5, #4294967295
   1057c:	e7e7      	b.n	1054e <_strtol_l.constprop.0+0x5a>
   1057e:	f000 fcc3 	bl	10f08 <__errno>
   10582:	2316      	movs	r3, #22
   10584:	6003      	str	r3, [r0, #0]
   10586:	2000      	movs	r0, #0
   10588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1058c:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   10590:	f1bc 0f19 	cmp.w	ip, #25
   10594:	d803      	bhi.n	1059e <_strtol_l.constprop.0+0xaa>
   10596:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   1059a:	4563      	cmp	r3, ip
   1059c:	dce7      	bgt.n	1056e <_strtol_l.constprop.0+0x7a>
   1059e:	1c6b      	adds	r3, r5, #1
   105a0:	d027      	beq.n	105f2 <_strtol_l.constprop.0+0xfe>
   105a2:	b98c      	cbnz	r4, 105c8 <_strtol_l.constprop.0+0xd4>
   105a4:	b10a      	cbz	r2, 105aa <_strtol_l.constprop.0+0xb6>
   105a6:	bba5      	cbnz	r5, 10612 <_strtol_l.constprop.0+0x11e>
   105a8:	6011      	str	r1, [r2, #0]
   105aa:	4630      	mov	r0, r6
   105ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b0:	45e2      	cmp	sl, ip
   105b2:	dac9      	bge.n	10548 <_strtol_l.constprop.0+0x54>
   105b4:	f04f 35ff 	mov.w	r5, #4294967295
   105b8:	e7c9      	b.n	1054e <_strtol_l.constprop.0+0x5a>
   105ba:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   105be:	d005      	beq.n	105cc <_strtol_l.constprop.0+0xd8>
   105c0:	f04f 080a 	mov.w	r8, #10
   105c4:	4643      	mov	r3, r8
   105c6:	e7b7      	b.n	10538 <_strtol_l.constprop.0+0x44>
   105c8:	4276      	negs	r6, r6
   105ca:	e7eb      	b.n	105a4 <_strtol_l.constprop.0+0xb0>
   105cc:	f89e 3000 	ldrb.w	r3, [lr]
   105d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   105d4:	2b58      	cmp	r3, #88	; 0x58
   105d6:	d121      	bne.n	1061c <_strtol_l.constprop.0+0x128>
   105d8:	f04f 0810 	mov.w	r8, #16
   105dc:	f89e b001 	ldrb.w	fp, [lr, #1]
   105e0:	4643      	mov	r3, r8
   105e2:	f10e 0e02 	add.w	lr, lr, #2
   105e6:	e7a7      	b.n	10538 <_strtol_l.constprop.0+0x44>
   105e8:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   105ec:	d01a      	beq.n	10624 <_strtol_l.constprop.0+0x130>
   105ee:	4698      	mov	r8, r3
   105f0:	e7a2      	b.n	10538 <_strtol_l.constprop.0+0x44>
   105f2:	2322      	movs	r3, #34	; 0x22
   105f4:	6003      	str	r3, [r0, #0]
   105f6:	b172      	cbz	r2, 10616 <_strtol_l.constprop.0+0x122>
   105f8:	f10e 31ff 	add.w	r1, lr, #4294967295
   105fc:	464e      	mov	r6, r9
   105fe:	6011      	str	r1, [r2, #0]
   10600:	e7d3      	b.n	105aa <_strtol_l.constprop.0+0xb6>
   10602:	f89e b000 	ldrb.w	fp, [lr]
   10606:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   1060a:	f106 0e02 	add.w	lr, r6, #2
   1060e:	2401      	movs	r4, #1
   10610:	e78e      	b.n	10530 <_strtol_l.constprop.0+0x3c>
   10612:	46b1      	mov	r9, r6
   10614:	e7f0      	b.n	105f8 <_strtol_l.constprop.0+0x104>
   10616:	464e      	mov	r6, r9
   10618:	4630      	mov	r0, r6
   1061a:	e7c7      	b.n	105ac <_strtol_l.constprop.0+0xb8>
   1061c:	f04f 0808 	mov.w	r8, #8
   10620:	4643      	mov	r3, r8
   10622:	e789      	b.n	10538 <_strtol_l.constprop.0+0x44>
   10624:	f89e 5000 	ldrb.w	r5, [lr]
   10628:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   1062c:	2d58      	cmp	r5, #88	; 0x58
   1062e:	d0d3      	beq.n	105d8 <_strtol_l.constprop.0+0xe4>
   10630:	4698      	mov	r8, r3
   10632:	e781      	b.n	10538 <_strtol_l.constprop.0+0x44>
   10634:	20000f1d 	.word	0x20000f1d

00010638 <_strtol_r>:
   10638:	f7ff bf5c 	b.w	104f4 <_strtol_l.constprop.0>

0001063c <__cxa_atexit>:
   1063c:	4613      	mov	r3, r2
   1063e:	460a      	mov	r2, r1
   10640:	4601      	mov	r1, r0
   10642:	2002      	movs	r0, #2
   10644:	f000 bf3a 	b.w	114bc <__register_exitproc>

00010648 <fcvtf>:
   10648:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   1064c:	2300      	movs	r3, #0
   1064e:	f002 ba3d 	b.w	12acc <fcvtbuf>
   10652:	bf00      	nop

00010654 <stdio_exit_handler>:
   10654:	4a02      	ldr	r2, [pc, #8]	; (10660 <stdio_exit_handler+0xc>)
   10656:	4903      	ldr	r1, [pc, #12]	; (10664 <stdio_exit_handler+0x10>)
   10658:	4803      	ldr	r0, [pc, #12]	; (10668 <stdio_exit_handler+0x14>)
   1065a:	f000 b8bb 	b.w	107d4 <_fwalk_sglue>
   1065e:	bf00      	nop
   10660:	20008ff0 	.word	0x20008ff0
   10664:	00015f05 	.word	0x00015f05
   10668:	20008928 	.word	0x20008928

0001066c <cleanup_stdio>:
   1066c:	4b0c      	ldr	r3, [pc, #48]	; (106a0 <cleanup_stdio+0x34>)
   1066e:	6841      	ldr	r1, [r0, #4]
   10670:	4299      	cmp	r1, r3
   10672:	b510      	push	{r4, lr}
   10674:	4604      	mov	r4, r0
   10676:	d001      	beq.n	1067c <cleanup_stdio+0x10>
   10678:	f005 fc44 	bl	15f04 <_fclose_r>
   1067c:	68a1      	ldr	r1, [r4, #8]
   1067e:	4b09      	ldr	r3, [pc, #36]	; (106a4 <cleanup_stdio+0x38>)
   10680:	4299      	cmp	r1, r3
   10682:	d002      	beq.n	1068a <cleanup_stdio+0x1e>
   10684:	4620      	mov	r0, r4
   10686:	f005 fc3d 	bl	15f04 <_fclose_r>
   1068a:	68e1      	ldr	r1, [r4, #12]
   1068c:	4b06      	ldr	r3, [pc, #24]	; (106a8 <cleanup_stdio+0x3c>)
   1068e:	4299      	cmp	r1, r3
   10690:	d004      	beq.n	1069c <cleanup_stdio+0x30>
   10692:	4620      	mov	r0, r4
   10694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10698:	f005 bc34 	b.w	15f04 <_fclose_r>
   1069c:	bd10      	pop	{r4, pc}
   1069e:	bf00      	nop
   106a0:	20042580 	.word	0x20042580
   106a4:	200425e8 	.word	0x200425e8
   106a8:	20042650 	.word	0x20042650

000106ac <global_stdio_init.part.0>:
   106ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   106b0:	4c2a      	ldr	r4, [pc, #168]	; (1075c <global_stdio_init.part.0+0xb0>)
   106b2:	4b2b      	ldr	r3, [pc, #172]	; (10760 <global_stdio_init.part.0+0xb4>)
   106b4:	482b      	ldr	r0, [pc, #172]	; (10764 <global_stdio_init.part.0+0xb8>)
   106b6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 10778 <global_stdio_init.part.0+0xcc>
   106ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 1077c <global_stdio_init.part.0+0xd0>
   106be:	4f2a      	ldr	r7, [pc, #168]	; (10768 <global_stdio_init.part.0+0xbc>)
   106c0:	6018      	str	r0, [r3, #0]
   106c2:	2500      	movs	r5, #0
   106c4:	2304      	movs	r3, #4
   106c6:	2208      	movs	r2, #8
   106c8:	4629      	mov	r1, r5
   106ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   106ce:	4e27      	ldr	r6, [pc, #156]	; (1076c <global_stdio_init.part.0+0xc0>)
   106d0:	6665      	str	r5, [r4, #100]	; 0x64
   106d2:	e9c4 5302 	strd	r5, r3, [r4, #8]
   106d6:	e9c4 5500 	strd	r5, r5, [r4]
   106da:	e9c4 5504 	strd	r5, r5, [r4, #16]
   106de:	61a5      	str	r5, [r4, #24]
   106e0:	f000 fa86 	bl	10bf0 <memset>
   106e4:	4b22      	ldr	r3, [pc, #136]	; (10770 <global_stdio_init.part.0+0xc4>)
   106e6:	6763      	str	r3, [r4, #116]	; 0x74
   106e8:	2208      	movs	r2, #8
   106ea:	4629      	mov	r1, r5
   106ec:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   106f0:	e9c4 4907 	strd	r4, r9, [r4, #28]
   106f4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   106f8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   106fc:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   10700:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   10704:	6725      	str	r5, [r4, #112]	; 0x70
   10706:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1070a:	62e6      	str	r6, [r4, #44]	; 0x2c
   1070c:	f000 fa70 	bl	10bf0 <memset>
   10710:	4b18      	ldr	r3, [pc, #96]	; (10774 <global_stdio_init.part.0+0xc8>)
   10712:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   10716:	4629      	mov	r1, r5
   10718:	f104 0368 	add.w	r3, r4, #104	; 0x68
   1071c:	2208      	movs	r2, #8
   1071e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   10722:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   10726:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   1072a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   1072e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   10732:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   10736:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   1073a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   1073e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   10742:	f000 fa55 	bl	10bf0 <memset>
   10746:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   1074a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   1074e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   10752:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   10756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1075a:	bf00      	nop
   1075c:	20042580 	.word	0x20042580
   10760:	200426b8 	.word	0x200426b8
   10764:	00010655 	.word	0x00010655
   10768:	000109a5 	.word	0x000109a5
   1076c:	000109c5 	.word	0x000109c5
   10770:	00010009 	.word	0x00010009
   10774:	00020012 	.word	0x00020012
   10778:	0001093d 	.word	0x0001093d
   1077c:	00010965 	.word	0x00010965

00010780 <__sinit>:
   10780:	b510      	push	{r4, lr}
   10782:	4604      	mov	r4, r0
   10784:	480a      	ldr	r0, [pc, #40]	; (107b0 <__sinit+0x30>)
   10786:	f000 fbed 	bl	10f64 <__retarget_lock_acquire_recursive>
   1078a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1078c:	b923      	cbnz	r3, 10798 <__sinit+0x18>
   1078e:	4b09      	ldr	r3, [pc, #36]	; (107b4 <__sinit+0x34>)
   10790:	4a09      	ldr	r2, [pc, #36]	; (107b8 <__sinit+0x38>)
   10792:	681b      	ldr	r3, [r3, #0]
   10794:	6362      	str	r2, [r4, #52]	; 0x34
   10796:	b123      	cbz	r3, 107a2 <__sinit+0x22>
   10798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1079c:	4804      	ldr	r0, [pc, #16]	; (107b0 <__sinit+0x30>)
   1079e:	f000 bbe3 	b.w	10f68 <__retarget_lock_release_recursive>
   107a2:	f7ff ff83 	bl	106ac <global_stdio_init.part.0>
   107a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107aa:	4801      	ldr	r0, [pc, #4]	; (107b0 <__sinit+0x30>)
   107ac:	f000 bbdc 	b.w	10f68 <__retarget_lock_release_recursive>
   107b0:	20042548 	.word	0x20042548
   107b4:	200426b8 	.word	0x200426b8
   107b8:	0001066d 	.word	0x0001066d

000107bc <__sfp_lock_acquire>:
   107bc:	4801      	ldr	r0, [pc, #4]	; (107c4 <__sfp_lock_acquire+0x8>)
   107be:	f000 bbd1 	b.w	10f64 <__retarget_lock_acquire_recursive>
   107c2:	bf00      	nop
   107c4:	20042548 	.word	0x20042548

000107c8 <__sfp_lock_release>:
   107c8:	4801      	ldr	r0, [pc, #4]	; (107d0 <__sfp_lock_release+0x8>)
   107ca:	f000 bbcd 	b.w	10f68 <__retarget_lock_release_recursive>
   107ce:	bf00      	nop
   107d0:	20042548 	.word	0x20042548

000107d4 <_fwalk_sglue>:
   107d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   107d8:	4680      	mov	r8, r0
   107da:	460f      	mov	r7, r1
   107dc:	4616      	mov	r6, r2
   107de:	f04f 0900 	mov.w	r9, #0
   107e2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   107e6:	3d01      	subs	r5, #1
   107e8:	d411      	bmi.n	1080e <_fwalk_sglue+0x3a>
   107ea:	89a3      	ldrh	r3, [r4, #12]
   107ec:	2b01      	cmp	r3, #1
   107ee:	f105 35ff 	add.w	r5, r5, #4294967295
   107f2:	d908      	bls.n	10806 <_fwalk_sglue+0x32>
   107f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   107f8:	3301      	adds	r3, #1
   107fa:	4621      	mov	r1, r4
   107fc:	d003      	beq.n	10806 <_fwalk_sglue+0x32>
   107fe:	4640      	mov	r0, r8
   10800:	47b8      	blx	r7
   10802:	ea49 0900 	orr.w	r9, r9, r0
   10806:	1c6b      	adds	r3, r5, #1
   10808:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1080c:	d1ed      	bne.n	107ea <_fwalk_sglue+0x16>
   1080e:	6836      	ldr	r6, [r6, #0]
   10810:	2e00      	cmp	r6, #0
   10812:	d1e6      	bne.n	107e2 <_fwalk_sglue+0xe>
   10814:	4648      	mov	r0, r9
   10816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1081a:	bf00      	nop

0001081c <snprintf>:
   1081c:	b40c      	push	{r2, r3}
   1081e:	b510      	push	{r4, lr}
   10820:	4b1f      	ldr	r3, [pc, #124]	; (108a0 <snprintf+0x84>)
   10822:	2900      	cmp	r1, #0
   10824:	681c      	ldr	r4, [r3, #0]
   10826:	b09c      	sub	sp, #112	; 0x70
   10828:	db35      	blt.n	10896 <snprintf+0x7a>
   1082a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1082e:	f8ad 3014 	strh.w	r3, [sp, #20]
   10832:	9002      	str	r0, [sp, #8]
   10834:	9006      	str	r0, [sp, #24]
   10836:	ab1f      	add	r3, sp, #124	; 0x7c
   10838:	d018      	beq.n	1086c <snprintf+0x50>
   1083a:	3901      	subs	r1, #1
   1083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10840:	9104      	str	r1, [sp, #16]
   10842:	9107      	str	r1, [sp, #28]
   10844:	f8ad 2016 	strh.w	r2, [sp, #22]
   10848:	a902      	add	r1, sp, #8
   1084a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1084c:	9301      	str	r3, [sp, #4]
   1084e:	4620      	mov	r0, r4
   10850:	f002 f98e 	bl	12b70 <_svfprintf_r>
   10854:	1c42      	adds	r2, r0, #1
   10856:	da01      	bge.n	1085c <snprintf+0x40>
   10858:	238b      	movs	r3, #139	; 0x8b
   1085a:	6023      	str	r3, [r4, #0]
   1085c:	9b02      	ldr	r3, [sp, #8]
   1085e:	2200      	movs	r2, #0
   10860:	701a      	strb	r2, [r3, #0]
   10862:	b01c      	add	sp, #112	; 0x70
   10864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10868:	b002      	add	sp, #8
   1086a:	4770      	bx	lr
   1086c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10870:	9104      	str	r1, [sp, #16]
   10872:	9107      	str	r1, [sp, #28]
   10874:	f8ad 2016 	strh.w	r2, [sp, #22]
   10878:	a902      	add	r1, sp, #8
   1087a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1087c:	9301      	str	r3, [sp, #4]
   1087e:	4620      	mov	r0, r4
   10880:	f002 f976 	bl	12b70 <_svfprintf_r>
   10884:	1c43      	adds	r3, r0, #1
   10886:	da01      	bge.n	1088c <snprintf+0x70>
   10888:	238b      	movs	r3, #139	; 0x8b
   1088a:	6023      	str	r3, [r4, #0]
   1088c:	b01c      	add	sp, #112	; 0x70
   1088e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10892:	b002      	add	sp, #8
   10894:	4770      	bx	lr
   10896:	238b      	movs	r3, #139	; 0x8b
   10898:	6023      	str	r3, [r4, #0]
   1089a:	f04f 30ff 	mov.w	r0, #4294967295
   1089e:	e7f5      	b.n	1088c <snprintf+0x70>
   108a0:	20008ffc 	.word	0x20008ffc

000108a4 <sprintf>:
   108a4:	b40e      	push	{r1, r2, r3}
   108a6:	b510      	push	{r4, lr}
   108a8:	b09d      	sub	sp, #116	; 0x74
   108aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   108ae:	ab1f      	add	r3, sp, #124	; 0x7c
   108b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   108b4:	9104      	str	r1, [sp, #16]
   108b6:	4909      	ldr	r1, [pc, #36]	; (108dc <sprintf+0x38>)
   108b8:	f853 2b04 	ldr.w	r2, [r3], #4
   108bc:	9002      	str	r0, [sp, #8]
   108be:	4c08      	ldr	r4, [pc, #32]	; (108e0 <sprintf+0x3c>)
   108c0:	6808      	ldr	r0, [r1, #0]
   108c2:	9301      	str	r3, [sp, #4]
   108c4:	a902      	add	r1, sp, #8
   108c6:	9405      	str	r4, [sp, #20]
   108c8:	f002 f952 	bl	12b70 <_svfprintf_r>
   108cc:	9b02      	ldr	r3, [sp, #8]
   108ce:	2200      	movs	r2, #0
   108d0:	701a      	strb	r2, [r3, #0]
   108d2:	b01d      	add	sp, #116	; 0x74
   108d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   108d8:	b003      	add	sp, #12
   108da:	4770      	bx	lr
   108dc:	20008ffc 	.word	0x20008ffc
   108e0:	ffff0208 	.word	0xffff0208

000108e4 <sscanf>:
   108e4:	b40e      	push	{r1, r2, r3}
   108e6:	b510      	push	{r4, lr}
   108e8:	b09f      	sub	sp, #124	; 0x7c
   108ea:	ac21      	add	r4, sp, #132	; 0x84
   108ec:	f44f 7101 	mov.w	r1, #516	; 0x204
   108f0:	f854 2b04 	ldr.w	r2, [r4], #4
   108f4:	9201      	str	r2, [sp, #4]
   108f6:	f8ad 101c 	strh.w	r1, [sp, #28]
   108fa:	9004      	str	r0, [sp, #16]
   108fc:	9008      	str	r0, [sp, #32]
   108fe:	f000 fd5f 	bl	113c0 <strlen>
   10902:	9005      	str	r0, [sp, #20]
   10904:	9009      	str	r0, [sp, #36]	; 0x24
   10906:	480b      	ldr	r0, [pc, #44]	; (10934 <sscanf+0x50>)
   10908:	490b      	ldr	r1, [pc, #44]	; (10938 <sscanf+0x54>)
   1090a:	910c      	str	r1, [sp, #48]	; 0x30
   1090c:	2300      	movs	r3, #0
   1090e:	f64f 7cff 	movw	ip, #65535	; 0xffff
   10912:	9310      	str	r3, [sp, #64]	; 0x40
   10914:	9315      	str	r3, [sp, #84]	; 0x54
   10916:	9a01      	ldr	r2, [sp, #4]
   10918:	6800      	ldr	r0, [r0, #0]
   1091a:	f8ad c01e 	strh.w	ip, [sp, #30]
   1091e:	4623      	mov	r3, r4
   10920:	a904      	add	r1, sp, #16
   10922:	9403      	str	r4, [sp, #12]
   10924:	f003 fec6 	bl	146b4 <__ssvfscanf_r>
   10928:	b01f      	add	sp, #124	; 0x7c
   1092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1092e:	b003      	add	sp, #12
   10930:	4770      	bx	lr
   10932:	bf00      	nop
   10934:	20008ffc 	.word	0x20008ffc
   10938:	00010961 	.word	0x00010961

0001093c <__sread>:
   1093c:	b510      	push	{r4, lr}
   1093e:	460c      	mov	r4, r1
   10940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10944:	f000 faa2 	bl	10e8c <_read_r>
   10948:	2800      	cmp	r0, #0
   1094a:	db03      	blt.n	10954 <__sread+0x18>
   1094c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1094e:	4403      	add	r3, r0
   10950:	6523      	str	r3, [r4, #80]	; 0x50
   10952:	bd10      	pop	{r4, pc}
   10954:	89a3      	ldrh	r3, [r4, #12]
   10956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1095a:	81a3      	strh	r3, [r4, #12]
   1095c:	bd10      	pop	{r4, pc}
   1095e:	bf00      	nop

00010960 <__seofread>:
   10960:	2000      	movs	r0, #0
   10962:	4770      	bx	lr

00010964 <__swrite>:
   10964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10968:	460c      	mov	r4, r1
   1096a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1096e:	461f      	mov	r7, r3
   10970:	05cb      	lsls	r3, r1, #23
   10972:	4605      	mov	r5, r0
   10974:	4616      	mov	r6, r2
   10976:	d40b      	bmi.n	10990 <__swrite+0x2c>
   10978:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1097c:	81a1      	strh	r1, [r4, #12]
   1097e:	463b      	mov	r3, r7
   10980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10984:	4632      	mov	r2, r6
   10986:	4628      	mov	r0, r5
   10988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1098c:	f000 baa6 	b.w	10edc <_write_r>
   10990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10994:	2302      	movs	r3, #2
   10996:	2200      	movs	r2, #0
   10998:	f000 fa62 	bl	10e60 <_lseek_r>
   1099c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   109a0:	e7ea      	b.n	10978 <__swrite+0x14>
   109a2:	bf00      	nop

000109a4 <__sseek>:
   109a4:	b510      	push	{r4, lr}
   109a6:	460c      	mov	r4, r1
   109a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   109ac:	f000 fa58 	bl	10e60 <_lseek_r>
   109b0:	89a3      	ldrh	r3, [r4, #12]
   109b2:	1c42      	adds	r2, r0, #1
   109b4:	bf0e      	itee	eq
   109b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   109ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   109be:	6520      	strne	r0, [r4, #80]	; 0x50
   109c0:	81a3      	strh	r3, [r4, #12]
   109c2:	bd10      	pop	{r4, pc}

000109c4 <__sclose>:
   109c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   109c8:	f000 ba38 	b.w	10e3c <_close_r>

000109cc <_vdprintf_r>:
   109cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   109ce:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   109d2:	af04      	add	r7, sp, #16
   109d4:	9300      	str	r3, [sp, #0]
   109d6:	4613      	mov	r3, r2
   109d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   109dc:	460e      	mov	r6, r1
   109de:	9203      	str	r2, [sp, #12]
   109e0:	4639      	mov	r1, r7
   109e2:	aa03      	add	r2, sp, #12
   109e4:	4605      	mov	r5, r0
   109e6:	f000 f825 	bl	10a34 <_vasnprintf_r>
   109ea:	b188      	cbz	r0, 10a10 <_vdprintf_r+0x44>
   109ec:	4604      	mov	r4, r0
   109ee:	4602      	mov	r2, r0
   109f0:	9b03      	ldr	r3, [sp, #12]
   109f2:	4631      	mov	r1, r6
   109f4:	4628      	mov	r0, r5
   109f6:	f000 fa71 	bl	10edc <_write_r>
   109fa:	42bc      	cmp	r4, r7
   109fc:	9003      	str	r0, [sp, #12]
   109fe:	d004      	beq.n	10a0a <_vdprintf_r+0x3e>
   10a00:	4628      	mov	r0, r5
   10a02:	4621      	mov	r1, r4
   10a04:	f000 fdee 	bl	115e4 <_free_r>
   10a08:	9803      	ldr	r0, [sp, #12]
   10a0a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   10a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a10:	f04f 30ff 	mov.w	r0, #4294967295
   10a14:	e7f9      	b.n	10a0a <_vdprintf_r+0x3e>
   10a16:	bf00      	nop

00010a18 <vdprintf>:
   10a18:	b410      	push	{r4}
   10a1a:	4c05      	ldr	r4, [pc, #20]	; (10a30 <vdprintf+0x18>)
   10a1c:	4684      	mov	ip, r0
   10a1e:	4613      	mov	r3, r2
   10a20:	6820      	ldr	r0, [r4, #0]
   10a22:	f85d 4b04 	ldr.w	r4, [sp], #4
   10a26:	460a      	mov	r2, r1
   10a28:	4661      	mov	r1, ip
   10a2a:	f7ff bfcf 	b.w	109cc <_vdprintf_r>
   10a2e:	bf00      	nop
   10a30:	20008ffc 	.word	0x20008ffc

00010a34 <_vasnprintf_r>:
   10a34:	b530      	push	{r4, r5, lr}
   10a36:	6814      	ldr	r4, [r2, #0]
   10a38:	4615      	mov	r5, r2
   10a3a:	b09b      	sub	sp, #108	; 0x6c
   10a3c:	461a      	mov	r2, r3
   10a3e:	b109      	cbz	r1, 10a44 <_vasnprintf_r+0x10>
   10a40:	2c00      	cmp	r4, #0
   10a42:	d119      	bne.n	10a78 <_vasnprintf_r+0x44>
   10a44:	2100      	movs	r1, #0
   10a46:	f44f 7322 	mov.w	r3, #648	; 0x288
   10a4a:	f8ad 300c 	strh.w	r3, [sp, #12]
   10a4e:	9100      	str	r1, [sp, #0]
   10a50:	9104      	str	r1, [sp, #16]
   10a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10a56:	9102      	str	r1, [sp, #8]
   10a58:	9105      	str	r1, [sp, #20]
   10a5a:	f8ad 300e 	strh.w	r3, [sp, #14]
   10a5e:	4669      	mov	r1, sp
   10a60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10a62:	f002 f885 	bl	12b70 <_svfprintf_r>
   10a66:	2800      	cmp	r0, #0
   10a68:	db13      	blt.n	10a92 <_vasnprintf_r+0x5e>
   10a6a:	9b00      	ldr	r3, [sp, #0]
   10a6c:	6028      	str	r0, [r5, #0]
   10a6e:	2200      	movs	r2, #0
   10a70:	701a      	strb	r2, [r3, #0]
   10a72:	9804      	ldr	r0, [sp, #16]
   10a74:	b01b      	add	sp, #108	; 0x6c
   10a76:	bd30      	pop	{r4, r5, pc}
   10a78:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   10a7c:	9100      	str	r1, [sp, #0]
   10a7e:	9104      	str	r1, [sp, #16]
   10a80:	f8ad 300c 	strh.w	r3, [sp, #12]
   10a84:	4621      	mov	r1, r4
   10a86:	dae4      	bge.n	10a52 <_vasnprintf_r+0x1e>
   10a88:	238b      	movs	r3, #139	; 0x8b
   10a8a:	6003      	str	r3, [r0, #0]
   10a8c:	2000      	movs	r0, #0
   10a8e:	b01b      	add	sp, #108	; 0x6c
   10a90:	bd30      	pop	{r4, r5, pc}
   10a92:	2000      	movs	r0, #0
   10a94:	e7ee      	b.n	10a74 <_vasnprintf_r+0x40>
   10a96:	bf00      	nop

00010a98 <memcmp>:
   10a98:	2a03      	cmp	r2, #3
   10a9a:	b570      	push	{r4, r5, r6, lr}
   10a9c:	d914      	bls.n	10ac8 <memcmp+0x30>
   10a9e:	ea40 0301 	orr.w	r3, r0, r1
   10aa2:	079b      	lsls	r3, r3, #30
   10aa4:	d122      	bne.n	10aec <memcmp+0x54>
   10aa6:	4604      	mov	r4, r0
   10aa8:	460b      	mov	r3, r1
   10aaa:	4619      	mov	r1, r3
   10aac:	4620      	mov	r0, r4
   10aae:	680e      	ldr	r6, [r1, #0]
   10ab0:	6805      	ldr	r5, [r0, #0]
   10ab2:	42b5      	cmp	r5, r6
   10ab4:	f104 0404 	add.w	r4, r4, #4
   10ab8:	f103 0304 	add.w	r3, r3, #4
   10abc:	d116      	bne.n	10aec <memcmp+0x54>
   10abe:	3a04      	subs	r2, #4
   10ac0:	2a03      	cmp	r2, #3
   10ac2:	4620      	mov	r0, r4
   10ac4:	4619      	mov	r1, r3
   10ac6:	d8f0      	bhi.n	10aaa <memcmp+0x12>
   10ac8:	1e54      	subs	r4, r2, #1
   10aca:	b19a      	cbz	r2, 10af4 <memcmp+0x5c>
   10acc:	1e42      	subs	r2, r0, #1
   10ace:	3901      	subs	r1, #1
   10ad0:	e001      	b.n	10ad6 <memcmp+0x3e>
   10ad2:	18c3      	adds	r3, r0, r3
   10ad4:	d00c      	beq.n	10af0 <memcmp+0x58>
   10ad6:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   10ada:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ade:	45e6      	cmp	lr, ip
   10ae0:	eba4 0302 	sub.w	r3, r4, r2
   10ae4:	d0f5      	beq.n	10ad2 <memcmp+0x3a>
   10ae6:	ebae 000c 	sub.w	r0, lr, ip
   10aea:	bd70      	pop	{r4, r5, r6, pc}
   10aec:	1e54      	subs	r4, r2, #1
   10aee:	e7ed      	b.n	10acc <memcmp+0x34>
   10af0:	4618      	mov	r0, r3
   10af2:	bd70      	pop	{r4, r5, r6, pc}
   10af4:	4610      	mov	r0, r2
   10af6:	bd70      	pop	{r4, r5, r6, pc}

00010af8 <memmove>:
   10af8:	4288      	cmp	r0, r1
   10afa:	d90d      	bls.n	10b18 <memmove+0x20>
   10afc:	188b      	adds	r3, r1, r2
   10afe:	4283      	cmp	r3, r0
   10b00:	d90a      	bls.n	10b18 <memmove+0x20>
   10b02:	eb00 0c02 	add.w	ip, r0, r2
   10b06:	b1ba      	cbz	r2, 10b38 <memmove+0x40>
   10b08:	4662      	mov	r2, ip
   10b0a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   10b0e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   10b12:	4299      	cmp	r1, r3
   10b14:	d1f9      	bne.n	10b0a <memmove+0x12>
   10b16:	4770      	bx	lr
   10b18:	2a0f      	cmp	r2, #15
   10b1a:	d80e      	bhi.n	10b3a <memmove+0x42>
   10b1c:	4603      	mov	r3, r0
   10b1e:	f102 3cff 	add.w	ip, r2, #4294967295
   10b22:	b14a      	cbz	r2, 10b38 <memmove+0x40>
   10b24:	f10c 0c01 	add.w	ip, ip, #1
   10b28:	3b01      	subs	r3, #1
   10b2a:	448c      	add	ip, r1
   10b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
   10b30:	f803 2f01 	strb.w	r2, [r3, #1]!
   10b34:	4561      	cmp	r1, ip
   10b36:	d1f9      	bne.n	10b2c <memmove+0x34>
   10b38:	4770      	bx	lr
   10b3a:	ea40 0301 	orr.w	r3, r0, r1
   10b3e:	079b      	lsls	r3, r3, #30
   10b40:	d150      	bne.n	10be4 <memmove+0xec>
   10b42:	f1a2 0310 	sub.w	r3, r2, #16
   10b46:	b570      	push	{r4, r5, r6, lr}
   10b48:	f101 0c20 	add.w	ip, r1, #32
   10b4c:	f023 050f 	bic.w	r5, r3, #15
   10b50:	f101 0e10 	add.w	lr, r1, #16
   10b54:	f100 0410 	add.w	r4, r0, #16
   10b58:	44ac      	add	ip, r5
   10b5a:	091b      	lsrs	r3, r3, #4
   10b5c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   10b60:	f844 5c10 	str.w	r5, [r4, #-16]
   10b64:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   10b68:	f844 5c0c 	str.w	r5, [r4, #-12]
   10b6c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   10b70:	f844 5c08 	str.w	r5, [r4, #-8]
   10b74:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   10b78:	f844 5c04 	str.w	r5, [r4, #-4]
   10b7c:	f10e 0e10 	add.w	lr, lr, #16
   10b80:	45e6      	cmp	lr, ip
   10b82:	f104 0410 	add.w	r4, r4, #16
   10b86:	d1e9      	bne.n	10b5c <memmove+0x64>
   10b88:	3301      	adds	r3, #1
   10b8a:	f012 0f0c 	tst.w	r2, #12
   10b8e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   10b92:	f002 040f 	and.w	r4, r2, #15
   10b96:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   10b9a:	d027      	beq.n	10bec <memmove+0xf4>
   10b9c:	3c04      	subs	r4, #4
   10b9e:	f024 0603 	bic.w	r6, r4, #3
   10ba2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   10ba6:	441e      	add	r6, r3
   10ba8:	1f1c      	subs	r4, r3, #4
   10baa:	468e      	mov	lr, r1
   10bac:	f85e 5b04 	ldr.w	r5, [lr], #4
   10bb0:	f844 5f04 	str.w	r5, [r4, #4]!
   10bb4:	42b4      	cmp	r4, r6
   10bb6:	d1f9      	bne.n	10bac <memmove+0xb4>
   10bb8:	f10c 0401 	add.w	r4, ip, #1
   10bbc:	f002 0203 	and.w	r2, r2, #3
   10bc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   10bc8:	f102 3cff 	add.w	ip, r2, #4294967295
   10bcc:	b14a      	cbz	r2, 10be2 <memmove+0xea>
   10bce:	f10c 0c01 	add.w	ip, ip, #1
   10bd2:	3b01      	subs	r3, #1
   10bd4:	448c      	add	ip, r1
   10bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   10bda:	f803 2f01 	strb.w	r2, [r3, #1]!
   10bde:	4561      	cmp	r1, ip
   10be0:	d1f9      	bne.n	10bd6 <memmove+0xde>
   10be2:	bd70      	pop	{r4, r5, r6, pc}
   10be4:	f102 3cff 	add.w	ip, r2, #4294967295
   10be8:	4603      	mov	r3, r0
   10bea:	e79b      	b.n	10b24 <memmove+0x2c>
   10bec:	4622      	mov	r2, r4
   10bee:	e7eb      	b.n	10bc8 <memmove+0xd0>

00010bf0 <memset>:
   10bf0:	0783      	lsls	r3, r0, #30
   10bf2:	b530      	push	{r4, r5, lr}
   10bf4:	d048      	beq.n	10c88 <memset+0x98>
   10bf6:	1e54      	subs	r4, r2, #1
   10bf8:	2a00      	cmp	r2, #0
   10bfa:	d03f      	beq.n	10c7c <memset+0x8c>
   10bfc:	b2ca      	uxtb	r2, r1
   10bfe:	4603      	mov	r3, r0
   10c00:	e001      	b.n	10c06 <memset+0x16>
   10c02:	3c01      	subs	r4, #1
   10c04:	d33a      	bcc.n	10c7c <memset+0x8c>
   10c06:	f803 2b01 	strb.w	r2, [r3], #1
   10c0a:	079d      	lsls	r5, r3, #30
   10c0c:	d1f9      	bne.n	10c02 <memset+0x12>
   10c0e:	2c03      	cmp	r4, #3
   10c10:	d92d      	bls.n	10c6e <memset+0x7e>
   10c12:	b2cd      	uxtb	r5, r1
   10c14:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   10c18:	2c0f      	cmp	r4, #15
   10c1a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   10c1e:	d936      	bls.n	10c8e <memset+0x9e>
   10c20:	f1a4 0210 	sub.w	r2, r4, #16
   10c24:	f022 0c0f 	bic.w	ip, r2, #15
   10c28:	f103 0e20 	add.w	lr, r3, #32
   10c2c:	44e6      	add	lr, ip
   10c2e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   10c32:	f103 0210 	add.w	r2, r3, #16
   10c36:	e942 5504 	strd	r5, r5, [r2, #-16]
   10c3a:	e942 5502 	strd	r5, r5, [r2, #-8]
   10c3e:	3210      	adds	r2, #16
   10c40:	4572      	cmp	r2, lr
   10c42:	d1f8      	bne.n	10c36 <memset+0x46>
   10c44:	f10c 0201 	add.w	r2, ip, #1
   10c48:	f014 0f0c 	tst.w	r4, #12
   10c4c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   10c50:	f004 0c0f 	and.w	ip, r4, #15
   10c54:	d013      	beq.n	10c7e <memset+0x8e>
   10c56:	f1ac 0304 	sub.w	r3, ip, #4
   10c5a:	f023 0303 	bic.w	r3, r3, #3
   10c5e:	3304      	adds	r3, #4
   10c60:	4413      	add	r3, r2
   10c62:	f842 5b04 	str.w	r5, [r2], #4
   10c66:	4293      	cmp	r3, r2
   10c68:	d1fb      	bne.n	10c62 <memset+0x72>
   10c6a:	f00c 0403 	and.w	r4, ip, #3
   10c6e:	b12c      	cbz	r4, 10c7c <memset+0x8c>
   10c70:	b2c9      	uxtb	r1, r1
   10c72:	441c      	add	r4, r3
   10c74:	f803 1b01 	strb.w	r1, [r3], #1
   10c78:	429c      	cmp	r4, r3
   10c7a:	d1fb      	bne.n	10c74 <memset+0x84>
   10c7c:	bd30      	pop	{r4, r5, pc}
   10c7e:	4664      	mov	r4, ip
   10c80:	4613      	mov	r3, r2
   10c82:	2c00      	cmp	r4, #0
   10c84:	d1f4      	bne.n	10c70 <memset+0x80>
   10c86:	e7f9      	b.n	10c7c <memset+0x8c>
   10c88:	4603      	mov	r3, r0
   10c8a:	4614      	mov	r4, r2
   10c8c:	e7bf      	b.n	10c0e <memset+0x1e>
   10c8e:	461a      	mov	r2, r3
   10c90:	46a4      	mov	ip, r4
   10c92:	e7e0      	b.n	10c56 <memset+0x66>

00010c94 <strlcat>:
   10c94:	b570      	push	{r4, r5, r6, lr}
   10c96:	b34a      	cbz	r2, 10cec <strlcat+0x58>
   10c98:	4603      	mov	r3, r0
   10c9a:	1815      	adds	r5, r2, r0
   10c9c:	e002      	b.n	10ca4 <strlcat+0x10>
   10c9e:	429d      	cmp	r5, r3
   10ca0:	469c      	mov	ip, r3
   10ca2:	d005      	beq.n	10cb0 <strlcat+0x1c>
   10ca4:	469c      	mov	ip, r3
   10ca6:	3301      	adds	r3, #1
   10ca8:	f89c 4000 	ldrb.w	r4, [ip]
   10cac:	2c00      	cmp	r4, #0
   10cae:	d1f6      	bne.n	10c9e <strlcat+0xa>
   10cb0:	ebac 0600 	sub.w	r6, ip, r0
   10cb4:	1b92      	subs	r2, r2, r6
   10cb6:	1e55      	subs	r5, r2, #1
   10cb8:	b1ca      	cbz	r2, 10cee <strlcat+0x5a>
   10cba:	780c      	ldrb	r4, [r1, #0]
   10cbc:	460b      	mov	r3, r1
   10cbe:	b93c      	cbnz	r4, 10cd0 <strlcat+0x3c>
   10cc0:	e00f      	b.n	10ce2 <strlcat+0x4e>
   10cc2:	f802 4b01 	strb.w	r4, [r2], #1
   10cc6:	3d01      	subs	r5, #1
   10cc8:	4694      	mov	ip, r2
   10cca:	785c      	ldrb	r4, [r3, #1]
   10ccc:	3301      	adds	r3, #1
   10cce:	b134      	cbz	r4, 10cde <strlcat+0x4a>
   10cd0:	4662      	mov	r2, ip
   10cd2:	2d00      	cmp	r5, #0
   10cd4:	d1f5      	bne.n	10cc2 <strlcat+0x2e>
   10cd6:	785a      	ldrb	r2, [r3, #1]
   10cd8:	3301      	adds	r3, #1
   10cda:	2a00      	cmp	r2, #0
   10cdc:	d1f5      	bne.n	10cca <strlcat+0x36>
   10cde:	1a5b      	subs	r3, r3, r1
   10ce0:	441e      	add	r6, r3
   10ce2:	2300      	movs	r3, #0
   10ce4:	f88c 3000 	strb.w	r3, [ip]
   10ce8:	4630      	mov	r0, r6
   10cea:	bd70      	pop	{r4, r5, r6, pc}
   10cec:	4616      	mov	r6, r2
   10cee:	4608      	mov	r0, r1
   10cf0:	f000 fb66 	bl	113c0 <strlen>
   10cf4:	4406      	add	r6, r0
   10cf6:	4630      	mov	r0, r6
   10cf8:	bd70      	pop	{r4, r5, r6, pc}
   10cfa:	bf00      	nop

00010cfc <strlcpy>:
   10cfc:	b1c2      	cbz	r2, 10d30 <strlcpy+0x34>
   10cfe:	eb00 0c02 	add.w	ip, r0, r2
   10d02:	b500      	push	{lr}
   10d04:	460b      	mov	r3, r1
   10d06:	f10c 3eff 	add.w	lr, ip, #4294967295
   10d0a:	e004      	b.n	10d16 <strlcpy+0x1a>
   10d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   10d10:	f800 2b01 	strb.w	r2, [r0], #1
   10d14:	b142      	cbz	r2, 10d28 <strlcpy+0x2c>
   10d16:	4586      	cmp	lr, r0
   10d18:	d1f8      	bne.n	10d0c <strlcpy+0x10>
   10d1a:	2200      	movs	r2, #0
   10d1c:	f80c 2c01 	strb.w	r2, [ip, #-1]
   10d20:	f813 2b01 	ldrb.w	r2, [r3], #1
   10d24:	2a00      	cmp	r2, #0
   10d26:	d1fb      	bne.n	10d20 <strlcpy+0x24>
   10d28:	1a59      	subs	r1, r3, r1
   10d2a:	1e48      	subs	r0, r1, #1
   10d2c:	f85d fb04 	ldr.w	pc, [sp], #4
   10d30:	460b      	mov	r3, r1
   10d32:	f813 2b01 	ldrb.w	r2, [r3], #1
   10d36:	2a00      	cmp	r2, #0
   10d38:	d1fb      	bne.n	10d32 <strlcpy+0x36>
   10d3a:	1a59      	subs	r1, r3, r1
   10d3c:	1e48      	subs	r0, r1, #1
   10d3e:	4770      	bx	lr

00010d40 <strncmp>:
   10d40:	2a00      	cmp	r2, #0
   10d42:	d03e      	beq.n	10dc2 <strncmp+0x82>
   10d44:	ea40 0301 	orr.w	r3, r0, r1
   10d48:	079b      	lsls	r3, r3, #30
   10d4a:	b530      	push	{r4, r5, lr}
   10d4c:	4684      	mov	ip, r0
   10d4e:	d12f      	bne.n	10db0 <strncmp+0x70>
   10d50:	2a03      	cmp	r2, #3
   10d52:	d92d      	bls.n	10db0 <strncmp+0x70>
   10d54:	460b      	mov	r3, r1
   10d56:	e008      	b.n	10d6a <strncmp+0x2a>
   10d58:	3a04      	subs	r2, #4
   10d5a:	4684      	mov	ip, r0
   10d5c:	4619      	mov	r1, r3
   10d5e:	d025      	beq.n	10dac <strncmp+0x6c>
   10d60:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   10d64:	d122      	bne.n	10dac <strncmp+0x6c>
   10d66:	2a03      	cmp	r2, #3
   10d68:	d922      	bls.n	10db0 <strncmp+0x70>
   10d6a:	6804      	ldr	r4, [r0, #0]
   10d6c:	4619      	mov	r1, r3
   10d6e:	f853 5b04 	ldr.w	r5, [r3], #4
   10d72:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   10d76:	42ac      	cmp	r4, r5
   10d78:	4684      	mov	ip, r0
   10d7a:	ea2e 0e04 	bic.w	lr, lr, r4
   10d7e:	f100 0004 	add.w	r0, r0, #4
   10d82:	d0e9      	beq.n	10d58 <strncmp+0x18>
   10d84:	f89c 0000 	ldrb.w	r0, [ip]
   10d88:	780c      	ldrb	r4, [r1, #0]
   10d8a:	42a0      	cmp	r0, r4
   10d8c:	d11b      	bne.n	10dc6 <strncmp+0x86>
   10d8e:	46e6      	mov	lr, ip
   10d90:	b168      	cbz	r0, 10dae <strncmp+0x6e>
   10d92:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   10d96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   10d9a:	eba2 030e 	sub.w	r3, r2, lr
   10d9e:	42a0      	cmp	r0, r4
   10da0:	f103 33ff 	add.w	r3, r3, #4294967295
   10da4:	d10f      	bne.n	10dc6 <strncmp+0x86>
   10da6:	eb1c 0303 	adds.w	r3, ip, r3
   10daa:	d1f1      	bne.n	10d90 <strncmp+0x50>
   10dac:	2000      	movs	r0, #0
   10dae:	bd30      	pop	{r4, r5, pc}
   10db0:	f89c 0000 	ldrb.w	r0, [ip]
   10db4:	780c      	ldrb	r4, [r1, #0]
   10db6:	4284      	cmp	r4, r0
   10db8:	d105      	bne.n	10dc6 <strncmp+0x86>
   10dba:	2a01      	cmp	r2, #1
   10dbc:	d0f6      	beq.n	10dac <strncmp+0x6c>
   10dbe:	46e6      	mov	lr, ip
   10dc0:	e7e6      	b.n	10d90 <strncmp+0x50>
   10dc2:	4610      	mov	r0, r2
   10dc4:	4770      	bx	lr
   10dc6:	1b00      	subs	r0, r0, r4
   10dc8:	bd30      	pop	{r4, r5, pc}
   10dca:	bf00      	nop

00010dcc <strncpy>:
   10dcc:	ea40 0301 	orr.w	r3, r0, r1
   10dd0:	079b      	lsls	r3, r3, #30
   10dd2:	b530      	push	{r4, r5, lr}
   10dd4:	d101      	bne.n	10dda <strncpy+0xe>
   10dd6:	2a03      	cmp	r2, #3
   10dd8:	d80f      	bhi.n	10dfa <strncpy+0x2e>
   10dda:	4684      	mov	ip, r0
   10ddc:	f101 3eff 	add.w	lr, r1, #4294967295
   10de0:	e007      	b.n	10df2 <strncpy+0x26>
   10de2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   10de6:	f803 1b01 	strb.w	r1, [r3], #1
   10dea:	1e54      	subs	r4, r2, #1
   10dec:	b1c1      	cbz	r1, 10e20 <strncpy+0x54>
   10dee:	469c      	mov	ip, r3
   10df0:	4622      	mov	r2, r4
   10df2:	4663      	mov	r3, ip
   10df4:	2a00      	cmp	r2, #0
   10df6:	d1f4      	bne.n	10de2 <strncpy+0x16>
   10df8:	bd30      	pop	{r4, r5, pc}
   10dfa:	460b      	mov	r3, r1
   10dfc:	4684      	mov	ip, r0
   10dfe:	4619      	mov	r1, r3
   10e00:	f853 5b04 	ldr.w	r5, [r3], #4
   10e04:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   10e08:	ea24 0405 	bic.w	r4, r4, r5
   10e0c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   10e10:	d1e4      	bne.n	10ddc <strncpy+0x10>
   10e12:	3a04      	subs	r2, #4
   10e14:	2a03      	cmp	r2, #3
   10e16:	f84c 5b04 	str.w	r5, [ip], #4
   10e1a:	4619      	mov	r1, r3
   10e1c:	d8ef      	bhi.n	10dfe <strncpy+0x32>
   10e1e:	e7dd      	b.n	10ddc <strncpy+0x10>
   10e20:	4494      	add	ip, r2
   10e22:	2c00      	cmp	r4, #0
   10e24:	d0e8      	beq.n	10df8 <strncpy+0x2c>
   10e26:	f803 1b01 	strb.w	r1, [r3], #1
   10e2a:	4563      	cmp	r3, ip
   10e2c:	d1fb      	bne.n	10e26 <strncpy+0x5a>
   10e2e:	bd30      	pop	{r4, r5, pc}

00010e30 <__locale_mb_cur_max>:
   10e30:	4b01      	ldr	r3, [pc, #4]	; (10e38 <__locale_mb_cur_max+0x8>)
   10e32:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   10e36:	4770      	bx	lr
   10e38:	20008a74 	.word	0x20008a74

00010e3c <_close_r>:
   10e3c:	b538      	push	{r3, r4, r5, lr}
   10e3e:	4d07      	ldr	r5, [pc, #28]	; (10e5c <_close_r+0x20>)
   10e40:	2200      	movs	r2, #0
   10e42:	4604      	mov	r4, r0
   10e44:	4608      	mov	r0, r1
   10e46:	602a      	str	r2, [r5, #0]
   10e48:	f7fc f9d0 	bl	d1ec <_close>
   10e4c:	1c43      	adds	r3, r0, #1
   10e4e:	d000      	beq.n	10e52 <_close_r+0x16>
   10e50:	bd38      	pop	{r3, r4, r5, pc}
   10e52:	682b      	ldr	r3, [r5, #0]
   10e54:	2b00      	cmp	r3, #0
   10e56:	d0fb      	beq.n	10e50 <_close_r+0x14>
   10e58:	6023      	str	r3, [r4, #0]
   10e5a:	bd38      	pop	{r3, r4, r5, pc}
   10e5c:	20042ad0 	.word	0x20042ad0

00010e60 <_lseek_r>:
   10e60:	b538      	push	{r3, r4, r5, lr}
   10e62:	460c      	mov	r4, r1
   10e64:	4d08      	ldr	r5, [pc, #32]	; (10e88 <_lseek_r+0x28>)
   10e66:	4684      	mov	ip, r0
   10e68:	4611      	mov	r1, r2
   10e6a:	4620      	mov	r0, r4
   10e6c:	461a      	mov	r2, r3
   10e6e:	2300      	movs	r3, #0
   10e70:	602b      	str	r3, [r5, #0]
   10e72:	4664      	mov	r4, ip
   10e74:	f7fc f9c6 	bl	d204 <_lseek>
   10e78:	1c43      	adds	r3, r0, #1
   10e7a:	d000      	beq.n	10e7e <_lseek_r+0x1e>
   10e7c:	bd38      	pop	{r3, r4, r5, pc}
   10e7e:	682b      	ldr	r3, [r5, #0]
   10e80:	2b00      	cmp	r3, #0
   10e82:	d0fb      	beq.n	10e7c <_lseek_r+0x1c>
   10e84:	6023      	str	r3, [r4, #0]
   10e86:	bd38      	pop	{r3, r4, r5, pc}
   10e88:	20042ad0 	.word	0x20042ad0

00010e8c <_read_r>:
   10e8c:	b538      	push	{r3, r4, r5, lr}
   10e8e:	460c      	mov	r4, r1
   10e90:	4d08      	ldr	r5, [pc, #32]	; (10eb4 <_read_r+0x28>)
   10e92:	4684      	mov	ip, r0
   10e94:	4611      	mov	r1, r2
   10e96:	4620      	mov	r0, r4
   10e98:	461a      	mov	r2, r3
   10e9a:	2300      	movs	r3, #0
   10e9c:	602b      	str	r3, [r5, #0]
   10e9e:	4664      	mov	r4, ip
   10ea0:	f7fc f9a2 	bl	d1e8 <_read>
   10ea4:	1c43      	adds	r3, r0, #1
   10ea6:	d000      	beq.n	10eaa <_read_r+0x1e>
   10ea8:	bd38      	pop	{r3, r4, r5, pc}
   10eaa:	682b      	ldr	r3, [r5, #0]
   10eac:	2b00      	cmp	r3, #0
   10eae:	d0fb      	beq.n	10ea8 <_read_r+0x1c>
   10eb0:	6023      	str	r3, [r4, #0]
   10eb2:	bd38      	pop	{r3, r4, r5, pc}
   10eb4:	20042ad0 	.word	0x20042ad0

00010eb8 <_sbrk_r>:
   10eb8:	b538      	push	{r3, r4, r5, lr}
   10eba:	4d07      	ldr	r5, [pc, #28]	; (10ed8 <_sbrk_r+0x20>)
   10ebc:	2200      	movs	r2, #0
   10ebe:	4604      	mov	r4, r0
   10ec0:	4608      	mov	r0, r1
   10ec2:	602a      	str	r2, [r5, #0]
   10ec4:	f7fc f976 	bl	d1b4 <_sbrk>
   10ec8:	1c43      	adds	r3, r0, #1
   10eca:	d000      	beq.n	10ece <_sbrk_r+0x16>
   10ecc:	bd38      	pop	{r3, r4, r5, pc}
   10ece:	682b      	ldr	r3, [r5, #0]
   10ed0:	2b00      	cmp	r3, #0
   10ed2:	d0fb      	beq.n	10ecc <_sbrk_r+0x14>
   10ed4:	6023      	str	r3, [r4, #0]
   10ed6:	bd38      	pop	{r3, r4, r5, pc}
   10ed8:	20042ad0 	.word	0x20042ad0

00010edc <_write_r>:
   10edc:	b538      	push	{r3, r4, r5, lr}
   10ede:	460c      	mov	r4, r1
   10ee0:	4d08      	ldr	r5, [pc, #32]	; (10f04 <_write_r+0x28>)
   10ee2:	4684      	mov	ip, r0
   10ee4:	4611      	mov	r1, r2
   10ee6:	4620      	mov	r0, r4
   10ee8:	461a      	mov	r2, r3
   10eea:	2300      	movs	r3, #0
   10eec:	602b      	str	r3, [r5, #0]
   10eee:	4664      	mov	r4, ip
   10ef0:	f7fb fa14 	bl	c31c <_write>
   10ef4:	1c43      	adds	r3, r0, #1
   10ef6:	d000      	beq.n	10efa <_write_r+0x1e>
   10ef8:	bd38      	pop	{r3, r4, r5, pc}
   10efa:	682b      	ldr	r3, [r5, #0]
   10efc:	2b00      	cmp	r3, #0
   10efe:	d0fb      	beq.n	10ef8 <_write_r+0x1c>
   10f00:	6023      	str	r3, [r4, #0]
   10f02:	bd38      	pop	{r3, r4, r5, pc}
   10f04:	20042ad0 	.word	0x20042ad0

00010f08 <__errno>:
   10f08:	4b01      	ldr	r3, [pc, #4]	; (10f10 <__errno+0x8>)
   10f0a:	6818      	ldr	r0, [r3, #0]
   10f0c:	4770      	bx	lr
   10f0e:	bf00      	nop
   10f10:	20008ffc 	.word	0x20008ffc

00010f14 <__libc_init_array>:
   10f14:	b570      	push	{r4, r5, r6, lr}
   10f16:	4e0d      	ldr	r6, [pc, #52]	; (10f4c <__libc_init_array+0x38>)
   10f18:	4d0d      	ldr	r5, [pc, #52]	; (10f50 <__libc_init_array+0x3c>)
   10f1a:	1b76      	subs	r6, r6, r5
   10f1c:	10b6      	asrs	r6, r6, #2
   10f1e:	d006      	beq.n	10f2e <__libc_init_array+0x1a>
   10f20:	2400      	movs	r4, #0
   10f22:	f855 3b04 	ldr.w	r3, [r5], #4
   10f26:	3401      	adds	r4, #1
   10f28:	4798      	blx	r3
   10f2a:	42a6      	cmp	r6, r4
   10f2c:	d1f9      	bne.n	10f22 <__libc_init_array+0xe>
   10f2e:	4e09      	ldr	r6, [pc, #36]	; (10f54 <__libc_init_array+0x40>)
   10f30:	4d09      	ldr	r5, [pc, #36]	; (10f58 <__libc_init_array+0x44>)
   10f32:	1b76      	subs	r6, r6, r5
   10f34:	f008 fc80 	bl	19838 <___init_veneer>
   10f38:	10b6      	asrs	r6, r6, #2
   10f3a:	d006      	beq.n	10f4a <__libc_init_array+0x36>
   10f3c:	2400      	movs	r4, #0
   10f3e:	f855 3b04 	ldr.w	r3, [r5], #4
   10f42:	3401      	adds	r4, #1
   10f44:	4798      	blx	r3
   10f46:	42a6      	cmp	r6, r4
   10f48:	d1f9      	bne.n	10f3e <__libc_init_array+0x2a>
   10f4a:	bd70      	pop	{r4, r5, r6, pc}
   10f4c:	600026a0 	.word	0x600026a0
   10f50:	600026a0 	.word	0x600026a0
   10f54:	600026b0 	.word	0x600026b0
   10f58:	600026a0 	.word	0x600026a0

00010f5c <__retarget_lock_init_recursive>:
   10f5c:	4770      	bx	lr
   10f5e:	bf00      	nop

00010f60 <__retarget_lock_close_recursive>:
   10f60:	4770      	bx	lr
   10f62:	bf00      	nop

00010f64 <__retarget_lock_acquire_recursive>:
   10f64:	4770      	bx	lr
   10f66:	bf00      	nop

00010f68 <__retarget_lock_release_recursive>:
   10f68:	4770      	bx	lr
   10f6a:	bf00      	nop
	...
   10f80:	eba2 0003 	sub.w	r0, r2, r3
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop

00010f88 <strcmp>:
   10f88:	7802      	ldrb	r2, [r0, #0]
   10f8a:	780b      	ldrb	r3, [r1, #0]
   10f8c:	2a01      	cmp	r2, #1
   10f8e:	bf28      	it	cs
   10f90:	429a      	cmpcs	r2, r3
   10f92:	d1f5      	bne.n	10f80 <__retarget_lock_release_recursive+0x18>
   10f94:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   10f98:	ea40 0401 	orr.w	r4, r0, r1
   10f9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   10fa0:	f06f 0c00 	mvn.w	ip, #0
   10fa4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   10fa8:	b312      	cbz	r2, 10ff0 <strcmp+0x68>
   10faa:	ea80 0401 	eor.w	r4, r0, r1
   10fae:	f014 0f07 	tst.w	r4, #7
   10fb2:	d16a      	bne.n	1108a <strcmp+0x102>
   10fb4:	f000 0407 	and.w	r4, r0, #7
   10fb8:	f020 0007 	bic.w	r0, r0, #7
   10fbc:	f004 0503 	and.w	r5, r4, #3
   10fc0:	f021 0107 	bic.w	r1, r1, #7
   10fc4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   10fc8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   10fcc:	f014 0f04 	tst.w	r4, #4
   10fd0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   10fd4:	fa0c f405 	lsl.w	r4, ip, r5
   10fd8:	ea62 0204 	orn	r2, r2, r4
   10fdc:	ea66 0604 	orn	r6, r6, r4
   10fe0:	d00a      	beq.n	10ff8 <strcmp+0x70>
   10fe2:	ea63 0304 	orn	r3, r3, r4
   10fe6:	4662      	mov	r2, ip
   10fe8:	ea67 0704 	orn	r7, r7, r4
   10fec:	4666      	mov	r6, ip
   10fee:	e003      	b.n	10ff8 <strcmp+0x70>
   10ff0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   10ff4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   10ff8:	fa82 f54c 	uadd8	r5, r2, ip
   10ffc:	ea82 0406 	eor.w	r4, r2, r6
   11000:	faa4 f48c 	sel	r4, r4, ip
   11004:	bb6c      	cbnz	r4, 11062 <strcmp+0xda>
   11006:	fa83 f54c 	uadd8	r5, r3, ip
   1100a:	ea83 0507 	eor.w	r5, r3, r7
   1100e:	faa5 f58c 	sel	r5, r5, ip
   11012:	b995      	cbnz	r5, 1103a <strcmp+0xb2>
   11014:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   11018:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1101c:	fa82 f54c 	uadd8	r5, r2, ip
   11020:	ea82 0406 	eor.w	r4, r2, r6
   11024:	faa4 f48c 	sel	r4, r4, ip
   11028:	fa83 f54c 	uadd8	r5, r3, ip
   1102c:	ea83 0507 	eor.w	r5, r3, r7
   11030:	faa5 f58c 	sel	r5, r5, ip
   11034:	4325      	orrs	r5, r4
   11036:	d0db      	beq.n	10ff0 <strcmp+0x68>
   11038:	b99c      	cbnz	r4, 11062 <strcmp+0xda>
   1103a:	ba2d      	rev	r5, r5
   1103c:	fab5 f485 	clz	r4, r5
   11040:	f024 0407 	bic.w	r4, r4, #7
   11044:	fa27 f104 	lsr.w	r1, r7, r4
   11048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1104c:	fa23 f304 	lsr.w	r3, r3, r4
   11050:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   11054:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11058:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1105c:	eba0 0001 	sub.w	r0, r0, r1
   11060:	4770      	bx	lr
   11062:	ba24      	rev	r4, r4
   11064:	fab4 f484 	clz	r4, r4
   11068:	f024 0407 	bic.w	r4, r4, #7
   1106c:	fa26 f104 	lsr.w	r1, r6, r4
   11070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   11074:	fa22 f204 	lsr.w	r2, r2, r4
   11078:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1107c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11080:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11084:	eba0 0001 	sub.w	r0, r0, r1
   11088:	4770      	bx	lr
   1108a:	f014 0f03 	tst.w	r4, #3
   1108e:	d13c      	bne.n	1110a <strcmp+0x182>
   11090:	f010 0403 	ands.w	r4, r0, #3
   11094:	d128      	bne.n	110e8 <strcmp+0x160>
   11096:	f850 2b08 	ldr.w	r2, [r0], #8
   1109a:	f851 3b08 	ldr.w	r3, [r1], #8
   1109e:	fa82 f54c 	uadd8	r5, r2, ip
   110a2:	ea82 0503 	eor.w	r5, r2, r3
   110a6:	faa5 f58c 	sel	r5, r5, ip
   110aa:	b95d      	cbnz	r5, 110c4 <strcmp+0x13c>
   110ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
   110b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   110b4:	fa82 f54c 	uadd8	r5, r2, ip
   110b8:	ea82 0503 	eor.w	r5, r2, r3
   110bc:	faa5 f58c 	sel	r5, r5, ip
   110c0:	2d00      	cmp	r5, #0
   110c2:	d0e8      	beq.n	11096 <strcmp+0x10e>
   110c4:	ba2d      	rev	r5, r5
   110c6:	fab5 f485 	clz	r4, r5
   110ca:	f024 0407 	bic.w	r4, r4, #7
   110ce:	fa23 f104 	lsr.w	r1, r3, r4
   110d2:	fa22 f204 	lsr.w	r2, r2, r4
   110d6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   110da:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   110de:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   110e2:	eba0 0001 	sub.w	r0, r0, r1
   110e6:	4770      	bx	lr
   110e8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   110ec:	f020 0003 	bic.w	r0, r0, #3
   110f0:	f850 2b08 	ldr.w	r2, [r0], #8
   110f4:	f021 0103 	bic.w	r1, r1, #3
   110f8:	f851 3b08 	ldr.w	r3, [r1], #8
   110fc:	fa0c f404 	lsl.w	r4, ip, r4
   11100:	ea62 0204 	orn	r2, r2, r4
   11104:	ea63 0304 	orn	r3, r3, r4
   11108:	e7c9      	b.n	1109e <strcmp+0x116>
   1110a:	f010 0403 	ands.w	r4, r0, #3
   1110e:	d01a      	beq.n	11146 <strcmp+0x1be>
   11110:	eba1 0104 	sub.w	r1, r1, r4
   11114:	f020 0003 	bic.w	r0, r0, #3
   11118:	07e4      	lsls	r4, r4, #31
   1111a:	f850 2b04 	ldr.w	r2, [r0], #4
   1111e:	d006      	beq.n	1112e <strcmp+0x1a6>
   11120:	d20f      	bcs.n	11142 <strcmp+0x1ba>
   11122:	788b      	ldrb	r3, [r1, #2]
   11124:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   11128:	1ae4      	subs	r4, r4, r3
   1112a:	d106      	bne.n	1113a <strcmp+0x1b2>
   1112c:	b12b      	cbz	r3, 1113a <strcmp+0x1b2>
   1112e:	78cb      	ldrb	r3, [r1, #3]
   11130:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   11134:	1ae4      	subs	r4, r4, r3
   11136:	d100      	bne.n	1113a <strcmp+0x1b2>
   11138:	b91b      	cbnz	r3, 11142 <strcmp+0x1ba>
   1113a:	4620      	mov	r0, r4
   1113c:	f85d 4b10 	ldr.w	r4, [sp], #16
   11140:	4770      	bx	lr
   11142:	f101 0104 	add.w	r1, r1, #4
   11146:	f850 2b04 	ldr.w	r2, [r0], #4
   1114a:	07cc      	lsls	r4, r1, #31
   1114c:	f021 0103 	bic.w	r1, r1, #3
   11150:	f851 3b04 	ldr.w	r3, [r1], #4
   11154:	d848      	bhi.n	111e8 <strcmp+0x260>
   11156:	d224      	bcs.n	111a2 <strcmp+0x21a>
   11158:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1115c:	fa82 f54c 	uadd8	r5, r2, ip
   11160:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   11164:	faa5 f58c 	sel	r5, r5, ip
   11168:	d10a      	bne.n	11180 <strcmp+0x1f8>
   1116a:	b965      	cbnz	r5, 11186 <strcmp+0x1fe>
   1116c:	f851 3b04 	ldr.w	r3, [r1], #4
   11170:	ea84 0402 	eor.w	r4, r4, r2
   11174:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   11178:	d10e      	bne.n	11198 <strcmp+0x210>
   1117a:	f850 2b04 	ldr.w	r2, [r0], #4
   1117e:	e7eb      	b.n	11158 <strcmp+0x1d0>
   11180:	ea4f 2313 	mov.w	r3, r3, lsr #8
   11184:	e055      	b.n	11232 <strcmp+0x2aa>
   11186:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   1118a:	d14d      	bne.n	11228 <strcmp+0x2a0>
   1118c:	7808      	ldrb	r0, [r1, #0]
   1118e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11192:	f1c0 0000 	rsb	r0, r0, #0
   11196:	4770      	bx	lr
   11198:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1119c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   111a0:	e047      	b.n	11232 <strcmp+0x2aa>
   111a2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   111a6:	fa82 f54c 	uadd8	r5, r2, ip
   111aa:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   111ae:	faa5 f58c 	sel	r5, r5, ip
   111b2:	d10a      	bne.n	111ca <strcmp+0x242>
   111b4:	b965      	cbnz	r5, 111d0 <strcmp+0x248>
   111b6:	f851 3b04 	ldr.w	r3, [r1], #4
   111ba:	ea84 0402 	eor.w	r4, r4, r2
   111be:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   111c2:	d10c      	bne.n	111de <strcmp+0x256>
   111c4:	f850 2b04 	ldr.w	r2, [r0], #4
   111c8:	e7eb      	b.n	111a2 <strcmp+0x21a>
   111ca:	ea4f 4313 	mov.w	r3, r3, lsr #16
   111ce:	e030      	b.n	11232 <strcmp+0x2aa>
   111d0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   111d4:	d128      	bne.n	11228 <strcmp+0x2a0>
   111d6:	880b      	ldrh	r3, [r1, #0]
   111d8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   111dc:	e029      	b.n	11232 <strcmp+0x2aa>
   111de:	ea4f 4212 	mov.w	r2, r2, lsr #16
   111e2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   111e6:	e024      	b.n	11232 <strcmp+0x2aa>
   111e8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   111ec:	fa82 f54c 	uadd8	r5, r2, ip
   111f0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   111f4:	faa5 f58c 	sel	r5, r5, ip
   111f8:	d10a      	bne.n	11210 <strcmp+0x288>
   111fa:	b965      	cbnz	r5, 11216 <strcmp+0x28e>
   111fc:	f851 3b04 	ldr.w	r3, [r1], #4
   11200:	ea84 0402 	eor.w	r4, r4, r2
   11204:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   11208:	d109      	bne.n	1121e <strcmp+0x296>
   1120a:	f850 2b04 	ldr.w	r2, [r0], #4
   1120e:	e7eb      	b.n	111e8 <strcmp+0x260>
   11210:	ea4f 6313 	mov.w	r3, r3, lsr #24
   11214:	e00d      	b.n	11232 <strcmp+0x2aa>
   11216:	f015 0fff 	tst.w	r5, #255	; 0xff
   1121a:	d105      	bne.n	11228 <strcmp+0x2a0>
   1121c:	680b      	ldr	r3, [r1, #0]
   1121e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   11222:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   11226:	e004      	b.n	11232 <strcmp+0x2aa>
   11228:	f04f 0000 	mov.w	r0, #0
   1122c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11230:	4770      	bx	lr
   11232:	ba12      	rev	r2, r2
   11234:	ba1b      	rev	r3, r3
   11236:	fa82 f44c 	uadd8	r4, r2, ip
   1123a:	ea82 0403 	eor.w	r4, r2, r3
   1123e:	faa4 f58c 	sel	r5, r4, ip
   11242:	fab5 f485 	clz	r4, r5
   11246:	fa02 f204 	lsl.w	r2, r2, r4
   1124a:	fa03 f304 	lsl.w	r3, r3, r4
   1124e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   11252:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11256:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   1125a:	4770      	bx	lr

0001125c <strcpy>:
   1125c:	ea80 0201 	eor.w	r2, r0, r1
   11260:	4684      	mov	ip, r0
   11262:	f012 0f03 	tst.w	r2, #3
   11266:	d14f      	bne.n	11308 <strcpy+0xac>
   11268:	f011 0f03 	tst.w	r1, #3
   1126c:	d132      	bne.n	112d4 <strcpy+0x78>
   1126e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   11272:	f011 0f04 	tst.w	r1, #4
   11276:	f851 3b04 	ldr.w	r3, [r1], #4
   1127a:	d00b      	beq.n	11294 <strcpy+0x38>
   1127c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11280:	439a      	bics	r2, r3
   11282:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11286:	bf04      	itt	eq
   11288:	f84c 3b04 	streq.w	r3, [ip], #4
   1128c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11290:	d116      	bne.n	112c0 <strcpy+0x64>
   11292:	bf00      	nop
   11294:	f851 4b04 	ldr.w	r4, [r1], #4
   11298:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   1129c:	439a      	bics	r2, r3
   1129e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   112a2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   112a6:	d10b      	bne.n	112c0 <strcpy+0x64>
   112a8:	f84c 3b04 	str.w	r3, [ip], #4
   112ac:	43a2      	bics	r2, r4
   112ae:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   112b2:	bf04      	itt	eq
   112b4:	f851 3b04 	ldreq.w	r3, [r1], #4
   112b8:	f84c 4b04 	streq.w	r4, [ip], #4
   112bc:	d0ea      	beq.n	11294 <strcpy+0x38>
   112be:	4623      	mov	r3, r4
   112c0:	f80c 3b01 	strb.w	r3, [ip], #1
   112c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   112c8:	ea4f 2333 	mov.w	r3, r3, ror #8
   112cc:	d1f8      	bne.n	112c0 <strcpy+0x64>
   112ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   112d2:	4770      	bx	lr
   112d4:	f011 0f01 	tst.w	r1, #1
   112d8:	d006      	beq.n	112e8 <strcpy+0x8c>
   112da:	f811 2b01 	ldrb.w	r2, [r1], #1
   112de:	f80c 2b01 	strb.w	r2, [ip], #1
   112e2:	2a00      	cmp	r2, #0
   112e4:	bf08      	it	eq
   112e6:	4770      	bxeq	lr
   112e8:	f011 0f02 	tst.w	r1, #2
   112ec:	d0bf      	beq.n	1126e <strcpy+0x12>
   112ee:	f831 2b02 	ldrh.w	r2, [r1], #2
   112f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   112f6:	bf16      	itet	ne
   112f8:	f82c 2b02 	strhne.w	r2, [ip], #2
   112fc:	f88c 2000 	strbeq.w	r2, [ip]
   11300:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   11304:	d1b3      	bne.n	1126e <strcpy+0x12>
   11306:	4770      	bx	lr
   11308:	f811 2b01 	ldrb.w	r2, [r1], #1
   1130c:	f80c 2b01 	strb.w	r2, [ip], #1
   11310:	2a00      	cmp	r2, #0
   11312:	d1f9      	bne.n	11308 <strcpy+0xac>
   11314:	4770      	bx	lr
   11316:	bf00      	nop
	...

00011320 <memchr>:
   11320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11324:	2a10      	cmp	r2, #16
   11326:	db2b      	blt.n	11380 <memchr+0x60>
   11328:	f010 0f07 	tst.w	r0, #7
   1132c:	d008      	beq.n	11340 <memchr+0x20>
   1132e:	f810 3b01 	ldrb.w	r3, [r0], #1
   11332:	3a01      	subs	r2, #1
   11334:	428b      	cmp	r3, r1
   11336:	d02d      	beq.n	11394 <memchr+0x74>
   11338:	f010 0f07 	tst.w	r0, #7
   1133c:	b342      	cbz	r2, 11390 <memchr+0x70>
   1133e:	d1f6      	bne.n	1132e <memchr+0xe>
   11340:	b4f0      	push	{r4, r5, r6, r7}
   11342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1134a:	f022 0407 	bic.w	r4, r2, #7
   1134e:	f07f 0700 	mvns.w	r7, #0
   11352:	2300      	movs	r3, #0
   11354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11358:	3c08      	subs	r4, #8
   1135a:	ea85 0501 	eor.w	r5, r5, r1
   1135e:	ea86 0601 	eor.w	r6, r6, r1
   11362:	fa85 f547 	uadd8	r5, r5, r7
   11366:	faa3 f587 	sel	r5, r3, r7
   1136a:	fa86 f647 	uadd8	r6, r6, r7
   1136e:	faa5 f687 	sel	r6, r5, r7
   11372:	b98e      	cbnz	r6, 11398 <memchr+0x78>
   11374:	d1ee      	bne.n	11354 <memchr+0x34>
   11376:	bcf0      	pop	{r4, r5, r6, r7}
   11378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1137c:	f002 0207 	and.w	r2, r2, #7
   11380:	b132      	cbz	r2, 11390 <memchr+0x70>
   11382:	f810 3b01 	ldrb.w	r3, [r0], #1
   11386:	3a01      	subs	r2, #1
   11388:	ea83 0301 	eor.w	r3, r3, r1
   1138c:	b113      	cbz	r3, 11394 <memchr+0x74>
   1138e:	d1f8      	bne.n	11382 <memchr+0x62>
   11390:	2000      	movs	r0, #0
   11392:	4770      	bx	lr
   11394:	3801      	subs	r0, #1
   11396:	4770      	bx	lr
   11398:	2d00      	cmp	r5, #0
   1139a:	bf06      	itte	eq
   1139c:	4635      	moveq	r5, r6
   1139e:	3803      	subeq	r0, #3
   113a0:	3807      	subne	r0, #7
   113a2:	f015 0f01 	tst.w	r5, #1
   113a6:	d107      	bne.n	113b8 <memchr+0x98>
   113a8:	3001      	adds	r0, #1
   113aa:	f415 7f80 	tst.w	r5, #256	; 0x100
   113ae:	bf02      	ittt	eq
   113b0:	3001      	addeq	r0, #1
   113b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   113b6:	3001      	addeq	r0, #1
   113b8:	bcf0      	pop	{r4, r5, r6, r7}
   113ba:	3801      	subs	r0, #1
   113bc:	4770      	bx	lr
   113be:	bf00      	nop

000113c0 <strlen>:
   113c0:	f890 f000 	pld	[r0]
   113c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   113c8:	f020 0107 	bic.w	r1, r0, #7
   113cc:	f06f 0c00 	mvn.w	ip, #0
   113d0:	f010 0407 	ands.w	r4, r0, #7
   113d4:	f891 f020 	pld	[r1, #32]
   113d8:	f040 8049 	bne.w	1146e <strlen+0xae>
   113dc:	f04f 0400 	mov.w	r4, #0
   113e0:	f06f 0007 	mvn.w	r0, #7
   113e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   113e8:	f891 f040 	pld	[r1, #64]	; 0x40
   113ec:	f100 0008 	add.w	r0, r0, #8
   113f0:	fa82 f24c 	uadd8	r2, r2, ip
   113f4:	faa4 f28c 	sel	r2, r4, ip
   113f8:	fa83 f34c 	uadd8	r3, r3, ip
   113fc:	faa2 f38c 	sel	r3, r2, ip
   11400:	bb4b      	cbnz	r3, 11456 <strlen+0x96>
   11402:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   11406:	fa82 f24c 	uadd8	r2, r2, ip
   1140a:	f100 0008 	add.w	r0, r0, #8
   1140e:	faa4 f28c 	sel	r2, r4, ip
   11412:	fa83 f34c 	uadd8	r3, r3, ip
   11416:	faa2 f38c 	sel	r3, r2, ip
   1141a:	b9e3      	cbnz	r3, 11456 <strlen+0x96>
   1141c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   11420:	fa82 f24c 	uadd8	r2, r2, ip
   11424:	f100 0008 	add.w	r0, r0, #8
   11428:	faa4 f28c 	sel	r2, r4, ip
   1142c:	fa83 f34c 	uadd8	r3, r3, ip
   11430:	faa2 f38c 	sel	r3, r2, ip
   11434:	b97b      	cbnz	r3, 11456 <strlen+0x96>
   11436:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   1143a:	f101 0120 	add.w	r1, r1, #32
   1143e:	fa82 f24c 	uadd8	r2, r2, ip
   11442:	f100 0008 	add.w	r0, r0, #8
   11446:	faa4 f28c 	sel	r2, r4, ip
   1144a:	fa83 f34c 	uadd8	r3, r3, ip
   1144e:	faa2 f38c 	sel	r3, r2, ip
   11452:	2b00      	cmp	r3, #0
   11454:	d0c6      	beq.n	113e4 <strlen+0x24>
   11456:	2a00      	cmp	r2, #0
   11458:	bf04      	itt	eq
   1145a:	3004      	addeq	r0, #4
   1145c:	461a      	moveq	r2, r3
   1145e:	ba12      	rev	r2, r2
   11460:	fab2 f282 	clz	r2, r2
   11464:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   11468:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1146c:	4770      	bx	lr
   1146e:	e9d1 2300 	ldrd	r2, r3, [r1]
   11472:	f004 0503 	and.w	r5, r4, #3
   11476:	f1c4 0000 	rsb	r0, r4, #0
   1147a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1147e:	f014 0f04 	tst.w	r4, #4
   11482:	f891 f040 	pld	[r1, #64]	; 0x40
   11486:	fa0c f505 	lsl.w	r5, ip, r5
   1148a:	ea62 0205 	orn	r2, r2, r5
   1148e:	bf1c      	itt	ne
   11490:	ea63 0305 	ornne	r3, r3, r5
   11494:	4662      	movne	r2, ip
   11496:	f04f 0400 	mov.w	r4, #0
   1149a:	e7a9      	b.n	113f0 <strlen+0x30>
   1149c:	0000      	movs	r0, r0
	...

000114a0 <nan>:
   114a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 114a8 <nan+0x8>
   114a4:	4770      	bx	lr
   114a6:	bf00      	nop
   114a8:	00000000 	.word	0x00000000
   114ac:	7ff80000 	.word	0x7ff80000

000114b0 <nanf>:
   114b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 114b8 <nanf+0x8>
   114b4:	4770      	bx	lr
   114b6:	bf00      	nop
   114b8:	7fc00000 	.word	0x7fc00000

000114bc <__register_exitproc>:
   114bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   114c0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 11540 <__register_exitproc+0x84>
   114c4:	4606      	mov	r6, r0
   114c6:	f8da 0000 	ldr.w	r0, [sl]
   114ca:	4698      	mov	r8, r3
   114cc:	460f      	mov	r7, r1
   114ce:	4691      	mov	r9, r2
   114d0:	f7ff fd48 	bl	10f64 <__retarget_lock_acquire_recursive>
   114d4:	4b18      	ldr	r3, [pc, #96]	; (11538 <__register_exitproc+0x7c>)
   114d6:	681c      	ldr	r4, [r3, #0]
   114d8:	b324      	cbz	r4, 11524 <__register_exitproc+0x68>
   114da:	6865      	ldr	r5, [r4, #4]
   114dc:	2d1f      	cmp	r5, #31
   114de:	dc24      	bgt.n	1152a <__register_exitproc+0x6e>
   114e0:	b95e      	cbnz	r6, 114fa <__register_exitproc+0x3e>
   114e2:	1c6b      	adds	r3, r5, #1
   114e4:	3502      	adds	r5, #2
   114e6:	f8da 0000 	ldr.w	r0, [sl]
   114ea:	6063      	str	r3, [r4, #4]
   114ec:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   114f0:	f7ff fd3a 	bl	10f68 <__retarget_lock_release_recursive>
   114f4:	2000      	movs	r0, #0
   114f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   114fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   114fe:	2301      	movs	r3, #1
   11500:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   11504:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   11508:	40ab      	lsls	r3, r5
   1150a:	431a      	orrs	r2, r3
   1150c:	2e02      	cmp	r6, #2
   1150e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   11512:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   11516:	d1e4      	bne.n	114e2 <__register_exitproc+0x26>
   11518:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1151c:	431a      	orrs	r2, r3
   1151e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   11522:	e7de      	b.n	114e2 <__register_exitproc+0x26>
   11524:	4c05      	ldr	r4, [pc, #20]	; (1153c <__register_exitproc+0x80>)
   11526:	601c      	str	r4, [r3, #0]
   11528:	e7d7      	b.n	114da <__register_exitproc+0x1e>
   1152a:	f8da 0000 	ldr.w	r0, [sl]
   1152e:	f7ff fd1b 	bl	10f68 <__retarget_lock_release_recursive>
   11532:	f04f 30ff 	mov.w	r0, #4294967295
   11536:	e7de      	b.n	114f6 <__register_exitproc+0x3a>
   11538:	200423ac 	.word	0x200423ac
   1153c:	200423b0 	.word	0x200423b0
   11540:	20008a68 	.word	0x20008a68

00011544 <_malloc_trim_r>:
   11544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11546:	4f24      	ldr	r7, [pc, #144]	; (115d8 <_malloc_trim_r+0x94>)
   11548:	460c      	mov	r4, r1
   1154a:	4606      	mov	r6, r0
   1154c:	f7fd fe90 	bl	f270 <__malloc_lock>
   11550:	68bb      	ldr	r3, [r7, #8]
   11552:	685d      	ldr	r5, [r3, #4]
   11554:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   11558:	310f      	adds	r1, #15
   1155a:	f025 0503 	bic.w	r5, r5, #3
   1155e:	194b      	adds	r3, r1, r5
   11560:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   11564:	f023 030f 	bic.w	r3, r3, #15
   11568:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   1156c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   11570:	db07      	blt.n	11582 <_malloc_trim_r+0x3e>
   11572:	2100      	movs	r1, #0
   11574:	4630      	mov	r0, r6
   11576:	f7ff fc9f 	bl	10eb8 <_sbrk_r>
   1157a:	68bb      	ldr	r3, [r7, #8]
   1157c:	442b      	add	r3, r5
   1157e:	4298      	cmp	r0, r3
   11580:	d004      	beq.n	1158c <_malloc_trim_r+0x48>
   11582:	4630      	mov	r0, r6
   11584:	f7fd fe7a 	bl	f27c <__malloc_unlock>
   11588:	2000      	movs	r0, #0
   1158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1158c:	4261      	negs	r1, r4
   1158e:	4630      	mov	r0, r6
   11590:	f7ff fc92 	bl	10eb8 <_sbrk_r>
   11594:	3001      	adds	r0, #1
   11596:	d00d      	beq.n	115b4 <_malloc_trim_r+0x70>
   11598:	4a10      	ldr	r2, [pc, #64]	; (115dc <_malloc_trim_r+0x98>)
   1159a:	68bb      	ldr	r3, [r7, #8]
   1159c:	1b2d      	subs	r5, r5, r4
   1159e:	f045 0501 	orr.w	r5, r5, #1
   115a2:	605d      	str	r5, [r3, #4]
   115a4:	6813      	ldr	r3, [r2, #0]
   115a6:	4630      	mov	r0, r6
   115a8:	1b1b      	subs	r3, r3, r4
   115aa:	6013      	str	r3, [r2, #0]
   115ac:	f7fd fe66 	bl	f27c <__malloc_unlock>
   115b0:	2001      	movs	r0, #1
   115b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115b4:	2100      	movs	r1, #0
   115b6:	4630      	mov	r0, r6
   115b8:	f7ff fc7e 	bl	10eb8 <_sbrk_r>
   115bc:	68ba      	ldr	r2, [r7, #8]
   115be:	1a83      	subs	r3, r0, r2
   115c0:	2b0f      	cmp	r3, #15
   115c2:	ddde      	ble.n	11582 <_malloc_trim_r+0x3e>
   115c4:	f043 0301 	orr.w	r3, r3, #1
   115c8:	6053      	str	r3, [r2, #4]
   115ca:	4b05      	ldr	r3, [pc, #20]	; (115e0 <_malloc_trim_r+0x9c>)
   115cc:	4903      	ldr	r1, [pc, #12]	; (115dc <_malloc_trim_r+0x98>)
   115ce:	681b      	ldr	r3, [r3, #0]
   115d0:	1ac0      	subs	r0, r0, r3
   115d2:	6008      	str	r0, [r1, #0]
   115d4:	e7d5      	b.n	11582 <_malloc_trim_r+0x3e>
   115d6:	bf00      	nop
   115d8:	20008be0 	.word	0x20008be0
   115dc:	2004254c 	.word	0x2004254c
   115e0:	20008fe8 	.word	0x20008fe8

000115e4 <_free_r>:
   115e4:	2900      	cmp	r1, #0
   115e6:	d061      	beq.n	116ac <_free_r+0xc8>
   115e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115ea:	460c      	mov	r4, r1
   115ec:	4606      	mov	r6, r0
   115ee:	f7fd fe3f 	bl	f270 <__malloc_lock>
   115f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   115f6:	4f7b      	ldr	r7, [pc, #492]	; (117e4 <_free_r+0x200>)
   115f8:	f1a4 0508 	sub.w	r5, r4, #8
   115fc:	f022 0101 	bic.w	r1, r2, #1
   11600:	eb05 0c01 	add.w	ip, r5, r1
   11604:	68b8      	ldr	r0, [r7, #8]
   11606:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1160a:	4560      	cmp	r0, ip
   1160c:	f023 0303 	bic.w	r3, r3, #3
   11610:	f000 808b 	beq.w	1172a <_free_r+0x146>
   11614:	07d2      	lsls	r2, r2, #31
   11616:	f8cc 3004 	str.w	r3, [ip, #4]
   1161a:	d432      	bmi.n	11682 <_free_r+0x9e>
   1161c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   11620:	1aad      	subs	r5, r5, r2
   11622:	4411      	add	r1, r2
   11624:	68aa      	ldr	r2, [r5, #8]
   11626:	f107 0008 	add.w	r0, r7, #8
   1162a:	4282      	cmp	r2, r0
   1162c:	d06a      	beq.n	11704 <_free_r+0x120>
   1162e:	eb0c 0403 	add.w	r4, ip, r3
   11632:	f8d4 e004 	ldr.w	lr, [r4, #4]
   11636:	68ec      	ldr	r4, [r5, #12]
   11638:	60d4      	str	r4, [r2, #12]
   1163a:	f01e 0f01 	tst.w	lr, #1
   1163e:	60a2      	str	r2, [r4, #8]
   11640:	f000 8097 	beq.w	11772 <_free_r+0x18e>
   11644:	f041 0301 	orr.w	r3, r1, #1
   11648:	606b      	str	r3, [r5, #4]
   1164a:	f8cc 1000 	str.w	r1, [ip]
   1164e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   11652:	d235      	bcs.n	116c0 <_free_r+0xdc>
   11654:	6878      	ldr	r0, [r7, #4]
   11656:	08cb      	lsrs	r3, r1, #3
   11658:	2201      	movs	r2, #1
   1165a:	0949      	lsrs	r1, r1, #5
   1165c:	3301      	adds	r3, #1
   1165e:	408a      	lsls	r2, r1
   11660:	4302      	orrs	r2, r0
   11662:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   11666:	607a      	str	r2, [r7, #4]
   11668:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1166c:	3a08      	subs	r2, #8
   1166e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   11672:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   11676:	60cd      	str	r5, [r1, #12]
   11678:	4630      	mov	r0, r6
   1167a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1167e:	f7fd bdfd 	b.w	f27c <__malloc_unlock>
   11682:	eb0c 0203 	add.w	r2, ip, r3
   11686:	6852      	ldr	r2, [r2, #4]
   11688:	07d0      	lsls	r0, r2, #31
   1168a:	d410      	bmi.n	116ae <_free_r+0xca>
   1168c:	4419      	add	r1, r3
   1168e:	f107 0008 	add.w	r0, r7, #8
   11692:	f8dc 3008 	ldr.w	r3, [ip, #8]
   11696:	4283      	cmp	r3, r0
   11698:	d073      	beq.n	11782 <_free_r+0x19e>
   1169a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1169e:	60da      	str	r2, [r3, #12]
   116a0:	6093      	str	r3, [r2, #8]
   116a2:	f041 0301 	orr.w	r3, r1, #1
   116a6:	606b      	str	r3, [r5, #4]
   116a8:	5069      	str	r1, [r5, r1]
   116aa:	e7d0      	b.n	1164e <_free_r+0x6a>
   116ac:	4770      	bx	lr
   116ae:	f041 0301 	orr.w	r3, r1, #1
   116b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   116b6:	f844 3c04 	str.w	r3, [r4, #-4]
   116ba:	f8cc 1000 	str.w	r1, [ip]
   116be:	d3c9      	bcc.n	11654 <_free_r+0x70>
   116c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   116c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   116c8:	d248      	bcs.n	1175c <_free_r+0x178>
   116ca:	098b      	lsrs	r3, r1, #6
   116cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
   116d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   116d4:	00c3      	lsls	r3, r0, #3
   116d6:	18f8      	adds	r0, r7, r3
   116d8:	58fb      	ldr	r3, [r7, r3]
   116da:	3808      	subs	r0, #8
   116dc:	4298      	cmp	r0, r3
   116de:	d059      	beq.n	11794 <_free_r+0x1b0>
   116e0:	685a      	ldr	r2, [r3, #4]
   116e2:	f022 0203 	bic.w	r2, r2, #3
   116e6:	428a      	cmp	r2, r1
   116e8:	d902      	bls.n	116f0 <_free_r+0x10c>
   116ea:	689b      	ldr	r3, [r3, #8]
   116ec:	4298      	cmp	r0, r3
   116ee:	d1f7      	bne.n	116e0 <_free_r+0xfc>
   116f0:	68d8      	ldr	r0, [r3, #12]
   116f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
   116f6:	6085      	str	r5, [r0, #8]
   116f8:	60dd      	str	r5, [r3, #12]
   116fa:	4630      	mov	r0, r6
   116fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11700:	f7fd bdbc 	b.w	f27c <__malloc_unlock>
   11704:	eb0c 0203 	add.w	r2, ip, r3
   11708:	6852      	ldr	r2, [r2, #4]
   1170a:	07d2      	lsls	r2, r2, #31
   1170c:	d463      	bmi.n	117d6 <_free_r+0x1f2>
   1170e:	440b      	add	r3, r1
   11710:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   11714:	60ca      	str	r2, [r1, #12]
   11716:	6091      	str	r1, [r2, #8]
   11718:	f043 0201 	orr.w	r2, r3, #1
   1171c:	606a      	str	r2, [r5, #4]
   1171e:	4630      	mov	r0, r6
   11720:	50eb      	str	r3, [r5, r3]
   11722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11726:	f7fd bda9 	b.w	f27c <__malloc_unlock>
   1172a:	440b      	add	r3, r1
   1172c:	07d1      	lsls	r1, r2, #31
   1172e:	d407      	bmi.n	11740 <_free_r+0x15c>
   11730:	f854 2c08 	ldr.w	r2, [r4, #-8]
   11734:	1aad      	subs	r5, r5, r2
   11736:	4413      	add	r3, r2
   11738:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   1173c:	60ca      	str	r2, [r1, #12]
   1173e:	6091      	str	r1, [r2, #8]
   11740:	f043 0201 	orr.w	r2, r3, #1
   11744:	606a      	str	r2, [r5, #4]
   11746:	4a28      	ldr	r2, [pc, #160]	; (117e8 <_free_r+0x204>)
   11748:	60bd      	str	r5, [r7, #8]
   1174a:	6812      	ldr	r2, [r2, #0]
   1174c:	429a      	cmp	r2, r3
   1174e:	d893      	bhi.n	11678 <_free_r+0x94>
   11750:	4b26      	ldr	r3, [pc, #152]	; (117ec <_free_r+0x208>)
   11752:	4630      	mov	r0, r6
   11754:	6819      	ldr	r1, [r3, #0]
   11756:	f7ff fef5 	bl	11544 <_malloc_trim_r>
   1175a:	e78d      	b.n	11678 <_free_r+0x94>
   1175c:	2b14      	cmp	r3, #20
   1175e:	d90a      	bls.n	11776 <_free_r+0x192>
   11760:	2b54      	cmp	r3, #84	; 0x54
   11762:	d81f      	bhi.n	117a4 <_free_r+0x1c0>
   11764:	0b0b      	lsrs	r3, r1, #12
   11766:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   1176a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   1176e:	00c3      	lsls	r3, r0, #3
   11770:	e7b1      	b.n	116d6 <_free_r+0xf2>
   11772:	4419      	add	r1, r3
   11774:	e78d      	b.n	11692 <_free_r+0xae>
   11776:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1177a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   1177e:	00c3      	lsls	r3, r0, #3
   11780:	e7a9      	b.n	116d6 <_free_r+0xf2>
   11782:	f041 0301 	orr.w	r3, r1, #1
   11786:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1178a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1178e:	606b      	str	r3, [r5, #4]
   11790:	5069      	str	r1, [r5, r1]
   11792:	e771      	b.n	11678 <_free_r+0x94>
   11794:	6879      	ldr	r1, [r7, #4]
   11796:	1092      	asrs	r2, r2, #2
   11798:	2401      	movs	r4, #1
   1179a:	fa04 f202 	lsl.w	r2, r4, r2
   1179e:	430a      	orrs	r2, r1
   117a0:	607a      	str	r2, [r7, #4]
   117a2:	e7a6      	b.n	116f2 <_free_r+0x10e>
   117a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   117a8:	d806      	bhi.n	117b8 <_free_r+0x1d4>
   117aa:	0bcb      	lsrs	r3, r1, #15
   117ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
   117b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   117b4:	00c3      	lsls	r3, r0, #3
   117b6:	e78e      	b.n	116d6 <_free_r+0xf2>
   117b8:	f240 5254 	movw	r2, #1364	; 0x554
   117bc:	4293      	cmp	r3, r2
   117be:	d806      	bhi.n	117ce <_free_r+0x1ea>
   117c0:	0c8b      	lsrs	r3, r1, #18
   117c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   117c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   117ca:	00c3      	lsls	r3, r0, #3
   117cc:	e783      	b.n	116d6 <_free_r+0xf2>
   117ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   117d2:	227e      	movs	r2, #126	; 0x7e
   117d4:	e77f      	b.n	116d6 <_free_r+0xf2>
   117d6:	f041 0301 	orr.w	r3, r1, #1
   117da:	606b      	str	r3, [r5, #4]
   117dc:	f8cc 1000 	str.w	r1, [ip]
   117e0:	e74a      	b.n	11678 <_free_r+0x94>
   117e2:	bf00      	nop
   117e4:	20008be0 	.word	0x20008be0
   117e8:	20008fec 	.word	0x20008fec
   117ec:	2004257c 	.word	0x2004257c

000117f0 <rshift>:
   117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   117f4:	6904      	ldr	r4, [r0, #16]
   117f6:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   117fa:	dd2f      	ble.n	1185c <rshift+0x6c>
   117fc:	f100 0e14 	add.w	lr, r0, #20
   11800:	114e      	asrs	r6, r1, #5
   11802:	f011 0c1f 	ands.w	ip, r1, #31
   11806:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1180a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1180e:	d02b      	beq.n	11868 <rshift+0x78>
   11810:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   11814:	3304      	adds	r3, #4
   11816:	429d      	cmp	r5, r3
   11818:	fa21 f10c 	lsr.w	r1, r1, ip
   1181c:	f1cc 0820 	rsb	r8, ip, #32
   11820:	d918      	bls.n	11854 <rshift+0x64>
   11822:	4677      	mov	r7, lr
   11824:	681a      	ldr	r2, [r3, #0]
   11826:	fa02 f208 	lsl.w	r2, r2, r8
   1182a:	430a      	orrs	r2, r1
   1182c:	f847 2b04 	str.w	r2, [r7], #4
   11830:	f853 1b04 	ldr.w	r1, [r3], #4
   11834:	429d      	cmp	r5, r3
   11836:	fa21 f10c 	lsr.w	r1, r1, ip
   1183a:	d8f3      	bhi.n	11824 <rshift+0x34>
   1183c:	1ba3      	subs	r3, r4, r6
   1183e:	009b      	lsls	r3, r3, #2
   11840:	3b05      	subs	r3, #5
   11842:	089b      	lsrs	r3, r3, #2
   11844:	3301      	adds	r3, #1
   11846:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1184a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1184e:	b1c9      	cbz	r1, 11884 <rshift+0x94>
   11850:	3404      	adds	r4, #4
   11852:	e017      	b.n	11884 <rshift+0x94>
   11854:	6141      	str	r1, [r0, #20]
   11856:	4674      	mov	r4, lr
   11858:	2900      	cmp	r1, #0
   1185a:	d1f9      	bne.n	11850 <rshift+0x60>
   1185c:	2300      	movs	r3, #0
   1185e:	6103      	str	r3, [r0, #16]
   11860:	2300      	movs	r3, #0
   11862:	6143      	str	r3, [r0, #20]
   11864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11868:	429d      	cmp	r5, r3
   1186a:	bf88      	it	hi
   1186c:	f100 0210 	addhi.w	r2, r0, #16
   11870:	d9f4      	bls.n	1185c <rshift+0x6c>
   11872:	f853 1b04 	ldr.w	r1, [r3], #4
   11876:	f842 1f04 	str.w	r1, [r2, #4]!
   1187a:	429d      	cmp	r5, r3
   1187c:	d8f9      	bhi.n	11872 <rshift+0x82>
   1187e:	1ba4      	subs	r4, r4, r6
   11880:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   11884:	eba4 030e 	sub.w	r3, r4, lr
   11888:	109b      	asrs	r3, r3, #2
   1188a:	4574      	cmp	r4, lr
   1188c:	6103      	str	r3, [r0, #16]
   1188e:	d0e7      	beq.n	11860 <rshift+0x70>
   11890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011894 <__gethex>:
   11894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11898:	ed2d 8b02 	vpush	{d8}
   1189c:	680c      	ldr	r4, [r1, #0]
   1189e:	468b      	mov	fp, r1
   118a0:	78a1      	ldrb	r1, [r4, #2]
   118a2:	b085      	sub	sp, #20
   118a4:	2930      	cmp	r1, #48	; 0x30
   118a6:	ee08 0a10 	vmov	s16, r0
   118aa:	4692      	mov	sl, r2
   118ac:	9302      	str	r3, [sp, #8]
   118ae:	f040 81ce 	bne.w	11c4e <__gethex+0x3ba>
   118b2:	f06f 0001 	mvn.w	r0, #1
   118b6:	1b00      	subs	r0, r0, r4
   118b8:	1ce2      	adds	r2, r4, #3
   118ba:	1883      	adds	r3, r0, r2
   118bc:	4614      	mov	r4, r2
   118be:	f812 1b01 	ldrb.w	r1, [r2], #1
   118c2:	2930      	cmp	r1, #48	; 0x30
   118c4:	d0f9      	beq.n	118ba <__gethex+0x26>
   118c6:	f8df 8300 	ldr.w	r8, [pc, #768]	; 11bc8 <__gethex+0x334>
   118ca:	f818 2001 	ldrb.w	r2, [r8, r1]
   118ce:	2a00      	cmp	r2, #0
   118d0:	f000 80e5 	beq.w	11a9e <__gethex+0x20a>
   118d4:	7822      	ldrb	r2, [r4, #0]
   118d6:	2700      	movs	r7, #0
   118d8:	f818 2002 	ldrb.w	r2, [r8, r2]
   118dc:	463d      	mov	r5, r7
   118de:	4626      	mov	r6, r4
   118e0:	b12a      	cbz	r2, 118ee <__gethex+0x5a>
   118e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   118e6:	f818 2002 	ldrb.w	r2, [r8, r2]
   118ea:	2a00      	cmp	r2, #0
   118ec:	d1f9      	bne.n	118e2 <__gethex+0x4e>
   118ee:	49b5      	ldr	r1, [pc, #724]	; (11bc4 <__gethex+0x330>)
   118f0:	9301      	str	r3, [sp, #4]
   118f2:	2201      	movs	r2, #1
   118f4:	4630      	mov	r0, r6
   118f6:	f7ff fa23 	bl	10d40 <strncmp>
   118fa:	9b01      	ldr	r3, [sp, #4]
   118fc:	4681      	mov	r9, r0
   118fe:	2800      	cmp	r0, #0
   11900:	d04d      	beq.n	1199e <__gethex+0x10a>
   11902:	2d00      	cmp	r5, #0
   11904:	d14e      	bne.n	119a4 <__gethex+0x110>
   11906:	7832      	ldrb	r2, [r6, #0]
   11908:	46a9      	mov	r9, r5
   1190a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1190e:	2a50      	cmp	r2, #80	; 0x50
   11910:	4635      	mov	r5, r6
   11912:	d050      	beq.n	119b6 <__gethex+0x122>
   11914:	f8cb 6000 	str.w	r6, [fp]
   11918:	2f00      	cmp	r7, #0
   1191a:	d169      	bne.n	119f0 <__gethex+0x15c>
   1191c:	1b2b      	subs	r3, r5, r4
   1191e:	3b01      	subs	r3, #1
   11920:	2b07      	cmp	r3, #7
   11922:	4639      	mov	r1, r7
   11924:	dd04      	ble.n	11930 <__gethex+0x9c>
   11926:	105b      	asrs	r3, r3, #1
   11928:	2b07      	cmp	r3, #7
   1192a:	f101 0101 	add.w	r1, r1, #1
   1192e:	dcfa      	bgt.n	11926 <__gethex+0x92>
   11930:	ee18 0a10 	vmov	r0, s16
   11934:	f000 fb82 	bl	1203c <_Balloc>
   11938:	4683      	mov	fp, r0
   1193a:	2800      	cmp	r0, #0
   1193c:	f000 8266 	beq.w	11e0c <__gethex+0x578>
   11940:	f100 0614 	add.w	r6, r0, #20
   11944:	42ac      	cmp	r4, r5
   11946:	9601      	str	r6, [sp, #4]
   11948:	f080 81d2 	bcs.w	11cf0 <__gethex+0x45c>
   1194c:	2700      	movs	r7, #0
   1194e:	f8cd 900c 	str.w	r9, [sp, #12]
   11952:	499c      	ldr	r1, [pc, #624]	; (11bc4 <__gethex+0x330>)
   11954:	46a1      	mov	r9, r4
   11956:	463c      	mov	r4, r7
   11958:	e00c      	b.n	11974 <__gethex+0xe0>
   1195a:	2f20      	cmp	r7, #32
   1195c:	d019      	beq.n	11992 <__gethex+0xfe>
   1195e:	4638      	mov	r0, r7
   11960:	3704      	adds	r7, #4
   11962:	782a      	ldrb	r2, [r5, #0]
   11964:	f818 2002 	ldrb.w	r2, [r8, r2]
   11968:	f002 020f 	and.w	r2, r2, #15
   1196c:	4082      	lsls	r2, r0
   1196e:	4314      	orrs	r4, r2
   11970:	454d      	cmp	r5, r9
   11972:	d047      	beq.n	11a04 <__gethex+0x170>
   11974:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   11978:	2a2e      	cmp	r2, #46	; 0x2e
   1197a:	d1ee      	bne.n	1195a <__gethex+0xc6>
   1197c:	454d      	cmp	r5, r9
   1197e:	d3ec      	bcc.n	1195a <__gethex+0xc6>
   11980:	2201      	movs	r2, #1
   11982:	4628      	mov	r0, r5
   11984:	f7ff f9dc 	bl	10d40 <strncmp>
   11988:	498e      	ldr	r1, [pc, #568]	; (11bc4 <__gethex+0x330>)
   1198a:	2800      	cmp	r0, #0
   1198c:	d0f0      	beq.n	11970 <__gethex+0xdc>
   1198e:	2f20      	cmp	r7, #32
   11990:	d1e5      	bne.n	1195e <__gethex+0xca>
   11992:	2000      	movs	r0, #0
   11994:	f846 4b04 	str.w	r4, [r6], #4
   11998:	2704      	movs	r7, #4
   1199a:	4604      	mov	r4, r0
   1199c:	e7e1      	b.n	11962 <__gethex+0xce>
   1199e:	2d00      	cmp	r5, #0
   119a0:	f000 8142 	beq.w	11c28 <__gethex+0x394>
   119a4:	7832      	ldrb	r2, [r6, #0]
   119a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   119aa:	1bad      	subs	r5, r5, r6
   119ac:	2a50      	cmp	r2, #80	; 0x50
   119ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
   119b2:	4635      	mov	r5, r6
   119b4:	d1ae      	bne.n	11914 <__gethex+0x80>
   119b6:	786a      	ldrb	r2, [r5, #1]
   119b8:	2a2b      	cmp	r2, #43	; 0x2b
   119ba:	f000 8125 	beq.w	11c08 <__gethex+0x374>
   119be:	2a2d      	cmp	r2, #45	; 0x2d
   119c0:	f000 80a5 	beq.w	11b0e <__gethex+0x27a>
   119c4:	1c6e      	adds	r6, r5, #1
   119c6:	2000      	movs	r0, #0
   119c8:	f818 1002 	ldrb.w	r1, [r8, r2]
   119cc:	1e4a      	subs	r2, r1, #1
   119ce:	2a18      	cmp	r2, #24
   119d0:	f200 809b 	bhi.w	11b0a <__gethex+0x276>
   119d4:	7872      	ldrb	r2, [r6, #1]
   119d6:	f818 2002 	ldrb.w	r2, [r8, r2]
   119da:	3910      	subs	r1, #16
   119dc:	3601      	adds	r6, #1
   119de:	2a00      	cmp	r2, #0
   119e0:	d15a      	bne.n	11a98 <__gethex+0x204>
   119e2:	b100      	cbz	r0, 119e6 <__gethex+0x152>
   119e4:	4249      	negs	r1, r1
   119e6:	4489      	add	r9, r1
   119e8:	f8cb 6000 	str.w	r6, [fp]
   119ec:	2f00      	cmp	r7, #0
   119ee:	d095      	beq.n	1191c <__gethex+0x88>
   119f0:	2b00      	cmp	r3, #0
   119f2:	bf14      	ite	ne
   119f4:	2500      	movne	r5, #0
   119f6:	2506      	moveq	r5, #6
   119f8:	4628      	mov	r0, r5
   119fa:	b005      	add	sp, #20
   119fc:	ecbd 8b02 	vpop	{d8}
   11a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a04:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11a08:	4623      	mov	r3, r4
   11a0a:	f846 3b04 	str.w	r3, [r6], #4
   11a0e:	4618      	mov	r0, r3
   11a10:	9b01      	ldr	r3, [sp, #4]
   11a12:	1af6      	subs	r6, r6, r3
   11a14:	10b6      	asrs	r6, r6, #2
   11a16:	f8cb 6010 	str.w	r6, [fp, #16]
   11a1a:	f000 fbe9 	bl	121f0 <__hi0bits>
   11a1e:	0176      	lsls	r6, r6, #5
   11a20:	f8da 4000 	ldr.w	r4, [sl]
   11a24:	1a30      	subs	r0, r6, r0
   11a26:	42a0      	cmp	r0, r4
   11a28:	dc75      	bgt.n	11b16 <__gethex+0x282>
   11a2a:	f2c0 80ef 	blt.w	11c0c <__gethex+0x378>
   11a2e:	2700      	movs	r7, #0
   11a30:	f8da 3008 	ldr.w	r3, [sl, #8]
   11a34:	454b      	cmp	r3, r9
   11a36:	f2c0 8151 	blt.w	11cdc <__gethex+0x448>
   11a3a:	f8da 3004 	ldr.w	r3, [sl, #4]
   11a3e:	454b      	cmp	r3, r9
   11a40:	dd4a      	ble.n	11ad8 <__gethex+0x244>
   11a42:	eba3 0909 	sub.w	r9, r3, r9
   11a46:	454c      	cmp	r4, r9
   11a48:	f300 8082 	bgt.w	11b50 <__gethex+0x2bc>
   11a4c:	f8da 200c 	ldr.w	r2, [sl, #12]
   11a50:	2a02      	cmp	r2, #2
   11a52:	f000 8165 	beq.w	11d20 <__gethex+0x48c>
   11a56:	2a03      	cmp	r2, #3
   11a58:	f000 8181 	beq.w	11d5e <__gethex+0x4ca>
   11a5c:	2a01      	cmp	r2, #1
   11a5e:	f000 816f 	beq.w	11d40 <__gethex+0x4ac>
   11a62:	ee18 0a10 	vmov	r0, s16
   11a66:	4659      	mov	r1, fp
   11a68:	f000 fb0e 	bl	12088 <_Bfree>
   11a6c:	2550      	movs	r5, #80	; 0x50
   11a6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11a70:	2300      	movs	r3, #0
   11a72:	4628      	mov	r0, r5
   11a74:	6013      	str	r3, [r2, #0]
   11a76:	b005      	add	sp, #20
   11a78:	ecbd 8b02 	vpop	{d8}
   11a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a80:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   11a84:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   11a88:	f1a2 0110 	sub.w	r1, r2, #16
   11a8c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   11a90:	f818 2002 	ldrb.w	r2, [r8, r2]
   11a94:	2a00      	cmp	r2, #0
   11a96:	d0a4      	beq.n	119e2 <__gethex+0x14e>
   11a98:	2a19      	cmp	r2, #25
   11a9a:	ddf1      	ble.n	11a80 <__gethex+0x1ec>
   11a9c:	e7a1      	b.n	119e2 <__gethex+0x14e>
   11a9e:	4949      	ldr	r1, [pc, #292]	; (11bc4 <__gethex+0x330>)
   11aa0:	9301      	str	r3, [sp, #4]
   11aa2:	2201      	movs	r2, #1
   11aa4:	4620      	mov	r0, r4
   11aa6:	f7ff f94b 	bl	10d40 <strncmp>
   11aaa:	9b01      	ldr	r3, [sp, #4]
   11aac:	2800      	cmp	r0, #0
   11aae:	d16d      	bne.n	11b8c <__gethex+0x2f8>
   11ab0:	7861      	ldrb	r1, [r4, #1]
   11ab2:	f818 2001 	ldrb.w	r2, [r8, r1]
   11ab6:	1c65      	adds	r5, r4, #1
   11ab8:	2a00      	cmp	r2, #0
   11aba:	d069      	beq.n	11b90 <__gethex+0x2fc>
   11abc:	2930      	cmp	r1, #48	; 0x30
   11abe:	462c      	mov	r4, r5
   11ac0:	d105      	bne.n	11ace <__gethex+0x23a>
   11ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   11ac6:	2b30      	cmp	r3, #48	; 0x30
   11ac8:	d0fb      	beq.n	11ac2 <__gethex+0x22e>
   11aca:	f818 2003 	ldrb.w	r2, [r8, r3]
   11ace:	fab2 f782 	clz	r7, r2
   11ad2:	097f      	lsrs	r7, r7, #5
   11ad4:	2301      	movs	r3, #1
   11ad6:	e702      	b.n	118de <__gethex+0x4a>
   11ad8:	2501      	movs	r5, #1
   11ada:	b157      	cbz	r7, 11af2 <__gethex+0x25e>
   11adc:	f8da 300c 	ldr.w	r3, [sl, #12]
   11ae0:	2b02      	cmp	r3, #2
   11ae2:	d05d      	beq.n	11ba0 <__gethex+0x30c>
   11ae4:	2b03      	cmp	r3, #3
   11ae6:	d05f      	beq.n	11ba8 <__gethex+0x314>
   11ae8:	2b01      	cmp	r3, #1
   11aea:	f000 8084 	beq.w	11bf6 <__gethex+0x362>
   11aee:	f045 0510 	orr.w	r5, r5, #16
   11af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11af4:	f8c3 b000 	str.w	fp, [r3]
   11af8:	9b02      	ldr	r3, [sp, #8]
   11afa:	4628      	mov	r0, r5
   11afc:	f8c3 9000 	str.w	r9, [r3]
   11b00:	b005      	add	sp, #20
   11b02:	ecbd 8b02 	vpop	{d8}
   11b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b0a:	462e      	mov	r6, r5
   11b0c:	e702      	b.n	11914 <__gethex+0x80>
   11b0e:	2001      	movs	r0, #1
   11b10:	78aa      	ldrb	r2, [r5, #2]
   11b12:	1cae      	adds	r6, r5, #2
   11b14:	e758      	b.n	119c8 <__gethex+0x134>
   11b16:	1b06      	subs	r6, r0, r4
   11b18:	4631      	mov	r1, r6
   11b1a:	4658      	mov	r0, fp
   11b1c:	f000 ff96 	bl	12a4c <__any_on>
   11b20:	4607      	mov	r7, r0
   11b22:	b178      	cbz	r0, 11b44 <__gethex+0x2b0>
   11b24:	1e72      	subs	r2, r6, #1
   11b26:	1153      	asrs	r3, r2, #5
   11b28:	9901      	ldr	r1, [sp, #4]
   11b2a:	2701      	movs	r7, #1
   11b2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   11b30:	f002 031f 	and.w	r3, r2, #31
   11b34:	fa07 f303 	lsl.w	r3, r7, r3
   11b38:	420b      	tst	r3, r1
   11b3a:	d003      	beq.n	11b44 <__gethex+0x2b0>
   11b3c:	42ba      	cmp	r2, r7
   11b3e:	f300 80e2 	bgt.w	11d06 <__gethex+0x472>
   11b42:	2702      	movs	r7, #2
   11b44:	4631      	mov	r1, r6
   11b46:	4658      	mov	r0, fp
   11b48:	44b1      	add	r9, r6
   11b4a:	f7ff fe51 	bl	117f0 <rshift>
   11b4e:	e76f      	b.n	11a30 <__gethex+0x19c>
   11b50:	f109 35ff 	add.w	r5, r9, #4294967295
   11b54:	2f00      	cmp	r7, #0
   11b56:	f040 80ce 	bne.w	11cf6 <__gethex+0x462>
   11b5a:	2d00      	cmp	r5, #0
   11b5c:	f040 80cd 	bne.w	11cfa <__gethex+0x466>
   11b60:	116b      	asrs	r3, r5, #5
   11b62:	9a01      	ldr	r2, [sp, #4]
   11b64:	f005 051f 	and.w	r5, r5, #31
   11b68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   11b6c:	2301      	movs	r3, #1
   11b6e:	40ab      	lsls	r3, r5
   11b70:	4213      	tst	r3, r2
   11b72:	4649      	mov	r1, r9
   11b74:	4658      	mov	r0, fp
   11b76:	bf18      	it	ne
   11b78:	f047 0702 	orrne.w	r7, r7, #2
   11b7c:	eba4 0409 	sub.w	r4, r4, r9
   11b80:	f7ff fe36 	bl	117f0 <rshift>
   11b84:	2502      	movs	r5, #2
   11b86:	f8da 9004 	ldr.w	r9, [sl, #4]
   11b8a:	e7a6      	b.n	11ada <__gethex+0x246>
   11b8c:	7821      	ldrb	r1, [r4, #0]
   11b8e:	4625      	mov	r5, r4
   11b90:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   11b94:	2950      	cmp	r1, #80	; 0x50
   11b96:	f000 80bf 	beq.w	11d18 <__gethex+0x484>
   11b9a:	f8cb 5000 	str.w	r5, [fp]
   11b9e:	e727      	b.n	119f0 <__gethex+0x15c>
   11ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11ba2:	f1c3 0301 	rsb	r3, r3, #1
   11ba6:	9311      	str	r3, [sp, #68]	; 0x44
   11ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11baa:	2b00      	cmp	r3, #0
   11bac:	d09f      	beq.n	11aee <__gethex+0x25a>
   11bae:	f8db 7010 	ldr.w	r7, [fp, #16]
   11bb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   11bb6:	00ba      	lsls	r2, r7, #2
   11bb8:	4643      	mov	r3, r8
   11bba:	9201      	str	r2, [sp, #4]
   11bbc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   11bc0:	2100      	movs	r1, #0
   11bc2:	e007      	b.n	11bd4 <__gethex+0x340>
   11bc4:	200081c4 	.word	0x200081c4
   11bc8:	20000db8 	.word	0x20000db8
   11bcc:	4298      	cmp	r0, r3
   11bce:	f843 1c04 	str.w	r1, [r3, #-4]
   11bd2:	d93f      	bls.n	11c54 <__gethex+0x3c0>
   11bd4:	461e      	mov	r6, r3
   11bd6:	f853 2b04 	ldr.w	r2, [r3], #4
   11bda:	f1b2 3fff 	cmp.w	r2, #4294967295
   11bde:	d0f5      	beq.n	11bcc <__gethex+0x338>
   11be0:	3201      	adds	r2, #1
   11be2:	2d02      	cmp	r5, #2
   11be4:	6032      	str	r2, [r6, #0]
   11be6:	f000 80bf 	beq.w	11d68 <__gethex+0x4d4>
   11bea:	f014 041f 	ands.w	r4, r4, #31
   11bee:	f040 80e7 	bne.w	11dc0 <__gethex+0x52c>
   11bf2:	2521      	movs	r5, #33	; 0x21
   11bf4:	e77d      	b.n	11af2 <__gethex+0x25e>
   11bf6:	07ba      	lsls	r2, r7, #30
   11bf8:	f57f af79 	bpl.w	11aee <__gethex+0x25a>
   11bfc:	9b01      	ldr	r3, [sp, #4]
   11bfe:	681b      	ldr	r3, [r3, #0]
   11c00:	431f      	orrs	r7, r3
   11c02:	07fb      	lsls	r3, r7, #31
   11c04:	d4d3      	bmi.n	11bae <__gethex+0x31a>
   11c06:	e772      	b.n	11aee <__gethex+0x25a>
   11c08:	2000      	movs	r0, #0
   11c0a:	e781      	b.n	11b10 <__gethex+0x27c>
   11c0c:	1a22      	subs	r2, r4, r0
   11c0e:	4659      	mov	r1, fp
   11c10:	ee18 0a10 	vmov	r0, s16
   11c14:	eba9 0902 	sub.w	r9, r9, r2
   11c18:	f000 fc76 	bl	12508 <__lshift>
   11c1c:	f100 0314 	add.w	r3, r0, #20
   11c20:	4683      	mov	fp, r0
   11c22:	9301      	str	r3, [sp, #4]
   11c24:	2700      	movs	r7, #0
   11c26:	e703      	b.n	11a30 <__gethex+0x19c>
   11c28:	7872      	ldrb	r2, [r6, #1]
   11c2a:	f818 0002 	ldrb.w	r0, [r8, r2]
   11c2e:	1c71      	adds	r1, r6, #1
   11c30:	2800      	cmp	r0, #0
   11c32:	f000 80a0 	beq.w	11d76 <__gethex+0x4e2>
   11c36:	460d      	mov	r5, r1
   11c38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11c3c:	f818 0002 	ldrb.w	r0, [r8, r2]
   11c40:	2800      	cmp	r0, #0
   11c42:	d1f8      	bne.n	11c36 <__gethex+0x3a2>
   11c44:	1b75      	subs	r5, r6, r5
   11c46:	ea4f 0985 	mov.w	r9, r5, lsl #2
   11c4a:	460e      	mov	r6, r1
   11c4c:	e65d      	b.n	1190a <__gethex+0x76>
   11c4e:	3402      	adds	r4, #2
   11c50:	2300      	movs	r3, #0
   11c52:	e638      	b.n	118c6 <__gethex+0x32>
   11c54:	f8db 3008 	ldr.w	r3, [fp, #8]
   11c58:	429f      	cmp	r7, r3
   11c5a:	f280 808e 	bge.w	11d7a <__gethex+0x4e6>
   11c5e:	463b      	mov	r3, r7
   11c60:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   11c64:	2101      	movs	r1, #1
   11c66:	3301      	adds	r3, #1
   11c68:	2d02      	cmp	r5, #2
   11c6a:	f8cb 3010 	str.w	r3, [fp, #16]
   11c6e:	6151      	str	r1, [r2, #20]
   11c70:	d07a      	beq.n	11d68 <__gethex+0x4d4>
   11c72:	429f      	cmp	r7, r3
   11c74:	dab9      	bge.n	11bea <__gethex+0x356>
   11c76:	2b00      	cmp	r3, #0
   11c78:	f340 809b 	ble.w	11db2 <__gethex+0x51e>
   11c7c:	f8db 2014 	ldr.w	r2, [fp, #20]
   11c80:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   11c84:	f10b 0018 	add.w	r0, fp, #24
   11c88:	4283      	cmp	r3, r0
   11c8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   11c8e:	f240 80b1 	bls.w	11df4 <__gethex+0x560>
   11c92:	4644      	mov	r4, r8
   11c94:	6801      	ldr	r1, [r0, #0]
   11c96:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   11c9a:	f844 2b04 	str.w	r2, [r4], #4
   11c9e:	f850 2b04 	ldr.w	r2, [r0], #4
   11ca2:	4283      	cmp	r3, r0
   11ca4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   11ca8:	d8f4      	bhi.n	11c94 <__gethex+0x400>
   11caa:	eba3 030b 	sub.w	r3, r3, fp
   11cae:	3b19      	subs	r3, #25
   11cb0:	089b      	lsrs	r3, r3, #2
   11cb2:	3301      	adds	r3, #1
   11cb4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   11cb8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   11cbc:	2a00      	cmp	r2, #0
   11cbe:	f040 809d 	bne.w	11dfc <__gethex+0x568>
   11cc2:	eba3 0208 	sub.w	r2, r3, r8
   11cc6:	1092      	asrs	r2, r2, #2
   11cc8:	4543      	cmp	r3, r8
   11cca:	f8cb 2010 	str.w	r2, [fp, #16]
   11cce:	d073      	beq.n	11db8 <__gethex+0x524>
   11cd0:	f8da 3008 	ldr.w	r3, [sl, #8]
   11cd4:	f109 0901 	add.w	r9, r9, #1
   11cd8:	454b      	cmp	r3, r9
   11cda:	da8a      	bge.n	11bf2 <__gethex+0x35e>
   11cdc:	ee18 0a10 	vmov	r0, s16
   11ce0:	4659      	mov	r1, fp
   11ce2:	f000 f9d1 	bl	12088 <_Bfree>
   11ce6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11ce8:	2300      	movs	r3, #0
   11cea:	6013      	str	r3, [r2, #0]
   11cec:	25a3      	movs	r5, #163	; 0xa3
   11cee:	e683      	b.n	119f8 <__gethex+0x164>
   11cf0:	9e01      	ldr	r6, [sp, #4]
   11cf2:	2300      	movs	r3, #0
   11cf4:	e689      	b.n	11a0a <__gethex+0x176>
   11cf6:	2701      	movs	r7, #1
   11cf8:	e732      	b.n	11b60 <__gethex+0x2cc>
   11cfa:	4629      	mov	r1, r5
   11cfc:	4658      	mov	r0, fp
   11cfe:	f000 fea5 	bl	12a4c <__any_on>
   11d02:	4607      	mov	r7, r0
   11d04:	e72c      	b.n	11b60 <__gethex+0x2cc>
   11d06:	1eb1      	subs	r1, r6, #2
   11d08:	4658      	mov	r0, fp
   11d0a:	f000 fe9f 	bl	12a4c <__any_on>
   11d0e:	2800      	cmp	r0, #0
   11d10:	f43f af17 	beq.w	11b42 <__gethex+0x2ae>
   11d14:	2703      	movs	r7, #3
   11d16:	e715      	b.n	11b44 <__gethex+0x2b0>
   11d18:	f04f 0900 	mov.w	r9, #0
   11d1c:	2701      	movs	r7, #1
   11d1e:	e64a      	b.n	119b6 <__gethex+0x122>
   11d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11d22:	2a00      	cmp	r2, #0
   11d24:	f47f ae9d 	bne.w	11a62 <__gethex+0x1ce>
   11d28:	9902      	ldr	r1, [sp, #8]
   11d2a:	600b      	str	r3, [r1, #0]
   11d2c:	9b01      	ldr	r3, [sp, #4]
   11d2e:	2201      	movs	r2, #1
   11d30:	f8cb 2010 	str.w	r2, [fp, #16]
   11d34:	601a      	str	r2, [r3, #0]
   11d36:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11d38:	2562      	movs	r5, #98	; 0x62
   11d3a:	f8c3 b000 	str.w	fp, [r3]
   11d3e:	e65b      	b.n	119f8 <__gethex+0x164>
   11d40:	454c      	cmp	r4, r9
   11d42:	f47f ae8e 	bne.w	11a62 <__gethex+0x1ce>
   11d46:	2c01      	cmp	r4, #1
   11d48:	d0ee      	beq.n	11d28 <__gethex+0x494>
   11d4a:	1e61      	subs	r1, r4, #1
   11d4c:	4658      	mov	r0, fp
   11d4e:	f000 fe7d 	bl	12a4c <__any_on>
   11d52:	2800      	cmp	r0, #0
   11d54:	f43f ae85 	beq.w	11a62 <__gethex+0x1ce>
   11d58:	f8da 3004 	ldr.w	r3, [sl, #4]
   11d5c:	e7e4      	b.n	11d28 <__gethex+0x494>
   11d5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11d60:	2a00      	cmp	r2, #0
   11d62:	f43f ae7e 	beq.w	11a62 <__gethex+0x1ce>
   11d66:	e7df      	b.n	11d28 <__gethex+0x494>
   11d68:	f8da 3000 	ldr.w	r3, [sl]
   11d6c:	3b01      	subs	r3, #1
   11d6e:	42a3      	cmp	r3, r4
   11d70:	d034      	beq.n	11ddc <__gethex+0x548>
   11d72:	2522      	movs	r5, #34	; 0x22
   11d74:	e6bd      	b.n	11af2 <__gethex+0x25e>
   11d76:	460e      	mov	r6, r1
   11d78:	e5c7      	b.n	1190a <__gethex+0x76>
   11d7a:	f8db 1004 	ldr.w	r1, [fp, #4]
   11d7e:	ee18 0a10 	vmov	r0, s16
   11d82:	3101      	adds	r1, #1
   11d84:	f000 f95a 	bl	1203c <_Balloc>
   11d88:	4606      	mov	r6, r0
   11d8a:	b3c8      	cbz	r0, 11e00 <__gethex+0x56c>
   11d8c:	f8db 3010 	ldr.w	r3, [fp, #16]
   11d90:	3302      	adds	r3, #2
   11d92:	009a      	lsls	r2, r3, #2
   11d94:	f10b 010c 	add.w	r1, fp, #12
   11d98:	300c      	adds	r0, #12
   11d9a:	f7fa fe9b 	bl	cad4 <memcpy>
   11d9e:	4659      	mov	r1, fp
   11da0:	ee18 0a10 	vmov	r0, s16
   11da4:	f000 f970 	bl	12088 <_Bfree>
   11da8:	f106 0814 	add.w	r8, r6, #20
   11dac:	6933      	ldr	r3, [r6, #16]
   11dae:	46b3      	mov	fp, r6
   11db0:	e756      	b.n	11c60 <__gethex+0x3cc>
   11db2:	2300      	movs	r3, #0
   11db4:	f8cb 3010 	str.w	r3, [fp, #16]
   11db8:	2300      	movs	r3, #0
   11dba:	f8cb 3014 	str.w	r3, [fp, #20]
   11dbe:	e787      	b.n	11cd0 <__gethex+0x43c>
   11dc0:	9b01      	ldr	r3, [sp, #4]
   11dc2:	4443      	add	r3, r8
   11dc4:	f1c4 0420 	rsb	r4, r4, #32
   11dc8:	f853 0c04 	ldr.w	r0, [r3, #-4]
   11dcc:	f000 fa10 	bl	121f0 <__hi0bits>
   11dd0:	42a0      	cmp	r0, r4
   11dd2:	f6bf af0e 	bge.w	11bf2 <__gethex+0x35e>
   11dd6:	f8db 3010 	ldr.w	r3, [fp, #16]
   11dda:	e74c      	b.n	11c76 <__gethex+0x3e2>
   11ddc:	1163      	asrs	r3, r4, #5
   11dde:	f004 041f 	and.w	r4, r4, #31
   11de2:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   11de6:	2301      	movs	r3, #1
   11de8:	40a3      	lsls	r3, r4
   11dea:	4213      	tst	r3, r2
   11dec:	bf0c      	ite	eq
   11dee:	2522      	moveq	r5, #34	; 0x22
   11df0:	2521      	movne	r5, #33	; 0x21
   11df2:	e67e      	b.n	11af2 <__gethex+0x25e>
   11df4:	f8c8 2000 	str.w	r2, [r8]
   11df8:	4643      	mov	r3, r8
   11dfa:	b16a      	cbz	r2, 11e18 <__gethex+0x584>
   11dfc:	3304      	adds	r3, #4
   11dfe:	e760      	b.n	11cc2 <__gethex+0x42e>
   11e00:	4b07      	ldr	r3, [pc, #28]	; (11e20 <__gethex+0x58c>)
   11e02:	4808      	ldr	r0, [pc, #32]	; (11e24 <__gethex+0x590>)
   11e04:	4632      	mov	r2, r6
   11e06:	2184      	movs	r1, #132	; 0x84
   11e08:	f004 fa5a 	bl	162c0 <__assert_func>
   11e0c:	4b04      	ldr	r3, [pc, #16]	; (11e20 <__gethex+0x58c>)
   11e0e:	4805      	ldr	r0, [pc, #20]	; (11e24 <__gethex+0x590>)
   11e10:	465a      	mov	r2, fp
   11e12:	21e4      	movs	r1, #228	; 0xe4
   11e14:	f004 fa54 	bl	162c0 <__assert_func>
   11e18:	f8cb 2010 	str.w	r2, [fp, #16]
   11e1c:	e7cc      	b.n	11db8 <__gethex+0x524>
   11e1e:	bf00      	nop
   11e20:	20000d40 	.word	0x20000d40
   11e24:	20000d54 	.word	0x20000d54

00011e28 <__match>:
   11e28:	b410      	push	{r4}
   11e2a:	6804      	ldr	r4, [r0, #0]
   11e2c:	e009      	b.n	11e42 <__match+0x1a>
   11e2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   11e32:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   11e36:	f1bc 0f19 	cmp.w	ip, #25
   11e3a:	bf98      	it	ls
   11e3c:	3320      	addls	r3, #32
   11e3e:	4293      	cmp	r3, r2
   11e40:	d109      	bne.n	11e56 <__match+0x2e>
   11e42:	f811 2b01 	ldrb.w	r2, [r1], #1
   11e46:	2a00      	cmp	r2, #0
   11e48:	d1f1      	bne.n	11e2e <__match+0x6>
   11e4a:	3401      	adds	r4, #1
   11e4c:	6004      	str	r4, [r0, #0]
   11e4e:	2001      	movs	r0, #1
   11e50:	f85d 4b04 	ldr.w	r4, [sp], #4
   11e54:	4770      	bx	lr
   11e56:	2000      	movs	r0, #0
   11e58:	f85d 4b04 	ldr.w	r4, [sp], #4
   11e5c:	4770      	bx	lr
   11e5e:	bf00      	nop

00011e60 <__hexnan>:
   11e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e64:	6809      	ldr	r1, [r1, #0]
   11e66:	b085      	sub	sp, #20
   11e68:	114b      	asrs	r3, r1, #5
   11e6a:	f011 011f 	ands.w	r1, r1, #31
   11e6e:	9002      	str	r0, [sp, #8]
   11e70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11e74:	9103      	str	r1, [sp, #12]
   11e76:	f040 808f 	bne.w	11f98 <__hexnan+0x138>
   11e7a:	1f1d      	subs	r5, r3, #4
   11e7c:	9301      	str	r3, [sp, #4]
   11e7e:	9b02      	ldr	r3, [sp, #8]
   11e80:	9901      	ldr	r1, [sp, #4]
   11e82:	681c      	ldr	r4, [r3, #0]
   11e84:	2300      	movs	r3, #0
   11e86:	f841 3c04 	str.w	r3, [r1, #-4]
   11e8a:	7861      	ldrb	r1, [r4, #1]
   11e8c:	3401      	adds	r4, #1
   11e8e:	2900      	cmp	r1, #0
   11e90:	f000 8098 	beq.w	11fc4 <__hexnan+0x164>
   11e94:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1200c <__hexnan+0x1ac>
   11e98:	46a8      	mov	r8, r5
   11e9a:	46ac      	mov	ip, r5
   11e9c:	469a      	mov	sl, r3
   11e9e:	461e      	mov	r6, r3
   11ea0:	e00e      	b.n	11ec0 <__hexnan+0x60>
   11ea2:	2920      	cmp	r1, #32
   11ea4:	f200 808c 	bhi.w	11fc0 <__hexnan+0x160>
   11ea8:	4556      	cmp	r6, sl
   11eaa:	dd06      	ble.n	11eba <__hexnan+0x5a>
   11eac:	45c4      	cmp	ip, r8
   11eae:	d201      	bcs.n	11eb4 <__hexnan+0x54>
   11eb0:	2b07      	cmp	r3, #7
   11eb2:	dd5b      	ble.n	11f6c <__hexnan+0x10c>
   11eb4:	4562      	cmp	r2, ip
   11eb6:	d351      	bcc.n	11f5c <__hexnan+0xfc>
   11eb8:	2308      	movs	r3, #8
   11eba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   11ebe:	b1a1      	cbz	r1, 11eea <__hexnan+0x8a>
   11ec0:	f819 0001 	ldrb.w	r0, [r9, r1]
   11ec4:	2800      	cmp	r0, #0
   11ec6:	d0ec      	beq.n	11ea2 <__hexnan+0x42>
   11ec8:	3301      	adds	r3, #1
   11eca:	2b08      	cmp	r3, #8
   11ecc:	f106 0601 	add.w	r6, r6, #1
   11ed0:	dc3a      	bgt.n	11f48 <__hexnan+0xe8>
   11ed2:	f8dc 1000 	ldr.w	r1, [ip]
   11ed6:	0109      	lsls	r1, r1, #4
   11ed8:	f000 000f 	and.w	r0, r0, #15
   11edc:	4308      	orrs	r0, r1
   11ede:	f8cc 0000 	str.w	r0, [ip]
   11ee2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   11ee6:	2900      	cmp	r1, #0
   11ee8:	d1ea      	bne.n	11ec0 <__hexnan+0x60>
   11eea:	2e00      	cmp	r6, #0
   11eec:	d06a      	beq.n	11fc4 <__hexnan+0x164>
   11eee:	45c4      	cmp	ip, r8
   11ef0:	d201      	bcs.n	11ef6 <__hexnan+0x96>
   11ef2:	2b07      	cmp	r3, #7
   11ef4:	dd74      	ble.n	11fe0 <__hexnan+0x180>
   11ef6:	4562      	cmp	r2, ip
   11ef8:	d252      	bcs.n	11fa0 <__hexnan+0x140>
   11efa:	1f11      	subs	r1, r2, #4
   11efc:	4663      	mov	r3, ip
   11efe:	f853 0b04 	ldr.w	r0, [r3], #4
   11f02:	f841 0f04 	str.w	r0, [r1, #4]!
   11f06:	42ab      	cmp	r3, r5
   11f08:	d9f9      	bls.n	11efe <__hexnan+0x9e>
   11f0a:	eba5 030c 	sub.w	r3, r5, ip
   11f0e:	f023 0303 	bic.w	r3, r3, #3
   11f12:	1c69      	adds	r1, r5, #1
   11f14:	3304      	adds	r3, #4
   11f16:	f10c 0c01 	add.w	ip, ip, #1
   11f1a:	4561      	cmp	r1, ip
   11f1c:	bf38      	it	cc
   11f1e:	2304      	movcc	r3, #4
   11f20:	4413      	add	r3, r2
   11f22:	2100      	movs	r1, #0
   11f24:	f843 1b04 	str.w	r1, [r3], #4
   11f28:	42ab      	cmp	r3, r5
   11f2a:	d9fb      	bls.n	11f24 <__hexnan+0xc4>
   11f2c:	9b01      	ldr	r3, [sp, #4]
   11f2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   11f32:	b92b      	cbnz	r3, 11f40 <__hexnan+0xe0>
   11f34:	42aa      	cmp	r2, r5
   11f36:	d049      	beq.n	11fcc <__hexnan+0x16c>
   11f38:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   11f3c:	2b00      	cmp	r3, #0
   11f3e:	d0f9      	beq.n	11f34 <__hexnan+0xd4>
   11f40:	2005      	movs	r0, #5
   11f42:	b005      	add	sp, #20
   11f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f48:	4562      	cmp	r2, ip
   11f4a:	d2b6      	bcs.n	11eba <__hexnan+0x5a>
   11f4c:	2300      	movs	r3, #0
   11f4e:	f84c 3c04 	str.w	r3, [ip, #-4]
   11f52:	4619      	mov	r1, r3
   11f54:	f1ac 0c04 	sub.w	ip, ip, #4
   11f58:	2301      	movs	r3, #1
   11f5a:	e7bd      	b.n	11ed8 <__hexnan+0x78>
   11f5c:	2300      	movs	r3, #0
   11f5e:	f1ac 0804 	sub.w	r8, ip, #4
   11f62:	f84c 3c04 	str.w	r3, [ip, #-4]
   11f66:	46b2      	mov	sl, r6
   11f68:	46c4      	mov	ip, r8
   11f6a:	e7a6      	b.n	11eba <__hexnan+0x5a>
   11f6c:	f1c3 0108 	rsb	r1, r3, #8
   11f70:	f8dc 3000 	ldr.w	r3, [ip]
   11f74:	0089      	lsls	r1, r1, #2
   11f76:	f1c1 0e20 	rsb	lr, r1, #32
   11f7a:	4660      	mov	r0, ip
   11f7c:	469b      	mov	fp, r3
   11f7e:	6847      	ldr	r7, [r0, #4]
   11f80:	fa07 f30e 	lsl.w	r3, r7, lr
   11f84:	ea43 030b 	orr.w	r3, r3, fp
   11f88:	fa27 fb01 	lsr.w	fp, r7, r1
   11f8c:	6003      	str	r3, [r0, #0]
   11f8e:	f840 bf04 	str.w	fp, [r0, #4]!
   11f92:	4540      	cmp	r0, r8
   11f94:	d3f3      	bcc.n	11f7e <__hexnan+0x11e>
   11f96:	e78d      	b.n	11eb4 <__hexnan+0x54>
   11f98:	1d19      	adds	r1, r3, #4
   11f9a:	9101      	str	r1, [sp, #4]
   11f9c:	461d      	mov	r5, r3
   11f9e:	e76e      	b.n	11e7e <__hexnan+0x1e>
   11fa0:	9b03      	ldr	r3, [sp, #12]
   11fa2:	2b00      	cmp	r3, #0
   11fa4:	d0c2      	beq.n	11f2c <__hexnan+0xcc>
   11fa6:	9b03      	ldr	r3, [sp, #12]
   11fa8:	9801      	ldr	r0, [sp, #4]
   11faa:	f1c3 0120 	rsb	r1, r3, #32
   11fae:	f04f 33ff 	mov.w	r3, #4294967295
   11fb2:	40cb      	lsrs	r3, r1
   11fb4:	f850 1c04 	ldr.w	r1, [r0, #-4]
   11fb8:	400b      	ands	r3, r1
   11fba:	f840 3c04 	str.w	r3, [r0, #-4]
   11fbe:	e7b8      	b.n	11f32 <__hexnan+0xd2>
   11fc0:	2929      	cmp	r1, #41	; 0x29
   11fc2:	d009      	beq.n	11fd8 <__hexnan+0x178>
   11fc4:	2004      	movs	r0, #4
   11fc6:	b005      	add	sp, #20
   11fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fcc:	2301      	movs	r3, #1
   11fce:	2005      	movs	r0, #5
   11fd0:	602b      	str	r3, [r5, #0]
   11fd2:	b005      	add	sp, #20
   11fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fd8:	9902      	ldr	r1, [sp, #8]
   11fda:	3401      	adds	r4, #1
   11fdc:	600c      	str	r4, [r1, #0]
   11fde:	e784      	b.n	11eea <__hexnan+0x8a>
   11fe0:	f8dc 1000 	ldr.w	r1, [ip]
   11fe4:	f1c3 0308 	rsb	r3, r3, #8
   11fe8:	009b      	lsls	r3, r3, #2
   11fea:	f1c3 0720 	rsb	r7, r3, #32
   11fee:	4664      	mov	r4, ip
   11ff0:	4608      	mov	r0, r1
   11ff2:	6866      	ldr	r6, [r4, #4]
   11ff4:	fa06 f107 	lsl.w	r1, r6, r7
   11ff8:	4301      	orrs	r1, r0
   11ffa:	fa26 f003 	lsr.w	r0, r6, r3
   11ffe:	6021      	str	r1, [r4, #0]
   12000:	f844 0f04 	str.w	r0, [r4, #4]!
   12004:	4544      	cmp	r4, r8
   12006:	d3f4      	bcc.n	11ff2 <__hexnan+0x192>
   12008:	e775      	b.n	11ef6 <__hexnan+0x96>
   1200a:	bf00      	nop
   1200c:	20000db8 	.word	0x20000db8

00012010 <__ascii_mbtowc>:
   12010:	b082      	sub	sp, #8
   12012:	b149      	cbz	r1, 12028 <__ascii_mbtowc+0x18>
   12014:	b15a      	cbz	r2, 1202e <__ascii_mbtowc+0x1e>
   12016:	b16b      	cbz	r3, 12034 <__ascii_mbtowc+0x24>
   12018:	7813      	ldrb	r3, [r2, #0]
   1201a:	600b      	str	r3, [r1, #0]
   1201c:	7812      	ldrb	r2, [r2, #0]
   1201e:	1e10      	subs	r0, r2, #0
   12020:	bf18      	it	ne
   12022:	2001      	movne	r0, #1
   12024:	b002      	add	sp, #8
   12026:	4770      	bx	lr
   12028:	a901      	add	r1, sp, #4
   1202a:	2a00      	cmp	r2, #0
   1202c:	d1f3      	bne.n	12016 <__ascii_mbtowc+0x6>
   1202e:	4610      	mov	r0, r2
   12030:	b002      	add	sp, #8
   12032:	4770      	bx	lr
   12034:	f06f 0001 	mvn.w	r0, #1
   12038:	e7f4      	b.n	12024 <__ascii_mbtowc+0x14>
   1203a:	bf00      	nop

0001203c <_Balloc>:
   1203c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1203e:	b570      	push	{r4, r5, r6, lr}
   12040:	4605      	mov	r5, r0
   12042:	460c      	mov	r4, r1
   12044:	b14b      	cbz	r3, 1205a <_Balloc+0x1e>
   12046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1204a:	b180      	cbz	r0, 1206e <_Balloc+0x32>
   1204c:	6802      	ldr	r2, [r0, #0]
   1204e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   12052:	2300      	movs	r3, #0
   12054:	e9c0 3303 	strd	r3, r3, [r0, #12]
   12058:	bd70      	pop	{r4, r5, r6, pc}
   1205a:	2221      	movs	r2, #33	; 0x21
   1205c:	2104      	movs	r1, #4
   1205e:	f004 f94f 	bl	16300 <_calloc_r>
   12062:	4603      	mov	r3, r0
   12064:	6468      	str	r0, [r5, #68]	; 0x44
   12066:	2800      	cmp	r0, #0
   12068:	d1ed      	bne.n	12046 <_Balloc+0xa>
   1206a:	2000      	movs	r0, #0
   1206c:	bd70      	pop	{r4, r5, r6, pc}
   1206e:	2101      	movs	r1, #1
   12070:	fa01 f604 	lsl.w	r6, r1, r4
   12074:	1d72      	adds	r2, r6, #5
   12076:	0092      	lsls	r2, r2, #2
   12078:	4628      	mov	r0, r5
   1207a:	f004 f941 	bl	16300 <_calloc_r>
   1207e:	2800      	cmp	r0, #0
   12080:	d0f3      	beq.n	1206a <_Balloc+0x2e>
   12082:	e9c0 4601 	strd	r4, r6, [r0, #4]
   12086:	e7e4      	b.n	12052 <_Balloc+0x16>

00012088 <_Bfree>:
   12088:	b131      	cbz	r1, 12098 <_Bfree+0x10>
   1208a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1208c:	684a      	ldr	r2, [r1, #4]
   1208e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12092:	6008      	str	r0, [r1, #0]
   12094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   12098:	4770      	bx	lr
   1209a:	bf00      	nop

0001209c <__multadd>:
   1209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   120a0:	690e      	ldr	r6, [r1, #16]
   120a2:	4680      	mov	r8, r0
   120a4:	460f      	mov	r7, r1
   120a6:	461d      	mov	r5, r3
   120a8:	f101 0e14 	add.w	lr, r1, #20
   120ac:	2000      	movs	r0, #0
   120ae:	f8de 1000 	ldr.w	r1, [lr]
   120b2:	b28c      	uxth	r4, r1
   120b4:	fb02 5304 	mla	r3, r2, r4, r5
   120b8:	0c09      	lsrs	r1, r1, #16
   120ba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   120be:	fb02 cc01 	mla	ip, r2, r1, ip
   120c2:	3001      	adds	r0, #1
   120c4:	b29c      	uxth	r4, r3
   120c6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   120ca:	4286      	cmp	r6, r0
   120cc:	f84e 4b04 	str.w	r4, [lr], #4
   120d0:	ea4f 451c 	mov.w	r5, ip, lsr #16
   120d4:	dceb      	bgt.n	120ae <__multadd+0x12>
   120d6:	b13d      	cbz	r5, 120e8 <__multadd+0x4c>
   120d8:	68bb      	ldr	r3, [r7, #8]
   120da:	42b3      	cmp	r3, r6
   120dc:	dd07      	ble.n	120ee <__multadd+0x52>
   120de:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   120e2:	3601      	adds	r6, #1
   120e4:	615d      	str	r5, [r3, #20]
   120e6:	613e      	str	r6, [r7, #16]
   120e8:	4638      	mov	r0, r7
   120ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120ee:	6879      	ldr	r1, [r7, #4]
   120f0:	4640      	mov	r0, r8
   120f2:	3101      	adds	r1, #1
   120f4:	f7ff ffa2 	bl	1203c <_Balloc>
   120f8:	4604      	mov	r4, r0
   120fa:	b1b0      	cbz	r0, 1212a <__multadd+0x8e>
   120fc:	693a      	ldr	r2, [r7, #16]
   120fe:	3202      	adds	r2, #2
   12100:	f107 010c 	add.w	r1, r7, #12
   12104:	0092      	lsls	r2, r2, #2
   12106:	300c      	adds	r0, #12
   12108:	f7fa fce4 	bl	cad4 <memcpy>
   1210c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   12110:	687a      	ldr	r2, [r7, #4]
   12112:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12116:	6039      	str	r1, [r7, #0]
   12118:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1211c:	4627      	mov	r7, r4
   1211e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   12122:	3601      	adds	r6, #1
   12124:	615d      	str	r5, [r3, #20]
   12126:	613e      	str	r6, [r7, #16]
   12128:	e7de      	b.n	120e8 <__multadd+0x4c>
   1212a:	4b03      	ldr	r3, [pc, #12]	; (12138 <__multadd+0x9c>)
   1212c:	4803      	ldr	r0, [pc, #12]	; (1213c <__multadd+0xa0>)
   1212e:	4622      	mov	r2, r4
   12130:	21ba      	movs	r1, #186	; 0xba
   12132:	f004 f8c5 	bl	162c0 <__assert_func>
   12136:	bf00      	nop
   12138:	20000d40 	.word	0x20000d40
   1213c:	20000eb8 	.word	0x20000eb8

00012140 <__s2b>:
   12140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12144:	4617      	mov	r7, r2
   12146:	4a27      	ldr	r2, [pc, #156]	; (121e4 <__s2b+0xa4>)
   12148:	461e      	mov	r6, r3
   1214a:	3308      	adds	r3, #8
   1214c:	460c      	mov	r4, r1
   1214e:	2e09      	cmp	r6, #9
   12150:	fb82 1203 	smull	r1, r2, r2, r3
   12154:	ea4f 73e3 	mov.w	r3, r3, asr #31
   12158:	4605      	mov	r5, r0
   1215a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1215e:	dd39      	ble.n	121d4 <__s2b+0x94>
   12160:	f04f 0c01 	mov.w	ip, #1
   12164:	2100      	movs	r1, #0
   12166:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1216a:	4563      	cmp	r3, ip
   1216c:	f101 0101 	add.w	r1, r1, #1
   12170:	dcf9      	bgt.n	12166 <__s2b+0x26>
   12172:	4628      	mov	r0, r5
   12174:	f7ff ff62 	bl	1203c <_Balloc>
   12178:	4601      	mov	r1, r0
   1217a:	b368      	cbz	r0, 121d8 <__s2b+0x98>
   1217c:	9b08      	ldr	r3, [sp, #32]
   1217e:	6143      	str	r3, [r0, #20]
   12180:	2f09      	cmp	r7, #9
   12182:	f04f 0301 	mov.w	r3, #1
   12186:	6103      	str	r3, [r0, #16]
   12188:	dc12      	bgt.n	121b0 <__s2b+0x70>
   1218a:	340a      	adds	r4, #10
   1218c:	2709      	movs	r7, #9
   1218e:	42be      	cmp	r6, r7
   12190:	dd0b      	ble.n	121aa <__s2b+0x6a>
   12192:	1bf2      	subs	r2, r6, r7
   12194:	18a6      	adds	r6, r4, r2
   12196:	f814 3b01 	ldrb.w	r3, [r4], #1
   1219a:	220a      	movs	r2, #10
   1219c:	3b30      	subs	r3, #48	; 0x30
   1219e:	4628      	mov	r0, r5
   121a0:	f7ff ff7c 	bl	1209c <__multadd>
   121a4:	42a6      	cmp	r6, r4
   121a6:	4601      	mov	r1, r0
   121a8:	d1f5      	bne.n	12196 <__s2b+0x56>
   121aa:	4608      	mov	r0, r1
   121ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   121b0:	f104 0909 	add.w	r9, r4, #9
   121b4:	46c8      	mov	r8, r9
   121b6:	443c      	add	r4, r7
   121b8:	f818 3b01 	ldrb.w	r3, [r8], #1
   121bc:	220a      	movs	r2, #10
   121be:	3b30      	subs	r3, #48	; 0x30
   121c0:	4628      	mov	r0, r5
   121c2:	f7ff ff6b 	bl	1209c <__multadd>
   121c6:	45a0      	cmp	r8, r4
   121c8:	4601      	mov	r1, r0
   121ca:	d1f5      	bne.n	121b8 <__s2b+0x78>
   121cc:	f1a7 0408 	sub.w	r4, r7, #8
   121d0:	444c      	add	r4, r9
   121d2:	e7dc      	b.n	1218e <__s2b+0x4e>
   121d4:	2100      	movs	r1, #0
   121d6:	e7cc      	b.n	12172 <__s2b+0x32>
   121d8:	460a      	mov	r2, r1
   121da:	4b03      	ldr	r3, [pc, #12]	; (121e8 <__s2b+0xa8>)
   121dc:	4803      	ldr	r0, [pc, #12]	; (121ec <__s2b+0xac>)
   121de:	21d3      	movs	r1, #211	; 0xd3
   121e0:	f004 f86e 	bl	162c0 <__assert_func>
   121e4:	38e38e39 	.word	0x38e38e39
   121e8:	20000d40 	.word	0x20000d40
   121ec:	20000eb8 	.word	0x20000eb8

000121f0 <__hi0bits>:
   121f0:	0c03      	lsrs	r3, r0, #16
   121f2:	041b      	lsls	r3, r3, #16
   121f4:	b9d3      	cbnz	r3, 1222c <__hi0bits+0x3c>
   121f6:	0400      	lsls	r0, r0, #16
   121f8:	2310      	movs	r3, #16
   121fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   121fe:	bf04      	itt	eq
   12200:	0200      	lsleq	r0, r0, #8
   12202:	3308      	addeq	r3, #8
   12204:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   12208:	bf04      	itt	eq
   1220a:	0100      	lsleq	r0, r0, #4
   1220c:	3304      	addeq	r3, #4
   1220e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   12212:	bf04      	itt	eq
   12214:	0080      	lsleq	r0, r0, #2
   12216:	3302      	addeq	r3, #2
   12218:	2800      	cmp	r0, #0
   1221a:	db05      	blt.n	12228 <__hi0bits+0x38>
   1221c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   12220:	f103 0301 	add.w	r3, r3, #1
   12224:	bf08      	it	eq
   12226:	2320      	moveq	r3, #32
   12228:	4618      	mov	r0, r3
   1222a:	4770      	bx	lr
   1222c:	2300      	movs	r3, #0
   1222e:	e7e4      	b.n	121fa <__hi0bits+0xa>

00012230 <__lo0bits>:
   12230:	6803      	ldr	r3, [r0, #0]
   12232:	f013 0207 	ands.w	r2, r3, #7
   12236:	d008      	beq.n	1224a <__lo0bits+0x1a>
   12238:	07d9      	lsls	r1, r3, #31
   1223a:	d41f      	bmi.n	1227c <__lo0bits+0x4c>
   1223c:	079a      	lsls	r2, r3, #30
   1223e:	d522      	bpl.n	12286 <__lo0bits+0x56>
   12240:	085b      	lsrs	r3, r3, #1
   12242:	6003      	str	r3, [r0, #0]
   12244:	2201      	movs	r2, #1
   12246:	4610      	mov	r0, r2
   12248:	4770      	bx	lr
   1224a:	b299      	uxth	r1, r3
   1224c:	b909      	cbnz	r1, 12252 <__lo0bits+0x22>
   1224e:	0c1b      	lsrs	r3, r3, #16
   12250:	2210      	movs	r2, #16
   12252:	b2d9      	uxtb	r1, r3
   12254:	b909      	cbnz	r1, 1225a <__lo0bits+0x2a>
   12256:	3208      	adds	r2, #8
   12258:	0a1b      	lsrs	r3, r3, #8
   1225a:	0719      	lsls	r1, r3, #28
   1225c:	bf04      	itt	eq
   1225e:	091b      	lsreq	r3, r3, #4
   12260:	3204      	addeq	r2, #4
   12262:	0799      	lsls	r1, r3, #30
   12264:	bf04      	itt	eq
   12266:	089b      	lsreq	r3, r3, #2
   12268:	3202      	addeq	r2, #2
   1226a:	07d9      	lsls	r1, r3, #31
   1226c:	d403      	bmi.n	12276 <__lo0bits+0x46>
   1226e:	085b      	lsrs	r3, r3, #1
   12270:	f102 0201 	add.w	r2, r2, #1
   12274:	d005      	beq.n	12282 <__lo0bits+0x52>
   12276:	6003      	str	r3, [r0, #0]
   12278:	4610      	mov	r0, r2
   1227a:	4770      	bx	lr
   1227c:	2200      	movs	r2, #0
   1227e:	4610      	mov	r0, r2
   12280:	4770      	bx	lr
   12282:	2220      	movs	r2, #32
   12284:	e7df      	b.n	12246 <__lo0bits+0x16>
   12286:	089b      	lsrs	r3, r3, #2
   12288:	2202      	movs	r2, #2
   1228a:	6003      	str	r3, [r0, #0]
   1228c:	4610      	mov	r0, r2
   1228e:	4770      	bx	lr

00012290 <__i2b>:
   12290:	b538      	push	{r3, r4, r5, lr}
   12292:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12294:	4604      	mov	r4, r0
   12296:	460d      	mov	r5, r1
   12298:	b14b      	cbz	r3, 122ae <__i2b+0x1e>
   1229a:	6858      	ldr	r0, [r3, #4]
   1229c:	b1b0      	cbz	r0, 122cc <__i2b+0x3c>
   1229e:	6802      	ldr	r2, [r0, #0]
   122a0:	605a      	str	r2, [r3, #4]
   122a2:	2200      	movs	r2, #0
   122a4:	2301      	movs	r3, #1
   122a6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   122aa:	60c2      	str	r2, [r0, #12]
   122ac:	bd38      	pop	{r3, r4, r5, pc}
   122ae:	2221      	movs	r2, #33	; 0x21
   122b0:	2104      	movs	r1, #4
   122b2:	f004 f825 	bl	16300 <_calloc_r>
   122b6:	4603      	mov	r3, r0
   122b8:	6460      	str	r0, [r4, #68]	; 0x44
   122ba:	2800      	cmp	r0, #0
   122bc:	d1ed      	bne.n	1229a <__i2b+0xa>
   122be:	4b09      	ldr	r3, [pc, #36]	; (122e4 <__i2b+0x54>)
   122c0:	4809      	ldr	r0, [pc, #36]	; (122e8 <__i2b+0x58>)
   122c2:	2200      	movs	r2, #0
   122c4:	f240 1145 	movw	r1, #325	; 0x145
   122c8:	f003 fffa 	bl	162c0 <__assert_func>
   122cc:	221c      	movs	r2, #28
   122ce:	2101      	movs	r1, #1
   122d0:	4620      	mov	r0, r4
   122d2:	f004 f815 	bl	16300 <_calloc_r>
   122d6:	2800      	cmp	r0, #0
   122d8:	d0f1      	beq.n	122be <__i2b+0x2e>
   122da:	2201      	movs	r2, #1
   122dc:	2302      	movs	r3, #2
   122de:	e9c0 2301 	strd	r2, r3, [r0, #4]
   122e2:	e7de      	b.n	122a2 <__i2b+0x12>
   122e4:	20000d40 	.word	0x20000d40
   122e8:	20000eb8 	.word	0x20000eb8

000122ec <__multiply>:
   122ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f0:	690e      	ldr	r6, [r1, #16]
   122f2:	6915      	ldr	r5, [r2, #16]
   122f4:	42ae      	cmp	r6, r5
   122f6:	b085      	sub	sp, #20
   122f8:	4688      	mov	r8, r1
   122fa:	4614      	mov	r4, r2
   122fc:	db05      	blt.n	1230a <__multiply+0x1e>
   122fe:	462a      	mov	r2, r5
   12300:	4623      	mov	r3, r4
   12302:	4635      	mov	r5, r6
   12304:	460c      	mov	r4, r1
   12306:	4616      	mov	r6, r2
   12308:	4698      	mov	r8, r3
   1230a:	68a3      	ldr	r3, [r4, #8]
   1230c:	6861      	ldr	r1, [r4, #4]
   1230e:	19af      	adds	r7, r5, r6
   12310:	42bb      	cmp	r3, r7
   12312:	bfb8      	it	lt
   12314:	3101      	addlt	r1, #1
   12316:	f7ff fe91 	bl	1203c <_Balloc>
   1231a:	9001      	str	r0, [sp, #4]
   1231c:	2800      	cmp	r0, #0
   1231e:	f000 8087 	beq.w	12430 <__multiply+0x144>
   12322:	9b01      	ldr	r3, [sp, #4]
   12324:	f103 0914 	add.w	r9, r3, #20
   12328:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   1232c:	45d1      	cmp	r9, sl
   1232e:	d205      	bcs.n	1233c <__multiply+0x50>
   12330:	464b      	mov	r3, r9
   12332:	2200      	movs	r2, #0
   12334:	f843 2b04 	str.w	r2, [r3], #4
   12338:	459a      	cmp	sl, r3
   1233a:	d8fb      	bhi.n	12334 <__multiply+0x48>
   1233c:	f108 0814 	add.w	r8, r8, #20
   12340:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   12344:	f104 0314 	add.w	r3, r4, #20
   12348:	45d8      	cmp	r8, fp
   1234a:	461a      	mov	r2, r3
   1234c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12350:	d25f      	bcs.n	12412 <__multiply+0x126>
   12352:	1b2b      	subs	r3, r5, r4
   12354:	3b15      	subs	r3, #21
   12356:	f023 0303 	bic.w	r3, r3, #3
   1235a:	3304      	adds	r3, #4
   1235c:	3415      	adds	r4, #21
   1235e:	42a5      	cmp	r5, r4
   12360:	bf38      	it	cc
   12362:	2304      	movcc	r3, #4
   12364:	e9cd a702 	strd	sl, r7, [sp, #8]
   12368:	46ac      	mov	ip, r5
   1236a:	461f      	mov	r7, r3
   1236c:	4692      	mov	sl, r2
   1236e:	e005      	b.n	1237c <__multiply+0x90>
   12370:	0c09      	lsrs	r1, r1, #16
   12372:	d129      	bne.n	123c8 <__multiply+0xdc>
   12374:	45c3      	cmp	fp, r8
   12376:	f109 0904 	add.w	r9, r9, #4
   1237a:	d948      	bls.n	1240e <__multiply+0x122>
   1237c:	f858 1b04 	ldr.w	r1, [r8], #4
   12380:	b28d      	uxth	r5, r1
   12382:	2d00      	cmp	r5, #0
   12384:	d0f4      	beq.n	12370 <__multiply+0x84>
   12386:	4656      	mov	r6, sl
   12388:	464c      	mov	r4, r9
   1238a:	2300      	movs	r3, #0
   1238c:	f856 1b04 	ldr.w	r1, [r6], #4
   12390:	6822      	ldr	r2, [r4, #0]
   12392:	fa1f fe81 	uxth.w	lr, r1
   12396:	b290      	uxth	r0, r2
   12398:	0c09      	lsrs	r1, r1, #16
   1239a:	fb05 000e 	mla	r0, r5, lr, r0
   1239e:	0c12      	lsrs	r2, r2, #16
   123a0:	4403      	add	r3, r0
   123a2:	fb05 2201 	mla	r2, r5, r1, r2
   123a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   123aa:	b29b      	uxth	r3, r3
   123ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   123b0:	45b4      	cmp	ip, r6
   123b2:	f844 3b04 	str.w	r3, [r4], #4
   123b6:	ea4f 4312 	mov.w	r3, r2, lsr #16
   123ba:	d8e7      	bhi.n	1238c <__multiply+0xa0>
   123bc:	f849 3007 	str.w	r3, [r9, r7]
   123c0:	f858 1c04 	ldr.w	r1, [r8, #-4]
   123c4:	0c09      	lsrs	r1, r1, #16
   123c6:	d0d5      	beq.n	12374 <__multiply+0x88>
   123c8:	f8d9 3000 	ldr.w	r3, [r9]
   123cc:	4650      	mov	r0, sl
   123ce:	461a      	mov	r2, r3
   123d0:	464c      	mov	r4, r9
   123d2:	2600      	movs	r6, #0
   123d4:	8805      	ldrh	r5, [r0, #0]
   123d6:	0c12      	lsrs	r2, r2, #16
   123d8:	fb01 2205 	mla	r2, r1, r5, r2
   123dc:	4416      	add	r6, r2
   123de:	b29b      	uxth	r3, r3
   123e0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   123e4:	f844 3b04 	str.w	r3, [r4], #4
   123e8:	f850 5b04 	ldr.w	r5, [r0], #4
   123ec:	6822      	ldr	r2, [r4, #0]
   123ee:	0c2d      	lsrs	r5, r5, #16
   123f0:	b293      	uxth	r3, r2
   123f2:	fb01 3305 	mla	r3, r1, r5, r3
   123f6:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   123fa:	4584      	cmp	ip, r0
   123fc:	ea4f 4613 	mov.w	r6, r3, lsr #16
   12400:	d8e8      	bhi.n	123d4 <__multiply+0xe8>
   12402:	45c3      	cmp	fp, r8
   12404:	f849 3007 	str.w	r3, [r9, r7]
   12408:	f109 0904 	add.w	r9, r9, #4
   1240c:	d8b6      	bhi.n	1237c <__multiply+0x90>
   1240e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   12412:	2f00      	cmp	r7, #0
   12414:	dc02      	bgt.n	1241c <__multiply+0x130>
   12416:	e005      	b.n	12424 <__multiply+0x138>
   12418:	3f01      	subs	r7, #1
   1241a:	d003      	beq.n	12424 <__multiply+0x138>
   1241c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   12420:	2b00      	cmp	r3, #0
   12422:	d0f9      	beq.n	12418 <__multiply+0x12c>
   12424:	9b01      	ldr	r3, [sp, #4]
   12426:	4618      	mov	r0, r3
   12428:	611f      	str	r7, [r3, #16]
   1242a:	b005      	add	sp, #20
   1242c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12430:	4b03      	ldr	r3, [pc, #12]	; (12440 <__multiply+0x154>)
   12432:	4804      	ldr	r0, [pc, #16]	; (12444 <__multiply+0x158>)
   12434:	9a01      	ldr	r2, [sp, #4]
   12436:	f44f 71b1 	mov.w	r1, #354	; 0x162
   1243a:	f003 ff41 	bl	162c0 <__assert_func>
   1243e:	bf00      	nop
   12440:	20000d40 	.word	0x20000d40
   12444:	20000eb8 	.word	0x20000eb8

00012448 <__pow5mult>:
   12448:	f012 0303 	ands.w	r3, r2, #3
   1244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12450:	4614      	mov	r4, r2
   12452:	4606      	mov	r6, r0
   12454:	d132      	bne.n	124bc <__pow5mult+0x74>
   12456:	460d      	mov	r5, r1
   12458:	10a4      	asrs	r4, r4, #2
   1245a:	d020      	beq.n	1249e <__pow5mult+0x56>
   1245c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   12460:	f1b8 0f00 	cmp.w	r8, #0
   12464:	d033      	beq.n	124ce <__pow5mult+0x86>
   12466:	07e3      	lsls	r3, r4, #31
   12468:	f04f 0700 	mov.w	r7, #0
   1246c:	d407      	bmi.n	1247e <__pow5mult+0x36>
   1246e:	1064      	asrs	r4, r4, #1
   12470:	d015      	beq.n	1249e <__pow5mult+0x56>
   12472:	f8d8 0000 	ldr.w	r0, [r8]
   12476:	b1a8      	cbz	r0, 124a4 <__pow5mult+0x5c>
   12478:	4680      	mov	r8, r0
   1247a:	07e3      	lsls	r3, r4, #31
   1247c:	d5f7      	bpl.n	1246e <__pow5mult+0x26>
   1247e:	4642      	mov	r2, r8
   12480:	4629      	mov	r1, r5
   12482:	4630      	mov	r0, r6
   12484:	f7ff ff32 	bl	122ec <__multiply>
   12488:	b1b5      	cbz	r5, 124b8 <__pow5mult+0x70>
   1248a:	6869      	ldr	r1, [r5, #4]
   1248c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1248e:	1064      	asrs	r4, r4, #1
   12490:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   12494:	602a      	str	r2, [r5, #0]
   12496:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   1249a:	4605      	mov	r5, r0
   1249c:	d1e9      	bne.n	12472 <__pow5mult+0x2a>
   1249e:	4628      	mov	r0, r5
   124a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   124a4:	4642      	mov	r2, r8
   124a6:	4641      	mov	r1, r8
   124a8:	4630      	mov	r0, r6
   124aa:	f7ff ff1f 	bl	122ec <__multiply>
   124ae:	f8c8 0000 	str.w	r0, [r8]
   124b2:	6007      	str	r7, [r0, #0]
   124b4:	4680      	mov	r8, r0
   124b6:	e7e0      	b.n	1247a <__pow5mult+0x32>
   124b8:	4605      	mov	r5, r0
   124ba:	e7d8      	b.n	1246e <__pow5mult+0x26>
   124bc:	3b01      	subs	r3, #1
   124be:	4a0f      	ldr	r2, [pc, #60]	; (124fc <__pow5mult+0xb4>)
   124c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   124c4:	2300      	movs	r3, #0
   124c6:	f7ff fde9 	bl	1209c <__multadd>
   124ca:	4605      	mov	r5, r0
   124cc:	e7c4      	b.n	12458 <__pow5mult+0x10>
   124ce:	2101      	movs	r1, #1
   124d0:	4630      	mov	r0, r6
   124d2:	f7ff fdb3 	bl	1203c <_Balloc>
   124d6:	4680      	mov	r8, r0
   124d8:	b140      	cbz	r0, 124ec <__pow5mult+0xa4>
   124da:	2301      	movs	r3, #1
   124dc:	f240 2271 	movw	r2, #625	; 0x271
   124e0:	e9c0 3204 	strd	r3, r2, [r0, #16]
   124e4:	2300      	movs	r3, #0
   124e6:	6430      	str	r0, [r6, #64]	; 0x40
   124e8:	6003      	str	r3, [r0, #0]
   124ea:	e7bc      	b.n	12466 <__pow5mult+0x1e>
   124ec:	4b04      	ldr	r3, [pc, #16]	; (12500 <__pow5mult+0xb8>)
   124ee:	4805      	ldr	r0, [pc, #20]	; (12504 <__pow5mult+0xbc>)
   124f0:	4642      	mov	r2, r8
   124f2:	f240 1145 	movw	r1, #325	; 0x145
   124f6:	f003 fee3 	bl	162c0 <__assert_func>
   124fa:	bf00      	nop
   124fc:	20007f10 	.word	0x20007f10
   12500:	20000d40 	.word	0x20000d40
   12504:	20000eb8 	.word	0x20000eb8

00012508 <__lshift>:
   12508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1250c:	460d      	mov	r5, r1
   1250e:	4614      	mov	r4, r2
   12510:	692f      	ldr	r7, [r5, #16]
   12512:	68ab      	ldr	r3, [r5, #8]
   12514:	6849      	ldr	r1, [r1, #4]
   12516:	eb07 1762 	add.w	r7, r7, r2, asr #5
   1251a:	1c7e      	adds	r6, r7, #1
   1251c:	429e      	cmp	r6, r3
   1251e:	4680      	mov	r8, r0
   12520:	ea4f 1962 	mov.w	r9, r2, asr #5
   12524:	dd04      	ble.n	12530 <__lshift+0x28>
   12526:	005b      	lsls	r3, r3, #1
   12528:	429e      	cmp	r6, r3
   1252a:	f101 0101 	add.w	r1, r1, #1
   1252e:	dcfa      	bgt.n	12526 <__lshift+0x1e>
   12530:	4640      	mov	r0, r8
   12532:	f7ff fd83 	bl	1203c <_Balloc>
   12536:	4684      	mov	ip, r0
   12538:	2800      	cmp	r0, #0
   1253a:	d052      	beq.n	125e2 <__lshift+0xda>
   1253c:	f1b9 0f00 	cmp.w	r9, #0
   12540:	f100 0214 	add.w	r2, r0, #20
   12544:	dd0e      	ble.n	12564 <__lshift+0x5c>
   12546:	f109 0105 	add.w	r1, r9, #5
   1254a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   1254e:	4613      	mov	r3, r2
   12550:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   12554:	2000      	movs	r0, #0
   12556:	f843 0b04 	str.w	r0, [r3], #4
   1255a:	428b      	cmp	r3, r1
   1255c:	d1fb      	bne.n	12556 <__lshift+0x4e>
   1255e:	f1ae 0314 	sub.w	r3, lr, #20
   12562:	441a      	add	r2, r3
   12564:	6929      	ldr	r1, [r5, #16]
   12566:	f105 0314 	add.w	r3, r5, #20
   1256a:	f014 0e1f 	ands.w	lr, r4, #31
   1256e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12572:	d02e      	beq.n	125d2 <__lshift+0xca>
   12574:	f1ce 0920 	rsb	r9, lr, #32
   12578:	4610      	mov	r0, r2
   1257a:	f04f 0a00 	mov.w	sl, #0
   1257e:	681c      	ldr	r4, [r3, #0]
   12580:	fa04 f40e 	lsl.w	r4, r4, lr
   12584:	ea44 040a 	orr.w	r4, r4, sl
   12588:	f840 4b04 	str.w	r4, [r0], #4
   1258c:	f853 4b04 	ldr.w	r4, [r3], #4
   12590:	4299      	cmp	r1, r3
   12592:	fa24 fa09 	lsr.w	sl, r4, r9
   12596:	d8f2      	bhi.n	1257e <__lshift+0x76>
   12598:	1b4b      	subs	r3, r1, r5
   1259a:	3b15      	subs	r3, #21
   1259c:	f023 0303 	bic.w	r3, r3, #3
   125a0:	3304      	adds	r3, #4
   125a2:	f105 0015 	add.w	r0, r5, #21
   125a6:	4281      	cmp	r1, r0
   125a8:	bf38      	it	cc
   125aa:	2304      	movcc	r3, #4
   125ac:	f1ba 0f00 	cmp.w	sl, #0
   125b0:	bf18      	it	ne
   125b2:	4637      	movne	r7, r6
   125b4:	f842 a003 	str.w	sl, [r2, r3]
   125b8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   125bc:	686a      	ldr	r2, [r5, #4]
   125be:	f8cc 7010 	str.w	r7, [ip, #16]
   125c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   125c6:	6029      	str	r1, [r5, #0]
   125c8:	4660      	mov	r0, ip
   125ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   125ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   125d2:	3a04      	subs	r2, #4
   125d4:	f853 0b04 	ldr.w	r0, [r3], #4
   125d8:	f842 0f04 	str.w	r0, [r2, #4]!
   125dc:	4299      	cmp	r1, r3
   125de:	d8f9      	bhi.n	125d4 <__lshift+0xcc>
   125e0:	e7ea      	b.n	125b8 <__lshift+0xb0>
   125e2:	4b03      	ldr	r3, [pc, #12]	; (125f0 <__lshift+0xe8>)
   125e4:	4803      	ldr	r0, [pc, #12]	; (125f4 <__lshift+0xec>)
   125e6:	4662      	mov	r2, ip
   125e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   125ec:	f003 fe68 	bl	162c0 <__assert_func>
   125f0:	20000d40 	.word	0x20000d40
   125f4:	20000eb8 	.word	0x20000eb8

000125f8 <__mcmp>:
   125f8:	690b      	ldr	r3, [r1, #16]
   125fa:	4684      	mov	ip, r0
   125fc:	6900      	ldr	r0, [r0, #16]
   125fe:	1ac0      	subs	r0, r0, r3
   12600:	d116      	bne.n	12630 <__mcmp+0x38>
   12602:	f10c 0c14 	add.w	ip, ip, #20
   12606:	3114      	adds	r1, #20
   12608:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   1260c:	b410      	push	{r4}
   1260e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   12612:	e001      	b.n	12618 <__mcmp+0x20>
   12614:	4594      	cmp	ip, r2
   12616:	d208      	bcs.n	1262a <__mcmp+0x32>
   12618:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1261c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   12620:	428c      	cmp	r4, r1
   12622:	d0f7      	beq.n	12614 <__mcmp+0x1c>
   12624:	d205      	bcs.n	12632 <__mcmp+0x3a>
   12626:	f04f 30ff 	mov.w	r0, #4294967295
   1262a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1262e:	4770      	bx	lr
   12630:	4770      	bx	lr
   12632:	2001      	movs	r0, #1
   12634:	f85d 4b04 	ldr.w	r4, [sp], #4
   12638:	4770      	bx	lr
   1263a:	bf00      	nop

0001263c <__mdiff>:
   1263c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12640:	690f      	ldr	r7, [r1, #16]
   12642:	6913      	ldr	r3, [r2, #16]
   12644:	1aff      	subs	r7, r7, r3
   12646:	2f00      	cmp	r7, #0
   12648:	460e      	mov	r6, r1
   1264a:	4690      	mov	r8, r2
   1264c:	d17f      	bne.n	1274e <__mdiff+0x112>
   1264e:	f101 0514 	add.w	r5, r1, #20
   12652:	3214      	adds	r2, #20
   12654:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12658:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1265c:	e001      	b.n	12662 <__mdiff+0x26>
   1265e:	429d      	cmp	r5, r3
   12660:	d278      	bcs.n	12754 <__mdiff+0x118>
   12662:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   12666:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1266a:	42a1      	cmp	r1, r4
   1266c:	d0f7      	beq.n	1265e <__mdiff+0x22>
   1266e:	d369      	bcc.n	12744 <__mdiff+0x108>
   12670:	6871      	ldr	r1, [r6, #4]
   12672:	f7ff fce3 	bl	1203c <_Balloc>
   12676:	4681      	mov	r9, r0
   12678:	2800      	cmp	r0, #0
   1267a:	d077      	beq.n	1276c <__mdiff+0x130>
   1267c:	6935      	ldr	r5, [r6, #16]
   1267e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   12682:	60c7      	str	r7, [r0, #12]
   12684:	f108 0e14 	add.w	lr, r8, #20
   12688:	f106 0014 	add.w	r0, r6, #20
   1268c:	f109 0a14 	add.w	sl, r9, #20
   12690:	f106 0110 	add.w	r1, r6, #16
   12694:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   12698:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1269c:	4656      	mov	r6, sl
   1269e:	f04f 0c00 	mov.w	ip, #0
   126a2:	f85e 4b04 	ldr.w	r4, [lr], #4
   126a6:	f851 bf04 	ldr.w	fp, [r1, #4]!
   126aa:	b2a3      	uxth	r3, r4
   126ac:	fa1c fc8b 	uxtah	ip, ip, fp
   126b0:	ebac 0303 	sub.w	r3, ip, r3
   126b4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   126b8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   126bc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   126c0:	b29b      	uxth	r3, r3
   126c2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   126c6:	4572      	cmp	r2, lr
   126c8:	f846 3b04 	str.w	r3, [r6], #4
   126cc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   126d0:	d8e7      	bhi.n	126a2 <__mdiff+0x66>
   126d2:	eba2 0108 	sub.w	r1, r2, r8
   126d6:	3915      	subs	r1, #21
   126d8:	f108 0815 	add.w	r8, r8, #21
   126dc:	4542      	cmp	r2, r8
   126de:	f021 0403 	bic.w	r4, r1, #3
   126e2:	f104 0404 	add.w	r4, r4, #4
   126e6:	bf38      	it	cc
   126e8:	2404      	movcc	r4, #4
   126ea:	4420      	add	r0, r4
   126ec:	f021 0203 	bic.w	r2, r1, #3
   126f0:	bf38      	it	cc
   126f2:	2200      	movcc	r2, #0
   126f4:	4287      	cmp	r7, r0
   126f6:	4452      	add	r2, sl
   126f8:	4454      	add	r4, sl
   126fa:	d918      	bls.n	1272e <__mdiff+0xf2>
   126fc:	4626      	mov	r6, r4
   126fe:	4601      	mov	r1, r0
   12700:	f851 3b04 	ldr.w	r3, [r1], #4
   12704:	fa1c fc83 	uxtah	ip, ip, r3
   12708:	ea4f 422c 	mov.w	r2, ip, asr #16
   1270c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   12710:	fa1f fc8c 	uxth.w	ip, ip
   12714:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   12718:	428f      	cmp	r7, r1
   1271a:	f846 3b04 	str.w	r3, [r6], #4
   1271e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   12722:	d8ed      	bhi.n	12700 <__mdiff+0xc4>
   12724:	3f01      	subs	r7, #1
   12726:	1a3f      	subs	r7, r7, r0
   12728:	f027 0703 	bic.w	r7, r7, #3
   1272c:	19e2      	adds	r2, r4, r7
   1272e:	b923      	cbnz	r3, 1273a <__mdiff+0xfe>
   12730:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   12734:	3d01      	subs	r5, #1
   12736:	2b00      	cmp	r3, #0
   12738:	d0fa      	beq.n	12730 <__mdiff+0xf4>
   1273a:	f8c9 5010 	str.w	r5, [r9, #16]
   1273e:	4648      	mov	r0, r9
   12740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12744:	4633      	mov	r3, r6
   12746:	2701      	movs	r7, #1
   12748:	4646      	mov	r6, r8
   1274a:	4698      	mov	r8, r3
   1274c:	e790      	b.n	12670 <__mdiff+0x34>
   1274e:	dbf9      	blt.n	12744 <__mdiff+0x108>
   12750:	2700      	movs	r7, #0
   12752:	e78d      	b.n	12670 <__mdiff+0x34>
   12754:	2100      	movs	r1, #0
   12756:	f7ff fc71 	bl	1203c <_Balloc>
   1275a:	4681      	mov	r9, r0
   1275c:	b168      	cbz	r0, 1277a <__mdiff+0x13e>
   1275e:	2201      	movs	r2, #1
   12760:	2300      	movs	r3, #0
   12762:	e9c9 2304 	strd	r2, r3, [r9, #16]
   12766:	4648      	mov	r0, r9
   12768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1276c:	4b06      	ldr	r3, [pc, #24]	; (12788 <__mdiff+0x14c>)
   1276e:	4807      	ldr	r0, [pc, #28]	; (1278c <__mdiff+0x150>)
   12770:	464a      	mov	r2, r9
   12772:	f240 2145 	movw	r1, #581	; 0x245
   12776:	f003 fda3 	bl	162c0 <__assert_func>
   1277a:	4b03      	ldr	r3, [pc, #12]	; (12788 <__mdiff+0x14c>)
   1277c:	4803      	ldr	r0, [pc, #12]	; (1278c <__mdiff+0x150>)
   1277e:	464a      	mov	r2, r9
   12780:	f240 2137 	movw	r1, #567	; 0x237
   12784:	f003 fd9c 	bl	162c0 <__assert_func>
   12788:	20000d40 	.word	0x20000d40
   1278c:	20000eb8 	.word	0x20000eb8

00012790 <__ulp>:
   12790:	b082      	sub	sp, #8
   12792:	ed8d 0b00 	vstr	d0, [sp]
   12796:	4b16      	ldr	r3, [pc, #88]	; (127f0 <__ulp+0x60>)
   12798:	9a01      	ldr	r2, [sp, #4]
   1279a:	4013      	ands	r3, r2
   1279c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   127a0:	2b00      	cmp	r3, #0
   127a2:	dd06      	ble.n	127b2 <__ulp+0x22>
   127a4:	2200      	movs	r2, #0
   127a6:	4619      	mov	r1, r3
   127a8:	4610      	mov	r0, r2
   127aa:	ec41 0b10 	vmov	d0, r0, r1
   127ae:	b002      	add	sp, #8
   127b0:	4770      	bx	lr
   127b2:	425b      	negs	r3, r3
   127b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   127b8:	ea4f 5223 	mov.w	r2, r3, asr #20
   127bc:	da09      	bge.n	127d2 <__ulp+0x42>
   127be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   127c2:	4113      	asrs	r3, r2
   127c4:	2200      	movs	r2, #0
   127c6:	4619      	mov	r1, r3
   127c8:	4610      	mov	r0, r2
   127ca:	ec41 0b10 	vmov	d0, r0, r1
   127ce:	b002      	add	sp, #8
   127d0:	4770      	bx	lr
   127d2:	f1a2 0314 	sub.w	r3, r2, #20
   127d6:	2b1e      	cmp	r3, #30
   127d8:	bfda      	itte	le
   127da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   127de:	40da      	lsrle	r2, r3
   127e0:	2201      	movgt	r2, #1
   127e2:	2300      	movs	r3, #0
   127e4:	4619      	mov	r1, r3
   127e6:	4610      	mov	r0, r2
   127e8:	ec41 0b10 	vmov	d0, r0, r1
   127ec:	b002      	add	sp, #8
   127ee:	4770      	bx	lr
   127f0:	7ff00000 	.word	0x7ff00000

000127f4 <__b2d>:
   127f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127f6:	6904      	ldr	r4, [r0, #16]
   127f8:	f100 0614 	add.w	r6, r0, #20
   127fc:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   12800:	1f27      	subs	r7, r4, #4
   12802:	f854 5c04 	ldr.w	r5, [r4, #-4]
   12806:	4628      	mov	r0, r5
   12808:	f7ff fcf2 	bl	121f0 <__hi0bits>
   1280c:	f1c0 0320 	rsb	r3, r0, #32
   12810:	280a      	cmp	r0, #10
   12812:	600b      	str	r3, [r1, #0]
   12814:	dd1b      	ble.n	1284e <__b2d+0x5a>
   12816:	42be      	cmp	r6, r7
   12818:	d20b      	bcs.n	12832 <__b2d+0x3e>
   1281a:	380b      	subs	r0, #11
   1281c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   12820:	d12e      	bne.n	12880 <__b2d+0x8c>
   12822:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   12826:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1282a:	460a      	mov	r2, r1
   1282c:	ec43 2b10 	vmov	d0, r2, r3
   12830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12832:	f1b0 010b 	subs.w	r1, r0, #11
   12836:	d0f4      	beq.n	12822 <__b2d+0x2e>
   12838:	fa05 f101 	lsl.w	r1, r5, r1
   1283c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   12840:	2100      	movs	r1, #0
   12842:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12846:	460a      	mov	r2, r1
   12848:	ec43 2b10 	vmov	d0, r2, r3
   1284c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1284e:	f1c0 0c0b 	rsb	ip, r0, #11
   12852:	fa25 f10c 	lsr.w	r1, r5, ip
   12856:	42be      	cmp	r6, r7
   12858:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1285c:	bf38      	it	cc
   1285e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   12862:	f100 0015 	add.w	r0, r0, #21
   12866:	bf34      	ite	cc
   12868:	fa21 f10c 	lsrcc.w	r1, r1, ip
   1286c:	2100      	movcs	r1, #0
   1286e:	fa05 f000 	lsl.w	r0, r5, r0
   12872:	4301      	orrs	r1, r0
   12874:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   12878:	460a      	mov	r2, r1
   1287a:	ec43 2b10 	vmov	d0, r2, r3
   1287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12880:	f1c0 0c20 	rsb	ip, r0, #32
   12884:	4085      	lsls	r5, r0
   12886:	fa21 f30c 	lsr.w	r3, r1, ip
   1288a:	ea45 0703 	orr.w	r7, r5, r3
   1288e:	f1a4 0508 	sub.w	r5, r4, #8
   12892:	42ae      	cmp	r6, r5
   12894:	fa01 f100 	lsl.w	r1, r1, r0
   12898:	bf3c      	itt	cc
   1289a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   1289e:	fa20 f00c 	lsrcc.w	r0, r0, ip
   128a2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   128a6:	bf38      	it	cc
   128a8:	4301      	orrcc	r1, r0
   128aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   128ae:	460a      	mov	r2, r1
   128b0:	ec43 2b10 	vmov	d0, r2, r3
   128b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128b6:	bf00      	nop

000128b8 <__d2b>:
   128b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   128bc:	4688      	mov	r8, r1
   128be:	b083      	sub	sp, #12
   128c0:	2101      	movs	r1, #1
   128c2:	ec57 6b10 	vmov	r6, r7, d0
   128c6:	4615      	mov	r5, r2
   128c8:	f7ff fbb8 	bl	1203c <_Balloc>
   128cc:	4604      	mov	r4, r0
   128ce:	2800      	cmp	r0, #0
   128d0:	d051      	beq.n	12976 <__d2b+0xbe>
   128d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
   128d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
   128da:	f1b9 0f00 	cmp.w	r9, #0
   128de:	d001      	beq.n	128e4 <__d2b+0x2c>
   128e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   128e4:	2e00      	cmp	r6, #0
   128e6:	9301      	str	r3, [sp, #4]
   128e8:	d118      	bne.n	1291c <__d2b+0x64>
   128ea:	a801      	add	r0, sp, #4
   128ec:	f7ff fca0 	bl	12230 <__lo0bits>
   128f0:	9a01      	ldr	r2, [sp, #4]
   128f2:	6162      	str	r2, [r4, #20]
   128f4:	2201      	movs	r2, #1
   128f6:	f100 0320 	add.w	r3, r0, #32
   128fa:	6122      	str	r2, [r4, #16]
   128fc:	f1b9 0f00 	cmp.w	r9, #0
   12900:	d025      	beq.n	1294e <__d2b+0x96>
   12902:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   12906:	eb09 0203 	add.w	r2, r9, r3
   1290a:	4620      	mov	r0, r4
   1290c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   12910:	f8c8 2000 	str.w	r2, [r8]
   12914:	602b      	str	r3, [r5, #0]
   12916:	b003      	add	sp, #12
   12918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1291c:	4668      	mov	r0, sp
   1291e:	9600      	str	r6, [sp, #0]
   12920:	f7ff fc86 	bl	12230 <__lo0bits>
   12924:	4603      	mov	r3, r0
   12926:	b310      	cbz	r0, 1296e <__d2b+0xb6>
   12928:	e9dd 0200 	ldrd	r0, r2, [sp]
   1292c:	f1c3 0120 	rsb	r1, r3, #32
   12930:	fa02 f101 	lsl.w	r1, r2, r1
   12934:	4301      	orrs	r1, r0
   12936:	40da      	lsrs	r2, r3
   12938:	6161      	str	r1, [r4, #20]
   1293a:	9201      	str	r2, [sp, #4]
   1293c:	2a00      	cmp	r2, #0
   1293e:	61a2      	str	r2, [r4, #24]
   12940:	bf14      	ite	ne
   12942:	2202      	movne	r2, #2
   12944:	2201      	moveq	r2, #1
   12946:	6122      	str	r2, [r4, #16]
   12948:	f1b9 0f00 	cmp.w	r9, #0
   1294c:	d1d9      	bne.n	12902 <__d2b+0x4a>
   1294e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   12952:	f8c8 3000 	str.w	r3, [r8]
   12956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1295a:	6918      	ldr	r0, [r3, #16]
   1295c:	f7ff fc48 	bl	121f0 <__hi0bits>
   12960:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   12964:	4620      	mov	r0, r4
   12966:	602b      	str	r3, [r5, #0]
   12968:	b003      	add	sp, #12
   1296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1296e:	9a00      	ldr	r2, [sp, #0]
   12970:	6162      	str	r2, [r4, #20]
   12972:	9a01      	ldr	r2, [sp, #4]
   12974:	e7e2      	b.n	1293c <__d2b+0x84>
   12976:	4b03      	ldr	r3, [pc, #12]	; (12984 <__d2b+0xcc>)
   12978:	4803      	ldr	r0, [pc, #12]	; (12988 <__d2b+0xd0>)
   1297a:	4622      	mov	r2, r4
   1297c:	f240 310f 	movw	r1, #783	; 0x30f
   12980:	f003 fc9e 	bl	162c0 <__assert_func>
   12984:	20000d40 	.word	0x20000d40
   12988:	20000eb8 	.word	0x20000eb8

0001298c <__ratio>:
   1298c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1298e:	b083      	sub	sp, #12
   12990:	460e      	mov	r6, r1
   12992:	4669      	mov	r1, sp
   12994:	4607      	mov	r7, r0
   12996:	f7ff ff2d 	bl	127f4 <__b2d>
   1299a:	a901      	add	r1, sp, #4
   1299c:	4630      	mov	r0, r6
   1299e:	ec55 4b10 	vmov	r4, r5, d0
   129a2:	eeb0 7b40 	vmov.f64	d7, d0
   129a6:	f7ff ff25 	bl	127f4 <__b2d>
   129aa:	6933      	ldr	r3, [r6, #16]
   129ac:	693a      	ldr	r2, [r7, #16]
   129ae:	1ad2      	subs	r2, r2, r3
   129b0:	e9dd 3100 	ldrd	r3, r1, [sp]
   129b4:	1a5b      	subs	r3, r3, r1
   129b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   129ba:	2b00      	cmp	r3, #0
   129bc:	dd09      	ble.n	129d2 <__ratio+0x46>
   129be:	ee17 2a90 	vmov	r2, s15
   129c2:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   129c6:	ec45 4b17 	vmov	d7, r4, r5
   129ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
   129ce:	b003      	add	sp, #12
   129d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129d2:	ee10 2a90 	vmov	r2, s1
   129d6:	ec51 0b10 	vmov	r0, r1, d0
   129da:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   129de:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   129e2:	ec41 0b10 	vmov	d0, r0, r1
   129e6:	ee87 0b00 	vdiv.f64	d0, d7, d0
   129ea:	b003      	add	sp, #12
   129ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129ee:	bf00      	nop

000129f0 <__copybits>:
   129f0:	3901      	subs	r1, #1
   129f2:	1149      	asrs	r1, r1, #5
   129f4:	f101 0c01 	add.w	ip, r1, #1
   129f8:	6911      	ldr	r1, [r2, #16]
   129fa:	f102 0314 	add.w	r3, r2, #20
   129fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12a02:	428b      	cmp	r3, r1
   12a04:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   12a08:	d217      	bcs.n	12a3a <__copybits+0x4a>
   12a0a:	b510      	push	{r4, lr}
   12a0c:	f1a0 0e04 	sub.w	lr, r0, #4
   12a10:	f853 4b04 	ldr.w	r4, [r3], #4
   12a14:	f84e 4f04 	str.w	r4, [lr, #4]!
   12a18:	4299      	cmp	r1, r3
   12a1a:	d8f9      	bhi.n	12a10 <__copybits+0x20>
   12a1c:	1a8a      	subs	r2, r1, r2
   12a1e:	f1a2 0315 	sub.w	r3, r2, #21
   12a22:	f023 0303 	bic.w	r3, r3, #3
   12a26:	3304      	adds	r3, #4
   12a28:	4418      	add	r0, r3
   12a2a:	4584      	cmp	ip, r0
   12a2c:	d904      	bls.n	12a38 <__copybits+0x48>
   12a2e:	2300      	movs	r3, #0
   12a30:	f840 3b04 	str.w	r3, [r0], #4
   12a34:	4584      	cmp	ip, r0
   12a36:	d8fb      	bhi.n	12a30 <__copybits+0x40>
   12a38:	bd10      	pop	{r4, pc}
   12a3a:	4584      	cmp	ip, r0
   12a3c:	d905      	bls.n	12a4a <__copybits+0x5a>
   12a3e:	2300      	movs	r3, #0
   12a40:	f840 3b04 	str.w	r3, [r0], #4
   12a44:	4584      	cmp	ip, r0
   12a46:	d8fb      	bhi.n	12a40 <__copybits+0x50>
   12a48:	4770      	bx	lr
   12a4a:	4770      	bx	lr

00012a4c <__any_on>:
   12a4c:	6903      	ldr	r3, [r0, #16]
   12a4e:	114a      	asrs	r2, r1, #5
   12a50:	4293      	cmp	r3, r2
   12a52:	f100 0014 	add.w	r0, r0, #20
   12a56:	da09      	bge.n	12a6c <__any_on+0x20>
   12a58:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   12a5c:	e002      	b.n	12a64 <__any_on+0x18>
   12a5e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   12a62:	b9c2      	cbnz	r2, 12a96 <__any_on+0x4a>
   12a64:	4283      	cmp	r3, r0
   12a66:	d8fa      	bhi.n	12a5e <__any_on+0x12>
   12a68:	2000      	movs	r0, #0
   12a6a:	4770      	bx	lr
   12a6c:	dd10      	ble.n	12a90 <__any_on+0x44>
   12a6e:	f011 011f 	ands.w	r1, r1, #31
   12a72:	d00d      	beq.n	12a90 <__any_on+0x44>
   12a74:	b410      	push	{r4}
   12a76:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   12a7a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   12a7e:	fa24 f201 	lsr.w	r2, r4, r1
   12a82:	408a      	lsls	r2, r1
   12a84:	4294      	cmp	r4, r2
   12a86:	d00c      	beq.n	12aa2 <__any_on+0x56>
   12a88:	2001      	movs	r0, #1
   12a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   12a8e:	4770      	bx	lr
   12a90:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   12a94:	e7e6      	b.n	12a64 <__any_on+0x18>
   12a96:	2001      	movs	r0, #1
   12a98:	4770      	bx	lr
   12a9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   12a9e:	2a00      	cmp	r2, #0
   12aa0:	d1f2      	bne.n	12a88 <__any_on+0x3c>
   12aa2:	4283      	cmp	r3, r0
   12aa4:	d8f9      	bhi.n	12a9a <__any_on+0x4e>
   12aa6:	2000      	movs	r0, #0
   12aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
   12aac:	4770      	bx	lr
   12aae:	bf00      	nop

00012ab0 <__ascii_wctomb>:
   12ab0:	b149      	cbz	r1, 12ac6 <__ascii_wctomb+0x16>
   12ab2:	2aff      	cmp	r2, #255	; 0xff
   12ab4:	d802      	bhi.n	12abc <__ascii_wctomb+0xc>
   12ab6:	700a      	strb	r2, [r1, #0]
   12ab8:	2001      	movs	r0, #1
   12aba:	4770      	bx	lr
   12abc:	238a      	movs	r3, #138	; 0x8a
   12abe:	6003      	str	r3, [r0, #0]
   12ac0:	f04f 30ff 	mov.w	r0, #4294967295
   12ac4:	4770      	bx	lr
   12ac6:	4608      	mov	r0, r1
   12ac8:	4770      	bx	lr
   12aca:	bf00      	nop

00012acc <fcvtbuf>:
   12acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ad0:	460e      	mov	r6, r1
   12ad2:	4926      	ldr	r1, [pc, #152]	; (12b6c <fcvtbuf+0xa0>)
   12ad4:	b087      	sub	sp, #28
   12ad6:	680f      	ldr	r7, [r1, #0]
   12ad8:	4604      	mov	r4, r0
   12ada:	4690      	mov	r8, r2
   12adc:	461d      	mov	r5, r3
   12ade:	b353      	cbz	r3, 12b36 <fcvtbuf+0x6a>
   12ae0:	aa05      	add	r2, sp, #20
   12ae2:	4633      	mov	r3, r6
   12ae4:	9201      	str	r2, [sp, #4]
   12ae6:	2103      	movs	r1, #3
   12ae8:	4622      	mov	r2, r4
   12aea:	f8cd 8000 	str.w	r8, [sp]
   12aee:	4638      	mov	r0, r7
   12af0:	f003 fcd6 	bl	164a0 <_dtoa_r>
   12af4:	9b05      	ldr	r3, [sp, #20]
   12af6:	6832      	ldr	r2, [r6, #0]
   12af8:	4298      	cmp	r0, r3
   12afa:	4684      	mov	ip, r0
   12afc:	f1c2 0200 	rsb	r2, r2, #0
   12b00:	4629      	mov	r1, r5
   12b02:	d209      	bcs.n	12b18 <fcvtbuf+0x4c>
   12b04:	1a10      	subs	r0, r2, r0
   12b06:	f81c 3b01 	ldrb.w	r3, [ip], #1
   12b0a:	f801 3b01 	strb.w	r3, [r1], #1
   12b0e:	9b05      	ldr	r3, [sp, #20]
   12b10:	4563      	cmp	r3, ip
   12b12:	eb00 020c 	add.w	r2, r0, ip
   12b16:	d8f6      	bhi.n	12b06 <fcvtbuf+0x3a>
   12b18:	4294      	cmp	r4, r2
   12b1a:	dd24      	ble.n	12b66 <fcvtbuf+0x9a>
   12b1c:	1aa2      	subs	r2, r4, r2
   12b1e:	440a      	add	r2, r1
   12b20:	2330      	movs	r3, #48	; 0x30
   12b22:	f801 3b01 	strb.w	r3, [r1], #1
   12b26:	4291      	cmp	r1, r2
   12b28:	d1fb      	bne.n	12b22 <fcvtbuf+0x56>
   12b2a:	2300      	movs	r3, #0
   12b2c:	7013      	strb	r3, [r2, #0]
   12b2e:	4628      	mov	r0, r5
   12b30:	b007      	add	sp, #28
   12b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12b36:	6cba      	ldr	r2, [r7, #72]	; 0x48
   12b38:	f100 0323 	add.w	r3, r0, #35	; 0x23
   12b3c:	429a      	cmp	r2, r3
   12b3e:	dd01      	ble.n	12b44 <fcvtbuf+0x78>
   12b40:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   12b42:	e7cd      	b.n	12ae0 <fcvtbuf+0x14>
   12b44:	f100 0924 	add.w	r9, r0, #36	; 0x24
   12b48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   12b4a:	464a      	mov	r2, r9
   12b4c:	4638      	mov	r0, r7
   12b4e:	ed8d 0b02 	vstr	d0, [sp, #8]
   12b52:	f7fc fba5 	bl	f2a0 <_realloc_r>
   12b56:	4605      	mov	r5, r0
   12b58:	2800      	cmp	r0, #0
   12b5a:	d0e8      	beq.n	12b2e <fcvtbuf+0x62>
   12b5c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   12b60:	ed9d 0b02 	vldr	d0, [sp, #8]
   12b64:	e7bc      	b.n	12ae0 <fcvtbuf+0x14>
   12b66:	460a      	mov	r2, r1
   12b68:	e7df      	b.n	12b2a <fcvtbuf+0x5e>
   12b6a:	bf00      	nop
   12b6c:	20008ffc 	.word	0x20008ffc

00012b70 <_svfprintf_r>:
   12b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b74:	ed2d 8b08 	vpush	{d8-d11}
   12b78:	b0d1      	sub	sp, #324	; 0x144
   12b7a:	460c      	mov	r4, r1
   12b7c:	ee0b 1a10 	vmov	s22, r1
   12b80:	4690      	mov	r8, r2
   12b82:	9308      	str	r3, [sp, #32]
   12b84:	4683      	mov	fp, r0
   12b86:	f003 fb59 	bl	1623c <_localeconv_r>
   12b8a:	6803      	ldr	r3, [r0, #0]
   12b8c:	9312      	str	r3, [sp, #72]	; 0x48
   12b8e:	4618      	mov	r0, r3
   12b90:	f7fe fc16 	bl	113c0 <strlen>
   12b94:	af20      	add	r7, sp, #128	; 0x80
   12b96:	9010      	str	r0, [sp, #64]	; 0x40
   12b98:	2208      	movs	r2, #8
   12b9a:	2100      	movs	r1, #0
   12b9c:	4638      	mov	r0, r7
   12b9e:	f7fe f827 	bl	10bf0 <memset>
   12ba2:	89a3      	ldrh	r3, [r4, #12]
   12ba4:	061b      	lsls	r3, r3, #24
   12ba6:	d503      	bpl.n	12bb0 <_svfprintf_r+0x40>
   12ba8:	6923      	ldr	r3, [r4, #16]
   12baa:	2b00      	cmp	r3, #0
   12bac:	f000 8755 	beq.w	13a5a <_svfprintf_r+0xeea>
   12bb0:	2300      	movs	r3, #0
   12bb2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 12dc0 <_svfprintf_r+0x250>
   12bb6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 12dc8 <_svfprintf_r+0x258>
   12bba:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   12bbe:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   12bc2:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   12bc6:	aa27      	add	r2, sp, #156	; 0x9c
   12bc8:	930e      	str	r3, [sp, #56]	; 0x38
   12bca:	9224      	str	r2, [sp, #144]	; 0x90
   12bcc:	4692      	mov	sl, r2
   12bce:	9311      	str	r3, [sp, #68]	; 0x44
   12bd0:	9304      	str	r3, [sp, #16]
   12bd2:	4644      	mov	r4, r8
   12bd4:	46a1      	mov	r9, r4
   12bd6:	4b7e      	ldr	r3, [pc, #504]	; (12dd0 <_svfprintf_r+0x260>)
   12bd8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12bdc:	f7fe f928 	bl	10e30 <__locale_mb_cur_max>
   12be0:	464a      	mov	r2, r9
   12be2:	4603      	mov	r3, r0
   12be4:	a91c      	add	r1, sp, #112	; 0x70
   12be6:	9700      	str	r7, [sp, #0]
   12be8:	4658      	mov	r0, fp
   12bea:	47a8      	blx	r5
   12bec:	2800      	cmp	r0, #0
   12bee:	f000 80b0 	beq.w	12d52 <_svfprintf_r+0x1e2>
   12bf2:	f2c0 80a6 	blt.w	12d42 <_svfprintf_r+0x1d2>
   12bf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12bf8:	2a25      	cmp	r2, #37	; 0x25
   12bfa:	4603      	mov	r3, r0
   12bfc:	d001      	beq.n	12c02 <_svfprintf_r+0x92>
   12bfe:	4499      	add	r9, r3
   12c00:	e7e9      	b.n	12bd6 <_svfprintf_r+0x66>
   12c02:	ebb9 0504 	subs.w	r5, r9, r4
   12c06:	4606      	mov	r6, r0
   12c08:	f040 80a7 	bne.w	12d5a <_svfprintf_r+0x1ea>
   12c0c:	2300      	movs	r3, #0
   12c0e:	f04f 32ff 	mov.w	r2, #4294967295
   12c12:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   12c16:	4698      	mov	r8, r3
   12c18:	9306      	str	r3, [sp, #24]
   12c1a:	f109 0901 	add.w	r9, r9, #1
   12c1e:	f899 3000 	ldrb.w	r3, [r9]
   12c22:	9203      	str	r2, [sp, #12]
   12c24:	252b      	movs	r5, #43	; 0x2b
   12c26:	2620      	movs	r6, #32
   12c28:	f109 0901 	add.w	r9, r9, #1
   12c2c:	f1a3 0220 	sub.w	r2, r3, #32
   12c30:	2a5a      	cmp	r2, #90	; 0x5a
   12c32:	f200 80cf 	bhi.w	12dd4 <_svfprintf_r+0x264>
   12c36:	e8df f012 	tbh	[pc, r2, lsl #1]
   12c3a:	02e8      	.short	0x02e8
   12c3c:	00cd00cd 	.word	0x00cd00cd
   12c40:	00cd02e3 	.word	0x00cd02e3
   12c44:	00cd00cd 	.word	0x00cd00cd
   12c48:	00cd006a 	.word	0x00cd006a
   12c4c:	020500cd 	.word	0x020500cd
   12c50:	00cd0284 	.word	0x00cd0284
   12c54:	02c90210 	.word	0x02c90210
   12c58:	02bd00cd 	.word	0x02bd00cd
   12c5c:	005b005b 	.word	0x005b005b
   12c60:	005b005b 	.word	0x005b005b
   12c64:	005b005b 	.word	0x005b005b
   12c68:	005b005b 	.word	0x005b005b
   12c6c:	00cd005b 	.word	0x00cd005b
   12c70:	00cd00cd 	.word	0x00cd00cd
   12c74:	00cd00cd 	.word	0x00cd00cd
   12c78:	00cd00cd 	.word	0x00cd00cd
   12c7c:	00cd0153 	.word	0x00cd0153
   12c80:	021a0183 	.word	0x021a0183
   12c84:	01530153 	.word	0x01530153
   12c88:	00cd0153 	.word	0x00cd0153
   12c8c:	00cd00cd 	.word	0x00cd00cd
   12c90:	021500cd 	.word	0x021500cd
   12c94:	00cd00cd 	.word	0x00cd00cd
   12c98:	00cd0296 	.word	0x00cd0296
   12c9c:	00cd00cd 	.word	0x00cd00cd
   12ca0:	00cd01ab 	.word	0x00cd01ab
   12ca4:	00cd02aa 	.word	0x00cd02aa
   12ca8:	06e300cd 	.word	0x06e300cd
   12cac:	00cd00cd 	.word	0x00cd00cd
   12cb0:	00cd00cd 	.word	0x00cd00cd
   12cb4:	00cd00cd 	.word	0x00cd00cd
   12cb8:	00cd00cd 	.word	0x00cd00cd
   12cbc:	00cd0153 	.word	0x00cd0153
   12cc0:	01de0183 	.word	0x01de0183
   12cc4:	01530153 	.word	0x01530153
   12cc8:	02770153 	.word	0x02770153
   12ccc:	007f01de 	.word	0x007f01de
   12cd0:	028900cd 	.word	0x028900cd
   12cd4:	025f00cd 	.word	0x025f00cd
   12cd8:	022f06e0 	.word	0x022f06e0
   12cdc:	00cd007f 	.word	0x00cd007f
   12ce0:	007c01ab 	.word	0x007c01ab
   12ce4:	00cd06b8 	.word	0x00cd06b8
   12ce8:	06bd00cd 	.word	0x06bd00cd
   12cec:	007c00cd 	.word	0x007c00cd
   12cf0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   12cf4:	2100      	movs	r1, #0
   12cf6:	f819 3b01 	ldrb.w	r3, [r9], #1
   12cfa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   12cfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   12d02:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   12d06:	2a09      	cmp	r2, #9
   12d08:	d9f5      	bls.n	12cf6 <_svfprintf_r+0x186>
   12d0a:	9106      	str	r1, [sp, #24]
   12d0c:	e78e      	b.n	12c2c <_svfprintf_r+0xbc>
   12d0e:	4658      	mov	r0, fp
   12d10:	f003 fa94 	bl	1623c <_localeconv_r>
   12d14:	6843      	ldr	r3, [r0, #4]
   12d16:	9315      	str	r3, [sp, #84]	; 0x54
   12d18:	4618      	mov	r0, r3
   12d1a:	f7fe fb51 	bl	113c0 <strlen>
   12d1e:	9016      	str	r0, [sp, #88]	; 0x58
   12d20:	4658      	mov	r0, fp
   12d22:	f003 fa8b 	bl	1623c <_localeconv_r>
   12d26:	6883      	ldr	r3, [r0, #8]
   12d28:	9313      	str	r3, [sp, #76]	; 0x4c
   12d2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   12d2c:	2b00      	cmp	r3, #0
   12d2e:	f040 862d 	bne.w	1398c <_svfprintf_r+0xe1c>
   12d32:	f899 3000 	ldrb.w	r3, [r9]
   12d36:	e777      	b.n	12c28 <_svfprintf_r+0xb8>
   12d38:	f899 3000 	ldrb.w	r3, [r9]
   12d3c:	f048 0820 	orr.w	r8, r8, #32
   12d40:	e772      	b.n	12c28 <_svfprintf_r+0xb8>
   12d42:	2208      	movs	r2, #8
   12d44:	2100      	movs	r1, #0
   12d46:	4638      	mov	r0, r7
   12d48:	f7fd ff52 	bl	10bf0 <memset>
   12d4c:	2301      	movs	r3, #1
   12d4e:	4499      	add	r9, r3
   12d50:	e741      	b.n	12bd6 <_svfprintf_r+0x66>
   12d52:	ebb9 0504 	subs.w	r5, r9, r4
   12d56:	4606      	mov	r6, r0
   12d58:	d011      	beq.n	12d7e <_svfprintf_r+0x20e>
   12d5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12d5c:	442b      	add	r3, r5
   12d5e:	9326      	str	r3, [sp, #152]	; 0x98
   12d60:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12d62:	3301      	adds	r3, #1
   12d64:	2b07      	cmp	r3, #7
   12d66:	e9ca 4500 	strd	r4, r5, [sl]
   12d6a:	9325      	str	r3, [sp, #148]	; 0x94
   12d6c:	dc1c      	bgt.n	12da8 <_svfprintf_r+0x238>
   12d6e:	f10a 0a08 	add.w	sl, sl, #8
   12d72:	9b04      	ldr	r3, [sp, #16]
   12d74:	442b      	add	r3, r5
   12d76:	9304      	str	r3, [sp, #16]
   12d78:	2e00      	cmp	r6, #0
   12d7a:	f47f af47 	bne.w	12c0c <_svfprintf_r+0x9c>
   12d7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   12d80:	2b00      	cmp	r3, #0
   12d82:	f041 820b 	bne.w	1419c <_svfprintf_r+0x162c>
   12d86:	ee1b 3a10 	vmov	r3, s22
   12d8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   12d8e:	f013 0f40 	tst.w	r3, #64	; 0x40
   12d92:	9b04      	ldr	r3, [sp, #16]
   12d94:	bf18      	it	ne
   12d96:	f04f 33ff 	movne.w	r3, #4294967295
   12d9a:	9304      	str	r3, [sp, #16]
   12d9c:	9804      	ldr	r0, [sp, #16]
   12d9e:	b051      	add	sp, #324	; 0x144
   12da0:	ecbd 8b08 	vpop	{d8-d11}
   12da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12da8:	ee1b 1a10 	vmov	r1, s22
   12dac:	aa24      	add	r2, sp, #144	; 0x90
   12dae:	4658      	mov	r0, fp
   12db0:	f004 fd6a 	bl	17888 <__ssprint_r>
   12db4:	2800      	cmp	r0, #0
   12db6:	d1e6      	bne.n	12d86 <_svfprintf_r+0x216>
   12db8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   12dbc:	e7d9      	b.n	12d72 <_svfprintf_r+0x202>
   12dbe:	bf00      	nop
	...
   12dc8:	ffffffff 	.word	0xffffffff
   12dcc:	7fefffff 	.word	0x7fefffff
   12dd0:	20008a74 	.word	0x20008a74
   12dd4:	930b      	str	r3, [sp, #44]	; 0x2c
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	d0d1      	beq.n	12d7e <_svfprintf_r+0x20e>
   12dda:	2100      	movs	r1, #0
   12ddc:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   12de0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   12de4:	2301      	movs	r3, #1
   12de6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   12dea:	9302      	str	r3, [sp, #8]
   12dec:	9107      	str	r1, [sp, #28]
   12dee:	9305      	str	r3, [sp, #20]
   12df0:	9103      	str	r1, [sp, #12]
   12df2:	910f      	str	r1, [sp, #60]	; 0x3c
   12df4:	ac37      	add	r4, sp, #220	; 0xdc
   12df6:	f018 0302 	ands.w	r3, r8, #2
   12dfa:	9309      	str	r3, [sp, #36]	; 0x24
   12dfc:	d002      	beq.n	12e04 <_svfprintf_r+0x294>
   12dfe:	9b02      	ldr	r3, [sp, #8]
   12e00:	3302      	adds	r3, #2
   12e02:	9302      	str	r3, [sp, #8]
   12e04:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   12e08:	930a      	str	r3, [sp, #40]	; 0x28
   12e0a:	d105      	bne.n	12e18 <_svfprintf_r+0x2a8>
   12e0c:	9b06      	ldr	r3, [sp, #24]
   12e0e:	9a02      	ldr	r2, [sp, #8]
   12e10:	1a9d      	subs	r5, r3, r2
   12e12:	2d00      	cmp	r5, #0
   12e14:	f300 8369 	bgt.w	134ea <_svfprintf_r+0x97a>
   12e18:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12e1a:	b189      	cbz	r1, 12e40 <_svfprintf_r+0x2d0>
   12e1c:	9925      	ldr	r1, [sp, #148]	; 0x94
   12e1e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   12e22:	3101      	adds	r1, #1
   12e24:	3201      	adds	r2, #1
   12e26:	f8ca 0000 	str.w	r0, [sl]
   12e2a:	2907      	cmp	r1, #7
   12e2c:	f04f 0001 	mov.w	r0, #1
   12e30:	9226      	str	r2, [sp, #152]	; 0x98
   12e32:	9125      	str	r1, [sp, #148]	; 0x94
   12e34:	f8ca 0004 	str.w	r0, [sl, #4]
   12e38:	f300 83a2 	bgt.w	13580 <_svfprintf_r+0xa10>
   12e3c:	f10a 0a08 	add.w	sl, sl, #8
   12e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12e42:	b183      	cbz	r3, 12e66 <_svfprintf_r+0x2f6>
   12e44:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12e46:	a91a      	add	r1, sp, #104	; 0x68
   12e48:	3301      	adds	r3, #1
   12e4a:	3202      	adds	r2, #2
   12e4c:	f8ca 1000 	str.w	r1, [sl]
   12e50:	2b07      	cmp	r3, #7
   12e52:	f04f 0102 	mov.w	r1, #2
   12e56:	9226      	str	r2, [sp, #152]	; 0x98
   12e58:	9325      	str	r3, [sp, #148]	; 0x94
   12e5a:	f8ca 1004 	str.w	r1, [sl, #4]
   12e5e:	f300 83a3 	bgt.w	135a8 <_svfprintf_r+0xa38>
   12e62:	f10a 0a08 	add.w	sl, sl, #8
   12e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12e68:	2b80      	cmp	r3, #128	; 0x80
   12e6a:	f000 826c 	beq.w	13346 <_svfprintf_r+0x7d6>
   12e6e:	9b03      	ldr	r3, [sp, #12]
   12e70:	9905      	ldr	r1, [sp, #20]
   12e72:	1a5d      	subs	r5, r3, r1
   12e74:	2d00      	cmp	r5, #0
   12e76:	f300 82a5 	bgt.w	133c4 <_svfprintf_r+0x854>
   12e7a:	f418 7f80 	tst.w	r8, #256	; 0x100
   12e7e:	f040 820d 	bne.w	1329c <_svfprintf_r+0x72c>
   12e82:	9b05      	ldr	r3, [sp, #20]
   12e84:	f8ca 3004 	str.w	r3, [sl, #4]
   12e88:	441a      	add	r2, r3
   12e8a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12e8c:	f8ca 4000 	str.w	r4, [sl]
   12e90:	3301      	adds	r3, #1
   12e92:	2b07      	cmp	r3, #7
   12e94:	9226      	str	r2, [sp, #152]	; 0x98
   12e96:	9325      	str	r3, [sp, #148]	; 0x94
   12e98:	f300 831b 	bgt.w	134d2 <_svfprintf_r+0x962>
   12e9c:	f10a 0a08 	add.w	sl, sl, #8
   12ea0:	f018 0f04 	tst.w	r8, #4
   12ea4:	d005      	beq.n	12eb2 <_svfprintf_r+0x342>
   12ea6:	9b06      	ldr	r3, [sp, #24]
   12ea8:	9902      	ldr	r1, [sp, #8]
   12eaa:	1a5c      	subs	r4, r3, r1
   12eac:	2c00      	cmp	r4, #0
   12eae:	f300 8388 	bgt.w	135c2 <_svfprintf_r+0xa52>
   12eb2:	9b04      	ldr	r3, [sp, #16]
   12eb4:	9906      	ldr	r1, [sp, #24]
   12eb6:	9802      	ldr	r0, [sp, #8]
   12eb8:	4281      	cmp	r1, r0
   12eba:	bfac      	ite	ge
   12ebc:	185b      	addge	r3, r3, r1
   12ebe:	181b      	addlt	r3, r3, r0
   12ec0:	9304      	str	r3, [sp, #16]
   12ec2:	2a00      	cmp	r2, #0
   12ec4:	f040 82b0 	bne.w	13428 <_svfprintf_r+0x8b8>
   12ec8:	2300      	movs	r3, #0
   12eca:	9325      	str	r3, [sp, #148]	; 0x94
   12ecc:	9b07      	ldr	r3, [sp, #28]
   12ece:	b11b      	cbz	r3, 12ed8 <_svfprintf_r+0x368>
   12ed0:	9907      	ldr	r1, [sp, #28]
   12ed2:	4658      	mov	r0, fp
   12ed4:	f7fe fb86 	bl	115e4 <_free_r>
   12ed8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   12edc:	464c      	mov	r4, r9
   12ede:	e679      	b.n	12bd4 <_svfprintf_r+0x64>
   12ee0:	930b      	str	r3, [sp, #44]	; 0x2c
   12ee2:	9b08      	ldr	r3, [sp, #32]
   12ee4:	3307      	adds	r3, #7
   12ee6:	f023 0307 	bic.w	r3, r3, #7
   12eea:	ecb3 8b02 	vldmia	r3!, {d8}
   12eee:	eeb0 7bc8 	vabs.f64	d7, d8
   12ef2:	eeb4 7b49 	vcmp.f64	d7, d9
   12ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12efa:	9308      	str	r3, [sp, #32]
   12efc:	f340 84e9 	ble.w	138d2 <_svfprintf_r+0xd62>
   12f00:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   12f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12f08:	f101 8059 	bmi.w	13fbe <_svfprintf_r+0x144e>
   12f0c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   12f10:	4cab      	ldr	r4, [pc, #684]	; (131c0 <_svfprintf_r+0x650>)
   12f12:	4bac      	ldr	r3, [pc, #688]	; (131c4 <_svfprintf_r+0x654>)
   12f14:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   12f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12f1a:	2a47      	cmp	r2, #71	; 0x47
   12f1c:	bfc8      	it	gt
   12f1e:	461c      	movgt	r4, r3
   12f20:	2300      	movs	r3, #0
   12f22:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   12f26:	2203      	movs	r2, #3
   12f28:	9307      	str	r3, [sp, #28]
   12f2a:	9202      	str	r2, [sp, #8]
   12f2c:	9205      	str	r2, [sp, #20]
   12f2e:	9303      	str	r3, [sp, #12]
   12f30:	930f      	str	r3, [sp, #60]	; 0x3c
   12f32:	2900      	cmp	r1, #0
   12f34:	f43f af5f 	beq.w	12df6 <_svfprintf_r+0x286>
   12f38:	9b02      	ldr	r3, [sp, #8]
   12f3a:	3301      	adds	r3, #1
   12f3c:	9302      	str	r3, [sp, #8]
   12f3e:	e75a      	b.n	12df6 <_svfprintf_r+0x286>
   12f40:	2b43      	cmp	r3, #67	; 0x43
   12f42:	930b      	str	r3, [sp, #44]	; 0x2c
   12f44:	d003      	beq.n	12f4e <_svfprintf_r+0x3de>
   12f46:	f018 0f10 	tst.w	r8, #16
   12f4a:	f000 855d 	beq.w	13a08 <_svfprintf_r+0xe98>
   12f4e:	9d08      	ldr	r5, [sp, #32]
   12f50:	2208      	movs	r2, #8
   12f52:	2100      	movs	r1, #0
   12f54:	a822      	add	r0, sp, #136	; 0x88
   12f56:	ac37      	add	r4, sp, #220	; 0xdc
   12f58:	f7fd fe4a 	bl	10bf0 <memset>
   12f5c:	ab22      	add	r3, sp, #136	; 0x88
   12f5e:	f855 2b04 	ldr.w	r2, [r5], #4
   12f62:	4621      	mov	r1, r4
   12f64:	4658      	mov	r0, fp
   12f66:	f004 fb65 	bl	17634 <_wcrtomb_r>
   12f6a:	4603      	mov	r3, r0
   12f6c:	3301      	adds	r3, #1
   12f6e:	9005      	str	r0, [sp, #20]
   12f70:	f001 82ee 	beq.w	14550 <_svfprintf_r+0x19e0>
   12f74:	9b05      	ldr	r3, [sp, #20]
   12f76:	9508      	str	r5, [sp, #32]
   12f78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12f7c:	9302      	str	r3, [sp, #8]
   12f7e:	2100      	movs	r1, #0
   12f80:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   12f84:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   12f88:	9107      	str	r1, [sp, #28]
   12f8a:	9103      	str	r1, [sp, #12]
   12f8c:	910f      	str	r1, [sp, #60]	; 0x3c
   12f8e:	e732      	b.n	12df6 <_svfprintf_r+0x286>
   12f90:	930b      	str	r3, [sp, #44]	; 0x2c
   12f92:	9b08      	ldr	r3, [sp, #32]
   12f94:	461a      	mov	r2, r3
   12f96:	2300      	movs	r3, #0
   12f98:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   12f9c:	4613      	mov	r3, r2
   12f9e:	f853 4b04 	ldr.w	r4, [r3], #4
   12fa2:	9308      	str	r3, [sp, #32]
   12fa4:	2c00      	cmp	r4, #0
   12fa6:	f000 8548 	beq.w	13a3a <_svfprintf_r+0xeca>
   12faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12fac:	2b53      	cmp	r3, #83	; 0x53
   12fae:	f000 86ec 	beq.w	13d8a <_svfprintf_r+0x121a>
   12fb2:	f018 0310 	ands.w	r3, r8, #16
   12fb6:	930c      	str	r3, [sp, #48]	; 0x30
   12fb8:	f040 86e7 	bne.w	13d8a <_svfprintf_r+0x121a>
   12fbc:	9b03      	ldr	r3, [sp, #12]
   12fbe:	1c5d      	adds	r5, r3, #1
   12fc0:	f001 80e5 	beq.w	1418e <_svfprintf_r+0x161e>
   12fc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   12fc6:	461a      	mov	r2, r3
   12fc8:	4620      	mov	r0, r4
   12fca:	f7fe f9a9 	bl	11320 <memchr>
   12fce:	9007      	str	r0, [sp, #28]
   12fd0:	2800      	cmp	r0, #0
   12fd2:	f001 8328 	beq.w	14626 <_svfprintf_r+0x1ab6>
   12fd6:	9b07      	ldr	r3, [sp, #28]
   12fd8:	1b1a      	subs	r2, r3, r4
   12fda:	9205      	str	r2, [sp, #20]
   12fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12fde:	9303      	str	r3, [sp, #12]
   12fe0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   12fe4:	930f      	str	r3, [sp, #60]	; 0x3c
   12fe6:	930d      	str	r3, [sp, #52]	; 0x34
   12fe8:	9307      	str	r3, [sp, #28]
   12fea:	2373      	movs	r3, #115	; 0x73
   12fec:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   12ff0:	9202      	str	r2, [sp, #8]
   12ff2:	930b      	str	r3, [sp, #44]	; 0x2c
   12ff4:	e79d      	b.n	12f32 <_svfprintf_r+0x3c2>
   12ff6:	f018 0f20 	tst.w	r8, #32
   12ffa:	930b      	str	r3, [sp, #44]	; 0x2c
   12ffc:	9b08      	ldr	r3, [sp, #32]
   12ffe:	d03d      	beq.n	1307c <_svfprintf_r+0x50c>
   13000:	3307      	adds	r3, #7
   13002:	f023 0307 	bic.w	r3, r3, #7
   13006:	461a      	mov	r2, r3
   13008:	4611      	mov	r1, r2
   1300a:	685b      	ldr	r3, [r3, #4]
   1300c:	f851 2b08 	ldr.w	r2, [r1], #8
   13010:	9108      	str	r1, [sp, #32]
   13012:	4619      	mov	r1, r3
   13014:	2b00      	cmp	r3, #0
   13016:	f2c0 840c 	blt.w	13832 <_svfprintf_r+0xcc2>
   1301a:	9b03      	ldr	r3, [sp, #12]
   1301c:	3301      	adds	r3, #1
   1301e:	f000 829e 	beq.w	1355e <_svfprintf_r+0x9ee>
   13022:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   13026:	ea52 0301 	orrs.w	r3, r2, r1
   1302a:	9002      	str	r0, [sp, #8]
   1302c:	f040 8299 	bne.w	13562 <_svfprintf_r+0x9f2>
   13030:	9b03      	ldr	r3, [sp, #12]
   13032:	2b00      	cmp	r3, #0
   13034:	f040 829a 	bne.w	1356c <_svfprintf_r+0x9fc>
   13038:	4680      	mov	r8, r0
   1303a:	2300      	movs	r3, #0
   1303c:	9303      	str	r3, [sp, #12]
   1303e:	9305      	str	r3, [sp, #20]
   13040:	ac50      	add	r4, sp, #320	; 0x140
   13042:	e106      	b.n	13252 <_svfprintf_r+0x6e2>
   13044:	9b08      	ldr	r3, [sp, #32]
   13046:	f853 2b04 	ldr.w	r2, [r3], #4
   1304a:	9206      	str	r2, [sp, #24]
   1304c:	2a00      	cmp	r2, #0
   1304e:	f280 8419 	bge.w	13884 <_svfprintf_r+0xd14>
   13052:	9a06      	ldr	r2, [sp, #24]
   13054:	9308      	str	r3, [sp, #32]
   13056:	4252      	negs	r2, r2
   13058:	9206      	str	r2, [sp, #24]
   1305a:	f899 3000 	ldrb.w	r3, [r9]
   1305e:	f048 0804 	orr.w	r8, r8, #4
   13062:	e5e1      	b.n	12c28 <_svfprintf_r+0xb8>
   13064:	f899 3000 	ldrb.w	r3, [r9]
   13068:	f048 0808 	orr.w	r8, r8, #8
   1306c:	e5dc      	b.n	12c28 <_svfprintf_r+0xb8>
   1306e:	f048 0810 	orr.w	r8, r8, #16
   13072:	f018 0f20 	tst.w	r8, #32
   13076:	930b      	str	r3, [sp, #44]	; 0x2c
   13078:	9b08      	ldr	r3, [sp, #32]
   1307a:	d1c1      	bne.n	13000 <_svfprintf_r+0x490>
   1307c:	f018 0f10 	tst.w	r8, #16
   13080:	f040 840b 	bne.w	1389a <_svfprintf_r+0xd2a>
   13084:	f018 0f40 	tst.w	r8, #64	; 0x40
   13088:	f000 8403 	beq.w	13892 <_svfprintf_r+0xd22>
   1308c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   13090:	9308      	str	r3, [sp, #32]
   13092:	17d1      	asrs	r1, r2, #31
   13094:	460b      	mov	r3, r1
   13096:	e7bd      	b.n	13014 <_svfprintf_r+0x4a4>
   13098:	9b08      	ldr	r3, [sp, #32]
   1309a:	f048 0202 	orr.w	r2, r8, #2
   1309e:	9202      	str	r2, [sp, #8]
   130a0:	f853 2b04 	ldr.w	r2, [r3], #4
   130a4:	9308      	str	r3, [sp, #32]
   130a6:	f647 0330 	movw	r3, #30768	; 0x7830
   130aa:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   130ae:	2078      	movs	r0, #120	; 0x78
   130b0:	4b45      	ldr	r3, [pc, #276]	; (131c8 <_svfprintf_r+0x658>)
   130b2:	9311      	str	r3, [sp, #68]	; 0x44
   130b4:	2100      	movs	r1, #0
   130b6:	2302      	movs	r3, #2
   130b8:	900b      	str	r0, [sp, #44]	; 0x2c
   130ba:	2000      	movs	r0, #0
   130bc:	9c03      	ldr	r4, [sp, #12]
   130be:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   130c2:	1c60      	adds	r0, r4, #1
   130c4:	f000 80ad 	beq.w	13222 <_svfprintf_r+0x6b2>
   130c8:	9802      	ldr	r0, [sp, #8]
   130ca:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   130ce:	ea52 0001 	orrs.w	r0, r2, r1
   130d2:	f040 80a4 	bne.w	1321e <_svfprintf_r+0x6ae>
   130d6:	2c00      	cmp	r4, #0
   130d8:	f040 86ae 	bne.w	13e38 <_svfprintf_r+0x12c8>
   130dc:	2b00      	cmp	r3, #0
   130de:	d1ac      	bne.n	1303a <_svfprintf_r+0x4ca>
   130e0:	9b02      	ldr	r3, [sp, #8]
   130e2:	f013 0301 	ands.w	r3, r3, #1
   130e6:	9305      	str	r3, [sp, #20]
   130e8:	f000 83d1 	beq.w	1388e <_svfprintf_r+0xd1e>
   130ec:	2330      	movs	r3, #48	; 0x30
   130ee:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   130f2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   130f6:	e0ac      	b.n	13252 <_svfprintf_r+0x6e2>
   130f8:	f018 0f20 	tst.w	r8, #32
   130fc:	f040 83d4 	bne.w	138a8 <_svfprintf_r+0xd38>
   13100:	f018 0f10 	tst.w	r8, #16
   13104:	f040 869f 	bne.w	13e46 <_svfprintf_r+0x12d6>
   13108:	f018 0f40 	tst.w	r8, #64	; 0x40
   1310c:	f040 8797 	bne.w	1403e <_svfprintf_r+0x14ce>
   13110:	f418 7f00 	tst.w	r8, #512	; 0x200
   13114:	f000 8697 	beq.w	13e46 <_svfprintf_r+0x12d6>
   13118:	9b08      	ldr	r3, [sp, #32]
   1311a:	9904      	ldr	r1, [sp, #16]
   1311c:	f853 2b04 	ldr.w	r2, [r3], #4
   13120:	9308      	str	r3, [sp, #32]
   13122:	7011      	strb	r1, [r2, #0]
   13124:	464c      	mov	r4, r9
   13126:	e555      	b.n	12bd4 <_svfprintf_r+0x64>
   13128:	f899 3000 	ldrb.w	r3, [r9]
   1312c:	2b68      	cmp	r3, #104	; 0x68
   1312e:	bf03      	ittte	eq
   13130:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13134:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   13138:	f109 0901 	addeq.w	r9, r9, #1
   1313c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   13140:	e572      	b.n	12c28 <_svfprintf_r+0xb8>
   13142:	f899 3000 	ldrb.w	r3, [r9]
   13146:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1314a:	e56d      	b.n	12c28 <_svfprintf_r+0xb8>
   1314c:	f899 3000 	ldrb.w	r3, [r9]
   13150:	2b6c      	cmp	r3, #108	; 0x6c
   13152:	bf03      	ittte	eq
   13154:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13158:	f048 0820 	orreq.w	r8, r8, #32
   1315c:	f109 0901 	addeq.w	r9, r9, #1
   13160:	f048 0810 	orrne.w	r8, r8, #16
   13164:	e560      	b.n	12c28 <_svfprintf_r+0xb8>
   13166:	930b      	str	r3, [sp, #44]	; 0x2c
   13168:	f048 0810 	orr.w	r8, r8, #16
   1316c:	f018 0120 	ands.w	r1, r8, #32
   13170:	f000 8351 	beq.w	13816 <_svfprintf_r+0xca6>
   13174:	9b08      	ldr	r3, [sp, #32]
   13176:	3307      	adds	r3, #7
   13178:	f023 0307 	bic.w	r3, r3, #7
   1317c:	6859      	ldr	r1, [r3, #4]
   1317e:	f853 2b08 	ldr.w	r2, [r3], #8
   13182:	9308      	str	r3, [sp, #32]
   13184:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   13188:	9302      	str	r3, [sp, #8]
   1318a:	2300      	movs	r3, #0
   1318c:	e795      	b.n	130ba <_svfprintf_r+0x54a>
   1318e:	930b      	str	r3, [sp, #44]	; 0x2c
   13190:	f048 0310 	orr.w	r3, r8, #16
   13194:	9302      	str	r3, [sp, #8]
   13196:	9b02      	ldr	r3, [sp, #8]
   13198:	f013 0120 	ands.w	r1, r3, #32
   1319c:	f000 8329 	beq.w	137f2 <_svfprintf_r+0xc82>
   131a0:	9b08      	ldr	r3, [sp, #32]
   131a2:	3307      	adds	r3, #7
   131a4:	f023 0307 	bic.w	r3, r3, #7
   131a8:	6859      	ldr	r1, [r3, #4]
   131aa:	f853 2b08 	ldr.w	r2, [r3], #8
   131ae:	9308      	str	r3, [sp, #32]
   131b0:	2301      	movs	r3, #1
   131b2:	e782      	b.n	130ba <_svfprintf_r+0x54a>
   131b4:	f899 3000 	ldrb.w	r3, [r9]
   131b8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   131bc:	e534      	b.n	12c28 <_svfprintf_r+0xb8>
   131be:	bf00      	nop
   131c0:	200010b0 	.word	0x200010b0
   131c4:	20000b2c 	.word	0x20000b2c
   131c8:	200010b8 	.word	0x200010b8
   131cc:	4649      	mov	r1, r9
   131ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   131d2:	2b2a      	cmp	r3, #42	; 0x2a
   131d4:	f001 8249 	beq.w	1466a <_svfprintf_r+0x1afa>
   131d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   131dc:	2a09      	cmp	r2, #9
   131de:	4689      	mov	r9, r1
   131e0:	bf98      	it	ls
   131e2:	2100      	movls	r1, #0
   131e4:	f201 8144 	bhi.w	14470 <_svfprintf_r+0x1900>
   131e8:	f819 3b01 	ldrb.w	r3, [r9], #1
   131ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   131f0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   131f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   131f8:	2a09      	cmp	r2, #9
   131fa:	d9f5      	bls.n	131e8 <_svfprintf_r+0x678>
   131fc:	9103      	str	r1, [sp, #12]
   131fe:	e515      	b.n	12c2c <_svfprintf_r+0xbc>
   13200:	f899 3000 	ldrb.w	r3, [r9]
   13204:	f048 0801 	orr.w	r8, r8, #1
   13208:	e50e      	b.n	12c28 <_svfprintf_r+0xb8>
   1320a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   1320e:	2b00      	cmp	r3, #0
   13210:	f47f ad8f 	bne.w	12d32 <_svfprintf_r+0x1c2>
   13214:	f899 3000 	ldrb.w	r3, [r9]
   13218:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   1321c:	e504      	b.n	12c28 <_svfprintf_r+0xb8>
   1321e:	f8cd 8008 	str.w	r8, [sp, #8]
   13222:	2b01      	cmp	r3, #1
   13224:	f000 819d 	beq.w	13562 <_svfprintf_r+0x9f2>
   13228:	2b02      	cmp	r3, #2
   1322a:	ac50      	add	r4, sp, #320	; 0x140
   1322c:	d120      	bne.n	13270 <_svfprintf_r+0x700>
   1322e:	9811      	ldr	r0, [sp, #68]	; 0x44
   13230:	f002 030f 	and.w	r3, r2, #15
   13234:	0912      	lsrs	r2, r2, #4
   13236:	5cc3      	ldrb	r3, [r0, r3]
   13238:	f804 3d01 	strb.w	r3, [r4, #-1]!
   1323c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   13240:	0909      	lsrs	r1, r1, #4
   13242:	ea52 0301 	orrs.w	r3, r2, r1
   13246:	d1f3      	bne.n	13230 <_svfprintf_r+0x6c0>
   13248:	ab50      	add	r3, sp, #320	; 0x140
   1324a:	1b1b      	subs	r3, r3, r4
   1324c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13250:	9305      	str	r3, [sp, #20]
   13252:	9a05      	ldr	r2, [sp, #20]
   13254:	9803      	ldr	r0, [sp, #12]
   13256:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1325a:	4282      	cmp	r2, r0
   1325c:	f04f 0300 	mov.w	r3, #0
   13260:	bfb8      	it	lt
   13262:	4602      	movlt	r2, r0
   13264:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13268:	9307      	str	r3, [sp, #28]
   1326a:	9202      	str	r2, [sp, #8]
   1326c:	930f      	str	r3, [sp, #60]	; 0x3c
   1326e:	e660      	b.n	12f32 <_svfprintf_r+0x3c2>
   13270:	f002 0307 	and.w	r3, r2, #7
   13274:	08d2      	lsrs	r2, r2, #3
   13276:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   1327a:	08c9      	lsrs	r1, r1, #3
   1327c:	3330      	adds	r3, #48	; 0x30
   1327e:	ea52 0501 	orrs.w	r5, r2, r1
   13282:	4620      	mov	r0, r4
   13284:	f804 3d01 	strb.w	r3, [r4, #-1]!
   13288:	d1f2      	bne.n	13270 <_svfprintf_r+0x700>
   1328a:	9a02      	ldr	r2, [sp, #8]
   1328c:	07d1      	lsls	r1, r2, #31
   1328e:	f100 824d 	bmi.w	1372c <_svfprintf_r+0xbbc>
   13292:	ab50      	add	r3, sp, #320	; 0x140
   13294:	1b1b      	subs	r3, r3, r4
   13296:	4690      	mov	r8, r2
   13298:	9305      	str	r3, [sp, #20]
   1329a:	e7da      	b.n	13252 <_svfprintf_r+0x6e2>
   1329c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1329e:	2b65      	cmp	r3, #101	; 0x65
   132a0:	f340 80d4 	ble.w	1344c <_svfprintf_r+0x8dc>
   132a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   132a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   132ac:	f040 81c1 	bne.w	13632 <_svfprintf_r+0xac2>
   132b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   132b2:	49ba      	ldr	r1, [pc, #744]	; (1359c <_svfprintf_r+0xa2c>)
   132b4:	f8ca 1000 	str.w	r1, [sl]
   132b8:	3301      	adds	r3, #1
   132ba:	3201      	adds	r2, #1
   132bc:	2101      	movs	r1, #1
   132be:	2b07      	cmp	r3, #7
   132c0:	9226      	str	r2, [sp, #152]	; 0x98
   132c2:	9325      	str	r3, [sp, #148]	; 0x94
   132c4:	f8ca 1004 	str.w	r1, [sl, #4]
   132c8:	f300 8551 	bgt.w	13d6e <_svfprintf_r+0x11fe>
   132cc:	f10a 0a08 	add.w	sl, sl, #8
   132d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   132d2:	990e      	ldr	r1, [sp, #56]	; 0x38
   132d4:	428b      	cmp	r3, r1
   132d6:	f280 82d0 	bge.w	1387a <_svfprintf_r+0xd0a>
   132da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   132dc:	9912      	ldr	r1, [sp, #72]	; 0x48
   132de:	441a      	add	r2, r3
   132e0:	e9ca 1300 	strd	r1, r3, [sl]
   132e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   132e6:	9226      	str	r2, [sp, #152]	; 0x98
   132e8:	3301      	adds	r3, #1
   132ea:	2b07      	cmp	r3, #7
   132ec:	9325      	str	r3, [sp, #148]	; 0x94
   132ee:	f300 8397 	bgt.w	13a20 <_svfprintf_r+0xeb0>
   132f2:	f10a 0a08 	add.w	sl, sl, #8
   132f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   132f8:	1e5c      	subs	r4, r3, #1
   132fa:	2c00      	cmp	r4, #0
   132fc:	f77f add0 	ble.w	12ea0 <_svfprintf_r+0x330>
   13300:	2c10      	cmp	r4, #16
   13302:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13304:	f340 856e 	ble.w	13de4 <_svfprintf_r+0x1274>
   13308:	ee1b 6a10 	vmov	r6, s22
   1330c:	2510      	movs	r5, #16
   1330e:	e005      	b.n	1331c <_svfprintf_r+0x7ac>
   13310:	f10a 0a08 	add.w	sl, sl, #8
   13314:	3c10      	subs	r4, #16
   13316:	2c10      	cmp	r4, #16
   13318:	f340 8564 	ble.w	13de4 <_svfprintf_r+0x1274>
   1331c:	3301      	adds	r3, #1
   1331e:	49a0      	ldr	r1, [pc, #640]	; (135a0 <_svfprintf_r+0xa30>)
   13320:	3210      	adds	r2, #16
   13322:	2b07      	cmp	r3, #7
   13324:	e9ca 1500 	strd	r1, r5, [sl]
   13328:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1332c:	ddf0      	ble.n	13310 <_svfprintf_r+0x7a0>
   1332e:	aa24      	add	r2, sp, #144	; 0x90
   13330:	4631      	mov	r1, r6
   13332:	4658      	mov	r0, fp
   13334:	f004 faa8 	bl	17888 <__ssprint_r>
   13338:	2800      	cmp	r0, #0
   1333a:	d17e      	bne.n	1343a <_svfprintf_r+0x8ca>
   1333c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13340:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13344:	e7e6      	b.n	13314 <_svfprintf_r+0x7a4>
   13346:	9b06      	ldr	r3, [sp, #24]
   13348:	9902      	ldr	r1, [sp, #8]
   1334a:	1a5d      	subs	r5, r3, r1
   1334c:	2d00      	cmp	r5, #0
   1334e:	f77f ad8e 	ble.w	12e6e <_svfprintf_r+0x2fe>
   13352:	2d10      	cmp	r5, #16
   13354:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13356:	dd21      	ble.n	1339c <_svfprintf_r+0x82c>
   13358:	9409      	str	r4, [sp, #36]	; 0x24
   1335a:	2610      	movs	r6, #16
   1335c:	ee1b 4a10 	vmov	r4, s22
   13360:	e004      	b.n	1336c <_svfprintf_r+0x7fc>
   13362:	3d10      	subs	r5, #16
   13364:	2d10      	cmp	r5, #16
   13366:	f10a 0a08 	add.w	sl, sl, #8
   1336a:	dd16      	ble.n	1339a <_svfprintf_r+0x82a>
   1336c:	3301      	adds	r3, #1
   1336e:	498c      	ldr	r1, [pc, #560]	; (135a0 <_svfprintf_r+0xa30>)
   13370:	3210      	adds	r2, #16
   13372:	2b07      	cmp	r3, #7
   13374:	e9ca 1600 	strd	r1, r6, [sl]
   13378:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1337c:	ddf1      	ble.n	13362 <_svfprintf_r+0x7f2>
   1337e:	aa24      	add	r2, sp, #144	; 0x90
   13380:	4621      	mov	r1, r4
   13382:	4658      	mov	r0, fp
   13384:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13388:	f004 fa7e 	bl	17888 <__ssprint_r>
   1338c:	2800      	cmp	r0, #0
   1338e:	d154      	bne.n	1343a <_svfprintf_r+0x8ca>
   13390:	3d10      	subs	r5, #16
   13392:	2d10      	cmp	r5, #16
   13394:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13398:	dce8      	bgt.n	1336c <_svfprintf_r+0x7fc>
   1339a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1339c:	4980      	ldr	r1, [pc, #512]	; (135a0 <_svfprintf_r+0xa30>)
   1339e:	f8ca 5004 	str.w	r5, [sl, #4]
   133a2:	3301      	adds	r3, #1
   133a4:	442a      	add	r2, r5
   133a6:	2b07      	cmp	r3, #7
   133a8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   133ac:	f8ca 1000 	str.w	r1, [sl]
   133b0:	f300 8526 	bgt.w	13e00 <_svfprintf_r+0x1290>
   133b4:	9b03      	ldr	r3, [sp, #12]
   133b6:	9905      	ldr	r1, [sp, #20]
   133b8:	1a5d      	subs	r5, r3, r1
   133ba:	2d00      	cmp	r5, #0
   133bc:	f10a 0a08 	add.w	sl, sl, #8
   133c0:	f77f ad5b 	ble.w	12e7a <_svfprintf_r+0x30a>
   133c4:	2d10      	cmp	r5, #16
   133c6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   133c8:	dd1f      	ble.n	1340a <_svfprintf_r+0x89a>
   133ca:	4651      	mov	r1, sl
   133cc:	2610      	movs	r6, #16
   133ce:	ee1b aa10 	vmov	sl, s22
   133d2:	e004      	b.n	133de <_svfprintf_r+0x86e>
   133d4:	3d10      	subs	r5, #16
   133d6:	2d10      	cmp	r5, #16
   133d8:	f101 0108 	add.w	r1, r1, #8
   133dc:	dd14      	ble.n	13408 <_svfprintf_r+0x898>
   133de:	3301      	adds	r3, #1
   133e0:	486f      	ldr	r0, [pc, #444]	; (135a0 <_svfprintf_r+0xa30>)
   133e2:	3210      	adds	r2, #16
   133e4:	2b07      	cmp	r3, #7
   133e6:	e9c1 0600 	strd	r0, r6, [r1]
   133ea:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   133ee:	ddf1      	ble.n	133d4 <_svfprintf_r+0x864>
   133f0:	aa24      	add	r2, sp, #144	; 0x90
   133f2:	4651      	mov	r1, sl
   133f4:	4658      	mov	r0, fp
   133f6:	f004 fa47 	bl	17888 <__ssprint_r>
   133fa:	b9f0      	cbnz	r0, 1343a <_svfprintf_r+0x8ca>
   133fc:	3d10      	subs	r5, #16
   133fe:	2d10      	cmp	r5, #16
   13400:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13404:	a927      	add	r1, sp, #156	; 0x9c
   13406:	dcea      	bgt.n	133de <_svfprintf_r+0x86e>
   13408:	468a      	mov	sl, r1
   1340a:	3301      	adds	r3, #1
   1340c:	4964      	ldr	r1, [pc, #400]	; (135a0 <_svfprintf_r+0xa30>)
   1340e:	f8ca 5004 	str.w	r5, [sl, #4]
   13412:	442a      	add	r2, r5
   13414:	2b07      	cmp	r3, #7
   13416:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1341a:	f8ca 1000 	str.w	r1, [sl]
   1341e:	f300 81da 	bgt.w	137d6 <_svfprintf_r+0xc66>
   13422:	f10a 0a08 	add.w	sl, sl, #8
   13426:	e528      	b.n	12e7a <_svfprintf_r+0x30a>
   13428:	ee1b 1a10 	vmov	r1, s22
   1342c:	aa24      	add	r2, sp, #144	; 0x90
   1342e:	4658      	mov	r0, fp
   13430:	f004 fa2a 	bl	17888 <__ssprint_r>
   13434:	2800      	cmp	r0, #0
   13436:	f43f ad47 	beq.w	12ec8 <_svfprintf_r+0x358>
   1343a:	9b07      	ldr	r3, [sp, #28]
   1343c:	2b00      	cmp	r3, #0
   1343e:	f43f aca2 	beq.w	12d86 <_svfprintf_r+0x216>
   13442:	9907      	ldr	r1, [sp, #28]
   13444:	4658      	mov	r0, fp
   13446:	f7fe f8cd 	bl	115e4 <_free_r>
   1344a:	e49c      	b.n	12d86 <_svfprintf_r+0x216>
   1344c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1344e:	2b01      	cmp	r3, #1
   13450:	f340 817a 	ble.w	13748 <_svfprintf_r+0xbd8>
   13454:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13456:	f8ca 4000 	str.w	r4, [sl]
   1345a:	3301      	adds	r3, #1
   1345c:	3201      	adds	r2, #1
   1345e:	2101      	movs	r1, #1
   13460:	2b07      	cmp	r3, #7
   13462:	9226      	str	r2, [sp, #152]	; 0x98
   13464:	9325      	str	r3, [sp, #148]	; 0x94
   13466:	f8ca 1004 	str.w	r1, [sl, #4]
   1346a:	f300 81f8 	bgt.w	1385e <_svfprintf_r+0xcee>
   1346e:	f10a 0a08 	add.w	sl, sl, #8
   13472:	9910      	ldr	r1, [sp, #64]	; 0x40
   13474:	9812      	ldr	r0, [sp, #72]	; 0x48
   13476:	3301      	adds	r3, #1
   13478:	440a      	add	r2, r1
   1347a:	2b07      	cmp	r3, #7
   1347c:	e9ca 0100 	strd	r0, r1, [sl]
   13480:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13484:	f300 81dd 	bgt.w	13842 <_svfprintf_r+0xcd2>
   13488:	f10a 0a08 	add.w	sl, sl, #8
   1348c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13494:	f000 8177 	beq.w	13786 <_svfprintf_r+0xc16>
   13498:	990e      	ldr	r1, [sp, #56]	; 0x38
   1349a:	3301      	adds	r3, #1
   1349c:	3901      	subs	r1, #1
   1349e:	3401      	adds	r4, #1
   134a0:	440a      	add	r2, r1
   134a2:	2b07      	cmp	r3, #7
   134a4:	f8ca 4000 	str.w	r4, [sl]
   134a8:	9325      	str	r3, [sp, #148]	; 0x94
   134aa:	f8ca 1004 	str.w	r1, [sl, #4]
   134ae:	9226      	str	r2, [sp, #152]	; 0x98
   134b0:	f300 815b 	bgt.w	1376a <_svfprintf_r+0xbfa>
   134b4:	f10a 0a08 	add.w	sl, sl, #8
   134b8:	9914      	ldr	r1, [sp, #80]	; 0x50
   134ba:	f8ca 1004 	str.w	r1, [sl, #4]
   134be:	3301      	adds	r3, #1
   134c0:	440a      	add	r2, r1
   134c2:	2b07      	cmp	r3, #7
   134c4:	a91e      	add	r1, sp, #120	; 0x78
   134c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   134ca:	f8ca 1000 	str.w	r1, [sl]
   134ce:	f77f ace5 	ble.w	12e9c <_svfprintf_r+0x32c>
   134d2:	ee1b 1a10 	vmov	r1, s22
   134d6:	aa24      	add	r2, sp, #144	; 0x90
   134d8:	4658      	mov	r0, fp
   134da:	f004 f9d5 	bl	17888 <__ssprint_r>
   134de:	2800      	cmp	r0, #0
   134e0:	d1ab      	bne.n	1343a <_svfprintf_r+0x8ca>
   134e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   134e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   134e8:	e4da      	b.n	12ea0 <_svfprintf_r+0x330>
   134ea:	2d10      	cmp	r5, #16
   134ec:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   134f0:	4e2c      	ldr	r6, [pc, #176]	; (135a4 <_svfprintf_r+0xa34>)
   134f2:	dd24      	ble.n	1353e <_svfprintf_r+0x9ce>
   134f4:	9417      	str	r4, [sp, #92]	; 0x5c
   134f6:	2310      	movs	r3, #16
   134f8:	ee1b 4a10 	vmov	r4, s22
   134fc:	4608      	mov	r0, r1
   134fe:	e004      	b.n	1350a <_svfprintf_r+0x99a>
   13500:	3d10      	subs	r5, #16
   13502:	2d10      	cmp	r5, #16
   13504:	f10a 0a08 	add.w	sl, sl, #8
   13508:	dd17      	ble.n	1353a <_svfprintf_r+0x9ca>
   1350a:	3001      	adds	r0, #1
   1350c:	3210      	adds	r2, #16
   1350e:	2807      	cmp	r0, #7
   13510:	e9ca 6300 	strd	r6, r3, [sl]
   13514:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   13518:	ddf2      	ble.n	13500 <_svfprintf_r+0x990>
   1351a:	aa24      	add	r2, sp, #144	; 0x90
   1351c:	4621      	mov	r1, r4
   1351e:	4658      	mov	r0, fp
   13520:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13524:	f004 f9b0 	bl	17888 <__ssprint_r>
   13528:	2800      	cmp	r0, #0
   1352a:	d186      	bne.n	1343a <_svfprintf_r+0x8ca>
   1352c:	3d10      	subs	r5, #16
   1352e:	2d10      	cmp	r5, #16
   13530:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   13534:	f04f 0310 	mov.w	r3, #16
   13538:	dce7      	bgt.n	1350a <_svfprintf_r+0x99a>
   1353a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   1353c:	4601      	mov	r1, r0
   1353e:	3101      	adds	r1, #1
   13540:	442a      	add	r2, r5
   13542:	2907      	cmp	r1, #7
   13544:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   13548:	f8ca 6000 	str.w	r6, [sl]
   1354c:	f8ca 5004 	str.w	r5, [sl, #4]
   13550:	f300 83bd 	bgt.w	13cce <_svfprintf_r+0x115e>
   13554:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13558:	f10a 0a08 	add.w	sl, sl, #8
   1355c:	e45d      	b.n	12e1a <_svfprintf_r+0x2aa>
   1355e:	f8cd 8008 	str.w	r8, [sp, #8]
   13562:	2a0a      	cmp	r2, #10
   13564:	f171 0300 	sbcs.w	r3, r1, #0
   13568:	f080 8345 	bcs.w	13bf6 <_svfprintf_r+0x1086>
   1356c:	3230      	adds	r2, #48	; 0x30
   1356e:	2301      	movs	r3, #1
   13570:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13574:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   13578:	9305      	str	r3, [sp, #20]
   1357a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   1357e:	e668      	b.n	13252 <_svfprintf_r+0x6e2>
   13580:	ee1b 1a10 	vmov	r1, s22
   13584:	aa24      	add	r2, sp, #144	; 0x90
   13586:	4658      	mov	r0, fp
   13588:	f004 f97e 	bl	17888 <__ssprint_r>
   1358c:	2800      	cmp	r0, #0
   1358e:	f47f af54 	bne.w	1343a <_svfprintf_r+0x8ca>
   13592:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13594:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13598:	e452      	b.n	12e40 <_svfprintf_r+0x2d0>
   1359a:	bf00      	nop
   1359c:	20007e94 	.word	0x20007e94
   135a0:	20008908 	.word	0x20008908
   135a4:	20002b60 	.word	0x20002b60
   135a8:	ee1b 1a10 	vmov	r1, s22
   135ac:	aa24      	add	r2, sp, #144	; 0x90
   135ae:	4658      	mov	r0, fp
   135b0:	f004 f96a 	bl	17888 <__ssprint_r>
   135b4:	2800      	cmp	r0, #0
   135b6:	f47f af40 	bne.w	1343a <_svfprintf_r+0x8ca>
   135ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
   135bc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   135c0:	e451      	b.n	12e66 <_svfprintf_r+0x2f6>
   135c2:	2c10      	cmp	r4, #16
   135c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   135c6:	4ebe      	ldr	r6, [pc, #760]	; (138c0 <_svfprintf_r+0xd50>)
   135c8:	dd1f      	ble.n	1360a <_svfprintf_r+0xa9a>
   135ca:	ee1b 8a10 	vmov	r8, s22
   135ce:	2510      	movs	r5, #16
   135d0:	e004      	b.n	135dc <_svfprintf_r+0xa6c>
   135d2:	3c10      	subs	r4, #16
   135d4:	2c10      	cmp	r4, #16
   135d6:	f10a 0a08 	add.w	sl, sl, #8
   135da:	dd16      	ble.n	1360a <_svfprintf_r+0xa9a>
   135dc:	3301      	adds	r3, #1
   135de:	3210      	adds	r2, #16
   135e0:	2b07      	cmp	r3, #7
   135e2:	e9ca 6500 	strd	r6, r5, [sl]
   135e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   135ea:	ddf2      	ble.n	135d2 <_svfprintf_r+0xa62>
   135ec:	aa24      	add	r2, sp, #144	; 0x90
   135ee:	4641      	mov	r1, r8
   135f0:	4658      	mov	r0, fp
   135f2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   135f6:	f004 f947 	bl	17888 <__ssprint_r>
   135fa:	2800      	cmp	r0, #0
   135fc:	f47f af1d 	bne.w	1343a <_svfprintf_r+0x8ca>
   13600:	3c10      	subs	r4, #16
   13602:	2c10      	cmp	r4, #16
   13604:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13608:	dce8      	bgt.n	135dc <_svfprintf_r+0xa6c>
   1360a:	3301      	adds	r3, #1
   1360c:	4422      	add	r2, r4
   1360e:	2b07      	cmp	r3, #7
   13610:	e9ca 6400 	strd	r6, r4, [sl]
   13614:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13618:	f77f ac4b 	ble.w	12eb2 <_svfprintf_r+0x342>
   1361c:	ee1b 1a10 	vmov	r1, s22
   13620:	aa24      	add	r2, sp, #144	; 0x90
   13622:	4658      	mov	r0, fp
   13624:	f004 f930 	bl	17888 <__ssprint_r>
   13628:	2800      	cmp	r0, #0
   1362a:	f47f af06 	bne.w	1343a <_svfprintf_r+0x8ca>
   1362e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13630:	e43f      	b.n	12eb2 <_svfprintf_r+0x342>
   13632:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13634:	2900      	cmp	r1, #0
   13636:	f340 835a 	ble.w	13cee <_svfprintf_r+0x117e>
   1363a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1363c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1363e:	429e      	cmp	r6, r3
   13640:	bfa8      	it	ge
   13642:	461e      	movge	r6, r3
   13644:	2e00      	cmp	r6, #0
   13646:	dd0b      	ble.n	13660 <_svfprintf_r+0xaf0>
   13648:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1364a:	3301      	adds	r3, #1
   1364c:	4432      	add	r2, r6
   1364e:	2b07      	cmp	r3, #7
   13650:	e9ca 4600 	strd	r4, r6, [sl]
   13654:	9226      	str	r2, [sp, #152]	; 0x98
   13656:	9325      	str	r3, [sp, #148]	; 0x94
   13658:	f300 8689 	bgt.w	1436e <_svfprintf_r+0x17fe>
   1365c:	f10a 0a08 	add.w	sl, sl, #8
   13660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   13662:	2e00      	cmp	r6, #0
   13664:	bfa8      	it	ge
   13666:	1bad      	subge	r5, r5, r6
   13668:	2d00      	cmp	r5, #0
   1366a:	f300 8203 	bgt.w	13a74 <_svfprintf_r+0xf04>
   1366e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13670:	f418 6f80 	tst.w	r8, #1024	; 0x400
   13674:	4423      	add	r3, r4
   13676:	9305      	str	r3, [sp, #20]
   13678:	f040 821f 	bne.w	13aba <_svfprintf_r+0xf4a>
   1367c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1367e:	990e      	ldr	r1, [sp, #56]	; 0x38
   13680:	428b      	cmp	r3, r1
   13682:	db03      	blt.n	1368c <_svfprintf_r+0xb1c>
   13684:	f018 0f01 	tst.w	r8, #1
   13688:	f000 84cf 	beq.w	1402a <_svfprintf_r+0x14ba>
   1368c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1368e:	9812      	ldr	r0, [sp, #72]	; 0x48
   13690:	440a      	add	r2, r1
   13692:	e9ca 0100 	strd	r0, r1, [sl]
   13696:	9925      	ldr	r1, [sp, #148]	; 0x94
   13698:	9226      	str	r2, [sp, #152]	; 0x98
   1369a:	3101      	adds	r1, #1
   1369c:	2907      	cmp	r1, #7
   1369e:	9125      	str	r1, [sp, #148]	; 0x94
   136a0:	f300 86a5 	bgt.w	143ee <_svfprintf_r+0x187e>
   136a4:	f10a 0a08 	add.w	sl, sl, #8
   136a8:	990e      	ldr	r1, [sp, #56]	; 0x38
   136aa:	1865      	adds	r5, r4, r1
   136ac:	1acc      	subs	r4, r1, r3
   136ae:	9b05      	ldr	r3, [sp, #20]
   136b0:	1aed      	subs	r5, r5, r3
   136b2:	42a5      	cmp	r5, r4
   136b4:	bfa8      	it	ge
   136b6:	4625      	movge	r5, r4
   136b8:	2d00      	cmp	r5, #0
   136ba:	dd0d      	ble.n	136d8 <_svfprintf_r+0xb68>
   136bc:	f8ca 3000 	str.w	r3, [sl]
   136c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   136c2:	f8ca 5004 	str.w	r5, [sl, #4]
   136c6:	3301      	adds	r3, #1
   136c8:	442a      	add	r2, r5
   136ca:	2b07      	cmp	r3, #7
   136cc:	9226      	str	r2, [sp, #152]	; 0x98
   136ce:	9325      	str	r3, [sp, #148]	; 0x94
   136d0:	f300 86bb 	bgt.w	1444a <_svfprintf_r+0x18da>
   136d4:	f10a 0a08 	add.w	sl, sl, #8
   136d8:	2d00      	cmp	r5, #0
   136da:	bfa8      	it	ge
   136dc:	1b64      	subge	r4, r4, r5
   136de:	2c00      	cmp	r4, #0
   136e0:	f77f abde 	ble.w	12ea0 <_svfprintf_r+0x330>
   136e4:	2c10      	cmp	r4, #16
   136e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   136e8:	f340 837c 	ble.w	13de4 <_svfprintf_r+0x1274>
   136ec:	ee1b 6a10 	vmov	r6, s22
   136f0:	2510      	movs	r5, #16
   136f2:	e005      	b.n	13700 <_svfprintf_r+0xb90>
   136f4:	f10a 0a08 	add.w	sl, sl, #8
   136f8:	3c10      	subs	r4, #16
   136fa:	2c10      	cmp	r4, #16
   136fc:	f340 8372 	ble.w	13de4 <_svfprintf_r+0x1274>
   13700:	3301      	adds	r3, #1
   13702:	4970      	ldr	r1, [pc, #448]	; (138c4 <_svfprintf_r+0xd54>)
   13704:	3210      	adds	r2, #16
   13706:	2b07      	cmp	r3, #7
   13708:	e9ca 1500 	strd	r1, r5, [sl]
   1370c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13710:	ddf0      	ble.n	136f4 <_svfprintf_r+0xb84>
   13712:	aa24      	add	r2, sp, #144	; 0x90
   13714:	4631      	mov	r1, r6
   13716:	4658      	mov	r0, fp
   13718:	f004 f8b6 	bl	17888 <__ssprint_r>
   1371c:	2800      	cmp	r0, #0
   1371e:	f47f ae8c 	bne.w	1343a <_svfprintf_r+0x8ca>
   13722:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13726:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1372a:	e7e5      	b.n	136f8 <_svfprintf_r+0xb88>
   1372c:	2b30      	cmp	r3, #48	; 0x30
   1372e:	f43f ad8b 	beq.w	13248 <_svfprintf_r+0x6d8>
   13732:	2330      	movs	r3, #48	; 0x30
   13734:	3802      	subs	r0, #2
   13736:	f804 3c01 	strb.w	r3, [r4, #-1]
   1373a:	ab50      	add	r3, sp, #320	; 0x140
   1373c:	1a1b      	subs	r3, r3, r0
   1373e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13742:	9305      	str	r3, [sp, #20]
   13744:	4604      	mov	r4, r0
   13746:	e584      	b.n	13252 <_svfprintf_r+0x6e2>
   13748:	f018 0f01 	tst.w	r8, #1
   1374c:	f47f ae82 	bne.w	13454 <_svfprintf_r+0x8e4>
   13750:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13752:	f8ca 4000 	str.w	r4, [sl]
   13756:	3301      	adds	r3, #1
   13758:	3201      	adds	r2, #1
   1375a:	2101      	movs	r1, #1
   1375c:	2b07      	cmp	r3, #7
   1375e:	9226      	str	r2, [sp, #152]	; 0x98
   13760:	9325      	str	r3, [sp, #148]	; 0x94
   13762:	f8ca 1004 	str.w	r1, [sl, #4]
   13766:	f77f aea5 	ble.w	134b4 <_svfprintf_r+0x944>
   1376a:	ee1b 1a10 	vmov	r1, s22
   1376e:	aa24      	add	r2, sp, #144	; 0x90
   13770:	4658      	mov	r0, fp
   13772:	f004 f889 	bl	17888 <__ssprint_r>
   13776:	2800      	cmp	r0, #0
   13778:	f47f ae5f 	bne.w	1343a <_svfprintf_r+0x8ca>
   1377c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13780:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13784:	e698      	b.n	134b8 <_svfprintf_r+0x948>
   13786:	990e      	ldr	r1, [sp, #56]	; 0x38
   13788:	1e4c      	subs	r4, r1, #1
   1378a:	2c00      	cmp	r4, #0
   1378c:	f77f ae94 	ble.w	134b8 <_svfprintf_r+0x948>
   13790:	2c10      	cmp	r4, #16
   13792:	f340 8361 	ble.w	13e58 <_svfprintf_r+0x12e8>
   13796:	ee1b 6a10 	vmov	r6, s22
   1379a:	2510      	movs	r5, #16
   1379c:	e005      	b.n	137aa <_svfprintf_r+0xc3a>
   1379e:	f10a 0a08 	add.w	sl, sl, #8
   137a2:	3c10      	subs	r4, #16
   137a4:	2c10      	cmp	r4, #16
   137a6:	f340 8357 	ble.w	13e58 <_svfprintf_r+0x12e8>
   137aa:	3301      	adds	r3, #1
   137ac:	4945      	ldr	r1, [pc, #276]	; (138c4 <_svfprintf_r+0xd54>)
   137ae:	3210      	adds	r2, #16
   137b0:	2b07      	cmp	r3, #7
   137b2:	e9ca 1500 	strd	r1, r5, [sl]
   137b6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   137ba:	ddf0      	ble.n	1379e <_svfprintf_r+0xc2e>
   137bc:	aa24      	add	r2, sp, #144	; 0x90
   137be:	4631      	mov	r1, r6
   137c0:	4658      	mov	r0, fp
   137c2:	f004 f861 	bl	17888 <__ssprint_r>
   137c6:	2800      	cmp	r0, #0
   137c8:	f47f ae37 	bne.w	1343a <_svfprintf_r+0x8ca>
   137cc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   137d0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   137d4:	e7e5      	b.n	137a2 <_svfprintf_r+0xc32>
   137d6:	ee1b 1a10 	vmov	r1, s22
   137da:	aa24      	add	r2, sp, #144	; 0x90
   137dc:	4658      	mov	r0, fp
   137de:	f004 f853 	bl	17888 <__ssprint_r>
   137e2:	2800      	cmp	r0, #0
   137e4:	f47f ae29 	bne.w	1343a <_svfprintf_r+0x8ca>
   137e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   137ea:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   137ee:	f7ff bb44 	b.w	12e7a <_svfprintf_r+0x30a>
   137f2:	9b02      	ldr	r3, [sp, #8]
   137f4:	f013 0310 	ands.w	r3, r3, #16
   137f8:	f040 80c1 	bne.w	1397e <_svfprintf_r+0xe0e>
   137fc:	9a02      	ldr	r2, [sp, #8]
   137fe:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   13802:	f000 837a 	beq.w	13efa <_svfprintf_r+0x138a>
   13806:	9808      	ldr	r0, [sp, #32]
   13808:	f850 2b04 	ldr.w	r2, [r0], #4
   1380c:	9008      	str	r0, [sp, #32]
   1380e:	4619      	mov	r1, r3
   13810:	b292      	uxth	r2, r2
   13812:	2301      	movs	r3, #1
   13814:	e451      	b.n	130ba <_svfprintf_r+0x54a>
   13816:	f018 0310 	ands.w	r3, r8, #16
   1381a:	d155      	bne.n	138c8 <_svfprintf_r+0xd58>
   1381c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   13820:	f000 835d 	beq.w	13ede <_svfprintf_r+0x136e>
   13824:	9808      	ldr	r0, [sp, #32]
   13826:	f850 2b04 	ldr.w	r2, [r0], #4
   1382a:	9008      	str	r0, [sp, #32]
   1382c:	4619      	mov	r1, r3
   1382e:	b292      	uxth	r2, r2
   13830:	e4a8      	b.n	13184 <_svfprintf_r+0x614>
   13832:	4252      	negs	r2, r2
   13834:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13838:	f8cd 8008 	str.w	r8, [sp, #8]
   1383c:	202d      	movs	r0, #45	; 0x2d
   1383e:	2301      	movs	r3, #1
   13840:	e43c      	b.n	130bc <_svfprintf_r+0x54c>
   13842:	ee1b 1a10 	vmov	r1, s22
   13846:	aa24      	add	r2, sp, #144	; 0x90
   13848:	4658      	mov	r0, fp
   1384a:	f004 f81d 	bl	17888 <__ssprint_r>
   1384e:	2800      	cmp	r0, #0
   13850:	f47f adf3 	bne.w	1343a <_svfprintf_r+0x8ca>
   13854:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13858:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1385c:	e616      	b.n	1348c <_svfprintf_r+0x91c>
   1385e:	ee1b 1a10 	vmov	r1, s22
   13862:	aa24      	add	r2, sp, #144	; 0x90
   13864:	4658      	mov	r0, fp
   13866:	f004 f80f 	bl	17888 <__ssprint_r>
   1386a:	2800      	cmp	r0, #0
   1386c:	f47f ade5 	bne.w	1343a <_svfprintf_r+0x8ca>
   13870:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13874:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13878:	e5fb      	b.n	13472 <_svfprintf_r+0x902>
   1387a:	f018 0f01 	tst.w	r8, #1
   1387e:	f43f ab0f 	beq.w	12ea0 <_svfprintf_r+0x330>
   13882:	e52a      	b.n	132da <_svfprintf_r+0x76a>
   13884:	9308      	str	r3, [sp, #32]
   13886:	f899 3000 	ldrb.w	r3, [r9]
   1388a:	f7ff b9cd 	b.w	12c28 <_svfprintf_r+0xb8>
   1388e:	ac50      	add	r4, sp, #320	; 0x140
   13890:	e4df      	b.n	13252 <_svfprintf_r+0x6e2>
   13892:	f418 7f00 	tst.w	r8, #512	; 0x200
   13896:	f040 83db 	bne.w	14050 <_svfprintf_r+0x14e0>
   1389a:	f853 2b04 	ldr.w	r2, [r3], #4
   1389e:	9308      	str	r3, [sp, #32]
   138a0:	17d1      	asrs	r1, r2, #31
   138a2:	460b      	mov	r3, r1
   138a4:	f7ff bbb6 	b.w	13014 <_svfprintf_r+0x4a4>
   138a8:	9b08      	ldr	r3, [sp, #32]
   138aa:	9804      	ldr	r0, [sp, #16]
   138ac:	f853 1b04 	ldr.w	r1, [r3], #4
   138b0:	9308      	str	r3, [sp, #32]
   138b2:	17c2      	asrs	r2, r0, #31
   138b4:	e9c1 0200 	strd	r0, r2, [r1]
   138b8:	464c      	mov	r4, r9
   138ba:	f7ff b98b 	b.w	12bd4 <_svfprintf_r+0x64>
   138be:	bf00      	nop
   138c0:	20002b60 	.word	0x20002b60
   138c4:	20008908 	.word	0x20008908
   138c8:	9b08      	ldr	r3, [sp, #32]
   138ca:	f853 2b04 	ldr.w	r2, [r3], #4
   138ce:	9308      	str	r3, [sp, #32]
   138d0:	e458      	b.n	13184 <_svfprintf_r+0x614>
   138d2:	eeb4 8b48 	vcmp.f64	d8, d8
   138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   138da:	f180 8694 	bvs.w	14606 <_svfprintf_r+0x1a96>
   138de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138e0:	2b61      	cmp	r3, #97	; 0x61
   138e2:	f000 8552 	beq.w	1438a <_svfprintf_r+0x181a>
   138e6:	2b41      	cmp	r3, #65	; 0x41
   138e8:	f000 85c0 	beq.w	1446c <_svfprintf_r+0x18fc>
   138ec:	9b03      	ldr	r3, [sp, #12]
   138ee:	3301      	adds	r3, #1
   138f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   138f2:	f023 0520 	bic.w	r5, r3, #32
   138f6:	f000 8480 	beq.w	141fa <_svfprintf_r+0x168a>
   138fa:	2d47      	cmp	r5, #71	; 0x47
   138fc:	d104      	bne.n	13908 <_svfprintf_r+0xd98>
   138fe:	9b03      	ldr	r3, [sp, #12]
   13900:	2b00      	cmp	r3, #0
   13902:	bf08      	it	eq
   13904:	2301      	moveq	r3, #1
   13906:	9303      	str	r3, [sp, #12]
   13908:	ee18 3a90 	vmov	r3, s17
   1390c:	2b00      	cmp	r3, #0
   1390e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   13912:	4646      	mov	r6, r8
   13914:	f2c0 8618 	blt.w	14548 <_svfprintf_r+0x19d8>
   13918:	eeb0 ab48 	vmov.f64	d10, d8
   1391c:	2300      	movs	r3, #0
   1391e:	4690      	mov	r8, r2
   13920:	9309      	str	r3, [sp, #36]	; 0x24
   13922:	9307      	str	r3, [sp, #28]
   13924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13926:	3b41      	subs	r3, #65	; 0x41
   13928:	2b25      	cmp	r3, #37	; 0x25
   1392a:	f200 8398 	bhi.w	1405e <_svfprintf_r+0x14ee>
   1392e:	e8df f013 	tbh	[pc, r3, lsl #1]
   13932:	046f      	.short	0x046f
   13934:	03960396 	.word	0x03960396
   13938:	04680396 	.word	0x04680396
   1393c:	0396046c 	.word	0x0396046c
   13940:	03960396 	.word	0x03960396
   13944:	03960396 	.word	0x03960396
   13948:	03960396 	.word	0x03960396
   1394c:	03960396 	.word	0x03960396
   13950:	03960396 	.word	0x03960396
   13954:	03960396 	.word	0x03960396
   13958:	03960396 	.word	0x03960396
   1395c:	03960396 	.word	0x03960396
   13960:	03960396 	.word	0x03960396
   13964:	03960396 	.word	0x03960396
   13968:	03960396 	.word	0x03960396
   1396c:	03960396 	.word	0x03960396
   13970:	03960396 	.word	0x03960396
   13974:	03960396 	.word	0x03960396
   13978:	04680396 	.word	0x04680396
   1397c:	046c      	.short	0x046c
   1397e:	9b08      	ldr	r3, [sp, #32]
   13980:	f853 2b04 	ldr.w	r2, [r3], #4
   13984:	9308      	str	r3, [sp, #32]
   13986:	2301      	movs	r3, #1
   13988:	f7ff bb97 	b.w	130ba <_svfprintf_r+0x54a>
   1398c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1398e:	2b00      	cmp	r3, #0
   13990:	f43f a9cf 	beq.w	12d32 <_svfprintf_r+0x1c2>
   13994:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13996:	781b      	ldrb	r3, [r3, #0]
   13998:	2b00      	cmp	r3, #0
   1399a:	f43f a9ca 	beq.w	12d32 <_svfprintf_r+0x1c2>
   1399e:	f899 3000 	ldrb.w	r3, [r9]
   139a2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   139a6:	f7ff b93f 	b.w	12c28 <_svfprintf_r+0xb8>
   139aa:	930b      	str	r3, [sp, #44]	; 0x2c
   139ac:	f8cd 8008 	str.w	r8, [sp, #8]
   139b0:	f7ff bbf1 	b.w	13196 <_svfprintf_r+0x626>
   139b4:	930b      	str	r3, [sp, #44]	; 0x2c
   139b6:	4b9a      	ldr	r3, [pc, #616]	; (13c20 <_svfprintf_r+0x10b0>)
   139b8:	9311      	str	r3, [sp, #68]	; 0x44
   139ba:	f018 0120 	ands.w	r1, r8, #32
   139be:	f000 8105 	beq.w	13bcc <_svfprintf_r+0x105c>
   139c2:	9b08      	ldr	r3, [sp, #32]
   139c4:	3307      	adds	r3, #7
   139c6:	f023 0307 	bic.w	r3, r3, #7
   139ca:	6859      	ldr	r1, [r3, #4]
   139cc:	f853 2b08 	ldr.w	r2, [r3], #8
   139d0:	9308      	str	r3, [sp, #32]
   139d2:	f018 0f01 	tst.w	r8, #1
   139d6:	d00a      	beq.n	139ee <_svfprintf_r+0xe7e>
   139d8:	ea52 0301 	orrs.w	r3, r2, r1
   139dc:	d007      	beq.n	139ee <_svfprintf_r+0xe7e>
   139de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   139e0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   139e4:	2330      	movs	r3, #48	; 0x30
   139e6:	f048 0802 	orr.w	r8, r8, #2
   139ea:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   139ee:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   139f2:	9302      	str	r3, [sp, #8]
   139f4:	2302      	movs	r3, #2
   139f6:	f7ff bb60 	b.w	130ba <_svfprintf_r+0x54a>
   139fa:	930b      	str	r3, [sp, #44]	; 0x2c
   139fc:	f7ff bbb6 	b.w	1316c <_svfprintf_r+0x5fc>
   13a00:	930b      	str	r3, [sp, #44]	; 0x2c
   13a02:	4b88      	ldr	r3, [pc, #544]	; (13c24 <_svfprintf_r+0x10b4>)
   13a04:	9311      	str	r3, [sp, #68]	; 0x44
   13a06:	e7d8      	b.n	139ba <_svfprintf_r+0xe4a>
   13a08:	9b08      	ldr	r3, [sp, #32]
   13a0a:	2101      	movs	r1, #1
   13a0c:	f853 2b04 	ldr.w	r2, [r3], #4
   13a10:	9102      	str	r1, [sp, #8]
   13a12:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   13a16:	9308      	str	r3, [sp, #32]
   13a18:	9105      	str	r1, [sp, #20]
   13a1a:	ac37      	add	r4, sp, #220	; 0xdc
   13a1c:	f7ff baaf 	b.w	12f7e <_svfprintf_r+0x40e>
   13a20:	ee1b 1a10 	vmov	r1, s22
   13a24:	aa24      	add	r2, sp, #144	; 0x90
   13a26:	4658      	mov	r0, fp
   13a28:	f003 ff2e 	bl	17888 <__ssprint_r>
   13a2c:	2800      	cmp	r0, #0
   13a2e:	f47f ad04 	bne.w	1343a <_svfprintf_r+0x8ca>
   13a32:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13a34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13a38:	e45d      	b.n	132f6 <_svfprintf_r+0x786>
   13a3a:	9b03      	ldr	r3, [sp, #12]
   13a3c:	9407      	str	r4, [sp, #28]
   13a3e:	2b06      	cmp	r3, #6
   13a40:	4622      	mov	r2, r4
   13a42:	bf28      	it	cs
   13a44:	2306      	movcs	r3, #6
   13a46:	9403      	str	r4, [sp, #12]
   13a48:	4621      	mov	r1, r4
   13a4a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   13a4e:	4c76      	ldr	r4, [pc, #472]	; (13c28 <_svfprintf_r+0x10b8>)
   13a50:	9302      	str	r3, [sp, #8]
   13a52:	9305      	str	r3, [sp, #20]
   13a54:	920f      	str	r2, [sp, #60]	; 0x3c
   13a56:	f7ff ba6c 	b.w	12f32 <_svfprintf_r+0x3c2>
   13a5a:	2140      	movs	r1, #64	; 0x40
   13a5c:	4658      	mov	r0, fp
   13a5e:	f7fb f957 	bl	ed10 <_malloc_r>
   13a62:	6020      	str	r0, [r4, #0]
   13a64:	6120      	str	r0, [r4, #16]
   13a66:	2800      	cmp	r0, #0
   13a68:	f000 860f 	beq.w	1468a <_svfprintf_r+0x1b1a>
   13a6c:	2340      	movs	r3, #64	; 0x40
   13a6e:	6163      	str	r3, [r4, #20]
   13a70:	f7ff b89e 	b.w	12bb0 <_svfprintf_r+0x40>
   13a74:	2d10      	cmp	r5, #16
   13a76:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13a78:	f340 825d 	ble.w	13f36 <_svfprintf_r+0x13c6>
   13a7c:	4651      	mov	r1, sl
   13a7e:	2610      	movs	r6, #16
   13a80:	ee1b aa10 	vmov	sl, s22
   13a84:	e004      	b.n	13a90 <_svfprintf_r+0xf20>
   13a86:	3108      	adds	r1, #8
   13a88:	3d10      	subs	r5, #16
   13a8a:	2d10      	cmp	r5, #16
   13a8c:	f340 8252 	ble.w	13f34 <_svfprintf_r+0x13c4>
   13a90:	3301      	adds	r3, #1
   13a92:	4866      	ldr	r0, [pc, #408]	; (13c2c <_svfprintf_r+0x10bc>)
   13a94:	3210      	adds	r2, #16
   13a96:	2b07      	cmp	r3, #7
   13a98:	e9c1 0600 	strd	r0, r6, [r1]
   13a9c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13aa0:	ddf1      	ble.n	13a86 <_svfprintf_r+0xf16>
   13aa2:	aa24      	add	r2, sp, #144	; 0x90
   13aa4:	4651      	mov	r1, sl
   13aa6:	4658      	mov	r0, fp
   13aa8:	f003 feee 	bl	17888 <__ssprint_r>
   13aac:	2800      	cmp	r0, #0
   13aae:	f47f acc4 	bne.w	1343a <_svfprintf_r+0x8ca>
   13ab2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13ab6:	a927      	add	r1, sp, #156	; 0x9c
   13ab8:	e7e6      	b.n	13a88 <_svfprintf_r+0xf18>
   13aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13abc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   13ac0:	18e3      	adds	r3, r4, r3
   13ac2:	9303      	str	r3, [sp, #12]
   13ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13ac6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   13aca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   13acc:	9d05      	ldr	r5, [sp, #20]
   13ace:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   13ad2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   13ad6:	940b      	str	r4, [sp, #44]	; 0x2c
   13ad8:	ee1b 1a10 	vmov	r1, s22
   13adc:	4650      	mov	r0, sl
   13ade:	2b00      	cmp	r3, #0
   13ae0:	d034      	beq.n	13b4c <_svfprintf_r+0xfdc>
   13ae2:	f1b8 0f00 	cmp.w	r8, #0
   13ae6:	d135      	bne.n	13b54 <_svfprintf_r+0xfe4>
   13ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13aea:	3b01      	subs	r3, #1
   13aec:	3e01      	subs	r6, #1
   13aee:	930d      	str	r3, [sp, #52]	; 0x34
   13af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13af2:	e9c0 3900 	strd	r3, r9, [r0]
   13af6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13af8:	3301      	adds	r3, #1
   13afa:	444a      	add	r2, r9
   13afc:	2b07      	cmp	r3, #7
   13afe:	9226      	str	r2, [sp, #152]	; 0x98
   13b00:	9325      	str	r3, [sp, #148]	; 0x94
   13b02:	dc6c      	bgt.n	13bde <_svfprintf_r+0x106e>
   13b04:	3008      	adds	r0, #8
   13b06:	9b03      	ldr	r3, [sp, #12]
   13b08:	f896 c000 	ldrb.w	ip, [r6]
   13b0c:	1b5b      	subs	r3, r3, r5
   13b0e:	4563      	cmp	r3, ip
   13b10:	bfa8      	it	ge
   13b12:	4663      	movge	r3, ip
   13b14:	2b00      	cmp	r3, #0
   13b16:	469a      	mov	sl, r3
   13b18:	dd0c      	ble.n	13b34 <_svfprintf_r+0xfc4>
   13b1a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   13b1c:	3401      	adds	r4, #1
   13b1e:	441a      	add	r2, r3
   13b20:	2c07      	cmp	r4, #7
   13b22:	e9c0 5300 	strd	r5, r3, [r0]
   13b26:	9226      	str	r2, [sp, #152]	; 0x98
   13b28:	9425      	str	r4, [sp, #148]	; 0x94
   13b2a:	f300 8177 	bgt.w	13e1c <_svfprintf_r+0x12ac>
   13b2e:	f896 c000 	ldrb.w	ip, [r6]
   13b32:	3008      	adds	r0, #8
   13b34:	f1ba 0f00 	cmp.w	sl, #0
   13b38:	bfac      	ite	ge
   13b3a:	ebac 040a 	subge.w	r4, ip, sl
   13b3e:	4664      	movlt	r4, ip
   13b40:	2c00      	cmp	r4, #0
   13b42:	dc0a      	bgt.n	13b5a <_svfprintf_r+0xfea>
   13b44:	4465      	add	r5, ip
   13b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d1ca      	bne.n	13ae2 <_svfprintf_r+0xf72>
   13b4c:	f1b8 0f00 	cmp.w	r8, #0
   13b50:	f000 83ac 	beq.w	142ac <_svfprintf_r+0x173c>
   13b54:	f108 38ff 	add.w	r8, r8, #4294967295
   13b58:	e7ca      	b.n	13af0 <_svfprintf_r+0xf80>
   13b5a:	2c10      	cmp	r4, #16
   13b5c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   13b60:	dd24      	ble.n	13bac <_svfprintf_r+0x103c>
   13b62:	9505      	str	r5, [sp, #20]
   13b64:	f04f 0a10 	mov.w	sl, #16
   13b68:	4663      	mov	r3, ip
   13b6a:	460d      	mov	r5, r1
   13b6c:	e004      	b.n	13b78 <_svfprintf_r+0x1008>
   13b6e:	3c10      	subs	r4, #16
   13b70:	2c10      	cmp	r4, #16
   13b72:	f100 0008 	add.w	r0, r0, #8
   13b76:	dd16      	ble.n	13ba6 <_svfprintf_r+0x1036>
   13b78:	3301      	adds	r3, #1
   13b7a:	492c      	ldr	r1, [pc, #176]	; (13c2c <_svfprintf_r+0x10bc>)
   13b7c:	3210      	adds	r2, #16
   13b7e:	2b07      	cmp	r3, #7
   13b80:	e9c0 1a00 	strd	r1, sl, [r0]
   13b84:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13b88:	ddf1      	ble.n	13b6e <_svfprintf_r+0xffe>
   13b8a:	aa24      	add	r2, sp, #144	; 0x90
   13b8c:	4629      	mov	r1, r5
   13b8e:	4658      	mov	r0, fp
   13b90:	f003 fe7a 	bl	17888 <__ssprint_r>
   13b94:	2800      	cmp	r0, #0
   13b96:	f47f ac50 	bne.w	1343a <_svfprintf_r+0x8ca>
   13b9a:	3c10      	subs	r4, #16
   13b9c:	2c10      	cmp	r4, #16
   13b9e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13ba2:	a827      	add	r0, sp, #156	; 0x9c
   13ba4:	dce8      	bgt.n	13b78 <_svfprintf_r+0x1008>
   13ba6:	4629      	mov	r1, r5
   13ba8:	9d05      	ldr	r5, [sp, #20]
   13baa:	469c      	mov	ip, r3
   13bac:	f10c 0301 	add.w	r3, ip, #1
   13bb0:	4422      	add	r2, r4
   13bb2:	6044      	str	r4, [r0, #4]
   13bb4:	2b07      	cmp	r3, #7
   13bb6:	4c1d      	ldr	r4, [pc, #116]	; (13c2c <_svfprintf_r+0x10bc>)
   13bb8:	6004      	str	r4, [r0, #0]
   13bba:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13bbe:	f300 83c6 	bgt.w	1434e <_svfprintf_r+0x17de>
   13bc2:	f896 c000 	ldrb.w	ip, [r6]
   13bc6:	3008      	adds	r0, #8
   13bc8:	4465      	add	r5, ip
   13bca:	e7bc      	b.n	13b46 <_svfprintf_r+0xfd6>
   13bcc:	f018 0310 	ands.w	r3, r8, #16
   13bd0:	f000 80c2 	beq.w	13d58 <_svfprintf_r+0x11e8>
   13bd4:	9b08      	ldr	r3, [sp, #32]
   13bd6:	f853 2b04 	ldr.w	r2, [r3], #4
   13bda:	9308      	str	r3, [sp, #32]
   13bdc:	e6f9      	b.n	139d2 <_svfprintf_r+0xe62>
   13bde:	aa24      	add	r2, sp, #144	; 0x90
   13be0:	4658      	mov	r0, fp
   13be2:	9105      	str	r1, [sp, #20]
   13be4:	f003 fe50 	bl	17888 <__ssprint_r>
   13be8:	2800      	cmp	r0, #0
   13bea:	f47f ac26 	bne.w	1343a <_svfprintf_r+0x8ca>
   13bee:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13bf0:	9905      	ldr	r1, [sp, #20]
   13bf2:	a827      	add	r0, sp, #156	; 0x9c
   13bf4:	e787      	b.n	13b06 <_svfprintf_r+0xf96>
   13bf6:	9802      	ldr	r0, [sp, #8]
   13bf8:	f8cd a01c 	str.w	sl, [sp, #28]
   13bfc:	ac50      	add	r4, sp, #320	; 0x140
   13bfe:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   13c02:	2500      	movs	r5, #0
   13c04:	ee0a ba10 	vmov	s20, fp
   13c08:	4b09      	ldr	r3, [pc, #36]	; (13c30 <_svfprintf_r+0x10c0>)
   13c0a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   13c0e:	f8cd 9014 	str.w	r9, [sp, #20]
   13c12:	46a3      	mov	fp, r4
   13c14:	f04f 0805 	mov.w	r8, #5
   13c18:	46ac      	mov	ip, r5
   13c1a:	4604      	mov	r4, r0
   13c1c:	e010      	b.n	13c40 <_svfprintf_r+0x10d0>
   13c1e:	bf00      	nop
   13c20:	200010b8 	.word	0x200010b8
   13c24:	200010cc 	.word	0x200010cc
   13c28:	200010e0 	.word	0x200010e0
   13c2c:	20008908 	.word	0x20008908
   13c30:	cccccccd 	.word	0xcccccccd
   13c34:	2a0a      	cmp	r2, #10
   13c36:	f171 0100 	sbcs.w	r1, r1, #0
   13c3a:	d336      	bcc.n	13caa <_svfprintf_r+0x113a>
   13c3c:	464a      	mov	r2, r9
   13c3e:	4631      	mov	r1, r6
   13c40:	1850      	adds	r0, r2, r1
   13c42:	f140 0000 	adc.w	r0, r0, #0
   13c46:	fba3 5600 	umull	r5, r6, r3, r0
   13c4a:	f026 0503 	bic.w	r5, r6, #3
   13c4e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   13c52:	1b40      	subs	r0, r0, r5
   13c54:	1a15      	subs	r5, r2, r0
   13c56:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   13c5a:	f161 0e00 	sbc.w	lr, r1, #0
   13c5e:	fb06 f605 	mul.w	r6, r6, r5
   13c62:	fba5 9503 	umull	r9, r5, r5, r3
   13c66:	fb03 660e 	mla	r6, r3, lr, r6
   13c6a:	f009 0e01 	and.w	lr, r9, #1
   13c6e:	442e      	add	r6, r5
   13c70:	fbae 5e08 	umull	r5, lr, lr, r8
   13c74:	182d      	adds	r5, r5, r0
   13c76:	ea4f 0959 	mov.w	r9, r9, lsr #1
   13c7a:	3530      	adds	r5, #48	; 0x30
   13c7c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   13c80:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   13c84:	f10c 0c01 	add.w	ip, ip, #1
   13c88:	f10b 3bff 	add.w	fp, fp, #4294967295
   13c8c:	0876      	lsrs	r6, r6, #1
   13c8e:	2c00      	cmp	r4, #0
   13c90:	d0d0      	beq.n	13c34 <_svfprintf_r+0x10c4>
   13c92:	f89a 0000 	ldrb.w	r0, [sl]
   13c96:	4584      	cmp	ip, r0
   13c98:	d1cc      	bne.n	13c34 <_svfprintf_r+0x10c4>
   13c9a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   13c9e:	d0c9      	beq.n	13c34 <_svfprintf_r+0x10c4>
   13ca0:	2a0a      	cmp	r2, #10
   13ca2:	f171 0100 	sbcs.w	r1, r1, #0
   13ca6:	f080 818f 	bcs.w	13fc8 <_svfprintf_r+0x1458>
   13caa:	465c      	mov	r4, fp
   13cac:	ab50      	add	r3, sp, #320	; 0x140
   13cae:	1b1b      	subs	r3, r3, r4
   13cb0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   13cb4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   13cb8:	ee1a ba10 	vmov	fp, s20
   13cbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   13cc0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13cc4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   13cc8:	9305      	str	r3, [sp, #20]
   13cca:	f7ff bac2 	b.w	13252 <_svfprintf_r+0x6e2>
   13cce:	ee1b 1a10 	vmov	r1, s22
   13cd2:	aa24      	add	r2, sp, #144	; 0x90
   13cd4:	4658      	mov	r0, fp
   13cd6:	f003 fdd7 	bl	17888 <__ssprint_r>
   13cda:	2800      	cmp	r0, #0
   13cdc:	f47f abad 	bne.w	1343a <_svfprintf_r+0x8ca>
   13ce0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13ce4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13ce6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13cea:	f7ff b896 	b.w	12e1a <_svfprintf_r+0x2aa>
   13cee:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13cf0:	48be      	ldr	r0, [pc, #760]	; (13fec <_svfprintf_r+0x147c>)
   13cf2:	f8ca 0000 	str.w	r0, [sl]
   13cf6:	3301      	adds	r3, #1
   13cf8:	3201      	adds	r2, #1
   13cfa:	2001      	movs	r0, #1
   13cfc:	2b07      	cmp	r3, #7
   13cfe:	9226      	str	r2, [sp, #152]	; 0x98
   13d00:	9325      	str	r3, [sp, #148]	; 0x94
   13d02:	f8ca 0004 	str.w	r0, [sl, #4]
   13d06:	f300 8177 	bgt.w	13ff8 <_svfprintf_r+0x1488>
   13d0a:	f10a 0a08 	add.w	sl, sl, #8
   13d0e:	2900      	cmp	r1, #0
   13d10:	f040 80af 	bne.w	13e72 <_svfprintf_r+0x1302>
   13d14:	990e      	ldr	r1, [sp, #56]	; 0x38
   13d16:	f008 0301 	and.w	r3, r8, #1
   13d1a:	430b      	orrs	r3, r1
   13d1c:	f43f a8c0 	beq.w	12ea0 <_svfprintf_r+0x330>
   13d20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13d22:	9912      	ldr	r1, [sp, #72]	; 0x48
   13d24:	441a      	add	r2, r3
   13d26:	e9ca 1300 	strd	r1, r3, [sl]
   13d2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13d2c:	9226      	str	r2, [sp, #152]	; 0x98
   13d2e:	3301      	adds	r3, #1
   13d30:	2b07      	cmp	r3, #7
   13d32:	9325      	str	r3, [sp, #148]	; 0x94
   13d34:	f300 8252 	bgt.w	141dc <_svfprintf_r+0x166c>
   13d38:	f10a 0a08 	add.w	sl, sl, #8
   13d3c:	990e      	ldr	r1, [sp, #56]	; 0x38
   13d3e:	f8ca 4000 	str.w	r4, [sl]
   13d42:	3301      	adds	r3, #1
   13d44:	440a      	add	r2, r1
   13d46:	2b07      	cmp	r3, #7
   13d48:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13d4c:	f8ca 1004 	str.w	r1, [sl, #4]
   13d50:	f77f a8a4 	ble.w	12e9c <_svfprintf_r+0x32c>
   13d54:	f7ff bbbd 	b.w	134d2 <_svfprintf_r+0x962>
   13d58:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   13d5c:	f000 80dd 	beq.w	13f1a <_svfprintf_r+0x13aa>
   13d60:	9808      	ldr	r0, [sp, #32]
   13d62:	f850 2b04 	ldr.w	r2, [r0], #4
   13d66:	9008      	str	r0, [sp, #32]
   13d68:	4619      	mov	r1, r3
   13d6a:	b292      	uxth	r2, r2
   13d6c:	e631      	b.n	139d2 <_svfprintf_r+0xe62>
   13d6e:	ee1b 1a10 	vmov	r1, s22
   13d72:	aa24      	add	r2, sp, #144	; 0x90
   13d74:	4658      	mov	r0, fp
   13d76:	f003 fd87 	bl	17888 <__ssprint_r>
   13d7a:	2800      	cmp	r0, #0
   13d7c:	f47f ab5d 	bne.w	1343a <_svfprintf_r+0x8ca>
   13d80:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13d82:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13d86:	f7ff baa3 	b.w	132d0 <_svfprintf_r+0x760>
   13d8a:	ae22      	add	r6, sp, #136	; 0x88
   13d8c:	2208      	movs	r2, #8
   13d8e:	2100      	movs	r1, #0
   13d90:	4630      	mov	r0, r6
   13d92:	941d      	str	r4, [sp, #116]	; 0x74
   13d94:	f7fc ff2c 	bl	10bf0 <memset>
   13d98:	9b03      	ldr	r3, [sp, #12]
   13d9a:	1c5a      	adds	r2, r3, #1
   13d9c:	f000 80db 	beq.w	13f56 <_svfprintf_r+0x13e6>
   13da0:	2500      	movs	r5, #0
   13da2:	f8cd 9008 	str.w	r9, [sp, #8]
   13da6:	f8cd 801c 	str.w	r8, [sp, #28]
   13daa:	4699      	mov	r9, r3
   13dac:	46a8      	mov	r8, r5
   13dae:	e00c      	b.n	13dca <_svfprintf_r+0x125a>
   13db0:	a937      	add	r1, sp, #220	; 0xdc
   13db2:	4658      	mov	r0, fp
   13db4:	f003 fc3e 	bl	17634 <_wcrtomb_r>
   13db8:	1c43      	adds	r3, r0, #1
   13dba:	4440      	add	r0, r8
   13dbc:	f000 83c8 	beq.w	14550 <_svfprintf_r+0x19e0>
   13dc0:	4548      	cmp	r0, r9
   13dc2:	dc08      	bgt.n	13dd6 <_svfprintf_r+0x1266>
   13dc4:	f000 8418 	beq.w	145f8 <_svfprintf_r+0x1a88>
   13dc8:	4680      	mov	r8, r0
   13dca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   13dcc:	5952      	ldr	r2, [r2, r5]
   13dce:	4633      	mov	r3, r6
   13dd0:	3504      	adds	r5, #4
   13dd2:	2a00      	cmp	r2, #0
   13dd4:	d1ec      	bne.n	13db0 <_svfprintf_r+0x1240>
   13dd6:	f8cd 8014 	str.w	r8, [sp, #20]
   13dda:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13dde:	f8dd 801c 	ldr.w	r8, [sp, #28]
   13de2:	e0c5      	b.n	13f70 <_svfprintf_r+0x1400>
   13de4:	3301      	adds	r3, #1
   13de6:	4982      	ldr	r1, [pc, #520]	; (13ff0 <_svfprintf_r+0x1480>)
   13de8:	f8ca 4004 	str.w	r4, [sl, #4]
   13dec:	4422      	add	r2, r4
   13dee:	2b07      	cmp	r3, #7
   13df0:	f8ca 1000 	str.w	r1, [sl]
   13df4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13df8:	f77f a850 	ble.w	12e9c <_svfprintf_r+0x32c>
   13dfc:	f7ff bb69 	b.w	134d2 <_svfprintf_r+0x962>
   13e00:	ee1b 1a10 	vmov	r1, s22
   13e04:	aa24      	add	r2, sp, #144	; 0x90
   13e06:	4658      	mov	r0, fp
   13e08:	f003 fd3e 	bl	17888 <__ssprint_r>
   13e0c:	2800      	cmp	r0, #0
   13e0e:	f47f ab14 	bne.w	1343a <_svfprintf_r+0x8ca>
   13e12:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13e14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13e18:	f7ff b829 	b.w	12e6e <_svfprintf_r+0x2fe>
   13e1c:	aa24      	add	r2, sp, #144	; 0x90
   13e1e:	4658      	mov	r0, fp
   13e20:	9105      	str	r1, [sp, #20]
   13e22:	f003 fd31 	bl	17888 <__ssprint_r>
   13e26:	2800      	cmp	r0, #0
   13e28:	f47f ab07 	bne.w	1343a <_svfprintf_r+0x8ca>
   13e2c:	f896 c000 	ldrb.w	ip, [r6]
   13e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13e32:	9905      	ldr	r1, [sp, #20]
   13e34:	a827      	add	r0, sp, #156	; 0x9c
   13e36:	e67d      	b.n	13b34 <_svfprintf_r+0xfc4>
   13e38:	2b01      	cmp	r3, #1
   13e3a:	f8cd 8008 	str.w	r8, [sp, #8]
   13e3e:	f47f a9f3 	bne.w	13228 <_svfprintf_r+0x6b8>
   13e42:	f7ff bb93 	b.w	1356c <_svfprintf_r+0x9fc>
   13e46:	9b08      	ldr	r3, [sp, #32]
   13e48:	9904      	ldr	r1, [sp, #16]
   13e4a:	f853 2b04 	ldr.w	r2, [r3], #4
   13e4e:	464c      	mov	r4, r9
   13e50:	6011      	str	r1, [r2, #0]
   13e52:	9308      	str	r3, [sp, #32]
   13e54:	f7fe bebe 	b.w	12bd4 <_svfprintf_r+0x64>
   13e58:	3301      	adds	r3, #1
   13e5a:	4965      	ldr	r1, [pc, #404]	; (13ff0 <_svfprintf_r+0x1480>)
   13e5c:	f8ca 4004 	str.w	r4, [sl, #4]
   13e60:	4422      	add	r2, r4
   13e62:	2b07      	cmp	r3, #7
   13e64:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13e68:	f8ca 1000 	str.w	r1, [sl]
   13e6c:	f77f ab22 	ble.w	134b4 <_svfprintf_r+0x944>
   13e70:	e47b      	b.n	1376a <_svfprintf_r+0xbfa>
   13e72:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13e74:	9812      	ldr	r0, [sp, #72]	; 0x48
   13e76:	441a      	add	r2, r3
   13e78:	e9ca 0300 	strd	r0, r3, [sl]
   13e7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13e7e:	9226      	str	r2, [sp, #152]	; 0x98
   13e80:	3301      	adds	r3, #1
   13e82:	2b07      	cmp	r3, #7
   13e84:	9325      	str	r3, [sp, #148]	; 0x94
   13e86:	f300 81a9 	bgt.w	141dc <_svfprintf_r+0x166c>
   13e8a:	f10a 0a08 	add.w	sl, sl, #8
   13e8e:	2900      	cmp	r1, #0
   13e90:	f6bf af54 	bge.w	13d3c <_svfprintf_r+0x11cc>
   13e94:	424d      	negs	r5, r1
   13e96:	3110      	adds	r1, #16
   13e98:	f280 830f 	bge.w	144ba <_svfprintf_r+0x194a>
   13e9c:	ee1b 1a10 	vmov	r1, s22
   13ea0:	2610      	movs	r6, #16
   13ea2:	e005      	b.n	13eb0 <_svfprintf_r+0x1340>
   13ea4:	f10a 0a08 	add.w	sl, sl, #8
   13ea8:	3d10      	subs	r5, #16
   13eaa:	2d10      	cmp	r5, #16
   13eac:	f340 8305 	ble.w	144ba <_svfprintf_r+0x194a>
   13eb0:	3301      	adds	r3, #1
   13eb2:	484f      	ldr	r0, [pc, #316]	; (13ff0 <_svfprintf_r+0x1480>)
   13eb4:	3210      	adds	r2, #16
   13eb6:	2b07      	cmp	r3, #7
   13eb8:	e9ca 0600 	strd	r0, r6, [sl]
   13ebc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13ec0:	ddf0      	ble.n	13ea4 <_svfprintf_r+0x1334>
   13ec2:	aa24      	add	r2, sp, #144	; 0x90
   13ec4:	4658      	mov	r0, fp
   13ec6:	9103      	str	r1, [sp, #12]
   13ec8:	f003 fcde 	bl	17888 <__ssprint_r>
   13ecc:	2800      	cmp	r0, #0
   13ece:	f47f aab4 	bne.w	1343a <_svfprintf_r+0x8ca>
   13ed2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13ed6:	9903      	ldr	r1, [sp, #12]
   13ed8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13edc:	e7e4      	b.n	13ea8 <_svfprintf_r+0x1338>
   13ede:	9b08      	ldr	r3, [sp, #32]
   13ee0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   13ee4:	bf1a      	itte	ne
   13ee6:	4611      	movne	r1, r2
   13ee8:	f853 2b04 	ldrne.w	r2, [r3], #4
   13eec:	f853 2b04 	ldreq.w	r2, [r3], #4
   13ef0:	9308      	str	r3, [sp, #32]
   13ef2:	bf18      	it	ne
   13ef4:	b2d2      	uxtbne	r2, r2
   13ef6:	f7ff b945 	b.w	13184 <_svfprintf_r+0x614>
   13efa:	9b02      	ldr	r3, [sp, #8]
   13efc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   13f00:	9b08      	ldr	r3, [sp, #32]
   13f02:	bf1a      	itte	ne
   13f04:	4611      	movne	r1, r2
   13f06:	f853 2b04 	ldrne.w	r2, [r3], #4
   13f0a:	f853 2b04 	ldreq.w	r2, [r3], #4
   13f0e:	9308      	str	r3, [sp, #32]
   13f10:	bf18      	it	ne
   13f12:	b2d2      	uxtbne	r2, r2
   13f14:	2301      	movs	r3, #1
   13f16:	f7ff b8d0 	b.w	130ba <_svfprintf_r+0x54a>
   13f1a:	9b08      	ldr	r3, [sp, #32]
   13f1c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   13f20:	bf1a      	itte	ne
   13f22:	4611      	movne	r1, r2
   13f24:	f853 2b04 	ldrne.w	r2, [r3], #4
   13f28:	f853 2b04 	ldreq.w	r2, [r3], #4
   13f2c:	9308      	str	r3, [sp, #32]
   13f2e:	bf18      	it	ne
   13f30:	b2d2      	uxtbne	r2, r2
   13f32:	e54e      	b.n	139d2 <_svfprintf_r+0xe62>
   13f34:	468a      	mov	sl, r1
   13f36:	3301      	adds	r3, #1
   13f38:	492d      	ldr	r1, [pc, #180]	; (13ff0 <_svfprintf_r+0x1480>)
   13f3a:	f8ca 5004 	str.w	r5, [sl, #4]
   13f3e:	442a      	add	r2, r5
   13f40:	2b07      	cmp	r3, #7
   13f42:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13f46:	f8ca 1000 	str.w	r1, [sl]
   13f4a:	f300 8139 	bgt.w	141c0 <_svfprintf_r+0x1650>
   13f4e:	f10a 0a08 	add.w	sl, sl, #8
   13f52:	f7ff bb8c 	b.w	1366e <_svfprintf_r+0xafe>
   13f56:	2300      	movs	r3, #0
   13f58:	4619      	mov	r1, r3
   13f5a:	9600      	str	r6, [sp, #0]
   13f5c:	aa1d      	add	r2, sp, #116	; 0x74
   13f5e:	4658      	mov	r0, fp
   13f60:	f003 fb8e 	bl	17680 <_wcsrtombs_r>
   13f64:	4603      	mov	r3, r0
   13f66:	3301      	adds	r3, #1
   13f68:	9005      	str	r0, [sp, #20]
   13f6a:	f000 82f1 	beq.w	14550 <_svfprintf_r+0x19e0>
   13f6e:	941d      	str	r4, [sp, #116]	; 0x74
   13f70:	9b05      	ldr	r3, [sp, #20]
   13f72:	2b00      	cmp	r3, #0
   13f74:	d04e      	beq.n	14014 <_svfprintf_r+0x14a4>
   13f76:	2b63      	cmp	r3, #99	; 0x63
   13f78:	f300 8118 	bgt.w	141ac <_svfprintf_r+0x163c>
   13f7c:	2300      	movs	r3, #0
   13f7e:	9307      	str	r3, [sp, #28]
   13f80:	ac37      	add	r4, sp, #220	; 0xdc
   13f82:	2208      	movs	r2, #8
   13f84:	2100      	movs	r1, #0
   13f86:	4630      	mov	r0, r6
   13f88:	f7fc fe32 	bl	10bf0 <memset>
   13f8c:	9d05      	ldr	r5, [sp, #20]
   13f8e:	9600      	str	r6, [sp, #0]
   13f90:	462b      	mov	r3, r5
   13f92:	aa1d      	add	r2, sp, #116	; 0x74
   13f94:	4621      	mov	r1, r4
   13f96:	4658      	mov	r0, fp
   13f98:	f003 fb72 	bl	17680 <_wcsrtombs_r>
   13f9c:	4285      	cmp	r5, r0
   13f9e:	f040 837c 	bne.w	1469a <_svfprintf_r+0x1b2a>
   13fa2:	9a05      	ldr	r2, [sp, #20]
   13fa4:	2300      	movs	r3, #0
   13fa6:	54a3      	strb	r3, [r4, r2]
   13fa8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   13fac:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13fb0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13fb4:	9303      	str	r3, [sp, #12]
   13fb6:	9202      	str	r2, [sp, #8]
   13fb8:	930f      	str	r3, [sp, #60]	; 0x3c
   13fba:	f7fe bfba 	b.w	12f32 <_svfprintf_r+0x3c2>
   13fbe:	212d      	movs	r1, #45	; 0x2d
   13fc0:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   13fc4:	f7fe bfa4 	b.w	12f10 <_svfprintf_r+0x3a0>
   13fc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   13fca:	9915      	ldr	r1, [sp, #84]	; 0x54
   13fcc:	ebab 0b03 	sub.w	fp, fp, r3
   13fd0:	461a      	mov	r2, r3
   13fd2:	4658      	mov	r0, fp
   13fd4:	f7fc fefa 	bl	10dcc <strncpy>
   13fd8:	f89a 2001 	ldrb.w	r2, [sl, #1]
   13fdc:	4b05      	ldr	r3, [pc, #20]	; (13ff4 <_svfprintf_r+0x1484>)
   13fde:	b10a      	cbz	r2, 13fe4 <_svfprintf_r+0x1474>
   13fe0:	f10a 0a01 	add.w	sl, sl, #1
   13fe4:	f04f 0c00 	mov.w	ip, #0
   13fe8:	e628      	b.n	13c3c <_svfprintf_r+0x10cc>
   13fea:	bf00      	nop
   13fec:	20007e94 	.word	0x20007e94
   13ff0:	20008908 	.word	0x20008908
   13ff4:	cccccccd 	.word	0xcccccccd
   13ff8:	ee1b 1a10 	vmov	r1, s22
   13ffc:	aa24      	add	r2, sp, #144	; 0x90
   13ffe:	4658      	mov	r0, fp
   14000:	f003 fc42 	bl	17888 <__ssprint_r>
   14004:	2800      	cmp	r0, #0
   14006:	f47f aa18 	bne.w	1343a <_svfprintf_r+0x8ca>
   1400a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1400c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1400e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14012:	e67c      	b.n	13d0e <_svfprintf_r+0x119e>
   14014:	9b05      	ldr	r3, [sp, #20]
   14016:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1401a:	930f      	str	r3, [sp, #60]	; 0x3c
   1401c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14020:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14024:	9307      	str	r3, [sp, #28]
   14026:	f7fe bf84 	b.w	12f32 <_svfprintf_r+0x3c2>
   1402a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1402c:	9805      	ldr	r0, [sp, #20]
   1402e:	1865      	adds	r5, r4, r1
   14030:	1a2d      	subs	r5, r5, r0
   14032:	1acc      	subs	r4, r1, r3
   14034:	42a5      	cmp	r5, r4
   14036:	bfa8      	it	ge
   14038:	4625      	movge	r5, r4
   1403a:	f7ff bb4d 	b.w	136d8 <_svfprintf_r+0xb68>
   1403e:	9b08      	ldr	r3, [sp, #32]
   14040:	9904      	ldr	r1, [sp, #16]
   14042:	f853 2b04 	ldr.w	r2, [r3], #4
   14046:	9308      	str	r3, [sp, #32]
   14048:	8011      	strh	r1, [r2, #0]
   1404a:	464c      	mov	r4, r9
   1404c:	f7fe bdc2 	b.w	12bd4 <_svfprintf_r+0x64>
   14050:	f913 2b04 	ldrsb.w	r2, [r3], #4
   14054:	9308      	str	r3, [sp, #32]
   14056:	17d1      	asrs	r1, r2, #31
   14058:	460b      	mov	r3, r1
   1405a:	f7fe bfdb 	b.w	13014 <_svfprintf_r+0x4a4>
   1405e:	9a03      	ldr	r2, [sp, #12]
   14060:	2102      	movs	r1, #2
   14062:	ab22      	add	r3, sp, #136	; 0x88
   14064:	9301      	str	r3, [sp, #4]
   14066:	ab1d      	add	r3, sp, #116	; 0x74
   14068:	9300      	str	r3, [sp, #0]
   1406a:	4658      	mov	r0, fp
   1406c:	ab1b      	add	r3, sp, #108	; 0x6c
   1406e:	eeb0 0b4a 	vmov.f64	d0, d10
   14072:	9202      	str	r2, [sp, #8]
   14074:	f002 fa14 	bl	164a0 <_dtoa_r>
   14078:	2d47      	cmp	r5, #71	; 0x47
   1407a:	9a02      	ldr	r2, [sp, #8]
   1407c:	4604      	mov	r4, r0
   1407e:	f000 8161 	beq.w	14344 <_svfprintf_r+0x17d4>
   14082:	2d46      	cmp	r5, #70	; 0x46
   14084:	4410      	add	r0, r2
   14086:	d105      	bne.n	14094 <_svfprintf_r+0x1524>
   14088:	7823      	ldrb	r3, [r4, #0]
   1408a:	2b30      	cmp	r3, #48	; 0x30
   1408c:	f000 826f 	beq.w	1456e <_svfprintf_r+0x19fe>
   14090:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14092:	4410      	add	r0, r2
   14094:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1409c:	f040 8146 	bne.w	1432c <_svfprintf_r+0x17bc>
   140a0:	4603      	mov	r3, r0
   140a2:	1b1b      	subs	r3, r3, r4
   140a4:	930e      	str	r3, [sp, #56]	; 0x38
   140a6:	2d47      	cmp	r5, #71	; 0x47
   140a8:	f000 8110 	beq.w	142cc <_svfprintf_r+0x175c>
   140ac:	2d46      	cmp	r5, #70	; 0x46
   140ae:	f000 81b5 	beq.w	1441c <_svfprintf_r+0x18ac>
   140b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   140b4:	930c      	str	r3, [sp, #48]	; 0x30
   140b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   140b8:	2d41      	cmp	r5, #65	; 0x41
   140ba:	f103 33ff 	add.w	r3, r3, #4294967295
   140be:	931b      	str	r3, [sp, #108]	; 0x6c
   140c0:	f000 81e5 	beq.w	1448e <_svfprintf_r+0x191e>
   140c4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   140c8:	2100      	movs	r1, #0
   140ca:	2b00      	cmp	r3, #0
   140cc:	bfb8      	it	lt
   140ce:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   140d0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   140d4:	bfba      	itte	lt
   140d6:	f1c3 0301 	rsblt	r3, r3, #1
   140da:	222d      	movlt	r2, #45	; 0x2d
   140dc:	222b      	movge	r2, #43	; 0x2b
   140de:	2b09      	cmp	r3, #9
   140e0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   140e4:	f340 81da 	ble.w	1449c <_svfprintf_r+0x192c>
   140e8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   140ec:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 1450c <_svfprintf_r+0x199c>
   140f0:	462a      	mov	r2, r5
   140f2:	4610      	mov	r0, r2
   140f4:	fb8c 2103 	smull	r2, r1, ip, r3
   140f8:	17da      	asrs	r2, r3, #31
   140fa:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   140fe:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   14102:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   14106:	3130      	adds	r1, #48	; 0x30
   14108:	f800 1c01 	strb.w	r1, [r0, #-1]
   1410c:	4619      	mov	r1, r3
   1410e:	2963      	cmp	r1, #99	; 0x63
   14110:	4613      	mov	r3, r2
   14112:	f100 32ff 	add.w	r2, r0, #4294967295
   14116:	dcec      	bgt.n	140f2 <_svfprintf_r+0x1582>
   14118:	3330      	adds	r3, #48	; 0x30
   1411a:	b2d9      	uxtb	r1, r3
   1411c:	1e83      	subs	r3, r0, #2
   1411e:	429d      	cmp	r5, r3
   14120:	f802 1c01 	strb.w	r1, [r2, #-1]
   14124:	f240 828b 	bls.w	1463e <_svfprintf_r+0x1ace>
   14128:	4613      	mov	r3, r2
   1412a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   1412e:	e001      	b.n	14134 <_svfprintf_r+0x15c4>
   14130:	f813 1b01 	ldrb.w	r1, [r3], #1
   14134:	f802 1b01 	strb.w	r1, [r2], #1
   14138:	429d      	cmp	r5, r3
   1413a:	d1f9      	bne.n	14130 <_svfprintf_r+0x15c0>
   1413c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   14140:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14144:	1a1b      	subs	r3, r3, r0
   14146:	4413      	add	r3, r2
   14148:	aa1e      	add	r2, sp, #120	; 0x78
   1414a:	1a9b      	subs	r3, r3, r2
   1414c:	9314      	str	r3, [sp, #80]	; 0x50
   1414e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14150:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14152:	2b01      	cmp	r3, #1
   14154:	441a      	add	r2, r3
   14156:	9205      	str	r2, [sp, #20]
   14158:	f340 8203 	ble.w	14562 <_svfprintf_r+0x19f2>
   1415c:	9b05      	ldr	r3, [sp, #20]
   1415e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14160:	4413      	add	r3, r2
   14162:	9305      	str	r3, [sp, #20]
   14164:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   14168:	9a05      	ldr	r2, [sp, #20]
   1416a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   1416e:	2300      	movs	r3, #0
   14170:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14174:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14178:	930f      	str	r3, [sp, #60]	; 0x3c
   1417a:	9202      	str	r2, [sp, #8]
   1417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1417e:	2b00      	cmp	r3, #0
   14180:	f040 80b1 	bne.w	142e6 <_svfprintf_r+0x1776>
   14184:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14188:	9303      	str	r3, [sp, #12]
   1418a:	f7fe bed2 	b.w	12f32 <_svfprintf_r+0x3c2>
   1418e:	4620      	mov	r0, r4
   14190:	f7fd f916 	bl	113c0 <strlen>
   14194:	4602      	mov	r2, r0
   14196:	9005      	str	r0, [sp, #20]
   14198:	f7fe bf20 	b.w	12fdc <_svfprintf_r+0x46c>
   1419c:	ee1b 1a10 	vmov	r1, s22
   141a0:	aa24      	add	r2, sp, #144	; 0x90
   141a2:	4658      	mov	r0, fp
   141a4:	f003 fb70 	bl	17888 <__ssprint_r>
   141a8:	f7fe bded 	b.w	12d86 <_svfprintf_r+0x216>
   141ac:	1c59      	adds	r1, r3, #1
   141ae:	4658      	mov	r0, fp
   141b0:	f7fa fdae 	bl	ed10 <_malloc_r>
   141b4:	4604      	mov	r4, r0
   141b6:	2800      	cmp	r0, #0
   141b8:	f000 81ca 	beq.w	14550 <_svfprintf_r+0x19e0>
   141bc:	9007      	str	r0, [sp, #28]
   141be:	e6e0      	b.n	13f82 <_svfprintf_r+0x1412>
   141c0:	ee1b 1a10 	vmov	r1, s22
   141c4:	aa24      	add	r2, sp, #144	; 0x90
   141c6:	4658      	mov	r0, fp
   141c8:	f003 fb5e 	bl	17888 <__ssprint_r>
   141cc:	2800      	cmp	r0, #0
   141ce:	f47f a934 	bne.w	1343a <_svfprintf_r+0x8ca>
   141d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   141d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   141d8:	f7ff ba49 	b.w	1366e <_svfprintf_r+0xafe>
   141dc:	ee1b 1a10 	vmov	r1, s22
   141e0:	aa24      	add	r2, sp, #144	; 0x90
   141e2:	4658      	mov	r0, fp
   141e4:	f003 fb50 	bl	17888 <__ssprint_r>
   141e8:	2800      	cmp	r0, #0
   141ea:	f47f a926 	bne.w	1343a <_svfprintf_r+0x8ca>
   141ee:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   141f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   141f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   141f8:	e649      	b.n	13e8e <_svfprintf_r+0x131e>
   141fa:	2306      	movs	r3, #6
   141fc:	9303      	str	r3, [sp, #12]
   141fe:	f7ff bb83 	b.w	13908 <_svfprintf_r+0xd98>
   14202:	9b03      	ldr	r3, [sp, #12]
   14204:	2102      	movs	r1, #2
   14206:	1c5a      	adds	r2, r3, #1
   14208:	e72b      	b.n	14062 <_svfprintf_r+0x14f2>
   1420a:	9a03      	ldr	r2, [sp, #12]
   1420c:	2103      	movs	r1, #3
   1420e:	e728      	b.n	14062 <_svfprintf_r+0x14f2>
   14210:	a81b      	add	r0, sp, #108	; 0x6c
   14212:	eeb0 0b4a 	vmov.f64	d0, d10
   14216:	f002 f817 	bl	16248 <frexp>
   1421a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   1421e:	ee20 0b07 	vmul.f64	d0, d0, d7
   14222:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1422a:	d101      	bne.n	14230 <_svfprintf_r+0x16c0>
   1422c:	2301      	movs	r3, #1
   1422e:	931b      	str	r3, [sp, #108]	; 0x6c
   14230:	48b3      	ldr	r0, [pc, #716]	; (14500 <_svfprintf_r+0x1990>)
   14232:	9b03      	ldr	r3, [sp, #12]
   14234:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   14238:	3b01      	subs	r3, #1
   1423a:	4622      	mov	r2, r4
   1423c:	e004      	b.n	14248 <_svfprintf_r+0x16d8>
   1423e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14246:	d013      	beq.n	14270 <_svfprintf_r+0x1700>
   14248:	ee20 0b05 	vmul.f64	d0, d0, d5
   1424c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   14250:	f1b3 3fff 	cmp.w	r3, #4294967295
   14254:	ee17 1a90 	vmov	r1, s15
   14258:	5c41      	ldrb	r1, [r0, r1]
   1425a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   1425e:	4694      	mov	ip, r2
   14260:	ee30 0b46 	vsub.f64	d0, d0, d6
   14264:	f802 1b01 	strb.w	r1, [r2], #1
   14268:	4619      	mov	r1, r3
   1426a:	f103 33ff 	add.w	r3, r3, #4294967295
   1426e:	d1e6      	bne.n	1423e <_svfprintf_r+0x16ce>
   14270:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14274:	eeb4 0bc6 	vcmpe.f64	d0, d6
   14278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1427c:	f300 8148 	bgt.w	14510 <_svfprintf_r+0x19a0>
   14280:	eeb4 0b46 	vcmp.f64	d0, d6
   14284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14288:	d104      	bne.n	14294 <_svfprintf_r+0x1724>
   1428a:	ee17 3a90 	vmov	r3, s15
   1428e:	07db      	lsls	r3, r3, #31
   14290:	f100 813e 	bmi.w	14510 <_svfprintf_r+0x19a0>
   14294:	2900      	cmp	r1, #0
   14296:	db06      	blt.n	142a6 <_svfprintf_r+0x1736>
   14298:	1c4b      	adds	r3, r1, #1
   1429a:	4413      	add	r3, r2
   1429c:	2130      	movs	r1, #48	; 0x30
   1429e:	f802 1b01 	strb.w	r1, [r2], #1
   142a2:	4293      	cmp	r3, r2
   142a4:	d1fb      	bne.n	1429e <_svfprintf_r+0x172e>
   142a6:	1b13      	subs	r3, r2, r4
   142a8:	930e      	str	r3, [sp, #56]	; 0x38
   142aa:	e6fc      	b.n	140a6 <_svfprintf_r+0x1536>
   142ac:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   142ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   142b4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   142b8:	9613      	str	r6, [sp, #76]	; 0x4c
   142ba:	18e3      	adds	r3, r4, r3
   142bc:	429d      	cmp	r5, r3
   142be:	4629      	mov	r1, r5
   142c0:	bf28      	it	cs
   142c2:	4619      	movcs	r1, r3
   142c4:	4682      	mov	sl, r0
   142c6:	9105      	str	r1, [sp, #20]
   142c8:	f7ff b9d8 	b.w	1367c <_svfprintf_r+0xb0c>
   142cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   142ce:	930c      	str	r3, [sp, #48]	; 0x30
   142d0:	1cda      	adds	r2, r3, #3
   142d2:	db02      	blt.n	142da <_svfprintf_r+0x176a>
   142d4:	9a03      	ldr	r2, [sp, #12]
   142d6:	4293      	cmp	r3, r2
   142d8:	dd0c      	ble.n	142f4 <_svfprintf_r+0x1784>
   142da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   142dc:	3b02      	subs	r3, #2
   142de:	930b      	str	r3, [sp, #44]	; 0x2c
   142e0:	f023 0520 	bic.w	r5, r3, #32
   142e4:	e6e7      	b.n	140b6 <_svfprintf_r+0x1546>
   142e6:	212d      	movs	r1, #45	; 0x2d
   142e8:	2300      	movs	r3, #0
   142ea:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   142ee:	9303      	str	r3, [sp, #12]
   142f0:	f7fe be22 	b.w	12f38 <_svfprintf_r+0x3c8>
   142f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   142f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   142f8:	4293      	cmp	r3, r2
   142fa:	f2c0 80bd 	blt.w	14478 <_svfprintf_r+0x1908>
   142fe:	07f0      	lsls	r0, r6, #31
   14300:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14302:	f140 8132 	bpl.w	1456a <_svfprintf_r+0x19fa>
   14306:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14308:	4413      	add	r3, r2
   1430a:	9305      	str	r3, [sp, #20]
   1430c:	0571      	lsls	r1, r6, #21
   1430e:	d503      	bpl.n	14318 <_svfprintf_r+0x17a8>
   14310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14312:	2b00      	cmp	r3, #0
   14314:	f300 8135 	bgt.w	14582 <_svfprintf_r+0x1a12>
   14318:	9b05      	ldr	r3, [sp, #20]
   1431a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1431e:	9302      	str	r3, [sp, #8]
   14320:	2367      	movs	r3, #103	; 0x67
   14322:	930b      	str	r3, [sp, #44]	; 0x2c
   14324:	2300      	movs	r3, #0
   14326:	930f      	str	r3, [sp, #60]	; 0x3c
   14328:	930d      	str	r3, [sp, #52]	; 0x34
   1432a:	e727      	b.n	1417c <_svfprintf_r+0x160c>
   1432c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1432e:	4283      	cmp	r3, r0
   14330:	f4bf aeb7 	bcs.w	140a2 <_svfprintf_r+0x1532>
   14334:	2130      	movs	r1, #48	; 0x30
   14336:	1c5a      	adds	r2, r3, #1
   14338:	9222      	str	r2, [sp, #136]	; 0x88
   1433a:	7019      	strb	r1, [r3, #0]
   1433c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1433e:	4298      	cmp	r0, r3
   14340:	d8f9      	bhi.n	14336 <_svfprintf_r+0x17c6>
   14342:	e6ae      	b.n	140a2 <_svfprintf_r+0x1532>
   14344:	07f3      	lsls	r3, r6, #31
   14346:	f100 80a7 	bmi.w	14498 <_svfprintf_r+0x1928>
   1434a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1434c:	e6a9      	b.n	140a2 <_svfprintf_r+0x1532>
   1434e:	aa24      	add	r2, sp, #144	; 0x90
   14350:	4658      	mov	r0, fp
   14352:	9105      	str	r1, [sp, #20]
   14354:	f003 fa98 	bl	17888 <__ssprint_r>
   14358:	2800      	cmp	r0, #0
   1435a:	f47f a86e 	bne.w	1343a <_svfprintf_r+0x8ca>
   1435e:	f896 c000 	ldrb.w	ip, [r6]
   14362:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14364:	9905      	ldr	r1, [sp, #20]
   14366:	a827      	add	r0, sp, #156	; 0x9c
   14368:	4465      	add	r5, ip
   1436a:	f7ff bbec 	b.w	13b46 <_svfprintf_r+0xfd6>
   1436e:	ee1b 1a10 	vmov	r1, s22
   14372:	aa24      	add	r2, sp, #144	; 0x90
   14374:	4658      	mov	r0, fp
   14376:	f003 fa87 	bl	17888 <__ssprint_r>
   1437a:	2800      	cmp	r0, #0
   1437c:	f47f a85d 	bne.w	1343a <_svfprintf_r+0x8ca>
   14380:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14382:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14386:	f7ff b96b 	b.w	13660 <_svfprintf_r+0xaf0>
   1438a:	2378      	movs	r3, #120	; 0x78
   1438c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   14390:	2330      	movs	r3, #48	; 0x30
   14392:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   14396:	9b03      	ldr	r3, [sp, #12]
   14398:	2b63      	cmp	r3, #99	; 0x63
   1439a:	f048 0602 	orr.w	r6, r8, #2
   1439e:	f300 80a6 	bgt.w	144ee <_svfprintf_r+0x197e>
   143a2:	2300      	movs	r3, #0
   143a4:	9307      	str	r3, [sp, #28]
   143a6:	ac37      	add	r4, sp, #220	; 0xdc
   143a8:	ee18 3a90 	vmov	r3, s17
   143ac:	2b00      	cmp	r3, #0
   143ae:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   143b2:	db2b      	blt.n	1440c <_svfprintf_r+0x189c>
   143b4:	eeb0 ab48 	vmov.f64	d10, d8
   143b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143ba:	f023 0520 	bic.w	r5, r3, #32
   143be:	2300      	movs	r3, #0
   143c0:	9309      	str	r3, [sp, #36]	; 0x24
   143c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   143c4:	2b61      	cmp	r3, #97	; 0x61
   143c6:	f47f aaad 	bne.w	13924 <_svfprintf_r+0xdb4>
   143ca:	eeb0 0b4a 	vmov.f64	d0, d10
   143ce:	a81b      	add	r0, sp, #108	; 0x6c
   143d0:	f001 ff3a 	bl	16248 <frexp>
   143d4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   143d8:	ee20 0b07 	vmul.f64	d0, d0, d7
   143dc:	eeb5 0b40 	vcmp.f64	d0, #0.0
   143e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   143e4:	d101      	bne.n	143ea <_svfprintf_r+0x187a>
   143e6:	2301      	movs	r3, #1
   143e8:	931b      	str	r3, [sp, #108]	; 0x6c
   143ea:	4846      	ldr	r0, [pc, #280]	; (14504 <_svfprintf_r+0x1994>)
   143ec:	e721      	b.n	14232 <_svfprintf_r+0x16c2>
   143ee:	ee1b 1a10 	vmov	r1, s22
   143f2:	aa24      	add	r2, sp, #144	; 0x90
   143f4:	4658      	mov	r0, fp
   143f6:	f003 fa47 	bl	17888 <__ssprint_r>
   143fa:	2800      	cmp	r0, #0
   143fc:	f47f a81d 	bne.w	1343a <_svfprintf_r+0x8ca>
   14400:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14402:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14404:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14408:	f7ff b94e 	b.w	136a8 <_svfprintf_r+0xb38>
   1440c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1440e:	f023 0520 	bic.w	r5, r3, #32
   14412:	232d      	movs	r3, #45	; 0x2d
   14414:	9309      	str	r3, [sp, #36]	; 0x24
   14416:	eeb1 ab48 	vneg.f64	d10, d8
   1441a:	e7d2      	b.n	143c2 <_svfprintf_r+0x1852>
   1441c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1441e:	920c      	str	r2, [sp, #48]	; 0x30
   14420:	2a00      	cmp	r2, #0
   14422:	f006 0301 	and.w	r3, r6, #1
   14426:	f340 810d 	ble.w	14644 <_svfprintf_r+0x1ad4>
   1442a:	9903      	ldr	r1, [sp, #12]
   1442c:	430b      	orrs	r3, r1
   1442e:	f040 80cf 	bne.w	145d0 <_svfprintf_r+0x1a60>
   14432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14434:	9305      	str	r3, [sp, #20]
   14436:	2366      	movs	r3, #102	; 0x66
   14438:	930b      	str	r3, [sp, #44]	; 0x2c
   1443a:	0572      	lsls	r2, r6, #21
   1443c:	f100 80a3 	bmi.w	14586 <_svfprintf_r+0x1a16>
   14440:	9b05      	ldr	r3, [sp, #20]
   14442:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14446:	9302      	str	r3, [sp, #8]
   14448:	e76c      	b.n	14324 <_svfprintf_r+0x17b4>
   1444a:	ee1b 1a10 	vmov	r1, s22
   1444e:	aa24      	add	r2, sp, #144	; 0x90
   14450:	4658      	mov	r0, fp
   14452:	f003 fa19 	bl	17888 <__ssprint_r>
   14456:	2800      	cmp	r0, #0
   14458:	f47e afef 	bne.w	1343a <_svfprintf_r+0x8ca>
   1445c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   1445e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14460:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14462:	1b1c      	subs	r4, r3, r4
   14464:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14468:	f7ff b936 	b.w	136d8 <_svfprintf_r+0xb68>
   1446c:	2358      	movs	r3, #88	; 0x58
   1446e:	e78d      	b.n	1438c <_svfprintf_r+0x181c>
   14470:	2200      	movs	r2, #0
   14472:	9203      	str	r2, [sp, #12]
   14474:	f7fe bbda 	b.w	12c2c <_svfprintf_r+0xbc>
   14478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1447a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1447c:	189a      	adds	r2, r3, r2
   1447e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14480:	9205      	str	r2, [sp, #20]
   14482:	2b00      	cmp	r3, #0
   14484:	f340 80ab 	ble.w	145de <_svfprintf_r+0x1a6e>
   14488:	2367      	movs	r3, #103	; 0x67
   1448a:	930b      	str	r3, [sp, #44]	; 0x2c
   1448c:	e7d5      	b.n	1443a <_svfprintf_r+0x18ca>
   1448e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14490:	320f      	adds	r2, #15
   14492:	b2d2      	uxtb	r2, r2
   14494:	2101      	movs	r1, #1
   14496:	e618      	b.n	140ca <_svfprintf_r+0x155a>
   14498:	18a0      	adds	r0, r4, r2
   1449a:	e5fb      	b.n	14094 <_svfprintf_r+0x1524>
   1449c:	2900      	cmp	r1, #0
   1449e:	f040 80a8 	bne.w	145f2 <_svfprintf_r+0x1a82>
   144a2:	2230      	movs	r2, #48	; 0x30
   144a4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   144a8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   144ac:	3330      	adds	r3, #48	; 0x30
   144ae:	f802 3b01 	strb.w	r3, [r2], #1
   144b2:	ab1e      	add	r3, sp, #120	; 0x78
   144b4:	1ad3      	subs	r3, r2, r3
   144b6:	9314      	str	r3, [sp, #80]	; 0x50
   144b8:	e649      	b.n	1414e <_svfprintf_r+0x15de>
   144ba:	3301      	adds	r3, #1
   144bc:	4912      	ldr	r1, [pc, #72]	; (14508 <_svfprintf_r+0x1998>)
   144be:	f8ca 5004 	str.w	r5, [sl, #4]
   144c2:	442a      	add	r2, r5
   144c4:	2b07      	cmp	r3, #7
   144c6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   144ca:	f8ca 1000 	str.w	r1, [sl]
   144ce:	f77f ac33 	ble.w	13d38 <_svfprintf_r+0x11c8>
   144d2:	ee1b 1a10 	vmov	r1, s22
   144d6:	aa24      	add	r2, sp, #144	; 0x90
   144d8:	4658      	mov	r0, fp
   144da:	f003 f9d5 	bl	17888 <__ssprint_r>
   144de:	2800      	cmp	r0, #0
   144e0:	f47e afab 	bne.w	1343a <_svfprintf_r+0x8ca>
   144e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   144e8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   144ec:	e426      	b.n	13d3c <_svfprintf_r+0x11cc>
   144ee:	1c59      	adds	r1, r3, #1
   144f0:	4658      	mov	r0, fp
   144f2:	f7fa fc0d 	bl	ed10 <_malloc_r>
   144f6:	4604      	mov	r4, r0
   144f8:	b350      	cbz	r0, 14550 <_svfprintf_r+0x19e0>
   144fa:	9007      	str	r0, [sp, #28]
   144fc:	e754      	b.n	143a8 <_svfprintf_r+0x1838>
   144fe:	bf00      	nop
   14500:	200010cc 	.word	0x200010cc
   14504:	200010b8 	.word	0x200010b8
   14508:	20008908 	.word	0x20008908
   1450c:	66666667 	.word	0x66666667
   14510:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   14514:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   14518:	f890 c00f 	ldrb.w	ip, [r0, #15]
   1451c:	4561      	cmp	r1, ip
   1451e:	4613      	mov	r3, r2
   14520:	d10a      	bne.n	14538 <_svfprintf_r+0x19c8>
   14522:	f04f 0e30 	mov.w	lr, #48	; 0x30
   14526:	f803 ec01 	strb.w	lr, [r3, #-1]
   1452a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1452c:	1e59      	subs	r1, r3, #1
   1452e:	9122      	str	r1, [sp, #136]	; 0x88
   14530:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   14534:	458c      	cmp	ip, r1
   14536:	d0f6      	beq.n	14526 <_svfprintf_r+0x19b6>
   14538:	2939      	cmp	r1, #57	; 0x39
   1453a:	bf16      	itet	ne
   1453c:	3101      	addne	r1, #1
   1453e:	7a81      	ldrbeq	r1, [r0, #10]
   14540:	b2c9      	uxtbne	r1, r1
   14542:	f803 1c01 	strb.w	r1, [r3, #-1]
   14546:	e6ae      	b.n	142a6 <_svfprintf_r+0x1736>
   14548:	2300      	movs	r3, #0
   1454a:	4690      	mov	r8, r2
   1454c:	9307      	str	r3, [sp, #28]
   1454e:	e760      	b.n	14412 <_svfprintf_r+0x18a2>
   14550:	ee1b 2a10 	vmov	r2, s22
   14554:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   14558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1455c:	8193      	strh	r3, [r2, #12]
   1455e:	f7fe bc16 	b.w	12d8e <_svfprintf_r+0x21e>
   14562:	07f5      	lsls	r5, r6, #31
   14564:	f57f adfe 	bpl.w	14164 <_svfprintf_r+0x15f4>
   14568:	e5f8      	b.n	1415c <_svfprintf_r+0x15ec>
   1456a:	9305      	str	r3, [sp, #20]
   1456c:	e6ce      	b.n	1430c <_svfprintf_r+0x179c>
   1456e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14576:	f43f ad8b 	beq.w	14090 <_svfprintf_r+0x1520>
   1457a:	f1c2 0201 	rsb	r2, r2, #1
   1457e:	921b      	str	r2, [sp, #108]	; 0x6c
   14580:	e587      	b.n	14092 <_svfprintf_r+0x1522>
   14582:	2367      	movs	r3, #103	; 0x67
   14584:	930b      	str	r3, [sp, #44]	; 0x2c
   14586:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14588:	780b      	ldrb	r3, [r1, #0]
   1458a:	2bff      	cmp	r3, #255	; 0xff
   1458c:	d079      	beq.n	14682 <_svfprintf_r+0x1b12>
   1458e:	2500      	movs	r5, #0
   14590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14592:	4628      	mov	r0, r5
   14594:	e003      	b.n	1459e <_svfprintf_r+0x1a2e>
   14596:	3001      	adds	r0, #1
   14598:	3101      	adds	r1, #1
   1459a:	2bff      	cmp	r3, #255	; 0xff
   1459c:	d008      	beq.n	145b0 <_svfprintf_r+0x1a40>
   1459e:	4293      	cmp	r3, r2
   145a0:	da06      	bge.n	145b0 <_svfprintf_r+0x1a40>
   145a2:	1ad2      	subs	r2, r2, r3
   145a4:	784b      	ldrb	r3, [r1, #1]
   145a6:	2b00      	cmp	r3, #0
   145a8:	d1f5      	bne.n	14596 <_svfprintf_r+0x1a26>
   145aa:	780b      	ldrb	r3, [r1, #0]
   145ac:	3501      	adds	r5, #1
   145ae:	e7f4      	b.n	1459a <_svfprintf_r+0x1a2a>
   145b0:	920c      	str	r2, [sp, #48]	; 0x30
   145b2:	9113      	str	r1, [sp, #76]	; 0x4c
   145b4:	900d      	str	r0, [sp, #52]	; 0x34
   145b6:	950f      	str	r5, [sp, #60]	; 0x3c
   145b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   145ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   145bc:	9916      	ldr	r1, [sp, #88]	; 0x58
   145be:	4413      	add	r3, r2
   145c0:	9a05      	ldr	r2, [sp, #20]
   145c2:	fb01 2303 	mla	r3, r1, r3, r2
   145c6:	9305      	str	r3, [sp, #20]
   145c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   145cc:	9302      	str	r3, [sp, #8]
   145ce:	e5d5      	b.n	1417c <_svfprintf_r+0x160c>
   145d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   145d2:	18d3      	adds	r3, r2, r3
   145d4:	4419      	add	r1, r3
   145d6:	2366      	movs	r3, #102	; 0x66
   145d8:	9105      	str	r1, [sp, #20]
   145da:	930b      	str	r3, [sp, #44]	; 0x2c
   145dc:	e72d      	b.n	1443a <_svfprintf_r+0x18ca>
   145de:	f1c3 0301 	rsb	r3, r3, #1
   145e2:	441a      	add	r2, r3
   145e4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   145e8:	9302      	str	r3, [sp, #8]
   145ea:	2367      	movs	r3, #103	; 0x67
   145ec:	9205      	str	r2, [sp, #20]
   145ee:	930b      	str	r3, [sp, #44]	; 0x2c
   145f0:	e698      	b.n	14324 <_svfprintf_r+0x17b4>
   145f2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   145f6:	e759      	b.n	144ac <_svfprintf_r+0x193c>
   145f8:	9b03      	ldr	r3, [sp, #12]
   145fa:	f8dd 9008 	ldr.w	r9, [sp, #8]
   145fe:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14602:	9305      	str	r3, [sp, #20]
   14604:	e4b4      	b.n	13f70 <_svfprintf_r+0x1400>
   14606:	ee18 3a90 	vmov	r3, s17
   1460a:	2b00      	cmp	r3, #0
   1460c:	bfb4      	ite	lt
   1460e:	212d      	movlt	r1, #45	; 0x2d
   14610:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   14614:	4c25      	ldr	r4, [pc, #148]	; (146ac <_svfprintf_r+0x1b3c>)
   14616:	4b26      	ldr	r3, [pc, #152]	; (146b0 <_svfprintf_r+0x1b40>)
   14618:	bfb8      	it	lt
   1461a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1461e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   14622:	f7fe bc79 	b.w	12f18 <_svfprintf_r+0x3a8>
   14626:	9b03      	ldr	r3, [sp, #12]
   14628:	9302      	str	r3, [sp, #8]
   1462a:	9305      	str	r3, [sp, #20]
   1462c:	2373      	movs	r3, #115	; 0x73
   1462e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14632:	9003      	str	r0, [sp, #12]
   14634:	900f      	str	r0, [sp, #60]	; 0x3c
   14636:	900d      	str	r0, [sp, #52]	; 0x34
   14638:	930b      	str	r3, [sp, #44]	; 0x2c
   1463a:	f7fe bc7a 	b.w	12f32 <_svfprintf_r+0x3c2>
   1463e:	2302      	movs	r3, #2
   14640:	9314      	str	r3, [sp, #80]	; 0x50
   14642:	e584      	b.n	1414e <_svfprintf_r+0x15de>
   14644:	9a03      	ldr	r2, [sp, #12]
   14646:	4313      	orrs	r3, r2
   14648:	d105      	bne.n	14656 <_svfprintf_r+0x1ae6>
   1464a:	2301      	movs	r3, #1
   1464c:	2266      	movs	r2, #102	; 0x66
   1464e:	9302      	str	r3, [sp, #8]
   14650:	920b      	str	r2, [sp, #44]	; 0x2c
   14652:	9305      	str	r3, [sp, #20]
   14654:	e666      	b.n	14324 <_svfprintf_r+0x17b4>
   14656:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14658:	3301      	adds	r3, #1
   1465a:	441a      	add	r2, r3
   1465c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   14660:	9302      	str	r3, [sp, #8]
   14662:	2366      	movs	r3, #102	; 0x66
   14664:	9205      	str	r2, [sp, #20]
   14666:	930b      	str	r3, [sp, #44]	; 0x2c
   14668:	e65c      	b.n	14324 <_svfprintf_r+0x17b4>
   1466a:	9a08      	ldr	r2, [sp, #32]
   1466c:	f899 3001 	ldrb.w	r3, [r9, #1]
   14670:	4689      	mov	r9, r1
   14672:	f852 1b04 	ldr.w	r1, [r2], #4
   14676:	9208      	str	r2, [sp, #32]
   14678:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1467c:	9103      	str	r1, [sp, #12]
   1467e:	f7fe bad3 	b.w	12c28 <_svfprintf_r+0xb8>
   14682:	2300      	movs	r3, #0
   14684:	930f      	str	r3, [sp, #60]	; 0x3c
   14686:	930d      	str	r3, [sp, #52]	; 0x34
   14688:	e796      	b.n	145b8 <_svfprintf_r+0x1a48>
   1468a:	230c      	movs	r3, #12
   1468c:	f8cb 3000 	str.w	r3, [fp]
   14690:	f04f 33ff 	mov.w	r3, #4294967295
   14694:	9304      	str	r3, [sp, #16]
   14696:	f7fe bb81 	b.w	12d9c <_svfprintf_r+0x22c>
   1469a:	ee1b 2a10 	vmov	r2, s22
   1469e:	8993      	ldrh	r3, [r2, #12]
   146a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   146a4:	8193      	strh	r3, [r2, #12]
   146a6:	f7fe bec8 	b.w	1343a <_svfprintf_r+0x8ca>
   146aa:	bf00      	nop
   146ac:	200010b4 	.word	0x200010b4
   146b0:	20000b28 	.word	0x20000b28

000146b4 <__ssvfscanf_r>:
   146b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b8:	ed2d 8b02 	vpush	{d8}
   146bc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   146c0:	468b      	mov	fp, r1
   146c2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   146c6:	af02      	add	r7, sp, #8
   146c8:	048c      	lsls	r4, r1, #18
   146ca:	4681      	mov	r9, r0
   146cc:	64fa      	str	r2, [r7, #76]	; 0x4c
   146ce:	633b      	str	r3, [r7, #48]	; 0x30
   146d0:	d409      	bmi.n	146e6 <__ssvfscanf_r+0x32>
   146d2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   146d6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   146da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   146de:	f8ab 100c 	strh.w	r1, [fp, #12]
   146e2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   146e6:	2300      	movs	r3, #0
   146e8:	461c      	mov	r4, r3
   146ea:	2208      	movs	r2, #8
   146ec:	4619      	mov	r1, r3
   146ee:	f107 0058 	add.w	r0, r7, #88	; 0x58
   146f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   146f4:	46a2      	mov	sl, r4
   146f6:	f7fc fa7b 	bl	10bf0 <memset>
   146fa:	643c      	str	r4, [r7, #64]	; 0x40
   146fc:	627c      	str	r4, [r7, #36]	; 0x24
   146fe:	63bc      	str	r4, [r7, #56]	; 0x38
   14700:	647c      	str	r4, [r7, #68]	; 0x44
   14702:	4b83      	ldr	r3, [pc, #524]	; (14910 <__ssvfscanf_r+0x25c>)
   14704:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   14708:	f7fc fb92 	bl	10e30 <__locale_mb_cur_max>
   1470c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   14710:	4603      	mov	r3, r0
   14712:	9200      	str	r2, [sp, #0]
   14714:	f107 0154 	add.w	r1, r7, #84	; 0x54
   14718:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1471a:	4648      	mov	r0, r9
   1471c:	47a0      	blx	r4
   1471e:	1e05      	subs	r5, r0, #0
   14720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14722:	db33      	blt.n	1478c <__ssvfscanf_r+0xd8>
   14724:	442b      	add	r3, r5
   14726:	64fb      	str	r3, [r7, #76]	; 0x4c
   14728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1472a:	462e      	mov	r6, r5
   1472c:	2b00      	cmp	r3, #0
   1472e:	f000 80b6 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   14732:	2d01      	cmp	r5, #1
   14734:	d038      	beq.n	147a8 <__ssvfscanf_r+0xf4>
   14736:	2b25      	cmp	r3, #37	; 0x25
   14738:	d040      	beq.n	147bc <__ssvfscanf_r+0x108>
   1473a:	2d00      	cmp	r5, #0
   1473c:	d0e1      	beq.n	14702 <__ssvfscanf_r+0x4e>
   1473e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14740:	1b9e      	subs	r6, r3, r6
   14742:	f8db 3004 	ldr.w	r3, [fp, #4]
   14746:	1e74      	subs	r4, r6, #1
   14748:	2b00      	cmp	r3, #0
   1474a:	f340 8098 	ble.w	1487e <__ssvfscanf_r+0x1ca>
   1474e:	f8db 1000 	ldr.w	r1, [fp]
   14752:	f894 c001 	ldrb.w	ip, [r4, #1]
   14756:	f891 e000 	ldrb.w	lr, [r1]
   1475a:	1ca3      	adds	r3, r4, #2
   1475c:	eb0a 0003 	add.w	r0, sl, r3
   14760:	45e6      	cmp	lr, ip
   14762:	f101 0101 	add.w	r1, r1, #1
   14766:	eba3 0206 	sub.w	r2, r3, r6
   1476a:	f104 0401 	add.w	r4, r4, #1
   1476e:	eba0 0006 	sub.w	r0, r0, r6
   14772:	f040 8094 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   14776:	f8db 3004 	ldr.w	r3, [fp, #4]
   1477a:	f8cb 1000 	str.w	r1, [fp]
   1477e:	3b01      	subs	r3, #1
   14780:	42aa      	cmp	r2, r5
   14782:	f8cb 3004 	str.w	r3, [fp, #4]
   14786:	dbdf      	blt.n	14748 <__ssvfscanf_r+0x94>
   14788:	4682      	mov	sl, r0
   1478a:	e7ba      	b.n	14702 <__ssvfscanf_r+0x4e>
   1478c:	3301      	adds	r3, #1
   1478e:	64fb      	str	r3, [r7, #76]	; 0x4c
   14790:	2208      	movs	r2, #8
   14792:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   14796:	2100      	movs	r1, #0
   14798:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1479c:	657b      	str	r3, [r7, #84]	; 0x54
   1479e:	f7fc fa27 	bl	10bf0 <memset>
   147a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   147a4:	2b00      	cmp	r3, #0
   147a6:	d07a      	beq.n	1489e <__ssvfscanf_r+0x1ea>
   147a8:	4e5a      	ldr	r6, [pc, #360]	; (14914 <__ssvfscanf_r+0x260>)
   147aa:	5cf2      	ldrb	r2, [r6, r3]
   147ac:	0710      	lsls	r0, r2, #28
   147ae:	f100 851c 	bmi.w	151ea <__ssvfscanf_r+0xb36>
   147b2:	2b25      	cmp	r3, #37	; 0x25
   147b4:	f040 8086 	bne.w	148c4 <__ssvfscanf_r+0x210>
   147b8:	2501      	movs	r5, #1
   147ba:	462e      	mov	r6, r5
   147bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   147be:	2400      	movs	r4, #0
   147c0:	7802      	ldrb	r2, [r0, #0]
   147c2:	46a0      	mov	r8, r4
   147c4:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   147c8:	1c41      	adds	r1, r0, #1
   147ca:	2b55      	cmp	r3, #85	; 0x55
   147cc:	d867      	bhi.n	1489e <__ssvfscanf_r+0x1ea>
   147ce:	e8df f013 	tbh	[pc, r3, lsl #1]
   147d2:	070a      	.short	0x070a
   147d4:	00660066 	.word	0x00660066
   147d8:	00660066 	.word	0x00660066
   147dc:	00660701 	.word	0x00660701
   147e0:	00660066 	.word	0x00660066
   147e4:	00660066 	.word	0x00660066
   147e8:	060c060c 	.word	0x060c060c
   147ec:	060c060c 	.word	0x060c060c
   147f0:	060c060c 	.word	0x060c060c
   147f4:	060c060c 	.word	0x060c060c
   147f8:	060c060c 	.word	0x060c060c
   147fc:	00660066 	.word	0x00660066
   14800:	00660066 	.word	0x00660066
   14804:	00660066 	.word	0x00660066
   14808:	06180066 	.word	0x06180066
   1480c:	048e0066 	.word	0x048e0066
   14810:	061804c9 	.word	0x061804c9
   14814:	06180618 	.word	0x06180618
   14818:	00660066 	.word	0x00660066
   1481c:	00660066 	.word	0x00660066
   14820:	00660082 	.word	0x00660082
   14824:	04bf0066 	.word	0x04bf0066
   14828:	00660066 	.word	0x00660066
   1482c:	00890066 	.word	0x00890066
   14830:	00660066 	.word	0x00660066
   14834:	00660066 	.word	0x00660066
   14838:	0066066b 	.word	0x0066066b
   1483c:	06dd0066 	.word	0x06dd0066
   14840:	00660066 	.word	0x00660066
   14844:	00660066 	.word	0x00660066
   14848:	06180066 	.word	0x06180066
   1484c:	04900066 	.word	0x04900066
   14850:	061804cb 	.word	0x061804cb
   14854:	06180618 	.word	0x06180618
   14858:	06d206be 	.word	0x06d206be
   1485c:	00660082 	.word	0x00660082
   14860:	06f306e7 	.word	0x06f306e7
   14864:	04c106ac 	.word	0x04c106ac
   14868:	006606da 	.word	0x006606da
   1486c:	008b0066 	.word	0x008b0066
   14870:	06ca007d 	.word	0x06ca007d
   14874:	00660066 	.word	0x00660066
   14878:	0066066b 	.word	0x0066066b
   1487c:	007d      	.short	0x007d
   1487e:	4659      	mov	r1, fp
   14880:	4648      	mov	r0, r9
   14882:	f003 f8c1 	bl	17a08 <__ssrefill_r>
   14886:	2800      	cmp	r0, #0
   14888:	f43f af61 	beq.w	1474e <__ssvfscanf_r+0x9a>
   1488c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1488e:	2b00      	cmp	r3, #0
   14890:	f001 8052 	beq.w	15938 <__ssvfscanf_r+0x1284>
   14894:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   14898:	065a      	lsls	r2, r3, #25
   1489a:	f101 804d 	bmi.w	15938 <__ssvfscanf_r+0x1284>
   1489e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   148a0:	b143      	cbz	r3, 148b4 <__ssvfscanf_r+0x200>
   148a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   148a4:	f8d3 8000 	ldr.w	r8, [r3]
   148a8:	f1b8 0f00 	cmp.w	r8, #0
   148ac:	d002      	beq.n	148b4 <__ssvfscanf_r+0x200>
   148ae:	4640      	mov	r0, r8
   148b0:	f7fa fa26 	bl	ed00 <free>
   148b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   148b6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   148ba:	46bd      	mov	sp, r7
   148bc:	ecbd 8b02 	vpop	{d8}
   148c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   148c6:	2501      	movs	r5, #1
   148c8:	1e5e      	subs	r6, r3, #1
   148ca:	e73a      	b.n	14742 <__ssvfscanf_r+0x8e>
   148cc:	0723      	lsls	r3, r4, #28
   148ce:	d1e6      	bne.n	1489e <__ssvfscanf_r+0x1ea>
   148d0:	7842      	ldrb	r2, [r0, #1]
   148d2:	4608      	mov	r0, r1
   148d4:	e776      	b.n	147c4 <__ssvfscanf_r+0x110>
   148d6:	0722      	lsls	r2, r4, #28
   148d8:	d1e1      	bne.n	1489e <__ssvfscanf_r+0x1ea>
   148da:	7842      	ldrb	r2, [r0, #1]
   148dc:	f044 0402 	orr.w	r4, r4, #2
   148e0:	4608      	mov	r0, r1
   148e2:	e76f      	b.n	147c4 <__ssvfscanf_r+0x110>
   148e4:	f044 0401 	orr.w	r4, r4, #1
   148e8:	64f9      	str	r1, [r7, #76]	; 0x4c
   148ea:	2502      	movs	r5, #2
   148ec:	f8db 3004 	ldr.w	r3, [fp, #4]
   148f0:	2b00      	cmp	r3, #0
   148f2:	f340 8408 	ble.w	15106 <__ssvfscanf_r+0xa52>
   148f6:	0660      	lsls	r0, r4, #25
   148f8:	f140 840f 	bpl.w	1511a <__ssvfscanf_r+0xa66>
   148fc:	1e6b      	subs	r3, r5, #1
   148fe:	2b03      	cmp	r3, #3
   14900:	f201 80eb 	bhi.w	15ada <__ssvfscanf_r+0x1426>
   14904:	e8df f013 	tbh	[pc, r3, lsl #1]
   14908:	01f1027b 	.word	0x01f1027b
   1490c:	0008014b 	.word	0x0008014b
   14910:	20008a74 	.word	0x20008a74
   14914:	20000f1d 	.word	0x20000f1d
   14918:	4648      	mov	r0, r9
   1491a:	f001 fc8f 	bl	1623c <_localeconv_r>
   1491e:	6803      	ldr	r3, [r0, #0]
   14920:	623b      	str	r3, [r7, #32]
   14922:	f108 33ff 	add.w	r3, r8, #4294967295
   14926:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1492a:	f240 855a 	bls.w	153e2 <__ssvfscanf_r+0xd2e>
   1492e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   14932:	eb08 0305 	add.w	r3, r8, r5
   14936:	613b      	str	r3, [r7, #16]
   14938:	f240 185d 	movw	r8, #349	; 0x15d
   1493c:	2600      	movs	r6, #0
   1493e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   14942:	ee08 9a10 	vmov	s16, r9
   14946:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1494a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1494c:	637e      	str	r6, [r7, #52]	; 0x34
   1494e:	61fe      	str	r6, [r7, #28]
   14950:	64be      	str	r6, [r7, #72]	; 0x48
   14952:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   14956:	62bb      	str	r3, [r7, #40]	; 0x28
   14958:	461d      	mov	r5, r3
   1495a:	4646      	mov	r6, r8
   1495c:	f8db 1000 	ldr.w	r1, [fp]
   14960:	780a      	ldrb	r2, [r1, #0]
   14962:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   14966:	2b4e      	cmp	r3, #78	; 0x4e
   14968:	d850      	bhi.n	14a0c <__ssvfscanf_r+0x358>
   1496a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1496e:	037e      	.short	0x037e
   14970:	037e004f 	.word	0x037e004f
   14974:	004f004f 	.word	0x004f004f
   14978:	00a600a3 	.word	0x00a600a3
   1497c:	00a600a6 	.word	0x00a600a6
   14980:	00a600a6 	.word	0x00a600a6
   14984:	00a600a6 	.word	0x00a600a6
   14988:	00a600a6 	.word	0x00a600a6
   1498c:	004f004f 	.word	0x004f004f
   14990:	004f004f 	.word	0x004f004f
   14994:	004f004f 	.word	0x004f004f
   14998:	0374004f 	.word	0x0374004f
   1499c:	030b030b 	.word	0x030b030b
   149a0:	039e030b 	.word	0x039e030b
   149a4:	004f0394 	.word	0x004f0394
   149a8:	0384004f 	.word	0x0384004f
   149ac:	004f004f 	.word	0x004f004f
   149b0:	004f004f 	.word	0x004f004f
   149b4:	004f035d 	.word	0x004f035d
   149b8:	004f033a 	.word	0x004f033a
   149bc:	004f004f 	.word	0x004f004f
   149c0:	004f0333 	.word	0x004f0333
   149c4:	004f004f 	.word	0x004f004f
   149c8:	036d031e 	.word	0x036d031e
   149cc:	004f004f 	.word	0x004f004f
   149d0:	004f004f 	.word	0x004f004f
   149d4:	004f004f 	.word	0x004f004f
   149d8:	0374004f 	.word	0x0374004f
   149dc:	030b030b 	.word	0x030b030b
   149e0:	039e030b 	.word	0x039e030b
   149e4:	004f0394 	.word	0x004f0394
   149e8:	0384004f 	.word	0x0384004f
   149ec:	004f004f 	.word	0x004f004f
   149f0:	004f004f 	.word	0x004f004f
   149f4:	004f035d 	.word	0x004f035d
   149f8:	004f033a 	.word	0x004f033a
   149fc:	004f004f 	.word	0x004f004f
   14a00:	004f0333 	.word	0x004f0333
   14a04:	004f004f 	.word	0x004f004f
   14a08:	036d031e 	.word	0x036d031e
   14a0c:	05a0      	lsls	r0, r4, #22
   14a0e:	d56f      	bpl.n	14af0 <__ssvfscanf_r+0x43c>
   14a10:	6a38      	ldr	r0, [r7, #32]
   14a12:	7803      	ldrb	r3, [r0, #0]
   14a14:	4293      	cmp	r3, r2
   14a16:	d16b      	bne.n	14af0 <__ssvfscanf_r+0x43c>
   14a18:	e9c7 4502 	strd	r4, r5, [r7, #8]
   14a1c:	607e      	str	r6, [r7, #4]
   14a1e:	4681      	mov	r9, r0
   14a20:	ee18 6a10 	vmov	r6, s16
   14a24:	f04f 0800 	mov.w	r8, #0
   14a28:	465c      	mov	r4, fp
   14a2a:	e007      	b.n	14a3c <__ssvfscanf_r+0x388>
   14a2c:	6021      	str	r1, [r4, #0]
   14a2e:	f891 e000 	ldrb.w	lr, [r1]
   14a32:	f899 0000 	ldrb.w	r0, [r9]
   14a36:	4586      	cmp	lr, r0
   14a38:	d11c      	bne.n	14a74 <__ssvfscanf_r+0x3c0>
   14a3a:	46da      	mov	sl, fp
   14a3c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   14a40:	4645      	mov	r5, r8
   14a42:	f10a 0b01 	add.w	fp, sl, #1
   14a46:	3101      	adds	r1, #1
   14a48:	f108 0801 	add.w	r8, r8, #1
   14a4c:	2800      	cmp	r0, #0
   14a4e:	f000 8664 	beq.w	1571a <__ssvfscanf_r+0x1066>
   14a52:	6860      	ldr	r0, [r4, #4]
   14a54:	3801      	subs	r0, #1
   14a56:	2800      	cmp	r0, #0
   14a58:	6060      	str	r0, [r4, #4]
   14a5a:	dce7      	bgt.n	14a2c <__ssvfscanf_r+0x378>
   14a5c:	4621      	mov	r1, r4
   14a5e:	4630      	mov	r0, r6
   14a60:	f002 ffd2 	bl	17a08 <__ssrefill_r>
   14a64:	b930      	cbnz	r0, 14a74 <__ssvfscanf_r+0x3c0>
   14a66:	6821      	ldr	r1, [r4, #0]
   14a68:	f899 0000 	ldrb.w	r0, [r9]
   14a6c:	f891 e000 	ldrb.w	lr, [r1]
   14a70:	4586      	cmp	lr, r0
   14a72:	d0e2      	beq.n	14a3a <__ssvfscanf_r+0x386>
   14a74:	46a3      	mov	fp, r4
   14a76:	6a3a      	ldr	r2, [r7, #32]
   14a78:	68bc      	ldr	r4, [r7, #8]
   14a7a:	613d      	str	r5, [r7, #16]
   14a7c:	462b      	mov	r3, r5
   14a7e:	46b1      	mov	r9, r6
   14a80:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   14a82:	68fd      	ldr	r5, [r7, #12]
   14a84:	64bd      	str	r5, [r7, #72]	; 0x48
   14a86:	3301      	adds	r3, #1
   14a88:	465d      	mov	r5, fp
   14a8a:	eb02 0803 	add.w	r8, r2, r3
   14a8e:	46b3      	mov	fp, r6
   14a90:	4626      	mov	r6, r4
   14a92:	4614      	mov	r4, r2
   14a94:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   14a98:	462a      	mov	r2, r5
   14a9a:	4648      	mov	r0, r9
   14a9c:	f002 ff74 	bl	17988 <_sungetc_r>
   14aa0:	4544      	cmp	r4, r8
   14aa2:	d1f7      	bne.n	14a94 <__ssvfscanf_r+0x3e0>
   14aa4:	693b      	ldr	r3, [r7, #16]
   14aa6:	4634      	mov	r4, r6
   14aa8:	ebaa 0a03 	sub.w	sl, sl, r3
   14aac:	465e      	mov	r6, fp
   14aae:	46ab      	mov	fp, r5
   14ab0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   14ab2:	e020      	b.n	14af6 <__ssvfscanf_r+0x442>
   14ab4:	05e0      	lsls	r0, r4, #23
   14ab6:	f100 8501 	bmi.w	154bc <__ssvfscanf_r+0xe08>
   14aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   14abe:	42d9      	cmn	r1, r3
   14ac0:	d116      	bne.n	14af0 <__ssvfscanf_r+0x43c>
   14ac2:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   14ac6:	f805 2b01 	strb.w	r2, [r5], #1
   14aca:	3e01      	subs	r6, #1
   14acc:	f8db 3004 	ldr.w	r3, [fp, #4]
   14ad0:	3b01      	subs	r3, #1
   14ad2:	2b00      	cmp	r3, #0
   14ad4:	f10a 0a01 	add.w	sl, sl, #1
   14ad8:	f8cb 3004 	str.w	r3, [fp, #4]
   14adc:	f340 836f 	ble.w	151be <__ssvfscanf_r+0xb0a>
   14ae0:	f8db 3000 	ldr.w	r3, [fp]
   14ae4:	3301      	adds	r3, #1
   14ae6:	f8cb 3000 	str.w	r3, [fp]
   14aea:	2e00      	cmp	r6, #0
   14aec:	f47f af36 	bne.w	1495c <__ssvfscanf_r+0x2a8>
   14af0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   14af2:	ee18 9a10 	vmov	r9, s16
   14af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14af8:	2b00      	cmp	r3, #0
   14afa:	f040 82dc 	bne.w	150b6 <__ssvfscanf_r+0xa02>
   14afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14b00:	3b01      	subs	r3, #1
   14b02:	2b01      	cmp	r3, #1
   14b04:	f241 8016 	bls.w	15b34 <__ssvfscanf_r+0x1480>
   14b08:	1e73      	subs	r3, r6, #1
   14b0a:	2b06      	cmp	r3, #6
   14b0c:	f240 8627 	bls.w	1575e <__ssvfscanf_r+0x10aa>
   14b10:	05e3      	lsls	r3, r4, #23
   14b12:	d51b      	bpl.n	14b4c <__ssvfscanf_r+0x498>
   14b14:	0566      	lsls	r6, r4, #21
   14b16:	f101 80b5 	bmi.w	15c84 <__ssvfscanf_r+0x15d0>
   14b1a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   14b1e:	2965      	cmp	r1, #101	; 0x65
   14b20:	f105 33ff 	add.w	r3, r5, #4294967295
   14b24:	f10a 36ff 	add.w	r6, sl, #4294967295
   14b28:	d00a      	beq.n	14b40 <__ssvfscanf_r+0x48c>
   14b2a:	2945      	cmp	r1, #69	; 0x45
   14b2c:	d008      	beq.n	14b40 <__ssvfscanf_r+0x48c>
   14b2e:	465a      	mov	r2, fp
   14b30:	4648      	mov	r0, r9
   14b32:	f002 ff29 	bl	17988 <_sungetc_r>
   14b36:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   14b3a:	f1aa 0602 	sub.w	r6, sl, #2
   14b3e:	1eab      	subs	r3, r5, #2
   14b40:	465a      	mov	r2, fp
   14b42:	4648      	mov	r0, r9
   14b44:	46b2      	mov	sl, r6
   14b46:	461d      	mov	r5, r3
   14b48:	f002 ff1e 	bl	17988 <_sungetc_r>
   14b4c:	f014 0210 	ands.w	r2, r4, #16
   14b50:	f47f add7 	bne.w	14702 <__ssvfscanf_r+0x4e>
   14b54:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   14b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14b5c:	702a      	strb	r2, [r5, #0]
   14b5e:	f000 84d2 	beq.w	15506 <__ssvfscanf_r+0xe52>
   14b62:	69bb      	ldr	r3, [r7, #24]
   14b64:	2b00      	cmp	r3, #0
   14b66:	f040 872c 	bne.w	159c2 <__ssvfscanf_r+0x130e>
   14b6a:	4648      	mov	r0, r9
   14b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14b6e:	2200      	movs	r2, #0
   14b70:	f7fb fcba 	bl	104e8 <_strtod_r>
   14b74:	07e0      	lsls	r0, r4, #31
   14b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14b78:	f100 85c9 	bmi.w	1570e <__ssvfscanf_r+0x105a>
   14b7c:	07a1      	lsls	r1, r4, #30
   14b7e:	f100 85c6 	bmi.w	1570e <__ssvfscanf_r+0x105a>
   14b82:	eeb4 0b40 	vcmp.f64	d0, d0
   14b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14b8a:	f853 4b04 	ldr.w	r4, [r3], #4
   14b8e:	f180 86f4 	bvs.w	1597a <__ssvfscanf_r+0x12c6>
   14b92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   14b96:	633b      	str	r3, [r7, #48]	; 0x30
   14b98:	ed84 0a00 	vstr	s0, [r4]
   14b9c:	e3a2      	b.n	152e4 <__ssvfscanf_r+0xc30>
   14b9e:	f108 33ff 	add.w	r3, r8, #4294967295
   14ba2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   14ba6:	f240 83a2 	bls.w	152ee <__ssvfscanf_r+0xc3a>
   14baa:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   14bae:	eb08 0302 	add.w	r3, r8, r2
   14bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   14bb4:	f240 185d 	movw	r8, #349	; 0x15d
   14bb8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   14bbc:	2200      	movs	r2, #0
   14bbe:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   14bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   14bc2:	4659      	mov	r1, fp
   14bc4:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   14bc8:	46d3      	mov	fp, sl
   14bca:	461d      	mov	r5, r3
   14bcc:	4692      	mov	sl, r2
   14bce:	680a      	ldr	r2, [r1, #0]
   14bd0:	7810      	ldrb	r0, [r2, #0]
   14bd2:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   14bd6:	2b4d      	cmp	r3, #77	; 0x4d
   14bd8:	d860      	bhi.n	14c9c <__ssvfscanf_r+0x5e8>
   14bda:	e8df f013 	tbh	[pc, r3, lsl #1]
   14bde:	0282      	.short	0x0282
   14be0:	0282005f 	.word	0x0282005f
   14be4:	005f005f 	.word	0x005f005f
   14be8:	01e002cd 	.word	0x01e002cd
   14bec:	01e001e0 	.word	0x01e001e0
   14bf0:	01e001e0 	.word	0x01e001e0
   14bf4:	01e001e0 	.word	0x01e001e0
   14bf8:	026f026f 	.word	0x026f026f
   14bfc:	005f005f 	.word	0x005f005f
   14c00:	005f005f 	.word	0x005f005f
   14c04:	005f005f 	.word	0x005f005f
   14c08:	004e005f 	.word	0x004e005f
   14c0c:	004e004e 	.word	0x004e004e
   14c10:	004e004e 	.word	0x004e004e
   14c14:	005f004e 	.word	0x005f004e
   14c18:	005f005f 	.word	0x005f005f
   14c1c:	005f005f 	.word	0x005f005f
   14c20:	005f005f 	.word	0x005f005f
   14c24:	005f005f 	.word	0x005f005f
   14c28:	005f005f 	.word	0x005f005f
   14c2c:	005f005f 	.word	0x005f005f
   14c30:	005f005f 	.word	0x005f005f
   14c34:	005f005f 	.word	0x005f005f
   14c38:	005f0276 	.word	0x005f0276
   14c3c:	005f005f 	.word	0x005f005f
   14c40:	005f005f 	.word	0x005f005f
   14c44:	005f005f 	.word	0x005f005f
   14c48:	004e005f 	.word	0x004e005f
   14c4c:	004e004e 	.word	0x004e004e
   14c50:	004e004e 	.word	0x004e004e
   14c54:	005f004e 	.word	0x005f004e
   14c58:	005f005f 	.word	0x005f005f
   14c5c:	005f005f 	.word	0x005f005f
   14c60:	005f005f 	.word	0x005f005f
   14c64:	005f005f 	.word	0x005f005f
   14c68:	005f005f 	.word	0x005f005f
   14c6c:	005f005f 	.word	0x005f005f
   14c70:	005f005f 	.word	0x005f005f
   14c74:	005f005f 	.word	0x005f005f
   14c78:	0276      	.short	0x0276
   14c7a:	2e0a      	cmp	r6, #10
   14c7c:	dd0e      	ble.n	14c9c <__ssvfscanf_r+0x5e8>
   14c7e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   14c82:	684b      	ldr	r3, [r1, #4]
   14c84:	f805 0b01 	strb.w	r0, [r5], #1
   14c88:	3b01      	subs	r3, #1
   14c8a:	2b00      	cmp	r3, #0
   14c8c:	604b      	str	r3, [r1, #4]
   14c8e:	f340 828d 	ble.w	151ac <__ssvfscanf_r+0xaf8>
   14c92:	3201      	adds	r2, #1
   14c94:	600a      	str	r2, [r1, #0]
   14c96:	f1b8 0801 	subs.w	r8, r8, #1
   14c9a:	d198      	bne.n	14bce <__ssvfscanf_r+0x51a>
   14c9c:	05e0      	lsls	r0, r4, #23
   14c9e:	46d0      	mov	r8, sl
   14ca0:	63be      	str	r6, [r7, #56]	; 0x38
   14ca2:	46da      	mov	sl, fp
   14ca4:	468b      	mov	fp, r1
   14ca6:	d507      	bpl.n	14cb8 <__ssvfscanf_r+0x604>
   14ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14caa:	429d      	cmp	r5, r3
   14cac:	f200 8422 	bhi.w	154f4 <__ssvfscanf_r+0xe40>
   14cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14cb2:	429d      	cmp	r5, r3
   14cb4:	f43f adf3 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   14cb8:	f014 0210 	ands.w	r2, r4, #16
   14cbc:	d110      	bne.n	14ce0 <__ssvfscanf_r+0x62c>
   14cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14cc2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   14cc4:	702a      	strb	r2, [r5, #0]
   14cc6:	4648      	mov	r0, r9
   14cc8:	47b0      	blx	r6
   14cca:	06a1      	lsls	r1, r4, #26
   14ccc:	f140 8408 	bpl.w	154e0 <__ssvfscanf_r+0xe2c>
   14cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14cd2:	f853 2b04 	ldr.w	r2, [r3], #4
   14cd6:	6010      	str	r0, [r2, #0]
   14cd8:	633b      	str	r3, [r7, #48]	; 0x30
   14cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14cdc:	3301      	adds	r3, #1
   14cde:	647b      	str	r3, [r7, #68]	; 0x44
   14ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14ce2:	1aed      	subs	r5, r5, r3
   14ce4:	4445      	add	r5, r8
   14ce6:	44aa      	add	sl, r5
   14ce8:	e50b      	b.n	14702 <__ssvfscanf_r+0x4e>
   14cea:	f1b8 0f00 	cmp.w	r8, #0
   14cee:	bf08      	it	eq
   14cf0:	f04f 38ff 	moveq.w	r8, #4294967295
   14cf4:	07e0      	lsls	r0, r4, #31
   14cf6:	f140 8295 	bpl.w	15224 <__ssvfscanf_r+0xb70>
   14cfa:	f014 0310 	ands.w	r3, r4, #16
   14cfe:	637b      	str	r3, [r7, #52]	; 0x34
   14d00:	f040 8474 	bne.w	155ec <__ssvfscanf_r+0xf38>
   14d04:	0621      	lsls	r1, r4, #24
   14d06:	f140 8666 	bpl.w	159d6 <__ssvfscanf_r+0x1322>
   14d0a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   14d0c:	f854 3b04 	ldr.w	r3, [r4], #4
   14d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   14d12:	2b00      	cmp	r3, #0
   14d14:	f43f adc3 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   14d18:	2080      	movs	r0, #128	; 0x80
   14d1a:	f7f9 ffe9 	bl	ecf0 <malloc>
   14d1e:	64b8      	str	r0, [r7, #72]	; 0x48
   14d20:	2800      	cmp	r0, #0
   14d22:	f000 8778 	beq.w	15c16 <__ssvfscanf_r+0x1562>
   14d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14d2a:	601a      	str	r2, [r3, #0]
   14d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   14d2e:	88d5      	ldrh	r5, [r2, #6]
   14d30:	8893      	ldrh	r3, [r2, #4]
   14d32:	429d      	cmp	r5, r3
   14d34:	f080 8552 	bcs.w	157dc <__ssvfscanf_r+0x1128>
   14d38:	6810      	ldr	r0, [r2, #0]
   14d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d3c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   14d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14d42:	633c      	str	r4, [r7, #48]	; 0x30
   14d44:	3501      	adds	r5, #1
   14d46:	80dd      	strh	r5, [r3, #6]
   14d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   14d4c:	2320      	movs	r3, #32
   14d4e:	623b      	str	r3, [r7, #32]
   14d50:	f8db 3000 	ldr.w	r3, [fp]
   14d54:	4eb1      	ldr	r6, [pc, #708]	; (1501c <__ssvfscanf_r+0x968>)
   14d56:	781b      	ldrb	r3, [r3, #0]
   14d58:	5cf3      	ldrb	r3, [r6, r3]
   14d5a:	f013 0308 	ands.w	r3, r3, #8
   14d5e:	f040 84bb 	bne.w	156d8 <__ssvfscanf_r+0x1024>
   14d62:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   14d64:	627e      	str	r6, [r7, #36]	; 0x24
   14d66:	461d      	mov	r5, r3
   14d68:	f7fc f862 	bl	10e30 <__locale_mb_cur_max>
   14d6c:	42a8      	cmp	r0, r5
   14d6e:	f43f ad8d 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   14d72:	e9db 3200 	ldrd	r3, r2, [fp]
   14d76:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   14d7a:	f813 1b01 	ldrb.w	r1, [r3], #1
   14d7e:	5541      	strb	r1, [r0, r5]
   14d80:	3a01      	subs	r2, #1
   14d82:	2c03      	cmp	r4, #3
   14d84:	e9cb 3200 	strd	r3, r2, [fp]
   14d88:	f105 0501 	add.w	r5, r5, #1
   14d8c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   14d90:	d102      	bne.n	14d98 <__ssvfscanf_r+0x6e4>
   14d92:	6833      	ldr	r3, [r6, #0]
   14d94:	2b04      	cmp	r3, #4
   14d96:	d004      	beq.n	14da2 <__ssvfscanf_r+0x6ee>
   14d98:	2208      	movs	r2, #8
   14d9a:	2100      	movs	r1, #0
   14d9c:	4630      	mov	r0, r6
   14d9e:	f7fb ff27 	bl	10bf0 <memset>
   14da2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   14da6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   14da8:	9600      	str	r6, [sp, #0]
   14daa:	462b      	mov	r3, r5
   14dac:	4648      	mov	r0, r9
   14dae:	f002 fc17 	bl	175e0 <_mbrtowc_r>
   14db2:	1c42      	adds	r2, r0, #1
   14db4:	4604      	mov	r4, r0
   14db6:	f43f ad69 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   14dba:	2800      	cmp	r0, #0
   14dbc:	f040 8478 	bne.w	156b0 <__ssvfscanf_r+0xffc>
   14dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14dc2:	6018      	str	r0, [r3, #0]
   14dc4:	f002 fc68 	bl	17698 <iswspace>
   14dc8:	2800      	cmp	r0, #0
   14dca:	f040 865c 	bne.w	15a86 <__ssvfscanf_r+0x13d2>
   14dce:	44aa      	add	sl, r5
   14dd0:	f108 38ff 	add.w	r8, r8, #4294967295
   14dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14dd6:	2b00      	cmp	r3, #0
   14dd8:	f040 8633 	bne.w	15a42 <__ssvfscanf_r+0x138e>
   14ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   14de0:	3304      	adds	r3, #4
   14de2:	64bb      	str	r3, [r7, #72]	; 0x48
   14de4:	2a00      	cmp	r2, #0
   14de6:	f000 862c 	beq.w	15a42 <__ssvfscanf_r+0x138e>
   14dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14dec:	1a9d      	subs	r5, r3, r2
   14dee:	6a3b      	ldr	r3, [r7, #32]
   14df0:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   14df4:	f240 8756 	bls.w	15ca4 <__ssvfscanf_r+0x15f0>
   14df8:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   14dfa:	f000 bc5c 	b.w	156b6 <__ssvfscanf_r+0x1002>
   14dfe:	f1b8 0f00 	cmp.w	r8, #0
   14e02:	bf08      	it	eq
   14e04:	f04f 38ff 	moveq.w	r8, #4294967295
   14e08:	07e0      	lsls	r0, r4, #31
   14e0a:	f140 827b 	bpl.w	15304 <__ssvfscanf_r+0xc50>
   14e0e:	f014 0310 	ands.w	r3, r4, #16
   14e12:	62bb      	str	r3, [r7, #40]	; 0x28
   14e14:	f040 83f3 	bne.w	155fe <__ssvfscanf_r+0xf4a>
   14e18:	0621      	lsls	r1, r4, #24
   14e1a:	f140 85ed 	bpl.w	159f8 <__ssvfscanf_r+0x1344>
   14e1e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   14e20:	f856 3b04 	ldr.w	r3, [r6], #4
   14e24:	623b      	str	r3, [r7, #32]
   14e26:	2b00      	cmp	r3, #0
   14e28:	f43f ad39 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   14e2c:	2080      	movs	r0, #128	; 0x80
   14e2e:	f7f9 ff5f 	bl	ecf0 <malloc>
   14e32:	4604      	mov	r4, r0
   14e34:	2800      	cmp	r0, #0
   14e36:	f000 86ee 	beq.w	15c16 <__ssvfscanf_r+0x1562>
   14e3a:	6a3b      	ldr	r3, [r7, #32]
   14e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   14e3e:	6018      	str	r0, [r3, #0]
   14e40:	88d5      	ldrh	r5, [r2, #6]
   14e42:	8893      	ldrh	r3, [r2, #4]
   14e44:	429d      	cmp	r5, r3
   14e46:	f080 84dd 	bcs.w	15804 <__ssvfscanf_r+0x1150>
   14e4a:	6810      	ldr	r0, [r2, #0]
   14e4c:	6a3b      	ldr	r3, [r7, #32]
   14e4e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   14e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   14e54:	633e      	str	r6, [r7, #48]	; 0x30
   14e56:	3501      	adds	r5, #1
   14e58:	80dd      	strh	r5, [r3, #6]
   14e5a:	2320      	movs	r3, #32
   14e5c:	61fc      	str	r4, [r7, #28]
   14e5e:	61bb      	str	r3, [r7, #24]
   14e60:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   14e62:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   14e66:	2500      	movs	r5, #0
   14e68:	46c2      	mov	sl, r8
   14e6a:	46a0      	mov	r8, r4
   14e6c:	f7fb ffe0 	bl	10e30 <__locale_mb_cur_max>
   14e70:	42a8      	cmp	r0, r5
   14e72:	f43f ad0b 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   14e76:	e9db 3200 	ldrd	r3, r2, [fp]
   14e7a:	f813 1b01 	ldrb.w	r1, [r3], #1
   14e7e:	3a01      	subs	r2, #1
   14e80:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   14e84:	e9cb 3200 	strd	r3, r2, [fp]
   14e88:	2e03      	cmp	r6, #3
   14e8a:	f105 0301 	add.w	r3, r5, #1
   14e8e:	5541      	strb	r1, [r0, r5]
   14e90:	64bb      	str	r3, [r7, #72]	; 0x48
   14e92:	f107 0460 	add.w	r4, r7, #96	; 0x60
   14e96:	d102      	bne.n	14e9e <__ssvfscanf_r+0x7ea>
   14e98:	6823      	ldr	r3, [r4, #0]
   14e9a:	2b04      	cmp	r3, #4
   14e9c:	d004      	beq.n	14ea8 <__ssvfscanf_r+0x7f4>
   14e9e:	2208      	movs	r2, #8
   14ea0:	2100      	movs	r1, #0
   14ea2:	4620      	mov	r0, r4
   14ea4:	f7fb fea4 	bl	10bf0 <memset>
   14ea8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   14eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14eae:	9400      	str	r4, [sp, #0]
   14eb0:	4641      	mov	r1, r8
   14eb2:	4648      	mov	r0, r9
   14eb4:	f002 fb94 	bl	175e0 <_mbrtowc_r>
   14eb8:	1c42      	adds	r2, r0, #1
   14eba:	4606      	mov	r6, r0
   14ebc:	f43f ace6 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   14ec0:	2800      	cmp	r0, #0
   14ec2:	f040 82ca 	bne.w	1545a <__ssvfscanf_r+0xda6>
   14ec6:	f8c8 0000 	str.w	r0, [r8]
   14eca:	4605      	mov	r5, r0
   14ecc:	f107 0368 	add.w	r3, r7, #104	; 0x68
   14ed0:	2208      	movs	r2, #8
   14ed2:	2100      	movs	r1, #0
   14ed4:	4618      	mov	r0, r3
   14ed6:	637b      	str	r3, [r7, #52]	; 0x34
   14ed8:	f7fb fe8a 	bl	10bf0 <memset>
   14edc:	4950      	ldr	r1, [pc, #320]	; (15020 <__ssvfscanf_r+0x96c>)
   14ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ee0:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   14ee4:	462a      	mov	r2, r5
   14ee6:	4648      	mov	r0, r9
   14ee8:	460d      	mov	r5, r1
   14eea:	f107 0150 	add.w	r1, r7, #80	; 0x50
   14eee:	47a8      	blx	r5
   14ef0:	2801      	cmp	r0, #1
   14ef2:	f000 83d5 	beq.w	156a0 <__ssvfscanf_r+0xfec>
   14ef6:	2200      	movs	r2, #0
   14ef8:	f107 0370 	add.w	r3, r7, #112	; 0x70
   14efc:	5c9b      	ldrb	r3, [r3, r2]
   14efe:	2b00      	cmp	r3, #0
   14f00:	f000 85a1 	beq.w	15a46 <__ssvfscanf_r+0x1392>
   14f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f06:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14f08:	2e03      	cmp	r6, #3
   14f0a:	4413      	add	r3, r2
   14f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   14f0e:	f000 83ca 	beq.w	156a6 <__ssvfscanf_r+0xff2>
   14f12:	f10a 3aff 	add.w	sl, sl, #4294967295
   14f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f18:	b95b      	cbnz	r3, 14f32 <__ssvfscanf_r+0x87e>
   14f1a:	6a3b      	ldr	r3, [r7, #32]
   14f1c:	f108 0804 	add.w	r8, r8, #4
   14f20:	b13b      	cbz	r3, 14f32 <__ssvfscanf_r+0x87e>
   14f22:	69fb      	ldr	r3, [r7, #28]
   14f24:	eba8 0403 	sub.w	r4, r8, r3
   14f28:	69bb      	ldr	r3, [r7, #24]
   14f2a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   14f2e:	f240 8405 	bls.w	1573c <__ssvfscanf_r+0x1088>
   14f32:	f8db 3004 	ldr.w	r3, [fp, #4]
   14f36:	2b00      	cmp	r3, #0
   14f38:	f04f 0500 	mov.w	r5, #0
   14f3c:	f340 8296 	ble.w	1546c <__ssvfscanf_r+0xdb8>
   14f40:	f1ba 0f00 	cmp.w	sl, #0
   14f44:	d192      	bne.n	14e6c <__ssvfscanf_r+0x7b8>
   14f46:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   14f4a:	627e      	str	r6, [r7, #36]	; 0x24
   14f4c:	4644      	mov	r4, r8
   14f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14f50:	2b00      	cmp	r3, #0
   14f52:	f47f abd6 	bne.w	14702 <__ssvfscanf_r+0x4e>
   14f56:	6023      	str	r3, [r4, #0]
   14f58:	6a3b      	ldr	r3, [r7, #32]
   14f5a:	2b00      	cmp	r3, #0
   14f5c:	f000 81c2 	beq.w	152e4 <__ssvfscanf_r+0xc30>
   14f60:	69fb      	ldr	r3, [r7, #28]
   14f62:	69ba      	ldr	r2, [r7, #24]
   14f64:	1ae1      	subs	r1, r4, r3
   14f66:	108b      	asrs	r3, r1, #2
   14f68:	3301      	adds	r3, #1
   14f6a:	429a      	cmp	r2, r3
   14f6c:	f240 81ba 	bls.w	152e4 <__ssvfscanf_r+0xc30>
   14f70:	6a3c      	ldr	r4, [r7, #32]
   14f72:	3104      	adds	r1, #4
   14f74:	6820      	ldr	r0, [r4, #0]
   14f76:	f7fa f987 	bl	f288 <realloc>
   14f7a:	2800      	cmp	r0, #0
   14f7c:	f000 81b2 	beq.w	152e4 <__ssvfscanf_r+0xc30>
   14f80:	6020      	str	r0, [r4, #0]
   14f82:	e1af      	b.n	152e4 <__ssvfscanf_r+0xc30>
   14f84:	0521      	lsls	r1, r4, #20
   14f86:	f57f adb3 	bpl.w	14af0 <__ssvfscanf_r+0x43c>
   14f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   14f8e:	185b      	adds	r3, r3, r1
   14f90:	f47f adae 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   14f94:	64bb      	str	r3, [r7, #72]	; 0x48
   14f96:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   14f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   14f9c:	e593      	b.n	14ac6 <__ssvfscanf_r+0x412>
   14f9e:	4b21      	ldr	r3, [pc, #132]	; (15024 <__ssvfscanf_r+0x970>)
   14fa0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   14fa4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   14fa8:	e66b      	b.n	14c82 <__ssvfscanf_r+0x5ce>
   14faa:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   14fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   14fb2:	f47f ad9d 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   14fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14fb8:	2b01      	cmp	r3, #1
   14fba:	f47f ad99 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   14fbe:	2330      	movs	r3, #48	; 0x30
   14fc0:	f805 3b01 	strb.w	r3, [r5], #1
   14fc4:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   14fc8:	2300      	movs	r3, #0
   14fca:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   14fce:	3e01      	subs	r6, #1
   14fd0:	637b      	str	r3, [r7, #52]	; 0x34
   14fd2:	e578      	b.n	14ac6 <__ssvfscanf_r+0x412>
   14fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   14fd6:	2b06      	cmp	r3, #6
   14fd8:	f040 8574 	bne.w	15ac4 <__ssvfscanf_r+0x1410>
   14fdc:	2307      	movs	r3, #7
   14fde:	64bb      	str	r3, [r7, #72]	; 0x48
   14fe0:	e571      	b.n	14ac6 <__ssvfscanf_r+0x412>
   14fe2:	0523      	lsls	r3, r4, #20
   14fe4:	f57f ad84 	bpl.w	14af0 <__ssvfscanf_r+0x43c>
   14fe8:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   14fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   14ff0:	d005      	beq.n	14ffe <__ssvfscanf_r+0x94a>
   14ff2:	0561      	lsls	r1, r4, #21
   14ff4:	f57f ad7c 	bpl.w	14af0 <__ssvfscanf_r+0x43c>
   14ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14ffa:	2b00      	cmp	r3, #0
   14ffc:	d047      	beq.n	1508e <__ssvfscanf_r+0x9da>
   14ffe:	05a3      	lsls	r3, r4, #22
   15000:	d404      	bmi.n	1500c <__ssvfscanf_r+0x958>
   15002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15004:	69f9      	ldr	r1, [r7, #28]
   15006:	1a5b      	subs	r3, r3, r1
   15008:	e9c7 5305 	strd	r5, r3, [r7, #20]
   1500c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   15010:	2300      	movs	r3, #0
   15012:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   15016:	637b      	str	r3, [r7, #52]	; 0x34
   15018:	e555      	b.n	14ac6 <__ssvfscanf_r+0x412>
   1501a:	bf00      	nop
   1501c:	20000f1d 	.word	0x20000f1d
   15020:	20008a74 	.word	0x20008a74
   15024:	20002b3c 	.word	0x20002b3c
   15028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1502a:	2b00      	cmp	r3, #0
   1502c:	f000 81ff 	beq.w	1542e <__ssvfscanf_r+0xd7a>
   15030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15032:	2b02      	cmp	r3, #2
   15034:	f000 83b0 	beq.w	15798 <__ssvfscanf_r+0x10e4>
   15038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1503a:	2b01      	cmp	r3, #1
   1503c:	f000 81f1 	beq.w	15422 <__ssvfscanf_r+0xd6e>
   15040:	2b04      	cmp	r3, #4
   15042:	f000 81ee 	beq.w	15422 <__ssvfscanf_r+0xd6e>
   15046:	e553      	b.n	14af0 <__ssvfscanf_r+0x43c>
   15048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1504a:	2b07      	cmp	r3, #7
   1504c:	f040 853a 	bne.w	15ac4 <__ssvfscanf_r+0x1410>
   15050:	2308      	movs	r3, #8
   15052:	64bb      	str	r3, [r7, #72]	; 0x48
   15054:	e537      	b.n	14ac6 <__ssvfscanf_r+0x412>
   15056:	0520      	lsls	r0, r4, #20
   15058:	f100 81f9 	bmi.w	1544e <__ssvfscanf_r+0xd9a>
   1505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1505e:	2b01      	cmp	r3, #1
   15060:	f47f ad46 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   15064:	2302      	movs	r3, #2
   15066:	63fb      	str	r3, [r7, #60]	; 0x3c
   15068:	e52d      	b.n	14ac6 <__ssvfscanf_r+0x412>
   1506a:	0623      	lsls	r3, r4, #24
   1506c:	f57f ad40 	bpl.w	14af0 <__ssvfscanf_r+0x43c>
   15070:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   15074:	e527      	b.n	14ac6 <__ssvfscanf_r+0x412>
   15076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15078:	2b00      	cmp	r3, #0
   1507a:	f040 81cc 	bne.w	15416 <__ssvfscanf_r+0xd62>
   1507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15080:	b9b3      	cbnz	r3, 150b0 <__ssvfscanf_r+0x9fc>
   15082:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   15086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1508a:	f000 8520 	beq.w	15ace <__ssvfscanf_r+0x141a>
   1508e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15090:	ee18 9a10 	vmov	r9, s16
   15094:	e533      	b.n	14afe <__ssvfscanf_r+0x44a>
   15096:	0521      	lsls	r1, r4, #20
   15098:	f100 81b7 	bmi.w	1540a <__ssvfscanf_r+0xd56>
   1509c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1509e:	2b02      	cmp	r3, #2
   150a0:	f040 8510 	bne.w	15ac4 <__ssvfscanf_r+0x1410>
   150a4:	2303      	movs	r3, #3
   150a6:	64bb      	str	r3, [r7, #72]	; 0x48
   150a8:	e50d      	b.n	14ac6 <__ssvfscanf_r+0x412>
   150aa:	0520      	lsls	r0, r4, #20
   150ac:	d59c      	bpl.n	14fe8 <__ssvfscanf_r+0x934>
   150ae:	e76c      	b.n	14f8a <__ssvfscanf_r+0x8d6>
   150b0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   150b2:	ee18 9a10 	vmov	r9, s16
   150b6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   150ba:	e520      	b.n	14afe <__ssvfscanf_r+0x44a>
   150bc:	4b8d      	ldr	r3, [pc, #564]	; (152f4 <__ssvfscanf_r+0xc40>)
   150be:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   150c2:	2e08      	cmp	r6, #8
   150c4:	f73f addb 	bgt.w	14c7e <__ssvfscanf_r+0x5ca>
   150c8:	e5e8      	b.n	14c9c <__ssvfscanf_r+0x5e8>
   150ca:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   150ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   150d2:	f47f ade3 	bne.w	14c9c <__ssvfscanf_r+0x5e8>
   150d6:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   150da:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   150de:	2610      	movs	r6, #16
   150e0:	e5cf      	b.n	14c82 <__ssvfscanf_r+0x5ce>
   150e2:	0623      	lsls	r3, r4, #24
   150e4:	f57f adda 	bpl.w	14c9c <__ssvfscanf_r+0x5e8>
   150e8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   150ec:	e5c9      	b.n	14c82 <__ssvfscanf_r+0x5ce>
   150ee:	f044 0401 	orr.w	r4, r4, #1
   150f2:	f8db 3004 	ldr.w	r3, [fp, #4]
   150f6:	64f9      	str	r1, [r7, #76]	; 0x4c
   150f8:	2b00      	cmp	r3, #0
   150fa:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   150fe:	f04f 0500 	mov.w	r5, #0
   15102:	f73f abf8 	bgt.w	148f6 <__ssvfscanf_r+0x242>
   15106:	4659      	mov	r1, fp
   15108:	4648      	mov	r0, r9
   1510a:	f002 fc7d 	bl	17a08 <__ssrefill_r>
   1510e:	2800      	cmp	r0, #0
   15110:	f47f abbc 	bne.w	1488c <__ssvfscanf_r+0x1d8>
   15114:	0660      	lsls	r0, r4, #25
   15116:	f53f abf1 	bmi.w	148fc <__ssvfscanf_r+0x248>
   1511a:	f8db 2000 	ldr.w	r2, [fp]
   1511e:	4e76      	ldr	r6, [pc, #472]	; (152f8 <__ssvfscanf_r+0xc44>)
   15120:	7813      	ldrb	r3, [r2, #0]
   15122:	5cf3      	ldrb	r3, [r6, r3]
   15124:	0719      	lsls	r1, r3, #28
   15126:	f57f abe9 	bpl.w	148fc <__ssvfscanf_r+0x248>
   1512a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1512e:	3b01      	subs	r3, #1
   15130:	2b00      	cmp	r3, #0
   15132:	f10a 0a01 	add.w	sl, sl, #1
   15136:	f8cb 3004 	str.w	r3, [fp, #4]
   1513a:	f102 0201 	add.w	r2, r2, #1
   1513e:	dd4a      	ble.n	151d6 <__ssvfscanf_r+0xb22>
   15140:	f8cb 2000 	str.w	r2, [fp]
   15144:	7813      	ldrb	r3, [r2, #0]
   15146:	5cf3      	ldrb	r3, [r6, r3]
   15148:	0719      	lsls	r1, r3, #28
   1514a:	f57f abd7 	bpl.w	148fc <__ssvfscanf_r+0x248>
   1514e:	e7ec      	b.n	1512a <__ssvfscanf_r+0xa76>
   15150:	f044 0401 	orr.w	r4, r4, #1
   15154:	4b69      	ldr	r3, [pc, #420]	; (152fc <__ssvfscanf_r+0xc48>)
   15156:	62fb      	str	r3, [r7, #44]	; 0x2c
   15158:	2308      	movs	r3, #8
   1515a:	64f9      	str	r1, [r7, #76]	; 0x4c
   1515c:	63bb      	str	r3, [r7, #56]	; 0x38
   1515e:	2503      	movs	r5, #3
   15160:	f7ff bbc4 	b.w	148ec <__ssvfscanf_r+0x238>
   15164:	f044 0401 	orr.w	r4, r4, #1
   15168:	4b65      	ldr	r3, [pc, #404]	; (15300 <__ssvfscanf_r+0xc4c>)
   1516a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1516c:	230a      	movs	r3, #10
   1516e:	64f9      	str	r1, [r7, #76]	; 0x4c
   15170:	63bb      	str	r3, [r7, #56]	; 0x38
   15172:	2503      	movs	r5, #3
   15174:	f7ff bbba 	b.w	148ec <__ssvfscanf_r+0x238>
   15178:	0523      	lsls	r3, r4, #20
   1517a:	f57f ad82 	bpl.w	14c82 <__ssvfscanf_r+0x5ce>
   1517e:	b916      	cbnz	r6, 15186 <__ssvfscanf_r+0xad2>
   15180:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   15184:	2608      	movs	r6, #8
   15186:	0563      	lsls	r3, r4, #21
   15188:	f100 81a6 	bmi.w	154d8 <__ssvfscanf_r+0xe24>
   1518c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1518e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   15192:	b11b      	cbz	r3, 1519c <__ssvfscanf_r+0xae8>
   15194:	3b01      	subs	r3, #1
   15196:	63fb      	str	r3, [r7, #60]	; 0x3c
   15198:	f108 0801 	add.w	r8, r8, #1
   1519c:	684b      	ldr	r3, [r1, #4]
   1519e:	3b01      	subs	r3, #1
   151a0:	2b00      	cmp	r3, #0
   151a2:	f10a 0a01 	add.w	sl, sl, #1
   151a6:	604b      	str	r3, [r1, #4]
   151a8:	f73f ad73 	bgt.w	14c92 <__ssvfscanf_r+0x5de>
   151ac:	4648      	mov	r0, r9
   151ae:	64b9      	str	r1, [r7, #72]	; 0x48
   151b0:	f002 fc2a 	bl	17a08 <__ssrefill_r>
   151b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   151b6:	2800      	cmp	r0, #0
   151b8:	f43f ad6d 	beq.w	14c96 <__ssvfscanf_r+0x5e2>
   151bc:	e56e      	b.n	14c9c <__ssvfscanf_r+0x5e8>
   151be:	ee18 0a10 	vmov	r0, s16
   151c2:	4659      	mov	r1, fp
   151c4:	f002 fc20 	bl	17a08 <__ssrefill_r>
   151c8:	2800      	cmp	r0, #0
   151ca:	f47f ac91 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   151ce:	2e00      	cmp	r6, #0
   151d0:	f47f abc4 	bne.w	1495c <__ssvfscanf_r+0x2a8>
   151d4:	e48c      	b.n	14af0 <__ssvfscanf_r+0x43c>
   151d6:	4659      	mov	r1, fp
   151d8:	4648      	mov	r0, r9
   151da:	f002 fc15 	bl	17a08 <__ssrefill_r>
   151de:	2800      	cmp	r0, #0
   151e0:	f47f ab54 	bne.w	1488c <__ssvfscanf_r+0x1d8>
   151e4:	f8db 2000 	ldr.w	r2, [fp]
   151e8:	e79a      	b.n	15120 <__ssvfscanf_r+0xa6c>
   151ea:	f8db 2004 	ldr.w	r2, [fp, #4]
   151ee:	e00f      	b.n	15210 <__ssvfscanf_r+0xb5c>
   151f0:	f8db 3000 	ldr.w	r3, [fp]
   151f4:	781a      	ldrb	r2, [r3, #0]
   151f6:	5cb2      	ldrb	r2, [r6, r2]
   151f8:	0711      	lsls	r1, r2, #28
   151fa:	f103 0301 	add.w	r3, r3, #1
   151fe:	f57f aa80 	bpl.w	14702 <__ssvfscanf_r+0x4e>
   15202:	f8db 2004 	ldr.w	r2, [fp, #4]
   15206:	3a01      	subs	r2, #1
   15208:	e9cb 3200 	strd	r3, r2, [fp]
   1520c:	f10a 0a01 	add.w	sl, sl, #1
   15210:	2a00      	cmp	r2, #0
   15212:	dced      	bgt.n	151f0 <__ssvfscanf_r+0xb3c>
   15214:	4659      	mov	r1, fp
   15216:	4648      	mov	r0, r9
   15218:	f002 fbf6 	bl	17a08 <__ssrefill_r>
   1521c:	2800      	cmp	r0, #0
   1521e:	d0e7      	beq.n	151f0 <__ssvfscanf_r+0xb3c>
   15220:	f7ff ba6f 	b.w	14702 <__ssvfscanf_r+0x4e>
   15224:	06e1      	lsls	r1, r4, #27
   15226:	f100 8349 	bmi.w	158bc <__ssvfscanf_r+0x1208>
   1522a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   1522e:	f000 83ab 	beq.w	15988 <__ssvfscanf_r+0x12d4>
   15232:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15234:	f854 6b04 	ldr.w	r6, [r4], #4
   15238:	64be      	str	r6, [r7, #72]	; 0x48
   1523a:	2e00      	cmp	r6, #0
   1523c:	f43f ab2f 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15240:	2020      	movs	r0, #32
   15242:	f7f9 fd55 	bl	ecf0 <malloc>
   15246:	4605      	mov	r5, r0
   15248:	2800      	cmp	r0, #0
   1524a:	f000 8462 	beq.w	15b12 <__ssvfscanf_r+0x145e>
   1524e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15250:	6030      	str	r0, [r6, #0]
   15252:	8893      	ldrh	r3, [r2, #4]
   15254:	88d6      	ldrh	r6, [r2, #6]
   15256:	429e      	cmp	r6, r3
   15258:	f080 82a8 	bcs.w	157ac <__ssvfscanf_r+0x10f8>
   1525c:	6810      	ldr	r0, [r2, #0]
   1525e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15260:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   15264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15266:	633c      	str	r4, [r7, #48]	; 0x30
   15268:	3601      	adds	r6, #1
   1526a:	80de      	strh	r6, [r3, #6]
   1526c:	2320      	movs	r3, #32
   1526e:	63fb      	str	r3, [r7, #60]	; 0x3c
   15270:	f8db 2000 	ldr.w	r2, [fp]
   15274:	4e20      	ldr	r6, [pc, #128]	; (152f8 <__ssvfscanf_r+0xc44>)
   15276:	7811      	ldrb	r1, [r2, #0]
   15278:	5c71      	ldrb	r1, [r6, r1]
   1527a:	0708      	lsls	r0, r1, #28
   1527c:	f100 82ac 	bmi.w	157d8 <__ssvfscanf_r+0x1124>
   15280:	4633      	mov	r3, r6
   15282:	462c      	mov	r4, r5
   15284:	4610      	mov	r0, r2
   15286:	462e      	mov	r6, r5
   15288:	f8db 1004 	ldr.w	r1, [fp, #4]
   1528c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1528e:	3901      	subs	r1, #1
   15290:	f8cb 1004 	str.w	r1, [fp, #4]
   15294:	1c41      	adds	r1, r0, #1
   15296:	f8cb 1000 	str.w	r1, [fp]
   1529a:	4635      	mov	r5, r6
   1529c:	7801      	ldrb	r1, [r0, #0]
   1529e:	f805 1b01 	strb.w	r1, [r5], #1
   152a2:	b122      	cbz	r2, 152ae <__ssvfscanf_r+0xbfa>
   152a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   152a6:	1b2e      	subs	r6, r5, r4
   152a8:	4296      	cmp	r6, r2
   152aa:	f080 837a 	bcs.w	159a2 <__ssvfscanf_r+0x12ee>
   152ae:	f1b8 0801 	subs.w	r8, r8, #1
   152b2:	d00b      	beq.n	152cc <__ssvfscanf_r+0xc18>
   152b4:	f8db 1004 	ldr.w	r1, [fp, #4]
   152b8:	2900      	cmp	r1, #0
   152ba:	462e      	mov	r6, r5
   152bc:	f340 83ae 	ble.w	15a1c <__ssvfscanf_r+0x1368>
   152c0:	f8db 0000 	ldr.w	r0, [fp]
   152c4:	7801      	ldrb	r1, [r0, #0]
   152c6:	5c59      	ldrb	r1, [r3, r1]
   152c8:	0709      	lsls	r1, r1, #28
   152ca:	d5dd      	bpl.n	15288 <__ssvfscanf_r+0xbd4>
   152cc:	1b29      	subs	r1, r5, r4
   152ce:	448a      	add	sl, r1
   152d0:	3101      	adds	r1, #1
   152d2:	f04f 0300 	mov.w	r3, #0
   152d6:	702b      	strb	r3, [r5, #0]
   152d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   152da:	b11b      	cbz	r3, 152e4 <__ssvfscanf_r+0xc30>
   152dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   152de:	428b      	cmp	r3, r1
   152e0:	f200 8394 	bhi.w	15a0c <__ssvfscanf_r+0x1358>
   152e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   152e6:	3301      	adds	r3, #1
   152e8:	647b      	str	r3, [r7, #68]	; 0x44
   152ea:	f7ff ba0a 	b.w	14702 <__ssvfscanf_r+0x4e>
   152ee:	2300      	movs	r3, #0
   152f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   152f2:	e461      	b.n	14bb8 <__ssvfscanf_r+0x504>
   152f4:	20002b3c 	.word	0x20002b3c
   152f8:	20000f1d 	.word	0x20000f1d
   152fc:	000172cd 	.word	0x000172cd
   15300:	00010639 	.word	0x00010639
   15304:	06e6      	lsls	r6, r4, #27
   15306:	f100 8181 	bmi.w	1560c <__ssvfscanf_r+0xf58>
   1530a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   1530e:	f000 836d 	beq.w	159ec <__ssvfscanf_r+0x1338>
   15312:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15314:	f854 6b04 	ldr.w	r6, [r4], #4
   15318:	64be      	str	r6, [r7, #72]	; 0x48
   1531a:	2e00      	cmp	r6, #0
   1531c:	f43f aabf 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15320:	2020      	movs	r0, #32
   15322:	f7f9 fce5 	bl	ecf0 <malloc>
   15326:	4605      	mov	r5, r0
   15328:	2800      	cmp	r0, #0
   1532a:	f000 83f2 	beq.w	15b12 <__ssvfscanf_r+0x145e>
   1532e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15330:	6030      	str	r0, [r6, #0]
   15332:	8893      	ldrh	r3, [r2, #4]
   15334:	88d6      	ldrh	r6, [r2, #6]
   15336:	429e      	cmp	r6, r3
   15338:	f080 827a 	bcs.w	15830 <__ssvfscanf_r+0x117c>
   1533c:	6810      	ldr	r0, [r2, #0]
   1533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15340:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   15344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15346:	633c      	str	r4, [r7, #48]	; 0x30
   15348:	3601      	adds	r6, #1
   1534a:	80de      	strh	r6, [r3, #6]
   1534c:	2420      	movs	r4, #32
   1534e:	f8db 2000 	ldr.w	r2, [fp]
   15352:	f107 0370 	add.w	r3, r7, #112	; 0x70
   15356:	4619      	mov	r1, r3
   15358:	7813      	ldrb	r3, [r2, #0]
   1535a:	5ccb      	ldrb	r3, [r1, r3]
   1535c:	2b00      	cmp	r3, #0
   1535e:	f43f aa9e 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15362:	ee08 9a10 	vmov	s16, r9
   15366:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   1536a:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   1536e:	462e      	mov	r6, r5
   15370:	46a2      	mov	sl, r4
   15372:	4610      	mov	r0, r2
   15374:	460c      	mov	r4, r1
   15376:	f8db 1004 	ldr.w	r1, [fp, #4]
   1537a:	1c43      	adds	r3, r0, #1
   1537c:	3901      	subs	r1, #1
   1537e:	e9cb 3100 	strd	r3, r1, [fp]
   15382:	4629      	mov	r1, r5
   15384:	7800      	ldrb	r0, [r0, #0]
   15386:	f801 0b01 	strb.w	r0, [r1], #1
   1538a:	f1b9 0f00 	cmp.w	r9, #0
   1538e:	d002      	beq.n	15396 <__ssvfscanf_r+0xce2>
   15390:	1b8d      	subs	r5, r1, r6
   15392:	4555      	cmp	r5, sl
   15394:	d27a      	bcs.n	1548c <__ssvfscanf_r+0xdd8>
   15396:	460d      	mov	r5, r1
   15398:	f1b8 0801 	subs.w	r8, r8, #1
   1539c:	d00a      	beq.n	153b4 <__ssvfscanf_r+0xd00>
   1539e:	f8db 1004 	ldr.w	r1, [fp, #4]
   153a2:	2900      	cmp	r1, #0
   153a4:	f340 816a 	ble.w	1567c <__ssvfscanf_r+0xfc8>
   153a8:	f8db 0000 	ldr.w	r0, [fp]
   153ac:	7801      	ldrb	r1, [r0, #0]
   153ae:	5c61      	ldrb	r1, [r4, r1]
   153b0:	2900      	cmp	r1, #0
   153b2:	d1e0      	bne.n	15376 <__ssvfscanf_r+0xcc2>
   153b4:	4654      	mov	r4, sl
   153b6:	ee18 9a10 	vmov	r9, s16
   153ba:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   153be:	1bae      	subs	r6, r5, r6
   153c0:	f43f aa6d 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   153c4:	f04f 0300 	mov.w	r3, #0
   153c8:	702b      	strb	r3, [r5, #0]
   153ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   153cc:	b11b      	cbz	r3, 153d6 <__ssvfscanf_r+0xd22>
   153ce:	1c71      	adds	r1, r6, #1
   153d0:	428c      	cmp	r4, r1
   153d2:	f200 832d 	bhi.w	15a30 <__ssvfscanf_r+0x137c>
   153d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   153d8:	3301      	adds	r3, #1
   153da:	44b2      	add	sl, r6
   153dc:	647b      	str	r3, [r7, #68]	; 0x44
   153de:	f7ff b990 	b.w	14702 <__ssvfscanf_r+0x4e>
   153e2:	2300      	movs	r3, #0
   153e4:	613b      	str	r3, [r7, #16]
   153e6:	f7ff baa9 	b.w	1493c <__ssvfscanf_r+0x288>
   153ea:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   153ee:	f47f aa56 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   153f2:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   153f6:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   153fa:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   153fe:	f7ff ba67 	b.w	148d0 <__ssvfscanf_r+0x21c>
   15402:	64f9      	str	r1, [r7, #76]	; 0x4c
   15404:	2504      	movs	r5, #4
   15406:	f7ff ba71 	b.w	148ec <__ssvfscanf_r+0x238>
   1540a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1540c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1540e:	185b      	adds	r3, r3, r1
   15410:	f47f ae44 	bne.w	1509c <__ssvfscanf_r+0x9e8>
   15414:	e5be      	b.n	14f94 <__ssvfscanf_r+0x8e0>
   15416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15418:	2b03      	cmp	r3, #3
   1541a:	d002      	beq.n	15422 <__ssvfscanf_r+0xd6e>
   1541c:	2b05      	cmp	r3, #5
   1541e:	f47f ab67 	bne.w	14af0 <__ssvfscanf_r+0x43c>
   15422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15424:	3301      	adds	r3, #1
   15426:	b2db      	uxtb	r3, r3
   15428:	64bb      	str	r3, [r7, #72]	; 0x48
   1542a:	f7ff bb4c 	b.w	14ac6 <__ssvfscanf_r+0x412>
   1542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15430:	2b00      	cmp	r3, #0
   15432:	f47f ae01 	bne.w	15038 <__ssvfscanf_r+0x984>
   15436:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   1543a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   1543e:	f47f adfb 	bne.w	15038 <__ssvfscanf_r+0x984>
   15442:	2301      	movs	r3, #1
   15444:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   15448:	63fb      	str	r3, [r7, #60]	; 0x3c
   1544a:	f7ff bb3c 	b.w	14ac6 <__ssvfscanf_r+0x412>
   1544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15450:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15452:	185b      	adds	r3, r3, r1
   15454:	f47f ae02 	bne.w	1505c <__ssvfscanf_r+0x9a8>
   15458:	e59c      	b.n	14f94 <__ssvfscanf_r+0x8e0>
   1545a:	1c83      	adds	r3, r0, #2
   1545c:	f040 845b 	bne.w	15d16 <__ssvfscanf_r+0x1662>
   15460:	f8db 3004 	ldr.w	r3, [fp, #4]
   15464:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15466:	2b00      	cmp	r3, #0
   15468:	f73f ad00 	bgt.w	14e6c <__ssvfscanf_r+0x7b8>
   1546c:	4659      	mov	r1, fp
   1546e:	4648      	mov	r0, r9
   15470:	f002 faca 	bl	17a08 <__ssrefill_r>
   15474:	2800      	cmp	r0, #0
   15476:	f43f ad63 	beq.w	14f40 <__ssvfscanf_r+0x88c>
   1547a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1547e:	627e      	str	r6, [r7, #36]	; 0x24
   15480:	4644      	mov	r4, r8
   15482:	2d00      	cmp	r5, #0
   15484:	f43f ad63 	beq.w	14f4e <__ssvfscanf_r+0x89a>
   15488:	f7ff ba00 	b.w	1488c <__ssvfscanf_r+0x1d8>
   1548c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   15490:	4630      	mov	r0, r6
   15492:	4651      	mov	r1, sl
   15494:	f7f9 fef8 	bl	f288 <realloc>
   15498:	4606      	mov	r6, r0
   1549a:	2800      	cmp	r0, #0
   1549c:	f000 8339 	beq.w	15b12 <__ssvfscanf_r+0x145e>
   154a0:	4405      	add	r5, r0
   154a2:	f8c9 0000 	str.w	r0, [r9]
   154a6:	e777      	b.n	15398 <__ssvfscanf_r+0xce4>
   154a8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   154ac:	4bbc      	ldr	r3, [pc, #752]	; (157a0 <__ssvfscanf_r+0x10ec>)
   154ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   154b0:	2310      	movs	r3, #16
   154b2:	64f9      	str	r1, [r7, #76]	; 0x4c
   154b4:	63bb      	str	r3, [r7, #56]	; 0x38
   154b6:	2503      	movs	r5, #3
   154b8:	f7ff ba18 	b.w	148ec <__ssvfscanf_r+0x238>
   154bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154be:	3301      	adds	r3, #1
   154c0:	637b      	str	r3, [r7, #52]	; 0x34
   154c2:	693b      	ldr	r3, [r7, #16]
   154c4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   154c8:	2b00      	cmp	r3, #0
   154ca:	f43f aafe 	beq.w	14aca <__ssvfscanf_r+0x416>
   154ce:	693b      	ldr	r3, [r7, #16]
   154d0:	3b01      	subs	r3, #1
   154d2:	613b      	str	r3, [r7, #16]
   154d4:	f7ff bafa 	b.w	14acc <__ssvfscanf_r+0x418>
   154d8:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   154dc:	f7ff bbd1 	b.w	14c82 <__ssvfscanf_r+0x5ce>
   154e0:	0722      	lsls	r2, r4, #28
   154e2:	f140 81c7 	bpl.w	15874 <__ssvfscanf_r+0x11c0>
   154e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   154e8:	f853 2b04 	ldr.w	r2, [r3], #4
   154ec:	633b      	str	r3, [r7, #48]	; 0x30
   154ee:	7010      	strb	r0, [r2, #0]
   154f0:	f7ff bbf3 	b.w	14cda <__ssvfscanf_r+0x626>
   154f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   154f8:	465a      	mov	r2, fp
   154fa:	4648      	mov	r0, r9
   154fc:	3d01      	subs	r5, #1
   154fe:	f002 fa43 	bl	17988 <_sungetc_r>
   15502:	f7ff bbd5 	b.w	14cb0 <__ssvfscanf_r+0x5fc>
   15506:	69fb      	ldr	r3, [r7, #28]
   15508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1550a:	4293      	cmp	r3, r2
   1550c:	f43f ab2d 	beq.w	14b6a <__ssvfscanf_r+0x4b6>
   15510:	1a9a      	subs	r2, r3, r2
   15512:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   15516:	429d      	cmp	r5, r3
   15518:	bf28      	it	cs
   1551a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1551e:	49a1      	ldr	r1, [pc, #644]	; (157a4 <__ssvfscanf_r+0x10f0>)
   15520:	4628      	mov	r0, r5
   15522:	f7fb f9bf 	bl	108a4 <sprintf>
   15526:	f7ff bb20 	b.w	14b6a <__ssvfscanf_r+0x4b6>
   1552a:	06e2      	lsls	r2, r4, #27
   1552c:	f100 8131 	bmi.w	15792 <__ssvfscanf_r+0x10de>
   15530:	0723      	lsls	r3, r4, #28
   15532:	f100 81ba 	bmi.w	158aa <__ssvfscanf_r+0x11f6>
   15536:	0766      	lsls	r6, r4, #29
   15538:	f140 82b4 	bpl.w	15aa4 <__ssvfscanf_r+0x13f0>
   1553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1553e:	64f9      	str	r1, [r7, #76]	; 0x4c
   15540:	f853 2b04 	ldr.w	r2, [r3], #4
   15544:	633b      	str	r3, [r7, #48]	; 0x30
   15546:	f8a2 a000 	strh.w	sl, [r2]
   1554a:	f7ff b8da 	b.w	14702 <__ssvfscanf_r+0x4e>
   1554e:	0723      	lsls	r3, r4, #28
   15550:	f47f a9a5 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   15554:	7842      	ldrb	r2, [r0, #1]
   15556:	2a68      	cmp	r2, #104	; 0x68
   15558:	f000 8186 	beq.w	15868 <__ssvfscanf_r+0x11b4>
   1555c:	f044 0404 	orr.w	r4, r4, #4
   15560:	4608      	mov	r0, r1
   15562:	f7ff b92f 	b.w	147c4 <__ssvfscanf_r+0x110>
   15566:	4b8e      	ldr	r3, [pc, #568]	; (157a0 <__ssvfscanf_r+0x10ec>)
   15568:	62fb      	str	r3, [r7, #44]	; 0x2c
   1556a:	230a      	movs	r3, #10
   1556c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1556e:	63bb      	str	r3, [r7, #56]	; 0x38
   15570:	2503      	movs	r5, #3
   15572:	f7ff b9bb 	b.w	148ec <__ssvfscanf_r+0x238>
   15576:	4b8c      	ldr	r3, [pc, #560]	; (157a8 <__ssvfscanf_r+0x10f4>)
   15578:	62fb      	str	r3, [r7, #44]	; 0x2c
   1557a:	2300      	movs	r3, #0
   1557c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1557e:	63bb      	str	r3, [r7, #56]	; 0x38
   15580:	2503      	movs	r5, #3
   15582:	f7ff b9b3 	b.w	148ec <__ssvfscanf_r+0x238>
   15586:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1558a:	e78f      	b.n	154ac <__ssvfscanf_r+0xdf8>
   1558c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   15590:	f000 fdde 	bl	16150 <__sccl>
   15594:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   15598:	64f8      	str	r0, [r7, #76]	; 0x4c
   1559a:	2501      	movs	r5, #1
   1559c:	f7ff b9a6 	b.w	148ec <__ssvfscanf_r+0x238>
   155a0:	0722      	lsls	r2, r4, #28
   155a2:	f47f a97c 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   155a6:	7842      	ldrb	r2, [r0, #1]
   155a8:	2a6c      	cmp	r2, #108	; 0x6c
   155aa:	f000 8157 	beq.w	1585c <__ssvfscanf_r+0x11a8>
   155ae:	f044 0401 	orr.w	r4, r4, #1
   155b2:	4608      	mov	r0, r1
   155b4:	f7ff b906 	b.w	147c4 <__ssvfscanf_r+0x110>
   155b8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   155bc:	f47f a96f 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   155c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   155c2:	2a00      	cmp	r2, #0
   155c4:	f000 81e7 	beq.w	15996 <__ssvfscanf_r+0x12e2>
   155c8:	7842      	ldrb	r2, [r0, #1]
   155ca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   155ce:	4608      	mov	r0, r1
   155d0:	f7ff b8f8 	b.w	147c4 <__ssvfscanf_r+0x110>
   155d4:	ea58 0804 	orrs.w	r8, r8, r4
   155d8:	f47f a961 	bne.w	1489e <__ssvfscanf_r+0x1ea>
   155dc:	7842      	ldrb	r2, [r0, #1]
   155de:	2410      	movs	r4, #16
   155e0:	4608      	mov	r0, r1
   155e2:	f7ff b8ef 	b.w	147c4 <__ssvfscanf_r+0x110>
   155e6:	64f9      	str	r1, [r7, #76]	; 0x4c
   155e8:	f7ff b8a7 	b.w	1473a <__ssvfscanf_r+0x86>
   155ec:	2300      	movs	r3, #0
   155ee:	623b      	str	r3, [r7, #32]
   155f0:	62bb      	str	r3, [r7, #40]	; 0x28
   155f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   155f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
   155f8:	64bb      	str	r3, [r7, #72]	; 0x48
   155fa:	f7ff bba9 	b.w	14d50 <__ssvfscanf_r+0x69c>
   155fe:	2300      	movs	r3, #0
   15600:	e9c7 3306 	strd	r3, r3, [r7, #24]
   15604:	623b      	str	r3, [r7, #32]
   15606:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1560a:	e429      	b.n	14e60 <__ssvfscanf_r+0x7ac>
   1560c:	f8db 3000 	ldr.w	r3, [fp]
   15610:	f107 0270 	add.w	r2, r7, #112	; 0x70
   15614:	4611      	mov	r1, r2
   15616:	781a      	ldrb	r2, [r3, #0]
   15618:	5c8a      	ldrb	r2, [r1, r2]
   1561a:	2a00      	cmp	r2, #0
   1561c:	f43f a93f 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15620:	3301      	adds	r3, #1
   15622:	f8cb 3000 	str.w	r3, [fp]
   15626:	f8db 3004 	ldr.w	r3, [fp, #4]
   1562a:	f1b8 0f01 	cmp.w	r8, #1
   1562e:	f103 33ff 	add.w	r3, r3, #4294967295
   15632:	f8cb 3004 	str.w	r3, [fp, #4]
   15636:	bf18      	it	ne
   15638:	460c      	movne	r4, r1
   1563a:	d114      	bne.n	15666 <__ssvfscanf_r+0xfb2>
   1563c:	f7ff bb53 	b.w	14ce6 <__ssvfscanf_r+0x632>
   15640:	f8db 3000 	ldr.w	r3, [fp]
   15644:	781a      	ldrb	r2, [r3, #0]
   15646:	5ca2      	ldrb	r2, [r4, r2]
   15648:	3301      	adds	r3, #1
   1564a:	2a00      	cmp	r2, #0
   1564c:	f43f ab4b 	beq.w	14ce6 <__ssvfscanf_r+0x632>
   15650:	f8cb 3000 	str.w	r3, [fp]
   15654:	f8db 3004 	ldr.w	r3, [fp, #4]
   15658:	3501      	adds	r5, #1
   1565a:	3b01      	subs	r3, #1
   1565c:	4545      	cmp	r5, r8
   1565e:	f8cb 3004 	str.w	r3, [fp, #4]
   15662:	f43f ab40 	beq.w	14ce6 <__ssvfscanf_r+0x632>
   15666:	2b00      	cmp	r3, #0
   15668:	dcea      	bgt.n	15640 <__ssvfscanf_r+0xf8c>
   1566a:	4659      	mov	r1, fp
   1566c:	4648      	mov	r0, r9
   1566e:	f002 f9cb 	bl	17a08 <__ssrefill_r>
   15672:	2800      	cmp	r0, #0
   15674:	d0e4      	beq.n	15640 <__ssvfscanf_r+0xf8c>
   15676:	44aa      	add	sl, r5
   15678:	f7ff b843 	b.w	14702 <__ssvfscanf_r+0x4e>
   1567c:	ee18 0a10 	vmov	r0, s16
   15680:	4659      	mov	r1, fp
   15682:	f002 f9c1 	bl	17a08 <__ssrefill_r>
   15686:	2800      	cmp	r0, #0
   15688:	f43f ae8e 	beq.w	153a8 <__ssvfscanf_r+0xcf4>
   1568c:	42b5      	cmp	r5, r6
   1568e:	4654      	mov	r4, sl
   15690:	ee18 9a10 	vmov	r9, s16
   15694:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   15698:	f47f ae91 	bne.w	153be <__ssvfscanf_r+0xd0a>
   1569c:	f7ff b8f6 	b.w	1488c <__ssvfscanf_r+0x1d8>
   156a0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   156a4:	e428      	b.n	14ef8 <__ssvfscanf_r+0x844>
   156a6:	6823      	ldr	r3, [r4, #0]
   156a8:	2b04      	cmp	r3, #4
   156aa:	f47f ac32 	bne.w	14f12 <__ssvfscanf_r+0x85e>
   156ae:	e432      	b.n	14f16 <__ssvfscanf_r+0x862>
   156b0:	1c83      	adds	r3, r0, #2
   156b2:	f040 8339 	bne.w	15d28 <__ssvfscanf_r+0x1674>
   156b6:	f8db 3004 	ldr.w	r3, [fp, #4]
   156ba:	2b00      	cmp	r3, #0
   156bc:	f340 81d7 	ble.w	15a6e <__ssvfscanf_r+0x13ba>
   156c0:	f8db 3000 	ldr.w	r3, [fp]
   156c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   156c6:	781b      	ldrb	r3, [r3, #0]
   156c8:	5cd3      	ldrb	r3, [r2, r3]
   156ca:	0718      	lsls	r0, r3, #28
   156cc:	d403      	bmi.n	156d6 <__ssvfscanf_r+0x1022>
   156ce:	f1b8 0f00 	cmp.w	r8, #0
   156d2:	f47f ab49 	bne.w	14d68 <__ssvfscanf_r+0x6b4>
   156d6:	627c      	str	r4, [r7, #36]	; 0x24
   156d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156da:	2b00      	cmp	r3, #0
   156dc:	f47f a811 	bne.w	14702 <__ssvfscanf_r+0x4e>
   156e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
   156e2:	6013      	str	r3, [r2, #0]
   156e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   156e6:	2b00      	cmp	r3, #0
   156e8:	f43f adfc 	beq.w	152e4 <__ssvfscanf_r+0xc30>
   156ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   156ee:	1ad1      	subs	r1, r2, r3
   156f0:	108b      	asrs	r3, r1, #2
   156f2:	6a3a      	ldr	r2, [r7, #32]
   156f4:	3301      	adds	r3, #1
   156f6:	429a      	cmp	r2, r3
   156f8:	f67f adf4 	bls.w	152e4 <__ssvfscanf_r+0xc30>
   156fc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   156fe:	3104      	adds	r1, #4
   15700:	6820      	ldr	r0, [r4, #0]
   15702:	f7f9 fdc1 	bl	f288 <realloc>
   15706:	2800      	cmp	r0, #0
   15708:	f47f ac3a 	bne.w	14f80 <__ssvfscanf_r+0x8cc>
   1570c:	e5ea      	b.n	152e4 <__ssvfscanf_r+0xc30>
   1570e:	f853 2b04 	ldr.w	r2, [r3], #4
   15712:	ed82 0b00 	vstr	d0, [r2]
   15716:	633b      	str	r3, [r7, #48]	; 0x30
   15718:	e5e4      	b.n	152e4 <__ssvfscanf_r+0xc30>
   1571a:	68fd      	ldr	r5, [r7, #12]
   1571c:	6a39      	ldr	r1, [r7, #32]
   1571e:	687e      	ldr	r6, [r7, #4]
   15720:	4628      	mov	r0, r5
   15722:	4642      	mov	r2, r8
   15724:	46a3      	mov	fp, r4
   15726:	68bc      	ldr	r4, [r7, #8]
   15728:	f000 fd56 	bl	161d8 <stpncpy>
   1572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1572e:	61fb      	str	r3, [r7, #28]
   15730:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   15734:	3e01      	subs	r6, #1
   15736:	4605      	mov	r5, r0
   15738:	f7ff b9c8 	b.w	14acc <__ssvfscanf_r+0x418>
   1573c:	69f8      	ldr	r0, [r7, #28]
   1573e:	00d9      	lsls	r1, r3, #3
   15740:	461d      	mov	r5, r3
   15742:	f7f9 fda1 	bl	f288 <realloc>
   15746:	61f8      	str	r0, [r7, #28]
   15748:	2800      	cmp	r0, #0
   1574a:	f000 8264 	beq.w	15c16 <__ssvfscanf_r+0x1562>
   1574e:	6a3a      	ldr	r2, [r7, #32]
   15750:	006b      	lsls	r3, r5, #1
   15752:	eb00 0804 	add.w	r8, r0, r4
   15756:	6010      	str	r0, [r2, #0]
   15758:	61bb      	str	r3, [r7, #24]
   1575a:	f7ff bbea 	b.w	14f32 <__ssvfscanf_r+0x87e>
   1575e:	2e02      	cmp	r6, #2
   15760:	f240 82c4 	bls.w	15cec <__ssvfscanf_r+0x1638>
   15764:	2e03      	cmp	r6, #3
   15766:	f43f a9d3 	beq.w	14b10 <__ssvfscanf_r+0x45c>
   1576a:	3e04      	subs	r6, #4
   1576c:	fa5f f886 	uxtb.w	r8, r6
   15770:	ea6f 0308 	mvn.w	r3, r8
   15774:	18ee      	adds	r6, r5, r3
   15776:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1577a:	465a      	mov	r2, fp
   1577c:	4648      	mov	r0, r9
   1577e:	f002 f903 	bl	17988 <_sungetc_r>
   15782:	42ae      	cmp	r6, r5
   15784:	d1f7      	bne.n	15776 <__ssvfscanf_r+0x10c2>
   15786:	f10a 3aff 	add.w	sl, sl, #4294967295
   1578a:	ebaa 0a08 	sub.w	sl, sl, r8
   1578e:	f7ff b9bf 	b.w	14b10 <__ssvfscanf_r+0x45c>
   15792:	64f9      	str	r1, [r7, #76]	; 0x4c
   15794:	f7fe bfb5 	b.w	14702 <__ssvfscanf_r+0x4e>
   15798:	2303      	movs	r3, #3
   1579a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1579c:	f7ff b993 	b.w	14ac6 <__ssvfscanf_r+0x412>
   157a0:	000172cd 	.word	0x000172cd
   157a4:	20000f14 	.word	0x20000f14
   157a8:	00010639 	.word	0x00010639
   157ac:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   157b0:	4293      	cmp	r3, r2
   157b2:	f200 8297 	bhi.w	15ce4 <__ssvfscanf_r+0x1630>
   157b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   157b8:	3308      	adds	r3, #8
   157ba:	b29b      	uxth	r3, r3
   157bc:	6810      	ldr	r0, [r2, #0]
   157be:	63f8      	str	r0, [r7, #60]	; 0x3c
   157c0:	0099      	lsls	r1, r3, #2
   157c2:	637b      	str	r3, [r7, #52]	; 0x34
   157c4:	f7f9 fd60 	bl	f288 <realloc>
   157c8:	2800      	cmp	r0, #0
   157ca:	f000 827b 	beq.w	15cc4 <__ssvfscanf_r+0x1610>
   157ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   157d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157d2:	8093      	strh	r3, [r2, #4]
   157d4:	6010      	str	r0, [r2, #0]
   157d6:	e542      	b.n	1525e <__ssvfscanf_r+0xbaa>
   157d8:	2101      	movs	r1, #1
   157da:	e57a      	b.n	152d2 <__ssvfscanf_r+0xc1e>
   157dc:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   157e0:	4293      	cmp	r3, r2
   157e2:	f200 8293 	bhi.w	15d0c <__ssvfscanf_r+0x1658>
   157e6:	3308      	adds	r3, #8
   157e8:	b29e      	uxth	r6, r3
   157ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   157ec:	00b1      	lsls	r1, r6, #2
   157ee:	6818      	ldr	r0, [r3, #0]
   157f0:	f7f9 fd4a 	bl	f288 <realloc>
   157f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   157f6:	2800      	cmp	r0, #0
   157f8:	f000 823e 	beq.w	15c78 <__ssvfscanf_r+0x15c4>
   157fc:	809e      	strh	r6, [r3, #4]
   157fe:	6018      	str	r0, [r3, #0]
   15800:	f7ff ba9b 	b.w	14d3a <__ssvfscanf_r+0x686>
   15804:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15808:	4293      	cmp	r3, r2
   1580a:	f200 827f 	bhi.w	15d0c <__ssvfscanf_r+0x1658>
   1580e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15810:	3308      	adds	r3, #8
   15812:	b29b      	uxth	r3, r3
   15814:	0099      	lsls	r1, r3, #2
   15816:	6810      	ldr	r0, [r2, #0]
   15818:	64bb      	str	r3, [r7, #72]	; 0x48
   1581a:	f7f9 fd35 	bl	f288 <realloc>
   1581e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15820:	2800      	cmp	r0, #0
   15822:	f000 8228 	beq.w	15c76 <__ssvfscanf_r+0x15c2>
   15826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15828:	8093      	strh	r3, [r2, #4]
   1582a:	6010      	str	r0, [r2, #0]
   1582c:	f7ff bb0e 	b.w	14e4c <__ssvfscanf_r+0x798>
   15830:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   15834:	4293      	cmp	r3, r2
   15836:	f200 8255 	bhi.w	15ce4 <__ssvfscanf_r+0x1630>
   1583a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1583c:	3308      	adds	r3, #8
   1583e:	b29b      	uxth	r3, r3
   15840:	6810      	ldr	r0, [r2, #0]
   15842:	63f8      	str	r0, [r7, #60]	; 0x3c
   15844:	0099      	lsls	r1, r3, #2
   15846:	637b      	str	r3, [r7, #52]	; 0x34
   15848:	f7f9 fd1e 	bl	f288 <realloc>
   1584c:	2800      	cmp	r0, #0
   1584e:	f000 8239 	beq.w	15cc4 <__ssvfscanf_r+0x1610>
   15852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15856:	8093      	strh	r3, [r2, #4]
   15858:	6010      	str	r0, [r2, #0]
   1585a:	e570      	b.n	1533e <__ssvfscanf_r+0xc8a>
   1585c:	7882      	ldrb	r2, [r0, #2]
   1585e:	f044 0402 	orr.w	r4, r4, #2
   15862:	3002      	adds	r0, #2
   15864:	f7fe bfae 	b.w	147c4 <__ssvfscanf_r+0x110>
   15868:	7882      	ldrb	r2, [r0, #2]
   1586a:	f044 0408 	orr.w	r4, r4, #8
   1586e:	3002      	adds	r0, #2
   15870:	f7fe bfa8 	b.w	147c4 <__ssvfscanf_r+0x110>
   15874:	0763      	lsls	r3, r4, #29
   15876:	d458      	bmi.n	1592a <__ssvfscanf_r+0x1276>
   15878:	f014 0201 	ands.w	r2, r4, #1
   1587c:	f47f aa28 	bne.w	14cd0 <__ssvfscanf_r+0x61c>
   15880:	07a6      	lsls	r6, r4, #30
   15882:	f57f aa25 	bpl.w	14cd0 <__ssvfscanf_r+0x61c>
   15886:	4bb3      	ldr	r3, [pc, #716]	; (15b54 <__ssvfscanf_r+0x14a0>)
   15888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1588a:	4299      	cmp	r1, r3
   1588c:	4648      	mov	r0, r9
   1588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15890:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15892:	f000 823d 	beq.w	15d10 <__ssvfscanf_r+0x165c>
   15896:	f001 fdd1 	bl	1743c <_strtoll_r>
   1589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1589c:	f853 2b04 	ldr.w	r2, [r3], #4
   158a0:	633b      	str	r3, [r7, #48]	; 0x30
   158a2:	e9c2 0100 	strd	r0, r1, [r2]
   158a6:	f7ff ba18 	b.w	14cda <__ssvfscanf_r+0x626>
   158aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   158ac:	64f9      	str	r1, [r7, #76]	; 0x4c
   158ae:	f853 2b04 	ldr.w	r2, [r3], #4
   158b2:	633b      	str	r3, [r7, #48]	; 0x30
   158b4:	f882 a000 	strb.w	sl, [r2]
   158b8:	f7fe bf23 	b.w	14702 <__ssvfscanf_r+0x4e>
   158bc:	f8db 3000 	ldr.w	r3, [fp]
   158c0:	4ea5      	ldr	r6, [pc, #660]	; (15b58 <__ssvfscanf_r+0x14a4>)
   158c2:	781a      	ldrb	r2, [r3, #0]
   158c4:	5cb2      	ldrb	r2, [r6, r2]
   158c6:	0712      	lsls	r2, r2, #28
   158c8:	f53e af1b 	bmi.w	14702 <__ssvfscanf_r+0x4e>
   158cc:	3301      	adds	r3, #1
   158ce:	f8cb 3000 	str.w	r3, [fp]
   158d2:	f8db 3004 	ldr.w	r3, [fp, #4]
   158d6:	f1b8 0f01 	cmp.w	r8, #1
   158da:	f103 33ff 	add.w	r3, r3, #4294967295
   158de:	f8cb 3004 	str.w	r3, [fp, #4]
   158e2:	bf08      	it	eq
   158e4:	f10a 0a01 	addeq.w	sl, sl, #1
   158e8:	f43e af0b 	beq.w	14702 <__ssvfscanf_r+0x4e>
   158ec:	2401      	movs	r4, #1
   158ee:	e011      	b.n	15914 <__ssvfscanf_r+0x1260>
   158f0:	f8db 3000 	ldr.w	r3, [fp]
   158f4:	781a      	ldrb	r2, [r3, #0]
   158f6:	5cb2      	ldrb	r2, [r6, r2]
   158f8:	0715      	lsls	r5, r2, #28
   158fa:	f103 0301 	add.w	r3, r3, #1
   158fe:	d411      	bmi.n	15924 <__ssvfscanf_r+0x1270>
   15900:	f8cb 3000 	str.w	r3, [fp]
   15904:	f8db 3004 	ldr.w	r3, [fp, #4]
   15908:	3401      	adds	r4, #1
   1590a:	3b01      	subs	r3, #1
   1590c:	4544      	cmp	r4, r8
   1590e:	f8cb 3004 	str.w	r3, [fp, #4]
   15912:	d007      	beq.n	15924 <__ssvfscanf_r+0x1270>
   15914:	2b00      	cmp	r3, #0
   15916:	dceb      	bgt.n	158f0 <__ssvfscanf_r+0x123c>
   15918:	4659      	mov	r1, fp
   1591a:	4648      	mov	r0, r9
   1591c:	f002 f874 	bl	17a08 <__ssrefill_r>
   15920:	2800      	cmp	r0, #0
   15922:	d0e5      	beq.n	158f0 <__ssvfscanf_r+0x123c>
   15924:	44a2      	add	sl, r4
   15926:	f7fe beec 	b.w	14702 <__ssvfscanf_r+0x4e>
   1592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1592c:	f853 2b04 	ldr.w	r2, [r3], #4
   15930:	633b      	str	r3, [r7, #48]	; 0x30
   15932:	8010      	strh	r0, [r2, #0]
   15934:	f7ff b9d1 	b.w	14cda <__ssvfscanf_r+0x626>
   15938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1593a:	2b00      	cmp	r3, #0
   1593c:	f000 816e 	beq.w	15c1c <__ssvfscanf_r+0x1568>
   15940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15942:	f8d3 8000 	ldr.w	r8, [r3]
   15946:	88de      	ldrh	r6, [r3, #6]
   15948:	b176      	cbz	r6, 15968 <__ssvfscanf_r+0x12b4>
   1594a:	2400      	movs	r4, #0
   1594c:	f1a8 0504 	sub.w	r5, r8, #4
   15950:	46a1      	mov	r9, r4
   15952:	f855 3f04 	ldr.w	r3, [r5, #4]!
   15956:	6818      	ldr	r0, [r3, #0]
   15958:	f7f9 f9d2 	bl	ed00 <free>
   1595c:	3401      	adds	r4, #1
   1595e:	682b      	ldr	r3, [r5, #0]
   15960:	42a6      	cmp	r6, r4
   15962:	f8c3 9000 	str.w	r9, [r3]
   15966:	d1f4      	bne.n	15952 <__ssvfscanf_r+0x129e>
   15968:	f04f 33ff 	mov.w	r3, #4294967295
   1596c:	647b      	str	r3, [r7, #68]	; 0x44
   1596e:	f1b8 0f00 	cmp.w	r8, #0
   15972:	f47e af9c 	bne.w	148ae <__ssvfscanf_r+0x1fa>
   15976:	f7fe bf9d 	b.w	148b4 <__ssvfscanf_r+0x200>
   1597a:	4878      	ldr	r0, [pc, #480]	; (15b5c <__ssvfscanf_r+0x14a8>)
   1597c:	633b      	str	r3, [r7, #48]	; 0x30
   1597e:	f7fb fd97 	bl	114b0 <nanf>
   15982:	ed84 0a00 	vstr	s0, [r4]
   15986:	e4ad      	b.n	152e4 <__ssvfscanf_r+0xc30>
   15988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1598a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1598c:	f852 5b04 	ldr.w	r5, [r2], #4
   15990:	633a      	str	r2, [r7, #48]	; 0x30
   15992:	64bc      	str	r4, [r7, #72]	; 0x48
   15994:	e46c      	b.n	15270 <__ssvfscanf_r+0xbbc>
   15996:	b082      	sub	sp, #8
   15998:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1599c:	ab02      	add	r3, sp, #8
   1599e:	643b      	str	r3, [r7, #64]	; 0x40
   159a0:	e612      	b.n	155c8 <__ssvfscanf_r+0xf14>
   159a2:	637b      	str	r3, [r7, #52]	; 0x34
   159a4:	0053      	lsls	r3, r2, #1
   159a6:	4620      	mov	r0, r4
   159a8:	4619      	mov	r1, r3
   159aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   159ac:	f7f9 fc6c 	bl	f288 <realloc>
   159b0:	4604      	mov	r4, r0
   159b2:	2800      	cmp	r0, #0
   159b4:	f000 80ad 	beq.w	15b12 <__ssvfscanf_r+0x145e>
   159b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   159ba:	1985      	adds	r5, r0, r6
   159bc:	6018      	str	r0, [r3, #0]
   159be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   159c0:	e475      	b.n	152ae <__ssvfscanf_r+0xbfa>
   159c2:	697d      	ldr	r5, [r7, #20]
   159c4:	4629      	mov	r1, r5
   159c6:	230a      	movs	r3, #10
   159c8:	3101      	adds	r1, #1
   159ca:	4648      	mov	r0, r9
   159cc:	f7fa fe34 	bl	10638 <_strtol_r>
   159d0:	69bb      	ldr	r3, [r7, #24]
   159d2:	1ac2      	subs	r2, r0, r3
   159d4:	e59d      	b.n	15512 <__ssvfscanf_r+0xe5e>
   159d6:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   159da:	f853 1b04 	ldr.w	r1, [r3], #4
   159de:	623a      	str	r2, [r7, #32]
   159e0:	64b9      	str	r1, [r7, #72]	; 0x48
   159e2:	633b      	str	r3, [r7, #48]	; 0x30
   159e4:	62ba      	str	r2, [r7, #40]	; 0x28
   159e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   159e8:	f7ff b9b2 	b.w	14d50 <__ssvfscanf_r+0x69c>
   159ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   159ee:	64bc      	str	r4, [r7, #72]	; 0x48
   159f0:	f853 5b04 	ldr.w	r5, [r3], #4
   159f4:	633b      	str	r3, [r7, #48]	; 0x30
   159f6:	e4aa      	b.n	1534e <__ssvfscanf_r+0xc9a>
   159f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   159fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   159fc:	f853 4b04 	ldr.w	r4, [r3], #4
   15a00:	61ba      	str	r2, [r7, #24]
   15a02:	e9c7 2207 	strd	r2, r2, [r7, #28]
   15a06:	633b      	str	r3, [r7, #48]	; 0x30
   15a08:	f7ff ba2a 	b.w	14e60 <__ssvfscanf_r+0x7ac>
   15a0c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   15a0e:	6820      	ldr	r0, [r4, #0]
   15a10:	f7f9 fc3a 	bl	f288 <realloc>
   15a14:	2800      	cmp	r0, #0
   15a16:	f47f aab3 	bne.w	14f80 <__ssvfscanf_r+0x8cc>
   15a1a:	e463      	b.n	152e4 <__ssvfscanf_r+0xc30>
   15a1c:	4659      	mov	r1, fp
   15a1e:	4648      	mov	r0, r9
   15a20:	637b      	str	r3, [r7, #52]	; 0x34
   15a22:	f001 fff1 	bl	17a08 <__ssrefill_r>
   15a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15a28:	2800      	cmp	r0, #0
   15a2a:	f43f ac49 	beq.w	152c0 <__ssvfscanf_r+0xc0c>
   15a2e:	e44d      	b.n	152cc <__ssvfscanf_r+0xc18>
   15a30:	6818      	ldr	r0, [r3, #0]
   15a32:	461c      	mov	r4, r3
   15a34:	f7f9 fc28 	bl	f288 <realloc>
   15a38:	2800      	cmp	r0, #0
   15a3a:	f43f accc 	beq.w	153d6 <__ssvfscanf_r+0xd22>
   15a3e:	6020      	str	r0, [r4, #0]
   15a40:	e4c9      	b.n	153d6 <__ssvfscanf_r+0xd22>
   15a42:	2500      	movs	r5, #0
   15a44:	e637      	b.n	156b6 <__ssvfscanf_r+0x1002>
   15a46:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15a48:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   15a4c:	627e      	str	r6, [r7, #36]	; 0x24
   15a4e:	4644      	mov	r4, r8
   15a50:	2d00      	cmp	r5, #0
   15a52:	f43f aa7c 	beq.w	14f4e <__ssvfscanf_r+0x89a>
   15a56:	3d01      	subs	r5, #1
   15a58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15a5c:	465a      	mov	r2, fp
   15a5e:	5d59      	ldrb	r1, [r3, r5]
   15a60:	4648      	mov	r0, r9
   15a62:	f001 ff91 	bl	17988 <_sungetc_r>
   15a66:	2d00      	cmp	r5, #0
   15a68:	d1f5      	bne.n	15a56 <__ssvfscanf_r+0x13a2>
   15a6a:	f7ff ba70 	b.w	14f4e <__ssvfscanf_r+0x89a>
   15a6e:	4659      	mov	r1, fp
   15a70:	4648      	mov	r0, r9
   15a72:	f001 ffc9 	bl	17a08 <__ssrefill_r>
   15a76:	2800      	cmp	r0, #0
   15a78:	f43f ae22 	beq.w	156c0 <__ssvfscanf_r+0x100c>
   15a7c:	627c      	str	r4, [r7, #36]	; 0x24
   15a7e:	2d00      	cmp	r5, #0
   15a80:	f47e af04 	bne.w	1488c <__ssvfscanf_r+0x1d8>
   15a84:	e628      	b.n	156d8 <__ssvfscanf_r+0x1024>
   15a86:	627c      	str	r4, [r7, #36]	; 0x24
   15a88:	2d00      	cmp	r5, #0
   15a8a:	f43f ae25 	beq.w	156d8 <__ssvfscanf_r+0x1024>
   15a8e:	3d01      	subs	r5, #1
   15a90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   15a94:	465a      	mov	r2, fp
   15a96:	5d59      	ldrb	r1, [r3, r5]
   15a98:	4648      	mov	r0, r9
   15a9a:	f001 ff75 	bl	17988 <_sungetc_r>
   15a9e:	2d00      	cmp	r5, #0
   15aa0:	d1f5      	bne.n	15a8e <__ssvfscanf_r+0x13da>
   15aa2:	e619      	b.n	156d8 <__ssvfscanf_r+0x1024>
   15aa4:	07e5      	lsls	r5, r4, #31
   15aa6:	d43c      	bmi.n	15b22 <__ssvfscanf_r+0x146e>
   15aa8:	07a4      	lsls	r4, r4, #30
   15aaa:	d53a      	bpl.n	15b22 <__ssvfscanf_r+0x146e>
   15aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15aae:	64f9      	str	r1, [r7, #76]	; 0x4c
   15ab0:	f853 2b04 	ldr.w	r2, [r3], #4
   15ab4:	633b      	str	r3, [r7, #48]	; 0x30
   15ab6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   15aba:	f8c2 a000 	str.w	sl, [r2]
   15abe:	6053      	str	r3, [r2, #4]
   15ac0:	f7fe be1f 	b.w	14702 <__ssvfscanf_r+0x4e>
   15ac4:	ee18 9a10 	vmov	r9, s16
   15ac8:	461e      	mov	r6, r3
   15aca:	f7ff b814 	b.w	14af6 <__ssvfscanf_r+0x442>
   15ace:	2301      	movs	r3, #1
   15ad0:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   15ad4:	64bb      	str	r3, [r7, #72]	; 0x48
   15ad6:	f7fe bff6 	b.w	14ac6 <__ssvfscanf_r+0x412>
   15ada:	f1b8 0f01 	cmp.w	r8, #1
   15ade:	bf38      	it	cc
   15ae0:	f04f 0801 	movcc.w	r8, #1
   15ae4:	f014 0301 	ands.w	r3, r4, #1
   15ae8:	d13a      	bne.n	15b60 <__ssvfscanf_r+0x14ac>
   15aea:	06e5      	lsls	r5, r4, #27
   15aec:	f100 8136 	bmi.w	15d5c <__ssvfscanf_r+0x16a8>
   15af0:	0624      	lsls	r4, r4, #24
   15af2:	f140 814c 	bpl.w	15d8e <__ssvfscanf_r+0x16da>
   15af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15af8:	f853 5b04 	ldr.w	r5, [r3], #4
   15afc:	64bb      	str	r3, [r7, #72]	; 0x48
   15afe:	2d00      	cmp	r5, #0
   15b00:	f43e aecd 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15b04:	4640      	mov	r0, r8
   15b06:	f7f9 f8f3 	bl	ecf0 <malloc>
   15b0a:	4603      	mov	r3, r0
   15b0c:	2800      	cmp	r0, #0
   15b0e:	f040 80dc 	bne.w	15cca <__ssvfscanf_r+0x1616>
   15b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15b14:	2b00      	cmp	r3, #0
   15b16:	f000 8081 	beq.w	15c1c <__ssvfscanf_r+0x1568>
   15b1a:	f8d3 8000 	ldr.w	r8, [r3]
   15b1e:	88de      	ldrh	r6, [r3, #6]
   15b20:	e712      	b.n	15948 <__ssvfscanf_r+0x1294>
   15b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15b24:	64f9      	str	r1, [r7, #76]	; 0x4c
   15b26:	f853 2b04 	ldr.w	r2, [r3], #4
   15b2a:	f8c2 a000 	str.w	sl, [r2]
   15b2e:	633b      	str	r3, [r7, #48]	; 0x30
   15b30:	f7fe bde7 	b.w	14702 <__ssvfscanf_r+0x4e>
   15b34:	462b      	mov	r3, r5
   15b36:	6abd      	ldr	r5, [r7, #40]	; 0x28
   15b38:	42ab      	cmp	r3, r5
   15b3a:	f67e aeb0 	bls.w	1489e <__ssvfscanf_r+0x1ea>
   15b3e:	461c      	mov	r4, r3
   15b40:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   15b44:	465a      	mov	r2, fp
   15b46:	4648      	mov	r0, r9
   15b48:	f001 ff1e 	bl	17988 <_sungetc_r>
   15b4c:	42ac      	cmp	r4, r5
   15b4e:	d1f7      	bne.n	15b40 <__ssvfscanf_r+0x148c>
   15b50:	f7fe bea5 	b.w	1489e <__ssvfscanf_r+0x1ea>
   15b54:	000172cd 	.word	0x000172cd
   15b58:	20000f1d 	.word	0x20000f1d
   15b5c:	20000518 	.word	0x20000518
   15b60:	f014 0310 	ands.w	r3, r4, #16
   15b64:	637b      	str	r3, [r7, #52]	; 0x34
   15b66:	d05e      	beq.n	15c26 <__ssvfscanf_r+0x1572>
   15b68:	2500      	movs	r5, #0
   15b6a:	63fd      	str	r5, [r7, #60]	; 0x3c
   15b6c:	64bd      	str	r5, [r7, #72]	; 0x48
   15b6e:	462e      	mov	r6, r5
   15b70:	2400      	movs	r4, #0
   15b72:	464b      	mov	r3, r9
   15b74:	46c1      	mov	r9, r8
   15b76:	46a8      	mov	r8, r5
   15b78:	4625      	mov	r5, r4
   15b7a:	461c      	mov	r4, r3
   15b7c:	f7fb f958 	bl	10e30 <__locale_mb_cur_max>
   15b80:	42a8      	cmp	r0, r5
   15b82:	f43e ae83 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   15b86:	e9db 3200 	ldrd	r3, r2, [fp]
   15b8a:	f813 1b01 	ldrb.w	r1, [r3], #1
   15b8e:	3a01      	subs	r2, #1
   15b90:	e9cb 3200 	strd	r3, r2, [fp]
   15b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15b96:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   15b9a:	2a03      	cmp	r2, #3
   15b9c:	5541      	strb	r1, [r0, r5]
   15b9e:	f105 0301 	add.w	r3, r5, #1
   15ba2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   15ba6:	d102      	bne.n	15bae <__ssvfscanf_r+0x14fa>
   15ba8:	682a      	ldr	r2, [r5, #0]
   15baa:	2a04      	cmp	r2, #4
   15bac:	d006      	beq.n	15bbc <__ssvfscanf_r+0x1508>
   15bae:	2208      	movs	r2, #8
   15bb0:	2100      	movs	r1, #0
   15bb2:	4628      	mov	r0, r5
   15bb4:	62bb      	str	r3, [r7, #40]	; 0x28
   15bb6:	f7fb f81b 	bl	10bf0 <memset>
   15bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15bbc:	9500      	str	r5, [sp, #0]
   15bbe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   15bc2:	4631      	mov	r1, r6
   15bc4:	4620      	mov	r0, r4
   15bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   15bc8:	f001 fd0a 	bl	175e0 <_mbrtowc_r>
   15bcc:	1c43      	adds	r3, r0, #1
   15bce:	6278      	str	r0, [r7, #36]	; 0x24
   15bd0:	f43e ae5c 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   15bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15bd6:	2800      	cmp	r0, #0
   15bd8:	f040 8147 	bne.w	15e6a <__ssvfscanf_r+0x17b6>
   15bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15bde:	b902      	cbnz	r2, 15be2 <__ssvfscanf_r+0x152e>
   15be0:	6032      	str	r2, [r6, #0]
   15be2:	449a      	add	sl, r3
   15be4:	f109 39ff 	add.w	r9, r9, #4294967295
   15be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15bea:	2b00      	cmp	r3, #0
   15bec:	f040 8175 	bne.w	15eda <__ssvfscanf_r+0x1826>
   15bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15bf2:	2b00      	cmp	r3, #0
   15bf4:	f000 8170 	beq.w	15ed8 <__ssvfscanf_r+0x1824>
   15bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15bfa:	1af5      	subs	r5, r6, r3
   15bfc:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   15c00:	f200 816a 	bhi.w	15ed8 <__ssvfscanf_r+0x1824>
   15c04:	4618      	mov	r0, r3
   15c06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   15c0a:	f7f9 fb3d 	bl	f288 <realloc>
   15c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
   15c10:	2800      	cmp	r0, #0
   15c12:	f040 815c 	bne.w	15ece <__ssvfscanf_r+0x181a>
   15c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15c18:	2b00      	cmp	r3, #0
   15c1a:	d12d      	bne.n	15c78 <__ssvfscanf_r+0x15c4>
   15c1c:	f04f 33ff 	mov.w	r3, #4294967295
   15c20:	647b      	str	r3, [r7, #68]	; 0x44
   15c22:	f7fe be47 	b.w	148b4 <__ssvfscanf_r+0x200>
   15c26:	0622      	lsls	r2, r4, #24
   15c28:	f140 808f 	bpl.w	15d4a <__ssvfscanf_r+0x1696>
   15c2c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15c2e:	f854 3b04 	ldr.w	r3, [r4], #4
   15c32:	64bb      	str	r3, [r7, #72]	; 0x48
   15c34:	2b00      	cmp	r3, #0
   15c36:	f43e ae32 	beq.w	1489e <__ssvfscanf_r+0x1ea>
   15c3a:	2080      	movs	r0, #128	; 0x80
   15c3c:	f7f9 f858 	bl	ecf0 <malloc>
   15c40:	4606      	mov	r6, r0
   15c42:	2800      	cmp	r0, #0
   15c44:	d0e7      	beq.n	15c16 <__ssvfscanf_r+0x1562>
   15c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15c48:	6018      	str	r0, [r3, #0]
   15c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15c4c:	88dd      	ldrh	r5, [r3, #6]
   15c4e:	889a      	ldrh	r2, [r3, #4]
   15c50:	4295      	cmp	r5, r2
   15c52:	f0c0 80b3 	bcc.w	15dbc <__ssvfscanf_r+0x1708>
   15c56:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   15c5a:	428a      	cmp	r2, r1
   15c5c:	d856      	bhi.n	15d0c <__ssvfscanf_r+0x1658>
   15c5e:	3208      	adds	r2, #8
   15c60:	b293      	uxth	r3, r2
   15c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15c64:	63fb      	str	r3, [r7, #60]	; 0x3c
   15c66:	0099      	lsls	r1, r3, #2
   15c68:	6810      	ldr	r0, [r2, #0]
   15c6a:	f7f9 fb0d 	bl	f288 <realloc>
   15c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15c70:	2800      	cmp	r0, #0
   15c72:	f040 80ae 	bne.w	15dd2 <__ssvfscanf_r+0x171e>
   15c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15c78:	88db      	ldrh	r3, [r3, #6]
   15c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15c7c:	461e      	mov	r6, r3
   15c7e:	f8d2 8000 	ldr.w	r8, [r2]
   15c82:	e661      	b.n	15948 <__ssvfscanf_r+0x1294>
   15c84:	462b      	mov	r3, r5
   15c86:	6abd      	ldr	r5, [r7, #40]	; 0x28
   15c88:	42ab      	cmp	r3, r5
   15c8a:	f67e ae08 	bls.w	1489e <__ssvfscanf_r+0x1ea>
   15c8e:	461c      	mov	r4, r3
   15c90:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   15c94:	465a      	mov	r2, fp
   15c96:	4648      	mov	r0, r9
   15c98:	f001 fe76 	bl	17988 <_sungetc_r>
   15c9c:	42ac      	cmp	r4, r5
   15c9e:	d1f7      	bne.n	15c90 <__ssvfscanf_r+0x15dc>
   15ca0:	f7fe bdfd 	b.w	1489e <__ssvfscanf_r+0x1ea>
   15ca4:	4610      	mov	r0, r2
   15ca6:	00d9      	lsls	r1, r3, #3
   15ca8:	461e      	mov	r6, r3
   15caa:	f7f9 faed 	bl	f288 <realloc>
   15cae:	62b8      	str	r0, [r7, #40]	; 0x28
   15cb0:	2800      	cmp	r0, #0
   15cb2:	d0b0      	beq.n	15c16 <__ssvfscanf_r+0x1562>
   15cb4:	1942      	adds	r2, r0, r5
   15cb6:	64ba      	str	r2, [r7, #72]	; 0x48
   15cb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15cba:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   15cbc:	6010      	str	r0, [r2, #0]
   15cbe:	0073      	lsls	r3, r6, #1
   15cc0:	623b      	str	r3, [r7, #32]
   15cc2:	e4f8      	b.n	156b6 <__ssvfscanf_r+0x1002>
   15cc4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   15cc8:	e63e      	b.n	15948 <__ssvfscanf_r+0x1294>
   15cca:	6c39      	ldr	r1, [r7, #64]	; 0x40
   15ccc:	6028      	str	r0, [r5, #0]
   15cce:	88ce      	ldrh	r6, [r1, #6]
   15cd0:	888a      	ldrh	r2, [r1, #4]
   15cd2:	4296      	cmp	r6, r2
   15cd4:	f0c0 808e 	bcc.w	15df4 <__ssvfscanf_r+0x1740>
   15cd8:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   15cdc:	428a      	cmp	r2, r1
   15cde:	6338      	str	r0, [r7, #48]	; 0x30
   15ce0:	f240 80a5 	bls.w	15e2e <__ssvfscanf_r+0x177a>
   15ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ce6:	f8d3 8000 	ldr.w	r8, [r3]
   15cea:	e62d      	b.n	15948 <__ssvfscanf_r+0x1294>
   15cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15cee:	4295      	cmp	r5, r2
   15cf0:	f67e add5 	bls.w	1489e <__ssvfscanf_r+0x1ea>
   15cf4:	462c      	mov	r4, r5
   15cf6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   15cf8:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   15cfc:	465a      	mov	r2, fp
   15cfe:	4648      	mov	r0, r9
   15d00:	f001 fe42 	bl	17988 <_sungetc_r>
   15d04:	42ac      	cmp	r4, r5
   15d06:	d1f7      	bne.n	15cf8 <__ssvfscanf_r+0x1644>
   15d08:	f7fe bdc9 	b.w	1489e <__ssvfscanf_r+0x1ea>
   15d0c:	462b      	mov	r3, r5
   15d0e:	e7b4      	b.n	15c7a <__ssvfscanf_r+0x15c6>
   15d10:	f001 fc64 	bl	175dc <_strtoull_r>
   15d14:	e5c1      	b.n	1589a <__ssvfscanf_r+0x11e6>
   15d16:	f8d8 3000 	ldr.w	r3, [r8]
   15d1a:	461d      	mov	r5, r3
   15d1c:	3301      	adds	r3, #1
   15d1e:	f47f a8d5 	bne.w	14ecc <__ssvfscanf_r+0x818>
   15d22:	462a      	mov	r2, r5
   15d24:	f7ff b8e8 	b.w	14ef8 <__ssvfscanf_r+0x844>
   15d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15d2a:	6818      	ldr	r0, [r3, #0]
   15d2c:	f001 fcb4 	bl	17698 <iswspace>
   15d30:	2800      	cmp	r0, #0
   15d32:	f47f aea8 	bne.w	15a86 <__ssvfscanf_r+0x13d2>
   15d36:	2c03      	cmp	r4, #3
   15d38:	44aa      	add	sl, r5
   15d3a:	f47f a849 	bne.w	14dd0 <__ssvfscanf_r+0x71c>
   15d3e:	6833      	ldr	r3, [r6, #0]
   15d40:	2b04      	cmp	r3, #4
   15d42:	f47f a845 	bne.w	14dd0 <__ssvfscanf_r+0x71c>
   15d46:	f7ff b845 	b.w	14dd4 <__ssvfscanf_r+0x720>
   15d4a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   15d4e:	f853 6b04 	ldr.w	r6, [r3], #4
   15d52:	633b      	str	r3, [r7, #48]	; 0x30
   15d54:	4615      	mov	r5, r2
   15d56:	63fa      	str	r2, [r7, #60]	; 0x3c
   15d58:	64ba      	str	r2, [r7, #72]	; 0x48
   15d5a:	e709      	b.n	15b70 <__ssvfscanf_r+0x14bc>
   15d5c:	461c      	mov	r4, r3
   15d5e:	f8db 3004 	ldr.w	r3, [fp, #4]
   15d62:	4598      	cmp	r8, r3
   15d64:	dd39      	ble.n	15dda <__ssvfscanf_r+0x1726>
   15d66:	f8db 2000 	ldr.w	r2, [fp]
   15d6a:	441a      	add	r2, r3
   15d6c:	f8cb 2000 	str.w	r2, [fp]
   15d70:	4659      	mov	r1, fp
   15d72:	4648      	mov	r0, r9
   15d74:	441c      	add	r4, r3
   15d76:	eba8 0803 	sub.w	r8, r8, r3
   15d7a:	f001 fe45 	bl	17a08 <__ssrefill_r>
   15d7e:	2800      	cmp	r0, #0
   15d80:	d0ed      	beq.n	15d5e <__ssvfscanf_r+0x16aa>
   15d82:	2c00      	cmp	r4, #0
   15d84:	f43e ad82 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   15d88:	44a2      	add	sl, r4
   15d8a:	f7fe bcba 	b.w	14702 <__ssvfscanf_r+0x4e>
   15d8e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   15d90:	4643      	mov	r3, r8
   15d92:	6829      	ldr	r1, [r5, #0]
   15d94:	f8cd b000 	str.w	fp, [sp]
   15d98:	2201      	movs	r2, #1
   15d9a:	4648      	mov	r0, r9
   15d9c:	f001 fe52 	bl	17a44 <_sfread_r>
   15da0:	4604      	mov	r4, r0
   15da2:	2800      	cmp	r0, #0
   15da4:	f43e ad72 	beq.w	1488c <__ssvfscanf_r+0x1d8>
   15da8:	3504      	adds	r5, #4
   15daa:	64bd      	str	r5, [r7, #72]	; 0x48
   15dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15dae:	3301      	adds	r3, #1
   15db0:	647b      	str	r3, [r7, #68]	; 0x44
   15db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15db4:	633b      	str	r3, [r7, #48]	; 0x30
   15db6:	44a2      	add	sl, r4
   15db8:	f7fe bca3 	b.w	14702 <__ssvfscanf_r+0x4e>
   15dbc:	6818      	ldr	r0, [r3, #0]
   15dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15dc0:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   15dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15dc6:	633c      	str	r4, [r7, #48]	; 0x30
   15dc8:	3501      	adds	r5, #1
   15dca:	80dd      	strh	r5, [r3, #6]
   15dcc:	63fe      	str	r6, [r7, #60]	; 0x3c
   15dce:	2520      	movs	r5, #32
   15dd0:	e6ce      	b.n	15b70 <__ssvfscanf_r+0x14bc>
   15dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15dd4:	8093      	strh	r3, [r2, #4]
   15dd6:	6010      	str	r0, [r2, #0]
   15dd8:	e7f1      	b.n	15dbe <__ssvfscanf_r+0x170a>
   15dda:	eba3 0308 	sub.w	r3, r3, r8
   15dde:	f8cb 3004 	str.w	r3, [fp, #4]
   15de2:	f8db 3000 	ldr.w	r3, [fp]
   15de6:	4444      	add	r4, r8
   15de8:	4443      	add	r3, r8
   15dea:	f8cb 3000 	str.w	r3, [fp]
   15dee:	44a2      	add	sl, r4
   15df0:	f7fe bc87 	b.w	14702 <__ssvfscanf_r+0x4e>
   15df4:	680a      	ldr	r2, [r1, #0]
   15df6:	63fa      	str	r2, [r7, #60]	; 0x3c
   15df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15dfa:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   15dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15e00:	3601      	adds	r6, #1
   15e02:	b2b6      	uxth	r6, r6
   15e04:	80d6      	strh	r6, [r2, #6]
   15e06:	4619      	mov	r1, r3
   15e08:	f8cd b000 	str.w	fp, [sp]
   15e0c:	4643      	mov	r3, r8
   15e0e:	2201      	movs	r2, #1
   15e10:	4648      	mov	r0, r9
   15e12:	f001 fe17 	bl	17a44 <_sfread_r>
   15e16:	4604      	mov	r4, r0
   15e18:	b1d8      	cbz	r0, 15e52 <__ssvfscanf_r+0x179e>
   15e1a:	4580      	cmp	r8, r0
   15e1c:	d9c6      	bls.n	15dac <__ssvfscanf_r+0x16f8>
   15e1e:	6828      	ldr	r0, [r5, #0]
   15e20:	4621      	mov	r1, r4
   15e22:	f7f9 fa31 	bl	f288 <realloc>
   15e26:	2800      	cmp	r0, #0
   15e28:	d0c0      	beq.n	15dac <__ssvfscanf_r+0x16f8>
   15e2a:	6028      	str	r0, [r5, #0]
   15e2c:	e7be      	b.n	15dac <__ssvfscanf_r+0x16f8>
   15e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15e30:	3208      	adds	r2, #8
   15e32:	b294      	uxth	r4, r2
   15e34:	681a      	ldr	r2, [r3, #0]
   15e36:	637a      	str	r2, [r7, #52]	; 0x34
   15e38:	4610      	mov	r0, r2
   15e3a:	00a1      	lsls	r1, r4, #2
   15e3c:	f7f9 fa24 	bl	f288 <realloc>
   15e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15e42:	63f8      	str	r0, [r7, #60]	; 0x3c
   15e44:	2800      	cmp	r0, #0
   15e46:	d05b      	beq.n	15f00 <__ssvfscanf_r+0x184c>
   15e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15e4a:	809c      	strh	r4, [r3, #4]
   15e4c:	6018      	str	r0, [r3, #0]
   15e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15e50:	e7d2      	b.n	15df8 <__ssvfscanf_r+0x1744>
   15e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15e54:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   15e58:	2b00      	cmp	r3, #0
   15e5a:	f43f ad75 	beq.w	15948 <__ssvfscanf_r+0x1294>
   15e5e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   15e62:	065b      	lsls	r3, r3, #25
   15e64:	f57e ad1d 	bpl.w	148a2 <__ssvfscanf_r+0x1ee>
   15e68:	e56a      	b.n	15940 <__ssvfscanf_r+0x128c>
   15e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15e6c:	3202      	adds	r2, #2
   15e6e:	d11d      	bne.n	15eac <__ssvfscanf_r+0x17f8>
   15e70:	f8db 2004 	ldr.w	r2, [fp, #4]
   15e74:	2a00      	cmp	r2, #0
   15e76:	461d      	mov	r5, r3
   15e78:	f73f ae80 	bgt.w	15b7c <__ssvfscanf_r+0x14c8>
   15e7c:	4659      	mov	r1, fp
   15e7e:	4620      	mov	r0, r4
   15e80:	f001 fdc2 	bl	17a08 <__ssrefill_r>
   15e84:	b9e0      	cbnz	r0, 15ec0 <__ssvfscanf_r+0x180c>
   15e86:	f1b9 0f00 	cmp.w	r9, #0
   15e8a:	f47f ae77 	bne.w	15b7c <__ssvfscanf_r+0x14c8>
   15e8e:	4645      	mov	r5, r8
   15e90:	46a1      	mov	r9, r4
   15e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15e94:	b123      	cbz	r3, 15ea0 <__ssvfscanf_r+0x17ec>
   15e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15e98:	1af1      	subs	r1, r6, r3
   15e9a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   15e9e:	d827      	bhi.n	15ef0 <__ssvfscanf_r+0x183c>
   15ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ea2:	2b00      	cmp	r3, #0
   15ea4:	f47e ac2d 	bne.w	14702 <__ssvfscanf_r+0x4e>
   15ea8:	f7ff ba1c 	b.w	152e4 <__ssvfscanf_r+0xc30>
   15eac:	449a      	add	sl, r3
   15eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15eb0:	2b03      	cmp	r3, #3
   15eb2:	f47f ae97 	bne.w	15be4 <__ssvfscanf_r+0x1530>
   15eb6:	682b      	ldr	r3, [r5, #0]
   15eb8:	2b04      	cmp	r3, #4
   15eba:	f47f ae93 	bne.w	15be4 <__ssvfscanf_r+0x1530>
   15ebe:	e693      	b.n	15be8 <__ssvfscanf_r+0x1534>
   15ec0:	46a1      	mov	r9, r4
   15ec2:	462c      	mov	r4, r5
   15ec4:	4645      	mov	r5, r8
   15ec6:	2c00      	cmp	r4, #0
   15ec8:	d0e3      	beq.n	15e92 <__ssvfscanf_r+0x17de>
   15eca:	f7fe bcdf 	b.w	1488c <__ssvfscanf_r+0x1d8>
   15ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15ed0:	1946      	adds	r6, r0, r5
   15ed2:	6010      	str	r0, [r2, #0]
   15ed4:	ea4f 0848 	mov.w	r8, r8, lsl #1
   15ed8:	3604      	adds	r6, #4
   15eda:	f8db 3004 	ldr.w	r3, [fp, #4]
   15ede:	2b00      	cmp	r3, #0
   15ee0:	f04f 0500 	mov.w	r5, #0
   15ee4:	ddca      	ble.n	15e7c <__ssvfscanf_r+0x17c8>
   15ee6:	f1b9 0f00 	cmp.w	r9, #0
   15eea:	f47f ae47 	bne.w	15b7c <__ssvfscanf_r+0x14c8>
   15eee:	e7ce      	b.n	15e8e <__ssvfscanf_r+0x17da>
   15ef0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   15ef2:	6820      	ldr	r0, [r4, #0]
   15ef4:	f7f9 f9c8 	bl	f288 <realloc>
   15ef8:	2800      	cmp	r0, #0
   15efa:	d0d1      	beq.n	15ea0 <__ssvfscanf_r+0x17ec>
   15efc:	6020      	str	r0, [r4, #0]
   15efe:	e7cf      	b.n	15ea0 <__ssvfscanf_r+0x17ec>
   15f00:	4690      	mov	r8, r2
   15f02:	e521      	b.n	15948 <__ssvfscanf_r+0x1294>

00015f04 <_fclose_r>:
   15f04:	b570      	push	{r4, r5, r6, lr}
   15f06:	2900      	cmp	r1, #0
   15f08:	d04b      	beq.n	15fa2 <_fclose_r+0x9e>
   15f0a:	4606      	mov	r6, r0
   15f0c:	460c      	mov	r4, r1
   15f0e:	b110      	cbz	r0, 15f16 <_fclose_r+0x12>
   15f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
   15f12:	2b00      	cmp	r3, #0
   15f14:	d048      	beq.n	15fa8 <_fclose_r+0xa4>
   15f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15f18:	07d8      	lsls	r0, r3, #31
   15f1a:	d534      	bpl.n	15f86 <_fclose_r+0x82>
   15f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15f20:	2b00      	cmp	r3, #0
   15f22:	d03e      	beq.n	15fa2 <_fclose_r+0x9e>
   15f24:	4621      	mov	r1, r4
   15f26:	4630      	mov	r0, r6
   15f28:	f000 f850 	bl	15fcc <__sflush_r>
   15f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15f2e:	4605      	mov	r5, r0
   15f30:	b133      	cbz	r3, 15f40 <_fclose_r+0x3c>
   15f32:	69e1      	ldr	r1, [r4, #28]
   15f34:	4630      	mov	r0, r6
   15f36:	4798      	blx	r3
   15f38:	2800      	cmp	r0, #0
   15f3a:	bfb8      	it	lt
   15f3c:	f04f 35ff 	movlt.w	r5, #4294967295
   15f40:	89a3      	ldrh	r3, [r4, #12]
   15f42:	061a      	lsls	r2, r3, #24
   15f44:	d43c      	bmi.n	15fc0 <_fclose_r+0xbc>
   15f46:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15f48:	b141      	cbz	r1, 15f5c <_fclose_r+0x58>
   15f4a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   15f4e:	4299      	cmp	r1, r3
   15f50:	d002      	beq.n	15f58 <_fclose_r+0x54>
   15f52:	4630      	mov	r0, r6
   15f54:	f7fb fb46 	bl	115e4 <_free_r>
   15f58:	2300      	movs	r3, #0
   15f5a:	6323      	str	r3, [r4, #48]	; 0x30
   15f5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   15f5e:	b121      	cbz	r1, 15f6a <_fclose_r+0x66>
   15f60:	4630      	mov	r0, r6
   15f62:	f7fb fb3f 	bl	115e4 <_free_r>
   15f66:	2300      	movs	r3, #0
   15f68:	6463      	str	r3, [r4, #68]	; 0x44
   15f6a:	f7fa fc27 	bl	107bc <__sfp_lock_acquire>
   15f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   15f70:	2200      	movs	r2, #0
   15f72:	07db      	lsls	r3, r3, #31
   15f74:	81a2      	strh	r2, [r4, #12]
   15f76:	d51f      	bpl.n	15fb8 <_fclose_r+0xb4>
   15f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15f7a:	f7fa fff1 	bl	10f60 <__retarget_lock_close_recursive>
   15f7e:	f7fa fc23 	bl	107c8 <__sfp_lock_release>
   15f82:	4628      	mov	r0, r5
   15f84:	bd70      	pop	{r4, r5, r6, pc}
   15f86:	89a3      	ldrh	r3, [r4, #12]
   15f88:	0599      	lsls	r1, r3, #22
   15f8a:	d4cb      	bmi.n	15f24 <_fclose_r+0x20>
   15f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15f8e:	f7fa ffe9 	bl	10f64 <__retarget_lock_acquire_recursive>
   15f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   15f96:	2b00      	cmp	r3, #0
   15f98:	d1c4      	bne.n	15f24 <_fclose_r+0x20>
   15f9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   15f9c:	f015 0501 	ands.w	r5, r5, #1
   15fa0:	d005      	beq.n	15fae <_fclose_r+0xaa>
   15fa2:	2500      	movs	r5, #0
   15fa4:	4628      	mov	r0, r5
   15fa6:	bd70      	pop	{r4, r5, r6, pc}
   15fa8:	f7fa fbea 	bl	10780 <__sinit>
   15fac:	e7b3      	b.n	15f16 <_fclose_r+0x12>
   15fae:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15fb0:	f7fa ffda 	bl	10f68 <__retarget_lock_release_recursive>
   15fb4:	4628      	mov	r0, r5
   15fb6:	bd70      	pop	{r4, r5, r6, pc}
   15fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15fba:	f7fa ffd5 	bl	10f68 <__retarget_lock_release_recursive>
   15fbe:	e7db      	b.n	15f78 <_fclose_r+0x74>
   15fc0:	6921      	ldr	r1, [r4, #16]
   15fc2:	4630      	mov	r0, r6
   15fc4:	f7fb fb0e 	bl	115e4 <_free_r>
   15fc8:	e7bd      	b.n	15f46 <_fclose_r+0x42>
   15fca:	bf00      	nop

00015fcc <__sflush_r>:
   15fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   15fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fd4:	460c      	mov	r4, r1
   15fd6:	0711      	lsls	r1, r2, #28
   15fd8:	4680      	mov	r8, r0
   15fda:	d447      	bmi.n	1606c <__sflush_r+0xa0>
   15fdc:	6863      	ldr	r3, [r4, #4]
   15fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   15fe2:	2b00      	cmp	r3, #0
   15fe4:	81a2      	strh	r2, [r4, #12]
   15fe6:	dd5e      	ble.n	160a6 <__sflush_r+0xda>
   15fe8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   15fea:	2d00      	cmp	r5, #0
   15fec:	d058      	beq.n	160a0 <__sflush_r+0xd4>
   15fee:	2300      	movs	r3, #0
   15ff0:	f8d8 6000 	ldr.w	r6, [r8]
   15ff4:	f8c8 3000 	str.w	r3, [r8]
   15ff8:	b293      	uxth	r3, r2
   15ffa:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   15ffe:	d156      	bne.n	160ae <__sflush_r+0xe2>
   16000:	2301      	movs	r3, #1
   16002:	69e1      	ldr	r1, [r4, #28]
   16004:	4640      	mov	r0, r8
   16006:	47a8      	blx	r5
   16008:	1c43      	adds	r3, r0, #1
   1600a:	d067      	beq.n	160dc <__sflush_r+0x110>
   1600c:	89a3      	ldrh	r3, [r4, #12]
   1600e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   16010:	075f      	lsls	r7, r3, #29
   16012:	d505      	bpl.n	16020 <__sflush_r+0x54>
   16014:	6863      	ldr	r3, [r4, #4]
   16016:	1ac0      	subs	r0, r0, r3
   16018:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1601a:	b10b      	cbz	r3, 16020 <__sflush_r+0x54>
   1601c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1601e:	1ac0      	subs	r0, r0, r3
   16020:	69e1      	ldr	r1, [r4, #28]
   16022:	4602      	mov	r2, r0
   16024:	2300      	movs	r3, #0
   16026:	4640      	mov	r0, r8
   16028:	47a8      	blx	r5
   1602a:	1c41      	adds	r1, r0, #1
   1602c:	d141      	bne.n	160b2 <__sflush_r+0xe6>
   1602e:	f8d8 3000 	ldr.w	r3, [r8]
   16032:	2b00      	cmp	r3, #0
   16034:	d03d      	beq.n	160b2 <__sflush_r+0xe6>
   16036:	2b1d      	cmp	r3, #29
   16038:	d001      	beq.n	1603e <__sflush_r+0x72>
   1603a:	2b16      	cmp	r3, #22
   1603c:	d156      	bne.n	160ec <__sflush_r+0x120>
   1603e:	89a3      	ldrh	r3, [r4, #12]
   16040:	6922      	ldr	r2, [r4, #16]
   16042:	6022      	str	r2, [r4, #0]
   16044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   16048:	2100      	movs	r1, #0
   1604a:	6061      	str	r1, [r4, #4]
   1604c:	81a3      	strh	r3, [r4, #12]
   1604e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16050:	f8c8 6000 	str.w	r6, [r8]
   16054:	b321      	cbz	r1, 160a0 <__sflush_r+0xd4>
   16056:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1605a:	4299      	cmp	r1, r3
   1605c:	d002      	beq.n	16064 <__sflush_r+0x98>
   1605e:	4640      	mov	r0, r8
   16060:	f7fb fac0 	bl	115e4 <_free_r>
   16064:	2000      	movs	r0, #0
   16066:	6320      	str	r0, [r4, #48]	; 0x30
   16068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1606c:	6926      	ldr	r6, [r4, #16]
   1606e:	b1be      	cbz	r6, 160a0 <__sflush_r+0xd4>
   16070:	b293      	uxth	r3, r2
   16072:	6825      	ldr	r5, [r4, #0]
   16074:	6026      	str	r6, [r4, #0]
   16076:	079a      	lsls	r2, r3, #30
   16078:	bf0c      	ite	eq
   1607a:	6963      	ldreq	r3, [r4, #20]
   1607c:	2300      	movne	r3, #0
   1607e:	1bad      	subs	r5, r5, r6
   16080:	60a3      	str	r3, [r4, #8]
   16082:	e00b      	b.n	1609c <__sflush_r+0xd0>
   16084:	462b      	mov	r3, r5
   16086:	4632      	mov	r2, r6
   16088:	69e1      	ldr	r1, [r4, #28]
   1608a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1608c:	4640      	mov	r0, r8
   1608e:	47b8      	blx	r7
   16090:	f1b0 0c00 	subs.w	ip, r0, #0
   16094:	eba5 050c 	sub.w	r5, r5, ip
   16098:	4466      	add	r6, ip
   1609a:	dd17      	ble.n	160cc <__sflush_r+0x100>
   1609c:	2d00      	cmp	r5, #0
   1609e:	dcf1      	bgt.n	16084 <__sflush_r+0xb8>
   160a0:	2000      	movs	r0, #0
   160a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   160a8:	2b00      	cmp	r3, #0
   160aa:	dc9d      	bgt.n	15fe8 <__sflush_r+0x1c>
   160ac:	e7f8      	b.n	160a0 <__sflush_r+0xd4>
   160ae:	6d20      	ldr	r0, [r4, #80]	; 0x50
   160b0:	e7ae      	b.n	16010 <__sflush_r+0x44>
   160b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   160b6:	6922      	ldr	r2, [r4, #16]
   160b8:	6022      	str	r2, [r4, #0]
   160ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   160be:	81a3      	strh	r3, [r4, #12]
   160c0:	2200      	movs	r2, #0
   160c2:	04db      	lsls	r3, r3, #19
   160c4:	6062      	str	r2, [r4, #4]
   160c6:	d5c2      	bpl.n	1604e <__sflush_r+0x82>
   160c8:	6520      	str	r0, [r4, #80]	; 0x50
   160ca:	e7c0      	b.n	1604e <__sflush_r+0x82>
   160cc:	89a3      	ldrh	r3, [r4, #12]
   160ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   160d2:	f04f 30ff 	mov.w	r0, #4294967295
   160d6:	81a3      	strh	r3, [r4, #12]
   160d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160dc:	f8d8 3000 	ldr.w	r3, [r8]
   160e0:	2b00      	cmp	r3, #0
   160e2:	d093      	beq.n	1600c <__sflush_r+0x40>
   160e4:	2b1d      	cmp	r3, #29
   160e6:	d006      	beq.n	160f6 <__sflush_r+0x12a>
   160e8:	2b16      	cmp	r3, #22
   160ea:	d004      	beq.n	160f6 <__sflush_r+0x12a>
   160ec:	89a3      	ldrh	r3, [r4, #12]
   160ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   160f2:	81a3      	strh	r3, [r4, #12]
   160f4:	e7d5      	b.n	160a2 <__sflush_r+0xd6>
   160f6:	f8c8 6000 	str.w	r6, [r8]
   160fa:	e7d1      	b.n	160a0 <__sflush_r+0xd4>

000160fc <_fflush_r>:
   160fc:	b538      	push	{r3, r4, r5, lr}
   160fe:	460c      	mov	r4, r1
   16100:	4605      	mov	r5, r0
   16102:	b108      	cbz	r0, 16108 <_fflush_r+0xc>
   16104:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16106:	b303      	cbz	r3, 1614a <_fflush_r+0x4e>
   16108:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1610c:	b188      	cbz	r0, 16132 <_fflush_r+0x36>
   1610e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16110:	07db      	lsls	r3, r3, #31
   16112:	d401      	bmi.n	16118 <_fflush_r+0x1c>
   16114:	0581      	lsls	r1, r0, #22
   16116:	d50f      	bpl.n	16138 <_fflush_r+0x3c>
   16118:	4628      	mov	r0, r5
   1611a:	4621      	mov	r1, r4
   1611c:	f7ff ff56 	bl	15fcc <__sflush_r>
   16120:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16122:	07da      	lsls	r2, r3, #31
   16124:	4605      	mov	r5, r0
   16126:	d402      	bmi.n	1612e <_fflush_r+0x32>
   16128:	89a3      	ldrh	r3, [r4, #12]
   1612a:	059b      	lsls	r3, r3, #22
   1612c:	d508      	bpl.n	16140 <_fflush_r+0x44>
   1612e:	4628      	mov	r0, r5
   16130:	bd38      	pop	{r3, r4, r5, pc}
   16132:	4605      	mov	r5, r0
   16134:	4628      	mov	r0, r5
   16136:	bd38      	pop	{r3, r4, r5, pc}
   16138:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1613a:	f7fa ff13 	bl	10f64 <__retarget_lock_acquire_recursive>
   1613e:	e7eb      	b.n	16118 <_fflush_r+0x1c>
   16140:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16142:	f7fa ff11 	bl	10f68 <__retarget_lock_release_recursive>
   16146:	4628      	mov	r0, r5
   16148:	bd38      	pop	{r3, r4, r5, pc}
   1614a:	f7fa fb19 	bl	10780 <__sinit>
   1614e:	e7db      	b.n	16108 <_fflush_r+0xc>

00016150 <__sccl>:
   16150:	b570      	push	{r4, r5, r6, lr}
   16152:	780c      	ldrb	r4, [r1, #0]
   16154:	2c5e      	cmp	r4, #94	; 0x5e
   16156:	4686      	mov	lr, r0
   16158:	d01e      	beq.n	16198 <__sccl+0x48>
   1615a:	2200      	movs	r2, #0
   1615c:	1c48      	adds	r0, r1, #1
   1615e:	4694      	mov	ip, r2
   16160:	f10e 33ff 	add.w	r3, lr, #4294967295
   16164:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   16168:	f803 2f01 	strb.w	r2, [r3, #1]!
   1616c:	428b      	cmp	r3, r1
   1616e:	d1fb      	bne.n	16168 <__sccl+0x18>
   16170:	b184      	cbz	r4, 16194 <__sccl+0x44>
   16172:	f08c 0101 	eor.w	r1, ip, #1
   16176:	f80e 1004 	strb.w	r1, [lr, r4]
   1617a:	1c45      	adds	r5, r0, #1
   1617c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   16180:	2b2d      	cmp	r3, #45	; 0x2d
   16182:	d00e      	beq.n	161a2 <__sccl+0x52>
   16184:	2b5d      	cmp	r3, #93	; 0x5d
   16186:	d003      	beq.n	16190 <__sccl+0x40>
   16188:	b11b      	cbz	r3, 16192 <__sccl+0x42>
   1618a:	461c      	mov	r4, r3
   1618c:	4628      	mov	r0, r5
   1618e:	e7f2      	b.n	16176 <__sccl+0x26>
   16190:	4628      	mov	r0, r5
   16192:	bd70      	pop	{r4, r5, r6, pc}
   16194:	3801      	subs	r0, #1
   16196:	bd70      	pop	{r4, r5, r6, pc}
   16198:	2201      	movs	r2, #1
   1619a:	784c      	ldrb	r4, [r1, #1]
   1619c:	1c88      	adds	r0, r1, #2
   1619e:	4694      	mov	ip, r2
   161a0:	e7de      	b.n	16160 <__sccl+0x10>
   161a2:	f890 c001 	ldrb.w	ip, [r0, #1]
   161a6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   161aa:	d0ee      	beq.n	1618a <__sccl+0x3a>
   161ac:	4564      	cmp	r4, ip
   161ae:	dcec      	bgt.n	1618a <__sccl+0x3a>
   161b0:	1c66      	adds	r6, r4, #1
   161b2:	3002      	adds	r0, #2
   161b4:	eb0e 0206 	add.w	r2, lr, r6
   161b8:	f802 1b01 	strb.w	r1, [r2], #1
   161bc:	eba2 030e 	sub.w	r3, r2, lr
   161c0:	3b01      	subs	r3, #1
   161c2:	459c      	cmp	ip, r3
   161c4:	dcf8      	bgt.n	161b8 <__sccl+0x68>
   161c6:	ebac 0304 	sub.w	r3, ip, r4
   161ca:	3b01      	subs	r3, #1
   161cc:	4564      	cmp	r4, ip
   161ce:	bfa8      	it	ge
   161d0:	2300      	movge	r3, #0
   161d2:	3502      	adds	r5, #2
   161d4:	199c      	adds	r4, r3, r6
   161d6:	e7d1      	b.n	1617c <__sccl+0x2c>

000161d8 <stpncpy>:
   161d8:	ea41 0300 	orr.w	r3, r1, r0
   161dc:	079b      	lsls	r3, r3, #30
   161de:	b430      	push	{r4, r5}
   161e0:	d101      	bne.n	161e6 <stpncpy+0xe>
   161e2:	2a03      	cmp	r2, #3
   161e4:	d80f      	bhi.n	16206 <stpncpy+0x2e>
   161e6:	f101 3cff 	add.w	ip, r1, #4294967295
   161ea:	e007      	b.n	161fc <stpncpy+0x24>
   161ec:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   161f0:	f803 1b01 	strb.w	r1, [r3], #1
   161f4:	1e54      	subs	r4, r2, #1
   161f6:	b1c1      	cbz	r1, 1622a <stpncpy+0x52>
   161f8:	4622      	mov	r2, r4
   161fa:	4618      	mov	r0, r3
   161fc:	4603      	mov	r3, r0
   161fe:	2a00      	cmp	r2, #0
   16200:	d1f4      	bne.n	161ec <stpncpy+0x14>
   16202:	bc30      	pop	{r4, r5}
   16204:	4770      	bx	lr
   16206:	460b      	mov	r3, r1
   16208:	4619      	mov	r1, r3
   1620a:	f853 5b04 	ldr.w	r5, [r3], #4
   1620e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   16212:	ea24 0405 	bic.w	r4, r4, r5
   16216:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   1621a:	d1e4      	bne.n	161e6 <stpncpy+0xe>
   1621c:	3a04      	subs	r2, #4
   1621e:	2a03      	cmp	r2, #3
   16220:	f840 5b04 	str.w	r5, [r0], #4
   16224:	4619      	mov	r1, r3
   16226:	d8ef      	bhi.n	16208 <stpncpy+0x30>
   16228:	e7dd      	b.n	161e6 <stpncpy+0xe>
   1622a:	4402      	add	r2, r0
   1622c:	2c00      	cmp	r4, #0
   1622e:	d0e8      	beq.n	16202 <stpncpy+0x2a>
   16230:	f803 1b01 	strb.w	r1, [r3], #1
   16234:	4293      	cmp	r3, r2
   16236:	d1fb      	bne.n	16230 <stpncpy+0x58>
   16238:	bc30      	pop	{r4, r5}
   1623a:	4770      	bx	lr

0001623c <_localeconv_r>:
   1623c:	4800      	ldr	r0, [pc, #0]	; (16240 <_localeconv_r+0x4>)
   1623e:	4770      	bx	lr
   16240:	20008b64 	.word	0x20008b64
   16244:	00000000 	.word	0x00000000

00016248 <frexp>:
   16248:	b430      	push	{r4, r5}
   1624a:	b082      	sub	sp, #8
   1624c:	ed8d 0b00 	vstr	d0, [sp]
   16250:	9a01      	ldr	r2, [sp, #4]
   16252:	4c19      	ldr	r4, [pc, #100]	; (162b8 <frexp+0x70>)
   16254:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   16258:	2100      	movs	r1, #0
   1625a:	42a3      	cmp	r3, r4
   1625c:	6001      	str	r1, [r0, #0]
   1625e:	dc21      	bgt.n	162a4 <frexp+0x5c>
   16260:	9c00      	ldr	r4, [sp, #0]
   16262:	431c      	orrs	r4, r3
   16264:	d01e      	beq.n	162a4 <frexp+0x5c>
   16266:	4c15      	ldr	r4, [pc, #84]	; (162bc <frexp+0x74>)
   16268:	4014      	ands	r4, r2
   1626a:	b954      	cbnz	r4, 16282 <frexp+0x3a>
   1626c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 162b0 <frexp+0x68>
   16270:	ee20 7b07 	vmul.f64	d7, d0, d7
   16274:	ed8d 7b00 	vstr	d7, [sp]
   16278:	9a01      	ldr	r2, [sp, #4]
   1627a:	f06f 0135 	mvn.w	r1, #53	; 0x35
   1627e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   16282:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   16286:	e9dd 4500 	ldrd	r4, r5, [sp]
   1628a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1628e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   16292:	151b      	asrs	r3, r3, #20
   16294:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   16298:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1629c:	e9cd 4500 	strd	r4, r5, [sp]
   162a0:	440b      	add	r3, r1
   162a2:	6003      	str	r3, [r0, #0]
   162a4:	ed9d 0b00 	vldr	d0, [sp]
   162a8:	b002      	add	sp, #8
   162aa:	bc30      	pop	{r4, r5}
   162ac:	4770      	bx	lr
   162ae:	bf00      	nop
   162b0:	00000000 	.word	0x00000000
   162b4:	43500000 	.word	0x43500000
   162b8:	7fefffff 	.word	0x7fefffff
   162bc:	7ff00000 	.word	0x7ff00000

000162c0 <__assert_func>:
   162c0:	b500      	push	{lr}
   162c2:	4c0b      	ldr	r4, [pc, #44]	; (162f0 <__assert_func+0x30>)
   162c4:	6825      	ldr	r5, [r4, #0]
   162c6:	4614      	mov	r4, r2
   162c8:	68ee      	ldr	r6, [r5, #12]
   162ca:	461a      	mov	r2, r3
   162cc:	b085      	sub	sp, #20
   162ce:	4603      	mov	r3, r0
   162d0:	460d      	mov	r5, r1
   162d2:	b14c      	cbz	r4, 162e8 <__assert_func+0x28>
   162d4:	4907      	ldr	r1, [pc, #28]	; (162f4 <__assert_func+0x34>)
   162d6:	9500      	str	r5, [sp, #0]
   162d8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   162dc:	4630      	mov	r0, r6
   162de:	4906      	ldr	r1, [pc, #24]	; (162f8 <__assert_func+0x38>)
   162e0:	f001 fabe 	bl	17860 <fiprintf>
   162e4:	f7f6 ff92 	bl	d20c <abort>
   162e8:	4904      	ldr	r1, [pc, #16]	; (162fc <__assert_func+0x3c>)
   162ea:	460c      	mov	r4, r1
   162ec:	e7f3      	b.n	162d6 <__assert_func+0x16>
   162ee:	bf00      	nop
   162f0:	20008ffc 	.word	0x20008ffc
   162f4:	20000d00 	.word	0x20000d00
   162f8:	20000d10 	.word	0x20000d10
   162fc:	20000518 	.word	0x20000518

00016300 <_calloc_r>:
   16300:	b538      	push	{r3, r4, r5, lr}
   16302:	fba1 1402 	umull	r1, r4, r1, r2
   16306:	bb8c      	cbnz	r4, 1636c <_calloc_r+0x6c>
   16308:	f7f8 fd02 	bl	ed10 <_malloc_r>
   1630c:	4605      	mov	r5, r0
   1630e:	b1e0      	cbz	r0, 1634a <_calloc_r+0x4a>
   16310:	f850 2c04 	ldr.w	r2, [r0, #-4]
   16314:	f022 0203 	bic.w	r2, r2, #3
   16318:	3a04      	subs	r2, #4
   1631a:	2a24      	cmp	r2, #36	; 0x24
   1631c:	d817      	bhi.n	1634e <_calloc_r+0x4e>
   1631e:	2a13      	cmp	r2, #19
   16320:	d91a      	bls.n	16358 <_calloc_r+0x58>
   16322:	2a1b      	cmp	r2, #27
   16324:	e9c0 4400 	strd	r4, r4, [r0]
   16328:	d91d      	bls.n	16366 <_calloc_r+0x66>
   1632a:	2a24      	cmp	r2, #36	; 0x24
   1632c:	bf14      	ite	ne
   1632e:	f100 0210 	addne.w	r2, r0, #16
   16332:	f100 0218 	addeq.w	r2, r0, #24
   16336:	f04f 0300 	mov.w	r3, #0
   1633a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   1633e:	bf04      	itt	eq
   16340:	6104      	streq	r4, [r0, #16]
   16342:	6144      	streq	r4, [r0, #20]
   16344:	e9c2 3300 	strd	r3, r3, [r2]
   16348:	6093      	str	r3, [r2, #8]
   1634a:	4628      	mov	r0, r5
   1634c:	bd38      	pop	{r3, r4, r5, pc}
   1634e:	4621      	mov	r1, r4
   16350:	f7fa fc4e 	bl	10bf0 <memset>
   16354:	4628      	mov	r0, r5
   16356:	bd38      	pop	{r3, r4, r5, pc}
   16358:	4602      	mov	r2, r0
   1635a:	2300      	movs	r3, #0
   1635c:	e9c2 3300 	strd	r3, r3, [r2]
   16360:	6093      	str	r3, [r2, #8]
   16362:	4628      	mov	r0, r5
   16364:	bd38      	pop	{r3, r4, r5, pc}
   16366:	f100 0208 	add.w	r2, r0, #8
   1636a:	e7f6      	b.n	1635a <_calloc_r+0x5a>
   1636c:	f7fa fdcc 	bl	10f08 <__errno>
   16370:	230c      	movs	r3, #12
   16372:	2500      	movs	r5, #0
   16374:	6003      	str	r3, [r0, #0]
   16376:	e7e8      	b.n	1634a <_calloc_r+0x4a>

00016378 <quorem>:
   16378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1637c:	6903      	ldr	r3, [r0, #16]
   1637e:	690c      	ldr	r4, [r1, #16]
   16380:	42a3      	cmp	r3, r4
   16382:	b083      	sub	sp, #12
   16384:	f2c0 8087 	blt.w	16496 <quorem+0x11e>
   16388:	3c01      	subs	r4, #1
   1638a:	f101 0514 	add.w	r5, r1, #20
   1638e:	00a3      	lsls	r3, r4, #2
   16390:	f100 0814 	add.w	r8, r0, #20
   16394:	9300      	str	r3, [sp, #0]
   16396:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1639a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1639e:	3301      	adds	r3, #1
   163a0:	4681      	mov	r9, r0
   163a2:	429a      	cmp	r2, r3
   163a4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   163a8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   163ac:	9001      	str	r0, [sp, #4]
   163ae:	fbb2 f6f3 	udiv	r6, r2, r3
   163b2:	d33b      	bcc.n	1642c <quorem+0xb4>
   163b4:	f04f 0c00 	mov.w	ip, #0
   163b8:	46ae      	mov	lr, r5
   163ba:	4640      	mov	r0, r8
   163bc:	46e2      	mov	sl, ip
   163be:	4663      	mov	r3, ip
   163c0:	f85e bb04 	ldr.w	fp, [lr], #4
   163c4:	6802      	ldr	r2, [r0, #0]
   163c6:	fa1f fc8b 	uxth.w	ip, fp
   163ca:	fb06 330c 	mla	r3, r6, ip, r3
   163ce:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   163d2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   163d6:	fb06 cc0b 	mla	ip, r6, fp, ip
   163da:	b29b      	uxth	r3, r3
   163dc:	ebaa 0303 	sub.w	r3, sl, r3
   163e0:	fa1f fa8c 	uxth.w	sl, ip
   163e4:	fa13 f382 	uxtah	r3, r3, r2
   163e8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   163ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
   163f0:	b29b      	uxth	r3, r3
   163f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   163f6:	4577      	cmp	r7, lr
   163f8:	f840 3b04 	str.w	r3, [r0], #4
   163fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
   16400:	ea4f 431c 	mov.w	r3, ip, lsr #16
   16404:	d2dc      	bcs.n	163c0 <quorem+0x48>
   16406:	9b00      	ldr	r3, [sp, #0]
   16408:	f858 3003 	ldr.w	r3, [r8, r3]
   1640c:	b973      	cbnz	r3, 1642c <quorem+0xb4>
   1640e:	9b01      	ldr	r3, [sp, #4]
   16410:	3b04      	subs	r3, #4
   16412:	4598      	cmp	r8, r3
   16414:	d304      	bcc.n	16420 <quorem+0xa8>
   16416:	e007      	b.n	16428 <quorem+0xb0>
   16418:	4598      	cmp	r8, r3
   1641a:	f104 34ff 	add.w	r4, r4, #4294967295
   1641e:	d203      	bcs.n	16428 <quorem+0xb0>
   16420:	f853 2904 	ldr.w	r2, [r3], #-4
   16424:	2a00      	cmp	r2, #0
   16426:	d0f7      	beq.n	16418 <quorem+0xa0>
   16428:	f8c9 4010 	str.w	r4, [r9, #16]
   1642c:	4648      	mov	r0, r9
   1642e:	f7fc f8e3 	bl	125f8 <__mcmp>
   16432:	2800      	cmp	r0, #0
   16434:	db2b      	blt.n	1648e <quorem+0x116>
   16436:	3601      	adds	r6, #1
   16438:	4641      	mov	r1, r8
   1643a:	2300      	movs	r3, #0
   1643c:	f855 0b04 	ldr.w	r0, [r5], #4
   16440:	f8d1 c000 	ldr.w	ip, [r1]
   16444:	b282      	uxth	r2, r0
   16446:	1a9a      	subs	r2, r3, r2
   16448:	0c03      	lsrs	r3, r0, #16
   1644a:	fa12 f28c 	uxtah	r2, r2, ip
   1644e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   16452:	eb03 4322 	add.w	r3, r3, r2, asr #16
   16456:	b292      	uxth	r2, r2
   16458:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   1645c:	42af      	cmp	r7, r5
   1645e:	f841 2b04 	str.w	r2, [r1], #4
   16462:	ea4f 4323 	mov.w	r3, r3, asr #16
   16466:	d2e9      	bcs.n	1643c <quorem+0xc4>
   16468:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1646c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   16470:	b96a      	cbnz	r2, 1648e <quorem+0x116>
   16472:	3b04      	subs	r3, #4
   16474:	4598      	cmp	r8, r3
   16476:	d304      	bcc.n	16482 <quorem+0x10a>
   16478:	e007      	b.n	1648a <quorem+0x112>
   1647a:	4598      	cmp	r8, r3
   1647c:	f104 34ff 	add.w	r4, r4, #4294967295
   16480:	d203      	bcs.n	1648a <quorem+0x112>
   16482:	f853 2904 	ldr.w	r2, [r3], #-4
   16486:	2a00      	cmp	r2, #0
   16488:	d0f7      	beq.n	1647a <quorem+0x102>
   1648a:	f8c9 4010 	str.w	r4, [r9, #16]
   1648e:	4630      	mov	r0, r6
   16490:	b003      	add	sp, #12
   16492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16496:	2000      	movs	r0, #0
   16498:	b003      	add	sp, #12
   1649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1649e:	bf00      	nop

000164a0 <_dtoa_r>:
   164a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a4:	ed2d 8b02 	vpush	{d8}
   164a8:	b08f      	sub	sp, #60	; 0x3c
   164aa:	ed8d 0b02 	vstr	d0, [sp, #8]
   164ae:	9101      	str	r1, [sp, #4]
   164b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   164b2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   164b4:	9305      	str	r3, [sp, #20]
   164b6:	ec57 6b10 	vmov	r6, r7, d0
   164ba:	4604      	mov	r4, r0
   164bc:	4693      	mov	fp, r2
   164be:	b141      	cbz	r1, 164d2 <_dtoa_r+0x32>
   164c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   164c2:	604a      	str	r2, [r1, #4]
   164c4:	2301      	movs	r3, #1
   164c6:	4093      	lsls	r3, r2
   164c8:	608b      	str	r3, [r1, #8]
   164ca:	f7fb fddd 	bl	12088 <_Bfree>
   164ce:	2300      	movs	r3, #0
   164d0:	63a3      	str	r3, [r4, #56]	; 0x38
   164d2:	f1b7 0800 	subs.w	r8, r7, #0
   164d6:	bfb4      	ite	lt
   164d8:	2301      	movlt	r3, #1
   164da:	2300      	movge	r3, #0
   164dc:	602b      	str	r3, [r5, #0]
   164de:	4bbe      	ldr	r3, [pc, #760]	; (167d8 <_dtoa_r+0x338>)
   164e0:	bfbc      	itt	lt
   164e2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   164e6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   164ea:	ea33 0308 	bics.w	r3, r3, r8
   164ee:	f000 809f 	beq.w	16630 <_dtoa_r+0x190>
   164f2:	ed9d 8b02 	vldr	d8, [sp, #8]
   164f6:	eeb5 8b40 	vcmp.f64	d8, #0.0
   164fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   164fe:	d111      	bne.n	16524 <_dtoa_r+0x84>
   16500:	9a05      	ldr	r2, [sp, #20]
   16502:	2301      	movs	r3, #1
   16504:	6013      	str	r3, [r2, #0]
   16506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16508:	2b00      	cmp	r3, #0
   1650a:	f000 823f 	beq.w	1698c <_dtoa_r+0x4ec>
   1650e:	4bb3      	ldr	r3, [pc, #716]	; (167dc <_dtoa_r+0x33c>)
   16510:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16512:	6013      	str	r3, [r2, #0]
   16514:	3b01      	subs	r3, #1
   16516:	9300      	str	r3, [sp, #0]
   16518:	9800      	ldr	r0, [sp, #0]
   1651a:	b00f      	add	sp, #60	; 0x3c
   1651c:	ecbd 8b02 	vpop	{d8}
   16520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16524:	aa0c      	add	r2, sp, #48	; 0x30
   16526:	a90d      	add	r1, sp, #52	; 0x34
   16528:	4620      	mov	r0, r4
   1652a:	eeb0 0b48 	vmov.f64	d0, d8
   1652e:	f7fc f9c3 	bl	128b8 <__d2b>
   16532:	ea5f 5318 	movs.w	r3, r8, lsr #20
   16536:	4605      	mov	r5, r0
   16538:	f040 8092 	bne.w	16660 <_dtoa_r+0x1c0>
   1653c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   16540:	440b      	add	r3, r1
   16542:	f203 4232 	addw	r2, r3, #1074	; 0x432
   16546:	2a20      	cmp	r2, #32
   16548:	f340 82fa 	ble.w	16b40 <_dtoa_r+0x6a0>
   1654c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   16550:	fa08 f802 	lsl.w	r8, r8, r2
   16554:	f203 4212 	addw	r2, r3, #1042	; 0x412
   16558:	40d6      	lsrs	r6, r2
   1655a:	ea48 0206 	orr.w	r2, r8, r6
   1655e:	ee07 2a10 	vmov	s14, r2
   16562:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   16566:	1e58      	subs	r0, r3, #1
   16568:	ee17 6a90 	vmov	r6, s15
   1656c:	ec53 2b17 	vmov	r2, r3, d7
   16570:	f04f 0a01 	mov.w	sl, #1
   16574:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   16578:	ed9f 3b91 	vldr	d3, [pc, #580]	; 167c0 <_dtoa_r+0x320>
   1657c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 167c8 <_dtoa_r+0x328>
   16580:	ed9f 5b93 	vldr	d5, [pc, #588]	; 167d0 <_dtoa_r+0x330>
   16584:	ee06 0a90 	vmov	s13, r0
   16588:	ec43 2b12 	vmov	d2, r2, r3
   1658c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   16590:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   16594:	ee32 6b46 	vsub.f64	d6, d2, d6
   16598:	eea6 7b03 	vfma.f64	d7, d6, d3
   1659c:	eea4 7b05 	vfma.f64	d7, d4, d5
   165a0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   165a4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   165a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   165ac:	ee16 7a90 	vmov	r7, s13
   165b0:	d508      	bpl.n	165c4 <_dtoa_r+0x124>
   165b2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   165b6:	eeb4 6b47 	vcmp.f64	d6, d7
   165ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   165be:	bf18      	it	ne
   165c0:	f107 37ff 	addne.w	r7, r7, #4294967295
   165c4:	2f16      	cmp	r7, #22
   165c6:	f200 8145 	bhi.w	16854 <_dtoa_r+0x3b4>
   165ca:	4b85      	ldr	r3, [pc, #532]	; (167e0 <_dtoa_r+0x340>)
   165cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   165d0:	ed93 7b00 	vldr	d7, [r3]
   165d4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   165d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   165dc:	d557      	bpl.n	1668e <_dtoa_r+0x1ee>
   165de:	1a09      	subs	r1, r1, r0
   165e0:	2300      	movs	r3, #0
   165e2:	f1b1 0801 	subs.w	r8, r1, #1
   165e6:	f107 37ff 	add.w	r7, r7, #4294967295
   165ea:	930a      	str	r3, [sp, #40]	; 0x28
   165ec:	f100 8139 	bmi.w	16862 <_dtoa_r+0x3c2>
   165f0:	2300      	movs	r3, #0
   165f2:	9306      	str	r3, [sp, #24]
   165f4:	2f00      	cmp	r7, #0
   165f6:	da52      	bge.n	1669e <_dtoa_r+0x1fe>
   165f8:	9b06      	ldr	r3, [sp, #24]
   165fa:	9704      	str	r7, [sp, #16]
   165fc:	1bdb      	subs	r3, r3, r7
   165fe:	9306      	str	r3, [sp, #24]
   16600:	427b      	negs	r3, r7
   16602:	9308      	str	r3, [sp, #32]
   16604:	9b01      	ldr	r3, [sp, #4]
   16606:	2b09      	cmp	r3, #9
   16608:	f04f 0700 	mov.w	r7, #0
   1660c:	d84e      	bhi.n	166ac <_dtoa_r+0x20c>
   1660e:	2b05      	cmp	r3, #5
   16610:	f340 829d 	ble.w	16b4e <_dtoa_r+0x6ae>
   16614:	3b04      	subs	r3, #4
   16616:	9301      	str	r3, [sp, #4]
   16618:	2600      	movs	r6, #0
   1661a:	9b01      	ldr	r3, [sp, #4]
   1661c:	1e9a      	subs	r2, r3, #2
   1661e:	2a03      	cmp	r2, #3
   16620:	f200 8125 	bhi.w	1686e <_dtoa_r+0x3ce>
   16624:	e8df f012 	tbh	[pc, r2, lsl #1]
   16628:	03a703aa 	.word	0x03a703aa
   1662c:	037e039d 	.word	0x037e039d
   16630:	9a05      	ldr	r2, [sp, #20]
   16632:	f3c8 0813 	ubfx	r8, r8, #0, #20
   16636:	f242 730f 	movw	r3, #9999	; 0x270f
   1663a:	ea58 0806 	orrs.w	r8, r8, r6
   1663e:	6013      	str	r3, [r2, #0]
   16640:	d11e      	bne.n	16680 <_dtoa_r+0x1e0>
   16642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16644:	2b00      	cmp	r3, #0
   16646:	f000 8591 	beq.w	1716c <_dtoa_r+0xccc>
   1664a:	4b66      	ldr	r3, [pc, #408]	; (167e4 <_dtoa_r+0x344>)
   1664c:	9300      	str	r3, [sp, #0]
   1664e:	3308      	adds	r3, #8
   16650:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   16652:	9800      	ldr	r0, [sp, #0]
   16654:	6013      	str	r3, [r2, #0]
   16656:	b00f      	add	sp, #60	; 0x3c
   16658:	ecbd 8b02 	vpop	{d8}
   1665c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16660:	ee18 6a90 	vmov	r6, s17
   16664:	f3c6 0613 	ubfx	r6, r6, #0, #20
   16668:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   1666c:	ec53 2b18 	vmov	r2, r3, d8
   16670:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   16674:	990c      	ldr	r1, [sp, #48]	; 0x30
   16676:	f04f 0a00 	mov.w	sl, #0
   1667a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1667e:	e77b      	b.n	16578 <_dtoa_r+0xd8>
   16680:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16682:	2b00      	cmp	r3, #0
   16684:	f040 833b 	bne.w	16cfe <_dtoa_r+0x85e>
   16688:	4b57      	ldr	r3, [pc, #348]	; (167e8 <_dtoa_r+0x348>)
   1668a:	9300      	str	r3, [sp, #0]
   1668c:	e744      	b.n	16518 <_dtoa_r+0x78>
   1668e:	1a09      	subs	r1, r1, r0
   16690:	2300      	movs	r3, #0
   16692:	f1b1 0801 	subs.w	r8, r1, #1
   16696:	930a      	str	r3, [sp, #40]	; 0x28
   16698:	f100 80e3 	bmi.w	16862 <_dtoa_r+0x3c2>
   1669c:	9306      	str	r3, [sp, #24]
   1669e:	2300      	movs	r3, #0
   166a0:	9308      	str	r3, [sp, #32]
   166a2:	9b01      	ldr	r3, [sp, #4]
   166a4:	9704      	str	r7, [sp, #16]
   166a6:	2b09      	cmp	r3, #9
   166a8:	44b8      	add	r8, r7
   166aa:	d9b0      	bls.n	1660e <_dtoa_r+0x16e>
   166ac:	2300      	movs	r3, #0
   166ae:	2601      	movs	r6, #1
   166b0:	9301      	str	r3, [sp, #4]
   166b2:	9607      	str	r6, [sp, #28]
   166b4:	f04f 39ff 	mov.w	r9, #4294967295
   166b8:	469b      	mov	fp, r3
   166ba:	2100      	movs	r1, #0
   166bc:	63e1      	str	r1, [r4, #60]	; 0x3c
   166be:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   166c2:	4620      	mov	r0, r4
   166c4:	f7fb fcba 	bl	1203c <_Balloc>
   166c8:	9000      	str	r0, [sp, #0]
   166ca:	2800      	cmp	r0, #0
   166cc:	f000 8540 	beq.w	17150 <_dtoa_r+0xcb0>
   166d0:	9b00      	ldr	r3, [sp, #0]
   166d2:	63a3      	str	r3, [r4, #56]	; 0x38
   166d4:	f1b9 0f0e 	cmp.w	r9, #14
   166d8:	f200 80dc 	bhi.w	16894 <_dtoa_r+0x3f4>
   166dc:	2e00      	cmp	r6, #0
   166de:	f000 80d9 	beq.w	16894 <_dtoa_r+0x3f4>
   166e2:	9b04      	ldr	r3, [sp, #16]
   166e4:	2b00      	cmp	r3, #0
   166e6:	f340 83de 	ble.w	16ea6 <_dtoa_r+0xa06>
   166ea:	4a3d      	ldr	r2, [pc, #244]	; (167e0 <_dtoa_r+0x340>)
   166ec:	f003 010f 	and.w	r1, r3, #15
   166f0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   166f4:	ed92 7b00 	vldr	d7, [r2]
   166f8:	111a      	asrs	r2, r3, #4
   166fa:	05db      	lsls	r3, r3, #23
   166fc:	f140 8382 	bpl.w	16e04 <_dtoa_r+0x964>
   16700:	493a      	ldr	r1, [pc, #232]	; (167ec <_dtoa_r+0x34c>)
   16702:	ed91 6b08 	vldr	d6, [r1, #32]
   16706:	f002 020f 	and.w	r2, r2, #15
   1670a:	2003      	movs	r0, #3
   1670c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   16710:	b15a      	cbz	r2, 1672a <_dtoa_r+0x28a>
   16712:	4936      	ldr	r1, [pc, #216]	; (167ec <_dtoa_r+0x34c>)
   16714:	07d6      	lsls	r6, r2, #31
   16716:	d504      	bpl.n	16722 <_dtoa_r+0x282>
   16718:	ed91 6b00 	vldr	d6, [r1]
   1671c:	3001      	adds	r0, #1
   1671e:	ee27 7b06 	vmul.f64	d7, d7, d6
   16722:	1052      	asrs	r2, r2, #1
   16724:	f101 0108 	add.w	r1, r1, #8
   16728:	d1f4      	bne.n	16714 <_dtoa_r+0x274>
   1672a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   1672e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16730:	b13b      	cbz	r3, 16742 <_dtoa_r+0x2a2>
   16732:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   16736:	eeb4 6bc7 	vcmpe.f64	d6, d7
   1673a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1673e:	f100 84ae 	bmi.w	1709e <_dtoa_r+0xbfe>
   16742:	ee07 0a90 	vmov	s15, r0
   16746:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   1674a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   1674e:	eea5 7b06 	vfma.f64	d7, d5, d6
   16752:	ee17 2a90 	vmov	r2, s15
   16756:	ec51 0b17 	vmov	r0, r1, d7
   1675a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   1675e:	f1b9 0f00 	cmp.w	r9, #0
   16762:	f000 8388 	beq.w	16e76 <_dtoa_r+0x9d6>
   16766:	9e04      	ldr	r6, [sp, #16]
   16768:	464a      	mov	r2, r9
   1676a:	9b07      	ldr	r3, [sp, #28]
   1676c:	2b00      	cmp	r3, #0
   1676e:	f000 8447 	beq.w	17000 <_dtoa_r+0xb60>
   16772:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   16776:	4b1a      	ldr	r3, [pc, #104]	; (167e0 <_dtoa_r+0x340>)
   16778:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   1677c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   16780:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   16784:	ee36 7b47 	vsub.f64	d7, d6, d7
   16788:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1678c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   16790:	ec41 0b16 	vmov	d6, r0, r1
   16794:	ee14 0a90 	vmov	r0, s9
   16798:	ee35 5b46 	vsub.f64	d5, d5, d6
   1679c:	9900      	ldr	r1, [sp, #0]
   1679e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   167a2:	3030      	adds	r0, #48	; 0x30
   167a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   167a8:	f801 0b01 	strb.w	r0, [r1], #1
   167ac:	f300 84ac 	bgt.w	17108 <_dtoa_r+0xc68>
   167b0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   167b4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   167b8:	f04f 0c00 	mov.w	ip, #0
   167bc:	e031      	b.n	16822 <_dtoa_r+0x382>
   167be:	bf00      	nop
   167c0:	636f4361 	.word	0x636f4361
   167c4:	3fd287a7 	.word	0x3fd287a7
   167c8:	8b60c8b3 	.word	0x8b60c8b3
   167cc:	3fc68a28 	.word	0x3fc68a28
   167d0:	509f79fb 	.word	0x509f79fb
   167d4:	3fd34413 	.word	0x3fd34413
   167d8:	7ff00000 	.word	0x7ff00000
   167dc:	20007e95 	.word	0x20007e95
   167e0:	20000328 	.word	0x20000328
   167e4:	20001020 	.word	0x20001020
   167e8:	2000102c 	.word	0x2000102c
   167ec:	20000300 	.word	0x20000300
   167f0:	f10c 0c01 	add.w	ip, ip, #1
   167f4:	4594      	cmp	ip, r2
   167f6:	da4d      	bge.n	16894 <_dtoa_r+0x3f4>
   167f8:	ee27 7b04 	vmul.f64	d7, d7, d4
   167fc:	ee25 5b04 	vmul.f64	d5, d5, d4
   16800:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   16804:	ee16 3a90 	vmov	r3, s13
   16808:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1680c:	3330      	adds	r3, #48	; 0x30
   1680e:	ee37 7b43 	vsub.f64	d7, d7, d3
   16812:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1681a:	f801 3b01 	strb.w	r3, [r1], #1
   1681e:	f100 8473 	bmi.w	17108 <_dtoa_r+0xc68>
   16822:	ee32 6b47 	vsub.f64	d6, d2, d7
   16826:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1682e:	d5df      	bpl.n	167f0 <_dtoa_r+0x350>
   16830:	9a00      	ldr	r2, [sp, #0]
   16832:	9604      	str	r6, [sp, #16]
   16834:	e002      	b.n	1683c <_dtoa_r+0x39c>
   16836:	428a      	cmp	r2, r1
   16838:	f000 8450 	beq.w	170dc <_dtoa_r+0xc3c>
   1683c:	4689      	mov	r9, r1
   1683e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   16842:	2b39      	cmp	r3, #57	; 0x39
   16844:	d0f7      	beq.n	16836 <_dtoa_r+0x396>
   16846:	3301      	adds	r3, #1
   16848:	b2db      	uxtb	r3, r3
   1684a:	700b      	strb	r3, [r1, #0]
   1684c:	9b04      	ldr	r3, [sp, #16]
   1684e:	3301      	adds	r3, #1
   16850:	9304      	str	r3, [sp, #16]
   16852:	e155      	b.n	16b00 <_dtoa_r+0x660>
   16854:	1a09      	subs	r1, r1, r0
   16856:	2301      	movs	r3, #1
   16858:	f1b1 0801 	subs.w	r8, r1, #1
   1685c:	930a      	str	r3, [sp, #40]	; 0x28
   1685e:	f57f aec7 	bpl.w	165f0 <_dtoa_r+0x150>
   16862:	f1c1 0301 	rsb	r3, r1, #1
   16866:	9306      	str	r3, [sp, #24]
   16868:	f04f 0800 	mov.w	r8, #0
   1686c:	e6c2      	b.n	165f4 <_dtoa_r+0x154>
   1686e:	2600      	movs	r6, #0
   16870:	63e6      	str	r6, [r4, #60]	; 0x3c
   16872:	4631      	mov	r1, r6
   16874:	4620      	mov	r0, r4
   16876:	f7fb fbe1 	bl	1203c <_Balloc>
   1687a:	9000      	str	r0, [sp, #0]
   1687c:	2800      	cmp	r0, #0
   1687e:	f000 8467 	beq.w	17150 <_dtoa_r+0xcb0>
   16882:	9b00      	ldr	r3, [sp, #0]
   16884:	63a3      	str	r3, [r4, #56]	; 0x38
   16886:	f04f 33ff 	mov.w	r3, #4294967295
   1688a:	930b      	str	r3, [sp, #44]	; 0x2c
   1688c:	4699      	mov	r9, r3
   1688e:	2301      	movs	r3, #1
   16890:	46b3      	mov	fp, r6
   16892:	9307      	str	r3, [sp, #28]
   16894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16896:	2a00      	cmp	r2, #0
   16898:	db55      	blt.n	16946 <_dtoa_r+0x4a6>
   1689a:	9904      	ldr	r1, [sp, #16]
   1689c:	290e      	cmp	r1, #14
   1689e:	dc52      	bgt.n	16946 <_dtoa_r+0x4a6>
   168a0:	4bb7      	ldr	r3, [pc, #732]	; (16b80 <_dtoa_r+0x6e0>)
   168a2:	f1bb 0f00 	cmp.w	fp, #0
   168a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   168aa:	ed93 6b00 	vldr	d6, [r3]
   168ae:	da15      	bge.n	168dc <_dtoa_r+0x43c>
   168b0:	f1b9 0f00 	cmp.w	r9, #0
   168b4:	dc12      	bgt.n	168dc <_dtoa_r+0x43c>
   168b6:	f040 82f2 	bne.w	16e9e <_dtoa_r+0x9fe>
   168ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   168be:	ee26 7b07 	vmul.f64	d7, d6, d7
   168c2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   168c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   168ca:	46ca      	mov	sl, r9
   168cc:	464e      	mov	r6, r9
   168ce:	f200 826d 	bhi.w	16dac <_dtoa_r+0x90c>
   168d2:	f8dd 8000 	ldr.w	r8, [sp]
   168d6:	ea6f 0b0b 	mvn.w	fp, fp
   168da:	e270      	b.n	16dbe <_dtoa_r+0x91e>
   168dc:	ee88 7b06 	vdiv.f64	d7, d8, d6
   168e0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   168e4:	9900      	ldr	r1, [sp, #0]
   168e6:	ee17 3a10 	vmov	r3, s14
   168ea:	f1b9 0f01 	cmp.w	r9, #1
   168ee:	f103 0330 	add.w	r3, r3, #48	; 0x30
   168f2:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   168f6:	f801 3b01 	strb.w	r3, [r1], #1
   168fa:	eea5 8b46 	vfms.f64	d8, d5, d6
   168fe:	f000 8334 	beq.w	16f6a <_dtoa_r+0xaca>
   16902:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   16906:	2301      	movs	r3, #1
   16908:	e011      	b.n	1692e <_dtoa_r+0x48e>
   1690a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1690e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   16912:	3301      	adds	r3, #1
   16914:	ee17 2a10 	vmov	r2, s14
   16918:	454b      	cmp	r3, r9
   1691a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1691e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   16922:	f801 2b01 	strb.w	r2, [r1], #1
   16926:	eea5 8b46 	vfms.f64	d8, d5, d6
   1692a:	f000 831e 	beq.w	16f6a <_dtoa_r+0xaca>
   1692e:	ee28 8b04 	vmul.f64	d8, d8, d4
   16932:	eeb5 8b40 	vcmp.f64	d8, #0.0
   16936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1693a:	d1e6      	bne.n	1690a <_dtoa_r+0x46a>
   1693c:	9b04      	ldr	r3, [sp, #16]
   1693e:	3301      	adds	r3, #1
   16940:	9304      	str	r3, [sp, #16]
   16942:	4689      	mov	r9, r1
   16944:	e0dc      	b.n	16b00 <_dtoa_r+0x660>
   16946:	9b07      	ldr	r3, [sp, #28]
   16948:	b343      	cbz	r3, 1699c <_dtoa_r+0x4fc>
   1694a:	9b01      	ldr	r3, [sp, #4]
   1694c:	2b01      	cmp	r3, #1
   1694e:	f340 8276 	ble.w	16e3e <_dtoa_r+0x99e>
   16952:	9b08      	ldr	r3, [sp, #32]
   16954:	f109 3aff 	add.w	sl, r9, #4294967295
   16958:	4553      	cmp	r3, sl
   1695a:	f280 823f 	bge.w	16ddc <_dtoa_r+0x93c>
   1695e:	9b08      	ldr	r3, [sp, #32]
   16960:	f8cd a020 	str.w	sl, [sp, #32]
   16964:	ebaa 0203 	sub.w	r2, sl, r3
   16968:	4417      	add	r7, r2
   1696a:	f04f 0a00 	mov.w	sl, #0
   1696e:	f1b9 0f00 	cmp.w	r9, #0
   16972:	f2c0 8325 	blt.w	16fc0 <_dtoa_r+0xb20>
   16976:	9b06      	ldr	r3, [sp, #24]
   16978:	9309      	str	r3, [sp, #36]	; 0x24
   1697a:	444b      	add	r3, r9
   1697c:	44c8      	add	r8, r9
   1697e:	9306      	str	r3, [sp, #24]
   16980:	2101      	movs	r1, #1
   16982:	4620      	mov	r0, r4
   16984:	f7fb fc84 	bl	12290 <__i2b>
   16988:	4606      	mov	r6, r0
   1698a:	e00c      	b.n	169a6 <_dtoa_r+0x506>
   1698c:	4b7d      	ldr	r3, [pc, #500]	; (16b84 <_dtoa_r+0x6e4>)
   1698e:	9300      	str	r3, [sp, #0]
   16990:	9800      	ldr	r0, [sp, #0]
   16992:	b00f      	add	sp, #60	; 0x3c
   16994:	ecbd 8b02 	vpop	{d8}
   16998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1699c:	9b06      	ldr	r3, [sp, #24]
   1699e:	f8dd a020 	ldr.w	sl, [sp, #32]
   169a2:	9e07      	ldr	r6, [sp, #28]
   169a4:	9309      	str	r3, [sp, #36]	; 0x24
   169a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   169a8:	b16b      	cbz	r3, 169c6 <_dtoa_r+0x526>
   169aa:	f1b8 0f00 	cmp.w	r8, #0
   169ae:	dd0a      	ble.n	169c6 <_dtoa_r+0x526>
   169b0:	4543      	cmp	r3, r8
   169b2:	9906      	ldr	r1, [sp, #24]
   169b4:	461a      	mov	r2, r3
   169b6:	bfa8      	it	ge
   169b8:	4642      	movge	r2, r8
   169ba:	1a89      	subs	r1, r1, r2
   169bc:	1a9b      	subs	r3, r3, r2
   169be:	9106      	str	r1, [sp, #24]
   169c0:	9309      	str	r3, [sp, #36]	; 0x24
   169c2:	eba8 0802 	sub.w	r8, r8, r2
   169c6:	9b08      	ldr	r3, [sp, #32]
   169c8:	b163      	cbz	r3, 169e4 <_dtoa_r+0x544>
   169ca:	9b07      	ldr	r3, [sp, #28]
   169cc:	2b00      	cmp	r3, #0
   169ce:	f000 82a7 	beq.w	16f20 <_dtoa_r+0xa80>
   169d2:	f1ba 0f00 	cmp.w	sl, #0
   169d6:	f300 8204 	bgt.w	16de2 <_dtoa_r+0x942>
   169da:	9b08      	ldr	r3, [sp, #32]
   169dc:	ebb3 020a 	subs.w	r2, r3, sl
   169e0:	f040 82ff 	bne.w	16fe2 <_dtoa_r+0xb42>
   169e4:	2101      	movs	r1, #1
   169e6:	4620      	mov	r0, r4
   169e8:	f7fb fc52 	bl	12290 <__i2b>
   169ec:	2f00      	cmp	r7, #0
   169ee:	4682      	mov	sl, r0
   169f0:	f300 80af 	bgt.w	16b52 <_dtoa_r+0x6b2>
   169f4:	9b01      	ldr	r3, [sp, #4]
   169f6:	2b01      	cmp	r3, #1
   169f8:	f340 8187 	ble.w	16d0a <_dtoa_r+0x86a>
   169fc:	2300      	movs	r3, #0
   169fe:	9308      	str	r3, [sp, #32]
   16a00:	2001      	movs	r0, #1
   16a02:	2f00      	cmp	r7, #0
   16a04:	f040 80b1 	bne.w	16b6a <_dtoa_r+0x6ca>
   16a08:	4440      	add	r0, r8
   16a0a:	f010 001f 	ands.w	r0, r0, #31
   16a0e:	f000 817a 	beq.w	16d06 <_dtoa_r+0x866>
   16a12:	f1c0 0220 	rsb	r2, r0, #32
   16a16:	2a04      	cmp	r2, #4
   16a18:	f300 8088 	bgt.w	16b2c <_dtoa_r+0x68c>
   16a1c:	f040 81f6 	bne.w	16e0c <_dtoa_r+0x96c>
   16a20:	9b06      	ldr	r3, [sp, #24]
   16a22:	2b00      	cmp	r3, #0
   16a24:	dd05      	ble.n	16a32 <_dtoa_r+0x592>
   16a26:	4629      	mov	r1, r5
   16a28:	461a      	mov	r2, r3
   16a2a:	4620      	mov	r0, r4
   16a2c:	f7fb fd6c 	bl	12508 <__lshift>
   16a30:	4605      	mov	r5, r0
   16a32:	f1b8 0f00 	cmp.w	r8, #0
   16a36:	dd05      	ble.n	16a44 <_dtoa_r+0x5a4>
   16a38:	4651      	mov	r1, sl
   16a3a:	4642      	mov	r2, r8
   16a3c:	4620      	mov	r0, r4
   16a3e:	f7fb fd63 	bl	12508 <__lshift>
   16a42:	4682      	mov	sl, r0
   16a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16a46:	2b00      	cmp	r3, #0
   16a48:	f040 813f 	bne.w	16cca <_dtoa_r+0x82a>
   16a4c:	f1b9 0f00 	cmp.w	r9, #0
   16a50:	f340 8125 	ble.w	16c9e <_dtoa_r+0x7fe>
   16a54:	9b07      	ldr	r3, [sp, #28]
   16a56:	2b00      	cmp	r3, #0
   16a58:	f040 80a3 	bne.w	16ba2 <_dtoa_r+0x702>
   16a5c:	9b04      	ldr	r3, [sp, #16]
   16a5e:	3301      	adds	r3, #1
   16a60:	9304      	str	r3, [sp, #16]
   16a62:	f8dd 8000 	ldr.w	r8, [sp]
   16a66:	2701      	movs	r7, #1
   16a68:	e007      	b.n	16a7a <_dtoa_r+0x5da>
   16a6a:	4629      	mov	r1, r5
   16a6c:	2300      	movs	r3, #0
   16a6e:	220a      	movs	r2, #10
   16a70:	4620      	mov	r0, r4
   16a72:	f7fb fb13 	bl	1209c <__multadd>
   16a76:	3701      	adds	r7, #1
   16a78:	4605      	mov	r5, r0
   16a7a:	4651      	mov	r1, sl
   16a7c:	4628      	mov	r0, r5
   16a7e:	f7ff fc7b 	bl	16378 <quorem>
   16a82:	45b9      	cmp	r9, r7
   16a84:	f100 0030 	add.w	r0, r0, #48	; 0x30
   16a88:	f808 0b01 	strb.w	r0, [r8], #1
   16a8c:	dced      	bgt.n	16a6a <_dtoa_r+0x5ca>
   16a8e:	f1b9 0f00 	cmp.w	r9, #0
   16a92:	9a00      	ldr	r2, [sp, #0]
   16a94:	bfcc      	ite	gt
   16a96:	46cb      	movgt	fp, r9
   16a98:	f04f 0b01 	movle.w	fp, #1
   16a9c:	4603      	mov	r3, r0
   16a9e:	4493      	add	fp, r2
   16aa0:	2700      	movs	r7, #0
   16aa2:	4629      	mov	r1, r5
   16aa4:	2201      	movs	r2, #1
   16aa6:	4620      	mov	r0, r4
   16aa8:	9301      	str	r3, [sp, #4]
   16aaa:	f7fb fd2d 	bl	12508 <__lshift>
   16aae:	4651      	mov	r1, sl
   16ab0:	4605      	mov	r5, r0
   16ab2:	f7fb fda1 	bl	125f8 <__mcmp>
   16ab6:	2800      	cmp	r0, #0
   16ab8:	f340 81af 	ble.w	16e1a <_dtoa_r+0x97a>
   16abc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   16ac0:	9a00      	ldr	r2, [sp, #0]
   16ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
   16ac6:	e004      	b.n	16ad2 <_dtoa_r+0x632>
   16ac8:	455a      	cmp	r2, fp
   16aca:	f000 81b1 	beq.w	16e30 <_dtoa_r+0x990>
   16ace:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   16ad2:	2b39      	cmp	r3, #57	; 0x39
   16ad4:	f10b 0901 	add.w	r9, fp, #1
   16ad8:	d0f6      	beq.n	16ac8 <_dtoa_r+0x628>
   16ada:	3301      	adds	r3, #1
   16adc:	f88b 3000 	strb.w	r3, [fp]
   16ae0:	4651      	mov	r1, sl
   16ae2:	4620      	mov	r0, r4
   16ae4:	f7fb fad0 	bl	12088 <_Bfree>
   16ae8:	b156      	cbz	r6, 16b00 <_dtoa_r+0x660>
   16aea:	b12f      	cbz	r7, 16af8 <_dtoa_r+0x658>
   16aec:	42b7      	cmp	r7, r6
   16aee:	d003      	beq.n	16af8 <_dtoa_r+0x658>
   16af0:	4639      	mov	r1, r7
   16af2:	4620      	mov	r0, r4
   16af4:	f7fb fac8 	bl	12088 <_Bfree>
   16af8:	4631      	mov	r1, r6
   16afa:	4620      	mov	r0, r4
   16afc:	f7fb fac4 	bl	12088 <_Bfree>
   16b00:	4629      	mov	r1, r5
   16b02:	4620      	mov	r0, r4
   16b04:	f7fb fac0 	bl	12088 <_Bfree>
   16b08:	2300      	movs	r3, #0
   16b0a:	f889 3000 	strb.w	r3, [r9]
   16b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16b12:	601a      	str	r2, [r3, #0]
   16b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16b16:	2b00      	cmp	r3, #0
   16b18:	f43f acfe 	beq.w	16518 <_dtoa_r+0x78>
   16b1c:	9800      	ldr	r0, [sp, #0]
   16b1e:	f8c3 9000 	str.w	r9, [r3]
   16b22:	b00f      	add	sp, #60	; 0x3c
   16b24:	ecbd 8b02 	vpop	{d8}
   16b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b2c:	f1c0 001c 	rsb	r0, r0, #28
   16b30:	9b06      	ldr	r3, [sp, #24]
   16b32:	4403      	add	r3, r0
   16b34:	9306      	str	r3, [sp, #24]
   16b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16b38:	4403      	add	r3, r0
   16b3a:	9309      	str	r3, [sp, #36]	; 0x24
   16b3c:	4480      	add	r8, r0
   16b3e:	e76f      	b.n	16a20 <_dtoa_r+0x580>
   16b40:	f1c2 0220 	rsb	r2, r2, #32
   16b44:	fa06 f202 	lsl.w	r2, r6, r2
   16b48:	ee07 2a10 	vmov	s14, r2
   16b4c:	e509      	b.n	16562 <_dtoa_r+0xc2>
   16b4e:	2601      	movs	r6, #1
   16b50:	e563      	b.n	1661a <_dtoa_r+0x17a>
   16b52:	4601      	mov	r1, r0
   16b54:	463a      	mov	r2, r7
   16b56:	4620      	mov	r0, r4
   16b58:	f7fb fc76 	bl	12448 <__pow5mult>
   16b5c:	9b01      	ldr	r3, [sp, #4]
   16b5e:	2b01      	cmp	r3, #1
   16b60:	4682      	mov	sl, r0
   16b62:	f340 81c5 	ble.w	16ef0 <_dtoa_r+0xa50>
   16b66:	2300      	movs	r3, #0
   16b68:	9308      	str	r3, [sp, #32]
   16b6a:	f8da 2010 	ldr.w	r2, [sl, #16]
   16b6e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   16b72:	6910      	ldr	r0, [r2, #16]
   16b74:	f7fb fb3c 	bl	121f0 <__hi0bits>
   16b78:	f1c0 0020 	rsb	r0, r0, #32
   16b7c:	e744      	b.n	16a08 <_dtoa_r+0x568>
   16b7e:	bf00      	nop
   16b80:	20000328 	.word	0x20000328
   16b84:	20007e94 	.word	0x20007e94
   16b88:	4631      	mov	r1, r6
   16b8a:	2300      	movs	r3, #0
   16b8c:	220a      	movs	r2, #10
   16b8e:	4620      	mov	r0, r4
   16b90:	f7fb fa84 	bl	1209c <__multadd>
   16b94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16b96:	2b00      	cmp	r3, #0
   16b98:	4606      	mov	r6, r0
   16b9a:	f340 82ce 	ble.w	1713a <_dtoa_r+0xc9a>
   16b9e:	9704      	str	r7, [sp, #16]
   16ba0:	4699      	mov	r9, r3
   16ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16ba4:	2b00      	cmp	r3, #0
   16ba6:	dd05      	ble.n	16bb4 <_dtoa_r+0x714>
   16ba8:	4631      	mov	r1, r6
   16baa:	461a      	mov	r2, r3
   16bac:	4620      	mov	r0, r4
   16bae:	f7fb fcab 	bl	12508 <__lshift>
   16bb2:	4606      	mov	r6, r0
   16bb4:	9b08      	ldr	r3, [sp, #32]
   16bb6:	2b00      	cmp	r3, #0
   16bb8:	f040 81eb 	bne.w	16f92 <_dtoa_r+0xaf2>
   16bbc:	46b0      	mov	r8, r6
   16bbe:	9b02      	ldr	r3, [sp, #8]
   16bc0:	9f00      	ldr	r7, [sp, #0]
   16bc2:	f003 0201 	and.w	r2, r3, #1
   16bc6:	1e7b      	subs	r3, r7, #1
   16bc8:	444b      	add	r3, r9
   16bca:	9308      	str	r3, [sp, #32]
   16bcc:	9b01      	ldr	r3, [sp, #4]
   16bce:	920a      	str	r2, [sp, #40]	; 0x28
   16bd0:	4313      	orrs	r3, r2
   16bd2:	9309      	str	r3, [sp, #36]	; 0x24
   16bd4:	4651      	mov	r1, sl
   16bd6:	4628      	mov	r0, r5
   16bd8:	f7ff fbce 	bl	16378 <quorem>
   16bdc:	4631      	mov	r1, r6
   16bde:	4683      	mov	fp, r0
   16be0:	4628      	mov	r0, r5
   16be2:	f7fb fd09 	bl	125f8 <__mcmp>
   16be6:	4642      	mov	r2, r8
   16be8:	4651      	mov	r1, sl
   16bea:	4681      	mov	r9, r0
   16bec:	4620      	mov	r0, r4
   16bee:	f7fb fd25 	bl	1263c <__mdiff>
   16bf2:	68c2      	ldr	r2, [r0, #12]
   16bf4:	4601      	mov	r1, r0
   16bf6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   16bfa:	2a00      	cmp	r2, #0
   16bfc:	d142      	bne.n	16c84 <_dtoa_r+0x7e4>
   16bfe:	e9cd 0306 	strd	r0, r3, [sp, #24]
   16c02:	4628      	mov	r0, r5
   16c04:	f7fb fcf8 	bl	125f8 <__mcmp>
   16c08:	9906      	ldr	r1, [sp, #24]
   16c0a:	9002      	str	r0, [sp, #8]
   16c0c:	4620      	mov	r0, r4
   16c0e:	f7fb fa3b 	bl	12088 <_Bfree>
   16c12:	9a02      	ldr	r2, [sp, #8]
   16c14:	9b07      	ldr	r3, [sp, #28]
   16c16:	b91a      	cbnz	r2, 16c20 <_dtoa_r+0x780>
   16c18:	9909      	ldr	r1, [sp, #36]	; 0x24
   16c1a:	2900      	cmp	r1, #0
   16c1c:	f000 827e 	beq.w	1711c <_dtoa_r+0xc7c>
   16c20:	f1b9 0f00 	cmp.w	r9, #0
   16c24:	f2c0 8183 	blt.w	16f2e <_dtoa_r+0xa8e>
   16c28:	9901      	ldr	r1, [sp, #4]
   16c2a:	ea49 0901 	orr.w	r9, r9, r1
   16c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
   16c30:	ea51 0909 	orrs.w	r9, r1, r9
   16c34:	f000 817b 	beq.w	16f2e <_dtoa_r+0xa8e>
   16c38:	2a00      	cmp	r2, #0
   16c3a:	f300 81c6 	bgt.w	16fca <_dtoa_r+0xb2a>
   16c3e:	9a08      	ldr	r2, [sp, #32]
   16c40:	703b      	strb	r3, [r7, #0]
   16c42:	f107 0901 	add.w	r9, r7, #1
   16c46:	4297      	cmp	r7, r2
   16c48:	46cb      	mov	fp, r9
   16c4a:	f000 81c4 	beq.w	16fd6 <_dtoa_r+0xb36>
   16c4e:	4629      	mov	r1, r5
   16c50:	2300      	movs	r3, #0
   16c52:	220a      	movs	r2, #10
   16c54:	4620      	mov	r0, r4
   16c56:	f7fb fa21 	bl	1209c <__multadd>
   16c5a:	4546      	cmp	r6, r8
   16c5c:	4605      	mov	r5, r0
   16c5e:	4631      	mov	r1, r6
   16c60:	f04f 0300 	mov.w	r3, #0
   16c64:	f04f 020a 	mov.w	r2, #10
   16c68:	4620      	mov	r0, r4
   16c6a:	d012      	beq.n	16c92 <_dtoa_r+0x7f2>
   16c6c:	f7fb fa16 	bl	1209c <__multadd>
   16c70:	4641      	mov	r1, r8
   16c72:	4606      	mov	r6, r0
   16c74:	2300      	movs	r3, #0
   16c76:	220a      	movs	r2, #10
   16c78:	4620      	mov	r0, r4
   16c7a:	f7fb fa0f 	bl	1209c <__multadd>
   16c7e:	464f      	mov	r7, r9
   16c80:	4680      	mov	r8, r0
   16c82:	e7a7      	b.n	16bd4 <_dtoa_r+0x734>
   16c84:	4620      	mov	r0, r4
   16c86:	9302      	str	r3, [sp, #8]
   16c88:	f7fb f9fe 	bl	12088 <_Bfree>
   16c8c:	9b02      	ldr	r3, [sp, #8]
   16c8e:	2201      	movs	r2, #1
   16c90:	e7c6      	b.n	16c20 <_dtoa_r+0x780>
   16c92:	f7fb fa03 	bl	1209c <__multadd>
   16c96:	464f      	mov	r7, r9
   16c98:	4606      	mov	r6, r0
   16c9a:	4680      	mov	r8, r0
   16c9c:	e79a      	b.n	16bd4 <_dtoa_r+0x734>
   16c9e:	9b01      	ldr	r3, [sp, #4]
   16ca0:	2b02      	cmp	r3, #2
   16ca2:	dc71      	bgt.n	16d88 <_dtoa_r+0x8e8>
   16ca4:	9b07      	ldr	r3, [sp, #28]
   16ca6:	2b00      	cmp	r3, #0
   16ca8:	f47f af7b 	bne.w	16ba2 <_dtoa_r+0x702>
   16cac:	9b04      	ldr	r3, [sp, #16]
   16cae:	4651      	mov	r1, sl
   16cb0:	3301      	adds	r3, #1
   16cb2:	4628      	mov	r0, r5
   16cb4:	9304      	str	r3, [sp, #16]
   16cb6:	f7ff fb5f 	bl	16378 <quorem>
   16cba:	f8dd b000 	ldr.w	fp, [sp]
   16cbe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   16cc2:	f80b 3b01 	strb.w	r3, [fp], #1
   16cc6:	2700      	movs	r7, #0
   16cc8:	e6eb      	b.n	16aa2 <_dtoa_r+0x602>
   16cca:	4651      	mov	r1, sl
   16ccc:	4628      	mov	r0, r5
   16cce:	f7fb fc93 	bl	125f8 <__mcmp>
   16cd2:	2800      	cmp	r0, #0
   16cd4:	f6bf aeba 	bge.w	16a4c <_dtoa_r+0x5ac>
   16cd8:	4629      	mov	r1, r5
   16cda:	2300      	movs	r3, #0
   16cdc:	220a      	movs	r2, #10
   16cde:	4620      	mov	r0, r4
   16ce0:	f7fb f9dc 	bl	1209c <__multadd>
   16ce4:	9b04      	ldr	r3, [sp, #16]
   16ce6:	1e5f      	subs	r7, r3, #1
   16ce8:	9b07      	ldr	r3, [sp, #28]
   16cea:	4605      	mov	r5, r0
   16cec:	2b00      	cmp	r3, #0
   16cee:	f47f af4b 	bne.w	16b88 <_dtoa_r+0x6e8>
   16cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16cf4:	2b00      	cmp	r3, #0
   16cf6:	f340 8218 	ble.w	1712a <_dtoa_r+0xc8a>
   16cfa:	4699      	mov	r9, r3
   16cfc:	e6b1      	b.n	16a62 <_dtoa_r+0x5c2>
   16cfe:	4bbc      	ldr	r3, [pc, #752]	; (16ff0 <_dtoa_r+0xb50>)
   16d00:	9300      	str	r3, [sp, #0]
   16d02:	3303      	adds	r3, #3
   16d04:	e4a4      	b.n	16650 <_dtoa_r+0x1b0>
   16d06:	201c      	movs	r0, #28
   16d08:	e712      	b.n	16b30 <_dtoa_r+0x690>
   16d0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   16d0e:	2800      	cmp	r0, #0
   16d10:	f47f ae74 	bne.w	169fc <_dtoa_r+0x55c>
   16d14:	f3c1 0213 	ubfx	r2, r1, #0, #20
   16d18:	2a00      	cmp	r2, #0
   16d1a:	f000 80f4 	beq.w	16f06 <_dtoa_r+0xa66>
   16d1e:	9b02      	ldr	r3, [sp, #8]
   16d20:	9308      	str	r3, [sp, #32]
   16d22:	e66d      	b.n	16a00 <_dtoa_r+0x560>
   16d24:	2301      	movs	r3, #1
   16d26:	9307      	str	r3, [sp, #28]
   16d28:	9b04      	ldr	r3, [sp, #16]
   16d2a:	445b      	add	r3, fp
   16d2c:	f103 0901 	add.w	r9, r3, #1
   16d30:	f1b9 0f01 	cmp.w	r9, #1
   16d34:	46cc      	mov	ip, r9
   16d36:	930b      	str	r3, [sp, #44]	; 0x2c
   16d38:	bfb8      	it	lt
   16d3a:	f04f 0c01 	movlt.w	ip, #1
   16d3e:	2100      	movs	r1, #0
   16d40:	f1bc 0f17 	cmp.w	ip, #23
   16d44:	63e1      	str	r1, [r4, #60]	; 0x3c
   16d46:	f77f acbc 	ble.w	166c2 <_dtoa_r+0x222>
   16d4a:	2001      	movs	r0, #1
   16d4c:	2204      	movs	r2, #4
   16d4e:	0052      	lsls	r2, r2, #1
   16d50:	f102 0314 	add.w	r3, r2, #20
   16d54:	4563      	cmp	r3, ip
   16d56:	4601      	mov	r1, r0
   16d58:	f100 0001 	add.w	r0, r0, #1
   16d5c:	d9f7      	bls.n	16d4e <_dtoa_r+0x8ae>
   16d5e:	63e1      	str	r1, [r4, #60]	; 0x3c
   16d60:	e4af      	b.n	166c2 <_dtoa_r+0x222>
   16d62:	2301      	movs	r3, #1
   16d64:	9307      	str	r3, [sp, #28]
   16d66:	f1bb 0f00 	cmp.w	fp, #0
   16d6a:	dd52      	ble.n	16e12 <_dtoa_r+0x972>
   16d6c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   16d70:	46d9      	mov	r9, fp
   16d72:	46dc      	mov	ip, fp
   16d74:	e7e3      	b.n	16d3e <_dtoa_r+0x89e>
   16d76:	2300      	movs	r3, #0
   16d78:	9307      	str	r3, [sp, #28]
   16d7a:	e7d5      	b.n	16d28 <_dtoa_r+0x888>
   16d7c:	2300      	movs	r3, #0
   16d7e:	9307      	str	r3, [sp, #28]
   16d80:	e7f1      	b.n	16d66 <_dtoa_r+0x8c6>
   16d82:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   16d86:	9704      	str	r7, [sp, #16]
   16d88:	f1b9 0f00 	cmp.w	r9, #0
   16d8c:	f47f ada1 	bne.w	168d2 <_dtoa_r+0x432>
   16d90:	4651      	mov	r1, sl
   16d92:	464b      	mov	r3, r9
   16d94:	2205      	movs	r2, #5
   16d96:	4620      	mov	r0, r4
   16d98:	f7fb f980 	bl	1209c <__multadd>
   16d9c:	4601      	mov	r1, r0
   16d9e:	4682      	mov	sl, r0
   16da0:	4628      	mov	r0, r5
   16da2:	f7fb fc29 	bl	125f8 <__mcmp>
   16da6:	2800      	cmp	r0, #0
   16da8:	f77f ad93 	ble.w	168d2 <_dtoa_r+0x432>
   16dac:	9b04      	ldr	r3, [sp, #16]
   16dae:	f103 0b01 	add.w	fp, r3, #1
   16db2:	9b00      	ldr	r3, [sp, #0]
   16db4:	2231      	movs	r2, #49	; 0x31
   16db6:	4698      	mov	r8, r3
   16db8:	f803 2b01 	strb.w	r2, [r3], #1
   16dbc:	9300      	str	r3, [sp, #0]
   16dbe:	4651      	mov	r1, sl
   16dc0:	4620      	mov	r0, r4
   16dc2:	f7fb f961 	bl	12088 <_Bfree>
   16dc6:	f10b 0301 	add.w	r3, fp, #1
   16dca:	f8dd 9000 	ldr.w	r9, [sp]
   16dce:	9304      	str	r3, [sp, #16]
   16dd0:	f8cd 8000 	str.w	r8, [sp]
   16dd4:	2e00      	cmp	r6, #0
   16dd6:	f47f ae8f 	bne.w	16af8 <_dtoa_r+0x658>
   16dda:	e691      	b.n	16b00 <_dtoa_r+0x660>
   16ddc:	eba3 0a0a 	sub.w	sl, r3, sl
   16de0:	e5c5      	b.n	1696e <_dtoa_r+0x4ce>
   16de2:	4631      	mov	r1, r6
   16de4:	4652      	mov	r2, sl
   16de6:	4620      	mov	r0, r4
   16de8:	f7fb fb2e 	bl	12448 <__pow5mult>
   16dec:	462a      	mov	r2, r5
   16dee:	4601      	mov	r1, r0
   16df0:	4606      	mov	r6, r0
   16df2:	4620      	mov	r0, r4
   16df4:	f7fb fa7a 	bl	122ec <__multiply>
   16df8:	4629      	mov	r1, r5
   16dfa:	4605      	mov	r5, r0
   16dfc:	4620      	mov	r0, r4
   16dfe:	f7fb f943 	bl	12088 <_Bfree>
   16e02:	e5ea      	b.n	169da <_dtoa_r+0x53a>
   16e04:	2002      	movs	r0, #2
   16e06:	eeb0 5b48 	vmov.f64	d5, d8
   16e0a:	e481      	b.n	16710 <_dtoa_r+0x270>
   16e0c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   16e10:	e68e      	b.n	16b30 <_dtoa_r+0x690>
   16e12:	f04f 0b01 	mov.w	fp, #1
   16e16:	46d9      	mov	r9, fp
   16e18:	e44f      	b.n	166ba <_dtoa_r+0x21a>
   16e1a:	d103      	bne.n	16e24 <_dtoa_r+0x984>
   16e1c:	9b01      	ldr	r3, [sp, #4]
   16e1e:	07db      	lsls	r3, r3, #31
   16e20:	f53f ae4c 	bmi.w	16abc <_dtoa_r+0x61c>
   16e24:	46d9      	mov	r9, fp
   16e26:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   16e2a:	2b30      	cmp	r3, #48	; 0x30
   16e2c:	d0fa      	beq.n	16e24 <_dtoa_r+0x984>
   16e2e:	e657      	b.n	16ae0 <_dtoa_r+0x640>
   16e30:	9b04      	ldr	r3, [sp, #16]
   16e32:	9a00      	ldr	r2, [sp, #0]
   16e34:	3301      	adds	r3, #1
   16e36:	9304      	str	r3, [sp, #16]
   16e38:	2331      	movs	r3, #49	; 0x31
   16e3a:	7013      	strb	r3, [r2, #0]
   16e3c:	e650      	b.n	16ae0 <_dtoa_r+0x640>
   16e3e:	f1ba 0f00 	cmp.w	sl, #0
   16e42:	f000 8123 	beq.w	1708c <_dtoa_r+0xbec>
   16e46:	f202 4233 	addw	r2, r2, #1075	; 0x433
   16e4a:	9b06      	ldr	r3, [sp, #24]
   16e4c:	9309      	str	r3, [sp, #36]	; 0x24
   16e4e:	4413      	add	r3, r2
   16e50:	f8dd a020 	ldr.w	sl, [sp, #32]
   16e54:	9306      	str	r3, [sp, #24]
   16e56:	4490      	add	r8, r2
   16e58:	e592      	b.n	16980 <_dtoa_r+0x4e0>
   16e5a:	ee07 0a90 	vmov	s15, r0
   16e5e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   16e62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   16e66:	eea6 5b07 	vfma.f64	d5, d6, d7
   16e6a:	ee15 2a90 	vmov	r2, s11
   16e6e:	ec51 0b15 	vmov	r0, r1, d5
   16e72:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   16e76:	ec41 0b15 	vmov	d5, r0, r1
   16e7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   16e7e:	ee36 7b47 	vsub.f64	d7, d6, d7
   16e82:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e8a:	f300 8137 	bgt.w	170fc <_dtoa_r+0xc5c>
   16e8e:	eeb1 5b45 	vneg.f64	d5, d5
   16e92:	eeb4 7bc5 	vcmpe.f64	d7, d5
   16e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16e9a:	f57f acfb 	bpl.w	16894 <_dtoa_r+0x3f4>
   16e9e:	f04f 0a00 	mov.w	sl, #0
   16ea2:	4656      	mov	r6, sl
   16ea4:	e515      	b.n	168d2 <_dtoa_r+0x432>
   16ea6:	f000 80f5 	beq.w	17094 <_dtoa_r+0xbf4>
   16eaa:	9b04      	ldr	r3, [sp, #16]
   16eac:	4951      	ldr	r1, [pc, #324]	; (16ff4 <_dtoa_r+0xb54>)
   16eae:	425a      	negs	r2, r3
   16eb0:	f002 000f 	and.w	r0, r2, #15
   16eb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   16eb8:	ed91 6b00 	vldr	d6, [r1]
   16ebc:	1112      	asrs	r2, r2, #4
   16ebe:	ee28 6b06 	vmul.f64	d6, d8, d6
   16ec2:	f000 8142 	beq.w	1714a <_dtoa_r+0xcaa>
   16ec6:	eeb0 7b46 	vmov.f64	d7, d6
   16eca:	494b      	ldr	r1, [pc, #300]	; (16ff8 <_dtoa_r+0xb58>)
   16ecc:	2600      	movs	r6, #0
   16ece:	2002      	movs	r0, #2
   16ed0:	07d3      	lsls	r3, r2, #31
   16ed2:	d505      	bpl.n	16ee0 <_dtoa_r+0xa40>
   16ed4:	ed91 5b00 	vldr	d5, [r1]
   16ed8:	3001      	adds	r0, #1
   16eda:	2601      	movs	r6, #1
   16edc:	ee27 7b05 	vmul.f64	d7, d7, d5
   16ee0:	1052      	asrs	r2, r2, #1
   16ee2:	f101 0108 	add.w	r1, r1, #8
   16ee6:	d1f3      	bne.n	16ed0 <_dtoa_r+0xa30>
   16ee8:	2e00      	cmp	r6, #0
   16eea:	fe06 6b07 	vseleq.f64	d6, d6, d7
   16eee:	e41e      	b.n	1672e <_dtoa_r+0x28e>
   16ef0:	9b02      	ldr	r3, [sp, #8]
   16ef2:	2b00      	cmp	r3, #0
   16ef4:	f47f ae37 	bne.w	16b66 <_dtoa_r+0x6c6>
   16ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   16efc:	f3c1 0213 	ubfx	r2, r1, #0, #20
   16f00:	2a00      	cmp	r2, #0
   16f02:	f040 8137 	bne.w	17174 <_dtoa_r+0xcd4>
   16f06:	4a3d      	ldr	r2, [pc, #244]	; (16ffc <_dtoa_r+0xb5c>)
   16f08:	400a      	ands	r2, r1
   16f0a:	2a00      	cmp	r2, #0
   16f0c:	f000 80fa 	beq.w	17104 <_dtoa_r+0xc64>
   16f10:	9b06      	ldr	r3, [sp, #24]
   16f12:	3301      	adds	r3, #1
   16f14:	9306      	str	r3, [sp, #24]
   16f16:	2301      	movs	r3, #1
   16f18:	f108 0801 	add.w	r8, r8, #1
   16f1c:	9308      	str	r3, [sp, #32]
   16f1e:	e56f      	b.n	16a00 <_dtoa_r+0x560>
   16f20:	4629      	mov	r1, r5
   16f22:	9a08      	ldr	r2, [sp, #32]
   16f24:	4620      	mov	r0, r4
   16f26:	f7fb fa8f 	bl	12448 <__pow5mult>
   16f2a:	4605      	mov	r5, r0
   16f2c:	e55a      	b.n	169e4 <_dtoa_r+0x544>
   16f2e:	2a00      	cmp	r2, #0
   16f30:	dd12      	ble.n	16f58 <_dtoa_r+0xab8>
   16f32:	4629      	mov	r1, r5
   16f34:	2201      	movs	r2, #1
   16f36:	4620      	mov	r0, r4
   16f38:	9301      	str	r3, [sp, #4]
   16f3a:	f7fb fae5 	bl	12508 <__lshift>
   16f3e:	4651      	mov	r1, sl
   16f40:	4605      	mov	r5, r0
   16f42:	f7fb fb59 	bl	125f8 <__mcmp>
   16f46:	2800      	cmp	r0, #0
   16f48:	9b01      	ldr	r3, [sp, #4]
   16f4a:	f340 80e1 	ble.w	17110 <_dtoa_r+0xc70>
   16f4e:	2b39      	cmp	r3, #57	; 0x39
   16f50:	f000 80ca 	beq.w	170e8 <_dtoa_r+0xc48>
   16f54:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   16f58:	46b9      	mov	r9, r7
   16f5a:	f809 3b01 	strb.w	r3, [r9], #1
   16f5e:	9b04      	ldr	r3, [sp, #16]
   16f60:	3301      	adds	r3, #1
   16f62:	4637      	mov	r7, r6
   16f64:	9304      	str	r3, [sp, #16]
   16f66:	4646      	mov	r6, r8
   16f68:	e5ba      	b.n	16ae0 <_dtoa_r+0x640>
   16f6a:	ee38 8b08 	vadd.f64	d8, d8, d8
   16f6e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   16f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f76:	dc0a      	bgt.n	16f8e <_dtoa_r+0xaee>
   16f78:	eeb4 8b46 	vcmp.f64	d8, d6
   16f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f80:	f47f acdc 	bne.w	1693c <_dtoa_r+0x49c>
   16f84:	ee17 3a10 	vmov	r3, s14
   16f88:	07d8      	lsls	r0, r3, #31
   16f8a:	f57f acd7 	bpl.w	1693c <_dtoa_r+0x49c>
   16f8e:	9a00      	ldr	r2, [sp, #0]
   16f90:	e454      	b.n	1683c <_dtoa_r+0x39c>
   16f92:	6871      	ldr	r1, [r6, #4]
   16f94:	4620      	mov	r0, r4
   16f96:	f7fb f851 	bl	1203c <_Balloc>
   16f9a:	4607      	mov	r7, r0
   16f9c:	2800      	cmp	r0, #0
   16f9e:	f000 80de 	beq.w	1715e <_dtoa_r+0xcbe>
   16fa2:	6933      	ldr	r3, [r6, #16]
   16fa4:	3302      	adds	r3, #2
   16fa6:	009a      	lsls	r2, r3, #2
   16fa8:	f106 010c 	add.w	r1, r6, #12
   16fac:	300c      	adds	r0, #12
   16fae:	f7f5 fd91 	bl	cad4 <memcpy>
   16fb2:	4639      	mov	r1, r7
   16fb4:	2201      	movs	r2, #1
   16fb6:	4620      	mov	r0, r4
   16fb8:	f7fb faa6 	bl	12508 <__lshift>
   16fbc:	4680      	mov	r8, r0
   16fbe:	e5fe      	b.n	16bbe <_dtoa_r+0x71e>
   16fc0:	9b06      	ldr	r3, [sp, #24]
   16fc2:	eba3 0309 	sub.w	r3, r3, r9
   16fc6:	9309      	str	r3, [sp, #36]	; 0x24
   16fc8:	e4da      	b.n	16980 <_dtoa_r+0x4e0>
   16fca:	2b39      	cmp	r3, #57	; 0x39
   16fcc:	f000 808c 	beq.w	170e8 <_dtoa_r+0xc48>
   16fd0:	46b9      	mov	r9, r7
   16fd2:	3301      	adds	r3, #1
   16fd4:	e7c1      	b.n	16f5a <_dtoa_r+0xaba>
   16fd6:	9a04      	ldr	r2, [sp, #16]
   16fd8:	3201      	adds	r2, #1
   16fda:	4637      	mov	r7, r6
   16fdc:	9204      	str	r2, [sp, #16]
   16fde:	4646      	mov	r6, r8
   16fe0:	e55f      	b.n	16aa2 <_dtoa_r+0x602>
   16fe2:	4629      	mov	r1, r5
   16fe4:	4620      	mov	r0, r4
   16fe6:	f7fb fa2f 	bl	12448 <__pow5mult>
   16fea:	4605      	mov	r5, r0
   16fec:	e4fa      	b.n	169e4 <_dtoa_r+0x544>
   16fee:	bf00      	nop
   16ff0:	2000102c 	.word	0x2000102c
   16ff4:	20000328 	.word	0x20000328
   16ff8:	20000300 	.word	0x20000300
   16ffc:	7ff00000 	.word	0x7ff00000
   17000:	4b5e      	ldr	r3, [pc, #376]	; (1717c <_dtoa_r+0xcdc>)
   17002:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   17006:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1700a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1700e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   17012:	ee36 7b47 	vsub.f64	d7, d6, d7
   17016:	ec41 0b16 	vmov	d6, r0, r1
   1701a:	ee15 1a90 	vmov	r1, s11
   1701e:	ee23 3b06 	vmul.f64	d3, d3, d6
   17022:	9800      	ldr	r0, [sp, #0]
   17024:	3130      	adds	r1, #48	; 0x30
   17026:	2a01      	cmp	r2, #1
   17028:	f800 1b01 	strb.w	r1, [r0], #1
   1702c:	f000 8083 	beq.w	17136 <_dtoa_r+0xc96>
   17030:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17034:	9b00      	ldr	r3, [sp, #0]
   17036:	1899      	adds	r1, r3, r2
   17038:	ee27 7b04 	vmul.f64	d7, d7, d4
   1703c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17040:	ee16 3a90 	vmov	r3, s13
   17044:	3330      	adds	r3, #48	; 0x30
   17046:	f800 3b01 	strb.w	r3, [r0], #1
   1704a:	4281      	cmp	r1, r0
   1704c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   17050:	ee37 7b45 	vsub.f64	d7, d7, d5
   17054:	d1f0      	bne.n	17038 <_dtoa_r+0xb98>
   17056:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1705a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1705e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   17062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17066:	f53f abe3 	bmi.w	16830 <_dtoa_r+0x390>
   1706a:	ee36 6b43 	vsub.f64	d6, d6, d3
   1706e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   17072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17076:	f77f ac0d 	ble.w	16894 <_dtoa_r+0x3f4>
   1707a:	4689      	mov	r9, r1
   1707c:	3901      	subs	r1, #1
   1707e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   17082:	2b30      	cmp	r3, #48	; 0x30
   17084:	d0f9      	beq.n	1707a <_dtoa_r+0xbda>
   17086:	1c73      	adds	r3, r6, #1
   17088:	9304      	str	r3, [sp, #16]
   1708a:	e539      	b.n	16b00 <_dtoa_r+0x660>
   1708c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1708e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   17092:	e6da      	b.n	16e4a <_dtoa_r+0x9aa>
   17094:	2002      	movs	r0, #2
   17096:	eeb0 6b48 	vmov.f64	d6, d8
   1709a:	f7ff bb48 	b.w	1672e <_dtoa_r+0x28e>
   1709e:	f1b9 0f00 	cmp.w	r9, #0
   170a2:	f43f aeda 	beq.w	16e5a <_dtoa_r+0x9ba>
   170a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   170a8:	2a00      	cmp	r2, #0
   170aa:	f77f abf3 	ble.w	16894 <_dtoa_r+0x3f4>
   170ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   170b2:	ee26 6b04 	vmul.f64	d6, d6, d4
   170b6:	3001      	adds	r0, #1
   170b8:	ee07 0a90 	vmov	s15, r0
   170bc:	9b04      	ldr	r3, [sp, #16]
   170be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   170c2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   170c6:	eea6 7b05 	vfma.f64	d7, d6, d5
   170ca:	ee17 ca90 	vmov	ip, s15
   170ce:	ec51 0b17 	vmov	r0, r1, d7
   170d2:	1e5e      	subs	r6, r3, #1
   170d4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   170d8:	f7ff bb47 	b.w	1676a <_dtoa_r+0x2ca>
   170dc:	9b04      	ldr	r3, [sp, #16]
   170de:	3301      	adds	r3, #1
   170e0:	9304      	str	r3, [sp, #16]
   170e2:	2331      	movs	r3, #49	; 0x31
   170e4:	f7ff bbb1 	b.w	1684a <_dtoa_r+0x3aa>
   170e8:	9b04      	ldr	r3, [sp, #16]
   170ea:	46bb      	mov	fp, r7
   170ec:	3301      	adds	r3, #1
   170ee:	9304      	str	r3, [sp, #16]
   170f0:	2339      	movs	r3, #57	; 0x39
   170f2:	4637      	mov	r7, r6
   170f4:	f80b 3b01 	strb.w	r3, [fp], #1
   170f8:	4646      	mov	r6, r8
   170fa:	e4e1      	b.n	16ac0 <_dtoa_r+0x620>
   170fc:	f04f 0a00 	mov.w	sl, #0
   17100:	4656      	mov	r6, sl
   17102:	e653      	b.n	16dac <_dtoa_r+0x90c>
   17104:	9208      	str	r2, [sp, #32]
   17106:	e47b      	b.n	16a00 <_dtoa_r+0x560>
   17108:	1c73      	adds	r3, r6, #1
   1710a:	9304      	str	r3, [sp, #16]
   1710c:	4689      	mov	r9, r1
   1710e:	e4f7      	b.n	16b00 <_dtoa_r+0x660>
   17110:	f47f af22 	bne.w	16f58 <_dtoa_r+0xab8>
   17114:	07da      	lsls	r2, r3, #31
   17116:	f57f af1f 	bpl.w	16f58 <_dtoa_r+0xab8>
   1711a:	e718      	b.n	16f4e <_dtoa_r+0xaae>
   1711c:	2b39      	cmp	r3, #57	; 0x39
   1711e:	d0e3      	beq.n	170e8 <_dtoa_r+0xc48>
   17120:	f1b9 0f00 	cmp.w	r9, #0
   17124:	f73f af16 	bgt.w	16f54 <_dtoa_r+0xab4>
   17128:	e716      	b.n	16f58 <_dtoa_r+0xab8>
   1712a:	9b01      	ldr	r3, [sp, #4]
   1712c:	2b02      	cmp	r3, #2
   1712e:	f73f ae28 	bgt.w	16d82 <_dtoa_r+0x8e2>
   17132:	9704      	str	r7, [sp, #16]
   17134:	e5ba      	b.n	16cac <_dtoa_r+0x80c>
   17136:	4601      	mov	r1, r0
   17138:	e78d      	b.n	17056 <_dtoa_r+0xbb6>
   1713a:	9b01      	ldr	r3, [sp, #4]
   1713c:	2b02      	cmp	r3, #2
   1713e:	f73f ae20 	bgt.w	16d82 <_dtoa_r+0x8e2>
   17142:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   17146:	9704      	str	r7, [sp, #16]
   17148:	e52b      	b.n	16ba2 <_dtoa_r+0x702>
   1714a:	2002      	movs	r0, #2
   1714c:	f7ff baef 	b.w	1672e <_dtoa_r+0x28e>
   17150:	4b0b      	ldr	r3, [pc, #44]	; (17180 <_dtoa_r+0xce0>)
   17152:	480c      	ldr	r0, [pc, #48]	; (17184 <_dtoa_r+0xce4>)
   17154:	2200      	movs	r2, #0
   17156:	f240 11af 	movw	r1, #431	; 0x1af
   1715a:	f7ff f8b1 	bl	162c0 <__assert_func>
   1715e:	4b08      	ldr	r3, [pc, #32]	; (17180 <_dtoa_r+0xce0>)
   17160:	4808      	ldr	r0, [pc, #32]	; (17184 <_dtoa_r+0xce4>)
   17162:	463a      	mov	r2, r7
   17164:	f240 21ef 	movw	r1, #751	; 0x2ef
   17168:	f7ff f8aa 	bl	162c0 <__assert_func>
   1716c:	4b06      	ldr	r3, [pc, #24]	; (17188 <_dtoa_r+0xce8>)
   1716e:	9300      	str	r3, [sp, #0]
   17170:	f7ff b9d2 	b.w	16518 <_dtoa_r+0x78>
   17174:	9b02      	ldr	r3, [sp, #8]
   17176:	9308      	str	r3, [sp, #32]
   17178:	e4f7      	b.n	16b6a <_dtoa_r+0x6ca>
   1717a:	bf00      	nop
   1717c:	20000328 	.word	0x20000328
   17180:	20000d40 	.word	0x20000d40
   17184:	20001030 	.word	0x20001030
   17188:	20001020 	.word	0x20001020

0001718c <_strtoul_l.constprop.0>:
   1718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17190:	4607      	mov	r7, r0
   17192:	484c      	ldr	r0, [pc, #304]	; (172c4 <_strtoul_l.constprop.0+0x138>)
   17194:	460e      	mov	r6, r1
   17196:	4635      	mov	r5, r6
   17198:	f816 eb01 	ldrb.w	lr, [r6], #1
   1719c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   171a0:	f01c 0c08 	ands.w	ip, ip, #8
   171a4:	d1f7      	bne.n	17196 <_strtoul_l.constprop.0+0xa>
   171a6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   171aa:	d05a      	beq.n	17262 <_strtoul_l.constprop.0+0xd6>
   171ac:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   171b0:	bf03      	ittte	eq
   171b2:	f896 e000 	ldrbeq.w	lr, [r6]
   171b6:	4664      	moveq	r4, ip
   171b8:	1cae      	addeq	r6, r5, #2
   171ba:	4664      	movne	r4, ip
   171bc:	b15b      	cbz	r3, 171d6 <_strtoul_l.constprop.0+0x4a>
   171be:	2b10      	cmp	r3, #16
   171c0:	d054      	beq.n	1726c <_strtoul_l.constprop.0+0xe0>
   171c2:	f04f 38ff 	mov.w	r8, #4294967295
   171c6:	fbb8 f8f3 	udiv	r8, r8, r3
   171ca:	fb03 fa08 	mul.w	sl, r3, r8
   171ce:	ea6f 0a0a 	mvn.w	sl, sl
   171d2:	4699      	mov	r9, r3
   171d4:	e008      	b.n	171e8 <_strtoul_l.constprop.0+0x5c>
   171d6:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   171da:	d05a      	beq.n	17292 <_strtoul_l.constprop.0+0x106>
   171dc:	230a      	movs	r3, #10
   171de:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 172c8 <_strtoul_l.constprop.0+0x13c>
   171e2:	f04f 0a05 	mov.w	sl, #5
   171e6:	4699      	mov	r9, r3
   171e8:	2500      	movs	r5, #0
   171ea:	4628      	mov	r0, r5
   171ec:	e005      	b.n	171fa <_strtoul_l.constprop.0+0x6e>
   171ee:	d02c      	beq.n	1724a <_strtoul_l.constprop.0+0xbe>
   171f0:	fb09 c000 	mla	r0, r9, r0, ip
   171f4:	2501      	movs	r5, #1
   171f6:	f816 eb01 	ldrb.w	lr, [r6], #1
   171fa:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   171fe:	f1bc 0f09 	cmp.w	ip, #9
   17202:	d906      	bls.n	17212 <_strtoul_l.constprop.0+0x86>
   17204:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   17208:	f1bc 0f19 	cmp.w	ip, #25
   1720c:	d80b      	bhi.n	17226 <_strtoul_l.constprop.0+0x9a>
   1720e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   17212:	4563      	cmp	r3, ip
   17214:	dd10      	ble.n	17238 <_strtoul_l.constprop.0+0xac>
   17216:	f1b5 3fff 	cmp.w	r5, #4294967295
   1721a:	d0ec      	beq.n	171f6 <_strtoul_l.constprop.0+0x6a>
   1721c:	4540      	cmp	r0, r8
   1721e:	d9e6      	bls.n	171ee <_strtoul_l.constprop.0+0x62>
   17220:	f04f 35ff 	mov.w	r5, #4294967295
   17224:	e7e7      	b.n	171f6 <_strtoul_l.constprop.0+0x6a>
   17226:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   1722a:	f1bc 0f19 	cmp.w	ip, #25
   1722e:	d803      	bhi.n	17238 <_strtoul_l.constprop.0+0xac>
   17230:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   17234:	4563      	cmp	r3, ip
   17236:	dcee      	bgt.n	17216 <_strtoul_l.constprop.0+0x8a>
   17238:	1c6b      	adds	r3, r5, #1
   1723a:	d00b      	beq.n	17254 <_strtoul_l.constprop.0+0xc8>
   1723c:	b104      	cbz	r4, 17240 <_strtoul_l.constprop.0+0xb4>
   1723e:	4240      	negs	r0, r0
   17240:	b10a      	cbz	r2, 17246 <_strtoul_l.constprop.0+0xba>
   17242:	b965      	cbnz	r5, 1725e <_strtoul_l.constprop.0+0xd2>
   17244:	6011      	str	r1, [r2, #0]
   17246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1724a:	45d4      	cmp	ip, sl
   1724c:	ddd0      	ble.n	171f0 <_strtoul_l.constprop.0+0x64>
   1724e:	f04f 35ff 	mov.w	r5, #4294967295
   17252:	e7d0      	b.n	171f6 <_strtoul_l.constprop.0+0x6a>
   17254:	2322      	movs	r3, #34	; 0x22
   17256:	603b      	str	r3, [r7, #0]
   17258:	4628      	mov	r0, r5
   1725a:	2a00      	cmp	r2, #0
   1725c:	d0f3      	beq.n	17246 <_strtoul_l.constprop.0+0xba>
   1725e:	1e71      	subs	r1, r6, #1
   17260:	e7f0      	b.n	17244 <_strtoul_l.constprop.0+0xb8>
   17262:	f896 e000 	ldrb.w	lr, [r6]
   17266:	2401      	movs	r4, #1
   17268:	1cae      	adds	r6, r5, #2
   1726a:	e7a7      	b.n	171bc <_strtoul_l.constprop.0+0x30>
   1726c:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   17270:	d121      	bne.n	172b6 <_strtoul_l.constprop.0+0x12a>
   17272:	7830      	ldrb	r0, [r6, #0]
   17274:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   17278:	2858      	cmp	r0, #88	; 0x58
   1727a:	d116      	bne.n	172aa <_strtoul_l.constprop.0+0x11e>
   1727c:	f04f 0910 	mov.w	r9, #16
   17280:	f896 e001 	ldrb.w	lr, [r6, #1]
   17284:	f04f 0a0f 	mov.w	sl, #15
   17288:	3602      	adds	r6, #2
   1728a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1728e:	464b      	mov	r3, r9
   17290:	e7aa      	b.n	171e8 <_strtoul_l.constprop.0+0x5c>
   17292:	7833      	ldrb	r3, [r6, #0]
   17294:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17298:	2b58      	cmp	r3, #88	; 0x58
   1729a:	d0ef      	beq.n	1727c <_strtoul_l.constprop.0+0xf0>
   1729c:	2308      	movs	r3, #8
   1729e:	f04f 0a07 	mov.w	sl, #7
   172a2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   172a6:	4699      	mov	r9, r3
   172a8:	e79e      	b.n	171e8 <_strtoul_l.constprop.0+0x5c>
   172aa:	4699      	mov	r9, r3
   172ac:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   172b0:	f04f 0a0f 	mov.w	sl, #15
   172b4:	e798      	b.n	171e8 <_strtoul_l.constprop.0+0x5c>
   172b6:	f04f 0a0f 	mov.w	sl, #15
   172ba:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   172be:	4699      	mov	r9, r3
   172c0:	e792      	b.n	171e8 <_strtoul_l.constprop.0+0x5c>
   172c2:	bf00      	nop
   172c4:	20000f1d 	.word	0x20000f1d
   172c8:	19999999 	.word	0x19999999

000172cc <_strtoul_r>:
   172cc:	f7ff bf5e 	b.w	1718c <_strtoul_l.constprop.0>

000172d0 <_strtoll_l.constprop.0>:
   172d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d4:	b085      	sub	sp, #20
   172d6:	461f      	mov	r7, r3
   172d8:	4b57      	ldr	r3, [pc, #348]	; (17438 <_strtoll_l.constprop.0+0x168>)
   172da:	9003      	str	r0, [sp, #12]
   172dc:	468a      	mov	sl, r1
   172de:	9200      	str	r2, [sp, #0]
   172e0:	460d      	mov	r5, r1
   172e2:	462a      	mov	r2, r5
   172e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   172e8:	5d1e      	ldrb	r6, [r3, r4]
   172ea:	f016 0608 	ands.w	r6, r6, #8
   172ee:	d1f8      	bne.n	172e2 <_strtoll_l.constprop.0+0x12>
   172f0:	2c2d      	cmp	r4, #45	; 0x2d
   172f2:	d075      	beq.n	173e0 <_strtoll_l.constprop.0+0x110>
   172f4:	2c2b      	cmp	r4, #43	; 0x2b
   172f6:	bf05      	ittet	eq
   172f8:	782c      	ldrbeq	r4, [r5, #0]
   172fa:	9602      	streq	r6, [sp, #8]
   172fc:	9602      	strne	r6, [sp, #8]
   172fe:	1c95      	addeq	r5, r2, #2
   17300:	f04f 36ff 	mov.w	r6, #4294967295
   17304:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   17308:	b12f      	cbz	r7, 17316 <_strtoll_l.constprop.0+0x46>
   1730a:	2f10      	cmp	r7, #16
   1730c:	d06f      	beq.n	173ee <_strtoll_l.constprop.0+0x11e>
   1730e:	46b8      	mov	r8, r7
   17310:	ea4f 79e7 	mov.w	r9, r7, asr #31
   17314:	e005      	b.n	17322 <_strtoll_l.constprop.0+0x52>
   17316:	2c30      	cmp	r4, #48	; 0x30
   17318:	d074      	beq.n	17404 <_strtoll_l.constprop.0+0x134>
   1731a:	f04f 080a 	mov.w	r8, #10
   1731e:	46b9      	mov	r9, r7
   17320:	4647      	mov	r7, r8
   17322:	4642      	mov	r2, r8
   17324:	464b      	mov	r3, r9
   17326:	4630      	mov	r0, r6
   17328:	4659      	mov	r1, fp
   1732a:	f7f7 fb63 	bl	e9f4 <__aeabi_uldivmod>
   1732e:	2300      	movs	r3, #0
   17330:	9201      	str	r2, [sp, #4]
   17332:	4684      	mov	ip, r0
   17334:	460a      	mov	r2, r1
   17336:	4618      	mov	r0, r3
   17338:	4619      	mov	r1, r3
   1733a:	e011      	b.n	17360 <_strtoll_l.constprop.0+0x90>
   1733c:	428a      	cmp	r2, r1
   1733e:	bf08      	it	eq
   17340:	4584      	cmpeq	ip, r0
   17342:	d03d      	beq.n	173c0 <_strtoll_l.constprop.0+0xf0>
   17344:	fb00 f309 	mul.w	r3, r0, r9
   17348:	fb08 3301 	mla	r3, r8, r1, r3
   1734c:	fba0 0108 	umull	r0, r1, r0, r8
   17350:	440b      	add	r3, r1
   17352:	eb1e 0000 	adds.w	r0, lr, r0
   17356:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   1735a:	2301      	movs	r3, #1
   1735c:	f815 4b01 	ldrb.w	r4, [r5], #1
   17360:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   17364:	f1be 0f09 	cmp.w	lr, #9
   17368:	d906      	bls.n	17378 <_strtoll_l.constprop.0+0xa8>
   1736a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   1736e:	f1be 0f19 	cmp.w	lr, #25
   17372:	d80c      	bhi.n	1738e <_strtoll_l.constprop.0+0xbe>
   17374:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   17378:	4577      	cmp	r7, lr
   1737a:	dd11      	ble.n	173a0 <_strtoll_l.constprop.0+0xd0>
   1737c:	1c5c      	adds	r4, r3, #1
   1737e:	d0ed      	beq.n	1735c <_strtoll_l.constprop.0+0x8c>
   17380:	4584      	cmp	ip, r0
   17382:	eb72 0301 	sbcs.w	r3, r2, r1
   17386:	d2d9      	bcs.n	1733c <_strtoll_l.constprop.0+0x6c>
   17388:	f04f 33ff 	mov.w	r3, #4294967295
   1738c:	e7e6      	b.n	1735c <_strtoll_l.constprop.0+0x8c>
   1738e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   17392:	f1be 0f19 	cmp.w	lr, #25
   17396:	d803      	bhi.n	173a0 <_strtoll_l.constprop.0+0xd0>
   17398:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   1739c:	4577      	cmp	r7, lr
   1739e:	dced      	bgt.n	1737c <_strtoll_l.constprop.0+0xac>
   173a0:	1c5a      	adds	r2, r3, #1
   173a2:	d013      	beq.n	173cc <_strtoll_l.constprop.0+0xfc>
   173a4:	9a02      	ldr	r2, [sp, #8]
   173a6:	b112      	cbz	r2, 173ae <_strtoll_l.constprop.0+0xde>
   173a8:	4240      	negs	r0, r0
   173aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   173ae:	9a00      	ldr	r2, [sp, #0]
   173b0:	b11a      	cbz	r2, 173ba <_strtoll_l.constprop.0+0xea>
   173b2:	bba3      	cbnz	r3, 1741e <_strtoll_l.constprop.0+0x14e>
   173b4:	9b00      	ldr	r3, [sp, #0]
   173b6:	f8c3 a000 	str.w	sl, [r3]
   173ba:	b005      	add	sp, #20
   173bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c0:	9b01      	ldr	r3, [sp, #4]
   173c2:	4573      	cmp	r3, lr
   173c4:	dabe      	bge.n	17344 <_strtoll_l.constprop.0+0x74>
   173c6:	f04f 33ff 	mov.w	r3, #4294967295
   173ca:	e7c7      	b.n	1735c <_strtoll_l.constprop.0+0x8c>
   173cc:	9a03      	ldr	r2, [sp, #12]
   173ce:	2322      	movs	r3, #34	; 0x22
   173d0:	6013      	str	r3, [r2, #0]
   173d2:	9b00      	ldr	r3, [sp, #0]
   173d4:	b333      	cbz	r3, 17424 <_strtoll_l.constprop.0+0x154>
   173d6:	f105 3aff 	add.w	sl, r5, #4294967295
   173da:	4630      	mov	r0, r6
   173dc:	4659      	mov	r1, fp
   173de:	e7e9      	b.n	173b4 <_strtoll_l.constprop.0+0xe4>
   173e0:	2301      	movs	r3, #1
   173e2:	782c      	ldrb	r4, [r5, #0]
   173e4:	9302      	str	r3, [sp, #8]
   173e6:	1c95      	adds	r5, r2, #2
   173e8:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   173ec:	e78c      	b.n	17308 <_strtoll_l.constprop.0+0x38>
   173ee:	2c30      	cmp	r4, #48	; 0x30
   173f0:	d104      	bne.n	173fc <_strtoll_l.constprop.0+0x12c>
   173f2:	782b      	ldrb	r3, [r5, #0]
   173f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   173f8:	2b58      	cmp	r3, #88	; 0x58
   173fa:	d008      	beq.n	1740e <_strtoll_l.constprop.0+0x13e>
   173fc:	46b8      	mov	r8, r7
   173fe:	f04f 0900 	mov.w	r9, #0
   17402:	e78e      	b.n	17322 <_strtoll_l.constprop.0+0x52>
   17404:	782b      	ldrb	r3, [r5, #0]
   17406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1740a:	2b58      	cmp	r3, #88	; 0x58
   1740c:	d10f      	bne.n	1742e <_strtoll_l.constprop.0+0x15e>
   1740e:	f04f 0810 	mov.w	r8, #16
   17412:	786c      	ldrb	r4, [r5, #1]
   17414:	f04f 0900 	mov.w	r9, #0
   17418:	3502      	adds	r5, #2
   1741a:	4647      	mov	r7, r8
   1741c:	e781      	b.n	17322 <_strtoll_l.constprop.0+0x52>
   1741e:	4606      	mov	r6, r0
   17420:	468b      	mov	fp, r1
   17422:	e7d8      	b.n	173d6 <_strtoll_l.constprop.0+0x106>
   17424:	4630      	mov	r0, r6
   17426:	4659      	mov	r1, fp
   17428:	b005      	add	sp, #20
   1742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1742e:	f04f 0808 	mov.w	r8, #8
   17432:	46b9      	mov	r9, r7
   17434:	4647      	mov	r7, r8
   17436:	e774      	b.n	17322 <_strtoll_l.constprop.0+0x52>
   17438:	20000f1d 	.word	0x20000f1d

0001743c <_strtoll_r>:
   1743c:	f7ff bf48 	b.w	172d0 <_strtoll_l.constprop.0>

00017440 <_strtoull_l.constprop.0>:
   17440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17444:	b085      	sub	sp, #20
   17446:	468b      	mov	fp, r1
   17448:	9201      	str	r2, [sp, #4]
   1744a:	4a62      	ldr	r2, [pc, #392]	; (175d4 <_strtoull_l.constprop.0+0x194>)
   1744c:	9003      	str	r0, [sp, #12]
   1744e:	461e      	mov	r6, r3
   17450:	460d      	mov	r5, r1
   17452:	4629      	mov	r1, r5
   17454:	f815 4b01 	ldrb.w	r4, [r5], #1
   17458:	5d13      	ldrb	r3, [r2, r4]
   1745a:	f013 0308 	ands.w	r3, r3, #8
   1745e:	d1f8      	bne.n	17452 <_strtoull_l.constprop.0+0x12>
   17460:	2c2d      	cmp	r4, #45	; 0x2d
   17462:	f000 8082 	beq.w	1756a <_strtoull_l.constprop.0+0x12a>
   17466:	2c2b      	cmp	r4, #43	; 0x2b
   17468:	bf03      	ittte	eq
   1746a:	782c      	ldrbeq	r4, [r5, #0]
   1746c:	9302      	streq	r3, [sp, #8]
   1746e:	1c8d      	addeq	r5, r1, #2
   17470:	9302      	strne	r3, [sp, #8]
   17472:	b1be      	cbz	r6, 174a4 <_strtoull_l.constprop.0+0x64>
   17474:	2e10      	cmp	r6, #16
   17476:	d07d      	beq.n	17574 <_strtoull_l.constprop.0+0x134>
   17478:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   1747c:	4632      	mov	r2, r6
   1747e:	4653      	mov	r3, sl
   17480:	f04f 30ff 	mov.w	r0, #4294967295
   17484:	f04f 31ff 	mov.w	r1, #4294967295
   17488:	f7f7 fab4 	bl	e9f4 <__aeabi_uldivmod>
   1748c:	4632      	mov	r2, r6
   1748e:	4607      	mov	r7, r0
   17490:	4688      	mov	r8, r1
   17492:	4653      	mov	r3, sl
   17494:	f04f 30ff 	mov.w	r0, #4294967295
   17498:	f04f 31ff 	mov.w	r1, #4294967295
   1749c:	46b1      	mov	r9, r6
   1749e:	f7f7 faa9 	bl	e9f4 <__aeabi_uldivmod>
   174a2:	e00a      	b.n	174ba <_strtoull_l.constprop.0+0x7a>
   174a4:	2c30      	cmp	r4, #48	; 0x30
   174a6:	d079      	beq.n	1759c <_strtoull_l.constprop.0+0x15c>
   174a8:	f04f 090a 	mov.w	r9, #10
   174ac:	f8df 8128 	ldr.w	r8, [pc, #296]	; 175d8 <_strtoull_l.constprop.0+0x198>
   174b0:	46b2      	mov	sl, r6
   174b2:	2205      	movs	r2, #5
   174b4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   174b8:	464e      	mov	r6, r9
   174ba:	f04f 0c00 	mov.w	ip, #0
   174be:	4660      	mov	r0, ip
   174c0:	4661      	mov	r1, ip
   174c2:	e011      	b.n	174e8 <_strtoull_l.constprop.0+0xa8>
   174c4:	4541      	cmp	r1, r8
   174c6:	bf08      	it	eq
   174c8:	42b8      	cmpeq	r0, r7
   174ca:	d03e      	beq.n	1754a <_strtoull_l.constprop.0+0x10a>
   174cc:	fb00 f40a 	mul.w	r4, r0, sl
   174d0:	fb09 4101 	mla	r1, r9, r1, r4
   174d4:	fba0 0409 	umull	r0, r4, r0, r9
   174d8:	4421      	add	r1, r4
   174da:	1818      	adds	r0, r3, r0
   174dc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   174e0:	f04f 0c01 	mov.w	ip, #1
   174e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   174e8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   174ec:	2b09      	cmp	r3, #9
   174ee:	d905      	bls.n	174fc <_strtoull_l.constprop.0+0xbc>
   174f0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   174f4:	2b19      	cmp	r3, #25
   174f6:	d80d      	bhi.n	17514 <_strtoull_l.constprop.0+0xd4>
   174f8:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   174fc:	429e      	cmp	r6, r3
   174fe:	dd11      	ble.n	17524 <_strtoull_l.constprop.0+0xe4>
   17500:	f1bc 3fff 	cmp.w	ip, #4294967295
   17504:	d0ee      	beq.n	174e4 <_strtoull_l.constprop.0+0xa4>
   17506:	4287      	cmp	r7, r0
   17508:	eb78 0401 	sbcs.w	r4, r8, r1
   1750c:	d2da      	bcs.n	174c4 <_strtoull_l.constprop.0+0x84>
   1750e:	f04f 3cff 	mov.w	ip, #4294967295
   17512:	e7e7      	b.n	174e4 <_strtoull_l.constprop.0+0xa4>
   17514:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   17518:	2b19      	cmp	r3, #25
   1751a:	d803      	bhi.n	17524 <_strtoull_l.constprop.0+0xe4>
   1751c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   17520:	429e      	cmp	r6, r3
   17522:	dced      	bgt.n	17500 <_strtoull_l.constprop.0+0xc0>
   17524:	f1bc 3fff 	cmp.w	ip, #4294967295
   17528:	d014      	beq.n	17554 <_strtoull_l.constprop.0+0x114>
   1752a:	9b02      	ldr	r3, [sp, #8]
   1752c:	b113      	cbz	r3, 17534 <_strtoull_l.constprop.0+0xf4>
   1752e:	4240      	negs	r0, r0
   17530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   17534:	9b01      	ldr	r3, [sp, #4]
   17536:	b12b      	cbz	r3, 17544 <_strtoull_l.constprop.0+0x104>
   17538:	f1bc 0f00 	cmp.w	ip, #0
   1753c:	d112      	bne.n	17564 <_strtoull_l.constprop.0+0x124>
   1753e:	9b01      	ldr	r3, [sp, #4]
   17540:	f8c3 b000 	str.w	fp, [r3]
   17544:	b005      	add	sp, #20
   17546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1754a:	4293      	cmp	r3, r2
   1754c:	ddbe      	ble.n	174cc <_strtoull_l.constprop.0+0x8c>
   1754e:	f04f 3cff 	mov.w	ip, #4294967295
   17552:	e7c7      	b.n	174e4 <_strtoull_l.constprop.0+0xa4>
   17554:	9a03      	ldr	r2, [sp, #12]
   17556:	2322      	movs	r3, #34	; 0x22
   17558:	6013      	str	r3, [r2, #0]
   1755a:	9b01      	ldr	r3, [sp, #4]
   1755c:	4660      	mov	r0, ip
   1755e:	4661      	mov	r1, ip
   17560:	2b00      	cmp	r3, #0
   17562:	d0ef      	beq.n	17544 <_strtoull_l.constprop.0+0x104>
   17564:	f105 3bff 	add.w	fp, r5, #4294967295
   17568:	e7e9      	b.n	1753e <_strtoull_l.constprop.0+0xfe>
   1756a:	2301      	movs	r3, #1
   1756c:	782c      	ldrb	r4, [r5, #0]
   1756e:	9302      	str	r3, [sp, #8]
   17570:	1c8d      	adds	r5, r1, #2
   17572:	e77e      	b.n	17472 <_strtoull_l.constprop.0+0x32>
   17574:	2c30      	cmp	r4, #48	; 0x30
   17576:	d123      	bne.n	175c0 <_strtoull_l.constprop.0+0x180>
   17578:	782b      	ldrb	r3, [r5, #0]
   1757a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1757e:	2b58      	cmp	r3, #88	; 0x58
   17580:	d11b      	bne.n	175ba <_strtoull_l.constprop.0+0x17a>
   17582:	f04f 0910 	mov.w	r9, #16
   17586:	786c      	ldrb	r4, [r5, #1]
   17588:	220f      	movs	r2, #15
   1758a:	3502      	adds	r5, #2
   1758c:	f04f 37ff 	mov.w	r7, #4294967295
   17590:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   17594:	f04f 0a00 	mov.w	sl, #0
   17598:	464e      	mov	r6, r9
   1759a:	e78e      	b.n	174ba <_strtoull_l.constprop.0+0x7a>
   1759c:	782b      	ldrb	r3, [r5, #0]
   1759e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   175a2:	2b58      	cmp	r3, #88	; 0x58
   175a4:	d0ed      	beq.n	17582 <_strtoull_l.constprop.0+0x142>
   175a6:	f04f 0908 	mov.w	r9, #8
   175aa:	46b2      	mov	sl, r6
   175ac:	2207      	movs	r2, #7
   175ae:	f04f 37ff 	mov.w	r7, #4294967295
   175b2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   175b6:	464e      	mov	r6, r9
   175b8:	e77f      	b.n	174ba <_strtoull_l.constprop.0+0x7a>
   175ba:	f04f 0a00 	mov.w	sl, #0
   175be:	e75d      	b.n	1747c <_strtoull_l.constprop.0+0x3c>
   175c0:	220f      	movs	r2, #15
   175c2:	f04f 37ff 	mov.w	r7, #4294967295
   175c6:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   175ca:	46b1      	mov	r9, r6
   175cc:	f04f 0a00 	mov.w	sl, #0
   175d0:	e773      	b.n	174ba <_strtoull_l.constprop.0+0x7a>
   175d2:	bf00      	nop
   175d4:	20000f1d 	.word	0x20000f1d
   175d8:	19999999 	.word	0x19999999

000175dc <_strtoull_r>:
   175dc:	f7ff bf30 	b.w	17440 <_strtoull_l.constprop.0>

000175e0 <_mbrtowc_r>:
   175e0:	b570      	push	{r4, r5, r6, lr}
   175e2:	b082      	sub	sp, #8
   175e4:	4604      	mov	r4, r0
   175e6:	9d06      	ldr	r5, [sp, #24]
   175e8:	b155      	cbz	r5, 17600 <_mbrtowc_r+0x20>
   175ea:	b16a      	cbz	r2, 17608 <_mbrtowc_r+0x28>
   175ec:	480f      	ldr	r0, [pc, #60]	; (1762c <_mbrtowc_r+0x4c>)
   175ee:	9500      	str	r5, [sp, #0]
   175f0:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   175f4:	4620      	mov	r0, r4
   175f6:	47b0      	blx	r6
   175f8:	1c43      	adds	r3, r0, #1
   175fa:	d010      	beq.n	1761e <_mbrtowc_r+0x3e>
   175fc:	b002      	add	sp, #8
   175fe:	bd70      	pop	{r4, r5, r6, pc}
   17600:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   17604:	2a00      	cmp	r2, #0
   17606:	d1f1      	bne.n	175ec <_mbrtowc_r+0xc>
   17608:	4b08      	ldr	r3, [pc, #32]	; (1762c <_mbrtowc_r+0x4c>)
   1760a:	9500      	str	r5, [sp, #0]
   1760c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   17610:	4611      	mov	r1, r2
   17612:	2301      	movs	r3, #1
   17614:	4a06      	ldr	r2, [pc, #24]	; (17630 <_mbrtowc_r+0x50>)
   17616:	4620      	mov	r0, r4
   17618:	47b0      	blx	r6
   1761a:	1c43      	adds	r3, r0, #1
   1761c:	d1ee      	bne.n	175fc <_mbrtowc_r+0x1c>
   1761e:	2200      	movs	r2, #0
   17620:	238a      	movs	r3, #138	; 0x8a
   17622:	602a      	str	r2, [r5, #0]
   17624:	6023      	str	r3, [r4, #0]
   17626:	b002      	add	sp, #8
   17628:	bd70      	pop	{r4, r5, r6, pc}
   1762a:	bf00      	nop
   1762c:	20008a74 	.word	0x20008a74
   17630:	20000518 	.word	0x20000518

00017634 <_wcrtomb_r>:
   17634:	b570      	push	{r4, r5, r6, lr}
   17636:	4605      	mov	r5, r0
   17638:	b084      	sub	sp, #16
   1763a:	b15b      	cbz	r3, 17654 <_wcrtomb_r+0x20>
   1763c:	461c      	mov	r4, r3
   1763e:	b169      	cbz	r1, 1765c <_wcrtomb_r+0x28>
   17640:	4b0e      	ldr	r3, [pc, #56]	; (1767c <_wcrtomb_r+0x48>)
   17642:	4628      	mov	r0, r5
   17644:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   17648:	4623      	mov	r3, r4
   1764a:	47b0      	blx	r6
   1764c:	1c43      	adds	r3, r0, #1
   1764e:	d00f      	beq.n	17670 <_wcrtomb_r+0x3c>
   17650:	b004      	add	sp, #16
   17652:	bd70      	pop	{r4, r5, r6, pc}
   17654:	f500 7482 	add.w	r4, r0, #260	; 0x104
   17658:	2900      	cmp	r1, #0
   1765a:	d1f1      	bne.n	17640 <_wcrtomb_r+0xc>
   1765c:	4a07      	ldr	r2, [pc, #28]	; (1767c <_wcrtomb_r+0x48>)
   1765e:	4623      	mov	r3, r4
   17660:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   17664:	4628      	mov	r0, r5
   17666:	460a      	mov	r2, r1
   17668:	a901      	add	r1, sp, #4
   1766a:	47b0      	blx	r6
   1766c:	1c43      	adds	r3, r0, #1
   1766e:	d1ef      	bne.n	17650 <_wcrtomb_r+0x1c>
   17670:	2200      	movs	r2, #0
   17672:	238a      	movs	r3, #138	; 0x8a
   17674:	6022      	str	r2, [r4, #0]
   17676:	602b      	str	r3, [r5, #0]
   17678:	b004      	add	sp, #16
   1767a:	bd70      	pop	{r4, r5, r6, pc}
   1767c:	20008a74 	.word	0x20008a74

00017680 <_wcsrtombs_r>:
   17680:	b510      	push	{r4, lr}
   17682:	b082      	sub	sp, #8
   17684:	9c04      	ldr	r4, [sp, #16]
   17686:	e9cd 3400 	strd	r3, r4, [sp]
   1768a:	f04f 33ff 	mov.w	r3, #4294967295
   1768e:	f001 fd9f 	bl	191d0 <_wcsnrtombs_r>
   17692:	b002      	add	sp, #8
   17694:	bd10      	pop	{r4, pc}
   17696:	bf00      	nop

00017698 <iswspace>:
   17698:	2100      	movs	r1, #0
   1769a:	f000 b801 	b.w	176a0 <iswspace_l>
   1769e:	bf00      	nop

000176a0 <iswspace_l>:
   176a0:	b510      	push	{r4, lr}
   176a2:	f000 f8ab 	bl	177fc <_jp2uc_l>
   176a6:	4604      	mov	r4, r0
   176a8:	f001 fda4 	bl	191f4 <category>
   176ac:	f1a0 031a 	sub.w	r3, r0, #26
   176b0:	b2db      	uxtb	r3, r3
   176b2:	2b02      	cmp	r3, #2
   176b4:	d906      	bls.n	176c4 <iswspace_l+0x24>
   176b6:	f1a4 0009 	sub.w	r0, r4, #9
   176ba:	2804      	cmp	r0, #4
   176bc:	bf8c      	ite	hi
   176be:	2000      	movhi	r0, #0
   176c0:	2001      	movls	r0, #1
   176c2:	bd10      	pop	{r4, pc}
   176c4:	2001      	movs	r0, #1
   176c6:	bd10      	pop	{r4, pc}

000176c8 <__jp2uc>:
   176c8:	2902      	cmp	r1, #2
   176ca:	d032      	beq.n	17732 <__jp2uc+0x6a>
   176cc:	2903      	cmp	r1, #3
   176ce:	f3c0 2307 	ubfx	r3, r0, #8, #8
   176d2:	bf1d      	ittte	ne
   176d4:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   176d8:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   176dc:	b2d2      	uxtbne	r2, r2
   176de:	b2c2      	uxtbeq	r2, r0
   176e0:	f103 0150 	add.w	r1, r3, #80	; 0x50
   176e4:	b2c9      	uxtb	r1, r1
   176e6:	291f      	cmp	r1, #31
   176e8:	d806      	bhi.n	176f8 <__jp2uc+0x30>
   176ea:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   176ee:	4288      	cmp	r0, r1
   176f0:	d969      	bls.n	177c6 <__jp2uc+0xfe>
   176f2:	f04f 30ff 	mov.w	r0, #4294967295
   176f6:	4770      	bx	lr
   176f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   176fc:	b2c9      	uxtb	r1, r1
   176fe:	2924      	cmp	r1, #36	; 0x24
   17700:	d80e      	bhi.n	17720 <__jp2uc+0x58>
   17702:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   17706:	4288      	cmp	r0, r1
   17708:	d8f3      	bhi.n	176f2 <__jp2uc+0x2a>
   1770a:	3bd0      	subs	r3, #208	; 0xd0
   1770c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   17710:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17714:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   17718:	4a30      	ldr	r2, [pc, #192]	; (177dc <__jp2uc+0x114>)
   1771a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1771e:	4770      	bx	lr
   17720:	3ba1      	subs	r3, #161	; 0xa1
   17722:	2b07      	cmp	r3, #7
   17724:	d8e5      	bhi.n	176f2 <__jp2uc+0x2a>
   17726:	e8df f003 	tbb	[pc, r3]
   1772a:	3e48      	.short	0x3e48
   1772c:	25292e34 	.word	0x25292e34
   17730:	1921      	.short	0x1921
   17732:	b2c2      	uxtb	r2, r0
   17734:	2a9e      	cmp	r2, #158	; 0x9e
   17736:	f3c0 2107 	ubfx	r1, r0, #8, #8
   1773a:	d90b      	bls.n	17754 <__jp2uc+0x8c>
   1773c:	3223      	adds	r2, #35	; 0x23
   1773e:	b2d2      	uxtb	r2, r2
   17740:	2380      	movs	r3, #128	; 0x80
   17742:	299f      	cmp	r1, #159	; 0x9f
   17744:	bf94      	ite	ls
   17746:	3970      	subls	r1, #112	; 0x70
   17748:	3150      	addhi	r1, #80	; 0x50
   1774a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   1774e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   17752:	e7c5      	b.n	176e0 <__jp2uc+0x18>
   17754:	3a7e      	subs	r2, #126	; 0x7e
   17756:	b2d2      	uxtb	r2, r2
   17758:	237f      	movs	r3, #127	; 0x7f
   1775a:	e7f2      	b.n	17742 <__jp2uc+0x7a>
   1775c:	2ac0      	cmp	r2, #192	; 0xc0
   1775e:	d8c8      	bhi.n	176f2 <__jp2uc+0x2a>
   17760:	4b1f      	ldr	r3, [pc, #124]	; (177e0 <__jp2uc+0x118>)
   17762:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   17766:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1776a:	4770      	bx	lr
   1776c:	2af1      	cmp	r2, #241	; 0xf1
   1776e:	d8c0      	bhi.n	176f2 <__jp2uc+0x2a>
   17770:	4b1c      	ldr	r3, [pc, #112]	; (177e4 <__jp2uc+0x11c>)
   17772:	e019      	b.n	177a8 <__jp2uc+0xe0>
   17774:	2ad8      	cmp	r2, #216	; 0xd8
   17776:	d8bc      	bhi.n	176f2 <__jp2uc+0x2a>
   17778:	4b1b      	ldr	r3, [pc, #108]	; (177e8 <__jp2uc+0x120>)
   1777a:	e015      	b.n	177a8 <__jp2uc+0xe0>
   1777c:	2af6      	cmp	r2, #246	; 0xf6
   1777e:	d8b8      	bhi.n	176f2 <__jp2uc+0x2a>
   17780:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   17784:	4770      	bx	lr
   17786:	2af3      	cmp	r2, #243	; 0xf3
   17788:	d8b3      	bhi.n	176f2 <__jp2uc+0x2a>
   1778a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1778e:	3020      	adds	r0, #32
   17790:	4770      	bx	lr
   17792:	4b16      	ldr	r3, [pc, #88]	; (177ec <__jp2uc+0x124>)
   17794:	4413      	add	r3, r2
   17796:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1779a:	2b00      	cmp	r3, #0
   1779c:	d0a9      	beq.n	176f2 <__jp2uc+0x2a>
   1779e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   177a2:	3060      	adds	r0, #96	; 0x60
   177a4:	4770      	bx	lr
   177a6:	4b12      	ldr	r3, [pc, #72]	; (177f0 <__jp2uc+0x128>)
   177a8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   177ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   177b0:	2800      	cmp	r0, #0
   177b2:	bf08      	it	eq
   177b4:	f04f 30ff 	moveq.w	r0, #4294967295
   177b8:	4770      	bx	lr
   177ba:	4b0e      	ldr	r3, [pc, #56]	; (177f4 <__jp2uc+0x12c>)
   177bc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   177c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   177c4:	4770      	bx	lr
   177c6:	3bb0      	subs	r3, #176	; 0xb0
   177c8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   177cc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   177d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   177d4:	4a08      	ldr	r2, [pc, #32]	; (177f8 <__jp2uc+0x130>)
   177d6:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   177da:	4770      	bx	lr
   177dc:	200060a8 	.word	0x200060a8
   177e0:	200013d0 	.word	0x200013d0
   177e4:	2000132c 	.word	0x2000132c
   177e8:	200012bc 	.word	0x200012bc
   177ec:	20001260 	.word	0x20001260
   177f0:	200011a4 	.word	0x200011a4
   177f4:	200010e8 	.word	0x200010e8
   177f8:	20001410 	.word	0x20001410

000177fc <_jp2uc_l>:
   177fc:	b538      	push	{r3, r4, r5, lr}
   177fe:	4605      	mov	r5, r0
   17800:	b1b9      	cbz	r1, 17832 <_jp2uc_l+0x36>
   17802:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   17806:	4912      	ldr	r1, [pc, #72]	; (17850 <_jp2uc_l+0x54>)
   17808:	4620      	mov	r0, r4
   1780a:	f7f9 fbbd 	bl	10f88 <strcmp>
   1780e:	b928      	cbnz	r0, 1781c <_jp2uc_l+0x20>
   17810:	4628      	mov	r0, r5
   17812:	2101      	movs	r1, #1
   17814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17818:	f7ff bf56 	b.w	176c8 <__jp2uc>
   1781c:	490d      	ldr	r1, [pc, #52]	; (17854 <_jp2uc_l+0x58>)
   1781e:	4620      	mov	r0, r4
   17820:	f7f9 fbb2 	bl	10f88 <strcmp>
   17824:	b938      	cbnz	r0, 17836 <_jp2uc_l+0x3a>
   17826:	4628      	mov	r0, r5
   17828:	2102      	movs	r1, #2
   1782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1782e:	f7ff bf4b 	b.w	176c8 <__jp2uc>
   17832:	4c09      	ldr	r4, [pc, #36]	; (17858 <_jp2uc_l+0x5c>)
   17834:	e7e7      	b.n	17806 <_jp2uc_l+0xa>
   17836:	4909      	ldr	r1, [pc, #36]	; (1785c <_jp2uc_l+0x60>)
   17838:	4620      	mov	r0, r4
   1783a:	f7f9 fba5 	bl	10f88 <strcmp>
   1783e:	b928      	cbnz	r0, 1784c <_jp2uc_l+0x50>
   17840:	4628      	mov	r0, r5
   17842:	2103      	movs	r1, #3
   17844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17848:	f7ff bf3e 	b.w	176c8 <__jp2uc>
   1784c:	4628      	mov	r0, r5
   1784e:	bd38      	pop	{r3, r4, r5, pc}
   17850:	2000108c 	.word	0x2000108c
   17854:	20001090 	.word	0x20001090
   17858:	20008b9e 	.word	0x20008b9e
   1785c:	20001098 	.word	0x20001098

00017860 <fiprintf>:
   17860:	b40e      	push	{r1, r2, r3}
   17862:	b510      	push	{r4, lr}
   17864:	b083      	sub	sp, #12
   17866:	ab05      	add	r3, sp, #20
   17868:	4c06      	ldr	r4, [pc, #24]	; (17884 <fiprintf+0x24>)
   1786a:	f853 2b04 	ldr.w	r2, [r3], #4
   1786e:	9301      	str	r3, [sp, #4]
   17870:	4601      	mov	r1, r0
   17872:	6820      	ldr	r0, [r4, #0]
   17874:	f000 f97c 	bl	17b70 <_vfiprintf_r>
   17878:	b003      	add	sp, #12
   1787a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1787e:	b003      	add	sp, #12
   17880:	4770      	bx	lr
   17882:	bf00      	nop
   17884:	20008ffc 	.word	0x20008ffc

00017888 <__ssprint_r>:
   17888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1788c:	6893      	ldr	r3, [r2, #8]
   1788e:	6817      	ldr	r7, [r2, #0]
   17890:	b083      	sub	sp, #12
   17892:	4692      	mov	sl, r2
   17894:	2b00      	cmp	r3, #0
   17896:	d070      	beq.n	1797a <__ssprint_r+0xf2>
   17898:	4681      	mov	r9, r0
   1789a:	688a      	ldr	r2, [r1, #8]
   1789c:	6808      	ldr	r0, [r1, #0]
   1789e:	460c      	mov	r4, r1
   178a0:	3708      	adds	r7, #8
   178a2:	e043      	b.n	1792c <__ssprint_r+0xa4>
   178a4:	89a3      	ldrh	r3, [r4, #12]
   178a6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   178aa:	d02e      	beq.n	1790a <__ssprint_r+0x82>
   178ac:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   178b0:	eba0 0801 	sub.w	r8, r0, r1
   178b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   178b8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   178bc:	f108 0001 	add.w	r0, r8, #1
   178c0:	1076      	asrs	r6, r6, #1
   178c2:	4428      	add	r0, r5
   178c4:	42b0      	cmp	r0, r6
   178c6:	4632      	mov	r2, r6
   178c8:	bf84      	itt	hi
   178ca:	4606      	movhi	r6, r0
   178cc:	4632      	movhi	r2, r6
   178ce:	055b      	lsls	r3, r3, #21
   178d0:	d537      	bpl.n	17942 <__ssprint_r+0xba>
   178d2:	4611      	mov	r1, r2
   178d4:	4648      	mov	r0, r9
   178d6:	f7f7 fa1b 	bl	ed10 <_malloc_r>
   178da:	9001      	str	r0, [sp, #4]
   178dc:	2800      	cmp	r0, #0
   178de:	d03a      	beq.n	17956 <__ssprint_r+0xce>
   178e0:	4642      	mov	r2, r8
   178e2:	6921      	ldr	r1, [r4, #16]
   178e4:	f7f5 f8f6 	bl	cad4 <memcpy>
   178e8:	89a2      	ldrh	r2, [r4, #12]
   178ea:	9b01      	ldr	r3, [sp, #4]
   178ec:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   178f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   178f4:	81a2      	strh	r2, [r4, #12]
   178f6:	eba6 0208 	sub.w	r2, r6, r8
   178fa:	eb03 0008 	add.w	r0, r3, r8
   178fe:	6166      	str	r6, [r4, #20]
   17900:	60a2      	str	r2, [r4, #8]
   17902:	6123      	str	r3, [r4, #16]
   17904:	6020      	str	r0, [r4, #0]
   17906:	462e      	mov	r6, r5
   17908:	46a8      	mov	r8, r5
   1790a:	4642      	mov	r2, r8
   1790c:	4659      	mov	r1, fp
   1790e:	f7f9 f8f3 	bl	10af8 <memmove>
   17912:	f8da 3008 	ldr.w	r3, [sl, #8]
   17916:	68a2      	ldr	r2, [r4, #8]
   17918:	6820      	ldr	r0, [r4, #0]
   1791a:	1b92      	subs	r2, r2, r6
   1791c:	4440      	add	r0, r8
   1791e:	1b5b      	subs	r3, r3, r5
   17920:	60a2      	str	r2, [r4, #8]
   17922:	6020      	str	r0, [r4, #0]
   17924:	f8ca 3008 	str.w	r3, [sl, #8]
   17928:	b33b      	cbz	r3, 1797a <__ssprint_r+0xf2>
   1792a:	3708      	adds	r7, #8
   1792c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   17930:	2d00      	cmp	r5, #0
   17932:	d0fa      	beq.n	1792a <__ssprint_r+0xa2>
   17934:	42aa      	cmp	r2, r5
   17936:	4616      	mov	r6, r2
   17938:	4690      	mov	r8, r2
   1793a:	d9b3      	bls.n	178a4 <__ssprint_r+0x1c>
   1793c:	462e      	mov	r6, r5
   1793e:	46a8      	mov	r8, r5
   17940:	e7e3      	b.n	1790a <__ssprint_r+0x82>
   17942:	4648      	mov	r0, r9
   17944:	f7f7 fcac 	bl	f2a0 <_realloc_r>
   17948:	4603      	mov	r3, r0
   1794a:	2800      	cmp	r0, #0
   1794c:	d1d3      	bne.n	178f6 <__ssprint_r+0x6e>
   1794e:	6921      	ldr	r1, [r4, #16]
   17950:	4648      	mov	r0, r9
   17952:	f7f9 fe47 	bl	115e4 <_free_r>
   17956:	89a3      	ldrh	r3, [r4, #12]
   17958:	220c      	movs	r2, #12
   1795a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1795e:	f8c9 2000 	str.w	r2, [r9]
   17962:	f04f 30ff 	mov.w	r0, #4294967295
   17966:	81a3      	strh	r3, [r4, #12]
   17968:	2200      	movs	r2, #0
   1796a:	2300      	movs	r3, #0
   1796c:	f8ca 2008 	str.w	r2, [sl, #8]
   17970:	f8ca 3004 	str.w	r3, [sl, #4]
   17974:	b003      	add	sp, #12
   17976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1797a:	2000      	movs	r0, #0
   1797c:	2300      	movs	r3, #0
   1797e:	f8ca 3004 	str.w	r3, [sl, #4]
   17982:	b003      	add	sp, #12
   17984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017988 <_sungetc_r>:
   17988:	b538      	push	{r3, r4, r5, lr}
   1798a:	1c4b      	adds	r3, r1, #1
   1798c:	d01a      	beq.n	179c4 <_sungetc_r+0x3c>
   1798e:	8993      	ldrh	r3, [r2, #12]
   17990:	4614      	mov	r4, r2
   17992:	6b12      	ldr	r2, [r2, #48]	; 0x30
   17994:	f023 0320 	bic.w	r3, r3, #32
   17998:	81a3      	strh	r3, [r4, #12]
   1799a:	b2cd      	uxtb	r5, r1
   1799c:	b1aa      	cbz	r2, 179ca <_sungetc_r+0x42>
   1799e:	6862      	ldr	r2, [r4, #4]
   179a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   179a2:	429a      	cmp	r2, r3
   179a4:	da09      	bge.n	179ba <_sungetc_r+0x32>
   179a6:	6823      	ldr	r3, [r4, #0]
   179a8:	1e5a      	subs	r2, r3, #1
   179aa:	6022      	str	r2, [r4, #0]
   179ac:	f803 5c01 	strb.w	r5, [r3, #-1]
   179b0:	6863      	ldr	r3, [r4, #4]
   179b2:	3301      	adds	r3, #1
   179b4:	6063      	str	r3, [r4, #4]
   179b6:	4628      	mov	r0, r5
   179b8:	bd38      	pop	{r3, r4, r5, pc}
   179ba:	4621      	mov	r1, r4
   179bc:	f001 fa58 	bl	18e70 <__submore>
   179c0:	2800      	cmp	r0, #0
   179c2:	d0f0      	beq.n	179a6 <_sungetc_r+0x1e>
   179c4:	f04f 35ff 	mov.w	r5, #4294967295
   179c8:	e7f5      	b.n	179b6 <_sungetc_r+0x2e>
   179ca:	6923      	ldr	r3, [r4, #16]
   179cc:	6822      	ldr	r2, [r4, #0]
   179ce:	b12b      	cbz	r3, 179dc <_sungetc_r+0x54>
   179d0:	4293      	cmp	r3, r2
   179d2:	d203      	bcs.n	179dc <_sungetc_r+0x54>
   179d4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   179d8:	42ab      	cmp	r3, r5
   179da:	d00f      	beq.n	179fc <_sungetc_r+0x74>
   179dc:	6861      	ldr	r1, [r4, #4]
   179de:	63e1      	str	r1, [r4, #60]	; 0x3c
   179e0:	4623      	mov	r3, r4
   179e2:	63a2      	str	r2, [r4, #56]	; 0x38
   179e4:	f104 0140 	add.w	r1, r4, #64	; 0x40
   179e8:	2203      	movs	r2, #3
   179ea:	6362      	str	r2, [r4, #52]	; 0x34
   179ec:	6321      	str	r1, [r4, #48]	; 0x30
   179ee:	f803 5f42 	strb.w	r5, [r3, #66]!
   179f2:	2201      	movs	r2, #1
   179f4:	e9c4 3200 	strd	r3, r2, [r4]
   179f8:	4628      	mov	r0, r5
   179fa:	bd38      	pop	{r3, r4, r5, pc}
   179fc:	6863      	ldr	r3, [r4, #4]
   179fe:	3a01      	subs	r2, #1
   17a00:	3301      	adds	r3, #1
   17a02:	e9c4 2300 	strd	r2, r3, [r4]
   17a06:	e7d6      	b.n	179b6 <_sungetc_r+0x2e>

00017a08 <__ssrefill_r>:
   17a08:	b510      	push	{r4, lr}
   17a0a:	460c      	mov	r4, r1
   17a0c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   17a0e:	b169      	cbz	r1, 17a2c <__ssrefill_r+0x24>
   17a10:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17a14:	4299      	cmp	r1, r3
   17a16:	d001      	beq.n	17a1c <__ssrefill_r+0x14>
   17a18:	f7f9 fde4 	bl	115e4 <_free_r>
   17a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17a1e:	6063      	str	r3, [r4, #4]
   17a20:	2000      	movs	r0, #0
   17a22:	6320      	str	r0, [r4, #48]	; 0x30
   17a24:	b113      	cbz	r3, 17a2c <__ssrefill_r+0x24>
   17a26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17a28:	6023      	str	r3, [r4, #0]
   17a2a:	bd10      	pop	{r4, pc}
   17a2c:	89a3      	ldrh	r3, [r4, #12]
   17a2e:	6921      	ldr	r1, [r4, #16]
   17a30:	2200      	movs	r2, #0
   17a32:	f043 0320 	orr.w	r3, r3, #32
   17a36:	e9c4 1200 	strd	r1, r2, [r4]
   17a3a:	81a3      	strh	r3, [r4, #12]
   17a3c:	f04f 30ff 	mov.w	r0, #4294967295
   17a40:	bd10      	pop	{r4, pc}
   17a42:	bf00      	nop

00017a44 <_sfread_r>:
   17a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a48:	b085      	sub	sp, #20
   17a4a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   17a4e:	fb02 f303 	mul.w	r3, r2, r3
   17a52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17a54:	9301      	str	r3, [sp, #4]
   17a56:	b3a3      	cbz	r3, 17ac2 <_sfread_r+0x7e>
   17a58:	f8d4 a004 	ldr.w	sl, [r4, #4]
   17a5c:	9b01      	ldr	r3, [sp, #4]
   17a5e:	4553      	cmp	r3, sl
   17a60:	468b      	mov	fp, r1
   17a62:	d946      	bls.n	17af2 <_sfread_r+0xae>
   17a64:	46a0      	mov	r8, r4
   17a66:	9d01      	ldr	r5, [sp, #4]
   17a68:	f858 1b40 	ldr.w	r1, [r8], #64
   17a6c:	4607      	mov	r7, r0
   17a6e:	2600      	movs	r6, #0
   17a70:	4652      	mov	r2, sl
   17a72:	4658      	mov	r0, fp
   17a74:	f7f5 f82e 	bl	cad4 <memcpy>
   17a78:	6823      	ldr	r3, [r4, #0]
   17a7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   17a7c:	4453      	add	r3, sl
   17a7e:	46a9      	mov	r9, r5
   17a80:	e9c4 3600 	strd	r3, r6, [r4]
   17a84:	4611      	mov	r1, r2
   17a86:	4638      	mov	r0, r7
   17a88:	44d3      	add	fp, sl
   17a8a:	eba5 050a 	sub.w	r5, r5, sl
   17a8e:	b1e2      	cbz	r2, 17aca <_sfread_r+0x86>
   17a90:	4542      	cmp	r2, r8
   17a92:	d001      	beq.n	17a98 <_sfread_r+0x54>
   17a94:	f7f9 fda6 	bl	115e4 <_free_r>
   17a98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   17a9a:	6326      	str	r6, [r4, #48]	; 0x30
   17a9c:	6063      	str	r3, [r4, #4]
   17a9e:	b1a3      	cbz	r3, 17aca <_sfread_r+0x86>
   17aa0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   17aa2:	6021      	str	r1, [r4, #0]
   17aa4:	42ab      	cmp	r3, r5
   17aa6:	469a      	mov	sl, r3
   17aa8:	d3e2      	bcc.n	17a70 <_sfread_r+0x2c>
   17aaa:	9b02      	ldr	r3, [sp, #8]
   17aac:	9301      	str	r3, [sp, #4]
   17aae:	462a      	mov	r2, r5
   17ab0:	4658      	mov	r0, fp
   17ab2:	f7f5 f80f 	bl	cad4 <memcpy>
   17ab6:	e9d4 3200 	ldrd	r3, r2, [r4]
   17aba:	1b52      	subs	r2, r2, r5
   17abc:	442b      	add	r3, r5
   17abe:	e9c4 3200 	strd	r3, r2, [r4]
   17ac2:	9801      	ldr	r0, [sp, #4]
   17ac4:	b005      	add	sp, #20
   17ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aca:	9a01      	ldr	r2, [sp, #4]
   17acc:	9b03      	ldr	r3, [sp, #12]
   17ace:	4452      	add	r2, sl
   17ad0:	eba2 0209 	sub.w	r2, r2, r9
   17ad4:	fbb2 f3f3 	udiv	r3, r2, r3
   17ad8:	9301      	str	r3, [sp, #4]
   17ada:	89a3      	ldrh	r3, [r4, #12]
   17adc:	6922      	ldr	r2, [r4, #16]
   17ade:	9801      	ldr	r0, [sp, #4]
   17ae0:	f043 0320 	orr.w	r3, r3, #32
   17ae4:	81a3      	strh	r3, [r4, #12]
   17ae6:	2300      	movs	r3, #0
   17ae8:	e9c4 2300 	strd	r2, r3, [r4]
   17aec:	b005      	add	sp, #20
   17aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17af2:	6821      	ldr	r1, [r4, #0]
   17af4:	461d      	mov	r5, r3
   17af6:	e7d8      	b.n	17aaa <_sfread_r+0x66>

00017af8 <__sprint_r.part.0>:
   17af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17afc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   17afe:	049c      	lsls	r4, r3, #18
   17b00:	4690      	mov	r8, r2
   17b02:	d52d      	bpl.n	17b60 <__sprint_r.part.0+0x68>
   17b04:	6893      	ldr	r3, [r2, #8]
   17b06:	6812      	ldr	r2, [r2, #0]
   17b08:	b343      	cbz	r3, 17b5c <__sprint_r.part.0+0x64>
   17b0a:	468b      	mov	fp, r1
   17b0c:	4606      	mov	r6, r0
   17b0e:	f102 0908 	add.w	r9, r2, #8
   17b12:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   17b16:	ea5f 079a 	movs.w	r7, sl, lsr #2
   17b1a:	d015      	beq.n	17b48 <__sprint_r.part.0+0x50>
   17b1c:	3d04      	subs	r5, #4
   17b1e:	2400      	movs	r4, #0
   17b20:	e001      	b.n	17b26 <__sprint_r.part.0+0x2e>
   17b22:	42a7      	cmp	r7, r4
   17b24:	d00e      	beq.n	17b44 <__sprint_r.part.0+0x4c>
   17b26:	f855 1f04 	ldr.w	r1, [r5, #4]!
   17b2a:	465a      	mov	r2, fp
   17b2c:	4630      	mov	r0, r6
   17b2e:	f001 fa97 	bl	19060 <_fputwc_r>
   17b32:	1c43      	adds	r3, r0, #1
   17b34:	f104 0401 	add.w	r4, r4, #1
   17b38:	d1f3      	bne.n	17b22 <__sprint_r.part.0+0x2a>
   17b3a:	2300      	movs	r3, #0
   17b3c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   17b40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b44:	f8d8 3008 	ldr.w	r3, [r8, #8]
   17b48:	f02a 0a03 	bic.w	sl, sl, #3
   17b4c:	eba3 030a 	sub.w	r3, r3, sl
   17b50:	f8c8 3008 	str.w	r3, [r8, #8]
   17b54:	f109 0908 	add.w	r9, r9, #8
   17b58:	2b00      	cmp	r3, #0
   17b5a:	d1da      	bne.n	17b12 <__sprint_r.part.0+0x1a>
   17b5c:	2000      	movs	r0, #0
   17b5e:	e7ec      	b.n	17b3a <__sprint_r.part.0+0x42>
   17b60:	f001 f80c 	bl	18b7c <__sfvwrite_r>
   17b64:	2300      	movs	r3, #0
   17b66:	e9c8 3301 	strd	r3, r3, [r8, #4]
   17b6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b6e:	bf00      	nop

00017b70 <_vfiprintf_r>:
   17b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b74:	ed2d 8b02 	vpush	{d8}
   17b78:	b0c5      	sub	sp, #276	; 0x114
   17b7a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   17b7e:	4683      	mov	fp, r0
   17b80:	ee08 1a10 	vmov	s16, r1
   17b84:	4616      	mov	r6, r2
   17b86:	2100      	movs	r1, #0
   17b88:	2208      	movs	r2, #8
   17b8a:	4650      	mov	r0, sl
   17b8c:	461c      	mov	r4, r3
   17b8e:	9307      	str	r3, [sp, #28]
   17b90:	f7f9 f82e 	bl	10bf0 <memset>
   17b94:	f1bb 0f00 	cmp.w	fp, #0
   17b98:	d004      	beq.n	17ba4 <_vfiprintf_r+0x34>
   17b9a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   17b9e:	2b00      	cmp	r3, #0
   17ba0:	f000 86a0 	beq.w	188e4 <_vfiprintf_r+0xd74>
   17ba4:	ee18 2a10 	vmov	r2, s16
   17ba8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   17baa:	07db      	lsls	r3, r3, #31
   17bac:	f140 8513 	bpl.w	185d6 <_vfiprintf_r+0xa66>
   17bb0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   17bb4:	b28a      	uxth	r2, r1
   17bb6:	0495      	lsls	r5, r2, #18
   17bb8:	d40b      	bmi.n	17bd2 <_vfiprintf_r+0x62>
   17bba:	ee18 3a10 	vmov	r3, s16
   17bbe:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   17bc2:	8199      	strh	r1, [r3, #12]
   17bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17bc6:	b28a      	uxth	r2, r1
   17bc8:	ee18 1a10 	vmov	r1, s16
   17bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17bd0:	664b      	str	r3, [r1, #100]	; 0x64
   17bd2:	0710      	lsls	r0, r2, #28
   17bd4:	f140 8105 	bpl.w	17de2 <_vfiprintf_r+0x272>
   17bd8:	ee18 3a10 	vmov	r3, s16
   17bdc:	691b      	ldr	r3, [r3, #16]
   17bde:	2b00      	cmp	r3, #0
   17be0:	f000 80ff 	beq.w	17de2 <_vfiprintf_r+0x272>
   17be4:	f002 031a 	and.w	r3, r2, #26
   17be8:	2b0a      	cmp	r3, #10
   17bea:	f000 810a 	beq.w	17e02 <_vfiprintf_r+0x292>
   17bee:	2300      	movs	r3, #0
   17bf0:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   17bf4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   17bf8:	aa1b      	add	r2, sp, #108	; 0x6c
   17bfa:	930c      	str	r3, [sp, #48]	; 0x30
   17bfc:	9218      	str	r2, [sp, #96]	; 0x60
   17bfe:	4691      	mov	r9, r2
   17c00:	930b      	str	r3, [sp, #44]	; 0x2c
   17c02:	9305      	str	r3, [sp, #20]
   17c04:	46b0      	mov	r8, r6
   17c06:	4644      	mov	r4, r8
   17c08:	4ba8      	ldr	r3, [pc, #672]	; (17eac <_vfiprintf_r+0x33c>)
   17c0a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   17c0e:	f7f9 f90f 	bl	10e30 <__locale_mb_cur_max>
   17c12:	4622      	mov	r2, r4
   17c14:	4603      	mov	r3, r0
   17c16:	a912      	add	r1, sp, #72	; 0x48
   17c18:	f8cd a000 	str.w	sl, [sp]
   17c1c:	4658      	mov	r0, fp
   17c1e:	47a8      	blx	r5
   17c20:	2800      	cmp	r0, #0
   17c22:	f000 8145 	beq.w	17eb0 <_vfiprintf_r+0x340>
   17c26:	f2c0 8139 	blt.w	17e9c <_vfiprintf_r+0x32c>
   17c2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17c2c:	2a25      	cmp	r2, #37	; 0x25
   17c2e:	4603      	mov	r3, r0
   17c30:	d001      	beq.n	17c36 <_vfiprintf_r+0xc6>
   17c32:	441c      	add	r4, r3
   17c34:	e7e8      	b.n	17c08 <_vfiprintf_r+0x98>
   17c36:	ebb4 0608 	subs.w	r6, r4, r8
   17c3a:	4605      	mov	r5, r0
   17c3c:	f040 813c 	bne.w	17eb8 <_vfiprintf_r+0x348>
   17c40:	2300      	movs	r3, #0
   17c42:	7861      	ldrb	r1, [r4, #1]
   17c44:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   17c48:	f104 0801 	add.w	r8, r4, #1
   17c4c:	9306      	str	r3, [sp, #24]
   17c4e:	f04f 37ff 	mov.w	r7, #4294967295
   17c52:	461e      	mov	r6, r3
   17c54:	242b      	movs	r4, #43	; 0x2b
   17c56:	f108 0801 	add.w	r8, r8, #1
   17c5a:	f1a1 0320 	sub.w	r3, r1, #32
   17c5e:	2b5a      	cmp	r3, #90	; 0x5a
   17c60:	f200 8178 	bhi.w	17f54 <_vfiprintf_r+0x3e4>
   17c64:	e8df f013 	tbh	[pc, r3, lsl #1]
   17c68:	017602b5 	.word	0x017602b5
   17c6c:	02b00176 	.word	0x02b00176
   17c70:	01760176 	.word	0x01760176
   17c74:	006a0176 	.word	0x006a0176
   17c78:	01760176 	.word	0x01760176
   17c7c:	028d027d 	.word	0x028d027d
   17c80:	02880176 	.word	0x02880176
   17c84:	01760297 	.word	0x01760297
   17c88:	005b0292 	.word	0x005b0292
   17c8c:	005b005b 	.word	0x005b005b
   17c90:	005b005b 	.word	0x005b005b
   17c94:	005b005b 	.word	0x005b005b
   17c98:	005b005b 	.word	0x005b005b
   17c9c:	01760176 	.word	0x01760176
   17ca0:	01760176 	.word	0x01760176
   17ca4:	01760176 	.word	0x01760176
   17ca8:	01760176 	.word	0x01760176
   17cac:	025c0176 	.word	0x025c0176
   17cb0:	01760084 	.word	0x01760084
   17cb4:	01760176 	.word	0x01760176
   17cb8:	01760176 	.word	0x01760176
   17cbc:	01760176 	.word	0x01760176
   17cc0:	01760176 	.word	0x01760176
   17cc4:	00e80176 	.word	0x00e80176
   17cc8:	01760176 	.word	0x01760176
   17ccc:	02330176 	.word	0x02330176
   17cd0:	02da0176 	.word	0x02da0176
   17cd4:	01760176 	.word	0x01760176
   17cd8:	0176058b 	.word	0x0176058b
   17cdc:	01760176 	.word	0x01760176
   17ce0:	01760176 	.word	0x01760176
   17ce4:	01760176 	.word	0x01760176
   17ce8:	01760176 	.word	0x01760176
   17cec:	025c0176 	.word	0x025c0176
   17cf0:	01760086 	.word	0x01760086
   17cf4:	01760176 	.word	0x01760176
   17cf8:	008602cd 	.word	0x008602cd
   17cfc:	0176007f 	.word	0x0176007f
   17d00:	017602c0 	.word	0x017602c0
   17d04:	00ea02fd 	.word	0x00ea02fd
   17d08:	007f02ed 	.word	0x007f02ed
   17d0c:	02330176 	.word	0x02330176
   17d10:	0569007c 	.word	0x0569007c
   17d14:	01760176 	.word	0x01760176
   17d18:	0176056b 	.word	0x0176056b
   17d1c:	007c      	.short	0x007c
   17d1e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   17d22:	2200      	movs	r2, #0
   17d24:	f818 1b01 	ldrb.w	r1, [r8], #1
   17d28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   17d2c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   17d30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   17d34:	2b09      	cmp	r3, #9
   17d36:	d9f5      	bls.n	17d24 <_vfiprintf_r+0x1b4>
   17d38:	9206      	str	r2, [sp, #24]
   17d3a:	e78e      	b.n	17c5a <_vfiprintf_r+0xea>
   17d3c:	4658      	mov	r0, fp
   17d3e:	f7fe fa7d 	bl	1623c <_localeconv_r>
   17d42:	6843      	ldr	r3, [r0, #4]
   17d44:	930d      	str	r3, [sp, #52]	; 0x34
   17d46:	4618      	mov	r0, r3
   17d48:	f7f9 fb3a 	bl	113c0 <strlen>
   17d4c:	900e      	str	r0, [sp, #56]	; 0x38
   17d4e:	4605      	mov	r5, r0
   17d50:	4658      	mov	r0, fp
   17d52:	f7fe fa73 	bl	1623c <_localeconv_r>
   17d56:	6883      	ldr	r3, [r0, #8]
   17d58:	930b      	str	r3, [sp, #44]	; 0x2c
   17d5a:	2d00      	cmp	r5, #0
   17d5c:	f040 84d6 	bne.w	1870c <_vfiprintf_r+0xb9c>
   17d60:	f898 1000 	ldrb.w	r1, [r8]
   17d64:	e777      	b.n	17c56 <_vfiprintf_r+0xe6>
   17d66:	f898 1000 	ldrb.w	r1, [r8]
   17d6a:	f046 0620 	orr.w	r6, r6, #32
   17d6e:	e772      	b.n	17c56 <_vfiprintf_r+0xe6>
   17d70:	f046 0610 	orr.w	r6, r6, #16
   17d74:	06b4      	lsls	r4, r6, #26
   17d76:	f140 818e 	bpl.w	18096 <_vfiprintf_r+0x526>
   17d7a:	9b07      	ldr	r3, [sp, #28]
   17d7c:	3307      	adds	r3, #7
   17d7e:	f023 0307 	bic.w	r3, r3, #7
   17d82:	461a      	mov	r2, r3
   17d84:	6859      	ldr	r1, [r3, #4]
   17d86:	f852 3b08 	ldr.w	r3, [r2], #8
   17d8a:	9207      	str	r2, [sp, #28]
   17d8c:	460a      	mov	r2, r1
   17d8e:	2900      	cmp	r1, #0
   17d90:	f2c0 8470 	blt.w	18674 <_vfiprintf_r+0xb04>
   17d94:	1c79      	adds	r1, r7, #1
   17d96:	f000 85a2 	beq.w	188de <_vfiprintf_r+0xd6e>
   17d9a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   17d9e:	9103      	str	r1, [sp, #12]
   17da0:	ea53 0102 	orrs.w	r1, r3, r2
   17da4:	f000 843f 	beq.w	18626 <_vfiprintf_r+0xab6>
   17da8:	2b0a      	cmp	r3, #10
   17daa:	f172 0100 	sbcs.w	r1, r2, #0
   17dae:	f080 8541 	bcs.w	18834 <_vfiprintf_r+0xcc4>
   17db2:	3330      	adds	r3, #48	; 0x30
   17db4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   17db8:	9e03      	ldr	r6, [sp, #12]
   17dba:	2301      	movs	r3, #1
   17dbc:	9304      	str	r3, [sp, #16]
   17dbe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   17dc2:	9b04      	ldr	r3, [sp, #16]
   17dc4:	42bb      	cmp	r3, r7
   17dc6:	bfb8      	it	lt
   17dc8:	463b      	movlt	r3, r7
   17dca:	9303      	str	r3, [sp, #12]
   17dcc:	2300      	movs	r3, #0
   17dce:	9308      	str	r3, [sp, #32]
   17dd0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   17dd4:	2b00      	cmp	r3, #0
   17dd6:	f000 80cb 	beq.w	17f70 <_vfiprintf_r+0x400>
   17dda:	9b03      	ldr	r3, [sp, #12]
   17ddc:	3301      	adds	r3, #1
   17dde:	9303      	str	r3, [sp, #12]
   17de0:	e0c6      	b.n	17f70 <_vfiprintf_r+0x400>
   17de2:	ee18 1a10 	vmov	r1, s16
   17de6:	4658      	mov	r0, fp
   17de8:	ee18 5a10 	vmov	r5, s16
   17dec:	f001 f87c 	bl	18ee8 <__swsetup_r>
   17df0:	2800      	cmp	r0, #0
   17df2:	f040 8652 	bne.w	18a9a <_vfiprintf_r+0xf2a>
   17df6:	89aa      	ldrh	r2, [r5, #12]
   17df8:	f002 031a 	and.w	r3, r2, #26
   17dfc:	2b0a      	cmp	r3, #10
   17dfe:	f47f aef6 	bne.w	17bee <_vfiprintf_r+0x7e>
   17e02:	ee18 1a10 	vmov	r1, s16
   17e06:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   17e0a:	2b00      	cmp	r3, #0
   17e0c:	f6ff aeef 	blt.w	17bee <_vfiprintf_r+0x7e>
   17e10:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   17e12:	07db      	lsls	r3, r3, #31
   17e14:	d402      	bmi.n	17e1c <_vfiprintf_r+0x2ac>
   17e16:	0597      	lsls	r7, r2, #22
   17e18:	f140 8612 	bpl.w	18a40 <_vfiprintf_r+0xed0>
   17e1c:	ee18 1a10 	vmov	r1, s16
   17e20:	4623      	mov	r3, r4
   17e22:	4632      	mov	r2, r6
   17e24:	4658      	mov	r0, fp
   17e26:	f000 fe69 	bl	18afc <__sbprintf>
   17e2a:	9005      	str	r0, [sp, #20]
   17e2c:	9805      	ldr	r0, [sp, #20]
   17e2e:	b045      	add	sp, #276	; 0x114
   17e30:	ecbd 8b02 	vpop	{d8}
   17e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e38:	f046 0610 	orr.w	r6, r6, #16
   17e3c:	f016 0220 	ands.w	r2, r6, #32
   17e40:	f000 8136 	beq.w	180b0 <_vfiprintf_r+0x540>
   17e44:	9b07      	ldr	r3, [sp, #28]
   17e46:	3307      	adds	r3, #7
   17e48:	f023 0307 	bic.w	r3, r3, #7
   17e4c:	4619      	mov	r1, r3
   17e4e:	685a      	ldr	r2, [r3, #4]
   17e50:	f851 3b08 	ldr.w	r3, [r1], #8
   17e54:	9107      	str	r1, [sp, #28]
   17e56:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   17e5a:	9103      	str	r1, [sp, #12]
   17e5c:	2100      	movs	r1, #0
   17e5e:	2000      	movs	r0, #0
   17e60:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   17e64:	1c78      	adds	r0, r7, #1
   17e66:	f000 8210 	beq.w	1828a <_vfiprintf_r+0x71a>
   17e6a:	9803      	ldr	r0, [sp, #12]
   17e6c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   17e70:	ea53 0002 	orrs.w	r0, r3, r2
   17e74:	f040 8208 	bne.w	18288 <_vfiprintf_r+0x718>
   17e78:	2f00      	cmp	r7, #0
   17e7a:	f040 8538 	bne.w	188ee <_vfiprintf_r+0xd7e>
   17e7e:	2900      	cmp	r1, #0
   17e80:	f040 83d5 	bne.w	1862e <_vfiprintf_r+0xabe>
   17e84:	9b03      	ldr	r3, [sp, #12]
   17e86:	f013 0301 	ands.w	r3, r3, #1
   17e8a:	9304      	str	r3, [sp, #16]
   17e8c:	f000 8411 	beq.w	186b2 <_vfiprintf_r+0xb42>
   17e90:	2330      	movs	r3, #48	; 0x30
   17e92:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   17e96:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   17e9a:	e792      	b.n	17dc2 <_vfiprintf_r+0x252>
   17e9c:	2208      	movs	r2, #8
   17e9e:	2100      	movs	r1, #0
   17ea0:	4650      	mov	r0, sl
   17ea2:	f7f8 fea5 	bl	10bf0 <memset>
   17ea6:	2301      	movs	r3, #1
   17ea8:	441c      	add	r4, r3
   17eaa:	e6ad      	b.n	17c08 <_vfiprintf_r+0x98>
   17eac:	20008a74 	.word	0x20008a74
   17eb0:	ebb4 0608 	subs.w	r6, r4, r8
   17eb4:	4605      	mov	r5, r0
   17eb6:	d01b      	beq.n	17ef0 <_vfiprintf_r+0x380>
   17eb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17eba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   17ebc:	3301      	adds	r3, #1
   17ebe:	4432      	add	r2, r6
   17ec0:	2b07      	cmp	r3, #7
   17ec2:	e9c9 8600 	strd	r8, r6, [r9]
   17ec6:	921a      	str	r2, [sp, #104]	; 0x68
   17ec8:	9319      	str	r3, [sp, #100]	; 0x64
   17eca:	dd1c      	ble.n	17f06 <_vfiprintf_r+0x396>
   17ecc:	2a00      	cmp	r2, #0
   17ece:	f000 83a6 	beq.w	1861e <_vfiprintf_r+0xaae>
   17ed2:	ee18 1a10 	vmov	r1, s16
   17ed6:	aa18      	add	r2, sp, #96	; 0x60
   17ed8:	4658      	mov	r0, fp
   17eda:	f7ff fe0d 	bl	17af8 <__sprint_r.part.0>
   17ede:	bb20      	cbnz	r0, 17f2a <_vfiprintf_r+0x3ba>
   17ee0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17ee4:	9b05      	ldr	r3, [sp, #20]
   17ee6:	4433      	add	r3, r6
   17ee8:	9305      	str	r3, [sp, #20]
   17eea:	2d00      	cmp	r5, #0
   17eec:	f47f aea8 	bne.w	17c40 <_vfiprintf_r+0xd0>
   17ef0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	f040 85c1 	bne.w	18a7a <_vfiprintf_r+0xf0a>
   17ef8:	ee18 3a10 	vmov	r3, s16
   17efc:	2200      	movs	r2, #0
   17efe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   17f02:	9219      	str	r2, [sp, #100]	; 0x64
   17f04:	e015      	b.n	17f32 <_vfiprintf_r+0x3c2>
   17f06:	f109 0908 	add.w	r9, r9, #8
   17f0a:	e7eb      	b.n	17ee4 <_vfiprintf_r+0x374>
   17f0c:	ee18 1a10 	vmov	r1, s16
   17f10:	aa18      	add	r2, sp, #96	; 0x60
   17f12:	4658      	mov	r0, fp
   17f14:	f7ff fdf0 	bl	17af8 <__sprint_r.part.0>
   17f18:	2800      	cmp	r0, #0
   17f1a:	f000 80a6 	beq.w	1806a <_vfiprintf_r+0x4fa>
   17f1e:	9b08      	ldr	r3, [sp, #32]
   17f20:	b11b      	cbz	r3, 17f2a <_vfiprintf_r+0x3ba>
   17f22:	9908      	ldr	r1, [sp, #32]
   17f24:	4658      	mov	r0, fp
   17f26:	f7f9 fb5d 	bl	115e4 <_free_r>
   17f2a:	ee18 3a10 	vmov	r3, s16
   17f2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   17f32:	ee18 2a10 	vmov	r2, s16
   17f36:	6e52      	ldr	r2, [r2, #100]	; 0x64
   17f38:	f012 0f01 	tst.w	r2, #1
   17f3c:	b29a      	uxth	r2, r3
   17f3e:	f000 80a0 	beq.w	18082 <_vfiprintf_r+0x512>
   17f42:	0650      	lsls	r0, r2, #25
   17f44:	f100 85b2 	bmi.w	18aac <_vfiprintf_r+0xf3c>
   17f48:	9805      	ldr	r0, [sp, #20]
   17f4a:	b045      	add	sp, #276	; 0x114
   17f4c:	ecbd 8b02 	vpop	{d8}
   17f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f54:	2900      	cmp	r1, #0
   17f56:	d0cb      	beq.n	17ef0 <_vfiprintf_r+0x380>
   17f58:	2300      	movs	r3, #0
   17f5a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   17f5e:	2301      	movs	r3, #1
   17f60:	e9cd 3303 	strd	r3, r3, [sp, #12]
   17f64:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   17f68:	ac2b      	add	r4, sp, #172	; 0xac
   17f6a:	2300      	movs	r3, #0
   17f6c:	9308      	str	r3, [sp, #32]
   17f6e:	461f      	mov	r7, r3
   17f70:	f016 0302 	ands.w	r3, r6, #2
   17f74:	9309      	str	r3, [sp, #36]	; 0x24
   17f76:	d002      	beq.n	17f7e <_vfiprintf_r+0x40e>
   17f78:	9b03      	ldr	r3, [sp, #12]
   17f7a:	3302      	adds	r3, #2
   17f7c:	9303      	str	r3, [sp, #12]
   17f7e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   17f82:	930a      	str	r3, [sp, #40]	; 0x28
   17f84:	d105      	bne.n	17f92 <_vfiprintf_r+0x422>
   17f86:	9b06      	ldr	r3, [sp, #24]
   17f88:	9a03      	ldr	r2, [sp, #12]
   17f8a:	1a9d      	subs	r5, r3, r2
   17f8c:	2d00      	cmp	r5, #0
   17f8e:	f300 827b 	bgt.w	18488 <_vfiprintf_r+0x918>
   17f92:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   17f96:	1c41      	adds	r1, r0, #1
   17f98:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   17f9c:	b182      	cbz	r2, 17fc0 <_vfiprintf_r+0x450>
   17f9e:	2201      	movs	r2, #1
   17fa0:	3301      	adds	r3, #1
   17fa2:	f8c9 2004 	str.w	r2, [r9, #4]
   17fa6:	2907      	cmp	r1, #7
   17fa8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   17fac:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   17fb0:	f8c9 2000 	str.w	r2, [r9]
   17fb4:	f300 824a 	bgt.w	1844c <_vfiprintf_r+0x8dc>
   17fb8:	4608      	mov	r0, r1
   17fba:	f109 0908 	add.w	r9, r9, #8
   17fbe:	3101      	adds	r1, #1
   17fc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17fc2:	b1e2      	cbz	r2, 17ffe <_vfiprintf_r+0x48e>
   17fc4:	aa11      	add	r2, sp, #68	; 0x44
   17fc6:	3302      	adds	r3, #2
   17fc8:	f8c9 2000 	str.w	r2, [r9]
   17fcc:	2907      	cmp	r1, #7
   17fce:	f04f 0202 	mov.w	r2, #2
   17fd2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   17fd6:	f8c9 2004 	str.w	r2, [r9, #4]
   17fda:	f340 8250 	ble.w	1847e <_vfiprintf_r+0x90e>
   17fde:	2b00      	cmp	r3, #0
   17fe0:	f000 8343 	beq.w	1866a <_vfiprintf_r+0xafa>
   17fe4:	ee18 1a10 	vmov	r1, s16
   17fe8:	aa18      	add	r2, sp, #96	; 0x60
   17fea:	4658      	mov	r0, fp
   17fec:	f7ff fd84 	bl	17af8 <__sprint_r.part.0>
   17ff0:	2800      	cmp	r0, #0
   17ff2:	d194      	bne.n	17f1e <_vfiprintf_r+0x3ae>
   17ff4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   17ff8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   17ffc:	1c41      	adds	r1, r0, #1
   17ffe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18000:	2a80      	cmp	r2, #128	; 0x80
   18002:	f000 8184 	beq.w	1830e <_vfiprintf_r+0x79e>
   18006:	9a04      	ldr	r2, [sp, #16]
   18008:	1abd      	subs	r5, r7, r2
   1800a:	2d00      	cmp	r5, #0
   1800c:	f300 81d7 	bgt.w	183be <_vfiprintf_r+0x84e>
   18010:	9a04      	ldr	r2, [sp, #16]
   18012:	f8c9 4000 	str.w	r4, [r9]
   18016:	4413      	add	r3, r2
   18018:	2907      	cmp	r1, #7
   1801a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1801e:	f8c9 2004 	str.w	r2, [r9, #4]
   18022:	f340 816e 	ble.w	18302 <_vfiprintf_r+0x792>
   18026:	2b00      	cmp	r3, #0
   18028:	f000 8275 	beq.w	18516 <_vfiprintf_r+0x9a6>
   1802c:	ee18 1a10 	vmov	r1, s16
   18030:	aa18      	add	r2, sp, #96	; 0x60
   18032:	4658      	mov	r0, fp
   18034:	f7ff fd60 	bl	17af8 <__sprint_r.part.0>
   18038:	2800      	cmp	r0, #0
   1803a:	f47f af70 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   1803e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18040:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18044:	0775      	lsls	r5, r6, #29
   18046:	d505      	bpl.n	18054 <_vfiprintf_r+0x4e4>
   18048:	9a06      	ldr	r2, [sp, #24]
   1804a:	9903      	ldr	r1, [sp, #12]
   1804c:	1a54      	subs	r4, r2, r1
   1804e:	2c00      	cmp	r4, #0
   18050:	f300 826b 	bgt.w	1852a <_vfiprintf_r+0x9ba>
   18054:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   18058:	9803      	ldr	r0, [sp, #12]
   1805a:	4281      	cmp	r1, r0
   1805c:	bfac      	ite	ge
   1805e:	1852      	addge	r2, r2, r1
   18060:	1812      	addlt	r2, r2, r0
   18062:	9205      	str	r2, [sp, #20]
   18064:	2b00      	cmp	r3, #0
   18066:	f47f af51 	bne.w	17f0c <_vfiprintf_r+0x39c>
   1806a:	9908      	ldr	r1, [sp, #32]
   1806c:	2300      	movs	r3, #0
   1806e:	9319      	str	r3, [sp, #100]	; 0x64
   18070:	2900      	cmp	r1, #0
   18072:	f000 8149 	beq.w	18308 <_vfiprintf_r+0x798>
   18076:	4658      	mov	r0, fp
   18078:	f7f9 fab4 	bl	115e4 <_free_r>
   1807c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18080:	e5c1      	b.n	17c06 <_vfiprintf_r+0x96>
   18082:	059c      	lsls	r4, r3, #22
   18084:	f53f af5d 	bmi.w	17f42 <_vfiprintf_r+0x3d2>
   18088:	ee18 4a10 	vmov	r4, s16
   1808c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1808e:	f7f8 ff6b 	bl	10f68 <__retarget_lock_release_recursive>
   18092:	89a2      	ldrh	r2, [r4, #12]
   18094:	e755      	b.n	17f42 <_vfiprintf_r+0x3d2>
   18096:	06f0      	lsls	r0, r6, #27
   18098:	9a07      	ldr	r2, [sp, #28]
   1809a:	f100 831f 	bmi.w	186dc <_vfiprintf_r+0xb6c>
   1809e:	0671      	lsls	r1, r6, #25
   180a0:	f140 8319 	bpl.w	186d6 <_vfiprintf_r+0xb66>
   180a4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   180a8:	9207      	str	r2, [sp, #28]
   180aa:	17da      	asrs	r2, r3, #31
   180ac:	4611      	mov	r1, r2
   180ae:	e66e      	b.n	17d8e <_vfiprintf_r+0x21e>
   180b0:	f016 0310 	ands.w	r3, r6, #16
   180b4:	9907      	ldr	r1, [sp, #28]
   180b6:	f040 8309 	bne.w	186cc <_vfiprintf_r+0xb5c>
   180ba:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   180be:	f000 8301 	beq.w	186c4 <_vfiprintf_r+0xb54>
   180c2:	461a      	mov	r2, r3
   180c4:	f851 3b04 	ldr.w	r3, [r1], #4
   180c8:	9107      	str	r1, [sp, #28]
   180ca:	b29b      	uxth	r3, r3
   180cc:	e6c3      	b.n	17e56 <_vfiprintf_r+0x2e6>
   180ce:	9b07      	ldr	r3, [sp, #28]
   180d0:	461a      	mov	r2, r3
   180d2:	2300      	movs	r3, #0
   180d4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   180d8:	4613      	mov	r3, r2
   180da:	f853 4b04 	ldr.w	r4, [r3], #4
   180de:	9303      	str	r3, [sp, #12]
   180e0:	2c00      	cmp	r4, #0
   180e2:	f000 8412 	beq.w	1890a <_vfiprintf_r+0xd9a>
   180e6:	2953      	cmp	r1, #83	; 0x53
   180e8:	f000 8365 	beq.w	187b6 <_vfiprintf_r+0xc46>
   180ec:	f016 0510 	ands.w	r5, r6, #16
   180f0:	f040 8361 	bne.w	187b6 <_vfiprintf_r+0xc46>
   180f4:	1c7b      	adds	r3, r7, #1
   180f6:	f000 84b3 	beq.w	18a60 <_vfiprintf_r+0xef0>
   180fa:	463a      	mov	r2, r7
   180fc:	4629      	mov	r1, r5
   180fe:	4620      	mov	r0, r4
   18100:	f7f9 f90e 	bl	11320 <memchr>
   18104:	9008      	str	r0, [sp, #32]
   18106:	2800      	cmp	r0, #0
   18108:	f000 849f 	beq.w	18a4a <_vfiprintf_r+0xeda>
   1810c:	1b03      	subs	r3, r0, r4
   1810e:	9a03      	ldr	r2, [sp, #12]
   18110:	9304      	str	r3, [sp, #16]
   18112:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18116:	462f      	mov	r7, r5
   18118:	9207      	str	r2, [sp, #28]
   1811a:	9303      	str	r3, [sp, #12]
   1811c:	9508      	str	r5, [sp, #32]
   1811e:	e657      	b.n	17dd0 <_vfiprintf_r+0x260>
   18120:	2943      	cmp	r1, #67	; 0x43
   18122:	d002      	beq.n	1812a <_vfiprintf_r+0x5ba>
   18124:	06f5      	lsls	r5, r6, #27
   18126:	f140 832d 	bpl.w	18784 <_vfiprintf_r+0xc14>
   1812a:	9d07      	ldr	r5, [sp, #28]
   1812c:	2208      	movs	r2, #8
   1812e:	2100      	movs	r1, #0
   18130:	a816      	add	r0, sp, #88	; 0x58
   18132:	ac2b      	add	r4, sp, #172	; 0xac
   18134:	f7f8 fd5c 	bl	10bf0 <memset>
   18138:	ab16      	add	r3, sp, #88	; 0x58
   1813a:	f855 2b04 	ldr.w	r2, [r5], #4
   1813e:	4621      	mov	r1, r4
   18140:	4658      	mov	r0, fp
   18142:	f7ff fa77 	bl	17634 <_wcrtomb_r>
   18146:	4603      	mov	r3, r0
   18148:	3301      	adds	r3, #1
   1814a:	9004      	str	r0, [sp, #16]
   1814c:	f000 84b3 	beq.w	18ab6 <_vfiprintf_r+0xf46>
   18150:	9b04      	ldr	r3, [sp, #16]
   18152:	9507      	str	r5, [sp, #28]
   18154:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18158:	9303      	str	r3, [sp, #12]
   1815a:	2300      	movs	r3, #0
   1815c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18160:	e703      	b.n	17f6a <_vfiprintf_r+0x3fa>
   18162:	9b07      	ldr	r3, [sp, #28]
   18164:	f853 2b04 	ldr.w	r2, [r3], #4
   18168:	9206      	str	r2, [sp, #24]
   1816a:	2a00      	cmp	r2, #0
   1816c:	f280 829c 	bge.w	186a8 <_vfiprintf_r+0xb38>
   18170:	9a06      	ldr	r2, [sp, #24]
   18172:	4252      	negs	r2, r2
   18174:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18178:	f898 1000 	ldrb.w	r1, [r8]
   1817c:	f046 0604 	orr.w	r6, r6, #4
   18180:	e569      	b.n	17c56 <_vfiprintf_r+0xe6>
   18182:	f898 1000 	ldrb.w	r1, [r8]
   18186:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1818a:	e564      	b.n	17c56 <_vfiprintf_r+0xe6>
   1818c:	f898 1000 	ldrb.w	r1, [r8]
   18190:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   18194:	e55f      	b.n	17c56 <_vfiprintf_r+0xe6>
   18196:	4642      	mov	r2, r8
   18198:	f812 1b01 	ldrb.w	r1, [r2], #1
   1819c:	292a      	cmp	r1, #42	; 0x2a
   1819e:	f000 8496 	beq.w	18ace <_vfiprintf_r+0xf5e>
   181a2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   181a6:	2b09      	cmp	r3, #9
   181a8:	4690      	mov	r8, r2
   181aa:	f04f 0700 	mov.w	r7, #0
   181ae:	f63f ad54 	bhi.w	17c5a <_vfiprintf_r+0xea>
   181b2:	f818 1b01 	ldrb.w	r1, [r8], #1
   181b6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   181ba:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   181be:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   181c2:	2b09      	cmp	r3, #9
   181c4:	d9f5      	bls.n	181b2 <_vfiprintf_r+0x642>
   181c6:	e548      	b.n	17c5a <_vfiprintf_r+0xea>
   181c8:	f898 1000 	ldrb.w	r1, [r8]
   181cc:	f046 0601 	orr.w	r6, r6, #1
   181d0:	e541      	b.n	17c56 <_vfiprintf_r+0xe6>
   181d2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   181d6:	2b00      	cmp	r3, #0
   181d8:	f47f adc2 	bne.w	17d60 <_vfiprintf_r+0x1f0>
   181dc:	2320      	movs	r3, #32
   181de:	f898 1000 	ldrb.w	r1, [r8]
   181e2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   181e6:	e536      	b.n	17c56 <_vfiprintf_r+0xe6>
   181e8:	f898 1000 	ldrb.w	r1, [r8]
   181ec:	296c      	cmp	r1, #108	; 0x6c
   181ee:	bf03      	ittte	eq
   181f0:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   181f4:	f046 0620 	orreq.w	r6, r6, #32
   181f8:	f108 0801 	addeq.w	r8, r8, #1
   181fc:	f046 0610 	orrne.w	r6, r6, #16
   18200:	e529      	b.n	17c56 <_vfiprintf_r+0xe6>
   18202:	f898 1000 	ldrb.w	r1, [r8]
   18206:	2968      	cmp	r1, #104	; 0x68
   18208:	bf03      	ittte	eq
   1820a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1820e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   18212:	f108 0801 	addeq.w	r8, r8, #1
   18216:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1821a:	e51c      	b.n	17c56 <_vfiprintf_r+0xe6>
   1821c:	f046 0310 	orr.w	r3, r6, #16
   18220:	9303      	str	r3, [sp, #12]
   18222:	9b03      	ldr	r3, [sp, #12]
   18224:	f013 0220 	ands.w	r2, r3, #32
   18228:	f000 8206 	beq.w	18638 <_vfiprintf_r+0xac8>
   1822c:	9b07      	ldr	r3, [sp, #28]
   1822e:	3307      	adds	r3, #7
   18230:	f023 0307 	bic.w	r3, r3, #7
   18234:	4619      	mov	r1, r3
   18236:	685a      	ldr	r2, [r3, #4]
   18238:	f851 3b08 	ldr.w	r3, [r1], #8
   1823c:	9107      	str	r1, [sp, #28]
   1823e:	2101      	movs	r1, #1
   18240:	e60d      	b.n	17e5e <_vfiprintf_r+0x2ee>
   18242:	9a07      	ldr	r2, [sp, #28]
   18244:	f046 0302 	orr.w	r3, r6, #2
   18248:	9303      	str	r3, [sp, #12]
   1824a:	f852 3b04 	ldr.w	r3, [r2], #4
   1824e:	9207      	str	r2, [sp, #28]
   18250:	f647 0230 	movw	r2, #30768	; 0x7830
   18254:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   18258:	4ab8      	ldr	r2, [pc, #736]	; (1853c <_vfiprintf_r+0x9cc>)
   1825a:	920c      	str	r2, [sp, #48]	; 0x30
   1825c:	2102      	movs	r1, #2
   1825e:	2200      	movs	r2, #0
   18260:	e5fd      	b.n	17e5e <_vfiprintf_r+0x2ee>
   18262:	06b7      	lsls	r7, r6, #26
   18264:	f100 8248 	bmi.w	186f8 <_vfiprintf_r+0xb88>
   18268:	06f5      	lsls	r5, r6, #27
   1826a:	f100 8346 	bmi.w	188fa <_vfiprintf_r+0xd8a>
   1826e:	0674      	lsls	r4, r6, #25
   18270:	f100 83d5 	bmi.w	18a1e <_vfiprintf_r+0xeae>
   18274:	05b0      	lsls	r0, r6, #22
   18276:	f140 8340 	bpl.w	188fa <_vfiprintf_r+0xd8a>
   1827a:	9b07      	ldr	r3, [sp, #28]
   1827c:	9905      	ldr	r1, [sp, #20]
   1827e:	f853 2b04 	ldr.w	r2, [r3], #4
   18282:	9307      	str	r3, [sp, #28]
   18284:	7011      	strb	r1, [r2, #0]
   18286:	e4be      	b.n	17c06 <_vfiprintf_r+0x96>
   18288:	9603      	str	r6, [sp, #12]
   1828a:	2901      	cmp	r1, #1
   1828c:	f43f ad8c 	beq.w	17da8 <_vfiprintf_r+0x238>
   18290:	2902      	cmp	r1, #2
   18292:	ac44      	add	r4, sp, #272	; 0x110
   18294:	d111      	bne.n	182ba <_vfiprintf_r+0x74a>
   18296:	980c      	ldr	r0, [sp, #48]	; 0x30
   18298:	f003 010f 	and.w	r1, r3, #15
   1829c:	091b      	lsrs	r3, r3, #4
   1829e:	5c41      	ldrb	r1, [r0, r1]
   182a0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   182a4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   182a8:	0912      	lsrs	r2, r2, #4
   182aa:	ea53 0102 	orrs.w	r1, r3, r2
   182ae:	d1f3      	bne.n	18298 <_vfiprintf_r+0x728>
   182b0:	9e03      	ldr	r6, [sp, #12]
   182b2:	ab44      	add	r3, sp, #272	; 0x110
   182b4:	1b1b      	subs	r3, r3, r4
   182b6:	9304      	str	r3, [sp, #16]
   182b8:	e583      	b.n	17dc2 <_vfiprintf_r+0x252>
   182ba:	f003 0107 	and.w	r1, r3, #7
   182be:	08db      	lsrs	r3, r3, #3
   182c0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   182c4:	08d2      	lsrs	r2, r2, #3
   182c6:	3130      	adds	r1, #48	; 0x30
   182c8:	ea53 0502 	orrs.w	r5, r3, r2
   182cc:	4620      	mov	r0, r4
   182ce:	f804 1d01 	strb.w	r1, [r4, #-1]!
   182d2:	d1f2      	bne.n	182ba <_vfiprintf_r+0x74a>
   182d4:	9e03      	ldr	r6, [sp, #12]
   182d6:	07f3      	lsls	r3, r6, #31
   182d8:	d5eb      	bpl.n	182b2 <_vfiprintf_r+0x742>
   182da:	2930      	cmp	r1, #48	; 0x30
   182dc:	d0e8      	beq.n	182b0 <_vfiprintf_r+0x740>
   182de:	2330      	movs	r3, #48	; 0x30
   182e0:	3802      	subs	r0, #2
   182e2:	f804 3c01 	strb.w	r3, [r4, #-1]
   182e6:	ab44      	add	r3, sp, #272	; 0x110
   182e8:	1a1b      	subs	r3, r3, r0
   182ea:	9e03      	ldr	r6, [sp, #12]
   182ec:	9304      	str	r3, [sp, #16]
   182ee:	4604      	mov	r4, r0
   182f0:	e567      	b.n	17dc2 <_vfiprintf_r+0x252>
   182f2:	9b04      	ldr	r3, [sp, #16]
   182f4:	941b      	str	r4, [sp, #108]	; 0x6c
   182f6:	2201      	movs	r2, #1
   182f8:	931c      	str	r3, [sp, #112]	; 0x70
   182fa:	931a      	str	r3, [sp, #104]	; 0x68
   182fc:	9219      	str	r2, [sp, #100]	; 0x64
   182fe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18302:	f109 0908 	add.w	r9, r9, #8
   18306:	e69d      	b.n	18044 <_vfiprintf_r+0x4d4>
   18308:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1830c:	e47b      	b.n	17c06 <_vfiprintf_r+0x96>
   1830e:	9a06      	ldr	r2, [sp, #24]
   18310:	9d03      	ldr	r5, [sp, #12]
   18312:	1b55      	subs	r5, r2, r5
   18314:	2d00      	cmp	r5, #0
   18316:	f77f ae76 	ble.w	18006 <_vfiprintf_r+0x496>
   1831a:	2d10      	cmp	r5, #16
   1831c:	f340 83bb 	ble.w	18a96 <_vfiprintf_r+0xf26>
   18320:	9409      	str	r4, [sp, #36]	; 0x24
   18322:	ee18 4a10 	vmov	r4, s16
   18326:	e007      	b.n	18338 <_vfiprintf_r+0x7c8>
   18328:	f100 0c02 	add.w	ip, r0, #2
   1832c:	f109 0908 	add.w	r9, r9, #8
   18330:	4610      	mov	r0, r2
   18332:	3d10      	subs	r5, #16
   18334:	2d10      	cmp	r5, #16
   18336:	dd1e      	ble.n	18376 <_vfiprintf_r+0x806>
   18338:	4981      	ldr	r1, [pc, #516]	; (18540 <_vfiprintf_r+0x9d0>)
   1833a:	f8c9 1000 	str.w	r1, [r9]
   1833e:	1c42      	adds	r2, r0, #1
   18340:	3310      	adds	r3, #16
   18342:	2110      	movs	r1, #16
   18344:	2a07      	cmp	r2, #7
   18346:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1834a:	f8c9 1004 	str.w	r1, [r9, #4]
   1834e:	ddeb      	ble.n	18328 <_vfiprintf_r+0x7b8>
   18350:	aa18      	add	r2, sp, #96	; 0x60
   18352:	2b00      	cmp	r3, #0
   18354:	d074      	beq.n	18440 <_vfiprintf_r+0x8d0>
   18356:	4621      	mov	r1, r4
   18358:	4658      	mov	r0, fp
   1835a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1835e:	f7ff fbcb 	bl	17af8 <__sprint_r.part.0>
   18362:	2800      	cmp	r0, #0
   18364:	f47f addb 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   18368:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1836c:	3d10      	subs	r5, #16
   1836e:	2d10      	cmp	r5, #16
   18370:	f100 0c01 	add.w	ip, r0, #1
   18374:	dce0      	bgt.n	18338 <_vfiprintf_r+0x7c8>
   18376:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18378:	4a71      	ldr	r2, [pc, #452]	; (18540 <_vfiprintf_r+0x9d0>)
   1837a:	f8c9 5004 	str.w	r5, [r9, #4]
   1837e:	442b      	add	r3, r5
   18380:	f1bc 0f07 	cmp.w	ip, #7
   18384:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   18388:	f8c9 2000 	str.w	r2, [r9]
   1838c:	f340 8194 	ble.w	186b8 <_vfiprintf_r+0xb48>
   18390:	2b00      	cmp	r3, #0
   18392:	f000 831f 	beq.w	189d4 <_vfiprintf_r+0xe64>
   18396:	ee18 1a10 	vmov	r1, s16
   1839a:	aa18      	add	r2, sp, #96	; 0x60
   1839c:	4658      	mov	r0, fp
   1839e:	f7ff fbab 	bl	17af8 <__sprint_r.part.0>
   183a2:	2800      	cmp	r0, #0
   183a4:	f47f adbb 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   183a8:	9a04      	ldr	r2, [sp, #16]
   183aa:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   183ae:	1abd      	subs	r5, r7, r2
   183b0:	2d00      	cmp	r5, #0
   183b2:	f100 0101 	add.w	r1, r0, #1
   183b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   183ba:	f77f ae29 	ble.w	18010 <_vfiprintf_r+0x4a0>
   183be:	2d10      	cmp	r5, #16
   183c0:	dd29      	ble.n	18416 <_vfiprintf_r+0x8a6>
   183c2:	9409      	str	r4, [sp, #36]	; 0x24
   183c4:	2710      	movs	r7, #16
   183c6:	ee18 4a10 	vmov	r4, s16
   183ca:	e007      	b.n	183dc <_vfiprintf_r+0x86c>
   183cc:	f100 0c02 	add.w	ip, r0, #2
   183d0:	f109 0908 	add.w	r9, r9, #8
   183d4:	4610      	mov	r0, r2
   183d6:	3d10      	subs	r5, #16
   183d8:	2d10      	cmp	r5, #16
   183da:	dd1a      	ble.n	18412 <_vfiprintf_r+0x8a2>
   183dc:	1c42      	adds	r2, r0, #1
   183de:	4958      	ldr	r1, [pc, #352]	; (18540 <_vfiprintf_r+0x9d0>)
   183e0:	3310      	adds	r3, #16
   183e2:	2a07      	cmp	r2, #7
   183e4:	e9c9 1700 	strd	r1, r7, [r9]
   183e8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   183ec:	ddee      	ble.n	183cc <_vfiprintf_r+0x85c>
   183ee:	aa18      	add	r2, sp, #96	; 0x60
   183f0:	b303      	cbz	r3, 18434 <_vfiprintf_r+0x8c4>
   183f2:	4621      	mov	r1, r4
   183f4:	4658      	mov	r0, fp
   183f6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   183fa:	f7ff fb7d 	bl	17af8 <__sprint_r.part.0>
   183fe:	2800      	cmp	r0, #0
   18400:	f47f ad8d 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   18404:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18408:	3d10      	subs	r5, #16
   1840a:	2d10      	cmp	r5, #16
   1840c:	f100 0c01 	add.w	ip, r0, #1
   18410:	dce4      	bgt.n	183dc <_vfiprintf_r+0x86c>
   18412:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18414:	4661      	mov	r1, ip
   18416:	4a4a      	ldr	r2, [pc, #296]	; (18540 <_vfiprintf_r+0x9d0>)
   18418:	f8c9 5004 	str.w	r5, [r9, #4]
   1841c:	442b      	add	r3, r5
   1841e:	2907      	cmp	r1, #7
   18420:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   18424:	f8c9 2000 	str.w	r2, [r9]
   18428:	f300 80e7 	bgt.w	185fa <_vfiprintf_r+0xa8a>
   1842c:	f109 0908 	add.w	r9, r9, #8
   18430:	3101      	adds	r1, #1
   18432:	e5ed      	b.n	18010 <_vfiprintf_r+0x4a0>
   18434:	f04f 0c01 	mov.w	ip, #1
   18438:	4618      	mov	r0, r3
   1843a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1843e:	e7ca      	b.n	183d6 <_vfiprintf_r+0x866>
   18440:	f04f 0c01 	mov.w	ip, #1
   18444:	4618      	mov	r0, r3
   18446:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1844a:	e772      	b.n	18332 <_vfiprintf_r+0x7c2>
   1844c:	2b00      	cmp	r3, #0
   1844e:	f000 8104 	beq.w	1865a <_vfiprintf_r+0xaea>
   18452:	ee18 1a10 	vmov	r1, s16
   18456:	aa18      	add	r2, sp, #96	; 0x60
   18458:	4658      	mov	r0, fp
   1845a:	f7ff fb4d 	bl	17af8 <__sprint_r.part.0>
   1845e:	2800      	cmp	r0, #0
   18460:	f47f ad5d 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   18464:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18468:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1846c:	1c41      	adds	r1, r0, #1
   1846e:	e5a7      	b.n	17fc0 <_vfiprintf_r+0x450>
   18470:	2302      	movs	r3, #2
   18472:	aa11      	add	r2, sp, #68	; 0x44
   18474:	931c      	str	r3, [sp, #112]	; 0x70
   18476:	921b      	str	r2, [sp, #108]	; 0x6c
   18478:	2101      	movs	r1, #1
   1847a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1847e:	4608      	mov	r0, r1
   18480:	f109 0908 	add.w	r9, r9, #8
   18484:	1c41      	adds	r1, r0, #1
   18486:	e5ba      	b.n	17ffe <_vfiprintf_r+0x48e>
   18488:	2d10      	cmp	r5, #16
   1848a:	f340 82e5 	ble.w	18a58 <_vfiprintf_r+0xee8>
   1848e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   18492:	940f      	str	r4, [sp, #60]	; 0x3c
   18494:	4608      	mov	r0, r1
   18496:	ee18 4a10 	vmov	r4, s16
   1849a:	e007      	b.n	184ac <_vfiprintf_r+0x93c>
   1849c:	f100 0c02 	add.w	ip, r0, #2
   184a0:	f109 0908 	add.w	r9, r9, #8
   184a4:	4610      	mov	r0, r2
   184a6:	3d10      	subs	r5, #16
   184a8:	2d10      	cmp	r5, #16
   184aa:	dd1d      	ble.n	184e8 <_vfiprintf_r+0x978>
   184ac:	4925      	ldr	r1, [pc, #148]	; (18544 <_vfiprintf_r+0x9d4>)
   184ae:	f8c9 1000 	str.w	r1, [r9]
   184b2:	1c42      	adds	r2, r0, #1
   184b4:	3310      	adds	r3, #16
   184b6:	2110      	movs	r1, #16
   184b8:	2a07      	cmp	r2, #7
   184ba:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   184be:	f8c9 1004 	str.w	r1, [r9, #4]
   184c2:	ddeb      	ble.n	1849c <_vfiprintf_r+0x92c>
   184c4:	aa18      	add	r2, sp, #96	; 0x60
   184c6:	b303      	cbz	r3, 1850a <_vfiprintf_r+0x99a>
   184c8:	4621      	mov	r1, r4
   184ca:	4658      	mov	r0, fp
   184cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   184d0:	f7ff fb12 	bl	17af8 <__sprint_r.part.0>
   184d4:	2800      	cmp	r0, #0
   184d6:	f47f ad22 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   184da:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   184de:	3d10      	subs	r5, #16
   184e0:	2d10      	cmp	r5, #16
   184e2:	f100 0c01 	add.w	ip, r0, #1
   184e6:	dce1      	bgt.n	184ac <_vfiprintf_r+0x93c>
   184e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   184ea:	4660      	mov	r0, ip
   184ec:	4a15      	ldr	r2, [pc, #84]	; (18544 <_vfiprintf_r+0x9d4>)
   184ee:	f8c9 5004 	str.w	r5, [r9, #4]
   184f2:	442b      	add	r3, r5
   184f4:	2807      	cmp	r0, #7
   184f6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   184fa:	f8c9 2000 	str.w	r2, [r9]
   184fe:	f300 80c1 	bgt.w	18684 <_vfiprintf_r+0xb14>
   18502:	f109 0908 	add.w	r9, r9, #8
   18506:	1c41      	adds	r1, r0, #1
   18508:	e546      	b.n	17f98 <_vfiprintf_r+0x428>
   1850a:	4618      	mov	r0, r3
   1850c:	f04f 0c01 	mov.w	ip, #1
   18510:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18514:	e7c7      	b.n	184a6 <_vfiprintf_r+0x936>
   18516:	0776      	lsls	r6, r6, #29
   18518:	9319      	str	r3, [sp, #100]	; 0x64
   1851a:	d553      	bpl.n	185c4 <_vfiprintf_r+0xa54>
   1851c:	9a06      	ldr	r2, [sp, #24]
   1851e:	9903      	ldr	r1, [sp, #12]
   18520:	1a54      	subs	r4, r2, r1
   18522:	2c00      	cmp	r4, #0
   18524:	dd4e      	ble.n	185c4 <_vfiprintf_r+0xa54>
   18526:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1852a:	2c10      	cmp	r4, #16
   1852c:	f340 82b0 	ble.w	18a90 <_vfiprintf_r+0xf20>
   18530:	9919      	ldr	r1, [sp, #100]	; 0x64
   18532:	ee18 6a10 	vmov	r6, s16
   18536:	2510      	movs	r5, #16
   18538:	e00d      	b.n	18556 <_vfiprintf_r+0x9e6>
   1853a:	bf00      	nop
   1853c:	200010b8 	.word	0x200010b8
   18540:	20008918 	.word	0x20008918
   18544:	20002b70 	.word	0x20002b70
   18548:	1c88      	adds	r0, r1, #2
   1854a:	f109 0908 	add.w	r9, r9, #8
   1854e:	4611      	mov	r1, r2
   18550:	3c10      	subs	r4, #16
   18552:	2c10      	cmp	r4, #16
   18554:	dd1a      	ble.n	1858c <_vfiprintf_r+0xa1c>
   18556:	1c4a      	adds	r2, r1, #1
   18558:	48b3      	ldr	r0, [pc, #716]	; (18828 <_vfiprintf_r+0xcb8>)
   1855a:	3310      	adds	r3, #16
   1855c:	2a07      	cmp	r2, #7
   1855e:	e9c9 0500 	strd	r0, r5, [r9]
   18562:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   18566:	ddef      	ble.n	18548 <_vfiprintf_r+0x9d8>
   18568:	aa18      	add	r2, sp, #96	; 0x60
   1856a:	b333      	cbz	r3, 185ba <_vfiprintf_r+0xa4a>
   1856c:	4631      	mov	r1, r6
   1856e:	4658      	mov	r0, fp
   18570:	f7ff fac2 	bl	17af8 <__sprint_r.part.0>
   18574:	2800      	cmp	r0, #0
   18576:	f47f acd2 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   1857a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1857e:	3c10      	subs	r4, #16
   18580:	2c10      	cmp	r4, #16
   18582:	f101 0001 	add.w	r0, r1, #1
   18586:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1858a:	dce4      	bgt.n	18556 <_vfiprintf_r+0x9e6>
   1858c:	4aa6      	ldr	r2, [pc, #664]	; (18828 <_vfiprintf_r+0xcb8>)
   1858e:	f8c9 4004 	str.w	r4, [r9, #4]
   18592:	4423      	add	r3, r4
   18594:	2807      	cmp	r0, #7
   18596:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1859a:	f8c9 2000 	str.w	r2, [r9]
   1859e:	f77f ad59 	ble.w	18054 <_vfiprintf_r+0x4e4>
   185a2:	b17b      	cbz	r3, 185c4 <_vfiprintf_r+0xa54>
   185a4:	ee18 1a10 	vmov	r1, s16
   185a8:	aa18      	add	r2, sp, #96	; 0x60
   185aa:	4658      	mov	r0, fp
   185ac:	f7ff faa4 	bl	17af8 <__sprint_r.part.0>
   185b0:	2800      	cmp	r0, #0
   185b2:	f47f acb4 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   185b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   185b8:	e54c      	b.n	18054 <_vfiprintf_r+0x4e4>
   185ba:	2001      	movs	r0, #1
   185bc:	4619      	mov	r1, r3
   185be:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   185c2:	e7c5      	b.n	18550 <_vfiprintf_r+0x9e0>
   185c4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   185c8:	9903      	ldr	r1, [sp, #12]
   185ca:	428a      	cmp	r2, r1
   185cc:	bfac      	ite	ge
   185ce:	189b      	addge	r3, r3, r2
   185d0:	185b      	addlt	r3, r3, r1
   185d2:	9305      	str	r3, [sp, #20]
   185d4:	e549      	b.n	1806a <_vfiprintf_r+0x4fa>
   185d6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   185da:	058f      	lsls	r7, r1, #22
   185dc:	ee18 3a10 	vmov	r3, s16
   185e0:	b28a      	uxth	r2, r1
   185e2:	f53f aae8 	bmi.w	17bb6 <_vfiprintf_r+0x46>
   185e6:	ee18 5a10 	vmov	r5, s16
   185ea:	6d98      	ldr	r0, [r3, #88]	; 0x58
   185ec:	f7f8 fcba 	bl	10f64 <__retarget_lock_acquire_recursive>
   185f0:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   185f4:	b28a      	uxth	r2, r1
   185f6:	f7ff bade 	b.w	17bb6 <_vfiprintf_r+0x46>
   185fa:	2b00      	cmp	r3, #0
   185fc:	f43f ae79 	beq.w	182f2 <_vfiprintf_r+0x782>
   18600:	ee18 1a10 	vmov	r1, s16
   18604:	aa18      	add	r2, sp, #96	; 0x60
   18606:	4658      	mov	r0, fp
   18608:	f7ff fa76 	bl	17af8 <__sprint_r.part.0>
   1860c:	2800      	cmp	r0, #0
   1860e:	f47f ac86 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   18612:	9919      	ldr	r1, [sp, #100]	; 0x64
   18614:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18616:	3101      	adds	r1, #1
   18618:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1861c:	e4f8      	b.n	18010 <_vfiprintf_r+0x4a0>
   1861e:	9219      	str	r2, [sp, #100]	; 0x64
   18620:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18624:	e45e      	b.n	17ee4 <_vfiprintf_r+0x374>
   18626:	2f00      	cmp	r7, #0
   18628:	f47f abc3 	bne.w	17db2 <_vfiprintf_r+0x242>
   1862c:	9e03      	ldr	r6, [sp, #12]
   1862e:	2700      	movs	r7, #0
   18630:	9704      	str	r7, [sp, #16]
   18632:	ac44      	add	r4, sp, #272	; 0x110
   18634:	f7ff bbc5 	b.w	17dc2 <_vfiprintf_r+0x252>
   18638:	9b03      	ldr	r3, [sp, #12]
   1863a:	f013 0310 	ands.w	r3, r3, #16
   1863e:	d154      	bne.n	186ea <_vfiprintf_r+0xb7a>
   18640:	9a03      	ldr	r2, [sp, #12]
   18642:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   18646:	f000 816b 	beq.w	18920 <_vfiprintf_r+0xdb0>
   1864a:	9907      	ldr	r1, [sp, #28]
   1864c:	461a      	mov	r2, r3
   1864e:	f851 3b04 	ldr.w	r3, [r1], #4
   18652:	9107      	str	r1, [sp, #28]
   18654:	b29b      	uxth	r3, r3
   18656:	2101      	movs	r1, #1
   18658:	e401      	b.n	17e5e <_vfiprintf_r+0x2ee>
   1865a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1865c:	2a00      	cmp	r2, #0
   1865e:	d164      	bne.n	1872a <_vfiprintf_r+0xbba>
   18660:	4618      	mov	r0, r3
   18662:	2101      	movs	r1, #1
   18664:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18668:	e4c9      	b.n	17ffe <_vfiprintf_r+0x48e>
   1866a:	2101      	movs	r1, #1
   1866c:	4618      	mov	r0, r3
   1866e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18672:	e4c4      	b.n	17ffe <_vfiprintf_r+0x48e>
   18674:	425b      	negs	r3, r3
   18676:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1867a:	9603      	str	r6, [sp, #12]
   1867c:	202d      	movs	r0, #45	; 0x2d
   1867e:	2101      	movs	r1, #1
   18680:	f7ff bbee 	b.w	17e60 <_vfiprintf_r+0x2f0>
   18684:	2b00      	cmp	r3, #0
   18686:	f000 8088 	beq.w	1879a <_vfiprintf_r+0xc2a>
   1868a:	ee18 1a10 	vmov	r1, s16
   1868e:	aa18      	add	r2, sp, #96	; 0x60
   18690:	4658      	mov	r0, fp
   18692:	f7ff fa31 	bl	17af8 <__sprint_r.part.0>
   18696:	2800      	cmp	r0, #0
   18698:	f47f ac41 	bne.w	17f1e <_vfiprintf_r+0x3ae>
   1869c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   186a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   186a4:	1c41      	adds	r1, r0, #1
   186a6:	e477      	b.n	17f98 <_vfiprintf_r+0x428>
   186a8:	f898 1000 	ldrb.w	r1, [r8]
   186ac:	9307      	str	r3, [sp, #28]
   186ae:	f7ff bad2 	b.w	17c56 <_vfiprintf_r+0xe6>
   186b2:	ac44      	add	r4, sp, #272	; 0x110
   186b4:	f7ff bb85 	b.w	17dc2 <_vfiprintf_r+0x252>
   186b8:	f109 0908 	add.w	r9, r9, #8
   186bc:	f10c 0101 	add.w	r1, ip, #1
   186c0:	4660      	mov	r0, ip
   186c2:	e4a0      	b.n	18006 <_vfiprintf_r+0x496>
   186c4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   186c8:	f040 8197 	bne.w	189fa <_vfiprintf_r+0xe8a>
   186cc:	f851 3b04 	ldr.w	r3, [r1], #4
   186d0:	9107      	str	r1, [sp, #28]
   186d2:	f7ff bbc0 	b.w	17e56 <_vfiprintf_r+0x2e6>
   186d6:	05b3      	lsls	r3, r6, #22
   186d8:	f100 8188 	bmi.w	189ec <_vfiprintf_r+0xe7c>
   186dc:	f852 3b04 	ldr.w	r3, [r2], #4
   186e0:	9207      	str	r2, [sp, #28]
   186e2:	17da      	asrs	r2, r3, #31
   186e4:	4611      	mov	r1, r2
   186e6:	f7ff bb52 	b.w	17d8e <_vfiprintf_r+0x21e>
   186ea:	9907      	ldr	r1, [sp, #28]
   186ec:	f851 3b04 	ldr.w	r3, [r1], #4
   186f0:	9107      	str	r1, [sp, #28]
   186f2:	2101      	movs	r1, #1
   186f4:	f7ff bbb3 	b.w	17e5e <_vfiprintf_r+0x2ee>
   186f8:	9b07      	ldr	r3, [sp, #28]
   186fa:	9805      	ldr	r0, [sp, #20]
   186fc:	f853 1b04 	ldr.w	r1, [r3], #4
   18700:	9307      	str	r3, [sp, #28]
   18702:	17c2      	asrs	r2, r0, #31
   18704:	e9c1 0200 	strd	r0, r2, [r1]
   18708:	f7ff ba7d 	b.w	17c06 <_vfiprintf_r+0x96>
   1870c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1870e:	2b00      	cmp	r3, #0
   18710:	f43f ab26 	beq.w	17d60 <_vfiprintf_r+0x1f0>
   18714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18716:	781b      	ldrb	r3, [r3, #0]
   18718:	2b00      	cmp	r3, #0
   1871a:	f43f ab21 	beq.w	17d60 <_vfiprintf_r+0x1f0>
   1871e:	f898 1000 	ldrb.w	r1, [r8]
   18722:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   18726:	f7ff ba96 	b.w	17c56 <_vfiprintf_r+0xe6>
   1872a:	2302      	movs	r3, #2
   1872c:	aa11      	add	r2, sp, #68	; 0x44
   1872e:	931c      	str	r3, [sp, #112]	; 0x70
   18730:	921b      	str	r2, [sp, #108]	; 0x6c
   18732:	2001      	movs	r0, #1
   18734:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18738:	e6a2      	b.n	18480 <_vfiprintf_r+0x910>
   1873a:	9603      	str	r6, [sp, #12]
   1873c:	e571      	b.n	18222 <_vfiprintf_r+0x6b2>
   1873e:	4b3b      	ldr	r3, [pc, #236]	; (1882c <_vfiprintf_r+0xcbc>)
   18740:	930c      	str	r3, [sp, #48]	; 0x30
   18742:	f016 0220 	ands.w	r2, r6, #32
   18746:	d059      	beq.n	187fc <_vfiprintf_r+0xc8c>
   18748:	9b07      	ldr	r3, [sp, #28]
   1874a:	3307      	adds	r3, #7
   1874c:	f023 0307 	bic.w	r3, r3, #7
   18750:	4618      	mov	r0, r3
   18752:	685a      	ldr	r2, [r3, #4]
   18754:	f850 3b08 	ldr.w	r3, [r0], #8
   18758:	9007      	str	r0, [sp, #28]
   1875a:	07f4      	lsls	r4, r6, #31
   1875c:	d509      	bpl.n	18772 <_vfiprintf_r+0xc02>
   1875e:	ea53 0002 	orrs.w	r0, r3, r2
   18762:	d006      	beq.n	18772 <_vfiprintf_r+0xc02>
   18764:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   18768:	2130      	movs	r1, #48	; 0x30
   1876a:	f046 0602 	orr.w	r6, r6, #2
   1876e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   18772:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   18776:	9103      	str	r1, [sp, #12]
   18778:	2102      	movs	r1, #2
   1877a:	f7ff bb70 	b.w	17e5e <_vfiprintf_r+0x2ee>
   1877e:	4b2c      	ldr	r3, [pc, #176]	; (18830 <_vfiprintf_r+0xcc0>)
   18780:	930c      	str	r3, [sp, #48]	; 0x30
   18782:	e7de      	b.n	18742 <_vfiprintf_r+0xbd2>
   18784:	9b07      	ldr	r3, [sp, #28]
   18786:	2101      	movs	r1, #1
   18788:	f853 2b04 	ldr.w	r2, [r3], #4
   1878c:	9103      	str	r1, [sp, #12]
   1878e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   18792:	9307      	str	r3, [sp, #28]
   18794:	9104      	str	r1, [sp, #16]
   18796:	ac2b      	add	r4, sp, #172	; 0xac
   18798:	e4df      	b.n	1815a <_vfiprintf_r+0x5ea>
   1879a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1879e:	2a00      	cmp	r2, #0
   187a0:	f040 8132 	bne.w	18a08 <_vfiprintf_r+0xe98>
   187a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   187a6:	2a00      	cmp	r2, #0
   187a8:	f47f ae62 	bne.w	18470 <_vfiprintf_r+0x900>
   187ac:	4618      	mov	r0, r3
   187ae:	2101      	movs	r1, #1
   187b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   187b4:	e427      	b.n	18006 <_vfiprintf_r+0x496>
   187b6:	2100      	movs	r1, #0
   187b8:	2208      	movs	r2, #8
   187ba:	a816      	add	r0, sp, #88	; 0x58
   187bc:	9413      	str	r4, [sp, #76]	; 0x4c
   187be:	f7f8 fa17 	bl	10bf0 <memset>
   187c2:	1c79      	adds	r1, r7, #1
   187c4:	f000 80bc 	beq.w	18940 <_vfiprintf_r+0xdd0>
   187c8:	2500      	movs	r5, #0
   187ca:	9407      	str	r4, [sp, #28]
   187cc:	462c      	mov	r4, r5
   187ce:	e00c      	b.n	187ea <_vfiprintf_r+0xc7a>
   187d0:	a92b      	add	r1, sp, #172	; 0xac
   187d2:	4658      	mov	r0, fp
   187d4:	f7fe ff2e 	bl	17634 <_wcrtomb_r>
   187d8:	1c42      	adds	r2, r0, #1
   187da:	4420      	add	r0, r4
   187dc:	f000 816b 	beq.w	18ab6 <_vfiprintf_r+0xf46>
   187e0:	42b8      	cmp	r0, r7
   187e2:	dc08      	bgt.n	187f6 <_vfiprintf_r+0xc86>
   187e4:	f000 8170 	beq.w	18ac8 <_vfiprintf_r+0xf58>
   187e8:	4604      	mov	r4, r0
   187ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   187ec:	5952      	ldr	r2, [r2, r5]
   187ee:	ab16      	add	r3, sp, #88	; 0x58
   187f0:	3504      	adds	r5, #4
   187f2:	2a00      	cmp	r2, #0
   187f4:	d1ec      	bne.n	187d0 <_vfiprintf_r+0xc60>
   187f6:	9404      	str	r4, [sp, #16]
   187f8:	9c07      	ldr	r4, [sp, #28]
   187fa:	e0af      	b.n	1895c <_vfiprintf_r+0xdec>
   187fc:	f016 0310 	ands.w	r3, r6, #16
   18800:	9807      	ldr	r0, [sp, #28]
   18802:	d10c      	bne.n	1881e <_vfiprintf_r+0xcae>
   18804:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   18808:	d005      	beq.n	18816 <_vfiprintf_r+0xca6>
   1880a:	461a      	mov	r2, r3
   1880c:	f850 3b04 	ldr.w	r3, [r0], #4
   18810:	9007      	str	r0, [sp, #28]
   18812:	b29b      	uxth	r3, r3
   18814:	e7a1      	b.n	1875a <_vfiprintf_r+0xbea>
   18816:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1881a:	f040 80e1 	bne.w	189e0 <_vfiprintf_r+0xe70>
   1881e:	f850 3b04 	ldr.w	r3, [r0], #4
   18822:	9007      	str	r0, [sp, #28]
   18824:	e799      	b.n	1875a <_vfiprintf_r+0xbea>
   18826:	bf00      	nop
   18828:	20002b70 	.word	0x20002b70
   1882c:	200010b8 	.word	0x200010b8
   18830:	200010cc 	.word	0x200010cc
   18834:	9903      	ldr	r1, [sp, #12]
   18836:	9704      	str	r7, [sp, #16]
   18838:	ac44      	add	r4, sp, #272	; 0x110
   1883a:	469e      	mov	lr, r3
   1883c:	ee08 ba90 	vmov	s17, fp
   18840:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   18844:	f04f 0c00 	mov.w	ip, #0
   18848:	4623      	mov	r3, r4
   1884a:	e006      	b.n	1885a <_vfiprintf_r+0xcea>
   1884c:	f1be 0f0a 	cmp.w	lr, #10
   18850:	f172 0200 	sbcs.w	r2, r2, #0
   18854:	d339      	bcc.n	188ca <_vfiprintf_r+0xd5a>
   18856:	46a6      	mov	lr, r4
   18858:	462a      	mov	r2, r5
   1885a:	49a6      	ldr	r1, [pc, #664]	; (18af4 <_vfiprintf_r+0xf84>)
   1885c:	eb1e 0002 	adds.w	r0, lr, r2
   18860:	f140 0000 	adc.w	r0, r0, #0
   18864:	460f      	mov	r7, r1
   18866:	fba1 1400 	umull	r1, r4, r1, r0
   1886a:	f024 0103 	bic.w	r1, r4, #3
   1886e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   18872:	1a40      	subs	r0, r0, r1
   18874:	ebbe 0100 	subs.w	r1, lr, r0
   18878:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1887c:	f162 0400 	sbc.w	r4, r2, #0
   18880:	fb05 f501 	mul.w	r5, r5, r1
   18884:	fb07 5504 	mla	r5, r7, r4, r5
   18888:	fba1 4107 	umull	r4, r1, r1, r7
   1888c:	440d      	add	r5, r1
   1888e:	2705      	movs	r7, #5
   18890:	f004 0101 	and.w	r1, r4, #1
   18894:	fba1 1b07 	umull	r1, fp, r1, r7
   18898:	1809      	adds	r1, r1, r0
   1889a:	0864      	lsrs	r4, r4, #1
   1889c:	3130      	adds	r1, #48	; 0x30
   1889e:	f803 1c01 	strb.w	r1, [r3, #-1]
   188a2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   188a6:	f10c 0c01 	add.w	ip, ip, #1
   188aa:	3b01      	subs	r3, #1
   188ac:	086d      	lsrs	r5, r5, #1
   188ae:	2e00      	cmp	r6, #0
   188b0:	d0cc      	beq.n	1884c <_vfiprintf_r+0xcdc>
   188b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   188b4:	7809      	ldrb	r1, [r1, #0]
   188b6:	4561      	cmp	r1, ip
   188b8:	d1c8      	bne.n	1884c <_vfiprintf_r+0xcdc>
   188ba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   188be:	d0c5      	beq.n	1884c <_vfiprintf_r+0xcdc>
   188c0:	f1be 0f0a 	cmp.w	lr, #10
   188c4:	f172 0200 	sbcs.w	r2, r2, #0
   188c8:	d26c      	bcs.n	189a4 <_vfiprintf_r+0xe34>
   188ca:	461c      	mov	r4, r3
   188cc:	ab44      	add	r3, sp, #272	; 0x110
   188ce:	1b1b      	subs	r3, r3, r4
   188d0:	9f04      	ldr	r7, [sp, #16]
   188d2:	9e03      	ldr	r6, [sp, #12]
   188d4:	9304      	str	r3, [sp, #16]
   188d6:	ee18 ba90 	vmov	fp, s17
   188da:	f7ff ba72 	b.w	17dc2 <_vfiprintf_r+0x252>
   188de:	9603      	str	r6, [sp, #12]
   188e0:	f7ff ba62 	b.w	17da8 <_vfiprintf_r+0x238>
   188e4:	4658      	mov	r0, fp
   188e6:	f7f7 ff4b 	bl	10780 <__sinit>
   188ea:	f7ff b95b 	b.w	17ba4 <_vfiprintf_r+0x34>
   188ee:	2901      	cmp	r1, #1
   188f0:	9603      	str	r6, [sp, #12]
   188f2:	f47f accd 	bne.w	18290 <_vfiprintf_r+0x720>
   188f6:	f7ff ba5c 	b.w	17db2 <_vfiprintf_r+0x242>
   188fa:	9b07      	ldr	r3, [sp, #28]
   188fc:	9905      	ldr	r1, [sp, #20]
   188fe:	f853 2b04 	ldr.w	r2, [r3], #4
   18902:	6011      	str	r1, [r2, #0]
   18904:	9307      	str	r3, [sp, #28]
   18906:	f7ff b97e 	b.w	17c06 <_vfiprintf_r+0x96>
   1890a:	2f06      	cmp	r7, #6
   1890c:	463b      	mov	r3, r7
   1890e:	9a03      	ldr	r2, [sp, #12]
   18910:	4c79      	ldr	r4, [pc, #484]	; (18af8 <_vfiprintf_r+0xf88>)
   18912:	9207      	str	r2, [sp, #28]
   18914:	bf28      	it	cs
   18916:	2306      	movcs	r3, #6
   18918:	9304      	str	r3, [sp, #16]
   1891a:	9303      	str	r3, [sp, #12]
   1891c:	f7ff bb25 	b.w	17f6a <_vfiprintf_r+0x3fa>
   18920:	9b03      	ldr	r3, [sp, #12]
   18922:	9907      	ldr	r1, [sp, #28]
   18924:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   18928:	bf14      	ite	ne
   1892a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1892e:	f851 3b04 	ldreq.w	r3, [r1], #4
   18932:	9107      	str	r1, [sp, #28]
   18934:	bf1c      	itt	ne
   18936:	4602      	movne	r2, r0
   18938:	b2db      	uxtbne	r3, r3
   1893a:	2101      	movs	r1, #1
   1893c:	f7ff ba8f 	b.w	17e5e <_vfiprintf_r+0x2ee>
   18940:	ab16      	add	r3, sp, #88	; 0x58
   18942:	9300      	str	r3, [sp, #0]
   18944:	2300      	movs	r3, #0
   18946:	4619      	mov	r1, r3
   18948:	aa13      	add	r2, sp, #76	; 0x4c
   1894a:	4658      	mov	r0, fp
   1894c:	f7fe fe98 	bl	17680 <_wcsrtombs_r>
   18950:	4603      	mov	r3, r0
   18952:	3301      	adds	r3, #1
   18954:	9004      	str	r0, [sp, #16]
   18956:	f000 80ae 	beq.w	18ab6 <_vfiprintf_r+0xf46>
   1895a:	9413      	str	r4, [sp, #76]	; 0x4c
   1895c:	9b04      	ldr	r3, [sp, #16]
   1895e:	2b00      	cmp	r3, #0
   18960:	d030      	beq.n	189c4 <_vfiprintf_r+0xe54>
   18962:	2b63      	cmp	r3, #99	; 0x63
   18964:	dc63      	bgt.n	18a2e <_vfiprintf_r+0xebe>
   18966:	2300      	movs	r3, #0
   18968:	9308      	str	r3, [sp, #32]
   1896a:	ac2b      	add	r4, sp, #172	; 0xac
   1896c:	2208      	movs	r2, #8
   1896e:	2100      	movs	r1, #0
   18970:	a816      	add	r0, sp, #88	; 0x58
   18972:	f7f8 f93d 	bl	10bf0 <memset>
   18976:	9d04      	ldr	r5, [sp, #16]
   18978:	ab16      	add	r3, sp, #88	; 0x58
   1897a:	9300      	str	r3, [sp, #0]
   1897c:	aa13      	add	r2, sp, #76	; 0x4c
   1897e:	462b      	mov	r3, r5
   18980:	4621      	mov	r1, r4
   18982:	4658      	mov	r0, fp
   18984:	f7fe fe7c 	bl	17680 <_wcsrtombs_r>
   18988:	4285      	cmp	r5, r0
   1898a:	f040 80ab 	bne.w	18ae4 <_vfiprintf_r+0xf74>
   1898e:	9b03      	ldr	r3, [sp, #12]
   18990:	9a04      	ldr	r2, [sp, #16]
   18992:	9307      	str	r3, [sp, #28]
   18994:	2300      	movs	r3, #0
   18996:	54a3      	strb	r3, [r4, r2]
   18998:	461f      	mov	r7, r3
   1899a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1899e:	9303      	str	r3, [sp, #12]
   189a0:	f7ff ba16 	b.w	17dd0 <_vfiprintf_r+0x260>
   189a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   189a6:	990d      	ldr	r1, [sp, #52]	; 0x34
   189a8:	1a9b      	subs	r3, r3, r2
   189aa:	4618      	mov	r0, r3
   189ac:	9308      	str	r3, [sp, #32]
   189ae:	f7f8 fa0d 	bl	10dcc <strncpy>
   189b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   189b4:	9b08      	ldr	r3, [sp, #32]
   189b6:	784a      	ldrb	r2, [r1, #1]
   189b8:	b10a      	cbz	r2, 189be <_vfiprintf_r+0xe4e>
   189ba:	3101      	adds	r1, #1
   189bc:	910b      	str	r1, [sp, #44]	; 0x2c
   189be:	f04f 0c00 	mov.w	ip, #0
   189c2:	e748      	b.n	18856 <_vfiprintf_r+0xce6>
   189c4:	9b03      	ldr	r3, [sp, #12]
   189c6:	9307      	str	r3, [sp, #28]
   189c8:	9b04      	ldr	r3, [sp, #16]
   189ca:	9303      	str	r3, [sp, #12]
   189cc:	461f      	mov	r7, r3
   189ce:	9308      	str	r3, [sp, #32]
   189d0:	f7ff b9fe 	b.w	17dd0 <_vfiprintf_r+0x260>
   189d4:	2101      	movs	r1, #1
   189d6:	4618      	mov	r0, r3
   189d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   189dc:	f7ff bb13 	b.w	18006 <_vfiprintf_r+0x496>
   189e0:	f850 3b04 	ldr.w	r3, [r0], #4
   189e4:	9007      	str	r0, [sp, #28]
   189e6:	4622      	mov	r2, r4
   189e8:	b2db      	uxtb	r3, r3
   189ea:	e6b6      	b.n	1875a <_vfiprintf_r+0xbea>
   189ec:	f912 3b04 	ldrsb.w	r3, [r2], #4
   189f0:	9207      	str	r2, [sp, #28]
   189f2:	17da      	asrs	r2, r3, #31
   189f4:	4611      	mov	r1, r2
   189f6:	f7ff b9ca 	b.w	17d8e <_vfiprintf_r+0x21e>
   189fa:	f851 3b04 	ldr.w	r3, [r1], #4
   189fe:	9107      	str	r1, [sp, #28]
   18a00:	4602      	mov	r2, r0
   18a02:	b2db      	uxtb	r3, r3
   18a04:	f7ff ba27 	b.w	17e56 <_vfiprintf_r+0x2e6>
   18a08:	2301      	movs	r3, #1
   18a0a:	931c      	str	r3, [sp, #112]	; 0x70
   18a0c:	2101      	movs	r1, #1
   18a0e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   18a12:	931b      	str	r3, [sp, #108]	; 0x6c
   18a14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18a18:	460b      	mov	r3, r1
   18a1a:	f7ff bacd 	b.w	17fb8 <_vfiprintf_r+0x448>
   18a1e:	9b07      	ldr	r3, [sp, #28]
   18a20:	9905      	ldr	r1, [sp, #20]
   18a22:	f853 2b04 	ldr.w	r2, [r3], #4
   18a26:	9307      	str	r3, [sp, #28]
   18a28:	8011      	strh	r1, [r2, #0]
   18a2a:	f7ff b8ec 	b.w	17c06 <_vfiprintf_r+0x96>
   18a2e:	1c59      	adds	r1, r3, #1
   18a30:	4658      	mov	r0, fp
   18a32:	f7f6 f96d 	bl	ed10 <_malloc_r>
   18a36:	4604      	mov	r4, r0
   18a38:	2800      	cmp	r0, #0
   18a3a:	d03c      	beq.n	18ab6 <_vfiprintf_r+0xf46>
   18a3c:	9008      	str	r0, [sp, #32]
   18a3e:	e795      	b.n	1896c <_vfiprintf_r+0xdfc>
   18a40:	6d88      	ldr	r0, [r1, #88]	; 0x58
   18a42:	f7f8 fa91 	bl	10f68 <__retarget_lock_release_recursive>
   18a46:	f7ff b9e9 	b.w	17e1c <_vfiprintf_r+0x2ac>
   18a4a:	9b03      	ldr	r3, [sp, #12]
   18a4c:	9307      	str	r3, [sp, #28]
   18a4e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   18a52:	9f08      	ldr	r7, [sp, #32]
   18a54:	f7ff b9bc 	b.w	17dd0 <_vfiprintf_r+0x260>
   18a58:	9819      	ldr	r0, [sp, #100]	; 0x64
   18a5a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18a5c:	3001      	adds	r0, #1
   18a5e:	e545      	b.n	184ec <_vfiprintf_r+0x97c>
   18a60:	9b03      	ldr	r3, [sp, #12]
   18a62:	9307      	str	r3, [sp, #28]
   18a64:	4620      	mov	r0, r4
   18a66:	f7f8 fcab 	bl	113c0 <strlen>
   18a6a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   18a6e:	462f      	mov	r7, r5
   18a70:	9004      	str	r0, [sp, #16]
   18a72:	9303      	str	r3, [sp, #12]
   18a74:	9508      	str	r5, [sp, #32]
   18a76:	f7ff b9ab 	b.w	17dd0 <_vfiprintf_r+0x260>
   18a7a:	ee18 1a10 	vmov	r1, s16
   18a7e:	aa18      	add	r2, sp, #96	; 0x60
   18a80:	4658      	mov	r0, fp
   18a82:	f7ff f839 	bl	17af8 <__sprint_r.part.0>
   18a86:	2800      	cmp	r0, #0
   18a88:	f43f aa36 	beq.w	17ef8 <_vfiprintf_r+0x388>
   18a8c:	f7ff ba4d 	b.w	17f2a <_vfiprintf_r+0x3ba>
   18a90:	9819      	ldr	r0, [sp, #100]	; 0x64
   18a92:	3001      	adds	r0, #1
   18a94:	e57a      	b.n	1858c <_vfiprintf_r+0xa1c>
   18a96:	468c      	mov	ip, r1
   18a98:	e46e      	b.n	18378 <_vfiprintf_r+0x808>
   18a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18a9c:	07d9      	lsls	r1, r3, #31
   18a9e:	d405      	bmi.n	18aac <_vfiprintf_r+0xf3c>
   18aa0:	89ab      	ldrh	r3, [r5, #12]
   18aa2:	059a      	lsls	r2, r3, #22
   18aa4:	d402      	bmi.n	18aac <_vfiprintf_r+0xf3c>
   18aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   18aa8:	f7f8 fa5e 	bl	10f68 <__retarget_lock_release_recursive>
   18aac:	f04f 33ff 	mov.w	r3, #4294967295
   18ab0:	9305      	str	r3, [sp, #20]
   18ab2:	f7ff ba49 	b.w	17f48 <_vfiprintf_r+0x3d8>
   18ab6:	ee18 2a10 	vmov	r2, s16
   18aba:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   18abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18ac2:	8193      	strh	r3, [r2, #12]
   18ac4:	f7ff ba35 	b.w	17f32 <_vfiprintf_r+0x3c2>
   18ac8:	9c07      	ldr	r4, [sp, #28]
   18aca:	9704      	str	r7, [sp, #16]
   18acc:	e746      	b.n	1895c <_vfiprintf_r+0xdec>
   18ace:	9b07      	ldr	r3, [sp, #28]
   18ad0:	f898 1001 	ldrb.w	r1, [r8, #1]
   18ad4:	f853 7b04 	ldr.w	r7, [r3], #4
   18ad8:	9307      	str	r3, [sp, #28]
   18ada:	4690      	mov	r8, r2
   18adc:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   18ae0:	f7ff b8b9 	b.w	17c56 <_vfiprintf_r+0xe6>
   18ae4:	ee18 2a10 	vmov	r2, s16
   18ae8:	8993      	ldrh	r3, [r2, #12]
   18aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18aee:	8193      	strh	r3, [r2, #12]
   18af0:	f7ff ba15 	b.w	17f1e <_vfiprintf_r+0x3ae>
   18af4:	cccccccd 	.word	0xcccccccd
   18af8:	200010e0 	.word	0x200010e0

00018afc <__sbprintf>:
   18afc:	b570      	push	{r4, r5, r6, lr}
   18afe:	460c      	mov	r4, r1
   18b00:	8989      	ldrh	r1, [r1, #12]
   18b02:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   18b06:	f021 0102 	bic.w	r1, r1, #2
   18b0a:	f8ad 1014 	strh.w	r1, [sp, #20]
   18b0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   18b10:	911b      	str	r1, [sp, #108]	; 0x6c
   18b12:	89e1      	ldrh	r1, [r4, #14]
   18b14:	f8ad 1016 	strh.w	r1, [sp, #22]
   18b18:	69e1      	ldr	r1, [r4, #28]
   18b1a:	9109      	str	r1, [sp, #36]	; 0x24
   18b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18b1e:	910b      	str	r1, [sp, #44]	; 0x2c
   18b20:	a91c      	add	r1, sp, #112	; 0x70
   18b22:	9102      	str	r1, [sp, #8]
   18b24:	9106      	str	r1, [sp, #24]
   18b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18b2a:	4606      	mov	r6, r0
   18b2c:	9104      	str	r1, [sp, #16]
   18b2e:	9107      	str	r1, [sp, #28]
   18b30:	a818      	add	r0, sp, #96	; 0x60
   18b32:	2100      	movs	r1, #0
   18b34:	e9cd 3200 	strd	r3, r2, [sp]
   18b38:	9108      	str	r1, [sp, #32]
   18b3a:	f7f8 fa0f 	bl	10f5c <__retarget_lock_init_recursive>
   18b3e:	e9dd 3200 	ldrd	r3, r2, [sp]
   18b42:	a902      	add	r1, sp, #8
   18b44:	4630      	mov	r0, r6
   18b46:	f7ff f813 	bl	17b70 <_vfiprintf_r>
   18b4a:	1e05      	subs	r5, r0, #0
   18b4c:	db07      	blt.n	18b5e <__sbprintf+0x62>
   18b4e:	a902      	add	r1, sp, #8
   18b50:	4630      	mov	r0, r6
   18b52:	f7fd fad3 	bl	160fc <_fflush_r>
   18b56:	2800      	cmp	r0, #0
   18b58:	bf18      	it	ne
   18b5a:	f04f 35ff 	movne.w	r5, #4294967295
   18b5e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   18b62:	065b      	lsls	r3, r3, #25
   18b64:	d503      	bpl.n	18b6e <__sbprintf+0x72>
   18b66:	89a3      	ldrh	r3, [r4, #12]
   18b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18b6c:	81a3      	strh	r3, [r4, #12]
   18b6e:	9818      	ldr	r0, [sp, #96]	; 0x60
   18b70:	f7f8 f9f6 	bl	10f60 <__retarget_lock_close_recursive>
   18b74:	4628      	mov	r0, r5
   18b76:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   18b7a:	bd70      	pop	{r4, r5, r6, pc}

00018b7c <__sfvwrite_r>:
   18b7c:	6893      	ldr	r3, [r2, #8]
   18b7e:	2b00      	cmp	r3, #0
   18b80:	f000 8085 	beq.w	18c8e <__sfvwrite_r+0x112>
   18b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b88:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   18b8c:	460c      	mov	r4, r1
   18b8e:	0719      	lsls	r1, r3, #28
   18b90:	4680      	mov	r8, r0
   18b92:	b083      	sub	sp, #12
   18b94:	4617      	mov	r7, r2
   18b96:	b298      	uxth	r0, r3
   18b98:	d525      	bpl.n	18be6 <__sfvwrite_r+0x6a>
   18b9a:	6923      	ldr	r3, [r4, #16]
   18b9c:	b31b      	cbz	r3, 18be6 <__sfvwrite_r+0x6a>
   18b9e:	f010 0302 	ands.w	r3, r0, #2
   18ba2:	683d      	ldr	r5, [r7, #0]
   18ba4:	d02d      	beq.n	18c02 <__sfvwrite_r+0x86>
   18ba6:	f04f 0a00 	mov.w	sl, #0
   18baa:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 18e6c <__sfvwrite_r+0x2f0>
   18bae:	4656      	mov	r6, sl
   18bb0:	46b9      	mov	r9, r7
   18bb2:	455e      	cmp	r6, fp
   18bb4:	4633      	mov	r3, r6
   18bb6:	4652      	mov	r2, sl
   18bb8:	bf28      	it	cs
   18bba:	465b      	movcs	r3, fp
   18bbc:	4640      	mov	r0, r8
   18bbe:	2e00      	cmp	r6, #0
   18bc0:	d052      	beq.n	18c68 <__sfvwrite_r+0xec>
   18bc2:	69e1      	ldr	r1, [r4, #28]
   18bc4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   18bc6:	47b8      	blx	r7
   18bc8:	2800      	cmp	r0, #0
   18bca:	dd56      	ble.n	18c7a <__sfvwrite_r+0xfe>
   18bcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   18bd0:	1a1b      	subs	r3, r3, r0
   18bd2:	4482      	add	sl, r0
   18bd4:	1a36      	subs	r6, r6, r0
   18bd6:	f8c9 3008 	str.w	r3, [r9, #8]
   18bda:	2b00      	cmp	r3, #0
   18bdc:	d1e9      	bne.n	18bb2 <__sfvwrite_r+0x36>
   18bde:	2000      	movs	r0, #0
   18be0:	b003      	add	sp, #12
   18be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18be6:	4621      	mov	r1, r4
   18be8:	4640      	mov	r0, r8
   18bea:	f000 f97d 	bl	18ee8 <__swsetup_r>
   18bee:	2800      	cmp	r0, #0
   18bf0:	f040 8138 	bne.w	18e64 <__sfvwrite_r+0x2e8>
   18bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18bf8:	683d      	ldr	r5, [r7, #0]
   18bfa:	b298      	uxth	r0, r3
   18bfc:	f010 0302 	ands.w	r3, r0, #2
   18c00:	d1d1      	bne.n	18ba6 <__sfvwrite_r+0x2a>
   18c02:	f010 0901 	ands.w	r9, r0, #1
   18c06:	d144      	bne.n	18c92 <__sfvwrite_r+0x116>
   18c08:	464e      	mov	r6, r9
   18c0a:	9700      	str	r7, [sp, #0]
   18c0c:	b346      	cbz	r6, 18c60 <__sfvwrite_r+0xe4>
   18c0e:	0582      	lsls	r2, r0, #22
   18c10:	f8d4 b008 	ldr.w	fp, [r4, #8]
   18c14:	f140 8085 	bpl.w	18d22 <__sfvwrite_r+0x1a6>
   18c18:	45b3      	cmp	fp, r6
   18c1a:	465a      	mov	r2, fp
   18c1c:	f200 80b4 	bhi.w	18d88 <__sfvwrite_r+0x20c>
   18c20:	f410 6f90 	tst.w	r0, #1152	; 0x480
   18c24:	f040 80c1 	bne.w	18daa <__sfvwrite_r+0x22e>
   18c28:	6820      	ldr	r0, [r4, #0]
   18c2a:	9201      	str	r2, [sp, #4]
   18c2c:	4649      	mov	r1, r9
   18c2e:	f7f7 ff63 	bl	10af8 <memmove>
   18c32:	68a3      	ldr	r3, [r4, #8]
   18c34:	9a01      	ldr	r2, [sp, #4]
   18c36:	eba3 010b 	sub.w	r1, r3, fp
   18c3a:	6823      	ldr	r3, [r4, #0]
   18c3c:	60a1      	str	r1, [r4, #8]
   18c3e:	4413      	add	r3, r2
   18c40:	46b2      	mov	sl, r6
   18c42:	6023      	str	r3, [r4, #0]
   18c44:	2600      	movs	r6, #0
   18c46:	9a00      	ldr	r2, [sp, #0]
   18c48:	6893      	ldr	r3, [r2, #8]
   18c4a:	eba3 030a 	sub.w	r3, r3, sl
   18c4e:	44d1      	add	r9, sl
   18c50:	6093      	str	r3, [r2, #8]
   18c52:	2b00      	cmp	r3, #0
   18c54:	d0c3      	beq.n	18bde <__sfvwrite_r+0x62>
   18c56:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   18c5a:	b280      	uxth	r0, r0
   18c5c:	2e00      	cmp	r6, #0
   18c5e:	d1d6      	bne.n	18c0e <__sfvwrite_r+0x92>
   18c60:	e9d5 9600 	ldrd	r9, r6, [r5]
   18c64:	3508      	adds	r5, #8
   18c66:	e7d1      	b.n	18c0c <__sfvwrite_r+0x90>
   18c68:	e9d5 a600 	ldrd	sl, r6, [r5]
   18c6c:	3508      	adds	r5, #8
   18c6e:	e7a0      	b.n	18bb2 <__sfvwrite_r+0x36>
   18c70:	4621      	mov	r1, r4
   18c72:	4640      	mov	r0, r8
   18c74:	f7fd fa42 	bl	160fc <_fflush_r>
   18c78:	b388      	cbz	r0, 18cde <__sfvwrite_r+0x162>
   18c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18c82:	f04f 30ff 	mov.w	r0, #4294967295
   18c86:	81a3      	strh	r3, [r4, #12]
   18c88:	b003      	add	sp, #12
   18c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c8e:	2000      	movs	r0, #0
   18c90:	4770      	bx	lr
   18c92:	461e      	mov	r6, r3
   18c94:	46ba      	mov	sl, r7
   18c96:	4699      	mov	r9, r3
   18c98:	4618      	mov	r0, r3
   18c9a:	9500      	str	r5, [sp, #0]
   18c9c:	461f      	mov	r7, r3
   18c9e:	b366      	cbz	r6, 18cfa <__sfvwrite_r+0x17e>
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d032      	beq.n	18d0a <__sfvwrite_r+0x18e>
   18ca4:	464a      	mov	r2, r9
   18ca6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   18caa:	6820      	ldr	r0, [r4, #0]
   18cac:	68a5      	ldr	r5, [r4, #8]
   18cae:	42b2      	cmp	r2, r6
   18cb0:	bf28      	it	cs
   18cb2:	4632      	movcs	r2, r6
   18cb4:	4288      	cmp	r0, r1
   18cb6:	d904      	bls.n	18cc2 <__sfvwrite_r+0x146>
   18cb8:	eb05 0b03 	add.w	fp, r5, r3
   18cbc:	455a      	cmp	r2, fp
   18cbe:	f300 80a7 	bgt.w	18e10 <__sfvwrite_r+0x294>
   18cc2:	4293      	cmp	r3, r2
   18cc4:	dc64      	bgt.n	18d90 <__sfvwrite_r+0x214>
   18cc6:	69e1      	ldr	r1, [r4, #28]
   18cc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   18cca:	463a      	mov	r2, r7
   18ccc:	4640      	mov	r0, r8
   18cce:	47a8      	blx	r5
   18cd0:	f1b0 0b00 	subs.w	fp, r0, #0
   18cd4:	ddd1      	ble.n	18c7a <__sfvwrite_r+0xfe>
   18cd6:	ebb9 090b 	subs.w	r9, r9, fp
   18cda:	d0c9      	beq.n	18c70 <__sfvwrite_r+0xf4>
   18cdc:	2001      	movs	r0, #1
   18cde:	f8da 3008 	ldr.w	r3, [sl, #8]
   18ce2:	eba3 030b 	sub.w	r3, r3, fp
   18ce6:	445f      	add	r7, fp
   18ce8:	eba6 060b 	sub.w	r6, r6, fp
   18cec:	f8ca 3008 	str.w	r3, [sl, #8]
   18cf0:	2b00      	cmp	r3, #0
   18cf2:	f43f af74 	beq.w	18bde <__sfvwrite_r+0x62>
   18cf6:	2e00      	cmp	r6, #0
   18cf8:	d1d2      	bne.n	18ca0 <__sfvwrite_r+0x124>
   18cfa:	9a00      	ldr	r2, [sp, #0]
   18cfc:	6856      	ldr	r6, [r2, #4]
   18cfe:	4613      	mov	r3, r2
   18d00:	3208      	adds	r2, #8
   18d02:	9200      	str	r2, [sp, #0]
   18d04:	2e00      	cmp	r6, #0
   18d06:	d0f8      	beq.n	18cfa <__sfvwrite_r+0x17e>
   18d08:	681f      	ldr	r7, [r3, #0]
   18d0a:	4632      	mov	r2, r6
   18d0c:	210a      	movs	r1, #10
   18d0e:	4638      	mov	r0, r7
   18d10:	f7f8 fb06 	bl	11320 <memchr>
   18d14:	2800      	cmp	r0, #0
   18d16:	f000 809c 	beq.w	18e52 <__sfvwrite_r+0x2d6>
   18d1a:	3001      	adds	r0, #1
   18d1c:	eba0 0907 	sub.w	r9, r0, r7
   18d20:	e7c0      	b.n	18ca4 <__sfvwrite_r+0x128>
   18d22:	6820      	ldr	r0, [r4, #0]
   18d24:	6923      	ldr	r3, [r4, #16]
   18d26:	4298      	cmp	r0, r3
   18d28:	d816      	bhi.n	18d58 <__sfvwrite_r+0x1dc>
   18d2a:	6962      	ldr	r2, [r4, #20]
   18d2c:	42b2      	cmp	r2, r6
   18d2e:	d813      	bhi.n	18d58 <__sfvwrite_r+0x1dc>
   18d30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   18d34:	42b3      	cmp	r3, r6
   18d36:	bf28      	it	cs
   18d38:	4633      	movcs	r3, r6
   18d3a:	69e1      	ldr	r1, [r4, #28]
   18d3c:	fb93 f3f2 	sdiv	r3, r3, r2
   18d40:	6a67      	ldr	r7, [r4, #36]	; 0x24
   18d42:	fb02 f303 	mul.w	r3, r2, r3
   18d46:	4640      	mov	r0, r8
   18d48:	464a      	mov	r2, r9
   18d4a:	47b8      	blx	r7
   18d4c:	f1b0 0a00 	subs.w	sl, r0, #0
   18d50:	dd93      	ble.n	18c7a <__sfvwrite_r+0xfe>
   18d52:	eba6 060a 	sub.w	r6, r6, sl
   18d56:	e776      	b.n	18c46 <__sfvwrite_r+0xca>
   18d58:	45b3      	cmp	fp, r6
   18d5a:	46da      	mov	sl, fp
   18d5c:	bf28      	it	cs
   18d5e:	46b2      	movcs	sl, r6
   18d60:	4652      	mov	r2, sl
   18d62:	4649      	mov	r1, r9
   18d64:	f7f7 fec8 	bl	10af8 <memmove>
   18d68:	68a3      	ldr	r3, [r4, #8]
   18d6a:	6822      	ldr	r2, [r4, #0]
   18d6c:	eba3 030a 	sub.w	r3, r3, sl
   18d70:	4452      	add	r2, sl
   18d72:	60a3      	str	r3, [r4, #8]
   18d74:	6022      	str	r2, [r4, #0]
   18d76:	2b00      	cmp	r3, #0
   18d78:	d1eb      	bne.n	18d52 <__sfvwrite_r+0x1d6>
   18d7a:	4621      	mov	r1, r4
   18d7c:	4640      	mov	r0, r8
   18d7e:	f7fd f9bd 	bl	160fc <_fflush_r>
   18d82:	2800      	cmp	r0, #0
   18d84:	d0e5      	beq.n	18d52 <__sfvwrite_r+0x1d6>
   18d86:	e778      	b.n	18c7a <__sfvwrite_r+0xfe>
   18d88:	6820      	ldr	r0, [r4, #0]
   18d8a:	46b3      	mov	fp, r6
   18d8c:	4632      	mov	r2, r6
   18d8e:	e74c      	b.n	18c2a <__sfvwrite_r+0xae>
   18d90:	4639      	mov	r1, r7
   18d92:	9201      	str	r2, [sp, #4]
   18d94:	f7f7 feb0 	bl	10af8 <memmove>
   18d98:	9a01      	ldr	r2, [sp, #4]
   18d9a:	68a3      	ldr	r3, [r4, #8]
   18d9c:	1a9b      	subs	r3, r3, r2
   18d9e:	60a3      	str	r3, [r4, #8]
   18da0:	6823      	ldr	r3, [r4, #0]
   18da2:	4413      	add	r3, r2
   18da4:	6023      	str	r3, [r4, #0]
   18da6:	4693      	mov	fp, r2
   18da8:	e795      	b.n	18cd6 <__sfvwrite_r+0x15a>
   18daa:	6823      	ldr	r3, [r4, #0]
   18dac:	6921      	ldr	r1, [r4, #16]
   18dae:	eba3 0b01 	sub.w	fp, r3, r1
   18db2:	6963      	ldr	r3, [r4, #20]
   18db4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   18db8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   18dbc:	f10b 0301 	add.w	r3, fp, #1
   18dc0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   18dc4:	4433      	add	r3, r6
   18dc6:	4553      	cmp	r3, sl
   18dc8:	4652      	mov	r2, sl
   18dca:	bf84      	itt	hi
   18dcc:	469a      	movhi	sl, r3
   18dce:	4652      	movhi	r2, sl
   18dd0:	0543      	lsls	r3, r0, #21
   18dd2:	d52c      	bpl.n	18e2e <__sfvwrite_r+0x2b2>
   18dd4:	4611      	mov	r1, r2
   18dd6:	4640      	mov	r0, r8
   18dd8:	f7f5 ff9a 	bl	ed10 <_malloc_r>
   18ddc:	2800      	cmp	r0, #0
   18dde:	d03b      	beq.n	18e58 <__sfvwrite_r+0x2dc>
   18de0:	465a      	mov	r2, fp
   18de2:	6921      	ldr	r1, [r4, #16]
   18de4:	9001      	str	r0, [sp, #4]
   18de6:	f7f3 fe75 	bl	cad4 <memcpy>
   18dea:	89a2      	ldrh	r2, [r4, #12]
   18dec:	9b01      	ldr	r3, [sp, #4]
   18dee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   18df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18df6:	81a2      	strh	r2, [r4, #12]
   18df8:	eb03 000b 	add.w	r0, r3, fp
   18dfc:	6123      	str	r3, [r4, #16]
   18dfe:	ebaa 030b 	sub.w	r3, sl, fp
   18e02:	f8c4 a014 	str.w	sl, [r4, #20]
   18e06:	60a3      	str	r3, [r4, #8]
   18e08:	6020      	str	r0, [r4, #0]
   18e0a:	46b3      	mov	fp, r6
   18e0c:	4632      	mov	r2, r6
   18e0e:	e70c      	b.n	18c2a <__sfvwrite_r+0xae>
   18e10:	4639      	mov	r1, r7
   18e12:	465a      	mov	r2, fp
   18e14:	f7f7 fe70 	bl	10af8 <memmove>
   18e18:	6823      	ldr	r3, [r4, #0]
   18e1a:	445b      	add	r3, fp
   18e1c:	6023      	str	r3, [r4, #0]
   18e1e:	4621      	mov	r1, r4
   18e20:	4640      	mov	r0, r8
   18e22:	f7fd f96b 	bl	160fc <_fflush_r>
   18e26:	2800      	cmp	r0, #0
   18e28:	f43f af55 	beq.w	18cd6 <__sfvwrite_r+0x15a>
   18e2c:	e725      	b.n	18c7a <__sfvwrite_r+0xfe>
   18e2e:	4640      	mov	r0, r8
   18e30:	f7f6 fa36 	bl	f2a0 <_realloc_r>
   18e34:	4603      	mov	r3, r0
   18e36:	2800      	cmp	r0, #0
   18e38:	d1de      	bne.n	18df8 <__sfvwrite_r+0x27c>
   18e3a:	6921      	ldr	r1, [r4, #16]
   18e3c:	4640      	mov	r0, r8
   18e3e:	f7f8 fbd1 	bl	115e4 <_free_r>
   18e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18e46:	220c      	movs	r2, #12
   18e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   18e4c:	f8c8 2000 	str.w	r2, [r8]
   18e50:	e715      	b.n	18c7e <__sfvwrite_r+0x102>
   18e52:	1c72      	adds	r2, r6, #1
   18e54:	4691      	mov	r9, r2
   18e56:	e726      	b.n	18ca6 <__sfvwrite_r+0x12a>
   18e58:	220c      	movs	r2, #12
   18e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18e5e:	f8c8 2000 	str.w	r2, [r8]
   18e62:	e70c      	b.n	18c7e <__sfvwrite_r+0x102>
   18e64:	f04f 30ff 	mov.w	r0, #4294967295
   18e68:	e6ba      	b.n	18be0 <__sfvwrite_r+0x64>
   18e6a:	bf00      	nop
   18e6c:	7ffffc00 	.word	0x7ffffc00

00018e70 <__submore>:
   18e70:	f101 0340 	add.w	r3, r1, #64	; 0x40
   18e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18e78:	460c      	mov	r4, r1
   18e7a:	6b09      	ldr	r1, [r1, #48]	; 0x30
   18e7c:	4299      	cmp	r1, r3
   18e7e:	d014      	beq.n	18eaa <__submore+0x3a>
   18e80:	6b66      	ldr	r6, [r4, #52]	; 0x34
   18e82:	0077      	lsls	r7, r6, #1
   18e84:	463a      	mov	r2, r7
   18e86:	f7f6 fa0b 	bl	f2a0 <_realloc_r>
   18e8a:	4605      	mov	r5, r0
   18e8c:	b340      	cbz	r0, 18ee0 <__submore+0x70>
   18e8e:	eb00 0806 	add.w	r8, r0, r6
   18e92:	4601      	mov	r1, r0
   18e94:	4632      	mov	r2, r6
   18e96:	4640      	mov	r0, r8
   18e98:	f7f3 fe1c 	bl	cad4 <memcpy>
   18e9c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   18ea0:	f8c4 8000 	str.w	r8, [r4]
   18ea4:	2000      	movs	r0, #0
   18ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   18eae:	f7f5 ff2f 	bl	ed10 <_malloc_r>
   18eb2:	b1a8      	cbz	r0, 18ee0 <__submore+0x70>
   18eb4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   18eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18ebc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   18ec0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   18ec4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   18ec8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   18ecc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   18ed0:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   18ed4:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   18ed8:	6023      	str	r3, [r4, #0]
   18eda:	2000      	movs	r0, #0
   18edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ee0:	f04f 30ff 	mov.w	r0, #4294967295
   18ee4:	e7df      	b.n	18ea6 <__submore+0x36>
   18ee6:	bf00      	nop

00018ee8 <__swsetup_r>:
   18ee8:	b538      	push	{r3, r4, r5, lr}
   18eea:	4b31      	ldr	r3, [pc, #196]	; (18fb0 <__swsetup_r+0xc8>)
   18eec:	681b      	ldr	r3, [r3, #0]
   18eee:	4605      	mov	r5, r0
   18ef0:	460c      	mov	r4, r1
   18ef2:	b113      	cbz	r3, 18efa <__swsetup_r+0x12>
   18ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18ef6:	2a00      	cmp	r2, #0
   18ef8:	d04e      	beq.n	18f98 <__swsetup_r+0xb0>
   18efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18efe:	0718      	lsls	r0, r3, #28
   18f00:	b29a      	uxth	r2, r3
   18f02:	d51c      	bpl.n	18f3e <__swsetup_r+0x56>
   18f04:	6921      	ldr	r1, [r4, #16]
   18f06:	b329      	cbz	r1, 18f54 <__swsetup_r+0x6c>
   18f08:	f012 0001 	ands.w	r0, r2, #1
   18f0c:	d007      	beq.n	18f1e <__swsetup_r+0x36>
   18f0e:	2000      	movs	r0, #0
   18f10:	60a0      	str	r0, [r4, #8]
   18f12:	6960      	ldr	r0, [r4, #20]
   18f14:	4240      	negs	r0, r0
   18f16:	61a0      	str	r0, [r4, #24]
   18f18:	b139      	cbz	r1, 18f2a <__swsetup_r+0x42>
   18f1a:	2000      	movs	r0, #0
   18f1c:	bd38      	pop	{r3, r4, r5, pc}
   18f1e:	0795      	lsls	r5, r2, #30
   18f20:	bf58      	it	pl
   18f22:	6960      	ldrpl	r0, [r4, #20]
   18f24:	60a0      	str	r0, [r4, #8]
   18f26:	2900      	cmp	r1, #0
   18f28:	d1f7      	bne.n	18f1a <__swsetup_r+0x32>
   18f2a:	0612      	lsls	r2, r2, #24
   18f2c:	bf58      	it	pl
   18f2e:	4608      	movpl	r0, r1
   18f30:	d5f4      	bpl.n	18f1c <__swsetup_r+0x34>
   18f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18f36:	81a3      	strh	r3, [r4, #12]
   18f38:	f04f 30ff 	mov.w	r0, #4294967295
   18f3c:	bd38      	pop	{r3, r4, r5, pc}
   18f3e:	06d1      	lsls	r1, r2, #27
   18f40:	d52e      	bpl.n	18fa0 <__swsetup_r+0xb8>
   18f42:	0752      	lsls	r2, r2, #29
   18f44:	d414      	bmi.n	18f70 <__swsetup_r+0x88>
   18f46:	6921      	ldr	r1, [r4, #16]
   18f48:	f043 0308 	orr.w	r3, r3, #8
   18f4c:	81a3      	strh	r3, [r4, #12]
   18f4e:	b29a      	uxth	r2, r3
   18f50:	2900      	cmp	r1, #0
   18f52:	d1d9      	bne.n	18f08 <__swsetup_r+0x20>
   18f54:	f402 7020 	and.w	r0, r2, #640	; 0x280
   18f58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   18f5c:	d0d4      	beq.n	18f08 <__swsetup_r+0x20>
   18f5e:	4621      	mov	r1, r4
   18f60:	4628      	mov	r0, r5
   18f62:	f000 f977 	bl	19254 <__smakebuf_r>
   18f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18f6a:	6921      	ldr	r1, [r4, #16]
   18f6c:	b29a      	uxth	r2, r3
   18f6e:	e7cb      	b.n	18f08 <__swsetup_r+0x20>
   18f70:	6b21      	ldr	r1, [r4, #48]	; 0x30
   18f72:	b151      	cbz	r1, 18f8a <__swsetup_r+0xa2>
   18f74:	f104 0240 	add.w	r2, r4, #64	; 0x40
   18f78:	4291      	cmp	r1, r2
   18f7a:	d004      	beq.n	18f86 <__swsetup_r+0x9e>
   18f7c:	4628      	mov	r0, r5
   18f7e:	f7f8 fb31 	bl	115e4 <_free_r>
   18f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18f86:	2200      	movs	r2, #0
   18f88:	6322      	str	r2, [r4, #48]	; 0x30
   18f8a:	6921      	ldr	r1, [r4, #16]
   18f8c:	2200      	movs	r2, #0
   18f8e:	e9c4 1200 	strd	r1, r2, [r4]
   18f92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   18f96:	e7d7      	b.n	18f48 <__swsetup_r+0x60>
   18f98:	4618      	mov	r0, r3
   18f9a:	f7f7 fbf1 	bl	10780 <__sinit>
   18f9e:	e7ac      	b.n	18efa <__swsetup_r+0x12>
   18fa0:	2209      	movs	r2, #9
   18fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18fa6:	602a      	str	r2, [r5, #0]
   18fa8:	f04f 30ff 	mov.w	r0, #4294967295
   18fac:	81a3      	strh	r3, [r4, #12]
   18fae:	bd38      	pop	{r3, r4, r5, pc}
   18fb0:	20008ffc 	.word	0x20008ffc

00018fb4 <__fputwc>:
   18fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fb8:	b082      	sub	sp, #8
   18fba:	4682      	mov	sl, r0
   18fbc:	4688      	mov	r8, r1
   18fbe:	4614      	mov	r4, r2
   18fc0:	f7f7 ff36 	bl	10e30 <__locale_mb_cur_max>
   18fc4:	2801      	cmp	r0, #1
   18fc6:	d103      	bne.n	18fd0 <__fputwc+0x1c>
   18fc8:	f108 33ff 	add.w	r3, r8, #4294967295
   18fcc:	2bfe      	cmp	r3, #254	; 0xfe
   18fce:	d936      	bls.n	1903e <__fputwc+0x8a>
   18fd0:	f10d 0904 	add.w	r9, sp, #4
   18fd4:	4642      	mov	r2, r8
   18fd6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   18fda:	4649      	mov	r1, r9
   18fdc:	4650      	mov	r0, sl
   18fde:	f7fe fb29 	bl	17634 <_wcrtomb_r>
   18fe2:	1c42      	adds	r2, r0, #1
   18fe4:	4606      	mov	r6, r0
   18fe6:	d032      	beq.n	1904e <__fputwc+0x9a>
   18fe8:	b320      	cbz	r0, 19034 <__fputwc+0x80>
   18fea:	f89d c004 	ldrb.w	ip, [sp, #4]
   18fee:	2500      	movs	r5, #0
   18ff0:	e009      	b.n	19006 <__fputwc+0x52>
   18ff2:	6823      	ldr	r3, [r4, #0]
   18ff4:	1c5a      	adds	r2, r3, #1
   18ff6:	6022      	str	r2, [r4, #0]
   18ff8:	f883 c000 	strb.w	ip, [r3]
   18ffc:	3501      	adds	r5, #1
   18ffe:	42b5      	cmp	r5, r6
   19000:	d218      	bcs.n	19034 <__fputwc+0x80>
   19002:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   19006:	68a3      	ldr	r3, [r4, #8]
   19008:	3b01      	subs	r3, #1
   1900a:	2b00      	cmp	r3, #0
   1900c:	60a3      	str	r3, [r4, #8]
   1900e:	daf0      	bge.n	18ff2 <__fputwc+0x3e>
   19010:	69a7      	ldr	r7, [r4, #24]
   19012:	42bb      	cmp	r3, r7
   19014:	4661      	mov	r1, ip
   19016:	4622      	mov	r2, r4
   19018:	4650      	mov	r0, sl
   1901a:	db02      	blt.n	19022 <__fputwc+0x6e>
   1901c:	f1bc 0f0a 	cmp.w	ip, #10
   19020:	d1e7      	bne.n	18ff2 <__fputwc+0x3e>
   19022:	f000 f983 	bl	1932c <__swbuf_r>
   19026:	1c43      	adds	r3, r0, #1
   19028:	d1e8      	bne.n	18ffc <__fputwc+0x48>
   1902a:	4606      	mov	r6, r0
   1902c:	4630      	mov	r0, r6
   1902e:	b002      	add	sp, #8
   19030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19034:	4646      	mov	r6, r8
   19036:	4630      	mov	r0, r6
   19038:	b002      	add	sp, #8
   1903a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1903e:	fa5f fc88 	uxtb.w	ip, r8
   19042:	f88d c004 	strb.w	ip, [sp, #4]
   19046:	4606      	mov	r6, r0
   19048:	f10d 0904 	add.w	r9, sp, #4
   1904c:	e7cf      	b.n	18fee <__fputwc+0x3a>
   1904e:	89a3      	ldrh	r3, [r4, #12]
   19050:	4630      	mov	r0, r6
   19052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19056:	81a3      	strh	r3, [r4, #12]
   19058:	b002      	add	sp, #8
   1905a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1905e:	bf00      	nop

00019060 <_fputwc_r>:
   19060:	b530      	push	{r4, r5, lr}
   19062:	6e53      	ldr	r3, [r2, #100]	; 0x64
   19064:	f013 0f01 	tst.w	r3, #1
   19068:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1906c:	4614      	mov	r4, r2
   1906e:	b083      	sub	sp, #12
   19070:	4605      	mov	r5, r0
   19072:	b29a      	uxth	r2, r3
   19074:	d101      	bne.n	1907a <_fputwc_r+0x1a>
   19076:	0598      	lsls	r0, r3, #22
   19078:	d51c      	bpl.n	190b4 <_fputwc_r+0x54>
   1907a:	0490      	lsls	r0, r2, #18
   1907c:	d406      	bmi.n	1908c <_fputwc_r+0x2c>
   1907e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   19080:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   19084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   19088:	81a3      	strh	r3, [r4, #12]
   1908a:	6662      	str	r2, [r4, #100]	; 0x64
   1908c:	4622      	mov	r2, r4
   1908e:	4628      	mov	r0, r5
   19090:	f7ff ff90 	bl	18fb4 <__fputwc>
   19094:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19096:	07da      	lsls	r2, r3, #31
   19098:	4605      	mov	r5, r0
   1909a:	d402      	bmi.n	190a2 <_fputwc_r+0x42>
   1909c:	89a3      	ldrh	r3, [r4, #12]
   1909e:	059b      	lsls	r3, r3, #22
   190a0:	d502      	bpl.n	190a8 <_fputwc_r+0x48>
   190a2:	4628      	mov	r0, r5
   190a4:	b003      	add	sp, #12
   190a6:	bd30      	pop	{r4, r5, pc}
   190a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   190aa:	f7f7 ff5d 	bl	10f68 <__retarget_lock_release_recursive>
   190ae:	4628      	mov	r0, r5
   190b0:	b003      	add	sp, #12
   190b2:	bd30      	pop	{r4, r5, pc}
   190b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   190b6:	9101      	str	r1, [sp, #4]
   190b8:	f7f7 ff54 	bl	10f64 <__retarget_lock_acquire_recursive>
   190bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   190c0:	9901      	ldr	r1, [sp, #4]
   190c2:	b29a      	uxth	r2, r3
   190c4:	e7d9      	b.n	1907a <_fputwc_r+0x1a>
   190c6:	bf00      	nop

000190c8 <_wcsnrtombs_l>:
   190c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190cc:	b08b      	sub	sp, #44	; 0x2c
   190ce:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   190d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   190d4:	9103      	str	r1, [sp, #12]
   190d6:	4681      	mov	r9, r0
   190d8:	9205      	str	r2, [sp, #20]
   190da:	461e      	mov	r6, r3
   190dc:	f1b8 0f00 	cmp.w	r8, #0
   190e0:	d05c      	beq.n	1919c <_wcsnrtombs_l+0xd4>
   190e2:	9b03      	ldr	r3, [sp, #12]
   190e4:	2b00      	cmp	r3, #0
   190e6:	d05e      	beq.n	191a6 <_wcsnrtombs_l+0xde>
   190e8:	9b05      	ldr	r3, [sp, #20]
   190ea:	681d      	ldr	r5, [r3, #0]
   190ec:	2f00      	cmp	r7, #0
   190ee:	d06a      	beq.n	191c6 <_wcsnrtombs_l+0xfe>
   190f0:	1e74      	subs	r4, r6, #1
   190f2:	b34e      	cbz	r6, 19148 <_wcsnrtombs_l+0x80>
   190f4:	9b03      	ldr	r3, [sp, #12]
   190f6:	9304      	str	r3, [sp, #16]
   190f8:	3d04      	subs	r5, #4
   190fa:	2600      	movs	r6, #0
   190fc:	9501      	str	r5, [sp, #4]
   190fe:	e00b      	b.n	19118 <_wcsnrtombs_l+0x50>
   19100:	9b03      	ldr	r3, [sp, #12]
   19102:	bb2b      	cbnz	r3, 19150 <_wcsnrtombs_l+0x88>
   19104:	9b01      	ldr	r3, [sp, #4]
   19106:	681a      	ldr	r2, [r3, #0]
   19108:	2a00      	cmp	r2, #0
   1910a:	d03a      	beq.n	19182 <_wcsnrtombs_l+0xba>
   1910c:	45bc      	cmp	ip, r7
   1910e:	d25c      	bcs.n	191ca <_wcsnrtombs_l+0x102>
   19110:	3c01      	subs	r4, #1
   19112:	1c63      	adds	r3, r4, #1
   19114:	4666      	mov	r6, ip
   19116:	d017      	beq.n	19148 <_wcsnrtombs_l+0x80>
   19118:	f8d8 3000 	ldr.w	r3, [r8]
   1911c:	9302      	str	r3, [sp, #8]
   1911e:	9b01      	ldr	r3, [sp, #4]
   19120:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   19124:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19128:	9301      	str	r3, [sp, #4]
   1912a:	a907      	add	r1, sp, #28
   1912c:	4643      	mov	r3, r8
   1912e:	4648      	mov	r0, r9
   19130:	f8d8 b004 	ldr.w	fp, [r8, #4]
   19134:	47a8      	blx	r5
   19136:	1c42      	adds	r2, r0, #1
   19138:	d03a      	beq.n	191b0 <_wcsnrtombs_l+0xe8>
   1913a:	eb00 0c06 	add.w	ip, r0, r6
   1913e:	45bc      	cmp	ip, r7
   19140:	d9de      	bls.n	19100 <_wcsnrtombs_l+0x38>
   19142:	9b02      	ldr	r3, [sp, #8]
   19144:	e9c8 3b00 	strd	r3, fp, [r8]
   19148:	4630      	mov	r0, r6
   1914a:	b00b      	add	sp, #44	; 0x2c
   1914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19150:	2800      	cmp	r0, #0
   19152:	dd0e      	ble.n	19172 <_wcsnrtombs_l+0xaa>
   19154:	9b04      	ldr	r3, [sp, #16]
   19156:	9d01      	ldr	r5, [sp, #4]
   19158:	4418      	add	r0, r3
   1915a:	1e5a      	subs	r2, r3, #1
   1915c:	a907      	add	r1, sp, #28
   1915e:	f100 3eff 	add.w	lr, r0, #4294967295
   19162:	f811 3b01 	ldrb.w	r3, [r1], #1
   19166:	f802 3f01 	strb.w	r3, [r2, #1]!
   1916a:	4572      	cmp	r2, lr
   1916c:	d1f9      	bne.n	19162 <_wcsnrtombs_l+0x9a>
   1916e:	9501      	str	r5, [sp, #4]
   19170:	9004      	str	r0, [sp, #16]
   19172:	9b05      	ldr	r3, [sp, #20]
   19174:	681a      	ldr	r2, [r3, #0]
   19176:	3204      	adds	r2, #4
   19178:	601a      	str	r2, [r3, #0]
   1917a:	9b01      	ldr	r3, [sp, #4]
   1917c:	681a      	ldr	r2, [r3, #0]
   1917e:	2a00      	cmp	r2, #0
   19180:	d1c4      	bne.n	1910c <_wcsnrtombs_l+0x44>
   19182:	9b03      	ldr	r3, [sp, #12]
   19184:	b10b      	cbz	r3, 1918a <_wcsnrtombs_l+0xc2>
   19186:	9b05      	ldr	r3, [sp, #20]
   19188:	601a      	str	r2, [r3, #0]
   1918a:	f10c 36ff 	add.w	r6, ip, #4294967295
   1918e:	2200      	movs	r2, #0
   19190:	4630      	mov	r0, r6
   19192:	f8c8 2000 	str.w	r2, [r8]
   19196:	b00b      	add	sp, #44	; 0x2c
   19198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1919c:	9b03      	ldr	r3, [sp, #12]
   1919e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   191a2:	2b00      	cmp	r3, #0
   191a4:	d1a0      	bne.n	190e8 <_wcsnrtombs_l+0x20>
   191a6:	9b05      	ldr	r3, [sp, #20]
   191a8:	f04f 37ff 	mov.w	r7, #4294967295
   191ac:	681d      	ldr	r5, [r3, #0]
   191ae:	e79f      	b.n	190f0 <_wcsnrtombs_l+0x28>
   191b0:	4606      	mov	r6, r0
   191b2:	218a      	movs	r1, #138	; 0x8a
   191b4:	2200      	movs	r2, #0
   191b6:	4630      	mov	r0, r6
   191b8:	f8c9 1000 	str.w	r1, [r9]
   191bc:	f8c8 2000 	str.w	r2, [r8]
   191c0:	b00b      	add	sp, #44	; 0x2c
   191c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191c6:	463e      	mov	r6, r7
   191c8:	e7be      	b.n	19148 <_wcsnrtombs_l+0x80>
   191ca:	4666      	mov	r6, ip
   191cc:	e7bc      	b.n	19148 <_wcsnrtombs_l+0x80>
   191ce:	bf00      	nop

000191d0 <_wcsnrtombs_r>:
   191d0:	b510      	push	{r4, lr}
   191d2:	b084      	sub	sp, #16
   191d4:	4c05      	ldr	r4, [pc, #20]	; (191ec <_wcsnrtombs_r+0x1c>)
   191d6:	9806      	ldr	r0, [sp, #24]
   191d8:	9000      	str	r0, [sp, #0]
   191da:	9807      	ldr	r0, [sp, #28]
   191dc:	9001      	str	r0, [sp, #4]
   191de:	4804      	ldr	r0, [pc, #16]	; (191f0 <_wcsnrtombs_r+0x20>)
   191e0:	6800      	ldr	r0, [r0, #0]
   191e2:	9402      	str	r4, [sp, #8]
   191e4:	f7ff ff70 	bl	190c8 <_wcsnrtombs_l>
   191e8:	b004      	add	sp, #16
   191ea:	bd10      	pop	{r4, pc}
   191ec:	20008a74 	.word	0x20008a74
   191f0:	20008ffc 	.word	0x20008ffc

000191f4 <category>:
   191f4:	4b15      	ldr	r3, [pc, #84]	; (1924c <category+0x58>)
   191f6:	4298      	cmp	r0, r3
   191f8:	d823      	bhi.n	19242 <category+0x4e>
   191fa:	b570      	push	{r4, r5, r6, lr}
   191fc:	4e14      	ldr	r6, [pc, #80]	; (19250 <category+0x5c>)
   191fe:	f04f 0e00 	mov.w	lr, #0
   19202:	f640 04db 	movw	r4, #2267	; 0x8db
   19206:	e003      	b.n	19210 <category+0x1c>
   19208:	f102 0e01 	add.w	lr, r2, #1
   1920c:	45a6      	cmp	lr, r4
   1920e:	dc16      	bgt.n	1923e <category+0x4a>
   19210:	eb04 020e 	add.w	r2, r4, lr
   19214:	f022 0301 	bic.w	r3, r2, #1
   19218:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1921c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   19220:	1052      	asrs	r2, r2, #1
   19222:	7859      	ldrb	r1, [r3, #1]
   19224:	885d      	ldrh	r5, [r3, #2]
   19226:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1922a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1922e:	448c      	add	ip, r1
   19230:	4560      	cmp	r0, ip
   19232:	d8e9      	bhi.n	19208 <category+0x14>
   19234:	4288      	cmp	r0, r1
   19236:	d206      	bcs.n	19246 <category+0x52>
   19238:	1e54      	subs	r4, r2, #1
   1923a:	45a6      	cmp	lr, r4
   1923c:	dde8      	ble.n	19210 <category+0x1c>
   1923e:	20ff      	movs	r0, #255	; 0xff
   19240:	bd70      	pop	{r4, r5, r6, pc}
   19242:	20ff      	movs	r0, #255	; 0xff
   19244:	4770      	bx	lr
   19246:	7818      	ldrb	r0, [r3, #0]
   19248:	bd70      	pop	{r4, r5, r6, pc}
   1924a:	bf00      	nop
   1924c:	000e01ef 	.word	0x000e01ef
   19250:	20002b80 	.word	0x20002b80

00019254 <__smakebuf_r>:
   19254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19258:	898b      	ldrh	r3, [r1, #12]
   1925a:	460c      	mov	r4, r1
   1925c:	0799      	lsls	r1, r3, #30
   1925e:	b096      	sub	sp, #88	; 0x58
   19260:	d508      	bpl.n	19274 <__smakebuf_r+0x20>
   19262:	f104 0343 	add.w	r3, r4, #67	; 0x43
   19266:	2201      	movs	r2, #1
   19268:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1926c:	6023      	str	r3, [r4, #0]
   1926e:	b016      	add	sp, #88	; 0x58
   19270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19278:	2900      	cmp	r1, #0
   1927a:	4606      	mov	r6, r0
   1927c:	db25      	blt.n	192ca <__smakebuf_r+0x76>
   1927e:	466a      	mov	r2, sp
   19280:	f000 f8ac 	bl	193dc <_fstat_r>
   19284:	2800      	cmp	r0, #0
   19286:	db1f      	blt.n	192c8 <__smakebuf_r+0x74>
   19288:	9d01      	ldr	r5, [sp, #4]
   1928a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1928e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   19292:	fab5 f585 	clz	r5, r5
   19296:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1929a:	096d      	lsrs	r5, r5, #5
   1929c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   192a0:	4641      	mov	r1, r8
   192a2:	4630      	mov	r0, r6
   192a4:	f7f5 fd34 	bl	ed10 <_malloc_r>
   192a8:	b1e0      	cbz	r0, 192e4 <__smakebuf_r+0x90>
   192aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   192ae:	f8c4 8014 	str.w	r8, [r4, #20]
   192b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   192b6:	6020      	str	r0, [r4, #0]
   192b8:	6120      	str	r0, [r4, #16]
   192ba:	81a3      	strh	r3, [r4, #12]
   192bc:	bb35      	cbnz	r5, 1930c <__smakebuf_r+0xb8>
   192be:	433b      	orrs	r3, r7
   192c0:	81a3      	strh	r3, [r4, #12]
   192c2:	b016      	add	sp, #88	; 0x58
   192c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   192c8:	89a3      	ldrh	r3, [r4, #12]
   192ca:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   192ce:	d019      	beq.n	19304 <__smakebuf_r+0xb0>
   192d0:	f04f 0840 	mov.w	r8, #64	; 0x40
   192d4:	2500      	movs	r5, #0
   192d6:	4641      	mov	r1, r8
   192d8:	4630      	mov	r0, r6
   192da:	462f      	mov	r7, r5
   192dc:	f7f5 fd18 	bl	ed10 <_malloc_r>
   192e0:	2800      	cmp	r0, #0
   192e2:	d1e2      	bne.n	192aa <__smakebuf_r+0x56>
   192e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   192e8:	059a      	lsls	r2, r3, #22
   192ea:	d4c0      	bmi.n	1926e <__smakebuf_r+0x1a>
   192ec:	f023 0303 	bic.w	r3, r3, #3
   192f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   192f4:	f043 0302 	orr.w	r3, r3, #2
   192f8:	2101      	movs	r1, #1
   192fa:	e9c4 2104 	strd	r2, r1, [r4, #16]
   192fe:	81a3      	strh	r3, [r4, #12]
   19300:	6022      	str	r2, [r4, #0]
   19302:	e7b4      	b.n	1926e <__smakebuf_r+0x1a>
   19304:	f44f 6880 	mov.w	r8, #1024	; 0x400
   19308:	462f      	mov	r7, r5
   1930a:	e7c9      	b.n	192a0 <__smakebuf_r+0x4c>
   1930c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19310:	4630      	mov	r0, r6
   19312:	f000 f879 	bl	19408 <_isatty_r>
   19316:	b910      	cbnz	r0, 1931e <__smakebuf_r+0xca>
   19318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1931c:	e7cf      	b.n	192be <__smakebuf_r+0x6a>
   1931e:	89a3      	ldrh	r3, [r4, #12]
   19320:	f023 0303 	bic.w	r3, r3, #3
   19324:	f043 0301 	orr.w	r3, r3, #1
   19328:	b21b      	sxth	r3, r3
   1932a:	e7c8      	b.n	192be <__smakebuf_r+0x6a>

0001932c <__swbuf_r>:
   1932c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1932e:	460d      	mov	r5, r1
   19330:	4614      	mov	r4, r2
   19332:	4606      	mov	r6, r0
   19334:	b110      	cbz	r0, 1933c <__swbuf_r+0x10>
   19336:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19338:	2b00      	cmp	r3, #0
   1933a:	d04c      	beq.n	193d6 <__swbuf_r+0xaa>
   1933c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19340:	69a3      	ldr	r3, [r4, #24]
   19342:	60a3      	str	r3, [r4, #8]
   19344:	0717      	lsls	r7, r2, #28
   19346:	b290      	uxth	r0, r2
   19348:	d51b      	bpl.n	19382 <__swbuf_r+0x56>
   1934a:	6923      	ldr	r3, [r4, #16]
   1934c:	b1cb      	cbz	r3, 19382 <__swbuf_r+0x56>
   1934e:	b2ed      	uxtb	r5, r5
   19350:	0481      	lsls	r1, r0, #18
   19352:	462f      	mov	r7, r5
   19354:	d522      	bpl.n	1939c <__swbuf_r+0x70>
   19356:	6822      	ldr	r2, [r4, #0]
   19358:	6961      	ldr	r1, [r4, #20]
   1935a:	1ad3      	subs	r3, r2, r3
   1935c:	4299      	cmp	r1, r3
   1935e:	dd29      	ble.n	193b4 <__swbuf_r+0x88>
   19360:	3301      	adds	r3, #1
   19362:	68a1      	ldr	r1, [r4, #8]
   19364:	3901      	subs	r1, #1
   19366:	60a1      	str	r1, [r4, #8]
   19368:	1c51      	adds	r1, r2, #1
   1936a:	6021      	str	r1, [r4, #0]
   1936c:	7015      	strb	r5, [r2, #0]
   1936e:	6962      	ldr	r2, [r4, #20]
   19370:	429a      	cmp	r2, r3
   19372:	d027      	beq.n	193c4 <__swbuf_r+0x98>
   19374:	89a3      	ldrh	r3, [r4, #12]
   19376:	07db      	lsls	r3, r3, #31
   19378:	d501      	bpl.n	1937e <__swbuf_r+0x52>
   1937a:	2d0a      	cmp	r5, #10
   1937c:	d022      	beq.n	193c4 <__swbuf_r+0x98>
   1937e:	4638      	mov	r0, r7
   19380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19382:	4621      	mov	r1, r4
   19384:	4630      	mov	r0, r6
   19386:	f7ff fdaf 	bl	18ee8 <__swsetup_r>
   1938a:	bb08      	cbnz	r0, 193d0 <__swbuf_r+0xa4>
   1938c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19390:	6923      	ldr	r3, [r4, #16]
   19392:	b290      	uxth	r0, r2
   19394:	b2ed      	uxtb	r5, r5
   19396:	0481      	lsls	r1, r0, #18
   19398:	462f      	mov	r7, r5
   1939a:	d4dc      	bmi.n	19356 <__swbuf_r+0x2a>
   1939c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   193a0:	81a2      	strh	r2, [r4, #12]
   193a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   193a4:	6961      	ldr	r1, [r4, #20]
   193a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   193aa:	6662      	str	r2, [r4, #100]	; 0x64
   193ac:	6822      	ldr	r2, [r4, #0]
   193ae:	1ad3      	subs	r3, r2, r3
   193b0:	4299      	cmp	r1, r3
   193b2:	dcd5      	bgt.n	19360 <__swbuf_r+0x34>
   193b4:	4621      	mov	r1, r4
   193b6:	4630      	mov	r0, r6
   193b8:	f7fc fea0 	bl	160fc <_fflush_r>
   193bc:	b940      	cbnz	r0, 193d0 <__swbuf_r+0xa4>
   193be:	6822      	ldr	r2, [r4, #0]
   193c0:	2301      	movs	r3, #1
   193c2:	e7ce      	b.n	19362 <__swbuf_r+0x36>
   193c4:	4621      	mov	r1, r4
   193c6:	4630      	mov	r0, r6
   193c8:	f7fc fe98 	bl	160fc <_fflush_r>
   193cc:	2800      	cmp	r0, #0
   193ce:	d0d6      	beq.n	1937e <__swbuf_r+0x52>
   193d0:	f04f 37ff 	mov.w	r7, #4294967295
   193d4:	e7d3      	b.n	1937e <__swbuf_r+0x52>
   193d6:	f7f7 f9d3 	bl	10780 <__sinit>
   193da:	e7af      	b.n	1933c <__swbuf_r+0x10>

000193dc <_fstat_r>:
   193dc:	b570      	push	{r4, r5, r6, lr}
   193de:	460c      	mov	r4, r1
   193e0:	4d08      	ldr	r5, [pc, #32]	; (19404 <_fstat_r+0x28>)
   193e2:	4603      	mov	r3, r0
   193e4:	2600      	movs	r6, #0
   193e6:	4620      	mov	r0, r4
   193e8:	4611      	mov	r1, r2
   193ea:	461c      	mov	r4, r3
   193ec:	602e      	str	r6, [r5, #0]
   193ee:	f7f3 ff01 	bl	d1f4 <_fstat>
   193f2:	1c43      	adds	r3, r0, #1
   193f4:	d000      	beq.n	193f8 <_fstat_r+0x1c>
   193f6:	bd70      	pop	{r4, r5, r6, pc}
   193f8:	682b      	ldr	r3, [r5, #0]
   193fa:	2b00      	cmp	r3, #0
   193fc:	d0fb      	beq.n	193f6 <_fstat_r+0x1a>
   193fe:	6023      	str	r3, [r4, #0]
   19400:	bd70      	pop	{r4, r5, r6, pc}
   19402:	bf00      	nop
   19404:	20042ad0 	.word	0x20042ad0

00019408 <_isatty_r>:
   19408:	b538      	push	{r3, r4, r5, lr}
   1940a:	4d07      	ldr	r5, [pc, #28]	; (19428 <_isatty_r+0x20>)
   1940c:	2200      	movs	r2, #0
   1940e:	4604      	mov	r4, r0
   19410:	4608      	mov	r0, r1
   19412:	602a      	str	r2, [r5, #0]
   19414:	f7f3 fef4 	bl	d200 <_isatty>
   19418:	1c43      	adds	r3, r0, #1
   1941a:	d000      	beq.n	1941e <_isatty_r+0x16>
   1941c:	bd38      	pop	{r3, r4, r5, pc}
   1941e:	682b      	ldr	r3, [r5, #0]
   19420:	2b00      	cmp	r3, #0
   19422:	d0fb      	beq.n	1941c <_isatty_r+0x14>
   19424:	6023      	str	r3, [r4, #0]
   19426:	bd38      	pop	{r3, r4, r5, pc}
   19428:	20042ad0 	.word	0x20042ad0

0001942c <__aeabi_drsub>:
   1942c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   19430:	e002      	b.n	19438 <__adddf3>
   19432:	bf00      	nop

00019434 <__aeabi_dsub>:
   19434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00019438 <__adddf3>:
   19438:	b530      	push	{r4, r5, lr}
   1943a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1943e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   19442:	ea94 0f05 	teq	r4, r5
   19446:	bf08      	it	eq
   19448:	ea90 0f02 	teqeq	r0, r2
   1944c:	bf1f      	itttt	ne
   1944e:	ea54 0c00 	orrsne.w	ip, r4, r0
   19452:	ea55 0c02 	orrsne.w	ip, r5, r2
   19456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1945a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1945e:	f000 80e2 	beq.w	19626 <__adddf3+0x1ee>
   19462:	ea4f 5454 	mov.w	r4, r4, lsr #21
   19466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1946a:	bfb8      	it	lt
   1946c:	426d      	neglt	r5, r5
   1946e:	dd0c      	ble.n	1948a <__adddf3+0x52>
   19470:	442c      	add	r4, r5
   19472:	ea80 0202 	eor.w	r2, r0, r2
   19476:	ea81 0303 	eor.w	r3, r1, r3
   1947a:	ea82 0000 	eor.w	r0, r2, r0
   1947e:	ea83 0101 	eor.w	r1, r3, r1
   19482:	ea80 0202 	eor.w	r2, r0, r2
   19486:	ea81 0303 	eor.w	r3, r1, r3
   1948a:	2d36      	cmp	r5, #54	; 0x36
   1948c:	bf88      	it	hi
   1948e:	bd30      	pophi	{r4, r5, pc}
   19490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   19494:	ea4f 3101 	mov.w	r1, r1, lsl #12
   19498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1949c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   194a0:	d002      	beq.n	194a8 <__adddf3+0x70>
   194a2:	4240      	negs	r0, r0
   194a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   194a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   194ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   194b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   194b4:	d002      	beq.n	194bc <__adddf3+0x84>
   194b6:	4252      	negs	r2, r2
   194b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   194bc:	ea94 0f05 	teq	r4, r5
   194c0:	f000 80a7 	beq.w	19612 <__adddf3+0x1da>
   194c4:	f1a4 0401 	sub.w	r4, r4, #1
   194c8:	f1d5 0e20 	rsbs	lr, r5, #32
   194cc:	db0d      	blt.n	194ea <__adddf3+0xb2>
   194ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   194d2:	fa22 f205 	lsr.w	r2, r2, r5
   194d6:	1880      	adds	r0, r0, r2
   194d8:	f141 0100 	adc.w	r1, r1, #0
   194dc:	fa03 f20e 	lsl.w	r2, r3, lr
   194e0:	1880      	adds	r0, r0, r2
   194e2:	fa43 f305 	asr.w	r3, r3, r5
   194e6:	4159      	adcs	r1, r3
   194e8:	e00e      	b.n	19508 <__adddf3+0xd0>
   194ea:	f1a5 0520 	sub.w	r5, r5, #32
   194ee:	f10e 0e20 	add.w	lr, lr, #32
   194f2:	2a01      	cmp	r2, #1
   194f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   194f8:	bf28      	it	cs
   194fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   194fe:	fa43 f305 	asr.w	r3, r3, r5
   19502:	18c0      	adds	r0, r0, r3
   19504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   19508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1950c:	d507      	bpl.n	1951e <__adddf3+0xe6>
   1950e:	f04f 0e00 	mov.w	lr, #0
   19512:	f1dc 0c00 	rsbs	ip, ip, #0
   19516:	eb7e 0000 	sbcs.w	r0, lr, r0
   1951a:	eb6e 0101 	sbc.w	r1, lr, r1
   1951e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   19522:	d31b      	bcc.n	1955c <__adddf3+0x124>
   19524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   19528:	d30c      	bcc.n	19544 <__adddf3+0x10c>
   1952a:	0849      	lsrs	r1, r1, #1
   1952c:	ea5f 0030 	movs.w	r0, r0, rrx
   19530:	ea4f 0c3c 	mov.w	ip, ip, rrx
   19534:	f104 0401 	add.w	r4, r4, #1
   19538:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1953c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   19540:	f080 809a 	bcs.w	19678 <__adddf3+0x240>
   19544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   19548:	bf08      	it	eq
   1954a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1954e:	f150 0000 	adcs.w	r0, r0, #0
   19552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   19556:	ea41 0105 	orr.w	r1, r1, r5
   1955a:	bd30      	pop	{r4, r5, pc}
   1955c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   19560:	4140      	adcs	r0, r0
   19562:	eb41 0101 	adc.w	r1, r1, r1
   19566:	3c01      	subs	r4, #1
   19568:	bf28      	it	cs
   1956a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1956e:	d2e9      	bcs.n	19544 <__adddf3+0x10c>
   19570:	f091 0f00 	teq	r1, #0
   19574:	bf04      	itt	eq
   19576:	4601      	moveq	r1, r0
   19578:	2000      	moveq	r0, #0
   1957a:	fab1 f381 	clz	r3, r1
   1957e:	bf08      	it	eq
   19580:	3320      	addeq	r3, #32
   19582:	f1a3 030b 	sub.w	r3, r3, #11
   19586:	f1b3 0220 	subs.w	r2, r3, #32
   1958a:	da0c      	bge.n	195a6 <__adddf3+0x16e>
   1958c:	320c      	adds	r2, #12
   1958e:	dd08      	ble.n	195a2 <__adddf3+0x16a>
   19590:	f102 0c14 	add.w	ip, r2, #20
   19594:	f1c2 020c 	rsb	r2, r2, #12
   19598:	fa01 f00c 	lsl.w	r0, r1, ip
   1959c:	fa21 f102 	lsr.w	r1, r1, r2
   195a0:	e00c      	b.n	195bc <__adddf3+0x184>
   195a2:	f102 0214 	add.w	r2, r2, #20
   195a6:	bfd8      	it	le
   195a8:	f1c2 0c20 	rsble	ip, r2, #32
   195ac:	fa01 f102 	lsl.w	r1, r1, r2
   195b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   195b4:	bfdc      	itt	le
   195b6:	ea41 010c 	orrle.w	r1, r1, ip
   195ba:	4090      	lslle	r0, r2
   195bc:	1ae4      	subs	r4, r4, r3
   195be:	bfa2      	ittt	ge
   195c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   195c4:	4329      	orrge	r1, r5
   195c6:	bd30      	popge	{r4, r5, pc}
   195c8:	ea6f 0404 	mvn.w	r4, r4
   195cc:	3c1f      	subs	r4, #31
   195ce:	da1c      	bge.n	1960a <__adddf3+0x1d2>
   195d0:	340c      	adds	r4, #12
   195d2:	dc0e      	bgt.n	195f2 <__adddf3+0x1ba>
   195d4:	f104 0414 	add.w	r4, r4, #20
   195d8:	f1c4 0220 	rsb	r2, r4, #32
   195dc:	fa20 f004 	lsr.w	r0, r0, r4
   195e0:	fa01 f302 	lsl.w	r3, r1, r2
   195e4:	ea40 0003 	orr.w	r0, r0, r3
   195e8:	fa21 f304 	lsr.w	r3, r1, r4
   195ec:	ea45 0103 	orr.w	r1, r5, r3
   195f0:	bd30      	pop	{r4, r5, pc}
   195f2:	f1c4 040c 	rsb	r4, r4, #12
   195f6:	f1c4 0220 	rsb	r2, r4, #32
   195fa:	fa20 f002 	lsr.w	r0, r0, r2
   195fe:	fa01 f304 	lsl.w	r3, r1, r4
   19602:	ea40 0003 	orr.w	r0, r0, r3
   19606:	4629      	mov	r1, r5
   19608:	bd30      	pop	{r4, r5, pc}
   1960a:	fa21 f004 	lsr.w	r0, r1, r4
   1960e:	4629      	mov	r1, r5
   19610:	bd30      	pop	{r4, r5, pc}
   19612:	f094 0f00 	teq	r4, #0
   19616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1961a:	bf06      	itte	eq
   1961c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   19620:	3401      	addeq	r4, #1
   19622:	3d01      	subne	r5, #1
   19624:	e74e      	b.n	194c4 <__adddf3+0x8c>
   19626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1962a:	bf18      	it	ne
   1962c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   19630:	d029      	beq.n	19686 <__adddf3+0x24e>
   19632:	ea94 0f05 	teq	r4, r5
   19636:	bf08      	it	eq
   19638:	ea90 0f02 	teqeq	r0, r2
   1963c:	d005      	beq.n	1964a <__adddf3+0x212>
   1963e:	ea54 0c00 	orrs.w	ip, r4, r0
   19642:	bf04      	itt	eq
   19644:	4619      	moveq	r1, r3
   19646:	4610      	moveq	r0, r2
   19648:	bd30      	pop	{r4, r5, pc}
   1964a:	ea91 0f03 	teq	r1, r3
   1964e:	bf1e      	ittt	ne
   19650:	2100      	movne	r1, #0
   19652:	2000      	movne	r0, #0
   19654:	bd30      	popne	{r4, r5, pc}
   19656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1965a:	d105      	bne.n	19668 <__adddf3+0x230>
   1965c:	0040      	lsls	r0, r0, #1
   1965e:	4149      	adcs	r1, r1
   19660:	bf28      	it	cs
   19662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   19666:	bd30      	pop	{r4, r5, pc}
   19668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1966c:	bf3c      	itt	cc
   1966e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   19672:	bd30      	popcc	{r4, r5, pc}
   19674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1967c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   19680:	f04f 0000 	mov.w	r0, #0
   19684:	bd30      	pop	{r4, r5, pc}
   19686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1968a:	bf1a      	itte	ne
   1968c:	4619      	movne	r1, r3
   1968e:	4610      	movne	r0, r2
   19690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   19694:	bf1c      	itt	ne
   19696:	460b      	movne	r3, r1
   19698:	4602      	movne	r2, r0
   1969a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1969e:	bf06      	itte	eq
   196a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   196a4:	ea91 0f03 	teqeq	r1, r3
   196a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   196ac:	bd30      	pop	{r4, r5, pc}
   196ae:	bf00      	nop

000196b0 <__aeabi_ui2d>:
   196b0:	f090 0f00 	teq	r0, #0
   196b4:	bf04      	itt	eq
   196b6:	2100      	moveq	r1, #0
   196b8:	4770      	bxeq	lr
   196ba:	b530      	push	{r4, r5, lr}
   196bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   196c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   196c4:	f04f 0500 	mov.w	r5, #0
   196c8:	f04f 0100 	mov.w	r1, #0
   196cc:	e750      	b.n	19570 <__adddf3+0x138>
   196ce:	bf00      	nop

000196d0 <__aeabi_i2d>:
   196d0:	f090 0f00 	teq	r0, #0
   196d4:	bf04      	itt	eq
   196d6:	2100      	moveq	r1, #0
   196d8:	4770      	bxeq	lr
   196da:	b530      	push	{r4, r5, lr}
   196dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   196e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   196e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   196e8:	bf48      	it	mi
   196ea:	4240      	negmi	r0, r0
   196ec:	f04f 0100 	mov.w	r1, #0
   196f0:	e73e      	b.n	19570 <__adddf3+0x138>
   196f2:	bf00      	nop

000196f4 <__aeabi_f2d>:
   196f4:	0042      	lsls	r2, r0, #1
   196f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   196fa:	ea4f 0131 	mov.w	r1, r1, rrx
   196fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   19702:	bf1f      	itttt	ne
   19704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   19708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1970c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   19710:	4770      	bxne	lr
   19712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   19716:	bf08      	it	eq
   19718:	4770      	bxeq	lr
   1971a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1971e:	bf04      	itt	eq
   19720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   19724:	4770      	bxeq	lr
   19726:	b530      	push	{r4, r5, lr}
   19728:	f44f 7460 	mov.w	r4, #896	; 0x380
   1972c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   19730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   19734:	e71c      	b.n	19570 <__adddf3+0x138>
   19736:	bf00      	nop

00019738 <__aeabi_ul2d>:
   19738:	ea50 0201 	orrs.w	r2, r0, r1
   1973c:	bf08      	it	eq
   1973e:	4770      	bxeq	lr
   19740:	b530      	push	{r4, r5, lr}
   19742:	f04f 0500 	mov.w	r5, #0
   19746:	e00a      	b.n	1975e <__aeabi_l2d+0x16>

00019748 <__aeabi_l2d>:
   19748:	ea50 0201 	orrs.w	r2, r0, r1
   1974c:	bf08      	it	eq
   1974e:	4770      	bxeq	lr
   19750:	b530      	push	{r4, r5, lr}
   19752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   19756:	d502      	bpl.n	1975e <__aeabi_l2d+0x16>
   19758:	4240      	negs	r0, r0
   1975a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1975e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   19762:	f104 0432 	add.w	r4, r4, #50	; 0x32
   19766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1976a:	f43f aed8 	beq.w	1951e <__adddf3+0xe6>
   1976e:	f04f 0203 	mov.w	r2, #3
   19772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   19776:	bf18      	it	ne
   19778:	3203      	addne	r2, #3
   1977a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1977e:	bf18      	it	ne
   19780:	3203      	addne	r2, #3
   19782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   19786:	f1c2 0320 	rsb	r3, r2, #32
   1978a:	fa00 fc03 	lsl.w	ip, r0, r3
   1978e:	fa20 f002 	lsr.w	r0, r0, r2
   19792:	fa01 fe03 	lsl.w	lr, r1, r3
   19796:	ea40 000e 	orr.w	r0, r0, lr
   1979a:	fa21 f102 	lsr.w	r1, r1, r2
   1979e:	4414      	add	r4, r2
   197a0:	e6bd      	b.n	1951e <__adddf3+0xe6>
   197a2:	bf00      	nop

000197a4 <__aeabi_d2lz>:
   197a4:	b508      	push	{r3, lr}
   197a6:	4602      	mov	r2, r0
   197a8:	460b      	mov	r3, r1
   197aa:	ec43 2b17 	vmov	d7, r2, r3
   197ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   197b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   197b6:	d403      	bmi.n	197c0 <__aeabi_d2lz+0x1c>
   197b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   197bc:	f000 b80c 	b.w	197d8 <__aeabi_d2ulz>
   197c0:	eeb1 7b47 	vneg.f64	d7, d7
   197c4:	ec51 0b17 	vmov	r0, r1, d7
   197c8:	f000 f806 	bl	197d8 <__aeabi_d2ulz>
   197cc:	4240      	negs	r0, r0
   197ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   197d2:	bd08      	pop	{r3, pc}
   197d4:	0000      	movs	r0, r0
	...

000197d8 <__aeabi_d2ulz>:
   197d8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 19808 <__aeabi_d2ulz+0x30>
   197dc:	ec41 0b17 	vmov	d7, r0, r1
   197e0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 19810 <__aeabi_d2ulz+0x38>
   197e4:	ee27 6b06 	vmul.f64	d6, d7, d6
   197e8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   197ec:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   197f0:	eea4 7b45 	vfms.f64	d7, d4, d5
   197f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   197f8:	ee16 1a10 	vmov	r1, s12
   197fc:	ee17 0a90 	vmov	r0, s15
   19800:	4770      	bx	lr
   19802:	bf00      	nop
   19804:	f3af 8000 	nop.w
   19808:	00000000 	.word	0x00000000
   1980c:	3df00000 	.word	0x3df00000
   19810:	00000000 	.word	0x00000000
   19814:	41f00000 	.word	0x41f00000

00019818 <___reboot_Teensyduino__veneer>:
   19818:	f85f f000 	ldr.w	pc, [pc]	; 1981c <___reboot_Teensyduino__veneer+0x4>
   1981c:	60002589 	.word	0x60002589

00019820 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   19820:	f85f f000 	ldr.w	pc, [pc]	; 19824 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   19824:	60001711 	.word	0x60001711

00019828 <__usb_init_veneer>:
   19828:	f85f f000 	ldr.w	pc, [pc]	; 1982c <__usb_init_veneer+0x4>
   1982c:	600024a1 	.word	0x600024a1

00019830 <___ZN16CrashReportClasscvbEv_veneer>:
   19830:	f85f f000 	ldr.w	pc, [pc]	; 19834 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   19834:	60001e15 	.word	0x60001e15

00019838 <___init_veneer>:
   19838:	f85f f000 	ldr.w	pc, [pc]	; 1983c <___init_veneer+0x4>
   1983c:	60002631 	.word	0x60002631

Disassembly of section .fini:

00019840 <_fini>:
   19840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19842:	bf00      	nop

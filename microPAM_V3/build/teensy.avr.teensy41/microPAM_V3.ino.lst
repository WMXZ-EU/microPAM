
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\A5394982E70389E0D0C97A4E173256C7/microPAM_V3.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20009ac0 	.word	0x20009ac0
6000142c:	200293e0 	.word	0x200293e0

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fdd4 	bl	60001fec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fd72 	bl	60001ffc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 ffa0 	bl	60002490 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f93d 	bl	600027e0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fdae 	bl	6000210c <configure_external_ram>
	analog_init();
600015b0:	f001 f8d2 	bl	60002758 <analog_init>
	pwm_init();
600015b4:	f001 f924 	bl	60002800 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 ff98 	bl	600024ec <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fd18 	bl	60001ff0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f001 f829 	bl	6000261c <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fd11 	bl	60001ff8 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fd0d 	bl	60001ff4 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f919 	bl	60002810 <____libc_init_array_veneer>
	main();
600015de:	f001 f8eb 	bl	600027b8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001a4d8 	.word	0x0001a4d8
600015f0:	60002a40 	.word	0x60002a40
600015f4:	00000000 	.word	0x00000000
600015f8:	20009ac0 	.word	0x20009ac0
600015fc:	6001cf1c 	.word	0x6001cf1c
60001600:	20000000 	.word	0x20000000
60001604:	20009800 	.word	0x20009800
60001608:	0000dca1 	.word	0x0000dca1
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000ca79 	.word	0x0000ca79
6000161c:	20029358 	.word	0x20029358
60001620:	0000ca7d 	.word	0x0000ca7d
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	23c34600 	.word	0x23c34600
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	2002935c 	.word	0x2002935c
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20007b88 	.word	0x20007b88
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20007b88 	.word	0x20007b88

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20007b88 	.word	0x20007b88
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20007b88 	.word	0x20007b88

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600017f0:	4b20      	ldr	r3, [pc, #128]	; (60001874 <CrashReportClass::clear()+0x84>)
600017f2:	2000      	movs	r0, #0
{
600017f4:	b430      	push	{r4, r5}
	info->ipsr  = 0;
600017f6:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600017fa:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600017fe:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001802:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
60001806:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000180a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
6000180e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001812:	4919      	ldr	r1, [pc, #100]	; (60001878 <CrashReportClass::clear()+0x88>)
60001814:	4a19      	ldr	r2, [pc, #100]	; (6000187c <CrashReportClass::clear()+0x8c>)
60001816:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000181a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001822:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001826:	4b16      	ldr	r3, [pc, #88]	; (60001880 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001828:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000182a:	4c16      	ldr	r4, [pc, #88]	; (60001884 <CrashReportClass::clear()+0x94>)
6000182c:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000182e:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001830:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
60001834:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
60001836:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001838:	4b13      	ldr	r3, [pc, #76]	; (60001888 <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000183a:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
6000183e:	4618      	mov	r0, r3
60001840:	3302      	adds	r3, #2
60001842:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
60001844:	42a3      	cmp	r3, r4
			a += *p++;
60001846:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
6000184a:	4411      	add	r1, r2
		while (len > 0) {
6000184c:	d1f7      	bne.n	6000183e <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
6000184e:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001850:	4b0c      	ldr	r3, [pc, #48]	; (60001884 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
60001852:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
60001856:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
6000185a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
6000185e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001862:	4a09      	ldr	r2, [pc, #36]	; (60001888 <CrashReportClass::clear()+0x98>)
60001864:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
60001868:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000186c:	f3bf 8f6f 	isb	sy
}
60001870:	bc30      	pop	{r4, r5}
60001872:	4770      	bx	lr
60001874:	2027ff00 	.word	0x2027ff00
60001878:	2027ff80 	.word	0x2027ff80
6000187c:	2027ffa0 	.word	0x2027ffa0
60001880:	400f8000 	.word	0x400f8000
60001884:	2027f000 	.word	0x2027f000
60001888:	2027ffc0 	.word	0x2027ffc0

6000188c <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
6000188c:	4bb2      	ldr	r3, [pc, #712]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
6000188e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001892:	2a0b      	cmp	r2, #11
{
60001894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001898:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000189a:	d11b      	bne.n	600018d4 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
6000189c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
600018a0:	49ae      	ldr	r1, [pc, #696]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018a2:	4baf      	ldr	r3, [pc, #700]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
600018a4:	4eaf      	ldr	r6, [pc, #700]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
600018a6:	f101 0c04 	add.w	ip, r1, #4
600018aa:	4050      	eors	r0, r2
600018ac:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018ae:	f000 0201 	and.w	r2, r0, #1
600018b2:	3c01      	subs	r4, #1
600018b4:	fb03 f202 	mul.w	r2, r3, r2
600018b8:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
600018bc:	d1f7      	bne.n	600018ae <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
600018be:	45b4      	cmp	ip, r6
600018c0:	d002      	beq.n	600018c8 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
600018c2:	684a      	ldr	r2, [r1, #4]
600018c4:	4661      	mov	r1, ip
600018c6:	e7ee      	b.n	600018a6 <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
600018c8:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>
600018cc:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
600018d0:	4298      	cmp	r0, r3
600018d2:	d079      	beq.n	600019c8 <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600018d4:	682b      	ldr	r3, [r5, #0]
600018d6:	2217      	movs	r2, #23
600018d8:	49a3      	ldr	r1, [pc, #652]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x2dc>)
600018da:	4628      	mov	r0, r5
600018dc:	685b      	ldr	r3, [r3, #4]
600018de:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600018e0:	4628      	mov	r0, r5
600018e2:	f000 ff6d 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e6:	682b      	ldr	r3, [r5, #0]
600018e8:	2248      	movs	r2, #72	; 0x48
600018ea:	49a0      	ldr	r1, [pc, #640]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x2e0>)
600018ec:	685b      	ldr	r3, [r3, #4]
600018ee:	4628      	mov	r0, r5
600018f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018f2:	4628      	mov	r0, r5
600018f4:	f000 ff64 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018f8:	682b      	ldr	r3, [r5, #0]
600018fa:	2249      	movs	r2, #73	; 0x49
600018fc:	499c      	ldr	r1, [pc, #624]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x2e4>)
600018fe:	685b      	ldr	r3, [r3, #4]
60001900:	4628      	mov	r0, r5
60001902:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001904:	4628      	mov	r0, r5
60001906:	f000 ff5b 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2224      	movs	r2, #36	; 0x24
6000190e:	4999      	ldr	r1, [pc, #612]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001916:	4628      	mov	r0, r5
60001918:	f000 ff52 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000191c:	682b      	ldr	r3, [r5, #0]
6000191e:	2247      	movs	r2, #71	; 0x47
60001920:	4995      	ldr	r1, [pc, #596]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001922:	685b      	ldr	r3, [r3, #4]
60001924:	4628      	mov	r0, r5
60001926:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001928:	4628      	mov	r0, r5
6000192a:	f000 ff49 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192e:	682b      	ldr	r3, [r5, #0]
60001930:	223f      	movs	r2, #63	; 0x3f
60001932:	4992      	ldr	r1, [pc, #584]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x2f0>)
60001934:	685b      	ldr	r3, [r3, #4]
60001936:	4628      	mov	r0, r5
60001938:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000193a:	4628      	mov	r0, r5
6000193c:	f000 ff40 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001940:	4b8f      	ldr	r3, [pc, #572]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001942:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001944:	07a2      	lsls	r2, r4, #30
60001946:	d50d      	bpl.n	60001964 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
60001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
6000194a:	4b8e      	ldr	r3, [pc, #568]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000194c:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
6000194e:	682b      	ldr	r3, [r5, #0]
60001950:	f000 8174 	beq.w	60001c3c <CrashReportClass::printTo(Print&) const+0x3b0>
60001954:	2240      	movs	r2, #64	; 0x40
60001956:	498c      	ldr	r1, [pc, #560]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x2fc>)
60001958:	685b      	ldr	r3, [r3, #4]
6000195a:	4628      	mov	r0, r5
6000195c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000195e:	4628      	mov	r0, r5
60001960:	f000 ff2e 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001964:	0767      	lsls	r7, r4, #29
60001966:	f100 815f 	bmi.w	60001c28 <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
6000196a:	0726      	lsls	r6, r4, #28
6000196c:	f100 8152 	bmi.w	60001c14 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001970:	06e0      	lsls	r0, r4, #27
60001972:	f100 8145 	bmi.w	60001c00 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001976:	06a1      	lsls	r1, r4, #26
60001978:	f100 8138 	bmi.w	60001bec <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000197c:	0662      	lsls	r2, r4, #25
6000197e:	f100 812b 	bmi.w	60001bd8 <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001982:	0623      	lsls	r3, r4, #24
60001984:	f100 80dd 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001988:	f414 7480 	ands.w	r4, r4, #256	; 0x100
6000198c:	f040 80ad 	bne.w	60001aea <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001990:	4b71      	ldr	r3, [pc, #452]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001992:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
60001996:	b196      	cbz	r6, 600019be <CrashReportClass::printTo(Print&) const+0x132>
60001998:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
6000199c:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
6000199e:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
600019a0:	487a      	ldr	r0, [pc, #488]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
600019a2:	4619      	mov	r1, r3
600019a4:	3302      	adds	r3, #2
600019a6:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
600019a8:	4283      	cmp	r3, r0
			a += *p++;
600019aa:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
600019ae:	4414      	add	r4, r2
		while (len > 0) {
600019b0:	d1f7      	bne.n	600019a2 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
600019b2:	b293      	uxth	r3, r2
		return a | (b << 16);
600019b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
600019b8:	429f      	cmp	r7, r3
600019ba:	f000 817c 	beq.w	60001cb6 <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
600019be:	f7ff ff17 	bl	600017f0 <CrashReportClass::clear()>
}
600019c2:	2001      	movs	r0, #1
600019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
600019c8:	682b      	ldr	r3, [r5, #0]
600019ca:	220c      	movs	r2, #12
600019cc:	4970      	ldr	r1, [pc, #448]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x304>)
600019ce:	4628      	mov	r0, r5
600019d0:	685b      	ldr	r3, [r3, #4]
600019d2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019d4:	4628      	mov	r0, r5
600019d6:	f000 fef3 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019da:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600019dc:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600019e0:	4628      	mov	r0, r5
    info->time /= 60;
600019e2:	4b6c      	ldr	r3, [pc, #432]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x308>)
600019e4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600019e8:	fba3 2709 	umull	r2, r7, r3, r9
600019ec:	496a      	ldr	r1, [pc, #424]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x30c>)
600019ee:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600019f0:	fba3 2307 	umull	r2, r3, r3, r7
600019f4:	2226      	movs	r2, #38	; 0x26
600019f6:	095e      	lsrs	r6, r3, #5
600019f8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600019fc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600019fe:	4967      	ldr	r1, [pc, #412]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a00:	220a      	movs	r2, #10
60001a02:	4628      	mov	r0, r5
60001a04:	fba1 3106 	umull	r3, r1, r1, r6
60001a08:	4623      	mov	r3, r4
60001a0a:	0909      	lsrs	r1, r1, #4
60001a0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001a10:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001a14:	f000 fedc 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a18:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001a1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001a1e:	2201      	movs	r2, #1
60001a20:	685b      	ldr	r3, [r3, #4]
60001a22:	4628      	mov	r0, r5
60001a24:	495e      	ldr	r1, [pc, #376]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a26:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a28:	4623      	mov	r3, r4
60001a2a:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001a2e:	220a      	movs	r2, #10
60001a30:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001a32:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001a36:	f000 fecb 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3a:	682b      	ldr	r3, [r5, #0]
60001a3c:	2201      	movs	r2, #1
60001a3e:	4958      	ldr	r1, [pc, #352]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a40:	685b      	ldr	r3, [r3, #4]
60001a42:	4628      	mov	r0, r5
60001a44:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a46:	4623      	mov	r3, r4
60001a48:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001a4c:	220a      	movs	r2, #10
60001a4e:	4628      	mov	r0, r5
60001a50:	f000 febe 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001a54:	4628      	mov	r0, r5
60001a56:	f000 feb3 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a5a:	682b      	ldr	r3, [r5, #0]
60001a5c:	2224      	movs	r2, #36	; 0x24
60001a5e:	4951      	ldr	r1, [pc, #324]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x318>)
60001a60:	685b      	ldr	r3, [r3, #4]
60001a62:	4628      	mov	r0, r5
60001a64:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001a66:	4623      	mov	r3, r4
60001a68:	2210      	movs	r2, #16
60001a6a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a6e:	4628      	mov	r0, r5
60001a70:	f000 feae 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a74:	4628      	mov	r0, r5
60001a76:	f000 fea3 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a7a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a7e:	2e00      	cmp	r6, #0
60001a80:	f040 80df 	bne.w	60001c42 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001a84:	4e34      	ldr	r6, [pc, #208]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001a86:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a8a:	2c00      	cmp	r4, #0
60001a8c:	f040 80fa 	bne.w	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a90:	682b      	ldr	r3, [r5, #0]
60001a92:	2222      	movs	r2, #34	; 0x22
60001a94:	4944      	ldr	r1, [pc, #272]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x31c>)
60001a96:	4628      	mov	r0, r5
60001a98:	685b      	ldr	r3, [r3, #4]
60001a9a:	4798      	blx	r3
    p.print(info->temp);
60001a9c:	4b2e      	ldr	r3, [pc, #184]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a9e:	2102      	movs	r1, #2
60001aa0:	4628      	mov	r0, r5
60001aa2:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001aa6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001aaa:	f000 fe95 	bl	600027d8 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	682b      	ldr	r3, [r5, #0]
60001ab0:	2205      	movs	r2, #5
60001ab2:	493e      	ldr	r1, [pc, #248]	; (60001bac <CrashReportClass::printTo(Print&) const+0x320>)
60001ab4:	685b      	ldr	r3, [r3, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	4798      	blx	r3
60001aba:	682b      	ldr	r3, [r5, #0]
60001abc:	221d      	movs	r2, #29
60001abe:	493c      	ldr	r1, [pc, #240]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x324>)
60001ac0:	685b      	ldr	r3, [r3, #4]
60001ac2:	4628      	mov	r0, r5
60001ac4:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001ac6:	4a3b      	ldr	r2, [pc, #236]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x328>)
60001ac8:	483b      	ldr	r0, [pc, #236]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001aca:	2300      	movs	r3, #0
60001acc:	6811      	ldr	r1, [r2, #0]
60001ace:	220a      	movs	r2, #10
60001ad0:	fba0 0101 	umull	r0, r1, r0, r1
60001ad4:	4628      	mov	r0, r5
60001ad6:	0c89      	lsrs	r1, r1, #18
60001ad8:	f000 fe7a 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001adc:	682b      	ldr	r3, [r5, #0]
60001ade:	2204      	movs	r2, #4
60001ae0:	4936      	ldr	r1, [pc, #216]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x330>)
60001ae2:	685b      	ldr	r3, [r3, #4]
60001ae4:	4628      	mov	r0, r5
60001ae6:	4798      	blx	r3
60001ae8:	e72a      	b.n	60001940 <CrashReportClass::printTo(Print&) const+0xb4>
60001aea:	682b      	ldr	r3, [r5, #0]
60001aec:	2229      	movs	r2, #41	; 0x29
60001aee:	4934      	ldr	r1, [pc, #208]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x334>)
60001af0:	4628      	mov	r0, r5
60001af2:	685b      	ldr	r3, [r3, #4]
60001af4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001af6:	4628      	mov	r0, r5
60001af8:	f000 fe62 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001afc:	4920      	ldr	r1, [pc, #128]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001afe:	6828      	ldr	r0, [r5, #0]
60001b00:	2221      	movs	r2, #33	; 0x21
60001b02:	688b      	ldr	r3, [r1, #8]
60001b04:	6844      	ldr	r4, [r0, #4]
60001b06:	4628      	mov	r0, r5
60001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001b0c:	608b      	str	r3, [r1, #8]
60001b0e:	492d      	ldr	r1, [pc, #180]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x338>)
60001b10:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fe54 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b18:	682b      	ldr	r3, [r5, #0]
60001b1a:	2242      	movs	r2, #66	; 0x42
60001b1c:	492a      	ldr	r1, [pc, #168]	; (60001bc8 <CrashReportClass::printTo(Print&) const+0x33c>)
60001b1e:	685b      	ldr	r3, [r3, #4]
60001b20:	4628      	mov	r0, r5
60001b22:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b24:	4628      	mov	r0, r5
60001b26:	f000 fe4b 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b2a:	4a28      	ldr	r2, [pc, #160]	; (60001bcc <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001b2c:	4b28      	ldr	r3, [pc, #160]	; (60001bd0 <CrashReportClass::printTo(Print&) const+0x344>)
60001b2e:	2107      	movs	r1, #7
60001b30:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b32:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001b38:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001b3a:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001b3e:	bf30      	wfi
60001b40:	e7fd      	b.n	60001b3e <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2221      	movs	r2, #33	; 0x21
60001b46:	4923      	ldr	r1, [pc, #140]	; (60001bd4 <CrashReportClass::printTo(Print&) const+0x348>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fe36 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001b54:	e718      	b.n	60001988 <CrashReportClass::printTo(Print&) const+0xfc>
60001b56:	bf00      	nop
60001b58:	2027ff00 	.word	0x2027ff00
60001b5c:	2027ff80 	.word	0x2027ff80
60001b60:	edb88320 	.word	0xedb88320
60001b64:	2027ffa8 	.word	0x2027ffa8
60001b68:	2000851c 	.word	0x2000851c
60001b6c:	20008534 	.word	0x20008534
60001b70:	20008580 	.word	0x20008580
60001b74:	200085cc 	.word	0x200085cc
60001b78:	200085f4 	.word	0x200085f4
60001b7c:	2000863c 	.word	0x2000863c
60001b80:	400f8000 	.word	0x400f8000
60001b84:	0bad00f1 	.word	0x0bad00f1
60001b88:	200086c8 	.word	0x200086c8
60001b8c:	2027ffdc 	.word	0x2027ffdc
60001b90:	20008004 	.word	0x20008004
60001b94:	88888889 	.word	0x88888889
60001b98:	20008014 	.word	0x20008014
60001b9c:	aaaaaaab 	.word	0xaaaaaaab
60001ba0:	2000803c 	.word	0x2000803c
60001ba4:	20008040 	.word	0x20008040
60001ba8:	200084c8 	.word	0x200084c8
60001bac:	200084ec 	.word	0x200084ec
60001bb0:	200084f4 	.word	0x200084f4
60001bb4:	20008ab8 	.word	0x20008ab8
60001bb8:	431bde83 	.word	0x431bde83
60001bbc:	20008514 	.word	0x20008514
60001bc0:	200087fc 	.word	0x200087fc
60001bc4:	20008828 	.word	0x20008828
60001bc8:	2000884c 	.word	0x2000884c
60001bcc:	400d4000 	.word	0x400d4000
60001bd0:	400ac000 	.word	0x400ac000
60001bd4:	200087d8 	.word	0x200087d8
							  return write((const uint8_t *)str, strlen(str)); }
60001bd8:	682b      	ldr	r3, [r5, #0]
60001bda:	2221      	movs	r2, #33	; 0x21
60001bdc:	499c      	ldr	r1, [pc, #624]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001bde:	4628      	mov	r0, r5
60001be0:	685b      	ldr	r3, [r3, #4]
60001be2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be4:	4628      	mov	r0, r5
60001be6:	f000 fdeb 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001bea:	e6ca      	b.n	60001982 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001bec:	682b      	ldr	r3, [r5, #0]
60001bee:	2229      	movs	r2, #41	; 0x29
60001bf0:	4998      	ldr	r1, [pc, #608]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001bf2:	4628      	mov	r0, r5
60001bf4:	685b      	ldr	r3, [r3, #4]
60001bf6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bf8:	4628      	mov	r0, r5
60001bfa:	f000 fde1 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001bfe:	e6bd      	b.n	6000197c <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c00:	682b      	ldr	r3, [r5, #0]
60001c02:	2226      	movs	r2, #38	; 0x26
60001c04:	4994      	ldr	r1, [pc, #592]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x5cc>)
60001c06:	4628      	mov	r0, r5
60001c08:	685b      	ldr	r3, [r3, #4]
60001c0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c0c:	4628      	mov	r0, r5
60001c0e:	f000 fdd7 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001c12:	e6b0      	b.n	60001976 <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001c14:	682b      	ldr	r3, [r5, #0]
60001c16:	222a      	movs	r2, #42	; 0x2a
60001c18:	4990      	ldr	r1, [pc, #576]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x5d0>)
60001c1a:	4628      	mov	r0, r5
60001c1c:	685b      	ldr	r3, [r3, #4]
60001c1e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c20:	4628      	mov	r0, r5
60001c22:	f000 fdcd 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001c26:	e6a3      	b.n	60001970 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c28:	682b      	ldr	r3, [r5, #0]
60001c2a:	2227      	movs	r2, #39	; 0x27
60001c2c:	498c      	ldr	r1, [pc, #560]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001c2e:	4628      	mov	r0, r5
60001c30:	685b      	ldr	r3, [r3, #4]
60001c32:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c34:	4628      	mov	r0, r5
60001c36:	f000 fdc3 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001c3a:	e696      	b.n	6000196a <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001c3c:	2248      	movs	r2, #72	; 0x48
60001c3e:	4989      	ldr	r1, [pc, #548]	; (60001e64 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001c40:	e68a      	b.n	60001958 <CrashReportClass::printTo(Print&) const+0xcc>
60001c42:	682b      	ldr	r3, [r5, #0]
60001c44:	2208      	movs	r2, #8
60001c46:	4988      	ldr	r1, [pc, #544]	; (60001e68 <CrashReportClass::printTo(Print&) const+0x5dc>)
60001c48:	4628      	mov	r0, r5
60001c4a:	685b      	ldr	r3, [r3, #4]
60001c4c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c4e:	4623      	mov	r3, r4
60001c50:	2210      	movs	r2, #16
60001c52:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001c56:	4628      	mov	r0, r5
60001c58:	f000 fdba 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c5c:	4628      	mov	r0, r5
60001c5e:	f000 fdaf 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001c62:	07f4      	lsls	r4, r6, #31
60001c64:	d469      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001c66:	07b0      	lsls	r0, r6, #30
60001c68:	f100 8153 	bmi.w	60001f12 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001c6c:	0731      	lsls	r1, r6, #28
60001c6e:	f100 8144 	bmi.w	60001efa <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001c72:	06f2      	lsls	r2, r6, #27
60001c74:	f100 815d 	bmi.w	60001f32 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001c78:	06b3      	lsls	r3, r6, #26
60001c7a:	d567      	bpl.n	60001d4c <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c7c:	682b      	ldr	r3, [r5, #0]
60001c7e:	222a      	movs	r2, #42	; 0x2a
60001c80:	497a      	ldr	r1, [pc, #488]	; (60001e6c <CrashReportClass::printTo(Print&) const+0x5e0>)
60001c82:	e05d      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001c84:	682b      	ldr	r3, [r5, #0]
60001c86:	2208      	movs	r2, #8
60001c88:	4979      	ldr	r1, [pc, #484]	; (60001e70 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001c8a:	4628      	mov	r0, r5
60001c8c:	685b      	ldr	r3, [r3, #4]
60001c8e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c90:	2300      	movs	r3, #0
60001c92:	2210      	movs	r2, #16
60001c94:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001c98:	4628      	mov	r0, r5
60001c9a:	f000 fd99 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c9e:	4628      	mov	r0, r5
60001ca0:	f000 fd8e 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001ca4:	07a0      	lsls	r0, r4, #30
60001ca6:	d467      	bmi.n	60001d78 <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001ca8:	0061      	lsls	r1, r4, #1
60001caa:	f57f aef1 	bpl.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001cae:	682b      	ldr	r3, [r5, #0]
60001cb0:	221b      	movs	r2, #27
60001cb2:	4970      	ldr	r1, [pc, #448]	; (60001e74 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001cb4:	e063      	b.n	60001d7e <CrashReportClass::printTo(Print&) const+0x4f2>
60001cb6:	2401      	movs	r4, #1
60001cb8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001eb0 <CrashReportClass::printTo(Print&) const+0x624>
60001cbc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001eb4 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001cc0:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001e98 <CrashReportClass::printTo(Print&) const+0x60c>
60001cc4:	e005      	b.n	60001cd2 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001cc6:	3401      	adds	r4, #1
60001cc8:	2c07      	cmp	r4, #7
60001cca:	f43f ae78 	beq.w	600019be <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001cce:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001cd2:	1e63      	subs	r3, r4, #1
60001cd4:	2701      	movs	r7, #1
60001cd6:	fa07 f203 	lsl.w	r2, r7, r3
60001cda:	4232      	tst	r2, r6
60001cdc:	d0f3      	beq.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
60001cde:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	220e      	movs	r2, #14
60001ce6:	4651      	mov	r1, sl
60001ce8:	685b      	ldr	r3, [r3, #4]
60001cea:	4628      	mov	r0, r5
60001cec:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001cee:	4621      	mov	r1, r4
60001cf0:	4628      	mov	r0, r5
60001cf2:	f000 fd89 	bl	60002808 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cf6:	682b      	ldr	r3, [r5, #0]
60001cf8:	2205      	movs	r2, #5
60001cfa:	495f      	ldr	r1, [pc, #380]	; (60001e78 <CrashReportClass::printTo(Print&) const+0x5ec>)
60001cfc:	685b      	ldr	r3, [r3, #4]
60001cfe:	4628      	mov	r0, r5
60001d00:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001d02:	6871      	ldr	r1, [r6, #4]
60001d04:	2300      	movs	r3, #0
60001d06:	220a      	movs	r2, #10
60001d08:	4628      	mov	r0, r5
60001d0a:	f000 fd61 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d0e:	682b      	ldr	r3, [r5, #0]
60001d10:	2204      	movs	r2, #4
60001d12:	495a      	ldr	r1, [pc, #360]	; (60001e7c <CrashReportClass::printTo(Print&) const+0x5f0>)
60001d14:	685b      	ldr	r3, [r3, #4]
60001d16:	4628      	mov	r0, r5
60001d18:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d1a:	6871      	ldr	r1, [r6, #4]
60001d1c:	2300      	movs	r3, #0
60001d1e:	2210      	movs	r2, #16
60001d20:	4628      	mov	r0, r5
60001d22:	f000 fd55 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d26:	682b      	ldr	r3, [r5, #0]
60001d28:	463a      	mov	r2, r7
60001d2a:	4955      	ldr	r1, [pc, #340]	; (60001e80 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001d2c:	685b      	ldr	r3, [r3, #4]
60001d2e:	4628      	mov	r0, r5
60001d30:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d32:	4628      	mov	r0, r5
60001d34:	f000 fd44 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001d38:	e7c5      	b.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2228      	movs	r2, #40	; 0x28
60001d3e:	4951      	ldr	r1, [pc, #324]	; (60001e84 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001d40:	685b      	ldr	r3, [r3, #4]
60001d42:	4628      	mov	r0, r5
60001d44:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d46:	4628      	mov	r0, r5
60001d48:	f000 fd3a 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001d4c:	0637      	lsls	r7, r6, #24
60001d4e:	d43c      	bmi.n	60001dca <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001d50:	05f4      	lsls	r4, r6, #23
60001d52:	d41b      	bmi.n	60001d8c <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001d54:	05b0      	lsls	r0, r6, #22
60001d56:	f100 80d8 	bmi.w	60001f0a <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001d5a:	0571      	lsls	r1, r6, #21
60001d5c:	f100 80d1 	bmi.w	60001f02 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001d60:	0532      	lsls	r2, r6, #20
60001d62:	f100 80e2 	bmi.w	60001f2a <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001d66:	04f3      	lsls	r3, r6, #19
60001d68:	f100 80db 	bmi.w	60001f22 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001d6c:	04b7      	lsls	r7, r6, #18
60001d6e:	d516      	bpl.n	60001d9e <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	2231      	movs	r2, #49	; 0x31
60001d74:	4944      	ldr	r1, [pc, #272]	; (60001e88 <CrashReportClass::printTo(Print&) const+0x5fc>)
60001d76:	e00c      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001d78:	682b      	ldr	r3, [r5, #0]
60001d7a:	2226      	movs	r2, #38	; 0x26
60001d7c:	4943      	ldr	r1, [pc, #268]	; (60001e8c <CrashReportClass::printTo(Print&) const+0x600>)
60001d7e:	4628      	mov	r0, r5
60001d80:	685b      	ldr	r3, [r3, #4]
60001d82:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d84:	4628      	mov	r0, r5
60001d86:	f000 fd1b 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001d8a:	e681      	b.n	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001d8c:	682b      	ldr	r3, [r5, #0]
60001d8e:	2220      	movs	r2, #32
60001d90:	493f      	ldr	r1, [pc, #252]	; (60001e90 <CrashReportClass::printTo(Print&) const+0x604>)
60001d92:	685b      	ldr	r3, [r3, #4]
60001d94:	4628      	mov	r0, r5
60001d96:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d98:	4628      	mov	r0, r5
60001d9a:	f000 fd11 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001d9e:	0434      	lsls	r4, r6, #16
60001da0:	d440      	bmi.n	60001e24 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001da2:	03f0      	lsls	r0, r6, #15
60001da4:	d42e      	bmi.n	60001e04 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001da6:	03b1      	lsls	r1, r6, #14
60001da8:	f100 80b7 	bmi.w	60001f1a <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001dac:	0372      	lsls	r2, r6, #13
60001dae:	d44b      	bmi.n	60001e48 <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001db0:	0333      	lsls	r3, r6, #12
60001db2:	f100 80c6 	bmi.w	60001f42 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001db6:	01f7      	lsls	r7, r6, #7
60001db8:	f100 80bf 	bmi.w	60001f3a <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001dbc:	01b4      	lsls	r4, r6, #6
60001dbe:	f57f ae61 	bpl.w	60001a84 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001dc2:	682b      	ldr	r3, [r5, #0]
60001dc4:	221b      	movs	r2, #27
60001dc6:	4933      	ldr	r1, [pc, #204]	; (60001e94 <CrashReportClass::printTo(Print&) const+0x608>)
60001dc8:	e01f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001dca:	682b      	ldr	r3, [r5, #0]
60001dcc:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001dce:	4c32      	ldr	r4, [pc, #200]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001dd0:	4628      	mov	r0, r5
60001dd2:	4932      	ldr	r1, [pc, #200]	; (60001e9c <CrashReportClass::printTo(Print&) const+0x610>)
60001dd4:	685b      	ldr	r3, [r3, #4]
60001dd6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dd8:	2210      	movs	r2, #16
60001dda:	2300      	movs	r3, #0
60001ddc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001de0:	4628      	mov	r0, r5
60001de2:	f000 fcf5 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001de6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001dea:	2a1f      	cmp	r2, #31
60001dec:	d964      	bls.n	60001eb8 <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001dee:	4b2c      	ldr	r3, [pc, #176]	; (60001ea0 <CrashReportClass::printTo(Print&) const+0x614>)
60001df0:	429a      	cmp	r2, r3
60001df2:	d303      	bcc.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001df4:	3320      	adds	r3, #32
60001df6:	429a      	cmp	r2, r3
60001df8:	f0c0 80a7 	bcc.w	60001f4a <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001dfc:	4628      	mov	r0, r5
60001dfe:	f000 fcdf 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001e02:	e7a5      	b.n	60001d50 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e04:	682b      	ldr	r3, [r5, #0]
60001e06:	2223      	movs	r2, #35	; 0x23
60001e08:	4926      	ldr	r1, [pc, #152]	; (60001ea4 <CrashReportClass::printTo(Print&) const+0x618>)
60001e0a:	685b      	ldr	r3, [r3, #4]
60001e0c:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001e0e:	4e22      	ldr	r6, [pc, #136]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001e10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e12:	4628      	mov	r0, r5
60001e14:	f000 fcd4 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001e18:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001e1c:	2c00      	cmp	r4, #0
60001e1e:	f43f ae37 	beq.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
60001e22:	e72f      	b.n	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001e24:	682b      	ldr	r3, [r5, #0]
60001e26:	2221      	movs	r2, #33	; 0x21
60001e28:	491f      	ldr	r1, [pc, #124]	; (60001ea8 <CrashReportClass::printTo(Print&) const+0x61c>)
60001e2a:	4628      	mov	r0, r5
60001e2c:	685b      	ldr	r3, [r3, #4]
60001e2e:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001e30:	4919      	ldr	r1, [pc, #100]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e32:	2300      	movs	r3, #0
60001e34:	2210      	movs	r2, #16
60001e36:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001e3a:	4628      	mov	r0, r5
60001e3c:	f000 fcc8 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001e40:	4628      	mov	r0, r5
60001e42:	f000 fcbd 	bl	600027c0 <___ZN5Print7printlnEv_veneer>
60001e46:	e7ac      	b.n	60001da2 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001e48:	682b      	ldr	r3, [r5, #0]
60001e4a:	2228      	movs	r2, #40	; 0x28
60001e4c:	4917      	ldr	r1, [pc, #92]	; (60001eac <CrashReportClass::printTo(Print&) const+0x620>)
60001e4e:	e7dc      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001e50:	200087b4 	.word	0x200087b4
60001e54:	20008788 	.word	0x20008788
60001e58:	20008760 	.word	0x20008760
60001e5c:	20008734 	.word	0x20008734
60001e60:	2000870c 	.word	0x2000870c
60001e64:	2000867c 	.word	0x2000867c
60001e68:	20008068 	.word	0x20008068
60001e6c:	20008118 	.word	0x20008118
60001e70:	20008478 	.word	0x20008478
60001e74:	200084ac 	.word	0x200084ac
60001e78:	200088a0 	.word	0x200088a0
60001e7c:	200088a8 	.word	0x200088a8
60001e80:	200085c8 	.word	0x200085c8
60001e84:	20008074 	.word	0x20008074
60001e88:	2000833c 	.word	0x2000833c
60001e8c:	20008484 	.word	0x20008484
60001e90:	2000822c 	.word	0x2000822c
60001e94:	2000845c 	.word	0x2000845c
60001e98:	2027ff00 	.word	0x2027ff00
60001e9c:	20008144 	.word	0x20008144
60001ea0:	200293e0 	.word	0x200293e0
60001ea4:	20008394 	.word	0x20008394
60001ea8:	20008370 	.word	0x20008370
60001eac:	200083ec 	.word	0x200083ec
60001eb0:	20008890 	.word	0x20008890
60001eb4:	2027ffc0 	.word	0x2027ffc0
60001eb8:	682b      	ldr	r3, [r5, #0]
60001eba:	221e      	movs	r2, #30
60001ebc:	4926      	ldr	r1, [pc, #152]	; (60001f58 <CrashReportClass::printTo(Print&) const+0x6cc>)
60001ebe:	4628      	mov	r0, r5
60001ec0:	685b      	ldr	r3, [r3, #4]
60001ec2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ec4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ec8:	2300      	movs	r3, #0
60001eca:	2210      	movs	r2, #16
60001ecc:	4628      	mov	r0, r5
60001ece:	f000 fc7f 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ed2:	682b      	ldr	r3, [r5, #0]
60001ed4:	223e      	movs	r2, #62	; 0x3e
60001ed6:	4921      	ldr	r1, [pc, #132]	; (60001f5c <CrashReportClass::printTo(Print&) const+0x6d0>)
60001ed8:	685b      	ldr	r3, [r3, #4]
60001eda:	4628      	mov	r0, r5
60001edc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ede:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ee2:	2300      	movs	r3, #0
60001ee4:	2210      	movs	r2, #16
60001ee6:	4628      	mov	r0, r5
60001ee8:	f000 fc72 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001eec:	682b      	ldr	r3, [r5, #0]
60001eee:	221d      	movs	r2, #29
60001ef0:	491b      	ldr	r1, [pc, #108]	; (60001f60 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001ef2:	685b      	ldr	r3, [r3, #4]
60001ef4:	4628      	mov	r0, r5
60001ef6:	4798      	blx	r3
60001ef8:	e780      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001efa:	682b      	ldr	r3, [r5, #0]
60001efc:	2229      	movs	r2, #41	; 0x29
60001efe:	4919      	ldr	r1, [pc, #100]	; (60001f64 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001f00:	e71e      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f02:	682b      	ldr	r3, [r5, #0]
60001f04:	2244      	movs	r2, #68	; 0x44
60001f06:	4918      	ldr	r1, [pc, #96]	; (60001f68 <CrashReportClass::printTo(Print&) const+0x6dc>)
60001f08:	e743      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f0a:	682b      	ldr	r3, [r5, #0]
60001f0c:	222c      	movs	r2, #44	; 0x2c
60001f0e:	4917      	ldr	r1, [pc, #92]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x6e0>)
60001f10:	e73f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f12:	682b      	ldr	r3, [r5, #0]
60001f14:	2221      	movs	r2, #33	; 0x21
60001f16:	4916      	ldr	r1, [pc, #88]	; (60001f70 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001f18:	e712      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f1a:	682b      	ldr	r3, [r5, #0]
60001f1c:	2232      	movs	r2, #50	; 0x32
60001f1e:	4915      	ldr	r1, [pc, #84]	; (60001f74 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001f20:	e773      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f22:	682b      	ldr	r3, [r5, #0]
60001f24:	2233      	movs	r2, #51	; 0x33
60001f26:	4914      	ldr	r1, [pc, #80]	; (60001f78 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001f28:	e733      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f2a:	682b      	ldr	r3, [r5, #0]
60001f2c:	223f      	movs	r2, #63	; 0x3f
60001f2e:	4913      	ldr	r1, [pc, #76]	; (60001f7c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001f30:	e72f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f32:	682b      	ldr	r3, [r5, #0]
60001f34:	2225      	movs	r2, #37	; 0x25
60001f36:	4912      	ldr	r1, [pc, #72]	; (60001f80 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001f38:	e702      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f3a:	682b      	ldr	r3, [r5, #0]
60001f3c:	2228      	movs	r2, #40	; 0x28
60001f3e:	4911      	ldr	r1, [pc, #68]	; (60001f84 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001f40:	e763      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f42:	682b      	ldr	r3, [r5, #0]
60001f44:	2216      	movs	r2, #22
60001f46:	4910      	ldr	r1, [pc, #64]	; (60001f88 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001f48:	e75f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f4a:	682b      	ldr	r3, [r5, #0]
60001f4c:	2241      	movs	r2, #65	; 0x41
60001f4e:	490f      	ldr	r1, [pc, #60]	; (60001f8c <CrashReportClass::printTo(Print&) const+0x700>)
60001f50:	4628      	mov	r0, r5
60001f52:	685b      	ldr	r3, [r3, #4]
60001f54:	4798      	blx	r3
60001f56:	e751      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001f58:	20008168 	.word	0x20008168
60001f5c:	20008188 	.word	0x20008188
60001f60:	200081c8 	.word	0x200081c8
60001f64:	200080c4 	.word	0x200080c4
60001f68:	20008280 	.word	0x20008280
60001f6c:	20008250 	.word	0x20008250
60001f70:	200080a0 	.word	0x200080a0
60001f74:	200083b8 	.word	0x200083b8
60001f78:	20008308 	.word	0x20008308
60001f7c:	200082c8 	.word	0x200082c8
60001f80:	200080f0 	.word	0x200080f0
60001f84:	20008430 	.word	0x20008430
60001f88:	20008418 	.word	0x20008418
60001f8c:	200081e8 	.word	0x200081e8

60001f90 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001f90:	4b12      	ldr	r3, [pc, #72]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001f96:	2b0b      	cmp	r3, #11
60001f98:	d11e      	bne.n	60001fd8 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001f9a:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001f9e:	4810      	ldr	r0, [pc, #64]	; (60001fe0 <CrashReportClass::operator bool()+0x50>)
{
60001fa0:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001fa2:	4d10      	ldr	r5, [pc, #64]	; (60001fe4 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001fa4:	4c10      	ldr	r4, [pc, #64]	; (60001fe8 <CrashReportClass::operator bool()+0x58>)
60001fa6:	e001      	b.n	60001fac <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001fa8:	686b      	ldr	r3, [r5, #4]
60001faa:	4675      	mov	r5, lr
60001fac:	f105 0e04 	add.w	lr, r5, #4
60001fb0:	405a      	eors	r2, r3
60001fb2:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001fb4:	f002 0301 	and.w	r3, r2, #1
60001fb8:	3901      	subs	r1, #1
60001fba:	fb00 f303 	mul.w	r3, r0, r3
60001fbe:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001fc2:	d1f7      	bne.n	60001fb4 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001fc4:	45a6      	cmp	lr, r4
60001fc6:	d1ef      	bne.n	60001fa8 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001fc8:	4b04      	ldr	r3, [pc, #16]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001fca:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001fce:	1a80      	subs	r0, r0, r2
60001fd0:	fab0 f080 	clz	r0, r0
60001fd4:	0940      	lsrs	r0, r0, #5
}
60001fd6:	bd30      	pop	{r4, r5, pc}
	return false;
60001fd8:	2000      	movs	r0, #0
}
60001fda:	4770      	bx	lr
60001fdc:	2027ff00 	.word	0x2027ff00
60001fe0:	edb88320 	.word	0xedb88320
60001fe4:	2027ff80 	.word	0x2027ff80
60001fe8:	2027ffa8 	.word	0x2027ffa8

60001fec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001fec:	4770      	bx	lr
60001fee:	bf00      	nop

60001ff0 <startup_default_middle_hook>:
60001ff0:	4770      	bx	lr
60001ff2:	bf00      	nop

60001ff4 <startup_default_late_hook>:
60001ff4:	4770      	bx	lr
60001ff6:	bf00      	nop

60001ff8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001ff8:	bf00      	nop
60001ffa:	4770      	bx	lr

60001ffc <configure_cache>:
{
60001ffc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001ffe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002002:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002004:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002006:	4831      	ldr	r0, [pc, #196]	; (600020cc <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60002008:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000200c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002010:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002012:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60002016:	482e      	ldr	r0, [pc, #184]	; (600020d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002018:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000201c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000201e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60002022:	482c      	ldr	r0, [pc, #176]	; (600020d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002024:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002028:	4a2b      	ldr	r2, [pc, #172]	; (600020d8 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000202a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000202e:	4c2b      	ldr	r4, [pc, #172]	; (600020dc <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002030:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002034:	482a      	ldr	r0, [pc, #168]	; (600020e0 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002036:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000203a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000203e:	4c29      	ldr	r4, [pc, #164]	; (600020e4 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002040:	4829      	ldr	r0, [pc, #164]	; (600020e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60002042:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002046:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000204a:	4c28      	ldr	r4, [pc, #160]	; (600020ec <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000204c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002050:	4827      	ldr	r0, [pc, #156]	; (600020f0 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60002052:	4a28      	ldr	r2, [pc, #160]	; (600020f4 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60002054:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002058:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000205c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002060:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60002064:	4c24      	ldr	r4, [pc, #144]	; (600020f8 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002066:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002068:	4824      	ldr	r0, [pc, #144]	; (600020fc <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000206a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000206e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60002072:	4a23      	ldr	r2, [pc, #140]	; (60002100 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002074:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002078:	4c22      	ldr	r4, [pc, #136]	; (60002104 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000207a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000207e:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002082:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60002086:	4820      	ldr	r0, [pc, #128]	; (60002108 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60002088:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000208c:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000208e:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60002092:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60002096:	bf00      	nop
	asm("nop");
60002098:	bf00      	nop
	asm("nop");
6000209a:	bf00      	nop
	asm("nop");
6000209c:	bf00      	nop
	asm("nop");
6000209e:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600020a0:	2201      	movs	r2, #1
600020a2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600020a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020aa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600020ae:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600020b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020b6:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020ba:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600020be:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600020c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600020ca:	4770      	bx	lr
600020cc:	1000003f 	.word	0x1000003f
600020d0:	07080025 	.word	0x07080025
600020d4:	00100009 	.word	0x00100009
600020d8:	200293e0 	.word	0x200293e0
600020dc:	00200013 	.word	0x00200013
600020e0:	07020021 	.word	0x07020021
600020e4:	20000014 	.word	0x20000014
600020e8:	13080025 	.word	0x13080025
600020ec:	10000009 	.word	0x10000009
600020f0:	20200016 	.word	0x20200016
600020f4:	130b0027 	.word	0x130b0027
600020f8:	40000017 	.word	0x40000017
600020fc:	60000018 	.word	0x60000018
60002100:	070b002f 	.word	0x070b002f
60002104:	70000019 	.word	0x70000019
60002108:	8000001a 	.word	0x8000001a

6000210c <configure_external_ram>:
{
6000210c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000210e:	4bb8      	ldr	r3, [pc, #736]	; (600023f0 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002110:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002112:	4eb8      	ldr	r6, [pc, #736]	; (600023f4 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002114:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002116:	4fb8      	ldr	r7, [pc, #736]	; (600023f8 <configure_external_ram+0x2ec>)
{
60002118:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000211a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000211e:	49b7      	ldr	r1, [pc, #732]	; (600023fc <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002120:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002124:	4db6      	ldr	r5, [pc, #728]	; (60002400 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002126:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000212a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000212e:	4cb5      	ldr	r4, [pc, #724]	; (60002404 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002130:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002134:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002138:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000213c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002140:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002144:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002148:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000214a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000214c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000214e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60002150:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60002152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000215a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000215e:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002162:	4aa9      	ldr	r2, [pc, #676]	; (60002408 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002164:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002168:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
6000216c:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60002170:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002174:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002178:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000217a:	4ba4      	ldr	r3, [pc, #656]	; (6000240c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000217c:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000217e:	48a4      	ldr	r0, [pc, #656]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002180:	49a4      	ldr	r1, [pc, #656]	; (60002414 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002182:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002184:	4aa4      	ldr	r2, [pc, #656]	; (60002418 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002186:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002188:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
6000218c:	f043 030c 	orr.w	r3, r3, #12
60002190:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002194:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002198:	6803      	ldr	r3, [r0, #0]
6000219a:	f043 0302 	orr.w	r3, r3, #2
6000219e:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021a0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600021a4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021aa:	4b9c      	ldr	r3, [pc, #624]	; (6000241c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021ac:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600021ae:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b0:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021b2:	4c9b      	ldr	r4, [pc, #620]	; (60002420 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021b6:	4a9b      	ldr	r2, [pc, #620]	; (60002424 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600021b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021bc:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600021be:	68c3      	ldr	r3, [r0, #12]
600021c0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600021c4:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021c6:	6a03      	ldr	r3, [r0, #32]
600021c8:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021ca:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021cc:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021ce:	6a03      	ldr	r3, [r0, #32]
600021d0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021d2:	4a95      	ldr	r2, [pc, #596]	; (60002428 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021d4:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600021d6:	4c95      	ldr	r4, [pc, #596]	; (6000242c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021d8:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021da:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600021dc:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600021de:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600021e0:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600021e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021e8:	f043 0301 	orr.w	r3, r3, #1
600021ec:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f0:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600021f4:	498e      	ldr	r1, [pc, #568]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021fa:	f043 0301 	orr.w	r3, r3, #1
600021fe:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002202:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002206:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002208:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000220a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000220c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002210:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002212:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002214:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002216:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000221a:	6803      	ldr	r3, [r0, #0]
6000221c:	f023 0302 	bic.w	r3, r3, #2
60002220:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002222:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002224:	4b83      	ldr	r3, [pc, #524]	; (60002434 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002226:	4984      	ldr	r1, [pc, #528]	; (60002438 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002228:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000222a:	f843 2b04 	str.w	r2, [r3], #4
6000222e:	428b      	cmp	r3, r1
60002230:	d1fb      	bne.n	6000222a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002232:	4a77      	ldr	r2, [pc, #476]	; (60002410 <configure_external_ram+0x304>)
60002234:	6813      	ldr	r3, [r2, #0]
60002236:	f043 0301 	orr.w	r3, r3, #1
6000223a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000223c:	6813      	ldr	r3, [r2, #0]
6000223e:	f013 0301 	ands.w	r3, r3, #1
60002242:	d1fb      	bne.n	6000223c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002244:	487a      	ldr	r0, [pc, #488]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002246:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002248:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000224c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000224e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002252:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002254:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002258:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000225c:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002260:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002264:	4975      	ldr	r1, [pc, #468]	; (6000243c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002266:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000226a:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000226e:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002272:	4873      	ldr	r0, [pc, #460]	; (60002440 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002274:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002278:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000227c:	4c71      	ldr	r4, [pc, #452]	; (60002444 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000227e:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002282:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002286:	4970      	ldr	r1, [pc, #448]	; (60002448 <configure_external_ram+0x33c>)
60002288:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000228c:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000228e:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002292:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002296:	485e      	ldr	r0, [pc, #376]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002298:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000229c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022a0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a4:	6943      	ldr	r3, [r0, #20]
600022a6:	07da      	lsls	r2, r3, #31
600022a8:	d5fc      	bpl.n	600022a4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022aa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ac:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	4957      	ldr	r1, [pc, #348]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022b4:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600022b6:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ba:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022be:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022c2:	694b      	ldr	r3, [r1, #20]
600022c4:	07db      	lsls	r3, r3, #31
600022c6:	d5fc      	bpl.n	600022c2 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ca:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022d0:	4a4f      	ldr	r2, [pc, #316]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022d2:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600022d4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022d8:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022dc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022e0:	6953      	ldr	r3, [r2, #20]
600022e2:	07df      	lsls	r7, r3, #31
600022e4:	d5fc      	bpl.n	600022e0 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022e6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022e8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022ea:	4858      	ldr	r0, [pc, #352]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ec:	4948      	ldr	r1, [pc, #288]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022ee:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022f0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022f4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fc:	694b      	ldr	r3, [r1, #20]
600022fe:	07de      	lsls	r6, r3, #31
60002300:	d5fc      	bpl.n	600022fc <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002302:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002306:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000230c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002310:	4293      	cmp	r3, r2
60002312:	d165      	bne.n	600023e0 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002314:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002316:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000231a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000231c:	483c      	ldr	r0, [pc, #240]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000231e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002322:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002326:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000232a:	6943      	ldr	r3, [r0, #20]
6000232c:	07dd      	lsls	r5, r3, #31
6000232e:	d5fc      	bpl.n	6000232a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002330:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002332:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002336:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002338:	4a35      	ldr	r2, [pc, #212]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000233a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000233c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002340:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002344:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002348:	6953      	ldr	r3, [r2, #20]
6000234a:	07dc      	lsls	r4, r3, #31
6000234c:	d5fc      	bpl.n	60002348 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000234e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002350:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002354:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002358:	492d      	ldr	r1, [pc, #180]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000235a:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000235c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002360:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002364:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002368:	694b      	ldr	r3, [r1, #20]
6000236a:	07d8      	lsls	r0, r3, #31
6000236c:	d5fc      	bpl.n	60002368 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000236e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002370:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002374:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002378:	4a25      	ldr	r2, [pc, #148]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000237a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000237c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002380:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002384:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002388:	6953      	ldr	r3, [r2, #20]
6000238a:	07d9      	lsls	r1, r3, #31
6000238c:	d5fc      	bpl.n	60002388 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002390:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002394:	482d      	ldr	r0, [pc, #180]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002396:	491e      	ldr	r1, [pc, #120]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002398:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000239a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000239e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023a6:	694b      	ldr	r3, [r1, #20]
600023a8:	07da      	lsls	r2, r3, #31
600023aa:	d5fc      	bpl.n	600023a6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600023ac:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023b0:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b4:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600023b6:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b8:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023ba:	4293      	cmp	r3, r2
600023bc:	d050      	beq.n	60002460 <configure_external_ram+0x354>
600023be:	2508      	movs	r5, #8
600023c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600023c4:	4922      	ldr	r1, [pc, #136]	; (60002450 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023c6:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600023c8:	4b22      	ldr	r3, [pc, #136]	; (60002454 <configure_external_ram+0x348>)
			external_psram_size = 16;
600023ca:	4a23      	ldr	r2, [pc, #140]	; (60002458 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023cc:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600023ce:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600023d0:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023d2:	2301      	movs	r3, #1
600023d4:	4821      	ldr	r0, [pc, #132]	; (6000245c <configure_external_ram+0x350>)
600023d6:	4422      	add	r2, r4
600023d8:	f000 fa0a 	bl	600027f0 <__sm_set_pool_veneer>
}
600023dc:	b003      	add	sp, #12
600023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600023e0:	4b1e      	ldr	r3, [pc, #120]	; (6000245c <configure_external_ram+0x350>)
600023e2:	2200      	movs	r2, #0
600023e4:	e9c3 2200 	strd	r2, r2, [r3]
600023e8:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600023ec:	b003      	add	sp, #12
600023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600023f0:	401f8000 	.word	0x401f8000
600023f4:	0001b0f9 	.word	0x0001b0f9
600023f8:	000110f9 	.word	0x000110f9
600023fc:	401f8400 	.word	0x401f8400
60002400:	000170f9 	.word	0x000170f9
60002404:	400fc000 	.word	0x400fc000
60002408:	1ffffcff 	.word	0x1ffffcff
6000240c:	a0000300 	.word	0xa0000300
60002410:	402a4000 	.word	0x402a4000
60002414:	402a8000 	.word	0x402a8000
60002418:	ffff0012 	.word	0xffff0012
6000241c:	00f737ff 	.word	0x00f737ff
60002420:	80000040 	.word	0x80000040
60002424:	7cf0ff00 	.word	0x7cf0ff00
60002428:	830f00ff 	.word	0x830f00ff
6000242c:	00020063 	.word	0x00020063
60002430:	5af05af0 	.word	0x5af05af0
60002434:	402a4200 	.word	0x402a4200
60002438:	402a4300 	.word	0x402a4300
6000243c:	3018049f 	.word	0x3018049f
60002440:	0a1806eb 	.word	0x0a1806eb
60002444:	0a180638 	.word	0x0a180638
60002448:	26013206 	.word	0x26013206
6000244c:	00030004 	.word	0x00030004
60002450:	70000000 	.word	0x70000000
60002454:	70000000 	.word	0x70000000
60002458:	200293a7 	.word	0x200293a7
6000245c:	20028ad4 	.word	0x20028ad4
	FLEXSPI2_IPCR0 = addr;
60002460:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002468:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000246a:	4808      	ldr	r0, [pc, #32]	; (6000248c <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
6000246c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002470:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002474:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002478:	6943      	ldr	r3, [r0, #20]
6000247a:	07db      	lsls	r3, r3, #31
6000247c:	d5fc      	bpl.n	60002478 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000247e:	2301      	movs	r3, #1
60002480:	2510      	movs	r5, #16
60002482:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002486:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002488:	e79c      	b.n	600023c4 <configure_external_ram+0x2b8>
6000248a:	bf00      	nop
6000248c:	402a4000 	.word	0x402a4000

60002490 <usb_pll_start>:
{
60002490:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002492:	4a15      	ldr	r2, [pc, #84]	; (600024e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002494:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002496:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000249a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000249e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600024aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600024ac:	f013 0f02 	tst.w	r3, #2
600024b0:	d10e      	bne.n	600024d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600024b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600024b6:	d00f      	beq.n	600024d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600024b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600024bc:	d00e      	beq.n	600024dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600024be:	2b00      	cmp	r3, #0
600024c0:	daf3      	bge.n	600024aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600024c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600024c6:	d10b      	bne.n	600024e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600024c8:	065b      	lsls	r3, r3, #25
600024ca:	d50b      	bpl.n	600024e4 <usb_pll_start+0x54>
}
600024cc:	bcf0      	pop	{r4, r5, r6, r7}
600024ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600024d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024d4:	6190      	str	r0, [r2, #24]
			continue;
600024d6:	e7e8      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600024d8:	6155      	str	r5, [r2, #20]
			continue;
600024da:	e7e6      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600024dc:	6156      	str	r6, [r2, #20]
			continue;
600024de:	e7e4      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600024e0:	6191      	str	r1, [r2, #24]
			continue;
600024e2:	e7e2      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600024e4:	6157      	str	r7, [r2, #20]
			continue;
600024e6:	e7e0      	b.n	600024aa <usb_pll_start+0x1a>
600024e8:	400d8000 	.word	0x400d8000

600024ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024ec:	4a3f      	ldr	r2, [pc, #252]	; (600025ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600024ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600024f0:	493f      	ldr	r1, [pc, #252]	; (600025f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600024f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600025f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002502:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002506:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600025f8 <tempmon_init+0x10c>
{
6000250a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000250c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002510:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002514:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002518:	4d38      	ldr	r5, [pc, #224]	; (600025fc <tempmon_init+0x110>)
6000251a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000251c:	4c38      	ldr	r4, [pc, #224]	; (60002600 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000251e:	4839      	ldr	r0, [pc, #228]	; (60002604 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002520:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002522:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002526:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002528:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002530:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002534:	ee07 1a10 	vmov	s14, r1
60002538:	4b33      	ldr	r3, [pc, #204]	; (60002608 <tempmon_init+0x11c>)
6000253a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000253e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002544:	4931      	ldr	r1, [pc, #196]	; (6000260c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002546:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000254a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000254e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002552:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002556:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000255a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000255e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002562:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002566:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000256a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000256e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002572:	4827      	ldr	r0, [pc, #156]	; (60002610 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002574:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002578:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000257c:	ee75 5a87 	vadd.f32	s11, s11, s14
60002580:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002584:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002588:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000258c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002590:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002594:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000259c:	ee16 3a10 	vmov	r3, s12
600025a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600025ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600025ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600025be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600025c0:	4914      	ldr	r1, [pc, #80]	; (60002614 <tempmon_init+0x128>)
600025c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600025c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600025ca:	f043 0302 	orr.w	r3, r3, #2
600025ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600025d2:	4b11      	ldr	r3, [pc, #68]	; (60002618 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600025d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600025d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600025e0:	2201      	movs	r2, #1
}
600025e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600025e8:	4770      	bx	lr
600025ea:	bf00      	nop
600025ec:	400d8100 	.word	0x400d8100
600025f0:	401f4400 	.word	0x401f4400
600025f4:	42aa0000 	.word	0x42aa0000
600025f8:	42b40000 	.word	0x42b40000
600025fc:	20028c3c 	.word	0x20028c3c
60002600:	20028c38 	.word	0x20028c38
60002604:	20028c40 	.word	0x20028c40
60002608:	20028c44 	.word	0x20028c44
6000260c:	0fff0000 	.word	0x0fff0000
60002610:	e000e400 	.word	0xe000e400
60002614:	20009800 	.word	0x20009800
60002618:	0000de89 	.word	0x0000de89

6000261c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000261c:	4b31      	ldr	r3, [pc, #196]	; (600026e4 <usb_init+0xc8>)
6000261e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002622:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002624:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002628:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000262c:	f000 f8e4 	bl	600027f8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002630:	4a2d      	ldr	r2, [pc, #180]	; (600026e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002632:	492e      	ldr	r1, [pc, #184]	; (600026ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002634:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002638:	482d      	ldr	r0, [pc, #180]	; (600026f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000263a:	f043 0303 	orr.w	r3, r3, #3
6000263e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002642:	4b2c      	ldr	r3, [pc, #176]	; (600026f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002644:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002648:	6802      	ldr	r2, [r0, #0]
6000264a:	421a      	tst	r2, r3
6000264c:	d103      	bne.n	60002656 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000264e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002652:	079a      	lsls	r2, r3, #30
60002654:	d01b      	beq.n	6000268e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002656:	4a25      	ldr	r2, [pc, #148]	; (600026ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002658:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000265c:	4b24      	ldr	r3, [pc, #144]	; (600026f0 <usb_init+0xd4>)
6000265e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002660:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002664:	f043 0302 	orr.w	r3, r3, #2
60002668:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000266c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002670:	079b      	lsls	r3, r3, #30
60002672:	d4fb      	bmi.n	6000266c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002674:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002678:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000267c:	4b1c      	ldr	r3, [pc, #112]	; (600026f0 <usb_init+0xd4>)
6000267e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002682:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002686:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002688:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000268a:	f000 f89d 	bl	600027c8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000268e:	4a18      	ldr	r2, [pc, #96]	; (600026f0 <usb_init+0xd4>)
60002690:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002694:	4c15      	ldr	r4, [pc, #84]	; (600026ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60002696:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002698:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000269a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000269c:	4b16      	ldr	r3, [pc, #88]	; (600026f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000269e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a0:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600026a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a8:	4618      	mov	r0, r3
600026aa:	f000 f89d 	bl	600027e8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600026ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600026be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600026c2:	641a      	str	r2, [r3, #64]	; 0x40
600026c4:	4b0d      	ldr	r3, [pc, #52]	; (600026fc <usb_init+0xe0>)
600026c6:	4a0e      	ldr	r2, [pc, #56]	; (60002700 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600026cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600026d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600026d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600026de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600026e2:	bd10      	pop	{r4, pc}
600026e4:	400d8000 	.word	0x400d8000
600026e8:	400fc000 	.word	0x400fc000
600026ec:	402e0000 	.word	0x402e0000
600026f0:	400d9000 	.word	0x400d9000
600026f4:	001e1c00 	.word	0x001e1c00
600026f8:	20000000 	.word	0x20000000
600026fc:	20009800 	.word	0x20009800
60002700:	0000e139 	.word	0x0000e139

60002704 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002704:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002706:	4b0e      	ldr	r3, [pc, #56]	; (60002740 <_reboot_Teensyduino_+0x3c>)
60002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000270a:	079b      	lsls	r3, r3, #30
6000270c:	d400      	bmi.n	60002710 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000270e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002710:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002712:	4b0c      	ldr	r3, [pc, #48]	; (60002744 <_reboot_Teensyduino_+0x40>)
60002714:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002716:	4a0c      	ldr	r2, [pc, #48]	; (60002748 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002718:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000271c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002720:	490a      	ldr	r1, [pc, #40]	; (6000274c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002722:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002726:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002728:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000272a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000272e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002732:	4807      	ldr	r0, [pc, #28]	; (60002750 <_reboot_Teensyduino_+0x4c>)
60002734:	4a07      	ldr	r2, [pc, #28]	; (60002754 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002736:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002738:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000273a:	689b      	ldr	r3, [r3, #8]
6000273c:	4798      	blx	r3
	}
	__builtin_unreachable();
6000273e:	bf00      	nop
60002740:	401f4400 	.word	0x401f4400
60002744:	402e0000 	.word	0x402e0000
60002748:	400ac000 	.word	0x400ac000
6000274c:	00200003 	.word	0x00200003
60002750:	20208000 	.word	0x20208000
60002754:	eb120000 	.word	0xeb120000

60002758 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002758:	4b10      	ldr	r3, [pc, #64]	; (6000279c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000275a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000275c:	4a10      	ldr	r2, [pc, #64]	; (600027a0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000275e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002760:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002764:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002766:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002768:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000276c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000276e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60002772:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002774:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002776:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002778:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000277a:	061b      	lsls	r3, r3, #24
6000277c:	d4fc      	bmi.n	60002778 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000277e:	4a09      	ldr	r2, [pc, #36]	; (600027a4 <analog_init+0x4c>)
60002780:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002784:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002786:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002788:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000278a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000278c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002790:	d1fb      	bne.n	6000278a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002792:	4a05      	ldr	r2, [pc, #20]	; (600027a8 <analog_init+0x50>)
60002794:	7013      	strb	r3, [r2, #0]
}
60002796:	f85d 4b04 	ldr.w	r4, [sp], #4
6000279a:	4770      	bx	lr
6000279c:	400fc000 	.word	0x400fc000
600027a0:	400c4000 	.word	0x400c4000
600027a4:	400c8000 	.word	0x400c8000
600027a8:	200293a6 	.word	0x200293a6

600027ac <_init>:
600027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600027ae:	bf00      	nop
600027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
600027b2:	bc08      	pop	{r3}
600027b4:	469e      	mov	lr, r3
600027b6:	4770      	bx	lr

600027b8 <__main_veneer>:
600027b8:	f85f f000 	ldr.w	pc, [pc]	; 600027bc <__main_veneer+0x4>
600027bc:	0000d73d 	.word	0x0000d73d

600027c0 <___ZN5Print7printlnEv_veneer>:
600027c0:	f85f f000 	ldr.w	pc, [pc]	; 600027c4 <___ZN5Print7printlnEv_veneer+0x4>
600027c4:	0000cb3d 	.word	0x0000cb3d

600027c8 <__delay_veneer>:
600027c8:	f85f f000 	ldr.w	pc, [pc]	; 600027cc <__delay_veneer+0x4>
600027cc:	0000d145 	.word	0x0000d145

600027d0 <___ZN5Print11printNumberEmhh_veneer>:
600027d0:	f85f f000 	ldr.w	pc, [pc]	; 600027d4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600027d4:	0000cb91 	.word	0x0000cb91

600027d8 <___ZN5Print10printFloatEdh_veneer>:
600027d8:	f85f f000 	ldr.w	pc, [pc]	; 600027dc <___ZN5Print10printFloatEdh_veneer+0x4>
600027dc:	0000cc61 	.word	0x0000cc61

600027e0 <__set_arm_clock_veneer>:
600027e0:	f85f f000 	ldr.w	pc, [pc]	; 600027e4 <__set_arm_clock_veneer+0x4>
600027e4:	0000ce55 	.word	0x0000ce55

600027e8 <__memset_veneer>:
600027e8:	f85f f000 	ldr.w	pc, [pc]	; 600027ec <__memset_veneer+0x4>
600027ec:	00011869 	.word	0x00011869

600027f0 <__sm_set_pool_veneer>:
600027f0:	f85f f000 	ldr.w	pc, [pc]	; 600027f4 <__sm_set_pool_veneer+0x4>
600027f4:	0000f5dd 	.word	0x0000f5dd

600027f8 <__usb_init_serialnumber_veneer>:
600027f8:	f85f f000 	ldr.w	pc, [pc]	; 600027fc <__usb_init_serialnumber_veneer+0x4>
600027fc:	0000e87d 	.word	0x0000e87d

60002800 <__pwm_init_veneer>:
60002800:	f85f f000 	ldr.w	pc, [pc]	; 60002804 <__pwm_init_veneer+0x4>
60002804:	0000f49d 	.word	0x0000f49d

60002808 <___ZN5Print5printEl_veneer>:
60002808:	f85f f000 	ldr.w	pc, [pc]	; 6000280c <___ZN5Print5printEl_veneer+0x4>
6000280c:	0000cb25 	.word	0x0000cb25

60002810 <____libc_init_array_veneer>:
60002810:	f85f f000 	ldr.w	pc, [pc]	; 60002814 <____libc_init_array_veneer+0x4>
60002814:	00011b8d 	.word	0x00011b8d

60002818 <__frame_dummy_init_array_entry>:
60002818:	00000045 000006d1 00000da1 00001cb1     E...............

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	20009ac0 	.word	0x20009ac0
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
      3c:	20009ac0 	.word	0x20009ac0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    WriteIndexRecord(handle, p1);
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
    }
  }
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
      60:	20028b64 	.word	0x20028b64
      64:	60027800 	.word	0x60027800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
      74:	4b0b      	ldr	r3, [pc, #44]	; (a4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      76:	4d0c      	ldr	r5, [pc, #48]	; (a8 <MTPStorage_SD::~MTPStorage_SD()+0x38>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      78:	f500 70ac 	add.w	r0, r0, #344	; 0x158
      7c:	6023      	str	r3, [r4, #0]
      7e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
      82:	f009 fdf3 	bl	9c6c <FsBaseFile::close()>
      86:	f504 7084 	add.w	r0, r4, #264	; 0x108
      8a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
      8e:	f009 fded 	bl	9c6c <FsBaseFile::close()>
      92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
      96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
      9a:	f009 fde7 	bl	9c6c <FsBaseFile::close()>
      9e:	4620      	mov	r0, r4
      a0:	bd38      	pop	{r3, r4, r5, pc}
      a2:	bf00      	nop
      a4:	20000ba0 	.word	0x20000ba0
      a8:	20000b7c 	.word	0x20000b7c

000000ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      ac:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
      b0:	b083      	sub	sp, #12
      b2:	f88d 1007 	strb.w	r1, [sp, #7]
      b6:	b143      	cbz	r3, ca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b8:	2201      	movs	r2, #1
      ba:	f10d 0107 	add.w	r1, sp, #7
      be:	4618      	mov	r0, r3
      c0:	f008 fbd8 	bl	8874 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      c4:	b003      	add	sp, #12
      c6:	f85d fb04 	ldr.w	pc, [sp], #4
      ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      cc:	2800      	cmp	r0, #0
      ce:	d0f9      	beq.n	c4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      d0:	2201      	movs	r2, #1
      d2:	f10d 0107 	add.w	r1, sp, #7
      d6:	f007 f8bd 	bl	7254 <ExFatFile::write(void const*, unsigned int)>
      da:	b003      	add	sp, #12
      dc:	f85d fb04 	ldr.w	pc, [sp], #4

000000e0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
      e2:	b113      	cbz	r3, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      e4:	4618      	mov	r0, r3
      e6:	f008 bbbf 	b.w	8868 <FatFile::sync()>
      ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      ec:	b108      	cbz	r0, f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      ee:	f006 bec9 	b.w	6e84 <ExFatFile::sync()>
  }
      f2:	4770      	bx	lr

000000f4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      f6:	b500      	push	{lr}
      f8:	b083      	sub	sp, #12
      fa:	b163      	cbz	r3, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      fc:	2201      	movs	r2, #1
      fe:	f10d 0107 	add.w	r1, sp, #7
     102:	4618      	mov	r0, r3
     104:	f008 f838 	bl	8178 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     108:	2801      	cmp	r0, #1
     10a:	d10c      	bne.n	126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     110:	b003      	add	sp, #12
     112:	f85d fb04 	ldr.w	pc, [sp], #4
     116:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     118:	b128      	cbz	r0, 126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     11a:	2201      	movs	r2, #1
     11c:	f10d 0107 	add.w	r1, sp, #7
     120:	f006 f982 	bl	6428 <ExFatFile::read(void*, unsigned int)>
     124:	e7f0      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     126:	f04f 30ff 	mov.w	r0, #4294967295
     12a:	e7f1      	b.n	110 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000012c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     12c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     12e:	b113      	cbz	r3, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     130:	4618      	mov	r0, r3
     132:	f008 b8f5 	b.w	8320 <FatFile::peek()>
     136:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     138:	b108      	cbz	r0, 13e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     13a:	f006 ba45 	b.w	65c8 <ExFatFile::peek()>
  }
     13e:	f04f 30ff 	mov.w	r0, #4294967295
     142:	4770      	bx	lr

00000144 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     144:	6c83      	ldr	r3, [r0, #72]	; 0x48
     146:	b153      	cbz	r3, 15e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     148:	7818      	ldrb	r0, [r3, #0]
     14a:	f010 0008 	ands.w	r0, r0, #8
     14e:	d00d      	beq.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     150:	69d8      	ldr	r0, [r3, #28]
     152:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     154:	1ac0      	subs	r0, r0, r3
     156:	bf48      	it	mi
     158:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     15c:	4770      	bx	lr
     15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     160:	b1a3      	cbz	r3, 18c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     162:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     166:	f010 0008 	ands.w	r0, r0, #8
     16a:	d100      	bne.n	16e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     16c:	4770      	bx	lr
     16e:	6918      	ldr	r0, [r3, #16]
     170:	6819      	ldr	r1, [r3, #0]
     172:	695a      	ldr	r2, [r3, #20]
     174:	1a40      	subs	r0, r0, r1
     176:	685b      	ldr	r3, [r3, #4]
     178:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     17c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     180:	f173 0300 	sbcs.w	r3, r3, #0
     184:	d3f2      	bcc.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     18a:	4770      	bx	lr
     18c:	4618      	mov	r0, r3
    return BaseFile::available();
     18e:	e7ed      	b.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000190 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     190:	6c83      	ldr	r3, [r0, #72]	; 0x48
     192:	b113      	cbz	r3, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     194:	4618      	mov	r0, r3
     196:	f008 bb6d 	b.w	8874 <FatFile::write(void const*, unsigned int)>
     19a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     19c:	b108      	cbz	r0, 1a2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     19e:	f007 b859 	b.w	7254 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     1a2:	4770      	bx	lr

000001a4 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     1a4:	4b11      	ldr	r3, [pc, #68]	; (1ec <resetUSB()+0x48>)
     1a6:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a8:	2064      	movs	r0, #100	; 0x64
  {
     1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1ae:	4d10      	ldr	r5, [pc, #64]	; (1f0 <resetUSB()+0x4c>)
     1b0:	4e10      	ldr	r6, [pc, #64]	; (1f4 <resetUSB()+0x50>)
     1b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 200 <resetUSB()+0x5c>
     1b6:	4f10      	ldr	r7, [pc, #64]	; (1f8 <resetUSB()+0x54>)
    while(!Serial) mtpd.loop();
     1b8:	4c10      	ldr	r4, [pc, #64]	; (1fc <resetUSB()+0x58>)
    USB1_USBCMD = 0;  // disconnect USB
     1ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1be:	f00c ffc1 	bl	d144 <delay>
    usb_init();
     1c2:	f01a f971 	bl	1a4a8 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1c6:	f00f f8bf 	bl	f348 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1ca:	782b      	ldrb	r3, [r5, #0]
    while(!Serial) mtpd.loop();
     1cc:	4620      	mov	r0, r4
     1ce:	b153      	cbz	r3, 1e6 <resetUSB()+0x42>
     1d0:	7833      	ldrb	r3, [r6, #0]
     1d2:	07db      	lsls	r3, r3, #31
     1d4:	d507      	bpl.n	1e6 <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1d6:	f8d8 3000 	ldr.w	r3, [r8]
     1da:	683a      	ldr	r2, [r7, #0]
     1dc:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1de:	2b0e      	cmp	r3, #14
     1e0:	d901      	bls.n	1e6 <resetUSB()+0x42>
  }
     1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(!Serial) mtpd.loop();
     1e6:	f003 fa4b 	bl	3680 <MTPD::loop()>
     1ea:	e7ec      	b.n	1c6 <resetUSB()+0x22>
     1ec:	402e0000 	.word	0x402e0000
     1f0:	200293b3 	.word	0x200293b3
     1f4:	200293b2 	.word	0x200293b2
     1f8:	2002937c 	.word	0x2002937c
     1fc:	20009b00 	.word	0x20009b00
     200:	2002935c 	.word	0x2002935c

00000204 <loop>:
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     208:	4c70      	ldr	r4, [pc, #448]	; (3cc <loop+0x1c8>)
     20a:	b08b      	sub	sp, #44	; 0x2c
     20c:	4d70      	ldr	r5, [pc, #448]	; (3d0 <loop+0x1cc>)
     20e:	6823      	ldr	r3, [r4, #0]
     210:	3301      	adds	r3, #1
     212:	6023      	str	r3, [r4, #0]
     214:	f004 fabc 	bl	4790 <getDataCount()>
     218:	882b      	ldrh	r3, [r5, #0]
     21a:	4283      	cmp	r3, r0
     21c:	4b6d      	ldr	r3, [pc, #436]	; (3d4 <loop+0x1d0>)
     21e:	681a      	ldr	r2, [r3, #0]
     220:	bf38      	it	cc
     222:	8028      	strhcc	r0, [r5, #0]
     224:	07d2      	lsls	r2, r2, #31
     226:	d533      	bpl.n	290 <loop+0x8c>
     228:	4e6b      	ldr	r6, [pc, #428]	; (3d8 <loop+0x1d4>)
     22a:	8830      	ldrh	r0, [r6, #0]
     22c:	b200      	sxth	r0, r0
     22e:	f004 fa4d 	bl	46cc <menu(short)>
     232:	8030      	strh	r0, [r6, #0]
    if(status<0)
     234:	8833      	ldrh	r3, [r6, #0]
     236:	041b      	lsls	r3, r3, #16
     238:	d436      	bmi.n	2a8 <loop+0xa4>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     23a:	4f68      	ldr	r7, [pc, #416]	; (3dc <loop+0x1d8>)
     23c:	f04f 0808 	mov.w	r8, #8
     240:	f8c7 8084 	str.w	r8, [r7, #132]	; 0x84
      status=saveData(status);  
     244:	8830      	ldrh	r0, [r6, #0]
     246:	b200      	sxth	r0, r0
     248:	f001 fc9a 	bl	1b80 <saveData(short)>
     24c:	8030      	strh	r0, [r6, #0]
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     24e:	f8c7 8088 	str.w	r8, [r7, #136]	; 0x88
  if((t1=millis())>(t0+1000))
     252:	4e63      	ldr	r6, [pc, #396]	; (3e0 <loop+0x1dc>)
	return systick_millis_count;
     254:	4a63      	ldr	r2, [pc, #396]	; (3e4 <loop+0x1e0>)
     256:	6833      	ldr	r3, [r6, #0]
     258:	6817      	ldr	r7, [r2, #0]
     25a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     25e:	42bb      	cmp	r3, r7
     260:	d213      	bcs.n	28a <loop+0x86>
    if(monitor)
     262:	4b61      	ldr	r3, [pc, #388]	; (3e8 <loop+0x1e4>)
     264:	f9b3 3000 	ldrsh.w	r3, [r3]
     268:	bb13      	cbnz	r3, 2b0 <loop+0xac>
     26a:	4b60      	ldr	r3, [pc, #384]	; (3ec <loop+0x1e8>)
     26c:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 42c <loop+0x228>
     270:	9306      	str	r3, [sp, #24]
     272:	4b5f      	ldr	r3, [pc, #380]	; (3f0 <loop+0x1ec>)
     274:	9307      	str	r3, [sp, #28]
    loopCount=0;
     276:	2300      	movs	r3, #0
    procMiss=0;
     278:	9a06      	ldr	r2, [sp, #24]
    t0=t1;
     27a:	6037      	str	r7, [r6, #0]
    procMiss=0;
     27c:	6013      	str	r3, [r2, #0]
    disk_count=0;
     27e:	9a07      	ldr	r2, [sp, #28]
    loopCount=0;
     280:	6023      	str	r3, [r4, #0]
    procCount=0;
     282:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     286:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     288:	6013      	str	r3, [r2, #0]
}
     28a:	b00b      	add	sp, #44	; 0x2c
     28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     290:	4a58      	ldr	r2, [pc, #352]	; (3f4 <loop+0x1f0>)
     292:	4e51      	ldr	r6, [pc, #324]	; (3d8 <loop+0x1d4>)
     294:	6812      	ldr	r2, [r2, #0]
     296:	2a01      	cmp	r2, #1
     298:	f04f 32ff 	mov.w	r2, #4294967295
     29c:	bf18      	it	ne
     29e:	2200      	movne	r2, #0
     2a0:	8032      	strh	r2, [r6, #0]
     2a2:	2201      	movs	r2, #1
     2a4:	601a      	str	r2, [r3, #0]
     2a6:	e7c0      	b.n	22a <loop+0x26>
    { mtpd.loop();
     2a8:	4853      	ldr	r0, [pc, #332]	; (3f8 <loop+0x1f4>)
     2aa:	f003 f9e9 	bl	3680 <MTPD::loop()>
     2ae:	e7d0      	b.n	252 <loop+0x4e>
      rtc_get_datetime(&t);
     2b0:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2b2:	f8df b178 	ldr.w	fp, [pc, #376]	; 42c <loop+0x228>
      rtc_get_datetime(&t);
     2b6:	f004 fc21 	bl	4afc <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2ba:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2be:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     2c2:	9304      	str	r3, [sp, #16]
     2c4:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     2c8:	494c      	ldr	r1, [pc, #304]	; (3fc <loop+0x1f8>)
     2ca:	9303      	str	r3, [sp, #12]
     2cc:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     2d0:	484b      	ldr	r0, [pc, #300]	; (400 <loop+0x1fc>)
     2d2:	9302      	str	r3, [sp, #8]
     2d4:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     2d8:	9301      	str	r3, [sp, #4]
     2da:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     2de:	9300      	str	r3, [sp, #0]
     2e0:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     2e4:	f00c fc46 	bl	cb74 <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2e8:	2103      	movs	r1, #3
     2ea:	4846      	ldr	r0, [pc, #280]	; (404 <loop+0x200>)
     2ec:	f00e ffae 	bl	f24c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     2f0:	2300      	movs	r3, #0
     2f2:	220a      	movs	r2, #10
     2f4:	6821      	ldr	r1, [r4, #0]
     2f6:	4842      	ldr	r0, [pc, #264]	; (400 <loop+0x1fc>)
     2f8:	f00c fc4a 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     2fc:	2101      	movs	r1, #1
     2fe:	4842      	ldr	r0, [pc, #264]	; (408 <loop+0x204>)
     300:	f00e ffa4 	bl	f24c <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     304:	4b39      	ldr	r3, [pc, #228]	; (3ec <loop+0x1e8>)
     306:	220a      	movs	r2, #10
     308:	f8db 1000 	ldr.w	r1, [fp]
     30c:	9306      	str	r3, [sp, #24]
     30e:	2300      	movs	r3, #0
     310:	483b      	ldr	r0, [pc, #236]	; (400 <loop+0x1fc>)
     312:	f00c fc3d 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     316:	2101      	movs	r1, #1
     318:	483b      	ldr	r0, [pc, #236]	; (408 <loop+0x204>)
     31a:	f00e ff97 	bl	f24c <usb_serial_write>
     31e:	9906      	ldr	r1, [sp, #24]
     320:	2300      	movs	r3, #0
     322:	220a      	movs	r2, #10
     324:	6809      	ldr	r1, [r1, #0]
     326:	4836      	ldr	r0, [pc, #216]	; (400 <loop+0x1fc>)
     328:	f00c fc32 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     32c:	2101      	movs	r1, #1
     32e:	4836      	ldr	r0, [pc, #216]	; (408 <loop+0x204>)
     330:	f00e ff8c 	bl	f24c <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");
     334:	4b2e      	ldr	r3, [pc, #184]	; (3f0 <loop+0x1ec>)
      Serial.printf("%3d",mxb); Serial.print("  ");
     336:	882a      	ldrh	r2, [r5, #0]
     338:	4934      	ldr	r1, [pc, #208]	; (40c <loop+0x208>)
     33a:	4831      	ldr	r0, [pc, #196]	; (400 <loop+0x1fc>)
      Serial.print(disk_count); Serial.print("  ; ");
     33c:	9307      	str	r3, [sp, #28]
      Serial.printf("%3d",mxb); Serial.print("  ");
     33e:	f00c fc19 	bl	cb74 <Print::printf(char const*, ...)>
     342:	2102      	movs	r1, #2
     344:	4832      	ldr	r0, [pc, #200]	; (410 <loop+0x20c>)
     346:	f00e ff81 	bl	f24c <usb_serial_write>
     34a:	9907      	ldr	r1, [sp, #28]
     34c:	2300      	movs	r3, #0
     34e:	220a      	movs	r2, #10
     350:	6809      	ldr	r1, [r1, #0]
     352:	482b      	ldr	r0, [pc, #172]	; (400 <loop+0x1fc>)
     354:	f00c fc1c 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     358:	2104      	movs	r1, #4
     35a:	482e      	ldr	r0, [pc, #184]	; (414 <loop+0x210>)
     35c:	f00e ff76 	bl	f24c <usb_serial_write>
      if(proc==0)
     360:	4b2d      	ldr	r3, [pc, #180]	; (418 <loop+0x214>)
     362:	881b      	ldrh	r3, [r3, #0]
     364:	b21b      	sxth	r3, r3
     366:	b98b      	cbnz	r3, 38c <loop+0x188>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     368:	4699      	mov	r9, r3
     36a:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 430 <loop+0x22c>
     36e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 400 <loop+0x1fc>
     372:	4b2a      	ldr	r3, [pc, #168]	; (41c <loop+0x218>)
     374:	4651      	mov	r1, sl
     376:	4640      	mov	r0, r8
     378:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     37c:	f109 0901 	add.w	r9, r9, #1
     380:	f00c fbf8 	bl	cb74 <Print::printf(char const*, ...)>
     384:	f1b9 0f08 	cmp.w	r9, #8
     388:	d1f3      	bne.n	372 <loop+0x16e>
     38a:	e774      	b.n	276 <loop+0x72>
     38c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 434 <loop+0x230>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     390:	4923      	ldr	r1, [pc, #140]	; (420 <loop+0x21c>)
     392:	f8df 906c 	ldr.w	r9, [pc, #108]	; 400 <loop+0x1fc>
     396:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     39a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     39e:	4648      	mov	r0, r9
     3a0:	f00c fbe8 	bl	cb74 <Print::printf(char const*, ...)>
     3a4:	491e      	ldr	r1, [pc, #120]	; (420 <loop+0x21c>)
     3a6:	45d0      	cmp	r8, sl
     3a8:	d1f7      	bne.n	39a <loop+0x196>
        Serial.printf("%2d",max_stat);
     3aa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 438 <loop+0x234>
     3ae:	491d      	ldr	r1, [pc, #116]	; (424 <loop+0x220>)
     3b0:	f8d8 2000 	ldr.w	r2, [r8]
     3b4:	4812      	ldr	r0, [pc, #72]	; (400 <loop+0x1fc>)
     3b6:	f00c fbdd 	bl	cb74 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3ba:	2260      	movs	r2, #96	; 0x60
     3bc:	2100      	movs	r1, #0
     3be:	481a      	ldr	r0, [pc, #104]	; (428 <loop+0x224>)
     3c0:	f011 fa52 	bl	11868 <memset>
        max_stat=0;        
     3c4:	2300      	movs	r3, #0
     3c6:	f8c8 3000 	str.w	r3, [r8]
     3ca:	e754      	b.n	276 <loop+0x72>
     3cc:	20028524 	.word	0x20028524
     3d0:	20029388 	.word	0x20029388
     3d4:	2000c1cc 	.word	0x2000c1cc
     3d8:	2002938a 	.word	0x2002938a
     3dc:	42004000 	.word	0x42004000
     3e0:	20028520 	.word	0x20028520
     3e4:	2002935c 	.word	0x2002935c
     3e8:	20029390 	.word	0x20029390
     3ec:	20028b80 	.word	0x20028b80
     3f0:	20028abc 	.word	0x20028abc
     3f4:	20029370 	.word	0x20029370
     3f8:	20009b00 	.word	0x20009b00
     3fc:	20007f28 	.word	0x20007f28
     400:	20008abc 	.word	0x20008abc
     404:	20007f4c 	.word	0x20007f4c
     408:	20000b5c 	.word	0x20000b5c
     40c:	20007f50 	.word	0x20007f50
     410:	20007f54 	.word	0x20007f54
     414:	20007f58 	.word	0x20007f58
     418:	20029392 	.word	0x20029392
     41c:	20028b38 	.word	0x20028b38
     420:	20007f68 	.word	0x20007f68
     424:	20007f70 	.word	0x20007f70
     428:	20028b84 	.word	0x20028b84
     42c:	20028b7c 	.word	0x20028b7c
     430:	20007f60 	.word	0x20007f60
     434:	20028b80 	.word	0x20028b80
     438:	20028b58 	.word	0x20028b58

0000043c <setup1()>:
{ while(!Serial) {}
     43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     43e:	4c18      	ldr	r4, [pc, #96]	; (4a0 <setup1()+0x64>)
     440:	4d18      	ldr	r5, [pc, #96]	; (4a4 <setup1()+0x68>)
     442:	4f19      	ldr	r7, [pc, #100]	; (4a8 <setup1()+0x6c>)
     444:	4e19      	ldr	r6, [pc, #100]	; (4ac <setup1()+0x70>)
		yield();
     446:	f00e ff7f 	bl	f348 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     44a:	7823      	ldrb	r3, [r4, #0]
     44c:	2b00      	cmp	r3, #0
     44e:	d0fa      	beq.n	446 <setup1()+0xa>
     450:	782b      	ldrb	r3, [r5, #0]
     452:	07db      	lsls	r3, r3, #31
     454:	d5f7      	bpl.n	446 <setup1()+0xa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     456:	683b      	ldr	r3, [r7, #0]
     458:	6832      	ldr	r2, [r6, #0]
     45a:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     45c:	2b0e      	cmp	r3, #14
     45e:	d9f2      	bls.n	446 <setup1()+0xa>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     460:	2106      	movs	r1, #6
     462:	4813      	ldr	r0, [pc, #76]	; (4b0 <setup1()+0x74>)
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     464:	4c13      	ldr	r4, [pc, #76]	; (4b4 <setup1()+0x78>)
     466:	f00e fef1 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     46a:	4813      	ldr	r0, [pc, #76]	; (4b8 <setup1()+0x7c>)
     46c:	f00c fb66 	bl	cb3c <Print::println()>
     470:	6823      	ldr	r3, [r4, #0]
     472:	b92b      	cbnz	r3, 480 <setup1()+0x44>
     474:	2001      	movs	r0, #1
     476:	f00c fe65 	bl	d144 <delay>
     47a:	6823      	ldr	r3, [r4, #0]
     47c:	2b00      	cmp	r3, #0
     47e:	d0f9      	beq.n	474 <setup1()+0x38>
  i2s_setup();
     480:	f000 fbe2 	bl	c48 <i2s_setup()>
  dma_setup();
     484:	f000 fc26 	bl	cd4 <dma_setup()>
  adc_init();
     488:	f000 fca2 	bl	dd0 <adc_init()>
     48c:	210b      	movs	r1, #11
     48e:	480b      	ldr	r0, [pc, #44]	; (4bc <setup1()+0x80>)
     490:	f00e fedc 	bl	f24c <usb_serial_write>
     494:	4808      	ldr	r0, [pc, #32]	; (4b8 <setup1()+0x7c>)
}
     496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
     49a:	f00c bb4f 	b.w	cb3c <Print::println()>
     49e:	bf00      	nop
     4a0:	200293b3 	.word	0x200293b3
     4a4:	200293b2 	.word	0x200293b2
     4a8:	2002935c 	.word	0x2002935c
     4ac:	2002937c 	.word	0x2002937c
     4b0:	20000780 	.word	0x20000780
     4b4:	2002919c 	.word	0x2002919c
     4b8:	20008abc 	.word	0x20008abc
     4bc:	20000788 	.word	0x20000788

000004c0 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4c4:	4c78      	ldr	r4, [pc, #480]	; (6a8 <storage_configure()+0x1e8>)
    sdioConfigBackup = sdioConfig;
     4c6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     4c8:	22ff      	movs	r2, #255	; 0xff
     4ca:	b082      	sub	sp, #8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4cc:	f504 6592 	add.w	r5, r4, #1168	; 0x490
     4d0:	4619      	mov	r1, r3
     4d2:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     4d6:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
     4d8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4dc:	f00b f8e0 	bl	b6a0 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     4e0:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     4e2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     4e6:	f00a fb3d 	bl	ab64 <SdioCard::errorCode() const>
     4ea:	b938      	cbnz	r0, 4fc <storage_configure()+0x3c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     4ec:	2301      	movs	r3, #1
     4ee:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     4f2:	4620      	mov	r0, r4
     4f4:	461a      	mov	r2, r3
     4f6:	f009 fc61 	bl	9dbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     4fa:	b970      	cbnz	r0, 51a <storage_configure()+0x5a>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
        }
        
        if(!sdx[ii].begin(SdioConfig(FIFO_SDIO))) 
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     4fc:	486b      	ldr	r0, [pc, #428]	; (6ac <storage_configure()+0x1ec>)
     4fe:	23fe      	movs	r3, #254	; 0xfe
     500:	2200      	movs	r2, #0
     502:	496b      	ldr	r1, [pc, #428]	; (6b0 <storage_configure()+0x1f0>)
     504:	6804      	ldr	r4, [r0, #0]
     506:	486b      	ldr	r0, [pc, #428]	; (6b4 <storage_configure()+0x1f4>)
     508:	9400      	str	r4, [sp, #0]
     50a:	f00c fb33 	bl	cb74 <Print::printf(char const*, ...)>
     50e:	4869      	ldr	r0, [pc, #420]	; (6b4 <storage_configure()+0x1f4>)
            Serial.print("; total clusters: "); Serial.print(totalSize); 
            Serial.print(" free clusters: "); Serial.print(freeSize);
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
        }
      }
  }
     510:	b002      	add	sp, #8
     512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     516:	f00c bb11 	b.w	cb3c <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     51a:	4b67      	ldr	r3, [pc, #412]	; (6b8 <storage_configure()+0x1f8>)
          storage.addFilesystem(sdx[ii], sd_str[ii]);
     51c:	4f63      	ldr	r7, [pc, #396]	; (6ac <storage_configure()+0x1ec>)
     51e:	685a      	ldr	r2, [r3, #4]
     520:	2a13      	cmp	r2, #19
     522:	dc06      	bgt.n	532 <storage_configure()+0x72>
          sdx[fsCount++] = &fs;
     524:	1c50      	adds	r0, r2, #1
          sd_name[fsCount] = name;
     526:	eb03 0182 	add.w	r1, r3, r2, lsl #2
          sdx[fsCount++] = &fs;
     52a:	6058      	str	r0, [r3, #4]
          sd_name[fsCount] = name;
     52c:	683b      	ldr	r3, [r7, #0]
          sdx[fsCount++] = &fs;
     52e:	658c      	str	r4, [r1, #88]	; 0x58
          sd_name[fsCount] = name;
     530:	608b      	str	r3, [r1, #8]
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     532:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     536:	2b00      	cmp	r3, #0
     538:	d068      	beq.n	60c <storage_configure()+0x14c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     53a:	69de      	ldr	r6, [r3, #28]
     53c:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     540:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     542:	2800      	cmp	r0, #0
     544:	f000 80a1 	beq.w	68a <storage_configure()+0x1ca>
     548:	6803      	ldr	r3, [r0, #0]
     54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     54c:	4798      	blx	r3
     54e:	2800      	cmp	r0, #0
     550:	d16b      	bne.n	62a <storage_configure()+0x16a>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     552:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     556:	2800      	cmp	r0, #0
     558:	f040 808c 	bne.w	674 <storage_configure()+0x1b4>
     55c:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     560:	2d00      	cmp	r5, #0
     562:	f000 8098 	beq.w	696 <storage_configure()+0x1d6>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     566:	4680      	mov	r8, r0
     568:	4628      	mov	r0, r5
     56a:	f007 fa51 	bl	7a10 <ExFatPartition::freeClusterCount()>
     56e:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     570:	f1b8 0f00 	cmp.w	r8, #0
     574:	d00b      	beq.n	58e <storage_configure()+0xce>
     576:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     57a:	2800      	cmp	r0, #0
     57c:	f000 8083 	beq.w	686 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     580:	6803      	ldr	r3, [r0, #0]
     582:	2100      	movs	r1, #0
     584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     586:	4798      	blx	r3
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     588:	2800      	cmp	r0, #0
     58a:	bf08      	it	eq
     58c:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     58e:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     592:	2b00      	cmp	r3, #0
     594:	d066      	beq.n	664 <storage_configure()+0x1a4>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     596:	799b      	ldrb	r3, [r3, #6]
     598:	f44f 7800 	mov.w	r8, #512	; 0x200
     59c:	fa08 f803 	lsl.w	r8, r8, r3
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5a0:	f3c8 2885 	ubfx	r8, r8, #10, #6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5a4:	2400      	movs	r4, #0
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5a6:	683a      	ldr	r2, [r7, #0]
     5a8:	23fe      	movs	r3, #254	; 0xfe
     5aa:	270a      	movs	r7, #10
     5ac:	9200      	str	r2, [sp, #0]
     5ae:	4622      	mov	r2, r4
     5b0:	4942      	ldr	r1, [pc, #264]	; (6bc <storage_configure()+0x1fc>)
     5b2:	4840      	ldr	r0, [pc, #256]	; (6b4 <storage_configure()+0x1f4>)
     5b4:	f00c fade 	bl	cb74 <Print::printf(char const*, ...)>
     5b8:	2112      	movs	r1, #18
     5ba:	4841      	ldr	r0, [pc, #260]	; (6c0 <storage_configure()+0x200>)
     5bc:	f00e fe46 	bl	f24c <usb_serial_write>
     5c0:	4632      	mov	r2, r6
     5c2:	4623      	mov	r3, r4
     5c4:	483b      	ldr	r0, [pc, #236]	; (6b4 <storage_configure()+0x1f4>)
     5c6:	e9cd 7400 	strd	r7, r4, [sp]
     5ca:	f00c faf5 	bl	cbb8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5ce:	2110      	movs	r1, #16
     5d0:	483c      	ldr	r0, [pc, #240]	; (6c4 <storage_configure()+0x204>)
     5d2:	f00e fe3b 	bl	f24c <usb_serial_write>
     5d6:	462a      	mov	r2, r5
     5d8:	4623      	mov	r3, r4
     5da:	4836      	ldr	r0, [pc, #216]	; (6b4 <storage_configure()+0x1f4>)
     5dc:	e9cd 7400 	strd	r7, r4, [sp]
     5e0:	f00c faea 	bl	cbb8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5e4:	210e      	movs	r1, #14
     5e6:	4838      	ldr	r0, [pc, #224]	; (6c8 <storage_configure()+0x208>)
     5e8:	f00e fe30 	bl	f24c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     5ec:	4623      	mov	r3, r4
     5ee:	463a      	mov	r2, r7
     5f0:	4641      	mov	r1, r8
     5f2:	4830      	ldr	r0, [pc, #192]	; (6b4 <storage_configure()+0x1f4>)
     5f4:	f00c facc 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5f8:	2106      	movs	r1, #6
     5fa:	4834      	ldr	r0, [pc, #208]	; (6cc <storage_configure()+0x20c>)
     5fc:	f00e fe26 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     600:	482c      	ldr	r0, [pc, #176]	; (6b4 <storage_configure()+0x1f4>)
  }
     602:	b002      	add	sp, #8
     604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     608:	f00c ba98 	b.w	cb3c <Print::println()>
     60c:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     610:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     614:	2b00      	cmp	r3, #0
     616:	d033      	beq.n	680 <storage_configure()+0x1c0>
          uint64_t totalSize = sdx[ii].clusterCount();
     618:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     61c:	2800      	cmp	r0, #0
     61e:	d193      	bne.n	548 <storage_configure()+0x88>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     620:	4618      	mov	r0, r3
     622:	f007 f9f5 	bl	7a10 <ExFatPartition::freeClusterCount()>
     626:	4605      	mov	r5, r0
     628:	e7b1      	b.n	58e <storage_configure()+0xce>
     62a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     62e:	b350      	cbz	r0, 686 <storage_configure()+0x1c6>
     630:	6803      	ldr	r3, [r0, #0]
     632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     634:	4798      	blx	r3
     636:	2800      	cmp	r0, #0
     638:	d18b      	bne.n	552 <storage_configure()+0x92>
     63a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     63e:	b310      	cbz	r0, 686 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     640:	6803      	ldr	r3, [r0, #0]
     642:	2101      	movs	r1, #1
     644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     646:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     648:	4680      	mov	r8, r0
     64a:	b340      	cbz	r0, 69e <storage_configure()+0x1de>
    return m_fVol ? m_fVol->freeClusterCount() :
     64c:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     650:	b990      	cbnz	r0, 678 <storage_configure()+0x1b8>
     652:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     656:	2d00      	cmp	r5, #0
     658:	d186      	bne.n	568 <storage_configure()+0xa8>
     65a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     65e:	2800      	cmp	r0, #0
     660:	d18e      	bne.n	580 <storage_configure()+0xc0>
     662:	4605      	mov	r5, r0
     664:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     668:	b1db      	cbz	r3, 6a2 <storage_configure()+0x1e2>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     66a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
     66e:	ea4f 2893 	mov.w	r8, r3, lsr #10
     672:	e797      	b.n	5a4 <storage_configure()+0xe4>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     674:	f04f 0800 	mov.w	r8, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     678:	f009 f900 	bl	987c <FatPartition::freeClusterCount()>
     67c:	4605      	mov	r5, r0
     67e:	e777      	b.n	570 <storage_configure()+0xb0>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     680:	b140      	cbz	r0, 694 <storage_configure()+0x1d4>
     682:	461e      	mov	r6, r3
     684:	e760      	b.n	548 <storage_configure()+0x88>
     686:	4605      	mov	r5, r0
     688:	e781      	b.n	58e <storage_configure()+0xce>
     68a:	4618      	mov	r0, r3
     68c:	f009 f8f6 	bl	987c <FatPartition::freeClusterCount()>
     690:	4605      	mov	r5, r0
     692:	e77c      	b.n	58e <storage_configure()+0xce>
     694:	4606      	mov	r6, r0
  uint32_t bytesPerCluster() const {
     696:	f04f 0800 	mov.w	r8, #0
     69a:	4645      	mov	r5, r8
     69c:	e782      	b.n	5a4 <storage_configure()+0xe4>
     69e:	4605      	mov	r5, r0
     6a0:	e775      	b.n	58e <storage_configure()+0xce>
     6a2:	4698      	mov	r8, r3
     6a4:	e77e      	b.n	5a4 <storage_configure()+0xe4>
     6a6:	bf00      	nop
     6a8:	20028c4c 	.word	0x20028c4c
     6ac:	2000944c 	.word	0x2000944c
     6b0:	20000520 	.word	0x20000520
     6b4:	20008abc 	.word	0x20008abc
     6b8:	200291a0 	.word	0x200291a0
     6bc:	2000054c 	.word	0x2000054c
     6c0:	20000564 	.word	0x20000564
     6c4:	20000578 	.word	0x20000578
     6c8:	2000058c 	.word	0x2000058c
     6cc:	2000059c 	.word	0x2000059c

000006d0 <_GLOBAL__sub_I_storage>:
  }
     6d0:	b538      	push	{r3, r4, r5, lr}
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	492f      	ldr	r1, [pc, #188]	; (790 <_GLOBAL__sub_I_storage+0xc0>)
        fsCount = 0;
     6d4:	2400      	movs	r4, #0
     6d6:	4d2f      	ldr	r5, [pc, #188]	; (794 <_GLOBAL__sub_I_storage+0xc4>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6dc:	4b2e      	ldr	r3, [pc, #184]	; (798 <_GLOBAL__sub_I_storage+0xc8>)
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6de:	6029      	str	r1, [r5, #0]
     6e0:	f06f 0101 	mvn.w	r1, #1
        fsCount = 0;
     6e4:	606c      	str	r4, [r5, #4]
  MTPStorage_SD storage;
     6e6:	4628      	mov	r0, r5
     6e8:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
     6ec:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
     6f0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
     6f4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
     6f8:	f885 4154 	strb.w	r4, [r5, #340]	; 0x154
     6fc:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     700:	f8c5 41a8 	str.w	r4, [r5, #424]	; 0x1a8
     704:	f8a5 41ac 	strh.w	r4, [r5, #428]	; 0x1ac
     708:	e9c5 422b 	strd	r4, r2, [r5, #172]	; 0xac
     70c:	e9c5 423f 	strd	r4, r2, [r5, #252]	; 0xfc
     710:	e9c5 4253 	strd	r4, r2, [r5, #332]	; 0x14c
     714:	e9c5 4168 	strd	r4, r1, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     718:	e9c5 443c 	strd	r4, r4, [r5, #240]	; 0xf0
     71c:	e9c5 4450 	strd	r4, r4, [r5, #320]	; 0x140
     720:	e9c5 4464 	strd	r4, r4, [r5, #400]	; 0x190
     724:	e9c5 4466 	strd	r4, r4, [r5, #408]	; 0x198
     728:	4a1c      	ldr	r2, [pc, #112]	; (79c <_GLOBAL__sub_I_storage+0xcc>)
     72a:	491d      	ldr	r1, [pc, #116]	; (7a0 <_GLOBAL__sub_I_storage+0xd0>)
     72c:	f00e ff98 	bl	f660 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     730:	481c      	ldr	r0, [pc, #112]	; (7a4 <_GLOBAL__sub_I_storage+0xd4>)
  FsVolume() {}
     732:	4b1d      	ldr	r3, [pc, #116]	; (7a8 <_GLOBAL__sub_I_storage+0xd8>)
     734:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
     738:	6005      	str	r5, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     73a:	481c      	ldr	r0, [pc, #112]	; (7ac <_GLOBAL__sub_I_storage+0xdc>)
     73c:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
     740:	f881 4424 	strb.w	r4, [r1, #1060]	; 0x424
     744:	f8c1 4428 	str.w	r4, [r1, #1064]	; 0x428
	SPISettings() : _clock(4000000) {
     748:	4919      	ldr	r1, [pc, #100]	; (7b0 <_GLOBAL__sub_I_storage+0xe0>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     74a:	4d1a      	ldr	r5, [pc, #104]	; (7b4 <_GLOBAL__sub_I_storage+0xe4>)
     74c:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     750:	2007      	movs	r0, #7
	SPISettings() : _clock(4000000) {
     752:	f8c3 14a4 	str.w	r1, [r3, #1188]	; 0x4a4
  SharedSpiCard() {}
     756:	2129      	movs	r1, #41	; 0x29
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     758:	f8c3 04a8 	str.w	r0, [r3, #1192]	; 0x4a8
  SdFs sdx[nsd];
     75c:	4620      	mov	r0, r4
     75e:	f883 14ad 	strb.w	r1, [r3, #1197]	; 0x4ad
     762:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     766:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     76a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     76e:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
     772:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     776:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     77a:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
     77e:	f8c3 549c 	str.w	r5, [r3, #1180]	; 0x49c
     782:	4a06      	ldr	r2, [pc, #24]	; (79c <_GLOBAL__sub_I_storage+0xcc>)
     784:	490c      	ldr	r1, [pc, #48]	; (7b8 <_GLOBAL__sub_I_storage+0xe8>)
  }
     786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     78a:	f00e bf69 	b.w	f660 <__aeabi_atexit>
     78e:	bf00      	nop
     790:	20000ba0 	.word	0x20000ba0
     794:	200291a0 	.word	0x200291a0
     798:	20000ca4 	.word	0x20000ca4
     79c:	20008e98 	.word	0x20008e98
     7a0:	00000071 	.word	0x00000071
     7a4:	20009b00 	.word	0x20009b00
     7a8:	20028c4c 	.word	0x20028c4c
     7ac:	20000cec 	.word	0x20000cec
     7b0:	003d0900 	.word	0x003d0900
     7b4:	20000c0c 	.word	0x20000c0c
     7b8:	0000006d 	.word	0x0000006d

000007bc <setup>:
{
     7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     7c0:	4d75      	ldr	r5, [pc, #468]	; (998 <setup+0x1dc>)
     7c2:	b087      	sub	sp, #28
    set_arm_clock(48'000'000);
     7c4:	4875      	ldr	r0, [pc, #468]	; (99c <setup+0x1e0>)
				if (elapsed > 750) break;
     7c6:	f240 28ee 	movw	r8, #750	; 0x2ee
     7ca:	f00c fb43 	bl	ce54 <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     7ce:	4c74      	ldr	r4, [pc, #464]	; (9a0 <setup+0x1e4>)
     7d0:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7d2:	4f74      	ldr	r7, [pc, #464]	; (9a4 <setup+0x1e8>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7d4:	f8df 9204 	ldr.w	r9, [pc, #516]	; 9dc <setup+0x220>
		yield();
     7d8:	f00e fdb6 	bl	f348 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7dc:	7823      	ldrb	r3, [r4, #0]
     7de:	2b00      	cmp	r3, #0
     7e0:	f000 80a4 	beq.w	92c <setup+0x170>
     7e4:	783b      	ldrb	r3, [r7, #0]
     7e6:	07d9      	lsls	r1, r3, #31
     7e8:	f140 80a0 	bpl.w	92c <setup+0x170>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7ec:	682b      	ldr	r3, [r5, #0]
     7ee:	f8d9 2000 	ldr.w	r2, [r9]
     7f2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7f4:	2b0e      	cmp	r3, #14
     7f6:	f240 8099 	bls.w	92c <setup+0x170>
  uint16_t *params=loadParameters();
     7fa:	f003 fcff 	bl	41fc <loadParameters()>
  if(params[0]==1)
     7fe:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     800:	4607      	mov	r7, r0
  if(params[0]==1)
     802:	2b01      	cmp	r3, #1
     804:	f000 80aa 	beq.w	95c <setup+0x1a0>
     808:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     80a:	f242 760f 	movw	r6, #9999	; 0x270f
     80e:	42b3      	cmp	r3, r6
     810:	d818      	bhi.n	844 <setup+0x88>
     812:	f8df 8190 	ldr.w	r8, [pc, #400]	; 9a4 <setup+0x1e8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     816:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 9dc <setup+0x220>
		yield();
     81a:	f00e fd95 	bl	f348 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     81e:	7823      	ldrb	r3, [r4, #0]
     820:	2b00      	cmp	r3, #0
     822:	f000 80a6 	beq.w	972 <setup+0x1b6>
     826:	f898 3000 	ldrb.w	r3, [r8]
     82a:	07da      	lsls	r2, r3, #31
     82c:	f140 80a1 	bpl.w	972 <setup+0x1b6>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     830:	682b      	ldr	r3, [r5, #0]
     832:	f8d9 2000 	ldr.w	r2, [r9]
     836:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     838:	2b0e      	cmp	r3, #14
     83a:	f240 809a 	bls.w	972 <setup+0x1b6>
     83e:	4b5a      	ldr	r3, [pc, #360]	; (9a8 <setup+0x1ec>)
     840:	2201      	movs	r2, #1
     842:	601a      	str	r2, [r3, #0]
     844:	682b      	ldr	r3, [r5, #0]
  while(millis()<10'000) if(Serial) { break;}
     846:	f242 760f 	movw	r6, #9999	; 0x270f
     84a:	42b3      	cmp	r3, r6
     84c:	d812      	bhi.n	874 <setup+0xb8>
     84e:	f8df 8154 	ldr.w	r8, [pc, #340]	; 9a4 <setup+0x1e8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     852:	f8df 9188 	ldr.w	r9, [pc, #392]	; 9dc <setup+0x220>
		yield();
     856:	f00e fd77 	bl	f348 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     85a:	7823      	ldrb	r3, [r4, #0]
     85c:	2b00      	cmp	r3, #0
     85e:	d070      	beq.n	942 <setup+0x186>
     860:	f898 3000 	ldrb.w	r3, [r8]
     864:	07db      	lsls	r3, r3, #31
     866:	d56c      	bpl.n	942 <setup+0x186>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     868:	682b      	ldr	r3, [r5, #0]
     86a:	f8d9 2000 	ldr.w	r2, [r9]
     86e:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     870:	2b0e      	cmp	r3, #14
     872:	d966      	bls.n	942 <setup+0x186>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     874:	2126      	movs	r1, #38	; 0x26
     876:	484d      	ldr	r0, [pc, #308]	; (9ac <setup+0x1f0>)
     878:	f00e fce8 	bl	f24c <usb_serial_write>
     87c:	484c      	ldr	r0, [pc, #304]	; (9b0 <setup+0x1f4>)
     87e:	f00c f95d 	bl	cb3c <Print::println()>
     882:	210c      	movs	r1, #12
     884:	484b      	ldr	r0, [pc, #300]	; (9b4 <setup+0x1f8>)
     886:	f00e fce1 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     88a:	8839      	ldrh	r1, [r7, #0]
     88c:	4848      	ldr	r0, [pc, #288]	; (9b0 <setup+0x1f4>)
     88e:	f00c f949 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     892:	4847      	ldr	r0, [pc, #284]	; (9b0 <setup+0x1f4>)
     894:	f00c f952 	bl	cb3c <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     898:	4847      	ldr	r0, [pc, #284]	; (9b8 <setup+0x1fc>)
     89a:	f019 fe11 	bl	1a4c0 <___ZN16CrashReportClasscvbEv_veneer>
     89e:	2800      	cmp	r0, #0
     8a0:	d174      	bne.n	98c <setup+0x1d0>
  storage_configure();
     8a2:	f7ff fe0d 	bl	4c0 <storage_configure()>
  rtc_setup();
     8a6:	2113      	movs	r1, #19
     8a8:	2012      	movs	r0, #18
     8aa:	f004 f925 	bl	4af8 <rtc_setup(unsigned char, unsigned char)>
     8ae:	2110      	movs	r1, #16
     8b0:	4842      	ldr	r0, [pc, #264]	; (9bc <setup+0x200>)
     8b2:	f00e fccb 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8b6:	483e      	ldr	r0, [pc, #248]	; (9b0 <setup+0x1f4>)
     8b8:	f00c f940 	bl	cb3c <Print::println()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8bc:	a804      	add	r0, sp, #16
     8be:	f004 f91d 	bl	4afc <rtc_get_datetime(datetime_t*)>
     8c2:	2800      	cmp	r0, #0
     8c4:	d05a      	beq.n	97c <setup+0x1c0>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8c6:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     8ca:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     8ce:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     8d2:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     8d6:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     8da:	e9cd 2102 	strd	r2, r1, [sp, #8]
     8de:	e9cd 0400 	strd	r0, r4, [sp]
     8e2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
  setup_ready=1;
     8e6:	2401      	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8e8:	4935      	ldr	r1, [pc, #212]	; (9c0 <setup+0x204>)
     8ea:	4831      	ldr	r0, [pc, #196]	; (9b0 <setup+0x1f4>)
     8ec:	f00c f942 	bl	cb74 <Print::printf(char const*, ...)>
                           t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     8f0:	482f      	ldr	r0, [pc, #188]	; (9b0 <setup+0x1f4>)
     8f2:	f00c f923 	bl	cb3c <Print::println()>
     8f6:	210b      	movs	r1, #11
     8f8:	4832      	ldr	r0, [pc, #200]	; (9c4 <setup+0x208>)
     8fa:	f00e fca7 	bl	f24c <usb_serial_write>
     8fe:	482c      	ldr	r0, [pc, #176]	; (9b0 <setup+0x1f4>)
     900:	f00c f91c 	bl	cb3c <Print::println()>
  filing_init();
     904:	f001 f9ee 	bl	1ce4 <filing_init()>
     908:	210a      	movs	r1, #10
     90a:	482f      	ldr	r0, [pc, #188]	; (9c8 <setup+0x20c>)
     90c:	f00e fc9e 	bl	f24c <usb_serial_write>
     910:	4827      	ldr	r0, [pc, #156]	; (9b0 <setup+0x1f4>)
     912:	f00c f913 	bl	cb3c <Print::println()>
  setup_ready=1;
     916:	4b2d      	ldr	r3, [pc, #180]	; (9cc <setup+0x210>)
     918:	601c      	str	r4, [r3, #0]
    setup1();
     91a:	f7ff fd8f 	bl	43c <setup1()>
    pinMode(13,OUTPUT);
     91e:	4621      	mov	r1, r4
     920:	200d      	movs	r0, #13
     922:	f00c fcb7 	bl	d294 <pinMode>
}
     926:	b007      	add	sp, #28
     928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     92c:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     92e:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     930:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     932:	b152      	cbz	r2, 94a <setup+0x18e>
				if (elapsed > 2000) break;
     934:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     938:	f63f af5f 	bhi.w	7fa <setup+0x3e>
			yield();
     93c:	f00e fd04 	bl	f348 <yield>
     940:	e74a      	b.n	7d8 <setup+0x1c>
     942:	682b      	ldr	r3, [r5, #0]
  while(millis()<10'000) if(Serial) { break;}
     944:	42b3      	cmp	r3, r6
     946:	d986      	bls.n	856 <setup+0x9a>
     948:	e794      	b.n	874 <setup+0xb8>
				if (elapsed > 750) break;
     94a:	4543      	cmp	r3, r8
     94c:	d9f6      	bls.n	93c <setup+0x180>
  uint16_t *params=loadParameters();
     94e:	f003 fc55 	bl	41fc <loadParameters()>
  if(params[0]==1)
     952:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     954:	4607      	mov	r7, r0
  if(params[0]==1)
     956:	2b01      	cmp	r3, #1
     958:	f47f af56 	bne.w	808 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     95c:	4b1c      	ldr	r3, [pc, #112]	; (9d0 <setup+0x214>)
     95e:	4a1d      	ldr	r2, [pc, #116]	; (9d4 <setup+0x218>)
     960:	681b      	ldr	r3, [r3, #0]
     962:	6812      	ldr	r2, [r2, #0]
     964:	4293      	cmp	r3, r2
     966:	4a10      	ldr	r2, [pc, #64]	; (9a8 <setup+0x1ec>)
     968:	bf8c      	ite	hi
     96a:	2300      	movhi	r3, #0
     96c:	2301      	movls	r3, #1
     96e:	6013      	str	r3, [r2, #0]
     970:	e768      	b.n	844 <setup+0x88>
     972:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     974:	42b3      	cmp	r3, r6
     976:	f67f af50 	bls.w	81a <setup+0x5e>
     97a:	e763      	b.n	844 <setup+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     97c:	2114      	movs	r1, #20
     97e:	4816      	ldr	r0, [pc, #88]	; (9d8 <setup+0x21c>)
     980:	f00e fc64 	bl	f24c <usb_serial_write>
     984:	480a      	ldr	r0, [pc, #40]	; (9b0 <setup+0x1f4>)
     986:	f00c f8d9 	bl	cb3c <Print::println()>
     98a:	e79c      	b.n	8c6 <setup+0x10a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     98c:	4908      	ldr	r1, [pc, #32]	; (9b0 <setup+0x1f4>)
     98e:	480a      	ldr	r0, [pc, #40]	; (9b8 <setup+0x1fc>)
     990:	f019 fd86 	bl	1a4a0 <___ZNK16CrashReportClass7printToER5Print_veneer>
     994:	e785      	b.n	8a2 <setup+0xe6>
     996:	bf00      	nop
     998:	2002935c 	.word	0x2002935c
     99c:	02dc6c00 	.word	0x02dc6c00
     9a0:	200293b3 	.word	0x200293b3
     9a4:	200293b2 	.word	0x200293b2
     9a8:	20029370 	.word	0x20029370
     9ac:	2000098c 	.word	0x2000098c
     9b0:	20008abc 	.word	0x20008abc
     9b4:	20007f80 	.word	0x20007f80
     9b8:	20008ab0 	.word	0x20008ab0
     9bc:	20007f90 	.word	0x20007f90
     9c0:	20007fbc 	.word	0x20007fbc
     9c4:	20007fe4 	.word	0x20007fe4
     9c8:	20007ff0 	.word	0x20007ff0
     9cc:	2002919c 	.word	0x2002919c
     9d0:	20009464 	.word	0x20009464
     9d4:	20009460 	.word	0x20009460
     9d8:	20007fa4 	.word	0x20007fa4
     9dc:	2002937c 	.word	0x2002937c

000009e0 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9e0:	b510      	push	{r4, lr}
     9e2:	4604      	mov	r4, r0
		release();
     9e4:	f00c f80c 	bl	ca00 <DMAChannel::release()>
	}
     9e8:	4620      	mov	r0, r4
     9ea:	bd10      	pop	{r4, pc}

000009ec <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     9ec:	4b26      	ldr	r3, [pc, #152]	; (a88 <acq_isr()+0x9c>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9ee:	4927      	ldr	r1, [pc, #156]	; (a8c <acq_isr()+0xa0>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9f0:	4a27      	ldr	r2, [pc, #156]	; (a90 <acq_isr()+0xa4>)
  {
     9f2:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     9f4:	681c      	ldr	r4, [r3, #0]
     9f6:	7918      	ldrb	r0, [r3, #4]
     9f8:	6923      	ldr	r3, [r4, #16]
     9fa:	77d0      	strb	r0, [r2, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9fc:	428b      	cmp	r3, r1
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9fe:	bf28      	it	cs
     a00:	f5a1 6180 	subcs.w	r1, r1, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a04:	460a      	mov	r2, r1
	asm("dsb");
     a06:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     a0a:	f501 6080 	add.w	r0, r1, #1024	; 0x400
     a0e:	f101 0320 	add.w	r3, r1, #32
		SCB_CACHE_DCIMVAC = location;
     a12:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
     a16:	4298      	cmp	r0, r3
     a18:	bf34      	ite	cc
     a1a:	2001      	movcc	r0, #1
     a1c:	2020      	movcs	r0, #32
     a1e:	eb01 1040 	add.w	r0, r1, r0, lsl #5
	} while (location < end_addr);
     a22:	4283      	cmp	r3, r0
		SCB_CACHE_DCIMVAC = location;
     a24:	f8cc 1f5c 	str.w	r1, [ip, #3932]	; 0xf5c
		location += 32;
     a28:	4619      	mov	r1, r3
	} while (location < end_addr);
     a2a:	f103 0320 	add.w	r3, r3, #32
     a2e:	d1f8      	bne.n	a22 <acq_isr()+0x36>
	asm("dsb");
     a30:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a34:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a38:	4c16      	ldr	r4, [pc, #88]	; (a94 <acq_isr()+0xa8>)
     a3a:	4917      	ldr	r1, [pc, #92]	; (a98 <acq_isr()+0xac>)
     a3c:	6823      	ldr	r3, [r4, #0]
     a3e:	f501 7000 	add.w	r0, r1, #512	; 0x200
     a42:	3301      	adds	r3, #1
     a44:	6023      	str	r3, [r4, #0]
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
     a46:	6853      	ldr	r3, [r2, #4]
     a48:	3208      	adds	r2, #8
     a4a:	121b      	asrs	r3, r3, #8
     a4c:	f841 3f04 	str.w	r3, [r1, #4]!
     a50:	4281      	cmp	r1, r0
     a52:	d1f8      	bne.n	a46 <acq_isr()+0x5a>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     a54:	4a11      	ldr	r2, [pc, #68]	; (a9c <acq_isr()+0xb0>)
     a56:	8813      	ldrh	r3, [r2, #0]
     a58:	b21b      	sxth	r3, r3
     a5a:	b123      	cbz	r3, a66 <acq_isr()+0x7a>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a5c:	8813      	ldrh	r3, [r2, #0]
     a5e:	b21b      	sxth	r3, r3
     a60:	2b01      	cmp	r3, #1
     a62:	d00a      	beq.n	a7a <acq_isr()+0x8e>
  }
     a64:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a66:	480e      	ldr	r0, [pc, #56]	; (aa0 <acq_isr()+0xb4>)
     a68:	f003 fea6 	bl	47b8 <pushData(unsigned long*)>
     a6c:	2800      	cmp	r0, #0
     a6e:	d1f9      	bne.n	a64 <acq_isr()+0x78>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a70:	4a0c      	ldr	r2, [pc, #48]	; (aa4 <acq_isr()+0xb8>)
     a72:	6813      	ldr	r3, [r2, #0]
     a74:	3301      	adds	r3, #1
     a76:	6013      	str	r3, [r2, #0]
  }
     a78:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a7a:	4809      	ldr	r0, [pc, #36]	; (aa0 <acq_isr()+0xb4>)
     a7c:	f000 fa82 	bl	f84 <compress(void*)>
     a80:	2800      	cmp	r0, #0
     a82:	d1ef      	bne.n	a64 <acq_isr()+0x78>
     a84:	e7f4      	b.n	a70 <acq_isr()+0x84>
     a86:	bf00      	nop
     a88:	20027bdc 	.word	0x20027bdc
     a8c:	20200400 	.word	0x20200400
     a90:	400e8000 	.word	0x400e8000
     a94:	20028b7c 	.word	0x20028b7c
     a98:	200288b8 	.word	0x200288b8
     a9c:	20029392 	.word	0x20029392
     aa0:	200288bc 	.word	0x200288bc
     aa4:	20028b80 	.word	0x20028b80

00000aa8 <setAudioFrequency(int)>:
  {
     aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     aac:	2105      	movs	r1, #5
     aae:	4681      	mov	r9, r0
     ab0:	4859      	ldr	r0, [pc, #356]	; (c18 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     ab2:	4f5a      	ldr	r7, [pc, #360]	; (c1c <setAudioFrequency(int)+0x174>)
     ab4:	ed2d 8b02 	vpush	{d8}
     ab8:	b083      	sub	sp, #12
     aba:	f00e fbc7 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     abe:	2180      	movs	r1, #128	; 0x80
     ac0:	4857      	ldr	r0, [pc, #348]	; (c20 <setAudioFrequency(int)+0x178>)
     ac2:	f00c f82f 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ac6:	4856      	ldr	r0, [pc, #344]	; (c20 <setAudioFrequency(int)+0x178>)
     ac8:	f00c f838 	bl	cb3c <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     acc:	231a      	movs	r3, #26
     ace:	ea4f 10c9 	mov.w	r0, r9, lsl #7
    } while ((n2>64 && n0<54));
     ad2:	f8df c170 	ldr.w	ip, [pc, #368]	; c44 <setAudioFrequency(int)+0x19c>
    {   n0++;
     ad6:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ad8:	4602      	mov	r2, r0
        n1=0;
     ada:	2400      	movs	r4, #0
        {   n1++; 
     adc:	46a0      	mov	r8, r4
     ade:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ae0:	fb97 f6f2 	sdiv	r6, r7, r2
     ae4:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     ae6:	4402      	add	r2, r0
     ae8:	2d40      	cmp	r5, #64	; 0x40
     aea:	bfd4      	ite	le
     aec:	2100      	movle	r1, #0
     aee:	2101      	movgt	r1, #1
     af0:	2c08      	cmp	r4, #8
     af2:	dc01      	bgt.n	af8 <setAudioFrequency(int)+0x50>
     af4:	2900      	cmp	r1, #0
     af6:	d1f1      	bne.n	adc <setAudioFrequency(int)+0x34>
    } while ((n2>64 && n0<54));
     af8:	2b35      	cmp	r3, #53	; 0x35
     afa:	4467      	add	r7, ip
     afc:	dc01      	bgt.n	b02 <setAudioFrequency(int)+0x5a>
     afe:	2900      	cmp	r1, #0
     b00:	d1e9      	bne.n	ad6 <setAudioFrequency(int)+0x2e>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b02:	464a      	mov	r2, r9
     b04:	4947      	ldr	r1, [pc, #284]	; (c24 <setAudioFrequency(int)+0x17c>)
     b06:	4846      	ldr	r0, [pc, #280]	; (c20 <setAudioFrequency(int)+0x178>)
     b08:	e9cd 4500 	strd	r4, r5, [sp]
     b0c:	f00c f832 	bl	cb74 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b10:	ee07 9a90 	vmov	s15, r9
     b14:	ee06 5a90 	vmov	s13, r5
     b18:	2103      	movs	r1, #3
     b1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b1e:	ee07 4a90 	vmov	s15, r4
     b22:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b26:	4840      	ldr	r0, [pc, #256]	; (c28 <setAudioFrequency(int)+0x180>)
     b28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b2c:	ed9f 3b34 	vldr	d3, [pc, #208]	; c00 <setAudioFrequency(int)+0x158>
     b30:	ed9f 4b35 	vldr	d4, [pc, #212]	; c08 <setAudioFrequency(int)+0x160>
     b34:	ee25 5b03 	vmul.f64	d5, d5, d3
     b38:	ee25 7b07 	vmul.f64	d7, d5, d7
     b3c:	ee27 7b06 	vmul.f64	d7, d7, d6
     b40:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b44:	f00e fb82 	bl	f24c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b48:	2102      	movs	r1, #2
     b4a:	4835      	ldr	r0, [pc, #212]	; (c20 <setAudioFrequency(int)+0x178>)
     b4c:	eeb0 0b48 	vmov.f64	d0, d8
     b50:	f00c f886 	bl	cc60 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b54:	4832      	ldr	r0, [pc, #200]	; (c20 <setAudioFrequency(int)+0x178>)
     b56:	f00b fff1 	bl	cb3c <Print::println()>
    int c0 = C;
     b5a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b5e:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b62:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b66:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b6e:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b72:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b76:	4a2d      	ldr	r2, [pc, #180]	; (c2c <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     b78:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b7c:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     b7e:	ed9f 6b24 	vldr	d6, [pc, #144]	; c10 <setAudioFrequency(int)+0x168>
     b82:	ee98 7b06 	vfnms.f64	d7, d8, d6
     b86:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     b8a:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     b8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     b92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     b96:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     b9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
     b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     ba0:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     ba2:	6f13      	ldr	r3, [r2, #112]	; 0x70
     ba4:	2b00      	cmp	r3, #0
     ba6:	dafc      	bge.n	ba2 <setAudioFrequency(int)+0xfa>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     ba8:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bac:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bb0:	481f      	ldr	r0, [pc, #124]	; (c30 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bb2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bb6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bba:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bbc:	491d      	ldr	r1, [pc, #116]	; (c34 <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bbe:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bc2:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bc4:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     bc8:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bca:	69ca      	ldr	r2, [r1, #28]
     bcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd4:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bd6:	4a18      	ldr	r2, [pc, #96]	; (c38 <setAudioFrequency(int)+0x190>)
     bd8:	6a88      	ldr	r0, [r1, #40]	; 0x28
     bda:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bdc:	4817      	ldr	r0, [pc, #92]	; (c3c <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bde:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     be0:	4a17      	ldr	r2, [pc, #92]	; (c40 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     be2:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     be4:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     be6:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     be8:	401a      	ands	r2, r3
     bea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bee:	6042      	str	r2, [r0, #4]
  }
     bf0:	b003      	add	sp, #12
     bf2:	ecbd 8b02 	vpop	{d8}
     bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     bfa:	bf00      	nop
     bfc:	f3af 8000 	nop.w
     c00:	00000000 	.word	0x00000000
     c04:	40600000 	.word	0x40600000
     c08:	00000000 	.word	0x00000000
     c0c:	4176e360 	.word	0x4176e360
     c10:	00000000 	.word	0x00000000
     c14:	40c38800 	.word	0x40c38800
     c18:	200004f4 	.word	0x200004f4
     c1c:	269fb200 	.word	0x269fb200
     c20:	20008abc 	.word	0x20008abc
     c24:	200004fc 	.word	0x200004fc
     c28:	2000051c 	.word	0x2000051c
     c2c:	400d8000 	.word	0x400d8000
     c30:	ff7f7fff 	.word	0xff7f7fff
     c34:	400fc000 	.word	0x400fc000
     c38:	fffffe00 	.word	0xfffffe00
     c3c:	400ac000 	.word	0x400ac000
     c40:	fff7fff8 	.word	0xfff7fff8
     c44:	016e3600 	.word	0x016e3600

00000c48 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c48:	4a1a      	ldr	r2, [pc, #104]	; (cb4 <i2s_setup()+0x6c>)
     c4a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c4c:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c4e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c52:	4c19      	ldr	r4, [pc, #100]	; (cb8 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c54:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c56:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c5a:	2b00      	cmp	r3, #0
     c5c:	db28      	blt.n	cb0 <i2s_setup()+0x68>
    int fs = fsamp;
     c5e:	4b17      	ldr	r3, [pc, #92]	; (cbc <i2s_setup()+0x74>)
     c60:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c62:	f7ff ff21 	bl	aa8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c66:	4b16      	ldr	r3, [pc, #88]	; (cc0 <i2s_setup()+0x78>)
     c68:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c6a:	4916      	ldr	r1, [pc, #88]	; (cc4 <i2s_setup()+0x7c>)
     c6c:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c6e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c72:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c76:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c7a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c7e:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c80:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     c88:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c8a:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     c8e:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c92:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     c96:	490c      	ldr	r1, [pc, #48]	; (cc8 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c98:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     c9c:	4a0b      	ldr	r2, [pc, #44]	; (ccc <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     c9e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     ca2:	4b0b      	ldr	r3, [pc, #44]	; (cd0 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     ca4:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     ca8:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cb0:	bd10      	pop	{r4, pc}
     cb2:	bf00      	nop
     cb4:	400fc000 	.word	0x400fc000
     cb8:	40384000 	.word	0x40384000
     cbc:	2000943c 	.word	0x2000943c
     cc0:	401f8000 	.word	0x401f8000
     cc4:	401f8400 	.word	0x401f8400
     cc8:	0001001b 	.word	0x0001001b
     ccc:	1f1f1f00 	.word	0x1f1f1f00
     cd0:	92000001 	.word	0x92000001

00000cd4 <dma_setup()>:
  {
     cd4:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     cd6:	4c1c      	ldr	r4, [pc, #112]	; (d48 <dma_setup()+0x74>)
     cd8:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     cda:	4d1c      	ldr	r5, [pc, #112]	; (d4c <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     cdc:	4620      	mov	r0, r4
     cde:	f00b fe35 	bl	c94c <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     ce2:	6823      	ldr	r3, [r4, #0]
     ce4:	481a      	ldr	r0, [pc, #104]	; (d50 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     cea:	491a      	ldr	r1, [pc, #104]	; (d54 <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cec:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     cee:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     cf0:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cf2:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     cf4:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cf6:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     cf8:	4d17      	ldr	r5, [pc, #92]	; (d58 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     cfa:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     cfc:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     cfe:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d00:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d02:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d04:	2204      	movs	r2, #4
     d06:	4915      	ldr	r1, [pc, #84]	; (d5c <dma_setup()+0x88>)
     d08:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d0a:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d0c:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d0e:	4d14      	ldr	r5, [pc, #80]	; (d60 <dma_setup()+0x8c>)
     d10:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d12:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d16:	4b13      	ldr	r3, [pc, #76]	; (d64 <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d18:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d1c:	2101      	movs	r1, #1
     d1e:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d20:	4811      	ldr	r0, [pc, #68]	; (d68 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d22:	f002 051f 	and.w	r5, r2, #31
     d26:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d2a:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d2e:	40a9      	lsls	r1, r5
     d30:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d32:	4d0e      	ldr	r5, [pc, #56]	; (d6c <dma_setup()+0x98>)
     d34:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d38:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3a:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d3c:	490c      	ldr	r1, [pc, #48]	; (d70 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d3e:	4b0d      	ldr	r3, [pc, #52]	; (d74 <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d40:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d42:	7922      	ldrb	r2, [r4, #4]
     d44:	76da      	strb	r2, [r3, #27]
  }
     d46:	bd38      	pop	{r3, r4, r5, pc}
     d48:	20027bdc 	.word	0x20027bdc
     d4c:	02020000 	.word	0x02020000
     d50:	403840a0 	.word	0x403840a0
     d54:	20200000 	.word	0x20200000
     d58:	fffff800 	.word	0xfffff800
     d5c:	400ec000 	.word	0x400ec000
     d60:	80000013 	.word	0x80000013
     d64:	38003840 	.word	0x38003840
     d68:	20009800 	.word	0x20009800
     d6c:	000009ed 	.word	0x000009ed
     d70:	e000e400 	.word	0xe000e400
     d74:	400e8000 	.word	0x400e8000

00000d78 <acqModifyFrequency(unsigned long)>:
  {
     d78:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d7a:	4c08      	ldr	r4, [pc, #32]	; (d9c <acqModifyFrequency(unsigned long)+0x24>)
     d7c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     d84:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     d88:	f7ff fe8e 	bl	aa8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     d8c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d90:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     d94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     d98:	bd10      	pop	{r4, pc}
     d9a:	bf00      	nop
     d9c:	40384000 	.word	0x40384000

00000da0 <_GLOBAL__sub_I_procCount>:
		begin();
     da0:	4805      	ldr	r0, [pc, #20]	; (db8 <_GLOBAL__sub_I_procCount+0x18>)
     da2:	2100      	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     da4:	b508      	push	{r3, lr}
     da6:	f00b fdd1 	bl	c94c <DMAChannel::begin(bool)>
  static DMAChannel dma;
     daa:	4a04      	ldr	r2, [pc, #16]	; (dbc <_GLOBAL__sub_I_procCount+0x1c>)
     dac:	4904      	ldr	r1, [pc, #16]	; (dc0 <_GLOBAL__sub_I_procCount+0x20>)
     dae:	4802      	ldr	r0, [pc, #8]	; (db8 <_GLOBAL__sub_I_procCount+0x18>)
}
     db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     db4:	f00e bc54 	b.w	f660 <__aeabi_atexit>
     db8:	20027bdc 	.word	0x20027bdc
     dbc:	20008e98 	.word	0x20008e98
     dc0:	000009e1 	.word	0x000009e1

00000dc4 <acqPower(int)>:
    #define I2C_ADDRESS2 0x4D // 0-1
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void acqPower(int flag)
    {   
     dc4:	4601      	mov	r1, r0
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
     dc6:	2021      	movs	r0, #33	; 0x21
     dc8:	b2c9      	uxtb	r1, r1
     dca:	f00c ba39 	b.w	d240 <digitalWrite>
     dce:	bf00      	nop

00000dd0 <adc_init()>:
    { digitalWrite(ADC_SHDNZ,HIGH); 
    }


    void adc_init(void)
    {
     dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
     dd4:	2101      	movs	r1, #1
    {
     dd6:	b082      	sub	sp, #8
            pinMode(ADC_EN,OUTPUT);
     dd8:	2021      	movs	r0, #33	; 0x21
     dda:	f00c fa5b 	bl	d294 <pinMode>
            digitalWrite(ADC_EN,flag);
     dde:	2101      	movs	r1, #1
     de0:	2021      	movs	r0, #33	; 0x21
     de2:	f00c fa2d 	bl	d240 <digitalWrite>
        #endif
        acqPower(HIGH);

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
     de6:	2101      	movs	r1, #1
     de8:	2020      	movs	r0, #32
     dea:	f00c fa53 	bl	d294 <pinMode>
    { digitalWrite(ADC_SHDNZ,LOW); 
     dee:	2100      	movs	r1, #0
     df0:	2020      	movs	r0, #32
     df2:	f00c fa25 	bl	d240 <digitalWrite>
        adcReset();
        delay(100);
     df6:	2064      	movs	r0, #100	; 0x64
     df8:	f00c f9a4 	bl	d144 <delay>
    { digitalWrite(ADC_SHDNZ,HIGH); 
     dfc:	2101      	movs	r1, #1
     dfe:	2020      	movs	r0, #32
     e00:	f00c fa1e 	bl	d240 <digitalWrite>
        adcStart();

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&Wire,100'000); // SCL:19; SDA:18
     e04:	4a54      	ldr	r2, [pc, #336]	; (f58 <adc_init()+0x188>)
     e06:	4955      	ldr	r1, [pc, #340]	; (f5c <adc_init()+0x18c>)
     e08:	a801      	add	r0, sp, #4
     e0a:	f000 ffe3 	bl	1dd4 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        delay(200);
     e0e:	20c8      	movs	r0, #200	; 0xc8
     e10:	f00c f998 	bl	d144 <delay>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
     e14:	214c      	movs	r1, #76	; 0x4c
     e16:	a801      	add	r0, sp, #4
     e18:	f000 fff0 	bl	1dfc <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e1c:	224c      	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
     e1e:	2800      	cmp	r0, #0
     e20:	f000 8095 	beq.w	f4e <adc_init()+0x17e>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e24:	494e      	ldr	r1, [pc, #312]	; (f60 <adc_init()+0x190>)
     e26:	484f      	ldr	r0, [pc, #316]	; (f64 <adc_init()+0x194>)
     e28:	f00b fea4 	bl	cb74 <Print::printf(char const*, ...)>
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
     e2c:	2381      	movs	r3, #129	; 0x81
     e2e:	2202      	movs	r2, #2
     e30:	214c      	movs	r1, #76	; 0x4c
     e32:	a801      	add	r0, sp, #4
     e34:	f001 f830 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
     e38:	2330      	movs	r3, #48	; 0x30
     e3a:	2207      	movs	r2, #7
     e3c:	214c      	movs	r1, #76	; 0x4c
     e3e:	a801      	add	r0, sp, #4
     e40:	4d49      	ldr	r5, [pc, #292]	; (f68 <adc_init()+0x198>)
     e42:	f001 f829 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
     e46:	2300      	movs	r3, #0
     e48:	2208      	movs	r2, #8
     e4a:	214c      	movs	r1, #76	; 0x4c
     e4c:	a801      	add	r0, sp, #4
     e4e:	240b      	movs	r4, #11
     e50:	f001 f822 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
     e54:	2300      	movs	r3, #0

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     e56:	4622      	mov	r2, r4
            for(int jj=0;jj<4;jj++)
     e58:	3401      	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     e5a:	214c      	movs	r1, #76	; 0x4c
     e5c:	a801      	add	r0, sp, #4
            for(int jj=0;jj<4;jj++)
     e5e:	b2e4      	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     e60:	f001 f81a 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
     e64:	2c0f      	cmp	r4, #15
     e66:	d002      	beq.n	e6e <adc_init()+0x9e>
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     e68:	f815 3f01 	ldrb.w	r3, [r5, #1]!
     e6c:	e7f3      	b.n	e56 <adc_init()+0x86>
            }

            i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
     e6e:	2390      	movs	r3, #144	; 0x90
     e70:	2273      	movs	r2, #115	; 0x73
     e72:	214c      	movs	r1, #76	; 0x4c
     e74:	a801      	add	r0, sp, #4
     e76:	4d3d      	ldr	r5, [pc, #244]	; (f6c <adc_init()+0x19c>)
     e78:	f001 f80e 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
     e7c:	2390      	movs	r3, #144	; 0x90
     e7e:	2274      	movs	r2, #116	; 0x74
     e80:	214c      	movs	r1, #76	; 0x4c
     e82:	a801      	add	r0, sp, #4
     e84:	f001 f808 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0x60);			//Power-up ADC and PLL by I2C write into P0_R117 

            i2c.write(i2c_addr[ii],0x3B,0x00); // 0: 2.75V; 1: 2.5V; 2: 1.375V
     e88:	243c      	movs	r4, #60	; 0x3c
            i2c.write(i2c_addr[ii],0x75,0x60);			//Power-up ADC and PLL by I2C write into P0_R117 
     e8a:	2360      	movs	r3, #96	; 0x60
     e8c:	2275      	movs	r2, #117	; 0x75
     e8e:	214c      	movs	r1, #76	; 0x4c
     e90:	a801      	add	r0, sp, #4
     e92:	f8df 80ec 	ldr.w	r8, [pc, #236]	; f80 <adc_init()+0x1b0>
     e96:	1cef      	adds	r7, r5, #3
     e98:	4e35      	ldr	r6, [pc, #212]	; (f70 <adc_init()+0x1a0>)
     e9a:	f000 fffd 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x00); // 0: 2.75V; 1: 2.5V; 2: 1.375V
     e9e:	2300      	movs	r3, #0
     ea0:	223b      	movs	r2, #59	; 0x3b
     ea2:	214c      	movs	r1, #76	; 0x4c
     ea4:	a801      	add	r0, sp, #4
     ea6:	f000 fff7 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0; jj<4; jj++)
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     eaa:	4622      	mov	r2, r4
     eac:	2388      	movs	r3, #136	; 0x88
     eae:	214c      	movs	r1, #76	; 0x4c
     eb0:	a801      	add	r0, sp, #4
     eb2:	f000 fff1 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     eb6:	f8b8 3000 	ldrh.w	r3, [r8]
     eba:	1c62      	adds	r2, r4, #1
     ebc:	214c      	movs	r1, #76	; 0x4c
     ebe:	b2db      	uxtb	r3, r3
     ec0:	a801      	add	r0, sp, #4
     ec2:	b2d2      	uxtb	r2, r2
     ec4:	f000 ffe8 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
     ec8:	8833      	ldrh	r3, [r6, #0]
     eca:	1ca2      	adds	r2, r4, #2
     ecc:	214c      	movs	r1, #76	; 0x4c
     ece:	3b37      	subs	r3, #55	; 0x37
     ed0:	a801      	add	r0, sp, #4
     ed2:	b2d2      	uxtb	r2, r2
     ed4:	b2db      	uxtb	r3, r3
     ed6:	f000 ffdf 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
     eda:	1ce2      	adds	r2, r4, #3
     edc:	2380      	movs	r3, #128	; 0x80
     ede:	214c      	movs	r1, #76	; 0x4c
     ee0:	b2d2      	uxtb	r2, r2
     ee2:	a801      	add	r0, sp, #4
     ee4:	f000 ffd8 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
     ee8:	1d22      	adds	r2, r4, #4
     eea:	2300      	movs	r3, #0
     eec:	214c      	movs	r1, #76	; 0x4c
     eee:	b2d2      	uxtb	r2, r2
     ef0:	a801      	add	r0, sp, #4
     ef2:	f000 ffd1 	bl	1e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
     ef6:	42bd      	cmp	r5, r7
     ef8:	d002      	beq.n	f00 <adc_init()+0x130>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     efa:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     efe:	e7d4      	b.n	eaa <adc_init()+0xda>
     f00:	2106      	movs	r1, #6
     f02:	481c      	ldr	r0, [pc, #112]	; (f74 <adc_init()+0x1a4>)
     f04:	f00e f9a2 	bl	f24c <usb_serial_write>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
     f08:	2215      	movs	r2, #21
     f0a:	214c      	movs	r1, #76	; 0x4c
     f0c:	a801      	add	r0, sp, #4
     f0e:	f000 ff89 	bl	1e24 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f12:	2300      	movs	r3, #0
     f14:	4601      	mov	r1, r0
     f16:	2210      	movs	r2, #16
     f18:	4812      	ldr	r0, [pc, #72]	; (f64 <adc_init()+0x194>)
     f1a:	f00b fe39 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     f1e:	4811      	ldr	r0, [pc, #68]	; (f64 <adc_init()+0x194>)
     f20:	f00b fe0c 	bl	cb3c <Print::println()>
     f24:	2106      	movs	r1, #6
     f26:	4814      	ldr	r0, [pc, #80]	; (f78 <adc_init()+0x1a8>)
     f28:	f00e f990 	bl	f24c <usb_serial_write>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
     f2c:	2276      	movs	r2, #118	; 0x76
     f2e:	214c      	movs	r1, #76	; 0x4c
     f30:	a801      	add	r0, sp, #4
     f32:	f000 ff77 	bl	1e24 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f36:	2300      	movs	r3, #0
     f38:	4601      	mov	r1, r0
     f3a:	2210      	movs	r2, #16
     f3c:	4809      	ldr	r0, [pc, #36]	; (f64 <adc_init()+0x194>)
     f3e:	f00b fe27 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     f42:	4808      	ldr	r0, [pc, #32]	; (f64 <adc_init()+0x194>)
     f44:	f00b fdfa 	bl	cb3c <Print::println()>
            
        }
    }
     f48:	b002      	add	sp, #8
     f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
     f4e:	490b      	ldr	r1, [pc, #44]	; (f7c <adc_init()+0x1ac>)
     f50:	4804      	ldr	r0, [pc, #16]	; (f64 <adc_init()+0x194>)
     f52:	f00b fe0f 	bl	cb74 <Print::printf(char const*, ...)>
     f56:	e769      	b.n	e2c <adc_init()+0x5c>
     f58:	000186a0 	.word	0x000186a0
     f5c:	20008acc 	.word	0x20008acc
     f60:	20000794 	.word	0x20000794
     f64:	20008abc 	.word	0x20008abc
     f68:	20000984 	.word	0x20000984
     f6c:	20000980 	.word	0x20000980
     f70:	2002938c 	.word	0x2002938c
     f74:	200007b8 	.word	0x200007b8
     f78:	200007c0 	.word	0x200007c0
     f7c:	200007a0 	.word	0x200007a0
     f80:	20009482 	.word	0x20009482

00000f84 <compress(void*)>:
int32_t tempData0[NCH];

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
     f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f88:	b083      	sub	sp, #12
     f8a:	4604      	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
     f8c:	f00c fe52 	bl	dc34 <rtc_get>
     f90:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
     f92:	f00c f92b 	bl	d1ec <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy reference (first sample of all channels)
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     f96:	49a1      	ldr	r1, [pc, #644]	; (121c <compress(void*)+0x298>)
     f98:	6822      	ldr	r2, [r4, #0]
     f9a:	4623      	mov	r3, r4
     f9c:	680d      	ldr	r5, [r1, #0]
     f9e:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
     fa2:	499f      	ldr	r1, [pc, #636]	; (1220 <compress(void*)+0x29c>)
  t1 = micros();
     fa4:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NCH; ii++) tempData0[ii] = tempDatai[ii] = din[ii];
     fa6:	602a      	str	r2, [r5, #0]
     fa8:	462c      	mov	r4, r5
     faa:	600a      	str	r2, [r1, #0]
  
  //differentiate (equiv 6 dB/Octave HP filter)
  for (int  ii = NCH; ii < NSAMP; ii++) tempDatai[ii] = (din[ii] - din[ii - NCH]);
     fac:	4629      	mov	r1, r5
     fae:	4618      	mov	r0, r3
     fb0:	3304      	adds	r3, #4
     fb2:	e9d0 0200 	ldrd	r0, r2, [r0]
     fb6:	429e      	cmp	r6, r3
     fb8:	eba2 0200 	sub.w	r2, r2, r0
     fbc:	f844 2f04 	str.w	r2, [r4, #4]!
     fc0:	d1f5      	bne.n	fae <compress(void*)+0x2a>
     fc2:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc

  // find maximum in filtered data
  int32_t mx = 0;
     fc6:	2200      	movs	r2, #0
  for (int ii = NCH; ii < NSAMP; ii++)
  {
    int32_t dd =  tempDatai[ii];
     fc8:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
     fcc:	2b00      	cmp	r3, #0
     fce:	bfb8      	it	lt
     fd0:	425b      	neglt	r3, r3
     fd2:	429a      	cmp	r2, r3
     fd4:	bfb8      	it	lt
     fd6:	461a      	movlt	r2, r3
  for (int ii = NCH; ii < NSAMP; ii++)
     fd8:	4281      	cmp	r1, r0
     fda:	d1f5      	bne.n	fc8 <compress(void*)+0x44>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
     fdc:	2702      	movs	r7, #2
     fde:	2101      	movs	r1, #1
     fe0:	e003      	b.n	fea <compress(void*)+0x66>
     fe2:	3701      	adds	r7, #1
     fe4:	2f18      	cmp	r7, #24
     fe6:	f000 810f 	beq.w	1208 <compress(void*)+0x284>
     fea:	1e7c      	subs	r4, r7, #1
     fec:	fa01 f304 	lsl.w	r3, r1, r4
     ff0:	4293      	cmp	r3, r2
     ff2:	ddf6      	ble.n	fe2 <compress(void*)+0x5e>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NSAMP*nb) / MBIT;
     ff4:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
     ff8:	40b9      	lsls	r1, r7
  int ndat = NH+NCH + ncmp;
     ffa:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
     ffe:	1e48      	subs	r0, r1, #1
  int ndat = NH+NCH + ncmp;
    1000:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCH;
  *iptr++ = NCH+ncmp; // number of data after header
    1002:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
    1006:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
    100a:	4986      	ldr	r1, [pc, #536]	; (1224 <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
    100c:	4d86      	ldr	r5, [pc, #536]	; (1228 <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
    100e:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
    1012:	3201      	adds	r2, #1
    1014:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    1018:	682a      	ldr	r2, [r5, #0]
    101a:	4c84      	ldr	r4, [pc, #528]	; (122c <compress(void*)+0x2a8>)
    101c:	42ba      	cmp	r2, r7
    101e:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    1022:	46a3      	mov	fp, r4
    1024:	4622      	mov	r2, r4
    1026:	bf38      	it	cc
    1028:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCH; ii < NSAMP; ii++) { tempData[ii] &= (uint32_t)msk; }
    102a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    102e:	4001      	ands	r1, r0
    1030:	42b2      	cmp	r2, r6
    1032:	6011      	str	r1, [r2, #0]
    1034:	d1f9      	bne.n	102a <compress(void*)+0xa6>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    1036:	4d7e      	ldr	r5, [pc, #504]	; (1230 <compress(void*)+0x2ac>)
    1038:	f44f 7200 	mov.w	r2, #512	; 0x200
    103c:	2100      	movs	r1, #0
    103e:	9300      	str	r3, [sp, #0]
    1040:	4628      	mov	r0, r5
    1042:	f010 fc11 	bl	11868 <memset>
  *iptr++ = nb | shift<<16;
    1046:	4a7b      	ldr	r2, [pc, #492]	; (1234 <compress(void*)+0x2b0>)
  *iptr++ = NCH+ncmp; // number of data after header
    1048:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    104a:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
    104c:	8812      	ldrh	r2, [r2, #0]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    104e:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1052:	2007      	movs	r0, #7
  *iptr++ = NCH+ncmp; // number of data after header
    1054:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
    1056:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    105a:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    105c:	f8db 2000 	ldr.w	r2, [fp]
    1060:	f8cb 1000 	str.w	r1, [fp]
    1064:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
    1066:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    106a:	602a      	str	r2, [r5, #0]
  *iptr++ = NCH;
    106c:	2201      	movs	r2, #1
  *iptr++ = t1;
    106e:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCH;
    1072:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NSAMP; ii ++)
    1074:	e00a      	b.n	108c <compress(void*)+0x108>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    1076:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
    107a:	4694      	mov	ip, r2
    107c:	ea41 010e 	orr.w	r1, r1, lr
    1080:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NSAMP; ii ++)
    1084:	42a6      	cmp	r6, r4
    1086:	d018      	beq.n	10ba <compress(void*)+0x136>
      {   outData[kk] |= (tempData[ii] << nx);
    1088:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
    108c:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
    1090:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
    1092:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
    1096:	dcee      	bgt.n	1076 <compress(void*)+0xf2>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    1098:	eba7 0e0c 	sub.w	lr, r7, ip
    109c:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
    10a0:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
    10a4:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
    10a8:	d12f      	bne.n	110a <compress(void*)+0x186>
      {   outData[kk++] |= tempData[ii];
    10aa:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NSAMP; ii ++)
    10ac:	42a6      	cmp	r6, r4
          nx=MBIT;
    10ae:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
    10b2:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    10b6:	4648      	mov	r0, r9
  for (int ii = 0; ii < NSAMP; ii ++)
    10b8:	d1e6      	bne.n	1088 <compress(void*)+0x104>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBLOCK)
    10ba:	4e5f      	ldr	r6, [pc, #380]	; (1238 <compress(void*)+0x2b4>)
    10bc:	6834      	ldr	r4, [r6, #0]
    10be:	eb04 0208 	add.w	r2, r4, r8
    10c2:	2a80      	cmp	r2, #128	; 0x80
    10c4:	dc2d      	bgt.n	1122 <compress(void*)+0x19e>
    10c6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    10ca:	4a5c      	ldr	r2, [pc, #368]	; (123c <compress(void*)+0x2b8>)
    10cc:	4858      	ldr	r0, [pc, #352]	; (1230 <compress(void*)+0x2ac>)
    10ce:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
    10d2:	4423      	add	r3, r4
    10d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    10d8:	2300      	movs	r3, #0
    10da:	e001      	b.n	10e0 <compress(void*)+0x15c>
    10dc:	f850 1f04 	ldr.w	r1, [r0, #4]!
    10e0:	3301      	adds	r3, #1
    10e2:	f842 1f04 	str.w	r1, [r2, #4]!
    10e6:	4543      	cmp	r3, r8
    10e8:	dbf8      	blt.n	10dc <compress(void*)+0x158>
    10ea:	f1b8 0f00 	cmp.w	r8, #0
    10ee:	f108 33ff 	add.w	r3, r8, #4294967295
    10f2:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
    10f6:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    10fa:	bfd8      	it	le
    10fc:	2300      	movle	r3, #0
    10fe:	4423      	add	r3, r4
    1100:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    1102:	4638      	mov	r0, r7
    1104:	b003      	add	sp, #12
    1106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    110a:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
    110e:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    1112:	ea4e 0202 	orr.w	r2, lr, r2
    1116:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    111a:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
    111c:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
    1120:	e7b0      	b.n	1084 <compress(void*)+0x100>
  else if ((nout + NH) > NBLOCK) //avoid partial header (special case)
    1122:	2c7a      	cmp	r4, #122	; 0x7a
    1124:	dd22      	ble.n	116c <compress(void*)+0x1e8>
      while(nout<NBLOCK) dout[nout++] = 0; // fill rest of block with zero
    1126:	2c7f      	cmp	r4, #127	; 0x7f
    1128:	dc0a      	bgt.n	1140 <compress(void*)+0x1bc>
    112a:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
    112e:	4843      	ldr	r0, [pc, #268]	; (123c <compress(void*)+0x2b8>)
    1130:	2100      	movs	r1, #0
    1132:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1136:	0092      	lsls	r2, r2, #2
    1138:	f010 fb96 	bl	11868 <memset>
    113c:	2380      	movs	r3, #128	; 0x80
    113e:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
    1140:	483e      	ldr	r0, [pc, #248]	; (123c <compress(void*)+0x2b8>)
    1142:	f003 fb39 	bl	47b8 <pushData(unsigned long*)>
    1146:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1148:	ea4f 0288 	mov.w	r2, r8, lsl #2
    114c:	4938      	ldr	r1, [pc, #224]	; (1230 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
    114e:	bf18      	it	ne
    1150:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1152:	f1b8 0f00 	cmp.w	r8, #0
    1156:	4839      	ldr	r0, [pc, #228]	; (123c <compress(void*)+0x2b8>)
    1158:	bfd8      	it	le
    115a:	2204      	movle	r2, #4
    115c:	f00c faf6 	bl	d74c <memcpy>
}
    1160:	4638      	mov	r0, r7
    1162:	f8c6 8000 	str.w	r8, [r6]
    1166:	b003      	add	sp, #12
    1168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    116c:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
    1170:	4832      	ldr	r0, [pc, #200]	; (123c <compress(void*)+0x2b8>)
    1172:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1176:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    117a:	616b      	str	r3, [r5, #20]
      while (nout < NBLOCK) dout[nout++] = outData[ii++];
    117c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    1180:	4d2b      	ldr	r5, [pc, #172]	; (1230 <compress(void*)+0x2ac>)
    1182:	4423      	add	r3, r4
    1184:	4629      	mov	r1, r5
    1186:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    118a:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    118e:	e001      	b.n	1194 <compress(void*)+0x210>
    1190:	f851 2f04 	ldr.w	r2, [r1, #4]!
    1194:	f843 2f04 	str.w	r2, [r3, #4]!
    1198:	4298      	cmp	r0, r3
    119a:	d1f9      	bne.n	1190 <compress(void*)+0x20c>
    119c:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
    119e:	4827      	ldr	r0, [pc, #156]	; (123c <compress(void*)+0x2b8>)
    11a0:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
    11a4:	6033      	str	r3, [r6, #0]
    11a6:	f003 fb07 	bl	47b8 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    11aa:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
    11ac:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
    11ae:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    11b0:	4a23      	ldr	r2, [pc, #140]	; (1240 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
    11b2:	bf18      	it	ne
    11b4:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
    11b6:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    11ba:	f8df e074 	ldr.w	lr, [pc, #116]	; 1230 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    11be:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    11c0:	f8df c078 	ldr.w	ip, [pc, #120]	; 123c <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
    11c4:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    11c6:	ea42 0203 	orr.w	r2, r2, r3
    11ca:	f04f 0306 	mov.w	r3, #6
    11ce:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    11d0:	6033      	str	r3, [r6, #0]
    11d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    11d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    11da:	e89e 0003 	ldmia.w	lr, {r0, r1}
    11de:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    11e2:	da8e      	bge.n	1102 <compress(void*)+0x17e>
    11e4:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
    11e8:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    11ec:	f10c 0008 	add.w	r0, ip, #8
    11f0:	4442      	add	r2, r8
    11f2:	0092      	lsls	r2, r2, #2
    11f4:	f00c faaa 	bl	d74c <memcpy>
    11f8:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
    11fc:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    11fe:	4443      	add	r3, r8
    1200:	6033      	str	r3, [r6, #0]
}
    1202:	b003      	add	sp, #12
    1204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1208:	2267      	movs	r2, #103	; 0x67
    120a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    120e:	f04f 0868 	mov.w	r8, #104	; 0x68
    1212:	2361      	movs	r3, #97	; 0x61
    1214:	2417      	movs	r4, #23
    1216:	9201      	str	r2, [sp, #4]
    1218:	e6f7      	b.n	100a <compress(void*)+0x86>
    121a:	bf00      	nop
    121c:	20009468 	.word	0x20009468
    1220:	2002936c 	.word	0x2002936c
    1224:	20028b84 	.word	0x20028b84
    1228:	20028b58 	.word	0x20028b58
    122c:	200282d4 	.word	0x200282d4
    1230:	20027e84 	.word	0x20027e84
    1234:	20009484 	.word	0x20009484
    1238:	20028528 	.word	0x20028528
    123c:	20027be4 	.word	0x20027be4
    1240:	ffff0000 	.word	0xffff0000

00001244 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    1244:	b570      	push	{r4, r5, r6, lr}
    1246:	b082      	sub	sp, #8
    1248:	4606      	mov	r6, r0
    124a:	4614      	mov	r4, r2
    124c:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    124e:	4668      	mov	r0, sp
    1250:	f003 fc54 	bl	4afc <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    1254:	f89d 2002 	ldrb.w	r2, [sp, #2]
    1258:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    125c:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    1260:	2a0c      	cmp	r2, #12
    1262:	bf98      	it	ls
    1264:	f1bc 0f1f 	cmpls.w	ip, #31
    1268:	d804      	bhi.n	1274 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    126a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    126e:	b29b      	uxth	r3, r3
    1270:	2b7f      	cmp	r3, #127	; 0x7f
    1272:	d920      	bls.n	12b6 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    1274:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    1278:	f89d 2005 	ldrb.w	r2, [sp, #5]
    127c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1280:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    1284:	2a17      	cmp	r2, #23
    1286:	bf98      	it	ls
    1288:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    128a:	f8a6 c000 	strh.w	ip, [r6]
    128e:	d801      	bhi.n	1294 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    1290:	293b      	cmp	r1, #59	; 0x3b
    1292:	d905      	bls.n	12a0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    1294:	2300      	movs	r3, #0
    *ms10 = 0;
    1296:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    1298:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    129a:	7022      	strb	r2, [r4, #0]
}
    129c:	b002      	add	sp, #8
    129e:	bd70      	pop	{r4, r5, r6, pc}
    12a0:	015b      	lsls	r3, r3, #5
    12a2:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    12a6:	2200      	movs	r2, #0
    12a8:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    12ac:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    12ae:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    12b0:	7022      	strb	r2, [r4, #0]
}
    12b2:	b002      	add	sp, #8
    12b4:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    12b6:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    12ba:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    12be:	fa1f fc8c 	uxth.w	ip, ip
    12c2:	e7d9      	b.n	1278 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

000012c4 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    12c4:	4b04      	ldr	r3, [pc, #16]	; (12d8 <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    12c6:	b510      	push	{r4, lr}
    12c8:	4604      	mov	r4, r0
    12ca:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    12ce:	f008 fccd 	bl	9c6c <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    12d2:	4620      	mov	r0, r4
    12d4:	bd10      	pop	{r4, pc}
    12d6:	bf00      	nop
    12d8:	20000b7c 	.word	0x20000b7c

000012dc <checkEndOfFile(short) [clone .part.0]>:

    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    12dc:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  {
    uint32_t tt = rtc_get();
    12de:	f00c fca9 	bl	dc34 <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    12e2:	4b10      	ldr	r3, [pc, #64]	; (1324 <checkEndOfFile(short) [clone .part.0]+0x48>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    12e4:	4a10      	ldr	r2, [pc, #64]	; (1328 <checkEndOfFile(short) [clone .part.0]+0x4c>)
    uint32_t dt1 = tt % t_acq;
    12e6:	6819      	ldr	r1, [r3, #0]
    12e8:	fbb0 f3f1 	udiv	r3, r0, r1
    12ec:	fb01 0313 	mls	r3, r1, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    12f0:	6811      	ldr	r1, [r2, #0]
    12f2:	428b      	cmp	r3, r1
    12f4:	d213      	bcs.n	131e <checkEndOfFile(short) [clone .part.0]+0x42>
    dta = dt1;
    12f6:	6013      	str	r3, [r2, #0]
    //
    if(state == DOCLOSE)                // in case of DOCLOSE
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    12f8:	490c      	ldr	r1, [pc, #48]	; (132c <checkEndOfFile(short) [clone .part.0]+0x50>)
    12fa:	4b0d      	ldr	r3, [pc, #52]	; (1330 <checkEndOfFile(short) [clone .part.0]+0x54>)
    12fc:	680c      	ldr	r4, [r1, #0]
    12fe:	681a      	ldr	r2, [r3, #0]
    1300:	4294      	cmp	r4, r2
    1302:	d90a      	bls.n	131a <checkEndOfFile(short) [clone .part.0]+0x3e>
    {
      uint32_t dt2 = (tt % t_rep);
    1304:	680a      	ldr	r2, [r1, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1306:	681b      	ldr	r3, [r3, #0]
      uint32_t dt2 = (tt % t_rep);
    1308:	fbb0 f1f2 	udiv	r1, r0, r2
    130c:	fb02 0011 	mls	r0, r2, r1, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1310:	4298      	cmp	r0, r3
    1312:	bf34      	ite	cc
    1314:	2003      	movcc	r0, #3
    1316:	2004      	movcs	r0, #4
    }
  }
  return state;

}
    1318:	bd10      	pop	{r4, pc}
    131a:	2003      	movs	r0, #3
    131c:	bd10      	pop	{r4, pc}
    dta = dt1;
    131e:	2002      	movs	r0, #2
    1320:	6013      	str	r3, [r2, #0]
}
    1322:	bd10      	pop	{r4, pc}
    1324:	2000945c 	.word	0x2000945c
    1328:	2002851c 	.word	0x2002851c
    132c:	20009464 	.word	0x20009464
    1330:	20009460 	.word	0x20009460

00001334 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1334:	b538      	push	{r3, r4, r5, lr}
    1336:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1338:	b149      	cbz	r1, 134e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    133a:	4608      	mov	r0, r1
    133c:	460d      	mov	r5, r1
    133e:	f010 fe7f 	bl	12040 <strlen>
    1342:	6823      	ldr	r3, [r4, #0]
    1344:	4602      	mov	r2, r0
    1346:	4629      	mov	r1, r5
    1348:	685b      	ldr	r3, [r3, #4]
    134a:	4620      	mov	r0, r4
    134c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    134e:	4620      	mov	r0, r4
    1350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1354:	f00b bbf2 	b.w	cb3c <Print::println()>

00001358 <timeStamp()>:
{
    1358:	b510      	push	{r4, lr}
    135a:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    135c:	4c0d      	ldr	r4, [pc, #52]	; (1394 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    135e:	a804      	add	r0, sp, #16
    1360:	f003 fbcc 	bl	4afc <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    1364:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    1368:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    136c:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    1370:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    1374:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1378:	e9cd 1000 	strd	r1, r0, [sp]
    137c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    1380:	4620      	mov	r0, r4
    1382:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    1386:	4904      	ldr	r1, [pc, #16]	; (1398 <timeStamp()+0x40>)
    1388:	f010 f8c8 	bl	1151c <sprintf>
}
    138c:	4620      	mov	r0, r4
    138e:	b006      	add	sp, #24
    1390:	bd10      	pop	{r4, pc}
    1392:	bf00      	nop
    1394:	2002852c 	.word	0x2002852c
    1398:	200007f8 	.word	0x200007f8

0000139c <headerInit(long, long, long, int)>:
  int nbytes=nbits/8;
    139c:	2a00      	cmp	r2, #0
{
    139e:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
    13a0:	bfb4      	ite	lt
    13a2:	1dd5      	addlt	r5, r2, #7
    13a4:	4615      	movge	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    13a6:	4c2f      	ldr	r4, [pc, #188]	; (1464 <headerInit(long, long, long, int)+0xc8>)
{
    13a8:	b083      	sub	sp, #12
  int nbytes=nbits/8;
    13aa:	10ed      	asrs	r5, r5, #3
  memcpy(wav_hdr.rId,"RIFF",4);
    13ac:	9301      	str	r3, [sp, #4]
  wav_hdr.nSamplesPerSec=fsamp;
    13ae:	61a0      	str	r0, [r4, #24]
  wav_hdr.nBlockAlign=nchan*nbytes;
    13b0:	fb11 fc05 	smulbb	ip, r1, r5
  strcpy(&wav_hdr.info[0], MAGIC);
    13b4:	4b2c      	ldr	r3, [pc, #176]	; (1468 <headerInit(long, long, long, int)+0xcc>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    13b6:	fb05 f000 	mul.w	r0, r5, r0
  wav_hdr.nBlockAlign=nchan*nbytes;
    13ba:	f8a4 c020 	strh.w	ip, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    13be:	fb01 f500 	mul.w	r5, r1, r0
  wav_hdr.nBitsPerSamples=nbits;
    13c2:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    13c4:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    13c6:	e893 0003 	ldmia.w	r3, {r0, r1}
  memcpy(wav_hdr.wId,"WAVE",4);
    13ca:	4b28      	ldr	r3, [pc, #160]	; (146c <headerInit(long, long, long, int)+0xd0>)
  strcpy(&wav_hdr.info[0], MAGIC);
    13cc:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  memcpy(wav_hdr.wId,"WAVE",4);
    13d0:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.dId,"data",4);
    13d2:	4b27      	ldr	r3, [pc, #156]	; (1470 <headerInit(long, long, long, int)+0xd4>)
  memcpy(wav_hdr.rId,"RIFF",4);
    13d4:	4927      	ldr	r1, [pc, #156]	; (1474 <headerInit(long, long, long, int)+0xd8>)
  memcpy(wav_hdr.dId,"data",4);
    13d6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  wav_hdr.rLen=512-2*4; // will be updated at closing
    13da:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  strcpy(&wav_hdr.info[0], MAGIC);
    13de:	62e0      	str	r0, [r4, #44]	; 0x2c
  memcpy(wav_hdr.rId,"RIFF",4);
    13e0:	6021      	str	r1, [r4, #0]
  wav_hdr.rLen=512-2*4; // will be updated at closing
    13e2:	6063      	str	r3, [r4, #4]
  wav_hdr.dLen = 0; // will be updated at closing
    13e4:	2300      	movs	r3, #0
  memcpy(wav_hdr.fId,"fmt ",4);
    13e6:	4824      	ldr	r0, [pc, #144]	; (1478 <headerInit(long, long, long, int)+0xdc>)
  memcpy(wav_hdr.iId,"info",4);
    13e8:	4924      	ldr	r1, [pc, #144]	; (147c <headerInit(long, long, long, int)+0xe0>)
  memcpy(wav_hdr.fId,"fmt ",4);
    13ea:	60e0      	str	r0, [r4, #12]
  wav_hdr.iLen = 512 - 13*4;
    13ec:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
  memcpy(wav_hdr.iId,"info",4);
    13f0:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen=0x10;
    13f2:	2110      	movs	r1, #16
  wav_hdr.dLen = 0; // will be updated at closing
    13f4:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    13f8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  wav_hdr.iLen = 512 - 13*4;
    13fc:	62a0      	str	r0, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    13fe:	e9c4 1304 	strd	r1, r3, [r4, #16]
  strcpy(&wav_hdr.info[4], timeStamp());
    1402:	f7ff ffa9 	bl	1358 <timeStamp()>
    1406:	4601      	mov	r1, r0
    1408:	f104 0030 	add.w	r0, r4, #48	; 0x30
    140c:	f010 fd66 	bl	11edc <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    1410:	9a01      	ldr	r2, [sp, #4]
    1412:	491b      	ldr	r1, [pc, #108]	; (1480 <headerInit(long, long, long, int)+0xe4>)
    1414:	f104 0040 	add.w	r0, r4, #64	; 0x40
    1418:	f010 f880 	bl	1151c <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    141c:	f003 f9b4 	bl	4788 <getStore()>
    1420:	6805      	ldr	r5, [r0, #0]
    1422:	6841      	ldr	r1, [r0, #4]
    1424:	6882      	ldr	r2, [r0, #8]
    1426:	68c3      	ldr	r3, [r0, #12]
    1428:	f8c4 504a 	str.w	r5, [r4, #74]	; 0x4a
    142c:	f8c4 104e 	str.w	r1, [r4, #78]	; 0x4e
    1430:	f8c4 2052 	str.w	r2, [r4, #82]	; 0x52
    1434:	f8c4 3056 	str.w	r3, [r4, #86]	; 0x56
    1438:	6905      	ldr	r5, [r0, #16]
    143a:	6982      	ldr	r2, [r0, #24]
    143c:	6941      	ldr	r1, [r0, #20]
    143e:	69c3      	ldr	r3, [r0, #28]
    1440:	f8c4 505a 	str.w	r5, [r4, #90]	; 0x5a
  strcpy(&wav_hdr.info[62]," end");
    1444:	4d0f      	ldr	r5, [pc, #60]	; (1484 <headerInit(long, long, long, int)+0xe8>)
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    1446:	f8c4 2062 	str.w	r2, [r4, #98]	; 0x62
  strcpy(&wav_hdr.info[62]," end");
    144a:	6828      	ldr	r0, [r5, #0]
    144c:	792a      	ldrb	r2, [r5, #4]
    144e:	f8c4 006a 	str.w	r0, [r4, #106]	; 0x6a
}
    1452:	4620      	mov	r0, r4
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    1454:	f8c4 105e 	str.w	r1, [r4, #94]	; 0x5e
    1458:	f8c4 3066 	str.w	r3, [r4, #102]	; 0x66
  strcpy(&wav_hdr.info[62]," end");
    145c:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
}
    1460:	b003      	add	sp, #12
    1462:	bd30      	pop	{r4, r5, pc}
    1464:	20028084 	.word	0x20028084
    1468:	20000418 	.word	0x20000418
    146c:	45564157 	.word	0x45564157
    1470:	61746164 	.word	0x61746164
    1474:	46464952 	.word	0x46464952
    1478:	20746d66 	.word	0x20746d66
    147c:	6f666e69 	.word	0x6f666e69
    1480:	20000420 	.word	0x20000420
    1484:	20000428 	.word	0x20000428

00001488 <writeHeader(char*)>:
{ 
    1488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    148c:	4c21      	ldr	r4, [pc, #132]	; (1514 <writeHeader(char*)+0x8c>)
    148e:	4607      	mov	r7, r0
    1490:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1492:	b373      	cbz	r3, 14f2 <writeHeader(char*)+0x6a>
    1494:	695e      	ldr	r6, [r3, #20]
    1496:	2500      	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    1498:	4632      	mov	r2, r6
    149a:	462b      	mov	r3, r5
    149c:	491e      	ldr	r1, [pc, #120]	; (1518 <writeHeader(char*)+0x90>)
    149e:	481f      	ldr	r0, [pc, #124]	; (151c <writeHeader(char*)+0x94>)
    14a0:	f00b fb68 	bl	cb74 <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    14a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    14a6:	b1e0      	cbz	r0, 14e2 <writeHeader(char*)+0x5a>
    14a8:	2100      	movs	r1, #0
    14aa:	f007 f8ad 	bl	8608 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    14ae:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    14b0:	b170      	cbz	r0, 14d0 <writeHeader(char*)+0x48>
    14b2:	4639      	mov	r1, r7
    14b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    14b8:	f007 f9dc 	bl	8874 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    14bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    14be:	b1e8      	cbz	r0, 14fc <writeHeader(char*)+0x74>
    14c0:	b10d      	cbz	r5, 14c6 <writeHeader(char*)+0x3e>
}
    14c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14c6:	4631      	mov	r1, r6
    14c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    14cc:	f007 b89c 	b.w	8608 <FatFile::seekSet(unsigned long)>
    14d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    14d2:	2800      	cmp	r0, #0
    14d4:	d0f5      	beq.n	14c2 <writeHeader(char*)+0x3a>
    14d6:	4639      	mov	r1, r7
    14d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    14dc:	f005 feba 	bl	7254 <ExFatFile::write(void const*, unsigned int)>
    14e0:	e7ec      	b.n	14bc <writeHeader(char*)+0x34>
    14e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    14e4:	2800      	cmp	r0, #0
    14e6:	d0ec      	beq.n	14c2 <writeHeader(char*)+0x3a>
    14e8:	2200      	movs	r2, #0
    14ea:	2300      	movs	r3, #0
    14ec:	f005 f882 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    14f0:	e7dd      	b.n	14ae <writeHeader(char*)+0x26>
    14f2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    14f4:	b15b      	cbz	r3, 150e <writeHeader(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    14f6:	e9d3 6500 	ldrd	r6, r5, [r3]
    14fa:	e7cd      	b.n	1498 <writeHeader(char*)+0x10>
    14fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    14fe:	2800      	cmp	r0, #0
    1500:	d0df      	beq.n	14c2 <writeHeader(char*)+0x3a>
    1502:	4632      	mov	r2, r6
    1504:	462b      	mov	r3, r5
    1506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    150a:	f005 b873 	b.w	65f4 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    150e:	461e      	mov	r6, r3
    1510:	461d      	mov	r5, r3
    1512:	e7c1      	b.n	1498 <writeHeader(char*)+0x10>
    1514:	20028ae4 	.word	0x20028ae4
    1518:	200004c8 	.word	0x200004c8
    151c:	20008abc 	.word	0x20008abc

00001520 <makeHeader(long*)>:
{
    1520:	b530      	push	{r4, r5, lr}
    1522:	b089      	sub	sp, #36	; 0x24
    1524:	4604      	mov	r4, r0
    rtc_get_datetime(&t);
    1526:	a806      	add	r0, sp, #24
    1528:	f003 fae8 	bl	4afc <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    152c:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    1530:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1534:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1538:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    153c:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1540:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1544:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1548:	9000      	str	r0, [sp, #0]
    154a:	4620      	mov	r0, r4
    154c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1550:	4a16      	ldr	r2, [pc, #88]	; (15ac <makeHeader(long*)+0x8c>)
    1552:	4917      	ldr	r1, [pc, #92]	; (15b0 <makeHeader(long*)+0x90>)
    1554:	f00f ffe2 	bl	1151c <sprintf>
    header[7] = fsamp;
    1558:	4916      	ldr	r1, [pc, #88]	; (15b4 <makeHeader(long*)+0x94>)
    header[9] = t_acq;
    155a:	4b17      	ldr	r3, [pc, #92]	; (15b8 <makeHeader(long*)+0x98>)
    header[7] = fsamp;
    155c:	680d      	ldr	r5, [r1, #0]
    header[9] = t_acq;
    155e:	681b      	ldr	r3, [r3, #0]
    header[10] = t_on;
    1560:	4816      	ldr	r0, [pc, #88]	; (15bc <makeHeader(long*)+0x9c>)
    header[9] = t_acq;
    1562:	6263      	str	r3, [r4, #36]	; 0x24
    header[11] = t_rep;
    1564:	4a16      	ldr	r2, [pc, #88]	; (15c0 <makeHeader(long*)+0xa0>)
    header[6] = SerNum;      // serial number
    1566:	4917      	ldr	r1, [pc, #92]	; (15c4 <makeHeader(long*)+0xa4>)
    header[12] = proc;
    1568:	4b17      	ldr	r3, [pc, #92]	; (15c8 <makeHeader(long*)+0xa8>)
    header[10] = t_on;
    156a:	6800      	ldr	r0, [r0, #0]
    header[6] = SerNum;      // serial number
    156c:	6809      	ldr	r1, [r1, #0]
    header[11] = t_rep;
    156e:	6812      	ldr	r2, [r2, #0]
    header[12] = proc;
    1570:	881b      	ldrh	r3, [r3, #0]
    header[6] = SerNum;      // serial number
    1572:	61a1      	str	r1, [r4, #24]
    header[12] = proc;
    1574:	b21b      	sxth	r3, r3
    header[14] = again;
    1576:	4915      	ldr	r1, [pc, #84]	; (15cc <makeHeader(long*)+0xac>)
    header[11] = t_rep;
    1578:	62e2      	str	r2, [r4, #44]	; 0x2c
    header[13] = shift;
    157a:	4a15      	ldr	r2, [pc, #84]	; (15d0 <makeHeader(long*)+0xb0>)
    header[12] = proc;
    157c:	6323      	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    157e:	8812      	ldrh	r2, [r2, #0]
    header[14] = again;
    1580:	880b      	ldrh	r3, [r1, #0]
    header[15] = dgain;
    1582:	4914      	ldr	r1, [pc, #80]	; (15d4 <makeHeader(long*)+0xb4>)
    header[13] = shift;
    1584:	b212      	sxth	r2, r2
    header[14] = again;
    1586:	b21b      	sxth	r3, r3
    header[7] = fsamp;
    1588:	61e5      	str	r5, [r4, #28]
    header[10] = t_on;
    158a:	62a0      	str	r0, [r4, #40]	; 0x28
    header[5] = 20;          // SW version
    158c:	2514      	movs	r5, #20
    header[14] = again;
    158e:	63a3      	str	r3, [r4, #56]	; 0x38
    header[8] = NCH;
    1590:	2001      	movs	r0, #1
    header[15] = dgain;
    1592:	880b      	ldrh	r3, [r1, #0]
    header[13] = shift;
    1594:	6362      	str	r2, [r4, #52]	; 0x34
    header[127]=0x55555555;
    1596:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[15] = dgain;
    159a:	b21b      	sxth	r3, r3
    header[5] = 20;          // SW version
    159c:	6165      	str	r5, [r4, #20]
    header[8] = NCH;
    159e:	6220      	str	r0, [r4, #32]
    header[127]=0x55555555;
    15a0:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
    header[15] = dgain;
    15a4:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    15a6:	b009      	add	sp, #36	; 0x24
    15a8:	bd30      	pop	{r4, r5, pc}
    15aa:	bf00      	nop
    15ac:	20000418 	.word	0x20000418
    15b0:	20000430 	.word	0x20000430
    15b4:	2000943c 	.word	0x2000943c
    15b8:	2000945c 	.word	0x2000945c
    15bc:	20009460 	.word	0x20009460
    15c0:	20009464 	.word	0x20009464
    15c4:	2000c1c8 	.word	0x2000c1c8
    15c8:	20029392 	.word	0x20029392
    15cc:	20009482 	.word	0x20009482
    15d0:	20009484 	.word	0x20009484
    15d4:	2002938c 	.word	0x2002938c

000015d8 <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    15d8:	b530      	push	{r4, r5, lr}
    15da:	b087      	sub	sp, #28
    15dc:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    15de:	a804      	add	r0, sp, #16
    15e0:	f003 fa8c 	bl	4afc <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    15e4:	4915      	ldr	r1, [pc, #84]	; (163c <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    15e6:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(d==d0) return 0; // same day
    15ea:	680b      	ldr	r3, [r1, #0]
    15ec:	429a      	cmp	r2, r3
    15ee:	d022      	beq.n	1636 <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    15f0:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    15f4:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    15f8:	4b11      	ldr	r3, [pc, #68]	; (1640 <newDirectory(char*)+0x68>)
    15fa:	e9cd 5202 	strd	r5, r2, [sp, #8]
    15fe:	681b      	ldr	r3, [r3, #0]
    1600:	9001      	str	r0, [sp, #4]
    1602:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  d0=d;
    1606:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1608:	4a0e      	ldr	r2, [pc, #56]	; (1644 <newDirectory(char*)+0x6c>)
    160a:	490f      	ldr	r1, [pc, #60]	; (1648 <newDirectory(char*)+0x70>)
    160c:	9000      	str	r0, [sp, #0]
    160e:	4620      	mov	r0, r4
    1610:	f00f ff84 	bl	1151c <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    1614:	480d      	ldr	r0, [pc, #52]	; (164c <newDirectory(char*)+0x74>)
    1616:	f00b fa91 	bl	cb3c <Print::println()>
    161a:	2102      	movs	r1, #2
    161c:	480c      	ldr	r0, [pc, #48]	; (1650 <newDirectory(char*)+0x78>)
    161e:	f00d fe15 	bl	f24c <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1622:	4620      	mov	r0, r4
    1624:	f010 fd0c 	bl	12040 <strlen>
    1628:	4601      	mov	r1, r0
    162a:	4620      	mov	r0, r4
    162c:	f00d fe0e 	bl	f24c <usb_serial_write>
          return 1;   // have new directory
    1630:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    1632:	b007      	add	sp, #28
    1634:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    1636:	2000      	movs	r0, #0
}
    1638:	b007      	add	sp, #28
    163a:	bd30      	pop	{r4, r5, pc}
    163c:	20008e8c 	.word	0x20008e8c
    1640:	2000c1c8 	.word	0x2000c1c8
    1644:	200004d4 	.word	0x200004d4
    1648:	200004d8 	.word	0x200004d8
    164c:	20008abc 	.word	0x20008abc
    1650:	200007bc 	.word	0x200007bc

00001654 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1654:	b510      	push	{r4, lr}
    1656:	b088      	sub	sp, #32
    1658:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    165a:	a806      	add	r0, sp, #24
    165c:	f003 fa4e 	bl	4afc <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1660:	4b1b      	ldr	r3, [pc, #108]	; (16d0 <newFileName(char*)+0x7c>)
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1662:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    1666:	881b      	ldrh	r3, [r3, #0]
    1668:	b21b      	sxth	r3, r3
    166a:	bb23      	cbnz	r3, 16b6 <newFileName(char*)+0x62>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    166c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1670:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1674:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1678:	e9cd 3003 	strd	r3, r0, [sp, #12]
    167c:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1680:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1684:	9000      	str	r0, [sp, #0]
    1686:	4620      	mov	r0, r4
    1688:	e9cd 2101 	strd	r2, r1, [sp, #4]
    168c:	4a11      	ldr	r2, [pc, #68]	; (16d4 <newFileName(char*)+0x80>)
    168e:	4912      	ldr	r1, [pc, #72]	; (16d8 <newFileName(char*)+0x84>)
    1690:	f00f ff44 	bl	1151c <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    1694:	4811      	ldr	r0, [pc, #68]	; (16dc <newFileName(char*)+0x88>)
    1696:	f00b fa51 	bl	cb3c <Print::println()>
    169a:	2102      	movs	r1, #2
    169c:	4810      	ldr	r0, [pc, #64]	; (16e0 <newFileName(char*)+0x8c>)
    169e:	f00d fdd5 	bl	f24c <usb_serial_write>
    16a2:	4620      	mov	r0, r4
    16a4:	f010 fccc 	bl	12040 <strlen>
    16a8:	4601      	mov	r1, r0
    16aa:	4620      	mov	r0, r4
    16ac:	f00d fdce 	bl	f24c <usb_serial_write>
    return 1;
}
    16b0:	2001      	movs	r0, #1
    16b2:	b008      	add	sp, #32
    16b4:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    16b6:	f99d 101e 	ldrsb.w	r1, [sp, #30]
    16ba:	f99d 301d 	ldrsb.w	r3, [sp, #29]
    16be:	4a05      	ldr	r2, [pc, #20]	; (16d4 <newFileName(char*)+0x80>)
    16c0:	e9cd 1000 	strd	r1, r0, [sp]
    16c4:	4907      	ldr	r1, [pc, #28]	; (16e4 <newFileName(char*)+0x90>)
    16c6:	4620      	mov	r0, r4
    16c8:	f00f ff28 	bl	1151c <sprintf>
    16cc:	e7e2      	b.n	1694 <newFileName(char*)+0x40>
    16ce:	bf00      	nop
    16d0:	20029392 	.word	0x20029392
    16d4:	2000048c 	.word	0x2000048c
    16d8:	20000490 	.word	0x20000490
    16dc:	20008abc 	.word	0x20008abc
    16e0:	200007bc 	.word	0x200007bc
    16e4:	200004b4 	.word	0x200004b4

000016e8 <getAlarmTime(unsigned long)>:
#include "core_pins.h"

uint32_t getAlarmTime(uint32_t secs)
{
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    16e8:	4b2a      	ldr	r3, [pc, #168]	; (1794 <getAlarmTime(unsigned long)+0xac>)
    16ea:	492b      	ldr	r1, [pc, #172]	; (1798 <getAlarmTime(unsigned long)+0xb0>)
    16ec:	4a2b      	ldr	r2, [pc, #172]	; (179c <getAlarmTime(unsigned long)+0xb4>)
{
    16ee:	b430      	push	{r4, r5}
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    16f0:	fba3 4300 	umull	r4, r3, r3, r0
    16f4:	0c1b      	lsrs	r3, r3, #16
    16f6:	fb01 0313 	mls	r3, r1, r3, r0

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    16fa:	4929      	ldr	r1, [pc, #164]	; (17a0 <getAlarmTime(unsigned long)+0xb8>)
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    16fc:	fba2 2303 	umull	r2, r3, r2, r3
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1700:	680c      	ldr	r4, [r1, #0]
    1702:	ebb4 2fd3 	cmp.w	r4, r3, lsr #11
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1706:	ea4f 22d3 	mov.w	r2, r3, lsr #11
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    170a:	d80c      	bhi.n	1726 <getAlarmTime(unsigned long)+0x3e>
    170c:	4b25      	ldr	r3, [pc, #148]	; (17a4 <getAlarmTime(unsigned long)+0xbc>)
    170e:	681b      	ldr	r3, [r3, #0]
    1710:	4293      	cmp	r3, r2
    1712:	d908      	bls.n	1726 <getAlarmTime(unsigned long)+0x3e>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    1714:	4b24      	ldr	r3, [pc, #144]	; (17a8 <getAlarmTime(unsigned long)+0xc0>)
    1716:	681a      	ldr	r2, [r3, #0]
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	fbb0 f2f2 	udiv	r2, r0, r2
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    171e:	bc30      	pop	{r4, r5}
      secs = ((secs/t_rep)+1)*t_rep;
    1720:	fb02 3003 	mla	r0, r2, r3, r3
}
    1724:	4770      	bx	lr
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1726:	4c21      	ldr	r4, [pc, #132]	; (17ac <getAlarmTime(unsigned long)+0xc4>)
    1728:	6823      	ldr	r3, [r4, #0]
    172a:	4293      	cmp	r3, r2
    172c:	d803      	bhi.n	1736 <getAlarmTime(unsigned long)+0x4e>
    172e:	4b20      	ldr	r3, [pc, #128]	; (17b0 <getAlarmTime(unsigned long)+0xc8>)
    1730:	681b      	ldr	r3, [r3, #0]
    1732:	4293      	cmp	r3, r2
    1734:	d8ee      	bhi.n	1714 <getAlarmTime(unsigned long)+0x2c>
    uint32_t dd = secs/(24*3600); // days
    1736:	4b17      	ldr	r3, [pc, #92]	; (1794 <getAlarmTime(unsigned long)+0xac>)
    1738:	fba3 5300 	umull	r5, r3, r3, r0
    else if (hh<t_1)  // from mid-night to t_1
    173c:	680d      	ldr	r5, [r1, #0]
    173e:	4295      	cmp	r5, r2
    uint32_t dd = secs/(24*3600); // days
    1740:	ea4f 4313 	mov.w	r3, r3, lsr #16
    else if (hh<t_1)  // from mid-night to t_1
    1744:	d909      	bls.n	175a <getAlarmTime(unsigned long)+0x72>
      secs = dd*(24*3600) + t_1*3600;
    1746:	680a      	ldr	r2, [r1, #0]
    1748:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    174c:	4912      	ldr	r1, [pc, #72]	; (1798 <getAlarmTime(unsigned long)+0xb0>)
    174e:	fb00 f202 	mul.w	r2, r0, r2
    1752:	fb01 2003 	mla	r0, r1, r3, r2
}
    1756:	bc30      	pop	{r4, r5}
    1758:	4770      	bx	lr
    else if (hh>=t_2) // between the two recording periods
    175a:	4d12      	ldr	r5, [pc, #72]	; (17a4 <getAlarmTime(unsigned long)+0xbc>)
    175c:	682d      	ldr	r5, [r5, #0]
    175e:	4295      	cmp	r5, r2
    1760:	d90e      	bls.n	1780 <getAlarmTime(unsigned long)+0x98>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    1762:	4c13      	ldr	r4, [pc, #76]	; (17b0 <getAlarmTime(unsigned long)+0xc8>)
    1764:	6825      	ldr	r5, [r4, #0]
    1766:	4295      	cmp	r5, r2
    1768:	d8f5      	bhi.n	1756 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    176a:	680a      	ldr	r2, [r1, #0]
    176c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    1770:	6824      	ldr	r4, [r4, #0]
    1772:	4909      	ldr	r1, [pc, #36]	; (1798 <getAlarmTime(unsigned long)+0xb0>)
    1774:	1b12      	subs	r2, r2, r4
    1776:	fb00 1202 	mla	r2, r0, r2, r1
    177a:	fb01 2003 	mla	r0, r1, r3, r2
    177e:	e7ea      	b.n	1756 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + t_3*3600;
    1780:	6822      	ldr	r2, [r4, #0]
    1782:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    1786:	4904      	ldr	r1, [pc, #16]	; (1798 <getAlarmTime(unsigned long)+0xb0>)
    1788:	fb00 f202 	mul.w	r2, r0, r2
}
    178c:	bc30      	pop	{r4, r5}
      secs = dd*(24*3600) + t_3*3600;
    178e:	fb01 2003 	mla	r0, r1, r3, r2
}
    1792:	4770      	bx	lr
    1794:	c22e4507 	.word	0xc22e4507
    1798:	00015180 	.word	0x00015180
    179c:	91a2b3c5 	.word	0x91a2b3c5
    17a0:	20029364 	.word	0x20029364
    17a4:	20009450 	.word	0x20009450
    17a8:	20009464 	.word	0x20009464
    17ac:	20009454 	.word	0x20009454
    17b0:	20009458 	.word	0x20009458

000017b4 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR; // save control register
    17b4:	4a19      	ldr	r2, [pc, #100]	; (181c <do_hibernate(unsigned long)+0x68>)
{
    17b6:	b538      	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
    17b8:	6b95      	ldr	r5, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
    17ba:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    17bc:	f043 0301 	orr.w	r3, r3, #1
    17c0:	64d3      	str	r3, [r2, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    17c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    17c4:	f023 0302 	bic.w	r3, r3, #2
    17c8:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    17ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
    17cc:	0799      	lsls	r1, r3, #30
    17ce:	d4fc      	bmi.n	17ca <do_hibernate(unsigned long)+0x16>

    __disable_irq();
    17d0:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    17d2:	4c12      	ldr	r4, [pc, #72]	; (181c <do_hibernate(unsigned long)+0x68>)
    17d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    17d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    17d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    17da:	6d21      	ldr	r1, [r4, #80]	; 0x50
    17dc:	429a      	cmp	r2, r3
    17de:	d1f9      	bne.n	17d4 <do_hibernate(unsigned long)+0x20>
    17e0:	4281      	cmp	r1, r0
    17e2:	d1f7      	bne.n	17d4 <do_hibernate(unsigned long)+0x20>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    17e4:	0bdb      	lsrs	r3, r3, #15

    //set alarm
    secs = getAlarmTime(secs);
    17e6:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    17ea:	f7ff ff7d 	bl	16e8 <getAlarmTime(unsigned long)>

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    17ee:	4a0b      	ldr	r2, [pc, #44]	; (181c <do_hibernate(unsigned long)+0x68>)
    SNVS_LPTAR = secs;
    17f0:	65a0      	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    17f2:	6d93      	ldr	r3, [r2, #88]	; 0x58
    17f4:	4283      	cmp	r3, r0
    17f6:	d1fc      	bne.n	17f2 <do_hibernate(unsigned long)+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    17f8:	f045 0502 	orr.w	r5, r5, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    17fc:	4c07      	ldr	r4, [pc, #28]	; (181c <do_hibernate(unsigned long)+0x68>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    17fe:	6395      	str	r5, [r2, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    1800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1802:	079b      	lsls	r3, r3, #30
    1804:	d5fc      	bpl.n	1800 <do_hibernate(unsigned long)+0x4c>

    __enable_irq();
    1806:	b662      	cpsie	i
  
    // shutdown acq board
    acqPower(LOW);
    1808:	2000      	movs	r0, #0
    180a:	f7ff fadb 	bl	dc4 <acqPower(int)>
    //
    SNVS_LPCR |= (1 << 6); // turn off power
    180e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1814:	63a3      	str	r3, [r4, #56]	; 0x38
    while (1) asm("wfi");  
    1816:	bf30      	wfi
    1818:	e7fd      	b.n	1816 <do_hibernate(unsigned long)+0x62>
    181a:	bf00      	nop
    181c:	400d4000 	.word	0x400d4000

00001820 <storeData(short)>:
{
    1820:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    1822:	4604      	mov	r4, r0
{
    1824:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    1826:	2800      	cmp	r0, #0
    1828:	d049      	beq.n	18be <storeData(short)+0x9e>
    if(status==OPENED) // file is open: write first record (header)
    182a:	2801      	cmp	r0, #1
    182c:	d009      	beq.n	1842 <storeData(short)+0x22>
    if(status==RUNNING) // file is open, header written: store data records
    182e:	2802      	cmp	r0, #2
    1830:	f000 80d3 	beq.w	19da <storeData(short)+0x1ba>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1834:	1ec3      	subs	r3, r0, #3
    1836:	b29b      	uxth	r3, r3
    1838:	2b02      	cmp	r3, #2
    183a:	f240 8108 	bls.w	1a4e <storeData(short)+0x22e>
}
    183e:	b014      	add	sp, #80	; 0x50
    1840:	bd70      	pop	{r4, r5, r6, pc}
    1842:	4da9      	ldr	r5, [pc, #676]	; (1ae8 <storeData(short)+0x2c8>)
        if(proc==0)
    1844:	4ba9      	ldr	r3, [pc, #676]	; (1aec <storeData(short)+0x2cc>)
    {   nbuf=0;
    1846:	2200      	movs	r2, #0
    1848:	4ea9      	ldr	r6, [pc, #676]	; (1af0 <storeData(short)+0x2d0>)
        if(proc==0)
    184a:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    184c:	6032      	str	r2, [r6, #0]
        if(proc==0)
    184e:	b21b      	sxth	r3, r3
    1850:	2b00      	cmp	r3, #0
    1852:	f040 8088 	bne.w	1966 <storeData(short)+0x146>
          hdr = headerInit(fsamp, NCH, NBITS, SerNum);
    1856:	49a7      	ldr	r1, [pc, #668]	; (1af4 <storeData(short)+0x2d4>)
    1858:	2218      	movs	r2, #24
    185a:	4ba7      	ldr	r3, [pc, #668]	; (1af8 <storeData(short)+0x2d8>)
    185c:	6808      	ldr	r0, [r1, #0]
    185e:	2101      	movs	r1, #1
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	f7ff fd9b 	bl	139c <headerInit(long, long, long, int)>
    1866:	4601      	mov	r1, r0
    return m_fFile ? m_fFile->write(buf, count) :
    1868:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    186a:	2800      	cmp	r0, #0
    186c:	f000 8083 	beq.w	1976 <storeData(short)+0x156>
    1870:	f44f 7200 	mov.w	r2, #512	; 0x200
    1874:	f006 fffe 	bl	8874 <FatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1878:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    187c:	f0c0 8085 	bcc.w	198a <storeData(short)+0x16a>
    1880:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1882:	2800      	cmp	r0, #0
    1884:	f000 80a0 	beq.w	19c8 <storeData(short)+0x1a8>
    1888:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    188c:	499b      	ldr	r1, [pc, #620]	; (1afc <storeData(short)+0x2dc>)
    188e:	f006 fff1 	bl	8874 <FatFile::write(void const*, unsigned int)>
    1892:	4604      	mov	r4, r0
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1894:	f5b4 5fc0 	cmp.w	r4, #6144	; 0x1800
    1898:	f0c0 80b1 	bcc.w	19fe <storeData(short)+0x1de>
        disk_count++;
    189c:	4998      	ldr	r1, [pc, #608]	; (1b00 <storeData(short)+0x2e0>)
          nbuf++;
    189e:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    18a0:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    18a2:	3301      	adds	r3, #1
        disk_count++;
    18a4:	3201      	adds	r2, #1
          nbuf++;
    18a6:	6033      	str	r3, [r6, #0]
        disk_count++;
    18a8:	600a      	str	r2, [r1, #0]
    18aa:	4996      	ldr	r1, [pc, #600]	; (1b04 <storeData(short)+0x2e4>)
        if((nbuf % 1000)==0 ) file.flush();
    18ac:	4a96      	ldr	r2, [pc, #600]	; (1b08 <storeData(short)+0x2e8>)
        disk_count++;
    18ae:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    18b2:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    18b6:	d27f      	bcs.n	19b8 <storeData(short)+0x198>
    18b8:	2002      	movs	r0, #2
}
    18ba:	b014      	add	sp, #80	; 0x50
    18bc:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    18be:	4893      	ldr	r0, [pc, #588]	; (1b0c <storeData(short)+0x2ec>)
    18c0:	f7ff fe8a 	bl	15d8 <newDirectory(char*)>
    18c4:	b1e8      	cbz	r0, 1902 <storeData(short)+0xe2>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    18c6:	4d92      	ldr	r5, [pc, #584]	; (1b10 <storeData(short)+0x2f0>)
    18c8:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    18ca:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    18ce:	2a00      	cmp	r2, #0
    18d0:	f000 80c5 	beq.w	1a5e <storeData(short)+0x23e>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    18d4:	466e      	mov	r6, sp
    18d6:	4611      	mov	r1, r2
    18d8:	4623      	mov	r3, r4
    18da:	4a8c      	ldr	r2, [pc, #560]	; (1b0c <storeData(short)+0x2ec>)
    18dc:	4630      	mov	r0, r6
  FatFile() {}
    18de:	9400      	str	r4, [sp, #0]
    18e0:	f006 fbf6 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    18e4:	2800      	cmp	r0, #0
    18e6:	f000 80c7 	beq.w	1a78 <storeData(short)+0x258>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    18ea:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    18ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    18f0:	2800      	cmp	r0, #0
    18f2:	f000 80d9 	beq.w	1aa8 <storeData(short)+0x288>
    18f6:	4985      	ldr	r1, [pc, #532]	; (1b0c <storeData(short)+0x2ec>)
    18f8:	f008 f936 	bl	9b68 <FatVolume::chdir(char const*)>
    18fc:	2800      	cmp	r0, #0
    18fe:	f000 80dc 	beq.w	1aba <storeData(short)+0x29a>
        if(newFileName(fileName))
    1902:	4884      	ldr	r0, [pc, #528]	; (1b14 <storeData(short)+0x2f4>)
    1904:	f7ff fea6 	bl	1654 <newFileName(char*)>
    1908:	2800      	cmp	r0, #0
    190a:	f000 812e 	beq.w	1b6a <storeData(short)+0x34a>
            file = sd->open(fileName, FILE_WRITE); 
    190e:	4980      	ldr	r1, [pc, #512]	; (1b10 <storeData(short)+0x2f0>)
    1910:	f244 2302 	movw	r3, #16898	; 0x4202
    1914:	4a7f      	ldr	r2, [pc, #508]	; (1b14 <storeData(short)+0x2f4>)
    1916:	4668      	mov	r0, sp
    1918:	6809      	ldr	r1, [r1, #0]
    191a:	f008 fac1 	bl	9ea0 <FsVolume::open(char const*, int)>
class Print
    191e:	4d72      	ldr	r5, [pc, #456]	; (1ae8 <storeData(short)+0x2c8>)
class Stream : public Print
    1920:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1924:	f105 0010 	add.w	r0, r5, #16
    1928:	732b      	strb	r3, [r5, #12]
    192a:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    192e:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1932:	a904      	add	r1, sp, #16
    1934:	f008 f940 	bl	9bb8 <FsBaseFile::operator=(FsBaseFile const&)>
    1938:	4b77      	ldr	r3, [pc, #476]	; (1b18 <storeData(short)+0x2f8>)
  ~FsBaseFile() {close();}
    193a:	a804      	add	r0, sp, #16
    193c:	9300      	str	r3, [sp, #0]
    193e:	f008 f995 	bl	9c6c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1942:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1944:	2b00      	cmp	r3, #0
    1946:	f47f af7d 	bne.w	1844 <storeData(short)+0x24>
    194a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    194c:	2b00      	cmp	r3, #0
    194e:	f47f af79 	bne.w	1844 <storeData(short)+0x24>
    1952:	2111      	movs	r1, #17
    1954:	4871      	ldr	r0, [pc, #452]	; (1b1c <storeData(short)+0x2fc>)
    1956:	f00d fc79 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    195a:	4871      	ldr	r0, [pc, #452]	; (1b20 <storeData(short)+0x300>)
    195c:	f00b f8ee 	bl	cb3c <Print::println()>
                return STOPPED; 
    1960:	f04f 30ff 	mov.w	r0, #4294967295
    1964:	e76b      	b.n	183e <storeData(short)+0x1e>
          makeHeader(fileHeader);
    1966:	486f      	ldr	r0, [pc, #444]	; (1b24 <storeData(short)+0x304>)
    1968:	f7ff fdda 	bl	1520 <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    196c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    196e:	496d      	ldr	r1, [pc, #436]	; (1b24 <storeData(short)+0x304>)
    1970:	2800      	cmp	r0, #0
    1972:	f47f af7d 	bne.w	1870 <storeData(short)+0x50>
    1976:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1978:	b1e0      	cbz	r0, 19b4 <storeData(short)+0x194>
    197a:	f44f 7200 	mov.w	r2, #512	; 0x200
    197e:	f005 fc69 	bl	7254 <ExFatFile::write(void const*, unsigned int)>
        if(file.write(hdr,512) < 512) 
    1982:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1986:	f4bf af7b 	bcs.w	1880 <storeData(short)+0x60>
  bool isOpen() const {return m_fFile || m_xFile;}
    198a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    198c:	2b00      	cmp	r3, #0
    198e:	f000 80e6 	beq.w	1b5e <storeData(short)+0x33e>
    1992:	2403      	movs	r4, #3
        {   if(proc==0)
    1994:	4b55      	ldr	r3, [pc, #340]	; (1aec <storeData(short)+0x2cc>)
    1996:	881b      	ldrh	r3, [r3, #0]
    1998:	b21b      	sxth	r3, r3
    199a:	b30b      	cbz	r3, 19e0 <storeData(short)+0x1c0>
            file.close();
    199c:	4862      	ldr	r0, [pc, #392]	; (1b28 <storeData(short)+0x308>)
    199e:	f008 f965 	bl	9c6c <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    19a2:	2c04      	cmp	r4, #4
    19a4:	f000 80e4 	beq.w	1b70 <storeData(short)+0x350>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    19a8:	1ee0      	subs	r0, r4, #3
    19aa:	bf18      	it	ne
    19ac:	f04f 30ff 	movne.w	r0, #4294967295
}
    19b0:	b014      	add	sp, #80	; 0x50
    19b2:	bd70      	pop	{r4, r5, r6, pc}
    19b4:	2403      	movs	r4, #3
    19b6:	e7f7      	b.n	19a8 <storeData(short)+0x188>
    return m_fFile ? m_fFile->sync() :
    19b8:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    19ba:	2800      	cmp	r0, #0
    19bc:	f000 8084 	beq.w	1ac8 <storeData(short)+0x2a8>
    19c0:	f006 ff52 	bl	8868 <FatFile::sync()>
    19c4:	2002      	movs	r0, #2
    19c6:	e73a      	b.n	183e <storeData(short)+0x1e>
    19c8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    19ca:	b1b8      	cbz	r0, 19fc <storeData(short)+0x1dc>
    19cc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    19d0:	494a      	ldr	r1, [pc, #296]	; (1afc <storeData(short)+0x2dc>)
    19d2:	f005 fc3f 	bl	7254 <ExFatFile::write(void const*, unsigned int)>
    19d6:	4604      	mov	r4, r0
    19d8:	e75c      	b.n	1894 <storeData(short)+0x74>
    19da:	4d43      	ldr	r5, [pc, #268]	; (1ae8 <storeData(short)+0x2c8>)
    19dc:	4e44      	ldr	r6, [pc, #272]	; (1af0 <storeData(short)+0x2d0>)
    19de:	e74f      	b.n	1880 <storeData(short)+0x60>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    19e0:	4b43      	ldr	r3, [pc, #268]	; (1af0 <storeData(short)+0x2d0>)
  wav_hdr.dLen = nbytes;
    19e2:	4852      	ldr	r0, [pc, #328]	; (1b2c <storeData(short)+0x30c>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    19e4:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    19e6:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    19e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19ec:	02db      	lsls	r3, r3, #11
  wav_hdr.rLen += wav_hdr.dLen;
    19ee:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    19f0:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    19f4:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    19f6:	f7ff fd47 	bl	1488 <writeHeader(char*)>
    19fa:	e7cf      	b.n	199c <storeData(short)+0x17c>
    19fc:	4604      	mov	r4, r0
    19fe:	2101      	movs	r1, #1
    1a00:	484b      	ldr	r0, [pc, #300]	; (1b30 <storeData(short)+0x310>)
    1a02:	f00d fc23 	bl	f24c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1a06:	2300      	movs	r3, #0
    1a08:	220a      	movs	r2, #10
    1a0a:	4621      	mov	r1, r4
    1a0c:	4844      	ldr	r0, [pc, #272]	; (1b20 <storeData(short)+0x300>)
    1a0e:	f00b f8bf 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a12:	2101      	movs	r1, #1
    1a14:	4847      	ldr	r0, [pc, #284]	; (1b34 <storeData(short)+0x314>)
    1a16:	f00d fc19 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1a1a:	2102      	movs	r1, #2
    1a1c:	4840      	ldr	r0, [pc, #256]	; (1b20 <storeData(short)+0x300>)
    1a1e:	f00b f881 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1a22:	483f      	ldr	r0, [pc, #252]	; (1b20 <storeData(short)+0x300>)
    1a24:	f00b f88a 	bl	cb3c <Print::println()>
        disk_count++;
    1a28:	4935      	ldr	r1, [pc, #212]	; (1b00 <storeData(short)+0x2e0>)
    1a2a:	4836      	ldr	r0, [pc, #216]	; (1b04 <storeData(short)+0x2e4>)
    1a2c:	6833      	ldr	r3, [r6, #0]
    1a2e:	680a      	ldr	r2, [r1, #0]
    1a30:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1a34:	4834      	ldr	r0, [pc, #208]	; (1b08 <storeData(short)+0x2e8>)
        disk_count++;
    1a36:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1a38:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1a3c:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1a3e:	d3a4      	bcc.n	198a <storeData(short)+0x16a>
    return m_fFile ? m_fFile->sync() :
    1a40:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a42:	2800      	cmp	r0, #0
    1a44:	d048      	beq.n	1ad8 <storeData(short)+0x2b8>
          status=DOCLOSE; 
    1a46:	2403      	movs	r4, #3
    1a48:	f006 ff0e 	bl	8868 <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1a4c:	e000      	b.n	1a50 <storeData(short)+0x230>
    1a4e:	4d26      	ldr	r5, [pc, #152]	; (1ae8 <storeData(short)+0x2c8>)
  bool isOpen() const {return m_fFile || m_xFile;}
    1a50:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1a52:	2b00      	cmp	r3, #0
    1a54:	d19e      	bne.n	1994 <storeData(short)+0x174>
    1a56:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d19b      	bne.n	1994 <storeData(short)+0x174>
    1a5c:	e7a1      	b.n	19a2 <storeData(short)+0x182>
    1a5e:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1a62:	b1d1      	cbz	r1, 1a9a <storeData(short)+0x27a>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1a64:	466e      	mov	r6, sp
    1a66:	4613      	mov	r3, r2
  ExFatFile() {}
    1a68:	920c      	str	r2, [sp, #48]	; 0x30
    1a6a:	4630      	mov	r0, r6
    1a6c:	4a27      	ldr	r2, [pc, #156]	; (1b0c <storeData(short)+0x2ec>)
    1a6e:	f005 f87f 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1a72:	2800      	cmp	r0, #0
    1a74:	f47f af39 	bne.w	18ea <storeData(short)+0xca>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1a78:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1a7a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1a7e:	2a00      	cmp	r2, #0
    1a80:	d05e      	beq.n	1b40 <storeData(short)+0x320>
    1a82:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1a84:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1a88:	2301      	movs	r3, #1
    1a8a:	4630      	mov	r0, r6
    1a8c:	4a1f      	ldr	r2, [pc, #124]	; (1b0c <storeData(short)+0x2ec>)
    1a8e:	9400      	str	r4, [sp, #0]
    1a90:	f006 fa26 	bl	7ee0 <FatFile::mkdir(FatFile*, char const*, bool)>
    1a94:	2800      	cmp	r0, #0
    1a96:	f47f af28 	bne.w	18ea <storeData(short)+0xca>
    1a9a:	4821      	ldr	r0, [pc, #132]	; (1b20 <storeData(short)+0x300>)
    1a9c:	4926      	ldr	r1, [pc, #152]	; (1b38 <storeData(short)+0x318>)
    1a9e:	f7ff fc49 	bl	1334 <Print::println(char const*) [clone .isra.0]>
    1aa2:	f04f 30ff 	mov.w	r0, #4294967295
    1aa6:	e6ca      	b.n	183e <storeData(short)+0x1e>
    1aa8:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1aac:	b128      	cbz	r0, 1aba <storeData(short)+0x29a>
    1aae:	4917      	ldr	r1, [pc, #92]	; (1b0c <storeData(short)+0x2ec>)
    1ab0:	f006 f860 	bl	7b74 <ExFatVolume::chdir(char const*)>
    1ab4:	2800      	cmp	r0, #0
    1ab6:	f47f af24 	bne.w	1902 <storeData(short)+0xe2>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1aba:	4819      	ldr	r0, [pc, #100]	; (1b20 <storeData(short)+0x300>)
    1abc:	491f      	ldr	r1, [pc, #124]	; (1b3c <storeData(short)+0x31c>)
    1abe:	f7ff fc39 	bl	1334 <Print::println(char const*) [clone .isra.0]>
    1ac2:	f04f 30ff 	mov.w	r0, #4294967295
    1ac6:	e6ba      	b.n	183e <storeData(short)+0x1e>
    1ac8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1aca:	2800      	cmp	r0, #0
    1acc:	f43f aef4 	beq.w	18b8 <storeData(short)+0x98>
    1ad0:	f005 f9d8 	bl	6e84 <ExFatFile::sync()>
    1ad4:	2002      	movs	r0, #2
    1ad6:	e6b2      	b.n	183e <storeData(short)+0x1e>
    1ad8:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
          status=DOCLOSE; 
    1ada:	2403      	movs	r4, #3
    1adc:	2800      	cmp	r0, #0
    1ade:	f43f af63 	beq.w	19a8 <storeData(short)+0x188>
    1ae2:	f005 f9cf 	bl	6e84 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1ae6:	e7b3      	b.n	1a50 <storeData(short)+0x230>
    1ae8:	20028ae4 	.word	0x20028ae4
    1aec:	20029392 	.word	0x20029392
    1af0:	20028b60 	.word	0x20028b60
    1af4:	2000943c 	.word	0x2000943c
    1af8:	2000c1c8 	.word	0x2000c1c8
    1afc:	2000c1d0 	.word	0x2000c1d0
    1b00:	20028abc 	.word	0x20028abc
    1b04:	26e978d5 	.word	0x26e978d5
    1b08:	00418937 	.word	0x00418937
    1b0c:	20027e34 	.word	0x20027e34
    1b10:	20009448 	.word	0x20009448
    1b14:	20028284 	.word	0x20028284
    1b18:	20000b7c 	.word	0x20000b7c
    1b1c:	200007e0 	.word	0x200007e0
    1b20:	20008abc 	.word	0x20008abc
    1b24:	2000d9d0 	.word	0x2000d9d0
    1b28:	20028af4 	.word	0x20028af4
    1b2c:	20028084 	.word	0x20028084
    1b30:	200007f4 	.word	0x200007f4
    1b34:	20000b5c 	.word	0x20000b5c
    1b38:	200007c8 	.word	0x200007c8
    1b3c:	200007d4 	.word	0x200007d4
    1b40:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1b44:	2900      	cmp	r1, #0
    1b46:	d0a8      	beq.n	1a9a <storeData(short)+0x27a>
    1b48:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1b4a:	2301      	movs	r3, #1
    1b4c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1b50:	4630      	mov	r0, r6
    1b52:	4a09      	ldr	r2, [pc, #36]	; (1b78 <storeData(short)+0x358>)
    1b54:	f005 faa0 	bl	7098 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1b58:	2800      	cmp	r0, #0
    1b5a:	d09e      	beq.n	1a9a <storeData(short)+0x27a>
    1b5c:	e6c5      	b.n	18ea <storeData(short)+0xca>
  bool isOpen() const {return m_fFile || m_xFile;}
    1b5e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1b60:	2403      	movs	r4, #3
    1b62:	2b00      	cmp	r3, #0
    1b64:	f47f af16 	bne.w	1994 <storeData(short)+0x174>
    1b68:	e71e      	b.n	19a8 <storeData(short)+0x188>
        {  return STOPPED; // if file open fails: don't do anything
    1b6a:	f04f 30ff 	mov.w	r0, #4294967295
    1b6e:	e666      	b.n	183e <storeData(short)+0x1e>
        { do_hibernate(t_rep);
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <storeData(short)+0x35c>)
    1b72:	6818      	ldr	r0, [r3, #0]
    1b74:	f7ff fe1e 	bl	17b4 <do_hibernate(unsigned long)>
    1b78:	20027e34 	.word	0x20027e34
    1b7c:	20009464 	.word	0x20009464

00001b80 <saveData(short)>:
{
    1b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b82:	4605      	mov	r5, r0
    if(status==STOPPED) 
    1b84:	3001      	adds	r0, #1
    1b86:	d046      	beq.n	1c16 <saveData(short)+0x96>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1b88:	4b3f      	ldr	r3, [pc, #252]	; (1c88 <saveData(short)+0x108>)
    1b8a:	2208      	movs	r2, #8
    if(status<CLOSED) return status; // we are stopped: don't do anything
    1b8c:	2d00      	cmp	r5, #0
    1b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1b92:	db54      	blt.n	1c3e <saveData(short)+0xbe>
  if(state==RUNNING)
    1b94:	2d02      	cmp	r5, #2
    1b96:	d073      	beq.n	1c80 <saveData(short)+0x100>
    if(getDataCount()>=nblocks)
    1b98:	f002 fdfa 	bl	4790 <getDataCount()>
    1b9c:	280f      	cmp	r0, #15
    1b9e:	d950      	bls.n	1c42 <saveData(short)+0xc2>
      digitalWrite(13,HIGH);
    1ba0:	2101      	movs	r1, #1
    1ba2:	200d      	movs	r0, #13
    1ba4:	f00b fb4c 	bl	d240 <digitalWrite>
      if(proc==0)
    1ba8:	4b38      	ldr	r3, [pc, #224]	; (1c8c <saveData(short)+0x10c>)
    1baa:	881b      	ldrh	r3, [r3, #0]
    1bac:	b21b      	sxth	r3, r3
    1bae:	2b00      	cmp	r3, #0
    1bb0:	d14d      	bne.n	1c4e <saveData(short)+0xce>
    1bb2:	4f37      	ldr	r7, [pc, #220]	; (1c90 <saveData(short)+0x110>)
    1bb4:	f5a7 5600 	sub.w	r6, r7, #8192	; 0x2000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1bb8:	f002 fdf8 	bl	47ac <queue_isBusy()>
    1bbc:	4604      	mov	r4, r0
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1bbe:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1bc0:	2c00      	cmp	r4, #0
    1bc2:	d1f9      	bne.n	1bb8 <saveData(short)+0x38>
        for(int ii=0; ii<nblocks; ii++)
    1bc4:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1bc8:	f002 fe30 	bl	482c <pullData(unsigned long*)>
        for(int ii=0; ii<nblocks; ii++)
    1bcc:	42be      	cmp	r6, r7
    1bce:	d1f3      	bne.n	1bb8 <saveData(short)+0x38>
    1bd0:	4930      	ldr	r1, [pc, #192]	; (1c94 <saveData(short)+0x114>)
    1bd2:	4b31      	ldr	r3, [pc, #196]	; (1c98 <saveData(short)+0x118>)
    1bd4:	460a      	mov	r2, r1
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1bd6:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1bda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    1bde:	3401      	adds	r4, #1
    1be0:	2c08      	cmp	r4, #8
    1be2:	d1f8      	bne.n	1bd6 <saveData(short)+0x56>
    1be4:	4b2d      	ldr	r3, [pc, #180]	; (1c9c <saveData(short)+0x11c>)
    1be6:	482e      	ldr	r0, [pc, #184]	; (1ca0 <saveData(short)+0x120>)
            outptr[jj++]=(inpp[ii]) &0xff;
    1be8:	f851 2f04 	ldr.w	r2, [r1, #4]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1bec:	3303      	adds	r3, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1bee:	ea4f 2e12 	mov.w	lr, r2, lsr #8
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1bf2:	4281      	cmp	r1, r0
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1bf4:	ea4f 4c12 	mov.w	ip, r2, lsr #16
            outptr[jj++]=(inpp[ii]) &0xff;
    1bf8:	f803 2c03 	strb.w	r2, [r3, #-3]
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1bfc:	f803 ec02 	strb.w	lr, [r3, #-2]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1c00:	f803 cc01 	strb.w	ip, [r3, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1c04:	d1f0      	bne.n	1be8 <saveData(short)+0x68>
      if(haveStore)
    1c06:	4b27      	ldr	r3, [pc, #156]	; (1ca4 <saveData(short)+0x124>)
    1c08:	681b      	ldr	r3, [r3, #0]
    1c0a:	b1c3      	cbz	r3, 1c3e <saveData(short)+0xbe>
        status=storeData(status);
    1c0c:	4628      	mov	r0, r5
}
    1c0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status=storeData(status);
    1c12:	f7ff be05 	b.w	1820 <storeData(short)>
      while(queue_isBusy()); //wait if acq writes to queue
    1c16:	f002 fdc9 	bl	47ac <queue_isBusy()>
    1c1a:	4604      	mov	r4, r0
    1c1c:	2800      	cmp	r0, #0
    1c1e:	d1fa      	bne.n	1c16 <saveData(short)+0x96>
      pullData((uint32_t*)tempBuffer0);
    1c20:	4821      	ldr	r0, [pc, #132]	; (1ca8 <saveData(short)+0x128>)
    1c22:	f002 fe03 	bl	482c <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1c26:	4a1b      	ldr	r2, [pc, #108]	; (1c94 <saveData(short)+0x114>)
    1c28:	4b1b      	ldr	r3, [pc, #108]	; (1c98 <saveData(short)+0x118>)
    1c2a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1c2e:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1c32:	3401      	adds	r4, #1
    1c34:	2c08      	cmp	r4, #8
    1c36:	d1f8      	bne.n	1c2a <saveData(short)+0xaa>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    1c38:	4b13      	ldr	r3, [pc, #76]	; (1c88 <saveData(short)+0x108>)
    1c3a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
}
    1c3e:	4628      	mov	r0, r5
    1c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      digitalWrite(13,LOW);
    1c42:	2100      	movs	r1, #0
    1c44:	200d      	movs	r0, #13
    1c46:	f00b fafb 	bl	d240 <digitalWrite>
}
    1c4a:	4628      	mov	r0, r5
    1c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c4e:	4e13      	ldr	r6, [pc, #76]	; (1c9c <saveData(short)+0x11c>)
    1c50:	f506 57c0 	add.w	r7, r6, #6144	; 0x1800
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1c54:	f002 fdaa 	bl	47ac <queue_isBusy()>
    1c58:	4604      	mov	r4, r0
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1c5a:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1c5c:	2c00      	cmp	r4, #0
    1c5e:	d1f9      	bne.n	1c54 <saveData(short)+0xd4>
        for(int ii=0; ii<NDBL; ii++)
    1c60:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1c64:	f002 fde2 	bl	482c <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1c68:	42be      	cmp	r6, r7
    1c6a:	d1f3      	bne.n	1c54 <saveData(short)+0xd4>
    1c6c:	4a0f      	ldr	r2, [pc, #60]	; (1cac <saveData(short)+0x12c>)
    1c6e:	4b0a      	ldr	r3, [pc, #40]	; (1c98 <saveData(short)+0x118>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1c70:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1c74:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1c78:	3401      	adds	r4, #1
    1c7a:	2c08      	cmp	r4, #8
    1c7c:	d1f8      	bne.n	1c70 <saveData(short)+0xf0>
    1c7e:	e7c2      	b.n	1c06 <saveData(short)+0x86>
    1c80:	f7ff fb2c 	bl	12dc <checkEndOfFile(short) [clone .part.0]>
    1c84:	4605      	mov	r5, r0
    1c86:	e787      	b.n	1b98 <saveData(short)+0x18>
    1c88:	42004000 	.word	0x42004000
    1c8c:	20029392 	.word	0x20029392
    1c90:	20027bdc 	.word	0x20027bdc
    1c94:	20025bd8 	.word	0x20025bd8
    1c98:	20028b38 	.word	0x20028b38
    1c9c:	2000c1d0 	.word	0x2000c1d0
    1ca0:	20027bd8 	.word	0x20027bd8
    1ca4:	20028b34 	.word	0x20028b34
    1ca8:	20025bdc 	.word	0x20025bdc
    1cac:	2000c1cc 	.word	0x2000c1cc

00001cb0 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    1cb0:	4808      	ldr	r0, [pc, #32]	; (1cd4 <_GLOBAL__sub_I_t_acq+0x24>)
    1cb2:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    1cb8:	4a07      	ldr	r2, [pc, #28]	; (1cd8 <_GLOBAL__sub_I_t_acq+0x28>)
}
    1cba:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1cbc:	4c07      	ldr	r4, [pc, #28]	; (1cdc <_GLOBAL__sub_I_t_acq+0x2c>)
    1cbe:	7303      	strb	r3, [r0, #12]
    1cc0:	6004      	str	r4, [r0, #0]
    1cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cc6:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    1cca:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    1cce:	4904      	ldr	r1, [pc, #16]	; (1ce0 <_GLOBAL__sub_I_t_acq+0x30>)
    1cd0:	f00d bcc6 	b.w	f660 <__aeabi_atexit>
    1cd4:	20028ae4 	.word	0x20028ae4
    1cd8:	20008e98 	.word	0x20008e98
    1cdc:	20000ca4 	.word	0x20000ca4
    1ce0:	000012c5 	.word	0x000012c5

00001ce4 <filing_init()>:
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ce4:	4b29      	ldr	r3, [pc, #164]	; (1d8c <filing_init()+0xa8>)
    1ce6:	4a2a      	ldr	r2, [pc, #168]	; (1d90 <filing_init()+0xac>)
    1ce8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  FsDateTime::callback = dateTime;
    1cec:	4929      	ldr	r1, [pc, #164]	; (1d94 <filing_init()+0xb0>)
    1cee:	482a      	ldr	r0, [pc, #168]	; (1d98 <filing_init()+0xb4>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1cf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
    1cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FsDateTime::callback = dateTime;
    1cf8:	2605      	movs	r6, #5
    1cfa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1dac <filing_init()+0xc8>
    spiConfigBackupPin = 255;
    1cfe:	27ff      	movs	r7, #255	; 0xff
    1d00:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1db0 <filing_init()+0xcc>
	size_t println(const char s[])			{ return print(s) + println(); }
    1d04:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1da0 <filing_init()+0xbc>
    1d08:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1d0a:	6013      	str	r3, [r2, #0]
    if (sd->begin(SD_CONFIG)) 
    1d0c:	f8d8 4000 	ldr.w	r4, [r8]
    sdioConfigBackup = sdioConfig;
    1d10:	2300      	movs	r3, #0
    1d12:	f504 6592 	add.w	r5, r4, #1168	; 0x490
    1d16:	4619      	mov	r1, r3
    1d18:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
    1d1c:	4628      	mov	r0, r5
    spiConfigBackupPin = 255;
    1d1e:	f884 74bc 	strb.w	r7, [r4, #1212]	; 0x4bc
    1d22:	f009 fcbd 	bl	b6a0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1d26:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1d28:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    1d2c:	f008 ff1a 	bl	ab64 <SdioCard::errorCode() const>
    1d30:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1d32:	2301      	movs	r3, #1
    1d34:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
    1d36:	b992      	cbnz	r2, 1d5e <filing_init()+0x7a>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1d38:	461a      	mov	r2, r3
    1d3a:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    1d3e:	f008 f83d 	bl	9dbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1d42:	b160      	cbz	r0, 1d5e <filing_init()+0x7a>
    1d44:	2111      	movs	r1, #17
    1d46:	4815      	ldr	r0, [pc, #84]	; (1d9c <filing_init()+0xb8>)
    1d48:	f00d fa80 	bl	f24c <usb_serial_write>
    1d4c:	4814      	ldr	r0, [pc, #80]	; (1da0 <filing_init()+0xbc>)
    1d4e:	f00a fef5 	bl	cb3c <Print::println()>
      haveStore=1;
    1d52:	2301      	movs	r3, #1
    1d54:	4a13      	ldr	r2, [pc, #76]	; (1da4 <filing_init()+0xc0>)
      return 1;
    1d56:	4618      	mov	r0, r3
      haveStore=1;
    1d58:	6013      	str	r3, [r2, #0]
}
    1d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d5e:	210f      	movs	r1, #15
    1d60:	4650      	mov	r0, sl
    1d62:	f00d fa73 	bl	f24c <usb_serial_write>
    1d66:	4648      	mov	r0, r9
    1d68:	f00a fee8 	bl	cb3c <Print::println()>
      delay(100);
    1d6c:	2064      	movs	r0, #100	; 0x64
    1d6e:	f00b f9e9 	bl	d144 <delay>
  for(int ii=0; ii<5;ii++)
    1d72:	3e01      	subs	r6, #1
    1d74:	d1ca      	bne.n	1d0c <filing_init()+0x28>
    1d76:	211b      	movs	r1, #27
    1d78:	480b      	ldr	r0, [pc, #44]	; (1da8 <filing_init()+0xc4>)
    1d7a:	f00d fa67 	bl	f24c <usb_serial_write>
    1d7e:	4808      	ldr	r0, [pc, #32]	; (1da0 <filing_init()+0xbc>)
    1d80:	f00a fedc 	bl	cb3c <Print::println()>
  return 0;
    1d84:	4630      	mov	r0, r6
}
    1d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d8a:	bf00      	nop
    1d8c:	401f4400 	.word	0x401f4400
    1d90:	2000c1c8 	.word	0x2000c1c8
    1d94:	200284dc 	.word	0x200284dc
    1d98:	00001245 	.word	0x00001245
    1d9c:	2000044c 	.word	0x2000044c
    1da0:	20008abc 	.word	0x20008abc
    1da4:	20028b34 	.word	0x20028b34
    1da8:	20000470 	.word	0x20000470
    1dac:	20009448 	.word	0x20009448
    1db0:	20000460 	.word	0x20000460

00001db4 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1db4:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1db8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1dbc:	429a      	cmp	r2, r3
    1dbe:	d905      	bls.n	1dcc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1dc0:	1c5a      	adds	r2, r3, #1
    1dc2:	4403      	add	r3, r0
    1dc4:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1dc8:	7e98      	ldrb	r0, [r3, #26]
    1dca:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1dcc:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1dd0:	4770      	bx	lr
    1dd2:	bf00      	nop

00001dd4 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1dd4:	b530      	push	{r4, r5, lr}
    1dd6:	4605      	mov	r5, r0
    1dd8:	b083      	sub	sp, #12
    1dda:	460c      	mov	r4, r1
    {   this->wire = wire;
        wire->begin();
    1ddc:	4608      	mov	r0, r1
    {   this->wire = wire;
    1dde:	6029      	str	r1, [r5, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1de0:	9201      	str	r2, [sp, #4]
        wire->begin();
    1de2:	f018 fb59 	bl	1a498 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    1de6:	2064      	movs	r0, #100	; 0x64
    1de8:	f00b f9ac 	bl	d144 <delay>
        wire->setClock(speed);
    1dec:	4620      	mov	r0, r4
    1dee:	9901      	ldr	r1, [sp, #4]
    1df0:	f00a fd70 	bl	c8d4 <TwoWire::setClock(unsigned long)>
    }
    1df4:	4628      	mov	r0, r5
    1df6:	b003      	add	sp, #12
    1df8:	bd30      	pop	{r4, r5, pc}
    1dfa:	bf00      	nop

00001dfc <i2c_class::exist(unsigned char)>:
		transmitting = 1;
    1dfc:	2201      	movs	r2, #1
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    1dfe:	b508      	push	{r3, lr}
		txBuffer[0] = (address << 1);
    1e00:	fa01 fc02 	lsl.w	ip, r1, r2
        wire->beginTransmission(addr);
    1e04:	6803      	ldr	r3, [r0, #0]
		return endTransmission(1);
    1e06:	4611      	mov	r1, r2
		txBuffer[0] = (address << 1);
    1e08:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
		transmitting = 1;
    1e0c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1e10:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		return endTransmission(1);
    1e14:	6800      	ldr	r0, [r0, #0]
    1e16:	f00a fbc5 	bl	c5a4 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    1e1a:	fab0 f080 	clz	r0, r0
    1e1e:	0940      	lsrs	r0, r0, #5
    1e20:	bd08      	pop	{r3, pc}
    1e22:	bf00      	nop

00001e24 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    1e24:	b570      	push	{r4, r5, r6, lr}
    1e26:	460d      	mov	r5, r1
		transmitting = 1;
    1e28:	2601      	movs	r6, #1
        unsigned int val;
        wire->beginTransmission(addr);
        wire->write(reg);
    1e2a:	4611      	mov	r1, r2
        wire->beginTransmission(addr);
    1e2c:	6802      	ldr	r2, [r0, #0]
		txBuffer[0] = (address << 1);
    1e2e:	006b      	lsls	r3, r5, #1
    { 
    1e30:	4604      	mov	r4, r0
		transmitting = 1;
    1e32:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		txBuffer[0] = (address << 1);
    1e36:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
		txBufferLength = 1;
    1e3a:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
        wire->write(reg);
    1e3e:	6800      	ldr	r0, [r0, #0]
    1e40:	6803      	ldr	r3, [r0, #0]
    1e42:	681b      	ldr	r3, [r3, #0]
    1e44:	4798      	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    1e46:	2100      	movs	r1, #0
    1e48:	6820      	ldr	r0, [r4, #0]
    1e4a:	f00a fbab 	bl	c5a4 <TwoWire::endTransmission(unsigned char)>
    1e4e:	b108      	cbz	r0, 1e54 <i2c_class::read(unsigned char, unsigned char)+0x30>
    1e50:	2000      	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    1e52:	bd70      	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    1e54:	4633      	mov	r3, r6
    1e56:	4632      	mov	r2, r6
    1e58:	4629      	mov	r1, r5
    1e5a:	6820      	ldr	r0, [r4, #0]
    1e5c:	f00a fc22 	bl	c6a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    1e60:	2800      	cmp	r0, #0
    1e62:	d0f5      	beq.n	1e50 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    1e64:	6820      	ldr	r0, [r4, #0]
    1e66:	4a0b      	ldr	r2, [pc, #44]	; (1e94 <i2c_class::read(unsigned char, unsigned char)+0x70>)
    1e68:	6803      	ldr	r3, [r0, #0]
    1e6a:	695b      	ldr	r3, [r3, #20]
    1e6c:	4293      	cmp	r3, r2
    1e6e:	d10b      	bne.n	1e88 <i2c_class::read(unsigned char, unsigned char)+0x64>
		if (rxBufferIndex >= rxBufferLength) return -1;
    1e70:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1e74:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1e78:	429a      	cmp	r2, r3
    1e7a:	d908      	bls.n	1e8e <i2c_class::read(unsigned char, unsigned char)+0x6a>
		return rxBuffer[rxBufferIndex++];
    1e7c:	1c5a      	adds	r2, r3, #1
    1e7e:	4403      	add	r3, r0
    1e80:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1e84:	7e98      	ldrb	r0, [r3, #26]
    }
    1e86:	bd70      	pop	{r4, r5, r6, pc}
        val = wire->read();
    1e88:	4798      	blx	r3
        return val;
    1e8a:	b2c0      	uxtb	r0, r0
    }
    1e8c:	bd70      	pop	{r4, r5, r6, pc}
    1e8e:	20ff      	movs	r0, #255	; 0xff
    1e90:	bd70      	pop	{r4, r5, r6, pc}
    1e92:	bf00      	nop
    1e94:	00001db5 	.word	0x00001db5

00001e98 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    1e98:	b570      	push	{r4, r5, r6, lr}
    1e9a:	4604      	mov	r4, r0
		transmitting = 1;
    1e9c:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    1e9e:	0048      	lsls	r0, r1, #1
    1ea0:	461e      	mov	r6, r3
        wire->beginTransmission(addr);
    1ea2:	6823      	ldr	r3, [r4, #0]
        wire->write(reg);
    1ea4:	4611      	mov	r1, r2
		transmitting = 1;
    1ea6:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    1eaa:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    1eae:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    1eb2:	6820      	ldr	r0, [r4, #0]
    1eb4:	6803      	ldr	r3, [r0, #0]
    1eb6:	681b      	ldr	r3, [r3, #0]
    1eb8:	4798      	blx	r3
        wire->write(val);
    1eba:	6820      	ldr	r0, [r4, #0]
    1ebc:	4631      	mov	r1, r6
    1ebe:	6803      	ldr	r3, [r0, #0]
    1ec0:	681b      	ldr	r3, [r3, #0]
    1ec2:	4798      	blx	r3
		return endTransmission(1);
    1ec4:	4629      	mov	r1, r5
    1ec6:	6820      	ldr	r0, [r4, #0]
    1ec8:	f00a fb6c 	bl	c5a4 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    1ecc:	fab0 f080 	clz	r0, r0
    1ed0:	0940      	lsrs	r0, r0, #5
    1ed2:	bd70      	pop	{r4, r5, r6, pc}

00001ed4 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    1ed4:	6840      	ldr	r0, [r0, #4]
    1ed6:	4770      	bx	lr

00001ed8 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    1ed8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    1edc:	6888      	ldr	r0, [r1, #8]
    1ede:	4770      	bx	lr

00001ee0 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    1ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ee4:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    1ee6:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    1eea:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    1eec:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    1ef0:	b91b      	cbnz	r3, 1efa <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    1ef2:	4f19      	ldr	r7, [pc, #100]	; (1f58 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1ef4:	f500 7108 	add.w	r1, r0, #544	; 0x220
    1ef8:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    1efa:	4433      	add	r3, r6
        while(pos<len)
    1efc:	2e00      	cmp	r6, #0
        write_length_ += len;
    1efe:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
        while(pos<len)
    1f02:	dd27      	ble.n	1f54 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f04:	f500 6984 	add.w	r9, r0, #1056	; 0x420
        int pos = 0; // into data
    1f08:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1f0a:	f500 7808 	add.w	r8, r0, #544	; 0x220
    1f0e:	4f12      	ldr	r7, [pc, #72]	; (1f58 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    1f10:	e001      	b.n	1f16 <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    1f12:	42a6      	cmp	r6, r4
    1f14:	dd1e      	ble.n	1f54 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f16:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    1f18:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    1f1a:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    1f1c:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    1f20:	4618      	mov	r0, r3
    1f22:	4592      	cmp	sl, r2
    1f24:	bfa8      	it	ge
    1f26:	4692      	movge	sl, r2
    1f28:	4652      	mov	r2, sl
          pos += to_copy;
    1f2a:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    1f2c:	f00b fc0e 	bl	d74c <memcpy>
    1f30:	4603      	mov	r3, r0
          src += to_copy;
    1f32:	4455      	add	r5, sl
          dst += to_copy;
    1f34:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f36:	454b      	cmp	r3, r9
          dst += to_copy;
    1f38:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f3a:	d1ea      	bne.n	1f12 <MTPD::write(char const*, int) [clone .part.0]+0x32>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f3c:	223c      	movs	r2, #60	; 0x3c
    1f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
    1f42:	4640      	mov	r0, r8
    1f44:	f00c fdf0 	bl	eb28 <usb_mtp_send>
    1f48:	2800      	cmp	r0, #0
    1f4a:	ddf7      	ble.n	1f3c <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    1f4c:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    1f4e:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    1f52:	dce0      	bgt.n	1f16 <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    1f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f58:	200285a8 	.word	0x200285a8

00001f5c <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f5e:	4607      	mov	r7, r0
    1f60:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    1f62:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    1f64:	460c      	mov	r4, r1
    { if (write_get_length_) 
    1f66:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
    { write8(strlen(str) + 1);
    1f6a:	f010 f869 	bl	12040 <strlen>
    1f6e:	3001      	adds	r0, #1
    { if (write_get_length_) 
    1f70:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    1f74:	f88d 0006 	strb.w	r0, [sp, #6]
    1f78:	b396      	cbz	r6, 1fe0 <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    1f7a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f7e:	3301      	adds	r3, #1
    1f80:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1f84:	7823      	ldrb	r3, [r4, #0]
    1f86:	b973      	cbnz	r3, 1fa6 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    1f88:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f8c:	3302      	adds	r3, #2
    1f8e:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    1f92:	b003      	add	sp, #12
    1f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    1f96:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    1f9a:	4413      	add	r3, r2
    1f9c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fa0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    1fa4:	b17b      	cbz	r3, 1fc6 <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    1fa6:	2202      	movs	r2, #2
    1fa8:	f10d 0106 	add.w	r1, sp, #6
    1fac:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fae:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1fb2:	2e00      	cmp	r6, #0
    1fb4:	d1ef      	bne.n	1f96 <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    1fb6:	f7ff ff93 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fba:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    1fbe:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fc2:	2b00      	cmp	r3, #0
    1fc4:	d1ef      	bne.n	1fa6 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    1fc6:	2300      	movs	r3, #0
    1fc8:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    1fcc:	2e00      	cmp	r6, #0
    1fce:	d1db      	bne.n	1f88 <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    1fd0:	2202      	movs	r2, #2
    1fd2:	f10d 0106 	add.w	r1, sp, #6
    1fd6:	4638      	mov	r0, r7
    1fd8:	f7ff ff82 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
  }
    1fdc:	b003      	add	sp, #12
    1fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fe0:	2201      	movs	r2, #1
    1fe2:	f10d 0106 	add.w	r1, sp, #6
    1fe6:	4638      	mov	r0, r7
    1fe8:	f7ff ff7a 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fec:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    1fee:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d1d7      	bne.n	1fa6 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    1ff6:	e7e6      	b.n	1fc6 <MTPD::writestring(char const*) [clone .part.0]+0x6a>

00001ff8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	f24d 4302 	movw	r3, #54274	; 0xd402
    1ffe:	b082      	sub	sp, #8
    { if (write_get_length_) 
    2000:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    2004:	4605      	mov	r5, r0
    2006:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    200a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    200e:	b31b      	cbz	r3, 2058 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    2010:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2014:	3302      	adds	r3, #2
    2016:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    201a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    201e:	3302      	adds	r3, #2
    2020:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2024:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2028:	3301      	adds	r3, #1
    202a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    202e:	491e      	ldr	r1, [pc, #120]	; (20a8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    2030:	4628      	mov	r0, r5
    2032:	f7ff ff93 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    2036:	491c      	ldr	r1, [pc, #112]	; (20a8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    2038:	4628      	mov	r0, r5
    203a:	f7ff ff8f 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    203e:	2200      	movs	r2, #0
    { if (write_get_length_) 
    2040:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2044:	f88d 2006 	strb.w	r2, [sp, #6]
    2048:	b333      	cbz	r3, 2098 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    204a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    204e:	3301      	adds	r3, #1
    2050:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2054:	b002      	add	sp, #8
    2056:	bd70      	pop	{r4, r5, r6, pc}
    2058:	2202      	movs	r2, #2
    205a:	f10d 0106 	add.w	r1, sp, #6
    205e:	f7ff ff3f 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2062:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    2066:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
        write16(0xFFFF); // string type
    206a:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    206e:	2e00      	cmp	r6, #0
    2070:	d1d3      	bne.n	201a <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    2072:	2202      	movs	r2, #2
    2074:	f10d 0106 	add.w	r1, sp, #6
    2078:	4628      	mov	r0, r5
    207a:	f7ff ff31 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    207e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
        write8(0);       // read-only
    2082:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    2086:	2b00      	cmp	r3, #0
    2088:	d1cc      	bne.n	2024 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    208a:	2201      	movs	r2, #1
    208c:	f10d 0106 	add.w	r1, sp, #6
    2090:	4628      	mov	r0, r5
    2092:	f7ff ff25 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2096:	e7ca      	b.n	202e <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    2098:	2201      	movs	r2, #1
    209a:	f10d 0106 	add.w	r1, sp, #6
    209e:	4628      	mov	r0, r5
    20a0:	f7ff ff1e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
  }
    20a4:	b002      	add	sp, #8
    20a6:	bd70      	pop	{r4, r5, r6, pc}
    20a8:	20000b48 	.word	0x20000b48

000020ac <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    20ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    { if (write_get_length_) 
    20b0:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  void MTPD::WriteDescriptor() {
    20b4:	b087      	sub	sp, #28
    20b6:	2464      	movs	r4, #100	; 0x64
    20b8:	4607      	mov	r7, r0
    { if (write_get_length_) 
    20ba:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    20be:	f8ad 4004 	strh.w	r4, [sp, #4]
    20c2:	2b00      	cmp	r3, #0
    20c4:	f000 813b 	beq.w	233e <MTPD::WriteDescriptor()+0x292>
        write_length_ += len;
    20c8:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    20cc:	f10d 0804 	add.w	r8, sp, #4
    20d0:	3302      	adds	r3, #2
    20d2:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    20d6:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    20da:	3304      	adds	r3, #4
    20dc:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    20e0:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    20e4:	3302      	adds	r3, #2
    20e6:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    20ea:	49ac      	ldr	r1, [pc, #688]	; (239c <MTPD::WriteDescriptor()+0x2f0>)
    20ec:	4638      	mov	r0, r7
    20ee:	f7ff ff35 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    write16(0);    // functional mode
    20f2:	2200      	movs	r2, #0
    { if (write_get_length_) 
    20f4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    20f8:	f8ad 2004 	strh.w	r2, [sp, #4]
    20fc:	2b00      	cmp	r3, #0
    20fe:	f000 810a 	beq.w	2316 <MTPD::WriteDescriptor()+0x26a>
        write_length_ += len;
    2102:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2106:	3302      	adds	r3, #2
    2108:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    210c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2110:	2601      	movs	r6, #1
    2112:	3304      	adds	r3, #4
    2114:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2118:	4ca1      	ldr	r4, [pc, #644]	; (23a0 <MTPD::WriteDescriptor()+0x2f4>)
    write32(supported_op_num);
    211a:	f241 0301 	movw	r3, #4097	; 0x1001
    211e:	f104 0926 	add.w	r9, r4, #38	; 0x26
    2122:	e008      	b.n	2136 <MTPD::WriteDescriptor()+0x8a>
        write_length_ += len;
    2124:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2128:	454c      	cmp	r4, r9
        write_length_ += len;
    212a:	4413      	add	r3, r2
    212c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2130:	d00e      	beq.n	2150 <MTPD::WriteDescriptor()+0xa4>
    2132:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    2136:	2202      	movs	r2, #2
    2138:	4641      	mov	r1, r8
    213a:	4638      	mov	r0, r7
    213c:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    2140:	2e00      	cmp	r6, #0
    2142:	d1ef      	bne.n	2124 <MTPD::WriteDescriptor()+0x78>
    2144:	f7ff fecc 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    2148:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    214a:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    214e:	d1f0      	bne.n	2132 <MTPD::WriteDescriptor()+0x86>
    write32(supported_event_num);      
    2150:	2204      	movs	r2, #4
    2152:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2154:	2e00      	cmp	r6, #0
    2156:	f000 80d7 	beq.w	2308 <MTPD::WriteDescriptor()+0x25c>
        write_length_ += len;
    215a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    215e:	4413      	add	r3, r2
    2160:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2164:	4c8f      	ldr	r4, [pc, #572]	; (23a4 <MTPD::WriteDescriptor()+0x2f8>)
    write32(supported_event_num);      
    2166:	f244 0304 	movw	r3, #16388	; 0x4004
    216a:	2202      	movs	r2, #2
    216c:	4641      	mov	r1, r8
    216e:	f104 0906 	add.w	r9, r4, #6
    2172:	4638      	mov	r0, r7
    2174:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    2178:	b17e      	cbz	r6, 219a <MTPD::WriteDescriptor()+0xee>
        write_length_ += len;
    217a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    217e:	454c      	cmp	r4, r9
        write_length_ += len;
    2180:	4413      	add	r3, r2
    2182:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2186:	d00e      	beq.n	21a6 <MTPD::WriteDescriptor()+0xfa>
    2188:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    218c:	2202      	movs	r2, #2
    218e:	4641      	mov	r1, r8
    2190:	4638      	mov	r0, r7
    2192:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    2196:	2e00      	cmp	r6, #0
    2198:	d1ef      	bne.n	217a <MTPD::WriteDescriptor()+0xce>
    219a:	f7ff fea1 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    219e:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    21a0:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    21a4:	d1f0      	bne.n	2188 <MTPD::WriteDescriptor()+0xdc>
    write32(1);       // Device properties (array of uint16)
    21a6:	2301      	movs	r3, #1
    21a8:	9301      	str	r3, [sp, #4]
    { if (write_get_length_) 
    21aa:	2e00      	cmp	r6, #0
    21ac:	d068      	beq.n	2280 <MTPD::WriteDescriptor()+0x1d4>
        write_length_ += len;
    21ae:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21b2:	3304      	adds	r3, #4
    21b4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    21b8:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21bc:	3302      	adds	r3, #2
    21be:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    21c2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21c6:	3304      	adds	r3, #4
    21c8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    21cc:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21d0:	3304      	adds	r3, #4
    21d2:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    21d6:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21da:	3302      	adds	r3, #2
    21dc:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    21e0:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    21e4:	3302      	adds	r3, #2
    21e6:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    21ea:	496f      	ldr	r1, [pc, #444]	; (23a8 <MTPD::WriteDescriptor()+0x2fc>)
    21ec:	4638      	mov	r0, r7
    21ee:	f7ff feb5 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    21f2:	496e      	ldr	r1, [pc, #440]	; (23ac <MTPD::WriteDescriptor()+0x300>)
    21f4:	4638      	mov	r0, r7
    21f6:	f7ff feb1 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    21fa:	4642      	mov	r2, r8
    21fc:	2102      	movs	r1, #2
    21fe:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 23b0 <MTPD::WriteDescriptor()+0x304>
    2202:	2003      	movs	r0, #3
    2204:	f00b fb70 	bl	d8e8 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    2208:	2214      	movs	r2, #20
    220a:	496a      	ldr	r1, [pc, #424]	; (23b4 <MTPD::WriteDescriptor()+0x308>)
    220c:	4640      	mov	r0, r8
    220e:	f00f fb7d 	bl	1190c <strlcat>
    if (*str) 
    2212:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2216:	b1bb      	cbz	r3, 2248 <MTPD::WriteDescriptor()+0x19c>
    2218:	4641      	mov	r1, r8
    221a:	4638      	mov	r0, r7
    221c:	f7ff fe9e 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    2220:	4b65      	ldr	r3, [pc, #404]	; (23b8 <MTPD::WriteDescriptor()+0x30c>)
    2222:	4642      	mov	r2, r8
    2224:	f103 0014 	add.w	r0, r3, #20
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    2228:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    222c:	4283      	cmp	r3, r0
    222e:	f802 1b01 	strb.w	r1, [r2], #1
    2232:	d1f9      	bne.n	2228 <MTPD::WriteDescriptor()+0x17c>
    if (*str) 
    2234:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2238:	b19b      	cbz	r3, 2262 <MTPD::WriteDescriptor()+0x1b6>
    223a:	4641      	mov	r1, r8
    223c:	4638      	mov	r0, r7
    223e:	f7ff fe8d 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
  }
    2242:	b007      	add	sp, #28
    2244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if (write_get_length_) 
    2248:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    224c:	f88d 3003 	strb.w	r3, [sp, #3]
    2250:	2a00      	cmp	r2, #0
    2252:	f000 809c 	beq.w	238e <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
    2256:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    225a:	3301      	adds	r3, #1
    225c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2260:	e7de      	b.n	2220 <MTPD::WriteDescriptor()+0x174>
    { if (write_get_length_) 
    2262:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    2266:	f88d 3003 	strb.w	r3, [sp, #3]
    226a:	2a00      	cmp	r2, #0
    226c:	f000 8086 	beq.w	237c <MTPD::WriteDescriptor()+0x2d0>
        write_length_ += len;
    2270:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2274:	3301      	adds	r3, #1
    2276:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    227a:	b007      	add	sp, #28
    227c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2280:	2204      	movs	r2, #4
    2282:	4641      	mov	r1, r8
    2284:	4638      	mov	r0, r7
    2286:	f7ff fe2b 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    228a:	f24d 4202 	movw	r2, #54274	; 0xd402
    { if (write_get_length_) 
    228e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0xd402);  // Device friendly name
    2292:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    2296:	2b00      	cmp	r3, #0
    2298:	d18e      	bne.n	21b8 <MTPD::WriteDescriptor()+0x10c>
    229a:	2202      	movs	r2, #2
    229c:	4641      	mov	r1, r8
    229e:	4638      	mov	r0, r7
    22a0:	f7ff fe1e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    22a4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(0);       // Capture formats (array of uint16)
    22a8:	9601      	str	r6, [sp, #4]
    { if (write_get_length_) 
    22aa:	2b00      	cmp	r3, #0
    22ac:	d189      	bne.n	21c2 <MTPD::WriteDescriptor()+0x116>
    22ae:	2204      	movs	r2, #4
    22b0:	4641      	mov	r1, r8
    22b2:	4638      	mov	r0, r7
    22b4:	2402      	movs	r4, #2
    22b6:	f7ff fe13 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    22ba:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(2);       // Playback formats (array of uint16)
    22be:	9401      	str	r4, [sp, #4]
    { if (write_get_length_) 
    22c0:	2b00      	cmp	r3, #0
    22c2:	d183      	bne.n	21cc <MTPD::WriteDescriptor()+0x120>
    22c4:	2204      	movs	r2, #4
    22c6:	4641      	mov	r1, r8
    22c8:	4638      	mov	r0, r7
    22ca:	f7ff fe09 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    22ce:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    22d2:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3000);  // Undefined format
    22d6:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    22da:	2b00      	cmp	r3, #0
    22dc:	f47f af7b 	bne.w	21d6 <MTPD::WriteDescriptor()+0x12a>
    22e0:	4622      	mov	r2, r4
    22e2:	4641      	mov	r1, r8
    22e4:	4638      	mov	r0, r7
    22e6:	f7ff fdfb 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    22ea:	f243 0201 	movw	r2, #12289	; 0x3001
    22ee:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3001);  // Folders (associations)
    22f2:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    22f6:	2b00      	cmp	r3, #0
    22f8:	f47f af72 	bne.w	21e0 <MTPD::WriteDescriptor()+0x134>
    22fc:	4622      	mov	r2, r4
    22fe:	4641      	mov	r1, r8
    2300:	4638      	mov	r0, r7
    2302:	f7ff fded 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2306:	e770      	b.n	21ea <MTPD::WriteDescriptor()+0x13e>
    2308:	4641      	mov	r1, r8
    230a:	4638      	mov	r0, r7
    230c:	f7ff fde8 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2310:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    2314:	e726      	b.n	2164 <MTPD::WriteDescriptor()+0xb8>
    2316:	2202      	movs	r2, #2
    2318:	4641      	mov	r1, r8
    231a:	4638      	mov	r0, r7
    231c:	f7ff fde0 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2320:	2214      	movs	r2, #20
    2322:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(supported_op_num);
    2326:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2328:	2b00      	cmp	r3, #0
    232a:	f47f aeef 	bne.w	210c <MTPD::WriteDescriptor()+0x60>
    232e:	2204      	movs	r2, #4
    2330:	4641      	mov	r1, r8
    2332:	4638      	mov	r0, r7
    2334:	f7ff fdd4 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2338:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    233c:	e6ec      	b.n	2118 <MTPD::WriteDescriptor()+0x6c>
    233e:	f10d 0804 	add.w	r8, sp, #4
    2342:	2202      	movs	r2, #2
    2344:	4641      	mov	r1, r8
    2346:	f7ff fdcb 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    234a:	2206      	movs	r2, #6
    234c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(6);    // MTP extension
    2350:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2352:	2b00      	cmp	r3, #0
    2354:	f47f aebf 	bne.w	20d6 <MTPD::WriteDescriptor()+0x2a>
    2358:	2204      	movs	r2, #4
    235a:	4641      	mov	r1, r8
    235c:	4638      	mov	r0, r7
    235e:	f7ff fdbf 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2362:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(100);  // MTP version
    2366:	f8ad 4004 	strh.w	r4, [sp, #4]
    { if (write_get_length_) 
    236a:	2b00      	cmp	r3, #0
    236c:	f47f aeb8 	bne.w	20e0 <MTPD::WriteDescriptor()+0x34>
    2370:	2202      	movs	r2, #2
    2372:	4641      	mov	r1, r8
    2374:	4638      	mov	r0, r7
    2376:	f7ff fdb3 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    237a:	e6b6      	b.n	20ea <MTPD::WriteDescriptor()+0x3e>
    237c:	2201      	movs	r2, #1
    237e:	f10d 0103 	add.w	r1, sp, #3
    2382:	4638      	mov	r0, r7
    2384:	f7ff fdac 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2388:	b007      	add	sp, #28
    238a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    238e:	2201      	movs	r2, #1
    2390:	f10d 0103 	add.w	r1, sp, #3
    2394:	4638      	mov	r0, r7
    2396:	f7ff fda3 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    239a:	e741      	b.n	2220 <MTPD::WriteDescriptor()+0x174>
    239c:	20000b20 	.word	0x20000b20
    23a0:	20000950 	.word	0x20000950
    23a4:	20000978 	.word	0x20000978
    23a8:	20000b34 	.word	0x20000b34
    23ac:	20000b48 	.word	0x20000b48
    23b0:	3fcb851f 	.word	0x3fcb851f
    23b4:	20000b3c 	.word	0x20000b3c
    23b8:	2000946c 	.word	0x2000946c

000023bc <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    23bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23be:	4606      	mov	r6, r0
    uint32_t num=storage_->get_FSCount();
    23c0:	6800      	ldr	r0, [r0, #0]
    23c2:	4a1b      	ldr	r2, [pc, #108]	; (2430 <MTPD::WriteStorageIDs()+0x74>)
  void MTPD::WriteStorageIDs() {
    23c4:	b083      	sub	sp, #12
    uint32_t num=storage_->get_FSCount();
    23c6:	6803      	ldr	r3, [r0, #0]
    23c8:	685b      	ldr	r3, [r3, #4]
    23ca:	4293      	cmp	r3, r2
    23cc:	d12c      	bne.n	2428 <MTPD::WriteStorageIDs()+0x6c>
      uint32_t sd_getFSCount(void) {return fsCount;}
    23ce:	6847      	ldr	r7, [r0, #4]
    { if (write_get_length_) 
    23d0:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    23d4:	9701      	str	r7, [sp, #4]
    23d6:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    23da:	b1f3      	cbz	r3, 241a <MTPD::WriteStorageIDs()+0x5e>
        write_length_ += len;
    23dc:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    23e0:	3304      	adds	r3, #4
    23e2:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    23e6:	b1b7      	cbz	r7, 2416 <MTPD::WriteStorageIDs()+0x5a>
    23e8:	2400      	movs	r4, #0
    23ea:	e006      	b.n	23fa <MTPD::WriteStorageIDs()+0x3e>
        write_length_ += len;
    23ec:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    23f0:	42bc      	cmp	r4, r7
        write_length_ += len;
    23f2:	4413      	add	r3, r2
    23f4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    23f8:	d00d      	beq.n	2416 <MTPD::WriteStorageIDs()+0x5a>
    23fa:	3401      	adds	r4, #1
    23fc:	2204      	movs	r2, #4
    { if (write_get_length_) 
    23fe:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2402:	4630      	mov	r0, r6
    2404:	eb0d 0102 	add.w	r1, sp, r2
    2408:	9401      	str	r4, [sp, #4]
    240a:	2b00      	cmp	r3, #0
    240c:	d1ee      	bne.n	23ec <MTPD::WriteStorageIDs()+0x30>
    240e:	f7ff fd67 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2412:	42bc      	cmp	r4, r7
    2414:	d1f1      	bne.n	23fa <MTPD::WriteStorageIDs()+0x3e>
  }
    2416:	b003      	add	sp, #12
    2418:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241a:	2204      	movs	r2, #4
    241c:	4630      	mov	r0, r6
    241e:	eb0d 0102 	add.w	r1, sp, r2
    2422:	f7ff fd5d 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2426:	e7de      	b.n	23e6 <MTPD::WriteStorageIDs()+0x2a>
    uint32_t num=storage_->get_FSCount();
    2428:	4798      	blx	r3
    242a:	4607      	mov	r7, r0
    242c:	e7d0      	b.n	23d0 <MTPD::WriteStorageIDs()+0x14>
    242e:	bf00      	nop
    2430:	00001ed5 	.word	0x00001ed5

00002434 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    2434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2438:	4605      	mov	r5, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    243a:	6800      	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    243c:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    243e:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2440:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    2442:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2446:	4631      	mov	r1, r6
    2448:	695b      	ldr	r3, [r3, #20]
    244a:	4798      	blx	r3
    244c:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    244e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2452:	bf14      	ite	ne
    2454:	2201      	movne	r2, #1
    2456:	2204      	moveq	r2, #4
    2458:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    245c:	2b00      	cmp	r3, #0
    245e:	d07c      	beq.n	255a <MTPD::GetStorageInfo(unsigned long)+0x126>
        write_length_ += len;
    2460:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2464:	3302      	adds	r3, #2
    2466:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    246a:	6828      	ldr	r0, [r5, #0]
    246c:	4631      	mov	r1, r6
    246e:	6803      	ldr	r3, [r0, #0]
    2470:	699b      	ldr	r3, [r3, #24]
    2472:	4798      	blx	r3
    { if (write_get_length_) 
    2474:	f894 7424 	ldrb.w	r7, [r4, #1060]	; 0x424
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    2478:	3001      	adds	r0, #1
    247a:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    247e:	2f00      	cmp	r7, #0
    2480:	f000 80a7 	beq.w	25d2 <MTPD::GetStorageInfo(unsigned long)+0x19e>
        write_length_ += len;
    2484:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2488:	3302      	adds	r3, #2
    248a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    248e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2492:	3302      	adds	r3, #2
    2494:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    uint64_t ntotal = storage_->totalSize(store) ; 
    2498:	6828      	ldr	r0, [r5, #0]
    249a:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    249c:	f04f 0b00 	mov.w	fp, #0
    24a0:	6803      	ldr	r3, [r0, #0]
    24a2:	68db      	ldr	r3, [r3, #12]
    24a4:	4798      	blx	r3
    24a6:	4607      	mov	r7, r0
    uint64_t nused = storage_->usedSize(store) ; 
    24a8:	6828      	ldr	r0, [r5, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    24aa:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    24ac:	4631      	mov	r1, r6
    24ae:	6803      	ldr	r3, [r0, #0]
    24b0:	691b      	ldr	r3, [r3, #16]
    24b2:	4798      	blx	r3
    24b4:	4681      	mov	r9, r0
    24b6:	468a      	mov	sl, r1
    24b8:	4855      	ldr	r0, [pc, #340]	; (2610 <MTPD::GetStorageInfo(unsigned long)+0x1dc>)
    24ba:	2105      	movs	r1, #5
    24bc:	f00c fec6 	bl	f24c <usb_serial_write>
    24c0:	230a      	movs	r3, #10
    24c2:	463a      	mov	r2, r7
    24c4:	4853      	ldr	r0, [pc, #332]	; (2614 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    24c6:	9300      	str	r3, [sp, #0]
    24c8:	4643      	mov	r3, r8
    24ca:	f8cd b004 	str.w	fp, [sp, #4]
    24ce:	f00a fb73 	bl	cbb8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    24d2:	4850      	ldr	r0, [pc, #320]	; (2614 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    24d4:	f00a fb32 	bl	cb3c <Print::println()>
    24d8:	2105      	movs	r1, #5
    24da:	484f      	ldr	r0, [pc, #316]	; (2618 <MTPD::GetStorageInfo(unsigned long)+0x1e4>)
    24dc:	f00c feb6 	bl	f24c <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    24e0:	230a      	movs	r3, #10
    24e2:	464a      	mov	r2, r9
    24e4:	484b      	ldr	r0, [pc, #300]	; (2614 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    24e6:	9300      	str	r3, [sp, #0]
    24e8:	4653      	mov	r3, sl
    24ea:	f8cd b004 	str.w	fp, [sp, #4]
    24ee:	f00a fb63 	bl	cbb8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    24f2:	4848      	ldr	r0, [pc, #288]	; (2614 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    24f4:	f00a fb22 	bl	cb3c <Print::println()>
    { if (write_get_length_) 
    24f8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    24fc:	e9cd 7802 	strd	r7, r8, [sp, #8]
    2500:	2b00      	cmp	r3, #0
    2502:	d043      	beq.n	258c <MTPD::GetStorageInfo(unsigned long)+0x158>
        write_length_ += len;
    2504:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2508:	3308      	adds	r3, #8
    250a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    250e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2512:	3308      	adds	r3, #8
    2514:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2518:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    251c:	3304      	adds	r3, #4
    251e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    const char *name = storage_->get_FSName(store);
    2522:	6828      	ldr	r0, [r5, #0]
    2524:	4a3d      	ldr	r2, [pc, #244]	; (261c <MTPD::GetStorageInfo(unsigned long)+0x1e8>)
    2526:	6803      	ldr	r3, [r0, #0]
    2528:	689b      	ldr	r3, [r3, #8]
    252a:	4293      	cmp	r3, r2
    252c:	d16b      	bne.n	2606 <MTPD::GetStorageInfo(unsigned long)+0x1d2>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    252e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    2532:	6881      	ldr	r1, [r0, #8]
    if (*str) 
    2534:	780b      	ldrb	r3, [r1, #0]
    2536:	b1b3      	cbz	r3, 2566 <MTPD::GetStorageInfo(unsigned long)+0x132>
    2538:	4628      	mov	r0, r5
    253a:	f7ff fd0f 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    253e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    2542:	2200      	movs	r2, #0
    2544:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    2548:	b9c3      	cbnz	r3, 257c <MTPD::GetStorageInfo(unsigned long)+0x148>
    254a:	2201      	movs	r2, #1
    254c:	a902      	add	r1, sp, #8
    254e:	4628      	mov	r0, r5
    2550:	f7ff fcc6 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2554:	b005      	add	sp, #20
    2556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    255a:	2202      	movs	r2, #2
    255c:	a902      	add	r1, sp, #8
    255e:	4628      	mov	r0, r5
    2560:	f7ff fcbe 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2564:	e781      	b.n	246a <MTPD::GetStorageInfo(unsigned long)+0x36>
    { if (write_get_length_) 
    2566:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    256a:	f88d 3008 	strb.w	r3, [sp, #8]
    256e:	2a00      	cmp	r2, #0
    2570:	d041      	beq.n	25f6 <MTPD::GetStorageInfo(unsigned long)+0x1c2>
        write_length_ += len;
    2572:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2576:	3301      	adds	r3, #1
    2578:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    257c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2580:	3301      	adds	r3, #1
    2582:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2586:	b005      	add	sp, #20
    2588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    258c:	2208      	movs	r2, #8
    258e:	4628      	mov	r0, r5
    2590:	eb0d 0102 	add.w	r1, sp, r2
    2594:	f7ff fca4 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    2598:	ebb7 0709 	subs.w	r7, r7, r9
    259c:	eb68 030a 	sbc.w	r3, r8, sl
    25a0:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    25a4:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25a8:	2b00      	cmp	r3, #0
    25aa:	d1b0      	bne.n	250e <MTPD::GetStorageInfo(unsigned long)+0xda>
    25ac:	2208      	movs	r2, #8
    25ae:	4628      	mov	r0, r5
    25b0:	eb0d 0102 	add.w	r1, sp, r2
    25b4:	f7ff fc94 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    25b8:	f04f 32ff 	mov.w	r2, #4294967295
    25bc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write32(0xFFFFFFFFUL);  // free space (objects)
    25c0:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    25c2:	2b00      	cmp	r3, #0
    25c4:	d1a8      	bne.n	2518 <MTPD::GetStorageInfo(unsigned long)+0xe4>
    25c6:	2204      	movs	r2, #4
    25c8:	a902      	add	r1, sp, #8
    25ca:	4628      	mov	r0, r5
    25cc:	f7ff fc88 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    25d0:	e7a7      	b.n	2522 <MTPD::GetStorageInfo(unsigned long)+0xee>
    25d2:	2202      	movs	r2, #2
    25d4:	4628      	mov	r0, r5
    25d6:	a902      	add	r1, sp, #8
    25d8:	f7ff fc82 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    25dc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    25e0:	f8ad 7008 	strh.w	r7, [sp, #8]
    25e4:	2b00      	cmp	r3, #0
    25e6:	f47f af52 	bne.w	248e <MTPD::GetStorageInfo(unsigned long)+0x5a>
    25ea:	2202      	movs	r2, #2
    25ec:	a902      	add	r1, sp, #8
    25ee:	4628      	mov	r0, r5
    25f0:	f7ff fc76 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    25f4:	e750      	b.n	2498 <MTPD::GetStorageInfo(unsigned long)+0x64>
    25f6:	2201      	movs	r2, #1
    25f8:	a902      	add	r1, sp, #8
    25fa:	4628      	mov	r0, r5
    25fc:	f7ff fc70 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2600:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2604:	e79d      	b.n	2542 <MTPD::GetStorageInfo(unsigned long)+0x10e>
    const char *name = storage_->get_FSName(store);
    2606:	4631      	mov	r1, r6
    2608:	4798      	blx	r3
    260a:	4601      	mov	r1, r0
    260c:	e792      	b.n	2534 <MTPD::GetStorageInfo(unsigned long)+0x100>
    260e:	bf00      	nop
    2610:	20000b10 	.word	0x20000b10
    2614:	20008abc 	.word	0x20008abc
    2618:	20000b18 	.word	0x20000b18
    261c:	00001ed9 	.word	0x00001ed9

00002620 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    2620:	b570      	push	{r4, r5, r6, lr}
    2622:	4606      	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    2624:	6800      	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    2626:	1e4d      	subs	r5, r1, #1
    int num = 0;
    2628:	2400      	movs	r4, #0
    storage_->StartGetObjectHandles(store, parent);
    262a:	6803      	ldr	r3, [r0, #0]
    262c:	4629      	mov	r1, r5
    262e:	69db      	ldr	r3, [r3, #28]
    2630:	4798      	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    2632:	e000      	b.n	2636 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    2634:	3401      	adds	r4, #1
    2636:	6830      	ldr	r0, [r6, #0]
    2638:	4629      	mov	r1, r5
    263a:	6803      	ldr	r3, [r0, #0]
    263c:	6a1b      	ldr	r3, [r3, #32]
    263e:	4798      	blx	r3
    2640:	2800      	cmp	r0, #0
    2642:	d1f7      	bne.n	2634 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
  }
    2644:	4620      	mov	r0, r4
    2646:	bd70      	pop	{r4, r5, r6, pc}

00002648 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    264a:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    264e:	b083      	sub	sp, #12
    if (write_get_length_) {
    2650:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2654:	b13b      	cbz	r3, 2666 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    2656:	f7ff ffe3 	bl	2620 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    265a:	3001      	adds	r0, #1
      write_length_ *= 4;
    265c:	0080      	lsls	r0, r0, #2
    265e:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
  }
    2662:	b003      	add	sp, #12
    2664:	bdf0      	pop	{r4, r5, r6, r7, pc}
      write32(GetNumObjects(storage, parent));
    2666:	4604      	mov	r4, r0
    2668:	460e      	mov	r6, r1
    266a:	4617      	mov	r7, r2
    266c:	f7ff ffd8 	bl	2620 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    { if (write_get_length_) 
    2670:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2674:	9001      	str	r0, [sp, #4]
    2676:	bb13      	cbnz	r3, 26be <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x76>
    2678:	2204      	movs	r2, #4
    267a:	4620      	mov	r0, r4
    267c:	eb0d 0102 	add.w	r1, sp, r2
    2680:	f7ff fc2e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    2684:	6820      	ldr	r0, [r4, #0]
  { uint32_t store = Storage2Store(storage);
    2686:	3e01      	subs	r6, #1
      storage_->StartGetObjectHandles(store, parent);
    2688:	463a      	mov	r2, r7
    268a:	6803      	ldr	r3, [r0, #0]
    268c:	4631      	mov	r1, r6
    268e:	69db      	ldr	r3, [r3, #28]
    2690:	4798      	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2692:	6820      	ldr	r0, [r4, #0]
    2694:	4631      	mov	r1, r6
    2696:	6803      	ldr	r3, [r0, #0]
    2698:	6a1b      	ldr	r3, [r3, #32]
    269a:	4798      	blx	r3
        write_length_ += len;
    269c:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    269e:	4603      	mov	r3, r0
    26a0:	4620      	mov	r0, r4
    26a2:	eb0d 0102 	add.w	r1, sp, r2
    26a6:	2b00      	cmp	r3, #0
    26a8:	d0db      	beq.n	2662 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1a>
    { if (write_get_length_) 
    26aa:	f895 7424 	ldrb.w	r7, [r5, #1060]	; 0x424
    26ae:	9301      	str	r3, [sp, #4]
    26b0:	b15f      	cbz	r7, 26ca <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x82>
        write_length_ += len;
    26b2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    26b6:	3304      	adds	r3, #4
    26b8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    26bc:	e7e9      	b.n	2692 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>
    26be:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    26c2:	3304      	adds	r3, #4
    26c4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    26c8:	e7dc      	b.n	2684 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x3c>
    26ca:	f7ff fc09 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    26ce:	e7e0      	b.n	2692 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>

000026d0 <MTPD::GetObjectInfo(unsigned long)>:
  {
    26d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26d2:	4605      	mov	r5, r0
    26d4:	b0c7      	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    26d6:	6800      	ldr	r0, [r0, #0]
    26d8:	f10d 040a 	add.w	r4, sp, #10
    26dc:	af04      	add	r7, sp, #16
    26de:	6802      	ldr	r2, [r0, #0]
    26e0:	ab03      	add	r3, sp, #12
    26e2:	e9cd 7400 	strd	r7, r4, [sp]
    26e6:	6a56      	ldr	r6, [r2, #36]	; 0x24
    26e8:	aa06      	add	r2, sp, #24
    26ea:	47b0      	blx	r6
    uint32_t storage = Store2Storage(store);
    26ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    { if (write_get_length_) 
    26f0:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    uint32_t storage = Store2Storage(store);
    26f4:	3301      	adds	r3, #1
    26f6:	9305      	str	r3, [sp, #20]
    { if (write_get_length_) 
    26f8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    26fc:	2b00      	cmp	r3, #0
    26fe:	f000 8090 	beq.w	2822 <MTPD::GetObjectInfo(unsigned long)+0x152>
        write_length_ += len;
    2702:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2706:	3304      	adds	r3, #4
    2708:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    270c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2710:	3302      	adds	r3, #2
    2712:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2716:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    271a:	3302      	adds	r3, #2
    271c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2720:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2724:	3304      	adds	r3, #4
    2726:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    272a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    272e:	3302      	adds	r3, #2
    2730:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2734:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2738:	3304      	adds	r3, #4
    273a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    273e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2742:	3304      	adds	r3, #4
    2744:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2748:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    274c:	3304      	adds	r3, #4
    274e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2752:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2756:	3304      	adds	r3, #4
    2758:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    275c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2760:	3304      	adds	r3, #4
    2762:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2766:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    276a:	3304      	adds	r3, #4
    276c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2770:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2774:	3304      	adds	r3, #4
    2776:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    277a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    277e:	3302      	adds	r3, #2
    2780:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2784:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2788:	3304      	adds	r3, #4
    278a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    278e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2792:	3304      	adds	r3, #4
    2794:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    2798:	f89d 3018 	ldrb.w	r3, [sp, #24]
    279c:	b323      	cbz	r3, 27e8 <MTPD::GetObjectInfo(unsigned long)+0x118>
    279e:	a906      	add	r1, sp, #24
    27a0:	4628      	mov	r0, r5
    27a2:	f7ff fbdb 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    27a6:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    { write8(0);
    27aa:	2300      	movs	r3, #0
    27ac:	f88d 3014 	strb.w	r3, [sp, #20]
    { if (write_get_length_) 
    27b0:	bb36      	cbnz	r6, 2800 <MTPD::GetObjectInfo(unsigned long)+0x130>
    27b2:	2201      	movs	r2, #1
    27b4:	a905      	add	r1, sp, #20
    27b6:	4628      	mov	r0, r5
    27b8:	f7ff fb92 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    27bc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    27c0:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    27c4:	bb0b      	cbnz	r3, 280a <MTPD::GetObjectInfo(unsigned long)+0x13a>
    27c6:	2201      	movs	r2, #1
    27c8:	a905      	add	r1, sp, #20
    27ca:	4628      	mov	r0, r5
    27cc:	f7ff fb88 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    27d0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    27d4:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    27d8:	b9e3      	cbnz	r3, 2814 <MTPD::GetObjectInfo(unsigned long)+0x144>
    27da:	2201      	movs	r2, #1
    27dc:	a905      	add	r1, sp, #20
    27de:	4628      	mov	r0, r5
    27e0:	f7ff fb7e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
  }
    27e4:	b047      	add	sp, #284	; 0x11c
    27e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    27e8:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    27ec:	f88d 3014 	strb.w	r3, [sp, #20]
    27f0:	2a00      	cmp	r2, #0
    27f2:	f000 80c8 	beq.w	2986 <MTPD::GetObjectInfo(unsigned long)+0x2b6>
        write_length_ += len;
    27f6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    27fa:	3301      	adds	r3, #1
    27fc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2800:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2804:	3301      	adds	r3, #1
    2806:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    280a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    280e:	3301      	adds	r3, #1
    2810:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2814:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2818:	3301      	adds	r3, #1
    281a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    281e:	b047      	add	sp, #284	; 0x11c
    2820:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2822:	2204      	movs	r2, #4
    2824:	a905      	add	r1, sp, #20
    2826:	4628      	mov	r0, r5
    2828:	f7ff fb5a 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    282c:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    282e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2832:	3301      	adds	r3, #1
    2834:	f243 0301 	movw	r3, #12289	; 0x3001
    2838:	bf18      	it	ne
    283a:	2300      	movne	r3, #0
    283c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    2840:	2e00      	cmp	r6, #0
    2842:	f47f af63 	bne.w	270c <MTPD::GetObjectInfo(unsigned long)+0x3c>
    2846:	2202      	movs	r2, #2
    2848:	a905      	add	r1, sp, #20
    284a:	4628      	mov	r0, r5
    284c:	f7ff fb48 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2850:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2854:	f8ad 6014 	strh.w	r6, [sp, #20]
    2858:	2b00      	cmp	r3, #0
    285a:	f47f af5c 	bne.w	2716 <MTPD::GetObjectInfo(unsigned long)+0x46>
    285e:	2202      	movs	r2, #2
    2860:	a905      	add	r1, sp, #20
    2862:	4628      	mov	r0, r5
    2864:	f7ff fb3c 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2868:	9b03      	ldr	r3, [sp, #12]
    286a:	9305      	str	r3, [sp, #20]
    286c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2870:	2b00      	cmp	r3, #0
    2872:	f47f af55 	bne.w	2720 <MTPD::GetObjectInfo(unsigned long)+0x50>
    2876:	2204      	movs	r2, #4
    2878:	a905      	add	r1, sp, #20
    287a:	4628      	mov	r0, r5
    287c:	f7ff fb30 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2880:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2884:	f8ad 6014 	strh.w	r6, [sp, #20]
    2888:	2b00      	cmp	r3, #0
    288a:	f47f af4e 	bne.w	272a <MTPD::GetObjectInfo(unsigned long)+0x5a>
    288e:	2202      	movs	r2, #2
    2890:	a905      	add	r1, sp, #20
    2892:	4628      	mov	r0, r5
    2894:	f7ff fb24 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2898:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    289c:	9605      	str	r6, [sp, #20]
    289e:	2b00      	cmp	r3, #0
    28a0:	f47f af48 	bne.w	2734 <MTPD::GetObjectInfo(unsigned long)+0x64>
    28a4:	2204      	movs	r2, #4
    28a6:	a905      	add	r1, sp, #20
    28a8:	4628      	mov	r0, r5
    28aa:	f7ff fb19 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    28ae:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28b2:	9605      	str	r6, [sp, #20]
    28b4:	2b00      	cmp	r3, #0
    28b6:	f47f af42 	bne.w	273e <MTPD::GetObjectInfo(unsigned long)+0x6e>
    28ba:	2204      	movs	r2, #4
    28bc:	a905      	add	r1, sp, #20
    28be:	4628      	mov	r0, r5
    28c0:	f7ff fb0e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    28c4:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28c8:	9605      	str	r6, [sp, #20]
    28ca:	2b00      	cmp	r3, #0
    28cc:	f47f af3c 	bne.w	2748 <MTPD::GetObjectInfo(unsigned long)+0x78>
    28d0:	2204      	movs	r2, #4
    28d2:	a905      	add	r1, sp, #20
    28d4:	4628      	mov	r0, r5
    28d6:	f7ff fb03 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    28da:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28de:	9605      	str	r6, [sp, #20]
    28e0:	2b00      	cmp	r3, #0
    28e2:	f47f af36 	bne.w	2752 <MTPD::GetObjectInfo(unsigned long)+0x82>
    28e6:	2204      	movs	r2, #4
    28e8:	a905      	add	r1, sp, #20
    28ea:	4628      	mov	r0, r5
    28ec:	f7ff faf8 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    28f0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28f4:	9605      	str	r6, [sp, #20]
    28f6:	2b00      	cmp	r3, #0
    28f8:	f47f af30 	bne.w	275c <MTPD::GetObjectInfo(unsigned long)+0x8c>
    28fc:	2204      	movs	r2, #4
    28fe:	a905      	add	r1, sp, #20
    2900:	4628      	mov	r0, r5
    2902:	f7ff faed 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2906:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    290a:	9605      	str	r6, [sp, #20]
    290c:	2b00      	cmp	r3, #0
    290e:	f47f af2a 	bne.w	2766 <MTPD::GetObjectInfo(unsigned long)+0x96>
    2912:	2204      	movs	r2, #4
    2914:	a905      	add	r1, sp, #20
    2916:	4628      	mov	r0, r5
    2918:	f7ff fae2 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    291c:	683b      	ldr	r3, [r7, #0]
    291e:	9305      	str	r3, [sp, #20]
    2920:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2924:	2b00      	cmp	r3, #0
    2926:	f47f af23 	bne.w	2770 <MTPD::GetObjectInfo(unsigned long)+0xa0>
    292a:	2204      	movs	r2, #4
    292c:	a905      	add	r1, sp, #20
    292e:	4628      	mov	r0, r5
    2930:	f7ff fad6 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2934:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    2936:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    293a:	f1a3 33ff 	sub.w	r3, r3, #4294967295
    293e:	fab3 f383 	clz	r3, r3
    2942:	095b      	lsrs	r3, r3, #5
    2944:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    2948:	2e00      	cmp	r6, #0
    294a:	f47f af16 	bne.w	277a <MTPD::GetObjectInfo(unsigned long)+0xaa>
    294e:	2202      	movs	r2, #2
    2950:	a905      	add	r1, sp, #20
    2952:	4628      	mov	r0, r5
    2954:	f7ff fac4 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2958:	9605      	str	r6, [sp, #20]
    295a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    295e:	2e00      	cmp	r6, #0
    2960:	f47f af10 	bne.w	2784 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    2964:	2204      	movs	r2, #4
    2966:	a905      	add	r1, sp, #20
    2968:	4628      	mov	r0, r5
    296a:	f7ff fab9 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    296e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2972:	9605      	str	r6, [sp, #20]
    2974:	2b00      	cmp	r3, #0
    2976:	f47f af0a 	bne.w	278e <MTPD::GetObjectInfo(unsigned long)+0xbe>
    297a:	2204      	movs	r2, #4
    297c:	a905      	add	r1, sp, #20
    297e:	4628      	mov	r0, r5
    2980:	f7ff faae 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2984:	e708      	b.n	2798 <MTPD::GetObjectInfo(unsigned long)+0xc8>
    2986:	2201      	movs	r2, #1
    2988:	a905      	add	r1, sp, #20
    298a:	4628      	mov	r0, r5
    298c:	f7ff faa8 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2990:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2994:	e709      	b.n	27aa <MTPD::GetObjectInfo(unsigned long)+0xda>
    2996:	bf00      	nop

00002998 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    2998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    299c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2a1c <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    29a0:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    {
    29a4:	b082      	sub	sp, #8
    29a6:	4607      	mov	r7, r0
      write32(propertyListNum);
    29a8:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    29ac:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    29b0:	9301      	str	r3, [sp, #4]
    29b2:	b34a      	cbz	r2, 2a08 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    29b4:	f8d5 2428 	ldr.w	r2, [r5, #1064]	; 0x428
    29b8:	3204      	adds	r2, #4
    29ba:	f8c5 2428 	str.w	r2, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    29be:	b303      	cbz	r3, 2a02 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    29c0:	4e15      	ldr	r6, [pc, #84]	; (2a18 <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    29c2:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    29c6:	2400      	movs	r4, #0
    29c8:	e00b      	b.n	29e2 <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    29ca:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    29ce:	3401      	adds	r4, #1
        write_length_ += len;
    29d0:	4413      	add	r3, r2
    29d2:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    29d6:	f8d8 3000 	ldr.w	r3, [r8]
    29da:	42a3      	cmp	r3, r4
    29dc:	d911      	bls.n	2a02 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    29de:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    29e2:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    29e6:	2202      	movs	r2, #2
    29e8:	a901      	add	r1, sp, #4
    29ea:	4638      	mov	r0, r7
    29ec:	f8ad c004 	strh.w	ip, [sp, #4]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d1ea      	bne.n	29ca <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    29f4:	f7ff fa74 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    29f8:	3401      	adds	r4, #1
    29fa:	f8d8 3000 	ldr.w	r3, [r8]
    29fe:	42a3      	cmp	r3, r4
    2a00:	d8ed      	bhi.n	29de <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    2a02:	b002      	add	sp, #8
    2a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a08:	2204      	movs	r2, #4
    2a0a:	eb0d 0102 	add.w	r1, sp, r2
    2a0e:	f7ff fa67 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2a12:	f8d8 3000 	ldr.w	r3, [r8]
    2a16:	e7d2      	b.n	29be <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2a18:	20000940 	.word	0x20000940
    2a1c:	20009444 	.word	0x20009444

00002a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2a20:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    2a24:	440b      	add	r3, r1
    {
    2a26:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a28:	b085      	sub	sp, #20
      switch(p1)
    2a2a:	2b43      	cmp	r3, #67	; 0x43
    2a2c:	f200 808e 	bhi.w	2b4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2a30:	e8df f013 	tbh	[pc, r3, lsl #1]
    2a34:	010700b9 	.word	0x010700b9
    2a38:	01610125 	.word	0x01610125
    2a3c:	008c008c 	.word	0x008c008c
    2a40:	0196008e 	.word	0x0196008e
    2a44:	008c01a2 	.word	0x008c01a2
    2a48:	008c00d7 	.word	0x008c00d7
    2a4c:	008c008c 	.word	0x008c008c
    2a50:	008c008c 	.word	0x008c008c
    2a54:	008c008c 	.word	0x008c008c
    2a58:	008c008c 	.word	0x008c008c
    2a5c:	008c008c 	.word	0x008c008c
    2a60:	008c008c 	.word	0x008c008c
    2a64:	008c008c 	.word	0x008c008c
    2a68:	008c008c 	.word	0x008c008c
    2a6c:	008c008c 	.word	0x008c008c
    2a70:	008c008c 	.word	0x008c008c
    2a74:	008c008c 	.word	0x008c008c
    2a78:	008c008c 	.word	0x008c008c
    2a7c:	008c008c 	.word	0x008c008c
    2a80:	008c008c 	.word	0x008c008c
    2a84:	008c008c 	.word	0x008c008c
    2a88:	008c008c 	.word	0x008c008c
    2a8c:	008c008c 	.word	0x008c008c
    2a90:	008c008c 	.word	0x008c008c
    2a94:	008c008c 	.word	0x008c008c
    2a98:	008c008c 	.word	0x008c008c
    2a9c:	008c008c 	.word	0x008c008c
    2aa0:	008c008c 	.word	0x008c008c
    2aa4:	008c008c 	.word	0x008c008c
    2aa8:	008c008c 	.word	0x008c008c
    2aac:	008c008c 	.word	0x008c008c
    2ab0:	008c008c 	.word	0x008c008c
    2ab4:	008c01ae 	.word	0x008c01ae
    2ab8:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2abc:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2ac0:	f64d 4244 	movw	r2, #56388	; 0xdc44
    2ac4:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ac8:	f8ad 2008 	strh.w	r2, [sp, #8]
    2acc:	2b00      	cmp	r3, #0
    2ace:	d14a      	bne.n	2b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2ad0:	2202      	movs	r2, #2
    2ad2:	a902      	add	r1, sp, #8
    2ad4:	9001      	str	r0, [sp, #4]
    2ad6:	f7ff fa03 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ade:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2ae2:	9801      	ldr	r0, [sp, #4]
    2ae4:	f8ad 3008 	strh.w	r3, [sp, #8]
    2ae8:	2e00      	cmp	r6, #0
    2aea:	d141      	bne.n	2b70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2aec:	2202      	movs	r2, #2
    2aee:	a902      	add	r1, sp, #8
    2af0:	9001      	str	r0, [sp, #4]
    2af2:	f7ff f9f5 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2af6:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2afa:	9801      	ldr	r0, [sp, #4]
    2afc:	f88d 6008 	strb.w	r6, [sp, #8]
    2b00:	2d00      	cmp	r5, #0
    2b02:	d13a      	bne.n	2b7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2b04:	2201      	movs	r2, #1
    2b06:	a902      	add	r1, sp, #8
    2b08:	9001      	str	r0, [sp, #4]
    2b0a:	f7ff f9e9 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2b0e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2b12:	9801      	ldr	r0, [sp, #4]
    2b14:	f88d 5008 	strb.w	r5, [sp, #8]
    2b18:	bba6      	cbnz	r6, 2b84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2b1a:	2201      	movs	r2, #1
    2b1c:	a902      	add	r1, sp, #8
    2b1e:	9001      	str	r0, [sp, #4]
    2b20:	f7ff f9de 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2b24:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2b28:	9801      	ldr	r0, [sp, #4]
    2b2a:	9602      	str	r6, [sp, #8]
    2b2c:	bb7d      	cbnz	r5, 2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2b2e:	2204      	movs	r2, #4
    2b30:	a902      	add	r1, sp, #8
    2b32:	9001      	str	r0, [sp, #4]
    2b34:	f7ff f9d4 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2b38:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b3c:	9801      	ldr	r0, [sp, #4]
    2b3e:	f88d 5008 	strb.w	r5, [sp, #8]
    2b42:	bb4b      	cbnz	r3, 2b98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    2b44:	2201      	movs	r2, #1
    2b46:	a902      	add	r1, sp, #8
    2b48:	f7ff f9ca 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2b4c:	b005      	add	sp, #20
    2b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2b50:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2b54:	f64d 4207 	movw	r2, #56327	; 0xdc07
    2b58:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b5c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2b60:	2b00      	cmp	r3, #0
    2b62:	f000 8170 	beq.w	2e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    2b66:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b6a:	3302      	adds	r3, #2
    2b6c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b70:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b74:	3302      	adds	r3, #2
    2b76:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b7a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b7e:	3301      	adds	r3, #1
    2b80:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b84:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b88:	3301      	adds	r3, #1
    2b8a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b8e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b92:	3304      	adds	r3, #4
    2b94:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2b98:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2b9c:	3301      	adds	r3, #1
    2b9e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    }
    2ba2:	b005      	add	sp, #20
    2ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2ba6:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2baa:	f64d 4201 	movw	r2, #56321	; 0xdc01
    2bae:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2bb2:	f8ad 2008 	strh.w	r2, [sp, #8]
    2bb6:	b1f3      	cbz	r3, 2bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    2bb8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2bbc:	3302      	adds	r3, #2
    2bbe:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2bc2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2bc6:	3302      	adds	r3, #2
    2bc8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2bcc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2bd0:	3301      	adds	r3, #1
    2bd2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2bd6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2bda:	3304      	adds	r3, #4
    2bdc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2be0:	e7d5      	b.n	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2be2:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2be6:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    2bea:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2bee:	f8ad 2008 	strh.w	r2, [sp, #8]
    2bf2:	2b00      	cmp	r3, #0
    2bf4:	d1e0      	bne.n	2bb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    2bf6:	2202      	movs	r2, #2
    2bf8:	a902      	add	r1, sp, #8
    2bfa:	9001      	str	r0, [sp, #4]
    2bfc:	f7ff f970 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2c00:	2306      	movs	r3, #6
    2c02:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2c06:	9801      	ldr	r0, [sp, #4]
    2c08:	f8ad 3008 	strh.w	r3, [sp, #8]
    2c0c:	2e00      	cmp	r6, #0
    2c0e:	d1d8      	bne.n	2bc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    2c10:	2202      	movs	r2, #2
    2c12:	a902      	add	r1, sp, #8
    2c14:	9001      	str	r0, [sp, #4]
    2c16:	f7ff f963 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2c1a:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2c1e:	9801      	ldr	r0, [sp, #4]
    2c20:	f88d 6008 	strb.w	r6, [sp, #8]
    2c24:	2d00      	cmp	r5, #0
    2c26:	d1d1      	bne.n	2bcc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    2c28:	2201      	movs	r2, #1
    2c2a:	a902      	add	r1, sp, #8
    2c2c:	9001      	str	r0, [sp, #4]
    2c2e:	f7ff f957 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2c32:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2c36:	9801      	ldr	r0, [sp, #4]
    2c38:	9502      	str	r5, [sp, #8]
    2c3a:	2e00      	cmp	r6, #0
    2c3c:	d1cb      	bne.n	2bd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    2c3e:	2204      	movs	r2, #4
    2c40:	e76c      	b.n	2b1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2c42:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2c46:	f64d 4202 	movw	r2, #56322	; 0xdc02
    2c4a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2c4e:	f8ad 2008 	strh.w	r2, [sp, #8]
    2c52:	b1f3      	cbz	r3, 2c92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    2c54:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c58:	3302      	adds	r3, #2
    2c5a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2c5e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c62:	3302      	adds	r3, #2
    2c64:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2c68:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c6c:	3301      	adds	r3, #1
    2c6e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2c72:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2c76:	3302      	adds	r3, #2
    2c78:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2c7c:	e787      	b.n	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2c7e:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2c82:	f64d 4203 	movw	r2, #56323	; 0xdc03
    2c86:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2c8a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	d1e0      	bne.n	2c54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    2c92:	2202      	movs	r2, #2
    2c94:	a902      	add	r1, sp, #8
    2c96:	9001      	str	r0, [sp, #4]
    2c98:	2604      	movs	r6, #4
    2c9a:	f7ff f921 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2c9e:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2ca2:	9801      	ldr	r0, [sp, #4]
    2ca4:	f8ad 6008 	strh.w	r6, [sp, #8]
    2ca8:	2d00      	cmp	r5, #0
    2caa:	d1d8      	bne.n	2c5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    2cac:	2202      	movs	r2, #2
    2cae:	a902      	add	r1, sp, #8
    2cb0:	9001      	str	r0, [sp, #4]
    2cb2:	f7ff f915 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2cb6:	f88d 5008 	strb.w	r5, [sp, #8]
    2cba:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2cbe:	9801      	ldr	r0, [sp, #4]
    2cc0:	2d00      	cmp	r5, #0
    2cc2:	d1d1      	bne.n	2c68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    2cc4:	2201      	movs	r2, #1
    2cc6:	a902      	add	r1, sp, #8
    2cc8:	9001      	str	r0, [sp, #4]
    2cca:	f7ff f909 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2cce:	f8ad 5008 	strh.w	r5, [sp, #8]
    2cd2:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2cd6:	9801      	ldr	r0, [sp, #4]
    2cd8:	2d00      	cmp	r5, #0
    2cda:	d1ca      	bne.n	2c72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    2cdc:	2202      	movs	r2, #2
    2cde:	a902      	add	r1, sp, #8
    2ce0:	9001      	str	r0, [sp, #4]
    2ce2:	f7ff f8fd 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2ce6:	9502      	str	r5, [sp, #8]
    2ce8:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2cec:	9801      	ldr	r0, [sp, #4]
    2cee:	2d00      	cmp	r5, #0
    2cf0:	f43f af1d 	beq.w	2b2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    2cf4:	e74b      	b.n	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2cf6:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2cfa:	f64d 4204 	movw	r2, #56324	; 0xdc04
    2cfe:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d02:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d06:	2b00      	cmp	r3, #0
    2d08:	f040 80e1 	bne.w	2ece <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    2d0c:	2202      	movs	r2, #2
    2d0e:	a902      	add	r1, sp, #8
    2d10:	9001      	str	r0, [sp, #4]
    2d12:	2508      	movs	r5, #8
    2d14:	f7ff f8e4 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2d18:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2d1c:	9801      	ldr	r0, [sp, #4]
    2d1e:	f8ad 5008 	strh.w	r5, [sp, #8]
    2d22:	2e00      	cmp	r6, #0
    2d24:	f040 80d8 	bne.w	2ed8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    2d28:	2202      	movs	r2, #2
    2d2a:	a902      	add	r1, sp, #8
    2d2c:	9001      	str	r0, [sp, #4]
    2d2e:	f7ff f8d7 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2d32:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d36:	9801      	ldr	r0, [sp, #4]
    2d38:	f88d 6008 	strb.w	r6, [sp, #8]
    2d3c:	2b00      	cmp	r3, #0
    2d3e:	f040 80d0 	bne.w	2ee2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    2d42:	2201      	movs	r2, #1
    2d44:	a902      	add	r1, sp, #8
    2d46:	9001      	str	r0, [sp, #4]
    2d48:	f7ff f8ca 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2d4c:	2200      	movs	r2, #0
    2d4e:	2300      	movs	r3, #0
    2d50:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2d54:	9801      	ldr	r0, [sp, #4]
    2d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2d5a:	bbb6      	cbnz	r6, 2dca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2d5c:	462a      	mov	r2, r5
    2d5e:	e6dd      	b.n	2b1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2d60:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d64:	f64d 4208 	movw	r2, #56328	; 0xdc08
    2d68:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d6c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d70:	2b00      	cmp	r3, #0
    2d72:	f43f aead 	beq.w	2ad0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2d76:	e6f6      	b.n	2b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2d78:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d7c:	f64d 4209 	movw	r2, #56329	; 0xdc09
    2d80:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d84:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d88:	2b00      	cmp	r3, #0
    2d8a:	f43f aea1 	beq.w	2ad0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2d8e:	e6ea      	b.n	2b66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2d90:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d94:	f64d 4241 	movw	r2, #56385	; 0xdc41
    2d98:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d9c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2da0:	b1cb      	cbz	r3, 2dd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    2da2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2da6:	3302      	adds	r3, #2
    2da8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2dac:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2db0:	3302      	adds	r3, #2
    2db2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2db6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2dba:	3301      	adds	r3, #1
    2dbc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2dc0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2dc4:	3308      	adds	r3, #8
    2dc6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2dca:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2dce:	3308      	adds	r3, #8
    2dd0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2dd4:	e6db      	b.n	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2dd6:	2202      	movs	r2, #2
    2dd8:	a902      	add	r1, sp, #8
    2dda:	9001      	str	r0, [sp, #4]
    2ddc:	f7ff f880 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2de0:	230a      	movs	r3, #10
    2de2:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2de6:	9801      	ldr	r0, [sp, #4]
    2de8:	f8ad 3008 	strh.w	r3, [sp, #8]
    2dec:	2d00      	cmp	r5, #0
    2dee:	d1dd      	bne.n	2dac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    2df0:	2202      	movs	r2, #2
    2df2:	a902      	add	r1, sp, #8
    2df4:	9001      	str	r0, [sp, #4]
    2df6:	f7ff f873 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2dfa:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2dfe:	9801      	ldr	r0, [sp, #4]
    2e00:	f88d 5008 	strb.w	r5, [sp, #8]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d1d6      	bne.n	2db6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    2e08:	2201      	movs	r2, #1
    2e0a:	a902      	add	r1, sp, #8
    2e0c:	9001      	str	r0, [sp, #4]
    2e0e:	2600      	movs	r6, #0
    2e10:	f7ff f866 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2e14:	2700      	movs	r7, #0
    2e16:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2e1a:	9801      	ldr	r0, [sp, #4]
    2e1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2e20:	2b00      	cmp	r3, #0
    2e22:	d1cd      	bne.n	2dc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2e24:	2208      	movs	r2, #8
    2e26:	9001      	str	r0, [sp, #4]
    2e28:	eb0d 0102 	add.w	r1, sp, r2
    2e2c:	f7ff f858 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2e30:	9801      	ldr	r0, [sp, #4]
    2e32:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2e36:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2e3a:	2e00      	cmp	r6, #0
    2e3c:	d1c5      	bne.n	2dca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2e3e:	2208      	movs	r2, #8
    2e40:	eb0d 0102 	add.w	r1, sp, r2
    2e44:	e66b      	b.n	2b1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    2e46:	2202      	movs	r2, #2
    2e48:	a902      	add	r1, sp, #8
    2e4a:	9001      	str	r0, [sp, #4]
    2e4c:	f7ff f848 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2e54:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2e58:	9801      	ldr	r0, [sp, #4]
    2e5a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	f47f ae86 	bne.w	2b70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2e64:	2202      	movs	r2, #2
    2e66:	a902      	add	r1, sp, #8
    2e68:	9001      	str	r0, [sp, #4]
    2e6a:	2501      	movs	r5, #1
    2e6c:	f7ff f838 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2e70:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2e74:	9801      	ldr	r0, [sp, #4]
    2e76:	f88d 5008 	strb.w	r5, [sp, #8]
    2e7a:	2e00      	cmp	r6, #0
    2e7c:	f47f ae7d 	bne.w	2b7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2e80:	462a      	mov	r2, r5
    2e82:	a902      	add	r1, sp, #8
    2e84:	9001      	str	r0, [sp, #4]
    2e86:	f7ff f82b 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2e8a:	f88d 6008 	strb.w	r6, [sp, #8]
    2e8e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2e92:	9801      	ldr	r0, [sp, #4]
    2e94:	2e00      	cmp	r6, #0
    2e96:	f47f ae75 	bne.w	2b84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2e9a:	462a      	mov	r2, r5
    2e9c:	a902      	add	r1, sp, #8
    2e9e:	9001      	str	r0, [sp, #4]
    2ea0:	f7ff f81e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2ea4:	9602      	str	r6, [sp, #8]
    2ea6:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2eaa:	9801      	ldr	r0, [sp, #4]
    2eac:	2e00      	cmp	r6, #0
    2eae:	f47f ae6e 	bne.w	2b8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2eb2:	2204      	movs	r2, #4
    2eb4:	a902      	add	r1, sp, #8
    2eb6:	9001      	str	r0, [sp, #4]
    2eb8:	f7ff f812 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2ebc:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ec0:	9801      	ldr	r0, [sp, #4]
    2ec2:	f88d 6008 	strb.w	r6, [sp, #8]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	f43f ae3c 	beq.w	2b44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    2ecc:	e664      	b.n	2b98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    2ece:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2ed2:	3302      	adds	r3, #2
    2ed4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2ed8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2edc:	3302      	adds	r3, #2
    2ede:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2ee2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2ee6:	3301      	adds	r3, #1
    2ee8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2eec:	e76d      	b.n	2dca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2eee:	bf00      	nop

00002ef0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    2ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ef4:	4604      	mov	r4, r0
    2ef6:	b0c7      	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2ef8:	6800      	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    2efa:	4615      	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2efc:	f10d 070a 	add.w	r7, sp, #10
    2f00:	f10d 0810 	add.w	r8, sp, #16
    2f04:	6803      	ldr	r3, [r0, #0]
    2f06:	aa06      	add	r2, sp, #24
    2f08:	9701      	str	r7, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    2f0a:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    2f0c:	f8cd 8000 	str.w	r8, [sp]
    2f10:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    2f14:	ab03      	add	r3, sp, #12
    2f16:	47c8      	blx	r9
      switch(p2)
    2f18:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    2f1c:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    2f1e:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    2f20:	9903      	ldr	r1, [sp, #12]
      uint32_t storage = Store2Storage(store);
    2f22:	1c55      	adds	r5, r2, #1
      switch(p2)
    2f24:	2b43      	cmp	r3, #67	; 0x43
    2f26:	d851      	bhi.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    2f28:	e8df f003 	tbb	[pc, r3]
    2f2c:	96baa789 	.word	0x96baa789
    2f30:	5b535050 	.word	0x5b535050
    2f34:	5077505b 	.word	0x5077505b
    2f38:	50505050 	.word	0x50505050
    2f3c:	50505050 	.word	0x50505050
    2f40:	50505050 	.word	0x50505050
    2f44:	50505050 	.word	0x50505050
    2f48:	50505050 	.word	0x50505050
    2f4c:	50505050 	.word	0x50505050
    2f50:	50505050 	.word	0x50505050
    2f54:	50505050 	.word	0x50505050
    2f58:	50505050 	.word	0x50505050
    2f5c:	50505050 	.word	0x50505050
    2f60:	50505050 	.word	0x50505050
    2f64:	50505050 	.word	0x50505050
    2f68:	50505050 	.word	0x50505050
    2f6c:	53505022 	.word	0x53505022
          write32(p1);
    2f70:	9605      	str	r6, [sp, #20]
    { if (write_get_length_) 
    2f72:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    2f76:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	f040 80b6 	bne.w	30ec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1fc>
    2f80:	2204      	movs	r2, #4
    2f82:	a905      	add	r1, sp, #20
    2f84:	4620      	mov	r0, r4
    2f86:	f7fe ffab 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2f8a:	f8d8 3000 	ldr.w	r3, [r8]
    2f8e:	9305      	str	r3, [sp, #20]
    2f90:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    2f94:	2b00      	cmp	r3, #0
    2f96:	f040 80ae 	bne.w	30f6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x206>
    2f9a:	2204      	movs	r2, #4
    2f9c:	a905      	add	r1, sp, #20
    2f9e:	4620      	mov	r0, r4
    2fa0:	f7fe ff9e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2fa4:	f896 7424 	ldrb.w	r7, [r6, #1060]	; 0x424
          write32(storage);
    2fa8:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    2faa:	2f00      	cmp	r7, #0
    2fac:	d15a      	bne.n	3064 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    2fae:	2204      	movs	r2, #4
    2fb0:	a905      	add	r1, sp, #20
    2fb2:	4620      	mov	r0, r4
    2fb4:	f7fe ff94 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    2fb8:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    2fbc:	9705      	str	r7, [sp, #20]
    { if (write_get_length_) 
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d155      	bne.n	306e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
    2fc2:	2204      	movs	r2, #4
    2fc4:	a905      	add	r1, sp, #20
    2fc6:	4620      	mov	r0, r4
    2fc8:	f7fe ff8a 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2fcc:	b047      	add	sp, #284	; 0x11c
    2fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*str) 
    2fd2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2fd6:	b193      	cbz	r3, 2ffe <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10e>
    2fd8:	a906      	add	r1, sp, #24
    2fda:	4620      	mov	r0, r4
    2fdc:	f7fe ffbe 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
    2fe0:	e7f4      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2fe2:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    2fe6:	2100      	movs	r1, #0
    2fe8:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    2fec:	f88d 1014 	strb.w	r1, [sp, #20]
    2ff0:	b16a      	cbz	r2, 300e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x11e>
        write_length_ += len;
    2ff2:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    2ff6:	3201      	adds	r2, #1
    2ff8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    2ffc:	e7e6      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    2ffe:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
    3002:	f88d 3014 	strb.w	r3, [sp, #20]
    3006:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
    300a:	2900      	cmp	r1, #0
    300c:	d156      	bne.n	30bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    300e:	2201      	movs	r2, #1
    3010:	a905      	add	r1, sp, #20
    3012:	4620      	mov	r0, r4
    3014:	f7fe ff64 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    }
    3018:	e7d8      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write32((store==parent)? 0: parent);
    301a:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    301e:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
          write32((store==parent)? 0: parent);
    3022:	429a      	cmp	r2, r3
    3024:	bf08      	it	eq
    3026:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    3028:	f891 2424 	ldrb.w	r2, [r1, #1060]	; 0x424
    302c:	9305      	str	r3, [sp, #20]
    302e:	2a00      	cmp	r2, #0
    3030:	d0c7      	beq.n	2fc2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    3032:	f8d1 3428 	ldr.w	r3, [r1, #1064]	; 0x428
    3036:	3304      	adds	r3, #4
    3038:	f8c1 3428 	str.w	r3, [r1, #1064]	; 0x428
    303c:	e7c6      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    303e:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    3042:	9505      	str	r5, [sp, #20]
    3044:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    3048:	2a00      	cmp	r2, #0
    304a:	d0ba      	beq.n	2fc2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    304c:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    3050:	3204      	adds	r2, #4
    3052:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    3056:	e7b9      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    3058:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    305c:	9105      	str	r1, [sp, #20]
    305e:	f896 5424 	ldrb.w	r5, [r6, #1060]	; 0x424
    3062:	b3bd      	cbz	r5, 30d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e4>
        write_length_ += len;
    3064:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    3068:	3304      	adds	r3, #4
    306a:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    306e:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    3072:	3304      	adds	r3, #4
    3074:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    3078:	e7a8      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write16(dir?0x3001:0x3000);
    307a:	3101      	adds	r1, #1
    { if (write_get_length_) 
    307c:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
          write16(dir?0x3001:0x3000);
    3080:	f243 0301 	movw	r3, #12289	; 0x3001
    { if (write_get_length_) 
    3084:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
          write16(dir?0x3001:0x3000);
    3088:	bf18      	it	ne
    308a:	f44f 5340 	movne.w	r3, #12288	; 0x3000
    308e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3092:	b169      	cbz	r1, 30b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c0>
        write_length_ += len;
    3094:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    3098:	3302      	adds	r3, #2
    309a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    309e:	e795      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    30a0:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    30a4:	2100      	movs	r1, #0
    30a6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    30aa:	f8ad 1014 	strh.w	r1, [sp, #20]
    30ae:	b95a      	cbnz	r2, 30c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d8>
    30b0:	2202      	movs	r2, #2
    30b2:	a905      	add	r1, sp, #20
    30b4:	4620      	mov	r0, r4
    30b6:	f7fe ff13 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
          break;
    30ba:	e787      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
    30bc:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    30c0:	3301      	adds	r3, #1
    30c2:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    30c6:	e781      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    30c8:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    30cc:	3202      	adds	r2, #2
    30ce:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    30d2:	e77b      	b.n	2fcc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    30d4:	2204      	movs	r2, #4
    30d6:	a905      	add	r1, sp, #20
    30d8:	4620      	mov	r0, r4
    30da:	f7fe ff01 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    30de:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    30e2:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    30e4:	2b00      	cmp	r3, #0
    30e6:	f43f af6c 	beq.w	2fc2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
    30ea:	e7c0      	b.n	306e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
        write_length_ += len;
    30ec:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    30f0:	3304      	adds	r3, #4
    30f2:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    30f6:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    30fa:	3304      	adds	r3, #4
    30fc:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    { if (write_get_length_) 
    3100:	e7b0      	b.n	3064 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    3102:	bf00      	nop

00003104 <MTPD::GetObject(unsigned long)>:
    {
    3104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3108:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    310a:	6800      	ldr	r0, [r0, #0]
    310c:	6803      	ldr	r3, [r0, #0]
      if (write_get_length_) {
    310e:	f50b 5800 	add.w	r8, fp, #8192	; 0x2000
    {
    3112:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    3118:	b085      	sub	sp, #20
    311a:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    311e:	4798      	blx	r3
      if (write_get_length_) {
    3120:	f898 6424 	ldrb.w	r6, [r8, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    3124:	4682      	mov	sl, r0
      if (write_get_length_) {
    3126:	b14e      	cbz	r6, 313c <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    3128:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    312c:	4403      	add	r3, r0
    312e:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    }
    3132:	b005      	add	sp, #20
    3134:	ecbd 8b02 	vpop	{d8}
    3138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    313c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    3140:	f8c8 4420 	str.w	r4, [r8, #1056]	; 0x420
        while(pos<size)
    3144:	2800      	cmp	r0, #0
    3146:	d060      	beq.n	320a <MTPD::GetObject(unsigned long)+0x106>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3148:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    314c:	f50b 7908 	add.w	r9, fp, #544	; 0x220
            disk_pos=0;
    3150:	f8cd b00c 	str.w	fp, [sp, #12]
        uint32_t len = sizeof(MTPHeader);
    3154:	250c      	movs	r5, #12
            disk_pos=0;
    3156:	469b      	mov	fp, r3
    3158:	e022      	b.n	31a0 <MTPD::GetObject(unsigned long)+0x9c>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    315a:	ebaa 0306 	sub.w	r3, sl, r6
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    315e:	eb0b 0104 	add.w	r1, fp, r4
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3162:	9302      	str	r3, [sp, #8]
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3164:	f5c4 5300 	rsb	r3, r4, #8192	; 0x2000
    3168:	9f02      	ldr	r7, [sp, #8]
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    316a:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    316e:	eb09 0005 	add.w	r0, r9, r5
    3172:	429f      	cmp	r7, r3
    3174:	bf28      	it	cs
    3176:	461f      	movcs	r7, r3
    3178:	4297      	cmp	r7, r2
    317a:	bf28      	it	cs
    317c:	4617      	movcs	r7, r2
    317e:	463a      	mov	r2, r7
          len += to_copy;
    3180:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3182:	f00a fae3 	bl	d74c <memcpy>
          disk_pos += to_copy;
    3186:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    318a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    318e:	443e      	add	r6, r7
          disk_pos += to_copy;
    3190:	443b      	add	r3, r7
    3192:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3196:	d021      	beq.n	31dc <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    3198:	45b2      	cmp	sl, r6
    319a:	d92b      	bls.n	31f4 <MTPD::GetObject(unsigned long)+0xf0>
          if(disk_pos==DISK_BUFFER_SIZE)
    319c:	f8d8 4420 	ldr.w	r4, [r8, #1056]	; 0x420
    31a0:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    31a4:	d1d9      	bne.n	315a <MTPD::GetObject(unsigned long)+0x56>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    31a6:	ebaa 0706 	sub.w	r7, sl, r6
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    31aa:	9b03      	ldr	r3, [sp, #12]
    31ac:	4632      	mov	r2, r6
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    31ae:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    31b2:	6818      	ldr	r0, [r3, #0]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    31b4:	9702      	str	r7, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    31b6:	465b      	mov	r3, fp
    31b8:	6801      	ldr	r1, [r0, #0]
    31ba:	bf34      	ite	cc
    31bc:	46bc      	movcc	ip, r7
    31be:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    31c2:	f8cd c000 	str.w	ip, [sp]
    31c6:	6b09      	ldr	r1, [r1, #48]	; 0x30
    31c8:	460f      	mov	r7, r1
    31ca:	ee18 1a10 	vmov	r1, s16
    31ce:	47b8      	blx	r7
            disk_pos=0;
    31d0:	2200      	movs	r2, #0
    31d2:	4623      	mov	r3, r4
    31d4:	4659      	mov	r1, fp
    31d6:	f8c8 2420 	str.w	r2, [r8, #1056]	; 0x420
    31da:	e7c5      	b.n	3168 <MTPD::GetObject(unsigned long)+0x64>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    31dc:	223c      	movs	r2, #60	; 0x3c
    31de:	f44f 7100 	mov.w	r1, #512	; 0x200
    31e2:	4648      	mov	r0, r9
    31e4:	f00b fca0 	bl	eb28 <usb_mtp_send>
    31e8:	2800      	cmp	r0, #0
    31ea:	ddf7      	ble.n	31dc <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    31ec:	45b2      	cmp	sl, r6
            len=0;
    31ee:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    31f2:	d8d3      	bhi.n	319c <MTPD::GetObject(unsigned long)+0x98>
        if(len>0)
    31f4:	2d00      	cmp	r5, #0
    31f6:	d09c      	beq.n	3132 <MTPD::GetObject(unsigned long)+0x2e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    31f8:	223c      	movs	r2, #60	; 0x3c
    31fa:	f44f 7100 	mov.w	r1, #512	; 0x200
    31fe:	4648      	mov	r0, r9
    3200:	f00b fc92 	bl	eb28 <usb_mtp_send>
    3204:	2800      	cmp	r0, #0
    3206:	ddf7      	ble.n	31f8 <MTPD::GetObject(unsigned long)+0xf4>
    3208:	e793      	b.n	3132 <MTPD::GetObject(unsigned long)+0x2e>
    320a:	f50b 7908 	add.w	r9, fp, #544	; 0x220
    320e:	e7f3      	b.n	31f8 <MTPD::GetObject(unsigned long)+0xf4>

00003210 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    3210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3214:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    3216:	6800      	ldr	r0, [r0, #0]
    {
    3218:	461c      	mov	r4, r3
    321a:	4615      	mov	r5, r2
      uint32_t size = storage_->GetSize(object_id);
    321c:	6803      	ldr	r3, [r0, #0]
    {
    321e:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    3224:	b087      	sub	sp, #28
    3226:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    322a:	4798      	blx	r3
      if(NumBytes == 0xffffffff) NumBytes=size;
    322c:	1c63      	adds	r3, r4, #1
      size -= offset;
    322e:	eba0 0805 	sub.w	r8, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    3232:	d002      	beq.n	323a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x2a>
    3234:	45a0      	cmp	r8, r4
    3236:	bf28      	it	cs
    3238:	46a0      	movcs	r8, r4
      if (write_get_length_) {
    323a:	f50b 5700 	add.w	r7, fp, #8192	; 0x2000
    323e:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
    3242:	9304      	str	r3, [sp, #16]
    3244:	b153      	cbz	r3, 325c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    3246:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    324a:	4443      	add	r3, r8
    324c:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    }
    3250:	4640      	mov	r0, r8
    3252:	b007      	add	sp, #28
    3254:	ecbd 8b02 	vpop	{d8}
    3258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    325c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
        while(pos<size)
    3260:	4545      	cmp	r5, r8
        disk_pos=DISK_BUFFER_SIZE;
    3262:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
        while(pos<size)
    3266:	d2f3      	bcs.n	3250 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3268:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    326c:	f50b 7a08 	add.w	sl, fp, #544	; 0x220
        uint32_t len = sizeof(MTPHeader);
    3270:	f8cd b014 	str.w	fp, [sp, #20]
    3274:	260c      	movs	r6, #12
    3276:	469b      	mov	fp, r3
    3278:	9403      	str	r4, [sp, #12]
    327a:	e01f      	b.n	32bc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xac>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    327c:	f5c2 5300 	rsb	r3, r2, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3280:	445a      	add	r2, fp
    3282:	4611      	mov	r1, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3284:	454b      	cmp	r3, r9
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3286:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    328a:	eb0a 0006 	add.w	r0, sl, r6
    328e:	bf28      	it	cs
    3290:	464b      	movcs	r3, r9
    3292:	429c      	cmp	r4, r3
    3294:	bf28      	it	cs
    3296:	461c      	movcs	r4, r3
    3298:	4622      	mov	r2, r4
          len += to_copy;
    329a:	4426      	add	r6, r4
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    329c:	f00a fa56 	bl	d74c <memcpy>
          disk_pos += to_copy;
    32a0:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    32a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    32a8:	4425      	add	r5, r4
          disk_pos += to_copy;
    32aa:	4423      	add	r3, r4
    32ac:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    32b0:	d022      	beq.n	32f8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
        while(pos<size)
    32b2:	45a8      	cmp	r8, r5
    32b4:	d9cc      	bls.n	3250 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    32b6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    32ba:	9303      	str	r3, [sp, #12]
    32bc:	9a03      	ldr	r2, [sp, #12]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    32be:	eba8 0905 	sub.w	r9, r8, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    32c2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    32c6:	d1d9      	bne.n	327c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6c>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    32c8:	9b05      	ldr	r3, [sp, #20]
    32ca:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
    32ce:	462a      	mov	r2, r5
    32d0:	6818      	ldr	r0, [r3, #0]
    32d2:	bf34      	ite	cc
    32d4:	46cc      	movcc	ip, r9
    32d6:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    32da:	465b      	mov	r3, fp
    32dc:	6801      	ldr	r1, [r0, #0]
    32de:	f8cd c000 	str.w	ip, [sp]
    32e2:	6b09      	ldr	r1, [r1, #48]	; 0x30
    32e4:	460c      	mov	r4, r1
    32e6:	ee18 1a10 	vmov	r1, s16
    32ea:	47a0      	blx	r4
            disk_pos=0;
    32ec:	4659      	mov	r1, fp
    32ee:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    32f2:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
    32f6:	e7c5      	b.n	3284 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x74>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32f8:	223c      	movs	r2, #60	; 0x3c
    32fa:	f44f 7100 	mov.w	r1, #512	; 0x200
    32fe:	4650      	mov	r0, sl
    3300:	f00b fc12 	bl	eb28 <usb_mtp_send>
    3304:	2800      	cmp	r0, #0
    3306:	ddf7      	ble.n	32f8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
            len=0;
    3308:	2600      	movs	r6, #0
    330a:	e7d2      	b.n	32b2 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>

0000330c <MTPD::read(char*, unsigned long)>:
    {
    330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    3310:	4616      	mov	r6, r2
    3312:	b36a      	cbz	r2, 3370 <MTPD::read(char*, unsigned long)+0x64>
    3314:	460f      	mov	r7, r1
    3316:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3378 <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    331a:	f100 0920 	add.w	r9, r0, #32
          index=0;
    331e:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    3322:	f8d8 4000 	ldr.w	r4, [r8]
    3326:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    332a:	42b5      	cmp	r5, r6
    332c:	bf28      	it	cs
    332e:	4635      	movcs	r5, r6
        if (data) {
    3330:	b137      	cbz	r7, 3340 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    3332:	4638      	mov	r0, r7
    3334:	462a      	mov	r2, r5
    3336:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    333a:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    333c:	f00a fa06 	bl	d74c <memcpy>
        index += to_copy;
    3340:	442c      	add	r4, r5
        size -= to_copy;
    3342:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    3344:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    3348:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    334c:	d003      	beq.n	3356 <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    334e:	2e00      	cmp	r6, #0
    3350:	d1e7      	bne.n	3322 <MTPD::read(char*, unsigned long)+0x16>
    }
    3352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while(!usb_mtp_available());
    3356:	f00b fbcf 	bl	eaf8 <usb_mtp_available>
    335a:	2800      	cmp	r0, #0
    335c:	d0fb      	beq.n	3356 <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    335e:	213c      	movs	r1, #60	; 0x3c
    3360:	4648      	mov	r0, r9
    3362:	f00b fb77 	bl	ea54 <usb_mtp_recv>
          index=0;
    3366:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    336a:	2e00      	cmp	r6, #0
    336c:	d1d9      	bne.n	3322 <MTPD::read(char*, unsigned long)+0x16>
    336e:	e7f0      	b.n	3352 <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    3370:	4b01      	ldr	r3, [pc, #4]	; (3378 <MTPD::read(char*, unsigned long)+0x6c>)
    3372:	601a      	str	r2, [r3, #0]
    }
    3374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3378:	200285a4 	.word	0x200285a4

0000337c <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    337c:	b570      	push	{r4, r5, r6, lr}
    337e:	b082      	sub	sp, #8
    3380:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3382:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    3384:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3386:	f10d 0106 	add.w	r1, sp, #6
    338a:	f7ff ffbf 	bl	330c <MTPD::read(char*, unsigned long)>
    338e:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    3392:	b17c      	cbz	r4, 33b4 <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    3394:	b165      	cbz	r5, 33b0 <MTPD::readstring(char*)+0x34>
    3396:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3398:	2202      	movs	r2, #2
    339a:	f10d 0106 	add.w	r1, sp, #6
    339e:	4630      	mov	r0, r6
    33a0:	f7ff ffb4 	bl	330c <MTPD::read(char*, unsigned long)>
    33a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    33a8:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    33ac:	42a5      	cmp	r5, r4
    33ae:	d1f3      	bne.n	3398 <MTPD::readstring(char*)+0x1c>
  }
    33b0:	b002      	add	sp, #8
    33b2:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    33b4:	006a      	lsls	r2, r5, #1
    33b6:	4621      	mov	r1, r4
    33b8:	4630      	mov	r0, r6
  }
    33ba:	b002      	add	sp, #8
    33bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    33c0:	f7ff bfa4 	b.w	330c <MTPD::read(char*, unsigned long)>

000033c4 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    33c4:	b530      	push	{r4, r5, lr}
    33c6:	b0c1      	sub	sp, #260	; 0x104
    33c8:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    33ca:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    33cc:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    33ce:	4669      	mov	r1, sp
    33d0:	f7ff ff9c 	bl	330c <MTPD::read(char*, unsigned long)>
        readstring(filename);
    33d4:	4669      	mov	r1, sp
    33d6:	4620      	mov	r0, r4
    33d8:	f7ff ffd0 	bl	337c <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    33dc:	6820      	ldr	r0, [r4, #0]
    33de:	466a      	mov	r2, sp
    33e0:	4629      	mov	r1, r5
    33e2:	6803      	ldr	r3, [r0, #0]
    33e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    33e6:	4798      	blx	r3
    33e8:	f242 0201 	movw	r2, #8193	; 0x2001
    33ec:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    33f0:	2800      	cmp	r0, #0
    33f2:	bf14      	ite	ne
    33f4:	4610      	movne	r0, r2
    33f6:	4618      	moveq	r0, r3
    33f8:	b041      	add	sp, #260	; 0x104
    33fa:	bd30      	pop	{r4, r5, pc}

000033fc <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    33fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3400:	4605      	mov	r5, r0
    3402:	b0c5      	sub	sp, #276	; 0x114
    3404:	4689      	mov	r9, r1
    3406:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    3408:	f100 0420 	add.w	r4, r0, #32
      while(!usb_mtp_available());
    340c:	f00b fb74 	bl	eaf8 <usb_mtp_available>
    3410:	2800      	cmp	r0, #0
    3412:	d0fb      	beq.n	340c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    3414:	213c      	movs	r1, #60	; 0x3c
    3416:	4620      	mov	r0, r4
    3418:	f00b fb1c 	bl	ea54 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    341c:	ae04      	add	r6, sp, #16
        index=0;
    341e:	4b4c      	ldr	r3, [pc, #304]	; (3550 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
    3420:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    3422:	4628      	mov	r0, r5
    3424:	4631      	mov	r1, r6
        index=0;
    3426:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    3428:	220c      	movs	r2, #12
    342a:	f7ff ff6f 	bl	330c <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    342e:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    3430:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    3434:	2b02      	cmp	r3, #2
    3436:	f000 8086 	beq.w	3546 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14a>
    343a:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    343e:	2204      	movs	r2, #4
    3440:	4631      	mov	r1, r6
    3442:	4628      	mov	r0, r5
    3444:	f7ff ff62 	bl	330c <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3448:	2202      	movs	r2, #2
    344a:	4631      	mov	r1, r6
    344c:	4628      	mov	r0, r5
    344e:	f7ff ff5d 	bl	330c <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    3452:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3456:	f8b6 b000 	ldrh.w	fp, [r6]
    345a:	2202      	movs	r2, #2
    345c:	4631      	mov	r1, r6
    345e:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3460:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3464:	f7ff ff52 	bl	330c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3468:	2204      	movs	r2, #4
    346a:	4631      	mov	r1, r6
    346c:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    346e:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3472:	f7ff ff4b 	bl	330c <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3476:	2202      	movs	r2, #2
    3478:	4631      	mov	r1, r6
    347a:	4628      	mov	r0, r5
    347c:	f7ff ff46 	bl	330c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3480:	2204      	movs	r2, #4
    3482:	4631      	mov	r1, r6
    3484:	4628      	mov	r0, r5
    3486:	f7ff ff41 	bl	330c <MTPD::read(char*, unsigned long)>
    348a:	2204      	movs	r2, #4
    348c:	4631      	mov	r1, r6
    348e:	4628      	mov	r0, r5
    3490:	f7ff ff3c 	bl	330c <MTPD::read(char*, unsigned long)>
    3494:	2204      	movs	r2, #4
    3496:	4631      	mov	r1, r6
    3498:	4628      	mov	r0, r5
    349a:	f7ff ff37 	bl	330c <MTPD::read(char*, unsigned long)>
    349e:	2204      	movs	r2, #4
    34a0:	4631      	mov	r1, r6
    34a2:	4628      	mov	r0, r5
    34a4:	f7ff ff32 	bl	330c <MTPD::read(char*, unsigned long)>
    34a8:	2204      	movs	r2, #4
    34aa:	4631      	mov	r1, r6
    34ac:	4628      	mov	r0, r5
    34ae:	f7ff ff2d 	bl	330c <MTPD::read(char*, unsigned long)>
    34b2:	2204      	movs	r2, #4
    34b4:	4631      	mov	r1, r6
    34b6:	4628      	mov	r0, r5
    34b8:	f7ff ff28 	bl	330c <MTPD::read(char*, unsigned long)>
    34bc:	2204      	movs	r2, #4
    34be:	4631      	mov	r1, r6
    34c0:	4628      	mov	r0, r5
    34c2:	f7ff ff23 	bl	330c <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34c6:	2202      	movs	r2, #2
    34c8:	4631      	mov	r1, r6
    34ca:	4628      	mov	r0, r5
    34cc:	f7ff ff1e 	bl	330c <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    34d0:	2204      	movs	r2, #4
    34d2:	4631      	mov	r1, r6
    34d4:	4628      	mov	r0, r5
    34d6:	f7ff ff19 	bl	330c <MTPD::read(char*, unsigned long)>
    34da:	2204      	movs	r2, #4
    34dc:	4631      	mov	r1, r6
    34de:	4628      	mov	r0, r5
    34e0:	f7ff ff14 	bl	330c <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    34e4:	4631      	mov	r1, r6
    34e6:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    34e8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    34ec:	f7ff ff46 	bl	337c <MTPD::readstring(char*)>
    34f0:	4630      	mov	r0, r6
    34f2:	f00e fda5 	bl	12040 <strlen>
    34f6:	3001      	adds	r0, #1
    34f8:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    34fc:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    3500:	2c03      	cmp	r4, #3
    3502:	dd0c      	ble.n	351e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    3504:	af03      	add	r7, sp, #12
    3506:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3508:	2204      	movs	r2, #4
    350a:	4639      	mov	r1, r7
    350c:	4628      	mov	r0, r5
    350e:	f7ff fefd 	bl	330c <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    3512:	2c03      	cmp	r4, #3
    3514:	dcf7      	bgt.n	3506 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    3516:	f1a8 0805 	sub.w	r8, r8, #5
    351a:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    351e:	b13c      	cbz	r4, 3530 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    3520:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3522:	2201      	movs	r2, #1
    3524:	4639      	mov	r1, r7
    3526:	4628      	mov	r0, r5
    3528:	f7ff fef0 	bl	330c <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    352c:	3c01      	subs	r4, #1
    352e:	d1f8      	bne.n	3522 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    3530:	6828      	ldr	r0, [r5, #0]
    3532:	465b      	mov	r3, fp
    3534:	4652      	mov	r2, sl
    3536:	4649      	mov	r1, r9
    3538:	6804      	ldr	r4, [r0, #0]
    353a:	9600      	str	r6, [sp, #0]
    353c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    353e:	47a0      	blx	r4
    }
    3540:	b045      	add	sp, #276	; 0x114
    3542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    3546:	6833      	ldr	r3, [r6, #0]
    3548:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    354c:	e777      	b.n	343e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    354e:	bf00      	nop
    3550:	200285a4 	.word	0x200285a4

00003554 <MTPD::SendObject()>:
    { 
    3554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    3558:	f100 0a20 	add.w	sl, r0, #32
    { 
    355c:	b087      	sub	sp, #28
    355e:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    3560:	f00b faca 	bl	eaf8 <usb_mtp_available>
    3564:	2800      	cmp	r0, #0
    3566:	d0fb      	beq.n	3560 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    3568:	213c      	movs	r1, #60	; 0x3c
    356a:	4650      	mov	r0, sl
    356c:	f00b fa72 	bl	ea54 <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3570:	220c      	movs	r2, #12
        index=0;
    3572:	4b42      	ldr	r3, [pc, #264]	; (367c <MTPD::SendObject()+0x128>)
    3574:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    3576:	eb0d 0102 	add.w	r1, sp, r2
    357a:	9800      	ldr	r0, [sp, #0]
        index=0;
    357c:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    357e:	f7ff fec5 	bl	330c <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3582:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3586:	2b02      	cmp	r3, #2
    3588:	d00d      	beq.n	35a6 <MTPD::SendObject()+0x52>
      disk_pos=0;
    358a:	9b00      	ldr	r3, [sp, #0]
    358c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    3590:	f8c3 4420 	str.w	r4, [r3, #1056]	; 0x420
      storage_->close();
    3594:	9b00      	ldr	r3, [sp, #0]
    3596:	6818      	ldr	r0, [r3, #0]
    3598:	6803      	ldr	r3, [r0, #0]
    359a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    359c:	4798      	blx	r3
      return true;
    359e:	2001      	movs	r0, #1
    }
    35a0:	b007      	add	sp, #28
    35a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    35a6:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    35a8:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    35aa:	f1a3 090c 	sub.w	r9, r3, #12
      disk_pos=0;
    35ae:	f502 5700 	add.w	r7, r2, #8192	; 0x2000
      while((int)len>0)
    35b2:	45a1      	cmp	r9, r4
      disk_pos=0;
    35b4:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
      while((int)len>0)
    35b8:	ddec      	ble.n	3594 <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    35ba:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    35bc:	4620      	mov	r0, r4
    35be:	f502 6b84 	add.w	fp, r2, #1056	; 0x420
          disk_pos =0;
    35c2:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    35c4:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    35c8:	f5c0 5400 	rsb	r4, r0, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    35cc:	eb0a 0108 	add.w	r1, sl, r8
    35d0:	4458      	add	r0, fp
    35d2:	454e      	cmp	r6, r9
    35d4:	bf28      	it	cs
    35d6:	464e      	movcs	r6, r9
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    35d8:	42b4      	cmp	r4, r6
    35da:	bf28      	it	cs
    35dc:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    35de:	4622      	mov	r2, r4
        len -= to_copy;
    35e0:	eba9 0504 	sub.w	r5, r9, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    35e4:	f00a f8b2 	bl	d74c <memcpy>
        disk_pos += to_copy;
    35e8:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    35ec:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    35ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    35f2:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    35f6:	d022      	beq.n	363e <MTPD::SendObject()+0xea>
        if(len>0)  // we have still data to be transfered
    35f8:	b98d      	cbnz	r5, 361e <MTPD::SendObject()+0xca>
      if(disk_pos)
    35fa:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    35fe:	2a00      	cmp	r2, #0
    3600:	d0c8      	beq.n	3594 <MTPD::SendObject()+0x40>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    3602:	9b00      	ldr	r3, [sp, #0]
    3604:	4659      	mov	r1, fp
    3606:	6818      	ldr	r0, [r3, #0]
    3608:	6803      	ldr	r3, [r0, #0]
    360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    360c:	4798      	blx	r3
    360e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3612:	4298      	cmp	r0, r3
    3614:	d2be      	bcs.n	3594 <MTPD::SendObject()+0x40>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    3616:	2000      	movs	r0, #0
    }
    3618:	b007      	add	sp, #28
    361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    361e:	f00b fa6b 	bl	eaf8 <usb_mtp_available>
    3622:	2800      	cmp	r0, #0
    3624:	d0fb      	beq.n	361e <MTPD::SendObject()+0xca>
      return usb_mtp_recv(data_buffer,60);
    3626:	213c      	movs	r1, #60	; 0x3c
    3628:	4650      	mov	r0, sl
    362a:	f00b fa13 	bl	ea54 <usb_mtp_recv>
      while((int)len>0)
    362e:	2d00      	cmp	r5, #0
    3630:	dde3      	ble.n	35fa <MTPD::SendObject()+0xa6>
      if(disk_pos)
    3632:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
    3636:	46a9      	mov	r9, r5
          index=0;
    3638:	f04f 0800 	mov.w	r8, #0
    363c:	e7c2      	b.n	35c4 <MTPD::SendObject()+0x70>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    363e:	9b00      	ldr	r3, [sp, #0]
    3640:	4659      	mov	r1, fp
    3642:	6818      	ldr	r0, [r3, #0]
    3644:	6803      	ldr	r3, [r0, #0]
    3646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3648:	4798      	blx	r3
    364a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    364e:	d3e2      	bcc.n	3616 <MTPD::SendObject()+0xc2>
          disk_pos =0;
    3650:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3652:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    3654:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3658:	d0ce      	beq.n	35f8 <MTPD::SendObject()+0xa4>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    365a:	eb04 0108 	add.w	r1, r4, r8
    365e:	4658      	mov	r0, fp
    3660:	9201      	str	r2, [sp, #4]
            len -= bytes;
    3662:	eba9 0506 	sub.w	r5, r9, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    3666:	4451      	add	r1, sl
    3668:	f00a f870 	bl	d74c <memcpy>
            disk_pos += bytes;
    366c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3670:	9a01      	ldr	r2, [sp, #4]
    3672:	4413      	add	r3, r2
    3674:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            len -= bytes;
    3678:	e7be      	b.n	35f8 <MTPD::SendObject()+0xa4>
    367a:	bf00      	nop
    367c:	200285a4 	.word	0x200285a4

00003680 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    3680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3684:	b08d      	sub	sp, #52	; 0x34
    3686:	4604      	mov	r4, r0
    3688:	f00b fa36 	bl	eaf8 <usb_mtp_available>
    368c:	b910      	cbnz	r0, 3694 <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    368e:	b00d      	add	sp, #52	; 0x34
    3690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    3694:	f104 0520 	add.w	r5, r4, #32
      return usb_mtp_recv(data_buffer,60);
    3698:	213c      	movs	r1, #60	; 0x3c
    369a:	4628      	mov	r0, r5
    369c:	f00b f9da 	bl	ea54 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    36a0:	2800      	cmp	r0, #0
    36a2:	d0f4      	beq.n	368e <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    36a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    36a6:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    36a8:	6a23      	ldr	r3, [r4, #32]
    36aa:	48a6      	ldr	r0, [pc, #664]	; (3944 <MTPD::loop()+0x2c4>)
    36ac:	e9cd 2100 	strd	r2, r1, [sp]
    36b0:	49a5      	ldr	r1, [pc, #660]	; (3948 <MTPD::loop()+0x2c8>)
    36b2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    36b4:	f009 fa5e 	bl	cb74 <Print::printf(char const*, ...)>
    36b8:	6a23      	ldr	r3, [r4, #32]
    36ba:	2b0c      	cmp	r3, #12
    36bc:	d867      	bhi.n	378e <MTPD::loop()+0x10e>
    36be:	49a3      	ldr	r1, [pc, #652]	; (394c <MTPD::loop()+0x2cc>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    36c0:	f242 0601 	movw	r6, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    36c4:	489f      	ldr	r0, [pc, #636]	; (3944 <MTPD::loop()+0x2c4>)
        TID=id;
    36c6:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    36ca:	f009 fa53 	bl	cb74 <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    36ce:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
        if(typ==2) return_code=0x2005; // we should only get cmds
    36d0:	f242 0305 	movw	r3, #8197	; 0x2005
        int op = CONTAINER->op;
    36d4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
        int id = CONTAINER->transaction_id;
    36d6:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
        if(typ==2) return_code=0x2005; // we should only get cmds
    36da:	2a02      	cmp	r2, #2
    36dc:	bf08      	it	eq
    36de:	461e      	moveq	r6, r3
        switch (op)
    36e0:	f241 021b 	movw	r2, #4123	; 0x101b
        int p3 = CONTAINER->params[2];
    36e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch (op)
    36e6:	4291      	cmp	r1, r2
        int len= CONTAINER->len;
    36e8:	6a27      	ldr	r7, [r4, #32]
        int p2 = CONTAINER->params[1];
    36ea:	e9d4 ab0b 	ldrd	sl, fp, [r4, #44]	; 0x2c
        TID=id;
    36ee:	f8c8 942c 	str.w	r9, [r8, #1068]	; 0x42c
        switch (op)
    36f2:	d826      	bhi.n	3742 <MTPD::loop()+0xc2>
    36f4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    36f8:	f240 80cc 	bls.w	3894 <MTPD::loop()+0x214>
    36fc:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    3700:	440a      	add	r2, r1
    3702:	2a1a      	cmp	r2, #26
    3704:	f200 80c6 	bhi.w	3894 <MTPD::loop()+0x214>
    3708:	e8df f012 	tbh	[pc, r2, lsl #1]
    370c:	01b901c4 	.word	0x01b901c4
    3710:	00e100dd 	.word	0x00e100dd
    3714:	01130128 	.word	0x01130128
    3718:	027202a7 	.word	0x027202a7
    371c:	00c402e1 	.word	0x00c402e1
    3720:	02660249 	.word	0x02660249
    3724:	00c4025a 	.word	0x00c4025a
    3728:	00c400c4 	.word	0x00c400c4
    372c:	00c400c4 	.word	0x00c400c4
    3730:	022000c4 	.word	0x022000c4
    3734:	00c401f7 	.word	0x00c401f7
    3738:	00c400c4 	.word	0x00c400c4
    373c:	019701a7 	.word	0x019701a7
    3740:	015d      	.short	0x015d
    3742:	f246 73ff 	movw	r3, #26623	; 0x67ff
    3746:	440b      	add	r3, r1
    3748:	b29b      	uxth	r3, r3
    374a:	2b03      	cmp	r3, #3
    374c:	f200 80a2 	bhi.w	3894 <MTPD::loop()+0x214>
    3750:	4b7f      	ldr	r3, [pc, #508]	; (3950 <MTPD::loop()+0x2d0>)
    3752:	440b      	add	r3, r1
    3754:	2b02      	cmp	r3, #2
    3756:	f200 8347 	bhi.w	3de8 <MTPD::loop()+0x768>
    375a:	e8df f003 	tbb	[pc, r3]
    375e:	2e65      	.short	0x2e65
    3760:	02          	.byte	0x02
    3761:	00          	.byte	0x00
      while(!usb_mtp_available());
    3762:	f00b f9c9 	bl	eaf8 <usb_mtp_available>
    3766:	2800      	cmp	r0, #0
    3768:	d0fb      	beq.n	3762 <MTPD::loop()+0xe2>
      return usb_mtp_recv(data_buffer,60);
    376a:	213c      	movs	r1, #60	; 0x3c
    376c:	4628      	mov	r0, r5
    376e:	f00b f971 	bl	ea54 <usb_mtp_recv>
        index=0;
    3772:	4b78      	ldr	r3, [pc, #480]	; (3954 <MTPD::loop()+0x2d4>)
    3774:	2200      	movs	r2, #0
    3776:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    3778:	f64d 4307 	movw	r3, #56327	; 0xdc07
    377c:	459b      	cmp	fp, r3
    377e:	f040 82db 	bne.w	3d38 <MTPD::loop()+0x6b8>
    3782:	4651      	mov	r1, sl
    3784:	4620      	mov	r0, r4
    3786:	f7ff fe1d 	bl	33c4 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    378a:	b286      	uxth	r6, r0
    378c:	e09c      	b.n	38c8 <MTPD::loop()+0x248>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    378e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3790:	4971      	ldr	r1, [pc, #452]	; (3958 <MTPD::loop()+0x2d8>)
    3792:	486c      	ldr	r0, [pc, #432]	; (3944 <MTPD::loop()+0x2c4>)
    3794:	f009 f9ee 	bl	cb74 <Print::printf(char const*, ...)>
    3798:	6a23      	ldr	r3, [r4, #32]
    379a:	2b10      	cmp	r3, #16
    379c:	d98f      	bls.n	36be <MTPD::loop()+0x3e>
    379e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    37a0:	496d      	ldr	r1, [pc, #436]	; (3958 <MTPD::loop()+0x2d8>)
    37a2:	4868      	ldr	r0, [pc, #416]	; (3944 <MTPD::loop()+0x2c4>)
    37a4:	f009 f9e6 	bl	cb74 <Print::printf(char const*, ...)>
    37a8:	6a23      	ldr	r3, [r4, #32]
    37aa:	2b14      	cmp	r3, #20
    37ac:	d987      	bls.n	36be <MTPD::loop()+0x3e>
    37ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
    37b0:	4969      	ldr	r1, [pc, #420]	; (3958 <MTPD::loop()+0x2d8>)
    37b2:	4864      	ldr	r0, [pc, #400]	; (3944 <MTPD::loop()+0x2c4>)
    37b4:	f009 f9de 	bl	cb74 <Print::printf(char const*, ...)>
    37b8:	e781      	b.n	36be <MTPD::loop()+0x3e>
              TRANSMIT(getObjectPropValue(p1,p2));
    37ba:	2300      	movs	r3, #0
    37bc:	2201      	movs	r2, #1
    37be:	4651      	mov	r1, sl
    37c0:	4620      	mov	r0, r4
    37c2:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    37c6:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    37ca:	465a      	mov	r2, fp
    37cc:	f7ff fb90 	bl	2ef0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    37d0:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    37d4:	2300      	movs	r3, #0
    37d6:	a904      	add	r1, sp, #16
    37d8:	320c      	adds	r2, #12
    37da:	4620      	mov	r0, r4
    37dc:	9204      	str	r2, [sp, #16]
    37de:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    37e0:	f8ad 2016 	strh.w	r2, [sp, #22]
    37e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    37e6:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    37ea:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    37ee:	2302      	movs	r3, #2
    37f0:	9206      	str	r2, [sp, #24]
    37f2:	220c      	movs	r2, #12
    37f4:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    37f8:	f7fe fb72 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    37fc:	465a      	mov	r2, fp
    37fe:	4651      	mov	r1, sl
    3800:	4620      	mov	r0, r4
    3802:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3806:	f7ff fb73 	bl	2ef0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    380a:	9b04      	ldr	r3, [sp, #16]
    380c:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3810:	f1bb 0f00 	cmp.w	fp, #0
    3814:	d006      	beq.n	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3816:	223c      	movs	r2, #60	; 0x3c
    3818:	4659      	mov	r1, fp
    381a:	4640      	mov	r0, r8
    381c:	f00b f984 	bl	eb28 <usb_mtp_send>
    3820:	2800      	cmp	r0, #0
    3822:	ddf8      	ble.n	3816 <MTPD::loop()+0x196>
            CONTAINER->op=return_code;
    3824:	b2b6      	uxth	r6, r6
              break;
    3826:	e039      	b.n	389c <MTPD::loop()+0x21c>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3828:	2300      	movs	r3, #0
    382a:	2201      	movs	r2, #1
    382c:	4651      	mov	r1, sl
    382e:	4620      	mov	r0, r4
    3830:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3834:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3838:	465a      	mov	r2, fp
    383a:	f7ff f8f1 	bl	2a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    383e:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    3842:	2300      	movs	r3, #0
    3844:	a904      	add	r1, sp, #16
    3846:	320c      	adds	r2, #12
    3848:	4620      	mov	r0, r4
    384a:	9204      	str	r2, [sp, #16]
    384c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    384e:	f8ad 2016 	strh.w	r2, [sp, #22]
    3852:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3854:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3858:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    385c:	2302      	movs	r3, #2
    385e:	9206      	str	r2, [sp, #24]
    3860:	220c      	movs	r2, #12
    3862:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3866:	f7fe fb3b 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    386a:	465a      	mov	r2, fp
    386c:	4651      	mov	r1, sl
    386e:	4620      	mov	r0, r4
    3870:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3874:	f7ff f8d4 	bl	2a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3878:	9b04      	ldr	r3, [sp, #16]
    387a:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    387e:	f1bb 0f00 	cmp.w	fp, #0
    3882:	d0cf      	beq.n	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3884:	223c      	movs	r2, #60	; 0x3c
    3886:	4659      	mov	r1, fp
    3888:	4640      	mov	r0, r8
    388a:	f00b f94d 	bl	eb28 <usb_mtp_send>
    388e:	2800      	cmp	r0, #0
    3890:	ddf8      	ble.n	3884 <MTPD::loop()+0x204>
    3892:	e7c7      	b.n	3824 <MTPD::loop()+0x1a4>
            TRANSMIT(WriteDescriptor());
    3894:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3898:	f242 0605 	movw	r6, #8197	; 0x2005
            CONTAINER->type=3;
    389c:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    389e:	4629      	mov	r1, r5
    38a0:	463a      	mov	r2, r7
    38a2:	4640      	mov	r0, r8
            CONTAINER->op=return_code;
    38a4:	84e6      	strh	r6, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    38a6:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
            CONTAINER->len=len;
    38aa:	6227      	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
    38ac:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
            CONTAINER->type=3;
    38b0:	84a3      	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    38b2:	f009 ff4b 	bl	d74c <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38b6:	223c      	movs	r2, #60	; 0x3c
    38b8:	4639      	mov	r1, r7
    38ba:	4640      	mov	r0, r8
    38bc:	f00b f934 	bl	eb28 <usb_mtp_send>
    38c0:	2800      	cmp	r0, #0
    38c2:	ddf8      	ble.n	38b6 <MTPD::loop()+0x236>
    38c4:	e6e3      	b.n	368e <MTPD::loop()+0xe>
            CONTAINER->op=return_code;
    38c6:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    38c8:	f504 7808 	add.w	r8, r4, #544	; 0x220
    38cc:	e7e6      	b.n	389c <MTPD::loop()+0x21c>
              TRANSMIT(WriteStorageIDs());
    38ce:	f04f 0b00 	mov.w	fp, #0
    38d2:	2301      	movs	r3, #1
    38d4:	4620      	mov	r0, r4
    38d6:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    38da:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    38de:	f7fe fd6d 	bl	23bc <MTPD::WriteStorageIDs()>
    38e2:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    38e6:	220c      	movs	r2, #12
    38e8:	a904      	add	r1, sp, #16
    38ea:	330c      	adds	r3, #12
    38ec:	4620      	mov	r0, r4
    38ee:	9304      	str	r3, [sp, #16]
    38f0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    38f2:	f8ad 3016 	strh.w	r3, [sp, #22]
    38f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    38f8:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    38fc:	9306      	str	r3, [sp, #24]
    38fe:	2302      	movs	r3, #2
    3900:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3904:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3908:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    390c:	f7fe fae8 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    3910:	4620      	mov	r0, r4
    3912:	f7fe fd53 	bl	23bc <MTPD::WriteStorageIDs()>
    3916:	9b04      	ldr	r3, [sp, #16]
    3918:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    391c:	f1bb 0f00 	cmp.w	fp, #0
    3920:	d080      	beq.n	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3922:	223c      	movs	r2, #60	; 0x3c
    3924:	4659      	mov	r1, fp
    3926:	4640      	mov	r0, r8
    3928:	f00b f8fe 	bl	eb28 <usb_mtp_send>
    392c:	2800      	cmp	r0, #0
    392e:	ddf8      	ble.n	3922 <MTPD::loop()+0x2a2>
    3930:	e778      	b.n	3824 <MTPD::loop()+0x1a4>
            if (p2) 
    3932:	f1bb 0f00 	cmp.w	fp, #0
    3936:	f000 820c 	beq.w	3d52 <MTPD::loop()+0x6d2>
            TRANSMIT(WriteDescriptor());
    393a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    393e:	f242 0614 	movw	r6, #8212	; 0x2014
    3942:	e7ab      	b.n	389c <MTPD::loop()+0x21c>
    3944:	20008abc 	.word	0x20008abc
    3948:	20000b50 	.word	0x20000b50
    394c:	20000b64 	.word	0x20000b64
    3950:	ffff67fe 	.word	0xffff67fe
    3954:	200285a4 	.word	0x200285a4
    3958:	20000b60 	.word	0x20000b60
            TRANSMIT(GetStorageInfo(p1));
    395c:	f04f 0b00 	mov.w	fp, #0
    3960:	2301      	movs	r3, #1
    3962:	4651      	mov	r1, sl
    3964:	4620      	mov	r0, r4
    3966:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    396a:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    396e:	f7fe fd61 	bl	2434 <MTPD::GetStorageInfo(unsigned long)>
    3972:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3976:	220c      	movs	r2, #12
    3978:	a904      	add	r1, sp, #16
    397a:	330c      	adds	r3, #12
    397c:	4620      	mov	r0, r4
    397e:	9304      	str	r3, [sp, #16]
    3980:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3982:	f8ad 3016 	strh.w	r3, [sp, #22]
    3986:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3988:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    398c:	9306      	str	r3, [sp, #24]
    398e:	2302      	movs	r3, #2
    3990:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3994:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3998:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    399c:	f7fe faa0 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    39a0:	4651      	mov	r1, sl
    39a2:	4620      	mov	r0, r4
    39a4:	f7fe fd46 	bl	2434 <MTPD::GetStorageInfo(unsigned long)>
    39a8:	9b04      	ldr	r3, [sp, #16]
    39aa:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    39ae:	f1bb 0f00 	cmp.w	fp, #0
    39b2:	f43f af37 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39b6:	223c      	movs	r2, #60	; 0x3c
    39b8:	4659      	mov	r1, fp
    39ba:	4640      	mov	r0, r8
    39bc:	f00b f8b4 	bl	eb28 <usb_mtp_send>
    39c0:	2800      	cmp	r0, #0
    39c2:	ddf8      	ble.n	39b6 <MTPD::loop()+0x336>
    39c4:	e72e      	b.n	3824 <MTPD::loop()+0x1a4>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    39c6:	2200      	movs	r2, #0
    39c8:	4651      	mov	r1, sl
    39ca:	4620      	mov	r0, r4
    39cc:	9303      	str	r3, [sp, #12]
    39ce:	f8c8 2428 	str.w	r2, [r8, #1064]	; 0x428
    39d2:	2201      	movs	r2, #1
    39d4:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    39d8:	465a      	mov	r2, fp
    39da:	f7ff fc19 	bl	3210 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    39de:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    39e2:	2300      	movs	r3, #0
    39e4:	a904      	add	r1, sp, #16
    39e6:	320c      	adds	r2, #12
    39e8:	9007      	str	r0, [sp, #28]
    39ea:	4620      	mov	r0, r4
    39ec:	9204      	str	r2, [sp, #16]
    39ee:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    39f0:	f8ad 2016 	strh.w	r2, [sp, #22]
    39f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    39f6:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    39fa:	9206      	str	r2, [sp, #24]
    39fc:	2202      	movs	r2, #2
    39fe:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3a02:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a06:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3a0a:	2220      	movs	r2, #32
    3a0c:	f7fe fa68 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3a10:	9b03      	ldr	r3, [sp, #12]
    3a12:	465a      	mov	r2, fp
    3a14:	4651      	mov	r1, sl
    3a16:	4620      	mov	r0, r4
    3a18:	f7ff fbfa 	bl	3210 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3a1c:	9b04      	ldr	r3, [sp, #16]
    3a1e:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a22:	f1bb 0f00 	cmp.w	fp, #0
    3a26:	f43f aefd 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a2a:	223c      	movs	r2, #60	; 0x3c
    3a2c:	4659      	mov	r1, fp
    3a2e:	4640      	mov	r0, r8
    3a30:	f00b f87a 	bl	eb28 <usb_mtp_send>
    3a34:	2800      	cmp	r0, #0
    3a36:	ddf8      	ble.n	3a2a <MTPD::loop()+0x3aa>
    3a38:	e6f4      	b.n	3824 <MTPD::loop()+0x1a4>
      return storage_->copy(handle,store1,newHandle);
    3a3a:	6820      	ldr	r0, [r4, #0]
    3a3c:	f10b 32ff 	add.w	r2, fp, #4294967295
    3a40:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3a42:	f504 7808 	add.w	r8, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    3a46:	6806      	ldr	r6, [r0, #0]
    3a48:	6d36      	ldr	r6, [r6, #80]	; 0x50
    3a4a:	47b0      	blx	r6
              if(!return_code) 
    3a4c:	2800      	cmp	r0, #0
    3a4e:	f040 817b 	bne.w	3d48 <MTPD::loop()+0x6c8>
            TRANSMIT(WriteDescriptor());
    3a52:	f242 0605 	movw	r6, #8197	; 0x2005
    3a56:	270c      	movs	r7, #12
    3a58:	e720      	b.n	389c <MTPD::loop()+0x21c>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3a5a:	6820      	ldr	r0, [r4, #0]
    3a5c:	f10b 32ff 	add.w	r2, fp, #4294967295
    3a60:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3a62:	f504 7808 	add.w	r8, r4, #544	; 0x220
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3a66:	6806      	ldr	r6, [r0, #0]
              break;
    3a68:	270c      	movs	r7, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3a6a:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    3a6c:	47b0      	blx	r6
    3a6e:	f242 0601 	movw	r6, #8193	; 0x2001
    3a72:	f242 0305 	movw	r3, #8197	; 0x2005
    3a76:	2800      	cmp	r0, #0
    3a78:	bf08      	it	eq
    3a7a:	461e      	moveq	r6, r3
              break;
    3a7c:	e70e      	b.n	389c <MTPD::loop()+0x21c>
      storage_->ResetIndex();
    3a7e:	6820      	ldr	r0, [r4, #0]
            CONTAINER->op=return_code;
    3a80:	b2b6      	uxth	r6, r6
      sessionID_ = id;
    3a82:	4bc7      	ldr	r3, [pc, #796]	; (3da0 <MTPD::loop()+0x720>)
            TRANSMIT(WriteDescriptor());
    3a84:	f504 7808 	add.w	r8, r4, #544	; 0x220
      sessionID_ = id;
    3a88:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    3a8c:	6803      	ldr	r3, [r0, #0]
    3a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3a90:	4798      	blx	r3
    }
    3a92:	e703      	b.n	389c <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3a94:	f04f 0b00 	mov.w	fp, #0
    3a98:	2301      	movs	r3, #1
    3a9a:	4620      	mov	r0, r4
    3a9c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3aa0:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3aa4:	f7fe fb02 	bl	20ac <MTPD::WriteDescriptor()>
    3aa8:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3aac:	220c      	movs	r2, #12
    3aae:	a904      	add	r1, sp, #16
    3ab0:	330c      	adds	r3, #12
    3ab2:	4620      	mov	r0, r4
    3ab4:	9304      	str	r3, [sp, #16]
    3ab6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
    3abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3abe:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3ac2:	9306      	str	r3, [sp, #24]
    3ac4:	2302      	movs	r3, #2
    3ac6:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3aca:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3ace:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3ad2:	f7fe fa05 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    3ad6:	4620      	mov	r0, r4
    3ad8:	f7fe fae8 	bl	20ac <MTPD::WriteDescriptor()>
    3adc:	9b04      	ldr	r3, [sp, #16]
    3ade:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3ae2:	f1bb 0f00 	cmp.w	fp, #0
    3ae6:	f43f ae9d 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3aea:	223c      	movs	r2, #60	; 0x3c
    3aec:	4659      	mov	r1, fp
    3aee:	4640      	mov	r0, r8
    3af0:	f00b f81a 	bl	eb28 <usb_mtp_send>
    3af4:	2800      	cmp	r0, #0
    3af6:	ddf8      	ble.n	3aea <MTPD::loop()+0x46a>
    3af8:	e694      	b.n	3824 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropValue(p1));
    3afa:	2301      	movs	r3, #1
    3afc:	f04f 0b00 	mov.w	fp, #0
    3b00:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3b04:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3b08:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3b0c:	459a      	cmp	sl, r3
    3b0e:	f000 814d 	beq.w	3dac <MTPD::loop()+0x72c>
              TRANSMIT(GetDevicePropValue(p1));
    3b12:	220c      	movs	r2, #12
    3b14:	4ba3      	ldr	r3, [pc, #652]	; (3da4 <MTPD::loop()+0x724>)
    3b16:	a904      	add	r1, sp, #16
    3b18:	4620      	mov	r0, r4
    3b1a:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b1e:	f8cd 9018 	str.w	r9, [sp, #24]
    3b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3b26:	f7fe f9db 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3b2a:	9b04      	ldr	r3, [sp, #16]
    3b2c:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b30:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3b34:	f1bb 0f00 	cmp.w	fp, #0
    3b38:	f43f ae74 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b3c:	223c      	movs	r2, #60	; 0x3c
    3b3e:	4659      	mov	r1, fp
    3b40:	4640      	mov	r0, r8
    3b42:	f00a fff1 	bl	eb28 <usb_mtp_send>
    3b46:	2800      	cmp	r0, #0
    3b48:	ddf8      	ble.n	3b3c <MTPD::loop()+0x4bc>
    3b4a:	e66b      	b.n	3824 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropDesc(p1));
    3b4c:	2301      	movs	r3, #1
    3b4e:	f04f 0b00 	mov.w	fp, #0
    3b52:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3b56:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    3b5a:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3b5e:	459a      	cmp	sl, r3
    3b60:	f000 8101 	beq.w	3d66 <MTPD::loop()+0x6e6>
              TRANSMIT(GetDevicePropDesc(p1));
    3b64:	220c      	movs	r2, #12
    3b66:	4b90      	ldr	r3, [pc, #576]	; (3da8 <MTPD::loop()+0x728>)
    3b68:	a904      	add	r1, sp, #16
    3b6a:	4620      	mov	r0, r4
    3b6c:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b70:	f8cd 9018 	str.w	r9, [sp, #24]
    3b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3b78:	f7fe f9b2 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3b7c:	9b04      	ldr	r3, [sp, #16]
    3b7e:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b82:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3b86:	f1bb 0f00 	cmp.w	fp, #0
    3b8a:	f43f ae4b 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b8e:	223c      	movs	r2, #60	; 0x3c
    3b90:	4659      	mov	r1, fp
    3b92:	4640      	mov	r0, r8
    3b94:	f00a ffc8 	bl	eb28 <usb_mtp_send>
    3b98:	2800      	cmp	r0, #0
    3b9a:	ddf8      	ble.n	3b8e <MTPD::loop()+0x50e>
    3b9c:	e642      	b.n	3824 <MTPD::loop()+0x1a4>
              if (p2) {
    3b9e:	f1bb 0f00 	cmp.w	fp, #0
    3ba2:	f47f aeca 	bne.w	393a <MTPD::loop()+0x2ba>
                if (!storage_->DeleteObject(p1)) {
    3ba6:	6820      	ldr	r0, [r4, #0]
    3ba8:	4651      	mov	r1, sl
    3baa:	6803      	ldr	r3, [r0, #0]
    3bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3bae:	4798      	blx	r3
    3bb0:	2800      	cmp	r0, #0
    3bb2:	f47f ae88 	bne.w	38c6 <MTPD::loop()+0x246>
            TRANSMIT(WriteDescriptor());
    3bb6:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3bba:	f242 0612 	movw	r6, #8210	; 0x2012
    3bbe:	e66d      	b.n	389c <MTPD::loop()+0x21c>
              if(!SendObject()) return_code = 0x2005;
    3bc0:	4620      	mov	r0, r4
    3bc2:	f7ff fcc7 	bl	3554 <MTPD::SendObject()>
    3bc6:	2800      	cmp	r0, #0
    3bc8:	f040 80b9 	bne.w	3d3e <MTPD::loop()+0x6be>
            TRANSMIT(WriteDescriptor());
    3bcc:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3bd0:	f242 0605 	movw	r6, #8197	; 0x2005
    3bd4:	270c      	movs	r7, #12
    3bd6:	e661      	b.n	389c <MTPD::loop()+0x21c>
              p3 = SendObjectInfo(p1, // storage
    3bd8:	465a      	mov	r2, fp
    3bda:	4651      	mov	r1, sl
    3bdc:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3bde:	b2b6      	uxth	r6, r6
              p3 = SendObjectInfo(p1, // storage
    3be0:	f7ff fc0c 	bl	33fc <MTPD::SendObjectInfo(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3be4:	f504 7808 	add.w	r8, r4, #544	; 0x220
              break;
    3be8:	2718      	movs	r7, #24
              CONTAINER->params[2]=p3;
    3bea:	e9c4 b00c 	strd	fp, r0, [r4, #48]	; 0x30
              break;
    3bee:	e655      	b.n	389c <MTPD::loop()+0x21c>
            TRANSMIT(GetObjectInfo(p1));
    3bf0:	f04f 0b00 	mov.w	fp, #0
    3bf4:	2301      	movs	r3, #1
    3bf6:	4651      	mov	r1, sl
    3bf8:	4620      	mov	r0, r4
    3bfa:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3bfe:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3c02:	f7fe fd65 	bl	26d0 <MTPD::GetObjectInfo(unsigned long)>
    3c06:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3c0a:	220c      	movs	r2, #12
    3c0c:	a904      	add	r1, sp, #16
    3c0e:	330c      	adds	r3, #12
    3c10:	4620      	mov	r0, r4
    3c12:	9304      	str	r3, [sp, #16]
    3c14:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3c16:	f8ad 3016 	strh.w	r3, [sp, #22]
    3c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c1c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3c20:	9306      	str	r3, [sp, #24]
    3c22:	2302      	movs	r3, #2
    3c24:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3c28:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3c2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3c30:	f7fe f956 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    3c34:	4651      	mov	r1, sl
    3c36:	4620      	mov	r0, r4
    3c38:	f7fe fd4a 	bl	26d0 <MTPD::GetObjectInfo(unsigned long)>
    3c3c:	9b04      	ldr	r3, [sp, #16]
    3c3e:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3c42:	f1bb 0f00 	cmp.w	fp, #0
    3c46:	f43f aded 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c4a:	223c      	movs	r2, #60	; 0x3c
    3c4c:	4659      	mov	r1, fp
    3c4e:	4640      	mov	r0, r8
    3c50:	f00a ff6a 	bl	eb28 <usb_mtp_send>
    3c54:	2800      	cmp	r0, #0
    3c56:	ddf8      	ble.n	3c4a <MTPD::loop()+0x5ca>
    3c58:	e5e4      	b.n	3824 <MTPD::loop()+0x1a4>
            if (p2) 
    3c5a:	f1bb 0f00 	cmp.w	fp, #0
    3c5e:	f47f ae6c 	bne.w	393a <MTPD::loop()+0x2ba>
              TRANSMIT(GetObjectHandles(p1, p3));
    3c62:	2201      	movs	r2, #1
    3c64:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
      write_length_ = GetNumObjects(storage, parent);
    3c68:	4651      	mov	r1, sl
    3c6a:	4620      	mov	r0, r4
              TRANSMIT(GetObjectHandles(p1, p3));
    3c6c:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
      write_length_ = GetNumObjects(storage, parent);
    3c70:	461a      	mov	r2, r3
    3c72:	9303      	str	r3, [sp, #12]
    3c74:	f7fe fcd4 	bl	2620 <MTPD::GetNumObjects(unsigned long, unsigned long)>
              TRANSMIT(GetObjectHandles(p1, p3));
    3c78:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      write_length_ *= 4;
    3c7a:	0080      	lsls	r0, r0, #2
    3c7c:	a904      	add	r1, sp, #16
              TRANSMIT(GetObjectHandles(p1, p3));
    3c7e:	f8ad 2016 	strh.w	r2, [sp, #22]
    3c82:	3010      	adds	r0, #16
    3c84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3c86:	9004      	str	r0, [sp, #16]
    3c88:	4620      	mov	r0, r4
    3c8a:	9206      	str	r2, [sp, #24]
    3c8c:	2202      	movs	r2, #2
    3c8e:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3c92:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3c96:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3c9a:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3c9e:	220c      	movs	r2, #12
    3ca0:	f7fe f91e 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    3ca4:	9b03      	ldr	r3, [sp, #12]
    3ca6:	4651      	mov	r1, sl
    3ca8:	4620      	mov	r0, r4
    3caa:	461a      	mov	r2, r3
    3cac:	f7fe fccc 	bl	2648 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3cb0:	9b04      	ldr	r3, [sp, #16]
    3cb2:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3cb6:	f1bb 0f00 	cmp.w	fp, #0
    3cba:	f43f adb3 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cbe:	223c      	movs	r2, #60	; 0x3c
    3cc0:	4659      	mov	r1, fp
    3cc2:	4640      	mov	r0, r8
    3cc4:	f00a ff30 	bl	eb28 <usb_mtp_send>
    3cc8:	2800      	cmp	r0, #0
    3cca:	ddf8      	ble.n	3cbe <MTPD::loop()+0x63e>
    3ccc:	e5aa      	b.n	3824 <MTPD::loop()+0x1a4>
            TRANSMIT(GetObject(p1));
    3cce:	f04f 0b00 	mov.w	fp, #0
    3cd2:	2301      	movs	r3, #1
    3cd4:	4651      	mov	r1, sl
    3cd6:	4620      	mov	r0, r4
    3cd8:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3cdc:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3ce0:	f7ff fa10 	bl	3104 <MTPD::GetObject(unsigned long)>
    3ce4:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3ce8:	220c      	movs	r2, #12
    3cea:	a904      	add	r1, sp, #16
    3cec:	330c      	adds	r3, #12
    3cee:	4620      	mov	r0, r4
    3cf0:	9304      	str	r3, [sp, #16]
    3cf2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
    3cf8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3cfa:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3cfe:	9306      	str	r3, [sp, #24]
    3d00:	2302      	movs	r3, #2
    3d02:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3d06:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d0a:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3d0e:	f7fe f8e7 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    3d12:	4651      	mov	r1, sl
    3d14:	4620      	mov	r0, r4
    3d16:	f7ff f9f5 	bl	3104 <MTPD::GetObject(unsigned long)>
    3d1a:	9b04      	ldr	r3, [sp, #16]
    3d1c:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3d20:	f1bb 0f00 	cmp.w	fp, #0
    3d24:	f43f ad7e 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d28:	223c      	movs	r2, #60	; 0x3c
    3d2a:	4659      	mov	r1, fp
    3d2c:	4640      	mov	r0, r8
    3d2e:	f00a fefb 	bl	eb28 <usb_mtp_send>
    3d32:	2800      	cmp	r0, #0
    3d34:	ddf8      	ble.n	3d28 <MTPD::loop()+0x6a8>
    3d36:	e575      	b.n	3824 <MTPD::loop()+0x1a4>
    3d38:	f242 0605 	movw	r6, #8197	; 0x2005
              break;
    3d3c:	e5c4      	b.n	38c8 <MTPD::loop()+0x248>
            CONTAINER->op=return_code;
    3d3e:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3d40:	f504 7808 	add.w	r8, r4, #544	; 0x220
            CONTAINER->op=return_code;
    3d44:	270c      	movs	r7, #12
    3d46:	e5a9      	b.n	389c <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3d48:	4682      	mov	sl, r0
    3d4a:	f242 0601 	movw	r6, #8193	; 0x2001
    3d4e:	2710      	movs	r7, #16
    3d50:	e5a4      	b.n	389c <MTPD::loop()+0x21c>
                p1 = GetNumObjects(p1, p3);
    3d52:	4651      	mov	r1, sl
    3d54:	461a      	mov	r2, r3
    3d56:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3d58:	b2b6      	uxth	r6, r6
                p1 = GetNumObjects(p1, p3);
    3d5a:	f7fe fc61 	bl	2620 <MTPD::GetNumObjects(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3d5e:	f504 7808 	add.w	r8, r4, #544	; 0x220
                p1 = GetNumObjects(p1, p3);
    3d62:	4682      	mov	sl, r0
    3d64:	e59a      	b.n	389c <MTPD::loop()+0x21c>
    3d66:	4620      	mov	r0, r4
    3d68:	f7fe f946 	bl	1ff8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3d6c:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3d70:	4620      	mov	r0, r4
    3d72:	220c      	movs	r2, #12
    3d74:	330c      	adds	r3, #12
    3d76:	a904      	add	r1, sp, #16
    3d78:	9304      	str	r3, [sp, #16]
    3d7a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3d7c:	f8ad 3016 	strh.w	r3, [sp, #22]
    3d80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3d82:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3d86:	9306      	str	r3, [sp, #24]
    3d88:	2302      	movs	r3, #2
    3d8a:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3d8e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3d92:	f7fe f8a5 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    3d96:	4620      	mov	r0, r4
    3d98:	f7fe f92e 	bl	1ff8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    3d9c:	e6ee      	b.n	3b7c <MTPD::loop()+0x4fc>
    3d9e:	bf00      	nop
    3da0:	20029198 	.word	0x20029198
    3da4:	10150002 	.word	0x10150002
    3da8:	10140002 	.word	0x10140002
    if (*str) 
    3dac:	4620      	mov	r0, r4
    3dae:	4929      	ldr	r1, [pc, #164]	; (3e54 <MTPD::loop()+0x7d4>)
    3db0:	f7fe f8d4 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3db4:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3db8:	a904      	add	r1, sp, #16
    3dba:	4620      	mov	r0, r4
    3dbc:	330c      	adds	r3, #12
    3dbe:	220c      	movs	r2, #12
    3dc0:	9304      	str	r3, [sp, #16]
    3dc2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
    3dc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3dca:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3dce:	9306      	str	r3, [sp, #24]
    3dd0:	2302      	movs	r3, #2
    3dd2:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3dd6:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3dda:	f7fe f881 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    3dde:	491d      	ldr	r1, [pc, #116]	; (3e54 <MTPD::loop()+0x7d4>)
    3de0:	4620      	mov	r0, r4
    3de2:	f7fe f8bb 	bl	1f5c <MTPD::writestring(char const*) [clone .part.0]>
  }
    3de6:	e6a0      	b.n	3b2a <MTPD::loop()+0x4aa>
              TRANSMIT(getObjectPropsSupported(p1));
    3de8:	f04f 0b00 	mov.w	fp, #0
    3dec:	2301      	movs	r3, #1
    3dee:	4651      	mov	r1, sl
    3df0:	4620      	mov	r0, r4
    3df2:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3df6:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3dfa:	f7fe fdcd 	bl	2998 <MTPD::getObjectPropsSupported(unsigned long)>
    3dfe:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3e02:	220c      	movs	r2, #12
    3e04:	a904      	add	r1, sp, #16
    3e06:	330c      	adds	r3, #12
    3e08:	4620      	mov	r0, r4
    3e0a:	9304      	str	r3, [sp, #16]
    3e0c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3e0e:	f8ad 3016 	strh.w	r3, [sp, #22]
    3e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e14:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e18:	9306      	str	r3, [sp, #24]
    3e1a:	2302      	movs	r3, #2
    3e1c:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3e20:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3e24:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3e28:	f7fe f85a 	bl	1ee0 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    3e2c:	4651      	mov	r1, sl
    3e2e:	4620      	mov	r0, r4
    3e30:	f7fe fdb2 	bl	2998 <MTPD::getObjectPropsSupported(unsigned long)>
    3e34:	9b04      	ldr	r3, [sp, #16]
    3e36:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3e3a:	f1bb 0f00 	cmp.w	fp, #0
    3e3e:	f43f acf1 	beq.w	3824 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e42:	223c      	movs	r2, #60	; 0x3c
    3e44:	4659      	mov	r1, fp
    3e46:	4640      	mov	r0, r8
    3e48:	f00a fe6e 	bl	eb28 <usb_mtp_send>
    3e4c:	2800      	cmp	r0, #0
    3e4e:	ddf8      	ble.n	3e42 <MTPD::loop()+0x7c2>
    3e50:	e4e8      	b.n	3824 <MTPD::loop()+0x1a4>
    3e52:	bf00      	nop
    3e54:	20000b48 	.word	0x20000b48

00003e58 <menuGetLine()>:
#include "Menu.h"
#include "RTC.h"
#include "Acq.h"

static char * menuGetLine(void)
{
    3e58:	b510      	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    3e5a:	f00b f98d 	bl	f178 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    3e5e:	2800      	cmp	r0, #0
    3e60:	d0fb      	beq.n	3e5a <menuGetLine()+0x2>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    3e62:	4c0b      	ldr	r4, [pc, #44]	; (3e90 <menuGetLine()+0x38>)
    3e64:	210d      	movs	r1, #13
    3e66:	2328      	movs	r3, #40	; 0x28
    3e68:	480a      	ldr	r0, [pc, #40]	; (3e94 <menuGetLine()+0x3c>)
    3e6a:	4622      	mov	r2, r4
    3e6c:	f008 ffae 	bl	cdcc <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    3e70:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    3e72:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    3e74:	4620      	mov	r0, r4
  buffer[count]=0;
    3e76:	54e2      	strb	r2, [r4, r3]
    3e78:	f00e f8e2 	bl	12040 <strlen>
    3e7c:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3e7e:	4620      	mov	r0, r4
    3e80:	f00b f9e4 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e84:	4803      	ldr	r0, [pc, #12]	; (3e94 <menuGetLine()+0x3c>)
    3e86:	f008 fe59 	bl	cb3c <Print::println()>
  Serial.println(buffer);
  return buffer;
}
    3e8a:	4620      	mov	r0, r4
    3e8c:	bd10      	pop	{r4, pc}
    3e8e:	bf00      	nop
    3e90:	2002857c 	.word	0x2002857c
    3e94:	20008abc 	.word	0x20008abc

00003e98 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    3e98:	b530      	push	{r4, r5, lr}
    3e9a:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    3e9c:	f00b f96c 	bl	f178 <usb_serial_available>

    while(!Serial.available()) ;
    3ea0:	2800      	cmp	r0, #0
    3ea2:	d0fb      	beq.n	3e9c <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    3ea4:	f00b f9ac 	bl	f200 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    3ea8:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    3eaa:	2864      	cmp	r0, #100	; 0x64
    3eac:	d04b      	beq.n	3f46 <menu3()+0xae>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    3eae:	3831      	subs	r0, #49	; 0x31
    3eb0:	2846      	cmp	r0, #70	; 0x46
    3eb2:	d85c      	bhi.n	3f6e <menu3()+0xd6>
    3eb4:	e8df f010 	tbh	[pc, r0, lsl #1]
    3eb8:	00720068 	.word	0x00720068
    3ebc:	0086007c 	.word	0x0086007c
    3ec0:	005b005b 	.word	0x005b005b
    3ec4:	005b005b 	.word	0x005b005b
    3ec8:	005b005b 	.word	0x005b005b
    3ecc:	005b005b 	.word	0x005b005b
    3ed0:	005b005b 	.word	0x005b005b
    3ed4:	005b005b 	.word	0x005b005b
    3ed8:	005b005b 	.word	0x005b005b
    3edc:	005b005b 	.word	0x005b005b
    3ee0:	005b005b 	.word	0x005b005b
    3ee4:	005b005b 	.word	0x005b005b
    3ee8:	005b005b 	.word	0x005b005b
    3eec:	005b005b 	.word	0x005b005b
    3ef0:	005b005b 	.word	0x005b005b
    3ef4:	005b005b 	.word	0x005b005b
    3ef8:	005b005b 	.word	0x005b005b
    3efc:	005b005b 	.word	0x005b005b
    3f00:	005b005b 	.word	0x005b005b
    3f04:	005b005b 	.word	0x005b005b
    3f08:	005b005b 	.word	0x005b005b
    3f0c:	005b005b 	.word	0x005b005b
    3f10:	005b005b 	.word	0x005b005b
    3f14:	005b005b 	.word	0x005b005b
    3f18:	005b0090 	.word	0x005b0090
    3f1c:	005b009a 	.word	0x005b009a
    3f20:	00a4005b 	.word	0x00a4005b
    3f24:	005b00b3 	.word	0x005b00b3
    3f28:	005b005b 	.word	0x005b005b
    3f2c:	005b005b 	.word	0x005b005b
    3f30:	005b005b 	.word	0x005b005b
    3f34:	005b00bd 	.word	0x005b00bd
    3f38:	00c7005b 	.word	0x00c7005b
    3f3c:	00e100d1 	.word	0x00e100d1
    3f40:	005b005b 	.word	0x005b005b
    3f44:	005d      	.short	0x005d
{ char *buffer=menuGetLine();
    3f46:	f7ff ff87 	bl	3e58 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    3f4a:	ad07      	add	r5, sp, #28
    3f4c:	f10d 0113 	add.w	r1, sp, #19
    3f50:	ac06      	add	r4, sp, #24
    3f52:	aa05      	add	r2, sp, #20
    3f54:	f10d 0312 	add.w	r3, sp, #18
    3f58:	9400      	str	r4, [sp, #0]
    3f5a:	e9cd 1501 	strd	r1, r5, [sp, #4]
    3f5e:	4951      	ldr	r1, [pc, #324]	; (40a4 <menu3()+0x20c>)
    3f60:	f00d fafc 	bl	1155c <sscanf>
      rtcSetDate(year,month,day);
    3f64:	9805      	ldr	r0, [sp, #20]
    3f66:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    3f6a:	f000 fdd3 	bl	4b14 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    3f6e:	b009      	add	sp, #36	; 0x24
    3f70:	bd30      	pop	{r4, r5, pc}
      menuGetInt16((int16_t *)params0);
    3f72:	4b4d      	ldr	r3, [pc, #308]	; (40a8 <menu3()+0x210>)
    3f74:	681c      	ldr	r4, [r3, #0]
{ char *buffer=menuGetLine();
    3f76:	f7ff ff6f 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3f7a:	aa07      	add	r2, sp, #28
    3f7c:	494b      	ldr	r1, [pc, #300]	; (40ac <menu3()+0x214>)
    3f7e:	f00d faed 	bl	1155c <sscanf>
    3f82:	9b07      	ldr	r3, [sp, #28]
    3f84:	8023      	strh	r3, [r4, #0]
  return 1;
    3f86:	e7f2      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3f88:	f7ff ff66 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3f8c:	aa07      	add	r2, sp, #28
    3f8e:	4947      	ldr	r1, [pc, #284]	; (40ac <menu3()+0x214>)
    3f90:	f00d fae4 	bl	1155c <sscanf>
    3f94:	4b46      	ldr	r3, [pc, #280]	; (40b0 <menu3()+0x218>)
    3f96:	9a07      	ldr	r2, [sp, #28]
    3f98:	801a      	strh	r2, [r3, #0]
  return 1;
    3f9a:	e7e8      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3f9c:	f7ff ff5c 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3fa0:	aa07      	add	r2, sp, #28
    3fa2:	4942      	ldr	r1, [pc, #264]	; (40ac <menu3()+0x214>)
    3fa4:	f00d fada 	bl	1155c <sscanf>
    3fa8:	4b42      	ldr	r3, [pc, #264]	; (40b4 <menu3()+0x21c>)
    3faa:	9a07      	ldr	r2, [sp, #28]
    3fac:	801a      	strh	r2, [r3, #0]
  return 1;
    3fae:	e7de      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3fb0:	f7ff ff52 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3fb4:	aa07      	add	r2, sp, #28
    3fb6:	493d      	ldr	r1, [pc, #244]	; (40ac <menu3()+0x214>)
    3fb8:	f00d fad0 	bl	1155c <sscanf>
    3fbc:	4b3e      	ldr	r3, [pc, #248]	; (40b8 <menu3()+0x220>)
    3fbe:	9a07      	ldr	r2, [sp, #28]
    3fc0:	801a      	strh	r2, [r3, #0]
  return 1;
    3fc2:	e7d4      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3fc4:	f7ff ff48 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3fc8:	aa07      	add	r2, sp, #28
    3fca:	4938      	ldr	r1, [pc, #224]	; (40ac <menu3()+0x214>)
    3fcc:	f00d fac6 	bl	1155c <sscanf>
    3fd0:	4b3a      	ldr	r3, [pc, #232]	; (40bc <menu3()+0x224>)
    3fd2:	9a07      	ldr	r2, [sp, #28]
    3fd4:	801a      	strh	r2, [r3, #0]
}
    3fd6:	e7ca      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3fd8:	f7ff ff3e 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    3fdc:	aa07      	add	r2, sp, #28
    3fde:	4933      	ldr	r1, [pc, #204]	; (40ac <menu3()+0x214>)
    3fe0:	f00d fabc 	bl	1155c <sscanf>
    3fe4:	4b36      	ldr	r3, [pc, #216]	; (40c0 <menu3()+0x228>)
    3fe6:	9a07      	ldr	r2, [sp, #28]
    3fe8:	601a      	str	r2, [r3, #0]
  return 1;
    3fea:	e7c0      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    3fec:	f7ff ff34 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    3ff0:	aa07      	add	r2, sp, #28
    3ff2:	492e      	ldr	r1, [pc, #184]	; (40ac <menu3()+0x214>)
    3ff4:	f00d fab2 	bl	1155c <sscanf>
    3ff8:	4b32      	ldr	r3, [pc, #200]	; (40c4 <menu3()+0x22c>)
    3ffa:	9a07      	ldr	r2, [sp, #28]
    3ffc:	801a      	strh	r2, [r3, #0]
  return 1;
    3ffe:	e7b6      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4000:	f7ff ff2a 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    4004:	aa07      	add	r2, sp, #28
    4006:	4929      	ldr	r1, [pc, #164]	; (40ac <menu3()+0x214>)
    4008:	f00d faa8 	bl	1155c <sscanf>
    400c:	4b2e      	ldr	r3, [pc, #184]	; (40c8 <menu3()+0x230>)
    400e:	9a07      	ldr	r2, [sp, #28]
    4010:	601a      	str	r2, [r3, #0]
      acqModifyFrequency(fsamp);
    4012:	6818      	ldr	r0, [r3, #0]
}
    4014:	b009      	add	sp, #36	; 0x24
    4016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      acqModifyFrequency(fsamp);
    401a:	f7fc bead 	b.w	d78 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    401e:	f7ff ff1b 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4022:	aa07      	add	r2, sp, #28
    4024:	4921      	ldr	r1, [pc, #132]	; (40ac <menu3()+0x214>)
    4026:	f00d fa99 	bl	1155c <sscanf>
    402a:	4b28      	ldr	r3, [pc, #160]	; (40cc <menu3()+0x234>)
    402c:	9a07      	ldr	r2, [sp, #28]
    402e:	801a      	strh	r2, [r3, #0]
  return 1;
    4030:	e79d      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4032:	f7ff ff11 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    4036:	aa07      	add	r2, sp, #28
    4038:	491c      	ldr	r1, [pc, #112]	; (40ac <menu3()+0x214>)
    403a:	f00d fa8f 	bl	1155c <sscanf>
    403e:	4b24      	ldr	r3, [pc, #144]	; (40d0 <menu3()+0x238>)
    4040:	9a07      	ldr	r2, [sp, #28]
    4042:	601a      	str	r2, [r3, #0]
  return 1;
    4044:	e793      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4046:	f7ff ff07 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    404a:	aa07      	add	r2, sp, #28
    404c:	4917      	ldr	r1, [pc, #92]	; (40ac <menu3()+0x214>)
    404e:	f00d fa85 	bl	1155c <sscanf>
    4052:	4b20      	ldr	r3, [pc, #128]	; (40d4 <menu3()+0x23c>)
    4054:	9a07      	ldr	r2, [sp, #28]
    4056:	601a      	str	r2, [r3, #0]
  return 1;
    4058:	e789      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    405a:	f7ff fefd 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    405e:	aa07      	add	r2, sp, #28
    4060:	4912      	ldr	r1, [pc, #72]	; (40ac <menu3()+0x214>)
    4062:	f00d fa7b 	bl	1155c <sscanf>
    4066:	4b1c      	ldr	r3, [pc, #112]	; (40d8 <menu3()+0x240>)
    4068:	9a07      	ldr	r2, [sp, #28]
    406a:	801a      	strh	r2, [r3, #0]
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    406c:	881a      	ldrh	r2, [r3, #0]
    406e:	0412      	lsls	r2, r2, #16
    4070:	f57f af7d 	bpl.w	3f6e <menu3()+0xd6>
    4074:	2200      	movs	r2, #0
    4076:	801a      	strh	r2, [r3, #0]
    4078:	e779      	b.n	3f6e <menu3()+0xd6>
{ char *buffer=menuGetLine();
    407a:	f7ff feed 	bl	3e58 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    407e:	ad07      	add	r5, sp, #28
    4080:	f10d 0113 	add.w	r1, sp, #19
    4084:	ac06      	add	r4, sp, #24
    4086:	aa05      	add	r2, sp, #20
    4088:	f10d 0312 	add.w	r3, sp, #18
    408c:	9400      	str	r4, [sp, #0]
    408e:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4092:	4904      	ldr	r1, [pc, #16]	; (40a4 <menu3()+0x20c>)
    4094:	f00d fa62 	bl	1155c <sscanf>
      rtcSetTime(hour,minutes,seconds);
    4098:	9805      	ldr	r0, [sp, #20]
    409a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    409e:	f000 fd51 	bl	4b44 <rtcSetTime(int, int, int)>
    40a2:	e764      	b.n	3f6e <menu3()+0xd6>
    40a4:	20000774 	.word	0x20000774
    40a8:	20009440 	.word	0x20009440
    40ac:	2000077c 	.word	0x2000077c
    40b0:	20029364 	.word	0x20029364
    40b4:	20009450 	.word	0x20009450
    40b8:	20009454 	.word	0x20009454
    40bc:	20009458 	.word	0x20009458
    40c0:	2000945c 	.word	0x2000945c
    40c4:	20029392 	.word	0x20029392
    40c8:	2000943c 	.word	0x2000943c
    40cc:	20009482 	.word	0x20009482
    40d0:	20009460 	.word	0x20009460
    40d4:	20009464 	.word	0x20009464
    40d8:	20009484 	.word	0x20009484

000040dc <saveParameters()>:
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
}

void saveParameters(void)
{
  store[0]  = *params0;
    40dc:	491e      	ldr	r1, [pc, #120]	; (4158 <saveParameters()+0x7c>)
  store[1]  = t_acq;
    40de:	4a1f      	ldr	r2, [pc, #124]	; (415c <saveParameters()+0x80>)
  store[2]  = t_on;
    40e0:	4b1f      	ldr	r3, [pc, #124]	; (4160 <saveParameters()+0x84>)
  store[0]  = *params0;
    40e2:	4820      	ldr	r0, [pc, #128]	; (4164 <saveParameters()+0x88>)
{
    40e4:	b430      	push	{r4, r5}
  store[0]  = *params0;
    40e6:	680d      	ldr	r5, [r1, #0]
  store[3]  = t_off;
    40e8:	4c1f      	ldr	r4, [pc, #124]	; (4168 <saveParameters()+0x8c>)
  store[0]  = *params0;
    40ea:	f8b5 c000 	ldrh.w	ip, [r5]
  store[1]  = t_acq;
    40ee:	6812      	ldr	r2, [r2, #0]
  store[2]  = t_on;
    40f0:	681b      	ldr	r3, [r3, #0]
  store[4]  = t_rep;
    40f2:	491e      	ldr	r1, [pc, #120]	; (416c <saveParameters()+0x90>)
  store[2]  = t_on;
    40f4:	8083      	strh	r3, [r0, #4]
  store[5]  = proc;
    40f6:	4b1e      	ldr	r3, [pc, #120]	; (4170 <saveParameters()+0x94>)
  store[3]  = t_off;
    40f8:	6824      	ldr	r4, [r4, #0]
  store[4]  = t_rep;
    40fa:	6809      	ldr	r1, [r1, #0]
  store[5]  = proc;
    40fc:	881b      	ldrh	r3, [r3, #0]
  store[1]  = t_acq;
    40fe:	8042      	strh	r2, [r0, #2]
  store[5]  = proc;
    4100:	8143      	strh	r3, [r0, #10]
  store[6]  = shift;
    4102:	4a1c      	ldr	r2, [pc, #112]	; (4174 <saveParameters()+0x98>)
  store[7]  = t_1;
    4104:	4b1c      	ldr	r3, [pc, #112]	; (4178 <saveParameters()+0x9c>)
  store[3]  = t_off;
    4106:	80c4      	strh	r4, [r0, #6]
  store[4]  = t_rep;
    4108:	8101      	strh	r1, [r0, #8]
  store[6]  = shift;
    410a:	8814      	ldrh	r4, [r2, #0]
  store[8]  = t_2;
    410c:	491b      	ldr	r1, [pc, #108]	; (417c <saveParameters()+0xa0>)
  store[7]  = t_1;
    410e:	681b      	ldr	r3, [r3, #0]
  store[9]  = t_3;
    4110:	4a1b      	ldr	r2, [pc, #108]	; (4180 <saveParameters()+0xa4>)
  store[6]  = shift;
    4112:	8184      	strh	r4, [r0, #12]
  store[7]  = t_1;
    4114:	81c3      	strh	r3, [r0, #14]
  store[8]  = t_2;
    4116:	680c      	ldr	r4, [r1, #0]
  store[10] = t_4;
  store[11] = fsamp/1000;
    4118:	4b1a      	ldr	r3, [pc, #104]	; (4184 <saveParameters()+0xa8>)
  store[9]  = t_3;
    411a:	6811      	ldr	r1, [r2, #0]
  store[10] = t_4;
    411c:	4a1a      	ldr	r2, [pc, #104]	; (4188 <saveParameters()+0xac>)
  store[9]  = t_3;
    411e:	8241      	strh	r1, [r0, #18]
  store[10] = t_4;
    4120:	6812      	ldr	r2, [r2, #0]
  store[11] = fsamp/1000;
    4122:	491a      	ldr	r1, [pc, #104]	; (418c <saveParameters()+0xb0>)
    4124:	681b      	ldr	r3, [r3, #0]
  store[10] = t_4;
    4126:	8282      	strh	r2, [r0, #20]
  store[11] = fsamp/1000;
    4128:	17da      	asrs	r2, r3, #31
    412a:	fb81 1303 	smull	r1, r3, r1, r3
  store[8]  = t_2;
    412e:	8204      	strh	r4, [r0, #16]
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
    4130:	2100      	movs	r1, #0
  store[12] = again;
    4132:	4c17      	ldr	r4, [pc, #92]	; (4190 <saveParameters()+0xb4>)
  store[11] = fsamp/1000;
    4134:	ebc2 13a3 	rsb	r3, r2, r3, asr #6
  store[13] = dgain;
    4138:	4a16      	ldr	r2, [pc, #88]	; (4194 <saveParameters()+0xb8>)
  store[0]  = *params0;
    413a:	f8a0 c000 	strh.w	ip, [r0]
  store[12] = again;
    413e:	f8b4 c000 	ldrh.w	ip, [r4]
  store[13] = dgain;
    4142:	8812      	ldrh	r2, [r2, #0]
  store[12] = again;
    4144:	f8a0 c018 	strh.w	ip, [r0, #24]
  store[13] = dgain;
    4148:	8342      	strh	r2, [r0, #26]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    414a:	2220      	movs	r2, #32
  store[11] = fsamp/1000;
    414c:	82c3      	strh	r3, [r0, #22]
  store[14] = 0;
    414e:	61c1      	str	r1, [r0, #28]
  store[15] = 0;

  storeConfig(store, 16);
}
    4150:	bc30      	pop	{r4, r5}
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4152:	f009 bae3 	b.w	d71c <eeprom_write_block>
    4156:	bf00      	nop
    4158:	20009440 	.word	0x20009440
    415c:	2000945c 	.word	0x2000945c
    4160:	20009460 	.word	0x20009460
    4164:	20027e14 	.word	0x20027e14
    4168:	20029368 	.word	0x20029368
    416c:	20009464 	.word	0x20009464
    4170:	20029392 	.word	0x20029392
    4174:	20009484 	.word	0x20009484
    4178:	20029364 	.word	0x20029364
    417c:	20009450 	.word	0x20009450
    4180:	20009454 	.word	0x20009454
    4184:	2000943c 	.word	0x2000943c
    4188:	20009458 	.word	0x20009458
    418c:	10624dd3 	.word	0x10624dd3
    4190:	20009482 	.word	0x20009482
    4194:	2002938c 	.word	0x2002938c

00004198 <menu1(short)>:
{   // have ':'
    4198:	b510      	push	{r4, lr}
    419a:	4604      	mov	r4, r0
    419c:	b082      	sub	sp, #8
        virtual int available() { return usb_serial_available(); }
    419e:	f00a ffeb 	bl	f178 <usb_serial_available>
    while(!Serial.available()) ;
    41a2:	2800      	cmp	r0, #0
    41a4:	d0fb      	beq.n	419e <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    41a6:	f00b f82b 	bl	f200 <usb_serial_getchar>
    ch=Serial.read();
    41aa:	b2c3      	uxtb	r3, r0
    if(ch=='w') 
    41ac:	2b77      	cmp	r3, #119	; 0x77
    41ae:	d004      	beq.n	41ba <menu1(short)+0x22>
    else if(ch=='m') 
    41b0:	2b6d      	cmp	r3, #109	; 0x6d
    41b2:	d00e      	beq.n	41d2 <menu1(short)+0x3a>
}
    41b4:	4620      	mov	r0, r4
    41b6:	b002      	add	sp, #8
    41b8:	bd10      	pop	{r4, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    41ba:	210f      	movs	r1, #15
    41bc:	480b      	ldr	r0, [pc, #44]	; (41ec <menu1(short)+0x54>)
    41be:	f00b f845 	bl	f24c <usb_serial_write>
    41c2:	480b      	ldr	r0, [pc, #44]	; (41f0 <menu1(short)+0x58>)
    41c4:	f008 fcba 	bl	cb3c <Print::println()>
      saveParameters();
    41c8:	f7ff ff88 	bl	40dc <saveParameters()>
}
    41cc:	4620      	mov	r0, r4
    41ce:	b002      	add	sp, #8
    41d0:	bd10      	pop	{r4, pc}
{ char *buffer=menuGetLine();
    41d2:	f7ff fe41 	bl	3e58 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    41d6:	aa01      	add	r2, sp, #4
    41d8:	4906      	ldr	r1, [pc, #24]	; (41f4 <menu1(short)+0x5c>)
    41da:	f00d f9bf 	bl	1155c <sscanf>
    41de:	9a01      	ldr	r2, [sp, #4]
    41e0:	4b05      	ldr	r3, [pc, #20]	; (41f8 <menu1(short)+0x60>)
}
    41e2:	4620      	mov	r0, r4
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    41e4:	601a      	str	r2, [r3, #0]
}
    41e6:	b002      	add	sp, #8
    41e8:	bd10      	pop	{r4, pc}
    41ea:	bf00      	nop
    41ec:	20000604 	.word	0x20000604
    41f0:	20008abc 	.word	0x20008abc
    41f4:	2000077c 	.word	0x2000077c
    41f8:	20029390 	.word	0x20029390

000041fc <loadParameters()>:

uint16_t *loadParameters(void)
{
    41fc:	b538      	push	{r3, r4, r5, lr}
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    41fe:	4c39      	ldr	r4, [pc, #228]	; (42e4 <loadParameters()+0xe8>)
    4200:	2220      	movs	r2, #32
    4202:	2100      	movs	r1, #0
    4204:	4620      	mov	r0, r4
    4206:	f009 f90d 	bl	d424 <eeprom_read_block>
  loadConfig(store,16);
  if(store[0]==1)
    420a:	8823      	ldrh	r3, [r4, #0]
    420c:	2b01      	cmp	r3, #1
    420e:	d038      	beq.n	4282 <loadParameters()+0x86>
    again   = store[12];
    dgain   = store[13];
  }
  else
  {
    store[0]  = *params0 = 0;
    4210:	4835      	ldr	r0, [pc, #212]	; (42e8 <loadParameters()+0xec>)
    4212:	2300      	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    4214:	213c      	movs	r1, #60	; 0x3c
    store[3]  = t_off    = T_OFF;
    store[4]  = t_rep    = T_REP;
    4216:	f44f 7261 	mov.w	r2, #900	; 0x384
    store[0]  = *params0 = 0;
    421a:	6805      	ldr	r5, [r0, #0]
    store[5]  = proc     = PROC_MODE;
    store[6]  = shift    = SHIFT;
    421c:	f04f 0c08 	mov.w	ip, #8
    store[1]  = t_acq    = T_ACQ;
    4220:	4832      	ldr	r0, [pc, #200]	; (42ec <loadParameters()+0xf0>)
    store[0]  = *params0 = 0;
    4222:	802b      	strh	r3, [r5, #0]
    store[1]  = t_acq    = T_ACQ;
    4224:	6001      	str	r1, [r0, #0]
    4226:	8061      	strh	r1, [r4, #2]
    store[3]  = t_off    = T_OFF;
    4228:	4831      	ldr	r0, [pc, #196]	; (42f0 <loadParameters()+0xf4>)
    store[4]  = t_rep    = T_REP;
    422a:	4932      	ldr	r1, [pc, #200]	; (42f4 <loadParameters()+0xf8>)
    store[3]  = t_off    = T_OFF;
    422c:	6003      	str	r3, [r0, #0]
    store[7]  = t_1      = T_1;
    store[8]  = t_2      = T_2;
    store[9]  = t_3      = T_3;
    store[10] = t_4      = T_4;
    422e:	2018      	movs	r0, #24
    store[4]  = t_rep    = T_REP;
    4230:	600a      	str	r2, [r1, #0]
    store[6]  = shift    = SHIFT;
    4232:	4d31      	ldr	r5, [pc, #196]	; (42f8 <loadParameters()+0xfc>)
    store[5]  = proc     = PROC_MODE;
    4234:	4931      	ldr	r1, [pc, #196]	; (42fc <loadParameters()+0x100>)
    store[4]  = t_rep    = T_REP;
    4236:	8122      	strh	r2, [r4, #8]
    store[8]  = t_2      = T_2;
    4238:	220c      	movs	r2, #12
    store[5]  = proc     = PROC_MODE;
    423a:	800b      	strh	r3, [r1, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    store[12] = again    = AGAIN;
    423c:	210a      	movs	r1, #10
    store[6]  = shift    = SHIFT;
    423e:	f8a5 c000 	strh.w	ip, [r5]
    store[7]  = t_1      = T_1;
    4242:	4d2f      	ldr	r5, [pc, #188]	; (4300 <loadParameters()+0x104>)
    store[8]  = t_2      = T_2;
    4244:	8222      	strh	r2, [r4, #16]
    store[7]  = t_1      = T_1;
    4246:	602b      	str	r3, [r5, #0]
    store[8]  = t_2      = T_2;
    4248:	4d2e      	ldr	r5, [pc, #184]	; (4304 <loadParameters()+0x108>)
    store[9]  = t_3      = T_3;
    424a:	8262      	strh	r2, [r4, #18]
    store[8]  = t_2      = T_2;
    424c:	602a      	str	r2, [r5, #0]
    store[9]  = t_3      = T_3;
    424e:	4d2e      	ldr	r5, [pc, #184]	; (4308 <loadParameters()+0x10c>)
    store[10] = t_4      = T_4;
    4250:	82a0      	strh	r0, [r4, #20]
    store[9]  = t_3      = T_3;
    4252:	602a      	str	r2, [r5, #0]
    store[10] = t_4      = T_4;
    4254:	4a2d      	ldr	r2, [pc, #180]	; (430c <loadParameters()+0x110>)
    store[0]  = *params0 = 0;
    4256:	8023      	strh	r3, [r4, #0]
    store[10] = t_4      = T_4;
    4258:	6010      	str	r0, [r2, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    425a:	f64b 3080 	movw	r0, #48000	; 0xbb80
    425e:	4a2c      	ldr	r2, [pc, #176]	; (4310 <loadParameters()+0x114>)
    store[3]  = t_off    = T_OFF;
    4260:	80e3      	strh	r3, [r4, #6]
    store[11] = (fsamp   = FSAMP)/1000; 
    4262:	6010      	str	r0, [r2, #0]
    4264:	2230      	movs	r2, #48	; 0x30
    store[12] = again    = AGAIN;
    4266:	482b      	ldr	r0, [pc, #172]	; (4314 <loadParameters()+0x118>)
    store[11] = (fsamp   = FSAMP)/1000; 
    4268:	82e2      	strh	r2, [r4, #22]
    store[13] = dgain    = DGAIN;
    426a:	4a2b      	ldr	r2, [pc, #172]	; (4318 <loadParameters()+0x11c>)
    store[12] = again    = AGAIN;
    426c:	8001      	strh	r1, [r0, #0]
    store[5]  = proc     = PROC_MODE;
    426e:	8163      	strh	r3, [r4, #10]
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    4270:	481c      	ldr	r0, [pc, #112]	; (42e4 <loadParameters()+0xe8>)
    store[6]  = shift    = SHIFT;
    4272:	f8a4 c00c 	strh.w	ip, [r4, #12]
    store[7]  = t_1      = T_1;
    4276:	81e3      	strh	r3, [r4, #14]
    store[13] = dgain    = DGAIN;
    4278:	8363      	strh	r3, [r4, #26]
    store[14] = 0;
    427a:	61e3      	str	r3, [r4, #28]
    store[12] = again    = AGAIN;
    427c:	8321      	strh	r1, [r4, #24]
    store[13] = dgain    = DGAIN;
    427e:	8013      	strh	r3, [r2, #0]
}
    4280:	bd38      	pop	{r3, r4, r5, pc}
    t_acq   = store[1];
    4282:	8860      	ldrh	r0, [r4, #2]
    fsamp   = store[11]*1000;
    4284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    t_acq   = store[1];
    4288:	4918      	ldr	r1, [pc, #96]	; (42ec <loadParameters()+0xf0>)
    fsamp   = store[11]*1000;
    428a:	8ae3      	ldrh	r3, [r4, #22]
    t_acq   = store[1];
    428c:	6008      	str	r0, [r1, #0]
    t_on    = store[2];
    428e:	88a0      	ldrh	r0, [r4, #4]
    fsamp   = store[11]*1000;
    4290:	fb02 f303 	mul.w	r3, r2, r3
    t_on    = store[2];
    4294:	4921      	ldr	r1, [pc, #132]	; (431c <loadParameters()+0x120>)
    fsamp   = store[11]*1000;
    4296:	4a1e      	ldr	r2, [pc, #120]	; (4310 <loadParameters()+0x114>)
    t_on    = store[2];
    4298:	6008      	str	r0, [r1, #0]
    t_off   = store[3];
    429a:	88e0      	ldrh	r0, [r4, #6]
    429c:	4914      	ldr	r1, [pc, #80]	; (42f0 <loadParameters()+0xf4>)
    429e:	6008      	str	r0, [r1, #0]
    t_rep   = store[4];
    42a0:	8920      	ldrh	r0, [r4, #8]
    42a2:	4914      	ldr	r1, [pc, #80]	; (42f4 <loadParameters()+0xf8>)
    42a4:	6008      	str	r0, [r1, #0]
    proc    = store[5];
    42a6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    42aa:	4914      	ldr	r1, [pc, #80]	; (42fc <loadParameters()+0x100>)
    42ac:	8008      	strh	r0, [r1, #0]
    shift   = store[6];
    42ae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    42b2:	4911      	ldr	r1, [pc, #68]	; (42f8 <loadParameters()+0xfc>)
    42b4:	8008      	strh	r0, [r1, #0]
    t_1     = store[7];
    42b6:	89e0      	ldrh	r0, [r4, #14]
    42b8:	4911      	ldr	r1, [pc, #68]	; (4300 <loadParameters()+0x104>)
    42ba:	6008      	str	r0, [r1, #0]
    t_2     = store[8];
    42bc:	8a20      	ldrh	r0, [r4, #16]
    42be:	4911      	ldr	r1, [pc, #68]	; (4304 <loadParameters()+0x108>)
    42c0:	6008      	str	r0, [r1, #0]
    t_3     = store[9];
    42c2:	8a60      	ldrh	r0, [r4, #18]
    42c4:	4910      	ldr	r1, [pc, #64]	; (4308 <loadParameters()+0x10c>)
    42c6:	6008      	str	r0, [r1, #0]
    t_4     = store[10];
    42c8:	8aa0      	ldrh	r0, [r4, #20]
    42ca:	4910      	ldr	r1, [pc, #64]	; (430c <loadParameters()+0x110>)
    42cc:	6008      	str	r0, [r1, #0]
    fsamp   = store[11]*1000;
    42ce:	6013      	str	r3, [r2, #0]
    again   = store[12];
    42d0:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    42d4:	490f      	ldr	r1, [pc, #60]	; (4314 <loadParameters()+0x118>)
    dgain   = store[13];
    42d6:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    42da:	4b0f      	ldr	r3, [pc, #60]	; (4318 <loadParameters()+0x11c>)
    again   = store[12];
    42dc:	8008      	strh	r0, [r1, #0]
}
    42de:	4801      	ldr	r0, [pc, #4]	; (42e4 <loadParameters()+0xe8>)
    dgain   = store[13];
    42e0:	801a      	strh	r2, [r3, #0]
}
    42e2:	bd38      	pop	{r3, r4, r5, pc}
    42e4:	20027e14 	.word	0x20027e14
    42e8:	20009440 	.word	0x20009440
    42ec:	2000945c 	.word	0x2000945c
    42f0:	20029368 	.word	0x20029368
    42f4:	20009464 	.word	0x20009464
    42f8:	20009484 	.word	0x20009484
    42fc:	20029392 	.word	0x20029392
    4300:	20029364 	.word	0x20029364
    4304:	20009450 	.word	0x20009450
    4308:	20009454 	.word	0x20009454
    430c:	20009458 	.word	0x20009458
    4310:	2000943c 	.word	0x2000943c
    4314:	20009482 	.word	0x20009482
    4318:	2002938c 	.word	0x2002938c
    431c:	20009460 	.word	0x20009460

00004320 <menu2()>:
{   // have '?'
    4320:	b510      	push	{r4, lr}
    4322:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    4324:	f00a ff28 	bl	f178 <usb_serial_available>
    while(!Serial.available()) ;
    4328:	2800      	cmp	r0, #0
    432a:	d0fb      	beq.n	4324 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    432c:	f00a ff68 	bl	f200 <usb_serial_getchar>
    ch=Serial.read();
    4330:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    4332:	2870      	cmp	r0, #112	; 0x70
    4334:	d053      	beq.n	43de <menu2()+0xbe>
    else if(ch=='d') // get date
    4336:	3831      	subs	r0, #49	; 0x31
    4338:	2846      	cmp	r0, #70	; 0x46
    433a:	d84a      	bhi.n	43d2 <menu2()+0xb2>
    433c:	e8df f010 	tbh	[pc, r0, lsl #1]
    4340:	011e0118 	.word	0x011e0118
    4344:	012a0124 	.word	0x012a0124
    4348:	00490049 	.word	0x00490049
    434c:	00490049 	.word	0x00490049
    4350:	00490049 	.word	0x00490049
    4354:	00490049 	.word	0x00490049
    4358:	00490049 	.word	0x00490049
    435c:	00490049 	.word	0x00490049
    4360:	00490049 	.word	0x00490049
    4364:	00490049 	.word	0x00490049
    4368:	00490049 	.word	0x00490049
    436c:	00490049 	.word	0x00490049
    4370:	00490049 	.word	0x00490049
    4374:	00490049 	.word	0x00490049
    4378:	00490049 	.word	0x00490049
    437c:	00490049 	.word	0x00490049
    4380:	00490049 	.word	0x00490049
    4384:	00490049 	.word	0x00490049
    4388:	00490049 	.word	0x00490049
    438c:	00490049 	.word	0x00490049
    4390:	00490049 	.word	0x00490049
    4394:	00490049 	.word	0x00490049
    4398:	00490049 	.word	0x00490049
    439c:	00490049 	.word	0x00490049
    43a0:	0049012d 	.word	0x0049012d
    43a4:	01410133 	.word	0x01410133
    43a8:	01500049 	.word	0x01500049
    43ac:	0049015d 	.word	0x0049015d
    43b0:	00490049 	.word	0x00490049
    43b4:	00490049 	.word	0x00490049
    43b8:	00490049 	.word	0x00490049
    43bc:	00490163 	.word	0x00490163
    43c0:	01690049 	.word	0x01690049
    43c4:	0175016f 	.word	0x0175016f
    43c8:	00490049 	.word	0x00490049
    43cc:	0109      	.short	0x0109
    43ce:	f00a ff17 	bl	f200 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    43d2:	f00a fed1 	bl	f178 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    43d6:	2800      	cmp	r0, #0
    43d8:	d1f9      	bne.n	43ce <menu2()+0xae>
}
    43da:	b008      	add	sp, #32
    43dc:	bd10      	pop	{r4, pc}
      Serial.println();
    43de:	489a      	ldr	r0, [pc, #616]	; (4648 <menu2()+0x328>)
    43e0:	f008 fbac 	bl	cb3c <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    43e4:	2126      	movs	r1, #38	; 0x26
    43e6:	4899      	ldr	r0, [pc, #612]	; (464c <menu2()+0x32c>)
    43e8:	f00a ff30 	bl	f24c <usb_serial_write>
    43ec:	4896      	ldr	r0, [pc, #600]	; (4648 <menu2()+0x328>)
    43ee:	f008 fba5 	bl	cb3c <Print::println()>
      rtc_get_datetime(&t);
    43f2:	a806      	add	r0, sp, #24
    43f4:	f000 fb82 	bl	4afc <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now: %4d-%02d-%02d %02d:%02d:%02d %d\n",
    43f8:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    43fc:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    4400:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    4404:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4408:	f99d 401e 	ldrsb.w	r4, [sp, #30]
    440c:	9000      	str	r0, [sp, #0]
    440e:	488e      	ldr	r0, [pc, #568]	; (4648 <menu2()+0x328>)
    4410:	e9cd 3203 	strd	r3, r2, [sp, #12]
    4414:	e9cd 1401 	strd	r1, r4, [sp, #4]
    4418:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    441c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4420:	498b      	ldr	r1, [pc, #556]	; (4650 <menu2()+0x330>)
    4422:	f008 fba7 	bl	cb74 <Print::printf(char const*, ...)>
    4426:	210c      	movs	r1, #12
    4428:	488a      	ldr	r0, [pc, #552]	; (4654 <menu2()+0x334>)
    442a:	f00a ff0f 	bl	f24c <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    442e:	498a      	ldr	r1, [pc, #552]	; (4658 <menu2()+0x338>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4430:	2300      	movs	r3, #0
    4432:	220a      	movs	r2, #10
    4434:	6809      	ldr	r1, [r1, #0]
    4436:	4884      	ldr	r0, [pc, #528]	; (4648 <menu2()+0x328>)
    4438:	f008 fbaa 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    443c:	4882      	ldr	r0, [pc, #520]	; (4648 <menu2()+0x328>)
    443e:	f008 fb7d 	bl	cb3c <Print::println()>
    4442:	210c      	movs	r1, #12
    4444:	4885      	ldr	r0, [pc, #532]	; (465c <menu2()+0x33c>)
    4446:	f00a ff01 	bl	f24c <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    444a:	4985      	ldr	r1, [pc, #532]	; (4660 <menu2()+0x340>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    444c:	2300      	movs	r3, #0
    444e:	220a      	movs	r2, #10
    4450:	6809      	ldr	r1, [r1, #0]
    4452:	487d      	ldr	r0, [pc, #500]	; (4648 <menu2()+0x328>)
    4454:	f008 fb9c 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4458:	487b      	ldr	r0, [pc, #492]	; (4648 <menu2()+0x328>)
    445a:	f008 fb6f 	bl	cb3c <Print::println()>
    445e:	210c      	movs	r1, #12
    4460:	4880      	ldr	r0, [pc, #512]	; (4664 <menu2()+0x344>)
    4462:	f00a fef3 	bl	f24c <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    4466:	4980      	ldr	r1, [pc, #512]	; (4668 <menu2()+0x348>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4468:	220a      	movs	r2, #10
    446a:	2300      	movs	r3, #0
    446c:	6809      	ldr	r1, [r1, #0]
    446e:	4876      	ldr	r0, [pc, #472]	; (4648 <menu2()+0x328>)
    4470:	f008 fb8e 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4474:	4874      	ldr	r0, [pc, #464]	; (4648 <menu2()+0x328>)
    4476:	f008 fb61 	bl	cb3c <Print::println()>
    447a:	210c      	movs	r1, #12
    447c:	487b      	ldr	r0, [pc, #492]	; (466c <menu2()+0x34c>)
    447e:	f00a fee5 	bl	f24c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    4482:	4b7b      	ldr	r3, [pc, #492]	; (4670 <menu2()+0x350>)
	size_t println(long n)				{ return print(n) + println(); }
    4484:	4870      	ldr	r0, [pc, #448]	; (4648 <menu2()+0x328>)
    4486:	6819      	ldr	r1, [r3, #0]
    4488:	f008 fb4c 	bl	cb24 <Print::print(long)>
    448c:	486e      	ldr	r0, [pc, #440]	; (4648 <menu2()+0x328>)
    448e:	f008 fb55 	bl	cb3c <Print::println()>
    4492:	210c      	movs	r1, #12
    4494:	4877      	ldr	r0, [pc, #476]	; (4674 <menu2()+0x354>)
    4496:	f00a fed9 	bl	f24c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    449a:	4b77      	ldr	r3, [pc, #476]	; (4678 <menu2()+0x358>)
	size_t print(int n)				{ return print((long)n); }
    449c:	486a      	ldr	r0, [pc, #424]	; (4648 <menu2()+0x328>)
    449e:	8819      	ldrh	r1, [r3, #0]
    44a0:	b209      	sxth	r1, r1
    44a2:	f008 fb3f 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44a6:	4868      	ldr	r0, [pc, #416]	; (4648 <menu2()+0x328>)
    44a8:	f008 fb48 	bl	cb3c <Print::println()>
    44ac:	210c      	movs	r1, #12
    44ae:	4873      	ldr	r0, [pc, #460]	; (467c <menu2()+0x35c>)
    44b0:	f00a fecc 	bl	f24c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    44b4:	4b72      	ldr	r3, [pc, #456]	; (4680 <menu2()+0x360>)
	size_t print(int n)				{ return print((long)n); }
    44b6:	4864      	ldr	r0, [pc, #400]	; (4648 <menu2()+0x328>)
    44b8:	8819      	ldrh	r1, [r3, #0]
    44ba:	b209      	sxth	r1, r1
    44bc:	f008 fb32 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44c0:	4861      	ldr	r0, [pc, #388]	; (4648 <menu2()+0x328>)
    44c2:	f008 fb3b 	bl	cb3c <Print::println()>
    44c6:	210c      	movs	r1, #12
    44c8:	486e      	ldr	r0, [pc, #440]	; (4684 <menu2()+0x364>)
    44ca:	f00a febf 	bl	f24c <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    44ce:	4b6e      	ldr	r3, [pc, #440]	; (4688 <menu2()+0x368>)
	size_t print(int n)				{ return print((long)n); }
    44d0:	485d      	ldr	r0, [pc, #372]	; (4648 <menu2()+0x328>)
    44d2:	8819      	ldrh	r1, [r3, #0]
    44d4:	b209      	sxth	r1, r1
    44d6:	f008 fb25 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44da:	485b      	ldr	r0, [pc, #364]	; (4648 <menu2()+0x328>)
    44dc:	f008 fb2e 	bl	cb3c <Print::println()>
    44e0:	210c      	movs	r1, #12
    44e2:	486a      	ldr	r0, [pc, #424]	; (468c <menu2()+0x36c>)
    44e4:	f00a feb2 	bl	f24c <usb_serial_write>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    44e8:	4969      	ldr	r1, [pc, #420]	; (4690 <menu2()+0x370>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    44ea:	2300      	movs	r3, #0
    44ec:	220a      	movs	r2, #10
    44ee:	6809      	ldr	r1, [r1, #0]
    44f0:	4855      	ldr	r0, [pc, #340]	; (4648 <menu2()+0x328>)
    44f2:	f008 fb4d 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    44f6:	4854      	ldr	r0, [pc, #336]	; (4648 <menu2()+0x328>)
    44f8:	f008 fb20 	bl	cb3c <Print::println()>
    44fc:	210c      	movs	r1, #12
    44fe:	4865      	ldr	r0, [pc, #404]	; (4694 <menu2()+0x374>)
    4500:	f00a fea4 	bl	f24c <usb_serial_write>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    4504:	4964      	ldr	r1, [pc, #400]	; (4698 <menu2()+0x378>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4506:	2300      	movs	r3, #0
    4508:	220a      	movs	r2, #10
    450a:	6809      	ldr	r1, [r1, #0]
    450c:	484e      	ldr	r0, [pc, #312]	; (4648 <menu2()+0x328>)
    450e:	f008 fb3f 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4512:	484d      	ldr	r0, [pc, #308]	; (4648 <menu2()+0x328>)
    4514:	f008 fb12 	bl	cb3c <Print::println()>
    4518:	210c      	movs	r1, #12
    451a:	4860      	ldr	r0, [pc, #384]	; (469c <menu2()+0x37c>)
    451c:	f00a fe96 	bl	f24c <usb_serial_write>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    4520:	495f      	ldr	r1, [pc, #380]	; (46a0 <menu2()+0x380>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4522:	2300      	movs	r3, #0
    4524:	220a      	movs	r2, #10
    4526:	6809      	ldr	r1, [r1, #0]
    4528:	4847      	ldr	r0, [pc, #284]	; (4648 <menu2()+0x328>)
    452a:	f008 fb31 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    452e:	4846      	ldr	r0, [pc, #280]	; (4648 <menu2()+0x328>)
    4530:	f008 fb04 	bl	cb3c <Print::println()>
    4534:	210c      	movs	r1, #12
    4536:	485b      	ldr	r0, [pc, #364]	; (46a4 <menu2()+0x384>)
    4538:	f00a fe88 	bl	f24c <usb_serial_write>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    453c:	495a      	ldr	r1, [pc, #360]	; (46a8 <menu2()+0x388>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    453e:	2300      	movs	r3, #0
    4540:	220a      	movs	r2, #10
    4542:	6809      	ldr	r1, [r1, #0]
    4544:	4840      	ldr	r0, [pc, #256]	; (4648 <menu2()+0x328>)
    4546:	f008 fb23 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    454a:	483f      	ldr	r0, [pc, #252]	; (4648 <menu2()+0x328>)
    454c:	f008 faf6 	bl	cb3c <Print::println()>
    4550:	e73f      	b.n	43d2 <menu2()+0xb2>
    { uint16_t *params=loadParameters();
    4552:	f7ff fe53 	bl	41fc <loadParameters()>
    4556:	4604      	mov	r4, r0
    4558:	210d      	movs	r1, #13
    455a:	4854      	ldr	r0, [pc, #336]	; (46ac <menu2()+0x38c>)
    455c:	f00a fe76 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4560:	8821      	ldrh	r1, [r4, #0]
    4562:	4839      	ldr	r0, [pc, #228]	; (4648 <menu2()+0x328>)
    4564:	f008 fade 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4568:	4837      	ldr	r0, [pc, #220]	; (4648 <menu2()+0x328>)
    456a:	f008 fae7 	bl	cb3c <Print::println()>
    456e:	e730      	b.n	43d2 <menu2()+0xb2>
    4570:	210b      	movs	r1, #11
    4572:	484f      	ldr	r0, [pc, #316]	; (46b0 <menu2()+0x390>)
    4574:	f00a fe6a 	bl	f24c <usb_serial_write>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    4578:	4945      	ldr	r1, [pc, #276]	; (4690 <menu2()+0x370>)
    457a:	e7e0      	b.n	453e <menu2()+0x21e>
    457c:	210b      	movs	r1, #11
    457e:	484d      	ldr	r0, [pc, #308]	; (46b4 <menu2()+0x394>)
    4580:	f00a fe64 	bl	f24c <usb_serial_write>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    4584:	4944      	ldr	r1, [pc, #272]	; (4698 <menu2()+0x378>)
    4586:	e7da      	b.n	453e <menu2()+0x21e>
    4588:	210b      	movs	r1, #11
    458a:	484b      	ldr	r0, [pc, #300]	; (46b8 <menu2()+0x398>)
    458c:	f00a fe5e 	bl	f24c <usb_serial_write>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    4590:	4943      	ldr	r1, [pc, #268]	; (46a0 <menu2()+0x380>)
    4592:	e7d4      	b.n	453e <menu2()+0x21e>
    4594:	210b      	movs	r1, #11
    4596:	4849      	ldr	r0, [pc, #292]	; (46bc <menu2()+0x39c>)
    4598:	e7ce      	b.n	4538 <menu2()+0x218>
    459a:	210c      	movs	r1, #12
    459c:	482d      	ldr	r0, [pc, #180]	; (4654 <menu2()+0x334>)
    459e:	f00a fe55 	bl	f24c <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    45a2:	492d      	ldr	r1, [pc, #180]	; (4658 <menu2()+0x338>)
    45a4:	e7cb      	b.n	453e <menu2()+0x21e>
    45a6:	210c      	movs	r1, #12
    45a8:	4834      	ldr	r0, [pc, #208]	; (467c <menu2()+0x35c>)
    45aa:	f00a fe4f 	bl	f24c <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    45ae:	4b34      	ldr	r3, [pc, #208]	; (4680 <menu2()+0x360>)
      Serial.print("again (g) = "); Serial.println(again);
    45b0:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    45b2:	4825      	ldr	r0, [pc, #148]	; (4648 <menu2()+0x328>)
    45b4:	b209      	sxth	r1, r1
    45b6:	f008 fab5 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45ba:	4823      	ldr	r0, [pc, #140]	; (4648 <menu2()+0x328>)
    45bc:	f008 fabe 	bl	cb3c <Print::println()>
    45c0:	e707      	b.n	43d2 <menu2()+0xb2>
      rtc_get_datetime(&t);
    45c2:	a806      	add	r0, sp, #24
    45c4:	f000 fa9a 	bl	4afc <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    45c8:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    45cc:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    45d0:	9000      	str	r0, [sp, #0]
    45d2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    45d6:	493a      	ldr	r1, [pc, #232]	; (46c0 <menu2()+0x3a0>)
    45d8:	481b      	ldr	r0, [pc, #108]	; (4648 <menu2()+0x328>)
    45da:	f008 facb 	bl	cb74 <Print::printf(char const*, ...)>
    45de:	e6f8      	b.n	43d2 <menu2()+0xb2>
    45e0:	210c      	movs	r1, #12
    45e2:	4822      	ldr	r0, [pc, #136]	; (466c <menu2()+0x34c>)
    45e4:	f00a fe32 	bl	f24c <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    45e8:	4b21      	ldr	r3, [pc, #132]	; (4670 <menu2()+0x350>)
	size_t println(long n)				{ return print(n) + println(); }
    45ea:	4817      	ldr	r0, [pc, #92]	; (4648 <menu2()+0x328>)
    45ec:	6819      	ldr	r1, [r3, #0]
    45ee:	f008 fa99 	bl	cb24 <Print::print(long)>
    45f2:	4815      	ldr	r0, [pc, #84]	; (4648 <menu2()+0x328>)
    45f4:	f008 faa2 	bl	cb3c <Print::println()>
    45f8:	e6eb      	b.n	43d2 <menu2()+0xb2>
    45fa:	210c      	movs	r1, #12
    45fc:	4821      	ldr	r0, [pc, #132]	; (4684 <menu2()+0x364>)
    45fe:	f00a fe25 	bl	f24c <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    4602:	4b21      	ldr	r3, [pc, #132]	; (4688 <menu2()+0x368>)
    4604:	e7d4      	b.n	45b0 <menu2()+0x290>
    4606:	210c      	movs	r1, #12
    4608:	482e      	ldr	r0, [pc, #184]	; (46c4 <menu2()+0x3a4>)
    460a:	f00a fe1f 	bl	f24c <usb_serial_write>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    460e:	4914      	ldr	r1, [pc, #80]	; (4660 <menu2()+0x340>)
    4610:	e795      	b.n	453e <menu2()+0x21e>
    4612:	210c      	movs	r1, #12
    4614:	4813      	ldr	r0, [pc, #76]	; (4664 <menu2()+0x344>)
    4616:	f00a fe19 	bl	f24c <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    461a:	4913      	ldr	r1, [pc, #76]	; (4668 <menu2()+0x348>)
    461c:	e78f      	b.n	453e <menu2()+0x21e>
    461e:	210c      	movs	r1, #12
    4620:	4814      	ldr	r0, [pc, #80]	; (4674 <menu2()+0x354>)
    4622:	f00a fe13 	bl	f24c <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    4626:	4b14      	ldr	r3, [pc, #80]	; (4678 <menu2()+0x358>)
    4628:	e7c2      	b.n	45b0 <menu2()+0x290>
      rtc_get_datetime(&t);
    462a:	a806      	add	r0, sp, #24
    462c:	f000 fa66 	bl	4afc <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    4630:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    4634:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    4638:	9000      	str	r0, [sp, #0]
    463a:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    463e:	4922      	ldr	r1, [pc, #136]	; (46c8 <menu2()+0x3a8>)
    4640:	4801      	ldr	r0, [pc, #4]	; (4648 <menu2()+0x328>)
    4642:	f008 fa97 	bl	cb74 <Print::printf(char const*, ...)>
    4646:	e6c4      	b.n	43d2 <menu2()+0xb2>
    4648:	20008abc 	.word	0x20008abc
    464c:	200009b4 	.word	0x200009b4
    4650:	20000614 	.word	0x20000614
    4654:	2000063c 	.word	0x2000063c
    4658:	2000945c 	.word	0x2000945c
    465c:	2000064c 	.word	0x2000064c
    4660:	20009460 	.word	0x20009460
    4664:	2000065c 	.word	0x2000065c
    4668:	20009464 	.word	0x20009464
    466c:	2000066c 	.word	0x2000066c
    4670:	2000943c 	.word	0x2000943c
    4674:	2000067c 	.word	0x2000067c
    4678:	20009484 	.word	0x20009484
    467c:	2000068c 	.word	0x2000068c
    4680:	20029392 	.word	0x20029392
    4684:	2000069c 	.word	0x2000069c
    4688:	20009482 	.word	0x20009482
    468c:	200006ac 	.word	0x200006ac
    4690:	20029364 	.word	0x20029364
    4694:	200006bc 	.word	0x200006bc
    4698:	20009450 	.word	0x20009450
    469c:	200006cc 	.word	0x200006cc
    46a0:	20009454 	.word	0x20009454
    46a4:	200006dc 	.word	0x200006dc
    46a8:	20009458 	.word	0x20009458
    46ac:	20000764 	.word	0x20000764
    46b0:	20000734 	.word	0x20000734
    46b4:	20000740 	.word	0x20000740
    46b8:	2000074c 	.word	0x2000074c
    46bc:	20000758 	.word	0x20000758
    46c0:	200006ec 	.word	0x200006ec
    46c4:	20000724 	.word	0x20000724
    46c8:	20000708 	.word	0x20000708

000046cc <menu(short)>:
{
    46cc:	b538      	push	{r3, r4, r5, lr}
    46ce:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    46d0:	f00a fd52 	bl	f178 <usb_serial_available>
  if(Serial.available())
    46d4:	b908      	cbnz	r0, 46da <menu(short)+0xe>
}
    46d6:	4620      	mov	r0, r4
    46d8:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    46da:	f00a fd91 	bl	f200 <usb_serial_getchar>
    char ch=Serial.read();
    46de:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    46e0:	2873      	cmp	r0, #115	; 0x73
    46e2:	d01d      	beq.n	4720 <menu(short)+0x54>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    46e4:	2865      	cmp	r0, #101	; 0x65
    46e6:	d03d      	beq.n	4764 <menu(short)+0x98>
    46e8:	d806      	bhi.n	46f8 <menu(short)+0x2c>
    46ea:	283a      	cmp	r0, #58	; 0x3a
    46ec:	d035      	beq.n	475a <menu(short)+0x8e>
    46ee:	283f      	cmp	r0, #63	; 0x3f
    46f0:	d111      	bne.n	4716 <menu(short)+0x4a>
    else if(ch=='?') menu2(); 
    46f2:	f7ff fe15 	bl	4320 <menu2()>
    46f6:	e008      	b.n	470a <menu(short)+0x3e>
    46f8:	286d      	cmp	r0, #109	; 0x6d
    46fa:	d017      	beq.n	472c <menu(short)+0x60>
    46fc:	2872      	cmp	r0, #114	; 0x72
    46fe:	d124      	bne.n	474a <menu(short)+0x7e>
    else if(ch=='r') {resetUSB();}
    4700:	f7fb fd50 	bl	1a4 <resetUSB()>
    4704:	e001      	b.n	470a <menu(short)+0x3e>
    4706:	f00a fd7b 	bl	f200 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    470a:	f00a fd35 	bl	f178 <usb_serial_available>
    while(Serial.available()) Serial.read(); // clean-up
    470e:	2800      	cmp	r0, #0
    4710:	d1f9      	bne.n	4706 <menu(short)+0x3a>
}
    4712:	4620      	mov	r0, r4
    4714:	bd38      	pop	{r3, r4, r5, pc}
    4716:	2821      	cmp	r0, #33	; 0x21
    4718:	d117      	bne.n	474a <menu(short)+0x7e>
    else if(ch=='!') menu3(); 
    471a:	f7ff fbbd 	bl	3e98 <menu3()>
    471e:	e7f4      	b.n	470a <menu(short)+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4720:	2107      	movs	r1, #7
    4722:	4813      	ldr	r0, [pc, #76]	; (4770 <menu(short)+0xa4>)
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    4724:	2400      	movs	r4, #0
    4726:	f00a fd91 	bl	f24c <usb_serial_write>
    472a:	e7ee      	b.n	470a <menu(short)+0x3e>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    472c:	4d11      	ldr	r5, [pc, #68]	; (4774 <menu(short)+0xa8>)
    472e:	210a      	movs	r1, #10
    4730:	4811      	ldr	r0, [pc, #68]	; (4778 <menu(short)+0xac>)
    4732:	882b      	ldrh	r3, [r5, #0]
    4734:	f1c3 0301 	rsb	r3, r3, #1
    4738:	802b      	strh	r3, [r5, #0]
    473a:	f00a fd87 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    473e:	f9b5 1000 	ldrsh.w	r1, [r5]
    4742:	480e      	ldr	r0, [pc, #56]	; (477c <menu(short)+0xb0>)
    4744:	f008 f9ee 	bl	cb24 <Print::print(long)>
    4748:	e7df      	b.n	470a <menu(short)+0x3e>
    474a:	2140      	movs	r1, #64	; 0x40
    474c:	480c      	ldr	r0, [pc, #48]	; (4780 <menu(short)+0xb4>)
    474e:	f00a fd7d 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4752:	480a      	ldr	r0, [pc, #40]	; (477c <menu(short)+0xb0>)
    4754:	f008 f9f2 	bl	cb3c <Print::println()>
    4758:	e7d7      	b.n	470a <menu(short)+0x3e>
    else if(ch==':') status=menu1(status); 
    475a:	4620      	mov	r0, r4
    475c:	f7ff fd1c 	bl	4198 <menu1(short)>
    4760:	4604      	mov	r4, r0
    4762:	e7d2      	b.n	470a <menu(short)+0x3e>
    4764:	2106      	movs	r1, #6
    4766:	4807      	ldr	r0, [pc, #28]	; (4784 <menu(short)+0xb8>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4768:	2405      	movs	r4, #5
    476a:	f00a fd6f 	bl	f24c <usb_serial_write>
    476e:	e7cc      	b.n	470a <menu(short)+0x3e>
    4770:	200005a4 	.word	0x200005a4
    4774:	20029390 	.word	0x20029390
    4778:	200005b4 	.word	0x200005b4
    477c:	20008abc 	.word	0x20008abc
    4780:	200005c0 	.word	0x200005c0
    4784:	200005ac 	.word	0x200005ac

00004788 <getStore()>:

uint16_t *getStore(void) {return store;}
    4788:	4800      	ldr	r0, [pc, #0]	; (478c <getStore()+0x4>)
    478a:	4770      	bx	lr
    478c:	20027e14 	.word	0x20027e14

00004790 <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    4790:	4a04      	ldr	r2, [pc, #16]	; (47a4 <getDataCount()+0x14>)
    4792:	4b05      	ldr	r3, [pc, #20]	; (47a8 <getDataCount()+0x18>)
    4794:	6810      	ldr	r0, [r2, #0]
    4796:	681b      	ldr	r3, [r3, #0]
    4798:	1ac0      	subs	r0, r0, r3
    479a:	bf48      	it	mi
    479c:	30c0      	addmi	r0, #192	; 0xc0
    479e:	b280      	uxth	r0, r0
    47a0:	4770      	bx	lr
    47a2:	bf00      	nop
    47a4:	20027de8 	.word	0x20027de8
    47a8:	20027de4 	.word	0x20027de4

000047ac <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    47ac:	4b01      	ldr	r3, [pc, #4]	; (47b4 <queue_isBusy()+0x8>)
    47ae:	6818      	ldr	r0, [r3, #0]
    47b0:	4770      	bx	lr
    47b2:	bf00      	nop
    47b4:	2000dbd4 	.word	0x2000dbd4

000047b8 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    47b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ( (tail+1)%MAXBUF == head ) return 0;
    47ba:	4c17      	ldr	r4, [pc, #92]	; (4818 <pushData(unsigned long*)+0x60>)
  {
    47bc:	4601      	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) return 0;
    47be:	4a17      	ldr	r2, [pc, #92]	; (481c <pushData(unsigned long*)+0x64>)
    47c0:	6823      	ldr	r3, [r4, #0]
    47c2:	4d17      	ldr	r5, [pc, #92]	; (4820 <pushData(unsigned long*)+0x68>)
    47c4:	3301      	adds	r3, #1
    47c6:	6816      	ldr	r6, [r2, #0]
    47c8:	fb85 2003 	smull	r2, r0, r5, r3
    47cc:	17da      	asrs	r2, r3, #31
    47ce:	ebc2 1260 	rsb	r2, r2, r0, asr #5
    47d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    47d6:	eba3 1382 	sub.w	r3, r3, r2, lsl #6
    47da:	42b3      	cmp	r3, r6
    47dc:	d01a      	beq.n	4814 <pushData(unsigned long*)+0x5c>
    //while(busy); 
    queue_busy=1;
    47de:	2601      	movs	r6, #1
    47e0:	4f10      	ldr	r7, [pc, #64]	; (4824 <pushData(unsigned long*)+0x6c>)
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    47e2:	4b11      	ldr	r3, [pc, #68]	; (4828 <pushData(unsigned long*)+0x70>)
    47e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    queue_busy=1;
    47e8:	603e      	str	r6, [r7, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    47ea:	6820      	ldr	r0, [r4, #0]
    47ec:	eb03 2040 	add.w	r0, r3, r0, lsl #9
    47f0:	f008 ffac 	bl	d74c <memcpy>
    //for(int ii=0;ii<NBUF_ACQ;ii++)data_buffer[tail][ii]=data[ii];
    tail = (tail+1)%MAXBUF;
    47f4:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    47f6:	4630      	mov	r0, r6
    tail = (tail+1)%MAXBUF;
    47f8:	4432      	add	r2, r6
    47fa:	fb85 3502 	smull	r3, r5, r5, r2
    47fe:	17d3      	asrs	r3, r2, #31
    4800:	ebc3 1365 	rsb	r3, r3, r5, asr #5
    4804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4808:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    queue_busy=0;
    480c:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    480e:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    4810:	603a      	str	r2, [r7, #0]
  }
    4812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) return 0;
    4814:	2000      	movs	r0, #0
  }
    4816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4818:	20027de8 	.word	0x20027de8
    481c:	20027de4 	.word	0x20027de4
    4820:	2aaaaaab 	.word	0x2aaaaaab
    4824:	2000dbd4 	.word	0x2000dbd4
    4828:	2000dbd8 	.word	0x2000dbd8

0000482c <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    482c:	4b12      	ldr	r3, [pc, #72]	; (4878 <pullData(unsigned long*)+0x4c>)
  {
    482e:	b570      	push	{r4, r5, r6, lr}
    if ( head==tail ) return 0;
    4830:	4c12      	ldr	r4, [pc, #72]	; (487c <pullData(unsigned long*)+0x50>)
    4832:	6822      	ldr	r2, [r4, #0]
    4834:	681b      	ldr	r3, [r3, #0]
    4836:	429a      	cmp	r2, r3
    4838:	d01b      	beq.n	4872 <pullData(unsigned long*)+0x46>
    //while(busy); 
    queue_busy=1;
    483a:	2501      	movs	r5, #1
    483c:	4e10      	ldr	r6, [pc, #64]	; (4880 <pullData(unsigned long*)+0x54>)
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    483e:	4b11      	ldr	r3, [pc, #68]	; (4884 <pullData(unsigned long*)+0x58>)
    4840:	f44f 7200 	mov.w	r2, #512	; 0x200
    queue_busy=1;
    4844:	6035      	str	r5, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    4846:	6821      	ldr	r1, [r4, #0]
    4848:	eb03 2141 	add.w	r1, r3, r1, lsl #9
    484c:	f008 ff7e 	bl	d74c <memcpy>
    //for(int ii=0;ii<NBUF_ACQ;ii++)data[ii]=data_buffer[head][ii];
    head = (head+1)%MAXBUF;
    4850:	6822      	ldr	r2, [r4, #0]
    4852:	490d      	ldr	r1, [pc, #52]	; (4888 <pullData(unsigned long*)+0x5c>)
    queue_busy=0;
    return 1;
    4854:	4628      	mov	r0, r5
    head = (head+1)%MAXBUF;
    4856:	442a      	add	r2, r5
    4858:	fb81 3102 	smull	r3, r1, r1, r2
    485c:	17d3      	asrs	r3, r2, #31
    485e:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    4862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4866:	eba2 1383 	sub.w	r3, r2, r3, lsl #6
    queue_busy=0;
    486a:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    486c:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    486e:	6032      	str	r2, [r6, #0]
  }
    4870:	bd70      	pop	{r4, r5, r6, pc}
    if ( head==tail ) return 0;
    4872:	2000      	movs	r0, #0
  }
    4874:	bd70      	pop	{r4, r5, r6, pc}
    4876:	bf00      	nop
    4878:	20027de8 	.word	0x20027de8
    487c:	20027de4 	.word	0x20027de4
    4880:	2000dbd4 	.word	0x2000dbd4
    4884:	2000dbd8 	.word	0x2000dbd8
    4888:	2aaaaaab 	.word	0x2aaaaaab

0000488c <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    488c:	4a54      	ldr	r2, [pc, #336]	; (49e0 <time2date(unsigned long, datetime_t*)+0x154>)
  {
    488e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4892:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4896:	f240 196d 	movw	r9, #365	; 0x16d
    489a:	4e52      	ldr	r6, [pc, #328]	; (49e4 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    489c:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    489e:	4f52      	ldr	r7, [pc, #328]	; (49e8 <time2date(unsigned long, datetime_t*)+0x15c>)
    48a0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 49fc <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    48a4:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    48a8:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    48ac:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    48ae:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    48b2:	4c4e      	ldr	r4, [pc, #312]	; (49ec <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    48b4:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    48b8:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    48bc:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    48c0:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    48c2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    48c6:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    48c8:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    48cc:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    48d0:	4b47      	ldr	r3, [pc, #284]	; (49f0 <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    48d2:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    48d6:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    48da:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    48dc:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    48de:	1ae2      	subs	r2, r4, r3
    48e0:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    48e4:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    48e6:	089b      	lsrs	r3, r3, #2
    48e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    48ec:	1ae4      	subs	r4, r4, r3
    48ee:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    48f0:	b2c3      	uxtb	r3, r0
    48f2:	f240 1c6d 	movw	ip, #365	; 0x16d
    48f6:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    48fa:	f013 0403 	ands.w	r4, r3, #3
    48fe:	fb06 f503 	mul.w	r5, r6, r3
    4902:	d108      	bne.n	4916 <time2date(unsigned long, datetime_t*)+0x8a>
    4904:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    4908:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    490c:	d303      	bcc.n	4916 <time2date(unsigned long, datetime_t*)+0x8a>
    490e:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    4912:	bf38      	it	cc
    4914:	46cc      	movcc	ip, r9
    4916:	4462      	add	r2, ip
    4918:	3001      	adds	r0, #1
    491a:	4596      	cmp	lr, r2
    491c:	d2e8      	bcs.n	48f0 <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    491e:	4d35      	ldr	r5, [pc, #212]	; (49f4 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    4920:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    4922:	fba5 0503 	umull	r0, r5, r5, r3
    4926:	b3a4      	cbz	r4, 4992 <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4928:	096e      	lsrs	r6, r5, #5
    492a:	2764      	movs	r7, #100	; 0x64
    492c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4930:	09ed      	lsrs	r5, r5, #7
    4932:	fb07 3616 	mls	r6, r7, r6, r3
    4936:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    493a:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    493e:	ebae 0e02 	sub.w	lr, lr, r2
    4942:	2300      	movs	r3, #0
    4944:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    4946:	4f2c      	ldr	r7, [pc, #176]	; (49f8 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    4948:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    494a:	e00a      	b.n	4962 <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    494c:	f813 c007 	ldrb.w	ip, [r3, r7]
    4950:	4584      	cmp	ip, r0
    4952:	d837      	bhi.n	49c4 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    4954:	2a0c      	cmp	r2, #12
        time -= monthLength;
    4956:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    495a:	d012      	beq.n	4982 <time2date(unsigned long, datetime_t*)+0xf6>
    495c:	3201      	adds	r2, #1
    495e:	3301      	adds	r3, #1
    4960:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    4962:	2b01      	cmp	r3, #1
    4964:	fa5f fe83 	uxtb.w	lr, r3
    4968:	d1f0      	bne.n	494c <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    496a:	b91c      	cbnz	r4, 4974 <time2date(unsigned long, datetime_t*)+0xe8>
    496c:	b1f6      	cbz	r6, 49ac <time2date(unsigned long, datetime_t*)+0x120>
    496e:	f04f 0c1d 	mov.w	ip, #29
    4972:	e001      	b.n	4978 <time2date(unsigned long, datetime_t*)+0xec>
    4974:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    4978:	4560      	cmp	r0, ip
    497a:	d32d      	bcc.n	49d8 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    497c:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    4980:	e7ec      	b.n	495c <time2date(unsigned long, datetime_t*)+0xd0>
    4982:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    4986:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    4988:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    498c:	70c8      	strb	r0, [r1, #3]
  }
    498e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    4992:	2064      	movs	r0, #100	; 0x64
    4994:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4996:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    4998:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    499c:	f44f 70c8 	mov.w	r0, #400	; 0x190
    49a0:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    49a4:	b14e      	cbz	r6, 49ba <time2date(unsigned long, datetime_t*)+0x12e>
    49a6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    49aa:	e7c8      	b.n	493e <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    49ac:	2d00      	cmp	r5, #0
    49ae:	bf14      	ite	ne
    49b0:	f04f 0c1c 	movne.w	ip, #28
    49b4:	f04f 0c1d 	moveq.w	ip, #29
    49b8:	e7de      	b.n	4978 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    49ba:	2d00      	cmp	r5, #0
    49bc:	d1bd      	bne.n	493a <time2date(unsigned long, datetime_t*)+0xae>
    49be:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    49c2:	e7bc      	b.n	493e <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    49c4:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    49c8:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    49ca:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    49ce:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    49d0:	f881 e002 	strb.w	lr, [r1, #2]
  }
    49d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    49d8:	f04f 0e02 	mov.w	lr, #2
    49dc:	e7d3      	b.n	4986 <time2date(unsigned long, datetime_t*)+0xfa>
    49de:	bf00      	nop
    49e0:	88888889 	.word	0x88888889
    49e4:	c28f5c29 	.word	0xc28f5c29
    49e8:	028f5c28 	.word	0x028f5c28
    49ec:	aaaaaaab 	.word	0xaaaaaaab
    49f0:	24924925 	.word	0x24924925
    49f4:	51eb851f 	.word	0x51eb851f
    49f8:	20000ac8 	.word	0x20000ac8
    49fc:	00a3d70a 	.word	0x00a3d70a

00004a00 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    4a00:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    4a02:	4a35      	ldr	r2, [pc, #212]	; (4ad8 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    4a04:	314e      	adds	r1, #78	; 0x4e
    4a06:	b2c9      	uxtb	r1, r1
  {
    4a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    4a0c:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    4a10:	b1e1      	cbz	r1, 4a4c <date2time(datetime_t*)+0x4c>
    4a12:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    4a16:	f240 73b3 	movw	r3, #1971	; 0x7b3
    4a1a:	4d30      	ldr	r5, [pc, #192]	; (4adc <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    4a1c:	4e30      	ldr	r6, [pc, #192]	; (4ae0 <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4a1e:	4f31      	ldr	r7, [pc, #196]	; (4ae4 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    4a20:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 4af0 <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    4a24:	4563      	cmp	r3, ip
    4a26:	fb05 f403 	mul.w	r4, r5, r3
    4a2a:	d00f      	beq.n	4a4c <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    4a2c:	f013 0f03 	tst.w	r3, #3
    4a30:	f103 0301 	add.w	r3, r3, #1
    4a34:	d1f6      	bne.n	4a24 <date2time(datetime_t*)+0x24>
    4a36:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    4a3a:	d302      	bcc.n	4a42 <date2time(datetime_t*)+0x42>
    4a3c:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    4a40:	d3f0      	bcc.n	4a24 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    4a42:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4a44:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    4a46:	fb05 f403 	mul.w	r4, r5, r3
    4a4a:	d1ef      	bne.n	4a2c <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    4a4c:	f990 e002 	ldrsb.w	lr, [r0, #2]
    4a50:	f1be 0f01 	cmp.w	lr, #1
    4a54:	dd29      	ble.n	4aaa <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4a56:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    4a5a:	4e23      	ldr	r6, [pc, #140]	; (4ae8 <date2time(datetime_t*)+0xe8>)
    4a5c:	2564      	movs	r5, #100	; 0x64
    4a5e:	f44f 74c8 	mov.w	r4, #400	; 0x190
    4a62:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    4a66:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4af4 <date2time(datetime_t*)+0xf4>
    4a6a:	4920      	ldr	r1, [pc, #128]	; (4aec <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4a6c:	0977      	lsrs	r7, r6, #5
    4a6e:	09f6      	lsrs	r6, r6, #7
    4a70:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4a74:	4d1b      	ldr	r5, [pc, #108]	; (4ae4 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4a76:	fb04 3616 	mls	r6, r4, r6, r3
    4a7a:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    4a7e:	2301      	movs	r3, #1
    4a80:	e007      	b.n	4a92 <date2time(datetime_t*)+0x92>
    4a82:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4a84:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    4a88:	3101      	adds	r1, #1
    4a8a:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4a8c:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    4a90:	d00b      	beq.n	4aaa <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4a92:	2b02      	cmp	r3, #2
    4a94:	d1f5      	bne.n	4a82 <date2time(datetime_t*)+0x82>
    4a96:	2c00      	cmp	r4, #0
    4a98:	d1f3      	bne.n	4a82 <date2time(datetime_t*)+0x82>
    4a9a:	b90f      	cbnz	r7, 4aa0 <date2time(datetime_t*)+0xa0>
    4a9c:	2e00      	cmp	r6, #0
    4a9e:	d1f0      	bne.n	4a82 <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    4aa0:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    4aa2:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    4aa4:	3101      	adds	r1, #1
    4aa6:	4573      	cmp	r3, lr
    4aa8:	d1f3      	bne.n	4a92 <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    4aaa:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    4aae:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    4ab2:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    4ab6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    4aba:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    4abe:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    4ac0:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4ac4:	f990 1003 	ldrsb.w	r1, [r0, #3]
    4ac8:	4c06      	ldr	r4, [pc, #24]	; (4ae4 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    4aca:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4acc:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    4ace:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    4ad2:	4410      	add	r0, r2
    4ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ad8:	01e13380 	.word	0x01e13380
    4adc:	c28f5c29 	.word	0xc28f5c29
    4ae0:	028f5c28 	.word	0x028f5c28
    4ae4:	00015180 	.word	0x00015180
    4ae8:	51eb851f 	.word	0x51eb851f
    4aec:	20000ac8 	.word	0x20000ac8
    4af0:	00a3d70a 	.word	0x00a3d70a
    4af4:	00263b80 	.word	0x00263b80

00004af8 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    4af8:	2001      	movs	r0, #1
    4afa:	4770      	bx	lr

00004afc <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    4afc:	b500      	push	{lr}
    4afe:	b083      	sub	sp, #12
    4b00:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    4b02:	f009 f897 	bl	dc34 <rtc_get>
    4b06:	9901      	ldr	r1, [sp, #4]
    4b08:	f7ff fec0 	bl	488c <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    4b0c:	2001      	movs	r0, #1
    4b0e:	b003      	add	sp, #12
    4b10:	f85d fb04 	ldr.w	pc, [sp], #4

00004b14 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    4b14:	b570      	push	{r4, r5, r6, lr}
    4b16:	b082      	sub	sp, #8
    4b18:	4614      	mov	r4, r2
    4b1a:	460d      	mov	r5, r1
    4b1c:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4b1e:	f009 f889 	bl	dc34 <rtc_get>
    4b22:	4669      	mov	r1, sp
    4b24:	f7ff feb2 	bl	488c <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    4b28:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    4b2c:	4608      	mov	r0, r1
    t.month=month;
    4b2e:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    4b32:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    4b36:	f7ff ff63 	bl	4a00 <date2time(datetime_t*)>
    4b3a:	f009 f88d 	bl	dc58 <rtc_set>
    rtc_set_datetime(&t);
  }
    4b3e:	b002      	add	sp, #8
    4b40:	bd70      	pop	{r4, r5, r6, pc}
    4b42:	bf00      	nop

00004b44 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    4b44:	b570      	push	{r4, r5, r6, lr}
    4b46:	b082      	sub	sp, #8
    4b48:	4614      	mov	r4, r2
    4b4a:	460d      	mov	r5, r1
    4b4c:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4b4e:	f009 f871 	bl	dc34 <rtc_get>
    4b52:	4669      	mov	r1, sp
    4b54:	f7ff fe9a 	bl	488c <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    4b58:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    4b5c:	4608      	mov	r0, r1
    t.min=minutes;
    4b5e:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    4b62:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    4b66:	f7ff ff4b 	bl	4a00 <date2time(datetime_t*)>
    4b6a:	f009 f875 	bl	dc58 <rtc_set>
    rtc_set_datetime(&t);
  }
    4b6e:	b002      	add	sp, #8
    4b70:	bd70      	pop	{r4, r5, r6, pc}
    4b72:	bf00      	nop

00004b74 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
    4b74:	6843      	ldr	r3, [r0, #4]
    4b76:	2b13      	cmp	r3, #19
    4b78:	dc07      	bgt.n	4b8a <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x16>
          sd_name[fsCount] = name;
    4b7a:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
    4b7e:	3301      	adds	r3, #1
          sd_name[fsCount] = name;
    4b80:	f8cc 2008 	str.w	r2, [ip, #8]
          sdx[fsCount++] = &fs;
    4b84:	6043      	str	r3, [r0, #4]
    4b86:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
    4b8a:	4770      	bx	lr

00004b8c <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    4b8c:	2000      	movs	r0, #0
    4b8e:	4770      	bx	lr

00004b90 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    4b90:	2001      	movs	r0, #1
    4b92:	4770      	bx	lr

00004b94 <MTPStorage_SD::CloseIndex()>:
  bool isOpen() const {return m_fFile || m_xFile;}
    4b94:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  {
    4b98:	b510      	push	{r4, lr}
    4b9a:	4604      	mov	r4, r0
    4b9c:	b14b      	cbz	r3, 4bb2 <MTPStorage_SD::CloseIndex()+0x1e>
    if(index_.isOpen()) {index_.close();}
    4b9e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    4ba2:	f005 f863 	bl	9c6c <FsBaseFile::close()>
    index_generated = false;
    4ba6:	2300      	movs	r3, #0
    4ba8:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    4bac:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  }
    4bb0:	bd10      	pop	{r4, pc}
    4bb2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d1f1      	bne.n	4b9e <MTPStorage_SD::CloseIndex()+0xa>
    4bba:	e7f4      	b.n	4ba6 <MTPStorage_SD::CloseIndex()+0x12>

00004bbc <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    4bbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4bc0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4bc2:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    4bc6:	b14b      	cbz	r3, 4bdc <MTPStorage_SD::totalSize(unsigned long)+0x20>
    4bc8:	799a      	ldrb	r2, [r3, #6]
    4bca:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    4bce:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4bd0:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    4bd2:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4bd4:	b280      	uxth	r0, r0
    4bd6:	fba0 0101 	umull	r0, r1, r0, r1
    4bda:	4770      	bx	lr
    4bdc:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    4be0:	b130      	cbz	r0, 4bf0 <MTPStorage_SD::totalSize(unsigned long)+0x34>
    4be2:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    4be6:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    4bea:	fba1 0100 	umull	r0, r1, r1, r0
    4bee:	4770      	bx	lr
    4bf0:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    4bf2:	4770      	bx	lr

00004bf4 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
    4bf4:	b538      	push	{r3, r4, r5, lr}
    4bf6:	210a      	movs	r1, #10
    4bf8:	4604      	mov	r4, r0
    4bfa:	480a      	ldr	r0, [pc, #40]	; (4c24 <dbgPrint(unsigned short)+0x30>)
    4bfc:	f00a fb26 	bl	f24c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4c00:	4d09      	ldr	r5, [pc, #36]	; (4c28 <dbgPrint(unsigned short)+0x34>)
    4c02:	210b      	movs	r1, #11
    4c04:	4809      	ldr	r0, [pc, #36]	; (4c2c <dbgPrint(unsigned short)+0x38>)
    4c06:	f00a fb21 	bl	f24c <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    4c0a:	202e      	movs	r0, #46	; 0x2e
    4c0c:	f00a fb08 	bl	f220 <usb_serial_putchar>
    4c10:	4621      	mov	r1, r4
    4c12:	4628      	mov	r0, r5
    4c14:	f007 ff86 	bl	cb24 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4c18:	4628      	mov	r0, r5
  }
    4c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4c1e:	f007 bf8d 	b.w	cb3c <Print::println()>
    4c22:	bf00      	nop
    4c24:	200009dc 	.word	0x200009dc
    4c28:	20008abc 	.word	0x20008abc
    4c2c:	200009e8 	.word	0x200009e8

00004c30 <MTPStorage_SD::write(char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    4c30:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    4c34:	b113      	cbz	r3, 4c3c <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    4c36:	4618      	mov	r0, r3
    4c38:	f003 be1c 	b.w	8874 <FatFile::write(void const*, unsigned int)>
    4c3c:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
           m_xFile ? m_xFile->write(buf, count) : 0;
    4c40:	b108      	cbz	r0, 4c46 <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    4c42:	f002 bb07 	b.w	7254 <ExFatFile::write(void const*, unsigned int)>
  }
    4c46:	4770      	bx	lr

00004c48 <MTPStorage_SD::OpenIndex() [clone .part.0]>:
  void MTPStorage_SD::OpenIndex() 
    4c48:	b510      	push	{r4, lr}
    4c4a:	4604      	mov	r4, r0
    4c4c:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    4c4e:	f240 2302 	movw	r3, #514	; 0x202
    4c52:	4a15      	ldr	r2, [pc, #84]	; (4ca8 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    4c54:	4668      	mov	r0, sp
    4c56:	6da1      	ldr	r1, [r4, #88]	; 0x58
    4c58:	f005 f922 	bl	9ea0 <FsVolume::open(char const*, int)>
class Stream : public Print
    4c5c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4c60:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    4c64:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
    4c68:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    4c6c:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    4c70:	a904      	add	r1, sp, #16
    4c72:	f004 ffa1 	bl	9bb8 <FsBaseFile::operator=(FsBaseFile const&)>
    4c76:	4b0d      	ldr	r3, [pc, #52]	; (4cac <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    4c78:	a804      	add	r0, sp, #16
    4c7a:	9300      	str	r3, [sp, #0]
    4c7c:	f004 fff6 	bl	9c6c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    4c80:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    4c84:	b10b      	cbz	r3, 4c8a <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
  }
    4c86:	b014      	add	sp, #80	; 0x50
    4c88:	bd10      	pop	{r4, pc}
    4c8a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d1f9      	bne.n	4c86 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4c92:	2117      	movs	r1, #23
    4c94:	4806      	ldr	r0, [pc, #24]	; (4cb0 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    4c96:	f00a fad9 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c9a:	4806      	ldr	r0, [pc, #24]	; (4cb4 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    4c9c:	b014      	add	sp, #80	; 0x50
    4c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ca2:	f007 bf4b 	b.w	cb3c <Print::println()>
    4ca6:	bf00      	nop
    4ca8:	20000ae0 	.word	0x20000ae0
    4cac:	20000b7c 	.word	0x20000b7c
    4cb0:	20000af0 	.word	0x20000af0
    4cb4:	20008abc 	.word	0x20008abc

00004cb8 <MTPStorage_SD::ResetIndex()>:
    4cb8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  void MTPStorage_SD::ResetIndex() {
    4cbc:	b510      	push	{r4, lr}
    4cbe:	4604      	mov	r4, r0
    4cc0:	b30b      	cbz	r3, 4d06 <MTPStorage_SD::ResetIndex()+0x4e>
    CloseIndex();
    4cc2:	6823      	ldr	r3, [r4, #0]
    4cc4:	4a16      	ldr	r2, [pc, #88]	; (4d20 <MTPStorage_SD::ResetIndex()+0x68>)
    4cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4cc8:	4293      	cmp	r3, r2
    4cca:	d125      	bne.n	4d18 <MTPStorage_SD::ResetIndex()+0x60>
    if(index_.isOpen()) {index_.close();}
    4ccc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    4cd0:	f004 ffcc 	bl	9c6c <FsBaseFile::close()>
    index_generated = false;
    4cd4:	2300      	movs	r3, #0
    4cd6:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    4cda:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    all_scanned_ = false;
    4cde:	2100      	movs	r1, #0
    open_file_ = 0xFFFFFFFEUL;
    4ce0:	f06f 0201 	mvn.w	r2, #1
    4ce4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    all_scanned_ = false;
    4ce8:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    4cec:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    4cf0:	b103      	cbz	r3, 4cf4 <MTPStorage_SD::ResetIndex()+0x3c>
  }
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d1fa      	bne.n	4cf2 <MTPStorage_SD::ResetIndex()+0x3a>
    4cfc:	4620      	mov	r0, r4
    4cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d02:	f7ff bfa1 	b.w	4c48 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    4d06:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    4d0a:	2b00      	cmp	r3, #0
    4d0c:	d0f1      	beq.n	4cf2 <MTPStorage_SD::ResetIndex()+0x3a>
    CloseIndex();
    4d0e:	6823      	ldr	r3, [r4, #0]
    4d10:	4a03      	ldr	r2, [pc, #12]	; (4d20 <MTPStorage_SD::ResetIndex()+0x68>)
    4d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4d14:	4293      	cmp	r3, r2
    4d16:	d0d9      	beq.n	4ccc <MTPStorage_SD::ResetIndex()+0x14>
    4d18:	4620      	mov	r0, r4
    4d1a:	4798      	blx	r3
    4d1c:	e7df      	b.n	4cde <MTPStorage_SD::ResetIndex()+0x26>
    4d1e:	bf00      	nop
    4d20:	00004b95 	.word	0x00004b95

00004d24 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    4d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d28:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    4d2c:	6db2      	ldr	r2, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4d2e:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    4d32:	2b00      	cmp	r3, #0
    4d34:	f000 80bc 	beq.w	4eb0 <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    4d38:	69d9      	ldr	r1, [r3, #28]
    4d3a:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4d3c:	2300      	movs	r3, #0
    4d3e:	220a      	movs	r2, #10
    4d40:	486a      	ldr	r0, [pc, #424]	; (4eec <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4d42:	f007 ff25 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4d46:	4869      	ldr	r0, [pc, #420]	; (4eec <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4d48:	f007 fef8 	bl	cb3c <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    4d4c:	6db5      	ldr	r5, [r6, #88]	; 0x58
  uint32_t freeClusterCount() {
    4d4e:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4d52:	b120      	cbz	r0, 4d5e <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    4d54:	6803      	ldr	r3, [r0, #0]
    4d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4d58:	4798      	blx	r3
    4d5a:	2800      	cmp	r0, #0
    4d5c:	d16c      	bne.n	4e38 <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4d5e:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    4d60:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    4d64:	2800      	cmp	r0, #0
    4d66:	f000 808e 	beq.w	4e86 <MTPStorage_SD::usedSize(unsigned long)+0x162>
    4d6a:	f004 fd87 	bl	987c <FatPartition::freeClusterCount()>
    4d6e:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4d70:	2f00      	cmp	r7, #0
    4d72:	f040 8091 	bne.w	4e98 <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4d76:	2300      	movs	r3, #0
    4d78:	220a      	movs	r2, #10
    4d7a:	4621      	mov	r1, r4
    4d7c:	485b      	ldr	r0, [pc, #364]	; (4eec <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4d7e:	f007 ff07 	bl	cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4d82:	485a      	ldr	r0, [pc, #360]	; (4eec <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    4d84:	f007 feda 	bl	cb3c <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    4d88:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    4d8a:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    4d8e:	2b00      	cmp	r3, #0
    4d90:	f000 8096 	beq.w	4ec0 <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    4d94:	69dc      	ldr	r4, [r3, #28]
    4d96:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    4d9a:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4d9c:	2800      	cmp	r0, #0
    4d9e:	d05f      	beq.n	4e60 <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    4da0:	6803      	ldr	r3, [r0, #0]
    4da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4da4:	4798      	blx	r3
    4da6:	bb38      	cbnz	r0, 4df8 <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    4da8:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4dac:	f04f 0800 	mov.w	r8, #0
    4db0:	2800      	cmp	r0, #0
    4db2:	d139      	bne.n	4e28 <MTPStorage_SD::usedSize(unsigned long)+0x104>
    4db4:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4db8:	b11f      	cbz	r7, 4dc2 <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    4dba:	4638      	mov	r0, r7
    4dbc:	f002 fe28 	bl	7a10 <ExFatPartition::freeClusterCount()>
    4dc0:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4dc2:	f1b8 0f00 	cmp.w	r8, #0
    4dc6:	d035      	beq.n	4e34 <MTPStorage_SD::usedSize(unsigned long)+0x110>
    4dc8:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4dcc:	b128      	cbz	r0, 4dda <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    4dce:	6803      	ldr	r3, [r0, #0]
    4dd0:	2100      	movs	r1, #0
    4dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4dd4:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4dd6:	b100      	cbz	r0, 4dda <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    4dd8:	1be4      	subs	r4, r4, r7
    4dda:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->bytesPerCluster() :
    4ddc:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    4de0:	2b00      	cmp	r3, #0
    4de2:	d147      	bne.n	4e74 <MTPStorage_SD::usedSize(unsigned long)+0x150>
    4de4:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    4de8:	2800      	cmp	r0, #0
    4dea:	d07a      	beq.n	4ee2 <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4dec:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    4df0:	fba4 0101 	umull	r0, r1, r4, r1
    4df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4df8:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4dfc:	2800      	cmp	r0, #0
    4dfe:	d0ec      	beq.n	4dda <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    4e00:	6803      	ldr	r3, [r0, #0]
    4e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e04:	4798      	blx	r3
    4e06:	2800      	cmp	r0, #0
    4e08:	d1ce      	bne.n	4da8 <MTPStorage_SD::usedSize(unsigned long)+0x84>
    4e0a:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4e0e:	2800      	cmp	r0, #0
    4e10:	d0e3      	beq.n	4dda <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    4e12:	6803      	ldr	r3, [r0, #0]
    4e14:	2101      	movs	r1, #1
    4e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e18:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4e1a:	4680      	mov	r8, r0
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d0dc      	beq.n	4dda <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    4e20:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    4e24:	2800      	cmp	r0, #0
    4e26:	d0c5      	beq.n	4db4 <MTPStorage_SD::usedSize(unsigned long)+0x90>
    4e28:	f004 fd28 	bl	987c <FatPartition::freeClusterCount()>
    4e2c:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4e2e:	f1b8 0f00 	cmp.w	r8, #0
    4e32:	d1c9      	bne.n	4dc8 <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    4e34:	6db5      	ldr	r5, [r6, #88]	; 0x58
    4e36:	e018      	b.n	4e6a <MTPStorage_SD::usedSize(unsigned long)+0x146>
    4e38:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    4e3c:	b170      	cbz	r0, 4e5c <MTPStorage_SD::usedSize(unsigned long)+0x138>
    4e3e:	6803      	ldr	r3, [r0, #0]
    4e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e42:	4798      	blx	r3
    4e44:	2800      	cmp	r0, #0
    4e46:	d18a      	bne.n	4d5e <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    4e48:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4e4c:	b130      	cbz	r0, 4e5c <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    4e4e:	6803      	ldr	r3, [r0, #0]
    4e50:	2101      	movs	r1, #1
    4e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4e54:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    4e56:	4607      	mov	r7, r0
    4e58:	2800      	cmp	r0, #0
    4e5a:	d181      	bne.n	4d60 <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    4e5c:	2400      	movs	r4, #0
    4e5e:	e78a      	b.n	4d76 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4e60:	4618      	mov	r0, r3
    4e62:	f004 fd0b 	bl	987c <FatPartition::freeClusterCount()>
    4e66:	6db5      	ldr	r5, [r6, #88]	; 0x58
    4e68:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    4e6a:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    4e6e:	1be4      	subs	r4, r4, r7
    4e70:	2b00      	cmp	r3, #0
    4e72:	d0b7      	beq.n	4de4 <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    4e74:	799b      	ldrb	r3, [r3, #6]
    4e76:	f44f 7100 	mov.w	r1, #512	; 0x200
    4e7a:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    4e7c:	b289      	uxth	r1, r1
    4e7e:	fba1 0104 	umull	r0, r1, r1, r4
    4e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e86:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4e8a:	b328      	cbz	r0, 4ed8 <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    4e8c:	f002 fdc0 	bl	7a10 <ExFatPartition::freeClusterCount()>
    4e90:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    4e92:	2f00      	cmp	r7, #0
    4e94:	f43f af6f 	beq.w	4d76 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4e98:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    4e9c:	2800      	cmp	r0, #0
    4e9e:	d0dd      	beq.n	4e5c <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    4ea0:	6803      	ldr	r3, [r0, #0]
    4ea2:	2100      	movs	r1, #0
    4ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    4ea6:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    4ea8:	2800      	cmp	r0, #0
    4eaa:	f47f af64 	bne.w	4d76 <MTPStorage_SD::usedSize(unsigned long)+0x52>
    4eae:	e7d5      	b.n	4e5c <MTPStorage_SD::usedSize(unsigned long)+0x138>
    4eb0:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    4eb4:	2900      	cmp	r1, #0
    4eb6:	f43f af41 	beq.w	4d3c <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    4eba:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    4ebe:	e73d      	b.n	4d3c <MTPStorage_SD::usedSize(unsigned long)+0x18>
    4ec0:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    4ec4:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    4ec8:	b147      	cbz	r7, 4edc <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    4eca:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4ece:	2800      	cmp	r0, #0
    4ed0:	f47f af66 	bne.w	4da0 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    4ed4:	4680      	mov	r8, r0
    4ed6:	e770      	b.n	4dba <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4ed8:	4604      	mov	r4, r0
    4eda:	e749      	b.n	4d70 <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    4edc:	b118      	cbz	r0, 4ee6 <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    4ede:	463c      	mov	r4, r7
    4ee0:	e75e      	b.n	4da0 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    4ee2:	4601      	mov	r1, r0
    4ee4:	e7cd      	b.n	4e82 <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    4ee6:	4607      	mov	r7, r0
    4ee8:	4604      	mov	r4, r0
    4eea:	e7be      	b.n	4e6a <MTPStorage_SD::usedSize(unsigned long)+0x146>
    4eec:	20008abc 	.word	0x20008abc

00004ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    4ef0:	b570      	push	{r4, r5, r6, lr}
    4ef2:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    4ef6:	b082      	sub	sp, #8
    4ef8:	4604      	mov	r4, r0
    4efa:	4615      	mov	r5, r2
    4efc:	b1de      	cbz	r6, 4f36 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x46>
    index_.seekSet((sizeof(r) * i));
    4efe:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4f02:	0109      	lsls	r1, r1, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4f04:	4630      	mov	r0, r6
    4f06:	f003 fb7f 	bl	8608 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    4f0a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    4f0e:	b138      	cbz	r0, 4f20 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    4f10:	f44f 7288 	mov.w	r2, #272	; 0x110
    4f14:	4629      	mov	r1, r5
  }
    4f16:	b002      	add	sp, #8
    4f18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f1c:	f003 bcaa 	b.w	8874 <FatFile::write(void const*, unsigned int)>
    4f20:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->write(buf, count) : 0;
    4f24:	b310      	cbz	r0, 4f6c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7c>
    4f26:	f44f 7288 	mov.w	r2, #272	; 0x110
    4f2a:	4629      	mov	r1, r5
    4f2c:	b002      	add	sp, #8
    4f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4f32:	f002 b98f 	b.w	7254 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    4f36:	f8d0 60f4 	ldr.w	r6, [r0, #244]	; 0xf4
    4f3a:	b13e      	cbz	r6, 4f4c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x5c>
    index_.seekSet((sizeof(r) * i));
    4f3c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    4f40:	010a      	lsls	r2, r1, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4f42:	2300      	movs	r3, #0
    4f44:	4630      	mov	r0, r6
    4f46:	f001 fb55 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    4f4a:	e7de      	b.n	4f0a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1a>
    4f4c:	9101      	str	r1, [sp, #4]
    4f4e:	f7ff fe7b 	bl	4c48 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    4f52:	9901      	ldr	r1, [sp, #4]
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    4f54:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
    4f58:	eb01 1301 	add.w	r3, r1, r1, lsl #4
    4f5c:	011a      	lsls	r2, r3, #4
    4f5e:	4611      	mov	r1, r2
    4f60:	2e00      	cmp	r6, #0
    4f62:	d1cf      	bne.n	4f04 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14>
    4f64:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    4f68:	2e00      	cmp	r6, #0
    4f6a:	d1ea      	bne.n	4f42 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x52>
  }
    4f6c:	b002      	add	sp, #8
    4f6e:	bd70      	pop	{r4, r5, r6, pc}

00004f70 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    4f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f74:	4605      	mov	r5, r0
    index_generated = true;
    4f76:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    4f78:	b0c5      	sub	sp, #276	; 0x114
    4f7a:	210d      	movs	r1, #13
    4f7c:	482a      	ldr	r0, [pc, #168]	; (5028 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    4f7e:	f885 61ac 	strb.w	r6, [r5, #428]	; 0x1ac
    4f82:	f00a f963 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f86:	4829      	ldr	r0, [pc, #164]	; (502c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    4f88:	f007 fdd8 	bl	cb3c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    4f8c:	6dab      	ldr	r3, [r5, #88]	; 0x58
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    4f8e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    4f92:	b3a2      	cbz	r2, 4ffe <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    4f94:	466c      	mov	r4, sp
    4f96:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4f98:	4611      	mov	r1, r2
    4f9a:	4633      	mov	r3, r6
    4f9c:	6020      	str	r0, [r4, #0]
    4f9e:	4620      	mov	r0, r4
    4fa0:	4a21      	ldr	r2, [pc, #132]	; (5028 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    4fa2:	f003 f895 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    4fa6:	2800      	cmp	r0, #0
    4fa8:	d13a      	bne.n	5020 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    4faa:	686b      	ldr	r3, [r5, #4]
    index_entries_ = 0;
    4fac:	2600      	movs	r6, #0
    for(int ii=0; ii<num_storage; ii++)
    4fae:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    4fb0:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
    index_entries_ = 0;
    4fb4:	f8c5 61a8 	str.w	r6, [r5, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    4fb8:	dd1e      	ble.n	4ff8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    4fba:	466c      	mov	r4, sp
      r.parent = 0xFFFFFFFFUL; // 
    4fbc:	f04f 39ff 	mov.w	r9, #4294967295
      r.child = 0;
    4fc0:	4637      	mov	r7, r6
      r.isdir = true;
    4fc2:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    4fc6:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
      strcpy(r.name, "/");
    4fca:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    4fcc:	4622      	mov	r2, r4
    4fce:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    4fd0:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    4fd4:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    4fd6:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    4fda:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    4fdc:	f8c5 c1a8 	str.w	ip, [r5, #424]	; 0x1a8
      r.isdir = true;
    4fe0:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    4fe4:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    4fe8:	f8ad 3010 	strh.w	r3, [sp, #16]
    WriteIndexRecord(new_record, r);
    4fec:	f7ff ff80 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    4ff0:	f8d5 3198 	ldr.w	r3, [r5, #408]	; 0x198
    4ff4:	429e      	cmp	r6, r3
    4ff6:	dbe6      	blt.n	4fc6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
  }
    4ff8:	b045      	add	sp, #276	; 0x114
    4ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4ffe:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5002:	2900      	cmp	r1, #0
    5004:	d0d1      	beq.n	4faa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5006:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5008:	4633      	mov	r3, r6
    500a:	6322      	str	r2, [r4, #48]	; 0x30
    500c:	4620      	mov	r0, r4
    500e:	4a06      	ldr	r2, [pc, #24]	; (5028 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5010:	f001 fdae 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5014:	2800      	cmp	r0, #0
    5016:	d0c8      	beq.n	4faa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5018:	4620      	mov	r0, r4
    501a:	f001 fe0d 	bl	6c38 <ExFatFile::remove()>
    501e:	e7c4      	b.n	4faa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5020:	4620      	mov	r0, r4
    5022:	f004 f8b5 	bl	9190 <FatFile::remove()>
    5026:	e7c0      	b.n	4faa <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5028:	20000ae0 	.word	0x20000ae0
    502c:	20008abc 	.word	0x20008abc

00005030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    5030:	b570      	push	{r4, r5, r6, lr}
    5032:	460d      	mov	r5, r1
    5034:	4614      	mov	r4, r2
    memset(&ret, 0, sizeof(ret));
    5036:	2100      	movs	r1, #0
    5038:	f44f 7288 	mov.w	r2, #272	; 0x110
  {
    503c:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    503e:	f00c fc13 	bl	11868 <memset>
    if (i > index_entries_) 
    5042:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    5046:	42a3      	cmp	r3, r4
    5048:	d201      	bcs.n	504e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
  }
    504a:	4630      	mov	r0, r6
    504c:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    504e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    5052:	b1c8      	cbz	r0, 5088 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    5054:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5058:	0121      	lsls	r1, r4, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    505a:	f003 fad5 	bl	8608 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    505e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    5062:	b130      	cbz	r0, 5072 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    5064:	f44f 7288 	mov.w	r2, #272	; 0x110
    5068:	4631      	mov	r1, r6
    506a:	f003 f885 	bl	8178 <FatFile::read(void*, unsigned int)>
  }
    506e:	4630      	mov	r0, r6
    5070:	bd70      	pop	{r4, r5, r6, pc}
    5072:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->read(buf, count) : -1;
    5076:	2800      	cmp	r0, #0
    5078:	d0e7      	beq.n	504a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    507a:	f44f 7288 	mov.w	r2, #272	; 0x110
    507e:	4631      	mov	r1, r6
    5080:	f001 f9d2 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    5084:	4630      	mov	r0, r6
    5086:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5088:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    508c:	b130      	cbz	r0, 509c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6c>
    index_.seekSet(sizeof(ret) * i);
    508e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5092:	0122      	lsls	r2, r4, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5094:	2300      	movs	r3, #0
    5096:	f001 faad 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    509a:	e7e0      	b.n	505e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    509c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    50a0:	4628      	mov	r0, r5
    50a2:	f7ff fdd1 	bl	4c48 <MTPStorage_SD::OpenIndex() [clone .part.0]>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    50a6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    50aa:	0122      	lsls	r2, r4, #4
    50ac:	4611      	mov	r1, r2
    50ae:	2800      	cmp	r0, #0
    50b0:	d1d3      	bne.n	505a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    50b2:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    50b6:	2800      	cmp	r0, #0
    50b8:	d0c7      	beq.n	504a <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    50ba:	e7eb      	b.n	5094 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x64>

000050bc <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    50bc:	b530      	push	{r4, r5, lr}
    { if (next_ == 0) return 0;
    50be:	f8d0 51b0 	ldr.w	r5, [r0, #432]	; 0x1b0
  {
    50c2:	b0c5      	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    50c4:	b325      	cbz	r5, 5110 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    50c6:	4604      	mov	r4, r0
    50c8:	e008      	b.n	50dc <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
      { next_ = r.sibling;
    50ca:	9b02      	ldr	r3, [sp, #8]
    50cc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    50d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    50d4:	b9cb      	cbnz	r3, 510a <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    50d6:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
    50da:	b1cd      	cbz	r5, 5110 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    50dc:	462a      	mov	r2, r5
    50de:	4621      	mov	r1, r4
    50e0:	4668      	mov	r0, sp
    50e2:	f7ff ffa5 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    50e6:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
    50ea:	2b00      	cmp	r3, #0
    50ec:	d1ed      	bne.n	50ca <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    50ee:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    50f2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      { next_++;
    50f6:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    50f8:	428a      	cmp	r2, r1
    50fa:	bf38      	it	cc
    50fc:	4613      	movcc	r3, r2
    50fe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    5102:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5106:	2b00      	cmp	r3, #0
    5108:	d0e5      	beq.n	50d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
  }
    510a:	4628      	mov	r0, r5
    510c:	b045      	add	sp, #276	; 0x114
    510e:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    5110:	2500      	movs	r5, #0
  }
    5112:	4628      	mov	r0, r5
    5114:	b045      	add	sp, #276	; 0x114
    5116:	bd30      	pop	{r4, r5, pc}

00005118 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    5118:	b530      	push	{r4, r5, lr}
    511a:	b0c5      	sub	sp, #276	; 0x114
    511c:	4615      	mov	r5, r2
    511e:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    5120:	4601      	mov	r1, r0
    5122:	4668      	mov	r0, sp
  {
    5124:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    5126:	f7ff ff83 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    512a:	4628      	mov	r0, r5
    512c:	a904      	add	r1, sp, #16
    512e:	f00c fed5 	bl	11edc <strcpy>
    *parent = r.parent;
    5132:	9b00      	ldr	r3, [sp, #0]
    5134:	9a48      	ldr	r2, [sp, #288]	; 0x120
    5136:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5138:	f89d 300c 	ldrb.w	r3, [sp, #12]
    513c:	b93b      	cbnz	r3, 514e <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    513e:	9a01      	ldr	r2, [sp, #4]
    5140:	6022      	str	r2, [r4, #0]
    *store = r.store;
    5142:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5146:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5148:	8013      	strh	r3, [r2, #0]
  }
    514a:	b045      	add	sp, #276	; 0x114
    514c:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    514e:	f04f 32ff 	mov.w	r2, #4294967295
    5152:	e7f5      	b.n	5140 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

00005154 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    5154:	b500      	push	{lr}
    5156:	b0c5      	sub	sp, #276	; 0x114
    5158:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    515a:	4601      	mov	r1, r0
    515c:	4668      	mov	r0, sp
    515e:	f7ff ff67 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    5162:	9801      	ldr	r0, [sp, #4]
    5164:	b045      	add	sp, #276	; 0x114
    5166:	f85d fb04 	ldr.w	pc, [sp], #4
    516a:	bf00      	nop

0000516c <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    516c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
  {
    5170:	b530      	push	{r4, r5, lr}
    5172:	4604      	mov	r4, r0
    5174:	b0c5      	sub	sp, #276	; 0x114
    5176:	b1bb      	cbz	r3, 51a8 <MTPStorage_SD::close()+0x3c>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint32_t fileSize() const {return m_fileSize;}
    5178:	69dd      	ldr	r5, [r3, #28]
    file_.close();
    517a:	f504 7084 	add.w	r0, r4, #264	; 0x108
    517e:	f004 fd75 	bl	9c6c <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    5182:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    5186:	4621      	mov	r1, r4
    5188:	4668      	mov	r0, sp
    518a:	f7ff ff51 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    518e:	466a      	mov	r2, sp
    5190:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    5194:	4620      	mov	r0, r4
    r.child = size;
    5196:	9501      	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    5198:	f7ff feaa 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    519c:	f06f 0301 	mvn.w	r3, #1
    51a0:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  }
    51a4:	b045      	add	sp, #276	; 0x114
    51a6:	bd30      	pop	{r4, r5, pc}
    51a8:	f8d0 5144 	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    51ac:	2d00      	cmp	r5, #0
    51ae:	d0e4      	beq.n	517a <MTPStorage_SD::close()+0xe>
    uint32_t size = (uint32_t) file_.size();
    51b0:	692d      	ldr	r5, [r5, #16]
    51b2:	e7e2      	b.n	517a <MTPStorage_SD::close()+0xe>

000051b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    51b4:	b570      	push	{r4, r5, r6, lr}
    51b6:	b0c4      	sub	sp, #272	; 0x110
    51b8:	4614      	mov	r4, r2
    51ba:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    51bc:	460a      	mov	r2, r1
    51be:	4601      	mov	r1, r0
    51c0:	4668      	mov	r0, sp
  {
    51c2:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    51c4:	f7ff ff34 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    51c8:	9900      	ldr	r1, [sp, #0]
    51ca:	1c4b      	adds	r3, r1, #1
    51cc:	d01b      	beq.n	5206 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    51ce:	4633      	mov	r3, r6
    51d0:	4622      	mov	r2, r4
    51d2:	4628      	mov	r0, r5
    51d4:	f7ff ffee 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    51d8:	4620      	mov	r0, r4
    51da:	f00c ff31 	bl	12040 <strlen>
    51de:	4420      	add	r0, r4
    51e0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    51e4:	2b2f      	cmp	r3, #47	; 0x2f
    51e6:	d108      	bne.n	51fa <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    51e8:	4632      	mov	r2, r6
    51ea:	a904      	add	r1, sp, #16
    51ec:	4620      	mov	r0, r4
    51ee:	f00c fb8d 	bl	1190c <strlcat>
      return tmp.store;
    51f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    51f6:	b044      	add	sp, #272	; 0x110
    51f8:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    51fa:	4632      	mov	r2, r6
    51fc:	4905      	ldr	r1, [pc, #20]	; (5214 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    51fe:	4620      	mov	r0, r4
    5200:	f00c fb84 	bl	1190c <strlcat>
    5204:	e7f0      	b.n	51e8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    5206:	4b03      	ldr	r3, [pc, #12]	; (5214 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    5208:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    520c:	881b      	ldrh	r3, [r3, #0]
    520e:	8023      	strh	r3, [r4, #0]
  }
    5210:	b044      	add	sp, #272	; 0x110
    5212:	bd70      	pop	{r4, r5, r6, pc}
    5214:	20000adc 	.word	0x20000adc

00005218 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    5218:	b5f0      	push	{r4, r5, r6, r7, lr}
    521a:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    521e:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    5222:	4617      	mov	r7, r2
    5224:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5226:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    5228:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    522a:	f7ff ffc3 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    522e:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    5230:	a810      	add	r0, sp, #64	; 0x40
    5232:	f00c ff05 	bl	12040 <strlen>
    5236:	4601      	mov	r1, r0
    5238:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    523a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    523e:	f00a f805 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5242:	4832      	ldr	r0, [pc, #200]	; (530c <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5244:	f007 fc7a 	bl	cb3c <Print::println()>
    Record p1 = ReadIndexRecord(handle);
    5248:	462a      	mov	r2, r5
    524a:	4621      	mov	r1, r4
    524c:	a8d0      	add	r0, sp, #832	; 0x340
    524e:	f7ff feef 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    5252:	f44f 7280 	mov.w	r2, #256	; 0x100
    5256:	a9d4      	add	r1, sp, #848	; 0x350
    5258:	a890      	add	r0, sp, #576	; 0x240
    525a:	f00c fb8b 	bl	11974 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    525e:	4639      	mov	r1, r7
    5260:	f44f 7280 	mov.w	r2, #256	; 0x100
    5264:	a8d4      	add	r0, sp, #848	; 0x350
    5266:	f00c fb85 	bl	11974 <strlcpy>
    WriteIndexRecord(handle, p1);
    526a:	aad0      	add	r2, sp, #832	; 0x340
    526c:	4629      	mov	r1, r5
    526e:	4620      	mov	r0, r4
    5270:	f7ff fe3e 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5274:	f44f 7380 	mov.w	r3, #256	; 0x100
    5278:	aa50      	add	r2, sp, #320	; 0x140
    527a:	4629      	mov	r1, r5
    527c:	4620      	mov	r0, r4
    527e:	f7ff ff99 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    5282:	a850      	add	r0, sp, #320	; 0x140
    5284:	f00c fedc 	bl	12040 <strlen>
    5288:	4601      	mov	r1, r0
    528a:	a850      	add	r0, sp, #320	; 0x140
    528c:	f009 ffde 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5290:	481e      	ldr	r0, [pc, #120]	; (530c <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5292:	f007 fc53 	bl	cb3c <Print::println()>
    5296:	6db2      	ldr	r2, [r6, #88]	; 0x58
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5298:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    529c:	b1cb      	cbz	r3, 52d2 <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    529e:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    52a2:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    52a4:	aa10      	add	r2, sp, #64	; 0x40
    52a6:	a802      	add	r0, sp, #8
    52a8:	e9cd 1301 	strd	r1, r3, [sp, #4]
    52ac:	f002 fe8e 	bl	7fcc <FatFile::open(FatFile*, char const*, int)>
    52b0:	9901      	ldr	r1, [sp, #4]
    52b2:	bb20      	cbnz	r0, 52fe <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    52b4:	a990      	add	r1, sp, #576	; 0x240
    52b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    52ba:	a8d4      	add	r0, sp, #848	; 0x350
    52bc:	f00c fb5a 	bl	11974 <strlcpy>
    WriteIndexRecord(handle, p1);
    52c0:	4620      	mov	r0, r4
    52c2:	aad0      	add	r2, sp, #832	; 0x340
    52c4:	4629      	mov	r1, r5
    52c6:	f7ff fe13 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    52ca:	2000      	movs	r0, #0
  }
    52cc:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
    52d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d2:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    52d6:	2900      	cmp	r1, #0
    52d8:	d0ec      	beq.n	52b4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    52da:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    52de:	aa10      	add	r2, sp, #64	; 0x40
    52e0:	a802      	add	r0, sp, #8
    52e2:	930e      	str	r3, [sp, #56]	; 0x38
    52e4:	9101      	str	r1, [sp, #4]
    52e6:	f001 fbc7 	bl	6a78 <ExFatFile::open(ExFatFile*, char const*, int)>
    52ea:	9901      	ldr	r1, [sp, #4]
    52ec:	2800      	cmp	r0, #0
    52ee:	d0e1      	beq.n	52b4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    52f0:	aa50      	add	r2, sp, #320	; 0x140
    52f2:	a802      	add	r0, sp, #8
    52f4:	f001 fe4e 	bl	6f94 <ExFatFile::rename(ExFatFile*, char const*)>
    52f8:	2800      	cmp	r0, #0
    52fa:	d1e7      	bne.n	52cc <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    52fc:	e7da      	b.n	52b4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    52fe:	aa50      	add	r2, sp, #320	; 0x140
    5300:	a802      	add	r0, sp, #8
    5302:	f003 f843 	bl	838c <FatFile::rename(FatFile*, char const*)>
    5306:	2800      	cmp	r0, #0
    5308:	d1e0      	bne.n	52cc <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    530a:	e7d3      	b.n	52b4 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    530c:	20008abc 	.word	0x20008abc

00005310 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    5310:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    5314:	428b      	cmp	r3, r1
  {
    5316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    531a:	4604      	mov	r4, r0
    531c:	b0d4      	sub	sp, #336	; 0x150
    531e:	460d      	mov	r5, r1
    5320:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    5322:	d103      	bne.n	532c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    5324:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    5328:	4293      	cmp	r3, r2
    532a:	d02c      	beq.n	5386 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    532c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5330:	4629      	mov	r1, r5
    5332:	4620      	mov	r0, r4
    5334:	aa14      	add	r2, sp, #80	; 0x50
    5336:	f7ff ff3d 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    533a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    533e:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    5340:	f504 7884 	add.w	r8, r4, #264	; 0x108
    5344:	b313      	cbz	r3, 538c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    5346:	4640      	mov	r0, r8
    5348:	f004 fc90 	bl	9c6c <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    534c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5350:	aa14      	add	r2, sp, #80	; 0x50
    5352:	463b      	mov	r3, r7
    5354:	4668      	mov	r0, sp
    5356:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5358:	f004 fda2 	bl	9ea0 <FsVolume::open(char const*, int)>
class Print
    535c:	9b01      	ldr	r3, [sp, #4]
    535e:	a904      	add	r1, sp, #16
    5360:	4640      	mov	r0, r8
    5362:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    5366:	9b02      	ldr	r3, [sp, #8]
    5368:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    536c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5370:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    5374:	f004 fc20 	bl	9bb8 <FsBaseFile::operator=(FsBaseFile const&)>
    5378:	4b07      	ldr	r3, [pc, #28]	; (5398 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    537a:	a804      	add	r0, sp, #16
    537c:	9300      	str	r3, [sp, #0]
    537e:	f004 fc75 	bl	9c6c <FsBaseFile::close()>
    mode_ = mode;
    5382:	e9c4 7568 	strd	r7, r5, [r4, #416]	; 0x1a0
  }
    5386:	b054      	add	sp, #336	; 0x150
    5388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    538c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    5390:	2b00      	cmp	r3, #0
    5392:	d1d8      	bne.n	5346 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    5394:	e7da      	b.n	534c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5396:	bf00      	nop
    5398:	20000b7c 	.word	0x20000b7c

0000539c <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    539e:	4604      	mov	r4, r0
    53a0:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    53a2:	2200      	movs	r2, #0
  {
    53a4:	461d      	mov	r5, r3
    53a6:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    53a8:	f7ff ffb2 	bl	5310 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    53ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    53b0:	b1ab      	cbz	r3, 53de <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x42>
    53b2:	4631      	mov	r1, r6
    53b4:	4618      	mov	r0, r3
    53b6:	f003 f927 	bl	8608 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    53ba:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    53be:	b128      	cbz	r0, 53cc <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    53c0:	463a      	mov	r2, r7
    53c2:	4629      	mov	r1, r5
  }
    53c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    53c8:	f002 bed6 	b.w	8178 <FatFile::read(void*, unsigned int)>
    53cc:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->read(buf, count) : -1;
    53d0:	b160      	cbz	r0, 53ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    53d2:	463a      	mov	r2, r7
    53d4:	4629      	mov	r1, r5
    53d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    53da:	f001 b825 	b.w	6428 <ExFatFile::read(void*, unsigned int)>
    53de:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->seekSet(pos) : false;
    53e2:	b118      	cbz	r0, 53ec <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    53e4:	4632      	mov	r2, r6
    53e6:	f001 f905 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    53ea:	e7e6      	b.n	53ba <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>
    53ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ee:	bf00      	nop

000053f0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    53f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    53f4:	f1b2 3fff 	cmp.w	r2, #4294967295
    53f8:	bf14      	ite	ne
    53fa:	4690      	movne	r8, r2
    53fc:	4688      	moveq	r8, r1
  {
    53fe:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
    5402:	4604      	mov	r4, r0
    5404:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    5406:	4642      	mov	r2, r8
    5408:	4601      	mov	r1, r0
    540a:	a84e      	add	r0, sp, #312	; 0x138
  {
    540c:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    540e:	f7ff fe0f 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    5412:	f44f 7280 	mov.w	r2, #256	; 0x100
    5416:	99de      	ldr	r1, [sp, #888]	; 0x378
    5418:	a896      	add	r0, sp, #600	; 0x258
    541a:	f00c faab 	bl	11974 <strlcpy>
  { uint32_t new_record = index_entries_++;
    541e:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    r.child = 0;
    5422:	f04f 0a00 	mov.w	sl, #0
    r.scanned = 1;
    5426:	f04f 0901 	mov.w	r9, #1
  { uint32_t new_record = index_entries_++;
    542a:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    542c:	aa92      	add	r2, sp, #584	; 0x248
    542e:	4629      	mov	r1, r5
    5430:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    5432:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    r.store = p.store;
    5436:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    543a:	f8cd 8248 	str.w	r8, [sp, #584]	; 0x248
    r.store = p.store;
    543e:	f8ad 3256 	strh.w	r3, [sp, #598]	; 0x256
    r.sibling = p.child;
    5442:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    5444:	f88d 7254 	strb.w	r7, [sp, #596]	; 0x254
    r.sibling = p.child;
    5448:	9394      	str	r3, [sp, #592]	; 0x250
    r.child = 0;
    544a:	f8cd a24c 	str.w	sl, [sp, #588]	; 0x24c
    r.scanned = 1;
    544e:	f88d 9255 	strb.w	r9, [sp, #597]	; 0x255
    WriteIndexRecord(new_record, r);
    5452:	f7ff fd4d 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(parent, p);
    5456:	4641      	mov	r1, r8
    5458:	aa4e      	add	r2, sp, #312	; 0x138
    545a:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    545c:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    545e:	f7ff fd47 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    5462:	b1d7      	cbz	r7, 549a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xaa>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    5464:	eb04 0686 	add.w	r6, r4, r6, lsl #2
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    5468:	f44f 7380 	mov.w	r3, #256	; 0x100
    546c:	4629      	mov	r1, r5
    546e:	4620      	mov	r0, r4
    5470:	aa0e      	add	r2, sp, #56	; 0x38
    5472:	f7ff fe9f 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5476:	6db3      	ldr	r3, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    5478:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    547c:	b1c0      	cbz	r0, 54b0 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc0>
    return sub.mkdir(vwd(), path, pFlag);
    547e:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    5482:	464b      	mov	r3, r9
    5484:	aa0e      	add	r2, sp, #56	; 0x38
    5486:	4668      	mov	r0, sp
    5488:	f8cd a000 	str.w	sl, [sp]
    548c:	f002 fd28 	bl	7ee0 <FatFile::mkdir(FatFile*, char const*, bool)>
  }
    5490:	4628      	mov	r0, r5
    5492:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    5496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    549a:	f240 2202 	movw	r2, #514	; 0x202
    549e:	4629      	mov	r1, r5
    54a0:	4620      	mov	r0, r4
    54a2:	f7ff ff35 	bl	5310 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    54a6:	4628      	mov	r0, r5
    54a8:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    54ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54b0:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    54b4:	2900      	cmp	r1, #0
    54b6:	d0f6      	beq.n	54a6 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xb6>
    54b8:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    54ba:	464b      	mov	r3, r9
    54bc:	aa0e      	add	r2, sp, #56	; 0x38
    54be:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    54c2:	4668      	mov	r0, sp
    54c4:	f001 fde8 	bl	7098 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    54c8:	4628      	mov	r0, r5
    54ca:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    54ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    54d2:	bf00      	nop

000054d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    54d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d8:	f1b2 3fff 	cmp.w	r2, #4294967295
    54dc:	bf14      	ite	ne
    54de:	4616      	movne	r6, r2
    54e0:	460e      	moveq	r6, r1
    54e2:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    54e6:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    54e8:	4604      	mov	r4, r0
    Record record = ReadIndexRecord(i);
    54ea:	4632      	mov	r2, r6
    54ec:	4668      	mov	r0, sp
    54ee:	f7ff fd9f 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    54f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    54f6:	b113      	cbz	r3, 54fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    54f8:	f89d 200d 	ldrb.w	r2, [sp, #13]
    54fc:	b11a      	cbz	r2, 5506 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
  }
    54fe:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    5502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    5506:	4631      	mov	r1, r6
    5508:	4620      	mov	r0, r4
    550a:	f7ff ff01 	bl	5310 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isOpen() const {return m_fFile || m_xFile;}
    550e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5512:	2b00      	cmp	r3, #0
    5514:	f000 8087 	beq.w	5626 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x152>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    5518:	2500      	movs	r5, #0
    551a:	f504 77ac 	add.w	r7, r4, #344	; 0x158
    551e:	f504 7b84 	add.w	fp, r4, #264	; 0x108
    5522:	f8df a114 	ldr.w	sl, [pc, #276]	; 5638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x164>
	constexpr Print() : write_error(0) {}
    5526:	46a9      	mov	r9, r5
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5528:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    552c:	e027      	b.n	557e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xaa>
        r.store = record.store;
    552e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    5532:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    5534:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    5536:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    553a:	7802      	ldrb	r2, [r0, #0]
    553c:	f002 0270 	and.w	r2, r2, #112	; 0x70
    5540:	2a00      	cmp	r2, #0
    5542:	bf14      	ite	ne
    5544:	2201      	movne	r2, #1
    5546:	2200      	moveq	r2, #0
    5548:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    554c:	d05c      	beq.n	5608 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x134>
    554e:	2200      	movs	r2, #0
    5550:	9245      	str	r2, [sp, #276]	; 0x114
    return m_fFile ? m_fFile->getName(name, len) :
    5552:	a948      	add	r1, sp, #288	; 0x120
    5554:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    5558:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    555c:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    return m_fFile ? m_fFile->getName(name, len) :
    5560:	f003 ffa4 	bl	94ac <FatFile::getName(char*, unsigned int)>
  { uint32_t new_record = index_entries_++;
    5564:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5568:	4620      	mov	r0, r4
    556a:	aa44      	add	r2, sp, #272	; 0x110
  { uint32_t new_record = index_entries_++;
    556c:	1c69      	adds	r1, r5, #1
    556e:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5572:	4629      	mov	r1, r5
    5574:	f7ff fcbc 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    5578:	4638      	mov	r0, r7
    557a:	f004 fb77 	bl	9c6c <FsBaseFile::close()>
    tmpFile.openNext(this, oflag);
    557e:	2200      	movs	r2, #0
    5580:	4659      	mov	r1, fp
    5582:	a848      	add	r0, sp, #288	; 0x120
    5584:	f88d 911c 	strb.w	r9, [sp, #284]	; 0x11c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5588:	f8cd a110 	str.w	sl, [sp, #272]	; 0x110
    558c:	e9cd 9845 	strd	r9, r8, [sp, #276]	; 0x114
  FsBaseFile() {}
    5590:	e9cd 9956 	strd	r9, r9, [sp, #344]	; 0x158
    tmpFile.openNext(this, oflag);
    5594:	f004 fbd6 	bl	9d44 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5598:	9a45      	ldr	r2, [sp, #276]	; 0x114
    559a:	a948      	add	r1, sp, #288	; 0x120
    559c:	4638      	mov	r0, r7
    559e:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
class Stream : public Print
    55a2:	9a46      	ldr	r2, [sp, #280]	; 0x118
    55a4:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    55a8:	f89d 211c 	ldrb.w	r2, [sp, #284]	; 0x11c
    55ac:	f884 2154 	strb.w	r2, [r4, #340]	; 0x154
    55b0:	f004 fb02 	bl	9bb8 <FsBaseFile::operator=(FsBaseFile const&)>
    55b4:	4b1f      	ldr	r3, [pc, #124]	; (5634 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x160>)
  ~FsBaseFile() {close();}
    55b6:	a848      	add	r0, sp, #288	; 0x120
    55b8:	9344      	str	r3, [sp, #272]	; 0x110
    55ba:	f004 fb57 	bl	9c6c <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    55be:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    55c2:	2800      	cmp	r0, #0
    55c4:	d1b3      	bne.n	552e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a>
    55c6:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    55ca:	b1fa      	cbz	r2, 560c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
        r.store = record.store;
    55cc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    55d0:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    55d2:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    55d4:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
           m_xFile ? m_xFile->isDir() : false;
    55d8:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    55dc:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    55e0:	d00e      	beq.n	5600 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
        r.isdir = child_.isDirectory();
    55e2:	2101      	movs	r1, #1
    55e4:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    55e8:	9045      	str	r0, [sp, #276]	; 0x114
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    55ea:	a948      	add	r1, sp, #288	; 0x120
    55ec:	4610      	mov	r0, r2
    55ee:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    55f2:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    55f6:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    55fa:	f001 ff91 	bl	7520 <ExFatFile::getName8(char*, unsigned int)>
    55fe:	e7b1      	b.n	5564 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
        r.isdir = child_.isDirectory();
    5600:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    5604:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    5606:	e7ef      	b.n	55e8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
  uint32_t fileSize() const {return m_fileSize;}
    5608:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    560a:	e7a1      	b.n	5550 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c>
      record.scanned = true;
    560c:	2301      	movs	r3, #1
      WriteIndexRecord(i, record);
    560e:	4631      	mov	r1, r6
    5610:	4620      	mov	r0, r4
    5612:	466a      	mov	r2, sp
      record.child = sibling;
    5614:	9501      	str	r5, [sp, #4]
      record.scanned = true;
    5616:	f88d 300d 	strb.w	r3, [sp, #13]
      WriteIndexRecord(i, record);
    561a:	f7ff fc69 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    561e:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    5622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5626:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    562a:	2b00      	cmp	r3, #0
    562c:	f47f af74 	bne.w	5518 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    5630:	e765      	b.n	54fe <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    5632:	bf00      	nop
    5634:	20000b7c 	.word	0x20000b7c
    5638:	20000ca4 	.word	0x20000ca4

0000563c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    563c:	b510      	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    563e:	f1b2 3fff 	cmp.w	r2, #4294967295
    5642:	bf08      	it	eq
    5644:	460a      	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    5646:	b0c6      	sub	sp, #280	; 0x118
    5648:	4604      	mov	r4, r0
      ScanDir(store, parent);
    564a:	9201      	str	r2, [sp, #4]
    564c:	f7ff ff42 	bl	54d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    5650:	2301      	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    5652:	9a01      	ldr	r2, [sp, #4]
    5654:	4621      	mov	r1, r4
    5656:	a802      	add	r0, sp, #8
      follow_sibling_ = true;
    5658:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    565c:	f7ff fce8 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5660:	9b03      	ldr	r3, [sp, #12]
    5662:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  }
    5666:	b046      	add	sp, #280	; 0x118
    5668:	bd10      	pop	{r4, pc}
    566a:	bf00      	nop

0000566c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    566c:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
  { 
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	4605      	mov	r5, r0
    5674:	460e      	mov	r6, r1
    5676:	4614      	mov	r4, r2
  { if (index_generated) return; 
    5678:	b323      	cbz	r3, 56c4 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x58>
    if (parent) 
    567a:	b134      	cbz	r4, 568a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1e>
    567c:	4622      	mov	r2, r4
    567e:	4631      	mov	r1, r6
    5680:	4628      	mov	r0, r5
  }
    5682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5686:	f7ff bfd9 	b.w	563c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
  { if (all_scanned_) return;
    568a:	f895 31ad 	ldrb.w	r3, [r5, #429]	; 0x1ad
    568e:	b993      	cbnz	r3, 56b6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    all_scanned_ = true;
    5690:	2201      	movs	r2, #1
  { if (index_generated) return; 
    5692:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
    all_scanned_ = true;
    5696:	f885 21ad 	strb.w	r2, [r5, #429]	; 0x1ad
  { if (index_generated) return; 
    569a:	b1b3      	cbz	r3, 56ca <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5e>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    569c:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    56a0:	b14b      	cbz	r3, 56b6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    56a2:	4622      	mov	r2, r4
    56a4:	4631      	mov	r1, r6
    56a6:	4628      	mov	r0, r5
    56a8:	3401      	adds	r4, #1
    56aa:	f7ff ff13 	bl	54d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    56ae:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    56b2:	429c      	cmp	r4, r3
    56b4:	d3f5      	bcc.n	56a2 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x36>
      follow_sibling_ = false;
    56b6:	2200      	movs	r2, #0
      next_ = 1;
    56b8:	2301      	movs	r3, #1
      follow_sibling_ = false;
    56ba:	f885 21b4 	strb.w	r2, [r5, #436]	; 0x1b4
      next_ = 1;
    56be:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
  }
    56c2:	bd70      	pop	{r4, r5, r6, pc}
    56c4:	f7ff fc54 	bl	4f70 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    56c8:	e7d7      	b.n	567a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    56ca:	4628      	mov	r0, r5
    56cc:	f7ff fc50 	bl	4f70 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    56d0:	e7e4      	b.n	569c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
    56d2:	bf00      	nop

000056d4 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    56d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56d8:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    56dc:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    56e0:	2300      	movs	r3, #0
    56e2:	4681      	mov	r9, r0
    56e4:	4688      	mov	r8, r1
    56e6:	a804      	add	r0, sp, #16
    56e8:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
    56ec:	4615      	mov	r5, r2
    56ee:	f004 fbd7 	bl	9ea0 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    56f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    56f4:	2b00      	cmp	r3, #0
    56f6:	f000 80c7 	beq.w	5888 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1b4>
  if(f1.isDirectory())
    56fa:	781b      	ldrb	r3, [r3, #0]
    56fc:	f013 0f70 	tst.w	r3, #112	; 0x70
    5700:	f000 80ca 	beq.w	5898 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    5708:	2400      	movs	r4, #0
    570a:	af08      	add	r7, sp, #32
    570c:	4e7e      	ldr	r6, [pc, #504]	; (5908 <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    570e:	931a      	str	r3, [sp, #104]	; 0x68
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    5710:	f8df b200 	ldr.w	fp, [pc, #512]	; 5914 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5714:	4b7d      	ldr	r3, [pc, #500]	; (590c <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    5716:	9419      	str	r4, [sp, #100]	; 0x64
    5718:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    571c:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    571e:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5722:	4b7a      	ldr	r3, [pc, #488]	; (590c <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    tmpFile.openNext(this, oflag);
    5724:	2200      	movs	r2, #0
    5726:	4639      	mov	r1, r7
    5728:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    572a:	932c      	str	r3, [sp, #176]	; 0xb0
    572c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5730:	942d      	str	r4, [sp, #180]	; 0xb4
    5732:	932e      	str	r3, [sp, #184]	; 0xb8
    5734:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    5738:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    573c:	f004 fb02 	bl	9d44 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    5740:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    5742:	a930      	add	r1, sp, #192	; 0xc0
    5744:	a81c      	add	r0, sp, #112	; 0x70
    5746:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    5748:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    574a:	931a      	str	r3, [sp, #104]	; 0x68
    574c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    5750:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    5754:	f004 fa30 	bl	9bb8 <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5758:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    575a:	2b00      	cmp	r3, #0
    575c:	d04f      	beq.n	57fe <MTPStorage_SD::removeFile(unsigned long, char*)+0x12a>
  ~FsBaseFile() {close();}
    575e:	a830      	add	r0, sp, #192	; 0xc0
    5760:	962c      	str	r6, [sp, #176]	; 0xb0
    5762:	f004 fa83 	bl	9c6c <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    5766:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    5768:	f88d 4200 	strb.w	r4, [sp, #512]	; 0x200
    return m_fFile ? m_fFile->getName(name, len) :
    576c:	2800      	cmp	r0, #0
    576e:	d03d      	beq.n	57ec <MTPStorage_SD::removeFile(unsigned long, char*)+0x118>
    5770:	f44f 7280 	mov.w	r2, #256	; 0x100
    5774:	a980      	add	r1, sp, #512	; 0x200
    5776:	f003 fe99 	bl	94ac <FatFile::getName(char*, unsigned int)>
    577a:	ab80      	add	r3, sp, #512	; 0x200
    577c:	f44f 7180 	mov.w	r1, #256	; 0x100
    5780:	465a      	mov	r2, fp
    5782:	9300      	str	r3, [sp, #0]
    5784:	eb0d 0001 	add.w	r0, sp, r1
    5788:	462b      	mov	r3, r5
    578a:	f00b fe83 	bl	11494 <snprintf>
    return m_fFile ? m_fFile->isDir() :
    578e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    5790:	b14b      	cbz	r3, 57a6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    5792:	781b      	ldrb	r3, [r3, #0]
    5794:	f013 0f70 	tst.w	r3, #112	; 0x70
    5798:	d00c      	beq.n	57b4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    579a:	aa40      	add	r2, sp, #256	; 0x100
    579c:	4641      	mov	r1, r8
    579e:	4648      	mov	r0, r9
    57a0:	f7ff ff98 	bl	56d4 <MTPStorage_SD::removeFile(unsigned long, char*)>
    57a4:	e7bd      	b.n	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    57a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    57a8:	b123      	cbz	r3, 57b4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    57aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    57ae:	f013 0f50 	tst.w	r3, #80	; 0x50
    57b2:	d1f2      	bne.n	579a <MTPStorage_SD::removeFile(unsigned long, char*)+0xc6>
							  return write((const uint8_t *)str, strlen(str)); }
    57b4:	a840      	add	r0, sp, #256	; 0x100
    57b6:	f00c fc43 	bl	12040 <strlen>
    57ba:	4601      	mov	r1, r0
    57bc:	a840      	add	r0, sp, #256	; 0x100
    57be:	f009 fd45 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57c2:	4853      	ldr	r0, [pc, #332]	; (5910 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    57c4:	f007 f9ba 	bl	cb3c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    57c8:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    57cc:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    57d0:	2900      	cmp	r1, #0
    57d2:	d036      	beq.n	5842 <MTPStorage_SD::removeFile(unsigned long, char*)+0x16e>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    57d4:	aa40      	add	r2, sp, #256	; 0x100
    57d6:	2301      	movs	r3, #1
    57d8:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    57da:	942c      	str	r4, [sp, #176]	; 0xb0
    57dc:	f002 fc78 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    57e0:	2800      	cmp	r0, #0
    57e2:	d09e      	beq.n	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    57e4:	a82c      	add	r0, sp, #176	; 0xb0
    57e6:	f003 fcd3 	bl	9190 <FatFile::remove()>
    57ea:	e79a      	b.n	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    57ec:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    57ee:	2800      	cmp	r0, #0
    57f0:	d0c3      	beq.n	577a <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
    57f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    57f6:	a980      	add	r1, sp, #512	; 0x200
    57f8:	f001 fe92 	bl	7520 <ExFatFile::getName8(char*, unsigned int)>
    57fc:	e7bd      	b.n	577a <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
  bool isOpen() const {return m_fFile || m_xFile;}
    57fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    5800:	2b00      	cmp	r3, #0
    5802:	d1ac      	bne.n	575e <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    5804:	a830      	add	r0, sp, #192	; 0xc0
    5806:	9303      	str	r3, [sp, #12]
    5808:	962c      	str	r6, [sp, #176]	; 0xb0
    580a:	f004 fa2f 	bl	9c6c <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    580e:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    5812:	9b03      	ldr	r3, [sp, #12]
    5814:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    5818:	b330      	cbz	r0, 5868 <MTPStorage_SD::removeFile(unsigned long, char*)+0x194>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    581a:	4601      	mov	r1, r0
    581c:	462a      	mov	r2, r5
    581e:	a82c      	add	r0, sp, #176	; 0xb0
    5820:	932c      	str	r3, [sp, #176]	; 0xb0
    5822:	f002 fc55 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    5826:	2800      	cmp	r0, #0
    5828:	d164      	bne.n	58f4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x220>
    582a:	a81c      	add	r0, sp, #112	; 0x70
    582c:	9618      	str	r6, [sp, #96]	; 0x60
    582e:	f004 fa1d 	bl	9c6c <FsBaseFile::close()>
    5832:	4638      	mov	r0, r7
    5834:	9604      	str	r6, [sp, #16]
    5836:	f004 fa19 	bl	9c6c <FsBaseFile::close()>
}
    583a:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
    583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5842:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5846:	2b00      	cmp	r3, #0
    5848:	f43f af6b 	beq.w	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    584c:	9138      	str	r1, [sp, #224]	; 0xe0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    584e:	aa40      	add	r2, sp, #256	; 0x100
    5850:	4619      	mov	r1, r3
    5852:	a82c      	add	r0, sp, #176	; 0xb0
    5854:	2301      	movs	r3, #1
    5856:	f001 f98b 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    585a:	2800      	cmp	r0, #0
    585c:	f43f af61 	beq.w	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5860:	a82c      	add	r0, sp, #176	; 0xb0
    5862:	f001 f9e9 	bl	6c38 <ExFatFile::remove()>
    5866:	e75c      	b.n	5722 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    5868:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    586c:	2900      	cmp	r1, #0
    586e:	d0dc      	beq.n	582a <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5870:	4603      	mov	r3, r0
    5872:	9038      	str	r0, [sp, #224]	; 0xe0
    5874:	462a      	mov	r2, r5
    5876:	a82c      	add	r0, sp, #176	; 0xb0
    5878:	f001 f97a 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    587c:	2800      	cmp	r0, #0
    587e:	d0d4      	beq.n	582a <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    5880:	a82c      	add	r0, sp, #176	; 0xb0
    5882:	f001 fa33 	bl	6cec <ExFatFile::rmdir()>
    5886:	e7d0      	b.n	582a <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    5888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    588a:	b12b      	cbz	r3, 5898 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
    588c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5890:	f013 0f50 	tst.w	r3, #80	; 0x50
    5894:	f47f af36 	bne.w	5704 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    5898:	b135      	cbz	r5, 58a8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1d4>
							  return write((const uint8_t *)str, strlen(str)); }
    589a:	4628      	mov	r0, r5
    589c:	f00c fbd0 	bl	12040 <strlen>
    58a0:	4601      	mov	r1, r0
    58a2:	4628      	mov	r0, r5
    58a4:	f009 fcd2 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58a8:	4819      	ldr	r0, [pc, #100]	; (5910 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    58aa:	f007 f947 	bl	cb3c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    58ae:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    58b2:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    58b6:	b15b      	cbz	r3, 58d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    58b8:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    58ba:	4619      	mov	r1, r3
    58bc:	462a      	mov	r2, r5
    58be:	2301      	movs	r3, #1
    58c0:	9080      	str	r0, [sp, #512]	; 0x200
    58c2:	a880      	add	r0, sp, #512	; 0x200
    58c4:	f002 fc04 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    58c8:	b9c0      	cbnz	r0, 58fc <MTPStorage_SD::removeFile(unsigned long, char*)+0x228>
    58ca:	af08      	add	r7, sp, #32
    58cc:	4e0e      	ldr	r6, [pc, #56]	; (5908 <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    58ce:	e7b0      	b.n	5832 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    58d0:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    58d4:	2900      	cmp	r1, #0
    58d6:	d0f8      	beq.n	58ca <MTPStorage_SD::removeFile(unsigned long, char*)+0x1f6>
    58d8:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    58da:	462a      	mov	r2, r5
    58dc:	2301      	movs	r3, #1
    58de:	a880      	add	r0, sp, #512	; 0x200
    58e0:	af08      	add	r7, sp, #32
    58e2:	4e09      	ldr	r6, [pc, #36]	; (5908 <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    58e4:	f001 f944 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    58e8:	2800      	cmp	r0, #0
    58ea:	d0a2      	beq.n	5832 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    58ec:	a880      	add	r0, sp, #512	; 0x200
    58ee:	f001 f9a3 	bl	6c38 <ExFatFile::remove()>
    58f2:	e79e      	b.n	5832 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    58f4:	a82c      	add	r0, sp, #176	; 0xb0
    58f6:	f002 fe3f 	bl	8578 <FatFile::rmdir()>
    58fa:	e796      	b.n	582a <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    58fc:	a880      	add	r0, sp, #512	; 0x200
    58fe:	af08      	add	r7, sp, #32
    5900:	4e01      	ldr	r6, [pc, #4]	; (5908 <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    5902:	f003 fc45 	bl	9190 <FatFile::remove()>
    5906:	e794      	b.n	5832 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    5908:	20000b7c 	.word	0x20000b7c
    590c:	20000ca4 	.word	0x20000ca4
    5910:	20008abc 	.word	0x20008abc
    5914:	20000ad4 	.word	0x20000ad4

00005918 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    5918:	b570      	push	{r4, r5, r6, lr}
    591a:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
    591e:	4604      	mov	r4, r0
    5920:	460d      	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    5922:	f44f 7380 	mov.w	r3, #256	; 0x100
    5926:	aa44      	add	r2, sp, #272	; 0x110
    5928:	f7ff fc44 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    592c:	462a      	mov	r2, r5
    592e:	4621      	mov	r1, r4
    5930:	a884      	add	r0, sp, #528	; 0x210
    5932:	f7ff fb7d 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    5936:	aa44      	add	r2, sp, #272	; 0x110
    5938:	f8bd 121e 	ldrh.w	r1, [sp, #542]	; 0x21e
    593c:	4620      	mov	r0, r4
    593e:	f7ff fec9 	bl	56d4 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    5942:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    5944:	aa84      	add	r2, sp, #528	; 0x210
    5946:	4629      	mov	r1, r5
    5948:	4620      	mov	r0, r4
    r.name[0]=0;
    594a:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    594e:	f7ff facf 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    5952:	9a84      	ldr	r2, [sp, #528]	; 0x210
    5954:	4621      	mov	r1, r4
    5956:	a8c8      	add	r0, sp, #800	; 0x320
    5958:	f7ff fb6a 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    595c:	9ec9      	ldr	r6, [sp, #804]	; 0x324
    595e:	42b5      	cmp	r5, r6
    5960:	d025      	beq.n	59ae <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x96>
      Record x = ReadIndexRecord(is);
    5962:	4632      	mov	r2, r6
    5964:	4621      	mov	r1, r4
    5966:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    596a:	f7ff fb61 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    596e:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    5972:	4295      	cmp	r5, r2
    5974:	d00f      	beq.n	5996 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x7e>
    5976:	4621      	mov	r1, r4
    5978:	4668      	mov	r0, sp
    597a:	4616      	mov	r6, r2
    597c:	f7ff fb58 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    5980:	f44f 7288 	mov.w	r2, #272	; 0x110
    5984:	4669      	mov	r1, sp
    5986:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    598a:	f007 fedf 	bl	d74c <memcpy>
    598e:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    5992:	4295      	cmp	r5, r2
    5994:	d1ef      	bne.n	5976 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      x.sibling = r.sibling;
    5996:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    5998:	f50d 6286 	add.w	r2, sp, #1072	; 0x430
    599c:	4631      	mov	r1, r6
    599e:	4620      	mov	r0, r4
      x.sibling = r.sibling;
    59a0:	f8cd 3438 	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    59a4:	f7ff faa4 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    59a8:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    59ac:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    59ae:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    59b0:	aac8      	add	r2, sp, #800	; 0x320
    59b2:	9984      	ldr	r1, [sp, #528]	; 0x210
    59b4:	4620      	mov	r0, r4
      t.child = r.sibling;
    59b6:	93c9      	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    59b8:	f7ff fa9a 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    59bc:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    59c0:	bd70      	pop	{r4, r5, r6, pc}
    59c2:	bf00      	nop

000059c4 <MTPStorage_SD::DeleteObject(unsigned long)>:
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    59c4:	1c4a      	adds	r2, r1, #1
    59c6:	d004      	beq.n	59d2 <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
  {
    59c8:	b508      	push	{r3, lr}
    59ca:	f7ff ffa5 	bl	5918 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    59ce:	2001      	movs	r0, #1
    59d0:	bd08      	pop	{r3, pc}
    59d2:	2001      	movs	r0, #1
    59d4:	4770      	bx	lr
    59d6:	bf00      	nop

000059d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    59d8:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    59da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    59de:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    59e2:	4605      	mov	r5, r0
    59e4:	461e      	mov	r6, r3
    59e6:	6d49      	ldr	r1, [r1, #84]	; 0x54
    59e8:	2300      	movs	r3, #0
    59ea:	4668      	mov	r0, sp
    59ec:	f004 fa58 	bl	9ea0 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    59f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    59f2:	2b00      	cmp	r3, #0
    59f4:	f000 8082 	beq.w	5afc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    59f8:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    59fc:	f240 2302 	movw	r3, #514	; 0x202
    5a00:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    5a04:	a814      	add	r0, sp, #80	; 0x50
    5a06:	6d69      	ldr	r1, [r5, #84]	; 0x54
    5a08:	f004 fa4a 	bl	9ea0 <FsVolume::open(char const*, int)>
    5a0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d07f      	beq.n	5b12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    5a12:	f04f 34ff 	mov.w	r4, #4294967295
    5a16:	e006      	b.n	5a26 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    5a18:	4622      	mov	r2, r4
    5a1a:	a928      	add	r1, sp, #160	; 0xa0
    5a1c:	f002 ff2a 	bl	8874 <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    5a20:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    5a24:	db1e      	blt.n	5a64 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    5a26:	9812      	ldr	r0, [sp, #72]	; 0x48
    5a28:	2800      	cmp	r0, #0
    5a2a:	d03c      	beq.n	5aa6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    5a2c:	7803      	ldrb	r3, [r0, #0]
    5a2e:	071a      	lsls	r2, r3, #28
    5a30:	d521      	bpl.n	5a76 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    5a32:	69c2      	ldr	r2, [r0, #28]
    5a34:	6943      	ldr	r3, [r0, #20]
    5a36:	429a      	cmp	r2, r3
    5a38:	d01d      	beq.n	5a76 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    5a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5a3e:	a928      	add	r1, sp, #160	; 0xa0
    5a40:	f002 fb9a 	bl	8178 <FatFile::read(void*, unsigned int)>
    5a44:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    5a46:	2c00      	cmp	r4, #0
    5a48:	db4a      	blt.n	5ae0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    5a4a:	9826      	ldr	r0, [sp, #152]	; 0x98
    5a4c:	2800      	cmp	r0, #0
    5a4e:	d1e3      	bne.n	5a18 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    5a50:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    5a52:	2800      	cmp	r0, #0
    5a54:	d0e4      	beq.n	5a20 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    5a56:	4622      	mov	r2, r4
    5a58:	a928      	add	r1, sp, #160	; 0xa0
    5a5a:	f001 fbfb 	bl	7254 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    5a5e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    5a62:	dae0      	bge.n	5a26 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    5a64:	ad04      	add	r5, sp, #16
  f2.close();
    5a66:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    5a68:	4628      	mov	r0, r5
    5a6a:	f004 f8ff 	bl	9c6c <FsBaseFile::close()>
  f2.close();
    5a6e:	4630      	mov	r0, r6
    5a70:	f004 f8fc 	bl	9c6c <FsBaseFile::close()>
    5a74:	e009      	b.n	5a8a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    5a76:	ad04      	add	r5, sp, #16
  f2.close();
    5a78:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    5a7a:	4628      	mov	r0, r5
    5a7c:	f004 f8f6 	bl	9c6c <FsBaseFile::close()>
  f2.close();
    5a80:	4630      	mov	r0, r6
    5a82:	f004 f8f3 	bl	9c6c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    5a86:	3401      	adds	r4, #1
    5a88:	d032      	beq.n	5af0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    5a8a:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    5a8c:	4630      	mov	r0, r6
    5a8e:	4e28      	ldr	r6, [pc, #160]	; (5b30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    5a90:	9614      	str	r6, [sp, #80]	; 0x50
    5a92:	f004 f8eb 	bl	9c6c <FsBaseFile::close()>
    5a96:	4628      	mov	r0, r5
    5a98:	9600      	str	r6, [sp, #0]
    5a9a:	f004 f8e7 	bl	9c6c <FsBaseFile::close()>
}
    5a9e:	4620      	mov	r0, r4
    5aa0:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    5aa4:	bd70      	pop	{r4, r5, r6, pc}
    5aa6:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d0e4      	beq.n	5a76 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    5aac:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    5ab0:	071b      	lsls	r3, r3, #28
    5ab2:	d5e0      	bpl.n	5a76 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    5ab4:	6903      	ldr	r3, [r0, #16]
    5ab6:	6801      	ldr	r1, [r0, #0]
    5ab8:	6942      	ldr	r2, [r0, #20]
    5aba:	1a5b      	subs	r3, r3, r1
    5abc:	6845      	ldr	r5, [r0, #4]
    5abe:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    5ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5ac6:	f172 0200 	sbcs.w	r2, r2, #0
    5aca:	d201      	bcs.n	5ad0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    5acc:	2b00      	cmp	r3, #0
    5ace:	d0d2      	beq.n	5a76 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    5ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    5ad4:	a928      	add	r1, sp, #160	; 0xa0
    5ad6:	f000 fca7 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    5ada:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    5adc:	2c00      	cmp	r4, #0
    5ade:	dab4      	bge.n	5a4a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    5ae0:	ad04      	add	r5, sp, #16
  f2.close();
    5ae2:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    5ae4:	4628      	mov	r0, r5
    5ae6:	f004 f8c1 	bl	9c6c <FsBaseFile::close()>
  f2.close();
    5aea:	4630      	mov	r0, r6
    5aec:	f004 f8be 	bl	9c6c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    5af0:	f44f 702b 	mov.w	r0, #684	; 0x2ac
    5af4:	2400      	movs	r4, #0
    5af6:	f7ff f87d 	bl	4bf4 <dbgPrint(unsigned short)>
    5afa:	e7c7      	b.n	5a8c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    5afc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    5afe:	2c00      	cmp	r4, #0
    5b00:	f47f af7a 	bne.w	59f8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    5b04:	f240 209d 	movw	r0, #669	; 0x29d
    5b08:	ad04      	add	r5, sp, #16
    5b0a:	4e09      	ldr	r6, [pc, #36]	; (5b30 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    5b0c:	f7ff f872 	bl	4bf4 <dbgPrint(unsigned short)>
    5b10:	e7c1      	b.n	5a96 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    5b12:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    5b14:	2c00      	cmp	r4, #0
    5b16:	f47f af7c 	bne.w	5a12 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    5b1a:	ad04      	add	r5, sp, #16
    5b1c:	ae18      	add	r6, sp, #96	; 0x60
    5b1e:	4628      	mov	r0, r5
    5b20:	f004 f8a4 	bl	9c6c <FsBaseFile::close()>
    5b24:	f44f 7028 	mov.w	r0, #672	; 0x2a0
    5b28:	f7ff f864 	bl	4bf4 <dbgPrint(unsigned short)>
    5b2c:	e7ae      	b.n	5a8c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    5b2e:	bf00      	nop
    5b30:	20000b7c 	.word	0x20000b7c

00005b34 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    5b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b38:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    5b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5b40:	bf14      	ite	ne
    5b42:	461f      	movne	r7, r3
    5b44:	4617      	moveq	r7, r2
  { 
    5b46:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    5b48:	460a      	mov	r2, r1
  { 
    5b4a:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    5b4c:	4601      	mov	r1, r0
    5b4e:	a882      	add	r0, sp, #520	; 0x208
    5b50:	f7ff fa6e 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    5b54:	463a      	mov	r2, r7
    5b56:	4621      	mov	r1, r4
    5b58:	a8c6      	add	r0, sp, #792	; 0x318
    5b5a:	f7ff fa69 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    5b5e:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    5b62:	f1b8 0f00 	cmp.w	r8, #0
    5b66:	d022      	beq.n	5bae <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x7a>
      ScanDir(p1.store+1,handle);
    5b68:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    5b6c:	4632      	mov	r2, r6
    5b6e:	4620      	mov	r0, r4
    5b70:	3101      	adds	r1, #1
    5b72:	f7ff fcaf 	bl	54d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    5b76:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    5b7a:	6821      	ldr	r1, [r4, #0]
    5b7c:	a886      	add	r0, sp, #536	; 0x218
    5b7e:	3b00      	subs	r3, #0
    5b80:	463a      	mov	r2, r7
    5b82:	9000      	str	r0, [sp, #0]
    5b84:	4620      	mov	r0, r4
    5b86:	bf18      	it	ne
    5b88:	2301      	movne	r3, #1
    5b8a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
    5b8c:	f8bd 1326 	ldrh.w	r1, [sp, #806]	; 0x326
    5b90:	47a8      	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    5b92:	6823      	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    5b94:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    5b96:	4631      	mov	r1, r6
    5b98:	f8bd 2326 	ldrh.w	r2, [sp, #806]	; 0x326
    5b9c:	4620      	mov	r0, r4
    5b9e:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    5ba0:	462b      	mov	r3, r5
    5ba2:	47b0      	blx	r6
  }
    5ba4:	4628      	mov	r0, r5
    5ba6:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    5baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    5bae:	a986      	add	r1, sp, #536	; 0x218
    5bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bb4:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
    5bb8:	f00b fedc 	bl	11974 <strlcpy>
  { uint32_t new_record = index_entries_++;
    5bbc:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5bc0:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
    5bc4:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    5bc6:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    5bc8:	4629      	mov	r1, r5
      r.parent = newParent;
    5bca:	f8cd 7428 	str.w	r7, [sp, #1064]	; 0x428
  { uint32_t new_record = index_entries_++;
    5bce:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      r.store = p2.store;
    5bd2:	f8bd 3326 	ldrh.w	r3, [sp, #806]	; 0x326
      r.child = 0;
    5bd6:	f8cd 842c 	str.w	r8, [sp, #1068]	; 0x42c
      r.store = p2.store;
    5bda:	f8ad 3436 	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    5bde:	9bc7      	ldr	r3, [sp, #796]	; 0x31c
      r.isdir = 0;
    5be0:	f8ad 8434 	strh.w	r8, [sp, #1076]	; 0x434
      r.sibling = p2.child;
    5be4:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    WriteIndexRecord(new_record, r);
    5be8:	f7ff f982 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    5bec:	4639      	mov	r1, r7
    5bee:	aac6      	add	r2, sp, #792	; 0x318
    5bf0:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    5bf2:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    5bf4:	95c7      	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    5bf6:	f7ff f97b 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    5bfa:	4631      	mov	r1, r6
    5bfc:	aa02      	add	r2, sp, #8
    5bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c02:	4620      	mov	r0, r4
    5c04:	f7ff fad6 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5c08:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    5c0a:	463a      	mov	r2, r7
    5c0c:	4629      	mov	r1, r5
    5c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c12:	4620      	mov	r0, r4
    5c14:	f7ff face 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    5c18:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    5c1a:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    5c1c:	4631      	mov	r1, r6
    5c1e:	1d20      	adds	r0, r4, #4
    5c20:	9700      	str	r7, [sp, #0]
    5c22:	f7ff fed9 	bl	59d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    5c26:	4628      	mov	r0, r5
    5c28:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    5c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005c30 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    5c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c34:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    5c38:	f1b3 3fff 	cmp.w	r3, #4294967295
    5c3c:	bf14      	ite	ne
    5c3e:	4698      	movne	r8, r3
    5c40:	4690      	moveq	r8, r2
{ // assume handle and newHandle point to existing directories
    5c42:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    5c44:	460a      	mov	r2, r1
    5c46:	4601      	mov	r1, r0
    5c48:	a890      	add	r0, sp, #576	; 0x240
    5c4a:	f7ff f9f1 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    5c4e:	4642      	mov	r2, r8
    5c50:	4621      	mov	r1, r4
    5c52:	a8d4      	add	r0, sp, #848	; 0x350
  Record p1=ReadIndexRecord(handle);
    5c54:	f8bd 724e 	ldrh.w	r7, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    5c58:	f7ff f9ea 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    5c5c:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    5c5e:	2e00      	cmp	r6, #0
    5c60:	f000 8082 	beq.w	5d68 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x138>
  uint32_t iy= 0;
    5c64:	2500      	movs	r5, #0
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    5c66:	f104 0904 	add.w	r9, r4, #4
    5c6a:	e025      	b.n	5cb8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
      sd_mkdir(py.store,newfilename);
    5c6c:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
  FatFile() {}
    5c70:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    5c74:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    5c76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5c7a:	6d99      	ldr	r1, [r3, #88]	; 0x58
    5c7c:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    5c7e:	f8d1 0480 	ldr.w	r0, [r1, #1152]	; 0x480
    5c82:	2800      	cmp	r0, #0
    5c84:	d063      	beq.n	5d4e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x11e>
    5c86:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    5c8a:	a802      	add	r0, sp, #8
    5c8c:	f8cd c008 	str.w	ip, [sp, #8]
    5c90:	f002 f926 	bl	7ee0 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    5c94:	4632      	mov	r2, r6
    5c96:	4639      	mov	r1, r7
    5c98:	4620      	mov	r0, r4
    5c9a:	f7ff fc1b 	bl	54d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    5c9e:	6821      	ldr	r1, [r4, #0]
    5ca0:	462b      	mov	r3, r5
    5ca2:	f8bd 235e 	ldrh.w	r2, [sp, #862]	; 0x35e
    5ca6:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
    5caa:	4620      	mov	r0, r4
    5cac:	4631      	mov	r1, r6
    5cae:	47d0      	blx	sl
    ix = px.sibling;
    5cb0:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    5cb4:	2e00      	cmp	r6, #0
    5cb6:	d03f      	beq.n	5d38 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    Record px = ReadIndexRecord(ix) ;
    5cb8:	4632      	mov	r2, r6
    5cba:	4621      	mov	r1, r4
    5cbc:	f50d 608c 	add.w	r0, sp, #1120	; 0x460
    5cc0:	f7ff f9b6 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    5cc4:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
    5cc8:	f44f 7288 	mov.w	r2, #272	; 0x110
    5ccc:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    5cd0:	f007 fd3c 	bl	d74c <memcpy>
    py.sibling = iy;
    5cd4:	f8cd 5578 	str.w	r5, [sp, #1400]	; 0x578
  { uint32_t new_record = index_entries_++;
    5cd8:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5cdc:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
    py.store = p2.store;
    5ce0:	f8bd 135e 	ldrh.w	r1, [sp, #862]	; 0x35e
    WriteIndexRecord(new_record, r);
    5ce4:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    5ce6:	1c6b      	adds	r3, r5, #1
    py.parent = newHandle;
    5ce8:	f8cd 8570 	str.w	r8, [sp, #1392]	; 0x570
    py.store = p2.store;
    5cec:	f8ad 157e 	strh.w	r1, [sp, #1406]	; 0x57e
    WriteIndexRecord(new_record, r);
    5cf0:	4629      	mov	r1, r5
  { uint32_t new_record = index_entries_++;
    5cf2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    5cf6:	f7ff f8fb 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    5cfa:	4631      	mov	r1, r6
    5cfc:	aa10      	add	r2, sp, #64	; 0x40
    5cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d02:	4620      	mov	r0, r4
    5d04:	f7ff fa56 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    5d08:	aa50      	add	r2, sp, #320	; 0x140
    5d0a:	4629      	mov	r1, r5
    5d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d10:	4620      	mov	r0, r4
    5d12:	f7ff fa4f 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    5d16:	f89d 357c 	ldrb.w	r3, [sp, #1404]	; 0x57c
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    5d1a:	aa10      	add	r2, sp, #64	; 0x40
    5d1c:	4639      	mov	r1, r7
    5d1e:	4648      	mov	r0, r9
    if(py.isdir) 
    5d20:	2b00      	cmp	r3, #0
    5d22:	d1a3      	bne.n	5c6c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    5d24:	ae50      	add	r6, sp, #320	; 0x140
    5d26:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
    5d2a:	9600      	str	r6, [sp, #0]
    5d2c:	f7ff fe54 	bl	59d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    ix = px.sibling;
    5d30:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    5d34:	2e00      	cmp	r6, #0
    5d36:	d1bf      	bne.n	5cb8 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
  WriteIndexRecord(newHandle,p2);
    5d38:	4620      	mov	r0, r4
    5d3a:	aad4      	add	r2, sp, #848	; 0x350
    5d3c:	4641      	mov	r1, r8
  p2.child=iy;
    5d3e:	95d5      	str	r5, [sp, #852]	; 0x354
  WriteIndexRecord(newHandle,p2);
    5d40:	f7ff f8d6 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    5d44:	2001      	movs	r0, #1
    5d46:	f50d 6dd0 	add.w	sp, sp, #1664	; 0x680
    5d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d4e:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5d52:	2900      	cmp	r1, #0
    5d54:	d09e      	beq.n	5c94 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  ExFatFile() {}
    5d56:	900e      	str	r0, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    5d58:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5d5c:	a802      	add	r0, sp, #8
    5d5e:	2301      	movs	r3, #1
    5d60:	aa50      	add	r2, sp, #320	; 0x140
    5d62:	f001 f999 	bl	7098 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5d66:	e795      	b.n	5c94 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  uint32_t iy= 0;
    5d68:	4635      	mov	r5, r6
    5d6a:	e7e5      	b.n	5d38 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>

00005d6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    5d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d70:	461d      	mov	r5, r3
    5d72:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    5d76:	b08e      	sub	sp, #56	; 0x38
    5d78:	460e      	mov	r6, r1
    5d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    5d7c:	4604      	mov	r4, r0
    5d7e:	4690      	mov	r8, r2
    5d80:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    5d82:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    5d86:	b199      	cbz	r1, 5db0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    5d88:	2300      	movs	r3, #0
    5d8a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5d8e:	463a      	mov	r2, r7
    5d90:	4668      	mov	r0, sp
    5d92:	9300      	str	r3, [sp, #0]
    5d94:	2301      	movs	r3, #1
    5d96:	f002 f8a3 	bl	7ee0 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    5d9a:	b1b0      	cbz	r0, 5dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    5d9c:	462b      	mov	r3, r5
    5d9e:	4642      	mov	r2, r8
    5da0:	4631      	mov	r1, r6
    5da2:	4620      	mov	r0, r4
    5da4:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    5da6:	b00e      	add	sp, #56	; 0x38
    5da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5dac:	f000 b816 	b.w	5ddc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    5db0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5db4:	b14b      	cbz	r3, 5dca <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    5db6:	910c      	str	r1, [sp, #48]	; 0x30
    5db8:	463a      	mov	r2, r7
    5dba:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    5dbe:	4668      	mov	r0, sp
    5dc0:	2301      	movs	r3, #1
    5dc2:	f001 f969 	bl	7098 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5dc6:	2800      	cmp	r0, #0
    5dc8:	d1e8      	bne.n	5d9c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    5dca:	f240 20b6 	movw	r0, #694	; 0x2b6
    5dce:	f7fe ff11 	bl	4bf4 <dbgPrint(unsigned short)>
}
    5dd2:	2000      	movs	r0, #0
    5dd4:	b00e      	add	sp, #56	; 0x38
    5dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dda:	bf00      	nop

00005ddc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    5ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5de0:	461f      	mov	r7, r3
    5de2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    5de6:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    5dea:	460d      	mov	r5, r1
    5dec:	4619      	mov	r1, r3
    5dee:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,FILE_READ);
    5df0:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5df2:	a812      	add	r0, sp, #72	; 0x48
    5df4:	2300      	movs	r3, #0
    5df6:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    5df8:	4616      	mov	r6, r2
    5dfa:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    5dfe:	f004 f84f 	bl	9ea0 <FsVolume::open(char const*, int)>
    5e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
    5e04:	2b00      	cmp	r3, #0
    5e06:	f000 8101 	beq.w	600c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    5e0a:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    5e0e:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6054 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    5e12:	f8df b244 	ldr.w	fp, [pc, #580]	; 6058 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    5e16:	e01b      	b.n	5e50 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    5e18:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e1c:	a97a      	add	r1, sp, #488	; 0x1e8
    5e1e:	f003 fb45 	bl	94ac <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    5e22:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    5e24:	2b00      	cmp	r3, #0
    5e26:	d067      	beq.n	5ef8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    5e28:	781b      	ldrb	r3, [r3, #0]
    5e2a:	f013 0f70 	tst.w	r3, #112	; 0x70
    5e2e:	d06a      	beq.n	5f06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5e30:	ab7a      	add	r3, sp, #488	; 0x1e8
    5e32:	aa3a      	add	r2, sp, #232	; 0xe8
    5e34:	4629      	mov	r1, r5
    5e36:	4620      	mov	r0, r4
    5e38:	9300      	str	r3, [sp, #0]
    5e3a:	463b      	mov	r3, r7
    5e3c:	f7ff ff96 	bl	5d6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    5e40:	2800      	cmp	r0, #0
    5e42:	f000 80f6 	beq.w	6032 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    5e46:	a82a      	add	r0, sp, #168	; 0xa8
    5e48:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5e4c:	f003 ff0e 	bl	9c6c <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    5e50:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e54:	4631      	mov	r1, r6
    5e56:	a83a      	add	r0, sp, #232	; 0xe8
    5e58:	f00b fd8c 	bl	11974 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    5e5c:	a83a      	add	r0, sp, #232	; 0xe8
    5e5e:	f00c f8ef 	bl	12040 <strlen>
    5e62:	ab3a      	add	r3, sp, #232	; 0xe8
    5e64:	4418      	add	r0, r3
    5e66:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5e6a:	2b2f      	cmp	r3, #47	; 0x2f
    5e6c:	d005      	beq.n	5e7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    5e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e72:	4659      	mov	r1, fp
    5e74:	a83a      	add	r0, sp, #232	; 0xe8
    5e76:	f00b fd49 	bl	1190c <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    5e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e7e:	4651      	mov	r1, sl
    5e80:	a87a      	add	r0, sp, #488	; 0x1e8
    5e82:	f00b fd77 	bl	11974 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    5e86:	a87a      	add	r0, sp, #488	; 0x1e8
    5e88:	f00c f8da 	bl	12040 <strlen>
    5e8c:	ab7a      	add	r3, sp, #488	; 0x1e8
    5e8e:	4418      	add	r0, r3
    5e90:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5e94:	2b2f      	cmp	r3, #47	; 0x2f
    5e96:	d005      	beq.n	5ea4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    5e98:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e9c:	4659      	mov	r1, fp
    5e9e:	a87a      	add	r0, sp, #488	; 0x1e8
    5ea0:	f00b fd34 	bl	1190c <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5ea4:	4b69      	ldr	r3, [pc, #420]	; (604c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    5ea6:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    5ea8:	4641      	mov	r1, r8
    5eaa:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5eac:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5eb2:	9227      	str	r2, [sp, #156]	; 0x9c
    5eb4:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    5eb8:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    5eba:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    5ebe:	f003 ff41 	bl	9d44 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5ec2:	9838      	ldr	r0, [sp, #224]	; 0xe0
    5ec4:	2200      	movs	r2, #0
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d055      	beq.n	5f76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    5eca:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    5ece:	a93a      	add	r1, sp, #232	; 0xe8
    5ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ed4:	f003 faea 	bl	94ac <FatFile::getName(char*, unsigned int)>
    *name = 0;
    5ed8:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    5eda:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    5edc:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    5ee0:	2800      	cmp	r0, #0
    5ee2:	d199      	bne.n	5e18 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    5ee4:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    5ee6:	b170      	cbz	r0, 5f06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    5ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
    5eec:	a97a      	add	r1, sp, #488	; 0x1e8
    5eee:	f001 fb17 	bl	7520 <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    5ef2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d197      	bne.n	5e28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    5ef8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    5efa:	b123      	cbz	r3, 5f06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    5efc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    5f00:	f013 0f50 	tst.w	r3, #80	; 0x50
    5f04:	d194      	bne.n	5e30 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    5f06:	ab7a      	add	r3, sp, #488	; 0x1e8
    5f08:	aa3a      	add	r2, sp, #232	; 0xe8
    5f0a:	4629      	mov	r1, r5
    5f0c:	4620      	mov	r0, r4
    5f0e:	9300      	str	r3, [sp, #0]
    5f10:	463b      	mov	r3, r7
    5f12:	f7ff fd61 	bl	59d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    5f16:	2800      	cmp	r0, #0
    5f18:	f000 8086 	beq.w	6028 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    5f1c:	a83a      	add	r0, sp, #232	; 0xe8
    5f1e:	f00c f88f 	bl	12040 <strlen>
    5f22:	4601      	mov	r1, r0
    5f24:	a83a      	add	r0, sp, #232	; 0xe8
    5f26:	f009 f991 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f2a:	4849      	ldr	r0, [pc, #292]	; (6050 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    5f2c:	f006 fe06 	bl	cb3c <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5f30:	9b02      	ldr	r3, [sp, #8]
    5f32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    5f34:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5f38:	b343      	cbz	r3, 5f8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5f3a:	4619      	mov	r1, r3
    5f3c:	2300      	movs	r3, #0
    5f3e:	aa3a      	add	r2, sp, #232	; 0xe8
    5f40:	a804      	add	r0, sp, #16
    5f42:	9304      	str	r3, [sp, #16]
    5f44:	2301      	movs	r3, #1
    5f46:	f002 f8c3 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    5f4a:	2800      	cmp	r0, #0
    5f4c:	d157      	bne.n	5ffe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    5f4e:	f240 20d2 	movw	r0, #722	; 0x2d2
    5f52:	f7fe fe4f 	bl	4bf4 <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    5f56:	a82a      	add	r0, sp, #168	; 0xa8
    5f58:	2400      	movs	r4, #0
    5f5a:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5f5e:	f003 fe85 	bl	9c6c <FsBaseFile::close()>
    5f62:	4640      	mov	r0, r8
    5f64:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    5f68:	f003 fe80 	bl	9c6c <FsBaseFile::close()>
}
    5f6c:	4620      	mov	r0, r4
    5f6e:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    5f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5f76:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    5f78:	b1db      	cbz	r3, 5fb2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    5f7a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    5f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f82:	4618      	mov	r0, r3
    5f84:	a93a      	add	r1, sp, #232	; 0xe8
    5f86:	f001 facb 	bl	7520 <ExFatFile::getName8(char*, unsigned int)>
    5f8a:	e7a5      	b.n	5ed8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    5f8c:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5f90:	2900      	cmp	r1, #0
    5f92:	d0dc      	beq.n	5f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    5f94:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5f96:	aa3a      	add	r2, sp, #232	; 0xe8
    5f98:	2301      	movs	r3, #1
    5f9a:	a804      	add	r0, sp, #16
    5f9c:	f000 fde8 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5fa0:	2800      	cmp	r0, #0
    5fa2:	d0d4      	beq.n	5f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    5fa4:	a804      	add	r0, sp, #16
    5fa6:	f000 fe47 	bl	6c38 <ExFatFile::remove()>
    5faa:	2800      	cmp	r0, #0
    5fac:	f47f af4b 	bne.w	5e46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    5fb0:	e7cd      	b.n	5f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    5fb2:	a82a      	add	r0, sp, #168	; 0xa8
    5fb4:	9303      	str	r3, [sp, #12]
    5fb6:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    5fba:	f003 fe57 	bl	9c6c <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    5fbe:	9b02      	ldr	r3, [sp, #8]
    5fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    5fc2:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    5fc6:	b170      	cbz	r0, 5fe6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    5fc8:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5fca:	4601      	mov	r1, r0
    5fcc:	4632      	mov	r2, r6
    5fce:	a826      	add	r0, sp, #152	; 0x98
    5fd0:	9326      	str	r3, [sp, #152]	; 0x98
    5fd2:	f002 f87d 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    5fd6:	4604      	mov	r4, r0
    5fd8:	2800      	cmp	r0, #0
    5fda:	d0c2      	beq.n	5f62 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    5fdc:	a826      	add	r0, sp, #152	; 0x98
    5fde:	f002 facb 	bl	8578 <FatFile::rmdir()>
    5fe2:	4604      	mov	r4, r0
    5fe4:	e7bd      	b.n	5f62 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    5fe6:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    5fea:	b131      	cbz	r1, 5ffa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    5fec:	4603      	mov	r3, r0
    5fee:	9032      	str	r0, [sp, #200]	; 0xc8
    5ff0:	4632      	mov	r2, r6
    5ff2:	a826      	add	r0, sp, #152	; 0x98
    5ff4:	f000 fdbc 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5ff8:	bb00      	cbnz	r0, 603c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    5ffa:	2400      	movs	r4, #0
    5ffc:	e7b1      	b.n	5f62 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5ffe:	a804      	add	r0, sp, #16
    6000:	f003 f8c6 	bl	9190 <FatFile::remove()>
    6004:	2800      	cmp	r0, #0
    6006:	f47f af1e 	bne.w	5e46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    600a:	e7a0      	b.n	5f4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    600c:	9925      	ldr	r1, [sp, #148]	; 0x94
    600e:	2900      	cmp	r1, #0
    6010:	f47f aefb 	bne.w	5e0a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6014:	f240 20b9 	movw	r0, #697	; 0x2b9
    6018:	460c      	mov	r4, r1
    601a:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    601e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6054 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    6022:	f7fe fde7 	bl	4bf4 <dbgPrint(unsigned short)>
    6026:	e79c      	b.n	5f62 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6028:	f240 20d1 	movw	r0, #721	; 0x2d1
    602c:	f7fe fde2 	bl	4bf4 <dbgPrint(unsigned short)>
    6030:	e791      	b.n	5f56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6032:	f240 20cd 	movw	r0, #717	; 0x2cd
    6036:	f7fe fddd 	bl	4bf4 <dbgPrint(unsigned short)>
    603a:	e78c      	b.n	5f56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    603c:	a826      	add	r0, sp, #152	; 0x98
    603e:	f000 fe55 	bl	6cec <ExFatFile::rmdir()>
    6042:	4604      	mov	r4, r0
    6044:	2800      	cmp	r0, #0
    6046:	d0d8      	beq.n	5ffa <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    6048:	e78b      	b.n	5f62 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    604a:	bf00      	nop
    604c:	20000ca4 	.word	0x20000ca4
    6050:	20008abc 	.word	0x20008abc
    6054:	20000b7c 	.word	0x20000b7c
    6058:	20000adc 	.word	0x20000adc

0000605c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    605c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6060:	460d      	mov	r5, r1
    6062:	f6ad 2dcc 	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    6066:	f1b3 3fff 	cmp.w	r3, #4294967295
    606a:	bf14      	ite	ne
    606c:	461f      	movne	r7, r3
    606e:	4617      	moveq	r7, r2
  { 
    6070:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6072:	4601      	mov	r1, r0
    6074:	462a      	mov	r2, r5
    6076:	a8d6      	add	r0, sp, #856	; 0x358
    6078:	f7fe ffda 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    607c:	463a      	mov	r2, r7
    607e:	4621      	mov	r1, r4
    6080:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
    6084:	f7fe ffd4 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    6088:	9ad6      	ldr	r2, [sp, #856]	; 0x358
    608a:	4621      	mov	r1, r4
    608c:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    6090:	f7fe ffce 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    6094:	f89d 3364 	ldrb.w	r3, [sp, #868]	; 0x364
    6098:	b123      	cbz	r3, 60a4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    609a:	f89d 3365 	ldrb.w	r3, [sp, #869]	; 0x365
    609e:	2b00      	cmp	r3, #0
    60a0:	f000 80f2 	beq.w	6288 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    60a4:	f44f 7288 	mov.w	r2, #272	; 0x110
    60a8:	a9d6      	add	r1, sp, #856	; 0x358
    60aa:	f50d 60d1 	add.w	r0, sp, #1672	; 0x688
    60ae:	f007 fb4d 	bl	d74c <memcpy>
    Record p2o = p2;
    60b2:	f44f 7288 	mov.w	r2, #272	; 0x110
    60b6:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
    60ba:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    60be:	f007 fb45 	bl	d74c <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    60c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    60c6:	aa56      	add	r2, sp, #344	; 0x158
    60c8:	4629      	mov	r1, r5
    60ca:	4620      	mov	r0, r4
    60cc:	f7ff f872 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    60d0:	f8dd 657c 	ldr.w	r6, [sp, #1404]	; 0x57c
    60d4:	42ae      	cmp	r6, r5
    60d6:	f000 8096 	beq.w	6206 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    60da:	4632      	mov	r2, r6
    60dc:	4621      	mov	r1, r4
    60de:	a804      	add	r0, sp, #16
    60e0:	f7fe ffa6 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    60e4:	f44f 7288 	mov.w	r2, #272	; 0x110
    60e8:	a904      	add	r1, sp, #16
    60ea:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    60ee:	f007 fb2d 	bl	d74c <memcpy>
        pxo = px;
    60f2:	f44f 7288 	mov.w	r2, #272	; 0x110
    60f6:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    60fa:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    60fe:	f007 fb25 	bl	d74c <memcpy>
        while(handle != px.sibling)
    6102:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    6106:	4295      	cmp	r5, r2
    6108:	d017      	beq.n	613a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    610a:	4621      	mov	r1, r4
    610c:	a804      	add	r0, sp, #16
    610e:	4616      	mov	r6, r2
    6110:	f7fe ff8e 	bl	5030 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6114:	f44f 7288 	mov.w	r2, #272	; 0x110
    6118:	a904      	add	r1, sp, #16
    611a:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    611e:	f007 fb15 	bl	d74c <memcpy>
          pxo = px;
    6122:	f44f 7288 	mov.w	r2, #272	; 0x110
    6126:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    612a:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    612e:	f007 fb0d 	bl	d74c <memcpy>
        while(handle != px.sibling)
    6132:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    6136:	42aa      	cmp	r2, r5
    6138:	d1e7      	bne.n	610a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    613a:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(jx, px);
    613c:	f60d 12b8 	addw	r2, sp, #2488	; 0x9b8
    6140:	4631      	mov	r1, r6
    6142:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    6144:	f8cd 39c0 	str.w	r3, [sp, #2496]	; 0x9c0
        WriteIndexRecord(jx, px);
    6148:	f7fe fed2 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    614c:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    6150:	aad6      	add	r2, sp, #856	; 0x358
    6152:	4629      	mov	r1, r5
    6154:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    6156:	93d8      	str	r3, [sp, #864]	; 0x360
      p1.store = p2.store;
    6158:	f8bd 3476 	ldrh.w	r3, [sp, #1142]	; 0x476
      p1.parent = newParent;
    615c:	97d6      	str	r7, [sp, #856]	; 0x358
      p1.store = p2.store;
    615e:	f8ad 3366 	strh.w	r3, [sp, #870]	; 0x366
      p2.child = handle;
    6162:	f8cd 546c 	str.w	r5, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    6166:	f7fe fec3 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    616a:	f50d 628d 	add.w	r2, sp, #1128	; 0x468
    616e:	4639      	mov	r1, r7
    6170:	4620      	mov	r0, r4
    6172:	f7fe febd 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6176:	f44f 7380 	mov.w	r3, #256	; 0x100
    617a:	4629      	mov	r1, r5
    617c:	aa96      	add	r2, sp, #600	; 0x258
    617e:	4620      	mov	r0, r4
    6180:	f7ff f818 	bl	51b4 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    6184:	f8bd 1696 	ldrh.w	r1, [sp, #1686]	; 0x696
    6188:	f8bd 37a6 	ldrh.w	r3, [sp, #1958]	; 0x7a6
    618c:	4299      	cmp	r1, r3
    618e:	d046      	beq.n	621e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6190:	aa96      	add	r2, sp, #600	; 0x258
    else if(!p1o.isdir)
    6192:	f89d 9694 	ldrb.w	r9, [sp, #1684]	; 0x694
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6196:	1d20      	adds	r0, r4, #4
    6198:	9200      	str	r2, [sp, #0]
    619a:	aa56      	add	r2, sp, #344	; 0x158
    else if(!p1o.isdir)
    619c:	f1b9 0f00 	cmp.w	r9, #0
    61a0:	d00b      	beq.n	61ba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    61a2:	f7ff fde3 	bl	5d6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    61a6:	2800      	cmp	r0, #0
    61a8:	f000 8092 	beq.w	62d0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    61ac:	f04f 0801 	mov.w	r8, #1
  }
    61b0:	4640      	mov	r0, r8
    61b2:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    61b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    61ba:	f7ff fc0d 	bl	59d8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    61be:	4680      	mov	r8, r0
    61c0:	2800      	cmp	r0, #0
    61c2:	d044      	beq.n	624e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    61c4:	f8bd 57a6 	ldrh.w	r5, [sp, #1958]	; 0x7a6
							  return write((const uint8_t *)str, strlen(str)); }
    61c8:	a856      	add	r0, sp, #344	; 0x158
    61ca:	f00b ff39 	bl	12040 <strlen>
    61ce:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    61d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    61d4:	a856      	add	r0, sp, #344	; 0x158
    61d6:	f009 f839 	bl	f24c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    61da:	484d      	ldr	r0, [pc, #308]	; (6310 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    61dc:	f006 fcae 	bl	cb3c <Print::println()>
    61e0:	6daa      	ldr	r2, [r5, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    61e2:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    61e6:	2b00      	cmp	r3, #0
    61e8:	d077      	beq.n	62da <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    61ea:	4619      	mov	r1, r3
    61ec:	aa56      	add	r2, sp, #344	; 0x158
    61ee:	2301      	movs	r3, #1
    61f0:	a848      	add	r0, sp, #288	; 0x120
    61f2:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
    61f6:	f001 ff6b 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    61fa:	2800      	cmp	r0, #0
    61fc:	d0d8      	beq.n	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    61fe:	a848      	add	r0, sp, #288	; 0x120
    6200:	f002 ffc6 	bl	9190 <FatFile::remove()>
    6204:	e7d4      	b.n	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    6206:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(p1.parent, p3);    
    6208:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    620c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    620e:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    6210:	f8cd 357c 	str.w	r3, [sp, #1404]	; 0x57c
    uint32_t jx=-1;
    6214:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    6218:	f7fe fe6a 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    621c:	e796      	b.n	614c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    621e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    6222:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    6224:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6228:	2b00      	cmp	r3, #0
    622a:	d039      	beq.n	62a0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    622c:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6230:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6232:	aa56      	add	r2, sp, #344	; 0x158
    6234:	a848      	add	r0, sp, #288	; 0x120
    6236:	9103      	str	r1, [sp, #12]
    6238:	9348      	str	r3, [sp, #288]	; 0x120
    623a:	f001 fec7 	bl	7fcc <FatFile::open(FatFile*, char const*, int)>
    623e:	9903      	ldr	r1, [sp, #12]
    6240:	2800      	cmp	r0, #0
    6242:	d15c      	bne.n	62fe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6244:	f240 202e 	movw	r0, #558	; 0x22e
    6248:	f7fe fcd4 	bl	4bf4 <dbgPrint(unsigned short)>
    624c:	e003      	b.n	6256 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    624e:	f240 2032 	movw	r0, #562	; 0x232
    6252:	f7fe fccf 	bl	4bf4 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6256:	4631      	mov	r1, r6
    6258:	f60d 02a8 	addw	r2, sp, #2216	; 0x8a8
    625c:	4620      	mov	r0, r4
    return false;
    625e:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6262:	f7fe fe45 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    6266:	f50d 62d1 	add.w	r2, sp, #1672	; 0x688
    626a:	4629      	mov	r1, r5
    626c:	4620      	mov	r0, r4
    626e:	f7fe fe3f 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    6272:	4620      	mov	r0, r4
    6274:	f50d 62f3 	add.w	r2, sp, #1944	; 0x798
    6278:	4639      	mov	r1, r7
    627a:	f7fe fe39 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    627e:	4640      	mov	r0, r8
    6280:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    6284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    6288:	462a      	mov	r2, r5
    628a:	f8bd 1366 	ldrh.w	r1, [sp, #870]	; 0x366
    628e:	4620      	mov	r0, r4
    6290:	f7ff f920 	bl	54d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    6294:	aad6      	add	r2, sp, #856	; 0x358
    6296:	4629      	mov	r1, r5
    6298:	4620      	mov	r0, r4
    629a:	f7fe fe29 	bl	4ef0 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    629e:	e701      	b.n	60a4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    62a0:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    62a4:	2900      	cmp	r1, #0
    62a6:	d0cd      	beq.n	6244 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    62a8:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    62ac:	aa56      	add	r2, sp, #344	; 0x158
    62ae:	a848      	add	r0, sp, #288	; 0x120
    62b0:	9354      	str	r3, [sp, #336]	; 0x150
    62b2:	9103      	str	r1, [sp, #12]
    62b4:	f000 fbe0 	bl	6a78 <ExFatFile::open(ExFatFile*, char const*, int)>
    62b8:	9903      	ldr	r1, [sp, #12]
    62ba:	2800      	cmp	r0, #0
    62bc:	d0c2      	beq.n	6244 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    62be:	aa96      	add	r2, sp, #600	; 0x258
    62c0:	a848      	add	r0, sp, #288	; 0x120
    62c2:	f000 fe67 	bl	6f94 <ExFatFile::rename(ExFatFile*, char const*)>
    62c6:	4680      	mov	r8, r0
    62c8:	2800      	cmp	r0, #0
    62ca:	f47f af71 	bne.w	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    62ce:	e7b9      	b.n	6244 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    62d0:	f240 2036 	movw	r0, #566	; 0x236
    62d4:	f7fe fc8e 	bl	4bf4 <dbgPrint(unsigned short)>
    62d8:	e7bd      	b.n	6256 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    62da:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    62de:	2900      	cmp	r1, #0
    62e0:	f43f af64 	beq.w	61ac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    62e4:	9354      	str	r3, [sp, #336]	; 0x150
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    62e6:	aa56      	add	r2, sp, #344	; 0x158
    62e8:	2301      	movs	r3, #1
    62ea:	a848      	add	r0, sp, #288	; 0x120
    62ec:	f000 fc40 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    62f0:	2800      	cmp	r0, #0
    62f2:	f43f af5d 	beq.w	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    62f6:	a848      	add	r0, sp, #288	; 0x120
    62f8:	f000 fc9e 	bl	6c38 <ExFatFile::remove()>
    62fc:	e758      	b.n	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    62fe:	aa96      	add	r2, sp, #600	; 0x258
    6300:	a848      	add	r0, sp, #288	; 0x120
    6302:	f002 f843 	bl	838c <FatFile::rename(FatFile*, char const*)>
    6306:	4680      	mov	r8, r0
    6308:	2800      	cmp	r0, #0
    630a:	f47f af51 	bne.w	61b0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    630e:	e799      	b.n	6244 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6310:	20008abc 	.word	0x20008abc

00006314 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6314:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    6316:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    631a:	b084      	sub	sp, #16
    631c:	468c      	mov	ip, r1
    631e:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    6320:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6322:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    6324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6328:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    632c:	ea4f 124c 	mov.w	r2, ip, lsl #5
    6330:	4629      	mov	r1, r5
    6332:	6a20      	ldr	r0, [r4, #32]
    6334:	f001 fa88 	bl	7848 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6338:	2801      	cmp	r0, #1
    633a:	d106      	bne.n	634a <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    633c:	4632      	mov	r2, r6
    633e:	4629      	mov	r1, r5
    6340:	6a20      	ldr	r0, [r4, #32]
    6342:	f001 fa65 	bl	7810 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    6346:	b004      	add	sp, #16
    6348:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    634a:	2000      	movs	r0, #0
}
    634c:	b004      	add	sp, #16
    634e:	bd70      	pop	{r4, r5, r6, pc}

00006350 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    6350:	b510      	push	{r4, lr}
    6352:	4604      	mov	r4, r0
  bool rtn = sync();
    6354:	f000 fd96 	bl	6e84 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6358:	2300      	movs	r3, #0
    635a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    635e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    6362:	bd10      	pop	{r4, pc}

00006364 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    6364:	b538      	push	{r3, r4, r5, lr}
    6366:	460d      	mov	r5, r1
  if (isOpen()) {
    6368:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    636c:	b109      	cbz	r1, 6372 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    636e:	2000      	movs	r0, #0
}
    6370:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    6372:	2238      	movs	r2, #56	; 0x38
    6374:	4604      	mov	r4, r0
    6376:	f00b fa77 	bl	11868 <memset>
  m_flags = FILE_FLAG_READ;
    637a:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    637c:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    637e:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    6380:	4618      	mov	r0, r3
    6382:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    6386:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    638a:	bd38      	pop	{r3, r4, r5, pc}

0000638c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    638c:	b4f0      	push	{r4, r5, r6, r7}
    638e:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    6390:	7809      	ldrb	r1, [r1, #0]
    6392:	2920      	cmp	r1, #32
    6394:	d103      	bne.n	639e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    6396:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    639a:	2c20      	cmp	r4, #32
    639c:	d0fb      	beq.n	6396 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    639e:	6015      	str	r5, [r2, #0]
  fname->end = path;
    63a0:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    63a2:	782c      	ldrb	r4, [r5, #0]
    63a4:	2c2f      	cmp	r4, #47	; 0x2f
    63a6:	d011      	beq.n	63cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    63a8:	b184      	cbz	r4, 63cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    63aa:	1c6e      	adds	r6, r5, #1
    63ac:	2c3c      	cmp	r4, #60	; 0x3c
    63ae:	4f1d      	ldr	r7, [pc, #116]	; (6424 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    63b0:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    63b2:	d82a      	bhi.n	640a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    63b4:	2c21      	cmp	r4, #33	; 0x21
    63b6:	d812      	bhi.n	63de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    63b8:	f104 3cff 	add.w	ip, r4, #4294967295
    63bc:	f1bc 0f1e 	cmp.w	ip, #30
    63c0:	d816      	bhi.n	63f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    63c2:	2000      	movs	r0, #0
    63c4:	bcf0      	pop	{r4, r5, r6, r7}
    63c6:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    63c8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    63cc:	2c20      	cmp	r4, #32
    63ce:	d0fb      	beq.n	63c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    63d0:	2c2f      	cmp	r4, #47	; 0x2f
    63d2:	d0f9      	beq.n	63c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    63d4:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    63d6:	4611      	mov	r1, r2
}
    63d8:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    63da:	f001 b907 	b.w	75ec <ExFatFile::hashName(ExName_t*)>
    63de:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    63e2:	fa5f fc8c 	uxtb.w	ip, ip
    63e6:	fa27 fc0c 	lsr.w	ip, r7, ip
    63ea:	f01c 0f01 	tst.w	ip, #1
    63ee:	d1e8      	bne.n	63c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    63f0:	2c2e      	cmp	r4, #46	; 0x2e
    63f2:	d001      	beq.n	63f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    63f4:	2c20      	cmp	r4, #32
    63f6:	d10d      	bne.n	6414 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    63f8:	f816 4b01 	ldrb.w	r4, [r6], #1
    63fc:	2c00      	cmp	r4, #0
    63fe:	d0e5      	beq.n	63cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6400:	2c2f      	cmp	r4, #47	; 0x2f
    6402:	d0e3      	beq.n	63cc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    6404:	2c3c      	cmp	r4, #60	; 0x3c
    6406:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    6408:	d9d4      	bls.n	63b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    640a:	2c5c      	cmp	r4, #92	; 0x5c
    640c:	d0d9      	beq.n	63c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    640e:	d903      	bls.n	6418 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    6410:	2c7c      	cmp	r4, #124	; 0x7c
    6412:	d0d6      	beq.n	63c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    6414:	6096      	str	r6, [r2, #8]
    6416:	e7ef      	b.n	63f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6418:	3c3e      	subs	r4, #62	; 0x3e
    641a:	2c01      	cmp	r4, #1
    641c:	d8fa      	bhi.n	6414 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    641e:	2000      	movs	r0, #0
    6420:	bcf0      	pop	{r4, r5, r6, r7}
    6422:	4770      	bx	lr
    6424:	05002101 	.word	0x05002101

00006428 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    6428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    642c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6430:	b083      	sub	sp, #12
    6432:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    6434:	07dc      	lsls	r4, r3, #31
    6436:	d574      	bpl.n	6522 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    6438:	0658      	lsls	r0, r3, #25
    643a:	460f      	mov	r7, r1
    643c:	4690      	mov	r8, r2
    643e:	f140 80b0 	bpl.w	65a2 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    6442:	e9d5 2300 	ldrd	r2, r3, [r5]
    6446:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    644a:	eb18 0402 	adds.w	r4, r8, r2
    644e:	f143 0300 	adc.w	r3, r3, #0
    6452:	42a1      	cmp	r1, r4
    6454:	eb70 0303 	sbcs.w	r3, r0, r3
    6458:	f0c0 80a9 	bcc.w	65ae <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    645c:	f1b8 0f00 	cmp.w	r8, #0
    6460:	d05b      	beq.n	651a <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    6462:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6464:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    6468:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    646c:	f8d5 a020 	ldr.w	sl, [r5, #32]
    6470:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    6474:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6476:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    647a:	2c00      	cmp	r4, #0
    647c:	d170      	bne.n	6560 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    647e:	4313      	orrs	r3, r2
    6480:	d170      	bne.n	6564 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6482:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6486:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6488:	bf4c      	ite	mi
    648a:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    648e:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    6490:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    6492:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    6496:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    6498:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    649c:	0a63      	lsrs	r3, r4, #9
    649e:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    64a0:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    64a4:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    64a6:	f1bb 0f00 	cmp.w	fp, #0
    64aa:	d145      	bne.n	6538 <ExFatFile::read(void*, unsigned int)+0x110>
    64ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    64b0:	d342      	bcc.n	6538 <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    64b2:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    64b6:	4291      	cmp	r1, r2
    64b8:	d03e      	beq.n	6538 <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    64ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    64be:	d358      	bcc.n	6572 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    64c0:	f04f 0b01 	mov.w	fp, #1
    64c4:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    64c8:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    64cc:	0a73      	lsrs	r3, r6, #9
    64ce:	459b      	cmp	fp, r3
    64d0:	bf28      	it	cs
    64d2:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    64d4:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    64d6:	ea4f 244b 	mov.w	r4, fp, lsl #9
    64da:	d80a      	bhi.n	64f2 <ExFatFile::read(void*, unsigned int)+0xca>
    64dc:	eb01 030b 	add.w	r3, r1, fp
    64e0:	429a      	cmp	r2, r3
    64e2:	d206      	bcs.n	64f2 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    64e4:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    64e8:	9101      	str	r1, [sp, #4]
    64ea:	f005 fda3 	bl	c034 <FsCache::sync()>
    64ee:	9901      	ldr	r1, [sp, #4]
    64f0:	b1b8      	cbz	r0, 6522 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    64f2:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    64f6:	465b      	mov	r3, fp
    64f8:	6802      	ldr	r2, [r0, #0]
    64fa:	f8d2 a014 	ldr.w	sl, [r2, #20]
    64fe:	463a      	mov	r2, r7
    6500:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6502:	b170      	cbz	r0, 6522 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    6504:	4623      	mov	r3, r4
    dst += n;
    6506:	4427      	add	r7, r4
    m_curPosition += n;
    6508:	e9d5 1200 	ldrd	r1, r2, [r5]
    650c:	185b      	adds	r3, r3, r1
    650e:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    6512:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    6514:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    6518:	d1a8      	bne.n	646c <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    651a:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    651c:	b003      	add	sp, #12
    651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    6522:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    6526:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    652a:	f043 0302 	orr.w	r3, r3, #2
    652e:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    6532:	b003      	add	sp, #12
    6534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    6538:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    653c:	2200      	movs	r2, #0
    653e:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    6542:	42b4      	cmp	r4, r6
    6544:	bf28      	it	cs
    6546:	4634      	movcs	r4, r6
    6548:	f005 fda0 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    654c:	2800      	cmp	r0, #0
    654e:	d0e8      	beq.n	6522 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6550:	eb00 010b 	add.w	r1, r0, fp
    6554:	4622      	mov	r2, r4
    6556:	4638      	mov	r0, r7
    6558:	f007 f8f8 	bl	d74c <memcpy>
    m_curPosition += n;
    655c:	4623      	mov	r3, r4
    655e:	e7d2      	b.n	6506 <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    6560:	69aa      	ldr	r2, [r5, #24]
    6562:	e796      	b.n	6492 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    6564:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    6568:	065b      	lsls	r3, r3, #25
    656a:	d50e      	bpl.n	658a <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    656c:	69aa      	ldr	r2, [r5, #24]
    656e:	3201      	adds	r2, #1
    6570:	e78e      	b.n	6490 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    6572:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    6576:	463a      	mov	r2, r7
    6578:	6803      	ldr	r3, [r0, #0]
    657a:	691b      	ldr	r3, [r3, #16]
    657c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    657e:	2800      	cmp	r0, #0
    6580:	d0cf      	beq.n	6522 <ExFatFile::read(void*, unsigned int)+0xfa>
    6582:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    6586:	461c      	mov	r4, r3
    6588:	e7bd      	b.n	6506 <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    658a:	464a      	mov	r2, r9
    658c:	4650      	mov	r0, sl
    658e:	69a9      	ldr	r1, [r5, #24]
    6590:	f001 f99c 	bl	78cc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    6594:	2800      	cmp	r0, #0
    6596:	dbc4      	blt.n	6522 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    6598:	d00c      	beq.n	65b4 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    659a:	f8d5 a020 	ldr.w	sl, [r5, #32]
    659e:	69aa      	ldr	r2, [r5, #24]
    65a0:	e777      	b.n	6492 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    65a2:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    65a6:	0719      	lsls	r1, r3, #28
    65a8:	f57f af58 	bpl.w	645c <ExFatFile::read(void*, unsigned int)+0x34>
    65ac:	e749      	b.n	6442 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    65ae:	eba1 0802 	sub.w	r8, r1, r2
    65b2:	e753      	b.n	645c <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    65b4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    65b8:	f013 0f50 	tst.w	r3, #80	; 0x50
    65bc:	d0b1      	beq.n	6522 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    65be:	eba8 0806 	sub.w	r8, r8, r6
    65c2:	4640      	mov	r0, r8
    65c4:	e7aa      	b.n	651c <ExFatFile::read(void*, unsigned int)+0xf4>
    65c6:	bf00      	nop

000065c8 <ExFatFile::peek()>:
int ExFatFile::peek() {
    65c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    65ca:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    65cc:	2201      	movs	r2, #1
    65ce:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    65d0:	6985      	ldr	r5, [r0, #24]
    65d2:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    65d6:	e9d0 6700 	ldrd	r6, r7, [r0]
    65da:	f7ff ff25 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    65de:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    65e0:	61a5      	str	r5, [r4, #24]
    65e2:	bf0c      	ite	eq
    65e4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    65e8:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    65ec:	e9c4 6700 	strd	r6, r7, [r4]
}
    65f0:	b003      	add	sp, #12
    65f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000065f4 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    65f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    65f8:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    65fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    65fe:	b083      	sub	sp, #12
    6600:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6602:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    6606:	2b00      	cmp	r3, #0
    6608:	d051      	beq.n	66ae <ExFatFile::seekSet(unsigned long long)+0xba>
    660a:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    660c:	e9d0 1c00 	ldrd	r1, ip, [r0]
    6610:	45bc      	cmp	ip, r7
    6612:	bf08      	it	eq
    6614:	4291      	cmpeq	r1, r2
    6616:	d05c      	beq.n	66d2 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    6618:	ea56 0207 	orrs.w	r2, r6, r7
    661c:	d04d      	beq.n	66ba <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    661e:	071d      	lsls	r5, r3, #28
    6620:	d504      	bpl.n	662c <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    6622:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    6626:	42b0      	cmp	r0, r6
    6628:	41ba      	sbcs	r2, r7
    662a:	d340      	bcc.n	66ae <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    662c:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    6630:	1e75      	subs	r5, r6, #1
    6632:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    6636:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    6638:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    663c:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    6640:	3209      	adds	r2, #9
    6642:	b2d2      	uxtb	r2, r2
    6644:	f1c2 0e20 	rsb	lr, r2, #32
    6648:	40d5      	lsrs	r5, r2
    664a:	f1a2 0920 	sub.w	r9, r2, #32
    664e:	fa00 fb0e 	lsl.w	fp, r0, lr
    6652:	fa20 f009 	lsr.w	r0, r0, r9
    6656:	ea45 050b 	orr.w	r5, r5, fp
    665a:	4305      	orrs	r5, r0
  if (isContiguous()) {
    665c:	9801      	ldr	r0, [sp, #4]
    665e:	0640      	lsls	r0, r0, #25
    6660:	d433      	bmi.n	66ca <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    6662:	1e48      	subs	r0, r1, #1
    6664:	fa20 f202 	lsr.w	r2, r0, r2
    6668:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    666c:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    6670:	fa00 fe0e 	lsl.w	lr, r0, lr
    6674:	fa20 f009 	lsr.w	r0, r0, r9
    6678:	ea42 020e 	orr.w	r2, r2, lr
    667c:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    6680:	d001      	beq.n	6686 <ExFatFile::seekSet(unsigned long long)+0x92>
    6682:	4295      	cmp	r5, r2
    6684:	d229      	bcs.n	66da <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6686:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6688:	bf4c      	ite	mi
    668a:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    668e:	69e3      	ldrpl	r3, [r4, #28]
    6690:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6692:	f104 0918 	add.w	r9, r4, #24
    6696:	e006      	b.n	66a6 <ExFatFile::seekSet(unsigned long long)+0xb2>
    6698:	69a1      	ldr	r1, [r4, #24]
    669a:	3d01      	subs	r5, #1
    669c:	6a20      	ldr	r0, [r4, #32]
    669e:	f001 f915 	bl	78cc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    66a2:	2800      	cmp	r0, #0
    66a4:	dd03      	ble.n	66ae <ExFatFile::seekSet(unsigned long long)+0xba>
    66a6:	464a      	mov	r2, r9
  while (nNew--) {
    66a8:	2d00      	cmp	r5, #0
    66aa:	d1f5      	bne.n	6698 <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    66ac:	e007      	b.n	66be <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    66ae:	2000      	movs	r0, #0
  m_curCluster = tmp;
    66b0:	f8c4 8018 	str.w	r8, [r4, #24]
}
    66b4:	b003      	add	sp, #12
    66b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    66ba:	2300      	movs	r3, #0
    66bc:	6183      	str	r3, [r0, #24]
  return true;
    66be:	2001      	movs	r0, #1
  m_curPosition = pos;
    66c0:	e9c4 6700 	strd	r6, r7, [r4]
}
    66c4:	b003      	add	sp, #12
    66c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    66ca:	69e3      	ldr	r3, [r4, #28]
    66cc:	442b      	add	r3, r5
    66ce:	61a3      	str	r3, [r4, #24]
    goto done;
    66d0:	e7f5      	b.n	66be <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    66d2:	2001      	movs	r0, #1
}
    66d4:	b003      	add	sp, #12
    66d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    66da:	1aad      	subs	r5, r5, r2
    66dc:	e7d9      	b.n	6692 <ExFatFile::seekSet(unsigned long long)+0x9e>
    66de:	bf00      	nop

000066e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    66e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66e4:	4617      	mov	r7, r2
    66e6:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    66ea:	b08f      	sub	sp, #60	; 0x3c
    66ec:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    66ee:	2a00      	cmp	r2, #0
    66f0:	f040 80d7 	bne.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    66f4:	468b      	mov	fp, r1
    66f6:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    66fa:	f011 0f50 	tst.w	r1, #80	; 0x50
    66fe:	f000 80d0 	beq.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    6702:	f003 0103 	and.w	r1, r3, #3
    6706:	469a      	mov	sl, r3
    6708:	2903      	cmp	r1, #3
    670a:	f000 80ca 	beq.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    670e:	3101      	adds	r1, #1
    6710:	f003 0008 	and.w	r0, r3, #8
    6714:	ea41 0300 	orr.w	r3, r1, r0
    6718:	9302      	str	r3, [sp, #8]
  if (fname) {
    671a:	2f00      	cmp	r7, #0
    671c:	f000 80cb 	beq.w	68b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    6720:	6939      	ldr	r1, [r7, #16]
    6722:	f101 080e 	add.w	r8, r1, #14
    6726:	49b6      	ldr	r1, [pc, #728]	; (6a00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    6728:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    672c:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    6730:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    6734:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    6736:	f108 0802 	add.w	r8, r8, #2
    673a:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    673e:	d005      	beq.n	674c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    6740:	2000      	movs	r0, #0
    6742:	2100      	movs	r1, #0
    m_curCluster = 0;
    6744:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    6748:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    674c:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    674e:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    6750:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6756:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    6758:	2220      	movs	r2, #32
    675a:	a906      	add	r1, sp, #24
    675c:	4658      	mov	r0, fp
    675e:	f7ff fe63 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6762:	b300      	cbz	r0, 67a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    6764:	2820      	cmp	r0, #32
    6766:	f040 809c 	bne.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    676a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    676e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    6772:	2a00      	cmp	r2, #0
    6774:	f2c0 80a2 	blt.w	68bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    6778:	b934      	cbnz	r4, 6788 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    677a:	f8db 2000 	ldr.w	r2, [fp]
    677e:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    6782:	f8db 2018 	ldr.w	r2, [fp, #24]
    6786:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    6788:	4544      	cmp	r4, r8
    678a:	d201      	bcs.n	6790 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    678c:	3401      	adds	r4, #1
    678e:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    6790:	2b00      	cmp	r3, #0
    6792:	f000 8113 	beq.w	69bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    6796:	2220      	movs	r2, #32
    6798:	a906      	add	r1, sp, #24
    679a:	4658      	mov	r0, fp
      inSet = false;
    679c:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    679e:	f7ff fe43 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    67a2:	2800      	cmp	r0, #0
    67a4:	d1de      	bne.n	6764 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    67a6:	f41a 7f00 	tst.w	sl, #512	; 0x200
    67aa:	d07a      	beq.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    67ac:	9b02      	ldr	r3, [sp, #8]
    67ae:	079b      	lsls	r3, r3, #30
    67b0:	d577      	bpl.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    67b2:	2f00      	cmp	r7, #0
    67b4:	d075      	beq.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    67b6:	4544      	cmp	r4, r8
    67b8:	d217      	bcs.n	67ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    67ba:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    67be:	2220      	movs	r2, #32
    67c0:	a906      	add	r1, sp, #24
    67c2:	4658      	mov	r0, fp
    67c4:	f7ff fe30 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    67c8:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    67ca:	2800      	cmp	r0, #0
    67cc:	d061      	beq.n	6892 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    67ce:	2820      	cmp	r0, #32
    67d0:	d167      	bne.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    67d2:	b92c      	cbnz	r4, 67e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    67d4:	f8db 2000 	ldr.w	r2, [fp]
    67d8:	f8db a018 	ldr.w	sl, [fp, #24]
    67dc:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    67e0:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    67e2:	45a0      	cmp	r8, r4
    67e4:	d8eb      	bhi.n	67be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    67e6:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    67ea:	2238      	movs	r2, #56	; 0x38
    67ec:	2100      	movs	r1, #0
    67ee:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    67f0:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    67f4:	f00b f838 	bl	11868 <memset>
  ExFatVolume* volume() const {return m_vol;}
    67f8:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    67fc:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    6800:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    6802:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    6804:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    6806:	2600      	movs	r6, #0
  m_dirPos = freePos;
    6808:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    680c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    6810:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    6812:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    6816:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    6818:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    681a:	f1b8 0f00 	cmp.w	r8, #0
    681e:	d033      	beq.n	6888 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    6820:	f108 39ff 	add.w	r9, r8, #4294967295
    6824:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    6826:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 6a04 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    682a:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    682e:	2201      	movs	r2, #1
    6830:	4659      	mov	r1, fp
    6832:	4628      	mov	r0, r5
    6834:	f7ff fd6e 	bl	6314 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    6838:	4604      	mov	r4, r0
    683a:	b390      	cbz	r0, 68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    683c:	f990 2000 	ldrsb.w	r2, [r0]
    6840:	2a00      	cmp	r2, #0
    6842:	db2e      	blt.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    6844:	2220      	movs	r2, #32
    6846:	2100      	movs	r1, #0
    6848:	f00b f80e 	bl	11868 <memset>
    if (i == 0) {
    684c:	2e00      	cmp	r6, #0
    684e:	f000 80bc 	beq.w	69ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    6852:	f1bb 0f01 	cmp.w	fp, #1
    6856:	f000 80d7 	beq.w	6a08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    685a:	23c1      	movs	r3, #193	; 0xc1
    685c:	46a3      	mov	fp, r4
    685e:	341e      	adds	r4, #30
    6860:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    6864:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    6866:	4638      	mov	r0, r7
    6868:	b91b      	cbnz	r3, 6872 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    686a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    686e:	429a      	cmp	r2, r3
    6870:	d005      	beq.n	687e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    6872:	f005 fc33 	bl	c0dc <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6876:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    687a:	45a3      	cmp	fp, r4
    687c:	d1f2      	bne.n	6864 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    687e:	3601      	adds	r6, #1
    6880:	fa5f fb86 	uxtb.w	fp, r6
    6884:	45d8      	cmp	r8, fp
    6886:	d8d2      	bhi.n	682e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    6888:	4628      	mov	r0, r5
    688a:	f000 fafb 	bl	6e84 <ExFatFile::sync()>
    688e:	4606      	mov	r6, r0
    6890:	e00d      	b.n	68ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    6892:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    6894:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    6898:	f000 fb24 	bl	6ee4 <ExFatFile::addDirCluster()>
    689c:	2800      	cmp	r0, #0
    689e:	f040 8091 	bne.w	69c4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    68a2:	2300      	movs	r3, #0
  return false;
    68a4:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    68a6:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    68aa:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    68ae:	4630      	mov	r0, r6
    68b0:	b00f      	add	sp, #60	; 0x3c
    68b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    68b6:	f04f 0803 	mov.w	r8, #3
    68ba:	e747      	b.n	674c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    68bc:	bb56      	cbnz	r6, 6914 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    68be:	4544      	cmp	r4, r8
    68c0:	bf38      	it	cc
    68c2:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    68c4:	2b85      	cmp	r3, #133	; 0x85
    68c6:	f47f af47 	bne.w	6758 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    68ca:	4631      	mov	r1, r6
    68cc:	2238      	movs	r2, #56	; 0x38
    68ce:	4628      	mov	r0, r5
      inSet = true;
    68d0:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    68d2:	f00a ffc9 	bl	11868 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    68d6:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    68da:	f89d 3019 	ldrb.w	r3, [sp, #25]
    68de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    68e2:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    68e6:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    68e8:	bf58      	it	pl
    68ea:	f043 0308 	orrpl.w	r3, r3, #8
    68ee:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    68f2:	f8db 3000 	ldr.w	r3, [fp]
    68f6:	f8db 2020 	ldr.w	r2, [fp, #32]
    68fa:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    68fc:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    68fe:	f8db 2018 	ldr.w	r2, [fp, #24]
    6902:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6906:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    690a:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    690e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    6912:	e721      	b.n	6758 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6914:	2bc0      	cmp	r3, #192	; 0xc0
    6916:	d028      	beq.n	696a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    6918:	2bc1      	cmp	r3, #193	; 0xc1
    691a:	f47f af3c 	bne.w	6796 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    691e:	463a      	mov	r2, r7
    6920:	a906      	add	r1, sp, #24
    6922:	4628      	mov	r0, r5
    6924:	f000 fdd6 	bl	74d4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    6928:	b1e8      	cbz	r0, 6966 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    692a:	89bb      	ldrh	r3, [r7, #12]
    692c:	b9db      	cbnz	r3, 6966 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    692e:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    6932:	429a      	cmp	r2, r3
    6934:	d117      	bne.n	6966 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    6936:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    693a:	d1b2      	bne.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    693c:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    6940:	d170      	bne.n	6a24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    6942:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    6946:	0798      	lsls	r0, r3, #30
    6948:	d46c      	bmi.n	6a24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    694a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    694e:	d1a8      	bne.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6950:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    6954:	d0ab      	beq.n	68ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    6956:	4628      	mov	r0, r5
    6958:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    695c:	f7ff fe4a 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    6960:	2800      	cmp	r0, #0
    6962:	d1a4      	bne.n	68ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    6964:	e79d      	b.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    6966:	4606      	mov	r6, r0
    6968:	e6f6      	b.n	6758 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    696a:	9b02      	ldr	r3, [sp, #8]
    696c:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6970:	f89d 3019 	ldrb.w	r3, [sp, #25]
    6974:	079b      	lsls	r3, r3, #30
    6976:	d502      	bpl.n	697e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6978:	9b03      	ldr	r3, [sp, #12]
    697a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    697e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6980:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    6982:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    6986:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    698a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    698e:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    6992:	2f00      	cmp	r7, #0
    6994:	d0cf      	beq.n	6936 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    6996:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    699a:	693a      	ldr	r2, [r7, #16]
    699c:	81bb      	strh	r3, [r7, #12]
    next = begin;
    699e:	683b      	ldr	r3, [r7, #0]
    69a0:	607b      	str	r3, [r7, #4]
    69a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    69a6:	429a      	cmp	r2, r3
    69a8:	f47f aef5 	bne.w	6796 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    69ac:	8abe      	ldrh	r6, [r7, #20]
    69ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    69b2:	1af6      	subs	r6, r6, r3
    69b4:	fab6 f686 	clz	r6, r6
    69b8:	0976      	lsrs	r6, r6, #5
    69ba:	e6cd      	b.n	6758 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    69bc:	2f00      	cmp	r7, #0
    69be:	f47f aef2 	bne.w	67a6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    69c2:	e76e      	b.n	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    69c4:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    69c8:	e70b      	b.n	67e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    69ca:	2385      	movs	r3, #133	; 0x85
    69cc:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    69ce:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    69d2:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    69d6:	f8da 3000 	ldr.w	r3, [sl]
    69da:	2b00      	cmp	r3, #0
    69dc:	d046      	beq.n	6a6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    69de:	f10d 0213 	add.w	r2, sp, #19
    69e2:	f10d 0116 	add.w	r1, sp, #22
    69e6:	a805      	add	r0, sp, #20
    69e8:	4798      	blx	r3
    69ea:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    69ee:	8163      	strh	r3, [r4, #10]
    69f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    69f4:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    69f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
    69fa:	7523      	strb	r3, [r4, #20]
    69fc:	e73f      	b.n	687e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    69fe:	bf00      	nop
    6a00:	88888889 	.word	0x88888889
    6a04:	200284dc 	.word	0x200284dc
      dirStream->type = EXFAT_TYPE_STREAM;
    6a08:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    6a0a:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    6a0e:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6a10:	9b02      	ldr	r3, [sp, #8]
    6a12:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a16:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    6a1a:	693b      	ldr	r3, [r7, #16]
    6a1c:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    6a1e:	8abb      	ldrh	r3, [r7, #20]
    6a20:	80a3      	strh	r3, [r4, #4]
}
    6a22:	e72c      	b.n	687e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6a24:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    6a28:	06d9      	lsls	r1, r3, #27
    6a2a:	f53f af3a 	bmi.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    6a2e:	f013 0101 	ands.w	r1, r3, #1
    6a32:	f47f af36 	bne.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    6a36:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    6a3a:	d089      	beq.n	6950 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    6a3c:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    6a40:	0792      	lsls	r2, r2, #30
    6a42:	f57f af2e 	bpl.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    6a46:	2b00      	cmp	r3, #0
    6a48:	f43f af2b 	beq.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    6a4c:	e9d5 3200 	ldrd	r3, r2, [r5]
    6a50:	4313      	orrs	r3, r2
    6a52:	d004      	beq.n	6a5e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    6a54:	2200      	movs	r2, #0
    6a56:	2300      	movs	r3, #0
    m_curCluster = 0;
    6a58:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    6a5a:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    6a5e:	4628      	mov	r0, r5
    6a60:	f000 fb86 	bl	7170 <ExFatFile::truncate()>
    6a64:	2800      	cmp	r0, #0
    6a66:	f43f af1c 	beq.w	68a2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    6a6a:	e720      	b.n	68ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6a6c:	f645 0321 	movw	r3, #22561	; 0x5821
    6a70:	8163      	strh	r3, [r4, #10]
    6a72:	81e3      	strh	r3, [r4, #14]
    6a74:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    6a76:	e702      	b.n	687e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

00006a78 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    6a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    6a7c:	2500      	movs	r5, #0
    6a7e:	b097      	sub	sp, #92	; 0x5c
    6a80:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    6a82:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    6a86:	9201      	str	r2, [sp, #4]
    6a88:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    6a8a:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d13e      	bne.n	6b10 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    6a92:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6a96:	460f      	mov	r7, r1
    6a98:	f013 0f50 	tst.w	r3, #80	; 0x50
    6a9c:	d038      	beq.n	6b10 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    6a9e:	7813      	ldrb	r3, [r2, #0]
    6aa0:	4604      	mov	r4, r0
    6aa2:	4616      	mov	r6, r2
    6aa4:	2b2f      	cmp	r3, #47	; 0x2f
    6aa6:	d037      	beq.n	6b18 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6aa8:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    6aac:	ab01      	add	r3, sp, #4
    6aae:	aa02      	add	r2, sp, #8
    6ab0:	4631      	mov	r1, r6
    6ab2:	4620      	mov	r0, r4
    6ab4:	f7ff fc6a 	bl	638c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6ab8:	b350      	cbz	r0, 6b10 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    6aba:	9e01      	ldr	r6, [sp, #4]
    6abc:	7833      	ldrb	r3, [r6, #0]
    6abe:	2b00      	cmp	r3, #0
    6ac0:	d03e      	beq.n	6b40 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6ac2:	2300      	movs	r3, #0
    6ac4:	aa02      	add	r2, sp, #8
    6ac6:	4639      	mov	r1, r7
    6ac8:	4620      	mov	r0, r4
    6aca:	f7ff fe09 	bl	66e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6ace:	b1f8      	cbz	r0, 6b10 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    6ad0:	46a4      	mov	ip, r4
    6ad2:	ad08      	add	r5, sp, #32
    6ad4:	f104 0730 	add.w	r7, r4, #48	; 0x30
    6ad8:	f8dc 0000 	ldr.w	r0, [ip]
    6adc:	f10c 0c10 	add.w	ip, ip, #16
    6ae0:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6ae4:	46ae      	mov	lr, r5
    6ae6:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    6aea:	3510      	adds	r5, #16
    6aec:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6af0:	45bc      	cmp	ip, r7
    6af2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6af6:	d1ef      	bne.n	6ad8 <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    6af8:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    6afc:	af08      	add	r7, sp, #32
    tmpDir = *this;
    6afe:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    6b00:	4620      	mov	r0, r4
    6b02:	f000 f9bf 	bl	6e84 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6b06:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    6b0a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    6b0e:	e7cd      	b.n	6aac <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    6b10:	2000      	movs	r0, #0
}
    6b12:	b017      	add	sp, #92	; 0x5c
    6b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    6b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    6b1c:	292f      	cmp	r1, #47	; 0x2f
    6b1e:	d0fb      	beq.n	6b18 <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    6b20:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    6b22:	b9b1      	cbnz	r1, 6b52 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    6b24:	2238      	movs	r2, #56	; 0x38
    6b26:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    6b28:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    6b2a:	f00a fe9d 	bl	11868 <memset>
  m_flags = FILE_FLAG_READ;
    6b2e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    6b30:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    6b32:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    6b34:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    6b36:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    6b3a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    6b3e:	e7e8      	b.n	6b12 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    6b40:	464b      	mov	r3, r9
    6b42:	aa02      	add	r2, sp, #8
    6b44:	4639      	mov	r1, r7
    6b46:	4620      	mov	r0, r4
    6b48:	f7ff fdca 	bl	66e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    6b4c:	b017      	add	sp, #92	; 0x5c
    6b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    6b52:	2238      	movs	r2, #56	; 0x38
    6b54:	2100      	movs	r1, #0
    6b56:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6b58:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    6b5a:	f00a fe85 	bl	11868 <memset>
  m_flags = FILE_FLAG_READ;
    6b5e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    6b60:	af08      	add	r7, sp, #32
  m_vol = vol;
    6b62:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    6b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    6b68:	2340      	movs	r3, #64	; 0x40
    6b6a:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    6b6e:	e79b      	b.n	6aa8 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00006b70 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6b70:	b119      	cbz	r1, 6b7a <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    6b72:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6b76:	f7ff bf7f 	b.w	6a78 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    6b7a:	4608      	mov	r0, r1
    6b7c:	4770      	bx	lr
    6b7e:	bf00      	nop

00006b80 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6b80:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6b84:	b963      	cbnz	r3, 6ba0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    6b86:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    6b8a:	f013 0f50 	tst.w	r3, #80	; 0x50
    6b8e:	d007      	beq.n	6ba0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    6b90:	680b      	ldr	r3, [r1, #0]
    6b92:	f013 0c1f 	ands.w	ip, r3, #31
    6b96:	d103      	bne.n	6ba0 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    6b98:	4613      	mov	r3, r2
    6b9a:	4662      	mov	r2, ip
    6b9c:	f7ff bda0 	b.w	66e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    6ba0:	2000      	movs	r0, #0
    6ba2:	4770      	bx	lr

00006ba4 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6ba4:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    6ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ba8:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6baa:	6a00      	ldr	r0, [r0, #32]
    6bac:	b101      	cbz	r1, 6bb0 <ExFatFile::addCluster()+0xc>
    6bae:	3101      	adds	r1, #1
    6bb0:	2201      	movs	r2, #1
    6bb2:	f000 fd51 	bl	7658 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6bb6:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6bb8:	4605      	mov	r5, r0
  if (find < 2) {
    6bba:	d932      	bls.n	6c22 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6bbc:	2301      	movs	r3, #1
    6bbe:	4601      	mov	r1, r0
    6bc0:	6a20      	ldr	r0, [r4, #32]
    6bc2:	461a      	mov	r2, r3
    6bc4:	f000 fda8 	bl	7718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6bc8:	4606      	mov	r6, r0
    6bca:	b350      	cbz	r0, 6c22 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    6bcc:	69a3      	ldr	r3, [r4, #24]
    6bce:	b35b      	cbz	r3, 6c28 <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6bd0:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    6bd4:	0651      	lsls	r1, r2, #25
    6bd6:	d512      	bpl.n	6bfe <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    6bd8:	1c59      	adds	r1, r3, #1
    6bda:	42a9      	cmp	r1, r5
    6bdc:	d018      	beq.n	6c10 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6be2:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6be4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6be8:	e005      	b.n	6bf6 <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    6bea:	6a20      	ldr	r0, [r4, #32]
    6bec:	f000 fe90 	bl	7910 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bf0:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    6bf2:	b1b0      	cbz	r0, 6c22 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bf4:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6bf6:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bf8:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    6bfa:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bfc:	d3f5      	bcc.n	6bea <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6bfe:	f04f 32ff 	mov.w	r2, #4294967295
    6c02:	4629      	mov	r1, r5
    6c04:	6a20      	ldr	r0, [r4, #32]
    6c06:	f000 fe83 	bl	7910 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6c0a:	b150      	cbz	r0, 6c22 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    6c0c:	69a1      	ldr	r1, [r4, #24]
    6c0e:	b911      	cbnz	r1, 6c16 <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    6c10:	4630      	mov	r0, r6
  m_curCluster = find;
    6c12:	61a5      	str	r5, [r4, #24]
}
    6c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    6c16:	462a      	mov	r2, r5
    6c18:	6a20      	ldr	r0, [r4, #32]
    6c1a:	f000 fe79 	bl	7910 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6c1e:	2800      	cmp	r0, #0
    6c20:	d1f6      	bne.n	6c10 <ExFatFile::addCluster()+0x6c>
  return false;
    6c22:	2600      	movs	r6, #0
}
    6c24:	4630      	mov	r0, r6
    6c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6c28:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    6c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6c30:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    6c34:	e7ec      	b.n	6c10 <ExFatFile::addCluster()+0x6c>
    6c36:	bf00      	nop

00006c38 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6c38:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    6c3c:	079a      	lsls	r2, r3, #30
    6c3e:	d536      	bpl.n	6cae <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    6c40:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    6c42:	b570      	push	{r4, r5, r6, lr}
    6c44:	4605      	mov	r5, r0
  if (m_firstCluster) {
    6c46:	b9a1      	cbnz	r1, 6c72 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    6c48:	2400      	movs	r4, #0
    6c4a:	4621      	mov	r1, r4
    6c4c:	e007      	b.n	6c5e <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    6c4e:	7803      	ldrb	r3, [r0, #0]
    6c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c54:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6c56:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    6c5a:	428b      	cmp	r3, r1
    6c5c:	d329      	bcc.n	6cb2 <ExFatFile::remove()+0x7a>
    6c5e:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6c60:	2201      	movs	r2, #1
    6c62:	4628      	mov	r0, r5
    6c64:	f7ff fb56 	bl	6314 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6c68:	b2e1      	uxtb	r1, r4
    if (!cache) {
    6c6a:	2800      	cmp	r0, #0
    6c6c:	d1ef      	bne.n	6c4e <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    6c6e:	2000      	movs	r0, #0
    6c70:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    6c72:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6c74:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    6c76:	d534      	bpl.n	6ce2 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6c78:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6c7c:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    6c80:	3309      	adds	r3, #9
    6c82:	3a01      	subs	r2, #1
    6c84:	b2db      	uxtb	r3, r3
    6c86:	f144 34ff 	adc.w	r4, r4, #4294967295
    6c8a:	f1c3 0c20 	rsb	ip, r3, #32
    6c8e:	40da      	lsrs	r2, r3
    6c90:	3b20      	subs	r3, #32
    6c92:	fa04 fc0c 	lsl.w	ip, r4, ip
    6c96:	fa24 f303 	lsr.w	r3, r4, r3
    6c9a:	ea42 020c 	orr.w	r2, r2, ip
    6c9e:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6ca0:	2300      	movs	r3, #0
    6ca2:	3201      	adds	r2, #1
    6ca4:	f000 fd38 	bl	7718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6ca8:	2800      	cmp	r0, #0
    6caa:	d1cd      	bne.n	6c48 <ExFatFile::remove()+0x10>
    6cac:	e7df      	b.n	6c6e <ExFatFile::remove()+0x36>
}
    6cae:	2000      	movs	r0, #0
    6cb0:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    6cb2:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    6cb4:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6cb6:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6cba:	4620      	mov	r0, r4
  m_flags = 0;
    6cbc:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    6cc0:	f005 f9b8 	bl	c034 <FsCache::sync()>
    6cc4:	2800      	cmp	r0, #0
    6cc6:	d0d2      	beq.n	6c6e <ExFatFile::remove()+0x36>
    6cc8:	f504 7004 	add.w	r0, r4, #528	; 0x210
    6ccc:	f005 f9b2 	bl	c034 <FsCache::sync()>
    6cd0:	2800      	cmp	r0, #0
    6cd2:	d0cc      	beq.n	6c6e <ExFatFile::remove()+0x36>
    6cd4:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6cd8:	6803      	ldr	r3, [r0, #0]
}
    6cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6cde:	6a1b      	ldr	r3, [r3, #32]
    6ce0:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    6ce2:	f000 fe35 	bl	7950 <ExFatPartition::freeChain(unsigned long)>
    6ce6:	2800      	cmp	r0, #0
    6ce8:	d1ae      	bne.n	6c48 <ExFatFile::remove()+0x10>
    6cea:	e7c0      	b.n	6c6e <ExFatFile::remove()+0x36>

00006cec <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6cec:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6cf0:	06db      	lsls	r3, r3, #27
    6cf2:	d401      	bmi.n	6cf8 <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6cf4:	2000      	movs	r0, #0
}
    6cf6:	4770      	bx	lr
bool ExFatFile::rmdir() {
    6cf8:	b510      	push	{r4, lr}
    seekSet(0);
    6cfa:	2200      	movs	r2, #0
    6cfc:	b088      	sub	sp, #32
    6cfe:	2300      	movs	r3, #0
    6d00:	4604      	mov	r4, r0
    6d02:	f7ff fc77 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
  }
    6d06:	e008      	b.n	6d1a <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6d08:	2820      	cmp	r0, #32
    6d0a:	d11b      	bne.n	6d44 <ExFatFile::rmdir()+0x58>
    6d0c:	f99d 3000 	ldrsb.w	r3, [sp]
    6d10:	f89d 2000 	ldrb.w	r2, [sp]
    6d14:	2b00      	cmp	r3, #0
    6d16:	db15      	blt.n	6d44 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    6d18:	b132      	cbz	r2, 6d28 <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    6d1a:	2220      	movs	r2, #32
    6d1c:	4669      	mov	r1, sp
    6d1e:	4620      	mov	r0, r4
    6d20:	f7ff fb82 	bl	6428 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6d24:	2800      	cmp	r0, #0
    6d26:	d1ef      	bne.n	6d08 <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    6d28:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    6d2c:	2208      	movs	r2, #8
  return remove();
    6d2e:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    6d30:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    6d34:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6d38:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6d3c:	f7ff ff7c 	bl	6c38 <ExFatFile::remove()>
}
    6d40:	b008      	add	sp, #32
    6d42:	bd10      	pop	{r4, pc}
  return false;
    6d44:	2000      	movs	r0, #0
}
    6d46:	b008      	add	sp, #32
    6d48:	bd10      	pop	{r4, pc}
    6d4a:	bf00      	nop

00006d4c <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d50:	f04f 0800 	mov.w	r8, #0
    6d54:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6d56:	4f4a      	ldr	r7, [pc, #296]	; (6e80 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    6d58:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    6d5a:	4644      	mov	r4, r8
    6d5c:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6d5e:	2200      	movs	r2, #0
    6d60:	4630      	mov	r0, r6
    6d62:	f7ff fad7 	bl	6314 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6d66:	4605      	mov	r5, r0
    6d68:	b130      	cbz	r0, 6d78 <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    6d6a:	7801      	ldrb	r1, [r0, #0]
    6d6c:	29c0      	cmp	r1, #192	; 0xc0
    6d6e:	d069      	beq.n	6e44 <ExFatFile::syncDir()+0xf8>
    6d70:	29c1      	cmp	r1, #193	; 0xc1
    6d72:	d02b      	beq.n	6dcc <ExFatFile::syncDir()+0x80>
    6d74:	2985      	cmp	r1, #133	; 0x85
    6d76:	d009      	beq.n	6d8c <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6d78:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    6d7c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6d7e:	f043 0301 	orr.w	r3, r3, #1
    6d82:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    6d86:	b002      	add	sp, #8
    6d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6d8c:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    6d90:	f003 0337 	and.w	r3, r3, #55	; 0x37
    6d94:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6d96:	683b      	ldr	r3, [r7, #0]
    6d98:	b183      	cbz	r3, 6dbc <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    6d9a:	f10d 0203 	add.w	r2, sp, #3
    6d9e:	f10d 0106 	add.w	r1, sp, #6
    6da2:	a801      	add	r0, sp, #4
    6da4:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    6da6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    6daa:	81ab      	strh	r3, [r5, #12]
    6dac:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    6dae:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    6db2:	81eb      	strh	r3, [r5, #14]
    6db4:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    6db6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6dba:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    6dbc:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6dbe:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6dc2:	f043 0301 	orr.w	r3, r3, #1
    6dc6:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6dca:	7829      	ldrb	r1, [r5, #0]
    6dcc:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6dd0:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6dd2:	fab0 f080 	clz	r0, r0
    6dd6:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6dd8:	e001      	b.n	6dde <ExFatFile::syncDir()+0x92>
    6dda:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6ddc:	5ca9      	ldrb	r1, [r5, r2]
    6dde:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6de0:	2a01      	cmp	r2, #1
    6de2:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6de6:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    6dea:	fa11 f383 	uxtah	r3, r1, r3
    6dee:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6df0:	d101      	bne.n	6df6 <ExFatFile::syncDir()+0xaa>
    6df2:	2800      	cmp	r0, #0
    6df4:	d1f1      	bne.n	6dda <ExFatFile::syncDir()+0x8e>
    6df6:	2a1f      	cmp	r2, #31
    6df8:	d9f0      	bls.n	6ddc <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6dfa:	f108 0801 	add.w	r8, r8, #1
    6dfe:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    6e02:	fa5f f188 	uxtb.w	r1, r8
    6e06:	428b      	cmp	r3, r1
    6e08:	d2a9      	bcs.n	6d5e <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6e0a:	2201      	movs	r2, #1
    6e0c:	f106 0124 	add.w	r1, r6, #36	; 0x24
    6e10:	6a30      	ldr	r0, [r6, #32]
    6e12:	f000 fcfd 	bl	7810 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6e16:	2800      	cmp	r0, #0
    6e18:	d0ae      	beq.n	6d78 <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    6e1a:	6a35      	ldr	r5, [r6, #32]
    6e1c:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6e1e:	4628      	mov	r0, r5
    6e20:	f005 f908 	bl	c034 <FsCache::sync()>
    6e24:	2800      	cmp	r0, #0
    6e26:	d0a7      	beq.n	6d78 <ExFatFile::syncDir()+0x2c>
    6e28:	f505 7004 	add.w	r0, r5, #528	; 0x210
    6e2c:	f005 f902 	bl	c034 <FsCache::sync()>
    6e30:	2800      	cmp	r0, #0
    6e32:	d0a1      	beq.n	6d78 <ExFatFile::syncDir()+0x2c>
    6e34:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    6e38:	6803      	ldr	r3, [r0, #0]
    6e3a:	6a1b      	ldr	r3, [r3, #32]
    6e3c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6e3e:	2800      	cmp	r0, #0
    6e40:	d1a1      	bne.n	6d86 <ExFatFile::syncDir()+0x3a>
    6e42:	e799      	b.n	6d78 <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    6e44:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    6e48:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6e4c:	7843      	ldrb	r3, [r0, #1]
    6e4e:	bf14      	ite	ne
    6e50:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6e54:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    6e58:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6e5a:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    6e5e:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6e62:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    6e66:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6e6a:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6e6c:	e9c5 0106 	strd	r0, r1, [r5, #24]
    6e70:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    6e74:	f043 0301 	orr.w	r3, r3, #1
    6e78:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6e7c:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    6e7e:	e7a5      	b.n	6dcc <ExFatFile::syncDir()+0x80>
    6e80:	200284dc 	.word	0x200284dc

00006e84 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6e84:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    6e86:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6e8a:	b343      	cbz	r3, 6ede <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6e8c:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    6e90:	4604      	mov	r4, r0
    6e92:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    6e96:	2a00      	cmp	r2, #0
    6e98:	db0c      	blt.n	6eb4 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    6e9a:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6e9c:	4628      	mov	r0, r5
    6e9e:	f005 f8c9 	bl	c034 <FsCache::sync()>
    6ea2:	b978      	cbnz	r0, 6ec4 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    6ea4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6ea8:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    6eaa:	f043 0301 	orr.w	r3, r3, #1
    6eae:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    6eb2:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6eb8:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    6ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    6ec0:	f7ff bf44 	b.w	6d4c <ExFatFile::syncDir()>
    6ec4:	f505 7004 	add.w	r0, r5, #528	; 0x210
    6ec8:	f005 f8b4 	bl	c034 <FsCache::sync()>
    6ecc:	2800      	cmp	r0, #0
    6ece:	d0e9      	beq.n	6ea4 <ExFatFile::sync()+0x20>
    6ed0:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    6ed4:	6803      	ldr	r3, [r0, #0]
    6ed6:	6a1b      	ldr	r3, [r3, #32]
    6ed8:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6eda:	2800      	cmp	r0, #0
    6edc:	d0e2      	beq.n	6ea4 <ExFatFile::sync()+0x20>
    return true;
    6ede:	2001      	movs	r0, #1
}
    6ee0:	bd38      	pop	{r3, r4, r5, pc}
    6ee2:	bf00      	nop

00006ee4 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6ee4:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6ee6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6eea:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6eec:	065a      	lsls	r2, r3, #25
    6eee:	d44c      	bmi.n	6f8a <ExFatFile::addDirCluster()+0xa6>
    6ef0:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6ef2:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    6ef4:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    6ef8:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    6efa:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    6efe:	d301      	bcc.n	6f04 <ExFatFile::addDirCluster()+0x20>
}
    6f00:	2000      	movs	r0, #0
    6f02:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    6f04:	4628      	mov	r0, r5
    6f06:	f7ff fe4d 	bl	6ba4 <ExFatFile::addCluster()>
    6f0a:	2800      	cmp	r0, #0
    6f0c:	d0f8      	beq.n	6f00 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    6f0e:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6f10:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6f12:	69ae      	ldr	r6, [r5, #24]
    6f14:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    6f18:	3e02      	subs	r6, #2
    6f1a:	409e      	lsls	r6, r3
    6f1c:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    6f20:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    6f22:	1931      	adds	r1, r6, r4
    6f24:	2205      	movs	r2, #5
    6f26:	f500 7004 	add.w	r0, r0, #528	; 0x210
    6f2a:	3401      	adds	r4, #1
    6f2c:	f005 f8ae 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    6f30:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f34:	2100      	movs	r1, #0
    if (!cache) {
    6f36:	2800      	cmp	r0, #0
    6f38:	d0e2      	beq.n	6f00 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    6f3a:	f00a fc95 	bl	11868 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6f3e:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6f40:	2301      	movs	r3, #1
    6f42:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    6f46:	4093      	lsls	r3, r2
    6f48:	429c      	cmp	r4, r3
    6f4a:	d3ea      	bcc.n	6f22 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    6f4c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    6f50:	065b      	lsls	r3, r3, #25
    6f52:	d415      	bmi.n	6f80 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6f54:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    6f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    6f5c:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6f60:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6f64:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    6f68:	189b      	adds	r3, r3, r2
    6f6a:	f141 0000 	adc.w	r0, r1, #0
    6f6e:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    6f70:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    6f74:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    6f76:	189b      	adds	r3, r3, r2
    6f78:	f141 0100 	adc.w	r1, r1, #0
    6f7c:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    6f80:	4628      	mov	r0, r5
}
    6f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    6f86:	f7ff bf7d 	b.w	6e84 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6f8a:	6a00      	ldr	r0, [r0, #32]
    6f8c:	f000 fde6 	bl	7b5c <ExFatPartition::rootLength()>
    6f90:	e7af      	b.n	6ef2 <ExFatFile::addDirCluster()+0xe>
    6f92:	bf00      	nop

00006f94 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    6f98:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6f9c:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    6f9e:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    6fa0:	f010 0f18 	tst.w	r0, #24
    6fa4:	930c      	str	r3, [sp, #48]	; 0x30
    6fa6:	931a      	str	r3, [sp, #104]	; 0x68
    6fa8:	d003      	beq.n	6fb2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    6faa:	6a20      	ldr	r0, [r4, #32]
    6fac:	6a0b      	ldr	r3, [r1, #32]
    6fae:	4298      	cmp	r0, r3
    6fb0:	d002      	beq.n	6fb8 <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    6fb2:	2000      	movs	r0, #0
}
    6fb4:	b01c      	add	sp, #112	; 0x70
    6fb6:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6fb8:	f640 2301 	movw	r3, #2561	; 0xa01
    6fbc:	4668      	mov	r0, sp
    6fbe:	f7ff fd5b 	bl	6a78 <ExFatFile::open(ExFatFile*, char const*, int)>
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d0f5      	beq.n	6fb2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    6fc6:	46a4      	mov	ip, r4
    6fc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
    6fcc:	ad0e      	add	r5, sp, #56	; 0x38
    6fce:	f8dc 0000 	ldr.w	r0, [ip]
    6fd2:	f10c 0c10 	add.w	ip, ip, #16
    6fd6:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    6fda:	46ae      	mov	lr, r5
    6fdc:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    6fe0:	3510      	adds	r5, #16
    6fe2:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    6fe6:	45b4      	cmp	ip, r6
    6fe8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6fec:	d1ef      	bne.n	6fce <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    6fee:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    6ff2:	aa09      	add	r2, sp, #36	; 0x24
    6ff4:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6ff8:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    6ffa:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    6ffe:	ca07      	ldmia	r2, {r0, r1, r2}
    7000:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7004:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7008:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    700a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    700e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7012:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7016:	f7ff ff35 	bl	6e84 <ExFatFile::sync()>
    701a:	2800      	cmp	r0, #0
    701c:	d0c9      	beq.n	6fb2 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    701e:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7020:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7022:	2308      	movs	r3, #8
  return oldFile.remove();
    7024:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    7026:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7028:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    702c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7030:	f7ff fe02 	bl	6c38 <ExFatFile::remove()>
    7034:	e7be      	b.n	6fb4 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    7036:	bf00      	nop

00007038 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7038:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    703a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    703e:	f013 0f50 	tst.w	r3, #80	; 0x50
    7042:	d102      	bne.n	704a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    7044:	2500      	movs	r5, #0
}
    7046:	4628      	mov	r0, r5
    7048:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    704a:	f640 2302 	movw	r3, #2562	; 0xa02
    704e:	4604      	mov	r4, r0
    7050:	f7ff fb46 	bl	66e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7054:	2800      	cmp	r0, #0
    7056:	d0f5      	beq.n	7044 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    7058:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    705a:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    705c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    7060:	f7ff ff40 	bl	6ee4 <ExFatFile::addDirCluster()>
    7064:	4605      	mov	r5, r0
    7066:	2800      	cmp	r0, #0
    7068:	d0ec      	beq.n	7044 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    706a:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    706c:	2200      	movs	r2, #0
    706e:	2300      	movs	r3, #0
    7070:	4620      	mov	r0, r4
    7072:	61e1      	str	r1, [r4, #28]
    7074:	f7ff fabe 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7078:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    707a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    707e:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    7082:	2b00      	cmp	r3, #0
    7084:	d0df      	beq.n	7046 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7086:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    7088:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    708a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    708e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7092:	f7ff be5b 	b.w	6d4c <ExFatFile::syncDir()>
    7096:	bf00      	nop

00007098 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7098:	b5f0      	push	{r4, r5, r6, r7, lr}
    709a:	2500      	movs	r5, #0
    709c:	b097      	sub	sp, #92	; 0x5c
    709e:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    70a0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    70a4:	9201      	str	r2, [sp, #4]
    70a6:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    70aa:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    70ac:	2b00      	cmp	r3, #0
    70ae:	d146      	bne.n	713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    70b0:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    70b4:	460e      	mov	r6, r1
    70b6:	f013 0f50 	tst.w	r3, #80	; 0x50
    70ba:	d040      	beq.n	713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    70bc:	7813      	ldrb	r3, [r2, #0]
    70be:	4604      	mov	r4, r0
    70c0:	4611      	mov	r1, r2
    70c2:	2b2f      	cmp	r3, #47	; 0x2f
    70c4:	d03e      	beq.n	7144 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    70c6:	ab01      	add	r3, sp, #4
    70c8:	aa02      	add	r2, sp, #8
    70ca:	4620      	mov	r0, r4
    70cc:	f7ff f95e 	bl	638c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    70d0:	2800      	cmp	r0, #0
    70d2:	d034      	beq.n	713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    70d4:	9b01      	ldr	r3, [sp, #4]
    70d6:	781b      	ldrb	r3, [r3, #0]
    70d8:	2b00      	cmp	r3, #0
    70da:	d041      	beq.n	7160 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    70dc:	2300      	movs	r3, #0
    70de:	aa02      	add	r2, sp, #8
    70e0:	4631      	mov	r1, r6
    70e2:	4620      	mov	r0, r4
    70e4:	f7ff fafc 	bl	66e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    70e8:	b930      	cbnz	r0, 70f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    70ea:	b347      	cbz	r7, 713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    70ec:	aa02      	add	r2, sp, #8
    70ee:	4631      	mov	r1, r6
    70f0:	4620      	mov	r0, r4
    70f2:	f7ff ffa1 	bl	7038 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    70f6:	b310      	cbz	r0, 713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    70f8:	46a4      	mov	ip, r4
    70fa:	ad08      	add	r5, sp, #32
    70fc:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7100:	f8dc 0000 	ldr.w	r0, [ip]
    7104:	f10c 0c10 	add.w	ip, ip, #16
    7108:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    710c:	46ae      	mov	lr, r5
    710e:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7112:	3510      	adds	r5, #16
    7114:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7118:	45b4      	cmp	ip, r6
    711a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    711e:	d1ef      	bne.n	7100 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    7120:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    7124:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    7126:	6028      	str	r0, [r5, #0]
    close();
    7128:	4620      	mov	r0, r4
    712a:	f7ff f911 	bl	6350 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    712e:	9901      	ldr	r1, [sp, #4]
    7130:	ab01      	add	r3, sp, #4
    7132:	aa02      	add	r2, sp, #8
    7134:	4620      	mov	r0, r4
    7136:	f7ff f929 	bl	638c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    713a:	2800      	cmp	r0, #0
    713c:	d1ca      	bne.n	70d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    713e:	2000      	movs	r0, #0
}
    7140:	b017      	add	sp, #92	; 0x5c
    7142:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    7144:	3101      	adds	r1, #1
    7146:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    7148:	780b      	ldrb	r3, [r1, #0]
    714a:	2b2f      	cmp	r3, #47	; 0x2f
    714c:	d0fa      	beq.n	7144 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    714e:	6a31      	ldr	r1, [r6, #32]
    7150:	a808      	add	r0, sp, #32
    7152:	f7ff f907 	bl	6364 <ExFatFile::openRoot(ExFatVolume*)>
    7156:	2800      	cmp	r0, #0
    7158:	d0f1      	beq.n	713e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    715a:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    715c:	ae08      	add	r6, sp, #32
    715e:	e7b2      	b.n	70c6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    7160:	aa02      	add	r2, sp, #8
    7162:	4631      	mov	r1, r6
    7164:	4620      	mov	r0, r4
    7166:	f7ff ff67 	bl	7038 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    716a:	b017      	add	sp, #92	; 0x5c
    716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    716e:	bf00      	nop

00007170 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7170:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7174:	079a      	lsls	r2, r3, #30
    7176:	d562      	bpl.n	723e <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    7178:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    717a:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    717c:	b082      	sub	sp, #8
    717e:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    7180:	b3a5      	cbz	r5, 71ec <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    7182:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    7186:	d034      	beq.n	71f2 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7188:	6a00      	ldr	r0, [r0, #32]
    718a:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    718c:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7190:	3a01      	subs	r2, #1
    7192:	68e1      	ldr	r1, [r4, #12]
    7194:	f10c 0c09 	add.w	ip, ip, #9
    7198:	f141 31ff 	adc.w	r1, r1, #4294967295
    719c:	fa5f fc8c 	uxtb.w	ip, ip
    71a0:	f1cc 0e20 	rsb	lr, ip, #32
    71a4:	fa22 f20c 	lsr.w	r2, r2, ip
    71a8:	f1ac 0c20 	sub.w	ip, ip, #32
    71ac:	fa01 fe0e 	lsl.w	lr, r1, lr
    71b0:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    71b4:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    71b6:	ea42 020e 	orr.w	r2, r2, lr
    71ba:	ea42 020c 	orr.w	r2, r2, ip
    71be:	3201      	adds	r2, #1
    if (m_curCluster) {
    71c0:	b319      	cbz	r1, 720a <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    71c2:	3d01      	subs	r5, #1
    71c4:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    71c6:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    71c8:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    71ca:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    71cc:	bb72      	cbnz	r2, 722c <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    71ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    71d2:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    71d4:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    71d8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    71dc:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    71e0:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    71e4:	f7ff fe4e 	bl	6e84 <ExFatFile::sync()>

 fail:
  return false;
}
    71e8:	b002      	add	sp, #8
    71ea:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    71ec:	2001      	movs	r0, #1
}
    71ee:	b002      	add	sp, #8
    71f0:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    71f2:	6981      	ldr	r1, [r0, #24]
    71f4:	b961      	cbnz	r1, 7210 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    71f6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    71f8:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    71fa:	4629      	mov	r1, r5
    71fc:	6a20      	ldr	r0, [r4, #32]
    71fe:	f000 fba7 	bl	7950 <ExFatPartition::freeChain(unsigned long)>
    7202:	b1c8      	cbz	r0, 7238 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7204:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7208:	e7e1      	b.n	71ce <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    720a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    720c:	61e1      	str	r1, [r4, #28]
    720e:	e7dd      	b.n	71cc <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7210:	aa01      	add	r2, sp, #4
    7212:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    7214:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7216:	f000 fb59 	bl	78cc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    721a:	2800      	cmp	r0, #0
    721c:	db0c      	blt.n	7238 <ExFatFile::truncate()+0xc8>
      if (fg) {
    721e:	d110      	bne.n	7242 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    7220:	9d01      	ldr	r5, [sp, #4]
    7222:	2d00      	cmp	r5, #0
    7224:	d1e9      	bne.n	71fa <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7226:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    722a:	e7d0      	b.n	71ce <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    722c:	2300      	movs	r3, #0
    722e:	9901      	ldr	r1, [sp, #4]
    7230:	f000 fa72 	bl	7718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7234:	2800      	cmp	r0, #0
    7236:	d1e5      	bne.n	7204 <ExFatFile::truncate()+0x94>
  return false;
    7238:	2000      	movs	r0, #0
}
    723a:	b002      	add	sp, #8
    723c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    723e:	2000      	movs	r0, #0
}
    7240:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    7242:	f04f 32ff 	mov.w	r2, #4294967295
    7246:	69a1      	ldr	r1, [r4, #24]
    7248:	6a20      	ldr	r0, [r4, #32]
    724a:	f000 fb61 	bl	7910 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    724e:	2800      	cmp	r0, #0
    7250:	d1e6      	bne.n	7220 <ExFatFile::truncate()+0xb0>
    7252:	e7f1      	b.n	7238 <ExFatFile::truncate()+0xc8>

00007254 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7258:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    725c:	b083      	sub	sp, #12
    725e:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    7260:	079d      	lsls	r5, r3, #30
    7262:	f140 80a1 	bpl.w	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7266:	4691      	mov	r9, r2
    7268:	071a      	lsls	r2, r3, #28
    726a:	460e      	mov	r6, r1
    726c:	f100 8095 	bmi.w	739a <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    7270:	f1b9 0f00 	cmp.w	r9, #0
    7274:	f000 8128 	beq.w	74c8 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    7278:	6823      	ldr	r3, [r4, #0]
    727a:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    727c:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    727e:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7280:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    7284:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    7288:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    728c:	f1b8 0f00 	cmp.w	r8, #0
    7290:	f040 8094 	bne.w	73bc <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    7294:	2900      	cmp	r1, #0
    7296:	f000 80d4 	beq.w	7442 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    729a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    729e:	065b      	lsls	r3, r3, #25
    72a0:	f140 80ec 	bpl.w	747c <ExFatFile::write(void const*, unsigned int)+0x228>
    72a4:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    72a8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    72ac:	f10c 0c09 	add.w	ip, ip, #9
    72b0:	3b01      	subs	r3, #1
    72b2:	fa5f fc8c 	uxtb.w	ip, ip
    72b6:	f142 32ff 	adc.w	r2, r2, #4294967295
    72ba:	f1cc 0e20 	rsb	lr, ip, #32
    72be:	fa23 f30c 	lsr.w	r3, r3, ip
    72c2:	f1ac 0c20 	sub.w	ip, ip, #32
    72c6:	fa02 fe0e 	lsl.w	lr, r2, lr
    72ca:	fa22 fc0c 	lsr.w	ip, r2, ip
    72ce:	69e2      	ldr	r2, [r4, #28]
    72d0:	ea43 030e 	orr.w	r3, r3, lr
    72d4:	ea43 030c 	orr.w	r3, r3, ip
    72d8:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    72da:	4299      	cmp	r1, r3
    72dc:	f080 80d5 	bcs.w	748a <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    72e0:	3101      	adds	r1, #1
    72e2:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    72e4:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    72e8:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    72ea:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    72ee:	4091      	lsls	r1, r2
    72f0:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    72f2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    72f6:	f0c0 808a 	bcc.w	740e <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    72fa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    72fe:	f0c0 80a6 	bcc.w	744e <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7302:	2301      	movs	r3, #1
    7304:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    7306:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    7308:	eba3 0308 	sub.w	r3, r3, r8
    730c:	4293      	cmp	r3, r2
    730e:	bf28      	it	cs
    7310:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7312:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    7316:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    7318:	ea4f 2843 	mov.w	r8, r3, lsl #9
    731c:	d309      	bcc.n	7332 <ExFatFile::write(void const*, unsigned int)+0xde>
    731e:	185f      	adds	r7, r3, r1
    7320:	42ba      	cmp	r2, r7
    7322:	d206      	bcs.n	7332 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    7324:	2200      	movs	r2, #0
    7326:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    732a:	f04f 32ff 	mov.w	r2, #4294967295
    732e:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    7332:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    7336:	4632      	mov	r2, r6
    7338:	6807      	ldr	r7, [r0, #0]
    733a:	6abf      	ldr	r7, [r7, #40]	; 0x28
    733c:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    733e:	b398      	cbz	r0, 73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    7340:	4643      	mov	r3, r8
    src += n;
    7342:	4446      	add	r6, r8
    toWrite -= n;
    7344:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    7348:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    734c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    7350:	19db      	adds	r3, r3, r7
    7352:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    7356:	4298      	cmp	r0, r3
    7358:	4191      	sbcs	r1, r2
    m_curPosition += n;
    735a:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    735e:	d207      	bcs.n	7370 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7360:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    7364:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    7368:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    736c:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    7370:	2d00      	cmp	r5, #0
    7372:	d183      	bne.n	727c <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    7374:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    7378:	4298      	cmp	r0, r3
    737a:	4191      	sbcs	r1, r2
    737c:	f0c0 8096 	bcc.w	74ac <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    7380:	4b53      	ldr	r3, [pc, #332]	; (74d0 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    7382:	681b      	ldr	r3, [r3, #0]
    7384:	2b00      	cmp	r3, #0
    7386:	f000 809d 	beq.w	74c4 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    738a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    738e:	4648      	mov	r0, r9
    7390:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7394:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    7398:	e00d      	b.n	73b6 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    739a:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    739e:	f7ff f929 	bl	65f4 <ExFatFile::seekSet(unsigned long long)>
    73a2:	2800      	cmp	r0, #0
    73a4:	f47f af64 	bne.w	7270 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    73a8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    73ac:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    73ae:	f043 0301 	orr.w	r3, r3, #1
    73b2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    73b6:	b003      	add	sp, #12
    73b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    73bc:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    73c0:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    73c2:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    73c6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    73ca:	4091      	lsls	r1, r2
    73cc:	4441      	add	r1, r8
    73ce:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    73d0:	2f00      	cmp	r7, #0
    73d2:	d08e      	beq.n	72f2 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    73d4:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    73d8:	2201      	movs	r2, #1
    73da:	f500 7004 	add.w	r0, r0, #528	; 0x210
    73de:	45a8      	cmp	r8, r5
    73e0:	bf28      	it	cs
    73e2:	46a8      	movcs	r8, r5
    73e4:	f004 fe52 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    73e8:	2800      	cmp	r0, #0
    73ea:	d0dd      	beq.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    73ec:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    73ee:	4447      	add	r7, r8
      memcpy(dst, src, n);
    73f0:	4642      	mov	r2, r8
    73f2:	4631      	mov	r1, r6
    73f4:	f006 f9aa 	bl	d74c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    73f8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    73fc:	6a20      	ldr	r0, [r4, #32]
    73fe:	d19f      	bne.n	7340 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    7400:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7404:	f004 fe16 	bl	c034 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    7408:	2800      	cmp	r0, #0
    740a:	d199      	bne.n	7340 <ExFatFile::write(void const*, unsigned int)+0xec>
    740c:	e7cc      	b.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    740e:	6862      	ldr	r2, [r4, #4]
    7410:	6963      	ldr	r3, [r4, #20]
    7412:	9200      	str	r2, [sp, #0]
    7414:	9301      	str	r3, [sp, #4]
    7416:	6922      	ldr	r2, [r4, #16]
    7418:	6823      	ldr	r3, [r4, #0]
    741a:	4293      	cmp	r3, r2
    741c:	e9dd 2300 	ldrd	r2, r3, [sp]
    7420:	419a      	sbcs	r2, r3
    7422:	d212      	bcs.n	744a <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7424:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    7426:	f500 7004 	add.w	r0, r0, #528	; 0x210
    742a:	f004 fe2f 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    742e:	2800      	cmp	r0, #0
    7430:	d0ba      	beq.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7432:	462a      	mov	r2, r5
    7434:	4631      	mov	r1, r6
    7436:	4438      	add	r0, r7
    m_curPosition += n;
    7438:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    743a:	f006 f987 	bl	d74c <memcpy>
    m_curPosition += n;
    743e:	462b      	mov	r3, r5
    7440:	e77f      	b.n	7342 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    7442:	69e1      	ldr	r1, [r4, #28]
    7444:	b349      	cbz	r1, 749a <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    7446:	61a1      	str	r1, [r4, #24]
    7448:	e74c      	b.n	72e4 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    744a:	2205      	movs	r2, #5
    744c:	e7eb      	b.n	7426 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    744e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    7452:	428b      	cmp	r3, r1
    7454:	d106      	bne.n	7464 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    7456:	2300      	movs	r3, #0
    7458:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    745c:	f04f 33ff 	mov.w	r3, #4294967295
    7460:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    7464:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    7468:	4632      	mov	r2, r6
    746a:	6803      	ldr	r3, [r0, #0]
    746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    746e:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7470:	2800      	cmp	r0, #0
    7472:	d099      	beq.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
    7474:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    7478:	4698      	mov	r8, r3
    747a:	e762      	b.n	7342 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    747c:	f104 0218 	add.w	r2, r4, #24
    7480:	f000 fa24 	bl	78cc <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7484:	2800      	cmp	r0, #0
    7486:	db8f      	blt.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    7488:	d104      	bne.n	7494 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    748a:	4620      	mov	r0, r4
    748c:	f7ff fb8a 	bl	6ba4 <ExFatFile::addCluster()>
    7490:	2800      	cmp	r0, #0
    7492:	d089      	beq.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    7494:	69a1      	ldr	r1, [r4, #24]
    7496:	6a20      	ldr	r0, [r4, #32]
    7498:	e724      	b.n	72e4 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    749a:	4620      	mov	r0, r4
    749c:	f7ff fb82 	bl	6ba4 <ExFatFile::addCluster()>
    74a0:	2800      	cmp	r0, #0
    74a2:	d081      	beq.n	73a8 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    74a4:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    74a6:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    74a8:	61e1      	str	r1, [r4, #28]
    74aa:	e71b      	b.n	72e4 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    74ac:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    74b0:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    74b2:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    74b6:	f061 037f 	orn	r3, r1, #127	; 0x7f
    74ba:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    74be:	b003      	add	sp, #12
    74c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    74c4:	4648      	mov	r0, r9
    74c6:	e776      	b.n	73b6 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    74c8:	e9d4 3200 	ldrd	r3, r2, [r4]
    74cc:	e752      	b.n	7374 <ExFatFile::write(void const*, unsigned int)+0x120>
    74ce:	bf00      	nop
    74d0:	200284dc 	.word	0x200284dc

000074d4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    74d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74d8:	460c      	mov	r4, r1
    74da:	4615      	mov	r5, r2
    74dc:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    74e0:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    74e2:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    74e4:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    74e8:	b91b      	cbnz	r3, 74f2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    74ea:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    74ee:	429a      	cmp	r2, r3
    74f0:	d00e      	beq.n	7510 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    74f2:	f004 fdf3 	bl	c0dc <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    74f6:	f004 feb5 	bl	c264 <toUpcase(unsigned short)>
    74fa:	4606      	mov	r6, r0
    74fc:	4638      	mov	r0, r7
    74fe:	f004 feb1 	bl	c264 <toUpcase(unsigned short)>
    7502:	4286      	cmp	r6, r0
    7504:	d109      	bne.n	751a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    7506:	4544      	cmp	r4, r8
    7508:	d1ea      	bne.n	74e0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    750a:	2001      	movs	r0, #1
}
    750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    7510:	fab7 f087 	clz	r0, r7
    7514:	0940      	lsrs	r0, r0, #5
}
    7516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    751a:	2000      	movs	r0, #0
}
    751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007520 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    7520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    7524:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    7528:	b083      	sub	sp, #12
    752a:	4688      	mov	r8, r1
  if (!isOpen()) {
    752c:	2b00      	cmp	r3, #0
    752e:	d04f      	beq.n	75d0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    7530:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    7534:	4607      	mov	r7, r0
    7536:	2b01      	cmp	r3, #1
    7538:	d953      	bls.n	75e2 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    753a:	3a01      	subs	r2, #1
  char* str = name;
    753c:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    753e:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    7542:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7544:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7546:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 75e8 <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    754a:	2200      	movs	r2, #0
    754c:	4651      	mov	r1, sl
    754e:	4638      	mov	r0, r7
    7550:	9301      	str	r3, [sp, #4]
    7552:	f7fe fedf 	bl	6314 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    7556:	2800      	cmp	r0, #0
    7558:	d03a      	beq.n	75d0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    755a:	7802      	ldrb	r2, [r0, #0]
    755c:	2ac1      	cmp	r2, #193	; 0xc1
    755e:	d137      	bne.n	75d0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    7560:	4605      	mov	r5, r0
    7562:	f100 091e 	add.w	r9, r0, #30
    7566:	9b01      	ldr	r3, [sp, #4]
    7568:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    756c:	b324      	cbz	r4, 75b8 <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    756e:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7572:	b292      	uxth	r2, r2
    7574:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    7578:	d22a      	bcs.n	75d0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    757a:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    757e:	f3c0 0009 	ubfx	r0, r0, #0, #10
    7582:	4320      	orrs	r0, r4
    7584:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7588:	4619      	mov	r1, r3
    758a:	4632      	mov	r2, r6
    758c:	f004 fdcc 	bl	c128 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7590:	4603      	mov	r3, r0
    7592:	b1e8      	cbz	r0, 75d0 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    7594:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    7596:	454d      	cmp	r5, r9
    7598:	d1e6      	bne.n	7568 <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    759a:	f10a 0a01 	add.w	sl, sl, #1
    759e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    75a2:	fa5f fa8a 	uxtb.w	sl, sl
    75a6:	4552      	cmp	r2, sl
    75a8:	d2cf      	bcs.n	754a <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    75aa:	eba3 0008 	sub.w	r0, r3, r8
    75ae:	4698      	mov	r8, r3
  *str = '\0';
    75b0:	2300      	movs	r3, #0
    75b2:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    75b6:	e00f      	b.n	75d8 <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    75b8:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    75bc:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    75be:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    75c2:	d302      	bcc.n	75ca <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    75c4:	2800      	cmp	r0, #0
    75c6:	d1df      	bne.n	7588 <ExFatFile::getName8(char*, unsigned int)+0x68>
    75c8:	e7ef      	b.n	75aa <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    75ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    75ce:	d306      	bcc.n	75de <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    75d0:	2300      	movs	r3, #0
  return 0;
    75d2:	4618      	mov	r0, r3
  *name = 0;
    75d4:	f888 3000 	strb.w	r3, [r8]
}
    75d8:	b003      	add	sp, #12
    75da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    75de:	4604      	mov	r4, r0
    75e0:	e7d9      	b.n	7596 <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    75e2:	2000      	movs	r0, #0
    75e4:	e7e4      	b.n	75b0 <ExFatFile::getName8(char*, unsigned int)+0x90>
    75e6:	bf00      	nop
    75e8:	000ffc00 	.word	0x000ffc00

000075ec <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    75ec:	b570      	push	{r4, r5, r6, lr}
    75ee:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    75f0:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    75f2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    75f6:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    75f8:	4619      	mov	r1, r3
  uint16_t hash = 0;
    75fa:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    75fc:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    75fe:	6123      	str	r3, [r4, #16]
    next = begin;
    7600:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    7602:	e017      	b.n	7634 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    7604:	f004 fd6a 	bl	c0dc <FsName::get16()>
    if (u == 0XFFFF) {
    7608:	42a8      	cmp	r0, r5
    760a:	d022      	beq.n	7652 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    760c:	f004 fe2a 	bl	c264 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    7610:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7612:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    7614:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    7616:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7618:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    761c:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    761e:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    7620:	fa52 f080 	uxtab	r0, r2, r0
    7624:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    7626:	f3c0 004e 	ubfx	r0, r0, #1, #15
    762a:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    762e:	fa16 f080 	uxtah	r0, r6, r0
    7632:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    7634:	4620      	mov	r0, r4
    7636:	2900      	cmp	r1, #0
    7638:	d1e4      	bne.n	7604 <ExFatFile::hashName(ExName_t*)+0x18>
    763a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    763e:	429a      	cmp	r2, r3
    7640:	d1e0      	bne.n	7604 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    7642:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    7644:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    7646:	3801      	subs	r0, #1
    7648:	28fe      	cmp	r0, #254	; 0xfe
    764a:	bf8c      	ite	hi
    764c:	2000      	movhi	r0, #0
    764e:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    7650:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7652:	2000      	movs	r0, #0
}
    7654:	bd70      	pop	{r4, r5, r6, pc}
    7656:	bf00      	nop

00007658 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    7658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    765c:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    765e:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    7660:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    7662:	2900      	cmp	r1, #0
    7664:	d042      	beq.n	76ec <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    7666:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    766a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    766e:	4543      	cmp	r3, r8
    7670:	d942      	bls.n	76f8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    7672:	f008 0307 	and.w	r3, r8, #7
    7676:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    7678:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    767c:	409d      	lsls	r5, r3
    767e:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    7680:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    7682:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    7684:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    7688:	2200      	movs	r2, #0
    768a:	4638      	mov	r0, r7
    768c:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    7690:	f004 fcfc 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    7694:	b1e8      	cbz	r0, 76d2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    7696:	f10b 3bff 	add.w	fp, fp, #4294967295
    769a:	4483      	add	fp, r0
    769c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    76a0:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    76a4:	e00a      	b.n	76bc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    76a6:	454a      	cmp	r2, r9
    76a8:	d02b      	beq.n	7702 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    76aa:	45a0      	cmp	r8, r4
    76ac:	d010      	beq.n	76d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    76ae:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    76b2:	42a5      	cmp	r5, r4
    76b4:	d914      	bls.n	76e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    76b6:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    76ba:	d00c      	beq.n	76d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    76bc:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    76be:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    76c0:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    76c4:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    76c8:	d0ed      	beq.n	76a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    76ca:	45a0      	cmp	r8, r4
        endAlloc++;
    76cc:	4626      	mov	r6, r4
        if (endAlloc == start) {
    76ce:	d1ee      	bne.n	76ae <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    76d0:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    76d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    76d6:	4558      	cmp	r0, fp
      mask = 1;
    76d8:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    76dc:	d1e0      	bne.n	76a0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    76de:	e001      	b.n	76e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    76e0:	2600      	movs	r6, #0
    76e2:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    76e4:	2501      	movs	r5, #1
    i = 0;
    76e6:	f04f 0b00 	mov.w	fp, #0
    76ea:	e7cb      	b.n	7684 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    76ec:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    76f0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    76f4:	4543      	cmp	r3, r8
    76f6:	d8bc      	bhi.n	7672 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    76f8:	f04f 0800 	mov.w	r8, #0
    76fc:	2501      	movs	r5, #1
    start = 0;
    76fe:	46c3      	mov	fp, r8
    7700:	e7be      	b.n	7680 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    7702:	f1ba 0f00 	cmp.w	sl, #0
    7706:	d104      	bne.n	7712 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    7708:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    770c:	bf08      	it	eq
    770e:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    7712:	1cb0      	adds	r0, r6, #2
}
    7714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    7718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    771c:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    771e:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    7720:	4615      	mov	r5, r2
    7722:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    7724:	1883      	adds	r3, r0, r2
    7726:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    772a:	4293      	cmp	r3, r2
    772c:	d837      	bhi.n	779e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    772e:	bbce      	cbnz	r6, 77a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    7730:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    7734:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    7736:	bf88      	it	hi
    7738:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    773c:	f000 0307 	and.w	r3, r0, #7
    7740:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    7742:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    7746:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    774a:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    774c:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    7750:	b2e4      	uxtb	r4, r4
    7752:	2201      	movs	r2, #1
    7754:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    7756:	188f      	adds	r7, r1, r2
    7758:	f004 fc98 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    775c:	b1f8      	cbz	r0, 779e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    775e:	f109 3eff 	add.w	lr, r9, #4294967295
    7762:	4486      	add	lr, r0
    7764:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    7768:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    776c:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    7770:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    7774:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    7778:	bf14      	ite	ne
    777a:	2201      	movne	r2, #1
    777c:	2200      	moveq	r2, #0
    777e:	42b2      	cmp	r2, r6
    7780:	d00d      	beq.n	779e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    7782:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    7784:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    7788:	d018      	beq.n	77bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    778a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    778e:	d1ed      	bne.n	776c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    7790:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    7792:	46a1      	mov	r9, r4
    7794:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    7798:	d1e6      	bne.n	7768 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    779a:	4639      	mov	r1, r7
    779c:	e7d9      	b.n	7752 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    779e:	2000      	movs	r0, #0
}
    77a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    77a4:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    77a8:	428b      	cmp	r3, r1
    77aa:	d9c7      	bls.n	773c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    77ac:	4281      	cmp	r1, r0
    77ae:	d3c5      	bcc.n	773c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    77b0:	4293      	cmp	r3, r2
    77b2:	bf28      	it	cs
    77b4:	2300      	movcs	r3, #0
    77b6:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    77ba:	e7bf      	b.n	773c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    77bc:	2001      	movs	r0, #1
}
    77be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    77c2:	bf00      	nop

000077c4 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    77c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    77c6:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    77ca:	3301      	adds	r3, #1
    77cc:	428b      	cmp	r3, r1
    77ce:	d201      	bcs.n	77d4 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    77d0:	2000      	movs	r0, #0
}
    77d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77d4:	4607      	mov	r7, r0
    77d6:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    77d8:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    77dc:	2500      	movs	r5, #0
    77de:	e005      	b.n	77ec <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    77e0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    77e4:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    77e6:	3301      	adds	r3, #1
    77e8:	42a3      	cmp	r3, r4
    77ea:	d3f1      	bcc.n	77d0 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    77ec:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    77f0:	2200      	movs	r2, #0
    77f2:	4630      	mov	r0, r6
    77f4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    77f8:	f004 fc48 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    77fc:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    77fe:	2800      	cmp	r0, #0
    7800:	d0e6      	beq.n	77d0 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    7802:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    7806:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    7808:	1c63      	adds	r3, r4, #1
    780a:	d1e9      	bne.n	77e0 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    780c:	1c68      	adds	r0, r5, #1
}
    780e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007810 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    7810:	b538      	push	{r3, r4, r5, lr}
    7812:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    7814:	680b      	ldr	r3, [r1, #0]
    7816:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    781a:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    781e:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    7822:	3b02      	subs	r3, #2
    7824:	6865      	ldr	r5, [r4, #4]
    7826:	fa03 f30c 	lsl.w	r3, r3, ip
    782a:	4029      	ands	r1, r5
    782c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    7830:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    7834:	4419      	add	r1, r3
    7836:	f004 fc29 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    783a:	b118      	cbz	r0, 7844 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    783c:	6863      	ldr	r3, [r4, #4]
    783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7842:	4418      	add	r0, r3
}
    7844:	bd38      	pop	{r3, r4, r5, pc}
    7846:	bf00      	nop

00007848 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    7848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    784c:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    784e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    7852:	6849      	ldr	r1, [r1, #4]
    7854:	400b      	ands	r3, r1
  pos->position += offset;
    7856:	4411      	add	r1, r2
    7858:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    785a:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    785c:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    7860:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    7864:	b2d2      	uxtb	r2, r2
    7866:	40d3      	lsrs	r3, r2
  while (tmp--) {
    7868:	b32b      	cbz	r3, 78b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    786a:	4680      	mov	r8, r0
    786c:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    786e:	f500 7904 	add.w	r9, r0, #528	; 0x210
    7872:	e005      	b.n	7880 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    7874:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    7876:	3d01      	subs	r5, #1
      pos->cluster++;
    7878:	f103 0301 	add.w	r3, r3, #1
    787c:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    787e:	d31a      	bcc.n	78b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    7880:	7a26      	ldrb	r6, [r4, #8]
    7882:	2e00      	cmp	r6, #0
    7884:	d1f6      	bne.n	7874 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    7886:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    788a:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    788c:	6827      	ldr	r7, [r4, #0]
    788e:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    7890:	3301      	adds	r3, #1
    7892:	429f      	cmp	r7, r3
    7894:	d812      	bhi.n	78bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7896:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    789a:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    789e:	f004 fbf5 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    78a2:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    78a4:	b150      	cbz	r0, 78bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    78a6:	f3c7 0708 	ubfx	r7, r7, #0, #9
    78aa:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    78ac:	1c5a      	adds	r2, r3, #1
    78ae:	d009      	beq.n	78c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    78b0:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    78b2:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    78b4:	d2e4      	bcs.n	7880 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    78b6:	2001      	movs	r0, #1
}
    78b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    78bc:	f04f 30ff 	mov.w	r0, #4294967295
}
    78c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    78c4:	4630      	mov	r0, r6
}
    78c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78ca:	bf00      	nop

000078cc <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    78cc:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    78ce:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    78d2:	3301      	adds	r3, #1
    78d4:	428b      	cmp	r3, r1
    78d6:	d202      	bcs.n	78de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    78d8:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    78dc:	bd38      	pop	{r3, r4, r5, pc}
    78de:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    78e0:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    78e4:	4615      	mov	r5, r2
    78e6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    78ea:	2200      	movs	r2, #0
    78ec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    78f0:	f004 fbcc 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    78f4:	2800      	cmp	r0, #0
    78f6:	d0ef      	beq.n	78d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    78f8:	00a4      	lsls	r4, r4, #2
    78fa:	f3c4 0408 	ubfx	r4, r4, #0, #9
    78fe:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    7900:	1c5a      	adds	r2, r3, #1
    7902:	d002      	beq.n	790a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    7904:	2001      	movs	r0, #1
  *value = next;
    7906:	602b      	str	r3, [r5, #0]
}
    7908:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    790a:	2000      	movs	r0, #0
}
    790c:	bd38      	pop	{r3, r4, r5, pc}
    790e:	bf00      	nop

00007910 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7910:	2901      	cmp	r1, #1
    7912:	d91b      	bls.n	794c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7914:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    7916:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    791a:	460c      	mov	r4, r1
    791c:	3301      	adds	r3, #1
    791e:	428b      	cmp	r3, r1
    7920:	d201      	bcs.n	7926 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    7922:	2000      	movs	r0, #0
}
    7924:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7926:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    792a:	4615      	mov	r5, r2
    792c:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7930:	2201      	movs	r2, #1
    7932:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7936:	f004 fba9 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    793a:	4603      	mov	r3, r0
    793c:	2800      	cmp	r0, #0
    793e:	d0f0      	beq.n	7922 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    7940:	00a4      	lsls	r4, r4, #2
  return true;
    7942:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    7944:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    7948:	511d      	str	r5, [r3, r4]
}
    794a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    794c:	2000      	movs	r0, #0
}
    794e:	4770      	bx	lr

00007950 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    7950:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    7954:	3301      	adds	r3, #1
    7956:	4299      	cmp	r1, r3
    7958:	d901      	bls.n	795e <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    795a:	2000      	movs	r0, #0
    795c:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    795e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7962:	4605      	mov	r5, r0
    7964:	b083      	sub	sp, #12
    7966:	460c      	mov	r4, r1
    7968:	f500 7904 	add.w	r9, r0, #528	; 0x210
    796c:	460f      	mov	r7, r1
    796e:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7972:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    7976:	2200      	movs	r2, #0
    7978:	4648      	mov	r0, r9
    797a:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    797e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    7982:	f004 fb83 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    7986:	b190      	cbz	r0, 79ae <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    7988:	00a3      	lsls	r3, r4, #2
    798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    798e:	58c2      	ldr	r2, [r0, r3]
    7990:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    7992:	1c53      	adds	r3, r2, #1
    7994:	bf16      	itet	ne
    7996:	4616      	movne	r6, r2
    7998:	f04f 0a00 	moveq.w	sl, #0
    799c:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    79a0:	2c01      	cmp	r4, #1
    79a2:	d904      	bls.n	79ae <ExFatPartition::freeChain(unsigned long)+0x5e>
    79a4:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    79a8:	3201      	adds	r2, #1
    79aa:	4294      	cmp	r4, r2
    79ac:	d903      	bls.n	79b6 <ExFatPartition::freeChain(unsigned long)+0x66>
}
    79ae:	2000      	movs	r0, #0
    79b0:	b003      	add	sp, #12
    79b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    79b6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    79ba:	2201      	movs	r2, #1
    79bc:	4648      	mov	r0, r9
    79be:	4459      	add	r1, fp
    79c0:	f004 fb64 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    79c4:	2800      	cmp	r0, #0
    79c6:	d0f2      	beq.n	79ae <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    79c8:	9b01      	ldr	r3, [sp, #4]
    79ca:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    79ce:	f1ba 0f00 	cmp.w	sl, #0
    79d2:	d012      	beq.n	79fa <ExFatPartition::freeChain(unsigned long)+0xaa>
    79d4:	3401      	adds	r4, #1
    79d6:	42b4      	cmp	r4, r6
    79d8:	d008      	beq.n	79ec <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    79da:	2300      	movs	r3, #0
    79dc:	1be2      	subs	r2, r4, r7
    79de:	4639      	mov	r1, r7
    79e0:	4628      	mov	r0, r5
    79e2:	f7ff fe99 	bl	7718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    79e6:	2800      	cmp	r0, #0
    79e8:	d0e1      	beq.n	79ae <ExFatPartition::freeChain(unsigned long)+0x5e>
    79ea:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    79ec:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    79f0:	3301      	adds	r3, #1
    79f2:	42b3      	cmp	r3, r6
    79f4:	d3db      	bcc.n	79ae <ExFatPartition::freeChain(unsigned long)+0x5e>
    79f6:	4634      	mov	r4, r6
    79f8:	e7bb      	b.n	7972 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    79fa:	1c62      	adds	r2, r4, #1
    79fc:	4653      	mov	r3, sl
    79fe:	4639      	mov	r1, r7
    7a00:	4628      	mov	r0, r5
    7a02:	1bd2      	subs	r2, r2, r7
}
    7a04:	b003      	add	sp, #12
    7a06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    7a0a:	f7ff be85 	b.w	7718 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7a0e:	bf00      	nop

00007a10 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    7a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    7a14:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    7a16:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    7a18:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    7a1c:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    7a20:	462c      	mov	r4, r5
    7a22:	2200      	movs	r2, #0
    7a24:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    7a26:	1c4f      	adds	r7, r1, #1
    7a28:	f004 fb30 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    7a2c:	b1a8      	cbz	r0, 7a5a <ExFatPartition::freeClusterCount()+0x4a>
    7a2e:	f100 3eff 	add.w	lr, r0, #4294967295
    7a32:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    7a36:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    7a3a:	e005      	b.n	7a48 <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    7a3c:	b979      	cbnz	r1, 7a5e <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    7a3e:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    7a40:	4284      	cmp	r4, r0
    7a42:	d209      	bcs.n	7a58 <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    7a44:	454c      	cmp	r4, r9
    7a46:	d016      	beq.n	7a76 <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    7a48:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    7a4c:	29ff      	cmp	r1, #255	; 0xff
    7a4e:	d1f5      	bne.n	7a3c <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    7a50:	3408      	adds	r4, #8
        usedCount+= 8;
    7a52:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    7a54:	4284      	cmp	r4, r0
    7a56:	d3f5      	bcc.n	7a44 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    7a58:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    7a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7a5e:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7a60:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    7a62:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    7a68:	bf18      	it	ne
    7a6a:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    7a6c:	3a01      	subs	r2, #1
    7a6e:	fa5f f38c 	uxtb.w	r3, ip
    7a72:	d1f6      	bne.n	7a62 <ExFatPartition::freeClusterCount()+0x52>
    7a74:	e7e3      	b.n	7a3e <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    7a76:	4639      	mov	r1, r7
    7a78:	e7d3      	b.n	7a22 <ExFatPartition::freeClusterCount()+0x12>
    7a7a:	bf00      	nop

00007a7c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    7a7e:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    7a80:	f04f 36ff 	mov.w	r6, #4294967295
    7a84:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a88:	4615      	mov	r5, r2
  m_blockDev = dev;
    7a8a:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a8e:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    7a90:	6041      	str	r1, [r0, #4]
    7a92:	461a      	mov	r2, r3
    7a94:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    7a98:	4619      	mov	r1, r3
  m_fatType = 0;
    7a9a:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    7a9e:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    7aa0:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    7aa2:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7aa6:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    7aaa:	4638      	mov	r0, r7
    7aac:	f004 faee 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    7ab0:	2d04      	cmp	r5, #4
    7ab2:	d80d      	bhi.n	7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    7ab4:	4606      	mov	r6, r0
    7ab6:	b158      	cbz	r0, 7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    7ab8:	b1bd      	cbz	r5, 7aea <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    7aba:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    7abc:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    7ac0:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    7ac4:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    7ac8:	d102      	bne.n	7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    7aca:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    7ace:	b90b      	cbnz	r3, 7ad4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    7ad0:	2000      	movs	r0, #0
}
    7ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    7ad4:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    7ad8:	4638      	mov	r0, r7
    7ada:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    7ade:	4629      	mov	r1, r5
    7ae0:	f004 fad4 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    7ae4:	4606      	mov	r6, r0
    7ae6:	2800      	cmp	r0, #0
    7ae8:	d0f2      	beq.n	7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    7aea:	2205      	movs	r2, #5
    7aec:	491a      	ldr	r1, [pc, #104]	; (7b58 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    7aee:	1cf0      	adds	r0, r6, #3
    7af0:	f009 ff62 	bl	119b8 <strncmp>
    7af4:	2800      	cmp	r0, #0
    7af6:	d1eb      	bne.n	7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    7af8:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    7afc:	2b09      	cmp	r3, #9
    7afe:	d1e7      	bne.n	7ad0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7b00:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    7b02:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    7b04:	442b      	add	r3, r5
    7b06:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    7b0a:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    7b0c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7b10:	6db3      	ldr	r3, [r6, #88]	; 0x58
    7b12:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7b14:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    7b16:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    7b1a:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    7b1c:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    7b20:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    7b22:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7b26:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    7b2a:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    7b2e:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7b30:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    7b34:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7b38:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    7b3c:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    7b3e:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    7b42:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    7b46:	462a      	mov	r2, r5
    7b48:	f7ff fd86 	bl	7658 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    7b4c:	2340      	movs	r3, #64	; 0x40
  return true;
    7b4e:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    7b50:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    7b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b56:	bf00      	nop
    7b58:	20000b08 	.word	0x20000b08

00007b5c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    7b5c:	b510      	push	{r4, lr}
    7b5e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    7b60:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    7b64:	f7ff fe2e 	bl	77c4 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7b68:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    7b6c:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    7b6e:	b2db      	uxtb	r3, r3
}
    7b70:	4098      	lsls	r0, r3
    7b72:	bd10      	pop	{r4, pc}

00007b74 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    7b74:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    7b76:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    7b7a:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    7b7c:	2300      	movs	r3, #0
    7b7e:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7b80:	4668      	mov	r0, sp
    7b82:	4621      	mov	r1, r4
    7b84:	930c      	str	r3, [sp, #48]	; 0x30
    7b86:	f7fe ff77 	bl	6a78 <ExFatFile::open(ExFatFile*, char const*, int)>
    7b8a:	4605      	mov	r5, r0
    7b8c:	b1d8      	cbz	r0, 7bc6 <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7b8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    7b92:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    7b96:	d019      	beq.n	7bcc <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7b98:	46ee      	mov	lr, sp
    7b9a:	46a4      	mov	ip, r4
    7b9c:	ae0c      	add	r6, sp, #48	; 0x30
    7b9e:	4674      	mov	r4, lr
    7ba0:	f10c 0c10 	add.w	ip, ip, #16
    7ba4:	f10e 0e10 	add.w	lr, lr, #16
    7ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7baa:	42b4      	cmp	r4, r6
    7bac:	f84c 0c10 	str.w	r0, [ip, #-16]
    7bb0:	f84c 1c0c 	str.w	r1, [ip, #-12]
    7bb4:	f84c 2c08 	str.w	r2, [ip, #-8]
    7bb8:	f84c 3c04 	str.w	r3, [ip, #-4]
    7bbc:	d1ef      	bne.n	7b9e <ExFatVolume::chdir(char const*)+0x2a>
    7bbe:	f8de 0000 	ldr.w	r0, [lr]
    7bc2:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    7bc6:	4628      	mov	r0, r5
    7bc8:	b00e      	add	sp, #56	; 0x38
    7bca:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7bcc:	461d      	mov	r5, r3
}
    7bce:	4628      	mov	r0, r5
    7bd0:	b00e      	add	sp, #56	; 0x38
    7bd2:	bd70      	pop	{r4, r5, r6, pc}

00007bd4 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7bd4:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7bd6:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    7bda:	b082      	sub	sp, #8
    7bdc:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7bde:	2b00      	cmp	r3, #0
    7be0:	db0d      	blt.n	7bfe <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    7be2:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7be4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7be8:	f004 fa24 	bl	c034 <FsCache::sync()>
    7bec:	2800      	cmp	r0, #0
    7bee:	d13b      	bne.n	7c68 <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7bf0:	7863      	ldrb	r3, [r4, #1]
  return false;
    7bf2:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7bf4:	f043 0301 	orr.w	r3, r3, #1
    7bf8:	7063      	strb	r3, [r4, #1]
}
    7bfa:	b002      	add	sp, #8
    7bfc:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    7bfe:	6880      	ldr	r0, [r0, #8]
    7c00:	2201      	movs	r2, #1
    7c02:	69a1      	ldr	r1, [r4, #24]
    7c04:	3028      	adds	r0, #40	; 0x28
    7c06:	f004 fa41 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d0f0      	beq.n	7bf0 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    7c0e:	88a5      	ldrh	r5, [r4, #4]
    7c10:	f005 050f 	and.w	r5, r5, #15
    7c14:	016b      	lsls	r3, r5, #5
    7c16:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7c1a:	5cc3      	ldrb	r3, [r0, r3]
    7c1c:	2be5      	cmp	r3, #229	; 0xe5
    7c1e:	d0e7      	beq.n	7bf0 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    7c20:	7823      	ldrb	r3, [r4, #0]
    7c22:	071b      	lsls	r3, r3, #28
    7c24:	d501      	bpl.n	7c2a <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    7c26:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7c28:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7c2a:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    7c2c:	4915      	ldr	r1, [pc, #84]	; (7c84 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7c2e:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7c30:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    7c32:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7c34:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    7c36:	b166      	cbz	r6, 7c52 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    7c38:	f10d 0203 	add.w	r2, sp, #3
    7c3c:	f10d 0106 	add.w	r1, sp, #6
    7c40:	a801      	add	r0, sp, #4
    7c42:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    7c44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7c48:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    7c4c:	832b      	strh	r3, [r5, #24]
    7c4e:	826b      	strh	r3, [r5, #18]
    7c50:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7c52:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7c54:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7c5a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7c5e:	70a3      	strb	r3, [r4, #2]
    7c60:	f004 f9e8 	bl	c034 <FsCache::sync()>
    7c64:	2800      	cmp	r0, #0
    7c66:	d0c3      	beq.n	7bf0 <FatFile::sync() [clone .part.0]+0x1c>
    7c68:	f505 700e 	add.w	r0, r5, #568	; 0x238
    7c6c:	f004 f9e2 	bl	c034 <FsCache::sync()>
    7c70:	2800      	cmp	r0, #0
    7c72:	d0bd      	beq.n	7bf0 <FatFile::sync() [clone .part.0]+0x1c>
    7c74:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    7c76:	6803      	ldr	r3, [r0, #0]
    7c78:	6a1b      	ldr	r3, [r3, #32]
    7c7a:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7c7c:	2800      	cmp	r0, #0
    7c7e:	d0b7      	beq.n	7bf0 <FatFile::sync() [clone .part.0]+0x1c>
    7c80:	e7bb      	b.n	7bfa <FatFile::sync() [clone .part.0]+0x26>
    7c82:	bf00      	nop
    7c84:	200284dc 	.word	0x200284dc

00007c88 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    7c88:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    7c8a:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    7c8c:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    7c90:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7c92:	6880      	ldr	r0, [r0, #8]
    7c94:	4629      	mov	r1, r5
    7c96:	f001 fd65 	bl	9764 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7c9a:	b150      	cbz	r0, 7cb2 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    7c9c:	b155      	cbz	r5, 7cb4 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    7c9e:	6923      	ldr	r3, [r4, #16]
    7ca0:	3501      	adds	r5, #1
    7ca2:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7ca4:	78a3      	ldrb	r3, [r4, #2]
    7ca6:	bf18      	it	ne
    7ca8:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7cac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7cb0:	70a3      	strb	r3, [r4, #2]
}
    7cb2:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    7cb4:	78a3      	ldrb	r3, [r4, #2]
    7cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7cba:	e7f7      	b.n	7cac <FatFile::addCluster()+0x24>

00007cbc <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    7cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    7cbe:	7804      	ldrb	r4, [r0, #0]
    7cc0:	f014 0420 	ands.w	r4, r4, #32
    7cc4:	d104      	bne.n	7cd0 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    7cc6:	4b1a      	ldr	r3, [pc, #104]	; (7d30 <FatFile::addDirCluster()+0x74>)
    7cc8:	4605      	mov	r5, r0
    7cca:	6942      	ldr	r2, [r0, #20]
    7ccc:	429a      	cmp	r2, r3
    7cce:	d302      	bcc.n	7cd6 <FatFile::addDirCluster()+0x1a>
  return false;
    7cd0:	2700      	movs	r7, #0
}
    7cd2:	4638      	mov	r0, r7
    7cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    7cd6:	f7ff ffd7 	bl	7c88 <FatFile::addCluster()>
    7cda:	4607      	mov	r7, r0
    7cdc:	2800      	cmp	r0, #0
    7cde:	d0f7      	beq.n	7cd0 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    7ce0:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7ce2:	692e      	ldr	r6, [r5, #16]
    7ce4:	7982      	ldrb	r2, [r0, #6]
    7ce6:	3e02      	subs	r6, #2
    7ce8:	6941      	ldr	r1, [r0, #20]
    7cea:	4096      	lsls	r6, r2
    7cec:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7cee:	7901      	ldrb	r1, [r0, #4]
    7cf0:	b1a9      	cbz	r1, 7d1e <FatFile::addDirCluster()+0x62>
    7cf2:	4621      	mov	r1, r4
    7cf4:	e006      	b.n	7d04 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    7cf6:	f009 fdb7 	bl	11868 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7cfa:	68a8      	ldr	r0, [r5, #8]
    7cfc:	b2e1      	uxtb	r1, r4
    7cfe:	7902      	ldrb	r2, [r0, #4]
    7d00:	428a      	cmp	r2, r1
    7d02:	d90b      	bls.n	7d1c <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    7d04:	4431      	add	r1, r6
    7d06:	2205      	movs	r2, #5
    7d08:	3028      	adds	r0, #40	; 0x28
    7d0a:	3401      	adds	r4, #1
    7d0c:	f004 f9be 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    7d10:	f44f 7200 	mov.w	r2, #512	; 0x200
    7d14:	2100      	movs	r1, #0
    if (!pc) {
    7d16:	2800      	cmp	r0, #0
    7d18:	d1ed      	bne.n	7cf6 <FatFile::addDirCluster()+0x3a>
    7d1a:	e7d9      	b.n	7cd0 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7d1c:	7982      	ldrb	r2, [r0, #6]
    7d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    7d22:	6969      	ldr	r1, [r5, #20]
}
    7d24:	4638      	mov	r0, r7
    7d26:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7d28:	fa11 f383 	uxtah	r3, r1, r3
    7d2c:	616b      	str	r3, [r5, #20]
}
    7d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d30:	001ffe00 	.word	0x001ffe00

00007d34 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7d34:	b510      	push	{r4, lr}
    7d36:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    7d38:	6880      	ldr	r0, [r0, #8]
    7d3a:	460a      	mov	r2, r1
    7d3c:	3028      	adds	r0, #40	; 0x28
    7d3e:	69a1      	ldr	r1, [r4, #24]
    7d40:	f004 f9a4 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7d44:	b120      	cbz	r0, 7d50 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    7d46:	88a3      	ldrh	r3, [r4, #4]
    7d48:	f003 030f 	and.w	r3, r3, #15
    7d4c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    7d50:	bd10      	pop	{r4, pc}
    7d52:	bf00      	nop

00007d54 <FatFile::close()>:
bool FatFile::close() {
    7d54:	b510      	push	{r4, lr}
  if (!isOpen()) {
    7d56:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    7d58:	4604      	mov	r4, r0
  if (!isOpen()) {
    7d5a:	b12b      	cbz	r3, 7d68 <FatFile::close()+0x14>
    7d5c:	f7ff ff3a 	bl	7bd4 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    7d60:	2300      	movs	r3, #0
    7d62:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7d64:	70a3      	strb	r3, [r4, #2]
}
    7d66:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    7d68:	2300      	movs	r3, #0
    return true;
    7d6a:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    7d6c:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    7d6e:	70a3      	strb	r3, [r4, #2]
}
    7d70:	bd10      	pop	{r4, pc}
    7d72:	bf00      	nop

00007d74 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    7d74:	780b      	ldrb	r3, [r1, #0]
    7d76:	f013 0f70 	tst.w	r3, #112	; 0x70
    7d7a:	d101      	bne.n	7d80 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    7d7c:	2000      	movs	r0, #0
    7d7e:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7d82:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7d86:	b089      	sub	sp, #36	; 0x24
    7d88:	460d      	mov	r5, r1
    7d8a:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7d8c:	f001 f84a 	bl	8e24 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7d90:	b138      	cbz	r0, 7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    7d92:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7d94:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7d96:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7d98:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7d9a:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    7d9c:	f7ff ff8e 	bl	7cbc <FatFile::addDirCluster()>
    7da0:	b910      	cbnz	r0, 7da8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    7da2:	2000      	movs	r0, #0
    7da4:	b009      	add	sp, #36	; 0x24
    7da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    7da8:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    7daa:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    7dac:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    7dae:	b16b      	cbz	r3, 7dcc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    7db0:	6963      	ldr	r3, [r4, #20]
    7db2:	b133      	cbz	r3, 7dc2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7db4:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    7db6:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7db8:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    7dbc:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7dc0:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    7dc2:	4620      	mov	r0, r4
    7dc4:	f7ff ff06 	bl	7bd4 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    7dc8:	2800      	cmp	r0, #0
    7dca:	d0ea      	beq.n	7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7dcc:	68a0      	ldr	r0, [r4, #8]
    7dce:	2201      	movs	r2, #1
    7dd0:	69a1      	ldr	r1, [r4, #24]
    7dd2:	3028      	adds	r0, #40	; 0x28
    7dd4:	f004 f95a 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7dd8:	2800      	cmp	r0, #0
    7dda:	d0e2      	beq.n	7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    7ddc:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7de0:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    7de2:	f00c 0c0f 	and.w	ip, ip, #15
    7de6:	ea4f 134c 	mov.w	r3, ip, lsl #5
    7dea:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7dee:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    7df2:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    7df4:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7df6:	6a23      	ldr	r3, [r4, #32]
    7df8:	f897 e006 	ldrb.w	lr, [r7, #6]
    7dfc:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    7dfe:	f8dc 1004 	ldr.w	r1, [ip, #4]
    7e02:	f8dc 2008 	ldr.w	r2, [ip, #8]
    7e06:	f8dc 300c 	ldr.w	r3, [ip, #12]
    7e0a:	fa06 f60e 	lsl.w	r6, r6, lr
    7e0e:	46ee      	mov	lr, sp
    7e10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7e14:	f8dc 0010 	ldr.w	r0, [ip, #16]
    7e18:	f8dc 1014 	ldr.w	r1, [ip, #20]
    7e1c:	f8dc 2018 	ldr.w	r2, [ip, #24]
    7e20:	f8dc 301c 	ldr.w	r3, [ip, #28]
    7e24:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    7e28:	697b      	ldr	r3, [r7, #20]
    7e2a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    7e2e:	2201      	movs	r2, #1
    7e30:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    7e32:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    7e36:	f8cd 3001 	str.w	r3, [sp, #1]
    7e3a:	f8cd 3005 	str.w	r3, [sp, #5]
    7e3e:	f8ad 3009 	strh.w	r3, [sp, #9]
    7e42:	f004 f923 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7e46:	4684      	mov	ip, r0
    7e48:	2800      	cmp	r0, #0
    7e4a:	d0aa      	beq.n	7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    7e4c:	272e      	movs	r7, #46	; 0x2e
    7e4e:	46ee      	mov	lr, sp
    7e50:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    7e54:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    7e56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e5a:	f8cc 0000 	str.w	r0, [ip]
    7e5e:	f8cc 1004 	str.w	r1, [ip, #4]
    7e62:	f8cc 2008 	str.w	r2, [ip, #8]
    7e66:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    7e6a:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    7e6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7e72:	f8cc 0010 	str.w	r0, [ip, #16]
    7e76:	f8cc 1014 	str.w	r1, [ip, #20]
    7e7a:	f8cc 2018 	str.w	r2, [ip, #24]
    7e7e:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7e82:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7e84:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7e86:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7e8a:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7e8e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7e90:	f8cc 0020 	str.w	r0, [ip, #32]
    7e94:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    7e98:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    7e9c:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    7ea0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7ea2:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    7ea6:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    7eaa:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    7eae:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    7eb2:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7eb4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7eb8:	f004 f8bc 	bl	c034 <FsCache::sync()>
    7ebc:	2800      	cmp	r0, #0
    7ebe:	f43f af70 	beq.w	7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7ec2:	f504 700e 	add.w	r0, r4, #568	; 0x238
    7ec6:	f004 f8b5 	bl	c034 <FsCache::sync()>
    7eca:	2800      	cmp	r0, #0
    7ecc:	f43f af69 	beq.w	7da2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    7ed0:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7ed2:	6803      	ldr	r3, [r0, #0]
    7ed4:	6a1b      	ldr	r3, [r3, #32]
}
    7ed6:	b009      	add	sp, #36	; 0x24
    7ed8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    7edc:	4718      	bx	r3
    7ede:	bf00      	nop

00007ee0 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    7ee4:	2600      	movs	r6, #0
    7ee6:	b094      	sub	sp, #80	; 0x50
    7ee8:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    7eea:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7eec:	9201      	str	r2, [sp, #4]
    7eee:	f8ad 6014 	strh.w	r6, [sp, #20]
    7ef2:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7ef4:	2b00      	cmp	r3, #0
    7ef6:	d141      	bne.n	7f7c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7ef8:	780b      	ldrb	r3, [r1, #0]
    7efa:	460d      	mov	r5, r1
    7efc:	f013 0f70 	tst.w	r3, #112	; 0x70
    7f00:	d03c      	beq.n	7f7c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    7f02:	7813      	ldrb	r3, [r2, #0]
    7f04:	4604      	mov	r4, r0
    7f06:	4616      	mov	r6, r2
    7f08:	2b2f      	cmp	r3, #47	; 0x2f
    7f0a:	d03b      	beq.n	7f84 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    7f0c:	2700      	movs	r7, #0
    7f0e:	e028      	b.n	7f62 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    7f10:	9e01      	ldr	r6, [sp, #4]
    7f12:	7836      	ldrb	r6, [r6, #0]
    7f14:	2e00      	cmp	r6, #0
    7f16:	d050      	beq.n	7fba <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    7f18:	f000 ff84 	bl	8e24 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7f1c:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    7f1e:	aa02      	add	r2, sp, #8
    7f20:	4629      	mov	r1, r5
    7f22:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    7f24:	b92b      	cbnz	r3, 7f32 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    7f26:	f1b8 0f00 	cmp.w	r8, #0
    7f2a:	d027      	beq.n	7f7c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7f2c:	f7ff ff22 	bl	7d74 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7f30:	b320      	cbz	r0, 7f7c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    7f32:	46a6      	mov	lr, r4
    7f34:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    7f38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7f3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7f40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    7f44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    7f48:	f8de 5000 	ldr.w	r5, [lr]
    7f4c:	4620      	mov	r0, r4
  if (!isOpen()) {
    7f4e:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    7f50:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    7f54:	b10b      	cbz	r3, 7f5a <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    7f56:	f7ff fe3d 	bl	7bd4 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    7f5a:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    7f5c:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    7f5e:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    7f60:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    7f62:	4631      	mov	r1, r6
    7f64:	ab01      	add	r3, sp, #4
    7f66:	aa02      	add	r2, sp, #8
    7f68:	4620      	mov	r0, r4
    7f6a:	f001 f8a7 	bl	90bc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7f6e:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    7f70:	aa02      	add	r2, sp, #8
    7f72:	4629      	mov	r1, r5
    7f74:	2300      	movs	r3, #0
    7f76:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    7f78:	2e00      	cmp	r6, #0
    7f7a:	d1c9      	bne.n	7f10 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    7f7c:	2000      	movs	r0, #0
}
    7f7e:	b014      	add	sp, #80	; 0x50
    7f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    7f84:	3601      	adds	r6, #1
    7f86:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    7f88:	7833      	ldrb	r3, [r6, #0]
    7f8a:	2b2f      	cmp	r3, #47	; 0x2f
    7f8c:	d0fa      	beq.n	7f84 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7f8e:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    7f90:	2224      	movs	r2, #36	; 0x24
    7f92:	2100      	movs	r1, #0
    7f94:	a80b      	add	r0, sp, #44	; 0x2c
    7f96:	f009 fc67 	bl	11868 <memset>
  m_vol = vol;
    7f9a:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    7f9c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7f9e:	2b10      	cmp	r3, #16
    7fa0:	d003      	beq.n	7faa <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    7fa2:	2b20      	cmp	r3, #32
    7fa4:	d00f      	beq.n	7fc6 <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    7fa6:	2b0c      	cmp	r3, #12
    7fa8:	d1e8      	bne.n	7f7c <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    7faa:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7fac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    7fb0:	2301      	movs	r3, #1
    parent = &tmpDir;
    7fb2:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    7fb4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    7fb8:	e7a8      	b.n	7f0c <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    7fba:	aa02      	add	r2, sp, #8
    7fbc:	f7ff feda 	bl	7d74 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    7fc0:	b014      	add	sp, #80	; 0x50
    7fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    7fc6:	2340      	movs	r3, #64	; 0x40
    7fc8:	e7f0      	b.n	7fac <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    7fca:	bf00      	nop

00007fcc <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fd0:	2500      	movs	r5, #0
    7fd2:	b094      	sub	sp, #80	; 0x50
    7fd4:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    7fd6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7fd8:	9201      	str	r2, [sp, #4]
    7fda:	9502      	str	r5, [sp, #8]
    7fdc:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7fe0:	2b00      	cmp	r3, #0
    7fe2:	d137      	bne.n	8054 <FatFile::open(FatFile*, char const*, int)+0x88>
    7fe4:	780b      	ldrb	r3, [r1, #0]
    7fe6:	460e      	mov	r6, r1
    7fe8:	f013 0f70 	tst.w	r3, #112	; 0x70
    7fec:	d032      	beq.n	8054 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    7fee:	7813      	ldrb	r3, [r2, #0]
    7ff0:	4604      	mov	r4, r0
    7ff2:	4615      	mov	r5, r2
    7ff4:	2b2f      	cmp	r3, #47	; 0x2f
    7ff6:	d031      	beq.n	805c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7ff8:	2700      	movs	r7, #0
    7ffa:	e01e      	b.n	803a <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    7ffc:	9d01      	ldr	r5, [sp, #4]
    7ffe:	782d      	ldrb	r5, [r5, #0]
    8000:	2d00      	cmp	r5, #0
    8002:	d040      	beq.n	8086 <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8004:	f000 ff0e 	bl	8e24 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    8008:	46a6      	mov	lr, r4
    800a:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    800e:	b308      	cbz	r0, 8054 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    8010:	4666      	mov	r6, ip
  if (!isOpen()) {
    8012:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    8014:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8018:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    801c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8020:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8024:	f8de 3000 	ldr.w	r3, [lr]
    8028:	4620      	mov	r0, r4
    802a:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    802e:	b10d      	cbz	r5, 8034 <FatFile::open(FatFile*, char const*, int)+0x68>
    8030:	f7ff fdd0 	bl	7bd4 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8034:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    8036:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8038:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    803a:	4629      	mov	r1, r5
    803c:	ab01      	add	r3, sp, #4
    803e:	aa0b      	add	r2, sp, #44	; 0x2c
    8040:	4620      	mov	r0, r4
    8042:	f001 f83b 	bl	90bc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8046:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    8048:	aa0b      	add	r2, sp, #44	; 0x2c
    804a:	4631      	mov	r1, r6
    804c:	2300      	movs	r3, #0
    804e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8050:	2d00      	cmp	r5, #0
    8052:	d1d3      	bne.n	7ffc <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    8054:	2000      	movs	r0, #0
}
    8056:	b014      	add	sp, #80	; 0x50
    8058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    805c:	3501      	adds	r5, #1
    805e:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    8060:	7829      	ldrb	r1, [r5, #0]
    8062:	292f      	cmp	r1, #47	; 0x2f
    8064:	d0fa      	beq.n	805c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    8066:	b9a9      	cbnz	r1, 8094 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    8068:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    806a:	2224      	movs	r2, #36	; 0x24
    806c:	4620      	mov	r0, r4
    806e:	f009 fbfb 	bl	11868 <memset>
  m_vol = vol;
    8072:	60a5      	str	r5, [r4, #8]
    8074:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8076:	2b10      	cmp	r3, #16
    8078:	d003      	beq.n	8082 <FatFile::open(FatFile*, char const*, int)+0xb6>
    807a:	2b20      	cmp	r3, #32
    807c:	d022      	beq.n	80c4 <FatFile::open(FatFile*, char const*, int)+0xf8>
    807e:	2b0c      	cmp	r3, #12
    8080:	d1e8      	bne.n	8054 <FatFile::open(FatFile*, char const*, int)+0x88>
    8082:	2220      	movs	r2, #32
    8084:	e01f      	b.n	80c6 <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    8086:	4643      	mov	r3, r8
    8088:	aa0b      	add	r2, sp, #44	; 0x2c
    808a:	f000 fecb 	bl	8e24 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    808e:	b014      	add	sp, #80	; 0x50
    8090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8094:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8096:	2224      	movs	r2, #36	; 0x24
    8098:	2100      	movs	r1, #0
    809a:	a802      	add	r0, sp, #8
    809c:	f009 fbe4 	bl	11868 <memset>
  m_vol = vol;
    80a0:	9604      	str	r6, [sp, #16]
    80a2:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    80a4:	2b10      	cmp	r3, #16
    80a6:	d003      	beq.n	80b0 <FatFile::open(FatFile*, char const*, int)+0xe4>
    80a8:	2b20      	cmp	r3, #32
    80aa:	d003      	beq.n	80b4 <FatFile::open(FatFile*, char const*, int)+0xe8>
    80ac:	2b0c      	cmp	r3, #12
    80ae:	d1d1      	bne.n	8054 <FatFile::open(FatFile*, char const*, int)+0x88>
    80b0:	2320      	movs	r3, #32
    80b2:	e000      	b.n	80b6 <FatFile::open(FatFile*, char const*, int)+0xea>
    80b4:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    80b6:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    80ba:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    80bc:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    80be:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    80c2:	e799      	b.n	7ff8 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    80c4:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    80c6:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    80c8:	7022      	strb	r2, [r4, #0]
  return true;
    80ca:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    80cc:	70a3      	strb	r3, [r4, #2]
  return true;
    80ce:	e7c2      	b.n	8056 <FatFile::open(FatFile*, char const*, int)+0x8a>

000080d0 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    80d0:	b119      	cbz	r1, 80da <FatFile::open(FatVolume*, char const*, int)+0xa>
    80d2:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    80d6:	f7ff bf79 	b.w	7fcc <FatFile::open(FatFile*, char const*, int)>
}
    80da:	4608      	mov	r0, r1
    80dc:	4770      	bx	lr
    80de:	bf00      	nop

000080e0 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    80e0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    80e2:	b570      	push	{r4, r5, r6, lr}
    80e4:	460d      	mov	r5, r1
    80e6:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    80e8:	b993      	cbnz	r3, 8110 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    80ea:	7806      	ldrb	r6, [r0, #0]
    80ec:	b10e      	cbz	r6, 80f2 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    80ee:	4618      	mov	r0, r3
}
    80f0:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    80f2:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    80f4:	2224      	movs	r2, #36	; 0x24
    80f6:	4631      	mov	r1, r6
    80f8:	f009 fbb6 	bl	11868 <memset>
  m_vol = vol;
    80fc:	60a5      	str	r5, [r4, #8]
    80fe:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8100:	2b10      	cmp	r3, #16
    8102:	d018      	beq.n	8136 <FatFile::openCluster(FatFile*)+0x56>
    8104:	2b20      	cmp	r3, #32
    8106:	d010      	beq.n	812a <FatFile::openCluster(FatFile*)+0x4a>
    8108:	2b0c      	cmp	r3, #12
    810a:	d014      	beq.n	8136 <FatFile::openCluster(FatFile*)+0x56>
    810c:	4630      	mov	r0, r6
}
    810e:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    8110:	2224      	movs	r2, #36	; 0x24
    8112:	2100      	movs	r1, #0
    8114:	f009 fba8 	bl	11868 <memset>
  m_flags = FILE_FLAG_READ;
    8118:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    811a:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    811c:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    811e:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    8120:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    8124:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8126:	6223      	str	r3, [r4, #32]
}
    8128:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    812a:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    812c:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    812e:	7022      	strb	r2, [r4, #0]
  return true;
    8130:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8132:	70a3      	strb	r3, [r4, #2]
}
    8134:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8136:	2220      	movs	r2, #32
    8138:	e7f8      	b.n	812c <FatFile::openCluster(FatFile*)+0x4c>
    813a:	bf00      	nop

0000813c <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    813c:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    813e:	7805      	ldrb	r5, [r0, #0]
    8140:	b10d      	cbz	r5, 8146 <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    8142:	2000      	movs	r0, #0
}
    8144:	bd70      	pop	{r4, r5, r6, pc}
    8146:	460e      	mov	r6, r1
    8148:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    814a:	2224      	movs	r2, #36	; 0x24
    814c:	4629      	mov	r1, r5
    814e:	f009 fb8b 	bl	11868 <memset>
  m_vol = vol;
    8152:	60a6      	str	r6, [r4, #8]
    8154:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8156:	2b10      	cmp	r3, #16
    8158:	d00b      	beq.n	8172 <FatFile::openRoot(FatVolume*)+0x36>
    815a:	2b20      	cmp	r3, #32
    815c:	d003      	beq.n	8166 <FatFile::openRoot(FatVolume*)+0x2a>
    815e:	2b0c      	cmp	r3, #12
    8160:	d007      	beq.n	8172 <FatFile::openRoot(FatVolume*)+0x36>
    8162:	4628      	mov	r0, r5
}
    8164:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8166:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8168:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    816a:	7022      	strb	r2, [r4, #0]
  return true;
    816c:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    816e:	70a3      	strb	r3, [r4, #2]
}
    8170:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8172:	2220      	movs	r2, #32
    8174:	e7f8      	b.n	8168 <FatFile::openRoot(FatVolume*)+0x2c>
    8176:	bf00      	nop

00008178 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    8178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    817c:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    8180:	7883      	ldrb	r3, [r0, #2]
    8182:	b083      	sub	sp, #12
    8184:	4605      	mov	r5, r0
  if (!isReadable()) {
    8186:	07df      	lsls	r7, r3, #31
    8188:	f140 808c 	bpl.w	82a4 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    818c:	4688      	mov	r8, r1
    818e:	7801      	ldrb	r1, [r0, #0]
    8190:	4692      	mov	sl, r2
  if (isFile()) {
    8192:	070e      	lsls	r6, r1, #28
    8194:	f100 8091 	bmi.w	82ba <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    8198:	068c      	lsls	r4, r1, #26
    819a:	d508      	bpl.n	81ae <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    819c:	6883      	ldr	r3, [r0, #8]
    819e:	895a      	ldrh	r2, [r3, #10]
    81a0:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    81a2:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    81a6:	b29b      	uxth	r3, r3
    81a8:	459a      	cmp	sl, r3
    81aa:	bf28      	it	cs
    81ac:	469a      	movcs	sl, r3
  while (toRead) {
    81ae:	f1ba 0f00 	cmp.w	sl, #0
    81b2:	f000 80af 	beq.w	8314 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    81b6:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    81b8:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    81bc:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    81be:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    81c0:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    81c4:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    81c8:	68af      	ldr	r7, [r5, #8]
    81ca:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    81ce:	d53d      	bpl.n	824c <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    81d0:	6a39      	ldr	r1, [r7, #32]
    81d2:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    81d6:	f1bb 0f00 	cmp.w	fp, #0
    81da:	d151      	bne.n	8280 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    81dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    81e0:	d34e      	bcc.n	8280 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    81e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    81e4:	4291      	cmp	r1, r2
    81e6:	d04b      	beq.n	8280 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    81e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    81ec:	f0c0 8082 	bcc.w	82f4 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    81f0:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    81f2:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    81f4:	0680      	lsls	r0, r0, #26
    81f6:	d405      	bmi.n	8204 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    81f8:	7938      	ldrb	r0, [r7, #4]
    81fa:	eba0 0009 	sub.w	r0, r0, r9
    81fe:	4283      	cmp	r3, r0
    8200:	bf28      	it	cs
    8202:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    8204:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    8206:	ea4f 2443 	mov.w	r4, r3, lsl #9
    820a:	d80c      	bhi.n	8226 <FatFile::read(void*, unsigned int)+0xae>
    820c:	18c8      	adds	r0, r1, r3
    820e:	4282      	cmp	r2, r0
    8210:	d209      	bcs.n	8226 <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    8212:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8216:	e9cd 1300 	strd	r1, r3, [sp]
    821a:	f003 ff0b 	bl	c034 <FsCache::sync()>
    821e:	e9dd 1300 	ldrd	r1, r3, [sp]
    8222:	2800      	cmp	r0, #0
    8224:	d03e      	beq.n	82a4 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    8226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8228:	6802      	ldr	r2, [r0, #0]
    822a:	6957      	ldr	r7, [r2, #20]
    822c:	4642      	mov	r2, r8
    822e:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    8230:	2800      	cmp	r0, #0
    8232:	d037      	beq.n	82a4 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    8234:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    8236:	1b36      	subs	r6, r6, r4
    dst += n;
    8238:	44a0      	add	r8, r4
    m_curPosition += n;
    823a:	4422      	add	r2, r4
    823c:	616a      	str	r2, [r5, #20]
  while (toRead) {
    823e:	d069      	beq.n	8314 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    8240:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8242:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    8246:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    8248:	0688      	lsls	r0, r1, #26
    824a:	d4c1      	bmi.n	81d0 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    824c:	f897 9005 	ldrb.w	r9, [r7, #5]
    8250:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    8254:	f1bb 0f00 	cmp.w	fp, #0
    8258:	d136      	bne.n	82c8 <FatFile::read(void*, unsigned int)+0x150>
    825a:	f1b9 0f00 	cmp.w	r9, #0
    825e:	d133      	bne.n	82c8 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    8260:	2a00      	cmp	r2, #0
    8262:	d133      	bne.n	82cc <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8264:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    8266:	bf4c      	ite	mi
    8268:	6a3a      	ldrmi	r2, [r7, #32]
    826a:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    826c:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    826e:	3a02      	subs	r2, #2
    8270:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8272:	6979      	ldr	r1, [r7, #20]
    8274:	4082      	lsls	r2, r0
    8276:	4449      	add	r1, r9
    8278:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    827a:	f1bb 0f00 	cmp.w	fp, #0
    827e:	d0ad      	beq.n	81dc <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    8280:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    8284:	2200      	movs	r2, #0
    8286:	f107 0028 	add.w	r0, r7, #40	; 0x28
    828a:	42b4      	cmp	r4, r6
    828c:	bf28      	it	cs
    828e:	4634      	movcs	r4, r6
    8290:	f003 fefc 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8294:	b130      	cbz	r0, 82a4 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    8296:	eb00 010b 	add.w	r1, r0, fp
    829a:	4622      	mov	r2, r4
    829c:	4640      	mov	r0, r8
    829e:	f005 fa55 	bl	d74c <memcpy>
    82a2:	e7c7      	b.n	8234 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    82a4:	786b      	ldrb	r3, [r5, #1]
  return -1;
    82a6:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    82aa:	f043 0302 	orr.w	r3, r3, #2
    82ae:	706b      	strb	r3, [r5, #1]
}
    82b0:	b003      	add	sp, #12
    82b2:	ecbd 8b02 	vpop	{d8}
    82b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    82ba:	69c3      	ldr	r3, [r0, #28]
    82bc:	6942      	ldr	r2, [r0, #20]
    82be:	1a9b      	subs	r3, r3, r2
    82c0:	459a      	cmp	sl, r3
    82c2:	bf28      	it	cs
    82c4:	469a      	movcs	sl, r3
    82c6:	e772      	b.n	81ae <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    82c8:	692a      	ldr	r2, [r5, #16]
    82ca:	e7d0      	b.n	826e <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    82cc:	070b      	lsls	r3, r1, #28
    82ce:	d505      	bpl.n	82dc <FatFile::read(void*, unsigned int)+0x164>
    82d0:	78aa      	ldrb	r2, [r5, #2]
    82d2:	0654      	lsls	r4, r2, #25
    82d4:	d502      	bpl.n	82dc <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    82d6:	692a      	ldr	r2, [r5, #16]
    82d8:	3201      	adds	r2, #1
    82da:	e7c7      	b.n	826c <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    82dc:	ee18 2a10 	vmov	r2, s16
    82e0:	4638      	mov	r0, r7
    82e2:	6929      	ldr	r1, [r5, #16]
    82e4:	f001 fa8c 	bl	9800 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    82e8:	2800      	cmp	r0, #0
    82ea:	dbdb      	blt.n	82a4 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    82ec:	d00c      	beq.n	8308 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    82ee:	68af      	ldr	r7, [r5, #8]
    82f0:	692a      	ldr	r2, [r5, #16]
    82f2:	e7bc      	b.n	826e <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    82f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    82f6:	4642      	mov	r2, r8
    82f8:	6803      	ldr	r3, [r0, #0]
    82fa:	691b      	ldr	r3, [r3, #16]
    82fc:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    82fe:	2800      	cmp	r0, #0
    8300:	d0d0      	beq.n	82a4 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    8302:	f44f 7400 	mov.w	r4, #512	; 0x200
    8306:	e795      	b.n	8234 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    8308:	782b      	ldrb	r3, [r5, #0]
    830a:	f013 0f70 	tst.w	r3, #112	; 0x70
    830e:	d0c9      	beq.n	82a4 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    8310:	ebaa 0a06 	sub.w	sl, sl, r6
    8314:	4650      	mov	r0, sl
}
    8316:	b003      	add	sp, #12
    8318:	ecbd 8b02 	vpop	{d8}
    831c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008320 <FatFile::peek()>:
int FatFile::peek() {
    8320:	b570      	push	{r4, r5, r6, lr}
    8322:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8324:	2201      	movs	r2, #1
    8326:	4604      	mov	r4, r0
    8328:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    832c:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    8330:	f7ff ff22 	bl	8178 <FatFile::read(void*, unsigned int)>
    8334:	2801      	cmp	r0, #1
    8336:	bf0c      	ite	eq
    8338:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    833c:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    8340:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    8344:	b002      	add	sp, #8
    8346:	bd70      	pop	{r4, r5, r6, pc}

00008348 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8348:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    834a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    834e:	b530      	push	{r4, r5, lr}
    8350:	4604      	mov	r4, r0
    8352:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8354:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    8358:	d009      	beq.n	836e <FatFile::readDirCache(bool)+0x26>
    835a:	2901      	cmp	r1, #1
    835c:	d107      	bne.n	836e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    835e:	3320      	adds	r3, #32
    8360:	6143      	str	r3, [r0, #20]
    return m_buffer;
    8362:	68a0      	ldr	r0, [r4, #8]
    8364:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    8366:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    836a:	b003      	add	sp, #12
    836c:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    836e:	2201      	movs	r2, #1
    8370:	f10d 0107 	add.w	r1, sp, #7
    8374:	4620      	mov	r0, r4
    8376:	f7ff feff 	bl	8178 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    837a:	b240      	sxtb	r0, r0
    837c:	2801      	cmp	r0, #1
    837e:	d103      	bne.n	8388 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    8380:	6963      	ldr	r3, [r4, #20]
    8382:	331f      	adds	r3, #31
    8384:	6163      	str	r3, [r4, #20]
    8386:	e7ec      	b.n	8362 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    8388:	2000      	movs	r0, #0
    838a:	e7ee      	b.n	836a <FatFile::readDirCache(bool)+0x22>

0000838c <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    838c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    8390:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    8392:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    8394:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    8396:	f013 0f18 	tst.w	r3, #24
    839a:	9608      	str	r6, [sp, #32]
    839c:	9611      	str	r6, [sp, #68]	; 0x44
    839e:	d006      	beq.n	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    83a0:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    83a2:	6883      	ldr	r3, [r0, #8]
    83a4:	688a      	ldr	r2, [r1, #8]
    83a6:	4604      	mov	r4, r0
    83a8:	460d      	mov	r5, r1
    83aa:	429a      	cmp	r2, r3
    83ac:	d003      	beq.n	83b6 <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    83ae:	2000      	movs	r0, #0
}
    83b0:	b01a      	add	sp, #104	; 0x68
    83b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83b6:	f7ff fc0d 	bl	7bd4 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    83ba:	46a6      	mov	lr, r4
    83bc:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    83c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    83c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    83cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    83d0:	f8de 3000 	ldr.w	r3, [lr]
    83d4:	4632      	mov	r2, r6
    83d6:	69a1      	ldr	r1, [r4, #24]
    83d8:	f8cc 3000 	str.w	r3, [ip]
    83dc:	68a3      	ldr	r3, [r4, #8]
    83de:	f103 0028 	add.w	r0, r3, #40	; 0x28
    83e2:	f003 fe53 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    83e6:	2800      	cmp	r0, #0
    83e8:	d0e1      	beq.n	83ae <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    83ea:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    83ec:	46ec      	mov	ip, sp
  if (isFile()) {
    83ee:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    83f2:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    83f6:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    83fa:	0152      	lsls	r2, r2, #5
    83fc:	f8de 1004 	ldr.w	r1, [lr, #4]
    8400:	5880      	ldr	r0, [r0, r2]
    8402:	f8de 300c 	ldr.w	r3, [lr, #12]
    8406:	f8de 2008 	ldr.w	r2, [lr, #8]
    840a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    840e:	f8de 1014 	ldr.w	r1, [lr, #20]
    8412:	f8de 2018 	ldr.w	r2, [lr, #24]
    8416:	f8de 301c 	ldr.w	r3, [lr, #28]
    841a:	f8de 0010 	ldr.w	r0, [lr, #16]
    841e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8422:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8426:	463a      	mov	r2, r7
    8428:	4629      	mov	r1, r5
  if (isFile()) {
    842a:	f040 809b 	bne.w	8564 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    842e:	a808      	add	r0, sp, #32
    8430:	f7ff fd56 	bl	7ee0 <FatFile::mkdir(FatFile*, char const*, bool)>
    8434:	2800      	cmp	r0, #0
    8436:	d0ba      	beq.n	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    8438:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    843a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    843e:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    8440:	990e      	ldr	r1, [sp, #56]	; 0x38
    8442:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    8444:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    8446:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    844a:	68a0      	ldr	r0, [r4, #8]
    844c:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8450:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    8452:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    8454:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    8456:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    845a:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    845e:	f003 fe15 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8462:	2800      	cmp	r0, #0
    8464:	d0a3      	beq.n	83ae <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    8466:	88a3      	ldrh	r3, [r4, #4]
    8468:	f003 030f 	and.w	r3, r3, #15
    846c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    8470:	f8dd 300d 	ldr.w	r3, [sp, #13]
    8474:	f8c0 300d 	str.w	r3, [r0, #13]
    8478:	f8dd 3011 	ldr.w	r3, [sp, #17]
    847c:	f8c0 3011 	str.w	r3, [r0, #17]
    8480:	f8dd 3015 	ldr.w	r3, [sp, #21]
    8484:	f8c0 3015 	str.w	r3, [r0, #21]
    8488:	f8dd 3019 	ldr.w	r3, [sp, #25]
    848c:	f8c0 3019 	str.w	r3, [r0, #25]
    8490:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    8494:	f8a0 301d 	strh.w	r3, [r0, #29]
    8498:	f89d 301f 	ldrb.w	r3, [sp, #31]
    849c:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    849e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    84a2:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    84a4:	2e00      	cmp	r6, #0
    84a6:	d03b      	beq.n	8520 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    84a8:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    84aa:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    84ac:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    84ae:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    84b0:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    84b2:	408b      	lsls	r3, r1
    84b4:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    84b8:	4419      	add	r1, r3
    84ba:	f003 fde7 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    84be:	4605      	mov	r5, r0
    84c0:	2800      	cmp	r0, #0
    84c2:	f43f af74 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    84c6:	6a00      	ldr	r0, [r0, #32]
    84c8:	466f      	mov	r7, sp
    84ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    84cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    84ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    84d0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    84d2:	6b28      	ldr	r0, [r5, #48]	; 0x30
    84d4:	6b69      	ldr	r1, [r5, #52]	; 0x34
    84d6:	6baa      	ldr	r2, [r5, #56]	; 0x38
    84d8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    84da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    84dc:	4631      	mov	r1, r6
    84de:	68a0      	ldr	r0, [r4, #8]
    84e0:	f001 f9a0 	bl	9824 <FatPartition::freeChain(unsigned long)>
    84e4:	2800      	cmp	r0, #0
    84e6:	f43f af62 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    84ea:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    84ec:	6a23      	ldr	r3, [r4, #32]
    84ee:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    84f0:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    84f2:	3b02      	subs	r3, #2
    84f4:	f850 1c14 	ldr.w	r1, [r0, #-20]
    84f8:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    84fa:	2201      	movs	r2, #1
    84fc:	4419      	add	r1, r3
    84fe:	f003 fdc5 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8502:	4606      	mov	r6, r0
    8504:	2800      	cmp	r0, #0
    8506:	f43f af52 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    850a:	466d      	mov	r5, sp
    850c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    850e:	6230      	str	r0, [r6, #32]
    8510:	6271      	str	r1, [r6, #36]	; 0x24
    8512:	62b2      	str	r2, [r6, #40]	; 0x28
    8514:	62f3      	str	r3, [r6, #44]	; 0x2c
    8516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8518:	6330      	str	r0, [r6, #48]	; 0x30
    851a:	6371      	str	r1, [r6, #52]	; 0x34
    851c:	63b2      	str	r2, [r6, #56]	; 0x38
    851e:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    8520:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    8522:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    8524:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    8526:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    8528:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    852a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    852e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    8532:	f000 fe2d 	bl	9190 <FatFile::remove()>
    8536:	2800      	cmp	r0, #0
    8538:	f43f af39 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    853c:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    853e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8542:	f003 fd77 	bl	c034 <FsCache::sync()>
    8546:	2800      	cmp	r0, #0
    8548:	f43f af31 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    854c:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8550:	f003 fd70 	bl	c034 <FsCache::sync()>
    8554:	2800      	cmp	r0, #0
    8556:	f43f af2a 	beq.w	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    855a:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    855c:	6803      	ldr	r3, [r0, #0]
    855e:	6a1b      	ldr	r3, [r3, #32]
    8560:	4798      	blx	r3
    8562:	e725      	b.n	83b0 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8564:	f640 2301 	movw	r3, #2561	; 0xa01
    8568:	4660      	mov	r0, ip
    856a:	f7ff fd2f 	bl	7fcc <FatFile::open(FatFile*, char const*, int)>
    856e:	2800      	cmp	r0, #0
    8570:	f47f af63 	bne.w	843a <FatFile::rename(FatFile*, char const*)+0xae>
    8574:	e71b      	b.n	83ae <FatFile::rename(FatFile*, char const*)+0x22>
    8576:	bf00      	nop

00008578 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    8578:	7803      	ldrb	r3, [r0, #0]
    857a:	06da      	lsls	r2, r3, #27
    857c:	d401      	bmi.n	8582 <FatFile::rmdir()+0xa>
}
    857e:	2000      	movs	r0, #0
    8580:	4770      	bx	lr
  if (pos == m_curPosition) {
    8582:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    8584:	b530      	push	{r4, r5, lr}
    8586:	4604      	mov	r4, r0
    8588:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    858a:	b133      	cbz	r3, 859a <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    858c:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    858e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8590:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    8594:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8598:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    859a:	2300      	movs	r3, #0
    859c:	e00f      	b.n	85be <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    859e:	6163      	str	r3, [r4, #20]
    85a0:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    85a2:	016a      	lsls	r2, r5, #5
    85a4:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    85a6:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    85a8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    85ac:	b1ea      	cbz	r2, 85ea <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    85ae:	2ae5      	cmp	r2, #229	; 0xe5
    85b0:	d004      	beq.n	85bc <FatFile::rmdir()+0x44>
    85b2:	2a2e      	cmp	r2, #46	; 0x2e
    85b4:	d002      	beq.n	85bc <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    85b6:	7adb      	ldrb	r3, [r3, #11]
    85b8:	071b      	lsls	r3, r3, #28
    85ba:	d522      	bpl.n	8602 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    85bc:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    85be:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    85c2:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    85c6:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    85ca:	d1e8      	bne.n	859e <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    85cc:	2201      	movs	r2, #1
    85ce:	f10d 0107 	add.w	r1, sp, #7
    85d2:	4620      	mov	r0, r4
    85d4:	f7ff fdd0 	bl	8178 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    85d8:	b240      	sxtb	r0, r0
    85da:	2801      	cmp	r0, #1
    85dc:	d103      	bne.n	85e6 <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    85de:	6963      	ldr	r3, [r4, #20]
    85e0:	331f      	adds	r3, #31
    85e2:	6163      	str	r3, [r4, #20]
    85e4:	e7dc      	b.n	85a0 <FatFile::rmdir()+0x28>
      if (!getError()) {
    85e6:	7863      	ldrb	r3, [r4, #1]
    85e8:	b95b      	cbnz	r3, 8602 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    85ea:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    85ec:	2208      	movs	r2, #8
  return remove();
    85ee:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    85f0:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    85f4:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    85f6:	70a3      	strb	r3, [r4, #2]
}
    85f8:	b003      	add	sp, #12
    85fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    85fe:	f000 bdc7 	b.w	9190 <FatFile::remove()>
}
    8602:	2000      	movs	r0, #0
    8604:	b003      	add	sp, #12
    8606:	bd30      	pop	{r4, r5, pc}

00008608 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    8608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    860c:	7803      	ldrb	r3, [r0, #0]
    860e:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    8610:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    8612:	2b00      	cmp	r3, #0
    8614:	d039      	beq.n	868a <FatFile::seekSet(unsigned long)+0x82>
    8616:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    8618:	6941      	ldr	r1, [r0, #20]
    861a:	42a9      	cmp	r1, r5
    861c:	d042      	beq.n	86a4 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    861e:	2d00      	cmp	r5, #0
    8620:	d037      	beq.n	8692 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    8622:	0718      	lsls	r0, r3, #28
    8624:	d52a      	bpl.n	867c <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    8626:	69e2      	ldr	r2, [r4, #28]
    8628:	42aa      	cmp	r2, r5
    862a:	d32e      	bcc.n	868a <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    862c:	f8d4 c008 	ldr.w	ip, [r4, #8]
    8630:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    8632:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    8634:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    8638:	f012 0f40 	tst.w	r2, #64	; 0x40
    863c:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    8640:	b2c0      	uxtb	r0, r0
    8642:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    8646:	d130      	bne.n	86aa <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    8648:	1e4a      	subs	r2, r1, #1
    864a:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    864c:	b109      	cbz	r1, 8652 <FatFile::seekSet(unsigned long)+0x4a>
    864e:	4296      	cmp	r6, r2
    8650:	d22f      	bcs.n	86b2 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8652:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    8654:	bf4c      	ite	mi
    8656:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    865a:	6a23      	ldrpl	r3, [r4, #32]
    865c:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    865e:	f104 0810 	add.w	r8, r4, #16
    8662:	e006      	b.n	8672 <FatFile::seekSet(unsigned long)+0x6a>
    8664:	6921      	ldr	r1, [r4, #16]
    8666:	3e01      	subs	r6, #1
    8668:	68a0      	ldr	r0, [r4, #8]
    866a:	f001 f8c9 	bl	9800 <FatPartition::fatGet(unsigned long, unsigned long*)>
    866e:	2800      	cmp	r0, #0
    8670:	dd0b      	ble.n	868a <FatFile::seekSet(unsigned long)+0x82>
    8672:	4642      	mov	r2, r8
  while (nNew--) {
    8674:	2e00      	cmp	r6, #0
    8676:	d1f5      	bne.n	8664 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8678:	78a2      	ldrb	r2, [r4, #2]
    867a:	e00c      	b.n	8696 <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    867c:	069a      	lsls	r2, r3, #26
    867e:	d5d5      	bpl.n	862c <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    8680:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    8682:	895b      	ldrh	r3, [r3, #10]
    8684:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    8688:	d9f6      	bls.n	8678 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    868a:	2000      	movs	r0, #0
  m_curCluster = tmp;
    868c:	6127      	str	r7, [r4, #16]
}
    868e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8692:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    8694:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8696:	f022 0220 	bic.w	r2, r2, #32
  return true;
    869a:	2001      	movs	r0, #1
  m_curPosition = pos;
    869c:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    869e:	70a2      	strb	r2, [r4, #2]
}
    86a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    86a4:	2001      	movs	r0, #1
}
    86a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    86aa:	6a23      	ldr	r3, [r4, #32]
    86ac:	4433      	add	r3, r6
    86ae:	6123      	str	r3, [r4, #16]
    goto done;
    86b0:	e7f1      	b.n	8696 <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    86b2:	1ab6      	subs	r6, r6, r2
    86b4:	e7d3      	b.n	865e <FatFile::seekSet(unsigned long)+0x56>
    86b6:	bf00      	nop

000086b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    86b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86bc:	460e      	mov	r6, r1
    86be:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    86c0:	2100      	movs	r1, #0
    86c2:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    86c4:	4604      	mov	r4, r0
    86c6:	4698      	mov	r8, r3
    86c8:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    86cc:	f009 f8cc 	bl	11868 <memset>
  m_vol = dirFile->m_vol;
    86d0:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    86d2:	6a33      	ldr	r3, [r6, #32]
    86d4:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    86d8:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    86da:	f005 050f 	and.w	r5, r5, #15
    86de:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    86e2:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    86e6:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    86e8:	070b      	lsls	r3, r1, #28
    86ea:	d411      	bmi.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    86ec:	f001 0117 	and.w	r1, r1, #23
    86f0:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    86f2:	7ad3      	ldrb	r3, [r2, #11]
    86f4:	f013 0f18 	tst.w	r3, #24
    86f8:	d102      	bne.n	8700 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    86fa:	f041 0108 	orr.w	r1, r1, #8
    86fe:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    8700:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    8704:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    8706:	2b01      	cmp	r3, #1
    8708:	d038      	beq.n	877c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    870a:	2b02      	cmp	r3, #2
    870c:	d006      	beq.n	871c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    870e:	b1f3      	cbz	r3, 874e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    8710:	2300      	movs	r3, #0
  return false;
    8712:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    8714:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8716:	70a3      	strb	r3, [r4, #2]
}
    8718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    871c:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    871e:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    8720:	06cd      	lsls	r5, r1, #27
    8722:	d4f5      	bmi.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    8724:	07ce      	lsls	r6, r1, #31
    8726:	d4f3      	bmi.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8728:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    872c:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8730:	ea43 0301 	orr.w	r3, r3, r1
    8734:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    8736:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8738:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    873a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    873c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    873e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    8742:	d012      	beq.n	876a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    8744:	bb19      	cbnz	r1, 878e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8746:	f063 037f 	orn	r3, r3, #127	; 0x7f
    874a:	70a3      	strb	r3, [r4, #2]
    874c:	e010      	b.n	8770 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    874e:	f418 6f80 	tst.w	r8, #1024	; 0x400
    8752:	d1dd      	bne.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    8754:	f008 0308 	and.w	r3, r8, #8
    8758:	f043 0301 	orr.w	r3, r3, #1
    875c:	70a3      	strb	r3, [r4, #2]
    875e:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8760:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    8762:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    8764:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    8766:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    876a:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    876c:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    876e:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8770:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    8774:	d104      	bne.n	8780 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    8776:	2001      	movs	r0, #1
}
    8778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    877c:	2302      	movs	r3, #2
    877e:	e7ce      	b.n	871e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    8780:	69e1      	ldr	r1, [r4, #28]
    8782:	4620      	mov	r0, r4
    8784:	f7ff ff40 	bl	8608 <FatFile::seekSet(unsigned long)>
    8788:	2800      	cmp	r0, #0
    878a:	d1f4      	bne.n	8776 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    878c:	e7c0      	b.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    878e:	f001 f849 	bl	9824 <FatPartition::freeChain(unsigned long)>
    8792:	2800      	cmp	r0, #0
    8794:	d0bc      	beq.n	8710 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8796:	78a3      	ldrb	r3, [r4, #2]
    8798:	e7d5      	b.n	8746 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    879a:	bf00      	nop

0000879c <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    879c:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    879e:	2b00      	cmp	r3, #0
    87a0:	d145      	bne.n	882e <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    87a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    87a6:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    87a8:	b084      	sub	sp, #16
    87aa:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    87ac:	f013 0f70 	tst.w	r3, #112	; 0x70
    87b0:	d030      	beq.n	8814 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    87b2:	694b      	ldr	r3, [r1, #20]
    87b4:	f013 051f 	ands.w	r5, r3, #31
    87b8:	d12c      	bne.n	8814 <FatFile::openNext(FatFile*, int)+0x78>
    87ba:	4606      	mov	r6, r0
    87bc:	4690      	mov	r8, r2
    87be:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    87c0:	2201      	movs	r2, #1
    87c2:	f10d 010f 	add.w	r1, sp, #15
    87c6:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    87c8:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    87cc:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    87ce:	f7ff fcd3 	bl	8178 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    87d2:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    87d4:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    87d8:	2801      	cmp	r0, #1
    87da:	d11b      	bne.n	8814 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    87dc:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    87de:	68a1      	ldr	r1, [r4, #8]
    87e0:	331f      	adds	r3, #31
    87e2:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    87e6:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    87e8:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    87ec:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    87f0:	b182      	cbz	r2, 8814 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    87f2:	2a2e      	cmp	r2, #46	; 0x2e
    87f4:	d012      	beq.n	881c <FatFile::openNext(FatFile*, int)+0x80>
    87f6:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    87fa:	fab0 f080 	clz	r0, r0
    87fe:	0940      	lsrs	r0, r0, #5
    8800:	b960      	cbnz	r0, 881c <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    8802:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    8806:	f011 0e08 	ands.w	lr, r1, #8
    880a:	d012      	beq.n	8832 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    880c:	290f      	cmp	r1, #15
    880e:	d007      	beq.n	8820 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    8810:	4605      	mov	r5, r0
    8812:	e7d5      	b.n	87c0 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    8814:	2000      	movs	r0, #0
}
    8816:	b004      	add	sp, #16
    8818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    881c:	2500      	movs	r5, #0
    881e:	e7cf      	b.n	87c0 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    8820:	0651      	lsls	r1, r2, #25
    8822:	d5cd      	bpl.n	87c0 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    8824:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    8828:	f89c 900d 	ldrb.w	r9, [ip, #13]
    882c:	e7c8      	b.n	87c0 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    882e:	2000      	movs	r0, #0
}
    8830:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    8832:	b185      	cbz	r5, 8856 <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    8834:	f10c 010a 	add.w	r1, ip, #10
    8838:	e001      	b.n	883e <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    883a:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    883e:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    8842:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8844:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    8848:	fa52 f383 	uxtab	r3, r2, r3
    884c:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    8850:	d1f3      	bne.n	883a <FatFile::openNext(FatFile*, int)+0x9e>
    8852:	45ce      	cmp	lr, r9
    8854:	d1de      	bne.n	8814 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    8856:	4643      	mov	r3, r8
    8858:	b2ba      	uxth	r2, r7
    885a:	4621      	mov	r1, r4
    885c:	4630      	mov	r0, r6
    885e:	9500      	str	r5, [sp, #0]
    8860:	f7ff ff2a 	bl	86b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8864:	e7d7      	b.n	8816 <FatFile::openNext(FatFile*, int)+0x7a>
    8866:	bf00      	nop

00008868 <FatFile::sync()>:
  if (!isOpen()) {
    8868:	7803      	ldrb	r3, [r0, #0]
    886a:	b10b      	cbz	r3, 8870 <FatFile::sync()+0x8>
    886c:	f7ff b9b2 	b.w	7bd4 <FatFile::sync() [clone .part.0]>
}
    8870:	2001      	movs	r0, #1
    8872:	4770      	bx	lr

00008874 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    8878:	7883      	ldrb	r3, [r0, #2]
    887a:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    887c:	079c      	lsls	r4, r3, #30
    887e:	d577      	bpl.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    8880:	4688      	mov	r8, r1
    8882:	0719      	lsls	r1, r3, #28
    8884:	4691      	mov	r9, r2
    8886:	f100 80b5 	bmi.w	89f4 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    888a:	696b      	ldr	r3, [r5, #20]
    888c:	eb13 0209 	adds.w	r2, r3, r9
    8890:	d26e      	bcs.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    8892:	f1b9 0f00 	cmp.w	r9, #0
    8896:	d040      	beq.n	891a <FatFile::write(void const*, unsigned int)+0xa6>
    8898:	464f      	mov	r7, r9
    m_status = 0;
    889a:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    889e:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    88a0:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    88a4:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    88a6:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    88a8:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    88ac:	d13f      	bne.n	892e <FatFile::write(void const*, unsigned int)+0xba>
    88ae:	2e00      	cmp	r6, #0
    88b0:	d13d      	bne.n	892e <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    88b2:	2900      	cmp	r1, #0
    88b4:	d06e      	beq.n	8994 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    88b6:	78aa      	ldrb	r2, [r5, #2]
    88b8:	0652      	lsls	r2, r2, #25
    88ba:	d576      	bpl.n	89aa <FatFile::write(void const*, unsigned int)+0x136>
    88bc:	69ea      	ldr	r2, [r5, #28]
    88be:	429a      	cmp	r2, r3
    88c0:	d973      	bls.n	89aa <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    88c2:	3101      	adds	r1, #1
    88c4:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    88c6:	3902      	subs	r1, #2
    88c8:	7982      	ldrb	r2, [r0, #6]
    88ca:	6943      	ldr	r3, [r0, #20]
    88cc:	4091      	lsls	r1, r2
    88ce:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    88d0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    88d4:	d353      	bcc.n	897e <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    88d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    88da:	d370      	bcc.n	89be <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    88dc:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    88de:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    88e0:	1b1b      	subs	r3, r3, r4
    88e2:	4293      	cmp	r3, r2
    88e4:	bf28      	it	cs
    88e6:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    88e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    88ea:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    88ec:	ea4f 2443 	mov.w	r4, r3, lsl #9
    88f0:	d307      	bcc.n	8902 <FatFile::write(void const*, unsigned int)+0x8e>
    88f2:	185e      	adds	r6, r3, r1
    88f4:	42b2      	cmp	r2, r6
    88f6:	d204      	bcs.n	8902 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    88f8:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    88fc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8900:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    8902:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    8904:	4642      	mov	r2, r8
    8906:	6806      	ldr	r6, [r0, #0]
    8908:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    890a:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    890c:	b380      	cbz	r0, 8970 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    890e:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    8910:	1b3f      	subs	r7, r7, r4
    src += n;
    8912:	44a0      	add	r8, r4
    m_curPosition += n;
    8914:	4423      	add	r3, r4
    8916:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    8918:	d1c1      	bne.n	889e <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    891a:	69ea      	ldr	r2, [r5, #28]
    891c:	429a      	cmp	r2, r3
    891e:	d276      	bcs.n	8a0e <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8920:	78aa      	ldrb	r2, [r5, #2]
    8922:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    8924:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8926:	f062 037f 	orn	r3, r2, #127	; 0x7f
    892a:	70ab      	strb	r3, [r5, #2]
    892c:	e025      	b.n	897a <FatFile::write(void const*, unsigned int)+0x106>
    892e:	7982      	ldrb	r2, [r0, #6]
    8930:	3902      	subs	r1, #2
    8932:	6943      	ldr	r3, [r0, #20]
    8934:	4091      	lsls	r1, r2
    8936:	4419      	add	r1, r3
                      + sectorOfCluster;
    8938:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    893a:	2e00      	cmp	r6, #0
    893c:	d0c8      	beq.n	88d0 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    893e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    8942:	2201      	movs	r2, #1
    8944:	42bc      	cmp	r4, r7
    8946:	bf28      	it	cs
    8948:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    894a:	3028      	adds	r0, #40	; 0x28
    894c:	f003 fb9e 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8950:	b170      	cbz	r0, 8970 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    8952:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8954:	4426      	add	r6, r4
      memcpy(dst, src, n);
    8956:	4622      	mov	r2, r4
    8958:	4641      	mov	r1, r8
    895a:	f004 fef7 	bl	d74c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    895e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8962:	68a8      	ldr	r0, [r5, #8]
    8964:	d1d3      	bne.n	890e <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    8966:	3028      	adds	r0, #40	; 0x28
    8968:	f003 fb64 	bl	c034 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    896c:	2800      	cmp	r0, #0
    896e:	d1ce      	bne.n	890e <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    8970:	786b      	ldrb	r3, [r5, #1]
  return 0;
    8972:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    8974:	f043 0301 	orr.w	r3, r3, #1
    8978:	706b      	strb	r3, [r5, #1]
}
    897a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    897e:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    8982:	696a      	ldr	r2, [r5, #20]
    8984:	69eb      	ldr	r3, [r5, #28]
    8986:	42bc      	cmp	r4, r7
    8988:	bf28      	it	cs
    898a:	463c      	movcs	r4, r7
    898c:	429a      	cmp	r2, r3
    898e:	d305      	bcc.n	899c <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8990:	2205      	movs	r2, #5
    8992:	e7da      	b.n	894a <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    8994:	6a29      	ldr	r1, [r5, #32]
    8996:	b321      	cbz	r1, 89e2 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    8998:	6129      	str	r1, [r5, #16]
    899a:	e794      	b.n	88c6 <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    899c:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    899e:	f013 0f20 	tst.w	r3, #32
    89a2:	bf14      	ite	ne
    89a4:	2205      	movne	r2, #5
    89a6:	2201      	moveq	r2, #1
    89a8:	e7cf      	b.n	894a <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    89aa:	f105 0210 	add.w	r2, r5, #16
    89ae:	f000 ff27 	bl	9800 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    89b2:	2800      	cmp	r0, #0
    89b4:	dbdc      	blt.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    89b6:	d024      	beq.n	8a02 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    89b8:	68a8      	ldr	r0, [r5, #8]
    89ba:	6929      	ldr	r1, [r5, #16]
    89bc:	e783      	b.n	88c6 <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    89be:	6b43      	ldr	r3, [r0, #52]	; 0x34
    89c0:	428b      	cmp	r3, r1
    89c2:	d104      	bne.n	89ce <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    89c4:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    89c8:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    89cc:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    89ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    89d0:	4642      	mov	r2, r8
    89d2:	6803      	ldr	r3, [r0, #0]
    89d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    89d6:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    89d8:	2800      	cmp	r0, #0
    89da:	d0c9      	beq.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    89dc:	f44f 7400 	mov.w	r4, #512	; 0x200
    89e0:	e795      	b.n	890e <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    89e2:	4628      	mov	r0, r5
    89e4:	f7ff f950 	bl	7c88 <FatFile::addCluster()>
    89e8:	2800      	cmp	r0, #0
    89ea:	d0c1      	beq.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    89ec:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    89ee:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    89f0:	6229      	str	r1, [r5, #32]
    89f2:	e768      	b.n	88c6 <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    89f4:	69c1      	ldr	r1, [r0, #28]
    89f6:	f7ff fe07 	bl	8608 <FatFile::seekSet(unsigned long)>
    89fa:	2800      	cmp	r0, #0
    89fc:	f47f af45 	bne.w	888a <FatFile::write(void const*, unsigned int)+0x16>
    8a00:	e7b6      	b.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    8a02:	4628      	mov	r0, r5
    8a04:	f7ff f940 	bl	7c88 <FatFile::addCluster()>
    8a08:	2800      	cmp	r0, #0
    8a0a:	d1d5      	bne.n	89b8 <FatFile::write(void const*, unsigned int)+0x144>
    8a0c:	e7b0      	b.n	8970 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    8a0e:	4b05      	ldr	r3, [pc, #20]	; (8a24 <FatFile::write(void const*, unsigned int)+0x1b0>)
    8a10:	681b      	ldr	r3, [r3, #0]
    8a12:	b12b      	cbz	r3, 8a20 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8a14:	78ab      	ldrb	r3, [r5, #2]
    8a16:	4648      	mov	r0, r9
    8a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8a1c:	70ab      	strb	r3, [r5, #2]
    8a1e:	e7ac      	b.n	897a <FatFile::write(void const*, unsigned int)+0x106>
    8a20:	4648      	mov	r0, r9
    8a22:	e7aa      	b.n	897a <FatFile::write(void const*, unsigned int)+0x106>
    8a24:	200284dc 	.word	0x200284dc

00008a28 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8a2c:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8a2e:	b08d      	sub	sp, #52	; 0x34
    8a30:	4614      	mov	r4, r2
    next = begin;
    8a32:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8a34:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8a36:	4606      	mov	r6, r0
    8a38:	4689      	mov	r9, r1
  FatFile dir = *this;
    8a3a:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8a3c:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    8a3e:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    8a42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    8a46:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8a48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    8a4c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    8a4e:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    8a52:	6065      	str	r5, [r4, #4]
    8a54:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8a56:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    8a58:	f8a4 e00c 	strh.w	lr, [r4, #12]
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d03f      	beq.n	8ae0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    8a60:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8a64:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8a68:	a803      	add	r0, sp, #12
    8a6a:	b289      	uxth	r1, r1
    8a6c:	0149      	lsls	r1, r1, #5
    8a6e:	f7ff fdcb 	bl	8608 <FatFile::seekSet(unsigned long)>
    8a72:	b350      	cbz	r0, 8aca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    8a74:	2100      	movs	r1, #0
    8a76:	a803      	add	r0, sp, #12
    8a78:	f7ff fc66 	bl	8348 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8a7c:	4607      	mov	r7, r0
    8a7e:	b320      	cbz	r0, 8aca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    8a80:	2500      	movs	r5, #0
    8a82:	e00d      	b.n	8aa0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    8a84:	f003 fb2a 	bl	c0dc <FsName::get16()>
    8a88:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    8a8a:	4658      	mov	r0, fp
    8a8c:	f003 fbea 	bl	c264 <toUpcase(unsigned short)>
    8a90:	4683      	mov	fp, r0
    8a92:	4640      	mov	r0, r8
    8a94:	f003 fbe6 	bl	c264 <toUpcase(unsigned short)>
    8a98:	4583      	cmp	fp, r0
    8a9a:	d116      	bne.n	8aca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    8a9c:	2d0d      	cmp	r5, #13
    8a9e:	d018      	beq.n	8ad2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    8aa0:	b2ea      	uxtb	r2, r5
    8aa2:	4639      	mov	r1, r7
    8aa4:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    8aa6:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    8aa8:	f000 fc18 	bl	92dc <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    8aac:	89a3      	ldrh	r3, [r4, #12]
    8aae:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    8ab0:	4620      	mov	r0, r4
    8ab2:	2b00      	cmp	r3, #0
    8ab4:	d1e6      	bne.n	8a84 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    8ab6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    8aba:	4293      	cmp	r3, r2
    8abc:	d1e2      	bne.n	8a84 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    8abe:	fabb f08b 	clz	r0, fp
    8ac2:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    8ac4:	b00d      	add	sp, #52	; 0x34
    8ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    8aca:	2000      	movs	r0, #0
}
    8acc:	b00d      	add	sp, #52	; 0x34
    8ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8ad2:	f10a 0a01 	add.w	sl, sl, #1
    8ad6:	9b01      	ldr	r3, [sp, #4]
    8ad8:	fa5f fa8a 	uxtb.w	sl, sl
    8adc:	4553      	cmp	r3, sl
    8ade:	d2c1      	bcs.n	8a64 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    8ae0:	2001      	movs	r0, #1
    8ae2:	e7ef      	b.n	8ac4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

00008ae4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8ae8:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8aea:	b08d      	sub	sp, #52	; 0x34
    8aec:	4616      	mov	r6, r2
    8aee:	469a      	mov	sl, r3
  FatFile dir = *this;
    8af0:	f10d 0c0c 	add.w	ip, sp, #12
    8af4:	f102 0415 	add.w	r4, r2, #21
    8af8:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8afc:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    8afe:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    8b02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8b08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    8b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8b0e:	683b      	ldr	r3, [r7, #0]
    8b10:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8b14:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    8b18:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    8b1c:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    8b20:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8b22:	fa52 f383 	uxtab	r3, r2, r3
    8b26:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    8b2a:	d1f3      	bne.n	8b14 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    8b2c:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    8b2e:	f04f 0800 	mov.w	r8, #0
    next = begin;
    8b32:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8b34:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8b38:	f1ba 0f00 	cmp.w	sl, #0
    8b3c:	d04e      	beq.n	8bdc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    8b3e:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8b40:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8b42:	a803      	add	r0, sp, #12
    8b44:	1bd9      	subs	r1, r3, r7
    8b46:	b289      	uxth	r1, r1
    8b48:	0149      	lsls	r1, r1, #5
    8b4a:	f7ff fd5d 	bl	8608 <FatFile::seekSet(unsigned long)>
    8b4e:	2800      	cmp	r0, #0
    8b50:	d055      	beq.n	8bfe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    8b52:	2100      	movs	r1, #0
    8b54:	a803      	add	r0, sp, #12
    8b56:	f7ff fbf7 	bl	8348 <FatFile::readDirCache(bool)>
    if (!ldir) {
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d04f      	beq.n	8bfe <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    8b5e:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8b60:	4557      	cmp	r7, sl
    8b62:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b66:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    8b6a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    8b6e:	f04f 0500 	mov.w	r5, #0
    8b72:	f043 0301 	orr.w	r3, r3, #1
    8b76:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8b7a:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8b7e:	bf0c      	ite	eq
    8b80:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    8b84:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8b86:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    8b88:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8b8c:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    8b8e:	7303      	strb	r3, [r0, #12]
    8b90:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    8b94:	f880 900d 	strb.w	r9, [r0, #13]
    8b98:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    8b9a:	e006      	b.n	8baa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    8b9c:	f8ab 0000 	strh.w	r0, [fp]
    8ba0:	3401      	adds	r4, #1
    8ba2:	3501      	adds	r5, #1
    8ba4:	f10b 0b02 	add.w	fp, fp, #2
    8ba8:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    8baa:	89b0      	ldrh	r0, [r6, #12]
    8bac:	b918      	cbnz	r0, 8bb6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    8bae:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    8bb2:	429a      	cmp	r2, r3
    8bb4:	d016      	beq.n	8be4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    8bb6:	4630      	mov	r0, r6
    8bb8:	f003 fa90 	bl	c0dc <FsName::get16()>
  if (i < 5) {
    8bbc:	2d04      	cmp	r5, #4
    8bbe:	b2eb      	uxtb	r3, r5
    8bc0:	d9ec      	bls.n	8b9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    8bc2:	2b0a      	cmp	r3, #10
    8bc4:	d802      	bhi.n	8bcc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    8bc6:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    8bca:	e7e9      	b.n	8ba0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    8bcc:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    8bce:	f8ab 0005 	strh.w	r0, [fp, #5]
    8bd2:	d1e5      	bne.n	8ba0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8bd4:	3701      	adds	r7, #1
    8bd6:	b2ff      	uxtb	r7, r7
    8bd8:	45ba      	cmp	sl, r7
    8bda:	d2b1      	bcs.n	8b40 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8bdc:	2001      	movs	r0, #1

 fail:
  return false;
}
    8bde:	b00d      	add	sp, #52	; 0x34
    8be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    8be4:	f1b8 0f00 	cmp.w	r8, #0
    8be8:	d006      	beq.n	8bf8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    8bea:	f108 0801 	add.w	r8, r8, #1
    8bee:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8bf2:	fa5f f888 	uxtb.w	r8, r8
    8bf6:	e7e1      	b.n	8bbc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    8bf8:	f04f 0801 	mov.w	r8, #1
    8bfc:	e7de      	b.n	8bbc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    8bfe:	2000      	movs	r0, #0
}
    8c00:	b00d      	add	sp, #52	; 0x34
    8c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c06:	bf00      	nop

00008c08 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8c08:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    8c0a:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    8c0e:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    8c12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    8c16:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    8c1a:	4686      	mov	lr, r0
  const char* end = fname->end;
    8c1c:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    8c1e:	6051      	str	r1, [r2, #4]
    8c20:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8c24:	781a      	ldrb	r2, [r3, #0]
    8c26:	2a2e      	cmp	r2, #46	; 0x2e
    8c28:	bf14      	ite	ne
    8c2a:	2001      	movne	r0, #1
    8c2c:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8c2e:	d103      	bne.n	8c38 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8c30:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8c34:	2a2e      	cmp	r2, #46	; 0x2e
    8c36:	d0fb      	beq.n	8c30 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8c38:	1e61      	subs	r1, r4, #1
    8c3a:	4299      	cmp	r1, r3
    8c3c:	d90b      	bls.n	8c56 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    8c3e:	460a      	mov	r2, r1
    8c40:	e002      	b.n	8c48 <FatFile::makeSFN(FatLfn_t*)+0x40>
    8c42:	4293      	cmp	r3, r2
    8c44:	4611      	mov	r1, r2
    8c46:	d006      	beq.n	8c56 <FatFile::makeSFN(FatLfn_t*)+0x4e>
    8c48:	4611      	mov	r1, r2
    8c4a:	3a01      	subs	r2, #1
    8c4c:	f891 c000 	ldrb.w	ip, [r1]
    8c50:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    8c54:	d1f5      	bne.n	8c42 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    8c56:	429c      	cmp	r4, r3
    8c58:	f04f 0500 	mov.w	r5, #0
    8c5c:	f240 8086 	bls.w	8d6c <FatFile::makeSFN(FatLfn_t*)+0x164>
    8c60:	2607      	movs	r6, #7
    8c62:	2708      	movs	r7, #8
    8c64:	46a9      	mov	r9, r5
    8c66:	46a8      	mov	r8, r5
    8c68:	e006      	b.n	8c78 <FatFile::makeSFN(FatLfn_t*)+0x70>
    8c6a:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    8c6c:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    8c6e:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8c72:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    8c74:	429c      	cmp	r4, r3
    8c76:	d95b      	bls.n	8d30 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    8c78:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    8c7a:	2a2e      	cmp	r2, #46	; 0x2e
    8c7c:	bf08      	it	eq
    8c7e:	4299      	cmpeq	r1, r3
    8c80:	d0f3      	beq.n	8c6a <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8c82:	2a22      	cmp	r2, #34	; 0x22
    8c84:	d00d      	beq.n	8ca2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    8c86:	2a7c      	cmp	r2, #124	; 0x7c
    8c88:	d00b      	beq.n	8ca2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    8c8a:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    8c8e:	f1bc 0f02 	cmp.w	ip, #2
    8c92:	d906      	bls.n	8ca2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8c94:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    8c98:	f1bc 0f05 	cmp.w	ip, #5
    8c9c:	d821      	bhi.n	8ce2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    8c9e:	2a2d      	cmp	r2, #45	; 0x2d
    8ca0:	d01f      	beq.n	8ce2 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    8ca2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    8ca6:	2a80      	cmp	r2, #128	; 0x80
    8ca8:	d05d      	beq.n	8d66 <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    8caa:	454e      	cmp	r6, r9
    8cac:	d22f      	bcs.n	8d0e <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    8cae:	4299      	cmp	r1, r3
    8cb0:	bf2c      	ite	cs
    8cb2:	2000      	movcs	r0, #0
    8cb4:	2001      	movcc	r0, #1
    8cb6:	2e0a      	cmp	r6, #10
    8cb8:	bf08      	it	eq
    8cba:	f040 0001 	orreq.w	r0, r0, #1
    8cbe:	2800      	cmp	r0, #0
    8cc0:	d047      	beq.n	8d52 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8cc2:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8cc6:	2b20      	cmp	r3, #32
    8cc8:	d040      	beq.n	8d4c <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    8cca:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8cce:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    8cd0:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    8cd2:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    8cd4:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8cd6:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    8cda:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    8cdc:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    8cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8ce2:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    8ce6:	f1bc 0f05 	cmp.w	ip, #5
    8cea:	d9da      	bls.n	8ca2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    8cec:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    8cf0:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    8cf4:	d8d5      	bhi.n	8ca2 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    8cf6:	454e      	cmp	r6, r9
    8cf8:	d3d9      	bcc.n	8cae <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    8cfa:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    8cfe:	f1bc 0f19 	cmp.w	ip, #25
    8d02:	d828      	bhi.n	8d56 <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    8d04:	3a20      	subs	r2, #32
        lc |= bit;
    8d06:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    8d08:	b2d2      	uxtb	r2, r2
        lc |= bit;
    8d0a:	b2ed      	uxtb	r5, r5
    8d0c:	e001      	b.n	8d12 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    8d0e:	2000      	movs	r0, #0
        c = '_';
    8d10:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    8d12:	f109 0c01 	add.w	ip, r9, #1
    8d16:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    8d18:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    8d1a:	f889 2016 	strb.w	r2, [r9, #22]
    8d1e:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    8d22:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    8d24:	4691      	mov	r9, r2
    8d26:	bf98      	it	ls
    8d28:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    8d2c:	429c      	cmp	r4, r3
    8d2e:	d8a3      	bhi.n	8c78 <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    8d30:	f89e 3016 	ldrb.w	r3, [lr, #22]
    8d34:	2b20      	cmp	r3, #32
    8d36:	d009      	beq.n	8d4c <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    8d38:	2800      	cmp	r0, #0
    8d3a:	d0c6      	beq.n	8cca <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8d3c:	ea18 0f05 	tst.w	r8, r5
    8d40:	bf18      	it	ne
    8d42:	2502      	movne	r5, #2
    8d44:	f88e 5015 	strb.w	r5, [lr, #21]
}
    8d48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    8d4c:	2000      	movs	r0, #0
}
    8d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8d52:	460b      	mov	r3, r1
    8d54:	e78e      	b.n	8c74 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    8d56:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    8d5a:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    8d5e:	bf98      	it	ls
    8d60:	ea47 0808 	orrls.w	r8, r7, r8
    8d64:	e7d5      	b.n	8d12 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    8d66:	3301      	adds	r3, #1
        is83 = false;
    8d68:	2000      	movs	r0, #0
    8d6a:	e783      	b.n	8c74 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    8d6c:	46a8      	mov	r8, r5
    8d6e:	e7df      	b.n	8d30 <FatFile::makeSFN(FatLfn_t*)+0x128>

00008d70 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8d74:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8d78:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8d7a:	460f      	mov	r7, r1
    8d7c:	4604      	mov	r4, r0
    8d7e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8e20 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    8d82:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    8d86:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8d8a:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
    8d8e:	f1b8 0f03 	cmp.w	r8, #3
    8d92:	f8db 3000 	ldr.w	r3, [fp]
    8d96:	bf28      	it	cs
    8d98:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    8d9c:	442b      	add	r3, r5
    8d9e:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8da0:	f108 0304 	add.w	r3, r8, #4
    8da4:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8da6:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8daa:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    8dac:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8dae:	2a09      	cmp	r2, #9
    8db0:	f102 0137 	add.w	r1, r2, #55	; 0x37
    8db4:	bf98      	it	ls
    8db6:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    8dba:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8dbc:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8dbe:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8dc0:	4598      	cmp	r8, r3
    8dc2:	d1f0      	bne.n	8da6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    8dc4:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    8dc8:	2100      	movs	r1, #0
    8dca:	4620      	mov	r0, r4
    8dcc:	f883 a016 	strb.w	sl, [r3, #22]
    8dd0:	f7ff fc1a 	bl	8608 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8dd4:	2101      	movs	r1, #1
    8dd6:	4620      	mov	r0, r4
    8dd8:	f7ff fab6 	bl	8348 <FatFile::readDirCache(bool)>
    8ddc:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8dde:	220b      	movs	r2, #11
    8de0:	4630      	mov	r0, r6
      if (!dir) {
    8de2:	b19b      	cbz	r3, 8e0c <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    8de4:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8de8:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    8dea:	f1bc 0f00 	cmp.w	ip, #0
    8dee:	d013      	beq.n	8e18 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8df0:	7adb      	ldrb	r3, [r3, #11]
    8df2:	071b      	lsls	r3, r3, #28
    8df4:	d4ee      	bmi.n	8dd4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    8df6:	f008 fc8b 	bl	11710 <memcmp>
    8dfa:	2800      	cmp	r0, #0
    8dfc:	d1ea      	bne.n	8dd4 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8dfe:	f109 39ff 	add.w	r9, r9, #4294967295
    8e02:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    8e06:	d1c2      	bne.n	8d8e <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8e08:	4648      	mov	r0, r9
 fail:
    8e0a:	e003      	b.n	8e14 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    8e0c:	7860      	ldrb	r0, [r4, #1]
    8e0e:	fab0 f080 	clz	r0, r0
    8e12:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    8e14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    8e18:	2001      	movs	r0, #1
}
    8e1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8e1e:	bf00      	nop
    8e20:	2002935c 	.word	0x2002935c

00008e24 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e28:	ed2d 8b02 	vpush	{d8}
    8e2c:	b08b      	sub	sp, #44	; 0x2c
    8e2e:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8e32:	688b      	ldr	r3, [r1, #8]
    8e34:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    8e36:	780b      	ldrb	r3, [r1, #0]
    8e38:	f013 0f70 	tst.w	r3, #112	; 0x70
    8e3c:	d053      	beq.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    8e3e:	9b02      	ldr	r3, [sp, #8]
    8e40:	781b      	ldrb	r3, [r3, #0]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d14f      	bne.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    8e46:	6913      	ldr	r3, [r2, #16]
    8e48:	4690      	mov	r8, r2
    8e4a:	4a9a      	ldr	r2, [pc, #616]	; (90b4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    8e4c:	460e      	mov	r6, r1
    8e4e:	330c      	adds	r3, #12
    8e50:	fba2 2303 	umull	r2, r3, r2, r3
    8e54:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8e58:	f898 3015 	ldrb.w	r3, [r8, #21]
    8e5c:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    8e5e:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8e60:	f000 80a7 	beq.w	8fb2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    8e64:	1c57      	adds	r7, r2, #1
    8e66:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    8e68:	2300      	movs	r3, #0
    seekSet(0);
    8e6a:	4630      	mov	r0, r6
    8e6c:	4619      	mov	r1, r3
    8e6e:	461c      	mov	r4, r3
    8e70:	9306      	str	r3, [sp, #24]
    8e72:	f7ff fbc9 	bl	8608 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8e76:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    8e7a:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    8e7c:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    8e7e:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8e80:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    8e84:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8e86:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    8e88:	2100      	movs	r1, #0
    8e8a:	4630      	mov	r0, r6
    8e8c:	f7ff fa5c 	bl	8348 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8e90:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    8e94:	4603      	mov	r3, r0
    8e96:	b320      	cbz	r0, 8ee2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8e98:	7802      	ldrb	r2, [r0, #0]
    8e9a:	2ae5      	cmp	r2, #229	; 0xe5
    8e9c:	d029      	beq.n	8ef2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    8e9e:	b342      	cbz	r2, 8ef2 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    8ea0:	42bc      	cmp	r4, r7
    8ea2:	bf38      	it	cc
    8ea4:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8ea6:	2a2e      	cmp	r2, #46	; 0x2e
    8ea8:	d02b      	beq.n	8f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8eaa:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    8eae:	f1bc 0f0f 	cmp.w	ip, #15
    8eb2:	d054      	beq.n	8f5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    8eb4:	f01c 0c08 	ands.w	ip, ip, #8
    8eb8:	d123      	bne.n	8f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    8eba:	f1b9 0f00 	cmp.w	r9, #0
    8ebe:	f040 80d5 	bne.w	906c <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8ec2:	220b      	movs	r2, #11
    8ec4:	ee18 1a10 	vmov	r1, s16
    8ec8:	f008 fc22 	bl	11710 <memcmp>
    8ecc:	2800      	cmp	r0, #0
    8ece:	d1da      	bne.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8ed0:	f898 3015 	ldrb.w	r3, [r8, #21]
    8ed4:	f013 0301 	ands.w	r3, r3, #1
    8ed8:	f000 80e4 	beq.w	90a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    8edc:	2301      	movs	r3, #1
    8ede:	9305      	str	r3, [sp, #20]
    8ee0:	e7d1      	b.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    8ee2:	7873      	ldrb	r3, [r6, #1]
    8ee4:	b183      	cbz	r3, 8f08 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    8ee6:	2000      	movs	r0, #0
}
    8ee8:	b00b      	add	sp, #44	; 0x2c
    8eea:	ecbd 8b02 	vpop	{d8}
    8eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8ef2:	2c00      	cmp	r4, #0
    8ef4:	bf08      	it	eq
    8ef6:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    8ef8:	42bc      	cmp	r4, r7
    8efa:	d201      	bcs.n	8f00 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    8efc:	3401      	adds	r4, #1
    8efe:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8f00:	b112      	cbz	r2, 8f08 <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    8f02:	f04f 0900 	mov.w	r9, #0
    8f06:	e7be      	b.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8f08:	9b03      	ldr	r3, [sp, #12]
    8f0a:	059a      	lsls	r2, r3, #22
    8f0c:	d5eb      	bpl.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8f0e:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8f12:	3b01      	subs	r3, #1
    8f14:	2b01      	cmp	r3, #1
    8f16:	d8e6      	bhi.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    8f18:	2c00      	cmp	r4, #0
    8f1a:	bf08      	it	eq
    8f1c:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    8f1e:	42bc      	cmp	r4, r7
    8f20:	d303      	bcc.n	8f2a <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    8f22:	e048      	b.n	8fb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    8f24:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8f26:	42a7      	cmp	r7, r4
    8f28:	d045      	beq.n	8fb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    8f2a:	2100      	movs	r1, #0
    8f2c:	4630      	mov	r0, r6
    8f2e:	f7ff fa0b 	bl	8348 <FatFile::readDirCache(bool)>
    freeFound++;
    8f32:	1c63      	adds	r3, r4, #1
    if (!dir) {
    8f34:	2800      	cmp	r0, #0
    8f36:	d1f5      	bne.n	8f24 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    8f38:	7873      	ldrb	r3, [r6, #1]
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d1d3      	bne.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    8f3e:	42a7      	cmp	r7, r4
    8f40:	d939      	bls.n	8fb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    8f42:	9d07      	ldr	r5, [sp, #28]
    8f44:	e005      	b.n	8f52 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8f46:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    8f48:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    8f4c:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    8f4e:	42a7      	cmp	r7, r4
    8f50:	d931      	bls.n	8fb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    8f52:	4630      	mov	r0, r6
    8f54:	f7fe feb2 	bl	7cbc <FatFile::addDirCluster()>
    8f58:	2800      	cmp	r0, #0
    8f5a:	d1f4      	bne.n	8f46 <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    8f5c:	e7c3      	b.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    8f5e:	f1b9 0f00 	cmp.w	r9, #0
    8f62:	d119      	bne.n	8f98 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    8f64:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    8f68:	9904      	ldr	r1, [sp, #16]
    8f6a:	4559      	cmp	r1, fp
    8f6c:	d18b      	bne.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    8f6e:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    8f72:	d088      	beq.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    8f74:	7b43      	ldrb	r3, [r0, #13]
    8f76:	4689      	mov	r9, r1
    8f78:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    8f7a:	f1bb 0f01 	cmp.w	fp, #1
    8f7e:	d182      	bne.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8f80:	1c69      	adds	r1, r5, #1
    8f82:	464b      	mov	r3, r9
    8f84:	4642      	mov	r2, r8
    8f86:	4630      	mov	r0, r6
    8f88:	b289      	uxth	r1, r1
    8f8a:	f7ff fd4d 	bl	8a28 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8f8e:	2800      	cmp	r0, #0
    8f90:	bf08      	it	eq
    8f92:	f04f 0900 	moveq.w	r9, #0
    8f96:	e776      	b.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8f98:	f10b 3bff 	add.w	fp, fp, #4294967295
    8f9c:	fa5f fb8b 	uxtb.w	fp, fp
    8fa0:	455a      	cmp	r2, fp
    8fa2:	d1ae      	bne.n	8f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    8fa4:	7b43      	ldrb	r3, [r0, #13]
    8fa6:	9a06      	ldr	r2, [sp, #24]
    8fa8:	4293      	cmp	r3, r2
    8faa:	d0e6      	beq.n	8f7a <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    8fac:	f04f 0900 	mov.w	r9, #0
    8fb0:	e769      	b.n	8e86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8fb2:	2701      	movs	r7, #1
    8fb4:	e758      	b.n	8e68 <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    8fb6:	9b05      	ldr	r3, [sp, #20]
    8fb8:	b12b      	cbz	r3, 8fc6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    8fba:	4641      	mov	r1, r8
    8fbc:	4630      	mov	r0, r6
    8fbe:	f7ff fed7 	bl	8d70 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8fc2:	2800      	cmp	r0, #0
    8fc4:	d08f      	beq.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    8fc6:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8fc8:	4642      	mov	r2, r8
    8fca:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    8fcc:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    8fce:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    8fd2:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    8fd4:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8fd6:	4629      	mov	r1, r5
    8fd8:	f7ff fd84 	bl	8ae4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8fdc:	2800      	cmp	r0, #0
    8fde:	d082      	beq.n	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    8fe0:	0169      	lsls	r1, r5, #5
    8fe2:	4630      	mov	r0, r6
    8fe4:	f7ff fb10 	bl	8608 <FatFile::seekSet(unsigned long)>
    8fe8:	2800      	cmp	r0, #0
    8fea:	f43f af7c 	beq.w	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    8fee:	2100      	movs	r1, #0
    8ff0:	4630      	mov	r0, r6
    8ff2:	f7ff f9a9 	bl	8348 <FatFile::readDirCache(bool)>
  if (!dir) {
    8ff6:	4604      	mov	r4, r0
    8ff8:	2800      	cmp	r0, #0
    8ffa:	f43f af74 	beq.w	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    8ffe:	2220      	movs	r2, #32
    9000:	2100      	movs	r1, #0
    9002:	f008 fc31 	bl	11868 <memset>
  memcpy(dir->name, fname->sfn, 11);
    9006:	f8d8 2016 	ldr.w	r2, [r8, #22]
    900a:	f8d8 301a 	ldr.w	r3, [r8, #26]
    900e:	6022      	str	r2, [r4, #0]
    9010:	6063      	str	r3, [r4, #4]
    9012:	f898 3020 	ldrb.w	r3, [r8, #32]
    9016:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    901a:	72a3      	strb	r3, [r4, #10]
    901c:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    901e:	f898 3015 	ldrb.w	r3, [r8, #21]
    9022:	f003 0318 	and.w	r3, r3, #24
    9026:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    9028:	4b23      	ldr	r3, [pc, #140]	; (90b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    902a:	681b      	ldr	r3, [r3, #0]
    902c:	2b00      	cmp	r3, #0
    902e:	d03b      	beq.n	90a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    9030:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    9034:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    9038:	a809      	add	r0, sp, #36	; 0x24
    903a:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    903c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9040:	8223      	strh	r3, [r4, #16]
    9042:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    9046:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    9048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    904c:	7363      	strb	r3, [r4, #13]
    904e:	9a07      	ldr	r2, [sp, #28]
    9050:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9054:	f043 0301 	orr.w	r3, r3, #1
    9058:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    905c:	9b03      	ldr	r3, [sp, #12]
    905e:	462a      	mov	r2, r5
    9060:	4631      	mov	r1, r6
    9062:	9802      	ldr	r0, [sp, #8]
    9064:	9700      	str	r7, [sp, #0]
    9066:	f7ff fb27 	bl	86b8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    906a:	e73d      	b.n	8ee8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    906c:	f1bb 0f01 	cmp.w	fp, #1
    9070:	f47f af39 	bne.w	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    9074:	300a      	adds	r0, #10
    9076:	e001      	b.n	907c <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9078:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    907c:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9080:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9082:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    9086:	fa52 f281 	uxtab	r2, r2, r1
    908a:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    908e:	d1f3      	bne.n	9078 <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    9090:	9b06      	ldr	r3, [sp, #24]
    9092:	4563      	cmp	r3, ip
    9094:	f47f af27 	bne.w	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9098:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    909a:	9b03      	ldr	r3, [sp, #12]
    909c:	0519      	lsls	r1, r3, #20
    909e:	f53f af22 	bmi.w	8ee6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    90a2:	e7db      	b.n	905c <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    90a4:	461f      	mov	r7, r3
    90a6:	e7f8      	b.n	909a <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    90a8:	f645 0321 	movw	r3, #22561	; 0x5821
    90ac:	8223      	strh	r3, [r4, #16]
    90ae:	8323      	strh	r3, [r4, #24]
    90b0:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    90b2:	e7cc      	b.n	904e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    90b4:	4ec4ec4f 	.word	0x4ec4ec4f
    90b8:	200284dc 	.word	0x200284dc

000090bc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    90bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90c0:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    90c2:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    90c4:	b082      	sub	sp, #8
    90c6:	460c      	mov	r4, r1
  while (*path == ' ') {
    90c8:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    90ca:	4615      	mov	r5, r2
  while (*path == ' ') {
    90cc:	d103      	bne.n	90d6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    90ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    90d2:	2b20      	cmp	r3, #32
    90d4:	d0fb      	beq.n	90ce <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    90d6:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    90d8:	7823      	ldrb	r3, [r4, #0]
    90da:	b363      	cbz	r3, 9136 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    90dc:	2b2f      	cmp	r3, #47	; 0x2f
    90de:	d02a      	beq.n	9136 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    90e0:	f04f 0800 	mov.w	r8, #0
    90e4:	4e29      	ldr	r6, [pc, #164]	; (918c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    90e6:	1d21      	adds	r1, r4, #4
    90e8:	4620      	mov	r0, r4
    90ea:	aa01      	add	r2, sp, #4
    90ec:	f003 f86e 	bl	c1cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    90f0:	4604      	mov	r4, r0
    90f2:	b170      	cbz	r0, 9112 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    90f4:	9b01      	ldr	r3, [sp, #4]
    90f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    90fa:	d240      	bcs.n	917e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    90fc:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    90fe:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9102:	d831      	bhi.n	9168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    9104:	2b3c      	cmp	r3, #60	; 0x3c
    9106:	b2d9      	uxtb	r1, r3
    9108:	d829      	bhi.n	915e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    910a:	2921      	cmp	r1, #33	; 0x21
    910c:	d805      	bhi.n	911a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    910e:	291f      	cmp	r1, #31
    9110:	d809      	bhi.n	9126 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    9112:	2000      	movs	r0, #0
    9114:	b002      	add	sp, #8
    9116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    911a:	3922      	subs	r1, #34	; 0x22
    911c:	b2c9      	uxtb	r1, r1
    911e:	fa26 f101 	lsr.w	r1, r6, r1
    9122:	07ca      	lsls	r2, r1, #31
    9124:	d4f5      	bmi.n	9112 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    9126:	2b2e      	cmp	r3, #46	; 0x2e
    9128:	d001      	beq.n	912e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    912a:	2b20      	cmp	r3, #32
    912c:	d11c      	bne.n	9168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    912e:	7823      	ldrb	r3, [r4, #0]
    9130:	b10b      	cbz	r3, 9136 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9132:	2b2f      	cmp	r3, #47	; 0x2f
    9134:	d1d7      	bne.n	90e6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    9136:	692b      	ldr	r3, [r5, #16]
    9138:	3b01      	subs	r3, #1
    913a:	2bfe      	cmp	r3, #254	; 0xfe
    913c:	d8e9      	bhi.n	9112 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    913e:	7823      	ldrb	r3, [r4, #0]
    9140:	2b20      	cmp	r3, #32
    9142:	d103      	bne.n	914c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    9144:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9148:	2b20      	cmp	r3, #32
    914a:	d0fb      	beq.n	9144 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    914c:	2b2f      	cmp	r3, #47	; 0x2f
    914e:	d0f9      	beq.n	9144 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    9150:	4628      	mov	r0, r5
  *ptr = path;
    9152:	603c      	str	r4, [r7, #0]
}
    9154:	b002      	add	sp, #8
    9156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    915a:	f7ff bd55 	b.w	8c08 <FatFile::makeSFN(FatLfn_t*)>
    915e:	295c      	cmp	r1, #92	; 0x5c
    9160:	d0d7      	beq.n	9112 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    9162:	d905      	bls.n	9170 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    9164:	297c      	cmp	r1, #124	; 0x7c
    9166:	d0d4      	beq.n	9112 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    9168:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    916c:	60ac      	str	r4, [r5, #8]
    916e:	e7de      	b.n	912e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9170:	393e      	subs	r1, #62	; 0x3e
    9172:	2901      	cmp	r1, #1
    9174:	d8f8      	bhi.n	9168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    9176:	2000      	movs	r0, #0
    9178:	b002      	add	sp, #8
    917a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    917e:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    9182:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    9184:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9188:	e7d1      	b.n	912e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    918a:	bf00      	nop
    918c:	05002101 	.word	0x05002101

00009190 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    9190:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    9192:	2300      	movs	r3, #0
    9194:	b08b      	sub	sp, #44	; 0x2c
    9196:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    9198:	7883      	ldrb	r3, [r0, #2]
    919a:	079a      	lsls	r2, r3, #30
    919c:	d524      	bpl.n	91e8 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    919e:	6a01      	ldr	r1, [r0, #32]
    91a0:	4605      	mov	r5, r0
    91a2:	b119      	cbz	r1, 91ac <FatFile::remove()+0x1c>
    91a4:	6880      	ldr	r0, [r0, #8]
    91a6:	f000 fb3d 	bl	9824 <FatPartition::freeChain(unsigned long)>
    91aa:	b1e8      	cbz	r0, 91e8 <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    91ac:	2101      	movs	r1, #1
    91ae:	4628      	mov	r0, r5
    91b0:	f7fe fdc0 	bl	7d34 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    91b4:	b1c0      	cbz	r0, 91e8 <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    91b6:	1e42      	subs	r2, r0, #1
    91b8:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    91bc:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    91be:	01e3      	lsls	r3, r4, #7
    91c0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    91c4:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    91c8:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    91ca:	fa51 f383 	uxtab	r3, r1, r3
    91ce:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    91d0:	d1f5      	bne.n	91be <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    91d2:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    91d4:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    91d6:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    91d8:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    91da:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    91dc:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    91e0:	70ab      	strb	r3, [r5, #2]
    91e2:	f002 ff27 	bl	c034 <FsCache::sync()>
    91e6:	b910      	cbnz	r0, 91ee <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    91e8:	2000      	movs	r0, #0
}
    91ea:	b00b      	add	sp, #44	; 0x2c
    91ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    91ee:	f507 700e 	add.w	r0, r7, #568	; 0x238
    91f2:	f002 ff1f 	bl	c034 <FsCache::sync()>
    91f6:	2800      	cmp	r0, #0
    91f8:	d0f6      	beq.n	91e8 <FatFile::remove()+0x58>
    91fa:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    91fc:	6803      	ldr	r3, [r0, #0]
    91fe:	6a1b      	ldr	r3, [r3, #32]
    9200:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9202:	2800      	cmp	r0, #0
    9204:	d0f0      	beq.n	91e8 <FatFile::remove()+0x58>
  if (!isLFN()) {
    9206:	78eb      	ldrb	r3, [r5, #3]
    9208:	2b00      	cmp	r3, #0
    920a:	d0ee      	beq.n	91ea <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    920c:	4629      	mov	r1, r5
    920e:	a801      	add	r0, sp, #4
    9210:	f7fe ff66 	bl	80e0 <FatFile::openCluster(FatFile*)>
    9214:	2800      	cmp	r0, #0
    9216:	d0e7      	beq.n	91e8 <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9218:	78eb      	ldrb	r3, [r5, #3]
    921a:	2b00      	cmp	r3, #0
    921c:	d0e4      	beq.n	91e8 <FatFile::remove()+0x58>
    921e:	2701      	movs	r7, #1
    9220:	e021      	b.n	9266 <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9222:	a801      	add	r0, sp, #4
    9224:	f7ff f890 	bl	8348 <FatFile::readDirCache(bool)>
    9228:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    922a:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    922c:	2800      	cmp	r0, #0
    922e:	d0db      	beq.n	91e8 <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9230:	7ac2      	ldrb	r2, [r0, #11]
    9232:	2a0f      	cmp	r2, #15
    9234:	d1d8      	bne.n	91e8 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9236:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9238:	fa5f fc83 	uxtb.w	ip, r3
    923c:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    923e:	f002 031f 	and.w	r3, r2, #31
    9242:	428b      	cmp	r3, r1
    9244:	d1d0      	bne.n	91e8 <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9246:	7b43      	ldrb	r3, [r0, #13]
    9248:	42a3      	cmp	r3, r4
    924a:	d1cd      	bne.n	91e8 <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    924c:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    924e:	68a9      	ldr	r1, [r5, #8]
    9250:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    9254:	f043 0301 	orr.w	r3, r3, #1
    9258:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    925c:	0653      	lsls	r3, r2, #25
    925e:	d40d      	bmi.n	927c <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9260:	78eb      	ldrb	r3, [r5, #3]
    9262:	4563      	cmp	r3, ip
    9264:	d3c0      	bcc.n	91e8 <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    9266:	88a9      	ldrh	r1, [r5, #4]
    9268:	a801      	add	r0, sp, #4
    926a:	1bc9      	subs	r1, r1, r7
    926c:	b289      	uxth	r1, r1
    926e:	0149      	lsls	r1, r1, #5
    9270:	f7ff f9ca 	bl	8608 <FatFile::seekSet(unsigned long)>
    9274:	2100      	movs	r1, #0
    9276:	2800      	cmp	r0, #0
    9278:	d1d3      	bne.n	9222 <FatFile::remove()+0x92>
    927a:	e7b5      	b.n	91e8 <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    927c:	68ac      	ldr	r4, [r5, #8]
    927e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9282:	f002 fed7 	bl	c034 <FsCache::sync()>
    9286:	2800      	cmp	r0, #0
    9288:	d0ae      	beq.n	91e8 <FatFile::remove()+0x58>
    928a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    928e:	f002 fed1 	bl	c034 <FsCache::sync()>
    9292:	2800      	cmp	r0, #0
    9294:	d0a8      	beq.n	91e8 <FatFile::remove()+0x58>
    9296:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    9298:	6803      	ldr	r3, [r0, #0]
    929a:	6a1b      	ldr	r3, [r3, #32]
    929c:	4798      	blx	r3
    929e:	e7a4      	b.n	91ea <FatFile::remove()+0x5a>

000092a0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    92a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    92a8:	b1a2      	cbz	r2, 92d4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    92aa:	4605      	mov	r5, r0
    92ac:	460c      	mov	r4, r1
    92ae:	4698      	mov	r8, r3
    92b0:	1857      	adds	r7, r2, r1
    92b2:	e001      	b.n	92b8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    92b4:	42bc      	cmp	r4, r7
    92b6:	d00d      	beq.n	92d4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    92b8:	682b      	ldr	r3, [r5, #0]
    92ba:	4620      	mov	r0, r4
    92bc:	4649      	mov	r1, r9
    92be:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    92c0:	47c0      	blx	r8
    92c2:	4621      	mov	r1, r4
    92c4:	4602      	mov	r2, r0
    92c6:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    92c8:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    92ca:	47b0      	blx	r6
    92cc:	2800      	cmp	r0, #0
    92ce:	d1f1      	bne.n	92b4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    92d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    92d4:	2001      	movs	r0, #1
  }
    92d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    92da:	bf00      	nop

000092dc <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    92dc:	2a04      	cmp	r2, #4
    92de:	d804      	bhi.n	92ea <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    92e0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    92e4:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    92e8:	4770      	bx	lr
  } else if (i < 11) {
    92ea:	2a0a      	cmp	r2, #10
    92ec:	d803      	bhi.n	92f6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    92ee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    92f2:	8890      	ldrh	r0, [r2, #4]
    92f4:	4770      	bx	lr
  } else if (i < 13) {
    92f6:	2a0c      	cmp	r2, #12
    92f8:	d803      	bhi.n	9302 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    92fa:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    92fe:	88c8      	ldrh	r0, [r1, #6]
    9300:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9302:	2000      	movs	r0, #0
}
    9304:	4770      	bx	lr
    9306:	bf00      	nop

00009308 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    930a:	7804      	ldrb	r4, [r0, #0]
    930c:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    930e:	b17c      	cbz	r4, 9330 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9310:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9314:	4617      	mov	r7, r2
    9316:	d007      	beq.n	9328 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    9318:	2a01      	cmp	r2, #1
    931a:	d909      	bls.n	9330 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    931c:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    931e:	2300      	movs	r3, #0
    return 1;
    9320:	2001      	movs	r0, #1
    name[0] = '/';
    9322:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    9324:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    9326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    9328:	4621      	mov	r1, r4
    932a:	f7fe fd03 	bl	7d34 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    932e:	b918      	cbnz	r0, 9338 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    9330:	2300      	movs	r3, #0
  return 0;
    9332:	4618      	mov	r0, r3
  name[0] = '\0';
    9334:	7033      	strb	r3, [r6, #0]
}
    9336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    9338:	4603      	mov	r3, r0
    933a:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    933c:	2108      	movs	r1, #8
    933e:	e011      	b.n	9364 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9340:	7b02      	ldrb	r2, [r0, #12]
    9342:	4211      	tst	r1, r2
    9344:	d003      	beq.n	934e <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    9346:	f10e 0e20 	add.w	lr, lr, #32
    934a:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    934e:	1c65      	adds	r5, r4, #1
    9350:	42bd      	cmp	r5, r7
    9352:	d2ed      	bcs.n	9330 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    9354:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    9358:	f806 e004 	strb.w	lr, [r6, r4]
    935c:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    935e:	f1bc 0f0c 	cmp.w	ip, #12
    9362:	d010      	beq.n	9386 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    9364:	f1bc 0f08 	cmp.w	ip, #8
    9368:	d011      	beq.n	938e <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    936a:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    936e:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    9372:	2a19      	cmp	r2, #25
    9374:	d9e4      	bls.n	9340 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    9376:	f1be 0f20 	cmp.w	lr, #32
    937a:	d1e8      	bne.n	934e <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    937c:	f10c 0c01 	add.w	ip, ip, #1
    9380:	f1bc 0f0c 	cmp.w	ip, #12
    9384:	d1ee      	bne.n	9364 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    9386:	2300      	movs	r3, #0
    9388:	4620      	mov	r0, r4
    938a:	5533      	strb	r3, [r6, r4]
}
    938c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    938e:	781a      	ldrb	r2, [r3, #0]
    9390:	2a20      	cmp	r2, #32
    9392:	d0f8      	beq.n	9386 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    9394:	2110      	movs	r1, #16
      c = '.';
    9396:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    939a:	e7d8      	b.n	934e <FatFile::getSFN(char*, unsigned int)+0x46>

0000939c <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    93a0:	2400      	movs	r4, #0
    93a2:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    93a4:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    93a6:	4689      	mov	r9, r1
    93a8:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    93aa:	2b00      	cmp	r3, #0
    93ac:	d055      	beq.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    93ae:	78c3      	ldrb	r3, [r0, #3]
    93b0:	4606      	mov	r6, r0
    93b2:	2b00      	cmp	r3, #0
    93b4:	d058      	beq.n	9468 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    93b6:	4601      	mov	r1, r0
    93b8:	a801      	add	r0, sp, #4
    93ba:	4690      	mov	r8, r2
    93bc:	f7fe fe90 	bl	80e0 <FatFile::openCluster(FatFile*)>
    93c0:	2800      	cmp	r0, #0
    93c2:	d04a      	beq.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    93c4:	78f0      	ldrb	r0, [r6, #3]
    93c6:	2800      	cmp	r0, #0
    93c8:	d043      	beq.n	9452 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    93ca:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    93ce:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    93d0:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    93d4:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    93d6:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    93d8:	a801      	add	r0, sp, #4
    93da:	eba1 010a 	sub.w	r1, r1, sl
    93de:	b289      	uxth	r1, r1
    93e0:	0149      	lsls	r1, r1, #5
    93e2:	f7ff f911 	bl	8608 <FatFile::seekSet(unsigned long)>
    93e6:	b3c0      	cbz	r0, 945a <FatFile::getName8(char*, unsigned int)+0xbe>
    93e8:	2100      	movs	r1, #0
    93ea:	a801      	add	r0, sp, #4
    93ec:	f7fe ffac 	bl	8348 <FatFile::readDirCache(bool)>
    if (!ldir) {
    93f0:	b398      	cbz	r0, 945a <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    93f2:	7ac3      	ldrb	r3, [r0, #11]
    93f4:	2b0f      	cmp	r3, #15
    93f6:	d130      	bne.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
    93f8:	7803      	ldrb	r3, [r0, #0]
    93fa:	fa5f f18a 	uxtb.w	r1, sl
    93fe:	f003 031f 	and.w	r3, r3, #31
    9402:	428b      	cmp	r3, r1
    9404:	d129      	bne.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
    9406:	1c47      	adds	r7, r0, #1
    9408:	2500      	movs	r5, #0
  if (i < 5) {
    940a:	2d04      	cmp	r5, #4
    940c:	b2eb      	uxtb	r3, r5
    940e:	d83f      	bhi.n	9490 <FatFile::getName8(char*, unsigned int)+0xf4>
    9410:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    9412:	bb74      	cbnz	r4, 9472 <FatFile::getName8(char*, unsigned int)+0xd6>
    9414:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    9418:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    941a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    941e:	d33e      	bcc.n	949e <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    9420:	b1a3      	cbz	r3, 944c <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    9422:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9424:	4659      	mov	r1, fp
    9426:	4642      	mov	r2, r8
    9428:	f002 fe7e 	bl	c128 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    942c:	4683      	mov	fp, r0
    942e:	b1a0      	cbz	r0, 945a <FatFile::getName8(char*, unsigned int)+0xbe>
    9430:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    9432:	3501      	adds	r5, #1
    9434:	3702      	adds	r7, #2
    9436:	2d0d      	cmp	r5, #13
    9438:	d1e7      	bne.n	940a <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    943a:	f10a 0a01 	add.w	sl, sl, #1
    943e:	78f1      	ldrb	r1, [r6, #3]
    9440:	fa5f f38a 	uxtb.w	r3, sl
    9444:	fa1f fa8a 	uxth.w	sl, sl
    9448:	4299      	cmp	r1, r3
    944a:	d2c4      	bcs.n	93d6 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    944c:	ebab 0009 	sub.w	r0, fp, r9
    9450:	46d9      	mov	r9, fp
  *str = '\0';
    9452:	2300      	movs	r3, #0
    9454:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    9458:	e003      	b.n	9462 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    945a:	2300      	movs	r3, #0
  return 0;
    945c:	4618      	mov	r0, r3
  *name = 0;
    945e:	f889 3000 	strb.w	r3, [r9]
}
    9462:	b00b      	add	sp, #44	; 0x2c
    9464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    9468:	f7ff ff4e 	bl	9308 <FatFile::getSFN(char*, unsigned int)>
}
    946c:	b00b      	add	sp, #44	; 0x2c
    946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    9472:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    9476:	b289      	uxth	r1, r1
    9478:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    947c:	d2ed      	bcs.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    947e:	4a0a      	ldr	r2, [pc, #40]	; (94a8 <FatFile::getName8(char*, unsigned int)+0x10c>)
    9480:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9484:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    9488:	4318      	orrs	r0, r3
    948a:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    948e:	e7c9      	b.n	9424 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    9490:	2b0a      	cmp	r3, #10
    9492:	bf94      	ite	ls
    9494:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    9498:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    949c:	e7b9      	b.n	9412 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    949e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    94a2:	d2da      	bcs.n	945a <FatFile::getName8(char*, unsigned int)+0xbe>
    94a4:	461c      	mov	r4, r3
    94a6:	e7c4      	b.n	9432 <FatFile::getName8(char*, unsigned int)+0x96>
    94a8:	000ffc00 	.word	0x000ffc00

000094ac <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    94ac:	f7ff bf76 	b.w	939c <FatFile::getName8(char*, unsigned int)>

000094b0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    94b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    94b4:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    94b8:	b1c3      	cbz	r3, 94ec <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    94ba:	4681      	mov	r9, r0
    94bc:	460c      	mov	r4, r1
    94be:	4615      	mov	r5, r2
    94c0:	185e      	adds	r6, r3, r1
    94c2:	e002      	b.n	94ca <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    94c4:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    94c6:	42b4      	cmp	r4, r6
    94c8:	d010      	beq.n	94ec <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    94ca:	f8d9 3000 	ldr.w	r3, [r9]
    94ce:	4621      	mov	r1, r4
    94d0:	462a      	mov	r2, r5
    94d2:	4648      	mov	r0, r9
    94d4:	691b      	ldr	r3, [r3, #16]
    94d6:	4798      	blx	r3
    94d8:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    94da:	463a      	mov	r2, r7
    94dc:	4620      	mov	r0, r4
    94de:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    94e0:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    94e2:	2b00      	cmp	r3, #0
    94e4:	d1ee      	bne.n	94c4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    94e6:	4618      	mov	r0, r3
    94e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    94ec:	2301      	movs	r3, #1
  }
    94ee:	4618      	mov	r0, r3
    94f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000094f4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    94f4:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    94f6:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    94f8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    94fc:	46a4      	mov	ip, r4
    94fe:	bf28      	it	cs
    9500:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    9504:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    9508:	4281      	cmp	r1, r0
    950a:	d207      	bcs.n	951c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    950c:	f831 3b02 	ldrh.w	r3, [r1], #2
    9510:	b913      	cbnz	r3, 9518 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    9512:	6853      	ldr	r3, [r2, #4]
    9514:	3301      	adds	r3, #1
    9516:	6053      	str	r3, [r2, #4]
  while (p < e) {
    9518:	4288      	cmp	r0, r1
    951a:	d8f7      	bhi.n	950c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    951c:	eba4 040c 	sub.w	r4, r4, ip
    9520:	6014      	str	r4, [r2, #0]
}
    9522:	f85d 4b04 	ldr.w	r4, [sp], #4
    9526:	4770      	bx	lr

00009528 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    9528:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    952a:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    952c:	2c80      	cmp	r4, #128	; 0x80
    952e:	46a4      	mov	ip, r4
    9530:	bf28      	it	cs
    9532:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    9536:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    953a:	4281      	cmp	r1, r0
    953c:	d207      	bcs.n	954e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    953e:	f851 3b04 	ldr.w	r3, [r1], #4
    9542:	b913      	cbnz	r3, 954a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    9544:	6853      	ldr	r3, [r2, #4]
    9546:	3301      	adds	r3, #1
    9548:	6053      	str	r3, [r2, #4]
  while (p < e) {
    954a:	4288      	cmp	r0, r1
    954c:	d8f7      	bhi.n	953e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    954e:	eba4 040c 	sub.w	r4, r4, ip
    9552:	6014      	str	r4, [r2, #0]
}
    9554:	f85d 4b04 	ldr.w	r4, [sp], #4
    9558:	4770      	bx	lr
    955a:	bf00      	nop

0000955c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    9560:	79c3      	ldrb	r3, [r0, #7]
    9562:	4604      	mov	r4, r0
    9564:	460d      	mov	r5, r1
    9566:	4617      	mov	r7, r2
  if (fatType() == 32) {
    9568:	2b20      	cmp	r3, #32
    956a:	d059      	beq.n	9620 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    956c:	2b10      	cmp	r3, #16
    956e:	d030      	beq.n	95d2 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    9570:	2b0c      	cmp	r3, #12
    9572:	d151      	bne.n	9618 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9574:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    9576:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    957a:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    957c:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    9580:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9584:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    9588:	4648      	mov	r0, r9
    958a:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    958c:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9590:	f3c1 2146 	ubfx	r1, r1, #9, #7
    9594:	0952      	lsrs	r2, r2, #5
    9596:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    959a:	0052      	lsls	r2, r2, #1
    959c:	4641      	mov	r1, r8
    959e:	f002 fd75 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    95a2:	2800      	cmp	r0, #0
    95a4:	d038      	beq.n	9618 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    95a6:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    95aa:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    95ac:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    95ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    95b2:	d023      	beq.n	95fc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    95b4:	4418      	add	r0, r3
    95b6:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    95b8:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    95ba:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    95bc:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    95c0:	bf4c      	ite	mi
    95c2:	091b      	lsrmi	r3, r3, #4
    95c4:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    95c8:	429a      	cmp	r2, r3
    95ca:	d240      	bcs.n	964e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    95cc:	2000      	movs	r0, #0
}
    95ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95d2:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    95d4:	f3c1 2107 	ubfx	r1, r1, #8, #8
    95d8:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    95da:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95de:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    95e2:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95e4:	fab2 f282 	clz	r2, r2
    95e8:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    95ea:	0052      	lsls	r2, r2, #1
    95ec:	f002 fd4e 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    95f0:	b190      	cbz	r0, 9618 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    95f2:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    95f4:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    95f8:	5b43      	ldrh	r3, [r0, r5]
    95fa:	e025      	b.n	9648 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    95fc:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    95fe:	f108 0101 	add.w	r1, r8, #1
    9602:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9604:	f1a2 0202 	sub.w	r2, r2, #2
    9608:	fab2 f282 	clz	r2, r2
    960c:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    960e:	0052      	lsls	r2, r2, #1
    9610:	f002 fd3c 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9614:	2800      	cmp	r0, #0
    9616:	d1ce      	bne.n	95b6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    9618:	f04f 30ff 	mov.w	r0, #4294967295
}
    961c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9620:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    9622:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9624:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9628:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    962c:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9630:	fab2 f282 	clz	r2, r2
    9634:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    9636:	0052      	lsls	r2, r2, #1
    9638:	f002 fd28 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    963c:	2800      	cmp	r0, #0
    963e:	d0eb      	beq.n	9618 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9640:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    9642:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    9646:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    9648:	69e2      	ldr	r2, [r4, #28]
    964a:	429a      	cmp	r2, r3
    964c:	d3be      	bcc.n	95cc <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    964e:	2001      	movs	r0, #1
  *value = next;
    9650:	603b      	str	r3, [r7, #0]
}
    9652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9656:	bf00      	nop

00009658 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    9658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    965c:	79c3      	ldrb	r3, [r0, #7]
    965e:	4605      	mov	r5, r0
    9660:	460c      	mov	r4, r1
    9662:	4616      	mov	r6, r2
  if (fatType() == 32) {
    9664:	2b20      	cmp	r3, #32
    9666:	d048      	beq.n	96fa <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    9668:	2b10      	cmp	r3, #16
    966a:	d02d      	beq.n	96c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    966c:	2b0c      	cmp	r3, #12
    966e:	d141      	bne.n	96f4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    9670:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9674:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    9676:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    967a:	fa11 f184 	uxtah	r1, r1, r4
    967e:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    9682:	f3c1 2146 	ubfx	r1, r1, #9, #7
    9686:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9688:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    968a:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    968c:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    968e:	4639      	mov	r1, r7
    9690:	bf14      	ite	ne
    9692:	2201      	movne	r2, #1
    9694:	2203      	moveq	r2, #3
    9696:	f002 fcf9 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    969a:	b358      	cbz	r0, 96f4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    969c:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    96a0:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    96a4:	d03f      	beq.n	9726 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    96a6:	5cc2      	ldrb	r2, [r0, r3]
    96a8:	f002 020f 	and.w	r2, r2, #15
    96ac:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    96b0:	54c2      	strb	r2, [r0, r3]
    index++;
    96b2:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    96b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    96b8:	d03a      	beq.n	9730 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    96ba:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    96be:	4403      	add	r3, r0
    return true;
    96c0:	2001      	movs	r0, #1
    pc[index] = tmp;
    96c2:	701a      	strb	r2, [r3, #0]
}
    96c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    96c8:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    96ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
    96ce:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    96d0:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    96d4:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    96d6:	4419      	add	r1, r3
    96d8:	bf14      	ite	ne
    96da:	2201      	movne	r2, #1
    96dc:	2203      	moveq	r2, #3
    96de:	f002 fcd5 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    96e2:	4603      	mov	r3, r0
    96e4:	b130      	cbz	r0, 96f4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    96e6:	0064      	lsls	r4, r4, #1
    return true;
    96e8:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    96ea:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    96ee:	531e      	strh	r6, [r3, r4]
}
    96f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    96f4:	2000      	movs	r0, #0
}
    96f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    96fa:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    96fc:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    96fe:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9702:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9704:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    9708:	bf14      	ite	ne
    970a:	2201      	movne	r2, #1
    970c:	2203      	moveq	r2, #3
    970e:	f002 fcbd 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    9712:	4603      	mov	r3, r0
    9714:	2800      	cmp	r0, #0
    9716:	d0ed      	beq.n	96f4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    9718:	00a4      	lsls	r4, r4, #2
    return true;
    971a:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    971c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    9720:	511e      	str	r6, [r3, r4]
}
    9722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    9726:	54c6      	strb	r6, [r0, r3]
    index++;
    9728:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    972a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    972e:	d115      	bne.n	975c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9730:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    9732:	1c79      	adds	r1, r7, #1
    9734:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    9736:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    9738:	bf14      	ite	ne
    973a:	2201      	movne	r2, #1
    973c:	2203      	moveq	r2, #3
    973e:	f002 fca5 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9742:	4603      	mov	r3, r0
    9744:	2800      	cmp	r0, #0
    9746:	d0d5      	beq.n	96f4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    9748:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    974c:	2c00      	cmp	r4, #0
    974e:	d1b7      	bne.n	96c0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    9750:	7819      	ldrb	r1, [r3, #0]
    9752:	f021 010f 	bic.w	r1, r1, #15
    9756:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    975a:	e7b1      	b.n	96c0 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    975c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    9760:	4403      	add	r3, r0
    9762:	e7f5      	b.n	9750 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

00009764 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    9768:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    976a:	b082      	sub	sp, #8
    976c:	4605      	mov	r5, r0
    976e:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    9770:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    9772:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    9774:	d340      	bcc.n	97f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    9776:	2701      	movs	r7, #1
    find++;
    9778:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    977a:	69eb      	ldr	r3, [r5, #28]
    977c:	aa01      	add	r2, sp, #4
    977e:	4628      	mov	r0, r5
    9780:	42a3      	cmp	r3, r4
    9782:	d205      	bcs.n	9790 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    9784:	bb9f      	cbnz	r7, 97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    9786:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    9788:	2701      	movs	r7, #1
    find++;
    978a:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    978c:	42a3      	cmp	r3, r4
    978e:	d32e      	bcc.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    9790:	42a6      	cmp	r6, r4
    9792:	bf18      	it	ne
    9794:	2c01      	cmpne	r4, #1
    9796:	4621      	mov	r1, r4
    9798:	d929      	bls.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    979a:	f7ff fedf 	bl	955c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    979e:	2800      	cmp	r0, #0
    97a0:	db25      	blt.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    97a2:	d0e9      	beq.n	9778 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    97a4:	9b01      	ldr	r3, [sp, #4]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d1e6      	bne.n	9778 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    97aa:	b107      	cbz	r7, 97ae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    97ac:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    97ae:	69eb      	ldr	r3, [r5, #28]
    97b0:	42a3      	cmp	r3, r4
    97b2:	d31c      	bcc.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    97b4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    97b8:	4621      	mov	r1, r4
    97ba:	4628      	mov	r0, r5
    97bc:	f7ff ff4c 	bl	9658 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    97c0:	4607      	mov	r7, r0
    97c2:	b1a0      	cbz	r0, 97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    97c4:	b93e      	cbnz	r6, 97d6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    97c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    97c8:	2b00      	cmp	r3, #0
    97ca:	db01      	blt.n	97d0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    97cc:	3b01      	subs	r3, #1
    97ce:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    97d0:	f8c8 4000 	str.w	r4, [r8]
  return true;
    97d4:	e00c      	b.n	97f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    97d6:	2e01      	cmp	r6, #1
    97d8:	d009      	beq.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    97da:	69eb      	ldr	r3, [r5, #28]
    97dc:	429e      	cmp	r6, r3
    97de:	d806      	bhi.n	97ee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    97e0:	4631      	mov	r1, r6
    97e2:	4622      	mov	r2, r4
    97e4:	4628      	mov	r0, r5
    97e6:	f7ff ff37 	bl	9658 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    97ea:	2800      	cmp	r0, #0
    97ec:	d1eb      	bne.n	97c6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    97ee:	2700      	movs	r7, #0
}
    97f0:	4638      	mov	r0, r7
    97f2:	b002      	add	sp, #8
    97f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97f8:	460c      	mov	r4, r1
    setStart = false;
    97fa:	2700      	movs	r7, #0
    97fc:	e7bc      	b.n	9778 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    97fe:	bf00      	nop

00009800 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    9800:	2901      	cmp	r1, #1
    9802:	d90c      	bls.n	981e <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    9804:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    9806:	69c4      	ldr	r4, [r0, #28]
    9808:	428c      	cmp	r4, r1
    980a:	d303      	bcc.n	9814 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    980c:	f85d 4b04 	ldr.w	r4, [sp], #4
    9810:	f7ff bea4 	b.w	955c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    9814:	f04f 30ff 	mov.w	r0, #4294967295
    9818:	f85d 4b04 	ldr.w	r4, [sp], #4
    981c:	4770      	bx	lr
    981e:	f04f 30ff 	mov.w	r0, #4294967295
    9822:	4770      	bx	lr

00009824 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    9824:	b570      	push	{r4, r5, r6, lr}
    9826:	4605      	mov	r5, r0
    9828:	b082      	sub	sp, #8
    982a:	460c      	mov	r4, r1
    982c:	e01d      	b.n	986a <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    982e:	69eb      	ldr	r3, [r5, #28]
    9830:	429c      	cmp	r4, r3
    9832:	d81f      	bhi.n	9874 <FatPartition::freeChain(unsigned long)+0x50>
    9834:	f7ff fe92 	bl	955c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    9838:	4606      	mov	r6, r0
    if (fg < 0) {
    983a:	4621      	mov	r1, r4
    983c:	2200      	movs	r2, #0
    983e:	2e00      	cmp	r6, #0
    9840:	4628      	mov	r0, r5
    9842:	db17      	blt.n	9874 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    9844:	69eb      	ldr	r3, [r5, #28]
    9846:	429c      	cmp	r4, r3
    9848:	d814      	bhi.n	9874 <FatPartition::freeChain(unsigned long)+0x50>
    984a:	f7ff ff05 	bl	9658 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    984e:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    9850:	b180      	cbz	r0, 9874 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    9852:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9854:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    9856:	f103 0301 	add.w	r3, r3, #1
    985a:	bfa8      	it	ge
    985c:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    985e:	68eb      	ldr	r3, [r5, #12]
    9860:	42a3      	cmp	r3, r4
    cluster = next;
    9862:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    9864:	bf88      	it	hi
    9866:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    9868:	b12e      	cbz	r6, 9876 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    986a:	2c01      	cmp	r4, #1
    986c:	4621      	mov	r1, r4
    986e:	aa01      	add	r2, sp, #4
    9870:	4628      	mov	r0, r5
    9872:	d8dc      	bhi.n	982e <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    9874:	2000      	movs	r0, #0
}
    9876:	b002      	add	sp, #8
    9878:	bd70      	pop	{r4, r5, r6, pc}
    987a:	bf00      	nop

0000987c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9880:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    9882:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    9884:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    9886:	2800      	cmp	r0, #0
    9888:	da1b      	bge.n	98c2 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    988a:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    988c:	2a0c      	cmp	r2, #12
    988e:	d11b      	bne.n	98c8 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    9890:	69f7      	ldr	r7, [r6, #28]
    9892:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    9894:	2b02      	cmp	r3, #2
    9896:	f240 80cd 	bls.w	9a34 <FatPartition::freeClusterCount()+0x1b8>
    989a:	2402      	movs	r4, #2
    uint32_t free = 0;
    989c:	2500      	movs	r5, #0
    989e:	4621      	mov	r1, r4
    98a0:	aa02      	add	r2, sp, #8
    98a2:	4630      	mov	r0, r6
    98a4:	f7ff fe5a 	bl	955c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    98a8:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    98aa:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    98ae:	db06      	blt.n	98be <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    98b0:	d157      	bne.n	9962 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    98b2:	42a7      	cmp	r7, r4
    98b4:	461c      	mov	r4, r3
    98b6:	d05c      	beq.n	9972 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    98b8:	69f2      	ldr	r2, [r6, #28]
    98ba:	4293      	cmp	r3, r2
    98bc:	d9ef      	bls.n	989e <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    98be:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    98c2:	b004      	add	sp, #16
    98c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    98c8:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    98ca:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    98cc:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    98d0:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    98d2:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    98d4:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    98d6:	e9cd 1002 	strd	r1, r0, [sp, #8]
    98da:	f100 8085 	bmi.w	99e8 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    98de:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    98e0:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    98e4:	2a20      	cmp	r2, #32
    return m_buffer;
    98e6:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    98ea:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    98ee:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    98f2:	d042      	beq.n	997a <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    98f4:	f8d6 8000 	ldr.w	r8, [r6]
    98f8:	4b4f      	ldr	r3, [pc, #316]	; (9a38 <FatPartition::freeClusterCount()+0x1bc>)
    98fa:	f8d8 2000 	ldr.w	r2, [r8]
    98fe:	f8d6 a018 	ldr.w	sl, [r6, #24]
    9902:	6995      	ldr	r5, [r2, #24]
    9904:	429d      	cmp	r5, r3
    9906:	d178      	bne.n	99fa <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    9908:	2c00      	cmp	r4, #0
    990a:	f000 8082 	beq.w	9a12 <FatPartition::freeClusterCount()+0x196>
    990e:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    9912:	6913      	ldr	r3, [r2, #16]
    9914:	4651      	mov	r1, sl
    9916:	463a      	mov	r2, r7
    9918:	4640      	mov	r0, r8
    991a:	4798      	blx	r3
    991c:	2800      	cmp	r0, #0
    991e:	d0ce      	beq.n	98be <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    9920:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    9922:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    9926:	468e      	mov	lr, r1
    9928:	bf28      	it	cs
    992a:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    992e:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    9932:	45bc      	cmp	ip, r7
    9934:	d90b      	bls.n	994e <FatPartition::freeClusterCount()+0xd2>
    9936:	9d03      	ldr	r5, [sp, #12]
    9938:	463b      	mov	r3, r7
    993a:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    993c:	f833 4b02 	ldrh.w	r4, [r3], #2
    9940:	b90c      	cbnz	r4, 9946 <FatPartition::freeClusterCount()+0xca>
    9942:	3501      	adds	r5, #1
    9944:	4602      	mov	r2, r0
  while (p < e) {
    9946:	459c      	cmp	ip, r3
    9948:	d8f8      	bhi.n	993c <FatPartition::freeClusterCount()+0xc0>
    994a:	b102      	cbz	r2, 994e <FatPartition::freeClusterCount()+0xd2>
    994c:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    994e:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    9952:	eba1 010e 	sub.w	r1, r1, lr
    9956:	45d1      	cmp	r9, sl
    9958:	9102      	str	r1, [sp, #8]
    995a:	d05a      	beq.n	9a12 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    995c:	f8d8 2000 	ldr.w	r2, [r8]
    9960:	e7d7      	b.n	9912 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    9962:	9a02      	ldr	r2, [sp, #8]
    9964:	2a00      	cmp	r2, #0
    9966:	d1a4      	bne.n	98b2 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    9968:	42a7      	cmp	r7, r4
        free++;
    996a:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    996e:	461c      	mov	r4, r3
    9970:	d1a2      	bne.n	98b8 <FatPartition::freeClusterCount()+0x3c>
    return free;
    9972:	4628      	mov	r0, r5
}
    9974:	b004      	add	sp, #16
    9976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    997a:	f8d6 a000 	ldr.w	sl, [r6]
    997e:	4b2e      	ldr	r3, [pc, #184]	; (9a38 <FatPartition::freeClusterCount()+0x1bc>)
    9980:	f8da 2000 	ldr.w	r2, [sl]
    9984:	f8d6 9018 	ldr.w	r9, [r6, #24]
    9988:	6995      	ldr	r5, [r2, #24]
    998a:	429d      	cmp	r5, r3
    998c:	d146      	bne.n	9a1c <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    998e:	2c00      	cmp	r4, #0
    9990:	d03f      	beq.n	9a12 <FatPartition::freeClusterCount()+0x196>
    9992:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    9996:	6913      	ldr	r3, [r2, #16]
    9998:	4649      	mov	r1, r9
    999a:	463a      	mov	r2, r7
    999c:	4650      	mov	r0, sl
    999e:	4798      	blx	r3
    99a0:	2800      	cmp	r0, #0
    99a2:	d08c      	beq.n	98be <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    99a4:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    99a8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    99ac:	46e6      	mov	lr, ip
    99ae:	bf28      	it	cs
    99b0:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    99b4:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    99b8:	42ba      	cmp	r2, r7
    99ba:	d90b      	bls.n	99d4 <FatPartition::freeClusterCount()+0x158>
    99bc:	9d03      	ldr	r5, [sp, #12]
    99be:	463b      	mov	r3, r7
    99c0:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    99c2:	f853 4b04 	ldr.w	r4, [r3], #4
    99c6:	b90c      	cbnz	r4, 99cc <FatPartition::freeClusterCount()+0x150>
    99c8:	3501      	adds	r5, #1
    99ca:	4601      	mov	r1, r0
  while (p < e) {
    99cc:	429a      	cmp	r2, r3
    99ce:	d8f8      	bhi.n	99c2 <FatPartition::freeClusterCount()+0x146>
    99d0:	b101      	cbz	r1, 99d4 <FatPartition::freeClusterCount()+0x158>
    99d2:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    99d4:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    99d8:	ebac 030e 	sub.w	r3, ip, lr
    99dc:	45c8      	cmp	r8, r9
    99de:	9302      	str	r3, [sp, #8]
    99e0:	d017      	beq.n	9a12 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    99e2:	f8da 2000 	ldr.w	r2, [sl]
    99e6:	e7d6      	b.n	9996 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    99e8:	f506 700e 	add.w	r0, r6, #568	; 0x238
    99ec:	f002 fb22 	bl	c034 <FsCache::sync()>
    99f0:	2800      	cmp	r0, #0
    99f2:	f43f af64 	beq.w	98be <FatPartition::freeClusterCount()+0x42>
    99f6:	79f2      	ldrb	r2, [r6, #7]
    99f8:	e771      	b.n	98de <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    99fa:	4623      	mov	r3, r4
    99fc:	ac02      	add	r4, sp, #8
    99fe:	463a      	mov	r2, r7
    9a00:	4651      	mov	r1, sl
    9a02:	9401      	str	r4, [sp, #4]
    9a04:	4640      	mov	r0, r8
    9a06:	4c0d      	ldr	r4, [pc, #52]	; (9a3c <FatPartition::freeClusterCount()+0x1c0>)
    9a08:	9400      	str	r4, [sp, #0]
    9a0a:	47a8      	blx	r5
    9a0c:	2800      	cmp	r0, #0
    9a0e:	f43f af56 	beq.w	98be <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    9a12:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    9a14:	6270      	str	r0, [r6, #36]	; 0x24
}
    9a16:	b004      	add	sp, #16
    9a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    9a1c:	4623      	mov	r3, r4
    9a1e:	ac02      	add	r4, sp, #8
    9a20:	463a      	mov	r2, r7
    9a22:	4649      	mov	r1, r9
    9a24:	9401      	str	r4, [sp, #4]
    9a26:	4650      	mov	r0, sl
    9a28:	4c05      	ldr	r4, [pc, #20]	; (9a40 <FatPartition::freeClusterCount()+0x1c4>)
    9a2a:	9400      	str	r4, [sp, #0]
    9a2c:	47a8      	blx	r5
    9a2e:	2800      	cmp	r0, #0
    9a30:	d1ef      	bne.n	9a12 <FatPartition::freeClusterCount()+0x196>
    9a32:	e744      	b.n	98be <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    9a34:	2000      	movs	r0, #0
    9a36:	e744      	b.n	98c2 <FatPartition::freeClusterCount()+0x46>
    9a38:	000094b1 	.word	0x000094b1
    9a3c:	000094f5 	.word	0x000094f5
    9a40:	00009529 	.word	0x00009529

00009a44 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9a44:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    9a46:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    9a48:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9a4a:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    9a4c:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    9a4e:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    9a52:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    9a56:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    9a58:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    9a5a:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    9a5c:	62e1      	str	r1, [r4, #44]	; 0x2c
    9a5e:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    9a62:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    9a66:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    9a6a:	6362      	str	r2, [r4, #52]	; 0x34
    9a6c:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    9a70:	b1cd      	cbz	r5, 9aa6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    9a72:	2d04      	cmp	r5, #4
    9a74:	d901      	bls.n	9a7a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    9a76:	2000      	movs	r0, #0
}
    9a78:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    9a7a:	461a      	mov	r2, r3
    9a7c:	4619      	mov	r1, r3
    9a7e:	4630      	mov	r0, r6
    9a80:	f002 fb04 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    9a84:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    9a88:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    9a8c:	442b      	add	r3, r5
    9a8e:	011d      	lsls	r5, r3, #4
    9a90:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    9a94:	2800      	cmp	r0, #0
    9a96:	d0ee      	beq.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    9a98:	7919      	ldrb	r1, [r3, #4]
    9a9a:	2900      	cmp	r1, #0
    9a9c:	d0eb      	beq.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    9a9e:	5d52      	ldrb	r2, [r2, r5]
    9aa0:	0652      	lsls	r2, r2, #25
    9aa2:	d1e8      	bne.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    9aa4:	689d      	ldr	r5, [r3, #8]
    9aa6:	2200      	movs	r2, #0
    9aa8:	4629      	mov	r1, r5
    9aaa:	4630      	mov	r0, r6
    9aac:	f002 faee 	bl	c08c <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    9ab0:	2800      	cmp	r0, #0
    9ab2:	d0e0      	beq.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    9ab4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    9ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9abc:	d1db      	bne.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    9abe:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9ac0:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    9ac2:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    9ac4:	2a01      	cmp	r2, #1
    9ac6:	d8d6      	bhi.n	9a76 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9ac8:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9aca:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9acc:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    9ace:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    9ad0:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    9ad2:	f04f 0300 	mov.w	r3, #0
    9ad6:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9ad8:	d044      	beq.n	9b64 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    9ada:	2201      	movs	r2, #1
    9adc:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    9ade:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9ae0:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    9ae2:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9ae4:	4291      	cmp	r1, r2
    9ae6:	d004      	beq.n	9af2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    9ae8:	2b08      	cmp	r3, #8
    9aea:	d1f7      	bne.n	9adc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    9aec:	2000      	movs	r0, #0
    9aee:	71a3      	strb	r3, [r4, #6]
}
    9af0:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    9af2:	461e      	mov	r6, r3
    9af4:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    9af6:	8ac1      	ldrh	r1, [r0, #22]
    9af8:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    9afa:	b909      	cbnz	r1, 9b00 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    9afc:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    9afe:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9b00:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    9b02:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    9b06:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    9b08:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9b0a:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    9b0c:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9b0e:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    9b12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9b16:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    9b1a:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    9b1e:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    9b20:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    9b24:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    9b26:	b902      	cbnz	r2, 9b2a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    9b28:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    9b2a:	1aed      	subs	r5, r5, r3
    9b2c:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    9b2e:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    9b30:	1c5a      	adds	r2, r3, #1
    9b32:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    9b34:	f04f 32ff 	mov.w	r2, #4294967295
    9b38:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    9b3a:	f640 72f4 	movw	r2, #4084	; 0xff4
    9b3e:	4293      	cmp	r3, r2
    9b40:	d90c      	bls.n	9b5c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    9b42:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    9b46:	4293      	cmp	r3, r2
    9b48:	d90a      	bls.n	9b60 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    9b4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    9b4c:	2320      	movs	r3, #32
    9b4e:	6222      	str	r2, [r4, #32]
  return true;
    9b50:	2001      	movs	r0, #1
    m_fatType = 12;
    9b52:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    9b54:	6321      	str	r1, [r4, #48]	; 0x30
    9b56:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    9b5a:	bd70      	pop	{r4, r5, r6, pc}
    9b5c:	230c      	movs	r3, #12
    9b5e:	e7f7      	b.n	9b50 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    9b60:	2310      	movs	r3, #16
    9b62:	e7f5      	b.n	9b50 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    9b64:	461e      	mov	r6, r3
    9b66:	e7c6      	b.n	9af6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00009b68 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    9b68:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    9b6a:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    9b6e:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    9b70:	2300      	movs	r3, #0
    9b72:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    9b74:	a801      	add	r0, sp, #4
    9b76:	4621      	mov	r1, r4
    9b78:	9301      	str	r3, [sp, #4]
    9b7a:	f7fe fa27 	bl	7fcc <FatFile::open(FatFile*, char const*, int)>
    9b7e:	4605      	mov	r5, r0
    9b80:	b198      	cbz	r0, 9baa <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    9b82:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9b86:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9b8a:	d011      	beq.n	9bb0 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    9b8c:	f10d 0e04 	add.w	lr, sp, #4
    9b90:	46a4      	mov	ip, r4
    9b92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    9b96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9b9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    9b9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9ba2:	f8de 3000 	ldr.w	r3, [lr]
    9ba6:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    9baa:	4628      	mov	r0, r5
    9bac:	b00b      	add	sp, #44	; 0x2c
    9bae:	bd30      	pop	{r4, r5, pc}
  return false;
    9bb0:	461d      	mov	r5, r3
}
    9bb2:	4628      	mov	r0, r5
    9bb4:	b00b      	add	sp, #44	; 0x2c
    9bb6:	bd30      	pop	{r4, r5, pc}

00009bb8 <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    9bb8:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    9bba:	b570      	push	{r4, r5, r6, lr}
    9bbc:	4604      	mov	r4, r0
  if (this == &from) return *this;
    9bbe:	d021      	beq.n	9c04 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    9bc0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9bc2:	460d      	mov	r5, r1
    9bc4:	b118      	cbz	r0, 9bce <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    9bc6:	f7fe f8c5 	bl	7d54 <FatFile::close()>
    9bca:	2800      	cmp	r0, #0
    9bcc:	d141      	bne.n	9c52 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    9bce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9bd0:	b118      	cbz	r0, 9bda <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    9bd2:	f7fc fbbd 	bl	6350 <ExFatFile::close()>
    9bd6:	2800      	cmp	r0, #0
    9bd8:	d141      	bne.n	9c5e <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    9bda:	6bae      	ldr	r6, [r5, #56]	; 0x38
    9bdc:	b1a6      	cbz	r6, 9c08 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    9bde:	4621      	mov	r1, r4
    9be0:	2024      	movs	r0, #36	; 0x24
    9be2:	f000 f8e9 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    9be6:	2300      	movs	r3, #0
    9be8:	4684      	mov	ip, r0
    9bea:	8003      	strh	r3, [r0, #0]
    9bec:	7083      	strb	r3, [r0, #2]
    9bee:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    9bf0:	6bad      	ldr	r5, [r5, #56]	; 0x38
    9bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9bf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9bfa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9bfe:	682b      	ldr	r3, [r5, #0]
    9c00:	f8cc 3000 	str.w	r3, [ip]
}
    9c04:	4620      	mov	r0, r4
    9c06:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    9c08:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9c0a:	2b00      	cmp	r3, #0
    9c0c:	d0fa      	beq.n	9c04 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    9c0e:	4621      	mov	r1, r4
    9c10:	2038      	movs	r0, #56	; 0x38
    9c12:	f000 f8d1 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    9c16:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    9c1a:	8646      	strh	r6, [r0, #50]	; 0x32
    9c1c:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    9c1e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    9c20:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    9c24:	681e      	ldr	r6, [r3, #0]
    9c26:	3310      	adds	r3, #16
    9c28:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    9c2c:	3010      	adds	r0, #16
    9c2e:	f853 1c08 	ldr.w	r1, [r3, #-8]
    9c32:	f853 2c04 	ldr.w	r2, [r3, #-4]
    9c36:	4563      	cmp	r3, ip
    9c38:	f840 6c10 	str.w	r6, [r0, #-16]
    9c3c:	f840 5c0c 	str.w	r5, [r0, #-12]
    9c40:	f840 1c08 	str.w	r1, [r0, #-8]
    9c44:	f840 2c04 	str.w	r2, [r0, #-4]
    9c48:	d1ec      	bne.n	9c24 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    9c4a:	681b      	ldr	r3, [r3, #0]
    9c4c:	6003      	str	r3, [r0, #0]
}
    9c4e:	4620      	mov	r0, r4
    9c50:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    9c52:	2300      	movs	r3, #0
    9c54:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    9c56:	6bae      	ldr	r6, [r5, #56]	; 0x38
    9c58:	2e00      	cmp	r6, #0
    9c5a:	d1c0      	bne.n	9bde <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    9c5c:	e7d4      	b.n	9c08 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    9c5e:	2300      	movs	r3, #0
  if (from.m_fFile) {
    9c60:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    9c62:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    9c64:	2e00      	cmp	r6, #0
    9c66:	d1ba      	bne.n	9bde <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    9c68:	e7ce      	b.n	9c08 <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    9c6a:	bf00      	nop

00009c6c <FsBaseFile::close()>:
bool FsBaseFile::close() {
    9c6c:	b510      	push	{r4, lr}
    9c6e:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9c70:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9c72:	b110      	cbz	r0, 9c7a <FsBaseFile::close()+0xe>
    9c74:	f7fe f86e 	bl	7d54 <FatFile::close()>
    9c78:	b930      	cbnz	r0, 9c88 <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    9c7a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9c7c:	b110      	cbz	r0, 9c84 <FsBaseFile::close()+0x18>
    9c7e:	f7fc fb67 	bl	6350 <ExFatFile::close()>
    9c82:	b920      	cbnz	r0, 9c8e <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    9c84:	2000      	movs	r0, #0
}
    9c86:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    9c88:	2300      	movs	r3, #0
    9c8a:	63a3      	str	r3, [r4, #56]	; 0x38
}
    9c8c:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    9c8e:	2300      	movs	r3, #0
    9c90:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    9c92:	bd10      	pop	{r4, pc}

00009c94 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    9c94:	2900      	cmp	r1, #0
    9c96:	d052      	beq.n	9d3e <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    9c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c9c:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9c9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9ca0:	460d      	mov	r5, r1
    9ca2:	4617      	mov	r7, r2
    9ca4:	461e      	mov	r6, r3
    9ca6:	b110      	cbz	r0, 9cae <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    9ca8:	f7fe f854 	bl	7d54 <FatFile::close()>
    9cac:	bba0      	cbnz	r0, 9d18 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    9cae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9cb0:	b110      	cbz	r0, 9cb8 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    9cb2:	f7fc fb4d 	bl	6350 <ExFatFile::close()>
    9cb6:	bbb8      	cbnz	r0, 9d28 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    9cb8:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    9cbc:	f1b8 0f00 	cmp.w	r8, #0
    9cc0:	d011      	beq.n	9ce6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    9cc2:	4621      	mov	r1, r4
    9cc4:	2024      	movs	r0, #36	; 0x24
    9cc6:	f000 f877 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9cca:	4633      	mov	r3, r6
    9ccc:	2600      	movs	r6, #0
    9cce:	463a      	mov	r2, r7
    9cd0:	8006      	strh	r6, [r0, #0]
    9cd2:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    9cd4:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    9cd6:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    9cda:	f7fe f9f9 	bl	80d0 <FatFile::open(FatVolume*, char const*, int)>
    9cde:	bb58      	cbnz	r0, 9d38 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    9ce0:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    9ce6:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    9cea:	b193      	cbz	r3, 9d12 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    9cec:	4621      	mov	r1, r4
    9cee:	2038      	movs	r0, #56	; 0x38
    9cf0:	f000 f862 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9cf4:	4633      	mov	r3, r6
    9cf6:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    9cfa:	463a      	mov	r2, r7
    9cfc:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9d00:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    9d02:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    9d06:	f7fc ff33 	bl	6b70 <ExFatFile::open(ExFatVolume*, char const*, int)>
    9d0a:	b9a8      	cbnz	r0, 9d38 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    9d0c:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9d12:	2000      	movs	r0, #0
}
    9d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    9d18:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9d1a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    9d1e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    9d20:	f1b8 0f00 	cmp.w	r8, #0
    9d24:	d1cd      	bne.n	9cc2 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    9d26:	e7de      	b.n	9ce6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    9d28:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    9d2a:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    9d2e:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    9d30:	f1b8 0f00 	cmp.w	r8, #0
    9d34:	d1c5      	bne.n	9cc2 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    9d36:	e7d6      	b.n	9ce6 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    9d38:	2001      	movs	r0, #1
}
    9d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    9d3e:	2000      	movs	r0, #0
}
    9d40:	4770      	bx	lr
    9d42:	bf00      	nop

00009d44 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d46:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    9d48:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    9d4a:	460d      	mov	r5, r1
    9d4c:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    9d4e:	b110      	cbz	r0, 9d56 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    9d50:	f7fe f800 	bl	7d54 <FatFile::close()>
    9d54:	bb38      	cbnz	r0, 9da6 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    9d56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    9d58:	b110      	cbz	r0, 9d60 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    9d5a:	f7fc faf9 	bl	6350 <ExFatFile::close()>
    9d5e:	bb38      	cbnz	r0, 9db0 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    9d60:	6bae      	ldr	r6, [r5, #56]	; 0x38
    9d62:	b176      	cbz	r6, 9d82 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    9d64:	4621      	mov	r1, r4
    9d66:	2024      	movs	r0, #36	; 0x24
    9d68:	f000 f826 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    9d6c:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9d6e:	463a      	mov	r2, r7
    9d70:	8001      	strh	r1, [r0, #0]
    9d72:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    9d74:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    9d76:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9d78:	f7fe fd10 	bl	879c <FatFile::openNext(FatFile*, int)>
    9d7c:	b988      	cbnz	r0, 9da2 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    9d7e:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    9d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    9d82:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    9d84:	2800      	cmp	r0, #0
    9d86:	d0fb      	beq.n	9d80 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    9d88:	4621      	mov	r1, r4
    9d8a:	2038      	movs	r0, #56	; 0x38
    9d8c:	f000 f814 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9d90:	463a      	mov	r2, r7
    9d92:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    9d96:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    9d98:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    9d9a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    9d9c:	f7fc fef0 	bl	6b80 <ExFatFile::openNext(ExFatFile*, int)>
    9da0:	b120      	cbz	r0, 9dac <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    9da2:	2001      	movs	r0, #1
}
    9da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    9da6:	2300      	movs	r3, #0
    9da8:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    9daa:	e7d9      	b.n	9d60 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    9dac:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    9dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    9db0:	2300      	movs	r3, #0
    9db2:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    9db4:	e7d4      	b.n	9d60 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    9db6:	bf00      	nop

00009db8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9db8:	4608      	mov	r0, r1
    9dba:	4770      	bx	lr

00009dbc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    9dc0:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9dc2:	4604      	mov	r4, r0
    9dc4:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    9dc6:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    9dca:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    9dce:	4601      	mov	r1, r0
    9dd0:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    9dd4:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    9dd6:	f7ff ffef 	bl	9db8 <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    9dda:	4642      	mov	r2, r8
  ExFatPartition() {}
    9ddc:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    9de0:	4605      	mov	r5, r0
    9de2:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    9de6:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    9dea:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    9dee:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9df2:	f7fd fe43 	bl	7a7c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9df6:	bba0      	cbnz	r0, 9e62 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    9df8:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    9dfa:	4621      	mov	r1, r4
    9dfc:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    9e00:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    9e04:	f7ff ffd8 	bl	9db8 <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    9e08:	2302      	movs	r3, #2
    9e0a:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    9e0c:	4642      	mov	r2, r8
    9e0e:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    9e12:	4605      	mov	r5, r0
    9e14:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    9e18:	7203      	strb	r3, [r0, #8]
    9e1a:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    9e1e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    9e22:	f7ff fe0f 	bl	9a44 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    9e26:	b938      	cbnz	r0, 9e38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    9e28:	2300      	movs	r3, #0
    9e2a:	4a1a      	ldr	r2, [pc, #104]	; (9e94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    9e2c:	4618      	mov	r0, r3
  m_cwv = nullptr;
    9e2e:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    9e30:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    9e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    9e38:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9e3c:	4630      	mov	r0, r6
    9e3e:	f7fd ff89 	bl	7d54 <FatFile::close()>
    return m_vwd.openRoot(this);
    9e42:	4629      	mov	r1, r5
    9e44:	4630      	mov	r0, r6
    9e46:	f7fe f979 	bl	813c <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d0ec      	beq.n	9e28 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    9e4e:	4b12      	ldr	r3, [pc, #72]	; (9e98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    9e50:	681a      	ldr	r2, [r3, #0]
    9e52:	b9aa      	cbnz	r2, 9e80 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    9e54:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    9e56:	4b0f      	ldr	r3, [pc, #60]	; (9e94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    9e58:	b1af      	cbz	r7, 9e86 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    9e5a:	2001      	movs	r0, #1
    m_cwv = this;
    9e5c:	601c      	str	r4, [r3, #0]
}
    9e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    9e62:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    9e66:	4630      	mov	r0, r6
    9e68:	f7fc fa72 	bl	6350 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    9e6c:	4629      	mov	r1, r5
    9e6e:	4630      	mov	r0, r6
    9e70:	f7fc fa78 	bl	6364 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    9e74:	2800      	cmp	r0, #0
    9e76:	d0bf      	beq.n	9df8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    9e78:	4b08      	ldr	r3, [pc, #32]	; (9e9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    9e7a:	681a      	ldr	r2, [r3, #0]
    9e7c:	2a00      	cmp	r2, #0
    9e7e:	d0e9      	beq.n	9e54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    9e80:	4b04      	ldr	r3, [pc, #16]	; (9e94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    9e82:	2f00      	cmp	r7, #0
    9e84:	d1e9      	bne.n	9e5a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    9e86:	681a      	ldr	r2, [r3, #0]
    9e88:	2a00      	cmp	r2, #0
    9e8a:	d0e6      	beq.n	9e5a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    9e8c:	2001      	movs	r0, #1
}
    9e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e92:	bf00      	nop
    9e94:	20028514 	.word	0x20028514
    9e98:	20028518 	.word	0x20028518
    9e9c:	200284e0 	.word	0x200284e0

00009ea0 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    9ea0:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    9ea2:	2500      	movs	r5, #0
    9ea4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    9ea8:	4604      	mov	r4, r0
    9eaa:	6045      	str	r5, [r0, #4]
    9eac:	7305      	strb	r5, [r0, #12]
    9eae:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    9eb0:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9eb4:	4d03      	ldr	r5, [pc, #12]	; (9ec4 <FsVolume::open(char const*, int)+0x24>)
    9eb6:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9eba:	f7ff feeb 	bl	9c94 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    9ebe:	4620      	mov	r0, r4
    9ec0:	bd70      	pop	{r4, r5, r6, pc}
    9ec2:	bf00      	nop
    9ec4:	20000ca4 	.word	0x20000ca4

00009ec8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9ec8:	f04f 30ff 	mov.w	r0, #4294967295
    9ecc:	4770      	bx	lr
    9ece:	bf00      	nop

00009ed0 <SharedSpiCard::errorCode() const>:
  }
    9ed0:	7c40      	ldrb	r0, [r0, #17]
    9ed2:	4770      	bx	lr

00009ed4 <SharedSpiCard::errorData() const>:
  }
    9ed4:	7d00      	ldrb	r0, [r0, #20]
    9ed6:	4770      	bx	lr

00009ed8 <SharedSpiCard::type() const>:
  }
    9ed8:	7d40      	ldrb	r0, [r0, #21]
    9eda:	4770      	bx	lr

00009edc <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    9edc:	2001      	movs	r0, #1
    9ede:	4770      	bx	lr

00009ee0 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    9ee0:	7f00      	ldrb	r0, [r0, #28]
    9ee2:	4770      	bx	lr

00009ee4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ee8:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9eea:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9eec:	4605      	mov	r5, r0
    9eee:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ef0:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9ef2:	4691      	mov	r9, r2
    9ef4:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9ef6:	d028      	beq.n	9f4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    9ef8:	682b      	ldr	r3, [r5, #0]
    9efa:	4621      	mov	r1, r4
    9efc:	4628      	mov	r0, r5
    9efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9f00:	4798      	blx	r3
    9f02:	b198      	cbz	r0, 9f2c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    9f04:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    9f06:	f1b9 0f00 	cmp.w	r9, #0
    9f0a:	d012      	beq.n	9f32 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    9f0c:	eb04 0809 	add.w	r8, r4, r9
    9f10:	e001      	b.n	9f16 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    9f12:	45a0      	cmp	r8, r4
    9f14:	d00d      	beq.n	9f32 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    9f16:	4639      	mov	r1, r7
    9f18:	4620      	mov	r0, r4
    9f1a:	47b0      	blx	r6
    if (!writeData(src)) {
    9f1c:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    9f1e:	4601      	mov	r1, r0
    if (!writeData(src)) {
    9f20:	4628      	mov	r0, r5
    9f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    9f24:	3401      	adds	r4, #1
    if (!writeData(src)) {
    9f26:	4798      	blx	r3
    9f28:	2800      	cmp	r0, #0
    9f2a:	d1f2      	bne.n	9f12 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    9f2c:	2000      	movs	r0, #0
}
    9f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    9f32:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9f34:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9f36:	444b      	add	r3, r9
    9f38:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9f3a:	2800      	cmp	r0, #0
    9f3c:	d1f7      	bne.n	9f2e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    9f3e:	682b      	ldr	r3, [r5, #0]
    9f40:	4628      	mov	r0, r5
    9f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9f44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    9f48:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9f4a:	6983      	ldr	r3, [r0, #24]
    9f4c:	428b      	cmp	r3, r1
    9f4e:	d1d3      	bne.n	9ef8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    9f50:	e7d9      	b.n	9f06 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    9f52:	bf00      	nop

00009f54 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9f54:	4770      	bx	lr
    9f56:	bf00      	nop

00009f58 <SharedSpiCard::end()>:
    m_spiDriver.end();
    9f58:	3004      	adds	r0, #4
    9f5a:	f002 b817 	b.w	bf8c <SdSpiArduinoDriver::end()>
    9f5e:	bf00      	nop

00009f60 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    9f60:	b510      	push	{r4, lr}
    9f62:	4604      	mov	r4, r0
    9f64:	2120      	movs	r1, #32
    9f66:	f003 fc8b 	bl	d880 <operator delete(void*, unsigned int)>
    9f6a:	4620      	mov	r0, r4
    9f6c:	bd10      	pop	{r4, pc}
    9f6e:	bf00      	nop

00009f70 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    9f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f74:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9f76:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    9f78:	4605      	mov	r5, r0
    9f7a:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9f7c:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    9f7e:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9f80:	d024      	beq.n	9fcc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    9f82:	682b      	ldr	r3, [r5, #0]
    9f84:	4631      	mov	r1, r6
    9f86:	4628      	mov	r0, r5
    9f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    9f8a:	4798      	blx	r3
    9f8c:	b178      	cbz	r0, 9fae <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    9f8e:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    9f90:	b187      	cbz	r7, 9fb4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    9f92:	2600      	movs	r6, #0
    9f94:	e001      	b.n	9f9a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    9f96:	42b7      	cmp	r7, r6
    9f98:	d00c      	beq.n	9fb4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    9f9a:	682a      	ldr	r2, [r5, #0]
    9f9c:	4621      	mov	r1, r4
    9f9e:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    9fa0:	3601      	adds	r6, #1
    if (!writeData(src)) {
    9fa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    9fa4:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    9fa8:	4790      	blx	r2
    9faa:	2800      	cmp	r0, #0
    9fac:	d1f3      	bne.n	9f96 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    9fae:	2000      	movs	r0, #0
}
    9fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    9fb4:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9fb6:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    9fb8:	443b      	add	r3, r7
    9fba:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    9fbc:	2800      	cmp	r0, #0
    9fbe:	d1f7      	bne.n	9fb0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    9fc0:	682b      	ldr	r3, [r5, #0]
    9fc2:	4628      	mov	r0, r5
    9fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    9fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    9fca:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9fcc:	6983      	ldr	r3, [r0, #24]
    9fce:	428b      	cmp	r3, r1
    9fd0:	d1d7      	bne.n	9f82 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9fd2:	e7dd      	b.n	9f90 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00009fd4 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    9fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fd8:	4e20      	ldr	r6, [pc, #128]	; (a05c <SharedSpiCard::writeStop()+0x88>)
    9fda:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    9fdc:	f100 0804 	add.w	r8, r0, #4
    9fe0:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    9fe2:	f505 7516 	add.w	r5, r5, #600	; 0x258
    9fe6:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    9fe8:	e003      	b.n	9ff2 <SharedSpiCard::writeStop()+0x1e>
    9fea:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9fec:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9fee:	041b      	lsls	r3, r3, #16
    9ff0:	d410      	bmi.n	a014 <SharedSpiCard::writeStop()+0x40>
    9ff2:	4640      	mov	r0, r8
    9ff4:	f001 ffce 	bl	bf94 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    9ff8:	28ff      	cmp	r0, #255	; 0xff
    9ffa:	4604      	mov	r4, r0
    9ffc:	d1f5      	bne.n	9fea <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    9ffe:	21fd      	movs	r1, #253	; 0xfd
    a000:	4640      	mov	r0, r8
    a002:	f001 ffe5 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    a006:	7cbb      	ldrb	r3, [r7, #18]
    a008:	b9cb      	cbnz	r3, a03e <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    a00a:	2300      	movs	r3, #0
    a00c:	2001      	movs	r0, #1
    a00e:	74fb      	strb	r3, [r7, #19]
}
    a010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    a014:	231e      	movs	r3, #30
  if (m_spiActive) {
    a016:	7cb8      	ldrb	r0, [r7, #18]
    a018:	747b      	strb	r3, [r7, #17]
    a01a:	2800      	cmp	r0, #0
    a01c:	d0f8      	beq.n	a010 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    a01e:	7c38      	ldrb	r0, [r7, #16]
    a020:	2101      	movs	r1, #1
    a022:	f001 fef7 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a026:	21ff      	movs	r1, #255	; 0xff
    a028:	4640      	mov	r0, r8
    a02a:	f001 ffd1 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a02e:	4640      	mov	r0, r8
    a030:	f001 ff84 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a034:	2300      	movs	r3, #0
  return false;
    a036:	4618      	mov	r0, r3
    m_spiActive = false;
    a038:	74bb      	strb	r3, [r7, #18]
}
    a03a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    a03e:	2101      	movs	r1, #1
    a040:	7c38      	ldrb	r0, [r7, #16]
    a042:	f001 fee7 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a046:	4621      	mov	r1, r4
    a048:	4640      	mov	r0, r8
    a04a:	f001 ffc1 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a04e:	4640      	mov	r0, r8
    a050:	f001 ff74 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a054:	2300      	movs	r3, #0
    a056:	74bb      	strb	r3, [r7, #18]
}
    a058:	e7d7      	b.n	a00a <SharedSpiCard::writeStop()+0x36>
    a05a:	bf00      	nop
    a05c:	2002935c 	.word	0x2002935c

0000a060 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    a064:	7cc3      	ldrb	r3, [r0, #19]
    a066:	2b01      	cmp	r3, #1
    a068:	d035      	beq.n	a0d6 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    a06a:	7c86      	ldrb	r6, [r0, #18]
    a06c:	4604      	mov	r4, r0
    a06e:	b14e      	cbz	r6, a084 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    a070:	3004      	adds	r0, #4
    a072:	f001 ff8f 	bl	bf94 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    a076:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a07a:	bf18      	it	ne
    a07c:	2501      	movne	r5, #1
}
    a07e:	4628      	mov	r0, r5
    a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    a084:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    a086:	f04f 0801 	mov.w	r8, #1
    a08a:	4638      	mov	r0, r7
    a08c:	f001 ff4c 	bl	bf28 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a090:	4631      	mov	r1, r6
    a092:	7c20      	ldrb	r0, [r4, #16]
    a094:	f001 febe 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a098:	21ff      	movs	r1, #255	; 0xff
    a09a:	4638      	mov	r0, r7
    a09c:	f001 ff98 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a0a0:	4638      	mov	r0, r7
    a0a2:	f884 8012 	strb.w	r8, [r4, #18]
    a0a6:	f001 ff75 	bl	bf94 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    a0aa:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    a0ac:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    a0b0:	bf18      	it	ne
    a0b2:	2501      	movne	r5, #1
  if (m_spiActive) {
    a0b4:	2b00      	cmp	r3, #0
    a0b6:	d0e2      	beq.n	a07e <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    a0b8:	4641      	mov	r1, r8
    a0ba:	7c20      	ldrb	r0, [r4, #16]
    a0bc:	f001 feaa 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a0c0:	21ff      	movs	r1, #255	; 0xff
    a0c2:	4638      	mov	r0, r7
    a0c4:	f001 ff84 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a0c8:	4638      	mov	r0, r7
    a0ca:	f001 ff37 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
}
    a0ce:	4628      	mov	r0, r5
    m_spiActive = false;
    a0d0:	74a6      	strb	r6, [r4, #18]
}
    a0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    a0d6:	2500      	movs	r5, #0
}
    a0d8:	4628      	mov	r0, r5
    a0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0de:	bf00      	nop

0000a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0e4:	4f20      	ldr	r7, [pc, #128]	; (a168 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    a0e6:	4604      	mov	r4, r0
    a0e8:	4688      	mov	r8, r1
    a0ea:	4691      	mov	r9, r2
    a0ec:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    a0ee:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    a0f0:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    a0f4:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    a0f6:	e003      	b.n	a100 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    a0f8:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a0fa:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    a0fc:	041b      	lsls	r3, r3, #16
    a0fe:	d40d      	bmi.n	a11c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    a100:	4630      	mov	r0, r6
    a102:	f001 ff47 	bl	bf94 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    a106:	28ff      	cmp	r0, #255	; 0xff
    a108:	7520      	strb	r0, [r4, #20]
    a10a:	d0f5      	beq.n	a0f8 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    a10c:	28fe      	cmp	r0, #254	; 0xfe
    a10e:	d01a      	beq.n	a146 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    a110:	2318      	movs	r3, #24
  if (m_spiActive) {
    a112:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    a114:	7463      	strb	r3, [r4, #17]
    a116:	b930      	cbnz	r0, a126 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    a118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a11c:	231d      	movs	r3, #29
  if (m_spiActive) {
    a11e:	7ca0      	ldrb	r0, [r4, #18]
    a120:	7463      	strb	r3, [r4, #17]
    a122:	2800      	cmp	r0, #0
    a124:	d0f8      	beq.n	a118 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    a126:	7c20      	ldrb	r0, [r4, #16]
    a128:	2101      	movs	r1, #1
    a12a:	f001 fe73 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a12e:	21ff      	movs	r1, #255	; 0xff
    a130:	4630      	mov	r0, r6
    a132:	f001 ff4d 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a136:	4630      	mov	r0, r6
    a138:	f001 ff00 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a13c:	2300      	movs	r3, #0
  return false;
    a13e:	4618      	mov	r0, r3
    m_spiActive = false;
    a140:	74a3      	strb	r3, [r4, #18]
}
    a142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    a146:	464a      	mov	r2, r9
    a148:	4641      	mov	r1, r8
    a14a:	4630      	mov	r0, r6
    a14c:	f001 ff2e 	bl	bfac <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    a150:	7520      	strb	r0, [r4, #20]
    a152:	b938      	cbnz	r0, a164 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    a154:	4630      	mov	r0, r6
    a156:	f001 ff1d 	bl	bf94 <SdSpiArduinoDriver::receive()>
    a15a:	4630      	mov	r0, r6
    a15c:	f001 ff1a 	bl	bf94 <SdSpiArduinoDriver::receive()>
  return true;
    a160:	2001      	movs	r0, #1
    a162:	e7d9      	b.n	a118 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    a164:	2325      	movs	r3, #37	; 0x25
    a166:	e7d4      	b.n	a112 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    a168:	2002935c 	.word	0x2002935c

0000a16c <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    a16e:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    a170:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    a172:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    a174:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    a176:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    a178:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    a17a:	f000 f85b 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a17e:	b9b0      	cbnz	r0, a1ae <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    a180:	7ca6      	ldrb	r6, [r4, #18]
    a182:	b91e      	cbnz	r6, a18c <SharedSpiCard::readStop()+0x20>
  return true;
    a184:	2601      	movs	r6, #1
}
    a186:	4630      	mov	r0, r6
    a188:	b003      	add	sp, #12
    a18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    a18c:	4605      	mov	r5, r0
    a18e:	2101      	movs	r1, #1
    a190:	7c20      	ldrb	r0, [r4, #16]
    a192:	f001 fe3f 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a196:	1d20      	adds	r0, r4, #4
    a198:	21ff      	movs	r1, #255	; 0xff
    a19a:	9001      	str	r0, [sp, #4]
    a19c:	f001 ff18 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a1a0:	9801      	ldr	r0, [sp, #4]
    a1a2:	f001 fecb 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    a1a6:	4630      	mov	r0, r6
    m_spiActive = false;
    a1a8:	74a5      	strb	r5, [r4, #18]
}
    a1aa:	b003      	add	sp, #12
    a1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    a1ae:	2309      	movs	r3, #9
  if (m_spiActive) {
    a1b0:	7ca6      	ldrb	r6, [r4, #18]
    a1b2:	7463      	strb	r3, [r4, #17]
    a1b4:	2e00      	cmp	r6, #0
    a1b6:	d0e6      	beq.n	a186 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    a1b8:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a1ba:	7c20      	ldrb	r0, [r4, #16]
    a1bc:	2101      	movs	r1, #1
}
    a1be:	463e      	mov	r6, r7
    a1c0:	f001 fe28 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a1c4:	21ff      	movs	r1, #255	; 0xff
    a1c6:	4628      	mov	r0, r5
    a1c8:	f001 ff02 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a1cc:	4628      	mov	r0, r5
    a1ce:	f001 feb5 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
}
    a1d2:	4630      	mov	r0, r6
    m_spiActive = false;
    a1d4:	74a7      	strb	r7, [r4, #18]
}
    a1d6:	b003      	add	sp, #12
    a1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1da:	bf00      	nop

0000a1dc <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    a1dc:	7cc2      	ldrb	r2, [r0, #19]
    a1de:	2a02      	cmp	r2, #2
    a1e0:	d003      	beq.n	a1ea <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    a1e2:	2a01      	cmp	r2, #1
    a1e4:	d004      	beq.n	a1f0 <SharedSpiCard::syncDevice()+0x14>
}
    a1e6:	2001      	movs	r0, #1
    a1e8:	4770      	bx	lr
    return writeStop();
    a1ea:	6803      	ldr	r3, [r0, #0]
    a1ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a1ee:	4718      	bx	r3
    return readStop();
    a1f0:	f7ff bfbc 	b.w	a16c <SharedSpiCard::readStop()>

0000a1f4 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    a1f4:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    a1f6:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    a1f8:	460d      	mov	r5, r1
    a1fa:	490d      	ldr	r1, [pc, #52]	; (a230 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    a1fc:	4604      	mov	r4, r0
  if (!syncDevice()) {
    a1fe:	6a1a      	ldr	r2, [r3, #32]
    a200:	428a      	cmp	r2, r1
    a202:	d10c      	bne.n	a21e <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    a204:	7cc2      	ldrb	r2, [r0, #19]
    a206:	2a02      	cmp	r2, #2
    a208:	d004      	beq.n	a214 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    a20a:	2a01      	cmp	r2, #1
    a20c:	d00b      	beq.n	a226 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    a20e:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    a210:	7725      	strb	r5, [r4, #28]
}
    a212:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    a214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a216:	4798      	blx	r3
  if (!syncDevice()) {
    a218:	2800      	cmp	r0, #0
    a21a:	d1f8      	bne.n	a20e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    a21c:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    a21e:	4790      	blx	r2
    a220:	2800      	cmp	r0, #0
    a222:	d0fb      	beq.n	a21c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    a224:	e7f3      	b.n	a20e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    a226:	f7ff ffa1 	bl	a16c <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    a22a:	2800      	cmp	r0, #0
    a22c:	d0f6      	beq.n	a21c <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    a22e:	e7ee      	b.n	a20e <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    a230:	0000a1dd 	.word	0x0000a1dd

0000a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    a238:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    a23a:	b082      	sub	sp, #8
    a23c:	460f      	mov	r7, r1
    a23e:	4935      	ldr	r1, [pc, #212]	; (a314 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    a240:	9201      	str	r2, [sp, #4]
    a242:	4606      	mov	r6, r0
  if (!syncDevice()) {
    a244:	6a1a      	ldr	r2, [r3, #32]
    a246:	428a      	cmp	r2, r1
    a248:	d15e      	bne.n	a308 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    a24a:	7cc2      	ldrb	r2, [r0, #19]
    a24c:	2a02      	cmp	r2, #2
    a24e:	d041      	beq.n	a2d4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    a250:	2a01      	cmp	r2, #1
    a252:	d05b      	beq.n	a30c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    a254:	7cb4      	ldrb	r4, [r6, #18]
    a256:	2c00      	cmp	r4, #0
    a258:	d047      	beq.n	a2ea <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    a25a:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    a25c:	2f0c      	cmp	r7, #12
    a25e:	d011      	beq.n	a284 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    a260:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a318 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    a264:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    a268:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    a26c:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    a26e:	e004      	b.n	a27a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    a270:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    a274:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a276:	041a      	lsls	r2, r3, #16
    a278:	d434      	bmi.n	a2e4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    a27a:	4628      	mov	r0, r5
    a27c:	f001 fe8a 	bl	bf94 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a280:	28ff      	cmp	r0, #255	; 0xff
    a282:	d1f5      	bne.n	a270 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    a284:	f10d 0804 	add.w	r8, sp, #4
    a288:	ac02      	add	r4, sp, #8
    a28a:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    a28e:	4628      	mov	r0, r5
    a290:	f001 fe9e 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    a294:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    a298:	4628      	mov	r0, r5
    a29a:	f001 fe99 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    a29e:	45a0      	cmp	r8, r4
    a2a0:	d1f8      	bne.n	a294 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    a2a2:	2f00      	cmp	r7, #0
    a2a4:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    a2a6:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    a2aa:	bf0c      	ite	eq
    a2ac:	2195      	moveq	r1, #149	; 0x95
    a2ae:	2187      	movne	r1, #135	; 0x87
    a2b0:	f001 fe8e 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a2b4:	4628      	mov	r0, r5
    a2b6:	f001 fe6d 	bl	bf94 <SdSpiArduinoDriver::receive()>
    a2ba:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    a2bc:	3c01      	subs	r4, #1
    a2be:	f001 fe69 	bl	bf94 <SdSpiArduinoDriver::receive()>
    a2c2:	0603      	lsls	r3, r0, #24
    a2c4:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    a2c6:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    a2c8:	d501      	bpl.n	a2ce <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    a2ca:	2c00      	cmp	r4, #0
    a2cc:	d1f5      	bne.n	a2ba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    a2ce:	b002      	add	sp, #8
    a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    a2d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    a2d6:	4798      	blx	r3
  if (!syncDevice()) {
    a2d8:	2800      	cmp	r0, #0
    a2da:	d1bb      	bne.n	a254 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    a2dc:	20ff      	movs	r0, #255	; 0xff
}
    a2de:	b002      	add	sp, #8
    a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    a2e4:	2f00      	cmp	r7, #0
    a2e6:	d0cd      	beq.n	a284 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    a2e8:	e7f8      	b.n	a2dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    a2ea:	1d35      	adds	r5, r6, #4
    a2ec:	4628      	mov	r0, r5
    a2ee:	f001 fe1b 	bl	bf28 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    a2f2:	4621      	mov	r1, r4
    a2f4:	7c30      	ldrb	r0, [r6, #16]
    a2f6:	f001 fd8d 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a2fa:	21ff      	movs	r1, #255	; 0xff
    a2fc:	4628      	mov	r0, r5
    a2fe:	f001 fe67 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    a302:	2301      	movs	r3, #1
    a304:	74b3      	strb	r3, [r6, #18]
}
    a306:	e7a9      	b.n	a25c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    a308:	4790      	blx	r2
    a30a:	e7e5      	b.n	a2d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    a30c:	f7ff ff2e 	bl	a16c <SharedSpiCard::readStop()>
    a310:	e7e2      	b.n	a2d8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    a312:	bf00      	nop
    a314:	0000a1dd 	.word	0x0000a1dd
    a318:	2002935c 	.word	0x2002935c

0000a31c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    a31e:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a320:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    a322:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    a324:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    a326:	f7ff ff85 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a32a:	b9e0      	cbnz	r0, a366 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    a32c:	1d37      	adds	r7, r6, #4
    a32e:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    a330:	4638      	mov	r0, r7
    a332:	f001 fe2f 	bl	bf94 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    a336:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    a33a:	42a5      	cmp	r5, r4
    a33c:	d1f8      	bne.n	a330 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    a33e:	7cb4      	ldrb	r4, [r6, #18]
    a340:	b914      	cbnz	r4, a348 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    a342:	2401      	movs	r4, #1
}
    a344:	4620      	mov	r0, r4
    a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    a348:	7c30      	ldrb	r0, [r6, #16]
    a34a:	2101      	movs	r1, #1
    a34c:	f001 fd62 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a350:	21ff      	movs	r1, #255	; 0xff
    a352:	4638      	mov	r0, r7
    a354:	f001 fe3c 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a358:	4638      	mov	r0, r7
    a35a:	f001 fdef 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a35e:	2300      	movs	r3, #0
}
    a360:	4620      	mov	r0, r4
    m_spiActive = false;
    a362:	74b3      	strb	r3, [r6, #18]
}
    a364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    a366:	2312      	movs	r3, #18
  if (m_spiActive) {
    a368:	7cb4      	ldrb	r4, [r6, #18]
    a36a:	7473      	strb	r3, [r6, #17]
    a36c:	2c00      	cmp	r4, #0
    a36e:	d0e9      	beq.n	a344 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    a370:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    a372:	7c30      	ldrb	r0, [r6, #16]
    a374:	2101      	movs	r1, #1
    a376:	f001 fd4d 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a37a:	21ff      	movs	r1, #255	; 0xff
    a37c:	4620      	mov	r0, r4
    a37e:	f001 fe27 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a382:	4620      	mov	r0, r4
    a384:	f001 fdda 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a388:	2300      	movs	r3, #0
  return false;
    a38a:	461c      	mov	r4, r3
    m_spiActive = false;
    a38c:	74b3      	strb	r3, [r6, #18]
}
    a38e:	4620      	mov	r0, r4
    a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a392:	bf00      	nop

0000a394 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a394:	b570      	push	{r4, r5, r6, lr}
    a396:	4616      	mov	r6, r2
    a398:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    a39a:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    a39c:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    a39e:	f7ff ff49 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a3a2:	b1b0      	cbz	r0, a3d2 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    a3a4:	231b      	movs	r3, #27
    a3a6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a3a8:	7ca0      	ldrb	r0, [r4, #18]
    a3aa:	b908      	cbnz	r0, a3b0 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    a3ac:	b002      	add	sp, #8
    a3ae:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a3b0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a3b2:	7c20      	ldrb	r0, [r4, #16]
    a3b4:	2101      	movs	r1, #1
    a3b6:	f001 fd2d 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a3ba:	21ff      	movs	r1, #255	; 0xff
    a3bc:	4628      	mov	r0, r5
    a3be:	f001 fe07 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a3c2:	4628      	mov	r0, r5
    a3c4:	f001 fdba 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a3c8:	2300      	movs	r3, #0
  return false;
    a3ca:	4618      	mov	r0, r3
    m_spiActive = false;
    a3cc:	74a3      	strb	r3, [r4, #18]
}
    a3ce:	b002      	add	sp, #8
    a3d0:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a3d2:	4605      	mov	r5, r0
    a3d4:	2210      	movs	r2, #16
    a3d6:	4631      	mov	r1, r6
    a3d8:	4620      	mov	r0, r4
    a3da:	f7ff fe81 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a3de:	2800      	cmp	r0, #0
    a3e0:	d0e2      	beq.n	a3a8 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    a3e2:	7ca6      	ldrb	r6, [r4, #18]
    a3e4:	2e00      	cmp	r6, #0
    a3e6:	d0e1      	beq.n	a3ac <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    a3e8:	7c20      	ldrb	r0, [r4, #16]
    a3ea:	2101      	movs	r1, #1
    a3ec:	f001 fd12 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a3f0:	1d20      	adds	r0, r4, #4
    a3f2:	21ff      	movs	r1, #255	; 0xff
    a3f4:	9001      	str	r0, [sp, #4]
    a3f6:	f001 fdeb 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a3fa:	9801      	ldr	r0, [sp, #4]
    a3fc:	f001 fd9e 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
}
    a400:	4630      	mov	r0, r6
    m_spiActive = false;
    a402:	74a5      	strb	r5, [r4, #18]
}
    a404:	b002      	add	sp, #8
    a406:	bd70      	pop	{r4, r5, r6, pc}

0000a408 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a408:	6803      	ldr	r3, [r0, #0]
    a40a:	4a25      	ldr	r2, [pc, #148]	; (a4a0 <SharedSpiCard::sectorCount()+0x98>)
    a40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    a40e:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    a410:	b500      	push	{lr}
    a412:	b085      	sub	sp, #20
    a414:	d10f      	bne.n	a436 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    a416:	466a      	mov	r2, sp
    a418:	2109      	movs	r1, #9
    a41a:	f7ff ffbb 	bl	a394 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a41e:	b138      	cbz	r0, a430 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    a420:	f89d 3000 	ldrb.w	r3, [sp]
    a424:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a428:	d008      	beq.n	a43c <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    a42a:	2b40      	cmp	r3, #64	; 0x40
    a42c:	d027      	beq.n	a47e <SharedSpiCard::sectorCount()+0x76>
    a42e:	2000      	movs	r0, #0
}
    a430:	b005      	add	sp, #20
    a432:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    a436:	4669      	mov	r1, sp
    a438:	4798      	blx	r3
    a43a:	e7f0      	b.n	a41e <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a43c:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    a440:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    a444:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a448:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a44c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    a450:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    a452:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a456:	0080      	lsls	r0, r0, #2
    a458:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a45c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    a460:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a464:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a468:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    a46c:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    a470:	4413      	add	r3, r2
    a472:	3001      	adds	r0, #1
    a474:	3b07      	subs	r3, #7
    a476:	4098      	lsls	r0, r3
}
    a478:	b005      	add	sp, #20
    a47a:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a47e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a482:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a486:	3001      	adds	r0, #1
    a488:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    a48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    a490:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    a494:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    a498:	0280      	lsls	r0, r0, #10
    a49a:	b005      	add	sp, #20
    a49c:	f85d fb04 	ldr.w	pc, [sp], #4
    a4a0:	0000a7c5 	.word	0x0000a7c5

0000a4a4 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a4a4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    a4a6:	460a      	mov	r2, r1
    a4a8:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    a4ac:	b083      	sub	sp, #12
    a4ae:	4d16      	ldr	r5, [pc, #88]	; (a508 <SharedSpiCard::readStart(unsigned long)+0x64>)
    a4b0:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a4b2:	42ab      	cmp	r3, r5
    a4b4:	d124      	bne.n	a500 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    a4b6:	7d40      	ldrb	r0, [r0, #21]
    a4b8:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    a4ba:	f04f 0112 	mov.w	r1, #18
    a4be:	4620      	mov	r0, r4
    sector <<= 9;
    a4c0:	bf18      	it	ne
    a4c2:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    a4c4:	f7ff feb6 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a4c8:	b920      	cbnz	r0, a4d4 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    a4ca:	2301      	movs	r3, #1
  return true;
    a4cc:	4618      	mov	r0, r3
  m_state = READ_STATE;
    a4ce:	74e3      	strb	r3, [r4, #19]
}
    a4d0:	b003      	add	sp, #12
    a4d2:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a4d4:	230c      	movs	r3, #12
  if (m_spiActive) {
    a4d6:	7ca0      	ldrb	r0, [r4, #18]
    a4d8:	7463      	strb	r3, [r4, #17]
    a4da:	2800      	cmp	r0, #0
    a4dc:	d0f8      	beq.n	a4d0 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a4de:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a4e0:	7c20      	ldrb	r0, [r4, #16]
    a4e2:	2101      	movs	r1, #1
    a4e4:	f001 fc96 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a4e8:	21ff      	movs	r1, #255	; 0xff
    a4ea:	4628      	mov	r0, r5
    a4ec:	f001 fd70 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a4f0:	4628      	mov	r0, r5
    a4f2:	f001 fd23 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a4f6:	2300      	movs	r3, #0
}
    a4f8:	4618      	mov	r0, r3
    m_spiActive = false;
    a4fa:	74a3      	strb	r3, [r4, #18]
}
    a4fc:	b003      	add	sp, #12
    a4fe:	bd30      	pop	{r4, r5, pc}
    a500:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a502:	4798      	blx	r3
    a504:	9a01      	ldr	r2, [sp, #4]
    a506:	e7d7      	b.n	a4b8 <SharedSpiCard::readStart(unsigned long)+0x14>
    a508:	00009ed9 	.word	0x00009ed9

0000a50c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    a50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a50e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    a510:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    a512:	4606      	mov	r6, r0
    a514:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a516:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    a518:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a51a:	d102      	bne.n	a522 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    a51c:	6983      	ldr	r3, [r0, #24]
    a51e:	428b      	cmp	r3, r1
    a520:	d005      	beq.n	a52e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    a522:	4629      	mov	r1, r5
    a524:	4630      	mov	r0, r6
    a526:	f7ff ffbd 	bl	a4a4 <SharedSpiCard::readStart(unsigned long)>
    a52a:	b180      	cbz	r0, a54e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    a52c:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a52e:	b187      	cbz	r7, a552 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    a530:	2500      	movs	r5, #0
    a532:	e001      	b.n	a538 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a534:	42af      	cmp	r7, r5
    a536:	d00c      	beq.n	a552 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    a538:	4621      	mov	r1, r4
    a53a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a53e:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    a540:	3501      	adds	r5, #1
    a542:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    a546:	f7ff fdcb 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a54a:	2800      	cmp	r0, #0
    a54c:	d1f2      	bne.n	a534 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    a54e:	2000      	movs	r0, #0
}
    a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    a552:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a554:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a556:	443b      	add	r3, r7
    a558:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a55a:	2800      	cmp	r0, #0
    a55c:	d1f8      	bne.n	a550 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    a55e:	4630      	mov	r0, r6
}
    a560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    a564:	f7ff be02 	b.w	a16c <SharedSpiCard::readStop()>

0000a568 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a56c:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    a56e:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a570:	4606      	mov	r6, r0
    a572:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    a574:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    a576:	4615      	mov	r5, r2
    a578:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    a57c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    a580:	d102      	bne.n	a588 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    a582:	6983      	ldr	r3, [r0, #24]
    a584:	428b      	cmp	r3, r1
    a586:	d005      	beq.n	a594 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    a588:	4621      	mov	r1, r4
    a58a:	4630      	mov	r0, r6
    a58c:	f7ff ff8a 	bl	a4a4 <SharedSpiCard::readStart(unsigned long)>
    a590:	b1b0      	cbz	r0, a5c0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    a592:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    a594:	f1bb 0f00 	cmp.w	fp, #0
    a598:	d015      	beq.n	a5c6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    a59a:	eb04 0a0b 	add.w	sl, r4, fp
    a59e:	e002      	b.n	a5a6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    a5a0:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    a5a2:	45a2      	cmp	sl, r4
    a5a4:	d00f      	beq.n	a5c6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    a5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    a5aa:	4629      	mov	r1, r5
    a5ac:	4630      	mov	r0, r6
    a5ae:	f7ff fd97 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a5b2:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    a5b4:	4642      	mov	r2, r8
    a5b6:	4620      	mov	r0, r4
    a5b8:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    a5ba:	3401      	adds	r4, #1
    if (readData(dst)) {
    a5bc:	2f00      	cmp	r7, #0
    a5be:	d1ef      	bne.n	a5a0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    a5c0:	2000      	movs	r0, #0
}
    a5c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    a5c6:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a5c8:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    a5ca:	445b      	add	r3, fp
    a5cc:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    a5ce:	2800      	cmp	r0, #0
    a5d0:	d1f7      	bne.n	a5c2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    a5d2:	4630      	mov	r0, r6
}
    a5d4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    a5d8:	f7ff bdc8 	b.w	a16c <SharedSpiCard::readStop()>

0000a5dc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    a5dc:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a5e2:	695f      	ldr	r7, [r3, #20]
    a5e4:	4b16      	ldr	r3, [pc, #88]	; (a640 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    a5e6:	429f      	cmp	r7, r3
    a5e8:	d11f      	bne.n	a62a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    a5ea:	7cc3      	ldrb	r3, [r0, #19]
    a5ec:	4604      	mov	r4, r0
    a5ee:	460d      	mov	r5, r1
    a5f0:	4616      	mov	r6, r2
    a5f2:	2b01      	cmp	r3, #1
    a5f4:	d102      	bne.n	a5fc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    a5f6:	6983      	ldr	r3, [r0, #24]
    a5f8:	4299      	cmp	r1, r3
    a5fa:	d005      	beq.n	a608 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    a5fc:	4629      	mov	r1, r5
    a5fe:	4620      	mov	r0, r4
    a600:	f7ff ff50 	bl	a4a4 <SharedSpiCard::readStart(unsigned long)>
    a604:	b170      	cbz	r0, a624 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    a606:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    a608:	f44f 7200 	mov.w	r2, #512	; 0x200
    a60c:	4631      	mov	r1, r6
    a60e:	4620      	mov	r0, r4
    a610:	f7ff fd66 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    a614:	b130      	cbz	r0, a624 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    a616:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a618:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    a61a:	3301      	adds	r3, #1
    a61c:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    a61e:	b148      	cbz	r0, a634 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    a624:	2000      	movs	r0, #0
}
    a626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    a62a:	46bc      	mov	ip, r7
    a62c:	2301      	movs	r3, #1
}
    a62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    a632:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    a634:	4620      	mov	r0, r4
}
    a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    a63a:	f7ff bd97 	b.w	a16c <SharedSpiCard::readStop()>
    a63e:	bf00      	nop
    a640:	0000a50d 	.word	0x0000a50d

0000a644 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a644:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    a646:	460a      	mov	r2, r1
    a648:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    a64c:	b083      	sub	sp, #12
    a64e:	4d16      	ldr	r5, [pc, #88]	; (a6a8 <SharedSpiCard::writeStart(unsigned long)+0x64>)
    a650:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    a652:	42ab      	cmp	r3, r5
    a654:	d124      	bne.n	a6a0 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    a656:	7d40      	ldrb	r0, [r0, #21]
    a658:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    a65a:	f04f 0119 	mov.w	r1, #25
    a65e:	4620      	mov	r0, r4
    sector <<= 9;
    a660:	bf18      	it	ne
    a662:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    a664:	f7ff fde6 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a668:	b920      	cbnz	r0, a674 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    a66a:	2302      	movs	r3, #2
  return true;
    a66c:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    a66e:	74e3      	strb	r3, [r4, #19]
}
    a670:	b003      	add	sp, #12
    a672:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    a674:	230e      	movs	r3, #14
  if (m_spiActive) {
    a676:	7ca0      	ldrb	r0, [r4, #18]
    a678:	7463      	strb	r3, [r4, #17]
    a67a:	2800      	cmp	r0, #0
    a67c:	d0f8      	beq.n	a670 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    a67e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a680:	7c20      	ldrb	r0, [r4, #16]
    a682:	2101      	movs	r1, #1
    a684:	f001 fbc6 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a688:	21ff      	movs	r1, #255	; 0xff
    a68a:	4628      	mov	r0, r5
    a68c:	f001 fca0 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a690:	4628      	mov	r0, r5
    a692:	f001 fc53 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a696:	2300      	movs	r3, #0
}
    a698:	4618      	mov	r0, r3
    m_spiActive = false;
    a69a:	74a3      	strb	r3, [r4, #18]
}
    a69c:	b003      	add	sp, #12
    a69e:	bd30      	pop	{r4, r5, pc}
    a6a0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    a6a2:	4798      	blx	r3
    a6a4:	9a01      	ldr	r2, [sp, #4]
    a6a6:	e7d7      	b.n	a658 <SharedSpiCard::writeStart(unsigned long)+0x14>
    a6a8:	00009ed9 	.word	0x00009ed9

0000a6ac <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    a6ac:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a6ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    a6b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    a6b4:	4617      	mov	r7, r2
    a6b6:	4a41      	ldr	r2, [pc, #260]	; (a7bc <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    a6b8:	b085      	sub	sp, #20
    a6ba:	4604      	mov	r4, r0
    a6bc:	460e      	mov	r6, r1
    a6be:	4293      	cmp	r3, r2
    a6c0:	d145      	bne.n	a74e <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    a6c2:	466a      	mov	r2, sp
    a6c4:	2109      	movs	r1, #9
    a6c6:	f7ff fe65 	bl	a394 <SharedSpiCard::readRegister(unsigned char, void*)>
    a6ca:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    a6cc:	b1b5      	cbz	r5, a6fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    a6ce:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a6d2:	065a      	lsls	r2, r3, #25
    a6d4:	d518      	bpl.n	a708 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    a6d6:	7d63      	ldrb	r3, [r4, #21]
    a6d8:	2b03      	cmp	r3, #3
    a6da:	d001      	beq.n	a6e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    a6dc:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    a6de:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    a6e0:	4632      	mov	r2, r6
    a6e2:	2120      	movs	r1, #32
    a6e4:	4620      	mov	r0, r4
    a6e6:	f7ff fda5 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    a6ea:	b928      	cbnz	r0, a6f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    a6ec:	463a      	mov	r2, r7
    a6ee:	2121      	movs	r1, #33	; 0x21
    a6f0:	4620      	mov	r0, r4
    a6f2:	f7ff fd9f 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a6f6:	b370      	cbz	r0, a756 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    a6f8:	2326      	movs	r3, #38	; 0x26
    a6fa:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a6fc:	7ca5      	ldrb	r5, [r4, #18]
    a6fe:	b99d      	cbnz	r5, a728 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    a700:	4628      	mov	r0, r5
    a702:	b005      	add	sp, #20
    a704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    a708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    a70c:	f89d 200b 	ldrb.w	r2, [sp, #11]
    a710:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    a712:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    a716:	1c7a      	adds	r2, r7, #1
    a718:	4332      	orrs	r2, r6
    a71a:	4213      	tst	r3, r2
    a71c:	d0db      	beq.n	a6d6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    a71e:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    a720:	7ca5      	ldrb	r5, [r4, #18]
    a722:	7463      	strb	r3, [r4, #17]
    a724:	2d00      	cmp	r5, #0
    a726:	d0eb      	beq.n	a700 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    a728:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a72a:	7c20      	ldrb	r0, [r4, #16]
    a72c:	2101      	movs	r1, #1
    a72e:	f001 fb71 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a732:	21ff      	movs	r1, #255	; 0xff
    a734:	4628      	mov	r0, r5
    a736:	f001 fc4b 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a73a:	4628      	mov	r0, r5
    a73c:	f001 fbfe 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a740:	2300      	movs	r3, #0
  return false;
    a742:	461d      	mov	r5, r3
    m_spiActive = false;
    a744:	74a3      	strb	r3, [r4, #18]
}
    a746:	4628      	mov	r0, r5
    a748:	b005      	add	sp, #20
    a74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    a74e:	4669      	mov	r1, sp
    a750:	4798      	blx	r3
    a752:	4605      	mov	r5, r0
    a754:	e7ba      	b.n	a6cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    a756:	4602      	mov	r2, r0
    a758:	2126      	movs	r1, #38	; 0x26
    a75a:	4620      	mov	r0, r4
    a75c:	f7ff fd6a 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a760:	2800      	cmp	r0, #0
    a762:	d1c9      	bne.n	a6f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    a764:	f8df 8058 	ldr.w	r8, [pc, #88]	; a7c0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    a768:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    a76c:	f104 0904 	add.w	r9, r4, #4
    a770:	f8d8 3000 	ldr.w	r3, [r8]
    a774:	441f      	add	r7, r3
    a776:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    a778:	e004      	b.n	a784 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    a77a:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    a77e:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    a780:	041b      	lsls	r3, r3, #16
    a782:	d417      	bmi.n	a7b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    a784:	4648      	mov	r0, r9
    a786:	f001 fc05 	bl	bf94 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a78a:	28ff      	cmp	r0, #255	; 0xff
    a78c:	4606      	mov	r6, r0
    a78e:	d1f4      	bne.n	a77a <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    a790:	7ca3      	ldrb	r3, [r4, #18]
    a792:	2b00      	cmp	r3, #0
    a794:	d0b4      	beq.n	a700 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    a796:	2101      	movs	r1, #1
    a798:	7c20      	ldrb	r0, [r4, #16]
  return true;
    a79a:	461d      	mov	r5, r3
    a79c:	f001 fb3a 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a7a0:	4631      	mov	r1, r6
    a7a2:	4648      	mov	r0, r9
    a7a4:	f001 fc14 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a7a8:	4648      	mov	r0, r9
    a7aa:	f001 fbc7 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a7ae:	2300      	movs	r3, #0
    a7b0:	74a3      	strb	r3, [r4, #18]
}
    a7b2:	e7a5      	b.n	a700 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    a7b4:	2328      	movs	r3, #40	; 0x28
    a7b6:	7463      	strb	r3, [r4, #17]
    goto fail;
    a7b8:	e7a0      	b.n	a6fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    a7ba:	bf00      	nop
    a7bc:	0000a7c5 	.word	0x0000a7c5
    a7c0:	2002935c 	.word	0x2002935c

0000a7c4 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    a7c4:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a7c6:	2200      	movs	r2, #0
    a7c8:	b082      	sub	sp, #8
    a7ca:	460e      	mov	r6, r1
    a7cc:	2109      	movs	r1, #9
    a7ce:	4604      	mov	r4, r0
    a7d0:	f7ff fd30 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a7d4:	b1b0      	cbz	r0, a804 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    a7d6:	231b      	movs	r3, #27
    a7d8:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a7da:	7ca0      	ldrb	r0, [r4, #18]
    a7dc:	b908      	cbnz	r0, a7e2 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    a7de:	b002      	add	sp, #8
    a7e0:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a7e2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a7e4:	7c20      	ldrb	r0, [r4, #16]
    a7e6:	2101      	movs	r1, #1
    a7e8:	f001 fb14 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a7ec:	21ff      	movs	r1, #255	; 0xff
    a7ee:	4628      	mov	r0, r5
    a7f0:	f001 fbee 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a7f4:	4628      	mov	r0, r5
    a7f6:	f001 fba1 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a7fa:	2300      	movs	r3, #0
  return false;
    a7fc:	4618      	mov	r0, r3
    m_spiActive = false;
    a7fe:	74a3      	strb	r3, [r4, #18]
  }
    a800:	b002      	add	sp, #8
    a802:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a804:	4605      	mov	r5, r0
    a806:	2210      	movs	r2, #16
    a808:	4631      	mov	r1, r6
    a80a:	4620      	mov	r0, r4
    a80c:	f7ff fc68 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a810:	2800      	cmp	r0, #0
    a812:	d0e2      	beq.n	a7da <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    a814:	7ca6      	ldrb	r6, [r4, #18]
    a816:	2e00      	cmp	r6, #0
    a818:	d0e1      	beq.n	a7de <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    a81a:	7c20      	ldrb	r0, [r4, #16]
    a81c:	2101      	movs	r1, #1
    a81e:	f001 faf9 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a822:	1d20      	adds	r0, r4, #4
    a824:	21ff      	movs	r1, #255	; 0xff
    a826:	9001      	str	r0, [sp, #4]
    a828:	f001 fbd2 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a82c:	9801      	ldr	r0, [sp, #4]
    a82e:	f001 fb85 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
}
    a832:	4630      	mov	r0, r6
    m_spiActive = false;
    a834:	74a5      	strb	r5, [r4, #18]
  }
    a836:	b002      	add	sp, #8
    a838:	bd70      	pop	{r4, r5, r6, pc}
    a83a:	bf00      	nop

0000a83c <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    a83c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    a83e:	2200      	movs	r2, #0
    a840:	b082      	sub	sp, #8
    a842:	460e      	mov	r6, r1
    a844:	210a      	movs	r1, #10
    a846:	4604      	mov	r4, r0
    a848:	f7ff fcf4 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a84c:	b1b0      	cbz	r0, a87c <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    a84e:	231b      	movs	r3, #27
    a850:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a852:	7ca0      	ldrb	r0, [r4, #18]
    a854:	b908      	cbnz	r0, a85a <SharedSpiCard::readCID(CID*)+0x1e>
  }
    a856:	b002      	add	sp, #8
    a858:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a85a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a85c:	7c20      	ldrb	r0, [r4, #16]
    a85e:	2101      	movs	r1, #1
    a860:	f001 fad8 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a864:	21ff      	movs	r1, #255	; 0xff
    a866:	4628      	mov	r0, r5
    a868:	f001 fbb2 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a86c:	4628      	mov	r0, r5
    a86e:	f001 fb65 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a872:	2300      	movs	r3, #0
  return false;
    a874:	4618      	mov	r0, r3
    m_spiActive = false;
    a876:	74a3      	strb	r3, [r4, #18]
  }
    a878:	b002      	add	sp, #8
    a87a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    a87c:	4605      	mov	r5, r0
    a87e:	2210      	movs	r2, #16
    a880:	4631      	mov	r1, r6
    a882:	4620      	mov	r0, r4
    a884:	f7ff fc2c 	bl	a0e0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    a888:	2800      	cmp	r0, #0
    a88a:	d0e2      	beq.n	a852 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    a88c:	7ca6      	ldrb	r6, [r4, #18]
    a88e:	2e00      	cmp	r6, #0
    a890:	d0e1      	beq.n	a856 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    a892:	7c20      	ldrb	r0, [r4, #16]
    a894:	2101      	movs	r1, #1
    a896:	f001 fabd 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a89a:	1d20      	adds	r0, r4, #4
    a89c:	21ff      	movs	r1, #255	; 0xff
    a89e:	9001      	str	r0, [sp, #4]
    a8a0:	f001 fb96 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a8a4:	9801      	ldr	r0, [sp, #4]
    a8a6:	f001 fb49 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
}
    a8aa:	4630      	mov	r0, r6
    m_spiActive = false;
    a8ac:	74a5      	strb	r5, [r4, #18]
  }
    a8ae:	b002      	add	sp, #8
    a8b0:	bd70      	pop	{r4, r5, r6, pc}
    a8b2:	bf00      	nop

0000a8b4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    a8b4:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    a8b6:	1d05      	adds	r5, r0, #4
    a8b8:	4616      	mov	r6, r2
    a8ba:	4604      	mov	r4, r0
    a8bc:	4628      	mov	r0, r5
    a8be:	f001 fb87 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    a8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
    a8c6:	4631      	mov	r1, r6
    a8c8:	4628      	mov	r0, r5
    a8ca:	f001 fb8b 	bl	bfe4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    a8ce:	21ff      	movs	r1, #255	; 0xff
    a8d0:	4628      	mov	r0, r5
    a8d2:	f001 fb7d 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    a8d6:	21ff      	movs	r1, #255	; 0xff
    a8d8:	4628      	mov	r0, r5
    a8da:	f001 fb79 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    a8de:	4628      	mov	r0, r5
    a8e0:	f001 fb58 	bl	bf94 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a8e4:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    a8e8:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    a8ea:	2b05      	cmp	r3, #5
    a8ec:	d004      	beq.n	a8f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    a8ee:	2320      	movs	r3, #32
  if (m_spiActive) {
    a8f0:	7ca0      	ldrb	r0, [r4, #18]
    a8f2:	7463      	strb	r3, [r4, #17]
    a8f4:	b910      	cbnz	r0, a8fc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    a8f6:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    a8f8:	2001      	movs	r0, #1
}
    a8fa:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    a8fc:	7c20      	ldrb	r0, [r4, #16]
    a8fe:	2101      	movs	r1, #1
    a900:	f001 fa88 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a904:	21ff      	movs	r1, #255	; 0xff
    a906:	4628      	mov	r0, r5
    a908:	f001 fb62 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a90c:	4628      	mov	r0, r5
    a90e:	f001 fb15 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a912:	2300      	movs	r3, #0
}
    a914:	4618      	mov	r0, r3
    m_spiActive = false;
    a916:	74a3      	strb	r3, [r4, #18]
}
    a918:	bd70      	pop	{r4, r5, r6, pc}
    a91a:	bf00      	nop

0000a91c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    a91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a920:	4d17      	ldr	r5, [pc, #92]	; (a980 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    a922:	4606      	mov	r6, r0
    a924:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    a926:	f100 0804 	add.w	r8, r0, #4
    a92a:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    a92c:	f504 7416 	add.w	r4, r4, #600	; 0x258
    a930:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    a932:	e003      	b.n	a93c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    a934:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    a936:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    a938:	041b      	lsls	r3, r3, #16
    a93a:	d40c      	bmi.n	a956 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    a93c:	4640      	mov	r0, r8
    a93e:	f001 fb29 	bl	bf94 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    a942:	28ff      	cmp	r0, #255	; 0xff
    a944:	d1f6      	bne.n	a934 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    a946:	463a      	mov	r2, r7
    a948:	21fc      	movs	r1, #252	; 0xfc
    a94a:	4630      	mov	r0, r6
    a94c:	f7ff ffb2 	bl	a8b4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a950:	b118      	cbz	r0, a95a <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    a956:	2324      	movs	r3, #36	; 0x24
    a958:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    a95a:	7cb0      	ldrb	r0, [r6, #18]
    a95c:	2800      	cmp	r0, #0
    a95e:	d0f8      	beq.n	a952 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    a960:	7c30      	ldrb	r0, [r6, #16]
    a962:	2101      	movs	r1, #1
    a964:	f001 fa56 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a968:	21ff      	movs	r1, #255	; 0xff
    a96a:	4640      	mov	r0, r8
    a96c:	f001 fb30 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a970:	4640      	mov	r0, r8
    a972:	f001 fae3 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a976:	2300      	movs	r3, #0
}
    a978:	4618      	mov	r0, r3
    m_spiActive = false;
    a97a:	74b3      	strb	r3, [r6, #18]
}
    a97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a980:	2002935c 	.word	0x2002935c

0000a984 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    a984:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a986:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    a988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    a98a:	4616      	mov	r6, r2
    a98c:	4a22      	ldr	r2, [pc, #136]	; (aa18 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    a98e:	b082      	sub	sp, #8
    a990:	4604      	mov	r4, r0
    a992:	460d      	mov	r5, r1
    a994:	4293      	cmp	r3, r2
    a996:	d13c      	bne.n	aa12 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    a998:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    a99a:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    a99c:	f04f 0118 	mov.w	r1, #24
    a9a0:	4620      	mov	r0, r4
    sector <<= 9;
    a9a2:	bf18      	it	ne
    a9a4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    a9a6:	462a      	mov	r2, r5
    a9a8:	f7ff fc44 	bl	a234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    a9ac:	4605      	mov	r5, r0
    a9ae:	b1b0      	cbz	r0, a9de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    a9b0:	230d      	movs	r3, #13
    a9b2:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    a9b4:	7ca0      	ldrb	r0, [r4, #18]
    a9b6:	b908      	cbnz	r0, a9bc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    a9b8:	b002      	add	sp, #8
    a9ba:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    a9bc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    a9be:	7c20      	ldrb	r0, [r4, #16]
    a9c0:	2101      	movs	r1, #1
    a9c2:	f001 fa27 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a9c6:	21ff      	movs	r1, #255	; 0xff
    a9c8:	4628      	mov	r0, r5
    a9ca:	f001 fb01 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    a9ce:	4628      	mov	r0, r5
    a9d0:	f001 fab4 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    a9d4:	2300      	movs	r3, #0
  return false;
    a9d6:	4618      	mov	r0, r3
    m_spiActive = false;
    a9d8:	74a3      	strb	r3, [r4, #18]
}
    a9da:	b002      	add	sp, #8
    a9dc:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    a9de:	4632      	mov	r2, r6
    a9e0:	21fe      	movs	r1, #254	; 0xfe
    a9e2:	4620      	mov	r0, r4
    a9e4:	f7ff ff66 	bl	a8b4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    a9e8:	2800      	cmp	r0, #0
    a9ea:	d0e3      	beq.n	a9b4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    a9ec:	7ca6      	ldrb	r6, [r4, #18]
    a9ee:	2e00      	cmp	r6, #0
    a9f0:	d0e2      	beq.n	a9b8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    a9f2:	7c20      	ldrb	r0, [r4, #16]
    a9f4:	2101      	movs	r1, #1
    a9f6:	f001 fa0d 	bl	be14 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    a9fa:	1d20      	adds	r0, r4, #4
    a9fc:	21ff      	movs	r1, #255	; 0xff
    a9fe:	9001      	str	r0, [sp, #4]
    aa00:	f001 fae6 	bl	bfd0 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    aa04:	9801      	ldr	r0, [sp, #4]
    aa06:	f001 fa99 	bl	bf3c <SdSpiArduinoDriver::deactivate()>
  return true;
    aa0a:	4630      	mov	r0, r6
    m_spiActive = false;
    aa0c:	74a5      	strb	r5, [r4, #18]
}
    aa0e:	b002      	add	sp, #8
    aa10:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    aa12:	4798      	blx	r3
    aa14:	e7c1      	b.n	a99a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    aa16:	bf00      	nop
    aa18:	00009ed9 	.word	0x00009ed9

0000aa1c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    aa1c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    aa1e:	7f04      	ldrb	r4, [r0, #28]
    aa20:	b134      	cbz	r4, aa30 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    aa22:	6804      	ldr	r4, [r0, #0]
    aa24:	2301      	movs	r3, #1
    aa26:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    aa28:	46a4      	mov	ip, r4
}
    aa2a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    aa2e:	4760      	bx	ip
}
    aa30:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    aa34:	f7ff bfa6 	b.w	a984 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000aa38 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    aa38:	2000      	movs	r0, #0
    aa3a:	4770      	bx	lr

0000aa3c <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    aa3c:	2000      	movs	r0, #0
    aa3e:	4770      	bx	lr

0000aa40 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    aa40:	2000      	movs	r0, #0
    aa42:	4770      	bx	lr

0000aa44 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    aa44:	4770      	bx	lr
    aa46:	bf00      	nop

0000aa48 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    aa48:	4b08      	ldr	r3, [pc, #32]	; (aa6c <sdIrs()+0x24>)
    aa4a:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    aa4c:	4a08      	ldr	r2, [pc, #32]	; (aa70 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    aa4e:	4809      	ldr	r0, [pc, #36]	; (aa74 <sdIrs()+0x2c>)
static void sdIrs() {
    aa50:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    aa52:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    aa54:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    aa56:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    aa58:	6812      	ldr	r2, [r2, #0]
}
    aa5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    aa5e:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    aa60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    aa62:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    aa66:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    aa68:	7001      	strb	r1, [r0, #0]
}
    aa6a:	4770      	bx	lr
    aa6c:	402c0000 	.word	0x402c0000
    aa70:	200284d8 	.word	0x200284d8
    aa74:	200293a2 	.word	0x200293a2

0000aa78 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    aa78:	4b03      	ldr	r3, [pc, #12]	; (aa88 <isBusyDat()+0x10>)
    aa7a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    aa7c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    aa80:	f3c0 6000 	ubfx	r0, r0, #24, #1
    aa84:	4770      	bx	lr
    aa86:	bf00      	nop
    aa88:	402c0000 	.word	0x402c0000

0000aa8c <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    aa8c:	4b01      	ldr	r3, [pc, #4]	; (aa94 <isBusyDMA()+0x8>)
    aa8e:	7818      	ldrb	r0, [r3, #0]
}
    aa90:	4770      	bx	lr
    aa92:	bf00      	nop
    aa94:	200293a2 	.word	0x200293a2

0000aa98 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aa98:	4a2b      	ldr	r2, [pc, #172]	; (ab48 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aa9a:	4b2c      	ldr	r3, [pc, #176]	; (ab4c <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aa9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aa9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    aaa2:	492b      	ldr	r1, [pc, #172]	; (ab50 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aaa4:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aaa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    aaac:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    aaae:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aab0:	4c28      	ldr	r4, [pc, #160]	; (ab54 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    aab2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aab6:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    aaba:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    aabe:	089b      	lsrs	r3, r3, #2
    aac0:	fbb1 fef3 	udiv	lr, r1, r3
    aac4:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    aac8:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    aacc:	d235      	bcs.n	ab3a <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    aace:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    aad0:	461e      	mov	r6, r3
    aad2:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    aad4:	011a      	lsls	r2, r3, #4
    aad6:	fbbe f2f2 	udiv	r2, lr, r2
    aada:	4282      	cmp	r2, r0
    aadc:	d901      	bls.n	aae2 <setSdclk(unsigned long)+0x4a>
    aade:	2bff      	cmp	r3, #255	; 0xff
    aae0:	d9f6      	bls.n	aad0 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    aae2:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    aae6:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    aae8:	4290      	cmp	r0, r2
    aaea:	d22a      	bcs.n	ab42 <setSdclk(unsigned long)+0xaa>
    aaec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    aaf0:	2201      	movs	r2, #1
    aaf2:	e000      	b.n	aaf6 <setSdclk(unsigned long)+0x5e>
    aaf4:	46a4      	mov	ip, r4
    dvs++;
    aaf6:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    aaf8:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    aafc:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    aafe:	fbbe f1fc 	udiv	r1, lr, ip
    ab02:	4281      	cmp	r1, r0
    ab04:	d917      	bls.n	ab36 <setSdclk(unsigned long)+0x9e>
    ab06:	2a10      	cmp	r2, #16
    ab08:	d1f4      	bne.n	aaf4 <setSdclk(unsigned long)+0x5c>
    ab0a:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ab0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ab10:	4911      	ldr	r1, [pc, #68]	; (ab58 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ab12:	4a12      	ldr	r2, [pc, #72]	; (ab5c <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    ab14:	fb03 fc0c 	mul.w	ip, r3, ip
    ab18:	fbbe f3fc 	udiv	r3, lr, ip
    ab1c:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    ab1e:	4b10      	ldr	r3, [pc, #64]	; (ab60 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    ab20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    ab22:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab24:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    ab26:	4333      	orrs	r3, r6
    ab28:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab2c:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    ab2e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    ab30:	071b      	lsls	r3, r3, #28
    ab32:	d5fc      	bpl.n	ab2e <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    ab34:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    ab36:	012d      	lsls	r5, r5, #4
    ab38:	e7e8      	b.n	ab0c <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    ab3a:	4672      	mov	r2, lr
    ab3c:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    ab3e:	2301      	movs	r3, #1
    ab40:	e7d2      	b.n	aae8 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    ab42:	469c      	mov	ip, r3
    ab44:	2500      	movs	r5, #0
    ab46:	e7e1      	b.n	ab0c <setSdclk(unsigned long)+0x74>
    ab48:	400fc000 	.word	0x400fc000
    ab4c:	400d8000 	.word	0x400d8000
    ab50:	5e69ec00 	.word	0x5e69ec00
    ab54:	aaaaaaab 	.word	0xaaaaaaab
    ab58:	2000dbd0 	.word	0x2000dbd0
    ab5c:	402c0000 	.word	0x402c0000
    ab60:	fff0000f 	.word	0xfff0000f

0000ab64 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    ab64:	4b01      	ldr	r3, [pc, #4]	; (ab6c <SdioCard::errorCode() const+0x8>)
}
    ab66:	7818      	ldrb	r0, [r3, #0]
    ab68:	4770      	bx	lr
    ab6a:	bf00      	nop
    ab6c:	20009486 	.word	0x20009486

0000ab70 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    ab70:	4b01      	ldr	r3, [pc, #4]	; (ab78 <SdioCard::errorData() const+0x8>)
    ab72:	6818      	ldr	r0, [r3, #0]
}
    ab74:	4770      	bx	lr
    ab76:	bf00      	nop
    ab78:	200284d8 	.word	0x200284d8

0000ab7c <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    ab7c:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    ab7e:	4c07      	ldr	r4, [pc, #28]	; (ab9c <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    ab80:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    ab82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    ab84:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    ab88:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    ab8a:	f8cc 1004 	str.w	r1, [ip, #4]
    ab8e:	f8cc 2008 	str.w	r2, [ip, #8]
    ab92:	f8cc 300c 	str.w	r3, [ip, #12]
}
    ab96:	f85d 4b04 	ldr.w	r4, [sp], #4
    ab9a:	4770      	bx	lr
    ab9c:	20027dec 	.word	0x20027dec

0000aba0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    aba0:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    aba2:	4c07      	ldr	r4, [pc, #28]	; (abc0 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    aba4:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    aba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    aba8:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    abac:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    abae:	f8cc 1004 	str.w	r1, [ip, #4]
    abb2:	f8cc 2008 	str.w	r2, [ip, #8]
    abb6:	f8cc 300c 	str.w	r3, [ip, #12]
}
    abba:	f85d 4b04 	ldr.w	r4, [sp], #4
    abbe:	4770      	bx	lr
    abc0:	20027dfc 	.word	0x20027dfc

0000abc4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    abc4:	4b02      	ldr	r3, [pc, #8]	; (abd0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    abc6:	2001      	movs	r0, #1
  *ocr = m_ocr;
    abc8:	681b      	ldr	r3, [r3, #0]
    abca:	600b      	str	r3, [r1, #0]
}
    abcc:	4770      	bx	lr
    abce:	bf00      	nop
    abd0:	20027e0c 	.word	0x20027e0c

0000abd4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    abd4:	4770      	bx	lr
    abd6:	bf00      	nop

0000abd8 <SdioCard::~SdioCard()>:
    abd8:	b510      	push	{r4, lr}
    abda:	4604      	mov	r4, r0
    abdc:	210c      	movs	r1, #12
    abde:	f002 fe4f 	bl	d880 <operator delete(void*, unsigned int)>
    abe2:	4620      	mov	r0, r4
    abe4:	bd10      	pop	{r4, pc}
    abe6:	bf00      	nop

0000abe8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    abe8:	4b04      	ldr	r3, [pc, #16]	; (abfc <SdioCard::type() const+0x14>)
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	b123      	cbz	r3, abf8 <SdioCard::type() const+0x10>
    abee:	4b04      	ldr	r3, [pc, #16]	; (ac00 <SdioCard::type() const+0x18>)
    abf0:	7818      	ldrb	r0, [r3, #0]
    abf2:	3002      	adds	r0, #2
    abf4:	b2c0      	uxtb	r0, r0
    abf6:	4770      	bx	lr
    abf8:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    abfa:	4770      	bx	lr
    abfc:	2002939f 	.word	0x2002939f
    ac00:	200293a0 	.word	0x200293a0

0000ac04 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    ac04:	4b18      	ldr	r3, [pc, #96]	; (ac68 <SdioCard::sectorCount()+0x64>)
    ac06:	781a      	ldrb	r2, [r3, #0]
    ac08:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    ac0c:	d00f      	beq.n	ac2e <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    ac0e:	2a40      	cmp	r2, #64	; 0x40
    ac10:	d001      	beq.n	ac16 <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    ac12:	2000      	movs	r0, #0
}
    ac14:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ac16:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ac18:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ac1a:	7a19      	ldrb	r1, [r3, #8]
    ac1c:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    ac1e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    ac22:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    ac26:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    ac2a:	0280      	lsls	r0, r0, #10
    ac2c:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ac2e:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ac30:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac32:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    ac34:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac38:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    ac3c:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac40:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    ac42:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac44:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    ac48:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    ac4a:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    ac4e:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    ac52:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    ac54:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    ac58:	3001      	adds	r0, #1
    ac5a:	f003 030f 	and.w	r3, r3, #15
    ac5e:	4413      	add	r3, r2
    ac60:	3b07      	subs	r3, #7
    ac62:	4098      	lsls	r0, r3
}
    ac64:	f85d fb04 	ldr.w	pc, [sp], #4
    ac68:	20027dfc 	.word	0x20027dfc

0000ac6c <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    ac6c:	4a40      	ldr	r2, [pc, #256]	; (ad70 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    ac6e:	2005      	movs	r0, #5
    ac70:	4940      	ldr	r1, [pc, #256]	; (ad74 <initSDHC()+0x108>)
static void initSDHC() {
    ac72:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    ac74:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    ac78:	4b3f      	ldr	r3, [pc, #252]	; (ad78 <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    ac7a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    ac7e:	4d3f      	ldr	r5, [pc, #252]	; (ad7c <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    ac80:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    ac84:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    ac88:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    ac8c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    ac90:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    ac94:	f044 0418 	orr.w	r4, r4, #24
    ac98:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    ac9c:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    aca0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    aca4:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    aca8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    acac:	f042 020c 	orr.w	r2, r2, #12
    acb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    acb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    acb6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    acba:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    acbc:	69da      	ldr	r2, [r3, #28]
    acbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    acc2:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    acc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    acc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    acca:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    accc:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    acd0:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    acd4:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    acd8:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    acdc:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    ace0:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    ace4:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    ace6:	4b26      	ldr	r3, [pc, #152]	; (ad80 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    ace8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    acec:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    acee:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    acf0:	4313      	orrs	r3, r2
    acf2:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    acf4:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    acf6:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    acfa:	d1fb      	bne.n	acf4 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    acfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ad00:	f7ff feca 	bl	aa98 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    ad04:	4b1b      	ldr	r3, [pc, #108]	; (ad74 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    ad06:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    ad0a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    ad0e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    ad12:	481c      	ldr	r0, [pc, #112]	; (ad84 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    ad14:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    ad18:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    ad1c:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    ad20:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    ad24:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    ad28:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    ad2c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    ad30:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    ad34:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    ad38:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    ad3c:	4912      	ldr	r1, [pc, #72]	; (ad88 <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    ad3e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    ad42:	4b12      	ldr	r3, [pc, #72]	; (ad8c <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    ad44:	6368      	str	r0, [r5, #52]	; 0x34
    ad46:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    ad4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ad4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    ad52:	490f      	ldr	r1, [pc, #60]	; (ad90 <initSDHC()+0x124>)
    ad54:	2060      	movs	r0, #96	; 0x60
    ad56:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    ad5a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    ad5e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    ad60:	4a06      	ldr	r2, [pc, #24]	; (ad7c <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    ad62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    ad66:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    ad68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    ad6a:	011b      	lsls	r3, r3, #4
    ad6c:	d4fc      	bmi.n	ad68 <initSDHC()+0xfc>
}
    ad6e:	bd38      	pop	{r3, r4, r5, pc}
    ad70:	400d8000 	.word	0x400d8000
    ad74:	401f8000 	.word	0x401f8000
    ad78:	400fc000 	.word	0x400fc000
    ad7c:	402c0000 	.word	0x402c0000
    ad80:	01008000 	.word	0x01008000
    ad84:	117f000b 	.word	0x117f000b
    ad88:	20009800 	.word	0x20009800
    ad8c:	0000aa49 	.word	0x0000aa49
    ad90:	e000e400 	.word	0xe000e400

0000ad94 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    ad98:	f002 fa28 	bl	d1ec <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ad9c:	4e17      	ldr	r6, [pc, #92]	; (adfc <waitTransferComplete() [clone .part.0]+0x68>)
    ad9e:	4d18      	ldr	r5, [pc, #96]	; (ae00 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    ada0:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ada2:	f8df 8074 	ldr.w	r8, [pc, #116]	; ae18 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    ada6:	e004      	b.n	adb2 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ada8:	f002 fa20 	bl	d1ec <micros>
    adac:	1bc0      	subs	r0, r0, r7
    adae:	4540      	cmp	r0, r8
    adb0:	d81b      	bhi.n	adea <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    adb2:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    adb4:	402c      	ands	r4, r5
    adb6:	d0f7      	beq.n	ada8 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    adb8:	4a12      	ldr	r2, [pc, #72]	; (ae04 <waitTransferComplete() [clone .part.0]+0x70>)
    adba:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    adbc:	4b12      	ldr	r3, [pc, #72]	; (ae08 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    adbe:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    adc0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    adc2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    adc4:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    adc6:	4a11      	ldr	r2, [pc, #68]	; (ae0c <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    adc8:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    adca:	681b      	ldr	r3, [r3, #0]
    adcc:	4213      	tst	r3, r2
    adce:	d009      	beq.n	ade4 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    add0:	490f      	ldr	r1, [pc, #60]	; (ae10 <waitTransferComplete() [clone .part.0]+0x7c>)
    add2:	241f      	movs	r4, #31
  m_errorLine = line;
    add4:	4b0f      	ldr	r3, [pc, #60]	; (ae14 <waitTransferComplete() [clone .part.0]+0x80>)
    add6:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    adda:	2000      	movs	r0, #0
  m_errorCode = code;
    addc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    adde:	601a      	str	r2, [r3, #0]
}
    ade0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    ade4:	2001      	movs	r0, #1
}
    ade6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    adea:	4a06      	ldr	r2, [pc, #24]	; (ae04 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    adec:	4b06      	ldr	r3, [pc, #24]	; (ae08 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    adee:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    adf0:	6b32      	ldr	r2, [r6, #48]	; 0x30
    adf2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    adf4:	681b      	ldr	r3, [r3, #0]
    adf6:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    adf8:	e7ea      	b.n	add0 <waitTransferComplete() [clone .part.0]+0x3c>
    adfa:	bf00      	nop
    adfc:	402c0000 	.word	0x402c0000
    ae00:	117f0002 	.word	0x117f0002
    ae04:	200293a1 	.word	0x200293a1
    ae08:	200284d8 	.word	0x200284d8
    ae0c:	117f0000 	.word	0x117f0000
    ae10:	20009486 	.word	0x20009486
    ae14:	20025bd8 	.word	0x20025bd8
    ae18:	000f4240 	.word	0x000f4240

0000ae1c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    ae1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    ae20:	4c26      	ldr	r4, [pc, #152]	; (aebc <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    ae22:	460f      	mov	r7, r1
  if (!m_transferActive) {
    ae24:	7823      	ldrb	r3, [r4, #0]
    ae26:	2b00      	cmp	r3, #0
    ae28:	d138      	bne.n	ae9c <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    ae2a:	4b25      	ldr	r3, [pc, #148]	; (aec0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ae2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ae2e:	05d2      	lsls	r2, r2, #23
    ae30:	d52b      	bpl.n	ae8a <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ae32:	4d23      	ldr	r5, [pc, #140]	; (aec0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae34:	f8df 8094 	ldr.w	r8, [pc, #148]	; aecc <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ae38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ae3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ae3e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    ae40:	f002 f9d4 	bl	d1ec <micros>
    ae44:	4606      	mov	r6, r0
  while (fcn()) {
    ae46:	e004      	b.n	ae52 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ae48:	f002 f9d0 	bl	d1ec <micros>
    ae4c:	1b80      	subs	r0, r0, r6
    ae4e:	4540      	cmp	r0, r8
    ae50:	d82a      	bhi.n	aea8 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    ae52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    ae54:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    ae58:	d0f6      	beq.n	ae48 <SdioCard::writeData(unsigned char const*)+0x2c>
    ae5a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    ae5e:	4818      	ldr	r0, [pc, #96]	; (aec0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ae60:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    ae64:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ae66:	055b      	lsls	r3, r3, #21
    ae68:	d5fc      	bpl.n	ae64 <SdioCard::writeData(unsigned char const*)+0x48>
    ae6a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    ae6e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ae72:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    ae74:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ae76:	d1fa      	bne.n	ae6e <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ae78:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ae7c:	45bc      	cmp	ip, r7
    ae7e:	d1f1      	bne.n	ae64 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    ae80:	2301      	movs	r3, #1
  return true;
    ae82:	4618      	mov	r0, r3
  m_transferActive = true;
    ae84:	7023      	strb	r3, [r4, #0]
}
    ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ae8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ae8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ae90:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ae92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ae94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ae98:	629a      	str	r2, [r3, #40]	; 0x28
    ae9a:	e7ca      	b.n	ae32 <SdioCard::writeData(unsigned char const*)+0x16>
    ae9c:	f7ff ff7a 	bl	ad94 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    aea0:	2800      	cmp	r0, #0
    aea2:	d1c2      	bne.n	ae2a <SdioCard::writeData(unsigned char const*)+0xe>
}
    aea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    aea8:	4906      	ldr	r1, [pc, #24]	; (aec4 <SdioCard::writeData(unsigned char const*)+0xa8>)
    aeaa:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    aeac:	4b06      	ldr	r3, [pc, #24]	; (aec8 <SdioCard::writeData(unsigned char const*)+0xac>)
    aeae:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    aeb2:	4648      	mov	r0, r9
  m_errorCode = code;
    aeb4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    aeb6:	601a      	str	r2, [r3, #0]
}
    aeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aebc:	200293a1 	.word	0x200293a1
    aec0:	402c0000 	.word	0x402c0000
    aec4:	20009486 	.word	0x20009486
    aec8:	20025bd8 	.word	0x20025bd8
    aecc:	000f4240 	.word	0x000f4240

0000aed0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    aed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aed4:	4607      	mov	r7, r0
    aed6:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    aed8:	4c1f      	ldr	r4, [pc, #124]	; (af58 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    aeda:	f002 f987 	bl	d1ec <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aede:	4e1f      	ldr	r6, [pc, #124]	; (af5c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    aee0:	4605      	mov	r5, r0
  while (fcn()) {
    aee2:	e004      	b.n	aeee <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    aee4:	f002 f982 	bl	d1ec <micros>
    aee8:	1b43      	subs	r3, r0, r5
    aeea:	42b3      	cmp	r3, r6
    aeec:	d824      	bhi.n	af38 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    aeee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    aef0:	07d9      	lsls	r1, r3, #31
    aef2:	d4f7      	bmi.n	aee4 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    aef4:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    aef6:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    aefa:	d420      	bmi.n	af3e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    aefc:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    af00:	4c15      	ldr	r4, [pc, #84]	; (af58 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    af02:	4e17      	ldr	r6, [pc, #92]	; (af60 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    af04:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    af06:	f002 f971 	bl	d1ec <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af0a:	4f14      	ldr	r7, [pc, #80]	; (af5c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    af0c:	4605      	mov	r5, r0
  while (fcn()) {
    af0e:	e004      	b.n	af1a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    af10:	f002 f96c 	bl	d1ec <micros>
    af14:	1b40      	subs	r0, r0, r5
    af16:	42b8      	cmp	r0, r7
    af18:	d80e      	bhi.n	af38 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    af1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    af1c:	4233      	tst	r3, r6
    af1e:	d0f7      	beq.n	af10 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    af20:	6b22      	ldr	r2, [r4, #48]	; 0x30
    af22:	4b10      	ldr	r3, [pc, #64]	; (af64 <cardCommand(unsigned long, unsigned long)+0x94>)
    af24:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    af26:	681a      	ldr	r2, [r3, #0]
    af28:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    af2a:	681a      	ldr	r2, [r3, #0]
    af2c:	07d2      	lsls	r2, r2, #31
    af2e:	d503      	bpl.n	af38 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    af30:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    af32:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    af36:	d00b      	beq.n	af50 <cardCommand(unsigned long, unsigned long)+0x80>
    af38:	2000      	movs	r0, #0
}
    af3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    af3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    af40:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    af42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    af46:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    af48:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    af4a:	4313      	orrs	r3, r2
    af4c:	64a3      	str	r3, [r4, #72]	; 0x48
    af4e:	e7d5      	b.n	aefc <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    af50:	2001      	movs	r0, #1
}
    af52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af56:	bf00      	nop
    af58:	402c0000 	.word	0x402c0000
    af5c:	000f4240 	.word	0x000f4240
    af60:	000f0001 	.word	0x000f0001
    af64:	200284d8 	.word	0x200284d8

0000af68 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    af68:	4b15      	ldr	r3, [pc, #84]	; (afc0 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    af6a:	b530      	push	{r4, r5, lr}
    af6c:	460d      	mov	r5, r1
    af6e:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    af70:	6819      	ldr	r1, [r3, #0]
    af72:	f7ff ffad 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    af76:	b308      	cbz	r0, afbc <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    af78:	4b12      	ldr	r3, [pc, #72]	; (afc4 <readReg16(unsigned long, void*)+0x5c>)
    af7a:	f105 040f 	add.w	r4, r5, #15
    af7e:	691a      	ldr	r2, [r3, #16]
    af80:	9200      	str	r2, [sp, #0]
    af82:	6959      	ldr	r1, [r3, #20]
    af84:	9101      	str	r1, [sp, #4]
    af86:	6999      	ldr	r1, [r3, #24]
    af88:	9102      	str	r1, [sp, #8]
    af8a:	69db      	ldr	r3, [r3, #28]
    af8c:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    af8e:	2300      	movs	r3, #0
    af90:	e001      	b.n	af96 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    af92:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    af96:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    af9a:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    af9c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    afa0:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    afa4:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    afa6:	fa22 f20c 	lsr.w	r2, r2, ip
    afaa:	f10e 0110 	add.w	r1, lr, #16
    afae:	f804 2d01 	strb.w	r2, [r4, #-1]!
    afb2:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    afb6:	d1ec      	bne.n	af92 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    afb8:	2300      	movs	r3, #0
    afba:	73eb      	strb	r3, [r5, #15]
}
    afbc:	b005      	add	sp, #20
    afbe:	bd30      	pop	{r4, r5, pc}
    afc0:	20027e10 	.word	0x20027e10
    afc4:	402c0000 	.word	0x402c0000

0000afc8 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    afc8:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    afca:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    afcc:	07db      	lsls	r3, r3, #31
    afce:	d505      	bpl.n	afdc <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    afd0:	4b15      	ldr	r3, [pc, #84]	; (b028 <SdioCard::isBusy()+0x60>)
    afd2:	681b      	ldr	r3, [r3, #0]
    afd4:	b1b3      	cbz	r3, b004 <SdioCard::isBusy()+0x3c>
}
    afd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    afda:	4718      	bx	r3
    if (m_transferActive) {
    afdc:	4b13      	ldr	r3, [pc, #76]	; (b02c <SdioCard::isBusy()+0x64>)
    afde:	781b      	ldrb	r3, [r3, #0]
    afe0:	b93b      	cbnz	r3, aff2 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    afe2:	4b13      	ldr	r3, [pc, #76]	; (b030 <SdioCard::isBusy()+0x68>)
    afe4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    afe6:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    afea:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    afee:	4620      	mov	r0, r4
    aff0:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    aff2:	4b0f      	ldr	r3, [pc, #60]	; (b030 <SdioCard::isBusy()+0x68>)
    aff4:	4c0f      	ldr	r4, [pc, #60]	; (b034 <SdioCard::isBusy()+0x6c>)
    aff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    aff8:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    affa:	fab4 f484 	clz	r4, r4
    affe:	0964      	lsrs	r4, r4, #5
}
    b000:	4620      	mov	r0, r4
    b002:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b004:	4b0c      	ldr	r3, [pc, #48]	; (b038 <SdioCard::isBusy()+0x70>)
    b006:	781c      	ldrb	r4, [r3, #0]
    b008:	2c00      	cmp	r4, #0
    b00a:	d0f0      	beq.n	afee <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b00c:	4b0b      	ldr	r3, [pc, #44]	; (b03c <SdioCard::isBusy()+0x74>)
    b00e:	480c      	ldr	r0, [pc, #48]	; (b040 <SdioCard::isBusy()+0x78>)
    b010:	6819      	ldr	r1, [r3, #0]
    b012:	f7ff ff5d 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b016:	2800      	cmp	r0, #0
    b018:	d0e9      	beq.n	afee <SdioCard::isBusy()+0x26>
    b01a:	4b05      	ldr	r3, [pc, #20]	; (b030 <SdioCard::isBusy()+0x68>)
    b01c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    b01e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    b022:	f3c4 2400 	ubfx	r4, r4, #8, #1
    b026:	e7e2      	b.n	afee <SdioCard::isBusy()+0x26>
    b028:	200284d4 	.word	0x200284d4
    b02c:	200293a1 	.word	0x200293a1
    b030:	402c0000 	.word	0x402c0000
    b034:	117f0002 	.word	0x117f0002
    b038:	2002939e 	.word	0x2002939e
    b03c:	20027e10 	.word	0x20027e10
    b040:	0d1a0000 	.word	0x0d1a0000

0000b044 <SdioCard::status()>:
uint32_t SdioCard::status() {
    b044:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b046:	4b04      	ldr	r3, [pc, #16]	; (b058 <SdioCard::status()+0x14>)
    b048:	4804      	ldr	r0, [pc, #16]	; (b05c <SdioCard::status()+0x18>)
    b04a:	6819      	ldr	r1, [r3, #0]
    b04c:	f7ff ff40 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b050:	b108      	cbz	r0, b056 <SdioCard::status()+0x12>
    b052:	4b03      	ldr	r3, [pc, #12]	; (b060 <SdioCard::status()+0x1c>)
    b054:	6918      	ldr	r0, [r3, #16]
}
    b056:	bd08      	pop	{r3, pc}
    b058:	20027e10 	.word	0x20027e10
    b05c:	0d1a0000 	.word	0x0d1a0000
    b060:	402c0000 	.word	0x402c0000

0000b064 <isBusyCMD13()>:
static bool isBusyCMD13() {
    b064:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b066:	4b07      	ldr	r3, [pc, #28]	; (b084 <isBusyCMD13()+0x20>)
    b068:	4807      	ldr	r0, [pc, #28]	; (b088 <isBusyCMD13()+0x24>)
    b06a:	6819      	ldr	r1, [r3, #0]
    b06c:	f7ff ff30 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b070:	b130      	cbz	r0, b080 <isBusyCMD13()+0x1c>
    b072:	4b06      	ldr	r3, [pc, #24]	; (b08c <isBusyCMD13()+0x28>)
    b074:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    b076:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    b07a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    b07e:	bd08      	pop	{r3, pc}
    b080:	2001      	movs	r0, #1
    b082:	bd08      	pop	{r3, pc}
    b084:	20027e10 	.word	0x20027e10
    b088:	0d1a0000 	.word	0x0d1a0000
    b08c:	402c0000 	.word	0x402c0000

0000b090 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    b090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    b094:	4b29      	ldr	r3, [pc, #164]	; (b13c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    b096:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    b098:	f8df a0c0 	ldr.w	sl, [pc, #192]	; b15c <SdioCard::writeStart(unsigned long)+0xcc>
    b09c:	4e28      	ldr	r6, [pc, #160]	; (b140 <SdioCard::writeStart(unsigned long)+0xb0>)
    b09e:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    b0a2:	f002 f8a3 	bl	d1ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b0a6:	4d27      	ldr	r5, [pc, #156]	; (b144 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    b0a8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b0aa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; b160 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b0ae:	4f26      	ldr	r7, [pc, #152]	; (b148 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    b0b0:	e006      	b.n	b0c0 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b0b2:	f002 f89b 	bl	d1ec <micros>
    b0b6:	1b00      	subs	r0, r0, r4
    b0b8:	42b8      	cmp	r0, r7
    b0ba:	d829      	bhi.n	b110 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    b0bc:	f004 f944 	bl	f348 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b0c0:	6831      	ldr	r1, [r6, #0]
    b0c2:	4628      	mov	r0, r5
    b0c4:	f7ff ff04 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b0c8:	2800      	cmp	r0, #0
    b0ca:	d0f2      	beq.n	b0b2 <SdioCard::writeStart(unsigned long)+0x22>
    b0cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b0d0:	05db      	lsls	r3, r3, #23
    b0d2:	d5ee      	bpl.n	b0b2 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    b0d4:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b0d6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    b0da:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b0de:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    b0e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b0e6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b0ea:	4b18      	ldr	r3, [pc, #96]	; (b14c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    b0ec:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b0f0:	781b      	ldrb	r3, [r3, #0]
    b0f2:	b1cb      	cbz	r3, b128 <SdioCard::writeStart(unsigned long)+0x98>
    b0f4:	4649      	mov	r1, r9
    b0f6:	4816      	ldr	r0, [pc, #88]	; (b150 <SdioCard::writeStart(unsigned long)+0xc0>)
    b0f8:	f7ff feea 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b0fc:	b930      	cbnz	r0, b10c <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    b0fe:	4915      	ldr	r1, [pc, #84]	; (b154 <SdioCard::writeStart(unsigned long)+0xc4>)
    b100:	240e      	movs	r4, #14
  m_errorLine = line;
    b102:	4b15      	ldr	r3, [pc, #84]	; (b158 <SdioCard::writeStart(unsigned long)+0xc8>)
    b104:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    b108:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b10a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    b10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b110:	4a10      	ldr	r2, [pc, #64]	; (b154 <SdioCard::writeStart(unsigned long)+0xc4>)
    b112:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b114:	2000      	movs	r0, #0
  m_errorLine = line;
    b116:	4b10      	ldr	r3, [pc, #64]	; (b158 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    b118:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b11a:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    b11e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    b122:	601a      	str	r2, [r3, #0]
}
    b124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    b128:	ea4f 2949 	mov.w	r9, r9, lsl #9
    b12c:	4808      	ldr	r0, [pc, #32]	; (b150 <SdioCard::writeStart(unsigned long)+0xc0>)
    b12e:	4649      	mov	r1, r9
    b130:	f7ff fece 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b134:	2800      	cmp	r0, #0
    b136:	d1e9      	bne.n	b10c <SdioCard::writeStart(unsigned long)+0x7c>
    b138:	e7e1      	b.n	b0fe <SdioCard::writeStart(unsigned long)+0x6e>
    b13a:	bf00      	nop
    b13c:	0000b065 	.word	0x0000b065
    b140:	20027e10 	.word	0x20027e10
    b144:	0d1a0000 	.word	0x0d1a0000
    b148:	000f4240 	.word	0x000f4240
    b14c:	200293a0 	.word	0x200293a0
    b150:	193a0020 	.word	0x193a0020
    b154:	20009486 	.word	0x20009486
    b158:	20025bd8 	.word	0x20025bd8
    b15c:	200284d4 	.word	0x200284d4
    b160:	402c0000 	.word	0x402c0000

0000b164 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    b164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b168:	4c25      	ldr	r4, [pc, #148]	; (b200 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b16a:	2100      	movs	r1, #0
    b16c:	4825      	ldr	r0, [pc, #148]	; (b204 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b16e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    b174:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    b176:	f7ff feab 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b17a:	4605      	mov	r5, r0
    b17c:	b948      	cbnz	r0, b192 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    b17e:	4922      	ldr	r1, [pc, #136]	; (b208 <SdioCard::readStop()+0xa4>)
    b180:	2009      	movs	r0, #9
  m_errorLine = line;
    b182:	4b22      	ldr	r3, [pc, #136]	; (b20c <SdioCard::readStop()+0xa8>)
    b184:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    b188:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b18a:	601a      	str	r2, [r3, #0]
}
    b18c:	4628      	mov	r0, r5
    b18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    b192:	4b1f      	ldr	r3, [pc, #124]	; (b210 <SdioCard::readStop()+0xac>)
    b194:	f8df 8080 	ldr.w	r8, [pc, #128]	; b218 <SdioCard::readStop()+0xb4>
    b198:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    b19c:	f002 f826 	bl	d1ec <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b1a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    b1a2:	4606      	mov	r6, r0
  while (fcn()) {
    b1a4:	01d8      	lsls	r0, r3, #7
    b1a6:	d418      	bmi.n	b1da <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b1a8:	4f1a      	ldr	r7, [pc, #104]	; (b214 <SdioCard::readStop()+0xb0>)
    b1aa:	e004      	b.n	b1b6 <SdioCard::readStop()+0x52>
    yield();
    b1ac:	f004 f8cc 	bl	f348 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b1b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    b1b2:	01d9      	lsls	r1, r3, #7
    b1b4:	d411      	bmi.n	b1da <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b1b6:	f002 f819 	bl	d1ec <micros>
    b1ba:	1b83      	subs	r3, r0, r6
    b1bc:	42bb      	cmp	r3, r7
    b1be:	d9f5      	bls.n	b1ac <SdioCard::readStop()+0x48>
  m_errorCode = code;
    b1c0:	4a11      	ldr	r2, [pc, #68]	; (b208 <SdioCard::readStop()+0xa4>)
    b1c2:	210a      	movs	r1, #10
      m_busyFcn = 0;
    b1c4:	2500      	movs	r5, #0
  m_errorLine = line;
    b1c6:	4b11      	ldr	r3, [pc, #68]	; (b20c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    b1c8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    b1ca:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    b1ce:	4628      	mov	r0, r5
      m_busyFcn = 0;
    b1d0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    b1d4:	601a      	str	r2, [r3, #0]
}
    b1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    b1da:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    b1dc:	4b08      	ldr	r3, [pc, #32]	; (b200 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    b1de:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    b1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b1e4:	0792      	lsls	r2, r2, #30
    b1e6:	d5d1      	bpl.n	b18c <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    b1e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b1ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b1ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    b1ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    b1f2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    b1f6:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    b1f8:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    b1fa:	629a      	str	r2, [r3, #40]	; 0x28
    b1fc:	e7c6      	b.n	b18c <SdioCard::readStop()+0x28>
    b1fe:	bf00      	nop
    b200:	402c0000 	.word	0x402c0000
    b204:	0cdb0000 	.word	0x0cdb0000
    b208:	20009486 	.word	0x20009486
    b20c:	20025bd8 	.word	0x20025bd8
    b210:	0000aa79 	.word	0x0000aa79
    b214:	000f4240 	.word	0x000f4240
    b218:	200284d4 	.word	0x200284d4

0000b21c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    b21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b220:	4682      	mov	sl, r0
    b222:	4689      	mov	r9, r1
    b224:	4e36      	ldr	r6, [pc, #216]	; (b300 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    b226:	f001 ffe1 	bl	d1ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b22a:	4d36      	ldr	r5, [pc, #216]	; (b304 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    b22c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b22e:	f8df 8100 	ldr.w	r8, [pc, #256]	; b330 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b232:	4f35      	ldr	r7, [pc, #212]	; (b308 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    b234:	e004      	b.n	b240 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b236:	f001 ffd9 	bl	d1ec <micros>
    b23a:	1b03      	subs	r3, r0, r4
    b23c:	42bb      	cmp	r3, r7
    b23e:	d827      	bhi.n	b290 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b240:	6831      	ldr	r1, [r6, #0]
    b242:	4628      	mov	r0, r5
    b244:	f7ff fe44 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b248:	2800      	cmp	r0, #0
    b24a:	d0f4      	beq.n	b236 <cardCMD6(unsigned long, unsigned char*)+0x1a>
    b24c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b250:	05da      	lsls	r2, r3, #23
    b252:	d5f0      	bpl.n	b236 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    b254:	2301      	movs	r3, #1
    b256:	4d2d      	ldr	r5, [pc, #180]	; (b30c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    b258:	4f2d      	ldr	r7, [pc, #180]	; (b310 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b25a:	4651      	mov	r1, sl
  m_dmaBusy = true;
    b25c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    b25e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b260:	482c      	ldr	r0, [pc, #176]	; (b314 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    b262:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b264:	4b2c      	ldr	r3, [pc, #176]	; (b318 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    b266:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    b26a:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b26e:	4b2b      	ldr	r3, [pc, #172]	; (b31c <cardCMD6(unsigned long, unsigned char*)+0x100>)
    b270:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    b274:	f7ff fe2c 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b278:	4604      	mov	r4, r0
    b27a:	b9a0      	cbnz	r0, b2a6 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    b27c:	4928      	ldr	r1, [pc, #160]	; (b320 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b27e:	2004      	movs	r0, #4
  m_errorLine = line;
    b280:	4b28      	ldr	r3, [pc, #160]	; (b324 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b282:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    b286:	7008      	strb	r0, [r1, #0]
}
    b288:	4620      	mov	r0, r4
  m_errorLine = line;
    b28a:	601a      	str	r2, [r3, #0]
}
    b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    b290:	4923      	ldr	r1, [pc, #140]	; (b320 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b292:	200a      	movs	r0, #10
  m_errorLine = line;
    b294:	4b23      	ldr	r3, [pc, #140]	; (b324 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b296:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    b29a:	2400      	movs	r4, #0
  m_errorCode = code;
    b29c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b29e:	601a      	str	r2, [r3, #0]
}
    b2a0:	4620      	mov	r0, r4
    b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    b2a6:	4b20      	ldr	r3, [pc, #128]	; (b328 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    b2a8:	f8df 9088 	ldr.w	r9, [pc, #136]	; b334 <cardCMD6(unsigned long, unsigned char*)+0x118>
    b2ac:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    b2b0:	f001 ff9c 	bl	d1ec <micros>
  return m_dmaBusy;
    b2b4:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    b2b6:	4606      	mov	r6, r0
  while (fcn()) {
    b2b8:	b1bb      	cbz	r3, b2ea <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2ba:	f8df 804c 	ldr.w	r8, [pc, #76]	; b308 <cardCMD6(unsigned long, unsigned char*)+0xec>
    b2be:	e003      	b.n	b2c8 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    b2c0:	f004 f842 	bl	f348 <yield>
  return m_dmaBusy;
    b2c4:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    b2c6:	b183      	cbz	r3, b2ea <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b2c8:	f001 ff90 	bl	d1ec <micros>
    b2cc:	1b83      	subs	r3, r0, r6
    b2ce:	4543      	cmp	r3, r8
    b2d0:	d9f6      	bls.n	b2c0 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    b2d2:	2300      	movs	r3, #0
    b2d4:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    b2d8:	4911      	ldr	r1, [pc, #68]	; (b320 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    b2da:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b2dc:	4b11      	ldr	r3, [pc, #68]	; (b324 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    b2de:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    b2e2:	2400      	movs	r4, #0
  m_errorCode = code;
    b2e4:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b2e6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    b2e8:	e7da      	b.n	b2a0 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b2ea:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    b2ec:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b2ee:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    b2f0:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b2f4:	d5f0      	bpl.n	b2d8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b2f6:	683a      	ldr	r2, [r7, #0]
    b2f8:	4b0c      	ldr	r3, [pc, #48]	; (b32c <cardCMD6(unsigned long, unsigned char*)+0x110>)
    b2fa:	421a      	tst	r2, r3
    b2fc:	d0d0      	beq.n	b2a0 <cardCMD6(unsigned long, unsigned char*)+0x84>
    b2fe:	e7eb      	b.n	b2d8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
    b300:	20027e10 	.word	0x20027e10
    b304:	0d1a0000 	.word	0x0d1a0000
    b308:	000f4240 	.word	0x000f4240
    b30c:	200293a2 	.word	0x200293a2
    b310:	200284d8 	.word	0x200284d8
    b314:	063a0011 	.word	0x063a0011
    b318:	00010040 	.word	0x00010040
    b31c:	117f0002 	.word	0x117f0002
    b320:	20009486 	.word	0x20009486
    b324:	20025bd8 	.word	0x20025bd8
    b328:	0000aa8d 	.word	0x0000aa8d
    b32c:	117f0000 	.word	0x117f0000
    b330:	402c0000 	.word	0x402c0000
    b334:	200284d4 	.word	0x200284d4

0000b338 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    b33c:	4d32      	ldr	r5, [pc, #200]	; (b408 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b33e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    b340:	7aab      	ldrb	r3, [r5, #10]
    b342:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    b346:	d112      	bne.n	b36e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    b348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b34c:	7aea      	ldrb	r2, [r5, #11]
    b34e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b350:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b354:	1c62      	adds	r2, r4, #1
    b356:	430a      	orrs	r2, r1
    b358:	4213      	tst	r3, r2
    b35a:	d008      	beq.n	b36e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    b35c:	492b      	ldr	r1, [pc, #172]	; (b40c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b35e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    b360:	4b2b      	ldr	r3, [pc, #172]	; (b410 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b362:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    b366:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b368:	601a      	str	r2, [r3, #0]
}
    b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    b36e:	4b29      	ldr	r3, [pc, #164]	; (b414 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    b370:	781b      	ldrb	r3, [r3, #0]
    b372:	b90b      	cbnz	r3, b378 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    b374:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    b376:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    b378:	4827      	ldr	r0, [pc, #156]	; (b418 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    b37a:	f7ff fda9 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b37e:	b940      	cbnz	r0, b392 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    b380:	4922      	ldr	r1, [pc, #136]	; (b40c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b382:	240f      	movs	r4, #15
  m_errorLine = line;
    b384:	4b22      	ldr	r3, [pc, #136]	; (b410 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b386:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    b38a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b38c:	601a      	str	r2, [r3, #0]
}
    b38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    b392:	4621      	mov	r1, r4
    b394:	4821      	ldr	r0, [pc, #132]	; (b41c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    b396:	f7ff fd9b 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b39a:	b940      	cbnz	r0, b3ae <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    b39c:	491b      	ldr	r1, [pc, #108]	; (b40c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b39e:	2410      	movs	r4, #16
  m_errorLine = line;
    b3a0:	4b1b      	ldr	r3, [pc, #108]	; (b410 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b3a2:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    b3a6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b3a8:	601a      	str	r2, [r3, #0]
}
    b3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    b3ae:	2100      	movs	r1, #0
    b3b0:	481b      	ldr	r0, [pc, #108]	; (b420 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    b3b2:	f7ff fd8d 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b3b6:	b938      	cbnz	r0, b3c8 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    b3b8:	4914      	ldr	r1, [pc, #80]	; (b40c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b3ba:	2411      	movs	r4, #17
  m_errorLine = line;
    b3bc:	4b14      	ldr	r3, [pc, #80]	; (b410 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b3be:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    b3c2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b3c4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    b3c6:	e7e2      	b.n	b38e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    b3c8:	f001 ff10 	bl	d1ec <micros>
    b3cc:	4e15      	ldr	r6, [pc, #84]	; (b424 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b3ce:	4d16      	ldr	r5, [pc, #88]	; (b428 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    b3d0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b3d2:	f8df 805c 	ldr.w	r8, [pc, #92]	; b430 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b3d6:	4f15      	ldr	r7, [pc, #84]	; (b42c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b3d8:	6831      	ldr	r1, [r6, #0]
    b3da:	4628      	mov	r0, r5
    b3dc:	f7ff fd78 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b3e0:	b118      	cbz	r0, b3ea <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    b3e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    b3e6:	05db      	lsls	r3, r3, #23
    b3e8:	d4d1      	bmi.n	b38e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b3ea:	f001 feff 	bl	d1ec <micros>
    b3ee:	1b00      	subs	r0, r0, r4
    b3f0:	42b8      	cmp	r0, r7
    b3f2:	d9f1      	bls.n	b3d8 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    b3f4:	4905      	ldr	r1, [pc, #20]	; (b40c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    b3f6:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    b3f8:	4b05      	ldr	r3, [pc, #20]	; (b410 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    b3fa:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b3fe:	2000      	movs	r0, #0
  m_errorCode = code;
    b400:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b402:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    b404:	e7c3      	b.n	b38e <SdioCard::erase(unsigned long, unsigned long)+0x56>
    b406:	bf00      	nop
    b408:	20027dfc 	.word	0x20027dfc
    b40c:	20009486 	.word	0x20009486
    b410:	20025bd8 	.word	0x20025bd8
    b414:	200293a0 	.word	0x200293a0
    b418:	201a0000 	.word	0x201a0000
    b41c:	211a0000 	.word	0x211a0000
    b420:	261b0000 	.word	0x261b0000
    b424:	20027e10 	.word	0x20027e10
    b428:	0d1a0000 	.word	0x0d1a0000
    b42c:	000f4240 	.word	0x000f4240
    b430:	402c0000 	.word	0x402c0000

0000b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    b434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    b438:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    b43c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    b43e:	bf18      	it	ne
    b440:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    b442:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    b444:	9300      	str	r3, [sp, #0]
    b446:	2b00      	cmp	r3, #0
    b448:	bf08      	it	eq
    b44a:	f044 0401 	orreq.w	r4, r4, #1
    b44e:	b15c      	cbz	r4, b468 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b450:	4940      	ldr	r1, [pc, #256]	; (b554 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b452:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    b454:	4b40      	ldr	r3, [pc, #256]	; (b558 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    b456:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    b45a:	2400      	movs	r4, #0
  m_errorCode = code;
    b45c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    b45e:	601a      	str	r2, [r3, #0]
}
    b460:	4620      	mov	r0, r4
    b462:	b003      	add	sp, #12
    b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    b468:	4b3c      	ldr	r3, [pc, #240]	; (b55c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    b46a:	4615      	mov	r5, r2
    b46c:	4a3c      	ldr	r2, [pc, #240]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b46e:	460e      	mov	r6, r1
    b470:	f8df 910c 	ldr.w	r9, [pc, #268]	; b580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    b474:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b476:	f001 feb9 	bl	d1ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b47a:	f8df 8108 	ldr.w	r8, [pc, #264]	; b584 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    b47e:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b480:	f8df b104 	ldr.w	fp, [pc, #260]	; b588 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b484:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b578 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    b488:	e006      	b.n	b498 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b48a:	f001 feaf 	bl	d1ec <micros>
    b48e:	1bc0      	subs	r0, r0, r7
    b490:	4550      	cmp	r0, sl
    b492:	d844      	bhi.n	b51e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    b494:	f003 ff58 	bl	f348 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    b498:	f8d9 1000 	ldr.w	r1, [r9]
    b49c:	4640      	mov	r0, r8
    b49e:	f7ff fd17 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b4a2:	2800      	cmp	r0, #0
    b4a4:	d0f1      	beq.n	b48a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    b4a6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    b4aa:	05da      	lsls	r2, r3, #23
    b4ac:	d5ed      	bpl.n	b48a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b4ae:	9a00      	ldr	r2, [sp, #0]
    b4b0:	4b2c      	ldr	r3, [pc, #176]	; (b564 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    b4b2:	492b      	ldr	r1, [pc, #172]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b4b4:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    b4b8:	2200      	movs	r2, #0
  m_dmaBusy = true;
    b4ba:	4f2b      	ldr	r7, [pc, #172]	; (b568 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    b4bc:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b4be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    b4c2:	2101      	movs	r1, #1
  m_irqstat = 0;
    b4c4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b58c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    b4c8:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    b4ca:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    b4ce:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    b4d2:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    b4d6:	4b25      	ldr	r3, [pc, #148]	; (b56c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    b4d8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b4dc:	4b24      	ldr	r3, [pc, #144]	; (b570 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    b4de:	781b      	ldrb	r3, [r3, #0]
    b4e0:	b343      	cbz	r3, b534 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    b4e2:	4631      	mov	r1, r6
    b4e4:	9801      	ldr	r0, [sp, #4]
    b4e6:	f7ff fcf3 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b4ea:	4681      	mov	r9, r0
    b4ec:	2800      	cmp	r0, #0
    b4ee:	d0b7      	beq.n	b460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    b4f0:	4b20      	ldr	r3, [pc, #128]	; (b574 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    b4f2:	4a1b      	ldr	r2, [pc, #108]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b4f4:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    b4f6:	f001 fe79 	bl	d1ec <micros>
  return m_dmaBusy;
    b4fa:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    b4fc:	4605      	mov	r5, r0
  while (fcn()) {
    b4fe:	b1db      	cbz	r3, b538 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b500:	4e1d      	ldr	r6, [pc, #116]	; (b578 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    b502:	e003      	b.n	b50c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    b504:	f003 ff20 	bl	f348 <yield>
  return m_dmaBusy;
    b508:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    b50a:	b1ab      	cbz	r3, b538 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b50c:	f001 fe6e 	bl	d1ec <micros>
    b510:	1b40      	subs	r0, r0, r5
    b512:	42b0      	cmp	r0, r6
    b514:	d9f6      	bls.n	b504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    b516:	2300      	movs	r3, #0
    b518:	4a11      	ldr	r2, [pc, #68]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b51a:	6013      	str	r3, [r2, #0]
      return true;
    b51c:	e7a0      	b.n	b460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    b51e:	4b0d      	ldr	r3, [pc, #52]	; (b554 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    b520:	220a      	movs	r2, #10
      m_busyFcn = 0;
    b522:	2100      	movs	r1, #0
    b524:	480e      	ldr	r0, [pc, #56]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    b526:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    b528:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    b52c:	4b0a      	ldr	r3, [pc, #40]	; (b558 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    b52e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    b530:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    b532:	e795      	b.n	b460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    b534:	0276      	lsls	r6, r6, #9
    b536:	e7d4      	b.n	b4e2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    b538:	2300      	movs	r3, #0
    b53a:	4a09      	ldr	r2, [pc, #36]	; (b560 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    b53c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    b53e:	f8d8 3000 	ldr.w	r3, [r8]
    b542:	079b      	lsls	r3, r3, #30
    b544:	d58c      	bpl.n	b460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b546:	f8d8 2000 	ldr.w	r2, [r8]
    b54a:	4b0c      	ldr	r3, [pc, #48]	; (b57c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    b54c:	421a      	tst	r2, r3
    b54e:	bf08      	it	eq
    b550:	464c      	moveq	r4, r9
    b552:	e785      	b.n	b460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    b554:	20009486 	.word	0x20009486
    b558:	20025bd8 	.word	0x20025bd8
    b55c:	0000b065 	.word	0x0000b065
    b560:	200284d4 	.word	0x200284d4
    b564:	1fff0000 	.word	0x1fff0000
    b568:	200293a2 	.word	0x200293a2
    b56c:	117f0002 	.word	0x117f0002
    b570:	200293a0 	.word	0x200293a0
    b574:	0000aa8d 	.word	0x0000aa8d
    b578:	000f4240 	.word	0x000f4240
    b57c:	117f0000 	.word	0x117f0000
    b580:	20027e10 	.word	0x20027e10
    b584:	0d1a0000 	.word	0x0d1a0000
    b588:	402c0000 	.word	0x402c0000
    b58c:	200284d8 	.word	0x200284d8

0000b590 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b592:	4606      	mov	r6, r0
    b594:	7a00      	ldrb	r0, [r0, #8]
    b596:	460c      	mov	r4, r1
    b598:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b59a:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    b59c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b59e:	d413      	bmi.n	b5c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b5a0:	b183      	cbz	r3, b5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b5a2:	440f      	add	r7, r1
    b5a4:	e001      	b.n	b5aa <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    b5a6:	42bc      	cmp	r4, r7
    b5a8:	d00c      	beq.n	b5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    b5aa:	6833      	ldr	r3, [r6, #0]
    b5ac:	462a      	mov	r2, r5
    b5ae:	4621      	mov	r1, r4
    b5b0:	4630      	mov	r0, r6
    b5b2:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    b5b4:	3401      	adds	r4, #1
    b5b6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    b5ba:	4798      	blx	r3
    b5bc:	2800      	cmp	r0, #0
    b5be:	d1f2      	bne.n	b5a6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    b5c0:	2000      	movs	r0, #0
}
    b5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b5c4:	2001      	movs	r0, #1
}
    b5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    b5c8:	0790      	lsls	r0, r2, #30
    b5ca:	d012      	beq.n	b5f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	d0f9      	beq.n	b5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    b5d0:	440f      	add	r7, r1
    b5d2:	e001      	b.n	b5d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    b5d4:	42bc      	cmp	r4, r7
    b5d6:	d0f5      	beq.n	b5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    b5d8:	6833      	ldr	r3, [r6, #0]
    b5da:	462a      	mov	r2, r5
    b5dc:	4621      	mov	r1, r4
    b5de:	4630      	mov	r0, r6
    b5e0:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    b5e2:	3401      	adds	r4, #1
    b5e4:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    b5e8:	4798      	blx	r3
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d1f2      	bne.n	b5d4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    b5ee:	2000      	movs	r0, #0
    b5f0:	e7e7      	b.n	b5c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    b5f2:	4806      	ldr	r0, [pc, #24]	; (b60c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    b5f4:	f7ff ff1e 	bl	b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d1e3      	bne.n	b5c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    b5fc:	4904      	ldr	r1, [pc, #16]	; (b610 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    b5fe:	240c      	movs	r4, #12
  m_errorLine = line;
    b600:	4b04      	ldr	r3, [pc, #16]	; (b614 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    b602:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    b606:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b608:	601a      	str	r2, [r3, #0]
}
    b60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b60c:	123a0037 	.word	0x123a0037
    b610:	20009486 	.word	0x20009486
    b614:	20025bd8 	.word	0x20025bd8

0000b618 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b61a:	4606      	mov	r6, r0
    b61c:	7a00      	ldrb	r0, [r0, #8]
    b61e:	460c      	mov	r4, r1
    b620:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    b622:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    b624:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    b626:	d413      	bmi.n	b650 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    b628:	b183      	cbz	r3, b64c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b62a:	440f      	add	r7, r1
    b62c:	e001      	b.n	b632 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    b62e:	42bc      	cmp	r4, r7
    b630:	d00c      	beq.n	b64c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    b632:	6833      	ldr	r3, [r6, #0]
    b634:	462a      	mov	r2, r5
    b636:	4621      	mov	r1, r4
    b638:	4630      	mov	r0, r6
    b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    b63c:	3401      	adds	r4, #1
    b63e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    b642:	4798      	blx	r3
    b644:	2800      	cmp	r0, #0
    b646:	d1f2      	bne.n	b62e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    b648:	2000      	movs	r0, #0
}
    b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    b64c:	2001      	movs	r0, #1
}
    b64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    b650:	0790      	lsls	r0, r2, #30
    b652:	d012      	beq.n	b67a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b654:	2b00      	cmp	r3, #0
    b656:	d0f9      	beq.n	b64c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    b658:	440f      	add	r7, r1
    b65a:	e001      	b.n	b660 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    b65c:	42bc      	cmp	r4, r7
    b65e:	d0f5      	beq.n	b64c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    b660:	6833      	ldr	r3, [r6, #0]
    b662:	462a      	mov	r2, r5
    b664:	4621      	mov	r1, r4
    b666:	4630      	mov	r0, r6
    b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    b66a:	3401      	adds	r4, #1
    b66c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    b670:	4798      	blx	r3
    b672:	2800      	cmp	r0, #0
    b674:	d1f2      	bne.n	b65c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    b676:	2000      	movs	r0, #0
    b678:	e7e7      	b.n	b64a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    b67a:	4806      	ldr	r0, [pc, #24]	; (b694 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    b67c:	f7ff feda 	bl	b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    b680:	2800      	cmp	r0, #0
    b682:	d1e3      	bne.n	b64c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    b684:	4904      	ldr	r1, [pc, #16]	; (b698 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    b686:	240e      	movs	r4, #14
  m_errorLine = line;
    b688:	4b04      	ldr	r3, [pc, #16]	; (b69c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    b68a:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    b68e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b690:	601a      	str	r2, [r3, #0]
}
    b692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b694:	193a0027 	.word	0x193a0027
    b698:	20009486 	.word	0x20009486
    b69c:	20025bd8 	.word	0x20025bd8

0000b6a0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    b6a4:	2500      	movs	r5, #0
  m_initDone = false;
    b6a6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b968 <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    b6aa:	4c9b      	ldr	r4, [pc, #620]	; (b918 <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    b6ac:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    b6ae:	f8df 82bc 	ldr.w	r8, [pc, #700]	; b96c <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    b6b2:	4e9a      	ldr	r6, [pc, #616]	; (b91c <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    b6b4:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    b6b6:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    b6b8:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    b6bc:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    b6be:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    b6c2:	7035      	strb	r5, [r6, #0]
  initSDHC();
    b6c4:	f7ff fad2 	bl	ac6c <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    b6c8:	4629      	mov	r1, r5
    b6ca:	4628      	mov	r0, r5
    b6cc:	f7ff fc00 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b6d0:	b950      	cbnz	r0, b6e8 <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    b6d2:	2101      	movs	r1, #1
  m_errorLine = line;
    b6d4:	4b92      	ldr	r3, [pc, #584]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b6d6:	f240 228e 	movw	r2, #654	; 0x28e
    b6da:	4605      	mov	r5, r0
  m_errorCode = code;
    b6dc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b6de:	601a      	str	r2, [r3, #0]
}
    b6e0:	4628      	mov	r0, r5
    b6e2:	b011      	add	sp, #68	; 0x44
    b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6e8:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    b6ea:	4f8e      	ldr	r7, [pc, #568]	; (b924 <SdioCard::begin(SdioConfig)+0x284>)
    b6ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    b6f0:	4638      	mov	r0, r7
    b6f2:	f7ff fbed 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b6f6:	2800      	cmp	r0, #0
    b6f8:	d14e      	bne.n	b798 <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    b6fa:	3d01      	subs	r5, #1
    b6fc:	d1f6      	bne.n	b6ec <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    b6fe:	7833      	ldrb	r3, [r6, #0]
    b700:	2b00      	cmp	r3, #0
    b702:	d03d      	beq.n	b780 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b704:	f8df b268 	ldr.w	fp, [pc, #616]	; b970 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    b708:	f001 fd70 	bl	d1ec <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b70c:	4e86      	ldr	r6, [pc, #536]	; (b928 <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    b70e:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b710:	f8df a260 	ldr.w	sl, [pc, #608]	; b974 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b714:	4f85      	ldr	r7, [pc, #532]	; (b92c <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b716:	2100      	movs	r1, #0
    b718:	4630      	mov	r0, r6
    b71a:	f7ff fbd9 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b71e:	b950      	cbnz	r0, b736 <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    b720:	2500      	movs	r5, #0
  m_errorCode = code;
    b722:	2117      	movs	r1, #23
  m_errorLine = line;
    b724:	4b7e      	ldr	r3, [pc, #504]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b726:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    b72a:	4628      	mov	r0, r5
  m_errorCode = code;
    b72c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b72e:	601a      	str	r2, [r3, #0]
}
    b730:	b011      	add	sp, #68	; 0x44
    b732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b736:	4659      	mov	r1, fp
    b738:	4650      	mov	r0, sl
    b73a:	f7ff fbc9 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b73e:	2800      	cmp	r0, #0
    b740:	d0ee      	beq.n	b720 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    b742:	f001 fd53 	bl	d1ec <micros>
    b746:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b748:	4b79      	ldr	r3, [pc, #484]	; (b930 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    b74a:	42b8      	cmp	r0, r7
    b74c:	d8e8      	bhi.n	b720 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    b74e:	691a      	ldr	r2, [r3, #16]
    b750:	2a00      	cmp	r2, #0
    b752:	dae0      	bge.n	b716 <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    b754:	6919      	ldr	r1, [r3, #16]
    b756:	4a77      	ldr	r2, [pc, #476]	; (b934 <SdioCard::begin(SdioConfig)+0x294>)
    b758:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    b75a:	691b      	ldr	r3, [r3, #16]
    b75c:	005a      	lsls	r2, r3, #1
    b75e:	d502      	bpl.n	b766 <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    b760:	2301      	movs	r3, #1
    b762:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    b766:	2100      	movs	r1, #0
    b768:	4873      	ldr	r0, [pc, #460]	; (b938 <SdioCard::begin(SdioConfig)+0x298>)
    b76a:	f7ff fbb1 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b76e:	4605      	mov	r5, r0
    b770:	bb10      	cbnz	r0, b7b8 <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    b772:	2102      	movs	r1, #2
  m_errorLine = line;
    b774:	4b6a      	ldr	r3, [pc, #424]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b776:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    b77a:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b77c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    b77e:	e7af      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    b780:	f7ff fa74 	bl	ac6c <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    b784:	4629      	mov	r1, r5
    b786:	4628      	mov	r0, r5
    b788:	f7ff fba2 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    b78c:	7833      	ldrb	r3, [r6, #0]
    b78e:	2b00      	cmp	r3, #0
    b790:	d1b8      	bne.n	b704 <SdioCard::begin(SdioConfig)+0x64>
    b792:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    b796:	e7b7      	b.n	b708 <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    b798:	4b65      	ldr	r3, [pc, #404]	; (b930 <SdioCard::begin(SdioConfig)+0x290>)
    b79a:	691b      	ldr	r3, [r3, #16]
    b79c:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    b7a0:	d007      	beq.n	b7b2 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    b7a2:	2106      	movs	r1, #6
  m_errorLine = line;
    b7a4:	4b5e      	ldr	r3, [pc, #376]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b7a6:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    b7aa:	2500      	movs	r5, #0
  m_errorCode = code;
    b7ac:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b7ae:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    b7b0:	e796      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    b7b2:	2301      	movs	r3, #1
    b7b4:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    b7b6:	e7a5      	b.n	b704 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    b7b8:	2100      	movs	r1, #0
    b7ba:	4860      	ldr	r0, [pc, #384]	; (b93c <SdioCard::begin(SdioConfig)+0x29c>)
    b7bc:	f7ff fb88 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b7c0:	4605      	mov	r5, r0
    b7c2:	b930      	cbnz	r0, b7d2 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    b7c4:	2103      	movs	r1, #3
  m_errorLine = line;
    b7c6:	4b56      	ldr	r3, [pc, #344]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b7c8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    b7cc:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b7ce:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    b7d0:	e786      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b7d2:	4e57      	ldr	r6, [pc, #348]	; (b930 <SdioCard::begin(SdioConfig)+0x290>)
    b7d4:	4b5a      	ldr	r3, [pc, #360]	; (b940 <SdioCard::begin(SdioConfig)+0x2a0>)
    b7d6:	6932      	ldr	r2, [r6, #16]
    b7d8:	4f5a      	ldr	r7, [pc, #360]	; (b944 <SdioCard::begin(SdioConfig)+0x2a4>)
    b7da:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b7dc:	495a      	ldr	r1, [pc, #360]	; (b948 <SdioCard::begin(SdioConfig)+0x2a8>)
    b7de:	485b      	ldr	r0, [pc, #364]	; (b94c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    b7e0:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    b7e2:	f7ff fbc1 	bl	af68 <readReg16(unsigned long, void*)>
    b7e6:	4605      	mov	r5, r0
    b7e8:	b930      	cbnz	r0, b7f8 <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    b7ea:	2107      	movs	r1, #7
  m_errorLine = line;
    b7ec:	4b4c      	ldr	r3, [pc, #304]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b7ee:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    b7f2:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b7f4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    b7f6:	e773      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    b7f8:	4955      	ldr	r1, [pc, #340]	; (b950 <SdioCard::begin(SdioConfig)+0x2b0>)
    b7fa:	4856      	ldr	r0, [pc, #344]	; (b954 <SdioCard::begin(SdioConfig)+0x2b4>)
    b7fc:	f7ff fbb4 	bl	af68 <readReg16(unsigned long, void*)>
    b800:	4605      	mov	r5, r0
    b802:	b930      	cbnz	r0, b812 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    b804:	2108      	movs	r1, #8
  m_errorLine = line;
    b806:	4b46      	ldr	r3, [pc, #280]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b808:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    b80c:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b80e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    b810:	e766      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    b812:	6839      	ldr	r1, [r7, #0]
    b814:	4850      	ldr	r0, [pc, #320]	; (b958 <SdioCard::begin(SdioConfig)+0x2b8>)
    b816:	f7ff fb5b 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b81a:	4605      	mov	r5, r0
    b81c:	b930      	cbnz	r0, b82c <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    b81e:	2105      	movs	r1, #5
  m_errorLine = line;
    b820:	4b3f      	ldr	r3, [pc, #252]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b822:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    b826:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b828:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    b82a:	e759      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b82c:	6839      	ldr	r1, [r7, #0]
    b82e:	483e      	ldr	r0, [pc, #248]	; (b928 <SdioCard::begin(SdioConfig)+0x288>)
    b830:	f7ff fb4e 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b834:	b938      	cbnz	r0, b846 <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    b836:	2114      	movs	r1, #20
  m_errorLine = line;
    b838:	4b39      	ldr	r3, [pc, #228]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    b83a:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    b83e:	2500      	movs	r5, #0
  m_errorCode = code;
    b840:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    b842:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    b844:	e74c      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    b846:	2102      	movs	r1, #2
    b848:	4844      	ldr	r0, [pc, #272]	; (b95c <SdioCard::begin(SdioConfig)+0x2bc>)
    b84a:	f7ff fb41 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    b84e:	4605      	mov	r5, r0
    b850:	2800      	cmp	r0, #0
    b852:	d0f0      	beq.n	b836 <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b854:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b856:	4669      	mov	r1, sp
    b858:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    b85c:	f023 0306 	bic.w	r3, r3, #6
    b860:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    b862:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    b864:	f043 0302 	orr.w	r3, r3, #2
    b868:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    b86a:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    b86e:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    b870:	f7ff fcd4 	bl	b21c <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    b874:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    b878:	079b      	lsls	r3, r3, #30
    b87a:	d543      	bpl.n	b904 <SdioCard::begin(SdioConfig)+0x264>
    b87c:	2800      	cmp	r0, #0
    b87e:	d041      	beq.n	b904 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    b880:	4e27      	ldr	r6, [pc, #156]	; (b920 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b882:	4669      	mov	r1, sp
    b884:	4836      	ldr	r0, [pc, #216]	; (b960 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    b886:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    b88a:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    b88c:	f7ff fcc6 	bl	b21c <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    b890:	f89d 3010 	ldrb.w	r3, [sp, #16]
    b894:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    b898:	2b01      	cmp	r3, #1
    b89a:	d136      	bne.n	b90a <SdioCard::begin(SdioConfig)+0x26a>
    b89c:	b3a8      	cbz	r0, b90a <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    b89e:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8a2:	4c30      	ldr	r4, [pc, #192]	; (b964 <SdioCard::begin(SdioConfig)+0x2c4>)
    b8a4:	2305      	movs	r3, #5
    b8a6:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b8aa:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b8ae:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b8b2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b8b6:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b8ba:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    b8be:	f7ff f8eb 	bl	aa98 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8c2:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b8c4:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8c8:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b8cc:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b8d0:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b8d4:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b8d8:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b8dc:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b8e0:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b8e4:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b8e8:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b8ec:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b8f0:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    b8f4:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b8f6:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b8fa:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    b8fe:	f889 3000 	strb.w	r3, [r9]
  return true;
    b902:	e6ed      	b.n	b6e0 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    b904:	f246 10a8 	movw	r0, #25000	; 0x61a8
    b908:	e7cb      	b.n	b8a2 <SdioCard::begin(SdioConfig)+0x202>
    b90a:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    b90e:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    b912:	6037      	str	r7, [r6, #0]
    b914:	e7c5      	b.n	b8a2 <SdioCard::begin(SdioConfig)+0x202>
    b916:	bf00      	nop
    b918:	20009486 	.word	0x20009486
    b91c:	2002939f 	.word	0x2002939f
    b920:	20025bd8 	.word	0x20025bd8
    b924:	081a0000 	.word	0x081a0000
    b928:	371a0000 	.word	0x371a0000
    b92c:	000f4240 	.word	0x000f4240
    b930:	402c0000 	.word	0x402c0000
    b934:	20027e0c 	.word	0x20027e0c
    b938:	02090000 	.word	0x02090000
    b93c:	031a0000 	.word	0x031a0000
    b940:	ffff0000 	.word	0xffff0000
    b944:	20027e10 	.word	0x20027e10
    b948:	20027dfc 	.word	0x20027dfc
    b94c:	09090000 	.word	0x09090000
    b950:	20027dec 	.word	0x20027dec
    b954:	0a090000 	.word	0x0a090000
    b958:	071b0000 	.word	0x071b0000
    b95c:	061a0000 	.word	0x061a0000
    b960:	80fffff1 	.word	0x80fffff1
    b964:	401f8000 	.word	0x401f8000
    b968:	2002939e 	.word	0x2002939e
    b96c:	200293a0 	.word	0x200293a0
    b970:	40300000 	.word	0x40300000
    b974:	29020000 	.word	0x29020000

0000b978 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b978:	4b37      	ldr	r3, [pc, #220]	; (ba58 <SdioCard::readData(unsigned char*)+0xe0>)
    b97a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b97c:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    b97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b982:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    b984:	d40d      	bmi.n	b9a2 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    b986:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b988:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    b98c:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    b98e:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    b990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b992:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    b996:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    b998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    b99a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b99e:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    b9a0:	b662      	cpsie	i
  uint32_t m = micros();
    b9a2:	f001 fc23 	bl	d1ec <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b9a6:	4e2c      	ldr	r6, [pc, #176]	; (ba58 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9a8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; ba70 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    b9ac:	4605      	mov	r5, r0
  while (fcn()) {
    b9ae:	e004      	b.n	b9ba <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9b0:	f001 fc1c 	bl	d1ec <micros>
    b9b4:	1b43      	subs	r3, r0, r5
    b9b6:	4543      	cmp	r3, r8
    b9b8:	d837      	bhi.n	ba2a <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    b9ba:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    b9bc:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    b9c0:	d0f6      	beq.n	b9b0 <SdioCard::readData(unsigned char*)+0x38>
    b9c2:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    b9c6:	4824      	ldr	r0, [pc, #144]	; (ba58 <SdioCard::readData(unsigned char*)+0xe0>)
    b9c8:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    b9cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    b9ce:	051b      	lsls	r3, r3, #20
    b9d0:	d5fc      	bpl.n	b9cc <SdioCard::readData(unsigned char*)+0x54>
    b9d2:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    b9d6:	6a02      	ldr	r2, [r0, #32]
    b9d8:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    b9dc:	459c      	cmp	ip, r3
    b9de:	d1fa      	bne.n	b9d6 <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    b9e0:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    b9e4:	4567      	cmp	r7, ip
    b9e6:	d1f1      	bne.n	b9cc <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    b9e8:	f001 fc00 	bl	d1ec <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b9ec:	4f1a      	ldr	r7, [pc, #104]	; (ba58 <SdioCard::readData(unsigned char*)+0xe0>)
    b9ee:	4d1b      	ldr	r5, [pc, #108]	; (ba5c <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    b9f0:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9f2:	f8df 807c 	ldr.w	r8, [pc, #124]	; ba70 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    b9f6:	e004      	b.n	ba02 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b9f8:	f001 fbf8 	bl	d1ec <micros>
    b9fc:	1b83      	subs	r3, r0, r6
    b9fe:	4543      	cmp	r3, r8
    ba00:	d81d      	bhi.n	ba3e <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    ba02:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    ba04:	402c      	ands	r4, r5
    ba06:	d0f7      	beq.n	b9f8 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    ba0a:	4a15      	ldr	r2, [pc, #84]	; (ba60 <SdioCard::readData(unsigned char*)+0xe8>)
    ba0c:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    ba0e:	6813      	ldr	r3, [r2, #0]
    ba10:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ba12:	6813      	ldr	r3, [r2, #0]
    ba14:	f013 0302 	ands.w	r3, r3, #2
    ba18:	d01b      	beq.n	ba52 <SdioCard::readData(unsigned char*)+0xda>
    ba1a:	6812      	ldr	r2, [r2, #0]
    ba1c:	4b11      	ldr	r3, [pc, #68]	; (ba64 <SdioCard::readData(unsigned char*)+0xec>)
    ba1e:	421a      	tst	r2, r3
    ba20:	bf0c      	ite	eq
    ba22:	2001      	moveq	r0, #1
    ba24:	2000      	movne	r0, #0
}
    ba26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    ba2a:	490f      	ldr	r1, [pc, #60]	; (ba68 <SdioCard::readData(unsigned char*)+0xf0>)
    ba2c:	251a      	movs	r5, #26
  m_errorLine = line;
    ba2e:	4b0f      	ldr	r3, [pc, #60]	; (ba6c <SdioCard::readData(unsigned char*)+0xf4>)
    ba30:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    ba34:	4620      	mov	r0, r4
  m_errorCode = code;
    ba36:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    ba38:	601a      	str	r2, [r3, #0]
}
    ba3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    ba3e:	490a      	ldr	r1, [pc, #40]	; (ba68 <SdioCard::readData(unsigned char*)+0xf0>)
    ba40:	251d      	movs	r5, #29
  m_errorLine = line;
    ba42:	4b0a      	ldr	r3, [pc, #40]	; (ba6c <SdioCard::readData(unsigned char*)+0xf4>)
    ba44:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    ba48:	4620      	mov	r0, r4
  m_errorCode = code;
    ba4a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    ba4c:	601a      	str	r2, [r3, #0]
}
    ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    ba52:	4618      	mov	r0, r3
}
    ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba58:	402c0000 	.word	0x402c0000
    ba5c:	117f0002 	.word	0x117f0002
    ba60:	200284d8 	.word	0x200284d8
    ba64:	117f0000 	.word	0x117f0000
    ba68:	20009486 	.word	0x20009486
    ba6c:	20025bd8 	.word	0x20025bd8
    ba70:	000f4240 	.word	0x000f4240

0000ba74 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    ba78:	4b29      	ldr	r3, [pc, #164]	; (bb20 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    ba7a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    ba7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; bb40 <SdioCard::readStart(unsigned long)+0xcc>
    ba80:	4e28      	ldr	r6, [pc, #160]	; (bb24 <SdioCard::readStart(unsigned long)+0xb0>)
    ba82:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    ba86:	f001 fbb1 	bl	d1ec <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ba8a:	4d27      	ldr	r5, [pc, #156]	; (bb28 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    ba8c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    ba8e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bb44 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ba92:	4f26      	ldr	r7, [pc, #152]	; (bb2c <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    ba94:	e006      	b.n	baa4 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ba96:	f001 fba9 	bl	d1ec <micros>
    ba9a:	1b00      	subs	r0, r0, r4
    ba9c:	42b8      	cmp	r0, r7
    ba9e:	d829      	bhi.n	baf4 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    baa0:	f003 fc52 	bl	f348 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    baa4:	6831      	ldr	r1, [r6, #0]
    baa6:	4628      	mov	r0, r5
    baa8:	f7ff fa12 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    baac:	2800      	cmp	r0, #0
    baae:	d0f2      	beq.n	ba96 <SdioCard::readStart(unsigned long)+0x22>
    bab0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bab4:	05db      	lsls	r3, r3, #23
    bab6:	d5ee      	bpl.n	ba96 <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    bab8:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    baba:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    babe:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    bac2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    baca:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bace:	4b18      	ldr	r3, [pc, #96]	; (bb30 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bad0:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bad4:	781b      	ldrb	r3, [r3, #0]
    bad6:	b1cb      	cbz	r3, bb0c <SdioCard::readStart(unsigned long)+0x98>
    bad8:	4649      	mov	r1, r9
    bada:	4816      	ldr	r0, [pc, #88]	; (bb34 <SdioCard::readStart(unsigned long)+0xc0>)
    badc:	f7ff f9f8 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    bae0:	b930      	cbnz	r0, baf0 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    bae2:	4915      	ldr	r1, [pc, #84]	; (bb38 <SdioCard::readStart(unsigned long)+0xc4>)
    bae4:	240c      	movs	r4, #12
  m_errorLine = line;
    bae6:	4b15      	ldr	r3, [pc, #84]	; (bb3c <SdioCard::readStart(unsigned long)+0xc8>)
    bae8:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    baec:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    baee:	601a      	str	r2, [r3, #0]
}
    baf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    baf4:	4a10      	ldr	r2, [pc, #64]	; (bb38 <SdioCard::readStart(unsigned long)+0xc4>)
    baf6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    baf8:	2000      	movs	r0, #0
  m_errorLine = line;
    bafa:	4b10      	ldr	r3, [pc, #64]	; (bb3c <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    bafc:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bafe:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    bb02:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    bb06:	601a      	str	r2, [r3, #0]
}
    bb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bb0c:	ea4f 2949 	mov.w	r9, r9, lsl #9
    bb10:	4808      	ldr	r0, [pc, #32]	; (bb34 <SdioCard::readStart(unsigned long)+0xc0>)
    bb12:	4649      	mov	r1, r9
    bb14:	f7ff f9dc 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    bb18:	2800      	cmp	r0, #0
    bb1a:	d1e9      	bne.n	baf0 <SdioCard::readStart(unsigned long)+0x7c>
    bb1c:	e7e1      	b.n	bae2 <SdioCard::readStart(unsigned long)+0x6e>
    bb1e:	bf00      	nop
    bb20:	0000b065 	.word	0x0000b065
    bb24:	20027e10 	.word	0x20027e10
    bb28:	0d1a0000 	.word	0x0d1a0000
    bb2c:	000f4240 	.word	0x000f4240
    bb30:	200293a0 	.word	0x200293a0
    bb34:	123a0030 	.word	0x123a0030
    bb38:	20009486 	.word	0x20009486
    bb3c:	20025bd8 	.word	0x20025bd8
    bb40:	200284d4 	.word	0x200284d4
    bb44:	402c0000 	.word	0x402c0000

0000bb48 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    bb4c:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bb4e:	4c1d      	ldr	r4, [pc, #116]	; (bbc4 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    bb50:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    bb52:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bb54:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bb56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bb58:	481b      	ldr	r0, [pc, #108]	; (bbc8 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bb5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bb5e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bb60:	f7ff f9b6 	bl	aed0 <cardCommand(unsigned long, unsigned long)>
    bb64:	b940      	cbnz	r0, bb78 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    bb66:	4919      	ldr	r1, [pc, #100]	; (bbcc <SdioCard::stopTransmission(bool)+0x84>)
    bb68:	2409      	movs	r4, #9
  m_errorLine = line;
    bb6a:	4b19      	ldr	r3, [pc, #100]	; (bbd0 <SdioCard::stopTransmission(bool)+0x88>)
    bb6c:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    bb70:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bb72:	601a      	str	r2, [r3, #0]
}
    bb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    bb78:	2d00      	cmp	r5, #0
    bb7a:	d0fb      	beq.n	bb74 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    bb7c:	4b15      	ldr	r3, [pc, #84]	; (bbd4 <SdioCard::stopTransmission(bool)+0x8c>)
    bb7e:	4e16      	ldr	r6, [pc, #88]	; (bbd8 <SdioCard::stopTransmission(bool)+0x90>)
    bb80:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    bb82:	f001 fb33 	bl	d1ec <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    bb88:	4607      	mov	r7, r0
  while (fcn()) {
    bb8a:	01da      	lsls	r2, r3, #7
    bb8c:	d416      	bmi.n	bbbc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bb8e:	f8df 804c 	ldr.w	r8, [pc, #76]	; bbdc <SdioCard::stopTransmission(bool)+0x94>
    bb92:	e004      	b.n	bb9e <SdioCard::stopTransmission(bool)+0x56>
    yield();
    bb94:	f003 fbd8 	bl	f348 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bb98:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bb9a:	01db      	lsls	r3, r3, #7
    bb9c:	d40e      	bmi.n	bbbc <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bb9e:	f001 fb25 	bl	d1ec <micros>
    bba2:	1bc0      	subs	r0, r0, r7
    bba4:	4540      	cmp	r0, r8
    bba6:	d9f5      	bls.n	bb94 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    bba8:	4a08      	ldr	r2, [pc, #32]	; (bbcc <SdioCard::stopTransmission(bool)+0x84>)
    bbaa:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bbac:	2000      	movs	r0, #0
  m_errorLine = line;
    bbae:	4b08      	ldr	r3, [pc, #32]	; (bbd0 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    bbb0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bbb2:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    bbb6:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    bbb8:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    bbba:	e7db      	b.n	bb74 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    bbbc:	2300      	movs	r3, #0
  return true;
    bbbe:	4628      	mov	r0, r5
  m_busyFcn = 0;
    bbc0:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    bbc2:	e7d7      	b.n	bb74 <SdioCard::stopTransmission(bool)+0x2c>
    bbc4:	402c0000 	.word	0x402c0000
    bbc8:	0cdb0000 	.word	0x0cdb0000
    bbcc:	20009486 	.word	0x20009486
    bbd0:	20025bd8 	.word	0x20025bd8
    bbd4:	0000aa79 	.word	0x0000aa79
    bbd8:	200284d4 	.word	0x200284d4
    bbdc:	000f4240 	.word	0x000f4240

0000bbe0 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    bbe0:	4b0a      	ldr	r3, [pc, #40]	; (bc0c <SdioCard::syncDevice()+0x2c>)
    bbe2:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    bbe4:	b510      	push	{r4, lr}
    bbe6:	4604      	mov	r4, r0
  if (!m_transferActive) {
    bbe8:	b91b      	cbnz	r3, bbf2 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    bbea:	7a63      	ldrb	r3, [r4, #9]
    bbec:	b943      	cbnz	r3, bc00 <SdioCard::syncDevice()+0x20>
  return true;
    bbee:	2001      	movs	r0, #1
}
    bbf0:	bd10      	pop	{r4, pc}
    bbf2:	f7ff f8cf 	bl	ad94 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bbf6:	2800      	cmp	r0, #0
    bbf8:	d0fa      	beq.n	bbf0 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    bbfa:	7a63      	ldrb	r3, [r4, #9]
    bbfc:	2b00      	cmp	r3, #0
    bbfe:	d0f6      	beq.n	bbee <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    bc00:	4620      	mov	r0, r4
    bc02:	2101      	movs	r1, #1
}
    bc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    bc08:	f7ff bf9e 	b.w	bb48 <SdioCard::stopTransmission(bool)>
    bc0c:	200293a1 	.word	0x200293a1

0000bc10 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    bc10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc14:	4604      	mov	r4, r0
    bc16:	7a00      	ldrb	r0, [r0, #8]
    bc18:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    bc1c:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    bc1e:	f010 0501 	ands.w	r5, r0, #1
    bc22:	d013      	beq.n	bc4c <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    bc24:	0793      	lsls	r3, r2, #30
    bc26:	d03c      	beq.n	bca2 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bc28:	2301      	movs	r3, #1
    bc2a:	4838      	ldr	r0, [pc, #224]	; (bd0c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    bc2c:	466a      	mov	r2, sp
    bc2e:	f7ff fc01 	bl	b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bc32:	2800      	cmp	r0, #0
    bc34:	d03a      	beq.n	bcac <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    bc36:	f44f 7200 	mov.w	r2, #512	; 0x200
    bc3a:	4669      	mov	r1, sp
    bc3c:	4630      	mov	r0, r6
    bc3e:	f001 fd85 	bl	d74c <memcpy>
}
    bc42:	4628      	mov	r0, r5
    bc44:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    bc4c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; bd1c <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    bc50:	460f      	mov	r7, r1
    bc52:	f898 3000 	ldrb.w	r3, [r8]
    bc56:	2b00      	cmp	r3, #0
    bc58:	d135      	bne.n	bcc6 <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    bc5a:	7a63      	ldrb	r3, [r4, #9]
    bc5c:	2b01      	cmp	r3, #1
    bc5e:	d039      	beq.n	bcd4 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    bc60:	6822      	ldr	r2, [r4, #0]
    bc62:	492b      	ldr	r1, [pc, #172]	; (bd10 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    bc64:	6a12      	ldr	r2, [r2, #32]
    bc66:	428a      	cmp	r2, r1
    bc68:	d14a      	bne.n	bd00 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    bc6a:	f898 2000 	ldrb.w	r2, [r8]
    bc6e:	2a00      	cmp	r2, #0
    bc70:	d134      	bne.n	bcdc <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    bc72:	2b00      	cmp	r3, #0
    bc74:	d139      	bne.n	bcea <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    bc76:	4639      	mov	r1, r7
    bc78:	4620      	mov	r0, r4
    bc7a:	f7ff fefb 	bl	ba74 <SdioCard::readStart(unsigned long)>
    bc7e:	b1e8      	cbz	r0, bcbc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    bc80:	2301      	movs	r3, #1
      m_curSector = sector;
    bc82:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    bc84:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    bc86:	4631      	mov	r1, r6
    bc88:	4620      	mov	r0, r4
    bc8a:	f7ff fe75 	bl	b978 <SdioCard::readData(unsigned char*)>
    bc8e:	b1a8      	cbz	r0, bcbc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    bc90:	6863      	ldr	r3, [r4, #4]
  return true;
    bc92:	4605      	mov	r5, r0
    m_curSector++;
    bc94:	3301      	adds	r3, #1
}
    bc96:	4628      	mov	r0, r5
    m_curSector++;
    bc98:	6063      	str	r3, [r4, #4]
}
    bc9a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    bca2:	2301      	movs	r3, #1
    bca4:	4819      	ldr	r0, [pc, #100]	; (bd0c <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    bca6:	f7ff fbc5 	bl	b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bcaa:	b938      	cbnz	r0, bcbc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    bcac:	4919      	ldr	r1, [pc, #100]	; (bd14 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    bcae:	200b      	movs	r0, #11
  m_errorLine = line;
    bcb0:	4b19      	ldr	r3, [pc, #100]	; (bd18 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    bcb2:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    bcb6:	2500      	movs	r5, #0
  m_errorCode = code;
    bcb8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bcba:	601a      	str	r2, [r3, #0]
}
    bcbc:	4628      	mov	r0, r5
    bcbe:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcc6:	f7ff f865 	bl	ad94 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    bcca:	2800      	cmp	r0, #0
    bccc:	d0f6      	beq.n	bcbc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    bcce:	7a63      	ldrb	r3, [r4, #9]
    bcd0:	2b01      	cmp	r3, #1
    bcd2:	d1c5      	bne.n	bc60 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    bcd4:	6862      	ldr	r2, [r4, #4]
    bcd6:	42ba      	cmp	r2, r7
    bcd8:	d1c2      	bne.n	bc60 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    bcda:	e7d4      	b.n	bc86 <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    bcdc:	f7ff f85a 	bl	ad94 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bce0:	2800      	cmp	r0, #0
    bce2:	d0eb      	beq.n	bcbc <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    bce4:	7a63      	ldrb	r3, [r4, #9]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d0c5      	beq.n	bc76 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    bcea:	2101      	movs	r1, #1
    bcec:	4620      	mov	r0, r4
    bcee:	f7ff ff2b 	bl	bb48 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    bcf2:	2800      	cmp	r0, #0
    bcf4:	d1bf      	bne.n	bc76 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    bcf6:	4628      	mov	r0, r5
    bcf8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    bd00:	4620      	mov	r0, r4
    bd02:	4790      	blx	r2
    bd04:	2800      	cmp	r0, #0
    bd06:	d0f6      	beq.n	bcf6 <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    bd08:	e7b5      	b.n	bc76 <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    bd0a:	bf00      	nop
    bd0c:	113a0011 	.word	0x113a0011
    bd10:	0000bbe1 	.word	0x0000bbe1
    bd14:	20009486 	.word	0x20009486
    bd18:	20025bd8 	.word	0x20025bd8
    bd1c:	200293a1 	.word	0x200293a1

0000bd20 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    bd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd24:	7a04      	ldrb	r4, [r0, #8]
    bd26:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    bd2a:	460f      	mov	r7, r1
    bd2c:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    bd2e:	f014 0401 	ands.w	r4, r4, #1
    bd32:	d01d      	beq.n	bd70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    bd34:	f012 0f03 	tst.w	r2, #3
    bd38:	d006      	beq.n	bd48 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    bd3a:	4668      	mov	r0, sp
    bd3c:	4611      	mov	r1, r2
    bd3e:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    bd42:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    bd44:	f001 fd02 	bl	d74c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    bd48:	2301      	movs	r3, #1
    bd4a:	4642      	mov	r2, r8
    bd4c:	4639      	mov	r1, r7
    bd4e:	482c      	ldr	r0, [pc, #176]	; (be00 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    bd50:	f7ff fb70 	bl	b434 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    bd54:	4604      	mov	r4, r0
    bd56:	b930      	cbnz	r0, bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    bd58:	492a      	ldr	r1, [pc, #168]	; (be04 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    bd5a:	200d      	movs	r0, #13
  m_errorLine = line;
    bd5c:	4b2a      	ldr	r3, [pc, #168]	; (be08 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    bd5e:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    bd62:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bd64:	601a      	str	r2, [r3, #0]
}
    bd66:	4620      	mov	r0, r4
    bd68:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    bd70:	4d26      	ldr	r5, [pc, #152]	; (be0c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    bd72:	4606      	mov	r6, r0
    bd74:	782b      	ldrb	r3, [r5, #0]
    bd76:	bb2b      	cbnz	r3, bdc4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    bd78:	7a73      	ldrb	r3, [r6, #9]
    bd7a:	2b02      	cmp	r3, #2
    bd7c:	d029      	beq.n	bdd2 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    bd7e:	6832      	ldr	r2, [r6, #0]
    bd80:	4923      	ldr	r1, [pc, #140]	; (be10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    bd82:	6a12      	ldr	r2, [r2, #32]
    bd84:	428a      	cmp	r2, r1
    bd86:	d136      	bne.n	bdf6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    bd88:	782a      	ldrb	r2, [r5, #0]
    bd8a:	bb32      	cbnz	r2, bdda <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d12b      	bne.n	bde8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    bd90:	6833      	ldr	r3, [r6, #0]
    bd92:	4639      	mov	r1, r7
    bd94:	4630      	mov	r0, r6
    bd96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    bd98:	4798      	blx	r3
    bd9a:	2800      	cmp	r0, #0
    bd9c:	d0e3      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    bd9e:	2302      	movs	r3, #2
      m_curSector = sector;
    bda0:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    bda2:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    bda4:	6833      	ldr	r3, [r6, #0]
    bda6:	4641      	mov	r1, r8
    bda8:	4630      	mov	r0, r6
    bdaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    bdac:	4798      	blx	r3
    bdae:	2800      	cmp	r0, #0
    bdb0:	d0d9      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    bdb2:	6873      	ldr	r3, [r6, #4]
  return true;
    bdb4:	4604      	mov	r4, r0
    m_curSector++;
    bdb6:	3301      	adds	r3, #1
}
    bdb8:	4620      	mov	r0, r4
    m_curSector++;
    bdba:	6073      	str	r3, [r6, #4]
}
    bdbc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdc4:	f7fe ffe6 	bl	ad94 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    bdc8:	2800      	cmp	r0, #0
    bdca:	d0cc      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    bdcc:	7a73      	ldrb	r3, [r6, #9]
    bdce:	2b02      	cmp	r3, #2
    bdd0:	d1d5      	bne.n	bd7e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bdd2:	6872      	ldr	r2, [r6, #4]
    bdd4:	42ba      	cmp	r2, r7
    bdd6:	d1d2      	bne.n	bd7e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    bdd8:	e7e4      	b.n	bda4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    bdda:	f7fe ffdb 	bl	ad94 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    bdde:	2800      	cmp	r0, #0
    bde0:	d0c1      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    bde2:	7a73      	ldrb	r3, [r6, #9]
    bde4:	2b00      	cmp	r3, #0
    bde6:	d0d3      	beq.n	bd90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    bde8:	2101      	movs	r1, #1
    bdea:	4630      	mov	r0, r6
    bdec:	f7ff feac 	bl	bb48 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    bdf0:	2800      	cmp	r0, #0
    bdf2:	d0b8      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bdf4:	e7cc      	b.n	bd90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    bdf6:	4630      	mov	r0, r6
    bdf8:	4790      	blx	r2
    bdfa:	2800      	cmp	r0, #0
    bdfc:	d0b3      	beq.n	bd66 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    bdfe:	e7c7      	b.n	bd90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    be00:	183a0001 	.word	0x183a0001
    be04:	20009486 	.word	0x20009486
    be08:	20025bd8 	.word	0x20025bd8
    be0c:	200293a1 	.word	0x200293a1
    be10:	0000bbe1 	.word	0x0000bbe1

0000be14 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    be14:	f001 ba14 	b.w	d240 <digitalWrite>

0000be18 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    be18:	b430      	push	{r4, r5}
    be1a:	b082      	sub	sp, #8
    be1c:	460c      	mov	r4, r1
    be1e:	ab02      	add	r3, sp, #8
    be20:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    be24:	7cc3      	ldrb	r3, [r0, #19]
    be26:	2b00      	cmp	r3, #0
    be28:	d030      	beq.n	be8c <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    be2a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    be2c:	7cc3      	ldrb	r3, [r0, #19]
    be2e:	07da      	lsls	r2, r3, #31
    be30:	d508      	bpl.n	be44 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    be32:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    be36:	6945      	ldr	r5, [r0, #20]
    be38:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    be3c:	402a      	ands	r2, r5
    be3e:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    be40:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    be44:	079d      	lsls	r5, r3, #30
    be46:	d508      	bpl.n	be5a <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    be48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    be4c:	6985      	ldr	r5, [r0, #24]
    be4e:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    be52:	402a      	ands	r2, r5
    be54:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    be56:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    be5a:	0759      	lsls	r1, r3, #29
    be5c:	d508      	bpl.n	be70 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    be5e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    be62:	69c5      	ldr	r5, [r0, #28]
    be64:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    be68:	402a      	ands	r2, r5
    be6a:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    be6c:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    be70:	071a      	lsls	r2, r3, #28
    be72:	d508      	bpl.n	be86 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    be74:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    be78:	6a05      	ldr	r5, [r0, #32]
    be7a:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    be7e:	402a      	ands	r2, r5
    be80:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    be82:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    be86:	06db      	lsls	r3, r3, #27
    be88:	d42f      	bmi.n	beea <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    be8a:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    be8c:	6883      	ldr	r3, [r0, #8]
    be8e:	429c      	cmp	r4, r3
    be90:	d035      	beq.n	befe <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    be92:	4b22      	ldr	r3, [pc, #136]	; (bf1c <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    be94:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    be96:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    be98:	4a21      	ldr	r2, [pc, #132]	; (bf20 <SPIClass::beginTransaction(SPISettings)+0x108>)
    be9a:	f3c3 1101 	ubfx	r1, r3, #4, #2
    be9e:	f3c3 6382 	ubfx	r3, r3, #26, #3
    bea2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    bea6:	3301      	adds	r3, #1
    bea8:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    beac:	b1cc      	cbz	r4, bee2 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    beae:	4294      	cmp	r4, r2
    beb0:	d827      	bhi.n	bf02 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    beb2:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    beb6:	fbb2 f2f3 	udiv	r2, r2, r3
    beba:	4294      	cmp	r4, r2
    bebc:	d32c      	bcc.n	bf18 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    bebe:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    bec2:	d320      	bcc.n	bf06 <SPIClass::beginTransaction(SPISettings)+0xee>
    bec4:	4c17      	ldr	r4, [pc, #92]	; (bf24 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bec6:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bec8:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    beca:	2203      	movs	r2, #3
		port().CR = 0;
    becc:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    bece:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    bed0:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    bed2:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    bed4:	2201      	movs	r2, #1
		port().CCR = _ccr;
    bed6:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    bed8:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    beda:	611a      	str	r2, [r3, #16]
	}
    bedc:	b002      	add	sp, #8
    bede:	bc30      	pop	{r4, r5}
    bee0:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    bee2:	4299      	cmp	r1, r3
    bee4:	d3ef      	bcc.n	bec6 <SPIClass::beginTransaction(SPISettings)+0xae>
    bee6:	1c53      	adds	r3, r2, #1
    bee8:	e7e9      	b.n	bebe <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    beea:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    beee:	6a41      	ldr	r1, [r0, #36]	; 0x24
    bef0:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    bef4:	400b      	ands	r3, r1
    bef6:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    bef8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    befc:	e7c5      	b.n	be8a <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    befe:	68c4      	ldr	r4, [r0, #12]
    bf00:	e7e2      	b.n	bec8 <SPIClass::beginTransaction(SPISettings)+0xb0>
    bf02:	2400      	movs	r4, #0
    bf04:	e7df      	b.n	bec6 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    bf06:	2b02      	cmp	r3, #2
    bf08:	d9fb      	bls.n	bf02 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    bf0a:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    bf0c:	085a      	lsrs	r2, r3, #1
    bf0e:	0214      	lsls	r4, r2, #8
    bf10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    bf14:	431c      	orrs	r4, r3
    bf16:	e7d6      	b.n	bec6 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    bf18:	461a      	mov	r2, r3
    bf1a:	e7e4      	b.n	bee6 <SPIClass::beginTransaction(SPISettings)+0xce>
    bf1c:	400fc000 	.word	0x400fc000
    bf20:	20000d54 	.word	0x20000d54
    bf24:	007f7fff 	.word	0x007f7fff

0000bf28 <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    bf28:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    bf2a:	4603      	mov	r3, r0
    bf2c:	f853 0b04 	ldr.w	r0, [r3], #4
    bf30:	e893 0006 	ldmia.w	r3, {r1, r2}
    bf34:	f7ff ff70 	bl	be18 <SPIClass::beginTransaction(SPISettings)>
}
    bf38:	bd08      	pop	{r3, pc}
    bf3a:	bf00      	nop

0000bf3c <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    bf3c:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    bf3e:	7cd3      	ldrb	r3, [r2, #19]
    bf40:	b313      	cbz	r3, bf88 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    bf42:	07d8      	lsls	r0, r3, #31
    bf44:	d504      	bpl.n	bf50 <SdSpiArduinoDriver::deactivate()+0x14>
    bf46:	6a90      	ldr	r0, [r2, #40]	; 0x28
    bf48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf4c:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    bf50:	0799      	lsls	r1, r3, #30
    bf52:	d504      	bpl.n	bf5e <SdSpiArduinoDriver::deactivate()+0x22>
    bf54:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    bf56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf5a:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    bf5e:	0758      	lsls	r0, r3, #29
    bf60:	d504      	bpl.n	bf6c <SdSpiArduinoDriver::deactivate()+0x30>
    bf62:	6b10      	ldr	r0, [r2, #48]	; 0x30
    bf64:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf68:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    bf6c:	0719      	lsls	r1, r3, #28
    bf6e:	d504      	bpl.n	bf7a <SdSpiArduinoDriver::deactivate()+0x3e>
    bf70:	6b50      	ldr	r0, [r2, #52]	; 0x34
    bf72:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bf76:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    bf7a:	06db      	lsls	r3, r3, #27
    bf7c:	d504      	bpl.n	bf88 <SdSpiArduinoDriver::deactivate()+0x4c>
    bf7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    bf80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bf84:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    bf88:	4770      	bx	lr
    bf8a:	bf00      	nop

0000bf8c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    bf8c:	6800      	ldr	r0, [r0, #0]
    bf8e:	f000 b9f9 	b.w	c384 <SPIClass::end()>
    bf92:	bf00      	nop

0000bf94 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf94:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    bf96:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bf98:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    bf9a:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bf9c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bf9e:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bfa2:	d0fb      	beq.n	bf9c <SdSpiArduinoDriver::receive()+0x8>
    bfa4:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    bfa6:	b2c0      	uxtb	r0, r0
    bfa8:	4770      	bx	lr
    bfaa:	bf00      	nop

0000bfac <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bfac:	b530      	push	{r4, r5, lr}
    bfae:	460c      	mov	r4, r1
    bfb0:	b083      	sub	sp, #12
    bfb2:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    bfb4:	21ff      	movs	r1, #255	; 0xff
    bfb6:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    bfb8:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    bfba:	f005 fc55 	bl	11868 <memset>
		transfer(buf, buf, count);
    bfbe:	6828      	ldr	r0, [r5, #0]
    bfc0:	9b01      	ldr	r3, [sp, #4]
    bfc2:	4622      	mov	r2, r4
    bfc4:	4621      	mov	r1, r4
    bfc6:	f000 f9d9 	bl	c37c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    bfca:	2000      	movs	r0, #0
    bfcc:	b003      	add	sp, #12
    bfce:	bd30      	pop	{r4, r5, pc}

0000bfd0 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bfd0:	6803      	ldr	r3, [r0, #0]
    bfd2:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    bfd4:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    bfd6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    bfd8:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    bfdc:	d0fb      	beq.n	bfd6 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    bfde:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    bfe0:	4770      	bx	lr
    bfe2:	bf00      	nop

0000bfe4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    bfe4:	1e53      	subs	r3, r2, #1
    bfe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    bfea:	b530      	push	{r4, r5, lr}
    bfec:	4614      	mov	r4, r2
    bfee:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    bff2:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    bff4:	d311      	bcc.n	c01a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    bff6:	b16a      	cbz	r2, c014 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    bff8:	6803      	ldr	r3, [r0, #0]
    bffa:	1e48      	subs	r0, r1, #1
    bffc:	6819      	ldr	r1, [r3, #0]
    bffe:	1882      	adds	r2, r0, r2
		port().TDR = data;
    c000:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    c004:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    c006:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    c008:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    c00c:	d0fb      	beq.n	c006 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    c00e:	4290      	cmp	r0, r2
    c010:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    c012:	d1f5      	bne.n	c000 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    c014:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    c018:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    c01a:	4668      	mov	r0, sp
    c01c:	f001 fb96 	bl	d74c <memcpy>
		transfer(buf, buf, count);
    c020:	466a      	mov	r2, sp
    c022:	4623      	mov	r3, r4
    c024:	6828      	ldr	r0, [r5, #0]
    c026:	4611      	mov	r1, r2
    c028:	f000 f9a8 	bl	c37c <SPIClass::transfer(void const*, void*, unsigned int)>
}
    c02c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    c030:	bd30      	pop	{r4, r5, pc}
    c032:	bf00      	nop

0000c034 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    c034:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    c036:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    c038:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    c03a:	07dc      	lsls	r4, r3, #31
    c03c:	d51d      	bpl.n	c07a <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    c03e:	4604      	mov	r4, r0
    c040:	6840      	ldr	r0, [r0, #4]
    c042:	f104 0210 	add.w	r2, r4, #16
    c046:	6803      	ldr	r3, [r0, #0]
    c048:	68e1      	ldr	r1, [r4, #12]
    c04a:	9201      	str	r2, [sp, #4]
    c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c04e:	4798      	blx	r3
    c050:	9a01      	ldr	r2, [sp, #4]
    c052:	4605      	mov	r5, r0
    c054:	b1a8      	cbz	r0, c082 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    c056:	7823      	ldrb	r3, [r4, #0]
    c058:	0799      	lsls	r1, r3, #30
    c05a:	d508      	bpl.n	c06e <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    c05c:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    c05e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    c062:	4419      	add	r1, r3
    c064:	6803      	ldr	r3, [r0, #0]
    c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c068:	4798      	blx	r3
    c06a:	b150      	cbz	r0, c082 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    c06c:	7823      	ldrb	r3, [r4, #0]
    c06e:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    c072:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    c074:	7023      	strb	r3, [r4, #0]
}
    c076:	b003      	add	sp, #12
    c078:	bd30      	pop	{r4, r5, pc}
  return true;
    c07a:	2501      	movs	r5, #1
}
    c07c:	4628      	mov	r0, r5
    c07e:	b003      	add	sp, #12
    c080:	bd30      	pop	{r4, r5, pc}
  return false;
    c082:	2500      	movs	r5, #0
}
    c084:	4628      	mov	r0, r5
    c086:	b003      	add	sp, #12
    c088:	bd30      	pop	{r4, r5, pc}
    c08a:	bf00      	nop

0000c08c <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    c08e:	6843      	ldr	r3, [r0, #4]
    c090:	b30b      	cbz	r3, c0d6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    c092:	68c3      	ldr	r3, [r0, #12]
    c094:	4604      	mov	r4, r0
    c096:	460f      	mov	r7, r1
    c098:	4615      	mov	r5, r2
    c09a:	428b      	cmp	r3, r1
    c09c:	d106      	bne.n	c0ac <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    c09e:	f810 3b10 	ldrb.w	r3, [r0], #16
    c0a2:	f005 0503 	and.w	r5, r5, #3
    c0a6:	432b      	orrs	r3, r5
    c0a8:	7023      	strb	r3, [r4, #0]
}
    c0aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    c0ac:	f7ff ffc2 	bl	c034 <FsCache::sync()>
    c0b0:	b188      	cbz	r0, c0d6 <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    c0b2:	076b      	lsls	r3, r5, #29
    c0b4:	d505      	bpl.n	c0c2 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    c0b6:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    c0ba:	4630      	mov	r0, r6
    m_sector = sector;
    c0bc:	2300      	movs	r3, #0
    c0be:	60e7      	str	r7, [r4, #12]
    c0c0:	e7ef      	b.n	c0a2 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    c0c2:	6860      	ldr	r0, [r4, #4]
    c0c4:	f104 0610 	add.w	r6, r4, #16
    c0c8:	4639      	mov	r1, r7
    c0ca:	6803      	ldr	r3, [r0, #0]
    c0cc:	4632      	mov	r2, r6
    c0ce:	691b      	ldr	r3, [r3, #16]
    c0d0:	4798      	blx	r3
    c0d2:	2800      	cmp	r0, #0
    c0d4:	d1f1      	bne.n	c0ba <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    c0d6:	2000      	movs	r0, #0
}
    c0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0da:	bf00      	nop

0000c0dc <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    c0dc:	b510      	push	{r4, lr}
    c0de:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    c0e0:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    c0e2:	b082      	sub	sp, #8
  if (ls) {
    c0e4:	b118      	cbz	r0, c0ee <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    c0e6:	2300      	movs	r3, #0
    c0e8:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    c0ea:	b002      	add	sp, #8
    c0ec:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    c0ee:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    c0f2:	428b      	cmp	r3, r1
    c0f4:	d2f9      	bcs.n	c0ea <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    c0f6:	aa01      	add	r2, sp, #4
    c0f8:	4618      	mov	r0, r3
    c0fa:	f000 f867 	bl	c1cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    c0fe:	b180      	cbz	r0, c122 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    c100:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    c102:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    c104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    c108:	d201      	bcs.n	c10e <FsName::get16()+0x32>
      rtn = cp;
    c10a:	b298      	uxth	r0, r3
    c10c:	e7ed      	b.n	c0ea <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    c10e:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    c110:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    c114:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    c118:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    c11c:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    c11e:	81a3      	strh	r3, [r4, #12]
    c120:	e7e3      	b.n	c0ea <FsName::get16()+0xe>
  return 0XFFFF;
    c122:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c126:	e7e0      	b.n	c0ea <FsName::get16()+0xe>

0000c128 <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    c128:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    c12a:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    c12e:	d805      	bhi.n	c13c <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    c130:	b112      	cbz	r2, c138 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    c132:	460a      	mov	r2, r1
    c134:	f802 0b01 	strb.w	r0, [r2], #1
  }
    c138:	4610      	mov	r0, r2
    c13a:	4770      	bx	lr
    } else if (cp < 0X800) {
    c13c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    c140:	d20f      	bcs.n	c162 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    c142:	2a01      	cmp	r2, #1
    c144:	d940      	bls.n	c1c8 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    c146:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c14a:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    c14e:	460a      	mov	r2, r1
    c150:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c154:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    c158:	f802 0b02 	strb.w	r0, [r2], #2
  }
    c15c:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c15e:	704b      	strb	r3, [r1, #1]
  }
    c160:	4770      	bx	lr
    } else if (cp < 0X10000) {
    c162:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    c166:	d216      	bcs.n	c196 <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    c168:	2a02      	cmp	r2, #2
    c16a:	d92d      	bls.n	c1c8 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c16c:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c170:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    c174:	1cca      	adds	r2, r1, #3
    c176:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    c17a:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c17c:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c180:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c184:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c186:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c18a:	7048      	strb	r0, [r1, #1]
  }
    c18c:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    c18e:	f881 e000 	strb.w	lr, [r1]
  }
    c192:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    c196:	2a03      	cmp	r2, #3
    c198:	d916      	bls.n	c1c8 <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c19a:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c19e:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c1a2:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c1aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c1ae:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c1b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1b6:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    c1ba:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1bc:	1d0a      	adds	r2, r1, #4
    c1be:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    c1c0:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    c1c4:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    c1c6:	e7b7      	b.n	c138 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    c1c8:	2200      	movs	r2, #0
    c1ca:	e7b5      	b.n	c138 <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000c1cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    c1cc:	4288      	cmp	r0, r1
    c1ce:	d23d      	bcs.n	c24c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    c1d0:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    c1d2:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    c1d4:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    c1d8:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    c1da:	2800      	cmp	r0, #0
    c1dc:	da2d      	bge.n	c23a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    c1de:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    c1e2:	28c0      	cmp	r0, #192	; 0xc0
    c1e4:	d034      	beq.n	c250 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    c1e6:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    c1ea:	28e0      	cmp	r0, #224	; 0xe0
    c1ec:	d034      	beq.n	c258 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    c1ee:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    c1f2:	28f0      	cmp	r0, #240	; 0xf0
    c1f4:	d126      	bne.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    c1f6:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    c1fa:	2004      	movs	r0, #4
    if ((str + n) > end) {
    c1fc:	4418      	add	r0, r3
    c1fe:	4288      	cmp	r0, r1
    c200:	d820      	bhi.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    c202:	3301      	adds	r3, #1
      ch = str[i];
    c204:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    c208:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    c20c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    c210:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    c214:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    c218:	d114      	bne.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    c21a:	4283      	cmp	r3, r0
    c21c:	d1f2      	bne.n	c204 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    c21e:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    c222:	4b0f      	ldr	r3, [pc, #60]	; (c260 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    c224:	4299      	cmp	r1, r3
    c226:	d80d      	bhi.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    c228:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    c22c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    c230:	d308      	bcc.n	c244 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    c232:	6014      	str	r4, [r2, #0]
  }
    c234:	f85d 4b04 	ldr.w	r4, [sp], #4
    c238:	4770      	bx	lr
      return str + 1;
    c23a:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    c23c:	6014      	str	r4, [r2, #0]
  }
    c23e:	f85d 4b04 	ldr.w	r4, [sp], #4
    c242:	4770      	bx	lr
      return nullptr;
    c244:	2000      	movs	r0, #0
  }
    c246:	f85d 4b04 	ldr.w	r4, [sp], #4
    c24a:	4770      	bx	lr
      return nullptr;
    c24c:	2000      	movs	r0, #0
  }
    c24e:	4770      	bx	lr
      cp = ch & 0X1F;
    c250:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    c254:	2002      	movs	r0, #2
    c256:	e7d1      	b.n	c1fc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    c258:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    c25c:	2003      	movs	r0, #3
    c25e:	e7cd      	b.n	c1fc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    c260:	0010ff7f 	.word	0x0010ff7f

0000c264 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    c264:	287e      	cmp	r0, #126	; 0x7e
    c266:	d93e      	bls.n	c2e6 <toUpcase(unsigned short)+0x82>
  size_t right = size;
    c268:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    c26c:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    c26e:	b430      	push	{r4, r5}
    c270:	4c28      	ldr	r4, [pc, #160]	; (c314 <toUpcase(unsigned short)+0xb0>)
    c272:	e004      	b.n	c27e <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    c274:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    c278:	4282      	cmp	r2, r0
    c27a:	d820      	bhi.n	c2be <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    c27c:	460b      	mov	r3, r1
  while (right - left > 1) {
    c27e:	ebac 0203 	sub.w	r2, ip, r3
    c282:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    c284:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    c288:	d8f4      	bhi.n	c274 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    c28a:	b29b      	uxth	r3, r3
    c28c:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c290:	4290      	cmp	r0, r2
    c292:	d216      	bcs.n	c2c2 <toUpcase(unsigned short)+0x5e>
    c294:	244b      	movs	r4, #75	; 0x4b
    c296:	2300      	movs	r3, #0
    c298:	4d1f      	ldr	r5, [pc, #124]	; (c318 <toUpcase(unsigned short)+0xb4>)
    c29a:	e004      	b.n	c2a6 <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    c29c:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    c2a0:	4282      	cmp	r2, r0
    c2a2:	d81e      	bhi.n	c2e2 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    c2a4:	460b      	mov	r3, r1
  while (right - left > 1) {
    c2a6:	1ae2      	subs	r2, r4, r3
    c2a8:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    c2aa:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    c2ae:	d8f5      	bhi.n	c29c <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    c2b0:	b29b      	uxth	r3, r3
    c2b2:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    c2b6:	4282      	cmp	r2, r0
    c2b8:	d01f      	beq.n	c2fa <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    c2ba:	bc30      	pop	{r4, r5}
    c2bc:	4770      	bx	lr
    mid = left + (right - left)/2;
    c2be:	468c      	mov	ip, r1
    c2c0:	e7dd      	b.n	c27e <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    c2c2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    c2c6:	1a82      	subs	r2, r0, r2
    c2c8:	78e3      	ldrb	r3, [r4, #3]
    c2ca:	429a      	cmp	r2, r3
    c2cc:	dae2      	bge.n	c294 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    c2ce:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    c2d2:	2b01      	cmp	r3, #1
    c2d4:	d016      	beq.n	c304 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    c2d6:	b1d3      	cbz	r3, c30e <toUpcase(unsigned short)+0xaa>
    c2d8:	b29b      	uxth	r3, r3
    c2da:	4403      	add	r3, r0
}
    c2dc:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    c2de:	b298      	uxth	r0, r3
}
    c2e0:	4770      	bx	lr
    mid = left + (right - left)/2;
    c2e2:	460c      	mov	r4, r1
    c2e4:	e7df      	b.n	c2a6 <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    c2e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    c2ea:	2b19      	cmp	r3, #25
    c2ec:	bf8c      	ite	hi
    c2ee:	2300      	movhi	r3, #0
    c2f0:	2301      	movls	r3, #1
    c2f2:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    c2f6:	b298      	uxth	r0, r3
}
    c2f8:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    c2fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    c2fe:	8868      	ldrh	r0, [r5, #2]
}
    c300:	bc30      	pop	{r4, r5}
    c302:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    c304:	f002 0201 	and.w	r2, r2, #1
    c308:	1a83      	subs	r3, r0, r2
    c30a:	b298      	uxth	r0, r3
    c30c:	e7d5      	b.n	c2ba <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    c30e:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    c312:	e7e2      	b.n	c2da <toUpcase(unsigned short)+0x76>
    c314:	200009f4 	.word	0x200009f4
    c318:	20000814 	.word	0x20000814

0000c31c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    c31c:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c31e:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c320:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    c324:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c326:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    c328:	b1a3      	cbz	r3, c354 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c32a:	b321      	cbz	r1, c376 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    c32c:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    c330:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c332:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c334:	6f25      	ldr	r5, [r4, #112]	; 0x70
    c336:	07af      	lsls	r7, r5, #30
    c338:	d407      	bmi.n	c34a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    c33a:	4615      	mov	r5, r2
				count_read--;
    c33c:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c33e:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    c340:	b11a      	cbz	r2, c34a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c342:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    c346:	462a      	mov	r2, r5
    c348:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    c34a:	6965      	ldr	r5, [r4, #20]
    c34c:	07ed      	lsls	r5, r5, #31
    c34e:	d5f1      	bpl.n	c334 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    c350:	2b00      	cmp	r3, #0
    c352:	d1ea      	bne.n	c32a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    c354:	b16e      	cbz	r6, c372 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    c356:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c358:	6f19      	ldr	r1, [r3, #112]	; 0x70
    c35a:	0789      	lsls	r1, r1, #30
    c35c:	d4fa      	bmi.n	c354 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    c35e:	4611      	mov	r1, r2
			count_read--;
    c360:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    c364:	2a00      	cmp	r2, #0
    c366:	d0f5      	beq.n	c354 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c368:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    c36c:	460a      	mov	r2, r1
	while (count_read) {
    c36e:	2e00      	cmp	r6, #0
    c370:	d1f1      	bne.n	c356 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    c372:	bcf0      	pop	{r4, r5, r6, r7}
    c374:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c376:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    c37a:	e7d9      	b.n	c330 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000c37c <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    c37c:	b10b      	cbz	r3, c382 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    c37e:	f7ff bfcd 	b.w	c31c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    c382:	4770      	bx	lr

0000c384 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c384:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    c386:	e9d3 1200 	ldrd	r1, r2, [r3]
    c38a:	6809      	ldr	r1, [r1, #0]
    c38c:	4211      	tst	r1, r2
    c38e:	d100      	bne.n	c392 <SPIClass::end()+0xe>
    c390:	4770      	bx	lr
void SPIClass::end() {
    c392:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c394:	6802      	ldr	r2, [r0, #0]
    c396:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    c398:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c39a:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    c39c:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c39e:	7c22      	ldrb	r2, [r4, #16]
    c3a0:	4413      	add	r3, r2
    c3a2:	7c18      	ldrb	r0, [r3, #16]
    c3a4:	f000 ff76 	bl	d294 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    c3a8:	7c62      	ldrb	r2, [r4, #17]
    c3aa:	6863      	ldr	r3, [r4, #4]
    c3ac:	2105      	movs	r1, #5
    c3ae:	4413      	add	r3, r2
    c3b0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    c3b4:	f000 ff6e 	bl	d294 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c3b8:	6863      	ldr	r3, [r4, #4]
    c3ba:	7ca2      	ldrb	r2, [r4, #18]
    c3bc:	2105      	movs	r1, #5
    c3be:	4413      	add	r3, r2
	}
}
    c3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c3c4:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    c3c8:	f000 bf64 	b.w	d294 <pinMode>

0000c3cc <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    c3cc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    c3d0:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    c3d4:	1a10      	subs	r0, r2, r0
    c3d6:	4770      	bx	lr

0000c3d8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    c3d8:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    c3dc:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    c3e0:	429a      	cmp	r2, r3
    c3e2:	d902      	bls.n	c3ea <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    c3e4:	4418      	add	r0, r3
    c3e6:	7e80      	ldrb	r0, [r0, #26]
    c3e8:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    c3ea:	f04f 30ff 	mov.w	r0, #4294967295
	}
    c3ee:	4770      	bx	lr

0000c3f0 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    c3f0:	4770      	bx	lr
    c3f2:	bf00      	nop

0000c3f4 <TwoWire::write(unsigned char)>:
{
    c3f4:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    c3f6:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    c3fa:	b178      	cbz	r0, c41c <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    c3fc:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    c400:	2a88      	cmp	r2, #136	; 0x88
    c402:	d903      	bls.n	c40c <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    c404:	2201      	movs	r2, #1
			return 0;
    c406:	2000      	movs	r0, #0
    c408:	605a      	str	r2, [r3, #4]
    c40a:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    c40c:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    c410:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    c412:	441a      	add	r2, r3
    c414:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    c418:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    c41c:	4770      	bx	lr
    c41e:	bf00      	nop

0000c420 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    c420:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    c422:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    c426:	b90c      	cbnz	r4, c42c <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    c428:	4620      	mov	r0, r4
    c42a:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    c42c:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    c430:	4605      	mov	r5, r0
    c432:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    c436:	42a2      	cmp	r2, r4
    c438:	d80d      	bhi.n	c456 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    c43a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    c43c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    c440:	4622      	mov	r2, r4
    c442:	4418      	add	r0, r3
    c444:	f001 f982 	bl	d74c <memcpy>
		txBufferLength += quantity;
    c448:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    c44c:	4620      	mov	r0, r4
		txBufferLength += quantity;
    c44e:	4423      	add	r3, r4
    c450:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    c454:	bd38      	pop	{r3, r4, r5, pc}
    c456:	2201      	movs	r2, #1
    c458:	6042      	str	r2, [r0, #4]
    c45a:	e7ef      	b.n	c43c <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000c45c <TwoWire::force_clock()>:
{
    c45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c460:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c464:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c466:	7e01      	ldrb	r1, [r0, #24]
{
    c468:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c46a:	7e43      	ldrb	r3, [r0, #25]
{
    c46c:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c46e:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    c472:	4a38      	ldr	r2, [pc, #224]	; (c554 <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c474:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c478:	4f37      	ldr	r7, [pc, #220]	; (c558 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    c47a:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    c47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    c480:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    c484:	0109      	lsls	r1, r1, #4
    c486:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    c488:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    c48c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c490:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    c494:	011b      	lsls	r3, r3, #4
    c496:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    c498:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    c49a:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    c49e:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    c4a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c4a6:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    c4a8:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    c4aa:	492c      	ldr	r1, [pc, #176]	; (c55c <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c4ac:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    c4ae:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    c4b2:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    c4b4:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    c4b8:	686b      	ldr	r3, [r5, #4]
    c4ba:	4333      	orrs	r3, r6
    c4bc:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c4be:	4b28      	ldr	r3, [pc, #160]	; (c560 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    c4c0:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c4c2:	683a      	ldr	r2, [r7, #0]
    c4c4:	fba3 3202 	umull	r3, r2, r3, r2
    c4c8:	0c92      	lsrs	r2, r2, #18
    c4ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    c4ce:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c4d0:	684b      	ldr	r3, [r1, #4]
    c4d2:	1b1b      	subs	r3, r3, r4
    c4d4:	429a      	cmp	r2, r3
    c4d6:	d8fb      	bhi.n	c4d0 <TwoWire::force_clock()+0x74>
    c4d8:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    c4dc:	4a1f      	ldr	r2, [pc, #124]	; (c55c <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c4de:	f8df e080 	ldr.w	lr, [pc, #128]	; c560 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    c4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    c4e6:	4203      	tst	r3, r0
    c4e8:	d002      	beq.n	c4f0 <TwoWire::force_clock()+0x94>
    c4ea:	68ab      	ldr	r3, [r5, #8]
    c4ec:	4233      	tst	r3, r6
    c4ee:	d12f      	bne.n	c550 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    c4f0:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    c4f4:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c4f6:	6839      	ldr	r1, [r7, #0]
    c4f8:	fbae 3101 	umull	r3, r1, lr, r1
    c4fc:	0c89      	lsrs	r1, r1, #18
    c4fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c502:	6853      	ldr	r3, [r2, #4]
    c504:	1b1b      	subs	r3, r3, r4
    c506:	4299      	cmp	r1, r3
    c508:	d8fb      	bhi.n	c502 <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    c50a:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    c50e:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    c510:	6839      	ldr	r1, [r7, #0]
    c512:	fbae 3101 	umull	r3, r1, lr, r1
    c516:	0c89      	lsrs	r1, r1, #18
    c518:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    c51c:	6853      	ldr	r3, [r2, #4]
    c51e:	1b1b      	subs	r3, r3, r4
    c520:	4299      	cmp	r1, r3
    c522:	d8fb      	bhi.n	c51c <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    c524:	f1bc 0c01 	subs.w	ip, ip, #1
    c528:	d1db      	bne.n	c4e2 <TwoWire::force_clock()+0x86>
	bool ret = false;
    c52a:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    c52c:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    c530:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    c532:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    c536:	68db      	ldr	r3, [r3, #12]
    c538:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    c53c:	f899 3019 	ldrb.w	r3, [r9, #25]
    c540:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    c544:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    c548:	6013      	str	r3, [r2, #0]
}
    c54a:	b003      	add	sp, #12
    c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    c550:	2001      	movs	r0, #1
    c552:	e7eb      	b.n	c52c <TwoWire::force_clock()+0xd0>
    c554:	20007b88 	.word	0x20007b88
    c558:	20008ab8 	.word	0x20008ab8
    c55c:	e0001000 	.word	0xe0001000
    c560:	431bde83 	.word	0x431bde83

0000c564 <TwoWire::wait_idle()>:
	return systick_millis_count;
    c564:	4a0e      	ldr	r2, [pc, #56]	; (c5a0 <TwoWire::wait_idle()+0x3c>)
{
    c566:	b510      	push	{r4, lr}
    c568:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c56a:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c56c:	e005      	b.n	c57a <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    c56e:	01db      	lsls	r3, r3, #7
    c570:	d407      	bmi.n	c582 <TwoWire::wait_idle()+0x1e>
    c572:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    c574:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    c576:	2b10      	cmp	r3, #16
    c578:	d808      	bhi.n	c58c <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    c57a:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    c57c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    c580:	d1f5      	bne.n	c56e <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    c582:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    c586:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    c588:	6163      	str	r3, [r4, #20]
}
    c58a:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    c58c:	f7ff ff66 	bl	c45c <TwoWire::force_clock()>
    c590:	2800      	cmp	r0, #0
    c592:	d0fa      	beq.n	c58a <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    c594:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    c598:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    c59a:	6163      	str	r3, [r4, #20]
	return true;
    c59c:	e7f5      	b.n	c58a <TwoWire::wait_idle()+0x26>
    c59e:	bf00      	nop
    c5a0:	2002935c 	.word	0x2002935c

0000c5a4 <TwoWire::endTransmission(unsigned char)>:
{
    c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    c5a8:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c5ac:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    c5ae:	f1ba 0f00 	cmp.w	sl, #0
    c5b2:	d04f      	beq.n	c654 <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    c5b4:	4681      	mov	r9, r0
    c5b6:	4688      	mov	r8, r1
    c5b8:	f7ff ffd4 	bl	c564 <TwoWire::wait_idle()>
    c5bc:	2800      	cmp	r0, #0
    c5be:	d049      	beq.n	c654 <TwoWire::endTransmission(unsigned char)+0xb0>
    c5c0:	4e37      	ldr	r6, [pc, #220]	; (c6a0 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    c5c2:	2400      	movs	r4, #0
    c5c4:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c5c6:	e018      	b.n	c5fa <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c5c8:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    c5ca:	0519      	lsls	r1, r3, #20
    c5cc:	d451      	bmi.n	c672 <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    c5ce:	04da      	lsls	r2, r3, #19
    c5d0:	d455      	bmi.n	c67e <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    c5d2:	0558      	lsls	r0, r3, #21
    c5d4:	d459      	bmi.n	c68a <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    c5d6:	0499      	lsls	r1, r3, #18
    c5d8:	d441      	bmi.n	c65e <TwoWire::endTransmission(unsigned char)+0xba>
    c5da:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    c5dc:	1bd2      	subs	r2, r2, r7
    c5de:	2a32      	cmp	r2, #50	; 0x32
    c5e0:	d83d      	bhi.n	c65e <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    c5e2:	4554      	cmp	r4, sl
    c5e4:	d907      	bls.n	c5f6 <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    c5e6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    c5e8:	0752      	lsls	r2, r2, #29
    c5ea:	d104      	bne.n	c5f6 <TwoWire::endTransmission(unsigned char)+0x52>
    c5ec:	059b      	lsls	r3, r3, #22
    c5ee:	d455      	bmi.n	c69c <TwoWire::endTransmission(unsigned char)+0xf8>
    c5f0:	f1b8 0f00 	cmp.w	r8, #0
    c5f4:	d052      	beq.n	c69c <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    c5f6:	f002 fea7 	bl	f348 <yield>
		if (tx_index <= tx_len) {
    c5fa:	4554      	cmp	r4, sl
    c5fc:	d8e4      	bhi.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    c5fe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    c600:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    c602:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    c606:	d4df      	bmi.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
    c608:	e013      	b.n	c632 <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c60a:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    c60e:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    c610:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    c616:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    c618:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    c61a:	d01e      	beq.n	c65a <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    c61c:	458a      	cmp	sl, r1
				fifo_used++;
    c61e:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c622:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    c626:	d90e      	bls.n	c646 <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c628:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    c62c:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c62e:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    c630:	d0ca      	beq.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    c632:	2101      	movs	r1, #1
				if (tx_index == 0) {
    c634:	2c00      	cmp	r4, #0
    c636:	d0e8      	beq.n	c60a <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c638:	4621      	mov	r1, r4
				fifo_used++;
    c63a:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c63c:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    c63e:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    c640:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    c644:	d8f0      	bhi.n	c628 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    c646:	f1b8 0f00 	cmp.w	r8, #0
    c64a:	d0bd      	beq.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
    c64c:	f44f 7300 	mov.w	r3, #512	; 0x200
    c650:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    c652:	e7b9      	b.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    c654:	2004      	movs	r0, #4
}
    c656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    c65a:	2401      	movs	r4, #1
    c65c:	e7b4      	b.n	c5c8 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c65e:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c660:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    c664:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c666:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c66a:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c66c:	662a      	str	r2, [r5, #96]	; 0x60
}
    c66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c672:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    c674:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c676:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c67a:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    c67c:	e7eb      	b.n	c656 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c67e:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    c680:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c682:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c686:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    c688:	e7e5      	b.n	c656 <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c68a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    c68c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    c690:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c692:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c696:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    c698:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    c69a:	e7dc      	b.n	c656 <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    c69c:	2000      	movs	r0, #0
    c69e:	e7da      	b.n	c656 <TwoWire::endTransmission(unsigned char)+0xb2>
    c6a0:	2002935c 	.word	0x2002935c

0000c6a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    c6a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6a8:	4683      	mov	fp, r0
    c6aa:	460c      	mov	r4, r1
    c6ac:	4615      	mov	r5, r2
    c6ae:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c6b0:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    c6b4:	f7ff ff56 	bl	c564 <TwoWire::wait_idle()>
    c6b8:	2800      	cmp	r0, #0
    c6ba:	f000 809e 	beq.w	c7fa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    c6be:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    c6c0:	2d01      	cmp	r5, #1
    c6c2:	f8df 813c 	ldr.w	r8, [pc, #316]	; c800 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c6c6:	f240 4601 	movw	r6, #1025	; 0x401
    c6ca:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    c6cc:	f04f 0100 	mov.w	r1, #0
    c6d0:	bf38      	it	cc
    c6d2:	2501      	movcc	r5, #1
    c6d4:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    c6d8:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c6da:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    c6dc:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    c6e0:	e020      	b.n	c724 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    c6e2:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    c6e6:	2b87      	cmp	r3, #135	; 0x87
    c6e8:	d93f      	bls.n	c76a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c6ea:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    c6ee:	0510      	lsls	r0, r2, #20
    c6f0:	d45a      	bmi.n	c7a8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    c6f2:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    c6f6:	d170      	bne.n	c7da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    c6f8:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    c6fc:	eba3 0309 	sub.w	r3, r3, r9
    c700:	2b32      	cmp	r3, #50	; 0x32
    c702:	d86a      	bhi.n	c7da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    c704:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    c708:	42ab      	cmp	r3, r5
    c70a:	d309      	bcc.n	c720 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    c70c:	2c02      	cmp	r4, #2
    c70e:	d907      	bls.n	c720 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    c710:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    c714:	0759      	lsls	r1, r3, #29
    c716:	d103      	bne.n	c720 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    c718:	0593      	lsls	r3, r2, #22
    c71a:	d44b      	bmi.n	c7b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    c71c:	2f00      	cmp	r7, #0
    c71e:	d049      	beq.n	c7b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    c720:	f002 fe12 	bl	f348 <yield>
		if (tx_state < 3) {
    c724:	2c02      	cmp	r4, #2
    c726:	d8dc      	bhi.n	c6e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    c728:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    c72c:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    c730:	075b      	lsls	r3, r3, #29
    c732:	d4d6      	bmi.n	c6e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    c734:	1e68      	subs	r0, r5, #1
    c736:	4422      	add	r2, r4
    c738:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    c73c:	b94c      	cbnz	r4, c752 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    c73e:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    c742:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    c744:	1b13      	subs	r3, r2, r4
    c746:	2b03      	cmp	r3, #3
    c748:	d8cb      	bhi.n	c6e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    c74a:	2c02      	cmp	r4, #2
    c74c:	d8c9      	bhi.n	c6e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    c74e:	2c00      	cmp	r4, #0
    c750:	d0f5      	beq.n	c73e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    c752:	2c01      	cmp	r4, #1
    c754:	d037      	beq.n	c7c6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    c756:	b11f      	cbz	r7, c760 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    c758:	f44f 7300 	mov.w	r3, #512	; 0x200
    c75c:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    c760:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    c764:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    c766:	2b87      	cmp	r3, #135	; 0x87
    c768:	d8bf      	bhi.n	c6ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c76a:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c76e:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c772:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c776:	d0b8      	beq.n	c6ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    c778:	1c59      	adds	r1, r3, #1
    c77a:	449c      	add	ip, r3
    c77c:	3319      	adds	r3, #25
    c77e:	b2c9      	uxtb	r1, r1
    c780:	fa5f fc8c 	uxtb.w	ip, ip
    c784:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    c788:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c78c:	1c4a      	adds	r2, r1, #1
    c78e:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    c790:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c794:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    c796:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    c79a:	d0a6      	beq.n	c6ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    c79c:	2989      	cmp	r1, #137	; 0x89
    c79e:	d1f3      	bne.n	c788 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    c7a0:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    c7a4:	0510      	lsls	r0, r2, #20
    c7a6:	d5a4      	bpl.n	c6f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c7a8:	f8da 3010 	ldr.w	r3, [sl, #16]
    c7ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c7b0:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c7b4:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c7b8:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    c7bc:	d106      	bne.n	c7cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    c7be:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    c7c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    c7c6:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    c7ca:	e7ba      	b.n	c742 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c7cc:	f8da 3010 	ldr.w	r3, [sl, #16]
    c7d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c7d4:	f8ca 3010 	str.w	r3, [sl, #16]
    c7d8:	e7f1      	b.n	c7be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c7da:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c7de:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    c7e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    c7e6:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    c7ea:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    c7ee:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    c7f2:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    c7f6:	d0e2      	beq.n	c7be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    c7f8:	e7e8      	b.n	c7cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    c7fa:	2004      	movs	r0, #4
}
    c7fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c800:	2002935c 	.word	0x2002935c

0000c804 <TwoWire::isr()>:
{
    c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c806:	6906      	ldr	r6, [r0, #16]
{
    c808:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    c80a:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    c80e:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    c812:	d001      	beq.n	c818 <TwoWire::isr()+0x14>
    c814:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    c818:	07a8      	lsls	r0, r5, #30
    c81a:	d50b      	bpl.n	c834 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    c81c:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    c820:	0411      	lsls	r1, r2, #16
    c822:	d53d      	bpl.n	c8a0 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    c824:	2300      	movs	r3, #0
    c826:	2101      	movs	r1, #1
    c828:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    c82c:	4423      	add	r3, r4
    c82e:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    c832:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    c834:	07ea      	lsls	r2, r5, #31
    c836:	d510      	bpl.n	c85a <TwoWire::isr()+0x56>
		if (!transmitting) {
    c838:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    c83c:	b1f7      	cbz	r7, c87c <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    c83e:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    c842:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    c846:	42bb      	cmp	r3, r7
    c848:	d926      	bls.n	c898 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    c84a:	1c7b      	adds	r3, r7, #1
    c84c:	4427      	add	r7, r4
    c84e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    c852:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    c856:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    c85a:	05ab      	lsls	r3, r5, #22
    c85c:	d50d      	bpl.n	c87a <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    c85e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    c862:	b118      	cbz	r0, c86c <TwoWire::isr()+0x68>
    c864:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c868:	b103      	cbz	r3, c86c <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    c86a:	4798      	blx	r3
		rxBufferIndex = 0;
    c86c:	2300      	movs	r3, #0
    c86e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    c872:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    c876:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    c87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    c87c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    c880:	b103      	cbz	r3, c884 <TwoWire::isr()+0x80>
				(*user_onRequest)();
    c882:	4798      	blx	r3
			txBufferIndex = 0;
    c884:	2300      	movs	r3, #0
    c886:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    c88a:	2301      	movs	r3, #1
    c88c:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    c890:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    c894:	42bb      	cmp	r3, r7
    c896:	d8d8      	bhi.n	c84a <TwoWire::isr()+0x46>
			port->STDR = 0;
    c898:	2300      	movs	r3, #0
    c89a:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    c89e:	e7dc      	b.n	c85a <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    c8a0:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    c8a4:	2b87      	cmp	r3, #135	; 0x87
    c8a6:	d8c5      	bhi.n	c834 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    c8a8:	1c59      	adds	r1, r3, #1
    c8aa:	b2c9      	uxtb	r1, r1
    c8ac:	e7be      	b.n	c82c <TwoWire::isr()+0x28>
    c8ae:	bf00      	nop

0000c8b0 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    c8b0:	4801      	ldr	r0, [pc, #4]	; (c8b8 <lpi2c1_isr()+0x8>)
    c8b2:	f7ff bfa7 	b.w	c804 <TwoWire::isr()>
    c8b6:	bf00      	nop
    c8b8:	20008acc 	.word	0x20008acc

0000c8bc <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    c8bc:	4801      	ldr	r0, [pc, #4]	; (c8c4 <lpi2c3_isr()+0x8>)
    c8be:	f7ff bfa1 	b.w	c804 <TwoWire::isr()>
    c8c2:	bf00      	nop
    c8c4:	20008c0c 	.word	0x20008c0c

0000c8c8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    c8c8:	4801      	ldr	r0, [pc, #4]	; (c8d0 <lpi2c4_isr()+0x8>)
    c8ca:	f7ff bf9b 	b.w	c804 <TwoWire::isr()>
    c8ce:	bf00      	nop
    c8d0:	20008d4c 	.word	0x20008d4c

0000c8d4 <TwoWire::setClock(unsigned long)>:
{
    c8d4:	b410      	push	{r4}
	if (frequency < 400000) {
    c8d6:	4c14      	ldr	r4, [pc, #80]	; (c928 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    c8d8:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    c8da:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    c8dc:	42a1      	cmp	r1, r4
	port->MCR = 0;
    c8de:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    c8e0:	d814      	bhi.n	c90c <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    c8e2:	4c12      	ldr	r4, [pc, #72]	; (c92c <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    c8e4:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    c8e6:	4912      	ldr	r1, [pc, #72]	; (c930 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    c8e8:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    c8ec:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    c8ee:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    c8f0:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    c8f2:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    c8f4:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    c8f6:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    c8f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    c8fc:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    c8fe:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    c900:	6218      	str	r0, [r3, #32]
}
    c902:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    c906:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    c908:	611a      	str	r2, [r3, #16]
}
    c90a:	4770      	bx	lr
	} else if (frequency < 1000000) {
    c90c:	4809      	ldr	r0, [pc, #36]	; (c934 <TwoWire::setClock(unsigned long)+0x60>)
    c90e:	4281      	cmp	r1, r0
    c910:	d907      	bls.n	c922 <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    c912:	4c09      	ldr	r4, [pc, #36]	; (c938 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    c914:	4809      	ldr	r0, [pc, #36]	; (c93c <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    c916:	490a      	ldr	r1, [pc, #40]	; (c940 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    c918:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    c91a:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    c91c:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    c91e:	62d9      	str	r1, [r3, #44]	; 0x2c
    c920:	e7e8      	b.n	c8f4 <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    c922:	4c08      	ldr	r4, [pc, #32]	; (c944 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    c924:	4808      	ldr	r0, [pc, #32]	; (c948 <TwoWire::setClock(unsigned long)+0x74>)
    c926:	e7f6      	b.n	c916 <TwoWire::setClock(unsigned long)+0x42>
    c928:	00061a7f 	.word	0x00061a7f
    c92c:	1928373b 	.word	0x1928373b
    c930:	05050bb8 	.word	0x05050bb8
    c934:	000f423f 	.word	0x000f423f
    c938:	0407090a 	.word	0x0407090a
    c93c:	01010960 	.word	0x01010960
    c940:	00057f00 	.word	0x00057f00
    c944:	0c121a1c 	.word	0x0c121a1c
    c948:	02020e10 	.word	0x02020e10

0000c94c <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c94c:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    c94e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c950:	b921      	cbnz	r1, c95c <DMAChannel::begin(bool)+0x10>
    c952:	6803      	ldr	r3, [r0, #0]
    c954:	b113      	cbz	r3, c95c <DMAChannel::begin(bool)+0x10>
    c956:	7902      	ldrb	r2, [r0, #4]
    c958:	2a0f      	cmp	r2, #15
    c95a:	d93b      	bls.n	c9d4 <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    c95c:	4c24      	ldr	r4, [pc, #144]	; (c9f0 <DMAChannel::begin(bool)+0xa4>)
    c95e:	8821      	ldrh	r1, [r4, #0]
{
    c960:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c962:	fa41 f203 	asr.w	r2, r1, r3
    c966:	f012 0201 	ands.w	r2, r2, #1
    c96a:	d008      	beq.n	c97e <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    c96c:	3301      	adds	r3, #1
    c96e:	2b10      	cmp	r3, #16
    c970:	d1f7      	bne.n	c962 <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    c972:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    c974:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c976:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c978:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c97a:	bc30      	pop	{r4, r5}
    c97c:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    c97e:	f04f 0c01 	mov.w	ip, #1
    c982:	fa0c fc03 	lsl.w	ip, ip, r3
    c986:	ea41 010c 	orr.w	r1, r1, ip
    c98a:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    c98c:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c98e:	4919      	ldr	r1, [pc, #100]	; (c9f4 <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    c990:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c994:	4c18      	ldr	r4, [pc, #96]	; (c9f8 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c996:	4419      	add	r1, r3
	channel = ch;
    c998:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c99c:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c99e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    c9a0:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    c9a4:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c9a6:	f240 4482 	movw	r4, #1154	; 0x482
    c9aa:	4914      	ldr	r1, [pc, #80]	; (c9fc <DMAChannel::begin(bool)+0xb0>)
    c9ac:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    c9ae:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    c9b2:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    c9b6:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    c9ba:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c9be:	6003      	str	r3, [r0, #0]
}
    c9c0:	bc30      	pop	{r4, r5}
	*p++ = 0;
    c9c2:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    c9c6:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c9ca:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c9ce:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    c9d2:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    c9d4:	4c06      	ldr	r4, [pc, #24]	; (c9f0 <DMAChannel::begin(bool)+0xa4>)
    c9d6:	8821      	ldrh	r1, [r4, #0]
    c9d8:	fa41 f502 	asr.w	r5, r1, r2
    c9dc:	07ed      	lsls	r5, r5, #31
    c9de:	d5bf      	bpl.n	c960 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c9e0:	4d04      	ldr	r5, [pc, #16]	; (c9f4 <DMAChannel::begin(bool)+0xa8>)
    c9e2:	4415      	add	r5, r2
    c9e4:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    c9e8:	d1ba      	bne.n	c960 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    c9ea:	b662      	cpsie	i
		return;
    c9ec:	e7c5      	b.n	c97a <DMAChannel::begin(bool)+0x2e>
    c9ee:	bf00      	nop
    c9f0:	2002938e 	.word	0x2002938e
    c9f4:	02007480 	.word	0x02007480
    c9f8:	400fc000 	.word	0x400fc000
    c9fc:	400e8000 	.word	0x400e8000

0000ca00 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    ca00:	7903      	ldrb	r3, [r0, #4]
    ca02:	2b0f      	cmp	r3, #15
    ca04:	d811      	bhi.n	ca2a <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    ca06:	4a09      	ldr	r2, [pc, #36]	; (ca2c <DMAChannel::release()+0x2c>)
    ca08:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    ca0a:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    ca0c:	4908      	ldr	r1, [pc, #32]	; (ca30 <DMAChannel::release()+0x30>)
    ca0e:	2201      	movs	r2, #1
    ca10:	f890 c004 	ldrb.w	ip, [r0, #4]
    ca14:	880b      	ldrh	r3, [r1, #0]
    ca16:	fa02 f20c 	lsl.w	r2, r2, ip
    ca1a:	ea23 0302 	bic.w	r3, r3, r2
    ca1e:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    ca20:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    ca22:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    ca24:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    ca26:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    ca28:	6003      	str	r3, [r0, #0]
}
    ca2a:	4770      	bx	lr
    ca2c:	400e8000 	.word	0x400e8000
    ca30:	2002938e 	.word	0x2002938e

0000ca34 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    ca34:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ca36:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ca3a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ca3c:	4c0c      	ldr	r4, [pc, #48]	; (ca70 <EventResponder::runFromInterrupt()+0x3c>)
    ca3e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    ca40:	b180      	cbz	r0, ca64 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ca42:	4e0c      	ldr	r6, [pc, #48]	; (ca74 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    ca44:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    ca46:	6943      	ldr	r3, [r0, #20]
    ca48:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    ca4a:	b173      	cbz	r3, ca6a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    ca4c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ca4e:	b902      	cbnz	r2, ca52 <EventResponder::runFromInterrupt()+0x1e>
    ca50:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    ca52:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    ca54:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    ca56:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ca58:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ca5c:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    ca5e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    ca60:	2800      	cmp	r0, #0
    ca62:	d1f0      	bne.n	ca46 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    ca64:	b902      	cbnz	r2, ca68 <EventResponder::runFromInterrupt()+0x34>
    ca66:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    ca68:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    ca6a:	6033      	str	r3, [r6, #0]
    ca6c:	e7ef      	b.n	ca4e <EventResponder::runFromInterrupt()+0x1a>
    ca6e:	bf00      	nop
    ca70:	200284ec 	.word	0x200284ec
    ca74:	200284e8 	.word	0x200284e8

0000ca78 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    ca78:	f7ff bfdc 	b.w	ca34 <EventResponder::runFromInterrupt()>

0000ca7c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    ca7c:	4904      	ldr	r1, [pc, #16]	; (ca90 <systick_isr+0x14>)
	systick_millis_count++;
    ca7e:	4a05      	ldr	r2, [pc, #20]	; (ca94 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    ca80:	6849      	ldr	r1, [r1, #4]
    ca82:	4b05      	ldr	r3, [pc, #20]	; (ca98 <systick_isr+0x1c>)
    ca84:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    ca86:	6813      	ldr	r3, [r2, #0]
    ca88:	3301      	adds	r3, #1
    ca8a:	6013      	str	r3, [r2, #0]
}
    ca8c:	4770      	bx	lr
    ca8e:	bf00      	nop
    ca90:	e0001000 	.word	0xe0001000
    ca94:	2002935c 	.word	0x2002935c
    ca98:	20029358 	.word	0x20029358

0000ca9c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ca9c:	4608      	mov	r0, r1
    ca9e:	f002 bbbf 	b.w	f220 <usb_serial_putchar>
    caa2:	bf00      	nop

0000caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    caa4:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    caa6:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    caa8:	bf08      	it	eq
    caaa:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    caac:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    caae:	b391      	cbz	r1, cb16 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    cab0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    cab4:	e001      	b.n	caba <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    cab6:	fa5f fe86 	uxtb.w	lr, r6
    caba:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    cabe:	fbb1 f5f2 	udiv	r5, r1, r2
    cac2:	fb02 1415 	mls	r4, r2, r5, r1
    cac6:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    caca:	2c09      	cmp	r4, #9
    cacc:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    cad0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    cad4:	bf98      	it	ls
    cad6:	fa5f f48c 	uxtbls.w	r4, ip
    cada:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    cade:	bf88      	it	hi
    cae0:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    cae2:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cae4:	44ec      	add	ip, sp
			n /= base;
    cae6:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cae8:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    caec:	d2e3      	bcs.n	cab6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    caee:	b14b      	cbz	r3, cb04 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    caf0:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    caf4:	222d      	movs	r2, #45	; 0x2d
		i--;
    caf6:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    cafa:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    cafe:	446b      	add	r3, sp
    cb00:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    cb04:	6803      	ldr	r3, [r0, #0]
    cb06:	a901      	add	r1, sp, #4
    cb08:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    cb0c:	685b      	ldr	r3, [r3, #4]
    cb0e:	4471      	add	r1, lr
    cb10:	4798      	blx	r3
}
    cb12:	b00a      	add	sp, #40	; 0x28
    cb14:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    cb16:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    cb18:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    cb1c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    cb20:	e7e5      	b.n	caee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    cb22:	bf00      	nop

0000cb24 <Print::print(long)>:
	if (n < 0) {
    cb24:	2900      	cmp	r1, #0
    cb26:	db03      	blt.n	cb30 <Print::print(long)+0xc>
	uint8_t sign=0;
    cb28:	2300      	movs	r3, #0
	if (base == 0) {
    cb2a:	220a      	movs	r2, #10
    cb2c:	f7ff bfba 	b.w	caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    cb30:	4249      	negs	r1, r1
		sign = '-';
    cb32:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    cb34:	220a      	movs	r2, #10
    cb36:	f7ff bfb5 	b.w	caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cb3a:	bf00      	nop

0000cb3c <Print::println()>:
{
    cb3c:	b500      	push	{lr}
	return write(buf, 2);
    cb3e:	6803      	ldr	r3, [r0, #0]
{
    cb40:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    cb42:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    cb46:	2202      	movs	r2, #2
    cb48:	a901      	add	r1, sp, #4
    cb4a:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    cb4c:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    cb50:	4798      	blx	r3
}
    cb52:	b003      	add	sp, #12
    cb54:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb58 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cb58:	4b05      	ldr	r3, [pc, #20]	; (cb70 <_write+0x18>)
    cb5a:	2802      	cmp	r0, #2
    cb5c:	bf88      	it	hi
    cb5e:	4603      	movhi	r3, r0
{
    cb60:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cb62:	681c      	ldr	r4, [r3, #0]
    cb64:	4618      	mov	r0, r3
    cb66:	6863      	ldr	r3, [r4, #4]
}
    cb68:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cb6c:	4718      	bx	r3
    cb6e:	bf00      	nop
    cb70:	20008abc 	.word	0x20008abc

0000cb74 <Print::printf(char const*, ...)>:
{
    cb74:	b40e      	push	{r1, r2, r3}
    cb76:	b500      	push	{lr}
    cb78:	b082      	sub	sp, #8
    cb7a:	aa03      	add	r2, sp, #12
    cb7c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    cb80:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    cb82:	f004 fd85 	bl	11690 <vdprintf>
}
    cb86:	b002      	add	sp, #8
    cb88:	f85d eb04 	ldr.w	lr, [sp], #4
    cb8c:	b003      	add	sp, #12
    cb8e:	4770      	bx	lr

0000cb90 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    cb90:	b95a      	cbnz	r2, cbaa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    cb92:	6803      	ldr	r3, [r0, #0]
    cb94:	b2c9      	uxtb	r1, r1
    cb96:	4a07      	ldr	r2, [pc, #28]	; (cbb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    cb98:	681b      	ldr	r3, [r3, #0]
    cb9a:	4293      	cmp	r3, r2
{
    cb9c:	b500      	push	{lr}
    cb9e:	d106      	bne.n	cbae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    cba0:	4608      	mov	r0, r1
}
    cba2:	f85d eb04 	ldr.w	lr, [sp], #4
    cba6:	f002 bb3b 	b.w	f220 <usb_serial_putchar>
    cbaa:	f7ff bf7b 	b.w	caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cbae:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    cbb2:	4718      	bx	r3
    cbb4:	0000ca9d 	.word	0x0000ca9d

0000cbb8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    cbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cbbc:	b093      	sub	sp, #76	; 0x4c
    cbbe:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    cbc2:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    cbc6:	2f01      	cmp	r7, #1
    cbc8:	d944      	bls.n	cc54 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    cbca:	461c      	mov	r4, r3
	if (n == 0) {
    cbcc:	4680      	mov	r8, r0
    cbce:	4615      	mov	r5, r2
    cbd0:	ea52 0304 	orrs.w	r3, r2, r4
    cbd4:	d039      	beq.n	cc4a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    cbd6:	2641      	movs	r6, #65	; 0x41
    cbd8:	e001      	b.n	cbde <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    cbda:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    cbde:	4621      	mov	r1, r4
    cbe0:	4628      	mov	r0, r5
    cbe2:	463a      	mov	r2, r7
    cbe4:	2300      	movs	r3, #0
    cbe6:	f002 fd41 	bl	f66c <__aeabi_uldivmod>
    cbea:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cbee:	f106 0248 	add.w	r2, r6, #72	; 0x48
    cbf2:	f1bc 0f09 	cmp.w	ip, #9
    cbf6:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    cbfa:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    cbfe:	446a      	add	r2, sp
    cc00:	b2db      	uxtb	r3, r3
    cc02:	bf98      	it	ls
    cc04:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    cc08:	42bd      	cmp	r5, r7
			i--;
    cc0a:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    cc0e:	4605      	mov	r5, r0
			if (n == 0) break;
    cc10:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc14:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    cc18:	460c      	mov	r4, r1
			if (n == 0) break;
    cc1a:	d2de      	bcs.n	cbda <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    cc1c:	f1b9 0f00 	cmp.w	r9, #0
    cc20:	d007      	beq.n	cc32 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    cc22:	3e01      	subs	r6, #1
		buf[i] = '-';
    cc24:	222d      	movs	r2, #45	; 0x2d
		i--;
    cc26:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    cc28:	f106 0348 	add.w	r3, r6, #72	; 0x48
    cc2c:	446b      	add	r3, sp
    cc2e:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    cc32:	f8d8 3000 	ldr.w	r3, [r8]
    cc36:	a901      	add	r1, sp, #4
    cc38:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    cc3c:	4640      	mov	r0, r8
    cc3e:	685b      	ldr	r3, [r3, #4]
    cc40:	4431      	add	r1, r6
    cc42:	4798      	blx	r3
}
    cc44:	b013      	add	sp, #76	; 0x4c
    cc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    cc4a:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    cc4c:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    cc4e:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    cc52:	e7e3      	b.n	cc1c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    cc54:	2000      	movs	r0, #0
}
    cc56:	b013      	add	sp, #76	; 0x4c
    cc58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cc5c:	0000      	movs	r0, r0
	...

0000cc60 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    cc60:	eeb4 0b40 	vcmp.f64	d0, d0
{
    cc64:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    cc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    cc6a:	4605      	mov	r5, r0
    cc6c:	ed2d 8b02 	vpush	{d8}
    cc70:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    cc72:	d67c      	bvs.n	cd6e <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    cc74:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    cc78:	ed9f 6b47 	vldr	d6, [pc, #284]	; cd98 <Print::printFloat(double, unsigned char)+0x138>
    cc7c:	eeb4 7b46 	vcmp.f64	d7, d6
    cc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc84:	dc6b      	bgt.n	cd5e <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cc86:	ed9f 7b46 	vldr	d7, [pc, #280]	; cda0 <Print::printFloat(double, unsigned char)+0x140>
    cc8a:	eeb4 0bc7 	vcmpe.f64	d0, d7
    cc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cc92:	dc5a      	bgt.n	cd4a <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cc94:	ed9f 7b44 	vldr	d7, [pc, #272]	; cda8 <Print::printFloat(double, unsigned char)+0x148>
    cc98:	eeb4 0bc7 	vcmpe.f64	d0, d7
    cc9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cca0:	d453      	bmi.n	cd4a <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    cca2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    cca6:	460c      	mov	r4, r1
    cca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ccac:	d45b      	bmi.n	cd66 <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    ccae:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    ccb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    ccb4:	2c00      	cmp	r4, #0
    ccb6:	d05e      	beq.n	cd76 <Print::printFloat(double, unsigned char)+0x116>
    ccb8:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    ccbc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; cdb0 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    ccc0:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    ccc4:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    ccc8:	fa5f f28c 	uxtb.w	r2, ip
    cccc:	42a2      	cmp	r2, r4
    ccce:	d3f7      	bcc.n	ccc0 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    ccd0:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    ccd4:	220a      	movs	r2, #10
    ccd6:	4628      	mov	r0, r5
    ccd8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    ccdc:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    cce0:	ee17 1a90 	vmov	r1, s15
    cce4:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    cce8:	f7ff fedc 	bl	caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    ccec:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    ccee:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    ccf2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    ccf6:	4606      	mov	r6, r0
		buf[0] = '.';
    ccf8:	bf28      	it	cs
    ccfa:	240f      	movcs	r4, #15
    ccfc:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    cd00:	f10d 0309 	add.w	r3, sp, #9
    cd04:	aa02      	add	r2, sp, #8
    cd06:	1e61      	subs	r1, r4, #1
    cd08:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    cd0c:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    cd10:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    cd14:	edcd 7a01 	vstr	s15, [sp, #4]
    cd18:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    cd1c:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    cd20:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    cd22:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    cd26:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    cd2a:	4291      	cmp	r1, r2
			remainder -= n; 
    cd2c:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    cd30:	d1ec      	bne.n	cd0c <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    cd32:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    cd34:	3401      	adds	r4, #1
		count += write(buf, count);
    cd36:	a902      	add	r1, sp, #8
    cd38:	4628      	mov	r0, r5
    cd3a:	685b      	ldr	r3, [r3, #4]
    cd3c:	b2e2      	uxtb	r2, r4
    cd3e:	4798      	blx	r3
	}
	return count;
}
    cd40:	4630      	mov	r0, r6
    cd42:	b006      	add	sp, #24
    cd44:	ecbd 8b02 	vpop	{d8}
    cd48:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    cd4a:	682b      	ldr	r3, [r5, #0]
    cd4c:	2203      	movs	r2, #3
    cd4e:	491a      	ldr	r1, [pc, #104]	; (cdb8 <Print::printFloat(double, unsigned char)+0x158>)
    cd50:	685b      	ldr	r3, [r3, #4]
    cd52:	b006      	add	sp, #24
    cd54:	ecbd 8b02 	vpop	{d8}
    cd58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cd5c:	4718      	bx	r3
    cd5e:	6803      	ldr	r3, [r0, #0]
    cd60:	2203      	movs	r2, #3
    cd62:	4916      	ldr	r1, [pc, #88]	; (cdbc <Print::printFloat(double, unsigned char)+0x15c>)
    cd64:	e7f4      	b.n	cd50 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    cd66:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    cd6a:	2301      	movs	r3, #1
    cd6c:	e7a0      	b.n	ccb0 <Print::printFloat(double, unsigned char)+0x50>
    cd6e:	6803      	ldr	r3, [r0, #0]
    cd70:	2203      	movs	r2, #3
    cd72:	4913      	ldr	r1, [pc, #76]	; (cdc0 <Print::printFloat(double, unsigned char)+0x160>)
    cd74:	e7ec      	b.n	cd50 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    cd76:	ee30 0b07 	vadd.f64	d0, d0, d7
    cd7a:	220a      	movs	r2, #10
    cd7c:	4628      	mov	r0, r5
    cd7e:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    cd82:	ee17 1a90 	vmov	r1, s15
}
    cd86:	b006      	add	sp, #24
    cd88:	ecbd 8b02 	vpop	{d8}
    cd8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cd90:	f7ff be88 	b.w	caa4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cd94:	f3af 8000 	nop.w
    cd98:	ffffffff 	.word	0xffffffff
    cd9c:	7fefffff 	.word	0x7fefffff
    cda0:	e0000000 	.word	0xe0000000
    cda4:	41efffff 	.word	0x41efffff
    cda8:	e0000000 	.word	0xe0000000
    cdac:	c1efffff 	.word	0xc1efffff
    cdb0:	9999999a 	.word	0x9999999a
    cdb4:	3fb99999 	.word	0x3fb99999
    cdb8:	20000b70 	.word	0x20000b70
    cdbc:	20000b6c 	.word	0x20000b6c
    cdc0:	20000b68 	.word	0x20000b68

0000cdc4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    cdc4:	f002 ba1c 	b.w	f200 <usb_serial_getchar>

0000cdc8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    cdc8:	f002 b9b4 	b.w	f134 <usb_serial_peekchar>

0000cdcc <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    cdcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    cdd0:	b392      	cbz	r2, ce38 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    cdd2:	4617      	mov	r7, r2
    cdd4:	fab3 f283 	clz	r2, r3
    cdd8:	0952      	lsrs	r2, r2, #5
    cdda:	b36b      	cbz	r3, ce38 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    cddc:	f1b3 0801 	subs.w	r8, r3, #1
    cde0:	d025      	beq.n	ce2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    cde2:	eb07 0a08 	add.w	sl, r7, r8
    cde6:	4683      	mov	fp, r0
    cde8:	4689      	mov	r9, r1
	size_t index = 0;
    cdea:	4690      	mov	r8, r2
    cdec:	4c17      	ldr	r4, [pc, #92]	; (ce4c <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    cdee:	4e18      	ldr	r6, [pc, #96]	; (ce50 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    cdf0:	6825      	ldr	r5, [r4, #0]
    cdf2:	e00b      	b.n	ce0c <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    cdf4:	f002 fa04 	bl	f200 <usb_serial_getchar>
    if (c >= 0) return c;
    cdf8:	2800      	cmp	r0, #0
    cdfa:	da10      	bge.n	ce1e <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    cdfc:	f002 faa4 	bl	f348 <yield>
    ce00:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    ce02:	f8db 2008 	ldr.w	r2, [fp, #8]
    ce06:	1b5b      	subs	r3, r3, r5
    ce08:	4293      	cmp	r3, r2
    ce0a:	d21a      	bcs.n	ce42 <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    ce0c:	f8db 3000 	ldr.w	r3, [fp]
    ce10:	695b      	ldr	r3, [r3, #20]
    ce12:	42b3      	cmp	r3, r6
    ce14:	d0ee      	beq.n	cdf4 <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    ce16:	4658      	mov	r0, fp
    ce18:	4798      	blx	r3
    if (c >= 0) return c;
    ce1a:	2800      	cmp	r0, #0
    ce1c:	dbee      	blt.n	cdfc <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    ce1e:	4548      	cmp	r0, r9
    ce20:	d005      	beq.n	ce2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    ce22:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    ce26:	45ba      	cmp	sl, r7
		index++;
    ce28:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    ce2c:	d1e0      	bne.n	cdf0 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    ce2e:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    ce30:	4640      	mov	r0, r8
	*buffer = 0;
    ce32:	703b      	strb	r3, [r7, #0]
}
    ce34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    ce38:	f04f 0800 	mov.w	r8, #0
}
    ce3c:	4640      	mov	r0, r8
    ce3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    ce42:	2301      	movs	r3, #1
    ce44:	f88b 300c 	strb.w	r3, [fp, #12]
    ce48:	e7f1      	b.n	ce2e <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    ce4a:	bf00      	nop
    ce4c:	2002935c 	.word	0x2002935c
    ce50:	0000cdc5 	.word	0x0000cdc5

0000ce54 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    ce54:	49a2      	ldr	r1, [pc, #648]	; (d0e0 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ce56:	4ba3      	ldr	r3, [pc, #652]	; (d0e4 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    ce58:	4288      	cmp	r0, r1
{
    ce5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    ce5e:	4ca2      	ldr	r4, [pc, #648]	; (d0e8 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    ce60:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    ce62:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    ce64:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    ce68:	d91b      	bls.n	cea2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    ce6a:	4ba0      	ldr	r3, [pc, #640]	; (d0ec <set_arm_clock+0x298>)
    ce6c:	4298      	cmp	r0, r3
    ce6e:	f240 8102 	bls.w	d076 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ce72:	1ac3      	subs	r3, r0, r3
    ce74:	499e      	ldr	r1, [pc, #632]	; (d0f0 <set_arm_clock+0x29c>)
    ce76:	0a1b      	lsrs	r3, r3, #8
    ce78:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ce7c:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    ce80:	09db      	lsrs	r3, r3, #7
    ce82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ce86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    ce8a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ce8e:	428b      	cmp	r3, r1
    ce90:	bf28      	it	cs
    ce92:	460b      	movcs	r3, r1
    ce94:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    ce98:	4b96      	ldr	r3, [pc, #600]	; (d0f4 <set_arm_clock+0x2a0>)
    ce9a:	fba3 3707 	umull	r3, r7, r3, r7
    ce9e:	08ff      	lsrs	r7, r7, #3
    cea0:	e004      	b.n	ceac <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    cea2:	4f95      	ldr	r7, [pc, #596]	; (d0f8 <set_arm_clock+0x2a4>)
    cea4:	42b8      	cmp	r0, r7
    cea6:	bf8c      	ite	hi
    cea8:	270e      	movhi	r7, #14
    ceaa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ceac:	498d      	ldr	r1, [pc, #564]	; (d0e4 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ceae:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ceb2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    ceb6:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    ceb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    cebc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    cec0:	d20c      	bcs.n	cedc <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    cec2:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    cec6:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ceca:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    cece:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ced2:	680b      	ldr	r3, [r1, #0]
    ced4:	2b00      	cmp	r3, #0
    ced6:	dafc      	bge.n	ced2 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ced8:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    cedc:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    cee0:	d124      	bne.n	cf2c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    cee2:	4986      	ldr	r1, [pc, #536]	; (d0fc <set_arm_clock+0x2a8>)
    cee4:	690c      	ldr	r4, [r1, #16]
    cee6:	4986      	ldr	r1, [pc, #536]	; (d100 <set_arm_clock+0x2ac>)
    cee8:	43a1      	bics	r1, r4
    ceea:	f000 80ea 	beq.w	d0c2 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    ceee:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    cef2:	4634      	mov	r4, r6
    cef4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    cef8:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    cefc:	d004      	beq.n	cf08 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    cefe:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    cf02:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    cf04:	4b77      	ldr	r3, [pc, #476]	; (d0e4 <set_arm_clock+0x290>)
    cf06:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    cf08:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    cf0c:	d007      	beq.n	cf1e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    cf0e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    cf12:	4974      	ldr	r1, [pc, #464]	; (d0e4 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    cf14:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    cf16:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    cf18:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    cf1a:	071a      	lsls	r2, r3, #28
    cf1c:	d4fc      	bmi.n	cf18 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    cf1e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    cf22:	4a70      	ldr	r2, [pc, #448]	; (d0e4 <set_arm_clock+0x290>)
    cf24:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    cf26:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cf28:	069b      	lsls	r3, r3, #26
    cf2a:	d4fc      	bmi.n	cf26 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    cf2c:	4c75      	ldr	r4, [pc, #468]	; (d104 <set_arm_clock+0x2b0>)
    cf2e:	42a0      	cmp	r0, r4
    cf30:	f200 80ce 	bhi.w	d0d0 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    cf34:	f04f 0c01 	mov.w	ip, #1
    cf38:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    cf3a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    cf3c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    cf40:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    cf44:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cf48:	42a2      	cmp	r2, r4
    cf4a:	d818      	bhi.n	cf7e <set_arm_clock+0x12a>
		if (div_arm < 8) {
    cf4c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    cf50:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    cf54:	f040 808d 	bne.w	d072 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    cf58:	f1bc 0f04 	cmp.w	ip, #4
    cf5c:	f200 8091 	bhi.w	d082 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    cf60:	180a      	adds	r2, r1, r0
    cf62:	42a2      	cmp	r2, r4
    cf64:	f200 80a4 	bhi.w	d0b0 <set_arm_clock+0x25c>
    cf68:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    cf6c:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    cf6e:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cf72:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    cf76:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    cf7a:	42a2      	cmp	r2, r4
    cf7c:	d9e6      	bls.n	cf4c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cf7e:	f10c 31ff 	add.w	r1, ip, #4294967295
    cf82:	028c      	lsls	r4, r1, #10
    cf84:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    cf88:	485f      	ldr	r0, [pc, #380]	; (d108 <set_arm_clock+0x2b4>)
    cf8a:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    cf8c:	4a5f      	ldr	r2, [pc, #380]	; (d10c <set_arm_clock+0x2b8>)
    cf8e:	4290      	cmp	r0, r2
    cf90:	d97f      	bls.n	d092 <set_arm_clock+0x23e>
    cf92:	f8df a1a4 	ldr.w	sl, [pc, #420]	; d138 <set_arm_clock+0x2e4>
    cf96:	226c      	movs	r2, #108	; 0x6c
    cf98:	485d      	ldr	r0, [pc, #372]	; (d110 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cf9a:	4d58      	ldr	r5, [pc, #352]	; (d0fc <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    cf9c:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cfa0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    cfa4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    cfa8:	f8df c190 	ldr.w	ip, [pc, #400]	; d13c <set_arm_clock+0x2e8>
    cfac:	ea0e 0c0c 	and.w	ip, lr, ip
    cfb0:	45d4      	cmp	ip, sl
    cfb2:	d009      	beq.n	cfc8 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    cfb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    cfb8:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    cfbc:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    cfc0:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    cfc2:	682a      	ldr	r2, [r5, #0]
    cfc4:	2a00      	cmp	r2, #0
    cfc6:	dafc      	bge.n	cfc2 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    cfc8:	4a46      	ldr	r2, [pc, #280]	; (d0e4 <set_arm_clock+0x290>)
    cfca:	6915      	ldr	r5, [r2, #16]
    cfcc:	f005 0507 	and.w	r5, r5, #7
    cfd0:	429d      	cmp	r5, r3
    cfd2:	d003      	beq.n	cfdc <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    cfd4:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    cfd6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cfd8:	03dd      	lsls	r5, r3, #15
    cfda:	d4fc      	bmi.n	cfd6 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    cfdc:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    cfe0:	d009      	beq.n	cff6 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    cfe2:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cfe6:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    cfea:	4a3e      	ldr	r2, [pc, #248]	; (d0e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    cfec:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    cfee:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    cff0:	6c93      	ldr	r3, [r2, #72]	; 0x48
    cff2:	0799      	lsls	r1, r3, #30
    cff4:	d4fc      	bmi.n	cff0 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cff6:	4947      	ldr	r1, [pc, #284]	; (d114 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    cff8:	4a47      	ldr	r2, [pc, #284]	; (d118 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    cffa:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    cffc:	4291      	cmp	r1, r2
    cffe:	d83c      	bhi.n	d07a <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    d000:	4b46      	ldr	r3, [pc, #280]	; (d11c <set_arm_clock+0x2c8>)
    d002:	09c9      	lsrs	r1, r1, #7
    d004:	fba3 3101 	umull	r3, r1, r3, r1
    d008:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    d00a:	1e4b      	subs	r3, r1, #1
    d00c:	021b      	lsls	r3, r3, #8
    d00e:	ea86 0203 	eor.w	r2, r6, r3
    d012:	f412 7f40 	tst.w	r2, #768	; 0x300
    d016:	d006      	beq.n	d026 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    d018:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d01c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    d020:	4a30      	ldr	r2, [pc, #192]	; (d0e4 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    d022:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    d024:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    d026:	4a2f      	ldr	r2, [pc, #188]	; (d0e4 <set_arm_clock+0x290>)
    d028:	6953      	ldr	r3, [r2, #20]
    d02a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    d02e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    d030:	6c93      	ldr	r3, [r2, #72]	; 0x48
    d032:	069b      	lsls	r3, r3, #26
    d034:	d4fc      	bmi.n	d030 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d036:	4b3a      	ldr	r3, [pc, #232]	; (d120 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d038:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d03a:	fba3 2300 	umull	r2, r3, r3, r0
    d03e:	f04f 32ff 	mov.w	r2, #4294967295
    d042:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    d046:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d04a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    d04e:	4a35      	ldr	r2, [pc, #212]	; (d124 <set_arm_clock+0x2d0>)
    d050:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    d052:	4a35      	ldr	r2, [pc, #212]	; (d128 <set_arm_clock+0x2d4>)
    d054:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    d056:	4a35      	ldr	r2, [pc, #212]	; (d12c <set_arm_clock+0x2d8>)
    d058:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    d05a:	d208      	bcs.n	d06e <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    d05c:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    d060:	4a21      	ldr	r2, [pc, #132]	; (d0e8 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    d062:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    d066:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    d068:	6813      	ldr	r3, [r2, #0]
    d06a:	2b00      	cmp	r3, #0
    d06c:	dafc      	bge.n	d068 <set_arm_clock+0x214>
	}

	return frequency;
}
    d06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d072:	4673      	mov	r3, lr
    d074:	e762      	b.n	cf3c <set_arm_clock+0xe8>
    d076:	2712      	movs	r7, #18
    d078:	e718      	b.n	ceac <set_arm_clock+0x58>
    d07a:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    d07e:	2104      	movs	r1, #4
    d080:	e7c5      	b.n	d00e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d082:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d086:	4820      	ldr	r0, [pc, #128]	; (d108 <set_arm_clock+0x2b4>)
    d088:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d08a:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d08c:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d08e:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d092:	4a27      	ldr	r2, [pc, #156]	; (d130 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d094:	f8df a0a8 	ldr.w	sl, [pc, #168]	; d140 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    d098:	fba2 2000 	umull	r2, r0, r2, r0
    d09c:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    d09e:	4825      	ldr	r0, [pc, #148]	; (d134 <set_arm_clock+0x2e0>)
    d0a0:	2a36      	cmp	r2, #54	; 0x36
    d0a2:	bf38      	it	cc
    d0a4:	2236      	movcc	r2, #54	; 0x36
    d0a6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    d0aa:	ea42 0a0a 	orr.w	sl, r2, sl
    d0ae:	e774      	b.n	cf9a <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    d0b0:	ea4f 248c 	mov.w	r4, ip, lsl #10
    d0b4:	2300      	movs	r3, #0
    d0b6:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    d0ba:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    d0be:	46ac      	mov	ip, r5
    d0c0:	e762      	b.n	cf88 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    d0c2:	461d      	mov	r5, r3
    d0c4:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    d0c8:	4611      	mov	r1, r2
    d0ca:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    d0ce:	e713      	b.n	cef8 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    d0d0:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    d0d2:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    d0d6:	4602      	mov	r2, r0
    d0d8:	4631      	mov	r1, r6
    d0da:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    d0dc:	46e6      	mov	lr, ip
    d0de:	e753      	b.n	cf88 <set_arm_clock+0x134>
    d0e0:	1f78a400 	.word	0x1f78a400
    d0e4:	400fc000 	.word	0x400fc000
    d0e8:	40080000 	.word	0x40080000
    d0ec:	23c34600 	.word	0x23c34600
    d0f0:	004cb223 	.word	0x004cb223
    d0f4:	51eb851f 	.word	0x51eb851f
    d0f8:	016e3600 	.word	0x016e3600
    d0fc:	400d8000 	.word	0x400d8000
    d100:	80003040 	.word	0x80003040
    d104:	269fb1ff 	.word	0x269fb1ff
    d108:	005b8d80 	.word	0x005b8d80
    d10c:	4df67eff 	.word	0x4df67eff
    d110:	4d3f6400 	.word	0x4d3f6400
    d114:	08f0d17f 	.word	0x08f0d17f
    d118:	2cb4177f 	.word	0x2cb4177f
    d11c:	00e5109f 	.word	0x00e5109f
    d120:	431bde83 	.word	0x431bde83
    d124:	20008ab8 	.word	0x20008ab8
    d128:	20008ab4 	.word	0x20008ab4
    d12c:	20028c48 	.word	0x20028c48
    d130:	165e9f81 	.word	0x165e9f81
    d134:	00b71b00 	.word	0x00b71b00
    d138:	8000206c 	.word	0x8000206c
    d13c:	8001307f 	.word	0x8001307f
    d140:	80002000 	.word	0x80002000

0000d144 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    d144:	b900      	cbnz	r0, d148 <delay+0x4>
    d146:	4770      	bx	lr
{
    d148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d14c:	2101      	movs	r1, #1
    d14e:	4681      	mov	r9, r0
    d150:	4c21      	ldr	r4, [pc, #132]	; (d1d8 <delay+0x94>)
    d152:	4d22      	ldr	r5, [pc, #136]	; (d1dc <delay+0x98>)
    d154:	4e22      	ldr	r6, [pc, #136]	; (d1e0 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d156:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    d15a:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d15c:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d15e:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    d162:	2b00      	cmp	r3, #0
    d164:	d1f7      	bne.n	d156 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d166:	491f      	ldr	r1, [pc, #124]	; (d1e4 <delay+0xa0>)
    d168:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    d16a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d16e:	f8df a078 	ldr.w	sl, [pc, #120]	; d1e8 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    d172:	1a1b      	subs	r3, r3, r0
    d174:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    d176:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d17a:	f8da 2000 	ldr.w	r2, [sl]
    d17e:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    d182:	455a      	cmp	r2, fp
    d184:	bf94      	ite	ls
    d186:	4490      	addls	r8, r2
    d188:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d18a:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    d18e:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    d190:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d192:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    d196:	2b00      	cmp	r3, #0
    d198:	d1f7      	bne.n	d18a <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d19a:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d19c:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    d1a0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    d1a2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d1a6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    d1aa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    d1ae:	bf94      	ite	ls
    d1b0:	4462      	addls	r2, ip
    d1b2:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    d1b6:	eba2 0208 	sub.w	r2, r2, r8
    d1ba:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    d1be:	d306      	bcc.n	d1ce <delay+0x8a>
			if (--msec == 0) return;
    d1c0:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    d1c4:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    d1c8:	d1df      	bne.n	d18a <delay+0x46>
}
    d1ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    d1ce:	f002 f8bb 	bl	f348 <yield>
		while ((micros() - start) >= 1000) {
    d1d2:	4904      	ldr	r1, [pc, #16]	; (d1e4 <delay+0xa0>)
    d1d4:	e7d9      	b.n	d18a <delay+0x46>
    d1d6:	bf00      	nop
    d1d8:	20029360 	.word	0x20029360
    d1dc:	2002935c 	.word	0x2002935c
    d1e0:	20029358 	.word	0x20029358
    d1e4:	e0001000 	.word	0xe0001000
    d1e8:	20028c48 	.word	0x20028c48

0000d1ec <micros>:
{
    d1ec:	b430      	push	{r4, r5}
    d1ee:	4b0f      	ldr	r3, [pc, #60]	; (d22c <micros+0x40>)
    d1f0:	f04f 0c01 	mov.w	ip, #1
    d1f4:	4d0e      	ldr	r5, [pc, #56]	; (d230 <micros+0x44>)
    d1f6:	4c0f      	ldr	r4, [pc, #60]	; (d234 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    d1f8:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    d1fc:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    d1fe:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    d200:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    d204:	2a00      	cmp	r2, #0
    d206:	d1f7      	bne.n	d1f8 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    d208:	4b0b      	ldr	r3, [pc, #44]	; (d238 <micros+0x4c>)
    d20a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d20c:	4a0b      	ldr	r2, [pc, #44]	; (d23c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    d20e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    d210:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d214:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    d216:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    d21a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    d21e:	bc30      	pop	{r4, r5}
    d220:	428a      	cmp	r2, r1
    d222:	bf94      	ite	ls
    d224:	1880      	addls	r0, r0, r2
    d226:	1840      	addhi	r0, r0, r1
    d228:	4770      	bx	lr
    d22a:	bf00      	nop
    d22c:	20029360 	.word	0x20029360
    d230:	2002935c 	.word	0x2002935c
    d234:	20029358 	.word	0x20029358
    d238:	e0001000 	.word	0xe0001000
    d23c:	20028c48 	.word	0x20028c48

0000d240 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    d240:	2836      	cmp	r0, #54	; 0x36
    d242:	d816      	bhi.n	d272 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    d244:	0102      	lsls	r2, r0, #4
    d246:	4b10      	ldr	r3, [pc, #64]	; (d288 <digitalWrite+0x48>)
    d248:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    d24c:	589b      	ldr	r3, [r3, r2]
{
    d24e:	b410      	push	{r4}
	mask = p->mask;
    d250:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    d252:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    d254:	4214      	tst	r4, r2
    d256:	d005      	beq.n	d264 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    d258:	b961      	cbnz	r1, d274 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    d25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    d262:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d264:	6883      	ldr	r3, [r0, #8]
		if (val) {
    d266:	b151      	cbz	r1, d27e <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d268:	4a08      	ldr	r2, [pc, #32]	; (d28c <digitalWrite+0x4c>)
}
    d26a:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d26e:	601a      	str	r2, [r3, #0]
}
    d270:	4770      	bx	lr
    d272:	4770      	bx	lr
    d274:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    d278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    d27c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d27e:	4a04      	ldr	r2, [pc, #16]	; (d290 <digitalWrite+0x50>)
}
    d280:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d284:	601a      	str	r2, [r3, #0]
}
    d286:	4770      	bx	lr
    d288:	20007b88 	.word	0x20007b88
    d28c:	0001f038 	.word	0x0001f038
    d290:	00013038 	.word	0x00013038

0000d294 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    d294:	2836      	cmp	r0, #54	; 0x36
    d296:	d829      	bhi.n	d2ec <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    d298:	4b16      	ldr	r3, [pc, #88]	; (d2f4 <pinMode+0x60>)
    d29a:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d29c:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    d29e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d2a2:	589a      	ldr	r2, [r3, r2]
{
    d2a4:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d2a6:	6853      	ldr	r3, [r2, #4]
    d2a8:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    d2aa:	d00e      	beq.n	d2ca <pinMode+0x36>
    d2ac:	2904      	cmp	r1, #4
    d2ae:	d00c      	beq.n	d2ca <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    d2b0:	ea23 0304 	bic.w	r3, r3, r4
    d2b4:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d2b6:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    d2b8:	b1a9      	cbz	r1, d2e6 <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    d2ba:	2902      	cmp	r1, #2
    d2bc:	d017      	beq.n	d2ee <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    d2be:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    d2c0:	bf0c      	ite	eq
    d2c2:	4a0d      	ldreq	r2, [pc, #52]	; (d2f8 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    d2c4:	4a0d      	ldrne	r2, [pc, #52]	; (d2fc <pinMode+0x68>)
    d2c6:	601a      	str	r2, [r3, #0]
    d2c8:	e007      	b.n	d2da <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d2ca:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    d2cc:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    d2ce:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d2d0:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    d2d2:	d008      	beq.n	d2e6 <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    d2d4:	f640 0238 	movw	r2, #2104	; 0x838
    d2d8:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    d2da:	6843      	ldr	r3, [r0, #4]
    d2dc:	2215      	movs	r2, #21
}
    d2de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    d2e2:	601a      	str	r2, [r3, #0]
}
    d2e4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    d2e6:	2238      	movs	r2, #56	; 0x38
    d2e8:	601a      	str	r2, [r3, #0]
    d2ea:	e7f6      	b.n	d2da <pinMode+0x46>
    d2ec:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    d2ee:	4a04      	ldr	r2, [pc, #16]	; (d300 <pinMode+0x6c>)
    d2f0:	601a      	str	r2, [r3, #0]
    d2f2:	e7f2      	b.n	d2da <pinMode+0x46>
    d2f4:	20007b88 	.word	0x20007b88
    d2f8:	00013038 	.word	0x00013038
    d2fc:	00010038 	.word	0x00010038
    d300:	0001f038 	.word	0x0001f038

0000d304 <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    d304:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d306:	4a12      	ldr	r2, [pc, #72]	; (d350 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    d308:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d30a:	4b12      	ldr	r3, [pc, #72]	; (d354 <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d30c:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d30e:	4d12      	ldr	r5, [pc, #72]	; (d358 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    d310:	4c12      	ldr	r4, [pc, #72]	; (d35c <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    d312:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d316:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    d31a:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    d31e:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    d322:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d326:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    d32a:	6953      	ldr	r3, [r2, #20]
    d32c:	07db      	lsls	r3, r3, #31
    d32e:	d5fc      	bpl.n	d32a <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d330:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    d332:	7823      	ldrb	r3, [r4, #0]
    d334:	07db      	lsls	r3, r3, #31
    d336:	d4f0      	bmi.n	d31a <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d338:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d33a:	4905      	ldr	r1, [pc, #20]	; (d350 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    d33c:	f043 0301 	orr.w	r3, r3, #1
    d340:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    d342:	680b      	ldr	r3, [r1, #0]
    d344:	07db      	lsls	r3, r3, #31
    d346:	d4fc      	bmi.n	d342 <flash_wait+0x3e>
	__enable_irq();
    d348:	b662      	cpsie	i
}
    d34a:	bc30      	pop	{r4, r5}
    d34c:	4770      	bx	lr
    d34e:	bf00      	nop
    d350:	402a8000 	.word	0x402a8000
    d354:	24010405 	.word	0x24010405
    d358:	000f0001 	.word	0x000f0001
    d35c:	402a8100 	.word	0x402a8100

0000d360 <eeprom_initialize>:
{
    d360:	b570      	push	{r4, r5, r6, lr}
    d362:	4c0e      	ldr	r4, [pc, #56]	; (d39c <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    d364:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    d368:	4e0d      	ldr	r6, [pc, #52]	; (d3a0 <eeprom_initialize+0x40>)
    d36a:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d36e:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    d372:	2100      	movs	r1, #0
    d374:	e002      	b.n	d37c <eeprom_initialize+0x1c>
		} while (p < end);
    d376:	42b3      	cmp	r3, r6
			index++;
    d378:	b281      	uxth	r1, r0
		} while (p < end);
    d37a:	d204      	bcs.n	d386 <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    d37c:	881a      	ldrh	r2, [r3, #0]
			index++;
    d37e:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    d380:	3302      	adds	r3, #2
    d382:	4572      	cmp	r2, lr
    d384:	d1f7      	bne.n	d376 <eeprom_initialize+0x16>
		sector_index[sector] = index;
    d386:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    d38a:	42ac      	cmp	r4, r5
    d38c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    d390:	d1ed      	bne.n	d36e <eeprom_initialize+0xe>
	initialized = 1;
    d392:	4b04      	ldr	r3, [pc, #16]	; (d3a4 <eeprom_initialize+0x44>)
    d394:	2201      	movs	r2, #1
    d396:	701a      	strb	r2, [r3, #0]
}
    d398:	bd70      	pop	{r4, r5, r6, pc}
    d39a:	bf00      	nop
    d39c:	20029116 	.word	0x20029116
    d3a0:	607c1000 	.word	0x607c1000
    d3a4:	200293a8 	.word	0x200293a8

0000d3a8 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    d3a8:	f241 03bb 	movw	r3, #4283	; 0x10bb
    d3ac:	4298      	cmp	r0, r3
    d3ae:	d82f      	bhi.n	d410 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    d3b0:	4b18      	ldr	r3, [pc, #96]	; (d414 <eeprom_read_byte+0x6c>)
{
    d3b2:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    d3b4:	781b      	ldrb	r3, [r3, #0]
    d3b6:	4604      	mov	r4, r0
    d3b8:	b33b      	cbz	r3, d40a <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    d3ba:	08a0      	lsrs	r0, r4, #2
    d3bc:	4b16      	ldr	r3, [pc, #88]	; (d418 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d3be:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    d3c2:	4c16      	ldr	r4, [pc, #88]	; (d41c <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d3c4:	fba3 2300 	umull	r2, r3, r3, r0
    d3c8:	1ac2      	subs	r2, r0, r3
    d3ca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d3ce:	4a14      	ldr	r2, [pc, #80]	; (d420 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    d3d0:	095b      	lsrs	r3, r3, #5
    d3d2:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    d3d6:	469c      	mov	ip, r3
    d3d8:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d3dc:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    d3e0:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    d3e2:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d3e6:	441a      	add	r2, r3
	end = p + sector_index[sector];
    d3e8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d3ec:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    d3ee:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    d3f2:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    d3f6:	d907      	bls.n	d408 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    d3f8:	881a      	ldrh	r2, [r3, #0]
    d3fa:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    d3fc:	b2d4      	uxtb	r4, r2
    d3fe:	428c      	cmp	r4, r1
    d400:	bf08      	it	eq
    d402:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    d404:	459c      	cmp	ip, r3
    d406:	d8f7      	bhi.n	d3f8 <eeprom_read_byte+0x50>
}
    d408:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    d40a:	f7ff ffa9 	bl	d360 <eeprom_initialize>
    d40e:	e7d4      	b.n	d3ba <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    d410:	20ff      	movs	r0, #255	; 0xff
}
    d412:	4770      	bx	lr
    d414:	200293a8 	.word	0x200293a8
    d418:	04104105 	.word	0x04104105
    d41c:	20029118 	.word	0x20029118
    d420:	000607c0 	.word	0x000607c0

0000d424 <eeprom_read_block>:
	while (len--) {
    d424:	b162      	cbz	r2, d440 <eeprom_read_block+0x1c>
{
    d426:	b570      	push	{r4, r5, r6, lr}
    d428:	4605      	mov	r5, r0
    d42a:	460c      	mov	r4, r1
    d42c:	188e      	adds	r6, r1, r2
		*dest++ = eeprom_read_byte(p++);
    d42e:	4620      	mov	r0, r4
    d430:	3401      	adds	r4, #1
    d432:	f7ff ffb9 	bl	d3a8 <eeprom_read_byte>
    d436:	f805 0b01 	strb.w	r0, [r5], #1
	while (len--) {
    d43a:	42b4      	cmp	r4, r6
    d43c:	d1f7      	bne.n	d42e <eeprom_read_block+0xa>
}
    d43e:	bd70      	pop	{r4, r5, r6, pc}
    d440:	4770      	bx	lr
    d442:	bf00      	nop

0000d444 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    d444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d446:	460f      	mov	r7, r1
    d448:	4616      	mov	r6, r2
	__disable_irq();
    d44a:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d44c:	4b34      	ldr	r3, [pc, #208]	; (d520 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d44e:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d452:	4a34      	ldr	r2, [pc, #208]	; (d524 <eepromemu_flash_write+0xe0>)
    d454:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d456:	2202      	movs	r2, #2
    d458:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    d45a:	2200      	movs	r2, #0
    d45c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d460:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    d464:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    d468:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    d46c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d470:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    d474:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d478:	2201      	movs	r2, #1
    d47a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d47e:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    d482:	1982      	adds	r2, r0, r6
	asm("dsb");
    d484:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    d488:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    d48c:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    d490:	3320      	adds	r3, #32
	} while (location < end_addr);
    d492:	429a      	cmp	r2, r3
    d494:	d8fa      	bhi.n	d48c <eepromemu_flash_write+0x48>
	asm("dsb");
    d496:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d49a:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d49e:	4d20      	ldr	r5, [pc, #128]	; (d520 <eepromemu_flash_write+0xdc>)
    d4a0:	696b      	ldr	r3, [r5, #20]
    d4a2:	07da      	lsls	r2, r3, #31
    d4a4:	d5fc      	bpl.n	d4a0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d4a6:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    d4a8:	491f      	ldr	r1, [pc, #124]	; (d528 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d4aa:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    d4ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d4b0:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d4b2:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    d4b6:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    d4ba:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d4be:	4c18      	ldr	r4, [pc, #96]	; (d520 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    d4c0:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    d4c4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    d4c8:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    d4cc:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d4d0:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d4d4:	4d15      	ldr	r5, [pc, #84]	; (d52c <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d4d6:	e001      	b.n	d4dc <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    d4d8:	065b      	lsls	r3, r3, #25
    d4da:	d409      	bmi.n	d4f0 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    d4dc:	6963      	ldr	r3, [r4, #20]
    d4de:	f013 0001 	ands.w	r0, r3, #1
    d4e2:	d0f9      	beq.n	d4d8 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    d4e4:	2341      	movs	r3, #65	; 0x41
    d4e6:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    d4e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    d4ec:	f7ff bf0a 	b.w	d304 <flash_wait>
			if (wrlen > 8) wrlen = 8;
    d4f0:	2e08      	cmp	r6, #8
    d4f2:	d80a      	bhi.n	d50a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    d4f4:	b136      	cbz	r6, d504 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d4f6:	4632      	mov	r2, r6
    d4f8:	4639      	mov	r1, r7
				src += wrlen;
    d4fa:	4437      	add	r7, r6
				len -= wrlen;
    d4fc:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d4fe:	4628      	mov	r0, r5
    d500:	f000 f924 	bl	d74c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    d504:	2340      	movs	r3, #64	; 0x40
    d506:	6163      	str	r3, [r4, #20]
    d508:	e7e8      	b.n	d4dc <eepromemu_flash_write+0x98>
    d50a:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    d50e:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d510:	4639      	mov	r1, r7
    d512:	4632      	mov	r2, r6
				src += wrlen;
    d514:	4437      	add	r7, r6
				len -= wrlen;
    d516:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    d518:	4628      	mov	r0, r5
    d51a:	f000 f917 	bl	d74c <memcpy>
				len -= wrlen;
    d51e:	e7f1      	b.n	d504 <eepromemu_flash_write+0xc0>
    d520:	402a8000 	.word	0x402a8000
    d524:	5af05af0 	.word	0x5af05af0
    d528:	08180432 	.word	0x08180432
    d52c:	402a8180 	.word	0x402a8180

0000d530 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    d530:	b410      	push	{r4}
	__disable_irq();
    d532:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d534:	4b28      	ldr	r3, [pc, #160]	; (d5d8 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d536:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d538:	4c28      	ldr	r4, [pc, #160]	; (d5dc <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    d53a:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    d53c:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d53e:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    d542:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    d544:	f240 4106 	movw	r1, #1030	; 0x406
    d548:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d54c:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    d54e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    d552:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    d556:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    d55a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    d55e:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d562:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    d566:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d568:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    d56c:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    d570:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    d574:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    d578:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    d57c:	4299      	cmp	r1, r3
    d57e:	bf34      	ite	cc
    d580:	2101      	movcc	r1, #1
    d582:	2180      	movcs	r1, #128	; 0x80
    d584:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    d588:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    d58a:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    d58e:	461a      	mov	r2, r3
	} while (location < end_addr);
    d590:	f103 0320 	add.w	r3, r3, #32
    d594:	d1f8      	bne.n	d588 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    d596:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d59a:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d59e:	4a0e      	ldr	r2, [pc, #56]	; (d5d8 <eepromemu_flash_erase_sector+0xa8>)
    d5a0:	6953      	ldr	r3, [r2, #20]
    d5a2:	07d9      	lsls	r1, r3, #31
    d5a4:	d5fc      	bpl.n	d5a0 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d5a6:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    d5a8:	490d      	ldr	r1, [pc, #52]	; (d5e0 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d5aa:	4b0e      	ldr	r3, [pc, #56]	; (d5e4 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d5ac:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d5ae:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    d5b0:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d5b4:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d5b8:	4907      	ldr	r1, [pc, #28]	; (d5d8 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    d5ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    d5be:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    d5c2:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    d5c6:	694b      	ldr	r3, [r1, #20]
    d5c8:	07db      	lsls	r3, r3, #31
    d5ca:	d5fc      	bpl.n	d5c6 <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d5cc:	2301      	movs	r3, #1
	flash_wait();
}
    d5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    d5d2:	614b      	str	r3, [r1, #20]
	flash_wait();
    d5d4:	f7ff be96 	b.w	d304 <flash_wait>
    d5d8:	402a8000 	.word	0x402a8000
    d5dc:	5af05af0 	.word	0x5af05af0
    d5e0:	08180420 	.word	0x08180420
    d5e4:	00fff000 	.word	0x00fff000

0000d5e8 <eeprom_write_byte>:
	if (addr > E2END) return;
    d5e8:	f241 03bb 	movw	r3, #4283	; 0x10bb
    d5ec:	4298      	cmp	r0, r3
    d5ee:	f200 8089 	bhi.w	d704 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    d5f2:	4b46      	ldr	r3, [pc, #280]	; (d70c <eeprom_write_byte+0x124>)
{
    d5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    d5f8:	781b      	ldrb	r3, [r3, #0]
{
    d5fa:	b0c2      	sub	sp, #264	; 0x108
    d5fc:	4605      	mov	r5, r0
    d5fe:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    d600:	2b00      	cmp	r3, #0
    d602:	d07c      	beq.n	d6fe <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    d604:	08ab      	lsrs	r3, r5, #2
    d606:	4e42      	ldr	r6, [pc, #264]	; (d710 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d608:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    d60c:	4f41      	ldr	r7, [pc, #260]	; (d714 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    d60e:	fba6 2603 	umull	r2, r6, r6, r3
    d612:	1b9a      	subs	r2, r3, r6
    d614:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    d618:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    d61a:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    d61e:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    d622:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d624:	4b3c      	ldr	r3, [pc, #240]	; (d718 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    d626:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d62a:	4433      	add	r3, r6
	end = p + sector_index[sector];
    d62c:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d62e:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    d632:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    d636:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    d63a:	d964      	bls.n	d706 <eeprom_write_byte+0x11e>
    d63c:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    d63e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    d642:	881a      	ldrh	r2, [r3, #0]
    d644:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    d646:	b2d1      	uxtb	r1, r2
    d648:	42a9      	cmp	r1, r5
    d64a:	bf08      	it	eq
    d64c:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    d650:	4298      	cmp	r0, r3
    d652:	d8f6      	bhi.n	d642 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    d654:	45e1      	cmp	r9, ip
    d656:	d041      	beq.n	d6dc <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    d658:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    d65c:	d341      	bcc.n	d6e2 <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    d65e:	ac02      	add	r4, sp, #8
    d660:	f44f 7280 	mov.w	r2, #256	; 0x100
    d664:	21ff      	movs	r1, #255	; 0xff
    d666:	4620      	mov	r0, r4
    d668:	f004 f8fe 	bl	11868 <memset>
		while (p < end) {
    d66c:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    d670:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    d674:	4642      	mov	r2, r8
    d676:	4298      	cmp	r0, r3
    d678:	bf34      	ite	cc
    d67a:	2001      	movcc	r0, #1
    d67c:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    d680:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    d684:	4613      	mov	r3, r2
    d686:	3202      	adds	r2, #2
    d688:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    d68a:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    d68c:	b2d9      	uxtb	r1, r3
    d68e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d692:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    d694:	d1f6      	bne.n	d684 <eeprom_write_byte+0x9c>
		buf[offset] = data;
    d696:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    d69a:	f10d 0907 	add.w	r9, sp, #7
    d69e:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    d6a2:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    d6a4:	464c      	mov	r4, r9
    d6a6:	4640      	mov	r0, r8
    d6a8:	f7ff ff42 	bl	d530 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    d6ac:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    d6b0:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    d6b4:	2202      	movs	r2, #2
    d6b6:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    d6ba:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    d6bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    d6c0:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    d6c4:	d006      	beq.n	d6d4 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    d6c6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    d6ca:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    d6cc:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    d6d0:	f7ff feb8 	bl	d444 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    d6d4:	45a2      	cmp	sl, r4
    d6d6:	d1e9      	bne.n	d6ac <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    d6d8:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    d6dc:	b042      	add	sp, #264	; 0x108
    d6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    d6e2:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    d6e6:	a902      	add	r1, sp, #8
    d6e8:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    d6ea:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    d6ec:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    d6f0:	f7ff fea8 	bl	d444 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    d6f4:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    d6f8:	b042      	add	sp, #264	; 0x108
    d6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    d6fe:	f7ff fe2f 	bl	d360 <eeprom_initialize>
    d702:	e77f      	b.n	d604 <eeprom_write_byte+0x1c>
    d704:	4770      	bx	lr
	uint8_t olddata=0xFF;
    d706:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d70a:	e7a3      	b.n	d654 <eeprom_write_byte+0x6c>
    d70c:	200293a8 	.word	0x200293a8
    d710:	04104105 	.word	0x04104105
    d714:	20029118 	.word	0x20029118
    d718:	000607c0 	.word	0x000607c0

0000d71c <eeprom_write_block>:
	while (len--) {
    d71c:	b162      	cbz	r2, d738 <eeprom_write_block+0x1c>
{
    d71e:	b570      	push	{r4, r5, r6, lr}
    d720:	4605      	mov	r5, r0
    d722:	460c      	mov	r4, r1
    d724:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    d726:	4620      	mov	r0, r4
    d728:	3401      	adds	r4, #1
    d72a:	f815 1b01 	ldrb.w	r1, [r5], #1
    d72e:	f7ff ff5b 	bl	d5e8 <eeprom_write_byte>
	while (len--) {
    d732:	42b4      	cmp	r4, r6
    d734:	d1f7      	bne.n	d726 <eeprom_write_block+0xa>
}
    d736:	bd70      	pop	{r4, r5, r6, pc}
    d738:	4770      	bx	lr
    d73a:	bf00      	nop

0000d73c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    d73c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    d73e:	f7f3 f83d 	bl	7bc <setup>
	while (1) {
		loop();
    d742:	f7f2 fd5f 	bl	204 <loop>
		yield();
    d746:	f001 fdff 	bl	f348 <yield>
	while (1) {
    d74a:	e7fa      	b.n	d742 <main+0x6>

0000d74c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    d74c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    d74e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    d752:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    d756:	d16d      	bne.n	d834 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d758:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    d75a:	d341      	bcc.n	d7e0 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d75c:	f851 3b04 	ldr.w	r3, [r1], #4
    d760:	f840 3b04 	str.w	r3, [r0], #4
    d764:	f851 3b04 	ldr.w	r3, [r1], #4
    d768:	f840 3b04 	str.w	r3, [r0], #4
    d76c:	f851 3b04 	ldr.w	r3, [r1], #4
    d770:	f840 3b04 	str.w	r3, [r0], #4
    d774:	f851 3b04 	ldr.w	r3, [r1], #4
    d778:	f840 3b04 	str.w	r3, [r0], #4
    d77c:	f851 3b04 	ldr.w	r3, [r1], #4
    d780:	f840 3b04 	str.w	r3, [r0], #4
    d784:	f851 3b04 	ldr.w	r3, [r1], #4
    d788:	f840 3b04 	str.w	r3, [r0], #4
    d78c:	f851 3b04 	ldr.w	r3, [r1], #4
    d790:	f840 3b04 	str.w	r3, [r0], #4
    d794:	f851 3b04 	ldr.w	r3, [r1], #4
    d798:	f840 3b04 	str.w	r3, [r0], #4
    d79c:	f851 3b04 	ldr.w	r3, [r1], #4
    d7a0:	f840 3b04 	str.w	r3, [r0], #4
    d7a4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7a8:	f840 3b04 	str.w	r3, [r0], #4
    d7ac:	f851 3b04 	ldr.w	r3, [r1], #4
    d7b0:	f840 3b04 	str.w	r3, [r0], #4
    d7b4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7b8:	f840 3b04 	str.w	r3, [r0], #4
    d7bc:	f851 3b04 	ldr.w	r3, [r1], #4
    d7c0:	f840 3b04 	str.w	r3, [r0], #4
    d7c4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7c8:	f840 3b04 	str.w	r3, [r0], #4
    d7cc:	f851 3b04 	ldr.w	r3, [r1], #4
    d7d0:	f840 3b04 	str.w	r3, [r0], #4
    d7d4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7d8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    d7dc:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    d7de:	d2bd      	bcs.n	d75c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    d7e0:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    d7e2:	d311      	bcc.n	d808 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    d7e4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7e8:	f840 3b04 	str.w	r3, [r0], #4
    d7ec:	f851 3b04 	ldr.w	r3, [r1], #4
    d7f0:	f840 3b04 	str.w	r3, [r0], #4
    d7f4:	f851 3b04 	ldr.w	r3, [r1], #4
    d7f8:	f840 3b04 	str.w	r3, [r0], #4
    d7fc:	f851 3b04 	ldr.w	r3, [r1], #4
    d800:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    d804:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    d806:	d2ed      	bcs.n	d7e4 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    d808:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    d80a:	d305      	bcc.n	d818 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    d80c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    d810:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    d814:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    d816:	d2f9      	bcs.n	d80c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    d818:	3204      	adds	r2, #4
	beq	.Ldone
    d81a:	d008      	beq.n	d82e <memcpy+0xe2>

	lsls	r2, r2, #31
    d81c:	07d2      	lsls	r2, r2, #31
	itt ne
    d81e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d820:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d824:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    d828:	d301      	bcc.n	d82e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    d82a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    d82c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d82e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d830:	4770      	bx	lr
    d832:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    d834:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    d836:	d313      	bcc.n	d860 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    d838:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    d83a:	d08d      	beq.n	d758 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    d83c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    d840:	d08a      	beq.n	d758 <memcpy+0xc>

	rsb	r3, #4
    d842:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    d846:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    d848:	07db      	lsls	r3, r3, #31
	itt ne
    d84a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    d84c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    d850:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    d854:	d380      	bcc.n	d758 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    d856:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    d85a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    d85e:	e77b      	b.n	d758 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    d860:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    d862:	d3d9      	bcc.n	d818 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    d864:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    d866:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    d86a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    d86e:	d2f9      	bcs.n	d864 <memcpy+0x118>

	ldrb	r3, [r1]
    d870:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    d872:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    d874:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    d876:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    d878:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    d87a:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    d87c:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    d87e:	4770      	bx	lr

0000d880 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    d880:	f002 b87a 	b.w	f978 <free>

0000d884 <ultoa>:
	int i=0, j;
    d884:	f101 3cff 	add.w	ip, r1, #4294967295
{
    d888:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    d88a:	4666      	mov	r6, ip
	int i=0, j;
    d88c:	2400      	movs	r4, #0
    d88e:	e000      	b.n	d892 <ultoa+0xe>
		i++;
    d890:	3401      	adds	r4, #1
		digit = val % radix;
    d892:	fbb0 f5f2 	udiv	r5, r0, r2
    d896:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d89a:	2b09      	cmp	r3, #9
    d89c:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    d8a0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    d8a4:	fa5f fe8e 	uxtb.w	lr, lr
    d8a8:	bf98      	it	ls
    d8aa:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    d8ae:	4290      	cmp	r0, r2
		val /= radix;
    d8b0:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d8b2:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    d8b6:	d2eb      	bcs.n	d890 <ultoa+0xc>
	buf[i + 1] = 0;
    d8b8:	1c63      	adds	r3, r4, #1
    d8ba:	2200      	movs	r2, #0
    d8bc:	18c8      	adds	r0, r1, r3
    d8be:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    d8c0:	b17c      	cbz	r4, d8e2 <ultoa+0x5e>
		t = buf[j];
    d8c2:	4662      	mov	r2, ip
    d8c4:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    d8c8:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    d8cc:	eba1 030c 	sub.w	r3, r1, ip
    d8d0:	3202      	adds	r2, #2
		buf[j] = buf[i];
    d8d2:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    d8d6:	3b01      	subs	r3, #1
    d8d8:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    d8da:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    d8dc:	4423      	add	r3, r4
    d8de:	429a      	cmp	r2, r3
    d8e0:	dbef      	blt.n	d8c2 <ultoa+0x3e>
}
    d8e2:	4608      	mov	r0, r1
    d8e4:	bd70      	pop	{r4, r5, r6, pc}
    d8e6:	bf00      	nop

0000d8e8 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    d8e8:	eeb4 0a40 	vcmp.f32	s0, s0
{
    d8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    d8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    d8f4:	4616      	mov	r6, r2
	int awidth = abs(width);
    d8f6:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    d8fa:	4607      	mov	r7, r0
    d8fc:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    d900:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    d904:	eeb0 8a40 	vmov.f32	s16, s0
    d908:	b085      	sub	sp, #20
	if (isnanf(val)) {
    d90a:	f180 8148 	bvs.w	db9e <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    d90e:	eef0 7ac0 	vabs.f32	s15, s0
    d912:	ed9f 7ac5 	vldr	s14, [pc, #788]	; dc28 <dtostrf+0x340>
    d916:	eef4 7a47 	vcmp.f32	s15, s14
    d91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d91e:	dd29      	ble.n	d974 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    d920:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    d924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d928:	f100 80ed 	bmi.w	db06 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d92c:	2a03      	cmp	r2, #3
    d92e:	f340 8091 	ble.w	da54 <dtostrf+0x16c>
    d932:	2303      	movs	r3, #3
		if (width<0) {
    d934:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    d936:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    d93a:	f2c0 8085 	blt.w	da48 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    d93e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    d942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d946:	f100 816a 	bmi.w	dc1e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    d94a:	2149      	movs	r1, #73	; 0x49
    d94c:	234e      	movs	r3, #78	; 0x4e
    d94e:	2046      	movs	r0, #70	; 0x46
    d950:	1cf4      	adds	r4, r6, #3
    d952:	7031      	strb	r1, [r6, #0]
    d954:	70b0      	strb	r0, [r6, #2]
    d956:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    d958:	b122      	cbz	r2, d964 <dtostrf+0x7c>
			*buf++ = ' ';
    d95a:	4620      	mov	r0, r4
    d95c:	2120      	movs	r1, #32
    d95e:	4414      	add	r4, r2
    d960:	f003 ff82 	bl	11868 <memset>
			awidth--;
		}
		*buf = 0;
    d964:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    d966:	4620      	mov	r0, r4
		*buf = 0;
    d968:	7023      	strb	r3, [r4, #0]
}
    d96a:	b005      	add	sp, #20
    d96c:	ecbd 8b02 	vpop	{d8}
    d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    d974:	4689      	mov	r9, r1
    d976:	460d      	mov	r5, r1
    d978:	aa02      	add	r2, sp, #8
    d97a:	a901      	add	r1, sp, #4
    d97c:	4648      	mov	r0, r9
    d97e:	f003 fc9f 	bl	112c0 <fcvtf>
	if (precision == 0 && decpt == 0) {
    d982:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    d986:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    d988:	ea59 030a 	orrs.w	r3, r9, sl
    d98c:	d172      	bne.n	da74 <dtostrf+0x18c>
		decpt++;
    d98e:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    d990:	7802      	ldrb	r2, [r0, #0]
    d992:	4ca6      	ldr	r4, [pc, #664]	; (dc2c <dtostrf+0x344>)
		decpt++;
    d994:	469a      	mov	sl, r3
    d996:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    d998:	4ba5      	ldr	r3, [pc, #660]	; (dc30 <dtostrf+0x348>)
		decpt++;
    d99a:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    d99c:	2a34      	cmp	r2, #52	; 0x34
    d99e:	bf88      	it	hi
    d9a0:	461c      	movhi	r4, r3
	if (sign) reqd++;
    d9a2:	9b02      	ldr	r3, [sp, #8]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d07d      	beq.n	daa4 <dtostrf+0x1bc>
    d9a8:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    d9ac:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    d9b0:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    d9b4:	f1bb 0f00 	cmp.w	fp, #0
    d9b8:	f340 80a1 	ble.w	dafe <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    d9bc:	465a      	mov	r2, fp
    d9be:	2120      	movs	r1, #32
    d9c0:	4630      	mov	r0, r6
		e += pad;
    d9c2:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    d9c4:	f003 ff50 	bl	11868 <memset>
    d9c8:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    d9cc:	222d      	movs	r2, #45	; 0x2d
    d9ce:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    d9d2:	f1ba 0f00 	cmp.w	sl, #0
    d9d6:	d177      	bne.n	dac8 <dtostrf+0x1e0>
    d9d8:	f1b9 0f00 	cmp.w	r9, #0
    d9dc:	d006      	beq.n	d9ec <dtostrf+0x104>
		*p++ = '0';
    d9de:	461a      	mov	r2, r3
    d9e0:	2130      	movs	r1, #48	; 0x30
    d9e2:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    d9e6:	212e      	movs	r1, #46	; 0x2e
    d9e8:	7059      	strb	r1, [r3, #1]
    d9ea:	4613      	mov	r3, r2
	while (p < e) {
    d9ec:	42ab      	cmp	r3, r5
    d9ee:	d21f      	bcs.n	da30 <dtostrf+0x148>
		*p++ = *s++;
    d9f0:	46a4      	mov	ip, r4
    d9f2:	4619      	mov	r1, r3
    d9f4:	f81c 2b01 	ldrb.w	r2, [ip], #1
    d9f8:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    d9fc:	42a9      	cmp	r1, r5
    d9fe:	d018      	beq.n	da32 <dtostrf+0x14a>
    da00:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    da02:	202e      	movs	r0, #46	; 0x2e
    da04:	3c01      	subs	r4, #1
    da06:	e00b      	b.n	da20 <dtostrf+0x138>
    da08:	7058      	strb	r0, [r3, #1]
    da0a:	3302      	adds	r3, #2
		if (p == e) break;
    da0c:	3c01      	subs	r4, #1
	while (p < e) {
    da0e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    da10:	4619      	mov	r1, r3
	while (p < e) {
    da12:	d20d      	bcs.n	da30 <dtostrf+0x148>
		*p++ = *s++;
    da14:	f81c 2b01 	ldrb.w	r2, [ip], #1
    da18:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    da1c:	42a9      	cmp	r1, r5
    da1e:	d008      	beq.n	da32 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    da20:	9401      	str	r4, [sp, #4]
    da22:	2c00      	cmp	r4, #0
    da24:	d0f0      	beq.n	da08 <dtostrf+0x120>
    da26:	460b      	mov	r3, r1
		if (p == e) break;
    da28:	3c01      	subs	r4, #1
	while (p < e) {
    da2a:	42ab      	cmp	r3, r5
		*p++ = *s++;
    da2c:	4619      	mov	r1, r3
	while (p < e) {
    da2e:	d3f1      	bcc.n	da14 <dtostrf+0x12c>
    da30:	461d      	mov	r5, r3
	if (width < 0) {
    da32:	2f00      	cmp	r7, #0
    da34:	db6b      	blt.n	db0e <dtostrf+0x226>
	return buf;
    da36:	4634      	mov	r4, r6
	*p = 0;
    da38:	2300      	movs	r3, #0
}
    da3a:	4620      	mov	r0, r4
	*p = 0;
    da3c:	702b      	strb	r3, [r5, #0]
}
    da3e:	b005      	add	sp, #20
    da40:	ecbd 8b02 	vpop	{d8}
    da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    da48:	b122      	cbz	r2, da54 <dtostrf+0x16c>
				*buf++ = ' ';
    da4a:	4630      	mov	r0, r6
    da4c:	2120      	movs	r1, #32
    da4e:	4416      	add	r6, r2
    da50:	f003 ff0a 	bl	11868 <memset>
		if (val<0) *buf++ = '-';
    da54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    da58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    da5c:	f140 80bd 	bpl.w	dbda <dtostrf+0x2f2>
    da60:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    da62:	2249      	movs	r2, #73	; 0x49
    da64:	234e      	movs	r3, #78	; 0x4e
    da66:	2046      	movs	r0, #70	; 0x46
    da68:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    da6a:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    da6c:	70f0      	strb	r0, [r6, #3]
    da6e:	7072      	strb	r2, [r6, #1]
    da70:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    da72:	e777      	b.n	d964 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    da74:	f1ca 0300 	rsb	r3, sl, #0
    da78:	4599      	cmp	r9, r3
    da7a:	da57      	bge.n	db2c <dtostrf+0x244>
		decpt = -precision;
    da7c:	f04f 0801 	mov.w	r8, #1
    da80:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    da84:	4c69      	ldr	r4, [pc, #420]	; (dc2c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    da86:	45c2      	cmp	sl, r8
		decpt = -precision;
    da88:	4640      	mov	r0, r8
    da8a:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    da8e:	bfb8      	it	lt
    da90:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    da94:	f1ba 0f00 	cmp.w	sl, #0
    da98:	d152      	bne.n	db40 <dtostrf+0x258>
	if (sign) reqd++;
    da9a:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    da9c:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    daa0:	2b00      	cmp	r3, #0
    daa2:	d181      	bne.n	d9a8 <dtostrf+0xc0>
	pad = width - reqd;
    daa4:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    daa8:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    daac:	f1bb 0f00 	cmp.w	fp, #0
    dab0:	dd27      	ble.n	db02 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    dab2:	465a      	mov	r2, fp
    dab4:	2120      	movs	r1, #32
    dab6:	4630      	mov	r0, r6
		e += pad;
    dab8:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    daba:	f003 fed5 	bl	11868 <memset>
    dabe:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    dac2:	f1ba 0f00 	cmp.w	sl, #0
    dac6:	d087      	beq.n	d9d8 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    dac8:	f1ba 0f00 	cmp.w	sl, #0
    dacc:	da8e      	bge.n	d9ec <dtostrf+0x104>
    dace:	f1b9 0f00 	cmp.w	r9, #0
    dad2:	d08b      	beq.n	d9ec <dtostrf+0x104>
		*p++ = '0';
    dad4:	4618      	mov	r0, r3
		*p++ = '.';
    dad6:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    dad8:	2130      	movs	r1, #48	; 0x30
    dada:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    dade:	705a      	strb	r2, [r3, #1]
    dae0:	4602      	mov	r2, r0
    dae2:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    dae4:	3301      	adds	r3, #1
			*p++ = '0';
    dae6:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    daea:	d1fb      	bne.n	dae4 <dtostrf+0x1fc>
			*p++ = '0';
    daec:	f1ba 0f00 	cmp.w	sl, #0
    daf0:	9301      	str	r3, [sp, #4]
    daf2:	f1ca 0300 	rsb	r3, sl, #0
    daf6:	bfa8      	it	ge
    daf8:	2301      	movge	r3, #1
    dafa:	4403      	add	r3, r0
    dafc:	e776      	b.n	d9ec <dtostrf+0x104>
	if (pad > 0) {
    dafe:	4633      	mov	r3, r6
    db00:	e764      	b.n	d9cc <dtostrf+0xe4>
    db02:	4633      	mov	r3, r6
    db04:	e765      	b.n	d9d2 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    db06:	2a04      	cmp	r2, #4
    db08:	ddaa      	ble.n	da60 <dtostrf+0x178>
    db0a:	2304      	movs	r3, #4
    db0c:	e712      	b.n	d934 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    db0e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    db10:	f1b8 0f00 	cmp.w	r8, #0
    db14:	ea6f 0208 	mvn.w	r2, r8
    db18:	da8d      	bge.n	da36 <dtostrf+0x14e>
    db1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    db1e:	2120      	movs	r1, #32
    db20:	4628      	mov	r0, r5
    db22:	3201      	adds	r2, #1
    db24:	4415      	add	r5, r2
    db26:	f003 fe9f 	bl	11868 <memset>
    db2a:	e784      	b.n	da36 <dtostrf+0x14e>
	reqd = strlen(s);
    db2c:	f004 fa88 	bl	12040 <strlen>
    db30:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    db32:	45c2      	cmp	sl, r8
    db34:	bfb8      	it	lt
    db36:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    db3a:	f1ba 0f00 	cmp.w	sl, #0
    db3e:	d0ac      	beq.n	da9a <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    db40:	f1ba 0f00 	cmp.w	sl, #0
    db44:	f6bf af2d 	bge.w	d9a2 <dtostrf+0xba>
    db48:	f1b9 0f00 	cmp.w	r9, #0
    db4c:	f43f af29 	beq.w	d9a2 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    db50:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    db54:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    db58:	4283      	cmp	r3, r0
    db5a:	f4bf af22 	bcs.w	d9a2 <dtostrf+0xba>
			while (newPrecision > 0) {
    db5e:	f1b9 0f00 	cmp.w	r9, #0
    db62:	dd05      	ble.n	db70 <dtostrf+0x288>
				val *= 10.0f;
    db64:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    db68:	3d01      	subs	r5, #1
				val *= 10.0f;
    db6a:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    db6e:	d1fb      	bne.n	db68 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    db70:	aa02      	add	r2, sp, #8
    db72:	eeb0 0a48 	vmov.f32	s0, s16
    db76:	4628      	mov	r0, r5
    db78:	a903      	add	r1, sp, #12
    db7a:	f003 fba1 	bl	112c0 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    db7e:	f8dd a004 	ldr.w	sl, [sp, #4]
    db82:	9b03      	ldr	r3, [sp, #12]
    db84:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    db88:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    db8a:	eba3 030a 	sub.w	r3, r3, sl
    db8e:	4293      	cmp	r3, r2
    db90:	f47f af07 	bne.w	d9a2 <dtostrf+0xba>
    db94:	f10a 0a01 	add.w	sl, sl, #1
    db98:	f8cd a004 	str.w	sl, [sp, #4]
    db9c:	e701      	b.n	d9a2 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    db9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    dba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dba6:	bf4c      	ite	mi
    dba8:	2304      	movmi	r3, #4
    dbaa:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    dbac:	4293      	cmp	r3, r2
    dbae:	da22      	bge.n	dbf6 <dtostrf+0x30e>
		if (width<0) {
    dbb0:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    dbb2:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    dbb6:	db18      	blt.n	dbea <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dbb8:	ee10 3a10 	vmov	r3, s0
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	da02      	bge.n	dbc6 <dtostrf+0x2de>
    dbc0:	232d      	movs	r3, #45	; 0x2d
    dbc2:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dbc6:	234e      	movs	r3, #78	; 0x4e
    dbc8:	2141      	movs	r1, #65	; 0x41
    dbca:	1cf4      	adds	r4, r6, #3
    dbcc:	7033      	strb	r3, [r6, #0]
    dbce:	7071      	strb	r1, [r6, #1]
    dbd0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    dbd2:	2a00      	cmp	r2, #0
    dbd4:	f47f aec1 	bne.w	d95a <dtostrf+0x72>
    dbd8:	e6c4      	b.n	d964 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    dbda:	2149      	movs	r1, #73	; 0x49
    dbdc:	224e      	movs	r2, #78	; 0x4e
    dbde:	2346      	movs	r3, #70	; 0x46
    dbe0:	1cf4      	adds	r4, r6, #3
    dbe2:	7031      	strb	r1, [r6, #0]
    dbe4:	7072      	strb	r2, [r6, #1]
    dbe6:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    dbe8:	e6bc      	b.n	d964 <dtostrf+0x7c>
			while (awidth) {
    dbea:	b122      	cbz	r2, dbf6 <dtostrf+0x30e>
				*buf++ = ' ';
    dbec:	4630      	mov	r0, r6
    dbee:	2120      	movs	r1, #32
    dbf0:	4416      	add	r6, r2
    dbf2:	f003 fe39 	bl	11868 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dbf6:	ee18 3a10 	vmov	r3, s16
    dbfa:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dbfc:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dc00:	db05      	blt.n	dc0e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dc02:	2241      	movs	r2, #65	; 0x41
    dc04:	1cf4      	adds	r4, r6, #3
    dc06:	7033      	strb	r3, [r6, #0]
    dc08:	7072      	strb	r2, [r6, #1]
    dc0a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    dc0c:	e6aa      	b.n	d964 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dc0e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dc10:	2241      	movs	r2, #65	; 0x41
    dc12:	1d34      	adds	r4, r6, #4
    dc14:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    dc16:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    dc18:	70b2      	strb	r2, [r6, #2]
    dc1a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    dc1c:	e6a2      	b.n	d964 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    dc1e:	232d      	movs	r3, #45	; 0x2d
    dc20:	f806 3b01 	strb.w	r3, [r6], #1
    dc24:	e691      	b.n	d94a <dtostrf+0x62>
    dc26:	bf00      	nop
    dc28:	7f7fffff 	.word	0x7f7fffff
    dc2c:	20007ef8 	.word	0x20007ef8
    dc30:	20007efc 	.word	0x20007efc

0000dc34 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    dc34:	4a07      	ldr	r2, [pc, #28]	; (dc54 <rtc_get+0x20>)
    dc36:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    dc38:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    dc3a:	4619      	mov	r1, r3
    dc3c:	4684      	mov	ip, r0
    dc3e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    dc40:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    dc42:	4299      	cmp	r1, r3
    dc44:	d1f9      	bne.n	dc3a <rtc_get+0x6>
    dc46:	4584      	cmp	ip, r0
    dc48:	d1f7      	bne.n	dc3a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    dc4a:	0bdb      	lsrs	r3, r3, #15
}
    dc4c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    dc50:	4770      	bx	lr
    dc52:	bf00      	nop
    dc54:	400d4000 	.word	0x400d4000

0000dc58 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    dc58:	4910      	ldr	r1, [pc, #64]	; (dc9c <rtc_set+0x44>)
    dc5a:	688b      	ldr	r3, [r1, #8]
    dc5c:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    dc60:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    dc62:	688b      	ldr	r3, [r1, #8]
    dc64:	07db      	lsls	r3, r3, #31
    dc66:	d4fc      	bmi.n	dc62 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    dc68:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    dc6a:	4a0c      	ldr	r2, [pc, #48]	; (dc9c <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    dc6c:	f023 0301 	bic.w	r3, r3, #1
    dc70:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    dc72:	6b93      	ldr	r3, [r2, #56]	; 0x38
    dc74:	07d9      	lsls	r1, r3, #31
    dc76:	d4fc      	bmi.n	dc72 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    dc78:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    dc7a:	4908      	ldr	r1, [pc, #32]	; (dc9c <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    dc7c:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    dc7e:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    dc80:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    dc82:	6b93      	ldr	r3, [r2, #56]	; 0x38
    dc84:	f043 0301 	orr.w	r3, r3, #1
    dc88:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    dc8a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    dc8c:	07db      	lsls	r3, r3, #31
    dc8e:	d5fc      	bpl.n	dc8a <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    dc90:	688b      	ldr	r3, [r1, #8]
    dc92:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    dc96:	608b      	str	r3, [r1, #8]
}
    dc98:	4770      	bx	lr
    dc9a:	bf00      	nop
    dc9c:	400d4000 	.word	0x400d4000

0000dca0 <unused_interrupt_vector>:
	__disable_irq();
    dca0:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    dca2:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    dca6:	4c52      	ldr	r4, [pc, #328]	; (ddf0 <unused_interrupt_vector+0x150>)
    dca8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    dcac:	f01e 0f04 	tst.w	lr, #4
    dcb0:	bf0c      	ite	eq
    dcb2:	f3ef 8208 	mrseq	r2, MSP
    dcb6:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    dcba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    dcbe:	4e4d      	ldr	r6, [pc, #308]	; (ddf4 <unused_interrupt_vector+0x154>)
	while (p < end) {
    dcc0:	4d4d      	ldr	r5, [pc, #308]	; (ddf8 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    dcc2:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    dcc6:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    dcca:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    dcce:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    dcd2:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    dcd6:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    dcda:	6993      	ldr	r3, [r2, #24]
    dcdc:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    dce0:	69d3      	ldr	r3, [r2, #28]
    dce2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    dce6:	f000 f8d1 	bl	de8c <tempmonGetTemp>
    dcea:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    dcee:	f7ff ffa1 	bl	dc34 <rtc_get>
	info->len = sizeof(*info) / 4;
    dcf2:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    dcf4:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    dcf8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    dcfc:	460b      	mov	r3, r1
    dcfe:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dd02:	493e      	ldr	r1, [pc, #248]	; (ddfc <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    dd04:	1d30      	adds	r0, r6, #4
    dd06:	405a      	eors	r2, r3
    dd08:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    dd0a:	f002 0301 	and.w	r3, r2, #1
    dd0e:	3c01      	subs	r4, #1
    dd10:	fb01 f303 	mul.w	r3, r1, r3
    dd14:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    dd18:	d1f7      	bne.n	dd0a <unused_interrupt_vector+0x6a>
	while (p < end) {
    dd1a:	42a8      	cmp	r0, r5
    dd1c:	d002      	beq.n	dd24 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    dd1e:	6873      	ldr	r3, [r6, #4]
    dd20:	4606      	mov	r6, r0
    dd22:	e7ef      	b.n	dd04 <unused_interrupt_vector+0x64>
	info->crc = crc;
    dd24:	4b32      	ldr	r3, [pc, #200]	; (ddf0 <unused_interrupt_vector+0x150>)
    dd26:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    dd2a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    dd2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dd32:	4930      	ldr	r1, [pc, #192]	; (ddf4 <unused_interrupt_vector+0x154>)
    dd34:	4a32      	ldr	r2, [pc, #200]	; (de00 <unused_interrupt_vector+0x160>)
    dd36:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    dd3a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    dd3e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    dd42:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    dd46:	4a2f      	ldr	r2, [pc, #188]	; (de04 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    dd48:	2502      	movs	r5, #2
    dd4a:	482f      	ldr	r0, [pc, #188]	; (de08 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    dd4c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dd4e:	492f      	ldr	r1, [pc, #188]	; (de0c <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    dd50:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    dd54:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    dd56:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    dd58:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dd5a:	482d      	ldr	r0, [pc, #180]	; (de10 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    dd5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    dd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dd64:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dd66:	680b      	ldr	r3, [r1, #0]
    dd68:	4283      	cmp	r3, r0
    dd6a:	d83d      	bhi.n	dde8 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    dd6c:	4d26      	ldr	r5, [pc, #152]	; (de08 <unused_interrupt_vector+0x168>)
    dd6e:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    dd70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dd74:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    dd78:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    dd7a:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    dd7c:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    dd80:	4924      	ldr	r1, [pc, #144]	; (de14 <unused_interrupt_vector+0x174>)
    dd82:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    dd86:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    dd8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    dd8e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    dd92:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    dd96:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    dd9a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    dd9e:	e001      	b.n	dda4 <unused_interrupt_vector+0x104>
		usb_isr();
    dda0:	f000 f9ca 	bl	e138 <usb_isr>
		if (PIT_TFLG0) {
    dda4:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    dda8:	2b00      	cmp	r3, #0
    ddaa:	d0f9      	beq.n	dda0 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    ddac:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    ddae:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ddb2:	2c4f      	cmp	r4, #79	; 0x4f
    ddb4:	d9f4      	bls.n	dda0 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ddb6:	4b18      	ldr	r3, [pc, #96]	; (de18 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    ddb8:	2002      	movs	r0, #2
    ddba:	4918      	ldr	r1, [pc, #96]	; (de1c <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ddbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    ddc0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ddc4:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ddc6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    ddca:	b93b      	cbnz	r3, dddc <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    ddcc:	4814      	ldr	r0, [pc, #80]	; (de20 <unused_interrupt_vector+0x180>)
    ddce:	4915      	ldr	r1, [pc, #84]	; (de24 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ddd0:	4a0d      	ldr	r2, [pc, #52]	; (de08 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    ddd2:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ddd4:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    ddd8:	2b00      	cmp	r3, #0
    ddda:	d0fa      	beq.n	ddd2 <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    dddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    dde0:	4a11      	ldr	r2, [pc, #68]	; (de28 <unused_interrupt_vector+0x188>)
    dde2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    dde6:	e7fe      	b.n	dde6 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    dde8:	f7ff f834 	bl	ce54 <set_arm_clock>
    ddec:	e7be      	b.n	dd6c <unused_interrupt_vector+0xcc>
    ddee:	bf00      	nop
    ddf0:	2027ff00 	.word	0x2027ff00
    ddf4:	2027ff80 	.word	0x2027ff80
    ddf8:	2027ffa8 	.word	0x2027ffa8
    ddfc:	edb88320 	.word	0xedb88320
    de00:	2027ffa0 	.word	0x2027ffa0
    de04:	400fc000 	.word	0x400fc000
    de08:	40084000 	.word	0x40084000
    de0c:	20008ab8 	.word	0x20008ab8
    de10:	0bcd3d80 	.word	0x0bcd3d80
    de14:	00249f00 	.word	0x00249f00
    de18:	400d9000 	.word	0x400d9000
    de1c:	402e0000 	.word	0x402e0000
    de20:	400f8000 	.word	0x400f8000
    de24:	0bad00f1 	.word	0x0bad00f1
    de28:	05fa0004 	.word	0x05fa0004

0000de2c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    de2c:	490a      	ldr	r1, [pc, #40]	; (de58 <_sbrk+0x2c>)
    de2e:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    de30:	b138      	cbz	r0, de42 <_sbrk+0x16>
{
    de32:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    de34:	1813      	adds	r3, r2, r0
    de36:	4809      	ldr	r0, [pc, #36]	; (de5c <_sbrk+0x30>)
    de38:	4283      	cmp	r3, r0
    de3a:	d804      	bhi.n	de46 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    de3c:	4610      	mov	r0, r2
                __brkval = prev + incr;
    de3e:	600b      	str	r3, [r1, #0]
}
    de40:	bd08      	pop	{r3, pc}
    de42:	4610      	mov	r0, r2
    de44:	4770      	bx	lr
                        errno = ENOMEM;
    de46:	f003 fe9b 	bl	11b80 <__errno>
    de4a:	230c      	movs	r3, #12
                        return (void *)-1;
    de4c:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    de50:	6003      	str	r3, [r0, #0]
}
    de52:	4610      	mov	r0, r2
    de54:	bd08      	pop	{r3, pc}
    de56:	bf00      	nop
    de58:	20008e94 	.word	0x20008e94
    de5c:	20280000 	.word	0x20280000

0000de60 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    de60:	2000      	movs	r0, #0
    de62:	4770      	bx	lr

0000de64 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    de64:	f04f 30ff 	mov.w	r0, #4294967295
    de68:	4770      	bx	lr
    de6a:	bf00      	nop

0000de6c <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    de6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    de70:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    de72:	604b      	str	r3, [r1, #4]
}
    de74:	4770      	bx	lr
    de76:	bf00      	nop

0000de78 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    de78:	2001      	movs	r0, #1
    de7a:	4770      	bx	lr

0000de7c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    de7c:	f04f 30ff 	mov.w	r0, #4294967295
    de80:	4770      	bx	lr
    de82:	bf00      	nop

0000de84 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    de84:	bf30      	wfi
    de86:	e7fd      	b.n	de84 <abort>

0000de88 <Panic_Temp_isr>:
  unused_interrupt_vector();
    de88:	f7ff bf0a 	b.w	dca0 <unused_interrupt_vector>

0000de8c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    de8c:	4a12      	ldr	r2, [pc, #72]	; (ded8 <tempmonGetTemp+0x4c>)
    de8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    de92:	075b      	lsls	r3, r3, #29
    de94:	d5fb      	bpl.n	de8e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    de96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    de9a:	4810      	ldr	r0, [pc, #64]	; (dedc <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    de9c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    dea0:	490f      	ldr	r1, [pc, #60]	; (dee0 <tempmonGetTemp+0x54>)
    dea2:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    dea6:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    deaa:	ed91 6a00 	vldr	s12, [r1]
    deae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    deb2:	4a0c      	ldr	r2, [pc, #48]	; (dee4 <tempmonGetTemp+0x58>)
    deb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    deb8:	4b0b      	ldr	r3, [pc, #44]	; (dee8 <tempmonGetTemp+0x5c>)
    deba:	edd2 6a00 	vldr	s13, [r2]
    debe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    dec2:	ed93 7a00 	vldr	s14, [r3]
    dec6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    deca:	ee67 7a86 	vmul.f32	s15, s15, s12
    dece:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    ded2:	ee37 0a40 	vsub.f32	s0, s14, s0
    ded6:	4770      	bx	lr
    ded8:	400d8100 	.word	0x400d8100
    dedc:	20028c38 	.word	0x20028c38
    dee0:	20028c40 	.word	0x20028c40
    dee4:	20028c44 	.word	0x20028c44
    dee8:	20028c3c 	.word	0x20028c3c

0000deec <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    deec:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    deee:	2900      	cmp	r1, #0
    def0:	d131      	bne.n	df56 <endpoint0_receive+0x6a>
    def2:	4c2b      	ldr	r4, [pc, #172]	; (dfa0 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    def4:	4b2b      	ldr	r3, [pc, #172]	; (dfa4 <endpoint0_receive+0xb8>)
    def6:	2101      	movs	r1, #1
    def8:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    defa:	b1da      	cbz	r2, df34 <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    defc:	492a      	ldr	r1, [pc, #168]	; (dfa8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    defe:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df00:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df04:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    df08:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df0a:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    df0c:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df10:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    df14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    df18:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    df1c:	4313      	orrs	r3, r2
    df1e:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    df22:	4b22      	ldr	r3, [pc, #136]	; (dfac <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    df24:	4920      	ldr	r1, [pc, #128]	; (dfa8 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    df26:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    df28:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    df2c:	2b00      	cmp	r3, #0
    df2e:	d1fb      	bne.n	df28 <endpoint0_receive+0x3c>
}
    df30:	bc30      	pop	{r4, r5}
    df32:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df34:	491c      	ldr	r1, [pc, #112]	; (dfa8 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df36:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df38:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    df3c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    df3e:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    df40:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    df44:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    df48:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    df4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    df50:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    df54:	e7e5      	b.n	df22 <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    df56:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    df58:	4b15      	ldr	r3, [pc, #84]	; (dfb0 <endpoint0_receive+0xc4>)
    df5a:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    df5c:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    df5e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    df62:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    df64:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    df66:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    df68:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    df6c:	4c0c      	ldr	r4, [pc, #48]	; (dfa0 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    df6e:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    df70:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    df74:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    df76:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    df78:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    df7c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    df80:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    df82:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    df84:	4908      	ldr	r1, [pc, #32]	; (dfa8 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    df86:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    df88:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    df8c:	f043 0301 	orr.w	r3, r3, #1
    df90:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    df94:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    df98:	2b00      	cmp	r3, #0
    df9a:	d1fb      	bne.n	df94 <endpoint0_receive+0xa8>
    df9c:	e7aa      	b.n	def4 <endpoint0_receive+0x8>
    df9e:	bf00      	nop
    dfa0:	20000000 	.word	0x20000000
    dfa4:	20009ac0 	.word	0x20009ac0
    dfa8:	402e0000 	.word	0x402e0000
    dfac:	20028ac8 	.word	0x20028ac8
    dfb0:	20009ae0 	.word	0x20009ae0

0000dfb4 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    dfb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    dfb6:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    dfb8:	b11b      	cbz	r3, dfc2 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    dfba:	6853      	ldr	r3, [r2, #4]
    dfbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    dfc0:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    dfc2:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    dfc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    dfc6:	b33c      	cbz	r4, e018 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    dfc8:	4b1a      	ldr	r3, [pc, #104]	; (e034 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    dfca:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    dfcc:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    dfd0:	420c      	tst	r4, r1
    dfd2:	d11d      	bne.n	e010 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    dfd4:	4e18      	ldr	r6, [pc, #96]	; (e038 <schedule_transfer+0x84>)
    dfd6:	6877      	ldr	r7, [r6, #4]
    dfd8:	e004      	b.n	dfe4 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dfda:	6874      	ldr	r4, [r6, #4]
    dfdc:	1be4      	subs	r4, r4, r7
    dfde:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    dfe2:	d20b      	bcs.n	dffc <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    dfe4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    dfe8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    dfec:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    dff0:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    dff4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    dff8:	0464      	lsls	r4, r4, #17
    dffa:	d5ee      	bpl.n	dfda <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    dffc:	400d      	ands	r5, r1
    dffe:	d107      	bne.n	e010 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    e000:	4c0c      	ldr	r4, [pc, #48]	; (e034 <schedule_transfer+0x80>)
		endpoint->status = 0;
    e002:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    e006:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e00a:	430b      	orrs	r3, r1
    e00c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    e010:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e012:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    e014:	bcf0      	pop	{r4, r5, r6, r7}
    e016:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    e018:	4d06      	ldr	r5, [pc, #24]	; (e034 <schedule_transfer+0x80>)
	endpoint->status = 0;
    e01a:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    e01e:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    e022:	430b      	orrs	r3, r1
    e024:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    e028:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    e02a:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    e02c:	b662      	cpsie	i
}
    e02e:	bcf0      	pop	{r4, r5, r6, r7}
    e030:	4770      	bx	lr
    e032:	bf00      	nop
    e034:	402e0000 	.word	0x402e0000
    e038:	e0001000 	.word	0xe0001000

0000e03c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    e03c:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    e03e:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    e040:	b19d      	cbz	r5, e06a <run_callbacks+0x2e>
    e042:	4606      	mov	r6, r0
    e044:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    e046:	2400      	movs	r4, #0
    e048:	e003      	b.n	e052 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    e04a:	6812      	ldr	r2, [r2, #0]
		count++;
    e04c:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    e04e:	2a01      	cmp	r2, #1
    e050:	d00c      	beq.n	e06c <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    e052:	6853      	ldr	r3, [r2, #4]
    e054:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    e058:	d0f7      	beq.n	e04a <run_callbacks+0xe>
			ep->first_transfer = t;
    e05a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    e05c:	b12c      	cbz	r4, e06a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    e05e:	4628      	mov	r0, r5
		ep->callback_function(first);
    e060:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    e062:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    e064:	4798      	blx	r3
	while (count) {
    e066:	3c01      	subs	r4, #1
    e068:	d1f9      	bne.n	e05e <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    e06a:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    e06c:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    e070:	e7f4      	b.n	e05c <run_callbacks+0x20>
    e072:	bf00      	nop

0000e074 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    e074:	b430      	push	{r4, r5}
	if (len > 0) {
    e076:	b9d9      	cbnz	r1, e0b0 <endpoint0_transmit.constprop.0+0x3c>
    e078:	4c1f      	ldr	r4, [pc, #124]	; (e0f8 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    e07a:	4b20      	ldr	r3, [pc, #128]	; (e0fc <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    e07c:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e07e:	4a20      	ldr	r2, [pc, #128]	; (e100 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    e080:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e082:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    e086:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    e088:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    e08a:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e08e:	2480      	movs	r4, #128	; 0x80
    e090:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e092:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    e096:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e09a:	481a      	ldr	r0, [pc, #104]	; (e104 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    e09c:	432b      	orrs	r3, r5
    e09e:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    e0a2:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    e0a4:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d1fb      	bne.n	e0a4 <endpoint0_transmit.constprop.0+0x30>
}
    e0ac:	bc30      	pop	{r4, r5}
    e0ae:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e0b0:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    e0b2:	4b15      	ldr	r3, [pc, #84]	; (e108 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e0b4:	4c10      	ldr	r4, [pc, #64]	; (e0f8 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    e0b6:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e0b8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    e0bc:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    e0be:	4a10      	ldr	r2, [pc, #64]	; (e100 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    e0c0:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e0c2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    e0c6:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    e0c8:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e0ca:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    e0ce:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    e0d0:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e0d2:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e0d6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    e0da:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    e0dc:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    e0de:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    e0e0:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    e0e2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e0e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e0ea:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    e0ee:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    e0f2:	2b00      	cmp	r3, #0
    e0f4:	d1fb      	bne.n	e0ee <endpoint0_transmit.constprop.0+0x7a>
    e0f6:	e7c0      	b.n	e07a <endpoint0_transmit.constprop.0+0x6>
    e0f8:	20000000 	.word	0x20000000
    e0fc:	20009ac0 	.word	0x20009ac0
    e100:	402e0000 	.word	0x402e0000
    e104:	20028ac8 	.word	0x20028ac8
    e108:	20009ae0 	.word	0x20009ae0

0000e10c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    e10c:	4908      	ldr	r1, [pc, #32]	; (e130 <usb_stop_sof_interrupts+0x24>)
    e10e:	2201      	movs	r2, #1
    e110:	780b      	ldrb	r3, [r1, #0]
    e112:	fa02 f000 	lsl.w	r0, r2, r0
    e116:	ea23 0000 	bic.w	r0, r3, r0
    e11a:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    e11c:	b930      	cbnz	r0, e12c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    e11e:	4a05      	ldr	r2, [pc, #20]	; (e134 <usb_stop_sof_interrupts+0x28>)
    e120:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    e124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e128:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    e12c:	4770      	bx	lr
    e12e:	bf00      	nop
    e130:	200293ad 	.word	0x200293ad
    e134:	402e0000 	.word	0x402e0000

0000e138 <usb_isr>:
{
    e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    e13c:	4caa      	ldr	r4, [pc, #680]	; (e3e8 <usb_isr+0x2b0>)
{
    e13e:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    e140:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e144:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    e146:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    e14a:	d54f      	bpl.n	e1ec <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    e14c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e150:	2b00      	cmp	r3, #0
    e152:	d046      	beq.n	e1e2 <usb_isr+0xaa>
    e154:	4da5      	ldr	r5, [pc, #660]	; (e3ec <usb_isr+0x2b4>)
    e156:	f8df 92b0 	ldr.w	r9, [pc, #688]	; e408 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    e15a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; e424 <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e15e:	4fa4      	ldr	r7, [pc, #656]	; (e3f0 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    e160:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    e164:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    e168:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e16c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    e170:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    e174:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    e178:	049b      	lsls	r3, r3, #18
    e17a:	d5f5      	bpl.n	e168 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e17c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    e184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    e188:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    e18c:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    e190:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    e194:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    e198:	d1fa      	bne.n	e190 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    e19a:	b291      	uxth	r1, r2
    e19c:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    e1a0:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    e1a4:	f000 81b8 	beq.w	e518 <usb_isr+0x3e0>
    e1a8:	f200 80f3 	bhi.w	e392 <usb_isr+0x25a>
    e1ac:	f240 3c02 	movw	ip, #770	; 0x302
    e1b0:	4561      	cmp	r1, ip
    e1b2:	f000 81cf 	beq.w	e554 <usb_isr+0x41c>
    e1b6:	f200 809a 	bhi.w	e2ee <usb_isr+0x1b6>
    e1ba:	2982      	cmp	r1, #130	; 0x82
    e1bc:	f000 81b4 	beq.w	e528 <usb_isr+0x3f0>
    e1c0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    e1c4:	f040 808a 	bne.w	e2dc <usb_isr+0x1a4>
		if (endpoint > 7) break;
    e1c8:	f010 0f78 	tst.w	r0, #120	; 0x78
    e1cc:	b283      	uxth	r3, r0
    e1ce:	f000 81f4 	beq.w	e5ba <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    e1d2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e1d6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    e1da:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    e1de:	2b00      	cmp	r3, #0
    e1e0:	d1be      	bne.n	e160 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    e1e2:	4a81      	ldr	r2, [pc, #516]	; (e3e8 <usb_isr+0x2b0>)
    e1e4:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d142      	bne.n	e272 <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    e1ec:	0672      	lsls	r2, r6, #25
    e1ee:	d516      	bpl.n	e21e <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    e1f0:	4b7d      	ldr	r3, [pc, #500]	; (e3e8 <usb_isr+0x2b0>)
    e1f2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    e1f6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    e1fa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    e1fe:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    e202:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    e206:	2c00      	cmp	r4, #0
    e208:	d1fb      	bne.n	e202 <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    e20a:	f04f 32ff 	mov.w	r2, #4294967295
    e20e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    e212:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    e216:	f000 fe9b 	bl	ef50 <usb_serial_reset>
		endpointN_notify_mask = 0;
    e21a:	4b76      	ldr	r3, [pc, #472]	; (e3f4 <usb_isr+0x2bc>)
    e21c:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    e21e:	01f4      	lsls	r4, r6, #7
    e220:	d503      	bpl.n	e22a <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    e222:	4b75      	ldr	r3, [pc, #468]	; (e3f8 <usb_isr+0x2c0>)
    e224:	681b      	ldr	r3, [r3, #0]
    e226:	b103      	cbz	r3, e22a <usb_isr+0xf2>
    e228:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    e22a:	01b0      	lsls	r0, r6, #6
    e22c:	d503      	bpl.n	e236 <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    e22e:	4b73      	ldr	r3, [pc, #460]	; (e3fc <usb_isr+0x2c4>)
    e230:	681b      	ldr	r3, [r3, #0]
    e232:	b103      	cbz	r3, e236 <usb_isr+0xfe>
    e234:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    e236:	0771      	lsls	r1, r6, #29
    e238:	d508      	bpl.n	e24c <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    e23a:	4b6b      	ldr	r3, [pc, #428]	; (e3e8 <usb_isr+0x2b0>)
    e23c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    e240:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    e244:	d047      	beq.n	e2d6 <usb_isr+0x19e>
			usb_high_speed = 1;
    e246:	4b6e      	ldr	r3, [pc, #440]	; (e400 <usb_isr+0x2c8>)
    e248:	2201      	movs	r2, #1
    e24a:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    e24c:	4b66      	ldr	r3, [pc, #408]	; (e3e8 <usb_isr+0x2b0>)
    e24e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    e252:	061a      	lsls	r2, r3, #24
    e254:	d50a      	bpl.n	e26c <usb_isr+0x134>
    e256:	0633      	lsls	r3, r6, #24
    e258:	d508      	bpl.n	e26c <usb_isr+0x134>
		if (usb_reboot_timer) {
    e25a:	4a6a      	ldr	r2, [pc, #424]	; (e404 <usb_isr+0x2cc>)
    e25c:	7813      	ldrb	r3, [r2, #0]
    e25e:	b12b      	cbz	r3, e26c <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    e260:	3b01      	subs	r3, #1
    e262:	b2db      	uxtb	r3, r3
    e264:	7013      	strb	r3, [r2, #0]
    e266:	2b00      	cmp	r3, #0
    e268:	f000 8230 	beq.w	e6cc <usb_isr+0x594>
}
    e26c:	b003      	add	sp, #12
    e26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    e272:	4965      	ldr	r1, [pc, #404]	; (e408 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    e274:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    e278:	6808      	ldr	r0, [r1, #0]
    e27a:	4203      	tst	r3, r0
    e27c:	f040 81c2 	bne.w	e604 <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    e280:	4a5c      	ldr	r2, [pc, #368]	; (e3f4 <usb_isr+0x2bc>)
    e282:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    e284:	401c      	ands	r4, r3
    e286:	d0b1      	beq.n	e1ec <usb_isr+0xb4>
				while (tx) {
    e288:	ea5f 4814 	movs.w	r8, r4, lsr #16
    e28c:	d010      	beq.n	e2b0 <usb_isr+0x178>
    e28e:	4d57      	ldr	r5, [pc, #348]	; (e3ec <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    e290:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    e294:	fa98 f7a8 	rbit	r7, r8
    e298:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e29c:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    e2a0:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    e2a4:	3040      	adds	r0, #64	; 0x40
    e2a6:	f7ff fec9 	bl	e03c <run_callbacks>
				while (tx) {
    e2aa:	ea38 0807 	bics.w	r8, r8, r7
    e2ae:	d1f1      	bne.n	e294 <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    e2b0:	b2a4      	uxth	r4, r4
				while(rx) {
    e2b2:	2c00      	cmp	r4, #0
    e2b4:	d09a      	beq.n	e1ec <usb_isr+0xb4>
    e2b6:	4d4d      	ldr	r5, [pc, #308]	; (e3ec <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    e2b8:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    e2bc:	fa94 f7a4 	rbit	r7, r4
    e2c0:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    e2c4:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    e2c8:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    e2cc:	f7ff feb6 	bl	e03c <run_callbacks>
				while(rx) {
    e2d0:	43bc      	bics	r4, r7
    e2d2:	d1f3      	bne.n	e2bc <usb_isr+0x184>
    e2d4:	e78a      	b.n	e1ec <usb_isr+0xb4>
			usb_high_speed = 0;
    e2d6:	4a4a      	ldr	r2, [pc, #296]	; (e400 <usb_isr+0x2c8>)
    e2d8:	7013      	strb	r3, [r2, #0]
    e2da:	e7b7      	b.n	e24c <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    e2dc:	2980      	cmp	r1, #128	; 0x80
    e2de:	f47f af78 	bne.w	e1d2 <usb_isr+0x9a>
		reply_buffer[0] = 0;
    e2e2:	484a      	ldr	r0, [pc, #296]	; (e40c <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    e2e4:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    e2e6:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e2e8:	f7ff fec4 	bl	e074 <endpoint0_transmit.constprop.0>
		return;
    e2ec:	e775      	b.n	e1da <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e2ee:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    e2f2:	f000 80f4 	beq.w	e4de <usb_isr+0x3a6>
    e2f6:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    e2fa:	2901      	cmp	r1, #1
    e2fc:	f63f af69 	bhi.w	e1d2 <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e300:	4b43      	ldr	r3, [pc, #268]	; (e410 <usb_isr+0x2d8>)
    e302:	6859      	ldr	r1, [r3, #4]
    e304:	2900      	cmp	r1, #0
    e306:	f43f af64 	beq.w	e1d2 <usb_isr+0x9a>
    e30a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e30e:	fa1f fa80 	uxth.w	sl, r0
    e312:	e004      	b.n	e31e <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    e314:	6919      	ldr	r1, [r3, #16]
    e316:	330c      	adds	r3, #12
    e318:	2900      	cmp	r1, #0
    e31a:	f43f af5a 	beq.w	e1d2 <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    e31e:	f8b3 c000 	ldrh.w	ip, [r3]
    e322:	45f4      	cmp	ip, lr
    e324:	d1f6      	bne.n	e314 <usb_isr+0x1dc>
    e326:	885a      	ldrh	r2, [r3, #2]
    e328:	4552      	cmp	r2, sl
    e32a:	d1f3      	bne.n	e314 <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    e32c:	ea4f 221e 	mov.w	r2, lr, lsr #8
    e330:	2a03      	cmp	r2, #3
    e332:	f000 8185 	beq.w	e640 <usb_isr+0x508>
					datalen = list->length;
    e336:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    e33a:	0c00      	lsrs	r0, r0, #16
    e33c:	4582      	cmp	sl, r0
    e33e:	bf28      	it	cs
    e340:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    e342:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    e346:	f040 8181 	bne.w	e64c <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    e34a:	4b2d      	ldr	r3, [pc, #180]	; (e400 <usb_isr+0x2c8>)
    e34c:	4a31      	ldr	r2, [pc, #196]	; (e414 <usb_isr+0x2dc>)
    e34e:	7819      	ldrb	r1, [r3, #0]
    e350:	4b31      	ldr	r3, [pc, #196]	; (e418 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e352:	f8df b0c8 	ldr.w	fp, [pc, #200]	; e41c <usb_isr+0x2e4>
    e356:	2900      	cmp	r1, #0
    e358:	bf0c      	ite	eq
    e35a:	4611      	moveq	r1, r2
    e35c:	4619      	movne	r1, r3
    e35e:	482f      	ldr	r0, [pc, #188]	; (e41c <usb_isr+0x2e4>)
    e360:	4652      	mov	r2, sl
    e362:	f7ff f9f3 	bl	d74c <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e366:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e36a:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    e36e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e372:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e376:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    e37a:	3320      	adds	r3, #32
	} while (location < end_addr);
    e37c:	429a      	cmp	r2, r3
    e37e:	d8fa      	bhi.n	e376 <usb_isr+0x23e>
	asm("dsb");
    e380:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e384:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    e388:	4824      	ldr	r0, [pc, #144]	; (e41c <usb_isr+0x2e4>)
    e38a:	4651      	mov	r1, sl
    e38c:	f7ff fe72 	bl	e074 <endpoint0_transmit.constprop.0>
				return;
    e390:	e723      	b.n	e1da <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e392:	f242 3c21 	movw	ip, #8993	; 0x2321
    e396:	4561      	cmp	r1, ip
    e398:	d00d      	beq.n	e3b6 <usb_isr+0x27e>
    e39a:	d877      	bhi.n	e48c <usb_isr+0x354>
    e39c:	f242 0c21 	movw	ip, #8225	; 0x2021
    e3a0:	4561      	cmp	r1, ip
    e3a2:	f000 808b 	beq.w	e4bc <usb_isr+0x384>
    e3a6:	f242 2c21 	movw	ip, #8737	; 0x2221
    e3aa:	4561      	cmp	r1, ip
    e3ac:	d13c      	bne.n	e428 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    e3ae:	b280      	uxth	r0, r0
    e3b0:	2800      	cmp	r0, #0
    e3b2:	f000 80f9 	beq.w	e5a8 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    e3b6:	4b1a      	ldr	r3, [pc, #104]	; (e420 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    e3b8:	2200      	movs	r2, #0
    e3ba:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    e3bc:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    e3be:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e3c0:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e3c2:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e3c4:	2280      	movs	r2, #128	; 0x80
    e3c6:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e3c8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e3cc:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e3d0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e3d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e3d8:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    e3dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	d1fb      	bne.n	e3dc <usb_isr+0x2a4>
    e3e4:	e6f9      	b.n	e1da <usb_isr+0xa2>
    e3e6:	bf00      	nop
    e3e8:	402e0000 	.word	0x402e0000
    e3ec:	20000000 	.word	0x20000000
    e3f0:	402e01c0 	.word	0x402e01c0
    e3f4:	20028acc 	.word	0x20028acc
    e3f8:	20029380 	.word	0x20029380
    e3fc:	20029384 	.word	0x20029384
    e400:	200293b4 	.word	0x200293b4
    e404:	200293b5 	.word	0x200293b5
    e408:	20028ac8 	.word	0x20028ac8
    e40c:	20028be4 	.word	0x20028be4
    e410:	200088f4 	.word	0x200088f4
    e414:	6000295c 	.word	0x6000295c
    e418:	600029c8 	.word	0x600029c8
    e41c:	20200800 	.word	0x20200800
    e420:	20009ac0 	.word	0x20009ac0
    e424:	200293b3 	.word	0x200293b3
	switch (setup.wRequestAndType) {
    e428:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    e42c:	f47f aed1 	bne.w	e1d2 <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    e430:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e434:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    e438:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    e43a:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    e43e:	4aa6      	ldr	r2, [pc, #664]	; (e6d8 <usb_isr+0x5a0>)
    e440:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    e444:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    e448:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    e44c:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    e450:	f000 fd80 	bl	ef54 <usb_serial_configure>
		usb_mtp_configure();
    e454:	f000 faaa 	bl	e9ac <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    e458:	4aa0      	ldr	r2, [pc, #640]	; (e6dc <usb_isr+0x5a4>)
    e45a:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    e45c:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e45e:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e460:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e462:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    e464:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e466:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e468:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    e46c:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e46e:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e472:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    e476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    e47a:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    e47e:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    e482:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e486:	2b00      	cmp	r3, #0
    e488:	d1fb      	bne.n	e482 <usb_isr+0x34a>
    e48a:	e6a6      	b.n	e1da <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    e48c:	f246 4321 	movw	r3, #25633	; 0x6421
    e490:	4299      	cmp	r1, r3
    e492:	d01f      	beq.n	e4d4 <usb_isr+0x39c>
    e494:	f246 73a1 	movw	r3, #26529	; 0x67a1
    e498:	4299      	cmp	r1, r3
    e49a:	f47f ae9a 	bne.w	e1d2 <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    e49e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    e4a2:	f4ff ae96 	bcc.w	e1d2 <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    e4a6:	4b8e      	ldr	r3, [pc, #568]	; (e6e0 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    e4a8:	2104      	movs	r1, #4
    e4aa:	488e      	ldr	r0, [pc, #568]	; (e6e4 <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    e4ac:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    e4ae:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    e4b0:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    e4b2:	2320      	movs	r3, #32
    e4b4:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    e4b6:	f7ff fddd 	bl	e074 <endpoint0_transmit.constprop.0>
			return;
    e4ba:	e68e      	b.n	e1da <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    e4bc:	0c01      	lsrs	r1, r0, #16
    e4be:	2907      	cmp	r1, #7
    e4c0:	f47f ae87 	bne.w	e1d2 <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    e4c4:	4b88      	ldr	r3, [pc, #544]	; (e6e8 <usb_isr+0x5b0>)
    e4c6:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    e4ca:	2201      	movs	r2, #1
    e4cc:	4885      	ldr	r0, [pc, #532]	; (e6e4 <usb_isr+0x5ac>)
    e4ce:	f7ff fd0d 	bl	deec <endpoint0_receive>
			return;
    e4d2:	e682      	b.n	e1da <usb_isr+0xa2>
		if (setup.wLength == 6) {
    e4d4:	0c01      	lsrs	r1, r0, #16
    e4d6:	2906      	cmp	r1, #6
    e4d8:	f47f ae7b 	bne.w	e1d2 <usb_isr+0x9a>
    e4dc:	e7f2      	b.n	e4c4 <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    e4de:	497f      	ldr	r1, [pc, #508]	; (e6dc <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    e4e0:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    e4e2:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    e4e4:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e4e6:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e4e8:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e4ea:	2380      	movs	r3, #128	; 0x80
    e4ec:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e4ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e4f2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e4f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e4fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e4fe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    e502:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e506:	2b00      	cmp	r3, #0
    e508:	d1fb      	bne.n	e502 <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    e50a:	0c13      	lsrs	r3, r2, #16
    e50c:	065b      	lsls	r3, r3, #25
    e50e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    e512:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    e516:	e660      	b.n	e1da <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    e518:	4874      	ldr	r0, [pc, #464]	; (e6ec <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    e51a:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    e51c:	f898 3000 	ldrb.w	r3, [r8]
    e520:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    e522:	f7ff fda7 	bl	e074 <endpoint0_transmit.constprop.0>
		return;
    e526:	e658      	b.n	e1da <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    e528:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    e52a:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    e52e:	f47f ae50 	bne.w	e1d2 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    e532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    e536:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    e53a:	4a6c      	ldr	r2, [pc, #432]	; (e6ec <usb_isr+0x5b4>)
    e53c:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e53e:	0618      	lsls	r0, r3, #24
    e540:	d47b      	bmi.n	e63a <usb_isr+0x502>
    e542:	07cb      	lsls	r3, r1, #31
    e544:	d501      	bpl.n	e54a <usb_isr+0x412>
			reply_buffer[0] = 1;
    e546:	2301      	movs	r3, #1
    e548:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    e54a:	2102      	movs	r1, #2
    e54c:	4867      	ldr	r0, [pc, #412]	; (e6ec <usb_isr+0x5b4>)
    e54e:	f7ff fd91 	bl	e074 <endpoint0_transmit.constprop.0>
		return;
    e552:	e642      	b.n	e1da <usb_isr+0xa2>
		if (endpoint > 7) break;
    e554:	f010 0f78 	tst.w	r0, #120	; 0x78
    e558:	b283      	uxth	r3, r0
    e55a:	f47f ae3a 	bne.w	e1d2 <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    e55e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    e562:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    e566:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    e56a:	bf14      	ite	ne
    e56c:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    e570:	f043 0301 	orreq.w	r3, r3, #1
    e574:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    e578:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    e57a:	4b58      	ldr	r3, [pc, #352]	; (e6dc <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    e57c:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    e57e:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    e580:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e582:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e584:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e586:	2280      	movs	r2, #128	; 0x80
    e588:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e58a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e58e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e592:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e59a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    e59e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e5a2:	2b00      	cmp	r3, #0
    e5a4:	d1fb      	bne.n	e59e <usb_isr+0x466>
    e5a6:	e618      	b.n	e1da <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e5a8:	4b51      	ldr	r3, [pc, #324]	; (e6f0 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    e5aa:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    e5ae:	6819      	ldr	r1, [r3, #0]
    e5b0:	4b50      	ldr	r3, [pc, #320]	; (e6f4 <usb_isr+0x5bc>)
    e5b2:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    e5b4:	4b50      	ldr	r3, [pc, #320]	; (e6f8 <usb_isr+0x5c0>)
    e5b6:	701a      	strb	r2, [r3, #0]
    e5b8:	e6fd      	b.n	e3b6 <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    e5ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    e5be:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    e5c2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    e5c6:	bf14      	ite	ne
    e5c8:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    e5cc:	f023 0301 	biceq.w	r3, r3, #1
    e5d0:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    e5d4:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    e5d6:	4b41      	ldr	r3, [pc, #260]	; (e6dc <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    e5d8:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    e5da:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    e5dc:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    e5de:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    e5e0:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    e5e2:	2280      	movs	r2, #128	; 0x80
    e5e4:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    e5e6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    e5ea:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    e5ee:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e5f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e5f6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    e5fa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    e5fe:	2b00      	cmp	r3, #0
    e600:	d1fb      	bne.n	e5fa <usb_isr+0x4c2>
    e602:	e5ea      	b.n	e1da <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    e604:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e606:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    e60a:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    e60c:	4936      	ldr	r1, [pc, #216]	; (e6e8 <usb_isr+0x5b0>)
    e60e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e610:	8809      	ldrh	r1, [r1, #0]
    e612:	42a1      	cmp	r1, r4
    e614:	d02f      	beq.n	e676 <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    e616:	f246 4221 	movw	r2, #25633	; 0x6421
    e61a:	4291      	cmp	r1, r2
    e61c:	f47f ae30 	bne.w	e280 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    e620:	4a30      	ldr	r2, [pc, #192]	; (e6e4 <usb_isr+0x5ac>)
    e622:	7811      	ldrb	r1, [r2, #0]
    e624:	2901      	cmp	r1, #1
    e626:	f47f ae2b 	bne.w	e280 <usb_isr+0x148>
    e62a:	7852      	ldrb	r2, [r2, #1]
    e62c:	2a40      	cmp	r2, #64	; 0x40
    e62e:	f47f ae27 	bne.w	e280 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    e632:	4a2b      	ldr	r2, [pc, #172]	; (e6e0 <usb_isr+0x5a8>)
    e634:	2119      	movs	r1, #25
    e636:	7011      	strb	r1, [r2, #0]
    e638:	e622      	b.n	e280 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    e63a:	03c9      	lsls	r1, r1, #15
    e63c:	d483      	bmi.n	e546 <usb_isr+0x40e>
    e63e:	e784      	b.n	e54a <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    e640:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    e642:	f891 a000 	ldrb.w	sl, [r1]
    e646:	4582      	cmp	sl, r0
    e648:	bf28      	it	cs
    e64a:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    e64c:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    e650:	d135      	bne.n	e6be <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e652:	4b2a      	ldr	r3, [pc, #168]	; (e6fc <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e654:	f8df b0bc 	ldr.w	fp, [pc, #188]	; e714 <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    e658:	7819      	ldrb	r1, [r3, #0]
    e65a:	4a29      	ldr	r2, [pc, #164]	; (e700 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e65c:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    e65e:	4b29      	ldr	r3, [pc, #164]	; (e704 <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    e660:	2900      	cmp	r1, #0
    e662:	bf0c      	ite	eq
    e664:	4611      	moveq	r1, r2
    e666:	4619      	movne	r1, r3
    e668:	4652      	mov	r2, sl
    e66a:	f7ff f86f 	bl	d74c <memcpy>
					usb_descriptor_buffer[1] = 7;
    e66e:	2307      	movs	r3, #7
    e670:	f88b 3001 	strb.w	r3, [fp, #1]
    e674:	e677      	b.n	e366 <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    e676:	b280      	uxth	r0, r0
    e678:	2800      	cmp	r0, #0
    e67a:	f47f ae01 	bne.w	e280 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e67e:	4919      	ldr	r1, [pc, #100]	; (e6e4 <usb_isr+0x5ac>)
    e680:	4c21      	ldr	r4, [pc, #132]	; (e708 <usb_isr+0x5d0>)
    e682:	c903      	ldmia	r1, {r0, r1}
    e684:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    e686:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    e688:	ea4f 4111 	mov.w	r1, r1, lsr #16
    e68c:	6020      	str	r0, [r4, #0]
    e68e:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    e690:	f47f adf6 	bne.w	e280 <usb_isr+0x148>
	__disable_irq();
    e694:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    e696:	481d      	ldr	r0, [pc, #116]	; (e70c <usb_isr+0x5d4>)
    e698:	7801      	ldrb	r1, [r0, #0]
    e69a:	f041 0108 	orr.w	r1, r1, #8
    e69e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    e6a0:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    e6a4:	060d      	lsls	r5, r1, #24
    e6a6:	d405      	bmi.n	e6b4 <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e6a8:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e6aa:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    e6ac:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    e6b0:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    e6b4:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    e6b6:	4a16      	ldr	r2, [pc, #88]	; (e710 <usb_isr+0x5d8>)
    e6b8:	2150      	movs	r1, #80	; 0x50
    e6ba:	7011      	strb	r1, [r2, #0]
    e6bc:	e5e0      	b.n	e280 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    e6be:	f8df b054 	ldr.w	fp, [pc, #84]	; e714 <usb_isr+0x5dc>
    e6c2:	4652      	mov	r2, sl
    e6c4:	4658      	mov	r0, fp
    e6c6:	f7ff f841 	bl	d74c <memcpy>
    e6ca:	e64c      	b.n	e366 <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    e6cc:	2003      	movs	r0, #3
    e6ce:	f7ff fd1d 	bl	e10c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    e6d2:	f00b feed 	bl	1a4b0 <___reboot_Teensyduino__veneer>
    e6d6:	bf00      	nop
    e6d8:	00cc0002 	.word	0x00cc0002
    e6dc:	20009ac0 	.word	0x20009ac0
    e6e0:	20009487 	.word	0x20009487
    e6e4:	20028ac0 	.word	0x20028ac0
    e6e8:	2000c1c0 	.word	0x2000c1c0
    e6ec:	20028be4 	.word	0x20028be4
    e6f0:	2002935c 	.word	0x2002935c
    e6f4:	2002937c 	.word	0x2002937c
    e6f8:	200293b2 	.word	0x200293b2
    e6fc:	200293b4 	.word	0x200293b4
    e700:	600029c8 	.word	0x600029c8
    e704:	6000295c 	.word	0x6000295c
    e708:	20029374 	.word	0x20029374
    e70c:	200293ad 	.word	0x200293ad
    e710:	200293b5 	.word	0x200293b5
    e714:	20200800 	.word	0x20200800

0000e718 <usb_config_rx>:
{
    e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e71c:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e71e:	1e83      	subs	r3, r0, #2
    e720:	2b03      	cmp	r3, #3
    e722:	d901      	bls.n	e728 <usb_config_rx+0x10>
}
    e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e728:	f8df 904c 	ldr.w	r9, [pc, #76]	; e778 <usb_config_rx+0x60>
    e72c:	4615      	mov	r5, r2
    e72e:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    e730:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e732:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    e736:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    e738:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    e73c:	2100      	movs	r1, #0
    e73e:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e742:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    e744:	f003 f890 	bl	11868 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e748:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    e74c:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e74e:	0952      	lsrs	r2, r2, #5
    e750:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    e754:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    e758:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    e75c:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    e760:	2f00      	cmp	r7, #0
    e762:	d0df      	beq.n	e724 <usb_config_rx+0xc>
    e764:	4a03      	ldr	r2, [pc, #12]	; (e774 <usb_config_rx+0x5c>)
    e766:	40b3      	lsls	r3, r6
    e768:	6811      	ldr	r1, [r2, #0]
    e76a:	430b      	orrs	r3, r1
    e76c:	6013      	str	r3, [r2, #0]
}
    e76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e772:	bf00      	nop
    e774:	20028acc 	.word	0x20028acc
    e778:	20000000 	.word	0x20000000

0000e77c <usb_config_tx>:
{
    e77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e780:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    e782:	1e81      	subs	r1, r0, #2
    e784:	2903      	cmp	r1, #3
    e786:	d901      	bls.n	e78c <usb_config_tx+0x10>
}
    e788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e78c:	01c7      	lsls	r7, r0, #7
    e78e:	f8df 904c 	ldr.w	r9, [pc, #76]	; e7dc <usb_config_tx+0x60>
    e792:	4692      	mov	sl, r2
    e794:	4604      	mov	r4, r0
    e796:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    e798:	223c      	movs	r2, #60	; 0x3c
    e79a:	2100      	movs	r1, #0
    e79c:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    e79e:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e7a2:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    e7a4:	f108 0004 	add.w	r0, r8, #4
    e7a8:	f003 f85e 	bl	11868 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    e7ac:	faba f28a 	clz	r2, sl
    e7b0:	0952      	lsrs	r2, r2, #5
    e7b2:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    e7b6:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    e7ba:	2201      	movs	r2, #1
	qh->callback_function = callback;
    e7bc:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    e7c0:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    e7c4:	2e00      	cmp	r6, #0
    e7c6:	d0df      	beq.n	e788 <usb_config_tx+0xc>
    e7c8:	4b03      	ldr	r3, [pc, #12]	; (e7d8 <usb_config_tx+0x5c>)
    e7ca:	3410      	adds	r4, #16
    e7cc:	6819      	ldr	r1, [r3, #0]
    e7ce:	40a2      	lsls	r2, r4
    e7d0:	430a      	orrs	r2, r1
    e7d2:	601a      	str	r2, [r3, #0]
}
    e7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7d8:	20028acc 	.word	0x20028acc
    e7dc:	20000000 	.word	0x20000000

0000e7e0 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    e7e0:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    e7e2:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    e7e4:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    e7e6:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    e7ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    e7ee:	b410      	push	{r4}
	transfer->next = 1;
    e7f0:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    e7f2:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    e7f4:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    e7f8:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    e7fa:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    e7fe:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    e802:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    e804:	6181      	str	r1, [r0, #24]
}
    e806:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    e80a:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    e80e:	4770      	bx	lr

0000e810 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e810:	1e83      	subs	r3, r0, #2
{
    e812:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e814:	2b03      	cmp	r3, #3
    e816:	d900      	bls.n	e81a <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    e818:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e81a:	4b06      	ldr	r3, [pc, #24]	; (e834 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    e81c:	f100 0110 	add.w	r1, r0, #16
    e820:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    e824:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    e828:	fa0c f101 	lsl.w	r1, ip, r1
    e82c:	3040      	adds	r0, #64	; 0x40
    e82e:	f7ff bbc1 	b.w	dfb4 <schedule_transfer>
    e832:	bf00      	nop
    e834:	20000000 	.word	0x20000000

0000e838 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e838:	1e83      	subs	r3, r0, #2
{
    e83a:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    e83c:	2b03      	cmp	r3, #3
    e83e:	d900      	bls.n	e842 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    e840:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    e842:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    e844:	4b02      	ldr	r3, [pc, #8]	; (e850 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    e846:	4081      	lsls	r1, r0
    e848:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    e84c:	f7ff bbb2 	b.w	dfb4 <schedule_transfer>
    e850:	20000000 	.word	0x20000000

0000e854 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    e854:	4a08      	ldr	r2, [pc, #32]	; (e878 <usb_transfer_status+0x24>)
    e856:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    e85a:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    e85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    e860:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    e864:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    e866:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    e86a:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    e86c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    e870:	d0f3      	beq.n	e85a <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    e872:	4608      	mov	r0, r1
    e874:	4770      	bx	lr
    e876:	bf00      	nop
    e878:	402e0000 	.word	0x402e0000

0000e87c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e87c:	4a12      	ldr	r2, [pc, #72]	; (e8c8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    e87e:	4b13      	ldr	r3, [pc, #76]	; (e8cc <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    e880:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    e884:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    e888:	4298      	cmp	r0, r3
{
    e88a:	b510      	push	{r4, lr}
    e88c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    e88e:	d202      	bcs.n	e896 <usb_init_serialnumber+0x1a>
    e890:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e894:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    e896:	4c0e      	ldr	r4, [pc, #56]	; (e8d0 <usb_init_serialnumber+0x54>)
    e898:	a901      	add	r1, sp, #4
    e89a:	220a      	movs	r2, #10
    e89c:	f7fe fff2 	bl	d884 <ultoa>
	for (i=0; i<10; i++) {
    e8a0:	a901      	add	r1, sp, #4
    e8a2:	2300      	movs	r3, #0
    e8a4:	4620      	mov	r0, r4
		char c = buf[i];
    e8a6:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    e8aa:	3301      	adds	r3, #1
		if (!c) break;
    e8ac:	b13a      	cbz	r2, e8be <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    e8ae:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    e8b0:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    e8b4:	d1f7      	bne.n	e8a6 <usb_init_serialnumber+0x2a>
    e8b6:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e8b8:	7023      	strb	r3, [r4, #0]
}
    e8ba:	b004      	add	sp, #16
    e8bc:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    e8be:	005b      	lsls	r3, r3, #1
    e8c0:	b2db      	uxtb	r3, r3
    e8c2:	7023      	strb	r3, [r4, #0]
}
    e8c4:	b004      	add	sp, #16
    e8c6:	bd10      	pop	{r4, pc}
    e8c8:	401f4400 	.word	0x401f4400
    e8cc:	00989680 	.word	0x00989680
    e8d0:	2000946c 	.word	0x2000946c

0000e8d4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    e8d4:	f000 bc5c 	b.w	f190 <usb_serial_flush_input>

0000e8d8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    e8d8:	f000 bc4e 	b.w	f178 <usb_serial_available>

0000e8dc <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    e8dc:	f000 bcea 	b.w	f2b4 <usb_serial_flush_output>

0000e8e0 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    e8e0:	f000 bcc0 	b.w	f264 <usb_serial_write_buffer_free>

0000e8e4 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    e8e4:	4608      	mov	r0, r1
    e8e6:	4611      	mov	r1, r2
    e8e8:	f000 bcb0 	b.w	f24c <usb_serial_write>

0000e8ec <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    e8ec:	4a02      	ldr	r2, [pc, #8]	; (e8f8 <txEvent_event+0xc>)
    e8ee:	6813      	ldr	r3, [r2, #0]
    e8f0:	3301      	adds	r3, #1
    e8f2:	6013      	str	r3, [r2, #0]
    e8f4:	4770      	bx	lr
    e8f6:	bf00      	nop
    e8f8:	20028b5c 	.word	0x20028b5c

0000e8fc <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    e8fc:	4a0e      	ldr	r2, [pc, #56]	; (e938 <rx_event+0x3c>)
{
    e8fe:	b410      	push	{r4}
	uint32_t head = rx_head;
    e900:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    e902:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    e904:	3301      	adds	r3, #1
    e906:	2b04      	cmp	r3, #4
    e908:	d811      	bhi.n	e92e <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    e90a:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e90e:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    e910:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e914:	4a09      	ldr	r2, [pc, #36]	; (e93c <rx_event+0x40>)
    e916:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    e91a:	4809      	ldr	r0, [pc, #36]	; (e940 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    e91c:	8812      	ldrh	r2, [r2, #0]
    e91e:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    e920:	4908      	ldr	r1, [pc, #32]	; (e944 <rx_event+0x48>)
    e922:	54cc      	strb	r4, [r1, r3]
}
    e924:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    e928:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    e92c:	4770      	bx	lr
    e92e:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    e932:	4663      	mov	r3, ip
    e934:	e7eb      	b.n	e90e <rx_event+0x12>
    e936:	bf00      	nop
    e938:	200293a9 	.word	0x200293a9
    e93c:	20029394 	.word	0x20029394
    e940:	20028c24 	.word	0x20028c24
    e944:	20028c10 	.word	0x20028c10

0000e948 <rx_queue_transfer>:
{
    e948:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    e94a:	4915      	ldr	r1, [pc, #84]	; (e9a0 <rx_queue_transfer+0x58>)
{
    e94c:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    e94e:	4d15      	ldr	r5, [pc, #84]	; (e9a4 <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    e950:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    e954:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e958:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    e95a:	448c      	add	ip, r1
	asm("dsb");
    e95c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e960:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e964:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    e968:	3220      	adds	r2, #32
	} while (location < end_addr);
    e96a:	4594      	cmp	ip, r2
    e96c:	d8fa      	bhi.n	e964 <rx_queue_transfer+0x1c>
	asm("dsb");
    e96e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e972:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e976:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e978:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e97c:	4d0a      	ldr	r5, [pc, #40]	; (e9a8 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e97e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    e982:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    e986:	4628      	mov	r0, r5
    e988:	f7ff ff2a 	bl	e7e0 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    e98c:	4629      	mov	r1, r5
    e98e:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    e990:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    e994:	f7ff ff50 	bl	e838 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    e998:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    e99c:	bd70      	pop	{r4, r5, r6, pc}
    e99e:	bf00      	nop
    e9a0:	20200880 	.word	0x20200880
    e9a4:	20029394 	.word	0x20029394
    e9a8:	2000bf40 	.word	0x2000bf40

0000e9ac <usb_mtp_configure>:
	if (usb_high_speed) {
    e9ac:	4b1f      	ldr	r3, [pc, #124]	; (ea2c <usb_mtp_configure+0x80>)
{
    e9ae:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    e9b0:	781b      	ldrb	r3, [r3, #0]
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d037      	beq.n	ea26 <usb_mtp_configure+0x7a>
    e9b6:	f44f 7300 	mov.w	r3, #512	; 0x200
    e9ba:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    e9bc:	491c      	ldr	r1, [pc, #112]	; (ea30 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e9be:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    e9c0:	4d1c      	ldr	r5, [pc, #112]	; (ea34 <usb_mtp_configure+0x88>)
	tx_head = 0;
    e9c2:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    e9c4:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e9c6:	2100      	movs	r1, #0
    e9c8:	481b      	ldr	r0, [pc, #108]	; (ea38 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    e9ca:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    e9cc:	f002 ff4c 	bl	11868 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    e9d0:	2280      	movs	r2, #128	; 0x80
    e9d2:	2100      	movs	r1, #0
    e9d4:	4819      	ldr	r0, [pc, #100]	; (ea3c <usb_mtp_configure+0x90>)
    e9d6:	f002 ff47 	bl	11868 <memset>
	rx_head = 0;
    e9da:	4b19      	ldr	r3, [pc, #100]	; (ea40 <usb_mtp_configure+0x94>)
	tx_head = 0;
    e9dc:	4a19      	ldr	r2, [pc, #100]	; (ea44 <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    e9de:	4631      	mov	r1, r6
	rx_head = 0;
    e9e0:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    e9e2:	2004      	movs	r0, #4
	rx_tail = 0;
    e9e4:	4b18      	ldr	r3, [pc, #96]	; (ea48 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    e9e6:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    e9e8:	4622      	mov	r2, r4
	rx_tail = 0;
    e9ea:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    e9ec:	4623      	mov	r3, r4
    e9ee:	f7ff fec5 	bl	e77c <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    e9f2:	4622      	mov	r2, r4
    e9f4:	8829      	ldrh	r1, [r5, #0]
    e9f6:	2004      	movs	r0, #4
    e9f8:	4b14      	ldr	r3, [pc, #80]	; (ea4c <usb_mtp_configure+0xa0>)
    e9fa:	f7ff fe8d 	bl	e718 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    e9fe:	4622      	mov	r2, r4
    ea00:	4b13      	ldr	r3, [pc, #76]	; (ea50 <usb_mtp_configure+0xa4>)
    ea02:	2120      	movs	r1, #32
    ea04:	2005      	movs	r0, #5
    ea06:	f7ff feb9 	bl	e77c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ea0a:	4620      	mov	r0, r4
    ea0c:	f7ff ff9c 	bl	e948 <rx_queue_transfer>
    ea10:	2001      	movs	r0, #1
    ea12:	f7ff ff99 	bl	e948 <rx_queue_transfer>
    ea16:	2002      	movs	r0, #2
    ea18:	f7ff ff96 	bl	e948 <rx_queue_transfer>
    ea1c:	2003      	movs	r0, #3
}
    ea1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ea22:	f7ff bf91 	b.w	e948 <rx_queue_transfer>
    ea26:	2340      	movs	r3, #64	; 0x40
    ea28:	461e      	mov	r6, r3
    ea2a:	e7c7      	b.n	e9bc <usb_mtp_configure+0x10>
    ea2c:	200293b4 	.word	0x200293b4
    ea30:	2002939a 	.word	0x2002939a
    ea34:	20029394 	.word	0x20029394
    ea38:	2000c0c0 	.word	0x2000c0c0
    ea3c:	2000bf40 	.word	0x2000bf40
    ea40:	200293a9 	.word	0x200293a9
    ea44:	200293af 	.word	0x200293af
    ea48:	200293ab 	.word	0x200293ab
    ea4c:	0000e8fd 	.word	0x0000e8fd
    ea50:	0000e8ed 	.word	0x0000e8ed

0000ea54 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    ea54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    ea58:	4e20      	ldr	r6, [pc, #128]	; (eadc <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    ea5a:	f8df b094 	ldr.w	fp, [pc, #148]	; eaf0 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    ea5e:	4f20      	ldr	r7, [pc, #128]	; (eae0 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    ea60:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    ea64:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    ea68:	783b      	ldrb	r3, [r7, #0]
    ea6a:	b353      	cbz	r3, eac2 <usb_mtp_recv+0x6e>
    ea6c:	4682      	mov	sl, r0
    ea6e:	460d      	mov	r5, r1
    ea70:	b2e4      	uxtb	r4, r4
    ea72:	f8df 8080 	ldr.w	r8, [pc, #128]	; eaf4 <usb_mtp_recv+0xa0>
    ea76:	e008      	b.n	ea8a <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    ea78:	6833      	ldr	r3, [r6, #0]
    ea7a:	eba3 0309 	sub.w	r3, r3, r9
    ea7e:	42ab      	cmp	r3, r5
    ea80:	d224      	bcs.n	eacc <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    ea82:	f000 fc61 	bl	f348 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    ea86:	783b      	ldrb	r3, [r7, #0]
    ea88:	b1db      	cbz	r3, eac2 <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    ea8a:	f898 3000 	ldrb.w	r3, [r8]
    ea8e:	429c      	cmp	r4, r3
    ea90:	d0f2      	beq.n	ea78 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    ea92:	3401      	adds	r4, #1
    ea94:	2c04      	cmp	r4, #4
    ea96:	d81d      	bhi.n	ead4 <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    ea98:	b2e3      	uxtb	r3, r4
    ea9a:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    ea9e:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    eaa0:	4b10      	ldr	r3, [pc, #64]	; (eae4 <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    eaa2:	4a11      	ldr	r2, [pc, #68]	; (eae8 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    eaa4:	4911      	ldr	r1, [pc, #68]	; (eaec <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    eaa6:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    eaa8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    eaac:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    eab0:	4622      	mov	r2, r4
    eab2:	f7fe fe4b 	bl	d74c <memcpy>
	rx_queue_transfer(i);
    eab6:	4628      	mov	r0, r5
    eab8:	f7ff ff46 	bl	e948 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    eabc:	4620      	mov	r0, r4
    eabe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    eac2:	f04f 34ff 	mov.w	r4, #4294967295
}
    eac6:	4620      	mov	r0, r4
    eac8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    eacc:	2400      	movs	r4, #0
}
    eace:	4620      	mov	r0, r4
    ead0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ead4:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    ead6:	461c      	mov	r4, r3
    ead8:	e7df      	b.n	ea9a <usb_mtp_recv+0x46>
    eada:	bf00      	nop
    eadc:	2002935c 	.word	0x2002935c
    eae0:	200293b3 	.word	0x200293b3
    eae4:	20028c24 	.word	0x20028c24
    eae8:	20028c10 	.word	0x20028c10
    eaec:	20200880 	.word	0x20200880
    eaf0:	200293ab 	.word	0x200293ab
    eaf4:	200293a9 	.word	0x200293a9

0000eaf8 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    eaf8:	4b07      	ldr	r3, [pc, #28]	; (eb18 <usb_mtp_available+0x20>)
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    eb00:	b14b      	cbz	r3, eb16 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    eb02:	4a06      	ldr	r2, [pc, #24]	; (eb1c <usb_mtp_available+0x24>)
    eb04:	4b06      	ldr	r3, [pc, #24]	; (eb20 <usb_mtp_available+0x28>)
    eb06:	7812      	ldrb	r2, [r2, #0]
    eb08:	781b      	ldrb	r3, [r3, #0]
    eb0a:	429a      	cmp	r2, r3
    eb0c:	d002      	beq.n	eb14 <usb_mtp_available+0x1c>
    eb0e:	4b05      	ldr	r3, [pc, #20]	; (eb24 <usb_mtp_available+0x2c>)
    eb10:	8818      	ldrh	r0, [r3, #0]
    eb12:	4770      	bx	lr
	if (!usb_configuration) return 0;
    eb14:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    eb16:	4770      	bx	lr
    eb18:	200293b3 	.word	0x200293b3
    eb1c:	200293a9 	.word	0x200293a9
    eb20:	200293ab 	.word	0x200293ab
    eb24:	20029394 	.word	0x20029394

0000eb28 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    eb28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    eb2c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; ebf0 <usb_mtp_send+0xc8>
    eb30:	4c2a      	ldr	r4, [pc, #168]	; (ebdc <usb_mtp_send+0xb4>)
    eb32:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    eb36:	4e2a      	ldr	r6, [pc, #168]	; (ebe0 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    eb38:	4f2a      	ldr	r7, [pc, #168]	; (ebe4 <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    eb3a:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    eb3e:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    eb42:	783b      	ldrb	r3, [r7, #0]
    eb44:	2b00      	cmp	r3, #0
    eb46:	d042      	beq.n	ebce <usb_mtp_send+0xa6>
    eb48:	4682      	mov	sl, r0
    eb4a:	4689      	mov	r9, r1
    eb4c:	4615      	mov	r5, r2
    eb4e:	e008      	b.n	eb62 <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    eb50:	6833      	ldr	r3, [r6, #0]
    eb52:	eba3 0308 	sub.w	r3, r3, r8
    eb56:	42ab      	cmp	r3, r5
    eb58:	d83d      	bhi.n	ebd6 <usb_mtp_send+0xae>
		yield();
    eb5a:	f000 fbf5 	bl	f348 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    eb5e:	783b      	ldrb	r3, [r7, #0]
    eb60:	b3ab      	cbz	r3, ebce <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    eb62:	4620      	mov	r0, r4
    eb64:	f7ff fe76 	bl	e854 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    eb68:	0603      	lsls	r3, r0, #24
    eb6a:	d4f1      	bmi.n	eb50 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    eb6c:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    eb70:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    eb72:	4d1d      	ldr	r5, [pc, #116]	; (ebe8 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    eb74:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    eb76:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    eb7a:	4628      	mov	r0, r5
    eb7c:	f7fe fde6 	bl	d74c <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    eb80:	4a1a      	ldr	r2, [pc, #104]	; (ebec <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    eb82:	462b      	mov	r3, r5
    eb84:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    eb86:	442a      	add	r2, r5
	asm("dsb");
    eb88:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    eb8c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    eb90:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    eb94:	3320      	adds	r3, #32
	} while (location < end_addr);
    eb96:	429a      	cmp	r2, r3
    eb98:	d8fa      	bhi.n	eb90 <usb_mtp_send+0x68>
	asm("dsb");
    eb9a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eb9e:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    eba2:	2300      	movs	r3, #0
    eba4:	4629      	mov	r1, r5
    eba6:	464a      	mov	r2, r9
    eba8:	4620      	mov	r0, r4
    ebaa:	f7ff fe19 	bl	e7e0 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    ebae:	4621      	mov	r1, r4
    ebb0:	2004      	movs	r0, #4
    ebb2:	f7ff fe2d 	bl	e810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ebb6:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    ebba:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    ebbc:	3301      	adds	r3, #1
    ebbe:	b2db      	uxtb	r3, r3
    ebc0:	2b03      	cmp	r3, #3
    ebc2:	bf88      	it	hi
    ebc4:	2300      	movhi	r3, #0
    ebc6:	f88b 3000 	strb.w	r3, [fp]
}
    ebca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    ebce:	f04f 30ff 	mov.w	r0, #4294967295
}
    ebd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    ebd6:	2000      	movs	r0, #0
}
    ebd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebdc:	2000c0c0 	.word	0x2000c0c0
    ebe0:	2002935c 	.word	0x2002935c
    ebe4:	200293b3 	.word	0x200293b3
    ebe8:	20201080 	.word	0x20201080
    ebec:	2002939a 	.word	0x2002939a
    ebf0:	200293af 	.word	0x200293af

0000ebf4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    ebf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    ebf6:	4c14      	ldr	r4, [pc, #80]	; (ec48 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ebf8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    ebfc:	4e13      	ldr	r6, [pc, #76]	; (ec4c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ebfe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    ec02:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    ec06:	4f12      	ldr	r7, [pc, #72]	; (ec50 <rx_queue_transfer+0x5c>)
    ec08:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    ec0c:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ec0e:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    ec12:	4621      	mov	r1, r4
    ec14:	883a      	ldrh	r2, [r7, #0]
    ec16:	4630      	mov	r0, r6
    ec18:	f7ff fde2 	bl	e7e0 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    ec1c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    ec1e:	4423      	add	r3, r4
	asm("dsb");
    ec20:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    ec24:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    ec28:	3420      	adds	r4, #32
	} while (location < end_addr);
    ec2a:	42a3      	cmp	r3, r4
    ec2c:	d8fa      	bhi.n	ec24 <rx_queue_transfer+0x30>
	asm("dsb");
    ec2e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ec32:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    ec36:	2003      	movs	r0, #3
    ec38:	4631      	mov	r1, r6
    ec3a:	f7ff fdfd 	bl	e838 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ec3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    ec42:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    ec46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ec48:	20201880 	.word	0x20201880
    ec4c:	2000bfc0 	.word	0x2000bfc0
    ec50:	20029396 	.word	0x20029396

0000ec54 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ec54:	4b24      	ldr	r3, [pc, #144]	; (ece8 <rx_event+0x94>)
{
    ec56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ec5a:	881c      	ldrh	r4, [r3, #0]
    ec5c:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    ec5e:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    ec60:	f3c3 430e 	ubfx	r3, r3, #16, #15
    ec64:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    ec66:	2c00      	cmp	r4, #0
    ec68:	dd24      	ble.n	ecb4 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    ec6a:	4920      	ldr	r1, [pc, #128]	; (ecec <rx_event+0x98>)
		if (head != rx_tail) {
    ec6c:	4820      	ldr	r0, [pc, #128]	; (ecf0 <rx_event+0x9c>)
		uint32_t head = rx_head;
    ec6e:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    ec70:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    ec72:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    ec74:	4e1f      	ldr	r6, [pc, #124]	; (ecf4 <rx_event+0xa0>)
		if (head != rx_tail) {
    ec76:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    ec78:	481f      	ldr	r0, [pc, #124]	; (ecf8 <rx_event+0xa4>)
		if (head != rx_tail) {
    ec7a:	d007      	beq.n	ec8c <rx_event+0x38>
			uint32_t ii = rx_list[head];
    ec7c:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    ec80:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    ec84:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    ec88:	4294      	cmp	r4, r2
    ec8a:	d918      	bls.n	ecbe <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    ec8c:	3301      	adds	r3, #1
		rx_index[i] = 0;
    ec8e:	2200      	movs	r2, #0
		rx_count[i] = len;
    ec90:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    ec94:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    ec96:	4e19      	ldr	r6, [pc, #100]	; (ecfc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    ec98:	bf88      	it	hi
    ec9a:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    ec9c:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    eca0:	bf98      	it	ls
    eca2:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    eca4:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    eca6:	4b16      	ldr	r3, [pc, #88]	; (ed00 <rx_event+0xac>)
		rx_head = head;
    eca8:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    ecaa:	681a      	ldr	r2, [r3, #0]
    ecac:	4414      	add	r4, r2
    ecae:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    ecb4:	4628      	mov	r0, r5
}
    ecb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    ecba:	f7ff bf9b 	b.w	ebf4 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ecbe:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    ecc2:	4910      	ldr	r1, [pc, #64]	; (ed04 <rx_event+0xb0>)
    ecc4:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    ecc6:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    ecc8:	4408      	add	r0, r1
    ecca:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    ecce:	f7fe fd3d 	bl	d74c <memcpy>
				rx_available += len;
    ecd2:	4a0b      	ldr	r2, [pc, #44]	; (ed00 <rx_event+0xac>)
				rx_queue_transfer(i);
    ecd4:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    ecd6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    ecda:	6813      	ldr	r3, [r2, #0]
    ecdc:	4423      	add	r3, r4
}
    ecde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    ece2:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    ece4:	f7ff bf86 	b.w	ebf4 <rx_queue_transfer>
    ece8:	20029396 	.word	0x20029396
    ecec:	200293aa 	.word	0x200293aa
    ecf0:	200293ac 	.word	0x200293ac
    ecf4:	20028bf0 	.word	0x20028bf0
    ecf8:	20028c18 	.word	0x20028c18
    ecfc:	20028c00 	.word	0x20028c00
    ed00:	20028bec 	.word	0x20028bec
    ed04:	20201880 	.word	0x20201880

0000ed08 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    ed08:	4b1d      	ldr	r3, [pc, #116]	; (ed80 <usb_serial_flush_callback+0x78>)
    ed0a:	781a      	ldrb	r2, [r3, #0]
    ed0c:	2a00      	cmp	r2, #0
    ed0e:	d136      	bne.n	ed7e <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    ed10:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    ed14:	4a1b      	ldr	r2, [pc, #108]	; (ed84 <usb_serial_flush_callback+0x7c>)
    ed16:	7812      	ldrb	r2, [r2, #0]
    ed18:	b38a      	cbz	r2, ed7e <usb_serial_flush_callback+0x76>
{
    ed1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    ed1e:	4d1a      	ldr	r5, [pc, #104]	; (ed88 <usb_serial_flush_callback+0x80>)
    ed20:	882a      	ldrh	r2, [r5, #0]
    ed22:	b352      	cbz	r2, ed7a <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ed24:	4e19      	ldr	r6, [pc, #100]	; (ed8c <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    ed26:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    ed2a:	4f19      	ldr	r7, [pc, #100]	; (ed90 <usb_serial_flush_callback+0x88>)
    ed2c:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ed2e:	4c19      	ldr	r4, [pc, #100]	; (ed94 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    ed30:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ed34:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ed38:	4642      	mov	r2, r8
    ed3a:	4638      	mov	r0, r7
    ed3c:	4621      	mov	r1, r4
    ed3e:	f7ff fd4f 	bl	e7e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    ed42:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    ed46:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ed4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    ed4e:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ed52:	3420      	adds	r4, #32
	} while (location < end_addr);
    ed54:	42a2      	cmp	r2, r4
    ed56:	d8fa      	bhi.n	ed4e <usb_serial_flush_callback+0x46>
	asm("dsb");
    ed58:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ed5c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ed60:	2003      	movs	r0, #3
    ed62:	4639      	mov	r1, r7
    ed64:	f7ff fd54 	bl	e810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ed68:	7833      	ldrb	r3, [r6, #0]
    ed6a:	3301      	adds	r3, #1
    ed6c:	b2db      	uxtb	r3, r3
    ed6e:	2b03      	cmp	r3, #3
    ed70:	bf88      	it	hi
    ed72:	2300      	movhi	r3, #0
    ed74:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    ed76:	2300      	movs	r3, #0
    ed78:	802b      	strh	r3, [r5, #0]
}
    ed7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed7e:	4770      	bx	lr
    ed80:	200293b1 	.word	0x200293b1
    ed84:	200293b3 	.word	0x200293b3
    ed88:	20029398 	.word	0x20029398
    ed8c:	200293b0 	.word	0x200293b0
    ed90:	2000c140 	.word	0x2000c140
    ed94:	20202880 	.word	0x20202880

0000ed98 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed9c:	b085      	sub	sp, #20
	while (size > 0) {
    ed9e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    eda2:	2900      	cmp	r1, #0
    eda4:	f000 80bf 	beq.w	ef26 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    eda8:	2300      	movs	r3, #0
    edaa:	4c60      	ldr	r4, [pc, #384]	; (ef2c <usb_serial_write.part.0+0x194>)
    edac:	f8df 8198 	ldr.w	r8, [pc, #408]	; ef48 <usb_serial_write.part.0+0x1b0>
    edb0:	f8df a198 	ldr.w	sl, [pc, #408]	; ef4c <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    edb4:	4f5e      	ldr	r7, [pc, #376]	; (ef30 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    edb6:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    edb8:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    edba:	4a5e      	ldr	r2, [pc, #376]	; (ef34 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    edbc:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    edbe:	4b5e      	ldr	r3, [pc, #376]	; (ef38 <usb_serial_write.part.0+0x1a0>)
    edc0:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    edc2:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    edc6:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    edca:	2b00      	cmp	r3, #0
    edcc:	f040 80a7 	bne.w	ef1e <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    edd0:	461e      	mov	r6, r3
		int waiting=0;
    edd2:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    edd4:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    edd6:	4648      	mov	r0, r9
    edd8:	f7ff fd3c 	bl	e854 <usb_transfer_status>
			if (!(status & 0x80)) {
    eddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    ede0:	f000 808c 	beq.w	eefc <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    ede4:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    ede8:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    edec:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    edf0:	b905      	cbnz	r5, edf4 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    edf2:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    edf4:	2b00      	cmp	r3, #0
    edf6:	d17d      	bne.n	eef4 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    edf8:	683b      	ldr	r3, [r7, #0]
    edfa:	1b9b      	subs	r3, r3, r6
    edfc:	2b78      	cmp	r3, #120	; 0x78
    edfe:	f200 8087 	bhi.w	ef10 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    ee02:	4b4e      	ldr	r3, [pc, #312]	; (ef3c <usb_serial_write.part.0+0x1a4>)
    ee04:	781b      	ldrb	r3, [r3, #0]
    ee06:	2b00      	cmp	r3, #0
    ee08:	d074      	beq.n	eef4 <usb_serial_write.part.0+0x15c>
			yield();
    ee0a:	f000 fa9d 	bl	f348 <yield>
			tx_noautoflush = 1;
    ee0e:	2201      	movs	r2, #1
		while (!tx_available) {
    ee10:	f8b8 3000 	ldrh.w	r3, [r8]
    ee14:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    ee16:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    ee18:	2b00      	cmp	r3, #0
    ee1a:	d0dc      	beq.n	edd6 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ee1c:	4a46      	ldr	r2, [pc, #280]	; (ef38 <usb_serial_write.part.0+0x1a0>)
    ee1e:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    ee22:	7811      	ldrb	r1, [r2, #0]
    ee24:	461a      	mov	r2, r3
    ee26:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    ee2a:	4d45      	ldr	r5, [pc, #276]	; (ef40 <usb_serial_write.part.0+0x1a8>)
    ee2c:	02c9      	lsls	r1, r1, #11
    ee2e:	4428      	add	r0, r5
		if (size >= tx_available) {
    ee30:	9d01      	ldr	r5, [sp, #4]
    ee32:	4295      	cmp	r5, r2
    ee34:	d217      	bcs.n	ee66 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    ee36:	9303      	str	r3, [sp, #12]
    ee38:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    ee3c:	462a      	mov	r2, r5
    ee3e:	f7fe fc85 	bl	d74c <memcpy>
			tx_available -= size;
    ee42:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ee44:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    ee48:	1b5b      	subs	r3, r3, r5
    ee4a:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ee4e:	4b3d      	ldr	r3, [pc, #244]	; (ef44 <usb_serial_write.part.0+0x1ac>)
    ee50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    ee54:	f3bf 8f4f 	dsb	sy
			sent += size;
    ee58:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    ee5a:	2300      	movs	r3, #0
			sent += size;
    ee5c:	4428      	add	r0, r5
		tx_noautoflush = 0;
    ee5e:	7023      	strb	r3, [r4, #0]
}
    ee60:	b005      	add	sp, #20
    ee62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ee66:	4b36      	ldr	r3, [pc, #216]	; (ef40 <usb_serial_write.part.0+0x1a8>)
    ee68:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    ee6a:	9902      	ldr	r1, [sp, #8]
    ee6c:	f7fe fc6e 	bl	d74c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ee70:	2300      	movs	r3, #0
    ee72:	f44f 6200 	mov.w	r2, #2048	; 0x800
    ee76:	4629      	mov	r1, r5
    ee78:	4648      	mov	r0, r9
    ee7a:	f7ff fcb1 	bl	e7e0 <usb_prepare_transfer>
	asm("dsb");
    ee7e:	f3bf 8f4f 	dsb	sy
    ee82:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    ee86:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    ee8a:	4293      	cmp	r3, r2
    ee8c:	bf34      	ite	cc
    ee8e:	2301      	movcc	r3, #1
    ee90:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    ee92:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ee96:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    ee9a:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    ee9e:	3520      	adds	r5, #32
	} while (location < end_addr);
    eea0:	42ab      	cmp	r3, r5
    eea2:	d1fa      	bne.n	ee9a <usb_serial_write.part.0+0x102>
	asm("dsb");
    eea4:	f3bf 8f4f 	dsb	sy
	asm("isb");
    eea8:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    eeac:	2003      	movs	r0, #3
    eeae:	4649      	mov	r1, r9
    eeb0:	f7ff fcae 	bl	e810 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    eeb4:	4a20      	ldr	r2, [pc, #128]	; (ef38 <usb_serial_write.part.0+0x1a0>)
    eeb6:	7813      	ldrb	r3, [r2, #0]
    eeb8:	3301      	adds	r3, #1
    eeba:	b2db      	uxtb	r3, r3
    eebc:	2b03      	cmp	r3, #3
    eebe:	bf84      	itt	hi
    eec0:	2300      	movhi	r3, #0
    eec2:	4a1d      	ldrhi	r2, [pc, #116]	; (ef38 <usb_serial_write.part.0+0x1a0>)
    eec4:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    eec6:	f8b8 3000 	ldrh.w	r3, [r8]
    eeca:	9a01      	ldr	r2, [sp, #4]
    eecc:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    eece:	9a00      	ldr	r2, [sp, #0]
    eed0:	441a      	add	r2, r3
			size -= tx_available;
    eed2:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    eed4:	9200      	str	r2, [sp, #0]
			data += tx_available;
    eed6:	9a02      	ldr	r2, [sp, #8]
    eed8:	441a      	add	r2, r3
			tx_available = 0;
    eeda:	2300      	movs	r3, #0
			data += tx_available;
    eedc:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    eede:	4a19      	ldr	r2, [pc, #100]	; (ef44 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    eee0:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    eee4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    eee8:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    eeec:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    eeee:	2900      	cmp	r1, #0
    eef0:	f47f af62 	bne.w	edb8 <usb_serial_write.part.0+0x20>
	return sent;
    eef4:	9800      	ldr	r0, [sp, #0]
}
    eef6:	b005      	add	sp, #20
    eef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    eefc:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ef00:	4b0d      	ldr	r3, [pc, #52]	; (ef38 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    ef02:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ef06:	7819      	ldrb	r1, [r3, #0]
				break;
    ef08:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    ef0a:	f8a8 2000 	strh.w	r2, [r8]
				break;
    ef0e:	e78a      	b.n	ee26 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    ef10:	2301      	movs	r3, #1
				return sent;
    ef12:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    ef14:	f88a 3000 	strb.w	r3, [sl]
}
    ef18:	b005      	add	sp, #20
    ef1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ef1e:	461a      	mov	r2, r3
    ef20:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    ef24:	e77f      	b.n	ee26 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    ef26:	9801      	ldr	r0, [sp, #4]
	return sent;
    ef28:	e7e5      	b.n	eef6 <usb_serial_write.part.0+0x15e>
    ef2a:	bf00      	nop
    ef2c:	200293b1 	.word	0x200293b1
    ef30:	2002935c 	.word	0x2002935c
    ef34:	2000c140 	.word	0x2000c140
    ef38:	200293b0 	.word	0x200293b0
    ef3c:	200293b3 	.word	0x200293b3
    ef40:	20202880 	.word	0x20202880
    ef44:	402e0000 	.word	0x402e0000
    ef48:	20029398 	.word	0x20029398
    ef4c:	200293ae 	.word	0x200293ae

0000ef50 <usb_serial_reset>:
}
    ef50:	4770      	bx	lr
    ef52:	bf00      	nop

0000ef54 <usb_serial_configure>:
	if (usb_high_speed) {
    ef54:	4b2d      	ldr	r3, [pc, #180]	; (f00c <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ef56:	2100      	movs	r1, #0
    ef58:	2280      	movs	r2, #128	; 0x80
    ef5a:	482d      	ldr	r0, [pc, #180]	; (f010 <usb_serial_configure+0xbc>)
{
    ef5c:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    ef5e:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    ef60:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    ef62:	4d2c      	ldr	r5, [pc, #176]	; (f014 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    ef64:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    ef66:	4e2c      	ldr	r6, [pc, #176]	; (f018 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    ef68:	bf0c      	ite	eq
    ef6a:	2340      	moveq	r3, #64	; 0x40
    ef6c:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    ef70:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    ef72:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    ef74:	f002 fc78 	bl	11868 <memset>
	tx_head = 0;
    ef78:	4a28      	ldr	r2, [pc, #160]	; (f01c <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    ef7a:	4621      	mov	r1, r4
	tx_available = 0;
    ef7c:	4b28      	ldr	r3, [pc, #160]	; (f020 <usb_serial_configure+0xcc>)
	tx_head = 0;
    ef7e:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    ef80:	f44f 7280 	mov.w	r2, #256	; 0x100
    ef84:	4827      	ldr	r0, [pc, #156]	; (f024 <usb_serial_configure+0xd0>)
	tx_available = 0;
    ef86:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    ef88:	f002 fc6e 	bl	11868 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    ef8c:	4a26      	ldr	r2, [pc, #152]	; (f028 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ef8e:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    ef90:	4b26      	ldr	r3, [pc, #152]	; (f02c <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ef92:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    ef94:	e9c2 4400 	strd	r4, r4, [r2]
    ef98:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    ef9c:	4a24      	ldr	r2, [pc, #144]	; (f030 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    ef9e:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    efa2:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    efa4:	4a23      	ldr	r2, [pc, #140]	; (f034 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    efa6:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    efaa:	4b23      	ldr	r3, [pc, #140]	; (f038 <usb_serial_configure+0xe4>)
    efac:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    efae:	4623      	mov	r3, r4
	rx_available = 0;
    efb0:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    efb2:	4622      	mov	r2, r4
    efb4:	f7ff fbe2 	bl	e77c <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    efb8:	4622      	mov	r2, r4
    efba:	8831      	ldrh	r1, [r6, #0]
    efbc:	2003      	movs	r0, #3
    efbe:	4b1f      	ldr	r3, [pc, #124]	; (f03c <usb_serial_configure+0xe8>)
    efc0:	f7ff fbaa 	bl	e718 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    efc4:	4623      	mov	r3, r4
    efc6:	2201      	movs	r2, #1
    efc8:	8829      	ldrh	r1, [r5, #0]
    efca:	2003      	movs	r0, #3
    efcc:	f7ff fbd6 	bl	e77c <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    efd0:	4620      	mov	r0, r4
    efd2:	3401      	adds	r4, #1
    efd4:	f7ff fe0e 	bl	ebf4 <rx_queue_transfer>
    efd8:	2c08      	cmp	r4, #8
    efda:	d1f9      	bne.n	efd0 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    efdc:	4b18      	ldr	r3, [pc, #96]	; (f040 <usb_serial_configure+0xec>)
    efde:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    efe0:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    efe2:	4818      	ldr	r0, [pc, #96]	; (f044 <usb_serial_configure+0xf0>)
    efe4:	4c18      	ldr	r4, [pc, #96]	; (f048 <usb_serial_configure+0xf4>)
    efe6:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    efe8:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    efec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    eff0:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    eff4:	4915      	ldr	r1, [pc, #84]	; (f04c <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    eff6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    effa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    effe:	b121      	cbz	r1, f00a <usb_serial_configure+0xb6>
    f000:	4a13      	ldr	r2, [pc, #76]	; (f050 <usb_serial_configure+0xfc>)
    f002:	7813      	ldrb	r3, [r2, #0]
    f004:	f043 0301 	orr.w	r3, r3, #1
    f008:	7013      	strb	r3, [r2, #0]
}
    f00a:	bd70      	pop	{r4, r5, r6, pc}
    f00c:	200293b4 	.word	0x200293b4
    f010:	2000c140 	.word	0x2000c140
    f014:	2002939c 	.word	0x2002939c
    f018:	20029396 	.word	0x20029396
    f01c:	200293b0 	.word	0x200293b0
    f020:	20029398 	.word	0x20029398
    f024:	2000bfc0 	.word	0x2000bfc0
    f028:	20028bf0 	.word	0x20028bf0
    f02c:	20028c00 	.word	0x20028c00
    f030:	200293aa 	.word	0x200293aa
    f034:	20028bec 	.word	0x20028bec
    f038:	200293ac 	.word	0x200293ac
    f03c:	0000ec55 	.word	0x0000ec55
    f040:	402e0000 	.word	0x402e0000
    f044:	20029380 	.word	0x20029380
    f048:	0000ed09 	.word	0x0000ed09
    f04c:	00000000 	.word	0x00000000
    f050:	200293b6 	.word	0x200293b6

0000f054 <usb_serial_read>:
{
    f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f058:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f05c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    f060:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f12c <usb_serial_read+0xd8>
{
    f064:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f066:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    f06a:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    f06c:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    f070:	2900      	cmp	r1, #0
    f072:	d04f      	beq.n	f114 <usb_serial_read+0xc0>
    f074:	4680      	mov	r8, r0
    f076:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    f078:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    f07a:	f8df 90b4 	ldr.w	r9, [pc, #180]	; f130 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    f07e:	4b26      	ldr	r3, [pc, #152]	; (f118 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    f080:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f084:	4925      	ldr	r1, [pc, #148]	; (f11c <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    f086:	781b      	ldrb	r3, [r3, #0]
    f088:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    f08a:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    f08e:	d03f      	beq.n	f110 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    f090:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    f092:	4b23      	ldr	r3, [pc, #140]	; (f120 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f094:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    f096:	bf28      	it	cs
    f098:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    f09a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    f09c:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f0a0:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    f0a4:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    f0a6:	4b1f      	ldr	r3, [pc, #124]	; (f124 <usb_serial_read+0xd0>)
    f0a8:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    f0ac:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    f0b0:	42aa      	cmp	r2, r5
    f0b2:	d21c      	bcs.n	f0ee <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f0b4:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    f0b8:	4918      	ldr	r1, [pc, #96]	; (f11c <usb_serial_read+0xc8>)
			rx_available -= len;
    f0ba:	4c1b      	ldr	r4, [pc, #108]	; (f128 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    f0bc:	4461      	add	r1, ip
    f0be:	9201      	str	r2, [sp, #4]
    f0c0:	f7fe fb44 	bl	d74c <memcpy>
			rx_available -= len;
    f0c4:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    f0c6:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    f0ca:	4658      	mov	r0, fp
			rx_index[i] += len;
    f0cc:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    f0ce:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    f0d2:	442a      	add	r2, r5
			rx_available -= len;
    f0d4:	4439      	add	r1, r7
			rx_index[i] += len;
    f0d6:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    f0da:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f0dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f0e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    f0e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    f0e8:	b003      	add	sp, #12
    f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f0ee:	462a      	mov	r2, r5
			count += avail;
    f0f0:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    f0f2:	f7fe fb2b 	bl	d74c <memcpy>
			rx_available -= avail;
    f0f6:	490c      	ldr	r1, [pc, #48]	; (f128 <usb_serial_read+0xd4>)
			rx_tail = tail;
    f0f8:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    f0fa:	4630      	mov	r0, r6
			rx_available -= avail;
    f0fc:	680a      	ldr	r2, [r1, #0]
			p += avail;
    f0fe:	44a8      	add	r8, r5
			rx_available -= avail;
    f100:	1b52      	subs	r2, r2, r5
    f102:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    f104:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    f108:	f7ff fd74 	bl	ebf4 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    f10c:	45bb      	cmp	fp, r7
    f10e:	d8b6      	bhi.n	f07e <usb_serial_read+0x2a>
	return count;
    f110:	4638      	mov	r0, r7
    f112:	e7e3      	b.n	f0dc <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    f114:	4608      	mov	r0, r1
    f116:	e7e1      	b.n	f0dc <usb_serial_read+0x88>
    f118:	200293aa 	.word	0x200293aa
    f11c:	20201880 	.word	0x20201880
    f120:	20028c18 	.word	0x20028c18
    f124:	20028bf0 	.word	0x20028bf0
    f128:	20028bec 	.word	0x20028bec
    f12c:	200293ac 	.word	0x200293ac
    f130:	20028c00 	.word	0x20028c00

0000f134 <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    f134:	4b0b      	ldr	r3, [pc, #44]	; (f164 <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    f136:	4a0c      	ldr	r2, [pc, #48]	; (f168 <usb_serial_peekchar+0x34>)
    f138:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    f13a:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    f13c:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    f13e:	428a      	cmp	r2, r1
    f140:	d00d      	beq.n	f15e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    f142:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    f144:	4809      	ldr	r0, [pc, #36]	; (f16c <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f146:	4a0a      	ldr	r2, [pc, #40]	; (f170 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    f148:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f14a:	490a      	ldr	r1, [pc, #40]	; (f174 <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    f14c:	bf28      	it	cs
    f14e:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    f150:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    f152:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    f156:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    f15a:	5c58      	ldrb	r0, [r3, r1]
    f15c:	4770      	bx	lr
	if (tail == rx_head) return -1;
    f15e:	f04f 30ff 	mov.w	r0, #4294967295
}
    f162:	4770      	bx	lr
    f164:	200293aa 	.word	0x200293aa
    f168:	200293ac 	.word	0x200293ac
    f16c:	20028c18 	.word	0x20028c18
    f170:	20201880 	.word	0x20201880
    f174:	20028c00 	.word	0x20028c00

0000f178 <usb_serial_available>:
	uint32_t n = rx_available;
    f178:	4b04      	ldr	r3, [pc, #16]	; (f18c <usb_serial_available+0x14>)
{
    f17a:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    f17c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    f17e:	b10c      	cbz	r4, f184 <usb_serial_available+0xc>
}
    f180:	4620      	mov	r0, r4
    f182:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    f184:	f000 f8e0 	bl	f348 <yield>
}
    f188:	4620      	mov	r0, r4
    f18a:	bd10      	pop	{r4, pc}
    f18c:	20028bec 	.word	0x20028bec

0000f190 <usb_serial_flush_input>:
{
    f190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    f194:	4e14      	ldr	r6, [pc, #80]	; (f1e8 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    f196:	4d15      	ldr	r5, [pc, #84]	; (f1ec <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    f198:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    f19a:	782a      	ldrb	r2, [r5, #0]
    f19c:	4293      	cmp	r3, r2
    f19e:	d021      	beq.n	f1e4 <usb_serial_flush_input+0x54>
    f1a0:	b2dc      	uxtb	r4, r3
    f1a2:	f8df 9050 	ldr.w	r9, [pc, #80]	; f1f4 <usb_serial_flush_input+0x64>
    f1a6:	f8df b050 	ldr.w	fp, [pc, #80]	; f1f8 <usb_serial_flush_input+0x68>
    f1aa:	f8df 8050 	ldr.w	r8, [pc, #80]	; f1fc <usb_serial_flush_input+0x6c>
    f1ae:	4f10      	ldr	r7, [pc, #64]	; (f1f0 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    f1b0:	3401      	adds	r4, #1
    f1b2:	2c08      	cmp	r4, #8
		rx_tail = tail;
    f1b4:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    f1b8:	d901      	bls.n	f1be <usb_serial_flush_input+0x2e>
    f1ba:	2400      	movs	r4, #0
    f1bc:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    f1be:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    f1c2:	f8db 3000 	ldr.w	r3, [fp]
    f1c6:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    f1ca:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    f1ce:	1a52      	subs	r2, r2, r1
    f1d0:	1a9b      	subs	r3, r3, r2
    f1d2:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    f1d6:	f7ff fd0d 	bl	ebf4 <rx_queue_transfer>
		rx_tail = tail;
    f1da:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    f1de:	782b      	ldrb	r3, [r5, #0]
    f1e0:	42a3      	cmp	r3, r4
    f1e2:	d1e5      	bne.n	f1b0 <usb_serial_flush_input+0x20>
}
    f1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f1e8:	200293ac 	.word	0x200293ac
    f1ec:	200293aa 	.word	0x200293aa
    f1f0:	20028c00 	.word	0x20028c00
    f1f4:	20028c18 	.word	0x20028c18
    f1f8:	20028bec 	.word	0x20028bec
    f1fc:	20028bf0 	.word	0x20028bf0

0000f200 <usb_serial_getchar>:
{
    f200:	b500      	push	{lr}
    f202:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    f204:	2101      	movs	r1, #1
    f206:	f10d 0007 	add.w	r0, sp, #7
    f20a:	f7ff ff23 	bl	f054 <usb_serial_read>
    f20e:	b120      	cbz	r0, f21a <usb_serial_getchar+0x1a>
    f210:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    f214:	b003      	add	sp, #12
    f216:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    f21a:	f04f 30ff 	mov.w	r0, #4294967295
    f21e:	e7f9      	b.n	f214 <usb_serial_getchar+0x14>

0000f220 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    f220:	4b09      	ldr	r3, [pc, #36]	; (f248 <usb_serial_putchar+0x28>)
{
    f222:	b500      	push	{lr}
    f224:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    f226:	781b      	ldrb	r3, [r3, #0]
{
    f228:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    f22c:	b13b      	cbz	r3, f23e <usb_serial_putchar+0x1e>
    f22e:	2101      	movs	r1, #1
    f230:	f10d 0007 	add.w	r0, sp, #7
    f234:	f7ff fdb0 	bl	ed98 <usb_serial_write.part.0>
}
    f238:	b003      	add	sp, #12
    f23a:	f85d fb04 	ldr.w	pc, [sp], #4
    f23e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f242:	b003      	add	sp, #12
    f244:	f85d fb04 	ldr.w	pc, [sp], #4
    f248:	200293b3 	.word	0x200293b3

0000f24c <usb_serial_write>:
	if (!usb_configuration) return 0;
    f24c:	4b04      	ldr	r3, [pc, #16]	; (f260 <usb_serial_write+0x14>)
    f24e:	781b      	ldrb	r3, [r3, #0]
    f250:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    f254:	b10b      	cbz	r3, f25a <usb_serial_write+0xe>
    f256:	f7ff bd9f 	b.w	ed98 <usb_serial_write.part.0>
}
    f25a:	4610      	mov	r0, r2
    f25c:	4770      	bx	lr
    f25e:	bf00      	nop
    f260:	200293b3 	.word	0x200293b3

0000f264 <usb_serial_write_buffer_free>:
{
    f264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    f268:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    f26a:	f8df 8044 	ldr.w	r8, [pc, #68]	; f2b0 <usb_serial_write_buffer_free+0x4c>
    f26e:	2301      	movs	r3, #1
    f270:	4d0d      	ldr	r5, [pc, #52]	; (f2a8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    f272:	4627      	mov	r7, r4
    f274:	4e0d      	ldr	r6, [pc, #52]	; (f2ac <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    f276:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    f27a:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f27c:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    f27e:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    f280:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    f282:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    f286:	d005      	beq.n	f294 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    f288:	f7ff fae4 	bl	e854 <usb_transfer_status>
    f28c:	0603      	lsls	r3, r0, #24
    f28e:	bf58      	it	pl
    f290:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    f294:	2c04      	cmp	r4, #4
    f296:	d1f0      	bne.n	f27a <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    f298:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f29c:	2300      	movs	r3, #0
}
    f29e:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    f2a0:	f888 3000 	strb.w	r3, [r8]
}
    f2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2a8:	2000c140 	.word	0x2000c140
    f2ac:	200293b0 	.word	0x200293b0
    f2b0:	200293b1 	.word	0x200293b1

0000f2b4 <usb_serial_flush_output>:
{
    f2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    f2b8:	4b1d      	ldr	r3, [pc, #116]	; (f330 <usb_serial_flush_output+0x7c>)
    f2ba:	781b      	ldrb	r3, [r3, #0]
    f2bc:	b113      	cbz	r3, f2c4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    f2be:	4d1d      	ldr	r5, [pc, #116]	; (f334 <usb_serial_flush_output+0x80>)
    f2c0:	882a      	ldrh	r2, [r5, #0]
    f2c2:	b90a      	cbnz	r2, f2c8 <usb_serial_flush_output+0x14>
}
    f2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    f2c8:	4e1b      	ldr	r6, [pc, #108]	; (f338 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    f2ca:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    f2ce:	491b      	ldr	r1, [pc, #108]	; (f33c <usb_serial_flush_output+0x88>)
    f2d0:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f2d2:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f2d4:	4c1a      	ldr	r4, [pc, #104]	; (f340 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    f2d6:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    f2da:	4f1a      	ldr	r7, [pc, #104]	; (f344 <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f2dc:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    f2e0:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f2e2:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    f2e4:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f2e6:	4621      	mov	r1, r4
    f2e8:	2300      	movs	r3, #0
    f2ea:	f7ff fa79 	bl	e7e0 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    f2ee:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    f2f2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f2f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f2fa:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    f2fe:	3420      	adds	r4, #32
	} while (location < end_addr);
    f300:	42a2      	cmp	r2, r4
    f302:	d8fa      	bhi.n	f2fa <usb_serial_flush_output+0x46>
	asm("dsb");
    f304:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f308:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f30c:	2003      	movs	r0, #3
    f30e:	4641      	mov	r1, r8
    f310:	f7ff fa7e 	bl	e810 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f314:	7833      	ldrb	r3, [r6, #0]
    f316:	3301      	adds	r3, #1
    f318:	b2db      	uxtb	r3, r3
    f31a:	2b03      	cmp	r3, #3
    f31c:	bf88      	it	hi
    f31e:	2300      	movhi	r3, #0
    f320:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    f322:	2300      	movs	r3, #0
    f324:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    f326:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    f32a:	703b      	strb	r3, [r7, #0]
}
    f32c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f330:	200293b3 	.word	0x200293b3
    f334:	20029398 	.word	0x20029398
    f338:	200293b0 	.word	0x200293b0
    f33c:	2000c140 	.word	0x2000c140
    f340:	20202880 	.word	0x20202880
    f344:	200293b1 	.word	0x200293b1

0000f348 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    f34c:	4b2d      	ldr	r3, [pc, #180]	; (f404 <yield+0xbc>)
    f34e:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    f350:	b166      	cbz	r6, f36c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    f352:	4f2d      	ldr	r7, [pc, #180]	; (f408 <yield+0xc0>)
    f354:	783b      	ldrb	r3, [r7, #0]
    f356:	b94b      	cbnz	r3, f36c <yield+0x24>
	running = 1;
    f358:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    f35a:	07f1      	lsls	r1, r6, #31
	running = 1;
    f35c:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    f35e:	d443      	bmi.n	f3e8 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    f360:	07b2      	lsls	r2, r6, #30
    f362:	d426      	bmi.n	f3b2 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    f364:	2300      	movs	r3, #0
    f366:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    f368:	0773      	lsls	r3, r6, #29
    f36a:	d401      	bmi.n	f370 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    f36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    f370:	4b26      	ldr	r3, [pc, #152]	; (f40c <yield+0xc4>)
    f372:	681a      	ldr	r2, [r3, #0]
    f374:	2a00      	cmp	r2, #0
    f376:	d0f9      	beq.n	f36c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    f378:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    f37c:	2a00      	cmp	r2, #0
    f37e:	d1f5      	bne.n	f36c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    f380:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    f384:	b672      	cpsid	i
		EventResponder *first = firstYield;
    f386:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    f388:	2800      	cmp	r0, #0
    f38a:	d034      	beq.n	f3f6 <yield+0xae>
		if (runningFromYield) {
    f38c:	4c20      	ldr	r4, [pc, #128]	; (f410 <yield+0xc8>)
    f38e:	7821      	ldrb	r1, [r4, #0]
    f390:	2900      	cmp	r1, #0
    f392:	d130      	bne.n	f3f6 <yield+0xae>
		runningFromYield = true;
    f394:	2201      	movs	r2, #1
    f396:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    f398:	6942      	ldr	r2, [r0, #20]
    f39a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    f39c:	2a00      	cmp	r2, #0
    f39e:	d02e      	beq.n	f3fe <yield+0xb6>
			firstYield->_prev = nullptr;
    f3a0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    f3a2:	b905      	cbnz	r5, f3a6 <yield+0x5e>
    f3a4:	b662      	cpsie	i
		first->_triggered = false;
    f3a6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    f3a8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    f3aa:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    f3ac:	4798      	blx	r3
		runningFromYield = false;
    f3ae:	7025      	strb	r5, [r4, #0]
    f3b0:	e7dc      	b.n	f36c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f3b2:	f8df 8064 	ldr.w	r8, [pc, #100]	; f418 <yield+0xd0>
    f3b6:	f898 3000 	ldrb.w	r3, [r8]
    f3ba:	2b00      	cmp	r3, #0
    f3bc:	d0d2      	beq.n	f364 <yield+0x1c>
    f3be:	2500      	movs	r5, #0
    f3c0:	f8df 9058 	ldr.w	r9, [pc, #88]	; f41c <yield+0xd4>
    f3c4:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    f3c6:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f3ca:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    f3cc:	6823      	ldr	r3, [r4, #0]
    f3ce:	4620      	mov	r0, r4
    f3d0:	691b      	ldr	r3, [r3, #16]
    f3d2:	4798      	blx	r3
    f3d4:	b110      	cbz	r0, f3dc <yield+0x94>
    f3d6:	6963      	ldr	r3, [r4, #20]
    f3d8:	689b      	ldr	r3, [r3, #8]
    f3da:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    f3dc:	f898 2000 	ldrb.w	r2, [r8]
    f3e0:	b2eb      	uxtb	r3, r5
    f3e2:	429a      	cmp	r2, r3
    f3e4:	d8ef      	bhi.n	f3c6 <yield+0x7e>
    f3e6:	e7bd      	b.n	f364 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    f3e8:	f7ff fec6 	bl	f178 <usb_serial_available>
		if (Serial.available()) serialEvent();
    f3ec:	2800      	cmp	r0, #0
    f3ee:	d0b7      	beq.n	f360 <yield+0x18>
    f3f0:	f3af 8000 	nop.w
    f3f4:	e7b4      	b.n	f360 <yield+0x18>
		if (doit) __enable_irq();
    f3f6:	2d00      	cmp	r5, #0
    f3f8:	d1b8      	bne.n	f36c <yield+0x24>
    f3fa:	b662      	cpsie	i
    f3fc:	e7b6      	b.n	f36c <yield+0x24>
			lastYield = nullptr;
    f3fe:	4b05      	ldr	r3, [pc, #20]	; (f414 <yield+0xcc>)
    f400:	601a      	str	r2, [r3, #0]
    f402:	e7ce      	b.n	f3a2 <yield+0x5a>
    f404:	200293b6 	.word	0x200293b6
    f408:	200293a5 	.word	0x200293a5
    f40c:	200284e4 	.word	0x200284e4
    f410:	200293a3 	.word	0x200293a3
    f414:	200284f0 	.word	0x200284f0
    f418:	200293a4 	.word	0x200293a4
    f41c:	200284f4 	.word	0x200284f4

0000f420 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    f420:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    f422:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    f424:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    f428:	4619      	mov	r1, r3
{
    f42a:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f42c:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f430:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    f434:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f438:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    f43c:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    f440:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    f442:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    f446:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f44a:	b29b      	uxth	r3, r3
    f44c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    f450:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f454:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    f458:	3101      	adds	r1, #1
    f45a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    f45e:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    f460:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    f462:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    f466:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    f468:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    f46a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    f46c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    f46e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    f472:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    f474:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    f476:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    f478:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    f47a:	d1eb      	bne.n	f454 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    f47c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f480:	b29b      	uxth	r3, r3
    f482:	f043 030f 	orr.w	r3, r3, #15
    f486:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    f48a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    f48e:	b29b      	uxth	r3, r3
    f490:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    f494:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    f498:	bd10      	pop	{r4, pc}
    f49a:	bf00      	nop

0000f49c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f49c:	4b37      	ldr	r3, [pc, #220]	; (f57c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f49e:	4a38      	ldr	r2, [pc, #224]	; (f580 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f4a0:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    f4a2:	4838      	ldr	r0, [pc, #224]	; (f584 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f4a4:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    f4a8:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    f4aa:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f4ac:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f4b0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f4b4:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f4b8:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    f4bc:	430a      	orrs	r2, r1
    f4be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    f4c2:	f7ff ffad 	bl	f420 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    f4c6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    f4ca:	f7ff ffa9 	bl	f420 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    f4ce:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    f4d2:	f7ff ffa5 	bl	f420 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    f4d6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    f4da:	f7ff ffa1 	bl	f420 <flexpwm_init>
	for (i=0; i < 4; i++) {
    f4de:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    f4e0:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f4e4:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    f4e8:	4611      	mov	r1, r2
    f4ea:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    f4ee:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    f4f2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f4f4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    f4f6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    f4f8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f4fa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f4fe:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f500:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f502:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    f506:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f508:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    f50a:	d1ee      	bne.n	f4ea <pwm_init+0x4e>
    f50c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    f50e:	481e      	ldr	r0, [pc, #120]	; (f588 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f510:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f514:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    f518:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f51a:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f51e:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    f522:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    f526:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    f52a:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f52c:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    f52e:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    f530:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f532:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f536:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f538:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f53a:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    f53e:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f540:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    f542:	d1ee      	bne.n	f522 <pwm_init+0x86>
    f544:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    f546:	4811      	ldr	r0, [pc, #68]	; (f58c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f548:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f54a:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    f54e:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f550:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f554:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    f558:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    f55c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    f560:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    f562:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    f564:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    f566:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    f568:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    f56a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    f56c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    f56e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    f572:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    f574:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    f578:	d1ee      	bne.n	f558 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    f57a:	bd70      	pop	{r4, r5, r6, pc}
    f57c:	400fc000 	.word	0x400fc000
    f580:	fc030000 	.word	0xfc030000
    f584:	403dc000 	.word	0x403dc000
    f588:	401e0000 	.word	0x401e0000
    f58c:	401e4000 	.word	0x401e4000

0000f590 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    f590:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    f592:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
    f596:	b15b      	cbz	r3, f5b0 <sm_align_pool+0x20>
    f598:	b1ba      	cbz	r2, f5ca <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
    f59a:	4b0f      	ldr	r3, [pc, #60]	; (f5d8 <sm_align_pool+0x48>)
    f59c:	fba3 1302 	umull	r1, r3, r3, r2
    f5a0:	08db      	lsrs	r3, r3, #3
    f5a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f5a6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    f5aa:	d10a      	bne.n	f5c2 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
    f5ac:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    f5ae:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
    f5b0:	4b09      	ldr	r3, [pc, #36]	; (f5d8 <sm_align_pool+0x48>)
    f5b2:	fba3 1302 	umull	r1, r3, r3, r2
    f5b6:	08db      	lsrs	r3, r3, #3
    f5b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    f5bc:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
    f5c0:	d001      	beq.n	f5c6 <sm_align_pool+0x36>
    f5c2:	1ad2      	subs	r2, r2, r3
    f5c4:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    f5c6:	2af0      	cmp	r2, #240	; 0xf0
    f5c8:	d8f0      	bhi.n	f5ac <sm_align_pool+0x1c>
		errno = ENOSPC;
    f5ca:	f002 fad9 	bl	11b80 <__errno>
    f5ce:	221c      	movs	r2, #28
    f5d0:	4603      	mov	r3, r0
    f5d2:	2000      	movs	r0, #0
    f5d4:	601a      	str	r2, [r3, #0]
}
    f5d6:	bd08      	pop	{r3, pc}
    f5d8:	aaaaaaab 	.word	0xaaaaaaab

0000f5dc <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    f5dc:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
    f5de:	4604      	mov	r4, r0
    f5e0:	b338      	cbz	r0, f632 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    f5e2:	b119      	cbz	r1, f5ec <sm_set_pool+0x10>
    f5e4:	fab2 f682 	clz	r6, r2
    f5e8:	0976      	lsrs	r6, r6, #5
    f5ea:	b9a2      	cbnz	r2, f616 <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
    f5ec:	6820      	ldr	r0, [r4, #0]
    f5ee:	b300      	cbz	r0, f632 <sm_set_pool+0x56>
    f5f0:	6862      	ldr	r2, [r4, #4]
    f5f2:	b1f2      	cbz	r2, f632 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
    f5f4:	4b18      	ldr	r3, [pc, #96]	; (f658 <sm_set_pool+0x7c>)
    f5f6:	4919      	ldr	r1, [pc, #100]	; (f65c <sm_set_pool+0x80>)
    f5f8:	fb02 f303 	mul.w	r3, r2, r3
    f5fc:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
    f600:	d317      	bcc.n	f632 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f602:	68a3      	ldr	r3, [r4, #8]
    f604:	b9e3      	cbnz	r3, f640 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
    f606:	2200      	movs	r2, #0
			return 1;
    f608:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
    f60a:	6022      	str	r2, [r4, #0]
    f60c:	6062      	str	r2, [r4, #4]
    f60e:	60a2      	str	r2, [r4, #8]
    f610:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    f612:	4618      	mov	r0, r3
    f614:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
    f616:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
    f618:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    f61a:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    f61e:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    f620:	f7ff ffb6 	bl	f590 <sm_align_pool>
    f624:	4603      	mov	r3, r0
    f626:	2800      	cmp	r0, #0
    f628:	d0f3      	beq.n	f612 <sm_set_pool+0x36>
	if (do_zero) {
    f62a:	b96d      	cbnz	r5, f648 <sm_set_pool+0x6c>
	return 1;
    f62c:	2301      	movs	r3, #1
}
    f62e:	4618      	mov	r0, r3
    f630:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
    f632:	f002 faa5 	bl	11b80 <__errno>
    f636:	2216      	movs	r2, #22
		return 0;
    f638:	2300      	movs	r3, #0
		errno = EINVAL;
    f63a:	6002      	str	r2, [r0, #0]
}
    f63c:	4618      	mov	r0, r3
    f63e:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    f640:	2100      	movs	r1, #0
    f642:	f002 f911 	bl	11868 <memset>
    f646:	e7de      	b.n	f606 <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
    f648:	6862      	ldr	r2, [r4, #4]
    f64a:	4631      	mov	r1, r6
    f64c:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    f64e:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    f650:	f002 f90a 	bl	11868 <memset>
	return 1;
    f654:	2301      	movs	r3, #1
    f656:	e7dc      	b.n	f612 <sm_set_pool+0x36>
    f658:	aaaaaaab 	.word	0xaaaaaaab
    f65c:	15555555 	.word	0x15555555

0000f660 <__aeabi_atexit>:
    f660:	4603      	mov	r3, r0
    f662:	4608      	mov	r0, r1
    f664:	4619      	mov	r1, r3
    f666:	f001 be25 	b.w	112b4 <__cxa_atexit>
    f66a:	bf00      	nop

0000f66c <__aeabi_uldivmod>:
    f66c:	b953      	cbnz	r3, f684 <__aeabi_uldivmod+0x18>
    f66e:	b94a      	cbnz	r2, f684 <__aeabi_uldivmod+0x18>
    f670:	2900      	cmp	r1, #0
    f672:	bf08      	it	eq
    f674:	2800      	cmpeq	r0, #0
    f676:	bf1c      	itt	ne
    f678:	f04f 31ff 	movne.w	r1, #4294967295
    f67c:	f04f 30ff 	movne.w	r0, #4294967295
    f680:	f000 b970 	b.w	f964 <__aeabi_idiv0>
    f684:	f1ad 0c08 	sub.w	ip, sp, #8
    f688:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    f68c:	f000 f806 	bl	f69c <__udivmoddi4>
    f690:	f8dd e004 	ldr.w	lr, [sp, #4]
    f694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    f698:	b004      	add	sp, #16
    f69a:	4770      	bx	lr

0000f69c <__udivmoddi4>:
    f69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f6a0:	9e08      	ldr	r6, [sp, #32]
    f6a2:	460d      	mov	r5, r1
    f6a4:	4604      	mov	r4, r0
    f6a6:	460f      	mov	r7, r1
    f6a8:	2b00      	cmp	r3, #0
    f6aa:	d14a      	bne.n	f742 <__udivmoddi4+0xa6>
    f6ac:	428a      	cmp	r2, r1
    f6ae:	4694      	mov	ip, r2
    f6b0:	d965      	bls.n	f77e <__udivmoddi4+0xe2>
    f6b2:	fab2 f382 	clz	r3, r2
    f6b6:	b143      	cbz	r3, f6ca <__udivmoddi4+0x2e>
    f6b8:	fa02 fc03 	lsl.w	ip, r2, r3
    f6bc:	f1c3 0220 	rsb	r2, r3, #32
    f6c0:	409f      	lsls	r7, r3
    f6c2:	fa20 f202 	lsr.w	r2, r0, r2
    f6c6:	4317      	orrs	r7, r2
    f6c8:	409c      	lsls	r4, r3
    f6ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    f6ce:	fa1f f58c 	uxth.w	r5, ip
    f6d2:	fbb7 f1fe 	udiv	r1, r7, lr
    f6d6:	0c22      	lsrs	r2, r4, #16
    f6d8:	fb0e 7711 	mls	r7, lr, r1, r7
    f6dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    f6e0:	fb01 f005 	mul.w	r0, r1, r5
    f6e4:	4290      	cmp	r0, r2
    f6e6:	d90a      	bls.n	f6fe <__udivmoddi4+0x62>
    f6e8:	eb1c 0202 	adds.w	r2, ip, r2
    f6ec:	f101 37ff 	add.w	r7, r1, #4294967295
    f6f0:	f080 811c 	bcs.w	f92c <__udivmoddi4+0x290>
    f6f4:	4290      	cmp	r0, r2
    f6f6:	f240 8119 	bls.w	f92c <__udivmoddi4+0x290>
    f6fa:	3902      	subs	r1, #2
    f6fc:	4462      	add	r2, ip
    f6fe:	1a12      	subs	r2, r2, r0
    f700:	b2a4      	uxth	r4, r4
    f702:	fbb2 f0fe 	udiv	r0, r2, lr
    f706:	fb0e 2210 	mls	r2, lr, r0, r2
    f70a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    f70e:	fb00 f505 	mul.w	r5, r0, r5
    f712:	42a5      	cmp	r5, r4
    f714:	d90a      	bls.n	f72c <__udivmoddi4+0x90>
    f716:	eb1c 0404 	adds.w	r4, ip, r4
    f71a:	f100 32ff 	add.w	r2, r0, #4294967295
    f71e:	f080 8107 	bcs.w	f930 <__udivmoddi4+0x294>
    f722:	42a5      	cmp	r5, r4
    f724:	f240 8104 	bls.w	f930 <__udivmoddi4+0x294>
    f728:	4464      	add	r4, ip
    f72a:	3802      	subs	r0, #2
    f72c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    f730:	1b64      	subs	r4, r4, r5
    f732:	2100      	movs	r1, #0
    f734:	b11e      	cbz	r6, f73e <__udivmoddi4+0xa2>
    f736:	40dc      	lsrs	r4, r3
    f738:	2300      	movs	r3, #0
    f73a:	e9c6 4300 	strd	r4, r3, [r6]
    f73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f742:	428b      	cmp	r3, r1
    f744:	d908      	bls.n	f758 <__udivmoddi4+0xbc>
    f746:	2e00      	cmp	r6, #0
    f748:	f000 80ed 	beq.w	f926 <__udivmoddi4+0x28a>
    f74c:	2100      	movs	r1, #0
    f74e:	e9c6 0500 	strd	r0, r5, [r6]
    f752:	4608      	mov	r0, r1
    f754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f758:	fab3 f183 	clz	r1, r3
    f75c:	2900      	cmp	r1, #0
    f75e:	d149      	bne.n	f7f4 <__udivmoddi4+0x158>
    f760:	42ab      	cmp	r3, r5
    f762:	d302      	bcc.n	f76a <__udivmoddi4+0xce>
    f764:	4282      	cmp	r2, r0
    f766:	f200 80f8 	bhi.w	f95a <__udivmoddi4+0x2be>
    f76a:	1a84      	subs	r4, r0, r2
    f76c:	eb65 0203 	sbc.w	r2, r5, r3
    f770:	2001      	movs	r0, #1
    f772:	4617      	mov	r7, r2
    f774:	2e00      	cmp	r6, #0
    f776:	d0e2      	beq.n	f73e <__udivmoddi4+0xa2>
    f778:	e9c6 4700 	strd	r4, r7, [r6]
    f77c:	e7df      	b.n	f73e <__udivmoddi4+0xa2>
    f77e:	b902      	cbnz	r2, f782 <__udivmoddi4+0xe6>
    f780:	deff      	udf	#255	; 0xff
    f782:	fab2 f382 	clz	r3, r2
    f786:	2b00      	cmp	r3, #0
    f788:	f040 8090 	bne.w	f8ac <__udivmoddi4+0x210>
    f78c:	1a8a      	subs	r2, r1, r2
    f78e:	ea4f 471c 	mov.w	r7, ip, lsr #16
    f792:	fa1f fe8c 	uxth.w	lr, ip
    f796:	2101      	movs	r1, #1
    f798:	fbb2 f5f7 	udiv	r5, r2, r7
    f79c:	fb07 2015 	mls	r0, r7, r5, r2
    f7a0:	0c22      	lsrs	r2, r4, #16
    f7a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    f7a6:	fb0e f005 	mul.w	r0, lr, r5
    f7aa:	4290      	cmp	r0, r2
    f7ac:	d908      	bls.n	f7c0 <__udivmoddi4+0x124>
    f7ae:	eb1c 0202 	adds.w	r2, ip, r2
    f7b2:	f105 38ff 	add.w	r8, r5, #4294967295
    f7b6:	d202      	bcs.n	f7be <__udivmoddi4+0x122>
    f7b8:	4290      	cmp	r0, r2
    f7ba:	f200 80cb 	bhi.w	f954 <__udivmoddi4+0x2b8>
    f7be:	4645      	mov	r5, r8
    f7c0:	1a12      	subs	r2, r2, r0
    f7c2:	b2a4      	uxth	r4, r4
    f7c4:	fbb2 f0f7 	udiv	r0, r2, r7
    f7c8:	fb07 2210 	mls	r2, r7, r0, r2
    f7cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    f7d0:	fb0e fe00 	mul.w	lr, lr, r0
    f7d4:	45a6      	cmp	lr, r4
    f7d6:	d908      	bls.n	f7ea <__udivmoddi4+0x14e>
    f7d8:	eb1c 0404 	adds.w	r4, ip, r4
    f7dc:	f100 32ff 	add.w	r2, r0, #4294967295
    f7e0:	d202      	bcs.n	f7e8 <__udivmoddi4+0x14c>
    f7e2:	45a6      	cmp	lr, r4
    f7e4:	f200 80bb 	bhi.w	f95e <__udivmoddi4+0x2c2>
    f7e8:	4610      	mov	r0, r2
    f7ea:	eba4 040e 	sub.w	r4, r4, lr
    f7ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    f7f2:	e79f      	b.n	f734 <__udivmoddi4+0x98>
    f7f4:	f1c1 0720 	rsb	r7, r1, #32
    f7f8:	408b      	lsls	r3, r1
    f7fa:	fa22 fc07 	lsr.w	ip, r2, r7
    f7fe:	ea4c 0c03 	orr.w	ip, ip, r3
    f802:	fa05 f401 	lsl.w	r4, r5, r1
    f806:	fa20 f307 	lsr.w	r3, r0, r7
    f80a:	40fd      	lsrs	r5, r7
    f80c:	ea4f 491c 	mov.w	r9, ip, lsr #16
    f810:	4323      	orrs	r3, r4
    f812:	fbb5 f8f9 	udiv	r8, r5, r9
    f816:	fa1f fe8c 	uxth.w	lr, ip
    f81a:	fb09 5518 	mls	r5, r9, r8, r5
    f81e:	0c1c      	lsrs	r4, r3, #16
    f820:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    f824:	fb08 f50e 	mul.w	r5, r8, lr
    f828:	42a5      	cmp	r5, r4
    f82a:	fa02 f201 	lsl.w	r2, r2, r1
    f82e:	fa00 f001 	lsl.w	r0, r0, r1
    f832:	d90b      	bls.n	f84c <__udivmoddi4+0x1b0>
    f834:	eb1c 0404 	adds.w	r4, ip, r4
    f838:	f108 3aff 	add.w	sl, r8, #4294967295
    f83c:	f080 8088 	bcs.w	f950 <__udivmoddi4+0x2b4>
    f840:	42a5      	cmp	r5, r4
    f842:	f240 8085 	bls.w	f950 <__udivmoddi4+0x2b4>
    f846:	f1a8 0802 	sub.w	r8, r8, #2
    f84a:	4464      	add	r4, ip
    f84c:	1b64      	subs	r4, r4, r5
    f84e:	b29d      	uxth	r5, r3
    f850:	fbb4 f3f9 	udiv	r3, r4, r9
    f854:	fb09 4413 	mls	r4, r9, r3, r4
    f858:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
    f85c:	fb03 fe0e 	mul.w	lr, r3, lr
    f860:	45a6      	cmp	lr, r4
    f862:	d908      	bls.n	f876 <__udivmoddi4+0x1da>
    f864:	eb1c 0404 	adds.w	r4, ip, r4
    f868:	f103 35ff 	add.w	r5, r3, #4294967295
    f86c:	d26c      	bcs.n	f948 <__udivmoddi4+0x2ac>
    f86e:	45a6      	cmp	lr, r4
    f870:	d96a      	bls.n	f948 <__udivmoddi4+0x2ac>
    f872:	3b02      	subs	r3, #2
    f874:	4464      	add	r4, ip
    f876:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    f87a:	fba3 9502 	umull	r9, r5, r3, r2
    f87e:	eba4 040e 	sub.w	r4, r4, lr
    f882:	42ac      	cmp	r4, r5
    f884:	46c8      	mov	r8, r9
    f886:	46ae      	mov	lr, r5
    f888:	d356      	bcc.n	f938 <__udivmoddi4+0x29c>
    f88a:	d053      	beq.n	f934 <__udivmoddi4+0x298>
    f88c:	b156      	cbz	r6, f8a4 <__udivmoddi4+0x208>
    f88e:	ebb0 0208 	subs.w	r2, r0, r8
    f892:	eb64 040e 	sbc.w	r4, r4, lr
    f896:	fa04 f707 	lsl.w	r7, r4, r7
    f89a:	40ca      	lsrs	r2, r1
    f89c:	40cc      	lsrs	r4, r1
    f89e:	4317      	orrs	r7, r2
    f8a0:	e9c6 7400 	strd	r7, r4, [r6]
    f8a4:	4618      	mov	r0, r3
    f8a6:	2100      	movs	r1, #0
    f8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ac:	f1c3 0120 	rsb	r1, r3, #32
    f8b0:	fa02 fc03 	lsl.w	ip, r2, r3
    f8b4:	fa20 f201 	lsr.w	r2, r0, r1
    f8b8:	fa25 f101 	lsr.w	r1, r5, r1
    f8bc:	409d      	lsls	r5, r3
    f8be:	432a      	orrs	r2, r5
    f8c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
    f8c4:	fa1f fe8c 	uxth.w	lr, ip
    f8c8:	fbb1 f0f7 	udiv	r0, r1, r7
    f8cc:	fb07 1510 	mls	r5, r7, r0, r1
    f8d0:	0c11      	lsrs	r1, r2, #16
    f8d2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    f8d6:	fb00 f50e 	mul.w	r5, r0, lr
    f8da:	428d      	cmp	r5, r1
    f8dc:	fa04 f403 	lsl.w	r4, r4, r3
    f8e0:	d908      	bls.n	f8f4 <__udivmoddi4+0x258>
    f8e2:	eb1c 0101 	adds.w	r1, ip, r1
    f8e6:	f100 38ff 	add.w	r8, r0, #4294967295
    f8ea:	d22f      	bcs.n	f94c <__udivmoddi4+0x2b0>
    f8ec:	428d      	cmp	r5, r1
    f8ee:	d92d      	bls.n	f94c <__udivmoddi4+0x2b0>
    f8f0:	3802      	subs	r0, #2
    f8f2:	4461      	add	r1, ip
    f8f4:	1b49      	subs	r1, r1, r5
    f8f6:	b292      	uxth	r2, r2
    f8f8:	fbb1 f5f7 	udiv	r5, r1, r7
    f8fc:	fb07 1115 	mls	r1, r7, r5, r1
    f900:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    f904:	fb05 f10e 	mul.w	r1, r5, lr
    f908:	4291      	cmp	r1, r2
    f90a:	d908      	bls.n	f91e <__udivmoddi4+0x282>
    f90c:	eb1c 0202 	adds.w	r2, ip, r2
    f910:	f105 38ff 	add.w	r8, r5, #4294967295
    f914:	d216      	bcs.n	f944 <__udivmoddi4+0x2a8>
    f916:	4291      	cmp	r1, r2
    f918:	d914      	bls.n	f944 <__udivmoddi4+0x2a8>
    f91a:	3d02      	subs	r5, #2
    f91c:	4462      	add	r2, ip
    f91e:	1a52      	subs	r2, r2, r1
    f920:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
    f924:	e738      	b.n	f798 <__udivmoddi4+0xfc>
    f926:	4631      	mov	r1, r6
    f928:	4630      	mov	r0, r6
    f92a:	e708      	b.n	f73e <__udivmoddi4+0xa2>
    f92c:	4639      	mov	r1, r7
    f92e:	e6e6      	b.n	f6fe <__udivmoddi4+0x62>
    f930:	4610      	mov	r0, r2
    f932:	e6fb      	b.n	f72c <__udivmoddi4+0x90>
    f934:	4548      	cmp	r0, r9
    f936:	d2a9      	bcs.n	f88c <__udivmoddi4+0x1f0>
    f938:	ebb9 0802 	subs.w	r8, r9, r2
    f93c:	eb65 0e0c 	sbc.w	lr, r5, ip
    f940:	3b01      	subs	r3, #1
    f942:	e7a3      	b.n	f88c <__udivmoddi4+0x1f0>
    f944:	4645      	mov	r5, r8
    f946:	e7ea      	b.n	f91e <__udivmoddi4+0x282>
    f948:	462b      	mov	r3, r5
    f94a:	e794      	b.n	f876 <__udivmoddi4+0x1da>
    f94c:	4640      	mov	r0, r8
    f94e:	e7d1      	b.n	f8f4 <__udivmoddi4+0x258>
    f950:	46d0      	mov	r8, sl
    f952:	e77b      	b.n	f84c <__udivmoddi4+0x1b0>
    f954:	3d02      	subs	r5, #2
    f956:	4462      	add	r2, ip
    f958:	e732      	b.n	f7c0 <__udivmoddi4+0x124>
    f95a:	4608      	mov	r0, r1
    f95c:	e70a      	b.n	f774 <__udivmoddi4+0xd8>
    f95e:	4464      	add	r4, ip
    f960:	3802      	subs	r0, #2
    f962:	e742      	b.n	f7ea <__udivmoddi4+0x14e>

0000f964 <__aeabi_idiv0>:
    f964:	4770      	bx	lr
    f966:	bf00      	nop

0000f968 <malloc>:
    f968:	4b02      	ldr	r3, [pc, #8]	; (f974 <malloc+0xc>)
    f96a:	4601      	mov	r1, r0
    f96c:	6818      	ldr	r0, [r3, #0]
    f96e:	f000 b80b 	b.w	f988 <_malloc_r>
    f972:	bf00      	nop
    f974:	20009424 	.word	0x20009424

0000f978 <free>:
    f978:	4b02      	ldr	r3, [pc, #8]	; (f984 <free+0xc>)
    f97a:	4601      	mov	r1, r0
    f97c:	6818      	ldr	r0, [r3, #0]
    f97e:	f002 bc71 	b.w	12264 <_free_r>
    f982:	bf00      	nop
    f984:	20009424 	.word	0x20009424

0000f988 <_malloc_r>:
    f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f98c:	f101 060b 	add.w	r6, r1, #11
    f990:	2e16      	cmp	r6, #22
    f992:	b083      	sub	sp, #12
    f994:	4604      	mov	r4, r0
    f996:	d824      	bhi.n	f9e2 <_malloc_r+0x5a>
    f998:	2910      	cmp	r1, #16
    f99a:	f200 80ba 	bhi.w	fb12 <_malloc_r+0x18a>
    f99e:	f000 faa3 	bl	fee8 <__malloc_lock>
    f9a2:	2610      	movs	r6, #16
    f9a4:	2218      	movs	r2, #24
    f9a6:	2002      	movs	r0, #2
    f9a8:	4fb5      	ldr	r7, [pc, #724]	; (fc80 <_malloc_r+0x2f8>)
    f9aa:	443a      	add	r2, r7
    f9ac:	f1a2 0108 	sub.w	r1, r2, #8
    f9b0:	6853      	ldr	r3, [r2, #4]
    f9b2:	428b      	cmp	r3, r1
    f9b4:	f000 80ba 	beq.w	fb2c <_malloc_r+0x1a4>
    f9b8:	685a      	ldr	r2, [r3, #4]
    f9ba:	68d9      	ldr	r1, [r3, #12]
    f9bc:	f022 0203 	bic.w	r2, r2, #3
    f9c0:	441a      	add	r2, r3
    f9c2:	689d      	ldr	r5, [r3, #8]
    f9c4:	60e9      	str	r1, [r5, #12]
    f9c6:	608d      	str	r5, [r1, #8]
    f9c8:	6851      	ldr	r1, [r2, #4]
    f9ca:	f041 0101 	orr.w	r1, r1, #1
    f9ce:	4620      	mov	r0, r4
    f9d0:	6051      	str	r1, [r2, #4]
    f9d2:	f103 0508 	add.w	r5, r3, #8
    f9d6:	f000 fa8d 	bl	fef4 <__malloc_unlock>
    f9da:	4628      	mov	r0, r5
    f9dc:	b003      	add	sp, #12
    f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9e2:	f036 0607 	bics.w	r6, r6, #7
    f9e6:	f100 8094 	bmi.w	fb12 <_malloc_r+0x18a>
    f9ea:	42b1      	cmp	r1, r6
    f9ec:	f200 8091 	bhi.w	fb12 <_malloc_r+0x18a>
    f9f0:	f000 fa7a 	bl	fee8 <__malloc_lock>
    f9f4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    f9f8:	f0c0 819a 	bcc.w	fd30 <_malloc_r+0x3a8>
    f9fc:	0a73      	lsrs	r3, r6, #9
    f9fe:	f000 808f 	beq.w	fb20 <_malloc_r+0x198>
    fa02:	2b04      	cmp	r3, #4
    fa04:	f200 816f 	bhi.w	fce6 <_malloc_r+0x35e>
    fa08:	09b3      	lsrs	r3, r6, #6
    fa0a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    fa0e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    fa12:	00c3      	lsls	r3, r0, #3
    fa14:	4f9a      	ldr	r7, [pc, #616]	; (fc80 <_malloc_r+0x2f8>)
    fa16:	443b      	add	r3, r7
    fa18:	f1a3 0508 	sub.w	r5, r3, #8
    fa1c:	685b      	ldr	r3, [r3, #4]
    fa1e:	429d      	cmp	r5, r3
    fa20:	d106      	bne.n	fa30 <_malloc_r+0xa8>
    fa22:	e00c      	b.n	fa3e <_malloc_r+0xb6>
    fa24:	2900      	cmp	r1, #0
    fa26:	f280 8127 	bge.w	fc78 <_malloc_r+0x2f0>
    fa2a:	68db      	ldr	r3, [r3, #12]
    fa2c:	429d      	cmp	r5, r3
    fa2e:	d006      	beq.n	fa3e <_malloc_r+0xb6>
    fa30:	685a      	ldr	r2, [r3, #4]
    fa32:	f022 0203 	bic.w	r2, r2, #3
    fa36:	1b91      	subs	r1, r2, r6
    fa38:	290f      	cmp	r1, #15
    fa3a:	ddf3      	ble.n	fa24 <_malloc_r+0x9c>
    fa3c:	4660      	mov	r0, ip
    fa3e:	693d      	ldr	r5, [r7, #16]
    fa40:	f8df c250 	ldr.w	ip, [pc, #592]	; fc94 <_malloc_r+0x30c>
    fa44:	4565      	cmp	r5, ip
    fa46:	d07c      	beq.n	fb42 <_malloc_r+0x1ba>
    fa48:	686a      	ldr	r2, [r5, #4]
    fa4a:	f022 0203 	bic.w	r2, r2, #3
    fa4e:	1b93      	subs	r3, r2, r6
    fa50:	2b0f      	cmp	r3, #15
    fa52:	f300 817b 	bgt.w	fd4c <_malloc_r+0x3c4>
    fa56:	2b00      	cmp	r3, #0
    fa58:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    fa5c:	f280 816c 	bge.w	fd38 <_malloc_r+0x3b0>
    fa60:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    fa64:	f080 811a 	bcs.w	fc9c <_malloc_r+0x314>
    fa68:	08d3      	lsrs	r3, r2, #3
    fa6a:	6879      	ldr	r1, [r7, #4]
    fa6c:	3301      	adds	r3, #1
    fa6e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    fa72:	2201      	movs	r2, #1
    fa74:	fa02 f20e 	lsl.w	r2, r2, lr
    fa78:	430a      	orrs	r2, r1
    fa7a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    fa7e:	f8c5 e008 	str.w	lr, [r5, #8]
    fa82:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    fa86:	3908      	subs	r1, #8
    fa88:	60e9      	str	r1, [r5, #12]
    fa8a:	607a      	str	r2, [r7, #4]
    fa8c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    fa90:	f8ce 500c 	str.w	r5, [lr, #12]
    fa94:	1083      	asrs	r3, r0, #2
    fa96:	2101      	movs	r1, #1
    fa98:	4099      	lsls	r1, r3
    fa9a:	4291      	cmp	r1, r2
    fa9c:	d857      	bhi.n	fb4e <_malloc_r+0x1c6>
    fa9e:	4211      	tst	r1, r2
    faa0:	d106      	bne.n	fab0 <_malloc_r+0x128>
    faa2:	f020 0003 	bic.w	r0, r0, #3
    faa6:	0049      	lsls	r1, r1, #1
    faa8:	4211      	tst	r1, r2
    faaa:	f100 0004 	add.w	r0, r0, #4
    faae:	d0fa      	beq.n	faa6 <_malloc_r+0x11e>
    fab0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    fab4:	464d      	mov	r5, r9
    fab6:	4686      	mov	lr, r0
    fab8:	f8d5 800c 	ldr.w	r8, [r5, #12]
    fabc:	4545      	cmp	r5, r8
    fabe:	d108      	bne.n	fad2 <_malloc_r+0x14a>
    fac0:	e11d      	b.n	fcfe <_malloc_r+0x376>
    fac2:	2b00      	cmp	r3, #0
    fac4:	f280 8124 	bge.w	fd10 <_malloc_r+0x388>
    fac8:	f8d8 800c 	ldr.w	r8, [r8, #12]
    facc:	4545      	cmp	r5, r8
    face:	f000 8116 	beq.w	fcfe <_malloc_r+0x376>
    fad2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    fad6:	f022 0203 	bic.w	r2, r2, #3
    fada:	1b93      	subs	r3, r2, r6
    fadc:	2b0f      	cmp	r3, #15
    fade:	ddf0      	ble.n	fac2 <_malloc_r+0x13a>
    fae0:	4620      	mov	r0, r4
    fae2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    fae6:	eb08 0106 	add.w	r1, r8, r6
    faea:	f046 0601 	orr.w	r6, r6, #1
    faee:	f8c8 6004 	str.w	r6, [r8, #4]
    faf2:	60ec      	str	r4, [r5, #12]
    faf4:	60a5      	str	r5, [r4, #8]
    faf6:	f043 0401 	orr.w	r4, r3, #1
    fafa:	e9c7 1104 	strd	r1, r1, [r7, #16]
    fafe:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    fb02:	604c      	str	r4, [r1, #4]
    fb04:	f848 3002 	str.w	r3, [r8, r2]
    fb08:	f000 f9f4 	bl	fef4 <__malloc_unlock>
    fb0c:	f108 0508 	add.w	r5, r8, #8
    fb10:	e002      	b.n	fb18 <_malloc_r+0x190>
    fb12:	230c      	movs	r3, #12
    fb14:	6023      	str	r3, [r4, #0]
    fb16:	2500      	movs	r5, #0
    fb18:	4628      	mov	r0, r5
    fb1a:	b003      	add	sp, #12
    fb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fb20:	f44f 7300 	mov.w	r3, #512	; 0x200
    fb24:	2040      	movs	r0, #64	; 0x40
    fb26:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    fb2a:	e773      	b.n	fa14 <_malloc_r+0x8c>
    fb2c:	68d3      	ldr	r3, [r2, #12]
    fb2e:	429a      	cmp	r2, r3
    fb30:	bf08      	it	eq
    fb32:	3002      	addeq	r0, #2
    fb34:	f47f af40 	bne.w	f9b8 <_malloc_r+0x30>
    fb38:	693d      	ldr	r5, [r7, #16]
    fb3a:	f8df c158 	ldr.w	ip, [pc, #344]	; fc94 <_malloc_r+0x30c>
    fb3e:	4565      	cmp	r5, ip
    fb40:	d182      	bne.n	fa48 <_malloc_r+0xc0>
    fb42:	687a      	ldr	r2, [r7, #4]
    fb44:	1083      	asrs	r3, r0, #2
    fb46:	2101      	movs	r1, #1
    fb48:	4099      	lsls	r1, r3
    fb4a:	4291      	cmp	r1, r2
    fb4c:	d9a7      	bls.n	fa9e <_malloc_r+0x116>
    fb4e:	68bd      	ldr	r5, [r7, #8]
    fb50:	686b      	ldr	r3, [r5, #4]
    fb52:	f023 0903 	bic.w	r9, r3, #3
    fb56:	454e      	cmp	r6, r9
    fb58:	d803      	bhi.n	fb62 <_malloc_r+0x1da>
    fb5a:	eba9 0306 	sub.w	r3, r9, r6
    fb5e:	2b0f      	cmp	r3, #15
    fb60:	dc7a      	bgt.n	fc58 <_malloc_r+0x2d0>
    fb62:	f8df b134 	ldr.w	fp, [pc, #308]	; fc98 <_malloc_r+0x310>
    fb66:	4b47      	ldr	r3, [pc, #284]	; (fc84 <_malloc_r+0x2fc>)
    fb68:	f8db 2000 	ldr.w	r2, [fp]
    fb6c:	681b      	ldr	r3, [r3, #0]
    fb6e:	3201      	adds	r2, #1
    fb70:	4433      	add	r3, r6
    fb72:	eb05 0a09 	add.w	sl, r5, r9
    fb76:	f000 8133 	beq.w	fde0 <_malloc_r+0x458>
    fb7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    fb7e:	330f      	adds	r3, #15
    fb80:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    fb84:	f028 080f 	bic.w	r8, r8, #15
    fb88:	4641      	mov	r1, r8
    fb8a:	4620      	mov	r0, r4
    fb8c:	f001 ffd0 	bl	11b30 <_sbrk_r>
    fb90:	1c41      	adds	r1, r0, #1
    fb92:	4602      	mov	r2, r0
    fb94:	f000 80f3 	beq.w	fd7e <_malloc_r+0x3f6>
    fb98:	4582      	cmp	sl, r0
    fb9a:	f200 80ee 	bhi.w	fd7a <_malloc_r+0x3f2>
    fb9e:	4b3a      	ldr	r3, [pc, #232]	; (fc88 <_malloc_r+0x300>)
    fba0:	6819      	ldr	r1, [r3, #0]
    fba2:	4441      	add	r1, r8
    fba4:	6019      	str	r1, [r3, #0]
    fba6:	4608      	mov	r0, r1
    fba8:	f000 814e 	beq.w	fe48 <_malloc_r+0x4c0>
    fbac:	f8db 1000 	ldr.w	r1, [fp]
    fbb0:	9301      	str	r3, [sp, #4]
    fbb2:	3101      	adds	r1, #1
    fbb4:	bf1b      	ittet	ne
    fbb6:	eba2 010a 	subne.w	r1, r2, sl
    fbba:	1809      	addne	r1, r1, r0
    fbbc:	f8cb 2000 	streq.w	r2, [fp]
    fbc0:	6019      	strne	r1, [r3, #0]
    fbc2:	f012 0b07 	ands.w	fp, r2, #7
    fbc6:	f000 8117 	beq.w	fdf8 <_malloc_r+0x470>
    fbca:	f1cb 0108 	rsb	r1, fp, #8
    fbce:	440a      	add	r2, r1
    fbd0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    fbd4:	4490      	add	r8, r2
    fbd6:	3108      	adds	r1, #8
    fbd8:	eba1 0108 	sub.w	r1, r1, r8
    fbdc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    fbe0:	4651      	mov	r1, sl
    fbe2:	4620      	mov	r0, r4
    fbe4:	9200      	str	r2, [sp, #0]
    fbe6:	f001 ffa3 	bl	11b30 <_sbrk_r>
    fbea:	1c42      	adds	r2, r0, #1
    fbec:	e9dd 2300 	ldrd	r2, r3, [sp]
    fbf0:	f000 814f 	beq.w	fe92 <_malloc_r+0x50a>
    fbf4:	1a80      	subs	r0, r0, r2
    fbf6:	eb00 080a 	add.w	r8, r0, sl
    fbfa:	6819      	ldr	r1, [r3, #0]
    fbfc:	60ba      	str	r2, [r7, #8]
    fbfe:	f048 0001 	orr.w	r0, r8, #1
    fc02:	4451      	add	r1, sl
    fc04:	42bd      	cmp	r5, r7
    fc06:	6050      	str	r0, [r2, #4]
    fc08:	6019      	str	r1, [r3, #0]
    fc0a:	f000 8129 	beq.w	fe60 <_malloc_r+0x4d8>
    fc0e:	f1b9 0f0f 	cmp.w	r9, #15
    fc12:	f240 8127 	bls.w	fe64 <_malloc_r+0x4dc>
    fc16:	6868      	ldr	r0, [r5, #4]
    fc18:	f1a9 0c0c 	sub.w	ip, r9, #12
    fc1c:	f02c 0c07 	bic.w	ip, ip, #7
    fc20:	f000 0001 	and.w	r0, r0, #1
    fc24:	ea40 000c 	orr.w	r0, r0, ip
    fc28:	6068      	str	r0, [r5, #4]
    fc2a:	f04f 0e05 	mov.w	lr, #5
    fc2e:	eb05 000c 	add.w	r0, r5, ip
    fc32:	f1bc 0f0f 	cmp.w	ip, #15
    fc36:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    fc3a:	f200 8132 	bhi.w	fea2 <_malloc_r+0x51a>
    fc3e:	6850      	ldr	r0, [r2, #4]
    fc40:	4615      	mov	r5, r2
    fc42:	4b12      	ldr	r3, [pc, #72]	; (fc8c <_malloc_r+0x304>)
    fc44:	681a      	ldr	r2, [r3, #0]
    fc46:	428a      	cmp	r2, r1
    fc48:	bf38      	it	cc
    fc4a:	6019      	strcc	r1, [r3, #0]
    fc4c:	4b10      	ldr	r3, [pc, #64]	; (fc90 <_malloc_r+0x308>)
    fc4e:	681a      	ldr	r2, [r3, #0]
    fc50:	428a      	cmp	r2, r1
    fc52:	bf38      	it	cc
    fc54:	6019      	strcc	r1, [r3, #0]
    fc56:	e094      	b.n	fd82 <_malloc_r+0x3fa>
    fc58:	19aa      	adds	r2, r5, r6
    fc5a:	f043 0301 	orr.w	r3, r3, #1
    fc5e:	f046 0601 	orr.w	r6, r6, #1
    fc62:	606e      	str	r6, [r5, #4]
    fc64:	4620      	mov	r0, r4
    fc66:	60ba      	str	r2, [r7, #8]
    fc68:	6053      	str	r3, [r2, #4]
    fc6a:	f000 f943 	bl	fef4 <__malloc_unlock>
    fc6e:	3508      	adds	r5, #8
    fc70:	4628      	mov	r0, r5
    fc72:	b003      	add	sp, #12
    fc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc78:	68d9      	ldr	r1, [r3, #12]
    fc7a:	441a      	add	r2, r3
    fc7c:	e6a1      	b.n	f9c2 <_malloc_r+0x3a>
    fc7e:	bf00      	nop
    fc80:	20009008 	.word	0x20009008
    fc84:	2002877c 	.word	0x2002877c
    fc88:	2002874c 	.word	0x2002874c
    fc8c:	20028774 	.word	0x20028774
    fc90:	20028778 	.word	0x20028778
    fc94:	20009010 	.word	0x20009010
    fc98:	20009410 	.word	0x20009410
    fc9c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    fca0:	ea4f 2352 	mov.w	r3, r2, lsr #9
    fca4:	d363      	bcc.n	fd6e <_malloc_r+0x3e6>
    fca6:	2b14      	cmp	r3, #20
    fca8:	f200 80b7 	bhi.w	fe1a <_malloc_r+0x492>
    fcac:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    fcb0:	00c9      	lsls	r1, r1, #3
    fcb2:	335b      	adds	r3, #91	; 0x5b
    fcb4:	eb07 0e01 	add.w	lr, r7, r1
    fcb8:	5879      	ldr	r1, [r7, r1]
    fcba:	f1ae 0e08 	sub.w	lr, lr, #8
    fcbe:	458e      	cmp	lr, r1
    fcc0:	f000 8091 	beq.w	fde6 <_malloc_r+0x45e>
    fcc4:	684b      	ldr	r3, [r1, #4]
    fcc6:	f023 0303 	bic.w	r3, r3, #3
    fcca:	4293      	cmp	r3, r2
    fccc:	d902      	bls.n	fcd4 <_malloc_r+0x34c>
    fcce:	6889      	ldr	r1, [r1, #8]
    fcd0:	458e      	cmp	lr, r1
    fcd2:	d1f7      	bne.n	fcc4 <_malloc_r+0x33c>
    fcd4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    fcd8:	687a      	ldr	r2, [r7, #4]
    fcda:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    fcde:	f8ce 5008 	str.w	r5, [lr, #8]
    fce2:	60cd      	str	r5, [r1, #12]
    fce4:	e6d6      	b.n	fa94 <_malloc_r+0x10c>
    fce6:	2b14      	cmp	r3, #20
    fce8:	d959      	bls.n	fd9e <_malloc_r+0x416>
    fcea:	2b54      	cmp	r3, #84	; 0x54
    fcec:	f200 809d 	bhi.w	fe2a <_malloc_r+0x4a2>
    fcf0:	0b33      	lsrs	r3, r6, #12
    fcf2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    fcf6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    fcfa:	00c3      	lsls	r3, r0, #3
    fcfc:	e68a      	b.n	fa14 <_malloc_r+0x8c>
    fcfe:	f10e 0e01 	add.w	lr, lr, #1
    fd02:	f01e 0f03 	tst.w	lr, #3
    fd06:	f105 0508 	add.w	r5, r5, #8
    fd0a:	f47f aed5 	bne.w	fab8 <_malloc_r+0x130>
    fd0e:	e051      	b.n	fdb4 <_malloc_r+0x42c>
    fd10:	4442      	add	r2, r8
    fd12:	4645      	mov	r5, r8
    fd14:	6853      	ldr	r3, [r2, #4]
    fd16:	f8d8 100c 	ldr.w	r1, [r8, #12]
    fd1a:	f043 0301 	orr.w	r3, r3, #1
    fd1e:	6053      	str	r3, [r2, #4]
    fd20:	f855 3f08 	ldr.w	r3, [r5, #8]!
    fd24:	4620      	mov	r0, r4
    fd26:	60d9      	str	r1, [r3, #12]
    fd28:	608b      	str	r3, [r1, #8]
    fd2a:	f000 f8e3 	bl	fef4 <__malloc_unlock>
    fd2e:	e6f3      	b.n	fb18 <_malloc_r+0x190>
    fd30:	08f0      	lsrs	r0, r6, #3
    fd32:	f106 0208 	add.w	r2, r6, #8
    fd36:	e637      	b.n	f9a8 <_malloc_r+0x20>
    fd38:	442a      	add	r2, r5
    fd3a:	4620      	mov	r0, r4
    fd3c:	6853      	ldr	r3, [r2, #4]
    fd3e:	f043 0301 	orr.w	r3, r3, #1
    fd42:	6053      	str	r3, [r2, #4]
    fd44:	3508      	adds	r5, #8
    fd46:	f000 f8d5 	bl	fef4 <__malloc_unlock>
    fd4a:	e6e5      	b.n	fb18 <_malloc_r+0x190>
    fd4c:	19a9      	adds	r1, r5, r6
    fd4e:	4620      	mov	r0, r4
    fd50:	f046 0601 	orr.w	r6, r6, #1
    fd54:	f043 0401 	orr.w	r4, r3, #1
    fd58:	606e      	str	r6, [r5, #4]
    fd5a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    fd5e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    fd62:	604c      	str	r4, [r1, #4]
    fd64:	50ab      	str	r3, [r5, r2]
    fd66:	f000 f8c5 	bl	fef4 <__malloc_unlock>
    fd6a:	3508      	adds	r5, #8
    fd6c:	e6d4      	b.n	fb18 <_malloc_r+0x190>
    fd6e:	0993      	lsrs	r3, r2, #6
    fd70:	f103 0139 	add.w	r1, r3, #57	; 0x39
    fd74:	00c9      	lsls	r1, r1, #3
    fd76:	3338      	adds	r3, #56	; 0x38
    fd78:	e79c      	b.n	fcb4 <_malloc_r+0x32c>
    fd7a:	42bd      	cmp	r5, r7
    fd7c:	d05f      	beq.n	fe3e <_malloc_r+0x4b6>
    fd7e:	68bd      	ldr	r5, [r7, #8]
    fd80:	6868      	ldr	r0, [r5, #4]
    fd82:	f020 0803 	bic.w	r8, r0, #3
    fd86:	4546      	cmp	r6, r8
    fd88:	eba8 0306 	sub.w	r3, r8, r6
    fd8c:	d802      	bhi.n	fd94 <_malloc_r+0x40c>
    fd8e:	2b0f      	cmp	r3, #15
    fd90:	f73f af62 	bgt.w	fc58 <_malloc_r+0x2d0>
    fd94:	4620      	mov	r0, r4
    fd96:	f000 f8ad 	bl	fef4 <__malloc_unlock>
    fd9a:	2500      	movs	r5, #0
    fd9c:	e6bc      	b.n	fb18 <_malloc_r+0x190>
    fd9e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    fda2:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    fda6:	00c3      	lsls	r3, r0, #3
    fda8:	e634      	b.n	fa14 <_malloc_r+0x8c>
    fdaa:	f859 3908 	ldr.w	r3, [r9], #-8
    fdae:	454b      	cmp	r3, r9
    fdb0:	f040 8096 	bne.w	fee0 <_malloc_r+0x558>
    fdb4:	f010 0f03 	tst.w	r0, #3
    fdb8:	f100 30ff 	add.w	r0, r0, #4294967295
    fdbc:	d1f5      	bne.n	fdaa <_malloc_r+0x422>
    fdbe:	687b      	ldr	r3, [r7, #4]
    fdc0:	ea23 0301 	bic.w	r3, r3, r1
    fdc4:	607b      	str	r3, [r7, #4]
    fdc6:	0049      	lsls	r1, r1, #1
    fdc8:	4299      	cmp	r1, r3
    fdca:	f63f aec0 	bhi.w	fb4e <_malloc_r+0x1c6>
    fdce:	b919      	cbnz	r1, fdd8 <_malloc_r+0x450>
    fdd0:	e6bd      	b.n	fb4e <_malloc_r+0x1c6>
    fdd2:	0049      	lsls	r1, r1, #1
    fdd4:	f10e 0e04 	add.w	lr, lr, #4
    fdd8:	4219      	tst	r1, r3
    fdda:	d0fa      	beq.n	fdd2 <_malloc_r+0x44a>
    fddc:	4670      	mov	r0, lr
    fdde:	e667      	b.n	fab0 <_malloc_r+0x128>
    fde0:	f103 0810 	add.w	r8, r3, #16
    fde4:	e6d0      	b.n	fb88 <_malloc_r+0x200>
    fde6:	109a      	asrs	r2, r3, #2
    fde8:	f04f 0801 	mov.w	r8, #1
    fdec:	687b      	ldr	r3, [r7, #4]
    fdee:	fa08 f202 	lsl.w	r2, r8, r2
    fdf2:	431a      	orrs	r2, r3
    fdf4:	607a      	str	r2, [r7, #4]
    fdf6:	e770      	b.n	fcda <_malloc_r+0x352>
    fdf8:	eb02 0108 	add.w	r1, r2, r8
    fdfc:	4249      	negs	r1, r1
    fdfe:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    fe02:	4651      	mov	r1, sl
    fe04:	4620      	mov	r0, r4
    fe06:	9200      	str	r2, [sp, #0]
    fe08:	f001 fe92 	bl	11b30 <_sbrk_r>
    fe0c:	1c43      	adds	r3, r0, #1
    fe0e:	e9dd 2300 	ldrd	r2, r3, [sp]
    fe12:	f47f aeef 	bne.w	fbf4 <_malloc_r+0x26c>
    fe16:	46da      	mov	sl, fp
    fe18:	e6ef      	b.n	fbfa <_malloc_r+0x272>
    fe1a:	2b54      	cmp	r3, #84	; 0x54
    fe1c:	d825      	bhi.n	fe6a <_malloc_r+0x4e2>
    fe1e:	0b13      	lsrs	r3, r2, #12
    fe20:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    fe24:	00c9      	lsls	r1, r1, #3
    fe26:	336e      	adds	r3, #110	; 0x6e
    fe28:	e744      	b.n	fcb4 <_malloc_r+0x32c>
    fe2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    fe2e:	d825      	bhi.n	fe7c <_malloc_r+0x4f4>
    fe30:	0bf3      	lsrs	r3, r6, #15
    fe32:	f103 0078 	add.w	r0, r3, #120	; 0x78
    fe36:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    fe3a:	00c3      	lsls	r3, r0, #3
    fe3c:	e5ea      	b.n	fa14 <_malloc_r+0x8c>
    fe3e:	4b29      	ldr	r3, [pc, #164]	; (fee4 <_malloc_r+0x55c>)
    fe40:	6818      	ldr	r0, [r3, #0]
    fe42:	4440      	add	r0, r8
    fe44:	6018      	str	r0, [r3, #0]
    fe46:	e6b1      	b.n	fbac <_malloc_r+0x224>
    fe48:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    fe4c:	f1bc 0f00 	cmp.w	ip, #0
    fe50:	f47f aeac 	bne.w	fbac <_malloc_r+0x224>
    fe54:	68bd      	ldr	r5, [r7, #8]
    fe56:	44c8      	add	r8, r9
    fe58:	f048 0001 	orr.w	r0, r8, #1
    fe5c:	6068      	str	r0, [r5, #4]
    fe5e:	e6f0      	b.n	fc42 <_malloc_r+0x2ba>
    fe60:	4615      	mov	r5, r2
    fe62:	e6ee      	b.n	fc42 <_malloc_r+0x2ba>
    fe64:	2301      	movs	r3, #1
    fe66:	6053      	str	r3, [r2, #4]
    fe68:	e794      	b.n	fd94 <_malloc_r+0x40c>
    fe6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    fe6e:	d823      	bhi.n	feb8 <_malloc_r+0x530>
    fe70:	0bd3      	lsrs	r3, r2, #15
    fe72:	f103 0178 	add.w	r1, r3, #120	; 0x78
    fe76:	00c9      	lsls	r1, r1, #3
    fe78:	3377      	adds	r3, #119	; 0x77
    fe7a:	e71b      	b.n	fcb4 <_malloc_r+0x32c>
    fe7c:	f240 5254 	movw	r2, #1364	; 0x554
    fe80:	4293      	cmp	r3, r2
    fe82:	d823      	bhi.n	fecc <_malloc_r+0x544>
    fe84:	0cb3      	lsrs	r3, r6, #18
    fe86:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    fe8a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    fe8e:	00c3      	lsls	r3, r0, #3
    fe90:	e5c0      	b.n	fa14 <_malloc_r+0x8c>
    fe92:	f1ab 0b08 	sub.w	fp, fp, #8
    fe96:	44d8      	add	r8, fp
    fe98:	eba8 0802 	sub.w	r8, r8, r2
    fe9c:	f04f 0a00 	mov.w	sl, #0
    fea0:	e6ab      	b.n	fbfa <_malloc_r+0x272>
    fea2:	f105 0108 	add.w	r1, r5, #8
    fea6:	4620      	mov	r0, r4
    fea8:	9300      	str	r3, [sp, #0]
    feaa:	f002 f9db 	bl	12264 <_free_r>
    feae:	68bd      	ldr	r5, [r7, #8]
    feb0:	9b00      	ldr	r3, [sp, #0]
    feb2:	6868      	ldr	r0, [r5, #4]
    feb4:	6819      	ldr	r1, [r3, #0]
    feb6:	e6c4      	b.n	fc42 <_malloc_r+0x2ba>
    feb8:	f240 5154 	movw	r1, #1364	; 0x554
    febc:	428b      	cmp	r3, r1
    febe:	d80b      	bhi.n	fed8 <_malloc_r+0x550>
    fec0:	0c93      	lsrs	r3, r2, #18
    fec2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    fec6:	00c9      	lsls	r1, r1, #3
    fec8:	337c      	adds	r3, #124	; 0x7c
    feca:	e6f3      	b.n	fcb4 <_malloc_r+0x32c>
    fecc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    fed0:	207f      	movs	r0, #127	; 0x7f
    fed2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    fed6:	e59d      	b.n	fa14 <_malloc_r+0x8c>
    fed8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    fedc:	237e      	movs	r3, #126	; 0x7e
    fede:	e6e9      	b.n	fcb4 <_malloc_r+0x32c>
    fee0:	687b      	ldr	r3, [r7, #4]
    fee2:	e770      	b.n	fdc6 <_malloc_r+0x43e>
    fee4:	2002874c 	.word	0x2002874c

0000fee8 <__malloc_lock>:
    fee8:	4801      	ldr	r0, [pc, #4]	; (fef0 <__malloc_lock+0x8>)
    feea:	f001 be77 	b.w	11bdc <__retarget_lock_acquire_recursive>
    feee:	bf00      	nop
    fef0:	20028744 	.word	0x20028744

0000fef4 <__malloc_unlock>:
    fef4:	4801      	ldr	r0, [pc, #4]	; (fefc <__malloc_unlock+0x8>)
    fef6:	f001 be73 	b.w	11be0 <__retarget_lock_release_recursive>
    fefa:	bf00      	nop
    fefc:	20028744 	.word	0x20028744

0000ff00 <realloc>:
    ff00:	b410      	push	{r4}
    ff02:	4c04      	ldr	r4, [pc, #16]	; (ff14 <realloc+0x14>)
    ff04:	4603      	mov	r3, r0
    ff06:	460a      	mov	r2, r1
    ff08:	6820      	ldr	r0, [r4, #0]
    ff0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ff0e:	4619      	mov	r1, r3
    ff10:	f000 b802 	b.w	ff18 <_realloc_r>
    ff14:	20009424 	.word	0x20009424

0000ff18 <_realloc_r>:
    ff18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff1c:	4617      	mov	r7, r2
    ff1e:	2900      	cmp	r1, #0
    ff20:	f000 8098 	beq.w	10054 <_realloc_r+0x13c>
    ff24:	460c      	mov	r4, r1
    ff26:	f107 050b 	add.w	r5, r7, #11
    ff2a:	4680      	mov	r8, r0
    ff2c:	f7ff ffdc 	bl	fee8 <__malloc_lock>
    ff30:	2d16      	cmp	r5, #22
    ff32:	f854 1c04 	ldr.w	r1, [r4, #-4]
    ff36:	d85b      	bhi.n	fff0 <_realloc_r+0xd8>
    ff38:	2510      	movs	r5, #16
    ff3a:	462a      	mov	r2, r5
    ff3c:	42af      	cmp	r7, r5
    ff3e:	d85c      	bhi.n	fffa <_realloc_r+0xe2>
    ff40:	f021 0603 	bic.w	r6, r1, #3
    ff44:	4296      	cmp	r6, r2
    ff46:	f1a4 0908 	sub.w	r9, r4, #8
    ff4a:	da62      	bge.n	10012 <_realloc_r+0xfa>
    ff4c:	4bbc      	ldr	r3, [pc, #752]	; (10240 <_realloc_r+0x328>)
    ff4e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    ff52:	eb09 0006 	add.w	r0, r9, r6
    ff56:	4584      	cmp	ip, r0
    ff58:	f000 8097 	beq.w	1008a <_realloc_r+0x172>
    ff5c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ff60:	f02c 0301 	bic.w	r3, ip, #1
    ff64:	4403      	add	r3, r0
    ff66:	685b      	ldr	r3, [r3, #4]
    ff68:	07db      	lsls	r3, r3, #31
    ff6a:	d468      	bmi.n	1003e <_realloc_r+0x126>
    ff6c:	f02c 0c03 	bic.w	ip, ip, #3
    ff70:	eb06 030c 	add.w	r3, r6, ip
    ff74:	4293      	cmp	r3, r2
    ff76:	da47      	bge.n	10008 <_realloc_r+0xf0>
    ff78:	07cb      	lsls	r3, r1, #31
    ff7a:	d410      	bmi.n	ff9e <_realloc_r+0x86>
    ff7c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ff80:	eba9 0a03 	sub.w	sl, r9, r3
    ff84:	f8da 3004 	ldr.w	r3, [sl, #4]
    ff88:	f023 0103 	bic.w	r1, r3, #3
    ff8c:	448c      	add	ip, r1
    ff8e:	44b4      	add	ip, r6
    ff90:	4594      	cmp	ip, r2
    ff92:	f280 8111 	bge.w	101b8 <_realloc_r+0x2a0>
    ff96:	1873      	adds	r3, r6, r1
    ff98:	4293      	cmp	r3, r2
    ff9a:	f280 80e8 	bge.w	1016e <_realloc_r+0x256>
    ff9e:	4639      	mov	r1, r7
    ffa0:	4640      	mov	r0, r8
    ffa2:	f7ff fcf1 	bl	f988 <_malloc_r>
    ffa6:	4607      	mov	r7, r0
    ffa8:	b1e0      	cbz	r0, ffe4 <_realloc_r+0xcc>
    ffaa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    ffae:	f023 0301 	bic.w	r3, r3, #1
    ffb2:	444b      	add	r3, r9
    ffb4:	f1a0 0208 	sub.w	r2, r0, #8
    ffb8:	4293      	cmp	r3, r2
    ffba:	f000 80d2 	beq.w	10162 <_realloc_r+0x24a>
    ffbe:	1f32      	subs	r2, r6, #4
    ffc0:	2a24      	cmp	r2, #36	; 0x24
    ffc2:	f200 80f5 	bhi.w	101b0 <_realloc_r+0x298>
    ffc6:	2a13      	cmp	r2, #19
    ffc8:	f200 80ac 	bhi.w	10124 <_realloc_r+0x20c>
    ffcc:	4603      	mov	r3, r0
    ffce:	4622      	mov	r2, r4
    ffd0:	6811      	ldr	r1, [r2, #0]
    ffd2:	6019      	str	r1, [r3, #0]
    ffd4:	6851      	ldr	r1, [r2, #4]
    ffd6:	6059      	str	r1, [r3, #4]
    ffd8:	6892      	ldr	r2, [r2, #8]
    ffda:	609a      	str	r2, [r3, #8]
    ffdc:	4621      	mov	r1, r4
    ffde:	4640      	mov	r0, r8
    ffe0:	f002 f940 	bl	12264 <_free_r>
    ffe4:	4640      	mov	r0, r8
    ffe6:	f7ff ff85 	bl	fef4 <__malloc_unlock>
    ffea:	4638      	mov	r0, r7
    ffec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fff0:	f025 0507 	bic.w	r5, r5, #7
    fff4:	2d00      	cmp	r5, #0
    fff6:	462a      	mov	r2, r5
    fff8:	daa0      	bge.n	ff3c <_realloc_r+0x24>
    fffa:	230c      	movs	r3, #12
    fffc:	f8c8 3000 	str.w	r3, [r8]
   10000:	2700      	movs	r7, #0
   10002:	4638      	mov	r0, r7
   10004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10008:	461e      	mov	r6, r3
   1000a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1000e:	60d3      	str	r3, [r2, #12]
   10010:	609a      	str	r2, [r3, #8]
   10012:	1b73      	subs	r3, r6, r5
   10014:	2b0f      	cmp	r3, #15
   10016:	d822      	bhi.n	1005e <_realloc_r+0x146>
   10018:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1001c:	f003 0301 	and.w	r3, r3, #1
   10020:	4333      	orrs	r3, r6
   10022:	444e      	add	r6, r9
   10024:	f8c9 3004 	str.w	r3, [r9, #4]
   10028:	6873      	ldr	r3, [r6, #4]
   1002a:	f043 0301 	orr.w	r3, r3, #1
   1002e:	6073      	str	r3, [r6, #4]
   10030:	4640      	mov	r0, r8
   10032:	4627      	mov	r7, r4
   10034:	f7ff ff5e 	bl	fef4 <__malloc_unlock>
   10038:	4638      	mov	r0, r7
   1003a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1003e:	07c9      	lsls	r1, r1, #31
   10040:	d4ad      	bmi.n	ff9e <_realloc_r+0x86>
   10042:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10046:	eba9 0a03 	sub.w	sl, r9, r3
   1004a:	f8da 1004 	ldr.w	r1, [sl, #4]
   1004e:	f021 0103 	bic.w	r1, r1, #3
   10052:	e7a0      	b.n	ff96 <_realloc_r+0x7e>
   10054:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10058:	4611      	mov	r1, r2
   1005a:	f7ff bc95 	b.w	f988 <_malloc_r>
   1005e:	f8d9 2004 	ldr.w	r2, [r9, #4]
   10062:	eb09 0105 	add.w	r1, r9, r5
   10066:	f002 0201 	and.w	r2, r2, #1
   1006a:	444e      	add	r6, r9
   1006c:	f043 0301 	orr.w	r3, r3, #1
   10070:	432a      	orrs	r2, r5
   10072:	f8c9 2004 	str.w	r2, [r9, #4]
   10076:	604b      	str	r3, [r1, #4]
   10078:	6873      	ldr	r3, [r6, #4]
   1007a:	f043 0301 	orr.w	r3, r3, #1
   1007e:	3108      	adds	r1, #8
   10080:	6073      	str	r3, [r6, #4]
   10082:	4640      	mov	r0, r8
   10084:	f002 f8ee 	bl	12264 <_free_r>
   10088:	e7d2      	b.n	10030 <_realloc_r+0x118>
   1008a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1008e:	f020 0b03 	bic.w	fp, r0, #3
   10092:	eb06 0c0b 	add.w	ip, r6, fp
   10096:	f105 0010 	add.w	r0, r5, #16
   1009a:	4584      	cmp	ip, r0
   1009c:	da4d      	bge.n	1013a <_realloc_r+0x222>
   1009e:	07c9      	lsls	r1, r1, #31
   100a0:	f53f af7d 	bmi.w	ff9e <_realloc_r+0x86>
   100a4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   100a8:	eba9 0a01 	sub.w	sl, r9, r1
   100ac:	f8da 1004 	ldr.w	r1, [sl, #4]
   100b0:	f021 0103 	bic.w	r1, r1, #3
   100b4:	448b      	add	fp, r1
   100b6:	44b3      	add	fp, r6
   100b8:	4558      	cmp	r0, fp
   100ba:	f73f af6c 	bgt.w	ff96 <_realloc_r+0x7e>
   100be:	4657      	mov	r7, sl
   100c0:	f8da 100c 	ldr.w	r1, [sl, #12]
   100c4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   100c8:	1f32      	subs	r2, r6, #4
   100ca:	2a24      	cmp	r2, #36	; 0x24
   100cc:	60c1      	str	r1, [r0, #12]
   100ce:	6088      	str	r0, [r1, #8]
   100d0:	f200 80db 	bhi.w	1028a <_realloc_r+0x372>
   100d4:	2a13      	cmp	r2, #19
   100d6:	f240 80d6 	bls.w	10286 <_realloc_r+0x36e>
   100da:	6821      	ldr	r1, [r4, #0]
   100dc:	f8ca 1008 	str.w	r1, [sl, #8]
   100e0:	6861      	ldr	r1, [r4, #4]
   100e2:	f8ca 100c 	str.w	r1, [sl, #12]
   100e6:	2a1b      	cmp	r2, #27
   100e8:	f200 80df 	bhi.w	102aa <_realloc_r+0x392>
   100ec:	3408      	adds	r4, #8
   100ee:	f10a 0210 	add.w	r2, sl, #16
   100f2:	6821      	ldr	r1, [r4, #0]
   100f4:	6011      	str	r1, [r2, #0]
   100f6:	6861      	ldr	r1, [r4, #4]
   100f8:	6051      	str	r1, [r2, #4]
   100fa:	68a1      	ldr	r1, [r4, #8]
   100fc:	6091      	str	r1, [r2, #8]
   100fe:	eb0a 0105 	add.w	r1, sl, r5
   10102:	ebab 0205 	sub.w	r2, fp, r5
   10106:	f042 0201 	orr.w	r2, r2, #1
   1010a:	6099      	str	r1, [r3, #8]
   1010c:	604a      	str	r2, [r1, #4]
   1010e:	f8da 3004 	ldr.w	r3, [sl, #4]
   10112:	f003 0301 	and.w	r3, r3, #1
   10116:	432b      	orrs	r3, r5
   10118:	4640      	mov	r0, r8
   1011a:	f8ca 3004 	str.w	r3, [sl, #4]
   1011e:	f7ff fee9 	bl	fef4 <__malloc_unlock>
   10122:	e76e      	b.n	10002 <_realloc_r+0xea>
   10124:	6823      	ldr	r3, [r4, #0]
   10126:	6003      	str	r3, [r0, #0]
   10128:	6863      	ldr	r3, [r4, #4]
   1012a:	6043      	str	r3, [r0, #4]
   1012c:	2a1b      	cmp	r2, #27
   1012e:	d868      	bhi.n	10202 <_realloc_r+0x2ea>
   10130:	f104 0208 	add.w	r2, r4, #8
   10134:	f100 0308 	add.w	r3, r0, #8
   10138:	e74a      	b.n	ffd0 <_realloc_r+0xb8>
   1013a:	eb09 0205 	add.w	r2, r9, r5
   1013e:	609a      	str	r2, [r3, #8]
   10140:	ebac 0305 	sub.w	r3, ip, r5
   10144:	f043 0301 	orr.w	r3, r3, #1
   10148:	6053      	str	r3, [r2, #4]
   1014a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1014e:	f003 0301 	and.w	r3, r3, #1
   10152:	432b      	orrs	r3, r5
   10154:	4640      	mov	r0, r8
   10156:	f844 3c04 	str.w	r3, [r4, #-4]
   1015a:	f7ff fecb 	bl	fef4 <__malloc_unlock>
   1015e:	4627      	mov	r7, r4
   10160:	e74f      	b.n	10002 <_realloc_r+0xea>
   10162:	f850 3c04 	ldr.w	r3, [r0, #-4]
   10166:	f023 0303 	bic.w	r3, r3, #3
   1016a:	441e      	add	r6, r3
   1016c:	e751      	b.n	10012 <_realloc_r+0xfa>
   1016e:	4657      	mov	r7, sl
   10170:	f8da 100c 	ldr.w	r1, [sl, #12]
   10174:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10178:	1f32      	subs	r2, r6, #4
   1017a:	2a24      	cmp	r2, #36	; 0x24
   1017c:	60c1      	str	r1, [r0, #12]
   1017e:	6088      	str	r0, [r1, #8]
   10180:	d84c      	bhi.n	1021c <_realloc_r+0x304>
   10182:	2a13      	cmp	r2, #19
   10184:	d948      	bls.n	10218 <_realloc_r+0x300>
   10186:	6821      	ldr	r1, [r4, #0]
   10188:	f8ca 1008 	str.w	r1, [sl, #8]
   1018c:	6861      	ldr	r1, [r4, #4]
   1018e:	f8ca 100c 	str.w	r1, [sl, #12]
   10192:	2a1b      	cmp	r2, #27
   10194:	d856      	bhi.n	10244 <_realloc_r+0x32c>
   10196:	3408      	adds	r4, #8
   10198:	f10a 0210 	add.w	r2, sl, #16
   1019c:	461e      	mov	r6, r3
   1019e:	6823      	ldr	r3, [r4, #0]
   101a0:	6013      	str	r3, [r2, #0]
   101a2:	6863      	ldr	r3, [r4, #4]
   101a4:	6053      	str	r3, [r2, #4]
   101a6:	68a3      	ldr	r3, [r4, #8]
   101a8:	6093      	str	r3, [r2, #8]
   101aa:	46d1      	mov	r9, sl
   101ac:	463c      	mov	r4, r7
   101ae:	e730      	b.n	10012 <_realloc_r+0xfa>
   101b0:	4621      	mov	r1, r4
   101b2:	f001 fadd 	bl	11770 <memmove>
   101b6:	e711      	b.n	ffdc <_realloc_r+0xc4>
   101b8:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   101bc:	4657      	mov	r7, sl
   101be:	60cb      	str	r3, [r1, #12]
   101c0:	6099      	str	r1, [r3, #8]
   101c2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   101c6:	f8da 300c 	ldr.w	r3, [sl, #12]
   101ca:	60cb      	str	r3, [r1, #12]
   101cc:	1f32      	subs	r2, r6, #4
   101ce:	2a24      	cmp	r2, #36	; 0x24
   101d0:	6099      	str	r1, [r3, #8]
   101d2:	d82d      	bhi.n	10230 <_realloc_r+0x318>
   101d4:	2a13      	cmp	r2, #19
   101d6:	d929      	bls.n	1022c <_realloc_r+0x314>
   101d8:	6823      	ldr	r3, [r4, #0]
   101da:	f8ca 3008 	str.w	r3, [sl, #8]
   101de:	6863      	ldr	r3, [r4, #4]
   101e0:	f8ca 300c 	str.w	r3, [sl, #12]
   101e4:	2a1b      	cmp	r2, #27
   101e6:	d842      	bhi.n	1026e <_realloc_r+0x356>
   101e8:	3408      	adds	r4, #8
   101ea:	f10a 0310 	add.w	r3, sl, #16
   101ee:	6822      	ldr	r2, [r4, #0]
   101f0:	601a      	str	r2, [r3, #0]
   101f2:	6862      	ldr	r2, [r4, #4]
   101f4:	605a      	str	r2, [r3, #4]
   101f6:	68a2      	ldr	r2, [r4, #8]
   101f8:	609a      	str	r2, [r3, #8]
   101fa:	4666      	mov	r6, ip
   101fc:	46d1      	mov	r9, sl
   101fe:	463c      	mov	r4, r7
   10200:	e707      	b.n	10012 <_realloc_r+0xfa>
   10202:	68a3      	ldr	r3, [r4, #8]
   10204:	6083      	str	r3, [r0, #8]
   10206:	68e3      	ldr	r3, [r4, #12]
   10208:	60c3      	str	r3, [r0, #12]
   1020a:	2a24      	cmp	r2, #36	; 0x24
   1020c:	d026      	beq.n	1025c <_realloc_r+0x344>
   1020e:	f104 0210 	add.w	r2, r4, #16
   10212:	f100 0310 	add.w	r3, r0, #16
   10216:	e6db      	b.n	ffd0 <_realloc_r+0xb8>
   10218:	463a      	mov	r2, r7
   1021a:	e7bf      	b.n	1019c <_realloc_r+0x284>
   1021c:	4621      	mov	r1, r4
   1021e:	4638      	mov	r0, r7
   10220:	461e      	mov	r6, r3
   10222:	46d1      	mov	r9, sl
   10224:	f001 faa4 	bl	11770 <memmove>
   10228:	463c      	mov	r4, r7
   1022a:	e6f2      	b.n	10012 <_realloc_r+0xfa>
   1022c:	463b      	mov	r3, r7
   1022e:	e7de      	b.n	101ee <_realloc_r+0x2d6>
   10230:	4621      	mov	r1, r4
   10232:	4638      	mov	r0, r7
   10234:	4666      	mov	r6, ip
   10236:	46d1      	mov	r9, sl
   10238:	f001 fa9a 	bl	11770 <memmove>
   1023c:	463c      	mov	r4, r7
   1023e:	e6e8      	b.n	10012 <_realloc_r+0xfa>
   10240:	20009008 	.word	0x20009008
   10244:	68a1      	ldr	r1, [r4, #8]
   10246:	f8ca 1010 	str.w	r1, [sl, #16]
   1024a:	68e1      	ldr	r1, [r4, #12]
   1024c:	f8ca 1014 	str.w	r1, [sl, #20]
   10250:	2a24      	cmp	r2, #36	; 0x24
   10252:	d020      	beq.n	10296 <_realloc_r+0x37e>
   10254:	3410      	adds	r4, #16
   10256:	f10a 0218 	add.w	r2, sl, #24
   1025a:	e79f      	b.n	1019c <_realloc_r+0x284>
   1025c:	6923      	ldr	r3, [r4, #16]
   1025e:	6103      	str	r3, [r0, #16]
   10260:	6961      	ldr	r1, [r4, #20]
   10262:	6141      	str	r1, [r0, #20]
   10264:	f104 0218 	add.w	r2, r4, #24
   10268:	f100 0318 	add.w	r3, r0, #24
   1026c:	e6b0      	b.n	ffd0 <_realloc_r+0xb8>
   1026e:	68a3      	ldr	r3, [r4, #8]
   10270:	f8ca 3010 	str.w	r3, [sl, #16]
   10274:	68e3      	ldr	r3, [r4, #12]
   10276:	f8ca 3014 	str.w	r3, [sl, #20]
   1027a:	2a24      	cmp	r2, #36	; 0x24
   1027c:	d021      	beq.n	102c2 <_realloc_r+0x3aa>
   1027e:	3410      	adds	r4, #16
   10280:	f10a 0318 	add.w	r3, sl, #24
   10284:	e7b3      	b.n	101ee <_realloc_r+0x2d6>
   10286:	463a      	mov	r2, r7
   10288:	e733      	b.n	100f2 <_realloc_r+0x1da>
   1028a:	4621      	mov	r1, r4
   1028c:	4638      	mov	r0, r7
   1028e:	f001 fa6f 	bl	11770 <memmove>
   10292:	4b16      	ldr	r3, [pc, #88]	; (102ec <_realloc_r+0x3d4>)
   10294:	e733      	b.n	100fe <_realloc_r+0x1e6>
   10296:	6922      	ldr	r2, [r4, #16]
   10298:	f8ca 2018 	str.w	r2, [sl, #24]
   1029c:	6962      	ldr	r2, [r4, #20]
   1029e:	f8ca 201c 	str.w	r2, [sl, #28]
   102a2:	3418      	adds	r4, #24
   102a4:	f10a 0220 	add.w	r2, sl, #32
   102a8:	e778      	b.n	1019c <_realloc_r+0x284>
   102aa:	68a1      	ldr	r1, [r4, #8]
   102ac:	f8ca 1010 	str.w	r1, [sl, #16]
   102b0:	68e1      	ldr	r1, [r4, #12]
   102b2:	f8ca 1014 	str.w	r1, [sl, #20]
   102b6:	2a24      	cmp	r2, #36	; 0x24
   102b8:	d00d      	beq.n	102d6 <_realloc_r+0x3be>
   102ba:	3410      	adds	r4, #16
   102bc:	f10a 0218 	add.w	r2, sl, #24
   102c0:	e717      	b.n	100f2 <_realloc_r+0x1da>
   102c2:	6923      	ldr	r3, [r4, #16]
   102c4:	f8ca 3018 	str.w	r3, [sl, #24]
   102c8:	6963      	ldr	r3, [r4, #20]
   102ca:	f8ca 301c 	str.w	r3, [sl, #28]
   102ce:	3418      	adds	r4, #24
   102d0:	f10a 0320 	add.w	r3, sl, #32
   102d4:	e78b      	b.n	101ee <_realloc_r+0x2d6>
   102d6:	6922      	ldr	r2, [r4, #16]
   102d8:	f8ca 2018 	str.w	r2, [sl, #24]
   102dc:	6962      	ldr	r2, [r4, #20]
   102de:	f8ca 201c 	str.w	r2, [sl, #28]
   102e2:	3418      	adds	r4, #24
   102e4:	f10a 0220 	add.w	r2, sl, #32
   102e8:	e703      	b.n	100f2 <_realloc_r+0x1da>
   102ea:	bf00      	nop
   102ec:	20009008 	.word	0x20009008

000102f0 <_strtod_l>:
   102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102f4:	ed2d 8b10 	vpush	{d8-d15}
   102f8:	b097      	sub	sp, #92	; 0x5c
   102fa:	468a      	mov	sl, r1
   102fc:	2100      	movs	r1, #0
   102fe:	9207      	str	r2, [sp, #28]
   10300:	9112      	str	r1, [sp, #72]	; 0x48
   10302:	2200      	movs	r2, #0
   10304:	2100      	movs	r1, #0
   10306:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1030a:	4680      	mov	r8, r0
   1030c:	4651      	mov	r1, sl
   1030e:	9111      	str	r1, [sp, #68]	; 0x44
   10310:	460f      	mov	r7, r1
   10312:	f811 2b01 	ldrb.w	r2, [r1], #1
   10316:	2a2d      	cmp	r2, #45	; 0x2d
   10318:	d85e      	bhi.n	103d8 <_strtod_l+0xe8>
   1031a:	a001      	add	r0, pc, #4	; (adr r0, 10320 <_strtod_l+0x30>)
   1031c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   10320:	000104c1 	.word	0x000104c1
   10324:	000103d9 	.word	0x000103d9
   10328:	000103d9 	.word	0x000103d9
   1032c:	000103d9 	.word	0x000103d9
   10330:	000103d9 	.word	0x000103d9
   10334:	000103d9 	.word	0x000103d9
   10338:	000103d9 	.word	0x000103d9
   1033c:	000103d9 	.word	0x000103d9
   10340:	000103d9 	.word	0x000103d9
   10344:	0001030f 	.word	0x0001030f
   10348:	0001030f 	.word	0x0001030f
   1034c:	0001030f 	.word	0x0001030f
   10350:	0001030f 	.word	0x0001030f
   10354:	0001030f 	.word	0x0001030f
   10358:	000103d9 	.word	0x000103d9
   1035c:	000103d9 	.word	0x000103d9
   10360:	000103d9 	.word	0x000103d9
   10364:	000103d9 	.word	0x000103d9
   10368:	000103d9 	.word	0x000103d9
   1036c:	000103d9 	.word	0x000103d9
   10370:	000103d9 	.word	0x000103d9
   10374:	000103d9 	.word	0x000103d9
   10378:	000103d9 	.word	0x000103d9
   1037c:	000103d9 	.word	0x000103d9
   10380:	000103d9 	.word	0x000103d9
   10384:	000103d9 	.word	0x000103d9
   10388:	000103d9 	.word	0x000103d9
   1038c:	000103d9 	.word	0x000103d9
   10390:	000103d9 	.word	0x000103d9
   10394:	000103d9 	.word	0x000103d9
   10398:	000103d9 	.word	0x000103d9
   1039c:	000103d9 	.word	0x000103d9
   103a0:	0001030f 	.word	0x0001030f
   103a4:	000103d9 	.word	0x000103d9
   103a8:	000103d9 	.word	0x000103d9
   103ac:	000103d9 	.word	0x000103d9
   103b0:	000103d9 	.word	0x000103d9
   103b4:	000103d9 	.word	0x000103d9
   103b8:	000103d9 	.word	0x000103d9
   103bc:	000103d9 	.word	0x000103d9
   103c0:	000103d9 	.word	0x000103d9
   103c4:	000103d9 	.word	0x000103d9
   103c8:	000103d9 	.word	0x000103d9
   103cc:	00010afb 	.word	0x00010afb
   103d0:	000103d9 	.word	0x000103d9
   103d4:	00010ae7 	.word	0x00010ae7
   103d8:	2100      	movs	r1, #0
   103da:	9109      	str	r1, [sp, #36]	; 0x24
   103dc:	2a30      	cmp	r2, #48	; 0x30
   103de:	d07d      	beq.n	104dc <_strtod_l+0x1ec>
   103e0:	2300      	movs	r3, #0
   103e2:	9308      	str	r3, [sp, #32]
   103e4:	2a2f      	cmp	r2, #47	; 0x2f
   103e6:	4614      	mov	r4, r2
   103e8:	f240 84cd 	bls.w	10d86 <_strtod_l+0xa96>
   103ec:	f04f 0900 	mov.w	r9, #0
   103f0:	4638      	mov	r0, r7
   103f2:	464e      	mov	r6, r9
   103f4:	464d      	mov	r5, r9
   103f6:	e012      	b.n	1041e <_strtod_l+0x12e>
   103f8:	3001      	adds	r0, #1
   103fa:	2d08      	cmp	r5, #8
   103fc:	9011      	str	r0, [sp, #68]	; 0x44
   103fe:	bfc8      	it	gt
   10400:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   10404:	7804      	ldrb	r4, [r0, #0]
   10406:	bfc6      	itte	gt
   10408:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   1040c:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   10410:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   10414:	2c2f      	cmp	r4, #47	; 0x2f
   10416:	f105 0501 	add.w	r5, r5, #1
   1041a:	4622      	mov	r2, r4
   1041c:	dd6f      	ble.n	104fe <_strtod_l+0x20e>
   1041e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   10422:	2c39      	cmp	r4, #57	; 0x39
   10424:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10428:	dde6      	ble.n	103f8 <_strtod_l+0x108>
   1042a:	499f      	ldr	r1, [pc, #636]	; (106a8 <_strtod_l+0x3b8>)
   1042c:	2201      	movs	r2, #1
   1042e:	f001 fac3 	bl	119b8 <strncmp>
   10432:	2800      	cmp	r0, #0
   10434:	d137      	bne.n	104a6 <_strtod_l+0x1b6>
   10436:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10438:	461a      	mov	r2, r3
   1043a:	3301      	adds	r3, #1
   1043c:	9311      	str	r3, [sp, #68]	; 0x44
   1043e:	7854      	ldrb	r4, [r2, #1]
   10440:	2d00      	cmp	r5, #0
   10442:	f040 8543 	bne.w	10ecc <_strtod_l+0xbdc>
   10446:	2c30      	cmp	r4, #48	; 0x30
   10448:	f040 8524 	bne.w	10e94 <_strtod_l+0xba4>
   1044c:	f1c3 0201 	rsb	r2, r3, #1
   10450:	1898      	adds	r0, r3, r2
   10452:	3301      	adds	r3, #1
   10454:	9311      	str	r3, [sp, #68]	; 0x44
   10456:	781c      	ldrb	r4, [r3, #0]
   10458:	2c30      	cmp	r4, #48	; 0x30
   1045a:	d0f9      	beq.n	10450 <_strtod_l+0x160>
   1045c:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   10460:	2b08      	cmp	r3, #8
   10462:	f200 8301 	bhi.w	10a68 <_strtod_l+0x778>
   10466:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10468:	1c43      	adds	r3, r0, #1
   1046a:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   1046e:	930b      	str	r3, [sp, #44]	; 0x2c
   10470:	2501      	movs	r5, #1
   10472:	46bc      	mov	ip, r7
   10474:	f04f 0e00 	mov.w	lr, #0
   10478:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   1047c:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   10480:	2000      	movs	r0, #0
   10482:	f10c 0301 	add.w	r3, ip, #1
   10486:	9311      	str	r3, [sp, #68]	; 0x44
   10488:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1048c:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   10490:	2909      	cmp	r1, #9
   10492:	f200 82bb 	bhi.w	10a0c <_strtod_l+0x71c>
   10496:	3001      	adds	r0, #1
   10498:	468b      	mov	fp, r1
   1049a:	2900      	cmp	r1, #0
   1049c:	f040 844f 	bne.w	10d3e <_strtod_l+0xa4e>
   104a0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   104a4:	e7ed      	b.n	10482 <_strtod_l+0x192>
   104a6:	2000      	movs	r0, #0
   104a8:	2c65      	cmp	r4, #101	; 0x65
   104aa:	46ae      	mov	lr, r5
   104ac:	900b      	str	r0, [sp, #44]	; 0x2c
   104ae:	4684      	mov	ip, r0
   104b0:	d001      	beq.n	104b6 <_strtod_l+0x1c6>
   104b2:	2c45      	cmp	r4, #69	; 0x45
   104b4:	d130      	bne.n	10518 <_strtod_l+0x228>
   104b6:	2d00      	cmp	r5, #0
   104b8:	d16b      	bne.n	10592 <_strtod_l+0x2a2>
   104ba:	9b08      	ldr	r3, [sp, #32]
   104bc:	4303      	orrs	r3, r0
   104be:	d167      	bne.n	10590 <_strtod_l+0x2a0>
   104c0:	9b07      	ldr	r3, [sp, #28]
   104c2:	ed9f 8b77 	vldr	d8, [pc, #476]	; 106a0 <_strtod_l+0x3b0>
   104c6:	b113      	cbz	r3, 104ce <_strtod_l+0x1de>
   104c8:	9b07      	ldr	r3, [sp, #28]
   104ca:	f8c3 a000 	str.w	sl, [r3]
   104ce:	eeb0 0b48 	vmov.f64	d0, d8
   104d2:	b017      	add	sp, #92	; 0x5c
   104d4:	ecbd 8b10 	vpop	{d8-d15}
   104d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104dc:	787a      	ldrb	r2, [r7, #1]
   104de:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   104e2:	2a58      	cmp	r2, #88	; 0x58
   104e4:	f000 840c 	beq.w	10d00 <_strtod_l+0xa10>
   104e8:	3701      	adds	r7, #1
   104ea:	9711      	str	r7, [sp, #68]	; 0x44
   104ec:	783a      	ldrb	r2, [r7, #0]
   104ee:	2a30      	cmp	r2, #48	; 0x30
   104f0:	d0fa      	beq.n	104e8 <_strtod_l+0x1f8>
   104f2:	2a00      	cmp	r2, #0
   104f4:	f000 80b7 	beq.w	10666 <_strtod_l+0x376>
   104f8:	2301      	movs	r3, #1
   104fa:	9308      	str	r3, [sp, #32]
   104fc:	e772      	b.n	103e4 <_strtod_l+0xf4>
   104fe:	496a      	ldr	r1, [pc, #424]	; (106a8 <_strtod_l+0x3b8>)
   10500:	2201      	movs	r2, #1
   10502:	f001 fa59 	bl	119b8 <strncmp>
   10506:	2800      	cmp	r0, #0
   10508:	f000 80c0 	beq.w	1068c <_strtod_l+0x39c>
   1050c:	46ae      	mov	lr, r5
   1050e:	f04f 0c00 	mov.w	ip, #0
   10512:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   10516:	4660      	mov	r0, ip
   10518:	f04f 0b00 	mov.w	fp, #0
   1051c:	2d00      	cmp	r5, #0
   1051e:	d07e      	beq.n	1061e <_strtod_l+0x32e>
   10520:	ee07 6a90 	vmov	s15, r6
   10524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10526:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   1052a:	ebab 0303 	sub.w	r3, fp, r3
   1052e:	f1be 0f00 	cmp.w	lr, #0
   10532:	bf08      	it	eq
   10534:	46ae      	moveq	lr, r5
   10536:	2d10      	cmp	r5, #16
   10538:	930a      	str	r3, [sp, #40]	; 0x28
   1053a:	462b      	mov	r3, r5
   1053c:	bfa8      	it	ge
   1053e:	2310      	movge	r3, #16
   10540:	2d09      	cmp	r5, #9
   10542:	ed8d 7b04 	vstr	d7, [sp, #16]
   10546:	dd0c      	ble.n	10562 <_strtod_l+0x272>
   10548:	4a58      	ldr	r2, [pc, #352]	; (106ac <_strtod_l+0x3bc>)
   1054a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1054e:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   10552:	ee06 9a90 	vmov	s13, r9
   10556:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   1055a:	eea7 6b05 	vfma.f64	d6, d7, d5
   1055e:	ed8d 6b04 	vstr	d6, [sp, #16]
   10562:	2d0f      	cmp	r5, #15
   10564:	f300 80a8 	bgt.w	106b8 <_strtod_l+0x3c8>
   10568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1056a:	2a00      	cmp	r2, #0
   1056c:	f000 83e4 	beq.w	10d38 <_strtod_l+0xa48>
   10570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10572:	f340 833c 	ble.w	10bee <_strtod_l+0x8fe>
   10576:	2a16      	cmp	r2, #22
   10578:	f340 8498 	ble.w	10eac <_strtod_l+0xbbc>
   1057c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1057e:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   10582:	428a      	cmp	r2, r1
   10584:	f280 84a6 	bge.w	10ed4 <_strtod_l+0xbe4>
   10588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1058a:	1aeb      	subs	r3, r5, r3
   1058c:	4413      	add	r3, r2
   1058e:	e099      	b.n	106c4 <_strtod_l+0x3d4>
   10590:	2500      	movs	r5, #0
   10592:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   10596:	f10a 0301 	add.w	r3, sl, #1
   1059a:	9311      	str	r3, [sp, #68]	; 0x44
   1059c:	f89a 4001 	ldrb.w	r4, [sl, #1]
   105a0:	2c2b      	cmp	r4, #43	; 0x2b
   105a2:	f000 825e 	beq.w	10a62 <_strtod_l+0x772>
   105a6:	2c2d      	cmp	r4, #45	; 0x2d
   105a8:	f000 81f7 	beq.w	1099a <_strtod_l+0x6aa>
   105ac:	2300      	movs	r3, #0
   105ae:	930a      	str	r3, [sp, #40]	; 0x28
   105b0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   105b4:	2b09      	cmp	r3, #9
   105b6:	f200 81eb 	bhi.w	10990 <_strtod_l+0x6a0>
   105ba:	2c30      	cmp	r4, #48	; 0x30
   105bc:	d105      	bne.n	105ca <_strtod_l+0x2da>
   105be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105c0:	3301      	adds	r3, #1
   105c2:	9311      	str	r3, [sp, #68]	; 0x44
   105c4:	781c      	ldrb	r4, [r3, #0]
   105c6:	2c30      	cmp	r4, #48	; 0x30
   105c8:	d0fa      	beq.n	105c0 <_strtod_l+0x2d0>
   105ca:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   105ce:	2b08      	cmp	r3, #8
   105d0:	d8a2      	bhi.n	10518 <_strtod_l+0x228>
   105d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   105d4:	920c      	str	r2, [sp, #48]	; 0x30
   105d6:	1c53      	adds	r3, r2, #1
   105d8:	9311      	str	r3, [sp, #68]	; 0x44
   105da:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   105de:	7854      	ldrb	r4, [r2, #1]
   105e0:	2c2f      	cmp	r4, #47	; 0x2f
   105e2:	dc07      	bgt.n	105f4 <_strtod_l+0x304>
   105e4:	e3de      	b.n	10da4 <_strtod_l+0xab4>
   105e6:	3301      	adds	r3, #1
   105e8:	9311      	str	r3, [sp, #68]	; 0x44
   105ea:	784c      	ldrb	r4, [r1, #1]
   105ec:	2c2f      	cmp	r4, #47	; 0x2f
   105ee:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   105f2:	dd06      	ble.n	10602 <_strtod_l+0x312>
   105f4:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   105f8:	2c39      	cmp	r4, #57	; 0x39
   105fa:	4619      	mov	r1, r3
   105fc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   10600:	ddf1      	ble.n	105e6 <_strtod_l+0x2f6>
   10602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10604:	1a9b      	subs	r3, r3, r2
   10606:	2b08      	cmp	r3, #8
   10608:	f340 83cc 	ble.w	10da4 <_strtod_l+0xab4>
   1060c:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   10610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10612:	2b00      	cmp	r3, #0
   10614:	d082      	beq.n	1051c <_strtod_l+0x22c>
   10616:	f1cb 0b00 	rsb	fp, fp, #0
   1061a:	2d00      	cmp	r5, #0
   1061c:	d180      	bne.n	10520 <_strtod_l+0x230>
   1061e:	9b08      	ldr	r3, [sp, #32]
   10620:	4303      	orrs	r3, r0
   10622:	d120      	bne.n	10666 <_strtod_l+0x376>
   10624:	f1bc 0f00 	cmp.w	ip, #0
   10628:	f47f af4a 	bne.w	104c0 <_strtod_l+0x1d0>
   1062c:	2c69      	cmp	r4, #105	; 0x69
   1062e:	f000 83cf 	beq.w	10dd0 <_strtod_l+0xae0>
   10632:	f300 82f3 	bgt.w	10c1c <_strtod_l+0x92c>
   10636:	2c49      	cmp	r4, #73	; 0x49
   10638:	f000 83ca 	beq.w	10dd0 <_strtod_l+0xae0>
   1063c:	2c4e      	cmp	r4, #78	; 0x4e
   1063e:	f47f af3f 	bne.w	104c0 <_strtod_l+0x1d0>
   10642:	491b      	ldr	r1, [pc, #108]	; (106b0 <_strtod_l+0x3c0>)
   10644:	a811      	add	r0, sp, #68	; 0x44
   10646:	f002 fa2f 	bl	12aa8 <__match>
   1064a:	2800      	cmp	r0, #0
   1064c:	f43f af38 	beq.w	104c0 <_strtod_l+0x1d0>
   10650:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10652:	781b      	ldrb	r3, [r3, #0]
   10654:	2b28      	cmp	r3, #40	; 0x28
   10656:	f000 84f2 	beq.w	1103e <_strtod_l+0xd4e>
   1065a:	4816      	ldr	r0, [pc, #88]	; (106b4 <_strtod_l+0x3c4>)
   1065c:	f001 fd60 	bl	12120 <nan>
   10660:	eeb0 8b40 	vmov.f64	d8, d0
   10664:	e001      	b.n	1066a <_strtod_l+0x37a>
   10666:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 106a0 <_strtod_l+0x3b0>
   1066a:	9a07      	ldr	r2, [sp, #28]
   1066c:	b10a      	cbz	r2, 10672 <_strtod_l+0x382>
   1066e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10670:	6013      	str	r3, [r2, #0]
   10672:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10674:	2b00      	cmp	r3, #0
   10676:	f43f af2a 	beq.w	104ce <_strtod_l+0x1de>
   1067a:	eeb1 8b48 	vneg.f64	d8, d8
   1067e:	eeb0 0b48 	vmov.f64	d0, d8
   10682:	b017      	add	sp, #92	; 0x5c
   10684:	ecbd 8b10 	vpop	{d8-d15}
   10688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1068c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1068e:	900b      	str	r0, [sp, #44]	; 0x2c
   10690:	1c5a      	adds	r2, r3, #1
   10692:	9211      	str	r2, [sp, #68]	; 0x44
   10694:	785c      	ldrb	r4, [r3, #1]
   10696:	46ae      	mov	lr, r5
   10698:	e6f8      	b.n	1048c <_strtod_l+0x19c>
   1069a:	bf00      	nop
   1069c:	f3af 8000 	nop.w
	...
   106a8:	20008228 	.word	0x20008228
   106ac:	20000328 	.word	0x20000328
   106b0:	20001110 	.word	0x20001110
   106b4:	20000518 	.word	0x20000518
   106b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   106ba:	1aeb      	subs	r3, r5, r3
   106bc:	4413      	add	r3, r2
   106be:	2b00      	cmp	r3, #0
   106c0:	f340 82b0 	ble.w	10c24 <_strtod_l+0x934>
   106c4:	f013 010f 	ands.w	r1, r3, #15
   106c8:	d00a      	beq.n	106e0 <_strtod_l+0x3f0>
   106ca:	4ac3      	ldr	r2, [pc, #780]	; (109d8 <_strtod_l+0x6e8>)
   106cc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   106d0:	ed9d 6b04 	vldr	d6, [sp, #16]
   106d4:	ed92 7b00 	vldr	d7, [r2]
   106d8:	ee27 7b06 	vmul.f64	d7, d7, d6
   106dc:	ed8d 7b04 	vstr	d7, [sp, #16]
   106e0:	f033 020f 	bics.w	r2, r3, #15
   106e4:	f040 8238 	bne.w	10b58 <_strtod_l+0x868>
   106e8:	2300      	movs	r3, #0
   106ea:	9308      	str	r3, [sp, #32]
   106ec:	9600      	str	r6, [sp, #0]
   106ee:	462b      	mov	r3, r5
   106f0:	4672      	mov	r2, lr
   106f2:	4639      	mov	r1, r7
   106f4:	4640      	mov	r0, r8
   106f6:	f002 fb63 	bl	12dc0 <__s2b>
   106fa:	4681      	mov	r9, r0
   106fc:	2800      	cmp	r0, #0
   106fe:	f000 82e1 	beq.w	10cc4 <_strtod_l+0x9d4>
   10702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10704:	eba3 0b0b 	sub.w	fp, r3, fp
   10708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1070a:	ed9f eba9 	vldr	d14, [pc, #676]	; 109b0 <_strtod_l+0x6c0>
   1070e:	2b00      	cmp	r3, #0
   10710:	ed9f cba9 	vldr	d12, [pc, #676]	; 109b8 <_strtod_l+0x6c8>
   10714:	ed9f dbaa 	vldr	d13, [pc, #680]	; 109c0 <_strtod_l+0x6d0>
   10718:	ed9f bbab 	vldr	d11, [pc, #684]	; 109c8 <_strtod_l+0x6d8>
   1071c:	bfb4      	ite	lt
   1071e:	465a      	movlt	r2, fp
   10720:	2200      	movge	r2, #0
   10722:	f04f 0a00 	mov.w	sl, #0
   10726:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1072a:	920b      	str	r2, [sp, #44]	; 0x2c
   1072c:	930c      	str	r3, [sp, #48]	; 0x30
   1072e:	4654      	mov	r4, sl
   10730:	f8d9 1004 	ldr.w	r1, [r9, #4]
   10734:	4640      	mov	r0, r8
   10736:	f002 fac1 	bl	12cbc <_Balloc>
   1073a:	4606      	mov	r6, r0
   1073c:	2800      	cmp	r0, #0
   1073e:	f000 810e 	beq.w	1095e <_strtod_l+0x66e>
   10742:	f8d9 2010 	ldr.w	r2, [r9, #16]
   10746:	ed9d 8b04 	vldr	d8, [sp, #16]
   1074a:	3202      	adds	r2, #2
   1074c:	0092      	lsls	r2, r2, #2
   1074e:	f109 010c 	add.w	r1, r9, #12
   10752:	300c      	adds	r0, #12
   10754:	f7fc fffa 	bl	d74c <memcpy>
   10758:	eeb0 0b48 	vmov.f64	d0, d8
   1075c:	aa14      	add	r2, sp, #80	; 0x50
   1075e:	a913      	add	r1, sp, #76	; 0x4c
   10760:	4640      	mov	r0, r8
   10762:	f002 fee9 	bl	13538 <__d2b>
   10766:	9012      	str	r0, [sp, #72]	; 0x48
   10768:	2800      	cmp	r0, #0
   1076a:	f000 80e4 	beq.w	10936 <_strtod_l+0x646>
   1076e:	2101      	movs	r1, #1
   10770:	4640      	mov	r0, r8
   10772:	f002 fbcd 	bl	12f10 <__i2b>
   10776:	4604      	mov	r4, r0
   10778:	2800      	cmp	r0, #0
   1077a:	f000 80f0 	beq.w	1095e <_strtod_l+0x66e>
   1077e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10780:	2a00      	cmp	r2, #0
   10782:	f2c0 80de 	blt.w	10942 <_strtod_l+0x652>
   10786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10788:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1078a:	eb02 0b03 	add.w	fp, r2, r3
   1078e:	9b08      	ldr	r3, [sp, #32]
   10790:	9d14      	ldr	r5, [sp, #80]	; 0x50
   10792:	1ad2      	subs	r2, r2, r3
   10794:	442a      	add	r2, r5
   10796:	4b91      	ldr	r3, [pc, #580]	; (109dc <_strtod_l+0x6ec>)
   10798:	3a01      	subs	r2, #1
   1079a:	429a      	cmp	r2, r3
   1079c:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   107a0:	f280 8098 	bge.w	108d4 <_strtod_l+0x5e4>
   107a4:	1a99      	subs	r1, r3, r2
   107a6:	291f      	cmp	r1, #31
   107a8:	eba5 0501 	sub.w	r5, r5, r1
   107ac:	f300 80e3 	bgt.w	10976 <_strtod_l+0x686>
   107b0:	2201      	movs	r2, #1
   107b2:	fa02 f301 	lsl.w	r3, r2, r1
   107b6:	930d      	str	r3, [sp, #52]	; 0x34
   107b8:	2300      	movs	r3, #0
   107ba:	930e      	str	r3, [sp, #56]	; 0x38
   107bc:	442f      	add	r7, r5
   107be:	9b08      	ldr	r3, [sp, #32]
   107c0:	445d      	add	r5, fp
   107c2:	45ab      	cmp	fp, r5
   107c4:	465a      	mov	r2, fp
   107c6:	441f      	add	r7, r3
   107c8:	bfa8      	it	ge
   107ca:	462a      	movge	r2, r5
   107cc:	42ba      	cmp	r2, r7
   107ce:	bfa8      	it	ge
   107d0:	463a      	movge	r2, r7
   107d2:	2a00      	cmp	r2, #0
   107d4:	dd03      	ble.n	107de <_strtod_l+0x4ee>
   107d6:	1aad      	subs	r5, r5, r2
   107d8:	1abf      	subs	r7, r7, r2
   107da:	ebab 0b02 	sub.w	fp, fp, r2
   107de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   107e0:	2b00      	cmp	r3, #0
   107e2:	f300 8088 	bgt.w	108f6 <_strtod_l+0x606>
   107e6:	2d00      	cmp	r5, #0
   107e8:	f300 809c 	bgt.w	10924 <_strtod_l+0x634>
   107ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107ee:	2b00      	cmp	r3, #0
   107f0:	f300 80b7 	bgt.w	10962 <_strtod_l+0x672>
   107f4:	2f00      	cmp	r7, #0
   107f6:	f300 80a9 	bgt.w	1094c <_strtod_l+0x65c>
   107fa:	f1bb 0f00 	cmp.w	fp, #0
   107fe:	dd08      	ble.n	10812 <_strtod_l+0x522>
   10800:	4621      	mov	r1, r4
   10802:	465a      	mov	r2, fp
   10804:	4640      	mov	r0, r8
   10806:	f002 fcbf 	bl	13188 <__lshift>
   1080a:	4604      	mov	r4, r0
   1080c:	2800      	cmp	r0, #0
   1080e:	f000 80a6 	beq.w	1095e <_strtod_l+0x66e>
   10812:	9912      	ldr	r1, [sp, #72]	; 0x48
   10814:	4632      	mov	r2, r6
   10816:	4640      	mov	r0, r8
   10818:	f002 fd50 	bl	132bc <__mdiff>
   1081c:	4682      	mov	sl, r0
   1081e:	2800      	cmp	r0, #0
   10820:	f000 809d 	beq.w	1095e <_strtod_l+0x66e>
   10824:	2300      	movs	r3, #0
   10826:	68c5      	ldr	r5, [r0, #12]
   10828:	60c3      	str	r3, [r0, #12]
   1082a:	4621      	mov	r1, r4
   1082c:	f002 fd24 	bl	13278 <__mcmp>
   10830:	2800      	cmp	r0, #0
   10832:	f2c0 83c7 	blt.w	10fc4 <_strtod_l+0xcd4>
   10836:	f000 8361 	beq.w	10efc <_strtod_l+0xc0c>
   1083a:	4621      	mov	r1, r4
   1083c:	4650      	mov	r0, sl
   1083e:	f002 fee5 	bl	1360c <__ratio>
   10842:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   10846:	eeb4 0bc7 	vcmpe.f64	d0, d7
   1084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1084e:	d846      	bhi.n	108de <_strtod_l+0x5ee>
   10850:	2d00      	cmp	r5, #0
   10852:	f000 80cb 	beq.w	109ec <_strtod_l+0x6fc>
   10856:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   1085a:	9805      	ldr	r0, [sp, #20]
   1085c:	4b60      	ldr	r3, [pc, #384]	; (109e0 <_strtod_l+0x6f0>)
   1085e:	2200      	movs	r2, #0
   10860:	4960      	ldr	r1, [pc, #384]	; (109e4 <_strtod_l+0x6f4>)
   10862:	f8df c184 	ldr.w	ip, [pc, #388]	; 109e8 <_strtod_l+0x6f8>
   10866:	ea00 0701 	and.w	r7, r0, r1
   1086a:	4567      	cmp	r7, ip
   1086c:	f000 80d4 	beq.w	10a18 <_strtod_l+0x728>
   10870:	9908      	ldr	r1, [sp, #32]
   10872:	b159      	cbz	r1, 1088c <_strtod_l+0x59c>
   10874:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   10878:	d808      	bhi.n	1088c <_strtod_l+0x59c>
   1087a:	eeb4 9bcb 	vcmpe.f64	d9, d11
   1087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10882:	f240 8156 	bls.w	10b32 <_strtod_l+0x842>
   10886:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   1088a:	1bcb      	subs	r3, r1, r7
   1088c:	eeb0 0b48 	vmov.f64	d0, d8
   10890:	ec43 2b1a 	vmov	d10, r2, r3
   10894:	f002 fdbc 	bl	13410 <__ulp>
   10898:	eeaa 8b00 	vfma.f64	d8, d10, d0
   1089c:	ed8d 8b04 	vstr	d8, [sp, #16]
   108a0:	ee18 3a90 	vmov	r3, s17
   108a4:	9a08      	ldr	r2, [sp, #32]
   108a6:	b922      	cbnz	r2, 108b2 <_strtod_l+0x5c2>
   108a8:	4a4e      	ldr	r2, [pc, #312]	; (109e4 <_strtod_l+0x6f4>)
   108aa:	401a      	ands	r2, r3
   108ac:	4297      	cmp	r7, r2
   108ae:	f000 80e4 	beq.w	10a7a <_strtod_l+0x78a>
   108b2:	9912      	ldr	r1, [sp, #72]	; 0x48
   108b4:	4640      	mov	r0, r8
   108b6:	f002 fa27 	bl	12d08 <_Bfree>
   108ba:	4631      	mov	r1, r6
   108bc:	4640      	mov	r0, r8
   108be:	f002 fa23 	bl	12d08 <_Bfree>
   108c2:	4621      	mov	r1, r4
   108c4:	4640      	mov	r0, r8
   108c6:	f002 fa1f 	bl	12d08 <_Bfree>
   108ca:	4651      	mov	r1, sl
   108cc:	4640      	mov	r0, r8
   108ce:	f002 fa1b 	bl	12d08 <_Bfree>
   108d2:	e72d      	b.n	10730 <_strtod_l+0x440>
   108d4:	2301      	movs	r3, #1
   108d6:	2100      	movs	r1, #0
   108d8:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   108dc:	e76e      	b.n	107bc <_strtod_l+0x4cc>
   108de:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   108e2:	ee20 9b09 	vmul.f64	d9, d0, d9
   108e6:	2d00      	cmp	r5, #0
   108e8:	d15f      	bne.n	109aa <_strtod_l+0x6ba>
   108ea:	eeb1 7b49 	vneg.f64	d7, d9
   108ee:	9805      	ldr	r0, [sp, #20]
   108f0:	ec53 2b17 	vmov	r2, r3, d7
   108f4:	e7b4      	b.n	10860 <_strtod_l+0x570>
   108f6:	4621      	mov	r1, r4
   108f8:	461a      	mov	r2, r3
   108fa:	4640      	mov	r0, r8
   108fc:	f002 fbe4 	bl	130c8 <__pow5mult>
   10900:	4604      	mov	r4, r0
   10902:	b360      	cbz	r0, 1095e <_strtod_l+0x66e>
   10904:	4601      	mov	r1, r0
   10906:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10908:	4640      	mov	r0, r8
   1090a:	f002 fb2f 	bl	12f6c <__multiply>
   1090e:	b330      	cbz	r0, 1095e <_strtod_l+0x66e>
   10910:	900f      	str	r0, [sp, #60]	; 0x3c
   10912:	9912      	ldr	r1, [sp, #72]	; 0x48
   10914:	4640      	mov	r0, r8
   10916:	f002 f9f7 	bl	12d08 <_Bfree>
   1091a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1091c:	9212      	str	r2, [sp, #72]	; 0x48
   1091e:	2d00      	cmp	r5, #0
   10920:	f77f af64 	ble.w	107ec <_strtod_l+0x4fc>
   10924:	9912      	ldr	r1, [sp, #72]	; 0x48
   10926:	462a      	mov	r2, r5
   10928:	4640      	mov	r0, r8
   1092a:	f002 fc2d 	bl	13188 <__lshift>
   1092e:	9012      	str	r0, [sp, #72]	; 0x48
   10930:	2800      	cmp	r0, #0
   10932:	f47f af5b 	bne.w	107ec <_strtod_l+0x4fc>
   10936:	2322      	movs	r3, #34	; 0x22
   10938:	ed9f 8b25 	vldr	d8, [pc, #148]	; 109d0 <_strtod_l+0x6e0>
   1093c:	f8c8 3000 	str.w	r3, [r8]
   10940:	e0bc      	b.n	10abc <_strtod_l+0x7cc>
   10942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10944:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10948:	1a9f      	subs	r7, r3, r2
   1094a:	e720      	b.n	1078e <_strtod_l+0x49e>
   1094c:	4631      	mov	r1, r6
   1094e:	463a      	mov	r2, r7
   10950:	4640      	mov	r0, r8
   10952:	f002 fc19 	bl	13188 <__lshift>
   10956:	4606      	mov	r6, r0
   10958:	2800      	cmp	r0, #0
   1095a:	f47f af4e 	bne.w	107fa <_strtod_l+0x50a>
   1095e:	9812      	ldr	r0, [sp, #72]	; 0x48
   10960:	e7e9      	b.n	10936 <_strtod_l+0x646>
   10962:	4631      	mov	r1, r6
   10964:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10966:	4640      	mov	r0, r8
   10968:	f002 fbae 	bl	130c8 <__pow5mult>
   1096c:	4606      	mov	r6, r0
   1096e:	2800      	cmp	r0, #0
   10970:	f47f af40 	bne.w	107f4 <_strtod_l+0x504>
   10974:	e7f3      	b.n	1095e <_strtod_l+0x66e>
   10976:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   1097a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   1097e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   10982:	2101      	movs	r1, #1
   10984:	32e2      	adds	r2, #226	; 0xe2
   10986:	fa01 f302 	lsl.w	r3, r1, r2
   1098a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   1098e:	e715      	b.n	107bc <_strtod_l+0x4cc>
   10990:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   10994:	f04f 0b00 	mov.w	fp, #0
   10998:	e5c0      	b.n	1051c <_strtod_l+0x22c>
   1099a:	2301      	movs	r3, #1
   1099c:	930a      	str	r3, [sp, #40]	; 0x28
   1099e:	f10a 0302 	add.w	r3, sl, #2
   109a2:	9311      	str	r3, [sp, #68]	; 0x44
   109a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
   109a8:	e602      	b.n	105b0 <_strtod_l+0x2c0>
   109aa:	eeb0 7b49 	vmov.f64	d7, d9
   109ae:	e79e      	b.n	108ee <_strtod_l+0x5fe>
   109b0:	94a03595 	.word	0x94a03595
   109b4:	3fcfffff 	.word	0x3fcfffff
   109b8:	94a03595 	.word	0x94a03595
   109bc:	3fdfffff 	.word	0x3fdfffff
   109c0:	35afe535 	.word	0x35afe535
   109c4:	3fe00000 	.word	0x3fe00000
   109c8:	ffc00000 	.word	0xffc00000
   109cc:	41dfffff 	.word	0x41dfffff
   109d0:	00000000 	.word	0x00000000
   109d4:	7ff00000 	.word	0x7ff00000
   109d8:	20000328 	.word	0x20000328
   109dc:	fffffc02 	.word	0xfffffc02
   109e0:	3ff00000 	.word	0x3ff00000
   109e4:	7ff00000 	.word	0x7ff00000
   109e8:	7fe00000 	.word	0x7fe00000
   109ec:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   109f0:	2900      	cmp	r1, #0
   109f2:	f000 8085 	beq.w	10b00 <_strtod_l+0x810>
   109f6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   109fa:	2901      	cmp	r1, #1
   109fc:	f000 81d8 	beq.w	10db0 <_strtod_l+0xac0>
   10a00:	4610      	mov	r0, r2
   10a02:	4bb7      	ldr	r3, [pc, #732]	; (10ce0 <_strtod_l+0x9f0>)
   10a04:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   10a08:	2200      	movs	r2, #0
   10a0a:	e729      	b.n	10860 <_strtod_l+0x570>
   10a0c:	2c65      	cmp	r4, #101	; 0x65
   10a0e:	f04f 0c01 	mov.w	ip, #1
   10a12:	f43f adbe 	beq.w	10592 <_strtod_l+0x2a2>
   10a16:	e54c      	b.n	104b2 <_strtod_l+0x1c2>
   10a18:	ec43 2b1a 	vmov	d10, r2, r3
   10a1c:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   10a20:	9305      	str	r3, [sp, #20]
   10a22:	ed9d fb04 	vldr	d15, [sp, #16]
   10a26:	eeb0 0b4f 	vmov.f64	d0, d15
   10a2a:	f002 fcf1 	bl	13410 <__ulp>
   10a2e:	49ad      	ldr	r1, [pc, #692]	; (10ce4 <_strtod_l+0x9f4>)
   10a30:	eeaa fb00 	vfma.f64	d15, d10, d0
   10a34:	ee1f 3a90 	vmov	r3, s31
   10a38:	4aab      	ldr	r2, [pc, #684]	; (10ce8 <_strtod_l+0x9f8>)
   10a3a:	4019      	ands	r1, r3
   10a3c:	4291      	cmp	r1, r2
   10a3e:	ed8d fb04 	vstr	d15, [sp, #16]
   10a42:	d972      	bls.n	10b2a <_strtod_l+0x83a>
   10a44:	4ba9      	ldr	r3, [pc, #676]	; (10cec <_strtod_l+0x9fc>)
   10a46:	ee18 2a90 	vmov	r2, s17
   10a4a:	429a      	cmp	r2, r3
   10a4c:	d103      	bne.n	10a56 <_strtod_l+0x766>
   10a4e:	ee18 3a10 	vmov	r3, s16
   10a52:	3301      	adds	r3, #1
   10a54:	d083      	beq.n	1095e <_strtod_l+0x66e>
   10a56:	4aa5      	ldr	r2, [pc, #660]	; (10cec <_strtod_l+0x9fc>)
   10a58:	f04f 33ff 	mov.w	r3, #4294967295
   10a5c:	e9cd 3204 	strd	r3, r2, [sp, #16]
   10a60:	e727      	b.n	108b2 <_strtod_l+0x5c2>
   10a62:	2300      	movs	r3, #0
   10a64:	930a      	str	r3, [sp, #40]	; 0x28
   10a66:	e79a      	b.n	1099e <_strtod_l+0x6ae>
   10a68:	2c65      	cmp	r4, #101	; 0x65
   10a6a:	f000 80d0 	beq.w	10c0e <_strtod_l+0x91e>
   10a6e:	2c45      	cmp	r4, #69	; 0x45
   10a70:	f000 80cd 	beq.w	10c0e <_strtod_l+0x91e>
   10a74:	f04f 0c01 	mov.w	ip, #1
   10a78:	e5d1      	b.n	1061e <_strtod_l+0x32e>
   10a7a:	ec51 0b19 	vmov	r0, r1, d9
   10a7e:	930d      	str	r3, [sp, #52]	; 0x34
   10a80:	f009 fcd0 	bl	1a424 <__aeabi_d2lz>
   10a84:	f009 fca0 	bl	1a3c8 <__aeabi_l2d>
   10a88:	9b04      	ldr	r3, [sp, #16]
   10a8a:	431d      	orrs	r5, r3
   10a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a8e:	ec41 0b17 	vmov	d7, r0, r1
   10a92:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10a96:	431d      	orrs	r5, r3
   10a98:	ee39 9b47 	vsub.f64	d9, d9, d7
   10a9c:	f000 80a0 	beq.w	10be0 <_strtod_l+0x8f0>
   10aa0:	eeb4 9bcc 	vcmpe.f64	d9, d12
   10aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10aa8:	d405      	bmi.n	10ab6 <_strtod_l+0x7c6>
   10aaa:	eeb4 9bcd 	vcmpe.f64	d9, d13
   10aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ab2:	f77f aefe 	ble.w	108b2 <_strtod_l+0x5c2>
   10ab6:	ed9d 8b04 	vldr	d8, [sp, #16]
   10aba:	9812      	ldr	r0, [sp, #72]	; 0x48
   10abc:	4601      	mov	r1, r0
   10abe:	4640      	mov	r0, r8
   10ac0:	f002 f922 	bl	12d08 <_Bfree>
   10ac4:	4631      	mov	r1, r6
   10ac6:	4640      	mov	r0, r8
   10ac8:	f002 f91e 	bl	12d08 <_Bfree>
   10acc:	4621      	mov	r1, r4
   10ace:	4640      	mov	r0, r8
   10ad0:	f002 f91a 	bl	12d08 <_Bfree>
   10ad4:	4649      	mov	r1, r9
   10ad6:	4640      	mov	r0, r8
   10ad8:	f002 f916 	bl	12d08 <_Bfree>
   10adc:	4651      	mov	r1, sl
   10ade:	4640      	mov	r0, r8
   10ae0:	f002 f912 	bl	12d08 <_Bfree>
   10ae4:	e5c1      	b.n	1066a <_strtod_l+0x37a>
   10ae6:	2201      	movs	r2, #1
   10ae8:	9209      	str	r2, [sp, #36]	; 0x24
   10aea:	1c79      	adds	r1, r7, #1
   10aec:	9111      	str	r1, [sp, #68]	; 0x44
   10aee:	787a      	ldrb	r2, [r7, #1]
   10af0:	2a00      	cmp	r2, #0
   10af2:	f43f ace5 	beq.w	104c0 <_strtod_l+0x1d0>
   10af6:	460f      	mov	r7, r1
   10af8:	e470      	b.n	103dc <_strtod_l+0xec>
   10afa:	2200      	movs	r2, #0
   10afc:	9209      	str	r2, [sp, #36]	; 0x24
   10afe:	e7f4      	b.n	10aea <_strtod_l+0x7fa>
   10b00:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10b04:	4610      	mov	r0, r2
   10b06:	2b00      	cmp	r3, #0
   10b08:	f47f af7b 	bne.w	10a02 <_strtod_l+0x712>
   10b0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   10b10:	eeb4 0bc7 	vcmpe.f64	d0, d7
   10b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10b18:	f100 81d3 	bmi.w	10ec2 <_strtod_l+0xbd2>
   10b1c:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10b20:	ee20 9b09 	vmul.f64	d9, d0, d9
   10b24:	eeb1 7b49 	vneg.f64	d7, d9
   10b28:	e6e2      	b.n	108f0 <_strtod_l+0x600>
   10b2a:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   10b2e:	9305      	str	r3, [sp, #20]
   10b30:	e6b8      	b.n	108a4 <_strtod_l+0x5b4>
   10b32:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   10b36:	ee19 3a10 	vmov	r3, s18
   10b3a:	2b01      	cmp	r3, #1
   10b3c:	bf38      	it	cc
   10b3e:	2301      	movcc	r3, #1
   10b40:	ee09 3a10 	vmov	s18, r3
   10b44:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   10b48:	2d00      	cmp	r5, #0
   10b4a:	f040 813e 	bne.w	10dca <_strtod_l+0xada>
   10b4e:	eeb1 7b49 	vneg.f64	d7, d9
   10b52:	ec53 2b17 	vmov	r2, r3, d7
   10b56:	e696      	b.n	10886 <_strtod_l+0x596>
   10b58:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   10b5c:	f300 80b2 	bgt.w	10cc4 <_strtod_l+0x9d4>
   10b60:	2a10      	cmp	r2, #16
   10b62:	ea4f 1322 	mov.w	r3, r2, asr #4
   10b66:	f340 8286 	ble.w	11076 <_strtod_l+0xd86>
   10b6a:	4c61      	ldr	r4, [pc, #388]	; (10cf0 <_strtod_l+0xa00>)
   10b6c:	ed9d 7b04 	vldr	d7, [sp, #16]
   10b70:	2000      	movs	r0, #0
   10b72:	4622      	mov	r2, r4
   10b74:	4601      	mov	r1, r0
   10b76:	f013 0f01 	tst.w	r3, #1
   10b7a:	f101 0101 	add.w	r1, r1, #1
   10b7e:	ea4f 0363 	mov.w	r3, r3, asr #1
   10b82:	d004      	beq.n	10b8e <_strtod_l+0x89e>
   10b84:	ed92 6b00 	vldr	d6, [r2]
   10b88:	2001      	movs	r0, #1
   10b8a:	ee27 7b06 	vmul.f64	d7, d7, d6
   10b8e:	2b01      	cmp	r3, #1
   10b90:	f102 0208 	add.w	r2, r2, #8
   10b94:	d1ef      	bne.n	10b76 <_strtod_l+0x886>
   10b96:	b108      	cbz	r0, 10b9c <_strtod_l+0x8ac>
   10b98:	ed8d 7b04 	vstr	d7, [sp, #16]
   10b9c:	9b05      	ldr	r3, [sp, #20]
   10b9e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   10ba2:	9305      	str	r3, [sp, #20]
   10ba4:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   10ba8:	ed9d 6b04 	vldr	d6, [sp, #16]
   10bac:	ed94 7b00 	vldr	d7, [r4]
   10bb0:	4b4c      	ldr	r3, [pc, #304]	; (10ce4 <_strtod_l+0x9f4>)
   10bb2:	ee27 7b06 	vmul.f64	d7, d7, d6
   10bb6:	ee17 2a90 	vmov	r2, s15
   10bba:	494e      	ldr	r1, [pc, #312]	; (10cf4 <_strtod_l+0xa04>)
   10bbc:	4013      	ands	r3, r2
   10bbe:	428b      	cmp	r3, r1
   10bc0:	ed8d 7b04 	vstr	d7, [sp, #16]
   10bc4:	d87e      	bhi.n	10cc4 <_strtod_l+0x9d4>
   10bc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   10bca:	428b      	cmp	r3, r1
   10bcc:	f240 81d6 	bls.w	10f7c <_strtod_l+0xc8c>
   10bd0:	4c46      	ldr	r4, [pc, #280]	; (10cec <_strtod_l+0x9fc>)
   10bd2:	f04f 33ff 	mov.w	r3, #4294967295
   10bd6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   10bda:	2300      	movs	r3, #0
   10bdc:	9308      	str	r3, [sp, #32]
   10bde:	e585      	b.n	106ec <_strtod_l+0x3fc>
   10be0:	eeb4 9bce 	vcmpe.f64	d9, d14
   10be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10be8:	f57f ae63 	bpl.w	108b2 <_strtod_l+0x5c2>
   10bec:	e763      	b.n	10ab6 <_strtod_l+0x7c6>
   10bee:	3216      	adds	r2, #22
   10bf0:	f6ff ad62 	blt.w	106b8 <_strtod_l+0x3c8>
   10bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10bf6:	eba3 0b0b 	sub.w	fp, r3, fp
   10bfa:	4b3f      	ldr	r3, [pc, #252]	; (10cf8 <_strtod_l+0xa08>)
   10bfc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10c00:	ed93 7b00 	vldr	d7, [r3]
   10c04:	ed9d 6b04 	vldr	d6, [sp, #16]
   10c08:	ee86 8b07 	vdiv.f64	d8, d6, d7
   10c0c:	e52d      	b.n	1066a <_strtod_l+0x37a>
   10c0e:	f04f 0e00 	mov.w	lr, #0
   10c12:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   10c16:	f04f 0c01 	mov.w	ip, #1
   10c1a:	e44e      	b.n	104ba <_strtod_l+0x1ca>
   10c1c:	2c6e      	cmp	r4, #110	; 0x6e
   10c1e:	f43f ad10 	beq.w	10642 <_strtod_l+0x352>
   10c22:	e44d      	b.n	104c0 <_strtod_l+0x1d0>
   10c24:	f43f ad60 	beq.w	106e8 <_strtod_l+0x3f8>
   10c28:	425b      	negs	r3, r3
   10c2a:	f013 010f 	ands.w	r1, r3, #15
   10c2e:	d00a      	beq.n	10c46 <_strtod_l+0x956>
   10c30:	4a31      	ldr	r2, [pc, #196]	; (10cf8 <_strtod_l+0xa08>)
   10c32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   10c36:	ed9d 6b04 	vldr	d6, [sp, #16]
   10c3a:	ed92 7b00 	vldr	d7, [r2]
   10c3e:	ee86 7b07 	vdiv.f64	d7, d6, d7
   10c42:	ed8d 7b04 	vstr	d7, [sp, #16]
   10c46:	111b      	asrs	r3, r3, #4
   10c48:	f43f ad4e 	beq.w	106e8 <_strtod_l+0x3f8>
   10c4c:	2b1f      	cmp	r3, #31
   10c4e:	dc33      	bgt.n	10cb8 <_strtod_l+0x9c8>
   10c50:	f013 0210 	ands.w	r2, r3, #16
   10c54:	bf18      	it	ne
   10c56:	226a      	movne	r2, #106	; 0x6a
   10c58:	ed9d 7b04 	vldr	d7, [sp, #16]
   10c5c:	9208      	str	r2, [sp, #32]
   10c5e:	4a27      	ldr	r2, [pc, #156]	; (10cfc <_strtod_l+0xa0c>)
   10c60:	2100      	movs	r1, #0
   10c62:	07d8      	lsls	r0, r3, #31
   10c64:	d504      	bpl.n	10c70 <_strtod_l+0x980>
   10c66:	ed92 6b00 	vldr	d6, [r2]
   10c6a:	2101      	movs	r1, #1
   10c6c:	ee27 7b06 	vmul.f64	d7, d7, d6
   10c70:	105b      	asrs	r3, r3, #1
   10c72:	f102 0208 	add.w	r2, r2, #8
   10c76:	d1f4      	bne.n	10c62 <_strtod_l+0x972>
   10c78:	b109      	cbz	r1, 10c7e <_strtod_l+0x98e>
   10c7a:	ed8d 7b04 	vstr	d7, [sp, #16]
   10c7e:	9b08      	ldr	r3, [sp, #32]
   10c80:	b193      	cbz	r3, 10ca8 <_strtod_l+0x9b8>
   10c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10c86:	f3c1 520a 	ubfx	r2, r1, #20, #11
   10c8a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   10c8e:	2b00      	cmp	r3, #0
   10c90:	dd0a      	ble.n	10ca8 <_strtod_l+0x9b8>
   10c92:	2b1f      	cmp	r3, #31
   10c94:	f340 822f 	ble.w	110f6 <_strtod_l+0xe06>
   10c98:	2000      	movs	r0, #0
   10c9a:	2b34      	cmp	r3, #52	; 0x34
   10c9c:	9004      	str	r0, [sp, #16]
   10c9e:	f340 8240 	ble.w	11122 <_strtod_l+0xe32>
   10ca2:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   10ca6:	9305      	str	r3, [sp, #20]
   10ca8:	ed9d 7b04 	vldr	d7, [sp, #16]
   10cac:	eeb5 7b40 	vcmp.f64	d7, #0.0
   10cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10cb4:	f47f ad1a 	bne.w	106ec <_strtod_l+0x3fc>
   10cb8:	2322      	movs	r3, #34	; 0x22
   10cba:	ed9f 8b05 	vldr	d8, [pc, #20]	; 10cd0 <_strtod_l+0x9e0>
   10cbe:	f8c8 3000 	str.w	r3, [r8]
   10cc2:	e4d2      	b.n	1066a <_strtod_l+0x37a>
   10cc4:	2322      	movs	r3, #34	; 0x22
   10cc6:	ed9f 8b04 	vldr	d8, [pc, #16]	; 10cd8 <_strtod_l+0x9e8>
   10cca:	f8c8 3000 	str.w	r3, [r8]
   10cce:	e4cc      	b.n	1066a <_strtod_l+0x37a>
	...
   10cdc:	7ff00000 	.word	0x7ff00000
   10ce0:	bff00000 	.word	0xbff00000
   10ce4:	7ff00000 	.word	0x7ff00000
   10ce8:	7c9fffff 	.word	0x7c9fffff
   10cec:	7fefffff 	.word	0x7fefffff
   10cf0:	20000300 	.word	0x20000300
   10cf4:	7ca00000 	.word	0x7ca00000
   10cf8:	20000328 	.word	0x20000328
   10cfc:	200003f0 	.word	0x200003f0
   10d00:	9302      	str	r3, [sp, #8]
   10d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d04:	9301      	str	r3, [sp, #4]
   10d06:	ab12      	add	r3, sp, #72	; 0x48
   10d08:	9300      	str	r3, [sp, #0]
   10d0a:	4aa7      	ldr	r2, [pc, #668]	; (10fa8 <_strtod_l+0xcb8>)
   10d0c:	ab13      	add	r3, sp, #76	; 0x4c
   10d0e:	a911      	add	r1, sp, #68	; 0x44
   10d10:	4640      	mov	r0, r8
   10d12:	f001 fbff 	bl	12514 <__gethex>
   10d16:	f010 050f 	ands.w	r5, r0, #15
   10d1a:	4604      	mov	r4, r0
   10d1c:	f43f aca3 	beq.w	10666 <_strtod_l+0x376>
   10d20:	2d06      	cmp	r5, #6
   10d22:	d174      	bne.n	10e0e <_strtod_l+0xb1e>
   10d24:	9b07      	ldr	r3, [sp, #28]
   10d26:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 10f90 <_strtod_l+0xca0>
   10d2a:	3701      	adds	r7, #1
   10d2c:	2b00      	cmp	r3, #0
   10d2e:	f43f abce 	beq.w	104ce <_strtod_l+0x1de>
   10d32:	601f      	str	r7, [r3, #0]
   10d34:	f7ff bbcb 	b.w	104ce <_strtod_l+0x1de>
   10d38:	ed9d 8b04 	vldr	d8, [sp, #16]
   10d3c:	e495      	b.n	1066a <_strtod_l+0x37a>
   10d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10d40:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   10d44:	4403      	add	r3, r0
   10d46:	930b      	str	r3, [sp, #44]	; 0x2c
   10d48:	2801      	cmp	r0, #1
   10d4a:	f105 0301 	add.w	r3, r5, #1
   10d4e:	461a      	mov	r2, r3
   10d50:	d014      	beq.n	10d7c <_strtod_l+0xa8c>
   10d52:	4428      	add	r0, r5
   10d54:	1e44      	subs	r4, r0, #1
   10d56:	e003      	b.n	10d60 <_strtod_l+0xa70>
   10d58:	0046      	lsls	r6, r0, #1
   10d5a:	429c      	cmp	r4, r3
   10d5c:	d00d      	beq.n	10d7a <_strtod_l+0xa8a>
   10d5e:	3301      	adds	r3, #1
   10d60:	462a      	mov	r2, r5
   10d62:	2a08      	cmp	r2, #8
   10d64:	461d      	mov	r5, r3
   10d66:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   10d6a:	d9f5      	bls.n	10d58 <_strtod_l+0xa68>
   10d6c:	2b10      	cmp	r3, #16
   10d6e:	bfdc      	itt	le
   10d70:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   10d74:	ea4f 0949 	movle.w	r9, r9, lsl #1
   10d78:	e7ef      	b.n	10d5a <_strtod_l+0xa6a>
   10d7a:	3202      	adds	r2, #2
   10d7c:	2d08      	cmp	r5, #8
   10d7e:	dc3c      	bgt.n	10dfa <_strtod_l+0xb0a>
   10d80:	4615      	mov	r5, r2
   10d82:	f7ff bb79 	b.w	10478 <_strtod_l+0x188>
   10d86:	4989      	ldr	r1, [pc, #548]	; (10fac <_strtod_l+0xcbc>)
   10d88:	2201      	movs	r2, #1
   10d8a:	4638      	mov	r0, r7
   10d8c:	f000 fe14 	bl	119b8 <strncmp>
   10d90:	2800      	cmp	r0, #0
   10d92:	f000 8082 	beq.w	10e9a <_strtod_l+0xbaa>
   10d96:	f04f 0e00 	mov.w	lr, #0
   10d9a:	46f1      	mov	r9, lr
   10d9c:	4676      	mov	r6, lr
   10d9e:	4675      	mov	r5, lr
   10da0:	f7ff bbb5 	b.w	1050e <_strtod_l+0x21e>
   10da4:	f644 631f 	movw	r3, #19999	; 0x4e1f
   10da8:	459b      	cmp	fp, r3
   10daa:	bfa8      	it	ge
   10dac:	469b      	movge	fp, r3
   10dae:	e42f      	b.n	10610 <_strtod_l+0x320>
   10db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10db4:	4618      	mov	r0, r3
   10db6:	2b00      	cmp	r3, #0
   10db8:	f47f ae23 	bne.w	10a02 <_strtod_l+0x712>
   10dbc:	2322      	movs	r3, #34	; 0x22
   10dbe:	ed9f 8b74 	vldr	d8, [pc, #464]	; 10f90 <_strtod_l+0xca0>
   10dc2:	9812      	ldr	r0, [sp, #72]	; 0x48
   10dc4:	f8c8 3000 	str.w	r3, [r8]
   10dc8:	e678      	b.n	10abc <_strtod_l+0x7cc>
   10dca:	eeb0 7b49 	vmov.f64	d7, d9
   10dce:	e6c0      	b.n	10b52 <_strtod_l+0x862>
   10dd0:	4977      	ldr	r1, [pc, #476]	; (10fb0 <_strtod_l+0xcc0>)
   10dd2:	a811      	add	r0, sp, #68	; 0x44
   10dd4:	f001 fe68 	bl	12aa8 <__match>
   10dd8:	2800      	cmp	r0, #0
   10dda:	f43f ab71 	beq.w	104c0 <_strtod_l+0x1d0>
   10dde:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10de0:	4974      	ldr	r1, [pc, #464]	; (10fb4 <_strtod_l+0xcc4>)
   10de2:	3b01      	subs	r3, #1
   10de4:	a811      	add	r0, sp, #68	; 0x44
   10de6:	9311      	str	r3, [sp, #68]	; 0x44
   10de8:	f001 fe5e 	bl	12aa8 <__match>
   10dec:	b910      	cbnz	r0, 10df4 <_strtod_l+0xb04>
   10dee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10df0:	3301      	adds	r3, #1
   10df2:	9311      	str	r3, [sp, #68]	; 0x44
   10df4:	ed9f 8b68 	vldr	d8, [pc, #416]	; 10f98 <_strtod_l+0xca8>
   10df8:	e437      	b.n	1066a <_strtod_l+0x37a>
   10dfa:	2a10      	cmp	r2, #16
   10dfc:	bfdc      	itt	le
   10dfe:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   10e02:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   10e06:	4615      	mov	r5, r2
   10e08:	2000      	movs	r0, #0
   10e0a:	f7ff bb3a 	b.w	10482 <_strtod_l+0x192>
   10e0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10e10:	b13a      	cbz	r2, 10e22 <_strtod_l+0xb32>
   10e12:	2135      	movs	r1, #53	; 0x35
   10e14:	a814      	add	r0, sp, #80	; 0x50
   10e16:	f002 fc2b 	bl	13670 <__copybits>
   10e1a:	9912      	ldr	r1, [sp, #72]	; 0x48
   10e1c:	4640      	mov	r0, r8
   10e1e:	f001 ff73 	bl	12d08 <_Bfree>
   10e22:	3d01      	subs	r5, #1
   10e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10e26:	2d04      	cmp	r5, #4
   10e28:	f200 818f 	bhi.w	1114a <_strtod_l+0xe5a>
   10e2c:	e8df f005 	tbb	[pc, r5]
   10e30:	1f2a2d03 	.word	0x1f2a2d03
   10e34:	03          	.byte	0x03
   10e35:	00          	.byte	0x00
   10e36:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10e38:	9204      	str	r2, [sp, #16]
   10e3a:	f203 4233 	addw	r2, r3, #1075	; 0x433
   10e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10e40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   10e44:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   10e48:	9305      	str	r3, [sp, #20]
   10e4a:	05e5      	lsls	r5, r4, #23
   10e4c:	d502      	bpl.n	10e54 <_strtod_l+0xb64>
   10e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10e52:	9305      	str	r3, [sp, #20]
   10e54:	4a58      	ldr	r2, [pc, #352]	; (10fb8 <_strtod_l+0xcc8>)
   10e56:	401a      	ands	r2, r3
   10e58:	ed9d 8b04 	vldr	d8, [sp, #16]
   10e5c:	2a00      	cmp	r2, #0
   10e5e:	f47f ac04 	bne.w	1066a <_strtod_l+0x37a>
   10e62:	f000 fe8d 	bl	11b80 <__errno>
   10e66:	2322      	movs	r3, #34	; 0x22
   10e68:	6003      	str	r3, [r0, #0]
   10e6a:	f7ff bbfe 	b.w	1066a <_strtod_l+0x37a>
   10e6e:	f04f 33ff 	mov.w	r3, #4294967295
   10e72:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   10e76:	e9cd 3604 	strd	r3, r6, [sp, #16]
   10e7a:	05e3      	lsls	r3, r4, #23
   10e7c:	f57f af5c 	bpl.w	10d38 <_strtod_l+0xa48>
   10e80:	9b05      	ldr	r3, [sp, #20]
   10e82:	e7e4      	b.n	10e4e <_strtod_l+0xb5e>
   10e84:	4b4c      	ldr	r3, [pc, #304]	; (10fb8 <_strtod_l+0xcc8>)
   10e86:	9305      	str	r3, [sp, #20]
   10e88:	e7f7      	b.n	10e7a <_strtod_l+0xb8a>
   10e8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10e8c:	9304      	str	r3, [sp, #16]
   10e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10e90:	9305      	str	r3, [sp, #20]
   10e92:	e7da      	b.n	10e4a <_strtod_l+0xb5a>
   10e94:	2000      	movs	r0, #0
   10e96:	f7ff bae1 	b.w	1045c <_strtod_l+0x16c>
   10e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10e9c:	461a      	mov	r2, r3
   10e9e:	3301      	adds	r3, #1
   10ea0:	9311      	str	r3, [sp, #68]	; 0x44
   10ea2:	7854      	ldrb	r4, [r2, #1]
   10ea4:	4606      	mov	r6, r0
   10ea6:	4681      	mov	r9, r0
   10ea8:	f7ff bacd 	b.w	10446 <_strtod_l+0x156>
   10eac:	4b43      	ldr	r3, [pc, #268]	; (10fbc <_strtod_l+0xccc>)
   10eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10eb2:	ed93 8b00 	vldr	d8, [r3]
   10eb6:	ed9d 7b04 	vldr	d7, [sp, #16]
   10eba:	ee28 8b07 	vmul.f64	d8, d8, d7
   10ebe:	f7ff bbd4 	b.w	1066a <_strtod_l+0x37a>
   10ec2:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   10ec6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   10eca:	e511      	b.n	108f0 <_strtod_l+0x600>
   10ecc:	46ae      	mov	lr, r5
   10ece:	900b      	str	r0, [sp, #44]	; 0x2c
   10ed0:	f7ff badc 	b.w	1048c <_strtod_l+0x19c>
   10ed4:	4b39      	ldr	r3, [pc, #228]	; (10fbc <_strtod_l+0xccc>)
   10ed6:	f1c5 050f 	rsb	r5, r5, #15
   10eda:	1b4a      	subs	r2, r1, r5
   10edc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   10ee0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10ee4:	ed95 8b00 	vldr	d8, [r5]
   10ee8:	ed93 7b00 	vldr	d7, [r3]
   10eec:	ed9d 6b04 	vldr	d6, [sp, #16]
   10ef0:	ee28 8b06 	vmul.f64	d8, d8, d6
   10ef4:	ee28 8b07 	vmul.f64	d8, d8, d7
   10ef8:	f7ff bbb7 	b.w	1066a <_strtod_l+0x37a>
   10efc:	2d00      	cmp	r5, #0
   10efe:	f000 8095 	beq.w	1102c <_strtod_l+0xd3c>
   10f02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   10f06:	4b2e      	ldr	r3, [pc, #184]	; (10fc0 <_strtod_l+0xcd0>)
   10f08:	f3cc 0113 	ubfx	r1, ip, #0, #20
   10f0c:	4299      	cmp	r1, r3
   10f0e:	4662      	mov	r2, ip
   10f10:	f000 80d2 	beq.w	110b8 <_strtod_l+0xdc8>
   10f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10f16:	2b00      	cmp	r3, #0
   10f18:	f000 80a5 	beq.w	11066 <_strtod_l+0xd76>
   10f1c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10f20:	4213      	tst	r3, r2
   10f22:	4617      	mov	r7, r2
   10f24:	d01a      	beq.n	10f5c <_strtod_l+0xc6c>
   10f26:	eeb0 0b48 	vmov.f64	d0, d8
   10f2a:	2d00      	cmp	r5, #0
   10f2c:	f000 80a6 	beq.w	1107c <_strtod_l+0xd8c>
   10f30:	f002 fa6e 	bl	13410 <__ulp>
   10f34:	9b08      	ldr	r3, [sp, #32]
   10f36:	b17b      	cbz	r3, 10f58 <_strtod_l+0xc68>
   10f38:	f3c7 530a 	ubfx	r3, r7, #20, #11
   10f3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   10f40:	2b00      	cmp	r3, #0
   10f42:	dd09      	ble.n	10f58 <_strtod_l+0xc68>
   10f44:	051b      	lsls	r3, r3, #20
   10f46:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   10f4a:	2000      	movs	r0, #0
   10f4c:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   10f50:	ec41 0b17 	vmov	d7, r0, r1
   10f54:	ee20 0b07 	vmul.f64	d0, d0, d7
   10f58:	ee38 8b00 	vadd.f64	d8, d8, d0
   10f5c:	9b08      	ldr	r3, [sp, #32]
   10f5e:	b15b      	cbz	r3, 10f78 <_strtod_l+0xc88>
   10f60:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 10fa0 <_strtod_l+0xcb0>
   10f64:	4b14      	ldr	r3, [pc, #80]	; (10fb8 <_strtod_l+0xcc8>)
   10f66:	ee28 8b07 	vmul.f64	d8, d8, d7
   10f6a:	ee18 2a90 	vmov	r2, s17
   10f6e:	4013      	ands	r3, r2
   10f70:	b913      	cbnz	r3, 10f78 <_strtod_l+0xc88>
   10f72:	2322      	movs	r3, #34	; 0x22
   10f74:	f8c8 3000 	str.w	r3, [r8]
   10f78:	9812      	ldr	r0, [sp, #72]	; 0x48
   10f7a:	e59f      	b.n	10abc <_strtod_l+0x7cc>
   10f7c:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   10f80:	9305      	str	r3, [sp, #20]
   10f82:	2300      	movs	r3, #0
   10f84:	9308      	str	r3, [sp, #32]
   10f86:	f7ff bbb1 	b.w	106ec <_strtod_l+0x3fc>
   10f8a:	bf00      	nop
   10f8c:	f3af 8000 	nop.w
	...
   10f9c:	7ff00000 	.word	0x7ff00000
   10fa0:	00000000 	.word	0x00000000
   10fa4:	39500000 	.word	0x39500000
   10fa8:	20007f00 	.word	0x20007f00
   10fac:	20008228 	.word	0x20008228
   10fb0:	20001104 	.word	0x20001104
   10fb4:	20001108 	.word	0x20001108
   10fb8:	7ff00000 	.word	0x7ff00000
   10fbc:	20000328 	.word	0x20000328
   10fc0:	000fffff 	.word	0x000fffff
   10fc4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10fc8:	430d      	orrs	r5, r1
   10fca:	d1c7      	bne.n	10f5c <_strtod_l+0xc6c>
   10fcc:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10fd0:	4617      	mov	r7, r2
   10fd2:	2b00      	cmp	r3, #0
   10fd4:	d1c2      	bne.n	10f5c <_strtod_l+0xc6c>
   10fd6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   10fda:	0d1b      	lsrs	r3, r3, #20
   10fdc:	051b      	lsls	r3, r3, #20
   10fde:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   10fe2:	d9bb      	bls.n	10f5c <_strtod_l+0xc6c>
   10fe4:	f8da 3014 	ldr.w	r3, [sl, #20]
   10fe8:	b91b      	cbnz	r3, 10ff2 <_strtod_l+0xd02>
   10fea:	f8da 3010 	ldr.w	r3, [sl, #16]
   10fee:	2b01      	cmp	r3, #1
   10ff0:	ddb4      	ble.n	10f5c <_strtod_l+0xc6c>
   10ff2:	4651      	mov	r1, sl
   10ff4:	2201      	movs	r2, #1
   10ff6:	4640      	mov	r0, r8
   10ff8:	f002 f8c6 	bl	13188 <__lshift>
   10ffc:	4621      	mov	r1, r4
   10ffe:	4682      	mov	sl, r0
   11000:	f002 f93a 	bl	13278 <__mcmp>
   11004:	2800      	cmp	r0, #0
   11006:	dda9      	ble.n	10f5c <_strtod_l+0xc6c>
   11008:	9b08      	ldr	r3, [sp, #32]
   1100a:	2b00      	cmp	r3, #0
   1100c:	d17e      	bne.n	1110c <_strtod_l+0xe1c>
   1100e:	4b50      	ldr	r3, [pc, #320]	; (11150 <_strtod_l+0xe60>)
   11010:	403b      	ands	r3, r7
   11012:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11016:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   1101a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   1101e:	9305      	str	r3, [sp, #20]
   11020:	f04f 33ff 	mov.w	r3, #4294967295
   11024:	9304      	str	r3, [sp, #16]
   11026:	ed9d 8b04 	vldr	d8, [sp, #16]
   1102a:	e797      	b.n	10f5c <_strtod_l+0xc6c>
   1102c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11030:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11034:	430b      	orrs	r3, r1
   11036:	4617      	mov	r7, r2
   11038:	f47f af6c 	bne.w	10f14 <_strtod_l+0xc24>
   1103c:	e7e4      	b.n	11008 <_strtod_l+0xd18>
   1103e:	4945      	ldr	r1, [pc, #276]	; (11154 <_strtod_l+0xe64>)
   11040:	a811      	add	r0, sp, #68	; 0x44
   11042:	aa14      	add	r2, sp, #80	; 0x50
   11044:	f001 fd4c 	bl	12ae0 <__hexnan>
   11048:	2805      	cmp	r0, #5
   1104a:	f47f ab06 	bne.w	1065a <_strtod_l+0x36a>
   1104e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11050:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   11054:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   11058:	9305      	str	r3, [sp, #20]
   1105a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1105c:	9304      	str	r3, [sp, #16]
   1105e:	ed9d 8b04 	vldr	d8, [sp, #16]
   11062:	f7ff bb02 	b.w	1066a <_strtod_l+0x37a>
   11066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1106a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1106c:	4203      	tst	r3, r0
   1106e:	f43f af75 	beq.w	10f5c <_strtod_l+0xc6c>
   11072:	460f      	mov	r7, r1
   11074:	e757      	b.n	10f26 <_strtod_l+0xc36>
   11076:	4c38      	ldr	r4, [pc, #224]	; (11158 <_strtod_l+0xe68>)
   11078:	2100      	movs	r1, #0
   1107a:	e58f      	b.n	10b9c <_strtod_l+0x8ac>
   1107c:	f002 f9c8 	bl	13410 <__ulp>
   11080:	9b08      	ldr	r3, [sp, #32]
   11082:	2b00      	cmp	r3, #0
   11084:	d055      	beq.n	11132 <_strtod_l+0xe42>
   11086:	f3c7 530a 	ubfx	r3, r7, #20, #11
   1108a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1108e:	2b00      	cmp	r3, #0
   11090:	dd09      	ble.n	110a6 <_strtod_l+0xdb6>
   11092:	051b      	lsls	r3, r3, #20
   11094:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11098:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   1109c:	4628      	mov	r0, r5
   1109e:	ec41 0b17 	vmov	d7, r0, r1
   110a2:	ee20 0b07 	vmul.f64	d0, d0, d7
   110a6:	ee38 8b40 	vsub.f64	d8, d8, d0
   110aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
   110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   110b2:	f47f af55 	bne.w	10f60 <_strtod_l+0xc70>
   110b6:	e681      	b.n	10dbc <_strtod_l+0xacc>
   110b8:	9b08      	ldr	r3, [sp, #32]
   110ba:	9904      	ldr	r1, [sp, #16]
   110bc:	b31b      	cbz	r3, 11106 <_strtod_l+0xe16>
   110be:	4b24      	ldr	r3, [pc, #144]	; (11150 <_strtod_l+0xe60>)
   110c0:	4013      	ands	r3, r2
   110c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   110c6:	d81e      	bhi.n	11106 <_strtod_l+0xe16>
   110c8:	0d1b      	lsrs	r3, r3, #20
   110ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   110ce:	f04f 30ff 	mov.w	r0, #4294967295
   110d2:	fa00 f303 	lsl.w	r3, r0, r3
   110d6:	4299      	cmp	r1, r3
   110d8:	f47f af1c 	bne.w	10f14 <_strtod_l+0xc24>
   110dc:	4b1f      	ldr	r3, [pc, #124]	; (1115c <_strtod_l+0xe6c>)
   110de:	429a      	cmp	r2, r3
   110e0:	d030      	beq.n	11144 <_strtod_l+0xe54>
   110e2:	4b1b      	ldr	r3, [pc, #108]	; (11150 <_strtod_l+0xe60>)
   110e4:	4013      	ands	r3, r2
   110e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   110ea:	9305      	str	r3, [sp, #20]
   110ec:	2300      	movs	r3, #0
   110ee:	9304      	str	r3, [sp, #16]
   110f0:	ed9d 8b04 	vldr	d8, [sp, #16]
   110f4:	e732      	b.n	10f5c <_strtod_l+0xc6c>
   110f6:	f04f 32ff 	mov.w	r2, #4294967295
   110fa:	fa02 f303 	lsl.w	r3, r2, r3
   110fe:	9a04      	ldr	r2, [sp, #16]
   11100:	401a      	ands	r2, r3
   11102:	9204      	str	r2, [sp, #16]
   11104:	e5d0      	b.n	10ca8 <_strtod_l+0x9b8>
   11106:	f04f 33ff 	mov.w	r3, #4294967295
   1110a:	e7e4      	b.n	110d6 <_strtod_l+0xde6>
   1110c:	4b10      	ldr	r3, [pc, #64]	; (11150 <_strtod_l+0xe60>)
   1110e:	403b      	ands	r3, r7
   11110:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11114:	f73f af7d 	bgt.w	11012 <_strtod_l+0xd22>
   11118:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   1111c:	f73f af20 	bgt.w	10f60 <_strtod_l+0xc70>
   11120:	e64c      	b.n	10dbc <_strtod_l+0xacc>
   11122:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11126:	f04f 33ff 	mov.w	r3, #4294967295
   1112a:	4093      	lsls	r3, r2
   1112c:	400b      	ands	r3, r1
   1112e:	9305      	str	r3, [sp, #20]
   11130:	e5ba      	b.n	10ca8 <_strtod_l+0x9b8>
   11132:	ee38 8b40 	vsub.f64	d8, d8, d0
   11136:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1113e:	f47f af1b 	bne.w	10f78 <_strtod_l+0xc88>
   11142:	e63b      	b.n	10dbc <_strtod_l+0xacc>
   11144:	3101      	adds	r1, #1
   11146:	d1cc      	bne.n	110e2 <_strtod_l+0xdf2>
   11148:	e409      	b.n	1095e <_strtod_l+0x66e>
   1114a:	2300      	movs	r3, #0
   1114c:	e67d      	b.n	10e4a <_strtod_l+0xb5a>
   1114e:	bf00      	nop
   11150:	7ff00000 	.word	0x7ff00000
   11154:	20007f14 	.word	0x20007f14
   11158:	20000300 	.word	0x20000300
   1115c:	7fefffff 	.word	0x7fefffff

00011160 <_strtod_r>:
   11160:	4b01      	ldr	r3, [pc, #4]	; (11168 <_strtod_r+0x8>)
   11162:	f7ff b8c5 	b.w	102f0 <_strtod_l>
   11166:	bf00      	nop
   11168:	20008e9c 	.word	0x20008e9c

0001116c <_strtol_l.constprop.0>:
   1116c:	2b01      	cmp	r3, #1
   1116e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11172:	d040      	beq.n	111f6 <_strtol_l.constprop.0+0x8a>
   11174:	2b24      	cmp	r3, #36	; 0x24
   11176:	4698      	mov	r8, r3
   11178:	d83d      	bhi.n	111f6 <_strtol_l.constprop.0+0x8a>
   1117a:	4d4c      	ldr	r5, [pc, #304]	; (112ac <_strtol_l.constprop.0+0x140>)
   1117c:	468e      	mov	lr, r1
   1117e:	4676      	mov	r6, lr
   11180:	f81e bb01 	ldrb.w	fp, [lr], #1
   11184:	f815 400b 	ldrb.w	r4, [r5, fp]
   11188:	f014 0408 	ands.w	r4, r4, #8
   1118c:	d1f7      	bne.n	1117e <_strtol_l.constprop.0+0x12>
   1118e:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   11192:	d072      	beq.n	1127a <_strtol_l.constprop.0+0x10e>
   11194:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   11198:	bf08      	it	eq
   1119a:	f89e b000 	ldrbeq.w	fp, [lr]
   1119e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   111a2:	bf08      	it	eq
   111a4:	f106 0e02 	addeq.w	lr, r6, #2
   111a8:	2b00      	cmp	r3, #0
   111aa:	d042      	beq.n	11232 <_strtol_l.constprop.0+0xc6>
   111ac:	2b10      	cmp	r3, #16
   111ae:	d057      	beq.n	11260 <_strtol_l.constprop.0+0xf4>
   111b0:	fbb9 f7f8 	udiv	r7, r9, r8
   111b4:	2500      	movs	r5, #0
   111b6:	462e      	mov	r6, r5
   111b8:	fb08 9a17 	mls	sl, r8, r7, r9
   111bc:	e005      	b.n	111ca <_strtol_l.constprop.0+0x5e>
   111be:	d033      	beq.n	11228 <_strtol_l.constprop.0+0xbc>
   111c0:	fb08 c606 	mla	r6, r8, r6, ip
   111c4:	2501      	movs	r5, #1
   111c6:	f81e bb01 	ldrb.w	fp, [lr], #1
   111ca:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   111ce:	f1bc 0f09 	cmp.w	ip, #9
   111d2:	d906      	bls.n	111e2 <_strtol_l.constprop.0+0x76>
   111d4:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   111d8:	f1bc 0f19 	cmp.w	ip, #25
   111dc:	d812      	bhi.n	11204 <_strtol_l.constprop.0+0x98>
   111de:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   111e2:	4563      	cmp	r3, ip
   111e4:	dd17      	ble.n	11216 <_strtol_l.constprop.0+0xaa>
   111e6:	f1b5 3fff 	cmp.w	r5, #4294967295
   111ea:	d0ec      	beq.n	111c6 <_strtol_l.constprop.0+0x5a>
   111ec:	42b7      	cmp	r7, r6
   111ee:	d2e6      	bcs.n	111be <_strtol_l.constprop.0+0x52>
   111f0:	f04f 35ff 	mov.w	r5, #4294967295
   111f4:	e7e7      	b.n	111c6 <_strtol_l.constprop.0+0x5a>
   111f6:	f000 fcc3 	bl	11b80 <__errno>
   111fa:	2316      	movs	r3, #22
   111fc:	6003      	str	r3, [r0, #0]
   111fe:	2000      	movs	r0, #0
   11200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11204:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   11208:	f1bc 0f19 	cmp.w	ip, #25
   1120c:	d803      	bhi.n	11216 <_strtol_l.constprop.0+0xaa>
   1120e:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   11212:	4563      	cmp	r3, ip
   11214:	dce7      	bgt.n	111e6 <_strtol_l.constprop.0+0x7a>
   11216:	1c6b      	adds	r3, r5, #1
   11218:	d027      	beq.n	1126a <_strtol_l.constprop.0+0xfe>
   1121a:	b98c      	cbnz	r4, 11240 <_strtol_l.constprop.0+0xd4>
   1121c:	b10a      	cbz	r2, 11222 <_strtol_l.constprop.0+0xb6>
   1121e:	bba5      	cbnz	r5, 1128a <_strtol_l.constprop.0+0x11e>
   11220:	6011      	str	r1, [r2, #0]
   11222:	4630      	mov	r0, r6
   11224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11228:	45e2      	cmp	sl, ip
   1122a:	dac9      	bge.n	111c0 <_strtol_l.constprop.0+0x54>
   1122c:	f04f 35ff 	mov.w	r5, #4294967295
   11230:	e7c9      	b.n	111c6 <_strtol_l.constprop.0+0x5a>
   11232:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   11236:	d005      	beq.n	11244 <_strtol_l.constprop.0+0xd8>
   11238:	f04f 080a 	mov.w	r8, #10
   1123c:	4643      	mov	r3, r8
   1123e:	e7b7      	b.n	111b0 <_strtol_l.constprop.0+0x44>
   11240:	4276      	negs	r6, r6
   11242:	e7eb      	b.n	1121c <_strtol_l.constprop.0+0xb0>
   11244:	f89e 3000 	ldrb.w	r3, [lr]
   11248:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1124c:	2b58      	cmp	r3, #88	; 0x58
   1124e:	d121      	bne.n	11294 <_strtol_l.constprop.0+0x128>
   11250:	f04f 0810 	mov.w	r8, #16
   11254:	f89e b001 	ldrb.w	fp, [lr, #1]
   11258:	4643      	mov	r3, r8
   1125a:	f10e 0e02 	add.w	lr, lr, #2
   1125e:	e7a7      	b.n	111b0 <_strtol_l.constprop.0+0x44>
   11260:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   11264:	d01a      	beq.n	1129c <_strtol_l.constprop.0+0x130>
   11266:	4698      	mov	r8, r3
   11268:	e7a2      	b.n	111b0 <_strtol_l.constprop.0+0x44>
   1126a:	2322      	movs	r3, #34	; 0x22
   1126c:	6003      	str	r3, [r0, #0]
   1126e:	b172      	cbz	r2, 1128e <_strtol_l.constprop.0+0x122>
   11270:	f10e 31ff 	add.w	r1, lr, #4294967295
   11274:	464e      	mov	r6, r9
   11276:	6011      	str	r1, [r2, #0]
   11278:	e7d3      	b.n	11222 <_strtol_l.constprop.0+0xb6>
   1127a:	f89e b000 	ldrb.w	fp, [lr]
   1127e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   11282:	f106 0e02 	add.w	lr, r6, #2
   11286:	2401      	movs	r4, #1
   11288:	e78e      	b.n	111a8 <_strtol_l.constprop.0+0x3c>
   1128a:	46b1      	mov	r9, r6
   1128c:	e7f0      	b.n	11270 <_strtol_l.constprop.0+0x104>
   1128e:	464e      	mov	r6, r9
   11290:	4630      	mov	r0, r6
   11292:	e7c7      	b.n	11224 <_strtol_l.constprop.0+0xb8>
   11294:	f04f 0808 	mov.w	r8, #8
   11298:	4643      	mov	r3, r8
   1129a:	e789      	b.n	111b0 <_strtol_l.constprop.0+0x44>
   1129c:	f89e 5000 	ldrb.w	r5, [lr]
   112a0:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   112a4:	2d58      	cmp	r5, #88	; 0x58
   112a6:	d0d3      	beq.n	11250 <_strtol_l.constprop.0+0xe4>
   112a8:	4698      	mov	r8, r3
   112aa:	e781      	b.n	111b0 <_strtol_l.constprop.0+0x44>
   112ac:	20000f81 	.word	0x20000f81

000112b0 <_strtol_r>:
   112b0:	f7ff bf5c 	b.w	1116c <_strtol_l.constprop.0>

000112b4 <__cxa_atexit>:
   112b4:	4613      	mov	r3, r2
   112b6:	460a      	mov	r2, r1
   112b8:	4601      	mov	r1, r0
   112ba:	2002      	movs	r0, #2
   112bc:	f000 bf3e 	b.w	1213c <__register_exitproc>

000112c0 <fcvtf>:
   112c0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   112c4:	2300      	movs	r3, #0
   112c6:	f002 ba41 	b.w	1374c <fcvtbuf>
   112ca:	bf00      	nop

000112cc <stdio_exit_handler>:
   112cc:	4a02      	ldr	r2, [pc, #8]	; (112d8 <stdio_exit_handler+0xc>)
   112ce:	4903      	ldr	r1, [pc, #12]	; (112dc <stdio_exit_handler+0x10>)
   112d0:	4803      	ldr	r0, [pc, #12]	; (112e0 <stdio_exit_handler+0x14>)
   112d2:	f000 b8bb 	b.w	1144c <_fwalk_sglue>
   112d6:	bf00      	nop
   112d8:	20009418 	.word	0x20009418
   112dc:	00016b85 	.word	0x00016b85
   112e0:	20008990 	.word	0x20008990

000112e4 <cleanup_stdio>:
   112e4:	4b0c      	ldr	r3, [pc, #48]	; (11318 <cleanup_stdio+0x34>)
   112e6:	6841      	ldr	r1, [r0, #4]
   112e8:	4299      	cmp	r1, r3
   112ea:	b510      	push	{r4, lr}
   112ec:	4604      	mov	r4, r0
   112ee:	d001      	beq.n	112f4 <cleanup_stdio+0x10>
   112f0:	f005 fc48 	bl	16b84 <_fclose_r>
   112f4:	68a1      	ldr	r1, [r4, #8]
   112f6:	4b09      	ldr	r3, [pc, #36]	; (1131c <cleanup_stdio+0x38>)
   112f8:	4299      	cmp	r1, r3
   112fa:	d002      	beq.n	11302 <cleanup_stdio+0x1e>
   112fc:	4620      	mov	r0, r4
   112fe:	f005 fc41 	bl	16b84 <_fclose_r>
   11302:	68e1      	ldr	r1, [r4, #12]
   11304:	4b06      	ldr	r3, [pc, #24]	; (11320 <cleanup_stdio+0x3c>)
   11306:	4299      	cmp	r1, r3
   11308:	d004      	beq.n	11314 <cleanup_stdio+0x30>
   1130a:	4620      	mov	r0, r4
   1130c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11310:	f005 bc38 	b.w	16b84 <_fclose_r>
   11314:	bd10      	pop	{r4, pc}
   11316:	bf00      	nop
   11318:	20028780 	.word	0x20028780
   1131c:	200287e8 	.word	0x200287e8
   11320:	20028850 	.word	0x20028850

00011324 <global_stdio_init.part.0>:
   11324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11328:	4c2a      	ldr	r4, [pc, #168]	; (113d4 <global_stdio_init.part.0+0xb0>)
   1132a:	4b2b      	ldr	r3, [pc, #172]	; (113d8 <global_stdio_init.part.0+0xb4>)
   1132c:	482b      	ldr	r0, [pc, #172]	; (113dc <global_stdio_init.part.0+0xb8>)
   1132e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 113f0 <global_stdio_init.part.0+0xcc>
   11332:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 113f4 <global_stdio_init.part.0+0xd0>
   11336:	4f2a      	ldr	r7, [pc, #168]	; (113e0 <global_stdio_init.part.0+0xbc>)
   11338:	6018      	str	r0, [r3, #0]
   1133a:	2500      	movs	r5, #0
   1133c:	2304      	movs	r3, #4
   1133e:	2208      	movs	r2, #8
   11340:	4629      	mov	r1, r5
   11342:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11346:	4e27      	ldr	r6, [pc, #156]	; (113e4 <global_stdio_init.part.0+0xc0>)
   11348:	6665      	str	r5, [r4, #100]	; 0x64
   1134a:	e9c4 5302 	strd	r5, r3, [r4, #8]
   1134e:	e9c4 5500 	strd	r5, r5, [r4]
   11352:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11356:	61a5      	str	r5, [r4, #24]
   11358:	f000 fa86 	bl	11868 <memset>
   1135c:	4b22      	ldr	r3, [pc, #136]	; (113e8 <global_stdio_init.part.0+0xc4>)
   1135e:	6763      	str	r3, [r4, #116]	; 0x74
   11360:	2208      	movs	r2, #8
   11362:	4629      	mov	r1, r5
   11364:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11368:	e9c4 4907 	strd	r4, r9, [r4, #28]
   1136c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11370:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11374:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11378:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   1137c:	6725      	str	r5, [r4, #112]	; 0x70
   1137e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11382:	62e6      	str	r6, [r4, #44]	; 0x2c
   11384:	f000 fa70 	bl	11868 <memset>
   11388:	4b18      	ldr	r3, [pc, #96]	; (113ec <global_stdio_init.part.0+0xc8>)
   1138a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   1138e:	4629      	mov	r1, r5
   11390:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11394:	2208      	movs	r2, #8
   11396:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   1139a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   1139e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   113a2:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   113a6:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   113aa:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   113ae:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   113b2:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   113b6:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   113ba:	f000 fa55 	bl	11868 <memset>
   113be:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   113c2:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   113c6:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   113ca:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   113ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   113d2:	bf00      	nop
   113d4:	20028780 	.word	0x20028780
   113d8:	200288b8 	.word	0x200288b8
   113dc:	000112cd 	.word	0x000112cd
   113e0:	0001161d 	.word	0x0001161d
   113e4:	0001163d 	.word	0x0001163d
   113e8:	00010009 	.word	0x00010009
   113ec:	00020012 	.word	0x00020012
   113f0:	000115b5 	.word	0x000115b5
   113f4:	000115dd 	.word	0x000115dd

000113f8 <__sinit>:
   113f8:	b510      	push	{r4, lr}
   113fa:	4604      	mov	r4, r0
   113fc:	480a      	ldr	r0, [pc, #40]	; (11428 <__sinit+0x30>)
   113fe:	f000 fbed 	bl	11bdc <__retarget_lock_acquire_recursive>
   11402:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11404:	b923      	cbnz	r3, 11410 <__sinit+0x18>
   11406:	4b09      	ldr	r3, [pc, #36]	; (1142c <__sinit+0x34>)
   11408:	4a09      	ldr	r2, [pc, #36]	; (11430 <__sinit+0x38>)
   1140a:	681b      	ldr	r3, [r3, #0]
   1140c:	6362      	str	r2, [r4, #52]	; 0x34
   1140e:	b123      	cbz	r3, 1141a <__sinit+0x22>
   11410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11414:	4804      	ldr	r0, [pc, #16]	; (11428 <__sinit+0x30>)
   11416:	f000 bbe3 	b.w	11be0 <__retarget_lock_release_recursive>
   1141a:	f7ff ff83 	bl	11324 <global_stdio_init.part.0>
   1141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11422:	4801      	ldr	r0, [pc, #4]	; (11428 <__sinit+0x30>)
   11424:	f000 bbdc 	b.w	11be0 <__retarget_lock_release_recursive>
   11428:	20028748 	.word	0x20028748
   1142c:	200288b8 	.word	0x200288b8
   11430:	000112e5 	.word	0x000112e5

00011434 <__sfp_lock_acquire>:
   11434:	4801      	ldr	r0, [pc, #4]	; (1143c <__sfp_lock_acquire+0x8>)
   11436:	f000 bbd1 	b.w	11bdc <__retarget_lock_acquire_recursive>
   1143a:	bf00      	nop
   1143c:	20028748 	.word	0x20028748

00011440 <__sfp_lock_release>:
   11440:	4801      	ldr	r0, [pc, #4]	; (11448 <__sfp_lock_release+0x8>)
   11442:	f000 bbcd 	b.w	11be0 <__retarget_lock_release_recursive>
   11446:	bf00      	nop
   11448:	20028748 	.word	0x20028748

0001144c <_fwalk_sglue>:
   1144c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11450:	4680      	mov	r8, r0
   11452:	460f      	mov	r7, r1
   11454:	4616      	mov	r6, r2
   11456:	f04f 0900 	mov.w	r9, #0
   1145a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   1145e:	3d01      	subs	r5, #1
   11460:	d411      	bmi.n	11486 <_fwalk_sglue+0x3a>
   11462:	89a3      	ldrh	r3, [r4, #12]
   11464:	2b01      	cmp	r3, #1
   11466:	f105 35ff 	add.w	r5, r5, #4294967295
   1146a:	d908      	bls.n	1147e <_fwalk_sglue+0x32>
   1146c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   11470:	3301      	adds	r3, #1
   11472:	4621      	mov	r1, r4
   11474:	d003      	beq.n	1147e <_fwalk_sglue+0x32>
   11476:	4640      	mov	r0, r8
   11478:	47b8      	blx	r7
   1147a:	ea49 0900 	orr.w	r9, r9, r0
   1147e:	1c6b      	adds	r3, r5, #1
   11480:	f104 0468 	add.w	r4, r4, #104	; 0x68
   11484:	d1ed      	bne.n	11462 <_fwalk_sglue+0x16>
   11486:	6836      	ldr	r6, [r6, #0]
   11488:	2e00      	cmp	r6, #0
   1148a:	d1e6      	bne.n	1145a <_fwalk_sglue+0xe>
   1148c:	4648      	mov	r0, r9
   1148e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11492:	bf00      	nop

00011494 <snprintf>:
   11494:	b40c      	push	{r2, r3}
   11496:	b510      	push	{r4, lr}
   11498:	4b1f      	ldr	r3, [pc, #124]	; (11518 <snprintf+0x84>)
   1149a:	2900      	cmp	r1, #0
   1149c:	681c      	ldr	r4, [r3, #0]
   1149e:	b09c      	sub	sp, #112	; 0x70
   114a0:	db35      	blt.n	1150e <snprintf+0x7a>
   114a2:	f44f 7302 	mov.w	r3, #520	; 0x208
   114a6:	f8ad 3014 	strh.w	r3, [sp, #20]
   114aa:	9002      	str	r0, [sp, #8]
   114ac:	9006      	str	r0, [sp, #24]
   114ae:	ab1f      	add	r3, sp, #124	; 0x7c
   114b0:	d018      	beq.n	114e4 <snprintf+0x50>
   114b2:	3901      	subs	r1, #1
   114b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   114b8:	9104      	str	r1, [sp, #16]
   114ba:	9107      	str	r1, [sp, #28]
   114bc:	f8ad 2016 	strh.w	r2, [sp, #22]
   114c0:	a902      	add	r1, sp, #8
   114c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   114c4:	9301      	str	r3, [sp, #4]
   114c6:	4620      	mov	r0, r4
   114c8:	f002 f992 	bl	137f0 <_svfprintf_r>
   114cc:	1c42      	adds	r2, r0, #1
   114ce:	da01      	bge.n	114d4 <snprintf+0x40>
   114d0:	238b      	movs	r3, #139	; 0x8b
   114d2:	6023      	str	r3, [r4, #0]
   114d4:	9b02      	ldr	r3, [sp, #8]
   114d6:	2200      	movs	r2, #0
   114d8:	701a      	strb	r2, [r3, #0]
   114da:	b01c      	add	sp, #112	; 0x70
   114dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   114e0:	b002      	add	sp, #8
   114e2:	4770      	bx	lr
   114e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   114e8:	9104      	str	r1, [sp, #16]
   114ea:	9107      	str	r1, [sp, #28]
   114ec:	f8ad 2016 	strh.w	r2, [sp, #22]
   114f0:	a902      	add	r1, sp, #8
   114f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   114f4:	9301      	str	r3, [sp, #4]
   114f6:	4620      	mov	r0, r4
   114f8:	f002 f97a 	bl	137f0 <_svfprintf_r>
   114fc:	1c43      	adds	r3, r0, #1
   114fe:	da01      	bge.n	11504 <snprintf+0x70>
   11500:	238b      	movs	r3, #139	; 0x8b
   11502:	6023      	str	r3, [r4, #0]
   11504:	b01c      	add	sp, #112	; 0x70
   11506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1150a:	b002      	add	sp, #8
   1150c:	4770      	bx	lr
   1150e:	238b      	movs	r3, #139	; 0x8b
   11510:	6023      	str	r3, [r4, #0]
   11512:	f04f 30ff 	mov.w	r0, #4294967295
   11516:	e7f5      	b.n	11504 <snprintf+0x70>
   11518:	20009424 	.word	0x20009424

0001151c <sprintf>:
   1151c:	b40e      	push	{r1, r2, r3}
   1151e:	b510      	push	{r4, lr}
   11520:	b09d      	sub	sp, #116	; 0x74
   11522:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11526:	ab1f      	add	r3, sp, #124	; 0x7c
   11528:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1152c:	9104      	str	r1, [sp, #16]
   1152e:	4909      	ldr	r1, [pc, #36]	; (11554 <sprintf+0x38>)
   11530:	f853 2b04 	ldr.w	r2, [r3], #4
   11534:	9002      	str	r0, [sp, #8]
   11536:	4c08      	ldr	r4, [pc, #32]	; (11558 <sprintf+0x3c>)
   11538:	6808      	ldr	r0, [r1, #0]
   1153a:	9301      	str	r3, [sp, #4]
   1153c:	a902      	add	r1, sp, #8
   1153e:	9405      	str	r4, [sp, #20]
   11540:	f002 f956 	bl	137f0 <_svfprintf_r>
   11544:	9b02      	ldr	r3, [sp, #8]
   11546:	2200      	movs	r2, #0
   11548:	701a      	strb	r2, [r3, #0]
   1154a:	b01d      	add	sp, #116	; 0x74
   1154c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11550:	b003      	add	sp, #12
   11552:	4770      	bx	lr
   11554:	20009424 	.word	0x20009424
   11558:	ffff0208 	.word	0xffff0208

0001155c <sscanf>:
   1155c:	b40e      	push	{r1, r2, r3}
   1155e:	b510      	push	{r4, lr}
   11560:	b09f      	sub	sp, #124	; 0x7c
   11562:	ac21      	add	r4, sp, #132	; 0x84
   11564:	f44f 7101 	mov.w	r1, #516	; 0x204
   11568:	f854 2b04 	ldr.w	r2, [r4], #4
   1156c:	9201      	str	r2, [sp, #4]
   1156e:	f8ad 101c 	strh.w	r1, [sp, #28]
   11572:	9004      	str	r0, [sp, #16]
   11574:	9008      	str	r0, [sp, #32]
   11576:	f000 fd63 	bl	12040 <strlen>
   1157a:	9005      	str	r0, [sp, #20]
   1157c:	9009      	str	r0, [sp, #36]	; 0x24
   1157e:	480b      	ldr	r0, [pc, #44]	; (115ac <sscanf+0x50>)
   11580:	490b      	ldr	r1, [pc, #44]	; (115b0 <sscanf+0x54>)
   11582:	910c      	str	r1, [sp, #48]	; 0x30
   11584:	2300      	movs	r3, #0
   11586:	f64f 7cff 	movw	ip, #65535	; 0xffff
   1158a:	9310      	str	r3, [sp, #64]	; 0x40
   1158c:	9315      	str	r3, [sp, #84]	; 0x54
   1158e:	9a01      	ldr	r2, [sp, #4]
   11590:	6800      	ldr	r0, [r0, #0]
   11592:	f8ad c01e 	strh.w	ip, [sp, #30]
   11596:	4623      	mov	r3, r4
   11598:	a904      	add	r1, sp, #16
   1159a:	9403      	str	r4, [sp, #12]
   1159c:	f003 feca 	bl	15334 <__ssvfscanf_r>
   115a0:	b01f      	add	sp, #124	; 0x7c
   115a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   115a6:	b003      	add	sp, #12
   115a8:	4770      	bx	lr
   115aa:	bf00      	nop
   115ac:	20009424 	.word	0x20009424
   115b0:	000115d9 	.word	0x000115d9

000115b4 <__sread>:
   115b4:	b510      	push	{r4, lr}
   115b6:	460c      	mov	r4, r1
   115b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   115bc:	f000 faa2 	bl	11b04 <_read_r>
   115c0:	2800      	cmp	r0, #0
   115c2:	db03      	blt.n	115cc <__sread+0x18>
   115c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   115c6:	4403      	add	r3, r0
   115c8:	6523      	str	r3, [r4, #80]	; 0x50
   115ca:	bd10      	pop	{r4, pc}
   115cc:	89a3      	ldrh	r3, [r4, #12]
   115ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   115d2:	81a3      	strh	r3, [r4, #12]
   115d4:	bd10      	pop	{r4, pc}
   115d6:	bf00      	nop

000115d8 <__seofread>:
   115d8:	2000      	movs	r0, #0
   115da:	4770      	bx	lr

000115dc <__swrite>:
   115dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   115e0:	460c      	mov	r4, r1
   115e2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   115e6:	461f      	mov	r7, r3
   115e8:	05cb      	lsls	r3, r1, #23
   115ea:	4605      	mov	r5, r0
   115ec:	4616      	mov	r6, r2
   115ee:	d40b      	bmi.n	11608 <__swrite+0x2c>
   115f0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   115f4:	81a1      	strh	r1, [r4, #12]
   115f6:	463b      	mov	r3, r7
   115f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   115fc:	4632      	mov	r2, r6
   115fe:	4628      	mov	r0, r5
   11600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11604:	f000 baa6 	b.w	11b54 <_write_r>
   11608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1160c:	2302      	movs	r3, #2
   1160e:	2200      	movs	r2, #0
   11610:	f000 fa62 	bl	11ad8 <_lseek_r>
   11614:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   11618:	e7ea      	b.n	115f0 <__swrite+0x14>
   1161a:	bf00      	nop

0001161c <__sseek>:
   1161c:	b510      	push	{r4, lr}
   1161e:	460c      	mov	r4, r1
   11620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11624:	f000 fa58 	bl	11ad8 <_lseek_r>
   11628:	89a3      	ldrh	r3, [r4, #12]
   1162a:	1c42      	adds	r2, r0, #1
   1162c:	bf0e      	itee	eq
   1162e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   11632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   11636:	6520      	strne	r0, [r4, #80]	; 0x50
   11638:	81a3      	strh	r3, [r4, #12]
   1163a:	bd10      	pop	{r4, pc}

0001163c <__sclose>:
   1163c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   11640:	f000 ba38 	b.w	11ab4 <_close_r>

00011644 <_vdprintf_r>:
   11644:	b5f0      	push	{r4, r5, r6, r7, lr}
   11646:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   1164a:	af04      	add	r7, sp, #16
   1164c:	9300      	str	r3, [sp, #0]
   1164e:	4613      	mov	r3, r2
   11650:	f44f 7200 	mov.w	r2, #512	; 0x200
   11654:	460e      	mov	r6, r1
   11656:	9203      	str	r2, [sp, #12]
   11658:	4639      	mov	r1, r7
   1165a:	aa03      	add	r2, sp, #12
   1165c:	4605      	mov	r5, r0
   1165e:	f000 f825 	bl	116ac <_vasnprintf_r>
   11662:	b188      	cbz	r0, 11688 <_vdprintf_r+0x44>
   11664:	4604      	mov	r4, r0
   11666:	4602      	mov	r2, r0
   11668:	9b03      	ldr	r3, [sp, #12]
   1166a:	4631      	mov	r1, r6
   1166c:	4628      	mov	r0, r5
   1166e:	f000 fa71 	bl	11b54 <_write_r>
   11672:	42bc      	cmp	r4, r7
   11674:	9003      	str	r0, [sp, #12]
   11676:	d004      	beq.n	11682 <_vdprintf_r+0x3e>
   11678:	4628      	mov	r0, r5
   1167a:	4621      	mov	r1, r4
   1167c:	f000 fdf2 	bl	12264 <_free_r>
   11680:	9803      	ldr	r0, [sp, #12]
   11682:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   11686:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11688:	f04f 30ff 	mov.w	r0, #4294967295
   1168c:	e7f9      	b.n	11682 <_vdprintf_r+0x3e>
   1168e:	bf00      	nop

00011690 <vdprintf>:
   11690:	b410      	push	{r4}
   11692:	4c05      	ldr	r4, [pc, #20]	; (116a8 <vdprintf+0x18>)
   11694:	4684      	mov	ip, r0
   11696:	4613      	mov	r3, r2
   11698:	6820      	ldr	r0, [r4, #0]
   1169a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1169e:	460a      	mov	r2, r1
   116a0:	4661      	mov	r1, ip
   116a2:	f7ff bfcf 	b.w	11644 <_vdprintf_r>
   116a6:	bf00      	nop
   116a8:	20009424 	.word	0x20009424

000116ac <_vasnprintf_r>:
   116ac:	b530      	push	{r4, r5, lr}
   116ae:	6814      	ldr	r4, [r2, #0]
   116b0:	4615      	mov	r5, r2
   116b2:	b09b      	sub	sp, #108	; 0x6c
   116b4:	461a      	mov	r2, r3
   116b6:	b109      	cbz	r1, 116bc <_vasnprintf_r+0x10>
   116b8:	2c00      	cmp	r4, #0
   116ba:	d119      	bne.n	116f0 <_vasnprintf_r+0x44>
   116bc:	2100      	movs	r1, #0
   116be:	f44f 7322 	mov.w	r3, #648	; 0x288
   116c2:	f8ad 300c 	strh.w	r3, [sp, #12]
   116c6:	9100      	str	r1, [sp, #0]
   116c8:	9104      	str	r1, [sp, #16]
   116ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   116ce:	9102      	str	r1, [sp, #8]
   116d0:	9105      	str	r1, [sp, #20]
   116d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   116d6:	4669      	mov	r1, sp
   116d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   116da:	f002 f889 	bl	137f0 <_svfprintf_r>
   116de:	2800      	cmp	r0, #0
   116e0:	db13      	blt.n	1170a <_vasnprintf_r+0x5e>
   116e2:	9b00      	ldr	r3, [sp, #0]
   116e4:	6028      	str	r0, [r5, #0]
   116e6:	2200      	movs	r2, #0
   116e8:	701a      	strb	r2, [r3, #0]
   116ea:	9804      	ldr	r0, [sp, #16]
   116ec:	b01b      	add	sp, #108	; 0x6c
   116ee:	bd30      	pop	{r4, r5, pc}
   116f0:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   116f4:	9100      	str	r1, [sp, #0]
   116f6:	9104      	str	r1, [sp, #16]
   116f8:	f8ad 300c 	strh.w	r3, [sp, #12]
   116fc:	4621      	mov	r1, r4
   116fe:	dae4      	bge.n	116ca <_vasnprintf_r+0x1e>
   11700:	238b      	movs	r3, #139	; 0x8b
   11702:	6003      	str	r3, [r0, #0]
   11704:	2000      	movs	r0, #0
   11706:	b01b      	add	sp, #108	; 0x6c
   11708:	bd30      	pop	{r4, r5, pc}
   1170a:	2000      	movs	r0, #0
   1170c:	e7ee      	b.n	116ec <_vasnprintf_r+0x40>
   1170e:	bf00      	nop

00011710 <memcmp>:
   11710:	2a03      	cmp	r2, #3
   11712:	b570      	push	{r4, r5, r6, lr}
   11714:	d914      	bls.n	11740 <memcmp+0x30>
   11716:	ea40 0301 	orr.w	r3, r0, r1
   1171a:	079b      	lsls	r3, r3, #30
   1171c:	d122      	bne.n	11764 <memcmp+0x54>
   1171e:	4604      	mov	r4, r0
   11720:	460b      	mov	r3, r1
   11722:	4619      	mov	r1, r3
   11724:	4620      	mov	r0, r4
   11726:	680e      	ldr	r6, [r1, #0]
   11728:	6805      	ldr	r5, [r0, #0]
   1172a:	42b5      	cmp	r5, r6
   1172c:	f104 0404 	add.w	r4, r4, #4
   11730:	f103 0304 	add.w	r3, r3, #4
   11734:	d116      	bne.n	11764 <memcmp+0x54>
   11736:	3a04      	subs	r2, #4
   11738:	2a03      	cmp	r2, #3
   1173a:	4620      	mov	r0, r4
   1173c:	4619      	mov	r1, r3
   1173e:	d8f0      	bhi.n	11722 <memcmp+0x12>
   11740:	1e54      	subs	r4, r2, #1
   11742:	b19a      	cbz	r2, 1176c <memcmp+0x5c>
   11744:	1e42      	subs	r2, r0, #1
   11746:	3901      	subs	r1, #1
   11748:	e001      	b.n	1174e <memcmp+0x3e>
   1174a:	18c3      	adds	r3, r0, r3
   1174c:	d00c      	beq.n	11768 <memcmp+0x58>
   1174e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   11752:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   11756:	45e6      	cmp	lr, ip
   11758:	eba4 0302 	sub.w	r3, r4, r2
   1175c:	d0f5      	beq.n	1174a <memcmp+0x3a>
   1175e:	ebae 000c 	sub.w	r0, lr, ip
   11762:	bd70      	pop	{r4, r5, r6, pc}
   11764:	1e54      	subs	r4, r2, #1
   11766:	e7ed      	b.n	11744 <memcmp+0x34>
   11768:	4618      	mov	r0, r3
   1176a:	bd70      	pop	{r4, r5, r6, pc}
   1176c:	4610      	mov	r0, r2
   1176e:	bd70      	pop	{r4, r5, r6, pc}

00011770 <memmove>:
   11770:	4288      	cmp	r0, r1
   11772:	d90d      	bls.n	11790 <memmove+0x20>
   11774:	188b      	adds	r3, r1, r2
   11776:	4283      	cmp	r3, r0
   11778:	d90a      	bls.n	11790 <memmove+0x20>
   1177a:	eb00 0c02 	add.w	ip, r0, r2
   1177e:	b1ba      	cbz	r2, 117b0 <memmove+0x40>
   11780:	4662      	mov	r2, ip
   11782:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   11786:	f802 cd01 	strb.w	ip, [r2, #-1]!
   1178a:	4299      	cmp	r1, r3
   1178c:	d1f9      	bne.n	11782 <memmove+0x12>
   1178e:	4770      	bx	lr
   11790:	2a0f      	cmp	r2, #15
   11792:	d80e      	bhi.n	117b2 <memmove+0x42>
   11794:	4603      	mov	r3, r0
   11796:	f102 3cff 	add.w	ip, r2, #4294967295
   1179a:	b14a      	cbz	r2, 117b0 <memmove+0x40>
   1179c:	f10c 0c01 	add.w	ip, ip, #1
   117a0:	3b01      	subs	r3, #1
   117a2:	448c      	add	ip, r1
   117a4:	f811 2b01 	ldrb.w	r2, [r1], #1
   117a8:	f803 2f01 	strb.w	r2, [r3, #1]!
   117ac:	4561      	cmp	r1, ip
   117ae:	d1f9      	bne.n	117a4 <memmove+0x34>
   117b0:	4770      	bx	lr
   117b2:	ea40 0301 	orr.w	r3, r0, r1
   117b6:	079b      	lsls	r3, r3, #30
   117b8:	d150      	bne.n	1185c <memmove+0xec>
   117ba:	f1a2 0310 	sub.w	r3, r2, #16
   117be:	b570      	push	{r4, r5, r6, lr}
   117c0:	f101 0c20 	add.w	ip, r1, #32
   117c4:	f023 050f 	bic.w	r5, r3, #15
   117c8:	f101 0e10 	add.w	lr, r1, #16
   117cc:	f100 0410 	add.w	r4, r0, #16
   117d0:	44ac      	add	ip, r5
   117d2:	091b      	lsrs	r3, r3, #4
   117d4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   117d8:	f844 5c10 	str.w	r5, [r4, #-16]
   117dc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   117e0:	f844 5c0c 	str.w	r5, [r4, #-12]
   117e4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   117e8:	f844 5c08 	str.w	r5, [r4, #-8]
   117ec:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   117f0:	f844 5c04 	str.w	r5, [r4, #-4]
   117f4:	f10e 0e10 	add.w	lr, lr, #16
   117f8:	45e6      	cmp	lr, ip
   117fa:	f104 0410 	add.w	r4, r4, #16
   117fe:	d1e9      	bne.n	117d4 <memmove+0x64>
   11800:	3301      	adds	r3, #1
   11802:	f012 0f0c 	tst.w	r2, #12
   11806:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   1180a:	f002 040f 	and.w	r4, r2, #15
   1180e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   11812:	d027      	beq.n	11864 <memmove+0xf4>
   11814:	3c04      	subs	r4, #4
   11816:	f024 0603 	bic.w	r6, r4, #3
   1181a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   1181e:	441e      	add	r6, r3
   11820:	1f1c      	subs	r4, r3, #4
   11822:	468e      	mov	lr, r1
   11824:	f85e 5b04 	ldr.w	r5, [lr], #4
   11828:	f844 5f04 	str.w	r5, [r4, #4]!
   1182c:	42b4      	cmp	r4, r6
   1182e:	d1f9      	bne.n	11824 <memmove+0xb4>
   11830:	f10c 0401 	add.w	r4, ip, #1
   11834:	f002 0203 	and.w	r2, r2, #3
   11838:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1183c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   11840:	f102 3cff 	add.w	ip, r2, #4294967295
   11844:	b14a      	cbz	r2, 1185a <memmove+0xea>
   11846:	f10c 0c01 	add.w	ip, ip, #1
   1184a:	3b01      	subs	r3, #1
   1184c:	448c      	add	ip, r1
   1184e:	f811 2b01 	ldrb.w	r2, [r1], #1
   11852:	f803 2f01 	strb.w	r2, [r3, #1]!
   11856:	4561      	cmp	r1, ip
   11858:	d1f9      	bne.n	1184e <memmove+0xde>
   1185a:	bd70      	pop	{r4, r5, r6, pc}
   1185c:	f102 3cff 	add.w	ip, r2, #4294967295
   11860:	4603      	mov	r3, r0
   11862:	e79b      	b.n	1179c <memmove+0x2c>
   11864:	4622      	mov	r2, r4
   11866:	e7eb      	b.n	11840 <memmove+0xd0>

00011868 <memset>:
   11868:	0783      	lsls	r3, r0, #30
   1186a:	b530      	push	{r4, r5, lr}
   1186c:	d048      	beq.n	11900 <memset+0x98>
   1186e:	1e54      	subs	r4, r2, #1
   11870:	2a00      	cmp	r2, #0
   11872:	d03f      	beq.n	118f4 <memset+0x8c>
   11874:	b2ca      	uxtb	r2, r1
   11876:	4603      	mov	r3, r0
   11878:	e001      	b.n	1187e <memset+0x16>
   1187a:	3c01      	subs	r4, #1
   1187c:	d33a      	bcc.n	118f4 <memset+0x8c>
   1187e:	f803 2b01 	strb.w	r2, [r3], #1
   11882:	079d      	lsls	r5, r3, #30
   11884:	d1f9      	bne.n	1187a <memset+0x12>
   11886:	2c03      	cmp	r4, #3
   11888:	d92d      	bls.n	118e6 <memset+0x7e>
   1188a:	b2cd      	uxtb	r5, r1
   1188c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   11890:	2c0f      	cmp	r4, #15
   11892:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   11896:	d936      	bls.n	11906 <memset+0x9e>
   11898:	f1a4 0210 	sub.w	r2, r4, #16
   1189c:	f022 0c0f 	bic.w	ip, r2, #15
   118a0:	f103 0e20 	add.w	lr, r3, #32
   118a4:	44e6      	add	lr, ip
   118a6:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   118aa:	f103 0210 	add.w	r2, r3, #16
   118ae:	e942 5504 	strd	r5, r5, [r2, #-16]
   118b2:	e942 5502 	strd	r5, r5, [r2, #-8]
   118b6:	3210      	adds	r2, #16
   118b8:	4572      	cmp	r2, lr
   118ba:	d1f8      	bne.n	118ae <memset+0x46>
   118bc:	f10c 0201 	add.w	r2, ip, #1
   118c0:	f014 0f0c 	tst.w	r4, #12
   118c4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   118c8:	f004 0c0f 	and.w	ip, r4, #15
   118cc:	d013      	beq.n	118f6 <memset+0x8e>
   118ce:	f1ac 0304 	sub.w	r3, ip, #4
   118d2:	f023 0303 	bic.w	r3, r3, #3
   118d6:	3304      	adds	r3, #4
   118d8:	4413      	add	r3, r2
   118da:	f842 5b04 	str.w	r5, [r2], #4
   118de:	4293      	cmp	r3, r2
   118e0:	d1fb      	bne.n	118da <memset+0x72>
   118e2:	f00c 0403 	and.w	r4, ip, #3
   118e6:	b12c      	cbz	r4, 118f4 <memset+0x8c>
   118e8:	b2c9      	uxtb	r1, r1
   118ea:	441c      	add	r4, r3
   118ec:	f803 1b01 	strb.w	r1, [r3], #1
   118f0:	429c      	cmp	r4, r3
   118f2:	d1fb      	bne.n	118ec <memset+0x84>
   118f4:	bd30      	pop	{r4, r5, pc}
   118f6:	4664      	mov	r4, ip
   118f8:	4613      	mov	r3, r2
   118fa:	2c00      	cmp	r4, #0
   118fc:	d1f4      	bne.n	118e8 <memset+0x80>
   118fe:	e7f9      	b.n	118f4 <memset+0x8c>
   11900:	4603      	mov	r3, r0
   11902:	4614      	mov	r4, r2
   11904:	e7bf      	b.n	11886 <memset+0x1e>
   11906:	461a      	mov	r2, r3
   11908:	46a4      	mov	ip, r4
   1190a:	e7e0      	b.n	118ce <memset+0x66>

0001190c <strlcat>:
   1190c:	b570      	push	{r4, r5, r6, lr}
   1190e:	b34a      	cbz	r2, 11964 <strlcat+0x58>
   11910:	4603      	mov	r3, r0
   11912:	1815      	adds	r5, r2, r0
   11914:	e002      	b.n	1191c <strlcat+0x10>
   11916:	429d      	cmp	r5, r3
   11918:	469c      	mov	ip, r3
   1191a:	d005      	beq.n	11928 <strlcat+0x1c>
   1191c:	469c      	mov	ip, r3
   1191e:	3301      	adds	r3, #1
   11920:	f89c 4000 	ldrb.w	r4, [ip]
   11924:	2c00      	cmp	r4, #0
   11926:	d1f6      	bne.n	11916 <strlcat+0xa>
   11928:	ebac 0600 	sub.w	r6, ip, r0
   1192c:	1b92      	subs	r2, r2, r6
   1192e:	1e55      	subs	r5, r2, #1
   11930:	b1ca      	cbz	r2, 11966 <strlcat+0x5a>
   11932:	780c      	ldrb	r4, [r1, #0]
   11934:	460b      	mov	r3, r1
   11936:	b93c      	cbnz	r4, 11948 <strlcat+0x3c>
   11938:	e00f      	b.n	1195a <strlcat+0x4e>
   1193a:	f802 4b01 	strb.w	r4, [r2], #1
   1193e:	3d01      	subs	r5, #1
   11940:	4694      	mov	ip, r2
   11942:	785c      	ldrb	r4, [r3, #1]
   11944:	3301      	adds	r3, #1
   11946:	b134      	cbz	r4, 11956 <strlcat+0x4a>
   11948:	4662      	mov	r2, ip
   1194a:	2d00      	cmp	r5, #0
   1194c:	d1f5      	bne.n	1193a <strlcat+0x2e>
   1194e:	785a      	ldrb	r2, [r3, #1]
   11950:	3301      	adds	r3, #1
   11952:	2a00      	cmp	r2, #0
   11954:	d1f5      	bne.n	11942 <strlcat+0x36>
   11956:	1a5b      	subs	r3, r3, r1
   11958:	441e      	add	r6, r3
   1195a:	2300      	movs	r3, #0
   1195c:	f88c 3000 	strb.w	r3, [ip]
   11960:	4630      	mov	r0, r6
   11962:	bd70      	pop	{r4, r5, r6, pc}
   11964:	4616      	mov	r6, r2
   11966:	4608      	mov	r0, r1
   11968:	f000 fb6a 	bl	12040 <strlen>
   1196c:	4406      	add	r6, r0
   1196e:	4630      	mov	r0, r6
   11970:	bd70      	pop	{r4, r5, r6, pc}
   11972:	bf00      	nop

00011974 <strlcpy>:
   11974:	b1c2      	cbz	r2, 119a8 <strlcpy+0x34>
   11976:	eb00 0c02 	add.w	ip, r0, r2
   1197a:	b500      	push	{lr}
   1197c:	460b      	mov	r3, r1
   1197e:	f10c 3eff 	add.w	lr, ip, #4294967295
   11982:	e004      	b.n	1198e <strlcpy+0x1a>
   11984:	f813 2b01 	ldrb.w	r2, [r3], #1
   11988:	f800 2b01 	strb.w	r2, [r0], #1
   1198c:	b142      	cbz	r2, 119a0 <strlcpy+0x2c>
   1198e:	4586      	cmp	lr, r0
   11990:	d1f8      	bne.n	11984 <strlcpy+0x10>
   11992:	2200      	movs	r2, #0
   11994:	f80c 2c01 	strb.w	r2, [ip, #-1]
   11998:	f813 2b01 	ldrb.w	r2, [r3], #1
   1199c:	2a00      	cmp	r2, #0
   1199e:	d1fb      	bne.n	11998 <strlcpy+0x24>
   119a0:	1a59      	subs	r1, r3, r1
   119a2:	1e48      	subs	r0, r1, #1
   119a4:	f85d fb04 	ldr.w	pc, [sp], #4
   119a8:	460b      	mov	r3, r1
   119aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   119ae:	2a00      	cmp	r2, #0
   119b0:	d1fb      	bne.n	119aa <strlcpy+0x36>
   119b2:	1a59      	subs	r1, r3, r1
   119b4:	1e48      	subs	r0, r1, #1
   119b6:	4770      	bx	lr

000119b8 <strncmp>:
   119b8:	2a00      	cmp	r2, #0
   119ba:	d03e      	beq.n	11a3a <strncmp+0x82>
   119bc:	ea40 0301 	orr.w	r3, r0, r1
   119c0:	079b      	lsls	r3, r3, #30
   119c2:	b530      	push	{r4, r5, lr}
   119c4:	4684      	mov	ip, r0
   119c6:	d12f      	bne.n	11a28 <strncmp+0x70>
   119c8:	2a03      	cmp	r2, #3
   119ca:	d92d      	bls.n	11a28 <strncmp+0x70>
   119cc:	460b      	mov	r3, r1
   119ce:	e008      	b.n	119e2 <strncmp+0x2a>
   119d0:	3a04      	subs	r2, #4
   119d2:	4684      	mov	ip, r0
   119d4:	4619      	mov	r1, r3
   119d6:	d025      	beq.n	11a24 <strncmp+0x6c>
   119d8:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   119dc:	d122      	bne.n	11a24 <strncmp+0x6c>
   119de:	2a03      	cmp	r2, #3
   119e0:	d922      	bls.n	11a28 <strncmp+0x70>
   119e2:	6804      	ldr	r4, [r0, #0]
   119e4:	4619      	mov	r1, r3
   119e6:	f853 5b04 	ldr.w	r5, [r3], #4
   119ea:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   119ee:	42ac      	cmp	r4, r5
   119f0:	4684      	mov	ip, r0
   119f2:	ea2e 0e04 	bic.w	lr, lr, r4
   119f6:	f100 0004 	add.w	r0, r0, #4
   119fa:	d0e9      	beq.n	119d0 <strncmp+0x18>
   119fc:	f89c 0000 	ldrb.w	r0, [ip]
   11a00:	780c      	ldrb	r4, [r1, #0]
   11a02:	42a0      	cmp	r0, r4
   11a04:	d11b      	bne.n	11a3e <strncmp+0x86>
   11a06:	46e6      	mov	lr, ip
   11a08:	b168      	cbz	r0, 11a26 <strncmp+0x6e>
   11a0a:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   11a0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   11a12:	eba2 030e 	sub.w	r3, r2, lr
   11a16:	42a0      	cmp	r0, r4
   11a18:	f103 33ff 	add.w	r3, r3, #4294967295
   11a1c:	d10f      	bne.n	11a3e <strncmp+0x86>
   11a1e:	eb1c 0303 	adds.w	r3, ip, r3
   11a22:	d1f1      	bne.n	11a08 <strncmp+0x50>
   11a24:	2000      	movs	r0, #0
   11a26:	bd30      	pop	{r4, r5, pc}
   11a28:	f89c 0000 	ldrb.w	r0, [ip]
   11a2c:	780c      	ldrb	r4, [r1, #0]
   11a2e:	4284      	cmp	r4, r0
   11a30:	d105      	bne.n	11a3e <strncmp+0x86>
   11a32:	2a01      	cmp	r2, #1
   11a34:	d0f6      	beq.n	11a24 <strncmp+0x6c>
   11a36:	46e6      	mov	lr, ip
   11a38:	e7e6      	b.n	11a08 <strncmp+0x50>
   11a3a:	4610      	mov	r0, r2
   11a3c:	4770      	bx	lr
   11a3e:	1b00      	subs	r0, r0, r4
   11a40:	bd30      	pop	{r4, r5, pc}
   11a42:	bf00      	nop

00011a44 <strncpy>:
   11a44:	ea40 0301 	orr.w	r3, r0, r1
   11a48:	079b      	lsls	r3, r3, #30
   11a4a:	b530      	push	{r4, r5, lr}
   11a4c:	d101      	bne.n	11a52 <strncpy+0xe>
   11a4e:	2a03      	cmp	r2, #3
   11a50:	d80f      	bhi.n	11a72 <strncpy+0x2e>
   11a52:	4684      	mov	ip, r0
   11a54:	f101 3eff 	add.w	lr, r1, #4294967295
   11a58:	e007      	b.n	11a6a <strncpy+0x26>
   11a5a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   11a5e:	f803 1b01 	strb.w	r1, [r3], #1
   11a62:	1e54      	subs	r4, r2, #1
   11a64:	b1c1      	cbz	r1, 11a98 <strncpy+0x54>
   11a66:	469c      	mov	ip, r3
   11a68:	4622      	mov	r2, r4
   11a6a:	4663      	mov	r3, ip
   11a6c:	2a00      	cmp	r2, #0
   11a6e:	d1f4      	bne.n	11a5a <strncpy+0x16>
   11a70:	bd30      	pop	{r4, r5, pc}
   11a72:	460b      	mov	r3, r1
   11a74:	4684      	mov	ip, r0
   11a76:	4619      	mov	r1, r3
   11a78:	f853 5b04 	ldr.w	r5, [r3], #4
   11a7c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   11a80:	ea24 0405 	bic.w	r4, r4, r5
   11a84:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   11a88:	d1e4      	bne.n	11a54 <strncpy+0x10>
   11a8a:	3a04      	subs	r2, #4
   11a8c:	2a03      	cmp	r2, #3
   11a8e:	f84c 5b04 	str.w	r5, [ip], #4
   11a92:	4619      	mov	r1, r3
   11a94:	d8ef      	bhi.n	11a76 <strncpy+0x32>
   11a96:	e7dd      	b.n	11a54 <strncpy+0x10>
   11a98:	4494      	add	ip, r2
   11a9a:	2c00      	cmp	r4, #0
   11a9c:	d0e8      	beq.n	11a70 <strncpy+0x2c>
   11a9e:	f803 1b01 	strb.w	r1, [r3], #1
   11aa2:	4563      	cmp	r3, ip
   11aa4:	d1fb      	bne.n	11a9e <strncpy+0x5a>
   11aa6:	bd30      	pop	{r4, r5, pc}

00011aa8 <__locale_mb_cur_max>:
   11aa8:	4b01      	ldr	r3, [pc, #4]	; (11ab0 <__locale_mb_cur_max+0x8>)
   11aaa:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   11aae:	4770      	bx	lr
   11ab0:	20008e9c 	.word	0x20008e9c

00011ab4 <_close_r>:
   11ab4:	b538      	push	{r3, r4, r5, lr}
   11ab6:	4d07      	ldr	r5, [pc, #28]	; (11ad4 <_close_r+0x20>)
   11ab8:	2200      	movs	r2, #0
   11aba:	4604      	mov	r4, r0
   11abc:	4608      	mov	r0, r1
   11abe:	602a      	str	r2, [r5, #0]
   11ac0:	f7fc f9d0 	bl	de64 <_close>
   11ac4:	1c43      	adds	r3, r0, #1
   11ac6:	d000      	beq.n	11aca <_close_r+0x16>
   11ac8:	bd38      	pop	{r3, r4, r5, pc}
   11aca:	682b      	ldr	r3, [r5, #0]
   11acc:	2b00      	cmp	r3, #0
   11ace:	d0fb      	beq.n	11ac8 <_close_r+0x14>
   11ad0:	6023      	str	r3, [r4, #0]
   11ad2:	bd38      	pop	{r3, r4, r5, pc}
   11ad4:	20028ad0 	.word	0x20028ad0

00011ad8 <_lseek_r>:
   11ad8:	b538      	push	{r3, r4, r5, lr}
   11ada:	460c      	mov	r4, r1
   11adc:	4d08      	ldr	r5, [pc, #32]	; (11b00 <_lseek_r+0x28>)
   11ade:	4684      	mov	ip, r0
   11ae0:	4611      	mov	r1, r2
   11ae2:	4620      	mov	r0, r4
   11ae4:	461a      	mov	r2, r3
   11ae6:	2300      	movs	r3, #0
   11ae8:	602b      	str	r3, [r5, #0]
   11aea:	4664      	mov	r4, ip
   11aec:	f7fc f9c6 	bl	de7c <_lseek>
   11af0:	1c43      	adds	r3, r0, #1
   11af2:	d000      	beq.n	11af6 <_lseek_r+0x1e>
   11af4:	bd38      	pop	{r3, r4, r5, pc}
   11af6:	682b      	ldr	r3, [r5, #0]
   11af8:	2b00      	cmp	r3, #0
   11afa:	d0fb      	beq.n	11af4 <_lseek_r+0x1c>
   11afc:	6023      	str	r3, [r4, #0]
   11afe:	bd38      	pop	{r3, r4, r5, pc}
   11b00:	20028ad0 	.word	0x20028ad0

00011b04 <_read_r>:
   11b04:	b538      	push	{r3, r4, r5, lr}
   11b06:	460c      	mov	r4, r1
   11b08:	4d08      	ldr	r5, [pc, #32]	; (11b2c <_read_r+0x28>)
   11b0a:	4684      	mov	ip, r0
   11b0c:	4611      	mov	r1, r2
   11b0e:	4620      	mov	r0, r4
   11b10:	461a      	mov	r2, r3
   11b12:	2300      	movs	r3, #0
   11b14:	602b      	str	r3, [r5, #0]
   11b16:	4664      	mov	r4, ip
   11b18:	f7fc f9a2 	bl	de60 <_read>
   11b1c:	1c43      	adds	r3, r0, #1
   11b1e:	d000      	beq.n	11b22 <_read_r+0x1e>
   11b20:	bd38      	pop	{r3, r4, r5, pc}
   11b22:	682b      	ldr	r3, [r5, #0]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d0fb      	beq.n	11b20 <_read_r+0x1c>
   11b28:	6023      	str	r3, [r4, #0]
   11b2a:	bd38      	pop	{r3, r4, r5, pc}
   11b2c:	20028ad0 	.word	0x20028ad0

00011b30 <_sbrk_r>:
   11b30:	b538      	push	{r3, r4, r5, lr}
   11b32:	4d07      	ldr	r5, [pc, #28]	; (11b50 <_sbrk_r+0x20>)
   11b34:	2200      	movs	r2, #0
   11b36:	4604      	mov	r4, r0
   11b38:	4608      	mov	r0, r1
   11b3a:	602a      	str	r2, [r5, #0]
   11b3c:	f7fc f976 	bl	de2c <_sbrk>
   11b40:	1c43      	adds	r3, r0, #1
   11b42:	d000      	beq.n	11b46 <_sbrk_r+0x16>
   11b44:	bd38      	pop	{r3, r4, r5, pc}
   11b46:	682b      	ldr	r3, [r5, #0]
   11b48:	2b00      	cmp	r3, #0
   11b4a:	d0fb      	beq.n	11b44 <_sbrk_r+0x14>
   11b4c:	6023      	str	r3, [r4, #0]
   11b4e:	bd38      	pop	{r3, r4, r5, pc}
   11b50:	20028ad0 	.word	0x20028ad0

00011b54 <_write_r>:
   11b54:	b538      	push	{r3, r4, r5, lr}
   11b56:	460c      	mov	r4, r1
   11b58:	4d08      	ldr	r5, [pc, #32]	; (11b7c <_write_r+0x28>)
   11b5a:	4684      	mov	ip, r0
   11b5c:	4611      	mov	r1, r2
   11b5e:	4620      	mov	r0, r4
   11b60:	461a      	mov	r2, r3
   11b62:	2300      	movs	r3, #0
   11b64:	602b      	str	r3, [r5, #0]
   11b66:	4664      	mov	r4, ip
   11b68:	f7fa fff6 	bl	cb58 <_write>
   11b6c:	1c43      	adds	r3, r0, #1
   11b6e:	d000      	beq.n	11b72 <_write_r+0x1e>
   11b70:	bd38      	pop	{r3, r4, r5, pc}
   11b72:	682b      	ldr	r3, [r5, #0]
   11b74:	2b00      	cmp	r3, #0
   11b76:	d0fb      	beq.n	11b70 <_write_r+0x1c>
   11b78:	6023      	str	r3, [r4, #0]
   11b7a:	bd38      	pop	{r3, r4, r5, pc}
   11b7c:	20028ad0 	.word	0x20028ad0

00011b80 <__errno>:
   11b80:	4b01      	ldr	r3, [pc, #4]	; (11b88 <__errno+0x8>)
   11b82:	6818      	ldr	r0, [r3, #0]
   11b84:	4770      	bx	lr
   11b86:	bf00      	nop
   11b88:	20009424 	.word	0x20009424

00011b8c <__libc_init_array>:
   11b8c:	b570      	push	{r4, r5, r6, lr}
   11b8e:	4e0d      	ldr	r6, [pc, #52]	; (11bc4 <__libc_init_array+0x38>)
   11b90:	4d0d      	ldr	r5, [pc, #52]	; (11bc8 <__libc_init_array+0x3c>)
   11b92:	1b76      	subs	r6, r6, r5
   11b94:	10b6      	asrs	r6, r6, #2
   11b96:	d006      	beq.n	11ba6 <__libc_init_array+0x1a>
   11b98:	2400      	movs	r4, #0
   11b9a:	f855 3b04 	ldr.w	r3, [r5], #4
   11b9e:	3401      	adds	r4, #1
   11ba0:	4798      	blx	r3
   11ba2:	42a6      	cmp	r6, r4
   11ba4:	d1f9      	bne.n	11b9a <__libc_init_array+0xe>
   11ba6:	4e09      	ldr	r6, [pc, #36]	; (11bcc <__libc_init_array+0x40>)
   11ba8:	4d09      	ldr	r5, [pc, #36]	; (11bd0 <__libc_init_array+0x44>)
   11baa:	1b76      	subs	r6, r6, r5
   11bac:	f008 fc84 	bl	1a4b8 <___init_veneer>
   11bb0:	10b6      	asrs	r6, r6, #2
   11bb2:	d006      	beq.n	11bc2 <__libc_init_array+0x36>
   11bb4:	2400      	movs	r4, #0
   11bb6:	f855 3b04 	ldr.w	r3, [r5], #4
   11bba:	3401      	adds	r4, #1
   11bbc:	4798      	blx	r3
   11bbe:	42a6      	cmp	r6, r4
   11bc0:	d1f9      	bne.n	11bb6 <__libc_init_array+0x2a>
   11bc2:	bd70      	pop	{r4, r5, r6, pc}
   11bc4:	60002818 	.word	0x60002818
   11bc8:	60002818 	.word	0x60002818
   11bcc:	60002828 	.word	0x60002828
   11bd0:	60002818 	.word	0x60002818

00011bd4 <__retarget_lock_init_recursive>:
   11bd4:	4770      	bx	lr
   11bd6:	bf00      	nop

00011bd8 <__retarget_lock_close_recursive>:
   11bd8:	4770      	bx	lr
   11bda:	bf00      	nop

00011bdc <__retarget_lock_acquire_recursive>:
   11bdc:	4770      	bx	lr
   11bde:	bf00      	nop

00011be0 <__retarget_lock_release_recursive>:
   11be0:	4770      	bx	lr
   11be2:	bf00      	nop
	...
   11c00:	eba2 0003 	sub.w	r0, r2, r3
   11c04:	4770      	bx	lr
   11c06:	bf00      	nop

00011c08 <strcmp>:
   11c08:	7802      	ldrb	r2, [r0, #0]
   11c0a:	780b      	ldrb	r3, [r1, #0]
   11c0c:	2a01      	cmp	r2, #1
   11c0e:	bf28      	it	cs
   11c10:	429a      	cmpcs	r2, r3
   11c12:	d1f5      	bne.n	11c00 <__retarget_lock_release_recursive+0x20>
   11c14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   11c18:	ea40 0401 	orr.w	r4, r0, r1
   11c1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   11c20:	f06f 0c00 	mvn.w	ip, #0
   11c24:	ea4f 7244 	mov.w	r2, r4, lsl #29
   11c28:	b312      	cbz	r2, 11c70 <strcmp+0x68>
   11c2a:	ea80 0401 	eor.w	r4, r0, r1
   11c2e:	f014 0f07 	tst.w	r4, #7
   11c32:	d16a      	bne.n	11d0a <strcmp+0x102>
   11c34:	f000 0407 	and.w	r4, r0, #7
   11c38:	f020 0007 	bic.w	r0, r0, #7
   11c3c:	f004 0503 	and.w	r5, r4, #3
   11c40:	f021 0107 	bic.w	r1, r1, #7
   11c44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   11c48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   11c4c:	f014 0f04 	tst.w	r4, #4
   11c50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   11c54:	fa0c f405 	lsl.w	r4, ip, r5
   11c58:	ea62 0204 	orn	r2, r2, r4
   11c5c:	ea66 0604 	orn	r6, r6, r4
   11c60:	d00a      	beq.n	11c78 <strcmp+0x70>
   11c62:	ea63 0304 	orn	r3, r3, r4
   11c66:	4662      	mov	r2, ip
   11c68:	ea67 0704 	orn	r7, r7, r4
   11c6c:	4666      	mov	r6, ip
   11c6e:	e003      	b.n	11c78 <strcmp+0x70>
   11c70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   11c74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   11c78:	fa82 f54c 	uadd8	r5, r2, ip
   11c7c:	ea82 0406 	eor.w	r4, r2, r6
   11c80:	faa4 f48c 	sel	r4, r4, ip
   11c84:	bb6c      	cbnz	r4, 11ce2 <strcmp+0xda>
   11c86:	fa83 f54c 	uadd8	r5, r3, ip
   11c8a:	ea83 0507 	eor.w	r5, r3, r7
   11c8e:	faa5 f58c 	sel	r5, r5, ip
   11c92:	b995      	cbnz	r5, 11cba <strcmp+0xb2>
   11c94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   11c98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   11c9c:	fa82 f54c 	uadd8	r5, r2, ip
   11ca0:	ea82 0406 	eor.w	r4, r2, r6
   11ca4:	faa4 f48c 	sel	r4, r4, ip
   11ca8:	fa83 f54c 	uadd8	r5, r3, ip
   11cac:	ea83 0507 	eor.w	r5, r3, r7
   11cb0:	faa5 f58c 	sel	r5, r5, ip
   11cb4:	4325      	orrs	r5, r4
   11cb6:	d0db      	beq.n	11c70 <strcmp+0x68>
   11cb8:	b99c      	cbnz	r4, 11ce2 <strcmp+0xda>
   11cba:	ba2d      	rev	r5, r5
   11cbc:	fab5 f485 	clz	r4, r5
   11cc0:	f024 0407 	bic.w	r4, r4, #7
   11cc4:	fa27 f104 	lsr.w	r1, r7, r4
   11cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   11ccc:	fa23 f304 	lsr.w	r3, r3, r4
   11cd0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   11cd4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11cd8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11cdc:	eba0 0001 	sub.w	r0, r0, r1
   11ce0:	4770      	bx	lr
   11ce2:	ba24      	rev	r4, r4
   11ce4:	fab4 f484 	clz	r4, r4
   11ce8:	f024 0407 	bic.w	r4, r4, #7
   11cec:	fa26 f104 	lsr.w	r1, r6, r4
   11cf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   11cf4:	fa22 f204 	lsr.w	r2, r2, r4
   11cf8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   11cfc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11d00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11d04:	eba0 0001 	sub.w	r0, r0, r1
   11d08:	4770      	bx	lr
   11d0a:	f014 0f03 	tst.w	r4, #3
   11d0e:	d13c      	bne.n	11d8a <strcmp+0x182>
   11d10:	f010 0403 	ands.w	r4, r0, #3
   11d14:	d128      	bne.n	11d68 <strcmp+0x160>
   11d16:	f850 2b08 	ldr.w	r2, [r0], #8
   11d1a:	f851 3b08 	ldr.w	r3, [r1], #8
   11d1e:	fa82 f54c 	uadd8	r5, r2, ip
   11d22:	ea82 0503 	eor.w	r5, r2, r3
   11d26:	faa5 f58c 	sel	r5, r5, ip
   11d2a:	b95d      	cbnz	r5, 11d44 <strcmp+0x13c>
   11d2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   11d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
   11d34:	fa82 f54c 	uadd8	r5, r2, ip
   11d38:	ea82 0503 	eor.w	r5, r2, r3
   11d3c:	faa5 f58c 	sel	r5, r5, ip
   11d40:	2d00      	cmp	r5, #0
   11d42:	d0e8      	beq.n	11d16 <strcmp+0x10e>
   11d44:	ba2d      	rev	r5, r5
   11d46:	fab5 f485 	clz	r4, r5
   11d4a:	f024 0407 	bic.w	r4, r4, #7
   11d4e:	fa23 f104 	lsr.w	r1, r3, r4
   11d52:	fa22 f204 	lsr.w	r2, r2, r4
   11d56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   11d5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11d5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11d62:	eba0 0001 	sub.w	r0, r0, r1
   11d66:	4770      	bx	lr
   11d68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   11d6c:	f020 0003 	bic.w	r0, r0, #3
   11d70:	f850 2b08 	ldr.w	r2, [r0], #8
   11d74:	f021 0103 	bic.w	r1, r1, #3
   11d78:	f851 3b08 	ldr.w	r3, [r1], #8
   11d7c:	fa0c f404 	lsl.w	r4, ip, r4
   11d80:	ea62 0204 	orn	r2, r2, r4
   11d84:	ea63 0304 	orn	r3, r3, r4
   11d88:	e7c9      	b.n	11d1e <strcmp+0x116>
   11d8a:	f010 0403 	ands.w	r4, r0, #3
   11d8e:	d01a      	beq.n	11dc6 <strcmp+0x1be>
   11d90:	eba1 0104 	sub.w	r1, r1, r4
   11d94:	f020 0003 	bic.w	r0, r0, #3
   11d98:	07e4      	lsls	r4, r4, #31
   11d9a:	f850 2b04 	ldr.w	r2, [r0], #4
   11d9e:	d006      	beq.n	11dae <strcmp+0x1a6>
   11da0:	d20f      	bcs.n	11dc2 <strcmp+0x1ba>
   11da2:	788b      	ldrb	r3, [r1, #2]
   11da4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   11da8:	1ae4      	subs	r4, r4, r3
   11daa:	d106      	bne.n	11dba <strcmp+0x1b2>
   11dac:	b12b      	cbz	r3, 11dba <strcmp+0x1b2>
   11dae:	78cb      	ldrb	r3, [r1, #3]
   11db0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   11db4:	1ae4      	subs	r4, r4, r3
   11db6:	d100      	bne.n	11dba <strcmp+0x1b2>
   11db8:	b91b      	cbnz	r3, 11dc2 <strcmp+0x1ba>
   11dba:	4620      	mov	r0, r4
   11dbc:	f85d 4b10 	ldr.w	r4, [sp], #16
   11dc0:	4770      	bx	lr
   11dc2:	f101 0104 	add.w	r1, r1, #4
   11dc6:	f850 2b04 	ldr.w	r2, [r0], #4
   11dca:	07cc      	lsls	r4, r1, #31
   11dcc:	f021 0103 	bic.w	r1, r1, #3
   11dd0:	f851 3b04 	ldr.w	r3, [r1], #4
   11dd4:	d848      	bhi.n	11e68 <strcmp+0x260>
   11dd6:	d224      	bcs.n	11e22 <strcmp+0x21a>
   11dd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   11ddc:	fa82 f54c 	uadd8	r5, r2, ip
   11de0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   11de4:	faa5 f58c 	sel	r5, r5, ip
   11de8:	d10a      	bne.n	11e00 <strcmp+0x1f8>
   11dea:	b965      	cbnz	r5, 11e06 <strcmp+0x1fe>
   11dec:	f851 3b04 	ldr.w	r3, [r1], #4
   11df0:	ea84 0402 	eor.w	r4, r4, r2
   11df4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   11df8:	d10e      	bne.n	11e18 <strcmp+0x210>
   11dfa:	f850 2b04 	ldr.w	r2, [r0], #4
   11dfe:	e7eb      	b.n	11dd8 <strcmp+0x1d0>
   11e00:	ea4f 2313 	mov.w	r3, r3, lsr #8
   11e04:	e055      	b.n	11eb2 <strcmp+0x2aa>
   11e06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   11e0a:	d14d      	bne.n	11ea8 <strcmp+0x2a0>
   11e0c:	7808      	ldrb	r0, [r1, #0]
   11e0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11e12:	f1c0 0000 	rsb	r0, r0, #0
   11e16:	4770      	bx	lr
   11e18:	ea4f 6212 	mov.w	r2, r2, lsr #24
   11e1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   11e20:	e047      	b.n	11eb2 <strcmp+0x2aa>
   11e22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   11e26:	fa82 f54c 	uadd8	r5, r2, ip
   11e2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   11e2e:	faa5 f58c 	sel	r5, r5, ip
   11e32:	d10a      	bne.n	11e4a <strcmp+0x242>
   11e34:	b965      	cbnz	r5, 11e50 <strcmp+0x248>
   11e36:	f851 3b04 	ldr.w	r3, [r1], #4
   11e3a:	ea84 0402 	eor.w	r4, r4, r2
   11e3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   11e42:	d10c      	bne.n	11e5e <strcmp+0x256>
   11e44:	f850 2b04 	ldr.w	r2, [r0], #4
   11e48:	e7eb      	b.n	11e22 <strcmp+0x21a>
   11e4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   11e4e:	e030      	b.n	11eb2 <strcmp+0x2aa>
   11e50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   11e54:	d128      	bne.n	11ea8 <strcmp+0x2a0>
   11e56:	880b      	ldrh	r3, [r1, #0]
   11e58:	ea4f 4212 	mov.w	r2, r2, lsr #16
   11e5c:	e029      	b.n	11eb2 <strcmp+0x2aa>
   11e5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   11e62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   11e66:	e024      	b.n	11eb2 <strcmp+0x2aa>
   11e68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   11e6c:	fa82 f54c 	uadd8	r5, r2, ip
   11e70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   11e74:	faa5 f58c 	sel	r5, r5, ip
   11e78:	d10a      	bne.n	11e90 <strcmp+0x288>
   11e7a:	b965      	cbnz	r5, 11e96 <strcmp+0x28e>
   11e7c:	f851 3b04 	ldr.w	r3, [r1], #4
   11e80:	ea84 0402 	eor.w	r4, r4, r2
   11e84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   11e88:	d109      	bne.n	11e9e <strcmp+0x296>
   11e8a:	f850 2b04 	ldr.w	r2, [r0], #4
   11e8e:	e7eb      	b.n	11e68 <strcmp+0x260>
   11e90:	ea4f 6313 	mov.w	r3, r3, lsr #24
   11e94:	e00d      	b.n	11eb2 <strcmp+0x2aa>
   11e96:	f015 0fff 	tst.w	r5, #255	; 0xff
   11e9a:	d105      	bne.n	11ea8 <strcmp+0x2a0>
   11e9c:	680b      	ldr	r3, [r1, #0]
   11e9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   11ea2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   11ea6:	e004      	b.n	11eb2 <strcmp+0x2aa>
   11ea8:	f04f 0000 	mov.w	r0, #0
   11eac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11eb0:	4770      	bx	lr
   11eb2:	ba12      	rev	r2, r2
   11eb4:	ba1b      	rev	r3, r3
   11eb6:	fa82 f44c 	uadd8	r4, r2, ip
   11eba:	ea82 0403 	eor.w	r4, r2, r3
   11ebe:	faa4 f58c 	sel	r5, r4, ip
   11ec2:	fab5 f485 	clz	r4, r5
   11ec6:	fa02 f204 	lsl.w	r2, r2, r4
   11eca:	fa03 f304 	lsl.w	r3, r3, r4
   11ece:	ea4f 6012 	mov.w	r0, r2, lsr #24
   11ed2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   11ed6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   11eda:	4770      	bx	lr

00011edc <strcpy>:
   11edc:	ea80 0201 	eor.w	r2, r0, r1
   11ee0:	4684      	mov	ip, r0
   11ee2:	f012 0f03 	tst.w	r2, #3
   11ee6:	d14f      	bne.n	11f88 <strcpy+0xac>
   11ee8:	f011 0f03 	tst.w	r1, #3
   11eec:	d132      	bne.n	11f54 <strcpy+0x78>
   11eee:	f84d 4d04 	str.w	r4, [sp, #-4]!
   11ef2:	f011 0f04 	tst.w	r1, #4
   11ef6:	f851 3b04 	ldr.w	r3, [r1], #4
   11efa:	d00b      	beq.n	11f14 <strcpy+0x38>
   11efc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11f00:	439a      	bics	r2, r3
   11f02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11f06:	bf04      	itt	eq
   11f08:	f84c 3b04 	streq.w	r3, [ip], #4
   11f0c:	f851 3b04 	ldreq.w	r3, [r1], #4
   11f10:	d116      	bne.n	11f40 <strcpy+0x64>
   11f12:	bf00      	nop
   11f14:	f851 4b04 	ldr.w	r4, [r1], #4
   11f18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   11f1c:	439a      	bics	r2, r3
   11f1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11f22:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   11f26:	d10b      	bne.n	11f40 <strcpy+0x64>
   11f28:	f84c 3b04 	str.w	r3, [ip], #4
   11f2c:	43a2      	bics	r2, r4
   11f2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   11f32:	bf04      	itt	eq
   11f34:	f851 3b04 	ldreq.w	r3, [r1], #4
   11f38:	f84c 4b04 	streq.w	r4, [ip], #4
   11f3c:	d0ea      	beq.n	11f14 <strcpy+0x38>
   11f3e:	4623      	mov	r3, r4
   11f40:	f80c 3b01 	strb.w	r3, [ip], #1
   11f44:	f013 0fff 	tst.w	r3, #255	; 0xff
   11f48:	ea4f 2333 	mov.w	r3, r3, ror #8
   11f4c:	d1f8      	bne.n	11f40 <strcpy+0x64>
   11f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f52:	4770      	bx	lr
   11f54:	f011 0f01 	tst.w	r1, #1
   11f58:	d006      	beq.n	11f68 <strcpy+0x8c>
   11f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
   11f5e:	f80c 2b01 	strb.w	r2, [ip], #1
   11f62:	2a00      	cmp	r2, #0
   11f64:	bf08      	it	eq
   11f66:	4770      	bxeq	lr
   11f68:	f011 0f02 	tst.w	r1, #2
   11f6c:	d0bf      	beq.n	11eee <strcpy+0x12>
   11f6e:	f831 2b02 	ldrh.w	r2, [r1], #2
   11f72:	f012 0fff 	tst.w	r2, #255	; 0xff
   11f76:	bf16      	itet	ne
   11f78:	f82c 2b02 	strhne.w	r2, [ip], #2
   11f7c:	f88c 2000 	strbeq.w	r2, [ip]
   11f80:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   11f84:	d1b3      	bne.n	11eee <strcpy+0x12>
   11f86:	4770      	bx	lr
   11f88:	f811 2b01 	ldrb.w	r2, [r1], #1
   11f8c:	f80c 2b01 	strb.w	r2, [ip], #1
   11f90:	2a00      	cmp	r2, #0
   11f92:	d1f9      	bne.n	11f88 <strcpy+0xac>
   11f94:	4770      	bx	lr
   11f96:	bf00      	nop
	...

00011fa0 <memchr>:
   11fa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11fa4:	2a10      	cmp	r2, #16
   11fa6:	db2b      	blt.n	12000 <memchr+0x60>
   11fa8:	f010 0f07 	tst.w	r0, #7
   11fac:	d008      	beq.n	11fc0 <memchr+0x20>
   11fae:	f810 3b01 	ldrb.w	r3, [r0], #1
   11fb2:	3a01      	subs	r2, #1
   11fb4:	428b      	cmp	r3, r1
   11fb6:	d02d      	beq.n	12014 <memchr+0x74>
   11fb8:	f010 0f07 	tst.w	r0, #7
   11fbc:	b342      	cbz	r2, 12010 <memchr+0x70>
   11fbe:	d1f6      	bne.n	11fae <memchr+0xe>
   11fc0:	b4f0      	push	{r4, r5, r6, r7}
   11fc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11fc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   11fca:	f022 0407 	bic.w	r4, r2, #7
   11fce:	f07f 0700 	mvns.w	r7, #0
   11fd2:	2300      	movs	r3, #0
   11fd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   11fd8:	3c08      	subs	r4, #8
   11fda:	ea85 0501 	eor.w	r5, r5, r1
   11fde:	ea86 0601 	eor.w	r6, r6, r1
   11fe2:	fa85 f547 	uadd8	r5, r5, r7
   11fe6:	faa3 f587 	sel	r5, r3, r7
   11fea:	fa86 f647 	uadd8	r6, r6, r7
   11fee:	faa5 f687 	sel	r6, r5, r7
   11ff2:	b98e      	cbnz	r6, 12018 <memchr+0x78>
   11ff4:	d1ee      	bne.n	11fd4 <memchr+0x34>
   11ff6:	bcf0      	pop	{r4, r5, r6, r7}
   11ff8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   11ffc:	f002 0207 	and.w	r2, r2, #7
   12000:	b132      	cbz	r2, 12010 <memchr+0x70>
   12002:	f810 3b01 	ldrb.w	r3, [r0], #1
   12006:	3a01      	subs	r2, #1
   12008:	ea83 0301 	eor.w	r3, r3, r1
   1200c:	b113      	cbz	r3, 12014 <memchr+0x74>
   1200e:	d1f8      	bne.n	12002 <memchr+0x62>
   12010:	2000      	movs	r0, #0
   12012:	4770      	bx	lr
   12014:	3801      	subs	r0, #1
   12016:	4770      	bx	lr
   12018:	2d00      	cmp	r5, #0
   1201a:	bf06      	itte	eq
   1201c:	4635      	moveq	r5, r6
   1201e:	3803      	subeq	r0, #3
   12020:	3807      	subne	r0, #7
   12022:	f015 0f01 	tst.w	r5, #1
   12026:	d107      	bne.n	12038 <memchr+0x98>
   12028:	3001      	adds	r0, #1
   1202a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1202e:	bf02      	ittt	eq
   12030:	3001      	addeq	r0, #1
   12032:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12036:	3001      	addeq	r0, #1
   12038:	bcf0      	pop	{r4, r5, r6, r7}
   1203a:	3801      	subs	r0, #1
   1203c:	4770      	bx	lr
   1203e:	bf00      	nop

00012040 <strlen>:
   12040:	f890 f000 	pld	[r0]
   12044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12048:	f020 0107 	bic.w	r1, r0, #7
   1204c:	f06f 0c00 	mvn.w	ip, #0
   12050:	f010 0407 	ands.w	r4, r0, #7
   12054:	f891 f020 	pld	[r1, #32]
   12058:	f040 8049 	bne.w	120ee <strlen+0xae>
   1205c:	f04f 0400 	mov.w	r4, #0
   12060:	f06f 0007 	mvn.w	r0, #7
   12064:	e9d1 2300 	ldrd	r2, r3, [r1]
   12068:	f891 f040 	pld	[r1, #64]	; 0x40
   1206c:	f100 0008 	add.w	r0, r0, #8
   12070:	fa82 f24c 	uadd8	r2, r2, ip
   12074:	faa4 f28c 	sel	r2, r4, ip
   12078:	fa83 f34c 	uadd8	r3, r3, ip
   1207c:	faa2 f38c 	sel	r3, r2, ip
   12080:	bb4b      	cbnz	r3, 120d6 <strlen+0x96>
   12082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12086:	fa82 f24c 	uadd8	r2, r2, ip
   1208a:	f100 0008 	add.w	r0, r0, #8
   1208e:	faa4 f28c 	sel	r2, r4, ip
   12092:	fa83 f34c 	uadd8	r3, r3, ip
   12096:	faa2 f38c 	sel	r3, r2, ip
   1209a:	b9e3      	cbnz	r3, 120d6 <strlen+0x96>
   1209c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   120a0:	fa82 f24c 	uadd8	r2, r2, ip
   120a4:	f100 0008 	add.w	r0, r0, #8
   120a8:	faa4 f28c 	sel	r2, r4, ip
   120ac:	fa83 f34c 	uadd8	r3, r3, ip
   120b0:	faa2 f38c 	sel	r3, r2, ip
   120b4:	b97b      	cbnz	r3, 120d6 <strlen+0x96>
   120b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   120ba:	f101 0120 	add.w	r1, r1, #32
   120be:	fa82 f24c 	uadd8	r2, r2, ip
   120c2:	f100 0008 	add.w	r0, r0, #8
   120c6:	faa4 f28c 	sel	r2, r4, ip
   120ca:	fa83 f34c 	uadd8	r3, r3, ip
   120ce:	faa2 f38c 	sel	r3, r2, ip
   120d2:	2b00      	cmp	r3, #0
   120d4:	d0c6      	beq.n	12064 <strlen+0x24>
   120d6:	2a00      	cmp	r2, #0
   120d8:	bf04      	itt	eq
   120da:	3004      	addeq	r0, #4
   120dc:	461a      	moveq	r2, r3
   120de:	ba12      	rev	r2, r2
   120e0:	fab2 f282 	clz	r2, r2
   120e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   120e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   120ec:	4770      	bx	lr
   120ee:	e9d1 2300 	ldrd	r2, r3, [r1]
   120f2:	f004 0503 	and.w	r5, r4, #3
   120f6:	f1c4 0000 	rsb	r0, r4, #0
   120fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   120fe:	f014 0f04 	tst.w	r4, #4
   12102:	f891 f040 	pld	[r1, #64]	; 0x40
   12106:	fa0c f505 	lsl.w	r5, ip, r5
   1210a:	ea62 0205 	orn	r2, r2, r5
   1210e:	bf1c      	itt	ne
   12110:	ea63 0305 	ornne	r3, r3, r5
   12114:	4662      	movne	r2, ip
   12116:	f04f 0400 	mov.w	r4, #0
   1211a:	e7a9      	b.n	12070 <strlen+0x30>
   1211c:	0000      	movs	r0, r0
	...

00012120 <nan>:
   12120:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12128 <nan+0x8>
   12124:	4770      	bx	lr
   12126:	bf00      	nop
   12128:	00000000 	.word	0x00000000
   1212c:	7ff80000 	.word	0x7ff80000

00012130 <nanf>:
   12130:	ed9f 0a01 	vldr	s0, [pc, #4]	; 12138 <nanf+0x8>
   12134:	4770      	bx	lr
   12136:	bf00      	nop
   12138:	7fc00000 	.word	0x7fc00000

0001213c <__register_exitproc>:
   1213c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12140:	f8df a07c 	ldr.w	sl, [pc, #124]	; 121c0 <__register_exitproc+0x84>
   12144:	4606      	mov	r6, r0
   12146:	f8da 0000 	ldr.w	r0, [sl]
   1214a:	4698      	mov	r8, r3
   1214c:	460f      	mov	r7, r1
   1214e:	4691      	mov	r9, r2
   12150:	f7ff fd44 	bl	11bdc <__retarget_lock_acquire_recursive>
   12154:	4b18      	ldr	r3, [pc, #96]	; (121b8 <__register_exitproc+0x7c>)
   12156:	681c      	ldr	r4, [r3, #0]
   12158:	b324      	cbz	r4, 121a4 <__register_exitproc+0x68>
   1215a:	6865      	ldr	r5, [r4, #4]
   1215c:	2d1f      	cmp	r5, #31
   1215e:	dc24      	bgt.n	121aa <__register_exitproc+0x6e>
   12160:	b95e      	cbnz	r6, 1217a <__register_exitproc+0x3e>
   12162:	1c6b      	adds	r3, r5, #1
   12164:	3502      	adds	r5, #2
   12166:	f8da 0000 	ldr.w	r0, [sl]
   1216a:	6063      	str	r3, [r4, #4]
   1216c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   12170:	f7ff fd36 	bl	11be0 <__retarget_lock_release_recursive>
   12174:	2000      	movs	r0, #0
   12176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1217a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   1217e:	2301      	movs	r3, #1
   12180:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12184:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   12188:	40ab      	lsls	r3, r5
   1218a:	431a      	orrs	r2, r3
   1218c:	2e02      	cmp	r6, #2
   1218e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   12192:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12196:	d1e4      	bne.n	12162 <__register_exitproc+0x26>
   12198:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   1219c:	431a      	orrs	r2, r3
   1219e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   121a2:	e7de      	b.n	12162 <__register_exitproc+0x26>
   121a4:	4c05      	ldr	r4, [pc, #20]	; (121bc <__register_exitproc+0x80>)
   121a6:	601c      	str	r4, [r3, #0]
   121a8:	e7d7      	b.n	1215a <__register_exitproc+0x1e>
   121aa:	f8da 0000 	ldr.w	r0, [sl]
   121ae:	f7ff fd17 	bl	11be0 <__retarget_lock_release_recursive>
   121b2:	f04f 30ff 	mov.w	r0, #4294967295
   121b6:	e7de      	b.n	12176 <__register_exitproc+0x3a>
   121b8:	200285ac 	.word	0x200285ac
   121bc:	200285b0 	.word	0x200285b0
   121c0:	20008e90 	.word	0x20008e90

000121c4 <_malloc_trim_r>:
   121c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121c6:	4f24      	ldr	r7, [pc, #144]	; (12258 <_malloc_trim_r+0x94>)
   121c8:	460c      	mov	r4, r1
   121ca:	4606      	mov	r6, r0
   121cc:	f7fd fe8c 	bl	fee8 <__malloc_lock>
   121d0:	68bb      	ldr	r3, [r7, #8]
   121d2:	685d      	ldr	r5, [r3, #4]
   121d4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   121d8:	310f      	adds	r1, #15
   121da:	f025 0503 	bic.w	r5, r5, #3
   121de:	194b      	adds	r3, r1, r5
   121e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   121e4:	f023 030f 	bic.w	r3, r3, #15
   121e8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   121ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   121f0:	db07      	blt.n	12202 <_malloc_trim_r+0x3e>
   121f2:	2100      	movs	r1, #0
   121f4:	4630      	mov	r0, r6
   121f6:	f7ff fc9b 	bl	11b30 <_sbrk_r>
   121fa:	68bb      	ldr	r3, [r7, #8]
   121fc:	442b      	add	r3, r5
   121fe:	4298      	cmp	r0, r3
   12200:	d004      	beq.n	1220c <_malloc_trim_r+0x48>
   12202:	4630      	mov	r0, r6
   12204:	f7fd fe76 	bl	fef4 <__malloc_unlock>
   12208:	2000      	movs	r0, #0
   1220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1220c:	4261      	negs	r1, r4
   1220e:	4630      	mov	r0, r6
   12210:	f7ff fc8e 	bl	11b30 <_sbrk_r>
   12214:	3001      	adds	r0, #1
   12216:	d00d      	beq.n	12234 <_malloc_trim_r+0x70>
   12218:	4a10      	ldr	r2, [pc, #64]	; (1225c <_malloc_trim_r+0x98>)
   1221a:	68bb      	ldr	r3, [r7, #8]
   1221c:	1b2d      	subs	r5, r5, r4
   1221e:	f045 0501 	orr.w	r5, r5, #1
   12222:	605d      	str	r5, [r3, #4]
   12224:	6813      	ldr	r3, [r2, #0]
   12226:	4630      	mov	r0, r6
   12228:	1b1b      	subs	r3, r3, r4
   1222a:	6013      	str	r3, [r2, #0]
   1222c:	f7fd fe62 	bl	fef4 <__malloc_unlock>
   12230:	2001      	movs	r0, #1
   12232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12234:	2100      	movs	r1, #0
   12236:	4630      	mov	r0, r6
   12238:	f7ff fc7a 	bl	11b30 <_sbrk_r>
   1223c:	68ba      	ldr	r2, [r7, #8]
   1223e:	1a83      	subs	r3, r0, r2
   12240:	2b0f      	cmp	r3, #15
   12242:	ddde      	ble.n	12202 <_malloc_trim_r+0x3e>
   12244:	f043 0301 	orr.w	r3, r3, #1
   12248:	6053      	str	r3, [r2, #4]
   1224a:	4b05      	ldr	r3, [pc, #20]	; (12260 <_malloc_trim_r+0x9c>)
   1224c:	4903      	ldr	r1, [pc, #12]	; (1225c <_malloc_trim_r+0x98>)
   1224e:	681b      	ldr	r3, [r3, #0]
   12250:	1ac0      	subs	r0, r0, r3
   12252:	6008      	str	r0, [r1, #0]
   12254:	e7d5      	b.n	12202 <_malloc_trim_r+0x3e>
   12256:	bf00      	nop
   12258:	20009008 	.word	0x20009008
   1225c:	2002874c 	.word	0x2002874c
   12260:	20009410 	.word	0x20009410

00012264 <_free_r>:
   12264:	2900      	cmp	r1, #0
   12266:	d061      	beq.n	1232c <_free_r+0xc8>
   12268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1226a:	460c      	mov	r4, r1
   1226c:	4606      	mov	r6, r0
   1226e:	f7fd fe3b 	bl	fee8 <__malloc_lock>
   12272:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12276:	4f7b      	ldr	r7, [pc, #492]	; (12464 <_free_r+0x200>)
   12278:	f1a4 0508 	sub.w	r5, r4, #8
   1227c:	f022 0101 	bic.w	r1, r2, #1
   12280:	eb05 0c01 	add.w	ip, r5, r1
   12284:	68b8      	ldr	r0, [r7, #8]
   12286:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1228a:	4560      	cmp	r0, ip
   1228c:	f023 0303 	bic.w	r3, r3, #3
   12290:	f000 808b 	beq.w	123aa <_free_r+0x146>
   12294:	07d2      	lsls	r2, r2, #31
   12296:	f8cc 3004 	str.w	r3, [ip, #4]
   1229a:	d432      	bmi.n	12302 <_free_r+0x9e>
   1229c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   122a0:	1aad      	subs	r5, r5, r2
   122a2:	4411      	add	r1, r2
   122a4:	68aa      	ldr	r2, [r5, #8]
   122a6:	f107 0008 	add.w	r0, r7, #8
   122aa:	4282      	cmp	r2, r0
   122ac:	d06a      	beq.n	12384 <_free_r+0x120>
   122ae:	eb0c 0403 	add.w	r4, ip, r3
   122b2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   122b6:	68ec      	ldr	r4, [r5, #12]
   122b8:	60d4      	str	r4, [r2, #12]
   122ba:	f01e 0f01 	tst.w	lr, #1
   122be:	60a2      	str	r2, [r4, #8]
   122c0:	f000 8097 	beq.w	123f2 <_free_r+0x18e>
   122c4:	f041 0301 	orr.w	r3, r1, #1
   122c8:	606b      	str	r3, [r5, #4]
   122ca:	f8cc 1000 	str.w	r1, [ip]
   122ce:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   122d2:	d235      	bcs.n	12340 <_free_r+0xdc>
   122d4:	6878      	ldr	r0, [r7, #4]
   122d6:	08cb      	lsrs	r3, r1, #3
   122d8:	2201      	movs	r2, #1
   122da:	0949      	lsrs	r1, r1, #5
   122dc:	3301      	adds	r3, #1
   122de:	408a      	lsls	r2, r1
   122e0:	4302      	orrs	r2, r0
   122e2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   122e6:	607a      	str	r2, [r7, #4]
   122e8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   122ec:	3a08      	subs	r2, #8
   122ee:	e9c5 1202 	strd	r1, r2, [r5, #8]
   122f2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   122f6:	60cd      	str	r5, [r1, #12]
   122f8:	4630      	mov	r0, r6
   122fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   122fe:	f7fd bdf9 	b.w	fef4 <__malloc_unlock>
   12302:	eb0c 0203 	add.w	r2, ip, r3
   12306:	6852      	ldr	r2, [r2, #4]
   12308:	07d0      	lsls	r0, r2, #31
   1230a:	d410      	bmi.n	1232e <_free_r+0xca>
   1230c:	4419      	add	r1, r3
   1230e:	f107 0008 	add.w	r0, r7, #8
   12312:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12316:	4283      	cmp	r3, r0
   12318:	d073      	beq.n	12402 <_free_r+0x19e>
   1231a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   1231e:	60da      	str	r2, [r3, #12]
   12320:	6093      	str	r3, [r2, #8]
   12322:	f041 0301 	orr.w	r3, r1, #1
   12326:	606b      	str	r3, [r5, #4]
   12328:	5069      	str	r1, [r5, r1]
   1232a:	e7d0      	b.n	122ce <_free_r+0x6a>
   1232c:	4770      	bx	lr
   1232e:	f041 0301 	orr.w	r3, r1, #1
   12332:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12336:	f844 3c04 	str.w	r3, [r4, #-4]
   1233a:	f8cc 1000 	str.w	r1, [ip]
   1233e:	d3c9      	bcc.n	122d4 <_free_r+0x70>
   12340:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12344:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12348:	d248      	bcs.n	123dc <_free_r+0x178>
   1234a:	098b      	lsrs	r3, r1, #6
   1234c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12350:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12354:	00c3      	lsls	r3, r0, #3
   12356:	18f8      	adds	r0, r7, r3
   12358:	58fb      	ldr	r3, [r7, r3]
   1235a:	3808      	subs	r0, #8
   1235c:	4298      	cmp	r0, r3
   1235e:	d059      	beq.n	12414 <_free_r+0x1b0>
   12360:	685a      	ldr	r2, [r3, #4]
   12362:	f022 0203 	bic.w	r2, r2, #3
   12366:	428a      	cmp	r2, r1
   12368:	d902      	bls.n	12370 <_free_r+0x10c>
   1236a:	689b      	ldr	r3, [r3, #8]
   1236c:	4298      	cmp	r0, r3
   1236e:	d1f7      	bne.n	12360 <_free_r+0xfc>
   12370:	68d8      	ldr	r0, [r3, #12]
   12372:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12376:	6085      	str	r5, [r0, #8]
   12378:	60dd      	str	r5, [r3, #12]
   1237a:	4630      	mov	r0, r6
   1237c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12380:	f7fd bdb8 	b.w	fef4 <__malloc_unlock>
   12384:	eb0c 0203 	add.w	r2, ip, r3
   12388:	6852      	ldr	r2, [r2, #4]
   1238a:	07d2      	lsls	r2, r2, #31
   1238c:	d463      	bmi.n	12456 <_free_r+0x1f2>
   1238e:	440b      	add	r3, r1
   12390:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12394:	60ca      	str	r2, [r1, #12]
   12396:	6091      	str	r1, [r2, #8]
   12398:	f043 0201 	orr.w	r2, r3, #1
   1239c:	606a      	str	r2, [r5, #4]
   1239e:	4630      	mov	r0, r6
   123a0:	50eb      	str	r3, [r5, r3]
   123a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   123a6:	f7fd bda5 	b.w	fef4 <__malloc_unlock>
   123aa:	440b      	add	r3, r1
   123ac:	07d1      	lsls	r1, r2, #31
   123ae:	d407      	bmi.n	123c0 <_free_r+0x15c>
   123b0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   123b4:	1aad      	subs	r5, r5, r2
   123b6:	4413      	add	r3, r2
   123b8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   123bc:	60ca      	str	r2, [r1, #12]
   123be:	6091      	str	r1, [r2, #8]
   123c0:	f043 0201 	orr.w	r2, r3, #1
   123c4:	606a      	str	r2, [r5, #4]
   123c6:	4a28      	ldr	r2, [pc, #160]	; (12468 <_free_r+0x204>)
   123c8:	60bd      	str	r5, [r7, #8]
   123ca:	6812      	ldr	r2, [r2, #0]
   123cc:	429a      	cmp	r2, r3
   123ce:	d893      	bhi.n	122f8 <_free_r+0x94>
   123d0:	4b26      	ldr	r3, [pc, #152]	; (1246c <_free_r+0x208>)
   123d2:	4630      	mov	r0, r6
   123d4:	6819      	ldr	r1, [r3, #0]
   123d6:	f7ff fef5 	bl	121c4 <_malloc_trim_r>
   123da:	e78d      	b.n	122f8 <_free_r+0x94>
   123dc:	2b14      	cmp	r3, #20
   123de:	d90a      	bls.n	123f6 <_free_r+0x192>
   123e0:	2b54      	cmp	r3, #84	; 0x54
   123e2:	d81f      	bhi.n	12424 <_free_r+0x1c0>
   123e4:	0b0b      	lsrs	r3, r1, #12
   123e6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   123ea:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   123ee:	00c3      	lsls	r3, r0, #3
   123f0:	e7b1      	b.n	12356 <_free_r+0xf2>
   123f2:	4419      	add	r1, r3
   123f4:	e78d      	b.n	12312 <_free_r+0xae>
   123f6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   123fa:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   123fe:	00c3      	lsls	r3, r0, #3
   12400:	e7a9      	b.n	12356 <_free_r+0xf2>
   12402:	f041 0301 	orr.w	r3, r1, #1
   12406:	e9c7 5504 	strd	r5, r5, [r7, #16]
   1240a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   1240e:	606b      	str	r3, [r5, #4]
   12410:	5069      	str	r1, [r5, r1]
   12412:	e771      	b.n	122f8 <_free_r+0x94>
   12414:	6879      	ldr	r1, [r7, #4]
   12416:	1092      	asrs	r2, r2, #2
   12418:	2401      	movs	r4, #1
   1241a:	fa04 f202 	lsl.w	r2, r4, r2
   1241e:	430a      	orrs	r2, r1
   12420:	607a      	str	r2, [r7, #4]
   12422:	e7a6      	b.n	12372 <_free_r+0x10e>
   12424:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12428:	d806      	bhi.n	12438 <_free_r+0x1d4>
   1242a:	0bcb      	lsrs	r3, r1, #15
   1242c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12430:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12434:	00c3      	lsls	r3, r0, #3
   12436:	e78e      	b.n	12356 <_free_r+0xf2>
   12438:	f240 5254 	movw	r2, #1364	; 0x554
   1243c:	4293      	cmp	r3, r2
   1243e:	d806      	bhi.n	1244e <_free_r+0x1ea>
   12440:	0c8b      	lsrs	r3, r1, #18
   12442:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   12446:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1244a:	00c3      	lsls	r3, r0, #3
   1244c:	e783      	b.n	12356 <_free_r+0xf2>
   1244e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   12452:	227e      	movs	r2, #126	; 0x7e
   12454:	e77f      	b.n	12356 <_free_r+0xf2>
   12456:	f041 0301 	orr.w	r3, r1, #1
   1245a:	606b      	str	r3, [r5, #4]
   1245c:	f8cc 1000 	str.w	r1, [ip]
   12460:	e74a      	b.n	122f8 <_free_r+0x94>
   12462:	bf00      	nop
   12464:	20009008 	.word	0x20009008
   12468:	20009414 	.word	0x20009414
   1246c:	2002877c 	.word	0x2002877c

00012470 <rshift>:
   12470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12474:	6904      	ldr	r4, [r0, #16]
   12476:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1247a:	dd2f      	ble.n	124dc <rshift+0x6c>
   1247c:	f100 0e14 	add.w	lr, r0, #20
   12480:	114e      	asrs	r6, r1, #5
   12482:	f011 0c1f 	ands.w	ip, r1, #31
   12486:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1248a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1248e:	d02b      	beq.n	124e8 <rshift+0x78>
   12490:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   12494:	3304      	adds	r3, #4
   12496:	429d      	cmp	r5, r3
   12498:	fa21 f10c 	lsr.w	r1, r1, ip
   1249c:	f1cc 0820 	rsb	r8, ip, #32
   124a0:	d918      	bls.n	124d4 <rshift+0x64>
   124a2:	4677      	mov	r7, lr
   124a4:	681a      	ldr	r2, [r3, #0]
   124a6:	fa02 f208 	lsl.w	r2, r2, r8
   124aa:	430a      	orrs	r2, r1
   124ac:	f847 2b04 	str.w	r2, [r7], #4
   124b0:	f853 1b04 	ldr.w	r1, [r3], #4
   124b4:	429d      	cmp	r5, r3
   124b6:	fa21 f10c 	lsr.w	r1, r1, ip
   124ba:	d8f3      	bhi.n	124a4 <rshift+0x34>
   124bc:	1ba3      	subs	r3, r4, r6
   124be:	009b      	lsls	r3, r3, #2
   124c0:	3b05      	subs	r3, #5
   124c2:	089b      	lsrs	r3, r3, #2
   124c4:	3301      	adds	r3, #1
   124c6:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   124ca:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   124ce:	b1c9      	cbz	r1, 12504 <rshift+0x94>
   124d0:	3404      	adds	r4, #4
   124d2:	e017      	b.n	12504 <rshift+0x94>
   124d4:	6141      	str	r1, [r0, #20]
   124d6:	4674      	mov	r4, lr
   124d8:	2900      	cmp	r1, #0
   124da:	d1f9      	bne.n	124d0 <rshift+0x60>
   124dc:	2300      	movs	r3, #0
   124de:	6103      	str	r3, [r0, #16]
   124e0:	2300      	movs	r3, #0
   124e2:	6143      	str	r3, [r0, #20]
   124e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   124e8:	429d      	cmp	r5, r3
   124ea:	bf88      	it	hi
   124ec:	f100 0210 	addhi.w	r2, r0, #16
   124f0:	d9f4      	bls.n	124dc <rshift+0x6c>
   124f2:	f853 1b04 	ldr.w	r1, [r3], #4
   124f6:	f842 1f04 	str.w	r1, [r2, #4]!
   124fa:	429d      	cmp	r5, r3
   124fc:	d8f9      	bhi.n	124f2 <rshift+0x82>
   124fe:	1ba4      	subs	r4, r4, r6
   12500:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   12504:	eba4 030e 	sub.w	r3, r4, lr
   12508:	109b      	asrs	r3, r3, #2
   1250a:	4574      	cmp	r4, lr
   1250c:	6103      	str	r3, [r0, #16]
   1250e:	d0e7      	beq.n	124e0 <rshift+0x70>
   12510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012514 <__gethex>:
   12514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12518:	ed2d 8b02 	vpush	{d8}
   1251c:	680c      	ldr	r4, [r1, #0]
   1251e:	468b      	mov	fp, r1
   12520:	78a1      	ldrb	r1, [r4, #2]
   12522:	b085      	sub	sp, #20
   12524:	2930      	cmp	r1, #48	; 0x30
   12526:	ee08 0a10 	vmov	s16, r0
   1252a:	4692      	mov	sl, r2
   1252c:	9302      	str	r3, [sp, #8]
   1252e:	f040 81ce 	bne.w	128ce <__gethex+0x3ba>
   12532:	f06f 0001 	mvn.w	r0, #1
   12536:	1b00      	subs	r0, r0, r4
   12538:	1ce2      	adds	r2, r4, #3
   1253a:	1883      	adds	r3, r0, r2
   1253c:	4614      	mov	r4, r2
   1253e:	f812 1b01 	ldrb.w	r1, [r2], #1
   12542:	2930      	cmp	r1, #48	; 0x30
   12544:	d0f9      	beq.n	1253a <__gethex+0x26>
   12546:	f8df 8300 	ldr.w	r8, [pc, #768]	; 12848 <__gethex+0x334>
   1254a:	f818 2001 	ldrb.w	r2, [r8, r1]
   1254e:	2a00      	cmp	r2, #0
   12550:	f000 80e5 	beq.w	1271e <__gethex+0x20a>
   12554:	7822      	ldrb	r2, [r4, #0]
   12556:	2700      	movs	r7, #0
   12558:	f818 2002 	ldrb.w	r2, [r8, r2]
   1255c:	463d      	mov	r5, r7
   1255e:	4626      	mov	r6, r4
   12560:	b12a      	cbz	r2, 1256e <__gethex+0x5a>
   12562:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12566:	f818 2002 	ldrb.w	r2, [r8, r2]
   1256a:	2a00      	cmp	r2, #0
   1256c:	d1f9      	bne.n	12562 <__gethex+0x4e>
   1256e:	49b5      	ldr	r1, [pc, #724]	; (12844 <__gethex+0x330>)
   12570:	9301      	str	r3, [sp, #4]
   12572:	2201      	movs	r2, #1
   12574:	4630      	mov	r0, r6
   12576:	f7ff fa1f 	bl	119b8 <strncmp>
   1257a:	9b01      	ldr	r3, [sp, #4]
   1257c:	4681      	mov	r9, r0
   1257e:	2800      	cmp	r0, #0
   12580:	d04d      	beq.n	1261e <__gethex+0x10a>
   12582:	2d00      	cmp	r5, #0
   12584:	d14e      	bne.n	12624 <__gethex+0x110>
   12586:	7832      	ldrb	r2, [r6, #0]
   12588:	46a9      	mov	r9, r5
   1258a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1258e:	2a50      	cmp	r2, #80	; 0x50
   12590:	4635      	mov	r5, r6
   12592:	d050      	beq.n	12636 <__gethex+0x122>
   12594:	f8cb 6000 	str.w	r6, [fp]
   12598:	2f00      	cmp	r7, #0
   1259a:	d169      	bne.n	12670 <__gethex+0x15c>
   1259c:	1b2b      	subs	r3, r5, r4
   1259e:	3b01      	subs	r3, #1
   125a0:	2b07      	cmp	r3, #7
   125a2:	4639      	mov	r1, r7
   125a4:	dd04      	ble.n	125b0 <__gethex+0x9c>
   125a6:	105b      	asrs	r3, r3, #1
   125a8:	2b07      	cmp	r3, #7
   125aa:	f101 0101 	add.w	r1, r1, #1
   125ae:	dcfa      	bgt.n	125a6 <__gethex+0x92>
   125b0:	ee18 0a10 	vmov	r0, s16
   125b4:	f000 fb82 	bl	12cbc <_Balloc>
   125b8:	4683      	mov	fp, r0
   125ba:	2800      	cmp	r0, #0
   125bc:	f000 8266 	beq.w	12a8c <__gethex+0x578>
   125c0:	f100 0614 	add.w	r6, r0, #20
   125c4:	42ac      	cmp	r4, r5
   125c6:	9601      	str	r6, [sp, #4]
   125c8:	f080 81d2 	bcs.w	12970 <__gethex+0x45c>
   125cc:	2700      	movs	r7, #0
   125ce:	f8cd 900c 	str.w	r9, [sp, #12]
   125d2:	499c      	ldr	r1, [pc, #624]	; (12844 <__gethex+0x330>)
   125d4:	46a1      	mov	r9, r4
   125d6:	463c      	mov	r4, r7
   125d8:	e00c      	b.n	125f4 <__gethex+0xe0>
   125da:	2f20      	cmp	r7, #32
   125dc:	d019      	beq.n	12612 <__gethex+0xfe>
   125de:	4638      	mov	r0, r7
   125e0:	3704      	adds	r7, #4
   125e2:	782a      	ldrb	r2, [r5, #0]
   125e4:	f818 2002 	ldrb.w	r2, [r8, r2]
   125e8:	f002 020f 	and.w	r2, r2, #15
   125ec:	4082      	lsls	r2, r0
   125ee:	4314      	orrs	r4, r2
   125f0:	454d      	cmp	r5, r9
   125f2:	d047      	beq.n	12684 <__gethex+0x170>
   125f4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   125f8:	2a2e      	cmp	r2, #46	; 0x2e
   125fa:	d1ee      	bne.n	125da <__gethex+0xc6>
   125fc:	454d      	cmp	r5, r9
   125fe:	d3ec      	bcc.n	125da <__gethex+0xc6>
   12600:	2201      	movs	r2, #1
   12602:	4628      	mov	r0, r5
   12604:	f7ff f9d8 	bl	119b8 <strncmp>
   12608:	498e      	ldr	r1, [pc, #568]	; (12844 <__gethex+0x330>)
   1260a:	2800      	cmp	r0, #0
   1260c:	d0f0      	beq.n	125f0 <__gethex+0xdc>
   1260e:	2f20      	cmp	r7, #32
   12610:	d1e5      	bne.n	125de <__gethex+0xca>
   12612:	2000      	movs	r0, #0
   12614:	f846 4b04 	str.w	r4, [r6], #4
   12618:	2704      	movs	r7, #4
   1261a:	4604      	mov	r4, r0
   1261c:	e7e1      	b.n	125e2 <__gethex+0xce>
   1261e:	2d00      	cmp	r5, #0
   12620:	f000 8142 	beq.w	128a8 <__gethex+0x394>
   12624:	7832      	ldrb	r2, [r6, #0]
   12626:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1262a:	1bad      	subs	r5, r5, r6
   1262c:	2a50      	cmp	r2, #80	; 0x50
   1262e:	ea4f 0985 	mov.w	r9, r5, lsl #2
   12632:	4635      	mov	r5, r6
   12634:	d1ae      	bne.n	12594 <__gethex+0x80>
   12636:	786a      	ldrb	r2, [r5, #1]
   12638:	2a2b      	cmp	r2, #43	; 0x2b
   1263a:	f000 8125 	beq.w	12888 <__gethex+0x374>
   1263e:	2a2d      	cmp	r2, #45	; 0x2d
   12640:	f000 80a5 	beq.w	1278e <__gethex+0x27a>
   12644:	1c6e      	adds	r6, r5, #1
   12646:	2000      	movs	r0, #0
   12648:	f818 1002 	ldrb.w	r1, [r8, r2]
   1264c:	1e4a      	subs	r2, r1, #1
   1264e:	2a18      	cmp	r2, #24
   12650:	f200 809b 	bhi.w	1278a <__gethex+0x276>
   12654:	7872      	ldrb	r2, [r6, #1]
   12656:	f818 2002 	ldrb.w	r2, [r8, r2]
   1265a:	3910      	subs	r1, #16
   1265c:	3601      	adds	r6, #1
   1265e:	2a00      	cmp	r2, #0
   12660:	d15a      	bne.n	12718 <__gethex+0x204>
   12662:	b100      	cbz	r0, 12666 <__gethex+0x152>
   12664:	4249      	negs	r1, r1
   12666:	4489      	add	r9, r1
   12668:	f8cb 6000 	str.w	r6, [fp]
   1266c:	2f00      	cmp	r7, #0
   1266e:	d095      	beq.n	1259c <__gethex+0x88>
   12670:	2b00      	cmp	r3, #0
   12672:	bf14      	ite	ne
   12674:	2500      	movne	r5, #0
   12676:	2506      	moveq	r5, #6
   12678:	4628      	mov	r0, r5
   1267a:	b005      	add	sp, #20
   1267c:	ecbd 8b02 	vpop	{d8}
   12680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12684:	f8dd 900c 	ldr.w	r9, [sp, #12]
   12688:	4623      	mov	r3, r4
   1268a:	f846 3b04 	str.w	r3, [r6], #4
   1268e:	4618      	mov	r0, r3
   12690:	9b01      	ldr	r3, [sp, #4]
   12692:	1af6      	subs	r6, r6, r3
   12694:	10b6      	asrs	r6, r6, #2
   12696:	f8cb 6010 	str.w	r6, [fp, #16]
   1269a:	f000 fbe9 	bl	12e70 <__hi0bits>
   1269e:	0176      	lsls	r6, r6, #5
   126a0:	f8da 4000 	ldr.w	r4, [sl]
   126a4:	1a30      	subs	r0, r6, r0
   126a6:	42a0      	cmp	r0, r4
   126a8:	dc75      	bgt.n	12796 <__gethex+0x282>
   126aa:	f2c0 80ef 	blt.w	1288c <__gethex+0x378>
   126ae:	2700      	movs	r7, #0
   126b0:	f8da 3008 	ldr.w	r3, [sl, #8]
   126b4:	454b      	cmp	r3, r9
   126b6:	f2c0 8151 	blt.w	1295c <__gethex+0x448>
   126ba:	f8da 3004 	ldr.w	r3, [sl, #4]
   126be:	454b      	cmp	r3, r9
   126c0:	dd4a      	ble.n	12758 <__gethex+0x244>
   126c2:	eba3 0909 	sub.w	r9, r3, r9
   126c6:	454c      	cmp	r4, r9
   126c8:	f300 8082 	bgt.w	127d0 <__gethex+0x2bc>
   126cc:	f8da 200c 	ldr.w	r2, [sl, #12]
   126d0:	2a02      	cmp	r2, #2
   126d2:	f000 8165 	beq.w	129a0 <__gethex+0x48c>
   126d6:	2a03      	cmp	r2, #3
   126d8:	f000 8181 	beq.w	129de <__gethex+0x4ca>
   126dc:	2a01      	cmp	r2, #1
   126de:	f000 816f 	beq.w	129c0 <__gethex+0x4ac>
   126e2:	ee18 0a10 	vmov	r0, s16
   126e6:	4659      	mov	r1, fp
   126e8:	f000 fb0e 	bl	12d08 <_Bfree>
   126ec:	2550      	movs	r5, #80	; 0x50
   126ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
   126f0:	2300      	movs	r3, #0
   126f2:	4628      	mov	r0, r5
   126f4:	6013      	str	r3, [r2, #0]
   126f6:	b005      	add	sp, #20
   126f8:	ecbd 8b02 	vpop	{d8}
   126fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12700:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   12704:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   12708:	f1a2 0110 	sub.w	r1, r2, #16
   1270c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   12710:	f818 2002 	ldrb.w	r2, [r8, r2]
   12714:	2a00      	cmp	r2, #0
   12716:	d0a4      	beq.n	12662 <__gethex+0x14e>
   12718:	2a19      	cmp	r2, #25
   1271a:	ddf1      	ble.n	12700 <__gethex+0x1ec>
   1271c:	e7a1      	b.n	12662 <__gethex+0x14e>
   1271e:	4949      	ldr	r1, [pc, #292]	; (12844 <__gethex+0x330>)
   12720:	9301      	str	r3, [sp, #4]
   12722:	2201      	movs	r2, #1
   12724:	4620      	mov	r0, r4
   12726:	f7ff f947 	bl	119b8 <strncmp>
   1272a:	9b01      	ldr	r3, [sp, #4]
   1272c:	2800      	cmp	r0, #0
   1272e:	d16d      	bne.n	1280c <__gethex+0x2f8>
   12730:	7861      	ldrb	r1, [r4, #1]
   12732:	f818 2001 	ldrb.w	r2, [r8, r1]
   12736:	1c65      	adds	r5, r4, #1
   12738:	2a00      	cmp	r2, #0
   1273a:	d069      	beq.n	12810 <__gethex+0x2fc>
   1273c:	2930      	cmp	r1, #48	; 0x30
   1273e:	462c      	mov	r4, r5
   12740:	d105      	bne.n	1274e <__gethex+0x23a>
   12742:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12746:	2b30      	cmp	r3, #48	; 0x30
   12748:	d0fb      	beq.n	12742 <__gethex+0x22e>
   1274a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1274e:	fab2 f782 	clz	r7, r2
   12752:	097f      	lsrs	r7, r7, #5
   12754:	2301      	movs	r3, #1
   12756:	e702      	b.n	1255e <__gethex+0x4a>
   12758:	2501      	movs	r5, #1
   1275a:	b157      	cbz	r7, 12772 <__gethex+0x25e>
   1275c:	f8da 300c 	ldr.w	r3, [sl, #12]
   12760:	2b02      	cmp	r3, #2
   12762:	d05d      	beq.n	12820 <__gethex+0x30c>
   12764:	2b03      	cmp	r3, #3
   12766:	d05f      	beq.n	12828 <__gethex+0x314>
   12768:	2b01      	cmp	r3, #1
   1276a:	f000 8084 	beq.w	12876 <__gethex+0x362>
   1276e:	f045 0510 	orr.w	r5, r5, #16
   12772:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12774:	f8c3 b000 	str.w	fp, [r3]
   12778:	9b02      	ldr	r3, [sp, #8]
   1277a:	4628      	mov	r0, r5
   1277c:	f8c3 9000 	str.w	r9, [r3]
   12780:	b005      	add	sp, #20
   12782:	ecbd 8b02 	vpop	{d8}
   12786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1278a:	462e      	mov	r6, r5
   1278c:	e702      	b.n	12594 <__gethex+0x80>
   1278e:	2001      	movs	r0, #1
   12790:	78aa      	ldrb	r2, [r5, #2]
   12792:	1cae      	adds	r6, r5, #2
   12794:	e758      	b.n	12648 <__gethex+0x134>
   12796:	1b06      	subs	r6, r0, r4
   12798:	4631      	mov	r1, r6
   1279a:	4658      	mov	r0, fp
   1279c:	f000 ff96 	bl	136cc <__any_on>
   127a0:	4607      	mov	r7, r0
   127a2:	b178      	cbz	r0, 127c4 <__gethex+0x2b0>
   127a4:	1e72      	subs	r2, r6, #1
   127a6:	1153      	asrs	r3, r2, #5
   127a8:	9901      	ldr	r1, [sp, #4]
   127aa:	2701      	movs	r7, #1
   127ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   127b0:	f002 031f 	and.w	r3, r2, #31
   127b4:	fa07 f303 	lsl.w	r3, r7, r3
   127b8:	420b      	tst	r3, r1
   127ba:	d003      	beq.n	127c4 <__gethex+0x2b0>
   127bc:	42ba      	cmp	r2, r7
   127be:	f300 80e2 	bgt.w	12986 <__gethex+0x472>
   127c2:	2702      	movs	r7, #2
   127c4:	4631      	mov	r1, r6
   127c6:	4658      	mov	r0, fp
   127c8:	44b1      	add	r9, r6
   127ca:	f7ff fe51 	bl	12470 <rshift>
   127ce:	e76f      	b.n	126b0 <__gethex+0x19c>
   127d0:	f109 35ff 	add.w	r5, r9, #4294967295
   127d4:	2f00      	cmp	r7, #0
   127d6:	f040 80ce 	bne.w	12976 <__gethex+0x462>
   127da:	2d00      	cmp	r5, #0
   127dc:	f040 80cd 	bne.w	1297a <__gethex+0x466>
   127e0:	116b      	asrs	r3, r5, #5
   127e2:	9a01      	ldr	r2, [sp, #4]
   127e4:	f005 051f 	and.w	r5, r5, #31
   127e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   127ec:	2301      	movs	r3, #1
   127ee:	40ab      	lsls	r3, r5
   127f0:	4213      	tst	r3, r2
   127f2:	4649      	mov	r1, r9
   127f4:	4658      	mov	r0, fp
   127f6:	bf18      	it	ne
   127f8:	f047 0702 	orrne.w	r7, r7, #2
   127fc:	eba4 0409 	sub.w	r4, r4, r9
   12800:	f7ff fe36 	bl	12470 <rshift>
   12804:	2502      	movs	r5, #2
   12806:	f8da 9004 	ldr.w	r9, [sl, #4]
   1280a:	e7a6      	b.n	1275a <__gethex+0x246>
   1280c:	7821      	ldrb	r1, [r4, #0]
   1280e:	4625      	mov	r5, r4
   12810:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   12814:	2950      	cmp	r1, #80	; 0x50
   12816:	f000 80bf 	beq.w	12998 <__gethex+0x484>
   1281a:	f8cb 5000 	str.w	r5, [fp]
   1281e:	e727      	b.n	12670 <__gethex+0x15c>
   12820:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12822:	f1c3 0301 	rsb	r3, r3, #1
   12826:	9311      	str	r3, [sp, #68]	; 0x44
   12828:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1282a:	2b00      	cmp	r3, #0
   1282c:	d09f      	beq.n	1276e <__gethex+0x25a>
   1282e:	f8db 7010 	ldr.w	r7, [fp, #16]
   12832:	f8dd 8004 	ldr.w	r8, [sp, #4]
   12836:	00ba      	lsls	r2, r7, #2
   12838:	4643      	mov	r3, r8
   1283a:	9201      	str	r2, [sp, #4]
   1283c:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   12840:	2100      	movs	r1, #0
   12842:	e007      	b.n	12854 <__gethex+0x340>
   12844:	20008228 	.word	0x20008228
   12848:	20000e1c 	.word	0x20000e1c
   1284c:	4298      	cmp	r0, r3
   1284e:	f843 1c04 	str.w	r1, [r3, #-4]
   12852:	d93f      	bls.n	128d4 <__gethex+0x3c0>
   12854:	461e      	mov	r6, r3
   12856:	f853 2b04 	ldr.w	r2, [r3], #4
   1285a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1285e:	d0f5      	beq.n	1284c <__gethex+0x338>
   12860:	3201      	adds	r2, #1
   12862:	2d02      	cmp	r5, #2
   12864:	6032      	str	r2, [r6, #0]
   12866:	f000 80bf 	beq.w	129e8 <__gethex+0x4d4>
   1286a:	f014 041f 	ands.w	r4, r4, #31
   1286e:	f040 80e7 	bne.w	12a40 <__gethex+0x52c>
   12872:	2521      	movs	r5, #33	; 0x21
   12874:	e77d      	b.n	12772 <__gethex+0x25e>
   12876:	07ba      	lsls	r2, r7, #30
   12878:	f57f af79 	bpl.w	1276e <__gethex+0x25a>
   1287c:	9b01      	ldr	r3, [sp, #4]
   1287e:	681b      	ldr	r3, [r3, #0]
   12880:	431f      	orrs	r7, r3
   12882:	07fb      	lsls	r3, r7, #31
   12884:	d4d3      	bmi.n	1282e <__gethex+0x31a>
   12886:	e772      	b.n	1276e <__gethex+0x25a>
   12888:	2000      	movs	r0, #0
   1288a:	e781      	b.n	12790 <__gethex+0x27c>
   1288c:	1a22      	subs	r2, r4, r0
   1288e:	4659      	mov	r1, fp
   12890:	ee18 0a10 	vmov	r0, s16
   12894:	eba9 0902 	sub.w	r9, r9, r2
   12898:	f000 fc76 	bl	13188 <__lshift>
   1289c:	f100 0314 	add.w	r3, r0, #20
   128a0:	4683      	mov	fp, r0
   128a2:	9301      	str	r3, [sp, #4]
   128a4:	2700      	movs	r7, #0
   128a6:	e703      	b.n	126b0 <__gethex+0x19c>
   128a8:	7872      	ldrb	r2, [r6, #1]
   128aa:	f818 0002 	ldrb.w	r0, [r8, r2]
   128ae:	1c71      	adds	r1, r6, #1
   128b0:	2800      	cmp	r0, #0
   128b2:	f000 80a0 	beq.w	129f6 <__gethex+0x4e2>
   128b6:	460d      	mov	r5, r1
   128b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   128bc:	f818 0002 	ldrb.w	r0, [r8, r2]
   128c0:	2800      	cmp	r0, #0
   128c2:	d1f8      	bne.n	128b6 <__gethex+0x3a2>
   128c4:	1b75      	subs	r5, r6, r5
   128c6:	ea4f 0985 	mov.w	r9, r5, lsl #2
   128ca:	460e      	mov	r6, r1
   128cc:	e65d      	b.n	1258a <__gethex+0x76>
   128ce:	3402      	adds	r4, #2
   128d0:	2300      	movs	r3, #0
   128d2:	e638      	b.n	12546 <__gethex+0x32>
   128d4:	f8db 3008 	ldr.w	r3, [fp, #8]
   128d8:	429f      	cmp	r7, r3
   128da:	f280 808e 	bge.w	129fa <__gethex+0x4e6>
   128de:	463b      	mov	r3, r7
   128e0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   128e4:	2101      	movs	r1, #1
   128e6:	3301      	adds	r3, #1
   128e8:	2d02      	cmp	r5, #2
   128ea:	f8cb 3010 	str.w	r3, [fp, #16]
   128ee:	6151      	str	r1, [r2, #20]
   128f0:	d07a      	beq.n	129e8 <__gethex+0x4d4>
   128f2:	429f      	cmp	r7, r3
   128f4:	dab9      	bge.n	1286a <__gethex+0x356>
   128f6:	2b00      	cmp	r3, #0
   128f8:	f340 809b 	ble.w	12a32 <__gethex+0x51e>
   128fc:	f8db 2014 	ldr.w	r2, [fp, #20]
   12900:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   12904:	f10b 0018 	add.w	r0, fp, #24
   12908:	4283      	cmp	r3, r0
   1290a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   1290e:	f240 80b1 	bls.w	12a74 <__gethex+0x560>
   12912:	4644      	mov	r4, r8
   12914:	6801      	ldr	r1, [r0, #0]
   12916:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   1291a:	f844 2b04 	str.w	r2, [r4], #4
   1291e:	f850 2b04 	ldr.w	r2, [r0], #4
   12922:	4283      	cmp	r3, r0
   12924:	ea4f 0252 	mov.w	r2, r2, lsr #1
   12928:	d8f4      	bhi.n	12914 <__gethex+0x400>
   1292a:	eba3 030b 	sub.w	r3, r3, fp
   1292e:	3b19      	subs	r3, #25
   12930:	089b      	lsrs	r3, r3, #2
   12932:	3301      	adds	r3, #1
   12934:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   12938:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   1293c:	2a00      	cmp	r2, #0
   1293e:	f040 809d 	bne.w	12a7c <__gethex+0x568>
   12942:	eba3 0208 	sub.w	r2, r3, r8
   12946:	1092      	asrs	r2, r2, #2
   12948:	4543      	cmp	r3, r8
   1294a:	f8cb 2010 	str.w	r2, [fp, #16]
   1294e:	d073      	beq.n	12a38 <__gethex+0x524>
   12950:	f8da 3008 	ldr.w	r3, [sl, #8]
   12954:	f109 0901 	add.w	r9, r9, #1
   12958:	454b      	cmp	r3, r9
   1295a:	da8a      	bge.n	12872 <__gethex+0x35e>
   1295c:	ee18 0a10 	vmov	r0, s16
   12960:	4659      	mov	r1, fp
   12962:	f000 f9d1 	bl	12d08 <_Bfree>
   12966:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12968:	2300      	movs	r3, #0
   1296a:	6013      	str	r3, [r2, #0]
   1296c:	25a3      	movs	r5, #163	; 0xa3
   1296e:	e683      	b.n	12678 <__gethex+0x164>
   12970:	9e01      	ldr	r6, [sp, #4]
   12972:	2300      	movs	r3, #0
   12974:	e689      	b.n	1268a <__gethex+0x176>
   12976:	2701      	movs	r7, #1
   12978:	e732      	b.n	127e0 <__gethex+0x2cc>
   1297a:	4629      	mov	r1, r5
   1297c:	4658      	mov	r0, fp
   1297e:	f000 fea5 	bl	136cc <__any_on>
   12982:	4607      	mov	r7, r0
   12984:	e72c      	b.n	127e0 <__gethex+0x2cc>
   12986:	1eb1      	subs	r1, r6, #2
   12988:	4658      	mov	r0, fp
   1298a:	f000 fe9f 	bl	136cc <__any_on>
   1298e:	2800      	cmp	r0, #0
   12990:	f43f af17 	beq.w	127c2 <__gethex+0x2ae>
   12994:	2703      	movs	r7, #3
   12996:	e715      	b.n	127c4 <__gethex+0x2b0>
   12998:	f04f 0900 	mov.w	r9, #0
   1299c:	2701      	movs	r7, #1
   1299e:	e64a      	b.n	12636 <__gethex+0x122>
   129a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   129a2:	2a00      	cmp	r2, #0
   129a4:	f47f ae9d 	bne.w	126e2 <__gethex+0x1ce>
   129a8:	9902      	ldr	r1, [sp, #8]
   129aa:	600b      	str	r3, [r1, #0]
   129ac:	9b01      	ldr	r3, [sp, #4]
   129ae:	2201      	movs	r2, #1
   129b0:	f8cb 2010 	str.w	r2, [fp, #16]
   129b4:	601a      	str	r2, [r3, #0]
   129b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   129b8:	2562      	movs	r5, #98	; 0x62
   129ba:	f8c3 b000 	str.w	fp, [r3]
   129be:	e65b      	b.n	12678 <__gethex+0x164>
   129c0:	454c      	cmp	r4, r9
   129c2:	f47f ae8e 	bne.w	126e2 <__gethex+0x1ce>
   129c6:	2c01      	cmp	r4, #1
   129c8:	d0ee      	beq.n	129a8 <__gethex+0x494>
   129ca:	1e61      	subs	r1, r4, #1
   129cc:	4658      	mov	r0, fp
   129ce:	f000 fe7d 	bl	136cc <__any_on>
   129d2:	2800      	cmp	r0, #0
   129d4:	f43f ae85 	beq.w	126e2 <__gethex+0x1ce>
   129d8:	f8da 3004 	ldr.w	r3, [sl, #4]
   129dc:	e7e4      	b.n	129a8 <__gethex+0x494>
   129de:	9a11      	ldr	r2, [sp, #68]	; 0x44
   129e0:	2a00      	cmp	r2, #0
   129e2:	f43f ae7e 	beq.w	126e2 <__gethex+0x1ce>
   129e6:	e7df      	b.n	129a8 <__gethex+0x494>
   129e8:	f8da 3000 	ldr.w	r3, [sl]
   129ec:	3b01      	subs	r3, #1
   129ee:	42a3      	cmp	r3, r4
   129f0:	d034      	beq.n	12a5c <__gethex+0x548>
   129f2:	2522      	movs	r5, #34	; 0x22
   129f4:	e6bd      	b.n	12772 <__gethex+0x25e>
   129f6:	460e      	mov	r6, r1
   129f8:	e5c7      	b.n	1258a <__gethex+0x76>
   129fa:	f8db 1004 	ldr.w	r1, [fp, #4]
   129fe:	ee18 0a10 	vmov	r0, s16
   12a02:	3101      	adds	r1, #1
   12a04:	f000 f95a 	bl	12cbc <_Balloc>
   12a08:	4606      	mov	r6, r0
   12a0a:	b3c8      	cbz	r0, 12a80 <__gethex+0x56c>
   12a0c:	f8db 3010 	ldr.w	r3, [fp, #16]
   12a10:	3302      	adds	r3, #2
   12a12:	009a      	lsls	r2, r3, #2
   12a14:	f10b 010c 	add.w	r1, fp, #12
   12a18:	300c      	adds	r0, #12
   12a1a:	f7fa fe97 	bl	d74c <memcpy>
   12a1e:	4659      	mov	r1, fp
   12a20:	ee18 0a10 	vmov	r0, s16
   12a24:	f000 f970 	bl	12d08 <_Bfree>
   12a28:	f106 0814 	add.w	r8, r6, #20
   12a2c:	6933      	ldr	r3, [r6, #16]
   12a2e:	46b3      	mov	fp, r6
   12a30:	e756      	b.n	128e0 <__gethex+0x3cc>
   12a32:	2300      	movs	r3, #0
   12a34:	f8cb 3010 	str.w	r3, [fp, #16]
   12a38:	2300      	movs	r3, #0
   12a3a:	f8cb 3014 	str.w	r3, [fp, #20]
   12a3e:	e787      	b.n	12950 <__gethex+0x43c>
   12a40:	9b01      	ldr	r3, [sp, #4]
   12a42:	4443      	add	r3, r8
   12a44:	f1c4 0420 	rsb	r4, r4, #32
   12a48:	f853 0c04 	ldr.w	r0, [r3, #-4]
   12a4c:	f000 fa10 	bl	12e70 <__hi0bits>
   12a50:	42a0      	cmp	r0, r4
   12a52:	f6bf af0e 	bge.w	12872 <__gethex+0x35e>
   12a56:	f8db 3010 	ldr.w	r3, [fp, #16]
   12a5a:	e74c      	b.n	128f6 <__gethex+0x3e2>
   12a5c:	1163      	asrs	r3, r4, #5
   12a5e:	f004 041f 	and.w	r4, r4, #31
   12a62:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   12a66:	2301      	movs	r3, #1
   12a68:	40a3      	lsls	r3, r4
   12a6a:	4213      	tst	r3, r2
   12a6c:	bf0c      	ite	eq
   12a6e:	2522      	moveq	r5, #34	; 0x22
   12a70:	2521      	movne	r5, #33	; 0x21
   12a72:	e67e      	b.n	12772 <__gethex+0x25e>
   12a74:	f8c8 2000 	str.w	r2, [r8]
   12a78:	4643      	mov	r3, r8
   12a7a:	b16a      	cbz	r2, 12a98 <__gethex+0x584>
   12a7c:	3304      	adds	r3, #4
   12a7e:	e760      	b.n	12942 <__gethex+0x42e>
   12a80:	4b07      	ldr	r3, [pc, #28]	; (12aa0 <__gethex+0x58c>)
   12a82:	4808      	ldr	r0, [pc, #32]	; (12aa4 <__gethex+0x590>)
   12a84:	4632      	mov	r2, r6
   12a86:	2184      	movs	r1, #132	; 0x84
   12a88:	f004 fa5a 	bl	16f40 <__assert_func>
   12a8c:	4b04      	ldr	r3, [pc, #16]	; (12aa0 <__gethex+0x58c>)
   12a8e:	4805      	ldr	r0, [pc, #20]	; (12aa4 <__gethex+0x590>)
   12a90:	465a      	mov	r2, fp
   12a92:	21e4      	movs	r1, #228	; 0xe4
   12a94:	f004 fa54 	bl	16f40 <__assert_func>
   12a98:	f8cb 2010 	str.w	r2, [fp, #16]
   12a9c:	e7cc      	b.n	12a38 <__gethex+0x524>
   12a9e:	bf00      	nop
   12aa0:	20000da4 	.word	0x20000da4
   12aa4:	20000db8 	.word	0x20000db8

00012aa8 <__match>:
   12aa8:	b410      	push	{r4}
   12aaa:	6804      	ldr	r4, [r0, #0]
   12aac:	e009      	b.n	12ac2 <__match+0x1a>
   12aae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   12ab2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   12ab6:	f1bc 0f19 	cmp.w	ip, #25
   12aba:	bf98      	it	ls
   12abc:	3320      	addls	r3, #32
   12abe:	4293      	cmp	r3, r2
   12ac0:	d109      	bne.n	12ad6 <__match+0x2e>
   12ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
   12ac6:	2a00      	cmp	r2, #0
   12ac8:	d1f1      	bne.n	12aae <__match+0x6>
   12aca:	3401      	adds	r4, #1
   12acc:	6004      	str	r4, [r0, #0]
   12ace:	2001      	movs	r0, #1
   12ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
   12ad4:	4770      	bx	lr
   12ad6:	2000      	movs	r0, #0
   12ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
   12adc:	4770      	bx	lr
   12ade:	bf00      	nop

00012ae0 <__hexnan>:
   12ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae4:	6809      	ldr	r1, [r1, #0]
   12ae6:	b085      	sub	sp, #20
   12ae8:	114b      	asrs	r3, r1, #5
   12aea:	f011 011f 	ands.w	r1, r1, #31
   12aee:	9002      	str	r0, [sp, #8]
   12af0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12af4:	9103      	str	r1, [sp, #12]
   12af6:	f040 808f 	bne.w	12c18 <__hexnan+0x138>
   12afa:	1f1d      	subs	r5, r3, #4
   12afc:	9301      	str	r3, [sp, #4]
   12afe:	9b02      	ldr	r3, [sp, #8]
   12b00:	9901      	ldr	r1, [sp, #4]
   12b02:	681c      	ldr	r4, [r3, #0]
   12b04:	2300      	movs	r3, #0
   12b06:	f841 3c04 	str.w	r3, [r1, #-4]
   12b0a:	7861      	ldrb	r1, [r4, #1]
   12b0c:	3401      	adds	r4, #1
   12b0e:	2900      	cmp	r1, #0
   12b10:	f000 8098 	beq.w	12c44 <__hexnan+0x164>
   12b14:	f8df 9174 	ldr.w	r9, [pc, #372]	; 12c8c <__hexnan+0x1ac>
   12b18:	46a8      	mov	r8, r5
   12b1a:	46ac      	mov	ip, r5
   12b1c:	469a      	mov	sl, r3
   12b1e:	461e      	mov	r6, r3
   12b20:	e00e      	b.n	12b40 <__hexnan+0x60>
   12b22:	2920      	cmp	r1, #32
   12b24:	f200 808c 	bhi.w	12c40 <__hexnan+0x160>
   12b28:	4556      	cmp	r6, sl
   12b2a:	dd06      	ble.n	12b3a <__hexnan+0x5a>
   12b2c:	45c4      	cmp	ip, r8
   12b2e:	d201      	bcs.n	12b34 <__hexnan+0x54>
   12b30:	2b07      	cmp	r3, #7
   12b32:	dd5b      	ble.n	12bec <__hexnan+0x10c>
   12b34:	4562      	cmp	r2, ip
   12b36:	d351      	bcc.n	12bdc <__hexnan+0xfc>
   12b38:	2308      	movs	r3, #8
   12b3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   12b3e:	b1a1      	cbz	r1, 12b6a <__hexnan+0x8a>
   12b40:	f819 0001 	ldrb.w	r0, [r9, r1]
   12b44:	2800      	cmp	r0, #0
   12b46:	d0ec      	beq.n	12b22 <__hexnan+0x42>
   12b48:	3301      	adds	r3, #1
   12b4a:	2b08      	cmp	r3, #8
   12b4c:	f106 0601 	add.w	r6, r6, #1
   12b50:	dc3a      	bgt.n	12bc8 <__hexnan+0xe8>
   12b52:	f8dc 1000 	ldr.w	r1, [ip]
   12b56:	0109      	lsls	r1, r1, #4
   12b58:	f000 000f 	and.w	r0, r0, #15
   12b5c:	4308      	orrs	r0, r1
   12b5e:	f8cc 0000 	str.w	r0, [ip]
   12b62:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   12b66:	2900      	cmp	r1, #0
   12b68:	d1ea      	bne.n	12b40 <__hexnan+0x60>
   12b6a:	2e00      	cmp	r6, #0
   12b6c:	d06a      	beq.n	12c44 <__hexnan+0x164>
   12b6e:	45c4      	cmp	ip, r8
   12b70:	d201      	bcs.n	12b76 <__hexnan+0x96>
   12b72:	2b07      	cmp	r3, #7
   12b74:	dd74      	ble.n	12c60 <__hexnan+0x180>
   12b76:	4562      	cmp	r2, ip
   12b78:	d252      	bcs.n	12c20 <__hexnan+0x140>
   12b7a:	1f11      	subs	r1, r2, #4
   12b7c:	4663      	mov	r3, ip
   12b7e:	f853 0b04 	ldr.w	r0, [r3], #4
   12b82:	f841 0f04 	str.w	r0, [r1, #4]!
   12b86:	42ab      	cmp	r3, r5
   12b88:	d9f9      	bls.n	12b7e <__hexnan+0x9e>
   12b8a:	eba5 030c 	sub.w	r3, r5, ip
   12b8e:	f023 0303 	bic.w	r3, r3, #3
   12b92:	1c69      	adds	r1, r5, #1
   12b94:	3304      	adds	r3, #4
   12b96:	f10c 0c01 	add.w	ip, ip, #1
   12b9a:	4561      	cmp	r1, ip
   12b9c:	bf38      	it	cc
   12b9e:	2304      	movcc	r3, #4
   12ba0:	4413      	add	r3, r2
   12ba2:	2100      	movs	r1, #0
   12ba4:	f843 1b04 	str.w	r1, [r3], #4
   12ba8:	42ab      	cmp	r3, r5
   12baa:	d9fb      	bls.n	12ba4 <__hexnan+0xc4>
   12bac:	9b01      	ldr	r3, [sp, #4]
   12bae:	f853 3c04 	ldr.w	r3, [r3, #-4]
   12bb2:	b92b      	cbnz	r3, 12bc0 <__hexnan+0xe0>
   12bb4:	42aa      	cmp	r2, r5
   12bb6:	d049      	beq.n	12c4c <__hexnan+0x16c>
   12bb8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   12bbc:	2b00      	cmp	r3, #0
   12bbe:	d0f9      	beq.n	12bb4 <__hexnan+0xd4>
   12bc0:	2005      	movs	r0, #5
   12bc2:	b005      	add	sp, #20
   12bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bc8:	4562      	cmp	r2, ip
   12bca:	d2b6      	bcs.n	12b3a <__hexnan+0x5a>
   12bcc:	2300      	movs	r3, #0
   12bce:	f84c 3c04 	str.w	r3, [ip, #-4]
   12bd2:	4619      	mov	r1, r3
   12bd4:	f1ac 0c04 	sub.w	ip, ip, #4
   12bd8:	2301      	movs	r3, #1
   12bda:	e7bd      	b.n	12b58 <__hexnan+0x78>
   12bdc:	2300      	movs	r3, #0
   12bde:	f1ac 0804 	sub.w	r8, ip, #4
   12be2:	f84c 3c04 	str.w	r3, [ip, #-4]
   12be6:	46b2      	mov	sl, r6
   12be8:	46c4      	mov	ip, r8
   12bea:	e7a6      	b.n	12b3a <__hexnan+0x5a>
   12bec:	f1c3 0108 	rsb	r1, r3, #8
   12bf0:	f8dc 3000 	ldr.w	r3, [ip]
   12bf4:	0089      	lsls	r1, r1, #2
   12bf6:	f1c1 0e20 	rsb	lr, r1, #32
   12bfa:	4660      	mov	r0, ip
   12bfc:	469b      	mov	fp, r3
   12bfe:	6847      	ldr	r7, [r0, #4]
   12c00:	fa07 f30e 	lsl.w	r3, r7, lr
   12c04:	ea43 030b 	orr.w	r3, r3, fp
   12c08:	fa27 fb01 	lsr.w	fp, r7, r1
   12c0c:	6003      	str	r3, [r0, #0]
   12c0e:	f840 bf04 	str.w	fp, [r0, #4]!
   12c12:	4540      	cmp	r0, r8
   12c14:	d3f3      	bcc.n	12bfe <__hexnan+0x11e>
   12c16:	e78d      	b.n	12b34 <__hexnan+0x54>
   12c18:	1d19      	adds	r1, r3, #4
   12c1a:	9101      	str	r1, [sp, #4]
   12c1c:	461d      	mov	r5, r3
   12c1e:	e76e      	b.n	12afe <__hexnan+0x1e>
   12c20:	9b03      	ldr	r3, [sp, #12]
   12c22:	2b00      	cmp	r3, #0
   12c24:	d0c2      	beq.n	12bac <__hexnan+0xcc>
   12c26:	9b03      	ldr	r3, [sp, #12]
   12c28:	9801      	ldr	r0, [sp, #4]
   12c2a:	f1c3 0120 	rsb	r1, r3, #32
   12c2e:	f04f 33ff 	mov.w	r3, #4294967295
   12c32:	40cb      	lsrs	r3, r1
   12c34:	f850 1c04 	ldr.w	r1, [r0, #-4]
   12c38:	400b      	ands	r3, r1
   12c3a:	f840 3c04 	str.w	r3, [r0, #-4]
   12c3e:	e7b8      	b.n	12bb2 <__hexnan+0xd2>
   12c40:	2929      	cmp	r1, #41	; 0x29
   12c42:	d009      	beq.n	12c58 <__hexnan+0x178>
   12c44:	2004      	movs	r0, #4
   12c46:	b005      	add	sp, #20
   12c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c4c:	2301      	movs	r3, #1
   12c4e:	2005      	movs	r0, #5
   12c50:	602b      	str	r3, [r5, #0]
   12c52:	b005      	add	sp, #20
   12c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c58:	9902      	ldr	r1, [sp, #8]
   12c5a:	3401      	adds	r4, #1
   12c5c:	600c      	str	r4, [r1, #0]
   12c5e:	e784      	b.n	12b6a <__hexnan+0x8a>
   12c60:	f8dc 1000 	ldr.w	r1, [ip]
   12c64:	f1c3 0308 	rsb	r3, r3, #8
   12c68:	009b      	lsls	r3, r3, #2
   12c6a:	f1c3 0720 	rsb	r7, r3, #32
   12c6e:	4664      	mov	r4, ip
   12c70:	4608      	mov	r0, r1
   12c72:	6866      	ldr	r6, [r4, #4]
   12c74:	fa06 f107 	lsl.w	r1, r6, r7
   12c78:	4301      	orrs	r1, r0
   12c7a:	fa26 f003 	lsr.w	r0, r6, r3
   12c7e:	6021      	str	r1, [r4, #0]
   12c80:	f844 0f04 	str.w	r0, [r4, #4]!
   12c84:	4544      	cmp	r4, r8
   12c86:	d3f4      	bcc.n	12c72 <__hexnan+0x192>
   12c88:	e775      	b.n	12b76 <__hexnan+0x96>
   12c8a:	bf00      	nop
   12c8c:	20000e1c 	.word	0x20000e1c

00012c90 <__ascii_mbtowc>:
   12c90:	b082      	sub	sp, #8
   12c92:	b149      	cbz	r1, 12ca8 <__ascii_mbtowc+0x18>
   12c94:	b15a      	cbz	r2, 12cae <__ascii_mbtowc+0x1e>
   12c96:	b16b      	cbz	r3, 12cb4 <__ascii_mbtowc+0x24>
   12c98:	7813      	ldrb	r3, [r2, #0]
   12c9a:	600b      	str	r3, [r1, #0]
   12c9c:	7812      	ldrb	r2, [r2, #0]
   12c9e:	1e10      	subs	r0, r2, #0
   12ca0:	bf18      	it	ne
   12ca2:	2001      	movne	r0, #1
   12ca4:	b002      	add	sp, #8
   12ca6:	4770      	bx	lr
   12ca8:	a901      	add	r1, sp, #4
   12caa:	2a00      	cmp	r2, #0
   12cac:	d1f3      	bne.n	12c96 <__ascii_mbtowc+0x6>
   12cae:	4610      	mov	r0, r2
   12cb0:	b002      	add	sp, #8
   12cb2:	4770      	bx	lr
   12cb4:	f06f 0001 	mvn.w	r0, #1
   12cb8:	e7f4      	b.n	12ca4 <__ascii_mbtowc+0x14>
   12cba:	bf00      	nop

00012cbc <_Balloc>:
   12cbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12cbe:	b570      	push	{r4, r5, r6, lr}
   12cc0:	4605      	mov	r5, r0
   12cc2:	460c      	mov	r4, r1
   12cc4:	b14b      	cbz	r3, 12cda <_Balloc+0x1e>
   12cc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   12cca:	b180      	cbz	r0, 12cee <_Balloc+0x32>
   12ccc:	6802      	ldr	r2, [r0, #0]
   12cce:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   12cd2:	2300      	movs	r3, #0
   12cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   12cd8:	bd70      	pop	{r4, r5, r6, pc}
   12cda:	2221      	movs	r2, #33	; 0x21
   12cdc:	2104      	movs	r1, #4
   12cde:	f004 f94f 	bl	16f80 <_calloc_r>
   12ce2:	4603      	mov	r3, r0
   12ce4:	6468      	str	r0, [r5, #68]	; 0x44
   12ce6:	2800      	cmp	r0, #0
   12ce8:	d1ed      	bne.n	12cc6 <_Balloc+0xa>
   12cea:	2000      	movs	r0, #0
   12cec:	bd70      	pop	{r4, r5, r6, pc}
   12cee:	2101      	movs	r1, #1
   12cf0:	fa01 f604 	lsl.w	r6, r1, r4
   12cf4:	1d72      	adds	r2, r6, #5
   12cf6:	0092      	lsls	r2, r2, #2
   12cf8:	4628      	mov	r0, r5
   12cfa:	f004 f941 	bl	16f80 <_calloc_r>
   12cfe:	2800      	cmp	r0, #0
   12d00:	d0f3      	beq.n	12cea <_Balloc+0x2e>
   12d02:	e9c0 4601 	strd	r4, r6, [r0, #4]
   12d06:	e7e4      	b.n	12cd2 <_Balloc+0x16>

00012d08 <_Bfree>:
   12d08:	b131      	cbz	r1, 12d18 <_Bfree+0x10>
   12d0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12d0c:	684a      	ldr	r2, [r1, #4]
   12d0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   12d12:	6008      	str	r0, [r1, #0]
   12d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   12d18:	4770      	bx	lr
   12d1a:	bf00      	nop

00012d1c <__multadd>:
   12d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d20:	690e      	ldr	r6, [r1, #16]
   12d22:	4680      	mov	r8, r0
   12d24:	460f      	mov	r7, r1
   12d26:	461d      	mov	r5, r3
   12d28:	f101 0e14 	add.w	lr, r1, #20
   12d2c:	2000      	movs	r0, #0
   12d2e:	f8de 1000 	ldr.w	r1, [lr]
   12d32:	b28c      	uxth	r4, r1
   12d34:	fb02 5304 	mla	r3, r2, r4, r5
   12d38:	0c09      	lsrs	r1, r1, #16
   12d3a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   12d3e:	fb02 cc01 	mla	ip, r2, r1, ip
   12d42:	3001      	adds	r0, #1
   12d44:	b29c      	uxth	r4, r3
   12d46:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   12d4a:	4286      	cmp	r6, r0
   12d4c:	f84e 4b04 	str.w	r4, [lr], #4
   12d50:	ea4f 451c 	mov.w	r5, ip, lsr #16
   12d54:	dceb      	bgt.n	12d2e <__multadd+0x12>
   12d56:	b13d      	cbz	r5, 12d68 <__multadd+0x4c>
   12d58:	68bb      	ldr	r3, [r7, #8]
   12d5a:	42b3      	cmp	r3, r6
   12d5c:	dd07      	ble.n	12d6e <__multadd+0x52>
   12d5e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   12d62:	3601      	adds	r6, #1
   12d64:	615d      	str	r5, [r3, #20]
   12d66:	613e      	str	r6, [r7, #16]
   12d68:	4638      	mov	r0, r7
   12d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d6e:	6879      	ldr	r1, [r7, #4]
   12d70:	4640      	mov	r0, r8
   12d72:	3101      	adds	r1, #1
   12d74:	f7ff ffa2 	bl	12cbc <_Balloc>
   12d78:	4604      	mov	r4, r0
   12d7a:	b1b0      	cbz	r0, 12daa <__multadd+0x8e>
   12d7c:	693a      	ldr	r2, [r7, #16]
   12d7e:	3202      	adds	r2, #2
   12d80:	f107 010c 	add.w	r1, r7, #12
   12d84:	0092      	lsls	r2, r2, #2
   12d86:	300c      	adds	r0, #12
   12d88:	f7fa fce0 	bl	d74c <memcpy>
   12d8c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   12d90:	687a      	ldr	r2, [r7, #4]
   12d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12d96:	6039      	str	r1, [r7, #0]
   12d98:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   12d9c:	4627      	mov	r7, r4
   12d9e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   12da2:	3601      	adds	r6, #1
   12da4:	615d      	str	r5, [r3, #20]
   12da6:	613e      	str	r6, [r7, #16]
   12da8:	e7de      	b.n	12d68 <__multadd+0x4c>
   12daa:	4b03      	ldr	r3, [pc, #12]	; (12db8 <__multadd+0x9c>)
   12dac:	4803      	ldr	r0, [pc, #12]	; (12dbc <__multadd+0xa0>)
   12dae:	4622      	mov	r2, r4
   12db0:	21ba      	movs	r1, #186	; 0xba
   12db2:	f004 f8c5 	bl	16f40 <__assert_func>
   12db6:	bf00      	nop
   12db8:	20000da4 	.word	0x20000da4
   12dbc:	20000f1c 	.word	0x20000f1c

00012dc0 <__s2b>:
   12dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12dc4:	4617      	mov	r7, r2
   12dc6:	4a27      	ldr	r2, [pc, #156]	; (12e64 <__s2b+0xa4>)
   12dc8:	461e      	mov	r6, r3
   12dca:	3308      	adds	r3, #8
   12dcc:	460c      	mov	r4, r1
   12dce:	2e09      	cmp	r6, #9
   12dd0:	fb82 1203 	smull	r1, r2, r2, r3
   12dd4:	ea4f 73e3 	mov.w	r3, r3, asr #31
   12dd8:	4605      	mov	r5, r0
   12dda:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   12dde:	dd39      	ble.n	12e54 <__s2b+0x94>
   12de0:	f04f 0c01 	mov.w	ip, #1
   12de4:	2100      	movs	r1, #0
   12de6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   12dea:	4563      	cmp	r3, ip
   12dec:	f101 0101 	add.w	r1, r1, #1
   12df0:	dcf9      	bgt.n	12de6 <__s2b+0x26>
   12df2:	4628      	mov	r0, r5
   12df4:	f7ff ff62 	bl	12cbc <_Balloc>
   12df8:	4601      	mov	r1, r0
   12dfa:	b368      	cbz	r0, 12e58 <__s2b+0x98>
   12dfc:	9b08      	ldr	r3, [sp, #32]
   12dfe:	6143      	str	r3, [r0, #20]
   12e00:	2f09      	cmp	r7, #9
   12e02:	f04f 0301 	mov.w	r3, #1
   12e06:	6103      	str	r3, [r0, #16]
   12e08:	dc12      	bgt.n	12e30 <__s2b+0x70>
   12e0a:	340a      	adds	r4, #10
   12e0c:	2709      	movs	r7, #9
   12e0e:	42be      	cmp	r6, r7
   12e10:	dd0b      	ble.n	12e2a <__s2b+0x6a>
   12e12:	1bf2      	subs	r2, r6, r7
   12e14:	18a6      	adds	r6, r4, r2
   12e16:	f814 3b01 	ldrb.w	r3, [r4], #1
   12e1a:	220a      	movs	r2, #10
   12e1c:	3b30      	subs	r3, #48	; 0x30
   12e1e:	4628      	mov	r0, r5
   12e20:	f7ff ff7c 	bl	12d1c <__multadd>
   12e24:	42a6      	cmp	r6, r4
   12e26:	4601      	mov	r1, r0
   12e28:	d1f5      	bne.n	12e16 <__s2b+0x56>
   12e2a:	4608      	mov	r0, r1
   12e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12e30:	f104 0909 	add.w	r9, r4, #9
   12e34:	46c8      	mov	r8, r9
   12e36:	443c      	add	r4, r7
   12e38:	f818 3b01 	ldrb.w	r3, [r8], #1
   12e3c:	220a      	movs	r2, #10
   12e3e:	3b30      	subs	r3, #48	; 0x30
   12e40:	4628      	mov	r0, r5
   12e42:	f7ff ff6b 	bl	12d1c <__multadd>
   12e46:	45a0      	cmp	r8, r4
   12e48:	4601      	mov	r1, r0
   12e4a:	d1f5      	bne.n	12e38 <__s2b+0x78>
   12e4c:	f1a7 0408 	sub.w	r4, r7, #8
   12e50:	444c      	add	r4, r9
   12e52:	e7dc      	b.n	12e0e <__s2b+0x4e>
   12e54:	2100      	movs	r1, #0
   12e56:	e7cc      	b.n	12df2 <__s2b+0x32>
   12e58:	460a      	mov	r2, r1
   12e5a:	4b03      	ldr	r3, [pc, #12]	; (12e68 <__s2b+0xa8>)
   12e5c:	4803      	ldr	r0, [pc, #12]	; (12e6c <__s2b+0xac>)
   12e5e:	21d3      	movs	r1, #211	; 0xd3
   12e60:	f004 f86e 	bl	16f40 <__assert_func>
   12e64:	38e38e39 	.word	0x38e38e39
   12e68:	20000da4 	.word	0x20000da4
   12e6c:	20000f1c 	.word	0x20000f1c

00012e70 <__hi0bits>:
   12e70:	0c03      	lsrs	r3, r0, #16
   12e72:	041b      	lsls	r3, r3, #16
   12e74:	b9d3      	cbnz	r3, 12eac <__hi0bits+0x3c>
   12e76:	0400      	lsls	r0, r0, #16
   12e78:	2310      	movs	r3, #16
   12e7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   12e7e:	bf04      	itt	eq
   12e80:	0200      	lsleq	r0, r0, #8
   12e82:	3308      	addeq	r3, #8
   12e84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   12e88:	bf04      	itt	eq
   12e8a:	0100      	lsleq	r0, r0, #4
   12e8c:	3304      	addeq	r3, #4
   12e8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   12e92:	bf04      	itt	eq
   12e94:	0080      	lsleq	r0, r0, #2
   12e96:	3302      	addeq	r3, #2
   12e98:	2800      	cmp	r0, #0
   12e9a:	db05      	blt.n	12ea8 <__hi0bits+0x38>
   12e9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   12ea0:	f103 0301 	add.w	r3, r3, #1
   12ea4:	bf08      	it	eq
   12ea6:	2320      	moveq	r3, #32
   12ea8:	4618      	mov	r0, r3
   12eaa:	4770      	bx	lr
   12eac:	2300      	movs	r3, #0
   12eae:	e7e4      	b.n	12e7a <__hi0bits+0xa>

00012eb0 <__lo0bits>:
   12eb0:	6803      	ldr	r3, [r0, #0]
   12eb2:	f013 0207 	ands.w	r2, r3, #7
   12eb6:	d008      	beq.n	12eca <__lo0bits+0x1a>
   12eb8:	07d9      	lsls	r1, r3, #31
   12eba:	d41f      	bmi.n	12efc <__lo0bits+0x4c>
   12ebc:	079a      	lsls	r2, r3, #30
   12ebe:	d522      	bpl.n	12f06 <__lo0bits+0x56>
   12ec0:	085b      	lsrs	r3, r3, #1
   12ec2:	6003      	str	r3, [r0, #0]
   12ec4:	2201      	movs	r2, #1
   12ec6:	4610      	mov	r0, r2
   12ec8:	4770      	bx	lr
   12eca:	b299      	uxth	r1, r3
   12ecc:	b909      	cbnz	r1, 12ed2 <__lo0bits+0x22>
   12ece:	0c1b      	lsrs	r3, r3, #16
   12ed0:	2210      	movs	r2, #16
   12ed2:	b2d9      	uxtb	r1, r3
   12ed4:	b909      	cbnz	r1, 12eda <__lo0bits+0x2a>
   12ed6:	3208      	adds	r2, #8
   12ed8:	0a1b      	lsrs	r3, r3, #8
   12eda:	0719      	lsls	r1, r3, #28
   12edc:	bf04      	itt	eq
   12ede:	091b      	lsreq	r3, r3, #4
   12ee0:	3204      	addeq	r2, #4
   12ee2:	0799      	lsls	r1, r3, #30
   12ee4:	bf04      	itt	eq
   12ee6:	089b      	lsreq	r3, r3, #2
   12ee8:	3202      	addeq	r2, #2
   12eea:	07d9      	lsls	r1, r3, #31
   12eec:	d403      	bmi.n	12ef6 <__lo0bits+0x46>
   12eee:	085b      	lsrs	r3, r3, #1
   12ef0:	f102 0201 	add.w	r2, r2, #1
   12ef4:	d005      	beq.n	12f02 <__lo0bits+0x52>
   12ef6:	6003      	str	r3, [r0, #0]
   12ef8:	4610      	mov	r0, r2
   12efa:	4770      	bx	lr
   12efc:	2200      	movs	r2, #0
   12efe:	4610      	mov	r0, r2
   12f00:	4770      	bx	lr
   12f02:	2220      	movs	r2, #32
   12f04:	e7df      	b.n	12ec6 <__lo0bits+0x16>
   12f06:	089b      	lsrs	r3, r3, #2
   12f08:	2202      	movs	r2, #2
   12f0a:	6003      	str	r3, [r0, #0]
   12f0c:	4610      	mov	r0, r2
   12f0e:	4770      	bx	lr

00012f10 <__i2b>:
   12f10:	b538      	push	{r3, r4, r5, lr}
   12f12:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12f14:	4604      	mov	r4, r0
   12f16:	460d      	mov	r5, r1
   12f18:	b14b      	cbz	r3, 12f2e <__i2b+0x1e>
   12f1a:	6858      	ldr	r0, [r3, #4]
   12f1c:	b1b0      	cbz	r0, 12f4c <__i2b+0x3c>
   12f1e:	6802      	ldr	r2, [r0, #0]
   12f20:	605a      	str	r2, [r3, #4]
   12f22:	2200      	movs	r2, #0
   12f24:	2301      	movs	r3, #1
   12f26:	e9c0 3504 	strd	r3, r5, [r0, #16]
   12f2a:	60c2      	str	r2, [r0, #12]
   12f2c:	bd38      	pop	{r3, r4, r5, pc}
   12f2e:	2221      	movs	r2, #33	; 0x21
   12f30:	2104      	movs	r1, #4
   12f32:	f004 f825 	bl	16f80 <_calloc_r>
   12f36:	4603      	mov	r3, r0
   12f38:	6460      	str	r0, [r4, #68]	; 0x44
   12f3a:	2800      	cmp	r0, #0
   12f3c:	d1ed      	bne.n	12f1a <__i2b+0xa>
   12f3e:	4b09      	ldr	r3, [pc, #36]	; (12f64 <__i2b+0x54>)
   12f40:	4809      	ldr	r0, [pc, #36]	; (12f68 <__i2b+0x58>)
   12f42:	2200      	movs	r2, #0
   12f44:	f240 1145 	movw	r1, #325	; 0x145
   12f48:	f003 fffa 	bl	16f40 <__assert_func>
   12f4c:	221c      	movs	r2, #28
   12f4e:	2101      	movs	r1, #1
   12f50:	4620      	mov	r0, r4
   12f52:	f004 f815 	bl	16f80 <_calloc_r>
   12f56:	2800      	cmp	r0, #0
   12f58:	d0f1      	beq.n	12f3e <__i2b+0x2e>
   12f5a:	2201      	movs	r2, #1
   12f5c:	2302      	movs	r3, #2
   12f5e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   12f62:	e7de      	b.n	12f22 <__i2b+0x12>
   12f64:	20000da4 	.word	0x20000da4
   12f68:	20000f1c 	.word	0x20000f1c

00012f6c <__multiply>:
   12f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f70:	690e      	ldr	r6, [r1, #16]
   12f72:	6915      	ldr	r5, [r2, #16]
   12f74:	42ae      	cmp	r6, r5
   12f76:	b085      	sub	sp, #20
   12f78:	4688      	mov	r8, r1
   12f7a:	4614      	mov	r4, r2
   12f7c:	db05      	blt.n	12f8a <__multiply+0x1e>
   12f7e:	462a      	mov	r2, r5
   12f80:	4623      	mov	r3, r4
   12f82:	4635      	mov	r5, r6
   12f84:	460c      	mov	r4, r1
   12f86:	4616      	mov	r6, r2
   12f88:	4698      	mov	r8, r3
   12f8a:	68a3      	ldr	r3, [r4, #8]
   12f8c:	6861      	ldr	r1, [r4, #4]
   12f8e:	19af      	adds	r7, r5, r6
   12f90:	42bb      	cmp	r3, r7
   12f92:	bfb8      	it	lt
   12f94:	3101      	addlt	r1, #1
   12f96:	f7ff fe91 	bl	12cbc <_Balloc>
   12f9a:	9001      	str	r0, [sp, #4]
   12f9c:	2800      	cmp	r0, #0
   12f9e:	f000 8087 	beq.w	130b0 <__multiply+0x144>
   12fa2:	9b01      	ldr	r3, [sp, #4]
   12fa4:	f103 0914 	add.w	r9, r3, #20
   12fa8:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   12fac:	45d1      	cmp	r9, sl
   12fae:	d205      	bcs.n	12fbc <__multiply+0x50>
   12fb0:	464b      	mov	r3, r9
   12fb2:	2200      	movs	r2, #0
   12fb4:	f843 2b04 	str.w	r2, [r3], #4
   12fb8:	459a      	cmp	sl, r3
   12fba:	d8fb      	bhi.n	12fb4 <__multiply+0x48>
   12fbc:	f108 0814 	add.w	r8, r8, #20
   12fc0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   12fc4:	f104 0314 	add.w	r3, r4, #20
   12fc8:	45d8      	cmp	r8, fp
   12fca:	461a      	mov	r2, r3
   12fcc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   12fd0:	d25f      	bcs.n	13092 <__multiply+0x126>
   12fd2:	1b2b      	subs	r3, r5, r4
   12fd4:	3b15      	subs	r3, #21
   12fd6:	f023 0303 	bic.w	r3, r3, #3
   12fda:	3304      	adds	r3, #4
   12fdc:	3415      	adds	r4, #21
   12fde:	42a5      	cmp	r5, r4
   12fe0:	bf38      	it	cc
   12fe2:	2304      	movcc	r3, #4
   12fe4:	e9cd a702 	strd	sl, r7, [sp, #8]
   12fe8:	46ac      	mov	ip, r5
   12fea:	461f      	mov	r7, r3
   12fec:	4692      	mov	sl, r2
   12fee:	e005      	b.n	12ffc <__multiply+0x90>
   12ff0:	0c09      	lsrs	r1, r1, #16
   12ff2:	d129      	bne.n	13048 <__multiply+0xdc>
   12ff4:	45c3      	cmp	fp, r8
   12ff6:	f109 0904 	add.w	r9, r9, #4
   12ffa:	d948      	bls.n	1308e <__multiply+0x122>
   12ffc:	f858 1b04 	ldr.w	r1, [r8], #4
   13000:	b28d      	uxth	r5, r1
   13002:	2d00      	cmp	r5, #0
   13004:	d0f4      	beq.n	12ff0 <__multiply+0x84>
   13006:	4656      	mov	r6, sl
   13008:	464c      	mov	r4, r9
   1300a:	2300      	movs	r3, #0
   1300c:	f856 1b04 	ldr.w	r1, [r6], #4
   13010:	6822      	ldr	r2, [r4, #0]
   13012:	fa1f fe81 	uxth.w	lr, r1
   13016:	b290      	uxth	r0, r2
   13018:	0c09      	lsrs	r1, r1, #16
   1301a:	fb05 000e 	mla	r0, r5, lr, r0
   1301e:	0c12      	lsrs	r2, r2, #16
   13020:	4403      	add	r3, r0
   13022:	fb05 2201 	mla	r2, r5, r1, r2
   13026:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1302a:	b29b      	uxth	r3, r3
   1302c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13030:	45b4      	cmp	ip, r6
   13032:	f844 3b04 	str.w	r3, [r4], #4
   13036:	ea4f 4312 	mov.w	r3, r2, lsr #16
   1303a:	d8e7      	bhi.n	1300c <__multiply+0xa0>
   1303c:	f849 3007 	str.w	r3, [r9, r7]
   13040:	f858 1c04 	ldr.w	r1, [r8, #-4]
   13044:	0c09      	lsrs	r1, r1, #16
   13046:	d0d5      	beq.n	12ff4 <__multiply+0x88>
   13048:	f8d9 3000 	ldr.w	r3, [r9]
   1304c:	4650      	mov	r0, sl
   1304e:	461a      	mov	r2, r3
   13050:	464c      	mov	r4, r9
   13052:	2600      	movs	r6, #0
   13054:	8805      	ldrh	r5, [r0, #0]
   13056:	0c12      	lsrs	r2, r2, #16
   13058:	fb01 2205 	mla	r2, r1, r5, r2
   1305c:	4416      	add	r6, r2
   1305e:	b29b      	uxth	r3, r3
   13060:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13064:	f844 3b04 	str.w	r3, [r4], #4
   13068:	f850 5b04 	ldr.w	r5, [r0], #4
   1306c:	6822      	ldr	r2, [r4, #0]
   1306e:	0c2d      	lsrs	r5, r5, #16
   13070:	b293      	uxth	r3, r2
   13072:	fb01 3305 	mla	r3, r1, r5, r3
   13076:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   1307a:	4584      	cmp	ip, r0
   1307c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   13080:	d8e8      	bhi.n	13054 <__multiply+0xe8>
   13082:	45c3      	cmp	fp, r8
   13084:	f849 3007 	str.w	r3, [r9, r7]
   13088:	f109 0904 	add.w	r9, r9, #4
   1308c:	d8b6      	bhi.n	12ffc <__multiply+0x90>
   1308e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   13092:	2f00      	cmp	r7, #0
   13094:	dc02      	bgt.n	1309c <__multiply+0x130>
   13096:	e005      	b.n	130a4 <__multiply+0x138>
   13098:	3f01      	subs	r7, #1
   1309a:	d003      	beq.n	130a4 <__multiply+0x138>
   1309c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   130a0:	2b00      	cmp	r3, #0
   130a2:	d0f9      	beq.n	13098 <__multiply+0x12c>
   130a4:	9b01      	ldr	r3, [sp, #4]
   130a6:	4618      	mov	r0, r3
   130a8:	611f      	str	r7, [r3, #16]
   130aa:	b005      	add	sp, #20
   130ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130b0:	4b03      	ldr	r3, [pc, #12]	; (130c0 <__multiply+0x154>)
   130b2:	4804      	ldr	r0, [pc, #16]	; (130c4 <__multiply+0x158>)
   130b4:	9a01      	ldr	r2, [sp, #4]
   130b6:	f44f 71b1 	mov.w	r1, #354	; 0x162
   130ba:	f003 ff41 	bl	16f40 <__assert_func>
   130be:	bf00      	nop
   130c0:	20000da4 	.word	0x20000da4
   130c4:	20000f1c 	.word	0x20000f1c

000130c8 <__pow5mult>:
   130c8:	f012 0303 	ands.w	r3, r2, #3
   130cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130d0:	4614      	mov	r4, r2
   130d2:	4606      	mov	r6, r0
   130d4:	d132      	bne.n	1313c <__pow5mult+0x74>
   130d6:	460d      	mov	r5, r1
   130d8:	10a4      	asrs	r4, r4, #2
   130da:	d020      	beq.n	1311e <__pow5mult+0x56>
   130dc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   130e0:	f1b8 0f00 	cmp.w	r8, #0
   130e4:	d033      	beq.n	1314e <__pow5mult+0x86>
   130e6:	07e3      	lsls	r3, r4, #31
   130e8:	f04f 0700 	mov.w	r7, #0
   130ec:	d407      	bmi.n	130fe <__pow5mult+0x36>
   130ee:	1064      	asrs	r4, r4, #1
   130f0:	d015      	beq.n	1311e <__pow5mult+0x56>
   130f2:	f8d8 0000 	ldr.w	r0, [r8]
   130f6:	b1a8      	cbz	r0, 13124 <__pow5mult+0x5c>
   130f8:	4680      	mov	r8, r0
   130fa:	07e3      	lsls	r3, r4, #31
   130fc:	d5f7      	bpl.n	130ee <__pow5mult+0x26>
   130fe:	4642      	mov	r2, r8
   13100:	4629      	mov	r1, r5
   13102:	4630      	mov	r0, r6
   13104:	f7ff ff32 	bl	12f6c <__multiply>
   13108:	b1b5      	cbz	r5, 13138 <__pow5mult+0x70>
   1310a:	6869      	ldr	r1, [r5, #4]
   1310c:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1310e:	1064      	asrs	r4, r4, #1
   13110:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   13114:	602a      	str	r2, [r5, #0]
   13116:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   1311a:	4605      	mov	r5, r0
   1311c:	d1e9      	bne.n	130f2 <__pow5mult+0x2a>
   1311e:	4628      	mov	r0, r5
   13120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13124:	4642      	mov	r2, r8
   13126:	4641      	mov	r1, r8
   13128:	4630      	mov	r0, r6
   1312a:	f7ff ff1f 	bl	12f6c <__multiply>
   1312e:	f8c8 0000 	str.w	r0, [r8]
   13132:	6007      	str	r7, [r0, #0]
   13134:	4680      	mov	r8, r0
   13136:	e7e0      	b.n	130fa <__pow5mult+0x32>
   13138:	4605      	mov	r5, r0
   1313a:	e7d8      	b.n	130ee <__pow5mult+0x26>
   1313c:	3b01      	subs	r3, #1
   1313e:	4a0f      	ldr	r2, [pc, #60]	; (1317c <__pow5mult+0xb4>)
   13140:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13144:	2300      	movs	r3, #0
   13146:	f7ff fde9 	bl	12d1c <__multadd>
   1314a:	4605      	mov	r5, r0
   1314c:	e7c4      	b.n	130d8 <__pow5mult+0x10>
   1314e:	2101      	movs	r1, #1
   13150:	4630      	mov	r0, r6
   13152:	f7ff fdb3 	bl	12cbc <_Balloc>
   13156:	4680      	mov	r8, r0
   13158:	b140      	cbz	r0, 1316c <__pow5mult+0xa4>
   1315a:	2301      	movs	r3, #1
   1315c:	f240 2271 	movw	r2, #625	; 0x271
   13160:	e9c0 3204 	strd	r3, r2, [r0, #16]
   13164:	2300      	movs	r3, #0
   13166:	6430      	str	r0, [r6, #64]	; 0x40
   13168:	6003      	str	r3, [r0, #0]
   1316a:	e7bc      	b.n	130e6 <__pow5mult+0x1e>
   1316c:	4b04      	ldr	r3, [pc, #16]	; (13180 <__pow5mult+0xb8>)
   1316e:	4805      	ldr	r0, [pc, #20]	; (13184 <__pow5mult+0xbc>)
   13170:	4642      	mov	r2, r8
   13172:	f240 1145 	movw	r1, #325	; 0x145
   13176:	f003 fee3 	bl	16f40 <__assert_func>
   1317a:	bf00      	nop
   1317c:	20007f74 	.word	0x20007f74
   13180:	20000da4 	.word	0x20000da4
   13184:	20000f1c 	.word	0x20000f1c

00013188 <__lshift>:
   13188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1318c:	460d      	mov	r5, r1
   1318e:	4614      	mov	r4, r2
   13190:	692f      	ldr	r7, [r5, #16]
   13192:	68ab      	ldr	r3, [r5, #8]
   13194:	6849      	ldr	r1, [r1, #4]
   13196:	eb07 1762 	add.w	r7, r7, r2, asr #5
   1319a:	1c7e      	adds	r6, r7, #1
   1319c:	429e      	cmp	r6, r3
   1319e:	4680      	mov	r8, r0
   131a0:	ea4f 1962 	mov.w	r9, r2, asr #5
   131a4:	dd04      	ble.n	131b0 <__lshift+0x28>
   131a6:	005b      	lsls	r3, r3, #1
   131a8:	429e      	cmp	r6, r3
   131aa:	f101 0101 	add.w	r1, r1, #1
   131ae:	dcfa      	bgt.n	131a6 <__lshift+0x1e>
   131b0:	4640      	mov	r0, r8
   131b2:	f7ff fd83 	bl	12cbc <_Balloc>
   131b6:	4684      	mov	ip, r0
   131b8:	2800      	cmp	r0, #0
   131ba:	d052      	beq.n	13262 <__lshift+0xda>
   131bc:	f1b9 0f00 	cmp.w	r9, #0
   131c0:	f100 0214 	add.w	r2, r0, #20
   131c4:	dd0e      	ble.n	131e4 <__lshift+0x5c>
   131c6:	f109 0105 	add.w	r1, r9, #5
   131ca:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   131ce:	4613      	mov	r3, r2
   131d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   131d4:	2000      	movs	r0, #0
   131d6:	f843 0b04 	str.w	r0, [r3], #4
   131da:	428b      	cmp	r3, r1
   131dc:	d1fb      	bne.n	131d6 <__lshift+0x4e>
   131de:	f1ae 0314 	sub.w	r3, lr, #20
   131e2:	441a      	add	r2, r3
   131e4:	6929      	ldr	r1, [r5, #16]
   131e6:	f105 0314 	add.w	r3, r5, #20
   131ea:	f014 0e1f 	ands.w	lr, r4, #31
   131ee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   131f2:	d02e      	beq.n	13252 <__lshift+0xca>
   131f4:	f1ce 0920 	rsb	r9, lr, #32
   131f8:	4610      	mov	r0, r2
   131fa:	f04f 0a00 	mov.w	sl, #0
   131fe:	681c      	ldr	r4, [r3, #0]
   13200:	fa04 f40e 	lsl.w	r4, r4, lr
   13204:	ea44 040a 	orr.w	r4, r4, sl
   13208:	f840 4b04 	str.w	r4, [r0], #4
   1320c:	f853 4b04 	ldr.w	r4, [r3], #4
   13210:	4299      	cmp	r1, r3
   13212:	fa24 fa09 	lsr.w	sl, r4, r9
   13216:	d8f2      	bhi.n	131fe <__lshift+0x76>
   13218:	1b4b      	subs	r3, r1, r5
   1321a:	3b15      	subs	r3, #21
   1321c:	f023 0303 	bic.w	r3, r3, #3
   13220:	3304      	adds	r3, #4
   13222:	f105 0015 	add.w	r0, r5, #21
   13226:	4281      	cmp	r1, r0
   13228:	bf38      	it	cc
   1322a:	2304      	movcc	r3, #4
   1322c:	f1ba 0f00 	cmp.w	sl, #0
   13230:	bf18      	it	ne
   13232:	4637      	movne	r7, r6
   13234:	f842 a003 	str.w	sl, [r2, r3]
   13238:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1323c:	686a      	ldr	r2, [r5, #4]
   1323e:	f8cc 7010 	str.w	r7, [ip, #16]
   13242:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13246:	6029      	str	r1, [r5, #0]
   13248:	4660      	mov	r0, ip
   1324a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   1324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13252:	3a04      	subs	r2, #4
   13254:	f853 0b04 	ldr.w	r0, [r3], #4
   13258:	f842 0f04 	str.w	r0, [r2, #4]!
   1325c:	4299      	cmp	r1, r3
   1325e:	d8f9      	bhi.n	13254 <__lshift+0xcc>
   13260:	e7ea      	b.n	13238 <__lshift+0xb0>
   13262:	4b03      	ldr	r3, [pc, #12]	; (13270 <__lshift+0xe8>)
   13264:	4803      	ldr	r0, [pc, #12]	; (13274 <__lshift+0xec>)
   13266:	4662      	mov	r2, ip
   13268:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   1326c:	f003 fe68 	bl	16f40 <__assert_func>
   13270:	20000da4 	.word	0x20000da4
   13274:	20000f1c 	.word	0x20000f1c

00013278 <__mcmp>:
   13278:	690b      	ldr	r3, [r1, #16]
   1327a:	4684      	mov	ip, r0
   1327c:	6900      	ldr	r0, [r0, #16]
   1327e:	1ac0      	subs	r0, r0, r3
   13280:	d116      	bne.n	132b0 <__mcmp+0x38>
   13282:	f10c 0c14 	add.w	ip, ip, #20
   13286:	3114      	adds	r1, #20
   13288:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   1328c:	b410      	push	{r4}
   1328e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   13292:	e001      	b.n	13298 <__mcmp+0x20>
   13294:	4594      	cmp	ip, r2
   13296:	d208      	bcs.n	132aa <__mcmp+0x32>
   13298:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   1329c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   132a0:	428c      	cmp	r4, r1
   132a2:	d0f7      	beq.n	13294 <__mcmp+0x1c>
   132a4:	d205      	bcs.n	132b2 <__mcmp+0x3a>
   132a6:	f04f 30ff 	mov.w	r0, #4294967295
   132aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   132ae:	4770      	bx	lr
   132b0:	4770      	bx	lr
   132b2:	2001      	movs	r0, #1
   132b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   132b8:	4770      	bx	lr
   132ba:	bf00      	nop

000132bc <__mdiff>:
   132bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132c0:	690f      	ldr	r7, [r1, #16]
   132c2:	6913      	ldr	r3, [r2, #16]
   132c4:	1aff      	subs	r7, r7, r3
   132c6:	2f00      	cmp	r7, #0
   132c8:	460e      	mov	r6, r1
   132ca:	4690      	mov	r8, r2
   132cc:	d17f      	bne.n	133ce <__mdiff+0x112>
   132ce:	f101 0514 	add.w	r5, r1, #20
   132d2:	3214      	adds	r2, #20
   132d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   132d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   132dc:	e001      	b.n	132e2 <__mdiff+0x26>
   132de:	429d      	cmp	r5, r3
   132e0:	d278      	bcs.n	133d4 <__mdiff+0x118>
   132e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   132e6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   132ea:	42a1      	cmp	r1, r4
   132ec:	d0f7      	beq.n	132de <__mdiff+0x22>
   132ee:	d369      	bcc.n	133c4 <__mdiff+0x108>
   132f0:	6871      	ldr	r1, [r6, #4]
   132f2:	f7ff fce3 	bl	12cbc <_Balloc>
   132f6:	4681      	mov	r9, r0
   132f8:	2800      	cmp	r0, #0
   132fa:	d077      	beq.n	133ec <__mdiff+0x130>
   132fc:	6935      	ldr	r5, [r6, #16]
   132fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   13302:	60c7      	str	r7, [r0, #12]
   13304:	f108 0e14 	add.w	lr, r8, #20
   13308:	f106 0014 	add.w	r0, r6, #20
   1330c:	f109 0a14 	add.w	sl, r9, #20
   13310:	f106 0110 	add.w	r1, r6, #16
   13314:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   13318:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   1331c:	4656      	mov	r6, sl
   1331e:	f04f 0c00 	mov.w	ip, #0
   13322:	f85e 4b04 	ldr.w	r4, [lr], #4
   13326:	f851 bf04 	ldr.w	fp, [r1, #4]!
   1332a:	b2a3      	uxth	r3, r4
   1332c:	fa1c fc8b 	uxtah	ip, ip, fp
   13330:	ebac 0303 	sub.w	r3, ip, r3
   13334:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   13338:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   1333c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   13340:	b29b      	uxth	r3, r3
   13342:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   13346:	4572      	cmp	r2, lr
   13348:	f846 3b04 	str.w	r3, [r6], #4
   1334c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   13350:	d8e7      	bhi.n	13322 <__mdiff+0x66>
   13352:	eba2 0108 	sub.w	r1, r2, r8
   13356:	3915      	subs	r1, #21
   13358:	f108 0815 	add.w	r8, r8, #21
   1335c:	4542      	cmp	r2, r8
   1335e:	f021 0403 	bic.w	r4, r1, #3
   13362:	f104 0404 	add.w	r4, r4, #4
   13366:	bf38      	it	cc
   13368:	2404      	movcc	r4, #4
   1336a:	4420      	add	r0, r4
   1336c:	f021 0203 	bic.w	r2, r1, #3
   13370:	bf38      	it	cc
   13372:	2200      	movcc	r2, #0
   13374:	4287      	cmp	r7, r0
   13376:	4452      	add	r2, sl
   13378:	4454      	add	r4, sl
   1337a:	d918      	bls.n	133ae <__mdiff+0xf2>
   1337c:	4626      	mov	r6, r4
   1337e:	4601      	mov	r1, r0
   13380:	f851 3b04 	ldr.w	r3, [r1], #4
   13384:	fa1c fc83 	uxtah	ip, ip, r3
   13388:	ea4f 422c 	mov.w	r2, ip, asr #16
   1338c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   13390:	fa1f fc8c 	uxth.w	ip, ip
   13394:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   13398:	428f      	cmp	r7, r1
   1339a:	f846 3b04 	str.w	r3, [r6], #4
   1339e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   133a2:	d8ed      	bhi.n	13380 <__mdiff+0xc4>
   133a4:	3f01      	subs	r7, #1
   133a6:	1a3f      	subs	r7, r7, r0
   133a8:	f027 0703 	bic.w	r7, r7, #3
   133ac:	19e2      	adds	r2, r4, r7
   133ae:	b923      	cbnz	r3, 133ba <__mdiff+0xfe>
   133b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   133b4:	3d01      	subs	r5, #1
   133b6:	2b00      	cmp	r3, #0
   133b8:	d0fa      	beq.n	133b0 <__mdiff+0xf4>
   133ba:	f8c9 5010 	str.w	r5, [r9, #16]
   133be:	4648      	mov	r0, r9
   133c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c4:	4633      	mov	r3, r6
   133c6:	2701      	movs	r7, #1
   133c8:	4646      	mov	r6, r8
   133ca:	4698      	mov	r8, r3
   133cc:	e790      	b.n	132f0 <__mdiff+0x34>
   133ce:	dbf9      	blt.n	133c4 <__mdiff+0x108>
   133d0:	2700      	movs	r7, #0
   133d2:	e78d      	b.n	132f0 <__mdiff+0x34>
   133d4:	2100      	movs	r1, #0
   133d6:	f7ff fc71 	bl	12cbc <_Balloc>
   133da:	4681      	mov	r9, r0
   133dc:	b168      	cbz	r0, 133fa <__mdiff+0x13e>
   133de:	2201      	movs	r2, #1
   133e0:	2300      	movs	r3, #0
   133e2:	e9c9 2304 	strd	r2, r3, [r9, #16]
   133e6:	4648      	mov	r0, r9
   133e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ec:	4b06      	ldr	r3, [pc, #24]	; (13408 <__mdiff+0x14c>)
   133ee:	4807      	ldr	r0, [pc, #28]	; (1340c <__mdiff+0x150>)
   133f0:	464a      	mov	r2, r9
   133f2:	f240 2145 	movw	r1, #581	; 0x245
   133f6:	f003 fda3 	bl	16f40 <__assert_func>
   133fa:	4b03      	ldr	r3, [pc, #12]	; (13408 <__mdiff+0x14c>)
   133fc:	4803      	ldr	r0, [pc, #12]	; (1340c <__mdiff+0x150>)
   133fe:	464a      	mov	r2, r9
   13400:	f240 2137 	movw	r1, #567	; 0x237
   13404:	f003 fd9c 	bl	16f40 <__assert_func>
   13408:	20000da4 	.word	0x20000da4
   1340c:	20000f1c 	.word	0x20000f1c

00013410 <__ulp>:
   13410:	b082      	sub	sp, #8
   13412:	ed8d 0b00 	vstr	d0, [sp]
   13416:	4b16      	ldr	r3, [pc, #88]	; (13470 <__ulp+0x60>)
   13418:	9a01      	ldr	r2, [sp, #4]
   1341a:	4013      	ands	r3, r2
   1341c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   13420:	2b00      	cmp	r3, #0
   13422:	dd06      	ble.n	13432 <__ulp+0x22>
   13424:	2200      	movs	r2, #0
   13426:	4619      	mov	r1, r3
   13428:	4610      	mov	r0, r2
   1342a:	ec41 0b10 	vmov	d0, r0, r1
   1342e:	b002      	add	sp, #8
   13430:	4770      	bx	lr
   13432:	425b      	negs	r3, r3
   13434:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   13438:	ea4f 5223 	mov.w	r2, r3, asr #20
   1343c:	da09      	bge.n	13452 <__ulp+0x42>
   1343e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   13442:	4113      	asrs	r3, r2
   13444:	2200      	movs	r2, #0
   13446:	4619      	mov	r1, r3
   13448:	4610      	mov	r0, r2
   1344a:	ec41 0b10 	vmov	d0, r0, r1
   1344e:	b002      	add	sp, #8
   13450:	4770      	bx	lr
   13452:	f1a2 0314 	sub.w	r3, r2, #20
   13456:	2b1e      	cmp	r3, #30
   13458:	bfda      	itte	le
   1345a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1345e:	40da      	lsrle	r2, r3
   13460:	2201      	movgt	r2, #1
   13462:	2300      	movs	r3, #0
   13464:	4619      	mov	r1, r3
   13466:	4610      	mov	r0, r2
   13468:	ec41 0b10 	vmov	d0, r0, r1
   1346c:	b002      	add	sp, #8
   1346e:	4770      	bx	lr
   13470:	7ff00000 	.word	0x7ff00000

00013474 <__b2d>:
   13474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13476:	6904      	ldr	r4, [r0, #16]
   13478:	f100 0614 	add.w	r6, r0, #20
   1347c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   13480:	1f27      	subs	r7, r4, #4
   13482:	f854 5c04 	ldr.w	r5, [r4, #-4]
   13486:	4628      	mov	r0, r5
   13488:	f7ff fcf2 	bl	12e70 <__hi0bits>
   1348c:	f1c0 0320 	rsb	r3, r0, #32
   13490:	280a      	cmp	r0, #10
   13492:	600b      	str	r3, [r1, #0]
   13494:	dd1b      	ble.n	134ce <__b2d+0x5a>
   13496:	42be      	cmp	r6, r7
   13498:	d20b      	bcs.n	134b2 <__b2d+0x3e>
   1349a:	380b      	subs	r0, #11
   1349c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   134a0:	d12e      	bne.n	13500 <__b2d+0x8c>
   134a2:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   134a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   134aa:	460a      	mov	r2, r1
   134ac:	ec43 2b10 	vmov	d0, r2, r3
   134b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134b2:	f1b0 010b 	subs.w	r1, r0, #11
   134b6:	d0f4      	beq.n	134a2 <__b2d+0x2e>
   134b8:	fa05 f101 	lsl.w	r1, r5, r1
   134bc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   134c0:	2100      	movs	r1, #0
   134c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   134c6:	460a      	mov	r2, r1
   134c8:	ec43 2b10 	vmov	d0, r2, r3
   134cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   134ce:	f1c0 0c0b 	rsb	ip, r0, #11
   134d2:	fa25 f10c 	lsr.w	r1, r5, ip
   134d6:	42be      	cmp	r6, r7
   134d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   134dc:	bf38      	it	cc
   134de:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   134e2:	f100 0015 	add.w	r0, r0, #21
   134e6:	bf34      	ite	cc
   134e8:	fa21 f10c 	lsrcc.w	r1, r1, ip
   134ec:	2100      	movcs	r1, #0
   134ee:	fa05 f000 	lsl.w	r0, r5, r0
   134f2:	4301      	orrs	r1, r0
   134f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   134f8:	460a      	mov	r2, r1
   134fa:	ec43 2b10 	vmov	d0, r2, r3
   134fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13500:	f1c0 0c20 	rsb	ip, r0, #32
   13504:	4085      	lsls	r5, r0
   13506:	fa21 f30c 	lsr.w	r3, r1, ip
   1350a:	ea45 0703 	orr.w	r7, r5, r3
   1350e:	f1a4 0508 	sub.w	r5, r4, #8
   13512:	42ae      	cmp	r6, r5
   13514:	fa01 f100 	lsl.w	r1, r1, r0
   13518:	bf3c      	itt	cc
   1351a:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   1351e:	fa20 f00c 	lsrcc.w	r0, r0, ip
   13522:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   13526:	bf38      	it	cc
   13528:	4301      	orrcc	r1, r0
   1352a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1352e:	460a      	mov	r2, r1
   13530:	ec43 2b10 	vmov	d0, r2, r3
   13534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13536:	bf00      	nop

00013538 <__d2b>:
   13538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1353c:	4688      	mov	r8, r1
   1353e:	b083      	sub	sp, #12
   13540:	2101      	movs	r1, #1
   13542:	ec57 6b10 	vmov	r6, r7, d0
   13546:	4615      	mov	r5, r2
   13548:	f7ff fbb8 	bl	12cbc <_Balloc>
   1354c:	4604      	mov	r4, r0
   1354e:	2800      	cmp	r0, #0
   13550:	d051      	beq.n	135f6 <__d2b+0xbe>
   13552:	f3c7 590a 	ubfx	r9, r7, #20, #11
   13556:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1355a:	f1b9 0f00 	cmp.w	r9, #0
   1355e:	d001      	beq.n	13564 <__d2b+0x2c>
   13560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13564:	2e00      	cmp	r6, #0
   13566:	9301      	str	r3, [sp, #4]
   13568:	d118      	bne.n	1359c <__d2b+0x64>
   1356a:	a801      	add	r0, sp, #4
   1356c:	f7ff fca0 	bl	12eb0 <__lo0bits>
   13570:	9a01      	ldr	r2, [sp, #4]
   13572:	6162      	str	r2, [r4, #20]
   13574:	2201      	movs	r2, #1
   13576:	f100 0320 	add.w	r3, r0, #32
   1357a:	6122      	str	r2, [r4, #16]
   1357c:	f1b9 0f00 	cmp.w	r9, #0
   13580:	d025      	beq.n	135ce <__d2b+0x96>
   13582:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   13586:	eb09 0203 	add.w	r2, r9, r3
   1358a:	4620      	mov	r0, r4
   1358c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   13590:	f8c8 2000 	str.w	r2, [r8]
   13594:	602b      	str	r3, [r5, #0]
   13596:	b003      	add	sp, #12
   13598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1359c:	4668      	mov	r0, sp
   1359e:	9600      	str	r6, [sp, #0]
   135a0:	f7ff fc86 	bl	12eb0 <__lo0bits>
   135a4:	4603      	mov	r3, r0
   135a6:	b310      	cbz	r0, 135ee <__d2b+0xb6>
   135a8:	e9dd 0200 	ldrd	r0, r2, [sp]
   135ac:	f1c3 0120 	rsb	r1, r3, #32
   135b0:	fa02 f101 	lsl.w	r1, r2, r1
   135b4:	4301      	orrs	r1, r0
   135b6:	40da      	lsrs	r2, r3
   135b8:	6161      	str	r1, [r4, #20]
   135ba:	9201      	str	r2, [sp, #4]
   135bc:	2a00      	cmp	r2, #0
   135be:	61a2      	str	r2, [r4, #24]
   135c0:	bf14      	ite	ne
   135c2:	2202      	movne	r2, #2
   135c4:	2201      	moveq	r2, #1
   135c6:	6122      	str	r2, [r4, #16]
   135c8:	f1b9 0f00 	cmp.w	r9, #0
   135cc:	d1d9      	bne.n	13582 <__d2b+0x4a>
   135ce:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   135d2:	f8c8 3000 	str.w	r3, [r8]
   135d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   135da:	6918      	ldr	r0, [r3, #16]
   135dc:	f7ff fc48 	bl	12e70 <__hi0bits>
   135e0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   135e4:	4620      	mov	r0, r4
   135e6:	602b      	str	r3, [r5, #0]
   135e8:	b003      	add	sp, #12
   135ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   135ee:	9a00      	ldr	r2, [sp, #0]
   135f0:	6162      	str	r2, [r4, #20]
   135f2:	9a01      	ldr	r2, [sp, #4]
   135f4:	e7e2      	b.n	135bc <__d2b+0x84>
   135f6:	4b03      	ldr	r3, [pc, #12]	; (13604 <__d2b+0xcc>)
   135f8:	4803      	ldr	r0, [pc, #12]	; (13608 <__d2b+0xd0>)
   135fa:	4622      	mov	r2, r4
   135fc:	f240 310f 	movw	r1, #783	; 0x30f
   13600:	f003 fc9e 	bl	16f40 <__assert_func>
   13604:	20000da4 	.word	0x20000da4
   13608:	20000f1c 	.word	0x20000f1c

0001360c <__ratio>:
   1360c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1360e:	b083      	sub	sp, #12
   13610:	460e      	mov	r6, r1
   13612:	4669      	mov	r1, sp
   13614:	4607      	mov	r7, r0
   13616:	f7ff ff2d 	bl	13474 <__b2d>
   1361a:	a901      	add	r1, sp, #4
   1361c:	4630      	mov	r0, r6
   1361e:	ec55 4b10 	vmov	r4, r5, d0
   13622:	eeb0 7b40 	vmov.f64	d7, d0
   13626:	f7ff ff25 	bl	13474 <__b2d>
   1362a:	6933      	ldr	r3, [r6, #16]
   1362c:	693a      	ldr	r2, [r7, #16]
   1362e:	1ad2      	subs	r2, r2, r3
   13630:	e9dd 3100 	ldrd	r3, r1, [sp]
   13634:	1a5b      	subs	r3, r3, r1
   13636:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   1363a:	2b00      	cmp	r3, #0
   1363c:	dd09      	ble.n	13652 <__ratio+0x46>
   1363e:	ee17 2a90 	vmov	r2, s15
   13642:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   13646:	ec45 4b17 	vmov	d7, r4, r5
   1364a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1364e:	b003      	add	sp, #12
   13650:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13652:	ee10 2a90 	vmov	r2, s1
   13656:	ec51 0b10 	vmov	r0, r1, d0
   1365a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1365e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   13662:	ec41 0b10 	vmov	d0, r0, r1
   13666:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1366a:	b003      	add	sp, #12
   1366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1366e:	bf00      	nop

00013670 <__copybits>:
   13670:	3901      	subs	r1, #1
   13672:	1149      	asrs	r1, r1, #5
   13674:	f101 0c01 	add.w	ip, r1, #1
   13678:	6911      	ldr	r1, [r2, #16]
   1367a:	f102 0314 	add.w	r3, r2, #20
   1367e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13682:	428b      	cmp	r3, r1
   13684:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   13688:	d217      	bcs.n	136ba <__copybits+0x4a>
   1368a:	b510      	push	{r4, lr}
   1368c:	f1a0 0e04 	sub.w	lr, r0, #4
   13690:	f853 4b04 	ldr.w	r4, [r3], #4
   13694:	f84e 4f04 	str.w	r4, [lr, #4]!
   13698:	4299      	cmp	r1, r3
   1369a:	d8f9      	bhi.n	13690 <__copybits+0x20>
   1369c:	1a8a      	subs	r2, r1, r2
   1369e:	f1a2 0315 	sub.w	r3, r2, #21
   136a2:	f023 0303 	bic.w	r3, r3, #3
   136a6:	3304      	adds	r3, #4
   136a8:	4418      	add	r0, r3
   136aa:	4584      	cmp	ip, r0
   136ac:	d904      	bls.n	136b8 <__copybits+0x48>
   136ae:	2300      	movs	r3, #0
   136b0:	f840 3b04 	str.w	r3, [r0], #4
   136b4:	4584      	cmp	ip, r0
   136b6:	d8fb      	bhi.n	136b0 <__copybits+0x40>
   136b8:	bd10      	pop	{r4, pc}
   136ba:	4584      	cmp	ip, r0
   136bc:	d905      	bls.n	136ca <__copybits+0x5a>
   136be:	2300      	movs	r3, #0
   136c0:	f840 3b04 	str.w	r3, [r0], #4
   136c4:	4584      	cmp	ip, r0
   136c6:	d8fb      	bhi.n	136c0 <__copybits+0x50>
   136c8:	4770      	bx	lr
   136ca:	4770      	bx	lr

000136cc <__any_on>:
   136cc:	6903      	ldr	r3, [r0, #16]
   136ce:	114a      	asrs	r2, r1, #5
   136d0:	4293      	cmp	r3, r2
   136d2:	f100 0014 	add.w	r0, r0, #20
   136d6:	da09      	bge.n	136ec <__any_on+0x20>
   136d8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   136dc:	e002      	b.n	136e4 <__any_on+0x18>
   136de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   136e2:	b9c2      	cbnz	r2, 13716 <__any_on+0x4a>
   136e4:	4283      	cmp	r3, r0
   136e6:	d8fa      	bhi.n	136de <__any_on+0x12>
   136e8:	2000      	movs	r0, #0
   136ea:	4770      	bx	lr
   136ec:	dd10      	ble.n	13710 <__any_on+0x44>
   136ee:	f011 011f 	ands.w	r1, r1, #31
   136f2:	d00d      	beq.n	13710 <__any_on+0x44>
   136f4:	b410      	push	{r4}
   136f6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   136fa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   136fe:	fa24 f201 	lsr.w	r2, r4, r1
   13702:	408a      	lsls	r2, r1
   13704:	4294      	cmp	r4, r2
   13706:	d00c      	beq.n	13722 <__any_on+0x56>
   13708:	2001      	movs	r0, #1
   1370a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1370e:	4770      	bx	lr
   13710:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   13714:	e7e6      	b.n	136e4 <__any_on+0x18>
   13716:	2001      	movs	r0, #1
   13718:	4770      	bx	lr
   1371a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   1371e:	2a00      	cmp	r2, #0
   13720:	d1f2      	bne.n	13708 <__any_on+0x3c>
   13722:	4283      	cmp	r3, r0
   13724:	d8f9      	bhi.n	1371a <__any_on+0x4e>
   13726:	2000      	movs	r0, #0
   13728:	f85d 4b04 	ldr.w	r4, [sp], #4
   1372c:	4770      	bx	lr
   1372e:	bf00      	nop

00013730 <__ascii_wctomb>:
   13730:	b149      	cbz	r1, 13746 <__ascii_wctomb+0x16>
   13732:	2aff      	cmp	r2, #255	; 0xff
   13734:	d802      	bhi.n	1373c <__ascii_wctomb+0xc>
   13736:	700a      	strb	r2, [r1, #0]
   13738:	2001      	movs	r0, #1
   1373a:	4770      	bx	lr
   1373c:	238a      	movs	r3, #138	; 0x8a
   1373e:	6003      	str	r3, [r0, #0]
   13740:	f04f 30ff 	mov.w	r0, #4294967295
   13744:	4770      	bx	lr
   13746:	4608      	mov	r0, r1
   13748:	4770      	bx	lr
   1374a:	bf00      	nop

0001374c <fcvtbuf>:
   1374c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13750:	460e      	mov	r6, r1
   13752:	4926      	ldr	r1, [pc, #152]	; (137ec <fcvtbuf+0xa0>)
   13754:	b087      	sub	sp, #28
   13756:	680f      	ldr	r7, [r1, #0]
   13758:	4604      	mov	r4, r0
   1375a:	4690      	mov	r8, r2
   1375c:	461d      	mov	r5, r3
   1375e:	b353      	cbz	r3, 137b6 <fcvtbuf+0x6a>
   13760:	aa05      	add	r2, sp, #20
   13762:	4633      	mov	r3, r6
   13764:	9201      	str	r2, [sp, #4]
   13766:	2103      	movs	r1, #3
   13768:	4622      	mov	r2, r4
   1376a:	f8cd 8000 	str.w	r8, [sp]
   1376e:	4638      	mov	r0, r7
   13770:	f003 fcd6 	bl	17120 <_dtoa_r>
   13774:	9b05      	ldr	r3, [sp, #20]
   13776:	6832      	ldr	r2, [r6, #0]
   13778:	4298      	cmp	r0, r3
   1377a:	4684      	mov	ip, r0
   1377c:	f1c2 0200 	rsb	r2, r2, #0
   13780:	4629      	mov	r1, r5
   13782:	d209      	bcs.n	13798 <fcvtbuf+0x4c>
   13784:	1a10      	subs	r0, r2, r0
   13786:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1378a:	f801 3b01 	strb.w	r3, [r1], #1
   1378e:	9b05      	ldr	r3, [sp, #20]
   13790:	4563      	cmp	r3, ip
   13792:	eb00 020c 	add.w	r2, r0, ip
   13796:	d8f6      	bhi.n	13786 <fcvtbuf+0x3a>
   13798:	4294      	cmp	r4, r2
   1379a:	dd24      	ble.n	137e6 <fcvtbuf+0x9a>
   1379c:	1aa2      	subs	r2, r4, r2
   1379e:	440a      	add	r2, r1
   137a0:	2330      	movs	r3, #48	; 0x30
   137a2:	f801 3b01 	strb.w	r3, [r1], #1
   137a6:	4291      	cmp	r1, r2
   137a8:	d1fb      	bne.n	137a2 <fcvtbuf+0x56>
   137aa:	2300      	movs	r3, #0
   137ac:	7013      	strb	r3, [r2, #0]
   137ae:	4628      	mov	r0, r5
   137b0:	b007      	add	sp, #28
   137b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   137b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   137b8:	f100 0323 	add.w	r3, r0, #35	; 0x23
   137bc:	429a      	cmp	r2, r3
   137be:	dd01      	ble.n	137c4 <fcvtbuf+0x78>
   137c0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   137c2:	e7cd      	b.n	13760 <fcvtbuf+0x14>
   137c4:	f100 0924 	add.w	r9, r0, #36	; 0x24
   137c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   137ca:	464a      	mov	r2, r9
   137cc:	4638      	mov	r0, r7
   137ce:	ed8d 0b02 	vstr	d0, [sp, #8]
   137d2:	f7fc fba1 	bl	ff18 <_realloc_r>
   137d6:	4605      	mov	r5, r0
   137d8:	2800      	cmp	r0, #0
   137da:	d0e8      	beq.n	137ae <fcvtbuf+0x62>
   137dc:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   137e0:	ed9d 0b02 	vldr	d0, [sp, #8]
   137e4:	e7bc      	b.n	13760 <fcvtbuf+0x14>
   137e6:	460a      	mov	r2, r1
   137e8:	e7df      	b.n	137aa <fcvtbuf+0x5e>
   137ea:	bf00      	nop
   137ec:	20009424 	.word	0x20009424

000137f0 <_svfprintf_r>:
   137f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137f4:	ed2d 8b08 	vpush	{d8-d11}
   137f8:	b0d1      	sub	sp, #324	; 0x144
   137fa:	460c      	mov	r4, r1
   137fc:	ee0b 1a10 	vmov	s22, r1
   13800:	4690      	mov	r8, r2
   13802:	9308      	str	r3, [sp, #32]
   13804:	4683      	mov	fp, r0
   13806:	f003 fb59 	bl	16ebc <_localeconv_r>
   1380a:	6803      	ldr	r3, [r0, #0]
   1380c:	9312      	str	r3, [sp, #72]	; 0x48
   1380e:	4618      	mov	r0, r3
   13810:	f7fe fc16 	bl	12040 <strlen>
   13814:	af20      	add	r7, sp, #128	; 0x80
   13816:	9010      	str	r0, [sp, #64]	; 0x40
   13818:	2208      	movs	r2, #8
   1381a:	2100      	movs	r1, #0
   1381c:	4638      	mov	r0, r7
   1381e:	f7fe f823 	bl	11868 <memset>
   13822:	89a3      	ldrh	r3, [r4, #12]
   13824:	061b      	lsls	r3, r3, #24
   13826:	d503      	bpl.n	13830 <_svfprintf_r+0x40>
   13828:	6923      	ldr	r3, [r4, #16]
   1382a:	2b00      	cmp	r3, #0
   1382c:	f000 8755 	beq.w	146da <_svfprintf_r+0xeea>
   13830:	2300      	movs	r3, #0
   13832:	ed9f 8b83 	vldr	d8, [pc, #524]	; 13a40 <_svfprintf_r+0x250>
   13836:	ed9f 9b84 	vldr	d9, [pc, #528]	; 13a48 <_svfprintf_r+0x258>
   1383a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   1383e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   13842:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   13846:	aa27      	add	r2, sp, #156	; 0x9c
   13848:	930e      	str	r3, [sp, #56]	; 0x38
   1384a:	9224      	str	r2, [sp, #144]	; 0x90
   1384c:	4692      	mov	sl, r2
   1384e:	9311      	str	r3, [sp, #68]	; 0x44
   13850:	9304      	str	r3, [sp, #16]
   13852:	4644      	mov	r4, r8
   13854:	46a1      	mov	r9, r4
   13856:	4b7e      	ldr	r3, [pc, #504]	; (13a50 <_svfprintf_r+0x260>)
   13858:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1385c:	f7fe f924 	bl	11aa8 <__locale_mb_cur_max>
   13860:	464a      	mov	r2, r9
   13862:	4603      	mov	r3, r0
   13864:	a91c      	add	r1, sp, #112	; 0x70
   13866:	9700      	str	r7, [sp, #0]
   13868:	4658      	mov	r0, fp
   1386a:	47a8      	blx	r5
   1386c:	2800      	cmp	r0, #0
   1386e:	f000 80b0 	beq.w	139d2 <_svfprintf_r+0x1e2>
   13872:	f2c0 80a6 	blt.w	139c2 <_svfprintf_r+0x1d2>
   13876:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13878:	2a25      	cmp	r2, #37	; 0x25
   1387a:	4603      	mov	r3, r0
   1387c:	d001      	beq.n	13882 <_svfprintf_r+0x92>
   1387e:	4499      	add	r9, r3
   13880:	e7e9      	b.n	13856 <_svfprintf_r+0x66>
   13882:	ebb9 0504 	subs.w	r5, r9, r4
   13886:	4606      	mov	r6, r0
   13888:	f040 80a7 	bne.w	139da <_svfprintf_r+0x1ea>
   1388c:	2300      	movs	r3, #0
   1388e:	f04f 32ff 	mov.w	r2, #4294967295
   13892:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   13896:	4698      	mov	r8, r3
   13898:	9306      	str	r3, [sp, #24]
   1389a:	f109 0901 	add.w	r9, r9, #1
   1389e:	f899 3000 	ldrb.w	r3, [r9]
   138a2:	9203      	str	r2, [sp, #12]
   138a4:	252b      	movs	r5, #43	; 0x2b
   138a6:	2620      	movs	r6, #32
   138a8:	f109 0901 	add.w	r9, r9, #1
   138ac:	f1a3 0220 	sub.w	r2, r3, #32
   138b0:	2a5a      	cmp	r2, #90	; 0x5a
   138b2:	f200 80cf 	bhi.w	13a54 <_svfprintf_r+0x264>
   138b6:	e8df f012 	tbh	[pc, r2, lsl #1]
   138ba:	02e8      	.short	0x02e8
   138bc:	00cd00cd 	.word	0x00cd00cd
   138c0:	00cd02e3 	.word	0x00cd02e3
   138c4:	00cd00cd 	.word	0x00cd00cd
   138c8:	00cd006a 	.word	0x00cd006a
   138cc:	020500cd 	.word	0x020500cd
   138d0:	00cd0284 	.word	0x00cd0284
   138d4:	02c90210 	.word	0x02c90210
   138d8:	02bd00cd 	.word	0x02bd00cd
   138dc:	005b005b 	.word	0x005b005b
   138e0:	005b005b 	.word	0x005b005b
   138e4:	005b005b 	.word	0x005b005b
   138e8:	005b005b 	.word	0x005b005b
   138ec:	00cd005b 	.word	0x00cd005b
   138f0:	00cd00cd 	.word	0x00cd00cd
   138f4:	00cd00cd 	.word	0x00cd00cd
   138f8:	00cd00cd 	.word	0x00cd00cd
   138fc:	00cd0153 	.word	0x00cd0153
   13900:	021a0183 	.word	0x021a0183
   13904:	01530153 	.word	0x01530153
   13908:	00cd0153 	.word	0x00cd0153
   1390c:	00cd00cd 	.word	0x00cd00cd
   13910:	021500cd 	.word	0x021500cd
   13914:	00cd00cd 	.word	0x00cd00cd
   13918:	00cd0296 	.word	0x00cd0296
   1391c:	00cd00cd 	.word	0x00cd00cd
   13920:	00cd01ab 	.word	0x00cd01ab
   13924:	00cd02aa 	.word	0x00cd02aa
   13928:	06e300cd 	.word	0x06e300cd
   1392c:	00cd00cd 	.word	0x00cd00cd
   13930:	00cd00cd 	.word	0x00cd00cd
   13934:	00cd00cd 	.word	0x00cd00cd
   13938:	00cd00cd 	.word	0x00cd00cd
   1393c:	00cd0153 	.word	0x00cd0153
   13940:	01de0183 	.word	0x01de0183
   13944:	01530153 	.word	0x01530153
   13948:	02770153 	.word	0x02770153
   1394c:	007f01de 	.word	0x007f01de
   13950:	028900cd 	.word	0x028900cd
   13954:	025f00cd 	.word	0x025f00cd
   13958:	022f06e0 	.word	0x022f06e0
   1395c:	00cd007f 	.word	0x00cd007f
   13960:	007c01ab 	.word	0x007c01ab
   13964:	00cd06b8 	.word	0x00cd06b8
   13968:	06bd00cd 	.word	0x06bd00cd
   1396c:	007c00cd 	.word	0x007c00cd
   13970:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13974:	2100      	movs	r1, #0
   13976:	f819 3b01 	ldrb.w	r3, [r9], #1
   1397a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1397e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13982:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13986:	2a09      	cmp	r2, #9
   13988:	d9f5      	bls.n	13976 <_svfprintf_r+0x186>
   1398a:	9106      	str	r1, [sp, #24]
   1398c:	e78e      	b.n	138ac <_svfprintf_r+0xbc>
   1398e:	4658      	mov	r0, fp
   13990:	f003 fa94 	bl	16ebc <_localeconv_r>
   13994:	6843      	ldr	r3, [r0, #4]
   13996:	9315      	str	r3, [sp, #84]	; 0x54
   13998:	4618      	mov	r0, r3
   1399a:	f7fe fb51 	bl	12040 <strlen>
   1399e:	9016      	str	r0, [sp, #88]	; 0x58
   139a0:	4658      	mov	r0, fp
   139a2:	f003 fa8b 	bl	16ebc <_localeconv_r>
   139a6:	6883      	ldr	r3, [r0, #8]
   139a8:	9313      	str	r3, [sp, #76]	; 0x4c
   139aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   139ac:	2b00      	cmp	r3, #0
   139ae:	f040 862d 	bne.w	1460c <_svfprintf_r+0xe1c>
   139b2:	f899 3000 	ldrb.w	r3, [r9]
   139b6:	e777      	b.n	138a8 <_svfprintf_r+0xb8>
   139b8:	f899 3000 	ldrb.w	r3, [r9]
   139bc:	f048 0820 	orr.w	r8, r8, #32
   139c0:	e772      	b.n	138a8 <_svfprintf_r+0xb8>
   139c2:	2208      	movs	r2, #8
   139c4:	2100      	movs	r1, #0
   139c6:	4638      	mov	r0, r7
   139c8:	f7fd ff4e 	bl	11868 <memset>
   139cc:	2301      	movs	r3, #1
   139ce:	4499      	add	r9, r3
   139d0:	e741      	b.n	13856 <_svfprintf_r+0x66>
   139d2:	ebb9 0504 	subs.w	r5, r9, r4
   139d6:	4606      	mov	r6, r0
   139d8:	d011      	beq.n	139fe <_svfprintf_r+0x20e>
   139da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   139dc:	442b      	add	r3, r5
   139de:	9326      	str	r3, [sp, #152]	; 0x98
   139e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   139e2:	3301      	adds	r3, #1
   139e4:	2b07      	cmp	r3, #7
   139e6:	e9ca 4500 	strd	r4, r5, [sl]
   139ea:	9325      	str	r3, [sp, #148]	; 0x94
   139ec:	dc1c      	bgt.n	13a28 <_svfprintf_r+0x238>
   139ee:	f10a 0a08 	add.w	sl, sl, #8
   139f2:	9b04      	ldr	r3, [sp, #16]
   139f4:	442b      	add	r3, r5
   139f6:	9304      	str	r3, [sp, #16]
   139f8:	2e00      	cmp	r6, #0
   139fa:	f47f af47 	bne.w	1388c <_svfprintf_r+0x9c>
   139fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   13a00:	2b00      	cmp	r3, #0
   13a02:	f041 820b 	bne.w	14e1c <_svfprintf_r+0x162c>
   13a06:	ee1b 3a10 	vmov	r3, s22
   13a0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   13a0e:	f013 0f40 	tst.w	r3, #64	; 0x40
   13a12:	9b04      	ldr	r3, [sp, #16]
   13a14:	bf18      	it	ne
   13a16:	f04f 33ff 	movne.w	r3, #4294967295
   13a1a:	9304      	str	r3, [sp, #16]
   13a1c:	9804      	ldr	r0, [sp, #16]
   13a1e:	b051      	add	sp, #324	; 0x144
   13a20:	ecbd 8b08 	vpop	{d8-d11}
   13a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a28:	ee1b 1a10 	vmov	r1, s22
   13a2c:	aa24      	add	r2, sp, #144	; 0x90
   13a2e:	4658      	mov	r0, fp
   13a30:	f004 fd6a 	bl	18508 <__ssprint_r>
   13a34:	2800      	cmp	r0, #0
   13a36:	d1e6      	bne.n	13a06 <_svfprintf_r+0x216>
   13a38:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13a3c:	e7d9      	b.n	139f2 <_svfprintf_r+0x202>
   13a3e:	bf00      	nop
	...
   13a48:	ffffffff 	.word	0xffffffff
   13a4c:	7fefffff 	.word	0x7fefffff
   13a50:	20008e9c 	.word	0x20008e9c
   13a54:	930b      	str	r3, [sp, #44]	; 0x2c
   13a56:	2b00      	cmp	r3, #0
   13a58:	d0d1      	beq.n	139fe <_svfprintf_r+0x20e>
   13a5a:	2100      	movs	r1, #0
   13a5c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13a60:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   13a64:	2301      	movs	r3, #1
   13a66:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   13a6a:	9302      	str	r3, [sp, #8]
   13a6c:	9107      	str	r1, [sp, #28]
   13a6e:	9305      	str	r3, [sp, #20]
   13a70:	9103      	str	r1, [sp, #12]
   13a72:	910f      	str	r1, [sp, #60]	; 0x3c
   13a74:	ac37      	add	r4, sp, #220	; 0xdc
   13a76:	f018 0302 	ands.w	r3, r8, #2
   13a7a:	9309      	str	r3, [sp, #36]	; 0x24
   13a7c:	d002      	beq.n	13a84 <_svfprintf_r+0x294>
   13a7e:	9b02      	ldr	r3, [sp, #8]
   13a80:	3302      	adds	r3, #2
   13a82:	9302      	str	r3, [sp, #8]
   13a84:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   13a88:	930a      	str	r3, [sp, #40]	; 0x28
   13a8a:	d105      	bne.n	13a98 <_svfprintf_r+0x2a8>
   13a8c:	9b06      	ldr	r3, [sp, #24]
   13a8e:	9a02      	ldr	r2, [sp, #8]
   13a90:	1a9d      	subs	r5, r3, r2
   13a92:	2d00      	cmp	r5, #0
   13a94:	f300 8369 	bgt.w	1416a <_svfprintf_r+0x97a>
   13a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13a9a:	b189      	cbz	r1, 13ac0 <_svfprintf_r+0x2d0>
   13a9c:	9925      	ldr	r1, [sp, #148]	; 0x94
   13a9e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   13aa2:	3101      	adds	r1, #1
   13aa4:	3201      	adds	r2, #1
   13aa6:	f8ca 0000 	str.w	r0, [sl]
   13aaa:	2907      	cmp	r1, #7
   13aac:	f04f 0001 	mov.w	r0, #1
   13ab0:	9226      	str	r2, [sp, #152]	; 0x98
   13ab2:	9125      	str	r1, [sp, #148]	; 0x94
   13ab4:	f8ca 0004 	str.w	r0, [sl, #4]
   13ab8:	f300 83a2 	bgt.w	14200 <_svfprintf_r+0xa10>
   13abc:	f10a 0a08 	add.w	sl, sl, #8
   13ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13ac2:	b183      	cbz	r3, 13ae6 <_svfprintf_r+0x2f6>
   13ac4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13ac6:	a91a      	add	r1, sp, #104	; 0x68
   13ac8:	3301      	adds	r3, #1
   13aca:	3202      	adds	r2, #2
   13acc:	f8ca 1000 	str.w	r1, [sl]
   13ad0:	2b07      	cmp	r3, #7
   13ad2:	f04f 0102 	mov.w	r1, #2
   13ad6:	9226      	str	r2, [sp, #152]	; 0x98
   13ad8:	9325      	str	r3, [sp, #148]	; 0x94
   13ada:	f8ca 1004 	str.w	r1, [sl, #4]
   13ade:	f300 83a3 	bgt.w	14228 <_svfprintf_r+0xa38>
   13ae2:	f10a 0a08 	add.w	sl, sl, #8
   13ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ae8:	2b80      	cmp	r3, #128	; 0x80
   13aea:	f000 826c 	beq.w	13fc6 <_svfprintf_r+0x7d6>
   13aee:	9b03      	ldr	r3, [sp, #12]
   13af0:	9905      	ldr	r1, [sp, #20]
   13af2:	1a5d      	subs	r5, r3, r1
   13af4:	2d00      	cmp	r5, #0
   13af6:	f300 82a5 	bgt.w	14044 <_svfprintf_r+0x854>
   13afa:	f418 7f80 	tst.w	r8, #256	; 0x100
   13afe:	f040 820d 	bne.w	13f1c <_svfprintf_r+0x72c>
   13b02:	9b05      	ldr	r3, [sp, #20]
   13b04:	f8ca 3004 	str.w	r3, [sl, #4]
   13b08:	441a      	add	r2, r3
   13b0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13b0c:	f8ca 4000 	str.w	r4, [sl]
   13b10:	3301      	adds	r3, #1
   13b12:	2b07      	cmp	r3, #7
   13b14:	9226      	str	r2, [sp, #152]	; 0x98
   13b16:	9325      	str	r3, [sp, #148]	; 0x94
   13b18:	f300 831b 	bgt.w	14152 <_svfprintf_r+0x962>
   13b1c:	f10a 0a08 	add.w	sl, sl, #8
   13b20:	f018 0f04 	tst.w	r8, #4
   13b24:	d005      	beq.n	13b32 <_svfprintf_r+0x342>
   13b26:	9b06      	ldr	r3, [sp, #24]
   13b28:	9902      	ldr	r1, [sp, #8]
   13b2a:	1a5c      	subs	r4, r3, r1
   13b2c:	2c00      	cmp	r4, #0
   13b2e:	f300 8388 	bgt.w	14242 <_svfprintf_r+0xa52>
   13b32:	9b04      	ldr	r3, [sp, #16]
   13b34:	9906      	ldr	r1, [sp, #24]
   13b36:	9802      	ldr	r0, [sp, #8]
   13b38:	4281      	cmp	r1, r0
   13b3a:	bfac      	ite	ge
   13b3c:	185b      	addge	r3, r3, r1
   13b3e:	181b      	addlt	r3, r3, r0
   13b40:	9304      	str	r3, [sp, #16]
   13b42:	2a00      	cmp	r2, #0
   13b44:	f040 82b0 	bne.w	140a8 <_svfprintf_r+0x8b8>
   13b48:	2300      	movs	r3, #0
   13b4a:	9325      	str	r3, [sp, #148]	; 0x94
   13b4c:	9b07      	ldr	r3, [sp, #28]
   13b4e:	b11b      	cbz	r3, 13b58 <_svfprintf_r+0x368>
   13b50:	9907      	ldr	r1, [sp, #28]
   13b52:	4658      	mov	r0, fp
   13b54:	f7fe fb86 	bl	12264 <_free_r>
   13b58:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13b5c:	464c      	mov	r4, r9
   13b5e:	e679      	b.n	13854 <_svfprintf_r+0x64>
   13b60:	930b      	str	r3, [sp, #44]	; 0x2c
   13b62:	9b08      	ldr	r3, [sp, #32]
   13b64:	3307      	adds	r3, #7
   13b66:	f023 0307 	bic.w	r3, r3, #7
   13b6a:	ecb3 8b02 	vldmia	r3!, {d8}
   13b6e:	eeb0 7bc8 	vabs.f64	d7, d8
   13b72:	eeb4 7b49 	vcmp.f64	d7, d9
   13b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13b7a:	9308      	str	r3, [sp, #32]
   13b7c:	f340 84e9 	ble.w	14552 <_svfprintf_r+0xd62>
   13b80:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   13b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13b88:	f101 8059 	bmi.w	14c3e <_svfprintf_r+0x144e>
   13b8c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13b90:	4cab      	ldr	r4, [pc, #684]	; (13e40 <_svfprintf_r+0x650>)
   13b92:	4bac      	ldr	r3, [pc, #688]	; (13e44 <_svfprintf_r+0x654>)
   13b94:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   13b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13b9a:	2a47      	cmp	r2, #71	; 0x47
   13b9c:	bfc8      	it	gt
   13b9e:	461c      	movgt	r4, r3
   13ba0:	2300      	movs	r3, #0
   13ba2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13ba6:	2203      	movs	r2, #3
   13ba8:	9307      	str	r3, [sp, #28]
   13baa:	9202      	str	r2, [sp, #8]
   13bac:	9205      	str	r2, [sp, #20]
   13bae:	9303      	str	r3, [sp, #12]
   13bb0:	930f      	str	r3, [sp, #60]	; 0x3c
   13bb2:	2900      	cmp	r1, #0
   13bb4:	f43f af5f 	beq.w	13a76 <_svfprintf_r+0x286>
   13bb8:	9b02      	ldr	r3, [sp, #8]
   13bba:	3301      	adds	r3, #1
   13bbc:	9302      	str	r3, [sp, #8]
   13bbe:	e75a      	b.n	13a76 <_svfprintf_r+0x286>
   13bc0:	2b43      	cmp	r3, #67	; 0x43
   13bc2:	930b      	str	r3, [sp, #44]	; 0x2c
   13bc4:	d003      	beq.n	13bce <_svfprintf_r+0x3de>
   13bc6:	f018 0f10 	tst.w	r8, #16
   13bca:	f000 855d 	beq.w	14688 <_svfprintf_r+0xe98>
   13bce:	9d08      	ldr	r5, [sp, #32]
   13bd0:	2208      	movs	r2, #8
   13bd2:	2100      	movs	r1, #0
   13bd4:	a822      	add	r0, sp, #136	; 0x88
   13bd6:	ac37      	add	r4, sp, #220	; 0xdc
   13bd8:	f7fd fe46 	bl	11868 <memset>
   13bdc:	ab22      	add	r3, sp, #136	; 0x88
   13bde:	f855 2b04 	ldr.w	r2, [r5], #4
   13be2:	4621      	mov	r1, r4
   13be4:	4658      	mov	r0, fp
   13be6:	f004 fb65 	bl	182b4 <_wcrtomb_r>
   13bea:	4603      	mov	r3, r0
   13bec:	3301      	adds	r3, #1
   13bee:	9005      	str	r0, [sp, #20]
   13bf0:	f001 82ee 	beq.w	151d0 <_svfprintf_r+0x19e0>
   13bf4:	9b05      	ldr	r3, [sp, #20]
   13bf6:	9508      	str	r5, [sp, #32]
   13bf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13bfc:	9302      	str	r3, [sp, #8]
   13bfe:	2100      	movs	r1, #0
   13c00:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   13c04:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   13c08:	9107      	str	r1, [sp, #28]
   13c0a:	9103      	str	r1, [sp, #12]
   13c0c:	910f      	str	r1, [sp, #60]	; 0x3c
   13c0e:	e732      	b.n	13a76 <_svfprintf_r+0x286>
   13c10:	930b      	str	r3, [sp, #44]	; 0x2c
   13c12:	9b08      	ldr	r3, [sp, #32]
   13c14:	461a      	mov	r2, r3
   13c16:	2300      	movs	r3, #0
   13c18:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   13c1c:	4613      	mov	r3, r2
   13c1e:	f853 4b04 	ldr.w	r4, [r3], #4
   13c22:	9308      	str	r3, [sp, #32]
   13c24:	2c00      	cmp	r4, #0
   13c26:	f000 8548 	beq.w	146ba <_svfprintf_r+0xeca>
   13c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13c2c:	2b53      	cmp	r3, #83	; 0x53
   13c2e:	f000 86ec 	beq.w	14a0a <_svfprintf_r+0x121a>
   13c32:	f018 0310 	ands.w	r3, r8, #16
   13c36:	930c      	str	r3, [sp, #48]	; 0x30
   13c38:	f040 86e7 	bne.w	14a0a <_svfprintf_r+0x121a>
   13c3c:	9b03      	ldr	r3, [sp, #12]
   13c3e:	1c5d      	adds	r5, r3, #1
   13c40:	f001 80e5 	beq.w	14e0e <_svfprintf_r+0x161e>
   13c44:	990c      	ldr	r1, [sp, #48]	; 0x30
   13c46:	461a      	mov	r2, r3
   13c48:	4620      	mov	r0, r4
   13c4a:	f7fe f9a9 	bl	11fa0 <memchr>
   13c4e:	9007      	str	r0, [sp, #28]
   13c50:	2800      	cmp	r0, #0
   13c52:	f001 8328 	beq.w	152a6 <_svfprintf_r+0x1ab6>
   13c56:	9b07      	ldr	r3, [sp, #28]
   13c58:	1b1a      	subs	r2, r3, r4
   13c5a:	9205      	str	r2, [sp, #20]
   13c5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13c5e:	9303      	str	r3, [sp, #12]
   13c60:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   13c64:	930f      	str	r3, [sp, #60]	; 0x3c
   13c66:	930d      	str	r3, [sp, #52]	; 0x34
   13c68:	9307      	str	r3, [sp, #28]
   13c6a:	2373      	movs	r3, #115	; 0x73
   13c6c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13c70:	9202      	str	r2, [sp, #8]
   13c72:	930b      	str	r3, [sp, #44]	; 0x2c
   13c74:	e79d      	b.n	13bb2 <_svfprintf_r+0x3c2>
   13c76:	f018 0f20 	tst.w	r8, #32
   13c7a:	930b      	str	r3, [sp, #44]	; 0x2c
   13c7c:	9b08      	ldr	r3, [sp, #32]
   13c7e:	d03d      	beq.n	13cfc <_svfprintf_r+0x50c>
   13c80:	3307      	adds	r3, #7
   13c82:	f023 0307 	bic.w	r3, r3, #7
   13c86:	461a      	mov	r2, r3
   13c88:	4611      	mov	r1, r2
   13c8a:	685b      	ldr	r3, [r3, #4]
   13c8c:	f851 2b08 	ldr.w	r2, [r1], #8
   13c90:	9108      	str	r1, [sp, #32]
   13c92:	4619      	mov	r1, r3
   13c94:	2b00      	cmp	r3, #0
   13c96:	f2c0 840c 	blt.w	144b2 <_svfprintf_r+0xcc2>
   13c9a:	9b03      	ldr	r3, [sp, #12]
   13c9c:	3301      	adds	r3, #1
   13c9e:	f000 829e 	beq.w	141de <_svfprintf_r+0x9ee>
   13ca2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   13ca6:	ea52 0301 	orrs.w	r3, r2, r1
   13caa:	9002      	str	r0, [sp, #8]
   13cac:	f040 8299 	bne.w	141e2 <_svfprintf_r+0x9f2>
   13cb0:	9b03      	ldr	r3, [sp, #12]
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	f040 829a 	bne.w	141ec <_svfprintf_r+0x9fc>
   13cb8:	4680      	mov	r8, r0
   13cba:	2300      	movs	r3, #0
   13cbc:	9303      	str	r3, [sp, #12]
   13cbe:	9305      	str	r3, [sp, #20]
   13cc0:	ac50      	add	r4, sp, #320	; 0x140
   13cc2:	e106      	b.n	13ed2 <_svfprintf_r+0x6e2>
   13cc4:	9b08      	ldr	r3, [sp, #32]
   13cc6:	f853 2b04 	ldr.w	r2, [r3], #4
   13cca:	9206      	str	r2, [sp, #24]
   13ccc:	2a00      	cmp	r2, #0
   13cce:	f280 8419 	bge.w	14504 <_svfprintf_r+0xd14>
   13cd2:	9a06      	ldr	r2, [sp, #24]
   13cd4:	9308      	str	r3, [sp, #32]
   13cd6:	4252      	negs	r2, r2
   13cd8:	9206      	str	r2, [sp, #24]
   13cda:	f899 3000 	ldrb.w	r3, [r9]
   13cde:	f048 0804 	orr.w	r8, r8, #4
   13ce2:	e5e1      	b.n	138a8 <_svfprintf_r+0xb8>
   13ce4:	f899 3000 	ldrb.w	r3, [r9]
   13ce8:	f048 0808 	orr.w	r8, r8, #8
   13cec:	e5dc      	b.n	138a8 <_svfprintf_r+0xb8>
   13cee:	f048 0810 	orr.w	r8, r8, #16
   13cf2:	f018 0f20 	tst.w	r8, #32
   13cf6:	930b      	str	r3, [sp, #44]	; 0x2c
   13cf8:	9b08      	ldr	r3, [sp, #32]
   13cfa:	d1c1      	bne.n	13c80 <_svfprintf_r+0x490>
   13cfc:	f018 0f10 	tst.w	r8, #16
   13d00:	f040 840b 	bne.w	1451a <_svfprintf_r+0xd2a>
   13d04:	f018 0f40 	tst.w	r8, #64	; 0x40
   13d08:	f000 8403 	beq.w	14512 <_svfprintf_r+0xd22>
   13d0c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   13d10:	9308      	str	r3, [sp, #32]
   13d12:	17d1      	asrs	r1, r2, #31
   13d14:	460b      	mov	r3, r1
   13d16:	e7bd      	b.n	13c94 <_svfprintf_r+0x4a4>
   13d18:	9b08      	ldr	r3, [sp, #32]
   13d1a:	f048 0202 	orr.w	r2, r8, #2
   13d1e:	9202      	str	r2, [sp, #8]
   13d20:	f853 2b04 	ldr.w	r2, [r3], #4
   13d24:	9308      	str	r3, [sp, #32]
   13d26:	f647 0330 	movw	r3, #30768	; 0x7830
   13d2a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   13d2e:	2078      	movs	r0, #120	; 0x78
   13d30:	4b45      	ldr	r3, [pc, #276]	; (13e48 <_svfprintf_r+0x658>)
   13d32:	9311      	str	r3, [sp, #68]	; 0x44
   13d34:	2100      	movs	r1, #0
   13d36:	2302      	movs	r3, #2
   13d38:	900b      	str	r0, [sp, #44]	; 0x2c
   13d3a:	2000      	movs	r0, #0
   13d3c:	9c03      	ldr	r4, [sp, #12]
   13d3e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   13d42:	1c60      	adds	r0, r4, #1
   13d44:	f000 80ad 	beq.w	13ea2 <_svfprintf_r+0x6b2>
   13d48:	9802      	ldr	r0, [sp, #8]
   13d4a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   13d4e:	ea52 0001 	orrs.w	r0, r2, r1
   13d52:	f040 80a4 	bne.w	13e9e <_svfprintf_r+0x6ae>
   13d56:	2c00      	cmp	r4, #0
   13d58:	f040 86ae 	bne.w	14ab8 <_svfprintf_r+0x12c8>
   13d5c:	2b00      	cmp	r3, #0
   13d5e:	d1ac      	bne.n	13cba <_svfprintf_r+0x4ca>
   13d60:	9b02      	ldr	r3, [sp, #8]
   13d62:	f013 0301 	ands.w	r3, r3, #1
   13d66:	9305      	str	r3, [sp, #20]
   13d68:	f000 83d1 	beq.w	1450e <_svfprintf_r+0xd1e>
   13d6c:	2330      	movs	r3, #48	; 0x30
   13d6e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   13d72:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   13d76:	e0ac      	b.n	13ed2 <_svfprintf_r+0x6e2>
   13d78:	f018 0f20 	tst.w	r8, #32
   13d7c:	f040 83d4 	bne.w	14528 <_svfprintf_r+0xd38>
   13d80:	f018 0f10 	tst.w	r8, #16
   13d84:	f040 869f 	bne.w	14ac6 <_svfprintf_r+0x12d6>
   13d88:	f018 0f40 	tst.w	r8, #64	; 0x40
   13d8c:	f040 8797 	bne.w	14cbe <_svfprintf_r+0x14ce>
   13d90:	f418 7f00 	tst.w	r8, #512	; 0x200
   13d94:	f000 8697 	beq.w	14ac6 <_svfprintf_r+0x12d6>
   13d98:	9b08      	ldr	r3, [sp, #32]
   13d9a:	9904      	ldr	r1, [sp, #16]
   13d9c:	f853 2b04 	ldr.w	r2, [r3], #4
   13da0:	9308      	str	r3, [sp, #32]
   13da2:	7011      	strb	r1, [r2, #0]
   13da4:	464c      	mov	r4, r9
   13da6:	e555      	b.n	13854 <_svfprintf_r+0x64>
   13da8:	f899 3000 	ldrb.w	r3, [r9]
   13dac:	2b68      	cmp	r3, #104	; 0x68
   13dae:	bf03      	ittte	eq
   13db0:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13db4:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   13db8:	f109 0901 	addeq.w	r9, r9, #1
   13dbc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   13dc0:	e572      	b.n	138a8 <_svfprintf_r+0xb8>
   13dc2:	f899 3000 	ldrb.w	r3, [r9]
   13dc6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   13dca:	e56d      	b.n	138a8 <_svfprintf_r+0xb8>
   13dcc:	f899 3000 	ldrb.w	r3, [r9]
   13dd0:	2b6c      	cmp	r3, #108	; 0x6c
   13dd2:	bf03      	ittte	eq
   13dd4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   13dd8:	f048 0820 	orreq.w	r8, r8, #32
   13ddc:	f109 0901 	addeq.w	r9, r9, #1
   13de0:	f048 0810 	orrne.w	r8, r8, #16
   13de4:	e560      	b.n	138a8 <_svfprintf_r+0xb8>
   13de6:	930b      	str	r3, [sp, #44]	; 0x2c
   13de8:	f048 0810 	orr.w	r8, r8, #16
   13dec:	f018 0120 	ands.w	r1, r8, #32
   13df0:	f000 8351 	beq.w	14496 <_svfprintf_r+0xca6>
   13df4:	9b08      	ldr	r3, [sp, #32]
   13df6:	3307      	adds	r3, #7
   13df8:	f023 0307 	bic.w	r3, r3, #7
   13dfc:	6859      	ldr	r1, [r3, #4]
   13dfe:	f853 2b08 	ldr.w	r2, [r3], #8
   13e02:	9308      	str	r3, [sp, #32]
   13e04:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   13e08:	9302      	str	r3, [sp, #8]
   13e0a:	2300      	movs	r3, #0
   13e0c:	e795      	b.n	13d3a <_svfprintf_r+0x54a>
   13e0e:	930b      	str	r3, [sp, #44]	; 0x2c
   13e10:	f048 0310 	orr.w	r3, r8, #16
   13e14:	9302      	str	r3, [sp, #8]
   13e16:	9b02      	ldr	r3, [sp, #8]
   13e18:	f013 0120 	ands.w	r1, r3, #32
   13e1c:	f000 8329 	beq.w	14472 <_svfprintf_r+0xc82>
   13e20:	9b08      	ldr	r3, [sp, #32]
   13e22:	3307      	adds	r3, #7
   13e24:	f023 0307 	bic.w	r3, r3, #7
   13e28:	6859      	ldr	r1, [r3, #4]
   13e2a:	f853 2b08 	ldr.w	r2, [r3], #8
   13e2e:	9308      	str	r3, [sp, #32]
   13e30:	2301      	movs	r3, #1
   13e32:	e782      	b.n	13d3a <_svfprintf_r+0x54a>
   13e34:	f899 3000 	ldrb.w	r3, [r9]
   13e38:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   13e3c:	e534      	b.n	138a8 <_svfprintf_r+0xb8>
   13e3e:	bf00      	nop
   13e40:	20001114 	.word	0x20001114
   13e44:	20000b6c 	.word	0x20000b6c
   13e48:	2000111c 	.word	0x2000111c
   13e4c:	4649      	mov	r1, r9
   13e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
   13e52:	2b2a      	cmp	r3, #42	; 0x2a
   13e54:	f001 8249 	beq.w	152ea <_svfprintf_r+0x1afa>
   13e58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13e5c:	2a09      	cmp	r2, #9
   13e5e:	4689      	mov	r9, r1
   13e60:	bf98      	it	ls
   13e62:	2100      	movls	r1, #0
   13e64:	f201 8144 	bhi.w	150f0 <_svfprintf_r+0x1900>
   13e68:	f819 3b01 	ldrb.w	r3, [r9], #1
   13e6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   13e70:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   13e74:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   13e78:	2a09      	cmp	r2, #9
   13e7a:	d9f5      	bls.n	13e68 <_svfprintf_r+0x678>
   13e7c:	9103      	str	r1, [sp, #12]
   13e7e:	e515      	b.n	138ac <_svfprintf_r+0xbc>
   13e80:	f899 3000 	ldrb.w	r3, [r9]
   13e84:	f048 0801 	orr.w	r8, r8, #1
   13e88:	e50e      	b.n	138a8 <_svfprintf_r+0xb8>
   13e8a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   13e8e:	2b00      	cmp	r3, #0
   13e90:	f47f ad8f 	bne.w	139b2 <_svfprintf_r+0x1c2>
   13e94:	f899 3000 	ldrb.w	r3, [r9]
   13e98:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   13e9c:	e504      	b.n	138a8 <_svfprintf_r+0xb8>
   13e9e:	f8cd 8008 	str.w	r8, [sp, #8]
   13ea2:	2b01      	cmp	r3, #1
   13ea4:	f000 819d 	beq.w	141e2 <_svfprintf_r+0x9f2>
   13ea8:	2b02      	cmp	r3, #2
   13eaa:	ac50      	add	r4, sp, #320	; 0x140
   13eac:	d120      	bne.n	13ef0 <_svfprintf_r+0x700>
   13eae:	9811      	ldr	r0, [sp, #68]	; 0x44
   13eb0:	f002 030f 	and.w	r3, r2, #15
   13eb4:	0912      	lsrs	r2, r2, #4
   13eb6:	5cc3      	ldrb	r3, [r0, r3]
   13eb8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   13ebc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   13ec0:	0909      	lsrs	r1, r1, #4
   13ec2:	ea52 0301 	orrs.w	r3, r2, r1
   13ec6:	d1f3      	bne.n	13eb0 <_svfprintf_r+0x6c0>
   13ec8:	ab50      	add	r3, sp, #320	; 0x140
   13eca:	1b1b      	subs	r3, r3, r4
   13ecc:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13ed0:	9305      	str	r3, [sp, #20]
   13ed2:	9a05      	ldr	r2, [sp, #20]
   13ed4:	9803      	ldr	r0, [sp, #12]
   13ed6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   13eda:	4282      	cmp	r2, r0
   13edc:	f04f 0300 	mov.w	r3, #0
   13ee0:	bfb8      	it	lt
   13ee2:	4602      	movlt	r2, r0
   13ee4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   13ee8:	9307      	str	r3, [sp, #28]
   13eea:	9202      	str	r2, [sp, #8]
   13eec:	930f      	str	r3, [sp, #60]	; 0x3c
   13eee:	e660      	b.n	13bb2 <_svfprintf_r+0x3c2>
   13ef0:	f002 0307 	and.w	r3, r2, #7
   13ef4:	08d2      	lsrs	r2, r2, #3
   13ef6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   13efa:	08c9      	lsrs	r1, r1, #3
   13efc:	3330      	adds	r3, #48	; 0x30
   13efe:	ea52 0501 	orrs.w	r5, r2, r1
   13f02:	4620      	mov	r0, r4
   13f04:	f804 3d01 	strb.w	r3, [r4, #-1]!
   13f08:	d1f2      	bne.n	13ef0 <_svfprintf_r+0x700>
   13f0a:	9a02      	ldr	r2, [sp, #8]
   13f0c:	07d1      	lsls	r1, r2, #31
   13f0e:	f100 824d 	bmi.w	143ac <_svfprintf_r+0xbbc>
   13f12:	ab50      	add	r3, sp, #320	; 0x140
   13f14:	1b1b      	subs	r3, r3, r4
   13f16:	4690      	mov	r8, r2
   13f18:	9305      	str	r3, [sp, #20]
   13f1a:	e7da      	b.n	13ed2 <_svfprintf_r+0x6e2>
   13f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13f1e:	2b65      	cmp	r3, #101	; 0x65
   13f20:	f340 80d4 	ble.w	140cc <_svfprintf_r+0x8dc>
   13f24:	eeb5 8b40 	vcmp.f64	d8, #0.0
   13f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   13f2c:	f040 81c1 	bne.w	142b2 <_svfprintf_r+0xac2>
   13f30:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f32:	49ba      	ldr	r1, [pc, #744]	; (1421c <_svfprintf_r+0xa2c>)
   13f34:	f8ca 1000 	str.w	r1, [sl]
   13f38:	3301      	adds	r3, #1
   13f3a:	3201      	adds	r2, #1
   13f3c:	2101      	movs	r1, #1
   13f3e:	2b07      	cmp	r3, #7
   13f40:	9226      	str	r2, [sp, #152]	; 0x98
   13f42:	9325      	str	r3, [sp, #148]	; 0x94
   13f44:	f8ca 1004 	str.w	r1, [sl, #4]
   13f48:	f300 8551 	bgt.w	149ee <_svfprintf_r+0x11fe>
   13f4c:	f10a 0a08 	add.w	sl, sl, #8
   13f50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   13f52:	990e      	ldr	r1, [sp, #56]	; 0x38
   13f54:	428b      	cmp	r3, r1
   13f56:	f280 82d0 	bge.w	144fa <_svfprintf_r+0xd0a>
   13f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13f5c:	9912      	ldr	r1, [sp, #72]	; 0x48
   13f5e:	441a      	add	r2, r3
   13f60:	e9ca 1300 	strd	r1, r3, [sl]
   13f64:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f66:	9226      	str	r2, [sp, #152]	; 0x98
   13f68:	3301      	adds	r3, #1
   13f6a:	2b07      	cmp	r3, #7
   13f6c:	9325      	str	r3, [sp, #148]	; 0x94
   13f6e:	f300 8397 	bgt.w	146a0 <_svfprintf_r+0xeb0>
   13f72:	f10a 0a08 	add.w	sl, sl, #8
   13f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13f78:	1e5c      	subs	r4, r3, #1
   13f7a:	2c00      	cmp	r4, #0
   13f7c:	f77f add0 	ble.w	13b20 <_svfprintf_r+0x330>
   13f80:	2c10      	cmp	r4, #16
   13f82:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13f84:	f340 856e 	ble.w	14a64 <_svfprintf_r+0x1274>
   13f88:	ee1b 6a10 	vmov	r6, s22
   13f8c:	2510      	movs	r5, #16
   13f8e:	e005      	b.n	13f9c <_svfprintf_r+0x7ac>
   13f90:	f10a 0a08 	add.w	sl, sl, #8
   13f94:	3c10      	subs	r4, #16
   13f96:	2c10      	cmp	r4, #16
   13f98:	f340 8564 	ble.w	14a64 <_svfprintf_r+0x1274>
   13f9c:	3301      	adds	r3, #1
   13f9e:	49a0      	ldr	r1, [pc, #640]	; (14220 <_svfprintf_r+0xa30>)
   13fa0:	3210      	adds	r2, #16
   13fa2:	2b07      	cmp	r3, #7
   13fa4:	e9ca 1500 	strd	r1, r5, [sl]
   13fa8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13fac:	ddf0      	ble.n	13f90 <_svfprintf_r+0x7a0>
   13fae:	aa24      	add	r2, sp, #144	; 0x90
   13fb0:	4631      	mov	r1, r6
   13fb2:	4658      	mov	r0, fp
   13fb4:	f004 faa8 	bl	18508 <__ssprint_r>
   13fb8:	2800      	cmp	r0, #0
   13fba:	d17e      	bne.n	140ba <_svfprintf_r+0x8ca>
   13fbc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   13fc0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   13fc4:	e7e6      	b.n	13f94 <_svfprintf_r+0x7a4>
   13fc6:	9b06      	ldr	r3, [sp, #24]
   13fc8:	9902      	ldr	r1, [sp, #8]
   13fca:	1a5d      	subs	r5, r3, r1
   13fcc:	2d00      	cmp	r5, #0
   13fce:	f77f ad8e 	ble.w	13aee <_svfprintf_r+0x2fe>
   13fd2:	2d10      	cmp	r5, #16
   13fd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13fd6:	dd21      	ble.n	1401c <_svfprintf_r+0x82c>
   13fd8:	9409      	str	r4, [sp, #36]	; 0x24
   13fda:	2610      	movs	r6, #16
   13fdc:	ee1b 4a10 	vmov	r4, s22
   13fe0:	e004      	b.n	13fec <_svfprintf_r+0x7fc>
   13fe2:	3d10      	subs	r5, #16
   13fe4:	2d10      	cmp	r5, #16
   13fe6:	f10a 0a08 	add.w	sl, sl, #8
   13fea:	dd16      	ble.n	1401a <_svfprintf_r+0x82a>
   13fec:	3301      	adds	r3, #1
   13fee:	498c      	ldr	r1, [pc, #560]	; (14220 <_svfprintf_r+0xa30>)
   13ff0:	3210      	adds	r2, #16
   13ff2:	2b07      	cmp	r3, #7
   13ff4:	e9ca 1600 	strd	r1, r6, [sl]
   13ff8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   13ffc:	ddf1      	ble.n	13fe2 <_svfprintf_r+0x7f2>
   13ffe:	aa24      	add	r2, sp, #144	; 0x90
   14000:	4621      	mov	r1, r4
   14002:	4658      	mov	r0, fp
   14004:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14008:	f004 fa7e 	bl	18508 <__ssprint_r>
   1400c:	2800      	cmp	r0, #0
   1400e:	d154      	bne.n	140ba <_svfprintf_r+0x8ca>
   14010:	3d10      	subs	r5, #16
   14012:	2d10      	cmp	r5, #16
   14014:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14018:	dce8      	bgt.n	13fec <_svfprintf_r+0x7fc>
   1401a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1401c:	4980      	ldr	r1, [pc, #512]	; (14220 <_svfprintf_r+0xa30>)
   1401e:	f8ca 5004 	str.w	r5, [sl, #4]
   14022:	3301      	adds	r3, #1
   14024:	442a      	add	r2, r5
   14026:	2b07      	cmp	r3, #7
   14028:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1402c:	f8ca 1000 	str.w	r1, [sl]
   14030:	f300 8526 	bgt.w	14a80 <_svfprintf_r+0x1290>
   14034:	9b03      	ldr	r3, [sp, #12]
   14036:	9905      	ldr	r1, [sp, #20]
   14038:	1a5d      	subs	r5, r3, r1
   1403a:	2d00      	cmp	r5, #0
   1403c:	f10a 0a08 	add.w	sl, sl, #8
   14040:	f77f ad5b 	ble.w	13afa <_svfprintf_r+0x30a>
   14044:	2d10      	cmp	r5, #16
   14046:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14048:	dd1f      	ble.n	1408a <_svfprintf_r+0x89a>
   1404a:	4651      	mov	r1, sl
   1404c:	2610      	movs	r6, #16
   1404e:	ee1b aa10 	vmov	sl, s22
   14052:	e004      	b.n	1405e <_svfprintf_r+0x86e>
   14054:	3d10      	subs	r5, #16
   14056:	2d10      	cmp	r5, #16
   14058:	f101 0108 	add.w	r1, r1, #8
   1405c:	dd14      	ble.n	14088 <_svfprintf_r+0x898>
   1405e:	3301      	adds	r3, #1
   14060:	486f      	ldr	r0, [pc, #444]	; (14220 <_svfprintf_r+0xa30>)
   14062:	3210      	adds	r2, #16
   14064:	2b07      	cmp	r3, #7
   14066:	e9c1 0600 	strd	r0, r6, [r1]
   1406a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1406e:	ddf1      	ble.n	14054 <_svfprintf_r+0x864>
   14070:	aa24      	add	r2, sp, #144	; 0x90
   14072:	4651      	mov	r1, sl
   14074:	4658      	mov	r0, fp
   14076:	f004 fa47 	bl	18508 <__ssprint_r>
   1407a:	b9f0      	cbnz	r0, 140ba <_svfprintf_r+0x8ca>
   1407c:	3d10      	subs	r5, #16
   1407e:	2d10      	cmp	r5, #16
   14080:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14084:	a927      	add	r1, sp, #156	; 0x9c
   14086:	dcea      	bgt.n	1405e <_svfprintf_r+0x86e>
   14088:	468a      	mov	sl, r1
   1408a:	3301      	adds	r3, #1
   1408c:	4964      	ldr	r1, [pc, #400]	; (14220 <_svfprintf_r+0xa30>)
   1408e:	f8ca 5004 	str.w	r5, [sl, #4]
   14092:	442a      	add	r2, r5
   14094:	2b07      	cmp	r3, #7
   14096:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1409a:	f8ca 1000 	str.w	r1, [sl]
   1409e:	f300 81da 	bgt.w	14456 <_svfprintf_r+0xc66>
   140a2:	f10a 0a08 	add.w	sl, sl, #8
   140a6:	e528      	b.n	13afa <_svfprintf_r+0x30a>
   140a8:	ee1b 1a10 	vmov	r1, s22
   140ac:	aa24      	add	r2, sp, #144	; 0x90
   140ae:	4658      	mov	r0, fp
   140b0:	f004 fa2a 	bl	18508 <__ssprint_r>
   140b4:	2800      	cmp	r0, #0
   140b6:	f43f ad47 	beq.w	13b48 <_svfprintf_r+0x358>
   140ba:	9b07      	ldr	r3, [sp, #28]
   140bc:	2b00      	cmp	r3, #0
   140be:	f43f aca2 	beq.w	13a06 <_svfprintf_r+0x216>
   140c2:	9907      	ldr	r1, [sp, #28]
   140c4:	4658      	mov	r0, fp
   140c6:	f7fe f8cd 	bl	12264 <_free_r>
   140ca:	e49c      	b.n	13a06 <_svfprintf_r+0x216>
   140cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140ce:	2b01      	cmp	r3, #1
   140d0:	f340 817a 	ble.w	143c8 <_svfprintf_r+0xbd8>
   140d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   140d6:	f8ca 4000 	str.w	r4, [sl]
   140da:	3301      	adds	r3, #1
   140dc:	3201      	adds	r2, #1
   140de:	2101      	movs	r1, #1
   140e0:	2b07      	cmp	r3, #7
   140e2:	9226      	str	r2, [sp, #152]	; 0x98
   140e4:	9325      	str	r3, [sp, #148]	; 0x94
   140e6:	f8ca 1004 	str.w	r1, [sl, #4]
   140ea:	f300 81f8 	bgt.w	144de <_svfprintf_r+0xcee>
   140ee:	f10a 0a08 	add.w	sl, sl, #8
   140f2:	9910      	ldr	r1, [sp, #64]	; 0x40
   140f4:	9812      	ldr	r0, [sp, #72]	; 0x48
   140f6:	3301      	adds	r3, #1
   140f8:	440a      	add	r2, r1
   140fa:	2b07      	cmp	r3, #7
   140fc:	e9ca 0100 	strd	r0, r1, [sl]
   14100:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14104:	f300 81dd 	bgt.w	144c2 <_svfprintf_r+0xcd2>
   14108:	f10a 0a08 	add.w	sl, sl, #8
   1410c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14114:	f000 8177 	beq.w	14406 <_svfprintf_r+0xc16>
   14118:	990e      	ldr	r1, [sp, #56]	; 0x38
   1411a:	3301      	adds	r3, #1
   1411c:	3901      	subs	r1, #1
   1411e:	3401      	adds	r4, #1
   14120:	440a      	add	r2, r1
   14122:	2b07      	cmp	r3, #7
   14124:	f8ca 4000 	str.w	r4, [sl]
   14128:	9325      	str	r3, [sp, #148]	; 0x94
   1412a:	f8ca 1004 	str.w	r1, [sl, #4]
   1412e:	9226      	str	r2, [sp, #152]	; 0x98
   14130:	f300 815b 	bgt.w	143ea <_svfprintf_r+0xbfa>
   14134:	f10a 0a08 	add.w	sl, sl, #8
   14138:	9914      	ldr	r1, [sp, #80]	; 0x50
   1413a:	f8ca 1004 	str.w	r1, [sl, #4]
   1413e:	3301      	adds	r3, #1
   14140:	440a      	add	r2, r1
   14142:	2b07      	cmp	r3, #7
   14144:	a91e      	add	r1, sp, #120	; 0x78
   14146:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1414a:	f8ca 1000 	str.w	r1, [sl]
   1414e:	f77f ace5 	ble.w	13b1c <_svfprintf_r+0x32c>
   14152:	ee1b 1a10 	vmov	r1, s22
   14156:	aa24      	add	r2, sp, #144	; 0x90
   14158:	4658      	mov	r0, fp
   1415a:	f004 f9d5 	bl	18508 <__ssprint_r>
   1415e:	2800      	cmp	r0, #0
   14160:	d1ab      	bne.n	140ba <_svfprintf_r+0x8ca>
   14162:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14164:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14168:	e4da      	b.n	13b20 <_svfprintf_r+0x330>
   1416a:	2d10      	cmp	r5, #16
   1416c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   14170:	4e2c      	ldr	r6, [pc, #176]	; (14224 <_svfprintf_r+0xa34>)
   14172:	dd24      	ble.n	141be <_svfprintf_r+0x9ce>
   14174:	9417      	str	r4, [sp, #92]	; 0x5c
   14176:	2310      	movs	r3, #16
   14178:	ee1b 4a10 	vmov	r4, s22
   1417c:	4608      	mov	r0, r1
   1417e:	e004      	b.n	1418a <_svfprintf_r+0x99a>
   14180:	3d10      	subs	r5, #16
   14182:	2d10      	cmp	r5, #16
   14184:	f10a 0a08 	add.w	sl, sl, #8
   14188:	dd17      	ble.n	141ba <_svfprintf_r+0x9ca>
   1418a:	3001      	adds	r0, #1
   1418c:	3210      	adds	r2, #16
   1418e:	2807      	cmp	r0, #7
   14190:	e9ca 6300 	strd	r6, r3, [sl]
   14194:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   14198:	ddf2      	ble.n	14180 <_svfprintf_r+0x990>
   1419a:	aa24      	add	r2, sp, #144	; 0x90
   1419c:	4621      	mov	r1, r4
   1419e:	4658      	mov	r0, fp
   141a0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   141a4:	f004 f9b0 	bl	18508 <__ssprint_r>
   141a8:	2800      	cmp	r0, #0
   141aa:	d186      	bne.n	140ba <_svfprintf_r+0x8ca>
   141ac:	3d10      	subs	r5, #16
   141ae:	2d10      	cmp	r5, #16
   141b0:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   141b4:	f04f 0310 	mov.w	r3, #16
   141b8:	dce7      	bgt.n	1418a <_svfprintf_r+0x99a>
   141ba:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   141bc:	4601      	mov	r1, r0
   141be:	3101      	adds	r1, #1
   141c0:	442a      	add	r2, r5
   141c2:	2907      	cmp	r1, #7
   141c4:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   141c8:	f8ca 6000 	str.w	r6, [sl]
   141cc:	f8ca 5004 	str.w	r5, [sl, #4]
   141d0:	f300 83bd 	bgt.w	1494e <_svfprintf_r+0x115e>
   141d4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   141d8:	f10a 0a08 	add.w	sl, sl, #8
   141dc:	e45d      	b.n	13a9a <_svfprintf_r+0x2aa>
   141de:	f8cd 8008 	str.w	r8, [sp, #8]
   141e2:	2a0a      	cmp	r2, #10
   141e4:	f171 0300 	sbcs.w	r3, r1, #0
   141e8:	f080 8345 	bcs.w	14876 <_svfprintf_r+0x1086>
   141ec:	3230      	adds	r2, #48	; 0x30
   141ee:	2301      	movs	r3, #1
   141f0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   141f4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   141f8:	9305      	str	r3, [sp, #20]
   141fa:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   141fe:	e668      	b.n	13ed2 <_svfprintf_r+0x6e2>
   14200:	ee1b 1a10 	vmov	r1, s22
   14204:	aa24      	add	r2, sp, #144	; 0x90
   14206:	4658      	mov	r0, fp
   14208:	f004 f97e 	bl	18508 <__ssprint_r>
   1420c:	2800      	cmp	r0, #0
   1420e:	f47f af54 	bne.w	140ba <_svfprintf_r+0x8ca>
   14212:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14214:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14218:	e452      	b.n	13ac0 <_svfprintf_r+0x2d0>
   1421a:	bf00      	nop
   1421c:	20007ef8 	.word	0x20007ef8
   14220:	2000896c 	.word	0x2000896c
   14224:	20002bc4 	.word	0x20002bc4
   14228:	ee1b 1a10 	vmov	r1, s22
   1422c:	aa24      	add	r2, sp, #144	; 0x90
   1422e:	4658      	mov	r0, fp
   14230:	f004 f96a 	bl	18508 <__ssprint_r>
   14234:	2800      	cmp	r0, #0
   14236:	f47f af40 	bne.w	140ba <_svfprintf_r+0x8ca>
   1423a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1423c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14240:	e451      	b.n	13ae6 <_svfprintf_r+0x2f6>
   14242:	2c10      	cmp	r4, #16
   14244:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14246:	4ebe      	ldr	r6, [pc, #760]	; (14540 <_svfprintf_r+0xd50>)
   14248:	dd1f      	ble.n	1428a <_svfprintf_r+0xa9a>
   1424a:	ee1b 8a10 	vmov	r8, s22
   1424e:	2510      	movs	r5, #16
   14250:	e004      	b.n	1425c <_svfprintf_r+0xa6c>
   14252:	3c10      	subs	r4, #16
   14254:	2c10      	cmp	r4, #16
   14256:	f10a 0a08 	add.w	sl, sl, #8
   1425a:	dd16      	ble.n	1428a <_svfprintf_r+0xa9a>
   1425c:	3301      	adds	r3, #1
   1425e:	3210      	adds	r2, #16
   14260:	2b07      	cmp	r3, #7
   14262:	e9ca 6500 	strd	r6, r5, [sl]
   14266:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1426a:	ddf2      	ble.n	14252 <_svfprintf_r+0xa62>
   1426c:	aa24      	add	r2, sp, #144	; 0x90
   1426e:	4641      	mov	r1, r8
   14270:	4658      	mov	r0, fp
   14272:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14276:	f004 f947 	bl	18508 <__ssprint_r>
   1427a:	2800      	cmp	r0, #0
   1427c:	f47f af1d 	bne.w	140ba <_svfprintf_r+0x8ca>
   14280:	3c10      	subs	r4, #16
   14282:	2c10      	cmp	r4, #16
   14284:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14288:	dce8      	bgt.n	1425c <_svfprintf_r+0xa6c>
   1428a:	3301      	adds	r3, #1
   1428c:	4422      	add	r2, r4
   1428e:	2b07      	cmp	r3, #7
   14290:	e9ca 6400 	strd	r6, r4, [sl]
   14294:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14298:	f77f ac4b 	ble.w	13b32 <_svfprintf_r+0x342>
   1429c:	ee1b 1a10 	vmov	r1, s22
   142a0:	aa24      	add	r2, sp, #144	; 0x90
   142a2:	4658      	mov	r0, fp
   142a4:	f004 f930 	bl	18508 <__ssprint_r>
   142a8:	2800      	cmp	r0, #0
   142aa:	f47f af06 	bne.w	140ba <_svfprintf_r+0x8ca>
   142ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
   142b0:	e43f      	b.n	13b32 <_svfprintf_r+0x342>
   142b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   142b4:	2900      	cmp	r1, #0
   142b6:	f340 835a 	ble.w	1496e <_svfprintf_r+0x117e>
   142ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   142bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   142be:	429e      	cmp	r6, r3
   142c0:	bfa8      	it	ge
   142c2:	461e      	movge	r6, r3
   142c4:	2e00      	cmp	r6, #0
   142c6:	dd0b      	ble.n	142e0 <_svfprintf_r+0xaf0>
   142c8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   142ca:	3301      	adds	r3, #1
   142cc:	4432      	add	r2, r6
   142ce:	2b07      	cmp	r3, #7
   142d0:	e9ca 4600 	strd	r4, r6, [sl]
   142d4:	9226      	str	r2, [sp, #152]	; 0x98
   142d6:	9325      	str	r3, [sp, #148]	; 0x94
   142d8:	f300 8689 	bgt.w	14fee <_svfprintf_r+0x17fe>
   142dc:	f10a 0a08 	add.w	sl, sl, #8
   142e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   142e2:	2e00      	cmp	r6, #0
   142e4:	bfa8      	it	ge
   142e6:	1bad      	subge	r5, r5, r6
   142e8:	2d00      	cmp	r5, #0
   142ea:	f300 8203 	bgt.w	146f4 <_svfprintf_r+0xf04>
   142ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   142f0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   142f4:	4423      	add	r3, r4
   142f6:	9305      	str	r3, [sp, #20]
   142f8:	f040 821f 	bne.w	1473a <_svfprintf_r+0xf4a>
   142fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   142fe:	990e      	ldr	r1, [sp, #56]	; 0x38
   14300:	428b      	cmp	r3, r1
   14302:	db03      	blt.n	1430c <_svfprintf_r+0xb1c>
   14304:	f018 0f01 	tst.w	r8, #1
   14308:	f000 84cf 	beq.w	14caa <_svfprintf_r+0x14ba>
   1430c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1430e:	9812      	ldr	r0, [sp, #72]	; 0x48
   14310:	440a      	add	r2, r1
   14312:	e9ca 0100 	strd	r0, r1, [sl]
   14316:	9925      	ldr	r1, [sp, #148]	; 0x94
   14318:	9226      	str	r2, [sp, #152]	; 0x98
   1431a:	3101      	adds	r1, #1
   1431c:	2907      	cmp	r1, #7
   1431e:	9125      	str	r1, [sp, #148]	; 0x94
   14320:	f300 86a5 	bgt.w	1506e <_svfprintf_r+0x187e>
   14324:	f10a 0a08 	add.w	sl, sl, #8
   14328:	990e      	ldr	r1, [sp, #56]	; 0x38
   1432a:	1865      	adds	r5, r4, r1
   1432c:	1acc      	subs	r4, r1, r3
   1432e:	9b05      	ldr	r3, [sp, #20]
   14330:	1aed      	subs	r5, r5, r3
   14332:	42a5      	cmp	r5, r4
   14334:	bfa8      	it	ge
   14336:	4625      	movge	r5, r4
   14338:	2d00      	cmp	r5, #0
   1433a:	dd0d      	ble.n	14358 <_svfprintf_r+0xb68>
   1433c:	f8ca 3000 	str.w	r3, [sl]
   14340:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14342:	f8ca 5004 	str.w	r5, [sl, #4]
   14346:	3301      	adds	r3, #1
   14348:	442a      	add	r2, r5
   1434a:	2b07      	cmp	r3, #7
   1434c:	9226      	str	r2, [sp, #152]	; 0x98
   1434e:	9325      	str	r3, [sp, #148]	; 0x94
   14350:	f300 86bb 	bgt.w	150ca <_svfprintf_r+0x18da>
   14354:	f10a 0a08 	add.w	sl, sl, #8
   14358:	2d00      	cmp	r5, #0
   1435a:	bfa8      	it	ge
   1435c:	1b64      	subge	r4, r4, r5
   1435e:	2c00      	cmp	r4, #0
   14360:	f77f abde 	ble.w	13b20 <_svfprintf_r+0x330>
   14364:	2c10      	cmp	r4, #16
   14366:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14368:	f340 837c 	ble.w	14a64 <_svfprintf_r+0x1274>
   1436c:	ee1b 6a10 	vmov	r6, s22
   14370:	2510      	movs	r5, #16
   14372:	e005      	b.n	14380 <_svfprintf_r+0xb90>
   14374:	f10a 0a08 	add.w	sl, sl, #8
   14378:	3c10      	subs	r4, #16
   1437a:	2c10      	cmp	r4, #16
   1437c:	f340 8372 	ble.w	14a64 <_svfprintf_r+0x1274>
   14380:	3301      	adds	r3, #1
   14382:	4970      	ldr	r1, [pc, #448]	; (14544 <_svfprintf_r+0xd54>)
   14384:	3210      	adds	r2, #16
   14386:	2b07      	cmp	r3, #7
   14388:	e9ca 1500 	strd	r1, r5, [sl]
   1438c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14390:	ddf0      	ble.n	14374 <_svfprintf_r+0xb84>
   14392:	aa24      	add	r2, sp, #144	; 0x90
   14394:	4631      	mov	r1, r6
   14396:	4658      	mov	r0, fp
   14398:	f004 f8b6 	bl	18508 <__ssprint_r>
   1439c:	2800      	cmp	r0, #0
   1439e:	f47f ae8c 	bne.w	140ba <_svfprintf_r+0x8ca>
   143a2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   143a6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   143aa:	e7e5      	b.n	14378 <_svfprintf_r+0xb88>
   143ac:	2b30      	cmp	r3, #48	; 0x30
   143ae:	f43f ad8b 	beq.w	13ec8 <_svfprintf_r+0x6d8>
   143b2:	2330      	movs	r3, #48	; 0x30
   143b4:	3802      	subs	r0, #2
   143b6:	f804 3c01 	strb.w	r3, [r4, #-1]
   143ba:	ab50      	add	r3, sp, #320	; 0x140
   143bc:	1a1b      	subs	r3, r3, r0
   143be:	f8dd 8008 	ldr.w	r8, [sp, #8]
   143c2:	9305      	str	r3, [sp, #20]
   143c4:	4604      	mov	r4, r0
   143c6:	e584      	b.n	13ed2 <_svfprintf_r+0x6e2>
   143c8:	f018 0f01 	tst.w	r8, #1
   143cc:	f47f ae82 	bne.w	140d4 <_svfprintf_r+0x8e4>
   143d0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   143d2:	f8ca 4000 	str.w	r4, [sl]
   143d6:	3301      	adds	r3, #1
   143d8:	3201      	adds	r2, #1
   143da:	2101      	movs	r1, #1
   143dc:	2b07      	cmp	r3, #7
   143de:	9226      	str	r2, [sp, #152]	; 0x98
   143e0:	9325      	str	r3, [sp, #148]	; 0x94
   143e2:	f8ca 1004 	str.w	r1, [sl, #4]
   143e6:	f77f aea5 	ble.w	14134 <_svfprintf_r+0x944>
   143ea:	ee1b 1a10 	vmov	r1, s22
   143ee:	aa24      	add	r2, sp, #144	; 0x90
   143f0:	4658      	mov	r0, fp
   143f2:	f004 f889 	bl	18508 <__ssprint_r>
   143f6:	2800      	cmp	r0, #0
   143f8:	f47f ae5f 	bne.w	140ba <_svfprintf_r+0x8ca>
   143fc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14400:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14404:	e698      	b.n	14138 <_svfprintf_r+0x948>
   14406:	990e      	ldr	r1, [sp, #56]	; 0x38
   14408:	1e4c      	subs	r4, r1, #1
   1440a:	2c00      	cmp	r4, #0
   1440c:	f77f ae94 	ble.w	14138 <_svfprintf_r+0x948>
   14410:	2c10      	cmp	r4, #16
   14412:	f340 8361 	ble.w	14ad8 <_svfprintf_r+0x12e8>
   14416:	ee1b 6a10 	vmov	r6, s22
   1441a:	2510      	movs	r5, #16
   1441c:	e005      	b.n	1442a <_svfprintf_r+0xc3a>
   1441e:	f10a 0a08 	add.w	sl, sl, #8
   14422:	3c10      	subs	r4, #16
   14424:	2c10      	cmp	r4, #16
   14426:	f340 8357 	ble.w	14ad8 <_svfprintf_r+0x12e8>
   1442a:	3301      	adds	r3, #1
   1442c:	4945      	ldr	r1, [pc, #276]	; (14544 <_svfprintf_r+0xd54>)
   1442e:	3210      	adds	r2, #16
   14430:	2b07      	cmp	r3, #7
   14432:	e9ca 1500 	strd	r1, r5, [sl]
   14436:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1443a:	ddf0      	ble.n	1441e <_svfprintf_r+0xc2e>
   1443c:	aa24      	add	r2, sp, #144	; 0x90
   1443e:	4631      	mov	r1, r6
   14440:	4658      	mov	r0, fp
   14442:	f004 f861 	bl	18508 <__ssprint_r>
   14446:	2800      	cmp	r0, #0
   14448:	f47f ae37 	bne.w	140ba <_svfprintf_r+0x8ca>
   1444c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14450:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14454:	e7e5      	b.n	14422 <_svfprintf_r+0xc32>
   14456:	ee1b 1a10 	vmov	r1, s22
   1445a:	aa24      	add	r2, sp, #144	; 0x90
   1445c:	4658      	mov	r0, fp
   1445e:	f004 f853 	bl	18508 <__ssprint_r>
   14462:	2800      	cmp	r0, #0
   14464:	f47f ae29 	bne.w	140ba <_svfprintf_r+0x8ca>
   14468:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1446a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1446e:	f7ff bb44 	b.w	13afa <_svfprintf_r+0x30a>
   14472:	9b02      	ldr	r3, [sp, #8]
   14474:	f013 0310 	ands.w	r3, r3, #16
   14478:	f040 80c1 	bne.w	145fe <_svfprintf_r+0xe0e>
   1447c:	9a02      	ldr	r2, [sp, #8]
   1447e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14482:	f000 837a 	beq.w	14b7a <_svfprintf_r+0x138a>
   14486:	9808      	ldr	r0, [sp, #32]
   14488:	f850 2b04 	ldr.w	r2, [r0], #4
   1448c:	9008      	str	r0, [sp, #32]
   1448e:	4619      	mov	r1, r3
   14490:	b292      	uxth	r2, r2
   14492:	2301      	movs	r3, #1
   14494:	e451      	b.n	13d3a <_svfprintf_r+0x54a>
   14496:	f018 0310 	ands.w	r3, r8, #16
   1449a:	d155      	bne.n	14548 <_svfprintf_r+0xd58>
   1449c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   144a0:	f000 835d 	beq.w	14b5e <_svfprintf_r+0x136e>
   144a4:	9808      	ldr	r0, [sp, #32]
   144a6:	f850 2b04 	ldr.w	r2, [r0], #4
   144aa:	9008      	str	r0, [sp, #32]
   144ac:	4619      	mov	r1, r3
   144ae:	b292      	uxth	r2, r2
   144b0:	e4a8      	b.n	13e04 <_svfprintf_r+0x614>
   144b2:	4252      	negs	r2, r2
   144b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   144b8:	f8cd 8008 	str.w	r8, [sp, #8]
   144bc:	202d      	movs	r0, #45	; 0x2d
   144be:	2301      	movs	r3, #1
   144c0:	e43c      	b.n	13d3c <_svfprintf_r+0x54c>
   144c2:	ee1b 1a10 	vmov	r1, s22
   144c6:	aa24      	add	r2, sp, #144	; 0x90
   144c8:	4658      	mov	r0, fp
   144ca:	f004 f81d 	bl	18508 <__ssprint_r>
   144ce:	2800      	cmp	r0, #0
   144d0:	f47f adf3 	bne.w	140ba <_svfprintf_r+0x8ca>
   144d4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   144d8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   144dc:	e616      	b.n	1410c <_svfprintf_r+0x91c>
   144de:	ee1b 1a10 	vmov	r1, s22
   144e2:	aa24      	add	r2, sp, #144	; 0x90
   144e4:	4658      	mov	r0, fp
   144e6:	f004 f80f 	bl	18508 <__ssprint_r>
   144ea:	2800      	cmp	r0, #0
   144ec:	f47f ade5 	bne.w	140ba <_svfprintf_r+0x8ca>
   144f0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   144f4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   144f8:	e5fb      	b.n	140f2 <_svfprintf_r+0x902>
   144fa:	f018 0f01 	tst.w	r8, #1
   144fe:	f43f ab0f 	beq.w	13b20 <_svfprintf_r+0x330>
   14502:	e52a      	b.n	13f5a <_svfprintf_r+0x76a>
   14504:	9308      	str	r3, [sp, #32]
   14506:	f899 3000 	ldrb.w	r3, [r9]
   1450a:	f7ff b9cd 	b.w	138a8 <_svfprintf_r+0xb8>
   1450e:	ac50      	add	r4, sp, #320	; 0x140
   14510:	e4df      	b.n	13ed2 <_svfprintf_r+0x6e2>
   14512:	f418 7f00 	tst.w	r8, #512	; 0x200
   14516:	f040 83db 	bne.w	14cd0 <_svfprintf_r+0x14e0>
   1451a:	f853 2b04 	ldr.w	r2, [r3], #4
   1451e:	9308      	str	r3, [sp, #32]
   14520:	17d1      	asrs	r1, r2, #31
   14522:	460b      	mov	r3, r1
   14524:	f7ff bbb6 	b.w	13c94 <_svfprintf_r+0x4a4>
   14528:	9b08      	ldr	r3, [sp, #32]
   1452a:	9804      	ldr	r0, [sp, #16]
   1452c:	f853 1b04 	ldr.w	r1, [r3], #4
   14530:	9308      	str	r3, [sp, #32]
   14532:	17c2      	asrs	r2, r0, #31
   14534:	e9c1 0200 	strd	r0, r2, [r1]
   14538:	464c      	mov	r4, r9
   1453a:	f7ff b98b 	b.w	13854 <_svfprintf_r+0x64>
   1453e:	bf00      	nop
   14540:	20002bc4 	.word	0x20002bc4
   14544:	2000896c 	.word	0x2000896c
   14548:	9b08      	ldr	r3, [sp, #32]
   1454a:	f853 2b04 	ldr.w	r2, [r3], #4
   1454e:	9308      	str	r3, [sp, #32]
   14550:	e458      	b.n	13e04 <_svfprintf_r+0x614>
   14552:	eeb4 8b48 	vcmp.f64	d8, d8
   14556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1455a:	f180 8694 	bvs.w	15286 <_svfprintf_r+0x1a96>
   1455e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14560:	2b61      	cmp	r3, #97	; 0x61
   14562:	f000 8552 	beq.w	1500a <_svfprintf_r+0x181a>
   14566:	2b41      	cmp	r3, #65	; 0x41
   14568:	f000 85c0 	beq.w	150ec <_svfprintf_r+0x18fc>
   1456c:	9b03      	ldr	r3, [sp, #12]
   1456e:	3301      	adds	r3, #1
   14570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14572:	f023 0520 	bic.w	r5, r3, #32
   14576:	f000 8480 	beq.w	14e7a <_svfprintf_r+0x168a>
   1457a:	2d47      	cmp	r5, #71	; 0x47
   1457c:	d104      	bne.n	14588 <_svfprintf_r+0xd98>
   1457e:	9b03      	ldr	r3, [sp, #12]
   14580:	2b00      	cmp	r3, #0
   14582:	bf08      	it	eq
   14584:	2301      	moveq	r3, #1
   14586:	9303      	str	r3, [sp, #12]
   14588:	ee18 3a90 	vmov	r3, s17
   1458c:	2b00      	cmp	r3, #0
   1458e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   14592:	4646      	mov	r6, r8
   14594:	f2c0 8618 	blt.w	151c8 <_svfprintf_r+0x19d8>
   14598:	eeb0 ab48 	vmov.f64	d10, d8
   1459c:	2300      	movs	r3, #0
   1459e:	4690      	mov	r8, r2
   145a0:	9309      	str	r3, [sp, #36]	; 0x24
   145a2:	9307      	str	r3, [sp, #28]
   145a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   145a6:	3b41      	subs	r3, #65	; 0x41
   145a8:	2b25      	cmp	r3, #37	; 0x25
   145aa:	f200 8398 	bhi.w	14cde <_svfprintf_r+0x14ee>
   145ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   145b2:	046f      	.short	0x046f
   145b4:	03960396 	.word	0x03960396
   145b8:	04680396 	.word	0x04680396
   145bc:	0396046c 	.word	0x0396046c
   145c0:	03960396 	.word	0x03960396
   145c4:	03960396 	.word	0x03960396
   145c8:	03960396 	.word	0x03960396
   145cc:	03960396 	.word	0x03960396
   145d0:	03960396 	.word	0x03960396
   145d4:	03960396 	.word	0x03960396
   145d8:	03960396 	.word	0x03960396
   145dc:	03960396 	.word	0x03960396
   145e0:	03960396 	.word	0x03960396
   145e4:	03960396 	.word	0x03960396
   145e8:	03960396 	.word	0x03960396
   145ec:	03960396 	.word	0x03960396
   145f0:	03960396 	.word	0x03960396
   145f4:	03960396 	.word	0x03960396
   145f8:	04680396 	.word	0x04680396
   145fc:	046c      	.short	0x046c
   145fe:	9b08      	ldr	r3, [sp, #32]
   14600:	f853 2b04 	ldr.w	r2, [r3], #4
   14604:	9308      	str	r3, [sp, #32]
   14606:	2301      	movs	r3, #1
   14608:	f7ff bb97 	b.w	13d3a <_svfprintf_r+0x54a>
   1460c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1460e:	2b00      	cmp	r3, #0
   14610:	f43f a9cf 	beq.w	139b2 <_svfprintf_r+0x1c2>
   14614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14616:	781b      	ldrb	r3, [r3, #0]
   14618:	2b00      	cmp	r3, #0
   1461a:	f43f a9ca 	beq.w	139b2 <_svfprintf_r+0x1c2>
   1461e:	f899 3000 	ldrb.w	r3, [r9]
   14622:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   14626:	f7ff b93f 	b.w	138a8 <_svfprintf_r+0xb8>
   1462a:	930b      	str	r3, [sp, #44]	; 0x2c
   1462c:	f8cd 8008 	str.w	r8, [sp, #8]
   14630:	f7ff bbf1 	b.w	13e16 <_svfprintf_r+0x626>
   14634:	930b      	str	r3, [sp, #44]	; 0x2c
   14636:	4b9a      	ldr	r3, [pc, #616]	; (148a0 <_svfprintf_r+0x10b0>)
   14638:	9311      	str	r3, [sp, #68]	; 0x44
   1463a:	f018 0120 	ands.w	r1, r8, #32
   1463e:	f000 8105 	beq.w	1484c <_svfprintf_r+0x105c>
   14642:	9b08      	ldr	r3, [sp, #32]
   14644:	3307      	adds	r3, #7
   14646:	f023 0307 	bic.w	r3, r3, #7
   1464a:	6859      	ldr	r1, [r3, #4]
   1464c:	f853 2b08 	ldr.w	r2, [r3], #8
   14650:	9308      	str	r3, [sp, #32]
   14652:	f018 0f01 	tst.w	r8, #1
   14656:	d00a      	beq.n	1466e <_svfprintf_r+0xe7e>
   14658:	ea52 0301 	orrs.w	r3, r2, r1
   1465c:	d007      	beq.n	1466e <_svfprintf_r+0xe7e>
   1465e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14660:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   14664:	2330      	movs	r3, #48	; 0x30
   14666:	f048 0802 	orr.w	r8, r8, #2
   1466a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1466e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   14672:	9302      	str	r3, [sp, #8]
   14674:	2302      	movs	r3, #2
   14676:	f7ff bb60 	b.w	13d3a <_svfprintf_r+0x54a>
   1467a:	930b      	str	r3, [sp, #44]	; 0x2c
   1467c:	f7ff bbb6 	b.w	13dec <_svfprintf_r+0x5fc>
   14680:	930b      	str	r3, [sp, #44]	; 0x2c
   14682:	4b88      	ldr	r3, [pc, #544]	; (148a4 <_svfprintf_r+0x10b4>)
   14684:	9311      	str	r3, [sp, #68]	; 0x44
   14686:	e7d8      	b.n	1463a <_svfprintf_r+0xe4a>
   14688:	9b08      	ldr	r3, [sp, #32]
   1468a:	2101      	movs	r1, #1
   1468c:	f853 2b04 	ldr.w	r2, [r3], #4
   14690:	9102      	str	r1, [sp, #8]
   14692:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   14696:	9308      	str	r3, [sp, #32]
   14698:	9105      	str	r1, [sp, #20]
   1469a:	ac37      	add	r4, sp, #220	; 0xdc
   1469c:	f7ff baaf 	b.w	13bfe <_svfprintf_r+0x40e>
   146a0:	ee1b 1a10 	vmov	r1, s22
   146a4:	aa24      	add	r2, sp, #144	; 0x90
   146a6:	4658      	mov	r0, fp
   146a8:	f003 ff2e 	bl	18508 <__ssprint_r>
   146ac:	2800      	cmp	r0, #0
   146ae:	f47f ad04 	bne.w	140ba <_svfprintf_r+0x8ca>
   146b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   146b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   146b8:	e45d      	b.n	13f76 <_svfprintf_r+0x786>
   146ba:	9b03      	ldr	r3, [sp, #12]
   146bc:	9407      	str	r4, [sp, #28]
   146be:	2b06      	cmp	r3, #6
   146c0:	4622      	mov	r2, r4
   146c2:	bf28      	it	cs
   146c4:	2306      	movcs	r3, #6
   146c6:	9403      	str	r4, [sp, #12]
   146c8:	4621      	mov	r1, r4
   146ca:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   146ce:	4c76      	ldr	r4, [pc, #472]	; (148a8 <_svfprintf_r+0x10b8>)
   146d0:	9302      	str	r3, [sp, #8]
   146d2:	9305      	str	r3, [sp, #20]
   146d4:	920f      	str	r2, [sp, #60]	; 0x3c
   146d6:	f7ff ba6c 	b.w	13bb2 <_svfprintf_r+0x3c2>
   146da:	2140      	movs	r1, #64	; 0x40
   146dc:	4658      	mov	r0, fp
   146de:	f7fb f953 	bl	f988 <_malloc_r>
   146e2:	6020      	str	r0, [r4, #0]
   146e4:	6120      	str	r0, [r4, #16]
   146e6:	2800      	cmp	r0, #0
   146e8:	f000 860f 	beq.w	1530a <_svfprintf_r+0x1b1a>
   146ec:	2340      	movs	r3, #64	; 0x40
   146ee:	6163      	str	r3, [r4, #20]
   146f0:	f7ff b89e 	b.w	13830 <_svfprintf_r+0x40>
   146f4:	2d10      	cmp	r5, #16
   146f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   146f8:	f340 825d 	ble.w	14bb6 <_svfprintf_r+0x13c6>
   146fc:	4651      	mov	r1, sl
   146fe:	2610      	movs	r6, #16
   14700:	ee1b aa10 	vmov	sl, s22
   14704:	e004      	b.n	14710 <_svfprintf_r+0xf20>
   14706:	3108      	adds	r1, #8
   14708:	3d10      	subs	r5, #16
   1470a:	2d10      	cmp	r5, #16
   1470c:	f340 8252 	ble.w	14bb4 <_svfprintf_r+0x13c4>
   14710:	3301      	adds	r3, #1
   14712:	4866      	ldr	r0, [pc, #408]	; (148ac <_svfprintf_r+0x10bc>)
   14714:	3210      	adds	r2, #16
   14716:	2b07      	cmp	r3, #7
   14718:	e9c1 0600 	strd	r0, r6, [r1]
   1471c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14720:	ddf1      	ble.n	14706 <_svfprintf_r+0xf16>
   14722:	aa24      	add	r2, sp, #144	; 0x90
   14724:	4651      	mov	r1, sl
   14726:	4658      	mov	r0, fp
   14728:	f003 feee 	bl	18508 <__ssprint_r>
   1472c:	2800      	cmp	r0, #0
   1472e:	f47f acc4 	bne.w	140ba <_svfprintf_r+0x8ca>
   14732:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14736:	a927      	add	r1, sp, #156	; 0x9c
   14738:	e7e6      	b.n	14708 <_svfprintf_r+0xf18>
   1473a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1473c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   14740:	18e3      	adds	r3, r4, r3
   14742:	9303      	str	r3, [sp, #12]
   14744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14746:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1474a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1474c:	9d05      	ldr	r5, [sp, #20]
   1474e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   14752:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   14756:	940b      	str	r4, [sp, #44]	; 0x2c
   14758:	ee1b 1a10 	vmov	r1, s22
   1475c:	4650      	mov	r0, sl
   1475e:	2b00      	cmp	r3, #0
   14760:	d034      	beq.n	147cc <_svfprintf_r+0xfdc>
   14762:	f1b8 0f00 	cmp.w	r8, #0
   14766:	d135      	bne.n	147d4 <_svfprintf_r+0xfe4>
   14768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1476a:	3b01      	subs	r3, #1
   1476c:	3e01      	subs	r6, #1
   1476e:	930d      	str	r3, [sp, #52]	; 0x34
   14770:	9b15      	ldr	r3, [sp, #84]	; 0x54
   14772:	e9c0 3900 	strd	r3, r9, [r0]
   14776:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14778:	3301      	adds	r3, #1
   1477a:	444a      	add	r2, r9
   1477c:	2b07      	cmp	r3, #7
   1477e:	9226      	str	r2, [sp, #152]	; 0x98
   14780:	9325      	str	r3, [sp, #148]	; 0x94
   14782:	dc6c      	bgt.n	1485e <_svfprintf_r+0x106e>
   14784:	3008      	adds	r0, #8
   14786:	9b03      	ldr	r3, [sp, #12]
   14788:	f896 c000 	ldrb.w	ip, [r6]
   1478c:	1b5b      	subs	r3, r3, r5
   1478e:	4563      	cmp	r3, ip
   14790:	bfa8      	it	ge
   14792:	4663      	movge	r3, ip
   14794:	2b00      	cmp	r3, #0
   14796:	469a      	mov	sl, r3
   14798:	dd0c      	ble.n	147b4 <_svfprintf_r+0xfc4>
   1479a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1479c:	3401      	adds	r4, #1
   1479e:	441a      	add	r2, r3
   147a0:	2c07      	cmp	r4, #7
   147a2:	e9c0 5300 	strd	r5, r3, [r0]
   147a6:	9226      	str	r2, [sp, #152]	; 0x98
   147a8:	9425      	str	r4, [sp, #148]	; 0x94
   147aa:	f300 8177 	bgt.w	14a9c <_svfprintf_r+0x12ac>
   147ae:	f896 c000 	ldrb.w	ip, [r6]
   147b2:	3008      	adds	r0, #8
   147b4:	f1ba 0f00 	cmp.w	sl, #0
   147b8:	bfac      	ite	ge
   147ba:	ebac 040a 	subge.w	r4, ip, sl
   147be:	4664      	movlt	r4, ip
   147c0:	2c00      	cmp	r4, #0
   147c2:	dc0a      	bgt.n	147da <_svfprintf_r+0xfea>
   147c4:	4465      	add	r5, ip
   147c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   147c8:	2b00      	cmp	r3, #0
   147ca:	d1ca      	bne.n	14762 <_svfprintf_r+0xf72>
   147cc:	f1b8 0f00 	cmp.w	r8, #0
   147d0:	f000 83ac 	beq.w	14f2c <_svfprintf_r+0x173c>
   147d4:	f108 38ff 	add.w	r8, r8, #4294967295
   147d8:	e7ca      	b.n	14770 <_svfprintf_r+0xf80>
   147da:	2c10      	cmp	r4, #16
   147dc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   147e0:	dd24      	ble.n	1482c <_svfprintf_r+0x103c>
   147e2:	9505      	str	r5, [sp, #20]
   147e4:	f04f 0a10 	mov.w	sl, #16
   147e8:	4663      	mov	r3, ip
   147ea:	460d      	mov	r5, r1
   147ec:	e004      	b.n	147f8 <_svfprintf_r+0x1008>
   147ee:	3c10      	subs	r4, #16
   147f0:	2c10      	cmp	r4, #16
   147f2:	f100 0008 	add.w	r0, r0, #8
   147f6:	dd16      	ble.n	14826 <_svfprintf_r+0x1036>
   147f8:	3301      	adds	r3, #1
   147fa:	492c      	ldr	r1, [pc, #176]	; (148ac <_svfprintf_r+0x10bc>)
   147fc:	3210      	adds	r2, #16
   147fe:	2b07      	cmp	r3, #7
   14800:	e9c0 1a00 	strd	r1, sl, [r0]
   14804:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14808:	ddf1      	ble.n	147ee <_svfprintf_r+0xffe>
   1480a:	aa24      	add	r2, sp, #144	; 0x90
   1480c:	4629      	mov	r1, r5
   1480e:	4658      	mov	r0, fp
   14810:	f003 fe7a 	bl	18508 <__ssprint_r>
   14814:	2800      	cmp	r0, #0
   14816:	f47f ac50 	bne.w	140ba <_svfprintf_r+0x8ca>
   1481a:	3c10      	subs	r4, #16
   1481c:	2c10      	cmp	r4, #16
   1481e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14822:	a827      	add	r0, sp, #156	; 0x9c
   14824:	dce8      	bgt.n	147f8 <_svfprintf_r+0x1008>
   14826:	4629      	mov	r1, r5
   14828:	9d05      	ldr	r5, [sp, #20]
   1482a:	469c      	mov	ip, r3
   1482c:	f10c 0301 	add.w	r3, ip, #1
   14830:	4422      	add	r2, r4
   14832:	6044      	str	r4, [r0, #4]
   14834:	2b07      	cmp	r3, #7
   14836:	4c1d      	ldr	r4, [pc, #116]	; (148ac <_svfprintf_r+0x10bc>)
   14838:	6004      	str	r4, [r0, #0]
   1483a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1483e:	f300 83c6 	bgt.w	14fce <_svfprintf_r+0x17de>
   14842:	f896 c000 	ldrb.w	ip, [r6]
   14846:	3008      	adds	r0, #8
   14848:	4465      	add	r5, ip
   1484a:	e7bc      	b.n	147c6 <_svfprintf_r+0xfd6>
   1484c:	f018 0310 	ands.w	r3, r8, #16
   14850:	f000 80c2 	beq.w	149d8 <_svfprintf_r+0x11e8>
   14854:	9b08      	ldr	r3, [sp, #32]
   14856:	f853 2b04 	ldr.w	r2, [r3], #4
   1485a:	9308      	str	r3, [sp, #32]
   1485c:	e6f9      	b.n	14652 <_svfprintf_r+0xe62>
   1485e:	aa24      	add	r2, sp, #144	; 0x90
   14860:	4658      	mov	r0, fp
   14862:	9105      	str	r1, [sp, #20]
   14864:	f003 fe50 	bl	18508 <__ssprint_r>
   14868:	2800      	cmp	r0, #0
   1486a:	f47f ac26 	bne.w	140ba <_svfprintf_r+0x8ca>
   1486e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14870:	9905      	ldr	r1, [sp, #20]
   14872:	a827      	add	r0, sp, #156	; 0x9c
   14874:	e787      	b.n	14786 <_svfprintf_r+0xf96>
   14876:	9802      	ldr	r0, [sp, #8]
   14878:	f8cd a01c 	str.w	sl, [sp, #28]
   1487c:	ac50      	add	r4, sp, #320	; 0x140
   1487e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   14882:	2500      	movs	r5, #0
   14884:	ee0a ba10 	vmov	s20, fp
   14888:	4b09      	ldr	r3, [pc, #36]	; (148b0 <_svfprintf_r+0x10c0>)
   1488a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1488e:	f8cd 9014 	str.w	r9, [sp, #20]
   14892:	46a3      	mov	fp, r4
   14894:	f04f 0805 	mov.w	r8, #5
   14898:	46ac      	mov	ip, r5
   1489a:	4604      	mov	r4, r0
   1489c:	e010      	b.n	148c0 <_svfprintf_r+0x10d0>
   1489e:	bf00      	nop
   148a0:	2000111c 	.word	0x2000111c
   148a4:	20001130 	.word	0x20001130
   148a8:	20001144 	.word	0x20001144
   148ac:	2000896c 	.word	0x2000896c
   148b0:	cccccccd 	.word	0xcccccccd
   148b4:	2a0a      	cmp	r2, #10
   148b6:	f171 0100 	sbcs.w	r1, r1, #0
   148ba:	d336      	bcc.n	1492a <_svfprintf_r+0x113a>
   148bc:	464a      	mov	r2, r9
   148be:	4631      	mov	r1, r6
   148c0:	1850      	adds	r0, r2, r1
   148c2:	f140 0000 	adc.w	r0, r0, #0
   148c6:	fba3 5600 	umull	r5, r6, r3, r0
   148ca:	f026 0503 	bic.w	r5, r6, #3
   148ce:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   148d2:	1b40      	subs	r0, r0, r5
   148d4:	1a15      	subs	r5, r2, r0
   148d6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   148da:	f161 0e00 	sbc.w	lr, r1, #0
   148de:	fb06 f605 	mul.w	r6, r6, r5
   148e2:	fba5 9503 	umull	r9, r5, r5, r3
   148e6:	fb03 660e 	mla	r6, r3, lr, r6
   148ea:	f009 0e01 	and.w	lr, r9, #1
   148ee:	442e      	add	r6, r5
   148f0:	fbae 5e08 	umull	r5, lr, lr, r8
   148f4:	182d      	adds	r5, r5, r0
   148f6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   148fa:	3530      	adds	r5, #48	; 0x30
   148fc:	f80b 5c01 	strb.w	r5, [fp, #-1]
   14900:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   14904:	f10c 0c01 	add.w	ip, ip, #1
   14908:	f10b 3bff 	add.w	fp, fp, #4294967295
   1490c:	0876      	lsrs	r6, r6, #1
   1490e:	2c00      	cmp	r4, #0
   14910:	d0d0      	beq.n	148b4 <_svfprintf_r+0x10c4>
   14912:	f89a 0000 	ldrb.w	r0, [sl]
   14916:	4584      	cmp	ip, r0
   14918:	d1cc      	bne.n	148b4 <_svfprintf_r+0x10c4>
   1491a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1491e:	d0c9      	beq.n	148b4 <_svfprintf_r+0x10c4>
   14920:	2a0a      	cmp	r2, #10
   14922:	f171 0100 	sbcs.w	r1, r1, #0
   14926:	f080 818f 	bcs.w	14c48 <_svfprintf_r+0x1458>
   1492a:	465c      	mov	r4, fp
   1492c:	ab50      	add	r3, sp, #320	; 0x140
   1492e:	1b1b      	subs	r3, r3, r4
   14930:	f8dd 9014 	ldr.w	r9, [sp, #20]
   14934:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   14938:	ee1a ba10 	vmov	fp, s20
   1493c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   14940:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14944:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   14948:	9305      	str	r3, [sp, #20]
   1494a:	f7ff bac2 	b.w	13ed2 <_svfprintf_r+0x6e2>
   1494e:	ee1b 1a10 	vmov	r1, s22
   14952:	aa24      	add	r2, sp, #144	; 0x90
   14954:	4658      	mov	r0, fp
   14956:	f003 fdd7 	bl	18508 <__ssprint_r>
   1495a:	2800      	cmp	r0, #0
   1495c:	f47f abad 	bne.w	140ba <_svfprintf_r+0x8ca>
   14960:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14964:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14966:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1496a:	f7ff b896 	b.w	13a9a <_svfprintf_r+0x2aa>
   1496e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14970:	48be      	ldr	r0, [pc, #760]	; (14c6c <_svfprintf_r+0x147c>)
   14972:	f8ca 0000 	str.w	r0, [sl]
   14976:	3301      	adds	r3, #1
   14978:	3201      	adds	r2, #1
   1497a:	2001      	movs	r0, #1
   1497c:	2b07      	cmp	r3, #7
   1497e:	9226      	str	r2, [sp, #152]	; 0x98
   14980:	9325      	str	r3, [sp, #148]	; 0x94
   14982:	f8ca 0004 	str.w	r0, [sl, #4]
   14986:	f300 8177 	bgt.w	14c78 <_svfprintf_r+0x1488>
   1498a:	f10a 0a08 	add.w	sl, sl, #8
   1498e:	2900      	cmp	r1, #0
   14990:	f040 80af 	bne.w	14af2 <_svfprintf_r+0x1302>
   14994:	990e      	ldr	r1, [sp, #56]	; 0x38
   14996:	f008 0301 	and.w	r3, r8, #1
   1499a:	430b      	orrs	r3, r1
   1499c:	f43f a8c0 	beq.w	13b20 <_svfprintf_r+0x330>
   149a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   149a2:	9912      	ldr	r1, [sp, #72]	; 0x48
   149a4:	441a      	add	r2, r3
   149a6:	e9ca 1300 	strd	r1, r3, [sl]
   149aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   149ac:	9226      	str	r2, [sp, #152]	; 0x98
   149ae:	3301      	adds	r3, #1
   149b0:	2b07      	cmp	r3, #7
   149b2:	9325      	str	r3, [sp, #148]	; 0x94
   149b4:	f300 8252 	bgt.w	14e5c <_svfprintf_r+0x166c>
   149b8:	f10a 0a08 	add.w	sl, sl, #8
   149bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   149be:	f8ca 4000 	str.w	r4, [sl]
   149c2:	3301      	adds	r3, #1
   149c4:	440a      	add	r2, r1
   149c6:	2b07      	cmp	r3, #7
   149c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   149cc:	f8ca 1004 	str.w	r1, [sl, #4]
   149d0:	f77f a8a4 	ble.w	13b1c <_svfprintf_r+0x32c>
   149d4:	f7ff bbbd 	b.w	14152 <_svfprintf_r+0x962>
   149d8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   149dc:	f000 80dd 	beq.w	14b9a <_svfprintf_r+0x13aa>
   149e0:	9808      	ldr	r0, [sp, #32]
   149e2:	f850 2b04 	ldr.w	r2, [r0], #4
   149e6:	9008      	str	r0, [sp, #32]
   149e8:	4619      	mov	r1, r3
   149ea:	b292      	uxth	r2, r2
   149ec:	e631      	b.n	14652 <_svfprintf_r+0xe62>
   149ee:	ee1b 1a10 	vmov	r1, s22
   149f2:	aa24      	add	r2, sp, #144	; 0x90
   149f4:	4658      	mov	r0, fp
   149f6:	f003 fd87 	bl	18508 <__ssprint_r>
   149fa:	2800      	cmp	r0, #0
   149fc:	f47f ab5d 	bne.w	140ba <_svfprintf_r+0x8ca>
   14a00:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14a02:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a06:	f7ff baa3 	b.w	13f50 <_svfprintf_r+0x760>
   14a0a:	ae22      	add	r6, sp, #136	; 0x88
   14a0c:	2208      	movs	r2, #8
   14a0e:	2100      	movs	r1, #0
   14a10:	4630      	mov	r0, r6
   14a12:	941d      	str	r4, [sp, #116]	; 0x74
   14a14:	f7fc ff28 	bl	11868 <memset>
   14a18:	9b03      	ldr	r3, [sp, #12]
   14a1a:	1c5a      	adds	r2, r3, #1
   14a1c:	f000 80db 	beq.w	14bd6 <_svfprintf_r+0x13e6>
   14a20:	2500      	movs	r5, #0
   14a22:	f8cd 9008 	str.w	r9, [sp, #8]
   14a26:	f8cd 801c 	str.w	r8, [sp, #28]
   14a2a:	4699      	mov	r9, r3
   14a2c:	46a8      	mov	r8, r5
   14a2e:	e00c      	b.n	14a4a <_svfprintf_r+0x125a>
   14a30:	a937      	add	r1, sp, #220	; 0xdc
   14a32:	4658      	mov	r0, fp
   14a34:	f003 fc3e 	bl	182b4 <_wcrtomb_r>
   14a38:	1c43      	adds	r3, r0, #1
   14a3a:	4440      	add	r0, r8
   14a3c:	f000 83c8 	beq.w	151d0 <_svfprintf_r+0x19e0>
   14a40:	4548      	cmp	r0, r9
   14a42:	dc08      	bgt.n	14a56 <_svfprintf_r+0x1266>
   14a44:	f000 8418 	beq.w	15278 <_svfprintf_r+0x1a88>
   14a48:	4680      	mov	r8, r0
   14a4a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   14a4c:	5952      	ldr	r2, [r2, r5]
   14a4e:	4633      	mov	r3, r6
   14a50:	3504      	adds	r5, #4
   14a52:	2a00      	cmp	r2, #0
   14a54:	d1ec      	bne.n	14a30 <_svfprintf_r+0x1240>
   14a56:	f8cd 8014 	str.w	r8, [sp, #20]
   14a5a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   14a5e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   14a62:	e0c5      	b.n	14bf0 <_svfprintf_r+0x1400>
   14a64:	3301      	adds	r3, #1
   14a66:	4982      	ldr	r1, [pc, #520]	; (14c70 <_svfprintf_r+0x1480>)
   14a68:	f8ca 4004 	str.w	r4, [sl, #4]
   14a6c:	4422      	add	r2, r4
   14a6e:	2b07      	cmp	r3, #7
   14a70:	f8ca 1000 	str.w	r1, [sl]
   14a74:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14a78:	f77f a850 	ble.w	13b1c <_svfprintf_r+0x32c>
   14a7c:	f7ff bb69 	b.w	14152 <_svfprintf_r+0x962>
   14a80:	ee1b 1a10 	vmov	r1, s22
   14a84:	aa24      	add	r2, sp, #144	; 0x90
   14a86:	4658      	mov	r0, fp
   14a88:	f003 fd3e 	bl	18508 <__ssprint_r>
   14a8c:	2800      	cmp	r0, #0
   14a8e:	f47f ab14 	bne.w	140ba <_svfprintf_r+0x8ca>
   14a92:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14a94:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14a98:	f7ff b829 	b.w	13aee <_svfprintf_r+0x2fe>
   14a9c:	aa24      	add	r2, sp, #144	; 0x90
   14a9e:	4658      	mov	r0, fp
   14aa0:	9105      	str	r1, [sp, #20]
   14aa2:	f003 fd31 	bl	18508 <__ssprint_r>
   14aa6:	2800      	cmp	r0, #0
   14aa8:	f47f ab07 	bne.w	140ba <_svfprintf_r+0x8ca>
   14aac:	f896 c000 	ldrb.w	ip, [r6]
   14ab0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14ab2:	9905      	ldr	r1, [sp, #20]
   14ab4:	a827      	add	r0, sp, #156	; 0x9c
   14ab6:	e67d      	b.n	147b4 <_svfprintf_r+0xfc4>
   14ab8:	2b01      	cmp	r3, #1
   14aba:	f8cd 8008 	str.w	r8, [sp, #8]
   14abe:	f47f a9f3 	bne.w	13ea8 <_svfprintf_r+0x6b8>
   14ac2:	f7ff bb93 	b.w	141ec <_svfprintf_r+0x9fc>
   14ac6:	9b08      	ldr	r3, [sp, #32]
   14ac8:	9904      	ldr	r1, [sp, #16]
   14aca:	f853 2b04 	ldr.w	r2, [r3], #4
   14ace:	464c      	mov	r4, r9
   14ad0:	6011      	str	r1, [r2, #0]
   14ad2:	9308      	str	r3, [sp, #32]
   14ad4:	f7fe bebe 	b.w	13854 <_svfprintf_r+0x64>
   14ad8:	3301      	adds	r3, #1
   14ada:	4965      	ldr	r1, [pc, #404]	; (14c70 <_svfprintf_r+0x1480>)
   14adc:	f8ca 4004 	str.w	r4, [sl, #4]
   14ae0:	4422      	add	r2, r4
   14ae2:	2b07      	cmp	r3, #7
   14ae4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14ae8:	f8ca 1000 	str.w	r1, [sl]
   14aec:	f77f ab22 	ble.w	14134 <_svfprintf_r+0x944>
   14af0:	e47b      	b.n	143ea <_svfprintf_r+0xbfa>
   14af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14af4:	9812      	ldr	r0, [sp, #72]	; 0x48
   14af6:	441a      	add	r2, r3
   14af8:	e9ca 0300 	strd	r0, r3, [sl]
   14afc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14afe:	9226      	str	r2, [sp, #152]	; 0x98
   14b00:	3301      	adds	r3, #1
   14b02:	2b07      	cmp	r3, #7
   14b04:	9325      	str	r3, [sp, #148]	; 0x94
   14b06:	f300 81a9 	bgt.w	14e5c <_svfprintf_r+0x166c>
   14b0a:	f10a 0a08 	add.w	sl, sl, #8
   14b0e:	2900      	cmp	r1, #0
   14b10:	f6bf af54 	bge.w	149bc <_svfprintf_r+0x11cc>
   14b14:	424d      	negs	r5, r1
   14b16:	3110      	adds	r1, #16
   14b18:	f280 830f 	bge.w	1513a <_svfprintf_r+0x194a>
   14b1c:	ee1b 1a10 	vmov	r1, s22
   14b20:	2610      	movs	r6, #16
   14b22:	e005      	b.n	14b30 <_svfprintf_r+0x1340>
   14b24:	f10a 0a08 	add.w	sl, sl, #8
   14b28:	3d10      	subs	r5, #16
   14b2a:	2d10      	cmp	r5, #16
   14b2c:	f340 8305 	ble.w	1513a <_svfprintf_r+0x194a>
   14b30:	3301      	adds	r3, #1
   14b32:	484f      	ldr	r0, [pc, #316]	; (14c70 <_svfprintf_r+0x1480>)
   14b34:	3210      	adds	r2, #16
   14b36:	2b07      	cmp	r3, #7
   14b38:	e9ca 0600 	strd	r0, r6, [sl]
   14b3c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14b40:	ddf0      	ble.n	14b24 <_svfprintf_r+0x1334>
   14b42:	aa24      	add	r2, sp, #144	; 0x90
   14b44:	4658      	mov	r0, fp
   14b46:	9103      	str	r1, [sp, #12]
   14b48:	f003 fcde 	bl	18508 <__ssprint_r>
   14b4c:	2800      	cmp	r0, #0
   14b4e:	f47f aab4 	bne.w	140ba <_svfprintf_r+0x8ca>
   14b52:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14b56:	9903      	ldr	r1, [sp, #12]
   14b58:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14b5c:	e7e4      	b.n	14b28 <_svfprintf_r+0x1338>
   14b5e:	9b08      	ldr	r3, [sp, #32]
   14b60:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   14b64:	bf1a      	itte	ne
   14b66:	4611      	movne	r1, r2
   14b68:	f853 2b04 	ldrne.w	r2, [r3], #4
   14b6c:	f853 2b04 	ldreq.w	r2, [r3], #4
   14b70:	9308      	str	r3, [sp, #32]
   14b72:	bf18      	it	ne
   14b74:	b2d2      	uxtbne	r2, r2
   14b76:	f7ff b945 	b.w	13e04 <_svfprintf_r+0x614>
   14b7a:	9b02      	ldr	r3, [sp, #8]
   14b7c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   14b80:	9b08      	ldr	r3, [sp, #32]
   14b82:	bf1a      	itte	ne
   14b84:	4611      	movne	r1, r2
   14b86:	f853 2b04 	ldrne.w	r2, [r3], #4
   14b8a:	f853 2b04 	ldreq.w	r2, [r3], #4
   14b8e:	9308      	str	r3, [sp, #32]
   14b90:	bf18      	it	ne
   14b92:	b2d2      	uxtbne	r2, r2
   14b94:	2301      	movs	r3, #1
   14b96:	f7ff b8d0 	b.w	13d3a <_svfprintf_r+0x54a>
   14b9a:	9b08      	ldr	r3, [sp, #32]
   14b9c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   14ba0:	bf1a      	itte	ne
   14ba2:	4611      	movne	r1, r2
   14ba4:	f853 2b04 	ldrne.w	r2, [r3], #4
   14ba8:	f853 2b04 	ldreq.w	r2, [r3], #4
   14bac:	9308      	str	r3, [sp, #32]
   14bae:	bf18      	it	ne
   14bb0:	b2d2      	uxtbne	r2, r2
   14bb2:	e54e      	b.n	14652 <_svfprintf_r+0xe62>
   14bb4:	468a      	mov	sl, r1
   14bb6:	3301      	adds	r3, #1
   14bb8:	492d      	ldr	r1, [pc, #180]	; (14c70 <_svfprintf_r+0x1480>)
   14bba:	f8ca 5004 	str.w	r5, [sl, #4]
   14bbe:	442a      	add	r2, r5
   14bc0:	2b07      	cmp	r3, #7
   14bc2:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14bc6:	f8ca 1000 	str.w	r1, [sl]
   14bca:	f300 8139 	bgt.w	14e40 <_svfprintf_r+0x1650>
   14bce:	f10a 0a08 	add.w	sl, sl, #8
   14bd2:	f7ff bb8c 	b.w	142ee <_svfprintf_r+0xafe>
   14bd6:	2300      	movs	r3, #0
   14bd8:	4619      	mov	r1, r3
   14bda:	9600      	str	r6, [sp, #0]
   14bdc:	aa1d      	add	r2, sp, #116	; 0x74
   14bde:	4658      	mov	r0, fp
   14be0:	f003 fb8e 	bl	18300 <_wcsrtombs_r>
   14be4:	4603      	mov	r3, r0
   14be6:	3301      	adds	r3, #1
   14be8:	9005      	str	r0, [sp, #20]
   14bea:	f000 82f1 	beq.w	151d0 <_svfprintf_r+0x19e0>
   14bee:	941d      	str	r4, [sp, #116]	; 0x74
   14bf0:	9b05      	ldr	r3, [sp, #20]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	d04e      	beq.n	14c94 <_svfprintf_r+0x14a4>
   14bf6:	2b63      	cmp	r3, #99	; 0x63
   14bf8:	f300 8118 	bgt.w	14e2c <_svfprintf_r+0x163c>
   14bfc:	2300      	movs	r3, #0
   14bfe:	9307      	str	r3, [sp, #28]
   14c00:	ac37      	add	r4, sp, #220	; 0xdc
   14c02:	2208      	movs	r2, #8
   14c04:	2100      	movs	r1, #0
   14c06:	4630      	mov	r0, r6
   14c08:	f7fc fe2e 	bl	11868 <memset>
   14c0c:	9d05      	ldr	r5, [sp, #20]
   14c0e:	9600      	str	r6, [sp, #0]
   14c10:	462b      	mov	r3, r5
   14c12:	aa1d      	add	r2, sp, #116	; 0x74
   14c14:	4621      	mov	r1, r4
   14c16:	4658      	mov	r0, fp
   14c18:	f003 fb72 	bl	18300 <_wcsrtombs_r>
   14c1c:	4285      	cmp	r5, r0
   14c1e:	f040 837c 	bne.w	1531a <_svfprintf_r+0x1b2a>
   14c22:	9a05      	ldr	r2, [sp, #20]
   14c24:	2300      	movs	r3, #0
   14c26:	54a3      	strb	r3, [r4, r2]
   14c28:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14c2c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14c30:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14c34:	9303      	str	r3, [sp, #12]
   14c36:	9202      	str	r2, [sp, #8]
   14c38:	930f      	str	r3, [sp, #60]	; 0x3c
   14c3a:	f7fe bfba 	b.w	13bb2 <_svfprintf_r+0x3c2>
   14c3e:	212d      	movs	r1, #45	; 0x2d
   14c40:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14c44:	f7fe bfa4 	b.w	13b90 <_svfprintf_r+0x3a0>
   14c48:	9b16      	ldr	r3, [sp, #88]	; 0x58
   14c4a:	9915      	ldr	r1, [sp, #84]	; 0x54
   14c4c:	ebab 0b03 	sub.w	fp, fp, r3
   14c50:	461a      	mov	r2, r3
   14c52:	4658      	mov	r0, fp
   14c54:	f7fc fef6 	bl	11a44 <strncpy>
   14c58:	f89a 2001 	ldrb.w	r2, [sl, #1]
   14c5c:	4b05      	ldr	r3, [pc, #20]	; (14c74 <_svfprintf_r+0x1484>)
   14c5e:	b10a      	cbz	r2, 14c64 <_svfprintf_r+0x1474>
   14c60:	f10a 0a01 	add.w	sl, sl, #1
   14c64:	f04f 0c00 	mov.w	ip, #0
   14c68:	e628      	b.n	148bc <_svfprintf_r+0x10cc>
   14c6a:	bf00      	nop
   14c6c:	20007ef8 	.word	0x20007ef8
   14c70:	2000896c 	.word	0x2000896c
   14c74:	cccccccd 	.word	0xcccccccd
   14c78:	ee1b 1a10 	vmov	r1, s22
   14c7c:	aa24      	add	r2, sp, #144	; 0x90
   14c7e:	4658      	mov	r0, fp
   14c80:	f003 fc42 	bl	18508 <__ssprint_r>
   14c84:	2800      	cmp	r0, #0
   14c86:	f47f aa18 	bne.w	140ba <_svfprintf_r+0x8ca>
   14c8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14c8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14c8e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14c92:	e67c      	b.n	1498e <_svfprintf_r+0x119e>
   14c94:	9b05      	ldr	r3, [sp, #20]
   14c96:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14c9a:	930f      	str	r3, [sp, #60]	; 0x3c
   14c9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14ca0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14ca4:	9307      	str	r3, [sp, #28]
   14ca6:	f7fe bf84 	b.w	13bb2 <_svfprintf_r+0x3c2>
   14caa:	990e      	ldr	r1, [sp, #56]	; 0x38
   14cac:	9805      	ldr	r0, [sp, #20]
   14cae:	1865      	adds	r5, r4, r1
   14cb0:	1a2d      	subs	r5, r5, r0
   14cb2:	1acc      	subs	r4, r1, r3
   14cb4:	42a5      	cmp	r5, r4
   14cb6:	bfa8      	it	ge
   14cb8:	4625      	movge	r5, r4
   14cba:	f7ff bb4d 	b.w	14358 <_svfprintf_r+0xb68>
   14cbe:	9b08      	ldr	r3, [sp, #32]
   14cc0:	9904      	ldr	r1, [sp, #16]
   14cc2:	f853 2b04 	ldr.w	r2, [r3], #4
   14cc6:	9308      	str	r3, [sp, #32]
   14cc8:	8011      	strh	r1, [r2, #0]
   14cca:	464c      	mov	r4, r9
   14ccc:	f7fe bdc2 	b.w	13854 <_svfprintf_r+0x64>
   14cd0:	f913 2b04 	ldrsb.w	r2, [r3], #4
   14cd4:	9308      	str	r3, [sp, #32]
   14cd6:	17d1      	asrs	r1, r2, #31
   14cd8:	460b      	mov	r3, r1
   14cda:	f7fe bfdb 	b.w	13c94 <_svfprintf_r+0x4a4>
   14cde:	9a03      	ldr	r2, [sp, #12]
   14ce0:	2102      	movs	r1, #2
   14ce2:	ab22      	add	r3, sp, #136	; 0x88
   14ce4:	9301      	str	r3, [sp, #4]
   14ce6:	ab1d      	add	r3, sp, #116	; 0x74
   14ce8:	9300      	str	r3, [sp, #0]
   14cea:	4658      	mov	r0, fp
   14cec:	ab1b      	add	r3, sp, #108	; 0x6c
   14cee:	eeb0 0b4a 	vmov.f64	d0, d10
   14cf2:	9202      	str	r2, [sp, #8]
   14cf4:	f002 fa14 	bl	17120 <_dtoa_r>
   14cf8:	2d47      	cmp	r5, #71	; 0x47
   14cfa:	9a02      	ldr	r2, [sp, #8]
   14cfc:	4604      	mov	r4, r0
   14cfe:	f000 8161 	beq.w	14fc4 <_svfprintf_r+0x17d4>
   14d02:	2d46      	cmp	r5, #70	; 0x46
   14d04:	4410      	add	r0, r2
   14d06:	d105      	bne.n	14d14 <_svfprintf_r+0x1524>
   14d08:	7823      	ldrb	r3, [r4, #0]
   14d0a:	2b30      	cmp	r3, #48	; 0x30
   14d0c:	f000 826f 	beq.w	151ee <_svfprintf_r+0x19fe>
   14d10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   14d12:	4410      	add	r0, r2
   14d14:	eeb5 ab40 	vcmp.f64	d10, #0.0
   14d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14d1c:	f040 8146 	bne.w	14fac <_svfprintf_r+0x17bc>
   14d20:	4603      	mov	r3, r0
   14d22:	1b1b      	subs	r3, r3, r4
   14d24:	930e      	str	r3, [sp, #56]	; 0x38
   14d26:	2d47      	cmp	r5, #71	; 0x47
   14d28:	f000 8110 	beq.w	14f4c <_svfprintf_r+0x175c>
   14d2c:	2d46      	cmp	r5, #70	; 0x46
   14d2e:	f000 81b5 	beq.w	1509c <_svfprintf_r+0x18ac>
   14d32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14d34:	930c      	str	r3, [sp, #48]	; 0x30
   14d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14d38:	2d41      	cmp	r5, #65	; 0x41
   14d3a:	f103 33ff 	add.w	r3, r3, #4294967295
   14d3e:	931b      	str	r3, [sp, #108]	; 0x6c
   14d40:	f000 81e5 	beq.w	1510e <_svfprintf_r+0x191e>
   14d44:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   14d48:	2100      	movs	r1, #0
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	bfb8      	it	lt
   14d4e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   14d50:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   14d54:	bfba      	itte	lt
   14d56:	f1c3 0301 	rsblt	r3, r3, #1
   14d5a:	222d      	movlt	r2, #45	; 0x2d
   14d5c:	222b      	movge	r2, #43	; 0x2b
   14d5e:	2b09      	cmp	r3, #9
   14d60:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   14d64:	f340 81da 	ble.w	1511c <_svfprintf_r+0x192c>
   14d68:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   14d6c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 1518c <_svfprintf_r+0x199c>
   14d70:	462a      	mov	r2, r5
   14d72:	4610      	mov	r0, r2
   14d74:	fb8c 2103 	smull	r2, r1, ip, r3
   14d78:	17da      	asrs	r2, r3, #31
   14d7a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   14d7e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   14d82:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   14d86:	3130      	adds	r1, #48	; 0x30
   14d88:	f800 1c01 	strb.w	r1, [r0, #-1]
   14d8c:	4619      	mov	r1, r3
   14d8e:	2963      	cmp	r1, #99	; 0x63
   14d90:	4613      	mov	r3, r2
   14d92:	f100 32ff 	add.w	r2, r0, #4294967295
   14d96:	dcec      	bgt.n	14d72 <_svfprintf_r+0x1582>
   14d98:	3330      	adds	r3, #48	; 0x30
   14d9a:	b2d9      	uxtb	r1, r3
   14d9c:	1e83      	subs	r3, r0, #2
   14d9e:	429d      	cmp	r5, r3
   14da0:	f802 1c01 	strb.w	r1, [r2, #-1]
   14da4:	f240 828b 	bls.w	152be <_svfprintf_r+0x1ace>
   14da8:	4613      	mov	r3, r2
   14daa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14dae:	e001      	b.n	14db4 <_svfprintf_r+0x15c4>
   14db0:	f813 1b01 	ldrb.w	r1, [r3], #1
   14db4:	f802 1b01 	strb.w	r1, [r2], #1
   14db8:	429d      	cmp	r5, r3
   14dba:	d1f9      	bne.n	14db0 <_svfprintf_r+0x15c0>
   14dbc:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   14dc0:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   14dc4:	1a1b      	subs	r3, r3, r0
   14dc6:	4413      	add	r3, r2
   14dc8:	aa1e      	add	r2, sp, #120	; 0x78
   14dca:	1a9b      	subs	r3, r3, r2
   14dcc:	9314      	str	r3, [sp, #80]	; 0x50
   14dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14dd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14dd2:	2b01      	cmp	r3, #1
   14dd4:	441a      	add	r2, r3
   14dd6:	9205      	str	r2, [sp, #20]
   14dd8:	f340 8203 	ble.w	151e2 <_svfprintf_r+0x19f2>
   14ddc:	9b05      	ldr	r3, [sp, #20]
   14dde:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14de0:	4413      	add	r3, r2
   14de2:	9305      	str	r3, [sp, #20]
   14de4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   14de8:	9a05      	ldr	r2, [sp, #20]
   14dea:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   14dee:	2300      	movs	r3, #0
   14df0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14df4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14df8:	930f      	str	r3, [sp, #60]	; 0x3c
   14dfa:	9202      	str	r2, [sp, #8]
   14dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14dfe:	2b00      	cmp	r3, #0
   14e00:	f040 80b1 	bne.w	14f66 <_svfprintf_r+0x1776>
   14e04:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14e08:	9303      	str	r3, [sp, #12]
   14e0a:	f7fe bed2 	b.w	13bb2 <_svfprintf_r+0x3c2>
   14e0e:	4620      	mov	r0, r4
   14e10:	f7fd f916 	bl	12040 <strlen>
   14e14:	4602      	mov	r2, r0
   14e16:	9005      	str	r0, [sp, #20]
   14e18:	f7fe bf20 	b.w	13c5c <_svfprintf_r+0x46c>
   14e1c:	ee1b 1a10 	vmov	r1, s22
   14e20:	aa24      	add	r2, sp, #144	; 0x90
   14e22:	4658      	mov	r0, fp
   14e24:	f003 fb70 	bl	18508 <__ssprint_r>
   14e28:	f7fe bded 	b.w	13a06 <_svfprintf_r+0x216>
   14e2c:	1c59      	adds	r1, r3, #1
   14e2e:	4658      	mov	r0, fp
   14e30:	f7fa fdaa 	bl	f988 <_malloc_r>
   14e34:	4604      	mov	r4, r0
   14e36:	2800      	cmp	r0, #0
   14e38:	f000 81ca 	beq.w	151d0 <_svfprintf_r+0x19e0>
   14e3c:	9007      	str	r0, [sp, #28]
   14e3e:	e6e0      	b.n	14c02 <_svfprintf_r+0x1412>
   14e40:	ee1b 1a10 	vmov	r1, s22
   14e44:	aa24      	add	r2, sp, #144	; 0x90
   14e46:	4658      	mov	r0, fp
   14e48:	f003 fb5e 	bl	18508 <__ssprint_r>
   14e4c:	2800      	cmp	r0, #0
   14e4e:	f47f a934 	bne.w	140ba <_svfprintf_r+0x8ca>
   14e52:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14e54:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e58:	f7ff ba49 	b.w	142ee <_svfprintf_r+0xafe>
   14e5c:	ee1b 1a10 	vmov	r1, s22
   14e60:	aa24      	add	r2, sp, #144	; 0x90
   14e62:	4658      	mov	r0, fp
   14e64:	f003 fb50 	bl	18508 <__ssprint_r>
   14e68:	2800      	cmp	r0, #0
   14e6a:	f47f a926 	bne.w	140ba <_svfprintf_r+0x8ca>
   14e6e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14e72:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14e74:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e78:	e649      	b.n	14b0e <_svfprintf_r+0x131e>
   14e7a:	2306      	movs	r3, #6
   14e7c:	9303      	str	r3, [sp, #12]
   14e7e:	f7ff bb83 	b.w	14588 <_svfprintf_r+0xd98>
   14e82:	9b03      	ldr	r3, [sp, #12]
   14e84:	2102      	movs	r1, #2
   14e86:	1c5a      	adds	r2, r3, #1
   14e88:	e72b      	b.n	14ce2 <_svfprintf_r+0x14f2>
   14e8a:	9a03      	ldr	r2, [sp, #12]
   14e8c:	2103      	movs	r1, #3
   14e8e:	e728      	b.n	14ce2 <_svfprintf_r+0x14f2>
   14e90:	a81b      	add	r0, sp, #108	; 0x6c
   14e92:	eeb0 0b4a 	vmov.f64	d0, d10
   14e96:	f002 f817 	bl	16ec8 <frexp>
   14e9a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   14e9e:	ee20 0b07 	vmul.f64	d0, d0, d7
   14ea2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14eaa:	d101      	bne.n	14eb0 <_svfprintf_r+0x16c0>
   14eac:	2301      	movs	r3, #1
   14eae:	931b      	str	r3, [sp, #108]	; 0x6c
   14eb0:	48b3      	ldr	r0, [pc, #716]	; (15180 <_svfprintf_r+0x1990>)
   14eb2:	9b03      	ldr	r3, [sp, #12]
   14eb4:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   14eb8:	3b01      	subs	r3, #1
   14eba:	4622      	mov	r2, r4
   14ebc:	e004      	b.n	14ec8 <_svfprintf_r+0x16d8>
   14ebe:	eeb5 0b40 	vcmp.f64	d0, #0.0
   14ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14ec6:	d013      	beq.n	14ef0 <_svfprintf_r+0x1700>
   14ec8:	ee20 0b05 	vmul.f64	d0, d0, d5
   14ecc:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   14ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
   14ed4:	ee17 1a90 	vmov	r1, s15
   14ed8:	5c41      	ldrb	r1, [r0, r1]
   14eda:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   14ede:	4694      	mov	ip, r2
   14ee0:	ee30 0b46 	vsub.f64	d0, d0, d6
   14ee4:	f802 1b01 	strb.w	r1, [r2], #1
   14ee8:	4619      	mov	r1, r3
   14eea:	f103 33ff 	add.w	r3, r3, #4294967295
   14eee:	d1e6      	bne.n	14ebe <_svfprintf_r+0x16ce>
   14ef0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   14ef4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   14ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14efc:	f300 8148 	bgt.w	15190 <_svfprintf_r+0x19a0>
   14f00:	eeb4 0b46 	vcmp.f64	d0, d6
   14f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14f08:	d104      	bne.n	14f14 <_svfprintf_r+0x1724>
   14f0a:	ee17 3a90 	vmov	r3, s15
   14f0e:	07db      	lsls	r3, r3, #31
   14f10:	f100 813e 	bmi.w	15190 <_svfprintf_r+0x19a0>
   14f14:	2900      	cmp	r1, #0
   14f16:	db06      	blt.n	14f26 <_svfprintf_r+0x1736>
   14f18:	1c4b      	adds	r3, r1, #1
   14f1a:	4413      	add	r3, r2
   14f1c:	2130      	movs	r1, #48	; 0x30
   14f1e:	f802 1b01 	strb.w	r1, [r2], #1
   14f22:	4293      	cmp	r3, r2
   14f24:	d1fb      	bne.n	14f1e <_svfprintf_r+0x172e>
   14f26:	1b13      	subs	r3, r2, r4
   14f28:	930e      	str	r3, [sp, #56]	; 0x38
   14f2a:	e6fc      	b.n	14d26 <_svfprintf_r+0x1536>
   14f2c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   14f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14f30:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   14f34:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   14f38:	9613      	str	r6, [sp, #76]	; 0x4c
   14f3a:	18e3      	adds	r3, r4, r3
   14f3c:	429d      	cmp	r5, r3
   14f3e:	4629      	mov	r1, r5
   14f40:	bf28      	it	cs
   14f42:	4619      	movcs	r1, r3
   14f44:	4682      	mov	sl, r0
   14f46:	9105      	str	r1, [sp, #20]
   14f48:	f7ff b9d8 	b.w	142fc <_svfprintf_r+0xb0c>
   14f4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14f4e:	930c      	str	r3, [sp, #48]	; 0x30
   14f50:	1cda      	adds	r2, r3, #3
   14f52:	db02      	blt.n	14f5a <_svfprintf_r+0x176a>
   14f54:	9a03      	ldr	r2, [sp, #12]
   14f56:	4293      	cmp	r3, r2
   14f58:	dd0c      	ble.n	14f74 <_svfprintf_r+0x1784>
   14f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f5c:	3b02      	subs	r3, #2
   14f5e:	930b      	str	r3, [sp, #44]	; 0x2c
   14f60:	f023 0520 	bic.w	r5, r3, #32
   14f64:	e6e7      	b.n	14d36 <_svfprintf_r+0x1546>
   14f66:	212d      	movs	r1, #45	; 0x2d
   14f68:	2300      	movs	r3, #0
   14f6a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   14f6e:	9303      	str	r3, [sp, #12]
   14f70:	f7fe be22 	b.w	13bb8 <_svfprintf_r+0x3c8>
   14f74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14f76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14f78:	4293      	cmp	r3, r2
   14f7a:	f2c0 80bd 	blt.w	150f8 <_svfprintf_r+0x1908>
   14f7e:	07f0      	lsls	r0, r6, #31
   14f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14f82:	f140 8132 	bpl.w	151ea <_svfprintf_r+0x19fa>
   14f86:	9a10      	ldr	r2, [sp, #64]	; 0x40
   14f88:	4413      	add	r3, r2
   14f8a:	9305      	str	r3, [sp, #20]
   14f8c:	0571      	lsls	r1, r6, #21
   14f8e:	d503      	bpl.n	14f98 <_svfprintf_r+0x17a8>
   14f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14f92:	2b00      	cmp	r3, #0
   14f94:	f300 8135 	bgt.w	15202 <_svfprintf_r+0x1a12>
   14f98:	9b05      	ldr	r3, [sp, #20]
   14f9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14f9e:	9302      	str	r3, [sp, #8]
   14fa0:	2367      	movs	r3, #103	; 0x67
   14fa2:	930b      	str	r3, [sp, #44]	; 0x2c
   14fa4:	2300      	movs	r3, #0
   14fa6:	930f      	str	r3, [sp, #60]	; 0x3c
   14fa8:	930d      	str	r3, [sp, #52]	; 0x34
   14faa:	e727      	b.n	14dfc <_svfprintf_r+0x160c>
   14fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14fae:	4283      	cmp	r3, r0
   14fb0:	f4bf aeb7 	bcs.w	14d22 <_svfprintf_r+0x1532>
   14fb4:	2130      	movs	r1, #48	; 0x30
   14fb6:	1c5a      	adds	r2, r3, #1
   14fb8:	9222      	str	r2, [sp, #136]	; 0x88
   14fba:	7019      	strb	r1, [r3, #0]
   14fbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14fbe:	4298      	cmp	r0, r3
   14fc0:	d8f9      	bhi.n	14fb6 <_svfprintf_r+0x17c6>
   14fc2:	e6ae      	b.n	14d22 <_svfprintf_r+0x1532>
   14fc4:	07f3      	lsls	r3, r6, #31
   14fc6:	f100 80a7 	bmi.w	15118 <_svfprintf_r+0x1928>
   14fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   14fcc:	e6a9      	b.n	14d22 <_svfprintf_r+0x1532>
   14fce:	aa24      	add	r2, sp, #144	; 0x90
   14fd0:	4658      	mov	r0, fp
   14fd2:	9105      	str	r1, [sp, #20]
   14fd4:	f003 fa98 	bl	18508 <__ssprint_r>
   14fd8:	2800      	cmp	r0, #0
   14fda:	f47f a86e 	bne.w	140ba <_svfprintf_r+0x8ca>
   14fde:	f896 c000 	ldrb.w	ip, [r6]
   14fe2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14fe4:	9905      	ldr	r1, [sp, #20]
   14fe6:	a827      	add	r0, sp, #156	; 0x9c
   14fe8:	4465      	add	r5, ip
   14fea:	f7ff bbec 	b.w	147c6 <_svfprintf_r+0xfd6>
   14fee:	ee1b 1a10 	vmov	r1, s22
   14ff2:	aa24      	add	r2, sp, #144	; 0x90
   14ff4:	4658      	mov	r0, fp
   14ff6:	f003 fa87 	bl	18508 <__ssprint_r>
   14ffa:	2800      	cmp	r0, #0
   14ffc:	f47f a85d 	bne.w	140ba <_svfprintf_r+0x8ca>
   15000:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15002:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15006:	f7ff b96b 	b.w	142e0 <_svfprintf_r+0xaf0>
   1500a:	2378      	movs	r3, #120	; 0x78
   1500c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15010:	2330      	movs	r3, #48	; 0x30
   15012:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   15016:	9b03      	ldr	r3, [sp, #12]
   15018:	2b63      	cmp	r3, #99	; 0x63
   1501a:	f048 0602 	orr.w	r6, r8, #2
   1501e:	f300 80a6 	bgt.w	1516e <_svfprintf_r+0x197e>
   15022:	2300      	movs	r3, #0
   15024:	9307      	str	r3, [sp, #28]
   15026:	ac37      	add	r4, sp, #220	; 0xdc
   15028:	ee18 3a90 	vmov	r3, s17
   1502c:	2b00      	cmp	r3, #0
   1502e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   15032:	db2b      	blt.n	1508c <_svfprintf_r+0x189c>
   15034:	eeb0 ab48 	vmov.f64	d10, d8
   15038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1503a:	f023 0520 	bic.w	r5, r3, #32
   1503e:	2300      	movs	r3, #0
   15040:	9309      	str	r3, [sp, #36]	; 0x24
   15042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15044:	2b61      	cmp	r3, #97	; 0x61
   15046:	f47f aaad 	bne.w	145a4 <_svfprintf_r+0xdb4>
   1504a:	eeb0 0b4a 	vmov.f64	d0, d10
   1504e:	a81b      	add	r0, sp, #108	; 0x6c
   15050:	f001 ff3a 	bl	16ec8 <frexp>
   15054:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15058:	ee20 0b07 	vmul.f64	d0, d0, d7
   1505c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15064:	d101      	bne.n	1506a <_svfprintf_r+0x187a>
   15066:	2301      	movs	r3, #1
   15068:	931b      	str	r3, [sp, #108]	; 0x6c
   1506a:	4846      	ldr	r0, [pc, #280]	; (15184 <_svfprintf_r+0x1994>)
   1506c:	e721      	b.n	14eb2 <_svfprintf_r+0x16c2>
   1506e:	ee1b 1a10 	vmov	r1, s22
   15072:	aa24      	add	r2, sp, #144	; 0x90
   15074:	4658      	mov	r0, fp
   15076:	f003 fa47 	bl	18508 <__ssprint_r>
   1507a:	2800      	cmp	r0, #0
   1507c:	f47f a81d 	bne.w	140ba <_svfprintf_r+0x8ca>
   15080:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15082:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15084:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15088:	f7ff b94e 	b.w	14328 <_svfprintf_r+0xb38>
   1508c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1508e:	f023 0520 	bic.w	r5, r3, #32
   15092:	232d      	movs	r3, #45	; 0x2d
   15094:	9309      	str	r3, [sp, #36]	; 0x24
   15096:	eeb1 ab48 	vneg.f64	d10, d8
   1509a:	e7d2      	b.n	15042 <_svfprintf_r+0x1852>
   1509c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1509e:	920c      	str	r2, [sp, #48]	; 0x30
   150a0:	2a00      	cmp	r2, #0
   150a2:	f006 0301 	and.w	r3, r6, #1
   150a6:	f340 810d 	ble.w	152c4 <_svfprintf_r+0x1ad4>
   150aa:	9903      	ldr	r1, [sp, #12]
   150ac:	430b      	orrs	r3, r1
   150ae:	f040 80cf 	bne.w	15250 <_svfprintf_r+0x1a60>
   150b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   150b4:	9305      	str	r3, [sp, #20]
   150b6:	2366      	movs	r3, #102	; 0x66
   150b8:	930b      	str	r3, [sp, #44]	; 0x2c
   150ba:	0572      	lsls	r2, r6, #21
   150bc:	f100 80a3 	bmi.w	15206 <_svfprintf_r+0x1a16>
   150c0:	9b05      	ldr	r3, [sp, #20]
   150c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   150c6:	9302      	str	r3, [sp, #8]
   150c8:	e76c      	b.n	14fa4 <_svfprintf_r+0x17b4>
   150ca:	ee1b 1a10 	vmov	r1, s22
   150ce:	aa24      	add	r2, sp, #144	; 0x90
   150d0:	4658      	mov	r0, fp
   150d2:	f003 fa19 	bl	18508 <__ssprint_r>
   150d6:	2800      	cmp	r0, #0
   150d8:	f47e afef 	bne.w	140ba <_svfprintf_r+0x8ca>
   150dc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   150de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   150e2:	1b1c      	subs	r4, r3, r4
   150e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   150e8:	f7ff b936 	b.w	14358 <_svfprintf_r+0xb68>
   150ec:	2358      	movs	r3, #88	; 0x58
   150ee:	e78d      	b.n	1500c <_svfprintf_r+0x181c>
   150f0:	2200      	movs	r2, #0
   150f2:	9203      	str	r2, [sp, #12]
   150f4:	f7fe bbda 	b.w	138ac <_svfprintf_r+0xbc>
   150f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
   150fc:	189a      	adds	r2, r3, r2
   150fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15100:	9205      	str	r2, [sp, #20]
   15102:	2b00      	cmp	r3, #0
   15104:	f340 80ab 	ble.w	1525e <_svfprintf_r+0x1a6e>
   15108:	2367      	movs	r3, #103	; 0x67
   1510a:	930b      	str	r3, [sp, #44]	; 0x2c
   1510c:	e7d5      	b.n	150ba <_svfprintf_r+0x18ca>
   1510e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15110:	320f      	adds	r2, #15
   15112:	b2d2      	uxtb	r2, r2
   15114:	2101      	movs	r1, #1
   15116:	e618      	b.n	14d4a <_svfprintf_r+0x155a>
   15118:	18a0      	adds	r0, r4, r2
   1511a:	e5fb      	b.n	14d14 <_svfprintf_r+0x1524>
   1511c:	2900      	cmp	r1, #0
   1511e:	f040 80a8 	bne.w	15272 <_svfprintf_r+0x1a82>
   15122:	2230      	movs	r2, #48	; 0x30
   15124:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   15128:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   1512c:	3330      	adds	r3, #48	; 0x30
   1512e:	f802 3b01 	strb.w	r3, [r2], #1
   15132:	ab1e      	add	r3, sp, #120	; 0x78
   15134:	1ad3      	subs	r3, r2, r3
   15136:	9314      	str	r3, [sp, #80]	; 0x50
   15138:	e649      	b.n	14dce <_svfprintf_r+0x15de>
   1513a:	3301      	adds	r3, #1
   1513c:	4912      	ldr	r1, [pc, #72]	; (15188 <_svfprintf_r+0x1998>)
   1513e:	f8ca 5004 	str.w	r5, [sl, #4]
   15142:	442a      	add	r2, r5
   15144:	2b07      	cmp	r3, #7
   15146:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1514a:	f8ca 1000 	str.w	r1, [sl]
   1514e:	f77f ac33 	ble.w	149b8 <_svfprintf_r+0x11c8>
   15152:	ee1b 1a10 	vmov	r1, s22
   15156:	aa24      	add	r2, sp, #144	; 0x90
   15158:	4658      	mov	r0, fp
   1515a:	f003 f9d5 	bl	18508 <__ssprint_r>
   1515e:	2800      	cmp	r0, #0
   15160:	f47e afab 	bne.w	140ba <_svfprintf_r+0x8ca>
   15164:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15168:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1516c:	e426      	b.n	149bc <_svfprintf_r+0x11cc>
   1516e:	1c59      	adds	r1, r3, #1
   15170:	4658      	mov	r0, fp
   15172:	f7fa fc09 	bl	f988 <_malloc_r>
   15176:	4604      	mov	r4, r0
   15178:	b350      	cbz	r0, 151d0 <_svfprintf_r+0x19e0>
   1517a:	9007      	str	r0, [sp, #28]
   1517c:	e754      	b.n	15028 <_svfprintf_r+0x1838>
   1517e:	bf00      	nop
   15180:	20001130 	.word	0x20001130
   15184:	2000111c 	.word	0x2000111c
   15188:	2000896c 	.word	0x2000896c
   1518c:	66666667 	.word	0x66666667
   15190:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   15194:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   15198:	f890 c00f 	ldrb.w	ip, [r0, #15]
   1519c:	4561      	cmp	r1, ip
   1519e:	4613      	mov	r3, r2
   151a0:	d10a      	bne.n	151b8 <_svfprintf_r+0x19c8>
   151a2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   151a6:	f803 ec01 	strb.w	lr, [r3, #-1]
   151aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   151ac:	1e59      	subs	r1, r3, #1
   151ae:	9122      	str	r1, [sp, #136]	; 0x88
   151b0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   151b4:	458c      	cmp	ip, r1
   151b6:	d0f6      	beq.n	151a6 <_svfprintf_r+0x19b6>
   151b8:	2939      	cmp	r1, #57	; 0x39
   151ba:	bf16      	itet	ne
   151bc:	3101      	addne	r1, #1
   151be:	7a81      	ldrbeq	r1, [r0, #10]
   151c0:	b2c9      	uxtbne	r1, r1
   151c2:	f803 1c01 	strb.w	r1, [r3, #-1]
   151c6:	e6ae      	b.n	14f26 <_svfprintf_r+0x1736>
   151c8:	2300      	movs	r3, #0
   151ca:	4690      	mov	r8, r2
   151cc:	9307      	str	r3, [sp, #28]
   151ce:	e760      	b.n	15092 <_svfprintf_r+0x18a2>
   151d0:	ee1b 2a10 	vmov	r2, s22
   151d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   151d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   151dc:	8193      	strh	r3, [r2, #12]
   151de:	f7fe bc16 	b.w	13a0e <_svfprintf_r+0x21e>
   151e2:	07f5      	lsls	r5, r6, #31
   151e4:	f57f adfe 	bpl.w	14de4 <_svfprintf_r+0x15f4>
   151e8:	e5f8      	b.n	14ddc <_svfprintf_r+0x15ec>
   151ea:	9305      	str	r3, [sp, #20]
   151ec:	e6ce      	b.n	14f8c <_svfprintf_r+0x179c>
   151ee:	eeb5 ab40 	vcmp.f64	d10, #0.0
   151f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   151f6:	f43f ad8b 	beq.w	14d10 <_svfprintf_r+0x1520>
   151fa:	f1c2 0201 	rsb	r2, r2, #1
   151fe:	921b      	str	r2, [sp, #108]	; 0x6c
   15200:	e587      	b.n	14d12 <_svfprintf_r+0x1522>
   15202:	2367      	movs	r3, #103	; 0x67
   15204:	930b      	str	r3, [sp, #44]	; 0x2c
   15206:	9913      	ldr	r1, [sp, #76]	; 0x4c
   15208:	780b      	ldrb	r3, [r1, #0]
   1520a:	2bff      	cmp	r3, #255	; 0xff
   1520c:	d079      	beq.n	15302 <_svfprintf_r+0x1b12>
   1520e:	2500      	movs	r5, #0
   15210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15212:	4628      	mov	r0, r5
   15214:	e003      	b.n	1521e <_svfprintf_r+0x1a2e>
   15216:	3001      	adds	r0, #1
   15218:	3101      	adds	r1, #1
   1521a:	2bff      	cmp	r3, #255	; 0xff
   1521c:	d008      	beq.n	15230 <_svfprintf_r+0x1a40>
   1521e:	4293      	cmp	r3, r2
   15220:	da06      	bge.n	15230 <_svfprintf_r+0x1a40>
   15222:	1ad2      	subs	r2, r2, r3
   15224:	784b      	ldrb	r3, [r1, #1]
   15226:	2b00      	cmp	r3, #0
   15228:	d1f5      	bne.n	15216 <_svfprintf_r+0x1a26>
   1522a:	780b      	ldrb	r3, [r1, #0]
   1522c:	3501      	adds	r5, #1
   1522e:	e7f4      	b.n	1521a <_svfprintf_r+0x1a2a>
   15230:	920c      	str	r2, [sp, #48]	; 0x30
   15232:	9113      	str	r1, [sp, #76]	; 0x4c
   15234:	900d      	str	r0, [sp, #52]	; 0x34
   15236:	950f      	str	r5, [sp, #60]	; 0x3c
   15238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1523a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1523c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1523e:	4413      	add	r3, r2
   15240:	9a05      	ldr	r2, [sp, #20]
   15242:	fb01 2303 	mla	r3, r1, r3, r2
   15246:	9305      	str	r3, [sp, #20]
   15248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1524c:	9302      	str	r3, [sp, #8]
   1524e:	e5d5      	b.n	14dfc <_svfprintf_r+0x160c>
   15250:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15252:	18d3      	adds	r3, r2, r3
   15254:	4419      	add	r1, r3
   15256:	2366      	movs	r3, #102	; 0x66
   15258:	9105      	str	r1, [sp, #20]
   1525a:	930b      	str	r3, [sp, #44]	; 0x2c
   1525c:	e72d      	b.n	150ba <_svfprintf_r+0x18ca>
   1525e:	f1c3 0301 	rsb	r3, r3, #1
   15262:	441a      	add	r2, r3
   15264:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   15268:	9302      	str	r3, [sp, #8]
   1526a:	2367      	movs	r3, #103	; 0x67
   1526c:	9205      	str	r2, [sp, #20]
   1526e:	930b      	str	r3, [sp, #44]	; 0x2c
   15270:	e698      	b.n	14fa4 <_svfprintf_r+0x17b4>
   15272:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15276:	e759      	b.n	1512c <_svfprintf_r+0x193c>
   15278:	9b03      	ldr	r3, [sp, #12]
   1527a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1527e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   15282:	9305      	str	r3, [sp, #20]
   15284:	e4b4      	b.n	14bf0 <_svfprintf_r+0x1400>
   15286:	ee18 3a90 	vmov	r3, s17
   1528a:	2b00      	cmp	r3, #0
   1528c:	bfb4      	ite	lt
   1528e:	212d      	movlt	r1, #45	; 0x2d
   15290:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   15294:	4c25      	ldr	r4, [pc, #148]	; (1532c <_svfprintf_r+0x1b3c>)
   15296:	4b26      	ldr	r3, [pc, #152]	; (15330 <_svfprintf_r+0x1b40>)
   15298:	bfb8      	it	lt
   1529a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   1529e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   152a2:	f7fe bc79 	b.w	13b98 <_svfprintf_r+0x3a8>
   152a6:	9b03      	ldr	r3, [sp, #12]
   152a8:	9302      	str	r3, [sp, #8]
   152aa:	9305      	str	r3, [sp, #20]
   152ac:	2373      	movs	r3, #115	; 0x73
   152ae:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   152b2:	9003      	str	r0, [sp, #12]
   152b4:	900f      	str	r0, [sp, #60]	; 0x3c
   152b6:	900d      	str	r0, [sp, #52]	; 0x34
   152b8:	930b      	str	r3, [sp, #44]	; 0x2c
   152ba:	f7fe bc7a 	b.w	13bb2 <_svfprintf_r+0x3c2>
   152be:	2302      	movs	r3, #2
   152c0:	9314      	str	r3, [sp, #80]	; 0x50
   152c2:	e584      	b.n	14dce <_svfprintf_r+0x15de>
   152c4:	9a03      	ldr	r2, [sp, #12]
   152c6:	4313      	orrs	r3, r2
   152c8:	d105      	bne.n	152d6 <_svfprintf_r+0x1ae6>
   152ca:	2301      	movs	r3, #1
   152cc:	2266      	movs	r2, #102	; 0x66
   152ce:	9302      	str	r3, [sp, #8]
   152d0:	920b      	str	r2, [sp, #44]	; 0x2c
   152d2:	9305      	str	r3, [sp, #20]
   152d4:	e666      	b.n	14fa4 <_svfprintf_r+0x17b4>
   152d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   152d8:	3301      	adds	r3, #1
   152da:	441a      	add	r2, r3
   152dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   152e0:	9302      	str	r3, [sp, #8]
   152e2:	2366      	movs	r3, #102	; 0x66
   152e4:	9205      	str	r2, [sp, #20]
   152e6:	930b      	str	r3, [sp, #44]	; 0x2c
   152e8:	e65c      	b.n	14fa4 <_svfprintf_r+0x17b4>
   152ea:	9a08      	ldr	r2, [sp, #32]
   152ec:	f899 3001 	ldrb.w	r3, [r9, #1]
   152f0:	4689      	mov	r9, r1
   152f2:	f852 1b04 	ldr.w	r1, [r2], #4
   152f6:	9208      	str	r2, [sp, #32]
   152f8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   152fc:	9103      	str	r1, [sp, #12]
   152fe:	f7fe bad3 	b.w	138a8 <_svfprintf_r+0xb8>
   15302:	2300      	movs	r3, #0
   15304:	930f      	str	r3, [sp, #60]	; 0x3c
   15306:	930d      	str	r3, [sp, #52]	; 0x34
   15308:	e796      	b.n	15238 <_svfprintf_r+0x1a48>
   1530a:	230c      	movs	r3, #12
   1530c:	f8cb 3000 	str.w	r3, [fp]
   15310:	f04f 33ff 	mov.w	r3, #4294967295
   15314:	9304      	str	r3, [sp, #16]
   15316:	f7fe bb81 	b.w	13a1c <_svfprintf_r+0x22c>
   1531a:	ee1b 2a10 	vmov	r2, s22
   1531e:	8993      	ldrh	r3, [r2, #12]
   15320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15324:	8193      	strh	r3, [r2, #12]
   15326:	f7fe bec8 	b.w	140ba <_svfprintf_r+0x8ca>
   1532a:	bf00      	nop
   1532c:	20001118 	.word	0x20001118
   15330:	20000b68 	.word	0x20000b68

00015334 <__ssvfscanf_r>:
   15334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15338:	ed2d 8b02 	vpush	{d8}
   1533c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   15340:	468b      	mov	fp, r1
   15342:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   15346:	af02      	add	r7, sp, #8
   15348:	048c      	lsls	r4, r1, #18
   1534a:	4681      	mov	r9, r0
   1534c:	64fa      	str	r2, [r7, #76]	; 0x4c
   1534e:	633b      	str	r3, [r7, #48]	; 0x30
   15350:	d409      	bmi.n	15366 <__ssvfscanf_r+0x32>
   15352:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   15356:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1535a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1535e:	f8ab 100c 	strh.w	r1, [fp, #12]
   15362:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   15366:	2300      	movs	r3, #0
   15368:	461c      	mov	r4, r3
   1536a:	2208      	movs	r2, #8
   1536c:	4619      	mov	r1, r3
   1536e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   15372:	62fb      	str	r3, [r7, #44]	; 0x2c
   15374:	46a2      	mov	sl, r4
   15376:	f7fc fa77 	bl	11868 <memset>
   1537a:	643c      	str	r4, [r7, #64]	; 0x40
   1537c:	627c      	str	r4, [r7, #36]	; 0x24
   1537e:	63bc      	str	r4, [r7, #56]	; 0x38
   15380:	647c      	str	r4, [r7, #68]	; 0x44
   15382:	4b83      	ldr	r3, [pc, #524]	; (15590 <__ssvfscanf_r+0x25c>)
   15384:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   15388:	f7fc fb8e 	bl	11aa8 <__locale_mb_cur_max>
   1538c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   15390:	4603      	mov	r3, r0
   15392:	9200      	str	r2, [sp, #0]
   15394:	f107 0154 	add.w	r1, r7, #84	; 0x54
   15398:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1539a:	4648      	mov	r0, r9
   1539c:	47a0      	blx	r4
   1539e:	1e05      	subs	r5, r0, #0
   153a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   153a2:	db33      	blt.n	1540c <__ssvfscanf_r+0xd8>
   153a4:	442b      	add	r3, r5
   153a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   153a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   153aa:	462e      	mov	r6, r5
   153ac:	2b00      	cmp	r3, #0
   153ae:	f000 80b6 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   153b2:	2d01      	cmp	r5, #1
   153b4:	d038      	beq.n	15428 <__ssvfscanf_r+0xf4>
   153b6:	2b25      	cmp	r3, #37	; 0x25
   153b8:	d040      	beq.n	1543c <__ssvfscanf_r+0x108>
   153ba:	2d00      	cmp	r5, #0
   153bc:	d0e1      	beq.n	15382 <__ssvfscanf_r+0x4e>
   153be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   153c0:	1b9e      	subs	r6, r3, r6
   153c2:	f8db 3004 	ldr.w	r3, [fp, #4]
   153c6:	1e74      	subs	r4, r6, #1
   153c8:	2b00      	cmp	r3, #0
   153ca:	f340 8098 	ble.w	154fe <__ssvfscanf_r+0x1ca>
   153ce:	f8db 1000 	ldr.w	r1, [fp]
   153d2:	f894 c001 	ldrb.w	ip, [r4, #1]
   153d6:	f891 e000 	ldrb.w	lr, [r1]
   153da:	1ca3      	adds	r3, r4, #2
   153dc:	eb0a 0003 	add.w	r0, sl, r3
   153e0:	45e6      	cmp	lr, ip
   153e2:	f101 0101 	add.w	r1, r1, #1
   153e6:	eba3 0206 	sub.w	r2, r3, r6
   153ea:	f104 0401 	add.w	r4, r4, #1
   153ee:	eba0 0006 	sub.w	r0, r0, r6
   153f2:	f040 8094 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   153f6:	f8db 3004 	ldr.w	r3, [fp, #4]
   153fa:	f8cb 1000 	str.w	r1, [fp]
   153fe:	3b01      	subs	r3, #1
   15400:	42aa      	cmp	r2, r5
   15402:	f8cb 3004 	str.w	r3, [fp, #4]
   15406:	dbdf      	blt.n	153c8 <__ssvfscanf_r+0x94>
   15408:	4682      	mov	sl, r0
   1540a:	e7ba      	b.n	15382 <__ssvfscanf_r+0x4e>
   1540c:	3301      	adds	r3, #1
   1540e:	64fb      	str	r3, [r7, #76]	; 0x4c
   15410:	2208      	movs	r2, #8
   15412:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   15416:	2100      	movs	r1, #0
   15418:	f107 0058 	add.w	r0, r7, #88	; 0x58
   1541c:	657b      	str	r3, [r7, #84]	; 0x54
   1541e:	f7fc fa23 	bl	11868 <memset>
   15422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15424:	2b00      	cmp	r3, #0
   15426:	d07a      	beq.n	1551e <__ssvfscanf_r+0x1ea>
   15428:	4e5a      	ldr	r6, [pc, #360]	; (15594 <__ssvfscanf_r+0x260>)
   1542a:	5cf2      	ldrb	r2, [r6, r3]
   1542c:	0710      	lsls	r0, r2, #28
   1542e:	f100 851c 	bmi.w	15e6a <__ssvfscanf_r+0xb36>
   15432:	2b25      	cmp	r3, #37	; 0x25
   15434:	f040 8086 	bne.w	15544 <__ssvfscanf_r+0x210>
   15438:	2501      	movs	r5, #1
   1543a:	462e      	mov	r6, r5
   1543c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1543e:	2400      	movs	r4, #0
   15440:	7802      	ldrb	r2, [r0, #0]
   15442:	46a0      	mov	r8, r4
   15444:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   15448:	1c41      	adds	r1, r0, #1
   1544a:	2b55      	cmp	r3, #85	; 0x55
   1544c:	d867      	bhi.n	1551e <__ssvfscanf_r+0x1ea>
   1544e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15452:	070a      	.short	0x070a
   15454:	00660066 	.word	0x00660066
   15458:	00660066 	.word	0x00660066
   1545c:	00660701 	.word	0x00660701
   15460:	00660066 	.word	0x00660066
   15464:	00660066 	.word	0x00660066
   15468:	060c060c 	.word	0x060c060c
   1546c:	060c060c 	.word	0x060c060c
   15470:	060c060c 	.word	0x060c060c
   15474:	060c060c 	.word	0x060c060c
   15478:	060c060c 	.word	0x060c060c
   1547c:	00660066 	.word	0x00660066
   15480:	00660066 	.word	0x00660066
   15484:	00660066 	.word	0x00660066
   15488:	06180066 	.word	0x06180066
   1548c:	048e0066 	.word	0x048e0066
   15490:	061804c9 	.word	0x061804c9
   15494:	06180618 	.word	0x06180618
   15498:	00660066 	.word	0x00660066
   1549c:	00660066 	.word	0x00660066
   154a0:	00660082 	.word	0x00660082
   154a4:	04bf0066 	.word	0x04bf0066
   154a8:	00660066 	.word	0x00660066
   154ac:	00890066 	.word	0x00890066
   154b0:	00660066 	.word	0x00660066
   154b4:	00660066 	.word	0x00660066
   154b8:	0066066b 	.word	0x0066066b
   154bc:	06dd0066 	.word	0x06dd0066
   154c0:	00660066 	.word	0x00660066
   154c4:	00660066 	.word	0x00660066
   154c8:	06180066 	.word	0x06180066
   154cc:	04900066 	.word	0x04900066
   154d0:	061804cb 	.word	0x061804cb
   154d4:	06180618 	.word	0x06180618
   154d8:	06d206be 	.word	0x06d206be
   154dc:	00660082 	.word	0x00660082
   154e0:	06f306e7 	.word	0x06f306e7
   154e4:	04c106ac 	.word	0x04c106ac
   154e8:	006606da 	.word	0x006606da
   154ec:	008b0066 	.word	0x008b0066
   154f0:	06ca007d 	.word	0x06ca007d
   154f4:	00660066 	.word	0x00660066
   154f8:	0066066b 	.word	0x0066066b
   154fc:	007d      	.short	0x007d
   154fe:	4659      	mov	r1, fp
   15500:	4648      	mov	r0, r9
   15502:	f003 f8c1 	bl	18688 <__ssrefill_r>
   15506:	2800      	cmp	r0, #0
   15508:	f43f af61 	beq.w	153ce <__ssvfscanf_r+0x9a>
   1550c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1550e:	2b00      	cmp	r3, #0
   15510:	f001 8052 	beq.w	165b8 <__ssvfscanf_r+0x1284>
   15514:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   15518:	065a      	lsls	r2, r3, #25
   1551a:	f101 804d 	bmi.w	165b8 <__ssvfscanf_r+0x1284>
   1551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15520:	b143      	cbz	r3, 15534 <__ssvfscanf_r+0x200>
   15522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15524:	f8d3 8000 	ldr.w	r8, [r3]
   15528:	f1b8 0f00 	cmp.w	r8, #0
   1552c:	d002      	beq.n	15534 <__ssvfscanf_r+0x200>
   1552e:	4640      	mov	r0, r8
   15530:	f7fa fa22 	bl	f978 <free>
   15534:	6c78      	ldr	r0, [r7, #68]	; 0x44
   15536:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   1553a:	46bd      	mov	sp, r7
   1553c:	ecbd 8b02 	vpop	{d8}
   15540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15546:	2501      	movs	r5, #1
   15548:	1e5e      	subs	r6, r3, #1
   1554a:	e73a      	b.n	153c2 <__ssvfscanf_r+0x8e>
   1554c:	0723      	lsls	r3, r4, #28
   1554e:	d1e6      	bne.n	1551e <__ssvfscanf_r+0x1ea>
   15550:	7842      	ldrb	r2, [r0, #1]
   15552:	4608      	mov	r0, r1
   15554:	e776      	b.n	15444 <__ssvfscanf_r+0x110>
   15556:	0722      	lsls	r2, r4, #28
   15558:	d1e1      	bne.n	1551e <__ssvfscanf_r+0x1ea>
   1555a:	7842      	ldrb	r2, [r0, #1]
   1555c:	f044 0402 	orr.w	r4, r4, #2
   15560:	4608      	mov	r0, r1
   15562:	e76f      	b.n	15444 <__ssvfscanf_r+0x110>
   15564:	f044 0401 	orr.w	r4, r4, #1
   15568:	64f9      	str	r1, [r7, #76]	; 0x4c
   1556a:	2502      	movs	r5, #2
   1556c:	f8db 3004 	ldr.w	r3, [fp, #4]
   15570:	2b00      	cmp	r3, #0
   15572:	f340 8408 	ble.w	15d86 <__ssvfscanf_r+0xa52>
   15576:	0660      	lsls	r0, r4, #25
   15578:	f140 840f 	bpl.w	15d9a <__ssvfscanf_r+0xa66>
   1557c:	1e6b      	subs	r3, r5, #1
   1557e:	2b03      	cmp	r3, #3
   15580:	f201 80eb 	bhi.w	1675a <__ssvfscanf_r+0x1426>
   15584:	e8df f013 	tbh	[pc, r3, lsl #1]
   15588:	01f1027b 	.word	0x01f1027b
   1558c:	0008014b 	.word	0x0008014b
   15590:	20008e9c 	.word	0x20008e9c
   15594:	20000f81 	.word	0x20000f81
   15598:	4648      	mov	r0, r9
   1559a:	f001 fc8f 	bl	16ebc <_localeconv_r>
   1559e:	6803      	ldr	r3, [r0, #0]
   155a0:	623b      	str	r3, [r7, #32]
   155a2:	f108 33ff 	add.w	r3, r8, #4294967295
   155a6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   155aa:	f240 855a 	bls.w	16062 <__ssvfscanf_r+0xd2e>
   155ae:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   155b2:	eb08 0305 	add.w	r3, r8, r5
   155b6:	613b      	str	r3, [r7, #16]
   155b8:	f240 185d 	movw	r8, #349	; 0x15d
   155bc:	2600      	movs	r6, #0
   155be:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   155c2:	ee08 9a10 	vmov	s16, r9
   155c6:	e9c7 6605 	strd	r6, r6, [r7, #20]
   155ca:	63fe      	str	r6, [r7, #60]	; 0x3c
   155cc:	637e      	str	r6, [r7, #52]	; 0x34
   155ce:	61fe      	str	r6, [r7, #28]
   155d0:	64be      	str	r6, [r7, #72]	; 0x48
   155d2:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   155d6:	62bb      	str	r3, [r7, #40]	; 0x28
   155d8:	461d      	mov	r5, r3
   155da:	4646      	mov	r6, r8
   155dc:	f8db 1000 	ldr.w	r1, [fp]
   155e0:	780a      	ldrb	r2, [r1, #0]
   155e2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   155e6:	2b4e      	cmp	r3, #78	; 0x4e
   155e8:	d850      	bhi.n	1568c <__ssvfscanf_r+0x358>
   155ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   155ee:	037e      	.short	0x037e
   155f0:	037e004f 	.word	0x037e004f
   155f4:	004f004f 	.word	0x004f004f
   155f8:	00a600a3 	.word	0x00a600a3
   155fc:	00a600a6 	.word	0x00a600a6
   15600:	00a600a6 	.word	0x00a600a6
   15604:	00a600a6 	.word	0x00a600a6
   15608:	00a600a6 	.word	0x00a600a6
   1560c:	004f004f 	.word	0x004f004f
   15610:	004f004f 	.word	0x004f004f
   15614:	004f004f 	.word	0x004f004f
   15618:	0374004f 	.word	0x0374004f
   1561c:	030b030b 	.word	0x030b030b
   15620:	039e030b 	.word	0x039e030b
   15624:	004f0394 	.word	0x004f0394
   15628:	0384004f 	.word	0x0384004f
   1562c:	004f004f 	.word	0x004f004f
   15630:	004f004f 	.word	0x004f004f
   15634:	004f035d 	.word	0x004f035d
   15638:	004f033a 	.word	0x004f033a
   1563c:	004f004f 	.word	0x004f004f
   15640:	004f0333 	.word	0x004f0333
   15644:	004f004f 	.word	0x004f004f
   15648:	036d031e 	.word	0x036d031e
   1564c:	004f004f 	.word	0x004f004f
   15650:	004f004f 	.word	0x004f004f
   15654:	004f004f 	.word	0x004f004f
   15658:	0374004f 	.word	0x0374004f
   1565c:	030b030b 	.word	0x030b030b
   15660:	039e030b 	.word	0x039e030b
   15664:	004f0394 	.word	0x004f0394
   15668:	0384004f 	.word	0x0384004f
   1566c:	004f004f 	.word	0x004f004f
   15670:	004f004f 	.word	0x004f004f
   15674:	004f035d 	.word	0x004f035d
   15678:	004f033a 	.word	0x004f033a
   1567c:	004f004f 	.word	0x004f004f
   15680:	004f0333 	.word	0x004f0333
   15684:	004f004f 	.word	0x004f004f
   15688:	036d031e 	.word	0x036d031e
   1568c:	05a0      	lsls	r0, r4, #22
   1568e:	d56f      	bpl.n	15770 <__ssvfscanf_r+0x43c>
   15690:	6a38      	ldr	r0, [r7, #32]
   15692:	7803      	ldrb	r3, [r0, #0]
   15694:	4293      	cmp	r3, r2
   15696:	d16b      	bne.n	15770 <__ssvfscanf_r+0x43c>
   15698:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1569c:	607e      	str	r6, [r7, #4]
   1569e:	4681      	mov	r9, r0
   156a0:	ee18 6a10 	vmov	r6, s16
   156a4:	f04f 0800 	mov.w	r8, #0
   156a8:	465c      	mov	r4, fp
   156aa:	e007      	b.n	156bc <__ssvfscanf_r+0x388>
   156ac:	6021      	str	r1, [r4, #0]
   156ae:	f891 e000 	ldrb.w	lr, [r1]
   156b2:	f899 0000 	ldrb.w	r0, [r9]
   156b6:	4586      	cmp	lr, r0
   156b8:	d11c      	bne.n	156f4 <__ssvfscanf_r+0x3c0>
   156ba:	46da      	mov	sl, fp
   156bc:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   156c0:	4645      	mov	r5, r8
   156c2:	f10a 0b01 	add.w	fp, sl, #1
   156c6:	3101      	adds	r1, #1
   156c8:	f108 0801 	add.w	r8, r8, #1
   156cc:	2800      	cmp	r0, #0
   156ce:	f000 8664 	beq.w	1639a <__ssvfscanf_r+0x1066>
   156d2:	6860      	ldr	r0, [r4, #4]
   156d4:	3801      	subs	r0, #1
   156d6:	2800      	cmp	r0, #0
   156d8:	6060      	str	r0, [r4, #4]
   156da:	dce7      	bgt.n	156ac <__ssvfscanf_r+0x378>
   156dc:	4621      	mov	r1, r4
   156de:	4630      	mov	r0, r6
   156e0:	f002 ffd2 	bl	18688 <__ssrefill_r>
   156e4:	b930      	cbnz	r0, 156f4 <__ssvfscanf_r+0x3c0>
   156e6:	6821      	ldr	r1, [r4, #0]
   156e8:	f899 0000 	ldrb.w	r0, [r9]
   156ec:	f891 e000 	ldrb.w	lr, [r1]
   156f0:	4586      	cmp	lr, r0
   156f2:	d0e2      	beq.n	156ba <__ssvfscanf_r+0x386>
   156f4:	46a3      	mov	fp, r4
   156f6:	6a3a      	ldr	r2, [r7, #32]
   156f8:	68bc      	ldr	r4, [r7, #8]
   156fa:	613d      	str	r5, [r7, #16]
   156fc:	462b      	mov	r3, r5
   156fe:	46b1      	mov	r9, r6
   15700:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15702:	68fd      	ldr	r5, [r7, #12]
   15704:	64bd      	str	r5, [r7, #72]	; 0x48
   15706:	3301      	adds	r3, #1
   15708:	465d      	mov	r5, fp
   1570a:	eb02 0803 	add.w	r8, r2, r3
   1570e:	46b3      	mov	fp, r6
   15710:	4626      	mov	r6, r4
   15712:	4614      	mov	r4, r2
   15714:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   15718:	462a      	mov	r2, r5
   1571a:	4648      	mov	r0, r9
   1571c:	f002 ff74 	bl	18608 <_sungetc_r>
   15720:	4544      	cmp	r4, r8
   15722:	d1f7      	bne.n	15714 <__ssvfscanf_r+0x3e0>
   15724:	693b      	ldr	r3, [r7, #16]
   15726:	4634      	mov	r4, r6
   15728:	ebaa 0a03 	sub.w	sl, sl, r3
   1572c:	465e      	mov	r6, fp
   1572e:	46ab      	mov	fp, r5
   15730:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   15732:	e020      	b.n	15776 <__ssvfscanf_r+0x442>
   15734:	05e0      	lsls	r0, r4, #23
   15736:	f100 8501 	bmi.w	1613c <__ssvfscanf_r+0xe08>
   1573a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1573c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1573e:	42d9      	cmn	r1, r3
   15740:	d116      	bne.n	15770 <__ssvfscanf_r+0x43c>
   15742:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   15746:	f805 2b01 	strb.w	r2, [r5], #1
   1574a:	3e01      	subs	r6, #1
   1574c:	f8db 3004 	ldr.w	r3, [fp, #4]
   15750:	3b01      	subs	r3, #1
   15752:	2b00      	cmp	r3, #0
   15754:	f10a 0a01 	add.w	sl, sl, #1
   15758:	f8cb 3004 	str.w	r3, [fp, #4]
   1575c:	f340 836f 	ble.w	15e3e <__ssvfscanf_r+0xb0a>
   15760:	f8db 3000 	ldr.w	r3, [fp]
   15764:	3301      	adds	r3, #1
   15766:	f8cb 3000 	str.w	r3, [fp]
   1576a:	2e00      	cmp	r6, #0
   1576c:	f47f af36 	bne.w	155dc <__ssvfscanf_r+0x2a8>
   15770:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15772:	ee18 9a10 	vmov	r9, s16
   15776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15778:	2b00      	cmp	r3, #0
   1577a:	f040 82dc 	bne.w	15d36 <__ssvfscanf_r+0xa02>
   1577e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15780:	3b01      	subs	r3, #1
   15782:	2b01      	cmp	r3, #1
   15784:	f241 8016 	bls.w	167b4 <__ssvfscanf_r+0x1480>
   15788:	1e73      	subs	r3, r6, #1
   1578a:	2b06      	cmp	r3, #6
   1578c:	f240 8627 	bls.w	163de <__ssvfscanf_r+0x10aa>
   15790:	05e3      	lsls	r3, r4, #23
   15792:	d51b      	bpl.n	157cc <__ssvfscanf_r+0x498>
   15794:	0566      	lsls	r6, r4, #21
   15796:	f101 80b5 	bmi.w	16904 <__ssvfscanf_r+0x15d0>
   1579a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1579e:	2965      	cmp	r1, #101	; 0x65
   157a0:	f105 33ff 	add.w	r3, r5, #4294967295
   157a4:	f10a 36ff 	add.w	r6, sl, #4294967295
   157a8:	d00a      	beq.n	157c0 <__ssvfscanf_r+0x48c>
   157aa:	2945      	cmp	r1, #69	; 0x45
   157ac:	d008      	beq.n	157c0 <__ssvfscanf_r+0x48c>
   157ae:	465a      	mov	r2, fp
   157b0:	4648      	mov	r0, r9
   157b2:	f002 ff29 	bl	18608 <_sungetc_r>
   157b6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   157ba:	f1aa 0602 	sub.w	r6, sl, #2
   157be:	1eab      	subs	r3, r5, #2
   157c0:	465a      	mov	r2, fp
   157c2:	4648      	mov	r0, r9
   157c4:	46b2      	mov	sl, r6
   157c6:	461d      	mov	r5, r3
   157c8:	f002 ff1e 	bl	18608 <_sungetc_r>
   157cc:	f014 0210 	ands.w	r2, r4, #16
   157d0:	f47f add7 	bne.w	15382 <__ssvfscanf_r+0x4e>
   157d4:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   157d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   157dc:	702a      	strb	r2, [r5, #0]
   157de:	f000 84d2 	beq.w	16186 <__ssvfscanf_r+0xe52>
   157e2:	69bb      	ldr	r3, [r7, #24]
   157e4:	2b00      	cmp	r3, #0
   157e6:	f040 872c 	bne.w	16642 <__ssvfscanf_r+0x130e>
   157ea:	4648      	mov	r0, r9
   157ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   157ee:	2200      	movs	r2, #0
   157f0:	f7fb fcb6 	bl	11160 <_strtod_r>
   157f4:	07e0      	lsls	r0, r4, #31
   157f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   157f8:	f100 85c9 	bmi.w	1638e <__ssvfscanf_r+0x105a>
   157fc:	07a1      	lsls	r1, r4, #30
   157fe:	f100 85c6 	bmi.w	1638e <__ssvfscanf_r+0x105a>
   15802:	eeb4 0b40 	vcmp.f64	d0, d0
   15806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1580a:	f853 4b04 	ldr.w	r4, [r3], #4
   1580e:	f180 86f4 	bvs.w	165fa <__ssvfscanf_r+0x12c6>
   15812:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   15816:	633b      	str	r3, [r7, #48]	; 0x30
   15818:	ed84 0a00 	vstr	s0, [r4]
   1581c:	e3a2      	b.n	15f64 <__ssvfscanf_r+0xc30>
   1581e:	f108 33ff 	add.w	r3, r8, #4294967295
   15822:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   15826:	f240 83a2 	bls.w	15f6e <__ssvfscanf_r+0xc3a>
   1582a:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   1582e:	eb08 0302 	add.w	r3, r8, r2
   15832:	63fb      	str	r3, [r7, #60]	; 0x3c
   15834:	f240 185d 	movw	r8, #349	; 0x15d
   15838:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1583c:	2200      	movs	r2, #0
   1583e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   15840:	62bb      	str	r3, [r7, #40]	; 0x28
   15842:	4659      	mov	r1, fp
   15844:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   15848:	46d3      	mov	fp, sl
   1584a:	461d      	mov	r5, r3
   1584c:	4692      	mov	sl, r2
   1584e:	680a      	ldr	r2, [r1, #0]
   15850:	7810      	ldrb	r0, [r2, #0]
   15852:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   15856:	2b4d      	cmp	r3, #77	; 0x4d
   15858:	d860      	bhi.n	1591c <__ssvfscanf_r+0x5e8>
   1585a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1585e:	0282      	.short	0x0282
   15860:	0282005f 	.word	0x0282005f
   15864:	005f005f 	.word	0x005f005f
   15868:	01e002cd 	.word	0x01e002cd
   1586c:	01e001e0 	.word	0x01e001e0
   15870:	01e001e0 	.word	0x01e001e0
   15874:	01e001e0 	.word	0x01e001e0
   15878:	026f026f 	.word	0x026f026f
   1587c:	005f005f 	.word	0x005f005f
   15880:	005f005f 	.word	0x005f005f
   15884:	005f005f 	.word	0x005f005f
   15888:	004e005f 	.word	0x004e005f
   1588c:	004e004e 	.word	0x004e004e
   15890:	004e004e 	.word	0x004e004e
   15894:	005f004e 	.word	0x005f004e
   15898:	005f005f 	.word	0x005f005f
   1589c:	005f005f 	.word	0x005f005f
   158a0:	005f005f 	.word	0x005f005f
   158a4:	005f005f 	.word	0x005f005f
   158a8:	005f005f 	.word	0x005f005f
   158ac:	005f005f 	.word	0x005f005f
   158b0:	005f005f 	.word	0x005f005f
   158b4:	005f005f 	.word	0x005f005f
   158b8:	005f0276 	.word	0x005f0276
   158bc:	005f005f 	.word	0x005f005f
   158c0:	005f005f 	.word	0x005f005f
   158c4:	005f005f 	.word	0x005f005f
   158c8:	004e005f 	.word	0x004e005f
   158cc:	004e004e 	.word	0x004e004e
   158d0:	004e004e 	.word	0x004e004e
   158d4:	005f004e 	.word	0x005f004e
   158d8:	005f005f 	.word	0x005f005f
   158dc:	005f005f 	.word	0x005f005f
   158e0:	005f005f 	.word	0x005f005f
   158e4:	005f005f 	.word	0x005f005f
   158e8:	005f005f 	.word	0x005f005f
   158ec:	005f005f 	.word	0x005f005f
   158f0:	005f005f 	.word	0x005f005f
   158f4:	005f005f 	.word	0x005f005f
   158f8:	0276      	.short	0x0276
   158fa:	2e0a      	cmp	r6, #10
   158fc:	dd0e      	ble.n	1591c <__ssvfscanf_r+0x5e8>
   158fe:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   15902:	684b      	ldr	r3, [r1, #4]
   15904:	f805 0b01 	strb.w	r0, [r5], #1
   15908:	3b01      	subs	r3, #1
   1590a:	2b00      	cmp	r3, #0
   1590c:	604b      	str	r3, [r1, #4]
   1590e:	f340 828d 	ble.w	15e2c <__ssvfscanf_r+0xaf8>
   15912:	3201      	adds	r2, #1
   15914:	600a      	str	r2, [r1, #0]
   15916:	f1b8 0801 	subs.w	r8, r8, #1
   1591a:	d198      	bne.n	1584e <__ssvfscanf_r+0x51a>
   1591c:	05e0      	lsls	r0, r4, #23
   1591e:	46d0      	mov	r8, sl
   15920:	63be      	str	r6, [r7, #56]	; 0x38
   15922:	46da      	mov	sl, fp
   15924:	468b      	mov	fp, r1
   15926:	d507      	bpl.n	15938 <__ssvfscanf_r+0x604>
   15928:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1592a:	429d      	cmp	r5, r3
   1592c:	f200 8422 	bhi.w	16174 <__ssvfscanf_r+0xe40>
   15930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15932:	429d      	cmp	r5, r3
   15934:	f43f adf3 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15938:	f014 0210 	ands.w	r2, r4, #16
   1593c:	d110      	bne.n	15960 <__ssvfscanf_r+0x62c>
   1593e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15942:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   15944:	702a      	strb	r2, [r5, #0]
   15946:	4648      	mov	r0, r9
   15948:	47b0      	blx	r6
   1594a:	06a1      	lsls	r1, r4, #26
   1594c:	f140 8408 	bpl.w	16160 <__ssvfscanf_r+0xe2c>
   15950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15952:	f853 2b04 	ldr.w	r2, [r3], #4
   15956:	6010      	str	r0, [r2, #0]
   15958:	633b      	str	r3, [r7, #48]	; 0x30
   1595a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1595c:	3301      	adds	r3, #1
   1595e:	647b      	str	r3, [r7, #68]	; 0x44
   15960:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15962:	1aed      	subs	r5, r5, r3
   15964:	4445      	add	r5, r8
   15966:	44aa      	add	sl, r5
   15968:	e50b      	b.n	15382 <__ssvfscanf_r+0x4e>
   1596a:	f1b8 0f00 	cmp.w	r8, #0
   1596e:	bf08      	it	eq
   15970:	f04f 38ff 	moveq.w	r8, #4294967295
   15974:	07e0      	lsls	r0, r4, #31
   15976:	f140 8295 	bpl.w	15ea4 <__ssvfscanf_r+0xb70>
   1597a:	f014 0310 	ands.w	r3, r4, #16
   1597e:	637b      	str	r3, [r7, #52]	; 0x34
   15980:	f040 8474 	bne.w	1626c <__ssvfscanf_r+0xf38>
   15984:	0621      	lsls	r1, r4, #24
   15986:	f140 8666 	bpl.w	16656 <__ssvfscanf_r+0x1322>
   1598a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1598c:	f854 3b04 	ldr.w	r3, [r4], #4
   15990:	63fb      	str	r3, [r7, #60]	; 0x3c
   15992:	2b00      	cmp	r3, #0
   15994:	f43f adc3 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15998:	2080      	movs	r0, #128	; 0x80
   1599a:	f7f9 ffe5 	bl	f968 <malloc>
   1599e:	64b8      	str	r0, [r7, #72]	; 0x48
   159a0:	2800      	cmp	r0, #0
   159a2:	f000 8778 	beq.w	16896 <__ssvfscanf_r+0x1562>
   159a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   159a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   159aa:	601a      	str	r2, [r3, #0]
   159ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   159ae:	88d5      	ldrh	r5, [r2, #6]
   159b0:	8893      	ldrh	r3, [r2, #4]
   159b2:	429d      	cmp	r5, r3
   159b4:	f080 8552 	bcs.w	1645c <__ssvfscanf_r+0x1128>
   159b8:	6810      	ldr	r0, [r2, #0]
   159ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   159bc:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   159c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   159c2:	633c      	str	r4, [r7, #48]	; 0x30
   159c4:	3501      	adds	r5, #1
   159c6:	80dd      	strh	r5, [r3, #6]
   159c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   159ca:	62bb      	str	r3, [r7, #40]	; 0x28
   159cc:	2320      	movs	r3, #32
   159ce:	623b      	str	r3, [r7, #32]
   159d0:	f8db 3000 	ldr.w	r3, [fp]
   159d4:	4eb1      	ldr	r6, [pc, #708]	; (15c9c <__ssvfscanf_r+0x968>)
   159d6:	781b      	ldrb	r3, [r3, #0]
   159d8:	5cf3      	ldrb	r3, [r6, r3]
   159da:	f013 0308 	ands.w	r3, r3, #8
   159de:	f040 84bb 	bne.w	16358 <__ssvfscanf_r+0x1024>
   159e2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   159e4:	627e      	str	r6, [r7, #36]	; 0x24
   159e6:	461d      	mov	r5, r3
   159e8:	f7fc f85e 	bl	11aa8 <__locale_mb_cur_max>
   159ec:	42a8      	cmp	r0, r5
   159ee:	f43f ad8d 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   159f2:	e9db 3200 	ldrd	r3, r2, [fp]
   159f6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   159fa:	f813 1b01 	ldrb.w	r1, [r3], #1
   159fe:	5541      	strb	r1, [r0, r5]
   15a00:	3a01      	subs	r2, #1
   15a02:	2c03      	cmp	r4, #3
   15a04:	e9cb 3200 	strd	r3, r2, [fp]
   15a08:	f105 0501 	add.w	r5, r5, #1
   15a0c:	f107 0668 	add.w	r6, r7, #104	; 0x68
   15a10:	d102      	bne.n	15a18 <__ssvfscanf_r+0x6e4>
   15a12:	6833      	ldr	r3, [r6, #0]
   15a14:	2b04      	cmp	r3, #4
   15a16:	d004      	beq.n	15a22 <__ssvfscanf_r+0x6ee>
   15a18:	2208      	movs	r2, #8
   15a1a:	2100      	movs	r1, #0
   15a1c:	4630      	mov	r0, r6
   15a1e:	f7fb ff23 	bl	11868 <memset>
   15a22:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   15a26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15a28:	9600      	str	r6, [sp, #0]
   15a2a:	462b      	mov	r3, r5
   15a2c:	4648      	mov	r0, r9
   15a2e:	f002 fc17 	bl	18260 <_mbrtowc_r>
   15a32:	1c42      	adds	r2, r0, #1
   15a34:	4604      	mov	r4, r0
   15a36:	f43f ad69 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   15a3a:	2800      	cmp	r0, #0
   15a3c:	f040 8478 	bne.w	16330 <__ssvfscanf_r+0xffc>
   15a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15a42:	6018      	str	r0, [r3, #0]
   15a44:	f002 fc68 	bl	18318 <iswspace>
   15a48:	2800      	cmp	r0, #0
   15a4a:	f040 865c 	bne.w	16706 <__ssvfscanf_r+0x13d2>
   15a4e:	44aa      	add	sl, r5
   15a50:	f108 38ff 	add.w	r8, r8, #4294967295
   15a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15a56:	2b00      	cmp	r3, #0
   15a58:	f040 8633 	bne.w	166c2 <__ssvfscanf_r+0x138e>
   15a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15a60:	3304      	adds	r3, #4
   15a62:	64bb      	str	r3, [r7, #72]	; 0x48
   15a64:	2a00      	cmp	r2, #0
   15a66:	f000 862c 	beq.w	166c2 <__ssvfscanf_r+0x138e>
   15a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15a6c:	1a9d      	subs	r5, r3, r2
   15a6e:	6a3b      	ldr	r3, [r7, #32]
   15a70:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   15a74:	f240 8756 	bls.w	16924 <__ssvfscanf_r+0x15f0>
   15a78:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   15a7a:	f000 bc5c 	b.w	16336 <__ssvfscanf_r+0x1002>
   15a7e:	f1b8 0f00 	cmp.w	r8, #0
   15a82:	bf08      	it	eq
   15a84:	f04f 38ff 	moveq.w	r8, #4294967295
   15a88:	07e0      	lsls	r0, r4, #31
   15a8a:	f140 827b 	bpl.w	15f84 <__ssvfscanf_r+0xc50>
   15a8e:	f014 0310 	ands.w	r3, r4, #16
   15a92:	62bb      	str	r3, [r7, #40]	; 0x28
   15a94:	f040 83f3 	bne.w	1627e <__ssvfscanf_r+0xf4a>
   15a98:	0621      	lsls	r1, r4, #24
   15a9a:	f140 85ed 	bpl.w	16678 <__ssvfscanf_r+0x1344>
   15a9e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   15aa0:	f856 3b04 	ldr.w	r3, [r6], #4
   15aa4:	623b      	str	r3, [r7, #32]
   15aa6:	2b00      	cmp	r3, #0
   15aa8:	f43f ad39 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15aac:	2080      	movs	r0, #128	; 0x80
   15aae:	f7f9 ff5b 	bl	f968 <malloc>
   15ab2:	4604      	mov	r4, r0
   15ab4:	2800      	cmp	r0, #0
   15ab6:	f000 86ee 	beq.w	16896 <__ssvfscanf_r+0x1562>
   15aba:	6a3b      	ldr	r3, [r7, #32]
   15abc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15abe:	6018      	str	r0, [r3, #0]
   15ac0:	88d5      	ldrh	r5, [r2, #6]
   15ac2:	8893      	ldrh	r3, [r2, #4]
   15ac4:	429d      	cmp	r5, r3
   15ac6:	f080 84dd 	bcs.w	16484 <__ssvfscanf_r+0x1150>
   15aca:	6810      	ldr	r0, [r2, #0]
   15acc:	6a3b      	ldr	r3, [r7, #32]
   15ace:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   15ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ad4:	633e      	str	r6, [r7, #48]	; 0x30
   15ad6:	3501      	adds	r5, #1
   15ad8:	80dd      	strh	r5, [r3, #6]
   15ada:	2320      	movs	r3, #32
   15adc:	61fc      	str	r4, [r7, #28]
   15ade:	61bb      	str	r3, [r7, #24]
   15ae0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   15ae2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   15ae6:	2500      	movs	r5, #0
   15ae8:	46c2      	mov	sl, r8
   15aea:	46a0      	mov	r8, r4
   15aec:	f7fb ffdc 	bl	11aa8 <__locale_mb_cur_max>
   15af0:	42a8      	cmp	r0, r5
   15af2:	f43f ad0b 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   15af6:	e9db 3200 	ldrd	r3, r2, [fp]
   15afa:	f813 1b01 	ldrb.w	r1, [r3], #1
   15afe:	3a01      	subs	r2, #1
   15b00:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   15b04:	e9cb 3200 	strd	r3, r2, [fp]
   15b08:	2e03      	cmp	r6, #3
   15b0a:	f105 0301 	add.w	r3, r5, #1
   15b0e:	5541      	strb	r1, [r0, r5]
   15b10:	64bb      	str	r3, [r7, #72]	; 0x48
   15b12:	f107 0460 	add.w	r4, r7, #96	; 0x60
   15b16:	d102      	bne.n	15b1e <__ssvfscanf_r+0x7ea>
   15b18:	6823      	ldr	r3, [r4, #0]
   15b1a:	2b04      	cmp	r3, #4
   15b1c:	d004      	beq.n	15b28 <__ssvfscanf_r+0x7f4>
   15b1e:	2208      	movs	r2, #8
   15b20:	2100      	movs	r1, #0
   15b22:	4620      	mov	r0, r4
   15b24:	f7fb fea0 	bl	11868 <memset>
   15b28:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   15b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15b2e:	9400      	str	r4, [sp, #0]
   15b30:	4641      	mov	r1, r8
   15b32:	4648      	mov	r0, r9
   15b34:	f002 fb94 	bl	18260 <_mbrtowc_r>
   15b38:	1c42      	adds	r2, r0, #1
   15b3a:	4606      	mov	r6, r0
   15b3c:	f43f ace6 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   15b40:	2800      	cmp	r0, #0
   15b42:	f040 82ca 	bne.w	160da <__ssvfscanf_r+0xda6>
   15b46:	f8c8 0000 	str.w	r0, [r8]
   15b4a:	4605      	mov	r5, r0
   15b4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   15b50:	2208      	movs	r2, #8
   15b52:	2100      	movs	r1, #0
   15b54:	4618      	mov	r0, r3
   15b56:	637b      	str	r3, [r7, #52]	; 0x34
   15b58:	f7fb fe86 	bl	11868 <memset>
   15b5c:	4950      	ldr	r1, [pc, #320]	; (15ca0 <__ssvfscanf_r+0x96c>)
   15b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15b60:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   15b64:	462a      	mov	r2, r5
   15b66:	4648      	mov	r0, r9
   15b68:	460d      	mov	r5, r1
   15b6a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   15b6e:	47a8      	blx	r5
   15b70:	2801      	cmp	r0, #1
   15b72:	f000 83d5 	beq.w	16320 <__ssvfscanf_r+0xfec>
   15b76:	2200      	movs	r2, #0
   15b78:	f107 0370 	add.w	r3, r7, #112	; 0x70
   15b7c:	5c9b      	ldrb	r3, [r3, r2]
   15b7e:	2b00      	cmp	r3, #0
   15b80:	f000 85a1 	beq.w	166c6 <__ssvfscanf_r+0x1392>
   15b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15b88:	2e03      	cmp	r6, #3
   15b8a:	4413      	add	r3, r2
   15b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   15b8e:	f000 83ca 	beq.w	16326 <__ssvfscanf_r+0xff2>
   15b92:	f10a 3aff 	add.w	sl, sl, #4294967295
   15b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15b98:	b95b      	cbnz	r3, 15bb2 <__ssvfscanf_r+0x87e>
   15b9a:	6a3b      	ldr	r3, [r7, #32]
   15b9c:	f108 0804 	add.w	r8, r8, #4
   15ba0:	b13b      	cbz	r3, 15bb2 <__ssvfscanf_r+0x87e>
   15ba2:	69fb      	ldr	r3, [r7, #28]
   15ba4:	eba8 0403 	sub.w	r4, r8, r3
   15ba8:	69bb      	ldr	r3, [r7, #24]
   15baa:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   15bae:	f240 8405 	bls.w	163bc <__ssvfscanf_r+0x1088>
   15bb2:	f8db 3004 	ldr.w	r3, [fp, #4]
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	f04f 0500 	mov.w	r5, #0
   15bbc:	f340 8296 	ble.w	160ec <__ssvfscanf_r+0xdb8>
   15bc0:	f1ba 0f00 	cmp.w	sl, #0
   15bc4:	d192      	bne.n	15aec <__ssvfscanf_r+0x7b8>
   15bc6:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   15bca:	627e      	str	r6, [r7, #36]	; 0x24
   15bcc:	4644      	mov	r4, r8
   15bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15bd0:	2b00      	cmp	r3, #0
   15bd2:	f47f abd6 	bne.w	15382 <__ssvfscanf_r+0x4e>
   15bd6:	6023      	str	r3, [r4, #0]
   15bd8:	6a3b      	ldr	r3, [r7, #32]
   15bda:	2b00      	cmp	r3, #0
   15bdc:	f000 81c2 	beq.w	15f64 <__ssvfscanf_r+0xc30>
   15be0:	69fb      	ldr	r3, [r7, #28]
   15be2:	69ba      	ldr	r2, [r7, #24]
   15be4:	1ae1      	subs	r1, r4, r3
   15be6:	108b      	asrs	r3, r1, #2
   15be8:	3301      	adds	r3, #1
   15bea:	429a      	cmp	r2, r3
   15bec:	f240 81ba 	bls.w	15f64 <__ssvfscanf_r+0xc30>
   15bf0:	6a3c      	ldr	r4, [r7, #32]
   15bf2:	3104      	adds	r1, #4
   15bf4:	6820      	ldr	r0, [r4, #0]
   15bf6:	f7fa f983 	bl	ff00 <realloc>
   15bfa:	2800      	cmp	r0, #0
   15bfc:	f000 81b2 	beq.w	15f64 <__ssvfscanf_r+0xc30>
   15c00:	6020      	str	r0, [r4, #0]
   15c02:	e1af      	b.n	15f64 <__ssvfscanf_r+0xc30>
   15c04:	0521      	lsls	r1, r4, #20
   15c06:	f57f adb3 	bpl.w	15770 <__ssvfscanf_r+0x43c>
   15c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15c0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15c0e:	185b      	adds	r3, r3, r1
   15c10:	f47f adae 	bne.w	15770 <__ssvfscanf_r+0x43c>
   15c14:	64bb      	str	r3, [r7, #72]	; 0x48
   15c16:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   15c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   15c1c:	e593      	b.n	15746 <__ssvfscanf_r+0x412>
   15c1e:	4b21      	ldr	r3, [pc, #132]	; (15ca4 <__ssvfscanf_r+0x970>)
   15c20:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   15c24:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   15c28:	e66b      	b.n	15902 <__ssvfscanf_r+0x5ce>
   15c2a:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   15c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   15c32:	f47f ad9d 	bne.w	15770 <__ssvfscanf_r+0x43c>
   15c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15c38:	2b01      	cmp	r3, #1
   15c3a:	f47f ad99 	bne.w	15770 <__ssvfscanf_r+0x43c>
   15c3e:	2330      	movs	r3, #48	; 0x30
   15c40:	f805 3b01 	strb.w	r3, [r5], #1
   15c44:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   15c48:	2300      	movs	r3, #0
   15c4a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   15c4e:	3e01      	subs	r6, #1
   15c50:	637b      	str	r3, [r7, #52]	; 0x34
   15c52:	e578      	b.n	15746 <__ssvfscanf_r+0x412>
   15c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15c56:	2b06      	cmp	r3, #6
   15c58:	f040 8574 	bne.w	16744 <__ssvfscanf_r+0x1410>
   15c5c:	2307      	movs	r3, #7
   15c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   15c60:	e571      	b.n	15746 <__ssvfscanf_r+0x412>
   15c62:	0523      	lsls	r3, r4, #20
   15c64:	f57f ad84 	bpl.w	15770 <__ssvfscanf_r+0x43c>
   15c68:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   15c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   15c70:	d005      	beq.n	15c7e <__ssvfscanf_r+0x94a>
   15c72:	0561      	lsls	r1, r4, #21
   15c74:	f57f ad7c 	bpl.w	15770 <__ssvfscanf_r+0x43c>
   15c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15c7a:	2b00      	cmp	r3, #0
   15c7c:	d047      	beq.n	15d0e <__ssvfscanf_r+0x9da>
   15c7e:	05a3      	lsls	r3, r4, #22
   15c80:	d404      	bmi.n	15c8c <__ssvfscanf_r+0x958>
   15c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15c84:	69f9      	ldr	r1, [r7, #28]
   15c86:	1a5b      	subs	r3, r3, r1
   15c88:	e9c7 5305 	strd	r5, r3, [r7, #20]
   15c8c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   15c90:	2300      	movs	r3, #0
   15c92:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   15c96:	637b      	str	r3, [r7, #52]	; 0x34
   15c98:	e555      	b.n	15746 <__ssvfscanf_r+0x412>
   15c9a:	bf00      	nop
   15c9c:	20000f81 	.word	0x20000f81
   15ca0:	20008e9c 	.word	0x20008e9c
   15ca4:	20002ba0 	.word	0x20002ba0
   15ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15caa:	2b00      	cmp	r3, #0
   15cac:	f000 81ff 	beq.w	160ae <__ssvfscanf_r+0xd7a>
   15cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15cb2:	2b02      	cmp	r3, #2
   15cb4:	f000 83b0 	beq.w	16418 <__ssvfscanf_r+0x10e4>
   15cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15cba:	2b01      	cmp	r3, #1
   15cbc:	f000 81f1 	beq.w	160a2 <__ssvfscanf_r+0xd6e>
   15cc0:	2b04      	cmp	r3, #4
   15cc2:	f000 81ee 	beq.w	160a2 <__ssvfscanf_r+0xd6e>
   15cc6:	e553      	b.n	15770 <__ssvfscanf_r+0x43c>
   15cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15cca:	2b07      	cmp	r3, #7
   15ccc:	f040 853a 	bne.w	16744 <__ssvfscanf_r+0x1410>
   15cd0:	2308      	movs	r3, #8
   15cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   15cd4:	e537      	b.n	15746 <__ssvfscanf_r+0x412>
   15cd6:	0520      	lsls	r0, r4, #20
   15cd8:	f100 81f9 	bmi.w	160ce <__ssvfscanf_r+0xd9a>
   15cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15cde:	2b01      	cmp	r3, #1
   15ce0:	f47f ad46 	bne.w	15770 <__ssvfscanf_r+0x43c>
   15ce4:	2302      	movs	r3, #2
   15ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   15ce8:	e52d      	b.n	15746 <__ssvfscanf_r+0x412>
   15cea:	0623      	lsls	r3, r4, #24
   15cec:	f57f ad40 	bpl.w	15770 <__ssvfscanf_r+0x43c>
   15cf0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   15cf4:	e527      	b.n	15746 <__ssvfscanf_r+0x412>
   15cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15cf8:	2b00      	cmp	r3, #0
   15cfa:	f040 81cc 	bne.w	16096 <__ssvfscanf_r+0xd62>
   15cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15d00:	b9b3      	cbnz	r3, 15d30 <__ssvfscanf_r+0x9fc>
   15d02:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   15d06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   15d0a:	f000 8520 	beq.w	1674e <__ssvfscanf_r+0x141a>
   15d0e:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15d10:	ee18 9a10 	vmov	r9, s16
   15d14:	e533      	b.n	1577e <__ssvfscanf_r+0x44a>
   15d16:	0521      	lsls	r1, r4, #20
   15d18:	f100 81b7 	bmi.w	1608a <__ssvfscanf_r+0xd56>
   15d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15d1e:	2b02      	cmp	r3, #2
   15d20:	f040 8510 	bne.w	16744 <__ssvfscanf_r+0x1410>
   15d24:	2303      	movs	r3, #3
   15d26:	64bb      	str	r3, [r7, #72]	; 0x48
   15d28:	e50d      	b.n	15746 <__ssvfscanf_r+0x412>
   15d2a:	0520      	lsls	r0, r4, #20
   15d2c:	d59c      	bpl.n	15c68 <__ssvfscanf_r+0x934>
   15d2e:	e76c      	b.n	15c0a <__ssvfscanf_r+0x8d6>
   15d30:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   15d32:	ee18 9a10 	vmov	r9, s16
   15d36:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   15d3a:	e520      	b.n	1577e <__ssvfscanf_r+0x44a>
   15d3c:	4b8d      	ldr	r3, [pc, #564]	; (15f74 <__ssvfscanf_r+0xc40>)
   15d3e:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   15d42:	2e08      	cmp	r6, #8
   15d44:	f73f addb 	bgt.w	158fe <__ssvfscanf_r+0x5ca>
   15d48:	e5e8      	b.n	1591c <__ssvfscanf_r+0x5e8>
   15d4a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   15d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   15d52:	f47f ade3 	bne.w	1591c <__ssvfscanf_r+0x5e8>
   15d56:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   15d5a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   15d5e:	2610      	movs	r6, #16
   15d60:	e5cf      	b.n	15902 <__ssvfscanf_r+0x5ce>
   15d62:	0623      	lsls	r3, r4, #24
   15d64:	f57f adda 	bpl.w	1591c <__ssvfscanf_r+0x5e8>
   15d68:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   15d6c:	e5c9      	b.n	15902 <__ssvfscanf_r+0x5ce>
   15d6e:	f044 0401 	orr.w	r4, r4, #1
   15d72:	f8db 3004 	ldr.w	r3, [fp, #4]
   15d76:	64f9      	str	r1, [r7, #76]	; 0x4c
   15d78:	2b00      	cmp	r3, #0
   15d7a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   15d7e:	f04f 0500 	mov.w	r5, #0
   15d82:	f73f abf8 	bgt.w	15576 <__ssvfscanf_r+0x242>
   15d86:	4659      	mov	r1, fp
   15d88:	4648      	mov	r0, r9
   15d8a:	f002 fc7d 	bl	18688 <__ssrefill_r>
   15d8e:	2800      	cmp	r0, #0
   15d90:	f47f abbc 	bne.w	1550c <__ssvfscanf_r+0x1d8>
   15d94:	0660      	lsls	r0, r4, #25
   15d96:	f53f abf1 	bmi.w	1557c <__ssvfscanf_r+0x248>
   15d9a:	f8db 2000 	ldr.w	r2, [fp]
   15d9e:	4e76      	ldr	r6, [pc, #472]	; (15f78 <__ssvfscanf_r+0xc44>)
   15da0:	7813      	ldrb	r3, [r2, #0]
   15da2:	5cf3      	ldrb	r3, [r6, r3]
   15da4:	0719      	lsls	r1, r3, #28
   15da6:	f57f abe9 	bpl.w	1557c <__ssvfscanf_r+0x248>
   15daa:	f8db 3004 	ldr.w	r3, [fp, #4]
   15dae:	3b01      	subs	r3, #1
   15db0:	2b00      	cmp	r3, #0
   15db2:	f10a 0a01 	add.w	sl, sl, #1
   15db6:	f8cb 3004 	str.w	r3, [fp, #4]
   15dba:	f102 0201 	add.w	r2, r2, #1
   15dbe:	dd4a      	ble.n	15e56 <__ssvfscanf_r+0xb22>
   15dc0:	f8cb 2000 	str.w	r2, [fp]
   15dc4:	7813      	ldrb	r3, [r2, #0]
   15dc6:	5cf3      	ldrb	r3, [r6, r3]
   15dc8:	0719      	lsls	r1, r3, #28
   15dca:	f57f abd7 	bpl.w	1557c <__ssvfscanf_r+0x248>
   15dce:	e7ec      	b.n	15daa <__ssvfscanf_r+0xa76>
   15dd0:	f044 0401 	orr.w	r4, r4, #1
   15dd4:	4b69      	ldr	r3, [pc, #420]	; (15f7c <__ssvfscanf_r+0xc48>)
   15dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   15dd8:	2308      	movs	r3, #8
   15dda:	64f9      	str	r1, [r7, #76]	; 0x4c
   15ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   15dde:	2503      	movs	r5, #3
   15de0:	f7ff bbc4 	b.w	1556c <__ssvfscanf_r+0x238>
   15de4:	f044 0401 	orr.w	r4, r4, #1
   15de8:	4b65      	ldr	r3, [pc, #404]	; (15f80 <__ssvfscanf_r+0xc4c>)
   15dea:	62fb      	str	r3, [r7, #44]	; 0x2c
   15dec:	230a      	movs	r3, #10
   15dee:	64f9      	str	r1, [r7, #76]	; 0x4c
   15df0:	63bb      	str	r3, [r7, #56]	; 0x38
   15df2:	2503      	movs	r5, #3
   15df4:	f7ff bbba 	b.w	1556c <__ssvfscanf_r+0x238>
   15df8:	0523      	lsls	r3, r4, #20
   15dfa:	f57f ad82 	bpl.w	15902 <__ssvfscanf_r+0x5ce>
   15dfe:	b916      	cbnz	r6, 15e06 <__ssvfscanf_r+0xad2>
   15e00:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   15e04:	2608      	movs	r6, #8
   15e06:	0563      	lsls	r3, r4, #21
   15e08:	f100 81a6 	bmi.w	16158 <__ssvfscanf_r+0xe24>
   15e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15e0e:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   15e12:	b11b      	cbz	r3, 15e1c <__ssvfscanf_r+0xae8>
   15e14:	3b01      	subs	r3, #1
   15e16:	63fb      	str	r3, [r7, #60]	; 0x3c
   15e18:	f108 0801 	add.w	r8, r8, #1
   15e1c:	684b      	ldr	r3, [r1, #4]
   15e1e:	3b01      	subs	r3, #1
   15e20:	2b00      	cmp	r3, #0
   15e22:	f10a 0a01 	add.w	sl, sl, #1
   15e26:	604b      	str	r3, [r1, #4]
   15e28:	f73f ad73 	bgt.w	15912 <__ssvfscanf_r+0x5de>
   15e2c:	4648      	mov	r0, r9
   15e2e:	64b9      	str	r1, [r7, #72]	; 0x48
   15e30:	f002 fc2a 	bl	18688 <__ssrefill_r>
   15e34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   15e36:	2800      	cmp	r0, #0
   15e38:	f43f ad6d 	beq.w	15916 <__ssvfscanf_r+0x5e2>
   15e3c:	e56e      	b.n	1591c <__ssvfscanf_r+0x5e8>
   15e3e:	ee18 0a10 	vmov	r0, s16
   15e42:	4659      	mov	r1, fp
   15e44:	f002 fc20 	bl	18688 <__ssrefill_r>
   15e48:	2800      	cmp	r0, #0
   15e4a:	f47f ac91 	bne.w	15770 <__ssvfscanf_r+0x43c>
   15e4e:	2e00      	cmp	r6, #0
   15e50:	f47f abc4 	bne.w	155dc <__ssvfscanf_r+0x2a8>
   15e54:	e48c      	b.n	15770 <__ssvfscanf_r+0x43c>
   15e56:	4659      	mov	r1, fp
   15e58:	4648      	mov	r0, r9
   15e5a:	f002 fc15 	bl	18688 <__ssrefill_r>
   15e5e:	2800      	cmp	r0, #0
   15e60:	f47f ab54 	bne.w	1550c <__ssvfscanf_r+0x1d8>
   15e64:	f8db 2000 	ldr.w	r2, [fp]
   15e68:	e79a      	b.n	15da0 <__ssvfscanf_r+0xa6c>
   15e6a:	f8db 2004 	ldr.w	r2, [fp, #4]
   15e6e:	e00f      	b.n	15e90 <__ssvfscanf_r+0xb5c>
   15e70:	f8db 3000 	ldr.w	r3, [fp]
   15e74:	781a      	ldrb	r2, [r3, #0]
   15e76:	5cb2      	ldrb	r2, [r6, r2]
   15e78:	0711      	lsls	r1, r2, #28
   15e7a:	f103 0301 	add.w	r3, r3, #1
   15e7e:	f57f aa80 	bpl.w	15382 <__ssvfscanf_r+0x4e>
   15e82:	f8db 2004 	ldr.w	r2, [fp, #4]
   15e86:	3a01      	subs	r2, #1
   15e88:	e9cb 3200 	strd	r3, r2, [fp]
   15e8c:	f10a 0a01 	add.w	sl, sl, #1
   15e90:	2a00      	cmp	r2, #0
   15e92:	dced      	bgt.n	15e70 <__ssvfscanf_r+0xb3c>
   15e94:	4659      	mov	r1, fp
   15e96:	4648      	mov	r0, r9
   15e98:	f002 fbf6 	bl	18688 <__ssrefill_r>
   15e9c:	2800      	cmp	r0, #0
   15e9e:	d0e7      	beq.n	15e70 <__ssvfscanf_r+0xb3c>
   15ea0:	f7ff ba6f 	b.w	15382 <__ssvfscanf_r+0x4e>
   15ea4:	06e1      	lsls	r1, r4, #27
   15ea6:	f100 8349 	bmi.w	1653c <__ssvfscanf_r+0x1208>
   15eaa:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   15eae:	f000 83ab 	beq.w	16608 <__ssvfscanf_r+0x12d4>
   15eb2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15eb4:	f854 6b04 	ldr.w	r6, [r4], #4
   15eb8:	64be      	str	r6, [r7, #72]	; 0x48
   15eba:	2e00      	cmp	r6, #0
   15ebc:	f43f ab2f 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15ec0:	2020      	movs	r0, #32
   15ec2:	f7f9 fd51 	bl	f968 <malloc>
   15ec6:	4605      	mov	r5, r0
   15ec8:	2800      	cmp	r0, #0
   15eca:	f000 8462 	beq.w	16792 <__ssvfscanf_r+0x145e>
   15ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15ed0:	6030      	str	r0, [r6, #0]
   15ed2:	8893      	ldrh	r3, [r2, #4]
   15ed4:	88d6      	ldrh	r6, [r2, #6]
   15ed6:	429e      	cmp	r6, r3
   15ed8:	f080 82a8 	bcs.w	1642c <__ssvfscanf_r+0x10f8>
   15edc:	6810      	ldr	r0, [r2, #0]
   15ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15ee0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   15ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15ee6:	633c      	str	r4, [r7, #48]	; 0x30
   15ee8:	3601      	adds	r6, #1
   15eea:	80de      	strh	r6, [r3, #6]
   15eec:	2320      	movs	r3, #32
   15eee:	63fb      	str	r3, [r7, #60]	; 0x3c
   15ef0:	f8db 2000 	ldr.w	r2, [fp]
   15ef4:	4e20      	ldr	r6, [pc, #128]	; (15f78 <__ssvfscanf_r+0xc44>)
   15ef6:	7811      	ldrb	r1, [r2, #0]
   15ef8:	5c71      	ldrb	r1, [r6, r1]
   15efa:	0708      	lsls	r0, r1, #28
   15efc:	f100 82ac 	bmi.w	16458 <__ssvfscanf_r+0x1124>
   15f00:	4633      	mov	r3, r6
   15f02:	462c      	mov	r4, r5
   15f04:	4610      	mov	r0, r2
   15f06:	462e      	mov	r6, r5
   15f08:	f8db 1004 	ldr.w	r1, [fp, #4]
   15f0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   15f0e:	3901      	subs	r1, #1
   15f10:	f8cb 1004 	str.w	r1, [fp, #4]
   15f14:	1c41      	adds	r1, r0, #1
   15f16:	f8cb 1000 	str.w	r1, [fp]
   15f1a:	4635      	mov	r5, r6
   15f1c:	7801      	ldrb	r1, [r0, #0]
   15f1e:	f805 1b01 	strb.w	r1, [r5], #1
   15f22:	b122      	cbz	r2, 15f2e <__ssvfscanf_r+0xbfa>
   15f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   15f26:	1b2e      	subs	r6, r5, r4
   15f28:	4296      	cmp	r6, r2
   15f2a:	f080 837a 	bcs.w	16622 <__ssvfscanf_r+0x12ee>
   15f2e:	f1b8 0801 	subs.w	r8, r8, #1
   15f32:	d00b      	beq.n	15f4c <__ssvfscanf_r+0xc18>
   15f34:	f8db 1004 	ldr.w	r1, [fp, #4]
   15f38:	2900      	cmp	r1, #0
   15f3a:	462e      	mov	r6, r5
   15f3c:	f340 83ae 	ble.w	1669c <__ssvfscanf_r+0x1368>
   15f40:	f8db 0000 	ldr.w	r0, [fp]
   15f44:	7801      	ldrb	r1, [r0, #0]
   15f46:	5c59      	ldrb	r1, [r3, r1]
   15f48:	0709      	lsls	r1, r1, #28
   15f4a:	d5dd      	bpl.n	15f08 <__ssvfscanf_r+0xbd4>
   15f4c:	1b29      	subs	r1, r5, r4
   15f4e:	448a      	add	sl, r1
   15f50:	3101      	adds	r1, #1
   15f52:	f04f 0300 	mov.w	r3, #0
   15f56:	702b      	strb	r3, [r5, #0]
   15f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15f5a:	b11b      	cbz	r3, 15f64 <__ssvfscanf_r+0xc30>
   15f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15f5e:	428b      	cmp	r3, r1
   15f60:	f200 8394 	bhi.w	1668c <__ssvfscanf_r+0x1358>
   15f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15f66:	3301      	adds	r3, #1
   15f68:	647b      	str	r3, [r7, #68]	; 0x44
   15f6a:	f7ff ba0a 	b.w	15382 <__ssvfscanf_r+0x4e>
   15f6e:	2300      	movs	r3, #0
   15f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   15f72:	e461      	b.n	15838 <__ssvfscanf_r+0x504>
   15f74:	20002ba0 	.word	0x20002ba0
   15f78:	20000f81 	.word	0x20000f81
   15f7c:	00017f4d 	.word	0x00017f4d
   15f80:	000112b1 	.word	0x000112b1
   15f84:	06e6      	lsls	r6, r4, #27
   15f86:	f100 8181 	bmi.w	1628c <__ssvfscanf_r+0xf58>
   15f8a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   15f8e:	f000 836d 	beq.w	1666c <__ssvfscanf_r+0x1338>
   15f92:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   15f94:	f854 6b04 	ldr.w	r6, [r4], #4
   15f98:	64be      	str	r6, [r7, #72]	; 0x48
   15f9a:	2e00      	cmp	r6, #0
   15f9c:	f43f aabf 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15fa0:	2020      	movs	r0, #32
   15fa2:	f7f9 fce1 	bl	f968 <malloc>
   15fa6:	4605      	mov	r5, r0
   15fa8:	2800      	cmp	r0, #0
   15faa:	f000 83f2 	beq.w	16792 <__ssvfscanf_r+0x145e>
   15fae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   15fb0:	6030      	str	r0, [r6, #0]
   15fb2:	8893      	ldrh	r3, [r2, #4]
   15fb4:	88d6      	ldrh	r6, [r2, #6]
   15fb6:	429e      	cmp	r6, r3
   15fb8:	f080 827a 	bcs.w	164b0 <__ssvfscanf_r+0x117c>
   15fbc:	6810      	ldr	r0, [r2, #0]
   15fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15fc0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   15fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15fc6:	633c      	str	r4, [r7, #48]	; 0x30
   15fc8:	3601      	adds	r6, #1
   15fca:	80de      	strh	r6, [r3, #6]
   15fcc:	2420      	movs	r4, #32
   15fce:	f8db 2000 	ldr.w	r2, [fp]
   15fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
   15fd6:	4619      	mov	r1, r3
   15fd8:	7813      	ldrb	r3, [r2, #0]
   15fda:	5ccb      	ldrb	r3, [r1, r3]
   15fdc:	2b00      	cmp	r3, #0
   15fde:	f43f aa9e 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   15fe2:	ee08 9a10 	vmov	s16, r9
   15fe6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   15fea:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   15fee:	462e      	mov	r6, r5
   15ff0:	46a2      	mov	sl, r4
   15ff2:	4610      	mov	r0, r2
   15ff4:	460c      	mov	r4, r1
   15ff6:	f8db 1004 	ldr.w	r1, [fp, #4]
   15ffa:	1c43      	adds	r3, r0, #1
   15ffc:	3901      	subs	r1, #1
   15ffe:	e9cb 3100 	strd	r3, r1, [fp]
   16002:	4629      	mov	r1, r5
   16004:	7800      	ldrb	r0, [r0, #0]
   16006:	f801 0b01 	strb.w	r0, [r1], #1
   1600a:	f1b9 0f00 	cmp.w	r9, #0
   1600e:	d002      	beq.n	16016 <__ssvfscanf_r+0xce2>
   16010:	1b8d      	subs	r5, r1, r6
   16012:	4555      	cmp	r5, sl
   16014:	d27a      	bcs.n	1610c <__ssvfscanf_r+0xdd8>
   16016:	460d      	mov	r5, r1
   16018:	f1b8 0801 	subs.w	r8, r8, #1
   1601c:	d00a      	beq.n	16034 <__ssvfscanf_r+0xd00>
   1601e:	f8db 1004 	ldr.w	r1, [fp, #4]
   16022:	2900      	cmp	r1, #0
   16024:	f340 816a 	ble.w	162fc <__ssvfscanf_r+0xfc8>
   16028:	f8db 0000 	ldr.w	r0, [fp]
   1602c:	7801      	ldrb	r1, [r0, #0]
   1602e:	5c61      	ldrb	r1, [r4, r1]
   16030:	2900      	cmp	r1, #0
   16032:	d1e0      	bne.n	15ff6 <__ssvfscanf_r+0xcc2>
   16034:	4654      	mov	r4, sl
   16036:	ee18 9a10 	vmov	r9, s16
   1603a:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1603e:	1bae      	subs	r6, r5, r6
   16040:	f43f aa6d 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   16044:	f04f 0300 	mov.w	r3, #0
   16048:	702b      	strb	r3, [r5, #0]
   1604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1604c:	b11b      	cbz	r3, 16056 <__ssvfscanf_r+0xd22>
   1604e:	1c71      	adds	r1, r6, #1
   16050:	428c      	cmp	r4, r1
   16052:	f200 832d 	bhi.w	166b0 <__ssvfscanf_r+0x137c>
   16056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16058:	3301      	adds	r3, #1
   1605a:	44b2      	add	sl, r6
   1605c:	647b      	str	r3, [r7, #68]	; 0x44
   1605e:	f7ff b990 	b.w	15382 <__ssvfscanf_r+0x4e>
   16062:	2300      	movs	r3, #0
   16064:	613b      	str	r3, [r7, #16]
   16066:	f7ff baa9 	b.w	155bc <__ssvfscanf_r+0x288>
   1606a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   1606e:	f47f aa56 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   16072:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16076:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1607a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   1607e:	f7ff ba67 	b.w	15550 <__ssvfscanf_r+0x21c>
   16082:	64f9      	str	r1, [r7, #76]	; 0x4c
   16084:	2504      	movs	r5, #4
   16086:	f7ff ba71 	b.w	1556c <__ssvfscanf_r+0x238>
   1608a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1608c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1608e:	185b      	adds	r3, r3, r1
   16090:	f47f ae44 	bne.w	15d1c <__ssvfscanf_r+0x9e8>
   16094:	e5be      	b.n	15c14 <__ssvfscanf_r+0x8e0>
   16096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16098:	2b03      	cmp	r3, #3
   1609a:	d002      	beq.n	160a2 <__ssvfscanf_r+0xd6e>
   1609c:	2b05      	cmp	r3, #5
   1609e:	f47f ab67 	bne.w	15770 <__ssvfscanf_r+0x43c>
   160a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   160a4:	3301      	adds	r3, #1
   160a6:	b2db      	uxtb	r3, r3
   160a8:	64bb      	str	r3, [r7, #72]	; 0x48
   160aa:	f7ff bb4c 	b.w	15746 <__ssvfscanf_r+0x412>
   160ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   160b0:	2b00      	cmp	r3, #0
   160b2:	f47f ae01 	bne.w	15cb8 <__ssvfscanf_r+0x984>
   160b6:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   160ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   160be:	f47f adfb 	bne.w	15cb8 <__ssvfscanf_r+0x984>
   160c2:	2301      	movs	r3, #1
   160c4:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   160c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   160ca:	f7ff bb3c 	b.w	15746 <__ssvfscanf_r+0x412>
   160ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   160d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   160d2:	185b      	adds	r3, r3, r1
   160d4:	f47f ae02 	bne.w	15cdc <__ssvfscanf_r+0x9a8>
   160d8:	e59c      	b.n	15c14 <__ssvfscanf_r+0x8e0>
   160da:	1c83      	adds	r3, r0, #2
   160dc:	f040 845b 	bne.w	16996 <__ssvfscanf_r+0x1662>
   160e0:	f8db 3004 	ldr.w	r3, [fp, #4]
   160e4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   160e6:	2b00      	cmp	r3, #0
   160e8:	f73f ad00 	bgt.w	15aec <__ssvfscanf_r+0x7b8>
   160ec:	4659      	mov	r1, fp
   160ee:	4648      	mov	r0, r9
   160f0:	f002 faca 	bl	18688 <__ssrefill_r>
   160f4:	2800      	cmp	r0, #0
   160f6:	f43f ad63 	beq.w	15bc0 <__ssvfscanf_r+0x88c>
   160fa:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   160fe:	627e      	str	r6, [r7, #36]	; 0x24
   16100:	4644      	mov	r4, r8
   16102:	2d00      	cmp	r5, #0
   16104:	f43f ad63 	beq.w	15bce <__ssvfscanf_r+0x89a>
   16108:	f7ff ba00 	b.w	1550c <__ssvfscanf_r+0x1d8>
   1610c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16110:	4630      	mov	r0, r6
   16112:	4651      	mov	r1, sl
   16114:	f7f9 fef4 	bl	ff00 <realloc>
   16118:	4606      	mov	r6, r0
   1611a:	2800      	cmp	r0, #0
   1611c:	f000 8339 	beq.w	16792 <__ssvfscanf_r+0x145e>
   16120:	4405      	add	r5, r0
   16122:	f8c9 0000 	str.w	r0, [r9]
   16126:	e777      	b.n	16018 <__ssvfscanf_r+0xce4>
   16128:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   1612c:	4bbc      	ldr	r3, [pc, #752]	; (16420 <__ssvfscanf_r+0x10ec>)
   1612e:	62fb      	str	r3, [r7, #44]	; 0x2c
   16130:	2310      	movs	r3, #16
   16132:	64f9      	str	r1, [r7, #76]	; 0x4c
   16134:	63bb      	str	r3, [r7, #56]	; 0x38
   16136:	2503      	movs	r5, #3
   16138:	f7ff ba18 	b.w	1556c <__ssvfscanf_r+0x238>
   1613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1613e:	3301      	adds	r3, #1
   16140:	637b      	str	r3, [r7, #52]	; 0x34
   16142:	693b      	ldr	r3, [r7, #16]
   16144:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16148:	2b00      	cmp	r3, #0
   1614a:	f43f aafe 	beq.w	1574a <__ssvfscanf_r+0x416>
   1614e:	693b      	ldr	r3, [r7, #16]
   16150:	3b01      	subs	r3, #1
   16152:	613b      	str	r3, [r7, #16]
   16154:	f7ff bafa 	b.w	1574c <__ssvfscanf_r+0x418>
   16158:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   1615c:	f7ff bbd1 	b.w	15902 <__ssvfscanf_r+0x5ce>
   16160:	0722      	lsls	r2, r4, #28
   16162:	f140 81c7 	bpl.w	164f4 <__ssvfscanf_r+0x11c0>
   16166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16168:	f853 2b04 	ldr.w	r2, [r3], #4
   1616c:	633b      	str	r3, [r7, #48]	; 0x30
   1616e:	7010      	strb	r0, [r2, #0]
   16170:	f7ff bbf3 	b.w	1595a <__ssvfscanf_r+0x626>
   16174:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16178:	465a      	mov	r2, fp
   1617a:	4648      	mov	r0, r9
   1617c:	3d01      	subs	r5, #1
   1617e:	f002 fa43 	bl	18608 <_sungetc_r>
   16182:	f7ff bbd5 	b.w	15930 <__ssvfscanf_r+0x5fc>
   16186:	69fb      	ldr	r3, [r7, #28]
   16188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1618a:	4293      	cmp	r3, r2
   1618c:	f43f ab2d 	beq.w	157ea <__ssvfscanf_r+0x4b6>
   16190:	1a9a      	subs	r2, r3, r2
   16192:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   16196:	429d      	cmp	r5, r3
   16198:	bf28      	it	cs
   1619a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   1619e:	49a1      	ldr	r1, [pc, #644]	; (16424 <__ssvfscanf_r+0x10f0>)
   161a0:	4628      	mov	r0, r5
   161a2:	f7fb f9bb 	bl	1151c <sprintf>
   161a6:	f7ff bb20 	b.w	157ea <__ssvfscanf_r+0x4b6>
   161aa:	06e2      	lsls	r2, r4, #27
   161ac:	f100 8131 	bmi.w	16412 <__ssvfscanf_r+0x10de>
   161b0:	0723      	lsls	r3, r4, #28
   161b2:	f100 81ba 	bmi.w	1652a <__ssvfscanf_r+0x11f6>
   161b6:	0766      	lsls	r6, r4, #29
   161b8:	f140 82b4 	bpl.w	16724 <__ssvfscanf_r+0x13f0>
   161bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   161be:	64f9      	str	r1, [r7, #76]	; 0x4c
   161c0:	f853 2b04 	ldr.w	r2, [r3], #4
   161c4:	633b      	str	r3, [r7, #48]	; 0x30
   161c6:	f8a2 a000 	strh.w	sl, [r2]
   161ca:	f7ff b8da 	b.w	15382 <__ssvfscanf_r+0x4e>
   161ce:	0723      	lsls	r3, r4, #28
   161d0:	f47f a9a5 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   161d4:	7842      	ldrb	r2, [r0, #1]
   161d6:	2a68      	cmp	r2, #104	; 0x68
   161d8:	f000 8186 	beq.w	164e8 <__ssvfscanf_r+0x11b4>
   161dc:	f044 0404 	orr.w	r4, r4, #4
   161e0:	4608      	mov	r0, r1
   161e2:	f7ff b92f 	b.w	15444 <__ssvfscanf_r+0x110>
   161e6:	4b8e      	ldr	r3, [pc, #568]	; (16420 <__ssvfscanf_r+0x10ec>)
   161e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   161ea:	230a      	movs	r3, #10
   161ec:	64f9      	str	r1, [r7, #76]	; 0x4c
   161ee:	63bb      	str	r3, [r7, #56]	; 0x38
   161f0:	2503      	movs	r5, #3
   161f2:	f7ff b9bb 	b.w	1556c <__ssvfscanf_r+0x238>
   161f6:	4b8c      	ldr	r3, [pc, #560]	; (16428 <__ssvfscanf_r+0x10f4>)
   161f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   161fa:	2300      	movs	r3, #0
   161fc:	64f9      	str	r1, [r7, #76]	; 0x4c
   161fe:	63bb      	str	r3, [r7, #56]	; 0x38
   16200:	2503      	movs	r5, #3
   16202:	f7ff b9b3 	b.w	1556c <__ssvfscanf_r+0x238>
   16206:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   1620a:	e78f      	b.n	1612c <__ssvfscanf_r+0xdf8>
   1620c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   16210:	f000 fdde 	bl	16dd0 <__sccl>
   16214:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16218:	64f8      	str	r0, [r7, #76]	; 0x4c
   1621a:	2501      	movs	r5, #1
   1621c:	f7ff b9a6 	b.w	1556c <__ssvfscanf_r+0x238>
   16220:	0722      	lsls	r2, r4, #28
   16222:	f47f a97c 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   16226:	7842      	ldrb	r2, [r0, #1]
   16228:	2a6c      	cmp	r2, #108	; 0x6c
   1622a:	f000 8157 	beq.w	164dc <__ssvfscanf_r+0x11a8>
   1622e:	f044 0401 	orr.w	r4, r4, #1
   16232:	4608      	mov	r0, r1
   16234:	f7ff b906 	b.w	15444 <__ssvfscanf_r+0x110>
   16238:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   1623c:	f47f a96f 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   16240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16242:	2a00      	cmp	r2, #0
   16244:	f000 81e7 	beq.w	16616 <__ssvfscanf_r+0x12e2>
   16248:	7842      	ldrb	r2, [r0, #1]
   1624a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   1624e:	4608      	mov	r0, r1
   16250:	f7ff b8f8 	b.w	15444 <__ssvfscanf_r+0x110>
   16254:	ea58 0804 	orrs.w	r8, r8, r4
   16258:	f47f a961 	bne.w	1551e <__ssvfscanf_r+0x1ea>
   1625c:	7842      	ldrb	r2, [r0, #1]
   1625e:	2410      	movs	r4, #16
   16260:	4608      	mov	r0, r1
   16262:	f7ff b8ef 	b.w	15444 <__ssvfscanf_r+0x110>
   16266:	64f9      	str	r1, [r7, #76]	; 0x4c
   16268:	f7ff b8a7 	b.w	153ba <__ssvfscanf_r+0x86>
   1626c:	2300      	movs	r3, #0
   1626e:	623b      	str	r3, [r7, #32]
   16270:	62bb      	str	r3, [r7, #40]	; 0x28
   16272:	63fb      	str	r3, [r7, #60]	; 0x3c
   16274:	f107 0354 	add.w	r3, r7, #84	; 0x54
   16278:	64bb      	str	r3, [r7, #72]	; 0x48
   1627a:	f7ff bba9 	b.w	159d0 <__ssvfscanf_r+0x69c>
   1627e:	2300      	movs	r3, #0
   16280:	e9c7 3306 	strd	r3, r3, [r7, #24]
   16284:	623b      	str	r3, [r7, #32]
   16286:	f107 0454 	add.w	r4, r7, #84	; 0x54
   1628a:	e429      	b.n	15ae0 <__ssvfscanf_r+0x7ac>
   1628c:	f8db 3000 	ldr.w	r3, [fp]
   16290:	f107 0270 	add.w	r2, r7, #112	; 0x70
   16294:	4611      	mov	r1, r2
   16296:	781a      	ldrb	r2, [r3, #0]
   16298:	5c8a      	ldrb	r2, [r1, r2]
   1629a:	2a00      	cmp	r2, #0
   1629c:	f43f a93f 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   162a0:	3301      	adds	r3, #1
   162a2:	f8cb 3000 	str.w	r3, [fp]
   162a6:	f8db 3004 	ldr.w	r3, [fp, #4]
   162aa:	f1b8 0f01 	cmp.w	r8, #1
   162ae:	f103 33ff 	add.w	r3, r3, #4294967295
   162b2:	f8cb 3004 	str.w	r3, [fp, #4]
   162b6:	bf18      	it	ne
   162b8:	460c      	movne	r4, r1
   162ba:	d114      	bne.n	162e6 <__ssvfscanf_r+0xfb2>
   162bc:	f7ff bb53 	b.w	15966 <__ssvfscanf_r+0x632>
   162c0:	f8db 3000 	ldr.w	r3, [fp]
   162c4:	781a      	ldrb	r2, [r3, #0]
   162c6:	5ca2      	ldrb	r2, [r4, r2]
   162c8:	3301      	adds	r3, #1
   162ca:	2a00      	cmp	r2, #0
   162cc:	f43f ab4b 	beq.w	15966 <__ssvfscanf_r+0x632>
   162d0:	f8cb 3000 	str.w	r3, [fp]
   162d4:	f8db 3004 	ldr.w	r3, [fp, #4]
   162d8:	3501      	adds	r5, #1
   162da:	3b01      	subs	r3, #1
   162dc:	4545      	cmp	r5, r8
   162de:	f8cb 3004 	str.w	r3, [fp, #4]
   162e2:	f43f ab40 	beq.w	15966 <__ssvfscanf_r+0x632>
   162e6:	2b00      	cmp	r3, #0
   162e8:	dcea      	bgt.n	162c0 <__ssvfscanf_r+0xf8c>
   162ea:	4659      	mov	r1, fp
   162ec:	4648      	mov	r0, r9
   162ee:	f002 f9cb 	bl	18688 <__ssrefill_r>
   162f2:	2800      	cmp	r0, #0
   162f4:	d0e4      	beq.n	162c0 <__ssvfscanf_r+0xf8c>
   162f6:	44aa      	add	sl, r5
   162f8:	f7ff b843 	b.w	15382 <__ssvfscanf_r+0x4e>
   162fc:	ee18 0a10 	vmov	r0, s16
   16300:	4659      	mov	r1, fp
   16302:	f002 f9c1 	bl	18688 <__ssrefill_r>
   16306:	2800      	cmp	r0, #0
   16308:	f43f ae8e 	beq.w	16028 <__ssvfscanf_r+0xcf4>
   1630c:	42b5      	cmp	r5, r6
   1630e:	4654      	mov	r4, sl
   16310:	ee18 9a10 	vmov	r9, s16
   16314:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16318:	f47f ae91 	bne.w	1603e <__ssvfscanf_r+0xd0a>
   1631c:	f7ff b8f6 	b.w	1550c <__ssvfscanf_r+0x1d8>
   16320:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   16324:	e428      	b.n	15b78 <__ssvfscanf_r+0x844>
   16326:	6823      	ldr	r3, [r4, #0]
   16328:	2b04      	cmp	r3, #4
   1632a:	f47f ac32 	bne.w	15b92 <__ssvfscanf_r+0x85e>
   1632e:	e432      	b.n	15b96 <__ssvfscanf_r+0x862>
   16330:	1c83      	adds	r3, r0, #2
   16332:	f040 8339 	bne.w	169a8 <__ssvfscanf_r+0x1674>
   16336:	f8db 3004 	ldr.w	r3, [fp, #4]
   1633a:	2b00      	cmp	r3, #0
   1633c:	f340 81d7 	ble.w	166ee <__ssvfscanf_r+0x13ba>
   16340:	f8db 3000 	ldr.w	r3, [fp]
   16344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16346:	781b      	ldrb	r3, [r3, #0]
   16348:	5cd3      	ldrb	r3, [r2, r3]
   1634a:	0718      	lsls	r0, r3, #28
   1634c:	d403      	bmi.n	16356 <__ssvfscanf_r+0x1022>
   1634e:	f1b8 0f00 	cmp.w	r8, #0
   16352:	f47f ab49 	bne.w	159e8 <__ssvfscanf_r+0x6b4>
   16356:	627c      	str	r4, [r7, #36]	; 0x24
   16358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1635a:	2b00      	cmp	r3, #0
   1635c:	f47f a811 	bne.w	15382 <__ssvfscanf_r+0x4e>
   16360:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16362:	6013      	str	r3, [r2, #0]
   16364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16366:	2b00      	cmp	r3, #0
   16368:	f43f adfc 	beq.w	15f64 <__ssvfscanf_r+0xc30>
   1636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1636e:	1ad1      	subs	r1, r2, r3
   16370:	108b      	asrs	r3, r1, #2
   16372:	6a3a      	ldr	r2, [r7, #32]
   16374:	3301      	adds	r3, #1
   16376:	429a      	cmp	r2, r3
   16378:	f67f adf4 	bls.w	15f64 <__ssvfscanf_r+0xc30>
   1637c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   1637e:	3104      	adds	r1, #4
   16380:	6820      	ldr	r0, [r4, #0]
   16382:	f7f9 fdbd 	bl	ff00 <realloc>
   16386:	2800      	cmp	r0, #0
   16388:	f47f ac3a 	bne.w	15c00 <__ssvfscanf_r+0x8cc>
   1638c:	e5ea      	b.n	15f64 <__ssvfscanf_r+0xc30>
   1638e:	f853 2b04 	ldr.w	r2, [r3], #4
   16392:	ed82 0b00 	vstr	d0, [r2]
   16396:	633b      	str	r3, [r7, #48]	; 0x30
   16398:	e5e4      	b.n	15f64 <__ssvfscanf_r+0xc30>
   1639a:	68fd      	ldr	r5, [r7, #12]
   1639c:	6a39      	ldr	r1, [r7, #32]
   1639e:	687e      	ldr	r6, [r7, #4]
   163a0:	4628      	mov	r0, r5
   163a2:	4642      	mov	r2, r8
   163a4:	46a3      	mov	fp, r4
   163a6:	68bc      	ldr	r4, [r7, #8]
   163a8:	f000 fd56 	bl	16e58 <stpncpy>
   163ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   163ae:	61fb      	str	r3, [r7, #28]
   163b0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   163b4:	3e01      	subs	r6, #1
   163b6:	4605      	mov	r5, r0
   163b8:	f7ff b9c8 	b.w	1574c <__ssvfscanf_r+0x418>
   163bc:	69f8      	ldr	r0, [r7, #28]
   163be:	00d9      	lsls	r1, r3, #3
   163c0:	461d      	mov	r5, r3
   163c2:	f7f9 fd9d 	bl	ff00 <realloc>
   163c6:	61f8      	str	r0, [r7, #28]
   163c8:	2800      	cmp	r0, #0
   163ca:	f000 8264 	beq.w	16896 <__ssvfscanf_r+0x1562>
   163ce:	6a3a      	ldr	r2, [r7, #32]
   163d0:	006b      	lsls	r3, r5, #1
   163d2:	eb00 0804 	add.w	r8, r0, r4
   163d6:	6010      	str	r0, [r2, #0]
   163d8:	61bb      	str	r3, [r7, #24]
   163da:	f7ff bbea 	b.w	15bb2 <__ssvfscanf_r+0x87e>
   163de:	2e02      	cmp	r6, #2
   163e0:	f240 82c4 	bls.w	1696c <__ssvfscanf_r+0x1638>
   163e4:	2e03      	cmp	r6, #3
   163e6:	f43f a9d3 	beq.w	15790 <__ssvfscanf_r+0x45c>
   163ea:	3e04      	subs	r6, #4
   163ec:	fa5f f886 	uxtb.w	r8, r6
   163f0:	ea6f 0308 	mvn.w	r3, r8
   163f4:	18ee      	adds	r6, r5, r3
   163f6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   163fa:	465a      	mov	r2, fp
   163fc:	4648      	mov	r0, r9
   163fe:	f002 f903 	bl	18608 <_sungetc_r>
   16402:	42ae      	cmp	r6, r5
   16404:	d1f7      	bne.n	163f6 <__ssvfscanf_r+0x10c2>
   16406:	f10a 3aff 	add.w	sl, sl, #4294967295
   1640a:	ebaa 0a08 	sub.w	sl, sl, r8
   1640e:	f7ff b9bf 	b.w	15790 <__ssvfscanf_r+0x45c>
   16412:	64f9      	str	r1, [r7, #76]	; 0x4c
   16414:	f7fe bfb5 	b.w	15382 <__ssvfscanf_r+0x4e>
   16418:	2303      	movs	r3, #3
   1641a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1641c:	f7ff b993 	b.w	15746 <__ssvfscanf_r+0x412>
   16420:	00017f4d 	.word	0x00017f4d
   16424:	20000f78 	.word	0x20000f78
   16428:	000112b1 	.word	0x000112b1
   1642c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   16430:	4293      	cmp	r3, r2
   16432:	f200 8297 	bhi.w	16964 <__ssvfscanf_r+0x1630>
   16436:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16438:	3308      	adds	r3, #8
   1643a:	b29b      	uxth	r3, r3
   1643c:	6810      	ldr	r0, [r2, #0]
   1643e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16440:	0099      	lsls	r1, r3, #2
   16442:	637b      	str	r3, [r7, #52]	; 0x34
   16444:	f7f9 fd5c 	bl	ff00 <realloc>
   16448:	2800      	cmp	r0, #0
   1644a:	f000 827b 	beq.w	16944 <__ssvfscanf_r+0x1610>
   1644e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16452:	8093      	strh	r3, [r2, #4]
   16454:	6010      	str	r0, [r2, #0]
   16456:	e542      	b.n	15ede <__ssvfscanf_r+0xbaa>
   16458:	2101      	movs	r1, #1
   1645a:	e57a      	b.n	15f52 <__ssvfscanf_r+0xc1e>
   1645c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   16460:	4293      	cmp	r3, r2
   16462:	f200 8293 	bhi.w	1698c <__ssvfscanf_r+0x1658>
   16466:	3308      	adds	r3, #8
   16468:	b29e      	uxth	r6, r3
   1646a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1646c:	00b1      	lsls	r1, r6, #2
   1646e:	6818      	ldr	r0, [r3, #0]
   16470:	f7f9 fd46 	bl	ff00 <realloc>
   16474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16476:	2800      	cmp	r0, #0
   16478:	f000 823e 	beq.w	168f8 <__ssvfscanf_r+0x15c4>
   1647c:	809e      	strh	r6, [r3, #4]
   1647e:	6018      	str	r0, [r3, #0]
   16480:	f7ff ba9b 	b.w	159ba <__ssvfscanf_r+0x686>
   16484:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   16488:	4293      	cmp	r3, r2
   1648a:	f200 827f 	bhi.w	1698c <__ssvfscanf_r+0x1658>
   1648e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16490:	3308      	adds	r3, #8
   16492:	b29b      	uxth	r3, r3
   16494:	0099      	lsls	r1, r3, #2
   16496:	6810      	ldr	r0, [r2, #0]
   16498:	64bb      	str	r3, [r7, #72]	; 0x48
   1649a:	f7f9 fd31 	bl	ff00 <realloc>
   1649e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   164a0:	2800      	cmp	r0, #0
   164a2:	f000 8228 	beq.w	168f6 <__ssvfscanf_r+0x15c2>
   164a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   164a8:	8093      	strh	r3, [r2, #4]
   164aa:	6010      	str	r0, [r2, #0]
   164ac:	f7ff bb0e 	b.w	15acc <__ssvfscanf_r+0x798>
   164b0:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   164b4:	4293      	cmp	r3, r2
   164b6:	f200 8255 	bhi.w	16964 <__ssvfscanf_r+0x1630>
   164ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   164bc:	3308      	adds	r3, #8
   164be:	b29b      	uxth	r3, r3
   164c0:	6810      	ldr	r0, [r2, #0]
   164c2:	63f8      	str	r0, [r7, #60]	; 0x3c
   164c4:	0099      	lsls	r1, r3, #2
   164c6:	637b      	str	r3, [r7, #52]	; 0x34
   164c8:	f7f9 fd1a 	bl	ff00 <realloc>
   164cc:	2800      	cmp	r0, #0
   164ce:	f000 8239 	beq.w	16944 <__ssvfscanf_r+0x1610>
   164d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   164d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   164d6:	8093      	strh	r3, [r2, #4]
   164d8:	6010      	str	r0, [r2, #0]
   164da:	e570      	b.n	15fbe <__ssvfscanf_r+0xc8a>
   164dc:	7882      	ldrb	r2, [r0, #2]
   164de:	f044 0402 	orr.w	r4, r4, #2
   164e2:	3002      	adds	r0, #2
   164e4:	f7fe bfae 	b.w	15444 <__ssvfscanf_r+0x110>
   164e8:	7882      	ldrb	r2, [r0, #2]
   164ea:	f044 0408 	orr.w	r4, r4, #8
   164ee:	3002      	adds	r0, #2
   164f0:	f7fe bfa8 	b.w	15444 <__ssvfscanf_r+0x110>
   164f4:	0763      	lsls	r3, r4, #29
   164f6:	d458      	bmi.n	165aa <__ssvfscanf_r+0x1276>
   164f8:	f014 0201 	ands.w	r2, r4, #1
   164fc:	f47f aa28 	bne.w	15950 <__ssvfscanf_r+0x61c>
   16500:	07a6      	lsls	r6, r4, #30
   16502:	f57f aa25 	bpl.w	15950 <__ssvfscanf_r+0x61c>
   16506:	4bb3      	ldr	r3, [pc, #716]	; (167d4 <__ssvfscanf_r+0x14a0>)
   16508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1650a:	4299      	cmp	r1, r3
   1650c:	4648      	mov	r0, r9
   1650e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16512:	f000 823d 	beq.w	16990 <__ssvfscanf_r+0x165c>
   16516:	f001 fdd1 	bl	180bc <_strtoll_r>
   1651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1651c:	f853 2b04 	ldr.w	r2, [r3], #4
   16520:	633b      	str	r3, [r7, #48]	; 0x30
   16522:	e9c2 0100 	strd	r0, r1, [r2]
   16526:	f7ff ba18 	b.w	1595a <__ssvfscanf_r+0x626>
   1652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1652c:	64f9      	str	r1, [r7, #76]	; 0x4c
   1652e:	f853 2b04 	ldr.w	r2, [r3], #4
   16532:	633b      	str	r3, [r7, #48]	; 0x30
   16534:	f882 a000 	strb.w	sl, [r2]
   16538:	f7fe bf23 	b.w	15382 <__ssvfscanf_r+0x4e>
   1653c:	f8db 3000 	ldr.w	r3, [fp]
   16540:	4ea5      	ldr	r6, [pc, #660]	; (167d8 <__ssvfscanf_r+0x14a4>)
   16542:	781a      	ldrb	r2, [r3, #0]
   16544:	5cb2      	ldrb	r2, [r6, r2]
   16546:	0712      	lsls	r2, r2, #28
   16548:	f53e af1b 	bmi.w	15382 <__ssvfscanf_r+0x4e>
   1654c:	3301      	adds	r3, #1
   1654e:	f8cb 3000 	str.w	r3, [fp]
   16552:	f8db 3004 	ldr.w	r3, [fp, #4]
   16556:	f1b8 0f01 	cmp.w	r8, #1
   1655a:	f103 33ff 	add.w	r3, r3, #4294967295
   1655e:	f8cb 3004 	str.w	r3, [fp, #4]
   16562:	bf08      	it	eq
   16564:	f10a 0a01 	addeq.w	sl, sl, #1
   16568:	f43e af0b 	beq.w	15382 <__ssvfscanf_r+0x4e>
   1656c:	2401      	movs	r4, #1
   1656e:	e011      	b.n	16594 <__ssvfscanf_r+0x1260>
   16570:	f8db 3000 	ldr.w	r3, [fp]
   16574:	781a      	ldrb	r2, [r3, #0]
   16576:	5cb2      	ldrb	r2, [r6, r2]
   16578:	0715      	lsls	r5, r2, #28
   1657a:	f103 0301 	add.w	r3, r3, #1
   1657e:	d411      	bmi.n	165a4 <__ssvfscanf_r+0x1270>
   16580:	f8cb 3000 	str.w	r3, [fp]
   16584:	f8db 3004 	ldr.w	r3, [fp, #4]
   16588:	3401      	adds	r4, #1
   1658a:	3b01      	subs	r3, #1
   1658c:	4544      	cmp	r4, r8
   1658e:	f8cb 3004 	str.w	r3, [fp, #4]
   16592:	d007      	beq.n	165a4 <__ssvfscanf_r+0x1270>
   16594:	2b00      	cmp	r3, #0
   16596:	dceb      	bgt.n	16570 <__ssvfscanf_r+0x123c>
   16598:	4659      	mov	r1, fp
   1659a:	4648      	mov	r0, r9
   1659c:	f002 f874 	bl	18688 <__ssrefill_r>
   165a0:	2800      	cmp	r0, #0
   165a2:	d0e5      	beq.n	16570 <__ssvfscanf_r+0x123c>
   165a4:	44a2      	add	sl, r4
   165a6:	f7fe beec 	b.w	15382 <__ssvfscanf_r+0x4e>
   165aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   165ac:	f853 2b04 	ldr.w	r2, [r3], #4
   165b0:	633b      	str	r3, [r7, #48]	; 0x30
   165b2:	8010      	strh	r0, [r2, #0]
   165b4:	f7ff b9d1 	b.w	1595a <__ssvfscanf_r+0x626>
   165b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   165ba:	2b00      	cmp	r3, #0
   165bc:	f000 816e 	beq.w	1689c <__ssvfscanf_r+0x1568>
   165c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   165c2:	f8d3 8000 	ldr.w	r8, [r3]
   165c6:	88de      	ldrh	r6, [r3, #6]
   165c8:	b176      	cbz	r6, 165e8 <__ssvfscanf_r+0x12b4>
   165ca:	2400      	movs	r4, #0
   165cc:	f1a8 0504 	sub.w	r5, r8, #4
   165d0:	46a1      	mov	r9, r4
   165d2:	f855 3f04 	ldr.w	r3, [r5, #4]!
   165d6:	6818      	ldr	r0, [r3, #0]
   165d8:	f7f9 f9ce 	bl	f978 <free>
   165dc:	3401      	adds	r4, #1
   165de:	682b      	ldr	r3, [r5, #0]
   165e0:	42a6      	cmp	r6, r4
   165e2:	f8c3 9000 	str.w	r9, [r3]
   165e6:	d1f4      	bne.n	165d2 <__ssvfscanf_r+0x129e>
   165e8:	f04f 33ff 	mov.w	r3, #4294967295
   165ec:	647b      	str	r3, [r7, #68]	; 0x44
   165ee:	f1b8 0f00 	cmp.w	r8, #0
   165f2:	f47e af9c 	bne.w	1552e <__ssvfscanf_r+0x1fa>
   165f6:	f7fe bf9d 	b.w	15534 <__ssvfscanf_r+0x200>
   165fa:	4878      	ldr	r0, [pc, #480]	; (167dc <__ssvfscanf_r+0x14a8>)
   165fc:	633b      	str	r3, [r7, #48]	; 0x30
   165fe:	f7fb fd97 	bl	12130 <nanf>
   16602:	ed84 0a00 	vstr	s0, [r4]
   16606:	e4ad      	b.n	15f64 <__ssvfscanf_r+0xc30>
   16608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1660a:	63fc      	str	r4, [r7, #60]	; 0x3c
   1660c:	f852 5b04 	ldr.w	r5, [r2], #4
   16610:	633a      	str	r2, [r7, #48]	; 0x30
   16612:	64bc      	str	r4, [r7, #72]	; 0x48
   16614:	e46c      	b.n	15ef0 <__ssvfscanf_r+0xbbc>
   16616:	b082      	sub	sp, #8
   16618:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1661c:	ab02      	add	r3, sp, #8
   1661e:	643b      	str	r3, [r7, #64]	; 0x40
   16620:	e612      	b.n	16248 <__ssvfscanf_r+0xf14>
   16622:	637b      	str	r3, [r7, #52]	; 0x34
   16624:	0053      	lsls	r3, r2, #1
   16626:	4620      	mov	r0, r4
   16628:	4619      	mov	r1, r3
   1662a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1662c:	f7f9 fc68 	bl	ff00 <realloc>
   16630:	4604      	mov	r4, r0
   16632:	2800      	cmp	r0, #0
   16634:	f000 80ad 	beq.w	16792 <__ssvfscanf_r+0x145e>
   16638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1663a:	1985      	adds	r5, r0, r6
   1663c:	6018      	str	r0, [r3, #0]
   1663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16640:	e475      	b.n	15f2e <__ssvfscanf_r+0xbfa>
   16642:	697d      	ldr	r5, [r7, #20]
   16644:	4629      	mov	r1, r5
   16646:	230a      	movs	r3, #10
   16648:	3101      	adds	r1, #1
   1664a:	4648      	mov	r0, r9
   1664c:	f7fa fe30 	bl	112b0 <_strtol_r>
   16650:	69bb      	ldr	r3, [r7, #24]
   16652:	1ac2      	subs	r2, r0, r3
   16654:	e59d      	b.n	16192 <__ssvfscanf_r+0xe5e>
   16656:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1665a:	f853 1b04 	ldr.w	r1, [r3], #4
   1665e:	623a      	str	r2, [r7, #32]
   16660:	64b9      	str	r1, [r7, #72]	; 0x48
   16662:	633b      	str	r3, [r7, #48]	; 0x30
   16664:	62ba      	str	r2, [r7, #40]	; 0x28
   16666:	63fa      	str	r2, [r7, #60]	; 0x3c
   16668:	f7ff b9b2 	b.w	159d0 <__ssvfscanf_r+0x69c>
   1666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1666e:	64bc      	str	r4, [r7, #72]	; 0x48
   16670:	f853 5b04 	ldr.w	r5, [r3], #4
   16674:	633b      	str	r3, [r7, #48]	; 0x30
   16676:	e4aa      	b.n	15fce <__ssvfscanf_r+0xc9a>
   16678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1667a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1667c:	f853 4b04 	ldr.w	r4, [r3], #4
   16680:	61ba      	str	r2, [r7, #24]
   16682:	e9c7 2207 	strd	r2, r2, [r7, #28]
   16686:	633b      	str	r3, [r7, #48]	; 0x30
   16688:	f7ff ba2a 	b.w	15ae0 <__ssvfscanf_r+0x7ac>
   1668c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1668e:	6820      	ldr	r0, [r4, #0]
   16690:	f7f9 fc36 	bl	ff00 <realloc>
   16694:	2800      	cmp	r0, #0
   16696:	f47f aab3 	bne.w	15c00 <__ssvfscanf_r+0x8cc>
   1669a:	e463      	b.n	15f64 <__ssvfscanf_r+0xc30>
   1669c:	4659      	mov	r1, fp
   1669e:	4648      	mov	r0, r9
   166a0:	637b      	str	r3, [r7, #52]	; 0x34
   166a2:	f001 fff1 	bl	18688 <__ssrefill_r>
   166a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   166a8:	2800      	cmp	r0, #0
   166aa:	f43f ac49 	beq.w	15f40 <__ssvfscanf_r+0xc0c>
   166ae:	e44d      	b.n	15f4c <__ssvfscanf_r+0xc18>
   166b0:	6818      	ldr	r0, [r3, #0]
   166b2:	461c      	mov	r4, r3
   166b4:	f7f9 fc24 	bl	ff00 <realloc>
   166b8:	2800      	cmp	r0, #0
   166ba:	f43f accc 	beq.w	16056 <__ssvfscanf_r+0xd22>
   166be:	6020      	str	r0, [r4, #0]
   166c0:	e4c9      	b.n	16056 <__ssvfscanf_r+0xd22>
   166c2:	2500      	movs	r5, #0
   166c4:	e637      	b.n	16336 <__ssvfscanf_r+0x1002>
   166c6:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   166c8:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   166cc:	627e      	str	r6, [r7, #36]	; 0x24
   166ce:	4644      	mov	r4, r8
   166d0:	2d00      	cmp	r5, #0
   166d2:	f43f aa7c 	beq.w	15bce <__ssvfscanf_r+0x89a>
   166d6:	3d01      	subs	r5, #1
   166d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   166dc:	465a      	mov	r2, fp
   166de:	5d59      	ldrb	r1, [r3, r5]
   166e0:	4648      	mov	r0, r9
   166e2:	f001 ff91 	bl	18608 <_sungetc_r>
   166e6:	2d00      	cmp	r5, #0
   166e8:	d1f5      	bne.n	166d6 <__ssvfscanf_r+0x13a2>
   166ea:	f7ff ba70 	b.w	15bce <__ssvfscanf_r+0x89a>
   166ee:	4659      	mov	r1, fp
   166f0:	4648      	mov	r0, r9
   166f2:	f001 ffc9 	bl	18688 <__ssrefill_r>
   166f6:	2800      	cmp	r0, #0
   166f8:	f43f ae22 	beq.w	16340 <__ssvfscanf_r+0x100c>
   166fc:	627c      	str	r4, [r7, #36]	; 0x24
   166fe:	2d00      	cmp	r5, #0
   16700:	f47e af04 	bne.w	1550c <__ssvfscanf_r+0x1d8>
   16704:	e628      	b.n	16358 <__ssvfscanf_r+0x1024>
   16706:	627c      	str	r4, [r7, #36]	; 0x24
   16708:	2d00      	cmp	r5, #0
   1670a:	f43f ae25 	beq.w	16358 <__ssvfscanf_r+0x1024>
   1670e:	3d01      	subs	r5, #1
   16710:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16714:	465a      	mov	r2, fp
   16716:	5d59      	ldrb	r1, [r3, r5]
   16718:	4648      	mov	r0, r9
   1671a:	f001 ff75 	bl	18608 <_sungetc_r>
   1671e:	2d00      	cmp	r5, #0
   16720:	d1f5      	bne.n	1670e <__ssvfscanf_r+0x13da>
   16722:	e619      	b.n	16358 <__ssvfscanf_r+0x1024>
   16724:	07e5      	lsls	r5, r4, #31
   16726:	d43c      	bmi.n	167a2 <__ssvfscanf_r+0x146e>
   16728:	07a4      	lsls	r4, r4, #30
   1672a:	d53a      	bpl.n	167a2 <__ssvfscanf_r+0x146e>
   1672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1672e:	64f9      	str	r1, [r7, #76]	; 0x4c
   16730:	f853 2b04 	ldr.w	r2, [r3], #4
   16734:	633b      	str	r3, [r7, #48]	; 0x30
   16736:	ea4f 73ea 	mov.w	r3, sl, asr #31
   1673a:	f8c2 a000 	str.w	sl, [r2]
   1673e:	6053      	str	r3, [r2, #4]
   16740:	f7fe be1f 	b.w	15382 <__ssvfscanf_r+0x4e>
   16744:	ee18 9a10 	vmov	r9, s16
   16748:	461e      	mov	r6, r3
   1674a:	f7ff b814 	b.w	15776 <__ssvfscanf_r+0x442>
   1674e:	2301      	movs	r3, #1
   16750:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16754:	64bb      	str	r3, [r7, #72]	; 0x48
   16756:	f7fe bff6 	b.w	15746 <__ssvfscanf_r+0x412>
   1675a:	f1b8 0f01 	cmp.w	r8, #1
   1675e:	bf38      	it	cc
   16760:	f04f 0801 	movcc.w	r8, #1
   16764:	f014 0301 	ands.w	r3, r4, #1
   16768:	d13a      	bne.n	167e0 <__ssvfscanf_r+0x14ac>
   1676a:	06e5      	lsls	r5, r4, #27
   1676c:	f100 8136 	bmi.w	169dc <__ssvfscanf_r+0x16a8>
   16770:	0624      	lsls	r4, r4, #24
   16772:	f140 814c 	bpl.w	16a0e <__ssvfscanf_r+0x16da>
   16776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16778:	f853 5b04 	ldr.w	r5, [r3], #4
   1677c:	64bb      	str	r3, [r7, #72]	; 0x48
   1677e:	2d00      	cmp	r5, #0
   16780:	f43e aecd 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   16784:	4640      	mov	r0, r8
   16786:	f7f9 f8ef 	bl	f968 <malloc>
   1678a:	4603      	mov	r3, r0
   1678c:	2800      	cmp	r0, #0
   1678e:	f040 80dc 	bne.w	1694a <__ssvfscanf_r+0x1616>
   16792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16794:	2b00      	cmp	r3, #0
   16796:	f000 8081 	beq.w	1689c <__ssvfscanf_r+0x1568>
   1679a:	f8d3 8000 	ldr.w	r8, [r3]
   1679e:	88de      	ldrh	r6, [r3, #6]
   167a0:	e712      	b.n	165c8 <__ssvfscanf_r+0x1294>
   167a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   167a4:	64f9      	str	r1, [r7, #76]	; 0x4c
   167a6:	f853 2b04 	ldr.w	r2, [r3], #4
   167aa:	f8c2 a000 	str.w	sl, [r2]
   167ae:	633b      	str	r3, [r7, #48]	; 0x30
   167b0:	f7fe bde7 	b.w	15382 <__ssvfscanf_r+0x4e>
   167b4:	462b      	mov	r3, r5
   167b6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   167b8:	42ab      	cmp	r3, r5
   167ba:	f67e aeb0 	bls.w	1551e <__ssvfscanf_r+0x1ea>
   167be:	461c      	mov	r4, r3
   167c0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   167c4:	465a      	mov	r2, fp
   167c6:	4648      	mov	r0, r9
   167c8:	f001 ff1e 	bl	18608 <_sungetc_r>
   167cc:	42ac      	cmp	r4, r5
   167ce:	d1f7      	bne.n	167c0 <__ssvfscanf_r+0x148c>
   167d0:	f7fe bea5 	b.w	1551e <__ssvfscanf_r+0x1ea>
   167d4:	00017f4d 	.word	0x00017f4d
   167d8:	20000f81 	.word	0x20000f81
   167dc:	20000518 	.word	0x20000518
   167e0:	f014 0310 	ands.w	r3, r4, #16
   167e4:	637b      	str	r3, [r7, #52]	; 0x34
   167e6:	d05e      	beq.n	168a6 <__ssvfscanf_r+0x1572>
   167e8:	2500      	movs	r5, #0
   167ea:	63fd      	str	r5, [r7, #60]	; 0x3c
   167ec:	64bd      	str	r5, [r7, #72]	; 0x48
   167ee:	462e      	mov	r6, r5
   167f0:	2400      	movs	r4, #0
   167f2:	464b      	mov	r3, r9
   167f4:	46c1      	mov	r9, r8
   167f6:	46a8      	mov	r8, r5
   167f8:	4625      	mov	r5, r4
   167fa:	461c      	mov	r4, r3
   167fc:	f7fb f954 	bl	11aa8 <__locale_mb_cur_max>
   16800:	42a8      	cmp	r0, r5
   16802:	f43e ae83 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   16806:	e9db 3200 	ldrd	r3, r2, [fp]
   1680a:	f813 1b01 	ldrb.w	r1, [r3], #1
   1680e:	3a01      	subs	r2, #1
   16810:	e9cb 3200 	strd	r3, r2, [fp]
   16814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16816:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   1681a:	2a03      	cmp	r2, #3
   1681c:	5541      	strb	r1, [r0, r5]
   1681e:	f105 0301 	add.w	r3, r5, #1
   16822:	f107 0568 	add.w	r5, r7, #104	; 0x68
   16826:	d102      	bne.n	1682e <__ssvfscanf_r+0x14fa>
   16828:	682a      	ldr	r2, [r5, #0]
   1682a:	2a04      	cmp	r2, #4
   1682c:	d006      	beq.n	1683c <__ssvfscanf_r+0x1508>
   1682e:	2208      	movs	r2, #8
   16830:	2100      	movs	r1, #0
   16832:	4628      	mov	r0, r5
   16834:	62bb      	str	r3, [r7, #40]	; 0x28
   16836:	f7fb f817 	bl	11868 <memset>
   1683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1683c:	9500      	str	r5, [sp, #0]
   1683e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   16842:	4631      	mov	r1, r6
   16844:	4620      	mov	r0, r4
   16846:	62bb      	str	r3, [r7, #40]	; 0x28
   16848:	f001 fd0a 	bl	18260 <_mbrtowc_r>
   1684c:	1c43      	adds	r3, r0, #1
   1684e:	6278      	str	r0, [r7, #36]	; 0x24
   16850:	f43e ae5c 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   16854:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16856:	2800      	cmp	r0, #0
   16858:	f040 8147 	bne.w	16aea <__ssvfscanf_r+0x17b6>
   1685c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1685e:	b902      	cbnz	r2, 16862 <__ssvfscanf_r+0x152e>
   16860:	6032      	str	r2, [r6, #0]
   16862:	449a      	add	sl, r3
   16864:	f109 39ff 	add.w	r9, r9, #4294967295
   16868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1686a:	2b00      	cmp	r3, #0
   1686c:	f040 8175 	bne.w	16b5a <__ssvfscanf_r+0x1826>
   16870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16872:	2b00      	cmp	r3, #0
   16874:	f000 8170 	beq.w	16b58 <__ssvfscanf_r+0x1824>
   16878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1687a:	1af5      	subs	r5, r6, r3
   1687c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   16880:	f200 816a 	bhi.w	16b58 <__ssvfscanf_r+0x1824>
   16884:	4618      	mov	r0, r3
   16886:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1688a:	f7f9 fb39 	bl	ff00 <realloc>
   1688e:	63f8      	str	r0, [r7, #60]	; 0x3c
   16890:	2800      	cmp	r0, #0
   16892:	f040 815c 	bne.w	16b4e <__ssvfscanf_r+0x181a>
   16896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16898:	2b00      	cmp	r3, #0
   1689a:	d12d      	bne.n	168f8 <__ssvfscanf_r+0x15c4>
   1689c:	f04f 33ff 	mov.w	r3, #4294967295
   168a0:	647b      	str	r3, [r7, #68]	; 0x44
   168a2:	f7fe be47 	b.w	15534 <__ssvfscanf_r+0x200>
   168a6:	0622      	lsls	r2, r4, #24
   168a8:	f140 808f 	bpl.w	169ca <__ssvfscanf_r+0x1696>
   168ac:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   168ae:	f854 3b04 	ldr.w	r3, [r4], #4
   168b2:	64bb      	str	r3, [r7, #72]	; 0x48
   168b4:	2b00      	cmp	r3, #0
   168b6:	f43e ae32 	beq.w	1551e <__ssvfscanf_r+0x1ea>
   168ba:	2080      	movs	r0, #128	; 0x80
   168bc:	f7f9 f854 	bl	f968 <malloc>
   168c0:	4606      	mov	r6, r0
   168c2:	2800      	cmp	r0, #0
   168c4:	d0e7      	beq.n	16896 <__ssvfscanf_r+0x1562>
   168c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   168c8:	6018      	str	r0, [r3, #0]
   168ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   168cc:	88dd      	ldrh	r5, [r3, #6]
   168ce:	889a      	ldrh	r2, [r3, #4]
   168d0:	4295      	cmp	r5, r2
   168d2:	f0c0 80b3 	bcc.w	16a3c <__ssvfscanf_r+0x1708>
   168d6:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   168da:	428a      	cmp	r2, r1
   168dc:	d856      	bhi.n	1698c <__ssvfscanf_r+0x1658>
   168de:	3208      	adds	r2, #8
   168e0:	b293      	uxth	r3, r2
   168e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   168e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   168e6:	0099      	lsls	r1, r3, #2
   168e8:	6810      	ldr	r0, [r2, #0]
   168ea:	f7f9 fb09 	bl	ff00 <realloc>
   168ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   168f0:	2800      	cmp	r0, #0
   168f2:	f040 80ae 	bne.w	16a52 <__ssvfscanf_r+0x171e>
   168f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   168f8:	88db      	ldrh	r3, [r3, #6]
   168fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   168fc:	461e      	mov	r6, r3
   168fe:	f8d2 8000 	ldr.w	r8, [r2]
   16902:	e661      	b.n	165c8 <__ssvfscanf_r+0x1294>
   16904:	462b      	mov	r3, r5
   16906:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16908:	42ab      	cmp	r3, r5
   1690a:	f67e ae08 	bls.w	1551e <__ssvfscanf_r+0x1ea>
   1690e:	461c      	mov	r4, r3
   16910:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   16914:	465a      	mov	r2, fp
   16916:	4648      	mov	r0, r9
   16918:	f001 fe76 	bl	18608 <_sungetc_r>
   1691c:	42ac      	cmp	r4, r5
   1691e:	d1f7      	bne.n	16910 <__ssvfscanf_r+0x15dc>
   16920:	f7fe bdfd 	b.w	1551e <__ssvfscanf_r+0x1ea>
   16924:	4610      	mov	r0, r2
   16926:	00d9      	lsls	r1, r3, #3
   16928:	461e      	mov	r6, r3
   1692a:	f7f9 fae9 	bl	ff00 <realloc>
   1692e:	62b8      	str	r0, [r7, #40]	; 0x28
   16930:	2800      	cmp	r0, #0
   16932:	d0b0      	beq.n	16896 <__ssvfscanf_r+0x1562>
   16934:	1942      	adds	r2, r0, r5
   16936:	64ba      	str	r2, [r7, #72]	; 0x48
   16938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1693a:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1693c:	6010      	str	r0, [r2, #0]
   1693e:	0073      	lsls	r3, r6, #1
   16940:	623b      	str	r3, [r7, #32]
   16942:	e4f8      	b.n	16336 <__ssvfscanf_r+0x1002>
   16944:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   16948:	e63e      	b.n	165c8 <__ssvfscanf_r+0x1294>
   1694a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1694c:	6028      	str	r0, [r5, #0]
   1694e:	88ce      	ldrh	r6, [r1, #6]
   16950:	888a      	ldrh	r2, [r1, #4]
   16952:	4296      	cmp	r6, r2
   16954:	f0c0 808e 	bcc.w	16a74 <__ssvfscanf_r+0x1740>
   16958:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1695c:	428a      	cmp	r2, r1
   1695e:	6338      	str	r0, [r7, #48]	; 0x30
   16960:	f240 80a5 	bls.w	16aae <__ssvfscanf_r+0x177a>
   16964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16966:	f8d3 8000 	ldr.w	r8, [r3]
   1696a:	e62d      	b.n	165c8 <__ssvfscanf_r+0x1294>
   1696c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1696e:	4295      	cmp	r5, r2
   16970:	f67e add5 	bls.w	1551e <__ssvfscanf_r+0x1ea>
   16974:	462c      	mov	r4, r5
   16976:	6abd      	ldr	r5, [r7, #40]	; 0x28
   16978:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1697c:	465a      	mov	r2, fp
   1697e:	4648      	mov	r0, r9
   16980:	f001 fe42 	bl	18608 <_sungetc_r>
   16984:	42ac      	cmp	r4, r5
   16986:	d1f7      	bne.n	16978 <__ssvfscanf_r+0x1644>
   16988:	f7fe bdc9 	b.w	1551e <__ssvfscanf_r+0x1ea>
   1698c:	462b      	mov	r3, r5
   1698e:	e7b4      	b.n	168fa <__ssvfscanf_r+0x15c6>
   16990:	f001 fc64 	bl	1825c <_strtoull_r>
   16994:	e5c1      	b.n	1651a <__ssvfscanf_r+0x11e6>
   16996:	f8d8 3000 	ldr.w	r3, [r8]
   1699a:	461d      	mov	r5, r3
   1699c:	3301      	adds	r3, #1
   1699e:	f47f a8d5 	bne.w	15b4c <__ssvfscanf_r+0x818>
   169a2:	462a      	mov	r2, r5
   169a4:	f7ff b8e8 	b.w	15b78 <__ssvfscanf_r+0x844>
   169a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   169aa:	6818      	ldr	r0, [r3, #0]
   169ac:	f001 fcb4 	bl	18318 <iswspace>
   169b0:	2800      	cmp	r0, #0
   169b2:	f47f aea8 	bne.w	16706 <__ssvfscanf_r+0x13d2>
   169b6:	2c03      	cmp	r4, #3
   169b8:	44aa      	add	sl, r5
   169ba:	f47f a849 	bne.w	15a50 <__ssvfscanf_r+0x71c>
   169be:	6833      	ldr	r3, [r6, #0]
   169c0:	2b04      	cmp	r3, #4
   169c2:	f47f a845 	bne.w	15a50 <__ssvfscanf_r+0x71c>
   169c6:	f7ff b845 	b.w	15a54 <__ssvfscanf_r+0x720>
   169ca:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   169ce:	f853 6b04 	ldr.w	r6, [r3], #4
   169d2:	633b      	str	r3, [r7, #48]	; 0x30
   169d4:	4615      	mov	r5, r2
   169d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   169d8:	64ba      	str	r2, [r7, #72]	; 0x48
   169da:	e709      	b.n	167f0 <__ssvfscanf_r+0x14bc>
   169dc:	461c      	mov	r4, r3
   169de:	f8db 3004 	ldr.w	r3, [fp, #4]
   169e2:	4598      	cmp	r8, r3
   169e4:	dd39      	ble.n	16a5a <__ssvfscanf_r+0x1726>
   169e6:	f8db 2000 	ldr.w	r2, [fp]
   169ea:	441a      	add	r2, r3
   169ec:	f8cb 2000 	str.w	r2, [fp]
   169f0:	4659      	mov	r1, fp
   169f2:	4648      	mov	r0, r9
   169f4:	441c      	add	r4, r3
   169f6:	eba8 0803 	sub.w	r8, r8, r3
   169fa:	f001 fe45 	bl	18688 <__ssrefill_r>
   169fe:	2800      	cmp	r0, #0
   16a00:	d0ed      	beq.n	169de <__ssvfscanf_r+0x16aa>
   16a02:	2c00      	cmp	r4, #0
   16a04:	f43e ad82 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   16a08:	44a2      	add	sl, r4
   16a0a:	f7fe bcba 	b.w	15382 <__ssvfscanf_r+0x4e>
   16a0e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   16a10:	4643      	mov	r3, r8
   16a12:	6829      	ldr	r1, [r5, #0]
   16a14:	f8cd b000 	str.w	fp, [sp]
   16a18:	2201      	movs	r2, #1
   16a1a:	4648      	mov	r0, r9
   16a1c:	f001 fe52 	bl	186c4 <_sfread_r>
   16a20:	4604      	mov	r4, r0
   16a22:	2800      	cmp	r0, #0
   16a24:	f43e ad72 	beq.w	1550c <__ssvfscanf_r+0x1d8>
   16a28:	3504      	adds	r5, #4
   16a2a:	64bd      	str	r5, [r7, #72]	; 0x48
   16a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16a2e:	3301      	adds	r3, #1
   16a30:	647b      	str	r3, [r7, #68]	; 0x44
   16a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16a34:	633b      	str	r3, [r7, #48]	; 0x30
   16a36:	44a2      	add	sl, r4
   16a38:	f7fe bca3 	b.w	15382 <__ssvfscanf_r+0x4e>
   16a3c:	6818      	ldr	r0, [r3, #0]
   16a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16a40:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16a46:	633c      	str	r4, [r7, #48]	; 0x30
   16a48:	3501      	adds	r5, #1
   16a4a:	80dd      	strh	r5, [r3, #6]
   16a4c:	63fe      	str	r6, [r7, #60]	; 0x3c
   16a4e:	2520      	movs	r5, #32
   16a50:	e6ce      	b.n	167f0 <__ssvfscanf_r+0x14bc>
   16a52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16a54:	8093      	strh	r3, [r2, #4]
   16a56:	6010      	str	r0, [r2, #0]
   16a58:	e7f1      	b.n	16a3e <__ssvfscanf_r+0x170a>
   16a5a:	eba3 0308 	sub.w	r3, r3, r8
   16a5e:	f8cb 3004 	str.w	r3, [fp, #4]
   16a62:	f8db 3000 	ldr.w	r3, [fp]
   16a66:	4444      	add	r4, r8
   16a68:	4443      	add	r3, r8
   16a6a:	f8cb 3000 	str.w	r3, [fp]
   16a6e:	44a2      	add	sl, r4
   16a70:	f7fe bc87 	b.w	15382 <__ssvfscanf_r+0x4e>
   16a74:	680a      	ldr	r2, [r1, #0]
   16a76:	63fa      	str	r2, [r7, #60]	; 0x3c
   16a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16a7a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   16a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16a80:	3601      	adds	r6, #1
   16a82:	b2b6      	uxth	r6, r6
   16a84:	80d6      	strh	r6, [r2, #6]
   16a86:	4619      	mov	r1, r3
   16a88:	f8cd b000 	str.w	fp, [sp]
   16a8c:	4643      	mov	r3, r8
   16a8e:	2201      	movs	r2, #1
   16a90:	4648      	mov	r0, r9
   16a92:	f001 fe17 	bl	186c4 <_sfread_r>
   16a96:	4604      	mov	r4, r0
   16a98:	b1d8      	cbz	r0, 16ad2 <__ssvfscanf_r+0x179e>
   16a9a:	4580      	cmp	r8, r0
   16a9c:	d9c6      	bls.n	16a2c <__ssvfscanf_r+0x16f8>
   16a9e:	6828      	ldr	r0, [r5, #0]
   16aa0:	4621      	mov	r1, r4
   16aa2:	f7f9 fa2d 	bl	ff00 <realloc>
   16aa6:	2800      	cmp	r0, #0
   16aa8:	d0c0      	beq.n	16a2c <__ssvfscanf_r+0x16f8>
   16aaa:	6028      	str	r0, [r5, #0]
   16aac:	e7be      	b.n	16a2c <__ssvfscanf_r+0x16f8>
   16aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16ab0:	3208      	adds	r2, #8
   16ab2:	b294      	uxth	r4, r2
   16ab4:	681a      	ldr	r2, [r3, #0]
   16ab6:	637a      	str	r2, [r7, #52]	; 0x34
   16ab8:	4610      	mov	r0, r2
   16aba:	00a1      	lsls	r1, r4, #2
   16abc:	f7f9 fa20 	bl	ff00 <realloc>
   16ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
   16ac4:	2800      	cmp	r0, #0
   16ac6:	d05b      	beq.n	16b80 <__ssvfscanf_r+0x184c>
   16ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16aca:	809c      	strh	r4, [r3, #4]
   16acc:	6018      	str	r0, [r3, #0]
   16ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16ad0:	e7d2      	b.n	16a78 <__ssvfscanf_r+0x1744>
   16ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ad4:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   16ad8:	2b00      	cmp	r3, #0
   16ada:	f43f ad75 	beq.w	165c8 <__ssvfscanf_r+0x1294>
   16ade:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   16ae2:	065b      	lsls	r3, r3, #25
   16ae4:	f57e ad1d 	bpl.w	15522 <__ssvfscanf_r+0x1ee>
   16ae8:	e56a      	b.n	165c0 <__ssvfscanf_r+0x128c>
   16aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16aec:	3202      	adds	r2, #2
   16aee:	d11d      	bne.n	16b2c <__ssvfscanf_r+0x17f8>
   16af0:	f8db 2004 	ldr.w	r2, [fp, #4]
   16af4:	2a00      	cmp	r2, #0
   16af6:	461d      	mov	r5, r3
   16af8:	f73f ae80 	bgt.w	167fc <__ssvfscanf_r+0x14c8>
   16afc:	4659      	mov	r1, fp
   16afe:	4620      	mov	r0, r4
   16b00:	f001 fdc2 	bl	18688 <__ssrefill_r>
   16b04:	b9e0      	cbnz	r0, 16b40 <__ssvfscanf_r+0x180c>
   16b06:	f1b9 0f00 	cmp.w	r9, #0
   16b0a:	f47f ae77 	bne.w	167fc <__ssvfscanf_r+0x14c8>
   16b0e:	4645      	mov	r5, r8
   16b10:	46a1      	mov	r9, r4
   16b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b14:	b123      	cbz	r3, 16b20 <__ssvfscanf_r+0x17ec>
   16b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b18:	1af1      	subs	r1, r6, r3
   16b1a:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   16b1e:	d827      	bhi.n	16b70 <__ssvfscanf_r+0x183c>
   16b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16b22:	2b00      	cmp	r3, #0
   16b24:	f47e ac2d 	bne.w	15382 <__ssvfscanf_r+0x4e>
   16b28:	f7ff ba1c 	b.w	15f64 <__ssvfscanf_r+0xc30>
   16b2c:	449a      	add	sl, r3
   16b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b30:	2b03      	cmp	r3, #3
   16b32:	f47f ae97 	bne.w	16864 <__ssvfscanf_r+0x1530>
   16b36:	682b      	ldr	r3, [r5, #0]
   16b38:	2b04      	cmp	r3, #4
   16b3a:	f47f ae93 	bne.w	16864 <__ssvfscanf_r+0x1530>
   16b3e:	e693      	b.n	16868 <__ssvfscanf_r+0x1534>
   16b40:	46a1      	mov	r9, r4
   16b42:	462c      	mov	r4, r5
   16b44:	4645      	mov	r5, r8
   16b46:	2c00      	cmp	r4, #0
   16b48:	d0e3      	beq.n	16b12 <__ssvfscanf_r+0x17de>
   16b4a:	f7fe bcdf 	b.w	1550c <__ssvfscanf_r+0x1d8>
   16b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16b50:	1946      	adds	r6, r0, r5
   16b52:	6010      	str	r0, [r2, #0]
   16b54:	ea4f 0848 	mov.w	r8, r8, lsl #1
   16b58:	3604      	adds	r6, #4
   16b5a:	f8db 3004 	ldr.w	r3, [fp, #4]
   16b5e:	2b00      	cmp	r3, #0
   16b60:	f04f 0500 	mov.w	r5, #0
   16b64:	ddca      	ble.n	16afc <__ssvfscanf_r+0x17c8>
   16b66:	f1b9 0f00 	cmp.w	r9, #0
   16b6a:	f47f ae47 	bne.w	167fc <__ssvfscanf_r+0x14c8>
   16b6e:	e7ce      	b.n	16b0e <__ssvfscanf_r+0x17da>
   16b70:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   16b72:	6820      	ldr	r0, [r4, #0]
   16b74:	f7f9 f9c4 	bl	ff00 <realloc>
   16b78:	2800      	cmp	r0, #0
   16b7a:	d0d1      	beq.n	16b20 <__ssvfscanf_r+0x17ec>
   16b7c:	6020      	str	r0, [r4, #0]
   16b7e:	e7cf      	b.n	16b20 <__ssvfscanf_r+0x17ec>
   16b80:	4690      	mov	r8, r2
   16b82:	e521      	b.n	165c8 <__ssvfscanf_r+0x1294>

00016b84 <_fclose_r>:
   16b84:	b570      	push	{r4, r5, r6, lr}
   16b86:	2900      	cmp	r1, #0
   16b88:	d04b      	beq.n	16c22 <_fclose_r+0x9e>
   16b8a:	4606      	mov	r6, r0
   16b8c:	460c      	mov	r4, r1
   16b8e:	b110      	cbz	r0, 16b96 <_fclose_r+0x12>
   16b90:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16b92:	2b00      	cmp	r3, #0
   16b94:	d048      	beq.n	16c28 <_fclose_r+0xa4>
   16b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16b98:	07d8      	lsls	r0, r3, #31
   16b9a:	d534      	bpl.n	16c06 <_fclose_r+0x82>
   16b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16ba0:	2b00      	cmp	r3, #0
   16ba2:	d03e      	beq.n	16c22 <_fclose_r+0x9e>
   16ba4:	4621      	mov	r1, r4
   16ba6:	4630      	mov	r0, r6
   16ba8:	f000 f850 	bl	16c4c <__sflush_r>
   16bac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   16bae:	4605      	mov	r5, r0
   16bb0:	b133      	cbz	r3, 16bc0 <_fclose_r+0x3c>
   16bb2:	69e1      	ldr	r1, [r4, #28]
   16bb4:	4630      	mov	r0, r6
   16bb6:	4798      	blx	r3
   16bb8:	2800      	cmp	r0, #0
   16bba:	bfb8      	it	lt
   16bbc:	f04f 35ff 	movlt.w	r5, #4294967295
   16bc0:	89a3      	ldrh	r3, [r4, #12]
   16bc2:	061a      	lsls	r2, r3, #24
   16bc4:	d43c      	bmi.n	16c40 <_fclose_r+0xbc>
   16bc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16bc8:	b141      	cbz	r1, 16bdc <_fclose_r+0x58>
   16bca:	f104 0340 	add.w	r3, r4, #64	; 0x40
   16bce:	4299      	cmp	r1, r3
   16bd0:	d002      	beq.n	16bd8 <_fclose_r+0x54>
   16bd2:	4630      	mov	r0, r6
   16bd4:	f7fb fb46 	bl	12264 <_free_r>
   16bd8:	2300      	movs	r3, #0
   16bda:	6323      	str	r3, [r4, #48]	; 0x30
   16bdc:	6c61      	ldr	r1, [r4, #68]	; 0x44
   16bde:	b121      	cbz	r1, 16bea <_fclose_r+0x66>
   16be0:	4630      	mov	r0, r6
   16be2:	f7fb fb3f 	bl	12264 <_free_r>
   16be6:	2300      	movs	r3, #0
   16be8:	6463      	str	r3, [r4, #68]	; 0x44
   16bea:	f7fa fc23 	bl	11434 <__sfp_lock_acquire>
   16bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16bf0:	2200      	movs	r2, #0
   16bf2:	07db      	lsls	r3, r3, #31
   16bf4:	81a2      	strh	r2, [r4, #12]
   16bf6:	d51f      	bpl.n	16c38 <_fclose_r+0xb4>
   16bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16bfa:	f7fa ffed 	bl	11bd8 <__retarget_lock_close_recursive>
   16bfe:	f7fa fc1f 	bl	11440 <__sfp_lock_release>
   16c02:	4628      	mov	r0, r5
   16c04:	bd70      	pop	{r4, r5, r6, pc}
   16c06:	89a3      	ldrh	r3, [r4, #12]
   16c08:	0599      	lsls	r1, r3, #22
   16c0a:	d4cb      	bmi.n	16ba4 <_fclose_r+0x20>
   16c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16c0e:	f7fa ffe5 	bl	11bdc <__retarget_lock_acquire_recursive>
   16c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16c16:	2b00      	cmp	r3, #0
   16c18:	d1c4      	bne.n	16ba4 <_fclose_r+0x20>
   16c1a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   16c1c:	f015 0501 	ands.w	r5, r5, #1
   16c20:	d005      	beq.n	16c2e <_fclose_r+0xaa>
   16c22:	2500      	movs	r5, #0
   16c24:	4628      	mov	r0, r5
   16c26:	bd70      	pop	{r4, r5, r6, pc}
   16c28:	f7fa fbe6 	bl	113f8 <__sinit>
   16c2c:	e7b3      	b.n	16b96 <_fclose_r+0x12>
   16c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16c30:	f7fa ffd6 	bl	11be0 <__retarget_lock_release_recursive>
   16c34:	4628      	mov	r0, r5
   16c36:	bd70      	pop	{r4, r5, r6, pc}
   16c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16c3a:	f7fa ffd1 	bl	11be0 <__retarget_lock_release_recursive>
   16c3e:	e7db      	b.n	16bf8 <_fclose_r+0x74>
   16c40:	6921      	ldr	r1, [r4, #16]
   16c42:	4630      	mov	r0, r6
   16c44:	f7fb fb0e 	bl	12264 <_free_r>
   16c48:	e7bd      	b.n	16bc6 <_fclose_r+0x42>
   16c4a:	bf00      	nop

00016c4c <__sflush_r>:
   16c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   16c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c54:	460c      	mov	r4, r1
   16c56:	0711      	lsls	r1, r2, #28
   16c58:	4680      	mov	r8, r0
   16c5a:	d447      	bmi.n	16cec <__sflush_r+0xa0>
   16c5c:	6863      	ldr	r3, [r4, #4]
   16c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   16c62:	2b00      	cmp	r3, #0
   16c64:	81a2      	strh	r2, [r4, #12]
   16c66:	dd5e      	ble.n	16d26 <__sflush_r+0xda>
   16c68:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   16c6a:	2d00      	cmp	r5, #0
   16c6c:	d058      	beq.n	16d20 <__sflush_r+0xd4>
   16c6e:	2300      	movs	r3, #0
   16c70:	f8d8 6000 	ldr.w	r6, [r8]
   16c74:	f8c8 3000 	str.w	r3, [r8]
   16c78:	b293      	uxth	r3, r2
   16c7a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   16c7e:	d156      	bne.n	16d2e <__sflush_r+0xe2>
   16c80:	2301      	movs	r3, #1
   16c82:	69e1      	ldr	r1, [r4, #28]
   16c84:	4640      	mov	r0, r8
   16c86:	47a8      	blx	r5
   16c88:	1c43      	adds	r3, r0, #1
   16c8a:	d067      	beq.n	16d5c <__sflush_r+0x110>
   16c8c:	89a3      	ldrh	r3, [r4, #12]
   16c8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   16c90:	075f      	lsls	r7, r3, #29
   16c92:	d505      	bpl.n	16ca0 <__sflush_r+0x54>
   16c94:	6863      	ldr	r3, [r4, #4]
   16c96:	1ac0      	subs	r0, r0, r3
   16c98:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16c9a:	b10b      	cbz	r3, 16ca0 <__sflush_r+0x54>
   16c9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16c9e:	1ac0      	subs	r0, r0, r3
   16ca0:	69e1      	ldr	r1, [r4, #28]
   16ca2:	4602      	mov	r2, r0
   16ca4:	2300      	movs	r3, #0
   16ca6:	4640      	mov	r0, r8
   16ca8:	47a8      	blx	r5
   16caa:	1c41      	adds	r1, r0, #1
   16cac:	d141      	bne.n	16d32 <__sflush_r+0xe6>
   16cae:	f8d8 3000 	ldr.w	r3, [r8]
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	d03d      	beq.n	16d32 <__sflush_r+0xe6>
   16cb6:	2b1d      	cmp	r3, #29
   16cb8:	d001      	beq.n	16cbe <__sflush_r+0x72>
   16cba:	2b16      	cmp	r3, #22
   16cbc:	d156      	bne.n	16d6c <__sflush_r+0x120>
   16cbe:	89a3      	ldrh	r3, [r4, #12]
   16cc0:	6922      	ldr	r2, [r4, #16]
   16cc2:	6022      	str	r2, [r4, #0]
   16cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   16cc8:	2100      	movs	r1, #0
   16cca:	6061      	str	r1, [r4, #4]
   16ccc:	81a3      	strh	r3, [r4, #12]
   16cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   16cd0:	f8c8 6000 	str.w	r6, [r8]
   16cd4:	b321      	cbz	r1, 16d20 <__sflush_r+0xd4>
   16cd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   16cda:	4299      	cmp	r1, r3
   16cdc:	d002      	beq.n	16ce4 <__sflush_r+0x98>
   16cde:	4640      	mov	r0, r8
   16ce0:	f7fb fac0 	bl	12264 <_free_r>
   16ce4:	2000      	movs	r0, #0
   16ce6:	6320      	str	r0, [r4, #48]	; 0x30
   16ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16cec:	6926      	ldr	r6, [r4, #16]
   16cee:	b1be      	cbz	r6, 16d20 <__sflush_r+0xd4>
   16cf0:	b293      	uxth	r3, r2
   16cf2:	6825      	ldr	r5, [r4, #0]
   16cf4:	6026      	str	r6, [r4, #0]
   16cf6:	079a      	lsls	r2, r3, #30
   16cf8:	bf0c      	ite	eq
   16cfa:	6963      	ldreq	r3, [r4, #20]
   16cfc:	2300      	movne	r3, #0
   16cfe:	1bad      	subs	r5, r5, r6
   16d00:	60a3      	str	r3, [r4, #8]
   16d02:	e00b      	b.n	16d1c <__sflush_r+0xd0>
   16d04:	462b      	mov	r3, r5
   16d06:	4632      	mov	r2, r6
   16d08:	69e1      	ldr	r1, [r4, #28]
   16d0a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   16d0c:	4640      	mov	r0, r8
   16d0e:	47b8      	blx	r7
   16d10:	f1b0 0c00 	subs.w	ip, r0, #0
   16d14:	eba5 050c 	sub.w	r5, r5, ip
   16d18:	4466      	add	r6, ip
   16d1a:	dd17      	ble.n	16d4c <__sflush_r+0x100>
   16d1c:	2d00      	cmp	r5, #0
   16d1e:	dcf1      	bgt.n	16d04 <__sflush_r+0xb8>
   16d20:	2000      	movs	r0, #0
   16d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16d28:	2b00      	cmp	r3, #0
   16d2a:	dc9d      	bgt.n	16c68 <__sflush_r+0x1c>
   16d2c:	e7f8      	b.n	16d20 <__sflush_r+0xd4>
   16d2e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   16d30:	e7ae      	b.n	16c90 <__sflush_r+0x44>
   16d32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16d36:	6922      	ldr	r2, [r4, #16]
   16d38:	6022      	str	r2, [r4, #0]
   16d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   16d3e:	81a3      	strh	r3, [r4, #12]
   16d40:	2200      	movs	r2, #0
   16d42:	04db      	lsls	r3, r3, #19
   16d44:	6062      	str	r2, [r4, #4]
   16d46:	d5c2      	bpl.n	16cce <__sflush_r+0x82>
   16d48:	6520      	str	r0, [r4, #80]	; 0x50
   16d4a:	e7c0      	b.n	16cce <__sflush_r+0x82>
   16d4c:	89a3      	ldrh	r3, [r4, #12]
   16d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16d52:	f04f 30ff 	mov.w	r0, #4294967295
   16d56:	81a3      	strh	r3, [r4, #12]
   16d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d5c:	f8d8 3000 	ldr.w	r3, [r8]
   16d60:	2b00      	cmp	r3, #0
   16d62:	d093      	beq.n	16c8c <__sflush_r+0x40>
   16d64:	2b1d      	cmp	r3, #29
   16d66:	d006      	beq.n	16d76 <__sflush_r+0x12a>
   16d68:	2b16      	cmp	r3, #22
   16d6a:	d004      	beq.n	16d76 <__sflush_r+0x12a>
   16d6c:	89a3      	ldrh	r3, [r4, #12]
   16d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16d72:	81a3      	strh	r3, [r4, #12]
   16d74:	e7d5      	b.n	16d22 <__sflush_r+0xd6>
   16d76:	f8c8 6000 	str.w	r6, [r8]
   16d7a:	e7d1      	b.n	16d20 <__sflush_r+0xd4>

00016d7c <_fflush_r>:
   16d7c:	b538      	push	{r3, r4, r5, lr}
   16d7e:	460c      	mov	r4, r1
   16d80:	4605      	mov	r5, r0
   16d82:	b108      	cbz	r0, 16d88 <_fflush_r+0xc>
   16d84:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16d86:	b303      	cbz	r3, 16dca <_fflush_r+0x4e>
   16d88:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   16d8c:	b188      	cbz	r0, 16db2 <_fflush_r+0x36>
   16d8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16d90:	07db      	lsls	r3, r3, #31
   16d92:	d401      	bmi.n	16d98 <_fflush_r+0x1c>
   16d94:	0581      	lsls	r1, r0, #22
   16d96:	d50f      	bpl.n	16db8 <_fflush_r+0x3c>
   16d98:	4628      	mov	r0, r5
   16d9a:	4621      	mov	r1, r4
   16d9c:	f7ff ff56 	bl	16c4c <__sflush_r>
   16da0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16da2:	07da      	lsls	r2, r3, #31
   16da4:	4605      	mov	r5, r0
   16da6:	d402      	bmi.n	16dae <_fflush_r+0x32>
   16da8:	89a3      	ldrh	r3, [r4, #12]
   16daa:	059b      	lsls	r3, r3, #22
   16dac:	d508      	bpl.n	16dc0 <_fflush_r+0x44>
   16dae:	4628      	mov	r0, r5
   16db0:	bd38      	pop	{r3, r4, r5, pc}
   16db2:	4605      	mov	r5, r0
   16db4:	4628      	mov	r0, r5
   16db6:	bd38      	pop	{r3, r4, r5, pc}
   16db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16dba:	f7fa ff0f 	bl	11bdc <__retarget_lock_acquire_recursive>
   16dbe:	e7eb      	b.n	16d98 <_fflush_r+0x1c>
   16dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16dc2:	f7fa ff0d 	bl	11be0 <__retarget_lock_release_recursive>
   16dc6:	4628      	mov	r0, r5
   16dc8:	bd38      	pop	{r3, r4, r5, pc}
   16dca:	f7fa fb15 	bl	113f8 <__sinit>
   16dce:	e7db      	b.n	16d88 <_fflush_r+0xc>

00016dd0 <__sccl>:
   16dd0:	b570      	push	{r4, r5, r6, lr}
   16dd2:	780c      	ldrb	r4, [r1, #0]
   16dd4:	2c5e      	cmp	r4, #94	; 0x5e
   16dd6:	4686      	mov	lr, r0
   16dd8:	d01e      	beq.n	16e18 <__sccl+0x48>
   16dda:	2200      	movs	r2, #0
   16ddc:	1c48      	adds	r0, r1, #1
   16dde:	4694      	mov	ip, r2
   16de0:	f10e 33ff 	add.w	r3, lr, #4294967295
   16de4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   16de8:	f803 2f01 	strb.w	r2, [r3, #1]!
   16dec:	428b      	cmp	r3, r1
   16dee:	d1fb      	bne.n	16de8 <__sccl+0x18>
   16df0:	b184      	cbz	r4, 16e14 <__sccl+0x44>
   16df2:	f08c 0101 	eor.w	r1, ip, #1
   16df6:	f80e 1004 	strb.w	r1, [lr, r4]
   16dfa:	1c45      	adds	r5, r0, #1
   16dfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   16e00:	2b2d      	cmp	r3, #45	; 0x2d
   16e02:	d00e      	beq.n	16e22 <__sccl+0x52>
   16e04:	2b5d      	cmp	r3, #93	; 0x5d
   16e06:	d003      	beq.n	16e10 <__sccl+0x40>
   16e08:	b11b      	cbz	r3, 16e12 <__sccl+0x42>
   16e0a:	461c      	mov	r4, r3
   16e0c:	4628      	mov	r0, r5
   16e0e:	e7f2      	b.n	16df6 <__sccl+0x26>
   16e10:	4628      	mov	r0, r5
   16e12:	bd70      	pop	{r4, r5, r6, pc}
   16e14:	3801      	subs	r0, #1
   16e16:	bd70      	pop	{r4, r5, r6, pc}
   16e18:	2201      	movs	r2, #1
   16e1a:	784c      	ldrb	r4, [r1, #1]
   16e1c:	1c88      	adds	r0, r1, #2
   16e1e:	4694      	mov	ip, r2
   16e20:	e7de      	b.n	16de0 <__sccl+0x10>
   16e22:	f890 c001 	ldrb.w	ip, [r0, #1]
   16e26:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   16e2a:	d0ee      	beq.n	16e0a <__sccl+0x3a>
   16e2c:	4564      	cmp	r4, ip
   16e2e:	dcec      	bgt.n	16e0a <__sccl+0x3a>
   16e30:	1c66      	adds	r6, r4, #1
   16e32:	3002      	adds	r0, #2
   16e34:	eb0e 0206 	add.w	r2, lr, r6
   16e38:	f802 1b01 	strb.w	r1, [r2], #1
   16e3c:	eba2 030e 	sub.w	r3, r2, lr
   16e40:	3b01      	subs	r3, #1
   16e42:	459c      	cmp	ip, r3
   16e44:	dcf8      	bgt.n	16e38 <__sccl+0x68>
   16e46:	ebac 0304 	sub.w	r3, ip, r4
   16e4a:	3b01      	subs	r3, #1
   16e4c:	4564      	cmp	r4, ip
   16e4e:	bfa8      	it	ge
   16e50:	2300      	movge	r3, #0
   16e52:	3502      	adds	r5, #2
   16e54:	199c      	adds	r4, r3, r6
   16e56:	e7d1      	b.n	16dfc <__sccl+0x2c>

00016e58 <stpncpy>:
   16e58:	ea41 0300 	orr.w	r3, r1, r0
   16e5c:	079b      	lsls	r3, r3, #30
   16e5e:	b430      	push	{r4, r5}
   16e60:	d101      	bne.n	16e66 <stpncpy+0xe>
   16e62:	2a03      	cmp	r2, #3
   16e64:	d80f      	bhi.n	16e86 <stpncpy+0x2e>
   16e66:	f101 3cff 	add.w	ip, r1, #4294967295
   16e6a:	e007      	b.n	16e7c <stpncpy+0x24>
   16e6c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   16e70:	f803 1b01 	strb.w	r1, [r3], #1
   16e74:	1e54      	subs	r4, r2, #1
   16e76:	b1c1      	cbz	r1, 16eaa <stpncpy+0x52>
   16e78:	4622      	mov	r2, r4
   16e7a:	4618      	mov	r0, r3
   16e7c:	4603      	mov	r3, r0
   16e7e:	2a00      	cmp	r2, #0
   16e80:	d1f4      	bne.n	16e6c <stpncpy+0x14>
   16e82:	bc30      	pop	{r4, r5}
   16e84:	4770      	bx	lr
   16e86:	460b      	mov	r3, r1
   16e88:	4619      	mov	r1, r3
   16e8a:	f853 5b04 	ldr.w	r5, [r3], #4
   16e8e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   16e92:	ea24 0405 	bic.w	r4, r4, r5
   16e96:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   16e9a:	d1e4      	bne.n	16e66 <stpncpy+0xe>
   16e9c:	3a04      	subs	r2, #4
   16e9e:	2a03      	cmp	r2, #3
   16ea0:	f840 5b04 	str.w	r5, [r0], #4
   16ea4:	4619      	mov	r1, r3
   16ea6:	d8ef      	bhi.n	16e88 <stpncpy+0x30>
   16ea8:	e7dd      	b.n	16e66 <stpncpy+0xe>
   16eaa:	4402      	add	r2, r0
   16eac:	2c00      	cmp	r4, #0
   16eae:	d0e8      	beq.n	16e82 <stpncpy+0x2a>
   16eb0:	f803 1b01 	strb.w	r1, [r3], #1
   16eb4:	4293      	cmp	r3, r2
   16eb6:	d1fb      	bne.n	16eb0 <stpncpy+0x58>
   16eb8:	bc30      	pop	{r4, r5}
   16eba:	4770      	bx	lr

00016ebc <_localeconv_r>:
   16ebc:	4800      	ldr	r0, [pc, #0]	; (16ec0 <_localeconv_r+0x4>)
   16ebe:	4770      	bx	lr
   16ec0:	20008f8c 	.word	0x20008f8c
   16ec4:	00000000 	.word	0x00000000

00016ec8 <frexp>:
   16ec8:	b430      	push	{r4, r5}
   16eca:	b082      	sub	sp, #8
   16ecc:	ed8d 0b00 	vstr	d0, [sp]
   16ed0:	9a01      	ldr	r2, [sp, #4]
   16ed2:	4c19      	ldr	r4, [pc, #100]	; (16f38 <frexp+0x70>)
   16ed4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   16ed8:	2100      	movs	r1, #0
   16eda:	42a3      	cmp	r3, r4
   16edc:	6001      	str	r1, [r0, #0]
   16ede:	dc21      	bgt.n	16f24 <frexp+0x5c>
   16ee0:	9c00      	ldr	r4, [sp, #0]
   16ee2:	431c      	orrs	r4, r3
   16ee4:	d01e      	beq.n	16f24 <frexp+0x5c>
   16ee6:	4c15      	ldr	r4, [pc, #84]	; (16f3c <frexp+0x74>)
   16ee8:	4014      	ands	r4, r2
   16eea:	b954      	cbnz	r4, 16f02 <frexp+0x3a>
   16eec:	ed9f 7b10 	vldr	d7, [pc, #64]	; 16f30 <frexp+0x68>
   16ef0:	ee20 7b07 	vmul.f64	d7, d0, d7
   16ef4:	ed8d 7b00 	vstr	d7, [sp]
   16ef8:	9a01      	ldr	r2, [sp, #4]
   16efa:	f06f 0135 	mvn.w	r1, #53	; 0x35
   16efe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   16f02:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   16f06:	e9dd 4500 	ldrd	r4, r5, [sp]
   16f0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   16f0e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   16f12:	151b      	asrs	r3, r3, #20
   16f14:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   16f18:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   16f1c:	e9cd 4500 	strd	r4, r5, [sp]
   16f20:	440b      	add	r3, r1
   16f22:	6003      	str	r3, [r0, #0]
   16f24:	ed9d 0b00 	vldr	d0, [sp]
   16f28:	b002      	add	sp, #8
   16f2a:	bc30      	pop	{r4, r5}
   16f2c:	4770      	bx	lr
   16f2e:	bf00      	nop
   16f30:	00000000 	.word	0x00000000
   16f34:	43500000 	.word	0x43500000
   16f38:	7fefffff 	.word	0x7fefffff
   16f3c:	7ff00000 	.word	0x7ff00000

00016f40 <__assert_func>:
   16f40:	b500      	push	{lr}
   16f42:	4c0b      	ldr	r4, [pc, #44]	; (16f70 <__assert_func+0x30>)
   16f44:	6825      	ldr	r5, [r4, #0]
   16f46:	4614      	mov	r4, r2
   16f48:	68ee      	ldr	r6, [r5, #12]
   16f4a:	461a      	mov	r2, r3
   16f4c:	b085      	sub	sp, #20
   16f4e:	4603      	mov	r3, r0
   16f50:	460d      	mov	r5, r1
   16f52:	b14c      	cbz	r4, 16f68 <__assert_func+0x28>
   16f54:	4907      	ldr	r1, [pc, #28]	; (16f74 <__assert_func+0x34>)
   16f56:	9500      	str	r5, [sp, #0]
   16f58:	e9cd 1401 	strd	r1, r4, [sp, #4]
   16f5c:	4630      	mov	r0, r6
   16f5e:	4906      	ldr	r1, [pc, #24]	; (16f78 <__assert_func+0x38>)
   16f60:	f001 fabe 	bl	184e0 <fiprintf>
   16f64:	f7f6 ff8e 	bl	de84 <abort>
   16f68:	4904      	ldr	r1, [pc, #16]	; (16f7c <__assert_func+0x3c>)
   16f6a:	460c      	mov	r4, r1
   16f6c:	e7f3      	b.n	16f56 <__assert_func+0x16>
   16f6e:	bf00      	nop
   16f70:	20009424 	.word	0x20009424
   16f74:	20000d64 	.word	0x20000d64
   16f78:	20000d74 	.word	0x20000d74
   16f7c:	20000518 	.word	0x20000518

00016f80 <_calloc_r>:
   16f80:	b538      	push	{r3, r4, r5, lr}
   16f82:	fba1 1402 	umull	r1, r4, r1, r2
   16f86:	bb8c      	cbnz	r4, 16fec <_calloc_r+0x6c>
   16f88:	f7f8 fcfe 	bl	f988 <_malloc_r>
   16f8c:	4605      	mov	r5, r0
   16f8e:	b1e0      	cbz	r0, 16fca <_calloc_r+0x4a>
   16f90:	f850 2c04 	ldr.w	r2, [r0, #-4]
   16f94:	f022 0203 	bic.w	r2, r2, #3
   16f98:	3a04      	subs	r2, #4
   16f9a:	2a24      	cmp	r2, #36	; 0x24
   16f9c:	d817      	bhi.n	16fce <_calloc_r+0x4e>
   16f9e:	2a13      	cmp	r2, #19
   16fa0:	d91a      	bls.n	16fd8 <_calloc_r+0x58>
   16fa2:	2a1b      	cmp	r2, #27
   16fa4:	e9c0 4400 	strd	r4, r4, [r0]
   16fa8:	d91d      	bls.n	16fe6 <_calloc_r+0x66>
   16faa:	2a24      	cmp	r2, #36	; 0x24
   16fac:	bf14      	ite	ne
   16fae:	f100 0210 	addne.w	r2, r0, #16
   16fb2:	f100 0218 	addeq.w	r2, r0, #24
   16fb6:	f04f 0300 	mov.w	r3, #0
   16fba:	e9c0 4402 	strd	r4, r4, [r0, #8]
   16fbe:	bf04      	itt	eq
   16fc0:	6104      	streq	r4, [r0, #16]
   16fc2:	6144      	streq	r4, [r0, #20]
   16fc4:	e9c2 3300 	strd	r3, r3, [r2]
   16fc8:	6093      	str	r3, [r2, #8]
   16fca:	4628      	mov	r0, r5
   16fcc:	bd38      	pop	{r3, r4, r5, pc}
   16fce:	4621      	mov	r1, r4
   16fd0:	f7fa fc4a 	bl	11868 <memset>
   16fd4:	4628      	mov	r0, r5
   16fd6:	bd38      	pop	{r3, r4, r5, pc}
   16fd8:	4602      	mov	r2, r0
   16fda:	2300      	movs	r3, #0
   16fdc:	e9c2 3300 	strd	r3, r3, [r2]
   16fe0:	6093      	str	r3, [r2, #8]
   16fe2:	4628      	mov	r0, r5
   16fe4:	bd38      	pop	{r3, r4, r5, pc}
   16fe6:	f100 0208 	add.w	r2, r0, #8
   16fea:	e7f6      	b.n	16fda <_calloc_r+0x5a>
   16fec:	f7fa fdc8 	bl	11b80 <__errno>
   16ff0:	230c      	movs	r3, #12
   16ff2:	2500      	movs	r5, #0
   16ff4:	6003      	str	r3, [r0, #0]
   16ff6:	e7e8      	b.n	16fca <_calloc_r+0x4a>

00016ff8 <quorem>:
   16ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ffc:	6903      	ldr	r3, [r0, #16]
   16ffe:	690c      	ldr	r4, [r1, #16]
   17000:	42a3      	cmp	r3, r4
   17002:	b083      	sub	sp, #12
   17004:	f2c0 8087 	blt.w	17116 <quorem+0x11e>
   17008:	3c01      	subs	r4, #1
   1700a:	f101 0514 	add.w	r5, r1, #20
   1700e:	00a3      	lsls	r3, r4, #2
   17010:	f100 0814 	add.w	r8, r0, #20
   17014:	9300      	str	r3, [sp, #0]
   17016:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1701a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   1701e:	3301      	adds	r3, #1
   17020:	4681      	mov	r9, r0
   17022:	429a      	cmp	r2, r3
   17024:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   17028:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   1702c:	9001      	str	r0, [sp, #4]
   1702e:	fbb2 f6f3 	udiv	r6, r2, r3
   17032:	d33b      	bcc.n	170ac <quorem+0xb4>
   17034:	f04f 0c00 	mov.w	ip, #0
   17038:	46ae      	mov	lr, r5
   1703a:	4640      	mov	r0, r8
   1703c:	46e2      	mov	sl, ip
   1703e:	4663      	mov	r3, ip
   17040:	f85e bb04 	ldr.w	fp, [lr], #4
   17044:	6802      	ldr	r2, [r0, #0]
   17046:	fa1f fc8b 	uxth.w	ip, fp
   1704a:	fb06 330c 	mla	r3, r6, ip, r3
   1704e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   17052:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   17056:	fb06 cc0b 	mla	ip, r6, fp, ip
   1705a:	b29b      	uxth	r3, r3
   1705c:	ebaa 0303 	sub.w	r3, sl, r3
   17060:	fa1f fa8c 	uxth.w	sl, ip
   17064:	fa13 f382 	uxtah	r3, r3, r2
   17068:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   1706c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   17070:	b29b      	uxth	r3, r3
   17072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   17076:	4577      	cmp	r7, lr
   17078:	f840 3b04 	str.w	r3, [r0], #4
   1707c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   17080:	ea4f 431c 	mov.w	r3, ip, lsr #16
   17084:	d2dc      	bcs.n	17040 <quorem+0x48>
   17086:	9b00      	ldr	r3, [sp, #0]
   17088:	f858 3003 	ldr.w	r3, [r8, r3]
   1708c:	b973      	cbnz	r3, 170ac <quorem+0xb4>
   1708e:	9b01      	ldr	r3, [sp, #4]
   17090:	3b04      	subs	r3, #4
   17092:	4598      	cmp	r8, r3
   17094:	d304      	bcc.n	170a0 <quorem+0xa8>
   17096:	e007      	b.n	170a8 <quorem+0xb0>
   17098:	4598      	cmp	r8, r3
   1709a:	f104 34ff 	add.w	r4, r4, #4294967295
   1709e:	d203      	bcs.n	170a8 <quorem+0xb0>
   170a0:	f853 2904 	ldr.w	r2, [r3], #-4
   170a4:	2a00      	cmp	r2, #0
   170a6:	d0f7      	beq.n	17098 <quorem+0xa0>
   170a8:	f8c9 4010 	str.w	r4, [r9, #16]
   170ac:	4648      	mov	r0, r9
   170ae:	f7fc f8e3 	bl	13278 <__mcmp>
   170b2:	2800      	cmp	r0, #0
   170b4:	db2b      	blt.n	1710e <quorem+0x116>
   170b6:	3601      	adds	r6, #1
   170b8:	4641      	mov	r1, r8
   170ba:	2300      	movs	r3, #0
   170bc:	f855 0b04 	ldr.w	r0, [r5], #4
   170c0:	f8d1 c000 	ldr.w	ip, [r1]
   170c4:	b282      	uxth	r2, r0
   170c6:	1a9a      	subs	r2, r3, r2
   170c8:	0c03      	lsrs	r3, r0, #16
   170ca:	fa12 f28c 	uxtah	r2, r2, ip
   170ce:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   170d2:	eb03 4322 	add.w	r3, r3, r2, asr #16
   170d6:	b292      	uxth	r2, r2
   170d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   170dc:	42af      	cmp	r7, r5
   170de:	f841 2b04 	str.w	r2, [r1], #4
   170e2:	ea4f 4323 	mov.w	r3, r3, asr #16
   170e6:	d2e9      	bcs.n	170bc <quorem+0xc4>
   170e8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   170ec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   170f0:	b96a      	cbnz	r2, 1710e <quorem+0x116>
   170f2:	3b04      	subs	r3, #4
   170f4:	4598      	cmp	r8, r3
   170f6:	d304      	bcc.n	17102 <quorem+0x10a>
   170f8:	e007      	b.n	1710a <quorem+0x112>
   170fa:	4598      	cmp	r8, r3
   170fc:	f104 34ff 	add.w	r4, r4, #4294967295
   17100:	d203      	bcs.n	1710a <quorem+0x112>
   17102:	f853 2904 	ldr.w	r2, [r3], #-4
   17106:	2a00      	cmp	r2, #0
   17108:	d0f7      	beq.n	170fa <quorem+0x102>
   1710a:	f8c9 4010 	str.w	r4, [r9, #16]
   1710e:	4630      	mov	r0, r6
   17110:	b003      	add	sp, #12
   17112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17116:	2000      	movs	r0, #0
   17118:	b003      	add	sp, #12
   1711a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1711e:	bf00      	nop

00017120 <_dtoa_r>:
   17120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17124:	ed2d 8b02 	vpush	{d8}
   17128:	b08f      	sub	sp, #60	; 0x3c
   1712a:	ed8d 0b02 	vstr	d0, [sp, #8]
   1712e:	9101      	str	r1, [sp, #4]
   17130:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17132:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   17134:	9305      	str	r3, [sp, #20]
   17136:	ec57 6b10 	vmov	r6, r7, d0
   1713a:	4604      	mov	r4, r0
   1713c:	4693      	mov	fp, r2
   1713e:	b141      	cbz	r1, 17152 <_dtoa_r+0x32>
   17140:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   17142:	604a      	str	r2, [r1, #4]
   17144:	2301      	movs	r3, #1
   17146:	4093      	lsls	r3, r2
   17148:	608b      	str	r3, [r1, #8]
   1714a:	f7fb fddd 	bl	12d08 <_Bfree>
   1714e:	2300      	movs	r3, #0
   17150:	63a3      	str	r3, [r4, #56]	; 0x38
   17152:	f1b7 0800 	subs.w	r8, r7, #0
   17156:	bfb4      	ite	lt
   17158:	2301      	movlt	r3, #1
   1715a:	2300      	movge	r3, #0
   1715c:	602b      	str	r3, [r5, #0]
   1715e:	4bbe      	ldr	r3, [pc, #760]	; (17458 <_dtoa_r+0x338>)
   17160:	bfbc      	itt	lt
   17162:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   17166:	f8cd 800c 	strlt.w	r8, [sp, #12]
   1716a:	ea33 0308 	bics.w	r3, r3, r8
   1716e:	f000 809f 	beq.w	172b0 <_dtoa_r+0x190>
   17172:	ed9d 8b02 	vldr	d8, [sp, #8]
   17176:	eeb5 8b40 	vcmp.f64	d8, #0.0
   1717a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1717e:	d111      	bne.n	171a4 <_dtoa_r+0x84>
   17180:	9a05      	ldr	r2, [sp, #20]
   17182:	2301      	movs	r3, #1
   17184:	6013      	str	r3, [r2, #0]
   17186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17188:	2b00      	cmp	r3, #0
   1718a:	f000 823f 	beq.w	1760c <_dtoa_r+0x4ec>
   1718e:	4bb3      	ldr	r3, [pc, #716]	; (1745c <_dtoa_r+0x33c>)
   17190:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17192:	6013      	str	r3, [r2, #0]
   17194:	3b01      	subs	r3, #1
   17196:	9300      	str	r3, [sp, #0]
   17198:	9800      	ldr	r0, [sp, #0]
   1719a:	b00f      	add	sp, #60	; 0x3c
   1719c:	ecbd 8b02 	vpop	{d8}
   171a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a4:	aa0c      	add	r2, sp, #48	; 0x30
   171a6:	a90d      	add	r1, sp, #52	; 0x34
   171a8:	4620      	mov	r0, r4
   171aa:	eeb0 0b48 	vmov.f64	d0, d8
   171ae:	f7fc f9c3 	bl	13538 <__d2b>
   171b2:	ea5f 5318 	movs.w	r3, r8, lsr #20
   171b6:	4605      	mov	r5, r0
   171b8:	f040 8092 	bne.w	172e0 <_dtoa_r+0x1c0>
   171bc:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   171c0:	440b      	add	r3, r1
   171c2:	f203 4232 	addw	r2, r3, #1074	; 0x432
   171c6:	2a20      	cmp	r2, #32
   171c8:	f340 82fa 	ble.w	177c0 <_dtoa_r+0x6a0>
   171cc:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   171d0:	fa08 f802 	lsl.w	r8, r8, r2
   171d4:	f203 4212 	addw	r2, r3, #1042	; 0x412
   171d8:	40d6      	lsrs	r6, r2
   171da:	ea48 0206 	orr.w	r2, r8, r6
   171de:	ee07 2a10 	vmov	s14, r2
   171e2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   171e6:	1e58      	subs	r0, r3, #1
   171e8:	ee17 6a90 	vmov	r6, s15
   171ec:	ec53 2b17 	vmov	r2, r3, d7
   171f0:	f04f 0a01 	mov.w	sl, #1
   171f4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   171f8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 17440 <_dtoa_r+0x320>
   171fc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 17448 <_dtoa_r+0x328>
   17200:	ed9f 5b93 	vldr	d5, [pc, #588]	; 17450 <_dtoa_r+0x330>
   17204:	ee06 0a90 	vmov	s13, r0
   17208:	ec43 2b12 	vmov	d2, r2, r3
   1720c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   17210:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   17214:	ee32 6b46 	vsub.f64	d6, d2, d6
   17218:	eea6 7b03 	vfma.f64	d7, d6, d3
   1721c:	eea4 7b05 	vfma.f64	d7, d4, d5
   17220:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17224:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   17228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1722c:	ee16 7a90 	vmov	r7, s13
   17230:	d508      	bpl.n	17244 <_dtoa_r+0x124>
   17232:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   17236:	eeb4 6b47 	vcmp.f64	d6, d7
   1723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1723e:	bf18      	it	ne
   17240:	f107 37ff 	addne.w	r7, r7, #4294967295
   17244:	2f16      	cmp	r7, #22
   17246:	f200 8145 	bhi.w	174d4 <_dtoa_r+0x3b4>
   1724a:	4b85      	ldr	r3, [pc, #532]	; (17460 <_dtoa_r+0x340>)
   1724c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   17250:	ed93 7b00 	vldr	d7, [r3]
   17254:	eeb4 8bc7 	vcmpe.f64	d8, d7
   17258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1725c:	d557      	bpl.n	1730e <_dtoa_r+0x1ee>
   1725e:	1a09      	subs	r1, r1, r0
   17260:	2300      	movs	r3, #0
   17262:	f1b1 0801 	subs.w	r8, r1, #1
   17266:	f107 37ff 	add.w	r7, r7, #4294967295
   1726a:	930a      	str	r3, [sp, #40]	; 0x28
   1726c:	f100 8139 	bmi.w	174e2 <_dtoa_r+0x3c2>
   17270:	2300      	movs	r3, #0
   17272:	9306      	str	r3, [sp, #24]
   17274:	2f00      	cmp	r7, #0
   17276:	da52      	bge.n	1731e <_dtoa_r+0x1fe>
   17278:	9b06      	ldr	r3, [sp, #24]
   1727a:	9704      	str	r7, [sp, #16]
   1727c:	1bdb      	subs	r3, r3, r7
   1727e:	9306      	str	r3, [sp, #24]
   17280:	427b      	negs	r3, r7
   17282:	9308      	str	r3, [sp, #32]
   17284:	9b01      	ldr	r3, [sp, #4]
   17286:	2b09      	cmp	r3, #9
   17288:	f04f 0700 	mov.w	r7, #0
   1728c:	d84e      	bhi.n	1732c <_dtoa_r+0x20c>
   1728e:	2b05      	cmp	r3, #5
   17290:	f340 829d 	ble.w	177ce <_dtoa_r+0x6ae>
   17294:	3b04      	subs	r3, #4
   17296:	9301      	str	r3, [sp, #4]
   17298:	2600      	movs	r6, #0
   1729a:	9b01      	ldr	r3, [sp, #4]
   1729c:	1e9a      	subs	r2, r3, #2
   1729e:	2a03      	cmp	r2, #3
   172a0:	f200 8125 	bhi.w	174ee <_dtoa_r+0x3ce>
   172a4:	e8df f012 	tbh	[pc, r2, lsl #1]
   172a8:	03a703aa 	.word	0x03a703aa
   172ac:	037e039d 	.word	0x037e039d
   172b0:	9a05      	ldr	r2, [sp, #20]
   172b2:	f3c8 0813 	ubfx	r8, r8, #0, #20
   172b6:	f242 730f 	movw	r3, #9999	; 0x270f
   172ba:	ea58 0806 	orrs.w	r8, r8, r6
   172be:	6013      	str	r3, [r2, #0]
   172c0:	d11e      	bne.n	17300 <_dtoa_r+0x1e0>
   172c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   172c4:	2b00      	cmp	r3, #0
   172c6:	f000 8591 	beq.w	17dec <_dtoa_r+0xccc>
   172ca:	4b66      	ldr	r3, [pc, #408]	; (17464 <_dtoa_r+0x344>)
   172cc:	9300      	str	r3, [sp, #0]
   172ce:	3308      	adds	r3, #8
   172d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   172d2:	9800      	ldr	r0, [sp, #0]
   172d4:	6013      	str	r3, [r2, #0]
   172d6:	b00f      	add	sp, #60	; 0x3c
   172d8:	ecbd 8b02 	vpop	{d8}
   172dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e0:	ee18 6a90 	vmov	r6, s17
   172e4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   172e8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   172ec:	ec53 2b18 	vmov	r2, r3, d8
   172f0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   172f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   172f6:	f04f 0a00 	mov.w	sl, #0
   172fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   172fe:	e77b      	b.n	171f8 <_dtoa_r+0xd8>
   17300:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17302:	2b00      	cmp	r3, #0
   17304:	f040 833b 	bne.w	1797e <_dtoa_r+0x85e>
   17308:	4b57      	ldr	r3, [pc, #348]	; (17468 <_dtoa_r+0x348>)
   1730a:	9300      	str	r3, [sp, #0]
   1730c:	e744      	b.n	17198 <_dtoa_r+0x78>
   1730e:	1a09      	subs	r1, r1, r0
   17310:	2300      	movs	r3, #0
   17312:	f1b1 0801 	subs.w	r8, r1, #1
   17316:	930a      	str	r3, [sp, #40]	; 0x28
   17318:	f100 80e3 	bmi.w	174e2 <_dtoa_r+0x3c2>
   1731c:	9306      	str	r3, [sp, #24]
   1731e:	2300      	movs	r3, #0
   17320:	9308      	str	r3, [sp, #32]
   17322:	9b01      	ldr	r3, [sp, #4]
   17324:	9704      	str	r7, [sp, #16]
   17326:	2b09      	cmp	r3, #9
   17328:	44b8      	add	r8, r7
   1732a:	d9b0      	bls.n	1728e <_dtoa_r+0x16e>
   1732c:	2300      	movs	r3, #0
   1732e:	2601      	movs	r6, #1
   17330:	9301      	str	r3, [sp, #4]
   17332:	9607      	str	r6, [sp, #28]
   17334:	f04f 39ff 	mov.w	r9, #4294967295
   17338:	469b      	mov	fp, r3
   1733a:	2100      	movs	r1, #0
   1733c:	63e1      	str	r1, [r4, #60]	; 0x3c
   1733e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   17342:	4620      	mov	r0, r4
   17344:	f7fb fcba 	bl	12cbc <_Balloc>
   17348:	9000      	str	r0, [sp, #0]
   1734a:	2800      	cmp	r0, #0
   1734c:	f000 8540 	beq.w	17dd0 <_dtoa_r+0xcb0>
   17350:	9b00      	ldr	r3, [sp, #0]
   17352:	63a3      	str	r3, [r4, #56]	; 0x38
   17354:	f1b9 0f0e 	cmp.w	r9, #14
   17358:	f200 80dc 	bhi.w	17514 <_dtoa_r+0x3f4>
   1735c:	2e00      	cmp	r6, #0
   1735e:	f000 80d9 	beq.w	17514 <_dtoa_r+0x3f4>
   17362:	9b04      	ldr	r3, [sp, #16]
   17364:	2b00      	cmp	r3, #0
   17366:	f340 83de 	ble.w	17b26 <_dtoa_r+0xa06>
   1736a:	4a3d      	ldr	r2, [pc, #244]	; (17460 <_dtoa_r+0x340>)
   1736c:	f003 010f 	and.w	r1, r3, #15
   17370:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   17374:	ed92 7b00 	vldr	d7, [r2]
   17378:	111a      	asrs	r2, r3, #4
   1737a:	05db      	lsls	r3, r3, #23
   1737c:	f140 8382 	bpl.w	17a84 <_dtoa_r+0x964>
   17380:	493a      	ldr	r1, [pc, #232]	; (1746c <_dtoa_r+0x34c>)
   17382:	ed91 6b08 	vldr	d6, [r1, #32]
   17386:	f002 020f 	and.w	r2, r2, #15
   1738a:	2003      	movs	r0, #3
   1738c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   17390:	b15a      	cbz	r2, 173aa <_dtoa_r+0x28a>
   17392:	4936      	ldr	r1, [pc, #216]	; (1746c <_dtoa_r+0x34c>)
   17394:	07d6      	lsls	r6, r2, #31
   17396:	d504      	bpl.n	173a2 <_dtoa_r+0x282>
   17398:	ed91 6b00 	vldr	d6, [r1]
   1739c:	3001      	adds	r0, #1
   1739e:	ee27 7b06 	vmul.f64	d7, d7, d6
   173a2:	1052      	asrs	r2, r2, #1
   173a4:	f101 0108 	add.w	r1, r1, #8
   173a8:	d1f4      	bne.n	17394 <_dtoa_r+0x274>
   173aa:	ee85 6b07 	vdiv.f64	d6, d5, d7
   173ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   173b0:	b13b      	cbz	r3, 173c2 <_dtoa_r+0x2a2>
   173b2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   173b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
   173ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   173be:	f100 84ae 	bmi.w	17d1e <_dtoa_r+0xbfe>
   173c2:	ee07 0a90 	vmov	s15, r0
   173c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   173ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   173ce:	eea5 7b06 	vfma.f64	d7, d5, d6
   173d2:	ee17 2a90 	vmov	r2, s15
   173d6:	ec51 0b17 	vmov	r0, r1, d7
   173da:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   173de:	f1b9 0f00 	cmp.w	r9, #0
   173e2:	f000 8388 	beq.w	17af6 <_dtoa_r+0x9d6>
   173e6:	9e04      	ldr	r6, [sp, #16]
   173e8:	464a      	mov	r2, r9
   173ea:	9b07      	ldr	r3, [sp, #28]
   173ec:	2b00      	cmp	r3, #0
   173ee:	f000 8447 	beq.w	17c80 <_dtoa_r+0xb60>
   173f2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   173f6:	4b1a      	ldr	r3, [pc, #104]	; (17460 <_dtoa_r+0x340>)
   173f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   173fc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   17400:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   17404:	ee36 7b47 	vsub.f64	d7, d6, d7
   17408:	ed1c 6b02 	vldr	d6, [ip, #-8]
   1740c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   17410:	ec41 0b16 	vmov	d6, r0, r1
   17414:	ee14 0a90 	vmov	r0, s9
   17418:	ee35 5b46 	vsub.f64	d5, d5, d6
   1741c:	9900      	ldr	r1, [sp, #0]
   1741e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   17422:	3030      	adds	r0, #48	; 0x30
   17424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17428:	f801 0b01 	strb.w	r0, [r1], #1
   1742c:	f300 84ac 	bgt.w	17d88 <_dtoa_r+0xc68>
   17430:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   17434:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17438:	f04f 0c00 	mov.w	ip, #0
   1743c:	e031      	b.n	174a2 <_dtoa_r+0x382>
   1743e:	bf00      	nop
   17440:	636f4361 	.word	0x636f4361
   17444:	3fd287a7 	.word	0x3fd287a7
   17448:	8b60c8b3 	.word	0x8b60c8b3
   1744c:	3fc68a28 	.word	0x3fc68a28
   17450:	509f79fb 	.word	0x509f79fb
   17454:	3fd34413 	.word	0x3fd34413
   17458:	7ff00000 	.word	0x7ff00000
   1745c:	20007ef9 	.word	0x20007ef9
   17460:	20000328 	.word	0x20000328
   17464:	20001084 	.word	0x20001084
   17468:	20001090 	.word	0x20001090
   1746c:	20000300 	.word	0x20000300
   17470:	f10c 0c01 	add.w	ip, ip, #1
   17474:	4594      	cmp	ip, r2
   17476:	da4d      	bge.n	17514 <_dtoa_r+0x3f4>
   17478:	ee27 7b04 	vmul.f64	d7, d7, d4
   1747c:	ee25 5b04 	vmul.f64	d5, d5, d4
   17480:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17484:	ee16 3a90 	vmov	r3, s13
   17488:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1748c:	3330      	adds	r3, #48	; 0x30
   1748e:	ee37 7b43 	vsub.f64	d7, d7, d3
   17492:	eeb4 7bc5 	vcmpe.f64	d7, d5
   17496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1749a:	f801 3b01 	strb.w	r3, [r1], #1
   1749e:	f100 8473 	bmi.w	17d88 <_dtoa_r+0xc68>
   174a2:	ee32 6b47 	vsub.f64	d6, d2, d7
   174a6:	eeb4 6bc5 	vcmpe.f64	d6, d5
   174aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   174ae:	d5df      	bpl.n	17470 <_dtoa_r+0x350>
   174b0:	9a00      	ldr	r2, [sp, #0]
   174b2:	9604      	str	r6, [sp, #16]
   174b4:	e002      	b.n	174bc <_dtoa_r+0x39c>
   174b6:	428a      	cmp	r2, r1
   174b8:	f000 8450 	beq.w	17d5c <_dtoa_r+0xc3c>
   174bc:	4689      	mov	r9, r1
   174be:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   174c2:	2b39      	cmp	r3, #57	; 0x39
   174c4:	d0f7      	beq.n	174b6 <_dtoa_r+0x396>
   174c6:	3301      	adds	r3, #1
   174c8:	b2db      	uxtb	r3, r3
   174ca:	700b      	strb	r3, [r1, #0]
   174cc:	9b04      	ldr	r3, [sp, #16]
   174ce:	3301      	adds	r3, #1
   174d0:	9304      	str	r3, [sp, #16]
   174d2:	e155      	b.n	17780 <_dtoa_r+0x660>
   174d4:	1a09      	subs	r1, r1, r0
   174d6:	2301      	movs	r3, #1
   174d8:	f1b1 0801 	subs.w	r8, r1, #1
   174dc:	930a      	str	r3, [sp, #40]	; 0x28
   174de:	f57f aec7 	bpl.w	17270 <_dtoa_r+0x150>
   174e2:	f1c1 0301 	rsb	r3, r1, #1
   174e6:	9306      	str	r3, [sp, #24]
   174e8:	f04f 0800 	mov.w	r8, #0
   174ec:	e6c2      	b.n	17274 <_dtoa_r+0x154>
   174ee:	2600      	movs	r6, #0
   174f0:	63e6      	str	r6, [r4, #60]	; 0x3c
   174f2:	4631      	mov	r1, r6
   174f4:	4620      	mov	r0, r4
   174f6:	f7fb fbe1 	bl	12cbc <_Balloc>
   174fa:	9000      	str	r0, [sp, #0]
   174fc:	2800      	cmp	r0, #0
   174fe:	f000 8467 	beq.w	17dd0 <_dtoa_r+0xcb0>
   17502:	9b00      	ldr	r3, [sp, #0]
   17504:	63a3      	str	r3, [r4, #56]	; 0x38
   17506:	f04f 33ff 	mov.w	r3, #4294967295
   1750a:	930b      	str	r3, [sp, #44]	; 0x2c
   1750c:	4699      	mov	r9, r3
   1750e:	2301      	movs	r3, #1
   17510:	46b3      	mov	fp, r6
   17512:	9307      	str	r3, [sp, #28]
   17514:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17516:	2a00      	cmp	r2, #0
   17518:	db55      	blt.n	175c6 <_dtoa_r+0x4a6>
   1751a:	9904      	ldr	r1, [sp, #16]
   1751c:	290e      	cmp	r1, #14
   1751e:	dc52      	bgt.n	175c6 <_dtoa_r+0x4a6>
   17520:	4bb7      	ldr	r3, [pc, #732]	; (17800 <_dtoa_r+0x6e0>)
   17522:	f1bb 0f00 	cmp.w	fp, #0
   17526:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1752a:	ed93 6b00 	vldr	d6, [r3]
   1752e:	da15      	bge.n	1755c <_dtoa_r+0x43c>
   17530:	f1b9 0f00 	cmp.w	r9, #0
   17534:	dc12      	bgt.n	1755c <_dtoa_r+0x43c>
   17536:	f040 82f2 	bne.w	17b1e <_dtoa_r+0x9fe>
   1753a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   1753e:	ee26 7b07 	vmul.f64	d7, d6, d7
   17542:	eeb4 8bc7 	vcmpe.f64	d8, d7
   17546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1754a:	46ca      	mov	sl, r9
   1754c:	464e      	mov	r6, r9
   1754e:	f200 826d 	bhi.w	17a2c <_dtoa_r+0x90c>
   17552:	f8dd 8000 	ldr.w	r8, [sp]
   17556:	ea6f 0b0b 	mvn.w	fp, fp
   1755a:	e270      	b.n	17a3e <_dtoa_r+0x91e>
   1755c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   17560:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   17564:	9900      	ldr	r1, [sp, #0]
   17566:	ee17 3a10 	vmov	r3, s14
   1756a:	f1b9 0f01 	cmp.w	r9, #1
   1756e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   17572:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   17576:	f801 3b01 	strb.w	r3, [r1], #1
   1757a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1757e:	f000 8334 	beq.w	17bea <_dtoa_r+0xaca>
   17582:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17586:	2301      	movs	r3, #1
   17588:	e011      	b.n	175ae <_dtoa_r+0x48e>
   1758a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1758e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   17592:	3301      	adds	r3, #1
   17594:	ee17 2a10 	vmov	r2, s14
   17598:	454b      	cmp	r3, r9
   1759a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1759e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   175a2:	f801 2b01 	strb.w	r2, [r1], #1
   175a6:	eea5 8b46 	vfms.f64	d8, d5, d6
   175aa:	f000 831e 	beq.w	17bea <_dtoa_r+0xaca>
   175ae:	ee28 8b04 	vmul.f64	d8, d8, d4
   175b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
   175b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   175ba:	d1e6      	bne.n	1758a <_dtoa_r+0x46a>
   175bc:	9b04      	ldr	r3, [sp, #16]
   175be:	3301      	adds	r3, #1
   175c0:	9304      	str	r3, [sp, #16]
   175c2:	4689      	mov	r9, r1
   175c4:	e0dc      	b.n	17780 <_dtoa_r+0x660>
   175c6:	9b07      	ldr	r3, [sp, #28]
   175c8:	b343      	cbz	r3, 1761c <_dtoa_r+0x4fc>
   175ca:	9b01      	ldr	r3, [sp, #4]
   175cc:	2b01      	cmp	r3, #1
   175ce:	f340 8276 	ble.w	17abe <_dtoa_r+0x99e>
   175d2:	9b08      	ldr	r3, [sp, #32]
   175d4:	f109 3aff 	add.w	sl, r9, #4294967295
   175d8:	4553      	cmp	r3, sl
   175da:	f280 823f 	bge.w	17a5c <_dtoa_r+0x93c>
   175de:	9b08      	ldr	r3, [sp, #32]
   175e0:	f8cd a020 	str.w	sl, [sp, #32]
   175e4:	ebaa 0203 	sub.w	r2, sl, r3
   175e8:	4417      	add	r7, r2
   175ea:	f04f 0a00 	mov.w	sl, #0
   175ee:	f1b9 0f00 	cmp.w	r9, #0
   175f2:	f2c0 8325 	blt.w	17c40 <_dtoa_r+0xb20>
   175f6:	9b06      	ldr	r3, [sp, #24]
   175f8:	9309      	str	r3, [sp, #36]	; 0x24
   175fa:	444b      	add	r3, r9
   175fc:	44c8      	add	r8, r9
   175fe:	9306      	str	r3, [sp, #24]
   17600:	2101      	movs	r1, #1
   17602:	4620      	mov	r0, r4
   17604:	f7fb fc84 	bl	12f10 <__i2b>
   17608:	4606      	mov	r6, r0
   1760a:	e00c      	b.n	17626 <_dtoa_r+0x506>
   1760c:	4b7d      	ldr	r3, [pc, #500]	; (17804 <_dtoa_r+0x6e4>)
   1760e:	9300      	str	r3, [sp, #0]
   17610:	9800      	ldr	r0, [sp, #0]
   17612:	b00f      	add	sp, #60	; 0x3c
   17614:	ecbd 8b02 	vpop	{d8}
   17618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1761c:	9b06      	ldr	r3, [sp, #24]
   1761e:	f8dd a020 	ldr.w	sl, [sp, #32]
   17622:	9e07      	ldr	r6, [sp, #28]
   17624:	9309      	str	r3, [sp, #36]	; 0x24
   17626:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17628:	b16b      	cbz	r3, 17646 <_dtoa_r+0x526>
   1762a:	f1b8 0f00 	cmp.w	r8, #0
   1762e:	dd0a      	ble.n	17646 <_dtoa_r+0x526>
   17630:	4543      	cmp	r3, r8
   17632:	9906      	ldr	r1, [sp, #24]
   17634:	461a      	mov	r2, r3
   17636:	bfa8      	it	ge
   17638:	4642      	movge	r2, r8
   1763a:	1a89      	subs	r1, r1, r2
   1763c:	1a9b      	subs	r3, r3, r2
   1763e:	9106      	str	r1, [sp, #24]
   17640:	9309      	str	r3, [sp, #36]	; 0x24
   17642:	eba8 0802 	sub.w	r8, r8, r2
   17646:	9b08      	ldr	r3, [sp, #32]
   17648:	b163      	cbz	r3, 17664 <_dtoa_r+0x544>
   1764a:	9b07      	ldr	r3, [sp, #28]
   1764c:	2b00      	cmp	r3, #0
   1764e:	f000 82a7 	beq.w	17ba0 <_dtoa_r+0xa80>
   17652:	f1ba 0f00 	cmp.w	sl, #0
   17656:	f300 8204 	bgt.w	17a62 <_dtoa_r+0x942>
   1765a:	9b08      	ldr	r3, [sp, #32]
   1765c:	ebb3 020a 	subs.w	r2, r3, sl
   17660:	f040 82ff 	bne.w	17c62 <_dtoa_r+0xb42>
   17664:	2101      	movs	r1, #1
   17666:	4620      	mov	r0, r4
   17668:	f7fb fc52 	bl	12f10 <__i2b>
   1766c:	2f00      	cmp	r7, #0
   1766e:	4682      	mov	sl, r0
   17670:	f300 80af 	bgt.w	177d2 <_dtoa_r+0x6b2>
   17674:	9b01      	ldr	r3, [sp, #4]
   17676:	2b01      	cmp	r3, #1
   17678:	f340 8187 	ble.w	1798a <_dtoa_r+0x86a>
   1767c:	2300      	movs	r3, #0
   1767e:	9308      	str	r3, [sp, #32]
   17680:	2001      	movs	r0, #1
   17682:	2f00      	cmp	r7, #0
   17684:	f040 80b1 	bne.w	177ea <_dtoa_r+0x6ca>
   17688:	4440      	add	r0, r8
   1768a:	f010 001f 	ands.w	r0, r0, #31
   1768e:	f000 817a 	beq.w	17986 <_dtoa_r+0x866>
   17692:	f1c0 0220 	rsb	r2, r0, #32
   17696:	2a04      	cmp	r2, #4
   17698:	f300 8088 	bgt.w	177ac <_dtoa_r+0x68c>
   1769c:	f040 81f6 	bne.w	17a8c <_dtoa_r+0x96c>
   176a0:	9b06      	ldr	r3, [sp, #24]
   176a2:	2b00      	cmp	r3, #0
   176a4:	dd05      	ble.n	176b2 <_dtoa_r+0x592>
   176a6:	4629      	mov	r1, r5
   176a8:	461a      	mov	r2, r3
   176aa:	4620      	mov	r0, r4
   176ac:	f7fb fd6c 	bl	13188 <__lshift>
   176b0:	4605      	mov	r5, r0
   176b2:	f1b8 0f00 	cmp.w	r8, #0
   176b6:	dd05      	ble.n	176c4 <_dtoa_r+0x5a4>
   176b8:	4651      	mov	r1, sl
   176ba:	4642      	mov	r2, r8
   176bc:	4620      	mov	r0, r4
   176be:	f7fb fd63 	bl	13188 <__lshift>
   176c2:	4682      	mov	sl, r0
   176c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176c6:	2b00      	cmp	r3, #0
   176c8:	f040 813f 	bne.w	1794a <_dtoa_r+0x82a>
   176cc:	f1b9 0f00 	cmp.w	r9, #0
   176d0:	f340 8125 	ble.w	1791e <_dtoa_r+0x7fe>
   176d4:	9b07      	ldr	r3, [sp, #28]
   176d6:	2b00      	cmp	r3, #0
   176d8:	f040 80a3 	bne.w	17822 <_dtoa_r+0x702>
   176dc:	9b04      	ldr	r3, [sp, #16]
   176de:	3301      	adds	r3, #1
   176e0:	9304      	str	r3, [sp, #16]
   176e2:	f8dd 8000 	ldr.w	r8, [sp]
   176e6:	2701      	movs	r7, #1
   176e8:	e007      	b.n	176fa <_dtoa_r+0x5da>
   176ea:	4629      	mov	r1, r5
   176ec:	2300      	movs	r3, #0
   176ee:	220a      	movs	r2, #10
   176f0:	4620      	mov	r0, r4
   176f2:	f7fb fb13 	bl	12d1c <__multadd>
   176f6:	3701      	adds	r7, #1
   176f8:	4605      	mov	r5, r0
   176fa:	4651      	mov	r1, sl
   176fc:	4628      	mov	r0, r5
   176fe:	f7ff fc7b 	bl	16ff8 <quorem>
   17702:	45b9      	cmp	r9, r7
   17704:	f100 0030 	add.w	r0, r0, #48	; 0x30
   17708:	f808 0b01 	strb.w	r0, [r8], #1
   1770c:	dced      	bgt.n	176ea <_dtoa_r+0x5ca>
   1770e:	f1b9 0f00 	cmp.w	r9, #0
   17712:	9a00      	ldr	r2, [sp, #0]
   17714:	bfcc      	ite	gt
   17716:	46cb      	movgt	fp, r9
   17718:	f04f 0b01 	movle.w	fp, #1
   1771c:	4603      	mov	r3, r0
   1771e:	4493      	add	fp, r2
   17720:	2700      	movs	r7, #0
   17722:	4629      	mov	r1, r5
   17724:	2201      	movs	r2, #1
   17726:	4620      	mov	r0, r4
   17728:	9301      	str	r3, [sp, #4]
   1772a:	f7fb fd2d 	bl	13188 <__lshift>
   1772e:	4651      	mov	r1, sl
   17730:	4605      	mov	r5, r0
   17732:	f7fb fda1 	bl	13278 <__mcmp>
   17736:	2800      	cmp	r0, #0
   17738:	f340 81af 	ble.w	17a9a <_dtoa_r+0x97a>
   1773c:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   17740:	9a00      	ldr	r2, [sp, #0]
   17742:	f10b 3bff 	add.w	fp, fp, #4294967295
   17746:	e004      	b.n	17752 <_dtoa_r+0x632>
   17748:	455a      	cmp	r2, fp
   1774a:	f000 81b1 	beq.w	17ab0 <_dtoa_r+0x990>
   1774e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   17752:	2b39      	cmp	r3, #57	; 0x39
   17754:	f10b 0901 	add.w	r9, fp, #1
   17758:	d0f6      	beq.n	17748 <_dtoa_r+0x628>
   1775a:	3301      	adds	r3, #1
   1775c:	f88b 3000 	strb.w	r3, [fp]
   17760:	4651      	mov	r1, sl
   17762:	4620      	mov	r0, r4
   17764:	f7fb fad0 	bl	12d08 <_Bfree>
   17768:	b156      	cbz	r6, 17780 <_dtoa_r+0x660>
   1776a:	b12f      	cbz	r7, 17778 <_dtoa_r+0x658>
   1776c:	42b7      	cmp	r7, r6
   1776e:	d003      	beq.n	17778 <_dtoa_r+0x658>
   17770:	4639      	mov	r1, r7
   17772:	4620      	mov	r0, r4
   17774:	f7fb fac8 	bl	12d08 <_Bfree>
   17778:	4631      	mov	r1, r6
   1777a:	4620      	mov	r0, r4
   1777c:	f7fb fac4 	bl	12d08 <_Bfree>
   17780:	4629      	mov	r1, r5
   17782:	4620      	mov	r0, r4
   17784:	f7fb fac0 	bl	12d08 <_Bfree>
   17788:	2300      	movs	r3, #0
   1778a:	f889 3000 	strb.w	r3, [r9]
   1778e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   17792:	601a      	str	r2, [r3, #0]
   17794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17796:	2b00      	cmp	r3, #0
   17798:	f43f acfe 	beq.w	17198 <_dtoa_r+0x78>
   1779c:	9800      	ldr	r0, [sp, #0]
   1779e:	f8c3 9000 	str.w	r9, [r3]
   177a2:	b00f      	add	sp, #60	; 0x3c
   177a4:	ecbd 8b02 	vpop	{d8}
   177a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ac:	f1c0 001c 	rsb	r0, r0, #28
   177b0:	9b06      	ldr	r3, [sp, #24]
   177b2:	4403      	add	r3, r0
   177b4:	9306      	str	r3, [sp, #24]
   177b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   177b8:	4403      	add	r3, r0
   177ba:	9309      	str	r3, [sp, #36]	; 0x24
   177bc:	4480      	add	r8, r0
   177be:	e76f      	b.n	176a0 <_dtoa_r+0x580>
   177c0:	f1c2 0220 	rsb	r2, r2, #32
   177c4:	fa06 f202 	lsl.w	r2, r6, r2
   177c8:	ee07 2a10 	vmov	s14, r2
   177cc:	e509      	b.n	171e2 <_dtoa_r+0xc2>
   177ce:	2601      	movs	r6, #1
   177d0:	e563      	b.n	1729a <_dtoa_r+0x17a>
   177d2:	4601      	mov	r1, r0
   177d4:	463a      	mov	r2, r7
   177d6:	4620      	mov	r0, r4
   177d8:	f7fb fc76 	bl	130c8 <__pow5mult>
   177dc:	9b01      	ldr	r3, [sp, #4]
   177de:	2b01      	cmp	r3, #1
   177e0:	4682      	mov	sl, r0
   177e2:	f340 81c5 	ble.w	17b70 <_dtoa_r+0xa50>
   177e6:	2300      	movs	r3, #0
   177e8:	9308      	str	r3, [sp, #32]
   177ea:	f8da 2010 	ldr.w	r2, [sl, #16]
   177ee:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   177f2:	6910      	ldr	r0, [r2, #16]
   177f4:	f7fb fb3c 	bl	12e70 <__hi0bits>
   177f8:	f1c0 0020 	rsb	r0, r0, #32
   177fc:	e744      	b.n	17688 <_dtoa_r+0x568>
   177fe:	bf00      	nop
   17800:	20000328 	.word	0x20000328
   17804:	20007ef8 	.word	0x20007ef8
   17808:	4631      	mov	r1, r6
   1780a:	2300      	movs	r3, #0
   1780c:	220a      	movs	r2, #10
   1780e:	4620      	mov	r0, r4
   17810:	f7fb fa84 	bl	12d1c <__multadd>
   17814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17816:	2b00      	cmp	r3, #0
   17818:	4606      	mov	r6, r0
   1781a:	f340 82ce 	ble.w	17dba <_dtoa_r+0xc9a>
   1781e:	9704      	str	r7, [sp, #16]
   17820:	4699      	mov	r9, r3
   17822:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17824:	2b00      	cmp	r3, #0
   17826:	dd05      	ble.n	17834 <_dtoa_r+0x714>
   17828:	4631      	mov	r1, r6
   1782a:	461a      	mov	r2, r3
   1782c:	4620      	mov	r0, r4
   1782e:	f7fb fcab 	bl	13188 <__lshift>
   17832:	4606      	mov	r6, r0
   17834:	9b08      	ldr	r3, [sp, #32]
   17836:	2b00      	cmp	r3, #0
   17838:	f040 81eb 	bne.w	17c12 <_dtoa_r+0xaf2>
   1783c:	46b0      	mov	r8, r6
   1783e:	9b02      	ldr	r3, [sp, #8]
   17840:	9f00      	ldr	r7, [sp, #0]
   17842:	f003 0201 	and.w	r2, r3, #1
   17846:	1e7b      	subs	r3, r7, #1
   17848:	444b      	add	r3, r9
   1784a:	9308      	str	r3, [sp, #32]
   1784c:	9b01      	ldr	r3, [sp, #4]
   1784e:	920a      	str	r2, [sp, #40]	; 0x28
   17850:	4313      	orrs	r3, r2
   17852:	9309      	str	r3, [sp, #36]	; 0x24
   17854:	4651      	mov	r1, sl
   17856:	4628      	mov	r0, r5
   17858:	f7ff fbce 	bl	16ff8 <quorem>
   1785c:	4631      	mov	r1, r6
   1785e:	4683      	mov	fp, r0
   17860:	4628      	mov	r0, r5
   17862:	f7fb fd09 	bl	13278 <__mcmp>
   17866:	4642      	mov	r2, r8
   17868:	4651      	mov	r1, sl
   1786a:	4681      	mov	r9, r0
   1786c:	4620      	mov	r0, r4
   1786e:	f7fb fd25 	bl	132bc <__mdiff>
   17872:	68c2      	ldr	r2, [r0, #12]
   17874:	4601      	mov	r1, r0
   17876:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1787a:	2a00      	cmp	r2, #0
   1787c:	d142      	bne.n	17904 <_dtoa_r+0x7e4>
   1787e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   17882:	4628      	mov	r0, r5
   17884:	f7fb fcf8 	bl	13278 <__mcmp>
   17888:	9906      	ldr	r1, [sp, #24]
   1788a:	9002      	str	r0, [sp, #8]
   1788c:	4620      	mov	r0, r4
   1788e:	f7fb fa3b 	bl	12d08 <_Bfree>
   17892:	9a02      	ldr	r2, [sp, #8]
   17894:	9b07      	ldr	r3, [sp, #28]
   17896:	b91a      	cbnz	r2, 178a0 <_dtoa_r+0x780>
   17898:	9909      	ldr	r1, [sp, #36]	; 0x24
   1789a:	2900      	cmp	r1, #0
   1789c:	f000 827e 	beq.w	17d9c <_dtoa_r+0xc7c>
   178a0:	f1b9 0f00 	cmp.w	r9, #0
   178a4:	f2c0 8183 	blt.w	17bae <_dtoa_r+0xa8e>
   178a8:	9901      	ldr	r1, [sp, #4]
   178aa:	ea49 0901 	orr.w	r9, r9, r1
   178ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   178b0:	ea51 0909 	orrs.w	r9, r1, r9
   178b4:	f000 817b 	beq.w	17bae <_dtoa_r+0xa8e>
   178b8:	2a00      	cmp	r2, #0
   178ba:	f300 81c6 	bgt.w	17c4a <_dtoa_r+0xb2a>
   178be:	9a08      	ldr	r2, [sp, #32]
   178c0:	703b      	strb	r3, [r7, #0]
   178c2:	f107 0901 	add.w	r9, r7, #1
   178c6:	4297      	cmp	r7, r2
   178c8:	46cb      	mov	fp, r9
   178ca:	f000 81c4 	beq.w	17c56 <_dtoa_r+0xb36>
   178ce:	4629      	mov	r1, r5
   178d0:	2300      	movs	r3, #0
   178d2:	220a      	movs	r2, #10
   178d4:	4620      	mov	r0, r4
   178d6:	f7fb fa21 	bl	12d1c <__multadd>
   178da:	4546      	cmp	r6, r8
   178dc:	4605      	mov	r5, r0
   178de:	4631      	mov	r1, r6
   178e0:	f04f 0300 	mov.w	r3, #0
   178e4:	f04f 020a 	mov.w	r2, #10
   178e8:	4620      	mov	r0, r4
   178ea:	d012      	beq.n	17912 <_dtoa_r+0x7f2>
   178ec:	f7fb fa16 	bl	12d1c <__multadd>
   178f0:	4641      	mov	r1, r8
   178f2:	4606      	mov	r6, r0
   178f4:	2300      	movs	r3, #0
   178f6:	220a      	movs	r2, #10
   178f8:	4620      	mov	r0, r4
   178fa:	f7fb fa0f 	bl	12d1c <__multadd>
   178fe:	464f      	mov	r7, r9
   17900:	4680      	mov	r8, r0
   17902:	e7a7      	b.n	17854 <_dtoa_r+0x734>
   17904:	4620      	mov	r0, r4
   17906:	9302      	str	r3, [sp, #8]
   17908:	f7fb f9fe 	bl	12d08 <_Bfree>
   1790c:	9b02      	ldr	r3, [sp, #8]
   1790e:	2201      	movs	r2, #1
   17910:	e7c6      	b.n	178a0 <_dtoa_r+0x780>
   17912:	f7fb fa03 	bl	12d1c <__multadd>
   17916:	464f      	mov	r7, r9
   17918:	4606      	mov	r6, r0
   1791a:	4680      	mov	r8, r0
   1791c:	e79a      	b.n	17854 <_dtoa_r+0x734>
   1791e:	9b01      	ldr	r3, [sp, #4]
   17920:	2b02      	cmp	r3, #2
   17922:	dc71      	bgt.n	17a08 <_dtoa_r+0x8e8>
   17924:	9b07      	ldr	r3, [sp, #28]
   17926:	2b00      	cmp	r3, #0
   17928:	f47f af7b 	bne.w	17822 <_dtoa_r+0x702>
   1792c:	9b04      	ldr	r3, [sp, #16]
   1792e:	4651      	mov	r1, sl
   17930:	3301      	adds	r3, #1
   17932:	4628      	mov	r0, r5
   17934:	9304      	str	r3, [sp, #16]
   17936:	f7ff fb5f 	bl	16ff8 <quorem>
   1793a:	f8dd b000 	ldr.w	fp, [sp]
   1793e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   17942:	f80b 3b01 	strb.w	r3, [fp], #1
   17946:	2700      	movs	r7, #0
   17948:	e6eb      	b.n	17722 <_dtoa_r+0x602>
   1794a:	4651      	mov	r1, sl
   1794c:	4628      	mov	r0, r5
   1794e:	f7fb fc93 	bl	13278 <__mcmp>
   17952:	2800      	cmp	r0, #0
   17954:	f6bf aeba 	bge.w	176cc <_dtoa_r+0x5ac>
   17958:	4629      	mov	r1, r5
   1795a:	2300      	movs	r3, #0
   1795c:	220a      	movs	r2, #10
   1795e:	4620      	mov	r0, r4
   17960:	f7fb f9dc 	bl	12d1c <__multadd>
   17964:	9b04      	ldr	r3, [sp, #16]
   17966:	1e5f      	subs	r7, r3, #1
   17968:	9b07      	ldr	r3, [sp, #28]
   1796a:	4605      	mov	r5, r0
   1796c:	2b00      	cmp	r3, #0
   1796e:	f47f af4b 	bne.w	17808 <_dtoa_r+0x6e8>
   17972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17974:	2b00      	cmp	r3, #0
   17976:	f340 8218 	ble.w	17daa <_dtoa_r+0xc8a>
   1797a:	4699      	mov	r9, r3
   1797c:	e6b1      	b.n	176e2 <_dtoa_r+0x5c2>
   1797e:	4bbc      	ldr	r3, [pc, #752]	; (17c70 <_dtoa_r+0xb50>)
   17980:	9300      	str	r3, [sp, #0]
   17982:	3303      	adds	r3, #3
   17984:	e4a4      	b.n	172d0 <_dtoa_r+0x1b0>
   17986:	201c      	movs	r0, #28
   17988:	e712      	b.n	177b0 <_dtoa_r+0x690>
   1798a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1798e:	2800      	cmp	r0, #0
   17990:	f47f ae74 	bne.w	1767c <_dtoa_r+0x55c>
   17994:	f3c1 0213 	ubfx	r2, r1, #0, #20
   17998:	2a00      	cmp	r2, #0
   1799a:	f000 80f4 	beq.w	17b86 <_dtoa_r+0xa66>
   1799e:	9b02      	ldr	r3, [sp, #8]
   179a0:	9308      	str	r3, [sp, #32]
   179a2:	e66d      	b.n	17680 <_dtoa_r+0x560>
   179a4:	2301      	movs	r3, #1
   179a6:	9307      	str	r3, [sp, #28]
   179a8:	9b04      	ldr	r3, [sp, #16]
   179aa:	445b      	add	r3, fp
   179ac:	f103 0901 	add.w	r9, r3, #1
   179b0:	f1b9 0f01 	cmp.w	r9, #1
   179b4:	46cc      	mov	ip, r9
   179b6:	930b      	str	r3, [sp, #44]	; 0x2c
   179b8:	bfb8      	it	lt
   179ba:	f04f 0c01 	movlt.w	ip, #1
   179be:	2100      	movs	r1, #0
   179c0:	f1bc 0f17 	cmp.w	ip, #23
   179c4:	63e1      	str	r1, [r4, #60]	; 0x3c
   179c6:	f77f acbc 	ble.w	17342 <_dtoa_r+0x222>
   179ca:	2001      	movs	r0, #1
   179cc:	2204      	movs	r2, #4
   179ce:	0052      	lsls	r2, r2, #1
   179d0:	f102 0314 	add.w	r3, r2, #20
   179d4:	4563      	cmp	r3, ip
   179d6:	4601      	mov	r1, r0
   179d8:	f100 0001 	add.w	r0, r0, #1
   179dc:	d9f7      	bls.n	179ce <_dtoa_r+0x8ae>
   179de:	63e1      	str	r1, [r4, #60]	; 0x3c
   179e0:	e4af      	b.n	17342 <_dtoa_r+0x222>
   179e2:	2301      	movs	r3, #1
   179e4:	9307      	str	r3, [sp, #28]
   179e6:	f1bb 0f00 	cmp.w	fp, #0
   179ea:	dd52      	ble.n	17a92 <_dtoa_r+0x972>
   179ec:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   179f0:	46d9      	mov	r9, fp
   179f2:	46dc      	mov	ip, fp
   179f4:	e7e3      	b.n	179be <_dtoa_r+0x89e>
   179f6:	2300      	movs	r3, #0
   179f8:	9307      	str	r3, [sp, #28]
   179fa:	e7d5      	b.n	179a8 <_dtoa_r+0x888>
   179fc:	2300      	movs	r3, #0
   179fe:	9307      	str	r3, [sp, #28]
   17a00:	e7f1      	b.n	179e6 <_dtoa_r+0x8c6>
   17a02:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   17a06:	9704      	str	r7, [sp, #16]
   17a08:	f1b9 0f00 	cmp.w	r9, #0
   17a0c:	f47f ada1 	bne.w	17552 <_dtoa_r+0x432>
   17a10:	4651      	mov	r1, sl
   17a12:	464b      	mov	r3, r9
   17a14:	2205      	movs	r2, #5
   17a16:	4620      	mov	r0, r4
   17a18:	f7fb f980 	bl	12d1c <__multadd>
   17a1c:	4601      	mov	r1, r0
   17a1e:	4682      	mov	sl, r0
   17a20:	4628      	mov	r0, r5
   17a22:	f7fb fc29 	bl	13278 <__mcmp>
   17a26:	2800      	cmp	r0, #0
   17a28:	f77f ad93 	ble.w	17552 <_dtoa_r+0x432>
   17a2c:	9b04      	ldr	r3, [sp, #16]
   17a2e:	f103 0b01 	add.w	fp, r3, #1
   17a32:	9b00      	ldr	r3, [sp, #0]
   17a34:	2231      	movs	r2, #49	; 0x31
   17a36:	4698      	mov	r8, r3
   17a38:	f803 2b01 	strb.w	r2, [r3], #1
   17a3c:	9300      	str	r3, [sp, #0]
   17a3e:	4651      	mov	r1, sl
   17a40:	4620      	mov	r0, r4
   17a42:	f7fb f961 	bl	12d08 <_Bfree>
   17a46:	f10b 0301 	add.w	r3, fp, #1
   17a4a:	f8dd 9000 	ldr.w	r9, [sp]
   17a4e:	9304      	str	r3, [sp, #16]
   17a50:	f8cd 8000 	str.w	r8, [sp]
   17a54:	2e00      	cmp	r6, #0
   17a56:	f47f ae8f 	bne.w	17778 <_dtoa_r+0x658>
   17a5a:	e691      	b.n	17780 <_dtoa_r+0x660>
   17a5c:	eba3 0a0a 	sub.w	sl, r3, sl
   17a60:	e5c5      	b.n	175ee <_dtoa_r+0x4ce>
   17a62:	4631      	mov	r1, r6
   17a64:	4652      	mov	r2, sl
   17a66:	4620      	mov	r0, r4
   17a68:	f7fb fb2e 	bl	130c8 <__pow5mult>
   17a6c:	462a      	mov	r2, r5
   17a6e:	4601      	mov	r1, r0
   17a70:	4606      	mov	r6, r0
   17a72:	4620      	mov	r0, r4
   17a74:	f7fb fa7a 	bl	12f6c <__multiply>
   17a78:	4629      	mov	r1, r5
   17a7a:	4605      	mov	r5, r0
   17a7c:	4620      	mov	r0, r4
   17a7e:	f7fb f943 	bl	12d08 <_Bfree>
   17a82:	e5ea      	b.n	1765a <_dtoa_r+0x53a>
   17a84:	2002      	movs	r0, #2
   17a86:	eeb0 5b48 	vmov.f64	d5, d8
   17a8a:	e481      	b.n	17390 <_dtoa_r+0x270>
   17a8c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   17a90:	e68e      	b.n	177b0 <_dtoa_r+0x690>
   17a92:	f04f 0b01 	mov.w	fp, #1
   17a96:	46d9      	mov	r9, fp
   17a98:	e44f      	b.n	1733a <_dtoa_r+0x21a>
   17a9a:	d103      	bne.n	17aa4 <_dtoa_r+0x984>
   17a9c:	9b01      	ldr	r3, [sp, #4]
   17a9e:	07db      	lsls	r3, r3, #31
   17aa0:	f53f ae4c 	bmi.w	1773c <_dtoa_r+0x61c>
   17aa4:	46d9      	mov	r9, fp
   17aa6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   17aaa:	2b30      	cmp	r3, #48	; 0x30
   17aac:	d0fa      	beq.n	17aa4 <_dtoa_r+0x984>
   17aae:	e657      	b.n	17760 <_dtoa_r+0x640>
   17ab0:	9b04      	ldr	r3, [sp, #16]
   17ab2:	9a00      	ldr	r2, [sp, #0]
   17ab4:	3301      	adds	r3, #1
   17ab6:	9304      	str	r3, [sp, #16]
   17ab8:	2331      	movs	r3, #49	; 0x31
   17aba:	7013      	strb	r3, [r2, #0]
   17abc:	e650      	b.n	17760 <_dtoa_r+0x640>
   17abe:	f1ba 0f00 	cmp.w	sl, #0
   17ac2:	f000 8123 	beq.w	17d0c <_dtoa_r+0xbec>
   17ac6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   17aca:	9b06      	ldr	r3, [sp, #24]
   17acc:	9309      	str	r3, [sp, #36]	; 0x24
   17ace:	4413      	add	r3, r2
   17ad0:	f8dd a020 	ldr.w	sl, [sp, #32]
   17ad4:	9306      	str	r3, [sp, #24]
   17ad6:	4490      	add	r8, r2
   17ad8:	e592      	b.n	17600 <_dtoa_r+0x4e0>
   17ada:	ee07 0a90 	vmov	s15, r0
   17ade:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   17ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   17ae6:	eea6 5b07 	vfma.f64	d5, d6, d7
   17aea:	ee15 2a90 	vmov	r2, s11
   17aee:	ec51 0b15 	vmov	r0, r1, d5
   17af2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   17af6:	ec41 0b15 	vmov	d5, r0, r1
   17afa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   17afe:	ee36 7b47 	vsub.f64	d7, d6, d7
   17b02:	eeb4 7bc5 	vcmpe.f64	d7, d5
   17b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17b0a:	f300 8137 	bgt.w	17d7c <_dtoa_r+0xc5c>
   17b0e:	eeb1 5b45 	vneg.f64	d5, d5
   17b12:	eeb4 7bc5 	vcmpe.f64	d7, d5
   17b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17b1a:	f57f acfb 	bpl.w	17514 <_dtoa_r+0x3f4>
   17b1e:	f04f 0a00 	mov.w	sl, #0
   17b22:	4656      	mov	r6, sl
   17b24:	e515      	b.n	17552 <_dtoa_r+0x432>
   17b26:	f000 80f5 	beq.w	17d14 <_dtoa_r+0xbf4>
   17b2a:	9b04      	ldr	r3, [sp, #16]
   17b2c:	4951      	ldr	r1, [pc, #324]	; (17c74 <_dtoa_r+0xb54>)
   17b2e:	425a      	negs	r2, r3
   17b30:	f002 000f 	and.w	r0, r2, #15
   17b34:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   17b38:	ed91 6b00 	vldr	d6, [r1]
   17b3c:	1112      	asrs	r2, r2, #4
   17b3e:	ee28 6b06 	vmul.f64	d6, d8, d6
   17b42:	f000 8142 	beq.w	17dca <_dtoa_r+0xcaa>
   17b46:	eeb0 7b46 	vmov.f64	d7, d6
   17b4a:	494b      	ldr	r1, [pc, #300]	; (17c78 <_dtoa_r+0xb58>)
   17b4c:	2600      	movs	r6, #0
   17b4e:	2002      	movs	r0, #2
   17b50:	07d3      	lsls	r3, r2, #31
   17b52:	d505      	bpl.n	17b60 <_dtoa_r+0xa40>
   17b54:	ed91 5b00 	vldr	d5, [r1]
   17b58:	3001      	adds	r0, #1
   17b5a:	2601      	movs	r6, #1
   17b5c:	ee27 7b05 	vmul.f64	d7, d7, d5
   17b60:	1052      	asrs	r2, r2, #1
   17b62:	f101 0108 	add.w	r1, r1, #8
   17b66:	d1f3      	bne.n	17b50 <_dtoa_r+0xa30>
   17b68:	2e00      	cmp	r6, #0
   17b6a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   17b6e:	e41e      	b.n	173ae <_dtoa_r+0x28e>
   17b70:	9b02      	ldr	r3, [sp, #8]
   17b72:	2b00      	cmp	r3, #0
   17b74:	f47f ae37 	bne.w	177e6 <_dtoa_r+0x6c6>
   17b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   17b7c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   17b80:	2a00      	cmp	r2, #0
   17b82:	f040 8137 	bne.w	17df4 <_dtoa_r+0xcd4>
   17b86:	4a3d      	ldr	r2, [pc, #244]	; (17c7c <_dtoa_r+0xb5c>)
   17b88:	400a      	ands	r2, r1
   17b8a:	2a00      	cmp	r2, #0
   17b8c:	f000 80fa 	beq.w	17d84 <_dtoa_r+0xc64>
   17b90:	9b06      	ldr	r3, [sp, #24]
   17b92:	3301      	adds	r3, #1
   17b94:	9306      	str	r3, [sp, #24]
   17b96:	2301      	movs	r3, #1
   17b98:	f108 0801 	add.w	r8, r8, #1
   17b9c:	9308      	str	r3, [sp, #32]
   17b9e:	e56f      	b.n	17680 <_dtoa_r+0x560>
   17ba0:	4629      	mov	r1, r5
   17ba2:	9a08      	ldr	r2, [sp, #32]
   17ba4:	4620      	mov	r0, r4
   17ba6:	f7fb fa8f 	bl	130c8 <__pow5mult>
   17baa:	4605      	mov	r5, r0
   17bac:	e55a      	b.n	17664 <_dtoa_r+0x544>
   17bae:	2a00      	cmp	r2, #0
   17bb0:	dd12      	ble.n	17bd8 <_dtoa_r+0xab8>
   17bb2:	4629      	mov	r1, r5
   17bb4:	2201      	movs	r2, #1
   17bb6:	4620      	mov	r0, r4
   17bb8:	9301      	str	r3, [sp, #4]
   17bba:	f7fb fae5 	bl	13188 <__lshift>
   17bbe:	4651      	mov	r1, sl
   17bc0:	4605      	mov	r5, r0
   17bc2:	f7fb fb59 	bl	13278 <__mcmp>
   17bc6:	2800      	cmp	r0, #0
   17bc8:	9b01      	ldr	r3, [sp, #4]
   17bca:	f340 80e1 	ble.w	17d90 <_dtoa_r+0xc70>
   17bce:	2b39      	cmp	r3, #57	; 0x39
   17bd0:	f000 80ca 	beq.w	17d68 <_dtoa_r+0xc48>
   17bd4:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   17bd8:	46b9      	mov	r9, r7
   17bda:	f809 3b01 	strb.w	r3, [r9], #1
   17bde:	9b04      	ldr	r3, [sp, #16]
   17be0:	3301      	adds	r3, #1
   17be2:	4637      	mov	r7, r6
   17be4:	9304      	str	r3, [sp, #16]
   17be6:	4646      	mov	r6, r8
   17be8:	e5ba      	b.n	17760 <_dtoa_r+0x640>
   17bea:	ee38 8b08 	vadd.f64	d8, d8, d8
   17bee:	eeb4 8bc6 	vcmpe.f64	d8, d6
   17bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17bf6:	dc0a      	bgt.n	17c0e <_dtoa_r+0xaee>
   17bf8:	eeb4 8b46 	vcmp.f64	d8, d6
   17bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17c00:	f47f acdc 	bne.w	175bc <_dtoa_r+0x49c>
   17c04:	ee17 3a10 	vmov	r3, s14
   17c08:	07d8      	lsls	r0, r3, #31
   17c0a:	f57f acd7 	bpl.w	175bc <_dtoa_r+0x49c>
   17c0e:	9a00      	ldr	r2, [sp, #0]
   17c10:	e454      	b.n	174bc <_dtoa_r+0x39c>
   17c12:	6871      	ldr	r1, [r6, #4]
   17c14:	4620      	mov	r0, r4
   17c16:	f7fb f851 	bl	12cbc <_Balloc>
   17c1a:	4607      	mov	r7, r0
   17c1c:	2800      	cmp	r0, #0
   17c1e:	f000 80de 	beq.w	17dde <_dtoa_r+0xcbe>
   17c22:	6933      	ldr	r3, [r6, #16]
   17c24:	3302      	adds	r3, #2
   17c26:	009a      	lsls	r2, r3, #2
   17c28:	f106 010c 	add.w	r1, r6, #12
   17c2c:	300c      	adds	r0, #12
   17c2e:	f7f5 fd8d 	bl	d74c <memcpy>
   17c32:	4639      	mov	r1, r7
   17c34:	2201      	movs	r2, #1
   17c36:	4620      	mov	r0, r4
   17c38:	f7fb faa6 	bl	13188 <__lshift>
   17c3c:	4680      	mov	r8, r0
   17c3e:	e5fe      	b.n	1783e <_dtoa_r+0x71e>
   17c40:	9b06      	ldr	r3, [sp, #24]
   17c42:	eba3 0309 	sub.w	r3, r3, r9
   17c46:	9309      	str	r3, [sp, #36]	; 0x24
   17c48:	e4da      	b.n	17600 <_dtoa_r+0x4e0>
   17c4a:	2b39      	cmp	r3, #57	; 0x39
   17c4c:	f000 808c 	beq.w	17d68 <_dtoa_r+0xc48>
   17c50:	46b9      	mov	r9, r7
   17c52:	3301      	adds	r3, #1
   17c54:	e7c1      	b.n	17bda <_dtoa_r+0xaba>
   17c56:	9a04      	ldr	r2, [sp, #16]
   17c58:	3201      	adds	r2, #1
   17c5a:	4637      	mov	r7, r6
   17c5c:	9204      	str	r2, [sp, #16]
   17c5e:	4646      	mov	r6, r8
   17c60:	e55f      	b.n	17722 <_dtoa_r+0x602>
   17c62:	4629      	mov	r1, r5
   17c64:	4620      	mov	r0, r4
   17c66:	f7fb fa2f 	bl	130c8 <__pow5mult>
   17c6a:	4605      	mov	r5, r0
   17c6c:	e4fa      	b.n	17664 <_dtoa_r+0x544>
   17c6e:	bf00      	nop
   17c70:	20001090 	.word	0x20001090
   17c74:	20000328 	.word	0x20000328
   17c78:	20000300 	.word	0x20000300
   17c7c:	7ff00000 	.word	0x7ff00000
   17c80:	4b5e      	ldr	r3, [pc, #376]	; (17dfc <_dtoa_r+0xcdc>)
   17c82:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   17c86:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   17c8a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   17c8e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   17c92:	ee36 7b47 	vsub.f64	d7, d6, d7
   17c96:	ec41 0b16 	vmov	d6, r0, r1
   17c9a:	ee15 1a90 	vmov	r1, s11
   17c9e:	ee23 3b06 	vmul.f64	d3, d3, d6
   17ca2:	9800      	ldr	r0, [sp, #0]
   17ca4:	3130      	adds	r1, #48	; 0x30
   17ca6:	2a01      	cmp	r2, #1
   17ca8:	f800 1b01 	strb.w	r1, [r0], #1
   17cac:	f000 8083 	beq.w	17db6 <_dtoa_r+0xc96>
   17cb0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17cb4:	9b00      	ldr	r3, [sp, #0]
   17cb6:	1899      	adds	r1, r3, r2
   17cb8:	ee27 7b04 	vmul.f64	d7, d7, d4
   17cbc:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17cc0:	ee16 3a90 	vmov	r3, s13
   17cc4:	3330      	adds	r3, #48	; 0x30
   17cc6:	f800 3b01 	strb.w	r3, [r0], #1
   17cca:	4281      	cmp	r1, r0
   17ccc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   17cd0:	ee37 7b45 	vsub.f64	d7, d7, d5
   17cd4:	d1f0      	bne.n	17cb8 <_dtoa_r+0xb98>
   17cd6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   17cda:	ee33 5b06 	vadd.f64	d5, d3, d6
   17cde:	eeb4 5bc7 	vcmpe.f64	d5, d7
   17ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17ce6:	f53f abe3 	bmi.w	174b0 <_dtoa_r+0x390>
   17cea:	ee36 6b43 	vsub.f64	d6, d6, d3
   17cee:	eeb4 6bc7 	vcmpe.f64	d6, d7
   17cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17cf6:	f77f ac0d 	ble.w	17514 <_dtoa_r+0x3f4>
   17cfa:	4689      	mov	r9, r1
   17cfc:	3901      	subs	r1, #1
   17cfe:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   17d02:	2b30      	cmp	r3, #48	; 0x30
   17d04:	d0f9      	beq.n	17cfa <_dtoa_r+0xbda>
   17d06:	1c73      	adds	r3, r6, #1
   17d08:	9304      	str	r3, [sp, #16]
   17d0a:	e539      	b.n	17780 <_dtoa_r+0x660>
   17d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17d0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   17d12:	e6da      	b.n	17aca <_dtoa_r+0x9aa>
   17d14:	2002      	movs	r0, #2
   17d16:	eeb0 6b48 	vmov.f64	d6, d8
   17d1a:	f7ff bb48 	b.w	173ae <_dtoa_r+0x28e>
   17d1e:	f1b9 0f00 	cmp.w	r9, #0
   17d22:	f43f aeda 	beq.w	17ada <_dtoa_r+0x9ba>
   17d26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17d28:	2a00      	cmp	r2, #0
   17d2a:	f77f abf3 	ble.w	17514 <_dtoa_r+0x3f4>
   17d2e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17d32:	ee26 6b04 	vmul.f64	d6, d6, d4
   17d36:	3001      	adds	r0, #1
   17d38:	ee07 0a90 	vmov	s15, r0
   17d3c:	9b04      	ldr	r3, [sp, #16]
   17d3e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   17d42:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   17d46:	eea6 7b05 	vfma.f64	d7, d6, d5
   17d4a:	ee17 ca90 	vmov	ip, s15
   17d4e:	ec51 0b17 	vmov	r0, r1, d7
   17d52:	1e5e      	subs	r6, r3, #1
   17d54:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   17d58:	f7ff bb47 	b.w	173ea <_dtoa_r+0x2ca>
   17d5c:	9b04      	ldr	r3, [sp, #16]
   17d5e:	3301      	adds	r3, #1
   17d60:	9304      	str	r3, [sp, #16]
   17d62:	2331      	movs	r3, #49	; 0x31
   17d64:	f7ff bbb1 	b.w	174ca <_dtoa_r+0x3aa>
   17d68:	9b04      	ldr	r3, [sp, #16]
   17d6a:	46bb      	mov	fp, r7
   17d6c:	3301      	adds	r3, #1
   17d6e:	9304      	str	r3, [sp, #16]
   17d70:	2339      	movs	r3, #57	; 0x39
   17d72:	4637      	mov	r7, r6
   17d74:	f80b 3b01 	strb.w	r3, [fp], #1
   17d78:	4646      	mov	r6, r8
   17d7a:	e4e1      	b.n	17740 <_dtoa_r+0x620>
   17d7c:	f04f 0a00 	mov.w	sl, #0
   17d80:	4656      	mov	r6, sl
   17d82:	e653      	b.n	17a2c <_dtoa_r+0x90c>
   17d84:	9208      	str	r2, [sp, #32]
   17d86:	e47b      	b.n	17680 <_dtoa_r+0x560>
   17d88:	1c73      	adds	r3, r6, #1
   17d8a:	9304      	str	r3, [sp, #16]
   17d8c:	4689      	mov	r9, r1
   17d8e:	e4f7      	b.n	17780 <_dtoa_r+0x660>
   17d90:	f47f af22 	bne.w	17bd8 <_dtoa_r+0xab8>
   17d94:	07da      	lsls	r2, r3, #31
   17d96:	f57f af1f 	bpl.w	17bd8 <_dtoa_r+0xab8>
   17d9a:	e718      	b.n	17bce <_dtoa_r+0xaae>
   17d9c:	2b39      	cmp	r3, #57	; 0x39
   17d9e:	d0e3      	beq.n	17d68 <_dtoa_r+0xc48>
   17da0:	f1b9 0f00 	cmp.w	r9, #0
   17da4:	f73f af16 	bgt.w	17bd4 <_dtoa_r+0xab4>
   17da8:	e716      	b.n	17bd8 <_dtoa_r+0xab8>
   17daa:	9b01      	ldr	r3, [sp, #4]
   17dac:	2b02      	cmp	r3, #2
   17dae:	f73f ae28 	bgt.w	17a02 <_dtoa_r+0x8e2>
   17db2:	9704      	str	r7, [sp, #16]
   17db4:	e5ba      	b.n	1792c <_dtoa_r+0x80c>
   17db6:	4601      	mov	r1, r0
   17db8:	e78d      	b.n	17cd6 <_dtoa_r+0xbb6>
   17dba:	9b01      	ldr	r3, [sp, #4]
   17dbc:	2b02      	cmp	r3, #2
   17dbe:	f73f ae20 	bgt.w	17a02 <_dtoa_r+0x8e2>
   17dc2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   17dc6:	9704      	str	r7, [sp, #16]
   17dc8:	e52b      	b.n	17822 <_dtoa_r+0x702>
   17dca:	2002      	movs	r0, #2
   17dcc:	f7ff baef 	b.w	173ae <_dtoa_r+0x28e>
   17dd0:	4b0b      	ldr	r3, [pc, #44]	; (17e00 <_dtoa_r+0xce0>)
   17dd2:	480c      	ldr	r0, [pc, #48]	; (17e04 <_dtoa_r+0xce4>)
   17dd4:	2200      	movs	r2, #0
   17dd6:	f240 11af 	movw	r1, #431	; 0x1af
   17dda:	f7ff f8b1 	bl	16f40 <__assert_func>
   17dde:	4b08      	ldr	r3, [pc, #32]	; (17e00 <_dtoa_r+0xce0>)
   17de0:	4808      	ldr	r0, [pc, #32]	; (17e04 <_dtoa_r+0xce4>)
   17de2:	463a      	mov	r2, r7
   17de4:	f240 21ef 	movw	r1, #751	; 0x2ef
   17de8:	f7ff f8aa 	bl	16f40 <__assert_func>
   17dec:	4b06      	ldr	r3, [pc, #24]	; (17e08 <_dtoa_r+0xce8>)
   17dee:	9300      	str	r3, [sp, #0]
   17df0:	f7ff b9d2 	b.w	17198 <_dtoa_r+0x78>
   17df4:	9b02      	ldr	r3, [sp, #8]
   17df6:	9308      	str	r3, [sp, #32]
   17df8:	e4f7      	b.n	177ea <_dtoa_r+0x6ca>
   17dfa:	bf00      	nop
   17dfc:	20000328 	.word	0x20000328
   17e00:	20000da4 	.word	0x20000da4
   17e04:	20001094 	.word	0x20001094
   17e08:	20001084 	.word	0x20001084

00017e0c <_strtoul_l.constprop.0>:
   17e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e10:	4607      	mov	r7, r0
   17e12:	484c      	ldr	r0, [pc, #304]	; (17f44 <_strtoul_l.constprop.0+0x138>)
   17e14:	460e      	mov	r6, r1
   17e16:	4635      	mov	r5, r6
   17e18:	f816 eb01 	ldrb.w	lr, [r6], #1
   17e1c:	f810 c00e 	ldrb.w	ip, [r0, lr]
   17e20:	f01c 0c08 	ands.w	ip, ip, #8
   17e24:	d1f7      	bne.n	17e16 <_strtoul_l.constprop.0+0xa>
   17e26:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   17e2a:	d05a      	beq.n	17ee2 <_strtoul_l.constprop.0+0xd6>
   17e2c:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   17e30:	bf03      	ittte	eq
   17e32:	f896 e000 	ldrbeq.w	lr, [r6]
   17e36:	4664      	moveq	r4, ip
   17e38:	1cae      	addeq	r6, r5, #2
   17e3a:	4664      	movne	r4, ip
   17e3c:	b15b      	cbz	r3, 17e56 <_strtoul_l.constprop.0+0x4a>
   17e3e:	2b10      	cmp	r3, #16
   17e40:	d054      	beq.n	17eec <_strtoul_l.constprop.0+0xe0>
   17e42:	f04f 38ff 	mov.w	r8, #4294967295
   17e46:	fbb8 f8f3 	udiv	r8, r8, r3
   17e4a:	fb03 fa08 	mul.w	sl, r3, r8
   17e4e:	ea6f 0a0a 	mvn.w	sl, sl
   17e52:	4699      	mov	r9, r3
   17e54:	e008      	b.n	17e68 <_strtoul_l.constprop.0+0x5c>
   17e56:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   17e5a:	d05a      	beq.n	17f12 <_strtoul_l.constprop.0+0x106>
   17e5c:	230a      	movs	r3, #10
   17e5e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 17f48 <_strtoul_l.constprop.0+0x13c>
   17e62:	f04f 0a05 	mov.w	sl, #5
   17e66:	4699      	mov	r9, r3
   17e68:	2500      	movs	r5, #0
   17e6a:	4628      	mov	r0, r5
   17e6c:	e005      	b.n	17e7a <_strtoul_l.constprop.0+0x6e>
   17e6e:	d02c      	beq.n	17eca <_strtoul_l.constprop.0+0xbe>
   17e70:	fb09 c000 	mla	r0, r9, r0, ip
   17e74:	2501      	movs	r5, #1
   17e76:	f816 eb01 	ldrb.w	lr, [r6], #1
   17e7a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   17e7e:	f1bc 0f09 	cmp.w	ip, #9
   17e82:	d906      	bls.n	17e92 <_strtoul_l.constprop.0+0x86>
   17e84:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   17e88:	f1bc 0f19 	cmp.w	ip, #25
   17e8c:	d80b      	bhi.n	17ea6 <_strtoul_l.constprop.0+0x9a>
   17e8e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   17e92:	4563      	cmp	r3, ip
   17e94:	dd10      	ble.n	17eb8 <_strtoul_l.constprop.0+0xac>
   17e96:	f1b5 3fff 	cmp.w	r5, #4294967295
   17e9a:	d0ec      	beq.n	17e76 <_strtoul_l.constprop.0+0x6a>
   17e9c:	4540      	cmp	r0, r8
   17e9e:	d9e6      	bls.n	17e6e <_strtoul_l.constprop.0+0x62>
   17ea0:	f04f 35ff 	mov.w	r5, #4294967295
   17ea4:	e7e7      	b.n	17e76 <_strtoul_l.constprop.0+0x6a>
   17ea6:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   17eaa:	f1bc 0f19 	cmp.w	ip, #25
   17eae:	d803      	bhi.n	17eb8 <_strtoul_l.constprop.0+0xac>
   17eb0:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   17eb4:	4563      	cmp	r3, ip
   17eb6:	dcee      	bgt.n	17e96 <_strtoul_l.constprop.0+0x8a>
   17eb8:	1c6b      	adds	r3, r5, #1
   17eba:	d00b      	beq.n	17ed4 <_strtoul_l.constprop.0+0xc8>
   17ebc:	b104      	cbz	r4, 17ec0 <_strtoul_l.constprop.0+0xb4>
   17ebe:	4240      	negs	r0, r0
   17ec0:	b10a      	cbz	r2, 17ec6 <_strtoul_l.constprop.0+0xba>
   17ec2:	b965      	cbnz	r5, 17ede <_strtoul_l.constprop.0+0xd2>
   17ec4:	6011      	str	r1, [r2, #0]
   17ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17eca:	45d4      	cmp	ip, sl
   17ecc:	ddd0      	ble.n	17e70 <_strtoul_l.constprop.0+0x64>
   17ece:	f04f 35ff 	mov.w	r5, #4294967295
   17ed2:	e7d0      	b.n	17e76 <_strtoul_l.constprop.0+0x6a>
   17ed4:	2322      	movs	r3, #34	; 0x22
   17ed6:	603b      	str	r3, [r7, #0]
   17ed8:	4628      	mov	r0, r5
   17eda:	2a00      	cmp	r2, #0
   17edc:	d0f3      	beq.n	17ec6 <_strtoul_l.constprop.0+0xba>
   17ede:	1e71      	subs	r1, r6, #1
   17ee0:	e7f0      	b.n	17ec4 <_strtoul_l.constprop.0+0xb8>
   17ee2:	f896 e000 	ldrb.w	lr, [r6]
   17ee6:	2401      	movs	r4, #1
   17ee8:	1cae      	adds	r6, r5, #2
   17eea:	e7a7      	b.n	17e3c <_strtoul_l.constprop.0+0x30>
   17eec:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   17ef0:	d121      	bne.n	17f36 <_strtoul_l.constprop.0+0x12a>
   17ef2:	7830      	ldrb	r0, [r6, #0]
   17ef4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   17ef8:	2858      	cmp	r0, #88	; 0x58
   17efa:	d116      	bne.n	17f2a <_strtoul_l.constprop.0+0x11e>
   17efc:	f04f 0910 	mov.w	r9, #16
   17f00:	f896 e001 	ldrb.w	lr, [r6, #1]
   17f04:	f04f 0a0f 	mov.w	sl, #15
   17f08:	3602      	adds	r6, #2
   17f0a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   17f0e:	464b      	mov	r3, r9
   17f10:	e7aa      	b.n	17e68 <_strtoul_l.constprop.0+0x5c>
   17f12:	7833      	ldrb	r3, [r6, #0]
   17f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   17f18:	2b58      	cmp	r3, #88	; 0x58
   17f1a:	d0ef      	beq.n	17efc <_strtoul_l.constprop.0+0xf0>
   17f1c:	2308      	movs	r3, #8
   17f1e:	f04f 0a07 	mov.w	sl, #7
   17f22:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   17f26:	4699      	mov	r9, r3
   17f28:	e79e      	b.n	17e68 <_strtoul_l.constprop.0+0x5c>
   17f2a:	4699      	mov	r9, r3
   17f2c:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   17f30:	f04f 0a0f 	mov.w	sl, #15
   17f34:	e798      	b.n	17e68 <_strtoul_l.constprop.0+0x5c>
   17f36:	f04f 0a0f 	mov.w	sl, #15
   17f3a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   17f3e:	4699      	mov	r9, r3
   17f40:	e792      	b.n	17e68 <_strtoul_l.constprop.0+0x5c>
   17f42:	bf00      	nop
   17f44:	20000f81 	.word	0x20000f81
   17f48:	19999999 	.word	0x19999999

00017f4c <_strtoul_r>:
   17f4c:	f7ff bf5e 	b.w	17e0c <_strtoul_l.constprop.0>

00017f50 <_strtoll_l.constprop.0>:
   17f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f54:	b085      	sub	sp, #20
   17f56:	461f      	mov	r7, r3
   17f58:	4b57      	ldr	r3, [pc, #348]	; (180b8 <_strtoll_l.constprop.0+0x168>)
   17f5a:	9003      	str	r0, [sp, #12]
   17f5c:	468a      	mov	sl, r1
   17f5e:	9200      	str	r2, [sp, #0]
   17f60:	460d      	mov	r5, r1
   17f62:	462a      	mov	r2, r5
   17f64:	f815 4b01 	ldrb.w	r4, [r5], #1
   17f68:	5d1e      	ldrb	r6, [r3, r4]
   17f6a:	f016 0608 	ands.w	r6, r6, #8
   17f6e:	d1f8      	bne.n	17f62 <_strtoll_l.constprop.0+0x12>
   17f70:	2c2d      	cmp	r4, #45	; 0x2d
   17f72:	d075      	beq.n	18060 <_strtoll_l.constprop.0+0x110>
   17f74:	2c2b      	cmp	r4, #43	; 0x2b
   17f76:	bf05      	ittet	eq
   17f78:	782c      	ldrbeq	r4, [r5, #0]
   17f7a:	9602      	streq	r6, [sp, #8]
   17f7c:	9602      	strne	r6, [sp, #8]
   17f7e:	1c95      	addeq	r5, r2, #2
   17f80:	f04f 36ff 	mov.w	r6, #4294967295
   17f84:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   17f88:	b12f      	cbz	r7, 17f96 <_strtoll_l.constprop.0+0x46>
   17f8a:	2f10      	cmp	r7, #16
   17f8c:	d06f      	beq.n	1806e <_strtoll_l.constprop.0+0x11e>
   17f8e:	46b8      	mov	r8, r7
   17f90:	ea4f 79e7 	mov.w	r9, r7, asr #31
   17f94:	e005      	b.n	17fa2 <_strtoll_l.constprop.0+0x52>
   17f96:	2c30      	cmp	r4, #48	; 0x30
   17f98:	d074      	beq.n	18084 <_strtoll_l.constprop.0+0x134>
   17f9a:	f04f 080a 	mov.w	r8, #10
   17f9e:	46b9      	mov	r9, r7
   17fa0:	4647      	mov	r7, r8
   17fa2:	4642      	mov	r2, r8
   17fa4:	464b      	mov	r3, r9
   17fa6:	4630      	mov	r0, r6
   17fa8:	4659      	mov	r1, fp
   17faa:	f7f7 fb5f 	bl	f66c <__aeabi_uldivmod>
   17fae:	2300      	movs	r3, #0
   17fb0:	9201      	str	r2, [sp, #4]
   17fb2:	4684      	mov	ip, r0
   17fb4:	460a      	mov	r2, r1
   17fb6:	4618      	mov	r0, r3
   17fb8:	4619      	mov	r1, r3
   17fba:	e011      	b.n	17fe0 <_strtoll_l.constprop.0+0x90>
   17fbc:	428a      	cmp	r2, r1
   17fbe:	bf08      	it	eq
   17fc0:	4584      	cmpeq	ip, r0
   17fc2:	d03d      	beq.n	18040 <_strtoll_l.constprop.0+0xf0>
   17fc4:	fb00 f309 	mul.w	r3, r0, r9
   17fc8:	fb08 3301 	mla	r3, r8, r1, r3
   17fcc:	fba0 0108 	umull	r0, r1, r0, r8
   17fd0:	440b      	add	r3, r1
   17fd2:	eb1e 0000 	adds.w	r0, lr, r0
   17fd6:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   17fda:	2301      	movs	r3, #1
   17fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
   17fe0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   17fe4:	f1be 0f09 	cmp.w	lr, #9
   17fe8:	d906      	bls.n	17ff8 <_strtoll_l.constprop.0+0xa8>
   17fea:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   17fee:	f1be 0f19 	cmp.w	lr, #25
   17ff2:	d80c      	bhi.n	1800e <_strtoll_l.constprop.0+0xbe>
   17ff4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   17ff8:	4577      	cmp	r7, lr
   17ffa:	dd11      	ble.n	18020 <_strtoll_l.constprop.0+0xd0>
   17ffc:	1c5c      	adds	r4, r3, #1
   17ffe:	d0ed      	beq.n	17fdc <_strtoll_l.constprop.0+0x8c>
   18000:	4584      	cmp	ip, r0
   18002:	eb72 0301 	sbcs.w	r3, r2, r1
   18006:	d2d9      	bcs.n	17fbc <_strtoll_l.constprop.0+0x6c>
   18008:	f04f 33ff 	mov.w	r3, #4294967295
   1800c:	e7e6      	b.n	17fdc <_strtoll_l.constprop.0+0x8c>
   1800e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   18012:	f1be 0f19 	cmp.w	lr, #25
   18016:	d803      	bhi.n	18020 <_strtoll_l.constprop.0+0xd0>
   18018:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   1801c:	4577      	cmp	r7, lr
   1801e:	dced      	bgt.n	17ffc <_strtoll_l.constprop.0+0xac>
   18020:	1c5a      	adds	r2, r3, #1
   18022:	d013      	beq.n	1804c <_strtoll_l.constprop.0+0xfc>
   18024:	9a02      	ldr	r2, [sp, #8]
   18026:	b112      	cbz	r2, 1802e <_strtoll_l.constprop.0+0xde>
   18028:	4240      	negs	r0, r0
   1802a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1802e:	9a00      	ldr	r2, [sp, #0]
   18030:	b11a      	cbz	r2, 1803a <_strtoll_l.constprop.0+0xea>
   18032:	bba3      	cbnz	r3, 1809e <_strtoll_l.constprop.0+0x14e>
   18034:	9b00      	ldr	r3, [sp, #0]
   18036:	f8c3 a000 	str.w	sl, [r3]
   1803a:	b005      	add	sp, #20
   1803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18040:	9b01      	ldr	r3, [sp, #4]
   18042:	4573      	cmp	r3, lr
   18044:	dabe      	bge.n	17fc4 <_strtoll_l.constprop.0+0x74>
   18046:	f04f 33ff 	mov.w	r3, #4294967295
   1804a:	e7c7      	b.n	17fdc <_strtoll_l.constprop.0+0x8c>
   1804c:	9a03      	ldr	r2, [sp, #12]
   1804e:	2322      	movs	r3, #34	; 0x22
   18050:	6013      	str	r3, [r2, #0]
   18052:	9b00      	ldr	r3, [sp, #0]
   18054:	b333      	cbz	r3, 180a4 <_strtoll_l.constprop.0+0x154>
   18056:	f105 3aff 	add.w	sl, r5, #4294967295
   1805a:	4630      	mov	r0, r6
   1805c:	4659      	mov	r1, fp
   1805e:	e7e9      	b.n	18034 <_strtoll_l.constprop.0+0xe4>
   18060:	2301      	movs	r3, #1
   18062:	782c      	ldrb	r4, [r5, #0]
   18064:	9302      	str	r3, [sp, #8]
   18066:	1c95      	adds	r5, r2, #2
   18068:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   1806c:	e78c      	b.n	17f88 <_strtoll_l.constprop.0+0x38>
   1806e:	2c30      	cmp	r4, #48	; 0x30
   18070:	d104      	bne.n	1807c <_strtoll_l.constprop.0+0x12c>
   18072:	782b      	ldrb	r3, [r5, #0]
   18074:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18078:	2b58      	cmp	r3, #88	; 0x58
   1807a:	d008      	beq.n	1808e <_strtoll_l.constprop.0+0x13e>
   1807c:	46b8      	mov	r8, r7
   1807e:	f04f 0900 	mov.w	r9, #0
   18082:	e78e      	b.n	17fa2 <_strtoll_l.constprop.0+0x52>
   18084:	782b      	ldrb	r3, [r5, #0]
   18086:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1808a:	2b58      	cmp	r3, #88	; 0x58
   1808c:	d10f      	bne.n	180ae <_strtoll_l.constprop.0+0x15e>
   1808e:	f04f 0810 	mov.w	r8, #16
   18092:	786c      	ldrb	r4, [r5, #1]
   18094:	f04f 0900 	mov.w	r9, #0
   18098:	3502      	adds	r5, #2
   1809a:	4647      	mov	r7, r8
   1809c:	e781      	b.n	17fa2 <_strtoll_l.constprop.0+0x52>
   1809e:	4606      	mov	r6, r0
   180a0:	468b      	mov	fp, r1
   180a2:	e7d8      	b.n	18056 <_strtoll_l.constprop.0+0x106>
   180a4:	4630      	mov	r0, r6
   180a6:	4659      	mov	r1, fp
   180a8:	b005      	add	sp, #20
   180aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180ae:	f04f 0808 	mov.w	r8, #8
   180b2:	46b9      	mov	r9, r7
   180b4:	4647      	mov	r7, r8
   180b6:	e774      	b.n	17fa2 <_strtoll_l.constprop.0+0x52>
   180b8:	20000f81 	.word	0x20000f81

000180bc <_strtoll_r>:
   180bc:	f7ff bf48 	b.w	17f50 <_strtoll_l.constprop.0>

000180c0 <_strtoull_l.constprop.0>:
   180c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c4:	b085      	sub	sp, #20
   180c6:	468b      	mov	fp, r1
   180c8:	9201      	str	r2, [sp, #4]
   180ca:	4a62      	ldr	r2, [pc, #392]	; (18254 <_strtoull_l.constprop.0+0x194>)
   180cc:	9003      	str	r0, [sp, #12]
   180ce:	461e      	mov	r6, r3
   180d0:	460d      	mov	r5, r1
   180d2:	4629      	mov	r1, r5
   180d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   180d8:	5d13      	ldrb	r3, [r2, r4]
   180da:	f013 0308 	ands.w	r3, r3, #8
   180de:	d1f8      	bne.n	180d2 <_strtoull_l.constprop.0+0x12>
   180e0:	2c2d      	cmp	r4, #45	; 0x2d
   180e2:	f000 8082 	beq.w	181ea <_strtoull_l.constprop.0+0x12a>
   180e6:	2c2b      	cmp	r4, #43	; 0x2b
   180e8:	bf03      	ittte	eq
   180ea:	782c      	ldrbeq	r4, [r5, #0]
   180ec:	9302      	streq	r3, [sp, #8]
   180ee:	1c8d      	addeq	r5, r1, #2
   180f0:	9302      	strne	r3, [sp, #8]
   180f2:	b1be      	cbz	r6, 18124 <_strtoull_l.constprop.0+0x64>
   180f4:	2e10      	cmp	r6, #16
   180f6:	d07d      	beq.n	181f4 <_strtoull_l.constprop.0+0x134>
   180f8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   180fc:	4632      	mov	r2, r6
   180fe:	4653      	mov	r3, sl
   18100:	f04f 30ff 	mov.w	r0, #4294967295
   18104:	f04f 31ff 	mov.w	r1, #4294967295
   18108:	f7f7 fab0 	bl	f66c <__aeabi_uldivmod>
   1810c:	4632      	mov	r2, r6
   1810e:	4607      	mov	r7, r0
   18110:	4688      	mov	r8, r1
   18112:	4653      	mov	r3, sl
   18114:	f04f 30ff 	mov.w	r0, #4294967295
   18118:	f04f 31ff 	mov.w	r1, #4294967295
   1811c:	46b1      	mov	r9, r6
   1811e:	f7f7 faa5 	bl	f66c <__aeabi_uldivmod>
   18122:	e00a      	b.n	1813a <_strtoull_l.constprop.0+0x7a>
   18124:	2c30      	cmp	r4, #48	; 0x30
   18126:	d079      	beq.n	1821c <_strtoull_l.constprop.0+0x15c>
   18128:	f04f 090a 	mov.w	r9, #10
   1812c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 18258 <_strtoull_l.constprop.0+0x198>
   18130:	46b2      	mov	sl, r6
   18132:	2205      	movs	r2, #5
   18134:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   18138:	464e      	mov	r6, r9
   1813a:	f04f 0c00 	mov.w	ip, #0
   1813e:	4660      	mov	r0, ip
   18140:	4661      	mov	r1, ip
   18142:	e011      	b.n	18168 <_strtoull_l.constprop.0+0xa8>
   18144:	4541      	cmp	r1, r8
   18146:	bf08      	it	eq
   18148:	42b8      	cmpeq	r0, r7
   1814a:	d03e      	beq.n	181ca <_strtoull_l.constprop.0+0x10a>
   1814c:	fb00 f40a 	mul.w	r4, r0, sl
   18150:	fb09 4101 	mla	r1, r9, r1, r4
   18154:	fba0 0409 	umull	r0, r4, r0, r9
   18158:	4421      	add	r1, r4
   1815a:	1818      	adds	r0, r3, r0
   1815c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   18160:	f04f 0c01 	mov.w	ip, #1
   18164:	f815 4b01 	ldrb.w	r4, [r5], #1
   18168:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1816c:	2b09      	cmp	r3, #9
   1816e:	d905      	bls.n	1817c <_strtoull_l.constprop.0+0xbc>
   18170:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   18174:	2b19      	cmp	r3, #25
   18176:	d80d      	bhi.n	18194 <_strtoull_l.constprop.0+0xd4>
   18178:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   1817c:	429e      	cmp	r6, r3
   1817e:	dd11      	ble.n	181a4 <_strtoull_l.constprop.0+0xe4>
   18180:	f1bc 3fff 	cmp.w	ip, #4294967295
   18184:	d0ee      	beq.n	18164 <_strtoull_l.constprop.0+0xa4>
   18186:	4287      	cmp	r7, r0
   18188:	eb78 0401 	sbcs.w	r4, r8, r1
   1818c:	d2da      	bcs.n	18144 <_strtoull_l.constprop.0+0x84>
   1818e:	f04f 3cff 	mov.w	ip, #4294967295
   18192:	e7e7      	b.n	18164 <_strtoull_l.constprop.0+0xa4>
   18194:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18198:	2b19      	cmp	r3, #25
   1819a:	d803      	bhi.n	181a4 <_strtoull_l.constprop.0+0xe4>
   1819c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   181a0:	429e      	cmp	r6, r3
   181a2:	dced      	bgt.n	18180 <_strtoull_l.constprop.0+0xc0>
   181a4:	f1bc 3fff 	cmp.w	ip, #4294967295
   181a8:	d014      	beq.n	181d4 <_strtoull_l.constprop.0+0x114>
   181aa:	9b02      	ldr	r3, [sp, #8]
   181ac:	b113      	cbz	r3, 181b4 <_strtoull_l.constprop.0+0xf4>
   181ae:	4240      	negs	r0, r0
   181b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   181b4:	9b01      	ldr	r3, [sp, #4]
   181b6:	b12b      	cbz	r3, 181c4 <_strtoull_l.constprop.0+0x104>
   181b8:	f1bc 0f00 	cmp.w	ip, #0
   181bc:	d112      	bne.n	181e4 <_strtoull_l.constprop.0+0x124>
   181be:	9b01      	ldr	r3, [sp, #4]
   181c0:	f8c3 b000 	str.w	fp, [r3]
   181c4:	b005      	add	sp, #20
   181c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181ca:	4293      	cmp	r3, r2
   181cc:	ddbe      	ble.n	1814c <_strtoull_l.constprop.0+0x8c>
   181ce:	f04f 3cff 	mov.w	ip, #4294967295
   181d2:	e7c7      	b.n	18164 <_strtoull_l.constprop.0+0xa4>
   181d4:	9a03      	ldr	r2, [sp, #12]
   181d6:	2322      	movs	r3, #34	; 0x22
   181d8:	6013      	str	r3, [r2, #0]
   181da:	9b01      	ldr	r3, [sp, #4]
   181dc:	4660      	mov	r0, ip
   181de:	4661      	mov	r1, ip
   181e0:	2b00      	cmp	r3, #0
   181e2:	d0ef      	beq.n	181c4 <_strtoull_l.constprop.0+0x104>
   181e4:	f105 3bff 	add.w	fp, r5, #4294967295
   181e8:	e7e9      	b.n	181be <_strtoull_l.constprop.0+0xfe>
   181ea:	2301      	movs	r3, #1
   181ec:	782c      	ldrb	r4, [r5, #0]
   181ee:	9302      	str	r3, [sp, #8]
   181f0:	1c8d      	adds	r5, r1, #2
   181f2:	e77e      	b.n	180f2 <_strtoull_l.constprop.0+0x32>
   181f4:	2c30      	cmp	r4, #48	; 0x30
   181f6:	d123      	bne.n	18240 <_strtoull_l.constprop.0+0x180>
   181f8:	782b      	ldrb	r3, [r5, #0]
   181fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   181fe:	2b58      	cmp	r3, #88	; 0x58
   18200:	d11b      	bne.n	1823a <_strtoull_l.constprop.0+0x17a>
   18202:	f04f 0910 	mov.w	r9, #16
   18206:	786c      	ldrb	r4, [r5, #1]
   18208:	220f      	movs	r2, #15
   1820a:	3502      	adds	r5, #2
   1820c:	f04f 37ff 	mov.w	r7, #4294967295
   18210:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18214:	f04f 0a00 	mov.w	sl, #0
   18218:	464e      	mov	r6, r9
   1821a:	e78e      	b.n	1813a <_strtoull_l.constprop.0+0x7a>
   1821c:	782b      	ldrb	r3, [r5, #0]
   1821e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18222:	2b58      	cmp	r3, #88	; 0x58
   18224:	d0ed      	beq.n	18202 <_strtoull_l.constprop.0+0x142>
   18226:	f04f 0908 	mov.w	r9, #8
   1822a:	46b2      	mov	sl, r6
   1822c:	2207      	movs	r2, #7
   1822e:	f04f 37ff 	mov.w	r7, #4294967295
   18232:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18236:	464e      	mov	r6, r9
   18238:	e77f      	b.n	1813a <_strtoull_l.constprop.0+0x7a>
   1823a:	f04f 0a00 	mov.w	sl, #0
   1823e:	e75d      	b.n	180fc <_strtoull_l.constprop.0+0x3c>
   18240:	220f      	movs	r2, #15
   18242:	f04f 37ff 	mov.w	r7, #4294967295
   18246:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   1824a:	46b1      	mov	r9, r6
   1824c:	f04f 0a00 	mov.w	sl, #0
   18250:	e773      	b.n	1813a <_strtoull_l.constprop.0+0x7a>
   18252:	bf00      	nop
   18254:	20000f81 	.word	0x20000f81
   18258:	19999999 	.word	0x19999999

0001825c <_strtoull_r>:
   1825c:	f7ff bf30 	b.w	180c0 <_strtoull_l.constprop.0>

00018260 <_mbrtowc_r>:
   18260:	b570      	push	{r4, r5, r6, lr}
   18262:	b082      	sub	sp, #8
   18264:	4604      	mov	r4, r0
   18266:	9d06      	ldr	r5, [sp, #24]
   18268:	b155      	cbz	r5, 18280 <_mbrtowc_r+0x20>
   1826a:	b16a      	cbz	r2, 18288 <_mbrtowc_r+0x28>
   1826c:	480f      	ldr	r0, [pc, #60]	; (182ac <_mbrtowc_r+0x4c>)
   1826e:	9500      	str	r5, [sp, #0]
   18270:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   18274:	4620      	mov	r0, r4
   18276:	47b0      	blx	r6
   18278:	1c43      	adds	r3, r0, #1
   1827a:	d010      	beq.n	1829e <_mbrtowc_r+0x3e>
   1827c:	b002      	add	sp, #8
   1827e:	bd70      	pop	{r4, r5, r6, pc}
   18280:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   18284:	2a00      	cmp	r2, #0
   18286:	d1f1      	bne.n	1826c <_mbrtowc_r+0xc>
   18288:	4b08      	ldr	r3, [pc, #32]	; (182ac <_mbrtowc_r+0x4c>)
   1828a:	9500      	str	r5, [sp, #0]
   1828c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   18290:	4611      	mov	r1, r2
   18292:	2301      	movs	r3, #1
   18294:	4a06      	ldr	r2, [pc, #24]	; (182b0 <_mbrtowc_r+0x50>)
   18296:	4620      	mov	r0, r4
   18298:	47b0      	blx	r6
   1829a:	1c43      	adds	r3, r0, #1
   1829c:	d1ee      	bne.n	1827c <_mbrtowc_r+0x1c>
   1829e:	2200      	movs	r2, #0
   182a0:	238a      	movs	r3, #138	; 0x8a
   182a2:	602a      	str	r2, [r5, #0]
   182a4:	6023      	str	r3, [r4, #0]
   182a6:	b002      	add	sp, #8
   182a8:	bd70      	pop	{r4, r5, r6, pc}
   182aa:	bf00      	nop
   182ac:	20008e9c 	.word	0x20008e9c
   182b0:	20000518 	.word	0x20000518

000182b4 <_wcrtomb_r>:
   182b4:	b570      	push	{r4, r5, r6, lr}
   182b6:	4605      	mov	r5, r0
   182b8:	b084      	sub	sp, #16
   182ba:	b15b      	cbz	r3, 182d4 <_wcrtomb_r+0x20>
   182bc:	461c      	mov	r4, r3
   182be:	b169      	cbz	r1, 182dc <_wcrtomb_r+0x28>
   182c0:	4b0e      	ldr	r3, [pc, #56]	; (182fc <_wcrtomb_r+0x48>)
   182c2:	4628      	mov	r0, r5
   182c4:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   182c8:	4623      	mov	r3, r4
   182ca:	47b0      	blx	r6
   182cc:	1c43      	adds	r3, r0, #1
   182ce:	d00f      	beq.n	182f0 <_wcrtomb_r+0x3c>
   182d0:	b004      	add	sp, #16
   182d2:	bd70      	pop	{r4, r5, r6, pc}
   182d4:	f500 7482 	add.w	r4, r0, #260	; 0x104
   182d8:	2900      	cmp	r1, #0
   182da:	d1f1      	bne.n	182c0 <_wcrtomb_r+0xc>
   182dc:	4a07      	ldr	r2, [pc, #28]	; (182fc <_wcrtomb_r+0x48>)
   182de:	4623      	mov	r3, r4
   182e0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   182e4:	4628      	mov	r0, r5
   182e6:	460a      	mov	r2, r1
   182e8:	a901      	add	r1, sp, #4
   182ea:	47b0      	blx	r6
   182ec:	1c43      	adds	r3, r0, #1
   182ee:	d1ef      	bne.n	182d0 <_wcrtomb_r+0x1c>
   182f0:	2200      	movs	r2, #0
   182f2:	238a      	movs	r3, #138	; 0x8a
   182f4:	6022      	str	r2, [r4, #0]
   182f6:	602b      	str	r3, [r5, #0]
   182f8:	b004      	add	sp, #16
   182fa:	bd70      	pop	{r4, r5, r6, pc}
   182fc:	20008e9c 	.word	0x20008e9c

00018300 <_wcsrtombs_r>:
   18300:	b510      	push	{r4, lr}
   18302:	b082      	sub	sp, #8
   18304:	9c04      	ldr	r4, [sp, #16]
   18306:	e9cd 3400 	strd	r3, r4, [sp]
   1830a:	f04f 33ff 	mov.w	r3, #4294967295
   1830e:	f001 fd9f 	bl	19e50 <_wcsnrtombs_r>
   18312:	b002      	add	sp, #8
   18314:	bd10      	pop	{r4, pc}
   18316:	bf00      	nop

00018318 <iswspace>:
   18318:	2100      	movs	r1, #0
   1831a:	f000 b801 	b.w	18320 <iswspace_l>
   1831e:	bf00      	nop

00018320 <iswspace_l>:
   18320:	b510      	push	{r4, lr}
   18322:	f000 f8ab 	bl	1847c <_jp2uc_l>
   18326:	4604      	mov	r4, r0
   18328:	f001 fda4 	bl	19e74 <category>
   1832c:	f1a0 031a 	sub.w	r3, r0, #26
   18330:	b2db      	uxtb	r3, r3
   18332:	2b02      	cmp	r3, #2
   18334:	d906      	bls.n	18344 <iswspace_l+0x24>
   18336:	f1a4 0009 	sub.w	r0, r4, #9
   1833a:	2804      	cmp	r0, #4
   1833c:	bf8c      	ite	hi
   1833e:	2000      	movhi	r0, #0
   18340:	2001      	movls	r0, #1
   18342:	bd10      	pop	{r4, pc}
   18344:	2001      	movs	r0, #1
   18346:	bd10      	pop	{r4, pc}

00018348 <__jp2uc>:
   18348:	2902      	cmp	r1, #2
   1834a:	d032      	beq.n	183b2 <__jp2uc+0x6a>
   1834c:	2903      	cmp	r1, #3
   1834e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   18352:	bf1d      	ittte	ne
   18354:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   18358:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   1835c:	b2d2      	uxtbne	r2, r2
   1835e:	b2c2      	uxtbeq	r2, r0
   18360:	f103 0150 	add.w	r1, r3, #80	; 0x50
   18364:	b2c9      	uxtb	r1, r1
   18366:	291f      	cmp	r1, #31
   18368:	d806      	bhi.n	18378 <__jp2uc+0x30>
   1836a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   1836e:	4288      	cmp	r0, r1
   18370:	d969      	bls.n	18446 <__jp2uc+0xfe>
   18372:	f04f 30ff 	mov.w	r0, #4294967295
   18376:	4770      	bx	lr
   18378:	f103 0130 	add.w	r1, r3, #48	; 0x30
   1837c:	b2c9      	uxtb	r1, r1
   1837e:	2924      	cmp	r1, #36	; 0x24
   18380:	d80e      	bhi.n	183a0 <__jp2uc+0x58>
   18382:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   18386:	4288      	cmp	r0, r1
   18388:	d8f3      	bhi.n	18372 <__jp2uc+0x2a>
   1838a:	3bd0      	subs	r3, #208	; 0xd0
   1838c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   18390:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18394:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   18398:	4a30      	ldr	r2, [pc, #192]	; (1845c <__jp2uc+0x114>)
   1839a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1839e:	4770      	bx	lr
   183a0:	3ba1      	subs	r3, #161	; 0xa1
   183a2:	2b07      	cmp	r3, #7
   183a4:	d8e5      	bhi.n	18372 <__jp2uc+0x2a>
   183a6:	e8df f003 	tbb	[pc, r3]
   183aa:	3e48      	.short	0x3e48
   183ac:	25292e34 	.word	0x25292e34
   183b0:	1921      	.short	0x1921
   183b2:	b2c2      	uxtb	r2, r0
   183b4:	2a9e      	cmp	r2, #158	; 0x9e
   183b6:	f3c0 2107 	ubfx	r1, r0, #8, #8
   183ba:	d90b      	bls.n	183d4 <__jp2uc+0x8c>
   183bc:	3223      	adds	r2, #35	; 0x23
   183be:	b2d2      	uxtb	r2, r2
   183c0:	2380      	movs	r3, #128	; 0x80
   183c2:	299f      	cmp	r1, #159	; 0x9f
   183c4:	bf94      	ite	ls
   183c6:	3970      	subls	r1, #112	; 0x70
   183c8:	3150      	addhi	r1, #80	; 0x50
   183ca:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   183ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   183d2:	e7c5      	b.n	18360 <__jp2uc+0x18>
   183d4:	3a7e      	subs	r2, #126	; 0x7e
   183d6:	b2d2      	uxtb	r2, r2
   183d8:	237f      	movs	r3, #127	; 0x7f
   183da:	e7f2      	b.n	183c2 <__jp2uc+0x7a>
   183dc:	2ac0      	cmp	r2, #192	; 0xc0
   183de:	d8c8      	bhi.n	18372 <__jp2uc+0x2a>
   183e0:	4b1f      	ldr	r3, [pc, #124]	; (18460 <__jp2uc+0x118>)
   183e2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   183e6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   183ea:	4770      	bx	lr
   183ec:	2af1      	cmp	r2, #241	; 0xf1
   183ee:	d8c0      	bhi.n	18372 <__jp2uc+0x2a>
   183f0:	4b1c      	ldr	r3, [pc, #112]	; (18464 <__jp2uc+0x11c>)
   183f2:	e019      	b.n	18428 <__jp2uc+0xe0>
   183f4:	2ad8      	cmp	r2, #216	; 0xd8
   183f6:	d8bc      	bhi.n	18372 <__jp2uc+0x2a>
   183f8:	4b1b      	ldr	r3, [pc, #108]	; (18468 <__jp2uc+0x120>)
   183fa:	e015      	b.n	18428 <__jp2uc+0xe0>
   183fc:	2af6      	cmp	r2, #246	; 0xf6
   183fe:	d8b8      	bhi.n	18372 <__jp2uc+0x2a>
   18400:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   18404:	4770      	bx	lr
   18406:	2af3      	cmp	r2, #243	; 0xf3
   18408:	d8b3      	bhi.n	18372 <__jp2uc+0x2a>
   1840a:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   1840e:	3020      	adds	r0, #32
   18410:	4770      	bx	lr
   18412:	4b16      	ldr	r3, [pc, #88]	; (1846c <__jp2uc+0x124>)
   18414:	4413      	add	r3, r2
   18416:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   1841a:	2b00      	cmp	r3, #0
   1841c:	d0a9      	beq.n	18372 <__jp2uc+0x2a>
   1841e:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   18422:	3060      	adds	r0, #96	; 0x60
   18424:	4770      	bx	lr
   18426:	4b12      	ldr	r3, [pc, #72]	; (18470 <__jp2uc+0x128>)
   18428:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   1842c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18430:	2800      	cmp	r0, #0
   18432:	bf08      	it	eq
   18434:	f04f 30ff 	moveq.w	r0, #4294967295
   18438:	4770      	bx	lr
   1843a:	4b0e      	ldr	r3, [pc, #56]	; (18474 <__jp2uc+0x12c>)
   1843c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18440:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18444:	4770      	bx	lr
   18446:	3bb0      	subs	r3, #176	; 0xb0
   18448:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1844c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18450:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   18454:	4a08      	ldr	r2, [pc, #32]	; (18478 <__jp2uc+0x130>)
   18456:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1845a:	4770      	bx	lr
   1845c:	2000610c 	.word	0x2000610c
   18460:	20001434 	.word	0x20001434
   18464:	20001390 	.word	0x20001390
   18468:	20001320 	.word	0x20001320
   1846c:	200012c4 	.word	0x200012c4
   18470:	20001208 	.word	0x20001208
   18474:	2000114c 	.word	0x2000114c
   18478:	20001474 	.word	0x20001474

0001847c <_jp2uc_l>:
   1847c:	b538      	push	{r3, r4, r5, lr}
   1847e:	4605      	mov	r5, r0
   18480:	b1b9      	cbz	r1, 184b2 <_jp2uc_l+0x36>
   18482:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   18486:	4912      	ldr	r1, [pc, #72]	; (184d0 <_jp2uc_l+0x54>)
   18488:	4620      	mov	r0, r4
   1848a:	f7f9 fbbd 	bl	11c08 <strcmp>
   1848e:	b928      	cbnz	r0, 1849c <_jp2uc_l+0x20>
   18490:	4628      	mov	r0, r5
   18492:	2101      	movs	r1, #1
   18494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18498:	f7ff bf56 	b.w	18348 <__jp2uc>
   1849c:	490d      	ldr	r1, [pc, #52]	; (184d4 <_jp2uc_l+0x58>)
   1849e:	4620      	mov	r0, r4
   184a0:	f7f9 fbb2 	bl	11c08 <strcmp>
   184a4:	b938      	cbnz	r0, 184b6 <_jp2uc_l+0x3a>
   184a6:	4628      	mov	r0, r5
   184a8:	2102      	movs	r1, #2
   184aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   184ae:	f7ff bf4b 	b.w	18348 <__jp2uc>
   184b2:	4c09      	ldr	r4, [pc, #36]	; (184d8 <_jp2uc_l+0x5c>)
   184b4:	e7e7      	b.n	18486 <_jp2uc_l+0xa>
   184b6:	4909      	ldr	r1, [pc, #36]	; (184dc <_jp2uc_l+0x60>)
   184b8:	4620      	mov	r0, r4
   184ba:	f7f9 fba5 	bl	11c08 <strcmp>
   184be:	b928      	cbnz	r0, 184cc <_jp2uc_l+0x50>
   184c0:	4628      	mov	r0, r5
   184c2:	2103      	movs	r1, #3
   184c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   184c8:	f7ff bf3e 	b.w	18348 <__jp2uc>
   184cc:	4628      	mov	r0, r5
   184ce:	bd38      	pop	{r3, r4, r5, pc}
   184d0:	200010f0 	.word	0x200010f0
   184d4:	200010f4 	.word	0x200010f4
   184d8:	20008fc6 	.word	0x20008fc6
   184dc:	200010fc 	.word	0x200010fc

000184e0 <fiprintf>:
   184e0:	b40e      	push	{r1, r2, r3}
   184e2:	b510      	push	{r4, lr}
   184e4:	b083      	sub	sp, #12
   184e6:	ab05      	add	r3, sp, #20
   184e8:	4c06      	ldr	r4, [pc, #24]	; (18504 <fiprintf+0x24>)
   184ea:	f853 2b04 	ldr.w	r2, [r3], #4
   184ee:	9301      	str	r3, [sp, #4]
   184f0:	4601      	mov	r1, r0
   184f2:	6820      	ldr	r0, [r4, #0]
   184f4:	f000 f97c 	bl	187f0 <_vfiprintf_r>
   184f8:	b003      	add	sp, #12
   184fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   184fe:	b003      	add	sp, #12
   18500:	4770      	bx	lr
   18502:	bf00      	nop
   18504:	20009424 	.word	0x20009424

00018508 <__ssprint_r>:
   18508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1850c:	6893      	ldr	r3, [r2, #8]
   1850e:	6817      	ldr	r7, [r2, #0]
   18510:	b083      	sub	sp, #12
   18512:	4692      	mov	sl, r2
   18514:	2b00      	cmp	r3, #0
   18516:	d070      	beq.n	185fa <__ssprint_r+0xf2>
   18518:	4681      	mov	r9, r0
   1851a:	688a      	ldr	r2, [r1, #8]
   1851c:	6808      	ldr	r0, [r1, #0]
   1851e:	460c      	mov	r4, r1
   18520:	3708      	adds	r7, #8
   18522:	e043      	b.n	185ac <__ssprint_r+0xa4>
   18524:	89a3      	ldrh	r3, [r4, #12]
   18526:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1852a:	d02e      	beq.n	1858a <__ssprint_r+0x82>
   1852c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   18530:	eba0 0801 	sub.w	r8, r0, r1
   18534:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   18538:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   1853c:	f108 0001 	add.w	r0, r8, #1
   18540:	1076      	asrs	r6, r6, #1
   18542:	4428      	add	r0, r5
   18544:	42b0      	cmp	r0, r6
   18546:	4632      	mov	r2, r6
   18548:	bf84      	itt	hi
   1854a:	4606      	movhi	r6, r0
   1854c:	4632      	movhi	r2, r6
   1854e:	055b      	lsls	r3, r3, #21
   18550:	d537      	bpl.n	185c2 <__ssprint_r+0xba>
   18552:	4611      	mov	r1, r2
   18554:	4648      	mov	r0, r9
   18556:	f7f7 fa17 	bl	f988 <_malloc_r>
   1855a:	9001      	str	r0, [sp, #4]
   1855c:	2800      	cmp	r0, #0
   1855e:	d03a      	beq.n	185d6 <__ssprint_r+0xce>
   18560:	4642      	mov	r2, r8
   18562:	6921      	ldr	r1, [r4, #16]
   18564:	f7f5 f8f2 	bl	d74c <memcpy>
   18568:	89a2      	ldrh	r2, [r4, #12]
   1856a:	9b01      	ldr	r3, [sp, #4]
   1856c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   18570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18574:	81a2      	strh	r2, [r4, #12]
   18576:	eba6 0208 	sub.w	r2, r6, r8
   1857a:	eb03 0008 	add.w	r0, r3, r8
   1857e:	6166      	str	r6, [r4, #20]
   18580:	60a2      	str	r2, [r4, #8]
   18582:	6123      	str	r3, [r4, #16]
   18584:	6020      	str	r0, [r4, #0]
   18586:	462e      	mov	r6, r5
   18588:	46a8      	mov	r8, r5
   1858a:	4642      	mov	r2, r8
   1858c:	4659      	mov	r1, fp
   1858e:	f7f9 f8ef 	bl	11770 <memmove>
   18592:	f8da 3008 	ldr.w	r3, [sl, #8]
   18596:	68a2      	ldr	r2, [r4, #8]
   18598:	6820      	ldr	r0, [r4, #0]
   1859a:	1b92      	subs	r2, r2, r6
   1859c:	4440      	add	r0, r8
   1859e:	1b5b      	subs	r3, r3, r5
   185a0:	60a2      	str	r2, [r4, #8]
   185a2:	6020      	str	r0, [r4, #0]
   185a4:	f8ca 3008 	str.w	r3, [sl, #8]
   185a8:	b33b      	cbz	r3, 185fa <__ssprint_r+0xf2>
   185aa:	3708      	adds	r7, #8
   185ac:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   185b0:	2d00      	cmp	r5, #0
   185b2:	d0fa      	beq.n	185aa <__ssprint_r+0xa2>
   185b4:	42aa      	cmp	r2, r5
   185b6:	4616      	mov	r6, r2
   185b8:	4690      	mov	r8, r2
   185ba:	d9b3      	bls.n	18524 <__ssprint_r+0x1c>
   185bc:	462e      	mov	r6, r5
   185be:	46a8      	mov	r8, r5
   185c0:	e7e3      	b.n	1858a <__ssprint_r+0x82>
   185c2:	4648      	mov	r0, r9
   185c4:	f7f7 fca8 	bl	ff18 <_realloc_r>
   185c8:	4603      	mov	r3, r0
   185ca:	2800      	cmp	r0, #0
   185cc:	d1d3      	bne.n	18576 <__ssprint_r+0x6e>
   185ce:	6921      	ldr	r1, [r4, #16]
   185d0:	4648      	mov	r0, r9
   185d2:	f7f9 fe47 	bl	12264 <_free_r>
   185d6:	89a3      	ldrh	r3, [r4, #12]
   185d8:	220c      	movs	r2, #12
   185da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   185de:	f8c9 2000 	str.w	r2, [r9]
   185e2:	f04f 30ff 	mov.w	r0, #4294967295
   185e6:	81a3      	strh	r3, [r4, #12]
   185e8:	2200      	movs	r2, #0
   185ea:	2300      	movs	r3, #0
   185ec:	f8ca 2008 	str.w	r2, [sl, #8]
   185f0:	f8ca 3004 	str.w	r3, [sl, #4]
   185f4:	b003      	add	sp, #12
   185f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185fa:	2000      	movs	r0, #0
   185fc:	2300      	movs	r3, #0
   185fe:	f8ca 3004 	str.w	r3, [sl, #4]
   18602:	b003      	add	sp, #12
   18604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018608 <_sungetc_r>:
   18608:	b538      	push	{r3, r4, r5, lr}
   1860a:	1c4b      	adds	r3, r1, #1
   1860c:	d01a      	beq.n	18644 <_sungetc_r+0x3c>
   1860e:	8993      	ldrh	r3, [r2, #12]
   18610:	4614      	mov	r4, r2
   18612:	6b12      	ldr	r2, [r2, #48]	; 0x30
   18614:	f023 0320 	bic.w	r3, r3, #32
   18618:	81a3      	strh	r3, [r4, #12]
   1861a:	b2cd      	uxtb	r5, r1
   1861c:	b1aa      	cbz	r2, 1864a <_sungetc_r+0x42>
   1861e:	6862      	ldr	r2, [r4, #4]
   18620:	6b63      	ldr	r3, [r4, #52]	; 0x34
   18622:	429a      	cmp	r2, r3
   18624:	da09      	bge.n	1863a <_sungetc_r+0x32>
   18626:	6823      	ldr	r3, [r4, #0]
   18628:	1e5a      	subs	r2, r3, #1
   1862a:	6022      	str	r2, [r4, #0]
   1862c:	f803 5c01 	strb.w	r5, [r3, #-1]
   18630:	6863      	ldr	r3, [r4, #4]
   18632:	3301      	adds	r3, #1
   18634:	6063      	str	r3, [r4, #4]
   18636:	4628      	mov	r0, r5
   18638:	bd38      	pop	{r3, r4, r5, pc}
   1863a:	4621      	mov	r1, r4
   1863c:	f001 fa58 	bl	19af0 <__submore>
   18640:	2800      	cmp	r0, #0
   18642:	d0f0      	beq.n	18626 <_sungetc_r+0x1e>
   18644:	f04f 35ff 	mov.w	r5, #4294967295
   18648:	e7f5      	b.n	18636 <_sungetc_r+0x2e>
   1864a:	6923      	ldr	r3, [r4, #16]
   1864c:	6822      	ldr	r2, [r4, #0]
   1864e:	b12b      	cbz	r3, 1865c <_sungetc_r+0x54>
   18650:	4293      	cmp	r3, r2
   18652:	d203      	bcs.n	1865c <_sungetc_r+0x54>
   18654:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   18658:	42ab      	cmp	r3, r5
   1865a:	d00f      	beq.n	1867c <_sungetc_r+0x74>
   1865c:	6861      	ldr	r1, [r4, #4]
   1865e:	63e1      	str	r1, [r4, #60]	; 0x3c
   18660:	4623      	mov	r3, r4
   18662:	63a2      	str	r2, [r4, #56]	; 0x38
   18664:	f104 0140 	add.w	r1, r4, #64	; 0x40
   18668:	2203      	movs	r2, #3
   1866a:	6362      	str	r2, [r4, #52]	; 0x34
   1866c:	6321      	str	r1, [r4, #48]	; 0x30
   1866e:	f803 5f42 	strb.w	r5, [r3, #66]!
   18672:	2201      	movs	r2, #1
   18674:	e9c4 3200 	strd	r3, r2, [r4]
   18678:	4628      	mov	r0, r5
   1867a:	bd38      	pop	{r3, r4, r5, pc}
   1867c:	6863      	ldr	r3, [r4, #4]
   1867e:	3a01      	subs	r2, #1
   18680:	3301      	adds	r3, #1
   18682:	e9c4 2300 	strd	r2, r3, [r4]
   18686:	e7d6      	b.n	18636 <_sungetc_r+0x2e>

00018688 <__ssrefill_r>:
   18688:	b510      	push	{r4, lr}
   1868a:	460c      	mov	r4, r1
   1868c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1868e:	b169      	cbz	r1, 186ac <__ssrefill_r+0x24>
   18690:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18694:	4299      	cmp	r1, r3
   18696:	d001      	beq.n	1869c <__ssrefill_r+0x14>
   18698:	f7f9 fde4 	bl	12264 <_free_r>
   1869c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1869e:	6063      	str	r3, [r4, #4]
   186a0:	2000      	movs	r0, #0
   186a2:	6320      	str	r0, [r4, #48]	; 0x30
   186a4:	b113      	cbz	r3, 186ac <__ssrefill_r+0x24>
   186a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   186a8:	6023      	str	r3, [r4, #0]
   186aa:	bd10      	pop	{r4, pc}
   186ac:	89a3      	ldrh	r3, [r4, #12]
   186ae:	6921      	ldr	r1, [r4, #16]
   186b0:	2200      	movs	r2, #0
   186b2:	f043 0320 	orr.w	r3, r3, #32
   186b6:	e9c4 1200 	strd	r1, r2, [r4]
   186ba:	81a3      	strh	r3, [r4, #12]
   186bc:	f04f 30ff 	mov.w	r0, #4294967295
   186c0:	bd10      	pop	{r4, pc}
   186c2:	bf00      	nop

000186c4 <_sfread_r>:
   186c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186c8:	b085      	sub	sp, #20
   186ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
   186ce:	fb02 f303 	mul.w	r3, r2, r3
   186d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   186d4:	9301      	str	r3, [sp, #4]
   186d6:	b3a3      	cbz	r3, 18742 <_sfread_r+0x7e>
   186d8:	f8d4 a004 	ldr.w	sl, [r4, #4]
   186dc:	9b01      	ldr	r3, [sp, #4]
   186de:	4553      	cmp	r3, sl
   186e0:	468b      	mov	fp, r1
   186e2:	d946      	bls.n	18772 <_sfread_r+0xae>
   186e4:	46a0      	mov	r8, r4
   186e6:	9d01      	ldr	r5, [sp, #4]
   186e8:	f858 1b40 	ldr.w	r1, [r8], #64
   186ec:	4607      	mov	r7, r0
   186ee:	2600      	movs	r6, #0
   186f0:	4652      	mov	r2, sl
   186f2:	4658      	mov	r0, fp
   186f4:	f7f5 f82a 	bl	d74c <memcpy>
   186f8:	6823      	ldr	r3, [r4, #0]
   186fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
   186fc:	4453      	add	r3, sl
   186fe:	46a9      	mov	r9, r5
   18700:	e9c4 3600 	strd	r3, r6, [r4]
   18704:	4611      	mov	r1, r2
   18706:	4638      	mov	r0, r7
   18708:	44d3      	add	fp, sl
   1870a:	eba5 050a 	sub.w	r5, r5, sl
   1870e:	b1e2      	cbz	r2, 1874a <_sfread_r+0x86>
   18710:	4542      	cmp	r2, r8
   18712:	d001      	beq.n	18718 <_sfread_r+0x54>
   18714:	f7f9 fda6 	bl	12264 <_free_r>
   18718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1871a:	6326      	str	r6, [r4, #48]	; 0x30
   1871c:	6063      	str	r3, [r4, #4]
   1871e:	b1a3      	cbz	r3, 1874a <_sfread_r+0x86>
   18720:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   18722:	6021      	str	r1, [r4, #0]
   18724:	42ab      	cmp	r3, r5
   18726:	469a      	mov	sl, r3
   18728:	d3e2      	bcc.n	186f0 <_sfread_r+0x2c>
   1872a:	9b02      	ldr	r3, [sp, #8]
   1872c:	9301      	str	r3, [sp, #4]
   1872e:	462a      	mov	r2, r5
   18730:	4658      	mov	r0, fp
   18732:	f7f5 f80b 	bl	d74c <memcpy>
   18736:	e9d4 3200 	ldrd	r3, r2, [r4]
   1873a:	1b52      	subs	r2, r2, r5
   1873c:	442b      	add	r3, r5
   1873e:	e9c4 3200 	strd	r3, r2, [r4]
   18742:	9801      	ldr	r0, [sp, #4]
   18744:	b005      	add	sp, #20
   18746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1874a:	9a01      	ldr	r2, [sp, #4]
   1874c:	9b03      	ldr	r3, [sp, #12]
   1874e:	4452      	add	r2, sl
   18750:	eba2 0209 	sub.w	r2, r2, r9
   18754:	fbb2 f3f3 	udiv	r3, r2, r3
   18758:	9301      	str	r3, [sp, #4]
   1875a:	89a3      	ldrh	r3, [r4, #12]
   1875c:	6922      	ldr	r2, [r4, #16]
   1875e:	9801      	ldr	r0, [sp, #4]
   18760:	f043 0320 	orr.w	r3, r3, #32
   18764:	81a3      	strh	r3, [r4, #12]
   18766:	2300      	movs	r3, #0
   18768:	e9c4 2300 	strd	r2, r3, [r4]
   1876c:	b005      	add	sp, #20
   1876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18772:	6821      	ldr	r1, [r4, #0]
   18774:	461d      	mov	r5, r3
   18776:	e7d8      	b.n	1872a <_sfread_r+0x66>

00018778 <__sprint_r.part.0>:
   18778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1877c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1877e:	049c      	lsls	r4, r3, #18
   18780:	4690      	mov	r8, r2
   18782:	d52d      	bpl.n	187e0 <__sprint_r.part.0+0x68>
   18784:	6893      	ldr	r3, [r2, #8]
   18786:	6812      	ldr	r2, [r2, #0]
   18788:	b343      	cbz	r3, 187dc <__sprint_r.part.0+0x64>
   1878a:	468b      	mov	fp, r1
   1878c:	4606      	mov	r6, r0
   1878e:	f102 0908 	add.w	r9, r2, #8
   18792:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   18796:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1879a:	d015      	beq.n	187c8 <__sprint_r.part.0+0x50>
   1879c:	3d04      	subs	r5, #4
   1879e:	2400      	movs	r4, #0
   187a0:	e001      	b.n	187a6 <__sprint_r.part.0+0x2e>
   187a2:	42a7      	cmp	r7, r4
   187a4:	d00e      	beq.n	187c4 <__sprint_r.part.0+0x4c>
   187a6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   187aa:	465a      	mov	r2, fp
   187ac:	4630      	mov	r0, r6
   187ae:	f001 fa97 	bl	19ce0 <_fputwc_r>
   187b2:	1c43      	adds	r3, r0, #1
   187b4:	f104 0401 	add.w	r4, r4, #1
   187b8:	d1f3      	bne.n	187a2 <__sprint_r.part.0+0x2a>
   187ba:	2300      	movs	r3, #0
   187bc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   187c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   187c8:	f02a 0a03 	bic.w	sl, sl, #3
   187cc:	eba3 030a 	sub.w	r3, r3, sl
   187d0:	f8c8 3008 	str.w	r3, [r8, #8]
   187d4:	f109 0908 	add.w	r9, r9, #8
   187d8:	2b00      	cmp	r3, #0
   187da:	d1da      	bne.n	18792 <__sprint_r.part.0+0x1a>
   187dc:	2000      	movs	r0, #0
   187de:	e7ec      	b.n	187ba <__sprint_r.part.0+0x42>
   187e0:	f001 f80c 	bl	197fc <__sfvwrite_r>
   187e4:	2300      	movs	r3, #0
   187e6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   187ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187ee:	bf00      	nop

000187f0 <_vfiprintf_r>:
   187f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f4:	ed2d 8b02 	vpush	{d8}
   187f8:	b0c5      	sub	sp, #276	; 0x114
   187fa:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   187fe:	4683      	mov	fp, r0
   18800:	ee08 1a10 	vmov	s16, r1
   18804:	4616      	mov	r6, r2
   18806:	2100      	movs	r1, #0
   18808:	2208      	movs	r2, #8
   1880a:	4650      	mov	r0, sl
   1880c:	461c      	mov	r4, r3
   1880e:	9307      	str	r3, [sp, #28]
   18810:	f7f9 f82a 	bl	11868 <memset>
   18814:	f1bb 0f00 	cmp.w	fp, #0
   18818:	d004      	beq.n	18824 <_vfiprintf_r+0x34>
   1881a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   1881e:	2b00      	cmp	r3, #0
   18820:	f000 86a0 	beq.w	19564 <_vfiprintf_r+0xd74>
   18824:	ee18 2a10 	vmov	r2, s16
   18828:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1882a:	07db      	lsls	r3, r3, #31
   1882c:	f140 8513 	bpl.w	19256 <_vfiprintf_r+0xa66>
   18830:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   18834:	b28a      	uxth	r2, r1
   18836:	0495      	lsls	r5, r2, #18
   18838:	d40b      	bmi.n	18852 <_vfiprintf_r+0x62>
   1883a:	ee18 3a10 	vmov	r3, s16
   1883e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   18842:	8199      	strh	r1, [r3, #12]
   18844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   18846:	b28a      	uxth	r2, r1
   18848:	ee18 1a10 	vmov	r1, s16
   1884c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   18850:	664b      	str	r3, [r1, #100]	; 0x64
   18852:	0710      	lsls	r0, r2, #28
   18854:	f140 8105 	bpl.w	18a62 <_vfiprintf_r+0x272>
   18858:	ee18 3a10 	vmov	r3, s16
   1885c:	691b      	ldr	r3, [r3, #16]
   1885e:	2b00      	cmp	r3, #0
   18860:	f000 80ff 	beq.w	18a62 <_vfiprintf_r+0x272>
   18864:	f002 031a 	and.w	r3, r2, #26
   18868:	2b0a      	cmp	r3, #10
   1886a:	f000 810a 	beq.w	18a82 <_vfiprintf_r+0x292>
   1886e:	2300      	movs	r3, #0
   18870:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   18874:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   18878:	aa1b      	add	r2, sp, #108	; 0x6c
   1887a:	930c      	str	r3, [sp, #48]	; 0x30
   1887c:	9218      	str	r2, [sp, #96]	; 0x60
   1887e:	4691      	mov	r9, r2
   18880:	930b      	str	r3, [sp, #44]	; 0x2c
   18882:	9305      	str	r3, [sp, #20]
   18884:	46b0      	mov	r8, r6
   18886:	4644      	mov	r4, r8
   18888:	4ba8      	ldr	r3, [pc, #672]	; (18b2c <_vfiprintf_r+0x33c>)
   1888a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1888e:	f7f9 f90b 	bl	11aa8 <__locale_mb_cur_max>
   18892:	4622      	mov	r2, r4
   18894:	4603      	mov	r3, r0
   18896:	a912      	add	r1, sp, #72	; 0x48
   18898:	f8cd a000 	str.w	sl, [sp]
   1889c:	4658      	mov	r0, fp
   1889e:	47a8      	blx	r5
   188a0:	2800      	cmp	r0, #0
   188a2:	f000 8145 	beq.w	18b30 <_vfiprintf_r+0x340>
   188a6:	f2c0 8139 	blt.w	18b1c <_vfiprintf_r+0x32c>
   188aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   188ac:	2a25      	cmp	r2, #37	; 0x25
   188ae:	4603      	mov	r3, r0
   188b0:	d001      	beq.n	188b6 <_vfiprintf_r+0xc6>
   188b2:	441c      	add	r4, r3
   188b4:	e7e8      	b.n	18888 <_vfiprintf_r+0x98>
   188b6:	ebb4 0608 	subs.w	r6, r4, r8
   188ba:	4605      	mov	r5, r0
   188bc:	f040 813c 	bne.w	18b38 <_vfiprintf_r+0x348>
   188c0:	2300      	movs	r3, #0
   188c2:	7861      	ldrb	r1, [r4, #1]
   188c4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   188c8:	f104 0801 	add.w	r8, r4, #1
   188cc:	9306      	str	r3, [sp, #24]
   188ce:	f04f 37ff 	mov.w	r7, #4294967295
   188d2:	461e      	mov	r6, r3
   188d4:	242b      	movs	r4, #43	; 0x2b
   188d6:	f108 0801 	add.w	r8, r8, #1
   188da:	f1a1 0320 	sub.w	r3, r1, #32
   188de:	2b5a      	cmp	r3, #90	; 0x5a
   188e0:	f200 8178 	bhi.w	18bd4 <_vfiprintf_r+0x3e4>
   188e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   188e8:	017602b5 	.word	0x017602b5
   188ec:	02b00176 	.word	0x02b00176
   188f0:	01760176 	.word	0x01760176
   188f4:	006a0176 	.word	0x006a0176
   188f8:	01760176 	.word	0x01760176
   188fc:	028d027d 	.word	0x028d027d
   18900:	02880176 	.word	0x02880176
   18904:	01760297 	.word	0x01760297
   18908:	005b0292 	.word	0x005b0292
   1890c:	005b005b 	.word	0x005b005b
   18910:	005b005b 	.word	0x005b005b
   18914:	005b005b 	.word	0x005b005b
   18918:	005b005b 	.word	0x005b005b
   1891c:	01760176 	.word	0x01760176
   18920:	01760176 	.word	0x01760176
   18924:	01760176 	.word	0x01760176
   18928:	01760176 	.word	0x01760176
   1892c:	025c0176 	.word	0x025c0176
   18930:	01760084 	.word	0x01760084
   18934:	01760176 	.word	0x01760176
   18938:	01760176 	.word	0x01760176
   1893c:	01760176 	.word	0x01760176
   18940:	01760176 	.word	0x01760176
   18944:	00e80176 	.word	0x00e80176
   18948:	01760176 	.word	0x01760176
   1894c:	02330176 	.word	0x02330176
   18950:	02da0176 	.word	0x02da0176
   18954:	01760176 	.word	0x01760176
   18958:	0176058b 	.word	0x0176058b
   1895c:	01760176 	.word	0x01760176
   18960:	01760176 	.word	0x01760176
   18964:	01760176 	.word	0x01760176
   18968:	01760176 	.word	0x01760176
   1896c:	025c0176 	.word	0x025c0176
   18970:	01760086 	.word	0x01760086
   18974:	01760176 	.word	0x01760176
   18978:	008602cd 	.word	0x008602cd
   1897c:	0176007f 	.word	0x0176007f
   18980:	017602c0 	.word	0x017602c0
   18984:	00ea02fd 	.word	0x00ea02fd
   18988:	007f02ed 	.word	0x007f02ed
   1898c:	02330176 	.word	0x02330176
   18990:	0569007c 	.word	0x0569007c
   18994:	01760176 	.word	0x01760176
   18998:	0176056b 	.word	0x0176056b
   1899c:	007c      	.short	0x007c
   1899e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   189a2:	2200      	movs	r2, #0
   189a4:	f818 1b01 	ldrb.w	r1, [r8], #1
   189a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   189ac:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   189b0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   189b4:	2b09      	cmp	r3, #9
   189b6:	d9f5      	bls.n	189a4 <_vfiprintf_r+0x1b4>
   189b8:	9206      	str	r2, [sp, #24]
   189ba:	e78e      	b.n	188da <_vfiprintf_r+0xea>
   189bc:	4658      	mov	r0, fp
   189be:	f7fe fa7d 	bl	16ebc <_localeconv_r>
   189c2:	6843      	ldr	r3, [r0, #4]
   189c4:	930d      	str	r3, [sp, #52]	; 0x34
   189c6:	4618      	mov	r0, r3
   189c8:	f7f9 fb3a 	bl	12040 <strlen>
   189cc:	900e      	str	r0, [sp, #56]	; 0x38
   189ce:	4605      	mov	r5, r0
   189d0:	4658      	mov	r0, fp
   189d2:	f7fe fa73 	bl	16ebc <_localeconv_r>
   189d6:	6883      	ldr	r3, [r0, #8]
   189d8:	930b      	str	r3, [sp, #44]	; 0x2c
   189da:	2d00      	cmp	r5, #0
   189dc:	f040 84d6 	bne.w	1938c <_vfiprintf_r+0xb9c>
   189e0:	f898 1000 	ldrb.w	r1, [r8]
   189e4:	e777      	b.n	188d6 <_vfiprintf_r+0xe6>
   189e6:	f898 1000 	ldrb.w	r1, [r8]
   189ea:	f046 0620 	orr.w	r6, r6, #32
   189ee:	e772      	b.n	188d6 <_vfiprintf_r+0xe6>
   189f0:	f046 0610 	orr.w	r6, r6, #16
   189f4:	06b4      	lsls	r4, r6, #26
   189f6:	f140 818e 	bpl.w	18d16 <_vfiprintf_r+0x526>
   189fa:	9b07      	ldr	r3, [sp, #28]
   189fc:	3307      	adds	r3, #7
   189fe:	f023 0307 	bic.w	r3, r3, #7
   18a02:	461a      	mov	r2, r3
   18a04:	6859      	ldr	r1, [r3, #4]
   18a06:	f852 3b08 	ldr.w	r3, [r2], #8
   18a0a:	9207      	str	r2, [sp, #28]
   18a0c:	460a      	mov	r2, r1
   18a0e:	2900      	cmp	r1, #0
   18a10:	f2c0 8470 	blt.w	192f4 <_vfiprintf_r+0xb04>
   18a14:	1c79      	adds	r1, r7, #1
   18a16:	f000 85a2 	beq.w	1955e <_vfiprintf_r+0xd6e>
   18a1a:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   18a1e:	9103      	str	r1, [sp, #12]
   18a20:	ea53 0102 	orrs.w	r1, r3, r2
   18a24:	f000 843f 	beq.w	192a6 <_vfiprintf_r+0xab6>
   18a28:	2b0a      	cmp	r3, #10
   18a2a:	f172 0100 	sbcs.w	r1, r2, #0
   18a2e:	f080 8541 	bcs.w	194b4 <_vfiprintf_r+0xcc4>
   18a32:	3330      	adds	r3, #48	; 0x30
   18a34:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   18a38:	9e03      	ldr	r6, [sp, #12]
   18a3a:	2301      	movs	r3, #1
   18a3c:	9304      	str	r3, [sp, #16]
   18a3e:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   18a42:	9b04      	ldr	r3, [sp, #16]
   18a44:	42bb      	cmp	r3, r7
   18a46:	bfb8      	it	lt
   18a48:	463b      	movlt	r3, r7
   18a4a:	9303      	str	r3, [sp, #12]
   18a4c:	2300      	movs	r3, #0
   18a4e:	9308      	str	r3, [sp, #32]
   18a50:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   18a54:	2b00      	cmp	r3, #0
   18a56:	f000 80cb 	beq.w	18bf0 <_vfiprintf_r+0x400>
   18a5a:	9b03      	ldr	r3, [sp, #12]
   18a5c:	3301      	adds	r3, #1
   18a5e:	9303      	str	r3, [sp, #12]
   18a60:	e0c6      	b.n	18bf0 <_vfiprintf_r+0x400>
   18a62:	ee18 1a10 	vmov	r1, s16
   18a66:	4658      	mov	r0, fp
   18a68:	ee18 5a10 	vmov	r5, s16
   18a6c:	f001 f87c 	bl	19b68 <__swsetup_r>
   18a70:	2800      	cmp	r0, #0
   18a72:	f040 8652 	bne.w	1971a <_vfiprintf_r+0xf2a>
   18a76:	89aa      	ldrh	r2, [r5, #12]
   18a78:	f002 031a 	and.w	r3, r2, #26
   18a7c:	2b0a      	cmp	r3, #10
   18a7e:	f47f aef6 	bne.w	1886e <_vfiprintf_r+0x7e>
   18a82:	ee18 1a10 	vmov	r1, s16
   18a86:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   18a8a:	2b00      	cmp	r3, #0
   18a8c:	f6ff aeef 	blt.w	1886e <_vfiprintf_r+0x7e>
   18a90:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   18a92:	07db      	lsls	r3, r3, #31
   18a94:	d402      	bmi.n	18a9c <_vfiprintf_r+0x2ac>
   18a96:	0597      	lsls	r7, r2, #22
   18a98:	f140 8612 	bpl.w	196c0 <_vfiprintf_r+0xed0>
   18a9c:	ee18 1a10 	vmov	r1, s16
   18aa0:	4623      	mov	r3, r4
   18aa2:	4632      	mov	r2, r6
   18aa4:	4658      	mov	r0, fp
   18aa6:	f000 fe69 	bl	1977c <__sbprintf>
   18aaa:	9005      	str	r0, [sp, #20]
   18aac:	9805      	ldr	r0, [sp, #20]
   18aae:	b045      	add	sp, #276	; 0x114
   18ab0:	ecbd 8b02 	vpop	{d8}
   18ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab8:	f046 0610 	orr.w	r6, r6, #16
   18abc:	f016 0220 	ands.w	r2, r6, #32
   18ac0:	f000 8136 	beq.w	18d30 <_vfiprintf_r+0x540>
   18ac4:	9b07      	ldr	r3, [sp, #28]
   18ac6:	3307      	adds	r3, #7
   18ac8:	f023 0307 	bic.w	r3, r3, #7
   18acc:	4619      	mov	r1, r3
   18ace:	685a      	ldr	r2, [r3, #4]
   18ad0:	f851 3b08 	ldr.w	r3, [r1], #8
   18ad4:	9107      	str	r1, [sp, #28]
   18ad6:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   18ada:	9103      	str	r1, [sp, #12]
   18adc:	2100      	movs	r1, #0
   18ade:	2000      	movs	r0, #0
   18ae0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   18ae4:	1c78      	adds	r0, r7, #1
   18ae6:	f000 8210 	beq.w	18f0a <_vfiprintf_r+0x71a>
   18aea:	9803      	ldr	r0, [sp, #12]
   18aec:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   18af0:	ea53 0002 	orrs.w	r0, r3, r2
   18af4:	f040 8208 	bne.w	18f08 <_vfiprintf_r+0x718>
   18af8:	2f00      	cmp	r7, #0
   18afa:	f040 8538 	bne.w	1956e <_vfiprintf_r+0xd7e>
   18afe:	2900      	cmp	r1, #0
   18b00:	f040 83d5 	bne.w	192ae <_vfiprintf_r+0xabe>
   18b04:	9b03      	ldr	r3, [sp, #12]
   18b06:	f013 0301 	ands.w	r3, r3, #1
   18b0a:	9304      	str	r3, [sp, #16]
   18b0c:	f000 8411 	beq.w	19332 <_vfiprintf_r+0xb42>
   18b10:	2330      	movs	r3, #48	; 0x30
   18b12:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   18b16:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   18b1a:	e792      	b.n	18a42 <_vfiprintf_r+0x252>
   18b1c:	2208      	movs	r2, #8
   18b1e:	2100      	movs	r1, #0
   18b20:	4650      	mov	r0, sl
   18b22:	f7f8 fea1 	bl	11868 <memset>
   18b26:	2301      	movs	r3, #1
   18b28:	441c      	add	r4, r3
   18b2a:	e6ad      	b.n	18888 <_vfiprintf_r+0x98>
   18b2c:	20008e9c 	.word	0x20008e9c
   18b30:	ebb4 0608 	subs.w	r6, r4, r8
   18b34:	4605      	mov	r5, r0
   18b36:	d01b      	beq.n	18b70 <_vfiprintf_r+0x380>
   18b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
   18b3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   18b3c:	3301      	adds	r3, #1
   18b3e:	4432      	add	r2, r6
   18b40:	2b07      	cmp	r3, #7
   18b42:	e9c9 8600 	strd	r8, r6, [r9]
   18b46:	921a      	str	r2, [sp, #104]	; 0x68
   18b48:	9319      	str	r3, [sp, #100]	; 0x64
   18b4a:	dd1c      	ble.n	18b86 <_vfiprintf_r+0x396>
   18b4c:	2a00      	cmp	r2, #0
   18b4e:	f000 83a6 	beq.w	1929e <_vfiprintf_r+0xaae>
   18b52:	ee18 1a10 	vmov	r1, s16
   18b56:	aa18      	add	r2, sp, #96	; 0x60
   18b58:	4658      	mov	r0, fp
   18b5a:	f7ff fe0d 	bl	18778 <__sprint_r.part.0>
   18b5e:	bb20      	cbnz	r0, 18baa <_vfiprintf_r+0x3ba>
   18b60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18b64:	9b05      	ldr	r3, [sp, #20]
   18b66:	4433      	add	r3, r6
   18b68:	9305      	str	r3, [sp, #20]
   18b6a:	2d00      	cmp	r5, #0
   18b6c:	f47f aea8 	bne.w	188c0 <_vfiprintf_r+0xd0>
   18b70:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18b72:	2b00      	cmp	r3, #0
   18b74:	f040 85c1 	bne.w	196fa <_vfiprintf_r+0xf0a>
   18b78:	ee18 3a10 	vmov	r3, s16
   18b7c:	2200      	movs	r2, #0
   18b7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   18b82:	9219      	str	r2, [sp, #100]	; 0x64
   18b84:	e015      	b.n	18bb2 <_vfiprintf_r+0x3c2>
   18b86:	f109 0908 	add.w	r9, r9, #8
   18b8a:	e7eb      	b.n	18b64 <_vfiprintf_r+0x374>
   18b8c:	ee18 1a10 	vmov	r1, s16
   18b90:	aa18      	add	r2, sp, #96	; 0x60
   18b92:	4658      	mov	r0, fp
   18b94:	f7ff fdf0 	bl	18778 <__sprint_r.part.0>
   18b98:	2800      	cmp	r0, #0
   18b9a:	f000 80a6 	beq.w	18cea <_vfiprintf_r+0x4fa>
   18b9e:	9b08      	ldr	r3, [sp, #32]
   18ba0:	b11b      	cbz	r3, 18baa <_vfiprintf_r+0x3ba>
   18ba2:	9908      	ldr	r1, [sp, #32]
   18ba4:	4658      	mov	r0, fp
   18ba6:	f7f9 fb5d 	bl	12264 <_free_r>
   18baa:	ee18 3a10 	vmov	r3, s16
   18bae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   18bb2:	ee18 2a10 	vmov	r2, s16
   18bb6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   18bb8:	f012 0f01 	tst.w	r2, #1
   18bbc:	b29a      	uxth	r2, r3
   18bbe:	f000 80a0 	beq.w	18d02 <_vfiprintf_r+0x512>
   18bc2:	0650      	lsls	r0, r2, #25
   18bc4:	f100 85b2 	bmi.w	1972c <_vfiprintf_r+0xf3c>
   18bc8:	9805      	ldr	r0, [sp, #20]
   18bca:	b045      	add	sp, #276	; 0x114
   18bcc:	ecbd 8b02 	vpop	{d8}
   18bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bd4:	2900      	cmp	r1, #0
   18bd6:	d0cb      	beq.n	18b70 <_vfiprintf_r+0x380>
   18bd8:	2300      	movs	r3, #0
   18bda:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18bde:	2301      	movs	r3, #1
   18be0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   18be4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   18be8:	ac2b      	add	r4, sp, #172	; 0xac
   18bea:	2300      	movs	r3, #0
   18bec:	9308      	str	r3, [sp, #32]
   18bee:	461f      	mov	r7, r3
   18bf0:	f016 0302 	ands.w	r3, r6, #2
   18bf4:	9309      	str	r3, [sp, #36]	; 0x24
   18bf6:	d002      	beq.n	18bfe <_vfiprintf_r+0x40e>
   18bf8:	9b03      	ldr	r3, [sp, #12]
   18bfa:	3302      	adds	r3, #2
   18bfc:	9303      	str	r3, [sp, #12]
   18bfe:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   18c02:	930a      	str	r3, [sp, #40]	; 0x28
   18c04:	d105      	bne.n	18c12 <_vfiprintf_r+0x422>
   18c06:	9b06      	ldr	r3, [sp, #24]
   18c08:	9a03      	ldr	r2, [sp, #12]
   18c0a:	1a9d      	subs	r5, r3, r2
   18c0c:	2d00      	cmp	r5, #0
   18c0e:	f300 827b 	bgt.w	19108 <_vfiprintf_r+0x918>
   18c12:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18c16:	1c41      	adds	r1, r0, #1
   18c18:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   18c1c:	b182      	cbz	r2, 18c40 <_vfiprintf_r+0x450>
   18c1e:	2201      	movs	r2, #1
   18c20:	3301      	adds	r3, #1
   18c22:	f8c9 2004 	str.w	r2, [r9, #4]
   18c26:	2907      	cmp	r1, #7
   18c28:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   18c2c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   18c30:	f8c9 2000 	str.w	r2, [r9]
   18c34:	f300 824a 	bgt.w	190cc <_vfiprintf_r+0x8dc>
   18c38:	4608      	mov	r0, r1
   18c3a:	f109 0908 	add.w	r9, r9, #8
   18c3e:	3101      	adds	r1, #1
   18c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c42:	b1e2      	cbz	r2, 18c7e <_vfiprintf_r+0x48e>
   18c44:	aa11      	add	r2, sp, #68	; 0x44
   18c46:	3302      	adds	r3, #2
   18c48:	f8c9 2000 	str.w	r2, [r9]
   18c4c:	2907      	cmp	r1, #7
   18c4e:	f04f 0202 	mov.w	r2, #2
   18c52:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   18c56:	f8c9 2004 	str.w	r2, [r9, #4]
   18c5a:	f340 8250 	ble.w	190fe <_vfiprintf_r+0x90e>
   18c5e:	2b00      	cmp	r3, #0
   18c60:	f000 8343 	beq.w	192ea <_vfiprintf_r+0xafa>
   18c64:	ee18 1a10 	vmov	r1, s16
   18c68:	aa18      	add	r2, sp, #96	; 0x60
   18c6a:	4658      	mov	r0, fp
   18c6c:	f7ff fd84 	bl	18778 <__sprint_r.part.0>
   18c70:	2800      	cmp	r0, #0
   18c72:	d194      	bne.n	18b9e <_vfiprintf_r+0x3ae>
   18c74:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18c78:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18c7c:	1c41      	adds	r1, r0, #1
   18c7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18c80:	2a80      	cmp	r2, #128	; 0x80
   18c82:	f000 8184 	beq.w	18f8e <_vfiprintf_r+0x79e>
   18c86:	9a04      	ldr	r2, [sp, #16]
   18c88:	1abd      	subs	r5, r7, r2
   18c8a:	2d00      	cmp	r5, #0
   18c8c:	f300 81d7 	bgt.w	1903e <_vfiprintf_r+0x84e>
   18c90:	9a04      	ldr	r2, [sp, #16]
   18c92:	f8c9 4000 	str.w	r4, [r9]
   18c96:	4413      	add	r3, r2
   18c98:	2907      	cmp	r1, #7
   18c9a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   18c9e:	f8c9 2004 	str.w	r2, [r9, #4]
   18ca2:	f340 816e 	ble.w	18f82 <_vfiprintf_r+0x792>
   18ca6:	2b00      	cmp	r3, #0
   18ca8:	f000 8275 	beq.w	19196 <_vfiprintf_r+0x9a6>
   18cac:	ee18 1a10 	vmov	r1, s16
   18cb0:	aa18      	add	r2, sp, #96	; 0x60
   18cb2:	4658      	mov	r0, fp
   18cb4:	f7ff fd60 	bl	18778 <__sprint_r.part.0>
   18cb8:	2800      	cmp	r0, #0
   18cba:	f47f af70 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   18cbe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   18cc0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18cc4:	0775      	lsls	r5, r6, #29
   18cc6:	d505      	bpl.n	18cd4 <_vfiprintf_r+0x4e4>
   18cc8:	9a06      	ldr	r2, [sp, #24]
   18cca:	9903      	ldr	r1, [sp, #12]
   18ccc:	1a54      	subs	r4, r2, r1
   18cce:	2c00      	cmp	r4, #0
   18cd0:	f300 826b 	bgt.w	191aa <_vfiprintf_r+0x9ba>
   18cd4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   18cd8:	9803      	ldr	r0, [sp, #12]
   18cda:	4281      	cmp	r1, r0
   18cdc:	bfac      	ite	ge
   18cde:	1852      	addge	r2, r2, r1
   18ce0:	1812      	addlt	r2, r2, r0
   18ce2:	9205      	str	r2, [sp, #20]
   18ce4:	2b00      	cmp	r3, #0
   18ce6:	f47f af51 	bne.w	18b8c <_vfiprintf_r+0x39c>
   18cea:	9908      	ldr	r1, [sp, #32]
   18cec:	2300      	movs	r3, #0
   18cee:	9319      	str	r3, [sp, #100]	; 0x64
   18cf0:	2900      	cmp	r1, #0
   18cf2:	f000 8149 	beq.w	18f88 <_vfiprintf_r+0x798>
   18cf6:	4658      	mov	r0, fp
   18cf8:	f7f9 fab4 	bl	12264 <_free_r>
   18cfc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18d00:	e5c1      	b.n	18886 <_vfiprintf_r+0x96>
   18d02:	059c      	lsls	r4, r3, #22
   18d04:	f53f af5d 	bmi.w	18bc2 <_vfiprintf_r+0x3d2>
   18d08:	ee18 4a10 	vmov	r4, s16
   18d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18d0e:	f7f8 ff67 	bl	11be0 <__retarget_lock_release_recursive>
   18d12:	89a2      	ldrh	r2, [r4, #12]
   18d14:	e755      	b.n	18bc2 <_vfiprintf_r+0x3d2>
   18d16:	06f0      	lsls	r0, r6, #27
   18d18:	9a07      	ldr	r2, [sp, #28]
   18d1a:	f100 831f 	bmi.w	1935c <_vfiprintf_r+0xb6c>
   18d1e:	0671      	lsls	r1, r6, #25
   18d20:	f140 8319 	bpl.w	19356 <_vfiprintf_r+0xb66>
   18d24:	f932 3b04 	ldrsh.w	r3, [r2], #4
   18d28:	9207      	str	r2, [sp, #28]
   18d2a:	17da      	asrs	r2, r3, #31
   18d2c:	4611      	mov	r1, r2
   18d2e:	e66e      	b.n	18a0e <_vfiprintf_r+0x21e>
   18d30:	f016 0310 	ands.w	r3, r6, #16
   18d34:	9907      	ldr	r1, [sp, #28]
   18d36:	f040 8309 	bne.w	1934c <_vfiprintf_r+0xb5c>
   18d3a:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   18d3e:	f000 8301 	beq.w	19344 <_vfiprintf_r+0xb54>
   18d42:	461a      	mov	r2, r3
   18d44:	f851 3b04 	ldr.w	r3, [r1], #4
   18d48:	9107      	str	r1, [sp, #28]
   18d4a:	b29b      	uxth	r3, r3
   18d4c:	e6c3      	b.n	18ad6 <_vfiprintf_r+0x2e6>
   18d4e:	9b07      	ldr	r3, [sp, #28]
   18d50:	461a      	mov	r2, r3
   18d52:	2300      	movs	r3, #0
   18d54:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18d58:	4613      	mov	r3, r2
   18d5a:	f853 4b04 	ldr.w	r4, [r3], #4
   18d5e:	9303      	str	r3, [sp, #12]
   18d60:	2c00      	cmp	r4, #0
   18d62:	f000 8412 	beq.w	1958a <_vfiprintf_r+0xd9a>
   18d66:	2953      	cmp	r1, #83	; 0x53
   18d68:	f000 8365 	beq.w	19436 <_vfiprintf_r+0xc46>
   18d6c:	f016 0510 	ands.w	r5, r6, #16
   18d70:	f040 8361 	bne.w	19436 <_vfiprintf_r+0xc46>
   18d74:	1c7b      	adds	r3, r7, #1
   18d76:	f000 84b3 	beq.w	196e0 <_vfiprintf_r+0xef0>
   18d7a:	463a      	mov	r2, r7
   18d7c:	4629      	mov	r1, r5
   18d7e:	4620      	mov	r0, r4
   18d80:	f7f9 f90e 	bl	11fa0 <memchr>
   18d84:	9008      	str	r0, [sp, #32]
   18d86:	2800      	cmp	r0, #0
   18d88:	f000 849f 	beq.w	196ca <_vfiprintf_r+0xeda>
   18d8c:	1b03      	subs	r3, r0, r4
   18d8e:	9a03      	ldr	r2, [sp, #12]
   18d90:	9304      	str	r3, [sp, #16]
   18d92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18d96:	462f      	mov	r7, r5
   18d98:	9207      	str	r2, [sp, #28]
   18d9a:	9303      	str	r3, [sp, #12]
   18d9c:	9508      	str	r5, [sp, #32]
   18d9e:	e657      	b.n	18a50 <_vfiprintf_r+0x260>
   18da0:	2943      	cmp	r1, #67	; 0x43
   18da2:	d002      	beq.n	18daa <_vfiprintf_r+0x5ba>
   18da4:	06f5      	lsls	r5, r6, #27
   18da6:	f140 832d 	bpl.w	19404 <_vfiprintf_r+0xc14>
   18daa:	9d07      	ldr	r5, [sp, #28]
   18dac:	2208      	movs	r2, #8
   18dae:	2100      	movs	r1, #0
   18db0:	a816      	add	r0, sp, #88	; 0x58
   18db2:	ac2b      	add	r4, sp, #172	; 0xac
   18db4:	f7f8 fd58 	bl	11868 <memset>
   18db8:	ab16      	add	r3, sp, #88	; 0x58
   18dba:	f855 2b04 	ldr.w	r2, [r5], #4
   18dbe:	4621      	mov	r1, r4
   18dc0:	4658      	mov	r0, fp
   18dc2:	f7ff fa77 	bl	182b4 <_wcrtomb_r>
   18dc6:	4603      	mov	r3, r0
   18dc8:	3301      	adds	r3, #1
   18dca:	9004      	str	r0, [sp, #16]
   18dcc:	f000 84b3 	beq.w	19736 <_vfiprintf_r+0xf46>
   18dd0:	9b04      	ldr	r3, [sp, #16]
   18dd2:	9507      	str	r5, [sp, #28]
   18dd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18dd8:	9303      	str	r3, [sp, #12]
   18dda:	2300      	movs	r3, #0
   18ddc:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18de0:	e703      	b.n	18bea <_vfiprintf_r+0x3fa>
   18de2:	9b07      	ldr	r3, [sp, #28]
   18de4:	f853 2b04 	ldr.w	r2, [r3], #4
   18de8:	9206      	str	r2, [sp, #24]
   18dea:	2a00      	cmp	r2, #0
   18dec:	f280 829c 	bge.w	19328 <_vfiprintf_r+0xb38>
   18df0:	9a06      	ldr	r2, [sp, #24]
   18df2:	4252      	negs	r2, r2
   18df4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18df8:	f898 1000 	ldrb.w	r1, [r8]
   18dfc:	f046 0604 	orr.w	r6, r6, #4
   18e00:	e569      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e02:	f898 1000 	ldrb.w	r1, [r8]
   18e06:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   18e0a:	e564      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e0c:	f898 1000 	ldrb.w	r1, [r8]
   18e10:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   18e14:	e55f      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e16:	4642      	mov	r2, r8
   18e18:	f812 1b01 	ldrb.w	r1, [r2], #1
   18e1c:	292a      	cmp	r1, #42	; 0x2a
   18e1e:	f000 8496 	beq.w	1974e <_vfiprintf_r+0xf5e>
   18e22:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   18e26:	2b09      	cmp	r3, #9
   18e28:	4690      	mov	r8, r2
   18e2a:	f04f 0700 	mov.w	r7, #0
   18e2e:	f63f ad54 	bhi.w	188da <_vfiprintf_r+0xea>
   18e32:	f818 1b01 	ldrb.w	r1, [r8], #1
   18e36:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   18e3a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   18e3e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   18e42:	2b09      	cmp	r3, #9
   18e44:	d9f5      	bls.n	18e32 <_vfiprintf_r+0x642>
   18e46:	e548      	b.n	188da <_vfiprintf_r+0xea>
   18e48:	f898 1000 	ldrb.w	r1, [r8]
   18e4c:	f046 0601 	orr.w	r6, r6, #1
   18e50:	e541      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e52:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   18e56:	2b00      	cmp	r3, #0
   18e58:	f47f adc2 	bne.w	189e0 <_vfiprintf_r+0x1f0>
   18e5c:	2320      	movs	r3, #32
   18e5e:	f898 1000 	ldrb.w	r1, [r8]
   18e62:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   18e66:	e536      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e68:	f898 1000 	ldrb.w	r1, [r8]
   18e6c:	296c      	cmp	r1, #108	; 0x6c
   18e6e:	bf03      	ittte	eq
   18e70:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   18e74:	f046 0620 	orreq.w	r6, r6, #32
   18e78:	f108 0801 	addeq.w	r8, r8, #1
   18e7c:	f046 0610 	orrne.w	r6, r6, #16
   18e80:	e529      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e82:	f898 1000 	ldrb.w	r1, [r8]
   18e86:	2968      	cmp	r1, #104	; 0x68
   18e88:	bf03      	ittte	eq
   18e8a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   18e8e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   18e92:	f108 0801 	addeq.w	r8, r8, #1
   18e96:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   18e9a:	e51c      	b.n	188d6 <_vfiprintf_r+0xe6>
   18e9c:	f046 0310 	orr.w	r3, r6, #16
   18ea0:	9303      	str	r3, [sp, #12]
   18ea2:	9b03      	ldr	r3, [sp, #12]
   18ea4:	f013 0220 	ands.w	r2, r3, #32
   18ea8:	f000 8206 	beq.w	192b8 <_vfiprintf_r+0xac8>
   18eac:	9b07      	ldr	r3, [sp, #28]
   18eae:	3307      	adds	r3, #7
   18eb0:	f023 0307 	bic.w	r3, r3, #7
   18eb4:	4619      	mov	r1, r3
   18eb6:	685a      	ldr	r2, [r3, #4]
   18eb8:	f851 3b08 	ldr.w	r3, [r1], #8
   18ebc:	9107      	str	r1, [sp, #28]
   18ebe:	2101      	movs	r1, #1
   18ec0:	e60d      	b.n	18ade <_vfiprintf_r+0x2ee>
   18ec2:	9a07      	ldr	r2, [sp, #28]
   18ec4:	f046 0302 	orr.w	r3, r6, #2
   18ec8:	9303      	str	r3, [sp, #12]
   18eca:	f852 3b04 	ldr.w	r3, [r2], #4
   18ece:	9207      	str	r2, [sp, #28]
   18ed0:	f647 0230 	movw	r2, #30768	; 0x7830
   18ed4:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   18ed8:	4ab8      	ldr	r2, [pc, #736]	; (191bc <_vfiprintf_r+0x9cc>)
   18eda:	920c      	str	r2, [sp, #48]	; 0x30
   18edc:	2102      	movs	r1, #2
   18ede:	2200      	movs	r2, #0
   18ee0:	e5fd      	b.n	18ade <_vfiprintf_r+0x2ee>
   18ee2:	06b7      	lsls	r7, r6, #26
   18ee4:	f100 8248 	bmi.w	19378 <_vfiprintf_r+0xb88>
   18ee8:	06f5      	lsls	r5, r6, #27
   18eea:	f100 8346 	bmi.w	1957a <_vfiprintf_r+0xd8a>
   18eee:	0674      	lsls	r4, r6, #25
   18ef0:	f100 83d5 	bmi.w	1969e <_vfiprintf_r+0xeae>
   18ef4:	05b0      	lsls	r0, r6, #22
   18ef6:	f140 8340 	bpl.w	1957a <_vfiprintf_r+0xd8a>
   18efa:	9b07      	ldr	r3, [sp, #28]
   18efc:	9905      	ldr	r1, [sp, #20]
   18efe:	f853 2b04 	ldr.w	r2, [r3], #4
   18f02:	9307      	str	r3, [sp, #28]
   18f04:	7011      	strb	r1, [r2, #0]
   18f06:	e4be      	b.n	18886 <_vfiprintf_r+0x96>
   18f08:	9603      	str	r6, [sp, #12]
   18f0a:	2901      	cmp	r1, #1
   18f0c:	f43f ad8c 	beq.w	18a28 <_vfiprintf_r+0x238>
   18f10:	2902      	cmp	r1, #2
   18f12:	ac44      	add	r4, sp, #272	; 0x110
   18f14:	d111      	bne.n	18f3a <_vfiprintf_r+0x74a>
   18f16:	980c      	ldr	r0, [sp, #48]	; 0x30
   18f18:	f003 010f 	and.w	r1, r3, #15
   18f1c:	091b      	lsrs	r3, r3, #4
   18f1e:	5c41      	ldrb	r1, [r0, r1]
   18f20:	f804 1d01 	strb.w	r1, [r4, #-1]!
   18f24:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   18f28:	0912      	lsrs	r2, r2, #4
   18f2a:	ea53 0102 	orrs.w	r1, r3, r2
   18f2e:	d1f3      	bne.n	18f18 <_vfiprintf_r+0x728>
   18f30:	9e03      	ldr	r6, [sp, #12]
   18f32:	ab44      	add	r3, sp, #272	; 0x110
   18f34:	1b1b      	subs	r3, r3, r4
   18f36:	9304      	str	r3, [sp, #16]
   18f38:	e583      	b.n	18a42 <_vfiprintf_r+0x252>
   18f3a:	f003 0107 	and.w	r1, r3, #7
   18f3e:	08db      	lsrs	r3, r3, #3
   18f40:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   18f44:	08d2      	lsrs	r2, r2, #3
   18f46:	3130      	adds	r1, #48	; 0x30
   18f48:	ea53 0502 	orrs.w	r5, r3, r2
   18f4c:	4620      	mov	r0, r4
   18f4e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   18f52:	d1f2      	bne.n	18f3a <_vfiprintf_r+0x74a>
   18f54:	9e03      	ldr	r6, [sp, #12]
   18f56:	07f3      	lsls	r3, r6, #31
   18f58:	d5eb      	bpl.n	18f32 <_vfiprintf_r+0x742>
   18f5a:	2930      	cmp	r1, #48	; 0x30
   18f5c:	d0e8      	beq.n	18f30 <_vfiprintf_r+0x740>
   18f5e:	2330      	movs	r3, #48	; 0x30
   18f60:	3802      	subs	r0, #2
   18f62:	f804 3c01 	strb.w	r3, [r4, #-1]
   18f66:	ab44      	add	r3, sp, #272	; 0x110
   18f68:	1a1b      	subs	r3, r3, r0
   18f6a:	9e03      	ldr	r6, [sp, #12]
   18f6c:	9304      	str	r3, [sp, #16]
   18f6e:	4604      	mov	r4, r0
   18f70:	e567      	b.n	18a42 <_vfiprintf_r+0x252>
   18f72:	9b04      	ldr	r3, [sp, #16]
   18f74:	941b      	str	r4, [sp, #108]	; 0x6c
   18f76:	2201      	movs	r2, #1
   18f78:	931c      	str	r3, [sp, #112]	; 0x70
   18f7a:	931a      	str	r3, [sp, #104]	; 0x68
   18f7c:	9219      	str	r2, [sp, #100]	; 0x64
   18f7e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18f82:	f109 0908 	add.w	r9, r9, #8
   18f86:	e69d      	b.n	18cc4 <_vfiprintf_r+0x4d4>
   18f88:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18f8c:	e47b      	b.n	18886 <_vfiprintf_r+0x96>
   18f8e:	9a06      	ldr	r2, [sp, #24]
   18f90:	9d03      	ldr	r5, [sp, #12]
   18f92:	1b55      	subs	r5, r2, r5
   18f94:	2d00      	cmp	r5, #0
   18f96:	f77f ae76 	ble.w	18c86 <_vfiprintf_r+0x496>
   18f9a:	2d10      	cmp	r5, #16
   18f9c:	f340 83bb 	ble.w	19716 <_vfiprintf_r+0xf26>
   18fa0:	9409      	str	r4, [sp, #36]	; 0x24
   18fa2:	ee18 4a10 	vmov	r4, s16
   18fa6:	e007      	b.n	18fb8 <_vfiprintf_r+0x7c8>
   18fa8:	f100 0c02 	add.w	ip, r0, #2
   18fac:	f109 0908 	add.w	r9, r9, #8
   18fb0:	4610      	mov	r0, r2
   18fb2:	3d10      	subs	r5, #16
   18fb4:	2d10      	cmp	r5, #16
   18fb6:	dd1e      	ble.n	18ff6 <_vfiprintf_r+0x806>
   18fb8:	4981      	ldr	r1, [pc, #516]	; (191c0 <_vfiprintf_r+0x9d0>)
   18fba:	f8c9 1000 	str.w	r1, [r9]
   18fbe:	1c42      	adds	r2, r0, #1
   18fc0:	3310      	adds	r3, #16
   18fc2:	2110      	movs	r1, #16
   18fc4:	2a07      	cmp	r2, #7
   18fc6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   18fca:	f8c9 1004 	str.w	r1, [r9, #4]
   18fce:	ddeb      	ble.n	18fa8 <_vfiprintf_r+0x7b8>
   18fd0:	aa18      	add	r2, sp, #96	; 0x60
   18fd2:	2b00      	cmp	r3, #0
   18fd4:	d074      	beq.n	190c0 <_vfiprintf_r+0x8d0>
   18fd6:	4621      	mov	r1, r4
   18fd8:	4658      	mov	r0, fp
   18fda:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   18fde:	f7ff fbcb 	bl	18778 <__sprint_r.part.0>
   18fe2:	2800      	cmp	r0, #0
   18fe4:	f47f addb 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   18fe8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   18fec:	3d10      	subs	r5, #16
   18fee:	2d10      	cmp	r5, #16
   18ff0:	f100 0c01 	add.w	ip, r0, #1
   18ff4:	dce0      	bgt.n	18fb8 <_vfiprintf_r+0x7c8>
   18ff6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18ff8:	4a71      	ldr	r2, [pc, #452]	; (191c0 <_vfiprintf_r+0x9d0>)
   18ffa:	f8c9 5004 	str.w	r5, [r9, #4]
   18ffe:	442b      	add	r3, r5
   19000:	f1bc 0f07 	cmp.w	ip, #7
   19004:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   19008:	f8c9 2000 	str.w	r2, [r9]
   1900c:	f340 8194 	ble.w	19338 <_vfiprintf_r+0xb48>
   19010:	2b00      	cmp	r3, #0
   19012:	f000 831f 	beq.w	19654 <_vfiprintf_r+0xe64>
   19016:	ee18 1a10 	vmov	r1, s16
   1901a:	aa18      	add	r2, sp, #96	; 0x60
   1901c:	4658      	mov	r0, fp
   1901e:	f7ff fbab 	bl	18778 <__sprint_r.part.0>
   19022:	2800      	cmp	r0, #0
   19024:	f47f adbb 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   19028:	9a04      	ldr	r2, [sp, #16]
   1902a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1902e:	1abd      	subs	r5, r7, r2
   19030:	2d00      	cmp	r5, #0
   19032:	f100 0101 	add.w	r1, r0, #1
   19036:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1903a:	f77f ae29 	ble.w	18c90 <_vfiprintf_r+0x4a0>
   1903e:	2d10      	cmp	r5, #16
   19040:	dd29      	ble.n	19096 <_vfiprintf_r+0x8a6>
   19042:	9409      	str	r4, [sp, #36]	; 0x24
   19044:	2710      	movs	r7, #16
   19046:	ee18 4a10 	vmov	r4, s16
   1904a:	e007      	b.n	1905c <_vfiprintf_r+0x86c>
   1904c:	f100 0c02 	add.w	ip, r0, #2
   19050:	f109 0908 	add.w	r9, r9, #8
   19054:	4610      	mov	r0, r2
   19056:	3d10      	subs	r5, #16
   19058:	2d10      	cmp	r5, #16
   1905a:	dd1a      	ble.n	19092 <_vfiprintf_r+0x8a2>
   1905c:	1c42      	adds	r2, r0, #1
   1905e:	4958      	ldr	r1, [pc, #352]	; (191c0 <_vfiprintf_r+0x9d0>)
   19060:	3310      	adds	r3, #16
   19062:	2a07      	cmp	r2, #7
   19064:	e9c9 1700 	strd	r1, r7, [r9]
   19068:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1906c:	ddee      	ble.n	1904c <_vfiprintf_r+0x85c>
   1906e:	aa18      	add	r2, sp, #96	; 0x60
   19070:	b303      	cbz	r3, 190b4 <_vfiprintf_r+0x8c4>
   19072:	4621      	mov	r1, r4
   19074:	4658      	mov	r0, fp
   19076:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1907a:	f7ff fb7d 	bl	18778 <__sprint_r.part.0>
   1907e:	2800      	cmp	r0, #0
   19080:	f47f ad8d 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   19084:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19088:	3d10      	subs	r5, #16
   1908a:	2d10      	cmp	r5, #16
   1908c:	f100 0c01 	add.w	ip, r0, #1
   19090:	dce4      	bgt.n	1905c <_vfiprintf_r+0x86c>
   19092:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19094:	4661      	mov	r1, ip
   19096:	4a4a      	ldr	r2, [pc, #296]	; (191c0 <_vfiprintf_r+0x9d0>)
   19098:	f8c9 5004 	str.w	r5, [r9, #4]
   1909c:	442b      	add	r3, r5
   1909e:	2907      	cmp	r1, #7
   190a0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   190a4:	f8c9 2000 	str.w	r2, [r9]
   190a8:	f300 80e7 	bgt.w	1927a <_vfiprintf_r+0xa8a>
   190ac:	f109 0908 	add.w	r9, r9, #8
   190b0:	3101      	adds	r1, #1
   190b2:	e5ed      	b.n	18c90 <_vfiprintf_r+0x4a0>
   190b4:	f04f 0c01 	mov.w	ip, #1
   190b8:	4618      	mov	r0, r3
   190ba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   190be:	e7ca      	b.n	19056 <_vfiprintf_r+0x866>
   190c0:	f04f 0c01 	mov.w	ip, #1
   190c4:	4618      	mov	r0, r3
   190c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   190ca:	e772      	b.n	18fb2 <_vfiprintf_r+0x7c2>
   190cc:	2b00      	cmp	r3, #0
   190ce:	f000 8104 	beq.w	192da <_vfiprintf_r+0xaea>
   190d2:	ee18 1a10 	vmov	r1, s16
   190d6:	aa18      	add	r2, sp, #96	; 0x60
   190d8:	4658      	mov	r0, fp
   190da:	f7ff fb4d 	bl	18778 <__sprint_r.part.0>
   190de:	2800      	cmp	r0, #0
   190e0:	f47f ad5d 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   190e4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   190e8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   190ec:	1c41      	adds	r1, r0, #1
   190ee:	e5a7      	b.n	18c40 <_vfiprintf_r+0x450>
   190f0:	2302      	movs	r3, #2
   190f2:	aa11      	add	r2, sp, #68	; 0x44
   190f4:	931c      	str	r3, [sp, #112]	; 0x70
   190f6:	921b      	str	r2, [sp, #108]	; 0x6c
   190f8:	2101      	movs	r1, #1
   190fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   190fe:	4608      	mov	r0, r1
   19100:	f109 0908 	add.w	r9, r9, #8
   19104:	1c41      	adds	r1, r0, #1
   19106:	e5ba      	b.n	18c7e <_vfiprintf_r+0x48e>
   19108:	2d10      	cmp	r5, #16
   1910a:	f340 82e5 	ble.w	196d8 <_vfiprintf_r+0xee8>
   1910e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19112:	940f      	str	r4, [sp, #60]	; 0x3c
   19114:	4608      	mov	r0, r1
   19116:	ee18 4a10 	vmov	r4, s16
   1911a:	e007      	b.n	1912c <_vfiprintf_r+0x93c>
   1911c:	f100 0c02 	add.w	ip, r0, #2
   19120:	f109 0908 	add.w	r9, r9, #8
   19124:	4610      	mov	r0, r2
   19126:	3d10      	subs	r5, #16
   19128:	2d10      	cmp	r5, #16
   1912a:	dd1d      	ble.n	19168 <_vfiprintf_r+0x978>
   1912c:	4925      	ldr	r1, [pc, #148]	; (191c4 <_vfiprintf_r+0x9d4>)
   1912e:	f8c9 1000 	str.w	r1, [r9]
   19132:	1c42      	adds	r2, r0, #1
   19134:	3310      	adds	r3, #16
   19136:	2110      	movs	r1, #16
   19138:	2a07      	cmp	r2, #7
   1913a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1913e:	f8c9 1004 	str.w	r1, [r9, #4]
   19142:	ddeb      	ble.n	1911c <_vfiprintf_r+0x92c>
   19144:	aa18      	add	r2, sp, #96	; 0x60
   19146:	b303      	cbz	r3, 1918a <_vfiprintf_r+0x99a>
   19148:	4621      	mov	r1, r4
   1914a:	4658      	mov	r0, fp
   1914c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19150:	f7ff fb12 	bl	18778 <__sprint_r.part.0>
   19154:	2800      	cmp	r0, #0
   19156:	f47f ad22 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   1915a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1915e:	3d10      	subs	r5, #16
   19160:	2d10      	cmp	r5, #16
   19162:	f100 0c01 	add.w	ip, r0, #1
   19166:	dce1      	bgt.n	1912c <_vfiprintf_r+0x93c>
   19168:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1916a:	4660      	mov	r0, ip
   1916c:	4a15      	ldr	r2, [pc, #84]	; (191c4 <_vfiprintf_r+0x9d4>)
   1916e:	f8c9 5004 	str.w	r5, [r9, #4]
   19172:	442b      	add	r3, r5
   19174:	2807      	cmp	r0, #7
   19176:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1917a:	f8c9 2000 	str.w	r2, [r9]
   1917e:	f300 80c1 	bgt.w	19304 <_vfiprintf_r+0xb14>
   19182:	f109 0908 	add.w	r9, r9, #8
   19186:	1c41      	adds	r1, r0, #1
   19188:	e546      	b.n	18c18 <_vfiprintf_r+0x428>
   1918a:	4618      	mov	r0, r3
   1918c:	f04f 0c01 	mov.w	ip, #1
   19190:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19194:	e7c7      	b.n	19126 <_vfiprintf_r+0x936>
   19196:	0776      	lsls	r6, r6, #29
   19198:	9319      	str	r3, [sp, #100]	; 0x64
   1919a:	d553      	bpl.n	19244 <_vfiprintf_r+0xa54>
   1919c:	9a06      	ldr	r2, [sp, #24]
   1919e:	9903      	ldr	r1, [sp, #12]
   191a0:	1a54      	subs	r4, r2, r1
   191a2:	2c00      	cmp	r4, #0
   191a4:	dd4e      	ble.n	19244 <_vfiprintf_r+0xa54>
   191a6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   191aa:	2c10      	cmp	r4, #16
   191ac:	f340 82b0 	ble.w	19710 <_vfiprintf_r+0xf20>
   191b0:	9919      	ldr	r1, [sp, #100]	; 0x64
   191b2:	ee18 6a10 	vmov	r6, s16
   191b6:	2510      	movs	r5, #16
   191b8:	e00d      	b.n	191d6 <_vfiprintf_r+0x9e6>
   191ba:	bf00      	nop
   191bc:	2000111c 	.word	0x2000111c
   191c0:	2000897c 	.word	0x2000897c
   191c4:	20002bd4 	.word	0x20002bd4
   191c8:	1c88      	adds	r0, r1, #2
   191ca:	f109 0908 	add.w	r9, r9, #8
   191ce:	4611      	mov	r1, r2
   191d0:	3c10      	subs	r4, #16
   191d2:	2c10      	cmp	r4, #16
   191d4:	dd1a      	ble.n	1920c <_vfiprintf_r+0xa1c>
   191d6:	1c4a      	adds	r2, r1, #1
   191d8:	48b3      	ldr	r0, [pc, #716]	; (194a8 <_vfiprintf_r+0xcb8>)
   191da:	3310      	adds	r3, #16
   191dc:	2a07      	cmp	r2, #7
   191de:	e9c9 0500 	strd	r0, r5, [r9]
   191e2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   191e6:	ddef      	ble.n	191c8 <_vfiprintf_r+0x9d8>
   191e8:	aa18      	add	r2, sp, #96	; 0x60
   191ea:	b333      	cbz	r3, 1923a <_vfiprintf_r+0xa4a>
   191ec:	4631      	mov	r1, r6
   191ee:	4658      	mov	r0, fp
   191f0:	f7ff fac2 	bl	18778 <__sprint_r.part.0>
   191f4:	2800      	cmp	r0, #0
   191f6:	f47f acd2 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   191fa:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   191fe:	3c10      	subs	r4, #16
   19200:	2c10      	cmp	r4, #16
   19202:	f101 0001 	add.w	r0, r1, #1
   19206:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1920a:	dce4      	bgt.n	191d6 <_vfiprintf_r+0x9e6>
   1920c:	4aa6      	ldr	r2, [pc, #664]	; (194a8 <_vfiprintf_r+0xcb8>)
   1920e:	f8c9 4004 	str.w	r4, [r9, #4]
   19212:	4423      	add	r3, r4
   19214:	2807      	cmp	r0, #7
   19216:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1921a:	f8c9 2000 	str.w	r2, [r9]
   1921e:	f77f ad59 	ble.w	18cd4 <_vfiprintf_r+0x4e4>
   19222:	b17b      	cbz	r3, 19244 <_vfiprintf_r+0xa54>
   19224:	ee18 1a10 	vmov	r1, s16
   19228:	aa18      	add	r2, sp, #96	; 0x60
   1922a:	4658      	mov	r0, fp
   1922c:	f7ff faa4 	bl	18778 <__sprint_r.part.0>
   19230:	2800      	cmp	r0, #0
   19232:	f47f acb4 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   19236:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19238:	e54c      	b.n	18cd4 <_vfiprintf_r+0x4e4>
   1923a:	2001      	movs	r0, #1
   1923c:	4619      	mov	r1, r3
   1923e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19242:	e7c5      	b.n	191d0 <_vfiprintf_r+0x9e0>
   19244:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   19248:	9903      	ldr	r1, [sp, #12]
   1924a:	428a      	cmp	r2, r1
   1924c:	bfac      	ite	ge
   1924e:	189b      	addge	r3, r3, r2
   19250:	185b      	addlt	r3, r3, r1
   19252:	9305      	str	r3, [sp, #20]
   19254:	e549      	b.n	18cea <_vfiprintf_r+0x4fa>
   19256:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   1925a:	058f      	lsls	r7, r1, #22
   1925c:	ee18 3a10 	vmov	r3, s16
   19260:	b28a      	uxth	r2, r1
   19262:	f53f aae8 	bmi.w	18836 <_vfiprintf_r+0x46>
   19266:	ee18 5a10 	vmov	r5, s16
   1926a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1926c:	f7f8 fcb6 	bl	11bdc <__retarget_lock_acquire_recursive>
   19270:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   19274:	b28a      	uxth	r2, r1
   19276:	f7ff bade 	b.w	18836 <_vfiprintf_r+0x46>
   1927a:	2b00      	cmp	r3, #0
   1927c:	f43f ae79 	beq.w	18f72 <_vfiprintf_r+0x782>
   19280:	ee18 1a10 	vmov	r1, s16
   19284:	aa18      	add	r2, sp, #96	; 0x60
   19286:	4658      	mov	r0, fp
   19288:	f7ff fa76 	bl	18778 <__sprint_r.part.0>
   1928c:	2800      	cmp	r0, #0
   1928e:	f47f ac86 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   19292:	9919      	ldr	r1, [sp, #100]	; 0x64
   19294:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19296:	3101      	adds	r1, #1
   19298:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1929c:	e4f8      	b.n	18c90 <_vfiprintf_r+0x4a0>
   1929e:	9219      	str	r2, [sp, #100]	; 0x64
   192a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   192a4:	e45e      	b.n	18b64 <_vfiprintf_r+0x374>
   192a6:	2f00      	cmp	r7, #0
   192a8:	f47f abc3 	bne.w	18a32 <_vfiprintf_r+0x242>
   192ac:	9e03      	ldr	r6, [sp, #12]
   192ae:	2700      	movs	r7, #0
   192b0:	9704      	str	r7, [sp, #16]
   192b2:	ac44      	add	r4, sp, #272	; 0x110
   192b4:	f7ff bbc5 	b.w	18a42 <_vfiprintf_r+0x252>
   192b8:	9b03      	ldr	r3, [sp, #12]
   192ba:	f013 0310 	ands.w	r3, r3, #16
   192be:	d154      	bne.n	1936a <_vfiprintf_r+0xb7a>
   192c0:	9a03      	ldr	r2, [sp, #12]
   192c2:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   192c6:	f000 816b 	beq.w	195a0 <_vfiprintf_r+0xdb0>
   192ca:	9907      	ldr	r1, [sp, #28]
   192cc:	461a      	mov	r2, r3
   192ce:	f851 3b04 	ldr.w	r3, [r1], #4
   192d2:	9107      	str	r1, [sp, #28]
   192d4:	b29b      	uxth	r3, r3
   192d6:	2101      	movs	r1, #1
   192d8:	e401      	b.n	18ade <_vfiprintf_r+0x2ee>
   192da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   192dc:	2a00      	cmp	r2, #0
   192de:	d164      	bne.n	193aa <_vfiprintf_r+0xbba>
   192e0:	4618      	mov	r0, r3
   192e2:	2101      	movs	r1, #1
   192e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   192e8:	e4c9      	b.n	18c7e <_vfiprintf_r+0x48e>
   192ea:	2101      	movs	r1, #1
   192ec:	4618      	mov	r0, r3
   192ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   192f2:	e4c4      	b.n	18c7e <_vfiprintf_r+0x48e>
   192f4:	425b      	negs	r3, r3
   192f6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   192fa:	9603      	str	r6, [sp, #12]
   192fc:	202d      	movs	r0, #45	; 0x2d
   192fe:	2101      	movs	r1, #1
   19300:	f7ff bbee 	b.w	18ae0 <_vfiprintf_r+0x2f0>
   19304:	2b00      	cmp	r3, #0
   19306:	f000 8088 	beq.w	1941a <_vfiprintf_r+0xc2a>
   1930a:	ee18 1a10 	vmov	r1, s16
   1930e:	aa18      	add	r2, sp, #96	; 0x60
   19310:	4658      	mov	r0, fp
   19312:	f7ff fa31 	bl	18778 <__sprint_r.part.0>
   19316:	2800      	cmp	r0, #0
   19318:	f47f ac41 	bne.w	18b9e <_vfiprintf_r+0x3ae>
   1931c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19320:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19324:	1c41      	adds	r1, r0, #1
   19326:	e477      	b.n	18c18 <_vfiprintf_r+0x428>
   19328:	f898 1000 	ldrb.w	r1, [r8]
   1932c:	9307      	str	r3, [sp, #28]
   1932e:	f7ff bad2 	b.w	188d6 <_vfiprintf_r+0xe6>
   19332:	ac44      	add	r4, sp, #272	; 0x110
   19334:	f7ff bb85 	b.w	18a42 <_vfiprintf_r+0x252>
   19338:	f109 0908 	add.w	r9, r9, #8
   1933c:	f10c 0101 	add.w	r1, ip, #1
   19340:	4660      	mov	r0, ip
   19342:	e4a0      	b.n	18c86 <_vfiprintf_r+0x496>
   19344:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   19348:	f040 8197 	bne.w	1967a <_vfiprintf_r+0xe8a>
   1934c:	f851 3b04 	ldr.w	r3, [r1], #4
   19350:	9107      	str	r1, [sp, #28]
   19352:	f7ff bbc0 	b.w	18ad6 <_vfiprintf_r+0x2e6>
   19356:	05b3      	lsls	r3, r6, #22
   19358:	f100 8188 	bmi.w	1966c <_vfiprintf_r+0xe7c>
   1935c:	f852 3b04 	ldr.w	r3, [r2], #4
   19360:	9207      	str	r2, [sp, #28]
   19362:	17da      	asrs	r2, r3, #31
   19364:	4611      	mov	r1, r2
   19366:	f7ff bb52 	b.w	18a0e <_vfiprintf_r+0x21e>
   1936a:	9907      	ldr	r1, [sp, #28]
   1936c:	f851 3b04 	ldr.w	r3, [r1], #4
   19370:	9107      	str	r1, [sp, #28]
   19372:	2101      	movs	r1, #1
   19374:	f7ff bbb3 	b.w	18ade <_vfiprintf_r+0x2ee>
   19378:	9b07      	ldr	r3, [sp, #28]
   1937a:	9805      	ldr	r0, [sp, #20]
   1937c:	f853 1b04 	ldr.w	r1, [r3], #4
   19380:	9307      	str	r3, [sp, #28]
   19382:	17c2      	asrs	r2, r0, #31
   19384:	e9c1 0200 	strd	r0, r2, [r1]
   19388:	f7ff ba7d 	b.w	18886 <_vfiprintf_r+0x96>
   1938c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1938e:	2b00      	cmp	r3, #0
   19390:	f43f ab26 	beq.w	189e0 <_vfiprintf_r+0x1f0>
   19394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19396:	781b      	ldrb	r3, [r3, #0]
   19398:	2b00      	cmp	r3, #0
   1939a:	f43f ab21 	beq.w	189e0 <_vfiprintf_r+0x1f0>
   1939e:	f898 1000 	ldrb.w	r1, [r8]
   193a2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   193a6:	f7ff ba96 	b.w	188d6 <_vfiprintf_r+0xe6>
   193aa:	2302      	movs	r3, #2
   193ac:	aa11      	add	r2, sp, #68	; 0x44
   193ae:	931c      	str	r3, [sp, #112]	; 0x70
   193b0:	921b      	str	r2, [sp, #108]	; 0x6c
   193b2:	2001      	movs	r0, #1
   193b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   193b8:	e6a2      	b.n	19100 <_vfiprintf_r+0x910>
   193ba:	9603      	str	r6, [sp, #12]
   193bc:	e571      	b.n	18ea2 <_vfiprintf_r+0x6b2>
   193be:	4b3b      	ldr	r3, [pc, #236]	; (194ac <_vfiprintf_r+0xcbc>)
   193c0:	930c      	str	r3, [sp, #48]	; 0x30
   193c2:	f016 0220 	ands.w	r2, r6, #32
   193c6:	d059      	beq.n	1947c <_vfiprintf_r+0xc8c>
   193c8:	9b07      	ldr	r3, [sp, #28]
   193ca:	3307      	adds	r3, #7
   193cc:	f023 0307 	bic.w	r3, r3, #7
   193d0:	4618      	mov	r0, r3
   193d2:	685a      	ldr	r2, [r3, #4]
   193d4:	f850 3b08 	ldr.w	r3, [r0], #8
   193d8:	9007      	str	r0, [sp, #28]
   193da:	07f4      	lsls	r4, r6, #31
   193dc:	d509      	bpl.n	193f2 <_vfiprintf_r+0xc02>
   193de:	ea53 0002 	orrs.w	r0, r3, r2
   193e2:	d006      	beq.n	193f2 <_vfiprintf_r+0xc02>
   193e4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   193e8:	2130      	movs	r1, #48	; 0x30
   193ea:	f046 0602 	orr.w	r6, r6, #2
   193ee:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   193f2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   193f6:	9103      	str	r1, [sp, #12]
   193f8:	2102      	movs	r1, #2
   193fa:	f7ff bb70 	b.w	18ade <_vfiprintf_r+0x2ee>
   193fe:	4b2c      	ldr	r3, [pc, #176]	; (194b0 <_vfiprintf_r+0xcc0>)
   19400:	930c      	str	r3, [sp, #48]	; 0x30
   19402:	e7de      	b.n	193c2 <_vfiprintf_r+0xbd2>
   19404:	9b07      	ldr	r3, [sp, #28]
   19406:	2101      	movs	r1, #1
   19408:	f853 2b04 	ldr.w	r2, [r3], #4
   1940c:	9103      	str	r1, [sp, #12]
   1940e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   19412:	9307      	str	r3, [sp, #28]
   19414:	9104      	str	r1, [sp, #16]
   19416:	ac2b      	add	r4, sp, #172	; 0xac
   19418:	e4df      	b.n	18dda <_vfiprintf_r+0x5ea>
   1941a:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   1941e:	2a00      	cmp	r2, #0
   19420:	f040 8132 	bne.w	19688 <_vfiprintf_r+0xe98>
   19424:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19426:	2a00      	cmp	r2, #0
   19428:	f47f ae62 	bne.w	190f0 <_vfiprintf_r+0x900>
   1942c:	4618      	mov	r0, r3
   1942e:	2101      	movs	r1, #1
   19430:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19434:	e427      	b.n	18c86 <_vfiprintf_r+0x496>
   19436:	2100      	movs	r1, #0
   19438:	2208      	movs	r2, #8
   1943a:	a816      	add	r0, sp, #88	; 0x58
   1943c:	9413      	str	r4, [sp, #76]	; 0x4c
   1943e:	f7f8 fa13 	bl	11868 <memset>
   19442:	1c79      	adds	r1, r7, #1
   19444:	f000 80bc 	beq.w	195c0 <_vfiprintf_r+0xdd0>
   19448:	2500      	movs	r5, #0
   1944a:	9407      	str	r4, [sp, #28]
   1944c:	462c      	mov	r4, r5
   1944e:	e00c      	b.n	1946a <_vfiprintf_r+0xc7a>
   19450:	a92b      	add	r1, sp, #172	; 0xac
   19452:	4658      	mov	r0, fp
   19454:	f7fe ff2e 	bl	182b4 <_wcrtomb_r>
   19458:	1c42      	adds	r2, r0, #1
   1945a:	4420      	add	r0, r4
   1945c:	f000 816b 	beq.w	19736 <_vfiprintf_r+0xf46>
   19460:	42b8      	cmp	r0, r7
   19462:	dc08      	bgt.n	19476 <_vfiprintf_r+0xc86>
   19464:	f000 8170 	beq.w	19748 <_vfiprintf_r+0xf58>
   19468:	4604      	mov	r4, r0
   1946a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1946c:	5952      	ldr	r2, [r2, r5]
   1946e:	ab16      	add	r3, sp, #88	; 0x58
   19470:	3504      	adds	r5, #4
   19472:	2a00      	cmp	r2, #0
   19474:	d1ec      	bne.n	19450 <_vfiprintf_r+0xc60>
   19476:	9404      	str	r4, [sp, #16]
   19478:	9c07      	ldr	r4, [sp, #28]
   1947a:	e0af      	b.n	195dc <_vfiprintf_r+0xdec>
   1947c:	f016 0310 	ands.w	r3, r6, #16
   19480:	9807      	ldr	r0, [sp, #28]
   19482:	d10c      	bne.n	1949e <_vfiprintf_r+0xcae>
   19484:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   19488:	d005      	beq.n	19496 <_vfiprintf_r+0xca6>
   1948a:	461a      	mov	r2, r3
   1948c:	f850 3b04 	ldr.w	r3, [r0], #4
   19490:	9007      	str	r0, [sp, #28]
   19492:	b29b      	uxth	r3, r3
   19494:	e7a1      	b.n	193da <_vfiprintf_r+0xbea>
   19496:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1949a:	f040 80e1 	bne.w	19660 <_vfiprintf_r+0xe70>
   1949e:	f850 3b04 	ldr.w	r3, [r0], #4
   194a2:	9007      	str	r0, [sp, #28]
   194a4:	e799      	b.n	193da <_vfiprintf_r+0xbea>
   194a6:	bf00      	nop
   194a8:	20002bd4 	.word	0x20002bd4
   194ac:	2000111c 	.word	0x2000111c
   194b0:	20001130 	.word	0x20001130
   194b4:	9903      	ldr	r1, [sp, #12]
   194b6:	9704      	str	r7, [sp, #16]
   194b8:	ac44      	add	r4, sp, #272	; 0x110
   194ba:	469e      	mov	lr, r3
   194bc:	ee08 ba90 	vmov	s17, fp
   194c0:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   194c4:	f04f 0c00 	mov.w	ip, #0
   194c8:	4623      	mov	r3, r4
   194ca:	e006      	b.n	194da <_vfiprintf_r+0xcea>
   194cc:	f1be 0f0a 	cmp.w	lr, #10
   194d0:	f172 0200 	sbcs.w	r2, r2, #0
   194d4:	d339      	bcc.n	1954a <_vfiprintf_r+0xd5a>
   194d6:	46a6      	mov	lr, r4
   194d8:	462a      	mov	r2, r5
   194da:	49a6      	ldr	r1, [pc, #664]	; (19774 <_vfiprintf_r+0xf84>)
   194dc:	eb1e 0002 	adds.w	r0, lr, r2
   194e0:	f140 0000 	adc.w	r0, r0, #0
   194e4:	460f      	mov	r7, r1
   194e6:	fba1 1400 	umull	r1, r4, r1, r0
   194ea:	f024 0103 	bic.w	r1, r4, #3
   194ee:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   194f2:	1a40      	subs	r0, r0, r1
   194f4:	ebbe 0100 	subs.w	r1, lr, r0
   194f8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   194fc:	f162 0400 	sbc.w	r4, r2, #0
   19500:	fb05 f501 	mul.w	r5, r5, r1
   19504:	fb07 5504 	mla	r5, r7, r4, r5
   19508:	fba1 4107 	umull	r4, r1, r1, r7
   1950c:	440d      	add	r5, r1
   1950e:	2705      	movs	r7, #5
   19510:	f004 0101 	and.w	r1, r4, #1
   19514:	fba1 1b07 	umull	r1, fp, r1, r7
   19518:	1809      	adds	r1, r1, r0
   1951a:	0864      	lsrs	r4, r4, #1
   1951c:	3130      	adds	r1, #48	; 0x30
   1951e:	f803 1c01 	strb.w	r1, [r3, #-1]
   19522:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   19526:	f10c 0c01 	add.w	ip, ip, #1
   1952a:	3b01      	subs	r3, #1
   1952c:	086d      	lsrs	r5, r5, #1
   1952e:	2e00      	cmp	r6, #0
   19530:	d0cc      	beq.n	194cc <_vfiprintf_r+0xcdc>
   19532:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19534:	7809      	ldrb	r1, [r1, #0]
   19536:	4561      	cmp	r1, ip
   19538:	d1c8      	bne.n	194cc <_vfiprintf_r+0xcdc>
   1953a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1953e:	d0c5      	beq.n	194cc <_vfiprintf_r+0xcdc>
   19540:	f1be 0f0a 	cmp.w	lr, #10
   19544:	f172 0200 	sbcs.w	r2, r2, #0
   19548:	d26c      	bcs.n	19624 <_vfiprintf_r+0xe34>
   1954a:	461c      	mov	r4, r3
   1954c:	ab44      	add	r3, sp, #272	; 0x110
   1954e:	1b1b      	subs	r3, r3, r4
   19550:	9f04      	ldr	r7, [sp, #16]
   19552:	9e03      	ldr	r6, [sp, #12]
   19554:	9304      	str	r3, [sp, #16]
   19556:	ee18 ba90 	vmov	fp, s17
   1955a:	f7ff ba72 	b.w	18a42 <_vfiprintf_r+0x252>
   1955e:	9603      	str	r6, [sp, #12]
   19560:	f7ff ba62 	b.w	18a28 <_vfiprintf_r+0x238>
   19564:	4658      	mov	r0, fp
   19566:	f7f7 ff47 	bl	113f8 <__sinit>
   1956a:	f7ff b95b 	b.w	18824 <_vfiprintf_r+0x34>
   1956e:	2901      	cmp	r1, #1
   19570:	9603      	str	r6, [sp, #12]
   19572:	f47f accd 	bne.w	18f10 <_vfiprintf_r+0x720>
   19576:	f7ff ba5c 	b.w	18a32 <_vfiprintf_r+0x242>
   1957a:	9b07      	ldr	r3, [sp, #28]
   1957c:	9905      	ldr	r1, [sp, #20]
   1957e:	f853 2b04 	ldr.w	r2, [r3], #4
   19582:	6011      	str	r1, [r2, #0]
   19584:	9307      	str	r3, [sp, #28]
   19586:	f7ff b97e 	b.w	18886 <_vfiprintf_r+0x96>
   1958a:	2f06      	cmp	r7, #6
   1958c:	463b      	mov	r3, r7
   1958e:	9a03      	ldr	r2, [sp, #12]
   19590:	4c79      	ldr	r4, [pc, #484]	; (19778 <_vfiprintf_r+0xf88>)
   19592:	9207      	str	r2, [sp, #28]
   19594:	bf28      	it	cs
   19596:	2306      	movcs	r3, #6
   19598:	9304      	str	r3, [sp, #16]
   1959a:	9303      	str	r3, [sp, #12]
   1959c:	f7ff bb25 	b.w	18bea <_vfiprintf_r+0x3fa>
   195a0:	9b03      	ldr	r3, [sp, #12]
   195a2:	9907      	ldr	r1, [sp, #28]
   195a4:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   195a8:	bf14      	ite	ne
   195aa:	f851 3b04 	ldrne.w	r3, [r1], #4
   195ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   195b2:	9107      	str	r1, [sp, #28]
   195b4:	bf1c      	itt	ne
   195b6:	4602      	movne	r2, r0
   195b8:	b2db      	uxtbne	r3, r3
   195ba:	2101      	movs	r1, #1
   195bc:	f7ff ba8f 	b.w	18ade <_vfiprintf_r+0x2ee>
   195c0:	ab16      	add	r3, sp, #88	; 0x58
   195c2:	9300      	str	r3, [sp, #0]
   195c4:	2300      	movs	r3, #0
   195c6:	4619      	mov	r1, r3
   195c8:	aa13      	add	r2, sp, #76	; 0x4c
   195ca:	4658      	mov	r0, fp
   195cc:	f7fe fe98 	bl	18300 <_wcsrtombs_r>
   195d0:	4603      	mov	r3, r0
   195d2:	3301      	adds	r3, #1
   195d4:	9004      	str	r0, [sp, #16]
   195d6:	f000 80ae 	beq.w	19736 <_vfiprintf_r+0xf46>
   195da:	9413      	str	r4, [sp, #76]	; 0x4c
   195dc:	9b04      	ldr	r3, [sp, #16]
   195de:	2b00      	cmp	r3, #0
   195e0:	d030      	beq.n	19644 <_vfiprintf_r+0xe54>
   195e2:	2b63      	cmp	r3, #99	; 0x63
   195e4:	dc63      	bgt.n	196ae <_vfiprintf_r+0xebe>
   195e6:	2300      	movs	r3, #0
   195e8:	9308      	str	r3, [sp, #32]
   195ea:	ac2b      	add	r4, sp, #172	; 0xac
   195ec:	2208      	movs	r2, #8
   195ee:	2100      	movs	r1, #0
   195f0:	a816      	add	r0, sp, #88	; 0x58
   195f2:	f7f8 f939 	bl	11868 <memset>
   195f6:	9d04      	ldr	r5, [sp, #16]
   195f8:	ab16      	add	r3, sp, #88	; 0x58
   195fa:	9300      	str	r3, [sp, #0]
   195fc:	aa13      	add	r2, sp, #76	; 0x4c
   195fe:	462b      	mov	r3, r5
   19600:	4621      	mov	r1, r4
   19602:	4658      	mov	r0, fp
   19604:	f7fe fe7c 	bl	18300 <_wcsrtombs_r>
   19608:	4285      	cmp	r5, r0
   1960a:	f040 80ab 	bne.w	19764 <_vfiprintf_r+0xf74>
   1960e:	9b03      	ldr	r3, [sp, #12]
   19610:	9a04      	ldr	r2, [sp, #16]
   19612:	9307      	str	r3, [sp, #28]
   19614:	2300      	movs	r3, #0
   19616:	54a3      	strb	r3, [r4, r2]
   19618:	461f      	mov	r7, r3
   1961a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1961e:	9303      	str	r3, [sp, #12]
   19620:	f7ff ba16 	b.w	18a50 <_vfiprintf_r+0x260>
   19624:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19626:	990d      	ldr	r1, [sp, #52]	; 0x34
   19628:	1a9b      	subs	r3, r3, r2
   1962a:	4618      	mov	r0, r3
   1962c:	9308      	str	r3, [sp, #32]
   1962e:	f7f8 fa09 	bl	11a44 <strncpy>
   19632:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19634:	9b08      	ldr	r3, [sp, #32]
   19636:	784a      	ldrb	r2, [r1, #1]
   19638:	b10a      	cbz	r2, 1963e <_vfiprintf_r+0xe4e>
   1963a:	3101      	adds	r1, #1
   1963c:	910b      	str	r1, [sp, #44]	; 0x2c
   1963e:	f04f 0c00 	mov.w	ip, #0
   19642:	e748      	b.n	194d6 <_vfiprintf_r+0xce6>
   19644:	9b03      	ldr	r3, [sp, #12]
   19646:	9307      	str	r3, [sp, #28]
   19648:	9b04      	ldr	r3, [sp, #16]
   1964a:	9303      	str	r3, [sp, #12]
   1964c:	461f      	mov	r7, r3
   1964e:	9308      	str	r3, [sp, #32]
   19650:	f7ff b9fe 	b.w	18a50 <_vfiprintf_r+0x260>
   19654:	2101      	movs	r1, #1
   19656:	4618      	mov	r0, r3
   19658:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1965c:	f7ff bb13 	b.w	18c86 <_vfiprintf_r+0x496>
   19660:	f850 3b04 	ldr.w	r3, [r0], #4
   19664:	9007      	str	r0, [sp, #28]
   19666:	4622      	mov	r2, r4
   19668:	b2db      	uxtb	r3, r3
   1966a:	e6b6      	b.n	193da <_vfiprintf_r+0xbea>
   1966c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   19670:	9207      	str	r2, [sp, #28]
   19672:	17da      	asrs	r2, r3, #31
   19674:	4611      	mov	r1, r2
   19676:	f7ff b9ca 	b.w	18a0e <_vfiprintf_r+0x21e>
   1967a:	f851 3b04 	ldr.w	r3, [r1], #4
   1967e:	9107      	str	r1, [sp, #28]
   19680:	4602      	mov	r2, r0
   19682:	b2db      	uxtb	r3, r3
   19684:	f7ff ba27 	b.w	18ad6 <_vfiprintf_r+0x2e6>
   19688:	2301      	movs	r3, #1
   1968a:	931c      	str	r3, [sp, #112]	; 0x70
   1968c:	2101      	movs	r1, #1
   1968e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   19692:	931b      	str	r3, [sp, #108]	; 0x6c
   19694:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19698:	460b      	mov	r3, r1
   1969a:	f7ff bacd 	b.w	18c38 <_vfiprintf_r+0x448>
   1969e:	9b07      	ldr	r3, [sp, #28]
   196a0:	9905      	ldr	r1, [sp, #20]
   196a2:	f853 2b04 	ldr.w	r2, [r3], #4
   196a6:	9307      	str	r3, [sp, #28]
   196a8:	8011      	strh	r1, [r2, #0]
   196aa:	f7ff b8ec 	b.w	18886 <_vfiprintf_r+0x96>
   196ae:	1c59      	adds	r1, r3, #1
   196b0:	4658      	mov	r0, fp
   196b2:	f7f6 f969 	bl	f988 <_malloc_r>
   196b6:	4604      	mov	r4, r0
   196b8:	2800      	cmp	r0, #0
   196ba:	d03c      	beq.n	19736 <_vfiprintf_r+0xf46>
   196bc:	9008      	str	r0, [sp, #32]
   196be:	e795      	b.n	195ec <_vfiprintf_r+0xdfc>
   196c0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   196c2:	f7f8 fa8d 	bl	11be0 <__retarget_lock_release_recursive>
   196c6:	f7ff b9e9 	b.w	18a9c <_vfiprintf_r+0x2ac>
   196ca:	9b03      	ldr	r3, [sp, #12]
   196cc:	9307      	str	r3, [sp, #28]
   196ce:	e9cd 7703 	strd	r7, r7, [sp, #12]
   196d2:	9f08      	ldr	r7, [sp, #32]
   196d4:	f7ff b9bc 	b.w	18a50 <_vfiprintf_r+0x260>
   196d8:	9819      	ldr	r0, [sp, #100]	; 0x64
   196da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   196dc:	3001      	adds	r0, #1
   196de:	e545      	b.n	1916c <_vfiprintf_r+0x97c>
   196e0:	9b03      	ldr	r3, [sp, #12]
   196e2:	9307      	str	r3, [sp, #28]
   196e4:	4620      	mov	r0, r4
   196e6:	f7f8 fcab 	bl	12040 <strlen>
   196ea:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   196ee:	462f      	mov	r7, r5
   196f0:	9004      	str	r0, [sp, #16]
   196f2:	9303      	str	r3, [sp, #12]
   196f4:	9508      	str	r5, [sp, #32]
   196f6:	f7ff b9ab 	b.w	18a50 <_vfiprintf_r+0x260>
   196fa:	ee18 1a10 	vmov	r1, s16
   196fe:	aa18      	add	r2, sp, #96	; 0x60
   19700:	4658      	mov	r0, fp
   19702:	f7ff f839 	bl	18778 <__sprint_r.part.0>
   19706:	2800      	cmp	r0, #0
   19708:	f43f aa36 	beq.w	18b78 <_vfiprintf_r+0x388>
   1970c:	f7ff ba4d 	b.w	18baa <_vfiprintf_r+0x3ba>
   19710:	9819      	ldr	r0, [sp, #100]	; 0x64
   19712:	3001      	adds	r0, #1
   19714:	e57a      	b.n	1920c <_vfiprintf_r+0xa1c>
   19716:	468c      	mov	ip, r1
   19718:	e46e      	b.n	18ff8 <_vfiprintf_r+0x808>
   1971a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1971c:	07d9      	lsls	r1, r3, #31
   1971e:	d405      	bmi.n	1972c <_vfiprintf_r+0xf3c>
   19720:	89ab      	ldrh	r3, [r5, #12]
   19722:	059a      	lsls	r2, r3, #22
   19724:	d402      	bmi.n	1972c <_vfiprintf_r+0xf3c>
   19726:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19728:	f7f8 fa5a 	bl	11be0 <__retarget_lock_release_recursive>
   1972c:	f04f 33ff 	mov.w	r3, #4294967295
   19730:	9305      	str	r3, [sp, #20]
   19732:	f7ff ba49 	b.w	18bc8 <_vfiprintf_r+0x3d8>
   19736:	ee18 2a10 	vmov	r2, s16
   1973a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1973e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19742:	8193      	strh	r3, [r2, #12]
   19744:	f7ff ba35 	b.w	18bb2 <_vfiprintf_r+0x3c2>
   19748:	9c07      	ldr	r4, [sp, #28]
   1974a:	9704      	str	r7, [sp, #16]
   1974c:	e746      	b.n	195dc <_vfiprintf_r+0xdec>
   1974e:	9b07      	ldr	r3, [sp, #28]
   19750:	f898 1001 	ldrb.w	r1, [r8, #1]
   19754:	f853 7b04 	ldr.w	r7, [r3], #4
   19758:	9307      	str	r3, [sp, #28]
   1975a:	4690      	mov	r8, r2
   1975c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   19760:	f7ff b8b9 	b.w	188d6 <_vfiprintf_r+0xe6>
   19764:	ee18 2a10 	vmov	r2, s16
   19768:	8993      	ldrh	r3, [r2, #12]
   1976a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1976e:	8193      	strh	r3, [r2, #12]
   19770:	f7ff ba15 	b.w	18b9e <_vfiprintf_r+0x3ae>
   19774:	cccccccd 	.word	0xcccccccd
   19778:	20001144 	.word	0x20001144

0001977c <__sbprintf>:
   1977c:	b570      	push	{r4, r5, r6, lr}
   1977e:	460c      	mov	r4, r1
   19780:	8989      	ldrh	r1, [r1, #12]
   19782:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   19786:	f021 0102 	bic.w	r1, r1, #2
   1978a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1978e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   19790:	911b      	str	r1, [sp, #108]	; 0x6c
   19792:	89e1      	ldrh	r1, [r4, #14]
   19794:	f8ad 1016 	strh.w	r1, [sp, #22]
   19798:	69e1      	ldr	r1, [r4, #28]
   1979a:	9109      	str	r1, [sp, #36]	; 0x24
   1979c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1979e:	910b      	str	r1, [sp, #44]	; 0x2c
   197a0:	a91c      	add	r1, sp, #112	; 0x70
   197a2:	9102      	str	r1, [sp, #8]
   197a4:	9106      	str	r1, [sp, #24]
   197a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   197aa:	4606      	mov	r6, r0
   197ac:	9104      	str	r1, [sp, #16]
   197ae:	9107      	str	r1, [sp, #28]
   197b0:	a818      	add	r0, sp, #96	; 0x60
   197b2:	2100      	movs	r1, #0
   197b4:	e9cd 3200 	strd	r3, r2, [sp]
   197b8:	9108      	str	r1, [sp, #32]
   197ba:	f7f8 fa0b 	bl	11bd4 <__retarget_lock_init_recursive>
   197be:	e9dd 3200 	ldrd	r3, r2, [sp]
   197c2:	a902      	add	r1, sp, #8
   197c4:	4630      	mov	r0, r6
   197c6:	f7ff f813 	bl	187f0 <_vfiprintf_r>
   197ca:	1e05      	subs	r5, r0, #0
   197cc:	db07      	blt.n	197de <__sbprintf+0x62>
   197ce:	a902      	add	r1, sp, #8
   197d0:	4630      	mov	r0, r6
   197d2:	f7fd fad3 	bl	16d7c <_fflush_r>
   197d6:	2800      	cmp	r0, #0
   197d8:	bf18      	it	ne
   197da:	f04f 35ff 	movne.w	r5, #4294967295
   197de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   197e2:	065b      	lsls	r3, r3, #25
   197e4:	d503      	bpl.n	197ee <__sbprintf+0x72>
   197e6:	89a3      	ldrh	r3, [r4, #12]
   197e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   197ec:	81a3      	strh	r3, [r4, #12]
   197ee:	9818      	ldr	r0, [sp, #96]	; 0x60
   197f0:	f7f8 f9f2 	bl	11bd8 <__retarget_lock_close_recursive>
   197f4:	4628      	mov	r0, r5
   197f6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   197fa:	bd70      	pop	{r4, r5, r6, pc}

000197fc <__sfvwrite_r>:
   197fc:	6893      	ldr	r3, [r2, #8]
   197fe:	2b00      	cmp	r3, #0
   19800:	f000 8085 	beq.w	1990e <__sfvwrite_r+0x112>
   19804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19808:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1980c:	460c      	mov	r4, r1
   1980e:	0719      	lsls	r1, r3, #28
   19810:	4680      	mov	r8, r0
   19812:	b083      	sub	sp, #12
   19814:	4617      	mov	r7, r2
   19816:	b298      	uxth	r0, r3
   19818:	d525      	bpl.n	19866 <__sfvwrite_r+0x6a>
   1981a:	6923      	ldr	r3, [r4, #16]
   1981c:	b31b      	cbz	r3, 19866 <__sfvwrite_r+0x6a>
   1981e:	f010 0302 	ands.w	r3, r0, #2
   19822:	683d      	ldr	r5, [r7, #0]
   19824:	d02d      	beq.n	19882 <__sfvwrite_r+0x86>
   19826:	f04f 0a00 	mov.w	sl, #0
   1982a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 19aec <__sfvwrite_r+0x2f0>
   1982e:	4656      	mov	r6, sl
   19830:	46b9      	mov	r9, r7
   19832:	455e      	cmp	r6, fp
   19834:	4633      	mov	r3, r6
   19836:	4652      	mov	r2, sl
   19838:	bf28      	it	cs
   1983a:	465b      	movcs	r3, fp
   1983c:	4640      	mov	r0, r8
   1983e:	2e00      	cmp	r6, #0
   19840:	d052      	beq.n	198e8 <__sfvwrite_r+0xec>
   19842:	69e1      	ldr	r1, [r4, #28]
   19844:	6a67      	ldr	r7, [r4, #36]	; 0x24
   19846:	47b8      	blx	r7
   19848:	2800      	cmp	r0, #0
   1984a:	dd56      	ble.n	198fa <__sfvwrite_r+0xfe>
   1984c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   19850:	1a1b      	subs	r3, r3, r0
   19852:	4482      	add	sl, r0
   19854:	1a36      	subs	r6, r6, r0
   19856:	f8c9 3008 	str.w	r3, [r9, #8]
   1985a:	2b00      	cmp	r3, #0
   1985c:	d1e9      	bne.n	19832 <__sfvwrite_r+0x36>
   1985e:	2000      	movs	r0, #0
   19860:	b003      	add	sp, #12
   19862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19866:	4621      	mov	r1, r4
   19868:	4640      	mov	r0, r8
   1986a:	f000 f97d 	bl	19b68 <__swsetup_r>
   1986e:	2800      	cmp	r0, #0
   19870:	f040 8138 	bne.w	19ae4 <__sfvwrite_r+0x2e8>
   19874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19878:	683d      	ldr	r5, [r7, #0]
   1987a:	b298      	uxth	r0, r3
   1987c:	f010 0302 	ands.w	r3, r0, #2
   19880:	d1d1      	bne.n	19826 <__sfvwrite_r+0x2a>
   19882:	f010 0901 	ands.w	r9, r0, #1
   19886:	d144      	bne.n	19912 <__sfvwrite_r+0x116>
   19888:	464e      	mov	r6, r9
   1988a:	9700      	str	r7, [sp, #0]
   1988c:	b346      	cbz	r6, 198e0 <__sfvwrite_r+0xe4>
   1988e:	0582      	lsls	r2, r0, #22
   19890:	f8d4 b008 	ldr.w	fp, [r4, #8]
   19894:	f140 8085 	bpl.w	199a2 <__sfvwrite_r+0x1a6>
   19898:	45b3      	cmp	fp, r6
   1989a:	465a      	mov	r2, fp
   1989c:	f200 80b4 	bhi.w	19a08 <__sfvwrite_r+0x20c>
   198a0:	f410 6f90 	tst.w	r0, #1152	; 0x480
   198a4:	f040 80c1 	bne.w	19a2a <__sfvwrite_r+0x22e>
   198a8:	6820      	ldr	r0, [r4, #0]
   198aa:	9201      	str	r2, [sp, #4]
   198ac:	4649      	mov	r1, r9
   198ae:	f7f7 ff5f 	bl	11770 <memmove>
   198b2:	68a3      	ldr	r3, [r4, #8]
   198b4:	9a01      	ldr	r2, [sp, #4]
   198b6:	eba3 010b 	sub.w	r1, r3, fp
   198ba:	6823      	ldr	r3, [r4, #0]
   198bc:	60a1      	str	r1, [r4, #8]
   198be:	4413      	add	r3, r2
   198c0:	46b2      	mov	sl, r6
   198c2:	6023      	str	r3, [r4, #0]
   198c4:	2600      	movs	r6, #0
   198c6:	9a00      	ldr	r2, [sp, #0]
   198c8:	6893      	ldr	r3, [r2, #8]
   198ca:	eba3 030a 	sub.w	r3, r3, sl
   198ce:	44d1      	add	r9, sl
   198d0:	6093      	str	r3, [r2, #8]
   198d2:	2b00      	cmp	r3, #0
   198d4:	d0c3      	beq.n	1985e <__sfvwrite_r+0x62>
   198d6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   198da:	b280      	uxth	r0, r0
   198dc:	2e00      	cmp	r6, #0
   198de:	d1d6      	bne.n	1988e <__sfvwrite_r+0x92>
   198e0:	e9d5 9600 	ldrd	r9, r6, [r5]
   198e4:	3508      	adds	r5, #8
   198e6:	e7d1      	b.n	1988c <__sfvwrite_r+0x90>
   198e8:	e9d5 a600 	ldrd	sl, r6, [r5]
   198ec:	3508      	adds	r5, #8
   198ee:	e7a0      	b.n	19832 <__sfvwrite_r+0x36>
   198f0:	4621      	mov	r1, r4
   198f2:	4640      	mov	r0, r8
   198f4:	f7fd fa42 	bl	16d7c <_fflush_r>
   198f8:	b388      	cbz	r0, 1995e <__sfvwrite_r+0x162>
   198fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   198fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19902:	f04f 30ff 	mov.w	r0, #4294967295
   19906:	81a3      	strh	r3, [r4, #12]
   19908:	b003      	add	sp, #12
   1990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1990e:	2000      	movs	r0, #0
   19910:	4770      	bx	lr
   19912:	461e      	mov	r6, r3
   19914:	46ba      	mov	sl, r7
   19916:	4699      	mov	r9, r3
   19918:	4618      	mov	r0, r3
   1991a:	9500      	str	r5, [sp, #0]
   1991c:	461f      	mov	r7, r3
   1991e:	b366      	cbz	r6, 1997a <__sfvwrite_r+0x17e>
   19920:	2800      	cmp	r0, #0
   19922:	d032      	beq.n	1998a <__sfvwrite_r+0x18e>
   19924:	464a      	mov	r2, r9
   19926:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1992a:	6820      	ldr	r0, [r4, #0]
   1992c:	68a5      	ldr	r5, [r4, #8]
   1992e:	42b2      	cmp	r2, r6
   19930:	bf28      	it	cs
   19932:	4632      	movcs	r2, r6
   19934:	4288      	cmp	r0, r1
   19936:	d904      	bls.n	19942 <__sfvwrite_r+0x146>
   19938:	eb05 0b03 	add.w	fp, r5, r3
   1993c:	455a      	cmp	r2, fp
   1993e:	f300 80a7 	bgt.w	19a90 <__sfvwrite_r+0x294>
   19942:	4293      	cmp	r3, r2
   19944:	dc64      	bgt.n	19a10 <__sfvwrite_r+0x214>
   19946:	69e1      	ldr	r1, [r4, #28]
   19948:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1994a:	463a      	mov	r2, r7
   1994c:	4640      	mov	r0, r8
   1994e:	47a8      	blx	r5
   19950:	f1b0 0b00 	subs.w	fp, r0, #0
   19954:	ddd1      	ble.n	198fa <__sfvwrite_r+0xfe>
   19956:	ebb9 090b 	subs.w	r9, r9, fp
   1995a:	d0c9      	beq.n	198f0 <__sfvwrite_r+0xf4>
   1995c:	2001      	movs	r0, #1
   1995e:	f8da 3008 	ldr.w	r3, [sl, #8]
   19962:	eba3 030b 	sub.w	r3, r3, fp
   19966:	445f      	add	r7, fp
   19968:	eba6 060b 	sub.w	r6, r6, fp
   1996c:	f8ca 3008 	str.w	r3, [sl, #8]
   19970:	2b00      	cmp	r3, #0
   19972:	f43f af74 	beq.w	1985e <__sfvwrite_r+0x62>
   19976:	2e00      	cmp	r6, #0
   19978:	d1d2      	bne.n	19920 <__sfvwrite_r+0x124>
   1997a:	9a00      	ldr	r2, [sp, #0]
   1997c:	6856      	ldr	r6, [r2, #4]
   1997e:	4613      	mov	r3, r2
   19980:	3208      	adds	r2, #8
   19982:	9200      	str	r2, [sp, #0]
   19984:	2e00      	cmp	r6, #0
   19986:	d0f8      	beq.n	1997a <__sfvwrite_r+0x17e>
   19988:	681f      	ldr	r7, [r3, #0]
   1998a:	4632      	mov	r2, r6
   1998c:	210a      	movs	r1, #10
   1998e:	4638      	mov	r0, r7
   19990:	f7f8 fb06 	bl	11fa0 <memchr>
   19994:	2800      	cmp	r0, #0
   19996:	f000 809c 	beq.w	19ad2 <__sfvwrite_r+0x2d6>
   1999a:	3001      	adds	r0, #1
   1999c:	eba0 0907 	sub.w	r9, r0, r7
   199a0:	e7c0      	b.n	19924 <__sfvwrite_r+0x128>
   199a2:	6820      	ldr	r0, [r4, #0]
   199a4:	6923      	ldr	r3, [r4, #16]
   199a6:	4298      	cmp	r0, r3
   199a8:	d816      	bhi.n	199d8 <__sfvwrite_r+0x1dc>
   199aa:	6962      	ldr	r2, [r4, #20]
   199ac:	42b2      	cmp	r2, r6
   199ae:	d813      	bhi.n	199d8 <__sfvwrite_r+0x1dc>
   199b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   199b4:	42b3      	cmp	r3, r6
   199b6:	bf28      	it	cs
   199b8:	4633      	movcs	r3, r6
   199ba:	69e1      	ldr	r1, [r4, #28]
   199bc:	fb93 f3f2 	sdiv	r3, r3, r2
   199c0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   199c2:	fb02 f303 	mul.w	r3, r2, r3
   199c6:	4640      	mov	r0, r8
   199c8:	464a      	mov	r2, r9
   199ca:	47b8      	blx	r7
   199cc:	f1b0 0a00 	subs.w	sl, r0, #0
   199d0:	dd93      	ble.n	198fa <__sfvwrite_r+0xfe>
   199d2:	eba6 060a 	sub.w	r6, r6, sl
   199d6:	e776      	b.n	198c6 <__sfvwrite_r+0xca>
   199d8:	45b3      	cmp	fp, r6
   199da:	46da      	mov	sl, fp
   199dc:	bf28      	it	cs
   199de:	46b2      	movcs	sl, r6
   199e0:	4652      	mov	r2, sl
   199e2:	4649      	mov	r1, r9
   199e4:	f7f7 fec4 	bl	11770 <memmove>
   199e8:	68a3      	ldr	r3, [r4, #8]
   199ea:	6822      	ldr	r2, [r4, #0]
   199ec:	eba3 030a 	sub.w	r3, r3, sl
   199f0:	4452      	add	r2, sl
   199f2:	60a3      	str	r3, [r4, #8]
   199f4:	6022      	str	r2, [r4, #0]
   199f6:	2b00      	cmp	r3, #0
   199f8:	d1eb      	bne.n	199d2 <__sfvwrite_r+0x1d6>
   199fa:	4621      	mov	r1, r4
   199fc:	4640      	mov	r0, r8
   199fe:	f7fd f9bd 	bl	16d7c <_fflush_r>
   19a02:	2800      	cmp	r0, #0
   19a04:	d0e5      	beq.n	199d2 <__sfvwrite_r+0x1d6>
   19a06:	e778      	b.n	198fa <__sfvwrite_r+0xfe>
   19a08:	6820      	ldr	r0, [r4, #0]
   19a0a:	46b3      	mov	fp, r6
   19a0c:	4632      	mov	r2, r6
   19a0e:	e74c      	b.n	198aa <__sfvwrite_r+0xae>
   19a10:	4639      	mov	r1, r7
   19a12:	9201      	str	r2, [sp, #4]
   19a14:	f7f7 feac 	bl	11770 <memmove>
   19a18:	9a01      	ldr	r2, [sp, #4]
   19a1a:	68a3      	ldr	r3, [r4, #8]
   19a1c:	1a9b      	subs	r3, r3, r2
   19a1e:	60a3      	str	r3, [r4, #8]
   19a20:	6823      	ldr	r3, [r4, #0]
   19a22:	4413      	add	r3, r2
   19a24:	6023      	str	r3, [r4, #0]
   19a26:	4693      	mov	fp, r2
   19a28:	e795      	b.n	19956 <__sfvwrite_r+0x15a>
   19a2a:	6823      	ldr	r3, [r4, #0]
   19a2c:	6921      	ldr	r1, [r4, #16]
   19a2e:	eba3 0b01 	sub.w	fp, r3, r1
   19a32:	6963      	ldr	r3, [r4, #20]
   19a34:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   19a38:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   19a3c:	f10b 0301 	add.w	r3, fp, #1
   19a40:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   19a44:	4433      	add	r3, r6
   19a46:	4553      	cmp	r3, sl
   19a48:	4652      	mov	r2, sl
   19a4a:	bf84      	itt	hi
   19a4c:	469a      	movhi	sl, r3
   19a4e:	4652      	movhi	r2, sl
   19a50:	0543      	lsls	r3, r0, #21
   19a52:	d52c      	bpl.n	19aae <__sfvwrite_r+0x2b2>
   19a54:	4611      	mov	r1, r2
   19a56:	4640      	mov	r0, r8
   19a58:	f7f5 ff96 	bl	f988 <_malloc_r>
   19a5c:	2800      	cmp	r0, #0
   19a5e:	d03b      	beq.n	19ad8 <__sfvwrite_r+0x2dc>
   19a60:	465a      	mov	r2, fp
   19a62:	6921      	ldr	r1, [r4, #16]
   19a64:	9001      	str	r0, [sp, #4]
   19a66:	f7f3 fe71 	bl	d74c <memcpy>
   19a6a:	89a2      	ldrh	r2, [r4, #12]
   19a6c:	9b01      	ldr	r3, [sp, #4]
   19a6e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   19a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19a76:	81a2      	strh	r2, [r4, #12]
   19a78:	eb03 000b 	add.w	r0, r3, fp
   19a7c:	6123      	str	r3, [r4, #16]
   19a7e:	ebaa 030b 	sub.w	r3, sl, fp
   19a82:	f8c4 a014 	str.w	sl, [r4, #20]
   19a86:	60a3      	str	r3, [r4, #8]
   19a88:	6020      	str	r0, [r4, #0]
   19a8a:	46b3      	mov	fp, r6
   19a8c:	4632      	mov	r2, r6
   19a8e:	e70c      	b.n	198aa <__sfvwrite_r+0xae>
   19a90:	4639      	mov	r1, r7
   19a92:	465a      	mov	r2, fp
   19a94:	f7f7 fe6c 	bl	11770 <memmove>
   19a98:	6823      	ldr	r3, [r4, #0]
   19a9a:	445b      	add	r3, fp
   19a9c:	6023      	str	r3, [r4, #0]
   19a9e:	4621      	mov	r1, r4
   19aa0:	4640      	mov	r0, r8
   19aa2:	f7fd f96b 	bl	16d7c <_fflush_r>
   19aa6:	2800      	cmp	r0, #0
   19aa8:	f43f af55 	beq.w	19956 <__sfvwrite_r+0x15a>
   19aac:	e725      	b.n	198fa <__sfvwrite_r+0xfe>
   19aae:	4640      	mov	r0, r8
   19ab0:	f7f6 fa32 	bl	ff18 <_realloc_r>
   19ab4:	4603      	mov	r3, r0
   19ab6:	2800      	cmp	r0, #0
   19ab8:	d1de      	bne.n	19a78 <__sfvwrite_r+0x27c>
   19aba:	6921      	ldr	r1, [r4, #16]
   19abc:	4640      	mov	r0, r8
   19abe:	f7f8 fbd1 	bl	12264 <_free_r>
   19ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19ac6:	220c      	movs	r2, #12
   19ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19acc:	f8c8 2000 	str.w	r2, [r8]
   19ad0:	e715      	b.n	198fe <__sfvwrite_r+0x102>
   19ad2:	1c72      	adds	r2, r6, #1
   19ad4:	4691      	mov	r9, r2
   19ad6:	e726      	b.n	19926 <__sfvwrite_r+0x12a>
   19ad8:	220c      	movs	r2, #12
   19ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19ade:	f8c8 2000 	str.w	r2, [r8]
   19ae2:	e70c      	b.n	198fe <__sfvwrite_r+0x102>
   19ae4:	f04f 30ff 	mov.w	r0, #4294967295
   19ae8:	e6ba      	b.n	19860 <__sfvwrite_r+0x64>
   19aea:	bf00      	nop
   19aec:	7ffffc00 	.word	0x7ffffc00

00019af0 <__submore>:
   19af0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   19af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19af8:	460c      	mov	r4, r1
   19afa:	6b09      	ldr	r1, [r1, #48]	; 0x30
   19afc:	4299      	cmp	r1, r3
   19afe:	d014      	beq.n	19b2a <__submore+0x3a>
   19b00:	6b66      	ldr	r6, [r4, #52]	; 0x34
   19b02:	0077      	lsls	r7, r6, #1
   19b04:	463a      	mov	r2, r7
   19b06:	f7f6 fa07 	bl	ff18 <_realloc_r>
   19b0a:	4605      	mov	r5, r0
   19b0c:	b340      	cbz	r0, 19b60 <__submore+0x70>
   19b0e:	eb00 0806 	add.w	r8, r0, r6
   19b12:	4601      	mov	r1, r0
   19b14:	4632      	mov	r2, r6
   19b16:	4640      	mov	r0, r8
   19b18:	f7f3 fe18 	bl	d74c <memcpy>
   19b1c:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   19b20:	f8c4 8000 	str.w	r8, [r4]
   19b24:	2000      	movs	r0, #0
   19b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   19b2e:	f7f5 ff2b 	bl	f988 <_malloc_r>
   19b32:	b1a8      	cbz	r0, 19b60 <__submore+0x70>
   19b34:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   19b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19b3c:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   19b40:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   19b44:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   19b48:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   19b4c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   19b50:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   19b54:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   19b58:	6023      	str	r3, [r4, #0]
   19b5a:	2000      	movs	r0, #0
   19b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19b60:	f04f 30ff 	mov.w	r0, #4294967295
   19b64:	e7df      	b.n	19b26 <__submore+0x36>
   19b66:	bf00      	nop

00019b68 <__swsetup_r>:
   19b68:	b538      	push	{r3, r4, r5, lr}
   19b6a:	4b31      	ldr	r3, [pc, #196]	; (19c30 <__swsetup_r+0xc8>)
   19b6c:	681b      	ldr	r3, [r3, #0]
   19b6e:	4605      	mov	r5, r0
   19b70:	460c      	mov	r4, r1
   19b72:	b113      	cbz	r3, 19b7a <__swsetup_r+0x12>
   19b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   19b76:	2a00      	cmp	r2, #0
   19b78:	d04e      	beq.n	19c18 <__swsetup_r+0xb0>
   19b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19b7e:	0718      	lsls	r0, r3, #28
   19b80:	b29a      	uxth	r2, r3
   19b82:	d51c      	bpl.n	19bbe <__swsetup_r+0x56>
   19b84:	6921      	ldr	r1, [r4, #16]
   19b86:	b329      	cbz	r1, 19bd4 <__swsetup_r+0x6c>
   19b88:	f012 0001 	ands.w	r0, r2, #1
   19b8c:	d007      	beq.n	19b9e <__swsetup_r+0x36>
   19b8e:	2000      	movs	r0, #0
   19b90:	60a0      	str	r0, [r4, #8]
   19b92:	6960      	ldr	r0, [r4, #20]
   19b94:	4240      	negs	r0, r0
   19b96:	61a0      	str	r0, [r4, #24]
   19b98:	b139      	cbz	r1, 19baa <__swsetup_r+0x42>
   19b9a:	2000      	movs	r0, #0
   19b9c:	bd38      	pop	{r3, r4, r5, pc}
   19b9e:	0795      	lsls	r5, r2, #30
   19ba0:	bf58      	it	pl
   19ba2:	6960      	ldrpl	r0, [r4, #20]
   19ba4:	60a0      	str	r0, [r4, #8]
   19ba6:	2900      	cmp	r1, #0
   19ba8:	d1f7      	bne.n	19b9a <__swsetup_r+0x32>
   19baa:	0612      	lsls	r2, r2, #24
   19bac:	bf58      	it	pl
   19bae:	4608      	movpl	r0, r1
   19bb0:	d5f4      	bpl.n	19b9c <__swsetup_r+0x34>
   19bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19bb6:	81a3      	strh	r3, [r4, #12]
   19bb8:	f04f 30ff 	mov.w	r0, #4294967295
   19bbc:	bd38      	pop	{r3, r4, r5, pc}
   19bbe:	06d1      	lsls	r1, r2, #27
   19bc0:	d52e      	bpl.n	19c20 <__swsetup_r+0xb8>
   19bc2:	0752      	lsls	r2, r2, #29
   19bc4:	d414      	bmi.n	19bf0 <__swsetup_r+0x88>
   19bc6:	6921      	ldr	r1, [r4, #16]
   19bc8:	f043 0308 	orr.w	r3, r3, #8
   19bcc:	81a3      	strh	r3, [r4, #12]
   19bce:	b29a      	uxth	r2, r3
   19bd0:	2900      	cmp	r1, #0
   19bd2:	d1d9      	bne.n	19b88 <__swsetup_r+0x20>
   19bd4:	f402 7020 	and.w	r0, r2, #640	; 0x280
   19bd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   19bdc:	d0d4      	beq.n	19b88 <__swsetup_r+0x20>
   19bde:	4621      	mov	r1, r4
   19be0:	4628      	mov	r0, r5
   19be2:	f000 f977 	bl	19ed4 <__smakebuf_r>
   19be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19bea:	6921      	ldr	r1, [r4, #16]
   19bec:	b29a      	uxth	r2, r3
   19bee:	e7cb      	b.n	19b88 <__swsetup_r+0x20>
   19bf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19bf2:	b151      	cbz	r1, 19c0a <__swsetup_r+0xa2>
   19bf4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   19bf8:	4291      	cmp	r1, r2
   19bfa:	d004      	beq.n	19c06 <__swsetup_r+0x9e>
   19bfc:	4628      	mov	r0, r5
   19bfe:	f7f8 fb31 	bl	12264 <_free_r>
   19c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19c06:	2200      	movs	r2, #0
   19c08:	6322      	str	r2, [r4, #48]	; 0x30
   19c0a:	6921      	ldr	r1, [r4, #16]
   19c0c:	2200      	movs	r2, #0
   19c0e:	e9c4 1200 	strd	r1, r2, [r4]
   19c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   19c16:	e7d7      	b.n	19bc8 <__swsetup_r+0x60>
   19c18:	4618      	mov	r0, r3
   19c1a:	f7f7 fbed 	bl	113f8 <__sinit>
   19c1e:	e7ac      	b.n	19b7a <__swsetup_r+0x12>
   19c20:	2209      	movs	r2, #9
   19c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19c26:	602a      	str	r2, [r5, #0]
   19c28:	f04f 30ff 	mov.w	r0, #4294967295
   19c2c:	81a3      	strh	r3, [r4, #12]
   19c2e:	bd38      	pop	{r3, r4, r5, pc}
   19c30:	20009424 	.word	0x20009424

00019c34 <__fputwc>:
   19c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c38:	b082      	sub	sp, #8
   19c3a:	4682      	mov	sl, r0
   19c3c:	4688      	mov	r8, r1
   19c3e:	4614      	mov	r4, r2
   19c40:	f7f7 ff32 	bl	11aa8 <__locale_mb_cur_max>
   19c44:	2801      	cmp	r0, #1
   19c46:	d103      	bne.n	19c50 <__fputwc+0x1c>
   19c48:	f108 33ff 	add.w	r3, r8, #4294967295
   19c4c:	2bfe      	cmp	r3, #254	; 0xfe
   19c4e:	d936      	bls.n	19cbe <__fputwc+0x8a>
   19c50:	f10d 0904 	add.w	r9, sp, #4
   19c54:	4642      	mov	r2, r8
   19c56:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   19c5a:	4649      	mov	r1, r9
   19c5c:	4650      	mov	r0, sl
   19c5e:	f7fe fb29 	bl	182b4 <_wcrtomb_r>
   19c62:	1c42      	adds	r2, r0, #1
   19c64:	4606      	mov	r6, r0
   19c66:	d032      	beq.n	19cce <__fputwc+0x9a>
   19c68:	b320      	cbz	r0, 19cb4 <__fputwc+0x80>
   19c6a:	f89d c004 	ldrb.w	ip, [sp, #4]
   19c6e:	2500      	movs	r5, #0
   19c70:	e009      	b.n	19c86 <__fputwc+0x52>
   19c72:	6823      	ldr	r3, [r4, #0]
   19c74:	1c5a      	adds	r2, r3, #1
   19c76:	6022      	str	r2, [r4, #0]
   19c78:	f883 c000 	strb.w	ip, [r3]
   19c7c:	3501      	adds	r5, #1
   19c7e:	42b5      	cmp	r5, r6
   19c80:	d218      	bcs.n	19cb4 <__fputwc+0x80>
   19c82:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   19c86:	68a3      	ldr	r3, [r4, #8]
   19c88:	3b01      	subs	r3, #1
   19c8a:	2b00      	cmp	r3, #0
   19c8c:	60a3      	str	r3, [r4, #8]
   19c8e:	daf0      	bge.n	19c72 <__fputwc+0x3e>
   19c90:	69a7      	ldr	r7, [r4, #24]
   19c92:	42bb      	cmp	r3, r7
   19c94:	4661      	mov	r1, ip
   19c96:	4622      	mov	r2, r4
   19c98:	4650      	mov	r0, sl
   19c9a:	db02      	blt.n	19ca2 <__fputwc+0x6e>
   19c9c:	f1bc 0f0a 	cmp.w	ip, #10
   19ca0:	d1e7      	bne.n	19c72 <__fputwc+0x3e>
   19ca2:	f000 f983 	bl	19fac <__swbuf_r>
   19ca6:	1c43      	adds	r3, r0, #1
   19ca8:	d1e8      	bne.n	19c7c <__fputwc+0x48>
   19caa:	4606      	mov	r6, r0
   19cac:	4630      	mov	r0, r6
   19cae:	b002      	add	sp, #8
   19cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cb4:	4646      	mov	r6, r8
   19cb6:	4630      	mov	r0, r6
   19cb8:	b002      	add	sp, #8
   19cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cbe:	fa5f fc88 	uxtb.w	ip, r8
   19cc2:	f88d c004 	strb.w	ip, [sp, #4]
   19cc6:	4606      	mov	r6, r0
   19cc8:	f10d 0904 	add.w	r9, sp, #4
   19ccc:	e7cf      	b.n	19c6e <__fputwc+0x3a>
   19cce:	89a3      	ldrh	r3, [r4, #12]
   19cd0:	4630      	mov	r0, r6
   19cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19cd6:	81a3      	strh	r3, [r4, #12]
   19cd8:	b002      	add	sp, #8
   19cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19cde:	bf00      	nop

00019ce0 <_fputwc_r>:
   19ce0:	b530      	push	{r4, r5, lr}
   19ce2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   19ce4:	f013 0f01 	tst.w	r3, #1
   19ce8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   19cec:	4614      	mov	r4, r2
   19cee:	b083      	sub	sp, #12
   19cf0:	4605      	mov	r5, r0
   19cf2:	b29a      	uxth	r2, r3
   19cf4:	d101      	bne.n	19cfa <_fputwc_r+0x1a>
   19cf6:	0598      	lsls	r0, r3, #22
   19cf8:	d51c      	bpl.n	19d34 <_fputwc_r+0x54>
   19cfa:	0490      	lsls	r0, r2, #18
   19cfc:	d406      	bmi.n	19d0c <_fputwc_r+0x2c>
   19cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   19d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   19d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   19d08:	81a3      	strh	r3, [r4, #12]
   19d0a:	6662      	str	r2, [r4, #100]	; 0x64
   19d0c:	4622      	mov	r2, r4
   19d0e:	4628      	mov	r0, r5
   19d10:	f7ff ff90 	bl	19c34 <__fputwc>
   19d14:	6e63      	ldr	r3, [r4, #100]	; 0x64
   19d16:	07da      	lsls	r2, r3, #31
   19d18:	4605      	mov	r5, r0
   19d1a:	d402      	bmi.n	19d22 <_fputwc_r+0x42>
   19d1c:	89a3      	ldrh	r3, [r4, #12]
   19d1e:	059b      	lsls	r3, r3, #22
   19d20:	d502      	bpl.n	19d28 <_fputwc_r+0x48>
   19d22:	4628      	mov	r0, r5
   19d24:	b003      	add	sp, #12
   19d26:	bd30      	pop	{r4, r5, pc}
   19d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19d2a:	f7f7 ff59 	bl	11be0 <__retarget_lock_release_recursive>
   19d2e:	4628      	mov	r0, r5
   19d30:	b003      	add	sp, #12
   19d32:	bd30      	pop	{r4, r5, pc}
   19d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   19d36:	9101      	str	r1, [sp, #4]
   19d38:	f7f7 ff50 	bl	11bdc <__retarget_lock_acquire_recursive>
   19d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19d40:	9901      	ldr	r1, [sp, #4]
   19d42:	b29a      	uxth	r2, r3
   19d44:	e7d9      	b.n	19cfa <_fputwc_r+0x1a>
   19d46:	bf00      	nop

00019d48 <_wcsnrtombs_l>:
   19d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d4c:	b08b      	sub	sp, #44	; 0x2c
   19d4e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   19d52:	9f14      	ldr	r7, [sp, #80]	; 0x50
   19d54:	9103      	str	r1, [sp, #12]
   19d56:	4681      	mov	r9, r0
   19d58:	9205      	str	r2, [sp, #20]
   19d5a:	461e      	mov	r6, r3
   19d5c:	f1b8 0f00 	cmp.w	r8, #0
   19d60:	d05c      	beq.n	19e1c <_wcsnrtombs_l+0xd4>
   19d62:	9b03      	ldr	r3, [sp, #12]
   19d64:	2b00      	cmp	r3, #0
   19d66:	d05e      	beq.n	19e26 <_wcsnrtombs_l+0xde>
   19d68:	9b05      	ldr	r3, [sp, #20]
   19d6a:	681d      	ldr	r5, [r3, #0]
   19d6c:	2f00      	cmp	r7, #0
   19d6e:	d06a      	beq.n	19e46 <_wcsnrtombs_l+0xfe>
   19d70:	1e74      	subs	r4, r6, #1
   19d72:	b34e      	cbz	r6, 19dc8 <_wcsnrtombs_l+0x80>
   19d74:	9b03      	ldr	r3, [sp, #12]
   19d76:	9304      	str	r3, [sp, #16]
   19d78:	3d04      	subs	r5, #4
   19d7a:	2600      	movs	r6, #0
   19d7c:	9501      	str	r5, [sp, #4]
   19d7e:	e00b      	b.n	19d98 <_wcsnrtombs_l+0x50>
   19d80:	9b03      	ldr	r3, [sp, #12]
   19d82:	bb2b      	cbnz	r3, 19dd0 <_wcsnrtombs_l+0x88>
   19d84:	9b01      	ldr	r3, [sp, #4]
   19d86:	681a      	ldr	r2, [r3, #0]
   19d88:	2a00      	cmp	r2, #0
   19d8a:	d03a      	beq.n	19e02 <_wcsnrtombs_l+0xba>
   19d8c:	45bc      	cmp	ip, r7
   19d8e:	d25c      	bcs.n	19e4a <_wcsnrtombs_l+0x102>
   19d90:	3c01      	subs	r4, #1
   19d92:	1c63      	adds	r3, r4, #1
   19d94:	4666      	mov	r6, ip
   19d96:	d017      	beq.n	19dc8 <_wcsnrtombs_l+0x80>
   19d98:	f8d8 3000 	ldr.w	r3, [r8]
   19d9c:	9302      	str	r3, [sp, #8]
   19d9e:	9b01      	ldr	r3, [sp, #4]
   19da0:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   19da4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   19da8:	9301      	str	r3, [sp, #4]
   19daa:	a907      	add	r1, sp, #28
   19dac:	4643      	mov	r3, r8
   19dae:	4648      	mov	r0, r9
   19db0:	f8d8 b004 	ldr.w	fp, [r8, #4]
   19db4:	47a8      	blx	r5
   19db6:	1c42      	adds	r2, r0, #1
   19db8:	d03a      	beq.n	19e30 <_wcsnrtombs_l+0xe8>
   19dba:	eb00 0c06 	add.w	ip, r0, r6
   19dbe:	45bc      	cmp	ip, r7
   19dc0:	d9de      	bls.n	19d80 <_wcsnrtombs_l+0x38>
   19dc2:	9b02      	ldr	r3, [sp, #8]
   19dc4:	e9c8 3b00 	strd	r3, fp, [r8]
   19dc8:	4630      	mov	r0, r6
   19dca:	b00b      	add	sp, #44	; 0x2c
   19dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd0:	2800      	cmp	r0, #0
   19dd2:	dd0e      	ble.n	19df2 <_wcsnrtombs_l+0xaa>
   19dd4:	9b04      	ldr	r3, [sp, #16]
   19dd6:	9d01      	ldr	r5, [sp, #4]
   19dd8:	4418      	add	r0, r3
   19dda:	1e5a      	subs	r2, r3, #1
   19ddc:	a907      	add	r1, sp, #28
   19dde:	f100 3eff 	add.w	lr, r0, #4294967295
   19de2:	f811 3b01 	ldrb.w	r3, [r1], #1
   19de6:	f802 3f01 	strb.w	r3, [r2, #1]!
   19dea:	4572      	cmp	r2, lr
   19dec:	d1f9      	bne.n	19de2 <_wcsnrtombs_l+0x9a>
   19dee:	9501      	str	r5, [sp, #4]
   19df0:	9004      	str	r0, [sp, #16]
   19df2:	9b05      	ldr	r3, [sp, #20]
   19df4:	681a      	ldr	r2, [r3, #0]
   19df6:	3204      	adds	r2, #4
   19df8:	601a      	str	r2, [r3, #0]
   19dfa:	9b01      	ldr	r3, [sp, #4]
   19dfc:	681a      	ldr	r2, [r3, #0]
   19dfe:	2a00      	cmp	r2, #0
   19e00:	d1c4      	bne.n	19d8c <_wcsnrtombs_l+0x44>
   19e02:	9b03      	ldr	r3, [sp, #12]
   19e04:	b10b      	cbz	r3, 19e0a <_wcsnrtombs_l+0xc2>
   19e06:	9b05      	ldr	r3, [sp, #20]
   19e08:	601a      	str	r2, [r3, #0]
   19e0a:	f10c 36ff 	add.w	r6, ip, #4294967295
   19e0e:	2200      	movs	r2, #0
   19e10:	4630      	mov	r0, r6
   19e12:	f8c8 2000 	str.w	r2, [r8]
   19e16:	b00b      	add	sp, #44	; 0x2c
   19e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e1c:	9b03      	ldr	r3, [sp, #12]
   19e1e:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   19e22:	2b00      	cmp	r3, #0
   19e24:	d1a0      	bne.n	19d68 <_wcsnrtombs_l+0x20>
   19e26:	9b05      	ldr	r3, [sp, #20]
   19e28:	f04f 37ff 	mov.w	r7, #4294967295
   19e2c:	681d      	ldr	r5, [r3, #0]
   19e2e:	e79f      	b.n	19d70 <_wcsnrtombs_l+0x28>
   19e30:	4606      	mov	r6, r0
   19e32:	218a      	movs	r1, #138	; 0x8a
   19e34:	2200      	movs	r2, #0
   19e36:	4630      	mov	r0, r6
   19e38:	f8c9 1000 	str.w	r1, [r9]
   19e3c:	f8c8 2000 	str.w	r2, [r8]
   19e40:	b00b      	add	sp, #44	; 0x2c
   19e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e46:	463e      	mov	r6, r7
   19e48:	e7be      	b.n	19dc8 <_wcsnrtombs_l+0x80>
   19e4a:	4666      	mov	r6, ip
   19e4c:	e7bc      	b.n	19dc8 <_wcsnrtombs_l+0x80>
   19e4e:	bf00      	nop

00019e50 <_wcsnrtombs_r>:
   19e50:	b510      	push	{r4, lr}
   19e52:	b084      	sub	sp, #16
   19e54:	4c05      	ldr	r4, [pc, #20]	; (19e6c <_wcsnrtombs_r+0x1c>)
   19e56:	9806      	ldr	r0, [sp, #24]
   19e58:	9000      	str	r0, [sp, #0]
   19e5a:	9807      	ldr	r0, [sp, #28]
   19e5c:	9001      	str	r0, [sp, #4]
   19e5e:	4804      	ldr	r0, [pc, #16]	; (19e70 <_wcsnrtombs_r+0x20>)
   19e60:	6800      	ldr	r0, [r0, #0]
   19e62:	9402      	str	r4, [sp, #8]
   19e64:	f7ff ff70 	bl	19d48 <_wcsnrtombs_l>
   19e68:	b004      	add	sp, #16
   19e6a:	bd10      	pop	{r4, pc}
   19e6c:	20008e9c 	.word	0x20008e9c
   19e70:	20009424 	.word	0x20009424

00019e74 <category>:
   19e74:	4b15      	ldr	r3, [pc, #84]	; (19ecc <category+0x58>)
   19e76:	4298      	cmp	r0, r3
   19e78:	d823      	bhi.n	19ec2 <category+0x4e>
   19e7a:	b570      	push	{r4, r5, r6, lr}
   19e7c:	4e14      	ldr	r6, [pc, #80]	; (19ed0 <category+0x5c>)
   19e7e:	f04f 0e00 	mov.w	lr, #0
   19e82:	f640 04db 	movw	r4, #2267	; 0x8db
   19e86:	e003      	b.n	19e90 <category+0x1c>
   19e88:	f102 0e01 	add.w	lr, r2, #1
   19e8c:	45a6      	cmp	lr, r4
   19e8e:	dc16      	bgt.n	19ebe <category+0x4a>
   19e90:	eb04 020e 	add.w	r2, r4, lr
   19e94:	f022 0301 	bic.w	r3, r2, #1
   19e98:	eb03 0362 	add.w	r3, r3, r2, asr #1
   19e9c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   19ea0:	1052      	asrs	r2, r2, #1
   19ea2:	7859      	ldrb	r1, [r3, #1]
   19ea4:	885d      	ldrh	r5, [r3, #2]
   19ea6:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   19eaa:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   19eae:	448c      	add	ip, r1
   19eb0:	4560      	cmp	r0, ip
   19eb2:	d8e9      	bhi.n	19e88 <category+0x14>
   19eb4:	4288      	cmp	r0, r1
   19eb6:	d206      	bcs.n	19ec6 <category+0x52>
   19eb8:	1e54      	subs	r4, r2, #1
   19eba:	45a6      	cmp	lr, r4
   19ebc:	dde8      	ble.n	19e90 <category+0x1c>
   19ebe:	20ff      	movs	r0, #255	; 0xff
   19ec0:	bd70      	pop	{r4, r5, r6, pc}
   19ec2:	20ff      	movs	r0, #255	; 0xff
   19ec4:	4770      	bx	lr
   19ec6:	7818      	ldrb	r0, [r3, #0]
   19ec8:	bd70      	pop	{r4, r5, r6, pc}
   19eca:	bf00      	nop
   19ecc:	000e01ef 	.word	0x000e01ef
   19ed0:	20002be4 	.word	0x20002be4

00019ed4 <__smakebuf_r>:
   19ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ed8:	898b      	ldrh	r3, [r1, #12]
   19eda:	460c      	mov	r4, r1
   19edc:	0799      	lsls	r1, r3, #30
   19ede:	b096      	sub	sp, #88	; 0x58
   19ee0:	d508      	bpl.n	19ef4 <__smakebuf_r+0x20>
   19ee2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   19ee6:	2201      	movs	r2, #1
   19ee8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   19eec:	6023      	str	r3, [r4, #0]
   19eee:	b016      	add	sp, #88	; 0x58
   19ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19ef8:	2900      	cmp	r1, #0
   19efa:	4606      	mov	r6, r0
   19efc:	db25      	blt.n	19f4a <__smakebuf_r+0x76>
   19efe:	466a      	mov	r2, sp
   19f00:	f000 f8ac 	bl	1a05c <_fstat_r>
   19f04:	2800      	cmp	r0, #0
   19f06:	db1f      	blt.n	19f48 <__smakebuf_r+0x74>
   19f08:	9d01      	ldr	r5, [sp, #4]
   19f0a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   19f0e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   19f12:	fab5 f585 	clz	r5, r5
   19f16:	f44f 6880 	mov.w	r8, #1024	; 0x400
   19f1a:	096d      	lsrs	r5, r5, #5
   19f1c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   19f20:	4641      	mov	r1, r8
   19f22:	4630      	mov	r0, r6
   19f24:	f7f5 fd30 	bl	f988 <_malloc_r>
   19f28:	b1e0      	cbz	r0, 19f64 <__smakebuf_r+0x90>
   19f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19f2e:	f8c4 8014 	str.w	r8, [r4, #20]
   19f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19f36:	6020      	str	r0, [r4, #0]
   19f38:	6120      	str	r0, [r4, #16]
   19f3a:	81a3      	strh	r3, [r4, #12]
   19f3c:	bb35      	cbnz	r5, 19f8c <__smakebuf_r+0xb8>
   19f3e:	433b      	orrs	r3, r7
   19f40:	81a3      	strh	r3, [r4, #12]
   19f42:	b016      	add	sp, #88	; 0x58
   19f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f48:	89a3      	ldrh	r3, [r4, #12]
   19f4a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   19f4e:	d019      	beq.n	19f84 <__smakebuf_r+0xb0>
   19f50:	f04f 0840 	mov.w	r8, #64	; 0x40
   19f54:	2500      	movs	r5, #0
   19f56:	4641      	mov	r1, r8
   19f58:	4630      	mov	r0, r6
   19f5a:	462f      	mov	r7, r5
   19f5c:	f7f5 fd14 	bl	f988 <_malloc_r>
   19f60:	2800      	cmp	r0, #0
   19f62:	d1e2      	bne.n	19f2a <__smakebuf_r+0x56>
   19f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19f68:	059a      	lsls	r2, r3, #22
   19f6a:	d4c0      	bmi.n	19eee <__smakebuf_r+0x1a>
   19f6c:	f023 0303 	bic.w	r3, r3, #3
   19f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
   19f74:	f043 0302 	orr.w	r3, r3, #2
   19f78:	2101      	movs	r1, #1
   19f7a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   19f7e:	81a3      	strh	r3, [r4, #12]
   19f80:	6022      	str	r2, [r4, #0]
   19f82:	e7b4      	b.n	19eee <__smakebuf_r+0x1a>
   19f84:	f44f 6880 	mov.w	r8, #1024	; 0x400
   19f88:	462f      	mov	r7, r5
   19f8a:	e7c9      	b.n	19f20 <__smakebuf_r+0x4c>
   19f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   19f90:	4630      	mov	r0, r6
   19f92:	f000 f879 	bl	1a088 <_isatty_r>
   19f96:	b910      	cbnz	r0, 19f9e <__smakebuf_r+0xca>
   19f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   19f9c:	e7cf      	b.n	19f3e <__smakebuf_r+0x6a>
   19f9e:	89a3      	ldrh	r3, [r4, #12]
   19fa0:	f023 0303 	bic.w	r3, r3, #3
   19fa4:	f043 0301 	orr.w	r3, r3, #1
   19fa8:	b21b      	sxth	r3, r3
   19faa:	e7c8      	b.n	19f3e <__smakebuf_r+0x6a>

00019fac <__swbuf_r>:
   19fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fae:	460d      	mov	r5, r1
   19fb0:	4614      	mov	r4, r2
   19fb2:	4606      	mov	r6, r0
   19fb4:	b110      	cbz	r0, 19fbc <__swbuf_r+0x10>
   19fb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19fb8:	2b00      	cmp	r3, #0
   19fba:	d04c      	beq.n	1a056 <__swbuf_r+0xaa>
   19fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   19fc0:	69a3      	ldr	r3, [r4, #24]
   19fc2:	60a3      	str	r3, [r4, #8]
   19fc4:	0717      	lsls	r7, r2, #28
   19fc6:	b290      	uxth	r0, r2
   19fc8:	d51b      	bpl.n	1a002 <__swbuf_r+0x56>
   19fca:	6923      	ldr	r3, [r4, #16]
   19fcc:	b1cb      	cbz	r3, 1a002 <__swbuf_r+0x56>
   19fce:	b2ed      	uxtb	r5, r5
   19fd0:	0481      	lsls	r1, r0, #18
   19fd2:	462f      	mov	r7, r5
   19fd4:	d522      	bpl.n	1a01c <__swbuf_r+0x70>
   19fd6:	6822      	ldr	r2, [r4, #0]
   19fd8:	6961      	ldr	r1, [r4, #20]
   19fda:	1ad3      	subs	r3, r2, r3
   19fdc:	4299      	cmp	r1, r3
   19fde:	dd29      	ble.n	1a034 <__swbuf_r+0x88>
   19fe0:	3301      	adds	r3, #1
   19fe2:	68a1      	ldr	r1, [r4, #8]
   19fe4:	3901      	subs	r1, #1
   19fe6:	60a1      	str	r1, [r4, #8]
   19fe8:	1c51      	adds	r1, r2, #1
   19fea:	6021      	str	r1, [r4, #0]
   19fec:	7015      	strb	r5, [r2, #0]
   19fee:	6962      	ldr	r2, [r4, #20]
   19ff0:	429a      	cmp	r2, r3
   19ff2:	d027      	beq.n	1a044 <__swbuf_r+0x98>
   19ff4:	89a3      	ldrh	r3, [r4, #12]
   19ff6:	07db      	lsls	r3, r3, #31
   19ff8:	d501      	bpl.n	19ffe <__swbuf_r+0x52>
   19ffa:	2d0a      	cmp	r5, #10
   19ffc:	d022      	beq.n	1a044 <__swbuf_r+0x98>
   19ffe:	4638      	mov	r0, r7
   1a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a002:	4621      	mov	r1, r4
   1a004:	4630      	mov	r0, r6
   1a006:	f7ff fdaf 	bl	19b68 <__swsetup_r>
   1a00a:	bb08      	cbnz	r0, 1a050 <__swbuf_r+0xa4>
   1a00c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1a010:	6923      	ldr	r3, [r4, #16]
   1a012:	b290      	uxth	r0, r2
   1a014:	b2ed      	uxtb	r5, r5
   1a016:	0481      	lsls	r1, r0, #18
   1a018:	462f      	mov	r7, r5
   1a01a:	d4dc      	bmi.n	19fd6 <__swbuf_r+0x2a>
   1a01c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a020:	81a2      	strh	r2, [r4, #12]
   1a022:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a024:	6961      	ldr	r1, [r4, #20]
   1a026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1a02a:	6662      	str	r2, [r4, #100]	; 0x64
   1a02c:	6822      	ldr	r2, [r4, #0]
   1a02e:	1ad3      	subs	r3, r2, r3
   1a030:	4299      	cmp	r1, r3
   1a032:	dcd5      	bgt.n	19fe0 <__swbuf_r+0x34>
   1a034:	4621      	mov	r1, r4
   1a036:	4630      	mov	r0, r6
   1a038:	f7fc fea0 	bl	16d7c <_fflush_r>
   1a03c:	b940      	cbnz	r0, 1a050 <__swbuf_r+0xa4>
   1a03e:	6822      	ldr	r2, [r4, #0]
   1a040:	2301      	movs	r3, #1
   1a042:	e7ce      	b.n	19fe2 <__swbuf_r+0x36>
   1a044:	4621      	mov	r1, r4
   1a046:	4630      	mov	r0, r6
   1a048:	f7fc fe98 	bl	16d7c <_fflush_r>
   1a04c:	2800      	cmp	r0, #0
   1a04e:	d0d6      	beq.n	19ffe <__swbuf_r+0x52>
   1a050:	f04f 37ff 	mov.w	r7, #4294967295
   1a054:	e7d3      	b.n	19ffe <__swbuf_r+0x52>
   1a056:	f7f7 f9cf 	bl	113f8 <__sinit>
   1a05a:	e7af      	b.n	19fbc <__swbuf_r+0x10>

0001a05c <_fstat_r>:
   1a05c:	b570      	push	{r4, r5, r6, lr}
   1a05e:	460c      	mov	r4, r1
   1a060:	4d08      	ldr	r5, [pc, #32]	; (1a084 <_fstat_r+0x28>)
   1a062:	4603      	mov	r3, r0
   1a064:	2600      	movs	r6, #0
   1a066:	4620      	mov	r0, r4
   1a068:	4611      	mov	r1, r2
   1a06a:	461c      	mov	r4, r3
   1a06c:	602e      	str	r6, [r5, #0]
   1a06e:	f7f3 fefd 	bl	de6c <_fstat>
   1a072:	1c43      	adds	r3, r0, #1
   1a074:	d000      	beq.n	1a078 <_fstat_r+0x1c>
   1a076:	bd70      	pop	{r4, r5, r6, pc}
   1a078:	682b      	ldr	r3, [r5, #0]
   1a07a:	2b00      	cmp	r3, #0
   1a07c:	d0fb      	beq.n	1a076 <_fstat_r+0x1a>
   1a07e:	6023      	str	r3, [r4, #0]
   1a080:	bd70      	pop	{r4, r5, r6, pc}
   1a082:	bf00      	nop
   1a084:	20028ad0 	.word	0x20028ad0

0001a088 <_isatty_r>:
   1a088:	b538      	push	{r3, r4, r5, lr}
   1a08a:	4d07      	ldr	r5, [pc, #28]	; (1a0a8 <_isatty_r+0x20>)
   1a08c:	2200      	movs	r2, #0
   1a08e:	4604      	mov	r4, r0
   1a090:	4608      	mov	r0, r1
   1a092:	602a      	str	r2, [r5, #0]
   1a094:	f7f3 fef0 	bl	de78 <_isatty>
   1a098:	1c43      	adds	r3, r0, #1
   1a09a:	d000      	beq.n	1a09e <_isatty_r+0x16>
   1a09c:	bd38      	pop	{r3, r4, r5, pc}
   1a09e:	682b      	ldr	r3, [r5, #0]
   1a0a0:	2b00      	cmp	r3, #0
   1a0a2:	d0fb      	beq.n	1a09c <_isatty_r+0x14>
   1a0a4:	6023      	str	r3, [r4, #0]
   1a0a6:	bd38      	pop	{r3, r4, r5, pc}
   1a0a8:	20028ad0 	.word	0x20028ad0

0001a0ac <__aeabi_drsub>:
   1a0ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1a0b0:	e002      	b.n	1a0b8 <__adddf3>
   1a0b2:	bf00      	nop

0001a0b4 <__aeabi_dsub>:
   1a0b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001a0b8 <__adddf3>:
   1a0b8:	b530      	push	{r4, r5, lr}
   1a0ba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1a0be:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1a0c2:	ea94 0f05 	teq	r4, r5
   1a0c6:	bf08      	it	eq
   1a0c8:	ea90 0f02 	teqeq	r0, r2
   1a0cc:	bf1f      	itttt	ne
   1a0ce:	ea54 0c00 	orrsne.w	ip, r4, r0
   1a0d2:	ea55 0c02 	orrsne.w	ip, r5, r2
   1a0d6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1a0da:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a0de:	f000 80e2 	beq.w	1a2a6 <__adddf3+0x1ee>
   1a0e2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1a0e6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1a0ea:	bfb8      	it	lt
   1a0ec:	426d      	neglt	r5, r5
   1a0ee:	dd0c      	ble.n	1a10a <__adddf3+0x52>
   1a0f0:	442c      	add	r4, r5
   1a0f2:	ea80 0202 	eor.w	r2, r0, r2
   1a0f6:	ea81 0303 	eor.w	r3, r1, r3
   1a0fa:	ea82 0000 	eor.w	r0, r2, r0
   1a0fe:	ea83 0101 	eor.w	r1, r3, r1
   1a102:	ea80 0202 	eor.w	r2, r0, r2
   1a106:	ea81 0303 	eor.w	r3, r1, r3
   1a10a:	2d36      	cmp	r5, #54	; 0x36
   1a10c:	bf88      	it	hi
   1a10e:	bd30      	pophi	{r4, r5, pc}
   1a110:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1a114:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1a118:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1a11c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1a120:	d002      	beq.n	1a128 <__adddf3+0x70>
   1a122:	4240      	negs	r0, r0
   1a124:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a128:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1a12c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1a130:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1a134:	d002      	beq.n	1a13c <__adddf3+0x84>
   1a136:	4252      	negs	r2, r2
   1a138:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1a13c:	ea94 0f05 	teq	r4, r5
   1a140:	f000 80a7 	beq.w	1a292 <__adddf3+0x1da>
   1a144:	f1a4 0401 	sub.w	r4, r4, #1
   1a148:	f1d5 0e20 	rsbs	lr, r5, #32
   1a14c:	db0d      	blt.n	1a16a <__adddf3+0xb2>
   1a14e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1a152:	fa22 f205 	lsr.w	r2, r2, r5
   1a156:	1880      	adds	r0, r0, r2
   1a158:	f141 0100 	adc.w	r1, r1, #0
   1a15c:	fa03 f20e 	lsl.w	r2, r3, lr
   1a160:	1880      	adds	r0, r0, r2
   1a162:	fa43 f305 	asr.w	r3, r3, r5
   1a166:	4159      	adcs	r1, r3
   1a168:	e00e      	b.n	1a188 <__adddf3+0xd0>
   1a16a:	f1a5 0520 	sub.w	r5, r5, #32
   1a16e:	f10e 0e20 	add.w	lr, lr, #32
   1a172:	2a01      	cmp	r2, #1
   1a174:	fa03 fc0e 	lsl.w	ip, r3, lr
   1a178:	bf28      	it	cs
   1a17a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1a17e:	fa43 f305 	asr.w	r3, r3, r5
   1a182:	18c0      	adds	r0, r0, r3
   1a184:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1a188:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a18c:	d507      	bpl.n	1a19e <__adddf3+0xe6>
   1a18e:	f04f 0e00 	mov.w	lr, #0
   1a192:	f1dc 0c00 	rsbs	ip, ip, #0
   1a196:	eb7e 0000 	sbcs.w	r0, lr, r0
   1a19a:	eb6e 0101 	sbc.w	r1, lr, r1
   1a19e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1a1a2:	d31b      	bcc.n	1a1dc <__adddf3+0x124>
   1a1a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1a1a8:	d30c      	bcc.n	1a1c4 <__adddf3+0x10c>
   1a1aa:	0849      	lsrs	r1, r1, #1
   1a1ac:	ea5f 0030 	movs.w	r0, r0, rrx
   1a1b0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1a1b4:	f104 0401 	add.w	r4, r4, #1
   1a1b8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1a1bc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1a1c0:	f080 809a 	bcs.w	1a2f8 <__adddf3+0x240>
   1a1c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1a1c8:	bf08      	it	eq
   1a1ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1a1ce:	f150 0000 	adcs.w	r0, r0, #0
   1a1d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1a1d6:	ea41 0105 	orr.w	r1, r1, r5
   1a1da:	bd30      	pop	{r4, r5, pc}
   1a1dc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1a1e0:	4140      	adcs	r0, r0
   1a1e2:	eb41 0101 	adc.w	r1, r1, r1
   1a1e6:	3c01      	subs	r4, #1
   1a1e8:	bf28      	it	cs
   1a1ea:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1a1ee:	d2e9      	bcs.n	1a1c4 <__adddf3+0x10c>
   1a1f0:	f091 0f00 	teq	r1, #0
   1a1f4:	bf04      	itt	eq
   1a1f6:	4601      	moveq	r1, r0
   1a1f8:	2000      	moveq	r0, #0
   1a1fa:	fab1 f381 	clz	r3, r1
   1a1fe:	bf08      	it	eq
   1a200:	3320      	addeq	r3, #32
   1a202:	f1a3 030b 	sub.w	r3, r3, #11
   1a206:	f1b3 0220 	subs.w	r2, r3, #32
   1a20a:	da0c      	bge.n	1a226 <__adddf3+0x16e>
   1a20c:	320c      	adds	r2, #12
   1a20e:	dd08      	ble.n	1a222 <__adddf3+0x16a>
   1a210:	f102 0c14 	add.w	ip, r2, #20
   1a214:	f1c2 020c 	rsb	r2, r2, #12
   1a218:	fa01 f00c 	lsl.w	r0, r1, ip
   1a21c:	fa21 f102 	lsr.w	r1, r1, r2
   1a220:	e00c      	b.n	1a23c <__adddf3+0x184>
   1a222:	f102 0214 	add.w	r2, r2, #20
   1a226:	bfd8      	it	le
   1a228:	f1c2 0c20 	rsble	ip, r2, #32
   1a22c:	fa01 f102 	lsl.w	r1, r1, r2
   1a230:	fa20 fc0c 	lsr.w	ip, r0, ip
   1a234:	bfdc      	itt	le
   1a236:	ea41 010c 	orrle.w	r1, r1, ip
   1a23a:	4090      	lslle	r0, r2
   1a23c:	1ae4      	subs	r4, r4, r3
   1a23e:	bfa2      	ittt	ge
   1a240:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1a244:	4329      	orrge	r1, r5
   1a246:	bd30      	popge	{r4, r5, pc}
   1a248:	ea6f 0404 	mvn.w	r4, r4
   1a24c:	3c1f      	subs	r4, #31
   1a24e:	da1c      	bge.n	1a28a <__adddf3+0x1d2>
   1a250:	340c      	adds	r4, #12
   1a252:	dc0e      	bgt.n	1a272 <__adddf3+0x1ba>
   1a254:	f104 0414 	add.w	r4, r4, #20
   1a258:	f1c4 0220 	rsb	r2, r4, #32
   1a25c:	fa20 f004 	lsr.w	r0, r0, r4
   1a260:	fa01 f302 	lsl.w	r3, r1, r2
   1a264:	ea40 0003 	orr.w	r0, r0, r3
   1a268:	fa21 f304 	lsr.w	r3, r1, r4
   1a26c:	ea45 0103 	orr.w	r1, r5, r3
   1a270:	bd30      	pop	{r4, r5, pc}
   1a272:	f1c4 040c 	rsb	r4, r4, #12
   1a276:	f1c4 0220 	rsb	r2, r4, #32
   1a27a:	fa20 f002 	lsr.w	r0, r0, r2
   1a27e:	fa01 f304 	lsl.w	r3, r1, r4
   1a282:	ea40 0003 	orr.w	r0, r0, r3
   1a286:	4629      	mov	r1, r5
   1a288:	bd30      	pop	{r4, r5, pc}
   1a28a:	fa21 f004 	lsr.w	r0, r1, r4
   1a28e:	4629      	mov	r1, r5
   1a290:	bd30      	pop	{r4, r5, pc}
   1a292:	f094 0f00 	teq	r4, #0
   1a296:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1a29a:	bf06      	itte	eq
   1a29c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1a2a0:	3401      	addeq	r4, #1
   1a2a2:	3d01      	subne	r5, #1
   1a2a4:	e74e      	b.n	1a144 <__adddf3+0x8c>
   1a2a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a2aa:	bf18      	it	ne
   1a2ac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1a2b0:	d029      	beq.n	1a306 <__adddf3+0x24e>
   1a2b2:	ea94 0f05 	teq	r4, r5
   1a2b6:	bf08      	it	eq
   1a2b8:	ea90 0f02 	teqeq	r0, r2
   1a2bc:	d005      	beq.n	1a2ca <__adddf3+0x212>
   1a2be:	ea54 0c00 	orrs.w	ip, r4, r0
   1a2c2:	bf04      	itt	eq
   1a2c4:	4619      	moveq	r1, r3
   1a2c6:	4610      	moveq	r0, r2
   1a2c8:	bd30      	pop	{r4, r5, pc}
   1a2ca:	ea91 0f03 	teq	r1, r3
   1a2ce:	bf1e      	ittt	ne
   1a2d0:	2100      	movne	r1, #0
   1a2d2:	2000      	movne	r0, #0
   1a2d4:	bd30      	popne	{r4, r5, pc}
   1a2d6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1a2da:	d105      	bne.n	1a2e8 <__adddf3+0x230>
   1a2dc:	0040      	lsls	r0, r0, #1
   1a2de:	4149      	adcs	r1, r1
   1a2e0:	bf28      	it	cs
   1a2e2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1a2e6:	bd30      	pop	{r4, r5, pc}
   1a2e8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1a2ec:	bf3c      	itt	cc
   1a2ee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1a2f2:	bd30      	popcc	{r4, r5, pc}
   1a2f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a2f8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1a2fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1a300:	f04f 0000 	mov.w	r0, #0
   1a304:	bd30      	pop	{r4, r5, pc}
   1a306:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1a30a:	bf1a      	itte	ne
   1a30c:	4619      	movne	r1, r3
   1a30e:	4610      	movne	r0, r2
   1a310:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1a314:	bf1c      	itt	ne
   1a316:	460b      	movne	r3, r1
   1a318:	4602      	movne	r2, r0
   1a31a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1a31e:	bf06      	itte	eq
   1a320:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1a324:	ea91 0f03 	teqeq	r1, r3
   1a328:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1a32c:	bd30      	pop	{r4, r5, pc}
   1a32e:	bf00      	nop

0001a330 <__aeabi_ui2d>:
   1a330:	f090 0f00 	teq	r0, #0
   1a334:	bf04      	itt	eq
   1a336:	2100      	moveq	r1, #0
   1a338:	4770      	bxeq	lr
   1a33a:	b530      	push	{r4, r5, lr}
   1a33c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a340:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a344:	f04f 0500 	mov.w	r5, #0
   1a348:	f04f 0100 	mov.w	r1, #0
   1a34c:	e750      	b.n	1a1f0 <__adddf3+0x138>
   1a34e:	bf00      	nop

0001a350 <__aeabi_i2d>:
   1a350:	f090 0f00 	teq	r0, #0
   1a354:	bf04      	itt	eq
   1a356:	2100      	moveq	r1, #0
   1a358:	4770      	bxeq	lr
   1a35a:	b530      	push	{r4, r5, lr}
   1a35c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a360:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a364:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1a368:	bf48      	it	mi
   1a36a:	4240      	negmi	r0, r0
   1a36c:	f04f 0100 	mov.w	r1, #0
   1a370:	e73e      	b.n	1a1f0 <__adddf3+0x138>
   1a372:	bf00      	nop

0001a374 <__aeabi_f2d>:
   1a374:	0042      	lsls	r2, r0, #1
   1a376:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1a37a:	ea4f 0131 	mov.w	r1, r1, rrx
   1a37e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1a382:	bf1f      	itttt	ne
   1a384:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1a388:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1a38c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1a390:	4770      	bxne	lr
   1a392:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1a396:	bf08      	it	eq
   1a398:	4770      	bxeq	lr
   1a39a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1a39e:	bf04      	itt	eq
   1a3a0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1a3a4:	4770      	bxeq	lr
   1a3a6:	b530      	push	{r4, r5, lr}
   1a3a8:	f44f 7460 	mov.w	r4, #896	; 0x380
   1a3ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1a3b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1a3b4:	e71c      	b.n	1a1f0 <__adddf3+0x138>
   1a3b6:	bf00      	nop

0001a3b8 <__aeabi_ul2d>:
   1a3b8:	ea50 0201 	orrs.w	r2, r0, r1
   1a3bc:	bf08      	it	eq
   1a3be:	4770      	bxeq	lr
   1a3c0:	b530      	push	{r4, r5, lr}
   1a3c2:	f04f 0500 	mov.w	r5, #0
   1a3c6:	e00a      	b.n	1a3de <__aeabi_l2d+0x16>

0001a3c8 <__aeabi_l2d>:
   1a3c8:	ea50 0201 	orrs.w	r2, r0, r1
   1a3cc:	bf08      	it	eq
   1a3ce:	4770      	bxeq	lr
   1a3d0:	b530      	push	{r4, r5, lr}
   1a3d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1a3d6:	d502      	bpl.n	1a3de <__aeabi_l2d+0x16>
   1a3d8:	4240      	negs	r0, r0
   1a3da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a3de:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1a3e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1a3e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1a3ea:	f43f aed8 	beq.w	1a19e <__adddf3+0xe6>
   1a3ee:	f04f 0203 	mov.w	r2, #3
   1a3f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a3f6:	bf18      	it	ne
   1a3f8:	3203      	addne	r2, #3
   1a3fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1a3fe:	bf18      	it	ne
   1a400:	3203      	addne	r2, #3
   1a402:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1a406:	f1c2 0320 	rsb	r3, r2, #32
   1a40a:	fa00 fc03 	lsl.w	ip, r0, r3
   1a40e:	fa20 f002 	lsr.w	r0, r0, r2
   1a412:	fa01 fe03 	lsl.w	lr, r1, r3
   1a416:	ea40 000e 	orr.w	r0, r0, lr
   1a41a:	fa21 f102 	lsr.w	r1, r1, r2
   1a41e:	4414      	add	r4, r2
   1a420:	e6bd      	b.n	1a19e <__adddf3+0xe6>
   1a422:	bf00      	nop

0001a424 <__aeabi_d2lz>:
   1a424:	b508      	push	{r3, lr}
   1a426:	4602      	mov	r2, r0
   1a428:	460b      	mov	r3, r1
   1a42a:	ec43 2b17 	vmov	d7, r2, r3
   1a42e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1a432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1a436:	d403      	bmi.n	1a440 <__aeabi_d2lz+0x1c>
   1a438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a43c:	f000 b80c 	b.w	1a458 <__aeabi_d2ulz>
   1a440:	eeb1 7b47 	vneg.f64	d7, d7
   1a444:	ec51 0b17 	vmov	r0, r1, d7
   1a448:	f000 f806 	bl	1a458 <__aeabi_d2ulz>
   1a44c:	4240      	negs	r0, r0
   1a44e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1a452:	bd08      	pop	{r3, pc}
   1a454:	0000      	movs	r0, r0
	...

0001a458 <__aeabi_d2ulz>:
   1a458:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1a488 <__aeabi_d2ulz+0x30>
   1a45c:	ec41 0b17 	vmov	d7, r0, r1
   1a460:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1a490 <__aeabi_d2ulz+0x38>
   1a464:	ee27 6b06 	vmul.f64	d6, d7, d6
   1a468:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1a46c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   1a470:	eea4 7b45 	vfms.f64	d7, d4, d5
   1a474:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   1a478:	ee16 1a10 	vmov	r1, s12
   1a47c:	ee17 0a90 	vmov	r0, s15
   1a480:	4770      	bx	lr
   1a482:	bf00      	nop
   1a484:	f3af 8000 	nop.w
   1a488:	00000000 	.word	0x00000000
   1a48c:	3df00000 	.word	0x3df00000
   1a490:	00000000 	.word	0x00000000
   1a494:	41f00000 	.word	0x41f00000

0001a498 <___ZN7TwoWire5beginEv_veneer>:
   1a498:	f85f f000 	ldr.w	pc, [pc]	; 1a49c <___ZN7TwoWire5beginEv_veneer+0x4>
   1a49c:	60001789 	.word	0x60001789

0001a4a0 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   1a4a0:	f85f f000 	ldr.w	pc, [pc]	; 1a4a4 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1a4a4:	6000188d 	.word	0x6000188d

0001a4a8 <__usb_init_veneer>:
   1a4a8:	f85f f000 	ldr.w	pc, [pc]	; 1a4ac <__usb_init_veneer+0x4>
   1a4ac:	6000261d 	.word	0x6000261d

0001a4b0 <___reboot_Teensyduino__veneer>:
   1a4b0:	f85f f000 	ldr.w	pc, [pc]	; 1a4b4 <___reboot_Teensyduino__veneer+0x4>
   1a4b4:	60002705 	.word	0x60002705

0001a4b8 <___init_veneer>:
   1a4b8:	f85f f000 	ldr.w	pc, [pc]	; 1a4bc <___init_veneer+0x4>
   1a4bc:	600027ad 	.word	0x600027ad

0001a4c0 <___ZN16CrashReportClasscvbEv_veneer>:
   1a4c0:	f85f f000 	ldr.w	pc, [pc]	; 1a4c4 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1a4c4:	60001f91 	.word	0x60001f91
	...

Disassembly of section .fini:

0001a4d0 <_fini>:
   1a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4d2:	bf00      	nop

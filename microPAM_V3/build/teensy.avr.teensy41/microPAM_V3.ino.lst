
C:\Users\zimme\AppData\Local\Temp\arduino\sketches\A5394982E70389E0D0C97A4E173256C7/microPAM_V3.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20009ac0 	.word	0x20009ac0
6000142c:	20019c20 	.word	0x20019c20

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 fdd4 	bl	60001fec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b68      	ldr	r3, [pc, #416]	; (600015e8 <ResetHandler2+0x1b8>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5f      	ldr	r2, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1c0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1c4>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a60      	ldr	r2, [pc, #384]	; (600015f8 <ResetHandler2+0x1c8>)
60001478:	4960      	ldr	r1, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147a:	4861      	ldr	r0, [pc, #388]	; (60001600 <ResetHandler2+0x1d0>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c60      	ldr	r4, [pc, #384]	; (60001604 <ResetHandler2+0x1d4>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5d      	ldr	r2, [pc, #372]	; (60001608 <ResetHandler2+0x1d8>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b5a      	ldr	r3, [pc, #360]	; (6000160c <ResetHandler2+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a5a      	ldr	r2, [pc, #360]	; (60001610 <ResetHandler2+0x1e0>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4d      	ldr	r6, [pc, #308]	; (600015e8 <ResetHandler2+0x1b8>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 60001640 <ResetHandler2+0x210>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a184 	ldr.w	sl, [pc, #388]	; 60001644 <ResetHandler2+0x214>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8168 	ldr.w	r8, [pc, #360]	; 60001648 <ResetHandler2+0x218>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4b      	ldr	r2, [pc, #300]	; (60001614 <ResetHandler2+0x1e4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 fd72 	bl	60001ffc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3f      	ldr	r3, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	4940      	ldr	r1, [pc, #256]	; (6000161c <ResetHandler2+0x1ec>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b40      	ldr	r3, [pc, #256]	; (60001620 <ResetHandler2+0x1f0>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3d      	ldr	r3, [pc, #244]	; (60001624 <ResetHandler2+0x1f4>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b3a      	ldr	r3, [pc, #232]	; (60001628 <ResetHandler2+0x1f8>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 ffa0 	bl	60002490 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4835      	ldr	r0, [pc, #212]	; (6000162c <ResetHandler2+0x1fc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f001 f955 	bl	60002810 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b31      	ldr	r3, [pc, #196]	; (60001630 <ResetHandler2+0x200>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a31      	ldr	r2, [pc, #196]	; (60001634 <ResetHandler2+0x204>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4929      	ldr	r1, [pc, #164]	; (60001638 <ResetHandler2+0x208>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a24      	ldr	r2, [pc, #144]	; (60001634 <ResetHandler2+0x204>)
600015a2:	4c26      	ldr	r4, [pc, #152]	; (6000163c <ResetHandler2+0x20c>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	configure_external_ram();
600015ac:	f000 fdae 	bl	6000210c <configure_external_ram>
	analog_init();
600015b0:	f001 f8d2 	bl	60002758 <analog_init>
	pwm_init();
600015b4:	f001 f914 	bl	600027e0 <__pwm_init_veneer>
	tempmon_init();
600015b8:	f000 ff98 	bl	600024ec <tempmon_init>
	startup_middle_hook();
600015bc:	f000 fd18 	bl	60001ff0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015c0:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c2:	2b13      	cmp	r3, #19
600015c4:	d9fc      	bls.n	600015c0 <ResetHandler2+0x190>
	usb_init();
600015c6:	f001 f829 	bl	6000261c <usb_init>
600015ca:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015d0:	d3fb      	bcc.n	600015ca <ResetHandler2+0x19a>
	startup_debug_reset();
600015d2:	f000 fd11 	bl	60001ff8 <startup_debug_reset>
	startup_late_hook();
600015d6:	f000 fd0d 	bl	60001ff4 <startup_default_late_hook>
	__libc_init_array();
600015da:	f001 f90d 	bl	600027f8 <____libc_init_array_veneer>
	main();
600015de:	f001 f8eb 	bl	600027b8 <__main_veneer>
	while (1) asm("WFI");
600015e2:	bf30      	wfi
600015e4:	e7fd      	b.n	600015e2 <ResetHandler2+0x1b2>
600015e6:	bf00      	nop
600015e8:	400d8000 	.word	0x400d8000
600015ec:	0001b098 	.word	0x0001b098
600015f0:	60002a44 	.word	0x60002a44
600015f4:	00000000 	.word	0x00000000
600015f8:	20009ac0 	.word	0x20009ac0
600015fc:	6001dae0 	.word	0x6001dae0
60001600:	20000000 	.word	0x20000000
60001604:	20009800 	.word	0x20009800
60001608:	0000e869 	.word	0x0000e869
6000160c:	e000e400 	.word	0xe000e400
60001610:	e000e4a0 	.word	0xe000e4a0
60001614:	400ac000 	.word	0x400ac000
60001618:	0000d641 	.word	0x0000d641
6000161c:	20019b84 	.word	0x20019b84
60001620:	0000d645 	.word	0x0000d645
60001624:	20200000 	.word	0x20200000
60001628:	e0001000 	.word	0xe0001000
6000162c:	08f0d180 	.word	0x08f0d180
60001630:	40084000 	.word	0x40084000
60001634:	400d4000 	.word	0x400d4000
60001638:	56c00000 	.word	0x56c00000
6000163c:	20019b88 	.word	0x20019b88
60001640:	2018101b 	.word	0x2018101b
60001644:	13110d0c 	.word	0x13110d0c
60001648:	400fc000 	.word	0x400fc000

6000164c <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164c:	4b05      	ldr	r3, [pc, #20]	; (60001664 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164e:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	4a05      	ldr	r2, [pc, #20]	; (60001668 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	4805      	ldr	r0, [pc, #20]	; (6000166c <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001656:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001658:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4a05      	ldr	r2, [pc, #20]	; (60001670 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000165c:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165e:	4695      	mov	sp, r2
	ResetHandler2();
60001660:	f7ff fee6 	bl	60001430 <ResetHandler2>
60001664:	400ac000 	.word	0x400ac000
60001668:	aaaaaaff 	.word	0xaaaaaaff
6000166c:	00200007 	.word	0x00200007
60001670:	20060000 	.word	0x20060000

60001674 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001674:	6943      	ldr	r3, [r0, #20]
60001676:	4a0a      	ldr	r2, [pc, #40]	; (600016a0 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001678:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
6000167c:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000167e:	7a03      	ldrb	r3, [r0, #8]
60001680:	4c08      	ldr	r4, [pc, #32]	; (600016a4 <TwoWire::configSDApin(unsigned char)+0x30>)
60001682:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001686:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000168a:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
6000168c:	68c2      	ldr	r2, [r0, #12]
6000168e:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
60001690:	6903      	ldr	r3, [r0, #16]
60001692:	b10b      	cbz	r3, 60001698 <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001694:	6942      	ldr	r2, [r0, #20]
60001696:	601a      	str	r2, [r3, #0]
	}
}
60001698:	f85d 4b04 	ldr.w	r4, [sp], #4
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	20007c5c 	.word	0x20007c5c
600016a4:	0001f861 	.word	0x0001f861

600016a8 <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	7e02      	ldrb	r2, [r0, #24]
600016ac:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016b0:	f892 c008 	ldrb.w	ip, [r2, #8]
600016b4:	458c      	cmp	ip, r1
600016b6:	d01c      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016b8:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ba:	2aff      	cmp	r2, #255	; 0xff
600016bc:	d019      	beq.n	600016f2 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016be:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016c0:	b510      	push	{r4, lr}
600016c2:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016c4:	d016      	beq.n	600016f4 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016c6:	7e1a      	ldrb	r2, [r3, #24]
600016c8:	2aff      	cmp	r2, #255	; 0xff
600016ca:	d006      	beq.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016cc:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
600016d2:	6812      	ldr	r2, [r2, #0]
600016d4:	421a      	tst	r2, r3
600016d6:	d101      	bne.n	600016dc <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
600016d8:	7621      	strb	r1, [r4, #24]
}
600016da:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016dc:	4b06      	ldr	r3, [pc, #24]	; (600016f8 <TwoWire::setSDA(unsigned char)+0x50>)
600016de:	2205      	movs	r2, #5
		configSDApin(newindex);
600016e0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016e2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600016e6:	685b      	ldr	r3, [r3, #4]
600016e8:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
600016ea:	f7ff ffc3 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016ee:	7621      	strb	r1, [r4, #24]
600016f0:	e7f3      	b.n	600016da <TwoWire::setSDA(unsigned char)+0x32>
600016f2:	4770      	bx	lr
		if (sda_pin == pin) break;
600016f4:	2100      	movs	r1, #0
600016f6:	e7ea      	b.n	600016ce <TwoWire::setSDA(unsigned char)+0x26>
600016f8:	20007c5c 	.word	0x20007c5c

600016fc <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	6943      	ldr	r3, [r0, #20]
600016fe:	4a0a      	ldr	r2, [pc, #40]	; (60001728 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001700:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001704:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001706:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000170a:	4c08      	ldr	r4, [pc, #32]	; (6000172c <TwoWire::configSCLpin(unsigned char)+0x30>)
6000170c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001710:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001714:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001716:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
60001718:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
6000171c:	b10b      	cbz	r3, 60001722 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000171e:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001720:	601a      	str	r2, [r3, #0]
	}
}
60001722:	f85d 4b04 	ldr.w	r4, [sp], #4
60001726:	4770      	bx	lr
60001728:	20007c5c 	.word	0x20007c5c
6000172c:	0001f861 	.word	0x0001f861

60001730 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	7e42      	ldrb	r2, [r0, #25]
60001734:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001738:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
6000173c:	458c      	cmp	ip, r1
6000173e:	d01e      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001740:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001744:	2aff      	cmp	r2, #255	; 0xff
60001746:	d01a      	beq.n	6000177e <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
60001748:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000174a:	b510      	push	{r4, lr}
6000174c:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
6000174e:	d017      	beq.n	60001780 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001750:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001754:	2aff      	cmp	r2, #255	; 0xff
60001756:	d006      	beq.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
60001758:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000175a:	e9d3 2300 	ldrd	r2, r3, [r3]
6000175e:	6812      	ldr	r2, [r2, #0]
60001760:	421a      	tst	r2, r3
60001762:	d101      	bne.n	60001768 <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001764:	7661      	strb	r1, [r4, #25]
}
60001766:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001768:	4b06      	ldr	r3, [pc, #24]	; (60001784 <TwoWire::setSCL(unsigned char)+0x54>)
6000176a:	2205      	movs	r2, #5
		configSCLpin(newindex);
6000176c:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000176e:	eb03 130c 	add.w	r3, r3, ip, lsl #4
60001772:	685b      	ldr	r3, [r3, #4]
60001774:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
60001776:	f7ff ffc1 	bl	600016fc <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000177a:	7661      	strb	r1, [r4, #25]
6000177c:	e7f3      	b.n	60001766 <TwoWire::setSCL(unsigned char)+0x36>
6000177e:	4770      	bx	lr
		if (scl_pin == pin) break;
60001780:	2100      	movs	r1, #0
60001782:	e7ea      	b.n	6000175a <TwoWire::setSCL(unsigned char)+0x2a>
60001784:	20007c5c 	.word	0x20007c5c

60001788 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001788:	4916      	ldr	r1, [pc, #88]	; (600017e4 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000178c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
6000178e:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
60001796:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001798:	638b      	str	r3, [r1, #56]	; 0x38
{
6000179a:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
6000179c:	4d12      	ldr	r5, [pc, #72]	; (600017e8 <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000179e:	e9d2 1300 	ldrd	r1, r3, [r2]
600017a2:	680a      	ldr	r2, [r1, #0]
600017a4:	431a      	orrs	r2, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017a6:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017a8:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017aa:	2202      	movs	r2, #2
	port->MCR = 0;
600017ac:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017ae:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b0:	4a0e      	ldr	r2, [pc, #56]	; (600017ec <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017b2:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017b4:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017b6:	2201      	movs	r2, #1
600017b8:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ba:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017bc:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017c0:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017c2:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017c6:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017c8:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017ca:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017cc:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
600017ce:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
600017d0:	7e01      	ldrb	r1, [r0, #24]
600017d2:	f7ff ff4f 	bl	60001674 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
600017d6:	7e61      	ldrb	r1, [r4, #25]
600017d8:	4620      	mov	r0, r4
}
600017da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017de:	f7ff bf8d 	b.w	600016fc <TwoWire::configSCLpin(unsigned char)>
600017e2:	bf00      	nop
600017e4:	400fc000 	.word	0x400fc000
600017e8:	05050bb8 	.word	0x05050bb8
600017ec:	1928373b 	.word	0x1928373b

600017f0 <CrashReportClass::clear()>:
}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
600017f0:	4b20      	ldr	r3, [pc, #128]	; (60001874 <CrashReportClass::clear()+0x84>)
600017f2:	2000      	movs	r0, #0
{
600017f4:	b430      	push	{r4, r5}
	info->ipsr  = 0;
600017f6:	e9c3 0020 	strd	r0, r0, [r3, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
600017fa:	e9c3 0022 	strd	r0, r0, [r3, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
600017fe:	e9c3 0024 	strd	r0, r0, [r3, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001802:	e9c3 0026 	strd	r0, r0, [r3, #152]	; 0x98
	info->crc = 0;
60001806:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
6000180a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
6000180e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001812:	4919      	ldr	r1, [pc, #100]	; (60001878 <CrashReportClass::clear()+0x88>)
60001814:	4a19      	ldr	r2, [pc, #100]	; (6000187c <CrashReportClass::clear()+0x8c>)
60001816:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
6000181a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
6000181e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001822:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001826:	4b16      	ldr	r3, [pc, #88]	; (60001880 <CrashReportClass::clear()+0x90>)
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001828:	4601      	mov	r1, r0
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000182a:	4c16      	ldr	r4, [pc, #88]	; (60001884 <CrashReportClass::clear()+0x94>)
6000182c:	2201      	movs	r2, #1
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
6000182e:	689d      	ldr	r5, [r3, #8]
		while (len > 0) {
60001830:	f604 74dc 	addw	r4, r4, #4060	; 0xfdc
60001834:	609d      	str	r5, [r3, #8]
	SRC_GPR5 = 0;
60001836:	6318      	str	r0, [r3, #48]	; 0x30
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001838:	4b13      	ldr	r3, [pc, #76]	; (60001888 <CrashReportClass::clear()+0x98>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
6000183a:	f844 0c1c 	str.w	r0, [r4, #-28]
			a += *p++;
6000183e:	4618      	mov	r0, r3
60001840:	3302      	adds	r3, #2
60001842:	8800      	ldrh	r0, [r0, #0]
		while (len > 0) {
60001844:	42a3      	cmp	r3, r4
			a += *p++;
60001846:	fa12 f280 	uxtah	r2, r2, r0
			b += a;
6000184a:	4411      	add	r1, r2
		while (len > 0) {
6000184c:	d1f7      	bne.n	6000183e <CrashReportClass::clear()+0x4e>
			len -= 2;
		}
		a = a & 65535;
6000184e:	b292      	uxth	r2, r2
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001850:	4b0c      	ldr	r3, [pc, #48]	; (60001884 <CrashReportClass::clear()+0x94>)
		b = b & 65535;
		return a | (b << 16);
60001852:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
60001856:	f8c3 2fdc 	str.w	r2, [r3, #4060]	; 0xfdc
	asm("dsb");
6000185a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
6000185e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001862:	4a09      	ldr	r2, [pc, #36]	; (60001888 <CrashReportClass::clear()+0x98>)
60001864:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
60001868:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000186c:	f3bf 8f6f 	isb	sy
}
60001870:	bc30      	pop	{r4, r5}
60001872:	4770      	bx	lr
60001874:	2027ff00 	.word	0x2027ff00
60001878:	2027ff80 	.word	0x2027ff80
6000187c:	2027ffa0 	.word	0x2027ffa0
60001880:	400f8000 	.word	0x400f8000
60001884:	2027f000 	.word	0x2027f000
60001888:	2027ffc0 	.word	0x2027ffc0

6000188c <CrashReportClass::printTo(Print&) const>:
	if (info->len != sizeof(*info) / 4) return 0;
6000188c:	4bb2      	ldr	r3, [pc, #712]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
6000188e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60001892:	2a0b      	cmp	r2, #11
{
60001894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001898:	460d      	mov	r5, r1
	if (info->len != sizeof(*info) / 4) return 0;
6000189a:	d11b      	bne.n	600018d4 <CrashReportClass::printTo(Print&) const+0x48>
	crc = 0xFFFFFFFF;
6000189c:	f04f 30ff 	mov.w	r0, #4294967295
	data = (uint32_t *)info;
600018a0:	49ae      	ldr	r1, [pc, #696]	; (60001b5c <CrashReportClass::printTo(Print&) const+0x2d0>)
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018a2:	4baf      	ldr	r3, [pc, #700]	; (60001b60 <CrashReportClass::printTo(Print&) const+0x2d4>)
	while (data < end) {
600018a4:	4eaf      	ldr	r6, [pc, #700]	; (60001b64 <CrashReportClass::printTo(Print&) const+0x2d8>)
		crc ^= *data++;
600018a6:	f101 0c04 	add.w	ip, r1, #4
600018aa:	4050      	eors	r0, r2
600018ac:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
600018ae:	f000 0201 	and.w	r2, r0, #1
600018b2:	3c01      	subs	r4, #1
600018b4:	fb03 f202 	mul.w	r2, r3, r2
600018b8:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
600018bc:	d1f7      	bne.n	600018ae <CrashReportClass::printTo(Print&) const+0x22>
	while (data < end) {
600018be:	45b4      	cmp	ip, r6
600018c0:	d002      	beq.n	600018c8 <CrashReportClass::printTo(Print&) const+0x3c>
		crc ^= *data++;
600018c2:	684a      	ldr	r2, [r1, #4]
600018c4:	4661      	mov	r1, ip
600018c6:	e7ee      	b.n	600018a6 <CrashReportClass::printTo(Print&) const+0x1a>
	if (crc != info->crc) return 0;
600018c8:	f8df 828c 	ldr.w	r8, [pc, #652]	; 60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>
600018cc:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
600018d0:	4298      	cmp	r0, r3
600018d2:	d079      	beq.n	600019c8 <CrashReportClass::printTo(Print&) const+0x13c>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
600018d4:	682b      	ldr	r3, [r5, #0]
600018d6:	2217      	movs	r2, #23
600018d8:	49a3      	ldr	r1, [pc, #652]	; (60001b68 <CrashReportClass::printTo(Print&) const+0x2dc>)
600018da:	4628      	mov	r0, r5
600018dc:	685b      	ldr	r3, [r3, #4]
600018de:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
600018e0:	4628      	mov	r0, r5
600018e2:	f000 ff71 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018e6:	682b      	ldr	r3, [r5, #0]
600018e8:	2248      	movs	r2, #72	; 0x48
600018ea:	49a0      	ldr	r1, [pc, #640]	; (60001b6c <CrashReportClass::printTo(Print&) const+0x2e0>)
600018ec:	685b      	ldr	r3, [r3, #4]
600018ee:	4628      	mov	r0, r5
600018f0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600018f2:	4628      	mov	r0, r5
600018f4:	f000 ff68 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600018f8:	682b      	ldr	r3, [r5, #0]
600018fa:	2249      	movs	r2, #73	; 0x49
600018fc:	499c      	ldr	r1, [pc, #624]	; (60001b70 <CrashReportClass::printTo(Print&) const+0x2e4>)
600018fe:	685b      	ldr	r3, [r3, #4]
60001900:	4628      	mov	r0, r5
60001902:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001904:	4628      	mov	r0, r5
60001906:	f000 ff5f 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000190a:	682b      	ldr	r3, [r5, #0]
6000190c:	2224      	movs	r2, #36	; 0x24
6000190e:	4999      	ldr	r1, [pc, #612]	; (60001b74 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001910:	685b      	ldr	r3, [r3, #4]
60001912:	4628      	mov	r0, r5
60001914:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001916:	4628      	mov	r0, r5
60001918:	f000 ff56 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000191c:	682b      	ldr	r3, [r5, #0]
6000191e:	2247      	movs	r2, #71	; 0x47
60001920:	4995      	ldr	r1, [pc, #596]	; (60001b78 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001922:	685b      	ldr	r3, [r3, #4]
60001924:	4628      	mov	r0, r5
60001926:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001928:	4628      	mov	r0, r5
6000192a:	f000 ff4d 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
6000192e:	682b      	ldr	r3, [r5, #0]
60001930:	223f      	movs	r2, #63	; 0x3f
60001932:	4992      	ldr	r1, [pc, #584]	; (60001b7c <CrashReportClass::printTo(Print&) const+0x2f0>)
60001934:	685b      	ldr	r3, [r3, #4]
60001936:	4628      	mov	r0, r5
60001938:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000193a:	4628      	mov	r0, r5
6000193c:	f000 ff44 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
  uint32_t SRSR = SRC_SRSR;
60001940:	4b8f      	ldr	r3, [pc, #572]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001942:	689c      	ldr	r4, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001944:	07a2      	lsls	r2, r4, #30
60001946:	d50d      	bpl.n	60001964 <CrashReportClass::printTo(Print&) const+0xd8>
    uint32_t gpr5 = SRC_GPR5;
60001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
6000194a:	4b8e      	ldr	r3, [pc, #568]	; (60001b84 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000194c:	429a      	cmp	r2, r3
							  return write((const uint8_t *)str, strlen(str)); }
6000194e:	682b      	ldr	r3, [r5, #0]
60001950:	f000 8174 	beq.w	60001c3c <CrashReportClass::printTo(Print&) const+0x3b0>
60001954:	2240      	movs	r2, #64	; 0x40
60001956:	498c      	ldr	r1, [pc, #560]	; (60001b88 <CrashReportClass::printTo(Print&) const+0x2fc>)
60001958:	685b      	ldr	r3, [r3, #4]
6000195a:	4628      	mov	r0, r5
6000195c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000195e:	4628      	mov	r0, r5
60001960:	f000 ff32 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001964:	0767      	lsls	r7, r4, #29
60001966:	f100 815f 	bmi.w	60001c28 <CrashReportClass::printTo(Print&) const+0x39c>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
6000196a:	0726      	lsls	r6, r4, #28
6000196c:	f100 8152 	bmi.w	60001c14 <CrashReportClass::printTo(Print&) const+0x388>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001970:	06e0      	lsls	r0, r4, #27
60001972:	f100 8145 	bmi.w	60001c00 <CrashReportClass::printTo(Print&) const+0x374>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001976:	06a1      	lsls	r1, r4, #26
60001978:	f100 8138 	bmi.w	60001bec <CrashReportClass::printTo(Print&) const+0x360>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
6000197c:	0662      	lsls	r2, r4, #25
6000197e:	f100 812b 	bmi.w	60001bd8 <CrashReportClass::printTo(Print&) const+0x34c>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001982:	0623      	lsls	r3, r4, #24
60001984:	f100 80dd 	bmi.w	60001b42 <CrashReportClass::printTo(Print&) const+0x2b6>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001988:	f414 7480 	ands.w	r4, r4, #256	; 0x100
6000198c:	f040 80ad 	bne.w	60001aea <CrashReportClass::printTo(Print&) const+0x25e>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001990:	4b71      	ldr	r3, [pc, #452]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001992:	f8d3 60c0 	ldr.w	r6, [r3, #192]	; 0xc0
60001996:	b196      	cbz	r6, 600019be <CrashReportClass::printTo(Print&) const+0x132>
60001998:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
6000199c:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
6000199e:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
600019a0:	487a      	ldr	r0, [pc, #488]	; (60001b8c <CrashReportClass::printTo(Print&) const+0x300>)
			a += *p++;
600019a2:	4619      	mov	r1, r3
600019a4:	3302      	adds	r3, #2
600019a6:	8809      	ldrh	r1, [r1, #0]
		while (len > 0) {
600019a8:	4283      	cmp	r3, r0
			a += *p++;
600019aa:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
600019ae:	4414      	add	r4, r2
		while (len > 0) {
600019b0:	d1f7      	bne.n	600019a2 <CrashReportClass::printTo(Print&) const+0x116>
		a = a & 65535;
600019b2:	b293      	uxth	r3, r2
		return a | (b << 16);
600019b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
600019b8:	429f      	cmp	r7, r3
600019ba:	f000 817c 	beq.w	60001cb6 <CrashReportClass::printTo(Print&) const+0x42a>
  clear();
600019be:	f7ff ff17 	bl	600017f0 <CrashReportClass::clear()>
}
600019c2:	2001      	movs	r0, #1
600019c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
							  return write((const uint8_t *)str, strlen(str)); }
600019c8:	682b      	ldr	r3, [r5, #0]
600019ca:	220c      	movs	r2, #12
600019cc:	4970      	ldr	r1, [pc, #448]	; (60001b90 <CrashReportClass::printTo(Print&) const+0x304>)
600019ce:	4628      	mov	r0, r5
600019d0:	685b      	ldr	r3, [r3, #4]
600019d2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600019d4:	4628      	mov	r0, r5
600019d6:	f000 fef7 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600019da:	682a      	ldr	r2, [r5, #0]
    uint8_t ss = info->time % 60;
600019dc:	f8d8 90a4 	ldr.w	r9, [r8, #164]	; 0xa4
600019e0:	4628      	mov	r0, r5
    info->time /= 60;
600019e2:	4b6c      	ldr	r3, [pc, #432]	; (60001b94 <CrashReportClass::printTo(Print&) const+0x308>)
600019e4:	f8d2 a004 	ldr.w	sl, [r2, #4]
600019e8:	fba3 2709 	umull	r2, r7, r3, r9
600019ec:	496a      	ldr	r1, [pc, #424]	; (60001b98 <CrashReportClass::printTo(Print&) const+0x30c>)
600019ee:	097f      	lsrs	r7, r7, #5
    info->time /= 60;
600019f0:	fba3 2307 	umull	r2, r3, r3, r7
600019f4:	2226      	movs	r2, #38	; 0x26
600019f6:	095e      	lsrs	r6, r3, #5
600019f8:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
600019fc:	47d0      	blx	sl
    uint8_t hh = info->time % 24;
600019fe:	4967      	ldr	r1, [pc, #412]	; (60001b9c <CrashReportClass::printTo(Print&) const+0x310>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a00:	220a      	movs	r2, #10
60001a02:	4628      	mov	r0, r5
60001a04:	fba1 3106 	umull	r3, r1, r1, r6
60001a08:	4623      	mov	r3, r4
60001a0a:	0909      	lsrs	r1, r1, #4
60001a0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
60001a10:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
60001a14:	f000 fedc 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a18:	682b      	ldr	r3, [r5, #0]
    uint8_t mm = info->time % 60;
60001a1a:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
60001a1e:	2201      	movs	r2, #1
60001a20:	685b      	ldr	r3, [r3, #4]
60001a22:	4628      	mov	r0, r5
60001a24:	495e      	ldr	r1, [pc, #376]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a26:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a28:	4623      	mov	r3, r4
60001a2a:	eba7 0186 	sub.w	r1, r7, r6, lsl #2
60001a2e:	220a      	movs	r2, #10
60001a30:	4628      	mov	r0, r5
    uint8_t ss = info->time % 60;
60001a32:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
60001a36:	f000 fecb 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a3a:	682b      	ldr	r3, [r5, #0]
60001a3c:	2201      	movs	r2, #1
60001a3e:	4958      	ldr	r1, [pc, #352]	; (60001ba0 <CrashReportClass::printTo(Print&) const+0x314>)
60001a40:	685b      	ldr	r3, [r3, #4]
60001a42:	4628      	mov	r0, r5
60001a44:	4798      	blx	r3
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a46:	4623      	mov	r3, r4
60001a48:	eba9 0187 	sub.w	r1, r9, r7, lsl #2
60001a4c:	220a      	movs	r2, #10
60001a4e:	4628      	mov	r0, r5
60001a50:	f000 febe 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001a54:	4628      	mov	r0, r5
60001a56:	f000 feb7 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a5a:	682b      	ldr	r3, [r5, #0]
60001a5c:	2224      	movs	r2, #36	; 0x24
60001a5e:	4951      	ldr	r1, [pc, #324]	; (60001ba4 <CrashReportClass::printTo(Print&) const+0x318>)
60001a60:	685b      	ldr	r3, [r3, #4]
60001a62:	4628      	mov	r0, r5
60001a64:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001a66:	4623      	mov	r3, r4
60001a68:	2210      	movs	r2, #16
60001a6a:	f8d8 1098 	ldr.w	r1, [r8, #152]	; 0x98
60001a6e:	4628      	mov	r0, r5
60001a70:	f000 feae 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001a74:	4628      	mov	r0, r5
60001a76:	f000 fea7 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001a7a:	f8d8 6088 	ldr.w	r6, [r8, #136]	; 0x88
    if (_CFSR > 0) {
60001a7e:	2e00      	cmp	r6, #0
60001a80:	f040 80df 	bne.w	60001c42 <CrashReportClass::printTo(Print&) const+0x3b6>
    uint32_t _HFSR = info->hfsr;
60001a84:	4e34      	ldr	r6, [pc, #208]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
60001a86:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001a8a:	2c00      	cmp	r4, #0
60001a8c:	f040 80fa 	bne.w	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001a90:	682b      	ldr	r3, [r5, #0]
60001a92:	2222      	movs	r2, #34	; 0x22
60001a94:	4944      	ldr	r1, [pc, #272]	; (60001ba8 <CrashReportClass::printTo(Print&) const+0x31c>)
60001a96:	4628      	mov	r0, r5
60001a98:	685b      	ldr	r3, [r3, #4]
60001a9a:	4798      	blx	r3
    p.print(info->temp);
60001a9c:	4b2e      	ldr	r3, [pc, #184]	; (60001b58 <CrashReportClass::printTo(Print&) const+0x2cc>)
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001a9e:	2102      	movs	r1, #2
60001aa0:	4628      	mov	r0, r5
60001aa2:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
60001aa6:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001aaa:	f000 fea9 	bl	60002800 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001aae:	682b      	ldr	r3, [r5, #0]
60001ab0:	2205      	movs	r2, #5
60001ab2:	493e      	ldr	r1, [pc, #248]	; (60001bac <CrashReportClass::printTo(Print&) const+0x320>)
60001ab4:	685b      	ldr	r3, [r3, #4]
60001ab6:	4628      	mov	r0, r5
60001ab8:	4798      	blx	r3
60001aba:	682b      	ldr	r3, [r5, #0]
60001abc:	221d      	movs	r2, #29
60001abe:	493c      	ldr	r1, [pc, #240]	; (60001bb0 <CrashReportClass::printTo(Print&) const+0x324>)
60001ac0:	685b      	ldr	r3, [r3, #4]
60001ac2:	4628      	mov	r0, r5
60001ac4:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001ac6:	4a3b      	ldr	r2, [pc, #236]	; (60001bb4 <CrashReportClass::printTo(Print&) const+0x328>)
60001ac8:	483b      	ldr	r0, [pc, #236]	; (60001bb8 <CrashReportClass::printTo(Print&) const+0x32c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001aca:	2300      	movs	r3, #0
60001acc:	6811      	ldr	r1, [r2, #0]
60001ace:	220a      	movs	r2, #10
60001ad0:	fba0 0101 	umull	r0, r1, r0, r1
60001ad4:	4628      	mov	r0, r5
60001ad6:	0c89      	lsrs	r1, r1, #18
60001ad8:	f000 fe7a 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001adc:	682b      	ldr	r3, [r5, #0]
60001ade:	2204      	movs	r2, #4
60001ae0:	4936      	ldr	r1, [pc, #216]	; (60001bbc <CrashReportClass::printTo(Print&) const+0x330>)
60001ae2:	685b      	ldr	r3, [r3, #4]
60001ae4:	4628      	mov	r0, r5
60001ae6:	4798      	blx	r3
60001ae8:	e72a      	b.n	60001940 <CrashReportClass::printTo(Print&) const+0xb4>
60001aea:	682b      	ldr	r3, [r5, #0]
60001aec:	2229      	movs	r2, #41	; 0x29
60001aee:	4934      	ldr	r1, [pc, #208]	; (60001bc0 <CrashReportClass::printTo(Print&) const+0x334>)
60001af0:	4628      	mov	r0, r5
60001af2:	685b      	ldr	r3, [r3, #4]
60001af4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001af6:	4628      	mov	r0, r5
60001af8:	f000 fe66 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001afc:	4920      	ldr	r1, [pc, #128]	; (60001b80 <CrashReportClass::printTo(Print&) const+0x2f4>)
							  return write((const uint8_t *)str, strlen(str)); }
60001afe:	6828      	ldr	r0, [r5, #0]
60001b00:	2221      	movs	r2, #33	; 0x21
60001b02:	688b      	ldr	r3, [r1, #8]
60001b04:	6844      	ldr	r4, [r0, #4]
60001b06:	4628      	mov	r0, r5
60001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
60001b0c:	608b      	str	r3, [r1, #8]
60001b0e:	492d      	ldr	r1, [pc, #180]	; (60001bc4 <CrashReportClass::printTo(Print&) const+0x338>)
60001b10:	47a0      	blx	r4
	size_t println(const char s[])			{ return print(s) + println(); }
60001b12:	4628      	mov	r0, r5
60001b14:	f000 fe58 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b18:	682b      	ldr	r3, [r5, #0]
60001b1a:	2242      	movs	r2, #66	; 0x42
60001b1c:	492a      	ldr	r1, [pc, #168]	; (60001bc8 <CrashReportClass::printTo(Print&) const+0x33c>)
60001b1e:	685b      	ldr	r3, [r3, #4]
60001b20:	4628      	mov	r0, r5
60001b22:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b24:	4628      	mov	r0, r5
60001b26:	f000 fe4f 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b2a:	4a28      	ldr	r2, [pc, #160]	; (60001bcc <CrashReportClass::printTo(Print&) const+0x340>)
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001b2c:	4b28      	ldr	r3, [pc, #160]	; (60001bd0 <CrashReportClass::printTo(Print&) const+0x344>)
60001b2e:	2107      	movs	r1, #7
60001b30:	6419      	str	r1, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60001b32:	6b93      	ldr	r3, [r2, #56]	; 0x38
60001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001b38:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60001b3a:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60001b3e:	bf30      	wfi
60001b40:	e7fd      	b.n	60001b3e <CrashReportClass::printTo(Print&) const+0x2b2>
							  return write((const uint8_t *)str, strlen(str)); }
60001b42:	682b      	ldr	r3, [r5, #0]
60001b44:	2221      	movs	r2, #33	; 0x21
60001b46:	4923      	ldr	r1, [pc, #140]	; (60001bd4 <CrashReportClass::printTo(Print&) const+0x348>)
60001b48:	4628      	mov	r0, r5
60001b4a:	685b      	ldr	r3, [r3, #4]
60001b4c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b4e:	4628      	mov	r0, r5
60001b50:	f000 fe3a 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001b54:	e718      	b.n	60001988 <CrashReportClass::printTo(Print&) const+0xfc>
60001b56:	bf00      	nop
60001b58:	2027ff00 	.word	0x2027ff00
60001b5c:	2027ff80 	.word	0x2027ff80
60001b60:	edb88320 	.word	0xedb88320
60001b64:	2027ffa8 	.word	0x2027ffa8
60001b68:	200085f4 	.word	0x200085f4
60001b6c:	2000860c 	.word	0x2000860c
60001b70:	20008658 	.word	0x20008658
60001b74:	200086a4 	.word	0x200086a4
60001b78:	200086cc 	.word	0x200086cc
60001b7c:	20008714 	.word	0x20008714
60001b80:	400f8000 	.word	0x400f8000
60001b84:	0bad00f1 	.word	0x0bad00f1
60001b88:	200087a0 	.word	0x200087a0
60001b8c:	2027ffdc 	.word	0x2027ffdc
60001b90:	200080dc 	.word	0x200080dc
60001b94:	88888889 	.word	0x88888889
60001b98:	200080ec 	.word	0x200080ec
60001b9c:	aaaaaaab 	.word	0xaaaaaaab
60001ba0:	20008114 	.word	0x20008114
60001ba4:	20008118 	.word	0x20008118
60001ba8:	200085a0 	.word	0x200085a0
60001bac:	200085c4 	.word	0x200085c4
60001bb0:	200085cc 	.word	0x200085cc
60001bb4:	20008b90 	.word	0x20008b90
60001bb8:	431bde83 	.word	0x431bde83
60001bbc:	200085ec 	.word	0x200085ec
60001bc0:	200088d4 	.word	0x200088d4
60001bc4:	20008900 	.word	0x20008900
60001bc8:	20008924 	.word	0x20008924
60001bcc:	400d4000 	.word	0x400d4000
60001bd0:	400ac000 	.word	0x400ac000
60001bd4:	200088b0 	.word	0x200088b0
							  return write((const uint8_t *)str, strlen(str)); }
60001bd8:	682b      	ldr	r3, [r5, #0]
60001bda:	2221      	movs	r2, #33	; 0x21
60001bdc:	499c      	ldr	r1, [pc, #624]	; (60001e50 <CrashReportClass::printTo(Print&) const+0x5c4>)
60001bde:	4628      	mov	r0, r5
60001be0:	685b      	ldr	r3, [r3, #4]
60001be2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001be4:	4628      	mov	r0, r5
60001be6:	f000 fdef 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001bea:	e6ca      	b.n	60001982 <CrashReportClass::printTo(Print&) const+0xf6>
							  return write((const uint8_t *)str, strlen(str)); }
60001bec:	682b      	ldr	r3, [r5, #0]
60001bee:	2229      	movs	r2, #41	; 0x29
60001bf0:	4998      	ldr	r1, [pc, #608]	; (60001e54 <CrashReportClass::printTo(Print&) const+0x5c8>)
60001bf2:	4628      	mov	r0, r5
60001bf4:	685b      	ldr	r3, [r3, #4]
60001bf6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001bf8:	4628      	mov	r0, r5
60001bfa:	f000 fde5 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001bfe:	e6bd      	b.n	6000197c <CrashReportClass::printTo(Print&) const+0xf0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c00:	682b      	ldr	r3, [r5, #0]
60001c02:	2226      	movs	r2, #38	; 0x26
60001c04:	4994      	ldr	r1, [pc, #592]	; (60001e58 <CrashReportClass::printTo(Print&) const+0x5cc>)
60001c06:	4628      	mov	r0, r5
60001c08:	685b      	ldr	r3, [r3, #4]
60001c0a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c0c:	4628      	mov	r0, r5
60001c0e:	f000 fddb 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001c12:	e6b0      	b.n	60001976 <CrashReportClass::printTo(Print&) const+0xea>
							  return write((const uint8_t *)str, strlen(str)); }
60001c14:	682b      	ldr	r3, [r5, #0]
60001c16:	222a      	movs	r2, #42	; 0x2a
60001c18:	4990      	ldr	r1, [pc, #576]	; (60001e5c <CrashReportClass::printTo(Print&) const+0x5d0>)
60001c1a:	4628      	mov	r0, r5
60001c1c:	685b      	ldr	r3, [r3, #4]
60001c1e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c20:	4628      	mov	r0, r5
60001c22:	f000 fdd1 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001c26:	e6a3      	b.n	60001970 <CrashReportClass::printTo(Print&) const+0xe4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c28:	682b      	ldr	r3, [r5, #0]
60001c2a:	2227      	movs	r2, #39	; 0x27
60001c2c:	498c      	ldr	r1, [pc, #560]	; (60001e60 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001c2e:	4628      	mov	r0, r5
60001c30:	685b      	ldr	r3, [r3, #4]
60001c32:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c34:	4628      	mov	r0, r5
60001c36:	f000 fdc7 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001c3a:	e696      	b.n	6000196a <CrashReportClass::printTo(Print&) const+0xde>
							  return write((const uint8_t *)str, strlen(str)); }
60001c3c:	2248      	movs	r2, #72	; 0x48
60001c3e:	4989      	ldr	r1, [pc, #548]	; (60001e64 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001c40:	e68a      	b.n	60001958 <CrashReportClass::printTo(Print&) const+0xcc>
60001c42:	682b      	ldr	r3, [r5, #0]
60001c44:	2208      	movs	r2, #8
60001c46:	4988      	ldr	r1, [pc, #544]	; (60001e68 <CrashReportClass::printTo(Print&) const+0x5dc>)
60001c48:	4628      	mov	r0, r5
60001c4a:	685b      	ldr	r3, [r3, #4]
60001c4c:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c4e:	4623      	mov	r3, r4
60001c50:	2210      	movs	r2, #16
60001c52:	f8d8 1088 	ldr.w	r1, [r8, #136]	; 0x88
60001c56:	4628      	mov	r0, r5
60001c58:	f000 fdba 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c5c:	4628      	mov	r0, r5
60001c5e:	f000 fdb3 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001c62:	07f4      	lsls	r4, r6, #31
60001c64:	d469      	bmi.n	60001d3a <CrashReportClass::printTo(Print&) const+0x4ae>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001c66:	07b0      	lsls	r0, r6, #30
60001c68:	f100 8153 	bmi.w	60001f12 <CrashReportClass::printTo(Print&) const+0x686>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001c6c:	0731      	lsls	r1, r6, #28
60001c6e:	f100 8144 	bmi.w	60001efa <CrashReportClass::printTo(Print&) const+0x66e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001c72:	06f2      	lsls	r2, r6, #27
60001c74:	f100 815d 	bmi.w	60001f32 <CrashReportClass::printTo(Print&) const+0x6a6>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001c78:	06b3      	lsls	r3, r6, #26
60001c7a:	d567      	bpl.n	60001d4c <CrashReportClass::printTo(Print&) const+0x4c0>
							  return write((const uint8_t *)str, strlen(str)); }
60001c7c:	682b      	ldr	r3, [r5, #0]
60001c7e:	222a      	movs	r2, #42	; 0x2a
60001c80:	497a      	ldr	r1, [pc, #488]	; (60001e6c <CrashReportClass::printTo(Print&) const+0x5e0>)
60001c82:	e05d      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001c84:	682b      	ldr	r3, [r5, #0]
60001c86:	2208      	movs	r2, #8
60001c88:	4979      	ldr	r1, [pc, #484]	; (60001e70 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001c8a:	4628      	mov	r0, r5
60001c8c:	685b      	ldr	r3, [r3, #4]
60001c8e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001c90:	2300      	movs	r3, #0
60001c92:	2210      	movs	r2, #16
60001c94:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
60001c98:	4628      	mov	r0, r5
60001c9a:	f000 fd99 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001c9e:	4628      	mov	r0, r5
60001ca0:	f000 fd92 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001ca4:	07a0      	lsls	r0, r4, #30
60001ca6:	d467      	bmi.n	60001d78 <CrashReportClass::printTo(Print&) const+0x4ec>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001ca8:	0061      	lsls	r1, r4, #1
60001caa:	f57f aef1 	bpl.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001cae:	682b      	ldr	r3, [r5, #0]
60001cb0:	221b      	movs	r2, #27
60001cb2:	4970      	ldr	r1, [pc, #448]	; (60001e74 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001cb4:	e063      	b.n	60001d7e <CrashReportClass::printTo(Print&) const+0x4f2>
60001cb6:	2401      	movs	r4, #1
60001cb8:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 60001eb0 <CrashReportClass::printTo(Print&) const+0x624>
60001cbc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 60001eb4 <CrashReportClass::printTo(Print&) const+0x628>
      if (bc->bitmask & (1 << i)) {
60001cc0:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 60001e98 <CrashReportClass::printTo(Print&) const+0x60c>
60001cc4:	e005      	b.n	60001cd2 <CrashReportClass::printTo(Print&) const+0x446>
    for (int i=0; i < 6; i++) {
60001cc6:	3401      	adds	r4, #1
60001cc8:	2c07      	cmp	r4, #7
60001cca:	f43f ae78 	beq.w	600019be <CrashReportClass::printTo(Print&) const+0x132>
      if (bc->bitmask & (1 << i)) {
60001cce:	f8d8 60c0 	ldr.w	r6, [r8, #192]	; 0xc0
60001cd2:	1e63      	subs	r3, r4, #1
60001cd4:	2701      	movs	r7, #1
60001cd6:	fa07 f203 	lsl.w	r2, r7, r3
60001cda:	4232      	tst	r2, r6
60001cdc:	d0f3      	beq.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
60001cde:	eb09 0683 	add.w	r6, r9, r3, lsl #2
60001ce2:	682b      	ldr	r3, [r5, #0]
60001ce4:	220e      	movs	r2, #14
60001ce6:	4651      	mov	r1, sl
60001ce8:	685b      	ldr	r3, [r3, #4]
60001cea:	4628      	mov	r0, r5
60001cec:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60001cee:	4621      	mov	r1, r4
60001cf0:	4628      	mov	r0, r5
60001cf2:	f000 fd71 	bl	600027d8 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001cf6:	682b      	ldr	r3, [r5, #0]
60001cf8:	2205      	movs	r2, #5
60001cfa:	495f      	ldr	r1, [pc, #380]	; (60001e78 <CrashReportClass::printTo(Print&) const+0x5ec>)
60001cfc:	685b      	ldr	r3, [r3, #4]
60001cfe:	4628      	mov	r0, r5
60001d00:	4798      	blx	r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001d02:	6871      	ldr	r1, [r6, #4]
60001d04:	2300      	movs	r3, #0
60001d06:	220a      	movs	r2, #10
60001d08:	4628      	mov	r0, r5
60001d0a:	f000 fd61 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d0e:	682b      	ldr	r3, [r5, #0]
60001d10:	2204      	movs	r2, #4
60001d12:	495a      	ldr	r1, [pc, #360]	; (60001e7c <CrashReportClass::printTo(Print&) const+0x5f0>)
60001d14:	685b      	ldr	r3, [r3, #4]
60001d16:	4628      	mov	r0, r5
60001d18:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d1a:	6871      	ldr	r1, [r6, #4]
60001d1c:	2300      	movs	r3, #0
60001d1e:	2210      	movs	r2, #16
60001d20:	4628      	mov	r0, r5
60001d22:	f000 fd55 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d26:	682b      	ldr	r3, [r5, #0]
60001d28:	463a      	mov	r2, r7
60001d2a:	4955      	ldr	r1, [pc, #340]	; (60001e80 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001d2c:	685b      	ldr	r3, [r3, #4]
60001d2e:	4628      	mov	r0, r5
60001d30:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d32:	4628      	mov	r0, r5
60001d34:	f000 fd48 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001d38:	e7c5      	b.n	60001cc6 <CrashReportClass::printTo(Print&) const+0x43a>
							  return write((const uint8_t *)str, strlen(str)); }
60001d3a:	682b      	ldr	r3, [r5, #0]
60001d3c:	2228      	movs	r2, #40	; 0x28
60001d3e:	4951      	ldr	r1, [pc, #324]	; (60001e84 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001d40:	685b      	ldr	r3, [r3, #4]
60001d42:	4628      	mov	r0, r5
60001d44:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d46:	4628      	mov	r0, r5
60001d48:	f000 fd3e 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001d4c:	0637      	lsls	r7, r6, #24
60001d4e:	d43c      	bmi.n	60001dca <CrashReportClass::printTo(Print&) const+0x53e>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001d50:	05f4      	lsls	r4, r6, #23
60001d52:	d41b      	bmi.n	60001d8c <CrashReportClass::printTo(Print&) const+0x500>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001d54:	05b0      	lsls	r0, r6, #22
60001d56:	f100 80d8 	bmi.w	60001f0a <CrashReportClass::printTo(Print&) const+0x67e>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001d5a:	0571      	lsls	r1, r6, #21
60001d5c:	f100 80d1 	bmi.w	60001f02 <CrashReportClass::printTo(Print&) const+0x676>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001d60:	0532      	lsls	r2, r6, #20
60001d62:	f100 80e2 	bmi.w	60001f2a <CrashReportClass::printTo(Print&) const+0x69e>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001d66:	04f3      	lsls	r3, r6, #19
60001d68:	f100 80db 	bmi.w	60001f22 <CrashReportClass::printTo(Print&) const+0x696>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001d6c:	04b7      	lsls	r7, r6, #18
60001d6e:	d516      	bpl.n	60001d9e <CrashReportClass::printTo(Print&) const+0x512>
							  return write((const uint8_t *)str, strlen(str)); }
60001d70:	682b      	ldr	r3, [r5, #0]
60001d72:	2231      	movs	r2, #49	; 0x31
60001d74:	4944      	ldr	r1, [pc, #272]	; (60001e88 <CrashReportClass::printTo(Print&) const+0x5fc>)
60001d76:	e00c      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001d78:	682b      	ldr	r3, [r5, #0]
60001d7a:	2226      	movs	r2, #38	; 0x26
60001d7c:	4943      	ldr	r1, [pc, #268]	; (60001e8c <CrashReportClass::printTo(Print&) const+0x600>)
60001d7e:	4628      	mov	r0, r5
60001d80:	685b      	ldr	r3, [r3, #4]
60001d82:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d84:	4628      	mov	r0, r5
60001d86:	f000 fd1f 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001d8a:	e681      	b.n	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
							  return write((const uint8_t *)str, strlen(str)); }
60001d8c:	682b      	ldr	r3, [r5, #0]
60001d8e:	2220      	movs	r2, #32
60001d90:	493f      	ldr	r1, [pc, #252]	; (60001e90 <CrashReportClass::printTo(Print&) const+0x604>)
60001d92:	685b      	ldr	r3, [r3, #4]
60001d94:	4628      	mov	r0, r5
60001d96:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001d98:	4628      	mov	r0, r5
60001d9a:	f000 fd15 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001d9e:	0434      	lsls	r4, r6, #16
60001da0:	d440      	bmi.n	60001e24 <CrashReportClass::printTo(Print&) const+0x598>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001da2:	03f0      	lsls	r0, r6, #15
60001da4:	d42e      	bmi.n	60001e04 <CrashReportClass::printTo(Print&) const+0x578>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001da6:	03b1      	lsls	r1, r6, #14
60001da8:	f100 80b7 	bmi.w	60001f1a <CrashReportClass::printTo(Print&) const+0x68e>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001dac:	0372      	lsls	r2, r6, #13
60001dae:	d44b      	bmi.n	60001e48 <CrashReportClass::printTo(Print&) const+0x5bc>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001db0:	0333      	lsls	r3, r6, #12
60001db2:	f100 80c6 	bmi.w	60001f42 <CrashReportClass::printTo(Print&) const+0x6b6>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001db6:	01f7      	lsls	r7, r6, #7
60001db8:	f100 80bf 	bmi.w	60001f3a <CrashReportClass::printTo(Print&) const+0x6ae>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001dbc:	01b4      	lsls	r4, r6, #6
60001dbe:	f57f ae61 	bpl.w	60001a84 <CrashReportClass::printTo(Print&) const+0x1f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001dc2:	682b      	ldr	r3, [r5, #0]
60001dc4:	221b      	movs	r2, #27
60001dc6:	4933      	ldr	r1, [pc, #204]	; (60001e94 <CrashReportClass::printTo(Print&) const+0x608>)
60001dc8:	e01f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001dca:	682b      	ldr	r3, [r5, #0]
60001dcc:	2221      	movs	r2, #33	; 0x21
        p.print(info->mmfar, HEX);
60001dce:	4c32      	ldr	r4, [pc, #200]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001dd0:	4628      	mov	r0, r5
60001dd2:	4932      	ldr	r1, [pc, #200]	; (60001e9c <CrashReportClass::printTo(Print&) const+0x610>)
60001dd4:	685b      	ldr	r3, [r3, #4]
60001dd6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001dd8:	2210      	movs	r2, #16
60001dda:	2300      	movs	r3, #0
60001ddc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
60001de0:	4628      	mov	r0, r5
60001de2:	f000 fcf5 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001de6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
60001dea:	2a1f      	cmp	r2, #31
60001dec:	d964      	bls.n	60001eb8 <CrashReportClass::printTo(Print&) const+0x62c>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001dee:	4b2c      	ldr	r3, [pc, #176]	; (60001ea0 <CrashReportClass::printTo(Print&) const+0x614>)
60001df0:	429a      	cmp	r2, r3
60001df2:	d303      	bcc.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001df4:	3320      	adds	r3, #32
60001df6:	429a      	cmp	r2, r3
60001df8:	f0c0 80a7 	bcc.w	60001f4a <CrashReportClass::printTo(Print&) const+0x6be>
        p.println();
60001dfc:	4628      	mov	r0, r5
60001dfe:	f000 fce3 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001e02:	e7a5      	b.n	60001d50 <CrashReportClass::printTo(Print&) const+0x4c4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e04:	682b      	ldr	r3, [r5, #0]
60001e06:	2223      	movs	r2, #35	; 0x23
60001e08:	4926      	ldr	r1, [pc, #152]	; (60001ea4 <CrashReportClass::printTo(Print&) const+0x618>)
60001e0a:	685b      	ldr	r3, [r3, #4]
60001e0c:	4628      	mov	r0, r5
    uint32_t _HFSR = info->hfsr;
60001e0e:	4e22      	ldr	r6, [pc, #136]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
60001e10:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e12:	4628      	mov	r0, r5
60001e14:	f000 fcd8 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001e18:	f8d6 408c 	ldr.w	r4, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001e1c:	2c00      	cmp	r4, #0
60001e1e:	f43f ae37 	beq.w	60001a90 <CrashReportClass::printTo(Print&) const+0x204>
60001e22:	e72f      	b.n	60001c84 <CrashReportClass::printTo(Print&) const+0x3f8>
							  return write((const uint8_t *)str, strlen(str)); }
60001e24:	682b      	ldr	r3, [r5, #0]
60001e26:	2221      	movs	r2, #33	; 0x21
60001e28:	491f      	ldr	r1, [pc, #124]	; (60001ea8 <CrashReportClass::printTo(Print&) const+0x61c>)
60001e2a:	4628      	mov	r0, r5
60001e2c:	685b      	ldr	r3, [r3, #4]
60001e2e:	4798      	blx	r3
        p.println(info->bfar, HEX);
60001e30:	4919      	ldr	r1, [pc, #100]	; (60001e98 <CrashReportClass::printTo(Print&) const+0x60c>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e32:	2300      	movs	r3, #0
60001e34:	2210      	movs	r2, #16
60001e36:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001e3a:	4628      	mov	r0, r5
60001e3c:	f000 fcc8 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001e40:	4628      	mov	r0, r5
60001e42:	f000 fcc1 	bl	600027c8 <___ZN5Print7printlnEv_veneer>
60001e46:	e7ac      	b.n	60001da2 <CrashReportClass::printTo(Print&) const+0x516>
							  return write((const uint8_t *)str, strlen(str)); }
60001e48:	682b      	ldr	r3, [r5, #0]
60001e4a:	2228      	movs	r2, #40	; 0x28
60001e4c:	4917      	ldr	r1, [pc, #92]	; (60001eac <CrashReportClass::printTo(Print&) const+0x620>)
60001e4e:	e7dc      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001e50:	2000888c 	.word	0x2000888c
60001e54:	20008860 	.word	0x20008860
60001e58:	20008838 	.word	0x20008838
60001e5c:	2000880c 	.word	0x2000880c
60001e60:	200087e4 	.word	0x200087e4
60001e64:	20008754 	.word	0x20008754
60001e68:	20008140 	.word	0x20008140
60001e6c:	200081f0 	.word	0x200081f0
60001e70:	20008550 	.word	0x20008550
60001e74:	20008584 	.word	0x20008584
60001e78:	20008978 	.word	0x20008978
60001e7c:	20008980 	.word	0x20008980
60001e80:	200086a0 	.word	0x200086a0
60001e84:	2000814c 	.word	0x2000814c
60001e88:	20008414 	.word	0x20008414
60001e8c:	2000855c 	.word	0x2000855c
60001e90:	20008304 	.word	0x20008304
60001e94:	20008534 	.word	0x20008534
60001e98:	2027ff00 	.word	0x2027ff00
60001e9c:	2000821c 	.word	0x2000821c
60001ea0:	20019c20 	.word	0x20019c20
60001ea4:	2000846c 	.word	0x2000846c
60001ea8:	20008448 	.word	0x20008448
60001eac:	200084c4 	.word	0x200084c4
60001eb0:	20008968 	.word	0x20008968
60001eb4:	2027ffc0 	.word	0x2027ffc0
60001eb8:	682b      	ldr	r3, [r5, #0]
60001eba:	221e      	movs	r2, #30
60001ebc:	4926      	ldr	r1, [pc, #152]	; (60001f58 <CrashReportClass::printTo(Print&) const+0x6cc>)
60001ebe:	4628      	mov	r0, r5
60001ec0:	685b      	ldr	r3, [r3, #4]
60001ec2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ec4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ec8:	2300      	movs	r3, #0
60001eca:	2210      	movs	r2, #16
60001ecc:	4628      	mov	r0, r5
60001ece:	f000 fc7f 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ed2:	682b      	ldr	r3, [r5, #0]
60001ed4:	223e      	movs	r2, #62	; 0x3e
60001ed6:	4921      	ldr	r1, [pc, #132]	; (60001f5c <CrashReportClass::printTo(Print&) const+0x6d0>)
60001ed8:	685b      	ldr	r3, [r3, #4]
60001eda:	4628      	mov	r0, r5
60001edc:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ede:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
60001ee2:	2300      	movs	r3, #0
60001ee4:	2210      	movs	r2, #16
60001ee6:	4628      	mov	r0, r5
60001ee8:	f000 fc72 	bl	600027d0 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001eec:	682b      	ldr	r3, [r5, #0]
60001eee:	221d      	movs	r2, #29
60001ef0:	491b      	ldr	r1, [pc, #108]	; (60001f60 <CrashReportClass::printTo(Print&) const+0x6d4>)
60001ef2:	685b      	ldr	r3, [r3, #4]
60001ef4:	4628      	mov	r0, r5
60001ef6:	4798      	blx	r3
60001ef8:	e780      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001efa:	682b      	ldr	r3, [r5, #0]
60001efc:	2229      	movs	r2, #41	; 0x29
60001efe:	4919      	ldr	r1, [pc, #100]	; (60001f64 <CrashReportClass::printTo(Print&) const+0x6d8>)
60001f00:	e71e      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f02:	682b      	ldr	r3, [r5, #0]
60001f04:	2244      	movs	r2, #68	; 0x44
60001f06:	4918      	ldr	r1, [pc, #96]	; (60001f68 <CrashReportClass::printTo(Print&) const+0x6dc>)
60001f08:	e743      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f0a:	682b      	ldr	r3, [r5, #0]
60001f0c:	222c      	movs	r2, #44	; 0x2c
60001f0e:	4917      	ldr	r1, [pc, #92]	; (60001f6c <CrashReportClass::printTo(Print&) const+0x6e0>)
60001f10:	e73f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f12:	682b      	ldr	r3, [r5, #0]
60001f14:	2221      	movs	r2, #33	; 0x21
60001f16:	4916      	ldr	r1, [pc, #88]	; (60001f70 <CrashReportClass::printTo(Print&) const+0x6e4>)
60001f18:	e712      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f1a:	682b      	ldr	r3, [r5, #0]
60001f1c:	2232      	movs	r2, #50	; 0x32
60001f1e:	4915      	ldr	r1, [pc, #84]	; (60001f74 <CrashReportClass::printTo(Print&) const+0x6e8>)
60001f20:	e773      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f22:	682b      	ldr	r3, [r5, #0]
60001f24:	2233      	movs	r2, #51	; 0x33
60001f26:	4914      	ldr	r1, [pc, #80]	; (60001f78 <CrashReportClass::printTo(Print&) const+0x6ec>)
60001f28:	e733      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f2a:	682b      	ldr	r3, [r5, #0]
60001f2c:	223f      	movs	r2, #63	; 0x3f
60001f2e:	4913      	ldr	r1, [pc, #76]	; (60001f7c <CrashReportClass::printTo(Print&) const+0x6f0>)
60001f30:	e72f      	b.n	60001d92 <CrashReportClass::printTo(Print&) const+0x506>
60001f32:	682b      	ldr	r3, [r5, #0]
60001f34:	2225      	movs	r2, #37	; 0x25
60001f36:	4912      	ldr	r1, [pc, #72]	; (60001f80 <CrashReportClass::printTo(Print&) const+0x6f4>)
60001f38:	e702      	b.n	60001d40 <CrashReportClass::printTo(Print&) const+0x4b4>
60001f3a:	682b      	ldr	r3, [r5, #0]
60001f3c:	2228      	movs	r2, #40	; 0x28
60001f3e:	4911      	ldr	r1, [pc, #68]	; (60001f84 <CrashReportClass::printTo(Print&) const+0x6f8>)
60001f40:	e763      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f42:	682b      	ldr	r3, [r5, #0]
60001f44:	2216      	movs	r2, #22
60001f46:	4910      	ldr	r1, [pc, #64]	; (60001f88 <CrashReportClass::printTo(Print&) const+0x6fc>)
60001f48:	e75f      	b.n	60001e0a <CrashReportClass::printTo(Print&) const+0x57e>
60001f4a:	682b      	ldr	r3, [r5, #0]
60001f4c:	2241      	movs	r2, #65	; 0x41
60001f4e:	490f      	ldr	r1, [pc, #60]	; (60001f8c <CrashReportClass::printTo(Print&) const+0x700>)
60001f50:	4628      	mov	r0, r5
60001f52:	685b      	ldr	r3, [r3, #4]
60001f54:	4798      	blx	r3
60001f56:	e751      	b.n	60001dfc <CrashReportClass::printTo(Print&) const+0x570>
60001f58:	20008240 	.word	0x20008240
60001f5c:	20008260 	.word	0x20008260
60001f60:	200082a0 	.word	0x200082a0
60001f64:	2000819c 	.word	0x2000819c
60001f68:	20008358 	.word	0x20008358
60001f6c:	20008328 	.word	0x20008328
60001f70:	20008178 	.word	0x20008178
60001f74:	20008490 	.word	0x20008490
60001f78:	200083e0 	.word	0x200083e0
60001f7c:	200083a0 	.word	0x200083a0
60001f80:	200081c8 	.word	0x200081c8
60001f84:	20008508 	.word	0x20008508
60001f88:	200084f0 	.word	0x200084f0
60001f8c:	200082c0 	.word	0x200082c0

60001f90 <CrashReportClass::operator bool()>:
	if (info->len != sizeof(*info) / 4) return 0;
60001f90:	4b12      	ldr	r3, [pc, #72]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
60001f96:	2b0b      	cmp	r3, #11
60001f98:	d11e      	bne.n	60001fd8 <CrashReportClass::operator bool()+0x48>
	crc = 0xFFFFFFFF;
60001f9a:	f04f 32ff 	mov.w	r2, #4294967295
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001f9e:	4810      	ldr	r0, [pc, #64]	; (60001fe0 <CrashReportClass::operator bool()+0x50>)
{
60001fa0:	b530      	push	{r4, r5, lr}
	data = (uint32_t *)info;
60001fa2:	4d10      	ldr	r5, [pc, #64]	; (60001fe4 <CrashReportClass::operator bool()+0x54>)
	while (data < end) {
60001fa4:	4c10      	ldr	r4, [pc, #64]	; (60001fe8 <CrashReportClass::operator bool()+0x58>)
60001fa6:	e001      	b.n	60001fac <CrashReportClass::operator bool()+0x1c>
		crc ^= *data++;
60001fa8:	686b      	ldr	r3, [r5, #4]
60001faa:	4675      	mov	r5, lr
60001fac:	f105 0e04 	add.w	lr, r5, #4
60001fb0:	405a      	eors	r2, r3
60001fb2:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001fb4:	f002 0301 	and.w	r3, r2, #1
60001fb8:	3901      	subs	r1, #1
60001fba:	fb00 f303 	mul.w	r3, r0, r3
60001fbe:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
60001fc2:	d1f7      	bne.n	60001fb4 <CrashReportClass::operator bool()+0x24>
	while (data < end) {
60001fc4:	45a6      	cmp	lr, r4
60001fc6:	d1ef      	bne.n	60001fa8 <CrashReportClass::operator bool()+0x18>
	if (crc != info->crc) return 0;
60001fc8:	4b04      	ldr	r3, [pc, #16]	; (60001fdc <CrashReportClass::operator bool()+0x4c>)
60001fca:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
60001fce:	1a80      	subs	r0, r0, r2
60001fd0:	fab0 f080 	clz	r0, r0
60001fd4:	0940      	lsrs	r0, r0, #5
}
60001fd6:	bd30      	pop	{r4, r5, pc}
	return false;
60001fd8:	2000      	movs	r0, #0
}
60001fda:	4770      	bx	lr
60001fdc:	2027ff00 	.word	0x2027ff00
60001fe0:	edb88320 	.word	0xedb88320
60001fe4:	2027ff80 	.word	0x2027ff80
60001fe8:	2027ffa8 	.word	0x2027ffa8

60001fec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001fec:	4770      	bx	lr
60001fee:	bf00      	nop

60001ff0 <startup_default_middle_hook>:
60001ff0:	4770      	bx	lr
60001ff2:	bf00      	nop

60001ff4 <startup_default_late_hook>:
60001ff4:	4770      	bx	lr
60001ff6:	bf00      	nop

60001ff8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001ff8:	bf00      	nop
60001ffa:	4770      	bx	lr

60001ffc <configure_cache>:
{
60001ffc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001ffe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002002:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60002004:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002006:	4831      	ldr	r0, [pc, #196]	; (600020cc <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
60002008:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000200c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002010:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002012:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60002016:	482e      	ldr	r0, [pc, #184]	; (600020d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002018:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000201c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000201e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60002022:	482c      	ldr	r0, [pc, #176]	; (600020d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002024:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002028:	4a2b      	ldr	r2, [pc, #172]	; (600020d8 <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000202a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000202e:	4c2b      	ldr	r4, [pc, #172]	; (600020dc <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002030:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002034:	482a      	ldr	r0, [pc, #168]	; (600020e0 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002036:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000203a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000203e:	4c29      	ldr	r4, [pc, #164]	; (600020e4 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002040:	4829      	ldr	r0, [pc, #164]	; (600020e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60002042:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002046:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000204a:	4c28      	ldr	r4, [pc, #160]	; (600020ec <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000204c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002050:	4827      	ldr	r0, [pc, #156]	; (600020f0 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60002052:	4a28      	ldr	r2, [pc, #160]	; (600020f4 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60002054:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002058:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000205c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002060:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60002064:	4c24      	ldr	r4, [pc, #144]	; (600020f8 <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60002066:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002068:	4824      	ldr	r0, [pc, #144]	; (600020fc <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000206a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000206e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60002072:	4a23      	ldr	r2, [pc, #140]	; (60002100 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60002074:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002078:	4c22      	ldr	r4, [pc, #136]	; (60002104 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000207a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000207e:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60002082:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60002086:	4820      	ldr	r0, [pc, #128]	; (60002108 <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60002088:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000208c:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000208e:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60002092:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60002096:	bf00      	nop
	asm("nop");
60002098:	bf00      	nop
	asm("nop");
6000209a:	bf00      	nop
	asm("nop");
6000209c:	bf00      	nop
	asm("nop");
6000209e:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600020a0:	2201      	movs	r2, #1
600020a2:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600020a6:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020aa:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600020ae:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600020b2:	f3bf 8f4f 	dsb	sy
	asm("isb");
600020b6:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020ba:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600020be:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600020c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600020c6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600020ca:	4770      	bx	lr
600020cc:	1000003f 	.word	0x1000003f
600020d0:	07080025 	.word	0x07080025
600020d4:	00100009 	.word	0x00100009
600020d8:	20019c20 	.word	0x20019c20
600020dc:	00200013 	.word	0x00200013
600020e0:	07020021 	.word	0x07020021
600020e4:	20000014 	.word	0x20000014
600020e8:	13080025 	.word	0x13080025
600020ec:	10000009 	.word	0x10000009
600020f0:	20200016 	.word	0x20200016
600020f4:	130b0027 	.word	0x130b0027
600020f8:	40000017 	.word	0x40000017
600020fc:	60000018 	.word	0x60000018
60002100:	070b002f 	.word	0x070b002f
60002104:	70000019 	.word	0x70000019
60002108:	8000001a 	.word	0x8000001a

6000210c <configure_external_ram>:
{
6000210c:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000210e:	4bb8      	ldr	r3, [pc, #736]	; (600023f0 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002110:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002112:	4eb8      	ldr	r6, [pc, #736]	; (600023f4 <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60002114:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002116:	4fb8      	ldr	r7, [pc, #736]	; (600023f8 <configure_external_ram+0x2ec>)
{
60002118:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000211a:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000211e:	49b7      	ldr	r1, [pc, #732]	; (600023fc <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002120:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002124:	4db6      	ldr	r5, [pc, #728]	; (60002400 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002126:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000212a:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000212e:	4cb5      	ldr	r4, [pc, #724]	; (60002404 <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60002130:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002134:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002138:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000213c:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002140:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002144:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002148:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000214a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000214c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000214e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60002150:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60002152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000215a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000215e:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002162:	4aa9      	ldr	r2, [pc, #676]	; (60002408 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60002164:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60002168:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
6000216c:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60002170:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60002174:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002178:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
6000217a:	4ba4      	ldr	r3, [pc, #656]	; (6000240c <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
6000217c:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
6000217e:	48a4      	ldr	r0, [pc, #656]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60002180:	49a4      	ldr	r1, [pc, #656]	; (60002414 <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60002182:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60002184:	4aa4      	ldr	r2, [pc, #656]	; (60002418 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60002186:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60002188:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
6000218c:	f043 030c 	orr.w	r3, r3, #12
60002190:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60002194:	f04f 34ff 	mov.w	r4, #4294967295
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60002198:	6803      	ldr	r3, [r0, #0]
6000219a:	f043 0302 	orr.w	r3, r3, #2
6000219e:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021a0:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a2:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600021a4:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600021a8:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021aa:	4b9c      	ldr	r3, [pc, #624]	; (6000241c <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600021ac:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600021ae:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b0:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021b2:	4c9b      	ldr	r4, [pc, #620]	; (60002420 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021b4:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021b6:	4a9b      	ldr	r2, [pc, #620]	; (60002424 <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600021b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600021bc:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600021be:	68c3      	ldr	r3, [r0, #12]
600021c0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
600021c4:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021c6:	6a03      	ldr	r3, [r0, #32]
600021c8:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021ca:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021cc:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021ce:	6a03      	ldr	r3, [r0, #32]
600021d0:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021d2:	4a95      	ldr	r2, [pc, #596]	; (60002428 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600021d4:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600021d6:	4c95      	ldr	r4, [pc, #596]	; (6000242c <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600021d8:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600021da:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600021dc:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
600021de:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600021e0:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
600021e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021e8:	f043 0301 	orr.w	r3, r3, #1
600021ec:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f0:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600021f4:	498e      	ldr	r1, [pc, #568]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600021f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
600021fa:	f043 0301 	orr.w	r3, r3, #1
600021fe:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002202:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60002206:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002208:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000220a:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000220c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002210:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60002212:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002214:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002216:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000221a:	6803      	ldr	r3, [r0, #0]
6000221c:	f023 0302 	bic.w	r3, r3, #2
60002220:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002222:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002224:	4b83      	ldr	r3, [pc, #524]	; (60002434 <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002226:	4984      	ldr	r1, [pc, #528]	; (60002438 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002228:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
6000222a:	f843 2b04 	str.w	r2, [r3], #4
6000222e:	428b      	cmp	r3, r1
60002230:	d1fb      	bne.n	6000222a <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002232:	4a77      	ldr	r2, [pc, #476]	; (60002410 <configure_external_ram+0x304>)
60002234:	6813      	ldr	r3, [r2, #0]
60002236:	f043 0301 	orr.w	r3, r3, #1
6000223a:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000223c:	6813      	ldr	r3, [r2, #0]
6000223e:	f013 0301 	ands.w	r3, r3, #1
60002242:	d1fb      	bne.n	6000223c <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002244:	487a      	ldr	r0, [pc, #488]	; (60002430 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002246:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002248:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000224c:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
6000224e:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60002252:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002254:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60002258:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
6000225c:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60002260:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60002264:	4975      	ldr	r1, [pc, #468]	; (6000243c <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60002266:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
6000226a:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
6000226e:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60002272:	4873      	ldr	r0, [pc, #460]	; (60002440 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60002274:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60002278:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000227c:	4c71      	ldr	r4, [pc, #452]	; (60002444 <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
6000227e:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002282:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60002286:	4970      	ldr	r1, [pc, #448]	; (60002448 <configure_external_ram+0x33c>)
60002288:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000228c:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
6000228e:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60002292:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002296:	485e      	ldr	r0, [pc, #376]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60002298:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000229c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022a0:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022a4:	6943      	ldr	r3, [r0, #20]
600022a6:	07da      	lsls	r2, r3, #31
600022a8:	d5fc      	bpl.n	600022a4 <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022aa:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ac:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022b2:	4957      	ldr	r1, [pc, #348]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022b4:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
600022b6:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022ba:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022be:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022c2:	694b      	ldr	r3, [r1, #20]
600022c4:	07db      	lsls	r3, r3, #31
600022c6:	d5fc      	bpl.n	600022c2 <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022c8:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022ca:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022d0:	4a4f      	ldr	r2, [pc, #316]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022d2:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
600022d4:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600022d8:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022dc:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022e0:	6953      	ldr	r3, [r2, #20]
600022e2:	07df      	lsls	r7, r3, #31
600022e4:	d5fc      	bpl.n	600022e0 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022e6:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
600022e8:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022ea:	4858      	ldr	r0, [pc, #352]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022ec:	4948      	ldr	r1, [pc, #288]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600022ee:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
600022f0:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600022f4:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600022f8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600022fc:	694b      	ldr	r3, [r1, #20]
600022fe:	07de      	lsls	r6, r3, #31
60002300:	d5fc      	bpl.n	600022fc <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60002302:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002306:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230a:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
6000230c:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000230e:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60002310:	4293      	cmp	r3, r2
60002312:	d165      	bne.n	600023e0 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60002314:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002316:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000231a:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000231c:	483c      	ldr	r0, [pc, #240]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
6000231e:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002322:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002326:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000232a:	6943      	ldr	r3, [r0, #20]
6000232c:	07dd      	lsls	r5, r3, #31
6000232e:	d5fc      	bpl.n	6000232a <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002330:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002332:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002336:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002338:	4a35      	ldr	r2, [pc, #212]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000233a:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
6000233c:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002340:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002344:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002348:	6953      	ldr	r3, [r2, #20]
6000234a:	07dc      	lsls	r4, r3, #31
6000234c:	d5fc      	bpl.n	60002348 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000234e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002350:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002354:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002358:	492d      	ldr	r1, [pc, #180]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000235a:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000235c:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002360:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002364:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002368:	694b      	ldr	r3, [r1, #20]
6000236a:	07d8      	lsls	r0, r3, #31
6000236c:	d5fc      	bpl.n	60002368 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000236e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002370:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002374:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002378:	4a25      	ldr	r2, [pc, #148]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000237a:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
6000237c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002380:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002384:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002388:	6953      	ldr	r3, [r2, #20]
6000238a:	07d9      	lsls	r1, r3, #31
6000238c:	d5fc      	bpl.n	60002388 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000238e:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60002390:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60002394:	482d      	ldr	r0, [pc, #180]	; (6000244c <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002396:	491e      	ldr	r1, [pc, #120]	; (60002410 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60002398:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
6000239a:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000239e:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600023a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600023a6:	694b      	ldr	r3, [r1, #20]
600023a8:	07da      	lsls	r2, r3, #31
600023aa:	d5fc      	bpl.n	600023a6 <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
600023ac:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023b0:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b4:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
600023b6:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600023b8:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
600023ba:	4293      	cmp	r3, r2
600023bc:	d050      	beq.n	60002460 <configure_external_ram+0x354>
600023be:	2508      	movs	r5, #8
600023c0:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
600023c4:	4922      	ldr	r1, [pc, #136]	; (60002450 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023c6:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
600023c8:	4b22      	ldr	r3, [pc, #136]	; (60002454 <configure_external_ram+0x348>)
			external_psram_size = 16;
600023ca:	4a23      	ldr	r2, [pc, #140]	; (60002458 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023cc:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
600023ce:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
600023d0:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
600023d2:	2301      	movs	r3, #1
600023d4:	4821      	ldr	r0, [pc, #132]	; (6000245c <configure_external_ram+0x350>)
600023d6:	4422      	add	r2, r4
600023d8:	f000 fa06 	bl	600027e8 <__sm_set_pool_veneer>
}
600023dc:	b003      	add	sp, #12
600023de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
600023e0:	4b1e      	ldr	r3, [pc, #120]	; (6000245c <configure_external_ram+0x350>)
600023e2:	2200      	movs	r2, #0
600023e4:	e9c3 2200 	strd	r2, r2, [r3]
600023e8:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
600023ec:	b003      	add	sp, #12
600023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
600023f0:	401f8000 	.word	0x401f8000
600023f4:	0001b0f9 	.word	0x0001b0f9
600023f8:	000110f9 	.word	0x000110f9
600023fc:	401f8400 	.word	0x401f8400
60002400:	000170f9 	.word	0x000170f9
60002404:	400fc000 	.word	0x400fc000
60002408:	1ffffcff 	.word	0x1ffffcff
6000240c:	a0000300 	.word	0xa0000300
60002410:	402a4000 	.word	0x402a4000
60002414:	402a8000 	.word	0x402a8000
60002418:	ffff0012 	.word	0xffff0012
6000241c:	00f737ff 	.word	0x00f737ff
60002420:	80000040 	.word	0x80000040
60002424:	7cf0ff00 	.word	0x7cf0ff00
60002428:	830f00ff 	.word	0x830f00ff
6000242c:	00020063 	.word	0x00020063
60002430:	5af05af0 	.word	0x5af05af0
60002434:	402a4200 	.word	0x402a4200
60002438:	402a4300 	.word	0x402a4300
6000243c:	3018049f 	.word	0x3018049f
60002440:	0a1806eb 	.word	0x0a1806eb
60002444:	0a180638 	.word	0x0a180638
60002448:	26013206 	.word	0x26013206
6000244c:	00030004 	.word	0x00030004
60002450:	70120000 	.word	0x70120000
60002454:	70000000 	.word	0x70000000
60002458:	20019bd1 	.word	0x20019bd1
6000245c:	200192f4 	.word	0x200192f4
	FLEXSPI2_IPCR0 = addr;
60002460:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002464:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002468:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
6000246a:	4808      	ldr	r0, [pc, #32]	; (6000248c <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
6000246c:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60002470:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002474:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002478:	6943      	ldr	r3, [r0, #20]
6000247a:	07db      	lsls	r3, r3, #31
6000247c:	d5fc      	bpl.n	60002478 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
6000247e:	2301      	movs	r3, #1
60002480:	2510      	movs	r5, #16
60002482:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60002486:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60002488:	e79c      	b.n	600023c4 <configure_external_ram+0x2b8>
6000248a:	bf00      	nop
6000248c:	402a4000 	.word	0x402a4000

60002490 <usb_pll_start>:
{
60002490:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60002492:	4a15      	ldr	r2, [pc, #84]	; (600024e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60002494:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60002496:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000249a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000249e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600024aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600024ac:	f013 0f02 	tst.w	r3, #2
600024b0:	d10e      	bne.n	600024d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600024b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600024b6:	d00f      	beq.n	600024d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600024b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600024bc:	d00e      	beq.n	600024dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600024be:	2b00      	cmp	r3, #0
600024c0:	daf3      	bge.n	600024aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600024c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600024c6:	d10b      	bne.n	600024e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600024c8:	065b      	lsls	r3, r3, #25
600024ca:	d50b      	bpl.n	600024e4 <usb_pll_start+0x54>
}
600024cc:	bcf0      	pop	{r4, r5, r6, r7}
600024ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600024d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600024d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600024d4:	6190      	str	r0, [r2, #24]
			continue;
600024d6:	e7e8      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600024d8:	6155      	str	r5, [r2, #20]
			continue;
600024da:	e7e6      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600024dc:	6156      	str	r6, [r2, #20]
			continue;
600024de:	e7e4      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600024e0:	6191      	str	r1, [r2, #24]
			continue;
600024e2:	e7e2      	b.n	600024aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600024e4:	6157      	str	r7, [r2, #20]
			continue;
600024e6:	e7e0      	b.n	600024aa <usb_pll_start+0x1a>
600024e8:	400d8000 	.word	0x400d8000

600024ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024ec:	4a3f      	ldr	r2, [pc, #252]	; (600025ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600024ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600024f0:	493f      	ldr	r1, [pc, #252]	; (600025f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600024f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600024f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600024fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600024fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600025f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60002502:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002506:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600025f8 <tempmon_init+0x10c>
{
6000250a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000250c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002510:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60002514:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002518:	4d38      	ldr	r5, [pc, #224]	; (600025fc <tempmon_init+0x110>)
6000251a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000251c:	4c38      	ldr	r4, [pc, #224]	; (60002600 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000251e:	4839      	ldr	r0, [pc, #228]	; (60002604 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002520:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002522:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002526:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60002528:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002530:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002534:	ee07 1a10 	vmov	s14, r1
60002538:	4b33      	ldr	r3, [pc, #204]	; (60002608 <tempmon_init+0x11c>)
6000253a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000253e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002544:	4931      	ldr	r1, [pc, #196]	; (6000260c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002546:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000254a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000254e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002552:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002556:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000255a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000255e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002562:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002566:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000256a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000256e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002572:	4827      	ldr	r0, [pc, #156]	; (60002610 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002574:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002578:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000257c:	ee75 5a87 	vadd.f32	s11, s11, s14
60002580:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002584:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002588:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000258c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002590:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002594:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60002598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000259c:	ee16 3a10 	vmov	r3, s12
600025a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600025ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600025ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600025b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600025ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600025be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600025c0:	4914      	ldr	r1, [pc, #80]	; (60002614 <tempmon_init+0x128>)
600025c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600025c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600025ca:	f043 0302 	orr.w	r3, r3, #2
600025ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600025d2:	4b11      	ldr	r3, [pc, #68]	; (60002618 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600025d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600025d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600025e0:	2201      	movs	r2, #1
}
600025e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600025e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600025e8:	4770      	bx	lr
600025ea:	bf00      	nop
600025ec:	400d8100 	.word	0x400d8100
600025f0:	401f4400 	.word	0x401f4400
600025f4:	42aa0000 	.word	0x42aa0000
600025f8:	42b40000 	.word	0x42b40000
600025fc:	20019468 	.word	0x20019468
60002600:	20019464 	.word	0x20019464
60002604:	2001946c 	.word	0x2001946c
60002608:	20019470 	.word	0x20019470
6000260c:	0fff0000 	.word	0x0fff0000
60002610:	e000e400 	.word	0xe000e400
60002614:	20009800 	.word	0x20009800
60002618:	0000ea51 	.word	0x0000ea51

6000261c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000261c:	4b31      	ldr	r3, [pc, #196]	; (600026e4 <usb_init+0xc8>)
6000261e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60002622:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002624:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60002628:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000262c:	f000 f8ec 	bl	60002808 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002630:	4a2d      	ldr	r2, [pc, #180]	; (600026e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60002632:	492e      	ldr	r1, [pc, #184]	; (600026ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60002634:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002638:	482d      	ldr	r0, [pc, #180]	; (600026f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000263a:	f043 0303 	orr.w	r3, r3, #3
6000263e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002642:	4b2c      	ldr	r3, [pc, #176]	; (600026f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60002644:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60002648:	6802      	ldr	r2, [r0, #0]
6000264a:	421a      	tst	r2, r3
6000264c:	d103      	bne.n	60002656 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000264e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60002652:	079a      	lsls	r2, r3, #30
60002654:	d01b      	beq.n	6000268e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002656:	4a25      	ldr	r2, [pc, #148]	; (600026ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60002658:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000265c:	4b24      	ldr	r3, [pc, #144]	; (600026f0 <usb_init+0xd4>)
6000265e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60002660:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002664:	f043 0302 	orr.w	r3, r3, #2
60002668:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000266c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60002670:	079b      	lsls	r3, r3, #30
60002672:	d4fb      	bmi.n	6000266c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002674:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60002678:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000267c:	4b1c      	ldr	r3, [pc, #112]	; (600026f0 <usb_init+0xd4>)
6000267e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60002682:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002686:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60002688:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000268a:	f000 f899 	bl	600027c0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000268e:	4a18      	ldr	r2, [pc, #96]	; (600026f0 <usb_init+0xd4>)
60002690:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002694:	4c15      	ldr	r4, [pc, #84]	; (600026ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60002696:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002698:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000269a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000269c:	4b16      	ldr	r3, [pc, #88]	; (600026f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000269e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a0:	f44f 7240 	mov.w	r2, #768	; 0x300
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600026a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026a8:	4618      	mov	r0, r3
600026aa:	f000 f8a1 	bl	600027f0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600026ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600026b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600026bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600026be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600026c2:	641a      	str	r2, [r3, #64]	; 0x40
600026c4:	4b0d      	ldr	r3, [pc, #52]	; (600026fc <usb_init+0xe0>)
600026c6:	4a0e      	ldr	r2, [pc, #56]	; (60002700 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600026c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600026cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600026d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600026d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600026da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600026de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600026e2:	bd10      	pop	{r4, pc}
600026e4:	400d8000 	.word	0x400d8000
600026e8:	400fc000 	.word	0x400fc000
600026ec:	402e0000 	.word	0x402e0000
600026f0:	400d9000 	.word	0x400d9000
600026f4:	001e1c00 	.word	0x001e1c00
600026f8:	20000000 	.word	0x20000000
600026fc:	20009800 	.word	0x20009800
60002700:	0000ed01 	.word	0x0000ed01

60002704 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60002704:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60002706:	4b0e      	ldr	r3, [pc, #56]	; (60002740 <_reboot_Teensyduino_+0x3c>)
60002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
6000270a:	079b      	lsls	r3, r3, #30
6000270c:	d400      	bmi.n	60002710 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000270e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60002710:	b672      	cpsid	i
		USB1_USBCMD = 0;
60002712:	4b0c      	ldr	r3, [pc, #48]	; (60002744 <_reboot_Teensyduino_+0x40>)
60002714:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60002716:	4a0c      	ldr	r2, [pc, #48]	; (60002748 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002718:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000271c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002720:	490a      	ldr	r1, [pc, #40]	; (6000274c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002722:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002726:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002728:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
6000272a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000272e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60002732:	4807      	ldr	r0, [pc, #28]	; (60002750 <_reboot_Teensyduino_+0x4c>)
60002734:	4a07      	ldr	r2, [pc, #28]	; (60002754 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002736:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002738:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000273a:	689b      	ldr	r3, [r3, #8]
6000273c:	4798      	blx	r3
	}
	__builtin_unreachable();
6000273e:	bf00      	nop
60002740:	401f4400 	.word	0x401f4400
60002744:	402e0000 	.word	0x402e0000
60002748:	400ac000 	.word	0x400ac000
6000274c:	00200003 	.word	0x00200003
60002750:	20208000 	.word	0x20208000
60002754:	eb120000 	.word	0xeb120000

60002758 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002758:	4b10      	ldr	r3, [pc, #64]	; (6000279c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000275a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000275c:	4a10      	ldr	r2, [pc, #64]	; (600027a0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000275e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002760:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60002764:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002766:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002768:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000276c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
6000276e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60002772:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002774:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002776:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002778:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000277a:	061b      	lsls	r3, r3, #24
6000277c:	d4fc      	bmi.n	60002778 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000277e:	4a09      	ldr	r2, [pc, #36]	; (600027a4 <analog_init+0x4c>)
60002780:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002784:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002786:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002788:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
6000278a:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000278c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002790:	d1fb      	bne.n	6000278a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60002792:	4a05      	ldr	r2, [pc, #20]	; (600027a8 <analog_init+0x50>)
60002794:	7013      	strb	r3, [r2, #0]
}
60002796:	f85d 4b04 	ldr.w	r4, [sp], #4
6000279a:	4770      	bx	lr
6000279c:	400fc000 	.word	0x400fc000
600027a0:	400c4000 	.word	0x400c4000
600027a4:	400c8000 	.word	0x400c8000
600027a8:	20019bd0 	.word	0x20019bd0

600027ac <_init>:
600027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
600027ae:	bf00      	nop
600027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
600027b2:	bc08      	pop	{r3}
600027b4:	469e      	mov	lr, r3
600027b6:	4770      	bx	lr

600027b8 <__main_veneer>:
600027b8:	f85f f000 	ldr.w	pc, [pc]	; 600027bc <__main_veneer+0x4>
600027bc:	0000e305 	.word	0x0000e305

600027c0 <__delay_veneer>:
600027c0:	f85f f000 	ldr.w	pc, [pc]	; 600027c4 <__delay_veneer+0x4>
600027c4:	0000dd0d 	.word	0x0000dd0d

600027c8 <___ZN5Print7printlnEv_veneer>:
600027c8:	f85f f000 	ldr.w	pc, [pc]	; 600027cc <___ZN5Print7printlnEv_veneer+0x4>
600027cc:	0000d705 	.word	0x0000d705

600027d0 <___ZN5Print11printNumberEmhh_veneer>:
600027d0:	f85f f000 	ldr.w	pc, [pc]	; 600027d4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600027d4:	0000d759 	.word	0x0000d759

600027d8 <___ZN5Print5printEl_veneer>:
600027d8:	f85f f000 	ldr.w	pc, [pc]	; 600027dc <___ZN5Print5printEl_veneer+0x4>
600027dc:	0000d6ed 	.word	0x0000d6ed

600027e0 <__pwm_init_veneer>:
600027e0:	f85f f000 	ldr.w	pc, [pc]	; 600027e4 <__pwm_init_veneer+0x4>
600027e4:	00010065 	.word	0x00010065

600027e8 <__sm_set_pool_veneer>:
600027e8:	f85f f000 	ldr.w	pc, [pc]	; 600027ec <__sm_set_pool_veneer+0x4>
600027ec:	000101a5 	.word	0x000101a5

600027f0 <__memset_veneer>:
600027f0:	f85f f000 	ldr.w	pc, [pc]	; 600027f4 <__memset_veneer+0x4>
600027f4:	00012431 	.word	0x00012431

600027f8 <____libc_init_array_veneer>:
600027f8:	f85f f000 	ldr.w	pc, [pc]	; 600027fc <____libc_init_array_veneer+0x4>
600027fc:	00012755 	.word	0x00012755

60002800 <___ZN5Print10printFloatEdh_veneer>:
60002800:	f85f f000 	ldr.w	pc, [pc]	; 60002804 <___ZN5Print10printFloatEdh_veneer+0x4>
60002804:	0000d829 	.word	0x0000d829

60002808 <__usb_init_serialnumber_veneer>:
60002808:	f85f f000 	ldr.w	pc, [pc]	; 6000280c <__usb_init_serialnumber_veneer+0x4>
6000280c:	0000f445 	.word	0x0000f445

60002810 <__set_arm_clock_veneer>:
60002810:	f85f f000 	ldr.w	pc, [pc]	; 60002814 <__set_arm_clock_veneer+0x4>
60002814:	0000da1d 	.word	0x0000da1d

60002818 <__frame_dummy_init_array_entry>:
60002818:	00000045 000006c1 00000db9 00001e61     E...........a...
60002828:	00004e9d                                .N..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
    // set SoC low power mode to wait mode
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
    // ensure above config is done before executing WFI
    asm volatile("dsb");    
  }
      20:	4805      	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	4b06      	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
      24:	1a1b      	subs	r3, r3, r0
      26:	0fd9      	lsrs	r1, r3, #31
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	eb01 01a3 	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	1049      	asrs	r1, r1, #1
      2e:	d002      	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	4b03      	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	b103      	cbz	r3, 36 <_teensy_model_identifier+0x11>
    }
    return ptr;
  }
      34:	4718      	bx	r3
      36:	4770      	bx	lr
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      38:	20009ac0 	.word	0x20009ac0
        readstring(filename);
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
      }
      else
        return 0x2005;
    }
      3c:	20009ac0 	.word	0x20009ac0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
  }
      40:	00000000 	.word	0x00000000

00000044 <frame_dummy>:
      44:	b508      	push	{r3, lr}
      46:	4b05      	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
#include "debug/printf.h"
#undef printf

size_t Print::write(const uint8_t *buffer, size_t size)
{
	if (buffer == nullptr) return 0;
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4905      	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	4805      	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	f3af 8000 	nop.w
    WriteIndexRecord(handle, p1);
    return false;
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
    }
  }
      56:	f7ff bfe3 	b.w	20 <register_tm_clones>
      5a:	bf00      	nop
      5c:	00000000 	.word	0x00000000
      60:	20019384 	.word	0x20019384
      64:	60028400 	.word	0x60028400

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	2000      	movs	r0, #0
      6a:	4770      	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	4770      	bx	lr
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	bf00      	nop

00000070 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
      70:	b538      	push	{r3, r4, r5, lr}
      72:	4604      	mov	r4, r0
      74:	4b0b      	ldr	r3, [pc, #44]	; (a4 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
      76:	4d0c      	ldr	r5, [pc, #48]	; (a8 <MTPStorage_SD::~MTPStorage_SD()+0x38>)
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
      78:	f500 70ac 	add.w	r0, r0, #344	; 0x158
      7c:	6023      	str	r3, [r4, #0]
      7e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
      82:	f00a fbdd 	bl	a840 <FsBaseFile::close()>
      86:	f504 7084 	add.w	r0, r4, #264	; 0x108
      8a:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
      8e:	f00a fbd7 	bl	a840 <FsBaseFile::close()>
      92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
      96:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
      9a:	f00a fbd1 	bl	a840 <FsBaseFile::close()>
      9e:	4620      	mov	r0, r4
      a0:	bd38      	pop	{r3, r4, r5, pc}
      a2:	bf00      	nop
      a4:	20000c74 	.word	0x20000c74
      a8:	20000c50 	.word	0x20000c50

000000ac <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
      ac:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
      ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
      b0:	b083      	sub	sp, #12
      b2:	f88d 1007 	strb.w	r1, [sp, #7]
      b6:	b143      	cbz	r3, ca <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
      b8:	2201      	movs	r2, #1
      ba:	f10d 0107 	add.w	r1, sp, #7
      be:	4618      	mov	r0, r3
      c0:	f009 f9c2 	bl	9448 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
      c4:	b003      	add	sp, #12
      c6:	f85d fb04 	ldr.w	pc, [sp], #4
      ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
      cc:	2800      	cmp	r0, #0
      ce:	d0f9      	beq.n	c4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
      d0:	2201      	movs	r2, #1
      d2:	f10d 0107 	add.w	r1, sp, #7
      d6:	f007 fea7 	bl	7e28 <ExFatFile::write(void const*, unsigned int)>
      da:	b003      	add	sp, #12
      dc:	f85d fb04 	ldr.w	pc, [sp], #4

000000e0 <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
      e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
      e2:	b113      	cbz	r3, ea <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      e4:	4618      	mov	r0, r3
      e6:	f009 b9a9 	b.w	943c <FatFile::sync()>
      ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      ec:	b108      	cbz	r0, f2 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      ee:	f007 bcb3 	b.w	7a58 <ExFatFile::sync()>
  }
      f2:	4770      	bx	lr

000000f4 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      f4:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
      f6:	b500      	push	{lr}
      f8:	b083      	sub	sp, #12
      fa:	b163      	cbz	r3, 116 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
      fc:	2201      	movs	r2, #1
      fe:	f10d 0107 	add.w	r1, sp, #7
     102:	4618      	mov	r0, r3
     104:	f008 fe22 	bl	8d4c <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     108:	2801      	cmp	r0, #1
     10a:	d10c      	bne.n	126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     10c:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     110:	b003      	add	sp, #12
     112:	f85d fb04 	ldr.w	pc, [sp], #4
     116:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     118:	b128      	cbz	r0, 126 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     11a:	2201      	movs	r2, #1
     11c:	f10d 0107 	add.w	r1, sp, #7
     120:	f006 ff6c 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
     124:	e7f0      	b.n	108 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     126:	f04f 30ff 	mov.w	r0, #4294967295
     12a:	e7f1      	b.n	110 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

0000012c <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     12c:	6c83      	ldr	r3, [r0, #72]	; 0x48
     12e:	b113      	cbz	r3, 136 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     130:	4618      	mov	r0, r3
     132:	f008 bedf 	b.w	8ef4 <FatFile::peek()>
     136:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     138:	b108      	cbz	r0, 13e <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     13a:	f007 b82f 	b.w	719c <ExFatFile::peek()>
  }
     13e:	f04f 30ff 	mov.w	r0, #4294967295
     142:	4770      	bx	lr

00000144 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     144:	6c83      	ldr	r3, [r0, #72]	; 0x48
     146:	b153      	cbz	r3, 15e <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     148:	7818      	ldrb	r0, [r3, #0]
     14a:	f010 0008 	ands.w	r0, r0, #8
     14e:	d00d      	beq.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     150:	69d8      	ldr	r0, [r3, #28]
     152:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     154:	1ac0      	subs	r0, r0, r3
     156:	bf48      	it	mi
     158:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     15c:	4770      	bx	lr
     15e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     160:	b1a3      	cbz	r3, 18c <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     162:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     166:	f010 0008 	ands.w	r0, r0, #8
     16a:	d100      	bne.n	16e <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     16c:	4770      	bx	lr
     16e:	6918      	ldr	r0, [r3, #16]
     170:	6819      	ldr	r1, [r3, #0]
     172:	695a      	ldr	r2, [r3, #20]
     174:	1a40      	subs	r0, r0, r1
     176:	685b      	ldr	r3, [r3, #4]
     178:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     17c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     180:	f173 0300 	sbcs.w	r3, r3, #0
     184:	d3f2      	bcc.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     186:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     18a:	4770      	bx	lr
     18c:	4618      	mov	r0, r3
    return BaseFile::available();
     18e:	e7ed      	b.n	16c <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000190 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     190:	6c83      	ldr	r3, [r0, #72]	; 0x48
     192:	b113      	cbz	r3, 19a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     194:	4618      	mov	r0, r3
     196:	f009 b957 	b.w	9448 <FatFile::write(void const*, unsigned int)>
     19a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     19c:	b108      	cbz	r0, 1a2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     19e:	f007 be43 	b.w	7e28 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     1a2:	4770      	bx	lr

000001a4 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     1a4:	4b11      	ldr	r3, [pc, #68]	; (1ec <resetUSB()+0x48>)
     1a6:	2200      	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     1a8:	2064      	movs	r0, #100	; 0x64
  {
     1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     1ae:	4d10      	ldr	r5, [pc, #64]	; (1f0 <resetUSB()+0x4c>)
     1b0:	4e10      	ldr	r6, [pc, #64]	; (1f4 <resetUSB()+0x50>)
     1b2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 200 <resetUSB()+0x5c>
     1b6:	4f10      	ldr	r7, [pc, #64]	; (1f8 <resetUSB()+0x54>)
    while(!Serial) mtpd.loop();
     1b8:	4c10      	ldr	r4, [pc, #64]	; (1fc <resetUSB()+0x58>)
    USB1_USBCMD = 0;  // disconnect USB
     1ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     1be:	f00d fda5 	bl	dd0c <delay>
    usb_init();
     1c2:	f01a ff4d 	bl	1b060 <__usb_init_veneer>
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
     1c6:	f00f fea3 	bl	ff10 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1ca:	782b      	ldrb	r3, [r5, #0]
    while(!Serial) mtpd.loop();
     1cc:	4620      	mov	r0, r4
     1ce:	b153      	cbz	r3, 1e6 <resetUSB()+0x42>
     1d0:	7833      	ldrb	r3, [r6, #0]
     1d2:	07db      	lsls	r3, r3, #31
     1d4:	d507      	bpl.n	1e6 <resetUSB()+0x42>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     1d6:	f8d8 3000 	ldr.w	r3, [r8]
     1da:	683a      	ldr	r2, [r7, #0]
     1dc:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     1de:	2b0e      	cmp	r3, #14
     1e0:	d901      	bls.n	1e6 <resetUSB()+0x42>
  }
     1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(!Serial) mtpd.loop();
     1e6:	f003 fb23 	bl	3830 <MTPD::loop()>
     1ea:	e7ec      	b.n	1c6 <resetUSB()+0x22>
     1ec:	402e0000 	.word	0x402e0000
     1f0:	20019bdd 	.word	0x20019bdd
     1f4:	20019bdc 	.word	0x20019bdc
     1f8:	20019ba8 	.word	0x20019ba8
     1fc:	20009b00 	.word	0x20009b00
     200:	20019b88 	.word	0x20019b88

00000204 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     204:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     208:	4a01      	ldr	r2, [pc, #4]	; (210 <reboot()+0xc>)
     20a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
     20e:	4770      	bx	lr
     210:	05fa0004 	.word	0x05fa0004

00000214 <loop>:
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
     214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     218:	4c75      	ldr	r4, [pc, #468]	; (3f0 <loop+0x1dc>)
     21a:	b08b      	sub	sp, #44	; 0x2c
     21c:	4d75      	ldr	r5, [pc, #468]	; (3f4 <loop+0x1e0>)
     21e:	6823      	ldr	r3, [r4, #0]
     220:	3301      	adds	r3, #1
     222:	6023      	str	r3, [r4, #0]
     224:	f004 fbb6 	bl	4994 <getDataCount()>
     228:	882b      	ldrh	r3, [r5, #0]
     22a:	4283      	cmp	r3, r0
     22c:	4b72      	ldr	r3, [pc, #456]	; (3f8 <loop+0x1e4>)
     22e:	681a      	ldr	r2, [r3, #0]
     230:	bf38      	it	cc
     232:	8028      	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     234:	07d2      	lsls	r2, r2, #31
     236:	d53d      	bpl.n	2b4 <loop+0xa0>
     238:	4e70      	ldr	r6, [pc, #448]	; (3fc <loop+0x1e8>)
  status=menu(status);
     23a:	8830      	ldrh	r0, [r6, #0]
     23c:	b200      	sxth	r0, r0
     23e:	f004 fb2b 	bl	4898 <menu(short)>
     242:	8030      	strh	r0, [r6, #0]
    if(status<0)
     244:	8833      	ldrh	r3, [r6, #0]
     246:	041b      	lsls	r3, r3, #16
     248:	d440      	bmi.n	2cc <loop+0xb8>
      if(status>0) digitalWriteFast(13,HIGH);    
     24a:	8833      	ldrh	r3, [r6, #0]
     24c:	b21b      	sxth	r3, r3
     24e:	2b00      	cmp	r3, #0
     250:	dd03      	ble.n	25a <loop+0x46>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     252:	4b6b      	ldr	r3, [pc, #428]	; (400 <loop+0x1ec>)
     254:	2208      	movs	r2, #8
     256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     25a:	8830      	ldrh	r0, [r6, #0]
     25c:	b200      	sxth	r0, r0
     25e:	f001 fd7b 	bl	1d58 <saveData(short)>
     262:	8030      	strh	r0, [r6, #0]
      if(status>0) digitalWriteFast(13,LOW);
     264:	8833      	ldrh	r3, [r6, #0]
     266:	b21b      	sxth	r3, r3
     268:	2b00      	cmp	r3, #0
     26a:	dd03      	ble.n	274 <loop+0x60>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     26c:	4b64      	ldr	r3, [pc, #400]	; (400 <loop+0x1ec>)
     26e:	2208      	movs	r2, #8
     270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  if((t1=millis())>(t0+1000))
     274:	4e63      	ldr	r6, [pc, #396]	; (404 <loop+0x1f0>)
	return systick_millis_count;
     276:	4a64      	ldr	r2, [pc, #400]	; (408 <loop+0x1f4>)
     278:	6833      	ldr	r3, [r6, #0]
     27a:	6817      	ldr	r7, [r2, #0]
     27c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
     280:	42bb      	cmp	r3, r7
     282:	d213      	bcs.n	2ac <loop+0x98>
    if(monitor)
     284:	4b61      	ldr	r3, [pc, #388]	; (40c <loop+0x1f8>)
     286:	f9b3 3000 	ldrsh.w	r3, [r3]
     28a:	bb1b      	cbnz	r3, 2d4 <loop+0xc0>
     28c:	4b60      	ldr	r3, [pc, #384]	; (410 <loop+0x1fc>)
     28e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 450 <loop+0x23c>
     292:	9306      	str	r3, [sp, #24]
     294:	4b5f      	ldr	r3, [pc, #380]	; (414 <loop+0x200>)
     296:	9307      	str	r3, [sp, #28]
    loopCount=0;
     298:	2300      	movs	r3, #0
    procMiss=0;
     29a:	9a06      	ldr	r2, [sp, #24]
    t0=t1;
     29c:	6037      	str	r7, [r6, #0]
    procMiss=0;
     29e:	6013      	str	r3, [r2, #0]
    disk_count=0;
     2a0:	9a07      	ldr	r2, [sp, #28]
    loopCount=0;
     2a2:	6023      	str	r3, [r4, #0]
    procCount=0;
     2a4:	f8cb 3000 	str.w	r3, [fp]
    mxb=0;
     2a8:	802b      	strh	r3, [r5, #0]
    disk_count=0;
     2aa:	6013      	str	r3, [r2, #0]
  asm("wfi");
     2ac:	bf30      	wfi
}
     2ae:	b00b      	add	sp, #44	; 0x2c
     2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     2b4:	4a58      	ldr	r2, [pc, #352]	; (418 <loop+0x204>)
     2b6:	4e51      	ldr	r6, [pc, #324]	; (3fc <loop+0x1e8>)
     2b8:	6812      	ldr	r2, [r2, #0]
     2ba:	2a01      	cmp	r2, #1
     2bc:	f04f 32ff 	mov.w	r2, #4294967295
     2c0:	bf18      	it	ne
     2c2:	2200      	movne	r2, #0
     2c4:	8032      	strh	r2, [r6, #0]
     2c6:	2201      	movs	r2, #1
     2c8:	601a      	str	r2, [r3, #0]
     2ca:	e7b6      	b.n	23a <loop+0x26>
    { mtpd.loop();
     2cc:	4853      	ldr	r0, [pc, #332]	; (41c <loop+0x208>)
     2ce:	f003 faaf 	bl	3830 <MTPD::loop()>
     2d2:	e7ba      	b.n	24a <loop+0x36>
      rtc_get_datetime(&t);
     2d4:	a808      	add	r0, sp, #32
      Serial.print(procCount);  Serial.print(" ");
     2d6:	f8df b178 	ldr.w	fp, [pc, #376]	; 450 <loop+0x23c>
      rtc_get_datetime(&t);
     2da:	f004 fd41 	bl	4d60 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2de:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
     2e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
     2e6:	9304      	str	r3, [sp, #16]
     2e8:	f99d 3027 	ldrsb.w	r3, [sp, #39]	; 0x27
     2ec:	494c      	ldr	r1, [pc, #304]	; (420 <loop+0x20c>)
     2ee:	9303      	str	r3, [sp, #12]
     2f0:	f99d 3026 	ldrsb.w	r3, [sp, #38]	; 0x26
     2f4:	484b      	ldr	r0, [pc, #300]	; (424 <loop+0x210>)
     2f6:	9302      	str	r3, [sp, #8]
     2f8:	f99d 3025 	ldrsb.w	r3, [sp, #37]	; 0x25
     2fc:	9301      	str	r3, [sp, #4]
     2fe:	f99d 3023 	ldrsb.w	r3, [sp, #35]	; 0x23
     302:	9300      	str	r3, [sp, #0]
     304:	f99d 3022 	ldrsb.w	r3, [sp, #34]	; 0x22
     308:	f00d fa18 	bl	d73c <Print::printf(char const*, ...)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     30c:	2103      	movs	r1, #3
     30e:	4846      	ldr	r0, [pc, #280]	; (428 <loop+0x214>)
     310:	f00f fd80 	bl	fe14 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     314:	2300      	movs	r3, #0
     316:	220a      	movs	r2, #10
     318:	6821      	ldr	r1, [r4, #0]
     31a:	4842      	ldr	r0, [pc, #264]	; (424 <loop+0x210>)
     31c:	f00d fa1c 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     320:	2101      	movs	r1, #1
     322:	4842      	ldr	r0, [pc, #264]	; (42c <loop+0x218>)
     324:	f00f fd76 	bl	fe14 <usb_serial_write>
      Serial.print(procMiss);   Serial.print(" ");
     328:	4b39      	ldr	r3, [pc, #228]	; (410 <loop+0x1fc>)
     32a:	220a      	movs	r2, #10
     32c:	f8db 1000 	ldr.w	r1, [fp]
     330:	9306      	str	r3, [sp, #24]
     332:	2300      	movs	r3, #0
     334:	483b      	ldr	r0, [pc, #236]	; (424 <loop+0x210>)
     336:	f00d fa0f 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     33a:	2101      	movs	r1, #1
     33c:	483b      	ldr	r0, [pc, #236]	; (42c <loop+0x218>)
     33e:	f00f fd69 	bl	fe14 <usb_serial_write>
     342:	9906      	ldr	r1, [sp, #24]
     344:	2300      	movs	r3, #0
     346:	220a      	movs	r2, #10
     348:	6809      	ldr	r1, [r1, #0]
     34a:	4836      	ldr	r0, [pc, #216]	; (424 <loop+0x210>)
     34c:	f00d fa04 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     350:	2101      	movs	r1, #1
     352:	4836      	ldr	r0, [pc, #216]	; (42c <loop+0x218>)
     354:	f00f fd5e 	bl	fe14 <usb_serial_write>
      Serial.print(disk_count); Serial.print("  ; ");
     358:	4b2e      	ldr	r3, [pc, #184]	; (414 <loop+0x200>)
      Serial.printf("%3d",mxb); Serial.print("  ");
     35a:	882a      	ldrh	r2, [r5, #0]
     35c:	4934      	ldr	r1, [pc, #208]	; (430 <loop+0x21c>)
     35e:	4831      	ldr	r0, [pc, #196]	; (424 <loop+0x210>)
      Serial.print(disk_count); Serial.print("  ; ");
     360:	9307      	str	r3, [sp, #28]
      Serial.printf("%3d",mxb); Serial.print("  ");
     362:	f00d f9eb 	bl	d73c <Print::printf(char const*, ...)>
     366:	2102      	movs	r1, #2
     368:	4832      	ldr	r0, [pc, #200]	; (434 <loop+0x220>)
     36a:	f00f fd53 	bl	fe14 <usb_serial_write>
     36e:	9907      	ldr	r1, [sp, #28]
     370:	2300      	movs	r3, #0
     372:	220a      	movs	r2, #10
     374:	6809      	ldr	r1, [r1, #0]
     376:	482b      	ldr	r0, [pc, #172]	; (424 <loop+0x210>)
     378:	f00d f9ee 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     37c:	2104      	movs	r1, #4
     37e:	482e      	ldr	r0, [pc, #184]	; (438 <loop+0x224>)
     380:	f00f fd48 	bl	fe14 <usb_serial_write>
      if(proc==0)
     384:	4b2d      	ldr	r3, [pc, #180]	; (43c <loop+0x228>)
     386:	881b      	ldrh	r3, [r3, #0]
     388:	b21b      	sxth	r3, r3
     38a:	b98b      	cbnz	r3, 3b0 <loop+0x19c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     38c:	4699      	mov	r9, r3
     38e:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 454 <loop+0x240>
     392:	f8df 8090 	ldr.w	r8, [pc, #144]	; 424 <loop+0x210>
     396:	4b2a      	ldr	r3, [pc, #168]	; (440 <loop+0x22c>)
     398:	4651      	mov	r1, sl
     39a:	4640      	mov	r0, r8
     39c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
     3a0:	f109 0901 	add.w	r9, r9, #1
     3a4:	f00d f9ca 	bl	d73c <Print::printf(char const*, ...)>
     3a8:	f1b9 0f08 	cmp.w	r9, #8
     3ac:	d1f3      	bne.n	396 <loop+0x182>
     3ae:	e773      	b.n	298 <loop+0x84>
     3b0:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 458 <loop+0x244>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3b4:	4923      	ldr	r1, [pc, #140]	; (444 <loop+0x230>)
     3b6:	f8df 906c 	ldr.w	r9, [pc, #108]	; 424 <loop+0x210>
     3ba:	f10a 0860 	add.w	r8, sl, #96	; 0x60
     3be:	f85a 2f04 	ldr.w	r2, [sl, #4]!
     3c2:	4648      	mov	r0, r9
     3c4:	f00d f9ba 	bl	d73c <Print::printf(char const*, ...)>
     3c8:	491e      	ldr	r1, [pc, #120]	; (444 <loop+0x230>)
     3ca:	45d0      	cmp	r8, sl
     3cc:	d1f7      	bne.n	3be <loop+0x1aa>
        Serial.printf("%2d",max_stat);
     3ce:	f8df 808c 	ldr.w	r8, [pc, #140]	; 45c <loop+0x248>
     3d2:	491d      	ldr	r1, [pc, #116]	; (448 <loop+0x234>)
     3d4:	f8d8 2000 	ldr.w	r2, [r8]
     3d8:	4812      	ldr	r0, [pc, #72]	; (424 <loop+0x210>)
     3da:	f00d f9af 	bl	d73c <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3de:	2260      	movs	r2, #96	; 0x60
     3e0:	2100      	movs	r1, #0
     3e2:	481a      	ldr	r0, [pc, #104]	; (44c <loop+0x238>)
     3e4:	f012 f824 	bl	12430 <memset>
        max_stat=0;        
     3e8:	2300      	movs	r3, #0
     3ea:	f8c8 3000 	str.w	r3, [r8]
     3ee:	e753      	b.n	298 <loop+0x84>
     3f0:	20018d24 	.word	0x20018d24
     3f4:	20019bb4 	.word	0x20019bb4
     3f8:	2000c1cc 	.word	0x2000c1cc
     3fc:	20019bb6 	.word	0x20019bb6
     400:	42004000 	.word	0x42004000
     404:	20018d20 	.word	0x20018d20
     408:	20019b88 	.word	0x20019b88
     40c:	20019bbc 	.word	0x20019bbc
     410:	200193a0 	.word	0x200193a0
     414:	200192dc 	.word	0x200192dc
     418:	20019b9c 	.word	0x20019b9c
     41c:	20009b00 	.word	0x20009b00
     420:	20007ffc 	.word	0x20007ffc
     424:	20008b94 	.word	0x20008b94
     428:	20008020 	.word	0x20008020
     42c:	20000bd0 	.word	0x20000bd0
     430:	20008024 	.word	0x20008024
     434:	20008028 	.word	0x20008028
     438:	2000802c 	.word	0x2000802c
     43c:	20009554 	.word	0x20009554
     440:	20019358 	.word	0x20019358
     444:	2000803c 	.word	0x2000803c
     448:	20008044 	.word	0x20008044
     44c:	200193a4 	.word	0x200193a4
     450:	2001939c 	.word	0x2001939c
     454:	20008034 	.word	0x20008034
     458:	200193a0 	.word	0x200193a0
     45c:	20019378 	.word	0x20019378

00000460 <setup1()>:
{ 
     460:	b510      	push	{r4, lr}
     462:	2106      	movs	r1, #6
     464:	480e      	ldr	r0, [pc, #56]	; (4a0 <setup1()+0x40>)
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     466:	4c0f      	ldr	r4, [pc, #60]	; (4a4 <setup1()+0x44>)
     468:	f00f fcd4 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     46c:	480e      	ldr	r0, [pc, #56]	; (4a8 <setup1()+0x48>)
     46e:	f00d f949 	bl	d704 <Print::println()>
     472:	6823      	ldr	r3, [r4, #0]
     474:	b92b      	cbnz	r3, 482 <setup1()+0x22>
     476:	2001      	movs	r0, #1
     478:	f00d fc48 	bl	dd0c <delay>
     47c:	6823      	ldr	r3, [r4, #0]
     47e:	2b00      	cmp	r3, #0
     480:	d0f9      	beq.n	476 <setup1()+0x16>
  i2s_setup();
     482:	f000 fbed 	bl	c60 <i2s_setup()>
  dma_setup();
     486:	f000 fc31 	bl	cec <dma_setup()>
  adc_init();
     48a:	f000 fcd1 	bl	e30 <adc_init()>
     48e:	210b      	movs	r1, #11
     490:	4806      	ldr	r0, [pc, #24]	; (4ac <setup1()+0x4c>)
     492:	f00f fcbf 	bl	fe14 <usb_serial_write>
     496:	4804      	ldr	r0, [pc, #16]	; (4a8 <setup1()+0x48>)
}
     498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     49c:	f00d b932 	b.w	d704 <Print::println()>
     4a0:	200007c8 	.word	0x200007c8
     4a4:	200199c8 	.word	0x200199c8
     4a8:	20008b94 	.word	0x20008b94
     4ac:	200007d0 	.word	0x200007d0

000004b0 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    spiConfigBackupPin = 255;
     4b4:	4c78      	ldr	r4, [pc, #480]	; (698 <storage_configure()+0x1e8>)
    sdioConfigBackup = sdioConfig;
     4b6:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
     4b8:	22ff      	movs	r2, #255	; 0xff
     4ba:	b082      	sub	sp, #8
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     4bc:	f504 6592 	add.w	r5, r4, #1168	; 0x490
     4c0:	4619      	mov	r1, r3
     4c2:	f884 24bc 	strb.w	r2, [r4, #1212]	; 0x4bc
     4c6:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
     4c8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
     4cc:	f00b fed2 	bl	c274 <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
     4d0:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     4d2:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     4d6:	f00b f92f 	bl	b738 <SdioCard::errorCode() const>
     4da:	b938      	cbnz	r0, 4ec <storage_configure()+0x3c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     4dc:	2301      	movs	r3, #1
     4de:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
     4e2:	4620      	mov	r0, r4
     4e4:	461a      	mov	r2, r3
     4e6:	f00a fa53 	bl	a990 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     4ea:	b970      	cbnz	r0, 50a <storage_configure()+0x5a>
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
        }
        
        if(!sdx[ii].begin(SdioConfig(FIFO_SDIO))) 
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     4ec:	486b      	ldr	r0, [pc, #428]	; (69c <storage_configure()+0x1ec>)
     4ee:	23fe      	movs	r3, #254	; 0xfe
     4f0:	2200      	movs	r2, #0
     4f2:	496b      	ldr	r1, [pc, #428]	; (6a0 <storage_configure()+0x1f0>)
     4f4:	6804      	ldr	r4, [r0, #0]
     4f6:	486b      	ldr	r0, [pc, #428]	; (6a4 <storage_configure()+0x1f4>)
     4f8:	9400      	str	r4, [sp, #0]
     4fa:	f00d f91f 	bl	d73c <Print::printf(char const*, ...)>
     4fe:	4869      	ldr	r0, [pc, #420]	; (6a4 <storage_configure()+0x1f4>)
            Serial.print("; total clusters: "); Serial.print(totalSize); 
            Serial.print(" free clusters: "); Serial.print(freeSize);
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
        }
      }
  }
     500:	b002      	add	sp, #8
     502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     506:	f00d b8fd 	b.w	d704 <Print::println()>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     50a:	4b67      	ldr	r3, [pc, #412]	; (6a8 <storage_configure()+0x1f8>)
          storage.addFilesystem(sdx[ii], sd_str[ii]);
     50c:	4f63      	ldr	r7, [pc, #396]	; (69c <storage_configure()+0x1ec>)
     50e:	685a      	ldr	r2, [r3, #4]
     510:	2a13      	cmp	r2, #19
     512:	dc06      	bgt.n	522 <storage_configure()+0x72>
          sdx[fsCount++] = &fs;
     514:	1c50      	adds	r0, r2, #1
          sd_name[fsCount] = name;
     516:	eb03 0182 	add.w	r1, r3, r2, lsl #2
          sdx[fsCount++] = &fs;
     51a:	6058      	str	r0, [r3, #4]
          sd_name[fsCount] = name;
     51c:	683b      	ldr	r3, [r7, #0]
          sdx[fsCount++] = &fs;
     51e:	658c      	str	r4, [r1, #88]	; 0x58
          sd_name[fsCount] = name;
     520:	608b      	str	r3, [r1, #8]
  }
  /** Change global working volume to this volume. */
  void chvol() {m_cwv = this;}
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_fVol ? m_fVol->clusterCount() :
     522:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     526:	2b00      	cmp	r3, #0
     528:	d068      	beq.n	5fc <storage_configure()+0x14c>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     52a:	69de      	ldr	r6, [r3, #28]
     52c:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
     530:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     532:	2800      	cmp	r0, #0
     534:	f000 80a1 	beq.w	67a <storage_configure()+0x1ca>
     538:	6803      	ldr	r3, [r0, #0]
     53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     53c:	4798      	blx	r3
     53e:	2800      	cmp	r0, #0
     540:	d16b      	bne.n	61a <storage_configure()+0x16a>
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     542:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     546:	2800      	cmp	r0, #0
     548:	f040 808c 	bne.w	664 <storage_configure()+0x1b4>
     54c:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     550:	2d00      	cmp	r5, #0
     552:	f000 8098 	beq.w	686 <storage_configure()+0x1d6>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     556:	4680      	mov	r8, r0
     558:	4628      	mov	r0, r5
     55a:	f008 f843 	bl	85e4 <ExFatPartition::freeClusterCount()>
     55e:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     560:	f1b8 0f00 	cmp.w	r8, #0
     564:	d00b      	beq.n	57e <storage_configure()+0xce>
     566:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     56a:	2800      	cmp	r0, #0
     56c:	f000 8083 	beq.w	676 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     570:	6803      	ldr	r3, [r0, #0]
     572:	2100      	movs	r1, #0
     574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     576:	4798      	blx	r3
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     578:	2800      	cmp	r0, #0
     57a:	bf08      	it	eq
     57c:	2500      	moveq	r5, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
     57e:	f8d4 3480 	ldr.w	r3, [r4, #1152]	; 0x480
     582:	2b00      	cmp	r3, #0
     584:	d066      	beq.n	654 <storage_configure()+0x1a4>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     586:	799b      	ldrb	r3, [r3, #6]
     588:	f44f 7800 	mov.w	r8, #512	; 0x200
     58c:	fa08 f803 	lsl.w	r8, r8, r3
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     590:	f3c8 2885 	ubfx	r8, r8, #10, #6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     594:	2400      	movs	r4, #0
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     596:	683a      	ldr	r2, [r7, #0]
     598:	23fe      	movs	r3, #254	; 0xfe
     59a:	270a      	movs	r7, #10
     59c:	9200      	str	r2, [sp, #0]
     59e:	4622      	mov	r2, r4
     5a0:	4942      	ldr	r1, [pc, #264]	; (6ac <storage_configure()+0x1fc>)
     5a2:	4840      	ldr	r0, [pc, #256]	; (6a4 <storage_configure()+0x1f4>)
     5a4:	f00d f8ca 	bl	d73c <Print::printf(char const*, ...)>
     5a8:	2112      	movs	r1, #18
     5aa:	4841      	ldr	r0, [pc, #260]	; (6b0 <storage_configure()+0x200>)
     5ac:	f00f fc32 	bl	fe14 <usb_serial_write>
     5b0:	4632      	mov	r2, r6
     5b2:	4623      	mov	r3, r4
     5b4:	483b      	ldr	r0, [pc, #236]	; (6a4 <storage_configure()+0x1f4>)
     5b6:	e9cd 7400 	strd	r7, r4, [sp]
     5ba:	f00d f8e1 	bl	d780 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5be:	2110      	movs	r1, #16
     5c0:	483c      	ldr	r0, [pc, #240]	; (6b4 <storage_configure()+0x204>)
     5c2:	f00f fc27 	bl	fe14 <usb_serial_write>
     5c6:	462a      	mov	r2, r5
     5c8:	4623      	mov	r3, r4
     5ca:	4836      	ldr	r0, [pc, #216]	; (6a4 <storage_configure()+0x1f4>)
     5cc:	e9cd 7400 	strd	r7, r4, [sp]
     5d0:	f00d f8d6 	bl	d780 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
     5d4:	210e      	movs	r1, #14
     5d6:	4838      	ldr	r0, [pc, #224]	; (6b8 <storage_configure()+0x208>)
     5d8:	f00f fc1c 	bl	fe14 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     5dc:	4623      	mov	r3, r4
     5de:	463a      	mov	r2, r7
     5e0:	4641      	mov	r1, r8
     5e2:	4830      	ldr	r0, [pc, #192]	; (6a4 <storage_configure()+0x1f4>)
     5e4:	f00d f8b8 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     5e8:	2106      	movs	r1, #6
     5ea:	4834      	ldr	r0, [pc, #208]	; (6bc <storage_configure()+0x20c>)
     5ec:	f00f fc12 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     5f0:	482c      	ldr	r0, [pc, #176]	; (6a4 <storage_configure()+0x1f4>)
  }
     5f2:	b002      	add	sp, #8
     5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     5f8:	f00d b884 	b.w	d704 <Print::println()>
     5fc:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  uint32_t clusterCount() const {
     600:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
     604:	2b00      	cmp	r3, #0
     606:	d033      	beq.n	670 <storage_configure()+0x1c0>
          uint64_t totalSize = sdx[ii].clusterCount();
     608:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     60c:	2800      	cmp	r0, #0
     60e:	d193      	bne.n	538 <storage_configure()+0x88>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     610:	4618      	mov	r0, r3
     612:	f007 ffe7 	bl	85e4 <ExFatPartition::freeClusterCount()>
     616:	4605      	mov	r5, r0
     618:	e7b1      	b.n	57e <storage_configure()+0xce>
     61a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     61e:	b350      	cbz	r0, 676 <storage_configure()+0x1c6>
     620:	6803      	ldr	r3, [r0, #0]
     622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     624:	4798      	blx	r3
     626:	2800      	cmp	r0, #0
     628:	d18b      	bne.n	542 <storage_configure()+0x92>
     62a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     62e:	b310      	cbz	r0, 676 <storage_configure()+0x1c6>
      return m_card->setDedicatedSpi(value);
     630:	6803      	ldr	r3, [r0, #0]
     632:	2101      	movs	r1, #1
     634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     636:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     638:	4680      	mov	r8, r0
     63a:	b340      	cbz	r0, 68e <storage_configure()+0x1de>
    return m_fVol ? m_fVol->freeClusterCount() :
     63c:	f8d4 0480 	ldr.w	r0, [r4, #1152]	; 0x480
     640:	b990      	cbnz	r0, 668 <storage_configure()+0x1b8>
     642:	f8d4 5484 	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
     646:	2d00      	cmp	r5, #0
     648:	d186      	bne.n	558 <storage_configure()+0xa8>
     64a:	f8d4 048c 	ldr.w	r0, [r4, #1164]	; 0x48c
    if (m_card) {
     64e:	2800      	cmp	r0, #0
     650:	d18e      	bne.n	570 <storage_configure()+0xc0>
     652:	4605      	mov	r5, r0
     654:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     658:	b1db      	cbz	r3, 692 <storage_configure()+0x1e2>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     65a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
     65e:	ea4f 2893 	mov.w	r8, r3, lsr #10
     662:	e797      	b.n	594 <storage_configure()+0xe4>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     664:	f04f 0800 	mov.w	r8, #0
    return m_fVol ? m_fVol->freeClusterCount() :
     668:	f009 fef2 	bl	a450 <FatPartition::freeClusterCount()>
     66c:	4605      	mov	r5, r0
     66e:	e777      	b.n	560 <storage_configure()+0xb0>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     670:	b140      	cbz	r0, 684 <storage_configure()+0x1d4>
     672:	461e      	mov	r6, r3
     674:	e760      	b.n	538 <storage_configure()+0x88>
     676:	4605      	mov	r5, r0
     678:	e781      	b.n	57e <storage_configure()+0xce>
     67a:	4618      	mov	r0, r3
     67c:	f009 fee8 	bl	a450 <FatPartition::freeClusterCount()>
     680:	4605      	mov	r5, r0
     682:	e77c      	b.n	57e <storage_configure()+0xce>
     684:	4606      	mov	r6, r0
  uint32_t bytesPerCluster() const {
     686:	f04f 0800 	mov.w	r8, #0
     68a:	4645      	mov	r5, r8
     68c:	e782      	b.n	594 <storage_configure()+0xe4>
     68e:	4605      	mov	r5, r0
     690:	e775      	b.n	57e <storage_configure()+0xce>
     692:	4698      	mov	r8, r3
     694:	e77e      	b.n	594 <storage_configure()+0xe4>
     696:	bf00      	nop
     698:	20019478 	.word	0x20019478
     69c:	20009520 	.word	0x20009520
     6a0:	20000568 	.word	0x20000568
     6a4:	20008b94 	.word	0x20008b94
     6a8:	200199cc 	.word	0x200199cc
     6ac:	20000594 	.word	0x20000594
     6b0:	200005ac 	.word	0x200005ac
     6b4:	200005c0 	.word	0x200005c0
     6b8:	200005d4 	.word	0x200005d4
     6bc:	200005e4 	.word	0x200005e4

000006c0 <_GLOBAL__sub_I_storage>:
  }
     6c0:	b538      	push	{r3, r4, r5, lr}
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6c2:	492f      	ldr	r1, [pc, #188]	; (780 <_GLOBAL__sub_I_storage+0xc0>)
        fsCount = 0;
     6c4:	2400      	movs	r4, #0
     6c6:	4d2f      	ldr	r5, [pc, #188]	; (784 <_GLOBAL__sub_I_storage+0xc4>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6cc:	4b2e      	ldr	r3, [pc, #184]	; (788 <_GLOBAL__sub_I_storage+0xc8>)
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6ce:	6029      	str	r1, [r5, #0]
     6d0:	f06f 0101 	mvn.w	r1, #1
        fsCount = 0;
     6d4:	606c      	str	r4, [r5, #4]
  MTPStorage_SD storage;
     6d6:	4628      	mov	r0, r5
     6d8:	f885 40b4 	strb.w	r4, [r5, #180]	; 0xb4
     6dc:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
     6e0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
     6e4:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
     6e8:	f885 4154 	strb.w	r4, [r5, #340]	; 0x154
     6ec:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6f0:	f8c5 41a8 	str.w	r4, [r5, #424]	; 0x1a8
     6f4:	f8a5 41ac 	strh.w	r4, [r5, #428]	; 0x1ac
     6f8:	e9c5 422b 	strd	r4, r2, [r5, #172]	; 0xac
     6fc:	e9c5 423f 	strd	r4, r2, [r5, #252]	; 0xfc
     700:	e9c5 4253 	strd	r4, r2, [r5, #332]	; 0x14c
     704:	e9c5 4168 	strd	r4, r1, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     708:	e9c5 443c 	strd	r4, r4, [r5, #240]	; 0xf0
     70c:	e9c5 4450 	strd	r4, r4, [r5, #320]	; 0x140
     710:	e9c5 4464 	strd	r4, r4, [r5, #400]	; 0x190
     714:	e9c5 4466 	strd	r4, r4, [r5, #408]	; 0x198
     718:	4a1c      	ldr	r2, [pc, #112]	; (78c <_GLOBAL__sub_I_storage+0xcc>)
     71a:	491d      	ldr	r1, [pc, #116]	; (790 <_GLOBAL__sub_I_storage+0xd0>)
     71c:	f00f fd84 	bl	10228 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     720:	481c      	ldr	r0, [pc, #112]	; (794 <_GLOBAL__sub_I_storage+0xd4>)
  FsVolume() {}
     722:	4b1d      	ldr	r3, [pc, #116]	; (798 <_GLOBAL__sub_I_storage+0xd8>)
     724:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
     728:	6005      	str	r5, [r0, #0]
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     72a:	481c      	ldr	r0, [pc, #112]	; (79c <_GLOBAL__sub_I_storage+0xdc>)
     72c:	f8c1 4420 	str.w	r4, [r1, #1056]	; 0x420
     730:	f881 4424 	strb.w	r4, [r1, #1060]	; 0x424
     734:	f8c1 4428 	str.w	r4, [r1, #1064]	; 0x428
	SPISettings() : _clock(4000000) {
     738:	4919      	ldr	r1, [pc, #100]	; (7a0 <_GLOBAL__sub_I_storage+0xe0>)
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	4d1a      	ldr	r5, [pc, #104]	; (7a4 <_GLOBAL__sub_I_storage+0xe4>)
     73c:	f8c3 0490 	str.w	r0, [r3, #1168]	; 0x490
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     740:	2007      	movs	r0, #7
	SPISettings() : _clock(4000000) {
     742:	f8c3 14a4 	str.w	r1, [r3, #1188]	; 0x4a4
  SharedSpiCard() {}
     746:	2129      	movs	r1, #41	; 0x29
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     748:	f8c3 04a8 	str.w	r0, [r3, #1192]	; 0x4a8
  SdFs sdx[nsd];
     74c:	4620      	mov	r0, r4
     74e:	f883 14ad 	strb.w	r1, [r3, #1197]	; 0x4ad
     752:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
     756:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
class SdBase : public Vol {
     75a:	f8c3 448c 	str.w	r4, [r3, #1164]	; 0x48c
  SdioConfig() {}
     75e:	f8a3 4498 	strh.w	r4, [r3, #1176]	; 0x498
     762:	f883 44b1 	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     766:	f883 44b8 	strb.w	r4, [r3, #1208]	; 0x4b8
     76a:	f883 44c8 	strb.w	r4, [r3, #1224]	; 0x4c8
     76e:	f8c3 549c 	str.w	r5, [r3, #1180]	; 0x49c
     772:	4a06      	ldr	r2, [pc, #24]	; (78c <_GLOBAL__sub_I_storage+0xcc>)
     774:	490c      	ldr	r1, [pc, #48]	; (7a8 <_GLOBAL__sub_I_storage+0xe8>)
  }
     776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     77a:	f00f bd55 	b.w	10228 <__aeabi_atexit>
     77e:	bf00      	nop
     780:	20000c74 	.word	0x20000c74
     784:	200199cc 	.word	0x200199cc
     788:	20000d78 	.word	0x20000d78
     78c:	20008f70 	.word	0x20008f70
     790:	00000071 	.word	0x00000071
     794:	20009b00 	.word	0x20009b00
     798:	20019478 	.word	0x20019478
     79c:	20000dc0 	.word	0x20000dc0
     7a0:	003d0900 	.word	0x003d0900
     7a4:	20000ce0 	.word	0x20000ce0
     7a8:	0000006d 	.word	0x0000006d

000007ac <setup>:
{
     7ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		uint32_t millis_begin = systick_millis_count;
     7b0:	4d79      	ldr	r5, [pc, #484]	; (998 <setup+0x1ec>)
     7b2:	b087      	sub	sp, #28
    set_arm_clock(48'000'000);
     7b4:	4879      	ldr	r0, [pc, #484]	; (99c <setup+0x1f0>)
				if (elapsed > 750) break;
     7b6:	f240 28ee 	movw	r8, #750	; 0x2ee
     7ba:	f00d f92f 	bl	da1c <set_arm_clock>
		uint32_t millis_begin = systick_millis_count;
     7be:	4c78      	ldr	r4, [pc, #480]	; (9a0 <setup+0x1f4>)
     7c0:	682e      	ldr	r6, [r5, #0]
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7c2:	4f78      	ldr	r7, [pc, #480]	; (9a4 <setup+0x1f8>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7c4:	f8df 921c 	ldr.w	r9, [pc, #540]	; 9e4 <setup+0x238>
		yield();
     7c8:	f00f fba2 	bl	ff10 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7cc:	7823      	ldrb	r3, [r4, #0]
     7ce:	2b00      	cmp	r3, #0
     7d0:	f000 80b1 	beq.w	936 <setup+0x18a>
     7d4:	783b      	ldrb	r3, [r7, #0]
     7d6:	07da      	lsls	r2, r3, #31
     7d8:	f140 80ad 	bpl.w	936 <setup+0x18a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     7dc:	682b      	ldr	r3, [r5, #0]
     7de:	f8d9 2000 	ldr.w	r2, [r9]
     7e2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     7e4:	2b0e      	cmp	r3, #14
     7e6:	f240 80a6 	bls.w	936 <setup+0x18a>
  uint16_t *params=loadParameters();
     7ea:	f003 fde5 	bl	43b8 <loadParameters()>
  if(params[0]==1)
     7ee:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7f0:	4607      	mov	r7, r0
  if(params[0]==1)
     7f2:	2b01      	cmp	r3, #1
     7f4:	f000 80b3 	beq.w	95e <setup+0x1b2>
     7f8:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7fa:	f242 760f 	movw	r6, #9999	; 0x270f
     7fe:	42b3      	cmp	r3, r6
     800:	d818      	bhi.n	834 <setup+0x88>
     802:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 9a4 <setup+0x1f8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     806:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 9e4 <setup+0x238>
		yield();
     80a:	f00f fb81 	bl	ff10 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     80e:	7823      	ldrb	r3, [r4, #0]
     810:	2b00      	cmp	r3, #0
     812:	f000 80af 	beq.w	974 <setup+0x1c8>
     816:	f898 3000 	ldrb.w	r3, [r8]
     81a:	07db      	lsls	r3, r3, #31
     81c:	f140 80aa 	bpl.w	974 <setup+0x1c8>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     820:	682b      	ldr	r3, [r5, #0]
     822:	f8d9 2000 	ldr.w	r2, [r9]
     826:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     828:	2b0e      	cmp	r3, #14
     82a:	f240 80a3 	bls.w	974 <setup+0x1c8>
     82e:	4b5e      	ldr	r3, [pc, #376]	; (9a8 <setup+0x1fc>)
     830:	2201      	movs	r2, #1
     832:	601a      	str	r2, [r3, #0]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     834:	2127      	movs	r1, #39	; 0x27
     836:	485d      	ldr	r0, [pc, #372]	; (9ac <setup+0x200>)
     838:	f00f faec 	bl	fe14 <usb_serial_write>
     83c:	485c      	ldr	r0, [pc, #368]	; (9b0 <setup+0x204>)
     83e:	f00c ff61 	bl	d704 <Print::println()>
     842:	210c      	movs	r1, #12
     844:	485b      	ldr	r0, [pc, #364]	; (9b4 <setup+0x208>)
     846:	f00f fae5 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     84a:	8839      	ldrh	r1, [r7, #0]
     84c:	4858      	ldr	r0, [pc, #352]	; (9b0 <setup+0x204>)
     84e:	f00c ff4d 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     852:	4857      	ldr	r0, [pc, #348]	; (9b0 <setup+0x204>)
     854:	f00c ff56 	bl	d704 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     858:	4857      	ldr	r0, [pc, #348]	; (9b8 <setup+0x20c>)
     85a:	f01a fc0d 	bl	1b078 <___ZN16CrashReportClasscvbEv_veneer>
     85e:	2800      	cmp	r0, #0
     860:	f040 8095 	bne.w	98e <setup+0x1e2>
    usbPowerSetup();
     864:	f000 faba 	bl	ddc <usbPowerSetup()>
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     868:	4b54      	ldr	r3, [pc, #336]	; (9bc <setup+0x210>)
     86a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
     86c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     870:	665a      	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     874:	f022 0223 	bic.w	r2, r2, #35	; 0x23
     878:	655a      	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     87a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
     87c:	f042 0201 	orr.w	r2, r2, #1
     880:	655a      	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     882:	f3bf 8f4f 	dsb	sy
    storage_configure();
     886:	f7ff fe13 	bl	4b0 <storage_configure()>
     88a:	2108      	movs	r1, #8
     88c:	484c      	ldr	r0, [pc, #304]	; (9c0 <setup+0x214>)
     88e:	f00f fac1 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     892:	4847      	ldr	r0, [pc, #284]	; (9b0 <setup+0x204>)
     894:	f00c ff36 	bl	d704 <Print::println()>
  rtcSetup();
     898:	2113      	movs	r1, #19
     89a:	2012      	movs	r0, #18
     89c:	f004 fa32 	bl	4d04 <rtcSetup(unsigned char, unsigned char)>
    rtcSync();
     8a0:	f004 face 	bl	4e40 <rtcSync()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8a4:	a804      	add	r0, sp, #16
     8a6:	f004 fa5b 	bl	4d60 <rtc_get_datetime(datetime_t*)>
     8aa:	2800      	cmp	r0, #0
     8ac:	d067      	beq.n	97e <setup+0x1d2>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8ae:	f99d 1017 	ldrsb.w	r1, [sp, #23]
     8b2:	f99d 2016 	ldrsb.w	r2, [sp, #22]
     8b6:	f99d 4015 	ldrsb.w	r4, [sp, #21]
     8ba:	f99d 0013 	ldrsb.w	r0, [sp, #19]
     8be:	f99d 3012 	ldrsb.w	r3, [sp, #18]
     8c2:	e9cd 2102 	strd	r2, r1, [sp, #8]
     8c6:	e9cd 0400 	strd	r0, r4, [sp]
     8ca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
     8ce:	493d      	ldr	r1, [pc, #244]	; (9c4 <setup+0x218>)
     8d0:	4837      	ldr	r0, [pc, #220]	; (9b0 <setup+0x204>)
     8d2:	f00c ff33 	bl	d73c <Print::printf(char const*, ...)>
  Serial.println();
     8d6:	4836      	ldr	r0, [pc, #216]	; (9b0 <setup+0x204>)
     8d8:	f00c ff14 	bl	d704 <Print::println()>
     8dc:	2108      	movs	r1, #8
     8de:	483a      	ldr	r0, [pc, #232]	; (9c8 <setup+0x21c>)
     8e0:	f00f fa98 	bl	fe14 <usb_serial_write>
    Serial.println(rtcGetTimestamp());
     8e4:	f004 fac0 	bl	4e68 <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     8e8:	4604      	mov	r4, r0
     8ea:	b128      	cbz	r0, 8f8 <setup+0x14c>
							  return write((const uint8_t *)str, strlen(str)); }
     8ec:	f012 f988 	bl	12c00 <strlen>
     8f0:	4601      	mov	r1, r0
     8f2:	4620      	mov	r0, r4
     8f4:	f00f fa8e 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     8f8:	482d      	ldr	r0, [pc, #180]	; (9b0 <setup+0x204>)
  setup_ready=1;
     8fa:	2401      	movs	r4, #1
     8fc:	f00c ff02 	bl	d704 <Print::println()>
     900:	210b      	movs	r1, #11
     902:	4832      	ldr	r0, [pc, #200]	; (9cc <setup+0x220>)
     904:	f00f fa86 	bl	fe14 <usb_serial_write>
     908:	4829      	ldr	r0, [pc, #164]	; (9b0 <setup+0x204>)
     90a:	f00c fefb 	bl	d704 <Print::println()>
  filing_init();
     90e:	f001 fac1 	bl	1e94 <filing_init()>
  setup_ready=1;
     912:	4b2f      	ldr	r3, [pc, #188]	; (9d0 <setup+0x224>)
     914:	210a      	movs	r1, #10
     916:	482f      	ldr	r0, [pc, #188]	; (9d4 <setup+0x228>)
     918:	601c      	str	r4, [r3, #0]
     91a:	f00f fa7b 	bl	fe14 <usb_serial_write>
     91e:	4824      	ldr	r0, [pc, #144]	; (9b0 <setup+0x204>)
     920:	f00c fef0 	bl	d704 <Print::println()>
    setup1();
     924:	f7ff fd9c 	bl	460 <setup1()>
    pinMode(13,OUTPUT);
     928:	4621      	mov	r1, r4
     92a:	200d      	movs	r0, #13
     92c:	f00d fa96 	bl	de5c <pinMode>
}
     930:	b007      	add	sp, #28
     932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     936:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
     938:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     93a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
     93c:	b132      	cbz	r2, 94c <setup+0x1a0>
				if (elapsed > 2000) break;
     93e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     942:	f63f af52 	bhi.w	7ea <setup+0x3e>
			yield();
     946:	f00f fae3 	bl	ff10 <yield>
     94a:	e73d      	b.n	7c8 <setup+0x1c>
				if (elapsed > 750) break;
     94c:	4543      	cmp	r3, r8
     94e:	d9fa      	bls.n	946 <setup+0x19a>
  uint16_t *params=loadParameters();
     950:	f003 fd32 	bl	43b8 <loadParameters()>
  if(params[0]==1)
     954:	8803      	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     956:	4607      	mov	r7, r0
  if(params[0]==1)
     958:	2b01      	cmp	r3, #1
     95a:	f47f af4d 	bne.w	7f8 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     95e:	4b1e      	ldr	r3, [pc, #120]	; (9d8 <setup+0x22c>)
     960:	491e      	ldr	r1, [pc, #120]	; (9dc <setup+0x230>)
     962:	681b      	ldr	r3, [r3, #0]
     964:	6809      	ldr	r1, [r1, #0]
     966:	4a10      	ldr	r2, [pc, #64]	; (9a8 <setup+0x1fc>)
     968:	428b      	cmp	r3, r1
     96a:	bf8c      	ite	hi
     96c:	2300      	movhi	r3, #0
     96e:	2301      	movls	r3, #1
     970:	6013      	str	r3, [r2, #0]
     972:	e75f      	b.n	834 <setup+0x88>
     974:	682b      	ldr	r3, [r5, #0]
    while(millis()<10'000) if(Serial) { termon=1; break;}
     976:	42b3      	cmp	r3, r6
     978:	f67f af47 	bls.w	80a <setup+0x5e>
     97c:	e75a      	b.n	834 <setup+0x88>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     97e:	2114      	movs	r1, #20
     980:	4817      	ldr	r0, [pc, #92]	; (9e0 <setup+0x234>)
     982:	f00f fa47 	bl	fe14 <usb_serial_write>
     986:	480a      	ldr	r0, [pc, #40]	; (9b0 <setup+0x204>)
     988:	f00c febc 	bl	d704 <Print::println()>
     98c:	e78f      	b.n	8ae <setup+0x102>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     98e:	4908      	ldr	r1, [pc, #32]	; (9b0 <setup+0x204>)
     990:	4809      	ldr	r0, [pc, #36]	; (9b8 <setup+0x20c>)
     992:	f01a fb61 	bl	1b058 <___ZNK16CrashReportClass7printToER5Print_veneer>
     996:	e765      	b.n	864 <setup+0xb8>
     998:	20019b88 	.word	0x20019b88
     99c:	02dc6c00 	.word	0x02dc6c00
     9a0:	20019bdd 	.word	0x20019bdd
     9a4:	20019bdc 	.word	0x20019bdc
     9a8:	20019b9c 	.word	0x20019b9c
     9ac:	20000a00 	.word	0x20000a00
     9b0:	20008b94 	.word	0x20008b94
     9b4:	20008054 	.word	0x20008054
     9b8:	20008b88 	.word	0x20008b88
     9bc:	400fc000 	.word	0x400fc000
     9c0:	20008064 	.word	0x20008064
     9c4:	20008088 	.word	0x20008088
     9c8:	200080b0 	.word	0x200080b0
     9cc:	200080bc 	.word	0x200080bc
     9d0:	200199c8 	.word	0x200199c8
     9d4:	200080c8 	.word	0x200080c8
     9d8:	20019b98 	.word	0x20019b98
     9dc:	20009534 	.word	0x20009534
     9e0:	20008070 	.word	0x20008070
     9e4:	20019ba8 	.word	0x20019ba8

000009e8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     9e8:	b510      	push	{r4, lr}
     9ea:	4604      	mov	r4, r0
		release();
     9ec:	f00c fdec 	bl	d5c8 <DMAChannel::release()>
	}
     9f0:	4620      	mov	r0, r4
     9f2:	bd10      	pop	{r4, pc}

000009f4 <acq_isr()>:
  static void acq_isr(void)
  {
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     9f4:	4b28      	ldr	r3, [pc, #160]	; (a98 <acq_isr()+0xa4>)

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9f6:	4a29      	ldr	r2, [pc, #164]	; (a9c <acq_isr()+0xa8>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9f8:	4929      	ldr	r1, [pc, #164]	; (aa0 <acq_isr()+0xac>)
  {
     9fa:	b510      	push	{r4, lr}
    daddr = (uint32_t)(dma.TCD->DADDR);
     9fc:	681c      	ldr	r4, [r3, #0]
     9fe:	7918      	ldrb	r0, [r3, #4]
     a00:	6923      	ldr	r3, [r4, #16]
     a02:	77c8      	strb	r0, [r1, #31]
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     a04:	4293      	cmp	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     a06:	bf28      	it	cs
     a08:	f5a2 6280 	subcs.w	r2, r2, #1024	; 0x400
    {
      // DMA is receiving to the first half of the buffer
      // need to remove data from the second half
      src = (int32_t *)&i2s_buffer[NBUF_I2S];
     a0c:	4694      	mov	ip, r2
	asm("dsb");
     a0e:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
     a12:	f502 6180 	add.w	r1, r2, #1024	; 0x400
     a16:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
     a1a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
     a1e:	4299      	cmp	r1, r3
     a20:	bf34      	ite	cc
     a22:	2101      	movcc	r1, #1
     a24:	2120      	movcs	r1, #32
     a26:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
     a2a:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
     a2c:	f8c0 2f5c 	str.w	r2, [r0, #3932]	; 0xf5c
		location += 32;
     a30:	461a      	mov	r2, r3
	} while (location < end_addr);
     a32:	f103 0320 	add.w	r3, r3, #32
     a36:	d1f8      	bne.n	a2a <acq_isr()+0x36>
	asm("dsb");
     a38:	f3bf 8f4f 	dsb	sy
	asm("isb");
     a3c:	f3bf 8f6f 	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     a40:	4918      	ldr	r1, [pc, #96]	; (aa4 <acq_isr()+0xb0>)
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a42:	2300      	movs	r3, #0
     a44:	4818      	ldr	r0, [pc, #96]	; (aa8 <acq_isr()+0xb4>)
{ procCount++;
     a46:	680a      	ldr	r2, [r1, #0]
     a48:	4c18      	ldr	r4, [pc, #96]	; (aac <acq_isr()+0xb8>)
     a4a:	3201      	adds	r2, #1
     a4c:	600a      	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     a4e:	8821      	ldrh	r1, [r4, #0]
     a50:	f85c 2033 	ldr.w	r2, [ip, r3, lsl #3]
     a54:	3301      	adds	r3, #1
     a56:	b209      	sxth	r1, r1
     a58:	2b80      	cmp	r3, #128	; 0x80
     a5a:	fa42 f201 	asr.w	r2, r2, r1
     a5e:	f840 2f04 	str.w	r2, [r0, #4]!
     a62:	d1f4      	bne.n	a4e <acq_isr()+0x5a>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     a64:	4a12      	ldr	r2, [pc, #72]	; (ab0 <acq_isr()+0xbc>)
     a66:	8813      	ldrh	r3, [r2, #0]
     a68:	b21b      	sxth	r3, r3
     a6a:	b123      	cbz	r3, a76 <acq_isr()+0x82>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
  }
  else if(proc==1)
     a6c:	8813      	ldrh	r3, [r2, #0]
     a6e:	b21b      	sxth	r3, r3
     a70:	2b01      	cmp	r3, #1
     a72:	d00a      	beq.n	a8a <acq_isr()+0x96>
  }
     a74:	bd10      	pop	{r4, pc}
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a76:	480f      	ldr	r0, [pc, #60]	; (ab4 <acq_isr()+0xc0>)
     a78:	f003 ffa0 	bl	49bc <pushData(unsigned long*)>
     a7c:	2800      	cmp	r0, #0
     a7e:	d1f9      	bne.n	a74 <acq_isr()+0x80>
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a80:	4a0d      	ldr	r2, [pc, #52]	; (ab8 <acq_isr()+0xc4>)
     a82:	6813      	ldr	r3, [r2, #0]
     a84:	3301      	adds	r3, #1
     a86:	6013      	str	r3, [r2, #0]
  }
     a88:	bd10      	pop	{r4, pc}
   if(!compress((void *)acqBuffer)) procMiss++;
     a8a:	480a      	ldr	r0, [pc, #40]	; (ab4 <acq_isr()+0xc0>)
     a8c:	f000 fb06 	bl	109c <compress(void*)>
     a90:	2800      	cmp	r0, #0
     a92:	d1ef      	bne.n	a74 <acq_isr()+0x80>
     a94:	e7f4      	b.n	a80 <acq_isr()+0x8c>
     a96:	bf00      	nop
     a98:	200183dc 	.word	0x200183dc
     a9c:	20200400 	.word	0x20200400
     aa0:	400e8000 	.word	0x400e8000
     aa4:	2001939c 	.word	0x2001939c
     aa8:	200190d8 	.word	0x200190d8
     aac:	20009556 	.word	0x20009556
     ab0:	20009554 	.word	0x20009554
     ab4:	200190dc 	.word	0x200190dc
     ab8:	200193a0 	.word	0x200193a0
     abc:	00000000 	.word	0x00000000

00000ac0 <setAudioFrequency(int)>:
  {
     ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ac4:	2105      	movs	r1, #5
     ac6:	4681      	mov	r9, r0
     ac8:	4859      	ldr	r0, [pc, #356]	; (c30 <setAudioFrequency(int)+0x170>)
	size_t println(int n)				{ return print(n) + println(); }
     aca:	4f5a      	ldr	r7, [pc, #360]	; (c34 <setAudioFrequency(int)+0x174>)
     acc:	ed2d 8b02 	vpush	{d8}
     ad0:	b083      	sub	sp, #12
     ad2:	f00f f99f 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     ad6:	2180      	movs	r1, #128	; 0x80
     ad8:	4857      	ldr	r0, [pc, #348]	; (c38 <setAudioFrequency(int)+0x178>)
     ada:	f00c fe07 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     ade:	4856      	ldr	r0, [pc, #344]	; (c38 <setAudioFrequency(int)+0x178>)
     ae0:	f00c fe10 	bl	d704 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     ae4:	231a      	movs	r3, #26
     ae6:	ea4f 10c9 	mov.w	r0, r9, lsl #7
    } while ((n2>64 && n0<54));
     aea:	f8df c170 	ldr.w	ip, [pc, #368]	; c5c <setAudioFrequency(int)+0x19c>
    {   n0++;
     aee:	3301      	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     af0:	4602      	mov	r2, r0
        n1=0;
     af2:	2400      	movs	r4, #0
        {   n1++; 
     af4:	46a0      	mov	r8, r4
     af6:	3401      	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     af8:	fb97 f6f2 	sdiv	r6, r7, r2
     afc:	1c75      	adds	r5, r6, #1
        } while ((n2>64) && (n1<=8));
     afe:	4402      	add	r2, r0
     b00:	2d40      	cmp	r5, #64	; 0x40
     b02:	bfd4      	ite	le
     b04:	2100      	movle	r1, #0
     b06:	2101      	movgt	r1, #1
     b08:	2c08      	cmp	r4, #8
     b0a:	dc01      	bgt.n	b10 <setAudioFrequency(int)+0x50>
     b0c:	2900      	cmp	r1, #0
     b0e:	d1f1      	bne.n	af4 <setAudioFrequency(int)+0x34>
    } while ((n2>64 && n0<54));
     b10:	2b35      	cmp	r3, #53	; 0x35
     b12:	4467      	add	r7, ip
     b14:	dc01      	bgt.n	b1a <setAudioFrequency(int)+0x5a>
     b16:	2900      	cmp	r1, #0
     b18:	d1e9      	bne.n	aee <setAudioFrequency(int)+0x2e>
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     b1a:	464a      	mov	r2, r9
     b1c:	4947      	ldr	r1, [pc, #284]	; (c3c <setAudioFrequency(int)+0x17c>)
     b1e:	4846      	ldr	r0, [pc, #280]	; (c38 <setAudioFrequency(int)+0x178>)
     b20:	e9cd 4500 	strd	r4, r5, [sp]
     b24:	f00c fe0a 	bl	d73c <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b28:	ee07 9a90 	vmov	s15, r9
     b2c:	ee06 5a90 	vmov	s13, r5
     b30:	2103      	movs	r1, #3
     b32:	eeb8 5be7 	vcvt.f64.s32	d5, s15
     b36:	ee07 4a90 	vmov	s15, r4
     b3a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
     b3e:	4840      	ldr	r0, [pc, #256]	; (c40 <setAudioFrequency(int)+0x180>)
     b40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     b44:	ed9f 3b34 	vldr	d3, [pc, #208]	; c18 <setAudioFrequency(int)+0x158>
     b48:	ed9f 4b35 	vldr	d4, [pc, #212]	; c20 <setAudioFrequency(int)+0x160>
     b4c:	ee25 5b03 	vmul.f64	d5, d5, d3
     b50:	ee25 7b07 	vmul.f64	d7, d5, d7
     b54:	ee27 7b06 	vmul.f64	d7, d7, d6
     b58:	ee87 8b04 	vdiv.f64	d8, d7, d4
     b5c:	f00f f95a 	bl	fe14 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b60:	2102      	movs	r1, #2
     b62:	4835      	ldr	r0, [pc, #212]	; (c38 <setAudioFrequency(int)+0x178>)
     b64:	eeb0 0b48 	vmov.f64	d0, d8
     b68:	f00c fe5e 	bl	d828 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b6c:	4832      	ldr	r0, [pc, #200]	; (c38 <setAudioFrequency(int)+0x178>)
     b6e:	f00c fdc9 	bl	d704 <Print::println()>
    int c0 = C;
     b72:	eefd 7bc8 	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b76:	f242 7110 	movw	r1, #10000	; 0x2710
    int c0 = C;
     b7a:	ee17 3a90 	vmov	r3, s15
    int c1 = C * c2 - (c0 * c2);
     b7e:	fb01 f203 	mul.w	r2, r1, r3
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    int c1 = C * c2 - (c0 * c2);
     b86:	ee07 2a10 	vmov	s14, r2
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
     b8a:	f443 1389 	orr.w	r3, r3, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b8e:	4a2d      	ldr	r2, [pc, #180]	; (c44 <setAudioFrequency(int)+0x184>)
    int c1 = C * c2 - (c0 * c2);
     b90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
     b94:	6713      	str	r3, [r2, #112]	; 0x70
    int c1 = C * c2 - (c0 * c2);
     b96:	ed9f 6b24 	vldr	d6, [pc, #144]	; c28 <setAudioFrequency(int)+0x168>
     b9a:	ee98 7b06 	vfnms.f64	d7, d8, d6
     b9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     ba2:	ee17 3a90 	vmov	r3, s15
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
     ba6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     baa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
     bae:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
     bb2:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
     bb8:	6713      	str	r3, [r2, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
     bba:	6f13      	ldr	r3, [r2, #112]	; 0x70
     bbc:	2b00      	cmp	r3, #0
     bbe:	dafc      	bge.n	bba <setAudioFrequency(int)+0xfa>
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc0:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bc4:	ea4f 1388 	mov.w	r3, r8, lsl #6
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bc8:	481f      	ldr	r0, [pc, #124]	; (c48 <setAudioFrequency(int)+0x188>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bca:	f006 063f 	and.w	r6, r6, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd2:	4008      	ands	r0, r1
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bd4:	491d      	ldr	r1, [pc, #116]	; (c4c <setAudioFrequency(int)+0x18c>)
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
     bd6:	f8c2 0170 	str.w	r0, [r2, #368]	; 0x170
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
     bda:	6f10      	ldr	r0, [r2, #112]	; 0x70
     bdc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
     be0:	6710      	str	r0, [r2, #112]	; 0x70
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     be2:	69ca      	ldr	r2, [r1, #28]
     be4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     bec:	61ca      	str	r2, [r1, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bee:	4a18      	ldr	r2, [pc, #96]	; (c50 <setAudioFrequency(int)+0x190>)
     bf0:	6a88      	ldr	r0, [r1, #40]	; 0x28
     bf2:	4002      	ands	r2, r0
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bf4:	4817      	ldr	r0, [pc, #92]	; (c54 <setAudioFrequency(int)+0x194>)
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     bf6:	4313      	orrs	r3, r2
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     bf8:	4a17      	ldr	r2, [pc, #92]	; (c58 <setAudioFrequency(int)+0x198>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     bfa:	4333      	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     bfc:	628b      	str	r3, [r1, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     bfe:	6843      	ldr	r3, [r0, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     c00:	401a      	ands	r2, r3
     c02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     c06:	6042      	str	r2, [r0, #4]
  }
     c08:	b003      	add	sp, #12
     c0a:	ecbd 8b02 	vpop	{d8}
     c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     c12:	bf00      	nop
     c14:	f3af 8000 	nop.w
     c18:	00000000 	.word	0x00000000
     c1c:	40600000 	.word	0x40600000
     c20:	00000000 	.word	0x00000000
     c24:	4176e360 	.word	0x4176e360
     c28:	00000000 	.word	0x00000000
     c2c:	40c38800 	.word	0x40c38800
     c30:	2000053c 	.word	0x2000053c
     c34:	269fb200 	.word	0x269fb200
     c38:	20008b94 	.word	0x20008b94
     c3c:	20000544 	.word	0x20000544
     c40:	20000564 	.word	0x20000564
     c44:	400d8000 	.word	0x400d8000
     c48:	ff7f7fff 	.word	0xff7f7fff
     c4c:	400fc000 	.word	0x400fc000
     c50:	fffffe00 	.word	0xfffffe00
     c54:	400ac000 	.word	0x400ac000
     c58:	fff7fff8 	.word	0xfff7fff8
     c5c:	016e3600 	.word	0x016e3600

00000c60 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c60:	4a1a      	ldr	r2, [pc, #104]	; (ccc <i2s_setup()+0x6c>)
     c62:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
  {
     c64:	b510      	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c66:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c6a:	4c19      	ldr	r4, [pc, #100]	; (cd0 <i2s_setup()+0x70>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     c6c:	67d3      	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     c6e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     c72:	2b00      	cmp	r3, #0
     c74:	db28      	blt.n	cc8 <i2s_setup()+0x68>
    int fs = fsamp;
     c76:	4b17      	ldr	r3, [pc, #92]	; (cd4 <i2s_setup()+0x74>)
     c78:	6818      	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     c7a:	f7ff ff21 	bl	ac0 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c7e:	4b16      	ldr	r3, [pc, #88]	; (cd8 <i2s_setup()+0x78>)
     c80:	2203      	movs	r2, #3
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c82:	4916      	ldr	r1, [pc, #88]	; (cdc <i2s_setup()+0x7c>)
     c84:	2002      	movs	r0, #2
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     c86:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c8a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c92:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c96:	2204      	movs	r2, #4
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c98:	f8c1 0194 	str.w	r0, [r1, #404]	; 0x194
    I2S1_RCR3 = I2S_RCR3_RCE;
     c9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    I2S1_RMR = 0;
     ca0:	2100      	movs	r1, #0
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     ca2:	f04f 60a0 	mov.w	r0, #83886080	; 0x5000000
    I2S1_RMR = 0;
     ca6:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     caa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cae:	490c      	ldr	r1, [pc, #48]	; (ce0 <i2s_setup()+0x80>)
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     cb0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cb4:	4a0b      	ldr	r2, [pc, #44]	; (ce4 <i2s_setup()+0x84>)
    I2S1_RCR3 = I2S_RCR3_RCE;
     cb6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cba:	4b0b      	ldr	r3, [pc, #44]	; (ce8 <i2s_setup()+0x88>)
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     cbc:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     cc0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     cc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     cc8:	bd10      	pop	{r4, pc}
     cca:	bf00      	nop
     ccc:	400fc000 	.word	0x400fc000
     cd0:	40384000 	.word	0x40384000
     cd4:	20009514 	.word	0x20009514
     cd8:	401f8000 	.word	0x401f8000
     cdc:	401f8400 	.word	0x401f8400
     ce0:	0001001b 	.word	0x0001001b
     ce4:	1f1f1f00 	.word	0x1f1f1f00
     ce8:	92000001 	.word	0x92000001

00000cec <dma_setup()>:
  {
     cec:	b538      	push	{r3, r4, r5, lr}
    dma.begin(true); // Allocate the DMA channel first
     cee:	4c1c      	ldr	r4, [pc, #112]	; (d60 <dma_setup()+0x74>)
     cf0:	2101      	movs	r1, #1
    dma.TCD->SOFF = 0;
     cf2:	4d1c      	ldr	r5, [pc, #112]	; (d64 <dma_setup()+0x78>)
    dma.begin(true); // Allocate the DMA channel first
     cf4:	4620      	mov	r0, r4
     cf6:	f00c fc0d 	bl	d514 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     cfa:	6823      	ldr	r3, [r4, #0]
     cfc:	481a      	ldr	r0, [pc, #104]	; (d68 <dma_setup()+0x7c>)
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
    dma.TCD->DADDR = i2s_buffer;
     d02:	491a      	ldr	r1, [pc, #104]	; (d6c <dma_setup()+0x80>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     d04:	6018      	str	r0, [r3, #0]
    dma.TCD->DADDR = i2s_buffer;
     d06:	6119      	str	r1, [r3, #16]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     d08:	82da      	strh	r2, [r3, #22]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d0a:	8ada      	ldrh	r2, [r3, #22]
    dma.TCD->SOFF = 0;
     d0c:	605d      	str	r5, [r3, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d0e:	b292      	uxth	r2, r2
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d10:	4d17      	ldr	r5, [pc, #92]	; (d70 <dma_setup()+0x84>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     d12:	7920      	ldrb	r0, [r4, #4]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     d14:	83da      	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d16:	2206      	movs	r2, #6
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     d18:	619d      	str	r5, [r3, #24]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     d1a:	839a      	strh	r2, [r3, #28]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     d1c:	2204      	movs	r2, #4
     d1e:	4915      	ldr	r1, [pc, #84]	; (d74 <dma_setup()+0x88>)
     d20:	609a      	str	r2, [r3, #8]
    dma.TCD->DOFF = (MBIT/8);
     d22:	829a      	strh	r2, [r3, #20]
    dma.TCD->SLAST = 0;
     d24:	2200      	movs	r2, #0
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d26:	4d14      	ldr	r5, [pc, #80]	; (d78 <dma_setup()+0x8c>)
     d28:	60da      	str	r2, [r3, #12]
		*mux = 0;
     d2a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d2e:	4b13      	ldr	r3, [pc, #76]	; (d7c <dma_setup()+0x90>)
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     d30:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d34:	2101      	movs	r1, #1
     d36:	7922      	ldrb	r2, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d38:	4811      	ldr	r0, [pc, #68]	; (d80 <dma_setup()+0x94>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d3a:	f002 051f 	and.w	r5, r2, #31
     d3e:	eb03 1352 	add.w	r3, r3, r2, lsr #5
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d42:	f102 0c10 	add.w	ip, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d46:	40a9      	lsls	r1, r5
     d48:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     d4a:	4d0e      	ldr	r5, [pc, #56]	; (d84 <dma_setup()+0x98>)
     d4c:	f840 502c 	str.w	r5, [r0, ip, lsl #2]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d50:	2060      	movs	r0, #96	; 0x60
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d52:	6019      	str	r1, [r3, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d54:	490c      	ldr	r1, [pc, #48]	; (d88 <dma_setup()+0x9c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     d56:	4b0d      	ldr	r3, [pc, #52]	; (d8c <dma_setup()+0xa0>)
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     d58:	5450      	strb	r0, [r2, r1]
		DMA_SERQ = channel;
     d5a:	7922      	ldrb	r2, [r4, #4]
     d5c:	76da      	strb	r2, [r3, #27]
  }
     d5e:	bd38      	pop	{r3, r4, r5, pc}
     d60:	200183dc 	.word	0x200183dc
     d64:	02020000 	.word	0x02020000
     d68:	403840a0 	.word	0x403840a0
     d6c:	20200000 	.word	0x20200000
     d70:	fffff800 	.word	0xfffff800
     d74:	400ec000 	.word	0x400ec000
     d78:	80000013 	.word	0x80000013
     d7c:	38003840 	.word	0x38003840
     d80:	20009800 	.word	0x20009800
     d84:	000009f5 	.word	0x000009f5
     d88:	e000e400 	.word	0xe000e400
     d8c:	400e8000 	.word	0x400e8000

00000d90 <acqModifyFrequency(unsigned long)>:
  {
     d90:	b510      	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d92:	4c08      	ldr	r4, [pc, #32]	; (db4 <acqModifyFrequency(unsigned long)+0x24>)
     d94:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     d98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
     d9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     da0:	f7ff fe8e 	bl	ac0 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     da4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
     da8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
     dac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  }
     db0:	bd10      	pop	{r4, pc}
     db2:	bf00      	nop
     db4:	40384000 	.word	0x40384000

00000db8 <_GLOBAL__sub_I_procCount>:
		begin();
     db8:	4805      	ldr	r0, [pc, #20]	; (dd0 <_GLOBAL__sub_I_procCount+0x18>)
     dba:	2100      	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     dbc:	b508      	push	{r3, lr}
     dbe:	f00c fba9 	bl	d514 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     dc2:	4a04      	ldr	r2, [pc, #16]	; (dd4 <_GLOBAL__sub_I_procCount+0x1c>)
     dc4:	4904      	ldr	r1, [pc, #16]	; (dd8 <_GLOBAL__sub_I_procCount+0x20>)
     dc6:	4802      	ldr	r0, [pc, #8]	; (dd0 <_GLOBAL__sub_I_procCount+0x18>)
}
     dc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     dcc:	f00f ba2c 	b.w	10228 <__aeabi_atexit>
     dd0:	200183dc 	.word	0x200183dc
     dd4:	20008f70 	.word	0x20008f70
     dd8:	000009e9 	.word	0x000009e9

00000ddc <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
     ddc:	b410      	push	{r4}
      GPIO8_GDIR |= 1<<26;
     dde:	4b0a      	ldr	r3, [pc, #40]	; (e08 <usbPowerSetup()+0x2c>)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     de0:	2405      	movs	r4, #5
     de2:	4a0a      	ldr	r2, [pc, #40]	; (e0c <usbPowerSetup()+0x30>)
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     de4:	2008      	movs	r0, #8
      GPIO8_DR_SET = 1<<26;
     de6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
     dea:	f8c2 40b4 	str.w	r4, [r2, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
     dee:	f8c2 02a4 	str.w	r0, [r2, #676]	; 0x2a4
      #if USB_POWER==1
        usbPowerInit();
        usbPowerOn();
        delay(1000);
     df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
      GPIO8_GDIR |= 1<<26;
     df6:	685a      	ldr	r2, [r3, #4]
      #endif
    }
     df8:	f85d 4b04 	ldr.w	r4, [sp], #4
      GPIO8_GDIR |= 1<<26;
     dfc:	430a      	orrs	r2, r1
     dfe:	605a      	str	r2, [r3, #4]
      GPIO8_DR_SET = 1<<26;
     e00:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
        delay(1000);
     e04:	f00c bf82 	b.w	dd0c <delay>
     e08:	42008000 	.word	0x42008000
     e0c:	401f8000 	.word	0x401f8000

00000e10 <acqPower(int)>:

    void acqPower(int flag)
    {   
     e10:	4601      	mov	r1, r0
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
     e12:	2021      	movs	r0, #33	; 0x21
    {   
     e14:	b508      	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
     e16:	b2c9      	uxtb	r1, r1
     e18:	f00c fff6 	bl	de08 <digitalWrite>
            delay(100);
     e1c:	2064      	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
     e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            delay(100);
     e22:	f00c bf73 	b.w	dd0c <delay>
     e26:	bf00      	nop

00000e28 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
     e28:	2100      	movs	r1, #0
     e2a:	2020      	movs	r0, #32
     e2c:	f00c bfec 	b.w	de08 <digitalWrite>

00000e30 <adc_init()>:
    { digitalWrite(ADC_SHDNZ,HIGH); 
    }


    void adc_init(void)
    {
     e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
     e34:	2101      	movs	r1, #1
    {
     e36:	b082      	sub	sp, #8
            pinMode(ADC_EN,OUTPUT);
     e38:	2021      	movs	r0, #33	; 0x21
     e3a:	f00d f80f 	bl	de5c <pinMode>
            digitalWrite(ADC_EN,flag);
     e3e:	2101      	movs	r1, #1
     e40:	2021      	movs	r0, #33	; 0x21
     e42:	f00c ffe1 	bl	de08 <digitalWrite>
            delay(100);
     e46:	2064      	movs	r0, #100	; 0x64
     e48:	f00c ff60 	bl	dd0c <delay>
        #endif
        acqPower(HIGH);

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
     e4c:	2101      	movs	r1, #1
     e4e:	2020      	movs	r0, #32
     e50:	f00d f804 	bl	de5c <pinMode>
    { digitalWrite(ADC_SHDNZ,LOW); 
     e54:	2100      	movs	r1, #0
     e56:	2020      	movs	r0, #32
     e58:	f00c ffd6 	bl	de08 <digitalWrite>
        adcReset();
        delay(100);
     e5c:	2064      	movs	r0, #100	; 0x64
     e5e:	f00c ff55 	bl	dd0c <delay>
    { digitalWrite(ADC_SHDNZ,HIGH); 
     e62:	2101      	movs	r1, #1
     e64:	2020      	movs	r0, #32
     e66:	f00c ffcf 	bl	de08 <digitalWrite>
        adcStart();

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
     e6a:	4a56      	ldr	r2, [pc, #344]	; (fc4 <adc_init()+0x194>)
     e6c:	4956      	ldr	r1, [pc, #344]	; (fc8 <adc_init()+0x198>)
     e6e:	a801      	add	r0, sp, #4
     e70:	f001 f888 	bl	1f84 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
     e74:	214c      	movs	r1, #76	; 0x4c
     e76:	a801      	add	r0, sp, #4
     e78:	f001 f898 	bl	1fac <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e7c:	224c      	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
     e7e:	2800      	cmp	r0, #0
     e80:	f000 809b 	beq.w	fba <adc_init()+0x18a>
                Serial.printf("found %x\n",i2c_addr[ii]);
     e84:	4951      	ldr	r1, [pc, #324]	; (fcc <adc_init()+0x19c>)
     e86:	4852      	ldr	r0, [pc, #328]	; (fd0 <adc_init()+0x1a0>)
     e88:	f00c fc58 	bl	d73c <Print::printf(char const*, ...)>
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
     e8c:	2381      	movs	r3, #129	; 0x81
     e8e:	2202      	movs	r2, #2
     e90:	214c      	movs	r1, #76	; 0x4c
     e92:	a801      	add	r0, sp, #4
     e94:	f001 f8d8 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
     e98:	2330      	movs	r3, #48	; 0x30
     e9a:	2207      	movs	r2, #7
     e9c:	214c      	movs	r1, #76	; 0x4c
     e9e:	a801      	add	r0, sp, #4
     ea0:	4d4c      	ldr	r5, [pc, #304]	; (fd4 <adc_init()+0x1a4>)
     ea2:	f001 f8d1 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
     ea6:	2300      	movs	r3, #0
     ea8:	2208      	movs	r2, #8
     eaa:	214c      	movs	r1, #76	; 0x4c
     eac:	a801      	add	r0, sp, #4
     eae:	240b      	movs	r4, #11
     eb0:	f001 f8ca 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
     eb4:	2302      	movs	r3, #2

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eb6:	4622      	mov	r2, r4
            for(int jj=0;jj<4;jj++)
     eb8:	3401      	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     eba:	214c      	movs	r1, #76	; 0x4c
     ebc:	a801      	add	r0, sp, #4
            for(int jj=0;jj<4;jj++)
     ebe:	b2e4      	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     ec0:	f001 f8c2 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
     ec4:	2c0f      	cmp	r4, #15
     ec6:	d002      	beq.n	ece <adc_init()+0x9e>
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
     ec8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
     ecc:	e7f3      	b.n	eb6 <adc_init()+0x86>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
     ece:	2330      	movs	r3, #48	; 0x30
     ed0:	2273      	movs	r2, #115	; 0x73
     ed2:	214c      	movs	r1, #76	; 0x4c
     ed4:	a801      	add	r0, sp, #4
     ed6:	f001 f8b7 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
     eda:	4d3f      	ldr	r5, [pc, #252]	; (fd8 <adc_init()+0x1a8>)
     edc:	2320      	movs	r3, #32
     ede:	2274      	movs	r2, #116	; 0x74
     ee0:	214c      	movs	r1, #76	; 0x4c
     ee2:	a801      	add	r0, sp, #4
     ee4:	f001 f8b0 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
     ee8:	23e0      	movs	r3, #224	; 0xe0
     eea:	2275      	movs	r2, #117	; 0x75
     eec:	214c      	movs	r1, #76	; 0x4c
     eee:	a801      	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
     ef0:	243c      	movs	r4, #60	; 0x3c
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
     ef2:	f001 f8a9 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
     ef6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; fec <adc_init()+0x1bc>
     efa:	2325      	movs	r3, #37	; 0x25
     efc:	226b      	movs	r2, #107	; 0x6b
     efe:	214c      	movs	r1, #76	; 0x4c
     f00:	a801      	add	r0, sp, #4
     f02:	1cef      	adds	r7, r5, #3
     f04:	4e35      	ldr	r6, [pc, #212]	; (fdc <adc_init()+0x1ac>)
     f06:	f001 f89f 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
     f0a:	2360      	movs	r3, #96	; 0x60
     f0c:	223b      	movs	r2, #59	; 0x3b
     f0e:	214c      	movs	r1, #76	; 0x4c
     f10:	a801      	add	r0, sp, #4
     f12:	f001 f899 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0; jj<4; jj++)
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     f16:	4622      	mov	r2, r4
     f18:	2388      	movs	r3, #136	; 0x88
     f1a:	214c      	movs	r1, #76	; 0x4c
     f1c:	a801      	add	r0, sp, #4
     f1e:	f001 f893 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     f22:	f8b8 3000 	ldrh.w	r3, [r8]
     f26:	1c62      	adds	r2, r4, #1
     f28:	214c      	movs	r1, #76	; 0x4c
     f2a:	b2db      	uxtb	r3, r3
     f2c:	a801      	add	r0, sp, #4
     f2e:	b2d2      	uxtb	r2, r2
     f30:	f001 f88a 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
     f34:	8833      	ldrh	r3, [r6, #0]
     f36:	1ca2      	adds	r2, r4, #2
     f38:	214c      	movs	r1, #76	; 0x4c
     f3a:	3b37      	subs	r3, #55	; 0x37
     f3c:	a801      	add	r0, sp, #4
     f3e:	b2d2      	uxtb	r2, r2
     f40:	b2db      	uxtb	r3, r3
     f42:	f001 f881 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
     f46:	1ce2      	adds	r2, r4, #3
     f48:	2380      	movs	r3, #128	; 0x80
     f4a:	214c      	movs	r1, #76	; 0x4c
     f4c:	b2d2      	uxtb	r2, r2
     f4e:	a801      	add	r0, sp, #4
     f50:	f001 f87a 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
     f54:	1d22      	adds	r2, r4, #4
     f56:	2300      	movs	r3, #0
     f58:	214c      	movs	r1, #76	; 0x4c
     f5a:	b2d2      	uxtb	r2, r2
     f5c:	a801      	add	r0, sp, #4
     f5e:	f001 f873 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
     f62:	42bd      	cmp	r5, r7
     f64:	d002      	beq.n	f6c <adc_init()+0x13c>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
     f66:	f815 4f01 	ldrb.w	r4, [r5, #1]!
     f6a:	e7d4      	b.n	f16 <adc_init()+0xe6>
     f6c:	2106      	movs	r1, #6
     f6e:	481c      	ldr	r0, [pc, #112]	; (fe0 <adc_init()+0x1b0>)
     f70:	f00e ff50 	bl	fe14 <usb_serial_write>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
     f74:	2215      	movs	r2, #21
     f76:	214c      	movs	r1, #76	; 0x4c
     f78:	a801      	add	r0, sp, #4
     f7a:	f001 f82b 	bl	1fd4 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     f7e:	2300      	movs	r3, #0
     f80:	4601      	mov	r1, r0
     f82:	2210      	movs	r2, #16
     f84:	4812      	ldr	r0, [pc, #72]	; (fd0 <adc_init()+0x1a0>)
     f86:	f00c fbe7 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     f8a:	4811      	ldr	r0, [pc, #68]	; (fd0 <adc_init()+0x1a0>)
     f8c:	f00c fbba 	bl	d704 <Print::println()>
     f90:	2106      	movs	r1, #6
     f92:	4814      	ldr	r0, [pc, #80]	; (fe4 <adc_init()+0x1b4>)
     f94:	f00e ff3e 	bl	fe14 <usb_serial_write>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
     f98:	2276      	movs	r2, #118	; 0x76
     f9a:	214c      	movs	r1, #76	; 0x4c
     f9c:	a801      	add	r0, sp, #4
     f9e:	f001 f819 	bl	1fd4 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     fa2:	2300      	movs	r3, #0
     fa4:	4601      	mov	r1, r0
     fa6:	2210      	movs	r2, #16
     fa8:	4809      	ldr	r0, [pc, #36]	; (fd0 <adc_init()+0x1a0>)
     faa:	f00c fbd5 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
     fae:	4808      	ldr	r0, [pc, #32]	; (fd0 <adc_init()+0x1a0>)
     fb0:	f00c fba8 	bl	d704 <Print::println()>
            
        }
    }
     fb4:	b002      	add	sp, #8
     fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
     fba:	490b      	ldr	r1, [pc, #44]	; (fe8 <adc_init()+0x1b8>)
     fbc:	4804      	ldr	r0, [pc, #16]	; (fd0 <adc_init()+0x1a0>)
     fbe:	f00c fbbd 	bl	d73c <Print::printf(char const*, ...)>
     fc2:	e763      	b.n	e8c <adc_init()+0x5c>
     fc4:	000186a0 	.word	0x000186a0
     fc8:	20008ce4 	.word	0x20008ce4
     fcc:	200007dc 	.word	0x200007dc
     fd0:	20008b94 	.word	0x20008b94
     fd4:	200009f8 	.word	0x200009f8
     fd8:	200009f4 	.word	0x200009f4
     fdc:	20019bb8 	.word	0x20019bb8
     fe0:	20000800 	.word	0x20000800
     fe4:	20000808 	.word	0x20000808
     fe8:	200007e8 	.word	0x200007e8
     fec:	20009552 	.word	0x20009552

00000ff0 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	b082      	sub	sp, #8
     ff4:	4605      	mov	r5, r0
     ff6:	4c0b      	ldr	r4, [pc, #44]	; (1024 <setAGain(signed char)+0x34>)
        i2c_class i2c(&mWire,100'000);
     ff8:	4a0b      	ldr	r2, [pc, #44]	; (1028 <setAGain(signed char)+0x38>)
     ffa:	a801      	add	r0, sp, #4
     ffc:	490b      	ldr	r1, [pc, #44]	; (102c <setAGain(signed char)+0x3c>)
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
     ffe:	b2ed      	uxtb	r5, r5
        i2c_class i2c(&mWire,100'000);
    1000:	f000 ffc0 	bl	1f84 <i2c_class::i2c_class(TwoWire*, unsigned long)>
            for(int jj=0; jj<4; jj++)
    1004:	1ce6      	adds	r6, r4, #3
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    1006:	223c      	movs	r2, #60	; 0x3c
    1008:	3201      	adds	r2, #1
    100a:	462b      	mov	r3, r5
    100c:	214c      	movs	r1, #76	; 0x4c
    100e:	a801      	add	r0, sp, #4
    1010:	b2d2      	uxtb	r2, r2
    1012:	f001 f819 	bl	2048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    1016:	42b4      	cmp	r4, r6
    1018:	d002      	beq.n	1020 <setAGain(signed char)+0x30>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    101a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    101e:	e7f3      	b.n	1008 <setAGain(signed char)+0x18>
            }
    }
    1020:	b002      	add	sp, #8
    1022:	bd70      	pop	{r4, r5, r6, pc}
    1024:	200009f4 	.word	0x200009f4
    1028:	000186a0 	.word	0x000186a0
    102c:	20008ce4 	.word	0x20008ce4

00001030 <adcStatus()>:
    void adcStatus(void)
    {
    1030:	b510      	push	{r4, lr}
    1032:	b082      	sub	sp, #8
        i2c_class i2c(&mWire,100'000);
    1034:	4a14      	ldr	r2, [pc, #80]	; (1088 <adcStatus()+0x58>)
    1036:	4915      	ldr	r1, [pc, #84]	; (108c <adcStatus()+0x5c>)
    1038:	a801      	add	r0, sp, #4
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    103a:	4c15      	ldr	r4, [pc, #84]	; (1090 <adcStatus()+0x60>)
    103c:	f000 ffa2 	bl	1f84 <i2c_class::i2c_class(TwoWire*, unsigned long)>
    1040:	2107      	movs	r1, #7
    1042:	4814      	ldr	r0, [pc, #80]	; (1094 <adcStatus()+0x64>)
    1044:	f00e fee6 	bl	fe14 <usb_serial_write>
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    1048:	2215      	movs	r2, #21
    104a:	214c      	movs	r1, #76	; 0x4c
    104c:	a801      	add	r0, sp, #4
    104e:	f000 ffc1 	bl	1fd4 <i2c_class::read(unsigned char, unsigned char)>
    1052:	2300      	movs	r3, #0
    1054:	4601      	mov	r1, r0
    1056:	2210      	movs	r2, #16
    1058:	4620      	mov	r0, r4
    105a:	f00c fb7d 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    105e:	2107      	movs	r1, #7
    1060:	480d      	ldr	r0, [pc, #52]	; (1098 <adcStatus()+0x68>)
    1062:	f00e fed7 	bl	fe14 <usb_serial_write>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    1066:	2276      	movs	r2, #118	; 0x76
    1068:	214c      	movs	r1, #76	; 0x4c
    106a:	a801      	add	r0, sp, #4
    106c:	f000 ffb2 	bl	1fd4 <i2c_class::read(unsigned char, unsigned char)>
    1070:	2300      	movs	r3, #0
    1072:	4601      	mov	r1, r0
    1074:	2210      	movs	r2, #16
    1076:	4620      	mov	r0, r4
    1078:	f00c fb6e 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    107c:	4620      	mov	r0, r4
    107e:	f00c fb41 	bl	d704 <Print::println()>
    }
    1082:	b002      	add	sp, #8
    1084:	bd10      	pop	{r4, pc}
    1086:	bf00      	nop
    1088:	000186a0 	.word	0x000186a0
    108c:	20008ce4 	.word	0x20008ce4
    1090:	20008b94 	.word	0x20008b94
    1094:	2000082c 	.word	0x2000082c
    1098:	20000834 	.word	0x20000834

0000109c <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a0:	b083      	sub	sp, #12
    10a2:	4605      	mov	r5, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    10a4:	f00d fbaa 	bl	e7fc <rtc_get>
    10a8:	4682      	mov	sl, r0
  uint32_t t1;
  t1 = micros();
    10aa:	f00c fe83 	bl	ddb4 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10ae:	4ba2      	ldr	r3, [pc, #648]	; (1338 <compress(void*)+0x29c>)
    10b0:	1f2c      	subs	r4, r5, #4
  t1 = micros();
    10b2:	4681      	mov	r9, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    10b4:	6819      	ldr	r1, [r3, #0]
    10b6:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    10ba:	4623      	mov	r3, r4
    10bc:	1f0a      	subs	r2, r1, #4
    10be:	f853 0f04 	ldr.w	r0, [r3, #4]!
    10c2:	429d      	cmp	r5, r3
    10c4:	f842 0f04 	str.w	r0, [r2, #4]!
    10c8:	d1f9      	bne.n	10be <compress(void*)+0x22>
    10ca:	f501 70fe 	add.w	r0, r1, #508	; 0x1fc
    10ce:	460b      	mov	r3, r1
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    10d0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    10d4:	f854 5f04 	ldr.w	r5, [r4, #4]!
    10d8:	4298      	cmp	r0, r3
    10da:	eba2 0205 	sub.w	r2, r2, r5
    10de:	601a      	str	r2, [r3, #0]
    10e0:	d1f6      	bne.n	10d0 <compress(void*)+0x34>

  // find maximum in filtered data 
  int32_t mx = 0;
    10e2:	2200      	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    10e4:	f851 3f04 	ldr.w	r3, [r1, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    10e8:	2b00      	cmp	r3, #0
    10ea:	bfb8      	it	lt
    10ec:	425b      	neglt	r3, r3
    10ee:	429a      	cmp	r2, r3
    10f0:	bfb8      	it	lt
    10f2:	461a      	movlt	r2, r3
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    10f4:	4281      	cmp	r1, r0
    10f6:	d1f5      	bne.n	10e4 <compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    10f8:	2702      	movs	r7, #2
    10fa:	2001      	movs	r0, #1
    10fc:	e003      	b.n	1106 <compress(void*)+0x6a>
    10fe:	3701      	adds	r7, #1
    1100:	2f18      	cmp	r7, #24
    1102:	f000 810f 	beq.w	1324 <compress(void*)+0x288>
    1106:	1e79      	subs	r1, r7, #1
    1108:	fa00 f301 	lsl.w	r3, r0, r1
    110c:	4293      	cmp	r3, r2
    110e:	ddf6      	ble.n	10fe <compress(void*)+0x62>
  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }

  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    1110:	ea4f 0887 	mov.w	r8, r7, lsl #2
  uint32_t msk = (1 << nb) - 1;
    1114:	40b8      	lsls	r0, r7
  int ndat = NH + NCHAN_ACQ + ncmp;
    1116:	f108 0307 	add.w	r3, r8, #7
  uint32_t msk = (1 << nb) - 1;
    111a:	3801      	subs	r0, #1
  int ndat = NH + NCHAN_ACQ + ncmp;
    111c:	9301      	str	r3, [sp, #4]
  *iptr++ = 0xA5A5A5A5;
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    111e:	f108 0301 	add.w	r3, r8, #1
  ndat= ((ndat>>1) + 1)<<1;
    1122:	f108 0808 	add.w	r8, r8, #8
  proc_stat[nb-1]++;
    1126:	4c85      	ldr	r4, [pc, #532]	; (133c <compress(void*)+0x2a0>)
  if((uint32_t)nb>max_stat) max_stat=nb;
    1128:	4d85      	ldr	r5, [pc, #532]	; (1340 <compress(void*)+0x2a4>)
  proc_stat[nb-1]++;
    112a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
    112e:	3201      	adds	r2, #1
    1130:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    1134:	682a      	ldr	r2, [r5, #0]
    1136:	4c83      	ldr	r4, [pc, #524]	; (1344 <compress(void*)+0x2a8>)
    1138:	42ba      	cmp	r2, r7
    113a:	f504 76fe 	add.w	r6, r4, #508	; 0x1fc
    113e:	46a3      	mov	fp, r4
    1140:	4622      	mov	r2, r4
    1142:	bf38      	it	cc
    1144:	602f      	strcc	r7, [r5, #0]
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    1146:	f852 1f04 	ldr.w	r1, [r2, #4]!
    114a:	4001      	ands	r1, r0
    114c:	42b2      	cmp	r2, r6
    114e:	6011      	str	r1, [r2, #0]
    1150:	d1f9      	bne.n	1146 <compress(void*)+0xaa>
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    1152:	4d7d      	ldr	r5, [pc, #500]	; (1348 <compress(void*)+0x2ac>)
    1154:	f44f 7200 	mov.w	r2, #512	; 0x200
    1158:	2100      	movs	r1, #0
    115a:	9300      	str	r3, [sp, #0]
    115c:	4628      	mov	r0, r5
    115e:	f011 f967 	bl	12430 <memset>
  *iptr++ = nb | shift<<16;
    1162:	4a7a      	ldr	r2, [pc, #488]	; (134c <compress(void*)+0x2b0>)
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    1164:	9b00      	ldr	r3, [sp, #0]
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1166:	2100      	movs	r1, #0
  *iptr++ = nb | shift<<16;
    1168:	8812      	ldrh	r2, [r2, #0]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    116a:	f04f 0c20 	mov.w	ip, #32
  outData[kk++] = tempData[0]; tempData[0] = 0;
    116e:	2007      	movs	r0, #7
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    1170:	616b      	str	r3, [r5, #20]
  *iptr++ = nb | shift<<16;
    1172:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    1176:	606a      	str	r2, [r5, #4]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    1178:	f8db 2000 	ldr.w	r2, [fp]
    117c:	f8cb 1000 	str.w	r1, [fp]
    1180:	61aa      	str	r2, [r5, #24]
  *iptr++ = 0xA5A5A5A5;
    1182:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    1186:	602a      	str	r2, [r5, #0]
  *iptr++ = NCHAN_ACQ;
    1188:	2201      	movs	r2, #1
  *iptr++ = t1;
    118a:	e9c5 a902 	strd	sl, r9, [r5, #8]
  *iptr++ = NCHAN_ACQ;
    118e:	612a      	str	r2, [r5, #16]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    1190:	e00a      	b.n	11a8 <compress(void*)+0x10c>
  {   nx -= nb;
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    1192:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
    1196:	4694      	mov	ip, r2
    1198:	ea41 010e 	orr.w	r1, r1, lr
    119c:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11a0:	42a6      	cmp	r6, r4
    11a2:	d018      	beq.n	11d6 <compress(void*)+0x13a>
      {   outData[kk] |= (tempData[ii] << nx);
    11a4:	f854 1f04 	ldr.w	r1, [r4, #4]!
  {   nx -= nb;
    11a8:	ebac 0207 	sub.w	r2, ip, r7
      if(nx > 0)
    11ac:	2a00      	cmp	r2, #0
      {   outData[kk] |= (tempData[ii] << nx);
    11ae:	fa01 fe02 	lsl.w	lr, r1, r2
      if(nx > 0)
    11b2:	dcee      	bgt.n	1192 <compress(void*)+0xf6>
      else if(nx==0) 
      {   outData[kk++] |= tempData[ii];
          nx=MBIT;
      } 
      else    // nx is < 0
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    11b4:	eba7 0e0c 	sub.w	lr, r7, ip
    11b8:	f100 0901 	add.w	r9, r0, #1
          nx += MBIT;
    11bc:	f102 0c20 	add.w	ip, r2, #32
      {   outData[kk++] |= tempData[ii];
    11c0:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
      else if(nx==0) 
    11c4:	d12f      	bne.n	1226 <compress(void*)+0x18a>
      {   outData[kk++] |= tempData[ii];
    11c6:	430a      	orrs	r2, r1
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11c8:	42a6      	cmp	r6, r4
          nx=MBIT;
    11ca:	f04f 0c20 	mov.w	ip, #32
      {   outData[kk++] |= tempData[ii];
    11ce:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    11d2:	4648      	mov	r0, r9
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    11d4:	d1e6      	bne.n	11a4 <compress(void*)+0x108>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    11d6:	4e5e      	ldr	r6, [pc, #376]	; (1350 <compress(void*)+0x2b4>)
    11d8:	6834      	ldr	r4, [r6, #0]
    11da:	eb04 0208 	add.w	r2, r4, r8
    11de:	2a80      	cmp	r2, #128	; 0x80
    11e0:	dc2d      	bgt.n	123e <compress(void*)+0x1a2>
    11e2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    11e6:	4a5b      	ldr	r2, [pc, #364]	; (1354 <compress(void*)+0x2b8>)
    11e8:	4857      	ldr	r0, [pc, #348]	; (1348 <compress(void*)+0x2ac>)
    11ea:	f04f 31a5 	mov.w	r1, #2779096485	; 0xa5a5a5a5
    11ee:	4423      	add	r3, r4
    11f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    11f4:	2300      	movs	r3, #0
    11f6:	e001      	b.n	11fc <compress(void*)+0x160>
    11f8:	f850 1f04 	ldr.w	r1, [r0, #4]!
    11fc:	3301      	adds	r3, #1
    11fe:	f842 1f04 	str.w	r1, [r2, #4]!
    1202:	4543      	cmp	r3, r8
    1204:	dbf8      	blt.n	11f8 <compress(void*)+0x15c>
    1206:	f1b8 0f00 	cmp.w	r8, #0
    120a:	f108 33ff 	add.w	r3, r8, #4294967295
    120e:	f104 0401 	add.w	r4, r4, #1
  int ret=1;
    1212:	f04f 0701 	mov.w	r7, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1216:	bfd8      	it	le
    1218:	2300      	movle	r3, #0
    121a:	4423      	add	r3, r4
    121c:	6033      	str	r3, [r6, #0]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    121e:	4638      	mov	r0, r7
    1220:	b003      	add	sp, #12
    1222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    1226:	fa21 fe0e 	lsr.w	lr, r1, lr
          outData[kk] = (tempData[ii] << nx);
    122a:	fa01 f10c 	lsl.w	r1, r1, ip
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    122e:	ea4e 0202 	orr.w	r2, lr, r2
    1232:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
    1236:	4648      	mov	r0, r9
          outData[kk] = (tempData[ii] << nx);
    1238:	f845 1029 	str.w	r1, [r5, r9, lsl #2]
    123c:	e7b0      	b.n	11a0 <compress(void*)+0x104>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    123e:	2c7a      	cmp	r4, #122	; 0x7a
    1240:	dd22      	ble.n	1288 <compress(void*)+0x1ec>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    1242:	2c7f      	cmp	r4, #127	; 0x7f
    1244:	dc0a      	bgt.n	125c <compress(void*)+0x1c0>
    1246:	f1c4 0280 	rsb	r2, r4, #128	; 0x80
    124a:	4842      	ldr	r0, [pc, #264]	; (1354 <compress(void*)+0x2b8>)
    124c:	2100      	movs	r1, #0
    124e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1252:	0092      	lsls	r2, r2, #2
    1254:	f011 f8ec 	bl	12430 <memset>
    1258:	2380      	movs	r3, #128	; 0x80
    125a:	6033      	str	r3, [r6, #0]
      if(!pushData(dout)) ret = 0;
    125c:	483d      	ldr	r0, [pc, #244]	; (1354 <compress(void*)+0x2b8>)
    125e:	f003 fbad 	bl	49bc <pushData(unsigned long*)>
    1262:	1e07      	subs	r7, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    1264:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1268:	4937      	ldr	r1, [pc, #220]	; (1348 <compress(void*)+0x2ac>)
      if(!pushData(dout)) ret = 0;
    126a:	bf18      	it	ne
    126c:	2701      	movne	r7, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    126e:	f1b8 0f00 	cmp.w	r8, #0
    1272:	4838      	ldr	r0, [pc, #224]	; (1354 <compress(void*)+0x2b8>)
    1274:	bfd8      	it	le
    1276:	2204      	movle	r2, #4
    1278:	f00d f84c 	bl	e314 <memcpy>
}
    127c:	4638      	mov	r0, r7
    127e:	f8c6 8000 	str.w	r8, [r6]
    1282:	b003      	add	sp, #12
    1284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    1288:	f1c4 027a 	rsb	r2, r4, #122	; 0x7a
    128c:	4831      	ldr	r0, [pc, #196]	; (1354 <compress(void*)+0x2b8>)
    128e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    1292:	f04f 32a5 	mov.w	r2, #2779096485	; 0xa5a5a5a5
    1296:	616b      	str	r3, [r5, #20]
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    1298:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    129c:	4d2a      	ldr	r5, [pc, #168]	; (1348 <compress(void*)+0x2ac>)
    129e:	4423      	add	r3, r4
    12a0:	4629      	mov	r1, r5
    12a2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    12a6:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    12aa:	e001      	b.n	12b0 <compress(void*)+0x214>
    12ac:	f851 2f04 	ldr.w	r2, [r1, #4]!
    12b0:	f843 2f04 	str.w	r2, [r3, #4]!
    12b4:	4298      	cmp	r0, r3
    12b6:	d1f9      	bne.n	12ac <compress(void*)+0x210>
    12b8:	2380      	movs	r3, #128	; 0x80
      if(!pushData(dout)) ret = 0;
    12ba:	4826      	ldr	r0, [pc, #152]	; (1354 <compress(void*)+0x2b8>)
    12bc:	f1c4 0980 	rsb	r9, r4, #128	; 0x80
    12c0:	6033      	str	r3, [r6, #0]
    12c2:	f003 fb7b 	bl	49bc <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12c6:	6969      	ldr	r1, [r5, #20]
      if(!pushData(dout)) ret = 0;
    12c8:	1e07      	subs	r7, r0, #0
      nr=ndat0-ii; // for header
    12ca:	9b01      	ldr	r3, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12cc:	4a22      	ldr	r2, [pc, #136]	; (1358 <compress(void*)+0x2bc>)
      if(!pushData(dout)) ret = 0;
    12ce:	bf18      	it	ne
    12d0:	2701      	movne	r7, #1
      nr=ndat0-ii; // for header
    12d2:	eba3 0309 	sub.w	r3, r3, r9
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12d6:	f8df e070 	ldr.w	lr, [pc, #112]	; 1348 <compress(void*)+0x2ac>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12da:	400a      	ands	r2, r1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12dc:	f8df c074 	ldr.w	ip, [pc, #116]	; 1354 <compress(void*)+0x2b8>
      while (ii < ndat) dout[nout++] = outData[ii++];
    12e0:	45c1      	cmp	r9, r8
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    12e2:	ea42 0203 	orr.w	r2, r2, r3
    12e6:	f04f 0306 	mov.w	r3, #6
    12ea:	616a      	str	r2, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    12ec:	6033      	str	r3, [r6, #0]
    12ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    12f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    12f6:	e89e 0003 	ldmia.w	lr, {r0, r1}
    12fa:	e88c 0003 	stmia.w	ip, {r0, r1}
      while (ii < ndat) dout[nout++] = outData[ii++];
    12fe:	da8e      	bge.n	121e <compress(void*)+0x182>
    1300:	f1a4 0280 	sub.w	r2, r4, #128	; 0x80
    1304:	eb05 0189 	add.w	r1, r5, r9, lsl #2
    1308:	f10c 0008 	add.w	r0, ip, #8
    130c:	4442      	add	r2, r8
    130e:	0092      	lsls	r2, r2, #2
    1310:	f00d f800 	bl	e314 <memcpy>
    1314:	f1a4 037a 	sub.w	r3, r4, #122	; 0x7a
}
    1318:	4638      	mov	r0, r7
      while (ii < ndat) dout[nout++] = outData[ii++];
    131a:	4443      	add	r3, r8
    131c:	6033      	str	r3, [r6, #0]
}
    131e:	b003      	add	sp, #12
    1320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1324:	2267      	movs	r2, #103	; 0x67
    1326:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    132a:	f04f 0868 	mov.w	r8, #104	; 0x68
    132e:	2361      	movs	r3, #97	; 0x61
    1330:	2117      	movs	r1, #23
    1332:	9201      	str	r2, [sp, #4]
    1334:	e6f7      	b.n	1126 <compress(void*)+0x8a>
    1336:	bf00      	nop
    1338:	20009538 	.word	0x20009538
    133c:	200193a4 	.word	0x200193a4
    1340:	20019378 	.word	0x20019378
    1344:	20018ad4 	.word	0x20018ad4
    1348:	20018684 	.word	0x20018684
    134c:	20009556 	.word	0x20009556
    1350:	20018d28 	.word	0x20018d28
    1354:	200183e4 	.word	0x200183e4
    1358:	ffff0000 	.word	0xffff0000

0000135c <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    135c:	b570      	push	{r4, r5, r6, lr}
    135e:	b082      	sub	sp, #8
    1360:	4606      	mov	r6, r0
    1362:	4614      	mov	r4, r2
    1364:	460d      	mov	r5, r1
    datetime_t t;
    rtc_get_datetime(&t);
    1366:	4668      	mov	r0, sp
    1368:	f003 fcfa 	bl	4d60 <rtc_get_datetime(datetime_t*)>

    *date = FS_DATE(t.year,t.month,t.day);
    136c:	f89d 2002 	ldrb.w	r2, [sp, #2]
    1370:	f89d c003 	ldrb.w	ip, [sp, #3]
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    1374:	f8bd 3000 	ldrh.w	r3, [sp]
  return year > 127 || month > 12 || day > 31 ? 0 :
    1378:	2a0c      	cmp	r2, #12
    137a:	bf98      	it	ls
    137c:	f1bc 0f1f 	cmpls.w	ip, #31
    1380:	d804      	bhi.n	138c <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x30>
    1382:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
    1386:	b29b      	uxth	r3, r3
    1388:	2b7f      	cmp	r3, #127	; 0x7f
    138a:	d920      	bls.n	13ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x72>
         year << 9 | month << 5 | day;
    138c:	f04f 0c00 	mov.w	ip, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    1390:	f89d 2005 	ldrb.w	r2, [sp, #5]
    1394:	f89d 3006 	ldrb.w	r3, [sp, #6]
    1398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 * \param[in] second [0,59]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    139c:	2a17      	cmp	r2, #23
    139e:	bf98      	it	ls
    13a0:	2b3b      	cmpls	r3, #59	; 0x3b
    *date = FS_DATE(t.year,t.month,t.day);
    13a2:	f8a6 c000 	strh.w	ip, [r6]
    13a6:	d801      	bhi.n	13ac <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x50>
    13a8:	293b      	cmp	r1, #59	; 0x3b
    13aa:	d905      	bls.n	13b8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x5c>
         hour << 11 | minute << 5 | second >> 1;
    13ac:	2300      	movs	r3, #0
    *ms10 = 0;
    13ae:	2200      	movs	r2, #0
    *time = FS_TIME(t.hour,t.min,t.sec);
    13b0:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13b2:	7022      	strb	r2, [r4, #0]
}
    13b4:	b002      	add	sp, #8
    13b6:	bd70      	pop	{r4, r5, r6, pc}
    13b8:	015b      	lsls	r3, r3, #5
    13ba:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    *ms10 = 0;
    13be:	2200      	movs	r2, #0
    13c0:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    13c4:	b29b      	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    13c6:	802b      	strh	r3, [r5, #0]
    *ms10 = 0;
    13c8:	7022      	strb	r2, [r4, #0]
}
    13ca:	b002      	add	sp, #8
    13cc:	bd70      	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    13ce:	ea4c 1c42 	orr.w	ip, ip, r2, lsl #5
    13d2:	ea4c 2c43 	orr.w	ip, ip, r3, lsl #9
    13d6:	fa1f fc8c 	uxth.w	ip, ip
    13da:	e7d9      	b.n	1390 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x34>

000013dc <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
    13dc:	4b04      	ldr	r3, [pc, #16]	; (13f0 <FsFile::~FsFile()+0x14>)
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    13de:	b510      	push	{r4, lr}
    13e0:	4604      	mov	r4, r0
    13e2:	f840 3b10 	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
    13e6:	f009 fa2b 	bl	a840 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    13ea:	4620      	mov	r0, r4
    13ec:	bd10      	pop	{r4, pc}
    13ee:	bf00      	nop
    13f0:	20000c50 	.word	0x20000c50

000013f4 <checkEndOfFile(short) [clone .part.0]>:

    header[127]=0x55555555;
    return 1;
}

int16_t checkEndOfFile(int16_t state)
    13f4:	b510      	push	{r4, lr}
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
  {
    uint32_t tt = rtc_get();
    13f6:	f00d fa01 	bl	e7fc <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    13fa:	4b10      	ldr	r3, [pc, #64]	; (143c <checkEndOfFile(short) [clone .part.0]+0x48>)
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    13fc:	4a10      	ldr	r2, [pc, #64]	; (1440 <checkEndOfFile(short) [clone .part.0]+0x4c>)
    uint32_t dt1 = tt % t_acq;
    13fe:	6819      	ldr	r1, [r3, #0]
    1400:	fbb0 f3f1 	udiv	r3, r0, r1
    1404:	fb01 0313 	mls	r3, r1, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    1408:	6811      	ldr	r1, [r2, #0]
    140a:	428b      	cmp	r3, r1
    140c:	d213      	bcs.n	1436 <checkEndOfFile(short) [clone .part.0]+0x42>
    dta = dt1;
    140e:	6013      	str	r3, [r2, #0]
    //
    if(state == DOCLOSE)                // in case of DOCLOSE
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    1410:	490c      	ldr	r1, [pc, #48]	; (1444 <checkEndOfFile(short) [clone .part.0]+0x50>)
    1412:	4b0d      	ldr	r3, [pc, #52]	; (1448 <checkEndOfFile(short) [clone .part.0]+0x54>)
    1414:	680c      	ldr	r4, [r1, #0]
    1416:	681a      	ldr	r2, [r3, #0]
    1418:	4294      	cmp	r4, r2
    141a:	d90a      	bls.n	1432 <checkEndOfFile(short) [clone .part.0]+0x3e>
    {
      uint32_t dt2 = (tt % t_rep);
    141c:	680a      	ldr	r2, [r1, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    141e:	681b      	ldr	r3, [r3, #0]
      uint32_t dt2 = (tt % t_rep);
    1420:	fbb0 f1f2 	udiv	r1, r0, r2
    1424:	fb02 0011 	mls	r0, r2, r1, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    1428:	4298      	cmp	r0, r3
    142a:	bf34      	ite	cc
    142c:	2003      	movcc	r0, #3
    142e:	2004      	movcs	r0, #4
    }
  }
  return state;

}
    1430:	bd10      	pop	{r4, pc}
    1432:	2003      	movs	r0, #3
    1434:	bd10      	pop	{r4, pc}
    dta = dt1;
    1436:	2002      	movs	r0, #2
    1438:	6013      	str	r3, [r2, #0]
}
    143a:	bd10      	pop	{r4, pc}
    143c:	20009530 	.word	0x20009530
    1440:	20018d1c 	.word	0x20018d1c
    1444:	20019b98 	.word	0x20019b98
    1448:	20009534 	.word	0x20009534

0000144c <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    144c:	b538      	push	{r3, r4, r5, lr}
    144e:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1450:	b149      	cbz	r1, 1466 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    1452:	4608      	mov	r0, r1
    1454:	460d      	mov	r5, r1
    1456:	f011 fbd3 	bl	12c00 <strlen>
    145a:	6823      	ldr	r3, [r4, #0]
    145c:	4602      	mov	r2, r0
    145e:	4629      	mov	r1, r5
    1460:	685b      	ldr	r3, [r3, #4]
    1462:	4620      	mov	r0, r4
    1464:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    1466:	4620      	mov	r0, r4
    1468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    146c:	f00c b94a 	b.w	d704 <Print::println()>

00001470 <timeStamp()>:
{
    1470:	b510      	push	{r4, lr}
    1472:	b086      	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    1474:	4c0d      	ldr	r4, [pc, #52]	; (14ac <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    1476:	a804      	add	r0, sp, #16
    1478:	f003 fc72 	bl	4d60 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    147c:	f99d 2017 	ldrsb.w	r2, [sp, #23]
    1480:	f99d 3016 	ldrsb.w	r3, [sp, #22]
    1484:	f99d 0015 	ldrsb.w	r0, [sp, #21]
    1488:	f99d 1013 	ldrsb.w	r1, [sp, #19]
    148c:	e9cd 3202 	strd	r3, r2, [sp, #8]
    1490:	e9cd 1000 	strd	r1, r0, [sp]
    1494:	f99d 3012 	ldrsb.w	r3, [sp, #18]
    1498:	4620      	mov	r0, r4
    149a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    149e:	4904      	ldr	r1, [pc, #16]	; (14b0 <timeStamp()+0x40>)
    14a0:	f010 fe20 	bl	120e4 <sprintf>
}
    14a4:	4620      	mov	r0, r4
    14a6:	b006      	add	sp, #24
    14a8:	bd10      	pop	{r4, pc}
    14aa:	bf00      	nop
    14ac:	20018d2c 	.word	0x20018d2c
    14b0:	2000086c 	.word	0x2000086c

000014b4 <headerInit(long, long, long, int)>:
  int nbytes=nbits/8;
    14b4:	2a00      	cmp	r2, #0
    14b6:	bfb4      	ite	lt
    14b8:	f102 0c07 	addlt.w	ip, r2, #7
    14bc:	4694      	movge	ip, r2
{
    14be:	b530      	push	{r4, r5, lr}
  int nbytes=nbits/8;
    14c0:	ea4f 0cec 	mov.w	ip, ip, asr #3
  memcpy(wav_hdr.rId,"RIFF",4);
    14c4:	4c32      	ldr	r4, [pc, #200]	; (1590 <headerInit(long, long, long, int)+0xdc>)
{
    14c6:	b083      	sub	sp, #12
  wav_hdr.nChannels=nchan;
    14c8:	fa1f fe81 	uxth.w	lr, r1
  wav_hdr.nSamplesPerSec=fsamp;
    14cc:	61a0      	str	r0, [r4, #24]
    14ce:	9301      	str	r3, [sp, #4]
  wav_hdr.nChannels=nchan;
    14d0:	f8a4 e016 	strh.w	lr, [r4, #22]
  wav_hdr.nBlockAlign=nchan*nbytes;
    14d4:	fb1c fe0e 	smulbb	lr, ip, lr
  strcpy(&wav_hdr.info[0], MAGIC);
    14d8:	4b2e      	ldr	r3, [pc, #184]	; (1594 <headerInit(long, long, long, int)+0xe0>)
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14da:	fb00 fc0c 	mul.w	ip, r0, ip
  wav_hdr.nBlockAlign=nchan*nbytes;
    14de:	f8a4 e020 	strh.w	lr, [r4, #32]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14e2:	fb01 f50c 	mul.w	r5, r1, ip
  wav_hdr.nBitsPerSamples=nbits;
    14e6:	8462      	strh	r2, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    14e8:	61e5      	str	r5, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    14ea:	e893 0003 	ldmia.w	r3, {r0, r1}
    14ee:	4b2a      	ldr	r3, [pc, #168]	; (1598 <headerInit(long, long, long, int)+0xe4>)
    14f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  memcpy(wav_hdr.rId,"RIFF",4);
    14f4:	4929      	ldr	r1, [pc, #164]	; (159c <headerInit(long, long, long, int)+0xe8>)
    14f6:	681d      	ldr	r5, [r3, #0]
    14f8:	6021      	str	r1, [r4, #0]
  memcpy(wav_hdr.fId,"fmt ",4);
    14fa:	4929      	ldr	r1, [pc, #164]	; (15a0 <headerInit(long, long, long, int)+0xec>)
  memcpy(wav_hdr.wId,"WAVE",4);
    14fc:	4b29      	ldr	r3, [pc, #164]	; (15a4 <headerInit(long, long, long, int)+0xf0>)
  memcpy(wav_hdr.fId,"fmt ",4);
    14fe:	60e1      	str	r1, [r4, #12]
  memcpy(wav_hdr.iId,"info",4);
    1500:	f101 419d 	add.w	r1, r1, #1317011456	; 0x4e800000
  memcpy(wav_hdr.wId,"WAVE",4);
    1504:	60a3      	str	r3, [r4, #8]
  memcpy(wav_hdr.iId,"info",4);
    1506:	f501 01e4 	add.w	r1, r1, #7471104	; 0x720000
  memcpy(wav_hdr.dId,"data",4);
    150a:	4b27      	ldr	r3, [pc, #156]	; (15a8 <headerInit(long, long, long, int)+0xf4>)
  strcpy(&wav_hdr.info[0], MAGIC);
    150c:	62e0      	str	r0, [r4, #44]	; 0x2c
  memcpy(wav_hdr.dId,"data",4);
    150e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    1512:	f201 1103 	addw	r1, r1, #259	; 0x103
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    1516:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    151a:	6261      	str	r1, [r4, #36]	; 0x24
  wav_hdr.fLen = 0x10;
    151c:	2110      	movs	r1, #16
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    151e:	6063      	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    1520:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
  wav_hdr.fLen = 0x10;
    1524:	6121      	str	r1, [r4, #16]
  wav_hdr.dLen = 0; // will be updated at closing
    1526:	2100      	movs	r1, #0
  wav_hdr.iLen = 512 - 13*4;
    1528:	62a3      	str	r3, [r4, #40]	; 0x28
  wav_hdr.nFormatTag=1;
    152a:	2301      	movs	r3, #1
  wav_hdr.dLen = 0; // will be updated at closing
    152c:	f8c4 11fc 	str.w	r1, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    1530:	82a3      	strh	r3, [r4, #20]
  strcpy(&wav_hdr.info[4], timeStamp());
    1532:	f7ff ff9d 	bl	1470 <timeStamp()>
    1536:	4601      	mov	r1, r0
    1538:	f104 0030 	add.w	r0, r4, #48	; 0x30
    153c:	f011 faae 	bl	12a9c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    1540:	9a01      	ldr	r2, [sp, #4]
    1542:	491a      	ldr	r1, [pc, #104]	; (15ac <headerInit(long, long, long, int)+0xf8>)
    1544:	f104 0040 	add.w	r0, r4, #64	; 0x40
    1548:	f010 fdcc 	bl	120e4 <sprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    154c:	64e5      	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    154e:	f003 fa1d 	bl	498c <getStore()>
    1552:	4686      	mov	lr, r0
    1554:	f104 0c50 	add.w	ip, r4, #80	; 0x50
    1558:	6800      	ldr	r0, [r0, #0]
    155a:	f8de 1004 	ldr.w	r1, [lr, #4]
    155e:	f8de 2008 	ldr.w	r2, [lr, #8]
    1562:	f8de 300c 	ldr.w	r3, [lr, #12]
    1566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    156a:	f8de 0010 	ldr.w	r0, [lr, #16]
    156e:	f8de 1014 	ldr.w	r1, [lr, #20]
    1572:	f8de 301c 	ldr.w	r3, [lr, #28]
    1576:	f8de 2018 	ldr.w	r2, [lr, #24]
    157a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  strcpy(&wav_hdr.info[68]," end");
    157e:	4b0c      	ldr	r3, [pc, #48]	; (15b0 <headerInit(long, long, long, int)+0xfc>)
    1580:	e893 0003 	ldmia.w	r3, {r0, r1}
    1584:	6720      	str	r0, [r4, #112]	; 0x70
}
    1586:	4620      	mov	r0, r4
  strcpy(&wav_hdr.info[68]," end");
    1588:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
}
    158c:	b003      	add	sp, #12
    158e:	bd30      	pop	{r4, r5, pc}
    1590:	20018884 	.word	0x20018884
    1594:	20000418 	.word	0x20000418
    1598:	20019b88 	.word	0x20019b88
    159c:	46464952 	.word	0x46464952
    15a0:	20746d66 	.word	0x20746d66
    15a4:	45564157 	.word	0x45564157
    15a8:	61746164 	.word	0x61746164
    15ac:	20000420 	.word	0x20000420
    15b0:	20000428 	.word	0x20000428

000015b4 <writeHeader(char*)>:
{ 
    15b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_fFile ? m_fFile->curPosition() :
    15b8:	4c21      	ldr	r4, [pc, #132]	; (1640 <writeHeader(char*)+0x8c>)
    15ba:	4607      	mov	r7, r0
    15bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    15be:	b373      	cbz	r3, 161e <writeHeader(char*)+0x6a>
    15c0:	695e      	ldr	r6, [r3, #20]
    15c2:	2500      	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    15c4:	4632      	mov	r2, r6
    15c6:	462b      	mov	r3, r5
    15c8:	491e      	ldr	r1, [pc, #120]	; (1644 <writeHeader(char*)+0x90>)
    15ca:	481f      	ldr	r0, [pc, #124]	; (1648 <writeHeader(char*)+0x94>)
    15cc:	f00c f8b6 	bl	d73c <Print::printf(char const*, ...)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    15d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15d2:	b1e0      	cbz	r0, 160e <writeHeader(char*)+0x5a>
    15d4:	2100      	movs	r1, #0
    15d6:	f007 fe01 	bl	91dc <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    15da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15dc:	b170      	cbz	r0, 15fc <writeHeader(char*)+0x48>
    15de:	4639      	mov	r1, r7
    15e0:	f44f 7200 	mov.w	r2, #512	; 0x200
    15e4:	f007 ff30 	bl	9448 <FatFile::write(void const*, unsigned int)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    15e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    15ea:	b1e8      	cbz	r0, 1628 <writeHeader(char*)+0x74>
    15ec:	b10d      	cbz	r5, 15f2 <writeHeader(char*)+0x3e>
}
    15ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15f2:	4631      	mov	r1, r6
    15f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    15f8:	f007 bdf0 	b.w	91dc <FatFile::seekSet(unsigned long)>
    15fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    15fe:	2800      	cmp	r0, #0
    1600:	d0f5      	beq.n	15ee <writeHeader(char*)+0x3a>
    1602:	4639      	mov	r1, r7
    1604:	f44f 7200 	mov.w	r2, #512	; 0x200
    1608:	f006 fc0e 	bl	7e28 <ExFatFile::write(void const*, unsigned int)>
    160c:	e7ec      	b.n	15e8 <writeHeader(char*)+0x34>
    160e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    1610:	2800      	cmp	r0, #0
    1612:	d0ec      	beq.n	15ee <writeHeader(char*)+0x3a>
    1614:	2200      	movs	r2, #0
    1616:	2300      	movs	r3, #0
    1618:	f005 fdd6 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    161c:	e7dd      	b.n	15da <writeHeader(char*)+0x26>
    161e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    1620:	b15b      	cbz	r3, 163a <writeHeader(char*)+0x86>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
    1622:	e9d3 6500 	ldrd	r6, r5, [r3]
    1626:	e7cd      	b.n	15c4 <writeHeader(char*)+0x10>
    1628:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
           m_xFile ? m_xFile->seekSet(pos) : false;
    162a:	2800      	cmp	r0, #0
    162c:	d0df      	beq.n	15ee <writeHeader(char*)+0x3a>
    162e:	4632      	mov	r2, r6
    1630:	462b      	mov	r3, r5
    1632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1636:	f005 bdc7 	b.w	71c8 <ExFatFile::seekSet(unsigned long long)>
           m_xFile ? m_xFile->curPosition() : 0;
    163a:	461e      	mov	r6, r3
    163c:	461d      	mov	r5, r3
    163e:	e7c1      	b.n	15c4 <writeHeader(char*)+0x10>
    1640:	20019304 	.word	0x20019304
    1644:	200004f8 	.word	0x200004f8
    1648:	20008b94 	.word	0x20008b94

0000164c <makeHeader(long*)>:
{
    164c:	b530      	push	{r4, r5, lr}
    164e:	b089      	sub	sp, #36	; 0x24
    1650:	4604      	mov	r4, r0
    rtc_get_datetime(&t);
    1652:	a806      	add	r0, sp, #24
    1654:	f003 fb84 	bl	4d60 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    1658:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    165c:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1660:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    1664:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    1668:	e9cd 3003 	strd	r3, r0, [sp, #12]
    166c:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1670:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    1674:	9000      	str	r0, [sp, #0]
    1676:	4620      	mov	r0, r4
    1678:	e9cd 2101 	strd	r2, r1, [sp, #4]
    167c:	4a17      	ldr	r2, [pc, #92]	; (16dc <makeHeader(long*)+0x90>)
    167e:	4918      	ldr	r1, [pc, #96]	; (16e0 <makeHeader(long*)+0x94>)
    1680:	f010 fd30 	bl	120e4 <sprintf>
    header[7] = fsamp;
    1684:	4917      	ldr	r1, [pc, #92]	; (16e4 <makeHeader(long*)+0x98>)
    header[9] = t_acq;
    1686:	4b18      	ldr	r3, [pc, #96]	; (16e8 <makeHeader(long*)+0x9c>)
    header[7] = fsamp;
    1688:	680d      	ldr	r5, [r1, #0]
    header[10] = t_on;
    168a:	4818      	ldr	r0, [pc, #96]	; (16ec <makeHeader(long*)+0xa0>)
    header[9] = t_acq;
    168c:	681b      	ldr	r3, [r3, #0]
    header[11] = t_rep;
    168e:	4a18      	ldr	r2, [pc, #96]	; (16f0 <makeHeader(long*)+0xa4>)
    header[10] = t_on;
    1690:	6800      	ldr	r0, [r0, #0]
    header[9] = t_acq;
    1692:	6263      	str	r3, [r4, #36]	; 0x24
    header[11] = t_rep;
    1694:	6812      	ldr	r2, [r2, #0]
    header[6] = SerNum;      // serial number
    1696:	4917      	ldr	r1, [pc, #92]	; (16f4 <makeHeader(long*)+0xa8>)
    header[12] = proc;
    1698:	4b17      	ldr	r3, [pc, #92]	; (16f8 <makeHeader(long*)+0xac>)
    header[6] = SerNum;      // serial number
    169a:	6809      	ldr	r1, [r1, #0]
    header[12] = proc;
    169c:	881b      	ldrh	r3, [r3, #0]
    header[11] = t_rep;
    169e:	62e2      	str	r2, [r4, #44]	; 0x2c
    header[13] = shift;
    16a0:	4a16      	ldr	r2, [pc, #88]	; (16fc <makeHeader(long*)+0xb0>)
    header[12] = proc;
    16a2:	b21b      	sxth	r3, r3
    header[6] = SerNum;      // serial number
    16a4:	61a1      	str	r1, [r4, #24]
    header[13] = shift;
    16a6:	8812      	ldrh	r2, [r2, #0]
    header[14] = again;
    16a8:	4915      	ldr	r1, [pc, #84]	; (1700 <makeHeader(long*)+0xb4>)
    header[13] = shift;
    16aa:	b212      	sxth	r2, r2
    header[12] = proc;
    16ac:	6323      	str	r3, [r4, #48]	; 0x30
    header[14] = again;
    16ae:	880b      	ldrh	r3, [r1, #0]
    header[13] = shift;
    16b0:	6362      	str	r2, [r4, #52]	; 0x34
    header[14] = again;
    16b2:	b21b      	sxth	r3, r3
    header[15] = dgain;
    16b4:	4913      	ldr	r1, [pc, #76]	; (1704 <makeHeader(long*)+0xb8>)
    16b6:	4a14      	ldr	r2, [pc, #80]	; (1708 <makeHeader(long*)+0xbc>)
    header[14] = again;
    16b8:	63a3      	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    16ba:	880b      	ldrh	r3, [r1, #0]
    16bc:	6812      	ldr	r2, [r2, #0]
    16be:	b21b      	sxth	r3, r3
    header[7] = fsamp;
    16c0:	61e5      	str	r5, [r4, #28]
    header[10] = t_on;
    16c2:	62a0      	str	r0, [r4, #40]	; 0x28
    header[5] = 20;          // SW version
    16c4:	2514      	movs	r5, #20
    header[8] = NCHAN_ACQ;
    16c6:	2001      	movs	r0, #1
    header[16] = millis();
    16c8:	6422      	str	r2, [r4, #64]	; 0x40
    header[127]=0x55555555;
    16ca:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    header[5] = 20;          // SW version
    16ce:	6165      	str	r5, [r4, #20]
    header[8] = NCHAN_ACQ;
    16d0:	6220      	str	r0, [r4, #32]
    header[15] = dgain;
    16d2:	63e3      	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    16d4:	f8c4 21fc 	str.w	r2, [r4, #508]	; 0x1fc
}
    16d8:	b009      	add	sp, #36	; 0x24
    16da:	bd30      	pop	{r4, r5, pc}
    16dc:	20000418 	.word	0x20000418
    16e0:	20000430 	.word	0x20000430
    16e4:	20009514 	.word	0x20009514
    16e8:	20009530 	.word	0x20009530
    16ec:	20009534 	.word	0x20009534
    16f0:	20019b98 	.word	0x20019b98
    16f4:	2000c1c8 	.word	0x2000c1c8
    16f8:	20009554 	.word	0x20009554
    16fc:	20009556 	.word	0x20009556
    1700:	20009552 	.word	0x20009552
    1704:	20019bb8 	.word	0x20019bb8
    1708:	20019b88 	.word	0x20019b88

0000170c <newDirectory(char*)>:
  d0=d;
  return 1;
}

int16_t newDirectory(char *dirName)
{   
    170c:	b530      	push	{r4, r5, lr}
    170e:	b087      	sub	sp, #28
    1710:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    1712:	a804      	add	r0, sp, #16
    1714:	f003 fb24 	bl	4d60 <rtc_get_datetime(datetime_t*)>
  if(d==d0) return 0; // same day
    1718:	4915      	ldr	r1, [pc, #84]	; (1770 <newDirectory(char*)+0x64>)

    if(HourDir)
    {
      if(newFolder(t.hour))
    171a:	f99d 2015 	ldrsb.w	r2, [sp, #21]
  if(d==d0) return 0; // same day
    171e:	680b      	ldr	r3, [r1, #0]
    1720:	429a      	cmp	r2, r3
    1722:	d022      	beq.n	176a <newDirectory(char*)+0x5e>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    1724:	f99d 0012 	ldrsb.w	r0, [sp, #18]
    1728:	f99d 5013 	ldrsb.w	r5, [sp, #19]
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <newDirectory(char*)+0x68>)
    172e:	e9cd 5202 	strd	r5, r2, [sp, #8]
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	9001      	str	r0, [sp, #4]
    1736:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
  d0=d;
    173a:	600a      	str	r2, [r1, #0]
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    173c:	4a0e      	ldr	r2, [pc, #56]	; (1778 <newDirectory(char*)+0x6c>)
    173e:	490f      	ldr	r1, [pc, #60]	; (177c <newDirectory(char*)+0x70>)
    1740:	9000      	str	r0, [sp, #0]
    1742:	4620      	mov	r0, r4
    1744:	f010 fcce 	bl	120e4 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    1748:	480d      	ldr	r0, [pc, #52]	; (1780 <newDirectory(char*)+0x74>)
    174a:	f00b ffdb 	bl	d704 <Print::println()>
    174e:	2102      	movs	r1, #2
    1750:	480c      	ldr	r0, [pc, #48]	; (1784 <newDirectory(char*)+0x78>)
    1752:	f00e fb5f 	bl	fe14 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    1756:	4620      	mov	r0, r4
    1758:	f011 fa52 	bl	12c00 <strlen>
    175c:	4601      	mov	r1, r0
    175e:	4620      	mov	r0, r4
    1760:	f00e fb58 	bl	fe14 <usb_serial_write>
          return 1;   // have new directory
    1764:	2001      	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    1766:	b007      	add	sp, #28
    1768:	bd30      	pop	{r4, r5, pc}
    return 0;       // keep old directory
    176a:	2000      	movs	r0, #0
}
    176c:	b007      	add	sp, #28
    176e:	bd30      	pop	{r4, r5, pc}
    1770:	20008f64 	.word	0x20008f64
    1774:	2000c1c8 	.word	0x2000c1c8
    1778:	20000504 	.word	0x20000504
    177c:	20000508 	.word	0x20000508
    1780:	20008b94 	.word	0x20008b94
    1784:	20000804 	.word	0x20000804

00001788 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    1788:	b510      	push	{r4, lr}
    178a:	b088      	sub	sp, #32
    178c:	4604      	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    178e:	a806      	add	r0, sp, #24
    1790:	f003 fae6 	bl	4d60 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    1794:	4b25      	ldr	r3, [pc, #148]	; (182c <newFileName(char*)+0xa4>)
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1796:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    if(proc==0)
    179a:	881b      	ldrh	r3, [r3, #0]
    179c:	b21b      	sxth	r3, r3
    179e:	bb83      	cbnz	r3, 1802 <newFileName(char*)+0x7a>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    17a0:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    17a4:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    17a8:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    17ac:	e9cd 3003 	strd	r3, r0, [sp, #12]
    17b0:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    17b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    17b8:	9000      	str	r0, [sp, #0]
    17ba:	4620      	mov	r0, r4
    17bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
    17c0:	4a1b      	ldr	r2, [pc, #108]	; (1830 <newFileName(char*)+0xa8>)
    17c2:	491c      	ldr	r1, [pc, #112]	; (1834 <newFileName(char*)+0xac>)
    17c4:	f010 fc8e 	bl	120e4 <sprintf>
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    17c8:	481b      	ldr	r0, [pc, #108]	; (1838 <newFileName(char*)+0xb0>)
    17ca:	f00b ff9b 	bl	d704 <Print::println()>
    17ce:	2102      	movs	r1, #2
    17d0:	481a      	ldr	r0, [pc, #104]	; (183c <newFileName(char*)+0xb4>)
    17d2:	f00e fb1f 	bl	fe14 <usb_serial_write>
    17d6:	4620      	mov	r0, r4
    17d8:	f011 fa12 	bl	12c00 <strlen>
    17dc:	4601      	mov	r1, r0
    17de:	4620      	mov	r0, r4
    17e0:	f00e fb18 	bl	fe14 <usb_serial_write>
    17e4:	2101      	movs	r1, #1
    17e6:	4816      	ldr	r0, [pc, #88]	; (1840 <newFileName(char*)+0xb8>)
    17e8:	f00e fb14 	bl	fe14 <usb_serial_write>
    Serial.print(" "); Serial.print(micros());
    17ec:	f00c fae2 	bl	ddb4 <micros>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    17f0:	2300      	movs	r3, #0
    17f2:	4601      	mov	r1, r0
    17f4:	220a      	movs	r2, #10
    17f6:	4810      	ldr	r0, [pc, #64]	; (1838 <newFileName(char*)+0xb0>)
    17f8:	f00b ffae 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    return 1;
}
    17fc:	2001      	movs	r0, #1
    17fe:	b008      	add	sp, #32
    1800:	bd10      	pop	{r4, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    1802:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    1806:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    180a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
    180e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    1812:	f99d 001a 	ldrsb.w	r0, [sp, #26]
    1816:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    181a:	9000      	str	r0, [sp, #0]
    181c:	4620      	mov	r0, r4
    181e:	e9cd 2101 	strd	r2, r1, [sp, #4]
    1822:	4a03      	ldr	r2, [pc, #12]	; (1830 <newFileName(char*)+0xa8>)
    1824:	4907      	ldr	r1, [pc, #28]	; (1844 <newFileName(char*)+0xbc>)
    1826:	f010 fc5d 	bl	120e4 <sprintf>
    182a:	e7cd      	b.n	17c8 <newFileName(char*)+0x40>
    182c:	20009554 	.word	0x20009554
    1830:	2000048c 	.word	0x2000048c
    1834:	20000490 	.word	0x20000490
    1838:	20008b94 	.word	0x20008b94
    183c:	20000804 	.word	0x20000804
    1840:	20000bd0 	.word	0x20000bd0
    1844:	200004b0 	.word	0x200004b0

00001848 <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1848:	4b2a      	ldr	r3, [pc, #168]	; (18f4 <getAlarmTime(unsigned long)+0xac>)
    184a:	492b      	ldr	r1, [pc, #172]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    184c:	4a2b      	ldr	r2, [pc, #172]	; (18fc <getAlarmTime(unsigned long)+0xb4>)
{   // estimate the wakup-time in seconds 
    184e:	b430      	push	{r4, r5}
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1850:	fba3 4300 	umull	r4, r3, r3, r0
    1854:	0c1b      	lsrs	r3, r3, #16
    1856:	fb01 0313 	mls	r3, r1, r3, r0

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    185a:	4929      	ldr	r1, [pc, #164]	; (1900 <getAlarmTime(unsigned long)+0xb8>)
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    185c:	fba2 2303 	umull	r2, r3, r2, r3
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1860:	680c      	ldr	r4, [r1, #0]
    1862:	ebb4 2fd3 	cmp.w	r4, r3, lsr #11
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    1866:	ea4f 22d3 	mov.w	r2, r3, lsr #11
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    186a:	d80c      	bhi.n	1886 <getAlarmTime(unsigned long)+0x3e>
    186c:	4b25      	ldr	r3, [pc, #148]	; (1904 <getAlarmTime(unsigned long)+0xbc>)
    186e:	681b      	ldr	r3, [r3, #0]
    1870:	4293      	cmp	r3, r2
    1872:	d908      	bls.n	1886 <getAlarmTime(unsigned long)+0x3e>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    1874:	4b24      	ldr	r3, [pc, #144]	; (1908 <getAlarmTime(unsigned long)+0xc0>)
    1876:	681a      	ldr	r2, [r3, #0]
    1878:	681b      	ldr	r3, [r3, #0]
    187a:	fbb0 f2f2 	udiv	r2, r0, r2
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    187e:	bc30      	pop	{r4, r5}
      secs = ((secs/t_rep)+1)*t_rep;
    1880:	fb02 3003 	mla	r0, r2, r3, r3
}
    1884:	4770      	bx	lr
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    1886:	4c21      	ldr	r4, [pc, #132]	; (190c <getAlarmTime(unsigned long)+0xc4>)
    1888:	6823      	ldr	r3, [r4, #0]
    188a:	4293      	cmp	r3, r2
    188c:	d803      	bhi.n	1896 <getAlarmTime(unsigned long)+0x4e>
    188e:	4b20      	ldr	r3, [pc, #128]	; (1910 <getAlarmTime(unsigned long)+0xc8>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	4293      	cmp	r3, r2
    1894:	d8ee      	bhi.n	1874 <getAlarmTime(unsigned long)+0x2c>
    uint32_t dd = secs/(24*3600); // days
    1896:	4b17      	ldr	r3, [pc, #92]	; (18f4 <getAlarmTime(unsigned long)+0xac>)
    1898:	fba3 5300 	umull	r5, r3, r3, r0
    else if (hh<t_1)  // from mid-night to t_1
    189c:	680d      	ldr	r5, [r1, #0]
    189e:	4295      	cmp	r5, r2
    uint32_t dd = secs/(24*3600); // days
    18a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    else if (hh<t_1)  // from mid-night to t_1
    18a4:	d909      	bls.n	18ba <getAlarmTime(unsigned long)+0x72>
      secs = dd*(24*3600) + t_1*3600;
    18a6:	680a      	ldr	r2, [r1, #0]
    18a8:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18ac:	4912      	ldr	r1, [pc, #72]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18ae:	fb00 f202 	mul.w	r2, r0, r2
    18b2:	fb01 2003 	mla	r0, r1, r3, r2
}
    18b6:	bc30      	pop	{r4, r5}
    18b8:	4770      	bx	lr
    else if (hh>=t_2) // between the two recording periods
    18ba:	4d12      	ldr	r5, [pc, #72]	; (1904 <getAlarmTime(unsigned long)+0xbc>)
    18bc:	682d      	ldr	r5, [r5, #0]
    18be:	4295      	cmp	r5, r2
    18c0:	d90e      	bls.n	18e0 <getAlarmTime(unsigned long)+0x98>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    18c2:	4c13      	ldr	r4, [pc, #76]	; (1910 <getAlarmTime(unsigned long)+0xc8>)
    18c4:	6825      	ldr	r5, [r4, #0]
    18c6:	4295      	cmp	r5, r2
    18c8:	d8f5      	bhi.n	18b6 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    18ca:	680a      	ldr	r2, [r1, #0]
    18cc:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18d0:	6824      	ldr	r4, [r4, #0]
    18d2:	4909      	ldr	r1, [pc, #36]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18d4:	1b12      	subs	r2, r2, r4
    18d6:	fb00 1202 	mla	r2, r0, r2, r1
    18da:	fb01 2003 	mla	r0, r1, r3, r2
    18de:	e7ea      	b.n	18b6 <getAlarmTime(unsigned long)+0x6e>
      secs = dd*(24*3600) + t_3*3600;
    18e0:	6822      	ldr	r2, [r4, #0]
    18e2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    18e6:	4904      	ldr	r1, [pc, #16]	; (18f8 <getAlarmTime(unsigned long)+0xb0>)
    18e8:	fb00 f202 	mul.w	r2, r0, r2
}
    18ec:	bc30      	pop	{r4, r5}
      secs = dd*(24*3600) + t_3*3600;
    18ee:	fb01 2003 	mla	r0, r1, r3, r2
}
    18f2:	4770      	bx	lr
    18f4:	c22e4507 	.word	0xc22e4507
    18f8:	00015180 	.word	0x00015180
    18fc:	91a2b3c5 	.word	0x91a2b3c5
    1900:	20019b90 	.word	0x20019b90
    1904:	20009524 	.word	0x20009524
    1908:	20019b98 	.word	0x20019b98
    190c:	20009528 	.word	0x20009528
    1910:	2000952c 	.word	0x2000952c

00001914 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    1914:	4a03      	ldr	r2, [pc, #12]	; (1924 <powerDown()+0x10>)
    1916:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    191c:	6393      	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    191e:	bf30      	wfi
    1920:	e7fd      	b.n	191e <powerDown()+0xa>
    1922:	bf00      	nop
    1924:	400d4000 	.word	0x400d4000

00001928 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    1928:	4a26      	ldr	r2, [pc, #152]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
{
    192a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    192c:	6b97      	ldr	r7, [r2, #56]	; 0x38

    SNVS_LPSR |= 1;
    192e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    1930:	f043 0301 	orr.w	r3, r3, #1
    1934:	64d3      	str	r3, [r2, #76]	; 0x4c
    asm volatile("DSB");
    1936:	f3bf 8f4f 	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    193a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    193c:	f023 0302 	bic.w	r3, r3, #2
    1940:	6393      	str	r3, [r2, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    1942:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1944:	f013 0302 	ands.w	r3, r3, #2
    1948:	d1fb      	bne.n	1942 <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    while (SNVS_LPTAR != 0);
    194a:	491e      	ldr	r1, [pc, #120]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPTAR = 0;
    194c:	6593      	str	r3, [r2, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    194e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
    1950:	2b00      	cmp	r3, #0
    1952:	d1fc      	bne.n	194e <do_hibernate(unsigned long)+0x26>

    __disable_irq();
    1954:	b672      	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    1956:	4c1b      	ldr	r4, [pc, #108]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    1958:	6d26      	ldr	r6, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    195a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    195c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    195e:	6d25      	ldr	r5, [r4, #80]	; 0x50
    1960:	4291      	cmp	r1, r2
    1962:	d1f9      	bne.n	1958 <do_hibernate(unsigned long)+0x30>
    1964:	1bad      	subs	r5, r5, r6
    1966:	bf18      	it	ne
    1968:	2501      	movne	r5, #1
    196a:	2d00      	cmp	r5, #0
    196c:	d1f4      	bne.n	1958 <do_hibernate(unsigned long)+0x30>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    196e:	0bd2      	lsrs	r2, r2, #15
    1970:	462b      	mov	r3, r5
    1972:	4815      	ldr	r0, [pc, #84]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1974:	ea42 4646 	orr.w	r6, r2, r6, lsl #17
    1978:	220a      	movs	r2, #10
    197a:	4631      	mov	r1, r6
    197c:	f00b feec 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
							  return write((const uint8_t *)str, strlen(str)); }
    1980:	2201      	movs	r2, #1
    1982:	4912      	ldr	r1, [pc, #72]	; (19cc <do_hibernate(unsigned long)+0xa4>)
    1984:	4810      	ldr	r0, [pc, #64]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1986:	f00d fd91 	bl	f4ac <usb_serial_class::write(unsigned char const*, unsigned int)>

    //set alarm
    Serial.print(secs); Serial.print(" ");
    secs = getAlarmTime(secs);
    198a:	4630      	mov	r0, r6
    198c:	f7ff ff5c 	bl	1848 <getAlarmTime(unsigned long)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1990:	462b      	mov	r3, r5
    1992:	4605      	mov	r5, r0
    1994:	220a      	movs	r2, #10
    1996:	480c      	ldr	r0, [pc, #48]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    1998:	4629      	mov	r1, r5
    199a:	f00b fedd 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    199e:	480a      	ldr	r0, [pc, #40]	; (19c8 <do_hibernate(unsigned long)+0xa0>)
    19a0:	f00b feb0 	bl	d704 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    19a4:	4a07      	ldr	r2, [pc, #28]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPTAR = secs;
    19a6:	65a5      	str	r5, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    19a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
    19aa:	42ab      	cmp	r3, r5
    19ac:	d1fc      	bne.n	19a8 <do_hibernate(unsigned long)+0x80>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    19ae:	f047 0702 	orr.w	r7, r7, #2
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    19b2:	4904      	ldr	r1, [pc, #16]	; (19c4 <do_hibernate(unsigned long)+0x9c>)
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    19b4:	6397      	str	r7, [r2, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    19b6:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    19b8:	079b      	lsls	r3, r3, #30
    19ba:	d5fc      	bpl.n	19b6 <do_hibernate(unsigned long)+0x8e>

    __enable_irq();
    19bc:	b662      	cpsie	i
  
    //
    powerDown(); 
    19be:	f7ff ffa9 	bl	1914 <powerDown()>
    19c2:	bf00      	nop
    19c4:	400d4000 	.word	0x400d4000
    19c8:	20008b94 	.word	0x20008b94
    19cc:	20000bd0 	.word	0x20000bd0

000019d0 <storeData(short)>:
{
    19d0:	b570      	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    19d2:	4604      	mov	r4, r0
{
    19d4:	b094      	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    19d6:	2800      	cmp	r0, #0
    19d8:	d049      	beq.n	1a6e <storeData(short)+0x9e>
    if(status==OPENED) // file is open: write first record (header)
    19da:	2801      	cmp	r0, #1
    19dc:	d009      	beq.n	19f2 <storeData(short)+0x22>
    if(status==RUNNING) // file is open and header written: store data records
    19de:	2802      	cmp	r0, #2
    19e0:	f000 80e0 	beq.w	1ba4 <storeData(short)+0x1d4>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    19e4:	1ec3      	subs	r3, r0, #3
    19e6:	b29b      	uxth	r3, r3
    19e8:	2b02      	cmp	r3, #2
    19ea:	f240 8115 	bls.w	1c18 <storeData(short)+0x248>
}
    19ee:	b014      	add	sp, #80	; 0x50
    19f0:	bd70      	pop	{r4, r5, r6, pc}
    19f2:	4dac      	ldr	r5, [pc, #688]	; (1ca4 <storeData(short)+0x2d4>)
        if(proc==0)
    19f4:	4bac      	ldr	r3, [pc, #688]	; (1ca8 <storeData(short)+0x2d8>)
    {   nbuf=0;
    19f6:	2200      	movs	r2, #0
    19f8:	4eac      	ldr	r6, [pc, #688]	; (1cac <storeData(short)+0x2dc>)
        if(proc==0)
    19fa:	881b      	ldrh	r3, [r3, #0]
    {   nbuf=0;
    19fc:	6032      	str	r2, [r6, #0]
        if(proc==0)
    19fe:	b21b      	sxth	r3, r3
    1a00:	2b00      	cmp	r3, #0
    1a02:	f040 8088 	bne.w	1b16 <storeData(short)+0x146>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    1a06:	49aa      	ldr	r1, [pc, #680]	; (1cb0 <storeData(short)+0x2e0>)
    1a08:	2218      	movs	r2, #24
    1a0a:	4baa      	ldr	r3, [pc, #680]	; (1cb4 <storeData(short)+0x2e4>)
    1a0c:	6808      	ldr	r0, [r1, #0]
    1a0e:	2101      	movs	r1, #1
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	f7ff fd4f 	bl	14b4 <headerInit(long, long, long, int)>
    1a16:	4601      	mov	r1, r0
    return m_fFile ? m_fFile->write(buf, count) :
    1a18:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a1a:	2800      	cmp	r0, #0
    1a1c:	f000 8083 	beq.w	1b26 <storeData(short)+0x156>
    1a20:	f44f 7200 	mov.w	r2, #512	; 0x200
    1a24:	f007 fd10 	bl	9448 <FatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1a28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1a2c:	f2c0 8087 	blt.w	1b3e <storeData(short)+0x16e>
    1a30:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1a32:	2800      	cmp	r0, #0
    1a34:	f000 809f 	beq.w	1b76 <storeData(short)+0x1a6>
    1a38:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    1a3c:	499e      	ldr	r1, [pc, #632]	; (1cb8 <storeData(short)+0x2e8>)
    1a3e:	f007 fd03 	bl	9448 <FatFile::write(void const*, unsigned int)>
    1a42:	4604      	mov	r4, r0
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    1a44:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
    1a48:	f0c0 80be 	bcc.w	1bc8 <storeData(short)+0x1f8>
        disk_count++;
    1a4c:	499b      	ldr	r1, [pc, #620]	; (1cbc <storeData(short)+0x2ec>)
          nbuf++;
    1a4e:	6833      	ldr	r3, [r6, #0]
        disk_count++;
    1a50:	680a      	ldr	r2, [r1, #0]
          nbuf++;
    1a52:	3301      	adds	r3, #1
        disk_count++;
    1a54:	3201      	adds	r2, #1
          nbuf++;
    1a56:	6033      	str	r3, [r6, #0]
        disk_count++;
    1a58:	600a      	str	r2, [r1, #0]
    1a5a:	4999      	ldr	r1, [pc, #612]	; (1cc0 <storeData(short)+0x2f0>)
        if((nbuf % 1000)==0 ) file.flush();
    1a5c:	4a99      	ldr	r2, [pc, #612]	; (1cc4 <storeData(short)+0x2f4>)
        disk_count++;
    1a5e:	fb01 f303 	mul.w	r3, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    1a62:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
    1a66:	d27e      	bcs.n	1b66 <storeData(short)+0x196>
    1a68:	2002      	movs	r0, #2
}
    1a6a:	b014      	add	sp, #80	; 0x50
    1a6c:	bd70      	pop	{r4, r5, r6, pc}
        if(newDirectory(dirName))
    1a6e:	4896      	ldr	r0, [pc, #600]	; (1cc8 <storeData(short)+0x2f8>)
    1a70:	f7ff fe4c 	bl	170c <newDirectory(char*)>
    1a74:	b1e8      	cbz	r0, 1ab2 <storeData(short)+0xe2>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1a76:	4d95      	ldr	r5, [pc, #596]	; (1ccc <storeData(short)+0x2fc>)
    1a78:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    1a7a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1a7e:	2a00      	cmp	r2, #0
    1a80:	f000 80d2 	beq.w	1c28 <storeData(short)+0x258>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1a84:	466e      	mov	r6, sp
    1a86:	4611      	mov	r1, r2
    1a88:	4623      	mov	r3, r4
    1a8a:	4a8f      	ldr	r2, [pc, #572]	; (1cc8 <storeData(short)+0x2f8>)
    1a8c:	4630      	mov	r0, r6
  FatFile() {}
    1a8e:	9400      	str	r4, [sp, #0]
    1a90:	f007 f908 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    1a94:	2800      	cmp	r0, #0
    1a96:	f000 80d4 	beq.w	1c42 <storeData(short)+0x272>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1a9a:	682b      	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    1a9c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    1aa0:	2800      	cmp	r0, #0
    1aa2:	f000 80e6 	beq.w	1c72 <storeData(short)+0x2a2>
    1aa6:	4988      	ldr	r1, [pc, #544]	; (1cc8 <storeData(short)+0x2f8>)
    1aa8:	f008 fe48 	bl	a73c <FatVolume::chdir(char const*)>
    1aac:	2800      	cmp	r0, #0
    1aae:	f000 80e9 	beq.w	1c84 <storeData(short)+0x2b4>
        if(newFileName(fileName))
    1ab2:	4887      	ldr	r0, [pc, #540]	; (1cd0 <storeData(short)+0x300>)
    1ab4:	f7ff fe68 	bl	1788 <newFileName(char*)>
    1ab8:	2800      	cmp	r0, #0
    1aba:	f000 8146 	beq.w	1d4a <storeData(short)+0x37a>
            file = sd->open(fileName, FILE_WRITE); 
    1abe:	4983      	ldr	r1, [pc, #524]	; (1ccc <storeData(short)+0x2fc>)
    1ac0:	f244 2302 	movw	r3, #16898	; 0x4202
    1ac4:	4a82      	ldr	r2, [pc, #520]	; (1cd0 <storeData(short)+0x300>)
    1ac6:	4668      	mov	r0, sp
    1ac8:	6809      	ldr	r1, [r1, #0]
    1aca:	f008 ffd3 	bl	aa74 <FsVolume::open(char const*, int)>
class Print
    1ace:	4d75      	ldr	r5, [pc, #468]	; (1ca4 <storeData(short)+0x2d4>)
class Stream : public Print
    1ad0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    1ad4:	f105 0010 	add.w	r0, r5, #16
    1ad8:	732b      	strb	r3, [r5, #12]
    1ada:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    1ade:	e9c5 1201 	strd	r1, r2, [r5, #4]
    1ae2:	a904      	add	r1, sp, #16
    1ae4:	f008 fe52 	bl	a78c <FsBaseFile::operator=(FsBaseFile const&)>
    1ae8:	4b7a      	ldr	r3, [pc, #488]	; (1cd4 <storeData(short)+0x304>)
  ~FsBaseFile() {close();}
    1aea:	a804      	add	r0, sp, #16
    1aec:	9300      	str	r3, [sp, #0]
    1aee:	f008 fea7 	bl	a840 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    1af2:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1af4:	2b00      	cmp	r3, #0
    1af6:	f47f af7d 	bne.w	19f4 <storeData(short)+0x24>
    1afa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1afc:	2b00      	cmp	r3, #0
    1afe:	f47f af79 	bne.w	19f4 <storeData(short)+0x24>
    1b02:	2111      	movs	r1, #17
    1b04:	4874      	ldr	r0, [pc, #464]	; (1cd8 <storeData(short)+0x308>)
    1b06:	f00e f985 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1b0a:	4874      	ldr	r0, [pc, #464]	; (1cdc <storeData(short)+0x30c>)
    1b0c:	f00b fdfa 	bl	d704 <Print::println()>
                return STOPPED; 
    1b10:	f04f 30ff 	mov.w	r0, #4294967295
    1b14:	e76b      	b.n	19ee <storeData(short)+0x1e>
          makeHeader(fileHeader);
    1b16:	4872      	ldr	r0, [pc, #456]	; (1ce0 <storeData(short)+0x310>)
    1b18:	f7ff fd98 	bl	164c <makeHeader(long*)>
    return m_fFile ? m_fFile->write(buf, count) :
    1b1c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
          hdr=(char *)fileHeader;
    1b1e:	4970      	ldr	r1, [pc, #448]	; (1ce0 <storeData(short)+0x310>)
    1b20:	2800      	cmp	r0, #0
    1b22:	f47f af7d 	bne.w	1a20 <storeData(short)+0x50>
    1b26:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1b28:	2800      	cmp	r0, #0
    1b2a:	f43f af60 	beq.w	19ee <storeData(short)+0x1e>
    1b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
    1b32:	f006 f979 	bl	7e28 <ExFatFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    1b36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1b3a:	f6bf af79 	bge.w	1a30 <storeData(short)+0x60>
  bool isOpen() const {return m_fFile || m_xFile;}
    1b3e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1b40:	2b00      	cmp	r3, #0
    1b42:	f000 80f6 	beq.w	1d32 <storeData(short)+0x362>
    1b46:	2403      	movs	r4, #3
        {   if(proc==0)
    1b48:	4b57      	ldr	r3, [pc, #348]	; (1ca8 <storeData(short)+0x2d8>)
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	b21b      	sxth	r3, r3
    1b4e:	b363      	cbz	r3, 1baa <storeData(short)+0x1da>
            file.close();
    1b50:	4864      	ldr	r0, [pc, #400]	; (1ce4 <storeData(short)+0x314>)
    1b52:	f008 fe75 	bl	a840 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    1b56:	2c04      	cmp	r4, #4
    1b58:	d016      	beq.n	1b88 <storeData(short)+0x1b8>
        else if(status==DOCLOSE)
    1b5a:	2c03      	cmp	r4, #3
    1b5c:	f040 80ee 	bne.w	1d3c <storeData(short)+0x36c>
            status = CLOSED;   // do not hibernate
    1b60:	2000      	movs	r0, #0
}
    1b62:	b014      	add	sp, #80	; 0x50
    1b64:	bd70      	pop	{r4, r5, r6, pc}
    return m_fFile ? m_fFile->sync() :
    1b66:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1b68:	2800      	cmp	r0, #0
    1b6a:	f000 8092 	beq.w	1c92 <storeData(short)+0x2c2>
    1b6e:	f007 fc65 	bl	943c <FatFile::sync()>
    1b72:	2002      	movs	r0, #2
    1b74:	e73b      	b.n	19ee <storeData(short)+0x1e>
    1b76:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
    1b78:	b328      	cbz	r0, 1bc6 <storeData(short)+0x1f6>
    1b7a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
    1b7e:	494e      	ldr	r1, [pc, #312]	; (1cb8 <storeData(short)+0x2e8>)
    1b80:	f006 f952 	bl	7e28 <ExFatFile::write(void const*, unsigned int)>
    1b84:	4604      	mov	r4, r0
    1b86:	e75d      	b.n	1a44 <storeData(short)+0x74>
        { if( t_rep > t_on) 
    1b88:	4c57      	ldr	r4, [pc, #348]	; (1ce8 <storeData(short)+0x318>)
    1b8a:	4b58      	ldr	r3, [pc, #352]	; (1cec <storeData(short)+0x31c>)
    1b8c:	6822      	ldr	r2, [r4, #0]
    1b8e:	681b      	ldr	r3, [r3, #0]
    1b90:	429a      	cmp	r2, r3
    1b92:	d9e5      	bls.n	1b60 <storeData(short)+0x190>
            adcReset();
    1b94:	f7ff f948 	bl	e28 <adcReset()>
            acqPower(LOW);
    1b98:	2000      	movs	r0, #0
    1b9a:	f7ff f939 	bl	e10 <acqPower(int)>
            do_hibernate(t_rep);
    1b9e:	6820      	ldr	r0, [r4, #0]
    1ba0:	f7ff fec2 	bl	1928 <do_hibernate(unsigned long)>
    1ba4:	4d3f      	ldr	r5, [pc, #252]	; (1ca4 <storeData(short)+0x2d4>)
    1ba6:	4e41      	ldr	r6, [pc, #260]	; (1cac <storeData(short)+0x2dc>)
    1ba8:	e742      	b.n	1a30 <storeData(short)+0x60>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1baa:	4b40      	ldr	r3, [pc, #256]	; (1cac <storeData(short)+0x2dc>)
  wav_hdr.dLen = nbytes;
    1bac:	4850      	ldr	r0, [pc, #320]	; (1cf0 <storeData(short)+0x320>)
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1bae:	681b      	ldr	r3, [r3, #0]
  wav_hdr.rLen += wav_hdr.dLen;
    1bb0:	6842      	ldr	r2, [r0, #4]
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    1bb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1bb6:	035b      	lsls	r3, r3, #13
  wav_hdr.rLen += wav_hdr.dLen;
    1bb8:	441a      	add	r2, r3
  wav_hdr.dLen = nbytes;
    1bba:	f8c0 31fc 	str.w	r3, [r0, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    1bbe:	6042      	str	r2, [r0, #4]
              writeHeader(hdr);
    1bc0:	f7ff fcf8 	bl	15b4 <writeHeader(char*)>
    1bc4:	e7c4      	b.n	1b50 <storeData(short)+0x180>
    1bc6:	4604      	mov	r4, r0
    1bc8:	2101      	movs	r1, #1
    1bca:	484a      	ldr	r0, [pc, #296]	; (1cf4 <storeData(short)+0x324>)
    1bcc:	f00e f922 	bl	fe14 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1bd0:	2300      	movs	r3, #0
    1bd2:	220a      	movs	r2, #10
    1bd4:	4621      	mov	r1, r4
    1bd6:	4841      	ldr	r0, [pc, #260]	; (1cdc <storeData(short)+0x30c>)
    1bd8:	f00b fdbe 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bdc:	2101      	movs	r1, #1
    1bde:	4846      	ldr	r0, [pc, #280]	; (1cf8 <storeData(short)+0x328>)
    1be0:	f00e f918 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1be4:	2102      	movs	r1, #2
    1be6:	483d      	ldr	r0, [pc, #244]	; (1cdc <storeData(short)+0x30c>)
    1be8:	f00b fd80 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1bec:	483b      	ldr	r0, [pc, #236]	; (1cdc <storeData(short)+0x30c>)
    1bee:	f00b fd89 	bl	d704 <Print::println()>
        disk_count++;
    1bf2:	4932      	ldr	r1, [pc, #200]	; (1cbc <storeData(short)+0x2ec>)
    1bf4:	4832      	ldr	r0, [pc, #200]	; (1cc0 <storeData(short)+0x2f0>)
    1bf6:	6833      	ldr	r3, [r6, #0]
    1bf8:	680a      	ldr	r2, [r1, #0]
    1bfa:	fb00 f303 	mul.w	r3, r0, r3
        if((nbuf % 1000)==0 ) file.flush();
    1bfe:	4831      	ldr	r0, [pc, #196]	; (1cc4 <storeData(short)+0x2f4>)
        disk_count++;
    1c00:	3201      	adds	r2, #1
        if((nbuf % 1000)==0 ) file.flush();
    1c02:	ebb0 0ff3 	cmp.w	r0, r3, ror #3
        disk_count++;
    1c06:	600a      	str	r2, [r1, #0]
        if((nbuf % 1000)==0 ) file.flush();
    1c08:	d399      	bcc.n	1b3e <storeData(short)+0x16e>
    return m_fFile ? m_fFile->sync() :
    1c0a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    1c0c:	2800      	cmp	r0, #0
    1c0e:	d079      	beq.n	1d04 <storeData(short)+0x334>
          status=DOCLOSE; 
    1c10:	2403      	movs	r4, #3
    1c12:	f007 fc13 	bl	943c <FatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1c16:	e000      	b.n	1c1a <storeData(short)+0x24a>
    1c18:	4d22      	ldr	r5, [pc, #136]	; (1ca4 <storeData(short)+0x2d4>)
  bool isOpen() const {return m_fFile || m_xFile;}
    1c1a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	d193      	bne.n	1b48 <storeData(short)+0x178>
    1c20:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1c22:	2b00      	cmp	r3, #0
    1c24:	d190      	bne.n	1b48 <storeData(short)+0x178>
    1c26:	e796      	b.n	1b56 <storeData(short)+0x186>
    1c28:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    1c2c:	b1d1      	cbz	r1, 1c64 <storeData(short)+0x294>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    1c2e:	466e      	mov	r6, sp
    1c30:	4613      	mov	r3, r2
  ExFatFile() {}
    1c32:	920c      	str	r2, [sp, #48]	; 0x30
    1c34:	4630      	mov	r0, r6
    1c36:	4a24      	ldr	r2, [pc, #144]	; (1cc8 <storeData(short)+0x2f8>)
    1c38:	f005 fd84 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1c3c:	2800      	cmp	r0, #0
    1c3e:	f47f af2c 	bne.w	1a9a <storeData(short)+0xca>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    1c42:	682b      	ldr	r3, [r5, #0]
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    1c44:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    1c48:	2a00      	cmp	r2, #0
    1c4a:	d063      	beq.n	1d14 <storeData(short)+0x344>
    1c4c:	2400      	movs	r4, #0
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1c4e:	f502 6189 	add.w	r1, r2, #1096	; 0x448
    1c52:	2301      	movs	r3, #1
    1c54:	4630      	mov	r0, r6
    1c56:	4a1c      	ldr	r2, [pc, #112]	; (1cc8 <storeData(short)+0x2f8>)
    1c58:	9400      	str	r4, [sp, #0]
    1c5a:	f006 ff2b 	bl	8ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
    1c5e:	2800      	cmp	r0, #0
    1c60:	f47f af1b 	bne.w	1a9a <storeData(short)+0xca>
    1c64:	481d      	ldr	r0, [pc, #116]	; (1cdc <storeData(short)+0x30c>)
    1c66:	4925      	ldr	r1, [pc, #148]	; (1cfc <storeData(short)+0x32c>)
    1c68:	f7ff fbf0 	bl	144c <Print::println(char const*) [clone .isra.0]>
    1c6c:	f04f 30ff 	mov.w	r0, #4294967295
    1c70:	e6bd      	b.n	19ee <storeData(short)+0x1e>
    1c72:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    1c76:	b128      	cbz	r0, 1c84 <storeData(short)+0x2b4>
    1c78:	4913      	ldr	r1, [pc, #76]	; (1cc8 <storeData(short)+0x2f8>)
    1c7a:	f006 fd65 	bl	8748 <ExFatVolume::chdir(char const*)>
    1c7e:	2800      	cmp	r0, #0
    1c80:	f47f af17 	bne.w	1ab2 <storeData(short)+0xe2>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    1c84:	4815      	ldr	r0, [pc, #84]	; (1cdc <storeData(short)+0x30c>)
    1c86:	491e      	ldr	r1, [pc, #120]	; (1d00 <storeData(short)+0x330>)
    1c88:	f7ff fbe0 	bl	144c <Print::println(char const*) [clone .isra.0]>
    1c8c:	f04f 30ff 	mov.w	r0, #4294967295
    1c90:	e6ad      	b.n	19ee <storeData(short)+0x1e>
    1c92:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
    1c94:	2800      	cmp	r0, #0
    1c96:	f43f aee7 	beq.w	1a68 <storeData(short)+0x98>
    1c9a:	f005 fedd 	bl	7a58 <ExFatFile::sync()>
    1c9e:	2002      	movs	r0, #2
    1ca0:	e6a5      	b.n	19ee <storeData(short)+0x1e>
    1ca2:	bf00      	nop
    1ca4:	20019304 	.word	0x20019304
    1ca8:	20009554 	.word	0x20009554
    1cac:	20019380 	.word	0x20019380
    1cb0:	20009514 	.word	0x20009514
    1cb4:	2000c1c8 	.word	0x2000c1c8
    1cb8:	2000c1d0 	.word	0x2000c1d0
    1cbc:	200192dc 	.word	0x200192dc
    1cc0:	26e978d5 	.word	0x26e978d5
    1cc4:	00418937 	.word	0x00418937
    1cc8:	20018634 	.word	0x20018634
    1ccc:	2000951c 	.word	0x2000951c
    1cd0:	20018a84 	.word	0x20018a84
    1cd4:	20000c50 	.word	0x20000c50
    1cd8:	20000854 	.word	0x20000854
    1cdc:	20008b94 	.word	0x20008b94
    1ce0:	200121d0 	.word	0x200121d0
    1ce4:	20019314 	.word	0x20019314
    1ce8:	20019b98 	.word	0x20019b98
    1cec:	20009534 	.word	0x20009534
    1cf0:	20018884 	.word	0x20018884
    1cf4:	20000868 	.word	0x20000868
    1cf8:	20000bd0 	.word	0x20000bd0
    1cfc:	2000083c 	.word	0x2000083c
    1d00:	20000848 	.word	0x20000848
    1d04:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1d06:	2800      	cmp	r0, #0
    1d08:	f43f ae71 	beq.w	19ee <storeData(short)+0x1e>
          status=DOCLOSE; 
    1d0c:	2403      	movs	r4, #3
    1d0e:	f005 fea3 	bl	7a58 <ExFatFile::sync()>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    1d12:	e782      	b.n	1c1a <storeData(short)+0x24a>
    1d14:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    1d18:	2900      	cmp	r1, #0
    1d1a:	d0a3      	beq.n	1c64 <storeData(short)+0x294>
    1d1c:	920c      	str	r2, [sp, #48]	; 0x30
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    1d1e:	2301      	movs	r3, #1
    1d20:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    1d24:	4630      	mov	r0, r6
    1d26:	4a0a      	ldr	r2, [pc, #40]	; (1d50 <storeData(short)+0x380>)
    1d28:	f005 ffa0 	bl	7c6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d099      	beq.n	1c64 <storeData(short)+0x294>
    1d30:	e6b3      	b.n	1a9a <storeData(short)+0xca>
  bool isOpen() const {return m_fFile || m_xFile;}
    1d32:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    1d34:	2800      	cmp	r0, #0
    1d36:	f47f af06 	bne.w	1b46 <storeData(short)+0x176>
    1d3a:	e658      	b.n	19ee <storeData(short)+0x1e>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    1d3c:	4b05      	ldr	r3, [pc, #20]	; (1d54 <storeData(short)+0x384>)
    1d3e:	2208      	movs	r2, #8
          status=STOPPED;
    1d40:	f04f 30ff 	mov.w	r0, #4294967295
    1d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    1d48:	e651      	b.n	19ee <storeData(short)+0x1e>
        {  return STOPPED; // if file open fails: don't do anything
    1d4a:	f04f 30ff 	mov.w	r0, #4294967295
    1d4e:	e64e      	b.n	19ee <storeData(short)+0x1e>
    1d50:	20018634 	.word	0x20018634
    1d54:	42004000 	.word	0x42004000

00001d58 <saveData(short)>:
{
    1d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d5a:	4605      	mov	r5, r0
    if(status==STOPPED) 
    1d5c:	3001      	adds	r0, #1
    1d5e:	d03d      	beq.n	1ddc <saveData(short)+0x84>
    if(status<CLOSED) return status; // we are stopped: don't do anything
    1d60:	2d00      	cmp	r5, #0
    1d62:	db4c      	blt.n	1dfe <saveData(short)+0xa6>
  if(state==RUNNING)
    1d64:	2d02      	cmp	r5, #2
    1d66:	d065      	beq.n	1e34 <saveData(short)+0xdc>
    if(getDataCount() >= NDBL)
    1d68:	f002 fe14 	bl	4994 <getDataCount()>
    1d6c:	282f      	cmp	r0, #47	; 0x2f
    1d6e:	d946      	bls.n	1dfe <saveData(short)+0xa6>
      if(proc==0)
    1d70:	4b32      	ldr	r3, [pc, #200]	; (1e3c <saveData(short)+0xe4>)
    1d72:	881b      	ldrh	r3, [r3, #0]
    1d74:	b21b      	sxth	r3, r3
    1d76:	2b00      	cmp	r3, #0
    1d78:	d143      	bne.n	1e02 <saveData(short)+0xaa>
    1d7a:	4f31      	ldr	r7, [pc, #196]	; (1e40 <saveData(short)+0xe8>)
    1d7c:	f5a7 46c0 	sub.w	r6, r7, #24576	; 0x6000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1d80:	f002 fe16 	bl	49b0 <queue_isBusy()>
    1d84:	4604      	mov	r4, r0
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1d86:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1d88:	2c00      	cmp	r4, #0
    1d8a:	d1f9      	bne.n	1d80 <saveData(short)+0x28>
        for(int ii=0; ii<NDBL; ii++)
    1d8c:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    1d90:	f002 fe50 	bl	4a34 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1d94:	42be      	cmp	r6, r7
    1d96:	d1f3      	bne.n	1d80 <saveData(short)+0x28>
    1d98:	492a      	ldr	r1, [pc, #168]	; (1e44 <saveData(short)+0xec>)
    1d9a:	4b2b      	ldr	r3, [pc, #172]	; (1e48 <saveData(short)+0xf0>)
    1d9c:	460a      	mov	r2, r1
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1d9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1da2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    1da6:	3401      	adds	r4, #1
    1da8:	2c08      	cmp	r4, #8
    1daa:	d1f8      	bne.n	1d9e <saveData(short)+0x46>
    1dac:	4b27      	ldr	r3, [pc, #156]	; (1e4c <saveData(short)+0xf4>)
    1dae:	4e28      	ldr	r6, [pc, #160]	; (1e50 <saveData(short)+0xf8>)
            outptr[jj++]=(inpp[ii]) &0xff;
    1db0:	f851 2f04 	ldr.w	r2, [r1, #4]!
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1db4:	3303      	adds	r3, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1db6:	0a14      	lsrs	r4, r2, #8
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1db8:	42b1      	cmp	r1, r6
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1dba:	ea4f 4012 	mov.w	r0, r2, lsr #16
            outptr[jj++]=(inpp[ii]) &0xff;
    1dbe:	f803 2c03 	strb.w	r2, [r3, #-3]
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    1dc2:	f803 4c02 	strb.w	r4, [r3, #-2]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    1dc6:	f803 0c01 	strb.w	r0, [r3, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    1dca:	d1f1      	bne.n	1db0 <saveData(short)+0x58>
      if(haveStore)
    1dcc:	4b21      	ldr	r3, [pc, #132]	; (1e54 <saveData(short)+0xfc>)
    1dce:	681b      	ldr	r3, [r3, #0]
    1dd0:	b1ab      	cbz	r3, 1dfe <saveData(short)+0xa6>
        status=storeData(status);
    1dd2:	4628      	mov	r0, r5
}
    1dd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        status=storeData(status);
    1dd8:	f7ff bdfa 	b.w	19d0 <storeData(short)>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    1ddc:	f002 fde8 	bl	49b0 <queue_isBusy()>
    1de0:	4604      	mov	r4, r0
    1de2:	2800      	cmp	r0, #0
    1de4:	d1fa      	bne.n	1ddc <saveData(short)+0x84>
      pullData((uint32_t*)tempBuffer0);
    1de6:	481c      	ldr	r0, [pc, #112]	; (1e58 <saveData(short)+0x100>)
    1de8:	f002 fe24 	bl	4a34 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    1dec:	4a15      	ldr	r2, [pc, #84]	; (1e44 <saveData(short)+0xec>)
    1dee:	4b16      	ldr	r3, [pc, #88]	; (1e48 <saveData(short)+0xf0>)
    1df0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1df4:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1df8:	3401      	adds	r4, #1
    1dfa:	2c08      	cmp	r4, #8
    1dfc:	d1f8      	bne.n	1df0 <saveData(short)+0x98>
}
    1dfe:	4628      	mov	r0, r5
    1e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e02:	4e12      	ldr	r6, [pc, #72]	; (1e4c <saveData(short)+0xf4>)
    1e04:	f506 47c0 	add.w	r7, r6, #24576	; 0x6000
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1e08:	f002 fdd2 	bl	49b0 <queue_isBusy()>
    1e0c:	4604      	mov	r4, r0
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1e0e:	4630      	mov	r0, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    1e10:	2c00      	cmp	r4, #0
    1e12:	d1f9      	bne.n	1e08 <saveData(short)+0xb0>
        for(int ii=0; ii<NDBL; ii++)
    1e14:	f506 7600 	add.w	r6, r6, #512	; 0x200
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    1e18:	f002 fe0c 	bl	4a34 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    1e1c:	42be      	cmp	r6, r7
    1e1e:	d1f3      	bne.n	1e08 <saveData(short)+0xb0>
    1e20:	4a0e      	ldr	r2, [pc, #56]	; (1e5c <saveData(short)+0x104>)
    1e22:	4b09      	ldr	r3, [pc, #36]	; (1e48 <saveData(short)+0xf0>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    1e24:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1e28:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
    1e2c:	3401      	adds	r4, #1
    1e2e:	2c08      	cmp	r4, #8
    1e30:	d1f8      	bne.n	1e24 <saveData(short)+0xcc>
    1e32:	e7cb      	b.n	1dcc <saveData(short)+0x74>
    1e34:	f7ff fade 	bl	13f4 <checkEndOfFile(short) [clone .part.0]>
    1e38:	4605      	mov	r5, r0
    1e3a:	e795      	b.n	1d68 <saveData(short)+0x10>
    1e3c:	20009554 	.word	0x20009554
    1e40:	200183dc 	.word	0x200183dc
    1e44:	200123d8 	.word	0x200123d8
    1e48:	20019358 	.word	0x20019358
    1e4c:	2000c1d0 	.word	0x2000c1d0
    1e50:	200183d8 	.word	0x200183d8
    1e54:	20019354 	.word	0x20019354
    1e58:	200123dc 	.word	0x200123dc
    1e5c:	2000c1cc 	.word	0x2000c1cc

00001e60 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    1e60:	4808      	ldr	r0, [pc, #32]	; (1e84 <_GLOBAL__sub_I_t_acq+0x24>)
    1e62:	2300      	movs	r3, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
    1e64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
FsFile file;
    1e68:	4a07      	ldr	r2, [pc, #28]	; (1e88 <_GLOBAL__sub_I_t_acq+0x28>)
}
    1e6a:	b410      	push	{r4}
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    1e6c:	4c07      	ldr	r4, [pc, #28]	; (1e8c <_GLOBAL__sub_I_t_acq+0x2c>)
    1e6e:	7303      	strb	r3, [r0, #12]
    1e70:	6004      	str	r4, [r0, #0]
    1e72:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e76:	e9c0 3101 	strd	r3, r1, [r0, #4]
  FsBaseFile() {}
    1e7a:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
FsFile file;
    1e7e:	4904      	ldr	r1, [pc, #16]	; (1e90 <_GLOBAL__sub_I_t_acq+0x30>)
    1e80:	f00e b9d2 	b.w	10228 <__aeabi_atexit>
    1e84:	20019304 	.word	0x20019304
    1e88:	20008f70 	.word	0x20008f70
    1e8c:	20000d78 	.word	0x20000d78
    1e90:	000013dd 	.word	0x000013dd

00001e94 <filing_init()>:
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1e94:	4b29      	ldr	r3, [pc, #164]	; (1f3c <filing_init()+0xa8>)
    1e96:	4a2a      	ldr	r2, [pc, #168]	; (1f40 <filing_init()+0xac>)
    1e98:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
  FsDateTime::callback = dateTime;
    1e9c:	4929      	ldr	r1, [pc, #164]	; (1f44 <filing_init()+0xb0>)
    1e9e:	482a      	ldr	r0, [pc, #168]	; (1f48 <filing_init()+0xb4>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ea0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
{
    1ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  FsDateTime::callback = dateTime;
    1ea8:	2605      	movs	r6, #5
    1eaa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1f5c <filing_init()+0xc8>
    spiConfigBackupPin = 255;
    1eae:	27ff      	movs	r7, #255	; 0xff
    1eb0:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1f60 <filing_init()+0xcc>
	size_t println(const char s[])			{ return print(s) + println(); }
    1eb4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f50 <filing_init()+0xbc>
    1eb8:	6008      	str	r0, [r1, #0]
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    1eba:	6013      	str	r3, [r2, #0]
    if (sd->begin(SD_CONFIG)) 
    1ebc:	f8d8 4000 	ldr.w	r4, [r8]
    sdioConfigBackup = sdioConfig;
    1ec0:	2300      	movs	r3, #0
    1ec2:	f504 6592 	add.w	r5, r4, #1168	; 0x490
    1ec6:	4619      	mov	r1, r3
    1ec8:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
    1ecc:	4628      	mov	r0, r5
    spiConfigBackupPin = 255;
    1ece:	f884 74bc 	strb.w	r7, [r4, #1212]	; 0x4bc
    1ed2:	f00a f9cf 	bl	c274 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    1ed6:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    1ed8:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    1edc:	f009 fc2c 	bl	b738 <SdioCard::errorCode() const>
    1ee0:	4602      	mov	r2, r0
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1ee2:	2301      	movs	r3, #1
    1ee4:	4620      	mov	r0, r4
    return m_card && !m_card->errorCode();
    1ee6:	b992      	cbnz	r2, 1f0e <filing_init()+0x7a>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1ee8:	461a      	mov	r2, r3
    1eea:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    1eee:	f008 fd4f 	bl	a990 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    1ef2:	b160      	cbz	r0, 1f0e <filing_init()+0x7a>
    1ef4:	2111      	movs	r1, #17
    1ef6:	4815      	ldr	r0, [pc, #84]	; (1f4c <filing_init()+0xb8>)
    1ef8:	f00d ff8c 	bl	fe14 <usb_serial_write>
    1efc:	4814      	ldr	r0, [pc, #80]	; (1f50 <filing_init()+0xbc>)
    1efe:	f00b fc01 	bl	d704 <Print::println()>
      haveStore=1;
    1f02:	2301      	movs	r3, #1
    1f04:	4a13      	ldr	r2, [pc, #76]	; (1f54 <filing_init()+0xc0>)
      return 1;
    1f06:	4618      	mov	r0, r3
      haveStore=1;
    1f08:	6013      	str	r3, [r2, #0]
}
    1f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f0e:	210f      	movs	r1, #15
    1f10:	4650      	mov	r0, sl
    1f12:	f00d ff7f 	bl	fe14 <usb_serial_write>
    1f16:	4648      	mov	r0, r9
    1f18:	f00b fbf4 	bl	d704 <Print::println()>
      delay(100);
    1f1c:	2064      	movs	r0, #100	; 0x64
    1f1e:	f00b fef5 	bl	dd0c <delay>
  for(int ii=0; ii<5;ii++)
    1f22:	3e01      	subs	r6, #1
    1f24:	d1ca      	bne.n	1ebc <filing_init()+0x28>
    1f26:	211b      	movs	r1, #27
    1f28:	480b      	ldr	r0, [pc, #44]	; (1f58 <filing_init()+0xc4>)
    1f2a:	f00d ff73 	bl	fe14 <usb_serial_write>
    1f2e:	4808      	ldr	r0, [pc, #32]	; (1f50 <filing_init()+0xbc>)
    1f30:	f00b fbe8 	bl	d704 <Print::println()>
  return 0;
    1f34:	4630      	mov	r0, r6
}
    1f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f3a:	bf00      	nop
    1f3c:	401f4400 	.word	0x401f4400
    1f40:	2000c1c8 	.word	0x2000c1c8
    1f44:	20018cdc 	.word	0x20018cdc
    1f48:	0000135d 	.word	0x0000135d
    1f4c:	2000044c 	.word	0x2000044c
    1f50:	20008b94 	.word	0x20008b94
    1f54:	20019354 	.word	0x20019354
    1f58:	20000470 	.word	0x20000470
    1f5c:	2000951c 	.word	0x2000951c
    1f60:	20000460 	.word	0x20000460

00001f64 <TwoWire::read()>:
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    1f64:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    1f68:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    1f6c:	429a      	cmp	r2, r3
    1f6e:	d905      	bls.n	1f7c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    1f70:	1c5a      	adds	r2, r3, #1
    1f72:	4403      	add	r3, r0
    1f74:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    1f78:	7e98      	ldrb	r0, [r3, #26]
    1f7a:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    1f7c:	f04f 30ff 	mov.w	r0, #4294967295
	}
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop

00001f84 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1f84:	b530      	push	{r4, r5, lr}
    1f86:	4605      	mov	r5, r0
    1f88:	b083      	sub	sp, #12
    1f8a:	460c      	mov	r4, r1
    {   this->wire = wire;
        wire->begin();
    1f8c:	4608      	mov	r0, r1
    {   this->wire = wire;
    1f8e:	6029      	str	r1, [r5, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    1f90:	9201      	str	r2, [sp, #4]
        wire->begin();
    1f92:	f019 f875 	bl	1b080 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    1f96:	2064      	movs	r0, #100	; 0x64
    1f98:	f00b feb8 	bl	dd0c <delay>
        wire->setClock(speed);
    1f9c:	4620      	mov	r0, r4
    1f9e:	9901      	ldr	r1, [sp, #4]
    1fa0:	f00b fa7c 	bl	d49c <TwoWire::setClock(unsigned long)>
    }
    1fa4:	4628      	mov	r0, r5
    1fa6:	b003      	add	sp, #12
    1fa8:	bd30      	pop	{r4, r5, pc}
    1faa:	bf00      	nop

00001fac <i2c_class::exist(unsigned char)>:
		transmitting = 1;
    1fac:	2201      	movs	r2, #1
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    1fae:	b508      	push	{r3, lr}
		txBuffer[0] = (address << 1);
    1fb0:	fa01 fc02 	lsl.w	ip, r1, r2
        wire->beginTransmission(addr);
    1fb4:	6803      	ldr	r3, [r0, #0]
		return endTransmission(1);
    1fb6:	4611      	mov	r1, r2
		txBuffer[0] = (address << 1);
    1fb8:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
		transmitting = 1;
    1fbc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    1fc0:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		return endTransmission(1);
    1fc4:	6800      	ldr	r0, [r0, #0]
    1fc6:	f00b f8d1 	bl	d16c <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    1fca:	fab0 f080 	clz	r0, r0
    1fce:	0940      	lsrs	r0, r0, #5
    1fd0:	bd08      	pop	{r3, pc}
    1fd2:	bf00      	nop

00001fd4 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	460d      	mov	r5, r1
		transmitting = 1;
    1fd8:	2601      	movs	r6, #1
        unsigned int val;
        wire->beginTransmission(addr);
        wire->write(reg);
    1fda:	4611      	mov	r1, r2
        wire->beginTransmission(addr);
    1fdc:	6802      	ldr	r2, [r0, #0]
		txBuffer[0] = (address << 1);
    1fde:	006b      	lsls	r3, r5, #1
    { 
    1fe0:	4604      	mov	r4, r0
		transmitting = 1;
    1fe2:	f882 6130 	strb.w	r6, [r2, #304]	; 0x130
		txBuffer[0] = (address << 1);
    1fe6:	f882 30a5 	strb.w	r3, [r2, #165]	; 0xa5
		txBufferLength = 1;
    1fea:	f882 612f 	strb.w	r6, [r2, #303]	; 0x12f
        wire->write(reg);
    1fee:	6800      	ldr	r0, [r0, #0]
    1ff0:	6803      	ldr	r3, [r0, #0]
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	4798      	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    1ff6:	2100      	movs	r1, #0
    1ff8:	6820      	ldr	r0, [r4, #0]
    1ffa:	f00b f8b7 	bl	d16c <TwoWire::endTransmission(unsigned char)>
    1ffe:	b108      	cbz	r0, 2004 <i2c_class::read(unsigned char, unsigned char)+0x30>
    2000:	2000      	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    2002:	bd70      	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    2004:	4633      	mov	r3, r6
    2006:	4632      	mov	r2, r6
    2008:	4629      	mov	r1, r5
    200a:	6820      	ldr	r0, [r4, #0]
    200c:	f00b f92e 	bl	d26c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    2010:	2800      	cmp	r0, #0
    2012:	d0f5      	beq.n	2000 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    2014:	6820      	ldr	r0, [r4, #0]
    2016:	4a0b      	ldr	r2, [pc, #44]	; (2044 <i2c_class::read(unsigned char, unsigned char)+0x70>)
    2018:	6803      	ldr	r3, [r0, #0]
    201a:	695b      	ldr	r3, [r3, #20]
    201c:	4293      	cmp	r3, r2
    201e:	d10b      	bne.n	2038 <i2c_class::read(unsigned char, unsigned char)+0x64>
		if (rxBufferIndex >= rxBufferLength) return -1;
    2020:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    2024:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    2028:	429a      	cmp	r2, r3
    202a:	d908      	bls.n	203e <i2c_class::read(unsigned char, unsigned char)+0x6a>
		return rxBuffer[rxBufferIndex++];
    202c:	1c5a      	adds	r2, r3, #1
    202e:	4403      	add	r3, r0
    2030:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    2034:	7e98      	ldrb	r0, [r3, #26]
    }
    2036:	bd70      	pop	{r4, r5, r6, pc}
        val = wire->read();
    2038:	4798      	blx	r3
        return val;
    203a:	b2c0      	uxtb	r0, r0
    }
    203c:	bd70      	pop	{r4, r5, r6, pc}
    203e:	20ff      	movs	r0, #255	; 0xff
    2040:	bd70      	pop	{r4, r5, r6, pc}
    2042:	bf00      	nop
    2044:	00001f65 	.word	0x00001f65

00002048 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    2048:	b570      	push	{r4, r5, r6, lr}
    204a:	4604      	mov	r4, r0
		transmitting = 1;
    204c:	2501      	movs	r5, #1
		txBuffer[0] = (address << 1);
    204e:	0048      	lsls	r0, r1, #1
    2050:	461e      	mov	r6, r3
        wire->beginTransmission(addr);
    2052:	6823      	ldr	r3, [r4, #0]
        wire->write(reg);
    2054:	4611      	mov	r1, r2
		transmitting = 1;
    2056:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    205a:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    205e:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
    2062:	6820      	ldr	r0, [r4, #0]
    2064:	6803      	ldr	r3, [r0, #0]
    2066:	681b      	ldr	r3, [r3, #0]
    2068:	4798      	blx	r3
        wire->write(val);
    206a:	6820      	ldr	r0, [r4, #0]
    206c:	4631      	mov	r1, r6
    206e:	6803      	ldr	r3, [r0, #0]
    2070:	681b      	ldr	r3, [r3, #0]
    2072:	4798      	blx	r3
		return endTransmission(1);
    2074:	4629      	mov	r1, r5
    2076:	6820      	ldr	r0, [r4, #0]
    2078:	f00b f878 	bl	d16c <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    207c:	fab0 f080 	clz	r0, r0
    2080:	0940      	lsrs	r0, r0, #5
    2082:	bd70      	pop	{r4, r5, r6, pc}

00002084 <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
    2084:	6840      	ldr	r0, [r0, #4]
    2086:	4770      	bx	lr

00002088 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    2088:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
    208c:	6888      	ldr	r0, [r1, #8]
    208e:	4770      	bx	lr

00002090 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    2090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2094:	4616      	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    2096:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    209a:	460d      	mov	r5, r1
        if(!write_length_) dst=tx_data_buffer;   
    209c:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    20a0:	b91b      	cbnz	r3, 20aa <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    20a2:	4f19      	ldr	r7, [pc, #100]	; (2108 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    20a4:	f500 7108 	add.w	r1, r0, #544	; 0x220
    20a8:	6039      	str	r1, [r7, #0]
        write_length_ += len;
    20aa:	4433      	add	r3, r6
        while(pos<len)
    20ac:	2e00      	cmp	r6, #0
        write_length_ += len;
    20ae:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
        while(pos<len)
    20b2:	dd27      	ble.n	2104 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    20b4:	f500 6984 	add.w	r9, r0, #1056	; 0x420
        int pos = 0; // into data
    20b8:	2400      	movs	r4, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    20ba:	f500 7808 	add.w	r8, r0, #544	; 0x220
    20be:	4f12      	ldr	r7, [pc, #72]	; (2108 <MTPD::write(char const*, int) [clone .part.0]+0x78>)
    20c0:	e001      	b.n	20c6 <MTPD::write(char const*, int) [clone .part.0]+0x36>
        while(pos<len)
    20c2:	42a6      	cmp	r6, r4
    20c4:	dd1e      	ble.n	2104 <MTPD::write(char const*, int) [clone .part.0]+0x74>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    20c6:	683b      	ldr	r3, [r7, #0]
          int to_copy = min(len - pos, avail);
    20c8:	1b32      	subs	r2, r6, r4
          memcpy(dst,src,to_copy);
    20ca:	4629      	mov	r1, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    20cc:	eba9 0a03 	sub.w	sl, r9, r3
          memcpy(dst,src,to_copy);
    20d0:	4618      	mov	r0, r3
    20d2:	4592      	cmp	sl, r2
    20d4:	bfa8      	it	ge
    20d6:	4692      	movge	sl, r2
    20d8:	4652      	mov	r2, sl
          pos += to_copy;
    20da:	4454      	add	r4, sl
          memcpy(dst,src,to_copy);
    20dc:	f00c f91a 	bl	e314 <memcpy>
    20e0:	4603      	mov	r3, r0
          src += to_copy;
    20e2:	4455      	add	r5, sl
          dst += to_copy;
    20e4:	4453      	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20e6:	454b      	cmp	r3, r9
          dst += to_copy;
    20e8:	603b      	str	r3, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20ea:	d1ea      	bne.n	20c2 <MTPD::write(char const*, int) [clone .part.0]+0x32>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    20ec:	223c      	movs	r2, #60	; 0x3c
    20ee:	f44f 7100 	mov.w	r1, #512	; 0x200
    20f2:	4640      	mov	r0, r8
    20f4:	f00d fafc 	bl	f6f0 <usb_mtp_send>
    20f8:	2800      	cmp	r0, #0
    20fa:	ddf7      	ble.n	20ec <MTPD::write(char const*, int) [clone .part.0]+0x5c>
        while(pos<len)
    20fc:	42a6      	cmp	r6, r4
            dst=tx_data_buffer;
    20fe:	f8c7 8000 	str.w	r8, [r7]
        while(pos<len)
    2102:	dce0      	bgt.n	20c6 <MTPD::write(char const*, int) [clone .part.0]+0x36>
    }
    2104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2108:	20018da8 	.word	0x20018da8

0000210c <MTPD::writestring(char const*) [clone .part.0]>:
  void MTPD::writestring(const char* str) {
    210c:	b5f0      	push	{r4, r5, r6, r7, lr}
    210e:	4607      	mov	r7, r0
    2110:	b083      	sub	sp, #12
    { write8(strlen(str) + 1);
    2112:	4608      	mov	r0, r1
  void MTPD::writestring(const char* str) {
    2114:	460c      	mov	r4, r1
    { if (write_get_length_) 
    2116:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
    { write8(strlen(str) + 1);
    211a:	f010 fd71 	bl	12c00 <strlen>
    211e:	3001      	adds	r0, #1
    { if (write_get_length_) 
    2120:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    2124:	f88d 0006 	strb.w	r0, [sp, #6]
    2128:	b396      	cbz	r6, 2190 <MTPD::writestring(char const*) [clone .part.0]+0x84>
        write_length_ += len;
    212a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    212e:	3301      	adds	r3, #1
    2130:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2134:	7823      	ldrb	r3, [r4, #0]
    2136:	b973      	cbnz	r3, 2156 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
        write_length_ += len;
    2138:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    213c:	3302      	adds	r3, #2
    213e:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    2142:	b003      	add	sp, #12
    2144:	bdf0      	pop	{r4, r5, r6, r7, pc}
        write_length_ += len;
    2146:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    214a:	4413      	add	r3, r2
    214c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2150:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    2154:	b17b      	cbz	r3, 2176 <MTPD::writestring(char const*) [clone .part.0]+0x6a>
        write_length_ += len;
    2156:	2202      	movs	r2, #2
    2158:	f10d 0106 	add.w	r1, sp, #6
    215c:	4638      	mov	r0, r7
      while (*str) {  write16(*str);  ++str;  } write16(0);
    215e:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    2162:	2e00      	cmp	r6, #0
    2164:	d1ef      	bne.n	2146 <MTPD::writestring(char const*) [clone .part.0]+0x3a>
    2166:	f7ff ff93 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    216a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    { if (write_get_length_) 
    216e:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2172:	2b00      	cmp	r3, #0
    2174:	d1ef      	bne.n	2156 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    2176:	2300      	movs	r3, #0
    2178:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    217c:	2e00      	cmp	r6, #0
    217e:	d1db      	bne.n	2138 <MTPD::writestring(char const*) [clone .part.0]+0x2c>
    2180:	2202      	movs	r2, #2
    2182:	f10d 0106 	add.w	r1, sp, #6
    2186:	4638      	mov	r0, r7
    2188:	f7ff ff82 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
  }
    218c:	b003      	add	sp, #12
    218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2190:	2201      	movs	r2, #1
    2192:	f10d 0106 	add.w	r1, sp, #6
    2196:	4638      	mov	r0, r7
    2198:	f7ff ff7a 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    219c:	7823      	ldrb	r3, [r4, #0]
    { if (write_get_length_) 
    219e:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
      while (*str) {  write16(*str);  ++str;  } write16(0);
    21a2:	2b00      	cmp	r3, #0
    21a4:	d1d7      	bne.n	2156 <MTPD::writestring(char const*) [clone .part.0]+0x4a>
    21a6:	e7e6      	b.n	2176 <MTPD::writestring(char const*) [clone .part.0]+0x6a>

000021a8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>:
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    21a8:	b570      	push	{r4, r5, r6, lr}
    21aa:	f24d 4302 	movw	r3, #54274	; 0xd402
    21ae:	b082      	sub	sp, #8
    { if (write_get_length_) 
    21b0:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    21b4:	4605      	mov	r5, r0
    21b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    21ba:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    21be:	b31b      	cbz	r3, 2208 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x60>
        write_length_ += len;
    21c0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21c4:	3302      	adds	r3, #2
    21c6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    21ca:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21ce:	3302      	adds	r3, #2
    21d0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    21d4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21d8:	3301      	adds	r3, #1
    21da:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    21de:	491e      	ldr	r1, [pc, #120]	; (2258 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    21e0:	4628      	mov	r0, r5
    21e2:	f7ff ff93 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    21e6:	491c      	ldr	r1, [pc, #112]	; (2258 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xb0>)
    21e8:	4628      	mov	r0, r5
    21ea:	f7ff ff8f 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
        write8(0);       // no form
    21ee:	2200      	movs	r2, #0
    { if (write_get_length_) 
    21f0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    21f4:	f88d 2006 	strb.w	r2, [sp, #6]
    21f8:	b333      	cbz	r3, 2248 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0xa0>
        write_length_ += len;
    21fa:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    21fe:	3301      	adds	r3, #1
    2200:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2204:	b002      	add	sp, #8
    2206:	bd70      	pop	{r4, r5, r6, pc}
    2208:	2202      	movs	r2, #2
    220a:	f10d 0106 	add.w	r1, sp, #6
    220e:	f7ff ff3f 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2212:	f64f 73ff 	movw	r3, #65535	; 0xffff
    { if (write_get_length_) 
    2216:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
        write16(0xFFFF); // string type
    221a:	f8ad 3006 	strh.w	r3, [sp, #6]
    { if (write_get_length_) 
    221e:	2e00      	cmp	r6, #0
    2220:	d1d3      	bne.n	21ca <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x22>
    2222:	2202      	movs	r2, #2
    2224:	f10d 0106 	add.w	r1, sp, #6
    2228:	4628      	mov	r0, r5
    222a:	f7ff ff31 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    222e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
        write8(0);       // read-only
    2232:	f88d 6006 	strb.w	r6, [sp, #6]
    { if (write_get_length_) 
    2236:	2b00      	cmp	r3, #0
    2238:	d1cc      	bne.n	21d4 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x2c>
    223a:	2201      	movs	r2, #1
    223c:	f10d 0106 	add.w	r1, sp, #6
    2240:	4628      	mov	r0, r5
    2242:	f7ff ff25 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2246:	e7ca      	b.n	21de <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]+0x36>
    2248:	2201      	movs	r2, #1
    224a:	f10d 0106 	add.w	r1, sp, #6
    224e:	4628      	mov	r0, r5
    2250:	f7ff ff1e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2254:	b002      	add	sp, #8
    2256:	bd70      	pop	{r4, r5, r6, pc}
    2258:	20000bbc 	.word	0x20000bbc

0000225c <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    225c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    { if (write_get_length_) 
    2260:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  void MTPD::WriteDescriptor() {
    2264:	b087      	sub	sp, #28
    2266:	2464      	movs	r4, #100	; 0x64
    2268:	4607      	mov	r7, r0
    { if (write_get_length_) 
    226a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    226e:	f8ad 4004 	strh.w	r4, [sp, #4]
    2272:	2b00      	cmp	r3, #0
    2274:	f000 813b 	beq.w	24ee <MTPD::WriteDescriptor()+0x292>
        write_length_ += len;
    2278:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    227c:	f10d 0804 	add.w	r8, sp, #4
    2280:	3302      	adds	r3, #2
    2282:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2286:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    228a:	3304      	adds	r3, #4
    228c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2290:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2294:	3302      	adds	r3, #2
    2296:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    229a:	49ac      	ldr	r1, [pc, #688]	; (254c <MTPD::WriteDescriptor()+0x2f0>)
    229c:	4638      	mov	r0, r7
    229e:	f7ff ff35 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    write16(0);    // functional mode
    22a2:	2200      	movs	r2, #0
    { if (write_get_length_) 
    22a4:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    22a8:	f8ad 2004 	strh.w	r2, [sp, #4]
    22ac:	2b00      	cmp	r3, #0
    22ae:	f000 810a 	beq.w	24c6 <MTPD::WriteDescriptor()+0x26a>
        write_length_ += len;
    22b2:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    22b6:	3302      	adds	r3, #2
    22b8:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    22bc:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    22c0:	2601      	movs	r6, #1
    22c2:	3304      	adds	r3, #4
    22c4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22c8:	4ca1      	ldr	r4, [pc, #644]	; (2550 <MTPD::WriteDescriptor()+0x2f4>)
    write32(supported_op_num);
    22ca:	f241 0301 	movw	r3, #4097	; 0x1001
    22ce:	f104 0926 	add.w	r9, r4, #38	; 0x26
    22d2:	e008      	b.n	22e6 <MTPD::WriteDescriptor()+0x8a>
        write_length_ += len;
    22d4:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22d8:	454c      	cmp	r4, r9
        write_length_ += len;
    22da:	4413      	add	r3, r2
    22dc:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22e0:	d00e      	beq.n	2300 <MTPD::WriteDescriptor()+0xa4>
    22e2:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    22e6:	2202      	movs	r2, #2
    22e8:	4641      	mov	r1, r8
    22ea:	4638      	mov	r0, r7
    22ec:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    22f0:	2e00      	cmp	r6, #0
    22f2:	d1ef      	bne.n	22d4 <MTPD::WriteDescriptor()+0x78>
    22f4:	f7ff fecc 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22f8:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    22fa:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    22fe:	d1f0      	bne.n	22e2 <MTPD::WriteDescriptor()+0x86>
    write32(supported_event_num);      
    2300:	2204      	movs	r2, #4
    2302:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2304:	2e00      	cmp	r6, #0
    2306:	f000 80d7 	beq.w	24b8 <MTPD::WriteDescriptor()+0x25c>
        write_length_ += len;
    230a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    230e:	4413      	add	r3, r2
    2310:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2314:	4c8f      	ldr	r4, [pc, #572]	; (2554 <MTPD::WriteDescriptor()+0x2f8>)
    write32(supported_event_num);      
    2316:	f244 0304 	movw	r3, #16388	; 0x4004
    231a:	2202      	movs	r2, #2
    231c:	4641      	mov	r1, r8
    231e:	f104 0906 	add.w	r9, r4, #6
    2322:	4638      	mov	r0, r7
    2324:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    2328:	b17e      	cbz	r6, 234a <MTPD::WriteDescriptor()+0xee>
        write_length_ += len;
    232a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    232e:	454c      	cmp	r4, r9
        write_length_ += len;
    2330:	4413      	add	r3, r2
    2332:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2336:	d00e      	beq.n	2356 <MTPD::WriteDescriptor()+0xfa>
    2338:	f834 3f02 	ldrh.w	r3, [r4, #2]!
        write_length_ += len;
    233c:	2202      	movs	r2, #2
    233e:	4641      	mov	r1, r8
    2340:	4638      	mov	r0, r7
    2342:	f8ad 3004 	strh.w	r3, [sp, #4]
    { if (write_get_length_) 
    2346:	2e00      	cmp	r6, #0
    2348:	d1ef      	bne.n	232a <MTPD::WriteDescriptor()+0xce>
    234a:	f7ff fea1 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    234e:	454c      	cmp	r4, r9
    { if (write_get_length_) 
    2350:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    2354:	d1f0      	bne.n	2338 <MTPD::WriteDescriptor()+0xdc>
    write32(1);       // Device properties (array of uint16)
    2356:	2301      	movs	r3, #1
    2358:	9301      	str	r3, [sp, #4]
    { if (write_get_length_) 
    235a:	2e00      	cmp	r6, #0
    235c:	d068      	beq.n	2430 <MTPD::WriteDescriptor()+0x1d4>
        write_length_ += len;
    235e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2362:	3304      	adds	r3, #4
    2364:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2368:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    236c:	3302      	adds	r3, #2
    236e:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2372:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2376:	3304      	adds	r3, #4
    2378:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    237c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2380:	3304      	adds	r3, #4
    2382:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2386:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    238a:	3302      	adds	r3, #2
    238c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2390:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2394:	3302      	adds	r3, #2
    2396:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    if (*str) 
    239a:	496f      	ldr	r1, [pc, #444]	; (2558 <MTPD::WriteDescriptor()+0x2fc>)
    239c:	4638      	mov	r0, r7
    239e:	f7ff feb5 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    23a2:	496e      	ldr	r1, [pc, #440]	; (255c <MTPD::WriteDescriptor()+0x300>)
    23a4:	4638      	mov	r0, r7
    23a6:	f7ff feb1 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    23aa:	4642      	mov	r2, r8
    23ac:	2102      	movs	r1, #2
    23ae:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 2560 <MTPD::WriteDescriptor()+0x304>
    23b2:	2003      	movs	r0, #3
    23b4:	f00c f87c 	bl	e4b0 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    23b8:	2214      	movs	r2, #20
    23ba:	496a      	ldr	r1, [pc, #424]	; (2564 <MTPD::WriteDescriptor()+0x308>)
    23bc:	4640      	mov	r0, r8
    23be:	f010 f889 	bl	124d4 <strlcat>
    if (*str) 
    23c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    23c6:	b1bb      	cbz	r3, 23f8 <MTPD::WriteDescriptor()+0x19c>
    23c8:	4641      	mov	r1, r8
    23ca:	4638      	mov	r0, r7
    23cc:	f7ff fe9e 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    23d0:	4b65      	ldr	r3, [pc, #404]	; (2568 <MTPD::WriteDescriptor()+0x30c>)
    23d2:	4642      	mov	r2, r8
    23d4:	f103 0014 	add.w	r0, r3, #20
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    23d8:	f833 1f02 	ldrh.w	r1, [r3, #2]!
    23dc:	4283      	cmp	r3, r0
    23de:	f802 1b01 	strb.w	r1, [r2], #1
    23e2:	d1f9      	bne.n	23d8 <MTPD::WriteDescriptor()+0x17c>
    if (*str) 
    23e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    23e8:	b19b      	cbz	r3, 2412 <MTPD::WriteDescriptor()+0x1b6>
    23ea:	4641      	mov	r1, r8
    23ec:	4638      	mov	r0, r7
    23ee:	f7ff fe8d 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
  }
    23f2:	b007      	add	sp, #28
    23f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if (write_get_length_) 
    23f8:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    23fc:	f88d 3003 	strb.w	r3, [sp, #3]
    2400:	2a00      	cmp	r2, #0
    2402:	f000 809c 	beq.w	253e <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
    2406:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    240a:	3301      	adds	r3, #1
    240c:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2410:	e7de      	b.n	23d0 <MTPD::WriteDescriptor()+0x174>
    { if (write_get_length_) 
    2412:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    2416:	f88d 3003 	strb.w	r3, [sp, #3]
    241a:	2a00      	cmp	r2, #0
    241c:	f000 8086 	beq.w	252c <MTPD::WriteDescriptor()+0x2d0>
        write_length_ += len;
    2420:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2424:	3301      	adds	r3, #1
    2426:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
  }
    242a:	b007      	add	sp, #28
    242c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2430:	2204      	movs	r2, #4
    2432:	4641      	mov	r1, r8
    2434:	4638      	mov	r0, r7
    2436:	f7ff fe2b 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    243a:	f24d 4202 	movw	r2, #54274	; 0xd402
    { if (write_get_length_) 
    243e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0xd402);  // Device friendly name
    2442:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    2446:	2b00      	cmp	r3, #0
    2448:	d18e      	bne.n	2368 <MTPD::WriteDescriptor()+0x10c>
    244a:	2202      	movs	r2, #2
    244c:	4641      	mov	r1, r8
    244e:	4638      	mov	r0, r7
    2450:	f7ff fe1e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2454:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(0);       // Capture formats (array of uint16)
    2458:	9601      	str	r6, [sp, #4]
    { if (write_get_length_) 
    245a:	2b00      	cmp	r3, #0
    245c:	d189      	bne.n	2372 <MTPD::WriteDescriptor()+0x116>
    245e:	2204      	movs	r2, #4
    2460:	4641      	mov	r1, r8
    2462:	4638      	mov	r0, r7
    2464:	2402      	movs	r4, #2
    2466:	f7ff fe13 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    246a:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(2);       // Playback formats (array of uint16)
    246e:	9401      	str	r4, [sp, #4]
    { if (write_get_length_) 
    2470:	2b00      	cmp	r3, #0
    2472:	d183      	bne.n	237c <MTPD::WriteDescriptor()+0x120>
    2474:	2204      	movs	r2, #4
    2476:	4641      	mov	r1, r8
    2478:	4638      	mov	r0, r7
    247a:	f7ff fe09 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    247e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    2482:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3000);  // Undefined format
    2486:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    248a:	2b00      	cmp	r3, #0
    248c:	f47f af7b 	bne.w	2386 <MTPD::WriteDescriptor()+0x12a>
    2490:	4622      	mov	r2, r4
    2492:	4641      	mov	r1, r8
    2494:	4638      	mov	r0, r7
    2496:	f7ff fdfb 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    249a:	f243 0201 	movw	r2, #12289	; 0x3001
    249e:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(0x3001);  // Folders (associations)
    24a2:	f8ad 2004 	strh.w	r2, [sp, #4]
    { if (write_get_length_) 
    24a6:	2b00      	cmp	r3, #0
    24a8:	f47f af72 	bne.w	2390 <MTPD::WriteDescriptor()+0x134>
    24ac:	4622      	mov	r2, r4
    24ae:	4641      	mov	r1, r8
    24b0:	4638      	mov	r0, r7
    24b2:	f7ff fded 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    24b6:	e770      	b.n	239a <MTPD::WriteDescriptor()+0x13e>
    24b8:	4641      	mov	r1, r8
    24ba:	4638      	mov	r0, r7
    24bc:	f7ff fde8 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    24c0:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    24c4:	e726      	b.n	2314 <MTPD::WriteDescriptor()+0xb8>
    24c6:	2202      	movs	r2, #2
    24c8:	4641      	mov	r1, r8
    24ca:	4638      	mov	r0, r7
    24cc:	f7ff fde0 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    24d0:	2214      	movs	r2, #20
    24d2:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(supported_op_num);
    24d6:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    24d8:	2b00      	cmp	r3, #0
    24da:	f47f aeef 	bne.w	22bc <MTPD::WriteDescriptor()+0x60>
    24de:	2204      	movs	r2, #4
    24e0:	4641      	mov	r1, r8
    24e2:	4638      	mov	r0, r7
    24e4:	f7ff fdd4 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    24e8:	f895 6424 	ldrb.w	r6, [r5, #1060]	; 0x424
    24ec:	e6ec      	b.n	22c8 <MTPD::WriteDescriptor()+0x6c>
    24ee:	f10d 0804 	add.w	r8, sp, #4
    24f2:	2202      	movs	r2, #2
    24f4:	4641      	mov	r1, r8
    24f6:	f7ff fdcb 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    24fa:	2206      	movs	r2, #6
    24fc:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write32(6);    // MTP extension
    2500:	9201      	str	r2, [sp, #4]
    { if (write_get_length_) 
    2502:	2b00      	cmp	r3, #0
    2504:	f47f aebf 	bne.w	2286 <MTPD::WriteDescriptor()+0x2a>
    2508:	2204      	movs	r2, #4
    250a:	4641      	mov	r1, r8
    250c:	4638      	mov	r0, r7
    250e:	f7ff fdbf 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2512:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    write16(100);  // MTP version
    2516:	f8ad 4004 	strh.w	r4, [sp, #4]
    { if (write_get_length_) 
    251a:	2b00      	cmp	r3, #0
    251c:	f47f aeb8 	bne.w	2290 <MTPD::WriteDescriptor()+0x34>
    2520:	2202      	movs	r2, #2
    2522:	4641      	mov	r1, r8
    2524:	4638      	mov	r0, r7
    2526:	f7ff fdb3 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    252a:	e6b6      	b.n	229a <MTPD::WriteDescriptor()+0x3e>
    252c:	2201      	movs	r2, #1
    252e:	f10d 0103 	add.w	r1, sp, #3
    2532:	4638      	mov	r0, r7
    2534:	f7ff fdac 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2538:	b007      	add	sp, #28
    253a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    253e:	2201      	movs	r2, #1
    2540:	f10d 0103 	add.w	r1, sp, #3
    2544:	4638      	mov	r0, r7
    2546:	f7ff fda3 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    254a:	e741      	b.n	23d0 <MTPD::WriteDescriptor()+0x174>
    254c:	20000b94 	.word	0x20000b94
    2550:	200009c4 	.word	0x200009c4
    2554:	200009ec 	.word	0x200009ec
    2558:	20000ba8 	.word	0x20000ba8
    255c:	20000bbc 	.word	0x20000bbc
    2560:	3fcb851f 	.word	0x3fcb851f
    2564:	20000bb0 	.word	0x20000bb0
    2568:	2000953c 	.word	0x2000953c

0000256c <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    256c:	b5f0      	push	{r4, r5, r6, r7, lr}
    256e:	4606      	mov	r6, r0
    uint32_t num=storage_->get_FSCount();
    2570:	6800      	ldr	r0, [r0, #0]
    2572:	4a1b      	ldr	r2, [pc, #108]	; (25e0 <MTPD::WriteStorageIDs()+0x74>)
  void MTPD::WriteStorageIDs() {
    2574:	b083      	sub	sp, #12
    uint32_t num=storage_->get_FSCount();
    2576:	6803      	ldr	r3, [r0, #0]
    2578:	685b      	ldr	r3, [r3, #4]
    257a:	4293      	cmp	r3, r2
    257c:	d12c      	bne.n	25d8 <MTPD::WriteStorageIDs()+0x6c>
      uint32_t sd_getFSCount(void) {return fsCount;}
    257e:	6847      	ldr	r7, [r0, #4]
    { if (write_get_length_) 
    2580:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    2584:	9701      	str	r7, [sp, #4]
    2586:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    258a:	b1f3      	cbz	r3, 25ca <MTPD::WriteStorageIDs()+0x5e>
        write_length_ += len;
    258c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2590:	3304      	adds	r3, #4
    2592:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    2596:	b1b7      	cbz	r7, 25c6 <MTPD::WriteStorageIDs()+0x5a>
    2598:	2400      	movs	r4, #0
    259a:	e006      	b.n	25aa <MTPD::WriteStorageIDs()+0x3e>
        write_length_ += len;
    259c:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    25a0:	42bc      	cmp	r4, r7
        write_length_ += len;
    25a2:	4413      	add	r3, r2
    25a4:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    25a8:	d00d      	beq.n	25c6 <MTPD::WriteStorageIDs()+0x5a>
    25aa:	3401      	adds	r4, #1
    25ac:	2204      	movs	r2, #4
    { if (write_get_length_) 
    25ae:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    25b2:	4630      	mov	r0, r6
    25b4:	eb0d 0102 	add.w	r1, sp, r2
    25b8:	9401      	str	r4, [sp, #4]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d1ee      	bne.n	259c <MTPD::WriteStorageIDs()+0x30>
    25be:	f7ff fd67 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    25c2:	42bc      	cmp	r4, r7
    25c4:	d1f1      	bne.n	25aa <MTPD::WriteStorageIDs()+0x3e>
  }
    25c6:	b003      	add	sp, #12
    25c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ca:	2204      	movs	r2, #4
    25cc:	4630      	mov	r0, r6
    25ce:	eb0d 0102 	add.w	r1, sp, r2
    25d2:	f7ff fd5d 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    25d6:	e7de      	b.n	2596 <MTPD::WriteStorageIDs()+0x2a>
    uint32_t num=storage_->get_FSCount();
    25d8:	4798      	blx	r3
    25da:	4607      	mov	r7, r0
    25dc:	e7d0      	b.n	2580 <MTPD::WriteStorageIDs()+0x14>
    25de:	bf00      	nop
    25e0:	00002085 	.word	0x00002085

000025e4 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    25e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25e8:	4605      	mov	r5, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25ea:	6800      	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    25ec:	1e4e      	subs	r6, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    25ee:	b085      	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25f0:	6803      	ldr	r3, [r0, #0]
    { if (write_get_length_) 
    25f2:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    25f6:	4631      	mov	r1, r6
    25f8:	695b      	ldr	r3, [r3, #20]
    25fa:	4798      	blx	r3
    25fc:	2800      	cmp	r0, #0
    { if (write_get_length_) 
    25fe:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    2602:	bf14      	ite	ne
    2604:	2201      	movne	r2, #1
    2606:	2204      	moveq	r2, #4
    2608:	f8ad 2008 	strh.w	r2, [sp, #8]
    { if (write_get_length_) 
    260c:	2b00      	cmp	r3, #0
    260e:	d07c      	beq.n	270a <MTPD::GetStorageInfo(unsigned long)+0x126>
        write_length_ += len;
    2610:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2614:	3302      	adds	r3, #2
    2616:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    261a:	6828      	ldr	r0, [r5, #0]
    261c:	4631      	mov	r1, r6
    261e:	6803      	ldr	r3, [r0, #0]
    2620:	699b      	ldr	r3, [r3, #24]
    2622:	4798      	blx	r3
    { if (write_get_length_) 
    2624:	f894 7424 	ldrb.w	r7, [r4, #1060]	; 0x424
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    2628:	3001      	adds	r0, #1
    262a:	f8ad 0008 	strh.w	r0, [sp, #8]
    { if (write_get_length_) 
    262e:	2f00      	cmp	r7, #0
    2630:	f000 80a7 	beq.w	2782 <MTPD::GetStorageInfo(unsigned long)+0x19e>
        write_length_ += len;
    2634:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2638:	3302      	adds	r3, #2
    263a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    263e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2642:	3302      	adds	r3, #2
    2644:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    uint64_t ntotal = storage_->totalSize(store) ; 
    2648:	6828      	ldr	r0, [r5, #0]
    264a:	4631      	mov	r1, r6
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    264c:	f04f 0b00 	mov.w	fp, #0
    2650:	6803      	ldr	r3, [r0, #0]
    2652:	68db      	ldr	r3, [r3, #12]
    2654:	4798      	blx	r3
    2656:	4607      	mov	r7, r0
    uint64_t nused = storage_->usedSize(store) ; 
    2658:	6828      	ldr	r0, [r5, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    265a:	4688      	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    265c:	4631      	mov	r1, r6
    265e:	6803      	ldr	r3, [r0, #0]
    2660:	691b      	ldr	r3, [r3, #16]
    2662:	4798      	blx	r3
    2664:	4681      	mov	r9, r0
    2666:	468a      	mov	sl, r1
    2668:	4855      	ldr	r0, [pc, #340]	; (27c0 <MTPD::GetStorageInfo(unsigned long)+0x1dc>)
    266a:	2105      	movs	r1, #5
    266c:	f00d fbd2 	bl	fe14 <usb_serial_write>
    2670:	230a      	movs	r3, #10
    2672:	463a      	mov	r2, r7
    2674:	4853      	ldr	r0, [pc, #332]	; (27c4 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    2676:	9300      	str	r3, [sp, #0]
    2678:	4643      	mov	r3, r8
    267a:	f8cd b004 	str.w	fp, [sp, #4]
    267e:	f00b f87f 	bl	d780 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    2682:	4850      	ldr	r0, [pc, #320]	; (27c4 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    2684:	f00b f83e 	bl	d704 <Print::println()>
    2688:	2105      	movs	r1, #5
    268a:	484f      	ldr	r0, [pc, #316]	; (27c8 <MTPD::GetStorageInfo(unsigned long)+0x1e4>)
    268c:	f00d fbc2 	bl	fe14 <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    2690:	230a      	movs	r3, #10
    2692:	464a      	mov	r2, r9
    2694:	484b      	ldr	r0, [pc, #300]	; (27c4 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    2696:	9300      	str	r3, [sp, #0]
    2698:	4653      	mov	r3, sl
    269a:	f8cd b004 	str.w	fp, [sp, #4]
    269e:	f00b f86f 	bl	d780 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    26a2:	4848      	ldr	r0, [pc, #288]	; (27c4 <MTPD::GetStorageInfo(unsigned long)+0x1e0>)
    26a4:	f00b f82e 	bl	d704 <Print::println()>
    { if (write_get_length_) 
    26a8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    26ac:	e9cd 7802 	strd	r7, r8, [sp, #8]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d043      	beq.n	273c <MTPD::GetStorageInfo(unsigned long)+0x158>
        write_length_ += len;
    26b4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    26b8:	3308      	adds	r3, #8
    26ba:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    26be:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    26c2:	3308      	adds	r3, #8
    26c4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    26c8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    26cc:	3304      	adds	r3, #4
    26ce:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    const char *name = storage_->get_FSName(store);
    26d2:	6828      	ldr	r0, [r5, #0]
    26d4:	4a3d      	ldr	r2, [pc, #244]	; (27cc <MTPD::GetStorageInfo(unsigned long)+0x1e8>)
    26d6:	6803      	ldr	r3, [r0, #0]
    26d8:	689b      	ldr	r3, [r3, #8]
    26da:	4293      	cmp	r3, r2
    26dc:	d16b      	bne.n	27b6 <MTPD::GetStorageInfo(unsigned long)+0x1d2>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    26de:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    26e2:	6881      	ldr	r1, [r0, #8]
    if (*str) 
    26e4:	780b      	ldrb	r3, [r1, #0]
    26e6:	b1b3      	cbz	r3, 2716 <MTPD::GetStorageInfo(unsigned long)+0x132>
    26e8:	4628      	mov	r0, r5
    26ea:	f7ff fd0f 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    26ee:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    26f2:	2200      	movs	r2, #0
    26f4:	f88d 2008 	strb.w	r2, [sp, #8]
    { if (write_get_length_) 
    26f8:	b9c3      	cbnz	r3, 272c <MTPD::GetStorageInfo(unsigned long)+0x148>
    26fa:	2201      	movs	r2, #1
    26fc:	a902      	add	r1, sp, #8
    26fe:	4628      	mov	r0, r5
    2700:	f7ff fcc6 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2704:	b005      	add	sp, #20
    2706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    270a:	2202      	movs	r2, #2
    270c:	a902      	add	r1, sp, #8
    270e:	4628      	mov	r0, r5
    2710:	f7ff fcbe 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2714:	e781      	b.n	261a <MTPD::GetStorageInfo(unsigned long)+0x36>
    { if (write_get_length_) 
    2716:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    271a:	f88d 3008 	strb.w	r3, [sp, #8]
    271e:	2a00      	cmp	r2, #0
    2720:	d041      	beq.n	27a6 <MTPD::GetStorageInfo(unsigned long)+0x1c2>
        write_length_ += len;
    2722:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2726:	3301      	adds	r3, #1
    2728:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    272c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2730:	3301      	adds	r3, #1
    2732:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    2736:	b005      	add	sp, #20
    2738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    273c:	2208      	movs	r2, #8
    273e:	4628      	mov	r0, r5
    2740:	eb0d 0102 	add.w	r1, sp, r2
    2744:	f7ff fca4 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    write64((ntotal-nused));  // free space (100M)
    2748:	ebb7 0709 	subs.w	r7, r7, r9
    274c:	eb68 030a 	sbc.w	r3, r8, sl
    2750:	e9cd 7302 	strd	r7, r3, [sp, #8]
    { if (write_get_length_) 
    2754:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2758:	2b00      	cmp	r3, #0
    275a:	d1b0      	bne.n	26be <MTPD::GetStorageInfo(unsigned long)+0xda>
    275c:	2208      	movs	r2, #8
    275e:	4628      	mov	r0, r5
    2760:	eb0d 0102 	add.w	r1, sp, r2
    2764:	f7ff fc94 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2768:	f04f 32ff 	mov.w	r2, #4294967295
    276c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    write32(0xFFFFFFFFUL);  // free space (objects)
    2770:	9202      	str	r2, [sp, #8]
    { if (write_get_length_) 
    2772:	2b00      	cmp	r3, #0
    2774:	d1a8      	bne.n	26c8 <MTPD::GetStorageInfo(unsigned long)+0xe4>
    2776:	2204      	movs	r2, #4
    2778:	a902      	add	r1, sp, #8
    277a:	4628      	mov	r0, r5
    277c:	f7ff fc88 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2780:	e7a7      	b.n	26d2 <MTPD::GetStorageInfo(unsigned long)+0xee>
    2782:	2202      	movs	r2, #2
    2784:	4628      	mov	r0, r5
    2786:	a902      	add	r1, sp, #8
    2788:	f7ff fc82 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    278c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2790:	f8ad 7008 	strh.w	r7, [sp, #8]
    2794:	2b00      	cmp	r3, #0
    2796:	f47f af52 	bne.w	263e <MTPD::GetStorageInfo(unsigned long)+0x5a>
    279a:	2202      	movs	r2, #2
    279c:	a902      	add	r1, sp, #8
    279e:	4628      	mov	r0, r5
    27a0:	f7ff fc76 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    27a4:	e750      	b.n	2648 <MTPD::GetStorageInfo(unsigned long)+0x64>
    27a6:	2201      	movs	r2, #1
    27a8:	a902      	add	r1, sp, #8
    27aa:	4628      	mov	r0, r5
    27ac:	f7ff fc70 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    27b0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    27b4:	e79d      	b.n	26f2 <MTPD::GetStorageInfo(unsigned long)+0x10e>
    const char *name = storage_->get_FSName(store);
    27b6:	4631      	mov	r1, r6
    27b8:	4798      	blx	r3
    27ba:	4601      	mov	r1, r0
    27bc:	e792      	b.n	26e4 <MTPD::GetStorageInfo(unsigned long)+0x100>
    27be:	bf00      	nop
    27c0:	20000b84 	.word	0x20000b84
    27c4:	20008b94 	.word	0x20008b94
    27c8:	20000b8c 	.word	0x20000b8c
    27cc:	00002089 	.word	0x00002089

000027d0 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	4606      	mov	r6, r0
    storage_->StartGetObjectHandles(store, parent);
    27d4:	6800      	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    27d6:	1e4d      	subs	r5, r1, #1
    int num = 0;
    27d8:	2400      	movs	r4, #0
    storage_->StartGetObjectHandles(store, parent);
    27da:	6803      	ldr	r3, [r0, #0]
    27dc:	4629      	mov	r1, r5
    27de:	69db      	ldr	r3, [r3, #28]
    27e0:	4798      	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    27e2:	e000      	b.n	27e6 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x16>
    27e4:	3401      	adds	r4, #1
    27e6:	6830      	ldr	r0, [r6, #0]
    27e8:	4629      	mov	r1, r5
    27ea:	6803      	ldr	r3, [r0, #0]
    27ec:	6a1b      	ldr	r3, [r3, #32]
    27ee:	4798      	blx	r3
    27f0:	2800      	cmp	r0, #0
    27f2:	d1f7      	bne.n	27e4 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x14>
  }
    27f4:	4620      	mov	r0, r4
    27f6:	bd70      	pop	{r4, r5, r6, pc}

000027f8 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    27f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (write_get_length_) {
    27fa:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    27fe:	b083      	sub	sp, #12
    if (write_get_length_) {
    2800:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2804:	b13b      	cbz	r3, 2816 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    2806:	f7ff ffe3 	bl	27d0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    280a:	3001      	adds	r0, #1
      write_length_ *= 4;
    280c:	0080      	lsls	r0, r0, #2
    280e:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
  }
    2812:	b003      	add	sp, #12
    2814:	bdf0      	pop	{r4, r5, r6, r7, pc}
      write32(GetNumObjects(storage, parent));
    2816:	4604      	mov	r4, r0
    2818:	460e      	mov	r6, r1
    281a:	4617      	mov	r7, r2
    281c:	f7ff ffd8 	bl	27d0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    { if (write_get_length_) 
    2820:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2824:	9001      	str	r0, [sp, #4]
    2826:	bb13      	cbnz	r3, 286e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x76>
    2828:	2204      	movs	r2, #4
    282a:	4620      	mov	r0, r4
    282c:	eb0d 0102 	add.w	r1, sp, r2
    2830:	f7ff fc2e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
      storage_->StartGetObjectHandles(store, parent);
    2834:	6820      	ldr	r0, [r4, #0]
  { uint32_t store = Storage2Store(storage);
    2836:	3e01      	subs	r6, #1
      storage_->StartGetObjectHandles(store, parent);
    2838:	463a      	mov	r2, r7
    283a:	6803      	ldr	r3, [r0, #0]
    283c:	4631      	mov	r1, r6
    283e:	69db      	ldr	r3, [r3, #28]
    2840:	4798      	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    2842:	6820      	ldr	r0, [r4, #0]
    2844:	4631      	mov	r1, r6
    2846:	6803      	ldr	r3, [r0, #0]
    2848:	6a1b      	ldr	r3, [r3, #32]
    284a:	4798      	blx	r3
        write_length_ += len;
    284c:	2204      	movs	r2, #4
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    284e:	4603      	mov	r3, r0
    2850:	4620      	mov	r0, r4
    2852:	eb0d 0102 	add.w	r1, sp, r2
    2856:	2b00      	cmp	r3, #0
    2858:	d0db      	beq.n	2812 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1a>
    { if (write_get_length_) 
    285a:	f895 7424 	ldrb.w	r7, [r5, #1060]	; 0x424
    285e:	9301      	str	r3, [sp, #4]
    2860:	b15f      	cbz	r7, 287a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x82>
        write_length_ += len;
    2862:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2866:	3304      	adds	r3, #4
    2868:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    286c:	e7e9      	b.n	2842 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>
    286e:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
    2872:	3304      	adds	r3, #4
    2874:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
    2878:	e7dc      	b.n	2834 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x3c>
    287a:	f7ff fc09 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    287e:	e7e0      	b.n	2842 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x4a>

00002880 <MTPD::GetObjectInfo(unsigned long)>:
  {
    2880:	b5f0      	push	{r4, r5, r6, r7, lr}
    2882:	4605      	mov	r5, r0
    2884:	b0c7      	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    2886:	6800      	ldr	r0, [r0, #0]
    2888:	f10d 040a 	add.w	r4, sp, #10
    288c:	af04      	add	r7, sp, #16
    288e:	6802      	ldr	r2, [r0, #0]
    2890:	ab03      	add	r3, sp, #12
    2892:	e9cd 7400 	strd	r7, r4, [sp]
    2896:	6a56      	ldr	r6, [r2, #36]	; 0x24
    2898:	aa06      	add	r2, sp, #24
    289a:	47b0      	blx	r6
    uint32_t storage = Store2Storage(store);
    289c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    { if (write_get_length_) 
    28a0:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
    uint32_t storage = Store2Storage(store);
    28a4:	3301      	adds	r3, #1
    28a6:	9305      	str	r3, [sp, #20]
    { if (write_get_length_) 
    28a8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    28ac:	2b00      	cmp	r3, #0
    28ae:	f000 8090 	beq.w	29d2 <MTPD::GetObjectInfo(unsigned long)+0x152>
        write_length_ += len;
    28b2:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28b6:	3304      	adds	r3, #4
    28b8:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28bc:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28c0:	3302      	adds	r3, #2
    28c2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28c6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28ca:	3302      	adds	r3, #2
    28cc:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28d0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28d4:	3304      	adds	r3, #4
    28d6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28da:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28de:	3302      	adds	r3, #2
    28e0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28e4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28e8:	3304      	adds	r3, #4
    28ea:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28ee:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28f2:	3304      	adds	r3, #4
    28f4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    28f8:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    28fc:	3304      	adds	r3, #4
    28fe:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2902:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2906:	3304      	adds	r3, #4
    2908:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    290c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2910:	3304      	adds	r3, #4
    2912:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2916:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    291a:	3304      	adds	r3, #4
    291c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2920:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2924:	3304      	adds	r3, #4
    2926:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    292a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    292e:	3302      	adds	r3, #2
    2930:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2934:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2938:	3304      	adds	r3, #4
    293a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    293e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2942:	3304      	adds	r3, #4
    2944:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    if (*str) 
    2948:	f89d 3018 	ldrb.w	r3, [sp, #24]
    294c:	b323      	cbz	r3, 2998 <MTPD::GetObjectInfo(unsigned long)+0x118>
    294e:	a906      	add	r1, sp, #24
    2950:	4628      	mov	r0, r5
    2952:	f7ff fbdb 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    { if (write_get_length_) 
    2956:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    { write8(0);
    295a:	2300      	movs	r3, #0
    295c:	f88d 3014 	strb.w	r3, [sp, #20]
    { if (write_get_length_) 
    2960:	bb36      	cbnz	r6, 29b0 <MTPD::GetObjectInfo(unsigned long)+0x130>
    2962:	2201      	movs	r2, #1
    2964:	a905      	add	r1, sp, #20
    2966:	4628      	mov	r0, r5
    2968:	f7ff fb92 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    296c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    2970:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    2974:	bb0b      	cbnz	r3, 29ba <MTPD::GetObjectInfo(unsigned long)+0x13a>
    2976:	2201      	movs	r2, #1
    2978:	a905      	add	r1, sp, #20
    297a:	4628      	mov	r0, r5
    297c:	f7ff fb88 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2980:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    { write8(0);
    2984:	f88d 6014 	strb.w	r6, [sp, #20]
    { if (write_get_length_) 
    2988:	b9e3      	cbnz	r3, 29c4 <MTPD::GetObjectInfo(unsigned long)+0x144>
    298a:	2201      	movs	r2, #1
    298c:	a905      	add	r1, sp, #20
    298e:	4628      	mov	r0, r5
    2990:	f7ff fb7e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
  }
    2994:	b047      	add	sp, #284	; 0x11c
    2996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2998:	f894 2424 	ldrb.w	r2, [r4, #1060]	; 0x424
    299c:	f88d 3014 	strb.w	r3, [sp, #20]
    29a0:	2a00      	cmp	r2, #0
    29a2:	f000 80c8 	beq.w	2b36 <MTPD::GetObjectInfo(unsigned long)+0x2b6>
        write_length_ += len;
    29a6:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29aa:	3301      	adds	r3, #1
    29ac:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29b0:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29b4:	3301      	adds	r3, #1
    29b6:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29ba:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29be:	3301      	adds	r3, #1
    29c0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    29c4:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    29c8:	3301      	adds	r3, #1
    29ca:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  }
    29ce:	b047      	add	sp, #284	; 0x11c
    29d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29d2:	2204      	movs	r2, #4
    29d4:	a905      	add	r1, sp, #20
    29d6:	4628      	mov	r0, r5
    29d8:	f7ff fb5a 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    29dc:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    29de:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    29e2:	3301      	adds	r3, #1
    29e4:	f243 0301 	movw	r3, #12289	; 0x3001
    29e8:	bf18      	it	ne
    29ea:	2300      	movne	r3, #0
    29ec:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    29f0:	2e00      	cmp	r6, #0
    29f2:	f47f af63 	bne.w	28bc <MTPD::GetObjectInfo(unsigned long)+0x3c>
    29f6:	2202      	movs	r2, #2
    29f8:	a905      	add	r1, sp, #20
    29fa:	4628      	mov	r0, r5
    29fc:	f7ff fb48 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a00:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a04:	f8ad 6014 	strh.w	r6, [sp, #20]
    2a08:	2b00      	cmp	r3, #0
    2a0a:	f47f af5c 	bne.w	28c6 <MTPD::GetObjectInfo(unsigned long)+0x46>
    2a0e:	2202      	movs	r2, #2
    2a10:	a905      	add	r1, sp, #20
    2a12:	4628      	mov	r0, r5
    2a14:	f7ff fb3c 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a18:	9b03      	ldr	r3, [sp, #12]
    2a1a:	9305      	str	r3, [sp, #20]
    2a1c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a20:	2b00      	cmp	r3, #0
    2a22:	f47f af55 	bne.w	28d0 <MTPD::GetObjectInfo(unsigned long)+0x50>
    2a26:	2204      	movs	r2, #4
    2a28:	a905      	add	r1, sp, #20
    2a2a:	4628      	mov	r0, r5
    2a2c:	f7ff fb30 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a30:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a34:	f8ad 6014 	strh.w	r6, [sp, #20]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	f47f af4e 	bne.w	28da <MTPD::GetObjectInfo(unsigned long)+0x5a>
    2a3e:	2202      	movs	r2, #2
    2a40:	a905      	add	r1, sp, #20
    2a42:	4628      	mov	r0, r5
    2a44:	f7ff fb24 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a48:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a4c:	9605      	str	r6, [sp, #20]
    2a4e:	2b00      	cmp	r3, #0
    2a50:	f47f af48 	bne.w	28e4 <MTPD::GetObjectInfo(unsigned long)+0x64>
    2a54:	2204      	movs	r2, #4
    2a56:	a905      	add	r1, sp, #20
    2a58:	4628      	mov	r0, r5
    2a5a:	f7ff fb19 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a5e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a62:	9605      	str	r6, [sp, #20]
    2a64:	2b00      	cmp	r3, #0
    2a66:	f47f af42 	bne.w	28ee <MTPD::GetObjectInfo(unsigned long)+0x6e>
    2a6a:	2204      	movs	r2, #4
    2a6c:	a905      	add	r1, sp, #20
    2a6e:	4628      	mov	r0, r5
    2a70:	f7ff fb0e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a74:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a78:	9605      	str	r6, [sp, #20]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	f47f af3c 	bne.w	28f8 <MTPD::GetObjectInfo(unsigned long)+0x78>
    2a80:	2204      	movs	r2, #4
    2a82:	a905      	add	r1, sp, #20
    2a84:	4628      	mov	r0, r5
    2a86:	f7ff fb03 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2a8a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2a8e:	9605      	str	r6, [sp, #20]
    2a90:	2b00      	cmp	r3, #0
    2a92:	f47f af36 	bne.w	2902 <MTPD::GetObjectInfo(unsigned long)+0x82>
    2a96:	2204      	movs	r2, #4
    2a98:	a905      	add	r1, sp, #20
    2a9a:	4628      	mov	r0, r5
    2a9c:	f7ff faf8 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2aa0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2aa4:	9605      	str	r6, [sp, #20]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	f47f af30 	bne.w	290c <MTPD::GetObjectInfo(unsigned long)+0x8c>
    2aac:	2204      	movs	r2, #4
    2aae:	a905      	add	r1, sp, #20
    2ab0:	4628      	mov	r0, r5
    2ab2:	f7ff faed 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2ab6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2aba:	9605      	str	r6, [sp, #20]
    2abc:	2b00      	cmp	r3, #0
    2abe:	f47f af2a 	bne.w	2916 <MTPD::GetObjectInfo(unsigned long)+0x96>
    2ac2:	2204      	movs	r2, #4
    2ac4:	a905      	add	r1, sp, #20
    2ac6:	4628      	mov	r0, r5
    2ac8:	f7ff fae2 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2acc:	683b      	ldr	r3, [r7, #0]
    2ace:	9305      	str	r3, [sp, #20]
    2ad0:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	f47f af23 	bne.w	2920 <MTPD::GetObjectInfo(unsigned long)+0xa0>
    2ada:	2204      	movs	r2, #4
    2adc:	a905      	add	r1, sp, #20
    2ade:	4628      	mov	r0, r5
    2ae0:	f7ff fad6 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2ae4:	9b03      	ldr	r3, [sp, #12]
    { if (write_get_length_) 
    2ae6:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    2aea:	f1a3 33ff 	sub.w	r3, r3, #4294967295
    2aee:	fab3 f383 	clz	r3, r3
    2af2:	095b      	lsrs	r3, r3, #5
    2af4:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    2af8:	2e00      	cmp	r6, #0
    2afa:	f47f af16 	bne.w	292a <MTPD::GetObjectInfo(unsigned long)+0xaa>
    2afe:	2202      	movs	r2, #2
    2b00:	a905      	add	r1, sp, #20
    2b02:	4628      	mov	r0, r5
    2b04:	f7ff fac4 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2b08:	9605      	str	r6, [sp, #20]
    2b0a:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2b0e:	2e00      	cmp	r6, #0
    2b10:	f47f af10 	bne.w	2934 <MTPD::GetObjectInfo(unsigned long)+0xb4>
    2b14:	2204      	movs	r2, #4
    2b16:	a905      	add	r1, sp, #20
    2b18:	4628      	mov	r0, r5
    2b1a:	f7ff fab9 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2b1e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2b22:	9605      	str	r6, [sp, #20]
    2b24:	2b00      	cmp	r3, #0
    2b26:	f47f af0a 	bne.w	293e <MTPD::GetObjectInfo(unsigned long)+0xbe>
    2b2a:	2204      	movs	r2, #4
    2b2c:	a905      	add	r1, sp, #20
    2b2e:	4628      	mov	r0, r5
    2b30:	f7ff faae 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2b34:	e708      	b.n	2948 <MTPD::GetObjectInfo(unsigned long)+0xc8>
    2b36:	2201      	movs	r2, #1
    2b38:	a905      	add	r1, sp, #20
    2b3a:	4628      	mov	r0, r5
    2b3c:	f7ff faa8 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2b40:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2b44:	e709      	b.n	295a <MTPD::GetObjectInfo(unsigned long)+0xda>
    2b46:	bf00      	nop

00002b48 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    2b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      write32(propertyListNum);
    2b4c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2bcc <MTPD::getObjectPropsSupported(unsigned long)+0x84>
    { if (write_get_length_) 
    2b50:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
    {
    2b54:	b082      	sub	sp, #8
    2b56:	4607      	mov	r7, r0
      write32(propertyListNum);
    2b58:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    2b5c:	f895 2424 	ldrb.w	r2, [r5, #1060]	; 0x424
    2b60:	9301      	str	r3, [sp, #4]
    2b62:	b34a      	cbz	r2, 2bb8 <MTPD::getObjectPropsSupported(unsigned long)+0x70>
        write_length_ += len;
    2b64:	f8d5 2428 	ldr.w	r2, [r5, #1064]	; 0x428
    2b68:	3204      	adds	r2, #4
    2b6a:	f8c5 2428 	str.w	r2, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2b6e:	b303      	cbz	r3, 2bb2 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2b70:	4e15      	ldr	r6, [pc, #84]	; (2bc8 <MTPD::getObjectPropsSupported(unsigned long)+0x80>)
    2b72:	f64d 4c01 	movw	ip, #56321	; 0xdc01
    2b76:	2400      	movs	r4, #0
    2b78:	e00b      	b.n	2b92 <MTPD::getObjectPropsSupported(unsigned long)+0x4a>
        write_length_ += len;
    2b7a:	f8d5 3428 	ldr.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2b7e:	3401      	adds	r4, #1
        write_length_ += len;
    2b80:	4413      	add	r3, r2
    2b82:	f8c5 3428 	str.w	r3, [r5, #1064]	; 0x428
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2b86:	f8d8 3000 	ldr.w	r3, [r8]
    2b8a:	42a3      	cmp	r3, r4
    2b8c:	d911      	bls.n	2bb2 <MTPD::getObjectPropsSupported(unsigned long)+0x6a>
    2b8e:	f836 cf02 	ldrh.w	ip, [r6, #2]!
    { if (write_get_length_) 
    2b92:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
    2b96:	2202      	movs	r2, #2
    2b98:	a901      	add	r1, sp, #4
    2b9a:	4638      	mov	r0, r7
    2b9c:	f8ad c004 	strh.w	ip, [sp, #4]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d1ea      	bne.n	2b7a <MTPD::getObjectPropsSupported(unsigned long)+0x32>
    2ba4:	f7ff fa74 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2ba8:	3401      	adds	r4, #1
    2baa:	f8d8 3000 	ldr.w	r3, [r8]
    2bae:	42a3      	cmp	r3, r4
    2bb0:	d8ed      	bhi.n	2b8e <MTPD::getObjectPropsSupported(unsigned long)+0x46>
    }
    2bb2:	b002      	add	sp, #8
    2bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bb8:	2204      	movs	r2, #4
    2bba:	eb0d 0102 	add.w	r1, sp, r2
    2bbe:	f7ff fa67 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    2bc2:	f8d8 3000 	ldr.w	r3, [r8]
    2bc6:	e7d2      	b.n	2b6e <MTPD::getObjectPropsSupported(unsigned long)+0x26>
    2bc8:	200009b4 	.word	0x200009b4
    2bcc:	20009518 	.word	0x20009518

00002bd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    2bd0:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
    2bd4:	440b      	add	r3, r1
    {
    2bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bd8:	b085      	sub	sp, #20
      switch(p1)
    2bda:	2b43      	cmp	r3, #67	; 0x43
    2bdc:	f200 808e 	bhi.w	2cfc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2be0:	e8df f013 	tbh	[pc, r3, lsl #1]
    2be4:	010700b9 	.word	0x010700b9
    2be8:	01610125 	.word	0x01610125
    2bec:	008c008c 	.word	0x008c008c
    2bf0:	0196008e 	.word	0x0196008e
    2bf4:	008c01a2 	.word	0x008c01a2
    2bf8:	008c00d7 	.word	0x008c00d7
    2bfc:	008c008c 	.word	0x008c008c
    2c00:	008c008c 	.word	0x008c008c
    2c04:	008c008c 	.word	0x008c008c
    2c08:	008c008c 	.word	0x008c008c
    2c0c:	008c008c 	.word	0x008c008c
    2c10:	008c008c 	.word	0x008c008c
    2c14:	008c008c 	.word	0x008c008c
    2c18:	008c008c 	.word	0x008c008c
    2c1c:	008c008c 	.word	0x008c008c
    2c20:	008c008c 	.word	0x008c008c
    2c24:	008c008c 	.word	0x008c008c
    2c28:	008c008c 	.word	0x008c008c
    2c2c:	008c008c 	.word	0x008c008c
    2c30:	008c008c 	.word	0x008c008c
    2c34:	008c008c 	.word	0x008c008c
    2c38:	008c008c 	.word	0x008c008c
    2c3c:	008c008c 	.word	0x008c008c
    2c40:	008c008c 	.word	0x008c008c
    2c44:	008c008c 	.word	0x008c008c
    2c48:	008c008c 	.word	0x008c008c
    2c4c:	008c008c 	.word	0x008c008c
    2c50:	008c008c 	.word	0x008c008c
    2c54:	008c008c 	.word	0x008c008c
    2c58:	008c008c 	.word	0x008c008c
    2c5c:	008c008c 	.word	0x008c008c
    2c60:	008c008c 	.word	0x008c008c
    2c64:	008c01ae 	.word	0x008c01ae
    2c68:	0044008c 	.word	0x0044008c
    { if (write_get_length_) 
    2c6c:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2c70:	f64d 4244 	movw	r2, #56388	; 0xdc44
    2c74:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2c78:	f8ad 2008 	strh.w	r2, [sp, #8]
    2c7c:	2b00      	cmp	r3, #0
    2c7e:	d14a      	bne.n	2d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2c80:	2202      	movs	r2, #2
    2c82:	a902      	add	r1, sp, #8
    2c84:	9001      	str	r0, [sp, #4]
    2c86:	f7ff fa03 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c8e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2c92:	9801      	ldr	r0, [sp, #4]
    2c94:	f8ad 3008 	strh.w	r3, [sp, #8]
    2c98:	2e00      	cmp	r6, #0
    2c9a:	d141      	bne.n	2d20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    2c9c:	2202      	movs	r2, #2
    2c9e:	a902      	add	r1, sp, #8
    2ca0:	9001      	str	r0, [sp, #4]
    2ca2:	f7ff f9f5 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2ca6:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2caa:	9801      	ldr	r0, [sp, #4]
    2cac:	f88d 6008 	strb.w	r6, [sp, #8]
    2cb0:	2d00      	cmp	r5, #0
    2cb2:	d13a      	bne.n	2d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    2cb4:	2201      	movs	r2, #1
    2cb6:	a902      	add	r1, sp, #8
    2cb8:	9001      	str	r0, [sp, #4]
    2cba:	f7ff f9e9 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2cbe:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2cc2:	9801      	ldr	r0, [sp, #4]
    2cc4:	f88d 5008 	strb.w	r5, [sp, #8]
    2cc8:	bba6      	cbnz	r6, 2d34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    2cca:	2201      	movs	r2, #1
    2ccc:	a902      	add	r1, sp, #8
    2cce:	9001      	str	r0, [sp, #4]
    2cd0:	f7ff f9de 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2cd4:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2cd8:	9801      	ldr	r0, [sp, #4]
    2cda:	9602      	str	r6, [sp, #8]
    2cdc:	bb7d      	cbnz	r5, 2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2cde:	2204      	movs	r2, #4
    2ce0:	a902      	add	r1, sp, #8
    2ce2:	9001      	str	r0, [sp, #4]
    2ce4:	f7ff f9d4 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2ce8:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2cec:	9801      	ldr	r0, [sp, #4]
    2cee:	f88d 5008 	strb.w	r5, [sp, #8]
    2cf2:	bb4b      	cbnz	r3, 2d48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
    2cf4:	2201      	movs	r2, #1
    2cf6:	a902      	add	r1, sp, #8
    2cf8:	f7ff f9ca 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    }
    2cfc:	b005      	add	sp, #20
    2cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2d00:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d04:	f64d 4207 	movw	r2, #56327	; 0xdc07
    2d08:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d0c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d10:	2b00      	cmp	r3, #0
    2d12:	f000 8170 	beq.w	2ff6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x426>
        write_length_ += len;
    2d16:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d1a:	3302      	adds	r3, #2
    2d1c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d20:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d24:	3302      	adds	r3, #2
    2d26:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d2a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d2e:	3301      	adds	r3, #1
    2d30:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d34:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d38:	3301      	adds	r3, #1
    2d3a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d3e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d42:	3304      	adds	r3, #4
    2d44:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d48:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d4c:	3301      	adds	r3, #1
    2d4e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    }
    2d52:	b005      	add	sp, #20
    2d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    { if (write_get_length_) 
    2d56:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d5a:	f64d 4201 	movw	r2, #56321	; 0xdc01
    2d5e:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d62:	f8ad 2008 	strh.w	r2, [sp, #8]
    2d66:	b1f3      	cbz	r3, 2da6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d6>
        write_length_ += len;
    2d68:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d6c:	3302      	adds	r3, #2
    2d6e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d72:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d76:	3302      	adds	r3, #2
    2d78:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d7c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d80:	3301      	adds	r3, #1
    2d82:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2d86:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2d8a:	3304      	adds	r3, #4
    2d8c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2d90:	e7d5      	b.n	2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2d92:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2d96:	f64d 420b 	movw	r2, #56331	; 0xdc0b
    2d9a:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2d9e:	f8ad 2008 	strh.w	r2, [sp, #8]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d1e0      	bne.n	2d68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x198>
    2da6:	2202      	movs	r2, #2
    2da8:	a902      	add	r1, sp, #8
    2daa:	9001      	str	r0, [sp, #4]
    2dac:	f7ff f970 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2db0:	2306      	movs	r3, #6
    2db2:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2db6:	9801      	ldr	r0, [sp, #4]
    2db8:	f8ad 3008 	strh.w	r3, [sp, #8]
    2dbc:	2e00      	cmp	r6, #0
    2dbe:	d1d8      	bne.n	2d72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2>
    2dc0:	2202      	movs	r2, #2
    2dc2:	a902      	add	r1, sp, #8
    2dc4:	9001      	str	r0, [sp, #4]
    2dc6:	f7ff f963 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2dca:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2dce:	9801      	ldr	r0, [sp, #4]
    2dd0:	f88d 6008 	strb.w	r6, [sp, #8]
    2dd4:	2d00      	cmp	r5, #0
    2dd6:	d1d1      	bne.n	2d7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac>
    2dd8:	2201      	movs	r2, #1
    2dda:	a902      	add	r1, sp, #8
    2ddc:	9001      	str	r0, [sp, #4]
    2dde:	f7ff f957 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2de2:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2de6:	9801      	ldr	r0, [sp, #4]
    2de8:	9502      	str	r5, [sp, #8]
    2dea:	2e00      	cmp	r6, #0
    2dec:	d1cb      	bne.n	2d86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b6>
    2dee:	2204      	movs	r2, #4
    2df0:	e76c      	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2df2:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2df6:	f64d 4202 	movw	r2, #56322	; 0xdc02
    2dfa:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2dfe:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e02:	b1f3      	cbz	r3, 2e42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x272>
        write_length_ += len;
    2e04:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e08:	3302      	adds	r3, #2
    2e0a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e0e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e12:	3302      	adds	r3, #2
    2e14:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e18:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e1c:	3301      	adds	r3, #1
    2e1e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2e22:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2e26:	3302      	adds	r3, #2
    2e28:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2e2c:	e787      	b.n	2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2e2e:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2e32:	f64d 4203 	movw	r2, #56323	; 0xdc03
    2e36:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2e3a:	f8ad 2008 	strh.w	r2, [sp, #8]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d1e0      	bne.n	2e04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x234>
    2e42:	2202      	movs	r2, #2
    2e44:	a902      	add	r1, sp, #8
    2e46:	9001      	str	r0, [sp, #4]
    2e48:	2604      	movs	r6, #4
    2e4a:	f7ff f921 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2e4e:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e52:	9801      	ldr	r0, [sp, #4]
    2e54:	f8ad 6008 	strh.w	r6, [sp, #8]
    2e58:	2d00      	cmp	r5, #0
    2e5a:	d1d8      	bne.n	2e0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x23e>
    2e5c:	2202      	movs	r2, #2
    2e5e:	a902      	add	r1, sp, #8
    2e60:	9001      	str	r0, [sp, #4]
    2e62:	f7ff f915 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2e66:	f88d 5008 	strb.w	r5, [sp, #8]
    2e6a:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e6e:	9801      	ldr	r0, [sp, #4]
    2e70:	2d00      	cmp	r5, #0
    2e72:	d1d1      	bne.n	2e18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x248>
    2e74:	2201      	movs	r2, #1
    2e76:	a902      	add	r1, sp, #8
    2e78:	9001      	str	r0, [sp, #4]
    2e7a:	f7ff f909 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2e7e:	f8ad 5008 	strh.w	r5, [sp, #8]
    2e82:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e86:	9801      	ldr	r0, [sp, #4]
    2e88:	2d00      	cmp	r5, #0
    2e8a:	d1ca      	bne.n	2e22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x252>
    2e8c:	2202      	movs	r2, #2
    2e8e:	a902      	add	r1, sp, #8
    2e90:	9001      	str	r0, [sp, #4]
    2e92:	f7ff f8fd 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2e96:	9502      	str	r5, [sp, #8]
    2e98:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2e9c:	9801      	ldr	r0, [sp, #4]
    2e9e:	2d00      	cmp	r5, #0
    2ea0:	f43f af1d 	beq.w	2cde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10e>
    2ea4:	e74b      	b.n	2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2ea6:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2eaa:	f64d 4204 	movw	r2, #56324	; 0xdc04
    2eae:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2eb2:	f8ad 2008 	strh.w	r2, [sp, #8]
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	f040 80e1 	bne.w	307e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4ae>
    2ebc:	2202      	movs	r2, #2
    2ebe:	a902      	add	r1, sp, #8
    2ec0:	9001      	str	r0, [sp, #4]
    2ec2:	2508      	movs	r5, #8
    2ec4:	f7ff f8e4 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2ec8:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2ecc:	9801      	ldr	r0, [sp, #4]
    2ece:	f8ad 5008 	strh.w	r5, [sp, #8]
    2ed2:	2e00      	cmp	r6, #0
    2ed4:	f040 80d8 	bne.w	3088 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4b8>
    2ed8:	2202      	movs	r2, #2
    2eda:	a902      	add	r1, sp, #8
    2edc:	9001      	str	r0, [sp, #4]
    2ede:	f7ff f8d7 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2ee2:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2ee6:	9801      	ldr	r0, [sp, #4]
    2ee8:	f88d 6008 	strb.w	r6, [sp, #8]
    2eec:	2b00      	cmp	r3, #0
    2eee:	f040 80d0 	bne.w	3092 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4c2>
    2ef2:	2201      	movs	r2, #1
    2ef4:	a902      	add	r1, sp, #8
    2ef6:	9001      	str	r0, [sp, #4]
    2ef8:	f7ff f8ca 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2efc:	2200      	movs	r2, #0
    2efe:	2300      	movs	r3, #0
    2f00:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2f04:	9801      	ldr	r0, [sp, #4]
    2f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
    2f0a:	bbb6      	cbnz	r6, 2f7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2f0c:	462a      	mov	r2, r5
    2f0e:	e6dd      	b.n	2ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfc>
    2f10:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f14:	f64d 4208 	movw	r2, #56328	; 0xdc08
    2f18:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f1c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f20:	2b00      	cmp	r3, #0
    2f22:	f43f aead 	beq.w	2c80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2f26:	e6f6      	b.n	2d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2f28:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f2c:	f64d 4209 	movw	r2, #56329	; 0xdc09
    2f30:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f34:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f38:	2b00      	cmp	r3, #0
    2f3a:	f43f aea1 	beq.w	2c80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb0>
    2f3e:	e6ea      	b.n	2d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146>
    2f40:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
    2f44:	f64d 4241 	movw	r2, #56385	; 0xdc41
    2f48:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2f4c:	f8ad 2008 	strh.w	r2, [sp, #8]
    2f50:	b1cb      	cbz	r3, 2f86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3b6>
        write_length_ += len;
    2f52:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f56:	3302      	adds	r3, #2
    2f58:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2f5c:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f60:	3302      	adds	r3, #2
    2f62:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2f66:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f6a:	3301      	adds	r3, #1
    2f6c:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2f70:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f74:	3308      	adds	r3, #8
    2f76:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    2f7a:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    2f7e:	3308      	adds	r3, #8
    2f80:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    2f84:	e6db      	b.n	2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    2f86:	2202      	movs	r2, #2
    2f88:	a902      	add	r1, sp, #8
    2f8a:	9001      	str	r0, [sp, #4]
    2f8c:	f7ff f880 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2f90:	230a      	movs	r3, #10
    2f92:	f894 5424 	ldrb.w	r5, [r4, #1060]	; 0x424
    2f96:	9801      	ldr	r0, [sp, #4]
    2f98:	f8ad 3008 	strh.w	r3, [sp, #8]
    2f9c:	2d00      	cmp	r5, #0
    2f9e:	d1dd      	bne.n	2f5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38c>
    2fa0:	2202      	movs	r2, #2
    2fa2:	a902      	add	r1, sp, #8
    2fa4:	9001      	str	r0, [sp, #4]
    2fa6:	f7ff f873 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2faa:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2fae:	9801      	ldr	r0, [sp, #4]
    2fb0:	f88d 5008 	strb.w	r5, [sp, #8]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d1d6      	bne.n	2f66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x396>
    2fb8:	2201      	movs	r2, #1
    2fba:	a902      	add	r1, sp, #8
    2fbc:	9001      	str	r0, [sp, #4]
    2fbe:	2600      	movs	r6, #0
    2fc0:	f7ff f866 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2fc4:	2700      	movs	r7, #0
    2fc6:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    2fca:	9801      	ldr	r0, [sp, #4]
    2fcc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d1cd      	bne.n	2f70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2fd4:	2208      	movs	r2, #8
    2fd6:	9001      	str	r0, [sp, #4]
    2fd8:	eb0d 0102 	add.w	r1, sp, r2
    2fdc:	f7ff f858 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    2fe0:	9801      	ldr	r0, [sp, #4]
    2fe2:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2fe6:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    2fea:	2e00      	cmp	r6, #0
    2fec:	d1c5      	bne.n	2f7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    2fee:	2208      	movs	r2, #8
    2ff0:	eb0d 0102 	add.w	r1, sp, r2
    2ff4:	e66b      	b.n	2cce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe>
    2ff6:	2202      	movs	r2, #2
    2ff8:	a902      	add	r1, sp, #8
    2ffa:	9001      	str	r0, [sp, #4]
    2ffc:	f7ff f848 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    3000:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3004:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    3008:	9801      	ldr	r0, [sp, #4]
    300a:	f8ad 2008 	strh.w	r2, [sp, #8]
    300e:	2b00      	cmp	r3, #0
    3010:	f47f ae86 	bne.w	2d20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x150>
    3014:	2202      	movs	r2, #2
    3016:	a902      	add	r1, sp, #8
    3018:	9001      	str	r0, [sp, #4]
    301a:	2501      	movs	r5, #1
    301c:	f7ff f838 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    3020:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    3024:	9801      	ldr	r0, [sp, #4]
    3026:	f88d 5008 	strb.w	r5, [sp, #8]
    302a:	2e00      	cmp	r6, #0
    302c:	f47f ae7d 	bne.w	2d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15a>
    3030:	462a      	mov	r2, r5
    3032:	a902      	add	r1, sp, #8
    3034:	9001      	str	r0, [sp, #4]
    3036:	f7ff f82b 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    303a:	f88d 6008 	strb.w	r6, [sp, #8]
    303e:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    3042:	9801      	ldr	r0, [sp, #4]
    3044:	2e00      	cmp	r6, #0
    3046:	f47f ae75 	bne.w	2d34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x164>
    304a:	462a      	mov	r2, r5
    304c:	a902      	add	r1, sp, #8
    304e:	9001      	str	r0, [sp, #4]
    3050:	f7ff f81e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    3054:	9602      	str	r6, [sp, #8]
    3056:	f894 6424 	ldrb.w	r6, [r4, #1060]	; 0x424
    305a:	9801      	ldr	r0, [sp, #4]
    305c:	2e00      	cmp	r6, #0
    305e:	f47f ae6e 	bne.w	2d3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16e>
    3062:	2204      	movs	r2, #4
    3064:	a902      	add	r1, sp, #8
    3066:	9001      	str	r0, [sp, #4]
    3068:	f7ff f812 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    306c:	f894 3424 	ldrb.w	r3, [r4, #1060]	; 0x424
    3070:	9801      	ldr	r0, [sp, #4]
    3072:	f88d 6008 	strb.w	r6, [sp, #8]
    3076:	2b00      	cmp	r3, #0
    3078:	f43f ae3c 	beq.w	2cf4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x124>
    307c:	e664      	b.n	2d48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178>
        write_length_ += len;
    307e:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    3082:	3302      	adds	r3, #2
    3084:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    3088:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    308c:	3302      	adds	r3, #2
    308e:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    3092:	f8d4 3428 	ldr.w	r3, [r4, #1064]	; 0x428
    3096:	3301      	adds	r3, #1
    3098:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    { if (write_get_length_) 
    309c:	e76d      	b.n	2f7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3aa>
    309e:	bf00      	nop

000030a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    30a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    30a4:	4604      	mov	r4, r0
    30a6:	b0c7      	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    30a8:	6800      	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    30aa:	4615      	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    30ac:	f10d 070a 	add.w	r7, sp, #10
    30b0:	f10d 0810 	add.w	r8, sp, #16
    30b4:	6803      	ldr	r3, [r0, #0]
    30b6:	aa06      	add	r2, sp, #24
    30b8:	9701      	str	r7, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    30ba:	460e      	mov	r6, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    30bc:	f8cd 8000 	str.w	r8, [sp]
    30c0:	f8d3 9024 	ldr.w	r9, [r3, #36]	; 0x24
    30c4:	ab03      	add	r3, sp, #12
    30c6:	47c8      	blx	r9
      switch(p2)
    30c8:	f46f 435c 	mvn.w	r3, #56320	; 0xdc00
      uint32_t storage = Store2Storage(store);
    30cc:	883a      	ldrh	r2, [r7, #0]
      switch(p2)
    30ce:	442b      	add	r3, r5
      dir = size == 0xFFFFFFFFUL;
    30d0:	9903      	ldr	r1, [sp, #12]
      uint32_t storage = Store2Storage(store);
    30d2:	1c55      	adds	r5, r2, #1
      switch(p2)
    30d4:	2b43      	cmp	r3, #67	; 0x43
    30d6:	d851      	bhi.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    30d8:	e8df f003 	tbb	[pc, r3]
    30dc:	96baa789 	.word	0x96baa789
    30e0:	5b535050 	.word	0x5b535050
    30e4:	5077505b 	.word	0x5077505b
    30e8:	50505050 	.word	0x50505050
    30ec:	50505050 	.word	0x50505050
    30f0:	50505050 	.word	0x50505050
    30f4:	50505050 	.word	0x50505050
    30f8:	50505050 	.word	0x50505050
    30fc:	50505050 	.word	0x50505050
    3100:	50505050 	.word	0x50505050
    3104:	50505050 	.word	0x50505050
    3108:	50505050 	.word	0x50505050
    310c:	50505050 	.word	0x50505050
    3110:	50505050 	.word	0x50505050
    3114:	50505050 	.word	0x50505050
    3118:	50505050 	.word	0x50505050
    311c:	53505022 	.word	0x53505022
          write32(p1);
    3120:	9605      	str	r6, [sp, #20]
    { if (write_get_length_) 
    3122:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    3126:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    312a:	2b00      	cmp	r3, #0
    312c:	f040 80b6 	bne.w	329c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1fc>
    3130:	2204      	movs	r2, #4
    3132:	a905      	add	r1, sp, #20
    3134:	4620      	mov	r0, r4
    3136:	f7fe ffab 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    313a:	f8d8 3000 	ldr.w	r3, [r8]
    313e:	9305      	str	r3, [sp, #20]
    3140:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
    3144:	2b00      	cmp	r3, #0
    3146:	f040 80ae 	bne.w	32a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x206>
    314a:	2204      	movs	r2, #4
    314c:	a905      	add	r1, sp, #20
    314e:	4620      	mov	r0, r4
    3150:	f7fe ff9e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    3154:	f896 7424 	ldrb.w	r7, [r6, #1060]	; 0x424
          write32(storage);
    3158:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    315a:	2f00      	cmp	r7, #0
    315c:	d15a      	bne.n	3214 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    315e:	2204      	movs	r2, #4
    3160:	a905      	add	r1, sp, #20
    3162:	4620      	mov	r0, r4
    3164:	f7fe ff94 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    3168:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    316c:	9705      	str	r7, [sp, #20]
    { if (write_get_length_) 
    316e:	2b00      	cmp	r3, #0
    3170:	d155      	bne.n	321e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
    3172:	2204      	movs	r2, #4
    3174:	a905      	add	r1, sp, #20
    3176:	4620      	mov	r0, r4
    3178:	f7fe ff8a 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    }
    317c:	b047      	add	sp, #284	; 0x11c
    317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*str) 
    3182:	f89d 3018 	ldrb.w	r3, [sp, #24]
    3186:	b193      	cbz	r3, 31ae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10e>
    3188:	a906      	add	r1, sp, #24
    318a:	4620      	mov	r0, r4
    318c:	f7fe ffbe 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
    3190:	e7f4      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    3192:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    3196:	2100      	movs	r1, #0
    3198:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    319c:	f88d 1014 	strb.w	r1, [sp, #20]
    31a0:	b16a      	cbz	r2, 31be <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x11e>
        write_length_ += len;
    31a2:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    31a6:	3201      	adds	r2, #1
    31a8:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    31ac:	e7e6      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    31ae:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
    31b2:	f88d 3014 	strb.w	r3, [sp, #20]
    31b6:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
    31ba:	2900      	cmp	r1, #0
    31bc:	d156      	bne.n	326c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1cc>
    31be:	2201      	movs	r2, #1
    31c0:	a905      	add	r1, sp, #20
    31c2:	4620      	mov	r0, r4
    31c4:	f7fe ff64 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    }
    31c8:	e7d8      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write32((store==parent)? 0: parent);
    31ca:	f8d8 3000 	ldr.w	r3, [r8]
    { if (write_get_length_) 
    31ce:	f504 5100 	add.w	r1, r4, #8192	; 0x2000
          write32((store==parent)? 0: parent);
    31d2:	429a      	cmp	r2, r3
    31d4:	bf08      	it	eq
    31d6:	2300      	moveq	r3, #0
    { if (write_get_length_) 
    31d8:	f891 2424 	ldrb.w	r2, [r1, #1060]	; 0x424
    31dc:	9305      	str	r3, [sp, #20]
    31de:	2a00      	cmp	r2, #0
    31e0:	d0c7      	beq.n	3172 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    31e2:	f8d1 3428 	ldr.w	r3, [r1, #1064]	; 0x428
    31e6:	3304      	adds	r3, #4
    31e8:	f8c1 3428 	str.w	r3, [r1, #1064]	; 0x428
    31ec:	e7c6      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    31ee:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    31f2:	9505      	str	r5, [sp, #20]
    31f4:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    31f8:	2a00      	cmp	r2, #0
    31fa:	d0ba      	beq.n	3172 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
        write_length_ += len;
    31fc:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    3200:	3204      	adds	r2, #4
    3202:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    3206:	e7b9      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    3208:	f504 5600 	add.w	r6, r4, #8192	; 0x2000
    320c:	9105      	str	r1, [sp, #20]
    320e:	f896 5424 	ldrb.w	r5, [r6, #1060]	; 0x424
    3212:	b3bd      	cbz	r5, 3284 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1e4>
        write_length_ += len;
    3214:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    3218:	3304      	adds	r3, #4
    321a:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    321e:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    3222:	3304      	adds	r3, #4
    3224:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    3228:	e7a8      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
          write16(dir?0x3001:0x3000);
    322a:	3101      	adds	r1, #1
    { if (write_get_length_) 
    322c:	f504 5200 	add.w	r2, r4, #8192	; 0x2000
          write16(dir?0x3001:0x3000);
    3230:	f243 0301 	movw	r3, #12289	; 0x3001
    { if (write_get_length_) 
    3234:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
          write16(dir?0x3001:0x3000);
    3238:	bf18      	it	ne
    323a:	f44f 5340 	movne.w	r3, #12288	; 0x3000
    323e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3242:	b169      	cbz	r1, 3260 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1c0>
        write_length_ += len;
    3244:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    3248:	3302      	adds	r3, #2
    324a:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    324e:	e795      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    { if (write_get_length_) 
    3250:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
    3254:	2100      	movs	r1, #0
    3256:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
    325a:	f8ad 1014 	strh.w	r1, [sp, #20]
    325e:	b95a      	cbnz	r2, 3278 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d8>
    3260:	2202      	movs	r2, #2
    3262:	a905      	add	r1, sp, #20
    3264:	4620      	mov	r0, r4
    3266:	f7fe ff13 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
          break;
    326a:	e787      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
    326c:	f8d2 3428 	ldr.w	r3, [r2, #1064]	; 0x428
    3270:	3301      	adds	r3, #1
    3272:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
    3276:	e781      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    3278:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
    327c:	3202      	adds	r2, #2
    327e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    3282:	e77b      	b.n	317c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xdc>
    3284:	2204      	movs	r2, #4
    3286:	a905      	add	r1, sp, #20
    3288:	4620      	mov	r0, r4
    328a:	f7fe ff01 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    { if (write_get_length_) 
    328e:	f896 3424 	ldrb.w	r3, [r6, #1060]	; 0x424
          write32(0);
    3292:	9505      	str	r5, [sp, #20]
    { if (write_get_length_) 
    3294:	2b00      	cmp	r3, #0
    3296:	f43f af6c 	beq.w	3172 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xd2>
    329a:	e7c0      	b.n	321e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x17e>
        write_length_ += len;
    329c:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32a0:	3304      	adds	r3, #4
    32a2:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    32a6:	f8d6 3428 	ldr.w	r3, [r6, #1064]	; 0x428
    32aa:	3304      	adds	r3, #4
    32ac:	f8c6 3428 	str.w	r3, [r6, #1064]	; 0x428
    { if (write_get_length_) 
    32b0:	e7b0      	b.n	3214 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x174>
    32b2:	bf00      	nop

000032b4 <MTPD::GetObject(unsigned long)>:
    {
    32b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32b8:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    32ba:	6800      	ldr	r0, [r0, #0]
    32bc:	6803      	ldr	r3, [r0, #0]
      if (write_get_length_) {
    32be:	f50b 5800 	add.w	r8, fp, #8192	; 0x2000
    {
    32c2:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    32c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    32c8:	b085      	sub	sp, #20
    32ca:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    32ce:	4798      	blx	r3
      if (write_get_length_) {
    32d0:	f898 6424 	ldrb.w	r6, [r8, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    32d4:	4682      	mov	sl, r0
      if (write_get_length_) {
    32d6:	b14e      	cbz	r6, 32ec <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    32d8:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    32dc:	4403      	add	r3, r0
    32de:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    }
    32e2:	b005      	add	sp, #20
    32e4:	ecbd 8b02 	vpop	{d8}
    32e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    32ec:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    32f0:	f8c8 4420 	str.w	r4, [r8, #1056]	; 0x420
        while(pos<size)
    32f4:	2800      	cmp	r0, #0
    32f6:	d060      	beq.n	33ba <MTPD::GetObject(unsigned long)+0x106>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    32f8:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    32fc:	f50b 7908 	add.w	r9, fp, #544	; 0x220
            disk_pos=0;
    3300:	f8cd b00c 	str.w	fp, [sp, #12]
        uint32_t len = sizeof(MTPHeader);
    3304:	250c      	movs	r5, #12
            disk_pos=0;
    3306:	469b      	mov	fp, r3
    3308:	e022      	b.n	3350 <MTPD::GetObject(unsigned long)+0x9c>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    330a:	ebaa 0306 	sub.w	r3, sl, r6
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    330e:	eb0b 0104 	add.w	r1, fp, r4
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3312:	9302      	str	r3, [sp, #8]
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3314:	f5c4 5300 	rsb	r3, r4, #8192	; 0x2000
    3318:	9f02      	ldr	r7, [sp, #8]
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    331a:	f5c5 7200 	rsb	r2, r5, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    331e:	eb09 0005 	add.w	r0, r9, r5
    3322:	429f      	cmp	r7, r3
    3324:	bf28      	it	cs
    3326:	461f      	movcs	r7, r3
    3328:	4297      	cmp	r7, r2
    332a:	bf28      	it	cs
    332c:	4617      	movcs	r7, r2
    332e:	463a      	mov	r2, r7
          len += to_copy;
    3330:	443d      	add	r5, r7
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3332:	f00a ffef 	bl	e314 <memcpy>
          disk_pos += to_copy;
    3336:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    333a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
          pos += to_copy;
    333e:	443e      	add	r6, r7
          disk_pos += to_copy;
    3340:	443b      	add	r3, r7
    3342:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3346:	d021      	beq.n	338c <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    3348:	45b2      	cmp	sl, r6
    334a:	d92b      	bls.n	33a4 <MTPD::GetObject(unsigned long)+0xf0>
          if(disk_pos==DISK_BUFFER_SIZE)
    334c:	f8d8 4420 	ldr.w	r4, [r8, #1056]	; 0x420
    3350:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    3354:	d1d9      	bne.n	330a <MTPD::GetObject(unsigned long)+0x56>
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3356:	ebaa 0706 	sub.w	r7, sl, r6
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    335a:	9b03      	ldr	r3, [sp, #12]
    335c:	4632      	mov	r2, r6
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    335e:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    3362:	6818      	ldr	r0, [r3, #0]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3364:	9702      	str	r7, [sp, #8]
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3366:	465b      	mov	r3, fp
    3368:	6801      	ldr	r1, [r0, #0]
    336a:	bf34      	ite	cc
    336c:	46bc      	movcc	ip, r7
    336e:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    3372:	f8cd c000 	str.w	ip, [sp]
    3376:	6b09      	ldr	r1, [r1, #48]	; 0x30
    3378:	460f      	mov	r7, r1
    337a:	ee18 1a10 	vmov	r1, s16
    337e:	47b8      	blx	r7
            disk_pos=0;
    3380:	2200      	movs	r2, #0
    3382:	4623      	mov	r3, r4
    3384:	4659      	mov	r1, fp
    3386:	f8c8 2420 	str.w	r2, [r8, #1056]	; 0x420
    338a:	e7c5      	b.n	3318 <MTPD::GetObject(unsigned long)+0x64>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    338c:	223c      	movs	r2, #60	; 0x3c
    338e:	f44f 7100 	mov.w	r1, #512	; 0x200
    3392:	4648      	mov	r0, r9
    3394:	f00c f9ac 	bl	f6f0 <usb_mtp_send>
    3398:	2800      	cmp	r0, #0
    339a:	ddf7      	ble.n	338c <MTPD::GetObject(unsigned long)+0xd8>
        while(pos<size)
    339c:	45b2      	cmp	sl, r6
            len=0;
    339e:	f04f 0500 	mov.w	r5, #0
        while(pos<size)
    33a2:	d8d3      	bhi.n	334c <MTPD::GetObject(unsigned long)+0x98>
        if(len>0)
    33a4:	2d00      	cmp	r5, #0
    33a6:	d09c      	beq.n	32e2 <MTPD::GetObject(unsigned long)+0x2e>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33a8:	223c      	movs	r2, #60	; 0x3c
    33aa:	f44f 7100 	mov.w	r1, #512	; 0x200
    33ae:	4648      	mov	r0, r9
    33b0:	f00c f99e 	bl	f6f0 <usb_mtp_send>
    33b4:	2800      	cmp	r0, #0
    33b6:	ddf7      	ble.n	33a8 <MTPD::GetObject(unsigned long)+0xf4>
    33b8:	e793      	b.n	32e2 <MTPD::GetObject(unsigned long)+0x2e>
    33ba:	f50b 7908 	add.w	r9, fp, #544	; 0x220
    33be:	e7f3      	b.n	33a8 <MTPD::GetObject(unsigned long)+0xf4>

000033c0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    33c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c4:	4683      	mov	fp, r0
      uint32_t size = storage_->GetSize(object_id);
    33c6:	6800      	ldr	r0, [r0, #0]
    {
    33c8:	461c      	mov	r4, r3
    33ca:	4615      	mov	r5, r2
      uint32_t size = storage_->GetSize(object_id);
    33cc:	6803      	ldr	r3, [r0, #0]
    {
    33ce:	ed2d 8b02 	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    33d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    {
    33d4:	b087      	sub	sp, #28
    33d6:	ee08 1a10 	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    33da:	4798      	blx	r3
      if(NumBytes == 0xffffffff) NumBytes=size;
    33dc:	1c63      	adds	r3, r4, #1
      size -= offset;
    33de:	eba0 0805 	sub.w	r8, r0, r5
      if(NumBytes == 0xffffffff) NumBytes=size;
    33e2:	d002      	beq.n	33ea <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x2a>
    33e4:	45a0      	cmp	r8, r4
    33e6:	bf28      	it	cs
    33e8:	46a0      	movcs	r8, r4
      if (write_get_length_) {
    33ea:	f50b 5700 	add.w	r7, fp, #8192	; 0x2000
    33ee:	f897 3424 	ldrb.w	r3, [r7, #1060]	; 0x424
    33f2:	9304      	str	r3, [sp, #16]
    33f4:	b153      	cbz	r3, 340c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    33f6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    33fa:	4443      	add	r3, r8
    33fc:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
    }
    3400:	4640      	mov	r0, r8
    3402:	b007      	add	sp, #28
    3404:	ecbd 8b02 	vpop	{d8}
    3408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    340c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
        while(pos<size)
    3410:	4545      	cmp	r5, r8
        disk_pos=DISK_BUFFER_SIZE;
    3412:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
        while(pos<size)
    3416:	d2f3      	bcs.n	3400 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3418:	f50b 6384 	add.w	r3, fp, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    341c:	f50b 7a08 	add.w	sl, fp, #544	; 0x220
        uint32_t len = sizeof(MTPHeader);
    3420:	f8cd b014 	str.w	fp, [sp, #20]
    3424:	260c      	movs	r6, #12
    3426:	469b      	mov	fp, r3
    3428:	9403      	str	r4, [sp, #12]
    342a:	e01f      	b.n	346c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xac>
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    342c:	f5c2 5300 	rsb	r3, r2, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3430:	445a      	add	r2, fp
    3432:	4611      	mov	r1, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3434:	454b      	cmp	r3, r9
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3436:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    343a:	eb0a 0006 	add.w	r0, sl, r6
    343e:	bf28      	it	cs
    3440:	464b      	movcs	r3, r9
    3442:	429c      	cmp	r4, r3
    3444:	bf28      	it	cs
    3446:	461c      	movcs	r4, r3
    3448:	4622      	mov	r2, r4
          len += to_copy;
    344a:	4426      	add	r6, r4
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    344c:	f00a ff62 	bl	e314 <memcpy>
          disk_pos += to_copy;
    3450:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3454:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    3458:	4425      	add	r5, r4
          disk_pos += to_copy;
    345a:	4423      	add	r3, r4
    345c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3460:	d022      	beq.n	34a8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
        while(pos<size)
    3462:	45a8      	cmp	r8, r5
    3464:	d9cc      	bls.n	3400 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    3466:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    346a:	9303      	str	r3, [sp, #12]
    346c:	9a03      	ldr	r2, [sp, #12]
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    346e:	eba8 0905 	sub.w	r9, r8, r5
          if(disk_pos==DISK_BUFFER_SIZE)
    3472:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    3476:	d1d9      	bne.n	342c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x6c>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3478:	9b05      	ldr	r3, [sp, #20]
    347a:	f5b9 5f00 	cmp.w	r9, #8192	; 0x2000
    347e:	462a      	mov	r2, r5
    3480:	6818      	ldr	r0, [r3, #0]
    3482:	bf34      	ite	cc
    3484:	46cc      	movcc	ip, r9
    3486:	f44f 5c00 	movcs.w	ip, #8192	; 0x2000
    348a:	465b      	mov	r3, fp
    348c:	6801      	ldr	r1, [r0, #0]
    348e:	f8cd c000 	str.w	ip, [sp]
    3492:	6b09      	ldr	r1, [r1, #48]	; 0x30
    3494:	460c      	mov	r4, r1
    3496:	ee18 1a10 	vmov	r1, s16
    349a:	47a0      	blx	r4
            disk_pos=0;
    349c:	4659      	mov	r1, fp
    349e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
    34a2:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
    34a6:	e7c5      	b.n	3434 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x74>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34a8:	223c      	movs	r2, #60	; 0x3c
    34aa:	f44f 7100 	mov.w	r1, #512	; 0x200
    34ae:	4650      	mov	r0, sl
    34b0:	f00c f91e 	bl	f6f0 <usb_mtp_send>
    34b4:	2800      	cmp	r0, #0
    34b6:	ddf7      	ble.n	34a8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xe8>
            len=0;
    34b8:	2600      	movs	r6, #0
    34ba:	e7d2      	b.n	3462 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa2>

000034bc <MTPD::read(char*, unsigned long)>:
    {
    34bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      if(!size) 
    34c0:	4616      	mov	r6, r2
    34c2:	b36a      	cbz	r2, 3520 <MTPD::read(char*, unsigned long)+0x64>
    34c4:	460f      	mov	r7, r1
    34c6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 3528 <MTPD::read(char*, unsigned long)+0x6c>
          memcpy(data, rx_data_buffer + index, to_copy);
    34ca:	f100 0920 	add.w	r9, r0, #32
          index=0;
    34ce:	f04f 0a00 	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    34d2:	f8d8 4000 	ldr.w	r4, [r8]
    34d6:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    34da:	42b5      	cmp	r5, r6
    34dc:	bf28      	it	cs
    34de:	4635      	movcs	r5, r6
        if (data) {
    34e0:	b137      	cbz	r7, 34f0 <MTPD::read(char*, unsigned long)+0x34>
          memcpy(data, rx_data_buffer + index, to_copy);
    34e2:	4638      	mov	r0, r7
    34e4:	462a      	mov	r2, r5
    34e6:	eb09 0104 	add.w	r1, r9, r4
          data += to_copy;
    34ea:	442f      	add	r7, r5
          memcpy(data, rx_data_buffer + index, to_copy);
    34ec:	f00a ff12 	bl	e314 <memcpy>
        index += to_copy;
    34f0:	442c      	add	r4, r5
        size -= to_copy;
    34f2:	1b76      	subs	r6, r6, r5
        if (index == MTP_RX_SIZE) {
    34f4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
        index += to_copy;
    34f8:	f8c8 4000 	str.w	r4, [r8]
        if (index == MTP_RX_SIZE) {
    34fc:	d003      	beq.n	3506 <MTPD::read(char*, unsigned long)+0x4a>
      while (size) {
    34fe:	2e00      	cmp	r6, #0
    3500:	d1e7      	bne.n	34d2 <MTPD::read(char*, unsigned long)+0x16>
    }
    3502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while(!usb_mtp_available());
    3506:	f00c f8db 	bl	f6c0 <usb_mtp_available>
    350a:	2800      	cmp	r0, #0
    350c:	d0fb      	beq.n	3506 <MTPD::read(char*, unsigned long)+0x4a>
      return usb_mtp_recv(data_buffer,60);
    350e:	213c      	movs	r1, #60	; 0x3c
    3510:	4648      	mov	r0, r9
    3512:	f00c f883 	bl	f61c <usb_mtp_recv>
          index=0;
    3516:	f8c8 a000 	str.w	sl, [r8]
      while (size) {
    351a:	2e00      	cmp	r6, #0
    351c:	d1d9      	bne.n	34d2 <MTPD::read(char*, unsigned long)+0x16>
    351e:	e7f0      	b.n	3502 <MTPD::read(char*, unsigned long)+0x46>
        index=0;
    3520:	4b01      	ldr	r3, [pc, #4]	; (3528 <MTPD::read(char*, unsigned long)+0x6c>)
    3522:	601a      	str	r2, [r3, #0]
    }
    3524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3528:	20018da4 	.word	0x20018da4

0000352c <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    352c:	b570      	push	{r4, r5, r6, lr}
    352e:	b082      	sub	sp, #8
    3530:	460c      	mov	r4, r1
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3532:	2201      	movs	r2, #1
  void MTPD::readstring(char* buffer) {
    3534:	4606      	mov	r6, r0
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3536:	f10d 0106 	add.w	r1, sp, #6
    353a:	f7ff ffbf 	bl	34bc <MTPD::read(char*, unsigned long)>
    353e:	f89d 5006 	ldrb.w	r5, [sp, #6]
    if (!buffer) {
    3542:	b17c      	cbz	r4, 3564 <MTPD::readstring(char*)+0x38>
      for (int i = 0; i < len; i++) {
    3544:	b165      	cbz	r5, 3560 <MTPD::readstring(char*)+0x34>
    3546:	4425      	add	r5, r4
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3548:	2202      	movs	r2, #2
    354a:	f10d 0106 	add.w	r1, sp, #6
    354e:	4630      	mov	r0, r6
    3550:	f7ff ffb4 	bl	34bc <MTPD::read(char*, unsigned long)>
    3554:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        *(buffer++) = c2 = read16();
    3558:	f804 3b01 	strb.w	r3, [r4], #1
      for (int i = 0; i < len; i++) {
    355c:	42a5      	cmp	r5, r4
    355e:	d1f3      	bne.n	3548 <MTPD::readstring(char*)+0x1c>
  }
    3560:	b002      	add	sp, #8
    3562:	bd70      	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    3564:	006a      	lsls	r2, r5, #1
    3566:	4621      	mov	r1, r4
    3568:	4630      	mov	r0, r6
  }
    356a:	b002      	add	sp, #8
    356c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    3570:	f7ff bfa4 	b.w	34bc <MTPD::read(char*, unsigned long)>

00003574 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3574:	b530      	push	{r4, r5, lr}
    3576:	b0c1      	sub	sp, #260	; 0x104
    3578:	4604      	mov	r4, r0
    read((char *)&header, sizeof(MTPHeader));
    357a:	220c      	movs	r2, #12
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    357c:	460d      	mov	r5, r1
    read((char *)&header, sizeof(MTPHeader));
    357e:	4669      	mov	r1, sp
    3580:	f7ff ff9c 	bl	34bc <MTPD::read(char*, unsigned long)>
        readstring(filename);
    3584:	4669      	mov	r1, sp
    3586:	4620      	mov	r0, r4
    3588:	f7ff ffd0 	bl	352c <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    358c:	6820      	ldr	r0, [r4, #0]
    358e:	466a      	mov	r2, sp
    3590:	4629      	mov	r1, r5
    3592:	6803      	ldr	r3, [r0, #0]
    3594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3596:	4798      	blx	r3
    3598:	f242 0201 	movw	r2, #8193	; 0x2001
    359c:	f242 0305 	movw	r3, #8197	; 0x2005
    }
    35a0:	2800      	cmp	r0, #0
    35a2:	bf14      	ite	ne
    35a4:	4610      	movne	r0, r2
    35a6:	4618      	moveq	r0, r3
    35a8:	b041      	add	sp, #260	; 0x104
    35aa:	bd30      	pop	{r4, r5, pc}

000035ac <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    35ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35b0:	4605      	mov	r5, r0
    35b2:	b0c5      	sub	sp, #276	; 0x114
    35b4:	4689      	mov	r9, r1
    35b6:	4692      	mov	sl, r2
      pull_packet(rx_data_buffer);
    35b8:	f100 0420 	add.w	r4, r0, #32
      while(!usb_mtp_available());
    35bc:	f00c f880 	bl	f6c0 <usb_mtp_available>
    35c0:	2800      	cmp	r0, #0
    35c2:	d0fb      	beq.n	35bc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10>
      return usb_mtp_recv(data_buffer,60);
    35c4:	213c      	movs	r1, #60	; 0x3c
    35c6:	4620      	mov	r0, r4
    35c8:	f00c f828 	bl	f61c <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    35cc:	ae04      	add	r6, sp, #16
        index=0;
    35ce:	4b4c      	ldr	r3, [pc, #304]	; (3700 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x154>)
    35d0:	2200      	movs	r2, #0
    read((char *)&header, sizeof(MTPHeader));
    35d2:	4628      	mov	r0, r5
    35d4:	4631      	mov	r1, r6
        index=0;
    35d6:	601a      	str	r2, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    35d8:	220c      	movs	r2, #12
    35da:	f7ff ff6f 	bl	34bc <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    35de:	88b3      	ldrh	r3, [r6, #4]
      uint32_t store = Storage2Store(storage);
    35e0:	f109 39ff 	add.w	r9, r9, #4294967295
    if(header.type==2)
    35e4:	2b02      	cmp	r3, #2
    35e6:	f000 8086 	beq.w	36f6 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x14a>
    35ea:	f06f 0833 	mvn.w	r8, #51	; 0x33
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    35ee:	2204      	movs	r2, #4
    35f0:	4631      	mov	r1, r6
    35f2:	4628      	mov	r0, r5
    35f4:	f7ff ff62 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    35f8:	2202      	movs	r2, #2
    35fa:	4631      	mov	r1, r6
    35fc:	4628      	mov	r0, r5
    35fe:	f7ff ff5d 	bl	34bc <MTPD::read(char*, unsigned long)>
      bool dir = (read16() == 0x3001); len -=2; // format
    3602:	f243 0301 	movw	r3, #12289	; 0x3001
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3606:	f8b6 b000 	ldrh.w	fp, [r6]
    360a:	2202      	movs	r2, #2
    360c:	4631      	mov	r1, r6
    360e:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3610:	ebab 0b03 	sub.w	fp, fp, r3
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3614:	f7ff ff52 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3618:	2204      	movs	r2, #4
    361a:	4631      	mov	r1, r6
    361c:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    361e:	fabb fb8b 	clz	fp, fp
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3622:	f7ff ff4b 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3626:	2202      	movs	r2, #2
    3628:	4631      	mov	r1, r6
    362a:	4628      	mov	r0, r5
    362c:	f7ff ff46 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3630:	2204      	movs	r2, #4
    3632:	4631      	mov	r1, r6
    3634:	4628      	mov	r0, r5
    3636:	f7ff ff41 	bl	34bc <MTPD::read(char*, unsigned long)>
    363a:	2204      	movs	r2, #4
    363c:	4631      	mov	r1, r6
    363e:	4628      	mov	r0, r5
    3640:	f7ff ff3c 	bl	34bc <MTPD::read(char*, unsigned long)>
    3644:	2204      	movs	r2, #4
    3646:	4631      	mov	r1, r6
    3648:	4628      	mov	r0, r5
    364a:	f7ff ff37 	bl	34bc <MTPD::read(char*, unsigned long)>
    364e:	2204      	movs	r2, #4
    3650:	4631      	mov	r1, r6
    3652:	4628      	mov	r0, r5
    3654:	f7ff ff32 	bl	34bc <MTPD::read(char*, unsigned long)>
    3658:	2204      	movs	r2, #4
    365a:	4631      	mov	r1, r6
    365c:	4628      	mov	r0, r5
    365e:	f7ff ff2d 	bl	34bc <MTPD::read(char*, unsigned long)>
    3662:	2204      	movs	r2, #4
    3664:	4631      	mov	r1, r6
    3666:	4628      	mov	r0, r5
    3668:	f7ff ff28 	bl	34bc <MTPD::read(char*, unsigned long)>
    366c:	2204      	movs	r2, #4
    366e:	4631      	mov	r1, r6
    3670:	4628      	mov	r0, r5
    3672:	f7ff ff23 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3676:	2202      	movs	r2, #2
    3678:	4631      	mov	r1, r6
    367a:	4628      	mov	r0, r5
    367c:	f7ff ff1e 	bl	34bc <MTPD::read(char*, unsigned long)>
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3680:	2204      	movs	r2, #4
    3682:	4631      	mov	r1, r6
    3684:	4628      	mov	r0, r5
    3686:	f7ff ff19 	bl	34bc <MTPD::read(char*, unsigned long)>
    368a:	2204      	movs	r2, #4
    368c:	4631      	mov	r1, r6
    368e:	4628      	mov	r0, r5
    3690:	f7ff ff14 	bl	34bc <MTPD::read(char*, unsigned long)>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3694:	4631      	mov	r1, r6
    3696:	4628      	mov	r0, r5
      bool dir = (read16() == 0x3001); len -=2; // format
    3698:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    369c:	f7ff ff46 	bl	352c <MTPD::readstring(char*)>
    36a0:	4630      	mov	r0, r6
    36a2:	f00f faad 	bl	12c00 <strlen>
    36a6:	3001      	adds	r0, #1
    36a8:	eba8 0840 	sub.w	r8, r8, r0, lsl #1
    36ac:	f108 34ff 	add.w	r4, r8, #4294967295
      while(len>=4) { read32(); len-=4;}
    36b0:	2c03      	cmp	r4, #3
    36b2:	dd0c      	ble.n	36ce <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x122>
    36b4:	af03      	add	r7, sp, #12
    36b6:	3c04      	subs	r4, #4
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    36b8:	2204      	movs	r2, #4
    36ba:	4639      	mov	r1, r7
    36bc:	4628      	mov	r0, r5
    36be:	f7ff fefd 	bl	34bc <MTPD::read(char*, unsigned long)>
      while(len>=4) { read32(); len-=4;}
    36c2:	2c03      	cmp	r4, #3
    36c4:	dcf7      	bgt.n	36b6 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x10a>
    36c6:	f1a8 0805 	sub.w	r8, r8, #5
    36ca:	f008 0403 	and.w	r4, r8, #3
      while(len) {read8(); len--;}
    36ce:	b13c      	cbz	r4, 36e0 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x134>
    36d0:	af03      	add	r7, sp, #12
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    36d2:	2201      	movs	r2, #1
    36d4:	4639      	mov	r1, r7
    36d6:	4628      	mov	r0, r5
    36d8:	f7ff fef0 	bl	34bc <MTPD::read(char*, unsigned long)>
      while(len) {read8(); len--;}
    36dc:	3c01      	subs	r4, #1
    36de:	d1f8      	bne.n	36d2 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x126>
      return storage_->Create(store, parent, dir, filename);
    36e0:	6828      	ldr	r0, [r5, #0]
    36e2:	465b      	mov	r3, fp
    36e4:	4652      	mov	r2, sl
    36e6:	4649      	mov	r1, r9
    36e8:	6804      	ldr	r4, [r0, #0]
    36ea:	9600      	str	r6, [sp, #0]
    36ec:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
    36ee:	47a0      	blx	r4
    }
    36f0:	b045      	add	sp, #276	; 0x114
    36f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    36f6:	6833      	ldr	r3, [r6, #0]
    36f8:	f1a3 0840 	sub.w	r8, r3, #64	; 0x40
    36fc:	e777      	b.n	35ee <MTPD::SendObjectInfo(unsigned long, unsigned long)+0x42>
    36fe:	bf00      	nop
    3700:	20018da4 	.word	0x20018da4

00003704 <MTPD::SendObject()>:
    { 
    3704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    3708:	f100 0a20 	add.w	sl, r0, #32
    { 
    370c:	b087      	sub	sp, #28
    370e:	9000      	str	r0, [sp, #0]
      while(!usb_mtp_available());
    3710:	f00b ffd6 	bl	f6c0 <usb_mtp_available>
    3714:	2800      	cmp	r0, #0
    3716:	d0fb      	beq.n	3710 <MTPD::SendObject()+0xc>
      return usb_mtp_recv(data_buffer,60);
    3718:	213c      	movs	r1, #60	; 0x3c
    371a:	4650      	mov	r0, sl
    371c:	f00b ff7e 	bl	f61c <usb_mtp_recv>
    read((char *)&header, sizeof(MTPHeader));
    3720:	220c      	movs	r2, #12
        index=0;
    3722:	4b42      	ldr	r3, [pc, #264]	; (382c <MTPD::SendObject()+0x128>)
    3724:	2400      	movs	r4, #0
    read((char *)&header, sizeof(MTPHeader));
    3726:	eb0d 0102 	add.w	r1, sp, r2
    372a:	9800      	ldr	r0, [sp, #0]
        index=0;
    372c:	601c      	str	r4, [r3, #0]
    read((char *)&header, sizeof(MTPHeader));
    372e:	f7ff fec5 	bl	34bc <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3732:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    3736:	2b02      	cmp	r3, #2
    3738:	d00d      	beq.n	3756 <MTPD::SendObject()+0x52>
      disk_pos=0;
    373a:	9b00      	ldr	r3, [sp, #0]
    373c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    3740:	f8c3 4420 	str.w	r4, [r3, #1056]	; 0x420
      storage_->close();
    3744:	9b00      	ldr	r3, [sp, #0]
    3746:	6818      	ldr	r0, [r3, #0]
    3748:	6803      	ldr	r3, [r0, #0]
    374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    374c:	4798      	blx	r3
      return true;
    374e:	2001      	movs	r0, #1
    }
    3750:	b007      	add	sp, #28
    3752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return header.len - 12;
    3756:	9b03      	ldr	r3, [sp, #12]
      disk_pos=0;
    3758:	9a00      	ldr	r2, [sp, #0]
      return header.len - 12;
    375a:	f1a3 090c 	sub.w	r9, r3, #12
      disk_pos=0;
    375e:	f502 5700 	add.w	r7, r2, #8192	; 0x2000
      while((int)len>0)
    3762:	45a1      	cmp	r9, r4
      disk_pos=0;
    3764:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
      while((int)len>0)
    3768:	ddec      	ble.n	3744 <MTPD::SendObject()+0x40>
      uint32_t index = sizeof(MTPHeader);
    376a:	250c      	movs	r5, #12
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    376c:	4620      	mov	r0, r4
    376e:	f502 6b84 	add.w	fp, r2, #1056	; 0x420
          disk_pos =0;
    3772:	46a8      	mov	r8, r5
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    3774:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3778:	f5c0 5400 	rsb	r4, r0, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    377c:	eb0a 0108 	add.w	r1, sl, r8
    3780:	4458      	add	r0, fp
    3782:	454e      	cmp	r6, r9
    3784:	bf28      	it	cs
    3786:	464e      	movcs	r6, r9
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    3788:	42b4      	cmp	r4, r6
    378a:	bf28      	it	cs
    378c:	4634      	movcs	r4, r6
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    378e:	4622      	mov	r2, r4
        len -= to_copy;
    3790:	eba9 0504 	sub.w	r5, r9, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    3794:	f00a fdbe 	bl	e314 <memcpy>
        disk_pos += to_copy;
    3798:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    379c:	4422      	add	r2, r4
        if(disk_pos==DISK_BUFFER_SIZE)
    379e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    37a2:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    37a6:	d022      	beq.n	37ee <MTPD::SendObject()+0xea>
        if(len>0)  // we have still data to be transfered
    37a8:	b98d      	cbnz	r5, 37ce <MTPD::SendObject()+0xca>
      if(disk_pos)
    37aa:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
    37ae:	2a00      	cmp	r2, #0
    37b0:	d0c8      	beq.n	3744 <MTPD::SendObject()+0x40>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    37b2:	9b00      	ldr	r3, [sp, #0]
    37b4:	4659      	mov	r1, fp
    37b6:	6818      	ldr	r0, [r3, #0]
    37b8:	6803      	ldr	r3, [r0, #0]
    37ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    37bc:	4798      	blx	r3
    37be:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    37c2:	4298      	cmp	r0, r3
    37c4:	d2be      	bcs.n	3744 <MTPD::SendObject()+0x40>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    37c6:	2000      	movs	r0, #0
    }
    37c8:	b007      	add	sp, #28
    37ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while(!usb_mtp_available());
    37ce:	f00b ff77 	bl	f6c0 <usb_mtp_available>
    37d2:	2800      	cmp	r0, #0
    37d4:	d0fb      	beq.n	37ce <MTPD::SendObject()+0xca>
      return usb_mtp_recv(data_buffer,60);
    37d6:	213c      	movs	r1, #60	; 0x3c
    37d8:	4650      	mov	r0, sl
    37da:	f00b ff1f 	bl	f61c <usb_mtp_recv>
      while((int)len>0)
    37de:	2d00      	cmp	r5, #0
    37e0:	dde3      	ble.n	37aa <MTPD::SendObject()+0xa6>
      if(disk_pos)
    37e2:	f8d7 0420 	ldr.w	r0, [r7, #1056]	; 0x420
    37e6:	46a9      	mov	r9, r5
          index=0;
    37e8:	f04f 0800 	mov.w	r8, #0
    37ec:	e7c2      	b.n	3774 <MTPD::SendObject()+0x70>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    37ee:	9b00      	ldr	r3, [sp, #0]
    37f0:	4659      	mov	r1, fp
    37f2:	6818      	ldr	r0, [r3, #0]
    37f4:	6803      	ldr	r3, [r0, #0]
    37f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    37f8:	4798      	blx	r3
    37fa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    37fe:	d3e2      	bcc.n	37c6 <MTPD::SendObject()+0xc2>
          disk_pos =0;
    3800:	2300      	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3802:	1b32      	subs	r2, r6, r4
          disk_pos =0;
    3804:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    3808:	d0ce      	beq.n	37a8 <MTPD::SendObject()+0xa4>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    380a:	eb04 0108 	add.w	r1, r4, r8
    380e:	4658      	mov	r0, fp
    3810:	9201      	str	r2, [sp, #4]
            len -= bytes;
    3812:	eba9 0506 	sub.w	r5, r9, r6
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    3816:	4451      	add	r1, sl
    3818:	f00a fd7c 	bl	e314 <memcpy>
            disk_pos += bytes;
    381c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
    3820:	9a01      	ldr	r2, [sp, #4]
    3822:	4413      	add	r3, r2
    3824:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
            len -= bytes;
    3828:	e7be      	b.n	37a8 <MTPD::SendObject()+0xa4>
    382a:	bf00      	nop
    382c:	20018da4 	.word	0x20018da4

00003830 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    3830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3834:	b08d      	sub	sp, #52	; 0x34
    3836:	4604      	mov	r4, r0
    3838:	f00b ff42 	bl	f6c0 <usb_mtp_available>
    383c:	b910      	cbnz	r0, 3844 <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    383e:	b00d      	add	sp, #52	; 0x34
    3840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(fetch_packet(rx_data_buffer))
    3844:	f104 0520 	add.w	r5, r4, #32
      return usb_mtp_recv(data_buffer,60);
    3848:	213c      	movs	r1, #60	; 0x3c
    384a:	4628      	mov	r0, r5
    384c:	f00b fee6 	bl	f61c <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    3850:	2800      	cmp	r0, #0
    3852:	d0f4      	beq.n	383e <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3854:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3856:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    3858:	6a23      	ldr	r3, [r4, #32]
    385a:	48a6      	ldr	r0, [pc, #664]	; (3af4 <MTPD::loop()+0x2c4>)
    385c:	e9cd 2100 	strd	r2, r1, [sp]
    3860:	49a5      	ldr	r1, [pc, #660]	; (3af8 <MTPD::loop()+0x2c8>)
    3862:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3864:	f009 ff6a 	bl	d73c <Print::printf(char const*, ...)>
    3868:	6a23      	ldr	r3, [r4, #32]
    386a:	2b0c      	cmp	r3, #12
    386c:	d867      	bhi.n	393e <MTPD::loop()+0x10e>
    386e:	49a3      	ldr	r1, [pc, #652]	; (3afc <MTPD::loop()+0x2cc>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    3870:	f242 0601 	movw	r6, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    3874:	489f      	ldr	r0, [pc, #636]	; (3af4 <MTPD::loop()+0x2c4>)
        TID=id;
    3876:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    387a:	f009 ff5f 	bl	d73c <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
    387e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
        if(typ==2) return_code=0x2005; // we should only get cmds
    3880:	f242 0305 	movw	r3, #8197	; 0x2005
        int op = CONTAINER->op;
    3884:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
        int id = CONTAINER->transaction_id;
    3886:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
        if(typ==2) return_code=0x2005; // we should only get cmds
    388a:	2a02      	cmp	r2, #2
    388c:	bf08      	it	eq
    388e:	461e      	moveq	r6, r3
        switch (op)
    3890:	f241 021b 	movw	r2, #4123	; 0x101b
        int p3 = CONTAINER->params[2];
    3894:	6b63      	ldr	r3, [r4, #52]	; 0x34
        switch (op)
    3896:	4291      	cmp	r1, r2
        int len= CONTAINER->len;
    3898:	6a27      	ldr	r7, [r4, #32]
        int p2 = CONTAINER->params[1];
    389a:	e9d4 ab0b 	ldrd	sl, fp, [r4, #44]	; 0x2c
        TID=id;
    389e:	f8c8 942c 	str.w	r9, [r8, #1068]	; 0x42c
        switch (op)
    38a2:	d826      	bhi.n	38f2 <MTPD::loop()+0xc2>
    38a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    38a8:	f240 80cc 	bls.w	3a44 <MTPD::loop()+0x214>
    38ac:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
    38b0:	440a      	add	r2, r1
    38b2:	2a1a      	cmp	r2, #26
    38b4:	f200 80c6 	bhi.w	3a44 <MTPD::loop()+0x214>
    38b8:	e8df f012 	tbh	[pc, r2, lsl #1]
    38bc:	01b901c4 	.word	0x01b901c4
    38c0:	00e100dd 	.word	0x00e100dd
    38c4:	01130128 	.word	0x01130128
    38c8:	027202a7 	.word	0x027202a7
    38cc:	00c402e1 	.word	0x00c402e1
    38d0:	02660249 	.word	0x02660249
    38d4:	00c4025a 	.word	0x00c4025a
    38d8:	00c400c4 	.word	0x00c400c4
    38dc:	00c400c4 	.word	0x00c400c4
    38e0:	022000c4 	.word	0x022000c4
    38e4:	00c401f7 	.word	0x00c401f7
    38e8:	00c400c4 	.word	0x00c400c4
    38ec:	019701a7 	.word	0x019701a7
    38f0:	015d      	.short	0x015d
    38f2:	f246 73ff 	movw	r3, #26623	; 0x67ff
    38f6:	440b      	add	r3, r1
    38f8:	b29b      	uxth	r3, r3
    38fa:	2b03      	cmp	r3, #3
    38fc:	f200 80a2 	bhi.w	3a44 <MTPD::loop()+0x214>
    3900:	4b7f      	ldr	r3, [pc, #508]	; (3b00 <MTPD::loop()+0x2d0>)
    3902:	440b      	add	r3, r1
    3904:	2b02      	cmp	r3, #2
    3906:	f200 8347 	bhi.w	3f98 <MTPD::loop()+0x768>
    390a:	e8df f003 	tbb	[pc, r3]
    390e:	2e65      	.short	0x2e65
    3910:	02          	.byte	0x02
    3911:	00          	.byte	0x00
      while(!usb_mtp_available());
    3912:	f00b fed5 	bl	f6c0 <usb_mtp_available>
    3916:	2800      	cmp	r0, #0
    3918:	d0fb      	beq.n	3912 <MTPD::loop()+0xe2>
      return usb_mtp_recv(data_buffer,60);
    391a:	213c      	movs	r1, #60	; 0x3c
    391c:	4628      	mov	r0, r5
    391e:	f00b fe7d 	bl	f61c <usb_mtp_recv>
        index=0;
    3922:	4b78      	ldr	r3, [pc, #480]	; (3b04 <MTPD::loop()+0x2d4>)
    3924:	2200      	movs	r2, #0
    3926:	601a      	str	r2, [r3, #0]
      if(p2==0xDC07)
    3928:	f64d 4307 	movw	r3, #56327	; 0xdc07
    392c:	459b      	cmp	fp, r3
    392e:	f040 82db 	bne.w	3ee8 <MTPD::loop()+0x6b8>
    3932:	4651      	mov	r1, sl
    3934:	4620      	mov	r0, r4
    3936:	f7ff fe1d 	bl	3574 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
            CONTAINER->op=return_code;
    393a:	b286      	uxth	r6, r0
    393c:	e09c      	b.n	3a78 <MTPD::loop()+0x248>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    393e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3940:	4971      	ldr	r1, [pc, #452]	; (3b08 <MTPD::loop()+0x2d8>)
    3942:	486c      	ldr	r0, [pc, #432]	; (3af4 <MTPD::loop()+0x2c4>)
    3944:	f009 fefa 	bl	d73c <Print::printf(char const*, ...)>
    3948:	6a23      	ldr	r3, [r4, #32]
    394a:	2b10      	cmp	r3, #16
    394c:	d98f      	bls.n	386e <MTPD::loop()+0x3e>
    394e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3950:	496d      	ldr	r1, [pc, #436]	; (3b08 <MTPD::loop()+0x2d8>)
    3952:	4868      	ldr	r0, [pc, #416]	; (3af4 <MTPD::loop()+0x2c4>)
    3954:	f009 fef2 	bl	d73c <Print::printf(char const*, ...)>
    3958:	6a23      	ldr	r3, [r4, #32]
    395a:	2b14      	cmp	r3, #20
    395c:	d987      	bls.n	386e <MTPD::loop()+0x3e>
    395e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3960:	4969      	ldr	r1, [pc, #420]	; (3b08 <MTPD::loop()+0x2d8>)
    3962:	4864      	ldr	r0, [pc, #400]	; (3af4 <MTPD::loop()+0x2c4>)
    3964:	f009 feea 	bl	d73c <Print::printf(char const*, ...)>
    3968:	e781      	b.n	386e <MTPD::loop()+0x3e>
              TRANSMIT(getObjectPropValue(p1,p2));
    396a:	2300      	movs	r3, #0
    396c:	2201      	movs	r2, #1
    396e:	4651      	mov	r1, sl
    3970:	4620      	mov	r0, r4
    3972:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3976:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    397a:	465a      	mov	r2, fp
    397c:	f7ff fb90 	bl	30a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    3980:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    3984:	2300      	movs	r3, #0
    3986:	a904      	add	r1, sp, #16
    3988:	320c      	adds	r2, #12
    398a:	4620      	mov	r0, r4
    398c:	9204      	str	r2, [sp, #16]
    398e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3990:	f8ad 2016 	strh.w	r2, [sp, #22]
    3994:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3996:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    399a:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    399e:	2302      	movs	r3, #2
    39a0:	9206      	str	r2, [sp, #24]
    39a2:	220c      	movs	r2, #12
    39a4:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    39a8:	f7fe fb72 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    39ac:	465a      	mov	r2, fp
    39ae:	4651      	mov	r1, sl
    39b0:	4620      	mov	r0, r4
    39b2:	f504 7808 	add.w	r8, r4, #544	; 0x220
    39b6:	f7ff fb73 	bl	30a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    39ba:	9b04      	ldr	r3, [sp, #16]
    39bc:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    39c0:	f1bb 0f00 	cmp.w	fp, #0
    39c4:	d006      	beq.n	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39c6:	223c      	movs	r2, #60	; 0x3c
    39c8:	4659      	mov	r1, fp
    39ca:	4640      	mov	r0, r8
    39cc:	f00b fe90 	bl	f6f0 <usb_mtp_send>
    39d0:	2800      	cmp	r0, #0
    39d2:	ddf8      	ble.n	39c6 <MTPD::loop()+0x196>
            CONTAINER->op=return_code;
    39d4:	b2b6      	uxth	r6, r6
              break;
    39d6:	e039      	b.n	3a4c <MTPD::loop()+0x21c>
              TRANSMIT(getObjectPropDesc(p1,p2));
    39d8:	2300      	movs	r3, #0
    39da:	2201      	movs	r2, #1
    39dc:	4651      	mov	r1, sl
    39de:	4620      	mov	r0, r4
    39e0:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    39e4:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    39e8:	465a      	mov	r2, fp
    39ea:	f7ff f8f1 	bl	2bd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    39ee:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    39f2:	2300      	movs	r3, #0
    39f4:	a904      	add	r1, sp, #16
    39f6:	320c      	adds	r2, #12
    39f8:	4620      	mov	r0, r4
    39fa:	9204      	str	r2, [sp, #16]
    39fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    39fe:	f8ad 2016 	strh.w	r2, [sp, #22]
    3a02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3a04:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3a08:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3a0c:	2302      	movs	r3, #2
    3a0e:	9206      	str	r2, [sp, #24]
    3a10:	220c      	movs	r2, #12
    3a12:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3a16:	f7fe fb3b 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    3a1a:	465a      	mov	r2, fp
    3a1c:	4651      	mov	r1, sl
    3a1e:	4620      	mov	r0, r4
    3a20:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a24:	f7ff f8d4 	bl	2bd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    3a28:	9b04      	ldr	r3, [sp, #16]
    3a2a:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3a2e:	f1bb 0f00 	cmp.w	fp, #0
    3a32:	d0cf      	beq.n	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a34:	223c      	movs	r2, #60	; 0x3c
    3a36:	4659      	mov	r1, fp
    3a38:	4640      	mov	r0, r8
    3a3a:	f00b fe59 	bl	f6f0 <usb_mtp_send>
    3a3e:	2800      	cmp	r0, #0
    3a40:	ddf8      	ble.n	3a34 <MTPD::loop()+0x204>
    3a42:	e7c7      	b.n	39d4 <MTPD::loop()+0x1a4>
            TRANSMIT(WriteDescriptor());
    3a44:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a48:	f242 0605 	movw	r6, #8197	; 0x2005
            CONTAINER->type=3;
    3a4c:	2303      	movs	r3, #3
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3a4e:	4629      	mov	r1, r5
    3a50:	463a      	mov	r2, r7
    3a52:	4640      	mov	r0, r8
            CONTAINER->op=return_code;
    3a54:	84e6      	strh	r6, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    3a56:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
            CONTAINER->len=len;
    3a5a:	6227      	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
    3a5c:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
            CONTAINER->type=3;
    3a60:	84a3      	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    3a62:	f00a fc57 	bl	e314 <memcpy>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a66:	223c      	movs	r2, #60	; 0x3c
    3a68:	4639      	mov	r1, r7
    3a6a:	4640      	mov	r0, r8
    3a6c:	f00b fe40 	bl	f6f0 <usb_mtp_send>
    3a70:	2800      	cmp	r0, #0
    3a72:	ddf8      	ble.n	3a66 <MTPD::loop()+0x236>
    3a74:	e6e3      	b.n	383e <MTPD::loop()+0xe>
            CONTAINER->op=return_code;
    3a76:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3a78:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3a7c:	e7e6      	b.n	3a4c <MTPD::loop()+0x21c>
              TRANSMIT(WriteStorageIDs());
    3a7e:	f04f 0b00 	mov.w	fp, #0
    3a82:	2301      	movs	r3, #1
    3a84:	4620      	mov	r0, r4
    3a86:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3a8a:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3a8e:	f7fe fd6d 	bl	256c <MTPD::WriteStorageIDs()>
    3a92:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3a96:	220c      	movs	r2, #12
    3a98:	a904      	add	r1, sp, #16
    3a9a:	330c      	adds	r3, #12
    3a9c:	4620      	mov	r0, r4
    3a9e:	9304      	str	r3, [sp, #16]
    3aa0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3aa2:	f8ad 3016 	strh.w	r3, [sp, #22]
    3aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3aa8:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3aac:	9306      	str	r3, [sp, #24]
    3aae:	2302      	movs	r3, #2
    3ab0:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3ab4:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3abc:	f7fe fae8 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    3ac0:	4620      	mov	r0, r4
    3ac2:	f7fe fd53 	bl	256c <MTPD::WriteStorageIDs()>
    3ac6:	9b04      	ldr	r3, [sp, #16]
    3ac8:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3acc:	f1bb 0f00 	cmp.w	fp, #0
    3ad0:	d080      	beq.n	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ad2:	223c      	movs	r2, #60	; 0x3c
    3ad4:	4659      	mov	r1, fp
    3ad6:	4640      	mov	r0, r8
    3ad8:	f00b fe0a 	bl	f6f0 <usb_mtp_send>
    3adc:	2800      	cmp	r0, #0
    3ade:	ddf8      	ble.n	3ad2 <MTPD::loop()+0x2a2>
    3ae0:	e778      	b.n	39d4 <MTPD::loop()+0x1a4>
            if (p2) 
    3ae2:	f1bb 0f00 	cmp.w	fp, #0
    3ae6:	f000 820c 	beq.w	3f02 <MTPD::loop()+0x6d2>
            TRANSMIT(WriteDescriptor());
    3aea:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3aee:	f242 0614 	movw	r6, #8212	; 0x2014
    3af2:	e7ab      	b.n	3a4c <MTPD::loop()+0x21c>
    3af4:	20008b94 	.word	0x20008b94
    3af8:	20000bc4 	.word	0x20000bc4
    3afc:	20000bd8 	.word	0x20000bd8
    3b00:	ffff67fe 	.word	0xffff67fe
    3b04:	20018da4 	.word	0x20018da4
    3b08:	20000bd4 	.word	0x20000bd4
            TRANSMIT(GetStorageInfo(p1));
    3b0c:	f04f 0b00 	mov.w	fp, #0
    3b10:	2301      	movs	r3, #1
    3b12:	4651      	mov	r1, sl
    3b14:	4620      	mov	r0, r4
    3b16:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b1a:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3b1e:	f7fe fd61 	bl	25e4 <MTPD::GetStorageInfo(unsigned long)>
    3b22:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3b26:	220c      	movs	r2, #12
    3b28:	a904      	add	r1, sp, #16
    3b2a:	330c      	adds	r3, #12
    3b2c:	4620      	mov	r0, r4
    3b2e:	9304      	str	r3, [sp, #16]
    3b30:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3b32:	f8ad 3016 	strh.w	r3, [sp, #22]
    3b36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3b38:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3b3c:	9306      	str	r3, [sp, #24]
    3b3e:	2302      	movs	r3, #2
    3b40:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3b44:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3b48:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3b4c:	f7fe faa0 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    3b50:	4651      	mov	r1, sl
    3b52:	4620      	mov	r0, r4
    3b54:	f7fe fd46 	bl	25e4 <MTPD::GetStorageInfo(unsigned long)>
    3b58:	9b04      	ldr	r3, [sp, #16]
    3b5a:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3b5e:	f1bb 0f00 	cmp.w	fp, #0
    3b62:	f43f af37 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b66:	223c      	movs	r2, #60	; 0x3c
    3b68:	4659      	mov	r1, fp
    3b6a:	4640      	mov	r0, r8
    3b6c:	f00b fdc0 	bl	f6f0 <usb_mtp_send>
    3b70:	2800      	cmp	r0, #0
    3b72:	ddf8      	ble.n	3b66 <MTPD::loop()+0x336>
    3b74:	e72e      	b.n	39d4 <MTPD::loop()+0x1a4>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3b76:	2200      	movs	r2, #0
    3b78:	4651      	mov	r1, sl
    3b7a:	4620      	mov	r0, r4
    3b7c:	9303      	str	r3, [sp, #12]
    3b7e:	f8c8 2428 	str.w	r2, [r8, #1064]	; 0x428
    3b82:	2201      	movs	r2, #1
    3b84:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
    3b88:	465a      	mov	r2, fp
    3b8a:	f7ff fc19 	bl	33c0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3b8e:	f8d8 2428 	ldr.w	r2, [r8, #1064]	; 0x428
    3b92:	2300      	movs	r3, #0
    3b94:	a904      	add	r1, sp, #16
    3b96:	320c      	adds	r2, #12
    3b98:	9007      	str	r0, [sp, #28]
    3b9a:	4620      	mov	r0, r4
    3b9c:	9204      	str	r2, [sp, #16]
    3b9e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    3ba0:	f8ad 2016 	strh.w	r2, [sp, #22]
    3ba4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3ba6:	f8c8 3428 	str.w	r3, [r8, #1064]	; 0x428
    3baa:	9206      	str	r2, [sp, #24]
    3bac:	2202      	movs	r2, #2
    3bae:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3bb2:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3bb6:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3bba:	2220      	movs	r2, #32
    3bbc:	f7fe fa68 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    3bc0:	9b03      	ldr	r3, [sp, #12]
    3bc2:	465a      	mov	r2, fp
    3bc4:	4651      	mov	r1, sl
    3bc6:	4620      	mov	r0, r4
    3bc8:	f7ff fbfa 	bl	33c0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    3bcc:	9b04      	ldr	r3, [sp, #16]
    3bce:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3bd2:	f1bb 0f00 	cmp.w	fp, #0
    3bd6:	f43f aefd 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bda:	223c      	movs	r2, #60	; 0x3c
    3bdc:	4659      	mov	r1, fp
    3bde:	4640      	mov	r0, r8
    3be0:	f00b fd86 	bl	f6f0 <usb_mtp_send>
    3be4:	2800      	cmp	r0, #0
    3be6:	ddf8      	ble.n	3bda <MTPD::loop()+0x3aa>
    3be8:	e6f4      	b.n	39d4 <MTPD::loop()+0x1a4>
      return storage_->copy(handle,store1,newHandle);
    3bea:	6820      	ldr	r0, [r4, #0]
    3bec:	f10b 32ff 	add.w	r2, fp, #4294967295
    3bf0:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3bf2:	f504 7808 	add.w	r8, r4, #544	; 0x220
      return storage_->copy(handle,store1,newHandle);
    3bf6:	6806      	ldr	r6, [r0, #0]
    3bf8:	6d36      	ldr	r6, [r6, #80]	; 0x50
    3bfa:	47b0      	blx	r6
              if(!return_code) 
    3bfc:	2800      	cmp	r0, #0
    3bfe:	f040 817b 	bne.w	3ef8 <MTPD::loop()+0x6c8>
            TRANSMIT(WriteDescriptor());
    3c02:	f242 0605 	movw	r6, #8197	; 0x2005
    3c06:	270c      	movs	r7, #12
    3c08:	e720      	b.n	3a4c <MTPD::loop()+0x21c>
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c0a:	6820      	ldr	r0, [r4, #0]
    3c0c:	f10b 32ff 	add.w	r2, fp, #4294967295
    3c10:	4651      	mov	r1, sl
            TRANSMIT(WriteDescriptor());
    3c12:	f504 7808 	add.w	r8, r4, #544	; 0x220
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c16:	6806      	ldr	r6, [r0, #0]
              break;
    3c18:	270c      	movs	r7, #12
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3c1a:	6cf6      	ldr	r6, [r6, #76]	; 0x4c
    3c1c:	47b0      	blx	r6
    3c1e:	f242 0601 	movw	r6, #8193	; 0x2001
    3c22:	f242 0305 	movw	r3, #8197	; 0x2005
    3c26:	2800      	cmp	r0, #0
    3c28:	bf08      	it	eq
    3c2a:	461e      	moveq	r6, r3
              break;
    3c2c:	e70e      	b.n	3a4c <MTPD::loop()+0x21c>
      storage_->ResetIndex();
    3c2e:	6820      	ldr	r0, [r4, #0]
            CONTAINER->op=return_code;
    3c30:	b2b6      	uxth	r6, r6
      sessionID_ = id;
    3c32:	4bc7      	ldr	r3, [pc, #796]	; (3f50 <MTPD::loop()+0x720>)
            TRANSMIT(WriteDescriptor());
    3c34:	f504 7808 	add.w	r8, r4, #544	; 0x220
      sessionID_ = id;
    3c38:	f8c3 a000 	str.w	sl, [r3]
      storage_->ResetIndex();
    3c3c:	6803      	ldr	r3, [r0, #0]
    3c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    3c40:	4798      	blx	r3
    }
    3c42:	e703      	b.n	3a4c <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3c44:	f04f 0b00 	mov.w	fp, #0
    3c48:	2301      	movs	r3, #1
    3c4a:	4620      	mov	r0, r4
    3c4c:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3c50:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3c54:	f7fe fb02 	bl	225c <MTPD::WriteDescriptor()>
    3c58:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3c5c:	220c      	movs	r2, #12
    3c5e:	a904      	add	r1, sp, #16
    3c60:	330c      	adds	r3, #12
    3c62:	4620      	mov	r0, r4
    3c64:	9304      	str	r3, [sp, #16]
    3c66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3c68:	f8ad 3016 	strh.w	r3, [sp, #22]
    3c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3c6e:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3c72:	9306      	str	r3, [sp, #24]
    3c74:	2302      	movs	r3, #2
    3c76:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3c7a:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3c7e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3c82:	f7fe fa05 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    3c86:	4620      	mov	r0, r4
    3c88:	f7fe fae8 	bl	225c <MTPD::WriteDescriptor()>
    3c8c:	9b04      	ldr	r3, [sp, #16]
    3c8e:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3c92:	f1bb 0f00 	cmp.w	fp, #0
    3c96:	f43f ae9d 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c9a:	223c      	movs	r2, #60	; 0x3c
    3c9c:	4659      	mov	r1, fp
    3c9e:	4640      	mov	r0, r8
    3ca0:	f00b fd26 	bl	f6f0 <usb_mtp_send>
    3ca4:	2800      	cmp	r0, #0
    3ca6:	ddf8      	ble.n	3c9a <MTPD::loop()+0x46a>
    3ca8:	e694      	b.n	39d4 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropValue(p1));
    3caa:	2301      	movs	r3, #1
    3cac:	f04f 0b00 	mov.w	fp, #0
    3cb0:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3cb4:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropValue(p1));
    3cb8:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3cbc:	459a      	cmp	sl, r3
    3cbe:	f000 814d 	beq.w	3f5c <MTPD::loop()+0x72c>
              TRANSMIT(GetDevicePropValue(p1));
    3cc2:	220c      	movs	r2, #12
    3cc4:	4ba3      	ldr	r3, [pc, #652]	; (3f54 <MTPD::loop()+0x724>)
    3cc6:	a904      	add	r1, sp, #16
    3cc8:	4620      	mov	r0, r4
    3cca:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3cce:	f8cd 9018 	str.w	r9, [sp, #24]
    3cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3cd6:	f7fe f9db 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3cda:	9b04      	ldr	r3, [sp, #16]
    3cdc:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3ce0:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3ce4:	f1bb 0f00 	cmp.w	fp, #0
    3ce8:	f43f ae74 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cec:	223c      	movs	r2, #60	; 0x3c
    3cee:	4659      	mov	r1, fp
    3cf0:	4640      	mov	r0, r8
    3cf2:	f00b fcfd 	bl	f6f0 <usb_mtp_send>
    3cf6:	2800      	cmp	r0, #0
    3cf8:	ddf8      	ble.n	3cec <MTPD::loop()+0x4bc>
    3cfa:	e66b      	b.n	39d4 <MTPD::loop()+0x1a4>
              TRANSMIT(GetDevicePropDesc(p1));
    3cfc:	2301      	movs	r3, #1
    3cfe:	f04f 0b00 	mov.w	fp, #0
    3d02:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    switch (prop) {
    3d06:	f24d 4302 	movw	r3, #54274	; 0xd402
              TRANSMIT(GetDevicePropDesc(p1));
    3d0a:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    switch (prop) {
    3d0e:	459a      	cmp	sl, r3
    3d10:	f000 8101 	beq.w	3f16 <MTPD::loop()+0x6e6>
              TRANSMIT(GetDevicePropDesc(p1));
    3d14:	220c      	movs	r2, #12
    3d16:	4b90      	ldr	r3, [pc, #576]	; (3f58 <MTPD::loop()+0x728>)
    3d18:	a904      	add	r1, sp, #16
    3d1a:	4620      	mov	r0, r4
    3d1c:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3d20:	f8cd 9018 	str.w	r9, [sp, #24]
    3d24:	e9cd 2304 	strd	r2, r3, [sp, #16]
    { if (write_get_length_) 
    3d28:	f7fe f9b2 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3d2c:	9b04      	ldr	r3, [sp, #16]
    3d2e:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d32:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3d36:	f1bb 0f00 	cmp.w	fp, #0
    3d3a:	f43f ae4b 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d3e:	223c      	movs	r2, #60	; 0x3c
    3d40:	4659      	mov	r1, fp
    3d42:	4640      	mov	r0, r8
    3d44:	f00b fcd4 	bl	f6f0 <usb_mtp_send>
    3d48:	2800      	cmp	r0, #0
    3d4a:	ddf8      	ble.n	3d3e <MTPD::loop()+0x50e>
    3d4c:	e642      	b.n	39d4 <MTPD::loop()+0x1a4>
              if (p2) {
    3d4e:	f1bb 0f00 	cmp.w	fp, #0
    3d52:	f47f aeca 	bne.w	3aea <MTPD::loop()+0x2ba>
                if (!storage_->DeleteObject(p1)) {
    3d56:	6820      	ldr	r0, [r4, #0]
    3d58:	4651      	mov	r1, sl
    3d5a:	6803      	ldr	r3, [r0, #0]
    3d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    3d5e:	4798      	blx	r3
    3d60:	2800      	cmp	r0, #0
    3d62:	f47f ae88 	bne.w	3a76 <MTPD::loop()+0x246>
            TRANSMIT(WriteDescriptor());
    3d66:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d6a:	f242 0612 	movw	r6, #8210	; 0x2012
    3d6e:	e66d      	b.n	3a4c <MTPD::loop()+0x21c>
              if(!SendObject()) return_code = 0x2005;
    3d70:	4620      	mov	r0, r4
    3d72:	f7ff fcc7 	bl	3704 <MTPD::SendObject()>
    3d76:	2800      	cmp	r0, #0
    3d78:	f040 80b9 	bne.w	3eee <MTPD::loop()+0x6be>
            TRANSMIT(WriteDescriptor());
    3d7c:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3d80:	f242 0605 	movw	r6, #8197	; 0x2005
    3d84:	270c      	movs	r7, #12
    3d86:	e661      	b.n	3a4c <MTPD::loop()+0x21c>
              p3 = SendObjectInfo(p1, // storage
    3d88:	465a      	mov	r2, fp
    3d8a:	4651      	mov	r1, sl
    3d8c:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3d8e:	b2b6      	uxth	r6, r6
              p3 = SendObjectInfo(p1, // storage
    3d90:	f7ff fc0c 	bl	35ac <MTPD::SendObjectInfo(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3d94:	f504 7808 	add.w	r8, r4, #544	; 0x220
              break;
    3d98:	2718      	movs	r7, #24
              CONTAINER->params[2]=p3;
    3d9a:	e9c4 b00c 	strd	fp, r0, [r4, #48]	; 0x30
              break;
    3d9e:	e655      	b.n	3a4c <MTPD::loop()+0x21c>
            TRANSMIT(GetObjectInfo(p1));
    3da0:	f04f 0b00 	mov.w	fp, #0
    3da4:	2301      	movs	r3, #1
    3da6:	4651      	mov	r1, sl
    3da8:	4620      	mov	r0, r4
    3daa:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3dae:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3db2:	f7fe fd65 	bl	2880 <MTPD::GetObjectInfo(unsigned long)>
    3db6:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3dba:	220c      	movs	r2, #12
    3dbc:	a904      	add	r1, sp, #16
    3dbe:	330c      	adds	r3, #12
    3dc0:	4620      	mov	r0, r4
    3dc2:	9304      	str	r3, [sp, #16]
    3dc4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3dc6:	f8ad 3016 	strh.w	r3, [sp, #22]
    3dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3dcc:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3dd0:	9306      	str	r3, [sp, #24]
    3dd2:	2302      	movs	r3, #2
    3dd4:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3dd8:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3ddc:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3de0:	f7fe f956 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    3de4:	4651      	mov	r1, sl
    3de6:	4620      	mov	r0, r4
    3de8:	f7fe fd4a 	bl	2880 <MTPD::GetObjectInfo(unsigned long)>
    3dec:	9b04      	ldr	r3, [sp, #16]
    3dee:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3df2:	f1bb 0f00 	cmp.w	fp, #0
    3df6:	f43f aded 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3dfa:	223c      	movs	r2, #60	; 0x3c
    3dfc:	4659      	mov	r1, fp
    3dfe:	4640      	mov	r0, r8
    3e00:	f00b fc76 	bl	f6f0 <usb_mtp_send>
    3e04:	2800      	cmp	r0, #0
    3e06:	ddf8      	ble.n	3dfa <MTPD::loop()+0x5ca>
    3e08:	e5e4      	b.n	39d4 <MTPD::loop()+0x1a4>
            if (p2) 
    3e0a:	f1bb 0f00 	cmp.w	fp, #0
    3e0e:	f47f ae6c 	bne.w	3aea <MTPD::loop()+0x2ba>
              TRANSMIT(GetObjectHandles(p1, p3));
    3e12:	2201      	movs	r2, #1
    3e14:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
      write_length_ = GetNumObjects(storage, parent);
    3e18:	4651      	mov	r1, sl
    3e1a:	4620      	mov	r0, r4
              TRANSMIT(GetObjectHandles(p1, p3));
    3e1c:	f888 2424 	strb.w	r2, [r8, #1060]	; 0x424
      write_length_ = GetNumObjects(storage, parent);
    3e20:	461a      	mov	r2, r3
    3e22:	9303      	str	r3, [sp, #12]
    3e24:	f7fe fcd4 	bl	27d0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
              TRANSMIT(GetObjectHandles(p1, p3));
    3e28:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
      write_length_ *= 4;
    3e2a:	0080      	lsls	r0, r0, #2
    3e2c:	a904      	add	r1, sp, #16
              TRANSMIT(GetObjectHandles(p1, p3));
    3e2e:	f8ad 2016 	strh.w	r2, [sp, #22]
    3e32:	3010      	adds	r0, #16
    3e34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3e36:	9004      	str	r0, [sp, #16]
    3e38:	4620      	mov	r0, r4
    3e3a:	9206      	str	r2, [sp, #24]
    3e3c:	2202      	movs	r2, #2
    3e3e:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e42:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3e46:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3e4a:	f8ad 2014 	strh.w	r2, [sp, #20]
    { if (write_get_length_) 
    3e4e:	220c      	movs	r2, #12
    3e50:	f7fe f91e 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    3e54:	9b03      	ldr	r3, [sp, #12]
    3e56:	4651      	mov	r1, sl
    3e58:	4620      	mov	r0, r4
    3e5a:	461a      	mov	r2, r3
    3e5c:	f7fe fccc 	bl	27f8 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    3e60:	9b04      	ldr	r3, [sp, #16]
    3e62:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3e66:	f1bb 0f00 	cmp.w	fp, #0
    3e6a:	f43f adb3 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e6e:	223c      	movs	r2, #60	; 0x3c
    3e70:	4659      	mov	r1, fp
    3e72:	4640      	mov	r0, r8
    3e74:	f00b fc3c 	bl	f6f0 <usb_mtp_send>
    3e78:	2800      	cmp	r0, #0
    3e7a:	ddf8      	ble.n	3e6e <MTPD::loop()+0x63e>
    3e7c:	e5aa      	b.n	39d4 <MTPD::loop()+0x1a4>
            TRANSMIT(GetObject(p1));
    3e7e:	f04f 0b00 	mov.w	fp, #0
    3e82:	2301      	movs	r3, #1
    3e84:	4651      	mov	r1, sl
    3e86:	4620      	mov	r0, r4
    3e88:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3e8c:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3e90:	f7ff fa10 	bl	32b4 <MTPD::GetObject(unsigned long)>
    3e94:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3e98:	220c      	movs	r2, #12
    3e9a:	a904      	add	r1, sp, #16
    3e9c:	330c      	adds	r3, #12
    3e9e:	4620      	mov	r0, r4
    3ea0:	9304      	str	r3, [sp, #16]
    3ea2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3ea4:	f8ad 3016 	strh.w	r3, [sp, #22]
    3ea8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3eaa:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3eae:	9306      	str	r3, [sp, #24]
    3eb0:	2302      	movs	r3, #2
    3eb2:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3eb6:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3eba:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3ebe:	f7fe f8e7 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    3ec2:	4651      	mov	r1, sl
    3ec4:	4620      	mov	r0, r4
    3ec6:	f7ff f9f5 	bl	32b4 <MTPD::GetObject(unsigned long)>
    3eca:	9b04      	ldr	r3, [sp, #16]
    3ecc:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3ed0:	f1bb 0f00 	cmp.w	fp, #0
    3ed4:	f43f ad7e 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ed8:	223c      	movs	r2, #60	; 0x3c
    3eda:	4659      	mov	r1, fp
    3edc:	4640      	mov	r0, r8
    3ede:	f00b fc07 	bl	f6f0 <usb_mtp_send>
    3ee2:	2800      	cmp	r0, #0
    3ee4:	ddf8      	ble.n	3ed8 <MTPD::loop()+0x6a8>
    3ee6:	e575      	b.n	39d4 <MTPD::loop()+0x1a4>
    3ee8:	f242 0605 	movw	r6, #8197	; 0x2005
              break;
    3eec:	e5c4      	b.n	3a78 <MTPD::loop()+0x248>
            CONTAINER->op=return_code;
    3eee:	b2b6      	uxth	r6, r6
            TRANSMIT(WriteDescriptor());
    3ef0:	f504 7808 	add.w	r8, r4, #544	; 0x220
            CONTAINER->op=return_code;
    3ef4:	270c      	movs	r7, #12
    3ef6:	e5a9      	b.n	3a4c <MTPD::loop()+0x21c>
            TRANSMIT(WriteDescriptor());
    3ef8:	4682      	mov	sl, r0
    3efa:	f242 0601 	movw	r6, #8193	; 0x2001
    3efe:	2710      	movs	r7, #16
    3f00:	e5a4      	b.n	3a4c <MTPD::loop()+0x21c>
                p1 = GetNumObjects(p1, p3);
    3f02:	4651      	mov	r1, sl
    3f04:	461a      	mov	r2, r3
    3f06:	4620      	mov	r0, r4
            CONTAINER->op=return_code;
    3f08:	b2b6      	uxth	r6, r6
                p1 = GetNumObjects(p1, p3);
    3f0a:	f7fe fc61 	bl	27d0 <MTPD::GetNumObjects(unsigned long, unsigned long)>
            TRANSMIT(WriteDescriptor());
    3f0e:	f504 7808 	add.w	r8, r4, #544	; 0x220
                p1 = GetNumObjects(p1, p3);
    3f12:	4682      	mov	sl, r0
    3f14:	e59a      	b.n	3a4c <MTPD::loop()+0x21c>
    3f16:	4620      	mov	r0, r4
    3f18:	f7fe f946 	bl	21a8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    3f1c:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3f20:	4620      	mov	r0, r4
    3f22:	220c      	movs	r2, #12
    3f24:	330c      	adds	r3, #12
    3f26:	a904      	add	r1, sp, #16
    3f28:	9304      	str	r3, [sp, #16]
    3f2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3f2c:	f8ad 3016 	strh.w	r3, [sp, #22]
    3f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f32:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3f36:	9306      	str	r3, [sp, #24]
    3f38:	2302      	movs	r3, #2
    3f3a:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3f3e:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3f42:	f7fe f8a5 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    switch (prop) {
    3f46:	4620      	mov	r0, r4
    3f48:	f7fe f92e 	bl	21a8 <MTPD::GetDevicePropDesc(unsigned long) [clone .part.0]>
    3f4c:	e6ee      	b.n	3d2c <MTPD::loop()+0x4fc>
    3f4e:	bf00      	nop
    3f50:	200199c4 	.word	0x200199c4
    3f54:	10150002 	.word	0x10150002
    3f58:	10140002 	.word	0x10140002
    if (*str) 
    3f5c:	4620      	mov	r0, r4
    3f5e:	4929      	ldr	r1, [pc, #164]	; (4004 <MTPD::loop()+0x7d4>)
    3f60:	f7fe f8d4 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    3f64:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3f68:	a904      	add	r1, sp, #16
    3f6a:	4620      	mov	r0, r4
    3f6c:	330c      	adds	r3, #12
    3f6e:	220c      	movs	r2, #12
    3f70:	9304      	str	r3, [sp, #16]
    3f72:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3f74:	f8ad 3016 	strh.w	r3, [sp, #22]
    3f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f7a:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3f7e:	9306      	str	r3, [sp, #24]
    3f80:	2302      	movs	r3, #2
    3f82:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3f86:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3f8a:	f7fe f881 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
    if (*str) 
    3f8e:	491d      	ldr	r1, [pc, #116]	; (4004 <MTPD::loop()+0x7d4>)
    3f90:	4620      	mov	r0, r4
    3f92:	f7fe f8bb 	bl	210c <MTPD::writestring(char const*) [clone .part.0]>
  }
    3f96:	e6a0      	b.n	3cda <MTPD::loop()+0x4aa>
              TRANSMIT(getObjectPropsSupported(p1));
    3f98:	f04f 0b00 	mov.w	fp, #0
    3f9c:	2301      	movs	r3, #1
    3f9e:	4651      	mov	r1, sl
    3fa0:	4620      	mov	r0, r4
    3fa2:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3fa6:	f888 3424 	strb.w	r3, [r8, #1060]	; 0x424
    3faa:	f7fe fdcd 	bl	2b48 <MTPD::getObjectPropsSupported(unsigned long)>
    3fae:	f8d8 3428 	ldr.w	r3, [r8, #1064]	; 0x428
    3fb2:	220c      	movs	r2, #12
    3fb4:	a904      	add	r1, sp, #16
    3fb6:	330c      	adds	r3, #12
    3fb8:	4620      	mov	r0, r4
    3fba:	9304      	str	r3, [sp, #16]
    3fbc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    3fbe:	f8ad 3016 	strh.w	r3, [sp, #22]
    3fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3fc4:	f8c8 b428 	str.w	fp, [r8, #1064]	; 0x428
    3fc8:	9306      	str	r3, [sp, #24]
    3fca:	2302      	movs	r3, #2
    3fcc:	f888 b424 	strb.w	fp, [r8, #1060]	; 0x424
    3fd0:	f504 7808 	add.w	r8, r4, #544	; 0x220
    3fd4:	f8ad 3014 	strh.w	r3, [sp, #20]
    { if (write_get_length_) 
    3fd8:	f7fe f85a 	bl	2090 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    3fdc:	4651      	mov	r1, sl
    3fde:	4620      	mov	r0, r4
    3fe0:	f7fe fdb2 	bl	2b48 <MTPD::getObjectPropsSupported(unsigned long)>
    3fe4:	9b04      	ldr	r3, [sp, #16]
    3fe6:	f3c3 0b08 	ubfx	fp, r3, #0, #9
    3fea:	f1bb 0f00 	cmp.w	fp, #0
    3fee:	f43f acf1 	beq.w	39d4 <MTPD::loop()+0x1a4>
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ff2:	223c      	movs	r2, #60	; 0x3c
    3ff4:	4659      	mov	r1, fp
    3ff6:	4640      	mov	r0, r8
    3ff8:	f00b fb7a 	bl	f6f0 <usb_mtp_send>
    3ffc:	2800      	cmp	r0, #0
    3ffe:	ddf8      	ble.n	3ff2 <MTPD::loop()+0x7c2>
    4000:	e4e8      	b.n	39d4 <MTPD::loop()+0x1a4>
    4002:	bf00      	nop
    4004:	20000bbc 	.word	0x20000bbc

00004008 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    4008:	b538      	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    400a:	f00b fe99 	bl	fd40 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    400e:	2800      	cmp	r0, #0
    4010:	d0fb      	beq.n	400a <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    4012:	4c0d      	ldr	r4, [pc, #52]	; (4048 <menuGetLine()+0x40>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    4014:	f241 3188 	movw	r1, #5000	; 0x1388
    4018:	4d0c      	ldr	r5, [pc, #48]	; (404c <menuGetLine()+0x44>)
    401a:	2328      	movs	r3, #40	; 0x28
    401c:	4622      	mov	r2, r4
    401e:	60a9      	str	r1, [r5, #8]
    4020:	4628      	mov	r0, r5
    4022:	210d      	movs	r1, #13
    4024:	f009 fcb6 	bl	d994 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    4028:	2200      	movs	r2, #0
  count = Serial.readBytesUntil('\r',buffer,40);
    402a:	4603      	mov	r3, r0
							  return write((const uint8_t *)str, strlen(str)); }
    402c:	4620      	mov	r0, r4
  buffer[count]=0;
    402e:	54e2      	strb	r2, [r4, r3]
    4030:	f00e fde6 	bl	12c00 <strlen>
    4034:	4601      	mov	r1, r0
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4036:	4620      	mov	r0, r4
    4038:	f00b feec 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    403c:	4628      	mov	r0, r5
    403e:	f009 fb61 	bl	d704 <Print::println()>
  Serial.println(buffer);
  return buffer;
}
    4042:	4620      	mov	r0, r4
    4044:	bd38      	pop	{r3, r4, r5, pc}
    4046:	bf00      	nop
    4048:	20018d7c 	.word	0x20018d7c
    404c:	20008b94 	.word	0x20008b94

00004050 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    4050:	b530      	push	{r4, r5, lr}
    4052:	b089      	sub	sp, #36	; 0x24
        virtual int available() { return usb_serial_available(); }
    4054:	f00b fe74 	bl	fd40 <usb_serial_available>

    while(!Serial.available()) ;
    4058:	2800      	cmp	r0, #0
    405a:	d0fb      	beq.n	4054 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    405c:	f00b feb4 	bl	fdc8 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    4060:	b2c0      	uxtb	r0, r0
    if(ch=='d') // set date
    4062:	2864      	cmp	r0, #100	; 0x64
    4064:	d04b      	beq.n	40fe <menu3()+0xae>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    } 
    else if(ch=='t') // set time
    4066:	3831      	subs	r0, #49	; 0x31
    4068:	2846      	cmp	r0, #70	; 0x46
    406a:	d85c      	bhi.n	4126 <menu3()+0xd6>
    406c:	e8df f010 	tbh	[pc, r0, lsl #1]
    4070:	00710067 	.word	0x00710067
    4074:	0085007b 	.word	0x0085007b
    4078:	005b005b 	.word	0x005b005b
    407c:	005b005b 	.word	0x005b005b
    4080:	005b005b 	.word	0x005b005b
    4084:	005b005b 	.word	0x005b005b
    4088:	005b005b 	.word	0x005b005b
    408c:	005b005b 	.word	0x005b005b
    4090:	005b005b 	.word	0x005b005b
    4094:	005b005b 	.word	0x005b005b
    4098:	005b005b 	.word	0x005b005b
    409c:	005b005b 	.word	0x005b005b
    40a0:	005b005b 	.word	0x005b005b
    40a4:	005b005b 	.word	0x005b005b
    40a8:	005b005b 	.word	0x005b005b
    40ac:	005b005b 	.word	0x005b005b
    40b0:	005b005b 	.word	0x005b005b
    40b4:	005b005b 	.word	0x005b005b
    40b8:	005b005b 	.word	0x005b005b
    40bc:	005b005b 	.word	0x005b005b
    40c0:	005b005b 	.word	0x005b005b
    40c4:	005b005b 	.word	0x005b005b
    40c8:	005b005b 	.word	0x005b005b
    40cc:	005b005b 	.word	0x005b005b
    40d0:	005b008f 	.word	0x005b008f
    40d4:	005b0099 	.word	0x005b0099
    40d8:	00a3005b 	.word	0x00a3005b
    40dc:	005b00b2 	.word	0x005b00b2
    40e0:	005b005b 	.word	0x005b005b
    40e4:	005b005b 	.word	0x005b005b
    40e8:	005b005b 	.word	0x005b005b
    40ec:	005b00c2 	.word	0x005b00c2
    40f0:	00cc005b 	.word	0x00cc005b
    40f4:	00e600d6 	.word	0x00e600d6
    40f8:	005b005b 	.word	0x005b005b
    40fc:	005d      	.short	0x005d
{ char *buffer=menuGetLine();
    40fe:	f7ff ff83 	bl	4008 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    4102:	ad07      	add	r5, sp, #28
    4104:	f10d 0113 	add.w	r1, sp, #19
    4108:	ac06      	add	r4, sp, #24
    410a:	aa05      	add	r2, sp, #20
    410c:	f10d 0312 	add.w	r3, sp, #18
    4110:	9400      	str	r4, [sp, #0]
    4112:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4116:	4954      	ldr	r1, [pc, #336]	; (4268 <menu3()+0x218>)
    4118:	f00e f804 	bl	12124 <sscanf>
      rtcSetDate(year,month,day);
    411c:	9805      	ldr	r0, [sp, #20]
    411e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    4122:	f000 fe29 	bl	4d78 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    4126:	b009      	add	sp, #36	; 0x24
    4128:	bd30      	pop	{r4, r5, pc}
{ char *buffer=menuGetLine();
    412a:	f7ff ff6d 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    412e:	aa07      	add	r2, sp, #28
    4130:	494e      	ldr	r1, [pc, #312]	; (426c <menu3()+0x21c>)
    4132:	f00d fff7 	bl	12124 <sscanf>
    4136:	4b4e      	ldr	r3, [pc, #312]	; (4270 <menu3()+0x220>)
    4138:	9a07      	ldr	r2, [sp, #28]
    413a:	801a      	strh	r2, [r3, #0]
  return 1;
    413c:	e7f3      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    413e:	f7ff ff63 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4142:	aa07      	add	r2, sp, #28
    4144:	4949      	ldr	r1, [pc, #292]	; (426c <menu3()+0x21c>)
    4146:	f00d ffed 	bl	12124 <sscanf>
    414a:	4b4a      	ldr	r3, [pc, #296]	; (4274 <menu3()+0x224>)
    414c:	9a07      	ldr	r2, [sp, #28]
    414e:	801a      	strh	r2, [r3, #0]
  return 1;
    4150:	e7e9      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4152:	f7ff ff59 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4156:	aa07      	add	r2, sp, #28
    4158:	4944      	ldr	r1, [pc, #272]	; (426c <menu3()+0x21c>)
    415a:	f00d ffe3 	bl	12124 <sscanf>
    415e:	4b46      	ldr	r3, [pc, #280]	; (4278 <menu3()+0x228>)
    4160:	9a07      	ldr	r2, [sp, #28]
    4162:	801a      	strh	r2, [r3, #0]
  return 1;
    4164:	e7df      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4166:	f7ff ff4f 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    416a:	aa07      	add	r2, sp, #28
    416c:	493f      	ldr	r1, [pc, #252]	; (426c <menu3()+0x21c>)
    416e:	f00d ffd9 	bl	12124 <sscanf>
    4172:	4b42      	ldr	r3, [pc, #264]	; (427c <menu3()+0x22c>)
    4174:	9a07      	ldr	r2, [sp, #28]
    4176:	801a      	strh	r2, [r3, #0]
  return 1;
    4178:	e7d5      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    417a:	f7ff ff45 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    417e:	aa07      	add	r2, sp, #28
    4180:	493a      	ldr	r1, [pc, #232]	; (426c <menu3()+0x21c>)
    4182:	f00d ffcf 	bl	12124 <sscanf>
    4186:	4b3e      	ldr	r3, [pc, #248]	; (4280 <menu3()+0x230>)
    4188:	9a07      	ldr	r2, [sp, #28]
    418a:	801a      	strh	r2, [r3, #0]
}
    418c:	e7cb      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    418e:	f7ff ff3b 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    4192:	aa07      	add	r2, sp, #28
    4194:	4935      	ldr	r1, [pc, #212]	; (426c <menu3()+0x21c>)
    4196:	f00d ffc5 	bl	12124 <sscanf>
    419a:	4b3a      	ldr	r3, [pc, #232]	; (4284 <menu3()+0x234>)
    419c:	9a07      	ldr	r2, [sp, #28]
    419e:	601a      	str	r2, [r3, #0]
  return 1;
    41a0:	e7c1      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41a2:	f7ff ff31 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41a6:	aa07      	add	r2, sp, #28
    41a8:	4930      	ldr	r1, [pc, #192]	; (426c <menu3()+0x21c>)
    41aa:	f00d ffbb 	bl	12124 <sscanf>
    41ae:	4b36      	ldr	r3, [pc, #216]	; (4288 <menu3()+0x238>)
    41b0:	9a07      	ldr	r2, [sp, #28]
    41b2:	801a      	strh	r2, [r3, #0]
  return 1;
    41b4:	e7b7      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    41b6:	f7ff ff27 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    41ba:	aa07      	add	r2, sp, #28
    41bc:	492b      	ldr	r1, [pc, #172]	; (426c <menu3()+0x21c>)
    41be:	f00d ffb1 	bl	12124 <sscanf>
    41c2:	4b32      	ldr	r3, [pc, #200]	; (428c <menu3()+0x23c>)
    41c4:	9a07      	ldr	r2, [sp, #28]
    41c6:	601a      	str	r2, [r3, #0]
      acqModifyFrequency(fsamp);
    41c8:	6818      	ldr	r0, [r3, #0]
}
    41ca:	b009      	add	sp, #36	; 0x24
    41cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      acqModifyFrequency(fsamp);
    41d0:	f7fc bdde 	b.w	d90 <acqModifyFrequency(unsigned long)>
{ char *buffer=menuGetLine();
    41d4:	f7ff ff18 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    41d8:	aa07      	add	r2, sp, #28
    41da:	4924      	ldr	r1, [pc, #144]	; (426c <menu3()+0x21c>)
    41dc:	f00d ffa2 	bl	12124 <sscanf>
    41e0:	4b2b      	ldr	r3, [pc, #172]	; (4290 <menu3()+0x240>)
    41e2:	9a07      	ldr	r2, [sp, #28]
    41e4:	801a      	strh	r2, [r3, #0]
      setAGain(again);
    41e6:	8818      	ldrh	r0, [r3, #0]
    41e8:	b240      	sxtb	r0, r0
}
    41ea:	b009      	add	sp, #36	; 0x24
    41ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      setAGain(again);
    41f0:	f7fc befe 	b.w	ff0 <setAGain(signed char)>
{ char *buffer=menuGetLine();
    41f4:	f7ff ff08 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    41f8:	aa07      	add	r2, sp, #28
    41fa:	491c      	ldr	r1, [pc, #112]	; (426c <menu3()+0x21c>)
    41fc:	f00d ff92 	bl	12124 <sscanf>
    4200:	4b24      	ldr	r3, [pc, #144]	; (4294 <menu3()+0x244>)
    4202:	9a07      	ldr	r2, [sp, #28]
    4204:	601a      	str	r2, [r3, #0]
  return 1;
    4206:	e78e      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    4208:	f7ff fefe 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    420c:	aa07      	add	r2, sp, #28
    420e:	4917      	ldr	r1, [pc, #92]	; (426c <menu3()+0x21c>)
    4210:	f00d ff88 	bl	12124 <sscanf>
    4214:	4b20      	ldr	r3, [pc, #128]	; (4298 <menu3()+0x248>)
    4216:	9a07      	ldr	r2, [sp, #28]
    4218:	601a      	str	r2, [r3, #0]
  return 1;
    421a:	e784      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    421c:	f7ff fef4 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4220:	aa07      	add	r2, sp, #28
    4222:	4912      	ldr	r1, [pc, #72]	; (426c <menu3()+0x21c>)
    4224:	f00d ff7e 	bl	12124 <sscanf>
    4228:	4b1c      	ldr	r3, [pc, #112]	; (429c <menu3()+0x24c>)
    422a:	9a07      	ldr	r2, [sp, #28]
    422c:	801a      	strh	r2, [r3, #0]
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    422e:	881a      	ldrh	r2, [r3, #0]
    4230:	0412      	lsls	r2, r2, #16
    4232:	f57f af78 	bpl.w	4126 <menu3()+0xd6>
    4236:	2200      	movs	r2, #0
    4238:	801a      	strh	r2, [r3, #0]
    423a:	e774      	b.n	4126 <menu3()+0xd6>
{ char *buffer=menuGetLine();
    423c:	f7ff fee4 	bl	4008 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    4240:	ad07      	add	r5, sp, #28
    4242:	f10d 0113 	add.w	r1, sp, #19
    4246:	ac06      	add	r4, sp, #24
    4248:	aa05      	add	r2, sp, #20
    424a:	f10d 0312 	add.w	r3, sp, #18
    424e:	9400      	str	r4, [sp, #0]
    4250:	e9cd 1501 	strd	r1, r5, [sp, #4]
    4254:	4904      	ldr	r1, [pc, #16]	; (4268 <menu3()+0x218>)
    4256:	f00d ff65 	bl	12124 <sscanf>
      rtcSetTime(hour,minutes,seconds);
    425a:	9805      	ldr	r0, [sp, #20]
    425c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    4260:	f000 fda2 	bl	4da8 <rtcSetTime(int, int, int)>
    4264:	e75f      	b.n	4126 <menu3()+0xd6>
    4266:	bf00      	nop
    4268:	200007bc 	.word	0x200007bc
    426c:	200007c4 	.word	0x200007c4
    4270:	20018614 	.word	0x20018614
    4274:	20019b90 	.word	0x20019b90
    4278:	20009524 	.word	0x20009524
    427c:	20009528 	.word	0x20009528
    4280:	2000952c 	.word	0x2000952c
    4284:	20009530 	.word	0x20009530
    4288:	20009554 	.word	0x20009554
    428c:	20009514 	.word	0x20009514
    4290:	20009552 	.word	0x20009552
    4294:	20009534 	.word	0x20009534
    4298:	20019b98 	.word	0x20019b98
    429c:	20009556 	.word	0x20009556

000042a0 <saveParameters()>:
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
  #endif
}

void saveParameters(void)
{
    42a0:	b430      	push	{r4, r5}
  store[1]  = t_acq;
  store[2]  = t_on;
  store[3]  = t_off;
  store[4]  = t_rep;
    42a2:	481a      	ldr	r0, [pc, #104]	; (430c <saveParameters()+0x6c>)
  store[1]  = t_acq;
    42a4:	4c1a      	ldr	r4, [pc, #104]	; (4310 <saveParameters()+0x70>)
  store[2]  = t_on;
    42a6:	4a1b      	ldr	r2, [pc, #108]	; (4314 <saveParameters()+0x74>)
  store[3]  = t_off;
    42a8:	4b1b      	ldr	r3, [pc, #108]	; (4318 <saveParameters()+0x78>)
  store[1]  = t_acq;
    42aa:	6825      	ldr	r5, [r4, #0]
  store[2]  = t_on;
    42ac:	6812      	ldr	r2, [r2, #0]
  store[3]  = t_off;
    42ae:	681b      	ldr	r3, [r3, #0]
  store[4]  = t_rep;
    42b0:	6804      	ldr	r4, [r0, #0]
  store[1]  = t_acq;
    42b2:	481a      	ldr	r0, [pc, #104]	; (431c <saveParameters()+0x7c>)
  store[5]  = proc;
    42b4:	491a      	ldr	r1, [pc, #104]	; (4320 <saveParameters()+0x80>)
  store[3]  = t_off;
    42b6:	80c3      	strh	r3, [r0, #6]
  store[6]  = shift;
    42b8:	4b1a      	ldr	r3, [pc, #104]	; (4324 <saveParameters()+0x84>)
  store[5]  = proc;
    42ba:	8809      	ldrh	r1, [r1, #0]
  store[6]  = shift;
    42bc:	881b      	ldrh	r3, [r3, #0]
  store[2]  = t_on;
    42be:	8082      	strh	r2, [r0, #4]
  store[6]  = shift;
    42c0:	8183      	strh	r3, [r0, #12]
  store[7]  = t_1;
    42c2:	4a19      	ldr	r2, [pc, #100]	; (4328 <saveParameters()+0x88>)
  store[8]  = t_2;
    42c4:	4b19      	ldr	r3, [pc, #100]	; (432c <saveParameters()+0x8c>)
  store[4]  = t_rep;
    42c6:	8104      	strh	r4, [r0, #8]
  store[7]  = t_1;
    42c8:	6814      	ldr	r4, [r2, #0]
  store[8]  = t_2;
    42ca:	681b      	ldr	r3, [r3, #0]
  store[9]  = t_3;
  store[10] = t_4;
    42cc:	4a18      	ldr	r2, [pc, #96]	; (4330 <saveParameters()+0x90>)
  store[5]  = proc;
    42ce:	8141      	strh	r1, [r0, #10]
  store[8]  = t_2;
    42d0:	8203      	strh	r3, [r0, #16]
  store[9]  = t_3;
    42d2:	4918      	ldr	r1, [pc, #96]	; (4334 <saveParameters()+0x94>)
  store[11] = fsamp/1000;
    42d4:	4b18      	ldr	r3, [pc, #96]	; (4338 <saveParameters()+0x98>)
  store[7]  = t_1;
    42d6:	81c4      	strh	r4, [r0, #14]
  store[9]  = t_3;
    42d8:	680c      	ldr	r4, [r1, #0]
  store[10] = t_4;
    42da:	6811      	ldr	r1, [r2, #0]
  store[11] = fsamp/1000;
    42dc:	681b      	ldr	r3, [r3, #0]
    42de:	4a17      	ldr	r2, [pc, #92]	; (433c <saveParameters()+0x9c>)
  store[10] = t_4;
    42e0:	8281      	strh	r1, [r0, #20]
  store[11] = fsamp/1000;
    42e2:	fb82 1203 	smull	r1, r2, r2, r3
    42e6:	17db      	asrs	r3, r3, #31
  store[9]  = t_3;
    42e8:	8244      	strh	r4, [r0, #18]
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
    42ea:	2100      	movs	r1, #0
  store[11] = fsamp/1000;
    42ec:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  store[13] = dgain;
    42f0:	4c13      	ldr	r4, [pc, #76]	; (4340 <saveParameters()+0xa0>)
  store[12] = again;
    42f2:	4a14      	ldr	r2, [pc, #80]	; (4344 <saveParameters()+0xa4>)
  store[11] = fsamp/1000;
    42f4:	82c3      	strh	r3, [r0, #22]
  store[12] = again;
    42f6:	8812      	ldrh	r2, [r2, #0]
  store[13] = dgain;
    42f8:	8823      	ldrh	r3, [r4, #0]
  store[1]  = t_acq;
    42fa:	8045      	strh	r5, [r0, #2]
  store[12] = again;
    42fc:	8302      	strh	r2, [r0, #24]
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    42fe:	2220      	movs	r2, #32
  store[14] = 0;
    4300:	61c1      	str	r1, [r0, #28]
  store[13] = dgain;
    4302:	8343      	strh	r3, [r0, #26]
  store[15] = 0;

  storeConfig(store, 16);
}
    4304:	bc30      	pop	{r4, r5}
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    4306:	f009 bfed 	b.w	e2e4 <eeprom_write_block>
    430a:	bf00      	nop
    430c:	20019b98 	.word	0x20019b98
    4310:	20009530 	.word	0x20009530
    4314:	20009534 	.word	0x20009534
    4318:	20019b94 	.word	0x20019b94
    431c:	20018614 	.word	0x20018614
    4320:	20009554 	.word	0x20009554
    4324:	20009556 	.word	0x20009556
    4328:	20019b90 	.word	0x20019b90
    432c:	20009524 	.word	0x20009524
    4330:	2000952c 	.word	0x2000952c
    4334:	20009528 	.word	0x20009528
    4338:	20009514 	.word	0x20009514
    433c:	10624dd3 	.word	0x10624dd3
    4340:	20019bb8 	.word	0x20019bb8
    4344:	20009552 	.word	0x20009552

00004348 <menu1(short)>:
{   // have ':'
    4348:	b510      	push	{r4, lr}
    434a:	4604      	mov	r4, r0
    434c:	b082      	sub	sp, #8
        virtual int available() { return usb_serial_available(); }
    434e:	f00b fcf7 	bl	fd40 <usb_serial_available>
    while(!Serial.available()) ;
    4352:	2800      	cmp	r0, #0
    4354:	d0fb      	beq.n	434e <menu1(short)+0x6>
        virtual int read() { return usb_serial_getchar(); }
    4356:	f00b fd37 	bl	fdc8 <usb_serial_getchar>
    ch=Serial.read();
    435a:	b2c3      	uxtb	r3, r0
    if(ch=='w') 
    435c:	2b77      	cmp	r3, #119	; 0x77
    435e:	d006      	beq.n	436e <menu1(short)+0x26>
    else if(ch=='m') // control monitor (needed for gui)
    4360:	2b6d      	cmp	r3, #109	; 0x6d
    4362:	d010      	beq.n	4386 <menu1(short)+0x3e>
    else if(ch=='c') // transfer internal rtc to external rtc
    4364:	2b63      	cmp	r3, #99	; 0x63
    4366:	d01a      	beq.n	439e <menu1(short)+0x56>
}
    4368:	4620      	mov	r0, r4
    436a:	b002      	add	sp, #8
    436c:	bd10      	pop	{r4, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    436e:	210f      	movs	r1, #15
    4370:	480d      	ldr	r0, [pc, #52]	; (43a8 <menu1(short)+0x60>)
    4372:	f00b fd4f 	bl	fe14 <usb_serial_write>
    4376:	480d      	ldr	r0, [pc, #52]	; (43ac <menu1(short)+0x64>)
    4378:	f009 f9c4 	bl	d704 <Print::println()>
      saveParameters();
    437c:	f7ff ff90 	bl	42a0 <saveParameters()>
}
    4380:	4620      	mov	r0, r4
    4382:	b002      	add	sp, #8
    4384:	bd10      	pop	{r4, pc}
{ char *buffer=menuGetLine();
    4386:	f7ff fe3f 	bl	4008 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    438a:	aa01      	add	r2, sp, #4
    438c:	4908      	ldr	r1, [pc, #32]	; (43b0 <menu1(short)+0x68>)
    438e:	f00d fec9 	bl	12124 <sscanf>
    4392:	4b08      	ldr	r3, [pc, #32]	; (43b4 <menu1(short)+0x6c>)
    4394:	9a01      	ldr	r2, [sp, #4]
}
    4396:	4620      	mov	r0, r4
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    4398:	801a      	strh	r2, [r3, #0]
}
    439a:	b002      	add	sp, #8
    439c:	bd10      	pop	{r4, pc}
    { rtcXferTime();
    439e:	f000 fd1b 	bl	4dd8 <rtcXferTime()>
}
    43a2:	4620      	mov	r0, r4
    43a4:	b002      	add	sp, #8
    43a6:	bd10      	pop	{r4, pc}
    43a8:	2000064c 	.word	0x2000064c
    43ac:	20008b94 	.word	0x20008b94
    43b0:	200007c4 	.word	0x200007c4
    43b4:	20019bbc 	.word	0x20019bbc

000043b8 <loadParameters()>:

uint16_t *loadParameters(void)
{
    43b8:	b510      	push	{r4, lr}
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    43ba:	4c37      	ldr	r4, [pc, #220]	; (4498 <loadParameters()+0xe0>)
    43bc:	2220      	movs	r2, #32
    43be:	2100      	movs	r1, #0
    43c0:	4620      	mov	r0, r4
    43c2:	f009 fe13 	bl	dfec <eeprom_read_block>
  loadConfig(store,16);
  if(store[0]==1)
    43c6:	8823      	ldrh	r3, [r4, #0]
    43c8:	2b01      	cmp	r3, #1
    43ca:	d034      	beq.n	4436 <loadParameters()+0x7e>
    dgain   = store[13];
  }
  else
  {
    store[0]  = 0;
    store[1]  = t_acq    = T_ACQ;
    43cc:	2114      	movs	r1, #20
    43ce:	4833      	ldr	r0, [pc, #204]	; (449c <loadParameters()+0xe4>)
    store[2]  = t_on     = T_ON;
    43d0:	223c      	movs	r2, #60	; 0x3c
    store[0]  = 0;
    43d2:	2300      	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    43d4:	6001      	str	r1, [r0, #0]
    store[2]  = t_on     = T_ON;
    43d6:	4832      	ldr	r0, [pc, #200]	; (44a0 <loadParameters()+0xe8>)
    store[1]  = t_acq    = T_ACQ;
    43d8:	8061      	strh	r1, [r4, #2]
    store[3]  = t_off    = T_OFF;
    store[4]  = t_rep    = T_REP;
    store[5]  = proc     = PROC_MODE;
    43da:	2101      	movs	r1, #1
    store[2]  = t_on     = T_ON;
    43dc:	6002      	str	r2, [r0, #0]
    store[3]  = t_off    = T_OFF;
    43de:	4831      	ldr	r0, [pc, #196]	; (44a4 <loadParameters()+0xec>)
    store[2]  = t_on     = T_ON;
    43e0:	80a2      	strh	r2, [r4, #4]
    store[6]  = shift    = SHIFT;
    43e2:	220c      	movs	r2, #12
    store[3]  = t_off    = T_OFF;
    43e4:	6003      	str	r3, [r0, #0]
    store[4]  = t_rep    = T_REP;
    43e6:	4830      	ldr	r0, [pc, #192]	; (44a8 <loadParameters()+0xf0>)
    store[5]  = proc     = PROC_MODE;
    43e8:	8161      	strh	r1, [r4, #10]
    store[4]  = t_rep    = T_REP;
    43ea:	6003      	str	r3, [r0, #0]
    store[5]  = proc     = PROC_MODE;
    43ec:	482f      	ldr	r0, [pc, #188]	; (44ac <loadParameters()+0xf4>)
    store[6]  = shift    = SHIFT;
    43ee:	81a2      	strh	r2, [r4, #12]
    store[5]  = proc     = PROC_MODE;
    43f0:	8001      	strh	r1, [r0, #0]
    store[7]  = t_1      = T_1;
    store[8]  = t_2      = T_2;
    store[9]  = t_3      = T_3;
    store[10] = t_4      = T_4;
    43f2:	2118      	movs	r1, #24
    store[6]  = shift    = SHIFT;
    43f4:	482e      	ldr	r0, [pc, #184]	; (44b0 <loadParameters()+0xf8>)
    store[10] = t_4      = T_4;
    43f6:	82a1      	strh	r1, [r4, #20]
    store[6]  = shift    = SHIFT;
    43f8:	8002      	strh	r2, [r0, #0]
    store[7]  = t_1      = T_1;
    43fa:	482e      	ldr	r0, [pc, #184]	; (44b4 <loadParameters()+0xfc>)
    store[8]  = t_2      = T_2;
    43fc:	8222      	strh	r2, [r4, #16]
    store[7]  = t_1      = T_1;
    43fe:	6003      	str	r3, [r0, #0]
    store[8]  = t_2      = T_2;
    4400:	482d      	ldr	r0, [pc, #180]	; (44b8 <loadParameters()+0x100>)
    store[9]  = t_3      = T_3;
    4402:	8262      	strh	r2, [r4, #18]
    store[8]  = t_2      = T_2;
    4404:	6002      	str	r2, [r0, #0]
    store[9]  = t_3      = T_3;
    4406:	482d      	ldr	r0, [pc, #180]	; (44bc <loadParameters()+0x104>)
    store[0]  = 0;
    4408:	8023      	strh	r3, [r4, #0]
    store[9]  = t_3      = T_3;
    440a:	6002      	str	r2, [r0, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    store[12] = again    = AGAIN;
    440c:	220a      	movs	r2, #10
    store[10] = t_4      = T_4;
    440e:	482c      	ldr	r0, [pc, #176]	; (44c0 <loadParameters()+0x108>)
    store[3]  = t_off    = T_OFF;
    4410:	80e3      	strh	r3, [r4, #6]
    store[10] = t_4      = T_4;
    4412:	6001      	str	r1, [r0, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    4414:	f64b 3080 	movw	r0, #48000	; 0xbb80
    4418:	492a      	ldr	r1, [pc, #168]	; (44c4 <loadParameters()+0x10c>)
    store[4]  = t_rep    = T_REP;
    441a:	8123      	strh	r3, [r4, #8]
    store[11] = (fsamp   = FSAMP)/1000; 
    441c:	6008      	str	r0, [r1, #0]
    441e:	2130      	movs	r1, #48	; 0x30
    store[12] = again    = AGAIN;
    4420:	4829      	ldr	r0, [pc, #164]	; (44c8 <loadParameters()+0x110>)
    store[11] = (fsamp   = FSAMP)/1000; 
    4422:	82e1      	strh	r1, [r4, #22]
    store[13] = dgain    = DGAIN;
    4424:	4929      	ldr	r1, [pc, #164]	; (44cc <loadParameters()+0x114>)
    store[12] = again    = AGAIN;
    4426:	8002      	strh	r2, [r0, #0]
    store[7]  = t_1      = T_1;
    4428:	81e3      	strh	r3, [r4, #14]
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    442a:	481b      	ldr	r0, [pc, #108]	; (4498 <loadParameters()+0xe0>)
    store[13] = dgain    = DGAIN;
    442c:	8363      	strh	r3, [r4, #26]
    store[14] = 0;
    442e:	61e3      	str	r3, [r4, #28]
    store[12] = again    = AGAIN;
    4430:	8322      	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    4432:	800b      	strh	r3, [r1, #0]
}
    4434:	bd10      	pop	{r4, pc}
    t_acq   = store[1];
    4436:	8860      	ldrh	r0, [r4, #2]
    fsamp   = store[11]*1000;
    4438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    t_acq   = store[1];
    443c:	4917      	ldr	r1, [pc, #92]	; (449c <loadParameters()+0xe4>)
    fsamp   = store[11]*1000;
    443e:	8ae3      	ldrh	r3, [r4, #22]
    t_acq   = store[1];
    4440:	6008      	str	r0, [r1, #0]
    t_on    = store[2];
    4442:	88a0      	ldrh	r0, [r4, #4]
    fsamp   = store[11]*1000;
    4444:	fb02 f303 	mul.w	r3, r2, r3
    t_on    = store[2];
    4448:	4915      	ldr	r1, [pc, #84]	; (44a0 <loadParameters()+0xe8>)
    fsamp   = store[11]*1000;
    444a:	4a1e      	ldr	r2, [pc, #120]	; (44c4 <loadParameters()+0x10c>)
    t_on    = store[2];
    444c:	6008      	str	r0, [r1, #0]
    t_off   = store[3];
    444e:	88e0      	ldrh	r0, [r4, #6]
    4450:	4914      	ldr	r1, [pc, #80]	; (44a4 <loadParameters()+0xec>)
    4452:	6008      	str	r0, [r1, #0]
    t_rep   = store[4];
    4454:	8920      	ldrh	r0, [r4, #8]
    4456:	4914      	ldr	r1, [pc, #80]	; (44a8 <loadParameters()+0xf0>)
    4458:	6008      	str	r0, [r1, #0]
    proc    = store[5];
    445a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
    445e:	4913      	ldr	r1, [pc, #76]	; (44ac <loadParameters()+0xf4>)
    4460:	8008      	strh	r0, [r1, #0]
    shift   = store[6];
    4462:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    4466:	4912      	ldr	r1, [pc, #72]	; (44b0 <loadParameters()+0xf8>)
    4468:	8008      	strh	r0, [r1, #0]
    t_1     = store[7];
    446a:	89e0      	ldrh	r0, [r4, #14]
    446c:	4911      	ldr	r1, [pc, #68]	; (44b4 <loadParameters()+0xfc>)
    446e:	6008      	str	r0, [r1, #0]
    t_2     = store[8];
    4470:	8a20      	ldrh	r0, [r4, #16]
    4472:	4911      	ldr	r1, [pc, #68]	; (44b8 <loadParameters()+0x100>)
    4474:	6008      	str	r0, [r1, #0]
    t_3     = store[9];
    4476:	8a60      	ldrh	r0, [r4, #18]
    4478:	4910      	ldr	r1, [pc, #64]	; (44bc <loadParameters()+0x104>)
    447a:	6008      	str	r0, [r1, #0]
    t_4     = store[10];
    447c:	8aa0      	ldrh	r0, [r4, #20]
    447e:	4910      	ldr	r1, [pc, #64]	; (44c0 <loadParameters()+0x108>)
    4480:	6008      	str	r0, [r1, #0]
    fsamp   = store[11]*1000;
    4482:	6013      	str	r3, [r2, #0]
    again   = store[12];
    4484:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
    4488:	490f      	ldr	r1, [pc, #60]	; (44c8 <loadParameters()+0x110>)
    dgain   = store[13];
    448a:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    448e:	4b0f      	ldr	r3, [pc, #60]	; (44cc <loadParameters()+0x114>)
    again   = store[12];
    4490:	8008      	strh	r0, [r1, #0]
}
    4492:	4801      	ldr	r0, [pc, #4]	; (4498 <loadParameters()+0xe0>)
    dgain   = store[13];
    4494:	801a      	strh	r2, [r3, #0]
}
    4496:	bd10      	pop	{r4, pc}
    4498:	20018614 	.word	0x20018614
    449c:	20009530 	.word	0x20009530
    44a0:	20009534 	.word	0x20009534
    44a4:	20019b94 	.word	0x20019b94
    44a8:	20019b98 	.word	0x20019b98
    44ac:	20009554 	.word	0x20009554
    44b0:	20009556 	.word	0x20009556
    44b4:	20019b90 	.word	0x20019b90
    44b8:	20009524 	.word	0x20009524
    44bc:	20009528 	.word	0x20009528
    44c0:	2000952c 	.word	0x2000952c
    44c4:	20009514 	.word	0x20009514
    44c8:	20009552 	.word	0x20009552
    44cc:	20019bb8 	.word	0x20019bb8

000044d0 <menu2()>:
{   // have '?'
    44d0:	b510      	push	{r4, lr}
    44d2:	b088      	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    44d4:	f00b fc34 	bl	fd40 <usb_serial_available>
    while(!Serial.available()) ;
    44d8:	2800      	cmp	r0, #0
    44da:	d0fb      	beq.n	44d4 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    44dc:	f00b fc74 	bl	fdc8 <usb_serial_getchar>
    ch=Serial.read();
    44e0:	b2c0      	uxtb	r0, r0
    if(ch=='p') // get parameters
    44e2:	2870      	cmp	r0, #112	; 0x70
    44e4:	d053      	beq.n	458e <menu2()+0xbe>
    else if(ch=='d') // get date
    44e6:	3831      	subs	r0, #49	; 0x31
    44e8:	2846      	cmp	r0, #70	; 0x46
    44ea:	d84a      	bhi.n	4582 <menu2()+0xb2>
    44ec:	e8df f010 	tbh	[pc, r0, lsl #1]
    44f0:	011c0116 	.word	0x011c0116
    44f4:	01280122 	.word	0x01280122
    44f8:	00490049 	.word	0x00490049
    44fc:	00490049 	.word	0x00490049
    4500:	00490049 	.word	0x00490049
    4504:	00490049 	.word	0x00490049
    4508:	00490049 	.word	0x00490049
    450c:	00490049 	.word	0x00490049
    4510:	00490049 	.word	0x00490049
    4514:	00490049 	.word	0x00490049
    4518:	00490049 	.word	0x00490049
    451c:	00490049 	.word	0x00490049
    4520:	00490049 	.word	0x00490049
    4524:	00490049 	.word	0x00490049
    4528:	00490049 	.word	0x00490049
    452c:	00490049 	.word	0x00490049
    4530:	00490049 	.word	0x00490049
    4534:	00490049 	.word	0x00490049
    4538:	00490049 	.word	0x00490049
    453c:	00490049 	.word	0x00490049
    4540:	00490049 	.word	0x00490049
    4544:	00490049 	.word	0x00490049
    4548:	00490049 	.word	0x00490049
    454c:	00490049 	.word	0x00490049
    4550:	0049012b 	.word	0x0049012b
    4554:	013f0131 	.word	0x013f0131
    4558:	014e0049 	.word	0x014e0049
    455c:	0049015b 	.word	0x0049015b
    4560:	00490049 	.word	0x00490049
    4564:	00490049 	.word	0x00490049
    4568:	00490049 	.word	0x00490049
    456c:	00490161 	.word	0x00490161
    4570:	01670049 	.word	0x01670049
    4574:	0173016d 	.word	0x0173016d
    4578:	00490049 	.word	0x00490049
    457c:	0182      	.short	0x0182
    457e:	f00b fc23 	bl	fdc8 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4582:	f00b fbdd 	bl	fd40 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    4586:	2800      	cmp	r0, #0
    4588:	d1f9      	bne.n	457e <menu2()+0xae>
}
    458a:	b008      	add	sp, #32
    458c:	bd10      	pop	{r4, pc}
      Serial.println();
    458e:	48a1      	ldr	r0, [pc, #644]	; (4814 <menu2()+0x344>)
    4590:	f009 f8b8 	bl	d704 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4594:	2127      	movs	r1, #39	; 0x27
    4596:	48a0      	ldr	r0, [pc, #640]	; (4818 <menu2()+0x348>)
    4598:	f00b fc3c 	bl	fe14 <usb_serial_write>
    459c:	489d      	ldr	r0, [pc, #628]	; (4814 <menu2()+0x344>)
    459e:	f009 f8b1 	bl	d704 <Print::println()>
      rtc_get_datetime(&t);
    45a2:	a806      	add	r0, sp, #24
    45a4:	f000 fbdc 	bl	4d60 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    45a8:	f99d 201c 	ldrsb.w	r2, [sp, #28]
    45ac:	f99d 301f 	ldrsb.w	r3, [sp, #31]
    45b0:	f99d 001e 	ldrsb.w	r0, [sp, #30]
    45b4:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    45b8:	f99d 401b 	ldrsb.w	r4, [sp, #27]
    45bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
    45c0:	e9cd 1001 	strd	r1, r0, [sp, #4]
    45c4:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    45c8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    45cc:	4993      	ldr	r1, [pc, #588]	; (481c <menu2()+0x34c>)
    45ce:	9400      	str	r4, [sp, #0]
    45d0:	4890      	ldr	r0, [pc, #576]	; (4814 <menu2()+0x344>)
    45d2:	f009 f8b3 	bl	d73c <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    45d6:	f000 fc47 	bl	4e68 <rtcGetTimestamp()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    45da:	4604      	mov	r4, r0
    45dc:	b128      	cbz	r0, 45ea <menu2()+0x11a>
							  return write((const uint8_t *)str, strlen(str)); }
    45de:	f00e fb0f 	bl	12c00 <strlen>
    45e2:	4601      	mov	r1, r0
    45e4:	4620      	mov	r0, r4
    45e6:	f00b fc15 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45ea:	488a      	ldr	r0, [pc, #552]	; (4814 <menu2()+0x344>)
    45ec:	f009 f88a 	bl	d704 <Print::println()>
    45f0:	210c      	movs	r1, #12
    45f2:	488b      	ldr	r0, [pc, #556]	; (4820 <menu2()+0x350>)
    45f4:	f00b fc0e 	bl	fe14 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    45f8:	498a      	ldr	r1, [pc, #552]	; (4824 <menu2()+0x354>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    45fa:	2300      	movs	r3, #0
    45fc:	220a      	movs	r2, #10
    45fe:	6809      	ldr	r1, [r1, #0]
    4600:	4884      	ldr	r0, [pc, #528]	; (4814 <menu2()+0x344>)
    4602:	f009 f8a9 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4606:	4883      	ldr	r0, [pc, #524]	; (4814 <menu2()+0x344>)
    4608:	f009 f87c 	bl	d704 <Print::println()>
    460c:	210c      	movs	r1, #12
    460e:	4886      	ldr	r0, [pc, #536]	; (4828 <menu2()+0x358>)
    4610:	f00b fc00 	bl	fe14 <usb_serial_write>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    4614:	4985      	ldr	r1, [pc, #532]	; (482c <menu2()+0x35c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4616:	2300      	movs	r3, #0
    4618:	220a      	movs	r2, #10
    461a:	6809      	ldr	r1, [r1, #0]
    461c:	487d      	ldr	r0, [pc, #500]	; (4814 <menu2()+0x344>)
    461e:	f009 f89b 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4622:	487c      	ldr	r0, [pc, #496]	; (4814 <menu2()+0x344>)
    4624:	f009 f86e 	bl	d704 <Print::println()>
    4628:	210c      	movs	r1, #12
    462a:	4881      	ldr	r0, [pc, #516]	; (4830 <menu2()+0x360>)
    462c:	f00b fbf2 	bl	fe14 <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    4630:	4980      	ldr	r1, [pc, #512]	; (4834 <menu2()+0x364>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4632:	220a      	movs	r2, #10
    4634:	2300      	movs	r3, #0
    4636:	6809      	ldr	r1, [r1, #0]
    4638:	4876      	ldr	r0, [pc, #472]	; (4814 <menu2()+0x344>)
    463a:	f009 f88d 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    463e:	4875      	ldr	r0, [pc, #468]	; (4814 <menu2()+0x344>)
    4640:	f009 f860 	bl	d704 <Print::println()>
    4644:	210c      	movs	r1, #12
    4646:	487c      	ldr	r0, [pc, #496]	; (4838 <menu2()+0x368>)
    4648:	f00b fbe4 	bl	fe14 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    464c:	4b7b      	ldr	r3, [pc, #492]	; (483c <menu2()+0x36c>)
	size_t println(long n)				{ return print(n) + println(); }
    464e:	4871      	ldr	r0, [pc, #452]	; (4814 <menu2()+0x344>)
    4650:	6819      	ldr	r1, [r3, #0]
    4652:	f009 f84b 	bl	d6ec <Print::print(long)>
    4656:	486f      	ldr	r0, [pc, #444]	; (4814 <menu2()+0x344>)
    4658:	f009 f854 	bl	d704 <Print::println()>
    465c:	210c      	movs	r1, #12
    465e:	4878      	ldr	r0, [pc, #480]	; (4840 <menu2()+0x370>)
    4660:	f00b fbd8 	bl	fe14 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    4664:	4b77      	ldr	r3, [pc, #476]	; (4844 <menu2()+0x374>)
	size_t print(int n)				{ return print((long)n); }
    4666:	486b      	ldr	r0, [pc, #428]	; (4814 <menu2()+0x344>)
    4668:	8819      	ldrh	r1, [r3, #0]
    466a:	b209      	sxth	r1, r1
    466c:	f009 f83e 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4670:	4868      	ldr	r0, [pc, #416]	; (4814 <menu2()+0x344>)
    4672:	f009 f847 	bl	d704 <Print::println()>
    4676:	210c      	movs	r1, #12
    4678:	4873      	ldr	r0, [pc, #460]	; (4848 <menu2()+0x378>)
    467a:	f00b fbcb 	bl	fe14 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    467e:	4b73      	ldr	r3, [pc, #460]	; (484c <menu2()+0x37c>)
	size_t print(int n)				{ return print((long)n); }
    4680:	4864      	ldr	r0, [pc, #400]	; (4814 <menu2()+0x344>)
    4682:	8819      	ldrh	r1, [r3, #0]
    4684:	b209      	sxth	r1, r1
    4686:	f009 f831 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    468a:	4862      	ldr	r0, [pc, #392]	; (4814 <menu2()+0x344>)
    468c:	f009 f83a 	bl	d704 <Print::println()>
    4690:	210c      	movs	r1, #12
    4692:	486f      	ldr	r0, [pc, #444]	; (4850 <menu2()+0x380>)
    4694:	f00b fbbe 	bl	fe14 <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    4698:	4b6e      	ldr	r3, [pc, #440]	; (4854 <menu2()+0x384>)
	size_t print(int n)				{ return print((long)n); }
    469a:	485e      	ldr	r0, [pc, #376]	; (4814 <menu2()+0x344>)
    469c:	8819      	ldrh	r1, [r3, #0]
    469e:	b209      	sxth	r1, r1
    46a0:	f009 f824 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46a4:	485b      	ldr	r0, [pc, #364]	; (4814 <menu2()+0x344>)
    46a6:	f009 f82d 	bl	d704 <Print::println()>
    46aa:	210c      	movs	r1, #12
    46ac:	486a      	ldr	r0, [pc, #424]	; (4858 <menu2()+0x388>)
    46ae:	f00b fbb1 	bl	fe14 <usb_serial_write>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    46b2:	496a      	ldr	r1, [pc, #424]	; (485c <menu2()+0x38c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    46b4:	2300      	movs	r3, #0
    46b6:	220a      	movs	r2, #10
    46b8:	6809      	ldr	r1, [r1, #0]
    46ba:	4856      	ldr	r0, [pc, #344]	; (4814 <menu2()+0x344>)
    46bc:	f009 f84c 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    46c0:	4854      	ldr	r0, [pc, #336]	; (4814 <menu2()+0x344>)
    46c2:	f009 f81f 	bl	d704 <Print::println()>
    46c6:	210c      	movs	r1, #12
    46c8:	4865      	ldr	r0, [pc, #404]	; (4860 <menu2()+0x390>)
    46ca:	f00b fba3 	bl	fe14 <usb_serial_write>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    46ce:	4965      	ldr	r1, [pc, #404]	; (4864 <menu2()+0x394>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    46d0:	2300      	movs	r3, #0
    46d2:	220a      	movs	r2, #10
    46d4:	6809      	ldr	r1, [r1, #0]
    46d6:	484f      	ldr	r0, [pc, #316]	; (4814 <menu2()+0x344>)
    46d8:	f009 f83e 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    46dc:	484d      	ldr	r0, [pc, #308]	; (4814 <menu2()+0x344>)
    46de:	f009 f811 	bl	d704 <Print::println()>
    46e2:	210c      	movs	r1, #12
    46e4:	4860      	ldr	r0, [pc, #384]	; (4868 <menu2()+0x398>)
    46e6:	f00b fb95 	bl	fe14 <usb_serial_write>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    46ea:	4960      	ldr	r1, [pc, #384]	; (486c <menu2()+0x39c>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    46ec:	2300      	movs	r3, #0
    46ee:	220a      	movs	r2, #10
    46f0:	6809      	ldr	r1, [r1, #0]
    46f2:	4848      	ldr	r0, [pc, #288]	; (4814 <menu2()+0x344>)
    46f4:	f009 f830 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    46f8:	4846      	ldr	r0, [pc, #280]	; (4814 <menu2()+0x344>)
    46fa:	f009 f803 	bl	d704 <Print::println()>
    46fe:	210c      	movs	r1, #12
    4700:	485b      	ldr	r0, [pc, #364]	; (4870 <menu2()+0x3a0>)
    4702:	f00b fb87 	bl	fe14 <usb_serial_write>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    4706:	495b      	ldr	r1, [pc, #364]	; (4874 <menu2()+0x3a4>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4708:	2300      	movs	r3, #0
    470a:	220a      	movs	r2, #10
    470c:	6809      	ldr	r1, [r1, #0]
    470e:	4841      	ldr	r0, [pc, #260]	; (4814 <menu2()+0x344>)
    4710:	f009 f822 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4714:	483f      	ldr	r0, [pc, #252]	; (4814 <menu2()+0x344>)
    4716:	f008 fff5 	bl	d704 <Print::println()>
    471a:	e732      	b.n	4582 <menu2()+0xb2>
    471c:	210b      	movs	r1, #11
    471e:	4856      	ldr	r0, [pc, #344]	; (4878 <menu2()+0x3a8>)
    4720:	f00b fb78 	bl	fe14 <usb_serial_write>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    4724:	494d      	ldr	r1, [pc, #308]	; (485c <menu2()+0x38c>)
    4726:	e7ef      	b.n	4708 <menu2()+0x238>
    4728:	210b      	movs	r1, #11
    472a:	4854      	ldr	r0, [pc, #336]	; (487c <menu2()+0x3ac>)
    472c:	f00b fb72 	bl	fe14 <usb_serial_write>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    4730:	494c      	ldr	r1, [pc, #304]	; (4864 <menu2()+0x394>)
    4732:	e7e9      	b.n	4708 <menu2()+0x238>
    4734:	210b      	movs	r1, #11
    4736:	4852      	ldr	r0, [pc, #328]	; (4880 <menu2()+0x3b0>)
    4738:	f00b fb6c 	bl	fe14 <usb_serial_write>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    473c:	494b      	ldr	r1, [pc, #300]	; (486c <menu2()+0x39c>)
    473e:	e7e3      	b.n	4708 <menu2()+0x238>
    4740:	210b      	movs	r1, #11
    4742:	4850      	ldr	r0, [pc, #320]	; (4884 <menu2()+0x3b4>)
    4744:	e7dd      	b.n	4702 <menu2()+0x232>
    4746:	210c      	movs	r1, #12
    4748:	4835      	ldr	r0, [pc, #212]	; (4820 <menu2()+0x350>)
    474a:	f00b fb63 	bl	fe14 <usb_serial_write>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    474e:	4935      	ldr	r1, [pc, #212]	; (4824 <menu2()+0x354>)
    4750:	e7da      	b.n	4708 <menu2()+0x238>
    4752:	210c      	movs	r1, #12
    4754:	483c      	ldr	r0, [pc, #240]	; (4848 <menu2()+0x378>)
    4756:	f00b fb5d 	bl	fe14 <usb_serial_write>
      Serial.print("proc  (c) = "); Serial.println(proc);
    475a:	4b3c      	ldr	r3, [pc, #240]	; (484c <menu2()+0x37c>)
      Serial.print("again (g) = "); Serial.println(again);
    475c:	8819      	ldrh	r1, [r3, #0]
	size_t print(int n)				{ return print((long)n); }
    475e:	482d      	ldr	r0, [pc, #180]	; (4814 <menu2()+0x344>)
    4760:	b209      	sxth	r1, r1
    4762:	f008 ffc3 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4766:	482b      	ldr	r0, [pc, #172]	; (4814 <menu2()+0x344>)
    4768:	f008 ffcc 	bl	d704 <Print::println()>
    476c:	e709      	b.n	4582 <menu2()+0xb2>
      rtc_get_datetime(&t);
    476e:	a806      	add	r0, sp, #24
    4770:	f000 faf6 	bl	4d60 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    4774:	f99d 001b 	ldrsb.w	r0, [sp, #27]
    4778:	f99d 301a 	ldrsb.w	r3, [sp, #26]
    477c:	9000      	str	r0, [sp, #0]
    477e:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    4782:	4941      	ldr	r1, [pc, #260]	; (4888 <menu2()+0x3b8>)
    4784:	4823      	ldr	r0, [pc, #140]	; (4814 <menu2()+0x344>)
    4786:	f008 ffd9 	bl	d73c <Print::printf(char const*, ...)>
    478a:	e6fa      	b.n	4582 <menu2()+0xb2>
    478c:	210c      	movs	r1, #12
    478e:	482a      	ldr	r0, [pc, #168]	; (4838 <menu2()+0x368>)
    4790:	f00b fb40 	bl	fe14 <usb_serial_write>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    4794:	4b29      	ldr	r3, [pc, #164]	; (483c <menu2()+0x36c>)
	size_t println(long n)				{ return print(n) + println(); }
    4796:	481f      	ldr	r0, [pc, #124]	; (4814 <menu2()+0x344>)
    4798:	6819      	ldr	r1, [r3, #0]
    479a:	f008 ffa7 	bl	d6ec <Print::print(long)>
    479e:	481d      	ldr	r0, [pc, #116]	; (4814 <menu2()+0x344>)
    47a0:	f008 ffb0 	bl	d704 <Print::println()>
    47a4:	e6ed      	b.n	4582 <menu2()+0xb2>
    47a6:	210c      	movs	r1, #12
    47a8:	4829      	ldr	r0, [pc, #164]	; (4850 <menu2()+0x380>)
    47aa:	f00b fb33 	bl	fe14 <usb_serial_write>
      Serial.print("again (g) = "); Serial.println(again);
    47ae:	4b29      	ldr	r3, [pc, #164]	; (4854 <menu2()+0x384>)
    47b0:	e7d4      	b.n	475c <menu2()+0x28c>
    47b2:	210c      	movs	r1, #12
    47b4:	4835      	ldr	r0, [pc, #212]	; (488c <menu2()+0x3bc>)
    47b6:	f00b fb2d 	bl	fe14 <usb_serial_write>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    47ba:	491c      	ldr	r1, [pc, #112]	; (482c <menu2()+0x35c>)
    47bc:	e7a4      	b.n	4708 <menu2()+0x238>
    47be:	210c      	movs	r1, #12
    47c0:	481b      	ldr	r0, [pc, #108]	; (4830 <menu2()+0x360>)
    47c2:	f00b fb27 	bl	fe14 <usb_serial_write>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    47c6:	491b      	ldr	r1, [pc, #108]	; (4834 <menu2()+0x364>)
    47c8:	e79e      	b.n	4708 <menu2()+0x238>
    47ca:	210c      	movs	r1, #12
    47cc:	481c      	ldr	r0, [pc, #112]	; (4840 <menu2()+0x370>)
    47ce:	f00b fb21 	bl	fe14 <usb_serial_write>
      Serial.print("shift (s) = "); Serial.println(shift);
    47d2:	4b1c      	ldr	r3, [pc, #112]	; (4844 <menu2()+0x374>)
    47d4:	e7c2      	b.n	475c <menu2()+0x28c>
      rtc_get_datetime(&t);
    47d6:	a806      	add	r0, sp, #24
    47d8:	f000 fac2 	bl	4d60 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    47dc:	f99d 001f 	ldrsb.w	r0, [sp, #31]
    47e0:	f99d 301e 	ldrsb.w	r3, [sp, #30]
    47e4:	9000      	str	r0, [sp, #0]
    47e6:	f99d 201d 	ldrsb.w	r2, [sp, #29]
    47ea:	4929      	ldr	r1, [pc, #164]	; (4890 <menu2()+0x3c0>)
    47ec:	4809      	ldr	r0, [pc, #36]	; (4814 <menu2()+0x344>)
    47ee:	f008 ffa5 	bl	d73c <Print::printf(char const*, ...)>
    47f2:	e6c6      	b.n	4582 <menu2()+0xb2>
    { uint16_t *params=loadParameters();
    47f4:	f7ff fde0 	bl	43b8 <loadParameters()>
    47f8:	4604      	mov	r4, r0
    47fa:	210d      	movs	r1, #13
    47fc:	4825      	ldr	r0, [pc, #148]	; (4894 <menu2()+0x3c4>)
    47fe:	f00b fb09 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4802:	8821      	ldrh	r1, [r4, #0]
    4804:	4803      	ldr	r0, [pc, #12]	; (4814 <menu2()+0x344>)
    4806:	f008 ff71 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    480a:	4802      	ldr	r0, [pc, #8]	; (4814 <menu2()+0x344>)
    480c:	f008 ff7a 	bl	d704 <Print::println()>
    4810:	e6b7      	b.n	4582 <menu2()+0xb2>
    4812:	bf00      	nop
    4814:	20008b94 	.word	0x20008b94
    4818:	20000a28 	.word	0x20000a28
    481c:	2000065c 	.word	0x2000065c
    4820:	20000684 	.word	0x20000684
    4824:	20009530 	.word	0x20009530
    4828:	20000694 	.word	0x20000694
    482c:	20009534 	.word	0x20009534
    4830:	200006a4 	.word	0x200006a4
    4834:	20019b98 	.word	0x20019b98
    4838:	200006b4 	.word	0x200006b4
    483c:	20009514 	.word	0x20009514
    4840:	200006c4 	.word	0x200006c4
    4844:	20009556 	.word	0x20009556
    4848:	200006d4 	.word	0x200006d4
    484c:	20009554 	.word	0x20009554
    4850:	200006e4 	.word	0x200006e4
    4854:	20009552 	.word	0x20009552
    4858:	200006f4 	.word	0x200006f4
    485c:	20019b90 	.word	0x20019b90
    4860:	20000704 	.word	0x20000704
    4864:	20009524 	.word	0x20009524
    4868:	20000714 	.word	0x20000714
    486c:	20009528 	.word	0x20009528
    4870:	20000724 	.word	0x20000724
    4874:	2000952c 	.word	0x2000952c
    4878:	2000077c 	.word	0x2000077c
    487c:	20000788 	.word	0x20000788
    4880:	20000794 	.word	0x20000794
    4884:	200007a0 	.word	0x200007a0
    4888:	20000734 	.word	0x20000734
    488c:	2000076c 	.word	0x2000076c
    4890:	20000750 	.word	0x20000750
    4894:	200007ac 	.word	0x200007ac

00004898 <menu(short)>:
{
    4898:	b538      	push	{r3, r4, r5, lr}
    489a:	4604      	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    489c:	f00b fa50 	bl	fd40 <usb_serial_available>
  if(Serial.available())
    48a0:	b908      	cbnz	r0, 48a6 <menu(short)+0xe>
}
    48a2:	4620      	mov	r0, r4
    48a4:	bd38      	pop	{r3, r4, r5, pc}
        virtual int read() { return usb_serial_getchar(); }
    48a6:	f00b fa8f 	bl	fdc8 <usb_serial_getchar>
    char ch=Serial.read();
    48aa:	b2c0      	uxtb	r0, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    48ac:	2873      	cmp	r0, #115	; 0x73
    48ae:	d02c      	beq.n	490a <menu(short)+0x72>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    48b0:	2878      	cmp	r0, #120	; 0x78
    48b2:	d832      	bhi.n	491a <menu(short)+0x82>
    48b4:	2861      	cmp	r0, #97	; 0x61
    48b6:	d911      	bls.n	48dc <menu(short)+0x44>
    48b8:	f1a0 0362 	sub.w	r3, r0, #98	; 0x62
    48bc:	2b16      	cmp	r3, #22
    48be:	d82c      	bhi.n	491a <menu(short)+0x82>
    48c0:	e8df f003 	tbb	[pc, r3]
    48c4:	402b2b3d 	.word	0x402b2b3d
    48c8:	2b2b2b2b 	.word	0x2b2b2b2b
    48cc:	462b2b2b 	.word	0x462b2b2b
    48d0:	2b2b2b2b 	.word	0x2b2b2b2b
    48d4:	2b2b2b55 	.word	0x2b2b2b55
    48d8:	2b2b      	.short	0x2b2b
    48da:	3a          	.byte	0x3a
    48db:	00          	.byte	0x00
    48dc:	283a      	cmp	r0, #58	; 0x3a
    48de:	d026      	beq.n	492e <menu(short)+0x96>
    48e0:	283f      	cmp	r0, #63	; 0x3f
    48e2:	d10d      	bne.n	4900 <menu(short)+0x68>
    else if(ch=='?') menu2(); 
    48e4:	f7ff fdf4 	bl	44d0 <menu2()>
    48e8:	e004      	b.n	48f4 <menu(short)+0x5c>
    48ea:	f00b fa6d 	bl	fdc8 <usb_serial_getchar>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    48ee:	b2c0      	uxtb	r0, r0
    48f0:	f00b fa7a 	bl	fde8 <usb_serial_putchar>
        virtual int available() { return usb_serial_available(); }
    48f4:	f00b fa24 	bl	fd40 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    48f8:	2800      	cmp	r0, #0
    48fa:	d1f6      	bne.n	48ea <menu(short)+0x52>
}
    48fc:	4620      	mov	r0, r4
    48fe:	bd38      	pop	{r3, r4, r5, pc}
    4900:	2821      	cmp	r0, #33	; 0x21
    4902:	d10a      	bne.n	491a <menu(short)+0x82>
    else if(ch=='!') menu3(); 
    4904:	f7ff fba4 	bl	4050 <menu3()>
    4908:	e7f4      	b.n	48f4 <menu(short)+0x5c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    490a:	2107      	movs	r1, #7
    490c:	4819      	ldr	r0, [pc, #100]	; (4974 <menu(short)+0xdc>)
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    490e:	2400      	movs	r4, #0
    4910:	f00b fa80 	bl	fe14 <usb_serial_write>
    4914:	f7fc fb8c 	bl	1030 <adcStatus()>
    4918:	e7ec      	b.n	48f4 <menu(short)+0x5c>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    491a:	f00b fa65 	bl	fde8 <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    491e:	2140      	movs	r1, #64	; 0x40
    4920:	4815      	ldr	r0, [pc, #84]	; (4978 <menu(short)+0xe0>)
    4922:	f00b fa77 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4926:	4815      	ldr	r0, [pc, #84]	; (497c <menu(short)+0xe4>)
    4928:	f008 feec 	bl	d704 <Print::println()>
    492c:	e7e2      	b.n	48f4 <menu(short)+0x5c>
    else if(ch==':') status=menu1(status); 
    492e:	4620      	mov	r0, r4
    4930:	f7ff fd0a 	bl	4348 <menu1(short)>
    4934:	4604      	mov	r4, r0
    4936:	e7dd      	b.n	48f4 <menu(short)+0x5c>
    else if(ch=='x') {powerDown();}
    4938:	f7fc ffec 	bl	1914 <powerDown()>
    493c:	e7da      	b.n	48f4 <menu(short)+0x5c>
    else if(ch=='b') {reboot();}
    493e:	f7fb fc61 	bl	204 <reboot()>
    4942:	e7d7      	b.n	48f4 <menu(short)+0x5c>
    4944:	2106      	movs	r1, #6
    4946:	480e      	ldr	r0, [pc, #56]	; (4980 <menu(short)+0xe8>)
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    4948:	2405      	movs	r4, #5
    494a:	f00b fa63 	bl	fe14 <usb_serial_write>
    494e:	e7d1      	b.n	48f4 <menu(short)+0x5c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    4950:	4d0c      	ldr	r5, [pc, #48]	; (4984 <menu(short)+0xec>)
    4952:	210a      	movs	r1, #10
    4954:	480c      	ldr	r0, [pc, #48]	; (4988 <menu(short)+0xf0>)
    4956:	882b      	ldrh	r3, [r5, #0]
    4958:	f1c3 0301 	rsb	r3, r3, #1
    495c:	802b      	strh	r3, [r5, #0]
    495e:	f00b fa59 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4962:	f9b5 1000 	ldrsh.w	r1, [r5]
    4966:	4805      	ldr	r0, [pc, #20]	; (497c <menu(short)+0xe4>)
    4968:	f008 fec0 	bl	d6ec <Print::print(long)>
    496c:	e7c2      	b.n	48f4 <menu(short)+0x5c>
    else if(ch=='r') {resetUSB();}
    496e:	f7fb fc19 	bl	1a4 <resetUSB()>
    4972:	e7bf      	b.n	48f4 <menu(short)+0x5c>
    4974:	200005ec 	.word	0x200005ec
    4978:	20000608 	.word	0x20000608
    497c:	20008b94 	.word	0x20008b94
    4980:	200005f4 	.word	0x200005f4
    4984:	20019bbc 	.word	0x20019bbc
    4988:	200005fc 	.word	0x200005fc

0000498c <getStore()>:

uint16_t *getStore(void) {return store;}
    498c:	4800      	ldr	r0, [pc, #0]	; (4990 <getStore()+0x4>)
    498e:	4770      	bx	lr
    4990:	20018614 	.word	0x20018614

00004994 <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    4994:	4a04      	ldr	r2, [pc, #16]	; (49a8 <getDataCount()+0x14>)
    4996:	4b05      	ldr	r3, [pc, #20]	; (49ac <getDataCount()+0x18>)
    4998:	6810      	ldr	r0, [r2, #0]
    499a:	681b      	ldr	r3, [r3, #0]
    499c:	1ac0      	subs	r0, r0, r3
    499e:	bf48      	it	mi
    49a0:	f500 6010 	addmi.w	r0, r0, #2304	; 0x900
    49a4:	b280      	uxth	r0, r0
    49a6:	4770      	bx	lr
    49a8:	200185e8 	.word	0x200185e8
    49ac:	200185e4 	.word	0x200185e4

000049b0 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    49b0:	4b01      	ldr	r3, [pc, #4]	; (49b8 <queue_isBusy()+0x8>)
    49b2:	6818      	ldr	r0, [r3, #0]
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop
    49b8:	200123d4 	.word	0x200123d4

000049bc <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    49bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    49be:	2601      	movs	r6, #1
    49c0:	4d17      	ldr	r5, [pc, #92]	; (4a20 <pushData(unsigned long*)+0x64>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    49c2:	4c18      	ldr	r4, [pc, #96]	; (4a24 <pushData(unsigned long*)+0x68>)
  {
    49c4:	4601      	mov	r1, r0
    queue_busy=1;
    49c6:	602e      	str	r6, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    49c8:	6823      	ldr	r3, [r4, #0]
    49ca:	4a17      	ldr	r2, [pc, #92]	; (4a28 <pushData(unsigned long*)+0x6c>)
    49cc:	4433      	add	r3, r6
    49ce:	4f17      	ldr	r7, [pc, #92]	; (4a2c <pushData(unsigned long*)+0x70>)
    49d0:	6810      	ldr	r0, [r2, #0]
    49d2:	fb87 2e03 	smull	r2, lr, r7, r3
    49d6:	17da      	asrs	r2, r3, #31
    49d8:	ebc2 226e 	rsb	r2, r2, lr, asr #9
    49dc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    49e0:	eba3 2302 	sub.w	r3, r3, r2, lsl #8
    49e4:	4283      	cmp	r3, r0
    49e6:	d017      	beq.n	4a18 <pushData(unsigned long*)+0x5c>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    49e8:	4b11      	ldr	r3, [pc, #68]	; (4a30 <pushData(unsigned long*)+0x74>)
    49ea:	f44f 7200 	mov.w	r2, #512	; 0x200
    49ee:	6820      	ldr	r0, [r4, #0]
    49f0:	eb03 2040 	add.w	r0, r3, r0, lsl #9
    49f4:	f009 fc8e 	bl	e314 <memcpy>
    tail = (tail+1)%MAXBUF;
    49f8:	6822      	ldr	r2, [r4, #0]
    queue_busy=0;
    return 1; // signal success.
    49fa:	4630      	mov	r0, r6
    tail = (tail+1)%MAXBUF;
    49fc:	3201      	adds	r2, #1
    49fe:	fb87 3702 	smull	r3, r7, r7, r2
    4a02:	17d3      	asrs	r3, r2, #31
    4a04:	ebc3 2367 	rsb	r3, r3, r7, asr #9
    4a08:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4a0c:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
    queue_busy=0;
    4a10:	2200      	movs	r2, #0
    tail = (tail+1)%MAXBUF;
    4a12:	6023      	str	r3, [r4, #0]
    queue_busy=0;
    4a14:	602a      	str	r2, [r5, #0]
  }
    4a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    4a18:	2300      	movs	r3, #0
    4a1a:	4618      	mov	r0, r3
    4a1c:	602b      	str	r3, [r5, #0]
  }
    4a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a20:	200123d4 	.word	0x200123d4
    4a24:	200185e8 	.word	0x200185e8
    4a28:	200185e4 	.word	0x200185e4
    4a2c:	38e38e39 	.word	0x38e38e39
    4a30:	70000000 	.word	0x70000000

00004a34 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    4a34:	b570      	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a36:	4b13      	ldr	r3, [pc, #76]	; (4a84 <pullData(unsigned long*)+0x50>)
    queue_busy=1;
    4a38:	2401      	movs	r4, #1
    4a3a:	4e13      	ldr	r6, [pc, #76]	; (4a88 <pullData(unsigned long*)+0x54>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a3c:	4d13      	ldr	r5, [pc, #76]	; (4a8c <pullData(unsigned long*)+0x58>)
    queue_busy=1;
    4a3e:	6034      	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a40:	682a      	ldr	r2, [r5, #0]
    4a42:	681b      	ldr	r3, [r3, #0]
    4a44:	429a      	cmp	r2, r3
    4a46:	d018      	beq.n	4a7a <pullData(unsigned long*)+0x46>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    4a48:	4b11      	ldr	r3, [pc, #68]	; (4a90 <pullData(unsigned long*)+0x5c>)
    4a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a4e:	6829      	ldr	r1, [r5, #0]
    4a50:	eb03 2141 	add.w	r1, r3, r1, lsl #9
    4a54:	f009 fc5e 	bl	e314 <memcpy>
    head = (head+1)%MAXBUF;
    4a58:	682a      	ldr	r2, [r5, #0]
    4a5a:	490e      	ldr	r1, [pc, #56]	; (4a94 <pullData(unsigned long*)+0x60>)
    queue_busy=0;
    return 1; // signal success.
    4a5c:	4620      	mov	r0, r4
    head = (head+1)%MAXBUF;
    4a5e:	3201      	adds	r2, #1
    4a60:	fb81 3102 	smull	r3, r1, r1, r2
    4a64:	17d3      	asrs	r3, r2, #31
    4a66:	ebc3 2361 	rsb	r3, r3, r1, asr #9
    4a6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4a6e:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
    queue_busy=0;
    4a72:	2200      	movs	r2, #0
    head = (head+1)%MAXBUF;
    4a74:	602b      	str	r3, [r5, #0]
    queue_busy=0;
    4a76:	6032      	str	r2, [r6, #0]
  }
    4a78:	bd70      	pop	{r4, r5, r6, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    4a7a:	2300      	movs	r3, #0
    4a7c:	4618      	mov	r0, r3
    4a7e:	6033      	str	r3, [r6, #0]
  }
    4a80:	bd70      	pop	{r4, r5, r6, pc}
    4a82:	bf00      	nop
    4a84:	200185e8 	.word	0x200185e8
    4a88:	200123d4 	.word	0x200123d4
    4a8c:	200185e4 	.word	0x200185e4
    4a90:	70000000 	.word	0x70000000
    4a94:	38e38e39 	.word	0x38e38e39

00004a98 <time2date(unsigned long, datetime_t*)>:

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    4a98:	4a54      	ldr	r2, [pc, #336]	; (4bec <time2date(unsigned long, datetime_t*)+0x154>)
  {
    4a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4a9e:	fba2 4300 	umull	r4, r3, r2, r0

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4aa2:	f240 196d 	movw	r9, #365	; 0x16d
    4aa6:	4e52      	ldr	r6, [pc, #328]	; (4bf0 <time2date(unsigned long, datetime_t*)+0x158>)
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4aa8:	095b      	lsrs	r3, r3, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4aaa:	4f52      	ldr	r7, [pc, #328]	; (4bf4 <time2date(unsigned long, datetime_t*)+0x15c>)
    4aac:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4c08 <time2date(unsigned long, datetime_t*)+0x170>
    tm->min  = time % 60; time /= 60; // now it is hours
    4ab0:	fba2 4203 	umull	r4, r2, r2, r3
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4ab4:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
    tm->min  = time % 60; time /= 60; // now it is hours
    4ab8:	0952      	lsrs	r2, r2, #5
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4aba:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
    tm->hour = time % 24; time /= 24; // now it is days
    4abe:	4c4e      	ldr	r4, [pc, #312]	; (4bf8 <time2date(unsigned long, datetime_t*)+0x160>)
    tm->min  = time % 60; time /= 60; // now it is hours
    4ac0:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
    tm->hour = time % 24; time /= 24; // now it is days
    4ac4:	fba4 4e02 	umull	r4, lr, r4, r2
    tm->min  = time % 60; time /= 60; // now it is hours
    4ac8:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    4acc:	71c8      	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    4ace:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
    tm->min  = time % 60; time /= 60; // now it is hours
    4ad2:	718b      	strb	r3, [r1, #6]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4ad4:	f10e 0404 	add.w	r4, lr, #4
    tm->hour = time % 24; time /= 24; // now it is days
    4ad8:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4adc:	4b47      	ldr	r3, [pc, #284]	; (4bfc <time2date(unsigned long, datetime_t*)+0x164>)
    tm->hour = time % 24; time /= 24; // now it is days
    4ade:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4ae2:	fba3 0304 	umull	r0, r3, r3, r4
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4ae6:	2000      	movs	r0, #0
    tm->hour = time % 24; time /= 24; // now it is days
    4ae8:	714a      	strb	r2, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4aea:	1ae2      	subs	r2, r4, r3
    4aec:	eb03 0352 	add.w	r3, r3, r2, lsr #1
    days = 0;
    4af0:	4602      	mov	r2, r0
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    4af2:	089b      	lsrs	r3, r3, #2
    4af4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    4af8:	1ae4      	subs	r4, r4, r3
    4afa:	710c      	strb	r4, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4afc:	b2c3      	uxtb	r3, r0
    4afe:	f240 1c6d 	movw	ip, #365	; 0x16d
    4b02:	f203 73b2 	addw	r3, r3, #1970	; 0x7b2
    4b06:	f013 0403 	ands.w	r4, r3, #3
    4b0a:	fb06 f503 	mul.w	r5, r6, r3
    4b0e:	d108      	bne.n	4b22 <time2date(unsigned long, datetime_t*)+0x8a>
    4b10:	ebb7 0fb5 	cmp.w	r7, r5, ror #2
    4b14:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
    4b18:	d303      	bcc.n	4b22 <time2date(unsigned long, datetime_t*)+0x8a>
    4b1a:	ebb8 1f35 	cmp.w	r8, r5, ror #4
    4b1e:	bf38      	it	cc
    4b20:	46cc      	movcc	ip, r9
    4b22:	4462      	add	r2, ip
    4b24:	3001      	adds	r0, #1
    4b26:	4596      	cmp	lr, r2
    4b28:	d2e8      	bcs.n	4afc <time2date(unsigned long, datetime_t*)+0x64>
      year++;
    }
    tm->year = year+YEAR0;
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b2a:	4d35      	ldr	r5, [pc, #212]	; (4c00 <time2date(unsigned long, datetime_t*)+0x168>)
    tm->year = year+YEAR0;
    4b2c:	800b      	strh	r3, [r1, #0]
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b2e:	fba5 0503 	umull	r0, r5, r5, r3
    4b32:	b3a4      	cbz	r4, 4b9e <time2date(unsigned long, datetime_t*)+0x106>
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4b34:	096e      	lsrs	r6, r5, #5
    4b36:	2764      	movs	r7, #100	; 0x64
    4b38:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4b3c:	09ed      	lsrs	r5, r5, #7
    4b3e:	fb07 3616 	mls	r6, r7, r6, r3
    4b42:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b46:	f240 106d 	movw	r0, #365	; 0x16d
    time  -= days; // now it is days in this year, starting at 0
    4b4a:	ebae 0e02 	sub.w	lr, lr, r2
    4b4e:	2300      	movs	r3, #0
    4b50:	2201      	movs	r2, #1
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    4b52:	4f2c      	ldr	r7, [pc, #176]	; (4c04 <time2date(unsigned long, datetime_t*)+0x16c>)
    time  -= days; // now it is days in this year, starting at 0
    4b54:	4470      	add	r0, lr
    for (month=0; month<12; month++) {
    4b56:	e00a      	b.n	4b6e <time2date(unsigned long, datetime_t*)+0xd6>
      }
      
      if (time >= monthLength) {
    4b58:	f813 c007 	ldrb.w	ip, [r3, r7]
    4b5c:	4584      	cmp	ip, r0
    4b5e:	d837      	bhi.n	4bd0 <time2date(unsigned long, datetime_t*)+0x138>
    for (month=0; month<12; month++) {
    4b60:	2a0c      	cmp	r2, #12
        time -= monthLength;
    4b62:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    4b66:	d012      	beq.n	4b8e <time2date(unsigned long, datetime_t*)+0xf6>
    4b68:	3201      	adds	r2, #1
    4b6a:	3301      	adds	r3, #1
    4b6c:	b2d2      	uxtb	r2, r2
      if (month==1) { // february
    4b6e:	2b01      	cmp	r3, #1
    4b70:	fa5f fe83 	uxtb.w	lr, r3
    4b74:	d1f0      	bne.n	4b58 <time2date(unsigned long, datetime_t*)+0xc0>
        if (LEAP_YEAR(year)) {
    4b76:	b91c      	cbnz	r4, 4b80 <time2date(unsigned long, datetime_t*)+0xe8>
    4b78:	b1f6      	cbz	r6, 4bb8 <time2date(unsigned long, datetime_t*)+0x120>
    4b7a:	f04f 0c1d 	mov.w	ip, #29
    4b7e:	e001      	b.n	4b84 <time2date(unsigned long, datetime_t*)+0xec>
    4b80:	f04f 0c1c 	mov.w	ip, #28
      if (time >= monthLength) {
    4b84:	4560      	cmp	r0, ip
    4b86:	d32d      	bcc.n	4be4 <time2date(unsigned long, datetime_t*)+0x14c>
        time -= monthLength;
    4b88:	eba0 000c 	sub.w	r0, r0, ip
    for (month=0; month<12; month++) {
    4b8c:	e7ec      	b.n	4b68 <time2date(unsigned long, datetime_t*)+0xd0>
    4b8e:	f04f 0e0d 	mov.w	lr, #13
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    tm->day = time + 1;     // day of month
    4b92:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    4b94:	f881 e002 	strb.w	lr, [r1, #2]
    tm->day = time + 1;     // day of month
    4b98:	70c8      	strb	r0, [r1, #3]
  }
    4b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    days -= LEAP_YEAR(year) ? 366 : 365;
    4b9e:	2064      	movs	r0, #100	; 0x64
    4ba0:	096e      	lsrs	r6, r5, #5
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4ba2:	09ed      	lsrs	r5, r5, #7
    days -= LEAP_YEAR(year) ? 366 : 365;
    4ba4:	fb00 3616 	mls	r6, r0, r6, r3
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4ba8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4bac:	fb00 3515 	mls	r5, r0, r5, r3
    days -= LEAP_YEAR(year) ? 366 : 365;
    4bb0:	b14e      	cbz	r6, 4bc6 <time2date(unsigned long, datetime_t*)+0x12e>
    4bb2:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    4bb6:	e7c8      	b.n	4b4a <time2date(unsigned long, datetime_t*)+0xb2>
        if (LEAP_YEAR(year)) {
    4bb8:	2d00      	cmp	r5, #0
    4bba:	bf14      	ite	ne
    4bbc:	f04f 0c1c 	movne.w	ip, #28
    4bc0:	f04f 0c1d 	moveq.w	ip, #29
    4bc4:	e7de      	b.n	4b84 <time2date(unsigned long, datetime_t*)+0xec>
    days -= LEAP_YEAR(year) ? 366 : 365;
    4bc6:	2d00      	cmp	r5, #0
    4bc8:	d1bd      	bne.n	4b46 <time2date(unsigned long, datetime_t*)+0xae>
    4bca:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    4bce:	e7bc      	b.n	4b4a <time2date(unsigned long, datetime_t*)+0xb2>
    for (month=0; month<12; month++) {
    4bd0:	f10e 0e01 	add.w	lr, lr, #1
    tm->day = time + 1;     // day of month
    4bd4:	3001      	adds	r0, #1
    tm->month = month + 1;  // jan is month 1  
    4bd6:	fa4f fe8e 	sxtb.w	lr, lr
    tm->day = time + 1;     // day of month
    4bda:	70c8      	strb	r0, [r1, #3]
    tm->month = month + 1;  // jan is month 1  
    4bdc:	f881 e002 	strb.w	lr, [r1, #2]
  }
    4be0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (time >= monthLength) {
    4be4:	f04f 0e02 	mov.w	lr, #2
    4be8:	e7d3      	b.n	4b92 <time2date(unsigned long, datetime_t*)+0xfa>
    4bea:	bf00      	nop
    4bec:	88888889 	.word	0x88888889
    4bf0:	c28f5c29 	.word	0xc28f5c29
    4bf4:	028f5c28 	.word	0x028f5c28
    4bf8:	aaaaaaab 	.word	0xaaaaaaab
    4bfc:	24924925 	.word	0x24924925
    4c00:	51eb851f 	.word	0x51eb851f
    4c04:	20000b3c 	.word	0x20000b3c
    4c08:	00a3d70a 	.word	0x00a3d70a

00004c0c <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    4c0c:	8801      	ldrh	r1, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    4c0e:	4a35      	ldr	r2, [pc, #212]	; (4ce4 <date2time(datetime_t*)+0xd8>)
    year=tm->year-YEAR0;
    4c10:	314e      	adds	r1, #78	; 0x4e
    4c12:	b2c9      	uxtb	r1, r1
  {
    4c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    seconds= year*(SECS_PER_DAY * 365);
    4c18:	fb01 f202 	mul.w	r2, r1, r2
    for (ii = 0; ii < year; ii++) {
    4c1c:	b1e1      	cbz	r1, 4c58 <date2time(datetime_t*)+0x4c>
    4c1e:	f201 7cb2 	addw	ip, r1, #1970	; 0x7b2
    4c22:	f240 73b3 	movw	r3, #1971	; 0x7b3
    4c26:	4d30      	ldr	r5, [pc, #192]	; (4ce8 <date2time(datetime_t*)+0xdc>)
      if (LEAP_YEAR(ii)) {
    4c28:	4e30      	ldr	r6, [pc, #192]	; (4cec <date2time(datetime_t*)+0xe0>)
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4c2a:	4f31      	ldr	r7, [pc, #196]	; (4cf0 <date2time(datetime_t*)+0xe4>)
      if (LEAP_YEAR(ii)) {
    4c2c:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 4cfc <date2time(datetime_t*)+0xf0>
    for (ii = 0; ii < year; ii++) {
    4c30:	4563      	cmp	r3, ip
    4c32:	fb05 f403 	mul.w	r4, r5, r3
    4c36:	d00f      	beq.n	4c58 <date2time(datetime_t*)+0x4c>
      if (LEAP_YEAR(ii)) {
    4c38:	f013 0f03 	tst.w	r3, #3
    4c3c:	f103 0301 	add.w	r3, r3, #1
    4c40:	d1f6      	bne.n	4c30 <date2time(datetime_t*)+0x24>
    4c42:	ebb6 0fb4 	cmp.w	r6, r4, ror #2
    4c46:	d302      	bcc.n	4c4e <date2time(datetime_t*)+0x42>
    4c48:	ebbe 1f34 	cmp.w	lr, r4, ror #4
    4c4c:	d3f0      	bcc.n	4c30 <date2time(datetime_t*)+0x24>
    for (ii = 0; ii < year; ii++) {
    4c4e:	4563      	cmp	r3, ip
        seconds += SECS_PER_DAY;   // add extra days for leap years
    4c50:	443a      	add	r2, r7
    for (ii = 0; ii < year; ii++) {
    4c52:	fb05 f403 	mul.w	r4, r5, r3
    4c56:	d1ef      	bne.n	4c38 <date2time(datetime_t*)+0x2c>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
    4c58:	f990 e002 	ldrsb.w	lr, [r0, #2]
    4c5c:	f1be 0f01 	cmp.w	lr, #1
    4c60:	dd29      	ble.n	4cb6 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4c62:	f201 73b2 	addw	r3, r1, #1970	; 0x7b2
    4c66:	4e23      	ldr	r6, [pc, #140]	; (4cf4 <date2time(datetime_t*)+0xe8>)
    4c68:	2564      	movs	r5, #100	; 0x64
    4c6a:	f44f 74c8 	mov.w	r4, #400	; 0x190
    4c6e:	fba6 1603 	umull	r1, r6, r6, r3
        seconds += SECS_PER_DAY * 29;
    4c72:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4d00 <date2time(datetime_t*)+0xf4>
    4c76:	4920      	ldr	r1, [pc, #128]	; (4cf8 <date2time(datetime_t*)+0xec>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4c78:	0977      	lsrs	r7, r6, #5
    4c7a:	09f6      	lsrs	r6, r6, #7
    4c7c:	fb05 3717 	mls	r7, r5, r7, r3
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4c80:	4d1b      	ldr	r5, [pc, #108]	; (4cf0 <date2time(datetime_t*)+0xe4>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4c82:	fb04 3616 	mls	r6, r4, r6, r3
    4c86:	f003 0403 	and.w	r4, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    4c8a:	2301      	movs	r3, #1
    4c8c:	e007      	b.n	4c9e <date2time(datetime_t*)+0x92>
    4c8e:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4c90:	f891 c000 	ldrb.w	ip, [r1]
    for (ii = 1; ii < tm->month; ii++) {
    4c94:	3101      	adds	r1, #1
    4c96:	4573      	cmp	r3, lr
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4c98:	fb05 220c 	mla	r2, r5, ip, r2
    for (ii = 1; ii < tm->month; ii++) {
    4c9c:	d00b      	beq.n	4cb6 <date2time(datetime_t*)+0xaa>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    4c9e:	2b02      	cmp	r3, #2
    4ca0:	d1f5      	bne.n	4c8e <date2time(datetime_t*)+0x82>
    4ca2:	2c00      	cmp	r4, #0
    4ca4:	d1f3      	bne.n	4c8e <date2time(datetime_t*)+0x82>
    4ca6:	b90f      	cbnz	r7, 4cac <date2time(datetime_t*)+0xa0>
    4ca8:	2e00      	cmp	r6, #0
    4caa:	d1f0      	bne.n	4c8e <date2time(datetime_t*)+0x82>
    for (ii = 1; ii < tm->month; ii++) {
    4cac:	3301      	adds	r3, #1
        seconds += SECS_PER_DAY * 29;
    4cae:	4442      	add	r2, r8
    for (ii = 1; ii < tm->month; ii++) {
    4cb0:	3101      	adds	r1, #1
    4cb2:	4573      	cmp	r3, lr
    4cb4:	d1f3      	bne.n	4c9e <date2time(datetime_t*)+0x92>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    4cb6:	f990 3006 	ldrsb.w	r3, [r0, #6]
    seconds+= tm->hour * SECS_PER_HOUR;
    4cba:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    4cbe:	f990 1005 	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    4cc2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    seconds+= tm->sec;
    4cc6:	f990 5007 	ldrsb.w	r5, [r0, #7]
    seconds+= tm->min * SECS_PER_MIN;
    4cca:	009b      	lsls	r3, r3, #2
    seconds+= tm->sec;
    4ccc:	fb04 3301 	mla	r3, r4, r1, r3
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4cd0:	f990 1003 	ldrsb.w	r1, [r0, #3]
    4cd4:	4c06      	ldr	r4, [pc, #24]	; (4cf0 <date2time(datetime_t*)+0xe4>)
    seconds+= tm->sec;
    4cd6:	1958      	adds	r0, r3, r5
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4cd8:	1e4b      	subs	r3, r1, #1
    seconds+= tm->sec;
    4cda:	fb04 0003 	mla	r0, r4, r3, r0
    return seconds; 
  }
    4cde:	4410      	add	r0, r2
    4ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ce4:	01e13380 	.word	0x01e13380
    4ce8:	c28f5c29 	.word	0xc28f5c29
    4cec:	028f5c28 	.word	0x028f5c28
    4cf0:	00015180 	.word	0x00015180
    4cf4:	51eb851f 	.word	0x51eb851f
    4cf8:	20000b3c 	.word	0x20000b3c
    4cfc:	00a3d70a 	.word	0x00a3d70a
    4d00:	00263b80 	.word	0x00263b80

00004d04 <rtcSetup(unsigned char, unsigned char)>:

  #include "RV-3028-C7.h"
  RV3028 rtc;

  int16_t rtcSetup(uint8_t sda, uint8_t scl)
  {
    4d04:	b500      	push	{lr}
    Wire.begin();
    4d06:	4811      	ldr	r0, [pc, #68]	; (4d4c <rtcSetup(unsigned char, unsigned char)+0x48>)
  {
    4d08:	b083      	sub	sp, #12
    Wire.begin();
    4d0a:	f016 f9b9 	bl	1b080 <___ZN7TwoWire5beginEv_veneer>
    if (rtc.begin() == false) {
    4d0e:	2301      	movs	r3, #1
    4d10:	490e      	ldr	r1, [pc, #56]	; (4d4c <rtcSetup(unsigned char, unsigned char)+0x48>)
    4d12:	480f      	ldr	r0, [pc, #60]	; (4d50 <rtcSetup(unsigned char, unsigned char)+0x4c>)
    4d14:	461a      	mov	r2, r3
    4d16:	9300      	str	r3, [sp, #0]
    4d18:	f000 fccc 	bl	56b4 <RV3028::begin(TwoWire&, bool, bool, bool)>
    4d1c:	b950      	cbnz	r0, 4d34 <rtcSetup(unsigned char, unsigned char)+0x30>
    4d1e:	210c      	movs	r1, #12
    4d20:	480c      	ldr	r0, [pc, #48]	; (4d54 <rtcSetup(unsigned char, unsigned char)+0x50>)
    4d22:	f00b f877 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d26:	480c      	ldr	r0, [pc, #48]	; (4d58 <rtcSetup(unsigned char, unsigned char)+0x54>)
    4d28:	f008 fcec 	bl	d704 <Print::println()>
    {
      Serial.println("RTC online!");
    }

    return 1;
  }
    4d2c:	2001      	movs	r0, #1
    4d2e:	b003      	add	sp, #12
    4d30:	f85d fb04 	ldr.w	pc, [sp], #4
    4d34:	210b      	movs	r1, #11
    4d36:	4809      	ldr	r0, [pc, #36]	; (4d5c <rtcSetup(unsigned char, unsigned char)+0x58>)
    4d38:	f00b f86c 	bl	fe14 <usb_serial_write>
    4d3c:	4806      	ldr	r0, [pc, #24]	; (4d58 <rtcSetup(unsigned char, unsigned char)+0x54>)
    4d3e:	f008 fce1 	bl	d704 <Print::println()>
    4d42:	2001      	movs	r0, #1
    4d44:	b003      	add	sp, #12
    4d46:	f85d fb04 	ldr.w	pc, [sp], #4
    4d4a:	bf00      	nop
    4d4c:	20008ba4 	.word	0x20008ba4
    4d50:	2001940c 	.word	0x2001940c
    4d54:	20000810 	.word	0x20000810
    4d58:	20008b94 	.word	0x20008b94
    4d5c:	20000820 	.word	0x20000820

00004d60 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    4d60:	b500      	push	{lr}
    4d62:	b083      	sub	sp, #12
    4d64:	9001      	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    4d66:	f009 fd49 	bl	e7fc <rtc_get>
    4d6a:	9901      	ldr	r1, [sp, #4]
    4d6c:	f7ff fe94 	bl	4a98 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    4d70:	2001      	movs	r0, #1
    4d72:	b003      	add	sp, #12
    4d74:	f85d fb04 	ldr.w	pc, [sp], #4

00004d78 <rtcSetDate(int, int, int)>:
    rtc_set(date2time(t));
    return 1;
  }

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    4d78:	b570      	push	{r4, r5, r6, lr}
    4d7a:	b082      	sub	sp, #8
    4d7c:	4614      	mov	r4, r2
    4d7e:	460d      	mov	r5, r1
    4d80:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4d82:	f009 fd3b 	bl	e7fc <rtc_get>
    4d86:	4669      	mov	r1, sp
    4d88:	f7ff fe86 	bl	4a98 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.year=year;
    4d8c:	f8ad 6000 	strh.w	r6, [sp]
    rtc_set(date2time(t));
    4d90:	4608      	mov	r0, r1
    t.month=month;
    4d92:	f88d 5002 	strb.w	r5, [sp, #2]
    t.day=day;
    4d96:	f88d 4003 	strb.w	r4, [sp, #3]
    rtc_set(date2time(t));
    4d9a:	f7ff ff37 	bl	4c0c <date2time(datetime_t*)>
    4d9e:	f009 fd3f 	bl	e820 <rtc_set>
    rtc_set_datetime(&t);
  }
    4da2:	b002      	add	sp, #8
    4da4:	bd70      	pop	{r4, r5, r6, pc}
    4da6:	bf00      	nop

00004da8 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    4da8:	b570      	push	{r4, r5, r6, lr}
    4daa:	b082      	sub	sp, #8
    4dac:	4614      	mov	r4, r2
    4dae:	460d      	mov	r5, r1
    4db0:	4606      	mov	r6, r0
    time2date(rtc_get(), t);
    4db2:	f009 fd23 	bl	e7fc <rtc_get>
    4db6:	4669      	mov	r1, sp
    4db8:	f7ff fe6e 	bl	4a98 <time2date(unsigned long, datetime_t*)>
    rtc_get_datetime(&t);
    t.hour=hour;
    4dbc:	f88d 6005 	strb.w	r6, [sp, #5]
    rtc_set(date2time(t));
    4dc0:	4608      	mov	r0, r1
    t.min=minutes;
    4dc2:	f88d 5006 	strb.w	r5, [sp, #6]
    t.sec=seconds;
    4dc6:	f88d 4007 	strb.w	r4, [sp, #7]
    rtc_set(date2time(t));
    4dca:	f7ff ff1f 	bl	4c0c <date2time(datetime_t*)>
    4dce:	f009 fd27 	bl	e820 <rtc_set>
    rtc_set_datetime(&t);
  }
    4dd2:	b002      	add	sp, #8
    4dd4:	bd70      	pop	{r4, r5, r6, pc}
    4dd6:	bf00      	nop

00004dd8 <rtcXferTime()>:

  void rtcXferTime(void)
  {
    4dd8:	b510      	push	{r4, lr}
    4dda:	b086      	sub	sp, #24
    rtc.setUNIX(rtc_get());
    4ddc:	f009 fd0e 	bl	e7fc <rtc_get>
    4de0:	4601      	mov	r1, r0
    4de2:	4814      	ldr	r0, [pc, #80]	; (4e34 <rtcXferTime()+0x5c>)
    4de4:	f000 f868 	bl	4eb8 <RV3028::setUNIX(unsigned long)>
    time2date(rtc_get(), t);
    4de8:	f009 fd08 	bl	e7fc <rtc_get>
    4dec:	a904      	add	r1, sp, #16
    4dee:	f7ff fe53 	bl	4a98 <time2date(unsigned long, datetime_t*)>
    datetime_t t;
    rtc_get_datetime(&t);
    if (rtc.setTime(t.sec, t.min, t.hour, t.day, t.day, t.month, t.year) == false) 
    4df2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    4df6:	f89d 1012 	ldrb.w	r1, [sp, #18]
    4dfa:	f89d 4013 	ldrb.w	r4, [sp, #19]
    4dfe:	f89d 3015 	ldrb.w	r3, [sp, #21]
    4e02:	f89d 2016 	ldrb.w	r2, [sp, #22]
    4e06:	e9cd 1002 	strd	r1, r0, [sp, #8]
    4e0a:	e9cd 4400 	strd	r4, r4, [sp]
    4e0e:	f89d 1017 	ldrb.w	r1, [sp, #23]
    4e12:	4808      	ldr	r0, [pc, #32]	; (4e34 <rtcXferTime()+0x5c>)
    4e14:	f000 fa30 	bl	5278 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
    4e18:	b108      	cbz	r0, 4e1e <rtcXferTime()+0x46>
    {
          Serial.println("Something went wrong setting the time");
    }
  }
    4e1a:	b006      	add	sp, #24
    4e1c:	bd10      	pop	{r4, pc}
    4e1e:	2125      	movs	r1, #37	; 0x25
    4e20:	4805      	ldr	r0, [pc, #20]	; (4e38 <rtcXferTime()+0x60>)
    4e22:	f00a fff7 	bl	fe14 <usb_serial_write>
    4e26:	4805      	ldr	r0, [pc, #20]	; (4e3c <rtcXferTime()+0x64>)
    4e28:	b006      	add	sp, #24
    4e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e2e:	f008 bc69 	b.w	d704 <Print::println()>
    4e32:	bf00      	nop
    4e34:	2001940c 	.word	0x2001940c
    4e38:	200004d0 	.word	0x200004d0
    4e3c:	20008b94 	.word	0x20008b94

00004e40 <rtcSync()>:
  void rtcSync(void)
  {
    4e40:	b510      	push	{r4, lr}
    uint32_t to;
    to=rtc_get();
    4e42:	f009 fcdb 	bl	e7fc <rtc_get>
    4e46:	4604      	mov	r4, r0
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4e48:	4806      	ldr	r0, [pc, #24]	; (4e64 <rtcSync()+0x24>)
    4e4a:	f000 fb39 	bl	54c0 <RV3028::getUNIX()>
    4e4e:	42a0      	cmp	r0, r4
    4e50:	d800      	bhi.n	4e54 <rtcSync()+0x14>
  }
    4e52:	bd10      	pop	{r4, pc}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4e54:	4803      	ldr	r0, [pc, #12]	; (4e64 <rtcSync()+0x24>)
    4e56:	f000 fb33 	bl	54c0 <RV3028::getUNIX()>
  }
    4e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    4e5e:	f009 bcdf 	b.w	e820 <rtc_set>
    4e62:	bf00      	nop
    4e64:	2001940c 	.word	0x2001940c

00004e68 <rtcGetTimestamp()>:

  char * rtcGetTimestamp(void)
  { 
    4e68:	b510      	push	{r4, lr}
    //PRINT TIME
    if (rtc.updateTime() == false) //Updates the time variables from RTC
    4e6a:	4809      	ldr	r0, [pc, #36]	; (4e90 <rtcGetTimestamp()+0x28>)
    4e6c:	f000 fb10 	bl	5490 <RV3028::updateTime()>
    4e70:	b120      	cbz	r0, 4e7c <rtcGetTimestamp()+0x14>
    {
      Serial.println("RTC failed to update");
      return 0;
    } else {
      return rtc.stringTimeStamp();
    4e72:	4807      	ldr	r0, [pc, #28]	; (4e90 <rtcGetTimestamp()+0x28>)
    }
  }
    4e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return rtc.stringTimeStamp();
    4e78:	f000 b88a 	b.w	4f90 <RV3028::stringTimeStamp()>
    4e7c:	4604      	mov	r4, r0
    4e7e:	2114      	movs	r1, #20
    4e80:	4804      	ldr	r0, [pc, #16]	; (4e94 <rtcGetTimestamp()+0x2c>)
    4e82:	f00a ffc7 	bl	fe14 <usb_serial_write>
    4e86:	4804      	ldr	r0, [pc, #16]	; (4e98 <rtcGetTimestamp()+0x30>)
    4e88:	f008 fc3c 	bl	d704 <Print::println()>
  }
    4e8c:	4620      	mov	r0, r4
    4e8e:	bd10      	pop	{r4, pc}
    4e90:	2001940c 	.word	0x2001940c
    4e94:	20000524 	.word	0x20000524
    4e98:	20008b94 	.word	0x20008b94

00004e9c <_GLOBAL__sub_I__Z7initRTChh>:
  RV3028 rtc;
    4e9c:	4801      	ldr	r0, [pc, #4]	; (4ea4 <_GLOBAL__sub_I__Z7initRTChh+0x8>)
    4e9e:	f000 b809 	b.w	4eb4 <RV3028::RV3028()>
    4ea2:	bf00      	nop
    4ea4:	2001940c 	.word	0x2001940c

00004ea8 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
    4ea8:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4eac:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4eb0:	1a10      	subs	r0, r2, r0
    4eb2:	4770      	bx	lr

00004eb4 <RV3028::RV3028()>:
#define BUILD_SECOND ((BUILD_SECOND_0 * 10) + BUILD_SECOND_1)

RV3028::RV3028(void)
{

}
    4eb4:	4770      	bx	lr
    4eb6:	bf00      	nop

00004eb8 <RV3028::setUNIX(unsigned long)>:
	}
}

//ATTENTION: Real Time and UNIX Time are INDEPENDENT!
bool RV3028::setUNIX(uint32_t value)
{
    4eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return(true);
}

bool RV3028::writeMultipleRegisters(uint8_t addr, uint8_t * values, uint8_t len)
{
	_i2cPort->beginTransmission(RV3028_ADDR);
    4eba:	6883      	ldr	r3, [r0, #8]
		transmitting = 1;
    4ebc:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    4ebe:	24a4      	movs	r4, #164	; 0xa4
{
    4ec0:	4607      	mov	r7, r0
		transmitting = 1;
    4ec2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    4ec6:	b083      	sub	sp, #12
		txBuffer[0] = (address << 1);
    4ec8:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
	unix_reg[0] = value;
    4ecc:	b2cd      	uxtb	r5, r1
		txBufferLength = 1;
    4ece:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    4ed2:	ac01      	add	r4, sp, #4
    4ed4:	6880      	ldr	r0, [r0, #8]
    4ed6:	f10d 0607 	add.w	r6, sp, #7
	unix_reg[0] = value;
    4eda:	9101      	str	r1, [sp, #4]
	_i2cPort->write(addr);
    4edc:	211b      	movs	r1, #27
    4ede:	6803      	ldr	r3, [r0, #0]
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    4ee4:	e001      	b.n	4eea <RV3028::setUNIX(unsigned long)+0x32>
	{
		_i2cPort->write(values[i]);
    4ee6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
    4eea:	68b8      	ldr	r0, [r7, #8]
    4eec:	4629      	mov	r1, r5
    4eee:	6803      	ldr	r3, [r0, #0]
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    4ef4:	42a6      	cmp	r6, r4
    4ef6:	d1f6      	bne.n	4ee6 <RV3028::setUNIX(unsigned long)+0x2e>
		return endTransmission(1);
    4ef8:	2101      	movs	r1, #1
    4efa:	68b8      	ldr	r0, [r7, #8]
    4efc:	f008 f936 	bl	d16c <TwoWire::endTransmission(unsigned char)>
}
    4f00:	fab0 f080 	clz	r0, r0
    4f04:	0940      	lsrs	r0, r0, #5
    4f06:	b003      	add	sp, #12
    4f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f0a:	bf00      	nop

00004f0c <RV3028::readRegister(unsigned char)>:
{
    4f0c:	b538      	push	{r3, r4, r5, lr}
		txBuffer[0] = (address << 1);
    4f0e:	22a4      	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    4f10:	6883      	ldr	r3, [r0, #8]
		transmitting = 1;
    4f12:	2501      	movs	r5, #1
{
    4f14:	4604      	mov	r4, r0
		txBuffer[0] = (address << 1);
    4f16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    4f1a:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    4f1e:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    4f22:	6880      	ldr	r0, [r0, #8]
    4f24:	6803      	ldr	r3, [r0, #0]
    4f26:	681b      	ldr	r3, [r3, #0]
    4f28:	4798      	blx	r3
		return endTransmission(1);
    4f2a:	4629      	mov	r1, r5
    4f2c:	68a0      	ldr	r0, [r4, #8]
    4f2e:	f008 f91d 	bl	d16c <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    4f32:	462b      	mov	r3, r5
    4f34:	462a      	mov	r2, r5
    4f36:	2152      	movs	r1, #82	; 0x52
    4f38:	68a0      	ldr	r0, [r4, #8]
    4f3a:	f008 f997 	bl	d26c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (_i2cPort->available()) {
    4f3e:	68a0      	ldr	r0, [r4, #8]
    4f40:	4a11      	ldr	r2, [pc, #68]	; (4f88 <RV3028::readRegister(unsigned char)+0x7c>)
    4f42:	6803      	ldr	r3, [r0, #0]
    4f44:	691b      	ldr	r3, [r3, #16]
    4f46:	4293      	cmp	r3, r2
    4f48:	d119      	bne.n	4f7e <RV3028::readRegister(unsigned char)+0x72>
		return rxBufferLength - rxBufferIndex;
    4f4a:	f890 30a3 	ldrb.w	r3, [r0, #163]	; 0xa3
    4f4e:	f890 20a2 	ldrb.w	r2, [r0, #162]	; 0xa2
    4f52:	1a98      	subs	r0, r3, r2
    4f54:	b188      	cbz	r0, 4f7a <RV3028::readRegister(unsigned char)+0x6e>
		return _i2cPort->read();
    4f56:	68a0      	ldr	r0, [r4, #8]
    4f58:	4a0c      	ldr	r2, [pc, #48]	; (4f8c <RV3028::readRegister(unsigned char)+0x80>)
    4f5a:	6803      	ldr	r3, [r0, #0]
    4f5c:	695b      	ldr	r3, [r3, #20]
    4f5e:	4293      	cmp	r3, r2
    4f60:	d10f      	bne.n	4f82 <RV3028::readRegister(unsigned char)+0x76>
		if (rxBufferIndex >= rxBufferLength) return -1;
    4f62:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    4f66:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    4f6a:	429a      	cmp	r2, r3
    4f6c:	d905      	bls.n	4f7a <RV3028::readRegister(unsigned char)+0x6e>
		return rxBuffer[rxBufferIndex++];
    4f6e:	1c5a      	adds	r2, r3, #1
    4f70:	4403      	add	r3, r0
    4f72:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    4f76:	7e98      	ldrb	r0, [r3, #26]
}
    4f78:	bd38      	pop	{r3, r4, r5, pc}
		return (0xFF); //Error
    4f7a:	20ff      	movs	r0, #255	; 0xff
}
    4f7c:	bd38      	pop	{r3, r4, r5, pc}
	if (_i2cPort->available()) {
    4f7e:	4798      	blx	r3
    4f80:	e7e8      	b.n	4f54 <RV3028::readRegister(unsigned char)+0x48>
		return _i2cPort->read();
    4f82:	4798      	blx	r3
    4f84:	b2c0      	uxtb	r0, r0
}
    4f86:	bd38      	pop	{r3, r4, r5, pc}
    4f88:	00004ea9 	.word	0x00004ea9
    4f8c:	00001f65 	.word	0x00001f65

00004f90 <RV3028::stringTimeStamp()>:
{
    4f90:	b530      	push	{r4, r5, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4f92:	2110      	movs	r1, #16
{
    4f94:	b087      	sub	sp, #28
    4f96:	4604      	mov	r4, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4f98:	f7ff ffb8 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    4f9c:	0782      	lsls	r2, r0, #30
    4f9e:	d552      	bpl.n	5046 <RV3028::stringTimeStamp()+0xb6>
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    4fa0:	2102      	movs	r1, #2
    4fa2:	4620      	mov	r0, r4
    4fa4:	f7ff ffb2 	bl	4f0c <RV3028::readRegister(unsigned char)>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4fa8:	2110      	movs	r1, #16
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    4faa:	4605      	mov	r5, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    4fac:	4620      	mov	r0, r4
    4fae:	f7ff ffad 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    4fb2:	0783      	lsls	r3, r0, #30
    4fb4:	f100 808c 	bmi.w	50d0 <RV3028::stringTimeStamp()+0x140>
    4fb8:	2341      	movs	r3, #65	; 0x41
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4fba:	9304      	str	r3, [sp, #16]
    4fbc:	f894 e001 	ldrb.w	lr, [r4, #1]
    4fc0:	f894 c000 	ldrb.w	ip, [r4]
	return ((val / 0x10) * 10) + (val % 0x10);
    4fc4:	ea4f 151e 	mov.w	r5, lr, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4fc8:	7921      	ldrb	r1, [r4, #4]
    4fca:	78a0      	ldrb	r0, [r4, #2]
    4fcc:	79a2      	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    4fce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4fd2:	7963      	ldrb	r3, [r4, #5]
	return ((val / 0x10) * 10) + (val % 0x10);
    4fd4:	f00e 040f 	and.w	r4, lr, #15
    4fd8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    4fdc:	ea4f 151c 	mov.w	r5, ip, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4fe0:	b2e4      	uxtb	r4, r4
	return ((val / 0x10) * 10) + (val % 0x10);
    4fe2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4fe6:	9402      	str	r4, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    4fe8:	f00c 040f 	and.w	r4, ip, #15
    4fec:	eb04 0445 	add.w	r4, r4, r5, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    4ff0:	b2e4      	uxtb	r4, r4
    4ff2:	9403      	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    4ff4:	0904      	lsrs	r4, r0, #4
    4ff6:	f000 000f 	and.w	r0, r0, #15
    4ffa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4ffe:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    5002:	090c      	lsrs	r4, r1, #4
    5004:	f001 010f 	and.w	r1, r1, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5008:	b2c0      	uxtb	r0, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    500a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    500e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5012:	091c      	lsrs	r4, r3, #4
    5014:	f003 030f 	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5018:	b2c9      	uxtb	r1, r1
	return ((val / 0x10) * 10) + (val % 0x10);
    501a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    501e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    5022:	0914      	lsrs	r4, r2, #4
    5024:	f002 020f 	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5028:	b2db      	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    502a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    502e:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    5032:	e9cd 1000 	strd	r1, r0, [sp]
    5036:	b2d2      	uxtb	r2, r2
    5038:	4928      	ldr	r1, [pc, #160]	; (50dc <RV3028::stringTimeStamp()+0x14c>)
    503a:	4829      	ldr	r0, [pc, #164]	; (50e0 <RV3028::stringTimeStamp()+0x150>)
    503c:	f00d f852 	bl	120e4 <sprintf>
}
    5040:	4827      	ldr	r0, [pc, #156]	; (50e0 <RV3028::stringTimeStamp()+0x150>)
    5042:	b007      	add	sp, #28
    5044:	bd30      	pop	{r4, r5, pc}
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    5046:	f894 e000 	ldrb.w	lr, [r4]
    504a:	f894 c001 	ldrb.w	ip, [r4, #1]
	return ((val / 0x10) * 10) + (val % 0x10);
    504e:	ea4f 151e 	mov.w	r5, lr, lsr #4
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    5052:	7921      	ldrb	r1, [r4, #4]
    5054:	78a0      	ldrb	r0, [r4, #2]
    5056:	79a2      	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    5058:	eb05 0585 	add.w	r5, r5, r5, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    505c:	7963      	ldrb	r3, [r4, #5]
	return ((val / 0x10) * 10) + (val % 0x10);
    505e:	f00e 040f 	and.w	r4, lr, #15
    5062:	ea4f 1e1c 	mov.w	lr, ip, lsr #4
    5066:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    506a:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    506e:	b2e4      	uxtb	r4, r4
    5070:	9403      	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    5072:	f00c 040f 	and.w	r4, ip, #15
    5076:	eb04 044e 	add.w	r4, r4, lr, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    507a:	b2e4      	uxtb	r4, r4
    507c:	9402      	str	r4, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    507e:	0904      	lsrs	r4, r0, #4
    5080:	f000 000f 	and.w	r0, r0, #15
    5084:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5088:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    508c:	090c      	lsrs	r4, r1, #4
    508e:	f001 010f 	and.w	r1, r1, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    5092:	b2c0      	uxtb	r0, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    5094:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    5098:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    509c:	091c      	lsrs	r4, r3, #4
    509e:	f003 030f 	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50a2:	b2c9      	uxtb	r1, r1
	return ((val / 0x10) * 10) + (val % 0x10);
    50a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    50a8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    50ac:	0914      	lsrs	r4, r2, #4
    50ae:	f002 020f 	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50b2:	b2db      	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    50b4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    50b8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    50bc:	e9cd 1000 	strd	r1, r0, [sp]
    50c0:	b2d2      	uxtb	r2, r2
    50c2:	4908      	ldr	r1, [pc, #32]	; (50e4 <RV3028::stringTimeStamp()+0x154>)
    50c4:	4806      	ldr	r0, [pc, #24]	; (50e0 <RV3028::stringTimeStamp()+0x150>)
    50c6:	f00d f80d 	bl	120e4 <sprintf>
}
    50ca:	4805      	ldr	r0, [pc, #20]	; (50e0 <RV3028::stringTimeStamp()+0x150>)
    50cc:	b007      	add	sp, #28
    50ce:	bd30      	pop	{r4, r5, pc}
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    50d0:	f015 0f20 	tst.w	r5, #32
    50d4:	bf0c      	ite	eq
    50d6:	2341      	moveq	r3, #65	; 0x41
    50d8:	2350      	movne	r3, #80	; 0x50
    50da:	e76e      	b.n	4fba <RV3028::stringTimeStamp()+0x2a>
    50dc:	20000be8 	.word	0x20000be8
    50e0:	20018dac 	.word	0x20018dac
    50e4:	20000c18 	.word	0x20000c18

000050e8 <RV3028::writeRegister(unsigned char, unsigned char)>:
{
    50e8:	b570      	push	{r4, r5, r6, lr}
	_i2cPort->beginTransmission(RV3028_ADDR);
    50ea:	6883      	ldr	r3, [r0, #8]
		txBuffer[0] = (address << 1);
    50ec:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
		transmitting = 1;
    50f0:	2501      	movs	r5, #1
{
    50f2:	4604      	mov	r4, r0
		txBuffer[0] = (address << 1);
    50f4:	f883 c0a5 	strb.w	ip, [r3, #165]	; 0xa5
    50f8:	4616      	mov	r6, r2
		transmitting = 1;
    50fa:	f883 5130 	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    50fe:	f883 512f 	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    5102:	6880      	ldr	r0, [r0, #8]
    5104:	6803      	ldr	r3, [r0, #0]
    5106:	681b      	ldr	r3, [r3, #0]
    5108:	4798      	blx	r3
	_i2cPort->write(val);
    510a:	68a0      	ldr	r0, [r4, #8]
    510c:	4631      	mov	r1, r6
    510e:	6803      	ldr	r3, [r0, #0]
    5110:	681b      	ldr	r3, [r3, #0]
    5112:	4798      	blx	r3
		return endTransmission(1);
    5114:	4629      	mov	r1, r5
    5116:	68a0      	ldr	r0, [r4, #8]
    5118:	f008 f828 	bl	d16c <TwoWire::endTransmission(unsigned char)>
}
    511c:	fab0 f080 	clz	r0, r0
    5120:	0940      	lsrs	r0, r0, #5
    5122:	bd70      	pop	{r4, r5, r6, pc}

00005124 <RV3028::set12Hour()>:
{
    5124:	b538      	push	{r3, r4, r5, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5126:	2110      	movs	r1, #16
{
    5128:	4605      	mov	r5, r0
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    512a:	f7ff feef 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour() == false)
    512e:	0783      	lsls	r3, r0, #30
    5130:	d500      	bpl.n	5134 <RV3028::set12Hour()+0x10>
}
    5132:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t hour = BCDtoDEC(readRegister(RV3028_HOURS)); //Get the current hour in the RTC
    5134:	2102      	movs	r1, #2
    5136:	4628      	mov	r0, r5
    5138:	f7ff fee8 	bl	4f0c <RV3028::readRegister(unsigned char)>
    513c:	4603      	mov	r3, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    513e:	2110      	movs	r1, #16
    5140:	4628      	mov	r0, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    5142:	091a      	lsrs	r2, r3, #4
    5144:	f003 040f 	and.w	r4, r3, #15
    5148:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    514c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
		uint8_t setting = readRegister(RV3028_CTRL2);
    5150:	f7ff fedc 	bl	4f0c <RV3028::readRegister(unsigned char)>
    5154:	4602      	mov	r2, r0
	return ((val / 0x10) * 10) + (val % 0x10);
    5156:	b2e4      	uxtb	r4, r4
		writeRegister(RV3028_CTRL2, setting);
    5158:	2110      	movs	r1, #16
		setting |= (1 << CTRL2_12_24);
    515a:	f042 0202 	orr.w	r2, r2, #2
		writeRegister(RV3028_CTRL2, setting);
    515e:	4628      	mov	r0, r5
    5160:	b2d2      	uxtb	r2, r2
    5162:	f7ff ffc1 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 0)
    5166:	b1bc      	cbz	r4, 5198 <RV3028::set12Hour()+0x74>
		else if (hour == 12)
    5168:	2c0c      	cmp	r4, #12
    516a:	d01c      	beq.n	51a6 <RV3028::set12Hour()+0x82>
		else if (hour > 12)
    516c:	d91d      	bls.n	51aa <RV3028::set12Hour()+0x86>
			hour -= 12;
    516e:	3c0c      	subs	r4, #12
	return ((val / 10) * 0x10) + (val % 10);
    5170:	4b14      	ldr	r3, [pc, #80]	; (51c4 <RV3028::set12Hour()+0xa0>)
			hour -= 12;
    5172:	b2e4      	uxtb	r4, r4
	return ((val / 10) * 0x10) + (val % 10);
    5174:	fba3 2304 	umull	r2, r3, r3, r4
    5178:	08db      	lsrs	r3, r3, #3
    517a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    517e:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    5182:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    5186:	f042 0220 	orr.w	r2, r2, #32
    518a:	b2d2      	uxtb	r2, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    518c:	4628      	mov	r0, r5
    518e:	2102      	movs	r1, #2
}
    5190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5194:	f7ff bfa8 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5198:	4628      	mov	r0, r5
	return ((val / 10) * 0x10) + (val % 10);
    519a:	2212      	movs	r2, #18
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    519c:	2102      	movs	r1, #2
}
    519e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    51a2:	f7ff bfa1 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    51a6:	2232      	movs	r2, #50	; 0x32
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    51a8:	e7f0      	b.n	518c <RV3028::set12Hour()+0x68>
	return ((val / 10) * 0x10) + (val % 10);
    51aa:	4b06      	ldr	r3, [pc, #24]	; (51c4 <RV3028::set12Hour()+0xa0>)
    51ac:	fba3 2304 	umull	r2, r3, r3, r4
    51b0:	08db      	lsrs	r3, r3, #3
    51b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    51b6:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    51ba:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    51be:	b2d2      	uxtb	r2, r2
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    51c0:	e7e4      	b.n	518c <RV3028::set12Hour()+0x68>
    51c2:	bf00      	nop
    51c4:	cccccccd 	.word	0xcccccccd

000051c8 <RV3028::set24Hour() [clone .part.0]>:
void RV3028::set24Hour()
    51c8:	b538      	push	{r3, r4, r5, lr}
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    51ca:	2102      	movs	r1, #2
void RV3028::set24Hour()
    51cc:	4605      	mov	r5, r0
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    51ce:	f7ff fe9d 	bl	4f0c <RV3028::readRegister(unsigned char)>
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    51d2:	f010 0f20 	tst.w	r0, #32
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    51d6:	4604      	mov	r4, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    51d8:	f04f 0110 	mov.w	r1, #16
    51dc:	4628      	mov	r0, r5
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    51de:	d028      	beq.n	5232 <RV3028::set24Hour() [clone .part.0]+0x6a>
		uint8_t setting = readRegister(RV3028_CTRL2);
    51e0:	f7ff fe94 	bl	4f0c <RV3028::readRegister(unsigned char)>
    51e4:	4602      	mov	r2, r0
		writeRegister(RV3028_CTRL2, setting);
    51e6:	2110      	movs	r1, #16
    51e8:	4628      	mov	r0, r5
    51ea:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    51ee:	f7ff ff7b 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    51f2:	0923      	lsrs	r3, r4, #4
    51f4:	f004 040f 	and.w	r4, r4, #15
    51f8:	f003 030d 	and.w	r3, r3, #13
    51fc:	340c      	adds	r4, #12
    51fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		if (pm == true) hour += 12; //2PM becomes 14
    5202:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    5206:	b2e4      	uxtb	r4, r4
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    5208:	2c0c      	cmp	r4, #12
    520a:	d025      	beq.n	5258 <RV3028::set24Hour() [clone .part.0]+0x90>
		if (hour == 24) hour = 12; //12PM becomes 24, but should really be 12
    520c:	2c18      	cmp	r4, #24
    520e:	d02a      	beq.n	5266 <RV3028::set24Hour() [clone .part.0]+0x9e>
	return ((val / 10) * 0x10) + (val % 10);
    5210:	4b18      	ldr	r3, [pc, #96]	; (5274 <RV3028::set24Hour() [clone .part.0]+0xac>)
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5212:	4628      	mov	r0, r5
    5214:	2102      	movs	r1, #2
	return ((val / 10) * 0x10) + (val % 10);
    5216:	fba3 2304 	umull	r2, r3, r3, r4
    521a:	08db      	lsrs	r3, r3, #3
    521c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5220:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
    5224:	eb02 1203 	add.w	r2, r2, r3, lsl #4
}
    5228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ((val / 10) * 0x10) + (val % 10);
    522c:	b2d2      	uxtb	r2, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    522e:	f7ff bf5b 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
		uint8_t setting = readRegister(RV3028_CTRL2);
    5232:	f7ff fe6b 	bl	4f0c <RV3028::readRegister(unsigned char)>
    5236:	4602      	mov	r2, r0
		writeRegister(RV3028_CTRL2, setting);
    5238:	2110      	movs	r1, #16
    523a:	4628      	mov	r0, r5
    523c:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    5240:	f7ff ff52 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    5244:	0923      	lsrs	r3, r4, #4
    5246:	f004 040f 	and.w	r4, r4, #15
    524a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    524e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    5252:	b2e4      	uxtb	r4, r4
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    5254:	2c0c      	cmp	r4, #12
    5256:	d1d9      	bne.n	520c <RV3028::set24Hour() [clone .part.0]+0x44>
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5258:	4628      	mov	r0, r5
    525a:	2200      	movs	r2, #0
    525c:	2102      	movs	r1, #2
}
    525e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5262:	f7ff bf41 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5266:	4628      	mov	r0, r5
    5268:	2212      	movs	r2, #18
    526a:	2102      	movs	r1, #2
}
    526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    5270:	f7ff bf3a 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5274:	cccccccd 	.word	0xcccccccd

00005278 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
{
    5278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527c:	b085      	sub	sp, #20
    527e:	4604      	mov	r4, r0
    5280:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    5284:	f89d e040 	ldrb.w	lr, [sp, #64]	; 0x40
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    5288:	3530      	adds	r5, #48	; 0x30
{
    528a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
    528e:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    5292:	b2ed      	uxtb	r5, r5
{
    5294:	f8cd e004 	str.w	lr, [sp, #4]
    5298:	9700      	str	r7, [sp, #0]
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    529a:	9502      	str	r5, [sp, #8]
	return ((val / 10) * 0x10) + (val % 10);
    529c:	4d56      	ldr	r5, [pc, #344]	; (53f8 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x180>)
    529e:	fba5 6901 	umull	r6, r9, r5, r1
    52a2:	fba5 6802 	umull	r6, r8, r5, r2
    52a6:	fba5 6703 	umull	r6, r7, r5, r3
    52aa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
    52ae:	fba5 e60c 	umull	lr, r6, r5, ip
    52b2:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    52b6:	08ff      	lsrs	r7, r7, #3
    52b8:	08f6      	lsrs	r6, r6, #3
    52ba:	9603      	str	r6, [sp, #12]
    52bc:	9e00      	ldr	r6, [sp, #0]
    52be:	fba5 ae06 	umull	sl, lr, r5, r6
    52c2:	9e01      	ldr	r6, [sp, #4]
    52c4:	fba5 ba06 	umull	fp, sl, r5, r6
    52c8:	9e02      	ldr	r6, [sp, #8]
    52ca:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    52ce:	fba5 5b06 	umull	r5, fp, r5, r6
    52d2:	ea4f 0ada 	mov.w	sl, sl, lsr #3
    52d6:	ea4f 05db 	mov.w	r5, fp, lsr #3
    52da:	eb09 0b89 	add.w	fp, r9, r9, lsl #2
    52de:	eba1 014b 	sub.w	r1, r1, fp, lsl #1
    52e2:	eb01 1109 	add.w	r1, r1, r9, lsl #4
	_time[TIME_SECONDS] = DECtoBCD(sec);
    52e6:	7001      	strb	r1, [r0, #0]
	return ((val / 10) * 0x10) + (val % 10);
    52e8:	eb08 0188 	add.w	r1, r8, r8, lsl #2
    52ec:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    52f0:	2110      	movs	r1, #16
	return ((val / 10) * 0x10) + (val % 10);
    52f2:	eb02 1208 	add.w	r2, r2, r8, lsl #4
	_time[TIME_MINUTES] = DECtoBCD(min);
    52f6:	7042      	strb	r2, [r0, #1]
	return ((val / 10) * 0x10) + (val % 10);
    52f8:	eb07 0287 	add.w	r2, r7, r7, lsl #2
    52fc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    5300:	9a03      	ldr	r2, [sp, #12]
    5302:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    5306:	9f00      	ldr	r7, [sp, #0]
	_time[TIME_HOURS] = DECtoBCD(hour);
    5308:	7083      	strb	r3, [r0, #2]
	return ((val / 10) * 0x10) + (val % 10);
    530a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    530e:	ebac 0c43 	sub.w	ip, ip, r3, lsl #1
    5312:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
    5316:	eb0c 1c02 	add.w	ip, ip, r2, lsl #4
    531a:	9a01      	ldr	r2, [sp, #4]
    531c:	eba7 0343 	sub.w	r3, r7, r3, lsl #1
	_time[TIME_WEEKDAY] = DECtoBCD(weekday);
    5320:	f880 c003 	strb.w	ip, [r0, #3]
	return ((val / 10) * 0x10) + (val % 10);
    5324:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	_time[TIME_DATE] = DECtoBCD(date);
    5328:	7103      	strb	r3, [r0, #4]
	return ((val / 10) * 0x10) + (val % 10);
    532a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    532e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
    5332:	eb03 130a 	add.w	r3, r3, sl, lsl #4
	_time[TIME_MONTH] = DECtoBCD(month);
    5336:	7143      	strb	r3, [r0, #5]
	return ((val / 10) * 0x10) + (val % 10);
    5338:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    533c:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    5340:	eb03 1305 	add.w	r3, r3, r5, lsl #4
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    5344:	7183      	strb	r3, [r0, #6]
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5346:	f7ff fde1 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour())
    534a:	f010 0102 	ands.w	r1, r0, #2
    534e:	d02c      	beq.n	53aa <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x132>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5350:	2110      	movs	r1, #16
    5352:	4620      	mov	r0, r4
    5354:	f7ff fdda 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    5358:	0783      	lsls	r3, r0, #30
    535a:	d448      	bmi.n	53ee <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x176>
	_i2cPort->beginTransmission(RV3028_ADDR);
    535c:	68a3      	ldr	r3, [r4, #8]
		transmitting = 1;
    535e:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    5360:	21a4      	movs	r1, #164	; 0xa4
    5362:	1e65      	subs	r5, r4, #1
		transmitting = 1;
    5364:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    5368:	1da6      	adds	r6, r4, #6
		txBuffer[0] = (address << 1);
    536a:	f883 10a5 	strb.w	r1, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    536e:	2100      	movs	r1, #0
		txBufferLength = 1;
    5370:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
    5374:	68a0      	ldr	r0, [r4, #8]
    5376:	6803      	ldr	r3, [r0, #0]
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	4798      	blx	r3
		_i2cPort->write(values[i]);
    537c:	68a0      	ldr	r0, [r4, #8]
    537e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    5382:	6803      	ldr	r3, [r0, #0]
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    5388:	42ae      	cmp	r6, r5
    538a:	d1f7      	bne.n	537c <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x104>
		return endTransmission(1);
    538c:	2101      	movs	r1, #1
    538e:	68a0      	ldr	r0, [r4, #8]
    5390:	f007 feec 	bl	d16c <TwoWire::endTransmission(unsigned char)>
    5394:	4603      	mov	r3, r0
		set12Hour();
    5396:	4620      	mov	r0, r4
	}

	if (_i2cPort->endTransmission() != 0)
    5398:	fab3 f483 	clz	r4, r3
		set12Hour();
    539c:	f7ff fec2 	bl	5124 <RV3028::set12Hour()>
	if (_i2cPort->endTransmission() != 0)
    53a0:	0964      	lsrs	r4, r4, #5
}
    53a2:	4620      	mov	r0, r4
    53a4:	b005      	add	sp, #20
    53a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	_i2cPort->beginTransmission(RV3028_ADDR);
    53aa:	68a3      	ldr	r3, [r4, #8]
		transmitting = 1;
    53ac:	2201      	movs	r2, #1
		txBuffer[0] = (address << 1);
    53ae:	20a4      	movs	r0, #164	; 0xa4
    53b0:	1e65      	subs	r5, r4, #1
		transmitting = 1;
    53b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    53b6:	1da6      	adds	r6, r4, #6
		txBufferLength = 1;
    53b8:	f883 212f 	strb.w	r2, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    53bc:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    53c0:	68a0      	ldr	r0, [r4, #8]
    53c2:	6803      	ldr	r3, [r0, #0]
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	4798      	blx	r3
		_i2cPort->write(values[i]);
    53c8:	68a0      	ldr	r0, [r4, #8]
    53ca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    53ce:	6803      	ldr	r3, [r0, #0]
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	4798      	blx	r3
	for (uint8_t i = 0; i < len; i++)
    53d4:	42b5      	cmp	r5, r6
    53d6:	d1f7      	bne.n	53c8 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x150>
		return endTransmission(1);
    53d8:	2101      	movs	r1, #1
    53da:	68a0      	ldr	r0, [r4, #8]
    53dc:	f007 fec6 	bl	d16c <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    53e0:	fab0 f480 	clz	r4, r0
    53e4:	0964      	lsrs	r4, r4, #5
}
    53e6:	4620      	mov	r0, r4
    53e8:	b005      	add	sp, #20
    53ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53ee:	4620      	mov	r0, r4
    53f0:	f7ff feea 	bl	51c8 <RV3028::set24Hour() [clone .part.0]>
    53f4:	e7b2      	b.n	535c <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xe4>
    53f6:	bf00      	nop
    53f8:	cccccccd 	.word	0xcccccccd

000053fc <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:
{
    53fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		transmitting = 1;
    5400:	2401      	movs	r4, #1
    5402:	4690      	mov	r8, r2
    5404:	461e      	mov	r6, r3
		txBuffer[0] = (address << 1);
    5406:	22a4      	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    5408:	6883      	ldr	r3, [r0, #8]
{
    540a:	4605      	mov	r5, r0
		transmitting = 1;
    540c:	f883 4130 	strb.w	r4, [r3, #304]	; 0x130
		txBufferLength = 1;
    5410:	f883 412f 	strb.w	r4, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    5414:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
	_i2cPort->write(addr);
    5418:	6880      	ldr	r0, [r0, #8]
    541a:	6803      	ldr	r3, [r0, #0]
    541c:	681b      	ldr	r3, [r3, #0]
    541e:	4798      	blx	r3
		return endTransmission(1);
    5420:	4621      	mov	r1, r4
    5422:	68a8      	ldr	r0, [r5, #8]
    5424:	f007 fea2 	bl	d16c <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    5428:	b110      	cbz	r0, 5430 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x34>
		return (false); //Error: Sensor did not ack
    542a:	2000      	movs	r0, #0
}
    542c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return requestFrom(address, quantity, (uint8_t)1);
    5430:	4623      	mov	r3, r4
    5432:	4632      	mov	r2, r6
    5434:	2152      	movs	r1, #82	; 0x52
    5436:	68a8      	ldr	r0, [r5, #8]
    5438:	f007 ff18 	bl	d26c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	for (uint8_t i = 0; i < len; i++)
    543c:	b30e      	cbz	r6, 5482 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x86>
    543e:	3e01      	subs	r6, #1
    5440:	f108 34ff 	add.w	r4, r8, #4294967295
    5444:	4f11      	ldr	r7, [pc, #68]	; (548c <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x90>)
    5446:	fa58 f686 	uxtab	r6, r8, r6
    544a:	e00f      	b.n	546c <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x70>
		if (rxBufferIndex >= rxBufferLength) return -1;
    544c:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    5450:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    5454:	428a      	cmp	r2, r1
		return rxBuffer[rxBufferIndex++];
    5456:	f101 0201 	add.w	r2, r1, #1
    545a:	4401      	add	r1, r0
		if (rxBufferIndex >= rxBufferLength) return -1;
    545c:	d914      	bls.n	5488 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x8c>
		return rxBuffer[rxBufferIndex++];
    545e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
    5462:	7e88      	ldrb	r0, [r1, #26]
		dest[i] = _i2cPort->read();
    5464:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (uint8_t i = 0; i < len; i++)
    5468:	42b4      	cmp	r4, r6
    546a:	d00a      	beq.n	5482 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x86>
		dest[i] = _i2cPort->read();
    546c:	68a8      	ldr	r0, [r5, #8]
    546e:	6802      	ldr	r2, [r0, #0]
    5470:	6952      	ldr	r2, [r2, #20]
    5472:	42ba      	cmp	r2, r7
    5474:	d0ea      	beq.n	544c <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x50>
    5476:	4790      	blx	r2
    5478:	b2c0      	uxtb	r0, r0
    547a:	f804 0f01 	strb.w	r0, [r4, #1]!
	for (uint8_t i = 0; i < len; i++)
    547e:	42b4      	cmp	r4, r6
    5480:	d1f4      	bne.n	546c <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x70>
	return(true);
    5482:	2001      	movs	r0, #1
}
    5484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5488:	20ff      	movs	r0, #255	; 0xff
    548a:	e7eb      	b.n	5464 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x68>
    548c:	00001f65 	.word	0x00001f65

00005490 <RV3028::updateTime()>:
{
    5490:	b538      	push	{r3, r4, r5, lr}
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    5492:	2100      	movs	r1, #0
    5494:	2307      	movs	r3, #7
    5496:	4602      	mov	r2, r0
{
    5498:	4605      	mov	r5, r0
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    549a:	f7ff ffaf 	bl	53fc <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
    549e:	4604      	mov	r4, r0
    54a0:	b908      	cbnz	r0, 54a6 <RV3028::updateTime()+0x16>
}
    54a2:	4620      	mov	r0, r4
    54a4:	bd38      	pop	{r3, r4, r5, pc}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    54a6:	2110      	movs	r1, #16
    54a8:	4628      	mov	r0, r5
    54aa:	f7ff fd2f 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    54ae:	0783      	lsls	r3, r0, #30
    54b0:	d5f7      	bpl.n	54a2 <RV3028::updateTime()+0x12>
    54b2:	78ab      	ldrb	r3, [r5, #2]
}
    54b4:	4620      	mov	r0, r4
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    54b6:	f023 0320 	bic.w	r3, r3, #32
    54ba:	70ab      	strb	r3, [r5, #2]
}
    54bc:	bd38      	pop	{r3, r4, r5, pc}
    54be:	bf00      	nop

000054c0 <RV3028::getUNIX()>:
{
    54c0:	b500      	push	{lr}
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    54c2:	2304      	movs	r3, #4
{
    54c4:	b083      	sub	sp, #12
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    54c6:	211b      	movs	r1, #27
    54c8:	eb0d 0203 	add.w	r2, sp, r3
    54cc:	f7ff ff96 	bl	53fc <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    54d0:	9801      	ldr	r0, [sp, #4]
    54d2:	b003      	add	sp, #12
    54d4:	f85d fb04 	ldr.w	pc, [sp], #4

000054d8 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>:
		return (false); //Error: Sensor did not ack
	return(true);
}

bool RV3028::writeConfigEEPROM_RAMmirror(uint8_t eepromaddr, uint8_t val)
{
    54d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return systick_millis_count;
    54dc:	4d32      	ldr	r5, [pc, #200]	; (55a8 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xd0>)
    54de:	4604      	mov	r4, r0
    54e0:	4688      	mov	r8, r1
    54e2:	4691      	mov	r9, r2
    54e4:	682e      	ldr	r6, [r5, #0]
}

//True if success, false if timeout occured
bool RV3028::waitforEEPROM()
{
	unsigned long timeout = millis() + 500;
    54e6:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    54ea:	e002      	b.n	54f2 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x1a>
    54ec:	682b      	ldr	r3, [r5, #0]
    54ee:	429e      	cmp	r6, r3
    54f0:	d905      	bls.n	54fe <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x26>
    54f2:	210e      	movs	r1, #14
    54f4:	4620      	mov	r0, r4
    54f6:	f7ff fd09 	bl	4f0c <RV3028::readRegister(unsigned char)>
    54fa:	0601      	lsls	r1, r0, #24
    54fc:	d4f6      	bmi.n	54ec <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x14>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    54fe:	210f      	movs	r1, #15
    5500:	4620      	mov	r0, r4
    5502:	f8d5 a000 	ldr.w	sl, [r5]
    5506:	f7ff fd01 	bl	4f0c <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    550a:	f040 0008 	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    550e:	210f      	movs	r1, #15
    5510:	b2c2      	uxtb	r2, r0
    5512:	4620      	mov	r0, r4
    5514:	f7ff fde8 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5518:	4607      	mov	r7, r0
    551a:	b118      	cbz	r0, 5524 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x4c>

	return millis() < timeout;
    551c:	4556      	cmp	r6, sl
    551e:	bf94      	ite	ls
    5520:	2700      	movls	r7, #0
    5522:	2701      	movhi	r7, #1
	writeRegister(eepromaddr, val);
    5524:	464a      	mov	r2, r9
    5526:	4641      	mov	r1, r8
    5528:	4620      	mov	r0, r4
    552a:	f7ff fddd 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    552e:	2200      	movs	r2, #0
    5530:	2127      	movs	r1, #39	; 0x27
    5532:	4620      	mov	r0, r4
    5534:	f7ff fdd8 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_Update);
    5538:	2211      	movs	r2, #17
    553a:	2127      	movs	r1, #39	; 0x27
    553c:	4620      	mov	r0, r4
    553e:	f7ff fdd3 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5542:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    5544:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    5548:	e002      	b.n	5550 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x78>
    554a:	682b      	ldr	r3, [r5, #0]
    554c:	429e      	cmp	r6, r3
    554e:	d905      	bls.n	555c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x84>
    5550:	210e      	movs	r1, #14
    5552:	4620      	mov	r0, r4
    5554:	f7ff fcda 	bl	4f0c <RV3028::readRegister(unsigned char)>
    5558:	0602      	lsls	r2, r0, #24
    555a:	d4f6      	bmi.n	554a <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0x72>
    555c:	682b      	ldr	r3, [r5, #0]
	ctrl1 = readRegister(RV3028_CTRL1);
    555e:	210f      	movs	r1, #15
    5560:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    5562:	429e      	cmp	r6, r3
    5564:	bf98      	it	ls
    5566:	2700      	movls	r7, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    5568:	f7ff fcd0 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    556c:	1e02      	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    556e:	f04f 010f 	mov.w	r1, #15
    5572:	4620      	mov	r0, r4
    5574:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
	if (ctrl1 == 0x00)success = false;
    5578:	bf08      	it	eq
    557a:	2700      	moveq	r7, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    557c:	f7ff fdb4 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5580:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    5582:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    5586:	e002      	b.n	558e <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xb6>
    5588:	682b      	ldr	r3, [r5, #0]
    558a:	429e      	cmp	r6, r3
    558c:	d905      	bls.n	559a <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xc2>
    558e:	210e      	movs	r1, #14
    5590:	4620      	mov	r0, r4
    5592:	f7ff fcbb 	bl	4f0c <RV3028::readRegister(unsigned char)>
    5596:	0603      	lsls	r3, r0, #24
    5598:	d4f6      	bmi.n	5588 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)+0xb0>
    559a:	682b      	ldr	r3, [r5, #0]
}
    559c:	429e      	cmp	r6, r3
    559e:	bf8c      	ite	hi
    55a0:	4638      	movhi	r0, r7
    55a2:	2000      	movls	r0, #0
    55a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55a8:	20019b88 	.word	0x20019b88

000055ac <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>:
{
    55ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    55b0:	4d3f      	ldr	r5, [pc, #252]	; (56b0 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x104>)
    55b2:	4604      	mov	r4, r0
    55b4:	4688      	mov	r8, r1
    55b6:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    55b8:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    55bc:	e002      	b.n	55c4 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x18>
    55be:	682b      	ldr	r3, [r5, #0]
    55c0:	429e      	cmp	r6, r3
    55c2:	d905      	bls.n	55d0 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x24>
    55c4:	210e      	movs	r1, #14
    55c6:	4620      	mov	r0, r4
    55c8:	f7ff fca0 	bl	4f0c <RV3028::readRegister(unsigned char)>
    55cc:	0601      	lsls	r1, r0, #24
    55ce:	d4f6      	bmi.n	55be <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x12>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    55d0:	210f      	movs	r1, #15
    55d2:	4620      	mov	r0, r4
    55d4:	f8d5 9000 	ldr.w	r9, [r5]
    55d8:	f7ff fc98 	bl	4f0c <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    55dc:	f040 0008 	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    55e0:	210f      	movs	r1, #15
    55e2:	b2c2      	uxtb	r2, r0
    55e4:	4620      	mov	r0, r4
    55e6:	f7ff fd7f 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    55ea:	4607      	mov	r7, r0
    55ec:	b118      	cbz	r0, 55f6 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x4a>
	return millis() < timeout;
    55ee:	454e      	cmp	r6, r9
    55f0:	bf94      	ite	ls
    55f2:	2700      	movls	r7, #0
    55f4:	2701      	movhi	r7, #1
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    55f6:	4642      	mov	r2, r8
    55f8:	2125      	movs	r1, #37	; 0x25
    55fa:	4620      	mov	r0, r4
    55fc:	f7ff fd74 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    5600:	2200      	movs	r2, #0
    5602:	2127      	movs	r1, #39	; 0x27
    5604:	4620      	mov	r0, r4
    5606:	f7ff fd6f 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_ReadSingle);
    560a:	2222      	movs	r2, #34	; 0x22
    560c:	2127      	movs	r1, #39	; 0x27
    560e:	4620      	mov	r0, r4
    5610:	f7ff fd6a 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
    5614:	682e      	ldr	r6, [r5, #0]
	unsigned long timeout = millis() + 500;
    5616:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    561a:	e002      	b.n	5622 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x76>
    561c:	682b      	ldr	r3, [r5, #0]
    561e:	429e      	cmp	r6, r3
    5620:	d905      	bls.n	562e <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x82>
    5622:	210e      	movs	r1, #14
    5624:	4620      	mov	r0, r4
    5626:	f7ff fc71 	bl	4f0c <RV3028::readRegister(unsigned char)>
    562a:	0602      	lsls	r2, r0, #24
    562c:	d4f6      	bmi.n	561c <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x70>
    562e:	682b      	ldr	r3, [r5, #0]
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    5630:	2126      	movs	r1, #38	; 0x26
    5632:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    5634:	429e      	cmp	r6, r3
    5636:	bf98      	it	ls
    5638:	2700      	movls	r7, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    563a:	f7ff fc67 	bl	4f0c <RV3028::readRegister(unsigned char)>
    563e:	682e      	ldr	r6, [r5, #0]
    5640:	4680      	mov	r8, r0
	unsigned long timeout = millis() + 500;
    5642:	f506 76fa 	add.w	r6, r6, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    5646:	e002      	b.n	564e <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xa2>
    5648:	682b      	ldr	r3, [r5, #0]
    564a:	429e      	cmp	r6, r3
    564c:	d905      	bls.n	565a <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xae>
    564e:	210e      	movs	r1, #14
    5650:	4620      	mov	r0, r4
    5652:	f7ff fc5b 	bl	4f0c <RV3028::readRegister(unsigned char)>
    5656:	0603      	lsls	r3, r0, #24
    5658:	d4f6      	bmi.n	5648 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0x9c>
    565a:	682b      	ldr	r3, [r5, #0]
	ctrl1 = readRegister(RV3028_CTRL1);
    565c:	210f      	movs	r1, #15
    565e:	4620      	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    5660:	429e      	cmp	r6, r3
    5662:	d90f      	bls.n	5684 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xd8>
	ctrl1 = readRegister(RV3028_CTRL1);
    5664:	f7ff fc52 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    5668:	b178      	cbz	r0, 568a <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xde>
	writeRegister(RV3028_CTRL1, ctrl1);
    566a:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
    566e:	210f      	movs	r1, #15
    5670:	4620      	mov	r0, r4
    5672:	f7ff fd39 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    5676:	2f00      	cmp	r7, #0
    5678:	bf08      	it	eq
    567a:	f04f 08ff 	moveq.w	r8, #255	; 0xff
}
    567e:	4640      	mov	r0, r8
    5680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ctrl1 = readRegister(RV3028_CTRL1);
    5684:	f7ff fc42 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    5688:	b948      	cbnz	r0, 569e <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xf2>
	writeRegister(RV3028_CTRL1, ctrl1);
    568a:	2200      	movs	r2, #0
    568c:	210f      	movs	r1, #15
    568e:	4620      	mov	r0, r4
	if (!success) return 0xFF;
    5690:	f04f 08ff 	mov.w	r8, #255	; 0xff
	writeRegister(RV3028_CTRL1, ctrl1);
    5694:	f7ff fd28 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
}
    5698:	4640      	mov	r0, r8
    569a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	writeRegister(RV3028_CTRL1, ctrl1);
    569e:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
    56a2:	210f      	movs	r1, #15
    56a4:	4620      	mov	r0, r4
	if (!success) return 0xFF;
    56a6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	writeRegister(RV3028_CTRL1, ctrl1);
    56aa:	f7ff fd1d 	bl	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    56ae:	e7f3      	b.n	5698 <RV3028::readConfigEEPROM_RAMmirror(unsigned char)+0xec>
    56b0:	20019b88 	.word	0x20019b88

000056b4 <RV3028::begin(TwoWire&, bool, bool, bool)>:
{
    56b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56b6:	4616      	mov	r6, r2
    56b8:	4604      	mov	r4, r0
	_i2cPort = &wirePort;
    56ba:	6081      	str	r1, [r0, #8]
	delay(1);
    56bc:	2001      	movs	r0, #1
{
    56be:	461d      	mov	r5, r3
    56c0:	f89d 7018 	ldrb.w	r7, [sp, #24]
	delay(1);
    56c4:	f008 fb22 	bl	dd0c <delay>
	if (set_24Hour) { set24Hour(); delay(1); }
    56c8:	bb36      	cbnz	r6, 5718 <RV3028::begin(TwoWire&, bool, bool, bool)+0x64>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    56ca:	b9b5      	cbnz	r5, 56fa <RV3028::begin(TwoWire&, bool, bool, bool)+0x46>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    56cc:	b177      	cbz	r7, 56ec <RV3028::begin(TwoWire&, bool, bool, bool)+0x38>
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    56ce:	2137      	movs	r1, #55	; 0x37
    56d0:	4620      	mov	r0, r4
    56d2:	f7ff ff6b 	bl	55ac <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
	if (EEPROMBackup == 0xFF) success = false;
    56d6:	28ff      	cmp	r0, #255	; 0xff
    56d8:	d02a      	beq.n	5730 <RV3028::begin(TwoWire&, bool, bool, bool)+0x7c>
	EEPROMBackup &= EEPROMBackup_BSM_CLEAR;		//Clear BSM Bits of EEPROM Backup Register
    56da:	f000 02f3 	and.w	r2, r0, #243	; 0xf3
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    56de:	2137      	movs	r1, #55	; 0x37
    56e0:	4620      	mov	r0, r4
    56e2:	f042 021c 	orr.w	r2, r2, #28
    56e6:	f7ff fef7 	bl	54d8 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
    56ea:	b330      	cbz	r0, 573a <RV3028::begin(TwoWire&, bool, bool, bool)+0x86>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    56ec:	4620      	mov	r0, r4
    56ee:	2200      	movs	r2, #0
    56f0:	210e      	movs	r1, #14
}
    56f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    56f6:	f7ff bcf7 	b.w	50e8 <RV3028::writeRegister(unsigned char, unsigned char)>
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    56fa:	2137      	movs	r1, #55	; 0x37
    56fc:	4620      	mov	r0, r4
    56fe:	f7ff ff55 	bl	55ac <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
    5702:	4602      	mov	r2, r0
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    5704:	2137      	movs	r1, #55	; 0x37
    5706:	4620      	mov	r0, r4
    5708:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    570c:	f7ff fee4 	bl	54d8 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    5710:	2001      	movs	r0, #1
    5712:	f008 fafb 	bl	dd0c <delay>
    5716:	e7d9      	b.n	56cc <RV3028::begin(TwoWire&, bool, bool, bool)+0x18>
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    5718:	2110      	movs	r1, #16
    571a:	4620      	mov	r0, r4
    571c:	f7ff fbf6 	bl	4f0c <RV3028::readRegister(unsigned char)>
	if (is12Hour() == true)
    5720:	0783      	lsls	r3, r0, #30
    5722:	d40c      	bmi.n	573e <RV3028::begin(TwoWire&, bool, bool, bool)+0x8a>
	if (set_24Hour) { set24Hour(); delay(1); }
    5724:	2001      	movs	r0, #1
    5726:	f008 faf1 	bl	dd0c <delay>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    572a:	2d00      	cmp	r5, #0
    572c:	d0ce      	beq.n	56cc <RV3028::begin(TwoWire&, bool, bool, bool)+0x18>
    572e:	e7e4      	b.n	56fa <RV3028::begin(TwoWire&, bool, bool, bool)+0x46>
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    5730:	4602      	mov	r2, r0
    5732:	2137      	movs	r1, #55	; 0x37
    5734:	4620      	mov	r0, r4
    5736:	f7ff fecf 	bl	54d8 <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
}
    573a:	2000      	movs	r0, #0
    573c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    573e:	4620      	mov	r0, r4
    5740:	f7ff fd42 	bl	51c8 <RV3028::set24Hour() [clone .part.0]>
    5744:	e7ee      	b.n	5724 <RV3028::begin(TwoWire&, bool, bool, bool)+0x70>
    5746:	bf00      	nop

00005748 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
    5748:	6843      	ldr	r3, [r0, #4]
    574a:	2b13      	cmp	r3, #19
    574c:	dc07      	bgt.n	575e <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x16>
          sd_name[fsCount] = name;
    574e:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
    5752:	3301      	adds	r3, #1
          sd_name[fsCount] = name;
    5754:	f8cc 2008 	str.w	r2, [ip, #8]
          sdx[fsCount++] = &fs;
    5758:	6043      	str	r3, [r0, #4]
    575a:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
    575e:	4770      	bx	lr

00005760 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    5760:	2000      	movs	r0, #0
    5762:	4770      	bx	lr

00005764 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    5764:	2001      	movs	r0, #1
    5766:	4770      	bx	lr

00005768 <MTPStorage_SD::CloseIndex()>:
  bool isOpen() const {return m_fFile || m_xFile;}
    5768:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  {
    576c:	b510      	push	{r4, lr}
    576e:	4604      	mov	r4, r0
    5770:	b14b      	cbz	r3, 5786 <MTPStorage_SD::CloseIndex()+0x1e>
    if(index_.isOpen()) {index_.close();}
    5772:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    5776:	f005 f863 	bl	a840 <FsBaseFile::close()>
    index_generated = false;
    577a:	2300      	movs	r3, #0
    577c:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    5780:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  }
    5784:	bd10      	pop	{r4, pc}
    5786:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    578a:	2b00      	cmp	r3, #0
    578c:	d1f1      	bne.n	5772 <MTPStorage_SD::CloseIndex()+0xa>
    578e:	e7f4      	b.n	577a <MTPStorage_SD::CloseIndex()+0x12>

00005790 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    5790:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5794:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    5796:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    579a:	b14b      	cbz	r3, 57b0 <MTPStorage_SD::totalSize(unsigned long)+0x20>
    579c:	799a      	ldrb	r2, [r3, #6]
    579e:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    57a2:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    57a4:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    57a6:	3901      	subs	r1, #1
              *(uint64_t)sdx[store]->bytesPerCluster();  
    57a8:	b280      	uxth	r0, r0
    57aa:	fba0 0101 	umull	r0, r1, r0, r1
    57ae:	4770      	bx	lr
    57b0:	f8d2 0484 	ldr.w	r0, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    57b4:	b130      	cbz	r0, 57c4 <MTPStorage_SD::totalSize(unsigned long)+0x34>
    57b6:	f8d0 1430 	ldr.w	r1, [r0, #1072]	; 0x430
    57ba:	f8d0 043c 	ldr.w	r0, [r0, #1084]	; 0x43c
    57be:	fba1 0100 	umull	r0, r1, r1, r0
    57c2:	4770      	bx	lr
    57c4:	4601      	mov	r1, r0
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    57c6:	4770      	bx	lr

000057c8 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
    57c8:	b538      	push	{r3, r4, r5, lr}
    57ca:	210a      	movs	r1, #10
    57cc:	4604      	mov	r4, r0
    57ce:	480a      	ldr	r0, [pc, #40]	; (57f8 <dbgPrint(unsigned short)+0x30>)
    57d0:	f00a fb20 	bl	fe14 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    57d4:	4d09      	ldr	r5, [pc, #36]	; (57fc <dbgPrint(unsigned short)+0x34>)
    57d6:	210b      	movs	r1, #11
    57d8:	4809      	ldr	r0, [pc, #36]	; (5800 <dbgPrint(unsigned short)+0x38>)
    57da:	f00a fb1b 	bl	fe14 <usb_serial_write>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    57de:	202e      	movs	r0, #46	; 0x2e
    57e0:	f00a fb02 	bl	fde8 <usb_serial_putchar>
    57e4:	4621      	mov	r1, r4
    57e6:	4628      	mov	r0, r5
    57e8:	f007 ff80 	bl	d6ec <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    57ec:	4628      	mov	r0, r5
  }
    57ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    57f2:	f007 bf87 	b.w	d704 <Print::println()>
    57f6:	bf00      	nop
    57f8:	20000a50 	.word	0x20000a50
    57fc:	20008b94 	.word	0x20008b94
    5800:	20000a5c 	.word	0x20000a5c

00005804 <MTPStorage_SD::write(char const*, unsigned long)>:
    return m_fFile ? m_fFile->write(buf, count) :
    5804:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    5808:	b113      	cbz	r3, 5810 <MTPStorage_SD::write(char const*, unsigned long)+0xc>
    580a:	4618      	mov	r0, r3
    580c:	f003 be1c 	b.w	9448 <FatFile::write(void const*, unsigned int)>
    5810:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
           m_xFile ? m_xFile->write(buf, count) : 0;
    5814:	b108      	cbz	r0, 581a <MTPStorage_SD::write(char const*, unsigned long)+0x16>
    5816:	f002 bb07 	b.w	7e28 <ExFatFile::write(void const*, unsigned int)>
  }
    581a:	4770      	bx	lr

0000581c <MTPStorage_SD::OpenIndex() [clone .part.0]>:
  void MTPStorage_SD::OpenIndex() 
    581c:	b510      	push	{r4, lr}
    581e:	4604      	mov	r4, r0
    5820:	b094      	sub	sp, #80	; 0x50
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5822:	f240 2302 	movw	r3, #514	; 0x202
    5826:	4a15      	ldr	r2, [pc, #84]	; (587c <MTPStorage_SD::OpenIndex() [clone .part.0]+0x60>)
    5828:	4668      	mov	r0, sp
    582a:	6da1      	ldr	r1, [r4, #88]	; 0x58
    582c:	f005 f922 	bl	aa74 <FsVolume::open(char const*, int)>
class Stream : public Print
    5830:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5834:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    5838:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
    583c:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
    5840:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    5844:	a904      	add	r1, sp, #16
    5846:	f004 ffa1 	bl	a78c <FsBaseFile::operator=(FsBaseFile const&)>
    584a:	4b0d      	ldr	r3, [pc, #52]	; (5880 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x64>)
  ~FsBaseFile() {close();}
    584c:	a804      	add	r0, sp, #16
    584e:	9300      	str	r3, [sp, #0]
    5850:	f004 fff6 	bl	a840 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    5854:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    5858:	b10b      	cbz	r3, 585e <MTPStorage_SD::OpenIndex() [clone .part.0]+0x42>
  }
    585a:	b014      	add	sp, #80	; 0x50
    585c:	bd10      	pop	{r4, pc}
    585e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5862:	2b00      	cmp	r3, #0
    5864:	d1f9      	bne.n	585a <MTPStorage_SD::OpenIndex() [clone .part.0]+0x3e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5866:	2117      	movs	r1, #23
    5868:	4806      	ldr	r0, [pc, #24]	; (5884 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x68>)
    586a:	f00a fad3 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    586e:	4806      	ldr	r0, [pc, #24]	; (5888 <MTPStorage_SD::OpenIndex() [clone .part.0]+0x6c>)
    5870:	b014      	add	sp, #80	; 0x50
    5872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5876:	f007 bf45 	b.w	d704 <Print::println()>
    587a:	bf00      	nop
    587c:	20000b54 	.word	0x20000b54
    5880:	20000c50 	.word	0x20000c50
    5884:	20000b64 	.word	0x20000b64
    5888:	20008b94 	.word	0x20008b94

0000588c <MTPStorage_SD::ResetIndex()>:
    588c:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
  void MTPStorage_SD::ResetIndex() {
    5890:	b510      	push	{r4, lr}
    5892:	4604      	mov	r4, r0
    5894:	b30b      	cbz	r3, 58da <MTPStorage_SD::ResetIndex()+0x4e>
    CloseIndex();
    5896:	6823      	ldr	r3, [r4, #0]
    5898:	4a16      	ldr	r2, [pc, #88]	; (58f4 <MTPStorage_SD::ResetIndex()+0x68>)
    589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    589c:	4293      	cmp	r3, r2
    589e:	d125      	bne.n	58ec <MTPStorage_SD::ResetIndex()+0x60>
    if(index_.isOpen()) {index_.close();}
    58a0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    58a4:	f004 ffcc 	bl	a840 <FsBaseFile::close()>
    index_generated = false;
    58a8:	2300      	movs	r3, #0
    58aa:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
    58ae:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    all_scanned_ = false;
    58b2:	2100      	movs	r1, #0
    open_file_ = 0xFFFFFFFEUL;
    58b4:	f06f 0201 	mvn.w	r2, #1
    58b8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    all_scanned_ = false;
    58bc:	f884 11ad 	strb.w	r1, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    58c0:	f8c4 21a4 	str.w	r2, [r4, #420]	; 0x1a4
    58c4:	b103      	cbz	r3, 58c8 <MTPStorage_SD::ResetIndex()+0x3c>
  }
    58c6:	bd10      	pop	{r4, pc}
    58c8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    58cc:	2b00      	cmp	r3, #0
    58ce:	d1fa      	bne.n	58c6 <MTPStorage_SD::ResetIndex()+0x3a>
    58d0:	4620      	mov	r0, r4
    58d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58d6:	f7ff bfa1 	b.w	581c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    58da:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    58de:	2b00      	cmp	r3, #0
    58e0:	d0f1      	beq.n	58c6 <MTPStorage_SD::ResetIndex()+0x3a>
    CloseIndex();
    58e2:	6823      	ldr	r3, [r4, #0]
    58e4:	4a03      	ldr	r2, [pc, #12]	; (58f4 <MTPStorage_SD::ResetIndex()+0x68>)
    58e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    58e8:	4293      	cmp	r3, r2
    58ea:	d0d9      	beq.n	58a0 <MTPStorage_SD::ResetIndex()+0x14>
    58ec:	4620      	mov	r0, r4
    58ee:	4798      	blx	r3
    58f0:	e7df      	b.n	58b2 <MTPStorage_SD::ResetIndex()+0x26>
    58f2:	bf00      	nop
    58f4:	00005769 	.word	0x00005769

000058f8 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    58f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58fc:	eb00 0681 	add.w	r6, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    5900:	6db2      	ldr	r2, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    5902:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5906:	2b00      	cmp	r3, #0
    5908:	f000 80bc 	beq.w	5a84 <MTPStorage_SD::usedSize(unsigned long)+0x18c>
    590c:	69d9      	ldr	r1, [r3, #28]
    590e:	3901      	subs	r1, #1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5910:	2300      	movs	r3, #0
    5912:	220a      	movs	r2, #10
    5914:	486a      	ldr	r0, [pc, #424]	; (5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    5916:	f007 ff1f 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    591a:	4869      	ldr	r0, [pc, #420]	; (5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    591c:	f007 fef2 	bl	d704 <Print::println()>
        Serial.println(sdx[store]->freeClusterCount());
    5920:	6db5      	ldr	r5, [r6, #88]	; 0x58
  uint32_t freeClusterCount() {
    5922:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5926:	b120      	cbz	r0, 5932 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    5928:	6803      	ldr	r3, [r0, #0]
    592a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    592c:	4798      	blx	r3
    592e:	2800      	cmp	r0, #0
    5930:	d16c      	bne.n	5a0c <MTPStorage_SD::usedSize(unsigned long)+0x114>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5932:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    5934:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    5938:	2800      	cmp	r0, #0
    593a:	f000 808e 	beq.w	5a5a <MTPStorage_SD::usedSize(unsigned long)+0x162>
    593e:	f004 fd87 	bl	a450 <FatPartition::freeClusterCount()>
    5942:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5944:	2f00      	cmp	r7, #0
    5946:	f040 8091 	bne.w	5a6c <MTPStorage_SD::usedSize(unsigned long)+0x174>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    594a:	2300      	movs	r3, #0
    594c:	220a      	movs	r2, #10
    594e:	4621      	mov	r1, r4
    5950:	485b      	ldr	r0, [pc, #364]	; (5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    5952:	f007 ff01 	bl	d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    5956:	485a      	ldr	r0, [pc, #360]	; (5ac0 <MTPStorage_SD::usedSize(unsigned long)+0x1c8>)
    5958:	f007 fed4 	bl	d704 <Print::println()>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    595c:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->clusterCount() :
    595e:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    5962:	2b00      	cmp	r3, #0
    5964:	f000 8096 	beq.w	5a94 <MTPStorage_SD::usedSize(unsigned long)+0x19c>
    5968:	69dc      	ldr	r4, [r3, #28]
    596a:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    596e:	3c01      	subs	r4, #1
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5970:	2800      	cmp	r0, #0
    5972:	d05f      	beq.n	5a34 <MTPStorage_SD::usedSize(unsigned long)+0x13c>
    5974:	6803      	ldr	r3, [r0, #0]
    5976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    5978:	4798      	blx	r3
    597a:	bb38      	cbnz	r0, 59cc <MTPStorage_SD::usedSize(unsigned long)+0xd4>
    return m_fVol ? m_fVol->freeClusterCount() :
    597c:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5980:	f04f 0800 	mov.w	r8, #0
    5984:	2800      	cmp	r0, #0
    5986:	d139      	bne.n	59fc <MTPStorage_SD::usedSize(unsigned long)+0x104>
    5988:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    598c:	b11f      	cbz	r7, 5996 <MTPStorage_SD::usedSize(unsigned long)+0x9e>
    598e:	4638      	mov	r0, r7
    5990:	f002 fe28 	bl	85e4 <ExFatPartition::freeClusterCount()>
    5994:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5996:	f1b8 0f00 	cmp.w	r8, #0
    599a:	d035      	beq.n	5a08 <MTPStorage_SD::usedSize(unsigned long)+0x110>
    599c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    59a0:	b128      	cbz	r0, 59ae <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    59a2:	6803      	ldr	r3, [r0, #0]
    59a4:	2100      	movs	r1, #0
    59a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    59a8:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    59aa:	b100      	cbz	r0, 59ae <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    59ac:	1be4      	subs	r4, r4, r7
    59ae:	6db5      	ldr	r5, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->bytesPerCluster() :
    59b0:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
    59b4:	2b00      	cmp	r3, #0
    59b6:	d147      	bne.n	5a48 <MTPStorage_SD::usedSize(unsigned long)+0x150>
    59b8:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    59bc:	2800      	cmp	r0, #0
    59be:	d07a      	beq.n	5ab6 <MTPStorage_SD::usedSize(unsigned long)+0x1be>
              *(uint64_t)sdx[store]->bytesPerCluster();  
    59c0:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    59c4:	fba4 0101 	umull	r0, r1, r4, r1
    59c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59cc:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    59d0:	2800      	cmp	r0, #0
    59d2:	d0ec      	beq.n	59ae <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    59d4:	6803      	ldr	r3, [r0, #0]
    59d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    59d8:	4798      	blx	r3
    59da:	2800      	cmp	r0, #0
    59dc:	d1ce      	bne.n	597c <MTPStorage_SD::usedSize(unsigned long)+0x84>
    59de:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    59e2:	2800      	cmp	r0, #0
    59e4:	d0e3      	beq.n	59ae <MTPStorage_SD::usedSize(unsigned long)+0xb6>
      return m_card->setDedicatedSpi(value);
    59e6:	6803      	ldr	r3, [r0, #0]
    59e8:	2101      	movs	r1, #1
    59ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    59ec:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    59ee:	4680      	mov	r8, r0
    59f0:	2800      	cmp	r0, #0
    59f2:	d0dc      	beq.n	59ae <MTPStorage_SD::usedSize(unsigned long)+0xb6>
    return m_fVol ? m_fVol->freeClusterCount() :
    59f4:	f8d5 0480 	ldr.w	r0, [r5, #1152]	; 0x480
    59f8:	2800      	cmp	r0, #0
    59fa:	d0c5      	beq.n	5988 <MTPStorage_SD::usedSize(unsigned long)+0x90>
    59fc:	f004 fd28 	bl	a450 <FatPartition::freeClusterCount()>
    5a00:	4607      	mov	r7, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5a02:	f1b8 0f00 	cmp.w	r8, #0
    5a06:	d1c9      	bne.n	599c <MTPStorage_SD::usedSize(unsigned long)+0xa4>
    5a08:	6db5      	ldr	r5, [r6, #88]	; 0x58
    5a0a:	e018      	b.n	5a3e <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5a0c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    5a10:	b170      	cbz	r0, 5a30 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5a12:	6803      	ldr	r3, [r0, #0]
    5a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a16:	4798      	blx	r3
    5a18:	2800      	cmp	r0, #0
    5a1a:	d18a      	bne.n	5932 <MTPStorage_SD::usedSize(unsigned long)+0x3a>
    5a1c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a20:	b130      	cbz	r0, 5a30 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5a22:	6803      	ldr	r3, [r0, #0]
    5a24:	2101      	movs	r1, #1
    5a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a28:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    5a2a:	4607      	mov	r7, r0
    5a2c:	2800      	cmp	r0, #0
    5a2e:	d181      	bne.n	5934 <MTPStorage_SD::usedSize(unsigned long)+0x3c>
      return 0;
    5a30:	2400      	movs	r4, #0
    5a32:	e78a      	b.n	594a <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5a34:	4618      	mov	r0, r3
    5a36:	f004 fd0b 	bl	a450 <FatPartition::freeClusterCount()>
    5a3a:	6db5      	ldr	r5, [r6, #88]	; 0x58
    5a3c:	4607      	mov	r7, r0
    return m_fVol ? m_fVol->bytesPerCluster() :
    5a3e:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    5a42:	1be4      	subs	r4, r4, r7
    5a44:	2b00      	cmp	r3, #0
    5a46:	d0b7      	beq.n	59b8 <MTPStorage_SD::usedSize(unsigned long)+0xc0>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    5a48:	799b      	ldrb	r3, [r3, #6]
    5a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
    5a4e:	4099      	lsls	r1, r3
              *(uint64_t)sdx[store]->bytesPerCluster();  
    5a50:	b289      	uxth	r1, r1
    5a52:	fba1 0104 	umull	r0, r1, r1, r4
    5a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a5a:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5a5e:	b328      	cbz	r0, 5aac <MTPStorage_SD::usedSize(unsigned long)+0x1b4>
    5a60:	f002 fdc0 	bl	85e4 <ExFatPartition::freeClusterCount()>
    5a64:	4604      	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    5a66:	2f00      	cmp	r7, #0
    5a68:	f43f af6f 	beq.w	594a <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5a6c:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
    5a70:	2800      	cmp	r0, #0
    5a72:	d0dd      	beq.n	5a30 <MTPStorage_SD::usedSize(unsigned long)+0x138>
      return m_card->setDedicatedSpi(value);
    5a74:	6803      	ldr	r3, [r0, #0]
    5a76:	2100      	movs	r1, #0
    5a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5a7a:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    5a7c:	2800      	cmp	r0, #0
    5a7e:	f47f af64 	bne.w	594a <MTPStorage_SD::usedSize(unsigned long)+0x52>
    5a82:	e7d5      	b.n	5a30 <MTPStorage_SD::usedSize(unsigned long)+0x138>
    5a84:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
    5a88:	2900      	cmp	r1, #0
    5a8a:	f43f af41 	beq.w	5910 <MTPStorage_SD::usedSize(unsigned long)+0x18>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    5a8e:	f8d1 1430 	ldr.w	r1, [r1, #1072]	; 0x430
    5a92:	e73d      	b.n	5910 <MTPStorage_SD::usedSize(unsigned long)+0x18>
    5a94:	f8d5 7484 	ldr.w	r7, [r5, #1156]	; 0x484
  uint32_t clusterCount() const {
    5a98:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
           m_xVol ? m_xVol->clusterCount() : 0;
    5a9c:	b147      	cbz	r7, 5ab0 <MTPStorage_SD::usedSize(unsigned long)+0x1b8>
    5a9e:	f8d7 4430 	ldr.w	r4, [r7, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5aa2:	2800      	cmp	r0, #0
    5aa4:	f47f af66 	bne.w	5974 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    5aa8:	4680      	mov	r8, r0
    5aaa:	e770      	b.n	598e <MTPStorage_SD::usedSize(unsigned long)+0x96>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5aac:	4604      	mov	r4, r0
    5aae:	e749      	b.n	5944 <MTPStorage_SD::usedSize(unsigned long)+0x4c>
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    5ab0:	b118      	cbz	r0, 5aba <MTPStorage_SD::usedSize(unsigned long)+0x1c2>
           m_xVol ? m_xVol->clusterCount() : 0;
    5ab2:	463c      	mov	r4, r7
    5ab4:	e75e      	b.n	5974 <MTPStorage_SD::usedSize(unsigned long)+0x7c>
    5ab6:	4601      	mov	r1, r0
    5ab8:	e7cd      	b.n	5a56 <MTPStorage_SD::usedSize(unsigned long)+0x15e>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    5aba:	4607      	mov	r7, r0
    5abc:	4604      	mov	r4, r0
    5abe:	e7be      	b.n	5a3e <MTPStorage_SD::usedSize(unsigned long)+0x146>
    5ac0:	20008b94 	.word	0x20008b94

00005ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    5ac4:	b570      	push	{r4, r5, r6, lr}
    5ac6:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
    5aca:	b082      	sub	sp, #8
    5acc:	4604      	mov	r4, r0
    5ace:	4615      	mov	r5, r2
    5ad0:	b1de      	cbz	r6, 5b0a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x46>
    index_.seekSet((sizeof(r) * i));
    5ad2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5ad6:	0109      	lsls	r1, r1, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5ad8:	4630      	mov	r0, r6
    5ada:	f003 fb7f 	bl	91dc <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->write(buf, count) :
    5ade:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    5ae2:	b138      	cbz	r0, 5af4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x30>
    5ae4:	f44f 7288 	mov.w	r2, #272	; 0x110
    5ae8:	4629      	mov	r1, r5
  }
    5aea:	b002      	add	sp, #8
    5aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5af0:	f003 bcaa 	b.w	9448 <FatFile::write(void const*, unsigned int)>
    5af4:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->write(buf, count) : 0;
    5af8:	b310      	cbz	r0, 5b40 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x7c>
    5afa:	f44f 7288 	mov.w	r2, #272	; 0x110
    5afe:	4629      	mov	r1, r5
    5b00:	b002      	add	sp, #8
    5b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b06:	f002 b98f 	b.w	7e28 <ExFatFile::write(void const*, unsigned int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5b0a:	f8d0 60f4 	ldr.w	r6, [r0, #244]	; 0xf4
    5b0e:	b13e      	cbz	r6, 5b20 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x5c>
    index_.seekSet((sizeof(r) * i));
    5b10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5b14:	010a      	lsls	r2, r1, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5b16:	2300      	movs	r3, #0
    5b18:	4630      	mov	r0, r6
    5b1a:	f001 fb55 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    5b1e:	e7de      	b.n	5ade <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x1a>
    5b20:	9101      	str	r1, [sp, #4]
    5b22:	f7ff fe7b 	bl	581c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    5b26:	9901      	ldr	r1, [sp, #4]
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5b28:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
    5b2c:	eb01 1301 	add.w	r3, r1, r1, lsl #4
    5b30:	011a      	lsls	r2, r3, #4
    5b32:	4611      	mov	r1, r2
    5b34:	2e00      	cmp	r6, #0
    5b36:	d1cf      	bne.n	5ad8 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x14>
    5b38:	f8d4 60f4 	ldr.w	r6, [r4, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5b3c:	2e00      	cmp	r6, #0
    5b3e:	d1ea      	bne.n	5b16 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)+0x52>
  }
    5b40:	b002      	add	sp, #8
    5b42:	bd70      	pop	{r4, r5, r6, pc}

00005b44 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b48:	4605      	mov	r5, r0
    index_generated = true;
    5b4a:	2601      	movs	r6, #1
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    5b4c:	b0c5      	sub	sp, #276	; 0x114
    5b4e:	210d      	movs	r1, #13
    5b50:	482a      	ldr	r0, [pc, #168]	; (5bfc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    index_generated = true;
    5b52:	f885 61ac 	strb.w	r6, [r5, #428]	; 0x1ac
    5b56:	f00a f95d 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b5a:	4829      	ldr	r0, [pc, #164]	; (5c00 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xbc>)
    5b5c:	f007 fdd2 	bl	d704 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    5b60:	6dab      	ldr	r3, [r5, #88]	; 0x58
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    5b62:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5b66:	b3a2      	cbz	r2, 5bd2 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x8e>
    5b68:	466c      	mov	r4, sp
    5b6a:	2000      	movs	r0, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5b6c:	4611      	mov	r1, r2
    5b6e:	4633      	mov	r3, r6
    5b70:	6020      	str	r0, [r4, #0]
    5b72:	4620      	mov	r0, r4
    5b74:	4a21      	ldr	r2, [pc, #132]	; (5bfc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5b76:	f003 f895 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    5b7a:	2800      	cmp	r0, #0
    5b7c:	d13a      	bne.n	5bf4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb0>
      uint32_t sd_getFSCount(void) {return fsCount;}
    5b7e:	686b      	ldr	r3, [r5, #4]
    index_entries_ = 0;
    5b80:	2600      	movs	r6, #0
    for(int ii=0; ii<num_storage; ii++)
    5b82:	42b3      	cmp	r3, r6
    num_storage = sd_getFSCount();
    5b84:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
    index_entries_ = 0;
    5b88:	f8c5 61a8 	str.w	r6, [r5, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    5b8c:	dd1e      	ble.n	5bcc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x88>
    5b8e:	466c      	mov	r4, sp
      r.parent = 0xFFFFFFFFUL; // 
    5b90:	f04f 39ff 	mov.w	r9, #4294967295
      r.child = 0;
    5b94:	4637      	mov	r7, r6
      r.isdir = true;
    5b96:	f04f 0801 	mov.w	r8, #1
  { uint32_t new_record = index_entries_++;
    5b9a:	f8d5 11a8 	ldr.w	r1, [r5, #424]	; 0x1a8
      strcpy(r.name, "/");
    5b9e:	232f      	movs	r3, #47	; 0x2f
    WriteIndexRecord(new_record, r);
    5ba0:	4622      	mov	r2, r4
    5ba2:	4628      	mov	r0, r5
  { uint32_t new_record = index_entries_++;
    5ba4:	f101 0c01 	add.w	ip, r1, #1
      r.store = ii; // 
    5ba8:	81e6      	strh	r6, [r4, #14]
      r.parent = 0xFFFFFFFFUL; // 
    5baa:	f8c4 9000 	str.w	r9, [r4]
    for(int ii=0; ii<num_storage; ii++)
    5bae:	3601      	adds	r6, #1
  { uint32_t new_record = index_entries_++;
    5bb0:	f8c5 c1a8 	str.w	ip, [r5, #424]	; 0x1a8
      r.isdir = true;
    5bb4:	f8a4 800c 	strh.w	r8, [r4, #12]
      r.sibling = 0;
    5bb8:	e9c4 7701 	strd	r7, r7, [r4, #4]
      strcpy(r.name, "/");
    5bbc:	f8ad 3010 	strh.w	r3, [sp, #16]
    WriteIndexRecord(new_record, r);
    5bc0:	f7ff ff80 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    5bc4:	f8d5 3198 	ldr.w	r3, [r5, #408]	; 0x198
    5bc8:	429e      	cmp	r6, r3
    5bca:	dbe6      	blt.n	5b9a <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x56>
  }
    5bcc:	b045      	add	sp, #276	; 0x114
    5bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5bd2:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    5bd6:	2900      	cmp	r1, #0
    5bd8:	d0d1      	beq.n	5b7e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5bda:	466c      	mov	r4, sp
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5bdc:	4633      	mov	r3, r6
    5bde:	6322      	str	r2, [r4, #48]	; 0x30
    5be0:	4620      	mov	r0, r4
    5be2:	4a06      	ldr	r2, [pc, #24]	; (5bfc <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0xb8>)
    5be4:	f001 fdae 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5be8:	2800      	cmp	r0, #0
    5bea:	d0c8      	beq.n	5b7e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5bec:	4620      	mov	r0, r4
    5bee:	f001 fe0d 	bl	780c <ExFatFile::remove()>
    5bf2:	e7c4      	b.n	5b7e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5bf4:	4620      	mov	r0, r4
    5bf6:	f004 f8b5 	bl	9d64 <FatFile::remove()>
    5bfa:	e7c0      	b.n	5b7e <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x3a>
    5bfc:	20000b54 	.word	0x20000b54
    5c00:	20008b94 	.word	0x20008b94

00005c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    5c04:	b570      	push	{r4, r5, r6, lr}
    5c06:	460d      	mov	r5, r1
    5c08:	4614      	mov	r4, r2
    memset(&ret, 0, sizeof(ret));
    5c0a:	2100      	movs	r1, #0
    5c0c:	f44f 7288 	mov.w	r2, #272	; 0x110
  {
    5c10:	4606      	mov	r6, r0
    memset(&ret, 0, sizeof(ret));
    5c12:	f00c fc0d 	bl	12430 <memset>
    if (i > index_entries_) 
    5c16:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    5c1a:	42a3      	cmp	r3, r4
    5c1c:	d201      	bcs.n	5c22 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1e>
  }
    5c1e:	4630      	mov	r0, r6
    5c20:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5c22:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    5c26:	b1c8      	cbz	r0, 5c5c <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x58>
    index_.seekSet(sizeof(ret) * i);
    5c28:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5c2c:	0121      	lsls	r1, r4, #4
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5c2e:	f003 fad5 	bl	91dc <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    5c32:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    5c36:	b130      	cbz	r0, 5c46 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x42>
    5c38:	f44f 7288 	mov.w	r2, #272	; 0x110
    5c3c:	4631      	mov	r1, r6
    5c3e:	f003 f885 	bl	8d4c <FatFile::read(void*, unsigned int)>
  }
    5c42:	4630      	mov	r0, r6
    5c44:	bd70      	pop	{r4, r5, r6, pc}
    5c46:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->read(buf, count) : -1;
    5c4a:	2800      	cmp	r0, #0
    5c4c:	d0e7      	beq.n	5c1e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    5c4e:	f44f 7288 	mov.w	r2, #272	; 0x110
    5c52:	4631      	mov	r1, r6
    5c54:	f001 f9d2 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    5c58:	4630      	mov	r0, r6
    5c5a:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5c5c:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    5c60:	b130      	cbz	r0, 5c70 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x6c>
    index_.seekSet(sizeof(ret) * i);
    5c62:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5c66:	0122      	lsls	r2, r4, #4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5c68:	2300      	movs	r3, #0
    5c6a:	f001 faad 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    5c6e:	e7e0      	b.n	5c32 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2e>
    5c70:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    5c74:	4628      	mov	r0, r5
    5c76:	f7ff fdd1 	bl	581c <MTPStorage_SD::OpenIndex() [clone .part.0]>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5c7a:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    5c7e:	0122      	lsls	r2, r4, #4
    5c80:	4611      	mov	r1, r2
    5c82:	2800      	cmp	r0, #0
    5c84:	d1d3      	bne.n	5c2e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x2a>
    5c86:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
           m_xFile ? m_xFile->seekSet(pos) : false;
    5c8a:	2800      	cmp	r0, #0
    5c8c:	d0c7      	beq.n	5c1e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x1a>
    5c8e:	e7eb      	b.n	5c68 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x64>

00005c90 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    5c90:	b530      	push	{r4, r5, lr}
    { if (next_ == 0) return 0;
    5c92:	f8d0 51b0 	ldr.w	r5, [r0, #432]	; 0x1b0
  {
    5c96:	b0c5      	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    5c98:	b325      	cbz	r5, 5ce4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
    5c9a:	4604      	mov	r4, r0
    5c9c:	e008      	b.n	5cb0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x20>
      { next_ = r.sibling;
    5c9e:	9b02      	ldr	r3, [sp, #8]
    5ca0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    5ca4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5ca8:	b9cb      	cbnz	r3, 5cde <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x4e>
    { if (next_ == 0) return 0;
    5caa:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
    5cae:	b1cd      	cbz	r5, 5ce4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x54>
      Record r = ReadIndexRecord(ret);
    5cb0:	462a      	mov	r2, r5
    5cb2:	4621      	mov	r1, r4
    5cb4:	4668      	mov	r0, sp
    5cb6:	f7ff ffa5 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    5cba:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
    5cbe:	2b00      	cmp	r3, #0
    5cc0:	d1ed      	bne.n	5c9e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0xe>
      { next_++;
    5cc2:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    5cc6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      { next_++;
    5cca:	3201      	adds	r2, #1
        if (next_ >= index_entries_) next_ = 0;
    5ccc:	428a      	cmp	r2, r1
    5cce:	bf38      	it	cc
    5cd0:	4613      	movcc	r3, r2
    5cd2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    5cd6:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	d0e5      	beq.n	5caa <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1a>
  }
    5cde:	4628      	mov	r0, r5
    5ce0:	b045      	add	sp, #276	; 0x114
    5ce2:	bd30      	pop	{r4, r5, pc}
    { if (next_ == 0) return 0;
    5ce4:	2500      	movs	r5, #0
  }
    5ce6:	4628      	mov	r0, r5
    5ce8:	b045      	add	sp, #276	; 0x114
    5cea:	bd30      	pop	{r4, r5, pc}

00005cec <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    5cec:	b530      	push	{r4, r5, lr}
    5cee:	b0c5      	sub	sp, #276	; 0x114
    5cf0:	4615      	mov	r5, r2
    5cf2:	460a      	mov	r2, r1
    Record r = ReadIndexRecord(handle);
    5cf4:	4601      	mov	r1, r0
    5cf6:	4668      	mov	r0, sp
  {
    5cf8:	461c      	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    5cfa:	f7ff ff83 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    5cfe:	4628      	mov	r0, r5
    5d00:	a904      	add	r1, sp, #16
    5d02:	f00c fecb 	bl	12a9c <strcpy>
    *parent = r.parent;
    5d06:	9b00      	ldr	r3, [sp, #0]
    5d08:	9a48      	ldr	r2, [sp, #288]	; 0x120
    5d0a:	6013      	str	r3, [r2, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5d10:	b93b      	cbnz	r3, 5d22 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    5d12:	9a01      	ldr	r2, [sp, #4]
    5d14:	6022      	str	r2, [r4, #0]
    *store = r.store;
    5d16:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    5d1a:	9a49      	ldr	r2, [sp, #292]	; 0x124
    5d1c:	8013      	strh	r3, [r2, #0]
  }
    5d1e:	b045      	add	sp, #276	; 0x114
    5d20:	bd30      	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    5d22:	f04f 32ff 	mov.w	r2, #4294967295
    5d26:	e7f5      	b.n	5d14 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

00005d28 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    5d28:	b500      	push	{lr}
    5d2a:	b0c5      	sub	sp, #276	; 0x114
    5d2c:	460a      	mov	r2, r1
    return ReadIndexRecord(handle).child;
    5d2e:	4601      	mov	r1, r0
    5d30:	4668      	mov	r0, sp
    5d32:	f7ff ff67 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    5d36:	9801      	ldr	r0, [sp, #4]
    5d38:	b045      	add	sp, #276	; 0x114
    5d3a:	f85d fb04 	ldr.w	pc, [sp], #4
    5d3e:	bf00      	nop

00005d40 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    5d40:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
  {
    5d44:	b530      	push	{r4, r5, lr}
    5d46:	4604      	mov	r4, r0
    5d48:	b0c5      	sub	sp, #276	; 0x114
    5d4a:	b1bb      	cbz	r3, 5d7c <MTPStorage_SD::close()+0x3c>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint32_t fileSize() const {return m_fileSize;}
    5d4c:	69dd      	ldr	r5, [r3, #28]
    file_.close();
    5d4e:	f504 7084 	add.w	r0, r4, #264	; 0x108
    5d52:	f004 fd75 	bl	a840 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    5d56:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
    5d5a:	4621      	mov	r1, r4
    5d5c:	4668      	mov	r0, sp
    5d5e:	f7ff ff51 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    5d62:	466a      	mov	r2, sp
    5d64:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
    5d68:	4620      	mov	r0, r4
    r.child = size;
    5d6a:	9501      	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    5d6c:	f7ff feaa 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    5d70:	f06f 0301 	mvn.w	r3, #1
    5d74:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  }
    5d78:	b045      	add	sp, #276	; 0x114
    5d7a:	bd30      	pop	{r4, r5, pc}
    5d7c:	f8d0 5144 	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    5d80:	2d00      	cmp	r5, #0
    5d82:	d0e4      	beq.n	5d4e <MTPStorage_SD::close()+0xe>
    uint32_t size = (uint32_t) file_.size();
    5d84:	692d      	ldr	r5, [r5, #16]
    5d86:	e7e2      	b.n	5d4e <MTPStorage_SD::close()+0xe>

00005d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    5d88:	b570      	push	{r4, r5, r6, lr}
    5d8a:	b0c4      	sub	sp, #272	; 0x110
    5d8c:	4614      	mov	r4, r2
    5d8e:	4605      	mov	r5, r0
    Record tmp = ReadIndexRecord(i);
    5d90:	460a      	mov	r2, r1
    5d92:	4601      	mov	r1, r0
    5d94:	4668      	mov	r0, sp
  {
    5d96:	461e      	mov	r6, r3
    Record tmp = ReadIndexRecord(i);
    5d98:	f7ff ff34 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    5d9c:	9900      	ldr	r1, [sp, #0]
    5d9e:	1c4b      	adds	r3, r1, #1
    5da0:	d01b      	beq.n	5dda <MTPStorage_SD::ConstructFilename(int, char*, int)+0x52>
    { ConstructFilename(tmp.parent, out, len);
    5da2:	4633      	mov	r3, r6
    5da4:	4622      	mov	r2, r4
    5da6:	4628      	mov	r0, r5
    5da8:	f7ff ffee 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5dac:	4620      	mov	r0, r4
    5dae:	f00c ff27 	bl	12c00 <strlen>
    5db2:	4420      	add	r0, r4
    5db4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    5db8:	2b2f      	cmp	r3, #47	; 0x2f
    5dba:	d108      	bne.n	5dce <MTPStorage_SD::ConstructFilename(int, char*, int)+0x46>
      strlcat(out, tmp.name,len);
    5dbc:	4632      	mov	r2, r6
    5dbe:	a904      	add	r1, sp, #16
    5dc0:	4620      	mov	r0, r4
    5dc2:	f00c fb87 	bl	124d4 <strlcat>
      return tmp.store;
    5dc6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
  }
    5dca:	b044      	add	sp, #272	; 0x110
    5dcc:	bd70      	pop	{r4, r5, r6, pc}
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    5dce:	4632      	mov	r2, r6
    5dd0:	4905      	ldr	r1, [pc, #20]	; (5de8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
    5dd2:	4620      	mov	r0, r4
    5dd4:	f00c fb7e 	bl	124d4 <strlcat>
    5dd8:	e7f0      	b.n	5dbc <MTPStorage_SD::ConstructFilename(int, char*, int)+0x34>
    { strcpy(out, "/");
    5dda:	4b03      	ldr	r3, [pc, #12]	; (5de8 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x60>)
      return tmp.store;
    5ddc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    { strcpy(out, "/");
    5de0:	881b      	ldrh	r3, [r3, #0]
    5de2:	8023      	strh	r3, [r4, #0]
  }
    5de4:	b044      	add	sp, #272	; 0x110
    5de6:	bd70      	pop	{r4, r5, r6, pc}
    5de8:	20000b50 	.word	0x20000b50

00005dec <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dee:	f2ad 4d54 	subw	sp, sp, #1108	; 0x454
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5df2:	f44f 7380 	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    5df6:	4617      	mov	r7, r2
    5df8:	460d      	mov	r5, r1
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5dfa:	aa10      	add	r2, sp, #64	; 0x40
  { char oldName[MAX_FILENAME_LEN];
    5dfc:	4604      	mov	r4, r0
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    5dfe:	f7ff ffc3 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    5e02:	4606      	mov	r6, r0
							  return write((const uint8_t *)str, strlen(str)); }
    5e04:	a810      	add	r0, sp, #64	; 0x40
    5e06:	f00c fefb 	bl	12c00 <strlen>
    5e0a:	4601      	mov	r1, r0
    5e0c:	a810      	add	r0, sp, #64	; 0x40
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    5e0e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5e12:	f009 ffff 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e16:	4832      	ldr	r0, [pc, #200]	; (5ee0 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5e18:	f007 fc74 	bl	d704 <Print::println()>
    Record p1 = ReadIndexRecord(handle);
    5e1c:	462a      	mov	r2, r5
    5e1e:	4621      	mov	r1, r4
    5e20:	a8d0      	add	r0, sp, #832	; 0x340
    5e22:	f7ff feef 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    5e26:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e2a:	a9d4      	add	r1, sp, #848	; 0x350
    5e2c:	a890      	add	r0, sp, #576	; 0x240
    5e2e:	f00c fb85 	bl	1253c <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    5e32:	4639      	mov	r1, r7
    5e34:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e38:	a8d4      	add	r0, sp, #848	; 0x350
    5e3a:	f00c fb7f 	bl	1253c <strlcpy>
    WriteIndexRecord(handle, p1);
    5e3e:	aad0      	add	r2, sp, #832	; 0x340
    5e40:	4629      	mov	r1, r5
    5e42:	4620      	mov	r0, r4
    5e44:	f7ff fe3e 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    5e48:	f44f 7380 	mov.w	r3, #256	; 0x100
    5e4c:	aa50      	add	r2, sp, #320	; 0x140
    5e4e:	4629      	mov	r1, r5
    5e50:	4620      	mov	r0, r4
    5e52:	f7ff ff99 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
							  return write((const uint8_t *)str, strlen(str)); }
    5e56:	a850      	add	r0, sp, #320	; 0x140
    5e58:	f00c fed2 	bl	12c00 <strlen>
    5e5c:	4601      	mov	r1, r0
    5e5e:	a850      	add	r0, sp, #320	; 0x140
    5e60:	f009 ffd8 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e64:	481e      	ldr	r0, [pc, #120]	; (5ee0 <MTPStorage_SD::rename(unsigned long, char const*)+0xf4>)
    5e66:	f007 fc4d 	bl	d704 <Print::println()>
    5e6a:	6db2      	ldr	r2, [r6, #88]	; 0x58
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    5e6c:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    5e70:	b1cb      	cbz	r3, 5ea6 <MTPStorage_SD::rename(unsigned long, char const*)+0xba>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    5e72:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    5e76:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5e78:	aa10      	add	r2, sp, #64	; 0x40
    5e7a:	a802      	add	r0, sp, #8
    5e7c:	e9cd 1301 	strd	r1, r3, [sp, #4]
    5e80:	f002 fe8e 	bl	8ba0 <FatFile::open(FatFile*, char const*, int)>
    5e84:	9901      	ldr	r1, [sp, #4]
    5e86:	bb20      	cbnz	r0, 5ed2 <MTPStorage_SD::rename(unsigned long, char const*)+0xe6>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    5e88:	a990      	add	r1, sp, #576	; 0x240
    5e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e8e:	a8d4      	add	r0, sp, #848	; 0x350
    5e90:	f00c fb54 	bl	1253c <strlcpy>
    WriteIndexRecord(handle, p1);
    5e94:	4620      	mov	r0, r4
    5e96:	aad0      	add	r2, sp, #832	; 0x340
    5e98:	4629      	mov	r1, r5
    5e9a:	f7ff fe13 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    5e9e:	2000      	movs	r0, #0
  }
    5ea0:	f20d 4d54 	addw	sp, sp, #1108	; 0x454
    5ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ea6:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    5eaa:	2900      	cmp	r1, #0
    5eac:	d0ec      	beq.n	5e88 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    5eae:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    5eb2:	aa10      	add	r2, sp, #64	; 0x40
    5eb4:	a802      	add	r0, sp, #8
    5eb6:	930e      	str	r3, [sp, #56]	; 0x38
    5eb8:	9101      	str	r1, [sp, #4]
    5eba:	f001 fbc7 	bl	764c <ExFatFile::open(ExFatFile*, char const*, int)>
    5ebe:	9901      	ldr	r1, [sp, #4]
    5ec0:	2800      	cmp	r0, #0
    5ec2:	d0e1      	beq.n	5e88 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5ec4:	aa50      	add	r2, sp, #320	; 0x140
    5ec6:	a802      	add	r0, sp, #8
    5ec8:	f001 fe4e 	bl	7b68 <ExFatFile::rename(ExFatFile*, char const*)>
    5ecc:	2800      	cmp	r0, #0
    5ece:	d1e7      	bne.n	5ea0 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    5ed0:	e7da      	b.n	5e88 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5ed2:	aa50      	add	r2, sp, #320	; 0x140
    5ed4:	a802      	add	r0, sp, #8
    5ed6:	f003 f843 	bl	8f60 <FatFile::rename(FatFile*, char const*)>
    5eda:	2800      	cmp	r0, #0
    5edc:	d1e0      	bne.n	5ea0 <MTPStorage_SD::rename(unsigned long, char const*)+0xb4>
    5ede:	e7d3      	b.n	5e88 <MTPStorage_SD::rename(unsigned long, char const*)+0x9c>
    5ee0:	20008b94 	.word	0x20008b94

00005ee4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    5ee4:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
    5ee8:	428b      	cmp	r3, r1
  {
    5eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5eee:	4604      	mov	r4, r0
    5ef0:	b0d4      	sub	sp, #336	; 0x150
    5ef2:	460d      	mov	r5, r1
    5ef4:	4617      	mov	r7, r2
    if (open_file_ == i && mode_ == mode) return;
    5ef6:	d103      	bne.n	5f00 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    5ef8:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
    5efc:	4293      	cmp	r3, r2
    5efe:	d02c      	beq.n	5f5a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x76>
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    5f00:	f44f 7380 	mov.w	r3, #256	; 0x100
    5f04:	4629      	mov	r1, r5
    5f06:	4620      	mov	r0, r4
    5f08:	aa14      	add	r2, sp, #80	; 0x50
    5f0a:	f7ff ff3d 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5f0e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5f12:	4606      	mov	r6, r0
    if(file_.isOpen()) {file_.close();}
    5f14:	f504 7884 	add.w	r8, r4, #264	; 0x108
    5f18:	b313      	cbz	r3, 5f60 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x7c>
    5f1a:	4640      	mov	r0, r8
    5f1c:	f004 fc90 	bl	a840 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    5f20:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5f24:	aa14      	add	r2, sp, #80	; 0x50
    5f26:	463b      	mov	r3, r7
    5f28:	4668      	mov	r0, sp
    5f2a:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5f2c:	f004 fda2 	bl	aa74 <FsVolume::open(char const*, int)>
class Print
    5f30:	9b01      	ldr	r3, [sp, #4]
    5f32:	a904      	add	r1, sp, #16
    5f34:	4640      	mov	r0, r8
    5f36:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    5f3a:	9b02      	ldr	r3, [sp, #8]
    5f3c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5f40:	f89d 300c 	ldrb.w	r3, [sp, #12]
    5f44:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
    5f48:	f004 fc20 	bl	a78c <FsBaseFile::operator=(FsBaseFile const&)>
    5f4c:	4b07      	ldr	r3, [pc, #28]	; (5f6c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x88>)
  ~FsBaseFile() {close();}
    5f4e:	a804      	add	r0, sp, #16
    5f50:	9300      	str	r3, [sp, #0]
    5f52:	f004 fc75 	bl	a840 <FsBaseFile::close()>
    mode_ = mode;
    5f56:	e9c4 7568 	strd	r7, r5, [r4, #416]	; 0x1a0
  }
    5f5a:	b054      	add	sp, #336	; 0x150
    5f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    5f60:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    5f64:	2b00      	cmp	r3, #0
    5f66:	d1d8      	bne.n	5f1a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x36>
    5f68:	e7da      	b.n	5f20 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3c>
    5f6a:	bf00      	nop
    5f6c:	20000c50 	.word	0x20000c50

00005f70 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    5f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f72:	4604      	mov	r4, r0
    5f74:	4616      	mov	r6, r2
    OpenFileByIndex(handle);
    5f76:	2200      	movs	r2, #0
  {
    5f78:	461d      	mov	r5, r3
    5f7a:	9f06      	ldr	r7, [sp, #24]
    OpenFileByIndex(handle);
    5f7c:	f7ff ffb2 	bl	5ee4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    5f80:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5f84:	b1ab      	cbz	r3, 5fb2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x42>
    5f86:	4631      	mov	r1, r6
    5f88:	4618      	mov	r0, r3
    5f8a:	f003 f927 	bl	91dc <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->read(buf, count) :
    5f8e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    5f92:	b128      	cbz	r0, 5fa0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x30>
    5f94:	463a      	mov	r2, r7
    5f96:	4629      	mov	r1, r5
  }
    5f98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5f9c:	f002 bed6 	b.w	8d4c <FatFile::read(void*, unsigned int)>
    5fa0:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->read(buf, count) : -1;
    5fa4:	b160      	cbz	r0, 5fc0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    5fa6:	463a      	mov	r2, r7
    5fa8:	4629      	mov	r1, r5
    5faa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5fae:	f001 b825 	b.w	6ffc <ExFatFile::read(void*, unsigned int)>
    5fb2:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
           m_xFile ? m_xFile->seekSet(pos) : false;
    5fb6:	b118      	cbz	r0, 5fc0 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x50>
    5fb8:	4632      	mov	r2, r6
    5fba:	f001 f905 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    5fbe:	e7e6      	b.n	5f8e <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)+0x1e>
    5fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5fc2:	bf00      	nop

00005fc4 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    5fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    5fc8:	f1b2 3fff 	cmp.w	r2, #4294967295
    5fcc:	bf14      	ite	ne
    5fce:	4690      	movne	r8, r2
    5fd0:	4688      	moveq	r8, r1
  {
    5fd2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
    5fd6:	4604      	mov	r4, r0
    5fd8:	460e      	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    5fda:	4642      	mov	r2, r8
    5fdc:	4601      	mov	r1, r0
    5fde:	a84e      	add	r0, sp, #312	; 0x138
  {
    5fe0:	461f      	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    5fe2:	f7ff fe0f 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    5fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fea:	99de      	ldr	r1, [sp, #888]	; 0x378
    5fec:	a896      	add	r0, sp, #600	; 0x258
    5fee:	f00c faa5 	bl	1253c <strlcpy>
  { uint32_t new_record = index_entries_++;
    5ff2:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    r.child = 0;
    5ff6:	f04f 0a00 	mov.w	sl, #0
    r.scanned = 1;
    5ffa:	f04f 0901 	mov.w	r9, #1
  { uint32_t new_record = index_entries_++;
    5ffe:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    6000:	aa92      	add	r2, sp, #584	; 0x248
    6002:	4629      	mov	r1, r5
    6004:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    6006:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    r.store = p.store;
    600a:	f8bd 3146 	ldrh.w	r3, [sp, #326]	; 0x146
    r.parent = parent;
    600e:	f8cd 8248 	str.w	r8, [sp, #584]	; 0x248
    r.store = p.store;
    6012:	f8ad 3256 	strh.w	r3, [sp, #598]	; 0x256
    r.sibling = p.child;
    6016:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
    r.isdir = folder;
    6018:	f88d 7254 	strb.w	r7, [sp, #596]	; 0x254
    r.sibling = p.child;
    601c:	9394      	str	r3, [sp, #592]	; 0x250
    r.child = 0;
    601e:	f8cd a24c 	str.w	sl, [sp, #588]	; 0x24c
    r.scanned = 1;
    6022:	f88d 9255 	strb.w	r9, [sp, #597]	; 0x255
    WriteIndexRecord(new_record, r);
    6026:	f7ff fd4d 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(parent, p);
    602a:	4641      	mov	r1, r8
    602c:	aa4e      	add	r2, sp, #312	; 0x138
    602e:	4620      	mov	r0, r4
    ret = p.child = AppendIndexRecord(r);
    6030:	954f      	str	r5, [sp, #316]	; 0x13c
    WriteIndexRecord(parent, p);
    6032:	f7ff fd47 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    6036:	b1d7      	cbz	r7, 606e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xaa>
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    6038:	eb04 0686 	add.w	r6, r4, r6, lsl #2
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    603c:	f44f 7380 	mov.w	r3, #256	; 0x100
    6040:	4629      	mov	r1, r5
    6042:	4620      	mov	r0, r4
    6044:	aa0e      	add	r2, sp, #56	; 0x38
    6046:	f7ff fe9f 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    604a:	6db3      	ldr	r3, [r6, #88]	; 0x58
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    604c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    6050:	b1c0      	cbz	r0, 6084 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xc0>
    return sub.mkdir(vwd(), path, pFlag);
    6052:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    6056:	464b      	mov	r3, r9
    6058:	aa0e      	add	r2, sp, #56	; 0x38
    605a:	4668      	mov	r0, sp
    605c:	f8cd a000 	str.w	sl, [sp]
    6060:	f002 fd28 	bl	8ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
  }
    6064:	4628      	mov	r0, r5
    6066:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    606e:	f240 2202 	movw	r2, #514	; 0x202
    6072:	4629      	mov	r1, r5
    6074:	4620      	mov	r0, r4
    6076:	f7ff ff35 	bl	5ee4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  }
    607a:	4628      	mov	r0, r5
    607c:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    6080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6084:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6088:	2900      	cmp	r1, #0
    608a:	d0f6      	beq.n	607a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0xb6>
    608c:	900c      	str	r0, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    608e:	464b      	mov	r3, r9
    6090:	aa0e      	add	r2, sp, #56	; 0x38
    6092:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6096:	4668      	mov	r0, sp
    6098:	f001 fde8 	bl	7c6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    609c:	4628      	mov	r0, r5
    609e:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
    60a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60a6:	bf00      	nop

000060a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    60a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60ac:	f1b2 3fff 	cmp.w	r2, #4294967295
    60b0:	bf14      	ite	ne
    60b2:	4616      	movne	r6, r2
    60b4:	460e      	moveq	r6, r1
    60b6:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    60ba:	4601      	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    60bc:	4604      	mov	r4, r0
    Record record = ReadIndexRecord(i);
    60be:	4632      	mov	r2, r6
    60c0:	4668      	mov	r0, sp
    60c2:	f7ff fd9f 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    60c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    60ca:	b113      	cbz	r3, 60d2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    60cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
    60d0:	b11a      	cbz	r2, 60da <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x32>
  }
    60d2:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    60d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      OpenFileByIndex(i);
    60da:	4631      	mov	r1, r6
    60dc:	4620      	mov	r0, r4
    60de:	f7ff ff01 	bl	5ee4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
  bool isOpen() const {return m_fFile || m_xFile;}
    60e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    60e6:	2b00      	cmp	r3, #0
    60e8:	f000 8087 	beq.w	61fa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x152>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    60ec:	2500      	movs	r5, #0
    60ee:	f504 77ac 	add.w	r7, r4, #344	; 0x158
    60f2:	f504 7b84 	add.w	fp, r4, #264	; 0x108
    60f6:	f8df a114 	ldr.w	sl, [pc, #276]	; 620c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x164>
	constexpr Print() : write_error(0) {}
    60fa:	46a9      	mov	r9, r5
	constexpr Stream() : _timeout(1000), read_error(0) {}
    60fc:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    6100:	e027      	b.n	6152 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xaa>
        r.store = record.store;
    6102:	f8bd 200e 	ldrh.w	r2, [sp, #14]
        r.sibling = sibling;
    6106:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    6108:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    610a:	f8ad 211e 	strh.w	r2, [sp, #286]	; 0x11e
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
    610e:	7802      	ldrb	r2, [r0, #0]
    6110:	f002 0270 	and.w	r2, r2, #112	; 0x70
    6114:	2a00      	cmp	r2, #0
    6116:	bf14      	ite	ne
    6118:	2201      	movne	r2, #1
    611a:	2200      	moveq	r2, #0
    611c:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    6120:	d05c      	beq.n	61dc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x134>
    6122:	2200      	movs	r2, #0
    6124:	9245      	str	r2, [sp, #276]	; 0x114
    return m_fFile ? m_fFile->getName(name, len) :
    6126:	a948      	add	r1, sp, #288	; 0x120
    6128:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    612c:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    6130:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    return m_fFile ? m_fFile->getName(name, len) :
    6134:	f003 ffa4 	bl	a080 <FatFile::getName(char*, unsigned int)>
  { uint32_t new_record = index_entries_++;
    6138:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    613c:	4620      	mov	r0, r4
    613e:	aa44      	add	r2, sp, #272	; 0x110
  { uint32_t new_record = index_entries_++;
    6140:	1c69      	adds	r1, r5, #1
    6142:	f8c4 11a8 	str.w	r1, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6146:	4629      	mov	r1, r5
    6148:	f7ff fcbc 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
        child_.close();
    614c:	4638      	mov	r0, r7
    614e:	f004 fb77 	bl	a840 <FsBaseFile::close()>
    tmpFile.openNext(this, oflag);
    6152:	2200      	movs	r2, #0
    6154:	4659      	mov	r1, fp
    6156:	a848      	add	r0, sp, #288	; 0x120
    6158:	f88d 911c 	strb.w	r9, [sp, #284]	; 0x11c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    615c:	f8cd a110 	str.w	sl, [sp, #272]	; 0x110
    6160:	e9cd 9845 	strd	r9, r8, [sp, #276]	; 0x114
  FsBaseFile() {}
    6164:	e9cd 9956 	strd	r9, r9, [sp, #344]	; 0x158
    tmpFile.openNext(this, oflag);
    6168:	f004 fbd6 	bl	a918 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    616c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    616e:	a948      	add	r1, sp, #288	; 0x120
    6170:	4638      	mov	r0, r7
    6172:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
class Stream : public Print
    6176:	9a46      	ldr	r2, [sp, #280]	; 0x118
    6178:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
    617c:	f89d 211c 	ldrb.w	r2, [sp, #284]	; 0x11c
    6180:	f884 2154 	strb.w	r2, [r4, #340]	; 0x154
    6184:	f004 fb02 	bl	a78c <FsBaseFile::operator=(FsBaseFile const&)>
    6188:	4b1f      	ldr	r3, [pc, #124]	; (6208 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x160>)
  ~FsBaseFile() {close();}
    618a:	a848      	add	r0, sp, #288	; 0x120
    618c:	9344      	str	r3, [sp, #272]	; 0x110
    618e:	f004 fb57 	bl	a840 <FsBaseFile::close()>
  bool isOpen() const {return m_fFile || m_xFile;}
    6192:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
    6196:	2800      	cmp	r0, #0
    6198:	d1b3      	bne.n	6102 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x5a>
    619a:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
    619e:	b1fa      	cbz	r2, 61e0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x138>
        r.store = record.store;
    61a0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
        r.sibling = sibling;
    61a4:	9546      	str	r5, [sp, #280]	; 0x118
        r.parent = i;
    61a6:	9644      	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    61a8:	f8ad 111e 	strh.w	r1, [sp, #286]	; 0x11e
           m_xFile ? m_xFile->isDir() : false;
    61ac:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    61b0:	f011 0150 	ands.w	r1, r1, #80	; 0x50
    61b4:	d00e      	beq.n	61d4 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x12c>
        r.isdir = child_.isDirectory();
    61b6:	2101      	movs	r1, #1
    61b8:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    61bc:	9045      	str	r0, [sp, #276]	; 0x114
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
    61be:	a948      	add	r1, sp, #288	; 0x120
    61c0:	4610      	mov	r0, r2
    61c2:	f44f 7280 	mov.w	r2, #256	; 0x100
        r.scanned = false;
    61c6:	f88d 911d 	strb.w	r9, [sp, #285]	; 0x11d
    *name = 0;
    61ca:	f88d 9120 	strb.w	r9, [sp, #288]	; 0x120
    61ce:	f001 ff91 	bl	80f4 <ExFatFile::getName8(char*, unsigned int)>
    61d2:	e7b1      	b.n	6138 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x90>
        r.isdir = child_.isDirectory();
    61d4:	f88d 111c 	strb.w	r1, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    61d8:	6910      	ldr	r0, [r2, #16]
  size_t getName(char* name, size_t len) {
    61da:	e7ef      	b.n	61bc <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x114>
  uint32_t fileSize() const {return m_fileSize;}
    61dc:	69c2      	ldr	r2, [r0, #28]
    return m_fFile ? m_fFile->getName(name, len) :
    61de:	e7a1      	b.n	6124 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x7c>
      record.scanned = true;
    61e0:	2301      	movs	r3, #1
      WriteIndexRecord(i, record);
    61e2:	4631      	mov	r1, r6
    61e4:	4620      	mov	r0, r4
    61e6:	466a      	mov	r2, sp
      record.child = sibling;
    61e8:	9501      	str	r5, [sp, #4]
      record.scanned = true;
    61ea:	f88d 300d 	strb.w	r3, [sp, #13]
      WriteIndexRecord(i, record);
    61ee:	f7ff fc69 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    61f2:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
    61f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    61fa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    61fe:	2b00      	cmp	r3, #0
    6200:	f47f af74 	bne.w	60ec <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x44>
    6204:	e765      	b.n	60d2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x2a>
    6206:	bf00      	nop
    6208:	20000c50 	.word	0x20000c50
    620c:	20000d78 	.word	0x20000d78

00006210 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    6210:	b510      	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    6212:	f1b2 3fff 	cmp.w	r2, #4294967295
    6216:	bf08      	it	eq
    6218:	460a      	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    621a:	b0c6      	sub	sp, #280	; 0x118
    621c:	4604      	mov	r4, r0
      ScanDir(store, parent);
    621e:	9201      	str	r2, [sp, #4]
    6220:	f7ff ff42 	bl	60a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    6224:	2301      	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    6226:	9a01      	ldr	r2, [sp, #4]
    6228:	4621      	mov	r1, r4
    622a:	a802      	add	r0, sp, #8
      follow_sibling_ = true;
    622c:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    6230:	f7ff fce8 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6234:	9b03      	ldr	r3, [sp, #12]
    6236:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  }
    623a:	b046      	add	sp, #280	; 0x118
    623c:	bd10      	pop	{r4, pc}
    623e:	bf00      	nop

00006240 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { if (index_generated) return; 
    6240:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
  { 
    6244:	b570      	push	{r4, r5, r6, lr}
    6246:	4605      	mov	r5, r0
    6248:	460e      	mov	r6, r1
    624a:	4614      	mov	r4, r2
  { if (index_generated) return; 
    624c:	b323      	cbz	r3, 6298 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x58>
    if (parent) 
    624e:	b134      	cbz	r4, 625e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1e>
    6250:	4622      	mov	r2, r4
    6252:	4631      	mov	r1, r6
    6254:	4628      	mov	r0, r5
  }
    6256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    625a:	f7ff bfd9 	b.w	6210 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
  { if (all_scanned_) return;
    625e:	f895 31ad 	ldrb.w	r3, [r5, #429]	; 0x1ad
    6262:	b993      	cbnz	r3, 628a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    all_scanned_ = true;
    6264:	2201      	movs	r2, #1
  { if (index_generated) return; 
    6266:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
    all_scanned_ = true;
    626a:	f885 21ad 	strb.w	r2, [r5, #429]	; 0x1ad
  { if (index_generated) return; 
    626e:	b1b3      	cbz	r3, 629e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x5e>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    6270:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    6274:	b14b      	cbz	r3, 628a <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x4a>
    6276:	4622      	mov	r2, r4
    6278:	4631      	mov	r1, r6
    627a:	4628      	mov	r0, r5
    627c:	3401      	adds	r4, #1
    627e:	f7ff ff13 	bl	60a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    6282:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    6286:	429c      	cmp	r4, r3
    6288:	d3f5      	bcc.n	6276 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x36>
      follow_sibling_ = false;
    628a:	2200      	movs	r2, #0
      next_ = 1;
    628c:	2301      	movs	r3, #1
      follow_sibling_ = false;
    628e:	f885 21b4 	strb.w	r2, [r5, #436]	; 0x1b4
      next_ = 1;
    6292:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
  }
    6296:	bd70      	pop	{r4, r5, r6, pc}
    6298:	f7ff fc54 	bl	5b44 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    629c:	e7d7      	b.n	624e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0xe>
    629e:	4628      	mov	r0, r5
    62a0:	f7ff fc50 	bl	5b44 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
    62a4:	e7e4      	b.n	6270 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x30>
    62a6:	bf00      	nop

000062a8 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    62a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62ac:	eb00 0a81 	add.w	sl, r0, r1, lsl #2
    62b0:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    62b4:	2300      	movs	r3, #0
    62b6:	4681      	mov	r9, r0
    62b8:	4688      	mov	r8, r1
    62ba:	a804      	add	r0, sp, #16
    62bc:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
    62c0:	4615      	mov	r5, r2
    62c2:	f004 fbd7 	bl	aa74 <FsVolume::open(char const*, int)>
    return m_fFile ? m_fFile->isDir() :
    62c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    62c8:	2b00      	cmp	r3, #0
    62ca:	f000 80c7 	beq.w	645c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1b4>
  if(f1.isDirectory())
    62ce:	781b      	ldrb	r3, [r3, #0]
    62d0:	f013 0f70 	tst.w	r3, #112	; 0x70
    62d4:	f000 80ca 	beq.w	646c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
	constexpr Stream() : _timeout(1000), read_error(0) {}
    62d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    62dc:	2400      	movs	r4, #0
    62de:	af08      	add	r7, sp, #32
    62e0:	4e7e      	ldr	r6, [pc, #504]	; (64dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    62e2:	931a      	str	r3, [sp, #104]	; 0x68
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    62e4:	f8df b200 	ldr.w	fp, [pc, #512]	; 64e8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x240>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    62e8:	4b7d      	ldr	r3, [pc, #500]	; (64e0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    62ea:	9419      	str	r4, [sp, #100]	; 0x64
    62ec:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    62f0:	9318      	str	r3, [sp, #96]	; 0x60
  FsBaseFile() {}
    62f2:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    62f6:	4b7a      	ldr	r3, [pc, #488]	; (64e0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x238>)
    tmpFile.openNext(this, oflag);
    62f8:	2200      	movs	r2, #0
    62fa:	4639      	mov	r1, r7
    62fc:	a830      	add	r0, sp, #192	; 0xc0
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    62fe:	932c      	str	r3, [sp, #176]	; 0xb0
    6300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6304:	942d      	str	r4, [sp, #180]	; 0xb4
    6306:	932e      	str	r3, [sp, #184]	; 0xb8
    6308:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  FsBaseFile() {}
    630c:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    tmpFile.openNext(this, oflag);
    6310:	f004 fb02 	bl	a918 <FsBaseFile::openNext(FsBaseFile*, int)>
class Print
    6314:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    6316:	a930      	add	r1, sp, #192	; 0xc0
    6318:	a81c      	add	r0, sp, #112	; 0x70
    631a:	9319      	str	r3, [sp, #100]	; 0x64
class Stream : public Print
    631c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    631e:	931a      	str	r3, [sp, #104]	; 0x68
    6320:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
    6324:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
    6328:	f004 fa30 	bl	a78c <FsBaseFile::operator=(FsBaseFile const&)>
  bool isOpen() const {return m_fFile || m_xFile;}
    632c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    632e:	2b00      	cmp	r3, #0
    6330:	d04f      	beq.n	63d2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x12a>
  ~FsBaseFile() {close();}
    6332:	a830      	add	r0, sp, #192	; 0xc0
    6334:	962c      	str	r6, [sp, #176]	; 0xb0
    6336:	f004 fa83 	bl	a840 <FsBaseFile::close()>
    return m_fFile ? m_fFile->getName(name, len) :
    633a:	982a      	ldr	r0, [sp, #168]	; 0xa8
    *name = 0;
    633c:	f88d 4200 	strb.w	r4, [sp, #512]	; 0x200
    return m_fFile ? m_fFile->getName(name, len) :
    6340:	2800      	cmp	r0, #0
    6342:	d03d      	beq.n	63c0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x118>
    6344:	f44f 7280 	mov.w	r2, #256	; 0x100
    6348:	a980      	add	r1, sp, #512	; 0x200
    634a:	f003 fe99 	bl	a080 <FatFile::getName(char*, unsigned int)>
    634e:	ab80      	add	r3, sp, #512	; 0x200
    6350:	f44f 7180 	mov.w	r1, #256	; 0x100
    6354:	465a      	mov	r2, fp
    6356:	9300      	str	r3, [sp, #0]
    6358:	eb0d 0001 	add.w	r0, sp, r1
    635c:	462b      	mov	r3, r5
    635e:	f00b fe7d 	bl	1205c <snprintf>
    return m_fFile ? m_fFile->isDir() :
    6362:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    6364:	b14b      	cbz	r3, 637a <MTPStorage_SD::removeFile(unsigned long, char*)+0xd2>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    6366:	781b      	ldrb	r3, [r3, #0]
    6368:	f013 0f70 	tst.w	r3, #112	; 0x70
    636c:	d00c      	beq.n	6388 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    636e:	aa40      	add	r2, sp, #256	; 0x100
    6370:	4641      	mov	r1, r8
    6372:	4648      	mov	r0, r9
    6374:	f7ff ff98 	bl	62a8 <MTPStorage_SD::removeFile(unsigned long, char*)>
    6378:	e7bd      	b.n	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    637a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
           m_xFile ? m_xFile->isDir() : false;
    637c:	b123      	cbz	r3, 6388 <MTPStorage_SD::removeFile(unsigned long, char*)+0xe0>
    637e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6382:	f013 0f50 	tst.w	r3, #80	; 0x50
    6386:	d1f2      	bne.n	636e <MTPStorage_SD::removeFile(unsigned long, char*)+0xc6>
							  return write((const uint8_t *)str, strlen(str)); }
    6388:	a840      	add	r0, sp, #256	; 0x100
    638a:	f00c fc39 	bl	12c00 <strlen>
    638e:	4601      	mov	r1, r0
    6390:	a840      	add	r0, sp, #256	; 0x100
    6392:	f009 fd3f 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6396:	4853      	ldr	r0, [pc, #332]	; (64e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    6398:	f007 f9b4 	bl	d704 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    639c:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    63a0:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    63a4:	2900      	cmp	r1, #0
    63a6:	d036      	beq.n	6416 <MTPStorage_SD::removeFile(unsigned long, char*)+0x16e>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    63a8:	aa40      	add	r2, sp, #256	; 0x100
    63aa:	2301      	movs	r3, #1
    63ac:	a82c      	add	r0, sp, #176	; 0xb0
  FatFile() {}
    63ae:	942c      	str	r4, [sp, #176]	; 0xb0
    63b0:	f002 fc78 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    63b4:	2800      	cmp	r0, #0
    63b6:	d09e      	beq.n	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    63b8:	a82c      	add	r0, sp, #176	; 0xb0
    63ba:	f003 fcd3 	bl	9d64 <FatFile::remove()>
    63be:	e79a      	b.n	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    63c0:	982b      	ldr	r0, [sp, #172]	; 0xac
           m_xFile ? m_xFile->getName(name, len) : 0;
    63c2:	2800      	cmp	r0, #0
    63c4:	d0c3      	beq.n	634e <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
    63c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    63ca:	a980      	add	r1, sp, #512	; 0x200
    63cc:	f001 fe92 	bl	80f4 <ExFatFile::getName8(char*, unsigned int)>
    63d0:	e7bd      	b.n	634e <MTPStorage_SD::removeFile(unsigned long, char*)+0xa6>
  bool isOpen() const {return m_fFile || m_xFile;}
    63d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    63d4:	2b00      	cmp	r3, #0
    63d6:	d1ac      	bne.n	6332 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8a>
  ~FsBaseFile() {close();}
    63d8:	a830      	add	r0, sp, #192	; 0xc0
    63da:	9303      	str	r3, [sp, #12]
    63dc:	962c      	str	r6, [sp, #176]	; 0xb0
    63de:	f004 fa2f 	bl	a840 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    63e2:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    63e6:	9b03      	ldr	r3, [sp, #12]
    63e8:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    63ec:	b330      	cbz	r0, 643c <MTPStorage_SD::removeFile(unsigned long, char*)+0x194>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    63ee:	4601      	mov	r1, r0
    63f0:	462a      	mov	r2, r5
    63f2:	a82c      	add	r0, sp, #176	; 0xb0
    63f4:	932c      	str	r3, [sp, #176]	; 0xb0
    63f6:	f002 fc55 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    63fa:	2800      	cmp	r0, #0
    63fc:	d164      	bne.n	64c8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x220>
    63fe:	a81c      	add	r0, sp, #112	; 0x70
    6400:	9618      	str	r6, [sp, #96]	; 0x60
    6402:	f004 fa1d 	bl	a840 <FsBaseFile::close()>
    6406:	4638      	mov	r0, r7
    6408:	9604      	str	r6, [sp, #16]
    640a:	f004 fa19 	bl	a840 <FsBaseFile::close()>
}
    640e:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
    6412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6416:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    641a:	2b00      	cmp	r3, #0
    641c:	f43f af6b 	beq.w	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
  ExFatFile() {}
    6420:	9138      	str	r1, [sp, #224]	; 0xe0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6422:	aa40      	add	r2, sp, #256	; 0x100
    6424:	4619      	mov	r1, r3
    6426:	a82c      	add	r0, sp, #176	; 0xb0
    6428:	2301      	movs	r3, #1
    642a:	f001 f98b 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    642e:	2800      	cmp	r0, #0
    6430:	f43f af61 	beq.w	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    6434:	a82c      	add	r0, sp, #176	; 0xb0
    6436:	f001 f9e9 	bl	780c <ExFatFile::remove()>
    643a:	e75c      	b.n	62f6 <MTPStorage_SD::removeFile(unsigned long, char*)+0x4e>
    643c:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    6440:	2900      	cmp	r1, #0
    6442:	d0dc      	beq.n	63fe <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6444:	4603      	mov	r3, r0
    6446:	9038      	str	r0, [sp, #224]	; 0xe0
    6448:	462a      	mov	r2, r5
    644a:	a82c      	add	r0, sp, #176	; 0xb0
    644c:	f001 f97a 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6450:	2800      	cmp	r0, #0
    6452:	d0d4      	beq.n	63fe <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    6454:	a82c      	add	r0, sp, #176	; 0xb0
    6456:	f001 fa33 	bl	78c0 <ExFatFile::rmdir()>
    645a:	e7d0      	b.n	63fe <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    645c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
           m_xFile ? m_xFile->isDir() : false;
    645e:	b12b      	cbz	r3, 646c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1c4>
    6460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6464:	f013 0f50 	tst.w	r3, #80	; 0x50
    6468:	f47f af36 	bne.w	62d8 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    646c:	b135      	cbz	r5, 647c <MTPStorage_SD::removeFile(unsigned long, char*)+0x1d4>
							  return write((const uint8_t *)str, strlen(str)); }
    646e:	4628      	mov	r0, r5
    6470:	f00c fbc6 	bl	12c00 <strlen>
    6474:	4601      	mov	r1, r0
    6476:	4628      	mov	r0, r5
    6478:	f009 fccc 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    647c:	4819      	ldr	r0, [pc, #100]	; (64e4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x23c>)
    647e:	f007 f941 	bl	d704 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6482:	f8da 2058 	ldr.w	r2, [sl, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    6486:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    648a:	b15b      	cbz	r3, 64a4 <MTPStorage_SD::removeFile(unsigned long, char*)+0x1fc>
    648c:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    648e:	4619      	mov	r1, r3
    6490:	462a      	mov	r2, r5
    6492:	2301      	movs	r3, #1
    6494:	9080      	str	r0, [sp, #512]	; 0x200
    6496:	a880      	add	r0, sp, #512	; 0x200
    6498:	f002 fc04 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    649c:	b9c0      	cbnz	r0, 64d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x228>
    649e:	af08      	add	r7, sp, #32
    64a0:	4e0e      	ldr	r6, [pc, #56]	; (64dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    64a2:	e7b0      	b.n	6406 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    64a4:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    64a8:	2900      	cmp	r1, #0
    64aa:	d0f8      	beq.n	649e <MTPStorage_SD::removeFile(unsigned long, char*)+0x1f6>
    64ac:	938c      	str	r3, [sp, #560]	; 0x230
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    64ae:	462a      	mov	r2, r5
    64b0:	2301      	movs	r3, #1
    64b2:	a880      	add	r0, sp, #512	; 0x200
    64b4:	af08      	add	r7, sp, #32
    64b6:	4e09      	ldr	r6, [pc, #36]	; (64dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    64b8:	f001 f944 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    64bc:	2800      	cmp	r0, #0
    64be:	d0a2      	beq.n	6406 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    64c0:	a880      	add	r0, sp, #512	; 0x200
    64c2:	f001 f9a3 	bl	780c <ExFatFile::remove()>
    64c6:	e79e      	b.n	6406 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    64c8:	a82c      	add	r0, sp, #176	; 0xb0
    64ca:	f002 fe3f 	bl	914c <FatFile::rmdir()>
    64ce:	e796      	b.n	63fe <MTPStorage_SD::removeFile(unsigned long, char*)+0x156>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    64d0:	a880      	add	r0, sp, #512	; 0x200
    64d2:	af08      	add	r7, sp, #32
    64d4:	4e01      	ldr	r6, [pc, #4]	; (64dc <MTPStorage_SD::removeFile(unsigned long, char*)+0x234>)
    64d6:	f003 fc45 	bl	9d64 <FatFile::remove()>
    64da:	e794      	b.n	6406 <MTPStorage_SD::removeFile(unsigned long, char*)+0x15e>
    64dc:	20000c50 	.word	0x20000c50
    64e0:	20000d78 	.word	0x20000d78
    64e4:	20008b94 	.word	0x20008b94
    64e8:	20000b48 	.word	0x20000b48

000064ec <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    64ec:	b570      	push	{r4, r5, r6, lr}
    64ee:	f5ad 6da8 	sub.w	sp, sp, #1344	; 0x540
    64f2:	4604      	mov	r4, r0
    64f4:	460d      	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    64f6:	f44f 7380 	mov.w	r3, #256	; 0x100
    64fa:	aa44      	add	r2, sp, #272	; 0x110
    64fc:	f7ff fc44 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    6500:	462a      	mov	r2, r5
    6502:	4621      	mov	r1, r4
    6504:	a884      	add	r0, sp, #528	; 0x210
    6506:	f7ff fb7d 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    650a:	aa44      	add	r2, sp, #272	; 0x110
    650c:	f8bd 121e 	ldrh.w	r1, [sp, #542]	; 0x21e
    6510:	4620      	mov	r0, r4
    6512:	f7ff fec9 	bl	62a8 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    6516:	2300      	movs	r3, #0
    WriteIndexRecord(object, r);
    6518:	aa84      	add	r2, sp, #528	; 0x210
    651a:	4629      	mov	r1, r5
    651c:	4620      	mov	r0, r4
    r.name[0]=0;
    651e:	f88d 3220 	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    6522:	f7ff facf 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    6526:	9a84      	ldr	r2, [sp, #528]	; 0x210
    6528:	4621      	mov	r1, r4
    652a:	a8c8      	add	r0, sp, #800	; 0x320
    652c:	f7ff fb6a 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    6530:	9ec9      	ldr	r6, [sp, #804]	; 0x324
    6532:	42b5      	cmp	r5, r6
    6534:	d025      	beq.n	6582 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x96>
      Record x = ReadIndexRecord(is);
    6536:	4632      	mov	r2, r6
    6538:	4621      	mov	r1, r4
    653a:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    653e:	f7ff fb61 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    6542:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    6546:	4295      	cmp	r5, r2
    6548:	d00f      	beq.n	656a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x7e>
    654a:	4621      	mov	r1, r4
    654c:	4668      	mov	r0, sp
    654e:	4616      	mov	r6, r2
    6550:	f7ff fb58 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6554:	f44f 7288 	mov.w	r2, #272	; 0x110
    6558:	4669      	mov	r1, sp
    655a:	f50d 6086 	add.w	r0, sp, #1072	; 0x430
    655e:	f007 fed9 	bl	e314 <memcpy>
    6562:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    6566:	4295      	cmp	r5, r2
    6568:	d1ef      	bne.n	654a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      x.sibling = r.sibling;
    656a:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    656c:	f50d 6286 	add.w	r2, sp, #1072	; 0x430
    6570:	4631      	mov	r1, r6
    6572:	4620      	mov	r0, r4
      x.sibling = r.sibling;
    6574:	f8cd 3438 	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    6578:	f7ff faa4 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    657c:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    6580:	bd70      	pop	{r4, r5, r6, pc}
      t.child = r.sibling;
    6582:	9b86      	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    6584:	aac8      	add	r2, sp, #800	; 0x320
    6586:	9984      	ldr	r1, [sp, #528]	; 0x210
    6588:	4620      	mov	r0, r4
      t.child = r.sibling;
    658a:	93c9      	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(r.parent, t);
    658c:	f7ff fa9a 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    6590:	f50d 6da8 	add.w	sp, sp, #1344	; 0x540
    6594:	bd70      	pop	{r4, r5, r6, pc}
    6596:	bf00      	nop

00006598 <MTPStorage_SD::DeleteObject(unsigned long)>:
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    6598:	1c4a      	adds	r2, r1, #1
    659a:	d004      	beq.n	65a6 <MTPStorage_SD::DeleteObject(unsigned long)+0xe>
  {
    659c:	b508      	push	{r3, lr}
    659e:	f7ff ffa5 	bl	64ec <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    65a2:	2001      	movs	r0, #1
    65a4:	bd08      	pop	{r3, pc}
    65a6:	2001      	movs	r0, #1
    65a8:	4770      	bx	lr
    65aa:	bf00      	nop

000065ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    65ac:	b570      	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    65ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    65b2:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
    65b6:	4605      	mov	r5, r0
    65b8:	461e      	mov	r6, r3
    65ba:	6d49      	ldr	r1, [r1, #84]	; 0x54
    65bc:	2300      	movs	r3, #0
    65be:	4668      	mov	r0, sp
    65c0:	f004 fa58 	bl	aa74 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    65c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    65c6:	2b00      	cmp	r3, #0
    65c8:	f000 8082 	beq.w	66d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x124>
    65cc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    65d0:	f240 2302 	movw	r3, #514	; 0x202
    65d4:	f8dd 28b0 	ldr.w	r2, [sp, #2224]	; 0x8b0
    65d8:	a814      	add	r0, sp, #80	; 0x50
    65da:	6d69      	ldr	r1, [r5, #84]	; 0x54
    65dc:	f004 fa4a 	bl	aa74 <FsVolume::open(char const*, int)>
    65e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    65e2:	2b00      	cmp	r3, #0
    65e4:	d07f      	beq.n	66e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x13a>
    65e6:	f04f 34ff 	mov.w	r4, #4294967295
    65ea:	e006      	b.n	65fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
    return m_fFile ? m_fFile->write(buf, count) :
    65ec:	4622      	mov	r2, r4
    65ee:	a928      	add	r1, sp, #160	; 0xa0
    65f0:	f002 ff2a 	bl	9448 <FatFile::write(void const*, unsigned int)>
  while(f1.available()>0)
  {
    nd=f1.read(buffer,nbuf);
    if(nd<0) break;     // read error
    f2.write(buffer,nd);
    if(nd<nbuf) break;  // end of file
    65f4:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    65f8:	db1e      	blt.n	6638 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x8c>
    return m_fFile ? m_fFile->available() :
    65fa:	9812      	ldr	r0, [sp, #72]	; 0x48
    65fc:	2800      	cmp	r0, #0
    65fe:	d03c      	beq.n	667a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xce>
    return isFile() ? fileSize() - curPosition() : 0;
    6600:	7803      	ldrb	r3, [r0, #0]
    6602:	071a      	lsls	r2, r3, #28
    6604:	d521      	bpl.n	664a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
  while(f1.available()>0)
    6606:	69c2      	ldr	r2, [r0, #28]
    6608:	6943      	ldr	r3, [r0, #20]
    660a:	429a      	cmp	r2, r3
    660c:	d01d      	beq.n	664a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return m_fFile ? m_fFile->read(buf, count) :
    660e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    6612:	a928      	add	r1, sp, #160	; 0xa0
    6614:	f002 fb9a 	bl	8d4c <FatFile::read(void*, unsigned int)>
    6618:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    661a:	2c00      	cmp	r4, #0
    661c:	db4a      	blt.n	66b4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x108>
    return m_fFile ? m_fFile->write(buf, count) :
    661e:	9826      	ldr	r0, [sp, #152]	; 0x98
    6620:	2800      	cmp	r0, #0
    6622:	d1e3      	bne.n	65ec <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x40>
    6624:	9827      	ldr	r0, [sp, #156]	; 0x9c
           m_xFile ? m_xFile->write(buf, count) : 0;
    6626:	2800      	cmp	r0, #0
    6628:	d0e4      	beq.n	65f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x48>
    662a:	4622      	mov	r2, r4
    662c:	a928      	add	r1, sp, #160	; 0xa0
    662e:	f001 fbfb 	bl	7e28 <ExFatFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    6632:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    6636:	dae0      	bge.n	65fa <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x4e>
  }
  // close all files
  f1.close();
    6638:	ad04      	add	r5, sp, #16
  f2.close();
    663a:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    663c:	4628      	mov	r0, r5
    663e:	f004 f8ff 	bl	a840 <FsBaseFile::close()>
  f2.close();
    6642:	4630      	mov	r0, r6
    6644:	f004 f8fc 	bl	a840 <FsBaseFile::close()>
    6648:	e009      	b.n	665e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb2>
  f1.close();
    664a:	ad04      	add	r5, sp, #16
  f2.close();
    664c:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    664e:	4628      	mov	r0, r5
    6650:	f004 f8f6 	bl	a840 <FsBaseFile::close()>
  f2.close();
    6654:	4630      	mov	r0, r6
    6656:	f004 f8f3 	bl	a840 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    665a:	3401      	adds	r4, #1
    665c:	d032      	beq.n	66c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x118>
  return true;
    665e:	2401      	movs	r4, #1
  ~FsBaseFile() {close();}
    6660:	4630      	mov	r0, r6
    6662:	4e28      	ldr	r6, [pc, #160]	; (6704 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    6664:	9614      	str	r6, [sp, #80]	; 0x50
    6666:	f004 f8eb 	bl	a840 <FsBaseFile::close()>
    666a:	4628      	mov	r0, r5
    666c:	9600      	str	r6, [sp, #0]
    666e:	f004 f8e7 	bl	a840 <FsBaseFile::close()>
}
    6672:	4620      	mov	r0, r4
    6674:	f50d 6d0a 	add.w	sp, sp, #2208	; 0x8a0
    6678:	bd70      	pop	{r4, r5, r6, pc}
    667a:	9813      	ldr	r0, [sp, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
    667c:	2800      	cmp	r0, #0
    667e:	d0e4      	beq.n	664a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    return isFile() ? fileSize() - curPosition() : 0;
    6680:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    6684:	071b      	lsls	r3, r3, #28
    6686:	d5e0      	bpl.n	664a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
    6688:	6903      	ldr	r3, [r0, #16]
    668a:	6801      	ldr	r1, [r0, #0]
    668c:	6942      	ldr	r2, [r0, #20]
    668e:	1a5b      	subs	r3, r3, r1
    6690:	6845      	ldr	r5, [r0, #4]
    6692:	eb62 0205 	sbc.w	r2, r2, r5
    return n > INT_MAX ? INT_MAX : n;
    6696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    669a:	f172 0200 	sbcs.w	r2, r2, #0
    669e:	d201      	bcs.n	66a4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xf8>
  while(f1.available()>0)
    66a0:	2b00      	cmp	r3, #0
    66a2:	d0d2      	beq.n	664a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9e>
           m_xFile ? m_xFile->read(buf, count) : -1;
    66a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    66a8:	a928      	add	r1, sp, #160	; 0xa0
    66aa:	f000 fca7 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    66ae:	4604      	mov	r4, r0
    if(nd<0) break;     // read error
    66b0:	2c00      	cmp	r4, #0
    66b2:	dab4      	bge.n	661e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x72>
  f1.close();
    66b4:	ad04      	add	r5, sp, #16
  f2.close();
    66b6:	ae18      	add	r6, sp, #96	; 0x60
  f1.close();
    66b8:	4628      	mov	r0, r5
    66ba:	f004 f8c1 	bl	a840 <FsBaseFile::close()>
  f2.close();
    66be:	4630      	mov	r0, r6
    66c0:	f004 f8be 	bl	a840 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    66c4:	f240 20ae 	movw	r0, #686	; 0x2ae
    66c8:	2400      	movs	r4, #0
    66ca:	f7ff f87d 	bl	57c8 <dbgPrint(unsigned short)>
    66ce:	e7c7      	b.n	6660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
  bool isOpen() const {return m_fFile || m_xFile;}
    66d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    66d2:	2c00      	cmp	r4, #0
    66d4:	f47f af7a 	bne.w	65cc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x20>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    66d8:	f240 209f 	movw	r0, #671	; 0x29f
    66dc:	ad04      	add	r5, sp, #16
    66de:	4e09      	ldr	r6, [pc, #36]	; (6704 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x158>)
    66e0:	f7ff f872 	bl	57c8 <dbgPrint(unsigned short)>
    66e4:	e7c1      	b.n	666a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xbe>
    66e6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    66e8:	2c00      	cmp	r4, #0
    66ea:	f47f af7c 	bne.w	65e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x3a>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    66ee:	ad04      	add	r5, sp, #16
    66f0:	ae18      	add	r6, sp, #96	; 0x60
    66f2:	4628      	mov	r0, r5
    66f4:	f004 f8a4 	bl	a840 <FsBaseFile::close()>
    66f8:	f240 20a2 	movw	r0, #674	; 0x2a2
    66fc:	f7ff f864 	bl	57c8 <dbgPrint(unsigned short)>
    6700:	e7ae      	b.n	6660 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0xb4>
    6702:	bf00      	nop
    6704:	20000c50 	.word	0x20000c50

00006708 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    6708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    670c:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    6710:	f1b3 3fff 	cmp.w	r3, #4294967295
    6714:	bf14      	ite	ne
    6716:	461f      	movne	r7, r3
    6718:	4617      	moveq	r7, r2
  { 
    671a:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    671c:	460a      	mov	r2, r1
  { 
    671e:	460e      	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    6720:	4601      	mov	r1, r0
    6722:	a882      	add	r0, sp, #520	; 0x208
    6724:	f7ff fa6e 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6728:	463a      	mov	r2, r7
    672a:	4621      	mov	r1, r4
    672c:	a8c6      	add	r0, sp, #792	; 0x318
    672e:	f7ff fa69 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    6732:	f89d 8214 	ldrb.w	r8, [sp, #532]	; 0x214
    6736:	f1b8 0f00 	cmp.w	r8, #0
    673a:	d022      	beq.n	6782 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x7a>
      ScanDir(p1.store+1,handle);
    673c:	f8bd 1216 	ldrh.w	r1, [sp, #534]	; 0x216
    6740:	4632      	mov	r2, r6
    6742:	4620      	mov	r0, r4
    6744:	3101      	adds	r1, #1
    6746:	f7ff fcaf 	bl	60a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    674a:	f89d 3214 	ldrb.w	r3, [sp, #532]	; 0x214
    674e:	6821      	ldr	r1, [r4, #0]
    6750:	a886      	add	r0, sp, #536	; 0x218
    6752:	3b00      	subs	r3, #0
    6754:	463a      	mov	r2, r7
    6756:	9000      	str	r0, [sp, #0]
    6758:	4620      	mov	r0, r4
    675a:	bf18      	it	ne
    675c:	2301      	movne	r3, #1
    675e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
    6760:	f8bd 1326 	ldrh.w	r1, [sp, #806]	; 0x326
    6764:	47a8      	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    6766:	6823      	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    6768:	4605      	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    676a:	4631      	mov	r1, r6
    676c:	f8bd 2326 	ldrh.w	r2, [sp, #806]	; 0x326
    6770:	4620      	mov	r0, r4
    6772:	6d5e      	ldr	r6, [r3, #84]	; 0x54
    6774:	462b      	mov	r3, r5
    6776:	47b0      	blx	r6
  }
    6778:	4628      	mov	r0, r5
    677a:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    6782:	a986      	add	r1, sp, #536	; 0x218
    6784:	f44f 7280 	mov.w	r2, #256	; 0x100
    6788:	f50d 6087 	add.w	r0, sp, #1080	; 0x438
    678c:	f00b fed6 	bl	1253c <strlcpy>
  { uint32_t new_record = index_entries_++;
    6790:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    6794:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
    6798:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    679a:	1c6b      	adds	r3, r5, #1
    WriteIndexRecord(new_record, r);
    679c:	4629      	mov	r1, r5
      r.parent = newParent;
    679e:	f8cd 7428 	str.w	r7, [sp, #1064]	; 0x428
  { uint32_t new_record = index_entries_++;
    67a2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
      r.store = p2.store;
    67a6:	f8bd 3326 	ldrh.w	r3, [sp, #806]	; 0x326
      r.child = 0;
    67aa:	f8cd 842c 	str.w	r8, [sp, #1068]	; 0x42c
      r.store = p2.store;
    67ae:	f8ad 3436 	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    67b2:	9bc7      	ldr	r3, [sp, #796]	; 0x31c
      r.isdir = 0;
    67b4:	f8ad 8434 	strh.w	r8, [sp, #1076]	; 0x434
      r.sibling = p2.child;
    67b8:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    WriteIndexRecord(new_record, r);
    67bc:	f7ff f982 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent, p2);
    67c0:	4639      	mov	r1, r7
    67c2:	aac6      	add	r2, sp, #792	; 0x318
    67c4:	4620      	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    67c6:	af42      	add	r7, sp, #264	; 0x108
      newHandle = p2.child = AppendIndexRecord(r);
    67c8:	95c7      	str	r5, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    67ca:	f7ff f97b 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    67ce:	4631      	mov	r1, r6
    67d0:	aa02      	add	r2, sp, #8
    67d2:	f44f 7380 	mov.w	r3, #256	; 0x100
    67d6:	4620      	mov	r0, r4
    67d8:	f7ff fad6 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    67dc:	4606      	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    67de:	463a      	mov	r2, r7
    67e0:	4629      	mov	r1, r5
    67e2:	f44f 7380 	mov.w	r3, #256	; 0x100
    67e6:	4620      	mov	r0, r4
    67e8:	f7ff face 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    67ec:	aa02      	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    67ee:	4603      	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    67f0:	4631      	mov	r1, r6
    67f2:	1d20      	adds	r0, r4, #4
    67f4:	9700      	str	r7, [sp, #0]
    67f6:	f7ff fed9 	bl	65ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
  }
    67fa:	4628      	mov	r0, r5
    67fc:	f50d 6da7 	add.w	sp, sp, #1336	; 0x538
    6800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006804 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    6804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6808:	f5ad 6dd0 	sub.w	sp, sp, #1664	; 0x680
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    680c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6810:	bf14      	ite	ne
    6812:	4698      	movne	r8, r3
    6814:	4690      	moveq	r8, r2
{ // assume handle and newHandle point to existing directories
    6816:	4604      	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    6818:	460a      	mov	r2, r1
    681a:	4601      	mov	r1, r0
    681c:	a890      	add	r0, sp, #576	; 0x240
    681e:	f7ff f9f1 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    6822:	4642      	mov	r2, r8
    6824:	4621      	mov	r1, r4
    6826:	a8d4      	add	r0, sp, #848	; 0x350
  Record p1=ReadIndexRecord(handle);
    6828:	f8bd 724e 	ldrh.w	r7, [sp, #590]	; 0x24e
  Record p2=ReadIndexRecord(newHandle);
    682c:	f7ff f9ea 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    6830:	9e91      	ldr	r6, [sp, #580]	; 0x244
  while(ix)
    6832:	2e00      	cmp	r6, #0
    6834:	f000 8082 	beq.w	693c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x138>
  uint32_t iy= 0;
    6838:	2500      	movs	r5, #0
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    683a:	f104 0904 	add.w	r9, r4, #4
    683e:	e025      	b.n	688c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
      sd_mkdir(py.store,newfilename);
    6840:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
  FatFile() {}
    6844:	f04f 0c00 	mov.w	ip, #0
    return sub.mkdir(vwd(), path, pFlag);
    6848:	aa50      	add	r2, sp, #320	; 0x140
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
    684a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    684e:	6d99      	ldr	r1, [r3, #88]	; 0x58
    6850:	2301      	movs	r3, #1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6852:	f8d1 0480 	ldr.w	r0, [r1, #1152]	; 0x480
    6856:	2800      	cmp	r0, #0
    6858:	d063      	beq.n	6922 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x11e>
    685a:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    685e:	a802      	add	r0, sp, #8
    6860:	f8cd c008 	str.w	ip, [sp, #8]
    6864:	f002 f926 	bl	8ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
      ScanDir(p1.store,ix); 
    6868:	4632      	mov	r2, r6
    686a:	4639      	mov	r1, r7
    686c:	4620      	mov	r0, r4
    686e:	f7ff fc1b 	bl	60a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    6872:	6821      	ldr	r1, [r4, #0]
    6874:	462b      	mov	r3, r5
    6876:	f8bd 235e 	ldrh.w	r2, [sp, #862]	; 0x35e
    687a:	f8d1 a054 	ldr.w	sl, [r1, #84]	; 0x54
    687e:	4620      	mov	r0, r4
    6880:	4631      	mov	r1, r6
    6882:	47d0      	blx	sl
    ix = px.sibling;
    6884:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    6888:	2e00      	cmp	r6, #0
    688a:	d03f      	beq.n	690c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>
    Record px = ReadIndexRecord(ix) ;
    688c:	4632      	mov	r2, r6
    688e:	4621      	mov	r1, r4
    6890:	f50d 608c 	add.w	r0, sp, #1120	; 0x460
    6894:	f7ff f9b6 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    6898:	f50d 618c 	add.w	r1, sp, #1120	; 0x460
    689c:	f44f 7288 	mov.w	r2, #272	; 0x110
    68a0:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    68a4:	f007 fd36 	bl	e314 <memcpy>
    py.sibling = iy;
    68a8:	f8cd 5578 	str.w	r5, [sp, #1400]	; 0x578
  { uint32_t new_record = index_entries_++;
    68ac:	f8d4 51a8 	ldr.w	r5, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    68b0:	f50d 62ae 	add.w	r2, sp, #1392	; 0x570
    py.store = p2.store;
    68b4:	f8bd 135e 	ldrh.w	r1, [sp, #862]	; 0x35e
    WriteIndexRecord(new_record, r);
    68b8:	4620      	mov	r0, r4
  { uint32_t new_record = index_entries_++;
    68ba:	1c6b      	adds	r3, r5, #1
    py.parent = newHandle;
    68bc:	f8cd 8570 	str.w	r8, [sp, #1392]	; 0x570
    py.store = p2.store;
    68c0:	f8ad 157e 	strh.w	r1, [sp, #1406]	; 0x57e
    WriteIndexRecord(new_record, r);
    68c4:	4629      	mov	r1, r5
  { uint32_t new_record = index_entries_++;
    68c6:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    68ca:	f7ff f8fb 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    68ce:	4631      	mov	r1, r6
    68d0:	aa10      	add	r2, sp, #64	; 0x40
    68d2:	f44f 7380 	mov.w	r3, #256	; 0x100
    68d6:	4620      	mov	r0, r4
    68d8:	f7ff fa56 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    68dc:	aa50      	add	r2, sp, #320	; 0x140
    68de:	4629      	mov	r1, r5
    68e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    68e4:	4620      	mov	r0, r4
    68e6:	f7ff fa4f 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    68ea:	f89d 357c 	ldrb.w	r3, [sp, #1404]	; 0x57c
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    68ee:	aa10      	add	r2, sp, #64	; 0x40
    68f0:	4639      	mov	r1, r7
    68f2:	4648      	mov	r0, r9
    if(py.isdir) 
    68f4:	2b00      	cmp	r3, #0
    68f6:	d1a3      	bne.n	6840 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x3c>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    68f8:	ae50      	add	r6, sp, #320	; 0x140
    68fa:	f8bd 357e 	ldrh.w	r3, [sp, #1406]	; 0x57e
    68fe:	9600      	str	r6, [sp, #0]
    6900:	f7ff fe54 	bl	65ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    ix = px.sibling;
    6904:	f8dd 6468 	ldr.w	r6, [sp, #1128]	; 0x468
  while(ix)
    6908:	2e00      	cmp	r6, #0
    690a:	d1bf      	bne.n	688c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x88>
  WriteIndexRecord(newHandle,p2);
    690c:	4620      	mov	r0, r4
    690e:	aad4      	add	r2, sp, #848	; 0x350
    6910:	4641      	mov	r1, r8
  p2.child=iy;
    6912:	95d5      	str	r5, [sp, #852]	; 0x354
  WriteIndexRecord(newHandle,p2);
    6914:	f7ff f8d6 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    6918:	2001      	movs	r0, #1
    691a:	f50d 6dd0 	add.w	sp, sp, #1664	; 0x680
    691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6922:	f8d1 1484 	ldr.w	r1, [r1, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6926:	2900      	cmp	r1, #0
    6928:	d09e      	beq.n	6868 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  ExFatFile() {}
    692a:	900e      	str	r0, [sp, #56]	; 0x38
    return sub.mkdir(vwd(), path, pFlag);
    692c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6930:	a802      	add	r0, sp, #8
    6932:	2301      	movs	r3, #1
    6934:	aa50      	add	r2, sp, #320	; 0x140
    6936:	f001 f999 	bl	7c6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    693a:	e795      	b.n	6868 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x64>
  uint32_t iy= 0;
    693c:	4635      	mov	r5, r6
    693e:	e7e5      	b.n	690c <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x108>

00006940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    6940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6944:	461d      	mov	r5, r3
    6946:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    694a:	b08e      	sub	sp, #56	; 0x38
    694c:	460e      	mov	r6, r1
    694e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6950:	4604      	mov	r4, r0
    6952:	4690      	mov	r8, r2
    6954:	9f14      	ldr	r7, [sp, #80]	; 0x50
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    6956:	f8d3 1480 	ldr.w	r1, [r3, #1152]	; 0x480
    695a:	b199      	cbz	r1, 6984 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x44>
    695c:	2300      	movs	r3, #0
    695e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    6962:	463a      	mov	r2, r7
    6964:	4668      	mov	r0, sp
    6966:	9300      	str	r3, [sp, #0]
    6968:	2301      	movs	r3, #1
    696a:	f002 f8a3 	bl	8ab4 <FatFile::mkdir(FatFile*, char const*, bool)>

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    696e:	b1b0      	cbz	r0, 699e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    6970:	462b      	mov	r3, r5
    6972:	4642      	mov	r2, r8
    6974:	4631      	mov	r1, r6
    6976:	4620      	mov	r0, r4
    6978:	9714      	str	r7, [sp, #80]	; 0x50
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    697a:	b00e      	add	sp, #56	; 0x38
    697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6980:	f000 b816 	b.w	69b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
    6984:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    6988:	b14b      	cbz	r3, 699e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x5e>
    698a:	910c      	str	r1, [sp, #48]	; 0x30
    698c:	463a      	mov	r2, r7
    698e:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6992:	4668      	mov	r0, sp
    6994:	2301      	movs	r3, #1
    6996:	f001 f969 	bl	7c6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    699a:	2800      	cmp	r0, #0
    699c:	d1e8      	bne.n	6970 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x30>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    699e:	f44f 702e 	mov.w	r0, #696	; 0x2b8
    69a2:	f7fe ff11 	bl	57c8 <dbgPrint(unsigned short)>
}
    69a6:	2000      	movs	r0, #0
    69a8:	b00e      	add	sp, #56	; 0x38
    69aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69ae:	bf00      	nop

000069b0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    69b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69b4:	461f      	mov	r7, r3
    69b6:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    69ba:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
    69be:	460d      	mov	r5, r1
    69c0:	4619      	mov	r1, r3
    69c2:	4604      	mov	r4, r0
  FsFile f1=sd_open(store0,oldfilename,FILE_READ);
    69c4:	9302      	str	r3, [sp, #8]
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    69c6:	a812      	add	r0, sp, #72	; 0x48
    69c8:	2300      	movs	r3, #0
    69ca:	6d49      	ldr	r1, [r1, #84]	; 0x54
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    69cc:	4616      	mov	r6, r2
    69ce:	f8dd a310 	ldr.w	sl, [sp, #784]	; 0x310
    69d2:	f004 f84f 	bl	aa74 <FsVolume::open(char const*, int)>
    69d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    69d8:	2b00      	cmp	r3, #0
    69da:	f000 8101 	beq.w	6be0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x230>
    69de:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    69e2:	f8df 9244 	ldr.w	r9, [pc, #580]	; 6c28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    69e6:	f8df b244 	ldr.w	fp, [pc, #580]	; 6c2c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x27c>
    69ea:	e01b      	b.n	6a24 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x74>
    return m_fFile ? m_fFile->getName(name, len) :
    69ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    69f0:	a97a      	add	r1, sp, #488	; 0x1e8
    69f2:	f003 fb45 	bl	a080 <FatFile::getName(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    69f6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    69f8:	2b00      	cmp	r3, #0
    69fa:	d067      	beq.n	6acc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11c>
        if(f2.isDirectory())
    69fc:	781b      	ldrb	r3, [r3, #0]
    69fe:	f013 0f70 	tst.w	r3, #112	; 0x70
    6a02:	d06a      	beq.n	6ada <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6a04:	ab7a      	add	r3, sp, #488	; 0x1e8
    6a06:	aa3a      	add	r2, sp, #232	; 0xe8
    6a08:	4629      	mov	r1, r5
    6a0a:	4620      	mov	r0, r4
    6a0c:	9300      	str	r3, [sp, #0]
    6a0e:	463b      	mov	r3, r7
    6a10:	f7ff ff96 	bl	6940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6a14:	2800      	cmp	r0, #0
    6a16:	f000 80f6 	beq.w	6c06 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x256>
  ~FsBaseFile() {close();}
    6a1a:	a82a      	add	r0, sp, #168	; 0xa8
    6a1c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6a20:	f003 ff0e 	bl	a840 <FsBaseFile::close()>
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    6a24:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a28:	4631      	mov	r1, r6
    6a2a:	a83a      	add	r0, sp, #232	; 0xe8
    6a2c:	f00b fd86 	bl	1253c <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    6a30:	a83a      	add	r0, sp, #232	; 0xe8
    6a32:	f00c f8e5 	bl	12c00 <strlen>
    6a36:	ab3a      	add	r3, sp, #232	; 0xe8
    6a38:	4418      	add	r0, r3
    6a3a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6a3e:	2b2f      	cmp	r3, #47	; 0x2f
    6a40:	d005      	beq.n	6a4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x9e>
    6a42:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a46:	4659      	mov	r1, fp
    6a48:	a83a      	add	r0, sp, #232	; 0xe8
    6a4a:	f00b fd43 	bl	124d4 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    6a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a52:	4651      	mov	r1, sl
    6a54:	a87a      	add	r0, sp, #488	; 0x1e8
    6a56:	f00b fd71 	bl	1253c <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    6a5a:	a87a      	add	r0, sp, #488	; 0x1e8
    6a5c:	f00c f8d0 	bl	12c00 <strlen>
    6a60:	ab7a      	add	r3, sp, #488	; 0x1e8
    6a62:	4418      	add	r0, r3
    6a64:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    6a68:	2b2f      	cmp	r3, #47	; 0x2f
    6a6a:	d005      	beq.n	6a78 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xc8>
    6a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a70:	4659      	mov	r1, fp
    6a72:	a87a      	add	r0, sp, #488	; 0x1e8
    6a74:	f00b fd2e 	bl	124d4 <strlcat>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6a78:	4b69      	ldr	r3, [pc, #420]	; (6c20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x270>)
	constexpr Print() : write_error(0) {}
    6a7a:	2200      	movs	r2, #0
    tmpFile.openNext(this, oflag);
    6a7c:	4641      	mov	r1, r8
    6a7e:	a82a      	add	r0, sp, #168	; 0xa8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6a80:	9326      	str	r3, [sp, #152]	; 0x98
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6a86:	9227      	str	r2, [sp, #156]	; 0x9c
    6a88:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
    6a8c:	9328      	str	r3, [sp, #160]	; 0xa0
  FsBaseFile() {}
    6a8e:	e9cd 2238 	strd	r2, r2, [sp, #224]	; 0xe0
    tmpFile.openNext(this, oflag);
    6a92:	f003 ff41 	bl	a918 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6a96:	9838      	ldr	r0, [sp, #224]	; 0xe0
    6a98:	2200      	movs	r2, #0
    6a9a:	2800      	cmp	r0, #0
    6a9c:	d055      	beq.n	6b4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x19a>
    *name = 0;
    6a9e:	f88d 20e8 	strb.w	r2, [sp, #232]	; 0xe8
    return m_fFile ? m_fFile->getName(name, len) :
    6aa2:	a93a      	add	r1, sp, #232	; 0xe8
    6aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6aa8:	f003 faea 	bl	a080 <FatFile::getName(char*, unsigned int)>
    *name = 0;
    6aac:	2300      	movs	r3, #0
    return m_fFile ? m_fFile->getName(name, len) :
    6aae:	9838      	ldr	r0, [sp, #224]	; 0xe0
    *name = 0;
    6ab0:	f88d 31e8 	strb.w	r3, [sp, #488]	; 0x1e8
    return m_fFile ? m_fFile->getName(name, len) :
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d199      	bne.n	69ec <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x3c>
    6ab8:	9839      	ldr	r0, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->getName(name, len) : 0;
    6aba:	b170      	cbz	r0, 6ada <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    return getName8(name, size);
    6abc:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ac0:	a97a      	add	r1, sp, #488	; 0x1e8
    6ac2:	f001 fb17 	bl	80f4 <ExFatFile::getName8(char*, unsigned int)>
    return m_fFile ? m_fFile->isDir() :
    6ac6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    6ac8:	2b00      	cmp	r3, #0
    6aca:	d197      	bne.n	69fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x4c>
    6acc:	9b39      	ldr	r3, [sp, #228]	; 0xe4
           m_xFile ? m_xFile->isDir() : false;
    6ace:	b123      	cbz	r3, 6ada <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x12a>
    6ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    6ad4:	f013 0f50 	tst.w	r3, #80	; 0x50
    6ad8:	d194      	bne.n	6a04 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x54>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6ada:	ab7a      	add	r3, sp, #488	; 0x1e8
    6adc:	aa3a      	add	r2, sp, #232	; 0xe8
    6ade:	4629      	mov	r1, r5
    6ae0:	4620      	mov	r0, r4
    6ae2:	9300      	str	r3, [sp, #0]
    6ae4:	463b      	mov	r3, r7
    6ae6:	f7ff fd61 	bl	65ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6aea:	2800      	cmp	r0, #0
    6aec:	f000 8086 	beq.w	6bfc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x24c>
							  return write((const uint8_t *)str, strlen(str)); }
    6af0:	a83a      	add	r0, sp, #232	; 0xe8
    6af2:	f00c f885 	bl	12c00 <strlen>
    6af6:	4601      	mov	r1, r0
    6af8:	a83a      	add	r0, sp, #232	; 0xe8
    6afa:	f009 f98b 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6afe:	4849      	ldr	r0, [pc, #292]	; (6c24 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x274>)
    6b00:	f006 fe00 	bl	d704 <Print::println()>
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6b04:	9b02      	ldr	r3, [sp, #8]
    6b06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->remove(path) :
    6b08:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6b0c:	b343      	cbz	r3, 6b60 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1b0>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6b0e:	4619      	mov	r1, r3
    6b10:	2300      	movs	r3, #0
    6b12:	aa3a      	add	r2, sp, #232	; 0xe8
    6b14:	a804      	add	r0, sp, #16
    6b16:	9304      	str	r3, [sp, #16]
    6b18:	2301      	movs	r3, #1
    6b1a:	f002 f8c3 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    6b1e:	2800      	cmp	r0, #0
    6b20:	d157      	bne.n	6bd2 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x222>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    6b22:	f44f 7035 	mov.w	r0, #724	; 0x2d4
    6b26:	f7fe fe4f 	bl	57c8 <dbgPrint(unsigned short)>
  ~FsBaseFile() {close();}
    6b2a:	a82a      	add	r0, sp, #168	; 0xa8
    6b2c:	2400      	movs	r4, #0
    6b2e:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6b32:	f003 fe85 	bl	a840 <FsBaseFile::close()>
    6b36:	4640      	mov	r0, r8
    6b38:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    6b3c:	f003 fe80 	bl	a840 <FsBaseFile::close()>
}
    6b40:	4620      	mov	r0, r4
    6b42:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    6b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    6b4a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    6b4c:	b1db      	cbz	r3, 6b86 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x1d6>
    *name = 0;
    6b4e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
    6b52:	f44f 7280 	mov.w	r2, #256	; 0x100
    6b56:	4618      	mov	r0, r3
    6b58:	a93a      	add	r1, sp, #232	; 0xe8
    6b5a:	f001 facb 	bl	80f4 <ExFatFile::getName8(char*, unsigned int)>
    6b5e:	e7a5      	b.n	6aac <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xfc>
    6b60:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6b64:	2900      	cmp	r1, #0
    6b66:	d0dc      	beq.n	6b22 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ExFatFile() {}
    6b68:	9310      	str	r3, [sp, #64]	; 0x40
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6b6a:	aa3a      	add	r2, sp, #232	; 0xe8
    6b6c:	2301      	movs	r3, #1
    6b6e:	a804      	add	r0, sp, #16
    6b70:	f000 fde8 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6b74:	2800      	cmp	r0, #0
    6b76:	d0d4      	beq.n	6b22 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
    6b78:	a804      	add	r0, sp, #16
    6b7a:	f000 fe47 	bl	780c <ExFatFile::remove()>
    6b7e:	2800      	cmp	r0, #0
    6b80:	f47f af4b 	bne.w	6a1a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6b84:	e7cd      	b.n	6b22 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  ~FsBaseFile() {close();}
    6b86:	a82a      	add	r0, sp, #168	; 0xa8
    6b88:	9303      	str	r3, [sp, #12]
    6b8a:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
    6b8e:	f003 fe57 	bl	a840 <FsBaseFile::close()>
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    6b92:	9b02      	ldr	r3, [sp, #8]
    6b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    return m_fVol ? m_fVol->rmdir(path) :
    6b96:	f8d2 0480 	ldr.w	r0, [r2, #1152]	; 0x480
    6b9a:	b170      	cbz	r0, 6bba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x20a>
    6b9c:	9b03      	ldr	r3, [sp, #12]
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6b9e:	4601      	mov	r1, r0
    6ba0:	4632      	mov	r2, r6
    6ba2:	a826      	add	r0, sp, #152	; 0x98
    6ba4:	9326      	str	r3, [sp, #152]	; 0x98
    6ba6:	f002 f87d 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    6baa:	4604      	mov	r4, r0
    6bac:	2800      	cmp	r0, #0
    6bae:	d0c2      	beq.n	6b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6bb0:	a826      	add	r0, sp, #152	; 0x98
    6bb2:	f002 facb 	bl	914c <FatFile::rmdir()>
    6bb6:	4604      	mov	r4, r0
    6bb8:	e7bd      	b.n	6b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6bba:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    6bbe:	b131      	cbz	r1, 6bce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    6bc0:	4603      	mov	r3, r0
    6bc2:	9032      	str	r0, [sp, #200]	; 0xc8
    6bc4:	4632      	mov	r2, r6
    6bc6:	a826      	add	r0, sp, #152	; 0x98
    6bc8:	f000 fdbc 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6bcc:	bb00      	cbnz	r0, 6c10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x260>
    6bce:	2400      	movs	r4, #0
    6bd0:	e7b1      	b.n	6b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6bd2:	a804      	add	r0, sp, #16
    6bd4:	f003 f8c6 	bl	9d64 <FatFile::remove()>
    6bd8:	2800      	cmp	r0, #0
    6bda:	f47f af1e 	bne.w	6a1a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x6a>
    6bde:	e7a0      	b.n	6b22 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x172>
  bool isOpen() const {return m_fFile || m_xFile;}
    6be0:	9925      	ldr	r1, [sp, #148]	; 0x94
    6be2:	2900      	cmp	r1, #0
    6be4:	f47f aefb 	bne.w	69de <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2e>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    6be8:	f240 20bb 	movw	r0, #699	; 0x2bb
    6bec:	460c      	mov	r4, r1
    6bee:	f10d 0858 	add.w	r8, sp, #88	; 0x58
    6bf2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 6c28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x278>
    6bf6:	f7fe fde7 	bl	57c8 <dbgPrint(unsigned short)>
    6bfa:	e79c      	b.n	6b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6bfc:	f240 20d3 	movw	r0, #723	; 0x2d3
    6c00:	f7fe fde2 	bl	57c8 <dbgPrint(unsigned short)>
    6c04:	e791      	b.n	6b2a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    6c06:	f240 20cf 	movw	r0, #719	; 0x2cf
    6c0a:	f7fe fddd 	bl	57c8 <dbgPrint(unsigned short)>
    6c0e:	e78c      	b.n	6b2a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x17a>
    6c10:	a826      	add	r0, sp, #152	; 0x98
    6c12:	f000 fe55 	bl	78c0 <ExFatFile::rmdir()>
    6c16:	4604      	mov	r4, r0
    6c18:	2800      	cmp	r0, #0
    6c1a:	d0d8      	beq.n	6bce <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x21e>
    6c1c:	e78b      	b.n	6b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x186>
    6c1e:	bf00      	nop
    6c20:	20000d78 	.word	0x20000d78
    6c24:	20008b94 	.word	0x20008b94
    6c28:	20000c50 	.word	0x20000c50
    6c2c:	20000b50 	.word	0x20000b50

00006c30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    6c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c34:	460d      	mov	r5, r1
    6c36:	f6ad 2dcc 	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    6c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c3e:	bf14      	ite	ne
    6c40:	461f      	movne	r7, r3
    6c42:	4617      	moveq	r7, r2
  { 
    6c44:	4604      	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    6c46:	4601      	mov	r1, r0
    6c48:	462a      	mov	r2, r5
    6c4a:	a8d6      	add	r0, sp, #856	; 0x358
    6c4c:	f7fe ffda 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    6c50:	463a      	mov	r2, r7
    6c52:	4621      	mov	r1, r4
    6c54:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
    6c58:	f7fe ffd4 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    6c5c:	9ad6      	ldr	r2, [sp, #856]	; 0x358
    6c5e:	4621      	mov	r1, r4
    6c60:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    6c64:	f7fe ffce 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    6c68:	f89d 3364 	ldrb.w	r3, [sp, #868]	; 0x364
    6c6c:	b123      	cbz	r3, 6c78 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    { if(!p1.scanned) 
    6c6e:	f89d 3365 	ldrb.w	r3, [sp, #869]	; 0x365
    6c72:	2b00      	cmp	r3, #0
    6c74:	f000 80f2 	beq.w	6e5c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x22c>
    Record p1o = p1;
    6c78:	f44f 7288 	mov.w	r2, #272	; 0x110
    6c7c:	a9d6      	add	r1, sp, #856	; 0x358
    6c7e:	f50d 60d1 	add.w	r0, sp, #1672	; 0x688
    6c82:	f007 fb47 	bl	e314 <memcpy>
    Record p2o = p2;
    6c86:	f44f 7288 	mov.w	r2, #272	; 0x110
    6c8a:	f50d 618d 	add.w	r1, sp, #1128	; 0x468
    6c8e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    6c92:	f007 fb3f 	bl	e314 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    6c96:	f44f 7380 	mov.w	r3, #256	; 0x100
    6c9a:	aa56      	add	r2, sp, #344	; 0x158
    6c9c:	4629      	mov	r1, r5
    6c9e:	4620      	mov	r0, r4
    6ca0:	f7ff f872 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    6ca4:	f8dd 657c 	ldr.w	r6, [sp, #1404]	; 0x57c
    6ca8:	42ae      	cmp	r6, r5
    6caa:	f000 8096 	beq.w	6dda <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1aa>
        px = ReadIndexRecord(jx); 
    6cae:	4632      	mov	r2, r6
    6cb0:	4621      	mov	r1, r4
    6cb2:	a804      	add	r0, sp, #16
    6cb4:	f7fe ffa6 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6cb8:	f44f 7288 	mov.w	r2, #272	; 0x110
    6cbc:	a904      	add	r1, sp, #16
    6cbe:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    6cc2:	f007 fb27 	bl	e314 <memcpy>
        pxo = px;
    6cc6:	f44f 7288 	mov.w	r2, #272	; 0x110
    6cca:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    6cce:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    6cd2:	f007 fb1f 	bl	e314 <memcpy>
        while(handle != px.sibling)
    6cd6:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    6cda:	4295      	cmp	r5, r2
    6cdc:	d017      	beq.n	6d0e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xde>
          px = ReadIndexRecord(jx); 
    6cde:	4621      	mov	r1, r4
    6ce0:	a804      	add	r0, sp, #16
    6ce2:	4616      	mov	r6, r2
    6ce4:	f7fe ff8e 	bl	5c04 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    6ce8:	f44f 7288 	mov.w	r2, #272	; 0x110
    6cec:	a904      	add	r1, sp, #16
    6cee:	f60d 10b8 	addw	r0, sp, #2488	; 0x9b8
    6cf2:	f007 fb0f 	bl	e314 <memcpy>
          pxo = px;
    6cf6:	f44f 7288 	mov.w	r2, #272	; 0x110
    6cfa:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
    6cfe:	f60d 00a8 	addw	r0, sp, #2216	; 0x8a8
    6d02:	f007 fb07 	bl	e314 <memcpy>
        while(handle != px.sibling)
    6d06:	f8dd 29c0 	ldr.w	r2, [sp, #2496]	; 0x9c0
    6d0a:	42aa      	cmp	r2, r5
    6d0c:	d1e7      	bne.n	6cde <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xae>
        px.sibling = p1.sibling;
    6d0e:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(jx, px);
    6d10:	f60d 12b8 	addw	r2, sp, #2488	; 0x9b8
    6d14:	4631      	mov	r1, r6
    6d16:	4620      	mov	r0, r4
        px.sibling = p1.sibling;
    6d18:	f8cd 39c0 	str.w	r3, [sp, #2496]	; 0x9c0
        WriteIndexRecord(jx, px);
    6d1c:	f7fe fed2 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.sibling = p2.child;
    6d20:	f8dd 346c 	ldr.w	r3, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    6d24:	aad6      	add	r2, sp, #856	; 0x358
    6d26:	4629      	mov	r1, r5
    6d28:	4620      	mov	r0, r4
      p1.sibling = p2.child;
    6d2a:	93d8      	str	r3, [sp, #864]	; 0x360
      p1.store = p2.store;
    6d2c:	f8bd 3476 	ldrh.w	r3, [sp, #1142]	; 0x476
      p1.parent = newParent;
    6d30:	97d6      	str	r7, [sp, #856]	; 0x358
      p1.store = p2.store;
    6d32:	f8ad 3366 	strh.w	r3, [sp, #870]	; 0x366
      p2.child = handle;
    6d36:	f8cd 546c 	str.w	r5, [sp, #1132]	; 0x46c
      WriteIndexRecord(handle, p1);
    6d3a:	f7fe fec3 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    6d3e:	f50d 628d 	add.w	r2, sp, #1128	; 0x468
    6d42:	4639      	mov	r1, r7
    6d44:	4620      	mov	r0, r4
    6d46:	f7fe febd 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    6d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    6d4e:	4629      	mov	r1, r5
    6d50:	aa96      	add	r2, sp, #600	; 0x258
    6d52:	4620      	mov	r0, r4
    6d54:	f7ff f818 	bl	5d88 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    6d58:	f8bd 1696 	ldrh.w	r1, [sp, #1686]	; 0x696
    6d5c:	f8bd 37a6 	ldrh.w	r3, [sp, #1958]	; 0x7a6
    6d60:	4299      	cmp	r1, r3
    6d62:	d046      	beq.n	6df2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6d64:	aa96      	add	r2, sp, #600	; 0x258
    else if(!p1o.isdir)
    6d66:	f89d 9694 	ldrb.w	r9, [sp, #1684]	; 0x694
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6d6a:	1d20      	adds	r0, r4, #4
    6d6c:	9200      	str	r2, [sp, #0]
    6d6e:	aa56      	add	r2, sp, #344	; 0x158
    else if(!p1o.isdir)
    6d70:	f1b9 0f00 	cmp.w	r9, #0
    6d74:	d00b      	beq.n	6d8e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x15e>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6d76:	f7ff fde3 	bl	6940 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    6d7a:	2800      	cmp	r0, #0
    6d7c:	f000 8092 	beq.w	6ea4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x274>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6d80:	f04f 0801 	mov.w	r8, #1
  }
    6d84:	4640      	mov	r0, r8
    6d86:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    6d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    6d8e:	f7ff fc0d 	bl	65ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    6d92:	4680      	mov	r8, r0
    6d94:	2800      	cmp	r0, #0
    6d96:	d044      	beq.n	6e22 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1f2>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6d98:	f8bd 57a6 	ldrh.w	r5, [sp, #1958]	; 0x7a6
							  return write((const uint8_t *)str, strlen(str)); }
    6d9c:	a856      	add	r0, sp, #344	; 0x158
    6d9e:	f00b ff2f 	bl	12c00 <strlen>
    6da2:	4601      	mov	r1, r0
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
    6da4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    6da8:	a856      	add	r0, sp, #344	; 0x158
    6daa:	f009 f833 	bl	fe14 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6dae:	484d      	ldr	r0, [pc, #308]	; (6ee4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2b4>)
    6db0:	f006 fca8 	bl	d704 <Print::println()>
    6db4:	6daa      	ldr	r2, [r5, #88]	; 0x58
    return m_fVol ? m_fVol->remove(path) :
    6db6:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d077      	beq.n	6eae <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x27e>
    6dbe:	4619      	mov	r1, r3
    6dc0:	aa56      	add	r2, sp, #344	; 0x158
    6dc2:	2301      	movs	r3, #1
    6dc4:	a848      	add	r0, sp, #288	; 0x120
    6dc6:	f8cd 9120 	str.w	r9, [sp, #288]	; 0x120
    6dca:	f001 ff6b 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    6dce:	2800      	cmp	r0, #0
    6dd0:	d0d8      	beq.n	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6dd2:	a848      	add	r0, sp, #288	; 0x120
    6dd4:	f002 ffc6 	bl	9d64 <FatFile::remove()>
    6dd8:	e7d4      	b.n	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
        p3.child = p1.sibling;
    6dda:	9bd8      	ldr	r3, [sp, #864]	; 0x360
        WriteIndexRecord(p1.parent, p3);    
    6ddc:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    6de0:	99d6      	ldr	r1, [sp, #856]	; 0x358
    6de2:	4620      	mov	r0, r4
        p3.child = p1.sibling;
    6de4:	f8cd 357c 	str.w	r3, [sp, #1404]	; 0x57c
    uint32_t jx=-1;
    6de8:	f04f 36ff 	mov.w	r6, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    6dec:	f7fe fe6a 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6df0:	e796      	b.n	6d20 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf0>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    6df2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    6df6:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    6df8:	f8d2 3480 	ldr.w	r3, [r2, #1152]	; 0x480
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d039      	beq.n	6e74 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x244>
  FatFile* vwd() {return &m_vwd;}
    6e00:	f503 6189 	add.w	r1, r3, #1096	; 0x448
    6e04:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6e06:	aa56      	add	r2, sp, #344	; 0x158
    6e08:	a848      	add	r0, sp, #288	; 0x120
    6e0a:	9103      	str	r1, [sp, #12]
    6e0c:	9348      	str	r3, [sp, #288]	; 0x120
    6e0e:	f001 fec7 	bl	8ba0 <FatFile::open(FatFile*, char const*, int)>
    6e12:	9903      	ldr	r1, [sp, #12]
    6e14:	2800      	cmp	r0, #0
    6e16:	d15c      	bne.n	6ed2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x2a2>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6e18:	f44f 700c 	mov.w	r0, #560	; 0x230
    6e1c:	f7fe fcd4 	bl	57c8 <dbgPrint(unsigned short)>
    6e20:	e003      	b.n	6e2a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    6e22:	f44f 700d 	mov.w	r0, #564	; 0x234
    6e26:	f7fe fccf 	bl	57c8 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6e2a:	4631      	mov	r1, r6
    6e2c:	f60d 02a8 	addw	r2, sp, #2216	; 0x8a8
    6e30:	4620      	mov	r0, r4
    return false;
    6e32:	f04f 0800 	mov.w	r8, #0
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    6e36:	f7fe fe45 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    6e3a:	f50d 62d1 	add.w	r2, sp, #1672	; 0x688
    6e3e:	4629      	mov	r1, r5
    6e40:	4620      	mov	r0, r4
    6e42:	f7fe fe3f 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    6e46:	4620      	mov	r0, r4
    6e48:	f50d 62f3 	add.w	r2, sp, #1944	; 0x798
    6e4c:	4639      	mov	r1, r7
    6e4e:	f7fe fe39 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    6e52:	4640      	mov	r0, r8
    6e54:	f60d 2dcc 	addw	sp, sp, #2764	; 0xacc
    6e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { ScanDir(p1.store, handle) ; // in case scan directory
    6e5c:	462a      	mov	r2, r5
    6e5e:	f8bd 1366 	ldrh.w	r1, [sp, #870]	; 0x366
    6e62:	4620      	mov	r0, r4
    6e64:	f7ff f920 	bl	60a8 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    6e68:	aad6      	add	r2, sp, #856	; 0x358
    6e6a:	4629      	mov	r1, r5
    6e6c:	4620      	mov	r0, r4
    6e6e:	f7fe fe29 	bl	5ac4 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    6e72:	e701      	b.n	6c78 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x48>
    6e74:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    6e78:	2900      	cmp	r1, #0
    6e7a:	d0cd      	beq.n	6e18 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
  ExFatFile* vwd() {return &m_vwd;}
    6e7c:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    6e80:	aa56      	add	r2, sp, #344	; 0x158
    6e82:	a848      	add	r0, sp, #288	; 0x120
    6e84:	9354      	str	r3, [sp, #336]	; 0x150
    6e86:	9103      	str	r1, [sp, #12]
    6e88:	f000 fbe0 	bl	764c <ExFatFile::open(ExFatFile*, char const*, int)>
    6e8c:	9903      	ldr	r1, [sp, #12]
    6e8e:	2800      	cmp	r0, #0
    6e90:	d0c2      	beq.n	6e18 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6e92:	aa96      	add	r2, sp, #600	; 0x258
    6e94:	a848      	add	r0, sp, #288	; 0x120
    6e96:	f000 fe67 	bl	7b68 <ExFatFile::rename(ExFatFile*, char const*)>
    6e9a:	4680      	mov	r8, r0
    6e9c:	2800      	cmp	r0, #0
    6e9e:	f47f af71 	bne.w	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6ea2:	e7b9      	b.n	6e18 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    6ea4:	f44f 700e 	mov.w	r0, #568	; 0x238
    6ea8:	f7fe fc8e 	bl	57c8 <dbgPrint(unsigned short)>
    6eac:	e7bd      	b.n	6e2a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1fa>
    6eae:	f8d2 1484 	ldr.w	r1, [r2, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    6eb2:	2900      	cmp	r1, #0
    6eb4:	f43f af64 	beq.w	6d80 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x150>
    6eb8:	9354      	str	r3, [sp, #336]	; 0x150
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6eba:	aa56      	add	r2, sp, #344	; 0x158
    6ebc:	2301      	movs	r3, #1
    6ebe:	a848      	add	r0, sp, #288	; 0x120
    6ec0:	f000 fc40 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6ec4:	2800      	cmp	r0, #0
    6ec6:	f43f af5d 	beq.w	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6eca:	a848      	add	r0, sp, #288	; 0x120
    6ecc:	f000 fc9e 	bl	780c <ExFatFile::remove()>
    6ed0:	e758      	b.n	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6ed2:	aa96      	add	r2, sp, #600	; 0x258
    6ed4:	a848      	add	r0, sp, #288	; 0x120
    6ed6:	f002 f843 	bl	8f60 <FatFile::rename(FatFile*, char const*)>
    6eda:	4680      	mov	r8, r0
    6edc:	2800      	cmp	r0, #0
    6ede:	f47f af51 	bne.w	6d84 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x154>
    6ee2:	e799      	b.n	6e18 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1e8>
    6ee4:	20008b94 	.word	0x20008b94

00006ee8 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6ee8:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    6eea:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6eee:	b084      	sub	sp, #16
    6ef0:	468c      	mov	ip, r1
    6ef2:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    6ef4:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    6ef6:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    6ef8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    6efc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    6f00:	ea4f 124c 	mov.w	r2, ip, lsl #5
    6f04:	4629      	mov	r1, r5
    6f06:	6a20      	ldr	r0, [r4, #32]
    6f08:	f001 fa88 	bl	841c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    6f0c:	2801      	cmp	r0, #1
    6f0e:	d106      	bne.n	6f1e <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    6f10:	4632      	mov	r2, r6
    6f12:	4629      	mov	r1, r5
    6f14:	6a20      	ldr	r0, [r4, #32]
    6f16:	f001 fa65 	bl	83e4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    6f1a:	b004      	add	sp, #16
    6f1c:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    6f1e:	2000      	movs	r0, #0
}
    6f20:	b004      	add	sp, #16
    6f22:	bd70      	pop	{r4, r5, r6, pc}

00006f24 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    6f24:	b510      	push	{r4, lr}
    6f26:	4604      	mov	r4, r0
  bool rtn = sync();
    6f28:	f000 fd96 	bl	7a58 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6f2c:	2300      	movs	r3, #0
    6f2e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6f32:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    6f36:	bd10      	pop	{r4, pc}

00006f38 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    6f38:	b538      	push	{r3, r4, r5, lr}
    6f3a:	460d      	mov	r5, r1
  if (isOpen()) {
    6f3c:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    6f40:	b109      	cbz	r1, 6f46 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    6f42:	2000      	movs	r0, #0
}
    6f44:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    6f46:	2238      	movs	r2, #56	; 0x38
    6f48:	4604      	mov	r4, r0
    6f4a:	f00b fa71 	bl	12430 <memset>
  m_flags = FILE_FLAG_READ;
    6f4e:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    6f50:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    6f52:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    6f54:	4618      	mov	r0, r3
    6f56:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    6f5a:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    6f5e:	bd38      	pop	{r3, r4, r5, pc}

00006f60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    6f60:	b4f0      	push	{r4, r5, r6, r7}
    6f62:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    6f64:	7809      	ldrb	r1, [r1, #0]
    6f66:	2920      	cmp	r1, #32
    6f68:	d103      	bne.n	6f72 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    6f6a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    6f6e:	2c20      	cmp	r4, #32
    6f70:	d0fb      	beq.n	6f6a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    6f72:	6015      	str	r5, [r2, #0]
  fname->end = path;
    6f74:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    6f76:	782c      	ldrb	r4, [r5, #0]
    6f78:	2c2f      	cmp	r4, #47	; 0x2f
    6f7a:	d011      	beq.n	6fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6f7c:	b184      	cbz	r4, 6fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6f7e:	1c6e      	adds	r6, r5, #1
    6f80:	2c3c      	cmp	r4, #60	; 0x3c
    6f82:	4f1d      	ldr	r7, [pc, #116]	; (6ff8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    6f84:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    6f86:	d82a      	bhi.n	6fde <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    6f88:	2c21      	cmp	r4, #33	; 0x21
    6f8a:	d812      	bhi.n	6fb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    6f8c:	f104 3cff 	add.w	ip, r4, #4294967295
    6f90:	f1bc 0f1e 	cmp.w	ip, #30
    6f94:	d816      	bhi.n	6fc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    6f96:	2000      	movs	r0, #0
    6f98:	bcf0      	pop	{r4, r5, r6, r7}
    6f9a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    6f9c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    6fa0:	2c20      	cmp	r4, #32
    6fa2:	d0fb      	beq.n	6f9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    6fa4:	2c2f      	cmp	r4, #47	; 0x2f
    6fa6:	d0f9      	beq.n	6f9c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    6fa8:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    6faa:	4611      	mov	r1, r2
}
    6fac:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    6fae:	f001 b907 	b.w	81c0 <ExFatFile::hashName(ExName_t*)>
    6fb2:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    6fb6:	fa5f fc8c 	uxtb.w	ip, ip
    6fba:	fa27 fc0c 	lsr.w	ip, r7, ip
    6fbe:	f01c 0f01 	tst.w	ip, #1
    6fc2:	d1e8      	bne.n	6f96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    6fc4:	2c2e      	cmp	r4, #46	; 0x2e
    6fc6:	d001      	beq.n	6fcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6fc8:	2c20      	cmp	r4, #32
    6fca:	d10d      	bne.n	6fe8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    6fcc:	f816 4b01 	ldrb.w	r4, [r6], #1
    6fd0:	2c00      	cmp	r4, #0
    6fd2:	d0e5      	beq.n	6fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    6fd4:	2c2f      	cmp	r4, #47	; 0x2f
    6fd6:	d0e3      	beq.n	6fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    6fd8:	2c3c      	cmp	r4, #60	; 0x3c
    6fda:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    6fdc:	d9d4      	bls.n	6f88 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    6fde:	2c5c      	cmp	r4, #92	; 0x5c
    6fe0:	d0d9      	beq.n	6f96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    6fe2:	d903      	bls.n	6fec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    6fe4:	2c7c      	cmp	r4, #124	; 0x7c
    6fe6:	d0d6      	beq.n	6f96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    6fe8:	6096      	str	r6, [r2, #8]
    6fea:	e7ef      	b.n	6fcc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    6fec:	3c3e      	subs	r4, #62	; 0x3e
    6fee:	2c01      	cmp	r4, #1
    6ff0:	d8fa      	bhi.n	6fe8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    6ff2:	2000      	movs	r0, #0
    6ff4:	bcf0      	pop	{r4, r5, r6, r7}
    6ff6:	4770      	bx	lr
    6ff8:	05002101 	.word	0x05002101

00006ffc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    6ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    7000:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7004:	b083      	sub	sp, #12
    7006:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    7008:	07dc      	lsls	r4, r3, #31
    700a:	d574      	bpl.n	70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    700c:	0658      	lsls	r0, r3, #25
    700e:	460f      	mov	r7, r1
    7010:	4690      	mov	r8, r2
    7012:	f140 80b0 	bpl.w	7176 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    7016:	e9d5 2300 	ldrd	r2, r3, [r5]
    701a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    701e:	eb18 0402 	adds.w	r4, r8, r2
    7022:	f143 0300 	adc.w	r3, r3, #0
    7026:	42a1      	cmp	r1, r4
    7028:	eb70 0303 	sbcs.w	r3, r0, r3
    702c:	f0c0 80a9 	bcc.w	7182 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    7030:	f1b8 0f00 	cmp.w	r8, #0
    7034:	d05b      	beq.n	70ee <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    7036:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7038:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    703c:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7040:	f8d5 a020 	ldr.w	sl, [r5, #32]
    7044:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    7048:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    704a:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    704e:	2c00      	cmp	r4, #0
    7050:	d170      	bne.n	7134 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    7052:	4313      	orrs	r3, r2
    7054:	d170      	bne.n	7138 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    7056:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    705a:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    705c:	bf4c      	ite	mi
    705e:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    7062:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    7064:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    7066:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    706a:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    706c:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    7070:	0a63      	lsrs	r3, r4, #9
    7072:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    7074:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    7078:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    707a:	f1bb 0f00 	cmp.w	fp, #0
    707e:	d145      	bne.n	710c <ExFatFile::read(void*, unsigned int)+0x110>
    7080:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    7084:	d342      	bcc.n	710c <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    7086:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    708a:	4291      	cmp	r1, r2
    708c:	d03e      	beq.n	710c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    708e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    7092:	d358      	bcc.n	7146 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7094:	f04f 0b01 	mov.w	fp, #1
    7098:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    709c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    70a0:	0a73      	lsrs	r3, r6, #9
    70a2:	459b      	cmp	fp, r3
    70a4:	bf28      	it	cs
    70a6:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    70a8:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    70aa:	ea4f 244b 	mov.w	r4, fp, lsl #9
    70ae:	d80a      	bhi.n	70c6 <ExFatFile::read(void*, unsigned int)+0xca>
    70b0:	eb01 030b 	add.w	r3, r1, fp
    70b4:	429a      	cmp	r2, r3
    70b6:	d206      	bcs.n	70c6 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    70b8:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    70bc:	9101      	str	r1, [sp, #4]
    70be:	f005 fda3 	bl	cc08 <FsCache::sync()>
    70c2:	9901      	ldr	r1, [sp, #4]
    70c4:	b1b8      	cbz	r0, 70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    70c6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    70ca:	465b      	mov	r3, fp
    70cc:	6802      	ldr	r2, [r0, #0]
    70ce:	f8d2 a014 	ldr.w	sl, [r2, #20]
    70d2:	463a      	mov	r2, r7
    70d4:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    70d6:	b170      	cbz	r0, 70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    70d8:	4623      	mov	r3, r4
    dst += n;
    70da:	4427      	add	r7, r4
    m_curPosition += n;
    70dc:	e9d5 1200 	ldrd	r1, r2, [r5]
    70e0:	185b      	adds	r3, r3, r1
    70e2:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    70e6:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    70e8:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    70ec:	d1a8      	bne.n	7040 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    70ee:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    70f0:	b003      	add	sp, #12
    70f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    70f6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    70fa:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    70fe:	f043 0302 	orr.w	r3, r3, #2
    7102:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    7106:	b003      	add	sp, #12
    7108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    710c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    7110:	2200      	movs	r2, #0
    7112:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    7116:	42b4      	cmp	r4, r6
    7118:	bf28      	it	cs
    711a:	4634      	movcs	r4, r6
    711c:	f005 fda0 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7120:	2800      	cmp	r0, #0
    7122:	d0e8      	beq.n	70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    7124:	eb00 010b 	add.w	r1, r0, fp
    7128:	4622      	mov	r2, r4
    712a:	4638      	mov	r0, r7
    712c:	f007 f8f2 	bl	e314 <memcpy>
    m_curPosition += n;
    7130:	4623      	mov	r3, r4
    7132:	e7d2      	b.n	70da <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    7134:	69aa      	ldr	r2, [r5, #24]
    7136:	e796      	b.n	7066 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    7138:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    713c:	065b      	lsls	r3, r3, #25
    713e:	d50e      	bpl.n	715e <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    7140:	69aa      	ldr	r2, [r5, #24]
    7142:	3201      	adds	r2, #1
    7144:	e78e      	b.n	7064 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    7146:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    714a:	463a      	mov	r2, r7
    714c:	6803      	ldr	r3, [r0, #0]
    714e:	691b      	ldr	r3, [r3, #16]
    7150:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7152:	2800      	cmp	r0, #0
    7154:	d0cf      	beq.n	70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
    7156:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    715a:	461c      	mov	r4, r3
    715c:	e7bd      	b.n	70da <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    715e:	464a      	mov	r2, r9
    7160:	4650      	mov	r0, sl
    7162:	69a9      	ldr	r1, [r5, #24]
    7164:	f001 f99c 	bl	84a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    7168:	2800      	cmp	r0, #0
    716a:	dbc4      	blt.n	70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    716c:	d00c      	beq.n	7188 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    716e:	f8d5 a020 	ldr.w	sl, [r5, #32]
    7172:	69aa      	ldr	r2, [r5, #24]
    7174:	e777      	b.n	7066 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    7176:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    717a:	0719      	lsls	r1, r3, #28
    717c:	f57f af58 	bpl.w	7030 <ExFatFile::read(void*, unsigned int)+0x34>
    7180:	e749      	b.n	7016 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    7182:	eba1 0802 	sub.w	r8, r1, r2
    7186:	e753      	b.n	7030 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    7188:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    718c:	f013 0f50 	tst.w	r3, #80	; 0x50
    7190:	d0b1      	beq.n	70f6 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    7192:	eba8 0806 	sub.w	r8, r8, r6
    7196:	4640      	mov	r0, r8
    7198:	e7aa      	b.n	70f0 <ExFatFile::read(void*, unsigned int)+0xf4>
    719a:	bf00      	nop

0000719c <ExFatFile::peek()>:
int ExFatFile::peek() {
    719c:	b5f0      	push	{r4, r5, r6, r7, lr}
    719e:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    71a0:	2201      	movs	r2, #1
    71a2:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    71a4:	6985      	ldr	r5, [r0, #24]
    71a6:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    71aa:	e9d0 6700 	ldrd	r6, r7, [r0]
    71ae:	f7ff ff25 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    71b2:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    71b4:	61a5      	str	r5, [r4, #24]
    71b6:	bf0c      	ite	eq
    71b8:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    71bc:	f04f 30ff 	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    71c0:	e9c4 6700 	strd	r6, r7, [r4]
}
    71c4:	b003      	add	sp, #12
    71c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000071c8 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    71c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71cc:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    71ce:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    71d2:	b083      	sub	sp, #12
    71d4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    71d6:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    71da:	2b00      	cmp	r3, #0
    71dc:	d051      	beq.n	7282 <ExFatFile::seekSet(unsigned long long)+0xba>
    71de:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    71e0:	e9d0 1c00 	ldrd	r1, ip, [r0]
    71e4:	45bc      	cmp	ip, r7
    71e6:	bf08      	it	eq
    71e8:	4291      	cmpeq	r1, r2
    71ea:	d05c      	beq.n	72a6 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    71ec:	ea56 0207 	orrs.w	r2, r6, r7
    71f0:	d04d      	beq.n	728e <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    71f2:	071d      	lsls	r5, r3, #28
    71f4:	d504      	bpl.n	7200 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    71f6:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    71fa:	42b0      	cmp	r0, r6
    71fc:	41ba      	sbcs	r2, r7
    71fe:	d340      	bcc.n	7282 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    7200:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    7204:	1e75      	subs	r5, r6, #1
    7206:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    720a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    720c:	f147 30ff 	adc.w	r0, r7, #4294967295
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7210:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    7214:	3209      	adds	r2, #9
    7216:	b2d2      	uxtb	r2, r2
    7218:	f1c2 0e20 	rsb	lr, r2, #32
    721c:	40d5      	lsrs	r5, r2
    721e:	f1a2 0920 	sub.w	r9, r2, #32
    7222:	fa00 fb0e 	lsl.w	fp, r0, lr
    7226:	fa20 f009 	lsr.w	r0, r0, r9
    722a:	ea45 050b 	orr.w	r5, r5, fp
    722e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    7230:	9801      	ldr	r0, [sp, #4]
    7232:	0640      	lsls	r0, r0, #25
    7234:	d433      	bmi.n	729e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    7236:	1e48      	subs	r0, r1, #1
    7238:	fa20 f202 	lsr.w	r2, r0, r2
    723c:	f14c 30ff 	adc.w	r0, ip, #4294967295
  if (nNew < nCur || m_curPosition == 0) {
    7240:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    7244:	fa00 fe0e 	lsl.w	lr, r0, lr
    7248:	fa20 f009 	lsr.w	r0, r0, r9
    724c:	ea42 020e 	orr.w	r2, r2, lr
    7250:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    7254:	d001      	beq.n	725a <ExFatFile::seekSet(unsigned long long)+0x92>
    7256:	4295      	cmp	r5, r2
    7258:	d229      	bcs.n	72ae <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    725a:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    725c:	bf4c      	ite	mi
    725e:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    7262:	69e3      	ldrpl	r3, [r4, #28]
    7264:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7266:	f104 0918 	add.w	r9, r4, #24
    726a:	e006      	b.n	727a <ExFatFile::seekSet(unsigned long long)+0xb2>
    726c:	69a1      	ldr	r1, [r4, #24]
    726e:	3d01      	subs	r5, #1
    7270:	6a20      	ldr	r0, [r4, #32]
    7272:	f001 f915 	bl	84a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    7276:	2800      	cmp	r0, #0
    7278:	dd03      	ble.n	7282 <ExFatFile::seekSet(unsigned long long)+0xba>
    727a:	464a      	mov	r2, r9
  while (nNew--) {
    727c:	2d00      	cmp	r5, #0
    727e:	d1f5      	bne.n	726c <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    7280:	e007      	b.n	7292 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    7282:	2000      	movs	r0, #0
  m_curCluster = tmp;
    7284:	f8c4 8018 	str.w	r8, [r4, #24]
}
    7288:	b003      	add	sp, #12
    728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    728e:	2300      	movs	r3, #0
    7290:	6183      	str	r3, [r0, #24]
  return true;
    7292:	2001      	movs	r0, #1
  m_curPosition = pos;
    7294:	e9c4 6700 	strd	r6, r7, [r4]
}
    7298:	b003      	add	sp, #12
    729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    729e:	69e3      	ldr	r3, [r4, #28]
    72a0:	442b      	add	r3, r5
    72a2:	61a3      	str	r3, [r4, #24]
    goto done;
    72a4:	e7f5      	b.n	7292 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    72a6:	2001      	movs	r0, #1
}
    72a8:	b003      	add	sp, #12
    72aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    72ae:	1aad      	subs	r5, r5, r2
    72b0:	e7d9      	b.n	7266 <ExFatFile::seekSet(unsigned long long)+0x9e>
    72b2:	bf00      	nop

000072b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    72b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72b8:	4617      	mov	r7, r2
    72ba:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    72be:	b08f      	sub	sp, #60	; 0x3c
    72c0:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    72c2:	2a00      	cmp	r2, #0
    72c4:	f040 80d7 	bne.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    72c8:	468b      	mov	fp, r1
    72ca:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    72ce:	f011 0f50 	tst.w	r1, #80	; 0x50
    72d2:	f000 80d0 	beq.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    72d6:	f003 0103 	and.w	r1, r3, #3
    72da:	469a      	mov	sl, r3
    72dc:	2903      	cmp	r1, #3
    72de:	f000 80ca 	beq.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    72e2:	3101      	adds	r1, #1
    72e4:	f003 0008 	and.w	r0, r3, #8
    72e8:	ea41 0300 	orr.w	r3, r1, r0
    72ec:	9302      	str	r3, [sp, #8]
  if (fname) {
    72ee:	2f00      	cmp	r7, #0
    72f0:	f000 80cb 	beq.w	748a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    72f4:	6939      	ldr	r1, [r7, #16]
    72f6:	f101 080e 	add.w	r8, r1, #14
    72fa:	49b6      	ldr	r1, [pc, #728]	; (75d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    72fc:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    7300:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    7304:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    7308:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    730a:	f108 0802 	add.w	r8, r8, #2
    730e:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    7312:	d005      	beq.n	7320 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    7314:	2000      	movs	r0, #0
    7316:	2100      	movs	r1, #0
    m_curCluster = 0;
    7318:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    731c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    7320:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    7322:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    7324:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    7326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    732a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    732c:	2220      	movs	r2, #32
    732e:	a906      	add	r1, sp, #24
    7330:	4658      	mov	r0, fp
    7332:	f7ff fe63 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    7336:	b300      	cbz	r0, 737a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    7338:	2820      	cmp	r0, #32
    733a:	f040 809c 	bne.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    733e:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    7342:	f89d 3018 	ldrb.w	r3, [sp, #24]
    7346:	2a00      	cmp	r2, #0
    7348:	f2c0 80a2 	blt.w	7490 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    734c:	b934      	cbnz	r4, 735c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    734e:	f8db 2000 	ldr.w	r2, [fp]
    7352:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    7356:	f8db 2018 	ldr.w	r2, [fp, #24]
    735a:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    735c:	4544      	cmp	r4, r8
    735e:	d201      	bcs.n	7364 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    7360:	3401      	adds	r4, #1
    7362:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    7364:	2b00      	cmp	r3, #0
    7366:	f000 8113 	beq.w	7590 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    736a:	2220      	movs	r2, #32
    736c:	a906      	add	r1, sp, #24
    736e:	4658      	mov	r0, fp
      inSet = false;
    7370:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    7372:	f7ff fe43 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    7376:	2800      	cmp	r0, #0
    7378:	d1de      	bne.n	7338 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    737a:	f41a 7f00 	tst.w	sl, #512	; 0x200
    737e:	d07a      	beq.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7380:	9b02      	ldr	r3, [sp, #8]
    7382:	079b      	lsls	r3, r3, #30
    7384:	d577      	bpl.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7386:	2f00      	cmp	r7, #0
    7388:	d075      	beq.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    738a:	4544      	cmp	r4, r8
    738c:	d217      	bcs.n	73be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    738e:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    7392:	2220      	movs	r2, #32
    7394:	a906      	add	r1, sp, #24
    7396:	4658      	mov	r0, fp
    7398:	f7ff fe30 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    739c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    739e:	2800      	cmp	r0, #0
    73a0:	d061      	beq.n	7466 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    73a2:	2820      	cmp	r0, #32
    73a4:	d167      	bne.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    73a6:	b92c      	cbnz	r4, 73b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    73a8:	f8db 2000 	ldr.w	r2, [fp]
    73ac:	f8db a018 	ldr.w	sl, [fp, #24]
    73b0:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    73b4:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    73b6:	45a0      	cmp	r8, r4
    73b8:	d8eb      	bhi.n	7392 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    73ba:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    73be:	2238      	movs	r2, #56	; 0x38
    73c0:	2100      	movs	r1, #0
    73c2:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    73c4:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    73c8:	f00b f832 	bl	12430 <memset>
  ExFatVolume* volume() const {return m_vol;}
    73cc:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    73d0:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    73d4:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    73d6:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    73d8:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    73da:	2600      	movs	r6, #0
  m_dirPos = freePos;
    73dc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    73e0:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    73e4:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    73e6:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    73ea:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    73ec:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    73ee:	f1b8 0f00 	cmp.w	r8, #0
    73f2:	d033      	beq.n	745c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    73f4:	f108 39ff 	add.w	r9, r8, #4294967295
    73f8:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    73fa:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 75d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    73fe:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    7402:	2201      	movs	r2, #1
    7404:	4659      	mov	r1, fp
    7406:	4628      	mov	r0, r5
    7408:	f7ff fd6e 	bl	6ee8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    740c:	4604      	mov	r4, r0
    740e:	b390      	cbz	r0, 7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7410:	f990 2000 	ldrsb.w	r2, [r0]
    7414:	2a00      	cmp	r2, #0
    7416:	db2e      	blt.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    7418:	2220      	movs	r2, #32
    741a:	2100      	movs	r1, #0
    741c:	f00b f808 	bl	12430 <memset>
    if (i == 0) {
    7420:	2e00      	cmp	r6, #0
    7422:	f000 80bc 	beq.w	759e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    7426:	f1bb 0f01 	cmp.w	fp, #1
    742a:	f000 80d7 	beq.w	75dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    742e:	23c1      	movs	r3, #193	; 0xc1
    7430:	46a3      	mov	fp, r4
    7432:	341e      	adds	r4, #30
    7434:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    7438:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    743a:	4638      	mov	r0, r7
    743c:	b91b      	cbnz	r3, 7446 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    743e:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    7442:	429a      	cmp	r2, r3
    7444:	d005      	beq.n	7452 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    7446:	f005 fc33 	bl	ccb0 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    744a:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    744e:	45a3      	cmp	fp, r4
    7450:	d1f2      	bne.n	7438 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    7452:	3601      	adds	r6, #1
    7454:	fa5f fb86 	uxtb.w	fp, r6
    7458:	45d8      	cmp	r8, fp
    745a:	d8d2      	bhi.n	7402 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    745c:	4628      	mov	r0, r5
    745e:	f000 fafb 	bl	7a58 <ExFatFile::sync()>
    7462:	4606      	mov	r6, r0
    7464:	e00d      	b.n	7482 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    7466:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    7468:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    746c:	f000 fb24 	bl	7ab8 <ExFatFile::addDirCluster()>
    7470:	2800      	cmp	r0, #0
    7472:	f040 8091 	bne.w	7598 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    7476:	2300      	movs	r3, #0
  return false;
    7478:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    747a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    747e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    7482:	4630      	mov	r0, r6
    7484:	b00f      	add	sp, #60	; 0x3c
    7486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    748a:	f04f 0803 	mov.w	r8, #3
    748e:	e747      	b.n	7320 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    7490:	bb56      	cbnz	r6, 74e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    7492:	4544      	cmp	r4, r8
    7494:	bf38      	it	cc
    7496:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    7498:	2b85      	cmp	r3, #133	; 0x85
    749a:	f47f af47 	bne.w	732c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    749e:	4631      	mov	r1, r6
    74a0:	2238      	movs	r2, #56	; 0x38
    74a2:	4628      	mov	r0, r5
      inSet = true;
    74a4:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    74a6:	f00a ffc3 	bl	12430 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    74aa:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    74ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
    74b2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    74b6:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    74ba:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    74bc:	bf58      	it	pl
    74be:	f043 0308 	orrpl.w	r3, r3, #8
    74c2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    74c6:	f8db 3000 	ldr.w	r3, [fp]
    74ca:	f8db 2020 	ldr.w	r2, [fp, #32]
    74ce:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    74d0:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    74d2:	f8db 2018 	ldr.w	r2, [fp, #24]
    74d6:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    74da:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    74de:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    74e2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    74e6:	e721      	b.n	732c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    74e8:	2bc0      	cmp	r3, #192	; 0xc0
    74ea:	d028      	beq.n	753e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    74ec:	2bc1      	cmp	r3, #193	; 0xc1
    74ee:	f47f af3c 	bne.w	736a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    74f2:	463a      	mov	r2, r7
    74f4:	a906      	add	r1, sp, #24
    74f6:	4628      	mov	r0, r5
    74f8:	f000 fdd6 	bl	80a8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    74fc:	b1e8      	cbz	r0, 753a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    74fe:	89bb      	ldrh	r3, [r7, #12]
    7500:	b9db      	cbnz	r3, 753a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    7502:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    7506:	429a      	cmp	r2, r3
    7508:	d117      	bne.n	753a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    750a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    750e:	d1b2      	bne.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    7510:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    7514:	d170      	bne.n	75f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    7516:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    751a:	0798      	lsls	r0, r3, #30
    751c:	d46c      	bmi.n	75f8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    751e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    7522:	d1a8      	bne.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    7524:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    7528:	d0ab      	beq.n	7482 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    752a:	4628      	mov	r0, r5
    752c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    7530:	f7ff fe4a 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    7534:	2800      	cmp	r0, #0
    7536:	d1a4      	bne.n	7482 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    7538:	e79d      	b.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    753a:	4606      	mov	r6, r0
    753c:	e6f6      	b.n	732c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    753e:	9b02      	ldr	r3, [sp, #8]
    7540:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    7544:	f89d 3019 	ldrb.w	r3, [sp, #25]
    7548:	079b      	lsls	r3, r3, #30
    754a:	d502      	bpl.n	7552 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    754c:	9b03      	ldr	r3, [sp, #12]
    754e:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    7552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7554:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    7556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    755a:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    755e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    7562:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    7566:	2f00      	cmp	r7, #0
    7568:	d0cf      	beq.n	750a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    756a:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    756e:	693a      	ldr	r2, [r7, #16]
    7570:	81bb      	strh	r3, [r7, #12]
    next = begin;
    7572:	683b      	ldr	r3, [r7, #0]
    7574:	607b      	str	r3, [r7, #4]
    7576:	f89d 301b 	ldrb.w	r3, [sp, #27]
    757a:	429a      	cmp	r2, r3
    757c:	f47f aef5 	bne.w	736a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    7580:	8abe      	ldrh	r6, [r7, #20]
    7582:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    7586:	1af6      	subs	r6, r6, r3
    7588:	fab6 f686 	clz	r6, r6
    758c:	0976      	lsrs	r6, r6, #5
    758e:	e6cd      	b.n	732c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    7590:	2f00      	cmp	r7, #0
    7592:	f47f aef2 	bne.w	737a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    7596:	e76e      	b.n	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    7598:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    759c:	e70b      	b.n	73b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    759e:	2385      	movs	r3, #133	; 0x85
    75a0:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    75a2:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    75a6:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    75aa:	f8da 3000 	ldr.w	r3, [sl]
    75ae:	2b00      	cmp	r3, #0
    75b0:	d046      	beq.n	7640 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    75b2:	f10d 0213 	add.w	r2, sp, #19
    75b6:	f10d 0116 	add.w	r1, sp, #22
    75ba:	a805      	add	r0, sp, #20
    75bc:	4798      	blx	r3
    75be:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    75c2:	8163      	strh	r3, [r4, #10]
    75c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    75c8:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    75ca:	f89d 3013 	ldrb.w	r3, [sp, #19]
    75ce:	7523      	strb	r3, [r4, #20]
    75d0:	e73f      	b.n	7452 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    75d2:	bf00      	nop
    75d4:	88888889 	.word	0x88888889
    75d8:	20018cdc 	.word	0x20018cdc
      dirStream->type = EXFAT_TYPE_STREAM;
    75dc:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    75de:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    75e2:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    75e4:	9b02      	ldr	r3, [sp, #8]
    75e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    75ea:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    75ee:	693b      	ldr	r3, [r7, #16]
    75f0:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    75f2:	8abb      	ldrh	r3, [r7, #20]
    75f4:	80a3      	strh	r3, [r4, #4]
}
    75f6:	e72c      	b.n	7452 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    75f8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    75fc:	06d9      	lsls	r1, r3, #27
    75fe:	f53f af3a 	bmi.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    7602:	f013 0101 	ands.w	r1, r3, #1
    7606:	f47f af36 	bne.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    760a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    760e:	d089      	beq.n	7524 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    7610:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7614:	0792      	lsls	r2, r2, #30
    7616:	f57f af2e 	bpl.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    761a:	2b00      	cmp	r3, #0
    761c:	f43f af2b 	beq.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    7620:	e9d5 3200 	ldrd	r3, r2, [r5]
    7624:	4313      	orrs	r3, r2
    7626:	d004      	beq.n	7632 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    7628:	2200      	movs	r2, #0
    762a:	2300      	movs	r3, #0
    m_curCluster = 0;
    762c:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    762e:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    7632:	4628      	mov	r0, r5
    7634:	f000 fb86 	bl	7d44 <ExFatFile::truncate()>
    7638:	2800      	cmp	r0, #0
    763a:	f43f af1c 	beq.w	7476 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    763e:	e720      	b.n	7482 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    7640:	f645 0321 	movw	r3, #22561	; 0x5821
    7644:	8163      	strh	r3, [r4, #10]
    7646:	81e3      	strh	r3, [r4, #14]
    7648:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    764a:	e702      	b.n	7452 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

0000764c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    764c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    7650:	2500      	movs	r5, #0
    7652:	b097      	sub	sp, #92	; 0x5c
    7654:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    7656:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    765a:	9201      	str	r2, [sp, #4]
    765c:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    765e:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    7662:	2b00      	cmp	r3, #0
    7664:	d13e      	bne.n	76e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    7666:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    766a:	460f      	mov	r7, r1
    766c:	f013 0f50 	tst.w	r3, #80	; 0x50
    7670:	d038      	beq.n	76e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    7672:	7813      	ldrb	r3, [r2, #0]
    7674:	4604      	mov	r4, r0
    7676:	4616      	mov	r6, r2
    7678:	2b2f      	cmp	r3, #47	; 0x2f
    767a:	d037      	beq.n	76ec <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    767c:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    7680:	ab01      	add	r3, sp, #4
    7682:	aa02      	add	r2, sp, #8
    7684:	4631      	mov	r1, r6
    7686:	4620      	mov	r0, r4
    7688:	f7ff fc6a 	bl	6f60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    768c:	b350      	cbz	r0, 76e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    768e:	9e01      	ldr	r6, [sp, #4]
    7690:	7833      	ldrb	r3, [r6, #0]
    7692:	2b00      	cmp	r3, #0
    7694:	d03e      	beq.n	7714 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    7696:	2300      	movs	r3, #0
    7698:	aa02      	add	r2, sp, #8
    769a:	4639      	mov	r1, r7
    769c:	4620      	mov	r0, r4
    769e:	f7ff fe09 	bl	72b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    76a2:	b1f8      	cbz	r0, 76e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    76a4:	46a4      	mov	ip, r4
    76a6:	ad08      	add	r5, sp, #32
    76a8:	f104 0730 	add.w	r7, r4, #48	; 0x30
    76ac:	f8dc 0000 	ldr.w	r0, [ip]
    76b0:	f10c 0c10 	add.w	ip, ip, #16
    76b4:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    76b8:	46ae      	mov	lr, r5
    76ba:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    76be:	3510      	adds	r5, #16
    76c0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    76c4:	45bc      	cmp	ip, r7
    76c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    76ca:	d1ef      	bne.n	76ac <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    76cc:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    76d0:	af08      	add	r7, sp, #32
    tmpDir = *this;
    76d2:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    76d4:	4620      	mov	r0, r4
    76d6:	f000 f9bf 	bl	7a58 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    76da:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    76de:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    76e2:	e7cd      	b.n	7680 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    76e4:	2000      	movs	r0, #0
}
    76e6:	b017      	add	sp, #92	; 0x5c
    76e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    76ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    76f0:	292f      	cmp	r1, #47	; 0x2f
    76f2:	d0fb      	beq.n	76ec <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    76f4:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    76f6:	b9b1      	cbnz	r1, 7726 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    76f8:	2238      	movs	r2, #56	; 0x38
    76fa:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    76fc:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    76fe:	f00a fe97 	bl	12430 <memset>
  m_flags = FILE_FLAG_READ;
    7702:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    7704:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    7706:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    7708:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    770a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    770e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    7712:	e7e8      	b.n	76e6 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    7714:	464b      	mov	r3, r9
    7716:	aa02      	add	r2, sp, #8
    7718:	4639      	mov	r1, r7
    771a:	4620      	mov	r0, r4
    771c:	f7ff fdca 	bl	72b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    7720:	b017      	add	sp, #92	; 0x5c
    7722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    7726:	2238      	movs	r2, #56	; 0x38
    7728:	2100      	movs	r1, #0
    772a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    772c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    772e:	f00a fe7f 	bl	12430 <memset>
  m_flags = FILE_FLAG_READ;
    7732:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    7734:	af08      	add	r7, sp, #32
  m_vol = vol;
    7736:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    7738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    773c:	2340      	movs	r3, #64	; 0x40
    773e:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    7742:	e79b      	b.n	767c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

00007744 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7744:	b119      	cbz	r1, 774e <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    7746:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    774a:	f7ff bf7f 	b.w	764c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    774e:	4608      	mov	r0, r1
    7750:	4770      	bx	lr
    7752:	bf00      	nop

00007754 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    7754:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7758:	b963      	cbnz	r3, 7774 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    775a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    775e:	f013 0f50 	tst.w	r3, #80	; 0x50
    7762:	d007      	beq.n	7774 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    7764:	680b      	ldr	r3, [r1, #0]
    7766:	f013 0c1f 	ands.w	ip, r3, #31
    776a:	d103      	bne.n	7774 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    776c:	4613      	mov	r3, r2
    776e:	4662      	mov	r2, ip
    7770:	f7ff bda0 	b.w	72b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    7774:	2000      	movs	r0, #0
    7776:	4770      	bx	lr

00007778 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    7778:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    777a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    777c:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    777e:	6a00      	ldr	r0, [r0, #32]
    7780:	b101      	cbz	r1, 7784 <ExFatFile::addCluster()+0xc>
    7782:	3101      	adds	r1, #1
    7784:	2201      	movs	r2, #1
    7786:	f000 fd51 	bl	822c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    778a:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    778c:	4605      	mov	r5, r0
  if (find < 2) {
    778e:	d932      	bls.n	77f6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    7790:	2301      	movs	r3, #1
    7792:	4601      	mov	r1, r0
    7794:	6a20      	ldr	r0, [r4, #32]
    7796:	461a      	mov	r2, r3
    7798:	f000 fda8 	bl	82ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    779c:	4606      	mov	r6, r0
    779e:	b350      	cbz	r0, 77f6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    77a0:	69a3      	ldr	r3, [r4, #24]
    77a2:	b35b      	cbz	r3, 77fc <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    77a4:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    77a8:	0651      	lsls	r1, r2, #25
    77aa:	d512      	bpl.n	77d2 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    77ac:	1c59      	adds	r1, r3, #1
    77ae:	42a9      	cmp	r1, r5
    77b0:	d018      	beq.n	77e4 <ExFatFile::addCluster()+0x6c>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    77b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77b6:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    77b8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77bc:	e005      	b.n	77ca <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    77be:	6a20      	ldr	r0, [r4, #32]
    77c0:	f000 fe90 	bl	84e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77c4:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    77c6:	b1b0      	cbz	r0, 77f6 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77c8:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    77ca:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77cc:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    77ce:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    77d0:	d3f5      	bcc.n	77be <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    77d2:	f04f 32ff 	mov.w	r2, #4294967295
    77d6:	4629      	mov	r1, r5
    77d8:	6a20      	ldr	r0, [r4, #32]
    77da:	f000 fe83 	bl	84e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    77de:	b150      	cbz	r0, 77f6 <ExFatFile::addCluster()+0x7e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    77e0:	69a1      	ldr	r1, [r4, #24]
    77e2:	b911      	cbnz	r1, 77ea <ExFatFile::addCluster()+0x72>
  m_curCluster = find;
  return true;

 fail:
  return false;
}
    77e4:	4630      	mov	r0, r6
  m_curCluster = find;
    77e6:	61a5      	str	r5, [r4, #24]
}
    77e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    77ea:	462a      	mov	r2, r5
    77ec:	6a20      	ldr	r0, [r4, #32]
    77ee:	f000 fe79 	bl	84e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    77f2:	2800      	cmp	r0, #0
    77f4:	d1f6      	bne.n	77e4 <ExFatFile::addCluster()+0x6c>
  return false;
    77f6:	2600      	movs	r6, #0
}
    77f8:	4630      	mov	r0, r6
    77fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    77fc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7804:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    7808:	e7ec      	b.n	77e4 <ExFatFile::addCluster()+0x6c>
    780a:	bf00      	nop

0000780c <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    780c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    7810:	079a      	lsls	r2, r3, #30
    7812:	d536      	bpl.n	7882 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    7814:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    7816:	b570      	push	{r4, r5, r6, lr}
    7818:	4605      	mov	r5, r0
  if (m_firstCluster) {
    781a:	b9a1      	cbnz	r1, 7846 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    781c:	2400      	movs	r4, #0
    781e:	4621      	mov	r1, r4
    7820:	e007      	b.n	7832 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    7822:	7803      	ldrb	r3, [r0, #0]
    7824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7828:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    782a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    782e:	428b      	cmp	r3, r1
    7830:	d329      	bcc.n	7886 <ExFatFile::remove()+0x7a>
    7832:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    7834:	2201      	movs	r2, #1
    7836:	4628      	mov	r0, r5
    7838:	f7ff fb56 	bl	6ee8 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    783c:	b2e1      	uxtb	r1, r4
    if (!cache) {
    783e:	2800      	cmp	r0, #0
    7840:	d1ef      	bne.n	7822 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    7842:	2000      	movs	r0, #0
    7844:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    7846:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7848:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    784a:	d534      	bpl.n	78b6 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    784c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7850:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    7854:	3309      	adds	r3, #9
    7856:	3a01      	subs	r2, #1
    7858:	b2db      	uxtb	r3, r3
    785a:	f144 34ff 	adc.w	r4, r4, #4294967295
    785e:	f1c3 0c20 	rsb	ip, r3, #32
    7862:	40da      	lsrs	r2, r3
    7864:	3b20      	subs	r3, #32
    7866:	fa04 fc0c 	lsl.w	ip, r4, ip
    786a:	fa24 f303 	lsr.w	r3, r4, r3
    786e:	ea42 020c 	orr.w	r2, r2, ip
    7872:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    7874:	2300      	movs	r3, #0
    7876:	3201      	adds	r2, #1
    7878:	f000 fd38 	bl	82ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    787c:	2800      	cmp	r0, #0
    787e:	d1cd      	bne.n	781c <ExFatFile::remove()+0x10>
    7880:	e7df      	b.n	7842 <ExFatFile::remove()+0x36>
}
    7882:	2000      	movs	r0, #0
    7884:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    7886:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    7888:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    788a:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    788e:	4620      	mov	r0, r4
  m_flags = 0;
    7890:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    7894:	f005 f9b8 	bl	cc08 <FsCache::sync()>
    7898:	2800      	cmp	r0, #0
    789a:	d0d2      	beq.n	7842 <ExFatFile::remove()+0x36>
    789c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    78a0:	f005 f9b2 	bl	cc08 <FsCache::sync()>
    78a4:	2800      	cmp	r0, #0
    78a6:	d0cc      	beq.n	7842 <ExFatFile::remove()+0x36>
    78a8:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    78ac:	6803      	ldr	r3, [r0, #0]
}
    78ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    78b2:	6a1b      	ldr	r3, [r3, #32]
    78b4:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    78b6:	f000 fe35 	bl	8524 <ExFatPartition::freeChain(unsigned long)>
    78ba:	2800      	cmp	r0, #0
    78bc:	d1ae      	bne.n	781c <ExFatFile::remove()+0x10>
    78be:	e7c0      	b.n	7842 <ExFatFile::remove()+0x36>

000078c0 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    78c0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    78c4:	06db      	lsls	r3, r3, #27
    78c6:	d401      	bmi.n	78cc <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    78c8:	2000      	movs	r0, #0
}
    78ca:	4770      	bx	lr
bool ExFatFile::rmdir() {
    78cc:	b510      	push	{r4, lr}
    seekSet(0);
    78ce:	2200      	movs	r2, #0
    78d0:	b088      	sub	sp, #32
    78d2:	2300      	movs	r3, #0
    78d4:	4604      	mov	r4, r0
    78d6:	f7ff fc77 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
  }
    78da:	e008      	b.n	78ee <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    78dc:	2820      	cmp	r0, #32
    78de:	d11b      	bne.n	7918 <ExFatFile::rmdir()+0x58>
    78e0:	f99d 3000 	ldrsb.w	r3, [sp]
    78e4:	f89d 2000 	ldrb.w	r2, [sp]
    78e8:	2b00      	cmp	r3, #0
    78ea:	db15      	blt.n	7918 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    78ec:	b132      	cbz	r2, 78fc <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    78ee:	2220      	movs	r2, #32
    78f0:	4669      	mov	r1, sp
    78f2:	4620      	mov	r0, r4
    78f4:	f7ff fb82 	bl	6ffc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    78f8:	2800      	cmp	r0, #0
    78fa:	d1ef      	bne.n	78dc <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    78fc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    7900:	2208      	movs	r2, #8
  return remove();
    7902:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    7904:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    7908:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    790c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    7910:	f7ff ff7c 	bl	780c <ExFatFile::remove()>
}
    7914:	b008      	add	sp, #32
    7916:	bd10      	pop	{r4, pc}
  return false;
    7918:	2000      	movs	r0, #0
}
    791a:	b008      	add	sp, #32
    791c:	bd10      	pop	{r4, pc}
    791e:	bf00      	nop

00007920 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    7920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7924:	f04f 0800 	mov.w	r8, #0
    7928:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    792a:	4f4a      	ldr	r7, [pc, #296]	; (7a54 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    792c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    792e:	4644      	mov	r4, r8
    7930:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    7932:	2200      	movs	r2, #0
    7934:	4630      	mov	r0, r6
    7936:	f7ff fad7 	bl	6ee8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    793a:	4605      	mov	r5, r0
    793c:	b130      	cbz	r0, 794c <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    793e:	7801      	ldrb	r1, [r0, #0]
    7940:	29c0      	cmp	r1, #192	; 0xc0
    7942:	d069      	beq.n	7a18 <ExFatFile::syncDir()+0xf8>
    7944:	29c1      	cmp	r1, #193	; 0xc1
    7946:	d02b      	beq.n	79a0 <ExFatFile::syncDir()+0x80>
    7948:	2985      	cmp	r1, #133	; 0x85
    794a:	d009      	beq.n	7960 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    794c:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    7950:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7952:	f043 0301 	orr.w	r3, r3, #1
    7956:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    795a:	b002      	add	sp, #8
    795c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    7960:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    7964:	f003 0337 	and.w	r3, r3, #55	; 0x37
    7968:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    796a:	683b      	ldr	r3, [r7, #0]
    796c:	b183      	cbz	r3, 7990 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    796e:	f10d 0203 	add.w	r2, sp, #3
    7972:	f10d 0106 	add.w	r1, sp, #6
    7976:	a801      	add	r0, sp, #4
    7978:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    797a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    797e:	81ab      	strh	r3, [r5, #12]
    7980:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    7982:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    7986:	81eb      	strh	r3, [r5, #14]
    7988:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    798a:	f89d 3003 	ldrb.w	r3, [sp, #3]
    798e:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    7990:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    7992:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7996:	f043 0301 	orr.w	r3, r3, #1
    799a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    799e:	7829      	ldrb	r1, [r5, #0]
    79a0:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    79a4:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    79a6:	fab0 f080 	clz	r0, r0
    79aa:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    79ac:	e001      	b.n	79b2 <ExFatFile::syncDir()+0x92>
    79ae:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    79b0:	5ca9      	ldrb	r1, [r5, r2]
    79b2:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    79b4:	2a01      	cmp	r2, #1
    79b6:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    79ba:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    79be:	fa11 f383 	uxtah	r3, r1, r3
    79c2:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    79c4:	d101      	bne.n	79ca <ExFatFile::syncDir()+0xaa>
    79c6:	2800      	cmp	r0, #0
    79c8:	d1f1      	bne.n	79ae <ExFatFile::syncDir()+0x8e>
    79ca:	2a1f      	cmp	r2, #31
    79cc:	d9f0      	bls.n	79b0 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    79ce:	f108 0801 	add.w	r8, r8, #1
    79d2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    79d6:	fa5f f188 	uxtb.w	r1, r8
    79da:	428b      	cmp	r3, r1
    79dc:	d2a9      	bcs.n	7932 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    79de:	2201      	movs	r2, #1
    79e0:	f106 0124 	add.w	r1, r6, #36	; 0x24
    79e4:	6a30      	ldr	r0, [r6, #32]
    79e6:	f000 fcfd 	bl	83e4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    79ea:	2800      	cmp	r0, #0
    79ec:	d0ae      	beq.n	794c <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    79ee:	6a35      	ldr	r5, [r6, #32]
    79f0:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    79f2:	4628      	mov	r0, r5
    79f4:	f005 f908 	bl	cc08 <FsCache::sync()>
    79f8:	2800      	cmp	r0, #0
    79fa:	d0a7      	beq.n	794c <ExFatFile::syncDir()+0x2c>
    79fc:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7a00:	f005 f902 	bl	cc08 <FsCache::sync()>
    7a04:	2800      	cmp	r0, #0
    7a06:	d0a1      	beq.n	794c <ExFatFile::syncDir()+0x2c>
    7a08:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7a0c:	6803      	ldr	r3, [r0, #0]
    7a0e:	6a1b      	ldr	r3, [r3, #32]
    7a10:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7a12:	2800      	cmp	r0, #0
    7a14:	d1a1      	bne.n	795a <ExFatFile::syncDir()+0x3a>
    7a16:	e799      	b.n	794c <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    7a18:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    7a1c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    7a20:	7843      	ldrb	r3, [r0, #1]
    7a22:	bf14      	ite	ne
    7a24:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    7a28:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    7a2c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    7a2e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    7a32:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    7a36:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    7a3a:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a3e:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    7a40:	e9c5 0106 	strd	r0, r1, [r5, #24]
    7a44:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    7a48:	f043 0301 	orr.w	r3, r3, #1
    7a4c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    7a50:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    7a52:	e7a5      	b.n	79a0 <ExFatFile::syncDir()+0x80>
    7a54:	20018cdc 	.word	0x20018cdc

00007a58 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    7a58:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    7a5a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    7a5e:	b343      	cbz	r3, 7ab2 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7a60:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    7a64:	4604      	mov	r4, r0
    7a66:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7a6a:	2a00      	cmp	r2, #0
    7a6c:	db0c      	blt.n	7a88 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    7a6e:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7a70:	4628      	mov	r0, r5
    7a72:	f005 f8c9 	bl	cc08 <FsCache::sync()>
    7a76:	b978      	cbnz	r0, 7a98 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    7a78:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    7a7c:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7a7e:	f043 0301 	orr.w	r3, r3, #1
    7a82:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    7a86:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a8c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    7a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7a94:	f7ff bf44 	b.w	7920 <ExFatFile::syncDir()>
    7a98:	f505 7004 	add.w	r0, r5, #528	; 0x210
    7a9c:	f005 f8b4 	bl	cc08 <FsCache::sync()>
    7aa0:	2800      	cmp	r0, #0
    7aa2:	d0e9      	beq.n	7a78 <ExFatFile::sync()+0x20>
    7aa4:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    7aa8:	6803      	ldr	r3, [r0, #0]
    7aaa:	6a1b      	ldr	r3, [r3, #32]
    7aac:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    7aae:	2800      	cmp	r0, #0
    7ab0:	d0e2      	beq.n	7a78 <ExFatFile::sync()+0x20>
    return true;
    7ab2:	2001      	movs	r0, #1
}
    7ab4:	bd38      	pop	{r3, r4, r5, pc}
    7ab6:	bf00      	nop

00007ab8 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    7ab8:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7aba:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    7abe:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7ac0:	065a      	lsls	r2, r3, #25
    7ac2:	d44c      	bmi.n	7b5e <ExFatFile::addDirCluster()+0xa6>
    7ac4:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    7ac6:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    7ac8:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    7acc:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    7ace:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    7ad2:	d301      	bcc.n	7ad8 <ExFatFile::addDirCluster()+0x20>
}
    7ad4:	2000      	movs	r0, #0
    7ad6:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    7ad8:	4628      	mov	r0, r5
    7ada:	f7ff fe4d 	bl	7778 <ExFatFile::addCluster()>
    7ade:	2800      	cmp	r0, #0
    7ae0:	d0f8      	beq.n	7ad4 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    7ae2:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7ae4:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    7ae6:	69ae      	ldr	r6, [r5, #24]
    7ae8:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    7aec:	3e02      	subs	r6, #2
    7aee:	409e      	lsls	r6, r3
    7af0:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7af4:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    7af6:	1931      	adds	r1, r6, r4
    7af8:	2205      	movs	r2, #5
    7afa:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7afe:	3401      	adds	r4, #1
    7b00:	f005 f8ae 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    7b04:	f44f 7200 	mov.w	r2, #512	; 0x200
    7b08:	2100      	movs	r1, #0
    if (!cache) {
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d0e2      	beq.n	7ad4 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    7b0e:	f00a fc8f 	bl	12430 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    7b12:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7b14:	2301      	movs	r3, #1
    7b16:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7b1a:	4093      	lsls	r3, r2
    7b1c:	429c      	cmp	r4, r3
    7b1e:	d3ea      	bcc.n	7af6 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    7b20:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    7b24:	065b      	lsls	r3, r3, #25
    7b26:	d415      	bmi.n	7b54 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7b28:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    7b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    7b30:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7b34:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    7b38:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    7b3c:	189b      	adds	r3, r3, r2
    7b3e:	f141 0000 	adc.w	r0, r1, #0
    7b42:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    7b44:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    7b48:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    7b4a:	189b      	adds	r3, r3, r2
    7b4c:	f141 0100 	adc.w	r1, r1, #0
    7b50:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    7b54:	4628      	mov	r0, r5
}
    7b56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    7b5a:	f7ff bf7d 	b.w	7a58 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    7b5e:	6a00      	ldr	r0, [r0, #32]
    7b60:	f000 fde6 	bl	8730 <ExFatPartition::rootLength()>
    7b64:	e7af      	b.n	7ac6 <ExFatFile::addDirCluster()+0xe>
    7b66:	bf00      	nop

00007b68 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7b68:	b570      	push	{r4, r5, r6, lr}
    7b6a:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7b6c:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    7b70:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    7b72:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    7b74:	f010 0f18 	tst.w	r0, #24
    7b78:	930c      	str	r3, [sp, #48]	; 0x30
    7b7a:	931a      	str	r3, [sp, #104]	; 0x68
    7b7c:	d003      	beq.n	7b86 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    7b7e:	6a20      	ldr	r0, [r4, #32]
    7b80:	6a0b      	ldr	r3, [r1, #32]
    7b82:	4298      	cmp	r0, r3
    7b84:	d002      	beq.n	7b8c <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    7b86:	2000      	movs	r0, #0
}
    7b88:	b01c      	add	sp, #112	; 0x70
    7b8a:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7b8c:	f640 2301 	movw	r3, #2561	; 0xa01
    7b90:	4668      	mov	r0, sp
    7b92:	f7ff fd5b 	bl	764c <ExFatFile::open(ExFatFile*, char const*, int)>
    7b96:	2800      	cmp	r0, #0
    7b98:	d0f5      	beq.n	7b86 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    7b9a:	46a4      	mov	ip, r4
    7b9c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7ba0:	ad0e      	add	r5, sp, #56	; 0x38
    7ba2:	f8dc 0000 	ldr.w	r0, [ip]
    7ba6:	f10c 0c10 	add.w	ip, ip, #16
    7baa:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7bae:	46ae      	mov	lr, r5
    7bb0:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7bb4:	3510      	adds	r5, #16
    7bb6:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7bba:	45b4      	cmp	ip, r6
    7bbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7bc0:	d1ef      	bne.n	7ba2 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    7bc2:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    7bc6:	aa09      	add	r2, sp, #36	; 0x24
    7bc8:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    7bcc:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    7bce:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    7bd2:	ca07      	ldmia	r2, {r0, r1, r2}
    7bd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7bd8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7bdc:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    7bde:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7be2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7be6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7bea:	f7ff ff35 	bl	7a58 <ExFatFile::sync()>
    7bee:	2800      	cmp	r0, #0
    7bf0:	d0c9      	beq.n	7b86 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    7bf2:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    7bf4:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    7bf6:	2308      	movs	r3, #8
  return oldFile.remove();
    7bf8:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    7bfa:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7bfc:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7c00:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    7c04:	f7ff fe02 	bl	780c <ExFatFile::remove()>
    7c08:	e7be      	b.n	7b88 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    7c0a:	bf00      	nop

00007c0c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    7c0c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    7c0e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7c12:	f013 0f50 	tst.w	r3, #80	; 0x50
    7c16:	d102      	bne.n	7c1e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    7c18:	2500      	movs	r5, #0
}
    7c1a:	4628      	mov	r0, r5
    7c1c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7c1e:	f640 2302 	movw	r3, #2562	; 0xa02
    7c22:	4604      	mov	r4, r0
    7c24:	f7ff fb46 	bl	72b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7c28:	2800      	cmp	r0, #0
    7c2a:	d0f5      	beq.n	7c18 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    7c2c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    7c2e:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    7c30:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    7c34:	f7ff ff40 	bl	7ab8 <ExFatFile::addDirCluster()>
    7c38:	4605      	mov	r5, r0
    7c3a:	2800      	cmp	r0, #0
    7c3c:	d0ec      	beq.n	7c18 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    7c3e:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    7c40:	2200      	movs	r2, #0
    7c42:	2300      	movs	r3, #0
    7c44:	4620      	mov	r0, r4
    7c46:	61e1      	str	r1, [r4, #28]
    7c48:	f7ff fabe 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7c4c:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    7c4e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7c52:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    7c56:	2b00      	cmp	r3, #0
    7c58:	d0df      	beq.n	7c1a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7c5a:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    7c5c:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7c5e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    7c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    7c66:	f7ff be5b 	b.w	7920 <ExFatFile::syncDir()>
    7c6a:	bf00      	nop

00007c6c <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	2500      	movs	r5, #0
    7c70:	b097      	sub	sp, #92	; 0x5c
    7c72:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    7c74:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7c78:	9201      	str	r2, [sp, #4]
    7c7a:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    7c7e:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    7c80:	2b00      	cmp	r3, #0
    7c82:	d146      	bne.n	7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7c84:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    7c88:	460e      	mov	r6, r1
    7c8a:	f013 0f50 	tst.w	r3, #80	; 0x50
    7c8e:	d040      	beq.n	7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    7c90:	7813      	ldrb	r3, [r2, #0]
    7c92:	4604      	mov	r4, r0
    7c94:	4611      	mov	r1, r2
    7c96:	2b2f      	cmp	r3, #47	; 0x2f
    7c98:	d03e      	beq.n	7d18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    7c9a:	ab01      	add	r3, sp, #4
    7c9c:	aa02      	add	r2, sp, #8
    7c9e:	4620      	mov	r0, r4
    7ca0:	f7ff f95e 	bl	6f60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7ca4:	2800      	cmp	r0, #0
    7ca6:	d034      	beq.n	7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    7ca8:	9b01      	ldr	r3, [sp, #4]
    7caa:	781b      	ldrb	r3, [r3, #0]
    7cac:	2b00      	cmp	r3, #0
    7cae:	d041      	beq.n	7d34 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    7cb0:	2300      	movs	r3, #0
    7cb2:	aa02      	add	r2, sp, #8
    7cb4:	4631      	mov	r1, r6
    7cb6:	4620      	mov	r0, r4
    7cb8:	f7ff fafc 	bl	72b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    7cbc:	b930      	cbnz	r0, 7ccc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    7cbe:	b347      	cbz	r7, 7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    7cc0:	aa02      	add	r2, sp, #8
    7cc2:	4631      	mov	r1, r6
    7cc4:	4620      	mov	r0, r4
    7cc6:	f7ff ffa1 	bl	7c0c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    7cca:	b310      	cbz	r0, 7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    7ccc:	46a4      	mov	ip, r4
    7cce:	ad08      	add	r5, sp, #32
    7cd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
    7cd4:	f8dc 0000 	ldr.w	r0, [ip]
    7cd8:	f10c 0c10 	add.w	ip, ip, #16
    7cdc:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    7ce0:	46ae      	mov	lr, r5
    7ce2:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    7ce6:	3510      	adds	r5, #16
    7ce8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    7cec:	45b4      	cmp	ip, r6
    7cee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7cf2:	d1ef      	bne.n	7cd4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    7cf4:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    7cf8:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    7cfa:	6028      	str	r0, [r5, #0]
    close();
    7cfc:	4620      	mov	r0, r4
    7cfe:	f7ff f911 	bl	6f24 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    7d02:	9901      	ldr	r1, [sp, #4]
    7d04:	ab01      	add	r3, sp, #4
    7d06:	aa02      	add	r2, sp, #8
    7d08:	4620      	mov	r0, r4
    7d0a:	f7ff f929 	bl	6f60 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7d0e:	2800      	cmp	r0, #0
    7d10:	d1ca      	bne.n	7ca8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    7d12:	2000      	movs	r0, #0
}
    7d14:	b017      	add	sp, #92	; 0x5c
    7d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    7d18:	3101      	adds	r1, #1
    7d1a:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    7d1c:	780b      	ldrb	r3, [r1, #0]
    7d1e:	2b2f      	cmp	r3, #47	; 0x2f
    7d20:	d0fa      	beq.n	7d18 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7d22:	6a31      	ldr	r1, [r6, #32]
    7d24:	a808      	add	r0, sp, #32
    7d26:	f7ff f907 	bl	6f38 <ExFatFile::openRoot(ExFatVolume*)>
    7d2a:	2800      	cmp	r0, #0
    7d2c:	d0f1      	beq.n	7d12 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    7d2e:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    7d30:	ae08      	add	r6, sp, #32
    7d32:	e7b2      	b.n	7c9a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    7d34:	aa02      	add	r2, sp, #8
    7d36:	4631      	mov	r1, r6
    7d38:	4620      	mov	r0, r4
    7d3a:	f7ff ff67 	bl	7c0c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    7d3e:	b017      	add	sp, #92	; 0x5c
    7d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7d42:	bf00      	nop

00007d44 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7d44:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    7d48:	079a      	lsls	r2, r3, #30
    7d4a:	d562      	bpl.n	7e12 <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    7d4c:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    7d4e:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    7d50:	b082      	sub	sp, #8
    7d52:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    7d54:	b3a5      	cbz	r5, 7dc0 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    7d56:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    7d5a:	d034      	beq.n	7dc6 <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7d5c:	6a00      	ldr	r0, [r0, #32]
    7d5e:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7d60:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    7d64:	3a01      	subs	r2, #1
    7d66:	68e1      	ldr	r1, [r4, #12]
    7d68:	f10c 0c09 	add.w	ip, ip, #9
    7d6c:	f141 31ff 	adc.w	r1, r1, #4294967295
    7d70:	fa5f fc8c 	uxtb.w	ip, ip
    7d74:	f1cc 0e20 	rsb	lr, ip, #32
    7d78:	fa22 f20c 	lsr.w	r2, r2, ip
    7d7c:	f1ac 0c20 	sub.w	ip, ip, #32
    7d80:	fa01 fe0e 	lsl.w	lr, r1, lr
    7d84:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    7d88:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7d8a:	ea42 020e 	orr.w	r2, r2, lr
    7d8e:	ea42 020c 	orr.w	r2, r2, ip
    7d92:	3201      	adds	r2, #1
    if (m_curCluster) {
    7d94:	b319      	cbz	r1, 7dde <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    7d96:	3d01      	subs	r5, #1
    7d98:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    7d9a:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    7d9c:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    7d9e:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7da0:	bb72      	cbnz	r2, 7e00 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7da2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    7da6:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    7da8:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7dac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    7db0:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    7db4:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    7db8:	f7ff fe4e 	bl	7a58 <ExFatFile::sync()>

 fail:
  return false;
}
    7dbc:	b002      	add	sp, #8
    7dbe:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    7dc0:	2001      	movs	r0, #1
}
    7dc2:	b002      	add	sp, #8
    7dc4:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    7dc6:	6981      	ldr	r1, [r0, #24]
    7dc8:	b961      	cbnz	r1, 7de4 <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    7dca:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7dcc:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    7dce:	4629      	mov	r1, r5
    7dd0:	6a20      	ldr	r0, [r4, #32]
    7dd2:	f000 fba7 	bl	8524 <ExFatPartition::freeChain(unsigned long)>
    7dd6:	b1c8      	cbz	r0, 7e0c <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7dd8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7ddc:	e7e1      	b.n	7da2 <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    7dde:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    7de0:	61e1      	str	r1, [r4, #28]
    7de2:	e7dd      	b.n	7da0 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7de4:	aa01      	add	r2, sp, #4
    7de6:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    7de8:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    7dea:	f000 fb59 	bl	84a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7dee:	2800      	cmp	r0, #0
    7df0:	db0c      	blt.n	7e0c <ExFatFile::truncate()+0xc8>
      if (fg) {
    7df2:	d110      	bne.n	7e16 <ExFatFile::truncate()+0xd2>
    if (toFree) {
    7df4:	9d01      	ldr	r5, [sp, #4]
    7df6:	2d00      	cmp	r5, #0
    7df8:	d1e9      	bne.n	7dce <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7dfa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7dfe:	e7d0      	b.n	7da2 <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    7e00:	2300      	movs	r3, #0
    7e02:	9901      	ldr	r1, [sp, #4]
    7e04:	f000 fa72 	bl	82ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    7e08:	2800      	cmp	r0, #0
    7e0a:	d1e5      	bne.n	7dd8 <ExFatFile::truncate()+0x94>
  return false;
    7e0c:	2000      	movs	r0, #0
}
    7e0e:	b002      	add	sp, #8
    7e10:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    7e12:	2000      	movs	r0, #0
}
    7e14:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    7e16:	f04f 32ff 	mov.w	r2, #4294967295
    7e1a:	69a1      	ldr	r1, [r4, #24]
    7e1c:	6a20      	ldr	r0, [r4, #32]
    7e1e:	f000 fb61 	bl	84e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7e22:	2800      	cmp	r0, #0
    7e24:	d1e6      	bne.n	7df4 <ExFatFile::truncate()+0xb0>
    7e26:	e7f1      	b.n	7e0c <ExFatFile::truncate()+0xc8>

00007e28 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7e2c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    7e30:	b083      	sub	sp, #12
    7e32:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    7e34:	079d      	lsls	r5, r3, #30
    7e36:	f140 80a1 	bpl.w	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7e3a:	4691      	mov	r9, r2
    7e3c:	071a      	lsls	r2, r3, #28
    7e3e:	460e      	mov	r6, r1
    7e40:	f100 8095 	bmi.w	7f6e <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    7e44:	f1b9 0f00 	cmp.w	r9, #0
    7e48:	f000 8128 	beq.w	809c <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    7e4c:	6823      	ldr	r3, [r4, #0]
    7e4e:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7e50:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    7e52:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7e54:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    7e58:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    7e5c:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    7e60:	f1b8 0f00 	cmp.w	r8, #0
    7e64:	f040 8094 	bne.w	7f90 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    7e68:	2900      	cmp	r1, #0
    7e6a:	f000 80d4 	beq.w	8016 <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    7e6e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7e72:	065b      	lsls	r3, r3, #25
    7e74:	f140 80ec 	bpl.w	8050 <ExFatFile::write(void const*, unsigned int)+0x228>
    7e78:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    7e7c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7e80:	f10c 0c09 	add.w	ip, ip, #9
    7e84:	3b01      	subs	r3, #1
    7e86:	fa5f fc8c 	uxtb.w	ip, ip
    7e8a:	f142 32ff 	adc.w	r2, r2, #4294967295
    7e8e:	f1cc 0e20 	rsb	lr, ip, #32
    7e92:	fa23 f30c 	lsr.w	r3, r3, ip
    7e96:	f1ac 0c20 	sub.w	ip, ip, #32
    7e9a:	fa02 fe0e 	lsl.w	lr, r2, lr
    7e9e:	fa22 fc0c 	lsr.w	ip, r2, ip
    7ea2:	69e2      	ldr	r2, [r4, #28]
    7ea4:	ea43 030e 	orr.w	r3, r3, lr
    7ea8:	ea43 030c 	orr.w	r3, r3, ip
    7eac:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    7eae:	4299      	cmp	r1, r3
    7eb0:	f080 80d5 	bcs.w	805e <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    7eb4:	3101      	adds	r1, #1
    7eb6:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    7eb8:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7ebc:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    7ebe:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7ec2:	4091      	lsls	r1, r2
    7ec4:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7ec6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    7eca:	f0c0 808a 	bcc.w	7fe2 <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    7ece:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    7ed2:	f0c0 80a6 	bcc.w	8022 <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    7ed6:	2301      	movs	r3, #1
    7ed8:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    7eda:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    7edc:	eba3 0308 	sub.w	r3, r3, r8
    7ee0:	4293      	cmp	r3, r2
    7ee2:	bf28      	it	cs
    7ee4:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7ee6:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    7eea:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    7eec:	ea4f 2843 	mov.w	r8, r3, lsl #9
    7ef0:	d309      	bcc.n	7f06 <ExFatFile::write(void const*, unsigned int)+0xde>
    7ef2:	185f      	adds	r7, r3, r1
    7ef4:	42ba      	cmp	r2, r7
    7ef6:	d206      	bcs.n	7f06 <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    7ef8:	2200      	movs	r2, #0
    7efa:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7efe:	f04f 32ff 	mov.w	r2, #4294967295
    7f02:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    7f06:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    7f0a:	4632      	mov	r2, r6
    7f0c:	6807      	ldr	r7, [r0, #0]
    7f0e:	6abf      	ldr	r7, [r7, #40]	; 0x28
    7f10:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    7f12:	b398      	cbz	r0, 7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    7f14:	4643      	mov	r3, r8
    src += n;
    7f16:	4446      	add	r6, r8
    toWrite -= n;
    7f18:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    7f1c:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    7f20:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    7f24:	19db      	adds	r3, r3, r7
    7f26:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    7f2a:	4298      	cmp	r0, r3
    7f2c:	4191      	sbcs	r1, r2
    m_curPosition += n;
    7f2e:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    7f32:	d207      	bcs.n	7f44 <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7f34:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    7f38:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    7f3c:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7f40:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    7f44:	2d00      	cmp	r5, #0
    7f46:	d183      	bne.n	7e50 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    7f48:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    7f4c:	4298      	cmp	r0, r3
    7f4e:	4191      	sbcs	r1, r2
    7f50:	f0c0 8096 	bcc.w	8080 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    7f54:	4b53      	ldr	r3, [pc, #332]	; (80a4 <ExFatFile::write(void const*, unsigned int)+0x27c>)
    7f56:	681b      	ldr	r3, [r3, #0]
    7f58:	2b00      	cmp	r3, #0
    7f5a:	f000 809d 	beq.w	8098 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7f5e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    7f62:	4648      	mov	r0, r9
    7f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7f68:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    7f6c:	e00d      	b.n	7f8a <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    7f6e:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    7f72:	f7ff f929 	bl	71c8 <ExFatFile::seekSet(unsigned long long)>
    7f76:	2800      	cmp	r0, #0
    7f78:	f47f af64 	bne.w	7e44 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7f7c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    7f80:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    7f82:	f043 0301 	orr.w	r3, r3, #1
    7f86:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    7f8a:	b003      	add	sp, #12
    7f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    7f90:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    7f94:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    7f96:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    7f9a:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    7f9e:	4091      	lsls	r1, r2
    7fa0:	4441      	add	r1, r8
    7fa2:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7fa4:	2f00      	cmp	r7, #0
    7fa6:	d08e      	beq.n	7ec6 <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    7fa8:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    7fac:	2201      	movs	r2, #1
    7fae:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7fb2:	45a8      	cmp	r8, r5
    7fb4:	bf28      	it	cs
    7fb6:	46a8      	movcs	r8, r5
    7fb8:	f004 fe52 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7fbc:	2800      	cmp	r0, #0
    7fbe:	d0dd      	beq.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    7fc0:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7fc2:	4447      	add	r7, r8
      memcpy(dst, src, n);
    7fc4:	4642      	mov	r2, r8
    7fc6:	4631      	mov	r1, r6
    7fc8:	f006 f9a4 	bl	e314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7fcc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    7fd0:	6a20      	ldr	r0, [r4, #32]
    7fd2:	d19f      	bne.n	7f14 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    7fd4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7fd8:	f004 fe16 	bl	cc08 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    7fdc:	2800      	cmp	r0, #0
    7fde:	d199      	bne.n	7f14 <ExFatFile::write(void const*, unsigned int)+0xec>
    7fe0:	e7cc      	b.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7fe2:	6862      	ldr	r2, [r4, #4]
    7fe4:	6963      	ldr	r3, [r4, #20]
    7fe6:	9200      	str	r2, [sp, #0]
    7fe8:	9301      	str	r3, [sp, #4]
    7fea:	6922      	ldr	r2, [r4, #16]
    7fec:	6823      	ldr	r3, [r4, #0]
    7fee:	4293      	cmp	r3, r2
    7ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
    7ff4:	419a      	sbcs	r2, r3
    7ff6:	d212      	bcs.n	801e <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7ff8:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    7ffa:	f500 7004 	add.w	r0, r0, #528	; 0x210
    7ffe:	f004 fe2f 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    8002:	2800      	cmp	r0, #0
    8004:	d0ba      	beq.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    8006:	462a      	mov	r2, r5
    8008:	4631      	mov	r1, r6
    800a:	4438      	add	r0, r7
    m_curPosition += n;
    800c:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    800e:	f006 f981 	bl	e314 <memcpy>
    m_curPosition += n;
    8012:	462b      	mov	r3, r5
    8014:	e77f      	b.n	7f16 <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    8016:	69e1      	ldr	r1, [r4, #28]
    8018:	b349      	cbz	r1, 806e <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    801a:	61a1      	str	r1, [r4, #24]
    801c:	e74c      	b.n	7eb8 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    801e:	2205      	movs	r2, #5
    8020:	e7eb      	b.n	7ffa <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    8022:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    8026:	428b      	cmp	r3, r1
    8028:	d106      	bne.n	8038 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    802a:	2300      	movs	r3, #0
    802c:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    8030:	f04f 33ff 	mov.w	r3, #4294967295
    8034:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    8038:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    803c:	4632      	mov	r2, r6
    803e:	6803      	ldr	r3, [r0, #0]
    8040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8042:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    8044:	2800      	cmp	r0, #0
    8046:	d099      	beq.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
    8048:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    804c:	4698      	mov	r8, r3
    804e:	e762      	b.n	7f16 <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8050:	f104 0218 	add.w	r2, r4, #24
    8054:	f000 fa24 	bl	84a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8058:	2800      	cmp	r0, #0
    805a:	db8f      	blt.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    805c:	d104      	bne.n	8068 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    805e:	4620      	mov	r0, r4
    8060:	f7ff fb8a 	bl	7778 <ExFatFile::addCluster()>
    8064:	2800      	cmp	r0, #0
    8066:	d089      	beq.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    8068:	69a1      	ldr	r1, [r4, #24]
    806a:	6a20      	ldr	r0, [r4, #32]
    806c:	e724      	b.n	7eb8 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    806e:	4620      	mov	r0, r4
    8070:	f7ff fb82 	bl	7778 <ExFatFile::addCluster()>
    8074:	2800      	cmp	r0, #0
    8076:	d081      	beq.n	7f7c <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    8078:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    807a:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    807c:	61e1      	str	r1, [r4, #28]
    807e:	e71b      	b.n	7eb8 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    8080:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    8084:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    8086:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    808a:	f061 037f 	orn	r3, r1, #127	; 0x7f
    808e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    8092:	b003      	add	sp, #12
    8094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8098:	4648      	mov	r0, r9
    809a:	e776      	b.n	7f8a <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    809c:	e9d4 3200 	ldrd	r3, r2, [r4]
    80a0:	e752      	b.n	7f48 <ExFatFile::write(void const*, unsigned int)+0x120>
    80a2:	bf00      	nop
    80a4:	20018cdc 	.word	0x20018cdc

000080a8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  return hash;
}
//------------------------------------------------------------------------------
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    80a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80ac:	460c      	mov	r4, r1
    80ae:	4615      	mov	r5, r2
    80b0:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    80b4:	89ab      	ldrh	r3, [r5, #12]
    uint16_t u = getLe16(dirName->unicode + 2*i);
    if (fname->atEnd()) {
      return u == 0;
    }
#if USE_UTF8_LONG_NAMES
    uint16_t cp = fname->get16();
    80b6:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    80b8:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    80bc:	b91b      	cbnz	r3, 80c6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    80be:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    80c2:	429a      	cmp	r2, r3
    80c4:	d00e      	beq.n	80e4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    80c6:	f004 fdf3 	bl	ccb0 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    80ca:	f004 feb5 	bl	ce38 <toUpcase(unsigned short)>
    80ce:	4606      	mov	r6, r0
    80d0:	4638      	mov	r0, r7
    80d2:	f004 feb1 	bl	ce38 <toUpcase(unsigned short)>
    80d6:	4286      	cmp	r6, r0
    80d8:	d109      	bne.n	80ee <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    80da:	4544      	cmp	r4, r8
    80dc:	d1ea      	bne.n	80b4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
    if (u >= 0x7F || toUpper(c) != toUpper(u)) {
      return false;
    }
#endif  // USE_UTF8_LONG_NAMES
  }
  return true;
    80de:	2001      	movs	r0, #1
}
    80e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    80e4:	fab7 f087 	clz	r0, r7
    80e8:	0940      	lsrs	r0, r0, #5
}
    80ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    80ee:	2000      	movs	r0, #0
}
    80f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000080f4 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    80f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    80f8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    80fc:	b083      	sub	sp, #12
    80fe:	4688      	mov	r8, r1
  if (!isOpen()) {
    8100:	2b00      	cmp	r3, #0
    8102:	d04f      	beq.n	81a4 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8104:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    8108:	4607      	mov	r7, r0
    810a:	2b01      	cmp	r3, #1
    810c:	d953      	bls.n	81b6 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    810e:	3a01      	subs	r2, #1
  char* str = name;
    8110:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    8112:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    8116:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    8118:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    811a:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 81bc <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    811e:	2200      	movs	r2, #0
    8120:	4651      	mov	r1, sl
    8122:	4638      	mov	r0, r7
    8124:	9301      	str	r3, [sp, #4]
    8126:	f7fe fedf 	bl	6ee8 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    812a:	2800      	cmp	r0, #0
    812c:	d03a      	beq.n	81a4 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    812e:	7802      	ldrb	r2, [r0, #0]
    8130:	2ac1      	cmp	r2, #193	; 0xc1
    8132:	d137      	bne.n	81a4 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    8134:	4605      	mov	r5, r0
    8136:	f100 091e 	add.w	r9, r0, #30
    813a:	9b01      	ldr	r3, [sp, #4]
    813c:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    8140:	b324      	cbz	r4, 818c <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    8142:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    8146:	b292      	uxth	r2, r2
    8148:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    814c:	d22a      	bcs.n	81a4 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    814e:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    8152:	f3c0 0009 	ubfx	r0, r0, #0, #10
    8156:	4320      	orrs	r0, r4
    8158:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    815c:	4619      	mov	r1, r3
    815e:	4632      	mov	r2, r6
    8160:	f004 fdcc 	bl	ccfc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    8164:	4603      	mov	r3, r0
    8166:	b1e8      	cbz	r0, 81a4 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    8168:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    816a:	454d      	cmp	r5, r9
    816c:	d1e6      	bne.n	813c <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    816e:	f10a 0a01 	add.w	sl, sl, #1
    8172:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    8176:	fa5f fa8a 	uxtb.w	sl, sl
    817a:	4552      	cmp	r2, sl
    817c:	d2cf      	bcs.n	811e <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    817e:	eba3 0008 	sub.w	r0, r3, r8
    8182:	4698      	mov	r8, r3
  *str = '\0';
    8184:	2300      	movs	r3, #0
    8186:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    818a:	e00f      	b.n	81ac <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    818c:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    8190:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    8192:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    8196:	d302      	bcc.n	819e <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    8198:	2800      	cmp	r0, #0
    819a:	d1df      	bne.n	815c <ExFatFile::getName8(char*, unsigned int)+0x68>
    819c:	e7ef      	b.n	817e <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    819e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    81a2:	d306      	bcc.n	81b2 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    81a4:	2300      	movs	r3, #0
  return 0;
    81a6:	4618      	mov	r0, r3
  *name = 0;
    81a8:	f888 3000 	strb.w	r3, [r8]
}
    81ac:	b003      	add	sp, #12
    81ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81b2:	4604      	mov	r4, r0
    81b4:	e7d9      	b.n	816a <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    81b6:	2000      	movs	r0, #0
    81b8:	e7e4      	b.n	8184 <ExFatFile::getName8(char*, unsigned int)+0x90>
    81ba:	bf00      	nop
    81bc:	000ffc00 	.word	0x000ffc00

000081c0 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    81c0:	b570      	push	{r4, r5, r6, lr}
    81c2:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    81c4:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    81c6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    81ca:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    81cc:	4619      	mov	r1, r3
  uint16_t hash = 0;
    81ce:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    81d0:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    81d2:	6123      	str	r3, [r4, #16]
    next = begin;
    81d4:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    81d6:	e017      	b.n	8208 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    81d8:	f004 fd6a 	bl	ccb0 <FsName::get16()>
    if (u == 0XFFFF) {
    81dc:	42a8      	cmp	r0, r5
    81de:	d022      	beq.n	8226 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    81e0:	f004 fe2a 	bl	ce38 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    81e4:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    81e6:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    81e8:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    81ea:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    81ec:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    81f0:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    81f2:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    81f4:	fa52 f080 	uxtab	r0, r2, r0
    81f8:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    81fa:	f3c0 004e 	ubfx	r0, r0, #1, #15
    81fe:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    8202:	fa16 f080 	uxtah	r0, r6, r0
    8206:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    8208:	4620      	mov	r0, r4
    820a:	2900      	cmp	r1, #0
    820c:	d1e4      	bne.n	81d8 <ExFatFile::hashName(ExName_t*)+0x18>
    820e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    8212:	429a      	cmp	r2, r3
    8214:	d1e0      	bne.n	81d8 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    8216:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    8218:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    821a:	3801      	subs	r0, #1
    821c:	28fe      	cmp	r0, #254	; 0xfe
    821e:	bf8c      	ite	hi
    8220:	2000      	movhi	r0, #0
    8222:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    8224:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    8226:	2000      	movs	r0, #0
}
    8228:	bd70      	pop	{r4, r5, r6, pc}
    822a:	bf00      	nop

0000822c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    822c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8230:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8232:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    8234:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    8236:	2900      	cmp	r1, #0
    8238:	d042      	beq.n	82c0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    823a:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    823e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    8242:	4543      	cmp	r3, r8
    8244:	d942      	bls.n	82cc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    8246:	f008 0307 	and.w	r3, r8, #7
    824a:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    824c:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    8250:	409d      	lsls	r5, r3
    8252:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    8254:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    8256:	4644      	mov	r4, r8
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    8258:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    825c:	2200      	movs	r2, #0
    825e:	4638      	mov	r0, r7
    8260:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    8264:	f004 fcfc 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    8268:	b1e8      	cbz	r0, 82a6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    826a:	f10b 3bff 	add.w	fp, fp, #4294967295
    826e:	4483      	add	fp, r0
    8270:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    8274:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    8278:	e00a      	b.n	8290 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    827a:	454a      	cmp	r2, r9
    827c:	d02b      	beq.n	82d6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    827e:	45a0      	cmp	r8, r4
    8280:	d010      	beq.n	82a4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    8282:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    8286:	42a5      	cmp	r5, r4
    8288:	d914      	bls.n	82b4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    828a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    828e:	d00c      	beq.n	82aa <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    8290:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    8292:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    8294:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    8298:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    829c:	d0ed      	beq.n	827a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    829e:	45a0      	cmp	r8, r4
        endAlloc++;
    82a0:	4626      	mov	r6, r4
        if (endAlloc == start) {
    82a2:	d1ee      	bne.n	8282 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    82a4:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    82a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    82aa:	4558      	cmp	r0, fp
      mask = 1;
    82ac:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    82b0:	d1e0      	bne.n	8274 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    82b2:	e001      	b.n	82b8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    82b4:	2600      	movs	r6, #0
    82b6:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    82b8:	2501      	movs	r5, #1
    i = 0;
    82ba:	f04f 0b00 	mov.w	fp, #0
    82be:	e7cb      	b.n	8258 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    82c0:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    82c4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    82c8:	4543      	cmp	r3, r8
    82ca:	d8bc      	bhi.n	8246 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    82cc:	f04f 0800 	mov.w	r8, #0
    82d0:	2501      	movs	r5, #1
    start = 0;
    82d2:	46c3      	mov	fp, r8
    82d4:	e7be      	b.n	8254 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    82d6:	f1ba 0f00 	cmp.w	sl, #0
    82da:	d104      	bne.n	82e6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    82dc:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    82e0:	bf08      	it	eq
    82e2:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    82e6:	1cb0      	adds	r0, r6, #2
}
    82e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000082ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    82ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    82f0:	4680      	mov	r8, r0
  uint32_t sector;
  uint32_t start = cluster - 2;
    82f2:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    82f4:	4615      	mov	r5, r2
    82f6:	461e      	mov	r6, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    82f8:	1883      	adds	r3, r0, r2
    82fa:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    82fe:	4293      	cmp	r3, r2
    8300:	d837      	bhi.n	8372 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    8302:	bbce      	cbnz	r6, 8378 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    8304:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    8308:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    830a:	bf88      	it	hi
    830c:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    8310:	f000 0307 	and.w	r3, r0, #7
    8314:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    8316:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    831a:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    831e:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    8320:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    8324:	b2e4      	uxtb	r4, r4
    8326:	2201      	movs	r2, #1
    8328:	4640      	mov	r0, r8
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    832a:	188f      	adds	r7, r1, r2
    832c:	f004 fc98 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8330:	b1f8      	cbz	r0, 8372 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    8332:	f109 3eff 	add.w	lr, r9, #4294967295
    8336:	4486      	add	lr, r0
    8338:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    833c:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    8340:	ea1c 0f04 	tst.w	ip, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    8344:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    8348:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    834c:	bf14      	ite	ne
    834e:	2201      	movne	r2, #1
    8350:	2200      	moveq	r2, #0
    8352:	42b2      	cmp	r2, r6
    8354:	d00d      	beq.n	8372 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    8356:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    8358:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    835c:	d018      	beq.n	8390 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    835e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8362:	d1ed      	bne.n	8340 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    8364:	4570      	cmp	r0, lr
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    8366:	46a1      	mov	r9, r4
    8368:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    836c:	d1e6      	bne.n	833c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    836e:	4639      	mov	r1, r7
    8370:	e7d9      	b.n	8326 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  }

 fail:
  return false;
    8372:	2000      	movs	r0, #0
}
    8374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    8378:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    837c:	428b      	cmp	r3, r1
    837e:	d9c7      	bls.n	8310 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    8380:	4281      	cmp	r1, r0
    8382:	d3c5      	bcc.n	8310 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    8384:	4293      	cmp	r3, r2
    8386:	bf28      	it	cs
    8388:	2300      	movcs	r3, #0
    838a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    838e:	e7bf      	b.n	8310 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    8390:	2001      	movs	r0, #1
}
    8392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8396:	bf00      	nop

00008398 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    8398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    839a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    839e:	3301      	adds	r3, #1
    83a0:	428b      	cmp	r3, r1
    83a2:	d201      	bcs.n	83a8 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    83a4:	2000      	movs	r0, #0
}
    83a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83a8:	4607      	mov	r7, r0
    83aa:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    83ac:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    83b0:	2500      	movs	r5, #0
    83b2:	e005      	b.n	83c0 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    83b4:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    83b8:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    83ba:	3301      	adds	r3, #1
    83bc:	42a3      	cmp	r3, r4
    83be:	d3f1      	bcc.n	83a4 <ExFatPartition::chainSize(unsigned long)+0xc>
    DBG_FAIL_MACRO;
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    83c0:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    83c4:	2200      	movs	r2, #0
    83c6:	4630      	mov	r0, r6
    83c8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    83cc:	f004 fc48 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>

  cache = dataCachePrepare(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    83d0:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    83d2:	2800      	cmp	r0, #0
    83d4:	d0e6      	beq.n	83a4 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    83d6:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    83da:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    83dc:	1c63      	adds	r3, r4, #1
    83de:	d1e9      	bne.n	83b4 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    83e0:	1c68      	adds	r0, r5, #1
}
    83e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000083e4 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    83e4:	b538      	push	{r3, r4, r5, lr}
    83e6:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    83e8:	680b      	ldr	r3, [r1, #0]
    83ea:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    83ee:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    83f2:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    83f6:	3b02      	subs	r3, #2
    83f8:	6865      	ldr	r5, [r4, #4]
    83fa:	fa03 f30c 	lsl.w	r3, r3, ip
    83fe:	4029      	ands	r1, r5
    8400:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    8404:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    8408:	4419      	add	r1, r3
    840a:	f004 fc29 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    840e:	b118      	cbz	r0, 8418 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    8410:	6863      	ldr	r3, [r4, #4]
    8412:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8416:	4418      	add	r0, r3
}
    8418:	bd38      	pop	{r3, r4, r5, pc}
    841a:	bf00      	nop

0000841c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    841c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8420:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    8422:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    8426:	6849      	ldr	r1, [r1, #4]
    8428:	400b      	ands	r3, r1
  pos->position += offset;
    842a:	4411      	add	r1, r2
    842c:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    842e:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    8430:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    8434:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    8438:	b2d2      	uxtb	r2, r2
    843a:	40d3      	lsrs	r3, r2
  while (tmp--) {
    843c:	b32b      	cbz	r3, 848a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    843e:	4680      	mov	r8, r0
    8440:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    8442:	f500 7904 	add.w	r9, r0, #528	; 0x210
    8446:	e005      	b.n	8454 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    8448:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    844a:	3d01      	subs	r5, #1
      pos->cluster++;
    844c:	f103 0301 	add.w	r3, r3, #1
    8450:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    8452:	d31a      	bcc.n	848a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    8454:	7a26      	ldrb	r6, [r4, #8]
    8456:	2e00      	cmp	r6, #0
    8458:	d1f6      	bne.n	8448 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    845a:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    845e:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    8460:	6827      	ldr	r7, [r4, #0]
    8462:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    8464:	3301      	adds	r3, #1
    8466:	429f      	cmp	r7, r3
    8468:	d812      	bhi.n	8490 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    846a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    846e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    8472:	f004 fbf5 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    8476:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    8478:	b150      	cbz	r0, 8490 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    847a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    847e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    8480:	1c5a      	adds	r2, r3, #1
    8482:	d009      	beq.n	8498 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    8484:	3d01      	subs	r5, #1
    return 0;
  }
  *value = next;
    8486:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    8488:	d2e4      	bcs.n	8454 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    848a:	2001      	movs	r0, #1
}
    848c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    8490:	f04f 30ff 	mov.w	r0, #4294967295
}
    8494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    8498:	4630      	mov	r0, r6
}
    849a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    849e:	bf00      	nop

000084a0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    84a0:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    84a2:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    84a6:	3301      	adds	r3, #1
    84a8:	428b      	cmp	r3, r1
    84aa:	d202      	bcs.n	84b2 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    84ac:	f04f 30ff 	mov.w	r0, #4294967295
  return 1;
}
    84b0:	bd38      	pop	{r3, r4, r5, pc}
    84b2:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    84b4:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    84b8:	4615      	mov	r5, r2
    84ba:	f500 7004 	add.w	r0, r0, #528	; 0x210
    84be:	2200      	movs	r2, #0
    84c0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    84c4:	f004 fbcc 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    84c8:	2800      	cmp	r0, #0
    84ca:	d0ef      	beq.n	84ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    84cc:	00a4      	lsls	r4, r4, #2
    84ce:	f3c4 0408 	ubfx	r4, r4, #0, #9
    84d2:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    84d4:	1c5a      	adds	r2, r3, #1
    84d6:	d002      	beq.n	84de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    84d8:	2001      	movs	r0, #1
  *value = next;
    84da:	602b      	str	r3, [r5, #0]
}
    84dc:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    84de:	2000      	movs	r0, #0
}
    84e0:	bd38      	pop	{r3, r4, r5, pc}
    84e2:	bf00      	nop

000084e4 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    84e4:	2901      	cmp	r1, #1
    84e6:	d91b      	bls.n	8520 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    84e8:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    84ea:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    84ee:	460c      	mov	r4, r1
    84f0:	3301      	adds	r3, #1
    84f2:	428b      	cmp	r3, r1
    84f4:	d201      	bcs.n	84fa <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    84f6:	2000      	movs	r0, #0
}
    84f8:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    84fa:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    84fe:	4615      	mov	r5, r2
    8500:	f500 7004 	add.w	r0, r0, #528	; 0x210
    8504:	2201      	movs	r2, #1
    8506:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    850a:	f004 fba9 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    850e:	4603      	mov	r3, r0
    8510:	2800      	cmp	r0, #0
    8512:	d0f0      	beq.n	84f6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8514:	00a4      	lsls	r4, r4, #2
  return true;
    8516:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    8518:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    851c:	511d      	str	r5, [r3, r4]
}
    851e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    8520:	2000      	movs	r0, #0
}
    8522:	4770      	bx	lr

00008524 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    8524:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    8528:	3301      	adds	r3, #1
    852a:	4299      	cmp	r1, r3
    852c:	d901      	bls.n	8532 <ExFatPartition::freeChain(unsigned long)+0xe>

  return true;

 fail:
  return false;
}
    852e:	2000      	movs	r0, #0
    8530:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    8532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8536:	4605      	mov	r5, r0
    8538:	b083      	sub	sp, #12
    853a:	460c      	mov	r4, r1
    853c:	f500 7904 	add.w	r9, r0, #528	; 0x210
    8540:	460f      	mov	r7, r1
    8542:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8546:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    854a:	2200      	movs	r2, #0
    854c:	4648      	mov	r0, r9
    854e:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    8552:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    8556:	f004 fb83 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    855a:	b190      	cbz	r0, 8582 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    855c:	00a3      	lsls	r3, r4, #2
    855e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    8562:	58c2      	ldr	r2, [r0, r3]
    8564:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    8566:	1c53      	adds	r3, r2, #1
    8568:	bf16      	itet	ne
    856a:	4616      	movne	r6, r2
    856c:	f04f 0a00 	moveq.w	sl, #0
    8570:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    8574:	2c01      	cmp	r4, #1
    8576:	d904      	bls.n	8582 <ExFatPartition::freeChain(unsigned long)+0x5e>
    8578:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    857c:	3201      	adds	r2, #1
    857e:	4294      	cmp	r4, r2
    8580:	d903      	bls.n	858a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    8582:	2000      	movs	r0, #0
    8584:	b003      	add	sp, #12
    8586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    858a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    858e:	2201      	movs	r2, #1
    8590:	4648      	mov	r0, r9
    8592:	4459      	add	r1, fp
    8594:	f004 fb64 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    8598:	2800      	cmp	r0, #0
    859a:	d0f2      	beq.n	8582 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    859c:	9b01      	ldr	r3, [sp, #4]
    859e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    85a2:	f1ba 0f00 	cmp.w	sl, #0
    85a6:	d012      	beq.n	85ce <ExFatPartition::freeChain(unsigned long)+0xaa>
    85a8:	3401      	adds	r4, #1
    85aa:	42b4      	cmp	r4, r6
    85ac:	d008      	beq.n	85c0 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    85ae:	2300      	movs	r3, #0
    85b0:	1be2      	subs	r2, r4, r7
    85b2:	4639      	mov	r1, r7
    85b4:	4628      	mov	r0, r5
    85b6:	f7ff fe99 	bl	82ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    85ba:	2800      	cmp	r0, #0
    85bc:	d0e1      	beq.n	8582 <ExFatPartition::freeChain(unsigned long)+0x5e>
    85be:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    85c0:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    85c4:	3301      	adds	r3, #1
    85c6:	42b3      	cmp	r3, r6
    85c8:	d3db      	bcc.n	8582 <ExFatPartition::freeChain(unsigned long)+0x5e>
    85ca:	4634      	mov	r4, r6
    85cc:	e7bb      	b.n	8546 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    85ce:	1c62      	adds	r2, r4, #1
    85d0:	4653      	mov	r3, sl
    85d2:	4639      	mov	r1, r7
    85d4:	4628      	mov	r0, r5
    85d6:	1bd2      	subs	r2, r2, r7
}
    85d8:	b003      	add	sp, #12
    85da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    85de:	f7ff be85 	b.w	82ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    85e2:	bf00      	nop

000085e4 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    85e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    85e8:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    85ea:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    85ec:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    85f0:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    85f4:	462c      	mov	r4, r5
    85f6:	2200      	movs	r2, #0
    85f8:	4640      	mov	r0, r8
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    85fa:	1c4f      	adds	r7, r1, #1
    85fc:	f004 fb30 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    8600:	b1a8      	cbz	r0, 862e <ExFatPartition::freeClusterCount()+0x4a>
    8602:	f100 3eff 	add.w	lr, r0, #4294967295
    8606:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
            usedCount++;
          }
        }
      }
      nc += 8;
      if (nc >= m_clusterCount) {
    860a:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    860e:	e005      	b.n	861c <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    8610:	b979      	cbnz	r1, 8632 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    8612:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    8614:	4284      	cmp	r4, r0
    8616:	d209      	bcs.n	862c <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    8618:	454c      	cmp	r4, r9
    861a:	d016      	beq.n	864a <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    861c:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    8620:	29ff      	cmp	r1, #255	; 0xff
    8622:	d1f5      	bne.n	8610 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    8624:	3408      	adds	r4, #8
        usedCount+= 8;
    8626:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    8628:	4284      	cmp	r4, r0
    862a:	d3f5      	bcc.n	8618 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    862c:	1b40      	subs	r0, r0, r5
      }
    }
  }
}
    862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8632:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8634:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    8636:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8638:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    863c:	bf18      	it	ne
    863e:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    8640:	3a01      	subs	r2, #1
    8642:	fa5f f38c 	uxtb.w	r3, ip
    8646:	d1f6      	bne.n	8636 <ExFatPartition::freeClusterCount()+0x52>
    8648:	e7e3      	b.n	8612 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    864a:	4639      	mov	r1, r7
    864c:	e7d3      	b.n	85f6 <ExFatPartition::freeClusterCount()+0x12>
    864e:	bf00      	nop

00008650 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    8652:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    8654:	f04f 36ff 	mov.w	r6, #4294967295
    8658:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    865c:	4615      	mov	r5, r2
  m_blockDev = dev;
    865e:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8662:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    8664:	6041      	str	r1, [r0, #4]
    8666:	461a      	mov	r2, r3
    8668:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    866c:	4619      	mov	r1, r3
  m_fatType = 0;
    866e:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    8672:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    8674:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    8676:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    867a:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    867e:	4638      	mov	r0, r7
    8680:	f004 faee 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    8684:	2d04      	cmp	r5, #4
    8686:	d80d      	bhi.n	86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    8688:	4606      	mov	r6, r0
    868a:	b158      	cbz	r0, 86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    868c:	b1bd      	cbz	r5, 86be <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    868e:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    8690:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    8694:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    8698:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    869c:	d102      	bne.n	86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    869e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    86a2:	b90b      	cbnz	r3, 86a8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    86a4:	2000      	movs	r0, #0
}
    86a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    86a8:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    86ac:	4638      	mov	r0, r7
    86ae:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    86b2:	4629      	mov	r1, r5
    86b4:	f004 fad4 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    86b8:	4606      	mov	r6, r0
    86ba:	2800      	cmp	r0, #0
    86bc:	d0f2      	beq.n	86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    86be:	2205      	movs	r2, #5
    86c0:	491a      	ldr	r1, [pc, #104]	; (872c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    86c2:	1cf0      	adds	r0, r6, #3
    86c4:	f009 ff5c 	bl	12580 <strncmp>
    86c8:	2800      	cmp	r0, #0
    86ca:	d1eb      	bne.n	86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    86cc:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    86d0:	2b09      	cmp	r3, #9
    86d2:	d1e7      	bne.n	86a4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    86d4:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    86d6:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    86d8:	442b      	add	r3, r5
    86da:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    86de:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    86e0:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    86e4:	6db3      	ldr	r3, [r6, #88]	; 0x58
    86e6:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    86e8:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    86ea:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    86ee:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    86f0:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    86f4:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    86f6:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    86fa:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    86fe:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    8702:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8704:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    8708:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    870c:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    8710:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    8712:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    8716:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    871a:	462a      	mov	r2, r5
    871c:	f7ff fd86 	bl	822c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    8720:	2340      	movs	r3, #64	; 0x40
  return true;
    8722:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    8724:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    8728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    872a:	bf00      	nop
    872c:	20000b7c 	.word	0x20000b7c

00008730 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    8730:	b510      	push	{r4, lr}
    8732:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    8734:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    8738:	f7ff fe2e 	bl	8398 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    873c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    8740:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    8742:	b2db      	uxtb	r3, r3
}
    8744:	4098      	lsls	r0, r3
    8746:	bd10      	pop	{r4, pc}

00008748 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    8748:	b570      	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    874a:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    874e:	b08e      	sub	sp, #56	; 0x38
  ExFatFile() {}
    8750:	2300      	movs	r3, #0
    8752:	460a      	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    8754:	4668      	mov	r0, sp
    8756:	4621      	mov	r1, r4
    8758:	930c      	str	r3, [sp, #48]	; 0x30
    875a:	f7fe ff77 	bl	764c <ExFatFile::open(ExFatFile*, char const*, int)>
    875e:	4605      	mov	r5, r0
    8760:	b1d8      	cbz	r0, 879a <ExFatVolume::chdir(char const*)+0x52>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    8762:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    8766:	f013 0350 	ands.w	r3, r3, #80	; 0x50
    876a:	d019      	beq.n	87a0 <ExFatVolume::chdir(char const*)+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    876c:	46ee      	mov	lr, sp
    876e:	46a4      	mov	ip, r4
    8770:	ae0c      	add	r6, sp, #48	; 0x30
    8772:	4674      	mov	r4, lr
    8774:	f10c 0c10 	add.w	ip, ip, #16
    8778:	f10e 0e10 	add.w	lr, lr, #16
    877c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    877e:	42b4      	cmp	r4, r6
    8780:	f84c 0c10 	str.w	r0, [ip, #-16]
    8784:	f84c 1c0c 	str.w	r1, [ip, #-12]
    8788:	f84c 2c08 	str.w	r2, [ip, #-8]
    878c:	f84c 3c04 	str.w	r3, [ip, #-4]
    8790:	d1ef      	bne.n	8772 <ExFatVolume::chdir(char const*)+0x2a>
    8792:	f8de 0000 	ldr.w	r0, [lr]
    8796:	f8cc 0000 	str.w	r0, [ip]
  return true;

 fail:
  return false;
}
    879a:	4628      	mov	r0, r5
    879c:	b00e      	add	sp, #56	; 0x38
    879e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    87a0:	461d      	mov	r5, r3
}
    87a2:	4628      	mov	r0, r5
    87a4:	b00e      	add	sp, #56	; 0x38
    87a6:	bd70      	pop	{r4, r5, r6, pc}

000087a8 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    87a8:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    87aa:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    87ae:	b082      	sub	sp, #8
    87b0:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    87b2:	2b00      	cmp	r3, #0
    87b4:	db0d      	blt.n	87d2 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    87b6:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    87b8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    87bc:	f004 fa24 	bl	cc08 <FsCache::sync()>
    87c0:	2800      	cmp	r0, #0
    87c2:	d13b      	bne.n	883c <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    87c4:	7863      	ldrb	r3, [r4, #1]
  return false;
    87c6:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    87c8:	f043 0301 	orr.w	r3, r3, #1
    87cc:	7063      	strb	r3, [r4, #1]
}
    87ce:	b002      	add	sp, #8
    87d0:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    87d2:	6880      	ldr	r0, [r0, #8]
    87d4:	2201      	movs	r2, #1
    87d6:	69a1      	ldr	r1, [r4, #24]
    87d8:	3028      	adds	r0, #40	; 0x28
    87da:	f004 fa41 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    87de:	2800      	cmp	r0, #0
    87e0:	d0f0      	beq.n	87c4 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    87e2:	88a5      	ldrh	r5, [r4, #4]
    87e4:	f005 050f 	and.w	r5, r5, #15
    87e8:	016b      	lsls	r3, r5, #5
    87ea:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    87ee:	5cc3      	ldrb	r3, [r0, r3]
    87f0:	2be5      	cmp	r3, #229	; 0xe5
    87f2:	d0e7      	beq.n	87c4 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    87f4:	7823      	ldrb	r3, [r4, #0]
    87f6:	071b      	lsls	r3, r3, #28
    87f8:	d501      	bpl.n	87fe <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    87fa:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    87fc:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    87fe:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    8800:	4915      	ldr	r1, [pc, #84]	; (8858 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8802:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    8804:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    8806:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    8808:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    880a:	b166      	cbz	r6, 8826 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    880c:	f10d 0203 	add.w	r2, sp, #3
    8810:	f10d 0106 	add.w	r1, sp, #6
    8814:	a801      	add	r0, sp, #4
    8816:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    8818:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    881c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    8820:	832b      	strh	r3, [r5, #24]
    8822:	826b      	strh	r3, [r5, #18]
    8824:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    8826:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    8828:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    882a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    882e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    8832:	70a3      	strb	r3, [r4, #2]
    8834:	f004 f9e8 	bl	cc08 <FsCache::sync()>
    8838:	2800      	cmp	r0, #0
    883a:	d0c3      	beq.n	87c4 <FatFile::sync() [clone .part.0]+0x1c>
    883c:	f505 700e 	add.w	r0, r5, #568	; 0x238
    8840:	f004 f9e2 	bl	cc08 <FsCache::sync()>
    8844:	2800      	cmp	r0, #0
    8846:	d0bd      	beq.n	87c4 <FatFile::sync() [clone .part.0]+0x1c>
    8848:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    884a:	6803      	ldr	r3, [r0, #0]
    884c:	6a1b      	ldr	r3, [r3, #32]
    884e:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8850:	2800      	cmp	r0, #0
    8852:	d0b7      	beq.n	87c4 <FatFile::sync() [clone .part.0]+0x1c>
    8854:	e7bb      	b.n	87ce <FatFile::sync() [clone .part.0]+0x26>
    8856:	bf00      	nop
    8858:	20018cdc 	.word	0x20018cdc

0000885c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    885c:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    885e:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    8860:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    8864:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    8866:	6880      	ldr	r0, [r0, #8]
    8868:	4629      	mov	r1, r5
    886a:	f001 fd65 	bl	a338 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    886e:	b150      	cbz	r0, 8886 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    8870:	b155      	cbz	r5, 8888 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    8872:	6923      	ldr	r3, [r4, #16]
    8874:	3501      	adds	r5, #1
    8876:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    8878:	78a3      	ldrb	r3, [r4, #2]
    887a:	bf18      	it	ne
    887c:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    8880:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8884:	70a3      	strb	r3, [r4, #2]
}
    8886:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    8888:	78a3      	ldrb	r3, [r4, #2]
    888a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    888e:	e7f7      	b.n	8880 <FatFile::addCluster()+0x24>

00008890 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    8890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    8892:	7804      	ldrb	r4, [r0, #0]
    8894:	f014 0420 	ands.w	r4, r4, #32
    8898:	d104      	bne.n	88a4 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    889a:	4b1a      	ldr	r3, [pc, #104]	; (8904 <FatFile::addDirCluster()+0x74>)
    889c:	4605      	mov	r5, r0
    889e:	6942      	ldr	r2, [r0, #20]
    88a0:	429a      	cmp	r2, r3
    88a2:	d302      	bcc.n	88aa <FatFile::addDirCluster()+0x1a>
  return false;
    88a4:	2700      	movs	r7, #0
}
    88a6:	4638      	mov	r0, r7
    88a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    88aa:	f7ff ffd7 	bl	885c <FatFile::addCluster()>
    88ae:	4607      	mov	r7, r0
    88b0:	2800      	cmp	r0, #0
    88b2:	d0f7      	beq.n	88a4 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    88b4:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    88b6:	692e      	ldr	r6, [r5, #16]
    88b8:	7982      	ldrb	r2, [r0, #6]
    88ba:	3e02      	subs	r6, #2
    88bc:	6941      	ldr	r1, [r0, #20]
    88be:	4096      	lsls	r6, r2
    88c0:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    88c2:	7901      	ldrb	r1, [r0, #4]
    88c4:	b1a9      	cbz	r1, 88f2 <FatFile::addDirCluster()+0x62>
    88c6:	4621      	mov	r1, r4
    88c8:	e006      	b.n	88d8 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    88ca:	f009 fdb1 	bl	12430 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    88ce:	68a8      	ldr	r0, [r5, #8]
    88d0:	b2e1      	uxtb	r1, r4
    88d2:	7902      	ldrb	r2, [r0, #4]
    88d4:	428a      	cmp	r2, r1
    88d6:	d90b      	bls.n	88f0 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    88d8:	4431      	add	r1, r6
    88da:	2205      	movs	r2, #5
    88dc:	3028      	adds	r0, #40	; 0x28
    88de:	3401      	adds	r4, #1
    88e0:	f004 f9be 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    88e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    88e8:	2100      	movs	r1, #0
    if (!pc) {
    88ea:	2800      	cmp	r0, #0
    88ec:	d1ed      	bne.n	88ca <FatFile::addDirCluster()+0x3a>
    88ee:	e7d9      	b.n	88a4 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    88f0:	7982      	ldrb	r2, [r0, #6]
    88f2:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    88f6:	6969      	ldr	r1, [r5, #20]
}
    88f8:	4638      	mov	r0, r7
    88fa:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    88fc:	fa11 f383 	uxtah	r3, r1, r3
    8900:	616b      	str	r3, [r5, #20]
}
    8902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8904:	001ffe00 	.word	0x001ffe00

00008908 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    8908:	b510      	push	{r4, lr}
    890a:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    890c:	6880      	ldr	r0, [r0, #8]
    890e:	460a      	mov	r2, r1
    8910:	3028      	adds	r0, #40	; 0x28
    8912:	69a1      	ldr	r1, [r4, #24]
    8914:	f004 f9a4 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8918:	b120      	cbz	r0, 8924 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    891a:	88a3      	ldrh	r3, [r4, #4]
    891c:	f003 030f 	and.w	r3, r3, #15
    8920:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    8924:	bd10      	pop	{r4, pc}
    8926:	bf00      	nop

00008928 <FatFile::close()>:
bool FatFile::close() {
    8928:	b510      	push	{r4, lr}
  if (!isOpen()) {
    892a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    892c:	4604      	mov	r4, r0
  if (!isOpen()) {
    892e:	b12b      	cbz	r3, 893c <FatFile::close()+0x14>
    8930:	f7ff ff3a 	bl	87a8 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    8934:	2300      	movs	r3, #0
    8936:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8938:	70a3      	strb	r3, [r4, #2]
}
    893a:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    893c:	2300      	movs	r3, #0
    return true;
    893e:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    8940:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    8942:	70a3      	strb	r3, [r4, #2]
}
    8944:	bd10      	pop	{r4, pc}
    8946:	bf00      	nop

00008948 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    8948:	780b      	ldrb	r3, [r1, #0]
    894a:	f013 0f70 	tst.w	r3, #112	; 0x70
    894e:	d101      	bne.n	8954 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    8950:	2000      	movs	r0, #0
    8952:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    8954:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8956:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    895a:	b089      	sub	sp, #36	; 0x24
    895c:	460d      	mov	r5, r1
    895e:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    8960:	f001 f84a 	bl	99f8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8964:	b138      	cbz	r0, 8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    8966:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8968:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    896a:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    896c:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    896e:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    8970:	f7ff ff8e 	bl	8890 <FatFile::addDirCluster()>
    8974:	b910      	cbnz	r0, 897c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    8976:	2000      	movs	r0, #0
    8978:	b009      	add	sp, #36	; 0x24
    897a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    897c:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    897e:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    8980:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    8982:	b16b      	cbz	r3, 89a0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    8984:	6963      	ldr	r3, [r4, #20]
    8986:	b133      	cbz	r3, 8996 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8988:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    898a:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    898c:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    8990:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    8994:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    8996:	4620      	mov	r0, r4
    8998:	f7ff ff06 	bl	87a8 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    899c:	2800      	cmp	r0, #0
    899e:	d0ea      	beq.n	8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    89a0:	68a0      	ldr	r0, [r4, #8]
    89a2:	2201      	movs	r2, #1
    89a4:	69a1      	ldr	r1, [r4, #24]
    89a6:	3028      	adds	r0, #40	; 0x28
    89a8:	f004 f95a 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    89ac:	2800      	cmp	r0, #0
    89ae:	d0e2      	beq.n	8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    89b0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    89b4:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    89b6:	f00c 0c0f 	and.w	ip, ip, #15
    89ba:	ea4f 134c 	mov.w	r3, ip, lsl #5
    89be:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    89c2:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    89c6:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    89c8:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    89ca:	6a23      	ldr	r3, [r4, #32]
    89cc:	f897 e006 	ldrb.w	lr, [r7, #6]
    89d0:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    89d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    89d6:	f8dc 2008 	ldr.w	r2, [ip, #8]
    89da:	f8dc 300c 	ldr.w	r3, [ip, #12]
    89de:	fa06 f60e 	lsl.w	r6, r6, lr
    89e2:	46ee      	mov	lr, sp
    89e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    89e8:	f8dc 0010 	ldr.w	r0, [ip, #16]
    89ec:	f8dc 1014 	ldr.w	r1, [ip, #20]
    89f0:	f8dc 2018 	ldr.w	r2, [ip, #24]
    89f4:	f8dc 301c 	ldr.w	r3, [ip, #28]
    89f8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    89fc:	697b      	ldr	r3, [r7, #20]
    89fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8a02:	2201      	movs	r2, #1
    8a04:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    8a06:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    8a0a:	f8cd 3001 	str.w	r3, [sp, #1]
    8a0e:	f8cd 3005 	str.w	r3, [sp, #5]
    8a12:	f8ad 3009 	strh.w	r3, [sp, #9]
    8a16:	f004 f923 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8a1a:	4684      	mov	ip, r0
    8a1c:	2800      	cmp	r0, #0
    8a1e:	d0aa      	beq.n	8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    8a20:	272e      	movs	r7, #46	; 0x2e
    8a22:	46ee      	mov	lr, sp
    8a24:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    8a28:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    8a2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8a2e:	f8cc 0000 	str.w	r0, [ip]
    8a32:	f8cc 1004 	str.w	r1, [ip, #4]
    8a36:	f8cc 2008 	str.w	r2, [ip, #8]
    8a3a:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    8a3e:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    8a42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8a46:	f8cc 0010 	str.w	r0, [ip, #16]
    8a4a:	f8cc 1014 	str.w	r1, [ip, #20]
    8a4e:	f8cc 2018 	str.w	r2, [ip, #24]
    8a52:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8a56:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8a58:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    8a5a:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    8a5e:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    8a62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8a64:	f8cc 0020 	str.w	r0, [ip, #32]
    8a68:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    8a6c:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    8a70:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    8a74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8a76:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    8a7a:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    8a7e:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    8a82:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    8a86:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    8a88:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8a8c:	f004 f8bc 	bl	cc08 <FsCache::sync()>
    8a90:	2800      	cmp	r0, #0
    8a92:	f43f af70 	beq.w	8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8a96:	f504 700e 	add.w	r0, r4, #568	; 0x238
    8a9a:	f004 f8b5 	bl	cc08 <FsCache::sync()>
    8a9e:	2800      	cmp	r0, #0
    8aa0:	f43f af69 	beq.w	8976 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    8aa4:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    8aa6:	6803      	ldr	r3, [r0, #0]
    8aa8:	6a1b      	ldr	r3, [r3, #32]
}
    8aaa:	b009      	add	sp, #36	; 0x24
    8aac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8ab0:	4718      	bx	r3
    8ab2:	bf00      	nop

00008ab4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
class FsName {
    8ab8:	2600      	movs	r6, #0
    8aba:	b094      	sub	sp, #80	; 0x50
    8abc:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    8abe:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    8ac0:	9201      	str	r2, [sp, #4]
    8ac2:	f8ad 6014 	strh.w	r6, [sp, #20]
    8ac6:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d141      	bne.n	8b50 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8acc:	780b      	ldrb	r3, [r1, #0]
    8ace:	460d      	mov	r5, r1
    8ad0:	f013 0f70 	tst.w	r3, #112	; 0x70
    8ad4:	d03c      	beq.n	8b50 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    8ad6:	7813      	ldrb	r3, [r2, #0]
    8ad8:	4604      	mov	r4, r0
    8ada:	4616      	mov	r6, r2
    8adc:	2b2f      	cmp	r3, #47	; 0x2f
    8ade:	d03b      	beq.n	8b58 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    8ae0:	2700      	movs	r7, #0
    8ae2:	e028      	b.n	8b36 <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    8ae4:	9e01      	ldr	r6, [sp, #4]
    8ae6:	7836      	ldrb	r6, [r6, #0]
    8ae8:	2e00      	cmp	r6, #0
    8aea:	d050      	beq.n	8b8e <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    8aec:	f000 ff84 	bl	99f8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    8af0:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    8af2:	aa02      	add	r2, sp, #8
    8af4:	4629      	mov	r1, r5
    8af6:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    8af8:	b92b      	cbnz	r3, 8b06 <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    8afa:	f1b8 0f00 	cmp.w	r8, #0
    8afe:	d027      	beq.n	8b50 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8b00:	f7ff ff22 	bl	8948 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    8b04:	b320      	cbz	r0, 8b50 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    8b06:	46a6      	mov	lr, r4
    8b08:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    8b0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8b14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8b18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8b1c:	f8de 5000 	ldr.w	r5, [lr]
    8b20:	4620      	mov	r0, r4
  if (!isOpen()) {
    8b22:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    8b24:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    8b28:	b10b      	cbz	r3, 8b2e <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    8b2a:	f7ff fe3d 	bl	87a8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8b2e:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    8b30:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    8b32:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8b34:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8b36:	4631      	mov	r1, r6
    8b38:	ab01      	add	r3, sp, #4
    8b3a:	aa02      	add	r2, sp, #8
    8b3c:	4620      	mov	r0, r4
    8b3e:	f001 f8a7 	bl	9c90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8b42:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    8b44:	aa02      	add	r2, sp, #8
    8b46:	4629      	mov	r1, r5
    8b48:	2300      	movs	r3, #0
    8b4a:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8b4c:	2e00      	cmp	r6, #0
    8b4e:	d1c9      	bne.n	8ae4 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    8b50:	2000      	movs	r0, #0
}
    8b52:	b014      	add	sp, #80	; 0x50
    8b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8b58:	3601      	adds	r6, #1
    8b5a:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    8b5c:	7833      	ldrb	r3, [r6, #0]
    8b5e:	2b2f      	cmp	r3, #47	; 0x2f
    8b60:	d0fa      	beq.n	8b58 <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    8b62:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    8b64:	2224      	movs	r2, #36	; 0x24
    8b66:	2100      	movs	r1, #0
    8b68:	a80b      	add	r0, sp, #44	; 0x2c
    8b6a:	f009 fc61 	bl	12430 <memset>
  m_vol = vol;
    8b6e:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    8b70:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8b72:	2b10      	cmp	r3, #16
    8b74:	d003      	beq.n	8b7e <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    8b76:	2b20      	cmp	r3, #32
    8b78:	d00f      	beq.n	8b9a <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    8b7a:	2b0c      	cmp	r3, #12
    8b7c:	d1e8      	bne.n	8b50 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    8b7e:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8b80:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    8b84:	2301      	movs	r3, #1
    parent = &tmpDir;
    8b86:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    8b88:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    8b8c:	e7a8      	b.n	8ae0 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    8b8e:	aa02      	add	r2, sp, #8
    8b90:	f7ff feda 	bl	8948 <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    8b94:	b014      	add	sp, #80	; 0x50
    8b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    8b9a:	2340      	movs	r3, #64	; 0x40
    8b9c:	e7f0      	b.n	8b80 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    8b9e:	bf00      	nop

00008ba0 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ba4:	2500      	movs	r5, #0
    8ba6:	b094      	sub	sp, #80	; 0x50
    8ba8:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    8baa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    8bac:	9201      	str	r2, [sp, #4]
    8bae:	9502      	str	r5, [sp, #8]
    8bb0:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    8bb4:	2b00      	cmp	r3, #0
    8bb6:	d137      	bne.n	8c28 <FatFile::open(FatFile*, char const*, int)+0x88>
    8bb8:	780b      	ldrb	r3, [r1, #0]
    8bba:	460e      	mov	r6, r1
    8bbc:	f013 0f70 	tst.w	r3, #112	; 0x70
    8bc0:	d032      	beq.n	8c28 <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    8bc2:	7813      	ldrb	r3, [r2, #0]
    8bc4:	4604      	mov	r4, r0
    8bc6:	4615      	mov	r5, r2
    8bc8:	2b2f      	cmp	r3, #47	; 0x2f
    8bca:	d031      	beq.n	8c30 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8bcc:	2700      	movs	r7, #0
    8bce:	e01e      	b.n	8c0e <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    8bd0:	9d01      	ldr	r5, [sp, #4]
    8bd2:	782d      	ldrb	r5, [r5, #0]
    8bd4:	2d00      	cmp	r5, #0
    8bd6:	d040      	beq.n	8c5a <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    8bd8:	f000 ff0e 	bl	99f8 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    8bdc:	46a6      	mov	lr, r4
    8bde:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    8be2:	b308      	cbz	r0, 8c28 <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    8be4:	4666      	mov	r6, ip
  if (!isOpen()) {
    8be6:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    8be8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8bec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8bf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8bf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8bf8:	f8de 3000 	ldr.w	r3, [lr]
    8bfc:	4620      	mov	r0, r4
    8bfe:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    8c02:	b10d      	cbz	r5, 8c08 <FatFile::open(FatFile*, char const*, int)+0x68>
    8c04:	f7ff fdd0 	bl	87a8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    8c08:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    8c0a:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    8c0c:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    8c0e:	4629      	mov	r1, r5
    8c10:	ab01      	add	r3, sp, #4
    8c12:	aa0b      	add	r2, sp, #44	; 0x2c
    8c14:	4620      	mov	r0, r4
    8c16:	f001 f83b 	bl	9c90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    8c1a:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    8c1c:	aa0b      	add	r2, sp, #44	; 0x2c
    8c1e:	4631      	mov	r1, r6
    8c20:	2300      	movs	r3, #0
    8c22:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    8c24:	2d00      	cmp	r5, #0
    8c26:	d1d3      	bne.n	8bd0 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    8c28:	2000      	movs	r0, #0
}
    8c2a:	b014      	add	sp, #80	; 0x50
    8c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    8c30:	3501      	adds	r5, #1
    8c32:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    8c34:	7829      	ldrb	r1, [r5, #0]
    8c36:	292f      	cmp	r1, #47	; 0x2f
    8c38:	d0fa      	beq.n	8c30 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    8c3a:	b9a9      	cbnz	r1, 8c68 <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    8c3c:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8c3e:	2224      	movs	r2, #36	; 0x24
    8c40:	4620      	mov	r0, r4
    8c42:	f009 fbf5 	bl	12430 <memset>
  m_vol = vol;
    8c46:	60a5      	str	r5, [r4, #8]
    8c48:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8c4a:	2b10      	cmp	r3, #16
    8c4c:	d003      	beq.n	8c56 <FatFile::open(FatFile*, char const*, int)+0xb6>
    8c4e:	2b20      	cmp	r3, #32
    8c50:	d022      	beq.n	8c98 <FatFile::open(FatFile*, char const*, int)+0xf8>
    8c52:	2b0c      	cmp	r3, #12
    8c54:	d1e8      	bne.n	8c28 <FatFile::open(FatFile*, char const*, int)+0x88>
    8c56:	2220      	movs	r2, #32
    8c58:	e01f      	b.n	8c9a <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    8c5a:	4643      	mov	r3, r8
    8c5c:	aa0b      	add	r2, sp, #44	; 0x2c
    8c5e:	f000 fecb 	bl	99f8 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    8c62:	b014      	add	sp, #80	; 0x50
    8c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    8c68:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    8c6a:	2224      	movs	r2, #36	; 0x24
    8c6c:	2100      	movs	r1, #0
    8c6e:	a802      	add	r0, sp, #8
    8c70:	f009 fbde 	bl	12430 <memset>
  m_vol = vol;
    8c74:	9604      	str	r6, [sp, #16]
    8c76:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8c78:	2b10      	cmp	r3, #16
    8c7a:	d003      	beq.n	8c84 <FatFile::open(FatFile*, char const*, int)+0xe4>
    8c7c:	2b20      	cmp	r3, #32
    8c7e:	d003      	beq.n	8c88 <FatFile::open(FatFile*, char const*, int)+0xe8>
    8c80:	2b0c      	cmp	r3, #12
    8c82:	d1d1      	bne.n	8c28 <FatFile::open(FatFile*, char const*, int)+0x88>
    8c84:	2320      	movs	r3, #32
    8c86:	e000      	b.n	8c8a <FatFile::open(FatFile*, char const*, int)+0xea>
    8c88:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8c8a:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    8c8e:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    8c90:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    8c92:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    8c96:	e799      	b.n	8bcc <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    8c98:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8c9a:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8c9c:	7022      	strb	r2, [r4, #0]
  return true;
    8c9e:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8ca0:	70a3      	strb	r3, [r4, #2]
  return true;
    8ca2:	e7c2      	b.n	8c2a <FatFile::open(FatFile*, char const*, int)+0x8a>

00008ca4 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    8ca4:	b119      	cbz	r1, 8cae <FatFile::open(FatVolume*, char const*, int)+0xa>
    8ca6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    8caa:	f7ff bf79 	b.w	8ba0 <FatFile::open(FatFile*, char const*, int)>
}
    8cae:	4608      	mov	r0, r1
    8cb0:	4770      	bx	lr
    8cb2:	bf00      	nop

00008cb4 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    8cb4:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    8cb6:	b570      	push	{r4, r5, r6, lr}
    8cb8:	460d      	mov	r5, r1
    8cba:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    8cbc:	b993      	cbnz	r3, 8ce4 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    8cbe:	7806      	ldrb	r6, [r0, #0]
    8cc0:	b10e      	cbz	r6, 8cc6 <FatFile::openCluster(FatFile*)+0x12>
  return false;
    8cc2:	4618      	mov	r0, r3
}
    8cc4:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    8cc6:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    8cc8:	2224      	movs	r2, #36	; 0x24
    8cca:	4631      	mov	r1, r6
    8ccc:	f009 fbb0 	bl	12430 <memset>
  m_vol = vol;
    8cd0:	60a5      	str	r5, [r4, #8]
    8cd2:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    8cd4:	2b10      	cmp	r3, #16
    8cd6:	d018      	beq.n	8d0a <FatFile::openCluster(FatFile*)+0x56>
    8cd8:	2b20      	cmp	r3, #32
    8cda:	d010      	beq.n	8cfe <FatFile::openCluster(FatFile*)+0x4a>
    8cdc:	2b0c      	cmp	r3, #12
    8cde:	d014      	beq.n	8d0a <FatFile::openCluster(FatFile*)+0x56>
    8ce0:	4630      	mov	r0, r6
}
    8ce2:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    8ce4:	2224      	movs	r2, #36	; 0x24
    8ce6:	2100      	movs	r1, #0
    8ce8:	f009 fba2 	bl	12430 <memset>
  m_flags = FILE_FLAG_READ;
    8cec:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    8cee:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    8cf0:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    8cf2:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    8cf4:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    8cf8:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    8cfa:	6223      	str	r3, [r4, #32]
}
    8cfc:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8cfe:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8d00:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8d02:	7022      	strb	r2, [r4, #0]
  return true;
    8d04:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8d06:	70a3      	strb	r3, [r4, #2]
}
    8d08:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8d0a:	2220      	movs	r2, #32
    8d0c:	e7f8      	b.n	8d00 <FatFile::openCluster(FatFile*)+0x4c>
    8d0e:	bf00      	nop

00008d10 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    8d10:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    8d12:	7805      	ldrb	r5, [r0, #0]
    8d14:	b10d      	cbz	r5, 8d1a <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    8d16:	2000      	movs	r0, #0
}
    8d18:	bd70      	pop	{r4, r5, r6, pc}
    8d1a:	460e      	mov	r6, r1
    8d1c:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    8d1e:	2224      	movs	r2, #36	; 0x24
    8d20:	4629      	mov	r1, r5
    8d22:	f009 fb85 	bl	12430 <memset>
  m_vol = vol;
    8d26:	60a6      	str	r6, [r4, #8]
    8d28:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    8d2a:	2b10      	cmp	r3, #16
    8d2c:	d00b      	beq.n	8d46 <FatFile::openRoot(FatVolume*)+0x36>
    8d2e:	2b20      	cmp	r3, #32
    8d30:	d003      	beq.n	8d3a <FatFile::openRoot(FatVolume*)+0x2a>
    8d32:	2b0c      	cmp	r3, #12
    8d34:	d007      	beq.n	8d46 <FatFile::openRoot(FatVolume*)+0x36>
    8d36:	4628      	mov	r0, r5
}
    8d38:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8d3a:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    8d3c:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    8d3e:	7022      	strb	r2, [r4, #0]
  return true;
    8d40:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    8d42:	70a3      	strb	r3, [r4, #2]
}
    8d44:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    8d46:	2220      	movs	r2, #32
    8d48:	e7f8      	b.n	8d3c <FatFile::openRoot(FatVolume*)+0x2c>
    8d4a:	bf00      	nop

00008d4c <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    8d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d50:	ed2d 8b02 	vpush	{d8}
  /** \return true if this file has a Long File Name. */
  bool isLFN() const {return m_lfnOrd;}
  /** \return True if this is an open file/directory. */
  bool isOpen() const {return m_attributes;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    8d54:	7883      	ldrb	r3, [r0, #2]
    8d56:	b083      	sub	sp, #12
    8d58:	4605      	mov	r5, r0
  if (!isReadable()) {
    8d5a:	07df      	lsls	r7, r3, #31
    8d5c:	f140 808c 	bpl.w	8e78 <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    8d60:	4688      	mov	r8, r1
    8d62:	7801      	ldrb	r1, [r0, #0]
    8d64:	4692      	mov	sl, r2
  if (isFile()) {
    8d66:	070e      	lsls	r6, r1, #28
    8d68:	f100 8091 	bmi.w	8e8e <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    8d6c:	068c      	lsls	r4, r1, #26
    8d6e:	d508      	bpl.n	8d82 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    8d70:	6883      	ldr	r3, [r0, #8]
    8d72:	895a      	ldrh	r2, [r3, #10]
    8d74:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    8d76:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    8d7a:	b29b      	uxth	r3, r3
    8d7c:	459a      	cmp	sl, r3
    8d7e:	bf28      	it	cs
    8d80:	469a      	movcs	sl, r3
  while (toRead) {
    8d82:	f1ba 0f00 	cmp.w	sl, #0
    8d86:	f000 80af 	beq.w	8ee8 <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8d8a:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8d8c:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    8d90:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8d92:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    8d94:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8d98:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8d9c:	68af      	ldr	r7, [r5, #8]
    8d9e:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    8da2:	d53d      	bpl.n	8e20 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    8da4:	6a39      	ldr	r1, [r7, #32]
    8da6:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    8daa:	f1bb 0f00 	cmp.w	fp, #0
    8dae:	d151      	bne.n	8e54 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    8db0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8db4:	d34e      	bcc.n	8e54 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    8db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    8db8:	4291      	cmp	r1, r2
    8dba:	d04b      	beq.n	8e54 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    8dbc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    8dc0:	f0c0 8082 	bcc.w	8ec8 <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    8dc4:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    8dc6:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    8dc8:	0680      	lsls	r0, r0, #26
    8dca:	d405      	bmi.n	8dd8 <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    8dcc:	7938      	ldrb	r0, [r7, #4]
    8dce:	eba0 0009 	sub.w	r0, r0, r9
    8dd2:	4283      	cmp	r3, r0
    8dd4:	bf28      	it	cs
    8dd6:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    8dd8:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    8dda:	ea4f 2443 	mov.w	r4, r3, lsl #9
    8dde:	d80c      	bhi.n	8dfa <FatFile::read(void*, unsigned int)+0xae>
    8de0:	18c8      	adds	r0, r1, r3
    8de2:	4282      	cmp	r2, r0
    8de4:	d209      	bcs.n	8dfa <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    8de6:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8dea:	e9cd 1300 	strd	r1, r3, [sp]
    8dee:	f003 ff0b 	bl	cc08 <FsCache::sync()>
    8df2:	e9dd 1300 	ldrd	r1, r3, [sp]
    8df6:	2800      	cmp	r0, #0
    8df8:	d03e      	beq.n	8e78 <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    8dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8dfc:	6802      	ldr	r2, [r0, #0]
    8dfe:	6957      	ldr	r7, [r2, #20]
    8e00:	4642      	mov	r2, r8
    8e02:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    8e04:	2800      	cmp	r0, #0
    8e06:	d037      	beq.n	8e78 <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    8e08:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    8e0a:	1b36      	subs	r6, r6, r4
    dst += n;
    8e0c:	44a0      	add	r8, r4
    m_curPosition += n;
    8e0e:	4422      	add	r2, r4
    8e10:	616a      	str	r2, [r5, #20]
  while (toRead) {
    8e12:	d069      	beq.n	8ee8 <FatFile::read(void*, unsigned int)+0x19c>
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True if this is the FAT32 root directory. */
  bool isRoot32() const {return m_attributes & FILE_ATTR_ROOT32;}
  /** \return True if this is the FAT12 of FAT16 root directory. */
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    8e14:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    8e16:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    8e1a:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    8e1c:	0688      	lsls	r0, r1, #26
    8e1e:	d4c1      	bmi.n	8da4 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    8e20:	f897 9005 	ldrb.w	r9, [r7, #5]
    8e24:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    8e28:	f1bb 0f00 	cmp.w	fp, #0
    8e2c:	d136      	bne.n	8e9c <FatFile::read(void*, unsigned int)+0x150>
    8e2e:	f1b9 0f00 	cmp.w	r9, #0
    8e32:	d133      	bne.n	8e9c <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    8e34:	2a00      	cmp	r2, #0
    8e36:	d133      	bne.n	8ea0 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    8e38:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    8e3a:	bf4c      	ite	mi
    8e3c:	6a3a      	ldrmi	r2, [r7, #32]
    8e3e:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    8e40:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8e42:	3a02      	subs	r2, #2
    8e44:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8e46:	6979      	ldr	r1, [r7, #20]
    8e48:	4082      	lsls	r2, r0
    8e4a:	4449      	add	r1, r9
    8e4c:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    8e4e:	f1bb 0f00 	cmp.w	fp, #0
    8e52:	d0ad      	beq.n	8db0 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    8e54:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    8e58:	2200      	movs	r2, #0
    8e5a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    8e5e:	42b4      	cmp	r4, r6
    8e60:	bf28      	it	cs
    8e62:	4634      	movcs	r4, r6
    8e64:	f003 fefc 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8e68:	b130      	cbz	r0, 8e78 <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    8e6a:	eb00 010b 	add.w	r1, r0, fp
    8e6e:	4622      	mov	r2, r4
    8e70:	4640      	mov	r0, r8
    8e72:	f005 fa4f 	bl	e314 <memcpy>
    8e76:	e7c7      	b.n	8e08 <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    8e78:	786b      	ldrb	r3, [r5, #1]
  return -1;
    8e7a:	f04f 30ff 	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    8e7e:	f043 0302 	orr.w	r3, r3, #2
    8e82:	706b      	strb	r3, [r5, #1]
}
    8e84:	b003      	add	sp, #12
    8e86:	ecbd 8b02 	vpop	{d8}
    8e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    8e8e:	69c3      	ldr	r3, [r0, #28]
    8e90:	6942      	ldr	r2, [r0, #20]
    8e92:	1a9b      	subs	r3, r3, r2
    8e94:	459a      	cmp	sl, r3
    8e96:	bf28      	it	cs
    8e98:	469a      	movcs	sl, r3
    8e9a:	e772      	b.n	8d82 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    8e9c:	692a      	ldr	r2, [r5, #16]
    8e9e:	e7d0      	b.n	8e42 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    8ea0:	070b      	lsls	r3, r1, #28
    8ea2:	d505      	bpl.n	8eb0 <FatFile::read(void*, unsigned int)+0x164>
    8ea4:	78aa      	ldrb	r2, [r5, #2]
    8ea6:	0654      	lsls	r4, r2, #25
    8ea8:	d502      	bpl.n	8eb0 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    8eaa:	692a      	ldr	r2, [r5, #16]
    8eac:	3201      	adds	r2, #1
    8eae:	e7c7      	b.n	8e40 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8eb0:	ee18 2a10 	vmov	r2, s16
    8eb4:	4638      	mov	r0, r7
    8eb6:	6929      	ldr	r1, [r5, #16]
    8eb8:	f001 fa8c 	bl	a3d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8ebc:	2800      	cmp	r0, #0
    8ebe:	dbdb      	blt.n	8e78 <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    8ec0:	d00c      	beq.n	8edc <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    8ec2:	68af      	ldr	r7, [r5, #8]
    8ec4:	692a      	ldr	r2, [r5, #16]
    8ec6:	e7bc      	b.n	8e42 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    8ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8eca:	4642      	mov	r2, r8
    8ecc:	6803      	ldr	r3, [r0, #0]
    8ece:	691b      	ldr	r3, [r3, #16]
    8ed0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    8ed2:	2800      	cmp	r0, #0
    8ed4:	d0d0      	beq.n	8e78 <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    8ed6:	f44f 7400 	mov.w	r4, #512	; 0x200
    8eda:	e795      	b.n	8e08 <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    8edc:	782b      	ldrb	r3, [r5, #0]
    8ede:	f013 0f70 	tst.w	r3, #112	; 0x70
    8ee2:	d0c9      	beq.n	8e78 <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    8ee4:	ebaa 0a06 	sub.w	sl, sl, r6
    8ee8:	4650      	mov	r0, sl
}
    8eea:	b003      	add	sp, #12
    8eec:	ecbd 8b02 	vpop	{d8}
    8ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008ef4 <FatFile::peek()>:
int FatFile::peek() {
    8ef4:	b570      	push	{r4, r5, r6, lr}
    8ef6:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8ef8:	2201      	movs	r2, #1
    8efa:	4604      	mov	r4, r0
    8efc:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    8f00:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    8f04:	f7ff ff22 	bl	8d4c <FatFile::read(void*, unsigned int)>
    8f08:	2801      	cmp	r0, #1
    8f0a:	bf0c      	ite	eq
    8f0c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    8f10:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    8f14:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    8f18:	b002      	add	sp, #8
    8f1a:	bd70      	pop	{r4, r5, r6, pc}

00008f1c <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8f1c:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    8f1e:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    8f22:	b530      	push	{r4, r5, lr}
    8f24:	4604      	mov	r4, r0
    8f26:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    8f28:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    8f2c:	d009      	beq.n	8f42 <FatFile::readDirCache(bool)+0x26>
    8f2e:	2901      	cmp	r1, #1
    8f30:	d107      	bne.n	8f42 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    8f32:	3320      	adds	r3, #32
    8f34:	6143      	str	r3, [r0, #20]
    return m_buffer;
    8f36:	68a0      	ldr	r0, [r4, #8]
    8f38:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    8f3a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    8f3e:	b003      	add	sp, #12
    8f40:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    8f42:	2201      	movs	r2, #1
    8f44:	f10d 0107 	add.w	r1, sp, #7
    8f48:	4620      	mov	r0, r4
    8f4a:	f7ff feff 	bl	8d4c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    8f4e:	b240      	sxtb	r0, r0
    8f50:	2801      	cmp	r0, #1
    8f52:	d103      	bne.n	8f5c <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    8f54:	6963      	ldr	r3, [r4, #20]
    8f56:	331f      	adds	r3, #31
    8f58:	6163      	str	r3, [r4, #20]
    8f5a:	e7ec      	b.n	8f36 <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    8f5c:	2000      	movs	r0, #0
    8f5e:	e7ee      	b.n	8f3e <FatFile::readDirCache(bool)+0x22>

00008f60 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    8f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    8f64:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    8f66:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    8f68:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    8f6a:	f013 0f18 	tst.w	r3, #24
    8f6e:	9608      	str	r6, [sp, #32]
    8f70:	9611      	str	r6, [sp, #68]	; 0x44
    8f72:	d006      	beq.n	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    8f74:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    8f76:	6883      	ldr	r3, [r0, #8]
    8f78:	688a      	ldr	r2, [r1, #8]
    8f7a:	4604      	mov	r4, r0
    8f7c:	460d      	mov	r5, r1
    8f7e:	429a      	cmp	r2, r3
    8f80:	d003      	beq.n	8f8a <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    8f82:	2000      	movs	r0, #0
}
    8f84:	b01a      	add	sp, #104	; 0x68
    8f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8f8a:	f7ff fc0d 	bl	87a8 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    8f8e:	46a6      	mov	lr, r4
    8f90:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    8f94:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8f98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8f9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8fa4:	f8de 3000 	ldr.w	r3, [lr]
    8fa8:	4632      	mov	r2, r6
    8faa:	69a1      	ldr	r1, [r4, #24]
    8fac:	f8cc 3000 	str.w	r3, [ip]
    8fb0:	68a3      	ldr	r3, [r4, #8]
    8fb2:	f103 0028 	add.w	r0, r3, #40	; 0x28
    8fb6:	f003 fe53 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    8fba:	2800      	cmp	r0, #0
    8fbc:	d0e1      	beq.n	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    8fbe:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    8fc0:	46ec      	mov	ip, sp
  if (isFile()) {
    8fc2:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    8fc6:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    8fca:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    8fce:	0152      	lsls	r2, r2, #5
    8fd0:	f8de 1004 	ldr.w	r1, [lr, #4]
    8fd4:	5880      	ldr	r0, [r0, r2]
    8fd6:	f8de 300c 	ldr.w	r3, [lr, #12]
    8fda:	f8de 2008 	ldr.w	r2, [lr, #8]
    8fde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    8fe2:	f8de 1014 	ldr.w	r1, [lr, #20]
    8fe6:	f8de 2018 	ldr.w	r2, [lr, #24]
    8fea:	f8de 301c 	ldr.w	r3, [lr, #28]
    8fee:	f8de 0010 	ldr.w	r0, [lr, #16]
    8ff2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    8ff6:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    8ffa:	463a      	mov	r2, r7
    8ffc:	4629      	mov	r1, r5
  if (isFile()) {
    8ffe:	f040 809b 	bne.w	9138 <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    9002:	a808      	add	r0, sp, #32
    9004:	f7ff fd56 	bl	8ab4 <FatFile::mkdir(FatFile*, char const*, bool)>
    9008:	2800      	cmp	r0, #0
    900a:	d0ba      	beq.n	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    900c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    900e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    9012:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    9014:	990e      	ldr	r1, [sp, #56]	; 0x38
    9016:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    9018:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    901a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    901e:	68a0      	ldr	r0, [r4, #8]
    9020:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    9022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9024:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    9026:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    9028:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    902a:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    902e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    9032:	f003 fe15 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    9036:	2800      	cmp	r0, #0
    9038:	d0a3      	beq.n	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    903a:	88a3      	ldrh	r3, [r4, #4]
    903c:	f003 030f 	and.w	r3, r3, #15
    9040:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    9044:	f8dd 300d 	ldr.w	r3, [sp, #13]
    9048:	f8c0 300d 	str.w	r3, [r0, #13]
    904c:	f8dd 3011 	ldr.w	r3, [sp, #17]
    9050:	f8c0 3011 	str.w	r3, [r0, #17]
    9054:	f8dd 3015 	ldr.w	r3, [sp, #21]
    9058:	f8c0 3015 	str.w	r3, [r0, #21]
    905c:	f8dd 3019 	ldr.w	r3, [sp, #25]
    9060:	f8c0 3019 	str.w	r3, [r0, #25]
    9064:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    9068:	f8a0 301d 	strh.w	r3, [r0, #29]
    906c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    9070:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    9072:	f89d 300b 	ldrb.w	r3, [sp, #11]
    9076:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    9078:	2e00      	cmp	r6, #0
    907a:	d03b      	beq.n	90f4 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    907c:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    907e:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    9080:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9082:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    9084:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    9086:	408b      	lsls	r3, r1
    9088:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    908c:	4419      	add	r1, r3
    908e:	f003 fde7 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    9092:	4605      	mov	r5, r0
    9094:	2800      	cmp	r0, #0
    9096:	f43f af74 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    909a:	6a00      	ldr	r0, [r0, #32]
    909c:	466f      	mov	r7, sp
    909e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    90a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    90a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    90a4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    90a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    90a8:	6b69      	ldr	r1, [r5, #52]	; 0x34
    90aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
    90ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    90ae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    90b0:	4631      	mov	r1, r6
    90b2:	68a0      	ldr	r0, [r4, #8]
    90b4:	f001 f9a0 	bl	a3f8 <FatPartition::freeChain(unsigned long)>
    90b8:	2800      	cmp	r0, #0
    90ba:	f43f af62 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    90be:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    90c0:	6a23      	ldr	r3, [r4, #32]
    90c2:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    90c4:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    90c6:	3b02      	subs	r3, #2
    90c8:	f850 1c14 	ldr.w	r1, [r0, #-20]
    90cc:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    90ce:	2201      	movs	r2, #1
    90d0:	4419      	add	r1, r3
    90d2:	f003 fdc5 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    90d6:	4606      	mov	r6, r0
    90d8:	2800      	cmp	r0, #0
    90da:	f43f af52 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    90de:	466d      	mov	r5, sp
    90e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    90e2:	6230      	str	r0, [r6, #32]
    90e4:	6271      	str	r1, [r6, #36]	; 0x24
    90e6:	62b2      	str	r2, [r6, #40]	; 0x28
    90e8:	62f3      	str	r3, [r6, #44]	; 0x2c
    90ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    90ec:	6330      	str	r0, [r6, #48]	; 0x30
    90ee:	6371      	str	r1, [r6, #52]	; 0x34
    90f0:	63b2      	str	r2, [r6, #56]	; 0x38
    90f2:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    90f4:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    90f6:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    90f8:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    90fa:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    90fc:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    90fe:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    9102:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    9106:	f000 fe2d 	bl	9d64 <FatFile::remove()>
    910a:	2800      	cmp	r0, #0
    910c:	f43f af39 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    9110:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9112:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9116:	f003 fd77 	bl	cc08 <FsCache::sync()>
    911a:	2800      	cmp	r0, #0
    911c:	f43f af31 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    9120:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9124:	f003 fd70 	bl	cc08 <FsCache::sync()>
    9128:	2800      	cmp	r0, #0
    912a:	f43f af2a 	beq.w	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    912e:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    9130:	6803      	ldr	r3, [r0, #0]
    9132:	6a1b      	ldr	r3, [r3, #32]
    9134:	4798      	blx	r3
    9136:	e725      	b.n	8f84 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    9138:	f640 2301 	movw	r3, #2561	; 0xa01
    913c:	4660      	mov	r0, ip
    913e:	f7ff fd2f 	bl	8ba0 <FatFile::open(FatFile*, char const*, int)>
    9142:	2800      	cmp	r0, #0
    9144:	f47f af63 	bne.w	900e <FatFile::rename(FatFile*, char const*)+0xae>
    9148:	e71b      	b.n	8f82 <FatFile::rename(FatFile*, char const*)+0x22>
    914a:	bf00      	nop

0000914c <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    914c:	7803      	ldrb	r3, [r0, #0]
    914e:	06da      	lsls	r2, r3, #27
    9150:	d401      	bmi.n	9156 <FatFile::rmdir()+0xa>
}
    9152:	2000      	movs	r0, #0
    9154:	4770      	bx	lr
  if (pos == m_curPosition) {
    9156:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    9158:	b530      	push	{r4, r5, lr}
    915a:	4604      	mov	r4, r0
    915c:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    915e:	b133      	cbz	r3, 916e <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9160:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    9162:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9164:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    9168:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    916c:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    916e:	2300      	movs	r3, #0
    9170:	e00f      	b.n	9192 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    9172:	6163      	str	r3, [r4, #20]
    9174:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    9176:	016a      	lsls	r2, r5, #5
    9178:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    917a:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    917c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    9180:	b1ea      	cbz	r2, 91be <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9182:	2ae5      	cmp	r2, #229	; 0xe5
    9184:	d004      	beq.n	9190 <FatFile::rmdir()+0x44>
    9186:	2a2e      	cmp	r2, #46	; 0x2e
    9188:	d002      	beq.n	9190 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    918a:	7adb      	ldrb	r3, [r3, #11]
    918c:	071b      	lsls	r3, r3, #28
    918e:	d522      	bpl.n	91d6 <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9190:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    9192:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    9196:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    919a:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    919e:	d1e8      	bne.n	9172 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    91a0:	2201      	movs	r2, #1
    91a2:	f10d 0107 	add.w	r1, sp, #7
    91a6:	4620      	mov	r0, r4
    91a8:	f7ff fdd0 	bl	8d4c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    91ac:	b240      	sxtb	r0, r0
    91ae:	2801      	cmp	r0, #1
    91b0:	d103      	bne.n	91ba <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    91b2:	6963      	ldr	r3, [r4, #20]
    91b4:	331f      	adds	r3, #31
    91b6:	6163      	str	r3, [r4, #20]
    91b8:	e7dc      	b.n	9174 <FatFile::rmdir()+0x28>
      if (!getError()) {
    91ba:	7863      	ldrb	r3, [r4, #1]
    91bc:	b95b      	cbnz	r3, 91d6 <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    91be:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    91c0:	2208      	movs	r2, #8
  return remove();
    91c2:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    91c4:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    91c8:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    91ca:	70a3      	strb	r3, [r4, #2]
}
    91cc:	b003      	add	sp, #12
    91ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    91d2:	f000 bdc7 	b.w	9d64 <FatFile::remove()>
}
    91d6:	2000      	movs	r0, #0
    91d8:	b003      	add	sp, #12
    91da:	bd30      	pop	{r4, r5, pc}

000091dc <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    91dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    91e0:	7803      	ldrb	r3, [r0, #0]
    91e2:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    91e4:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    91e6:	2b00      	cmp	r3, #0
    91e8:	d039      	beq.n	925e <FatFile::seekSet(unsigned long)+0x82>
    91ea:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    91ec:	6941      	ldr	r1, [r0, #20]
    91ee:	42a9      	cmp	r1, r5
    91f0:	d042      	beq.n	9278 <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    91f2:	2d00      	cmp	r5, #0
    91f4:	d037      	beq.n	9266 <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    91f6:	0718      	lsls	r0, r3, #28
    91f8:	d52a      	bpl.n	9250 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    91fa:	69e2      	ldr	r2, [r4, #28]
    91fc:	42aa      	cmp	r2, r5
    91fe:	d32e      	bcc.n	925e <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    9200:	f8d4 c008 	ldr.w	ip, [r4, #8]
    9204:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    9206:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    9208:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    920c:	f012 0f40 	tst.w	r2, #64	; 0x40
    9210:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    9214:	b2c0      	uxtb	r0, r0
    9216:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    921a:	d130      	bne.n	927e <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    921c:	1e4a      	subs	r2, r1, #1
    921e:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    9220:	b109      	cbz	r1, 9226 <FatFile::seekSet(unsigned long)+0x4a>
    9222:	4296      	cmp	r6, r2
    9224:	d22f      	bcs.n	9286 <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    9226:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    9228:	bf4c      	ite	mi
    922a:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    922e:	6a23      	ldrpl	r3, [r4, #32]
    9230:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    9232:	f104 0810 	add.w	r8, r4, #16
    9236:	e006      	b.n	9246 <FatFile::seekSet(unsigned long)+0x6a>
    9238:	6921      	ldr	r1, [r4, #16]
    923a:	3e01      	subs	r6, #1
    923c:	68a0      	ldr	r0, [r4, #8]
    923e:	f001 f8c9 	bl	a3d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
    9242:	2800      	cmp	r0, #0
    9244:	dd0b      	ble.n	925e <FatFile::seekSet(unsigned long)+0x82>
    9246:	4642      	mov	r2, r8
  while (nNew--) {
    9248:	2e00      	cmp	r6, #0
    924a:	d1f5      	bne.n	9238 <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    924c:	78a2      	ldrb	r2, [r4, #2]
    924e:	e00c      	b.n	926a <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    9250:	069a      	lsls	r2, r3, #26
    9252:	d5d5      	bpl.n	9200 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    9254:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    9256:	895b      	ldrh	r3, [r3, #10]
    9258:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    925c:	d9f6      	bls.n	924c <FatFile::seekSet(unsigned long)+0x70>
  return false;
    925e:	2000      	movs	r0, #0
  m_curCluster = tmp;
    9260:	6127      	str	r7, [r4, #16]
}
    9262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9266:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    9268:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    926a:	f022 0220 	bic.w	r2, r2, #32
  return true;
    926e:	2001      	movs	r0, #1
  m_curPosition = pos;
    9270:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    9272:	70a2      	strb	r2, [r4, #2]
}
    9274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    9278:	2001      	movs	r0, #1
}
    927a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    927e:	6a23      	ldr	r3, [r4, #32]
    9280:	4433      	add	r3, r6
    9282:	6123      	str	r3, [r4, #16]
    goto done;
    9284:	e7f1      	b.n	926a <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    9286:	1ab6      	subs	r6, r6, r2
    9288:	e7d3      	b.n	9232 <FatFile::seekSet(unsigned long)+0x56>
    928a:	bf00      	nop

0000928c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9290:	460e      	mov	r6, r1
    9292:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    9294:	2100      	movs	r1, #0
    9296:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    9298:	4604      	mov	r4, r0
    929a:	4698      	mov	r8, r3
    929c:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    92a0:	f009 f8c6 	bl	12430 <memset>
  m_vol = dirFile->m_vol;
    92a4:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    92a6:	6a33      	ldr	r3, [r6, #32]
    92a8:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    92ac:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    92ae:	f005 050f 	and.w	r5, r5, #15
    92b2:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    92b6:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    92ba:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    92bc:	070b      	lsls	r3, r1, #28
    92be:	d411      	bmi.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    92c0:	f001 0117 	and.w	r1, r1, #23
    92c4:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    92c6:	7ad3      	ldrb	r3, [r2, #11]
    92c8:	f013 0f18 	tst.w	r3, #24
    92cc:	d102      	bne.n	92d4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    92ce:	f041 0108 	orr.w	r1, r1, #8
    92d2:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    92d4:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    92d8:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    92da:	2b01      	cmp	r3, #1
    92dc:	d038      	beq.n	9350 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    92de:	2b02      	cmp	r3, #2
    92e0:	d006      	beq.n	92f0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    92e2:	b1f3      	cbz	r3, 9322 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    92e4:	2300      	movs	r3, #0
  return false;
    92e6:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    92e8:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    92ea:	70a3      	strb	r3, [r4, #2]
}
    92ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    92f0:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    92f2:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    92f4:	06cd      	lsls	r5, r1, #27
    92f6:	d4f5      	bmi.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    92f8:	07ce      	lsls	r6, r1, #31
    92fa:	d4f3      	bmi.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    92fc:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    9300:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9304:	ea43 0301 	orr.w	r3, r3, r1
    9308:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    930a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    930c:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    930e:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    9310:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9312:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    9316:	d012      	beq.n	933e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    9318:	bb19      	cbnz	r1, 9362 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    931a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    931e:	70a3      	strb	r3, [r4, #2]
    9320:	e010      	b.n	9344 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    9322:	f418 6f80 	tst.w	r8, #1024	; 0x400
    9326:	d1dd      	bne.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    9328:	f008 0308 	and.w	r3, r8, #8
    932c:	f043 0301 	orr.w	r3, r3, #1
    9330:	70a3      	strb	r3, [r4, #2]
    9332:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    9334:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    9336:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    9338:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    933a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
    933e:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    9340:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    9342:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9344:	f418 4f80 	tst.w	r8, #16384	; 0x4000
    9348:	d104      	bne.n	9354 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
    934a:	2001      	movs	r0, #1
}
    934c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    9350:	2302      	movs	r3, #2
    9352:	e7ce      	b.n	92f2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    9354:	69e1      	ldr	r1, [r4, #28]
    9356:	4620      	mov	r0, r4
    9358:	f7ff ff40 	bl	91dc <FatFile::seekSet(unsigned long)>
    935c:	2800      	cmp	r0, #0
    935e:	d1f4      	bne.n	934a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
    9360:	e7c0      	b.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    9362:	f001 f849 	bl	a3f8 <FatPartition::freeChain(unsigned long)>
    9366:	2800      	cmp	r0, #0
    9368:	d0bc      	beq.n	92e4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    936a:	78a3      	ldrb	r3, [r4, #2]
    936c:	e7d5      	b.n	931a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
    936e:	bf00      	nop

00009370 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
    9370:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9372:	2b00      	cmp	r3, #0
    9374:	d145      	bne.n	9402 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    9376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    937a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    937c:	b084      	sub	sp, #16
    937e:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    9380:	f013 0f70 	tst.w	r3, #112	; 0x70
    9384:	d030      	beq.n	93e8 <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
    9386:	694b      	ldr	r3, [r1, #20]
    9388:	f013 051f 	ands.w	r5, r3, #31
    938c:	d12c      	bne.n	93e8 <FatFile::openNext(FatFile*, int)+0x78>
    938e:	4606      	mov	r6, r0
    9390:	4690      	mov	r8, r2
    9392:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
    9394:	2201      	movs	r2, #1
    9396:	f10d 010f 	add.w	r1, sp, #15
    939a:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
    939c:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
    93a0:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
    93a2:	f7ff fcd3 	bl	8d4c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    93a6:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    93a8:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
    93ac:	2801      	cmp	r0, #1
    93ae:	d11b      	bne.n	93e8 <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
    93b0:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
    93b2:	68a1      	ldr	r1, [r4, #8]
    93b4:	331f      	adds	r3, #31
    93b6:	f101 0c38 	add.w	ip, r1, #56	; 0x38
    93ba:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
    93bc:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    93c0:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    93c4:	b182      	cbz	r2, 93e8 <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    93c6:	2a2e      	cmp	r2, #46	; 0x2e
    93c8:	d012      	beq.n	93f0 <FatFile::openNext(FatFile*, int)+0x80>
    93ca:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
    93ce:	fab0 f080 	clz	r0, r0
    93d2:	0940      	lsrs	r0, r0, #5
    93d4:	b960      	cbnz	r0, 93f0 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    93d6:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
    93da:	f011 0e08 	ands.w	lr, r1, #8
    93de:	d012      	beq.n	9406 <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
    93e0:	290f      	cmp	r1, #15
    93e2:	d007      	beq.n	93f4 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
    93e4:	4605      	mov	r5, r0
    93e6:	e7d5      	b.n	9394 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    93e8:	2000      	movs	r0, #0
}
    93ea:	b004      	add	sp, #16
    93ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
    93f0:	2500      	movs	r5, #0
    93f2:	e7cf      	b.n	9394 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    93f4:	0651      	lsls	r1, r2, #25
    93f6:	d5cd      	bpl.n	9394 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    93f8:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
    93fc:	f89c 900d 	ldrb.w	r9, [ip, #13]
    9400:	e7c8      	b.n	9394 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    9402:	2000      	movs	r0, #0
}
    9404:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    9406:	b185      	cbz	r5, 942a <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    9408:	f10c 010a 	add.w	r1, ip, #10
    940c:	e001      	b.n	9412 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    940e:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
    9412:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9416:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9418:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
    941c:	fa52 f383 	uxtab	r3, r2, r3
    9420:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
    9424:	d1f3      	bne.n	940e <FatFile::openNext(FatFile*, int)+0x9e>
    9426:	45ce      	cmp	lr, r9
    9428:	d1de      	bne.n	93e8 <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    942a:	4643      	mov	r3, r8
    942c:	b2ba      	uxth	r2, r7
    942e:	4621      	mov	r1, r4
    9430:	4630      	mov	r0, r6
    9432:	9500      	str	r5, [sp, #0]
    9434:	f7ff ff2a 	bl	928c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9438:	e7d7      	b.n	93ea <FatFile::openNext(FatFile*, int)+0x7a>
    943a:	bf00      	nop

0000943c <FatFile::sync()>:
  if (!isOpen()) {
    943c:	7803      	ldrb	r3, [r0, #0]
    943e:	b10b      	cbz	r3, 9444 <FatFile::sync()+0x8>
    9440:	f7ff b9b2 	b.w	87a8 <FatFile::sync() [clone .part.0]>
}
    9444:	2001      	movs	r0, #1
    9446:	4770      	bx	lr

00009448 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    9448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    944c:	7883      	ldrb	r3, [r0, #2]
    944e:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    9450:	079c      	lsls	r4, r3, #30
    9452:	d577      	bpl.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    9454:	4688      	mov	r8, r1
    9456:	0719      	lsls	r1, r3, #28
    9458:	4691      	mov	r9, r2
    945a:	f100 80b5 	bmi.w	95c8 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    945e:	696b      	ldr	r3, [r5, #20]
    9460:	eb13 0209 	adds.w	r2, r3, r9
    9464:	d26e      	bcs.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    9466:	f1b9 0f00 	cmp.w	r9, #0
    946a:	d040      	beq.n	94ee <FatFile::write(void const*, unsigned int)+0xa6>
    946c:	464f      	mov	r7, r9
    m_status = 0;
    946e:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    9472:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    9474:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    9478:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
    947a:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    947c:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
    9480:	d13f      	bne.n	9502 <FatFile::write(void const*, unsigned int)+0xba>
    9482:	2e00      	cmp	r6, #0
    9484:	d13d      	bne.n	9502 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
    9486:	2900      	cmp	r1, #0
    9488:	d06e      	beq.n	9568 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    948a:	78aa      	ldrb	r2, [r5, #2]
    948c:	0652      	lsls	r2, r2, #25
    948e:	d576      	bpl.n	957e <FatFile::write(void const*, unsigned int)+0x136>
    9490:	69ea      	ldr	r2, [r5, #28]
    9492:	429a      	cmp	r2, r3
    9494:	d973      	bls.n	957e <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
    9496:	3101      	adds	r1, #1
    9498:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    949a:	3902      	subs	r1, #2
    949c:	7982      	ldrb	r2, [r0, #6]
    949e:	6943      	ldr	r3, [r0, #20]
    94a0:	4091      	lsls	r1, r2
    94a2:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    94a4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    94a8:	d353      	bcc.n	9552 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    94aa:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    94ae:	d370      	bcc.n	9592 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    94b0:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    94b2:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    94b4:	1b1b      	subs	r3, r3, r4
    94b6:	4293      	cmp	r3, r2
    94b8:	bf28      	it	cs
    94ba:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    94bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    94be:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    94c0:	ea4f 2443 	mov.w	r4, r3, lsl #9
    94c4:	d307      	bcc.n	94d6 <FatFile::write(void const*, unsigned int)+0x8e>
    94c6:	185e      	adds	r6, r3, r1
    94c8:	42b2      	cmp	r2, r6
    94ca:	d204      	bcs.n	94d6 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
    94cc:	f04f 32ff 	mov.w	r2, #4294967295
    m_status = 0;
    94d0:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    94d4:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    94d6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    94d8:	4642      	mov	r2, r8
    94da:	6806      	ldr	r6, [r0, #0]
    94dc:	6ab6      	ldr	r6, [r6, #40]	; 0x28
    94de:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    94e0:	b380      	cbz	r0, 9544 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    94e2:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
    94e4:	1b3f      	subs	r7, r7, r4
    src += n;
    94e6:	44a0      	add	r8, r4
    m_curPosition += n;
    94e8:	4423      	add	r3, r4
    94ea:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
    94ec:	d1c1      	bne.n	9472 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    94ee:	69ea      	ldr	r2, [r5, #28]
    94f0:	429a      	cmp	r2, r3
    94f2:	d276      	bcs.n	95e2 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    94f4:	78aa      	ldrb	r2, [r5, #2]
    94f6:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
    94f8:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    94fa:	f062 037f 	orn	r3, r2, #127	; 0x7f
    94fe:	70ab      	strb	r3, [r5, #2]
    9500:	e025      	b.n	954e <FatFile::write(void const*, unsigned int)+0x106>
    9502:	7982      	ldrb	r2, [r0, #6]
    9504:	3902      	subs	r1, #2
    9506:	6943      	ldr	r3, [r0, #20]
    9508:	4091      	lsls	r1, r2
    950a:	4419      	add	r1, r3
                      + sectorOfCluster;
    950c:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    950e:	2e00      	cmp	r6, #0
    9510:	d0c8      	beq.n	94a4 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
    9512:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9516:	2201      	movs	r2, #1
    9518:	42bc      	cmp	r4, r7
    951a:	bf28      	it	cs
    951c:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
    951e:	3028      	adds	r0, #40	; 0x28
    9520:	f003 fb9e 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    9524:	b170      	cbz	r0, 9544 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
    9526:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9528:	4426      	add	r6, r4
      memcpy(dst, src, n);
    952a:	4622      	mov	r2, r4
    952c:	4641      	mov	r1, r8
    952e:	f004 fef1 	bl	e314 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    9532:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9536:	68a8      	ldr	r0, [r5, #8]
    9538:	d1d3      	bne.n	94e2 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
    953a:	3028      	adds	r0, #40	; 0x28
    953c:	f003 fb64 	bl	cc08 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
    9540:	2800      	cmp	r0, #0
    9542:	d1ce      	bne.n	94e2 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    9544:	786b      	ldrb	r3, [r5, #1]
  return 0;
    9546:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    9548:	f043 0301 	orr.w	r3, r3, #1
    954c:	706b      	strb	r3, [r5, #1]
}
    954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    9552:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
    9556:	696a      	ldr	r2, [r5, #20]
    9558:	69eb      	ldr	r3, [r5, #28]
    955a:	42bc      	cmp	r4, r7
    955c:	bf28      	it	cs
    955e:	463c      	movcs	r4, r7
    9560:	429a      	cmp	r2, r3
    9562:	d305      	bcc.n	9570 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    9564:	2205      	movs	r2, #5
    9566:	e7da      	b.n	951e <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
    9568:	6a29      	ldr	r1, [r5, #32]
    956a:	b321      	cbz	r1, 95b6 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
    956c:	6129      	str	r1, [r5, #16]
    956e:	e794      	b.n	949a <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    9570:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
    9572:	f013 0f20 	tst.w	r3, #32
    9576:	bf14      	ite	ne
    9578:	2205      	movne	r2, #5
    957a:	2201      	moveq	r2, #1
    957c:	e7cf      	b.n	951e <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    957e:	f105 0210 	add.w	r2, r5, #16
    9582:	f000 ff27 	bl	a3d4 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    9586:	2800      	cmp	r0, #0
    9588:	dbdc      	blt.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
    958a:	d024      	beq.n	95d6 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    958c:	68a8      	ldr	r0, [r5, #8]
    958e:	6929      	ldr	r1, [r5, #16]
    9590:	e783      	b.n	949a <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
    9592:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9594:	428b      	cmp	r3, r1
    9596:	d104      	bne.n	95a2 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
    9598:	f04f 33ff 	mov.w	r3, #4294967295
    m_status = 0;
    959c:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    95a0:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    95a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    95a4:	4642      	mov	r2, r8
    95a6:	6803      	ldr	r3, [r0, #0]
    95a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    95aa:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    95ac:	2800      	cmp	r0, #0
    95ae:	d0c9      	beq.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
    95b0:	f44f 7400 	mov.w	r4, #512	; 0x200
    95b4:	e795      	b.n	94e2 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
    95b6:	4628      	mov	r0, r5
    95b8:	f7ff f950 	bl	885c <FatFile::addCluster()>
    95bc:	2800      	cmp	r0, #0
    95be:	d0c1      	beq.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
    95c0:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    95c2:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
    95c4:	6229      	str	r1, [r5, #32]
    95c6:	e768      	b.n	949a <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
    95c8:	69c1      	ldr	r1, [r0, #28]
    95ca:	f7ff fe07 	bl	91dc <FatFile::seekSet(unsigned long)>
    95ce:	2800      	cmp	r0, #0
    95d0:	f47f af45 	bne.w	945e <FatFile::write(void const*, unsigned int)+0x16>
    95d4:	e7b6      	b.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
    95d6:	4628      	mov	r0, r5
    95d8:	f7ff f940 	bl	885c <FatFile::addCluster()>
    95dc:	2800      	cmp	r0, #0
    95de:	d1d5      	bne.n	958c <FatFile::write(void const*, unsigned int)+0x144>
    95e0:	e7b0      	b.n	9544 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
    95e2:	4b05      	ldr	r3, [pc, #20]	; (95f8 <FatFile::write(void const*, unsigned int)+0x1b0>)
    95e4:	681b      	ldr	r3, [r3, #0]
    95e6:	b12b      	cbz	r3, 95f4 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    95e8:	78ab      	ldrb	r3, [r5, #2]
    95ea:	4648      	mov	r0, r9
    95ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95f0:	70ab      	strb	r3, [r5, #2]
    95f2:	e7ac      	b.n	954e <FatFile::write(void const*, unsigned int)+0x106>
    95f4:	4648      	mov	r0, r9
    95f6:	e7aa      	b.n	954e <FatFile::write(void const*, unsigned int)+0x106>
    95f8:	20018cdc 	.word	0x20018cdc

000095fc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    95fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    9600:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    9602:	b08d      	sub	sp, #52	; 0x34
    9604:	4614      	mov	r4, r2
    next = begin;
    9606:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9608:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    960a:	4606      	mov	r6, r0
    960c:	4689      	mov	r9, r1
  FatFile dir = *this;
    960e:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    9610:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
    9612:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
    9616:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    961a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    961c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    9620:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    9622:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
    9626:	6065      	str	r5, [r4, #4]
    9628:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    962a:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
    962c:	f8a4 e00c 	strh.w	lr, [r4, #12]
    9630:	2b00      	cmp	r3, #0
    9632:	d03f      	beq.n	96b4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
    9634:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    9638:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    963c:	a803      	add	r0, sp, #12
    963e:	b289      	uxth	r1, r1
    9640:	0149      	lsls	r1, r1, #5
    9642:	f7ff fdcb 	bl	91dc <FatFile::seekSet(unsigned long)>
    9646:	b350      	cbz	r0, 969e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    9648:	2100      	movs	r1, #0
    964a:	a803      	add	r0, sp, #12
    964c:	f7ff fc66 	bl	8f1c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9650:	4607      	mov	r7, r0
    9652:	b320      	cbz	r0, 969e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    9654:	2500      	movs	r5, #0
    9656:	e00d      	b.n	9674 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
    9658:	f003 fb2a 	bl	ccb0 <FsName::get16()>
    965c:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
    965e:	4658      	mov	r0, fp
    9660:	f003 fbea 	bl	ce38 <toUpcase(unsigned short)>
    9664:	4683      	mov	fp, r0
    9666:	4640      	mov	r0, r8
    9668:	f003 fbe6 	bl	ce38 <toUpcase(unsigned short)>
    966c:	4583      	cmp	fp, r0
    966e:	d116      	bne.n	969e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
    9670:	2d0d      	cmp	r5, #13
    9672:	d018      	beq.n	96a6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
    9674:	b2ea      	uxtb	r2, r5
    9676:	4639      	mov	r1, r7
    9678:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
    967a:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
    967c:	f000 fc18 	bl	9eb0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    9680:	89a3      	ldrh	r3, [r4, #12]
    9682:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
    9684:	4620      	mov	r0, r4
    9686:	2b00      	cmp	r3, #0
    9688:	d1e6      	bne.n	9658 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
    968a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    968e:	4293      	cmp	r3, r2
    9690:	d1e2      	bne.n	9658 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
    9692:	fabb f08b 	clz	r0, fp
    9696:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
    9698:	b00d      	add	sp, #52	; 0x34
    969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    969e:	2000      	movs	r0, #0
}
    96a0:	b00d      	add	sp, #52	; 0x34
    96a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    96a6:	f10a 0a01 	add.w	sl, sl, #1
    96aa:	9b01      	ldr	r3, [sp, #4]
    96ac:	fa5f fa8a 	uxtb.w	sl, sl
    96b0:	4553      	cmp	r3, sl
    96b2:	d2c1      	bcs.n	9638 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
    96b4:	2001      	movs	r0, #1
    96b6:	e7ef      	b.n	9698 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

000096b8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    96b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    96bc:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    96be:	b08d      	sub	sp, #52	; 0x34
    96c0:	4616      	mov	r6, r2
    96c2:	469a      	mov	sl, r3
  FatFile dir = *this;
    96c4:	f10d 0c0c 	add.w	ip, sp, #12
    96c8:	f102 0415 	add.w	r4, r2, #21
    96cc:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    96d0:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
    96d2:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
    96d6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    96d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    96dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    96de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    96e2:	683b      	ldr	r3, [r7, #0]
    96e4:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    96e8:	ea4f 13c9 	mov.w	r3, r9, lsl #7
    96ec:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    96f0:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    96f4:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    96f6:	fa52 f383 	uxtab	r3, r2, r3
    96fa:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
    96fe:	d1f3      	bne.n	96e8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
    9700:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
    9702:	f04f 0800 	mov.w	r8, #0
    next = begin;
    9706:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    9708:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
    970c:	f1ba 0f00 	cmp.w	sl, #0
    9710:	d04e      	beq.n	97b0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
    9712:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    9714:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9716:	a803      	add	r0, sp, #12
    9718:	1bd9      	subs	r1, r3, r7
    971a:	b289      	uxth	r1, r1
    971c:	0149      	lsls	r1, r1, #5
    971e:	f7ff fd5d 	bl	91dc <FatFile::seekSet(unsigned long)>
    9722:	2800      	cmp	r0, #0
    9724:	d055      	beq.n	97d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    9726:	2100      	movs	r1, #0
    9728:	a803      	add	r0, sp, #12
    972a:	f7ff fbf7 	bl	8f1c <FatFile::readDirCache(bool)>
    if (!ldir) {
    972e:	2800      	cmp	r0, #0
    9730:	d04f      	beq.n	97d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    9732:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9734:	4557      	cmp	r7, sl
    9736:	f100 0b01 	add.w	fp, r0, #1
  *reinterpret_cast<uint16_t*>(dst) = src;
    973a:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
    973e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9742:	f04f 0500 	mov.w	r5, #0
    9746:	f043 0301 	orr.w	r3, r3, #1
    974a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    974e:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9752:	bf0c      	ite	eq
    9754:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
    9758:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    975a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
    975c:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    9760:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
    9762:	7303      	strb	r3, [r0, #12]
    9764:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
    9768:	f880 900d 	strb.w	r9, [r0, #13]
    976c:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
    976e:	e006      	b.n	977e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
    9770:	f8ab 0000 	strh.w	r0, [fp]
    9774:	3401      	adds	r4, #1
    9776:	3501      	adds	r5, #1
    9778:	f10b 0b02 	add.w	fp, fp, #2
    977c:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
    977e:	89b0      	ldrh	r0, [r6, #12]
    9780:	b918      	cbnz	r0, 978a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
    9782:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
    9786:	429a      	cmp	r2, r3
    9788:	d016      	beq.n	97b8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
    978a:	4630      	mov	r0, r6
    978c:	f003 fa90 	bl	ccb0 <FsName::get16()>
  if (i < 5) {
    9790:	2d04      	cmp	r5, #4
    9792:	b2eb      	uxtb	r3, r5
    9794:	d9ec      	bls.n	9770 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
    9796:	2b0a      	cmp	r3, #10
    9798:	d802      	bhi.n	97a0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
    979a:	f8ab 0003 	strh.w	r0, [fp, #3]
}
    979e:	e7e9      	b.n	9774 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
    97a0:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
    97a2:	f8ab 0005 	strh.w	r0, [fp, #5]
    97a6:	d1e5      	bne.n	9774 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    97a8:	3701      	adds	r7, #1
    97aa:	b2ff      	uxtb	r7, r7
    97ac:	45ba      	cmp	sl, r7
    97ae:	d2b1      	bcs.n	9714 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    97b0:	2001      	movs	r0, #1

 fail:
  return false;
}
    97b2:	b00d      	add	sp, #52	; 0x34
    97b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
    97b8:	f1b8 0f00 	cmp.w	r8, #0
    97bc:	d006      	beq.n	97cc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
    97be:	f108 0801 	add.w	r8, r8, #1
    97c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    97c6:	fa5f f888 	uxtb.w	r8, r8
    97ca:	e7e1      	b.n	9790 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
    97cc:	f04f 0801 	mov.w	r8, #1
    97d0:	e7de      	b.n	9790 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
    97d2:	2000      	movs	r0, #0
}
    97d4:	b00d      	add	sp, #52	; 0x34
    97d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97da:	bf00      	nop

000097dc <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    97dc:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    97de:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    97e2:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    97e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
    97ea:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
    97ee:	4686      	mov	lr, r0
  const char* end = fname->end;
    97f0:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
    97f2:	6051      	str	r1, [r2, #4]
    97f4:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    97f8:	781a      	ldrb	r2, [r3, #0]
    97fa:	2a2e      	cmp	r2, #46	; 0x2e
    97fc:	bf14      	ite	ne
    97fe:	2001      	movne	r0, #1
    9800:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    9802:	d103      	bne.n	980c <FatFile::makeSFN(FatLfn_t*)+0x30>
    9804:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9808:	2a2e      	cmp	r2, #46	; 0x2e
    980a:	d0fb      	beq.n	9804 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    980c:	1e61      	subs	r1, r4, #1
    980e:	4299      	cmp	r1, r3
    9810:	d90b      	bls.n	982a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    9812:	460a      	mov	r2, r1
    9814:	e002      	b.n	981c <FatFile::makeSFN(FatLfn_t*)+0x40>
    9816:	4293      	cmp	r3, r2
    9818:	4611      	mov	r1, r2
    981a:	d006      	beq.n	982a <FatFile::makeSFN(FatLfn_t*)+0x4e>
    981c:	4611      	mov	r1, r2
    981e:	3a01      	subs	r2, #1
    9820:	f891 c000 	ldrb.w	ip, [r1]
    9824:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    9828:	d1f5      	bne.n	9816 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
    982a:	429c      	cmp	r4, r3
    982c:	f04f 0500 	mov.w	r5, #0
    9830:	f240 8086 	bls.w	9940 <FatFile::makeSFN(FatLfn_t*)+0x164>
    9834:	2607      	movs	r6, #7
    9836:	2708      	movs	r7, #8
    9838:	46a9      	mov	r9, r5
    983a:	46a8      	mov	r8, r5
    983c:	e006      	b.n	984c <FatFile::makeSFN(FatLfn_t*)+0x70>
    983e:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
    9840:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
    9842:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    9846:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
    9848:	429c      	cmp	r4, r3
    984a:	d95b      	bls.n	9904 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
    984c:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
    984e:	2a2e      	cmp	r2, #46	; 0x2e
    9850:	bf08      	it	eq
    9852:	4299      	cmpeq	r1, r3
    9854:	d0f3      	beq.n	983e <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    9856:	2a22      	cmp	r2, #34	; 0x22
    9858:	d00d      	beq.n	9876 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    985a:	2a7c      	cmp	r2, #124	; 0x7c
    985c:	d00b      	beq.n	9876 <FatFile::makeSFN(FatLfn_t*)+0x9a>
    985e:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
    9862:	f1bc 0f02 	cmp.w	ip, #2
    9866:	d906      	bls.n	9876 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    9868:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
    986c:	f1bc 0f05 	cmp.w	ip, #5
    9870:	d821      	bhi.n	98b6 <FatFile::makeSFN(FatLfn_t*)+0xda>
    9872:	2a2d      	cmp	r2, #45	; 0x2d
    9874:	d01f      	beq.n	98b6 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
    9876:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    987a:	2a80      	cmp	r2, #128	; 0x80
    987c:	d05d      	beq.n	993a <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
    987e:	454e      	cmp	r6, r9
    9880:	d22f      	bcs.n	98e2 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
    9882:	4299      	cmp	r1, r3
    9884:	bf2c      	ite	cs
    9886:	2000      	movcs	r0, #0
    9888:	2001      	movcc	r0, #1
    988a:	2e0a      	cmp	r6, #10
    988c:	bf08      	it	eq
    988e:	f040 0001 	orreq.w	r0, r0, #1
    9892:	2800      	cmp	r0, #0
    9894:	d047      	beq.n	9926 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    9896:	f89e 3016 	ldrb.w	r3, [lr, #22]
    989a:	2b20      	cmp	r3, #32
    989c:	d040      	beq.n	9920 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    989e:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    98a2:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    98a4:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    98a6:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
    98a8:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
    98aa:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
    98ae:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    98b0:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
    98b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    98b6:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
    98ba:	f1bc 0f05 	cmp.w	ip, #5
    98be:	d9da      	bls.n	9876 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
    98c0:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
    98c4:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
    98c8:	d8d5      	bhi.n	9876 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
    98ca:	454e      	cmp	r6, r9
    98cc:	d3d9      	bcc.n	9882 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
    98ce:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
    98d2:	f1bc 0f19 	cmp.w	ip, #25
    98d6:	d828      	bhi.n	992a <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
    98d8:	3a20      	subs	r2, #32
        lc |= bit;
    98da:	433d      	orrs	r5, r7
        c += 'A' - 'a';
    98dc:	b2d2      	uxtb	r2, r2
        lc |= bit;
    98de:	b2ed      	uxtb	r5, r5
    98e0:	e001      	b.n	98e6 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
    98e2:	2000      	movs	r0, #0
        c = '_';
    98e4:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
    98e6:	f109 0c01 	add.w	ip, r9, #1
    98ea:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
    98ec:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
    98ee:	f889 2016 	strb.w	r2, [r9, #22]
    98f2:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
    98f6:	2a06      	cmp	r2, #6
        fname->seqPos = i;
    98f8:	4691      	mov	r9, r2
    98fa:	bf98      	it	ls
    98fc:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
    9900:	429c      	cmp	r4, r3
    9902:	d8a3      	bhi.n	984c <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
    9904:	f89e 3016 	ldrb.w	r3, [lr, #22]
    9908:	2b20      	cmp	r3, #32
    990a:	d009      	beq.n	9920 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
    990c:	2800      	cmp	r0, #0
    990e:	d0c6      	beq.n	989e <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    9910:	ea18 0f05 	tst.w	r8, r5
    9914:	bf18      	it	ne
    9916:	2502      	movne	r5, #2
    9918:	f88e 5015 	strb.w	r5, [lr, #21]
}
    991c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
    9920:	2000      	movs	r0, #0
}
    9922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9926:	460b      	mov	r3, r1
    9928:	e78e      	b.n	9848 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
    992a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
    992e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
    9932:	bf98      	it	ls
    9934:	ea47 0808 	orrls.w	r8, r7, r8
    9938:	e7d5      	b.n	98e6 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
    993a:	3301      	adds	r3, #1
        is83 = false;
    993c:	2000      	movs	r0, #0
    993e:	e783      	b.n	9848 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
    9940:	46a8      	mov	r8, r5
    9942:	e7df      	b.n	9904 <FatFile::makeSFN(FatLfn_t*)+0x128>

00009944 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    9944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    9948:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    994c:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    994e:	460f      	mov	r7, r1
    9950:	4604      	mov	r4, r0
    9952:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 99f4 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
    9956:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
    995a:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    995e:	f101 0616 	add.w	r6, r1, #22
    9962:	f1b8 0f03 	cmp.w	r8, #3
    9966:	f8db 3000 	ldr.w	r3, [fp]
    996a:	bf28      	it	cs
    996c:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
    9970:	442b      	add	r3, r5
    9972:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9974:	f108 0304 	add.w	r3, r8, #4
    9978:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    997a:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    997e:	1e58      	subs	r0, r3, #1
      hex >>= 4;
    9980:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9982:	2a09      	cmp	r2, #9
    9984:	f102 0137 	add.w	r1, r2, #55	; 0x37
    9988:	bf98      	it	ls
    998a:	f102 0130 	addls.w	r1, r2, #48	; 0x30
    998e:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9990:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    9992:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    9994:	4598      	cmp	r8, r3
    9996:	d1f0      	bne.n	997a <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
    9998:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
    999c:	2100      	movs	r1, #0
    999e:	4620      	mov	r0, r4
    99a0:	f883 a016 	strb.w	sl, [r3, #22]
    99a4:	f7ff fc1a 	bl	91dc <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    99a8:	2101      	movs	r1, #1
    99aa:	4620      	mov	r0, r4
    99ac:	f7ff fab6 	bl	8f1c <FatFile::readDirCache(bool)>
    99b0:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    99b2:	220b      	movs	r2, #11
    99b4:	4630      	mov	r0, r6
      if (!dir) {
    99b6:	b19b      	cbz	r3, 99e0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
    99b8:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    99bc:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
    99be:	f1bc 0f00 	cmp.w	ip, #0
    99c2:	d013      	beq.n	99ec <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    99c4:	7adb      	ldrb	r3, [r3, #11]
    99c6:	071b      	lsls	r3, r3, #28
    99c8:	d4ee      	bmi.n	99a8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
    99ca:	f008 fc85 	bl	122d8 <memcmp>
    99ce:	2800      	cmp	r0, #0
    99d0:	d1ea      	bne.n	99a8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    99d2:	f109 39ff 	add.w	r9, r9, #4294967295
    99d6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
    99da:	d1c2      	bne.n	9962 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
    99dc:	4648      	mov	r0, r9
 fail:
    99de:	e003      	b.n	99e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
    99e0:	7860      	ldrb	r0, [r4, #1]
    99e2:	fab0 f080 	clz	r0, r0
    99e6:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
    99e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
    99ec:	2001      	movs	r0, #1
}
    99ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99f2:	bf00      	nop
    99f4:	20019b88 	.word	0x20019b88

000099f8 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    99f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99fc:	ed2d 8b02 	vpush	{d8}
    9a00:	b08b      	sub	sp, #44	; 0x2c
    9a02:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    9a06:	688b      	ldr	r3, [r1, #8]
    9a08:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
    9a0a:	780b      	ldrb	r3, [r1, #0]
    9a0c:	f013 0f70 	tst.w	r3, #112	; 0x70
    9a10:	d053      	beq.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
    9a12:	9b02      	ldr	r3, [sp, #8]
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	2b00      	cmp	r3, #0
    9a18:	d14f      	bne.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
    9a1a:	6913      	ldr	r3, [r2, #16]
    9a1c:	4690      	mov	r8, r2
    9a1e:	4a9a      	ldr	r2, [pc, #616]	; (9c88 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
    9a20:	460e      	mov	r6, r1
    9a22:	330c      	adds	r3, #12
    9a24:	fba2 2303 	umull	r2, r3, r2, r3
    9a28:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9a2c:	f898 3015 	ldrb.w	r3, [r8, #21]
    9a30:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
    9a32:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9a34:	f000 80a7 	beq.w	9b86 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
    9a38:	1c57      	adds	r7, r2, #1
    9a3a:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
    9a3c:	2300      	movs	r3, #0
    seekSet(0);
    9a3e:	4630      	mov	r0, r6
    9a40:	4619      	mov	r1, r3
    9a42:	461c      	mov	r4, r3
    9a44:	9306      	str	r3, [sp, #24]
    9a46:	f7ff fbc9 	bl	91dc <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9a4a:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
    9a4e:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
    9a50:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
    9a52:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9a54:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
    9a58:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9a5a:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
    9a5c:	2100      	movs	r1, #0
    9a5e:	4630      	mov	r0, r6
    9a60:	f7ff fa5c 	bl	8f1c <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9a64:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
    9a68:	4603      	mov	r3, r0
    9a6a:	b320      	cbz	r0, 9ab6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    9a6c:	7802      	ldrb	r2, [r0, #0]
    9a6e:	2ae5      	cmp	r2, #229	; 0xe5
    9a70:	d029      	beq.n	9ac6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
    9a72:	b342      	cbz	r2, 9ac6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
    9a74:	42bc      	cmp	r4, r7
    9a76:	bf38      	it	cc
    9a78:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    9a7a:	2a2e      	cmp	r2, #46	; 0x2e
    9a7c:	d02b      	beq.n	9ad6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    9a7e:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
    9a82:	f1bc 0f0f 	cmp.w	ip, #15
    9a86:	d054      	beq.n	9b32 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
    9a88:	f01c 0c08 	ands.w	ip, ip, #8
    9a8c:	d123      	bne.n	9ad6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
    9a8e:	f1b9 0f00 	cmp.w	r9, #0
    9a92:	f040 80d5 	bne.w	9c40 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    9a96:	220b      	movs	r2, #11
    9a98:	ee18 1a10 	vmov	r1, s16
    9a9c:	f008 fc1c 	bl	122d8 <memcmp>
    9aa0:	2800      	cmp	r0, #0
    9aa2:	d1da      	bne.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    9aa4:	f898 3015 	ldrb.w	r3, [r8, #21]
    9aa8:	f013 0301 	ands.w	r3, r3, #1
    9aac:	f000 80e4 	beq.w	9c78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
    9ab0:	2301      	movs	r3, #1
    9ab2:	9305      	str	r3, [sp, #20]
    9ab4:	e7d1      	b.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
    9ab6:	7873      	ldrb	r3, [r6, #1]
    9ab8:	b183      	cbz	r3, 9adc <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
    9aba:	2000      	movs	r0, #0
}
    9abc:	b00b      	add	sp, #44	; 0x2c
    9abe:	ecbd 8b02 	vpop	{d8}
    9ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    9ac6:	2c00      	cmp	r4, #0
    9ac8:	bf08      	it	eq
    9aca:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
    9acc:	42bc      	cmp	r4, r7
    9ace:	d201      	bcs.n	9ad4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
    9ad0:	3401      	adds	r4, #1
    9ad2:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    9ad4:	b112      	cbz	r2, 9adc <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
    9ad6:	f04f 0900 	mov.w	r9, #0
    9ada:	e7be      	b.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    9adc:	9b03      	ldr	r3, [sp, #12]
    9ade:	059a      	lsls	r2, r3, #22
    9ae0:	d5eb      	bpl.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    9ae2:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    9ae6:	3b01      	subs	r3, #1
    9ae8:	2b01      	cmp	r3, #1
    9aea:	d8e6      	bhi.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
    9aec:	2c00      	cmp	r4, #0
    9aee:	bf08      	it	eq
    9af0:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
    9af2:	42bc      	cmp	r4, r7
    9af4:	d303      	bcc.n	9afe <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
    9af6:	e048      	b.n	9b8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
    9af8:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
    9afa:	42a7      	cmp	r7, r4
    9afc:	d045      	beq.n	9b8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
    9afe:	2100      	movs	r1, #0
    9b00:	4630      	mov	r0, r6
    9b02:	f7ff fa0b 	bl	8f1c <FatFile::readDirCache(bool)>
    freeFound++;
    9b06:	1c63      	adds	r3, r4, #1
    if (!dir) {
    9b08:	2800      	cmp	r0, #0
    9b0a:	d1f5      	bne.n	9af8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
    9b0c:	7873      	ldrb	r3, [r6, #1]
    9b0e:	2b00      	cmp	r3, #0
    9b10:	d1d3      	bne.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
    9b12:	42a7      	cmp	r7, r4
    9b14:	d939      	bls.n	9b8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    9b16:	9d07      	ldr	r5, [sp, #28]
    9b18:	e005      	b.n	9b26 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    9b1a:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
    9b1c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
    9b20:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
    9b22:	42a7      	cmp	r7, r4
    9b24:	d931      	bls.n	9b8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
    9b26:	4630      	mov	r0, r6
    9b28:	f7fe feb2 	bl	8890 <FatFile::addDirCluster()>
    9b2c:	2800      	cmp	r0, #0
    9b2e:	d1f4      	bne.n	9b1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
    9b30:	e7c3      	b.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
    9b32:	f1b9 0f00 	cmp.w	r9, #0
    9b36:	d119      	bne.n	9b6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
    9b38:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
    9b3c:	9904      	ldr	r1, [sp, #16]
    9b3e:	4559      	cmp	r1, fp
    9b40:	d18b      	bne.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
    9b42:	f012 0940 	ands.w	r9, r2, #64	; 0x40
    9b46:	d088      	beq.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
    9b48:	7b43      	ldrb	r3, [r0, #13]
    9b4a:	4689      	mov	r9, r1
    9b4c:	9306      	str	r3, [sp, #24]
      if (order == 1) {
    9b4e:	f1bb 0f01 	cmp.w	fp, #1
    9b52:	d182      	bne.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    9b54:	1c69      	adds	r1, r5, #1
    9b56:	464b      	mov	r3, r9
    9b58:	4642      	mov	r2, r8
    9b5a:	4630      	mov	r0, r6
    9b5c:	b289      	uxth	r1, r1
    9b5e:	f7ff fd4d 	bl	95fc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    9b62:	2800      	cmp	r0, #0
    9b64:	bf08      	it	eq
    9b66:	f04f 0900 	moveq.w	r9, #0
    9b6a:	e776      	b.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    9b6c:	f10b 3bff 	add.w	fp, fp, #4294967295
    9b70:	fa5f fb8b 	uxtb.w	fp, fp
    9b74:	455a      	cmp	r2, fp
    9b76:	d1ae      	bne.n	9ad6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
    9b78:	7b43      	ldrb	r3, [r0, #13]
    9b7a:	9a06      	ldr	r2, [sp, #24]
    9b7c:	4293      	cmp	r3, r2
    9b7e:	d0e6      	beq.n	9b4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
    9b80:	f04f 0900 	mov.w	r9, #0
    9b84:	e769      	b.n	9a5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    9b86:	2701      	movs	r7, #1
    9b88:	e758      	b.n	9a3c <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
    9b8a:	9b05      	ldr	r3, [sp, #20]
    9b8c:	b12b      	cbz	r3, 9b9a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
    9b8e:	4641      	mov	r1, r8
    9b90:	4630      	mov	r0, r6
    9b92:	f7ff fed7 	bl	9944 <FatFile::makeUniqueSfn(FatLfn_t*)>
    9b96:	2800      	cmp	r0, #0
    9b98:	d08f      	beq.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
    9b9a:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9b9c:	4642      	mov	r2, r8
    9b9e:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
    9ba0:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
    9ba2:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
    9ba6:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
    9ba8:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    9baa:	4629      	mov	r1, r5
    9bac:	f7ff fd84 	bl	96b8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    9bb0:	2800      	cmp	r0, #0
    9bb2:	d082      	beq.n	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9bb4:	0169      	lsls	r1, r5, #5
    9bb6:	4630      	mov	r0, r6
    9bb8:	f7ff fb10 	bl	91dc <FatFile::seekSet(unsigned long)>
    9bbc:	2800      	cmp	r0, #0
    9bbe:	f43f af7c 	beq.w	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9bc2:	2100      	movs	r1, #0
    9bc4:	4630      	mov	r0, r6
    9bc6:	f7ff f9a9 	bl	8f1c <FatFile::readDirCache(bool)>
  if (!dir) {
    9bca:	4604      	mov	r4, r0
    9bcc:	2800      	cmp	r0, #0
    9bce:	f43f af74 	beq.w	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
    9bd2:	2220      	movs	r2, #32
    9bd4:	2100      	movs	r1, #0
    9bd6:	f008 fc2b 	bl	12430 <memset>
  memcpy(dir->name, fname->sfn, 11);
    9bda:	f8d8 2016 	ldr.w	r2, [r8, #22]
    9bde:	f8d8 301a 	ldr.w	r3, [r8, #26]
    9be2:	6022      	str	r2, [r4, #0]
    9be4:	6063      	str	r3, [r4, #4]
    9be6:	f898 3020 	ldrb.w	r3, [r8, #32]
    9bea:	f8b8 201e 	ldrh.w	r2, [r8, #30]
    9bee:	72a3      	strb	r3, [r4, #10]
    9bf0:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    9bf2:	f898 3015 	ldrb.w	r3, [r8, #21]
    9bf6:	f003 0318 	and.w	r3, r3, #24
    9bfa:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    9bfc:	4b23      	ldr	r3, [pc, #140]	; (9c8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d03b      	beq.n	9c7c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
    9c04:	f10d 0223 	add.w	r2, sp, #35	; 0x23
    9c08:	f10d 0126 	add.w	r1, sp, #38	; 0x26
    9c0c:	a809      	add	r0, sp, #36	; 0x24
    9c0e:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    9c10:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    9c14:	8223      	strh	r3, [r4, #16]
    9c16:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    9c1a:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    9c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    9c20:	7363      	strb	r3, [r4, #13]
    9c22:	9a07      	ldr	r2, [sp, #28]
    9c24:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
    9c28:	f043 0301 	orr.w	r3, r3, #1
    9c2c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    9c30:	9b03      	ldr	r3, [sp, #12]
    9c32:	462a      	mov	r2, r5
    9c34:	4631      	mov	r1, r6
    9c36:	9802      	ldr	r0, [sp, #8]
    9c38:	9700      	str	r7, [sp, #0]
    9c3a:	f7ff fb27 	bl	928c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    9c3e:	e73d      	b.n	9abc <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    9c40:	f1bb 0f01 	cmp.w	fp, #1
    9c44:	f47f af39 	bne.w	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
    9c48:	300a      	adds	r0, #10
    9c4a:	e001      	b.n	9c50 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9c4c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9c50:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
    9c54:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9c56:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
    9c5a:	fa52 f281 	uxtab	r2, r2, r1
    9c5e:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    9c62:	d1f3      	bne.n	9c4c <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
    9c64:	9b06      	ldr	r3, [sp, #24]
    9c66:	4563      	cmp	r3, ip
    9c68:	f47f af27 	bne.w	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9c6c:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
    9c6e:	9b03      	ldr	r3, [sp, #12]
    9c70:	0519      	lsls	r1, r3, #20
    9c72:	f53f af22 	bmi.w	9aba <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    9c76:	e7db      	b.n	9c30 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
    9c78:	461f      	mov	r7, r3
    9c7a:	e7f8      	b.n	9c6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
    9c7c:	f645 0321 	movw	r3, #22561	; 0x5821
    9c80:	8223      	strh	r3, [r4, #16]
    9c82:	8323      	strh	r3, [r4, #24]
    9c84:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    9c86:	e7cc      	b.n	9c22 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
    9c88:	4ec4ec4f 	.word	0x4ec4ec4f
    9c8c:	20018cdc 	.word	0x20018cdc

00009c90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    9c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c94:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    9c96:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
    9c98:	b082      	sub	sp, #8
    9c9a:	460c      	mov	r4, r1
  while (*path == ' ') {
    9c9c:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
    9c9e:	4615      	mov	r5, r2
  while (*path == ' ') {
    9ca0:	d103      	bne.n	9caa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    9ca2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9ca6:	2b20      	cmp	r3, #32
    9ca8:	d0fb      	beq.n	9ca2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
    9caa:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
    9cac:	7823      	ldrb	r3, [r4, #0]
    9cae:	b363      	cbz	r3, 9d0a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9cb0:	2b2f      	cmp	r3, #47	; 0x2f
    9cb2:	d02a      	beq.n	9d0a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
    9cb4:	f04f 0800 	mov.w	r8, #0
    9cb8:	4e29      	ldr	r6, [pc, #164]	; (9d60 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
    9cba:	1d21      	adds	r1, r4, #4
    9cbc:	4620      	mov	r0, r4
    9cbe:	aa01      	add	r2, sp, #4
    9cc0:	f003 f86e 	bl	cda0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    9cc4:	4604      	mov	r4, r0
    9cc6:	b170      	cbz	r0, 9ce6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
    9cc8:	9b01      	ldr	r3, [sp, #4]
    9cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    9cce:	d240      	bcs.n	9d52 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9cd0:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    9cd2:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
    9cd6:	d831      	bhi.n	9d3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
    9cd8:	2b3c      	cmp	r3, #60	; 0x3c
    9cda:	b2d9      	uxtb	r1, r3
    9cdc:	d829      	bhi.n	9d32 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
    9cde:	2921      	cmp	r1, #33	; 0x21
    9ce0:	d805      	bhi.n	9cee <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
    9ce2:	291f      	cmp	r1, #31
    9ce4:	d809      	bhi.n	9cfa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
    9ce6:	2000      	movs	r0, #0
    9ce8:	b002      	add	sp, #8
    9cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9cee:	3922      	subs	r1, #34	; 0x22
    9cf0:	b2c9      	uxtb	r1, r1
    9cf2:	fa26 f101 	lsr.w	r1, r6, r1
    9cf6:	07ca      	lsls	r2, r1, #31
    9cf8:	d4f5      	bmi.n	9ce6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
    9cfa:	2b2e      	cmp	r3, #46	; 0x2e
    9cfc:	d001      	beq.n	9d02 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9cfe:	2b20      	cmp	r3, #32
    9d00:	d11c      	bne.n	9d3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
    9d02:	7823      	ldrb	r3, [r4, #0]
    9d04:	b10b      	cbz	r3, 9d0a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
    9d06:	2b2f      	cmp	r3, #47	; 0x2f
    9d08:	d1d7      	bne.n	9cba <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    9d0a:	692b      	ldr	r3, [r5, #16]
    9d0c:	3b01      	subs	r3, #1
    9d0e:	2bfe      	cmp	r3, #254	; 0xfe
    9d10:	d8e9      	bhi.n	9ce6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    9d12:	7823      	ldrb	r3, [r4, #0]
    9d14:	2b20      	cmp	r3, #32
    9d16:	d103      	bne.n	9d20 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
    9d18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    9d1c:	2b20      	cmp	r3, #32
    9d1e:	d0fb      	beq.n	9d18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
    9d20:	2b2f      	cmp	r3, #47	; 0x2f
    9d22:	d0f9      	beq.n	9d18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
    9d24:	4628      	mov	r0, r5
  *ptr = path;
    9d26:	603c      	str	r4, [r7, #0]
}
    9d28:	b002      	add	sp, #8
    9d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
    9d2e:	f7ff bd55 	b.w	97dc <FatFile::makeSFN(FatLfn_t*)>
    9d32:	295c      	cmp	r1, #92	; 0x5c
    9d34:	d0d7      	beq.n	9ce6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    9d36:	d905      	bls.n	9d44 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
    9d38:	297c      	cmp	r1, #124	; 0x7c
    9d3a:	d0d4      	beq.n	9ce6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
    9d3c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9d40:	60ac      	str	r4, [r5, #8]
    9d42:	e7de      	b.n	9d02 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9d44:	393e      	subs	r1, #62	; 0x3e
    9d46:	2901      	cmp	r1, #1
    9d48:	d8f8      	bhi.n	9d3c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
    9d4a:	2000      	movs	r0, #0
    9d4c:	b002      	add	sp, #8
    9d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
    9d52:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
    9d56:	60ac      	str	r4, [r5, #8]
      fname->len = len;
    9d58:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
    9d5c:	e7d1      	b.n	9d02 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
    9d5e:	bf00      	nop
    9d60:	05002101 	.word	0x05002101

00009d64 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    9d64:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
    9d66:	2300      	movs	r3, #0
    9d68:	b08b      	sub	sp, #44	; 0x2c
    9d6a:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    9d6c:	7883      	ldrb	r3, [r0, #2]
    9d6e:	079a      	lsls	r2, r3, #30
    9d70:	d524      	bpl.n	9dbc <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    9d72:	6a01      	ldr	r1, [r0, #32]
    9d74:	4605      	mov	r5, r0
    9d76:	b119      	cbz	r1, 9d80 <FatFile::remove()+0x1c>
    9d78:	6880      	ldr	r0, [r0, #8]
    9d7a:	f000 fb3d 	bl	a3f8 <FatPartition::freeChain(unsigned long)>
    9d7e:	b1e8      	cbz	r0, 9dbc <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    9d80:	2101      	movs	r1, #1
    9d82:	4628      	mov	r0, r5
    9d84:	f7fe fdc0 	bl	8908 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9d88:	b1c0      	cbz	r0, 9dbc <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
    9d8a:	1e42      	subs	r2, r0, #1
    9d8c:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
    9d90:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9d92:	01e3      	lsls	r3, r4, #7
    9d94:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    9d98:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    9d9c:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    9d9e:	fa51 f383 	uxtab	r3, r1, r3
    9da2:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
    9da4:	d1f5      	bne.n	9d92 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
    9da6:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    9da8:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
    9daa:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
    9dac:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
    9dae:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9db0:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
    9db4:	70ab      	strb	r3, [r5, #2]
    9db6:	f002 ff27 	bl	cc08 <FsCache::sync()>
    9dba:	b910      	cbnz	r0, 9dc2 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    9dbc:	2000      	movs	r0, #0
}
    9dbe:	b00b      	add	sp, #44	; 0x2c
    9dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9dc2:	f507 700e 	add.w	r0, r7, #568	; 0x238
    9dc6:	f002 ff1f 	bl	cc08 <FsCache::sync()>
    9dca:	2800      	cmp	r0, #0
    9dcc:	d0f6      	beq.n	9dbc <FatFile::remove()+0x58>
    9dce:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
    9dd0:	6803      	ldr	r3, [r0, #0]
    9dd2:	6a1b      	ldr	r3, [r3, #32]
    9dd4:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    9dd6:	2800      	cmp	r0, #0
    9dd8:	d0f0      	beq.n	9dbc <FatFile::remove()+0x58>
  if (!isLFN()) {
    9dda:	78eb      	ldrb	r3, [r5, #3]
    9ddc:	2b00      	cmp	r3, #0
    9dde:	d0ee      	beq.n	9dbe <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
    9de0:	4629      	mov	r1, r5
    9de2:	a801      	add	r0, sp, #4
    9de4:	f7fe ff66 	bl	8cb4 <FatFile::openCluster(FatFile*)>
    9de8:	2800      	cmp	r0, #0
    9dea:	d0e7      	beq.n	9dbc <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9dec:	78eb      	ldrb	r3, [r5, #3]
    9dee:	2b00      	cmp	r3, #0
    9df0:	d0e4      	beq.n	9dbc <FatFile::remove()+0x58>
    9df2:	2701      	movs	r7, #1
    9df4:	e021      	b.n	9e3a <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9df6:	a801      	add	r0, sp, #4
    9df8:	f7ff f890 	bl	8f1c <FatFile::readDirCache(bool)>
    9dfc:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9dfe:	b2f9      	uxtb	r1, r7
    if (!ldir) {
    9e00:	2800      	cmp	r0, #0
    9e02:	d0db      	beq.n	9dbc <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9e04:	7ac2      	ldrb	r2, [r0, #11]
    9e06:	2a0f      	cmp	r2, #15
    9e08:	d1d8      	bne.n	9dbc <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9e0a:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9e0c:	fa5f fc83 	uxtb.w	ip, r3
    9e10:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9e12:	f002 031f 	and.w	r3, r2, #31
    9e16:	428b      	cmp	r3, r1
    9e18:	d1d0      	bne.n	9dbc <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
    9e1a:	7b43      	ldrb	r3, [r0, #13]
    9e1c:	42a3      	cmp	r3, r4
    9e1e:	d1cd      	bne.n	9dbc <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
    9e20:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
    9e22:	68a9      	ldr	r1, [r5, #8]
    9e24:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    9e28:	f043 0301 	orr.w	r3, r3, #1
    9e2c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
    9e30:	0653      	lsls	r3, r2, #25
    9e32:	d40d      	bmi.n	9e50 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9e34:	78eb      	ldrb	r3, [r5, #3]
    9e36:	4563      	cmp	r3, ip
    9e38:	d3c0      	bcc.n	9dbc <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    9e3a:	88a9      	ldrh	r1, [r5, #4]
    9e3c:	a801      	add	r0, sp, #4
    9e3e:	1bc9      	subs	r1, r1, r7
    9e40:	b289      	uxth	r1, r1
    9e42:	0149      	lsls	r1, r1, #5
    9e44:	f7ff f9ca 	bl	91dc <FatFile::seekSet(unsigned long)>
    9e48:	2100      	movs	r1, #0
    9e4a:	2800      	cmp	r0, #0
    9e4c:	d1d3      	bne.n	9df6 <FatFile::remove()+0x92>
    9e4e:	e7b5      	b.n	9dbc <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
    9e50:	68ac      	ldr	r4, [r5, #8]
    9e52:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9e56:	f002 fed7 	bl	cc08 <FsCache::sync()>
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d0ae      	beq.n	9dbc <FatFile::remove()+0x58>
    9e5e:	f504 700e 	add.w	r0, r4, #568	; 0x238
    9e62:	f002 fed1 	bl	cc08 <FsCache::sync()>
    9e66:	2800      	cmp	r0, #0
    9e68:	d0a8      	beq.n	9dbc <FatFile::remove()+0x58>
    9e6a:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    9e6c:	6803      	ldr	r3, [r0, #0]
    9e6e:	6a1b      	ldr	r3, [r3, #32]
    9e70:	4798      	blx	r3
    9e72:	e7a4      	b.n	9dbe <FatFile::remove()+0x5a>

00009e74 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    9e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e78:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9e7c:	b1a2      	cbz	r2, 9ea8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    9e7e:	4605      	mov	r5, r0
    9e80:	460c      	mov	r4, r1
    9e82:	4698      	mov	r8, r3
    9e84:	1857      	adds	r7, r2, r1
    9e86:	e001      	b.n	9e8c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
    9e88:	42bc      	cmp	r4, r7
    9e8a:	d00d      	beq.n	9ea8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    9e8c:	682b      	ldr	r3, [r5, #0]
    9e8e:	4620      	mov	r0, r4
    9e90:	4649      	mov	r1, r9
    9e92:	6a5e      	ldr	r6, [r3, #36]	; 0x24
    9e94:	47c0      	blx	r8
    9e96:	4621      	mov	r1, r4
    9e98:	4602      	mov	r2, r0
    9e9a:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
    9e9c:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    9e9e:	47b0      	blx	r6
    9ea0:	2800      	cmp	r0, #0
    9ea2:	d1f1      	bne.n	9e88 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
    9ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
    9ea8:	2001      	movs	r0, #1
  }
    9eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9eae:	bf00      	nop

00009eb0 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    9eb0:	2a04      	cmp	r2, #4
    9eb2:	d804      	bhi.n	9ebe <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    9eb4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9eb8:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    9ebc:	4770      	bx	lr
  } else if (i < 11) {
    9ebe:	2a0a      	cmp	r2, #10
    9ec0:	d803      	bhi.n	9eca <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    9ec2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    9ec6:	8890      	ldrh	r0, [r2, #4]
    9ec8:	4770      	bx	lr
  } else if (i < 13) {
    9eca:	2a0c      	cmp	r2, #12
    9ecc:	d803      	bhi.n	9ed6 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
    9ece:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9ed2:	88c8      	ldrh	r0, [r1, #6]
    9ed4:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    9ed6:	2000      	movs	r0, #0
}
    9ed8:	4770      	bx	lr
    9eda:	bf00      	nop

00009edc <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    9edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    9ede:	7804      	ldrb	r4, [r0, #0]
    9ee0:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    9ee2:	b17c      	cbz	r4, 9f04 <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    9ee4:	f014 0460 	ands.w	r4, r4, #96	; 0x60
    9ee8:	4617      	mov	r7, r2
    9eea:	d007      	beq.n	9efc <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    9eec:	2a01      	cmp	r2, #1
    9eee:	d909      	bls.n	9f04 <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    9ef0:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
    9ef2:	2300      	movs	r3, #0
    return 1;
    9ef4:	2001      	movs	r0, #1
    name[0] = '/';
    9ef6:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
    9ef8:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    9efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    9efc:	4621      	mov	r1, r4
    9efe:	f7fe fd03 	bl	8908 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    9f02:	b918      	cbnz	r0, 9f0c <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
    9f04:	2300      	movs	r3, #0
  return 0;
    9f06:	4618      	mov	r0, r3
  name[0] = '\0';
    9f08:	7033      	strb	r3, [r6, #0]
}
    9f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
    9f0c:	4603      	mov	r3, r0
    9f0e:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    9f10:	2108      	movs	r1, #8
    9f12:	e011      	b.n	9f38 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9f14:	7b02      	ldrb	r2, [r0, #12]
    9f16:	4211      	tst	r1, r2
    9f18:	d003      	beq.n	9f22 <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
    9f1a:	f10e 0e20 	add.w	lr, lr, #32
    9f1e:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
    9f22:	1c65      	adds	r5, r4, #1
    9f24:	42bd      	cmp	r5, r7
    9f26:	d2ed      	bcs.n	9f04 <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
    9f28:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
    9f2c:	f806 e004 	strb.w	lr, [r6, r4]
    9f30:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
    9f32:	f1bc 0f0c 	cmp.w	ip, #12
    9f36:	d010      	beq.n	9f5a <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
    9f38:	f1bc 0f08 	cmp.w	ip, #8
    9f3c:	d011      	beq.n	9f62 <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
    9f3e:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    9f42:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
    9f46:	2a19      	cmp	r2, #25
    9f48:	d9e4      	bls.n	9f14 <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
    9f4a:	f1be 0f20 	cmp.w	lr, #32
    9f4e:	d1e8      	bne.n	9f22 <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
    9f50:	f10c 0c01 	add.w	ip, ip, #1
    9f54:	f1bc 0f0c 	cmp.w	ip, #12
    9f58:	d1ee      	bne.n	9f38 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
    9f5a:	2300      	movs	r3, #0
    9f5c:	4620      	mov	r0, r4
    9f5e:	5533      	strb	r3, [r6, r4]
}
    9f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
    9f62:	781a      	ldrb	r2, [r3, #0]
    9f64:	2a20      	cmp	r2, #32
    9f66:	d0f8      	beq.n	9f5a <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
    9f68:	2110      	movs	r1, #16
      c = '.';
    9f6a:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    9f6e:	e7d8      	b.n	9f22 <FatFile::getSFN(char*, unsigned int)+0x46>

00009f70 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    9f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    9f74:	2400      	movs	r4, #0
    9f76:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    9f78:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    9f7a:	4689      	mov	r9, r1
    9f7c:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d055      	beq.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
    9f82:	78c3      	ldrb	r3, [r0, #3]
    9f84:	4606      	mov	r6, r0
    9f86:	2b00      	cmp	r3, #0
    9f88:	d058      	beq.n	a03c <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
    9f8a:	4601      	mov	r1, r0
    9f8c:	a801      	add	r0, sp, #4
    9f8e:	4690      	mov	r8, r2
    9f90:	f7fe fe90 	bl	8cb4 <FatFile::openCluster(FatFile*)>
    9f94:	2800      	cmp	r0, #0
    9f96:	d04a      	beq.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9f98:	78f0      	ldrb	r0, [r6, #3]
    9f9a:	2800      	cmp	r0, #0
    9f9c:	d043      	beq.n	a026 <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9f9e:	f108 38ff 	add.w	r8, r8, #4294967295
  char* str = name;
    9fa2:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    9fa4:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9fa8:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    9faa:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    9fac:	a801      	add	r0, sp, #4
    9fae:	eba1 010a 	sub.w	r1, r1, sl
    9fb2:	b289      	uxth	r1, r1
    9fb4:	0149      	lsls	r1, r1, #5
    9fb6:	f7ff f911 	bl	91dc <FatFile::seekSet(unsigned long)>
    9fba:	b3c0      	cbz	r0, a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    9fbc:	2100      	movs	r1, #0
    9fbe:	a801      	add	r0, sp, #4
    9fc0:	f7fe ffac 	bl	8f1c <FatFile::readDirCache(bool)>
    if (!ldir) {
    9fc4:	b398      	cbz	r0, a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    9fc6:	7ac3      	ldrb	r3, [r0, #11]
    9fc8:	2b0f      	cmp	r3, #15
    9fca:	d130      	bne.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    9fcc:	7803      	ldrb	r3, [r0, #0]
    9fce:	fa5f f18a 	uxtb.w	r1, sl
    9fd2:	f003 031f 	and.w	r3, r3, #31
    9fd6:	428b      	cmp	r3, r1
    9fd8:	d129      	bne.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    9fda:	1c47      	adds	r7, r0, #1
    9fdc:	2500      	movs	r5, #0
  if (i < 5) {
    9fde:	2d04      	cmp	r5, #4
    9fe0:	b2eb      	uxtb	r3, r5
    9fe2:	d83f      	bhi.n	a064 <FatFile::getName8(char*, unsigned int)+0xf4>
    9fe4:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
    9fe6:	bb74      	cbnz	r4, a046 <FatFile::getName8(char*, unsigned int)+0xd6>
    9fe8:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
    9fec:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
    9fee:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9ff2:	d33e      	bcc.n	a072 <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
    9ff4:	b1a3      	cbz	r3, a020 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
    9ff6:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    9ff8:	4659      	mov	r1, fp
    9ffa:	4642      	mov	r2, r8
    9ffc:	f002 fe7e 	bl	ccfc <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    a000:	4683      	mov	fp, r0
    a002:	b1a0      	cbz	r0, a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    a004:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
    a006:	3501      	adds	r5, #1
    a008:	3702      	adds	r7, #2
    a00a:	2d0d      	cmp	r5, #13
    a00c:	d1e7      	bne.n	9fde <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    a00e:	f10a 0a01 	add.w	sl, sl, #1
    a012:	78f1      	ldrb	r1, [r6, #3]
    a014:	fa5f f38a 	uxtb.w	r3, sl
    a018:	fa1f fa8a 	uxth.w	sl, sl
    a01c:	4299      	cmp	r1, r3
    a01e:	d2c4      	bcs.n	9faa <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
    a020:	ebab 0009 	sub.w	r0, fp, r9
    a024:	46d9      	mov	r9, fp
  *str = '\0';
    a026:	2300      	movs	r3, #0
    a028:	f889 3000 	strb.w	r3, [r9]
  return str - name;
    a02c:	e003      	b.n	a036 <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
    a02e:	2300      	movs	r3, #0
  return 0;
    a030:	4618      	mov	r0, r3
  *name = 0;
    a032:	f889 3000 	strb.w	r3, [r9]
}
    a036:	b00b      	add	sp, #44	; 0x2c
    a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
    a03c:	f7ff ff4e 	bl	9edc <FatFile::getSFN(char*, unsigned int)>
}
    a040:	b00b      	add	sp, #44	; 0x2c
    a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0XDC00 <= c && c <= 0XDFFF;
    a046:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    a04a:	b289      	uxth	r1, r1
    a04c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a050:	d2ed      	bcs.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    a052:	4a0a      	ldr	r2, [pc, #40]	; (a07c <FatFile::getName8(char*, unsigned int)+0x10c>)
    a054:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a058:	ea02 2084 	and.w	r0, r2, r4, lsl #10
    a05c:	4318      	orrs	r0, r3
    a05e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
    a062:	e7c9      	b.n	9ff8 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
    a064:	2b0a      	cmp	r3, #10
    a066:	bf94      	ite	ls
    a068:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
    a06c:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
    a070:	e7b9      	b.n	9fe6 <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
    a072:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    a076:	d2da      	bcs.n	a02e <FatFile::getName8(char*, unsigned int)+0xbe>
    a078:	461c      	mov	r4, r3
    a07a:	e7c4      	b.n	a006 <FatFile::getName8(char*, unsigned int)+0x96>
    a07c:	000ffc00 	.word	0x000ffc00

0000a080 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    a080:	f7ff bf76 	b.w	9f70 <FatFile::getName8(char*, unsigned int)>

0000a084 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a088:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
    a08c:	b1c3      	cbz	r3, a0c0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
    a08e:	4681      	mov	r9, r0
    a090:	460c      	mov	r4, r1
    a092:	4615      	mov	r5, r2
    a094:	185e      	adds	r6, r3, r1
    a096:	e002      	b.n	a09e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
    a098:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
    a09a:	42b4      	cmp	r4, r6
    a09c:	d010      	beq.n	a0c0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
    a09e:	f8d9 3000 	ldr.w	r3, [r9]
    a0a2:	4621      	mov	r1, r4
    a0a4:	462a      	mov	r2, r5
    a0a6:	4648      	mov	r0, r9
    a0a8:	691b      	ldr	r3, [r3, #16]
    a0aa:	4798      	blx	r3
    a0ac:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
    a0ae:	463a      	mov	r2, r7
    a0b0:	4620      	mov	r0, r4
    a0b2:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
    a0b4:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
    a0b6:	2b00      	cmp	r3, #0
    a0b8:	d1ee      	bne.n	a098 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
    a0ba:	4618      	mov	r0, r3
    a0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
    a0c0:	2301      	movs	r3, #1
  }
    a0c2:	4618      	mov	r0, r3
    a0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a0c8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    a0c8:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    a0ca:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
    a0cc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    a0d0:	46a4      	mov	ip, r4
    a0d2:	bf28      	it	cs
    a0d4:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
    a0d8:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
    a0dc:	4281      	cmp	r1, r0
    a0de:	d207      	bcs.n	a0f0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
    a0e0:	f831 3b02 	ldrh.w	r3, [r1], #2
    a0e4:	b913      	cbnz	r3, a0ec <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
    a0e6:	6853      	ldr	r3, [r2, #4]
    a0e8:	3301      	adds	r3, #1
    a0ea:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a0ec:	4288      	cmp	r0, r1
    a0ee:	d8f7      	bhi.n	a0e0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
    a0f0:	eba4 040c 	sub.w	r4, r4, ip
    a0f4:	6014      	str	r4, [r2, #0]
}
    a0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    a0fa:	4770      	bx	lr

0000a0fc <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    a0fc:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    a0fe:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
    a100:	2c80      	cmp	r4, #128	; 0x80
    a102:	46a4      	mov	ip, r4
    a104:	bf28      	it	cs
    a106:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
    a10a:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
    a10e:	4281      	cmp	r1, r0
    a110:	d207      	bcs.n	a122 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
    a112:	f851 3b04 	ldr.w	r3, [r1], #4
    a116:	b913      	cbnz	r3, a11e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
    a118:	6853      	ldr	r3, [r2, #4]
    a11a:	3301      	adds	r3, #1
    a11c:	6053      	str	r3, [r2, #4]
  while (p < e) {
    a11e:	4288      	cmp	r0, r1
    a120:	d8f7      	bhi.n	a112 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
    a122:	eba4 040c 	sub.w	r4, r4, ip
    a126:	6014      	str	r4, [r2, #0]
}
    a128:	f85d 4b04 	ldr.w	r4, [sp], #4
    a12c:	4770      	bx	lr
    a12e:	bf00      	nop

0000a130 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a134:	79c3      	ldrb	r3, [r0, #7]
    a136:	4604      	mov	r4, r0
    a138:	460d      	mov	r5, r1
    a13a:	4617      	mov	r7, r2
  if (fatType() == 32) {
    a13c:	2b20      	cmp	r3, #32
    a13e:	d059      	beq.n	a1f4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
    a140:	2b10      	cmp	r3, #16
    a142:	d030      	beq.n	a1a6 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    a144:	2b0c      	cmp	r3, #12
    a146:	d151      	bne.n	a1ec <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a148:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
    a14a:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a14e:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a150:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a154:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a158:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a15c:	4648      	mov	r0, r9
    a15e:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a160:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a164:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a168:	0952      	lsrs	r2, r2, #5
    a16a:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
    a16e:	0052      	lsls	r2, r2, #1
    a170:	4641      	mov	r1, r8
    a172:	f002 fd75 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a176:	2800      	cmp	r0, #0
    a178:	d038      	beq.n	a1ec <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
    a17a:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
    a17e:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
    a180:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
    a182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a186:	d023      	beq.n	a1d0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
    a188:	4418      	add	r0, r3
    a18a:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a18c:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
    a18e:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
    a190:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    a194:	bf4c      	ite	mi
    a196:	091b      	lsrmi	r3, r3, #4
    a198:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
    a19c:	429a      	cmp	r2, r3
    a19e:	d240      	bcs.n	a222 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
    a1a0:	2000      	movs	r0, #0
}
    a1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1a6:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a1a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a1ac:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a1ae:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1b2:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a1b6:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1b8:	fab2 f282 	clz	r2, r2
    a1bc:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a1be:	0052      	lsls	r2, r2, #1
    a1c0:	f002 fd4e 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a1c4:	b190      	cbz	r0, a1ec <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a1c6:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
    a1c8:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
    a1cc:	5b43      	ldrh	r3, [r0, r5]
    a1ce:	e025      	b.n	a21c <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1d0:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
    a1d2:	f108 0101 	add.w	r1, r8, #1
    a1d6:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1d8:	f1a2 0202 	sub.w	r2, r2, #2
    a1dc:	fab2 f282 	clz	r2, r2
    a1e0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a1e2:	0052      	lsls	r2, r2, #1
    a1e4:	f002 fd3c 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a1e8:	2800      	cmp	r0, #0
    a1ea:	d1ce      	bne.n	a18a <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
    a1ec:	f04f 30ff 	mov.w	r0, #4294967295
}
    a1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1f4:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a1f6:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a1f8:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a1fc:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    a200:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a204:	fab2 f282 	clz	r2, r2
    a208:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
    a20a:	0052      	lsls	r2, r2, #1
    a20c:	f002 fd28 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a210:	2800      	cmp	r0, #0
    a212:	d0eb      	beq.n	a1ec <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a214:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
    a216:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    a21a:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
    a21c:	69e2      	ldr	r2, [r4, #28]
    a21e:	429a      	cmp	r2, r3
    a220:	d3be      	bcc.n	a1a0 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
    a222:	2001      	movs	r0, #1
  *value = next;
    a224:	603b      	str	r3, [r7, #0]
}
    a226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a22a:	bf00      	nop

0000a22c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
    a230:	79c3      	ldrb	r3, [r0, #7]
    a232:	4605      	mov	r5, r0
    a234:	460c      	mov	r4, r1
    a236:	4616      	mov	r6, r2
  if (fatType() == 32) {
    a238:	2b20      	cmp	r3, #32
    a23a:	d048      	beq.n	a2ce <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
    a23c:	2b10      	cmp	r3, #16
    a23e:	d02d      	beq.n	a29c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
    a240:	2b0c      	cmp	r3, #12
    a242:	d141      	bne.n	a2c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
    a244:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a248:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a24a:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
    a24e:	fa11 f184 	uxtah	r1, r1, r4
    a252:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    a256:	f3c1 2146 	ubfx	r1, r1, #9, #7
    a25a:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a25c:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    a25e:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a260:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a262:	4639      	mov	r1, r7
    a264:	bf14      	ite	ne
    a266:	2201      	movne	r2, #1
    a268:	2203      	moveq	r2, #3
    a26a:	f002 fcf9 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a26e:	b358      	cbz	r0, a2c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
    a270:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
    a274:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
    a278:	d03f      	beq.n	a2fa <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
    a27a:	5cc2      	ldrb	r2, [r0, r3]
    a27c:	f002 020f 	and.w	r2, r2, #15
    a280:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
    a284:	54c2      	strb	r2, [r0, r3]
    index++;
    a286:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a28c:	d03a      	beq.n	a304 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
    a28e:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a292:	4403      	add	r3, r0
    return true;
    a294:	2001      	movs	r0, #1
    pc[index] = tmp;
    a296:	701a      	strb	r2, [r3, #0]
}
    a298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a29c:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    a29e:	f3c1 2107 	ubfx	r1, r1, #8, #8
    a2a2:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a2a4:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a2a8:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
    a2aa:	4419      	add	r1, r3
    a2ac:	bf14      	ite	ne
    a2ae:	2201      	movne	r2, #1
    a2b0:	2203      	moveq	r2, #3
    a2b2:	f002 fcd5 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a2b6:	4603      	mov	r3, r0
    a2b8:	b130      	cbz	r0, a2c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    a2ba:	0064      	lsls	r4, r4, #1
    return true;
    a2bc:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
    a2be:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
    a2c2:	531e      	strh	r6, [r3, r4]
}
    a2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
    a2c8:	2000      	movs	r0, #0
}
    a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a2ce:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    a2d0:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
    a2d2:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a2d6:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a2d8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    a2dc:	bf14      	ite	ne
    a2de:	2201      	movne	r2, #1
    a2e0:	2203      	moveq	r2, #3
    a2e2:	f002 fcbd 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
    a2e6:	4603      	mov	r3, r0
    a2e8:	2800      	cmp	r0, #0
    a2ea:	d0ed      	beq.n	a2c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    a2ec:	00a4      	lsls	r4, r4, #2
    return true;
    a2ee:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
    a2f0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    a2f4:	511e      	str	r6, [r3, r4]
}
    a2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
    a2fa:	54c6      	strb	r6, [r0, r3]
    index++;
    a2fc:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
    a2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a302:	d115      	bne.n	a330 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a304:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
    a306:	1c79      	adds	r1, r7, #1
    a308:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    a30a:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
    a30c:	bf14      	ite	ne
    a30e:	2201      	movne	r2, #1
    a310:	2203      	moveq	r2, #3
    a312:	f002 fca5 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    a316:	4603      	mov	r3, r0
    a318:	2800      	cmp	r0, #0
    a31a:	d0d5      	beq.n	a2c8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
    a31c:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
    a320:	2c00      	cmp	r4, #0
    a322:	d1b7      	bne.n	a294 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    a324:	7819      	ldrb	r1, [r3, #0]
    a326:	f021 010f 	bic.w	r1, r1, #15
    a32a:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
    a32e:	e7b1      	b.n	a294 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
    a330:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
    a334:	4403      	add	r3, r0
    a336:	e7f5      	b.n	a324 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

0000a338 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    a33c:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a33e:	b082      	sub	sp, #8
    a340:	4605      	mov	r5, r0
    a342:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
    a344:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    a346:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
    a348:	d340      	bcc.n	a3cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
    a34a:	2701      	movs	r7, #1
    find++;
    a34c:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    a34e:	69eb      	ldr	r3, [r5, #28]
    a350:	aa01      	add	r2, sp, #4
    a352:	4628      	mov	r0, r5
    a354:	42a3      	cmp	r3, r4
    a356:	d205      	bcs.n	a364 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
    a358:	bb9f      	cbnz	r7, a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
    a35a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    a35c:	2701      	movs	r7, #1
    find++;
    a35e:	443c      	add	r4, r7
    if (find > m_lastCluster) {
    a360:	42a3      	cmp	r3, r4
    a362:	d32e      	bcc.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
    a364:	42a6      	cmp	r6, r4
    a366:	bf18      	it	ne
    a368:	2c01      	cmpne	r4, #1
    a36a:	4621      	mov	r1, r4
    a36c:	d929      	bls.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a36e:	f7ff fedf 	bl	a130 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
    a372:	2800      	cmp	r0, #0
    a374:	db25      	blt.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
    a376:	d0e9      	beq.n	a34c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a378:	9b01      	ldr	r3, [sp, #4]
    a37a:	2b00      	cmp	r3, #0
    a37c:	d1e6      	bne.n	a34c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
    a37e:	b107      	cbz	r7, a382 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
    a380:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
    a382:	69eb      	ldr	r3, [r5, #28]
    a384:	42a3      	cmp	r3, r4
    a386:	d31c      	bcc.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a388:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    a38c:	4621      	mov	r1, r4
    a38e:	4628      	mov	r0, r5
    a390:	f7ff ff4c 	bl	a22c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
    a394:	4607      	mov	r7, r0
    a396:	b1a0      	cbz	r0, a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
    a398:	b93e      	cbnz	r6, a3aa <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
    a39a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a39c:	2b00      	cmp	r3, #0
    a39e:	db01      	blt.n	a3a4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
    a3a0:	3b01      	subs	r3, #1
    a3a2:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
    a3a4:	f8c8 4000 	str.w	r4, [r8]
  return true;
    a3a8:	e00c      	b.n	a3c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
    a3aa:	2e01      	cmp	r6, #1
    a3ac:	d009      	beq.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a3ae:	69eb      	ldr	r3, [r5, #28]
    a3b0:	429e      	cmp	r6, r3
    a3b2:	d806      	bhi.n	a3c2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    a3b4:	4631      	mov	r1, r6
    a3b6:	4622      	mov	r2, r4
    a3b8:	4628      	mov	r0, r5
    a3ba:	f7ff ff37 	bl	a22c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
    a3be:	2800      	cmp	r0, #0
    a3c0:	d1eb      	bne.n	a39a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
    a3c2:	2700      	movs	r7, #0
}
    a3c4:	4638      	mov	r0, r7
    a3c6:	b002      	add	sp, #8
    a3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a3cc:	460c      	mov	r4, r1
    setStart = false;
    a3ce:	2700      	movs	r7, #0
    a3d0:	e7bc      	b.n	a34c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
    a3d2:	bf00      	nop

0000a3d4 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    a3d4:	2901      	cmp	r1, #1
    a3d6:	d90c      	bls.n	a3f2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    a3d8:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
    a3da:	69c4      	ldr	r4, [r0, #28]
    a3dc:	428c      	cmp	r4, r1
    a3de:	d303      	bcc.n	a3e8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
    a3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3e4:	f7ff bea4 	b.w	a130 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    a3e8:	f04f 30ff 	mov.w	r0, #4294967295
    a3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    a3f0:	4770      	bx	lr
    a3f2:	f04f 30ff 	mov.w	r0, #4294967295
    a3f6:	4770      	bx	lr

0000a3f8 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    a3f8:	b570      	push	{r4, r5, r6, lr}
    a3fa:	4605      	mov	r5, r0
    a3fc:	b082      	sub	sp, #8
    a3fe:	460c      	mov	r4, r1
    a400:	e01d      	b.n	a43e <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
    a402:	69eb      	ldr	r3, [r5, #28]
    a404:	429c      	cmp	r4, r3
    a406:	d81f      	bhi.n	a448 <FatPartition::freeChain(unsigned long)+0x50>
    a408:	f7ff fe92 	bl	a130 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
    a40c:	4606      	mov	r6, r0
    if (fg < 0) {
    a40e:	4621      	mov	r1, r4
    a410:	2200      	movs	r2, #0
    a412:	2e00      	cmp	r6, #0
    a414:	4628      	mov	r0, r5
    a416:	db17      	blt.n	a448 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
    a418:	69eb      	ldr	r3, [r5, #28]
    a41a:	429c      	cmp	r4, r3
    a41c:	d814      	bhi.n	a448 <FatPartition::freeChain(unsigned long)+0x50>
    a41e:	f7ff ff05 	bl	a22c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
    a422:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
    a424:	b180      	cbz	r0, a448 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
    a426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a428:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
    a42a:	f103 0301 	add.w	r3, r3, #1
    a42e:	bfa8      	it	ge
    a430:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    a432:	68eb      	ldr	r3, [r5, #12]
    a434:	42a3      	cmp	r3, r4
    cluster = next;
    a436:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
    a438:	bf88      	it	hi
    a43a:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
    a43c:	b12e      	cbz	r6, a44a <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
    a43e:	2c01      	cmp	r4, #1
    a440:	4621      	mov	r1, r4
    a442:	aa01      	add	r2, sp, #4
    a444:	4628      	mov	r0, r5
    a446:	d8dc      	bhi.n	a402 <FatPartition::freeChain(unsigned long)+0xa>
  return false;
    a448:	2000      	movs	r0, #0
}
    a44a:	b002      	add	sp, #8
    a44c:	bd70      	pop	{r4, r5, r6, pc}
    a44e:	bf00      	nop

0000a450 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    a450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a454:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    a456:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    a458:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
    a45a:	2800      	cmp	r0, #0
    a45c:	da1b      	bge.n	a496 <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
    a45e:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    a460:	2a0c      	cmp	r2, #12
    a462:	d11b      	bne.n	a49c <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    a464:	69f7      	ldr	r7, [r6, #28]
    a466:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
    a468:	2b02      	cmp	r3, #2
    a46a:	f240 80cd 	bls.w	a608 <FatPartition::freeClusterCount()+0x1b8>
    a46e:	2402      	movs	r4, #2
    uint32_t free = 0;
    a470:	2500      	movs	r5, #0
    a472:	4621      	mov	r1, r4
    a474:	aa02      	add	r2, sp, #8
    a476:	4630      	mov	r0, r6
    a478:	f7ff fe5a 	bl	a130 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
    a47c:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
    a47e:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
    a482:	db06      	blt.n	a492 <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
    a484:	d157      	bne.n	a536 <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
    a486:	42a7      	cmp	r7, r4
    a488:	461c      	mov	r4, r3
    a48a:	d05c      	beq.n	a546 <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
    a48c:	69f2      	ldr	r2, [r6, #28]
    a48e:	4293      	cmp	r3, r2
    a490:	d9ef      	bls.n	a472 <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
    a492:	f04f 30ff 	mov.w	r0, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
    a496:	b004      	add	sp, #16
    a498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
    a49c:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
    a49e:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
    a4a0:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
    a4a4:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
    a4a6:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
    a4a8:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
    a4aa:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a4ae:	f100 8085 	bmi.w	a5bc <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
    a4b2:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
    a4b4:	f04f 33ff 	mov.w	r3, #4294967295
  if (fatType() == FAT_TYPE_FAT32) {
    a4b8:	2a20      	cmp	r2, #32
    return m_buffer;
    a4ba:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
    a4be:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a4c2:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
    a4c6:	d042      	beq.n	a54e <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a4c8:	f8d6 8000 	ldr.w	r8, [r6]
    a4cc:	4b4f      	ldr	r3, [pc, #316]	; (a60c <FatPartition::freeClusterCount()+0x1bc>)
    a4ce:	f8d8 2000 	ldr.w	r2, [r8]
    a4d2:	f8d6 a018 	ldr.w	sl, [r6, #24]
    a4d6:	6995      	ldr	r5, [r2, #24]
    a4d8:	429d      	cmp	r5, r3
    a4da:	d178      	bne.n	a5ce <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
    a4dc:	2c00      	cmp	r4, #0
    a4de:	f000 8082 	beq.w	a5e6 <FatPartition::freeClusterCount()+0x196>
    a4e2:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
    a4e6:	6913      	ldr	r3, [r2, #16]
    a4e8:	4651      	mov	r1, sl
    a4ea:	463a      	mov	r2, r7
    a4ec:	4640      	mov	r0, r8
    a4ee:	4798      	blx	r3
    a4f0:	2800      	cmp	r0, #0
    a4f2:	d0ce      	beq.n	a492 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a4f4:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
    a4f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    a4fa:	468e      	mov	lr, r1
    a4fc:	bf28      	it	cs
    a4fe:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
    a502:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
    a506:	45bc      	cmp	ip, r7
    a508:	d90b      	bls.n	a522 <FatPartition::freeClusterCount()+0xd2>
    a50a:	9d03      	ldr	r5, [sp, #12]
    a50c:	463b      	mov	r3, r7
    a50e:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
    a510:	f833 4b02 	ldrh.w	r4, [r3], #2
    a514:	b90c      	cbnz	r4, a51a <FatPartition::freeClusterCount()+0xca>
    a516:	3501      	adds	r5, #1
    a518:	4602      	mov	r2, r0
  while (p < e) {
    a51a:	459c      	cmp	ip, r3
    a51c:	d8f8      	bhi.n	a510 <FatPartition::freeClusterCount()+0xc0>
    a51e:	b102      	cbz	r2, a522 <FatPartition::freeClusterCount()+0xd2>
    a520:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a522:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
    a526:	eba1 010e 	sub.w	r1, r1, lr
    a52a:	45d1      	cmp	r9, sl
    a52c:	9102      	str	r1, [sp, #8]
    a52e:	d05a      	beq.n	a5e6 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a530:	f8d8 2000 	ldr.w	r2, [r8]
    a534:	e7d7      	b.n	a4e6 <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
    a536:	9a02      	ldr	r2, [sp, #8]
    a538:	2a00      	cmp	r2, #0
    a53a:	d1a4      	bne.n	a486 <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
    a53c:	42a7      	cmp	r7, r4
        free++;
    a53e:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
    a542:	461c      	mov	r4, r3
    a544:	d1a2      	bne.n	a48c <FatPartition::freeClusterCount()+0x3c>
    return free;
    a546:	4628      	mov	r0, r5
}
    a548:	b004      	add	sp, #16
    a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a54e:	f8d6 a000 	ldr.w	sl, [r6]
    a552:	4b2e      	ldr	r3, [pc, #184]	; (a60c <FatPartition::freeClusterCount()+0x1bc>)
    a554:	f8da 2000 	ldr.w	r2, [sl]
    a558:	f8d6 9018 	ldr.w	r9, [r6, #24]
    a55c:	6995      	ldr	r5, [r2, #24]
    a55e:	429d      	cmp	r5, r3
    a560:	d146      	bne.n	a5f0 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
    a562:	2c00      	cmp	r4, #0
    a564:	d03f      	beq.n	a5e6 <FatPartition::freeClusterCount()+0x196>
    a566:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
    a56a:	6913      	ldr	r3, [r2, #16]
    a56c:	4649      	mov	r1, r9
    a56e:	463a      	mov	r2, r7
    a570:	4650      	mov	r0, sl
    a572:	4798      	blx	r3
    a574:	2800      	cmp	r0, #0
    a576:	d08c      	beq.n	a492 <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
    a578:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
    a57c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    a580:	46e6      	mov	lr, ip
    a582:	bf28      	it	cs
    a584:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
    a588:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
    a58c:	42ba      	cmp	r2, r7
    a58e:	d90b      	bls.n	a5a8 <FatPartition::freeClusterCount()+0x158>
    a590:	9d03      	ldr	r5, [sp, #12]
    a592:	463b      	mov	r3, r7
    a594:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
    a596:	f853 4b04 	ldr.w	r4, [r3], #4
    a59a:	b90c      	cbnz	r4, a5a0 <FatPartition::freeClusterCount()+0x150>
    a59c:	3501      	adds	r5, #1
    a59e:	4601      	mov	r1, r0
  while (p < e) {
    a5a0:	429a      	cmp	r2, r3
    a5a2:	d8f8      	bhi.n	a596 <FatPartition::freeClusterCount()+0x146>
    a5a4:	b101      	cbz	r1, a5a8 <FatPartition::freeClusterCount()+0x158>
    a5a6:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
    a5a8:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
    a5ac:	ebac 030e 	sub.w	r3, ip, lr
    a5b0:	45c8      	cmp	r8, r9
    a5b2:	9302      	str	r3, [sp, #8]
    a5b4:	d017      	beq.n	a5e6 <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
    a5b6:	f8da 2000 	ldr.w	r2, [sl]
    a5ba:	e7d6      	b.n	a56a <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
    a5bc:	f506 700e 	add.w	r0, r6, #568	; 0x238
    a5c0:	f002 fb22 	bl	cc08 <FsCache::sync()>
    a5c4:	2800      	cmp	r0, #0
    a5c6:	f43f af64 	beq.w	a492 <FatPartition::freeClusterCount()+0x42>
    a5ca:	79f2      	ldrb	r2, [r6, #7]
    a5cc:	e771      	b.n	a4b2 <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    a5ce:	4623      	mov	r3, r4
    a5d0:	ac02      	add	r4, sp, #8
    a5d2:	463a      	mov	r2, r7
    a5d4:	4651      	mov	r1, sl
    a5d6:	9401      	str	r4, [sp, #4]
    a5d8:	4640      	mov	r0, r8
    a5da:	4c0d      	ldr	r4, [pc, #52]	; (a610 <FatPartition::freeClusterCount()+0x1c0>)
    a5dc:	9400      	str	r4, [sp, #0]
    a5de:	47a8      	blx	r5
    a5e0:	2800      	cmp	r0, #0
    a5e2:	f43f af56 	beq.w	a492 <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
    a5e6:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
    a5e8:	6270      	str	r0, [r6, #36]	; 0x24
}
    a5ea:	b004      	add	sp, #16
    a5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    a5f0:	4623      	mov	r3, r4
    a5f2:	ac02      	add	r4, sp, #8
    a5f4:	463a      	mov	r2, r7
    a5f6:	4649      	mov	r1, r9
    a5f8:	9401      	str	r4, [sp, #4]
    a5fa:	4650      	mov	r0, sl
    a5fc:	4c05      	ldr	r4, [pc, #20]	; (a614 <FatPartition::freeClusterCount()+0x1c4>)
    a5fe:	9400      	str	r4, [sp, #0]
    a600:	47a8      	blx	r5
    a602:	2800      	cmp	r0, #0
    a604:	d1ef      	bne.n	a5e6 <FatPartition::freeClusterCount()+0x196>
    a606:	e744      	b.n	a492 <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
    a608:	2000      	movs	r0, #0
    a60a:	e744      	b.n	a496 <FatPartition::freeClusterCount()+0x46>
    a60c:	0000a085 	.word	0x0000a085
    a610:	0000a0c9 	.word	0x0000a0c9
    a614:	0000a0fd 	.word	0x0000a0fd

0000a618 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a618:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    a61a:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    a61c:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    a61e:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
    a620:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
    a622:	f04f 32ff 	mov.w	r2, #4294967295
  m_cache.init(dev);
    a626:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
    a62a:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
    a62c:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
    a62e:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
    a630:	62e1      	str	r1, [r4, #44]	; 0x2c
    a632:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    a636:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    a63a:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    a63e:	6362      	str	r2, [r4, #52]	; 0x34
    a640:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
    a644:	b1cd      	cbz	r5, a67a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    a646:	2d04      	cmp	r5, #4
    a648:	d901      	bls.n	a64e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    a64a:	2000      	movs	r0, #0
}
    a64c:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
    a64e:	461a      	mov	r2, r3
    a650:	4619      	mov	r1, r3
    a652:	4630      	mov	r0, r6
    a654:	f002 fb04 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
    a658:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    a65c:	f500 72df 	add.w	r2, r0, #446	; 0x1be
    a660:	442b      	add	r3, r5
    a662:	011d      	lsls	r5, r3, #4
    a664:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    a668:	2800      	cmp	r0, #0
    a66a:	d0ee      	beq.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a66c:	7919      	ldrb	r1, [r3, #4]
    a66e:	2900      	cmp	r1, #0
    a670:	d0eb      	beq.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a672:	5d52      	ldrb	r2, [r2, r5]
    a674:	0652      	lsls	r2, r2, #25
    a676:	d1e8      	bne.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    a678:	689d      	ldr	r5, [r3, #8]
    a67a:	2200      	movs	r2, #0
    a67c:	4629      	mov	r1, r5
    a67e:	4630      	mov	r0, r6
    a680:	f002 faee 	bl	cc60 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    a684:	2800      	cmp	r0, #0
    a686:	d0e0      	beq.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    a688:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    a68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    a690:	d1db      	bne.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    a692:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a694:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
    a696:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    a698:	2a01      	cmp	r2, #1
    a69a:	d8d6      	bhi.n	a64a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a69c:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a69e:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a6a0:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    a6a2:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    a6a4:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
    a6a6:	f04f 0300 	mov.w	r3, #0
    a6aa:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a6ac:	d044      	beq.n	a738 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
    a6ae:	2201      	movs	r2, #1
    a6b0:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
    a6b2:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a6b4:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
    a6b6:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a6b8:	4291      	cmp	r1, r2
    a6ba:	d004      	beq.n	a6c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
    a6bc:	2b08      	cmp	r3, #8
    a6be:	d1f7      	bne.n	a6b0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
    a6c0:	2000      	movs	r0, #0
    a6c2:	71a3      	strb	r3, [r4, #6]
}
    a6c4:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
    a6c6:	461e      	mov	r6, r3
    a6c8:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    a6ca:	8ac1      	ldrh	r1, [r0, #22]
    a6cc:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
    a6ce:	b909      	cbnz	r1, a6d4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
    a6d0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    a6d2:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a6d4:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    a6d6:	f8b0 3011 	ldrh.w	r3, [r0, #17]
    a6da:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    a6dc:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a6de:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    a6e0:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a6e2:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    a6e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a6ea:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
    a6ee:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    a6f2:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
    a6f4:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    a6f8:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
    a6fa:	b902      	cbnz	r2, a6fe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
    a6fc:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    a6fe:	1aed      	subs	r5, r5, r3
    a700:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
    a702:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
    a704:	1c5a      	adds	r2, r3, #1
    a706:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
    a708:	f04f 32ff 	mov.w	r2, #4294967295
    a70c:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    a70e:	f640 72f4 	movw	r2, #4084	; 0xff4
    a712:	4293      	cmp	r3, r2
    a714:	d90c      	bls.n	a730 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
    a716:	f64f 72f4 	movw	r2, #65524	; 0xfff4
    a71a:	4293      	cmp	r3, r2
    a71c:	d90a      	bls.n	a734 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
    a71e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    a720:	2320      	movs	r3, #32
    a722:	6222      	str	r2, [r4, #32]
  return true;
    a724:	2001      	movs	r0, #1
    m_fatType = 12;
    a726:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    a728:	6321      	str	r1, [r4, #48]	; 0x30
    a72a:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
    a72e:	bd70      	pop	{r4, r5, r6, pc}
    a730:	230c      	movs	r3, #12
    a732:	e7f7      	b.n	a724 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
    a734:	2310      	movs	r3, #16
    a736:	e7f5      	b.n	a724 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    a738:	461e      	mov	r6, r3
    a73a:	e7c6      	b.n	a6ca <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

0000a73c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    a73c:	b530      	push	{r4, r5, lr}
  FatFile* vwd() {return &m_vwd;}
    a73e:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    a742:	b08b      	sub	sp, #44	; 0x2c
  FatFile() {}
    a744:	2300      	movs	r3, #0
    a746:	460a      	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    a748:	a801      	add	r0, sp, #4
    a74a:	4621      	mov	r1, r4
    a74c:	9301      	str	r3, [sp, #4]
    a74e:	f7fe fa27 	bl	8ba0 <FatFile::open(FatFile*, char const*, int)>
    a752:	4605      	mov	r5, r0
    a754:	b198      	cbz	r0, a77e <FatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    a756:	f89d 3004 	ldrb.w	r3, [sp, #4]
    a75a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    a75e:	d011      	beq.n	a784 <FatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    a760:	f10d 0e04 	add.w	lr, sp, #4
    a764:	46a4      	mov	ip, r4
    a766:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a76a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a76e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    a772:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a776:	f8de 3000 	ldr.w	r3, [lr]
    a77a:	f8cc 3000 	str.w	r3, [ip]
  return true;

 fail:
  return false;
}
    a77e:	4628      	mov	r0, r5
    a780:	b00b      	add	sp, #44	; 0x2c
    a782:	bd30      	pop	{r4, r5, pc}
  return false;
    a784:	461d      	mov	r5, r3
}
    a786:	4628      	mov	r0, r5
    a788:	b00b      	add	sp, #44	; 0x2c
    a78a:	bd30      	pop	{r4, r5, pc}

0000a78c <FsBaseFile::operator=(FsBaseFile const&)>:
    *m_xFile = *from.m_xFile;
  }
}
//------------------------------------------------------------------------------
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
  if (this == &from) return *this;
    a78c:	4288      	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    a78e:	b570      	push	{r4, r5, r6, lr}
    a790:	4604      	mov	r4, r0
  if (this == &from) return *this;
    a792:	d021      	beq.n	a7d8 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
  if (m_fFile && m_fFile->close()) {
    a794:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a796:	460d      	mov	r5, r1
    a798:	b118      	cbz	r0, a7a2 <FsBaseFile::operator=(FsBaseFile const&)+0x16>
    a79a:	f7fe f8c5 	bl	8928 <FatFile::close()>
    a79e:	2800      	cmp	r0, #0
    a7a0:	d141      	bne.n	a826 <FsBaseFile::operator=(FsBaseFile const&)+0x9a>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
    a7a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a7a4:	b118      	cbz	r0, a7ae <FsBaseFile::operator=(FsBaseFile const&)+0x22>
    a7a6:	f7fc fbbd 	bl	6f24 <ExFatFile::close()>
    a7aa:	2800      	cmp	r0, #0
    a7ac:	d141      	bne.n	a832 <FsBaseFile::operator=(FsBaseFile const&)+0xa6>
  if (from.m_fFile) {
    a7ae:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a7b0:	b1a6      	cbz	r6, a7dc <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_fFile = new (m_fileMem) FatFile;
    a7b2:	4621      	mov	r1, r4
    a7b4:	2024      	movs	r0, #36	; 0x24
    a7b6:	f000 f8e9 	bl	a98c <operator new(unsigned int, unsigned long*)>
    a7ba:	2300      	movs	r3, #0
    a7bc:	4684      	mov	ip, r0
    a7be:	8003      	strh	r3, [r0, #0]
    a7c0:	7083      	strb	r3, [r0, #2]
    a7c2:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    a7c4:	6bad      	ldr	r5, [r5, #56]	; 0x38
    a7c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a7c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a7cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a7ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    a7d2:	682b      	ldr	r3, [r5, #0]
    a7d4:	f8cc 3000 	str.w	r3, [ip]
}
    a7d8:	4620      	mov	r0, r4
    a7da:	bd70      	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    a7dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d0fa      	beq.n	a7d8 <FsBaseFile::operator=(FsBaseFile const&)+0x4c>
    m_xFile = new (m_fileMem) ExFatFile;
    a7e2:	4621      	mov	r1, r4
    a7e4:	2038      	movs	r0, #56	; 0x38
    a7e6:	f000 f8d1 	bl	a98c <operator new(unsigned int, unsigned long*)>
    a7ea:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    a7ee:	8646      	strh	r6, [r0, #50]	; 0x32
    a7f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    a7f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a7f4:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    a7f8:	681e      	ldr	r6, [r3, #0]
    a7fa:	3310      	adds	r3, #16
    a7fc:	f853 5c0c 	ldr.w	r5, [r3, #-12]
    a800:	3010      	adds	r0, #16
    a802:	f853 1c08 	ldr.w	r1, [r3, #-8]
    a806:	f853 2c04 	ldr.w	r2, [r3, #-4]
    a80a:	4563      	cmp	r3, ip
    a80c:	f840 6c10 	str.w	r6, [r0, #-16]
    a810:	f840 5c0c 	str.w	r5, [r0, #-12]
    a814:	f840 1c08 	str.w	r1, [r0, #-8]
    a818:	f840 2c04 	str.w	r2, [r0, #-4]
    a81c:	d1ec      	bne.n	a7f8 <FsBaseFile::operator=(FsBaseFile const&)+0x6c>
    a81e:	681b      	ldr	r3, [r3, #0]
    a820:	6003      	str	r3, [r0, #0]
}
    a822:	4620      	mov	r0, r4
    a824:	bd70      	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    a826:	2300      	movs	r3, #0
    a828:	63a3      	str	r3, [r4, #56]	; 0x38
  if (from.m_fFile) {
    a82a:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a82c:	2e00      	cmp	r6, #0
    a82e:	d1c0      	bne.n	a7b2 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    a830:	e7d4      	b.n	a7dc <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    m_xFile = nullptr;
    a832:	2300      	movs	r3, #0
  if (from.m_fFile) {
    a834:	6bae      	ldr	r6, [r5, #56]	; 0x38
    m_xFile = nullptr;
    a836:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (from.m_fFile) {
    a838:	2e00      	cmp	r6, #0
    a83a:	d1ba      	bne.n	a7b2 <FsBaseFile::operator=(FsBaseFile const&)+0x26>
    a83c:	e7ce      	b.n	a7dc <FsBaseFile::operator=(FsBaseFile const&)+0x50>
    a83e:	bf00      	nop

0000a840 <FsBaseFile::close()>:
bool FsBaseFile::close() {
    a840:	b510      	push	{r4, lr}
    a842:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a844:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a846:	b110      	cbz	r0, a84e <FsBaseFile::close()+0xe>
    a848:	f7fe f86e 	bl	8928 <FatFile::close()>
    a84c:	b930      	cbnz	r0, a85c <FsBaseFile::close()+0x1c>
  if (m_xFile && m_xFile->close()) {
    a84e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a850:	b110      	cbz	r0, a858 <FsBaseFile::close()+0x18>
    a852:	f7fc fb67 	bl	6f24 <ExFatFile::close()>
    a856:	b920      	cbnz	r0, a862 <FsBaseFile::close()+0x22>
    return true;
  }
  return false;
    a858:	2000      	movs	r0, #0
}
    a85a:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
    a85c:	2300      	movs	r3, #0
    a85e:	63a3      	str	r3, [r4, #56]	; 0x38
}
    a860:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
    a862:	2300      	movs	r3, #0
    a864:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    a866:	bd10      	pop	{r4, pc}

0000a868 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    a868:	2900      	cmp	r1, #0
    a86a:	d052      	beq.n	a912 <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a870:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a872:	6b80      	ldr	r0, [r0, #56]	; 0x38
    a874:	460d      	mov	r5, r1
    a876:	4617      	mov	r7, r2
    a878:	461e      	mov	r6, r3
    a87a:	b110      	cbz	r0, a882 <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
    a87c:	f7fe f854 	bl	8928 <FatFile::close()>
    a880:	bba0      	cbnz	r0, a8ec <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
    a882:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a884:	b110      	cbz	r0, a88c <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
    a886:	f7fc fb4d 	bl	6f24 <ExFatFile::close()>
    a88a:	bbb8      	cbnz	r0, a8fc <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
    a88c:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    a890:	f1b8 0f00 	cmp.w	r8, #0
    a894:	d011      	beq.n	a8ba <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
    a896:	4621      	mov	r1, r4
    a898:	2024      	movs	r0, #36	; 0x24
    a89a:	f000 f877 	bl	a98c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a89e:	4633      	mov	r3, r6
    a8a0:	2600      	movs	r6, #0
    a8a2:	463a      	mov	r2, r7
    a8a4:	8006      	strh	r6, [r0, #0]
    a8a6:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    a8a8:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    a8aa:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
    a8ae:	f7fe f9f9 	bl	8ca4 <FatFile::open(FatVolume*, char const*, int)>
    a8b2:	bb58      	cbnz	r0, a90c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
    a8b4:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    a8ba:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    a8be:	b193      	cbz	r3, a8e6 <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
    a8c0:	4621      	mov	r1, r4
    a8c2:	2038      	movs	r0, #56	; 0x38
    a8c4:	f000 f862 	bl	a98c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a8c8:	4633      	mov	r3, r6
    a8ca:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
    a8ce:	463a      	mov	r2, r7
    a8d0:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    a8d4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    a8d6:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    a8da:	f7fc ff33 	bl	7744 <ExFatFile::open(ExFatVolume*, char const*, int)>
    a8de:	b9a8      	cbnz	r0, a90c <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
    a8e0:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    a8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    a8e6:	2000      	movs	r0, #0
}
    a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
    a8ec:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    a8ee:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
    a8f2:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
    a8f4:	f1b8 0f00 	cmp.w	r8, #0
    a8f8:	d1cd      	bne.n	a896 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    a8fa:	e7de      	b.n	a8ba <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
    a8fc:	2300      	movs	r3, #0
  if (vol->m_fVol) {
    a8fe:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
    a902:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
    a904:	f1b8 0f00 	cmp.w	r8, #0
    a908:	d1c5      	bne.n	a896 <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
    a90a:	e7d6      	b.n	a8ba <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
    a90c:	2001      	movs	r0, #1
}
    a90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    a912:	2000      	movs	r0, #0
}
    a914:	4770      	bx	lr
    a916:	bf00      	nop

0000a918 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a91a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    a91c:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    a91e:	460d      	mov	r5, r1
    a920:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
    a922:	b110      	cbz	r0, a92a <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
    a924:	f7fe f800 	bl	8928 <FatFile::close()>
    a928:	bb38      	cbnz	r0, a97a <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
    a92a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    a92c:	b110      	cbz	r0, a934 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    a92e:	f7fc faf9 	bl	6f24 <ExFatFile::close()>
    a932:	bb38      	cbnz	r0, a984 <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
    a934:	6bae      	ldr	r6, [r5, #56]	; 0x38
    a936:	b176      	cbz	r6, a956 <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
    a938:	4621      	mov	r1, r4
    a93a:	2024      	movs	r0, #36	; 0x24
    a93c:	f000 f826 	bl	a98c <operator new(unsigned int, unsigned long*)>
    a940:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a942:	463a      	mov	r2, r7
    a944:	8001      	strh	r1, [r0, #0]
    a946:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    a948:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    a94a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    a94c:	f7fe fd10 	bl	9370 <FatFile::openNext(FatFile*, int)>
    a950:	b988      	cbnz	r0, a976 <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
    a952:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
    a956:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    a958:	2800      	cmp	r0, #0
    a95a:	d0fb      	beq.n	a954 <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
    a95c:	4621      	mov	r1, r4
    a95e:	2038      	movs	r0, #56	; 0x38
    a960:	f000 f814 	bl	a98c <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a964:	463a      	mov	r2, r7
    a966:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    a96a:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    a96c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    a96e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
    a970:	f7fc fef0 	bl	7754 <ExFatFile::openNext(ExFatFile*, int)>
    a974:	b120      	cbz	r0, a980 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
    a976:	2001      	movs	r0, #1
}
    a978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
    a97a:	2300      	movs	r3, #0
    a97c:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    a97e:	e7d9      	b.n	a934 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
    a980:	63e0      	str	r0, [r4, #60]	; 0x3c
}
    a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
    a984:	2300      	movs	r3, #0
    a986:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
    a988:	e7d4      	b.n	a934 <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    a98a:	bf00      	nop

0000a98c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    a98c:	4608      	mov	r0, r1
    a98e:	4770      	bx	lr

0000a990 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    a994:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a996:	4604      	mov	r4, r0
    a998:	4698      	mov	r8, r3
  m_blockDev = blockDev;
    a99a:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    a99e:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    a9a2:	4601      	mov	r1, r0
    a9a4:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    a9a8:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
    a9aa:	f7ff ffef 	bl	a98c <operator new(unsigned int, unsigned long*)>
    if (!init(dev, part)) {
    a9ae:	4642      	mov	r2, r8
  ExFatPartition() {}
    a9b0:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    a9b4:	4605      	mov	r5, r0
    a9b6:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    a9ba:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
    a9be:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    a9c2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a9c6:	f7fd fe43 	bl	8650 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a9ca:	bba0      	cbnz	r0, aa36 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
    a9cc:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    a9ce:	4621      	mov	r1, r4
    a9d0:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    a9d4:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    a9d8:	f7ff ffd8 	bl	a98c <operator new(unsigned int, unsigned long*)>
  FatPartition() {}
    a9dc:	2302      	movs	r3, #2
    a9de:	71c6      	strb	r6, [r0, #7]
    if (!init(dev, part)) {
    a9e0:	4642      	mov	r2, r8
    a9e2:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
    a9e6:	4605      	mov	r5, r0
    a9e8:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
    a9ec:	7203      	strb	r3, [r0, #8]
    a9ee:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    a9f2:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    a9f6:	f7ff fe0f 	bl	a618 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    a9fa:	b938      	cbnz	r0, aa0c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
    a9fc:	2300      	movs	r3, #0
    a9fe:	4a1a      	ldr	r2, [pc, #104]	; (aa68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
    aa00:	4618      	mov	r0, r3
  m_cwv = nullptr;
    aa02:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
    aa04:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
    aa08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    aa0c:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    aa10:	4630      	mov	r0, r6
    aa12:	f7fd ff89 	bl	8928 <FatFile::close()>
    return m_vwd.openRoot(this);
    aa16:	4629      	mov	r1, r5
    aa18:	4630      	mov	r0, r6
    aa1a:	f7fe f979 	bl	8d10 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    aa1e:	2800      	cmp	r0, #0
    aa20:	d0ec      	beq.n	a9fc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
    aa22:	4b12      	ldr	r3, [pc, #72]	; (aa6c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
    aa24:	681a      	ldr	r2, [r3, #0]
    aa26:	b9aa      	cbnz	r2, aa54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
    aa28:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
    aa2a:	4b0f      	ldr	r3, [pc, #60]	; (aa68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    aa2c:	b1af      	cbz	r7, aa5a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
    aa2e:	2001      	movs	r0, #1
    m_cwv = this;
    aa30:	601c      	str	r4, [r3, #0]
}
    aa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_vwd.close();
    aa36:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    aa3a:	4630      	mov	r0, r6
    aa3c:	f7fc fa72 	bl	6f24 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    aa40:	4629      	mov	r1, r5
    aa42:	4630      	mov	r0, r6
    aa44:	f7fc fa78 	bl	6f38 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    aa48:	2800      	cmp	r0, #0
    aa4a:	d0bf      	beq.n	a9cc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
    aa4c:	4b08      	ldr	r3, [pc, #32]	; (aa70 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
    aa4e:	681a      	ldr	r2, [r3, #0]
    aa50:	2a00      	cmp	r2, #0
    aa52:	d0e9      	beq.n	aa28 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
    aa54:	4b04      	ldr	r3, [pc, #16]	; (aa68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
    aa56:	2f00      	cmp	r7, #0
    aa58:	d1e9      	bne.n	aa2e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    aa5a:	681a      	ldr	r2, [r3, #0]
    aa5c:	2a00      	cmp	r2, #0
    aa5e:	d0e6      	beq.n	aa2e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
    aa60:	2001      	movs	r0, #1
}
    aa62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa66:	bf00      	nop
    aa68:	20018d14 	.word	0x20018d14
    aa6c:	20018d18 	.word	0x20018d18
    aa70:	20018ce0 	.word	0x20018ce0

0000aa74 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    aa74:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
    aa76:	2500      	movs	r5, #0
    aa78:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    aa7c:	4604      	mov	r4, r0
    aa7e:	6045      	str	r5, [r0, #4]
    aa80:	7305      	strb	r5, [r0, #12]
    aa82:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
    aa84:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    aa88:	4d03      	ldr	r5, [pc, #12]	; (aa98 <FsVolume::open(char const*, int)+0x24>)
    aa8a:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    aa8e:	f7ff feeb 	bl	a868 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    aa92:	4620      	mov	r0, r4
    aa94:	bd70      	pop	{r4, r5, r6, pc}
    aa96:	bf00      	nop
    aa98:	20000d78 	.word	0x20000d78

0000aa9c <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    aa9c:	f04f 30ff 	mov.w	r0, #4294967295
    aaa0:	4770      	bx	lr
    aaa2:	bf00      	nop

0000aaa4 <SharedSpiCard::errorCode() const>:
  }
    aaa4:	7c40      	ldrb	r0, [r0, #17]
    aaa6:	4770      	bx	lr

0000aaa8 <SharedSpiCard::errorData() const>:
  }
    aaa8:	7d00      	ldrb	r0, [r0, #20]
    aaaa:	4770      	bx	lr

0000aaac <SharedSpiCard::type() const>:
  }
    aaac:	7d40      	ldrb	r0, [r0, #21]
    aaae:	4770      	bx	lr

0000aab0 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    aab0:	2001      	movs	r0, #1
    aab2:	4770      	bx	lr

0000aab4 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    aab4:	7f00      	ldrb	r0, [r0, #28]
    aab6:	4770      	bx	lr

0000aab8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    aab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aabc:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aabe:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    aac0:	4605      	mov	r5, r0
    aac2:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aac4:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    aac6:	4691      	mov	r9, r2
    aac8:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aaca:	d028      	beq.n	ab1e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
    aacc:	682b      	ldr	r3, [r5, #0]
    aace:	4621      	mov	r1, r4
    aad0:	4628      	mov	r0, r5
    aad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    aad4:	4798      	blx	r3
    aad6:	b198      	cbz	r0, ab00 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
    aad8:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
    aada:	f1b9 0f00 	cmp.w	r9, #0
    aade:	d012      	beq.n	ab06 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    aae0:	eb04 0809 	add.w	r8, r4, r9
    aae4:	e001      	b.n	aaea <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
    aae6:	45a0      	cmp	r8, r4
    aae8:	d00d      	beq.n	ab06 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
    aaea:	4639      	mov	r1, r7
    aaec:	4620      	mov	r0, r4
    aaee:	47b0      	blx	r6
    if (!writeData(src)) {
    aaf0:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
    aaf2:	4601      	mov	r1, r0
    if (!writeData(src)) {
    aaf4:	4628      	mov	r0, r5
    aaf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
    aaf8:	3401      	adds	r4, #1
    if (!writeData(src)) {
    aafa:	4798      	blx	r3
    aafc:	2800      	cmp	r0, #0
    aafe:	d1f2      	bne.n	aae6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    ab00:	2000      	movs	r0, #0
}
    ab02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
    ab06:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ab08:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ab0a:	444b      	add	r3, r9
    ab0c:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ab0e:	2800      	cmp	r0, #0
    ab10:	d1f7      	bne.n	ab02 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
    ab12:	682b      	ldr	r3, [r5, #0]
    ab14:	4628      	mov	r0, r5
    ab16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ab18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    ab1c:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ab1e:	6983      	ldr	r3, [r0, #24]
    ab20:	428b      	cmp	r3, r1
    ab22:	d1d3      	bne.n	aacc <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
    ab24:	e7d9      	b.n	aada <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
    ab26:	bf00      	nop

0000ab28 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    ab28:	4770      	bx	lr
    ab2a:	bf00      	nop

0000ab2c <SharedSpiCard::end()>:
    m_spiDriver.end();
    ab2c:	3004      	adds	r0, #4
    ab2e:	f002 b817 	b.w	cb60 <SdSpiArduinoDriver::end()>
    ab32:	bf00      	nop

0000ab34 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    ab34:	b510      	push	{r4, lr}
    ab36:	4604      	mov	r4, r0
    ab38:	2120      	movs	r1, #32
    ab3a:	f003 fc85 	bl	e448 <operator delete(void*, unsigned int)>
    ab3e:	4620      	mov	r0, r4
    ab40:	bd10      	pop	{r4, pc}
    ab42:	bf00      	nop

0000ab44 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab48:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ab4a:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    ab4c:	4605      	mov	r5, r0
    ab4e:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ab50:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    ab52:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    ab54:	d024      	beq.n	aba0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
    ab56:	682b      	ldr	r3, [r5, #0]
    ab58:	4631      	mov	r1, r6
    ab5a:	4628      	mov	r0, r5
    ab5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    ab5e:	4798      	blx	r3
    ab60:	b178      	cbz	r0, ab82 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
    ab62:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
    ab64:	b187      	cbz	r7, ab88 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
    ab66:	2600      	movs	r6, #0
    ab68:	e001      	b.n	ab6e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
    ab6a:	42b7      	cmp	r7, r6
    ab6c:	d00c      	beq.n	ab88 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
    ab6e:	682a      	ldr	r2, [r5, #0]
    ab70:	4621      	mov	r1, r4
    ab72:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
    ab74:	3601      	adds	r6, #1
    if (!writeData(src)) {
    ab76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
    ab78:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    ab7c:	4790      	blx	r2
    ab7e:	2800      	cmp	r0, #0
    ab80:	d1f3      	bne.n	ab6a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
    ab82:	2000      	movs	r0, #0
}
    ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
    ab88:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ab8a:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
    ab8c:	443b      	add	r3, r7
    ab8e:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
    ab90:	2800      	cmp	r0, #0
    ab92:	d1f7      	bne.n	ab84 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
    ab94:	682b      	ldr	r3, [r5, #0]
    ab96:	4628      	mov	r0, r5
    ab98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    ab9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    ab9e:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    aba0:	6983      	ldr	r3, [r0, #24]
    aba2:	428b      	cmp	r3, r1
    aba4:	d1d7      	bne.n	ab56 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    aba6:	e7dd      	b.n	ab64 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

0000aba8 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    abac:	4e20      	ldr	r6, [pc, #128]	; (ac30 <SharedSpiCard::writeStop()+0x88>)
    abae:	4607      	mov	r7, r0
    return m_spiDriver.receive();
    abb0:	f100 0804 	add.w	r8, r0, #4
    abb4:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
    abb6:	f505 7516 	add.w	r5, r5, #600	; 0x258
    abba:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    abbc:	e003      	b.n	abc6 <SharedSpiCard::writeStop()+0x1e>
    abbe:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    abc0:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    abc2:	041b      	lsls	r3, r3, #16
    abc4:	d410      	bmi.n	abe8 <SharedSpiCard::writeStop()+0x40>
    abc6:	4640      	mov	r0, r8
    abc8:	f001 ffce 	bl	cb68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    abcc:	28ff      	cmp	r0, #255	; 0xff
    abce:	4604      	mov	r4, r0
    abd0:	d1f5      	bne.n	abbe <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
    abd2:	21fd      	movs	r1, #253	; 0xfd
    abd4:	4640      	mov	r0, r8
    abd6:	f001 ffe5 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
    abda:	7cbb      	ldrb	r3, [r7, #18]
    abdc:	b9cb      	cbnz	r3, ac12 <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
    abde:	2300      	movs	r3, #0
    abe0:	2001      	movs	r0, #1
    abe2:	74fb      	strb	r3, [r7, #19]
}
    abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    abe8:	231e      	movs	r3, #30
  if (m_spiActive) {
    abea:	7cb8      	ldrb	r0, [r7, #18]
    abec:	747b      	strb	r3, [r7, #17]
    abee:	2800      	cmp	r0, #0
    abf0:	d0f8      	beq.n	abe4 <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
    abf2:	7c38      	ldrb	r0, [r7, #16]
    abf4:	2101      	movs	r1, #1
    abf6:	f001 fef7 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    abfa:	21ff      	movs	r1, #255	; 0xff
    abfc:	4640      	mov	r0, r8
    abfe:	f001 ffd1 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac02:	4640      	mov	r0, r8
    ac04:	f001 ff84 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ac08:	2300      	movs	r3, #0
  return false;
    ac0a:	4618      	mov	r0, r3
    m_spiActive = false;
    ac0c:	74bb      	strb	r3, [r7, #18]
}
    ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
    ac12:	2101      	movs	r1, #1
    ac14:	7c38      	ldrb	r0, [r7, #16]
    ac16:	f001 fee7 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ac1a:	4621      	mov	r1, r4
    ac1c:	4640      	mov	r0, r8
    ac1e:	f001 ffc1 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac22:	4640      	mov	r0, r8
    ac24:	f001 ff74 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ac28:	2300      	movs	r3, #0
    ac2a:	74bb      	strb	r3, [r7, #18]
}
    ac2c:	e7d7      	b.n	abde <SharedSpiCard::writeStop()+0x36>
    ac2e:	bf00      	nop
    ac30:	20019b88 	.word	0x20019b88

0000ac34 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
    ac38:	7cc3      	ldrb	r3, [r0, #19]
    ac3a:	2b01      	cmp	r3, #1
    ac3c:	d035      	beq.n	acaa <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
    ac3e:	7c86      	ldrb	r6, [r0, #18]
    ac40:	4604      	mov	r4, r0
    ac42:	b14e      	cbz	r6, ac58 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
    ac44:	3004      	adds	r0, #4
    ac46:	f001 ff8f 	bl	cb68 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    ac4a:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    ac4e:	bf18      	it	ne
    ac50:	2501      	movne	r5, #1
}
    ac52:	4628      	mov	r0, r5
    ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
    ac58:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
    ac5a:	f04f 0801 	mov.w	r8, #1
    ac5e:	4638      	mov	r0, r7
    ac60:	f001 ff4c 	bl	cafc <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    ac64:	4631      	mov	r1, r6
    ac66:	7c20      	ldrb	r0, [r4, #16]
    ac68:	f001 febe 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ac6c:	21ff      	movs	r1, #255	; 0xff
    ac6e:	4638      	mov	r0, r7
    ac70:	f001 ff98 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    ac74:	4638      	mov	r0, r7
    ac76:	f884 8012 	strb.w	r8, [r4, #18]
    ac7a:	f001 ff75 	bl	cb68 <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
    ac7e:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
    ac80:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
    ac84:	bf18      	it	ne
    ac86:	2501      	movne	r5, #1
  if (m_spiActive) {
    ac88:	2b00      	cmp	r3, #0
    ac8a:	d0e2      	beq.n	ac52 <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
    ac8c:	4641      	mov	r1, r8
    ac8e:	7c20      	ldrb	r0, [r4, #16]
    ac90:	f001 feaa 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ac94:	21ff      	movs	r1, #255	; 0xff
    ac96:	4638      	mov	r0, r7
    ac98:	f001 ff84 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ac9c:	4638      	mov	r0, r7
    ac9e:	f001 ff37 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
}
    aca2:	4628      	mov	r0, r5
    m_spiActive = false;
    aca4:	74a6      	strb	r6, [r4, #18]
}
    aca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
    acaa:	2500      	movs	r5, #0
}
    acac:	4628      	mov	r0, r5
    acae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acb2:	bf00      	nop

0000acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    acb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    acb8:	4f20      	ldr	r7, [pc, #128]	; (ad3c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
    acba:	4604      	mov	r4, r0
    acbc:	4688      	mov	r8, r1
    acbe:	4691      	mov	r9, r2
    acc0:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
    acc2:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
    acc4:	f505 7596 	add.w	r5, r5, #300	; 0x12c
    acc8:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
    acca:	e003      	b.n	acd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
    accc:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    acce:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
    acd0:	041b      	lsls	r3, r3, #16
    acd2:	d40d      	bmi.n	acf0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
    acd4:	4630      	mov	r0, r6
    acd6:	f001 ff47 	bl	cb68 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    acda:	28ff      	cmp	r0, #255	; 0xff
    acdc:	7520      	strb	r0, [r4, #20]
    acde:	d0f5      	beq.n	accc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
    ace0:	28fe      	cmp	r0, #254	; 0xfe
    ace2:	d01a      	beq.n	ad1a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
    ace4:	2318      	movs	r3, #24
  if (m_spiActive) {
    ace6:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
    ace8:	7463      	strb	r3, [r4, #17]
    acea:	b930      	cbnz	r0, acfa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
    acec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    acf0:	231d      	movs	r3, #29
  if (m_spiActive) {
    acf2:	7ca0      	ldrb	r0, [r4, #18]
    acf4:	7463      	strb	r3, [r4, #17]
    acf6:	2800      	cmp	r0, #0
    acf8:	d0f8      	beq.n	acec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
    acfa:	7c20      	ldrb	r0, [r4, #16]
    acfc:	2101      	movs	r1, #1
    acfe:	f001 fe73 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ad02:	21ff      	movs	r1, #255	; 0xff
    ad04:	4630      	mov	r0, r6
    ad06:	f001 ff4d 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ad0a:	4630      	mov	r0, r6
    ad0c:	f001 ff00 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    ad10:	2300      	movs	r3, #0
  return false;
    ad12:	4618      	mov	r0, r3
    m_spiActive = false;
    ad14:	74a3      	strb	r3, [r4, #18]
}
    ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
    ad1a:	464a      	mov	r2, r9
    ad1c:	4641      	mov	r1, r8
    ad1e:	4630      	mov	r0, r6
    ad20:	f001 ff2e 	bl	cb80 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    ad24:	7520      	strb	r0, [r4, #20]
    ad26:	b938      	cbnz	r0, ad38 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
    ad28:	4630      	mov	r0, r6
    ad2a:	f001 ff1d 	bl	cb68 <SdSpiArduinoDriver::receive()>
    ad2e:	4630      	mov	r0, r6
    ad30:	f001 ff1a 	bl	cb68 <SdSpiArduinoDriver::receive()>
  return true;
    ad34:	2001      	movs	r0, #1
    ad36:	e7d9      	b.n	acec <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    ad38:	2325      	movs	r3, #37	; 0x25
    ad3a:	e7d4      	b.n	ace6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
    ad3c:	20019b88 	.word	0x20019b88

0000ad40 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
    ad42:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
    ad44:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
    ad46:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
    ad48:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
    ad4a:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
    ad4c:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    ad4e:	f000 f85b 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    ad52:	b9b0      	cbnz	r0, ad82 <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
    ad54:	7ca6      	ldrb	r6, [r4, #18]
    ad56:	b91e      	cbnz	r6, ad60 <SharedSpiCard::readStop()+0x20>
  return true;
    ad58:	2601      	movs	r6, #1
}
    ad5a:	4630      	mov	r0, r6
    ad5c:	b003      	add	sp, #12
    ad5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    ad60:	4605      	mov	r5, r0
    ad62:	2101      	movs	r1, #1
    ad64:	7c20      	ldrb	r0, [r4, #16]
    ad66:	f001 fe3f 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ad6a:	1d20      	adds	r0, r4, #4
    ad6c:	21ff      	movs	r1, #255	; 0xff
    ad6e:	9001      	str	r0, [sp, #4]
    ad70:	f001 ff18 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ad74:	9801      	ldr	r0, [sp, #4]
    ad76:	f001 fecb 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    ad7a:	4630      	mov	r0, r6
    m_spiActive = false;
    ad7c:	74a5      	strb	r5, [r4, #18]
}
    ad7e:	b003      	add	sp, #12
    ad80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
    ad82:	2309      	movs	r3, #9
  if (m_spiActive) {
    ad84:	7ca6      	ldrb	r6, [r4, #18]
    ad86:	7463      	strb	r3, [r4, #17]
    ad88:	2e00      	cmp	r6, #0
    ad8a:	d0e6      	beq.n	ad5a <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
    ad8c:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    ad8e:	7c20      	ldrb	r0, [r4, #16]
    ad90:	2101      	movs	r1, #1
}
    ad92:	463e      	mov	r6, r7
    ad94:	f001 fe28 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    ad98:	21ff      	movs	r1, #255	; 0xff
    ad9a:	4628      	mov	r0, r5
    ad9c:	f001 ff02 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    ada0:	4628      	mov	r0, r5
    ada2:	f001 feb5 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
}
    ada6:	4630      	mov	r0, r6
    m_spiActive = false;
    ada8:	74a7      	strb	r7, [r4, #18]
}
    adaa:	b003      	add	sp, #12
    adac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adae:	bf00      	nop

0000adb0 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    adb0:	7cc2      	ldrb	r2, [r0, #19]
    adb2:	2a02      	cmp	r2, #2
    adb4:	d003      	beq.n	adbe <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
    adb6:	2a01      	cmp	r2, #1
    adb8:	d004      	beq.n	adc4 <SharedSpiCard::syncDevice()+0x14>
}
    adba:	2001      	movs	r0, #1
    adbc:	4770      	bx	lr
    return writeStop();
    adbe:	6803      	ldr	r3, [r0, #0]
    adc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    adc2:	4718      	bx	r3
    return readStop();
    adc4:	f7ff bfbc 	b.w	ad40 <SharedSpiCard::readStop()>

0000adc8 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    adc8:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    adca:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    adcc:	460d      	mov	r5, r1
    adce:	490d      	ldr	r1, [pc, #52]	; (ae04 <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
    add0:	4604      	mov	r4, r0
  if (!syncDevice()) {
    add2:	6a1a      	ldr	r2, [r3, #32]
    add4:	428a      	cmp	r2, r1
    add6:	d10c      	bne.n	adf2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
    add8:	7cc2      	ldrb	r2, [r0, #19]
    adda:	2a02      	cmp	r2, #2
    addc:	d004      	beq.n	ade8 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
    adde:	2a01      	cmp	r2, #1
    ade0:	d00b      	beq.n	adfa <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
    ade2:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
    ade4:	7725      	strb	r5, [r4, #28]
}
    ade6:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
    ade8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    adea:	4798      	blx	r3
  if (!syncDevice()) {
    adec:	2800      	cmp	r0, #0
    adee:	d1f8      	bne.n	ade2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
    adf0:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
    adf2:	4790      	blx	r2
    adf4:	2800      	cmp	r0, #0
    adf6:	d0fb      	beq.n	adf0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    adf8:	e7f3      	b.n	ade2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
    adfa:	f7ff ffa1 	bl	ad40 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
    adfe:	2800      	cmp	r0, #0
    ae00:	d0f6      	beq.n	adf0 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
    ae02:	e7ee      	b.n	ade2 <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    ae04:	0000adb1 	.word	0x0000adb1

0000ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    ae08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    ae0c:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    ae0e:	b082      	sub	sp, #8
    ae10:	460f      	mov	r7, r1
    ae12:	4935      	ldr	r1, [pc, #212]	; (aee8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
    ae14:	9201      	str	r2, [sp, #4]
    ae16:	4606      	mov	r6, r0
  if (!syncDevice()) {
    ae18:	6a1a      	ldr	r2, [r3, #32]
    ae1a:	428a      	cmp	r2, r1
    ae1c:	d15e      	bne.n	aedc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
    ae1e:	7cc2      	ldrb	r2, [r0, #19]
    ae20:	2a02      	cmp	r2, #2
    ae22:	d041      	beq.n	aea8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
    ae24:	2a01      	cmp	r2, #1
    ae26:	d05b      	beq.n	aee0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
    ae28:	7cb4      	ldrb	r4, [r6, #18]
    ae2a:	2c00      	cmp	r4, #0
    ae2c:	d047      	beq.n	aebe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
    ae2e:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
    ae30:	2f0c      	cmp	r7, #12
    ae32:	d011      	beq.n	ae58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    ae34:	f8df 80b4 	ldr.w	r8, [pc, #180]	; aeec <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
    ae38:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
    ae3c:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    ae40:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    ae42:	e004      	b.n	ae4e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
    ae44:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    ae48:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    ae4a:	041a      	lsls	r2, r3, #16
    ae4c:	d434      	bmi.n	aeb8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
    ae4e:	4628      	mov	r0, r5
    ae50:	f001 fe8a 	bl	cb68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    ae54:	28ff      	cmp	r0, #255	; 0xff
    ae56:	d1f5      	bne.n	ae44 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
    ae58:	f10d 0804 	add.w	r8, sp, #4
    ae5c:	ac02      	add	r4, sp, #8
    ae5e:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    ae62:	4628      	mov	r0, r5
    ae64:	f001 fe9e 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    ae68:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ae6c:	4628      	mov	r0, r5
    ae6e:	f001 fe99 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    ae72:	45a0      	cmp	r8, r4
    ae74:	d1f8      	bne.n	ae68 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    ae76:	2f00      	cmp	r7, #0
    ae78:	4628      	mov	r0, r5
    return m_spiDriver.receive();
    ae7a:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
    ae7e:	bf0c      	ite	eq
    ae80:	2195      	moveq	r1, #149	; 0x95
    ae82:	2187      	movne	r1, #135	; 0x87
    ae84:	f001 fe8e 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    ae88:	4628      	mov	r0, r5
    ae8a:	f001 fe6d 	bl	cb68 <SdSpiArduinoDriver::receive()>
    ae8e:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
    ae90:	3c01      	subs	r4, #1
    ae92:	f001 fe69 	bl	cb68 <SdSpiArduinoDriver::receive()>
    ae96:	0603      	lsls	r3, r0, #24
    ae98:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
    ae9a:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
    ae9c:	d501      	bpl.n	aea2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
    ae9e:	2c00      	cmp	r4, #0
    aea0:	d1f5      	bne.n	ae8e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
    aea2:	b002      	add	sp, #8
    aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
    aea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    aeaa:	4798      	blx	r3
  if (!syncDevice()) {
    aeac:	2800      	cmp	r0, #0
    aeae:	d1bb      	bne.n	ae28 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
    aeb0:	20ff      	movs	r0, #255	; 0xff
}
    aeb2:	b002      	add	sp, #8
    aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    aeb8:	2f00      	cmp	r7, #0
    aeba:	d0cd      	beq.n	ae58 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
    aebc:	e7f8      	b.n	aeb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
    aebe:	1d35      	adds	r5, r6, #4
    aec0:	4628      	mov	r0, r5
    aec2:	f001 fe1b 	bl	cafc <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    aec6:	4621      	mov	r1, r4
    aec8:	7c30      	ldrb	r0, [r6, #16]
    aeca:	f001 fd8d 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    aece:	21ff      	movs	r1, #255	; 0xff
    aed0:	4628      	mov	r0, r5
    aed2:	f001 fe67 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    aed6:	2301      	movs	r3, #1
    aed8:	74b3      	strb	r3, [r6, #18]
}
    aeda:	e7a9      	b.n	ae30 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
    aedc:	4790      	blx	r2
    aede:	e7e5      	b.n	aeac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
    aee0:	f7ff ff2e 	bl	ad40 <SharedSpiCard::readStop()>
    aee4:	e7e2      	b.n	aeac <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    aee6:	bf00      	nop
    aee8:	0000adb1 	.word	0x0000adb1
    aeec:	20019b88 	.word	0x20019b88

0000aef0 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    aef2:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    aef4:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    aef6:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    aef8:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
    aefa:	f7ff ff85 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    aefe:	b9e0      	cbnz	r0, af3a <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    af00:	1d37      	adds	r7, r6, #4
    af02:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
    af04:	4638      	mov	r0, r7
    af06:	f001 fe2f 	bl	cb68 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    af0a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    af0e:	42a5      	cmp	r5, r4
    af10:	d1f8      	bne.n	af04 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
    af12:	7cb4      	ldrb	r4, [r6, #18]
    af14:	b914      	cbnz	r4, af1c <SharedSpiCard::readOCR(unsigned long*)+0x2c>
    af16:	2401      	movs	r4, #1
}
    af18:	4620      	mov	r0, r4
    af1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
    af1c:	7c30      	ldrb	r0, [r6, #16]
    af1e:	2101      	movs	r1, #1
    af20:	f001 fd62 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af24:	21ff      	movs	r1, #255	; 0xff
    af26:	4638      	mov	r0, r7
    af28:	f001 fe3c 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af2c:	4638      	mov	r0, r7
    af2e:	f001 fdef 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af32:	2300      	movs	r3, #0
}
    af34:	4620      	mov	r0, r4
    m_spiActive = false;
    af36:	74b3      	strb	r3, [r6, #18]
}
    af38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
    af3a:	2312      	movs	r3, #18
  if (m_spiActive) {
    af3c:	7cb4      	ldrb	r4, [r6, #18]
    af3e:	7473      	strb	r3, [r6, #17]
    af40:	2c00      	cmp	r4, #0
    af42:	d0e9      	beq.n	af18 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
    af44:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
    af46:	7c30      	ldrb	r0, [r6, #16]
    af48:	2101      	movs	r1, #1
    af4a:	f001 fd4d 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af4e:	21ff      	movs	r1, #255	; 0xff
    af50:	4620      	mov	r0, r4
    af52:	f001 fe27 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af56:	4620      	mov	r0, r4
    af58:	f001 fdda 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af5c:	2300      	movs	r3, #0
  return false;
    af5e:	461c      	mov	r4, r3
    m_spiActive = false;
    af60:	74b3      	strb	r3, [r6, #18]
}
    af62:	4620      	mov	r0, r4
    af64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af66:	bf00      	nop

0000af68 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    af68:	b570      	push	{r4, r5, r6, lr}
    af6a:	4616      	mov	r6, r2
    af6c:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
    af6e:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    af70:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    af72:	f7ff ff49 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    af76:	b1b0      	cbz	r0, afa6 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
    af78:	231b      	movs	r3, #27
    af7a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    af7c:	7ca0      	ldrb	r0, [r4, #18]
    af7e:	b908      	cbnz	r0, af84 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
    af80:	b002      	add	sp, #8
    af82:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    af84:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    af86:	7c20      	ldrb	r0, [r4, #16]
    af88:	2101      	movs	r1, #1
    af8a:	f001 fd2d 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    af8e:	21ff      	movs	r1, #255	; 0xff
    af90:	4628      	mov	r0, r5
    af92:	f001 fe07 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    af96:	4628      	mov	r0, r5
    af98:	f001 fdba 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    af9c:	2300      	movs	r3, #0
  return false;
    af9e:	4618      	mov	r0, r3
    m_spiActive = false;
    afa0:	74a3      	strb	r3, [r4, #18]
}
    afa2:	b002      	add	sp, #8
    afa4:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    afa6:	4605      	mov	r5, r0
    afa8:	2210      	movs	r2, #16
    afaa:	4631      	mov	r1, r6
    afac:	4620      	mov	r0, r4
    afae:	f7ff fe81 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    afb2:	2800      	cmp	r0, #0
    afb4:	d0e2      	beq.n	af7c <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
    afb6:	7ca6      	ldrb	r6, [r4, #18]
    afb8:	2e00      	cmp	r6, #0
    afba:	d0e1      	beq.n	af80 <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
    afbc:	7c20      	ldrb	r0, [r4, #16]
    afbe:	2101      	movs	r1, #1
    afc0:	f001 fd12 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    afc4:	1d20      	adds	r0, r4, #4
    afc6:	21ff      	movs	r1, #255	; 0xff
    afc8:	9001      	str	r0, [sp, #4]
    afca:	f001 fdeb 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    afce:	9801      	ldr	r0, [sp, #4]
    afd0:	f001 fd9e 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
}
    afd4:	4630      	mov	r0, r6
    m_spiActive = false;
    afd6:	74a5      	strb	r5, [r4, #18]
}
    afd8:	b002      	add	sp, #8
    afda:	bd70      	pop	{r4, r5, r6, pc}

0000afdc <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    afdc:	6803      	ldr	r3, [r0, #0]
    afde:	4a25      	ldr	r2, [pc, #148]	; (b074 <SharedSpiCard::sectorCount()+0x98>)
    afe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    afe2:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
    afe4:	b500      	push	{lr}
    afe6:	b085      	sub	sp, #20
    afe8:	d10f      	bne.n	b00a <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
    afea:	466a      	mov	r2, sp
    afec:	2109      	movs	r1, #9
    afee:	f7ff ffbb 	bl	af68 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    aff2:	b138      	cbz	r0, b004 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    aff4:	f89d 3000 	ldrb.w	r3, [sp]
    aff8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    affc:	d008      	beq.n	b010 <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    affe:	2b40      	cmp	r3, #64	; 0x40
    b000:	d027      	beq.n	b052 <SharedSpiCard::sectorCount()+0x76>
    b002:	2000      	movs	r0, #0
}
    b004:	b005      	add	sp, #20
    b006:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    b00a:	4669      	mov	r1, sp
    b00c:	4798      	blx	r3
    b00e:	e7f0      	b.n	aff2 <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b010:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
    b014:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b018:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b01c:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b020:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
    b024:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b026:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b02a:	0080      	lsls	r0, r0, #2
    b02c:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b030:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b034:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b038:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b03c:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b040:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b044:	4413      	add	r3, r2
    b046:	3001      	adds	r0, #1
    b048:	3b07      	subs	r3, #7
    b04a:	4098      	lsls	r0, r3
}
    b04c:	b005      	add	sp, #20
    b04e:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b052:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b056:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b05a:	3001      	adds	r0, #1
    b05c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b064:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    b068:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    b06c:	0280      	lsls	r0, r0, #10
    b06e:	b005      	add	sp, #20
    b070:	f85d fb04 	ldr.w	pc, [sp], #4
    b074:	0000b399 	.word	0x0000b399

0000b078 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b078:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    b07a:	460a      	mov	r2, r1
    b07c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
    b080:	b083      	sub	sp, #12
    b082:	4d16      	ldr	r5, [pc, #88]	; (b0dc <SharedSpiCard::readStart(unsigned long)+0x64>)
    b084:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b086:	42ab      	cmp	r3, r5
    b088:	d124      	bne.n	b0d4 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
    b08a:	7d40      	ldrb	r0, [r0, #21]
    b08c:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    b08e:	f04f 0112 	mov.w	r1, #18
    b092:	4620      	mov	r0, r4
    sector <<= 9;
    b094:	bf18      	it	ne
    b096:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
    b098:	f7ff feb6 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b09c:	b920      	cbnz	r0, b0a8 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
    b09e:	2301      	movs	r3, #1
  return true;
    b0a0:	4618      	mov	r0, r3
  m_state = READ_STATE;
    b0a2:	74e3      	strb	r3, [r4, #19]
}
    b0a4:	b003      	add	sp, #12
    b0a6:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b0a8:	230c      	movs	r3, #12
  if (m_spiActive) {
    b0aa:	7ca0      	ldrb	r0, [r4, #18]
    b0ac:	7463      	strb	r3, [r4, #17]
    b0ae:	2800      	cmp	r0, #0
    b0b0:	d0f8      	beq.n	b0a4 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b0b2:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b0b4:	7c20      	ldrb	r0, [r4, #16]
    b0b6:	2101      	movs	r1, #1
    b0b8:	f001 fc96 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b0bc:	21ff      	movs	r1, #255	; 0xff
    b0be:	4628      	mov	r0, r5
    b0c0:	f001 fd70 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b0c4:	4628      	mov	r0, r5
    b0c6:	f001 fd23 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b0ca:	2300      	movs	r3, #0
}
    b0cc:	4618      	mov	r0, r3
    m_spiActive = false;
    b0ce:	74a3      	strb	r3, [r4, #18]
}
    b0d0:	b003      	add	sp, #12
    b0d2:	bd30      	pop	{r4, r5, pc}
    b0d4:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b0d6:	4798      	blx	r3
    b0d8:	9a01      	ldr	r2, [sp, #4]
    b0da:	e7d7      	b.n	b08c <SharedSpiCard::readStart(unsigned long)+0x14>
    b0dc:	0000aaad 	.word	0x0000aaad

0000b0e0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0e2:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    b0e4:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    b0e6:	4606      	mov	r6, r0
    b0e8:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b0ea:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    b0ec:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b0ee:	d102      	bne.n	b0f6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    b0f0:	6983      	ldr	r3, [r0, #24]
    b0f2:	428b      	cmp	r3, r1
    b0f4:	d005      	beq.n	b102 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
    b0f6:	4629      	mov	r1, r5
    b0f8:	4630      	mov	r0, r6
    b0fa:	f7ff ffbd 	bl	b078 <SharedSpiCard::readStart(unsigned long)>
    b0fe:	b180      	cbz	r0, b122 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
    b100:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b102:	b187      	cbz	r7, b126 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    b104:	2500      	movs	r5, #0
    b106:	e001      	b.n	b10c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b108:	42af      	cmp	r7, r5
    b10a:	d00c      	beq.n	b126 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
    b10c:	4621      	mov	r1, r4
    b10e:	f44f 7200 	mov.w	r2, #512	; 0x200
    b112:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
    b114:	3501      	adds	r5, #1
    b116:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
    b11a:	f7ff fdcb 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b11e:	2800      	cmp	r0, #0
    b120:	d1f2      	bne.n	b108 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
    b122:	2000      	movs	r0, #0
}
    b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
    b126:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b128:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b12a:	443b      	add	r3, r7
    b12c:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b12e:	2800      	cmp	r0, #0
    b130:	d1f8      	bne.n	b124 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
    b132:	4630      	mov	r0, r6
}
    b134:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    b138:	f7ff be02 	b.w	ad40 <SharedSpiCard::readStop()>

0000b13c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b13c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b140:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    b142:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b144:	4606      	mov	r6, r0
    b146:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    b148:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    b14a:	4615      	mov	r5, r2
    b14c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    b150:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
    b154:	d102      	bne.n	b15c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
    b156:	6983      	ldr	r3, [r0, #24]
    b158:	428b      	cmp	r3, r1
    b15a:	d005      	beq.n	b168 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
    b15c:	4621      	mov	r1, r4
    b15e:	4630      	mov	r0, r6
    b160:	f7ff ff8a 	bl	b078 <SharedSpiCard::readStart(unsigned long)>
    b164:	b1b0      	cbz	r0, b194 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
    b166:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
    b168:	f1bb 0f00 	cmp.w	fp, #0
    b16c:	d015      	beq.n	b19a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
    b16e:	eb04 0a0b 	add.w	sl, r4, fp
    b172:	e002      	b.n	b17a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
    b174:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
    b176:	45a2      	cmp	sl, r4
    b178:	d00f      	beq.n	b19a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
    b17a:	f44f 7200 	mov.w	r2, #512	; 0x200
    b17e:	4629      	mov	r1, r5
    b180:	4630      	mov	r0, r6
    b182:	f7ff fd97 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b186:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
    b188:	4642      	mov	r2, r8
    b18a:	4620      	mov	r0, r4
    b18c:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
    b18e:	3401      	adds	r4, #1
    if (readData(dst)) {
    b190:	2f00      	cmp	r7, #0
    b192:	d1ef      	bne.n	b174 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
    b194:	2000      	movs	r0, #0
}
    b196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
    b19a:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b19c:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
    b19e:	445b      	add	r3, fp
    b1a0:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
    b1a2:	2800      	cmp	r0, #0
    b1a4:	d1f7      	bne.n	b196 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    b1a6:	4630      	mov	r0, r6
}
    b1a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
    b1ac:	f7ff bdc8 	b.w	ad40 <SharedSpiCard::readStop()>

0000b1b0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
    b1b0:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    b1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b1b6:	695f      	ldr	r7, [r3, #20]
    b1b8:	4b16      	ldr	r3, [pc, #88]	; (b214 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
    b1ba:	429f      	cmp	r7, r3
    b1bc:	d11f      	bne.n	b1fe <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
    b1be:	7cc3      	ldrb	r3, [r0, #19]
    b1c0:	4604      	mov	r4, r0
    b1c2:	460d      	mov	r5, r1
    b1c4:	4616      	mov	r6, r2
    b1c6:	2b01      	cmp	r3, #1
    b1c8:	d102      	bne.n	b1d0 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
    b1ca:	6983      	ldr	r3, [r0, #24]
    b1cc:	4299      	cmp	r1, r3
    b1ce:	d005      	beq.n	b1dc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
    b1d0:	4629      	mov	r1, r5
    b1d2:	4620      	mov	r0, r4
    b1d4:	f7ff ff50 	bl	b078 <SharedSpiCard::readStart(unsigned long)>
    b1d8:	b170      	cbz	r0, b1f8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
    b1da:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
    b1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    b1e0:	4631      	mov	r1, r6
    b1e2:	4620      	mov	r0, r4
    b1e4:	f7ff fd66 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
    b1e8:	b130      	cbz	r0, b1f8 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
    b1ea:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b1ec:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
    b1ee:	3301      	adds	r3, #1
    b1f0:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    b1f2:	b148      	cbz	r0, b208 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
    b1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    b1f8:	2000      	movs	r0, #0
}
    b1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
    b1fe:	46bc      	mov	ip, r7
    b200:	2301      	movs	r3, #1
}
    b202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
    b206:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
    b208:	4620      	mov	r0, r4
}
    b20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
    b20e:	f7ff bd97 	b.w	ad40 <SharedSpiCard::readStop()>
    b212:	bf00      	nop
    b214:	0000b0e1 	.word	0x0000b0e1

0000b218 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b218:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    b21a:	460a      	mov	r2, r1
    b21c:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
    b220:	b083      	sub	sp, #12
    b222:	4d16      	ldr	r5, [pc, #88]	; (b27c <SharedSpiCard::writeStart(unsigned long)+0x64>)
    b224:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    b226:	42ab      	cmp	r3, r5
    b228:	d124      	bne.n	b274 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
    b22a:	7d40      	ldrb	r0, [r0, #21]
    b22c:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    b22e:	f04f 0119 	mov.w	r1, #25
    b232:	4620      	mov	r0, r4
    sector <<= 9;
    b234:	bf18      	it	ne
    b236:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
    b238:	f7ff fde6 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b23c:	b920      	cbnz	r0, b248 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
    b23e:	2302      	movs	r3, #2
  return true;
    b240:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
    b242:	74e3      	strb	r3, [r4, #19]
}
    b244:	b003      	add	sp, #12
    b246:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
    b248:	230e      	movs	r3, #14
  if (m_spiActive) {
    b24a:	7ca0      	ldrb	r0, [r4, #18]
    b24c:	7463      	strb	r3, [r4, #17]
    b24e:	2800      	cmp	r0, #0
    b250:	d0f8      	beq.n	b244 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
    b252:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b254:	7c20      	ldrb	r0, [r4, #16]
    b256:	2101      	movs	r1, #1
    b258:	f001 fbc6 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b25c:	21ff      	movs	r1, #255	; 0xff
    b25e:	4628      	mov	r0, r5
    b260:	f001 fca0 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b264:	4628      	mov	r0, r5
    b266:	f001 fc53 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b26a:	2300      	movs	r3, #0
}
    b26c:	4618      	mov	r0, r3
    m_spiActive = false;
    b26e:	74a3      	strb	r3, [r4, #18]
}
    b270:	b003      	add	sp, #12
    b272:	bd30      	pop	{r4, r5, pc}
    b274:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
    b276:	4798      	blx	r3
    b278:	9a01      	ldr	r2, [sp, #4]
    b27a:	e7d7      	b.n	b22c <SharedSpiCard::writeStart(unsigned long)+0x14>
    b27c:	0000aaad 	.word	0x0000aaad

0000b280 <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
    b280:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
    b286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    b288:	4617      	mov	r7, r2
    b28a:	4a41      	ldr	r2, [pc, #260]	; (b390 <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
    b28c:	b085      	sub	sp, #20
    b28e:	4604      	mov	r4, r0
    b290:	460e      	mov	r6, r1
    b292:	4293      	cmp	r3, r2
    b294:	d145      	bne.n	b322 <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
    b296:	466a      	mov	r2, sp
    b298:	2109      	movs	r1, #9
    b29a:	f7ff fe65 	bl	af68 <SharedSpiCard::readRegister(unsigned char, void*)>
    b29e:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
    b2a0:	b1b5      	cbz	r5, b2d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
    b2a2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b2a6:	065a      	lsls	r2, r3, #25
    b2a8:	d518      	bpl.n	b2dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    b2aa:	7d63      	ldrb	r3, [r4, #21]
    b2ac:	2b03      	cmp	r3, #3
    b2ae:	d001      	beq.n	b2b4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
    b2b0:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
    b2b2:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
    b2b4:	4632      	mov	r2, r6
    b2b6:	2120      	movs	r1, #32
    b2b8:	4620      	mov	r0, r4
    b2ba:	f7ff fda5 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    b2be:	b928      	cbnz	r0, b2cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
    b2c0:	463a      	mov	r2, r7
    b2c2:	2121      	movs	r1, #33	; 0x21
    b2c4:	4620      	mov	r0, r4
    b2c6:	f7ff fd9f 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b2ca:	b370      	cbz	r0, b32a <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
    b2cc:	2326      	movs	r3, #38	; 0x26
    b2ce:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b2d0:	7ca5      	ldrb	r5, [r4, #18]
    b2d2:	b99d      	cbnz	r5, b2fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
    b2d4:	4628      	mov	r0, r5
    b2d6:	b005      	add	sp, #20
    b2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    b2dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b2e0:	f89d 200b 	ldrb.w	r2, [sp, #11]
    b2e4:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    b2e6:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    b2ea:	1c7a      	adds	r2, r7, #1
    b2ec:	4332      	orrs	r2, r6
    b2ee:	4213      	tst	r3, r2
    b2f0:	d0db      	beq.n	b2aa <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
    b2f2:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
    b2f4:	7ca5      	ldrb	r5, [r4, #18]
    b2f6:	7463      	strb	r3, [r4, #17]
    b2f8:	2d00      	cmp	r5, #0
    b2fa:	d0eb      	beq.n	b2d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
    b2fc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b2fe:	7c20      	ldrb	r0, [r4, #16]
    b300:	2101      	movs	r1, #1
    b302:	f001 fb71 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b306:	21ff      	movs	r1, #255	; 0xff
    b308:	4628      	mov	r0, r5
    b30a:	f001 fc4b 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b30e:	4628      	mov	r0, r5
    b310:	f001 fbfe 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b314:	2300      	movs	r3, #0
  return false;
    b316:	461d      	mov	r5, r3
    m_spiActive = false;
    b318:	74a3      	strb	r3, [r4, #18]
}
    b31a:	4628      	mov	r0, r5
    b31c:	b005      	add	sp, #20
    b31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
    b322:	4669      	mov	r1, sp
    b324:	4798      	blx	r3
    b326:	4605      	mov	r5, r0
    b328:	e7ba      	b.n	b2a0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
    b32a:	4602      	mov	r2, r0
    b32c:	2126      	movs	r1, #38	; 0x26
    b32e:	4620      	mov	r0, r4
    b330:	f7ff fd6a 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b334:	2800      	cmp	r0, #0
    b336:	d1c9      	bne.n	b2cc <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
    b338:	f8df 8058 	ldr.w	r8, [pc, #88]	; b394 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
    b33c:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
    b340:	f104 0904 	add.w	r9, r4, #4
    b344:	f8d8 3000 	ldr.w	r3, [r8]
    b348:	441f      	add	r7, r3
    b34a:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
    b34c:	e004      	b.n	b358 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
    b34e:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
    b352:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
    b354:	041b      	lsls	r3, r3, #16
    b356:	d417      	bmi.n	b388 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
    b358:	4648      	mov	r0, r9
    b35a:	f001 fc05 	bl	cb68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b35e:	28ff      	cmp	r0, #255	; 0xff
    b360:	4606      	mov	r6, r0
    b362:	d1f4      	bne.n	b34e <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
    b364:	7ca3      	ldrb	r3, [r4, #18]
    b366:	2b00      	cmp	r3, #0
    b368:	d0b4      	beq.n	b2d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
    b36a:	2101      	movs	r1, #1
    b36c:	7c20      	ldrb	r0, [r4, #16]
  return true;
    b36e:	461d      	mov	r5, r3
    b370:	f001 fb3a 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b374:	4631      	mov	r1, r6
    b376:	4648      	mov	r0, r9
    b378:	f001 fc14 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b37c:	4648      	mov	r0, r9
    b37e:	f001 fbc7 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b382:	2300      	movs	r3, #0
    b384:	74a3      	strb	r3, [r4, #18]
}
    b386:	e7a5      	b.n	b2d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
    b388:	2328      	movs	r3, #40	; 0x28
    b38a:	7463      	strb	r3, [r4, #17]
    goto fail;
    b38c:	e7a0      	b.n	b2d0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
    b38e:	bf00      	nop
    b390:	0000b399 	.word	0x0000b399
    b394:	20019b88 	.word	0x20019b88

0000b398 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    b398:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b39a:	2200      	movs	r2, #0
    b39c:	b082      	sub	sp, #8
    b39e:	460e      	mov	r6, r1
    b3a0:	2109      	movs	r1, #9
    b3a2:	4604      	mov	r4, r0
    b3a4:	f7ff fd30 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b3a8:	b1b0      	cbz	r0, b3d8 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
    b3aa:	231b      	movs	r3, #27
    b3ac:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b3ae:	7ca0      	ldrb	r0, [r4, #18]
    b3b0:	b908      	cbnz	r0, b3b6 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
    b3b2:	b002      	add	sp, #8
    b3b4:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b3b6:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b3b8:	7c20      	ldrb	r0, [r4, #16]
    b3ba:	2101      	movs	r1, #1
    b3bc:	f001 fb14 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b3c0:	21ff      	movs	r1, #255	; 0xff
    b3c2:	4628      	mov	r0, r5
    b3c4:	f001 fbee 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b3c8:	4628      	mov	r0, r5
    b3ca:	f001 fba1 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b3ce:	2300      	movs	r3, #0
  return false;
    b3d0:	4618      	mov	r0, r3
    m_spiActive = false;
    b3d2:	74a3      	strb	r3, [r4, #18]
  }
    b3d4:	b002      	add	sp, #8
    b3d6:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b3d8:	4605      	mov	r5, r0
    b3da:	2210      	movs	r2, #16
    b3dc:	4631      	mov	r1, r6
    b3de:	4620      	mov	r0, r4
    b3e0:	f7ff fc68 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b3e4:	2800      	cmp	r0, #0
    b3e6:	d0e2      	beq.n	b3ae <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
    b3e8:	7ca6      	ldrb	r6, [r4, #18]
    b3ea:	2e00      	cmp	r6, #0
    b3ec:	d0e1      	beq.n	b3b2 <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
    b3ee:	7c20      	ldrb	r0, [r4, #16]
    b3f0:	2101      	movs	r1, #1
    b3f2:	f001 faf9 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b3f6:	1d20      	adds	r0, r4, #4
    b3f8:	21ff      	movs	r1, #255	; 0xff
    b3fa:	9001      	str	r0, [sp, #4]
    b3fc:	f001 fbd2 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b400:	9801      	ldr	r0, [sp, #4]
    b402:	f001 fb85 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
}
    b406:	4630      	mov	r0, r6
    m_spiActive = false;
    b408:	74a5      	strb	r5, [r4, #18]
  }
    b40a:	b002      	add	sp, #8
    b40c:	bd70      	pop	{r4, r5, r6, pc}
    b40e:	bf00      	nop

0000b410 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    b410:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
    b412:	2200      	movs	r2, #0
    b414:	b082      	sub	sp, #8
    b416:	460e      	mov	r6, r1
    b418:	210a      	movs	r1, #10
    b41a:	4604      	mov	r4, r0
    b41c:	f7ff fcf4 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b420:	b1b0      	cbz	r0, b450 <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
    b422:	231b      	movs	r3, #27
    b424:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b426:	7ca0      	ldrb	r0, [r4, #18]
    b428:	b908      	cbnz	r0, b42e <SharedSpiCard::readCID(CID*)+0x1e>
  }
    b42a:	b002      	add	sp, #8
    b42c:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b42e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b430:	7c20      	ldrb	r0, [r4, #16]
    b432:	2101      	movs	r1, #1
    b434:	f001 fad8 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b438:	21ff      	movs	r1, #255	; 0xff
    b43a:	4628      	mov	r0, r5
    b43c:	f001 fbb2 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b440:	4628      	mov	r0, r5
    b442:	f001 fb65 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b446:	2300      	movs	r3, #0
  return false;
    b448:	4618      	mov	r0, r3
    m_spiActive = false;
    b44a:	74a3      	strb	r3, [r4, #18]
  }
    b44c:	b002      	add	sp, #8
    b44e:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
    b450:	4605      	mov	r5, r0
    b452:	2210      	movs	r2, #16
    b454:	4631      	mov	r1, r6
    b456:	4620      	mov	r0, r4
    b458:	f7ff fc2c 	bl	acb4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    b45c:	2800      	cmp	r0, #0
    b45e:	d0e2      	beq.n	b426 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
    b460:	7ca6      	ldrb	r6, [r4, #18]
    b462:	2e00      	cmp	r6, #0
    b464:	d0e1      	beq.n	b42a <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
    b466:	7c20      	ldrb	r0, [r4, #16]
    b468:	2101      	movs	r1, #1
    b46a:	f001 fabd 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b46e:	1d20      	adds	r0, r4, #4
    b470:	21ff      	movs	r1, #255	; 0xff
    b472:	9001      	str	r0, [sp, #4]
    b474:	f001 fb96 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b478:	9801      	ldr	r0, [sp, #4]
    b47a:	f001 fb49 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
}
    b47e:	4630      	mov	r0, r6
    m_spiActive = false;
    b480:	74a5      	strb	r5, [r4, #18]
  }
    b482:	b002      	add	sp, #8
    b484:	bd70      	pop	{r4, r5, r6, pc}
    b486:	bf00      	nop

0000b488 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    b488:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
    b48a:	1d05      	adds	r5, r0, #4
    b48c:	4616      	mov	r6, r2
    b48e:	4604      	mov	r4, r0
    b490:	4628      	mov	r0, r5
    b492:	f001 fb87 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    b496:	f44f 7200 	mov.w	r2, #512	; 0x200
    b49a:	4631      	mov	r1, r6
    b49c:	4628      	mov	r0, r5
    b49e:	f001 fb8b 	bl	cbb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    b4a2:	21ff      	movs	r1, #255	; 0xff
    b4a4:	4628      	mov	r0, r5
    b4a6:	f001 fb7d 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    b4aa:	21ff      	movs	r1, #255	; 0xff
    b4ac:	4628      	mov	r0, r5
    b4ae:	f001 fb79 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    b4b2:	4628      	mov	r0, r5
    b4b4:	f001 fb58 	bl	cb68 <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b4b8:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
    b4bc:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    b4be:	2b05      	cmp	r3, #5
    b4c0:	d004      	beq.n	b4cc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
    b4c2:	2320      	movs	r3, #32
  if (m_spiActive) {
    b4c4:	7ca0      	ldrb	r0, [r4, #18]
    b4c6:	7463      	strb	r3, [r4, #17]
    b4c8:	b910      	cbnz	r0, b4d0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
    b4ca:	bd70      	pop	{r4, r5, r6, pc}
  return true;
    b4cc:	2001      	movs	r0, #1
}
    b4ce:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
    b4d0:	7c20      	ldrb	r0, [r4, #16]
    b4d2:	2101      	movs	r1, #1
    b4d4:	f001 fa88 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b4d8:	21ff      	movs	r1, #255	; 0xff
    b4da:	4628      	mov	r0, r5
    b4dc:	f001 fb62 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b4e0:	4628      	mov	r0, r5
    b4e2:	f001 fb15 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b4e6:	2300      	movs	r3, #0
}
    b4e8:	4618      	mov	r0, r3
    m_spiActive = false;
    b4ea:	74a3      	strb	r3, [r4, #18]
}
    b4ec:	bd70      	pop	{r4, r5, r6, pc}
    b4ee:	bf00      	nop

0000b4f0 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4f4:	4d17      	ldr	r5, [pc, #92]	; (b554 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
    b4f6:	4606      	mov	r6, r0
    b4f8:	460f      	mov	r7, r1
    return m_spiDriver.receive();
    b4fa:	f100 0804 	add.w	r8, r0, #4
    b4fe:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
    b500:	f504 7416 	add.w	r4, r4, #600	; 0x258
    b504:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
    b506:	e003      	b.n	b510 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    b508:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    b50a:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
    b50c:	041b      	lsls	r3, r3, #16
    b50e:	d40c      	bmi.n	b52a <SharedSpiCard::writeData(unsigned char const*)+0x3a>
    b510:	4640      	mov	r0, r8
    b512:	f001 fb29 	bl	cb68 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    b516:	28ff      	cmp	r0, #255	; 0xff
    b518:	d1f6      	bne.n	b508 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    b51a:	463a      	mov	r2, r7
    b51c:	21fc      	movs	r1, #252	; 0xfc
    b51e:	4630      	mov	r0, r6
    b520:	f7ff ffb2 	bl	b488 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b524:	b118      	cbz	r0, b52e <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
    b526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
    b52a:	2324      	movs	r3, #36	; 0x24
    b52c:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
    b52e:	7cb0      	ldrb	r0, [r6, #18]
    b530:	2800      	cmp	r0, #0
    b532:	d0f8      	beq.n	b526 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
    b534:	7c30      	ldrb	r0, [r6, #16]
    b536:	2101      	movs	r1, #1
    b538:	f001 fa56 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b53c:	21ff      	movs	r1, #255	; 0xff
    b53e:	4640      	mov	r0, r8
    b540:	f001 fb30 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b544:	4640      	mov	r0, r8
    b546:	f001 fae3 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b54a:	2300      	movs	r3, #0
}
    b54c:	4618      	mov	r0, r3
    m_spiActive = false;
    b54e:	74b3      	strb	r3, [r6, #18]
}
    b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b554:	20019b88 	.word	0x20019b88

0000b558 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    b558:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b55a:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    b55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b55e:	4616      	mov	r6, r2
    b560:	4a22      	ldr	r2, [pc, #136]	; (b5ec <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
    b562:	b082      	sub	sp, #8
    b564:	4604      	mov	r4, r0
    b566:	460d      	mov	r5, r1
    b568:	4293      	cmp	r3, r2
    b56a:	d13c      	bne.n	b5e6 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
    b56c:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
    b56e:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    b570:	f04f 0118 	mov.w	r1, #24
    b574:	4620      	mov	r0, r4
    sector <<= 9;
    b576:	bf18      	it	ne
    b578:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    b57a:	462a      	mov	r2, r5
    b57c:	f7ff fc44 	bl	ae08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    b580:	4605      	mov	r5, r0
    b582:	b1b0      	cbz	r0, b5b2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
    b584:	230d      	movs	r3, #13
    b586:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
    b588:	7ca0      	ldrb	r0, [r4, #18]
    b58a:	b908      	cbnz	r0, b590 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
    b58c:	b002      	add	sp, #8
    b58e:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
    b590:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
    b592:	7c20      	ldrb	r0, [r4, #16]
    b594:	2101      	movs	r1, #1
    b596:	f001 fa27 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b59a:	21ff      	movs	r1, #255	; 0xff
    b59c:	4628      	mov	r0, r5
    b59e:	f001 fb01 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b5a2:	4628      	mov	r0, r5
    b5a4:	f001 fab4 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    b5a8:	2300      	movs	r3, #0
  return false;
    b5aa:	4618      	mov	r0, r3
    m_spiActive = false;
    b5ac:	74a3      	strb	r3, [r4, #18]
}
    b5ae:	b002      	add	sp, #8
    b5b0:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
    b5b2:	4632      	mov	r2, r6
    b5b4:	21fe      	movs	r1, #254	; 0xfe
    b5b6:	4620      	mov	r0, r4
    b5b8:	f7ff ff66 	bl	b488 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    b5bc:	2800      	cmp	r0, #0
    b5be:	d0e3      	beq.n	b588 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
    b5c0:	7ca6      	ldrb	r6, [r4, #18]
    b5c2:	2e00      	cmp	r6, #0
    b5c4:	d0e2      	beq.n	b58c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
    b5c6:	7c20      	ldrb	r0, [r4, #16]
    b5c8:	2101      	movs	r1, #1
    b5ca:	f001 fa0d 	bl	c9e8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    b5ce:	1d20      	adds	r0, r4, #4
    b5d0:	21ff      	movs	r1, #255	; 0xff
    b5d2:	9001      	str	r0, [sp, #4]
    b5d4:	f001 fae6 	bl	cba4 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    b5d8:	9801      	ldr	r0, [sp, #4]
    b5da:	f001 fa99 	bl	cb10 <SdSpiArduinoDriver::deactivate()>
  return true;
    b5de:	4630      	mov	r0, r6
    m_spiActive = false;
    b5e0:	74a5      	strb	r5, [r4, #18]
}
    b5e2:	b002      	add	sp, #8
    b5e4:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
    b5e6:	4798      	blx	r3
    b5e8:	e7c1      	b.n	b56e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
    b5ea:	bf00      	nop
    b5ec:	0000aaad 	.word	0x0000aaad

0000b5f0 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    b5f0:	b410      	push	{r4}
  if (m_dedicatedSpi) {
    b5f2:	7f04      	ldrb	r4, [r0, #28]
    b5f4:	b134      	cbz	r4, b604 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    b5f6:	6804      	ldr	r4, [r0, #0]
    b5f8:	2301      	movs	r3, #1
    b5fa:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    b5fc:	46a4      	mov	ip, r4
}
    b5fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    b602:	4760      	bx	ip
}
    b604:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    b608:	f7ff bfa6 	b.w	b558 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

0000b60c <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    b60c:	2000      	movs	r0, #0
    b60e:	4770      	bx	lr

0000b610 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    b610:	2000      	movs	r0, #0
    b612:	4770      	bx	lr

0000b614 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    b614:	2000      	movs	r0, #0
    b616:	4770      	bx	lr

0000b618 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    b618:	4770      	bx	lr
    b61a:	bf00      	nop

0000b61c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    b61c:	4b08      	ldr	r3, [pc, #32]	; (b640 <sdIrs()+0x24>)
    b61e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b620:	4a08      	ldr	r2, [pc, #32]	; (b644 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    b622:	4809      	ldr	r0, [pc, #36]	; (b648 <sdIrs()+0x2c>)
static void sdIrs() {
    b624:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    b626:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    b628:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    b62a:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    b62c:	6812      	ldr	r2, [r2, #0]
}
    b62e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
    b632:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    b634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b636:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    b63a:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
    b63c:	7001      	strb	r1, [r0, #0]
}
    b63e:	4770      	bx	lr
    b640:	402c0000 	.word	0x402c0000
    b644:	20018cd8 	.word	0x20018cd8
    b648:	20019bcc 	.word	0x20019bcc

0000b64c <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    b64c:	4b03      	ldr	r3, [pc, #12]	; (b65c <isBusyDat()+0x10>)
    b64e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    b650:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    b654:	f3c0 6000 	ubfx	r0, r0, #24, #1
    b658:	4770      	bx	lr
    b65a:	bf00      	nop
    b65c:	402c0000 	.word	0x402c0000

0000b660 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    b660:	4b01      	ldr	r3, [pc, #4]	; (b668 <isBusyDMA()+0x8>)
    b662:	7818      	ldrb	r0, [r3, #0]
}
    b664:	4770      	bx	lr
    b666:	bf00      	nop
    b668:	20019bcc 	.word	0x20019bcc

0000b66c <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b66c:	4a2b      	ldr	r2, [pc, #172]	; (b71c <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b66e:	4b2c      	ldr	r3, [pc, #176]	; (b720 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b670:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b672:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b676:	492b      	ldr	r1, [pc, #172]	; (b724 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b678:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b67c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    b680:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    b682:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b684:	4c28      	ldr	r4, [pc, #160]	; (b728 <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    b686:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b68a:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
    b68e:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    b692:	089b      	lsrs	r3, r3, #2
    b694:	fbb1 fef3 	udiv	lr, r1, r3
    b698:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b69c:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
    b6a0:	d235      	bcs.n	b70e <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
    b6a2:	2301      	movs	r3, #1
    sdclkfs <<= 1;
    b6a4:	461e      	mov	r6, r3
    b6a6:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b6a8:	011a      	lsls	r2, r3, #4
    b6aa:	fbbe f2f2 	udiv	r2, lr, r2
    b6ae:	4282      	cmp	r2, r0
    b6b0:	d901      	bls.n	b6b6 <setSdclk(unsigned long)+0x4a>
    b6b2:	2bff      	cmp	r3, #255	; 0xff
    b6b4:	d9f6      	bls.n	b6a4 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b6b6:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b6ba:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b6bc:	4290      	cmp	r0, r2
    b6be:	d22a      	bcs.n	b716 <setSdclk(unsigned long)+0xaa>
    b6c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b6c4:	2201      	movs	r2, #1
    b6c6:	e000      	b.n	b6ca <setSdclk(unsigned long)+0x5e>
    b6c8:	46a4      	mov	ip, r4
    dvs++;
    b6ca:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b6cc:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
    b6d0:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b6d2:	fbbe f1fc 	udiv	r1, lr, ip
    b6d6:	4281      	cmp	r1, r0
    b6d8:	d917      	bls.n	b70a <setSdclk(unsigned long)+0x9e>
    b6da:	2a10      	cmp	r2, #16
    b6dc:	d1f4      	bne.n	b6c8 <setSdclk(unsigned long)+0x5c>
    b6de:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b6e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b6e4:	4911      	ldr	r1, [pc, #68]	; (b72c <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b6e6:	4a12      	ldr	r2, [pc, #72]	; (b730 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    b6e8:	fb03 fc0c 	mul.w	ip, r3, ip
    b6ec:	fbbe f3fc 	udiv	r3, lr, ip
    b6f0:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b6f2:	4b10      	ldr	r3, [pc, #64]	; (b734 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    b6f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    b6f6:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b6f8:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    b6fa:	4333      	orrs	r3, r6
    b6fc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b700:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    b702:	6a53      	ldr	r3, [r2, #36]	; 0x24
    b704:	071b      	lsls	r3, r3, #28
    b706:	d5fc      	bpl.n	b702 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    b708:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    b70a:	012d      	lsls	r5, r5, #4
    b70c:	e7e8      	b.n	b6e0 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    b70e:	4672      	mov	r2, lr
    b710:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
    b712:	2301      	movs	r3, #1
    b714:	e7d2      	b.n	b6bc <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    b716:	469c      	mov	ip, r3
    b718:	2500      	movs	r5, #0
    b71a:	e7e1      	b.n	b6e0 <setSdclk(unsigned long)+0x74>
    b71c:	400fc000 	.word	0x400fc000
    b720:	400d8000 	.word	0x400d8000
    b724:	5e69ec00 	.word	0x5e69ec00
    b728:	aaaaaaab 	.word	0xaaaaaaab
    b72c:	200123d0 	.word	0x200123d0
    b730:	402c0000 	.word	0x402c0000
    b734:	fff0000f 	.word	0xfff0000f

0000b738 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    b738:	4b01      	ldr	r3, [pc, #4]	; (b740 <SdioCard::errorCode() const+0x8>)
}
    b73a:	7818      	ldrb	r0, [r3, #0]
    b73c:	4770      	bx	lr
    b73e:	bf00      	nop
    b740:	20009558 	.word	0x20009558

0000b744 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    b744:	4b01      	ldr	r3, [pc, #4]	; (b74c <SdioCard::errorData() const+0x8>)
    b746:	6818      	ldr	r0, [r3, #0]
}
    b748:	4770      	bx	lr
    b74a:	bf00      	nop
    b74c:	20018cd8 	.word	0x20018cd8

0000b750 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    b750:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
    b752:	4c07      	ldr	r4, [pc, #28]	; (b770 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
    b754:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
    b756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b758:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    b75c:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
    b75e:	f8cc 1004 	str.w	r1, [ip, #4]
    b762:	f8cc 2008 	str.w	r2, [ip, #8]
    b766:	f8cc 300c 	str.w	r3, [ip, #12]
}
    b76a:	f85d 4b04 	ldr.w	r4, [sp], #4
    b76e:	4770      	bx	lr
    b770:	200185ec 	.word	0x200185ec

0000b774 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    b774:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
    b776:	4c07      	ldr	r4, [pc, #28]	; (b794 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
    b778:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
    b77a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    b77c:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
    b780:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
    b782:	f8cc 1004 	str.w	r1, [ip, #4]
    b786:	f8cc 2008 	str.w	r2, [ip, #8]
    b78a:	f8cc 300c 	str.w	r3, [ip, #12]
}
    b78e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b792:	4770      	bx	lr
    b794:	200185fc 	.word	0x200185fc

0000b798 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    b798:	4b02      	ldr	r3, [pc, #8]	; (b7a4 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    b79a:	2001      	movs	r0, #1
  *ocr = m_ocr;
    b79c:	681b      	ldr	r3, [r3, #0]
    b79e:	600b      	str	r3, [r1, #0]
}
    b7a0:	4770      	bx	lr
    b7a2:	bf00      	nop
    b7a4:	2001860c 	.word	0x2001860c

0000b7a8 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    b7a8:	4770      	bx	lr
    b7aa:	bf00      	nop

0000b7ac <SdioCard::~SdioCard()>:
    b7ac:	b510      	push	{r4, lr}
    b7ae:	4604      	mov	r4, r0
    b7b0:	210c      	movs	r1, #12
    b7b2:	f002 fe49 	bl	e448 <operator delete(void*, unsigned int)>
    b7b6:	4620      	mov	r0, r4
    b7b8:	bd10      	pop	{r4, pc}
    b7ba:	bf00      	nop

0000b7bc <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    b7bc:	4b04      	ldr	r3, [pc, #16]	; (b7d0 <SdioCard::type() const+0x14>)
    b7be:	781b      	ldrb	r3, [r3, #0]
    b7c0:	b123      	cbz	r3, b7cc <SdioCard::type() const+0x10>
    b7c2:	4b04      	ldr	r3, [pc, #16]	; (b7d4 <SdioCard::type() const+0x18>)
    b7c4:	7818      	ldrb	r0, [r3, #0]
    b7c6:	3002      	adds	r0, #2
    b7c8:	b2c0      	uxtb	r0, r0
    b7ca:	4770      	bx	lr
    b7cc:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    b7ce:	4770      	bx	lr
    b7d0:	20019bc9 	.word	0x20019bc9
    b7d4:	20019bca 	.word	0x20019bca

0000b7d8 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    b7d8:	4b18      	ldr	r3, [pc, #96]	; (b83c <SdioCard::sectorCount()+0x64>)
    b7da:	781a      	ldrb	r2, [r3, #0]
    b7dc:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
    b7e0:	d00f      	beq.n	b802 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
    b7e2:	2a40      	cmp	r2, #64	; 0x40
    b7e4:	d001      	beq.n	b7ea <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
    b7e6:	2000      	movs	r0, #0
}
    b7e8:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b7ea:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b7ec:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b7ee:	7a19      	ldrb	r1, [r3, #8]
    b7f0:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    b7f2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    b7f6:	eb00 4003 	add.w	r0, r0, r3, lsl #16
    b7fa:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    b7fe:	0280      	lsls	r0, r0, #10
    b800:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b802:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b804:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b806:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    b808:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b80c:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    b810:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b814:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
    b816:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b818:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
    b81c:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
    b81e:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    b822:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
    b826:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    b828:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
    b82c:	3001      	adds	r0, #1
    b82e:	f003 030f 	and.w	r3, r3, #15
    b832:	4413      	add	r3, r2
    b834:	3b07      	subs	r3, #7
    b836:	4098      	lsls	r0, r3
}
    b838:	f85d fb04 	ldr.w	pc, [sp], #4
    b83c:	200185fc 	.word	0x200185fc

0000b840 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b840:	4a40      	ldr	r2, [pc, #256]	; (b944 <initSDHC()+0x104>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b842:	2005      	movs	r0, #5
    b844:	4940      	ldr	r1, [pc, #256]	; (b948 <initSDHC()+0x108>)
static void initSDHC() {
    b846:	b538      	push	{r3, r4, r5, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b848:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b84c:	4b3f      	ldr	r3, [pc, #252]	; (b94c <initSDHC()+0x10c>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b84e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
    b852:	4d3f      	ldr	r5, [pc, #252]	; (b950 <initSDHC()+0x110>)
  CCM_ANALOG_PFD_528 |= (1 << 7);
    b854:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    b858:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b85c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
    b860:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    b864:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b868:	f044 0418 	orr.w	r4, r4, #24
    b86c:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    b870:	f8d2 4100 	ldr.w	r4, [r2, #256]	; 0x100
    b874:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    b878:	f8c2 4100 	str.w	r4, [r2, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    b87c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    b880:	f042 020c 	orr.w	r2, r2, #12
    b884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    b888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b88a:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    b88e:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    b890:	69da      	ldr	r2, [r3, #28]
    b892:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    b896:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    b898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    b89a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b89e:	625a      	str	r2, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8a0:	f8c1 01cc 	str.w	r0, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b8a4:	f8c1 01d0 	str.w	r0, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b8a8:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b8ac:	f8c1 01c0 	str.w	r0, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b8b0:	f8c1 01c4 	str.w	r0, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b8b4:	f8c1 01c8 	str.w	r0, [r1, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
    b8b8:	6caa      	ldr	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b8ba:	4b26      	ldr	r3, [pc, #152]	; (b954 <initSDHC()+0x114>)
  SDHC_MIX_CTRL |= 0x80000000;
    b8bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b8c0:	64aa      	str	r2, [r5, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    b8c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    b8c4:	4313      	orrs	r3, r2
    b8c6:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    b8c8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    b8ca:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
    b8ce:	d1fb      	bne.n	b8c8 <initSDHC()+0x88>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    b8d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b8d4:	f7ff feca 	bl	b66c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8d8:	4b1b      	ldr	r3, [pc, #108]	; (b948 <initSDHC()+0x108>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b8da:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b8de:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    b8e2:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b8e6:	481c      	ldr	r0, [pc, #112]	; (b958 <initSDHC()+0x118>)
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    b8e8:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    b8ec:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    b8f0:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    b8f4:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    b8f8:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    b8fc:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    b900:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    b904:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    b908:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    b90c:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    b910:	4912      	ldr	r1, [pc, #72]	; (b95c <initSDHC()+0x11c>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    b912:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
    b916:	4b12      	ldr	r3, [pc, #72]	; (b960 <initSDHC()+0x120>)
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    b918:	6368      	str	r0, [r5, #52]	; 0x34
    b91a:	f8c1 31f8 	str.w	r3, [r1, #504]	; 0x1f8
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b91e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    b926:	490f      	ldr	r1, [pc, #60]	; (b964 <initSDHC()+0x124>)
    b928:	2060      	movs	r0, #96	; 0x60
    b92a:	f881 006e 	strb.w	r0, [r1, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    b92e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b932:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b934:	4a06      	ldr	r2, [pc, #24]	; (b950 <initSDHC()+0x110>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    b936:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    b93a:	62eb      	str	r3, [r5, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    b93c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    b93e:	011b      	lsls	r3, r3, #4
    b940:	d4fc      	bmi.n	b93c <initSDHC()+0xfc>
}
    b942:	bd38      	pop	{r3, r4, r5, pc}
    b944:	400d8000 	.word	0x400d8000
    b948:	401f8000 	.word	0x401f8000
    b94c:	400fc000 	.word	0x400fc000
    b950:	402c0000 	.word	0x402c0000
    b954:	01008000 	.word	0x01008000
    b958:	117f000b 	.word	0x117f000b
    b95c:	20009800 	.word	0x20009800
    b960:	0000b61d 	.word	0x0000b61d
    b964:	e000e400 	.word	0xe000e400

0000b968 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
    b968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
    b96c:	f002 fa22 	bl	ddb4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b970:	4e17      	ldr	r6, [pc, #92]	; (b9d0 <waitTransferComplete() [clone .part.0]+0x68>)
    b972:	4d18      	ldr	r5, [pc, #96]	; (b9d4 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
    b974:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b976:	f8df 8074 	ldr.w	r8, [pc, #116]	; b9ec <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
    b97a:	e004      	b.n	b986 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    b97c:	f002 fa1a 	bl	ddb4 <micros>
    b980:	1bc0      	subs	r0, r0, r7
    b982:	4540      	cmp	r0, r8
    b984:	d81b      	bhi.n	b9be <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    b986:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
    b988:	402c      	ands	r4, r5
    b98a:	d0f7      	beq.n	b97c <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
    b98c:	4a12      	ldr	r2, [pc, #72]	; (b9d8 <waitTransferComplete() [clone .part.0]+0x70>)
    b98e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    b990:	4b12      	ldr	r3, [pc, #72]	; (b9dc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    b992:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    b994:	6b32      	ldr	r2, [r6, #48]	; 0x30
    b996:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b998:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b99a:	4a11      	ldr	r2, [pc, #68]	; (b9e0 <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
    b99c:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b99e:	681b      	ldr	r3, [r3, #0]
    b9a0:	4213      	tst	r3, r2
    b9a2:	d009      	beq.n	b9b8 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
    b9a4:	490f      	ldr	r1, [pc, #60]	; (b9e4 <waitTransferComplete() [clone .part.0]+0x7c>)
    b9a6:	241f      	movs	r4, #31
  m_errorLine = line;
    b9a8:	4b0f      	ldr	r3, [pc, #60]	; (b9e8 <waitTransferComplete() [clone .part.0]+0x80>)
    b9aa:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    b9ae:	2000      	movs	r0, #0
  m_errorCode = code;
    b9b0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    b9b2:	601a      	str	r2, [r3, #0]
}
    b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
    b9b8:	2001      	movs	r0, #1
}
    b9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
    b9be:	4a06      	ldr	r2, [pc, #24]	; (b9d8 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
    b9c0:	4b06      	ldr	r3, [pc, #24]	; (b9dc <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
    b9c2:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
    b9c4:	6b32      	ldr	r2, [r6, #48]	; 0x30
    b9c6:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    b9c8:	681b      	ldr	r3, [r3, #0]
    b9ca:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    b9cc:	e7ea      	b.n	b9a4 <waitTransferComplete() [clone .part.0]+0x3c>
    b9ce:	bf00      	nop
    b9d0:	402c0000 	.word	0x402c0000
    b9d4:	117f0002 	.word	0x117f0002
    b9d8:	20019bcb 	.word	0x20019bcb
    b9dc:	20018cd8 	.word	0x20018cd8
    b9e0:	117f0000 	.word	0x117f0000
    b9e4:	20009558 	.word	0x20009558
    b9e8:	200123d8 	.word	0x200123d8
    b9ec:	000f4240 	.word	0x000f4240

0000b9f0 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
    b9f4:	4c26      	ldr	r4, [pc, #152]	; (ba90 <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
    b9f6:	460f      	mov	r7, r1
  if (!m_transferActive) {
    b9f8:	7823      	ldrb	r3, [r4, #0]
    b9fa:	2b00      	cmp	r3, #0
    b9fc:	d138      	bne.n	ba70 <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    b9fe:	4b25      	ldr	r3, [pc, #148]	; (ba94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ba00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    ba02:	05d2      	lsls	r2, r2, #23
    ba04:	d52b      	bpl.n	ba5e <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ba06:	4d23      	ldr	r5, [pc, #140]	; (ba94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ba08:	f8df 8094 	ldr.w	r8, [pc, #148]	; baa0 <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    ba0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ba0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ba12:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
    ba14:	f002 f9ce 	bl	ddb4 <micros>
    ba18:	4606      	mov	r6, r0
  while (fcn()) {
    ba1a:	e004      	b.n	ba26 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    ba1c:	f002 f9ca 	bl	ddb4 <micros>
    ba20:	1b80      	subs	r0, r0, r6
    ba22:	4540      	cmp	r0, r8
    ba24:	d82a      	bhi.n	ba7c <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    ba26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
    ba28:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
    ba2c:	d0f6      	beq.n	ba1c <SdioCard::writeData(unsigned char const*)+0x2c>
    ba2e:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    ba32:	4818      	ldr	r0, [pc, #96]	; (ba94 <SdioCard::writeData(unsigned char const*)+0xa4>)
    ba34:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    ba38:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ba3a:	055b      	lsls	r3, r3, #21
    ba3c:	d5fc      	bpl.n	ba38 <SdioCard::writeData(unsigned char const*)+0x48>
    ba3e:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    ba42:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ba46:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
    ba48:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    ba4a:	d1fa      	bne.n	ba42 <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    ba4c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    ba50:	45bc      	cmp	ip, r7
    ba52:	d1f1      	bne.n	ba38 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
    ba54:	2301      	movs	r3, #1
  return true;
    ba56:	4618      	mov	r0, r3
  m_transferActive = true;
    ba58:	7023      	strb	r3, [r4, #0]
}
    ba5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    ba5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ba60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ba64:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    ba66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ba68:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    ba6c:	629a      	str	r2, [r3, #40]	; 0x28
    ba6e:	e7ca      	b.n	ba06 <SdioCard::writeData(unsigned char const*)+0x16>
    ba70:	f7ff ff7a 	bl	b968 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    ba74:	2800      	cmp	r0, #0
    ba76:	d1c2      	bne.n	b9fe <SdioCard::writeData(unsigned char const*)+0xe>
}
    ba78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
    ba7c:	4906      	ldr	r1, [pc, #24]	; (ba98 <SdioCard::writeData(unsigned char const*)+0xa8>)
    ba7e:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    ba80:	4b06      	ldr	r3, [pc, #24]	; (ba9c <SdioCard::writeData(unsigned char const*)+0xac>)
    ba82:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    ba86:	4648      	mov	r0, r9
  m_errorCode = code;
    ba88:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    ba8a:	601a      	str	r2, [r3, #0]
}
    ba8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba90:	20019bcb 	.word	0x20019bcb
    ba94:	402c0000 	.word	0x402c0000
    ba98:	20009558 	.word	0x20009558
    ba9c:	200123d8 	.word	0x200123d8
    baa0:	000f4240 	.word	0x000f4240

0000baa4 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    baa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baa8:	4607      	mov	r7, r0
    baaa:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    baac:	4c1f      	ldr	r4, [pc, #124]	; (bb2c <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
    baae:	f002 f981 	bl	ddb4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bab2:	4e1f      	ldr	r6, [pc, #124]	; (bb30 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bab4:	4605      	mov	r5, r0
  while (fcn()) {
    bab6:	e004      	b.n	bac2 <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bab8:	f002 f97c 	bl	ddb4 <micros>
    babc:	1b43      	subs	r3, r0, r5
    babe:	42b3      	cmp	r3, r6
    bac0:	d824      	bhi.n	bb0c <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    bac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bac4:	07d9      	lsls	r1, r3, #31
    bac6:	d4f7      	bmi.n	bab8 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bac8:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
    baca:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    bace:	d420      	bmi.n	bb12 <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    bad0:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    bad4:	4c15      	ldr	r4, [pc, #84]	; (bb2c <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    bad6:	4e17      	ldr	r6, [pc, #92]	; (bb34 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
    bad8:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
    bada:	f002 f96b 	bl	ddb4 <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bade:	4f14      	ldr	r7, [pc, #80]	; (bb30 <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
    bae0:	4605      	mov	r5, r0
  while (fcn()) {
    bae2:	e004      	b.n	baee <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bae4:	f002 f966 	bl	ddb4 <micros>
    bae8:	1b40      	subs	r0, r0, r5
    baea:	42b8      	cmp	r0, r7
    baec:	d80e      	bhi.n	bb0c <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    baee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
    baf0:	4233      	tst	r3, r6
    baf2:	d0f7      	beq.n	bae4 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
    baf4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    baf6:	4b10      	ldr	r3, [pc, #64]	; (bb38 <cardCommand(unsigned long, unsigned long)+0x94>)
    baf8:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    bafa:	681a      	ldr	r2, [r3, #0]
    bafc:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bafe:	681a      	ldr	r2, [r3, #0]
    bb00:	07d2      	lsls	r2, r2, #31
    bb02:	d503      	bpl.n	bb0c <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    bb04:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bb06:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    bb0a:	d00b      	beq.n	bb24 <cardCommand(unsigned long, unsigned long)+0x80>
    bb0c:	2000      	movs	r0, #0
}
    bb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    bb12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    bb14:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    bb16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    bb1a:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    bb1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    bb1e:	4313      	orrs	r3, r2
    bb20:	64a3      	str	r3, [r4, #72]	; 0x48
    bb22:	e7d5      	b.n	bad0 <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    bb24:	2001      	movs	r0, #1
}
    bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb2a:	bf00      	nop
    bb2c:	402c0000 	.word	0x402c0000
    bb30:	000f4240 	.word	0x000f4240
    bb34:	000f0001 	.word	0x000f0001
    bb38:	20018cd8 	.word	0x20018cd8

0000bb3c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    bb3c:	4b15      	ldr	r3, [pc, #84]	; (bb94 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
    bb3e:	b530      	push	{r4, r5, lr}
    bb40:	460d      	mov	r5, r1
    bb42:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    bb44:	6819      	ldr	r1, [r3, #0]
    bb46:	f7ff ffad 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bb4a:	b308      	cbz	r0, bb90 <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    bb4c:	4b12      	ldr	r3, [pc, #72]	; (bb98 <readReg16(unsigned long, void*)+0x5c>)
    bb4e:	f105 040f 	add.w	r4, r5, #15
    bb52:	691a      	ldr	r2, [r3, #16]
    bb54:	9200      	str	r2, [sp, #0]
    bb56:	6959      	ldr	r1, [r3, #20]
    bb58:	9101      	str	r1, [sp, #4]
    bb5a:	6999      	ldr	r1, [r3, #24]
    bb5c:	9102      	str	r1, [sp, #8]
    bb5e:	69db      	ldr	r3, [r3, #28]
    bb60:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    bb62:	2300      	movs	r3, #0
    bb64:	e001      	b.n	bb6a <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
    bb66:	f85e 2c10 	ldr.w	r2, [lr, #-16]
    bb6a:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
    bb6e:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    bb70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    bb74:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
    bb78:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    bb7a:	fa22 f20c 	lsr.w	r2, r2, ip
    bb7e:	f10e 0110 	add.w	r1, lr, #16
    bb82:	f804 2d01 	strb.w	r2, [r4, #-1]!
    bb86:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
    bb8a:	d1ec      	bne.n	bb66 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
    bb8c:	2300      	movs	r3, #0
    bb8e:	73eb      	strb	r3, [r5, #15]
}
    bb90:	b005      	add	sp, #20
    bb92:	bd30      	pop	{r4, r5, pc}
    bb94:	20018610 	.word	0x20018610
    bb98:	402c0000 	.word	0x402c0000

0000bb9c <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
    bb9c:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
    bb9e:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    bba0:	07db      	lsls	r3, r3, #31
    bba2:	d505      	bpl.n	bbb0 <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bba4:	4b15      	ldr	r3, [pc, #84]	; (bbfc <SdioCard::isBusy()+0x60>)
    bba6:	681b      	ldr	r3, [r3, #0]
    bba8:	b1b3      	cbz	r3, bbd8 <SdioCard::isBusy()+0x3c>
}
    bbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bbae:	4718      	bx	r3
    if (m_transferActive) {
    bbb0:	4b13      	ldr	r3, [pc, #76]	; (bc00 <SdioCard::isBusy()+0x64>)
    bbb2:	781b      	ldrb	r3, [r3, #0]
    bbb4:	b93b      	cbnz	r3, bbc6 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bbb6:	4b13      	ldr	r3, [pc, #76]	; (bc04 <SdioCard::isBusy()+0x68>)
    bbb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    bbba:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
    bbbe:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
    bbc2:	4620      	mov	r0, r4
    bbc4:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    bbc6:	4b0f      	ldr	r3, [pc, #60]	; (bc04 <SdioCard::isBusy()+0x68>)
    bbc8:	4c0f      	ldr	r4, [pc, #60]	; (bc08 <SdioCard::isBusy()+0x6c>)
    bbca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bbcc:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
    bbce:	fab4 f484 	clz	r4, r4
    bbd2:	0964      	lsrs	r4, r4, #5
}
    bbd4:	4620      	mov	r0, r4
    bbd6:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bbd8:	4b0c      	ldr	r3, [pc, #48]	; (bc0c <SdioCard::isBusy()+0x70>)
    bbda:	781c      	ldrb	r4, [r3, #0]
    bbdc:	2c00      	cmp	r4, #0
    bbde:	d0f0      	beq.n	bbc2 <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bbe0:	4b0b      	ldr	r3, [pc, #44]	; (bc10 <SdioCard::isBusy()+0x74>)
    bbe2:	480c      	ldr	r0, [pc, #48]	; (bc14 <SdioCard::isBusy()+0x78>)
    bbe4:	6819      	ldr	r1, [r3, #0]
    bbe6:	f7ff ff5d 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bbea:	2800      	cmp	r0, #0
    bbec:	d0e9      	beq.n	bbc2 <SdioCard::isBusy()+0x26>
    bbee:	4b05      	ldr	r3, [pc, #20]	; (bc04 <SdioCard::isBusy()+0x68>)
    bbf0:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    bbf2:	f484 7480 	eor.w	r4, r4, #256	; 0x100
    bbf6:	f3c4 2400 	ubfx	r4, r4, #8, #1
    bbfa:	e7e2      	b.n	bbc2 <SdioCard::isBusy()+0x26>
    bbfc:	20018cd4 	.word	0x20018cd4
    bc00:	20019bcb 	.word	0x20019bcb
    bc04:	402c0000 	.word	0x402c0000
    bc08:	117f0002 	.word	0x117f0002
    bc0c:	20019bc8 	.word	0x20019bc8
    bc10:	20018610 	.word	0x20018610
    bc14:	0d1a0000 	.word	0x0d1a0000

0000bc18 <SdioCard::status()>:
uint32_t SdioCard::status() {
    bc18:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bc1a:	4b04      	ldr	r3, [pc, #16]	; (bc2c <SdioCard::status()+0x14>)
    bc1c:	4804      	ldr	r0, [pc, #16]	; (bc30 <SdioCard::status()+0x18>)
    bc1e:	6819      	ldr	r1, [r3, #0]
    bc20:	f7ff ff40 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bc24:	b108      	cbz	r0, bc2a <SdioCard::status()+0x12>
    bc26:	4b03      	ldr	r3, [pc, #12]	; (bc34 <SdioCard::status()+0x1c>)
    bc28:	6918      	ldr	r0, [r3, #16]
}
    bc2a:	bd08      	pop	{r3, pc}
    bc2c:	20018610 	.word	0x20018610
    bc30:	0d1a0000 	.word	0x0d1a0000
    bc34:	402c0000 	.word	0x402c0000

0000bc38 <isBusyCMD13()>:
static bool isBusyCMD13() {
    bc38:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bc3a:	4b07      	ldr	r3, [pc, #28]	; (bc58 <isBusyCMD13()+0x20>)
    bc3c:	4807      	ldr	r0, [pc, #28]	; (bc5c <isBusyCMD13()+0x24>)
    bc3e:	6819      	ldr	r1, [r3, #0]
    bc40:	f7ff ff30 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bc44:	b130      	cbz	r0, bc54 <isBusyCMD13()+0x1c>
    bc46:	4b06      	ldr	r3, [pc, #24]	; (bc60 <isBusyCMD13()+0x28>)
    bc48:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    bc4a:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    bc4e:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
    bc52:	bd08      	pop	{r3, pc}
    bc54:	2001      	movs	r0, #1
    bc56:	bd08      	pop	{r3, pc}
    bc58:	20018610 	.word	0x20018610
    bc5c:	0d1a0000 	.word	0x0d1a0000
    bc60:	402c0000 	.word	0x402c0000

0000bc64 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    bc68:	4b29      	ldr	r3, [pc, #164]	; (bd10 <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
    bc6a:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    bc6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; bd30 <SdioCard::writeStart(unsigned long)+0xcc>
    bc70:	4e28      	ldr	r6, [pc, #160]	; (bd14 <SdioCard::writeStart(unsigned long)+0xb0>)
    bc72:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    bc76:	f002 f89d 	bl	ddb4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bc7a:	4d27      	ldr	r5, [pc, #156]	; (bd18 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    bc7c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bc7e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; bd34 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc82:	4f26      	ldr	r7, [pc, #152]	; (bd1c <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
    bc84:	e006      	b.n	bc94 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bc86:	f002 f895 	bl	ddb4 <micros>
    bc8a:	1b00      	subs	r0, r0, r4
    bc8c:	42b8      	cmp	r0, r7
    bc8e:	d829      	bhi.n	bce4 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
    bc90:	f004 f93e 	bl	ff10 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bc94:	6831      	ldr	r1, [r6, #0]
    bc96:	4628      	mov	r0, r5
    bc98:	f7ff ff04 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bc9c:	2800      	cmp	r0, #0
    bc9e:	d0f2      	beq.n	bc86 <SdioCard::writeStart(unsigned long)+0x22>
    bca0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bca4:	05db      	lsls	r3, r3, #23
    bca6:	d5ee      	bpl.n	bc86 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
    bca8:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bcaa:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    bcae:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bcb2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    bcb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bcba:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bcbe:	4b18      	ldr	r3, [pc, #96]	; (bd20 <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    bcc0:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bcc4:	781b      	ldrb	r3, [r3, #0]
    bcc6:	b1cb      	cbz	r3, bcfc <SdioCard::writeStart(unsigned long)+0x98>
    bcc8:	4649      	mov	r1, r9
    bcca:	4816      	ldr	r0, [pc, #88]	; (bd24 <SdioCard::writeStart(unsigned long)+0xc0>)
    bccc:	f7ff feea 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bcd0:	b930      	cbnz	r0, bce0 <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
    bcd2:	4915      	ldr	r1, [pc, #84]	; (bd28 <SdioCard::writeStart(unsigned long)+0xc4>)
    bcd4:	240e      	movs	r4, #14
  m_errorLine = line;
    bcd6:	4b15      	ldr	r3, [pc, #84]	; (bd2c <SdioCard::writeStart(unsigned long)+0xc8>)
    bcd8:	f240 4257 	movw	r2, #1111	; 0x457
  m_errorCode = code;
    bcdc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bcde:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    bce4:	4a10      	ldr	r2, [pc, #64]	; (bd28 <SdioCard::writeStart(unsigned long)+0xc4>)
    bce6:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bce8:	2000      	movs	r0, #0
  m_errorLine = line;
    bcea:	4b10      	ldr	r3, [pc, #64]	; (bd2c <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
    bcec:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bcee:	f240 424b 	movw	r2, #1099	; 0x44b
      m_busyFcn = 0;
    bcf2:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    bcf6:	601a      	str	r2, [r3, #0]
}
    bcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    bcfc:	ea4f 2949 	mov.w	r9, r9, lsl #9
    bd00:	4808      	ldr	r0, [pc, #32]	; (bd24 <SdioCard::writeStart(unsigned long)+0xc0>)
    bd02:	4649      	mov	r1, r9
    bd04:	f7ff fece 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bd08:	2800      	cmp	r0, #0
    bd0a:	d1e9      	bne.n	bce0 <SdioCard::writeStart(unsigned long)+0x7c>
    bd0c:	e7e1      	b.n	bcd2 <SdioCard::writeStart(unsigned long)+0x6e>
    bd0e:	bf00      	nop
    bd10:	0000bc39 	.word	0x0000bc39
    bd14:	20018610 	.word	0x20018610
    bd18:	0d1a0000 	.word	0x0d1a0000
    bd1c:	000f4240 	.word	0x000f4240
    bd20:	20019bca 	.word	0x20019bca
    bd24:	193a0020 	.word	0x193a0020
    bd28:	20009558 	.word	0x20009558
    bd2c:	200123d8 	.word	0x200123d8
    bd30:	20018cd4 	.word	0x20018cd4
    bd34:	402c0000 	.word	0x402c0000

0000bd38 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    bd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bd3c:	4c25      	ldr	r4, [pc, #148]	; (bdd4 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bd3e:	2100      	movs	r1, #0
    bd40:	4825      	ldr	r0, [pc, #148]	; (bdd8 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    bd42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bd44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    bd48:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    bd4a:	f7ff feab 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bd4e:	4605      	mov	r5, r0
    bd50:	b948      	cbnz	r0, bd66 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
    bd52:	4922      	ldr	r1, [pc, #136]	; (bddc <SdioCard::readStop()+0xa4>)
    bd54:	2009      	movs	r0, #9
  m_errorLine = line;
    bd56:	4b22      	ldr	r3, [pc, #136]	; (bde0 <SdioCard::readStop()+0xa8>)
    bd58:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
    bd5c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    bd5e:	601a      	str	r2, [r3, #0]
}
    bd60:	4628      	mov	r0, r5
    bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
    bd66:	4b1f      	ldr	r3, [pc, #124]	; (bde4 <SdioCard::readStop()+0xac>)
    bd68:	f8df 8080 	ldr.w	r8, [pc, #128]	; bdec <SdioCard::readStop()+0xb4>
    bd6c:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
    bd70:	f002 f820 	bl	ddb4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bd74:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    bd76:	4606      	mov	r6, r0
  while (fcn()) {
    bd78:	01d8      	lsls	r0, r3, #7
    bd7a:	d418      	bmi.n	bdae <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd7c:	4f1a      	ldr	r7, [pc, #104]	; (bde8 <SdioCard::readStop()+0xb0>)
    bd7e:	e004      	b.n	bd8a <SdioCard::readStop()+0x52>
    yield();
    bd80:	f004 f8c6 	bl	ff10 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    bd84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    bd86:	01d9      	lsls	r1, r3, #7
    bd88:	d411      	bmi.n	bdae <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bd8a:	f002 f813 	bl	ddb4 <micros>
    bd8e:	1b83      	subs	r3, r0, r6
    bd90:	42bb      	cmp	r3, r7
    bd92:	d9f5      	bls.n	bd80 <SdioCard::readStop()+0x48>
  m_errorCode = code;
    bd94:	4a11      	ldr	r2, [pc, #68]	; (bddc <SdioCard::readStop()+0xa4>)
    bd96:	210a      	movs	r1, #10
      m_busyFcn = 0;
    bd98:	2500      	movs	r5, #0
  m_errorLine = line;
    bd9a:	4b11      	ldr	r3, [pc, #68]	; (bde0 <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
    bd9c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    bd9e:	f44f 7210 	mov.w	r2, #576	; 0x240
}
    bda2:	4628      	mov	r0, r5
      m_busyFcn = 0;
    bda4:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
    bda8:	601a      	str	r2, [r3, #0]
}
    bdaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
    bdae:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    bdb0:	4b08      	ldr	r3, [pc, #32]	; (bdd4 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
    bdb2:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    bdb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    bdb8:	0792      	lsls	r2, r2, #30
    bdba:	d5d1      	bpl.n	bd60 <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    bdbc:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    bdbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    bdc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    bdc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    bdc6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
    bdca:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    bdcc:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
    bdce:	629a      	str	r2, [r3, #40]	; 0x28
    bdd0:	e7c6      	b.n	bd60 <SdioCard::readStop()+0x28>
    bdd2:	bf00      	nop
    bdd4:	402c0000 	.word	0x402c0000
    bdd8:	0cdb0000 	.word	0x0cdb0000
    bddc:	20009558 	.word	0x20009558
    bde0:	200123d8 	.word	0x200123d8
    bde4:	0000b64d 	.word	0x0000b64d
    bde8:	000f4240 	.word	0x000f4240
    bdec:	20018cd4 	.word	0x20018cd4

0000bdf0 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdf4:	4682      	mov	sl, r0
    bdf6:	4689      	mov	r9, r1
    bdf8:	4e36      	ldr	r6, [pc, #216]	; (bed4 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
    bdfa:	f001 ffdb 	bl	ddb4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bdfe:	4d36      	ldr	r5, [pc, #216]	; (bed8 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
    be00:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    be02:	f8df 8100 	ldr.w	r8, [pc, #256]	; bf04 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    be06:	4f35      	ldr	r7, [pc, #212]	; (bedc <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
    be08:	e004      	b.n	be14 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    be0a:	f001 ffd3 	bl	ddb4 <micros>
    be0e:	1b03      	subs	r3, r0, r4
    be10:	42bb      	cmp	r3, r7
    be12:	d827      	bhi.n	be64 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    be14:	6831      	ldr	r1, [r6, #0]
    be16:	4628      	mov	r0, r5
    be18:	f7ff fe44 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    be1c:	2800      	cmp	r0, #0
    be1e:	d0f4      	beq.n	be0a <cardCMD6(unsigned long, unsigned char*)+0x1a>
    be20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    be24:	05da      	lsls	r2, r3, #23
    be26:	d5f0      	bpl.n	be0a <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
    be28:	2301      	movs	r3, #1
    be2a:	4d2d      	ldr	r5, [pc, #180]	; (bee0 <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
    be2c:	4f2d      	ldr	r7, [pc, #180]	; (bee4 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    be2e:	4651      	mov	r1, sl
  m_dmaBusy = true;
    be30:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
    be32:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    be34:	482c      	ldr	r0, [pc, #176]	; (bee8 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
    be36:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    be38:	4b2c      	ldr	r3, [pc, #176]	; (beec <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
    be3a:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    be3e:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    be42:	4b2b      	ldr	r3, [pc, #172]	; (bef0 <cardCMD6(unsigned long, unsigned char*)+0x100>)
    be44:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    be48:	f7ff fe2c 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    be4c:	4604      	mov	r4, r0
    be4e:	b9a0      	cbnz	r0, be7a <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
    be50:	4928      	ldr	r1, [pc, #160]	; (bef4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    be52:	2004      	movs	r0, #4
  m_errorLine = line;
    be54:	4b28      	ldr	r3, [pc, #160]	; (bef8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    be56:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
    be5a:	7008      	strb	r0, [r1, #0]
}
    be5c:	4620      	mov	r0, r4
  m_errorLine = line;
    be5e:	601a      	str	r2, [r3, #0]
}
    be60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    be64:	4923      	ldr	r1, [pc, #140]	; (bef4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    be66:	200a      	movs	r0, #10
  m_errorLine = line;
    be68:	4b23      	ldr	r3, [pc, #140]	; (bef8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    be6a:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
    be6e:	2400      	movs	r4, #0
  m_errorCode = code;
    be70:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    be72:	601a      	str	r2, [r3, #0]
}
    be74:	4620      	mov	r0, r4
    be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
    be7a:	4b20      	ldr	r3, [pc, #128]	; (befc <cardCMD6(unsigned long, unsigned char*)+0x10c>)
    be7c:	f8df 9088 	ldr.w	r9, [pc, #136]	; bf08 <cardCMD6(unsigned long, unsigned char*)+0x118>
    be80:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
    be84:	f001 ff96 	bl	ddb4 <micros>
  return m_dmaBusy;
    be88:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
    be8a:	4606      	mov	r6, r0
  while (fcn()) {
    be8c:	b1bb      	cbz	r3, bebe <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    be8e:	f8df 804c 	ldr.w	r8, [pc, #76]	; bedc <cardCMD6(unsigned long, unsigned char*)+0xec>
    be92:	e003      	b.n	be9c <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
    be94:	f004 f83c 	bl	ff10 <yield>
  return m_dmaBusy;
    be98:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
    be9a:	b183      	cbz	r3, bebe <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    be9c:	f001 ff8a 	bl	ddb4 <micros>
    bea0:	1b83      	subs	r3, r0, r6
    bea2:	4543      	cmp	r3, r8
    bea4:	d9f6      	bls.n	be94 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
    bea6:	2300      	movs	r3, #0
    bea8:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
    beac:	4911      	ldr	r1, [pc, #68]	; (bef4 <cardCMD6(unsigned long, unsigned char*)+0x104>)
    beae:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    beb0:	4b11      	ldr	r3, [pc, #68]	; (bef8 <cardCMD6(unsigned long, unsigned char*)+0x108>)
    beb2:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
    beb6:	2400      	movs	r4, #0
  m_errorCode = code;
    beb8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    beba:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    bebc:	e7da      	b.n	be74 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bebe:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
    bec0:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bec2:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
    bec4:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    bec8:	d5f0      	bpl.n	beac <cardCMD6(unsigned long, unsigned char*)+0xbc>
    beca:	683a      	ldr	r2, [r7, #0]
    becc:	4b0c      	ldr	r3, [pc, #48]	; (bf00 <cardCMD6(unsigned long, unsigned char*)+0x110>)
    bece:	421a      	tst	r2, r3
    bed0:	d0d0      	beq.n	be74 <cardCMD6(unsigned long, unsigned char*)+0x84>
    bed2:	e7eb      	b.n	beac <cardCMD6(unsigned long, unsigned char*)+0xbc>
    bed4:	20018610 	.word	0x20018610
    bed8:	0d1a0000 	.word	0x0d1a0000
    bedc:	000f4240 	.word	0x000f4240
    bee0:	20019bcc 	.word	0x20019bcc
    bee4:	20018cd8 	.word	0x20018cd8
    bee8:	063a0011 	.word	0x063a0011
    beec:	00010040 	.word	0x00010040
    bef0:	117f0002 	.word	0x117f0002
    bef4:	20009558 	.word	0x20009558
    bef8:	200123d8 	.word	0x200123d8
    befc:	0000b661 	.word	0x0000b661
    bf00:	117f0000 	.word	0x117f0000
    bf04:	402c0000 	.word	0x402c0000
    bf08:	20018cd4 	.word	0x20018cd4

0000bf0c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
    bf10:	4d32      	ldr	r5, [pc, #200]	; (bfdc <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    bf12:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
    bf14:	7aab      	ldrb	r3, [r5, #10]
    bf16:	f013 0040 	ands.w	r0, r3, #64	; 0x40
    bf1a:	d112      	bne.n	bf42 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    bf1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    bf20:	7aea      	ldrb	r2, [r5, #11]
    bf22:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    bf24:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    bf28:	1c62      	adds	r2, r4, #1
    bf2a:	430a      	orrs	r2, r1
    bf2c:	4213      	tst	r3, r2
    bf2e:	d008      	beq.n	bf42 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
    bf30:	492b      	ldr	r1, [pc, #172]	; (bfe0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bf32:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
    bf34:	4b2b      	ldr	r3, [pc, #172]	; (bfe4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    bf36:	f240 3202 	movw	r2, #770	; 0x302
  m_errorCode = code;
    bf3a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bf3c:	601a      	str	r2, [r3, #0]
}
    bf3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
    bf42:	4b29      	ldr	r3, [pc, #164]	; (bfe8 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	b90b      	cbnz	r3, bf4c <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
    bf48:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
    bf4a:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    bf4c:	4827      	ldr	r0, [pc, #156]	; (bfec <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    bf4e:	f7ff fda9 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bf52:	b940      	cbnz	r0, bf66 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
    bf54:	4922      	ldr	r1, [pc, #136]	; (bfe0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bf56:	240f      	movs	r4, #15
  m_errorLine = line;
    bf58:	4b22      	ldr	r3, [pc, #136]	; (bfe4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    bf5a:	f240 320a 	movw	r2, #778	; 0x30a
  m_errorCode = code;
    bf5e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bf60:	601a      	str	r2, [r3, #0]
}
    bf62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    bf66:	4621      	mov	r1, r4
    bf68:	4821      	ldr	r0, [pc, #132]	; (bff0 <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    bf6a:	f7ff fd9b 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bf6e:	b940      	cbnz	r0, bf82 <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
    bf70:	491b      	ldr	r1, [pc, #108]	; (bfe0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bf72:	2410      	movs	r4, #16
  m_errorLine = line;
    bf74:	4b1b      	ldr	r3, [pc, #108]	; (bfe4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    bf76:	f240 320d 	movw	r2, #781	; 0x30d
  m_errorCode = code;
    bf7a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bf7c:	601a      	str	r2, [r3, #0]
}
    bf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    bf82:	2100      	movs	r1, #0
    bf84:	481b      	ldr	r0, [pc, #108]	; (bff4 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    bf86:	f7ff fd8d 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bf8a:	b938      	cbnz	r0, bf9c <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
    bf8c:	4914      	ldr	r1, [pc, #80]	; (bfe0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bf8e:	2411      	movs	r4, #17
  m_errorLine = line;
    bf90:	4b14      	ldr	r3, [pc, #80]	; (bfe4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    bf92:	f44f 7244 	mov.w	r2, #784	; 0x310
  m_errorCode = code;
    bf96:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bf98:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
    bf9a:	e7e2      	b.n	bf62 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
    bf9c:	f001 ff0a 	bl	ddb4 <micros>
    bfa0:	4e15      	ldr	r6, [pc, #84]	; (bff8 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bfa2:	4d16      	ldr	r5, [pc, #88]	; (bffc <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
    bfa4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bfa6:	f8df 805c 	ldr.w	r8, [pc, #92]	; c004 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bfaa:	4f15      	ldr	r7, [pc, #84]	; (c000 <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    bfac:	6831      	ldr	r1, [r6, #0]
    bfae:	4628      	mov	r0, r5
    bfb0:	f7ff fd78 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    bfb4:	b118      	cbz	r0, bfbe <SdioCard::erase(unsigned long, unsigned long)+0xb2>
    bfb6:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    bfba:	05db      	lsls	r3, r3, #23
    bfbc:	d4d1      	bmi.n	bf62 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    bfbe:	f001 fef9 	bl	ddb4 <micros>
    bfc2:	1b00      	subs	r0, r0, r4
    bfc4:	42b8      	cmp	r0, r7
    bfc6:	d9f1      	bls.n	bfac <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
    bfc8:	4905      	ldr	r1, [pc, #20]	; (bfe0 <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    bfca:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
    bfcc:	4b05      	ldr	r3, [pc, #20]	; (bfe4 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    bfce:	f240 3213 	movw	r2, #787	; 0x313
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    bfd2:	2000      	movs	r0, #0
  m_errorCode = code;
    bfd4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    bfd6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    bfd8:	e7c3      	b.n	bf62 <SdioCard::erase(unsigned long, unsigned long)+0x56>
    bfda:	bf00      	nop
    bfdc:	200185fc 	.word	0x200185fc
    bfe0:	20009558 	.word	0x20009558
    bfe4:	200123d8 	.word	0x200123d8
    bfe8:	20019bca 	.word	0x20019bca
    bfec:	201a0000 	.word	0x201a0000
    bff0:	211a0000 	.word	0x211a0000
    bff4:	261b0000 	.word	0x261b0000
    bff8:	20018610 	.word	0x20018610
    bffc:	0d1a0000 	.word	0x0d1a0000
    c000:	000f4240 	.word	0x000f4240
    c004:	402c0000 	.word	0x402c0000

0000c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    c008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
    c00c:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
    c010:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
    c012:	bf18      	it	ne
    c014:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
    c016:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
    c018:	9300      	str	r3, [sp, #0]
    c01a:	2b00      	cmp	r3, #0
    c01c:	bf08      	it	eq
    c01e:	f044 0401 	orreq.w	r4, r4, #1
    c022:	b15c      	cbz	r4, c03c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c024:	4940      	ldr	r1, [pc, #256]	; (c128 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c026:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    c028:	4b40      	ldr	r3, [pc, #256]	; (c12c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
    c02a:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
    c02e:	2400      	movs	r4, #0
  m_errorCode = code;
    c030:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c032:	601a      	str	r2, [r3, #0]
}
    c034:	4620      	mov	r0, r4
    c036:	b003      	add	sp, #12
    c038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
    c03c:	4b3c      	ldr	r3, [pc, #240]	; (c130 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
    c03e:	4615      	mov	r5, r2
    c040:	4a3c      	ldr	r2, [pc, #240]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c042:	460e      	mov	r6, r1
    c044:	f8df 910c 	ldr.w	r9, [pc, #268]	; c154 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
    c048:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c04a:	f001 feb3 	bl	ddb4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c04e:	f8df 8108 	ldr.w	r8, [pc, #264]	; c158 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
    c052:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c054:	f8df b104 	ldr.w	fp, [pc, #260]	; c15c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c058:	f8df a0f0 	ldr.w	sl, [pc, #240]	; c14c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
    c05c:	e006      	b.n	c06c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c05e:	f001 fea9 	bl	ddb4 <micros>
    c062:	1bc0      	subs	r0, r0, r7
    c064:	4550      	cmp	r0, sl
    c066:	d844      	bhi.n	c0f2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
    c068:	f003 ff52 	bl	ff10 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c06c:	f8d9 1000 	ldr.w	r1, [r9]
    c070:	4640      	mov	r0, r8
    c072:	f7ff fd17 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c076:	2800      	cmp	r0, #0
    c078:	d0f1      	beq.n	c05e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
    c07a:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
    c07e:	05da      	lsls	r2, r3, #23
    c080:	d5ed      	bpl.n	c05e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c082:	9a00      	ldr	r2, [sp, #0]
    c084:	4b2c      	ldr	r3, [pc, #176]	; (c138 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
    c086:	492b      	ldr	r1, [pc, #172]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c088:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
    c08c:	2200      	movs	r2, #0
  m_dmaBusy = true;
    c08e:	4f2b      	ldr	r7, [pc, #172]	; (c13c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
    c090:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
    c096:	2101      	movs	r1, #1
  m_irqstat = 0;
    c098:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c160 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
    c09c:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
    c09e:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
    c0a2:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    c0a6:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    c0aa:	4b25      	ldr	r3, [pc, #148]	; (c140 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
    c0ac:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c0b0:	4b24      	ldr	r3, [pc, #144]	; (c144 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
    c0b2:	781b      	ldrb	r3, [r3, #0]
    c0b4:	b343      	cbz	r3, c108 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
    c0b6:	4631      	mov	r1, r6
    c0b8:	9801      	ldr	r0, [sp, #4]
    c0ba:	f7ff fcf3 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c0be:	4681      	mov	r9, r0
    c0c0:	2800      	cmp	r0, #0
    c0c2:	d0b7      	beq.n	c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
    c0c4:	4b20      	ldr	r3, [pc, #128]	; (c148 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
    c0c6:	4a1b      	ldr	r2, [pc, #108]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c0c8:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
    c0ca:	f001 fe73 	bl	ddb4 <micros>
  return m_dmaBusy;
    c0ce:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
    c0d0:	4605      	mov	r5, r0
  while (fcn()) {
    c0d2:	b1db      	cbz	r3, c10c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c0d4:	4e1d      	ldr	r6, [pc, #116]	; (c14c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
    c0d6:	e003      	b.n	c0e0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
    c0d8:	f003 ff1a 	bl	ff10 <yield>
  return m_dmaBusy;
    c0dc:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
    c0de:	b1ab      	cbz	r3, c10c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c0e0:	f001 fe68 	bl	ddb4 <micros>
    c0e4:	1b40      	subs	r0, r0, r5
    c0e6:	42b0      	cmp	r0, r6
    c0e8:	d9f6      	bls.n	c0d8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
    c0ea:	2300      	movs	r3, #0
    c0ec:	4a11      	ldr	r2, [pc, #68]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c0ee:	6013      	str	r3, [r2, #0]
      return true;
    c0f0:	e7a0      	b.n	c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
    c0f2:	4b0d      	ldr	r3, [pc, #52]	; (c128 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
    c0f4:	220a      	movs	r2, #10
      m_busyFcn = 0;
    c0f6:	2100      	movs	r1, #0
    c0f8:	480e      	ldr	r0, [pc, #56]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
    c0fa:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
    c0fc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
    c100:	4b0a      	ldr	r3, [pc, #40]	; (c12c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
    c102:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
    c104:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    c106:	e795      	b.n	c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    c108:	0276      	lsls	r6, r6, #9
    c10a:	e7d4      	b.n	c0b6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
    c10c:	2300      	movs	r3, #0
    c10e:	4a09      	ldr	r2, [pc, #36]	; (c134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
    c110:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c112:	f8d8 3000 	ldr.w	r3, [r8]
    c116:	079b      	lsls	r3, r3, #30
    c118:	d58c      	bpl.n	c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c11a:	f8d8 2000 	ldr.w	r2, [r8]
    c11e:	4b0c      	ldr	r3, [pc, #48]	; (c150 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
    c120:	421a      	tst	r2, r3
    c122:	bf08      	it	eq
    c124:	464c      	moveq	r4, r9
    c126:	e785      	b.n	c034 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
    c128:	20009558 	.word	0x20009558
    c12c:	200123d8 	.word	0x200123d8
    c130:	0000bc39 	.word	0x0000bc39
    c134:	20018cd4 	.word	0x20018cd4
    c138:	1fff0000 	.word	0x1fff0000
    c13c:	20019bcc 	.word	0x20019bcc
    c140:	117f0002 	.word	0x117f0002
    c144:	20019bca 	.word	0x20019bca
    c148:	0000b661 	.word	0x0000b661
    c14c:	000f4240 	.word	0x000f4240
    c150:	117f0000 	.word	0x117f0000
    c154:	20018610 	.word	0x20018610
    c158:	0d1a0000 	.word	0x0d1a0000
    c15c:	402c0000 	.word	0x402c0000
    c160:	20018cd8 	.word	0x20018cd8

0000c164 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c166:	4606      	mov	r6, r0
    c168:	7a00      	ldrb	r0, [r0, #8]
    c16a:	460c      	mov	r4, r1
    c16c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c16e:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    c170:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c172:	d413      	bmi.n	c19c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c174:	b183      	cbz	r3, c198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c176:	440f      	add	r7, r1
    c178:	e001      	b.n	c17e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    c17a:	42bc      	cmp	r4, r7
    c17c:	d00c      	beq.n	c198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    c17e:	6833      	ldr	r3, [r6, #0]
    c180:	462a      	mov	r2, r5
    c182:	4621      	mov	r1, r4
    c184:	4630      	mov	r0, r6
    c186:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
    c188:	3401      	adds	r4, #1
    c18a:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
    c18e:	4798      	blx	r3
    c190:	2800      	cmp	r0, #0
    c192:	d1f2      	bne.n	c17a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
    c194:	2000      	movs	r0, #0
}
    c196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c198:	2001      	movs	r0, #1
}
    c19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
    c19c:	0790      	lsls	r0, r2, #30
    c19e:	d012      	beq.n	c1c6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d0f9      	beq.n	c198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    c1a4:	440f      	add	r7, r1
    c1a6:	e001      	b.n	c1ac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    c1a8:	42bc      	cmp	r4, r7
    c1aa:	d0f5      	beq.n	c198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    c1ac:	6833      	ldr	r3, [r6, #0]
    c1ae:	462a      	mov	r2, r5
    c1b0:	4621      	mov	r1, r4
    c1b2:	4630      	mov	r0, r6
    c1b4:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    c1b6:	3401      	adds	r4, #1
    c1b8:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
    c1bc:	4798      	blx	r3
    c1be:	2800      	cmp	r0, #0
    c1c0:	d1f2      	bne.n	c1a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    c1c2:	2000      	movs	r0, #0
    c1c4:	e7e7      	b.n	c196 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    c1c6:	4806      	ldr	r0, [pc, #24]	; (c1e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    c1c8:	f7ff ff1e 	bl	c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c1cc:	2800      	cmp	r0, #0
    c1ce:	d1e3      	bne.n	c198 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
    c1d0:	4904      	ldr	r1, [pc, #16]	; (c1e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    c1d2:	240c      	movs	r4, #12
  m_errorLine = line;
    c1d4:	4b04      	ldr	r3, [pc, #16]	; (c1e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    c1d6:	f240 32a1 	movw	r2, #929	; 0x3a1
  m_errorCode = code;
    c1da:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c1dc:	601a      	str	r2, [r3, #0]
}
    c1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1e0:	123a0037 	.word	0x123a0037
    c1e4:	20009558 	.word	0x20009558
    c1e8:	200123d8 	.word	0x200123d8

0000c1ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1ee:	4606      	mov	r6, r0
    c1f0:	7a00      	ldrb	r0, [r0, #8]
    c1f2:	460c      	mov	r4, r1
    c1f4:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    c1f6:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    c1f8:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    c1fa:	d413      	bmi.n	c224 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
    c1fc:	b183      	cbz	r3, c220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c1fe:	440f      	add	r7, r1
    c200:	e001      	b.n	c206 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    c202:	42bc      	cmp	r4, r7
    c204:	d00c      	beq.n	c220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    c206:	6833      	ldr	r3, [r6, #0]
    c208:	462a      	mov	r2, r5
    c20a:	4621      	mov	r1, r4
    c20c:	4630      	mov	r0, r6
    c20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
    c210:	3401      	adds	r4, #1
    c212:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
    c216:	4798      	blx	r3
    c218:	2800      	cmp	r0, #0
    c21a:	d1f2      	bne.n	c202 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
    c21c:	2000      	movs	r0, #0
}
    c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
    c220:	2001      	movs	r0, #1
}
    c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
    c224:	0790      	lsls	r0, r2, #30
    c226:	d012      	beq.n	c24e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c228:	2b00      	cmp	r3, #0
    c22a:	d0f9      	beq.n	c220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    c22c:	440f      	add	r7, r1
    c22e:	e001      	b.n	c234 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    c230:	42bc      	cmp	r4, r7
    c232:	d0f5      	beq.n	c220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    c234:	6833      	ldr	r3, [r6, #0]
    c236:	462a      	mov	r2, r5
    c238:	4621      	mov	r1, r4
    c23a:	4630      	mov	r0, r6
    c23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    c23e:	3401      	adds	r4, #1
    c240:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
    c244:	4798      	blx	r3
    c246:	2800      	cmp	r0, #0
    c248:	d1f2      	bne.n	c230 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    c24a:	2000      	movs	r0, #0
    c24c:	e7e7      	b.n	c21e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    c24e:	4806      	ldr	r0, [pc, #24]	; (c268 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    c250:	f7ff feda 	bl	c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c254:	2800      	cmp	r0, #0
    c256:	d1e3      	bne.n	c220 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
    c258:	4904      	ldr	r1, [pc, #16]	; (c26c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    c25a:	240e      	movs	r4, #14
  m_errorLine = line;
    c25c:	4b04      	ldr	r3, [pc, #16]	; (c270 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    c25e:	f240 423d 	movw	r2, #1085	; 0x43d
  m_errorCode = code;
    c262:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c264:	601a      	str	r2, [r3, #0]
}
    c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c268:	193a0027 	.word	0x193a0027
    c26c:	20009558 	.word	0x20009558
    c270:	200123d8 	.word	0x200123d8

0000c274 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    c278:	2500      	movs	r5, #0
  m_initDone = false;
    c27a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; c53c <SdioCard::begin(SdioConfig)+0x2c8>
  m_errorCode = SD_CARD_ERROR_NONE;
    c27e:	4c9b      	ldr	r4, [pc, #620]	; (c4ec <SdioCard::begin(SdioConfig)+0x278>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    c280:	b091      	sub	sp, #68	; 0x44
  m_highCapacity = false;
    c282:	f8df 82bc 	ldr.w	r8, [pc, #700]	; c540 <SdioCard::begin(SdioConfig)+0x2cc>
  m_version2 = false;
    c286:	4e9a      	ldr	r6, [pc, #616]	; (c4f0 <SdioCard::begin(SdioConfig)+0x27c>)
  m_sdioConfig = sdioConfig;
    c288:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    c28a:	7245      	strb	r5, [r0, #9]
  m_initDone = false;
    c28c:	f889 5000 	strb.w	r5, [r9]
  m_errorCode = SD_CARD_ERROR_NONE;
    c290:	7025      	strb	r5, [r4, #0]
  m_highCapacity = false;
    c292:	f888 5000 	strb.w	r5, [r8]
  m_version2 = false;
    c296:	7035      	strb	r5, [r6, #0]
  initSDHC();
    c298:	f7ff fad2 	bl	b840 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    c29c:	4629      	mov	r1, r5
    c29e:	4628      	mov	r0, r5
    c2a0:	f7ff fc00 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c2a4:	b950      	cbnz	r0, c2bc <SdioCard::begin(SdioConfig)+0x48>
  m_errorCode = code;
    c2a6:	2101      	movs	r1, #1
  m_errorLine = line;
    c2a8:	4b92      	ldr	r3, [pc, #584]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c2aa:	f240 228e 	movw	r2, #654	; 0x28e
    c2ae:	4605      	mov	r5, r0
  m_errorCode = code;
    c2b0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c2b2:	601a      	str	r2, [r3, #0]
}
    c2b4:	4628      	mov	r0, r5
    c2b6:	b011      	add	sp, #68	; 0x44
    c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2bc:	2503      	movs	r5, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    c2be:	4f8e      	ldr	r7, [pc, #568]	; (c4f8 <SdioCard::begin(SdioConfig)+0x284>)
    c2c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    c2c4:	4638      	mov	r0, r7
    c2c6:	f7ff fbed 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c2ca:	2800      	cmp	r0, #0
    c2cc:	d14e      	bne.n	c36c <SdioCard::begin(SdioConfig)+0xf8>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    c2ce:	3d01      	subs	r5, #1
    c2d0:	d1f6      	bne.n	c2c0 <SdioCard::begin(SdioConfig)+0x4c>
  if (!m_version2) {
    c2d2:	7833      	ldrb	r3, [r6, #0]
    c2d4:	2b00      	cmp	r3, #0
    c2d6:	d03d      	beq.n	c354 <SdioCard::begin(SdioConfig)+0xe0>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c2d8:	f8df b268 	ldr.w	fp, [pc, #616]	; c544 <SdioCard::begin(SdioConfig)+0x2d0>
  int m = micros();
    c2dc:	f001 fd6a 	bl	ddb4 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c2e0:	4e86      	ldr	r6, [pc, #536]	; (c4fc <SdioCard::begin(SdioConfig)+0x288>)
  int m = micros();
    c2e2:	4605      	mov	r5, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c2e4:	f8df a260 	ldr.w	sl, [pc, #608]	; c548 <SdioCard::begin(SdioConfig)+0x2d4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c2e8:	4f85      	ldr	r7, [pc, #532]	; (c500 <SdioCard::begin(SdioConfig)+0x28c>)
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c2ea:	2100      	movs	r1, #0
    c2ec:	4630      	mov	r0, r6
    c2ee:	f7ff fbd9 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c2f2:	b950      	cbnz	r0, c30a <SdioCard::begin(SdioConfig)+0x96>
      return sdError(SD_CARD_ERROR_ACMD41);
    c2f4:	2500      	movs	r5, #0
  m_errorCode = code;
    c2f6:	2117      	movs	r1, #23
  m_errorLine = line;
    c2f8:	4b7e      	ldr	r3, [pc, #504]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c2fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
}
    c2fe:	4628      	mov	r0, r5
  m_errorCode = code;
    c300:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c302:	601a      	str	r2, [r3, #0]
}
    c304:	b011      	add	sp, #68	; 0x44
    c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c30a:	4659      	mov	r1, fp
    c30c:	4650      	mov	r0, sl
    c30e:	f7ff fbc9 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c312:	2800      	cmp	r0, #0
    c314:	d0ee      	beq.n	c2f4 <SdioCard::begin(SdioConfig)+0x80>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    c316:	f001 fd4d 	bl	ddb4 <micros>
    c31a:	1b40      	subs	r0, r0, r5
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c31c:	4b79      	ldr	r3, [pc, #484]	; (c504 <SdioCard::begin(SdioConfig)+0x290>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    c31e:	42b8      	cmp	r0, r7
    c320:	d8e8      	bhi.n	c2f4 <SdioCard::begin(SdioConfig)+0x80>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    c322:	691a      	ldr	r2, [r3, #16]
    c324:	2a00      	cmp	r2, #0
    c326:	dae0      	bge.n	c2ea <SdioCard::begin(SdioConfig)+0x76>
  m_ocr = SDHC_CMDRSP0;
    c328:	6919      	ldr	r1, [r3, #16]
    c32a:	4a77      	ldr	r2, [pc, #476]	; (c508 <SdioCard::begin(SdioConfig)+0x294>)
    c32c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    c32e:	691b      	ldr	r3, [r3, #16]
    c330:	005a      	lsls	r2, r3, #1
    c332:	d502      	bpl.n	c33a <SdioCard::begin(SdioConfig)+0xc6>
    m_highCapacity = true;
    c334:	2301      	movs	r3, #1
    c336:	f888 3000 	strb.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    c33a:	2100      	movs	r1, #0
    c33c:	4873      	ldr	r0, [pc, #460]	; (c50c <SdioCard::begin(SdioConfig)+0x298>)
    c33e:	f7ff fbb1 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c342:	4605      	mov	r5, r0
    c344:	bb10      	cbnz	r0, c38c <SdioCard::begin(SdioConfig)+0x118>
  m_errorCode = code;
    c346:	2102      	movs	r1, #2
  m_errorLine = line;
    c348:	4b6a      	ldr	r3, [pc, #424]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c34a:	f240 22b1 	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    c34e:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c350:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
    c352:	e7af      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
    initSDHC();
    c354:	f7ff fa74 	bl	b840 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    c358:	4629      	mov	r1, r5
    c35a:	4628      	mov	r0, r5
    c35c:	f7ff fba2 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    c360:	7833      	ldrb	r3, [r6, #0]
    c362:	2b00      	cmp	r3, #0
    c364:	d1b8      	bne.n	c2d8 <SdioCard::begin(SdioConfig)+0x64>
    c366:	f44f 1b40 	mov.w	fp, #3145728	; 0x300000
    c36a:	e7b7      	b.n	c2dc <SdioCard::begin(SdioConfig)+0x68>
      if (SDHC_CMDRSP0 != 0X1AA) {
    c36c:	4b65      	ldr	r3, [pc, #404]	; (c504 <SdioCard::begin(SdioConfig)+0x290>)
    c36e:	691b      	ldr	r3, [r3, #16]
    c370:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    c374:	d007      	beq.n	c386 <SdioCard::begin(SdioConfig)+0x112>
  m_errorCode = code;
    c376:	2106      	movs	r1, #6
  m_errorLine = line;
    c378:	4b5e      	ldr	r3, [pc, #376]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c37a:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
    c37e:	2500      	movs	r5, #0
  m_errorCode = code;
    c380:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c382:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
    c384:	e796      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
      m_version2 = true;
    c386:	2301      	movs	r3, #1
    c388:	7033      	strb	r3, [r6, #0]
  if (!m_version2) {
    c38a:	e7a5      	b.n	c2d8 <SdioCard::begin(SdioConfig)+0x64>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    c38c:	2100      	movs	r1, #0
    c38e:	4860      	ldr	r0, [pc, #384]	; (c510 <SdioCard::begin(SdioConfig)+0x29c>)
    c390:	f7ff fb88 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c394:	4605      	mov	r5, r0
    c396:	b930      	cbnz	r0, c3a6 <SdioCard::begin(SdioConfig)+0x132>
  m_errorCode = code;
    c398:	2103      	movs	r1, #3
  m_errorLine = line;
    c39a:	4b56      	ldr	r3, [pc, #344]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c39c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    c3a0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c3a2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
    c3a4:	e786      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c3a6:	4e57      	ldr	r6, [pc, #348]	; (c504 <SdioCard::begin(SdioConfig)+0x290>)
    c3a8:	4b5a      	ldr	r3, [pc, #360]	; (c514 <SdioCard::begin(SdioConfig)+0x2a0>)
    c3aa:	6932      	ldr	r2, [r6, #16]
    c3ac:	4f5a      	ldr	r7, [pc, #360]	; (c518 <SdioCard::begin(SdioConfig)+0x2a4>)
    c3ae:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c3b0:	495a      	ldr	r1, [pc, #360]	; (c51c <SdioCard::begin(SdioConfig)+0x2a8>)
    c3b2:	485b      	ldr	r0, [pc, #364]	; (c520 <SdioCard::begin(SdioConfig)+0x2ac>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    c3b4:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    c3b6:	f7ff fbc1 	bl	bb3c <readReg16(unsigned long, void*)>
    c3ba:	4605      	mov	r5, r0
    c3bc:	b930      	cbnz	r0, c3cc <SdioCard::begin(SdioConfig)+0x158>
  m_errorCode = code;
    c3be:	2107      	movs	r1, #7
  m_errorLine = line;
    c3c0:	4b4c      	ldr	r3, [pc, #304]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c3c2:	f240 22b9 	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    c3c6:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c3c8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
    c3ca:	e773      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    c3cc:	4955      	ldr	r1, [pc, #340]	; (c524 <SdioCard::begin(SdioConfig)+0x2b0>)
    c3ce:	4856      	ldr	r0, [pc, #344]	; (c528 <SdioCard::begin(SdioConfig)+0x2b4>)
    c3d0:	f7ff fbb4 	bl	bb3c <readReg16(unsigned long, void*)>
    c3d4:	4605      	mov	r5, r0
    c3d6:	b930      	cbnz	r0, c3e6 <SdioCard::begin(SdioConfig)+0x172>
  m_errorCode = code;
    c3d8:	2108      	movs	r1, #8
  m_errorLine = line;
    c3da:	4b46      	ldr	r3, [pc, #280]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c3dc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    c3e0:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c3e2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
    c3e4:	e766      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    c3e6:	6839      	ldr	r1, [r7, #0]
    c3e8:	4850      	ldr	r0, [pc, #320]	; (c52c <SdioCard::begin(SdioConfig)+0x2b8>)
    c3ea:	f7ff fb5b 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c3ee:	4605      	mov	r5, r0
    c3f0:	b930      	cbnz	r0, c400 <SdioCard::begin(SdioConfig)+0x18c>
  m_errorCode = code;
    c3f2:	2105      	movs	r1, #5
  m_errorLine = line;
    c3f4:	4b3f      	ldr	r3, [pc, #252]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c3f6:	f240 22bf 	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    c3fa:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c3fc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
    c3fe:	e759      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c400:	6839      	ldr	r1, [r7, #0]
    c402:	483e      	ldr	r0, [pc, #248]	; (c4fc <SdioCard::begin(SdioConfig)+0x288>)
    c404:	f7ff fb4e 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c408:	b938      	cbnz	r0, c41a <SdioCard::begin(SdioConfig)+0x1a6>
  m_errorCode = code;
    c40a:	2114      	movs	r1, #20
  m_errorLine = line;
    c40c:	4b39      	ldr	r3, [pc, #228]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    c40e:	f240 22c3 	movw	r2, #707	; 0x2c3
    return sdError(SD_CARD_ERROR_ACMD6);
    c412:	2500      	movs	r5, #0
  m_errorCode = code;
    c414:	7021      	strb	r1, [r4, #0]
  m_errorLine = line;
    c416:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    c418:	e74c      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    c41a:	2102      	movs	r1, #2
    c41c:	4844      	ldr	r0, [pc, #272]	; (c530 <SdioCard::begin(SdioConfig)+0x2bc>)
    c41e:	f7ff fb41 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c422:	4605      	mov	r5, r0
    c424:	2800      	cmp	r0, #0
    c426:	d0f0      	beq.n	c40a <SdioCard::begin(SdioConfig)+0x196>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c428:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c42a:	4669      	mov	r1, sp
    c42c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    c430:	f023 0306 	bic.w	r3, r3, #6
    c434:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    c436:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    c438:	f043 0302 	orr.w	r3, r3, #2
    c43c:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    c43e:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
    c442:	6473      	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    c444:	f7ff fcd4 	bl	bdf0 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
    c448:	f89d 300d 	ldrb.w	r3, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
    c44c:	079b      	lsls	r3, r3, #30
    c44e:	d543      	bpl.n	c4d8 <SdioCard::begin(SdioConfig)+0x264>
    c450:	2800      	cmp	r0, #0
    c452:	d041      	beq.n	c4d8 <SdioCard::begin(SdioConfig)+0x264>
    uint32_t m_errorLine_before = m_errorLine;
    c454:	4e27      	ldr	r6, [pc, #156]	; (c4f4 <SdioCard::begin(SdioConfig)+0x280>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c456:	4669      	mov	r1, sp
    c458:	4836      	ldr	r0, [pc, #216]	; (c534 <SdioCard::begin(SdioConfig)+0x2c0>)
    uint8_t err_code_before = m_errorCode;
    c45a:	f894 8000 	ldrb.w	r8, [r4]
    uint32_t m_errorLine_before = m_errorLine;
    c45e:	6837      	ldr	r7, [r6, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    c460:	f7ff fcc6 	bl	bdf0 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    c464:	f89d 3010 	ldrb.w	r3, [sp, #16]
    c468:	f003 030f 	and.w	r3, r3, #15
    if (switchRequestAsk && switchRequestDone) {
    c46c:	2b01      	cmp	r3, #1
    c46e:	d136      	bne.n	c4de <SdioCard::begin(SdioConfig)+0x26a>
    c470:	b3a8      	cbz	r0, c4de <SdioCard::begin(SdioConfig)+0x26a>
      kHzSdClk = 50000;
    c472:	f24c 3050 	movw	r0, #50000	; 0xc350
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c476:	4c30      	ldr	r4, [pc, #192]	; (c538 <SdioCard::begin(SdioConfig)+0x2c4>)
    c478:	2305      	movs	r3, #5
    c47a:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c47e:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c482:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c486:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c48a:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c48e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
  setSdclk(kHzSdClk);
    c492:	f7ff f8eb 	bl	b66c <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c496:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c498:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    c49c:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    c4a0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    c4a4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    c4a8:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    c4ac:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    c4b0:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c4b4:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    c4b8:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    c4bc:	f8c4 23c0 	str.w	r2, [r4, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    c4c0:	f8c4 23ac 	str.w	r2, [r4, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    c4c4:	f8c4 33b0 	str.w	r3, [r4, #944]	; 0x3b0
  m_initDone = true;
    c4c8:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    c4ca:	f8c4 23b4 	str.w	r2, [r4, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    c4ce:	f8c4 23b8 	str.w	r2, [r4, #952]	; 0x3b8
  m_initDone = true;
    c4d2:	f889 3000 	strb.w	r3, [r9]
  return true;
    c4d6:	e6ed      	b.n	c2b4 <SdioCard::begin(SdioConfig)+0x40>
  kHzSdClk = 25000;
    c4d8:	f246 10a8 	movw	r0, #25000	; 0x61a8
    c4dc:	e7cb      	b.n	c476 <SdioCard::begin(SdioConfig)+0x202>
    c4de:	f246 10a8 	movw	r0, #25000	; 0x61a8
      m_errorCode = err_code_before;
    c4e2:	f884 8000 	strb.w	r8, [r4]
      m_errorLine = m_errorLine_before;
    c4e6:	6037      	str	r7, [r6, #0]
    c4e8:	e7c5      	b.n	c476 <SdioCard::begin(SdioConfig)+0x202>
    c4ea:	bf00      	nop
    c4ec:	20009558 	.word	0x20009558
    c4f0:	20019bc9 	.word	0x20019bc9
    c4f4:	200123d8 	.word	0x200123d8
    c4f8:	081a0000 	.word	0x081a0000
    c4fc:	371a0000 	.word	0x371a0000
    c500:	000f4240 	.word	0x000f4240
    c504:	402c0000 	.word	0x402c0000
    c508:	2001860c 	.word	0x2001860c
    c50c:	02090000 	.word	0x02090000
    c510:	031a0000 	.word	0x031a0000
    c514:	ffff0000 	.word	0xffff0000
    c518:	20018610 	.word	0x20018610
    c51c:	200185fc 	.word	0x200185fc
    c520:	09090000 	.word	0x09090000
    c524:	200185ec 	.word	0x200185ec
    c528:	0a090000 	.word	0x0a090000
    c52c:	071b0000 	.word	0x071b0000
    c530:	061a0000 	.word	0x061a0000
    c534:	80fffff1 	.word	0x80fffff1
    c538:	401f8000 	.word	0x401f8000
    c53c:	20019bc8 	.word	0x20019bc8
    c540:	20019bca 	.word	0x20019bca
    c544:	40300000 	.word	0x40300000
    c548:	29020000 	.word	0x29020000

0000c54c <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c54c:	4b37      	ldr	r3, [pc, #220]	; (c62c <SdioCard::readData(unsigned char*)+0xe0>)
    c54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    c550:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
    c552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c556:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    c558:	d40d      	bmi.n	c576 <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c55a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c55c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c560:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    c562:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    c564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c566:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c56a:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    c56e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    c572:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    c574:	b662      	cpsie	i
  uint32_t m = micros();
    c576:	f001 fc1d 	bl	ddb4 <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c57a:	4e2c      	ldr	r6, [pc, #176]	; (c62c <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c57c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; c644 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
    c580:	4605      	mov	r5, r0
  while (fcn()) {
    c582:	e004      	b.n	c58e <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c584:	f001 fc16 	bl	ddb4 <micros>
    c588:	1b43      	subs	r3, r0, r5
    c58a:	4543      	cmp	r3, r8
    c58c:	d837      	bhi.n	c5fe <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    c58e:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
    c590:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    c594:	d0f6      	beq.n	c584 <SdioCard::readData(unsigned char*)+0x38>
    c596:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    c59a:	4824      	ldr	r0, [pc, #144]	; (c62c <SdioCard::readData(unsigned char*)+0xe0>)
    c59c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
    c5a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c5a2:	051b      	lsls	r3, r3, #20
    c5a4:	d5fc      	bpl.n	c5a0 <SdioCard::readData(unsigned char*)+0x54>
    c5a6:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
    c5aa:	6a02      	ldr	r2, [r0, #32]
    c5ac:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    c5b0:	459c      	cmp	ip, r3
    c5b2:	d1fa      	bne.n	c5aa <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    c5b4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
    c5b8:	4567      	cmp	r7, ip
    c5ba:	d1f1      	bne.n	c5a0 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
    c5bc:	f001 fbfa 	bl	ddb4 <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c5c0:	4f1a      	ldr	r7, [pc, #104]	; (c62c <SdioCard::readData(unsigned char*)+0xe0>)
    c5c2:	4d1b      	ldr	r5, [pc, #108]	; (c630 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
    c5c4:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c5c6:	f8df 807c 	ldr.w	r8, [pc, #124]	; c644 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
    c5ca:	e004      	b.n	c5d6 <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c5cc:	f001 fbf2 	bl	ddb4 <micros>
    c5d0:	1b83      	subs	r3, r0, r6
    c5d2:	4543      	cmp	r3, r8
    c5d4:	d81d      	bhi.n	c612 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    c5d6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
    c5d8:	402c      	ands	r4, r5
    c5da:	d0f7      	beq.n	c5cc <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
    c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c5de:	4a15      	ldr	r2, [pc, #84]	; (c634 <SdioCard::readData(unsigned char*)+0xe8>)
    c5e0:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    c5e2:	6813      	ldr	r3, [r2, #0]
    c5e4:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c5e6:	6813      	ldr	r3, [r2, #0]
    c5e8:	f013 0302 	ands.w	r3, r3, #2
    c5ec:	d01b      	beq.n	c626 <SdioCard::readData(unsigned char*)+0xda>
    c5ee:	6812      	ldr	r2, [r2, #0]
    c5f0:	4b11      	ldr	r3, [pc, #68]	; (c638 <SdioCard::readData(unsigned char*)+0xec>)
    c5f2:	421a      	tst	r2, r3
    c5f4:	bf0c      	ite	eq
    c5f6:	2001      	moveq	r0, #1
    c5f8:	2000      	movne	r0, #0
}
    c5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c5fe:	490f      	ldr	r1, [pc, #60]	; (c63c <SdioCard::readData(unsigned char*)+0xf0>)
    c600:	251a      	movs	r5, #26
  m_errorLine = line;
    c602:	4b0f      	ldr	r3, [pc, #60]	; (c640 <SdioCard::readData(unsigned char*)+0xf4>)
    c604:	f240 3256 	movw	r2, #854	; 0x356
    return sdError(SD_CARD_ERROR_READ_FIFO);
    c608:	4620      	mov	r0, r4
  m_errorCode = code;
    c60a:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c60c:	601a      	str	r2, [r3, #0]
}
    c60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
    c612:	490a      	ldr	r1, [pc, #40]	; (c63c <SdioCard::readData(unsigned char*)+0xf0>)
    c614:	251d      	movs	r5, #29
  m_errorLine = line;
    c616:	4b0a      	ldr	r3, [pc, #40]	; (c640 <SdioCard::readData(unsigned char*)+0xf4>)
    c618:	f240 3261 	movw	r2, #865	; 0x361
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    c61c:	4620      	mov	r0, r4
  m_errorCode = code;
    c61e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
    c620:	601a      	str	r2, [r3, #0]
}
    c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    c626:	4618      	mov	r0, r3
}
    c628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c62c:	402c0000 	.word	0x402c0000
    c630:	117f0002 	.word	0x117f0002
    c634:	20018cd8 	.word	0x20018cd8
    c638:	117f0000 	.word	0x117f0000
    c63c:	20009558 	.word	0x20009558
    c640:	200123d8 	.word	0x200123d8
    c644:	000f4240 	.word	0x000f4240

0000c648 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
    c64c:	4b29      	ldr	r3, [pc, #164]	; (c6f4 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
    c64e:	4689      	mov	r9, r1
  m_busyFcn = fcn;
    c650:	f8df a0c0 	ldr.w	sl, [pc, #192]	; c714 <SdioCard::readStart(unsigned long)+0xcc>
    c654:	4e28      	ldr	r6, [pc, #160]	; (c6f8 <SdioCard::readStart(unsigned long)+0xb0>)
    c656:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
    c65a:	f001 fbab 	bl	ddb4 <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c65e:	4d27      	ldr	r5, [pc, #156]	; (c6fc <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
    c660:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c662:	f8df 80b4 	ldr.w	r8, [pc, #180]	; c718 <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c666:	4f26      	ldr	r7, [pc, #152]	; (c700 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
    c668:	e006      	b.n	c678 <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c66a:	f001 fba3 	bl	ddb4 <micros>
    c66e:	1b00      	subs	r0, r0, r4
    c670:	42b8      	cmp	r0, r7
    c672:	d829      	bhi.n	c6c8 <SdioCard::readStart(unsigned long)+0x80>
    yield();
    c674:	f003 fc4c 	bl	ff10 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    c678:	6831      	ldr	r1, [r6, #0]
    c67a:	4628      	mov	r0, r5
    c67c:	f7ff fa12 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c680:	2800      	cmp	r0, #0
    c682:	d0f2      	beq.n	c66a <SdioCard::readStart(unsigned long)+0x22>
    c684:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
    c688:	05db      	lsls	r3, r3, #23
    c68a:	d5ee      	bpl.n	c66a <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
    c68c:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c68e:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
    c692:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    c696:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    c69a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c69e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c6a2:	4b18      	ldr	r3, [pc, #96]	; (c704 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    c6a4:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c6a8:	781b      	ldrb	r3, [r3, #0]
    c6aa:	b1cb      	cbz	r3, c6e0 <SdioCard::readStart(unsigned long)+0x98>
    c6ac:	4649      	mov	r1, r9
    c6ae:	4816      	ldr	r0, [pc, #88]	; (c708 <SdioCard::readStart(unsigned long)+0xc0>)
    c6b0:	f7ff f9f8 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c6b4:	b930      	cbnz	r0, c6c4 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
    c6b6:	4915      	ldr	r1, [pc, #84]	; (c70c <SdioCard::readStart(unsigned long)+0xc4>)
    c6b8:	240c      	movs	r4, #12
  m_errorLine = line;
    c6ba:	4b15      	ldr	r3, [pc, #84]	; (c710 <SdioCard::readStart(unsigned long)+0xc8>)
    c6bc:	f240 32bd 	movw	r2, #957	; 0x3bd
  m_errorCode = code;
    c6c0:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c6c2:	601a      	str	r2, [r3, #0]
}
    c6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
    c6c8:	4a10      	ldr	r2, [pc, #64]	; (c70c <SdioCard::readStart(unsigned long)+0xc4>)
    c6ca:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c6cc:	2000      	movs	r0, #0
  m_errorLine = line;
    c6ce:	4b10      	ldr	r3, [pc, #64]	; (c710 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
    c6d0:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c6d2:	f240 32b1 	movw	r2, #945	; 0x3b1
      m_busyFcn = 0;
    c6d6:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
    c6da:	601a      	str	r2, [r3, #0]
}
    c6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    c6e0:	ea4f 2949 	mov.w	r9, r9, lsl #9
    c6e4:	4808      	ldr	r0, [pc, #32]	; (c708 <SdioCard::readStart(unsigned long)+0xc0>)
    c6e6:	4649      	mov	r1, r9
    c6e8:	f7ff f9dc 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c6ec:	2800      	cmp	r0, #0
    c6ee:	d1e9      	bne.n	c6c4 <SdioCard::readStart(unsigned long)+0x7c>
    c6f0:	e7e1      	b.n	c6b6 <SdioCard::readStart(unsigned long)+0x6e>
    c6f2:	bf00      	nop
    c6f4:	0000bc39 	.word	0x0000bc39
    c6f8:	20018610 	.word	0x20018610
    c6fc:	0d1a0000 	.word	0x0d1a0000
    c700:	000f4240 	.word	0x000f4240
    c704:	20019bca 	.word	0x20019bca
    c708:	123a0030 	.word	0x123a0030
    c70c:	20009558 	.word	0x20009558
    c710:	200123d8 	.word	0x200123d8
    c714:	20018cd4 	.word	0x20018cd4
    c718:	402c0000 	.word	0x402c0000

0000c71c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
    c720:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c722:	4c1d      	ldr	r4, [pc, #116]	; (c798 <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
    c724:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
    c726:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c728:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c72a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c72c:	481b      	ldr	r0, [pc, #108]	; (c79c <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    c72e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    c732:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    c734:	f7ff f9b6 	bl	baa4 <cardCommand(unsigned long, unsigned long)>
    c738:	b940      	cbnz	r0, c74c <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    c73a:	4919      	ldr	r1, [pc, #100]	; (c7a0 <SdioCard::stopTransmission(bool)+0x84>)
    c73c:	2409      	movs	r4, #9
  m_errorLine = line;
    c73e:	4b19      	ldr	r3, [pc, #100]	; (c7a4 <SdioCard::stopTransmission(bool)+0x88>)
    c740:	f240 32d3 	movw	r2, #979	; 0x3d3
  m_errorCode = code;
    c744:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    c746:	601a      	str	r2, [r3, #0]
}
    c748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
    c74c:	2d00      	cmp	r5, #0
    c74e:	d0fb      	beq.n	c748 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
    c750:	4b15      	ldr	r3, [pc, #84]	; (c7a8 <SdioCard::stopTransmission(bool)+0x8c>)
    c752:	4e16      	ldr	r6, [pc, #88]	; (c7ac <SdioCard::stopTransmission(bool)+0x90>)
    c754:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
    c756:	f001 fb2d 	bl	ddb4 <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
    c75c:	4607      	mov	r7, r0
  while (fcn()) {
    c75e:	01da      	lsls	r2, r3, #7
    c760:	d416      	bmi.n	c790 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c762:	f8df 804c 	ldr.w	r8, [pc, #76]	; c7b0 <SdioCard::stopTransmission(bool)+0x94>
    c766:	e004      	b.n	c772 <SdioCard::stopTransmission(bool)+0x56>
    yield();
    c768:	f003 fbd2 	bl	ff10 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    c76c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
    c76e:	01db      	lsls	r3, r3, #7
    c770:	d40e      	bmi.n	c790 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    c772:	f001 fb1f 	bl	ddb4 <micros>
    c776:	1bc0      	subs	r0, r0, r7
    c778:	4540      	cmp	r0, r8
    c77a:	d9f5      	bls.n	c768 <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
    c77c:	4a08      	ldr	r2, [pc, #32]	; (c7a0 <SdioCard::stopTransmission(bool)+0x84>)
    c77e:	210a      	movs	r1, #10
      m_busyFcn = 0;
    c780:	2000      	movs	r0, #0
  m_errorLine = line;
    c782:	4b08      	ldr	r3, [pc, #32]	; (c7a4 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
    c784:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
    c786:	f240 32d7 	movw	r2, #983	; 0x3d7
      m_busyFcn = 0;
    c78a:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
    c78c:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    c78e:	e7db      	b.n	c748 <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
    c790:	2300      	movs	r3, #0
  return true;
    c792:	4628      	mov	r0, r5
  m_busyFcn = 0;
    c794:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
    c796:	e7d7      	b.n	c748 <SdioCard::stopTransmission(bool)+0x2c>
    c798:	402c0000 	.word	0x402c0000
    c79c:	0cdb0000 	.word	0x0cdb0000
    c7a0:	20009558 	.word	0x20009558
    c7a4:	200123d8 	.word	0x200123d8
    c7a8:	0000b64d 	.word	0x0000b64d
    c7ac:	20018cd4 	.word	0x20018cd4
    c7b0:	000f4240 	.word	0x000f4240

0000c7b4 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
    c7b4:	4b0a      	ldr	r3, [pc, #40]	; (c7e0 <SdioCard::syncDevice()+0x2c>)
    c7b6:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
    c7b8:	b510      	push	{r4, lr}
    c7ba:	4604      	mov	r4, r0
  if (!m_transferActive) {
    c7bc:	b91b      	cbnz	r3, c7c6 <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
    c7be:	7a63      	ldrb	r3, [r4, #9]
    c7c0:	b943      	cbnz	r3, c7d4 <SdioCard::syncDevice()+0x20>
  return true;
    c7c2:	2001      	movs	r0, #1
}
    c7c4:	bd10      	pop	{r4, pc}
    c7c6:	f7ff f8cf 	bl	b968 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d0fa      	beq.n	c7c4 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
    c7ce:	7a63      	ldrb	r3, [r4, #9]
    c7d0:	2b00      	cmp	r3, #0
    c7d2:	d0f6      	beq.n	c7c2 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
    c7d4:	4620      	mov	r0, r4
    c7d6:	2101      	movs	r1, #1
}
    c7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    c7dc:	f7ff bf9e 	b.w	c71c <SdioCard::stopTransmission(bool)>
    c7e0:	20019bcb 	.word	0x20019bcb

0000c7e4 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    c7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7e8:	4604      	mov	r4, r0
    c7ea:	7a00      	ldrb	r0, [r0, #8]
    c7ec:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    c7f0:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    c7f2:	f010 0501 	ands.w	r5, r0, #1
    c7f6:	d013      	beq.n	c820 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    c7f8:	0793      	lsls	r3, r2, #30
    c7fa:	d03c      	beq.n	c876 <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    c7fc:	2301      	movs	r3, #1
    c7fe:	4838      	ldr	r0, [pc, #224]	; (c8e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    c800:	466a      	mov	r2, sp
    c802:	f7ff fc01 	bl	c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c806:	2800      	cmp	r0, #0
    c808:	d03a      	beq.n	c880 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
    c80a:	f44f 7200 	mov.w	r2, #512	; 0x200
    c80e:	4669      	mov	r1, sp
    c810:	4630      	mov	r0, r6
    c812:	f001 fd7f 	bl	e314 <memcpy>
}
    c816:	4628      	mov	r0, r5
    c818:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    c820:	f8df 80cc 	ldr.w	r8, [pc, #204]	; c8f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
    c824:	460f      	mov	r7, r1
    c826:	f898 3000 	ldrb.w	r3, [r8]
    c82a:	2b00      	cmp	r3, #0
    c82c:	d135      	bne.n	c89a <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
    c82e:	7a63      	ldrb	r3, [r4, #9]
    c830:	2b01      	cmp	r3, #1
    c832:	d039      	beq.n	c8a8 <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
    c834:	6822      	ldr	r2, [r4, #0]
    c836:	492b      	ldr	r1, [pc, #172]	; (c8e4 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
    c838:	6a12      	ldr	r2, [r2, #32]
    c83a:	428a      	cmp	r2, r1
    c83c:	d14a      	bne.n	c8d4 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
    c83e:	f898 2000 	ldrb.w	r2, [r8]
    c842:	2a00      	cmp	r2, #0
    c844:	d134      	bne.n	c8b0 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
    c846:	2b00      	cmp	r3, #0
    c848:	d139      	bne.n	c8be <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
    c84a:	4639      	mov	r1, r7
    c84c:	4620      	mov	r0, r4
    c84e:	f7ff fefb 	bl	c648 <SdioCard::readStart(unsigned long)>
    c852:	b1e8      	cbz	r0, c890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
    c854:	2301      	movs	r3, #1
      m_curSector = sector;
    c856:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
    c858:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
    c85a:	4631      	mov	r1, r6
    c85c:	4620      	mov	r0, r4
    c85e:	f7ff fe75 	bl	c54c <SdioCard::readData(unsigned char*)>
    c862:	b1a8      	cbz	r0, c890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
    c864:	6863      	ldr	r3, [r4, #4]
  return true;
    c866:	4605      	mov	r5, r0
    m_curSector++;
    c868:	3301      	adds	r3, #1
}
    c86a:	4628      	mov	r0, r5
    m_curSector++;
    c86c:	6063      	str	r3, [r4, #4]
}
    c86e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    c876:	2301      	movs	r3, #1
    c878:	4819      	ldr	r0, [pc, #100]	; (c8e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
    c87a:	f7ff fbc5 	bl	c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c87e:	b938      	cbnz	r0, c890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
    c880:	4919      	ldr	r1, [pc, #100]	; (c8e8 <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
    c882:	200b      	movs	r0, #11
  m_errorLine = line;
    c884:	4b19      	ldr	r3, [pc, #100]	; (c8ec <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
    c886:	f44f 725d 	mov.w	r2, #884	; 0x374
      return sdError(SD_CARD_ERROR_CMD17);
    c88a:	2500      	movs	r5, #0
  m_errorCode = code;
    c88c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c88e:	601a      	str	r2, [r3, #0]
}
    c890:	4628      	mov	r0, r5
    c892:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c89a:	f7ff f865 	bl	b968 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    c89e:	2800      	cmp	r0, #0
    c8a0:	d0f6      	beq.n	c890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
    c8a2:	7a63      	ldrb	r3, [r4, #9]
    c8a4:	2b01      	cmp	r3, #1
    c8a6:	d1c5      	bne.n	c834 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    c8a8:	6862      	ldr	r2, [r4, #4]
    c8aa:	42ba      	cmp	r2, r7
    c8ac:	d1c2      	bne.n	c834 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
    c8ae:	e7d4      	b.n	c85a <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
    c8b0:	f7ff f85a 	bl	b968 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c8b4:	2800      	cmp	r0, #0
    c8b6:	d0eb      	beq.n	c890 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
    c8b8:	7a63      	ldrb	r3, [r4, #9]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d0c5      	beq.n	c84a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
    c8be:	2101      	movs	r1, #1
    c8c0:	4620      	mov	r0, r4
    c8c2:	f7ff ff2b 	bl	c71c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    c8c6:	2800      	cmp	r0, #0
    c8c8:	d1bf      	bne.n	c84a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
    c8ca:	4628      	mov	r0, r5
    c8cc:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
    c8d4:	4620      	mov	r0, r4
    c8d6:	4790      	blx	r2
    c8d8:	2800      	cmp	r0, #0
    c8da:	d0f6      	beq.n	c8ca <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
    c8dc:	e7b5      	b.n	c84a <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    c8de:	bf00      	nop
    c8e0:	113a0011 	.word	0x113a0011
    c8e4:	0000c7b5 	.word	0x0000c7b5
    c8e8:	20009558 	.word	0x20009558
    c8ec:	200123d8 	.word	0x200123d8
    c8f0:	20019bcb 	.word	0x20019bcb

0000c8f4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    c8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8f8:	7a04      	ldrb	r4, [r0, #8]
    c8fa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    c8fe:	460f      	mov	r7, r1
    c900:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
    c902:	f014 0401 	ands.w	r4, r4, #1
    c906:	d01d      	beq.n	c944 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
    c908:	f012 0f03 	tst.w	r2, #3
    c90c:	d006      	beq.n	c91c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
    c90e:	4668      	mov	r0, sp
    c910:	4611      	mov	r1, r2
    c912:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
    c916:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
    c918:	f001 fcfc 	bl	e314 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    c91c:	2301      	movs	r3, #1
    c91e:	4642      	mov	r2, r8
    c920:	4639      	mov	r1, r7
    c922:	482c      	ldr	r0, [pc, #176]	; (c9d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
    c924:	f7ff fb70 	bl	c008 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    c928:	4604      	mov	r4, r0
    c92a:	b930      	cbnz	r0, c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
    c92c:	492a      	ldr	r1, [pc, #168]	; (c9d8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
    c92e:	200d      	movs	r0, #13
  m_errorLine = line;
    c930:	4b2a      	ldr	r3, [pc, #168]	; (c9dc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
    c932:	f240 4211 	movw	r2, #1041	; 0x411
  m_errorCode = code;
    c936:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    c938:	601a      	str	r2, [r3, #0]
}
    c93a:	4620      	mov	r0, r4
    c93c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
    c944:	4d26      	ldr	r5, [pc, #152]	; (c9e0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
    c946:	4606      	mov	r6, r0
    c948:	782b      	ldrb	r3, [r5, #0]
    c94a:	bb2b      	cbnz	r3, c998 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c94c:	7a73      	ldrb	r3, [r6, #9]
    c94e:	2b02      	cmp	r3, #2
    c950:	d029      	beq.n	c9a6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
    c952:	6832      	ldr	r2, [r6, #0]
    c954:	4923      	ldr	r1, [pc, #140]	; (c9e4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
    c956:	6a12      	ldr	r2, [r2, #32]
    c958:	428a      	cmp	r2, r1
    c95a:	d136      	bne.n	c9ca <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
    c95c:	782a      	ldrb	r2, [r5, #0]
    c95e:	bb32      	cbnz	r2, c9ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
    c960:	2b00      	cmp	r3, #0
    c962:	d12b      	bne.n	c9bc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
    c964:	6833      	ldr	r3, [r6, #0]
    c966:	4639      	mov	r1, r7
    c968:	4630      	mov	r0, r6
    c96a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c96c:	4798      	blx	r3
    c96e:	2800      	cmp	r0, #0
    c970:	d0e3      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
    c972:	2302      	movs	r3, #2
      m_curSector = sector;
    c974:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
    c976:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
    c978:	6833      	ldr	r3, [r6, #0]
    c97a:	4641      	mov	r1, r8
    c97c:	4630      	mov	r0, r6
    c97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    c980:	4798      	blx	r3
    c982:	2800      	cmp	r0, #0
    c984:	d0d9      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
    c986:	6873      	ldr	r3, [r6, #4]
  return true;
    c988:	4604      	mov	r4, r0
    m_curSector++;
    c98a:	3301      	adds	r3, #1
}
    c98c:	4620      	mov	r0, r4
    m_curSector++;
    c98e:	6073      	str	r3, [r6, #4]
}
    c990:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    c994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c998:	f7fe ffe6 	bl	b968 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
    c99c:	2800      	cmp	r0, #0
    c99e:	d0cc      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    c9a0:	7a73      	ldrb	r3, [r6, #9]
    c9a2:	2b02      	cmp	r3, #2
    c9a4:	d1d5      	bne.n	c952 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    c9a6:	6872      	ldr	r2, [r6, #4]
    c9a8:	42ba      	cmp	r2, r7
    c9aa:	d1d2      	bne.n	c952 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
    c9ac:	e7e4      	b.n	c978 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    c9ae:	f7fe ffdb 	bl	b968 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d0c1      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
    c9b6:	7a73      	ldrb	r3, [r6, #9]
    c9b8:	2b00      	cmp	r3, #0
    c9ba:	d0d3      	beq.n	c964 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
    c9bc:	2101      	movs	r1, #1
    c9be:	4630      	mov	r0, r6
    c9c0:	f7ff feac 	bl	c71c <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
    c9c4:	2800      	cmp	r0, #0
    c9c6:	d0b8      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    c9c8:	e7cc      	b.n	c964 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    c9ca:	4630      	mov	r0, r6
    c9cc:	4790      	blx	r2
    c9ce:	2800      	cmp	r0, #0
    c9d0:	d0b3      	beq.n	c93a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    c9d2:	e7c7      	b.n	c964 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    c9d4:	183a0001 	.word	0x183a0001
    c9d8:	20009558 	.word	0x20009558
    c9dc:	200123d8 	.word	0x200123d8
    c9e0:	20019bcb 	.word	0x20019bcb
    c9e4:	0000c7b5 	.word	0x0000c7b5

0000c9e8 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    c9e8:	f001 ba0e 	b.w	de08 <digitalWrite>

0000c9ec <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    c9ec:	b430      	push	{r4, r5}
    c9ee:	b082      	sub	sp, #8
    c9f0:	460c      	mov	r4, r1
    c9f2:	ab02      	add	r3, sp, #8
    c9f4:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    c9f8:	7cc3      	ldrb	r3, [r0, #19]
    c9fa:	2b00      	cmp	r3, #0
    c9fc:	d030      	beq.n	ca60 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    c9fe:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    ca00:	7cc3      	ldrb	r3, [r0, #19]
    ca02:	07da      	lsls	r2, r3, #31
    ca04:	d508      	bpl.n	ca18 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    ca06:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca0a:	6945      	ldr	r5, [r0, #20]
    ca0c:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    ca10:	402a      	ands	r2, r5
    ca12:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    ca14:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    ca18:	079d      	lsls	r5, r3, #30
    ca1a:	d508      	bpl.n	ca2e <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    ca1c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca20:	6985      	ldr	r5, [r0, #24]
    ca22:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    ca26:	402a      	ands	r2, r5
    ca28:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    ca2a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    ca2e:	0759      	lsls	r1, r3, #29
    ca30:	d508      	bpl.n	ca44 <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    ca32:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca36:	69c5      	ldr	r5, [r0, #28]
    ca38:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    ca3c:	402a      	ands	r2, r5
    ca3e:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    ca40:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    ca44:	071a      	lsls	r2, r3, #28
    ca46:	d508      	bpl.n	ca5a <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    ca48:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ca4c:	6a05      	ldr	r5, [r0, #32]
    ca4e:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    ca52:	402a      	ands	r2, r5
    ca54:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    ca56:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    ca5a:	06db      	lsls	r3, r3, #27
    ca5c:	d42f      	bmi.n	cabe <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    ca5e:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    ca60:	6883      	ldr	r3, [r0, #8]
    ca62:	429c      	cmp	r4, r3
    ca64:	d035      	beq.n	cad2 <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    ca66:	4b22      	ldr	r3, [pc, #136]	; (caf0 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    ca68:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    ca6a:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    ca6c:	4a21      	ldr	r2, [pc, #132]	; (caf4 <SPIClass::beginTransaction(SPISettings)+0x108>)
    ca6e:	f3c3 1101 	ubfx	r1, r3, #4, #2
    ca72:	f3c3 6382 	ubfx	r3, r3, #26, #3
    ca76:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    ca7a:	3301      	adds	r3, #1
    ca7c:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    ca80:	b1cc      	cbz	r4, cab6 <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    ca82:	4294      	cmp	r4, r2
    ca84:	d827      	bhi.n	cad6 <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    ca86:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    ca8a:	fbb2 f2f3 	udiv	r2, r2, r3
    ca8e:	4294      	cmp	r4, r2
    ca90:	d32c      	bcc.n	caec <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    ca92:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    ca96:	d320      	bcc.n	cada <SPIClass::beginTransaction(SPISettings)+0xee>
    ca98:	4c17      	ldr	r4, [pc, #92]	; (caf8 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    ca9a:	60c4      	str	r4, [r0, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    ca9c:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    ca9e:	2203      	movs	r2, #3
		port().CR = 0;
    caa0:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    caa2:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    caa4:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    caa6:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    caa8:	2201      	movs	r2, #1
		port().CCR = _ccr;
    caaa:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    caac:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    caae:	611a      	str	r2, [r3, #16]
	}
    cab0:	b002      	add	sp, #8
    cab2:	bc30      	pop	{r4, r5}
    cab4:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    cab6:	4299      	cmp	r1, r3
    cab8:	d3ef      	bcc.n	ca9a <SPIClass::beginTransaction(SPISettings)+0xae>
    caba:	1c53      	adds	r3, r2, #1
    cabc:	e7e9      	b.n	ca92 <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    cabe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    cac2:	6a41      	ldr	r1, [r0, #36]	; 0x24
    cac4:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    cac8:	400b      	ands	r3, r1
    caca:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    cacc:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    cad0:	e7c5      	b.n	ca5e <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    cad2:	68c4      	ldr	r4, [r0, #12]
    cad4:	e7e2      	b.n	ca9c <SPIClass::beginTransaction(SPISettings)+0xb0>
    cad6:	2400      	movs	r4, #0
    cad8:	e7df      	b.n	ca9a <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    cada:	2b02      	cmp	r3, #2
    cadc:	d9fb      	bls.n	cad6 <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    cade:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    cae0:	085a      	lsrs	r2, r3, #1
    cae2:	0214      	lsls	r4, r2, #8
    cae4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    cae8:	431c      	orrs	r4, r3
    caea:	e7d6      	b.n	ca9a <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    caec:	461a      	mov	r2, r3
    caee:	e7e4      	b.n	caba <SPIClass::beginTransaction(SPISettings)+0xce>
    caf0:	400fc000 	.word	0x400fc000
    caf4:	20000e28 	.word	0x20000e28
    caf8:	007f7fff 	.word	0x007f7fff

0000cafc <SdSpiArduinoDriver::activate()>:
void SdSpiArduinoDriver::activate() {
    cafc:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    cafe:	4603      	mov	r3, r0
    cb00:	f853 0b04 	ldr.w	r0, [r3], #4
    cb04:	e893 0006 	ldmia.w	r3, {r1, r2}
    cb08:	f7ff ff70 	bl	c9ec <SPIClass::beginTransaction(SPISettings)>
}
    cb0c:	bd08      	pop	{r3, pc}
    cb0e:	bf00      	nop

0000cb10 <SdSpiArduinoDriver::deactivate()>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    cb10:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
    cb12:	7cd3      	ldrb	r3, [r2, #19]
    cb14:	b313      	cbz	r3, cb5c <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    cb16:	07d8      	lsls	r0, r3, #31
    cb18:	d504      	bpl.n	cb24 <SdSpiArduinoDriver::deactivate()+0x14>
    cb1a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    cb1c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cb20:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    cb24:	0799      	lsls	r1, r3, #30
    cb26:	d504      	bpl.n	cb32 <SdSpiArduinoDriver::deactivate()+0x22>
    cb28:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    cb2a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cb2e:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    cb32:	0758      	lsls	r0, r3, #29
    cb34:	d504      	bpl.n	cb40 <SdSpiArduinoDriver::deactivate()+0x30>
    cb36:	6b10      	ldr	r0, [r2, #48]	; 0x30
    cb38:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cb3c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    cb40:	0719      	lsls	r1, r3, #28
    cb42:	d504      	bpl.n	cb4e <SdSpiArduinoDriver::deactivate()+0x3e>
    cb44:	6b50      	ldr	r0, [r2, #52]	; 0x34
    cb46:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cb4a:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    cb4e:	06db      	lsls	r3, r3, #27
    cb50:	d504      	bpl.n	cb5c <SdSpiArduinoDriver::deactivate()+0x4c>
    cb52:	6b92      	ldr	r2, [r2, #56]	; 0x38
    cb54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cb58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    cb5c:	4770      	bx	lr
    cb5e:	bf00      	nop

0000cb60 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    cb60:	6800      	ldr	r0, [r0, #0]
    cb62:	f000 b9f9 	b.w	cf58 <SPIClass::end()>
    cb66:	bf00      	nop

0000cb68 <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cb68:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
    cb6a:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cb6c:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
    cb6e:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cb70:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cb72:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    cb76:	d0fb      	beq.n	cb70 <SdSpiArduinoDriver::receive()+0x8>
    cb78:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
    cb7a:	b2c0      	uxtb	r0, r0
    cb7c:	4770      	bx	lr
    cb7e:	bf00      	nop

0000cb80 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    cb80:	b530      	push	{r4, r5, lr}
    cb82:	460c      	mov	r4, r1
    cb84:	b083      	sub	sp, #12
    cb86:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    cb88:	21ff      	movs	r1, #255	; 0xff
    cb8a:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    cb8c:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    cb8e:	f005 fc4f 	bl	12430 <memset>
		transfer(buf, buf, count);
    cb92:	6828      	ldr	r0, [r5, #0]
    cb94:	9b01      	ldr	r3, [sp, #4]
    cb96:	4622      	mov	r2, r4
    cb98:	4621      	mov	r1, r4
    cb9a:	f000 f9d9 	bl	cf50 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    cb9e:	2000      	movs	r0, #0
    cba0:	b003      	add	sp, #12
    cba2:	bd30      	pop	{r4, r5, pc}

0000cba4 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cba4:	6803      	ldr	r3, [r0, #0]
    cba6:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
    cba8:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cbaa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cbac:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    cbb0:	d0fb      	beq.n	cbaa <SdSpiArduinoDriver::send(unsigned char)+0x6>
    cbb2:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
    cbb4:	4770      	bx	lr
    cbb6:	bf00      	nop

0000cbb8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    cbb8:	1e53      	subs	r3, r2, #1
    cbba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    cbbe:	b530      	push	{r4, r5, lr}
    cbc0:	4614      	mov	r4, r2
    cbc2:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    cbc6:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
    cbc8:	d311      	bcc.n	cbee <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    cbca:	b16a      	cbz	r2, cbe8 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cbcc:	6803      	ldr	r3, [r0, #0]
    cbce:	1e48      	subs	r0, r1, #1
    cbd0:	6819      	ldr	r1, [r3, #0]
    cbd2:	1882      	adds	r2, r0, r2
		port().TDR = data;
    cbd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    cbd8:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    cbda:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    cbdc:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    cbe0:	d0fb      	beq.n	cbda <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
    cbe2:	4290      	cmp	r0, r2
    cbe4:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    cbe6:	d1f5      	bne.n	cbd4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
    cbe8:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cbec:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
    cbee:	4668      	mov	r0, sp
    cbf0:	f001 fb90 	bl	e314 <memcpy>
		transfer(buf, buf, count);
    cbf4:	466a      	mov	r2, sp
    cbf6:	4623      	mov	r3, r4
    cbf8:	6828      	ldr	r0, [r5, #0]
    cbfa:	4611      	mov	r1, r2
    cbfc:	f000 f9a8 	bl	cf50 <SPIClass::transfer(void const*, void*, unsigned int)>
}
    cc00:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    cc04:	bd30      	pop	{r4, r5, pc}
    cc06:	bf00      	nop

0000cc08 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    cc08:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    cc0a:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    cc0c:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
    cc0e:	07dc      	lsls	r4, r3, #31
    cc10:	d51d      	bpl.n	cc4e <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    cc12:	4604      	mov	r4, r0
    cc14:	6840      	ldr	r0, [r0, #4]
    cc16:	f104 0210 	add.w	r2, r4, #16
    cc1a:	6803      	ldr	r3, [r0, #0]
    cc1c:	68e1      	ldr	r1, [r4, #12]
    cc1e:	9201      	str	r2, [sp, #4]
    cc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cc22:	4798      	blx	r3
    cc24:	9a01      	ldr	r2, [sp, #4]
    cc26:	4605      	mov	r5, r0
    cc28:	b1a8      	cbz	r0, cc56 <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    cc2a:	7823      	ldrb	r3, [r4, #0]
    cc2c:	0799      	lsls	r1, r3, #30
    cc2e:	d508      	bpl.n	cc42 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cc30:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
    cc32:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    cc36:	4419      	add	r1, r3
    cc38:	6803      	ldr	r3, [r0, #0]
    cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cc3c:	4798      	blx	r3
    cc3e:	b150      	cbz	r0, cc56 <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    cc40:	7823      	ldrb	r3, [r4, #0]
    cc42:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    cc46:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
    cc48:	7023      	strb	r3, [r4, #0]
}
    cc4a:	b003      	add	sp, #12
    cc4c:	bd30      	pop	{r4, r5, pc}
  return true;
    cc4e:	2501      	movs	r5, #1
}
    cc50:	4628      	mov	r0, r5
    cc52:	b003      	add	sp, #12
    cc54:	bd30      	pop	{r4, r5, pc}
  return false;
    cc56:	2500      	movs	r5, #0
}
    cc58:	4628      	mov	r0, r5
    cc5a:	b003      	add	sp, #12
    cc5c:	bd30      	pop	{r4, r5, pc}
    cc5e:	bf00      	nop

0000cc60 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    cc62:	6843      	ldr	r3, [r0, #4]
    cc64:	b30b      	cbz	r3, ccaa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
    cc66:	68c3      	ldr	r3, [r0, #12]
    cc68:	4604      	mov	r4, r0
    cc6a:	460f      	mov	r7, r1
    cc6c:	4615      	mov	r5, r2
    cc6e:	428b      	cmp	r3, r1
    cc70:	d106      	bne.n	cc80 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
    cc72:	f810 3b10 	ldrb.w	r3, [r0], #16
    cc76:	f005 0503 	and.w	r5, r5, #3
    cc7a:	432b      	orrs	r3, r5
    cc7c:	7023      	strb	r3, [r4, #0]
}
    cc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
    cc80:	f7ff ffc2 	bl	cc08 <FsCache::sync()>
    cc84:	b188      	cbz	r0, ccaa <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
    cc86:	076b      	lsls	r3, r5, #29
    cc88:	d505      	bpl.n	cc96 <FsCache::prepare(unsigned long, unsigned char)+0x36>
    cc8a:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cc8e:	4630      	mov	r0, r6
    m_sector = sector;
    cc90:	2300      	movs	r3, #0
    cc92:	60e7      	str	r7, [r4, #12]
    cc94:	e7ef      	b.n	cc76 <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    cc96:	6860      	ldr	r0, [r4, #4]
    cc98:	f104 0610 	add.w	r6, r4, #16
    cc9c:	4639      	mov	r1, r7
    cc9e:	6803      	ldr	r3, [r0, #0]
    cca0:	4632      	mov	r2, r6
    cca2:	691b      	ldr	r3, [r3, #16]
    cca4:	4798      	blx	r3
    cca6:	2800      	cmp	r0, #0
    cca8:	d1f1      	bne.n	cc8e <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
    ccaa:	2000      	movs	r0, #0
}
    ccac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccae:	bf00      	nop

0000ccb0 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
    ccb0:	b510      	push	{r4, lr}
    ccb2:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
    ccb4:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
    ccb6:	b082      	sub	sp, #8
  if (ls) {
    ccb8:	b118      	cbz	r0, ccc2 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    ccba:	2300      	movs	r3, #0
    ccbc:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    ccbe:	b002      	add	sp, #8
    ccc0:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
    ccc2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    ccc6:	428b      	cmp	r3, r1
    ccc8:	d2f9      	bcs.n	ccbe <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    ccca:	aa01      	add	r2, sp, #4
    cccc:	4618      	mov	r0, r3
    ccce:	f000 f867 	bl	cda0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    ccd2:	b180      	cbz	r0, ccf6 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
    ccd4:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
    ccd6:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    ccd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    ccdc:	d201      	bcs.n	cce2 <FsName::get16()+0x32>
      rtn = cp;
    ccde:	b298      	uxth	r0, r3
    cce0:	e7ed      	b.n	ccbe <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cce2:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
    cce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    cce8:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
    ccec:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    ccf0:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
    ccf2:	81a3      	strh	r3, [r4, #12]
    ccf4:	e7e3      	b.n	ccbe <FsName::get16()+0xe>
  return 0XFFFF;
    ccf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ccfa:	e7e0      	b.n	ccbe <FsName::get16()+0xe>

0000ccfc <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
    ccfc:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
    ccfe:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
    cd02:	d805      	bhi.n	cd10 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    cd04:	b112      	cbz	r2, cd0c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
    cd06:	460a      	mov	r2, r1
    cd08:	f802 0b01 	strb.w	r0, [r2], #1
  }
    cd0c:	4610      	mov	r0, r2
    cd0e:	4770      	bx	lr
    } else if (cp < 0X800) {
    cd10:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cd14:	d20f      	bcs.n	cd36 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
    cd16:	2a01      	cmp	r2, #1
    cd18:	d940      	bls.n	cd9c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cd1a:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd1e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cd22:	460a      	mov	r2, r1
    cd24:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd28:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    cd2c:	f802 0b02 	strb.w	r0, [r2], #2
  }
    cd30:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd32:	704b      	strb	r3, [r1, #1]
  }
    cd34:	4770      	bx	lr
    } else if (cp < 0X10000) {
    cd36:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    cd3a:	d216      	bcs.n	cd6a <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
    cd3c:	2a02      	cmp	r2, #2
    cd3e:	d92d      	bls.n	cd9c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd40:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd44:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    cd48:	1cca      	adds	r2, r1, #3
    cd4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
    cd4e:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cd50:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd54:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd58:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cd5a:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd5e:	7048      	strb	r0, [r1, #1]
  }
    cd60:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    cd62:	f881 e000 	strb.w	lr, [r1]
  }
    cd66:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
    cd6a:	2a03      	cmp	r2, #3
    cd6c:	d916      	bls.n	cd9c <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cd6e:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cd72:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd76:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cd7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cd82:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd86:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd8a:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    cd8e:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd90:	1d0a      	adds	r2, r1, #4
    cd92:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    cd94:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    cd98:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    cd9a:	e7b7      	b.n	cd0c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
    cd9c:	2200      	movs	r2, #0
    cd9e:	e7b5      	b.n	cd0c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

0000cda0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    cda0:	4288      	cmp	r0, r1
    cda2:	d23d      	bcs.n	ce20 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    cda4:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    cda6:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
    cda8:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
    cdac:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
    cdae:	2800      	cmp	r0, #0
    cdb0:	da2d      	bge.n	ce0e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
    cdb2:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
    cdb6:	28c0      	cmp	r0, #192	; 0xc0
    cdb8:	d034      	beq.n	ce24 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
    cdba:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
    cdbe:	28e0      	cmp	r0, #224	; 0xe0
    cdc0:	d034      	beq.n	ce2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
    cdc2:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
    cdc6:	28f0      	cmp	r0, #240	; 0xf0
    cdc8:	d126      	bne.n	ce18 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
    cdca:	f004 0407 	and.w	r4, r4, #7
      n = 4;
    cdce:	2004      	movs	r0, #4
    if ((str + n) > end) {
    cdd0:	4418      	add	r0, r3
    cdd2:	4288      	cmp	r0, r1
    cdd4:	d820      	bhi.n	ce18 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    cdd6:	3301      	adds	r3, #1
      ch = str[i];
    cdd8:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
    cddc:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
    cde0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
    cde4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
    cde8:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
    cdec:	d114      	bne.n	ce18 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
    cdee:	4283      	cmp	r3, r0
    cdf0:	d1f2      	bne.n	cdd8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
    cdf2:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
    cdf6:	4b0f      	ldr	r3, [pc, #60]	; (ce34 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
    cdf8:	4299      	cmp	r1, r3
    cdfa:	d80d      	bhi.n	ce18 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    cdfc:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
    ce00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    ce04:	d308      	bcc.n	ce18 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
    ce06:	6014      	str	r4, [r2, #0]
  }
    ce08:	f85d 4b04 	ldr.w	r4, [sp], #4
    ce0c:	4770      	bx	lr
      return str + 1;
    ce0e:	1c58      	adds	r0, r3, #1
      *rtn = ch;
    ce10:	6014      	str	r4, [r2, #0]
  }
    ce12:	f85d 4b04 	ldr.w	r4, [sp], #4
    ce16:	4770      	bx	lr
      return nullptr;
    ce18:	2000      	movs	r0, #0
  }
    ce1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    ce1e:	4770      	bx	lr
      return nullptr;
    ce20:	2000      	movs	r0, #0
  }
    ce22:	4770      	bx	lr
      cp = ch & 0X1F;
    ce24:	f004 041f 	and.w	r4, r4, #31
      n = 2;
    ce28:	2002      	movs	r0, #2
    ce2a:	e7d1      	b.n	cdd0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
    ce2c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
    ce30:	2003      	movs	r0, #3
    ce32:	e7cd      	b.n	cdd0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
    ce34:	0010ff7f 	.word	0x0010ff7f

0000ce38 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    ce38:	287e      	cmp	r0, #126	; 0x7e
    ce3a:	d93e      	bls.n	ceba <toUpcase(unsigned short)+0x82>
  size_t right = size;
    ce3c:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
    ce40:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
    ce42:	b430      	push	{r4, r5}
    ce44:	4c28      	ldr	r4, [pc, #160]	; (cee8 <toUpcase(unsigned short)+0xb0>)
    ce46:	e004      	b.n	ce52 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
    ce48:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
    ce4c:	4282      	cmp	r2, r0
    ce4e:	d820      	bhi.n	ce92 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
    ce50:	460b      	mov	r3, r1
  while (right - left > 1) {
    ce52:	ebac 0203 	sub.w	r2, ip, r3
    ce56:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    ce58:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    ce5c:	d8f4      	bhi.n	ce48 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
    ce5e:	b29b      	uxth	r3, r3
    ce60:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    ce64:	4290      	cmp	r0, r2
    ce66:	d216      	bcs.n	ce96 <toUpcase(unsigned short)+0x5e>
    ce68:	244b      	movs	r4, #75	; 0x4b
    ce6a:	2300      	movs	r3, #0
    ce6c:	4d1f      	ldr	r5, [pc, #124]	; (ceec <toUpcase(unsigned short)+0xb4>)
    ce6e:	e004      	b.n	ce7a <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
    ce70:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
    ce74:	4282      	cmp	r2, r0
    ce76:	d81e      	bhi.n	ceb6 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
    ce78:	460b      	mov	r3, r1
  while (right - left > 1) {
    ce7a:	1ae2      	subs	r2, r4, r3
    ce7c:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
    ce7e:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
    ce82:	d8f5      	bhi.n	ce70 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    ce84:	b29b      	uxth	r3, r3
    ce86:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
    ce8a:	4282      	cmp	r2, r0
    ce8c:	d01f      	beq.n	cece <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    ce8e:	bc30      	pop	{r4, r5}
    ce90:	4770      	bx	lr
    mid = left + (right - left)/2;
    ce92:	468c      	mov	ip, r1
    ce94:	e7dd      	b.n	ce52 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    ce96:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    ce9a:	1a82      	subs	r2, r0, r2
    ce9c:	78e3      	ldrb	r3, [r4, #3]
    ce9e:	429a      	cmp	r2, r3
    cea0:	dae2      	bge.n	ce68 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
    cea2:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
    cea6:	2b01      	cmp	r3, #1
    cea8:	d016      	beq.n	ced8 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
    ceaa:	b1d3      	cbz	r3, cee2 <toUpcase(unsigned short)+0xaa>
    ceac:	b29b      	uxth	r3, r3
    ceae:	4403      	add	r3, r0
}
    ceb0:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
    ceb2:	b298      	uxth	r0, r3
}
    ceb4:	4770      	bx	lr
    mid = left + (right - left)/2;
    ceb6:	460c      	mov	r4, r1
    ceb8:	e7df      	b.n	ce7a <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    ceba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    cebe:	2b19      	cmp	r3, #25
    cec0:	bf8c      	ite	hi
    cec2:	2300      	movhi	r3, #0
    cec4:	2301      	movls	r3, #1
    cec6:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
    ceca:	b298      	uxth	r0, r3
}
    cecc:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
    cece:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    ced2:	8868      	ldrh	r0, [r5, #2]
}
    ced4:	bc30      	pop	{r4, r5}
    ced6:	4770      	bx	lr
      return chr - ((chr - first) & 1);
    ced8:	f002 0201 	and.w	r2, r2, #1
    cedc:	1a83      	subs	r3, r0, r2
    cede:	b298      	uxth	r0, r3
    cee0:	e7d5      	b.n	ce8e <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
    cee2:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
    cee6:	e7e2      	b.n	ceae <toUpcase(unsigned short)+0x76>
    cee8:	20000a68 	.word	0x20000a68
    ceec:	20000888 	.word	0x20000888

0000cef0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    cef0:	b4f0      	push	{r4, r5, r6, r7}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cef2:	6804      	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cef4:	f240 2501 	movw	r5, #513	; 0x201

	while (count > 0) {
    cef8:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    cefa:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    cefc:	b1a3      	cbz	r3, cf28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cefe:	b321      	cbz	r1, cf4a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    cf00:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    cf04:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cf06:	6665      	str	r5, [r4, #100]	; 0x64
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    cf08:	6f25      	ldr	r5, [r4, #112]	; 0x70
    cf0a:	07af      	lsls	r7, r5, #30
    cf0c:	d407      	bmi.n	cf1e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
				if (p_read) *p_read++ = b; 
    cf0e:	4615      	mov	r5, r2
				count_read--;
    cf10:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    cf12:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    cf14:	b11a      	cbz	r2, cf1e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    cf16:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    cf1a:	462a      	mov	r2, r5
    cf1c:	6804      	ldr	r4, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    cf1e:	6965      	ldr	r5, [r4, #20]
    cf20:	07ed      	lsls	r5, r5, #31
    cf22:	d5f1      	bpl.n	cf08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    cf24:	2b00      	cmp	r3, #0
    cf26:	d1ea      	bne.n	cefe <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    cf28:	b16e      	cbz	r6, cf46 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    cf2a:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    cf2c:	6f19      	ldr	r1, [r3, #112]	; 0x70
    cf2e:	0789      	lsls	r1, r1, #30
    cf30:	d4fa      	bmi.n	cf28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
    cf32:	4611      	mov	r1, r2
			count_read--;
    cf34:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    cf36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    cf38:	2a00      	cmp	r2, #0
    cf3a:	d0f5      	beq.n	cf28 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    cf3c:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    cf40:	460a      	mov	r2, r1
	while (count_read) {
    cf42:	2e00      	cmp	r6, #0
    cf44:	d1f1      	bne.n	cf2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
		}
	}
}
    cf46:	bcf0      	pop	{r4, r5, r6, r7}
    cf48:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    cf4a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    cf4e:	e7d9      	b.n	cf04 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000cf50 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    cf50:	b10b      	cbz	r3, cf56 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    cf52:	f7ff bfcd 	b.w	cef0 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    cf56:	4770      	bx	lr

0000cf58 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    cf58:	6843      	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    cf5a:	e9d3 1200 	ldrd	r1, r2, [r3]
    cf5e:	6809      	ldr	r1, [r1, #0]
    cf60:	4211      	tst	r1, r2
    cf62:	d100      	bne.n	cf66 <SPIClass::end()+0xe>
    cf64:	4770      	bx	lr
void SPIClass::end() {
    cf66:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    cf68:	6802      	ldr	r2, [r0, #0]
    cf6a:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    cf6c:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    cf6e:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    cf70:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    cf72:	7c22      	ldrb	r2, [r4, #16]
    cf74:	4413      	add	r3, r2
    cf76:	7c18      	ldrb	r0, [r3, #16]
    cf78:	f000 ff70 	bl	de5c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    cf7c:	7c62      	ldrb	r2, [r4, #17]
    cf7e:	6863      	ldr	r3, [r4, #4]
    cf80:	2105      	movs	r1, #5
    cf82:	4413      	add	r3, r2
    cf84:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    cf88:	f000 ff68 	bl	de5c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    cf8c:	6863      	ldr	r3, [r4, #4]
    cf8e:	7ca2      	ldrb	r2, [r4, #18]
    cf90:	2105      	movs	r1, #5
    cf92:	4413      	add	r3, r2
	}
}
    cf94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    cf98:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    cf9c:	f000 bf5e 	b.w	de5c <pinMode>

0000cfa0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    cfa0:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
    cfa4:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
    cfa8:	429a      	cmp	r2, r3
    cfaa:	d902      	bls.n	cfb2 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    cfac:	4418      	add	r0, r3
    cfae:	7e80      	ldrb	r0, [r0, #26]
    cfb0:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
    cfb2:	f04f 30ff 	mov.w	r0, #4294967295
	}
    cfb6:	4770      	bx	lr

0000cfb8 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    cfb8:	4770      	bx	lr
    cfba:	bf00      	nop

0000cfbc <TwoWire::write(unsigned char)>:
{
    cfbc:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
    cfbe:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
    cfc2:	b178      	cbz	r0, cfe4 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    cfc4:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
    cfc8:	2a88      	cmp	r2, #136	; 0x88
    cfca:	d903      	bls.n	cfd4 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    cfcc:	2201      	movs	r2, #1
			return 0;
    cfce:	2000      	movs	r0, #0
    cfd0:	605a      	str	r2, [r3, #4]
    cfd2:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
    cfd4:	f102 0c01 	add.w	ip, r2, #1
		return 1;
    cfd8:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
    cfda:	441a      	add	r2, r3
    cfdc:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
    cfe0:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
    cfe4:	4770      	bx	lr
    cfe6:	bf00      	nop

0000cfe8 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    cfe8:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    cfea:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
    cfee:	b90c      	cbnz	r4, cff4 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
    cff0:	4620      	mov	r0, r4
    cff2:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    cff4:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
    cff8:	4605      	mov	r5, r0
    cffa:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
    cffe:	42a2      	cmp	r2, r4
    d000:	d80d      	bhi.n	d01e <TwoWire::write(unsigned char const*, unsigned int)+0x36>
    d002:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
    d004:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
    d008:	4622      	mov	r2, r4
    d00a:	4418      	add	r0, r3
    d00c:	f001 f982 	bl	e314 <memcpy>
		txBufferLength += quantity;
    d010:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
    d014:	4620      	mov	r0, r4
		txBufferLength += quantity;
    d016:	4423      	add	r3, r4
    d018:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
    d01c:	bd38      	pop	{r3, r4, r5, pc}
    d01e:	2201      	movs	r2, #1
    d020:	6042      	str	r2, [r0, #4]
    d022:	e7ef      	b.n	d004 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

0000d024 <TwoWire::force_clock()>:
{
    d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d028:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d02c:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d02e:	7e01      	ldrb	r1, [r0, #24]
{
    d030:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d032:	7e43      	ldrb	r3, [r0, #25]
{
    d034:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d036:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d03a:	4a38      	ldr	r2, [pc, #224]	; (d11c <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d03c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d040:	4f37      	ldr	r7, [pc, #220]	; (d120 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    d042:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    d044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    d048:	eb02 1501 	add.w	r5, r2, r1, lsl #4
    d04c:	0109      	lsls	r1, r1, #4
    d04e:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
    d050:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d054:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d058:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    d05c:	011b      	lsls	r3, r3, #4
    d05e:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
    d060:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    d062:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
    d066:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    d06a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d06e:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d070:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
    d072:	492c      	ldr	r1, [pc, #176]	; (d124 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d074:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    d076:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    d07a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    d07c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    d080:	686b      	ldr	r3, [r5, #4]
    d082:	4333      	orrs	r3, r6
    d084:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d086:	4b28      	ldr	r3, [pc, #160]	; (d128 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
    d088:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d08a:	683a      	ldr	r2, [r7, #0]
    d08c:	fba3 3202 	umull	r3, r2, r3, r2
    d090:	0c92      	lsrs	r2, r2, #18
    d092:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    d096:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d098:	684b      	ldr	r3, [r1, #4]
    d09a:	1b1b      	subs	r3, r3, r4
    d09c:	429a      	cmp	r2, r3
    d09e:	d8fb      	bhi.n	d098 <TwoWire::force_clock()+0x74>
    d0a0:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    d0a4:	4a1f      	ldr	r2, [pc, #124]	; (d124 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d0a6:	f8df e080 	ldr.w	lr, [pc, #128]	; d128 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
    d0aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    d0ae:	4203      	tst	r3, r0
    d0b0:	d002      	beq.n	d0b8 <TwoWire::force_clock()+0x94>
    d0b2:	68ab      	ldr	r3, [r5, #8]
    d0b4:	4233      	tst	r3, r6
    d0b6:	d12f      	bne.n	d118 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
    d0b8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    d0bc:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d0be:	6839      	ldr	r1, [r7, #0]
    d0c0:	fbae 3101 	umull	r3, r1, lr, r1
    d0c4:	0c89      	lsrs	r1, r1, #18
    d0c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d0ca:	6853      	ldr	r3, [r2, #4]
    d0cc:	1b1b      	subs	r3, r3, r4
    d0ce:	4299      	cmp	r1, r3
    d0d0:	d8fb      	bhi.n	d0ca <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
    d0d2:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    d0d6:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    d0d8:	6839      	ldr	r1, [r7, #0]
    d0da:	fbae 3101 	umull	r3, r1, lr, r1
    d0de:	0c89      	lsrs	r1, r1, #18
    d0e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    d0e4:	6853      	ldr	r3, [r2, #4]
    d0e6:	1b1b      	subs	r3, r3, r4
    d0e8:	4299      	cmp	r1, r3
    d0ea:	d8fb      	bhi.n	d0e4 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
    d0ec:	f1bc 0c01 	subs.w	ip, ip, #1
    d0f0:	d1db      	bne.n	d0aa <TwoWire::force_clock()+0x86>
	bool ret = false;
    d0f2:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d0f4:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d0f8:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    d0fa:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    d0fe:	68db      	ldr	r3, [r3, #12]
    d100:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    d104:	f899 3019 	ldrb.w	r3, [r9, #25]
    d108:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    d10c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    d110:	6013      	str	r3, [r2, #0]
}
    d112:	b003      	add	sp, #12
    d114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    d118:	2001      	movs	r0, #1
    d11a:	e7eb      	b.n	d0f4 <TwoWire::force_clock()+0xd0>
    d11c:	20007c5c 	.word	0x20007c5c
    d120:	20008b90 	.word	0x20008b90
    d124:	e0001000 	.word	0xe0001000
    d128:	431bde83 	.word	0x431bde83

0000d12c <TwoWire::wait_idle()>:
	return systick_millis_count;
    d12c:	4a0e      	ldr	r2, [pc, #56]	; (d168 <TwoWire::wait_idle()+0x3c>)
{
    d12e:	b510      	push	{r4, lr}
    d130:	6811      	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d132:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d134:	e005      	b.n	d142 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    d136:	01db      	lsls	r3, r3, #7
    d138:	d407      	bmi.n	d14a <TwoWire::wait_idle()+0x1e>
    d13a:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    d13c:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
    d13e:	2b10      	cmp	r3, #16
    d140:	d808      	bhi.n	d154 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
    d142:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    d144:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    d148:	d1f5      	bne.n	d136 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
    d14a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d14e:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d150:	6163      	str	r3, [r4, #20]
}
    d152:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
    d154:	f7ff ff66 	bl	d024 <TwoWire::force_clock()>
    d158:	2800      	cmp	r0, #0
    d15a:	d0fa      	beq.n	d152 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
    d15c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    d160:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    d162:	6163      	str	r3, [r4, #20]
	return true;
    d164:	e7f5      	b.n	d152 <TwoWire::wait_idle()+0x26>
    d166:	bf00      	nop
    d168:	20019b88 	.word	0x20019b88

0000d16c <TwoWire::endTransmission(unsigned char)>:
{
    d16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    d170:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d174:	6905      	ldr	r5, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    d176:	f1ba 0f00 	cmp.w	sl, #0
    d17a:	d04f      	beq.n	d21c <TwoWire::endTransmission(unsigned char)+0xb0>
	if (!wait_idle()) return 4;
    d17c:	4681      	mov	r9, r0
    d17e:	4688      	mov	r8, r1
    d180:	f7ff ffd4 	bl	d12c <TwoWire::wait_idle()>
    d184:	2800      	cmp	r0, #0
    d186:	d049      	beq.n	d21c <TwoWire::endTransmission(unsigned char)+0xb0>
    d188:	4e37      	ldr	r6, [pc, #220]	; (d268 <TwoWire::endTransmission(unsigned char)+0xfc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    d18a:	2400      	movs	r4, #0
    d18c:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d18e:	e018      	b.n	d1c2 <TwoWire::endTransmission(unsigned char)+0x56>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d190:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    d192:	0519      	lsls	r1, r3, #20
    d194:	d451      	bmi.n	d23a <TwoWire::endTransmission(unsigned char)+0xce>
		if (status & LPI2C_MSR_FEF) {
    d196:	04da      	lsls	r2, r3, #19
    d198:	d455      	bmi.n	d246 <TwoWire::endTransmission(unsigned char)+0xda>
		if (status & LPI2C_MSR_NDF) {
    d19a:	0558      	lsls	r0, r3, #21
    d19c:	d459      	bmi.n	d252 <TwoWire::endTransmission(unsigned char)+0xe6>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    d19e:	0499      	lsls	r1, r3, #18
    d1a0:	d441      	bmi.n	d226 <TwoWire::endTransmission(unsigned char)+0xba>
    d1a2:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
    d1a4:	1bd2      	subs	r2, r2, r7
    d1a6:	2a32      	cmp	r2, #50	; 0x32
    d1a8:	d83d      	bhi.n	d226 <TwoWire::endTransmission(unsigned char)+0xba>
		if (tx_index > tx_len) {
    d1aa:	4554      	cmp	r4, sl
    d1ac:	d907      	bls.n	d1be <TwoWire::endTransmission(unsigned char)+0x52>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d1ae:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d1b0:	0752      	lsls	r2, r2, #29
    d1b2:	d104      	bne.n	d1be <TwoWire::endTransmission(unsigned char)+0x52>
    d1b4:	059b      	lsls	r3, r3, #22
    d1b6:	d455      	bmi.n	d264 <TwoWire::endTransmission(unsigned char)+0xf8>
    d1b8:	f1b8 0f00 	cmp.w	r8, #0
    d1bc:	d052      	beq.n	d264 <TwoWire::endTransmission(unsigned char)+0xf8>
		yield();
    d1be:	f002 fea7 	bl	ff10 <yield>
		if (tx_index <= tx_len) {
    d1c2:	4554      	cmp	r4, sl
    d1c4:	d8e4      	bhi.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d1c6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
    d1c8:	0750      	lsls	r0, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    d1ca:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
    d1ce:	d4df      	bmi.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
    d1d0:	e013      	b.n	d1fa <TwoWire::endTransmission(unsigned char)+0x8e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d1d2:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
    d1d6:	3301      	adds	r3, #1
			while (fifo_used < 4) {
    d1d8:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d1da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
    d1de:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    d1e0:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d1e2:	d01e      	beq.n	d222 <TwoWire::endTransmission(unsigned char)+0xb6>
				} else if (tx_index < tx_len) {
    d1e4:	458a      	cmp	sl, r1
				fifo_used++;
    d1e6:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d1ea:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d1ee:	d90e      	bls.n	d20e <TwoWire::endTransmission(unsigned char)+0xa2>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d1f0:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
    d1f4:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d1f6:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
    d1f8:	d0ca      	beq.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
					tx_index = 1;
    d1fa:	2101      	movs	r1, #1
				if (tx_index == 0) {
    d1fc:	2c00      	cmp	r4, #0
    d1fe:	d0e8      	beq.n	d1d2 <TwoWire::endTransmission(unsigned char)+0x66>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d200:	4621      	mov	r1, r4
				fifo_used++;
    d202:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d204:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
    d206:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    d208:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
    d20c:	d8f0      	bhi.n	d1f0 <TwoWire::endTransmission(unsigned char)+0x84>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d20e:	f1b8 0f00 	cmp.w	r8, #0
    d212:	d0bd      	beq.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
    d214:	f44f 7300 	mov.w	r3, #512	; 0x200
    d218:	662b      	str	r3, [r5, #96]	; 0x60
					break;
    d21a:	e7b9      	b.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
	if (!tx_len) return 4; // no address for transmit
    d21c:	2004      	movs	r0, #4
}
    d21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
    d222:	2401      	movs	r4, #1
    d224:	e7b4      	b.n	d190 <TwoWire::endTransmission(unsigned char)+0x24>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d226:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d228:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    d22c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d22e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d232:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d234:	662a      	str	r2, [r5, #96]	; 0x60
}
    d236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d23a:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d23c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d23e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d242:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
    d244:	e7eb      	b.n	d21e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d246:	692b      	ldr	r3, [r5, #16]
			return 5; // FIFO error
    d248:	2005      	movs	r0, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d24a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d24e:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
    d250:	e7e5      	b.n	d21e <TwoWire::endTransmission(unsigned char)+0xb2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d252:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d254:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d258:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d25a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d25e:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    d260:	662a      	str	r2, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    d262:	e7dc      	b.n	d21e <TwoWire::endTransmission(unsigned char)+0xb2>
				return 0;
    d264:	2000      	movs	r0, #0
    d266:	e7da      	b.n	d21e <TwoWire::endTransmission(unsigned char)+0xb2>
    d268:	20019b88 	.word	0x20019b88

0000d26c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    d26c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d270:	4683      	mov	fp, r0
    d272:	460c      	mov	r4, r1
    d274:	4615      	mov	r5, r2
    d276:	461f      	mov	r7, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d278:	f8d0 a010 	ldr.w	sl, [r0, #16]
	if (!wait_idle()) return 4;
    d27c:	f7ff ff56 	bl	d12c <TwoWire::wait_idle()>
    d280:	2800      	cmp	r0, #0
    d282:	f000 809e 	beq.w	d3c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x156>
	address = (address & 0x7F) << 1;
    d286:	0061      	lsls	r1, r4, #1
	if (length < 1) length = 1;
    d288:	2d01      	cmp	r5, #1
    d28a:	f8df 813c 	ldr.w	r8, [pc, #316]	; d3c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d28e:	f240 4601 	movw	r6, #1025	; 0x401
    d292:	b2cb      	uxtb	r3, r1
	rxBufferIndex = 0;
    d294:	f04f 0100 	mov.w	r1, #0
    d298:	bf38      	it	cc
    d29a:	2501      	movcc	r5, #1
    d29c:	f8d8 9000 	ldr.w	r9, [r8]
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
    d2a0:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d2a2:	431e      	orrs	r6, r3
	rxBufferIndex = 0;
    d2a4:	f8ab 10a2 	strh.w	r1, [fp, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
    d2a8:	e020      	b.n	d2ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
		if (rxBufferLength < sizeof(rxBuffer)) {
    d2aa:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d2ae:	2b87      	cmp	r3, #135	; 0x87
    d2b0:	d93f      	bls.n	d332 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d2b2:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d2b6:	0510      	lsls	r0, r2, #20
    d2b8:	d45a      	bmi.n	d370 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x104>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    d2ba:	f412 5f10 	tst.w	r2, #9216	; 0x2400
    d2be:	d170      	bne.n	d3a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
    d2c0:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
    d2c4:	eba3 0309 	sub.w	r3, r3, r9
    d2c8:	2b32      	cmp	r3, #50	; 0x32
    d2ca:	d86a      	bhi.n	d3a2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x136>
		if (rxBufferLength >= length && tx_state >= 3) {
    d2cc:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
    d2d0:	42ab      	cmp	r3, r5
    d2d2:	d309      	bcc.n	d2e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d2d4:	2c02      	cmp	r4, #2
    d2d6:	d907      	bls.n	d2e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
			uint32_t tx_fifo = port->MFSR & 0x07;
    d2d8:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    d2dc:	0759      	lsls	r1, r3, #29
    d2de:	d103      	bne.n	d2e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x7c>
    d2e0:	0593      	lsls	r3, r2, #22
    d2e2:	d44b      	bmi.n	d37c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
    d2e4:	2f00      	cmp	r7, #0
    d2e6:	d049      	beq.n	d37c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
		yield();
    d2e8:	f002 fe12 	bl	ff10 <yield>
		if (tx_state < 3) {
    d2ec:	2c02      	cmp	r4, #2
    d2ee:	d8dc      	bhi.n	d2aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    d2f0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
    d2f4:	f003 0207 	and.w	r2, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
    d2f8:	075b      	lsls	r3, r3, #29
    d2fa:	d4d6      	bmi.n	d2aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d2fc:	1e68      	subs	r0, r5, #1
    d2fe:	4422      	add	r2, r4
    d300:	f440 7080 	orr.w	r0, r0, #256	; 0x100
				if (tx_state == 0) {
    d304:	b94c      	cbnz	r4, d31a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xae>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    d306:	f8ca 6060 	str.w	r6, [sl, #96]	; 0x60
				tx_state++;
    d30a:	3401      	adds	r4, #1
			while (tx_fifo < 4 && tx_state < 3) {
    d30c:	1b13      	subs	r3, r2, r4
    d30e:	2b03      	cmp	r3, #3
    d310:	d8cb      	bhi.n	d2aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
    d312:	2c02      	cmp	r4, #2
    d314:	d8c9      	bhi.n	d2aa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3e>
				if (tx_state == 0) {
    d316:	2c00      	cmp	r4, #0
    d318:	d0f5      	beq.n	d306 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9a>
				} else if (tx_state == 1) {
    d31a:	2c01      	cmp	r4, #1
    d31c:	d037      	beq.n	d38e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x122>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    d31e:	b11f      	cbz	r7, d328 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    d320:	f44f 7300 	mov.w	r3, #512	; 0x200
    d324:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
    d328:	f89b 30a3 	ldrb.w	r3, [fp, #163]	; 0xa3
				tx_state++;
    d32c:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
    d32e:	2b87      	cmp	r3, #135	; 0x87
    d330:	d8bf      	bhi.n	d2b2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d332:	f8da 205c 	ldr.w	r2, [sl, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d336:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d33a:	f3c2 4c02 	ubfx	ip, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d33e:	d0b8      	beq.n	d2b2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d340:	1c59      	adds	r1, r3, #1
    d342:	449c      	add	ip, r3
    d344:	3319      	adds	r3, #25
    d346:	b2c9      	uxtb	r1, r1
    d348:	fa5f fc8c 	uxtb.w	ip, ip
    d34c:	fa5b f383 	uxtab	r3, fp, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
    d350:	f8da 0070 	ldr.w	r0, [sl, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d354:	1c4a      	adds	r2, r1, #1
    d356:	4561      	cmp	r1, ip
				rxBuffer[rxBufferLength++] = port->MRDR;
    d358:	f88b 10a3 	strb.w	r1, [fp, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d35c:	b2d1      	uxtb	r1, r2
				rxBuffer[rxBufferLength++] = port->MRDR;
    d35e:	f803 0f01 	strb.w	r0, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    d362:	d0a6      	beq.n	d2b2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
    d364:	2989      	cmp	r1, #137	; 0x89
    d366:	d1f3      	bne.n	d350 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe4>
		uint32_t status = port->MSR; // pg 2884 & 2891
    d368:	f8da 2014 	ldr.w	r2, [sl, #20]
		if (status & LPI2C_MSR_ALF) {
    d36c:	0510      	lsls	r0, r2, #20
    d36e:	d5a4      	bpl.n	d2ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x4e>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d370:	f8da 3010 	ldr.w	r3, [sl, #16]
    d374:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d378:	f8ca 3010 	str.w	r3, [sl, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d37c:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d380:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d384:	d106      	bne.n	d394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	return rxBufferLength;
    d386:	f89b 00a3 	ldrb.w	r0, [fp, #163]	; 0xa3
}
    d38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    d38e:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
    d392:	e7ba      	b.n	d30a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9e>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d394:	f8da 3010 	ldr.w	r3, [sl, #16]
    d398:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d39c:	f8ca 3010 	str.w	r3, [sl, #16]
    d3a0:	e7f1      	b.n	d386 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d3a2:	f8da 3010 	ldr.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d3a6:	f44f 7200 	mov.w	r2, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    d3aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    d3ae:	f8ca 3010 	str.w	r3, [sl, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    d3b2:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    d3b6:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    d3ba:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
    d3be:	d0e2      	beq.n	d386 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11a>
    d3c0:	e7e8      	b.n	d394 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x128>
	if (!wait_idle()) return 4;
    d3c2:	2004      	movs	r0, #4
}
    d3c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3c8:	20019b88 	.word	0x20019b88

0000d3cc <TwoWire::isr()>:
{
    d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d3ce:	6906      	ldr	r6, [r0, #16]
{
    d3d0:	4604      	mov	r4, r0
	uint32_t status = port->SSR;
    d3d2:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    d3d6:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
    d3da:	d001      	beq.n	d3e0 <TwoWire::isr()+0x14>
    d3dc:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    d3e0:	07a8      	lsls	r0, r5, #30
    d3e2:	d50b      	bpl.n	d3fc <TwoWire::isr()+0x30>
		int rx = port->SRDR;
    d3e4:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    d3e8:	0411      	lsls	r1, r2, #16
    d3ea:	d53d      	bpl.n	d468 <TwoWire::isr()+0x9c>
			rxBufferIndex = 0;
    d3ec:	2300      	movs	r3, #0
    d3ee:	2101      	movs	r1, #1
    d3f0:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
    d3f4:	4423      	add	r3, r4
    d3f6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
    d3fa:	769a      	strb	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    d3fc:	07ea      	lsls	r2, r5, #31
    d3fe:	d510      	bpl.n	d422 <TwoWire::isr()+0x56>
		if (!transmitting) {
    d400:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
    d404:	b1f7      	cbz	r7, d444 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
    d406:	f894 712e 	ldrb.w	r7, [r4, #302]	; 0x12e
    d40a:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d40e:	42bb      	cmp	r3, r7
    d410:	d926      	bls.n	d460 <TwoWire::isr()+0x94>
			port->STDR = txBuffer[txBufferIndex++];
    d412:	1c7b      	adds	r3, r7, #1
    d414:	4427      	add	r7, r4
    d416:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
    d41a:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
    d41e:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    d422:	05ab      	lsls	r3, r5, #22
    d424:	d50d      	bpl.n	d442 <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    d426:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    d42a:	b118      	cbz	r0, d434 <TwoWire::isr()+0x68>
    d42c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    d430:	b103      	cbz	r3, d434 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
    d432:	4798      	blx	r3
		rxBufferIndex = 0;
    d434:	2300      	movs	r3, #0
    d436:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    d43a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    d43e:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
    d442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (user_onRequest != nullptr) {
    d444:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    d448:	b103      	cbz	r3, d44c <TwoWire::isr()+0x80>
				(*user_onRequest)();
    d44a:	4798      	blx	r3
			txBufferIndex = 0;
    d44c:	2300      	movs	r3, #0
    d44e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    d452:	2301      	movs	r3, #1
    d454:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    d458:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
    d45c:	42bb      	cmp	r3, r7
    d45e:	d8d8      	bhi.n	d412 <TwoWire::isr()+0x46>
			port->STDR = 0;
    d460:	2300      	movs	r3, #0
    d462:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
    d466:	e7dc      	b.n	d422 <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
    d468:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
    d46c:	2b87      	cmp	r3, #135	; 0x87
    d46e:	d8c5      	bhi.n	d3fc <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
    d470:	1c59      	adds	r1, r3, #1
    d472:	b2c9      	uxtb	r1, r1
    d474:	e7be      	b.n	d3f4 <TwoWire::isr()+0x28>
    d476:	bf00      	nop

0000d478 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
    d478:	4801      	ldr	r0, [pc, #4]	; (d480 <lpi2c1_isr()+0x8>)
    d47a:	f7ff bfa7 	b.w	d3cc <TwoWire::isr()>
    d47e:	bf00      	nop
    d480:	20008ba4 	.word	0x20008ba4

0000d484 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    d484:	4801      	ldr	r0, [pc, #4]	; (d48c <lpi2c3_isr()+0x8>)
    d486:	f7ff bfa1 	b.w	d3cc <TwoWire::isr()>
    d48a:	bf00      	nop
    d48c:	20008ce4 	.word	0x20008ce4

0000d490 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    d490:	4801      	ldr	r0, [pc, #4]	; (d498 <lpi2c4_isr()+0x8>)
    d492:	f7ff bf9b 	b.w	d3cc <TwoWire::isr()>
    d496:	bf00      	nop
    d498:	20008e24 	.word	0x20008e24

0000d49c <TwoWire::setClock(unsigned long)>:
{
    d49c:	b410      	push	{r4}
	if (frequency < 400000) {
    d49e:	4c14      	ldr	r4, [pc, #80]	; (d4f0 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    d4a0:	2200      	movs	r2, #0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    d4a2:	6903      	ldr	r3, [r0, #16]
	if (frequency < 400000) {
    d4a4:	42a1      	cmp	r1, r4
	port->MCR = 0;
    d4a6:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    d4a8:	d814      	bhi.n	d4d4 <TwoWire::setClock(unsigned long)+0x38>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d4aa:	4c12      	ldr	r4, [pc, #72]	; (d4f4 <TwoWire::setClock(unsigned long)+0x58>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d4ac:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d4ae:	4912      	ldr	r1, [pc, #72]	; (d4f8 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d4b0:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    d4b4:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    d4b6:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    d4b8:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    d4ba:	62da      	str	r2, [r3, #44]	; 0x2c
	port->MCCR1 = port->MCCR0;
    d4bc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    d4be:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d4c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    d4c4:	2201      	movs	r2, #1
	port->MCCR1 = port->MCCR0;
    d4c6:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    d4c8:	6218      	str	r0, [r3, #32]
}
    d4ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    d4ce:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    d4d0:	611a      	str	r2, [r3, #16]
}
    d4d2:	4770      	bx	lr
	} else if (frequency < 1000000) {
    d4d4:	4809      	ldr	r0, [pc, #36]	; (d4fc <TwoWire::setClock(unsigned long)+0x60>)
    d4d6:	4281      	cmp	r1, r0
    d4d8:	d907      	bls.n	d4ea <TwoWire::setClock(unsigned long)+0x4e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d4da:	4c09      	ldr	r4, [pc, #36]	; (d500 <TwoWire::setClock(unsigned long)+0x64>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d4dc:	4809      	ldr	r0, [pc, #36]	; (d504 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d4de:	490a      	ldr	r1, [pc, #40]	; (d508 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    d4e0:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    d4e2:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    d4e4:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    d4e6:	62d9      	str	r1, [r3, #44]	; 0x2c
    d4e8:	e7e8      	b.n	d4bc <TwoWire::setClock(unsigned long)+0x20>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    d4ea:	4c08      	ldr	r4, [pc, #32]	; (d50c <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    d4ec:	4808      	ldr	r0, [pc, #32]	; (d510 <TwoWire::setClock(unsigned long)+0x74>)
    d4ee:	e7f6      	b.n	d4de <TwoWire::setClock(unsigned long)+0x42>
    d4f0:	00061a7f 	.word	0x00061a7f
    d4f4:	1928373b 	.word	0x1928373b
    d4f8:	05050bb8 	.word	0x05050bb8
    d4fc:	000f423f 	.word	0x000f423f
    d500:	0407090a 	.word	0x0407090a
    d504:	01010960 	.word	0x01010960
    d508:	00057f00 	.word	0x00057f00
    d50c:	0c121a1c 	.word	0x0c121a1c
    d510:	02020e10 	.word	0x02020e10

0000d514 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    d514:	b430      	push	{r4, r5}
	uint32_t ch = 0;

	__disable_irq();
    d516:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    d518:	b921      	cbnz	r1, d524 <DMAChannel::begin(bool)+0x10>
    d51a:	6803      	ldr	r3, [r0, #0]
    d51c:	b113      	cbz	r3, d524 <DMAChannel::begin(bool)+0x10>
    d51e:	7902      	ldrb	r2, [r0, #4]
    d520:	2a0f      	cmp	r2, #15
    d522:	d93b      	bls.n	d59c <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
    d524:	4c24      	ldr	r4, [pc, #144]	; (d5b8 <DMAChannel::begin(bool)+0xa4>)
    d526:	8821      	ldrh	r1, [r4, #0]
{
    d528:	2300      	movs	r3, #0
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    d52a:	fa41 f203 	asr.w	r2, r1, r3
    d52e:	f012 0201 	ands.w	r2, r2, #1
    d532:	d008      	beq.n	d546 <DMAChannel::begin(bool)+0x32>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d534:	3301      	adds	r3, #1
    d536:	2b10      	cmp	r3, #16
    d538:	d1f7      	bne.n	d52a <DMAChannel::begin(bool)+0x16>
			__enable_irq();
    d53a:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    d53c:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    d53e:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    d540:	6002      	str	r2, [r0, #0]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    d542:	bc30      	pop	{r4, r5}
    d544:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
    d546:	f04f 0c01 	mov.w	ip, #1
    d54a:	fa0c fc03 	lsl.w	ip, ip, r3
    d54e:	ea41 010c 	orr.w	r1, r1, ip
    d552:	8021      	strh	r1, [r4, #0]
			__enable_irq();
    d554:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d556:	4919      	ldr	r1, [pc, #100]	; (d5bc <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
    d558:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d55c:	4c18      	ldr	r4, [pc, #96]	; (d5c0 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d55e:	4419      	add	r1, r3
	channel = ch;
    d560:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d564:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    d566:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    d568:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
    d56c:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    d56e:	f240 4482 	movw	r4, #1154	; 0x482
    d572:	4914      	ldr	r1, [pc, #80]	; (d5c4 <DMAChannel::begin(bool)+0xb0>)
    d574:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
    d576:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
    d57a:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
    d57e:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
    d582:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    d586:	6003      	str	r3, [r0, #0]
}
    d588:	bc30      	pop	{r4, r5}
	*p++ = 0;
    d58a:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
    d58e:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
    d592:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
    d596:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
    d59a:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
    d59c:	4c06      	ldr	r4, [pc, #24]	; (d5b8 <DMAChannel::begin(bool)+0xa4>)
    d59e:	8821      	ldrh	r1, [r4, #0]
    d5a0:	fa41 f502 	asr.w	r5, r1, r2
    d5a4:	07ed      	lsls	r5, r5, #31
    d5a6:	d5bf      	bpl.n	d528 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    d5a8:	4d04      	ldr	r5, [pc, #16]	; (d5bc <DMAChannel::begin(bool)+0xa8>)
    d5aa:	4415      	add	r5, r2
    d5ac:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
    d5b0:	d1ba      	bne.n	d528 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
    d5b2:	b662      	cpsie	i
		return;
    d5b4:	e7c5      	b.n	d542 <DMAChannel::begin(bool)+0x2e>
    d5b6:	bf00      	nop
    d5b8:	20019bba 	.word	0x20019bba
    d5bc:	02007480 	.word	0x02007480
    d5c0:	400fc000 	.word	0x400fc000
    d5c4:	400e8000 	.word	0x400e8000

0000d5c8 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    d5c8:	7903      	ldrb	r3, [r0, #4]
    d5ca:	2b0f      	cmp	r3, #15
    d5cc:	d811      	bhi.n	d5f2 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
    d5ce:	4a09      	ldr	r2, [pc, #36]	; (d5f4 <DMAChannel::release()+0x2c>)
    d5d0:	7693      	strb	r3, [r2, #26]
	__disable_irq();
    d5d2:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    d5d4:	4908      	ldr	r1, [pc, #32]	; (d5f8 <DMAChannel::release()+0x30>)
    d5d6:	2201      	movs	r2, #1
    d5d8:	f890 c004 	ldrb.w	ip, [r0, #4]
    d5dc:	880b      	ldrh	r3, [r1, #0]
    d5de:	fa02 f20c 	lsl.w	r2, r2, ip
    d5e2:	ea23 0302 	bic.w	r3, r3, r2
    d5e6:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    d5e8:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    d5ea:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    d5ec:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
    d5ee:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    d5f0:	6003      	str	r3, [r0, #0]
}
    d5f2:	4770      	bx	lr
    d5f4:	400e8000 	.word	0x400e8000
    d5f8:	20019bba 	.word	0x20019bba

0000d5fc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    d5fc:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d5fe:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d602:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d604:	4c0c      	ldr	r4, [pc, #48]	; (d638 <EventResponder::runFromInterrupt()+0x3c>)
    d606:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d608:	b180      	cbz	r0, d62c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d60a:	4e0c      	ldr	r6, [pc, #48]	; (d63c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    d60c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    d60e:	6943      	ldr	r3, [r0, #20]
    d610:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    d612:	b173      	cbz	r3, d632 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    d614:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d616:	b902      	cbnz	r2, d61a <EventResponder::runFromInterrupt()+0x1e>
    d618:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    d61a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    d61c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    d61e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d620:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d624:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    d626:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d628:	2800      	cmp	r0, #0
    d62a:	d1f0      	bne.n	d60e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    d62c:	b902      	cbnz	r2, d630 <EventResponder::runFromInterrupt()+0x34>
    d62e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    d630:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    d632:	6033      	str	r3, [r6, #0]
    d634:	e7ef      	b.n	d616 <EventResponder::runFromInterrupt()+0x1a>
    d636:	bf00      	nop
    d638:	20018cec 	.word	0x20018cec
    d63c:	20018ce8 	.word	0x20018ce8

0000d640 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    d640:	f7ff bfdc 	b.w	d5fc <EventResponder::runFromInterrupt()>

0000d644 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    d644:	4904      	ldr	r1, [pc, #16]	; (d658 <systick_isr+0x14>)
	systick_millis_count++;
    d646:	4a05      	ldr	r2, [pc, #20]	; (d65c <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    d648:	6849      	ldr	r1, [r1, #4]
    d64a:	4b05      	ldr	r3, [pc, #20]	; (d660 <systick_isr+0x1c>)
    d64c:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    d64e:	6813      	ldr	r3, [r2, #0]
    d650:	3301      	adds	r3, #1
    d652:	6013      	str	r3, [r2, #0]
}
    d654:	4770      	bx	lr
    d656:	bf00      	nop
    d658:	e0001000 	.word	0xe0001000
    d65c:	20019b88 	.word	0x20019b88
    d660:	20019b84 	.word	0x20019b84

0000d664 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    d664:	4608      	mov	r0, r1
    d666:	f002 bbbf 	b.w	fde8 <usb_serial_putchar>
    d66a:	bf00      	nop

0000d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    d66c:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d66e:	b570      	push	{r4, r5, r6, lr}
		base = 10;
    d670:	bf08      	it	eq
    d672:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    d674:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
    d676:	b391      	cbz	r1, d6de <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d678:	f04f 0e21 	mov.w	lr, #33	; 0x21
    d67c:	e001      	b.n	d682 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d67e:	fa5f fe86 	uxtb.w	lr, r6
    d682:	f10e 36ff 	add.w	r6, lr, #4294967295
			digit = n % base;
    d686:	fbb1 f5f2 	udiv	r5, r1, r2
    d68a:	fb02 1415 	mls	r4, r2, r5, r1
    d68e:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d692:	2c09      	cmp	r4, #9
    d694:	f10c 0437 	add.w	r4, ip, #55	; 0x37
    d698:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d69c:	bf98      	it	ls
    d69e:	fa5f f48c 	uxtbls.w	r4, ip
    d6a2:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
    d6a6:	bf88      	it	hi
    d6a8:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
    d6aa:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d6ac:	44ec      	add	ip, sp
			n /= base;
    d6ae:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d6b0:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
    d6b4:	d2e3      	bcs.n	d67e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    d6b6:	b14b      	cbz	r3, d6cc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
    d6b8:	f10e 3eff 	add.w	lr, lr, #4294967295
		buf[i] = '-';
    d6bc:	222d      	movs	r2, #45	; 0x2d
		i--;
    d6be:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    d6c2:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    d6c6:	446b      	add	r3, sp
    d6c8:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    d6cc:	6803      	ldr	r3, [r0, #0]
    d6ce:	a901      	add	r1, sp, #4
    d6d0:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    d6d4:	685b      	ldr	r3, [r3, #4]
    d6d6:	4471      	add	r1, lr
    d6d8:	4798      	blx	r3
}
    d6da:	b00a      	add	sp, #40	; 0x28
    d6dc:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    d6de:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    d6e0:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    d6e4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    d6e8:	e7e5      	b.n	d6b6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
    d6ea:	bf00      	nop

0000d6ec <Print::print(long)>:
	if (n < 0) {
    d6ec:	2900      	cmp	r1, #0
    d6ee:	db03      	blt.n	d6f8 <Print::print(long)+0xc>
	uint8_t sign=0;
    d6f0:	2300      	movs	r3, #0
	if (base == 0) {
    d6f2:	220a      	movs	r2, #10
    d6f4:	f7ff bfba 	b.w	d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
    d6f8:	4249      	negs	r1, r1
		sign = '-';
    d6fa:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
    d6fc:	220a      	movs	r2, #10
    d6fe:	f7ff bfb5 	b.w	d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d702:	bf00      	nop

0000d704 <Print::println()>:
{
    d704:	b500      	push	{lr}
	return write(buf, 2);
    d706:	6803      	ldr	r3, [r0, #0]
{
    d708:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    d70a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
    d70e:	2202      	movs	r2, #2
    d710:	a901      	add	r1, sp, #4
    d712:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
    d714:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
    d718:	4798      	blx	r3
}
    d71a:	b003      	add	sp, #12
    d71c:	f85d fb04 	ldr.w	pc, [sp], #4

0000d720 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d720:	4b05      	ldr	r3, [pc, #20]	; (d738 <_write+0x18>)
    d722:	2802      	cmp	r0, #2
    d724:	bf88      	it	hi
    d726:	4603      	movhi	r3, r0
{
    d728:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d72a:	681c      	ldr	r4, [r3, #0]
    d72c:	4618      	mov	r0, r3
    d72e:	6863      	ldr	r3, [r4, #4]
}
    d730:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    d734:	4718      	bx	r3
    d736:	bf00      	nop
    d738:	20008b94 	.word	0x20008b94

0000d73c <Print::printf(char const*, ...)>:
{
    d73c:	b40e      	push	{r1, r2, r3}
    d73e:	b500      	push	{lr}
    d740:	b082      	sub	sp, #8
    d742:	aa03      	add	r2, sp, #12
    d744:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    d748:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    d74a:	f004 fd85 	bl	12258 <vdprintf>
}
    d74e:	b002      	add	sp, #8
    d750:	f85d eb04 	ldr.w	lr, [sp], #4
    d754:	b003      	add	sp, #12
    d756:	4770      	bx	lr

0000d758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    d758:	b95a      	cbnz	r2, d772 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
    d75a:	6803      	ldr	r3, [r0, #0]
    d75c:	b2c9      	uxtb	r1, r1
    d75e:	4a07      	ldr	r2, [pc, #28]	; (d77c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
    d760:	681b      	ldr	r3, [r3, #0]
    d762:	4293      	cmp	r3, r2
{
    d764:	b500      	push	{lr}
    d766:	d106      	bne.n	d776 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
    d768:	4608      	mov	r0, r1
}
    d76a:	f85d eb04 	ldr.w	lr, [sp], #4
    d76e:	f002 bb3b 	b.w	fde8 <usb_serial_putchar>
    d772:	f7ff bf7b 	b.w	d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d776:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    d77a:	4718      	bx	r3
    d77c:	0000d665 	.word	0x0000d665

0000d780 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    d780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d784:	b093      	sub	sp, #76	; 0x4c
    d786:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
    d78a:	f89d 906c 	ldrb.w	r9, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    d78e:	2f01      	cmp	r7, #1
    d790:	d944      	bls.n	d81c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x9c>
    d792:	461c      	mov	r4, r3
	if (n == 0) {
    d794:	4680      	mov	r8, r0
    d796:	4615      	mov	r5, r2
    d798:	ea52 0304 	orrs.w	r3, r2, r4
    d79c:	d039      	beq.n	d812 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x92>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    d79e:	2641      	movs	r6, #65	; 0x41
    d7a0:	e001      	b.n	d7a6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    d7a2:	fa5f f68c 	uxtb.w	r6, ip
			digit = n % base;
    d7a6:	4621      	mov	r1, r4
    d7a8:	4628      	mov	r0, r5
    d7aa:	463a      	mov	r2, r7
    d7ac:	2300      	movs	r3, #0
    d7ae:	f002 fd41 	bl	10234 <__aeabi_uldivmod>
    d7b2:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d7b6:	f106 0248 	add.w	r2, r6, #72	; 0x48
    d7ba:	f1bc 0f09 	cmp.w	ip, #9
    d7be:	f10c 0337 	add.w	r3, ip, #55	; 0x37
    d7c2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    d7c6:	446a      	add	r2, sp
    d7c8:	b2db      	uxtb	r3, r3
    d7ca:	bf98      	it	ls
    d7cc:	fa5f f38c 	uxtbls.w	r3, ip
			if (n == 0) break;
    d7d0:	42bd      	cmp	r5, r7
			i--;
    d7d2:	f106 3cff 	add.w	ip, r6, #4294967295
			n /= base;
    d7d6:	4605      	mov	r5, r0
			if (n == 0) break;
    d7d8:	f174 0400 	sbcs.w	r4, r4, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d7dc:	f802 3c44 	strb.w	r3, [r2, #-68]
			n /= base;
    d7e0:	460c      	mov	r4, r1
			if (n == 0) break;
    d7e2:	d2de      	bcs.n	d7a2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x22>
		}
	}
	if (sign) {
    d7e4:	f1b9 0f00 	cmp.w	r9, #0
    d7e8:	d007      	beq.n	d7fa <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x7a>
		i--;
    d7ea:	3e01      	subs	r6, #1
		buf[i] = '-';
    d7ec:	222d      	movs	r2, #45	; 0x2d
		i--;
    d7ee:	b2f6      	uxtb	r6, r6
		buf[i] = '-';
    d7f0:	f106 0348 	add.w	r3, r6, #72	; 0x48
    d7f4:	446b      	add	r3, sp
    d7f6:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    d7fa:	f8d8 3000 	ldr.w	r3, [r8]
    d7fe:	a901      	add	r1, sp, #4
    d800:	f1c6 0242 	rsb	r2, r6, #66	; 0x42
    d804:	4640      	mov	r0, r8
    d806:	685b      	ldr	r3, [r3, #4]
    d808:	4431      	add	r1, r6
    d80a:	4798      	blx	r3
}
    d80c:	b013      	add	sp, #76	; 0x4c
    d80e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[sizeof(buf) - 1] = '0';
    d812:	2330      	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    d814:	2641      	movs	r6, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    d816:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
    d81a:	e7e3      	b.n	d7e4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
	if (base < 2) return 0;
    d81c:	2000      	movs	r0, #0
}
    d81e:	b013      	add	sp, #76	; 0x4c
    d820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d824:	0000      	movs	r0, r0
	...

0000d828 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    d828:	eeb4 0b40 	vcmp.f64	d0, d0
{
    d82c:	b570      	push	{r4, r5, r6, lr}
	if (isnan(number)) return print("nan");
    d82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    d832:	4605      	mov	r5, r0
    d834:	ed2d 8b02 	vpush	{d8}
    d838:	b086      	sub	sp, #24
	if (isnan(number)) return print("nan");
    d83a:	d67c      	bvs.n	d936 <Print::printFloat(double, unsigned char)+0x10e>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    d83c:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    d840:	ed9f 6b47 	vldr	d6, [pc, #284]	; d960 <Print::printFloat(double, unsigned char)+0x138>
    d844:	eeb4 7b46 	vcmp.f64	d7, d6
    d848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d84c:	dc6b      	bgt.n	d926 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    d84e:	ed9f 7b46 	vldr	d7, [pc, #280]	; d968 <Print::printFloat(double, unsigned char)+0x140>
    d852:	eeb4 0bc7 	vcmpe.f64	d0, d7
    d856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d85a:	dc5a      	bgt.n	d912 <Print::printFloat(double, unsigned char)+0xea>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    d85c:	ed9f 7b44 	vldr	d7, [pc, #272]	; d970 <Print::printFloat(double, unsigned char)+0x148>
    d860:	eeb4 0bc7 	vcmpe.f64	d0, d7
    d864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d868:	d453      	bmi.n	d912 <Print::printFloat(double, unsigned char)+0xea>
	
	// Handle negative numbers
	if (number < 0.0) {
    d86a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    d86e:	460c      	mov	r4, r1
    d870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d874:	d45b      	bmi.n	d92e <Print::printFloat(double, unsigned char)+0x106>
	uint8_t sign=0;
    d876:	2300      	movs	r3, #0
		sign = 1;
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
    d878:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
	for (uint8_t i=0; i<digits; ++i) {
    d87c:	2c00      	cmp	r4, #0
    d87e:	d05e      	beq.n	d93e <Print::printFloat(double, unsigned char)+0x116>
    d880:	f04f 0c00 	mov.w	ip, #0
		rounding *= 0.1;
    d884:	ed9f 6b3c 	vldr	d6, [pc, #240]	; d978 <Print::printFloat(double, unsigned char)+0x150>
	for (uint8_t i=0; i<digits; ++i) {
    d888:	f10c 0c01 	add.w	ip, ip, #1
		rounding *= 0.1;
    d88c:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
    d890:	fa5f f28c 	uxtb.w	r2, ip
    d894:	42a2      	cmp	r2, r4
    d896:	d3f7      	bcc.n	d888 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
    d898:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    d89c:	220a      	movs	r2, #10
    d89e:	4628      	mov	r0, r5
    d8a0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    d8a4:	eeb8 8b67 	vcvt.f64.u32	d8, s15
    d8a8:	ee17 1a90 	vmov	r1, s15
    d8ac:	ee30 8b48 	vsub.f64	d8, d0, d8
	if (base == 0) {
    d8b0:	f7ff fedc 	bl	d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d8b4:	2c0f      	cmp	r4, #15
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    d8b6:	f04f 032e 	mov.w	r3, #46	; 0x2e

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    d8ba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    d8be:	4606      	mov	r6, r0
		buf[0] = '.';
    d8c0:	bf28      	it	cs
    d8c2:	240f      	movcs	r4, #15
    d8c4:	f88d 3008 	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    d8c8:	f10d 0309 	add.w	r3, sp, #9
    d8cc:	aa02      	add	r2, sp, #8
    d8ce:	1e61      	subs	r1, r4, #1
    d8d0:	fa53 f181 	uxtab	r1, r3, r1
			remainder *= 10.0;
    d8d4:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
    d8d8:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    d8dc:	edcd 7a01 	vstr	s15, [sp, #4]
    d8e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    d8e4:	ee07 3a90 	vmov	s15, r3
			buf[count++] = '0' + n;
    d8e8:	3330      	adds	r3, #48	; 0x30
			remainder -= n; 
    d8ea:	eeb8 8be7 	vcvt.f64.s32	d8, s15
			buf[count++] = '0' + n;
    d8ee:	f802 3f01 	strb.w	r3, [r2, #1]!
		while (digits-- > 0) {
    d8f2:	4291      	cmp	r1, r2
			remainder -= n; 
    d8f4:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
    d8f8:	d1ec      	bne.n	d8d4 <Print::printFloat(double, unsigned char)+0xac>
		}
		count += write(buf, count);
    d8fa:	682b      	ldr	r3, [r5, #0]
			buf[count++] = '0' + n;
    d8fc:	3401      	adds	r4, #1
		count += write(buf, count);
    d8fe:	a902      	add	r1, sp, #8
    d900:	4628      	mov	r0, r5
    d902:	685b      	ldr	r3, [r3, #4]
    d904:	b2e2      	uxtb	r2, r4
    d906:	4798      	blx	r3
	}
	return count;
}
    d908:	4630      	mov	r0, r6
    d90a:	b006      	add	sp, #24
    d90c:	ecbd 8b02 	vpop	{d8}
    d910:	bd70      	pop	{r4, r5, r6, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    d912:	682b      	ldr	r3, [r5, #0]
    d914:	2203      	movs	r2, #3
    d916:	491a      	ldr	r1, [pc, #104]	; (d980 <Print::printFloat(double, unsigned char)+0x158>)
    d918:	685b      	ldr	r3, [r3, #4]
    d91a:	b006      	add	sp, #24
    d91c:	ecbd 8b02 	vpop	{d8}
    d920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d924:	4718      	bx	r3
    d926:	6803      	ldr	r3, [r0, #0]
    d928:	2203      	movs	r2, #3
    d92a:	4916      	ldr	r1, [pc, #88]	; (d984 <Print::printFloat(double, unsigned char)+0x15c>)
    d92c:	e7f4      	b.n	d918 <Print::printFloat(double, unsigned char)+0xf0>
		number = -number;
    d92e:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
    d932:	2301      	movs	r3, #1
    d934:	e7a0      	b.n	d878 <Print::printFloat(double, unsigned char)+0x50>
    d936:	6803      	ldr	r3, [r0, #0]
    d938:	2203      	movs	r2, #3
    d93a:	4913      	ldr	r1, [pc, #76]	; (d988 <Print::printFloat(double, unsigned char)+0x160>)
    d93c:	e7ec      	b.n	d918 <Print::printFloat(double, unsigned char)+0xf0>
	number += rounding;
    d93e:	ee30 0b07 	vadd.f64	d0, d0, d7
    d942:	220a      	movs	r2, #10
    d944:	4628      	mov	r0, r5
    d946:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    d94a:	ee17 1a90 	vmov	r1, s15
}
    d94e:	b006      	add	sp, #24
    d950:	ecbd 8b02 	vpop	{d8}
    d954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d958:	f7ff be88 	b.w	d66c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    d95c:	f3af 8000 	nop.w
    d960:	ffffffff 	.word	0xffffffff
    d964:	7fefffff 	.word	0x7fefffff
    d968:	e0000000 	.word	0xe0000000
    d96c:	41efffff 	.word	0x41efffff
    d970:	e0000000 	.word	0xe0000000
    d974:	c1efffff 	.word	0xc1efffff
    d978:	9999999a 	.word	0x9999999a
    d97c:	3fb99999 	.word	0x3fb99999
    d980:	20000be4 	.word	0x20000be4
    d984:	20000be0 	.word	0x20000be0
    d988:	20000bdc 	.word	0x20000bdc

0000d98c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    d98c:	f002 ba1c 	b.w	fdc8 <usb_serial_getchar>

0000d990 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    d990:	f002 b9b4 	b.w	fcfc <usb_serial_peekchar>

0000d994 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    d994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buffer == nullptr) return 0;
	if (length < 1) return 0;
    d998:	b392      	cbz	r2, da00 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
    d99a:	4617      	mov	r7, r2
    d99c:	fab3 f283 	clz	r2, r3
    d9a0:	0952      	lsrs	r2, r2, #5
    d9a2:	b36b      	cbz	r3, da00 <Stream::readBytesUntil(char, char*, unsigned int)+0x6c>
	length--;
	size_t index = 0;
	while (index < length) {
    d9a4:	f1b3 0801 	subs.w	r8, r3, #1
    d9a8:	d025      	beq.n	d9f6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    d9aa:	eb07 0a08 	add.w	sl, r7, r8
    d9ae:	4683      	mov	fp, r0
    d9b0:	4689      	mov	r9, r1
	size_t index = 0;
    d9b2:	4690      	mov	r8, r2
    d9b4:	4c17      	ldr	r4, [pc, #92]	; (da14 <Stream::readBytesUntil(char, char*, unsigned int)+0x80>)
    d9b6:	4e18      	ldr	r6, [pc, #96]	; (da18 <Stream::readBytesUntil(char, char*, unsigned int)+0x84>)
    d9b8:	6825      	ldr	r5, [r4, #0]
    d9ba:	e00b      	b.n	d9d4 <Stream::readBytesUntil(char, char*, unsigned int)+0x40>
        virtual int read() { return usb_serial_getchar(); }
    d9bc:	f002 fa04 	bl	fdc8 <usb_serial_getchar>
    if (c >= 0) return c;
    d9c0:	2800      	cmp	r0, #0
    d9c2:	da10      	bge.n	d9e6 <Stream::readBytesUntil(char, char*, unsigned int)+0x52>
    yield();
    d9c4:	f002 faa4 	bl	ff10 <yield>
    d9c8:	6823      	ldr	r3, [r4, #0]
  } while(millis() - startMillis < _timeout);
    d9ca:	f8db 2008 	ldr.w	r2, [fp, #8]
    d9ce:	1b5b      	subs	r3, r3, r5
    d9d0:	4293      	cmp	r3, r2
    d9d2:	d21a      	bcs.n	da0a <Stream::readBytesUntil(char, char*, unsigned int)+0x76>
    c = read();
    d9d4:	f8db 3000 	ldr.w	r3, [fp]
    d9d8:	695b      	ldr	r3, [r3, #20]
    d9da:	42b3      	cmp	r3, r6
    d9dc:	d0ee      	beq.n	d9bc <Stream::readBytesUntil(char, char*, unsigned int)+0x28>
    d9de:	4658      	mov	r0, fp
    d9e0:	4798      	blx	r3
    if (c >= 0) return c;
    d9e2:	2800      	cmp	r0, #0
    d9e4:	dbee      	blt.n	d9c4 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
		int c = timedRead();
		if (c == terminator) break;
    d9e6:	4548      	cmp	r0, r9
    d9e8:	d005      	beq.n	d9f6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
		if (c < 0) {
			setReadError();
			break;
		}
		*buffer++ = (char)c;
    d9ea:	f807 0b01 	strb.w	r0, [r7], #1
	while (index < length) {
    d9ee:	45ba      	cmp	sl, r7
		index++;
    d9f0:	f108 0801 	add.w	r8, r8, #1
	while (index < length) {
    d9f4:	d1e0      	bne.n	d9b8 <Stream::readBytesUntil(char, char*, unsigned int)+0x24>
	}
	*buffer = 0;
    d9f6:	2300      	movs	r3, #0
	return index; // return number of characters, not including null terminator
}
    d9f8:	4640      	mov	r0, r8
	*buffer = 0;
    d9fa:	703b      	strb	r3, [r7, #0]
}
    d9fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (length < 1) return 0;
    da00:	f04f 0800 	mov.w	r8, #0
}
    da04:	4640      	mov	r0, r8
    da06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    da0a:	2301      	movs	r3, #1
    da0c:	f88b 300c 	strb.w	r3, [fp, #12]
    da10:	e7f1      	b.n	d9f6 <Stream::readBytesUntil(char, char*, unsigned int)+0x62>
    da12:	bf00      	nop
    da14:	20019b88 	.word	0x20019b88
    da18:	0000d98d 	.word	0x0000d98d

0000da1c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    da1c:	49a2      	ldr	r1, [pc, #648]	; (dca8 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    da1e:	4ba3      	ldr	r3, [pc, #652]	; (dcac <set_arm_clock+0x290>)
	if (frequency > 528000000) {
    da20:	4288      	cmp	r0, r1
{
    da22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
    da26:	4ca2      	ldr	r4, [pc, #648]	; (dcb0 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    da28:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    da2a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    da2c:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
    da30:	d91b      	bls.n	da6a <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    da32:	4ba0      	ldr	r3, [pc, #640]	; (dcb4 <set_arm_clock+0x298>)
    da34:	4298      	cmp	r0, r3
    da36:	f240 8102 	bls.w	dc3e <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    da3a:	1ac3      	subs	r3, r0, r3
    da3c:	499e      	ldr	r1, [pc, #632]	; (dcb8 <set_arm_clock+0x29c>)
    da3e:	0a1b      	lsrs	r3, r3, #8
    da40:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    da44:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    da48:	09db      	lsrs	r3, r3, #7
    da4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    da4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    da52:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    da56:	428b      	cmp	r3, r1
    da58:	bf28      	it	cs
    da5a:	460b      	movcs	r3, r1
    da5c:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
    da60:	4b96      	ldr	r3, [pc, #600]	; (dcbc <set_arm_clock+0x2a0>)
    da62:	fba3 3707 	umull	r3, r7, r3, r7
    da66:	08ff      	lsrs	r7, r7, #3
    da68:	e004      	b.n	da74 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
    da6a:	4f95      	ldr	r7, [pc, #596]	; (dcc0 <set_arm_clock+0x2a4>)
    da6c:	42b8      	cmp	r0, r7
    da6e:	bf8c      	ite	hi
    da70:	270e      	movhi	r7, #14
    da72:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    da74:	498d      	ldr	r1, [pc, #564]	; (dcac <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    da76:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    da7a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    da7e:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    da80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    da84:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    da88:	d20c      	bcs.n	daa4 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    da8a:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    da8e:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    da92:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
    da96:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    da9a:	680b      	ldr	r3, [r1, #0]
    da9c:	2b00      	cmp	r3, #0
    da9e:	dafc      	bge.n	da9a <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    daa0:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    daa4:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
    daa8:	d124      	bne.n	daf4 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    daaa:	4986      	ldr	r1, [pc, #536]	; (dcc4 <set_arm_clock+0x2a8>)
    daac:	690c      	ldr	r4, [r1, #16]
    daae:	4986      	ldr	r1, [pc, #536]	; (dcc8 <set_arm_clock+0x2ac>)
    dab0:	43a1      	bics	r1, r4
    dab2:	f000 80ea 	beq.w	dc8a <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    dab6:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
    daba:	4634      	mov	r4, r6
    dabc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    dac0:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    dac4:	d004      	beq.n	dad0 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    dac6:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    daca:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
    dacc:	4b77      	ldr	r3, [pc, #476]	; (dcac <set_arm_clock+0x290>)
    dace:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    dad0:	f411 5f40 	tst.w	r1, #12288	; 0x3000
    dad4:	d007      	beq.n	dae6 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    dad6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
    dada:	4974      	ldr	r1, [pc, #464]	; (dcac <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    dadc:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
    dade:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    dae0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    dae2:	071a      	lsls	r2, r3, #28
    dae4:	d4fc      	bmi.n	dae0 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    dae6:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    daea:	4a70      	ldr	r2, [pc, #448]	; (dcac <set_arm_clock+0x290>)
    daec:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    daee:	6c93      	ldr	r3, [r2, #72]	; 0x48
    daf0:	069b      	lsls	r3, r3, #26
    daf2:	d4fc      	bmi.n	daee <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
    daf4:	4c75      	ldr	r4, [pc, #468]	; (dccc <set_arm_clock+0x2b0>)
    daf6:	42a0      	cmp	r0, r4
    daf8:	f200 80ce 	bhi.w	dc98 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
    dafc:	f04f 0c01 	mov.w	ip, #1
    db00:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
    db02:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
    db04:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
    db08:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
    db0c:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    db10:	42a2      	cmp	r2, r4
    db12:	d818      	bhi.n	db46 <set_arm_clock+0x12a>
		if (div_arm < 8) {
    db14:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
    db18:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
    db1c:	f040 808d 	bne.w	dc3a <set_arm_clock+0x21e>
			if (div_ahb < 5) {
    db20:	f1bc 0f04 	cmp.w	ip, #4
    db24:	f200 8091 	bhi.w	dc4a <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
    db28:	180a      	adds	r2, r1, r0
    db2a:	42a2      	cmp	r2, r4
    db2c:	f200 80a4 	bhi.w	dc78 <set_arm_clock+0x25c>
    db30:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
    db34:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
    db36:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    db3a:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
    db3e:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    db42:	42a2      	cmp	r2, r4
    db44:	d9e6      	bls.n	db14 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    db46:	f10c 31ff 	add.w	r1, ip, #4294967295
    db4a:	028c      	lsls	r4, r1, #10
    db4c:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    db50:	485f      	ldr	r0, [pc, #380]	; (dcd0 <set_arm_clock+0x2b4>)
    db52:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
    db54:	4a5f      	ldr	r2, [pc, #380]	; (dcd4 <set_arm_clock+0x2b8>)
    db56:	4290      	cmp	r0, r2
    db58:	d97f      	bls.n	dc5a <set_arm_clock+0x23e>
    db5a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; dd00 <set_arm_clock+0x2e4>
    db5e:	226c      	movs	r2, #108	; 0x6c
    db60:	485d      	ldr	r0, [pc, #372]	; (dcd8 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    db62:	4d58      	ldr	r5, [pc, #352]	; (dcc4 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    db64:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    db68:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
    db6c:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    db70:	f8df c190 	ldr.w	ip, [pc, #400]	; dd04 <set_arm_clock+0x2e8>
    db74:	ea0e 0c0c 	and.w	ip, lr, ip
    db78:	45d4      	cmp	ip, sl
    db7a:	d009      	beq.n	db90 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    db7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    db80:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    db84:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    db88:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    db8a:	682a      	ldr	r2, [r5, #0]
    db8c:	2a00      	cmp	r2, #0
    db8e:	dafc      	bge.n	db8a <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    db90:	4a46      	ldr	r2, [pc, #280]	; (dcac <set_arm_clock+0x290>)
    db92:	6915      	ldr	r5, [r2, #16]
    db94:	f005 0507 	and.w	r5, r5, #7
    db98:	429d      	cmp	r5, r3
    db9a:	d003      	beq.n	dba4 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    db9c:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    db9e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dba0:	03dd      	lsls	r5, r3, #15
    dba2:	d4fc      	bmi.n	db9e <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dba4:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
    dba8:	d009      	beq.n	dbbe <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    dbaa:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    dbae:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
    dbb2:	4a3e      	ldr	r2, [pc, #248]	; (dcac <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    dbb4:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
    dbb6:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    dbb8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dbba:	0799      	lsls	r1, r3, #30
    dbbc:	d4fc      	bmi.n	dbb8 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dbbe:	4947      	ldr	r1, [pc, #284]	; (dcdc <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
    dbc0:	4a47      	ldr	r2, [pc, #284]	; (dce0 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dbc2:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
    dbc4:	4291      	cmp	r1, r2
    dbc6:	d83c      	bhi.n	dc42 <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    dbc8:	4b46      	ldr	r3, [pc, #280]	; (dce4 <set_arm_clock+0x2c8>)
    dbca:	09c9      	lsrs	r1, r1, #7
    dbcc:	fba3 3101 	umull	r3, r1, r3, r1
    dbd0:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    dbd2:	1e4b      	subs	r3, r1, #1
    dbd4:	021b      	lsls	r3, r3, #8
    dbd6:	ea86 0203 	eor.w	r2, r6, r3
    dbda:	f412 7f40 	tst.w	r2, #768	; 0x300
    dbde:	d006      	beq.n	dbee <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    dbe0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dbe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
    dbe8:	4a30      	ldr	r2, [pc, #192]	; (dcac <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    dbea:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
    dbec:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    dbee:	4a2f      	ldr	r2, [pc, #188]	; (dcac <set_arm_clock+0x290>)
    dbf0:	6953      	ldr	r3, [r2, #20]
    dbf2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
    dbf6:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    dbf8:	6c93      	ldr	r3, [r2, #72]	; 0x48
    dbfa:	069b      	lsls	r3, r3, #26
    dbfc:	d4fc      	bmi.n	dbf8 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dbfe:	4b3a      	ldr	r3, [pc, #232]	; (dce8 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    dc00:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dc02:	fba3 2300 	umull	r2, r3, r3, r0
    dc06:	f04f 32ff 	mov.w	r2, #4294967295
    dc0a:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
    dc0e:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dc12:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
    dc16:	4a35      	ldr	r2, [pc, #212]	; (dcec <set_arm_clock+0x2d0>)
    dc18:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    dc1a:	4a35      	ldr	r2, [pc, #212]	; (dcf0 <set_arm_clock+0x2d4>)
    dc1c:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    dc1e:	4a35      	ldr	r2, [pc, #212]	; (dcf4 <set_arm_clock+0x2d8>)
    dc20:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    dc22:	d208      	bcs.n	dc36 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    dc24:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    dc28:	4a21      	ldr	r2, [pc, #132]	; (dcb0 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    dc2a:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
    dc2e:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    dc30:	6813      	ldr	r3, [r2, #0]
    dc32:	2b00      	cmp	r3, #0
    dc34:	dafc      	bge.n	dc30 <set_arm_clock+0x214>
	}

	return frequency;
}
    dc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc3a:	4673      	mov	r3, lr
    dc3c:	e762      	b.n	db04 <set_arm_clock+0xe8>
    dc3e:	2712      	movs	r7, #18
    dc40:	e718      	b.n	da74 <set_arm_clock+0x58>
    dc42:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
    dc46:	2104      	movs	r1, #4
    dc48:	e7c5      	b.n	dbd6 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dc4a:	f10c 31ff 	add.w	r1, ip, #4294967295
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dc4e:	4820      	ldr	r0, [pc, #128]	; (dcd0 <set_arm_clock+0x2b4>)
    dc50:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dc52:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dc54:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dc56:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dc5a:	4a27      	ldr	r2, [pc, #156]	; (dcf8 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    dc5c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; dd08 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    dc60:	fba2 2000 	umull	r2, r0, r2, r0
    dc64:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
    dc66:	4825      	ldr	r0, [pc, #148]	; (dcfc <set_arm_clock+0x2e0>)
    dc68:	2a36      	cmp	r2, #54	; 0x36
    dc6a:	bf38      	it	cc
    dc6c:	2236      	movcc	r2, #54	; 0x36
    dc6e:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    dc72:	ea42 0a0a 	orr.w	sl, r2, sl
    dc76:	e774      	b.n	db62 <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    dc78:	ea4f 248c 	mov.w	r4, ip, lsl #10
    dc7c:	2300      	movs	r3, #0
    dc7e:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
    dc82:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
    dc86:	46ac      	mov	ip, r5
    dc88:	e762      	b.n	db50 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    dc8a:	461d      	mov	r5, r3
    dc8c:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
    dc90:	4611      	mov	r1, r2
    dc92:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
    dc96:	e713      	b.n	dac0 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
    dc98:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
    dc9a:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    dc9e:	4602      	mov	r2, r0
    dca0:	4631      	mov	r1, r6
    dca2:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
    dca4:	46e6      	mov	lr, ip
    dca6:	e753      	b.n	db50 <set_arm_clock+0x134>
    dca8:	1f78a400 	.word	0x1f78a400
    dcac:	400fc000 	.word	0x400fc000
    dcb0:	40080000 	.word	0x40080000
    dcb4:	23c34600 	.word	0x23c34600
    dcb8:	004cb223 	.word	0x004cb223
    dcbc:	51eb851f 	.word	0x51eb851f
    dcc0:	016e3600 	.word	0x016e3600
    dcc4:	400d8000 	.word	0x400d8000
    dcc8:	80003040 	.word	0x80003040
    dccc:	269fb1ff 	.word	0x269fb1ff
    dcd0:	005b8d80 	.word	0x005b8d80
    dcd4:	4df67eff 	.word	0x4df67eff
    dcd8:	4d3f6400 	.word	0x4d3f6400
    dcdc:	08f0d17f 	.word	0x08f0d17f
    dce0:	2cb4177f 	.word	0x2cb4177f
    dce4:	00e5109f 	.word	0x00e5109f
    dce8:	431bde83 	.word	0x431bde83
    dcec:	20008b90 	.word	0x20008b90
    dcf0:	20008b8c 	.word	0x20008b8c
    dcf4:	20019474 	.word	0x20019474
    dcf8:	165e9f81 	.word	0x165e9f81
    dcfc:	00b71b00 	.word	0x00b71b00
    dd00:	8000206c 	.word	0x8000206c
    dd04:	8001307f 	.word	0x8001307f
    dd08:	80002000 	.word	0x80002000

0000dd0c <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    dd0c:	b900      	cbnz	r0, dd10 <delay+0x4>
    dd0e:	4770      	bx	lr
{
    dd10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    dd14:	2101      	movs	r1, #1
    dd16:	4681      	mov	r9, r0
    dd18:	4c21      	ldr	r4, [pc, #132]	; (dda0 <delay+0x94>)
    dd1a:	4d22      	ldr	r5, [pc, #136]	; (dda4 <delay+0x98>)
    dd1c:	4e22      	ldr	r6, [pc, #136]	; (dda8 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    dd1e:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    dd22:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    dd24:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    dd26:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d1f7      	bne.n	dd1e <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    dd2e:	491f      	ldr	r1, [pc, #124]	; (ddac <delay+0xa0>)
    dd30:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    dd32:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dd36:	f8df a078 	ldr.w	sl, [pc, #120]	; ddb0 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
    dd3a:	1a1b      	subs	r3, r3, r0
    dd3c:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
    dd3e:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dd42:	f8da 2000 	ldr.w	r2, [sl]
    dd46:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
    dd4a:	455a      	cmp	r2, fp
    dd4c:	bf94      	ite	ls
    dd4e:	4490      	addls	r8, r2
    dd50:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    dd52:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
    dd56:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    dd58:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    dd5a:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    dd5e:	2b00      	cmp	r3, #0
    dd60:	d1f7      	bne.n	dd52 <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    dd62:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dd64:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
    dd68:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
    dd6a:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dd6e:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
    dd72:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
    dd76:	bf94      	ite	ls
    dd78:	4462      	addls	r2, ip
    dd7a:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
    dd7e:	eba2 0208 	sub.w	r2, r2, r8
    dd82:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    dd86:	d306      	bcc.n	dd96 <delay+0x8a>
			if (--msec == 0) return;
    dd88:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
    dd8c:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
    dd90:	d1df      	bne.n	dd52 <delay+0x46>
}
    dd92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
    dd96:	f002 f8bb 	bl	ff10 <yield>
		while ((micros() - start) >= 1000) {
    dd9a:	4904      	ldr	r1, [pc, #16]	; (ddac <delay+0xa0>)
    dd9c:	e7d9      	b.n	dd52 <delay+0x46>
    dd9e:	bf00      	nop
    dda0:	20019b8c 	.word	0x20019b8c
    dda4:	20019b88 	.word	0x20019b88
    dda8:	20019b84 	.word	0x20019b84
    ddac:	e0001000 	.word	0xe0001000
    ddb0:	20019474 	.word	0x20019474

0000ddb4 <micros>:
{
    ddb4:	b430      	push	{r4, r5}
    ddb6:	4b0f      	ldr	r3, [pc, #60]	; (ddf4 <micros+0x40>)
    ddb8:	f04f 0c01 	mov.w	ip, #1
    ddbc:	4d0e      	ldr	r5, [pc, #56]	; (ddf8 <micros+0x44>)
    ddbe:	4c0f      	ldr	r4, [pc, #60]	; (ddfc <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    ddc0:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
    ddc4:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    ddc6:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    ddc8:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    ddcc:	2a00      	cmp	r2, #0
    ddce:	d1f7      	bne.n	ddc0 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    ddd0:	4b0b      	ldr	r3, [pc, #44]	; (de00 <micros+0x4c>)
    ddd2:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    ddd4:	4a0b      	ldr	r2, [pc, #44]	; (de04 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
    ddd6:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
    ddd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dddc:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
    ddde:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    dde2:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
    dde6:	bc30      	pop	{r4, r5}
    dde8:	428a      	cmp	r2, r1
    ddea:	bf94      	ite	ls
    ddec:	1880      	addls	r0, r0, r2
    ddee:	1840      	addhi	r0, r0, r1
    ddf0:	4770      	bx	lr
    ddf2:	bf00      	nop
    ddf4:	20019b8c 	.word	0x20019b8c
    ddf8:	20019b88 	.word	0x20019b88
    ddfc:	20019b84 	.word	0x20019b84
    de00:	e0001000 	.word	0xe0001000
    de04:	20019474 	.word	0x20019474

0000de08 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    de08:	2836      	cmp	r0, #54	; 0x36
    de0a:	d816      	bhi.n	de3a <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
    de0c:	0102      	lsls	r2, r0, #4
    de0e:	4b10      	ldr	r3, [pc, #64]	; (de50 <digitalWrite+0x48>)
    de10:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    de14:	589b      	ldr	r3, [r3, r2]
{
    de16:	b410      	push	{r4}
	mask = p->mask;
    de18:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    de1a:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    de1c:	4214      	tst	r4, r2
    de1e:	d005      	beq.n	de2c <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
    de20:	b961      	cbnz	r1, de3c <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    de22:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
    de26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
    de2a:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    de2c:	6883      	ldr	r3, [r0, #8]
		if (val) {
    de2e:	b151      	cbz	r1, de46 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    de30:	4a08      	ldr	r2, [pc, #32]	; (de54 <digitalWrite+0x4c>)
}
    de32:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    de36:	601a      	str	r2, [r3, #0]
}
    de38:	4770      	bx	lr
    de3a:	4770      	bx	lr
    de3c:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
    de40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
    de44:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    de46:	4a04      	ldr	r2, [pc, #16]	; (de58 <digitalWrite+0x50>)
}
    de48:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    de4c:	601a      	str	r2, [r3, #0]
}
    de4e:	4770      	bx	lr
    de50:	20007c5c 	.word	0x20007c5c
    de54:	0001f038 	.word	0x0001f038
    de58:	00013038 	.word	0x00013038

0000de5c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    de5c:	2836      	cmp	r0, #54	; 0x36
    de5e:	d829      	bhi.n	deb4 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
    de60:	4b16      	ldr	r3, [pc, #88]	; (debc <pinMode+0x60>)
    de62:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    de64:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
    de66:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    de6a:	589a      	ldr	r2, [r3, r2]
{
    de6c:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    de6e:	6853      	ldr	r3, [r2, #4]
    de70:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    de72:	d00e      	beq.n	de92 <pinMode+0x36>
    de74:	2904      	cmp	r1, #4
    de76:	d00c      	beq.n	de92 <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    de78:	ea23 0304 	bic.w	r3, r3, r4
    de7c:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    de7e:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
    de80:	b1a9      	cbz	r1, deae <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
    de82:	2902      	cmp	r1, #2
    de84:	d017      	beq.n	deb6 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    de86:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    de88:	bf0c      	ite	eq
    de8a:	4a0d      	ldreq	r2, [pc, #52]	; (dec0 <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    de8c:	4a0d      	ldrne	r2, [pc, #52]	; (dec4 <pinMode+0x68>)
    de8e:	601a      	str	r2, [r3, #0]
    de90:	e007      	b.n	dea2 <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    de92:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
    de94:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    de96:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
    de98:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
    de9a:	d008      	beq.n	deae <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    de9c:	f640 0238 	movw	r2, #2104	; 0x838
    dea0:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    dea2:	6843      	ldr	r3, [r0, #4]
    dea4:	2215      	movs	r2, #21
}
    dea6:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
    deaa:	601a      	str	r2, [r3, #0]
}
    deac:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
    deae:	2238      	movs	r2, #56	; 0x38
    deb0:	601a      	str	r2, [r3, #0]
    deb2:	e7f6      	b.n	dea2 <pinMode+0x46>
    deb4:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    deb6:	4a04      	ldr	r2, [pc, #16]	; (dec8 <pinMode+0x6c>)
    deb8:	601a      	str	r2, [r3, #0]
    deba:	e7f2      	b.n	dea2 <pinMode+0x46>
    debc:	20007c5c 	.word	0x20007c5c
    dec0:	00013038 	.word	0x00013038
    dec4:	00010038 	.word	0x00010038
    dec8:	0001f038 	.word	0x0001f038

0000decc <flash_wait>:
#define WRITE_SDR       FLEXSPI_LUT_OPCODE_WRITE_SDR
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
    decc:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    dece:	4a12      	ldr	r2, [pc, #72]	; (df18 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
    ded0:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    ded2:	4b12      	ldr	r3, [pc, #72]	; (df1c <flash_wait+0x50>)
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    ded4:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    ded6:	4d12      	ldr	r5, [pc, #72]	; (df20 <flash_wait+0x54>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    ded8:	4c12      	ldr	r4, [pc, #72]	; (df24 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    deda:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    dede:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    dee2:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    dee6:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    deea:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    deee:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    def2:	6953      	ldr	r3, [r2, #20]
    def4:	07db      	lsls	r3, r3, #31
    def6:	d5fc      	bpl.n	def2 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    def8:	6151      	str	r1, [r2, #20]
	} while (status & 1);
    defa:	7823      	ldrb	r3, [r4, #0]
    defc:	07db      	lsls	r3, r3, #31
    defe:	d4f0      	bmi.n	dee2 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    df00:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    df02:	4905      	ldr	r1, [pc, #20]	; (df18 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    df04:	f043 0301 	orr.w	r3, r3, #1
    df08:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    df0a:	680b      	ldr	r3, [r1, #0]
    df0c:	07db      	lsls	r3, r3, #31
    df0e:	d4fc      	bmi.n	df0a <flash_wait+0x3e>
	__enable_irq();
    df10:	b662      	cpsie	i
}
    df12:	bc30      	pop	{r4, r5}
    df14:	4770      	bx	lr
    df16:	bf00      	nop
    df18:	402a8000 	.word	0x402a8000
    df1c:	24010405 	.word	0x24010405
    df20:	000f0001 	.word	0x000f0001
    df24:	402a8100 	.word	0x402a8100

0000df28 <eeprom_initialize>:
{
    df28:	b570      	push	{r4, r5, r6, lr}
    df2a:	4c0e      	ldr	r4, [pc, #56]	; (df64 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
    df2c:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
    df30:	4e0d      	ldr	r6, [pc, #52]	; (df68 <eeprom_initialize+0x40>)
    df32:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    df36:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
    df3a:	2100      	movs	r1, #0
    df3c:	e002      	b.n	df44 <eeprom_initialize+0x1c>
		} while (p < end);
    df3e:	42b3      	cmp	r3, r6
			index++;
    df40:	b281      	uxth	r1, r0
		} while (p < end);
    df42:	d204      	bcs.n	df4e <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
    df44:	881a      	ldrh	r2, [r3, #0]
			index++;
    df46:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
    df48:	3302      	adds	r3, #2
    df4a:	4572      	cmp	r2, lr
    df4c:	d1f7      	bne.n	df3e <eeprom_initialize+0x16>
		sector_index[sector] = index;
    df4e:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    df52:	42ac      	cmp	r4, r5
    df54:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
    df58:	d1ed      	bne.n	df36 <eeprom_initialize+0xe>
	initialized = 1;
    df5a:	4b04      	ldr	r3, [pc, #16]	; (df6c <eeprom_initialize+0x44>)
    df5c:	2201      	movs	r2, #1
    df5e:	701a      	strb	r2, [r3, #0]
}
    df60:	bd70      	pop	{r4, r5, r6, pc}
    df62:	bf00      	nop
    df64:	20019942 	.word	0x20019942
    df68:	607c1000 	.word	0x607c1000
    df6c:	20019bd2 	.word	0x20019bd2

0000df70 <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
    df70:	f241 03bb 	movw	r3, #4283	; 0x10bb
    df74:	4298      	cmp	r0, r3
    df76:	d82f      	bhi.n	dfd8 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
    df78:	4b18      	ldr	r3, [pc, #96]	; (dfdc <eeprom_read_byte+0x6c>)
{
    df7a:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
    df7c:	781b      	ldrb	r3, [r3, #0]
    df7e:	4604      	mov	r4, r0
    df80:	b33b      	cbz	r3, dfd2 <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
    df82:	08a0      	lsrs	r0, r4, #2
    df84:	4b16      	ldr	r3, [pc, #88]	; (dfe0 <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    df86:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
    df8a:	4c16      	ldr	r4, [pc, #88]	; (dfe4 <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
    df8c:	fba3 2300 	umull	r2, r3, r3, r0
    df90:	1ac2      	subs	r2, r0, r3
    df92:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    df96:	4a14      	ldr	r2, [pc, #80]	; (dfe8 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
    df98:	095b      	lsrs	r3, r3, #5
    df9a:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
    df9e:	469c      	mov	ip, r3
    dfa0:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    dfa4:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
    dfa8:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
    dfaa:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    dfae:	441a      	add	r2, r3
	end = p + sector_index[sector];
    dfb0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    dfb4:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
    dfb6:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
    dfba:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
    dfbe:	d907      	bls.n	dfd0 <eeprom_read_byte+0x60>
		uint32_t val = *p++;
    dfc0:	881a      	ldrh	r2, [r3, #0]
    dfc2:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
    dfc4:	b2d4      	uxtb	r4, r2
    dfc6:	428c      	cmp	r4, r1
    dfc8:	bf08      	it	eq
    dfca:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
    dfcc:	459c      	cmp	ip, r3
    dfce:	d8f7      	bhi.n	dfc0 <eeprom_read_byte+0x50>
}
    dfd0:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
    dfd2:	f7ff ffa9 	bl	df28 <eeprom_initialize>
    dfd6:	e7d4      	b.n	df82 <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
    dfd8:	20ff      	movs	r0, #255	; 0xff
}
    dfda:	4770      	bx	lr
    dfdc:	20019bd2 	.word	0x20019bd2
    dfe0:	04104105 	.word	0x04104105
    dfe4:	20019944 	.word	0x20019944
    dfe8:	000607c0 	.word	0x000607c0

0000dfec <eeprom_read_block>:
	while (len--) {
    dfec:	b162      	cbz	r2, e008 <eeprom_read_block+0x1c>
{
    dfee:	b570      	push	{r4, r5, r6, lr}
    dff0:	4605      	mov	r5, r0
    dff2:	460c      	mov	r4, r1
    dff4:	188e      	adds	r6, r1, r2
		*dest++ = eeprom_read_byte(p++);
    dff6:	4620      	mov	r0, r4
    dff8:	3401      	adds	r4, #1
    dffa:	f7ff ffb9 	bl	df70 <eeprom_read_byte>
    dffe:	f805 0b01 	strb.w	r0, [r5], #1
	while (len--) {
    e002:	42b4      	cmp	r4, r6
    e004:	d1f7      	bne.n	dff6 <eeprom_read_block+0xa>
}
    e006:	bd70      	pop	{r4, r5, r6, pc}
    e008:	4770      	bx	lr
    e00a:	bf00      	nop

0000e00c <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    e00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e00e:	460f      	mov	r7, r1
    e010:	4616      	mov	r6, r2
	__disable_irq();
    e012:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e014:	4b34      	ldr	r3, [pc, #208]	; (e0e8 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e016:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e01a:	4a34      	ldr	r2, [pc, #208]	; (e0ec <eepromemu_flash_write+0xe0>)
    e01c:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e01e:	2202      	movs	r2, #2
    e020:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    e022:	2200      	movs	r2, #0
    e024:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e028:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    e02c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e030:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e034:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e038:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e03c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e040:	2201      	movs	r2, #1
    e042:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    e046:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
    e04a:	1982      	adds	r2, r0, r6
	asm("dsb");
    e04c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    e050:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    e054:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
    e058:	3320      	adds	r3, #32
	} while (location < end_addr);
    e05a:	429a      	cmp	r2, r3
    e05c:	d8fa      	bhi.n	e054 <eepromemu_flash_write+0x48>
	asm("dsb");
    e05e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e062:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e066:	4d20      	ldr	r5, [pc, #128]	; (e0e8 <eepromemu_flash_write+0xdc>)
    e068:	696b      	ldr	r3, [r5, #20]
    e06a:	07da      	lsls	r2, r3, #31
    e06c:	d5fc      	bpl.n	e068 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e06e:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e070:	491f      	ldr	r1, [pc, #124]	; (e0f0 <eepromemu_flash_write+0xe4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e072:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e074:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e078:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e07a:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    e07e:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e082:	f242 2101 	movw	r1, #8705	; 0x2201
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e086:	4c18      	ldr	r4, [pc, #96]	; (e0e8 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    e088:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    e08c:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    e090:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    e094:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e098:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e09c:	4d15      	ldr	r5, [pc, #84]	; (e0f4 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e09e:	e001      	b.n	e0a4 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
    e0a0:	065b      	lsls	r3, r3, #25
    e0a2:	d409      	bmi.n	e0b8 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    e0a4:	6963      	ldr	r3, [r4, #20]
    e0a6:	f013 0001 	ands.w	r0, r3, #1
    e0aa:	d0f9      	beq.n	e0a0 <eepromemu_flash_write+0x94>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    e0ac:	2341      	movs	r3, #65	; 0x41
    e0ae:	6163      	str	r3, [r4, #20]
	flash_wait();
}
    e0b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
    e0b4:	f7ff bf0a 	b.w	decc <flash_wait>
			if (wrlen > 8) wrlen = 8;
    e0b8:	2e08      	cmp	r6, #8
    e0ba:	d80a      	bhi.n	e0d2 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    e0bc:	b136      	cbz	r6, e0cc <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e0be:	4632      	mov	r2, r6
    e0c0:	4639      	mov	r1, r7
				src += wrlen;
    e0c2:	4437      	add	r7, r6
				len -= wrlen;
    e0c4:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e0c6:	4628      	mov	r0, r5
    e0c8:	f000 f924 	bl	e314 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    e0cc:	2340      	movs	r3, #64	; 0x40
    e0ce:	6163      	str	r3, [r4, #20]
    e0d0:	e7e8      	b.n	e0a4 <eepromemu_flash_write+0x98>
    e0d2:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
    e0d6:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e0d8:	4639      	mov	r1, r7
    e0da:	4632      	mov	r2, r6
				src += wrlen;
    e0dc:	4437      	add	r7, r6
				len -= wrlen;
    e0de:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    e0e0:	4628      	mov	r0, r5
    e0e2:	f000 f917 	bl	e314 <memcpy>
				len -= wrlen;
    e0e6:	e7f1      	b.n	e0cc <eepromemu_flash_write+0xc0>
    e0e8:	402a8000 	.word	0x402a8000
    e0ec:	5af05af0 	.word	0x5af05af0
    e0f0:	08180432 	.word	0x08180432
    e0f4:	402a8180 	.word	0x402a8180

0000e0f8 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    e0f8:	b410      	push	{r4}
	__disable_irq();
    e0fa:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e0fc:	4b28      	ldr	r3, [pc, #160]	; (e1a0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e0fe:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e100:	4c28      	ldr	r4, [pc, #160]	; (e1a4 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
	FLEXSPI_LUT61 = 0;
    e102:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    e104:	619c      	str	r4, [r3, #24]
	FLEXSPI_LUT62 = 0;
	FLEXSPI_LUT63 = 0;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e106:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    e10a:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    e10c:	f240 4106 	movw	r1, #1030	; 0x406
    e110:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e114:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
    e116:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    e11a:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    e11e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    e122:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e126:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e12a:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    e12e:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e130:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
    e134:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    e138:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
    e13c:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
    e140:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    e144:	4299      	cmp	r1, r3
    e146:	bf34      	ite	cc
    e148:	2101      	movcc	r1, #1
    e14a:	2180      	movcs	r1, #128	; 0x80
    e14c:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
    e150:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
    e152:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
    e156:	461a      	mov	r2, r3
	} while (location < end_addr);
    e158:	f103 0320 	add.w	r3, r3, #32
    e15c:	d1f8      	bne.n	e150 <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
    e15e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e162:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e166:	4a0e      	ldr	r2, [pc, #56]	; (e1a0 <eepromemu_flash_erase_sector+0xa8>)
    e168:	6953      	ldr	r3, [r2, #20]
    e16a:	07d9      	lsls	r1, r3, #31
    e16c:	d5fc      	bpl.n	e168 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e16e:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e170:	490d      	ldr	r1, [pc, #52]	; (e1a8 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e172:	4b0e      	ldr	r3, [pc, #56]	; (e1ac <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e174:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e176:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    e178:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e17c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e180:	4907      	ldr	r1, [pc, #28]	; (e1a0 <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    e182:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    e186:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    e18a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    e18e:	694b      	ldr	r3, [r1, #20]
    e190:	07db      	lsls	r3, r3, #31
    e192:	d5fc      	bpl.n	e18e <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e194:	2301      	movs	r3, #1
	flash_wait();
}
    e196:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    e19a:	614b      	str	r3, [r1, #20]
	flash_wait();
    e19c:	f7ff be96 	b.w	decc <flash_wait>
    e1a0:	402a8000 	.word	0x402a8000
    e1a4:	5af05af0 	.word	0x5af05af0
    e1a8:	08180420 	.word	0x08180420
    e1ac:	00fff000 	.word	0x00fff000

0000e1b0 <eeprom_write_byte>:
	if (addr > E2END) return;
    e1b0:	f241 03bb 	movw	r3, #4283	; 0x10bb
    e1b4:	4298      	cmp	r0, r3
    e1b6:	f200 8089 	bhi.w	e2cc <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
    e1ba:	4b46      	ldr	r3, [pc, #280]	; (e2d4 <eeprom_write_byte+0x124>)
{
    e1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
    e1c0:	781b      	ldrb	r3, [r3, #0]
{
    e1c2:	b0c2      	sub	sp, #264	; 0x108
    e1c4:	4605      	mov	r5, r0
    e1c6:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
    e1c8:	2b00      	cmp	r3, #0
    e1ca:	d07c      	beq.n	e2c6 <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
    e1cc:	08ab      	lsrs	r3, r5, #2
    e1ce:	4e42      	ldr	r6, [pc, #264]	; (e2d8 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e1d0:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
    e1d4:	4f41      	ldr	r7, [pc, #260]	; (e2dc <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
    e1d6:	fba6 2603 	umull	r2, r6, r6, r3
    e1da:	1b9a      	subs	r2, r3, r6
    e1dc:	eb06 0652 	add.w	r6, r6, r2, lsr #1
    e1e0:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    e1e2:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    e1e6:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
    e1ea:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e1ec:	4b3c      	ldr	r3, [pc, #240]	; (e2e0 <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
    e1ee:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e1f2:	4433      	add	r3, r6
	end = p + sector_index[sector];
    e1f4:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e1f6:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
    e1fa:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
    e1fe:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
    e202:	d964      	bls.n	e2ce <eeprom_write_byte+0x11e>
    e204:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
    e206:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
    e20a:	881a      	ldrh	r2, [r3, #0]
    e20c:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
    e20e:	b2d1      	uxtb	r1, r2
    e210:	42a9      	cmp	r1, r5
    e212:	bf08      	it	eq
    e214:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
    e218:	4298      	cmp	r0, r3
    e21a:	d8f6      	bhi.n	e20a <eeprom_write_byte+0x5a>
	if (data == olddata) return;
    e21c:	45e1      	cmp	r9, ip
    e21e:	d041      	beq.n	e2a4 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
    e220:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    e224:	d341      	bcc.n	e2aa <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
    e226:	ac02      	add	r4, sp, #8
    e228:	f44f 7280 	mov.w	r2, #256	; 0x100
    e22c:	21ff      	movs	r1, #255	; 0xff
    e22e:	4620      	mov	r0, r4
    e230:	f004 f8fe 	bl	12430 <memset>
		while (p < end) {
    e234:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
    e238:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    e23c:	4642      	mov	r2, r8
    e23e:	4298      	cmp	r0, r3
    e240:	bf34      	ite	cc
    e242:	2001      	movcc	r0, #1
    e244:	f44f 6000 	movcs.w	r0, #2048	; 0x800
    e248:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
    e24c:	4613      	mov	r3, r2
    e24e:	3202      	adds	r2, #2
    e250:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
    e252:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
    e254:	b2d9      	uxtb	r1, r3
    e256:	ea4f 2313 	mov.w	r3, r3, lsr #8
    e25a:	5463      	strb	r3, [r4, r1]
		while (p < end) {
    e25c:	d1f6      	bne.n	e24c <eeprom_write_byte+0x9c>
		buf[offset] = data;
    e25e:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
    e262:	f10d 0907 	add.w	r9, sp, #7
    e266:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
    e26a:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    e26c:	464c      	mov	r4, r9
    e26e:	4640      	mov	r0, r8
    e270:	f7ff ff42 	bl	e0f8 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    e274:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
    e278:	eb08 0045 	add.w	r0, r8, r5, lsl #1
    e27c:	2202      	movs	r2, #2
    e27e:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    e282:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
    e284:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
    e288:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
    e28c:	d006      	beq.n	e29c <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
    e28e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
    e292:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
    e294:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    e298:	f7ff feb8 	bl	e00c <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    e29c:	45a2      	cmp	sl, r4
    e29e:	d1e9      	bne.n	e274 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
    e2a0:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
    e2a4:	b042      	add	sp, #264	; 0x108
    e2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
    e2aa:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
    e2ae:	a902      	add	r1, sp, #8
    e2b0:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
    e2b2:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
    e2b4:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    e2b8:	f7ff fea8 	bl	e00c <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    e2bc:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
    e2c0:	b042      	add	sp, #264	; 0x108
    e2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
    e2c6:	f7ff fe2f 	bl	df28 <eeprom_initialize>
    e2ca:	e77f      	b.n	e1cc <eeprom_write_byte+0x1c>
    e2cc:	4770      	bx	lr
	uint8_t olddata=0xFF;
    e2ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
    e2d2:	e7a3      	b.n	e21c <eeprom_write_byte+0x6c>
    e2d4:	20019bd2 	.word	0x20019bd2
    e2d8:	04104105 	.word	0x04104105
    e2dc:	20019944 	.word	0x20019944
    e2e0:	000607c0 	.word	0x000607c0

0000e2e4 <eeprom_write_block>:
	while (len--) {
    e2e4:	b162      	cbz	r2, e300 <eeprom_write_block+0x1c>
{
    e2e6:	b570      	push	{r4, r5, r6, lr}
    e2e8:	4605      	mov	r5, r0
    e2ea:	460c      	mov	r4, r1
    e2ec:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
    e2ee:	4620      	mov	r0, r4
    e2f0:	3401      	adds	r4, #1
    e2f2:	f815 1b01 	ldrb.w	r1, [r5], #1
    e2f6:	f7ff ff5b 	bl	e1b0 <eeprom_write_byte>
	while (len--) {
    e2fa:	42b4      	cmp	r4, r6
    e2fc:	d1f7      	bne.n	e2ee <eeprom_write_block+0xa>
}
    e2fe:	bd70      	pop	{r4, r5, r6, pc}
    e300:	4770      	bx	lr
    e302:	bf00      	nop

0000e304 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e304:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e306:	f7f2 fa51 	bl	7ac <setup>
	while (1) {
		loop();
    e30a:	f7f1 ff83 	bl	214 <loop>
		yield();
    e30e:	f001 fdff 	bl	ff10 <yield>
	while (1) {
    e312:	e7fa      	b.n	e30a <main+0x6>

0000e314 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e314:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e316:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e31a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e31e:	d16d      	bne.n	e3fc <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e320:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e322:	d341      	bcc.n	e3a8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e324:	f851 3b04 	ldr.w	r3, [r1], #4
    e328:	f840 3b04 	str.w	r3, [r0], #4
    e32c:	f851 3b04 	ldr.w	r3, [r1], #4
    e330:	f840 3b04 	str.w	r3, [r0], #4
    e334:	f851 3b04 	ldr.w	r3, [r1], #4
    e338:	f840 3b04 	str.w	r3, [r0], #4
    e33c:	f851 3b04 	ldr.w	r3, [r1], #4
    e340:	f840 3b04 	str.w	r3, [r0], #4
    e344:	f851 3b04 	ldr.w	r3, [r1], #4
    e348:	f840 3b04 	str.w	r3, [r0], #4
    e34c:	f851 3b04 	ldr.w	r3, [r1], #4
    e350:	f840 3b04 	str.w	r3, [r0], #4
    e354:	f851 3b04 	ldr.w	r3, [r1], #4
    e358:	f840 3b04 	str.w	r3, [r0], #4
    e35c:	f851 3b04 	ldr.w	r3, [r1], #4
    e360:	f840 3b04 	str.w	r3, [r0], #4
    e364:	f851 3b04 	ldr.w	r3, [r1], #4
    e368:	f840 3b04 	str.w	r3, [r0], #4
    e36c:	f851 3b04 	ldr.w	r3, [r1], #4
    e370:	f840 3b04 	str.w	r3, [r0], #4
    e374:	f851 3b04 	ldr.w	r3, [r1], #4
    e378:	f840 3b04 	str.w	r3, [r0], #4
    e37c:	f851 3b04 	ldr.w	r3, [r1], #4
    e380:	f840 3b04 	str.w	r3, [r0], #4
    e384:	f851 3b04 	ldr.w	r3, [r1], #4
    e388:	f840 3b04 	str.w	r3, [r0], #4
    e38c:	f851 3b04 	ldr.w	r3, [r1], #4
    e390:	f840 3b04 	str.w	r3, [r0], #4
    e394:	f851 3b04 	ldr.w	r3, [r1], #4
    e398:	f840 3b04 	str.w	r3, [r0], #4
    e39c:	f851 3b04 	ldr.w	r3, [r1], #4
    e3a0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e3a4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e3a6:	d2bd      	bcs.n	e324 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e3a8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e3aa:	d311      	bcc.n	e3d0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e3ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e3b0:	f840 3b04 	str.w	r3, [r0], #4
    e3b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e3b8:	f840 3b04 	str.w	r3, [r0], #4
    e3bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e3c0:	f840 3b04 	str.w	r3, [r0], #4
    e3c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e3c8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e3cc:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e3ce:	d2ed      	bcs.n	e3ac <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e3d0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e3d2:	d305      	bcc.n	e3e0 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e3d4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e3d8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e3dc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e3de:	d2f9      	bcs.n	e3d4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e3e0:	3204      	adds	r2, #4
	beq	.Ldone
    e3e2:	d008      	beq.n	e3f6 <memcpy+0xe2>

	lsls	r2, r2, #31
    e3e4:	07d2      	lsls	r2, r2, #31
	itt ne
    e3e6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e3e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e3ec:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e3f0:	d301      	bcc.n	e3f6 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e3f2:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e3f4:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e3f6:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e3f8:	4770      	bx	lr
    e3fa:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e3fc:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    e3fe:	d313      	bcc.n	e428 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e400:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e402:	d08d      	beq.n	e320 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e404:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e408:	d08a      	beq.n	e320 <memcpy+0xc>

	rsb	r3, #4
    e40a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e40e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e410:	07db      	lsls	r3, r3, #31
	itt ne
    e412:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e414:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e418:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e41c:	d380      	bcc.n	e320 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e41e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e422:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e426:	e77b      	b.n	e320 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e428:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e42a:	d3d9      	bcc.n	e3e0 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e42c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e42e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e432:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e436:	d2f9      	bcs.n	e42c <memcpy+0x118>

	ldrb	r3, [r1]
    e438:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e43a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e43c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e43e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e440:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e442:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e444:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e446:	4770      	bx	lr

0000e448 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    e448:	f002 b87a 	b.w	10540 <free>

0000e44c <ultoa>:
	int i=0, j;
    e44c:	f101 3cff 	add.w	ip, r1, #4294967295
{
    e450:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
    e452:	4666      	mov	r6, ip
	int i=0, j;
    e454:	2400      	movs	r4, #0
    e456:	e000      	b.n	e45a <ultoa+0xe>
		i++;
    e458:	3401      	adds	r4, #1
		digit = val % radix;
    e45a:	fbb0 f5f2 	udiv	r5, r0, r2
    e45e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e462:	2b09      	cmp	r3, #9
    e464:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    e468:	f103 0330 	add.w	r3, r3, #48	; 0x30
    e46c:	fa5f fe8e 	uxtb.w	lr, lr
    e470:	bf98      	it	ls
    e472:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    e476:	4290      	cmp	r0, r2
		val /= radix;
    e478:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e47a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    e47e:	d2eb      	bcs.n	e458 <ultoa+0xc>
	buf[i + 1] = 0;
    e480:	1c63      	adds	r3, r4, #1
    e482:	2200      	movs	r2, #0
    e484:	18c8      	adds	r0, r1, r3
    e486:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    e488:	b17c      	cbz	r4, e4aa <ultoa+0x5e>
		t = buf[j];
    e48a:	4662      	mov	r2, ip
    e48c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    e490:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    e494:	eba1 030c 	sub.w	r3, r1, ip
    e498:	3202      	adds	r2, #2
		buf[j] = buf[i];
    e49a:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    e49e:	3b01      	subs	r3, #1
    e4a0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    e4a2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    e4a4:	4423      	add	r3, r4
    e4a6:	429a      	cmp	r2, r3
    e4a8:	dbef      	blt.n	e48a <ultoa+0x3e>
}
    e4aa:	4608      	mov	r0, r1
    e4ac:	bd70      	pop	{r4, r5, r6, pc}
    e4ae:	bf00      	nop

0000e4b0 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e4b0:	eeb4 0a40 	vcmp.f32	s0, s0
{
    e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    e4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    e4bc:	4616      	mov	r6, r2
	int awidth = abs(width);
    e4be:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
    e4c2:	4607      	mov	r7, r0
    e4c4:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
    e4c8:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
    e4cc:	eeb0 8a40 	vmov.f32	s16, s0
    e4d0:	b085      	sub	sp, #20
	if (isnanf(val)) {
    e4d2:	f180 8148 	bvs.w	e766 <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e4d6:	eef0 7ac0 	vabs.f32	s15, s0
    e4da:	ed9f 7ac5 	vldr	s14, [pc, #788]	; e7f0 <dtostrf+0x340>
    e4de:	eef4 7a47 	vcmp.f32	s15, s14
    e4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e4e6:	dd29      	ble.n	e53c <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
    e4e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e4f0:	f100 80ed 	bmi.w	e6ce <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e4f4:	2a03      	cmp	r2, #3
    e4f6:	f340 8091 	ble.w	e61c <dtostrf+0x16c>
    e4fa:	2303      	movs	r3, #3
		if (width<0) {
    e4fc:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e4fe:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    e502:	f2c0 8085 	blt.w	e610 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e506:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e50e:	f100 816a 	bmi.w	e7e6 <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e512:	2149      	movs	r1, #73	; 0x49
    e514:	234e      	movs	r3, #78	; 0x4e
    e516:	2046      	movs	r0, #70	; 0x46
    e518:	1cf4      	adds	r4, r6, #3
    e51a:	7031      	strb	r1, [r6, #0]
    e51c:	70b0      	strb	r0, [r6, #2]
    e51e:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e520:	b122      	cbz	r2, e52c <dtostrf+0x7c>
			*buf++ = ' ';
    e522:	4620      	mov	r0, r4
    e524:	2120      	movs	r1, #32
    e526:	4414      	add	r4, r2
    e528:	f003 ff82 	bl	12430 <memset>
			awidth--;
		}
		*buf = 0;
    e52c:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e52e:	4620      	mov	r0, r4
		*buf = 0;
    e530:	7023      	strb	r3, [r4, #0]
}
    e532:	b005      	add	sp, #20
    e534:	ecbd 8b02 	vpop	{d8}
    e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
    e53c:	4689      	mov	r9, r1
    e53e:	460d      	mov	r5, r1
    e540:	aa02      	add	r2, sp, #8
    e542:	a901      	add	r1, sp, #4
    e544:	4648      	mov	r0, r9
    e546:	f003 fc9f 	bl	11e88 <fcvtf>
	if (precision == 0 && decpt == 0) {
    e54a:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    e54e:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
    e550:	ea59 030a 	orrs.w	r3, r9, sl
    e554:	d172      	bne.n	e63c <dtostrf+0x18c>
		decpt++;
    e556:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
    e558:	7802      	ldrb	r2, [r0, #0]
    e55a:	4ca6      	ldr	r4, [pc, #664]	; (e7f4 <dtostrf+0x344>)
		decpt++;
    e55c:	469a      	mov	sl, r3
    e55e:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
    e560:	4ba5      	ldr	r3, [pc, #660]	; (e7f8 <dtostrf+0x348>)
		decpt++;
    e562:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
    e564:	2a34      	cmp	r2, #52	; 0x34
    e566:	bf88      	it	hi
    e568:	461c      	movhi	r4, r3
	if (sign) reqd++;
    e56a:	9b02      	ldr	r3, [sp, #8]
    e56c:	2b00      	cmp	r3, #0
    e56e:	d07d      	beq.n	e66c <dtostrf+0x1bc>
    e570:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
    e574:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e578:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e57c:	f1bb 0f00 	cmp.w	fp, #0
    e580:	f340 80a1 	ble.w	e6c6 <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
    e584:	465a      	mov	r2, fp
    e586:	2120      	movs	r1, #32
    e588:	4630      	mov	r0, r6
		e += pad;
    e58a:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e58c:	f003 ff50 	bl	12430 <memset>
    e590:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
    e594:	222d      	movs	r2, #45	; 0x2d
    e596:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
    e59a:	f1ba 0f00 	cmp.w	sl, #0
    e59e:	d177      	bne.n	e690 <dtostrf+0x1e0>
    e5a0:	f1b9 0f00 	cmp.w	r9, #0
    e5a4:	d006      	beq.n	e5b4 <dtostrf+0x104>
		*p++ = '0';
    e5a6:	461a      	mov	r2, r3
    e5a8:	2130      	movs	r1, #48	; 0x30
    e5aa:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    e5ae:	212e      	movs	r1, #46	; 0x2e
    e5b0:	7059      	strb	r1, [r3, #1]
    e5b2:	4613      	mov	r3, r2
	while (p < e) {
    e5b4:	42ab      	cmp	r3, r5
    e5b6:	d21f      	bcs.n	e5f8 <dtostrf+0x148>
		*p++ = *s++;
    e5b8:	46a4      	mov	ip, r4
    e5ba:	4619      	mov	r1, r3
    e5bc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e5c0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e5c4:	42a9      	cmp	r1, r5
    e5c6:	d018      	beq.n	e5fa <dtostrf+0x14a>
    e5c8:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    e5ca:	202e      	movs	r0, #46	; 0x2e
    e5cc:	3c01      	subs	r4, #1
    e5ce:	e00b      	b.n	e5e8 <dtostrf+0x138>
    e5d0:	7058      	strb	r0, [r3, #1]
    e5d2:	3302      	adds	r3, #2
		if (p == e) break;
    e5d4:	3c01      	subs	r4, #1
	while (p < e) {
    e5d6:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e5d8:	4619      	mov	r1, r3
	while (p < e) {
    e5da:	d20d      	bcs.n	e5f8 <dtostrf+0x148>
		*p++ = *s++;
    e5dc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    e5e0:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
    e5e4:	42a9      	cmp	r1, r5
    e5e6:	d008      	beq.n	e5fa <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
    e5e8:	9401      	str	r4, [sp, #4]
    e5ea:	2c00      	cmp	r4, #0
    e5ec:	d0f0      	beq.n	e5d0 <dtostrf+0x120>
    e5ee:	460b      	mov	r3, r1
		if (p == e) break;
    e5f0:	3c01      	subs	r4, #1
	while (p < e) {
    e5f2:	42ab      	cmp	r3, r5
		*p++ = *s++;
    e5f4:	4619      	mov	r1, r3
	while (p < e) {
    e5f6:	d3f1      	bcc.n	e5dc <dtostrf+0x12c>
    e5f8:	461d      	mov	r5, r3
	if (width < 0) {
    e5fa:	2f00      	cmp	r7, #0
    e5fc:	db6b      	blt.n	e6d6 <dtostrf+0x226>
	return buf;
    e5fe:	4634      	mov	r4, r6
	*p = 0;
    e600:	2300      	movs	r3, #0
}
    e602:	4620      	mov	r0, r4
	*p = 0;
    e604:	702b      	strb	r3, [r5, #0]
}
    e606:	b005      	add	sp, #20
    e608:	ecbd 8b02 	vpop	{d8}
    e60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
    e610:	b122      	cbz	r2, e61c <dtostrf+0x16c>
				*buf++ = ' ';
    e612:	4630      	mov	r0, r6
    e614:	2120      	movs	r1, #32
    e616:	4416      	add	r6, r2
    e618:	f003 ff0a 	bl	12430 <memset>
		if (val<0) *buf++ = '-';
    e61c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e624:	f140 80bd 	bpl.w	e7a2 <dtostrf+0x2f2>
    e628:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e62a:	2249      	movs	r2, #73	; 0x49
    e62c:	234e      	movs	r3, #78	; 0x4e
    e62e:	2046      	movs	r0, #70	; 0x46
    e630:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
    e632:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e634:	70f0      	strb	r0, [r6, #3]
    e636:	7072      	strb	r2, [r6, #1]
    e638:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e63a:	e777      	b.n	e52c <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
    e63c:	f1ca 0300 	rsb	r3, sl, #0
    e640:	4599      	cmp	r9, r3
    e642:	da57      	bge.n	e6f4 <dtostrf+0x244>
		decpt = -precision;
    e644:	f04f 0801 	mov.w	r8, #1
    e648:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
    e64c:	4c69      	ldr	r4, [pc, #420]	; (e7f4 <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
    e64e:	45c2      	cmp	sl, r8
		decpt = -precision;
    e650:	4640      	mov	r0, r8
    e652:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
    e656:	bfb8      	it	lt
    e658:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e65c:	f1ba 0f00 	cmp.w	sl, #0
    e660:	d152      	bne.n	e708 <dtostrf+0x258>
	if (sign) reqd++;
    e662:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
    e664:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
    e668:	2b00      	cmp	r3, #0
    e66a:	d181      	bne.n	e570 <dtostrf+0xc0>
	pad = width - reqd;
    e66c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
    e670:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
    e674:	f1bb 0f00 	cmp.w	fp, #0
    e678:	dd27      	ble.n	e6ca <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
    e67a:	465a      	mov	r2, fp
    e67c:	2120      	movs	r1, #32
    e67e:	4630      	mov	r0, r6
		e += pad;
    e680:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
    e682:	f003 fed5 	bl	12430 <memset>
    e686:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
    e68a:	f1ba 0f00 	cmp.w	sl, #0
    e68e:	d087      	beq.n	e5a0 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
    e690:	f1ba 0f00 	cmp.w	sl, #0
    e694:	da8e      	bge.n	e5b4 <dtostrf+0x104>
    e696:	f1b9 0f00 	cmp.w	r9, #0
    e69a:	d08b      	beq.n	e5b4 <dtostrf+0x104>
		*p++ = '0';
    e69c:	4618      	mov	r0, r3
		*p++ = '.';
    e69e:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
    e6a0:	2130      	movs	r1, #48	; 0x30
    e6a2:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
    e6a6:	705a      	strb	r2, [r3, #1]
    e6a8:	4602      	mov	r2, r0
    e6aa:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
    e6ac:	3301      	adds	r3, #1
			*p++ = '0';
    e6ae:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
    e6b2:	d1fb      	bne.n	e6ac <dtostrf+0x1fc>
			*p++ = '0';
    e6b4:	f1ba 0f00 	cmp.w	sl, #0
    e6b8:	9301      	str	r3, [sp, #4]
    e6ba:	f1ca 0300 	rsb	r3, sl, #0
    e6be:	bfa8      	it	ge
    e6c0:	2301      	movge	r3, #1
    e6c2:	4403      	add	r3, r0
    e6c4:	e776      	b.n	e5b4 <dtostrf+0x104>
	if (pad > 0) {
    e6c6:	4633      	mov	r3, r6
    e6c8:	e764      	b.n	e594 <dtostrf+0xe4>
    e6ca:	4633      	mov	r3, r6
    e6cc:	e765      	b.n	e59a <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e6ce:	2a04      	cmp	r2, #4
    e6d0:	ddaa      	ble.n	e628 <dtostrf+0x178>
    e6d2:	2304      	movs	r3, #4
    e6d4:	e712      	b.n	e4fc <dtostrf+0x4c>
		pad = (reqd + width) * -1;
    e6d6:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
    e6d8:	f1b8 0f00 	cmp.w	r8, #0
    e6dc:	ea6f 0208 	mvn.w	r2, r8
    e6e0:	da8d      	bge.n	e5fe <dtostrf+0x14e>
    e6e2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e6e6:	2120      	movs	r1, #32
    e6e8:	4628      	mov	r0, r5
    e6ea:	3201      	adds	r2, #1
    e6ec:	4415      	add	r5, r2
    e6ee:	f003 fe9f 	bl	12430 <memset>
    e6f2:	e784      	b.n	e5fe <dtostrf+0x14e>
	reqd = strlen(s);
    e6f4:	f004 fa84 	bl	12c00 <strlen>
    e6f8:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
    e6fa:	45c2      	cmp	sl, r8
    e6fc:	bfb8      	it	lt
    e6fe:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
    e702:	f1ba 0f00 	cmp.w	sl, #0
    e706:	d0ac      	beq.n	e662 <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
    e708:	f1ba 0f00 	cmp.w	sl, #0
    e70c:	f6bf af2d 	bge.w	e56a <dtostrf+0xba>
    e710:	f1b9 0f00 	cmp.w	r9, #0
    e714:	f43f af29 	beq.w	e56a <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
    e718:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
    e71c:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
    e720:	4283      	cmp	r3, r0
    e722:	f4bf af22 	bcs.w	e56a <dtostrf+0xba>
			while (newPrecision > 0) {
    e726:	f1b9 0f00 	cmp.w	r9, #0
    e72a:	dd05      	ble.n	e738 <dtostrf+0x288>
				val *= 10.0f;
    e72c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
    e730:	3d01      	subs	r5, #1
				val *= 10.0f;
    e732:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
    e736:	d1fb      	bne.n	e730 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e738:	aa02      	add	r2, sp, #8
    e73a:	eeb0 0a48 	vmov.f32	s0, s16
    e73e:	4628      	mov	r0, r5
    e740:	a903      	add	r1, sp, #12
    e742:	f003 fba1 	bl	11e88 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e746:	f8dd a004 	ldr.w	sl, [sp, #4]
    e74a:	9b03      	ldr	r3, [sp, #12]
    e74c:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    e750:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    e752:	eba3 030a 	sub.w	r3, r3, sl
    e756:	4293      	cmp	r3, r2
    e758:	f47f af07 	bne.w	e56a <dtostrf+0xba>
    e75c:	f10a 0a01 	add.w	sl, sl, #1
    e760:	f8cd a004 	str.w	sl, [sp, #4]
    e764:	e701      	b.n	e56a <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
    e766:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e76e:	bf4c      	ite	mi
    e770:	2304      	movmi	r3, #4
    e772:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e774:	4293      	cmp	r3, r2
    e776:	da22      	bge.n	e7be <dtostrf+0x30e>
		if (width<0) {
    e778:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e77a:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
    e77e:	db18      	blt.n	e7b2 <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e780:	ee10 3a10 	vmov	r3, s0
    e784:	2b00      	cmp	r3, #0
    e786:	da02      	bge.n	e78e <dtostrf+0x2de>
    e788:	232d      	movs	r3, #45	; 0x2d
    e78a:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e78e:	234e      	movs	r3, #78	; 0x4e
    e790:	2141      	movs	r1, #65	; 0x41
    e792:	1cf4      	adds	r4, r6, #3
    e794:	7033      	strb	r3, [r6, #0]
    e796:	7071      	strb	r1, [r6, #1]
    e798:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e79a:	2a00      	cmp	r2, #0
    e79c:	f47f aec1 	bne.w	e522 <dtostrf+0x72>
    e7a0:	e6c4      	b.n	e52c <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e7a2:	2149      	movs	r1, #73	; 0x49
    e7a4:	224e      	movs	r2, #78	; 0x4e
    e7a6:	2346      	movs	r3, #70	; 0x46
    e7a8:	1cf4      	adds	r4, r6, #3
    e7aa:	7031      	strb	r1, [r6, #0]
    e7ac:	7072      	strb	r2, [r6, #1]
    e7ae:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e7b0:	e6bc      	b.n	e52c <dtostrf+0x7c>
			while (awidth) {
    e7b2:	b122      	cbz	r2, e7be <dtostrf+0x30e>
				*buf++ = ' ';
    e7b4:	4630      	mov	r0, r6
    e7b6:	2120      	movs	r1, #32
    e7b8:	4416      	add	r6, r2
    e7ba:	f003 fe39 	bl	12430 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e7be:	ee18 3a10 	vmov	r3, s16
    e7c2:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e7c4:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e7c8:	db05      	blt.n	e7d6 <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e7ca:	2241      	movs	r2, #65	; 0x41
    e7cc:	1cf4      	adds	r4, r6, #3
    e7ce:	7033      	strb	r3, [r6, #0]
    e7d0:	7072      	strb	r2, [r6, #1]
    e7d2:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
    e7d4:	e6aa      	b.n	e52c <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e7d6:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e7d8:	2241      	movs	r2, #65	; 0x41
    e7da:	1d34      	adds	r4, r6, #4
    e7dc:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    e7de:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    e7e0:	70b2      	strb	r2, [r6, #2]
    e7e2:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
    e7e4:	e6a2      	b.n	e52c <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
    e7e6:	232d      	movs	r3, #45	; 0x2d
    e7e8:	f806 3b01 	strb.w	r3, [r6], #1
    e7ec:	e691      	b.n	e512 <dtostrf+0x62>
    e7ee:	bf00      	nop
    e7f0:	7f7fffff 	.word	0x7f7fffff
    e7f4:	20007fcc 	.word	0x20007fcc
    e7f8:	20007fd0 	.word	0x20007fd0

0000e7fc <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    e7fc:	4a07      	ldr	r2, [pc, #28]	; (e81c <rtc_get+0x20>)
    e7fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    e800:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    e802:	4619      	mov	r1, r3
    e804:	4684      	mov	ip, r0
    e806:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    e808:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    e80a:	4299      	cmp	r1, r3
    e80c:	d1f9      	bne.n	e802 <rtc_get+0x6>
    e80e:	4584      	cmp	ip, r0
    e810:	d1f7      	bne.n	e802 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    e812:	0bdb      	lsrs	r3, r3, #15
}
    e814:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    e818:	4770      	bx	lr
    e81a:	bf00      	nop
    e81c:	400d4000 	.word	0x400d4000

0000e820 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    e820:	4910      	ldr	r1, [pc, #64]	; (e864 <rtc_set+0x44>)
    e822:	688b      	ldr	r3, [r1, #8]
    e824:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
    e828:	608b      	str	r3, [r1, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    e82a:	688b      	ldr	r3, [r1, #8]
    e82c:	07db      	lsls	r3, r3, #31
    e82e:	d4fc      	bmi.n	e82a <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    e830:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    e832:	4a0c      	ldr	r2, [pc, #48]	; (e864 <rtc_set+0x44>)
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    e834:	f023 0301 	bic.w	r3, r3, #1
    e838:	638b      	str	r3, [r1, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    e83a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e83c:	07d9      	lsls	r1, r3, #31
    e83e:	d4fc      	bmi.n	e83a <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    e840:	03c3      	lsls	r3, r0, #15
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    e842:	4908      	ldr	r1, [pc, #32]	; (e864 <rtc_set+0x44>)
	SNVS_LPSRTCMR = t >> 17;
    e844:	0c40      	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    e846:	6553      	str	r3, [r2, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    e848:	6510      	str	r0, [r2, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    e84a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e84c:	f043 0301 	orr.w	r3, r3, #1
    e850:	6393      	str	r3, [r2, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    e852:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    e854:	07db      	lsls	r3, r3, #31
    e856:	d5fc      	bpl.n	e852 <rtc_set+0x32>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    e858:	688b      	ldr	r3, [r1, #8]
    e85a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
    e85e:	608b      	str	r3, [r1, #8]
}
    e860:	4770      	bx	lr
    e862:	bf00      	nop
    e864:	400d4000 	.word	0x400d4000

0000e868 <unused_interrupt_vector>:
	__disable_irq();
    e868:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    e86a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
    e86e:	4c52      	ldr	r4, [pc, #328]	; (e9b8 <unused_interrupt_vector+0x150>)
    e870:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    e874:	f01e 0f04 	tst.w	lr, #4
    e878:	bf0c      	ite	eq
    e87a:	f3ef 8208 	mrseq	r2, MSP
    e87e:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    e882:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
    e886:	4e4d      	ldr	r6, [pc, #308]	; (e9bc <unused_interrupt_vector+0x154>)
	while (p < end) {
    e888:	4d4d      	ldr	r5, [pc, #308]	; (e9c0 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
    e88a:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
    e88e:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
    e892:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
    e896:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
    e89a:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
    e89e:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
    e8a2:	6993      	ldr	r3, [r2, #24]
    e8a4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    e8a8:	69d3      	ldr	r3, [r2, #28]
    e8aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    e8ae:	f000 f8d1 	bl	ea54 <tempmonGetTemp>
    e8b2:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    e8b6:	f7ff ffa1 	bl	e7fc <rtc_get>
	info->len = sizeof(*info) / 4;
    e8ba:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    e8bc:	f04f 32ff 	mov.w	r2, #4294967295
	info->time = rtc_get();
    e8c0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    e8c4:	460b      	mov	r3, r1
    e8c6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e8ca:	493e      	ldr	r1, [pc, #248]	; (e9c4 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    e8cc:	1d30      	adds	r0, r6, #4
    e8ce:	405a      	eors	r2, r3
    e8d0:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    e8d2:	f002 0301 	and.w	r3, r2, #1
    e8d6:	3c01      	subs	r4, #1
    e8d8:	fb01 f303 	mul.w	r3, r1, r3
    e8dc:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    e8e0:	d1f7      	bne.n	e8d2 <unused_interrupt_vector+0x6a>
	while (p < end) {
    e8e2:	42a8      	cmp	r0, r5
    e8e4:	d002      	beq.n	e8ec <unused_interrupt_vector+0x84>
		crc ^= *p++;
    e8e6:	6873      	ldr	r3, [r6, #4]
    e8e8:	4606      	mov	r6, r0
    e8ea:	e7ef      	b.n	e8cc <unused_interrupt_vector+0x64>
	info->crc = crc;
    e8ec:	4b32      	ldr	r3, [pc, #200]	; (e9b8 <unused_interrupt_vector+0x150>)
    e8ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
    e8f2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    e8f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e8fa:	4930      	ldr	r1, [pc, #192]	; (e9bc <unused_interrupt_vector+0x154>)
    e8fc:	4a32      	ldr	r2, [pc, #200]	; (e9c8 <unused_interrupt_vector+0x160>)
    e8fe:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    e902:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    e906:	f3bf 8f4f 	dsb	sy
	asm("isb");
    e90a:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e90e:	4a2f      	ldr	r2, [pc, #188]	; (e9cc <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    e910:	2502      	movs	r5, #2
    e912:	482f      	ldr	r0, [pc, #188]	; (e9d0 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e914:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e916:	492f      	ldr	r1, [pc, #188]	; (e9d4 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    e918:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    e91c:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    e91e:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e920:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e922:	482d      	ldr	r0, [pc, #180]	; (e9d8 <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    e924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    e928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e92c:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e92e:	680b      	ldr	r3, [r1, #0]
    e930:	4283      	cmp	r3, r0
    e932:	d83d      	bhi.n	e9b0 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    e934:	4d26      	ldr	r5, [pc, #152]	; (e9d0 <unused_interrupt_vector+0x168>)
    e936:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    e938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e93c:	f04f 32ff 	mov.w	r2, #4294967295
	PIT_MCR = 0;
    e940:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e942:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    e944:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    e948:	4924      	ldr	r1, [pc, #144]	; (e9dc <unused_interrupt_vector+0x174>)
    e94a:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    e94e:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    e952:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    e956:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    e95a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    e95e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    e962:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    e966:	e001      	b.n	e96c <unused_interrupt_vector+0x104>
		usb_isr();
    e968:	f000 f9ca 	bl	ed00 <usb_isr>
		if (PIT_TFLG0) {
    e96c:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e970:	2b00      	cmp	r3, #0
    e972:	d0f9      	beq.n	e968 <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    e974:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    e976:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    e97a:	2c4f      	cmp	r4, #79	; 0x4f
    e97c:	d9f4      	bls.n	e968 <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e97e:	4b18      	ldr	r3, [pc, #96]	; (e9e0 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    e980:	2002      	movs	r0, #2
    e982:	4918      	ldr	r1, [pc, #96]	; (e9e4 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e984:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    e988:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    e98c:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e98e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    e992:	b93b      	cbnz	r3, e9a4 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    e994:	4814      	ldr	r0, [pc, #80]	; (e9e8 <unused_interrupt_vector+0x180>)
    e996:	4915      	ldr	r1, [pc, #84]	; (e9ec <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e998:	4a0d      	ldr	r2, [pc, #52]	; (e9d0 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    e99a:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    e99c:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d0fa      	beq.n	e99a <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    e9a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e9a8:	4a11      	ldr	r2, [pc, #68]	; (e9f0 <unused_interrupt_vector+0x188>)
    e9aa:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    e9ae:	e7fe      	b.n	e9ae <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    e9b0:	f7ff f834 	bl	da1c <set_arm_clock>
    e9b4:	e7be      	b.n	e934 <unused_interrupt_vector+0xcc>
    e9b6:	bf00      	nop
    e9b8:	2027ff00 	.word	0x2027ff00
    e9bc:	2027ff80 	.word	0x2027ff80
    e9c0:	2027ffa8 	.word	0x2027ffa8
    e9c4:	edb88320 	.word	0xedb88320
    e9c8:	2027ffa0 	.word	0x2027ffa0
    e9cc:	400fc000 	.word	0x400fc000
    e9d0:	40084000 	.word	0x40084000
    e9d4:	20008b90 	.word	0x20008b90
    e9d8:	0bcd3d80 	.word	0x0bcd3d80
    e9dc:	00249f00 	.word	0x00249f00
    e9e0:	400d9000 	.word	0x400d9000
    e9e4:	402e0000 	.word	0x402e0000
    e9e8:	400f8000 	.word	0x400f8000
    e9ec:	0bad00f1 	.word	0x0bad00f1
    e9f0:	05fa0004 	.word	0x05fa0004

0000e9f4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    e9f4:	490a      	ldr	r1, [pc, #40]	; (ea20 <_sbrk+0x2c>)
    e9f6:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    e9f8:	b138      	cbz	r0, ea0a <_sbrk+0x16>
{
    e9fa:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    e9fc:	1813      	adds	r3, r2, r0
    e9fe:	4809      	ldr	r0, [pc, #36]	; (ea24 <_sbrk+0x30>)
    ea00:	4283      	cmp	r3, r0
    ea02:	d804      	bhi.n	ea0e <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ea04:	4610      	mov	r0, r2
                __brkval = prev + incr;
    ea06:	600b      	str	r3, [r1, #0]
}
    ea08:	bd08      	pop	{r3, pc}
    ea0a:	4610      	mov	r0, r2
    ea0c:	4770      	bx	lr
                        errno = ENOMEM;
    ea0e:	f003 fe9b 	bl	12748 <__errno>
    ea12:	230c      	movs	r3, #12
                        return (void *)-1;
    ea14:	f04f 32ff 	mov.w	r2, #4294967295
                        errno = ENOMEM;
    ea18:	6003      	str	r3, [r0, #0]
}
    ea1a:	4610      	mov	r0, r2
    ea1c:	bd08      	pop	{r3, pc}
    ea1e:	bf00      	nop
    ea20:	20008f6c 	.word	0x20008f6c
    ea24:	20280000 	.word	0x20280000

0000ea28 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    ea28:	2000      	movs	r0, #0
    ea2a:	4770      	bx	lr

0000ea2c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    ea2c:	f04f 30ff 	mov.w	r0, #4294967295
    ea30:	4770      	bx	lr
    ea32:	bf00      	nop

0000ea34 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    ea34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ea38:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
    ea3a:	604b      	str	r3, [r1, #4]
}
    ea3c:	4770      	bx	lr
    ea3e:	bf00      	nop

0000ea40 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    ea40:	2001      	movs	r0, #1
    ea42:	4770      	bx	lr

0000ea44 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    ea44:	f04f 30ff 	mov.w	r0, #4294967295
    ea48:	4770      	bx	lr
    ea4a:	bf00      	nop

0000ea4c <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    ea4c:	bf30      	wfi
    ea4e:	e7fd      	b.n	ea4c <abort>

0000ea50 <Panic_Temp_isr>:
  unused_interrupt_vector();
    ea50:	f7ff bf0a 	b.w	e868 <unused_interrupt_vector>

0000ea54 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    ea54:	4a12      	ldr	r2, [pc, #72]	; (eaa0 <tempmonGetTemp+0x4c>)
    ea56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    ea5a:	075b      	lsls	r3, r3, #29
    ea5c:	d5fb      	bpl.n	ea56 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ea5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ea62:	4810      	ldr	r0, [pc, #64]	; (eaa4 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ea64:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ea68:	490f      	ldr	r1, [pc, #60]	; (eaa8 <tempmonGetTemp+0x54>)
    ea6a:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ea6e:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ea72:	ed91 6a00 	vldr	s12, [r1]
    ea76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ea7a:	4a0c      	ldr	r2, [pc, #48]	; (eaac <tempmonGetTemp+0x58>)
    ea7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    ea80:	4b0b      	ldr	r3, [pc, #44]	; (eab0 <tempmonGetTemp+0x5c>)
    ea82:	edd2 6a00 	vldr	s13, [r2]
    ea86:	ee77 7ac7 	vsub.f32	s15, s15, s14
    ea8a:	ed93 7a00 	vldr	s14, [r3]
    ea8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    ea92:	ee67 7a86 	vmul.f32	s15, s15, s12
    ea96:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    ea9a:	ee37 0a40 	vsub.f32	s0, s14, s0
    ea9e:	4770      	bx	lr
    eaa0:	400d8100 	.word	0x400d8100
    eaa4:	20019464 	.word	0x20019464
    eaa8:	2001946c 	.word	0x2001946c
    eaac:	20019470 	.word	0x20019470
    eab0:	20019468 	.word	0x20019468

0000eab4 <endpoint0_receive>:
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
{
    eab4:	b430      	push	{r4, r5}
	//printf("rx %lu\n", len);
	if (len > 0) {
    eab6:	2900      	cmp	r1, #0
    eab8:	d131      	bne.n	eb1e <endpoint0_receive+0x6a>
    eaba:	4c2b      	ldr	r4, [pc, #172]	; (eb68 <endpoint0_receive+0xb4>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    eabc:	4b2b      	ldr	r3, [pc, #172]	; (eb6c <endpoint0_receive+0xb8>)
    eabe:	2101      	movs	r1, #1
    eac0:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eac2:	b1da      	cbz	r2, eafc <endpoint0_receive+0x48>
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eac4:	492a      	ldr	r1, [pc, #168]	; (eb70 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.pointer0 = 0;
    eac6:	2200      	movs	r2, #0
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eac8:	f248 0580 	movw	r5, #32896	; 0x8080
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eacc:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ead0:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ead2:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    ead4:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ead8:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eadc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	USB1_ENDPTPRIME |= (1<<16);
    eae0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eae4:	4313      	orrs	r3, r2
    eae6:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eaea:	4b22      	ldr	r3, [pc, #136]	; (eb74 <endpoint0_receive+0xc0>)
	while (USB1_ENDPTPRIME) ;
    eaec:	4920      	ldr	r1, [pc, #128]	; (eb70 <endpoint0_receive+0xbc>)
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eaee:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
    eaf0:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	d1fb      	bne.n	eaf0 <endpoint0_receive+0x3c>
}
    eaf8:	bc30      	pop	{r4, r5}
    eafa:	4770      	bx	lr
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eafc:	491c      	ldr	r1, [pc, #112]	; (eb70 <endpoint0_receive+0xbc>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eafe:	2580      	movs	r5, #128	; 0x80
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eb00:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    eb04:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    eb06:	605d      	str	r5, [r3, #4]
	endpoint_queue_head[1].status = 0;
    eb08:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    eb0c:	f8c1 01bc 	str.w	r0, [r1, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    eb10:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eb14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    eb18:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    eb1c:	e7e5      	b.n	eaea <endpoint0_receive+0x36>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb1e:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    eb20:	4b15      	ldr	r3, [pc, #84]	; (eb78 <endpoint0_receive+0xc4>)
    eb22:	2401      	movs	r4, #1
		endpoint_queue_head[0].status = 0;
    eb24:	2500      	movs	r5, #0
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb26:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    eb2a:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.next = 1;
    eb2c:	601c      	str	r4, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    eb2e:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    eb30:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    eb34:	4c0c      	ldr	r4, [pc, #48]	; (eb68 <endpoint0_receive+0xb4>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    eb36:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    eb38:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[0].status = 0;
    eb3c:	60e5      	str	r5, [r4, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    eb3e:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eb40:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    eb44:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    eb48:	60a3      	str	r3, [r4, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eb4a:	6159      	str	r1, [r3, #20]
		USB1_ENDPTPRIME |= (1<<0);
    eb4c:	4908      	ldr	r1, [pc, #32]	; (eb70 <endpoint0_receive+0xbc>)
		endpoint0_transfer_data.pointer4 = addr + 16384;
    eb4e:	6198      	str	r0, [r3, #24]
		USB1_ENDPTPRIME |= (1<<0);
    eb50:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eb54:	f043 0301 	orr.w	r3, r3, #1
    eb58:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    eb5c:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
    eb60:	2b00      	cmp	r3, #0
    eb62:	d1fb      	bne.n	eb5c <endpoint0_receive+0xa8>
    eb64:	e7aa      	b.n	eabc <endpoint0_receive+0x8>
    eb66:	bf00      	nop
    eb68:	20000000 	.word	0x20000000
    eb6c:	20009ac0 	.word	0x20009ac0
    eb70:	402e0000 	.word	0x402e0000
    eb74:	200192e8 	.word	0x200192e8
    eb78:	20009ae0 	.word	0x20009ae0

0000eb7c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    eb7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    eb7e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    eb80:	b11b      	cbz	r3, eb8a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    eb82:	6853      	ldr	r3, [r2, #4]
    eb84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    eb88:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    eb8a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    eb8c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    eb8e:	b33c      	cbz	r4, ebe0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    eb90:	4b1a      	ldr	r3, [pc, #104]	; (ebfc <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    eb92:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    eb94:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    eb98:	420c      	tst	r4, r1
    eb9a:	d11d      	bne.n	ebd8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    eb9c:	4e18      	ldr	r6, [pc, #96]	; (ec00 <schedule_transfer+0x84>)
    eb9e:	6877      	ldr	r7, [r6, #4]
    eba0:	e004      	b.n	ebac <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    eba2:	6874      	ldr	r4, [r6, #4]
    eba4:	1be4      	subs	r4, r4, r7
    eba6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    ebaa:	d20b      	bcs.n	ebc4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ebac:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ebb0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    ebb4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ebb8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ebbc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    ebc0:	0464      	lsls	r4, r4, #17
    ebc2:	d5ee      	bpl.n	eba2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ebc4:	400d      	ands	r5, r1
    ebc6:	d107      	bne.n	ebd8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    ebc8:	4c0c      	ldr	r4, [pc, #48]	; (ebfc <schedule_transfer+0x80>)
		endpoint->status = 0;
    ebca:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ebce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ebd2:	430b      	orrs	r3, r1
    ebd4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ebd8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ebda:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ebdc:	bcf0      	pop	{r4, r5, r6, r7}
    ebde:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    ebe0:	4d06      	ldr	r5, [pc, #24]	; (ebfc <schedule_transfer+0x80>)
	endpoint->status = 0;
    ebe2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ebe6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    ebea:	430b      	orrs	r3, r1
    ebec:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    ebf0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    ebf2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ebf4:	b662      	cpsie	i
}
    ebf6:	bcf0      	pop	{r4, r5, r6, r7}
    ebf8:	4770      	bx	lr
    ebfa:	bf00      	nop
    ebfc:	402e0000 	.word	0x402e0000
    ec00:	e0001000 	.word	0xe0001000

0000ec04 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    ec04:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    ec06:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    ec08:	b19d      	cbz	r5, ec32 <run_callbacks+0x2e>
    ec0a:	4606      	mov	r6, r0
    ec0c:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    ec0e:	2400      	movs	r4, #0
    ec10:	e003      	b.n	ec1a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    ec12:	6812      	ldr	r2, [r2, #0]
		count++;
    ec14:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    ec16:	2a01      	cmp	r2, #1
    ec18:	d00c      	beq.n	ec34 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    ec1a:	6853      	ldr	r3, [r2, #4]
    ec1c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    ec20:	d0f7      	beq.n	ec12 <run_callbacks+0xe>
			ep->first_transfer = t;
    ec22:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    ec24:	b12c      	cbz	r4, ec32 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    ec26:	4628      	mov	r0, r5
		ep->callback_function(first);
    ec28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    ec2a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    ec2c:	4798      	blx	r3
	while (count) {
    ec2e:	3c01      	subs	r4, #1
    ec30:	d1f9      	bne.n	ec26 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    ec32:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    ec34:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    ec38:	e7f4      	b.n	ec24 <run_callbacks+0x20>
    ec3a:	bf00      	nop

0000ec3c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ec3c:	b430      	push	{r4, r5}
	if (len > 0) {
    ec3e:	b9d9      	cbnz	r1, ec78 <endpoint0_transmit.constprop.0+0x3c>
    ec40:	4c1f      	ldr	r4, [pc, #124]	; (ecc0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    ec42:	4b20      	ldr	r3, [pc, #128]	; (ecc4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    ec44:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ec46:	4a20      	ldr	r2, [pc, #128]	; (ecc8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    ec48:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ec4a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    ec4e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    ec50:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    ec52:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ec56:	2480      	movs	r4, #128	; 0x80
    ec58:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ec5a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ec5e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ec62:	481a      	ldr	r0, [pc, #104]	; (eccc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    ec64:	432b      	orrs	r3, r5
    ec66:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ec6a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    ec6c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ec70:	2b00      	cmp	r3, #0
    ec72:	d1fb      	bne.n	ec6c <endpoint0_transmit.constprop.0+0x30>
}
    ec74:	bc30      	pop	{r4, r5}
    ec76:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ec78:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ec7a:	4b15      	ldr	r3, [pc, #84]	; (ecd0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ec7c:	4c10      	ldr	r4, [pc, #64]	; (ecc0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    ec7e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ec80:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ec84:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    ec86:	4a10      	ldr	r2, [pc, #64]	; (ecc8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ec88:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ec8a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ec8e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ec90:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ec92:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ec96:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ec98:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ec9a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ec9e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    eca2:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    eca4:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    eca6:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    eca8:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ecaa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ecae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ecb2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ecb6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d1fb      	bne.n	ecb6 <endpoint0_transmit.constprop.0+0x7a>
    ecbe:	e7c0      	b.n	ec42 <endpoint0_transmit.constprop.0+0x6>
    ecc0:	20000000 	.word	0x20000000
    ecc4:	20009ac0 	.word	0x20009ac0
    ecc8:	402e0000 	.word	0x402e0000
    eccc:	200192e8 	.word	0x200192e8
    ecd0:	20009ae0 	.word	0x20009ae0

0000ecd4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    ecd4:	4908      	ldr	r1, [pc, #32]	; (ecf8 <usb_stop_sof_interrupts+0x24>)
    ecd6:	2201      	movs	r2, #1
    ecd8:	780b      	ldrb	r3, [r1, #0]
    ecda:	fa02 f000 	lsl.w	r0, r2, r0
    ecde:	ea23 0000 	bic.w	r0, r3, r0
    ece2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    ece4:	b930      	cbnz	r0, ecf4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    ece6:	4a05      	ldr	r2, [pc, #20]	; (ecfc <usb_stop_sof_interrupts+0x28>)
    ece8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    ecec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    ecf0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    ecf4:	4770      	bx	lr
    ecf6:	bf00      	nop
    ecf8:	20019bd7 	.word	0x20019bd7
    ecfc:	402e0000 	.word	0x402e0000

0000ed00 <usb_isr>:
{
    ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    ed04:	4caa      	ldr	r4, [pc, #680]	; (efb0 <usb_isr+0x2b0>)
{
    ed06:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    ed08:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ed0c:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
    ed0e:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    ed12:	d54f      	bpl.n	edb4 <usb_isr+0xb4>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    ed14:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    ed18:	2b00      	cmp	r3, #0
    ed1a:	d046      	beq.n	edaa <usb_isr+0xaa>
    ed1c:	4da5      	ldr	r5, [pc, #660]	; (efb4 <usb_isr+0x2b4>)
    ed1e:	f8df 92b0 	ldr.w	r9, [pc, #688]	; efd0 <usb_isr+0x2d0>
		reply_buffer[0] = usb_configuration;
    ed22:	f8df 82c8 	ldr.w	r8, [pc, #712]	; efec <usb_isr+0x2ec>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    ed26:	4fa4      	ldr	r7, [pc, #656]	; (efb8 <usb_isr+0x2b8>)
			USB1_ENDPTSETUPSTAT = setupstatus;
    ed28:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    ed2c:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ed30:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ed34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ed38:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    ed3c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    ed40:	049b      	lsls	r3, r3, #18
    ed42:	d5f5      	bpl.n	ed30 <usb_isr+0x30>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ed44:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ed48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    ed4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    ed50:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    ed54:	f8c4 11b4 	str.w	r1, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    ed58:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    ed5c:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    ed60:	d1fa      	bne.n	ed58 <usb_isr+0x58>
			endpoint0_notify_mask = 0;
    ed62:	b291      	uxth	r1, r2
    ed64:	f8c9 3000 	str.w	r3, [r9]
	switch (setup.wRequestAndType) {
    ed68:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    ed6c:	f000 81b8 	beq.w	f0e0 <usb_isr+0x3e0>
    ed70:	f200 80f3 	bhi.w	ef5a <usb_isr+0x25a>
    ed74:	f240 3c02 	movw	ip, #770	; 0x302
    ed78:	4561      	cmp	r1, ip
    ed7a:	f000 81cf 	beq.w	f11c <usb_isr+0x41c>
    ed7e:	f200 809a 	bhi.w	eeb6 <usb_isr+0x1b6>
    ed82:	2982      	cmp	r1, #130	; 0x82
    ed84:	f000 81b4 	beq.w	f0f0 <usb_isr+0x3f0>
    ed88:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    ed8c:	f040 808a 	bne.w	eea4 <usb_isr+0x1a4>
		if (endpoint > 7) break;
    ed90:	f010 0f78 	tst.w	r0, #120	; 0x78
    ed94:	b283      	uxth	r3, r0
    ed96:	f000 81f4 	beq.w	f182 <usb_isr+0x482>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    ed9a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ed9e:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    eda2:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
    eda6:	2b00      	cmp	r3, #0
    eda8:	d1be      	bne.n	ed28 <usb_isr+0x28>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    edaa:	4a81      	ldr	r2, [pc, #516]	; (efb0 <usb_isr+0x2b0>)
    edac:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    edb0:	2b00      	cmp	r3, #0
    edb2:	d142      	bne.n	ee3a <usb_isr+0x13a>
	if (status & USB_USBSTS_URI) { // page 3164
    edb4:	0672      	lsls	r2, r6, #25
    edb6:	d516      	bpl.n	ede6 <usb_isr+0xe6>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    edb8:	4b7d      	ldr	r3, [pc, #500]	; (efb0 <usb_isr+0x2b0>)
    edba:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    edbe:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    edc2:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    edc6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    edca:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    edce:	2c00      	cmp	r4, #0
    edd0:	d1fb      	bne.n	edca <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    edd2:	f04f 32ff 	mov.w	r2, #4294967295
    edd6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    edda:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    edde:	f000 fe9b 	bl	fb18 <usb_serial_reset>
		endpointN_notify_mask = 0;
    ede2:	4b76      	ldr	r3, [pc, #472]	; (efbc <usb_isr+0x2bc>)
    ede4:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    ede6:	01f4      	lsls	r4, r6, #7
    ede8:	d503      	bpl.n	edf2 <usb_isr+0xf2>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    edea:	4b75      	ldr	r3, [pc, #468]	; (efc0 <usb_isr+0x2c0>)
    edec:	681b      	ldr	r3, [r3, #0]
    edee:	b103      	cbz	r3, edf2 <usb_isr+0xf2>
    edf0:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    edf2:	01b0      	lsls	r0, r6, #6
    edf4:	d503      	bpl.n	edfe <usb_isr+0xfe>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    edf6:	4b73      	ldr	r3, [pc, #460]	; (efc4 <usb_isr+0x2c4>)
    edf8:	681b      	ldr	r3, [r3, #0]
    edfa:	b103      	cbz	r3, edfe <usb_isr+0xfe>
    edfc:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    edfe:	0771      	lsls	r1, r6, #29
    ee00:	d508      	bpl.n	ee14 <usb_isr+0x114>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    ee02:	4b6b      	ldr	r3, [pc, #428]	; (efb0 <usb_isr+0x2b0>)
    ee04:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    ee08:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    ee0c:	d047      	beq.n	ee9e <usb_isr+0x19e>
			usb_high_speed = 1;
    ee0e:	4b6e      	ldr	r3, [pc, #440]	; (efc8 <usb_isr+0x2c8>)
    ee10:	2201      	movs	r2, #1
    ee12:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    ee14:	4b66      	ldr	r3, [pc, #408]	; (efb0 <usb_isr+0x2b0>)
    ee16:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    ee1a:	061a      	lsls	r2, r3, #24
    ee1c:	d50a      	bpl.n	ee34 <usb_isr+0x134>
    ee1e:	0633      	lsls	r3, r6, #24
    ee20:	d508      	bpl.n	ee34 <usb_isr+0x134>
		if (usb_reboot_timer) {
    ee22:	4a6a      	ldr	r2, [pc, #424]	; (efcc <usb_isr+0x2cc>)
    ee24:	7813      	ldrb	r3, [r2, #0]
    ee26:	b12b      	cbz	r3, ee34 <usb_isr+0x134>
			if (--usb_reboot_timer == 0) {
    ee28:	3b01      	subs	r3, #1
    ee2a:	b2db      	uxtb	r3, r3
    ee2c:	7013      	strb	r3, [r2, #0]
    ee2e:	2b00      	cmp	r3, #0
    ee30:	f000 8230 	beq.w	f294 <usb_isr+0x594>
}
    ee34:	b003      	add	sp, #12
    ee36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    ee3a:	4965      	ldr	r1, [pc, #404]	; (efd0 <usb_isr+0x2d0>)
			USB1_ENDPTCOMPLETE = completestatus;
    ee3c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    ee40:	6808      	ldr	r0, [r1, #0]
    ee42:	4203      	tst	r3, r0
    ee44:	f040 81c2 	bne.w	f1cc <usb_isr+0x4cc>
			completestatus &= endpointN_notify_mask;
    ee48:	4a5c      	ldr	r2, [pc, #368]	; (efbc <usb_isr+0x2bc>)
    ee4a:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    ee4c:	401c      	ands	r4, r3
    ee4e:	d0b1      	beq.n	edb4 <usb_isr+0xb4>
				while (tx) {
    ee50:	ea5f 4814 	movs.w	r8, r4, lsr #16
    ee54:	d010      	beq.n	ee78 <usb_isr+0x178>
    ee56:	4d57      	ldr	r5, [pc, #348]	; (efb4 <usb_isr+0x2b4>)
					tx &= ~(1<<p);
    ee58:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    ee5c:	fa98 f7a8 	rbit	r7, r8
    ee60:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ee64:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
    ee68:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ee6c:	3040      	adds	r0, #64	; 0x40
    ee6e:	f7ff fec9 	bl	ec04 <run_callbacks>
				while (tx) {
    ee72:	ea38 0807 	bics.w	r8, r8, r7
    ee76:	d1f1      	bne.n	ee5c <usb_isr+0x15c>
				uint32_t rx = completestatus & 0xffff;
    ee78:	b2a4      	uxth	r4, r4
				while(rx) {
    ee7a:	2c00      	cmp	r4, #0
    ee7c:	d09a      	beq.n	edb4 <usb_isr+0xb4>
    ee7e:	4d4d      	ldr	r5, [pc, #308]	; (efb4 <usb_isr+0x2b4>)
					rx &= ~(1<<p);
    ee80:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    ee84:	fa94 f7a4 	rbit	r7, r4
    ee88:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
    ee8c:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
    ee90:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
    ee94:	f7ff feb6 	bl	ec04 <run_callbacks>
				while(rx) {
    ee98:	43bc      	bics	r4, r7
    ee9a:	d1f3      	bne.n	ee84 <usb_isr+0x184>
    ee9c:	e78a      	b.n	edb4 <usb_isr+0xb4>
			usb_high_speed = 0;
    ee9e:	4a4a      	ldr	r2, [pc, #296]	; (efc8 <usb_isr+0x2c8>)
    eea0:	7013      	strb	r3, [r2, #0]
    eea2:	e7b7      	b.n	ee14 <usb_isr+0x114>
	switch (setup.wRequestAndType) {
    eea4:	2980      	cmp	r1, #128	; 0x80
    eea6:	f47f af78 	bne.w	ed9a <usb_isr+0x9a>
		reply_buffer[0] = 0;
    eeaa:	484a      	ldr	r0, [pc, #296]	; (efd4 <usb_isr+0x2d4>)
		endpoint0_transmit(reply_buffer, 2, 0);
    eeac:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    eeae:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    eeb0:	f7ff fec4 	bl	ec3c <endpoint0_transmit.constprop.0>
		return;
    eeb4:	e775      	b.n	eda2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    eeb6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    eeba:	f000 80f4 	beq.w	f0a6 <usb_isr+0x3a6>
    eebe:	f5a1 61d0 	sub.w	r1, r1, #1664	; 0x680
    eec2:	2901      	cmp	r1, #1
    eec4:	f63f af69 	bhi.w	ed9a <usb_isr+0x9a>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    eec8:	4b43      	ldr	r3, [pc, #268]	; (efd8 <usb_isr+0x2d8>)
    eeca:	6859      	ldr	r1, [r3, #4]
    eecc:	2900      	cmp	r1, #0
    eece:	f43f af64 	beq.w	ed9a <usb_isr+0x9a>
    eed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    eed6:	fa1f fa80 	uxth.w	sl, r0
    eeda:	e004      	b.n	eee6 <usb_isr+0x1e6>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    eedc:	6919      	ldr	r1, [r3, #16]
    eede:	330c      	adds	r3, #12
    eee0:	2900      	cmp	r1, #0
    eee2:	f43f af5a 	beq.w	ed9a <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    eee6:	f8b3 c000 	ldrh.w	ip, [r3]
    eeea:	45f4      	cmp	ip, lr
    eeec:	d1f6      	bne.n	eedc <usb_isr+0x1dc>
    eeee:	885a      	ldrh	r2, [r3, #2]
    eef0:	4552      	cmp	r2, sl
    eef2:	d1f3      	bne.n	eedc <usb_isr+0x1dc>
				if ((setup.wValue >> 8) == 3) {
    eef4:	ea4f 221e 	mov.w	r2, lr, lsr #8
    eef8:	2a03      	cmp	r2, #3
    eefa:	f000 8185 	beq.w	f208 <usb_isr+0x508>
					datalen = list->length;
    eefe:	f8b3 a008 	ldrh.w	sl, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    ef02:	0c00      	lsrs	r0, r0, #16
    ef04:	4582      	cmp	sl, r0
    ef06:	bf28      	it	cs
    ef08:	4682      	movcs	sl, r0
				if (setup.wValue == 0x200) {
    ef0a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    ef0e:	f040 8181 	bne.w	f214 <usb_isr+0x514>
					if (usb_high_speed) src = usb_config_descriptor_480;
    ef12:	4b2d      	ldr	r3, [pc, #180]	; (efc8 <usb_isr+0x2c8>)
    ef14:	4a31      	ldr	r2, [pc, #196]	; (efdc <usb_isr+0x2dc>)
    ef16:	7819      	ldrb	r1, [r3, #0]
    ef18:	4b31      	ldr	r3, [pc, #196]	; (efe0 <usb_isr+0x2e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ef1a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; efe4 <usb_isr+0x2e4>
    ef1e:	2900      	cmp	r1, #0
    ef20:	bf0c      	ite	eq
    ef22:	4611      	moveq	r1, r2
    ef24:	4619      	movne	r1, r3
    ef26:	482f      	ldr	r0, [pc, #188]	; (efe4 <usb_isr+0x2e4>)
    ef28:	4652      	mov	r2, sl
    ef2a:	f7ff f9f3 	bl	e314 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ef2e:	f02b 031f 	bic.w	r3, fp, #31
	uint32_t end_addr = (uint32_t)addr + size;
    ef32:	eb0b 020a 	add.w	r2, fp, sl
	asm("dsb");
    ef36:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ef3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    ef3e:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    ef42:	3320      	adds	r3, #32
	} while (location < end_addr);
    ef44:	429a      	cmp	r2, r3
    ef46:	d8fa      	bhi.n	ef3e <usb_isr+0x23e>
	asm("dsb");
    ef48:	f3bf 8f4f 	dsb	sy
	asm("isb");
    ef4c:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ef50:	4824      	ldr	r0, [pc, #144]	; (efe4 <usb_isr+0x2e4>)
    ef52:	4651      	mov	r1, sl
    ef54:	f7ff fe72 	bl	ec3c <endpoint0_transmit.constprop.0>
				return;
    ef58:	e723      	b.n	eda2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    ef5a:	f242 3c21 	movw	ip, #8993	; 0x2321
    ef5e:	4561      	cmp	r1, ip
    ef60:	d00d      	beq.n	ef7e <usb_isr+0x27e>
    ef62:	d877      	bhi.n	f054 <usb_isr+0x354>
    ef64:	f242 0c21 	movw	ip, #8225	; 0x2021
    ef68:	4561      	cmp	r1, ip
    ef6a:	f000 808b 	beq.w	f084 <usb_isr+0x384>
    ef6e:	f242 2c21 	movw	ip, #8737	; 0x2221
    ef72:	4561      	cmp	r1, ip
    ef74:	d13c      	bne.n	eff0 <usb_isr+0x2f0>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    ef76:	b280      	uxth	r0, r0
    ef78:	2800      	cmp	r0, #0
    ef7a:	f000 80f9 	beq.w	f170 <usb_isr+0x470>
	endpoint0_transfer_ack.next = 1;
    ef7e:	4b1a      	ldr	r3, [pc, #104]	; (efe8 <usb_isr+0x2e8>)
	endpoint0_transfer_ack.pointer0 = 0;
    ef80:	2200      	movs	r2, #0
    ef82:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    ef84:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    ef86:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    ef88:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    ef8a:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ef8c:	2280      	movs	r2, #128	; 0x80
    ef8e:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ef90:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    ef94:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ef98:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    ef9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    efa0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    efa4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    efa8:	2b00      	cmp	r3, #0
    efaa:	d1fb      	bne.n	efa4 <usb_isr+0x2a4>
    efac:	e6f9      	b.n	eda2 <usb_isr+0xa2>
    efae:	bf00      	nop
    efb0:	402e0000 	.word	0x402e0000
    efb4:	20000000 	.word	0x20000000
    efb8:	402e01c0 	.word	0x402e01c0
    efbc:	200192ec 	.word	0x200192ec
    efc0:	20019bac 	.word	0x20019bac
    efc4:	20019bb0 	.word	0x20019bb0
    efc8:	20019bde 	.word	0x20019bde
    efcc:	20019bdf 	.word	0x20019bdf
    efd0:	200192e8 	.word	0x200192e8
    efd4:	20019404 	.word	0x20019404
    efd8:	200089cc 	.word	0x200089cc
    efdc:	60002960 	.word	0x60002960
    efe0:	600029cc 	.word	0x600029cc
    efe4:	20200800 	.word	0x20200800
    efe8:	20009ac0 	.word	0x20009ac0
    efec:	20019bdd 	.word	0x20019bdd
	switch (setup.wRequestAndType) {
    eff0:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    eff4:	f47f aed1 	bne.w	ed9a <usb_isr+0x9a>
		usb_configuration = setup.wValue;
    eff8:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    effc:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
    f000:	9301      	str	r3, [sp, #4]
		usb_configuration = setup.wValue;
    f002:	f888 2000 	strb.w	r2, [r8]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    f006:	4aa6      	ldr	r2, [pc, #664]	; (f2a0 <usb_isr+0x5a0>)
    f008:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    f00c:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    f010:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    f014:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
		usb_serial_configure();
    f018:	f000 fd80 	bl	fb1c <usb_serial_configure>
		usb_mtp_configure();
    f01c:	f000 faaa 	bl	f574 <usb_mtp_configure>
	endpoint0_transfer_ack.next = 1;
    f020:	4aa0      	ldr	r2, [pc, #640]	; (f2a4 <usb_isr+0x5a4>)
    f022:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    f024:	9b01      	ldr	r3, [sp, #4]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f026:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f028:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f02a:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    f02c:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f02e:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f030:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
    f034:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f036:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f03a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
    f03e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    f042:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    f046:	f8c9 3000 	str.w	r3, [r9]
	while (USB1_ENDPTPRIME) ;
    f04a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f04e:	2b00      	cmp	r3, #0
    f050:	d1fb      	bne.n	f04a <usb_isr+0x34a>
    f052:	e6a6      	b.n	eda2 <usb_isr+0xa2>
	switch (setup.wRequestAndType) {
    f054:	f246 4321 	movw	r3, #25633	; 0x6421
    f058:	4299      	cmp	r1, r3
    f05a:	d01f      	beq.n	f09c <usb_isr+0x39c>
    f05c:	f246 73a1 	movw	r3, #26529	; 0x67a1
    f060:	4299      	cmp	r1, r3
    f062:	f47f ae9a 	bne.w	ed9a <usb_isr+0x9a>
		if (setup.wLength >= 4) {
    f066:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
    f06a:	f4ff ae96 	bcc.w	ed9a <usb_isr+0x9a>
			endpoint0_buffer[2] = usb_mtp_status;
    f06e:	4b8e      	ldr	r3, [pc, #568]	; (f2a8 <usb_isr+0x5a8>)
			endpoint0_buffer[0] = 4;
    f070:	2104      	movs	r1, #4
    f072:	488e      	ldr	r0, [pc, #568]	; (f2ac <usb_isr+0x5ac>)
			endpoint0_buffer[2] = usb_mtp_status;
    f074:	781b      	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    f076:	8001      	strh	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    f078:	7083      	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    f07a:	2320      	movs	r3, #32
    f07c:	70c3      	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    f07e:	f7ff fddd 	bl	ec3c <endpoint0_transmit.constprop.0>
			return;
    f082:	e68e      	b.n	eda2 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    f084:	0c01      	lsrs	r1, r0, #16
    f086:	2907      	cmp	r1, #7
    f088:	f47f ae87 	bne.w	ed9a <usb_isr+0x9a>
			endpoint0_setupdata.bothwords = setupdata;
    f08c:	4b88      	ldr	r3, [pc, #544]	; (f2b0 <usb_isr+0x5b0>)
    f08e:	e9c3 2000 	strd	r2, r0, [r3]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    f092:	2201      	movs	r2, #1
    f094:	4885      	ldr	r0, [pc, #532]	; (f2ac <usb_isr+0x5ac>)
    f096:	f7ff fd0d 	bl	eab4 <endpoint0_receive>
			return;
    f09a:	e682      	b.n	eda2 <usb_isr+0xa2>
		if (setup.wLength == 6) {
    f09c:	0c01      	lsrs	r1, r0, #16
    f09e:	2906      	cmp	r1, #6
    f0a0:	f47f ae7b 	bne.w	ed9a <usb_isr+0x9a>
    f0a4:	e7f2      	b.n	f08c <usb_isr+0x38c>
	endpoint0_transfer_ack.next = 1;
    f0a6:	497f      	ldr	r1, [pc, #508]	; (f2a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f0a8:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f0aa:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
    f0ac:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f0ae:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f0b0:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f0b2:	2380      	movs	r3, #128	; 0x80
    f0b4:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f0b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f0ba:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f0be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f0c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f0c6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f0ca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f0ce:	2b00      	cmp	r3, #0
    f0d0:	d1fb      	bne.n	f0ca <usb_isr+0x3ca>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    f0d2:	0c13      	lsrs	r3, r2, #16
    f0d4:	065b      	lsls	r3, r3, #25
    f0d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    f0da:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    f0de:	e660      	b.n	eda2 <usb_isr+0xa2>
		reply_buffer[0] = usb_configuration;
    f0e0:	4874      	ldr	r0, [pc, #464]	; (f2b4 <usb_isr+0x5b4>)
		endpoint0_transmit(reply_buffer, 1, 0);
    f0e2:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    f0e4:	f898 3000 	ldrb.w	r3, [r8]
    f0e8:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    f0ea:	f7ff fda7 	bl	ec3c <endpoint0_transmit.constprop.0>
		return;
    f0ee:	e658      	b.n	eda2 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    f0f0:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    f0f2:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    f0f6:	f47f ae50 	bne.w	ed9a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    f0fe:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    f102:	4a6c      	ldr	r2, [pc, #432]	; (f2b4 <usb_isr+0x5b4>)
    f104:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f106:	0618      	lsls	r0, r3, #24
    f108:	d47b      	bmi.n	f202 <usb_isr+0x502>
    f10a:	07cb      	lsls	r3, r1, #31
    f10c:	d501      	bpl.n	f112 <usb_isr+0x412>
			reply_buffer[0] = 1;
    f10e:	2301      	movs	r3, #1
    f110:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    f112:	2102      	movs	r1, #2
    f114:	4867      	ldr	r0, [pc, #412]	; (f2b4 <usb_isr+0x5b4>)
    f116:	f7ff fd91 	bl	ec3c <endpoint0_transmit.constprop.0>
		return;
    f11a:	e642      	b.n	eda2 <usb_isr+0xa2>
		if (endpoint > 7) break;
    f11c:	f010 0f78 	tst.w	r0, #120	; 0x78
    f120:	b283      	uxth	r3, r0
    f122:	f47f ae3a 	bne.w	ed9a <usb_isr+0x9a>
		endpoint = setup.wIndex & 0x7F;
    f126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f12a:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    f12e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f132:	bf14      	ite	ne
    f134:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    f138:	f043 0301 	orreq.w	r3, r3, #1
    f13c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f140:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f142:	4b58      	ldr	r3, [pc, #352]	; (f2a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f144:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f146:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f148:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f14a:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f14c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f14e:	2280      	movs	r2, #128	; 0x80
    f150:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f152:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f156:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f15a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f15e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f162:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f166:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f16a:	2b00      	cmp	r3, #0
    f16c:	d1fb      	bne.n	f166 <usb_isr+0x466>
    f16e:	e618      	b.n	eda2 <usb_isr+0xa2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f170:	4b51      	ldr	r3, [pc, #324]	; (f2b8 <usb_isr+0x5b8>)
			usb_cdc_line_rtsdtr = setup.wValue;
    f172:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    f176:	6819      	ldr	r1, [r3, #0]
    f178:	4b50      	ldr	r3, [pc, #320]	; (f2bc <usb_isr+0x5bc>)
    f17a:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    f17c:	4b50      	ldr	r3, [pc, #320]	; (f2c0 <usb_isr+0x5c0>)
    f17e:	701a      	strb	r2, [r3, #0]
    f180:	e6fd      	b.n	ef7e <usb_isr+0x27e>
		endpoint = setup.wIndex & 0x7F;
    f182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    f186:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    f18a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    f18e:	bf14      	ite	ne
    f190:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    f194:	f023 0301 	biceq.w	r3, r3, #1
    f198:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    f19c:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    f19e:	4b41      	ldr	r3, [pc, #260]	; (f2a4 <usb_isr+0x5a4>)
	endpoint_queue_head[1].status = 0;
    f1a0:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    f1a2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    f1a4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    f1a6:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    f1a8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    f1aa:	2280      	movs	r2, #128	; 0x80
    f1ac:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    f1ae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    f1b2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    f1b6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f1ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    f1be:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    f1c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    f1c6:	2b00      	cmp	r3, #0
    f1c8:	d1fb      	bne.n	f1c2 <usb_isr+0x4c2>
    f1ca:	e5ea      	b.n	eda2 <usb_isr+0xa2>
				endpoint0_notify_mask = 0;
    f1cc:	2000      	movs	r0, #0
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f1ce:	f242 0421 	movw	r4, #8225	; 0x2021
				endpoint0_notify_mask = 0;
    f1d2:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    f1d4:	4936      	ldr	r1, [pc, #216]	; (f2b0 <usb_isr+0x5b0>)
    f1d6:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f1d8:	8809      	ldrh	r1, [r1, #0]
    f1da:	42a1      	cmp	r1, r4
    f1dc:	d02f      	beq.n	f23e <usb_isr+0x53e>
	if (setup.wRequestAndType == 0x6421) {
    f1de:	f246 4221 	movw	r2, #25633	; 0x6421
    f1e2:	4291      	cmp	r1, r2
    f1e4:	f47f ae30 	bne.w	ee48 <usb_isr+0x148>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    f1e8:	4a30      	ldr	r2, [pc, #192]	; (f2ac <usb_isr+0x5ac>)
    f1ea:	7811      	ldrb	r1, [r2, #0]
    f1ec:	2901      	cmp	r1, #1
    f1ee:	f47f ae2b 	bne.w	ee48 <usb_isr+0x148>
    f1f2:	7852      	ldrb	r2, [r2, #1]
    f1f4:	2a40      	cmp	r2, #64	; 0x40
    f1f6:	f47f ae27 	bne.w	ee48 <usb_isr+0x148>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    f1fa:	4a2b      	ldr	r2, [pc, #172]	; (f2a8 <usb_isr+0x5a8>)
    f1fc:	2119      	movs	r1, #25
    f1fe:	7011      	strb	r1, [r2, #0]
    f200:	e622      	b.n	ee48 <usb_isr+0x148>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    f202:	03c9      	lsls	r1, r1, #15
    f204:	d483      	bmi.n	f10e <usb_isr+0x40e>
    f206:	e784      	b.n	f112 <usb_isr+0x412>
				if (datalen > setup.wLength) datalen = setup.wLength;
    f208:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    f20a:	f891 a000 	ldrb.w	sl, [r1]
    f20e:	4582      	cmp	sl, r0
    f210:	bf28      	it	cs
    f212:	4682      	movcs	sl, r0
				} else if (setup.wValue == 0x700) {
    f214:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    f218:	d135      	bne.n	f286 <usb_isr+0x586>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f21a:	4b2a      	ldr	r3, [pc, #168]	; (f2c4 <usb_isr+0x5c4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f21c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; f2dc <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
    f220:	7819      	ldrb	r1, [r3, #0]
    f222:	4a29      	ldr	r2, [pc, #164]	; (f2c8 <usb_isr+0x5c8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f224:	4658      	mov	r0, fp
					if (usb_high_speed) src = usb_config_descriptor_12;
    f226:	4b29      	ldr	r3, [pc, #164]	; (f2cc <usb_isr+0x5cc>)
					memcpy(usb_descriptor_buffer, src, datalen);
    f228:	2900      	cmp	r1, #0
    f22a:	bf0c      	ite	eq
    f22c:	4611      	moveq	r1, r2
    f22e:	4619      	movne	r1, r3
    f230:	4652      	mov	r2, sl
    f232:	f7ff f86f 	bl	e314 <memcpy>
					usb_descriptor_buffer[1] = 7;
    f236:	2307      	movs	r3, #7
    f238:	f88b 3001 	strb.w	r3, [fp, #1]
    f23c:	e677      	b.n	ef2e <usb_isr+0x22e>
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    f23e:	b280      	uxth	r0, r0
    f240:	2800      	cmp	r0, #0
    f242:	f47f ae01 	bne.w	ee48 <usb_isr+0x148>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f246:	4919      	ldr	r1, [pc, #100]	; (f2ac <usb_isr+0x5ac>)
    f248:	4c21      	ldr	r4, [pc, #132]	; (f2d0 <usb_isr+0x5d0>)
    f24a:	c903      	ldmia	r1, {r0, r1}
    f24c:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    f24e:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    f250:	ea4f 4111 	mov.w	r1, r1, lsr #16
    f254:	6020      	str	r0, [r4, #0]
    f256:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    f258:	f47f adf6 	bne.w	ee48 <usb_isr+0x148>
	__disable_irq();
    f25c:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    f25e:	481d      	ldr	r0, [pc, #116]	; (f2d4 <usb_isr+0x5d4>)
    f260:	7801      	ldrb	r1, [r0, #0]
    f262:	f041 0108 	orr.w	r1, r1, #8
    f266:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    f268:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    f26c:	060d      	lsls	r5, r1, #24
    f26e:	d405      	bmi.n	f27c <usb_isr+0x57c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f270:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f272:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    f274:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    f278:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    f27c:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    f27e:	4a16      	ldr	r2, [pc, #88]	; (f2d8 <usb_isr+0x5d8>)
    f280:	2150      	movs	r1, #80	; 0x50
    f282:	7011      	strb	r1, [r2, #0]
    f284:	e5e0      	b.n	ee48 <usb_isr+0x148>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    f286:	f8df b054 	ldr.w	fp, [pc, #84]	; f2dc <usb_isr+0x5dc>
    f28a:	4652      	mov	r2, sl
    f28c:	4658      	mov	r0, fp
    f28e:	f7ff f841 	bl	e314 <memcpy>
    f292:	e64c      	b.n	ef2e <usb_isr+0x22e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    f294:	2003      	movs	r0, #3
    f296:	f7ff fd1d 	bl	ecd4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    f29a:	f00b fee5 	bl	1b068 <___reboot_Teensyduino__veneer>
    f29e:	bf00      	nop
    f2a0:	00cc0002 	.word	0x00cc0002
    f2a4:	20009ac0 	.word	0x20009ac0
    f2a8:	20009559 	.word	0x20009559
    f2ac:	200192e0 	.word	0x200192e0
    f2b0:	2000c1c0 	.word	0x2000c1c0
    f2b4:	20019404 	.word	0x20019404
    f2b8:	20019b88 	.word	0x20019b88
    f2bc:	20019ba8 	.word	0x20019ba8
    f2c0:	20019bdc 	.word	0x20019bdc
    f2c4:	20019bde 	.word	0x20019bde
    f2c8:	600029cc 	.word	0x600029cc
    f2cc:	60002960 	.word	0x60002960
    f2d0:	20019ba0 	.word	0x20019ba0
    f2d4:	20019bd7 	.word	0x20019bd7
    f2d8:	20019bdf 	.word	0x20019bdf
    f2dc:	20200800 	.word	0x20200800

0000f2e0 <usb_config_rx>:
{
    f2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f2e4:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f2e6:	1e83      	subs	r3, r0, #2
    f2e8:	2b03      	cmp	r3, #3
    f2ea:	d901      	bls.n	f2f0 <usb_config_rx+0x10>
}
    f2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f2f0:	f8df 904c 	ldr.w	r9, [pc, #76]	; f340 <usb_config_rx+0x60>
    f2f4:	4615      	mov	r5, r2
    f2f6:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    f2f8:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f2fa:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f2fe:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    f300:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    f304:	2100      	movs	r1, #0
    f306:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f30a:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    f30c:	f003 f890 	bl	12430 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f310:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    f314:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f316:	0952      	lsrs	r2, r2, #5
    f318:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    f31c:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    f320:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f324:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    f328:	2f00      	cmp	r7, #0
    f32a:	d0df      	beq.n	f2ec <usb_config_rx+0xc>
    f32c:	4a03      	ldr	r2, [pc, #12]	; (f33c <usb_config_rx+0x5c>)
    f32e:	40b3      	lsls	r3, r6
    f330:	6811      	ldr	r1, [r2, #0]
    f332:	430b      	orrs	r3, r1
    f334:	6013      	str	r3, [r2, #0]
}
    f336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f33a:	bf00      	nop
    f33c:	200192ec 	.word	0x200192ec
    f340:	20000000 	.word	0x20000000

0000f344 <usb_config_tx>:
{
    f344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f348:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    f34a:	1e81      	subs	r1, r0, #2
    f34c:	2903      	cmp	r1, #3
    f34e:	d901      	bls.n	f354 <usb_config_tx+0x10>
}
    f350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f354:	01c7      	lsls	r7, r0, #7
    f356:	f8df 904c 	ldr.w	r9, [pc, #76]	; f3a4 <usb_config_tx+0x60>
    f35a:	4692      	mov	sl, r2
    f35c:	4604      	mov	r4, r0
    f35e:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    f360:	223c      	movs	r2, #60	; 0x3c
    f362:	2100      	movs	r1, #0
    f364:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    f366:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f36a:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    f36c:	f108 0004 	add.w	r0, r8, #4
    f370:	f003 f85e 	bl	12430 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    f374:	faba f28a 	clz	r2, sl
    f378:	0952      	lsrs	r2, r2, #5
    f37a:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    f37e:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    f382:	2201      	movs	r2, #1
	qh->callback_function = callback;
    f384:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    f388:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    f38c:	2e00      	cmp	r6, #0
    f38e:	d0df      	beq.n	f350 <usb_config_tx+0xc>
    f390:	4b03      	ldr	r3, [pc, #12]	; (f3a0 <usb_config_tx+0x5c>)
    f392:	3410      	adds	r4, #16
    f394:	6819      	ldr	r1, [r3, #0]
    f396:	40a2      	lsls	r2, r4
    f398:	430a      	orrs	r2, r1
    f39a:	601a      	str	r2, [r3, #0]
}
    f39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f3a0:	200192ec 	.word	0x200192ec
    f3a4:	20000000 	.word	0x20000000

0000f3a8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    f3a8:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    f3aa:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    f3ac:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    f3ae:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    f3b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    f3b6:	b410      	push	{r4}
	transfer->next = 1;
    f3b8:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    f3ba:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    f3bc:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    f3c0:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    f3c2:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    f3c6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    f3ca:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    f3cc:	6181      	str	r1, [r0, #24]
}
    f3ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    f3d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    f3d6:	4770      	bx	lr

0000f3d8 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f3d8:	1e83      	subs	r3, r0, #2
{
    f3da:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f3dc:	2b03      	cmp	r3, #3
    f3de:	d900      	bls.n	f3e2 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    f3e0:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f3e2:	4b06      	ldr	r3, [pc, #24]	; (f3fc <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    f3e4:	f100 0110 	add.w	r1, r0, #16
    f3e8:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    f3ec:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    f3f0:	fa0c f101 	lsl.w	r1, ip, r1
    f3f4:	3040      	adds	r0, #64	; 0x40
    f3f6:	f7ff bbc1 	b.w	eb7c <schedule_transfer>
    f3fa:	bf00      	nop
    f3fc:	20000000 	.word	0x20000000

0000f400 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f400:	1e83      	subs	r3, r0, #2
{
    f402:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    f404:	2b03      	cmp	r3, #3
    f406:	d900      	bls.n	f40a <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    f408:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    f40a:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    f40c:	4b02      	ldr	r3, [pc, #8]	; (f418 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    f40e:	4081      	lsls	r1, r0
    f410:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    f414:	f7ff bbb2 	b.w	eb7c <schedule_transfer>
    f418:	20000000 	.word	0x20000000

0000f41c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    f41c:	4a08      	ldr	r2, [pc, #32]	; (f440 <usb_transfer_status+0x24>)
    f41e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    f422:	b672      	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    f424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    f428:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    f42c:	6841      	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    f42e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    f432:	b662      	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    f434:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    f438:	d0f3      	beq.n	f422 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    f43a:	4608      	mov	r0, r1
    f43c:	4770      	bx	lr
    f43e:	bf00      	nop
    f440:	402e0000 	.word	0x402e0000

0000f444 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f444:	4a12      	ldr	r2, [pc, #72]	; (f490 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    f446:	4b13      	ldr	r3, [pc, #76]	; (f494 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    f448:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    f44c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    f450:	4298      	cmp	r0, r3
{
    f452:	b510      	push	{r4, lr}
    f454:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    f456:	d202      	bcs.n	f45e <usb_init_serialnumber+0x1a>
    f458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f45c:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    f45e:	4c0e      	ldr	r4, [pc, #56]	; (f498 <usb_init_serialnumber+0x54>)
    f460:	a901      	add	r1, sp, #4
    f462:	220a      	movs	r2, #10
    f464:	f7fe fff2 	bl	e44c <ultoa>
	for (i=0; i<10; i++) {
    f468:	a901      	add	r1, sp, #4
    f46a:	2300      	movs	r3, #0
    f46c:	4620      	mov	r0, r4
		char c = buf[i];
    f46e:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    f472:	3301      	adds	r3, #1
		if (!c) break;
    f474:	b13a      	cbz	r2, f486 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    f476:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    f478:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    f47c:	d1f7      	bne.n	f46e <usb_init_serialnumber+0x2a>
    f47e:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f480:	7023      	strb	r3, [r4, #0]
}
    f482:	b004      	add	sp, #16
    f484:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    f486:	005b      	lsls	r3, r3, #1
    f488:	b2db      	uxtb	r3, r3
    f48a:	7023      	strb	r3, [r4, #0]
}
    f48c:	b004      	add	sp, #16
    f48e:	bd10      	pop	{r4, pc}
    f490:	401f4400 	.word	0x401f4400
    f494:	00989680 	.word	0x00989680
    f498:	2000953c 	.word	0x2000953c

0000f49c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    f49c:	f000 bc5c 	b.w	fd58 <usb_serial_flush_input>

0000f4a0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    f4a0:	f000 bc4e 	b.w	fd40 <usb_serial_available>

0000f4a4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    f4a4:	f000 bcea 	b.w	fe7c <usb_serial_flush_output>

0000f4a8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    f4a8:	f000 bcc0 	b.w	fe2c <usb_serial_write_buffer_free>

0000f4ac <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    f4ac:	4608      	mov	r0, r1
    f4ae:	4611      	mov	r1, r2
    f4b0:	f000 bcb0 	b.w	fe14 <usb_serial_write>

0000f4b4 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    f4b4:	4a02      	ldr	r2, [pc, #8]	; (f4c0 <txEvent_event+0xc>)
    f4b6:	6813      	ldr	r3, [r2, #0]
    f4b8:	3301      	adds	r3, #1
    f4ba:	6013      	str	r3, [r2, #0]
    f4bc:	4770      	bx	lr
    f4be:	bf00      	nop
    f4c0:	2001937c 	.word	0x2001937c

0000f4c4 <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    f4c4:	4a0e      	ldr	r2, [pc, #56]	; (f500 <rx_event+0x3c>)
{
    f4c6:	b410      	push	{r4}
	uint32_t head = rx_head;
    f4c8:	7813      	ldrb	r3, [r2, #0]
	int i = t->callback_param;
    f4ca:	69c4      	ldr	r4, [r0, #28]
	if (++head > RX_NUM) head = 0;
    f4cc:	3301      	adds	r3, #1
    f4ce:	2b04      	cmp	r3, #4
    f4d0:	d811      	bhi.n	f4f6 <rx_event+0x32>
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
	rx_head = head;
    f4d2:	fa5f fc83 	uxtb.w	ip, r3
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f4d6:	6841      	ldr	r1, [r0, #4]
	rx_head = head;
    f4d8:	f882 c000 	strb.w	ip, [r2]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f4dc:	4a09      	ldr	r2, [pc, #36]	; (f504 <rx_event+0x40>)
    f4de:	f3c1 410e 	ubfx	r1, r1, #16, #15
	rx_list_transfer_len[head] = len;
    f4e2:	4809      	ldr	r0, [pc, #36]	; (f508 <rx_event+0x44>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f4e4:	8812      	ldrh	r2, [r2, #0]
    f4e6:	1a52      	subs	r2, r2, r1
	rx_list[head] = i;
    f4e8:	4908      	ldr	r1, [pc, #32]	; (f50c <rx_event+0x48>)
    f4ea:	54cc      	strb	r4, [r1, r3]
}
    f4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	rx_list_transfer_len[head] = len;
    f4f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    f4f4:	4770      	bx	lr
    f4f6:	f04f 0c00 	mov.w	ip, #0
	if (++head > RX_NUM) head = 0;
    f4fa:	4663      	mov	r3, ip
    f4fc:	e7eb      	b.n	f4d6 <rx_event+0x12>
    f4fe:	bf00      	nop
    f500:	20019bd3 	.word	0x20019bd3
    f504:	20019bbe 	.word	0x20019bbe
    f508:	20019450 	.word	0x20019450
    f50c:	2001943c 	.word	0x2001943c

0000f510 <rx_queue_transfer>:
{
    f510:	b570      	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f512:	4915      	ldr	r1, [pc, #84]	; (f568 <rx_queue_transfer+0x58>)
{
    f514:	4603      	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    f516:	4d15      	ldr	r5, [pc, #84]	; (f56c <rx_queue_transfer+0x5c>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f518:	eb01 2140 	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    f51c:	f8b5 c000 	ldrh.w	ip, [r5]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f520:	460a      	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    f522:	448c      	add	ip, r1
	asm("dsb");
    f524:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f528:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    f52c:	f8c4 2f5c 	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    f530:	3220      	adds	r2, #32
	} while (location < end_addr);
    f532:	4594      	cmp	ip, r2
    f534:	d8fa      	bhi.n	f52c <rx_queue_transfer+0x1c>
	asm("dsb");
    f536:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f53a:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f53e:	882a      	ldrh	r2, [r5, #0]
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f540:	f44f 3600 	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f544:	4d0a      	ldr	r5, [pc, #40]	; (f570 <rx_queue_transfer+0x60>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f546:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f54a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
    f54e:	4628      	mov	r0, r5
    f550:	f7ff ff2a 	bl	f3a8 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f554:	4629      	mov	r1, r5
    f556:	2004      	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f558:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    f55c:	f7ff ff50 	bl	f400 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f560:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
}
    f564:	bd70      	pop	{r4, r5, r6, pc}
    f566:	bf00      	nop
    f568:	20200880 	.word	0x20200880
    f56c:	20019bbe 	.word	0x20019bbe
    f570:	2000bf40 	.word	0x2000bf40

0000f574 <usb_mtp_configure>:
	if (usb_high_speed) {
    f574:	4b1f      	ldr	r3, [pc, #124]	; (f5f4 <usb_mtp_configure+0x80>)
{
    f576:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    f578:	781b      	ldrb	r3, [r3, #0]
    f57a:	2b00      	cmp	r3, #0
    f57c:	d037      	beq.n	f5ee <usb_mtp_configure+0x7a>
    f57e:	f44f 7300 	mov.w	r3, #512	; 0x200
    f582:	461e      	mov	r6, r3
		tx_packet_size = MTP_TX_SIZE_480;
    f584:	491c      	ldr	r1, [pc, #112]	; (f5f8 <usb_mtp_configure+0x84>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f586:	2280      	movs	r2, #128	; 0x80
		rx_packet_size = MTP_RX_SIZE_480;
    f588:	4d1c      	ldr	r5, [pc, #112]	; (f5fc <usb_mtp_configure+0x88>)
	tx_head = 0;
    f58a:	2400      	movs	r4, #0
		tx_packet_size = MTP_TX_SIZE_480;
    f58c:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f58e:	2100      	movs	r1, #0
    f590:	481b      	ldr	r0, [pc, #108]	; (f600 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    f592:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    f594:	f002 ff4c 	bl	12430 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    f598:	2280      	movs	r2, #128	; 0x80
    f59a:	2100      	movs	r1, #0
    f59c:	4819      	ldr	r0, [pc, #100]	; (f604 <usb_mtp_configure+0x90>)
    f59e:	f002 ff47 	bl	12430 <memset>
	rx_head = 0;
    f5a2:	4b19      	ldr	r3, [pc, #100]	; (f608 <usb_mtp_configure+0x94>)
	tx_head = 0;
    f5a4:	4a19      	ldr	r2, [pc, #100]	; (f60c <usb_mtp_configure+0x98>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f5a6:	4631      	mov	r1, r6
	rx_head = 0;
    f5a8:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f5aa:	2004      	movs	r0, #4
	rx_tail = 0;
    f5ac:	4b18      	ldr	r3, [pc, #96]	; (f610 <usb_mtp_configure+0x9c>)
	tx_head = 0;
    f5ae:	7014      	strb	r4, [r2, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f5b0:	4622      	mov	r2, r4
	rx_tail = 0;
    f5b2:	701c      	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    f5b4:	4623      	mov	r3, r4
    f5b6:	f7ff fec5 	bl	f344 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    f5ba:	4622      	mov	r2, r4
    f5bc:	8829      	ldrh	r1, [r5, #0]
    f5be:	2004      	movs	r0, #4
    f5c0:	4b14      	ldr	r3, [pc, #80]	; (f614 <usb_mtp_configure+0xa0>)
    f5c2:	f7ff fe8d 	bl	f2e0 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    f5c6:	4622      	mov	r2, r4
    f5c8:	4b13      	ldr	r3, [pc, #76]	; (f618 <usb_mtp_configure+0xa4>)
    f5ca:	2120      	movs	r1, #32
    f5cc:	2005      	movs	r0, #5
    f5ce:	f7ff feb9 	bl	f344 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f5d2:	4620      	mov	r0, r4
    f5d4:	f7ff ff9c 	bl	f510 <rx_queue_transfer>
    f5d8:	2001      	movs	r0, #1
    f5da:	f7ff ff99 	bl	f510 <rx_queue_transfer>
    f5de:	2002      	movs	r0, #2
    f5e0:	f7ff ff96 	bl	f510 <rx_queue_transfer>
    f5e4:	2003      	movs	r0, #3
}
    f5e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    f5ea:	f7ff bf91 	b.w	f510 <rx_queue_transfer>
    f5ee:	2340      	movs	r3, #64	; 0x40
    f5f0:	461e      	mov	r6, r3
    f5f2:	e7c7      	b.n	f584 <usb_mtp_configure+0x10>
    f5f4:	20019bde 	.word	0x20019bde
    f5f8:	20019bc4 	.word	0x20019bc4
    f5fc:	20019bbe 	.word	0x20019bbe
    f600:	2000c0c0 	.word	0x2000c0c0
    f604:	2000bf40 	.word	0x2000bf40
    f608:	20019bd3 	.word	0x20019bd3
    f60c:	20019bd9 	.word	0x20019bd9
    f610:	20019bd5 	.word	0x20019bd5
    f614:	0000f4c5 	.word	0x0000f4c5
    f618:	0000f4b5 	.word	0x0000f4b5

0000f61c <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    f61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    f620:	4e20      	ldr	r6, [pc, #128]	; (f6a4 <usb_mtp_recv+0x88>)
	uint32_t tail = rx_tail;
    f622:	f8df b094 	ldr.w	fp, [pc, #148]	; f6b8 <usb_mtp_recv+0x9c>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f626:	4f20      	ldr	r7, [pc, #128]	; (f6a8 <usb_mtp_recv+0x8c>)
	uint32_t wait_begin_at = systick_millis_count;
    f628:	f8d6 9000 	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    f62c:	f89b 4000 	ldrb.w	r4, [fp]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f630:	783b      	ldrb	r3, [r7, #0]
    f632:	b353      	cbz	r3, f68a <usb_mtp_recv+0x6e>
    f634:	4682      	mov	sl, r0
    f636:	460d      	mov	r5, r1
    f638:	b2e4      	uxtb	r4, r4
    f63a:	f8df 8080 	ldr.w	r8, [pc, #128]	; f6bc <usb_mtp_recv+0xa0>
    f63e:	e008      	b.n	f652 <usb_mtp_recv+0x36>
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at >= timeout)  {
    f640:	6833      	ldr	r3, [r6, #0]
    f642:	eba3 0309 	sub.w	r3, r3, r9
    f646:	42ab      	cmp	r3, r5
    f648:	d224      	bcs.n	f694 <usb_mtp_recv+0x78>
			return 0;
		}
		yield();
    f64a:	f000 fc61 	bl	ff10 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f64e:	783b      	ldrb	r3, [r7, #0]
    f650:	b1db      	cbz	r3, f68a <usb_mtp_recv+0x6e>
		if (tail != rx_head) break;
    f652:	f898 3000 	ldrb.w	r3, [r8]
    f656:	429c      	cmp	r4, r3
    f658:	d0f2      	beq.n	f640 <usb_mtp_recv+0x24>
	}
	if (++tail > RX_NUM) tail = 0;
    f65a:	3401      	adds	r4, #1
    f65c:	2c04      	cmp	r4, #4
    f65e:	d81d      	bhi.n	f69c <usb_mtp_recv+0x80>
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    f660:	b2e3      	uxtb	r3, r4
    f662:	f88b 3000 	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    f666:	4650      	mov	r0, sl
	int len = rx_list_transfer_len[tail];
    f668:	4b10      	ldr	r3, [pc, #64]	; (f6ac <usb_mtp_recv+0x90>)
	uint32_t i = rx_list[tail];
    f66a:	4a11      	ldr	r2, [pc, #68]	; (f6b0 <usb_mtp_recv+0x94>)
	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
    f66c:	4911      	ldr	r1, [pc, #68]	; (f6b4 <usb_mtp_recv+0x98>)
	uint32_t i = rx_list[tail];
    f66e:	5d15      	ldrb	r5, [r2, r4]
	int len = rx_list_transfer_len[tail];
    f670:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	memcpy(buffer,  rx_item_buffer, len);
    f674:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f678:	4622      	mov	r2, r4
    f67a:	f7fe fe4b 	bl	e314 <memcpy>
	rx_queue_transfer(i);
    f67e:	4628      	mov	r0, r5
    f680:	f7ff ff46 	bl	f510 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    f684:	4620      	mov	r0, r4
    f686:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f68a:	f04f 34ff 	mov.w	r4, #4294967295
}
    f68e:	4620      	mov	r0, r4
    f690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
    f694:	2400      	movs	r4, #0
}
    f696:	4620      	mov	r0, r4
    f698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f69c:	2300      	movs	r3, #0
	if (++tail > RX_NUM) tail = 0;
    f69e:	461c      	mov	r4, r3
    f6a0:	e7df      	b.n	f662 <usb_mtp_recv+0x46>
    f6a2:	bf00      	nop
    f6a4:	20019b88 	.word	0x20019b88
    f6a8:	20019bdd 	.word	0x20019bdd
    f6ac:	20019450 	.word	0x20019450
    f6b0:	2001943c 	.word	0x2001943c
    f6b4:	20200880 	.word	0x20200880
    f6b8:	20019bd5 	.word	0x20019bd5
    f6bc:	20019bd3 	.word	0x20019bd3

0000f6c0 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    f6c0:	4b07      	ldr	r3, [pc, #28]	; (f6e0 <usb_mtp_available+0x20>)
    f6c2:	781b      	ldrb	r3, [r3, #0]
    f6c4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f6c8:	b14b      	cbz	r3, f6de <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    f6ca:	4a06      	ldr	r2, [pc, #24]	; (f6e4 <usb_mtp_available+0x24>)
    f6cc:	4b06      	ldr	r3, [pc, #24]	; (f6e8 <usb_mtp_available+0x28>)
    f6ce:	7812      	ldrb	r2, [r2, #0]
    f6d0:	781b      	ldrb	r3, [r3, #0]
    f6d2:	429a      	cmp	r2, r3
    f6d4:	d002      	beq.n	f6dc <usb_mtp_available+0x1c>
    f6d6:	4b05      	ldr	r3, [pc, #20]	; (f6ec <usb_mtp_available+0x2c>)
    f6d8:	8818      	ldrh	r0, [r3, #0]
    f6da:	4770      	bx	lr
	if (!usb_configuration) return 0;
    f6dc:	2000      	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    f6de:	4770      	bx	lr
    f6e0:	20019bdd 	.word	0x20019bdd
    f6e4:	20019bd3 	.word	0x20019bd3
    f6e8:	20019bd5 	.word	0x20019bd5
    f6ec:	20019bbe 	.word	0x20019bbe

0000f6f0 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    f6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    f6f4:	f8df b0c0 	ldr.w	fp, [pc, #192]	; f7b8 <usb_mtp_send+0xc8>
    f6f8:	4c2a      	ldr	r4, [pc, #168]	; (f7a4 <usb_mtp_send+0xb4>)
    f6fa:	f89b 3000 	ldrb.w	r3, [fp]
	uint32_t wait_begin_at = systick_millis_count;
    f6fe:	4e2a      	ldr	r6, [pc, #168]	; (f7a8 <usb_mtp_send+0xb8>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    f700:	4f2a      	ldr	r7, [pc, #168]	; (f7ac <usb_mtp_send+0xbc>)
	transfer_t *xfer = tx_transfer + tx_head;
    f702:	eb04 1443 	add.w	r4, r4, r3, lsl #5
	uint32_t wait_begin_at = systick_millis_count;
    f706:	f8d6 8000 	ldr.w	r8, [r6]
		if (!usb_configuration) return -1; // usb not enumerated by host
    f70a:	783b      	ldrb	r3, [r7, #0]
    f70c:	2b00      	cmp	r3, #0
    f70e:	d042      	beq.n	f796 <usb_mtp_send+0xa6>
    f710:	4682      	mov	sl, r0
    f712:	4689      	mov	r9, r1
    f714:	4615      	mov	r5, r2
    f716:	e008      	b.n	f72a <usb_mtp_send+0x3a>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f718:	6833      	ldr	r3, [r6, #0]
    f71a:	eba3 0308 	sub.w	r3, r3, r8
    f71e:	42ab      	cmp	r3, r5
    f720:	d83d      	bhi.n	f79e <usb_mtp_send+0xae>
		yield();
    f722:	f000 fbf5 	bl	ff10 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    f726:	783b      	ldrb	r3, [r7, #0]
    f728:	b3ab      	cbz	r3, f796 <usb_mtp_send+0xa6>
		uint32_t status = usb_transfer_status(xfer);
    f72a:	4620      	mov	r0, r4
    f72c:	f7ff fe76 	bl	f41c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    f730:	0603      	lsls	r3, r0, #24
    f732:	d4f1      	bmi.n	f718 <usb_mtp_send+0x28>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f734:	f89b 3000 	ldrb.w	r3, [fp]
	memcpy(txdata, buffer, len);
    f738:	464a      	mov	r2, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f73a:	4d1d      	ldr	r5, [pc, #116]	; (f7b0 <usb_mtp_send+0xc0>)
	memcpy(txdata, buffer, len);
    f73c:	4651      	mov	r1, sl
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    f73e:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    f742:	4628      	mov	r0, r5
    f744:	f7fe fde6 	bl	e314 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    f748:	4a1a      	ldr	r2, [pc, #104]	; (f7b4 <usb_mtp_send+0xc4>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    f74a:	462b      	mov	r3, r5
    f74c:	8812      	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f74e:	442a      	add	r2, r5
	asm("dsb");
    f750:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f754:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f758:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    f75c:	3320      	adds	r3, #32
	} while (location < end_addr);
    f75e:	429a      	cmp	r2, r3
    f760:	d8fa      	bhi.n	f758 <usb_mtp_send+0x68>
	asm("dsb");
    f762:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f766:	f3bf 8f6f 	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    f76a:	2300      	movs	r3, #0
    f76c:	4629      	mov	r1, r5
    f76e:	464a      	mov	r2, r9
    f770:	4620      	mov	r0, r4
    f772:	f7ff fe19 	bl	f3a8 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    f776:	4621      	mov	r1, r4
    f778:	2004      	movs	r0, #4
    f77a:	f7ff fe2d 	bl	f3d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f77e:	f89b 3000 	ldrb.w	r3, [fp]
	return len;
    f782:	4648      	mov	r0, r9
	if (++tx_head >= TX_NUM) tx_head = 0;
    f784:	3301      	adds	r3, #1
    f786:	b2db      	uxtb	r3, r3
    f788:	2b03      	cmp	r3, #3
    f78a:	bf88      	it	hi
    f78c:	2300      	movhi	r3, #0
    f78e:	f88b 3000 	strb.w	r3, [fp]
}
    f792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    f796:	f04f 30ff 	mov.w	r0, #4294967295
}
    f79a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    f79e:	2000      	movs	r0, #0
}
    f7a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7a4:	2000c0c0 	.word	0x2000c0c0
    f7a8:	20019b88 	.word	0x20019b88
    f7ac:	20019bdd 	.word	0x20019bdd
    f7b0:	20201080 	.word	0x20201080
    f7b4:	20019bc4 	.word	0x20019bc4
    f7b8:	20019bd9 	.word	0x20019bd9

0000f7bc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f7be:	4c14      	ldr	r4, [pc, #80]	; (f810 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7c0:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7c4:	4e13      	ldr	r6, [pc, #76]	; (f814 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    f7ca:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7ce:	4f12      	ldr	r7, [pc, #72]	; (f818 <rx_queue_transfer+0x5c>)
    f7d0:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    f7d4:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    f7d6:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    f7da:	4621      	mov	r1, r4
    f7dc:	883a      	ldrh	r2, [r7, #0]
    f7de:	4630      	mov	r0, r6
    f7e0:	f7ff fde2 	bl	f3a8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    f7e4:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    f7e6:	4423      	add	r3, r4
	asm("dsb");
    f7e8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    f7ec:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    f7f0:	3420      	adds	r4, #32
	} while (location < end_addr);
    f7f2:	42a3      	cmp	r3, r4
    f7f4:	d8fa      	bhi.n	f7ec <rx_queue_transfer+0x30>
	asm("dsb");
    f7f6:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f7fa:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    f7fe:	2003      	movs	r0, #3
    f800:	4631      	mov	r1, r6
    f802:	f7ff fdfd 	bl	f400 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    f806:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    f80a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    f80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f810:	20201880 	.word	0x20201880
    f814:	2000bfc0 	.word	0x2000bfc0
    f818:	20019bc0 	.word	0x20019bc0

0000f81c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f81c:	4b24      	ldr	r3, [pc, #144]	; (f8b0 <rx_event+0x94>)
{
    f81e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f822:	881c      	ldrh	r4, [r3, #0]
    f824:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    f826:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    f828:	f3c3 430e 	ubfx	r3, r3, #16, #15
    f82c:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    f82e:	2c00      	cmp	r4, #0
    f830:	dd24      	ble.n	f87c <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    f832:	4920      	ldr	r1, [pc, #128]	; (f8b4 <rx_event+0x98>)
		if (head != rx_tail) {
    f834:	4820      	ldr	r0, [pc, #128]	; (f8b8 <rx_event+0x9c>)
		uint32_t head = rx_head;
    f836:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    f838:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    f83a:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    f83c:	4e1f      	ldr	r6, [pc, #124]	; (f8bc <rx_event+0xa0>)
		if (head != rx_tail) {
    f83e:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    f840:	481f      	ldr	r0, [pc, #124]	; (f8c0 <rx_event+0xa4>)
		if (head != rx_tail) {
    f842:	d007      	beq.n	f854 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    f844:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    f848:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    f84c:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    f850:	4294      	cmp	r4, r2
    f852:	d918      	bls.n	f886 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    f854:	3301      	adds	r3, #1
		rx_index[i] = 0;
    f856:	2200      	movs	r2, #0
		rx_count[i] = len;
    f858:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    f85c:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    f85e:	4e19      	ldr	r6, [pc, #100]	; (f8c4 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    f860:	bf88      	it	hi
    f862:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    f864:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    f868:	bf98      	it	ls
    f86a:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    f86c:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    f86e:	4b16      	ldr	r3, [pc, #88]	; (f8c8 <rx_event+0xac>)
		rx_head = head;
    f870:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    f872:	681a      	ldr	r2, [r3, #0]
    f874:	4414      	add	r4, r2
    f876:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    f87c:	4628      	mov	r0, r5
}
    f87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    f882:	f7ff bf9b 	b.w	f7bc <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f886:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    f88a:	4910      	ldr	r1, [pc, #64]	; (f8cc <rx_event+0xb0>)
    f88c:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    f88e:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    f890:	4408      	add	r0, r1
    f892:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    f896:	f7fe fd3d 	bl	e314 <memcpy>
				rx_available += len;
    f89a:	4a0b      	ldr	r2, [pc, #44]	; (f8c8 <rx_event+0xac>)
				rx_queue_transfer(i);
    f89c:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    f89e:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    f8a2:	6813      	ldr	r3, [r2, #0]
    f8a4:	4423      	add	r3, r4
}
    f8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    f8aa:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    f8ac:	f7ff bf86 	b.w	f7bc <rx_queue_transfer>
    f8b0:	20019bc0 	.word	0x20019bc0
    f8b4:	20019bd4 	.word	0x20019bd4
    f8b8:	20019bd6 	.word	0x20019bd6
    f8bc:	2001941c 	.word	0x2001941c
    f8c0:	20019444 	.word	0x20019444
    f8c4:	2001942c 	.word	0x2001942c
    f8c8:	20019418 	.word	0x20019418
    f8cc:	20201880 	.word	0x20201880

0000f8d0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    f8d0:	4b1d      	ldr	r3, [pc, #116]	; (f948 <usb_serial_flush_callback+0x78>)
    f8d2:	781a      	ldrb	r2, [r3, #0]
    f8d4:	2a00      	cmp	r2, #0
    f8d6:	d136      	bne.n	f946 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    f8d8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    f8dc:	4a1b      	ldr	r2, [pc, #108]	; (f94c <usb_serial_flush_callback+0x7c>)
    f8de:	7812      	ldrb	r2, [r2, #0]
    f8e0:	b38a      	cbz	r2, f946 <usb_serial_flush_callback+0x76>
{
    f8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    f8e6:	4d1a      	ldr	r5, [pc, #104]	; (f950 <usb_serial_flush_callback+0x80>)
    f8e8:	882a      	ldrh	r2, [r5, #0]
    f8ea:	b352      	cbz	r2, f942 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    f8ec:	4e19      	ldr	r6, [pc, #100]	; (f954 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    f8ee:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    f8f2:	4f19      	ldr	r7, [pc, #100]	; (f958 <usb_serial_flush_callback+0x88>)
    f8f4:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f8f6:	4c19      	ldr	r4, [pc, #100]	; (f95c <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    f8f8:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    f8fc:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    f900:	4642      	mov	r2, r8
    f902:	4638      	mov	r0, r7
    f904:	4621      	mov	r1, r4
    f906:	f7ff fd4f 	bl	f3a8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    f90a:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    f90e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    f912:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    f916:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    f91a:	3420      	adds	r4, #32
	} while (location < end_addr);
    f91c:	42a2      	cmp	r2, r4
    f91e:	d8fa      	bhi.n	f916 <usb_serial_flush_callback+0x46>
	asm("dsb");
    f920:	f3bf 8f4f 	dsb	sy
	asm("isb");
    f924:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    f928:	2003      	movs	r0, #3
    f92a:	4639      	mov	r1, r7
    f92c:	f7ff fd54 	bl	f3d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    f930:	7833      	ldrb	r3, [r6, #0]
    f932:	3301      	adds	r3, #1
    f934:	b2db      	uxtb	r3, r3
    f936:	2b03      	cmp	r3, #3
    f938:	bf88      	it	hi
    f93a:	2300      	movhi	r3, #0
    f93c:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    f93e:	2300      	movs	r3, #0
    f940:	802b      	strh	r3, [r5, #0]
}
    f942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f946:	4770      	bx	lr
    f948:	20019bdb 	.word	0x20019bdb
    f94c:	20019bdd 	.word	0x20019bdd
    f950:	20019bc2 	.word	0x20019bc2
    f954:	20019bda 	.word	0x20019bda
    f958:	2000c140 	.word	0x2000c140
    f95c:	20202880 	.word	0x20202880

0000f960 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
    f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f964:	b085      	sub	sp, #20
	while (size > 0) {
    f966:	e9cd 1001 	strd	r1, r0, [sp, #4]
    f96a:	2900      	cmp	r1, #0
    f96c:	f000 80bf 	beq.w	faee <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
    f970:	2300      	movs	r3, #0
    f972:	4c60      	ldr	r4, [pc, #384]	; (faf4 <usb_serial_write.part.0+0x194>)
    f974:	f8df 8198 	ldr.w	r8, [pc, #408]	; fb10 <usb_serial_write.part.0+0x1b0>
    f978:	f8df a198 	ldr.w	sl, [pc, #408]	; fb14 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
    f97c:	4f5e      	ldr	r7, [pc, #376]	; (faf8 <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
    f97e:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
    f980:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    f982:	4a5e      	ldr	r2, [pc, #376]	; (fafc <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
    f984:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    f986:	4b5e      	ldr	r3, [pc, #376]	; (fb00 <usb_serial_write.part.0+0x1a0>)
    f988:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
    f98a:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
    f98e:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
    f992:	2b00      	cmp	r3, #0
    f994:	f040 80a7 	bne.w	fae6 <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
    f998:	461e      	mov	r6, r3
		int waiting=0;
    f99a:	461d      	mov	r5, r3
			tx_noautoflush = 0;
    f99c:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
    f99e:	4648      	mov	r0, r9
    f9a0:	f7ff fd3c 	bl	f41c <usb_transfer_status>
			if (!(status & 0x80)) {
    f9a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    f9a8:	f000 808c 	beq.w	fac4 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
    f9ac:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
    f9b0:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
    f9b4:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
    f9b8:	b905      	cbnz	r5, f9bc <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
    f9ba:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
    f9bc:	2b00      	cmp	r3, #0
    f9be:	d17d      	bne.n	fabc <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    f9c0:	683b      	ldr	r3, [r7, #0]
    f9c2:	1b9b      	subs	r3, r3, r6
    f9c4:	2b78      	cmp	r3, #120	; 0x78
    f9c6:	f200 8087 	bhi.w	fad8 <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
    f9ca:	4b4e      	ldr	r3, [pc, #312]	; (fb04 <usb_serial_write.part.0+0x1a4>)
    f9cc:	781b      	ldrb	r3, [r3, #0]
    f9ce:	2b00      	cmp	r3, #0
    f9d0:	d074      	beq.n	fabc <usb_serial_write.part.0+0x15c>
			yield();
    f9d2:	f000 fa9d 	bl	ff10 <yield>
			tx_noautoflush = 1;
    f9d6:	2201      	movs	r2, #1
		while (!tx_available) {
    f9d8:	f8b8 3000 	ldrh.w	r3, [r8]
    f9dc:	4615      	mov	r5, r2
			tx_noautoflush = 1;
    f9de:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
    f9e0:	2b00      	cmp	r3, #0
    f9e2:	d0dc      	beq.n	f99e <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    f9e4:	4a46      	ldr	r2, [pc, #280]	; (fb00 <usb_serial_write.part.0+0x1a0>)
    f9e6:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    f9ea:	7811      	ldrb	r1, [r2, #0]
    f9ec:	461a      	mov	r2, r3
    f9ee:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
    f9f2:	4d45      	ldr	r5, [pc, #276]	; (fb08 <usb_serial_write.part.0+0x1a8>)
    f9f4:	02c9      	lsls	r1, r1, #11
    f9f6:	4428      	add	r0, r5
		if (size >= tx_available) {
    f9f8:	9d01      	ldr	r5, [sp, #4]
    f9fa:	4295      	cmp	r5, r2
    f9fc:	d217      	bcs.n	fa2e <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
    f9fe:	9303      	str	r3, [sp, #12]
    fa00:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
    fa04:	462a      	mov	r2, r5
    fa06:	f7fe fc85 	bl	e314 <memcpy>
			tx_available -= size;
    fa0a:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fa0c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
    fa10:	1b5b      	subs	r3, r3, r5
    fa12:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    fa16:	4b3d      	ldr	r3, [pc, #244]	; (fb0c <usb_serial_write.part.0+0x1ac>)
    fa18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
    fa1c:	f3bf 8f4f 	dsb	sy
			sent += size;
    fa20:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
    fa22:	2300      	movs	r3, #0
			sent += size;
    fa24:	4428      	add	r0, r5
		tx_noautoflush = 0;
    fa26:	7023      	strb	r3, [r4, #0]
}
    fa28:	b005      	add	sp, #20
    fa2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fa2e:	4b36      	ldr	r3, [pc, #216]	; (fb08 <usb_serial_write.part.0+0x1a8>)
    fa30:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
    fa32:	9902      	ldr	r1, [sp, #8]
    fa34:	f7fe fc6e 	bl	e314 <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    fa38:	2300      	movs	r3, #0
    fa3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fa3e:	4629      	mov	r1, r5
    fa40:	4648      	mov	r0, r9
    fa42:	f7ff fcb1 	bl	f3a8 <usb_prepare_transfer>
	asm("dsb");
    fa46:	f3bf 8f4f 	dsb	sy
    fa4a:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
    fa4e:	f505 6300 	add.w	r3, r5, #2048	; 0x800
    fa52:	4293      	cmp	r3, r2
    fa54:	bf34      	ite	cc
    fa56:	2301      	movcc	r3, #1
    fa58:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    fa5a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    fa5e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    fa62:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
    fa66:	3520      	adds	r5, #32
	} while (location < end_addr);
    fa68:	42ab      	cmp	r3, r5
    fa6a:	d1fa      	bne.n	fa62 <usb_serial_write.part.0+0x102>
	asm("dsb");
    fa6c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fa70:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    fa74:	2003      	movs	r0, #3
    fa76:	4649      	mov	r1, r9
    fa78:	f7ff fcae 	bl	f3d8 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    fa7c:	4a20      	ldr	r2, [pc, #128]	; (fb00 <usb_serial_write.part.0+0x1a0>)
    fa7e:	7813      	ldrb	r3, [r2, #0]
    fa80:	3301      	adds	r3, #1
    fa82:	b2db      	uxtb	r3, r3
    fa84:	2b03      	cmp	r3, #3
    fa86:	bf84      	itt	hi
    fa88:	2300      	movhi	r3, #0
    fa8a:	4a1d      	ldrhi	r2, [pc, #116]	; (fb00 <usb_serial_write.part.0+0x1a0>)
    fa8c:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    fa8e:	f8b8 3000 	ldrh.w	r3, [r8]
    fa92:	9a01      	ldr	r2, [sp, #4]
    fa94:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
    fa96:	9a00      	ldr	r2, [sp, #0]
    fa98:	441a      	add	r2, r3
			size -= tx_available;
    fa9a:	9101      	str	r1, [sp, #4]
			sent += tx_available;
    fa9c:	9200      	str	r2, [sp, #0]
			data += tx_available;
    fa9e:	9a02      	ldr	r2, [sp, #8]
    faa0:	441a      	add	r2, r3
			tx_available = 0;
    faa2:	2300      	movs	r3, #0
			data += tx_available;
    faa4:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
    faa6:	4a19      	ldr	r2, [pc, #100]	; (fb0c <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
    faa8:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
    faac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    fab0:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
    fab4:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
    fab6:	2900      	cmp	r1, #0
    fab8:	f47f af62 	bne.w	f980 <usb_serial_write.part.0+0x20>
	return sent;
    fabc:	9800      	ldr	r0, [sp, #0]
}
    fabe:	b005      	add	sp, #20
    fac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
    fac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fac8:	4b0d      	ldr	r3, [pc, #52]	; (fb00 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
    faca:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    face:	7819      	ldrb	r1, [r3, #0]
				break;
    fad0:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
    fad2:	f8a8 2000 	strh.w	r2, [r8]
				break;
    fad6:	e78a      	b.n	f9ee <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
    fad8:	2301      	movs	r3, #1
				return sent;
    fada:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
    fadc:	f88a 3000 	strb.w	r3, [sl]
}
    fae0:	b005      	add	sp, #20
    fae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    fae6:	461a      	mov	r2, r3
    fae8:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    faec:	e77f      	b.n	f9ee <usb_serial_write.part.0+0x8e>
	while (size > 0) {
    faee:	9801      	ldr	r0, [sp, #4]
	return sent;
    faf0:	e7e5      	b.n	fabe <usb_serial_write.part.0+0x15e>
    faf2:	bf00      	nop
    faf4:	20019bdb 	.word	0x20019bdb
    faf8:	20019b88 	.word	0x20019b88
    fafc:	2000c140 	.word	0x2000c140
    fb00:	20019bda 	.word	0x20019bda
    fb04:	20019bdd 	.word	0x20019bdd
    fb08:	20202880 	.word	0x20202880
    fb0c:	402e0000 	.word	0x402e0000
    fb10:	20019bc2 	.word	0x20019bc2
    fb14:	20019bd8 	.word	0x20019bd8

0000fb18 <usb_serial_reset>:
}
    fb18:	4770      	bx	lr
    fb1a:	bf00      	nop

0000fb1c <usb_serial_configure>:
	if (usb_high_speed) {
    fb1c:	4b2d      	ldr	r3, [pc, #180]	; (fbd4 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fb1e:	2100      	movs	r1, #0
    fb20:	2280      	movs	r2, #128	; 0x80
    fb22:	482d      	ldr	r0, [pc, #180]	; (fbd8 <usb_serial_configure+0xbc>)
{
    fb24:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    fb26:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    fb28:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    fb2a:	4d2c      	ldr	r5, [pc, #176]	; (fbdc <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    fb2c:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    fb2e:	4e2c      	ldr	r6, [pc, #176]	; (fbe0 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    fb30:	bf0c      	ite	eq
    fb32:	2340      	moveq	r3, #64	; 0x40
    fb34:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    fb38:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    fb3a:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    fb3c:	f002 fc78 	bl	12430 <memset>
	tx_head = 0;
    fb40:	4a28      	ldr	r2, [pc, #160]	; (fbe4 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fb42:	4621      	mov	r1, r4
	tx_available = 0;
    fb44:	4b28      	ldr	r3, [pc, #160]	; (fbe8 <usb_serial_configure+0xcc>)
	tx_head = 0;
    fb46:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fb48:	f44f 7280 	mov.w	r2, #256	; 0x100
    fb4c:	4827      	ldr	r0, [pc, #156]	; (fbec <usb_serial_configure+0xd0>)
	tx_available = 0;
    fb4e:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    fb50:	f002 fc6e 	bl	12430 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    fb54:	4a26      	ldr	r2, [pc, #152]	; (fbf0 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fb56:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    fb58:	4b26      	ldr	r3, [pc, #152]	; (fbf4 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fb5a:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    fb5c:	e9c2 4400 	strd	r4, r4, [r2]
    fb60:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    fb64:	4a24      	ldr	r2, [pc, #144]	; (fbf8 <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    fb66:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    fb6a:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    fb6c:	4a23      	ldr	r2, [pc, #140]	; (fbfc <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    fb6e:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    fb72:	4b23      	ldr	r3, [pc, #140]	; (fc00 <usb_serial_configure+0xe4>)
    fb74:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fb76:	4623      	mov	r3, r4
	rx_available = 0;
    fb78:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    fb7a:	4622      	mov	r2, r4
    fb7c:	f7ff fbe2 	bl	f344 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    fb80:	4622      	mov	r2, r4
    fb82:	8831      	ldrh	r1, [r6, #0]
    fb84:	2003      	movs	r0, #3
    fb86:	4b1f      	ldr	r3, [pc, #124]	; (fc04 <usb_serial_configure+0xe8>)
    fb88:	f7ff fbaa 	bl	f2e0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    fb8c:	4623      	mov	r3, r4
    fb8e:	2201      	movs	r2, #1
    fb90:	8829      	ldrh	r1, [r5, #0]
    fb92:	2003      	movs	r0, #3
    fb94:	f7ff fbd6 	bl	f344 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    fb98:	4620      	mov	r0, r4
    fb9a:	3401      	adds	r4, #1
    fb9c:	f7ff fe0e 	bl	f7bc <rx_queue_transfer>
    fba0:	2c08      	cmp	r4, #8
    fba2:	d1f9      	bne.n	fb98 <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    fba4:	4b18      	ldr	r3, [pc, #96]	; (fc08 <usb_serial_configure+0xec>)
    fba6:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    fba8:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    fbaa:	4818      	ldr	r0, [pc, #96]	; (fc0c <usb_serial_configure+0xf0>)
    fbac:	4c18      	ldr	r4, [pc, #96]	; (fc10 <usb_serial_configure+0xf4>)
    fbae:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    fbb0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    fbb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    fbb8:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    fbbc:	4915      	ldr	r1, [pc, #84]	; (fc14 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    fbbe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    fbc2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    fbc6:	b121      	cbz	r1, fbd2 <usb_serial_configure+0xb6>
    fbc8:	4a13      	ldr	r2, [pc, #76]	; (fc18 <usb_serial_configure+0xfc>)
    fbca:	7813      	ldrb	r3, [r2, #0]
    fbcc:	f043 0301 	orr.w	r3, r3, #1
    fbd0:	7013      	strb	r3, [r2, #0]
}
    fbd2:	bd70      	pop	{r4, r5, r6, pc}
    fbd4:	20019bde 	.word	0x20019bde
    fbd8:	2000c140 	.word	0x2000c140
    fbdc:	20019bc6 	.word	0x20019bc6
    fbe0:	20019bc0 	.word	0x20019bc0
    fbe4:	20019bda 	.word	0x20019bda
    fbe8:	20019bc2 	.word	0x20019bc2
    fbec:	2000bfc0 	.word	0x2000bfc0
    fbf0:	2001941c 	.word	0x2001941c
    fbf4:	2001942c 	.word	0x2001942c
    fbf8:	20019bd4 	.word	0x20019bd4
    fbfc:	20019418 	.word	0x20019418
    fc00:	20019bd6 	.word	0x20019bd6
    fc04:	0000f81d 	.word	0x0000f81d
    fc08:	402e0000 	.word	0x402e0000
    fc0c:	20019bac 	.word	0x20019bac
    fc10:	0000f8d1 	.word	0x0000f8d1
    fc14:	00000000 	.word	0x00000000
    fc18:	20019be0 	.word	0x20019be0

0000fc1c <usb_serial_read>:
{
    fc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fc20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fc24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
    fc28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; fcf4 <usb_serial_read+0xd8>
{
    fc2c:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
    fc2e:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
    fc32:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
    fc34:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
    fc38:	2900      	cmp	r1, #0
    fc3a:	d04f      	beq.n	fcdc <usb_serial_read+0xc0>
    fc3c:	4680      	mov	r8, r0
    fc3e:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
    fc40:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
    fc42:	f8df 90b4 	ldr.w	r9, [pc, #180]	; fcf8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
    fc46:	4b26      	ldr	r3, [pc, #152]	; (fce0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    fc48:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fc4c:	4925      	ldr	r1, [pc, #148]	; (fce4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
    fc4e:	781b      	ldrb	r3, [r3, #0]
    fc50:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
    fc52:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
    fc56:	d03f      	beq.n	fcd8 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
    fc58:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
    fc5a:	4b23      	ldr	r3, [pc, #140]	; (fce8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fc5c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
    fc5e:	bf28      	it	cs
    fc60:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    fc62:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    fc64:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fc68:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
    fc6c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
    fc6e:	4b1f      	ldr	r3, [pc, #124]	; (fcec <usb_serial_read+0xd0>)
    fc70:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
    fc74:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
    fc78:	42aa      	cmp	r2, r5
    fc7a:	d21c      	bcs.n	fcb6 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    fc7c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
    fc80:	4918      	ldr	r1, [pc, #96]	; (fce4 <usb_serial_read+0xc8>)
			rx_available -= len;
    fc82:	4c1b      	ldr	r4, [pc, #108]	; (fcf0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    fc84:	4461      	add	r1, ip
    fc86:	9201      	str	r2, [sp, #4]
    fc88:	f7fe fb44 	bl	e314 <memcpy>
			rx_available -= len;
    fc8c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
    fc8e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
    fc92:	4658      	mov	r0, fp
			rx_index[i] += len;
    fc94:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
    fc96:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
    fc9a:	442a      	add	r2, r5
			rx_available -= len;
    fc9c:	4439      	add	r1, r7
			rx_index[i] += len;
    fc9e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
    fca2:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
    fca4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fca8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    fcac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
    fcb0:	b003      	add	sp, #12
    fcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fcb6:	462a      	mov	r2, r5
			count += avail;
    fcb8:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    fcba:	f7fe fb2b 	bl	e314 <memcpy>
			rx_available -= avail;
    fcbe:	490c      	ldr	r1, [pc, #48]	; (fcf0 <usb_serial_read+0xd4>)
			rx_tail = tail;
    fcc0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    fcc2:	4630      	mov	r0, r6
			rx_available -= avail;
    fcc4:	680a      	ldr	r2, [r1, #0]
			p += avail;
    fcc6:	44a8      	add	r8, r5
			rx_available -= avail;
    fcc8:	1b52      	subs	r2, r2, r5
    fcca:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
    fccc:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
    fcd0:	f7ff fd74 	bl	f7bc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
    fcd4:	45bb      	cmp	fp, r7
    fcd6:	d8b6      	bhi.n	fc46 <usb_serial_read+0x2a>
	return count;
    fcd8:	4638      	mov	r0, r7
    fcda:	e7e3      	b.n	fca4 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
    fcdc:	4608      	mov	r0, r1
    fcde:	e7e1      	b.n	fca4 <usb_serial_read+0x88>
    fce0:	20019bd4 	.word	0x20019bd4
    fce4:	20201880 	.word	0x20201880
    fce8:	20019444 	.word	0x20019444
    fcec:	2001941c 	.word	0x2001941c
    fcf0:	20019418 	.word	0x20019418
    fcf4:	20019bd6 	.word	0x20019bd6
    fcf8:	2001942c 	.word	0x2001942c

0000fcfc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
    fcfc:	4b0b      	ldr	r3, [pc, #44]	; (fd2c <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
    fcfe:	4a0c      	ldr	r2, [pc, #48]	; (fd30 <usb_serial_peekchar+0x34>)
    fd00:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
    fd02:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
    fd04:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
    fd06:	428a      	cmp	r2, r1
    fd08:	d00d      	beq.n	fd26 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    fd0a:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    fd0c:	4809      	ldr	r0, [pc, #36]	; (fd34 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    fd0e:	4a0a      	ldr	r2, [pc, #40]	; (fd38 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
    fd10:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    fd12:	490a      	ldr	r1, [pc, #40]	; (fd3c <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
    fd14:	bf28      	it	cs
    fd16:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    fd18:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    fd1a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    fd1e:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    fd22:	5c58      	ldrb	r0, [r3, r1]
    fd24:	4770      	bx	lr
	if (tail == rx_head) return -1;
    fd26:	f04f 30ff 	mov.w	r0, #4294967295
}
    fd2a:	4770      	bx	lr
    fd2c:	20019bd4 	.word	0x20019bd4
    fd30:	20019bd6 	.word	0x20019bd6
    fd34:	20019444 	.word	0x20019444
    fd38:	20201880 	.word	0x20201880
    fd3c:	2001942c 	.word	0x2001942c

0000fd40 <usb_serial_available>:
	uint32_t n = rx_available;
    fd40:	4b04      	ldr	r3, [pc, #16]	; (fd54 <usb_serial_available+0x14>)
{
    fd42:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    fd44:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    fd46:	b10c      	cbz	r4, fd4c <usb_serial_available+0xc>
}
    fd48:	4620      	mov	r0, r4
    fd4a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    fd4c:	f000 f8e0 	bl	ff10 <yield>
}
    fd50:	4620      	mov	r0, r4
    fd52:	bd10      	pop	{r4, pc}
    fd54:	20019418 	.word	0x20019418

0000fd58 <usb_serial_flush_input>:
{
    fd58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    fd5c:	4e14      	ldr	r6, [pc, #80]	; (fdb0 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
    fd5e:	4d15      	ldr	r5, [pc, #84]	; (fdb4 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
    fd60:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
    fd62:	782a      	ldrb	r2, [r5, #0]
    fd64:	4293      	cmp	r3, r2
    fd66:	d021      	beq.n	fdac <usb_serial_flush_input+0x54>
    fd68:	b2dc      	uxtb	r4, r3
    fd6a:	f8df 9050 	ldr.w	r9, [pc, #80]	; fdbc <usb_serial_flush_input+0x64>
    fd6e:	f8df b050 	ldr.w	fp, [pc, #80]	; fdc0 <usb_serial_flush_input+0x68>
    fd72:	f8df 8050 	ldr.w	r8, [pc, #80]	; fdc4 <usb_serial_flush_input+0x6c>
    fd76:	4f10      	ldr	r7, [pc, #64]	; (fdb8 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
    fd78:	3401      	adds	r4, #1
    fd7a:	2c08      	cmp	r4, #8
		rx_tail = tail;
    fd7c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
    fd80:	d901      	bls.n	fd86 <usb_serial_flush_input+0x2e>
    fd82:	2400      	movs	r4, #0
    fd84:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    fd86:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    fd8a:	f8db 3000 	ldr.w	r3, [fp]
    fd8e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    fd92:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
    fd96:	1a52      	subs	r2, r2, r1
    fd98:	1a9b      	subs	r3, r3, r2
    fd9a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    fd9e:	f7ff fd0d 	bl	f7bc <rx_queue_transfer>
		rx_tail = tail;
    fda2:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
    fda6:	782b      	ldrb	r3, [r5, #0]
    fda8:	42a3      	cmp	r3, r4
    fdaa:	d1e5      	bne.n	fd78 <usb_serial_flush_input+0x20>
}
    fdac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdb0:	20019bd6 	.word	0x20019bd6
    fdb4:	20019bd4 	.word	0x20019bd4
    fdb8:	2001942c 	.word	0x2001942c
    fdbc:	20019444 	.word	0x20019444
    fdc0:	20019418 	.word	0x20019418
    fdc4:	2001941c 	.word	0x2001941c

0000fdc8 <usb_serial_getchar>:
{
    fdc8:	b500      	push	{lr}
    fdca:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
    fdcc:	2101      	movs	r1, #1
    fdce:	f10d 0007 	add.w	r0, sp, #7
    fdd2:	f7ff ff23 	bl	fc1c <usb_serial_read>
    fdd6:	b120      	cbz	r0, fde2 <usb_serial_getchar+0x1a>
    fdd8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
    fddc:	b003      	add	sp, #12
    fdde:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
    fde2:	f04f 30ff 	mov.w	r0, #4294967295
    fde6:	e7f9      	b.n	fddc <usb_serial_getchar+0x14>

0000fde8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
    fde8:	4b09      	ldr	r3, [pc, #36]	; (fe10 <usb_serial_putchar+0x28>)
{
    fdea:	b500      	push	{lr}
    fdec:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
    fdee:	781b      	ldrb	r3, [r3, #0]
{
    fdf0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
    fdf4:	b13b      	cbz	r3, fe06 <usb_serial_putchar+0x1e>
    fdf6:	2101      	movs	r1, #1
    fdf8:	f10d 0007 	add.w	r0, sp, #7
    fdfc:	f7ff fdb0 	bl	f960 <usb_serial_write.part.0>
}
    fe00:	b003      	add	sp, #12
    fe02:	f85d fb04 	ldr.w	pc, [sp], #4
    fe06:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    fe0a:	b003      	add	sp, #12
    fe0c:	f85d fb04 	ldr.w	pc, [sp], #4
    fe10:	20019bdd 	.word	0x20019bdd

0000fe14 <usb_serial_write>:
	if (!usb_configuration) return 0;
    fe14:	4b04      	ldr	r3, [pc, #16]	; (fe28 <usb_serial_write+0x14>)
    fe16:	781b      	ldrb	r3, [r3, #0]
    fe18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    fe1c:	b10b      	cbz	r3, fe22 <usb_serial_write+0xe>
    fe1e:	f7ff bd9f 	b.w	f960 <usb_serial_write.part.0>
}
    fe22:	4610      	mov	r0, r2
    fe24:	4770      	bx	lr
    fe26:	bf00      	nop
    fe28:	20019bdd 	.word	0x20019bdd

0000fe2c <usb_serial_write_buffer_free>:
{
    fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    fe30:	2400      	movs	r4, #0
	tx_noautoflush = 1;
    fe32:	f8df 8044 	ldr.w	r8, [pc, #68]	; fe78 <usb_serial_write_buffer_free+0x4c>
    fe36:	2301      	movs	r3, #1
    fe38:	4d0d      	ldr	r5, [pc, #52]	; (fe70 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    fe3a:	4627      	mov	r7, r4
    fe3c:	4e0d      	ldr	r6, [pc, #52]	; (fe74 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    fe3e:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
    fe42:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    fe44:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
    fe46:	3520      	adds	r5, #32
		if (i == tx_head) continue;
    fe48:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
    fe4a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    fe4e:	d005      	beq.n	fe5c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    fe50:	f7ff fae4 	bl	f41c <usb_transfer_status>
    fe54:	0603      	lsls	r3, r0, #24
    fe56:	bf58      	it	pl
    fe58:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    fe5c:	2c04      	cmp	r4, #4
    fe5e:	d1f0      	bne.n	fe42 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
    fe60:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    fe64:	2300      	movs	r3, #0
}
    fe66:	4638      	mov	r0, r7
	tx_noautoflush = 0;
    fe68:	f888 3000 	strb.w	r3, [r8]
}
    fe6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe70:	2000c140 	.word	0x2000c140
    fe74:	20019bda 	.word	0x20019bda
    fe78:	20019bdb 	.word	0x20019bdb

0000fe7c <usb_serial_flush_output>:
{
    fe7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    fe80:	4b1d      	ldr	r3, [pc, #116]	; (fef8 <usb_serial_flush_output+0x7c>)
    fe82:	781b      	ldrb	r3, [r3, #0]
    fe84:	b113      	cbz	r3, fe8c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    fe86:	4d1d      	ldr	r5, [pc, #116]	; (fefc <usb_serial_flush_output+0x80>)
    fe88:	882a      	ldrh	r2, [r5, #0]
    fe8a:	b90a      	cbnz	r2, fe90 <usb_serial_flush_output+0x14>
}
    fe8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
    fe90:	4e1b      	ldr	r6, [pc, #108]	; (ff00 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    fe92:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    fe96:	491b      	ldr	r1, [pc, #108]	; (ff04 <usb_serial_flush_output+0x88>)
    fe98:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    fe9a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fe9c:	4c1a      	ldr	r4, [pc, #104]	; (ff08 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    fe9e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
    fea2:	4f1a      	ldr	r7, [pc, #104]	; (ff0c <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    fea4:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
    fea8:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    feaa:	4640      	mov	r0, r8
	tx_noautoflush = 1;
    feac:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    feae:	4621      	mov	r1, r4
    feb0:	2300      	movs	r3, #0
    feb2:	f7ff fa79 	bl	f3a8 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    feb6:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
    feba:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    febe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    fec2:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    fec6:	3420      	adds	r4, #32
	} while (location < end_addr);
    fec8:	42a2      	cmp	r2, r4
    feca:	d8fa      	bhi.n	fec2 <usb_serial_flush_output+0x46>
	asm("dsb");
    fecc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    fed0:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    fed4:	2003      	movs	r0, #3
    fed6:	4641      	mov	r1, r8
    fed8:	f7ff fa7e 	bl	f3d8 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    fedc:	7833      	ldrb	r3, [r6, #0]
    fede:	3301      	adds	r3, #1
    fee0:	b2db      	uxtb	r3, r3
    fee2:	2b03      	cmp	r3, #3
    fee4:	bf88      	it	hi
    fee6:	2300      	movhi	r3, #0
    fee8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    feea:	2300      	movs	r3, #0
    feec:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    feee:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
    fef2:	703b      	strb	r3, [r7, #0]
}
    fef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fef8:	20019bdd 	.word	0x20019bdd
    fefc:	20019bc2 	.word	0x20019bc2
    ff00:	20019bda 	.word	0x20019bda
    ff04:	2000c140 	.word	0x2000c140
    ff08:	20202880 	.word	0x20202880
    ff0c:	20019bdb 	.word	0x20019bdb

0000ff10 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    ff10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    ff14:	4b2d      	ldr	r3, [pc, #180]	; (ffcc <yield+0xbc>)
    ff16:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    ff18:	b166      	cbz	r6, ff34 <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    ff1a:	4f2d      	ldr	r7, [pc, #180]	; (ffd0 <yield+0xc0>)
    ff1c:	783b      	ldrb	r3, [r7, #0]
    ff1e:	b94b      	cbnz	r3, ff34 <yield+0x24>
	running = 1;
    ff20:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ff22:	07f1      	lsls	r1, r6, #31
	running = 1;
    ff24:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    ff26:	d443      	bmi.n	ffb0 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    ff28:	07b2      	lsls	r2, r6, #30
    ff2a:	d426      	bmi.n	ff7a <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    ff2c:	2300      	movs	r3, #0
    ff2e:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    ff30:	0773      	lsls	r3, r6, #29
    ff32:	d401      	bmi.n	ff38 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    ff34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    ff38:	4b26      	ldr	r3, [pc, #152]	; (ffd4 <yield+0xc4>)
    ff3a:	681a      	ldr	r2, [r3, #0]
    ff3c:	2a00      	cmp	r2, #0
    ff3e:	d0f9      	beq.n	ff34 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ff40:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    ff44:	2a00      	cmp	r2, #0
    ff46:	d1f5      	bne.n	ff34 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ff48:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    ff4c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    ff4e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    ff50:	2800      	cmp	r0, #0
    ff52:	d034      	beq.n	ffbe <yield+0xae>
		if (runningFromYield) {
    ff54:	4c20      	ldr	r4, [pc, #128]	; (ffd8 <yield+0xc8>)
    ff56:	7821      	ldrb	r1, [r4, #0]
    ff58:	2900      	cmp	r1, #0
    ff5a:	d130      	bne.n	ffbe <yield+0xae>
		runningFromYield = true;
    ff5c:	2201      	movs	r2, #1
    ff5e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    ff60:	6942      	ldr	r2, [r0, #20]
    ff62:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    ff64:	2a00      	cmp	r2, #0
    ff66:	d02e      	beq.n	ffc6 <yield+0xb6>
			firstYield->_prev = nullptr;
    ff68:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    ff6a:	b905      	cbnz	r5, ff6e <yield+0x5e>
    ff6c:	b662      	cpsie	i
		first->_triggered = false;
    ff6e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    ff70:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    ff72:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    ff74:	4798      	blx	r3
		runningFromYield = false;
    ff76:	7025      	strb	r5, [r4, #0]
    ff78:	e7dc      	b.n	ff34 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ff7a:	f8df 8064 	ldr.w	r8, [pc, #100]	; ffe0 <yield+0xd0>
    ff7e:	f898 3000 	ldrb.w	r3, [r8]
    ff82:	2b00      	cmp	r3, #0
    ff84:	d0d2      	beq.n	ff2c <yield+0x1c>
    ff86:	2500      	movs	r5, #0
    ff88:	f8df 9058 	ldr.w	r9, [pc, #88]	; ffe4 <yield+0xd4>
    ff8c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    ff8e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ff92:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    ff94:	6823      	ldr	r3, [r4, #0]
    ff96:	4620      	mov	r0, r4
    ff98:	691b      	ldr	r3, [r3, #16]
    ff9a:	4798      	blx	r3
    ff9c:	b110      	cbz	r0, ffa4 <yield+0x94>
    ff9e:	6963      	ldr	r3, [r4, #20]
    ffa0:	689b      	ldr	r3, [r3, #8]
    ffa2:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    ffa4:	f898 2000 	ldrb.w	r2, [r8]
    ffa8:	b2eb      	uxtb	r3, r5
    ffaa:	429a      	cmp	r2, r3
    ffac:	d8ef      	bhi.n	ff8e <yield+0x7e>
    ffae:	e7bd      	b.n	ff2c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    ffb0:	f7ff fec6 	bl	fd40 <usb_serial_available>
		if (Serial.available()) serialEvent();
    ffb4:	2800      	cmp	r0, #0
    ffb6:	d0b7      	beq.n	ff28 <yield+0x18>
    ffb8:	f3af 8000 	nop.w
    ffbc:	e7b4      	b.n	ff28 <yield+0x18>
		if (doit) __enable_irq();
    ffbe:	2d00      	cmp	r5, #0
    ffc0:	d1b8      	bne.n	ff34 <yield+0x24>
    ffc2:	b662      	cpsie	i
    ffc4:	e7b6      	b.n	ff34 <yield+0x24>
			lastYield = nullptr;
    ffc6:	4b05      	ldr	r3, [pc, #20]	; (ffdc <yield+0xcc>)
    ffc8:	601a      	str	r2, [r3, #0]
    ffca:	e7ce      	b.n	ff6a <yield+0x5a>
    ffcc:	20019be0 	.word	0x20019be0
    ffd0:	20019bcf 	.word	0x20019bcf
    ffd4:	20018ce4 	.word	0x20018ce4
    ffd8:	20019bcd 	.word	0x20019bcd
    ffdc:	20018cf0 	.word	0x20018cf0
    ffe0:	20019bce 	.word	0x20019bce
    ffe4:	20018cf4 	.word	0x20018cf4

0000ffe8 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    ffe8:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    ffea:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ffec:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    fff0:	4619      	mov	r1, r3
{
    fff2:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    fff4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    fff8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    fffc:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10000:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   10004:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   10008:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   1000a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1000e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10012:	b29b      	uxth	r3, r3
   10014:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   10018:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1001c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   10020:	3101      	adds	r1, #1
   10022:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   10026:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   10028:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   1002a:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   1002e:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   10030:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   10032:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   10034:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   10036:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   1003a:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   1003c:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   1003e:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   10040:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   10042:	d1eb      	bne.n	1001c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   10044:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10048:	b29b      	uxth	r3, r3
   1004a:	f043 030f 	orr.w	r3, r3, #15
   1004e:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   10052:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   10056:	b29b      	uxth	r3, r3
   10058:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   1005c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   10060:	bd10      	pop	{r4, pc}
   10062:	bf00      	nop

00010064 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10064:	4b37      	ldr	r3, [pc, #220]	; (10144 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10066:	4a38      	ldr	r2, [pc, #224]	; (10148 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10068:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   1006a:	4838      	ldr	r0, [pc, #224]	; (1014c <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   1006c:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   10070:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   10072:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10074:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10078:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   1007c:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10080:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   10084:	430a      	orrs	r2, r1
   10086:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   1008a:	f7ff ffad 	bl	ffe8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   1008e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   10092:	f7ff ffa9 	bl	ffe8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   10096:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   1009a:	f7ff ffa5 	bl	ffe8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   1009e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   100a2:	f7ff ffa1 	bl	ffe8 <flexpwm_init>
	for (i=0; i < 4; i++) {
   100a6:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   100a8:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   100ac:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   100b0:	4611      	mov	r1, r2
   100b2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   100b6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   100ba:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   100bc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   100be:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   100c0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   100c2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   100c6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   100c8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   100ca:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   100ce:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   100d0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   100d2:	d1ee      	bne.n	100b2 <pwm_init+0x4e>
   100d4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   100d6:	481e      	ldr	r0, [pc, #120]	; (10150 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   100d8:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   100dc:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   100e0:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   100e2:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   100e6:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   100ea:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   100ee:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   100f2:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   100f4:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   100f6:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   100f8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   100fa:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   100fe:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10100:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10102:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   10106:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   10108:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   1010a:	d1ee      	bne.n	100ea <pwm_init+0x86>
   1010c:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   1010e:	4811      	ldr	r0, [pc, #68]	; (10154 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10110:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10112:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   10116:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10118:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1011c:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   10120:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   10124:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   10128:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   1012a:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   1012c:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   1012e:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   10130:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   10132:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   10134:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   10136:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   1013a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   1013c:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   10140:	d1ee      	bne.n	10120 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   10142:	bd70      	pop	{r4, r5, r6, pc}
   10144:	400fc000 	.word	0x400fc000
   10148:	fc030000 	.word	0xfc030000
   1014c:	403dc000 	.word	0x403dc000
   10150:	401e0000 	.word	0x401e0000
   10154:	401e4000 	.word	0x401e4000

00010158 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   10158:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   1015a:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   1015e:	b15b      	cbz	r3, 10178 <sm_align_pool+0x20>
   10160:	b1ba      	cbz	r2, 10192 <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   10162:	4b0f      	ldr	r3, [pc, #60]	; (101a0 <sm_align_pool+0x48>)
   10164:	fba3 1302 	umull	r1, r3, r3, r2
   10168:	08db      	lsrs	r3, r3, #3
   1016a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1016e:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   10172:	d10a      	bne.n	1018a <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   10174:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   10176:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   10178:	4b09      	ldr	r3, [pc, #36]	; (101a0 <sm_align_pool+0x48>)
   1017a:	fba3 1302 	umull	r1, r3, r3, r2
   1017e:	08db      	lsrs	r3, r3, #3
   10180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   10184:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   10188:	d001      	beq.n	1018e <sm_align_pool+0x36>
   1018a:	1ad2      	subs	r2, r2, r3
   1018c:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   1018e:	2af0      	cmp	r2, #240	; 0xf0
   10190:	d8f0      	bhi.n	10174 <sm_align_pool+0x1c>
		errno = ENOSPC;
   10192:	f002 fad9 	bl	12748 <__errno>
   10196:	221c      	movs	r2, #28
   10198:	4603      	mov	r3, r0
   1019a:	2000      	movs	r0, #0
   1019c:	601a      	str	r2, [r3, #0]
}
   1019e:	bd08      	pop	{r3, pc}
   101a0:	aaaaaaab 	.word	0xaaaaaaab

000101a4 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   101a4:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   101a6:	4604      	mov	r4, r0
   101a8:	b338      	cbz	r0, 101fa <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   101aa:	b119      	cbz	r1, 101b4 <sm_set_pool+0x10>
   101ac:	fab2 f682 	clz	r6, r2
   101b0:	0976      	lsrs	r6, r6, #5
   101b2:	b9a2      	cbnz	r2, 101de <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   101b4:	6820      	ldr	r0, [r4, #0]
   101b6:	b300      	cbz	r0, 101fa <sm_set_pool+0x56>
   101b8:	6862      	ldr	r2, [r4, #4]
   101ba:	b1f2      	cbz	r2, 101fa <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   101bc:	4b18      	ldr	r3, [pc, #96]	; (10220 <sm_set_pool+0x7c>)
   101be:	4919      	ldr	r1, [pc, #100]	; (10224 <sm_set_pool+0x80>)
   101c0:	fb02 f303 	mul.w	r3, r2, r3
   101c4:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   101c8:	d317      	bcc.n	101fa <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   101ca:	68a3      	ldr	r3, [r4, #8]
   101cc:	b9e3      	cbnz	r3, 10208 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   101ce:	2200      	movs	r2, #0
			return 1;
   101d0:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   101d2:	6022      	str	r2, [r4, #0]
   101d4:	6062      	str	r2, [r4, #4]
   101d6:	60a2      	str	r2, [r4, #8]
   101d8:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   101da:	4618      	mov	r0, r3
   101dc:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   101de:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   101e0:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   101e2:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   101e6:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   101e8:	f7ff ffb6 	bl	10158 <sm_align_pool>
   101ec:	4603      	mov	r3, r0
   101ee:	2800      	cmp	r0, #0
   101f0:	d0f3      	beq.n	101da <sm_set_pool+0x36>
	if (do_zero) {
   101f2:	b96d      	cbnz	r5, 10210 <sm_set_pool+0x6c>
	return 1;
   101f4:	2301      	movs	r3, #1
}
   101f6:	4618      	mov	r0, r3
   101f8:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   101fa:	f002 faa5 	bl	12748 <__errno>
   101fe:	2216      	movs	r2, #22
		return 0;
   10200:	2300      	movs	r3, #0
		errno = EINVAL;
   10202:	6002      	str	r2, [r0, #0]
}
   10204:	4618      	mov	r0, r3
   10206:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   10208:	2100      	movs	r1, #0
   1020a:	f002 f911 	bl	12430 <memset>
   1020e:	e7de      	b.n	101ce <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   10210:	6862      	ldr	r2, [r4, #4]
   10212:	4631      	mov	r1, r6
   10214:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   10216:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   10218:	f002 f90a 	bl	12430 <memset>
	return 1;
   1021c:	2301      	movs	r3, #1
   1021e:	e7dc      	b.n	101da <sm_set_pool+0x36>
   10220:	aaaaaaab 	.word	0xaaaaaaab
   10224:	15555555 	.word	0x15555555

00010228 <__aeabi_atexit>:
   10228:	4603      	mov	r3, r0
   1022a:	4608      	mov	r0, r1
   1022c:	4619      	mov	r1, r3
   1022e:	f001 be25 	b.w	11e7c <__cxa_atexit>
   10232:	bf00      	nop

00010234 <__aeabi_uldivmod>:
   10234:	b953      	cbnz	r3, 1024c <__aeabi_uldivmod+0x18>
   10236:	b94a      	cbnz	r2, 1024c <__aeabi_uldivmod+0x18>
   10238:	2900      	cmp	r1, #0
   1023a:	bf08      	it	eq
   1023c:	2800      	cmpeq	r0, #0
   1023e:	bf1c      	itt	ne
   10240:	f04f 31ff 	movne.w	r1, #4294967295
   10244:	f04f 30ff 	movne.w	r0, #4294967295
   10248:	f000 b970 	b.w	1052c <__aeabi_idiv0>
   1024c:	f1ad 0c08 	sub.w	ip, sp, #8
   10250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10254:	f000 f806 	bl	10264 <__udivmoddi4>
   10258:	f8dd e004 	ldr.w	lr, [sp, #4]
   1025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10260:	b004      	add	sp, #16
   10262:	4770      	bx	lr

00010264 <__udivmoddi4>:
   10264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10268:	9e08      	ldr	r6, [sp, #32]
   1026a:	460d      	mov	r5, r1
   1026c:	4604      	mov	r4, r0
   1026e:	460f      	mov	r7, r1
   10270:	2b00      	cmp	r3, #0
   10272:	d14a      	bne.n	1030a <__udivmoddi4+0xa6>
   10274:	428a      	cmp	r2, r1
   10276:	4694      	mov	ip, r2
   10278:	d965      	bls.n	10346 <__udivmoddi4+0xe2>
   1027a:	fab2 f382 	clz	r3, r2
   1027e:	b143      	cbz	r3, 10292 <__udivmoddi4+0x2e>
   10280:	fa02 fc03 	lsl.w	ip, r2, r3
   10284:	f1c3 0220 	rsb	r2, r3, #32
   10288:	409f      	lsls	r7, r3
   1028a:	fa20 f202 	lsr.w	r2, r0, r2
   1028e:	4317      	orrs	r7, r2
   10290:	409c      	lsls	r4, r3
   10292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   10296:	fa1f f58c 	uxth.w	r5, ip
   1029a:	fbb7 f1fe 	udiv	r1, r7, lr
   1029e:	0c22      	lsrs	r2, r4, #16
   102a0:	fb0e 7711 	mls	r7, lr, r1, r7
   102a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   102a8:	fb01 f005 	mul.w	r0, r1, r5
   102ac:	4290      	cmp	r0, r2
   102ae:	d90a      	bls.n	102c6 <__udivmoddi4+0x62>
   102b0:	eb1c 0202 	adds.w	r2, ip, r2
   102b4:	f101 37ff 	add.w	r7, r1, #4294967295
   102b8:	f080 811c 	bcs.w	104f4 <__udivmoddi4+0x290>
   102bc:	4290      	cmp	r0, r2
   102be:	f240 8119 	bls.w	104f4 <__udivmoddi4+0x290>
   102c2:	3902      	subs	r1, #2
   102c4:	4462      	add	r2, ip
   102c6:	1a12      	subs	r2, r2, r0
   102c8:	b2a4      	uxth	r4, r4
   102ca:	fbb2 f0fe 	udiv	r0, r2, lr
   102ce:	fb0e 2210 	mls	r2, lr, r0, r2
   102d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   102d6:	fb00 f505 	mul.w	r5, r0, r5
   102da:	42a5      	cmp	r5, r4
   102dc:	d90a      	bls.n	102f4 <__udivmoddi4+0x90>
   102de:	eb1c 0404 	adds.w	r4, ip, r4
   102e2:	f100 32ff 	add.w	r2, r0, #4294967295
   102e6:	f080 8107 	bcs.w	104f8 <__udivmoddi4+0x294>
   102ea:	42a5      	cmp	r5, r4
   102ec:	f240 8104 	bls.w	104f8 <__udivmoddi4+0x294>
   102f0:	4464      	add	r4, ip
   102f2:	3802      	subs	r0, #2
   102f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   102f8:	1b64      	subs	r4, r4, r5
   102fa:	2100      	movs	r1, #0
   102fc:	b11e      	cbz	r6, 10306 <__udivmoddi4+0xa2>
   102fe:	40dc      	lsrs	r4, r3
   10300:	2300      	movs	r3, #0
   10302:	e9c6 4300 	strd	r4, r3, [r6]
   10306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1030a:	428b      	cmp	r3, r1
   1030c:	d908      	bls.n	10320 <__udivmoddi4+0xbc>
   1030e:	2e00      	cmp	r6, #0
   10310:	f000 80ed 	beq.w	104ee <__udivmoddi4+0x28a>
   10314:	2100      	movs	r1, #0
   10316:	e9c6 0500 	strd	r0, r5, [r6]
   1031a:	4608      	mov	r0, r1
   1031c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10320:	fab3 f183 	clz	r1, r3
   10324:	2900      	cmp	r1, #0
   10326:	d149      	bne.n	103bc <__udivmoddi4+0x158>
   10328:	42ab      	cmp	r3, r5
   1032a:	d302      	bcc.n	10332 <__udivmoddi4+0xce>
   1032c:	4282      	cmp	r2, r0
   1032e:	f200 80f8 	bhi.w	10522 <__udivmoddi4+0x2be>
   10332:	1a84      	subs	r4, r0, r2
   10334:	eb65 0203 	sbc.w	r2, r5, r3
   10338:	2001      	movs	r0, #1
   1033a:	4617      	mov	r7, r2
   1033c:	2e00      	cmp	r6, #0
   1033e:	d0e2      	beq.n	10306 <__udivmoddi4+0xa2>
   10340:	e9c6 4700 	strd	r4, r7, [r6]
   10344:	e7df      	b.n	10306 <__udivmoddi4+0xa2>
   10346:	b902      	cbnz	r2, 1034a <__udivmoddi4+0xe6>
   10348:	deff      	udf	#255	; 0xff
   1034a:	fab2 f382 	clz	r3, r2
   1034e:	2b00      	cmp	r3, #0
   10350:	f040 8090 	bne.w	10474 <__udivmoddi4+0x210>
   10354:	1a8a      	subs	r2, r1, r2
   10356:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1035a:	fa1f fe8c 	uxth.w	lr, ip
   1035e:	2101      	movs	r1, #1
   10360:	fbb2 f5f7 	udiv	r5, r2, r7
   10364:	fb07 2015 	mls	r0, r7, r5, r2
   10368:	0c22      	lsrs	r2, r4, #16
   1036a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   1036e:	fb0e f005 	mul.w	r0, lr, r5
   10372:	4290      	cmp	r0, r2
   10374:	d908      	bls.n	10388 <__udivmoddi4+0x124>
   10376:	eb1c 0202 	adds.w	r2, ip, r2
   1037a:	f105 38ff 	add.w	r8, r5, #4294967295
   1037e:	d202      	bcs.n	10386 <__udivmoddi4+0x122>
   10380:	4290      	cmp	r0, r2
   10382:	f200 80cb 	bhi.w	1051c <__udivmoddi4+0x2b8>
   10386:	4645      	mov	r5, r8
   10388:	1a12      	subs	r2, r2, r0
   1038a:	b2a4      	uxth	r4, r4
   1038c:	fbb2 f0f7 	udiv	r0, r2, r7
   10390:	fb07 2210 	mls	r2, r7, r0, r2
   10394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   10398:	fb0e fe00 	mul.w	lr, lr, r0
   1039c:	45a6      	cmp	lr, r4
   1039e:	d908      	bls.n	103b2 <__udivmoddi4+0x14e>
   103a0:	eb1c 0404 	adds.w	r4, ip, r4
   103a4:	f100 32ff 	add.w	r2, r0, #4294967295
   103a8:	d202      	bcs.n	103b0 <__udivmoddi4+0x14c>
   103aa:	45a6      	cmp	lr, r4
   103ac:	f200 80bb 	bhi.w	10526 <__udivmoddi4+0x2c2>
   103b0:	4610      	mov	r0, r2
   103b2:	eba4 040e 	sub.w	r4, r4, lr
   103b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   103ba:	e79f      	b.n	102fc <__udivmoddi4+0x98>
   103bc:	f1c1 0720 	rsb	r7, r1, #32
   103c0:	408b      	lsls	r3, r1
   103c2:	fa22 fc07 	lsr.w	ip, r2, r7
   103c6:	ea4c 0c03 	orr.w	ip, ip, r3
   103ca:	fa05 f401 	lsl.w	r4, r5, r1
   103ce:	fa20 f307 	lsr.w	r3, r0, r7
   103d2:	40fd      	lsrs	r5, r7
   103d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
   103d8:	4323      	orrs	r3, r4
   103da:	fbb5 f8f9 	udiv	r8, r5, r9
   103de:	fa1f fe8c 	uxth.w	lr, ip
   103e2:	fb09 5518 	mls	r5, r9, r8, r5
   103e6:	0c1c      	lsrs	r4, r3, #16
   103e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   103ec:	fb08 f50e 	mul.w	r5, r8, lr
   103f0:	42a5      	cmp	r5, r4
   103f2:	fa02 f201 	lsl.w	r2, r2, r1
   103f6:	fa00 f001 	lsl.w	r0, r0, r1
   103fa:	d90b      	bls.n	10414 <__udivmoddi4+0x1b0>
   103fc:	eb1c 0404 	adds.w	r4, ip, r4
   10400:	f108 3aff 	add.w	sl, r8, #4294967295
   10404:	f080 8088 	bcs.w	10518 <__udivmoddi4+0x2b4>
   10408:	42a5      	cmp	r5, r4
   1040a:	f240 8085 	bls.w	10518 <__udivmoddi4+0x2b4>
   1040e:	f1a8 0802 	sub.w	r8, r8, #2
   10412:	4464      	add	r4, ip
   10414:	1b64      	subs	r4, r4, r5
   10416:	b29d      	uxth	r5, r3
   10418:	fbb4 f3f9 	udiv	r3, r4, r9
   1041c:	fb09 4413 	mls	r4, r9, r3, r4
   10420:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   10424:	fb03 fe0e 	mul.w	lr, r3, lr
   10428:	45a6      	cmp	lr, r4
   1042a:	d908      	bls.n	1043e <__udivmoddi4+0x1da>
   1042c:	eb1c 0404 	adds.w	r4, ip, r4
   10430:	f103 35ff 	add.w	r5, r3, #4294967295
   10434:	d26c      	bcs.n	10510 <__udivmoddi4+0x2ac>
   10436:	45a6      	cmp	lr, r4
   10438:	d96a      	bls.n	10510 <__udivmoddi4+0x2ac>
   1043a:	3b02      	subs	r3, #2
   1043c:	4464      	add	r4, ip
   1043e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   10442:	fba3 9502 	umull	r9, r5, r3, r2
   10446:	eba4 040e 	sub.w	r4, r4, lr
   1044a:	42ac      	cmp	r4, r5
   1044c:	46c8      	mov	r8, r9
   1044e:	46ae      	mov	lr, r5
   10450:	d356      	bcc.n	10500 <__udivmoddi4+0x29c>
   10452:	d053      	beq.n	104fc <__udivmoddi4+0x298>
   10454:	b156      	cbz	r6, 1046c <__udivmoddi4+0x208>
   10456:	ebb0 0208 	subs.w	r2, r0, r8
   1045a:	eb64 040e 	sbc.w	r4, r4, lr
   1045e:	fa04 f707 	lsl.w	r7, r4, r7
   10462:	40ca      	lsrs	r2, r1
   10464:	40cc      	lsrs	r4, r1
   10466:	4317      	orrs	r7, r2
   10468:	e9c6 7400 	strd	r7, r4, [r6]
   1046c:	4618      	mov	r0, r3
   1046e:	2100      	movs	r1, #0
   10470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10474:	f1c3 0120 	rsb	r1, r3, #32
   10478:	fa02 fc03 	lsl.w	ip, r2, r3
   1047c:	fa20 f201 	lsr.w	r2, r0, r1
   10480:	fa25 f101 	lsr.w	r1, r5, r1
   10484:	409d      	lsls	r5, r3
   10486:	432a      	orrs	r2, r5
   10488:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1048c:	fa1f fe8c 	uxth.w	lr, ip
   10490:	fbb1 f0f7 	udiv	r0, r1, r7
   10494:	fb07 1510 	mls	r5, r7, r0, r1
   10498:	0c11      	lsrs	r1, r2, #16
   1049a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   1049e:	fb00 f50e 	mul.w	r5, r0, lr
   104a2:	428d      	cmp	r5, r1
   104a4:	fa04 f403 	lsl.w	r4, r4, r3
   104a8:	d908      	bls.n	104bc <__udivmoddi4+0x258>
   104aa:	eb1c 0101 	adds.w	r1, ip, r1
   104ae:	f100 38ff 	add.w	r8, r0, #4294967295
   104b2:	d22f      	bcs.n	10514 <__udivmoddi4+0x2b0>
   104b4:	428d      	cmp	r5, r1
   104b6:	d92d      	bls.n	10514 <__udivmoddi4+0x2b0>
   104b8:	3802      	subs	r0, #2
   104ba:	4461      	add	r1, ip
   104bc:	1b49      	subs	r1, r1, r5
   104be:	b292      	uxth	r2, r2
   104c0:	fbb1 f5f7 	udiv	r5, r1, r7
   104c4:	fb07 1115 	mls	r1, r7, r5, r1
   104c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   104cc:	fb05 f10e 	mul.w	r1, r5, lr
   104d0:	4291      	cmp	r1, r2
   104d2:	d908      	bls.n	104e6 <__udivmoddi4+0x282>
   104d4:	eb1c 0202 	adds.w	r2, ip, r2
   104d8:	f105 38ff 	add.w	r8, r5, #4294967295
   104dc:	d216      	bcs.n	1050c <__udivmoddi4+0x2a8>
   104de:	4291      	cmp	r1, r2
   104e0:	d914      	bls.n	1050c <__udivmoddi4+0x2a8>
   104e2:	3d02      	subs	r5, #2
   104e4:	4462      	add	r2, ip
   104e6:	1a52      	subs	r2, r2, r1
   104e8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   104ec:	e738      	b.n	10360 <__udivmoddi4+0xfc>
   104ee:	4631      	mov	r1, r6
   104f0:	4630      	mov	r0, r6
   104f2:	e708      	b.n	10306 <__udivmoddi4+0xa2>
   104f4:	4639      	mov	r1, r7
   104f6:	e6e6      	b.n	102c6 <__udivmoddi4+0x62>
   104f8:	4610      	mov	r0, r2
   104fa:	e6fb      	b.n	102f4 <__udivmoddi4+0x90>
   104fc:	4548      	cmp	r0, r9
   104fe:	d2a9      	bcs.n	10454 <__udivmoddi4+0x1f0>
   10500:	ebb9 0802 	subs.w	r8, r9, r2
   10504:	eb65 0e0c 	sbc.w	lr, r5, ip
   10508:	3b01      	subs	r3, #1
   1050a:	e7a3      	b.n	10454 <__udivmoddi4+0x1f0>
   1050c:	4645      	mov	r5, r8
   1050e:	e7ea      	b.n	104e6 <__udivmoddi4+0x282>
   10510:	462b      	mov	r3, r5
   10512:	e794      	b.n	1043e <__udivmoddi4+0x1da>
   10514:	4640      	mov	r0, r8
   10516:	e7d1      	b.n	104bc <__udivmoddi4+0x258>
   10518:	46d0      	mov	r8, sl
   1051a:	e77b      	b.n	10414 <__udivmoddi4+0x1b0>
   1051c:	3d02      	subs	r5, #2
   1051e:	4462      	add	r2, ip
   10520:	e732      	b.n	10388 <__udivmoddi4+0x124>
   10522:	4608      	mov	r0, r1
   10524:	e70a      	b.n	1033c <__udivmoddi4+0xd8>
   10526:	4464      	add	r4, ip
   10528:	3802      	subs	r0, #2
   1052a:	e742      	b.n	103b2 <__udivmoddi4+0x14e>

0001052c <__aeabi_idiv0>:
   1052c:	4770      	bx	lr
   1052e:	bf00      	nop

00010530 <malloc>:
   10530:	4b02      	ldr	r3, [pc, #8]	; (1053c <malloc+0xc>)
   10532:	4601      	mov	r1, r0
   10534:	6818      	ldr	r0, [r3, #0]
   10536:	f000 b80b 	b.w	10550 <_malloc_r>
   1053a:	bf00      	nop
   1053c:	200094fc 	.word	0x200094fc

00010540 <free>:
   10540:	4b02      	ldr	r3, [pc, #8]	; (1054c <free+0xc>)
   10542:	4601      	mov	r1, r0
   10544:	6818      	ldr	r0, [r3, #0]
   10546:	f002 bc6d 	b.w	12e24 <_free_r>
   1054a:	bf00      	nop
   1054c:	200094fc 	.word	0x200094fc

00010550 <_malloc_r>:
   10550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10554:	f101 060b 	add.w	r6, r1, #11
   10558:	2e16      	cmp	r6, #22
   1055a:	b083      	sub	sp, #12
   1055c:	4604      	mov	r4, r0
   1055e:	d824      	bhi.n	105aa <_malloc_r+0x5a>
   10560:	2910      	cmp	r1, #16
   10562:	f200 80ba 	bhi.w	106da <_malloc_r+0x18a>
   10566:	f000 faa3 	bl	10ab0 <__malloc_lock>
   1056a:	2610      	movs	r6, #16
   1056c:	2218      	movs	r2, #24
   1056e:	2002      	movs	r0, #2
   10570:	4fb5      	ldr	r7, [pc, #724]	; (10848 <_malloc_r+0x2f8>)
   10572:	443a      	add	r2, r7
   10574:	f1a2 0108 	sub.w	r1, r2, #8
   10578:	6853      	ldr	r3, [r2, #4]
   1057a:	428b      	cmp	r3, r1
   1057c:	f000 80ba 	beq.w	106f4 <_malloc_r+0x1a4>
   10580:	685a      	ldr	r2, [r3, #4]
   10582:	68d9      	ldr	r1, [r3, #12]
   10584:	f022 0203 	bic.w	r2, r2, #3
   10588:	441a      	add	r2, r3
   1058a:	689d      	ldr	r5, [r3, #8]
   1058c:	60e9      	str	r1, [r5, #12]
   1058e:	608d      	str	r5, [r1, #8]
   10590:	6851      	ldr	r1, [r2, #4]
   10592:	f041 0101 	orr.w	r1, r1, #1
   10596:	4620      	mov	r0, r4
   10598:	6051      	str	r1, [r2, #4]
   1059a:	f103 0508 	add.w	r5, r3, #8
   1059e:	f000 fa8d 	bl	10abc <__malloc_unlock>
   105a2:	4628      	mov	r0, r5
   105a4:	b003      	add	sp, #12
   105a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105aa:	f036 0607 	bics.w	r6, r6, #7
   105ae:	f100 8094 	bmi.w	106da <_malloc_r+0x18a>
   105b2:	42b1      	cmp	r1, r6
   105b4:	f200 8091 	bhi.w	106da <_malloc_r+0x18a>
   105b8:	f000 fa7a 	bl	10ab0 <__malloc_lock>
   105bc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   105c0:	f0c0 819a 	bcc.w	108f8 <_malloc_r+0x3a8>
   105c4:	0a73      	lsrs	r3, r6, #9
   105c6:	f000 808f 	beq.w	106e8 <_malloc_r+0x198>
   105ca:	2b04      	cmp	r3, #4
   105cc:	f200 816f 	bhi.w	108ae <_malloc_r+0x35e>
   105d0:	09b3      	lsrs	r3, r6, #6
   105d2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   105d6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   105da:	00c3      	lsls	r3, r0, #3
   105dc:	4f9a      	ldr	r7, [pc, #616]	; (10848 <_malloc_r+0x2f8>)
   105de:	443b      	add	r3, r7
   105e0:	f1a3 0508 	sub.w	r5, r3, #8
   105e4:	685b      	ldr	r3, [r3, #4]
   105e6:	429d      	cmp	r5, r3
   105e8:	d106      	bne.n	105f8 <_malloc_r+0xa8>
   105ea:	e00c      	b.n	10606 <_malloc_r+0xb6>
   105ec:	2900      	cmp	r1, #0
   105ee:	f280 8127 	bge.w	10840 <_malloc_r+0x2f0>
   105f2:	68db      	ldr	r3, [r3, #12]
   105f4:	429d      	cmp	r5, r3
   105f6:	d006      	beq.n	10606 <_malloc_r+0xb6>
   105f8:	685a      	ldr	r2, [r3, #4]
   105fa:	f022 0203 	bic.w	r2, r2, #3
   105fe:	1b91      	subs	r1, r2, r6
   10600:	290f      	cmp	r1, #15
   10602:	ddf3      	ble.n	105ec <_malloc_r+0x9c>
   10604:	4660      	mov	r0, ip
   10606:	693d      	ldr	r5, [r7, #16]
   10608:	f8df c250 	ldr.w	ip, [pc, #592]	; 1085c <_malloc_r+0x30c>
   1060c:	4565      	cmp	r5, ip
   1060e:	d07c      	beq.n	1070a <_malloc_r+0x1ba>
   10610:	686a      	ldr	r2, [r5, #4]
   10612:	f022 0203 	bic.w	r2, r2, #3
   10616:	1b93      	subs	r3, r2, r6
   10618:	2b0f      	cmp	r3, #15
   1061a:	f300 817b 	bgt.w	10914 <_malloc_r+0x3c4>
   1061e:	2b00      	cmp	r3, #0
   10620:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   10624:	f280 816c 	bge.w	10900 <_malloc_r+0x3b0>
   10628:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1062c:	f080 811a 	bcs.w	10864 <_malloc_r+0x314>
   10630:	08d3      	lsrs	r3, r2, #3
   10632:	6879      	ldr	r1, [r7, #4]
   10634:	3301      	adds	r3, #1
   10636:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   1063a:	2201      	movs	r2, #1
   1063c:	fa02 f20e 	lsl.w	r2, r2, lr
   10640:	430a      	orrs	r2, r1
   10642:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   10646:	f8c5 e008 	str.w	lr, [r5, #8]
   1064a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1064e:	3908      	subs	r1, #8
   10650:	60e9      	str	r1, [r5, #12]
   10652:	607a      	str	r2, [r7, #4]
   10654:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   10658:	f8ce 500c 	str.w	r5, [lr, #12]
   1065c:	1083      	asrs	r3, r0, #2
   1065e:	2101      	movs	r1, #1
   10660:	4099      	lsls	r1, r3
   10662:	4291      	cmp	r1, r2
   10664:	d857      	bhi.n	10716 <_malloc_r+0x1c6>
   10666:	4211      	tst	r1, r2
   10668:	d106      	bne.n	10678 <_malloc_r+0x128>
   1066a:	f020 0003 	bic.w	r0, r0, #3
   1066e:	0049      	lsls	r1, r1, #1
   10670:	4211      	tst	r1, r2
   10672:	f100 0004 	add.w	r0, r0, #4
   10676:	d0fa      	beq.n	1066e <_malloc_r+0x11e>
   10678:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   1067c:	464d      	mov	r5, r9
   1067e:	4686      	mov	lr, r0
   10680:	f8d5 800c 	ldr.w	r8, [r5, #12]
   10684:	4545      	cmp	r5, r8
   10686:	d108      	bne.n	1069a <_malloc_r+0x14a>
   10688:	e11d      	b.n	108c6 <_malloc_r+0x376>
   1068a:	2b00      	cmp	r3, #0
   1068c:	f280 8124 	bge.w	108d8 <_malloc_r+0x388>
   10690:	f8d8 800c 	ldr.w	r8, [r8, #12]
   10694:	4545      	cmp	r5, r8
   10696:	f000 8116 	beq.w	108c6 <_malloc_r+0x376>
   1069a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1069e:	f022 0203 	bic.w	r2, r2, #3
   106a2:	1b93      	subs	r3, r2, r6
   106a4:	2b0f      	cmp	r3, #15
   106a6:	ddf0      	ble.n	1068a <_malloc_r+0x13a>
   106a8:	4620      	mov	r0, r4
   106aa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   106ae:	eb08 0106 	add.w	r1, r8, r6
   106b2:	f046 0601 	orr.w	r6, r6, #1
   106b6:	f8c8 6004 	str.w	r6, [r8, #4]
   106ba:	60ec      	str	r4, [r5, #12]
   106bc:	60a5      	str	r5, [r4, #8]
   106be:	f043 0401 	orr.w	r4, r3, #1
   106c2:	e9c7 1104 	strd	r1, r1, [r7, #16]
   106c6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   106ca:	604c      	str	r4, [r1, #4]
   106cc:	f848 3002 	str.w	r3, [r8, r2]
   106d0:	f000 f9f4 	bl	10abc <__malloc_unlock>
   106d4:	f108 0508 	add.w	r5, r8, #8
   106d8:	e002      	b.n	106e0 <_malloc_r+0x190>
   106da:	230c      	movs	r3, #12
   106dc:	6023      	str	r3, [r4, #0]
   106de:	2500      	movs	r5, #0
   106e0:	4628      	mov	r0, r5
   106e2:	b003      	add	sp, #12
   106e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106e8:	f44f 7300 	mov.w	r3, #512	; 0x200
   106ec:	2040      	movs	r0, #64	; 0x40
   106ee:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   106f2:	e773      	b.n	105dc <_malloc_r+0x8c>
   106f4:	68d3      	ldr	r3, [r2, #12]
   106f6:	429a      	cmp	r2, r3
   106f8:	bf08      	it	eq
   106fa:	3002      	addeq	r0, #2
   106fc:	f47f af40 	bne.w	10580 <_malloc_r+0x30>
   10700:	693d      	ldr	r5, [r7, #16]
   10702:	f8df c158 	ldr.w	ip, [pc, #344]	; 1085c <_malloc_r+0x30c>
   10706:	4565      	cmp	r5, ip
   10708:	d182      	bne.n	10610 <_malloc_r+0xc0>
   1070a:	687a      	ldr	r2, [r7, #4]
   1070c:	1083      	asrs	r3, r0, #2
   1070e:	2101      	movs	r1, #1
   10710:	4099      	lsls	r1, r3
   10712:	4291      	cmp	r1, r2
   10714:	d9a7      	bls.n	10666 <_malloc_r+0x116>
   10716:	68bd      	ldr	r5, [r7, #8]
   10718:	686b      	ldr	r3, [r5, #4]
   1071a:	f023 0903 	bic.w	r9, r3, #3
   1071e:	454e      	cmp	r6, r9
   10720:	d803      	bhi.n	1072a <_malloc_r+0x1da>
   10722:	eba9 0306 	sub.w	r3, r9, r6
   10726:	2b0f      	cmp	r3, #15
   10728:	dc7a      	bgt.n	10820 <_malloc_r+0x2d0>
   1072a:	f8df b134 	ldr.w	fp, [pc, #308]	; 10860 <_malloc_r+0x310>
   1072e:	4b47      	ldr	r3, [pc, #284]	; (1084c <_malloc_r+0x2fc>)
   10730:	f8db 2000 	ldr.w	r2, [fp]
   10734:	681b      	ldr	r3, [r3, #0]
   10736:	3201      	adds	r2, #1
   10738:	4433      	add	r3, r6
   1073a:	eb05 0a09 	add.w	sl, r5, r9
   1073e:	f000 8133 	beq.w	109a8 <_malloc_r+0x458>
   10742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   10746:	330f      	adds	r3, #15
   10748:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   1074c:	f028 080f 	bic.w	r8, r8, #15
   10750:	4641      	mov	r1, r8
   10752:	4620      	mov	r0, r4
   10754:	f001 ffd0 	bl	126f8 <_sbrk_r>
   10758:	1c41      	adds	r1, r0, #1
   1075a:	4602      	mov	r2, r0
   1075c:	f000 80f3 	beq.w	10946 <_malloc_r+0x3f6>
   10760:	4582      	cmp	sl, r0
   10762:	f200 80ee 	bhi.w	10942 <_malloc_r+0x3f2>
   10766:	4b3a      	ldr	r3, [pc, #232]	; (10850 <_malloc_r+0x300>)
   10768:	6819      	ldr	r1, [r3, #0]
   1076a:	4441      	add	r1, r8
   1076c:	6019      	str	r1, [r3, #0]
   1076e:	4608      	mov	r0, r1
   10770:	f000 814e 	beq.w	10a10 <_malloc_r+0x4c0>
   10774:	f8db 1000 	ldr.w	r1, [fp]
   10778:	9301      	str	r3, [sp, #4]
   1077a:	3101      	adds	r1, #1
   1077c:	bf1b      	ittet	ne
   1077e:	eba2 010a 	subne.w	r1, r2, sl
   10782:	1809      	addne	r1, r1, r0
   10784:	f8cb 2000 	streq.w	r2, [fp]
   10788:	6019      	strne	r1, [r3, #0]
   1078a:	f012 0b07 	ands.w	fp, r2, #7
   1078e:	f000 8117 	beq.w	109c0 <_malloc_r+0x470>
   10792:	f1cb 0108 	rsb	r1, fp, #8
   10796:	440a      	add	r2, r1
   10798:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   1079c:	4490      	add	r8, r2
   1079e:	3108      	adds	r1, #8
   107a0:	eba1 0108 	sub.w	r1, r1, r8
   107a4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   107a8:	4651      	mov	r1, sl
   107aa:	4620      	mov	r0, r4
   107ac:	9200      	str	r2, [sp, #0]
   107ae:	f001 ffa3 	bl	126f8 <_sbrk_r>
   107b2:	1c42      	adds	r2, r0, #1
   107b4:	e9dd 2300 	ldrd	r2, r3, [sp]
   107b8:	f000 814f 	beq.w	10a5a <_malloc_r+0x50a>
   107bc:	1a80      	subs	r0, r0, r2
   107be:	eb00 080a 	add.w	r8, r0, sl
   107c2:	6819      	ldr	r1, [r3, #0]
   107c4:	60ba      	str	r2, [r7, #8]
   107c6:	f048 0001 	orr.w	r0, r8, #1
   107ca:	4451      	add	r1, sl
   107cc:	42bd      	cmp	r5, r7
   107ce:	6050      	str	r0, [r2, #4]
   107d0:	6019      	str	r1, [r3, #0]
   107d2:	f000 8129 	beq.w	10a28 <_malloc_r+0x4d8>
   107d6:	f1b9 0f0f 	cmp.w	r9, #15
   107da:	f240 8127 	bls.w	10a2c <_malloc_r+0x4dc>
   107de:	6868      	ldr	r0, [r5, #4]
   107e0:	f1a9 0c0c 	sub.w	ip, r9, #12
   107e4:	f02c 0c07 	bic.w	ip, ip, #7
   107e8:	f000 0001 	and.w	r0, r0, #1
   107ec:	ea40 000c 	orr.w	r0, r0, ip
   107f0:	6068      	str	r0, [r5, #4]
   107f2:	f04f 0e05 	mov.w	lr, #5
   107f6:	eb05 000c 	add.w	r0, r5, ip
   107fa:	f1bc 0f0f 	cmp.w	ip, #15
   107fe:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   10802:	f200 8132 	bhi.w	10a6a <_malloc_r+0x51a>
   10806:	6850      	ldr	r0, [r2, #4]
   10808:	4615      	mov	r5, r2
   1080a:	4b12      	ldr	r3, [pc, #72]	; (10854 <_malloc_r+0x304>)
   1080c:	681a      	ldr	r2, [r3, #0]
   1080e:	428a      	cmp	r2, r1
   10810:	bf38      	it	cc
   10812:	6019      	strcc	r1, [r3, #0]
   10814:	4b10      	ldr	r3, [pc, #64]	; (10858 <_malloc_r+0x308>)
   10816:	681a      	ldr	r2, [r3, #0]
   10818:	428a      	cmp	r2, r1
   1081a:	bf38      	it	cc
   1081c:	6019      	strcc	r1, [r3, #0]
   1081e:	e094      	b.n	1094a <_malloc_r+0x3fa>
   10820:	19aa      	adds	r2, r5, r6
   10822:	f043 0301 	orr.w	r3, r3, #1
   10826:	f046 0601 	orr.w	r6, r6, #1
   1082a:	606e      	str	r6, [r5, #4]
   1082c:	4620      	mov	r0, r4
   1082e:	60ba      	str	r2, [r7, #8]
   10830:	6053      	str	r3, [r2, #4]
   10832:	f000 f943 	bl	10abc <__malloc_unlock>
   10836:	3508      	adds	r5, #8
   10838:	4628      	mov	r0, r5
   1083a:	b003      	add	sp, #12
   1083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10840:	68d9      	ldr	r1, [r3, #12]
   10842:	441a      	add	r2, r3
   10844:	e6a1      	b.n	1058a <_malloc_r+0x3a>
   10846:	bf00      	nop
   10848:	200090e0 	.word	0x200090e0
   1084c:	20018f9c 	.word	0x20018f9c
   10850:	20018f6c 	.word	0x20018f6c
   10854:	20018f94 	.word	0x20018f94
   10858:	20018f98 	.word	0x20018f98
   1085c:	200090e8 	.word	0x200090e8
   10860:	200094e8 	.word	0x200094e8
   10864:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   10868:	ea4f 2352 	mov.w	r3, r2, lsr #9
   1086c:	d363      	bcc.n	10936 <_malloc_r+0x3e6>
   1086e:	2b14      	cmp	r3, #20
   10870:	f200 80b7 	bhi.w	109e2 <_malloc_r+0x492>
   10874:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   10878:	00c9      	lsls	r1, r1, #3
   1087a:	335b      	adds	r3, #91	; 0x5b
   1087c:	eb07 0e01 	add.w	lr, r7, r1
   10880:	5879      	ldr	r1, [r7, r1]
   10882:	f1ae 0e08 	sub.w	lr, lr, #8
   10886:	458e      	cmp	lr, r1
   10888:	f000 8091 	beq.w	109ae <_malloc_r+0x45e>
   1088c:	684b      	ldr	r3, [r1, #4]
   1088e:	f023 0303 	bic.w	r3, r3, #3
   10892:	4293      	cmp	r3, r2
   10894:	d902      	bls.n	1089c <_malloc_r+0x34c>
   10896:	6889      	ldr	r1, [r1, #8]
   10898:	458e      	cmp	lr, r1
   1089a:	d1f7      	bne.n	1088c <_malloc_r+0x33c>
   1089c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   108a0:	687a      	ldr	r2, [r7, #4]
   108a2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   108a6:	f8ce 5008 	str.w	r5, [lr, #8]
   108aa:	60cd      	str	r5, [r1, #12]
   108ac:	e6d6      	b.n	1065c <_malloc_r+0x10c>
   108ae:	2b14      	cmp	r3, #20
   108b0:	d959      	bls.n	10966 <_malloc_r+0x416>
   108b2:	2b54      	cmp	r3, #84	; 0x54
   108b4:	f200 809d 	bhi.w	109f2 <_malloc_r+0x4a2>
   108b8:	0b33      	lsrs	r3, r6, #12
   108ba:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   108be:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   108c2:	00c3      	lsls	r3, r0, #3
   108c4:	e68a      	b.n	105dc <_malloc_r+0x8c>
   108c6:	f10e 0e01 	add.w	lr, lr, #1
   108ca:	f01e 0f03 	tst.w	lr, #3
   108ce:	f105 0508 	add.w	r5, r5, #8
   108d2:	f47f aed5 	bne.w	10680 <_malloc_r+0x130>
   108d6:	e051      	b.n	1097c <_malloc_r+0x42c>
   108d8:	4442      	add	r2, r8
   108da:	4645      	mov	r5, r8
   108dc:	6853      	ldr	r3, [r2, #4]
   108de:	f8d8 100c 	ldr.w	r1, [r8, #12]
   108e2:	f043 0301 	orr.w	r3, r3, #1
   108e6:	6053      	str	r3, [r2, #4]
   108e8:	f855 3f08 	ldr.w	r3, [r5, #8]!
   108ec:	4620      	mov	r0, r4
   108ee:	60d9      	str	r1, [r3, #12]
   108f0:	608b      	str	r3, [r1, #8]
   108f2:	f000 f8e3 	bl	10abc <__malloc_unlock>
   108f6:	e6f3      	b.n	106e0 <_malloc_r+0x190>
   108f8:	08f0      	lsrs	r0, r6, #3
   108fa:	f106 0208 	add.w	r2, r6, #8
   108fe:	e637      	b.n	10570 <_malloc_r+0x20>
   10900:	442a      	add	r2, r5
   10902:	4620      	mov	r0, r4
   10904:	6853      	ldr	r3, [r2, #4]
   10906:	f043 0301 	orr.w	r3, r3, #1
   1090a:	6053      	str	r3, [r2, #4]
   1090c:	3508      	adds	r5, #8
   1090e:	f000 f8d5 	bl	10abc <__malloc_unlock>
   10912:	e6e5      	b.n	106e0 <_malloc_r+0x190>
   10914:	19a9      	adds	r1, r5, r6
   10916:	4620      	mov	r0, r4
   10918:	f046 0601 	orr.w	r6, r6, #1
   1091c:	f043 0401 	orr.w	r4, r3, #1
   10920:	606e      	str	r6, [r5, #4]
   10922:	e9c7 1104 	strd	r1, r1, [r7, #16]
   10926:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   1092a:	604c      	str	r4, [r1, #4]
   1092c:	50ab      	str	r3, [r5, r2]
   1092e:	f000 f8c5 	bl	10abc <__malloc_unlock>
   10932:	3508      	adds	r5, #8
   10934:	e6d4      	b.n	106e0 <_malloc_r+0x190>
   10936:	0993      	lsrs	r3, r2, #6
   10938:	f103 0139 	add.w	r1, r3, #57	; 0x39
   1093c:	00c9      	lsls	r1, r1, #3
   1093e:	3338      	adds	r3, #56	; 0x38
   10940:	e79c      	b.n	1087c <_malloc_r+0x32c>
   10942:	42bd      	cmp	r5, r7
   10944:	d05f      	beq.n	10a06 <_malloc_r+0x4b6>
   10946:	68bd      	ldr	r5, [r7, #8]
   10948:	6868      	ldr	r0, [r5, #4]
   1094a:	f020 0803 	bic.w	r8, r0, #3
   1094e:	4546      	cmp	r6, r8
   10950:	eba8 0306 	sub.w	r3, r8, r6
   10954:	d802      	bhi.n	1095c <_malloc_r+0x40c>
   10956:	2b0f      	cmp	r3, #15
   10958:	f73f af62 	bgt.w	10820 <_malloc_r+0x2d0>
   1095c:	4620      	mov	r0, r4
   1095e:	f000 f8ad 	bl	10abc <__malloc_unlock>
   10962:	2500      	movs	r5, #0
   10964:	e6bc      	b.n	106e0 <_malloc_r+0x190>
   10966:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   1096a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   1096e:	00c3      	lsls	r3, r0, #3
   10970:	e634      	b.n	105dc <_malloc_r+0x8c>
   10972:	f859 3908 	ldr.w	r3, [r9], #-8
   10976:	454b      	cmp	r3, r9
   10978:	f040 8096 	bne.w	10aa8 <_malloc_r+0x558>
   1097c:	f010 0f03 	tst.w	r0, #3
   10980:	f100 30ff 	add.w	r0, r0, #4294967295
   10984:	d1f5      	bne.n	10972 <_malloc_r+0x422>
   10986:	687b      	ldr	r3, [r7, #4]
   10988:	ea23 0301 	bic.w	r3, r3, r1
   1098c:	607b      	str	r3, [r7, #4]
   1098e:	0049      	lsls	r1, r1, #1
   10990:	4299      	cmp	r1, r3
   10992:	f63f aec0 	bhi.w	10716 <_malloc_r+0x1c6>
   10996:	b919      	cbnz	r1, 109a0 <_malloc_r+0x450>
   10998:	e6bd      	b.n	10716 <_malloc_r+0x1c6>
   1099a:	0049      	lsls	r1, r1, #1
   1099c:	f10e 0e04 	add.w	lr, lr, #4
   109a0:	4219      	tst	r1, r3
   109a2:	d0fa      	beq.n	1099a <_malloc_r+0x44a>
   109a4:	4670      	mov	r0, lr
   109a6:	e667      	b.n	10678 <_malloc_r+0x128>
   109a8:	f103 0810 	add.w	r8, r3, #16
   109ac:	e6d0      	b.n	10750 <_malloc_r+0x200>
   109ae:	109a      	asrs	r2, r3, #2
   109b0:	f04f 0801 	mov.w	r8, #1
   109b4:	687b      	ldr	r3, [r7, #4]
   109b6:	fa08 f202 	lsl.w	r2, r8, r2
   109ba:	431a      	orrs	r2, r3
   109bc:	607a      	str	r2, [r7, #4]
   109be:	e770      	b.n	108a2 <_malloc_r+0x352>
   109c0:	eb02 0108 	add.w	r1, r2, r8
   109c4:	4249      	negs	r1, r1
   109c6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   109ca:	4651      	mov	r1, sl
   109cc:	4620      	mov	r0, r4
   109ce:	9200      	str	r2, [sp, #0]
   109d0:	f001 fe92 	bl	126f8 <_sbrk_r>
   109d4:	1c43      	adds	r3, r0, #1
   109d6:	e9dd 2300 	ldrd	r2, r3, [sp]
   109da:	f47f aeef 	bne.w	107bc <_malloc_r+0x26c>
   109de:	46da      	mov	sl, fp
   109e0:	e6ef      	b.n	107c2 <_malloc_r+0x272>
   109e2:	2b54      	cmp	r3, #84	; 0x54
   109e4:	d825      	bhi.n	10a32 <_malloc_r+0x4e2>
   109e6:	0b13      	lsrs	r3, r2, #12
   109e8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   109ec:	00c9      	lsls	r1, r1, #3
   109ee:	336e      	adds	r3, #110	; 0x6e
   109f0:	e744      	b.n	1087c <_malloc_r+0x32c>
   109f2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   109f6:	d825      	bhi.n	10a44 <_malloc_r+0x4f4>
   109f8:	0bf3      	lsrs	r3, r6, #15
   109fa:	f103 0078 	add.w	r0, r3, #120	; 0x78
   109fe:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   10a02:	00c3      	lsls	r3, r0, #3
   10a04:	e5ea      	b.n	105dc <_malloc_r+0x8c>
   10a06:	4b29      	ldr	r3, [pc, #164]	; (10aac <_malloc_r+0x55c>)
   10a08:	6818      	ldr	r0, [r3, #0]
   10a0a:	4440      	add	r0, r8
   10a0c:	6018      	str	r0, [r3, #0]
   10a0e:	e6b1      	b.n	10774 <_malloc_r+0x224>
   10a10:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   10a14:	f1bc 0f00 	cmp.w	ip, #0
   10a18:	f47f aeac 	bne.w	10774 <_malloc_r+0x224>
   10a1c:	68bd      	ldr	r5, [r7, #8]
   10a1e:	44c8      	add	r8, r9
   10a20:	f048 0001 	orr.w	r0, r8, #1
   10a24:	6068      	str	r0, [r5, #4]
   10a26:	e6f0      	b.n	1080a <_malloc_r+0x2ba>
   10a28:	4615      	mov	r5, r2
   10a2a:	e6ee      	b.n	1080a <_malloc_r+0x2ba>
   10a2c:	2301      	movs	r3, #1
   10a2e:	6053      	str	r3, [r2, #4]
   10a30:	e794      	b.n	1095c <_malloc_r+0x40c>
   10a32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   10a36:	d823      	bhi.n	10a80 <_malloc_r+0x530>
   10a38:	0bd3      	lsrs	r3, r2, #15
   10a3a:	f103 0178 	add.w	r1, r3, #120	; 0x78
   10a3e:	00c9      	lsls	r1, r1, #3
   10a40:	3377      	adds	r3, #119	; 0x77
   10a42:	e71b      	b.n	1087c <_malloc_r+0x32c>
   10a44:	f240 5254 	movw	r2, #1364	; 0x554
   10a48:	4293      	cmp	r3, r2
   10a4a:	d823      	bhi.n	10a94 <_malloc_r+0x544>
   10a4c:	0cb3      	lsrs	r3, r6, #18
   10a4e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   10a52:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   10a56:	00c3      	lsls	r3, r0, #3
   10a58:	e5c0      	b.n	105dc <_malloc_r+0x8c>
   10a5a:	f1ab 0b08 	sub.w	fp, fp, #8
   10a5e:	44d8      	add	r8, fp
   10a60:	eba8 0802 	sub.w	r8, r8, r2
   10a64:	f04f 0a00 	mov.w	sl, #0
   10a68:	e6ab      	b.n	107c2 <_malloc_r+0x272>
   10a6a:	f105 0108 	add.w	r1, r5, #8
   10a6e:	4620      	mov	r0, r4
   10a70:	9300      	str	r3, [sp, #0]
   10a72:	f002 f9d7 	bl	12e24 <_free_r>
   10a76:	68bd      	ldr	r5, [r7, #8]
   10a78:	9b00      	ldr	r3, [sp, #0]
   10a7a:	6868      	ldr	r0, [r5, #4]
   10a7c:	6819      	ldr	r1, [r3, #0]
   10a7e:	e6c4      	b.n	1080a <_malloc_r+0x2ba>
   10a80:	f240 5154 	movw	r1, #1364	; 0x554
   10a84:	428b      	cmp	r3, r1
   10a86:	d80b      	bhi.n	10aa0 <_malloc_r+0x550>
   10a88:	0c93      	lsrs	r3, r2, #18
   10a8a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   10a8e:	00c9      	lsls	r1, r1, #3
   10a90:	337c      	adds	r3, #124	; 0x7c
   10a92:	e6f3      	b.n	1087c <_malloc_r+0x32c>
   10a94:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   10a98:	207f      	movs	r0, #127	; 0x7f
   10a9a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   10a9e:	e59d      	b.n	105dc <_malloc_r+0x8c>
   10aa0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   10aa4:	237e      	movs	r3, #126	; 0x7e
   10aa6:	e6e9      	b.n	1087c <_malloc_r+0x32c>
   10aa8:	687b      	ldr	r3, [r7, #4]
   10aaa:	e770      	b.n	1098e <_malloc_r+0x43e>
   10aac:	20018f6c 	.word	0x20018f6c

00010ab0 <__malloc_lock>:
   10ab0:	4801      	ldr	r0, [pc, #4]	; (10ab8 <__malloc_lock+0x8>)
   10ab2:	f001 be77 	b.w	127a4 <__retarget_lock_acquire_recursive>
   10ab6:	bf00      	nop
   10ab8:	20018f64 	.word	0x20018f64

00010abc <__malloc_unlock>:
   10abc:	4801      	ldr	r0, [pc, #4]	; (10ac4 <__malloc_unlock+0x8>)
   10abe:	f001 be73 	b.w	127a8 <__retarget_lock_release_recursive>
   10ac2:	bf00      	nop
   10ac4:	20018f64 	.word	0x20018f64

00010ac8 <realloc>:
   10ac8:	b410      	push	{r4}
   10aca:	4c04      	ldr	r4, [pc, #16]	; (10adc <realloc+0x14>)
   10acc:	4603      	mov	r3, r0
   10ace:	460a      	mov	r2, r1
   10ad0:	6820      	ldr	r0, [r4, #0]
   10ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
   10ad6:	4619      	mov	r1, r3
   10ad8:	f000 b802 	b.w	10ae0 <_realloc_r>
   10adc:	200094fc 	.word	0x200094fc

00010ae0 <_realloc_r>:
   10ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ae4:	4617      	mov	r7, r2
   10ae6:	2900      	cmp	r1, #0
   10ae8:	f000 8098 	beq.w	10c1c <_realloc_r+0x13c>
   10aec:	460c      	mov	r4, r1
   10aee:	f107 050b 	add.w	r5, r7, #11
   10af2:	4680      	mov	r8, r0
   10af4:	f7ff ffdc 	bl	10ab0 <__malloc_lock>
   10af8:	2d16      	cmp	r5, #22
   10afa:	f854 1c04 	ldr.w	r1, [r4, #-4]
   10afe:	d85b      	bhi.n	10bb8 <_realloc_r+0xd8>
   10b00:	2510      	movs	r5, #16
   10b02:	462a      	mov	r2, r5
   10b04:	42af      	cmp	r7, r5
   10b06:	d85c      	bhi.n	10bc2 <_realloc_r+0xe2>
   10b08:	f021 0603 	bic.w	r6, r1, #3
   10b0c:	4296      	cmp	r6, r2
   10b0e:	f1a4 0908 	sub.w	r9, r4, #8
   10b12:	da62      	bge.n	10bda <_realloc_r+0xfa>
   10b14:	4bbc      	ldr	r3, [pc, #752]	; (10e08 <_realloc_r+0x328>)
   10b16:	f8d3 c008 	ldr.w	ip, [r3, #8]
   10b1a:	eb09 0006 	add.w	r0, r9, r6
   10b1e:	4584      	cmp	ip, r0
   10b20:	f000 8097 	beq.w	10c52 <_realloc_r+0x172>
   10b24:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10b28:	f02c 0301 	bic.w	r3, ip, #1
   10b2c:	4403      	add	r3, r0
   10b2e:	685b      	ldr	r3, [r3, #4]
   10b30:	07db      	lsls	r3, r3, #31
   10b32:	d468      	bmi.n	10c06 <_realloc_r+0x126>
   10b34:	f02c 0c03 	bic.w	ip, ip, #3
   10b38:	eb06 030c 	add.w	r3, r6, ip
   10b3c:	4293      	cmp	r3, r2
   10b3e:	da47      	bge.n	10bd0 <_realloc_r+0xf0>
   10b40:	07cb      	lsls	r3, r1, #31
   10b42:	d410      	bmi.n	10b66 <_realloc_r+0x86>
   10b44:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10b48:	eba9 0a03 	sub.w	sl, r9, r3
   10b4c:	f8da 3004 	ldr.w	r3, [sl, #4]
   10b50:	f023 0103 	bic.w	r1, r3, #3
   10b54:	448c      	add	ip, r1
   10b56:	44b4      	add	ip, r6
   10b58:	4594      	cmp	ip, r2
   10b5a:	f280 8111 	bge.w	10d80 <_realloc_r+0x2a0>
   10b5e:	1873      	adds	r3, r6, r1
   10b60:	4293      	cmp	r3, r2
   10b62:	f280 80e8 	bge.w	10d36 <_realloc_r+0x256>
   10b66:	4639      	mov	r1, r7
   10b68:	4640      	mov	r0, r8
   10b6a:	f7ff fcf1 	bl	10550 <_malloc_r>
   10b6e:	4607      	mov	r7, r0
   10b70:	b1e0      	cbz	r0, 10bac <_realloc_r+0xcc>
   10b72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10b76:	f023 0301 	bic.w	r3, r3, #1
   10b7a:	444b      	add	r3, r9
   10b7c:	f1a0 0208 	sub.w	r2, r0, #8
   10b80:	4293      	cmp	r3, r2
   10b82:	f000 80d2 	beq.w	10d2a <_realloc_r+0x24a>
   10b86:	1f32      	subs	r2, r6, #4
   10b88:	2a24      	cmp	r2, #36	; 0x24
   10b8a:	f200 80f5 	bhi.w	10d78 <_realloc_r+0x298>
   10b8e:	2a13      	cmp	r2, #19
   10b90:	f200 80ac 	bhi.w	10cec <_realloc_r+0x20c>
   10b94:	4603      	mov	r3, r0
   10b96:	4622      	mov	r2, r4
   10b98:	6811      	ldr	r1, [r2, #0]
   10b9a:	6019      	str	r1, [r3, #0]
   10b9c:	6851      	ldr	r1, [r2, #4]
   10b9e:	6059      	str	r1, [r3, #4]
   10ba0:	6892      	ldr	r2, [r2, #8]
   10ba2:	609a      	str	r2, [r3, #8]
   10ba4:	4621      	mov	r1, r4
   10ba6:	4640      	mov	r0, r8
   10ba8:	f002 f93c 	bl	12e24 <_free_r>
   10bac:	4640      	mov	r0, r8
   10bae:	f7ff ff85 	bl	10abc <__malloc_unlock>
   10bb2:	4638      	mov	r0, r7
   10bb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bb8:	f025 0507 	bic.w	r5, r5, #7
   10bbc:	2d00      	cmp	r5, #0
   10bbe:	462a      	mov	r2, r5
   10bc0:	daa0      	bge.n	10b04 <_realloc_r+0x24>
   10bc2:	230c      	movs	r3, #12
   10bc4:	f8c8 3000 	str.w	r3, [r8]
   10bc8:	2700      	movs	r7, #0
   10bca:	4638      	mov	r0, r7
   10bcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10bd0:	461e      	mov	r6, r3
   10bd2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   10bd6:	60d3      	str	r3, [r2, #12]
   10bd8:	609a      	str	r2, [r3, #8]
   10bda:	1b73      	subs	r3, r6, r5
   10bdc:	2b0f      	cmp	r3, #15
   10bde:	d822      	bhi.n	10c26 <_realloc_r+0x146>
   10be0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   10be4:	f003 0301 	and.w	r3, r3, #1
   10be8:	4333      	orrs	r3, r6
   10bea:	444e      	add	r6, r9
   10bec:	f8c9 3004 	str.w	r3, [r9, #4]
   10bf0:	6873      	ldr	r3, [r6, #4]
   10bf2:	f043 0301 	orr.w	r3, r3, #1
   10bf6:	6073      	str	r3, [r6, #4]
   10bf8:	4640      	mov	r0, r8
   10bfa:	4627      	mov	r7, r4
   10bfc:	f7ff ff5e 	bl	10abc <__malloc_unlock>
   10c00:	4638      	mov	r0, r7
   10c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c06:	07c9      	lsls	r1, r1, #31
   10c08:	d4ad      	bmi.n	10b66 <_realloc_r+0x86>
   10c0a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   10c0e:	eba9 0a03 	sub.w	sl, r9, r3
   10c12:	f8da 1004 	ldr.w	r1, [sl, #4]
   10c16:	f021 0103 	bic.w	r1, r1, #3
   10c1a:	e7a0      	b.n	10b5e <_realloc_r+0x7e>
   10c1c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c20:	4611      	mov	r1, r2
   10c22:	f7ff bc95 	b.w	10550 <_malloc_r>
   10c26:	f8d9 2004 	ldr.w	r2, [r9, #4]
   10c2a:	eb09 0105 	add.w	r1, r9, r5
   10c2e:	f002 0201 	and.w	r2, r2, #1
   10c32:	444e      	add	r6, r9
   10c34:	f043 0301 	orr.w	r3, r3, #1
   10c38:	432a      	orrs	r2, r5
   10c3a:	f8c9 2004 	str.w	r2, [r9, #4]
   10c3e:	604b      	str	r3, [r1, #4]
   10c40:	6873      	ldr	r3, [r6, #4]
   10c42:	f043 0301 	orr.w	r3, r3, #1
   10c46:	3108      	adds	r1, #8
   10c48:	6073      	str	r3, [r6, #4]
   10c4a:	4640      	mov	r0, r8
   10c4c:	f002 f8ea 	bl	12e24 <_free_r>
   10c50:	e7d2      	b.n	10bf8 <_realloc_r+0x118>
   10c52:	f8dc 0004 	ldr.w	r0, [ip, #4]
   10c56:	f020 0b03 	bic.w	fp, r0, #3
   10c5a:	eb06 0c0b 	add.w	ip, r6, fp
   10c5e:	f105 0010 	add.w	r0, r5, #16
   10c62:	4584      	cmp	ip, r0
   10c64:	da4d      	bge.n	10d02 <_realloc_r+0x222>
   10c66:	07c9      	lsls	r1, r1, #31
   10c68:	f53f af7d 	bmi.w	10b66 <_realloc_r+0x86>
   10c6c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   10c70:	eba9 0a01 	sub.w	sl, r9, r1
   10c74:	f8da 1004 	ldr.w	r1, [sl, #4]
   10c78:	f021 0103 	bic.w	r1, r1, #3
   10c7c:	448b      	add	fp, r1
   10c7e:	44b3      	add	fp, r6
   10c80:	4558      	cmp	r0, fp
   10c82:	f73f af6c 	bgt.w	10b5e <_realloc_r+0x7e>
   10c86:	4657      	mov	r7, sl
   10c88:	f8da 100c 	ldr.w	r1, [sl, #12]
   10c8c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10c90:	1f32      	subs	r2, r6, #4
   10c92:	2a24      	cmp	r2, #36	; 0x24
   10c94:	60c1      	str	r1, [r0, #12]
   10c96:	6088      	str	r0, [r1, #8]
   10c98:	f200 80db 	bhi.w	10e52 <_realloc_r+0x372>
   10c9c:	2a13      	cmp	r2, #19
   10c9e:	f240 80d6 	bls.w	10e4e <_realloc_r+0x36e>
   10ca2:	6821      	ldr	r1, [r4, #0]
   10ca4:	f8ca 1008 	str.w	r1, [sl, #8]
   10ca8:	6861      	ldr	r1, [r4, #4]
   10caa:	f8ca 100c 	str.w	r1, [sl, #12]
   10cae:	2a1b      	cmp	r2, #27
   10cb0:	f200 80df 	bhi.w	10e72 <_realloc_r+0x392>
   10cb4:	3408      	adds	r4, #8
   10cb6:	f10a 0210 	add.w	r2, sl, #16
   10cba:	6821      	ldr	r1, [r4, #0]
   10cbc:	6011      	str	r1, [r2, #0]
   10cbe:	6861      	ldr	r1, [r4, #4]
   10cc0:	6051      	str	r1, [r2, #4]
   10cc2:	68a1      	ldr	r1, [r4, #8]
   10cc4:	6091      	str	r1, [r2, #8]
   10cc6:	eb0a 0105 	add.w	r1, sl, r5
   10cca:	ebab 0205 	sub.w	r2, fp, r5
   10cce:	f042 0201 	orr.w	r2, r2, #1
   10cd2:	6099      	str	r1, [r3, #8]
   10cd4:	604a      	str	r2, [r1, #4]
   10cd6:	f8da 3004 	ldr.w	r3, [sl, #4]
   10cda:	f003 0301 	and.w	r3, r3, #1
   10cde:	432b      	orrs	r3, r5
   10ce0:	4640      	mov	r0, r8
   10ce2:	f8ca 3004 	str.w	r3, [sl, #4]
   10ce6:	f7ff fee9 	bl	10abc <__malloc_unlock>
   10cea:	e76e      	b.n	10bca <_realloc_r+0xea>
   10cec:	6823      	ldr	r3, [r4, #0]
   10cee:	6003      	str	r3, [r0, #0]
   10cf0:	6863      	ldr	r3, [r4, #4]
   10cf2:	6043      	str	r3, [r0, #4]
   10cf4:	2a1b      	cmp	r2, #27
   10cf6:	d868      	bhi.n	10dca <_realloc_r+0x2ea>
   10cf8:	f104 0208 	add.w	r2, r4, #8
   10cfc:	f100 0308 	add.w	r3, r0, #8
   10d00:	e74a      	b.n	10b98 <_realloc_r+0xb8>
   10d02:	eb09 0205 	add.w	r2, r9, r5
   10d06:	609a      	str	r2, [r3, #8]
   10d08:	ebac 0305 	sub.w	r3, ip, r5
   10d0c:	f043 0301 	orr.w	r3, r3, #1
   10d10:	6053      	str	r3, [r2, #4]
   10d12:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10d16:	f003 0301 	and.w	r3, r3, #1
   10d1a:	432b      	orrs	r3, r5
   10d1c:	4640      	mov	r0, r8
   10d1e:	f844 3c04 	str.w	r3, [r4, #-4]
   10d22:	f7ff fecb 	bl	10abc <__malloc_unlock>
   10d26:	4627      	mov	r7, r4
   10d28:	e74f      	b.n	10bca <_realloc_r+0xea>
   10d2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   10d2e:	f023 0303 	bic.w	r3, r3, #3
   10d32:	441e      	add	r6, r3
   10d34:	e751      	b.n	10bda <_realloc_r+0xfa>
   10d36:	4657      	mov	r7, sl
   10d38:	f8da 100c 	ldr.w	r1, [sl, #12]
   10d3c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   10d40:	1f32      	subs	r2, r6, #4
   10d42:	2a24      	cmp	r2, #36	; 0x24
   10d44:	60c1      	str	r1, [r0, #12]
   10d46:	6088      	str	r0, [r1, #8]
   10d48:	d84c      	bhi.n	10de4 <_realloc_r+0x304>
   10d4a:	2a13      	cmp	r2, #19
   10d4c:	d948      	bls.n	10de0 <_realloc_r+0x300>
   10d4e:	6821      	ldr	r1, [r4, #0]
   10d50:	f8ca 1008 	str.w	r1, [sl, #8]
   10d54:	6861      	ldr	r1, [r4, #4]
   10d56:	f8ca 100c 	str.w	r1, [sl, #12]
   10d5a:	2a1b      	cmp	r2, #27
   10d5c:	d856      	bhi.n	10e0c <_realloc_r+0x32c>
   10d5e:	3408      	adds	r4, #8
   10d60:	f10a 0210 	add.w	r2, sl, #16
   10d64:	461e      	mov	r6, r3
   10d66:	6823      	ldr	r3, [r4, #0]
   10d68:	6013      	str	r3, [r2, #0]
   10d6a:	6863      	ldr	r3, [r4, #4]
   10d6c:	6053      	str	r3, [r2, #4]
   10d6e:	68a3      	ldr	r3, [r4, #8]
   10d70:	6093      	str	r3, [r2, #8]
   10d72:	46d1      	mov	r9, sl
   10d74:	463c      	mov	r4, r7
   10d76:	e730      	b.n	10bda <_realloc_r+0xfa>
   10d78:	4621      	mov	r1, r4
   10d7a:	f001 fadd 	bl	12338 <memmove>
   10d7e:	e711      	b.n	10ba4 <_realloc_r+0xc4>
   10d80:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   10d84:	4657      	mov	r7, sl
   10d86:	60cb      	str	r3, [r1, #12]
   10d88:	6099      	str	r1, [r3, #8]
   10d8a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   10d8e:	f8da 300c 	ldr.w	r3, [sl, #12]
   10d92:	60cb      	str	r3, [r1, #12]
   10d94:	1f32      	subs	r2, r6, #4
   10d96:	2a24      	cmp	r2, #36	; 0x24
   10d98:	6099      	str	r1, [r3, #8]
   10d9a:	d82d      	bhi.n	10df8 <_realloc_r+0x318>
   10d9c:	2a13      	cmp	r2, #19
   10d9e:	d929      	bls.n	10df4 <_realloc_r+0x314>
   10da0:	6823      	ldr	r3, [r4, #0]
   10da2:	f8ca 3008 	str.w	r3, [sl, #8]
   10da6:	6863      	ldr	r3, [r4, #4]
   10da8:	f8ca 300c 	str.w	r3, [sl, #12]
   10dac:	2a1b      	cmp	r2, #27
   10dae:	d842      	bhi.n	10e36 <_realloc_r+0x356>
   10db0:	3408      	adds	r4, #8
   10db2:	f10a 0310 	add.w	r3, sl, #16
   10db6:	6822      	ldr	r2, [r4, #0]
   10db8:	601a      	str	r2, [r3, #0]
   10dba:	6862      	ldr	r2, [r4, #4]
   10dbc:	605a      	str	r2, [r3, #4]
   10dbe:	68a2      	ldr	r2, [r4, #8]
   10dc0:	609a      	str	r2, [r3, #8]
   10dc2:	4666      	mov	r6, ip
   10dc4:	46d1      	mov	r9, sl
   10dc6:	463c      	mov	r4, r7
   10dc8:	e707      	b.n	10bda <_realloc_r+0xfa>
   10dca:	68a3      	ldr	r3, [r4, #8]
   10dcc:	6083      	str	r3, [r0, #8]
   10dce:	68e3      	ldr	r3, [r4, #12]
   10dd0:	60c3      	str	r3, [r0, #12]
   10dd2:	2a24      	cmp	r2, #36	; 0x24
   10dd4:	d026      	beq.n	10e24 <_realloc_r+0x344>
   10dd6:	f104 0210 	add.w	r2, r4, #16
   10dda:	f100 0310 	add.w	r3, r0, #16
   10dde:	e6db      	b.n	10b98 <_realloc_r+0xb8>
   10de0:	463a      	mov	r2, r7
   10de2:	e7bf      	b.n	10d64 <_realloc_r+0x284>
   10de4:	4621      	mov	r1, r4
   10de6:	4638      	mov	r0, r7
   10de8:	461e      	mov	r6, r3
   10dea:	46d1      	mov	r9, sl
   10dec:	f001 faa4 	bl	12338 <memmove>
   10df0:	463c      	mov	r4, r7
   10df2:	e6f2      	b.n	10bda <_realloc_r+0xfa>
   10df4:	463b      	mov	r3, r7
   10df6:	e7de      	b.n	10db6 <_realloc_r+0x2d6>
   10df8:	4621      	mov	r1, r4
   10dfa:	4638      	mov	r0, r7
   10dfc:	4666      	mov	r6, ip
   10dfe:	46d1      	mov	r9, sl
   10e00:	f001 fa9a 	bl	12338 <memmove>
   10e04:	463c      	mov	r4, r7
   10e06:	e6e8      	b.n	10bda <_realloc_r+0xfa>
   10e08:	200090e0 	.word	0x200090e0
   10e0c:	68a1      	ldr	r1, [r4, #8]
   10e0e:	f8ca 1010 	str.w	r1, [sl, #16]
   10e12:	68e1      	ldr	r1, [r4, #12]
   10e14:	f8ca 1014 	str.w	r1, [sl, #20]
   10e18:	2a24      	cmp	r2, #36	; 0x24
   10e1a:	d020      	beq.n	10e5e <_realloc_r+0x37e>
   10e1c:	3410      	adds	r4, #16
   10e1e:	f10a 0218 	add.w	r2, sl, #24
   10e22:	e79f      	b.n	10d64 <_realloc_r+0x284>
   10e24:	6923      	ldr	r3, [r4, #16]
   10e26:	6103      	str	r3, [r0, #16]
   10e28:	6961      	ldr	r1, [r4, #20]
   10e2a:	6141      	str	r1, [r0, #20]
   10e2c:	f104 0218 	add.w	r2, r4, #24
   10e30:	f100 0318 	add.w	r3, r0, #24
   10e34:	e6b0      	b.n	10b98 <_realloc_r+0xb8>
   10e36:	68a3      	ldr	r3, [r4, #8]
   10e38:	f8ca 3010 	str.w	r3, [sl, #16]
   10e3c:	68e3      	ldr	r3, [r4, #12]
   10e3e:	f8ca 3014 	str.w	r3, [sl, #20]
   10e42:	2a24      	cmp	r2, #36	; 0x24
   10e44:	d021      	beq.n	10e8a <_realloc_r+0x3aa>
   10e46:	3410      	adds	r4, #16
   10e48:	f10a 0318 	add.w	r3, sl, #24
   10e4c:	e7b3      	b.n	10db6 <_realloc_r+0x2d6>
   10e4e:	463a      	mov	r2, r7
   10e50:	e733      	b.n	10cba <_realloc_r+0x1da>
   10e52:	4621      	mov	r1, r4
   10e54:	4638      	mov	r0, r7
   10e56:	f001 fa6f 	bl	12338 <memmove>
   10e5a:	4b16      	ldr	r3, [pc, #88]	; (10eb4 <_realloc_r+0x3d4>)
   10e5c:	e733      	b.n	10cc6 <_realloc_r+0x1e6>
   10e5e:	6922      	ldr	r2, [r4, #16]
   10e60:	f8ca 2018 	str.w	r2, [sl, #24]
   10e64:	6962      	ldr	r2, [r4, #20]
   10e66:	f8ca 201c 	str.w	r2, [sl, #28]
   10e6a:	3418      	adds	r4, #24
   10e6c:	f10a 0220 	add.w	r2, sl, #32
   10e70:	e778      	b.n	10d64 <_realloc_r+0x284>
   10e72:	68a1      	ldr	r1, [r4, #8]
   10e74:	f8ca 1010 	str.w	r1, [sl, #16]
   10e78:	68e1      	ldr	r1, [r4, #12]
   10e7a:	f8ca 1014 	str.w	r1, [sl, #20]
   10e7e:	2a24      	cmp	r2, #36	; 0x24
   10e80:	d00d      	beq.n	10e9e <_realloc_r+0x3be>
   10e82:	3410      	adds	r4, #16
   10e84:	f10a 0218 	add.w	r2, sl, #24
   10e88:	e717      	b.n	10cba <_realloc_r+0x1da>
   10e8a:	6923      	ldr	r3, [r4, #16]
   10e8c:	f8ca 3018 	str.w	r3, [sl, #24]
   10e90:	6963      	ldr	r3, [r4, #20]
   10e92:	f8ca 301c 	str.w	r3, [sl, #28]
   10e96:	3418      	adds	r4, #24
   10e98:	f10a 0320 	add.w	r3, sl, #32
   10e9c:	e78b      	b.n	10db6 <_realloc_r+0x2d6>
   10e9e:	6922      	ldr	r2, [r4, #16]
   10ea0:	f8ca 2018 	str.w	r2, [sl, #24]
   10ea4:	6962      	ldr	r2, [r4, #20]
   10ea6:	f8ca 201c 	str.w	r2, [sl, #28]
   10eaa:	3418      	adds	r4, #24
   10eac:	f10a 0220 	add.w	r2, sl, #32
   10eb0:	e703      	b.n	10cba <_realloc_r+0x1da>
   10eb2:	bf00      	nop
   10eb4:	200090e0 	.word	0x200090e0

00010eb8 <_strtod_l>:
   10eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ebc:	ed2d 8b10 	vpush	{d8-d15}
   10ec0:	b097      	sub	sp, #92	; 0x5c
   10ec2:	468a      	mov	sl, r1
   10ec4:	2100      	movs	r1, #0
   10ec6:	9207      	str	r2, [sp, #28]
   10ec8:	9112      	str	r1, [sp, #72]	; 0x48
   10eca:	2200      	movs	r2, #0
   10ecc:	2100      	movs	r1, #0
   10ece:	e9cd 1204 	strd	r1, r2, [sp, #16]
   10ed2:	4680      	mov	r8, r0
   10ed4:	4651      	mov	r1, sl
   10ed6:	9111      	str	r1, [sp, #68]	; 0x44
   10ed8:	460f      	mov	r7, r1
   10eda:	f811 2b01 	ldrb.w	r2, [r1], #1
   10ede:	2a2d      	cmp	r2, #45	; 0x2d
   10ee0:	d85e      	bhi.n	10fa0 <_strtod_l+0xe8>
   10ee2:	a001      	add	r0, pc, #4	; (adr r0, 10ee8 <_strtod_l+0x30>)
   10ee4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   10ee8:	00011089 	.word	0x00011089
   10eec:	00010fa1 	.word	0x00010fa1
   10ef0:	00010fa1 	.word	0x00010fa1
   10ef4:	00010fa1 	.word	0x00010fa1
   10ef8:	00010fa1 	.word	0x00010fa1
   10efc:	00010fa1 	.word	0x00010fa1
   10f00:	00010fa1 	.word	0x00010fa1
   10f04:	00010fa1 	.word	0x00010fa1
   10f08:	00010fa1 	.word	0x00010fa1
   10f0c:	00010ed7 	.word	0x00010ed7
   10f10:	00010ed7 	.word	0x00010ed7
   10f14:	00010ed7 	.word	0x00010ed7
   10f18:	00010ed7 	.word	0x00010ed7
   10f1c:	00010ed7 	.word	0x00010ed7
   10f20:	00010fa1 	.word	0x00010fa1
   10f24:	00010fa1 	.word	0x00010fa1
   10f28:	00010fa1 	.word	0x00010fa1
   10f2c:	00010fa1 	.word	0x00010fa1
   10f30:	00010fa1 	.word	0x00010fa1
   10f34:	00010fa1 	.word	0x00010fa1
   10f38:	00010fa1 	.word	0x00010fa1
   10f3c:	00010fa1 	.word	0x00010fa1
   10f40:	00010fa1 	.word	0x00010fa1
   10f44:	00010fa1 	.word	0x00010fa1
   10f48:	00010fa1 	.word	0x00010fa1
   10f4c:	00010fa1 	.word	0x00010fa1
   10f50:	00010fa1 	.word	0x00010fa1
   10f54:	00010fa1 	.word	0x00010fa1
   10f58:	00010fa1 	.word	0x00010fa1
   10f5c:	00010fa1 	.word	0x00010fa1
   10f60:	00010fa1 	.word	0x00010fa1
   10f64:	00010fa1 	.word	0x00010fa1
   10f68:	00010ed7 	.word	0x00010ed7
   10f6c:	00010fa1 	.word	0x00010fa1
   10f70:	00010fa1 	.word	0x00010fa1
   10f74:	00010fa1 	.word	0x00010fa1
   10f78:	00010fa1 	.word	0x00010fa1
   10f7c:	00010fa1 	.word	0x00010fa1
   10f80:	00010fa1 	.word	0x00010fa1
   10f84:	00010fa1 	.word	0x00010fa1
   10f88:	00010fa1 	.word	0x00010fa1
   10f8c:	00010fa1 	.word	0x00010fa1
   10f90:	00010fa1 	.word	0x00010fa1
   10f94:	000116c3 	.word	0x000116c3
   10f98:	00010fa1 	.word	0x00010fa1
   10f9c:	000116af 	.word	0x000116af
   10fa0:	2100      	movs	r1, #0
   10fa2:	9109      	str	r1, [sp, #36]	; 0x24
   10fa4:	2a30      	cmp	r2, #48	; 0x30
   10fa6:	d07d      	beq.n	110a4 <_strtod_l+0x1ec>
   10fa8:	2300      	movs	r3, #0
   10faa:	9308      	str	r3, [sp, #32]
   10fac:	2a2f      	cmp	r2, #47	; 0x2f
   10fae:	4614      	mov	r4, r2
   10fb0:	f240 84cd 	bls.w	1194e <_strtod_l+0xa96>
   10fb4:	f04f 0900 	mov.w	r9, #0
   10fb8:	4638      	mov	r0, r7
   10fba:	464e      	mov	r6, r9
   10fbc:	464d      	mov	r5, r9
   10fbe:	e012      	b.n	10fe6 <_strtod_l+0x12e>
   10fc0:	3001      	adds	r0, #1
   10fc2:	2d08      	cmp	r5, #8
   10fc4:	9011      	str	r0, [sp, #68]	; 0x44
   10fc6:	bfc8      	it	gt
   10fc8:	eb09 0989 	addgt.w	r9, r9, r9, lsl #2
   10fcc:	7804      	ldrb	r4, [r0, #0]
   10fce:	bfc6      	itte	gt
   10fd0:	eb02 0249 	addgt.w	r2, r2, r9, lsl #1
   10fd4:	f1a2 0930 	subgt.w	r9, r2, #48	; 0x30
   10fd8:	f1a3 0630 	suble.w	r6, r3, #48	; 0x30
   10fdc:	2c2f      	cmp	r4, #47	; 0x2f
   10fde:	f105 0501 	add.w	r5, r5, #1
   10fe2:	4622      	mov	r2, r4
   10fe4:	dd6f      	ble.n	110c6 <_strtod_l+0x20e>
   10fe6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   10fea:	2c39      	cmp	r4, #57	; 0x39
   10fec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   10ff0:	dde6      	ble.n	10fc0 <_strtod_l+0x108>
   10ff2:	499f      	ldr	r1, [pc, #636]	; (11270 <_strtod_l+0x3b8>)
   10ff4:	2201      	movs	r2, #1
   10ff6:	f001 fac3 	bl	12580 <strncmp>
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d137      	bne.n	1106e <_strtod_l+0x1b6>
   10ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11000:	461a      	mov	r2, r3
   11002:	3301      	adds	r3, #1
   11004:	9311      	str	r3, [sp, #68]	; 0x44
   11006:	7854      	ldrb	r4, [r2, #1]
   11008:	2d00      	cmp	r5, #0
   1100a:	f040 8543 	bne.w	11a94 <_strtod_l+0xbdc>
   1100e:	2c30      	cmp	r4, #48	; 0x30
   11010:	f040 8524 	bne.w	11a5c <_strtod_l+0xba4>
   11014:	f1c3 0201 	rsb	r2, r3, #1
   11018:	1898      	adds	r0, r3, r2
   1101a:	3301      	adds	r3, #1
   1101c:	9311      	str	r3, [sp, #68]	; 0x44
   1101e:	781c      	ldrb	r4, [r3, #0]
   11020:	2c30      	cmp	r4, #48	; 0x30
   11022:	d0f9      	beq.n	11018 <_strtod_l+0x160>
   11024:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   11028:	2b08      	cmp	r3, #8
   1102a:	f200 8301 	bhi.w	11630 <_strtod_l+0x778>
   1102e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11030:	1c43      	adds	r3, r0, #1
   11032:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   11036:	930b      	str	r3, [sp, #44]	; 0x2c
   11038:	2501      	movs	r5, #1
   1103a:	46bc      	mov	ip, r7
   1103c:	f04f 0e00 	mov.w	lr, #0
   11040:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   11044:	eb0b 0646 	add.w	r6, fp, r6, lsl #1
   11048:	2000      	movs	r0, #0
   1104a:	f10c 0301 	add.w	r3, ip, #1
   1104e:	9311      	str	r3, [sp, #68]	; 0x44
   11050:	f89c 4001 	ldrb.w	r4, [ip, #1]
   11054:	f1a4 0130 	sub.w	r1, r4, #48	; 0x30
   11058:	2909      	cmp	r1, #9
   1105a:	f200 82bb 	bhi.w	115d4 <_strtod_l+0x71c>
   1105e:	3001      	adds	r0, #1
   11060:	468b      	mov	fp, r1
   11062:	2900      	cmp	r1, #0
   11064:	f040 844f 	bne.w	11906 <_strtod_l+0xa4e>
   11068:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1106c:	e7ed      	b.n	1104a <_strtod_l+0x192>
   1106e:	2000      	movs	r0, #0
   11070:	2c65      	cmp	r4, #101	; 0x65
   11072:	46ae      	mov	lr, r5
   11074:	900b      	str	r0, [sp, #44]	; 0x2c
   11076:	4684      	mov	ip, r0
   11078:	d001      	beq.n	1107e <_strtod_l+0x1c6>
   1107a:	2c45      	cmp	r4, #69	; 0x45
   1107c:	d130      	bne.n	110e0 <_strtod_l+0x228>
   1107e:	2d00      	cmp	r5, #0
   11080:	d16b      	bne.n	1115a <_strtod_l+0x2a2>
   11082:	9b08      	ldr	r3, [sp, #32]
   11084:	4303      	orrs	r3, r0
   11086:	d167      	bne.n	11158 <_strtod_l+0x2a0>
   11088:	9b07      	ldr	r3, [sp, #28]
   1108a:	ed9f 8b77 	vldr	d8, [pc, #476]	; 11268 <_strtod_l+0x3b0>
   1108e:	b113      	cbz	r3, 11096 <_strtod_l+0x1de>
   11090:	9b07      	ldr	r3, [sp, #28]
   11092:	f8c3 a000 	str.w	sl, [r3]
   11096:	eeb0 0b48 	vmov.f64	d0, d8
   1109a:	b017      	add	sp, #92	; 0x5c
   1109c:	ecbd 8b10 	vpop	{d8-d15}
   110a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110a4:	787a      	ldrb	r2, [r7, #1]
   110a6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   110aa:	2a58      	cmp	r2, #88	; 0x58
   110ac:	f000 840c 	beq.w	118c8 <_strtod_l+0xa10>
   110b0:	3701      	adds	r7, #1
   110b2:	9711      	str	r7, [sp, #68]	; 0x44
   110b4:	783a      	ldrb	r2, [r7, #0]
   110b6:	2a30      	cmp	r2, #48	; 0x30
   110b8:	d0fa      	beq.n	110b0 <_strtod_l+0x1f8>
   110ba:	2a00      	cmp	r2, #0
   110bc:	f000 80b7 	beq.w	1122e <_strtod_l+0x376>
   110c0:	2301      	movs	r3, #1
   110c2:	9308      	str	r3, [sp, #32]
   110c4:	e772      	b.n	10fac <_strtod_l+0xf4>
   110c6:	496a      	ldr	r1, [pc, #424]	; (11270 <_strtod_l+0x3b8>)
   110c8:	2201      	movs	r2, #1
   110ca:	f001 fa59 	bl	12580 <strncmp>
   110ce:	2800      	cmp	r0, #0
   110d0:	f000 80c0 	beq.w	11254 <_strtod_l+0x39c>
   110d4:	46ae      	mov	lr, r5
   110d6:	f04f 0c00 	mov.w	ip, #0
   110da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   110de:	4660      	mov	r0, ip
   110e0:	f04f 0b00 	mov.w	fp, #0
   110e4:	2d00      	cmp	r5, #0
   110e6:	d07e      	beq.n	111e6 <_strtod_l+0x32e>
   110e8:	ee07 6a90 	vmov	s15, r6
   110ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   110ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
   110f2:	ebab 0303 	sub.w	r3, fp, r3
   110f6:	f1be 0f00 	cmp.w	lr, #0
   110fa:	bf08      	it	eq
   110fc:	46ae      	moveq	lr, r5
   110fe:	2d10      	cmp	r5, #16
   11100:	930a      	str	r3, [sp, #40]	; 0x28
   11102:	462b      	mov	r3, r5
   11104:	bfa8      	it	ge
   11106:	2310      	movge	r3, #16
   11108:	2d09      	cmp	r5, #9
   1110a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1110e:	dd0c      	ble.n	1112a <_strtod_l+0x272>
   11110:	4a58      	ldr	r2, [pc, #352]	; (11274 <_strtod_l+0x3bc>)
   11112:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11116:	ed12 5b12 	vldr	d5, [r2, #-72]	; 0xffffffb8
   1111a:	ee06 9a90 	vmov	s13, r9
   1111e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
   11122:	eea7 6b05 	vfma.f64	d6, d7, d5
   11126:	ed8d 6b04 	vstr	d6, [sp, #16]
   1112a:	2d0f      	cmp	r5, #15
   1112c:	f300 80a8 	bgt.w	11280 <_strtod_l+0x3c8>
   11130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11132:	2a00      	cmp	r2, #0
   11134:	f000 83e4 	beq.w	11900 <_strtod_l+0xa48>
   11138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1113a:	f340 833c 	ble.w	117b6 <_strtod_l+0x8fe>
   1113e:	2a16      	cmp	r2, #22
   11140:	f340 8498 	ble.w	11a74 <_strtod_l+0xbbc>
   11144:	990a      	ldr	r1, [sp, #40]	; 0x28
   11146:	f1c5 0225 	rsb	r2, r5, #37	; 0x25
   1114a:	428a      	cmp	r2, r1
   1114c:	f280 84a6 	bge.w	11a9c <_strtod_l+0xbe4>
   11150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11152:	1aeb      	subs	r3, r5, r3
   11154:	4413      	add	r3, r2
   11156:	e099      	b.n	1128c <_strtod_l+0x3d4>
   11158:	2500      	movs	r5, #0
   1115a:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   1115e:	f10a 0301 	add.w	r3, sl, #1
   11162:	9311      	str	r3, [sp, #68]	; 0x44
   11164:	f89a 4001 	ldrb.w	r4, [sl, #1]
   11168:	2c2b      	cmp	r4, #43	; 0x2b
   1116a:	f000 825e 	beq.w	1162a <_strtod_l+0x772>
   1116e:	2c2d      	cmp	r4, #45	; 0x2d
   11170:	f000 81f7 	beq.w	11562 <_strtod_l+0x6aa>
   11174:	2300      	movs	r3, #0
   11176:	930a      	str	r3, [sp, #40]	; 0x28
   11178:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1117c:	2b09      	cmp	r3, #9
   1117e:	f200 81eb 	bhi.w	11558 <_strtod_l+0x6a0>
   11182:	2c30      	cmp	r4, #48	; 0x30
   11184:	d105      	bne.n	11192 <_strtod_l+0x2da>
   11186:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11188:	3301      	adds	r3, #1
   1118a:	9311      	str	r3, [sp, #68]	; 0x44
   1118c:	781c      	ldrb	r4, [r3, #0]
   1118e:	2c30      	cmp	r4, #48	; 0x30
   11190:	d0fa      	beq.n	11188 <_strtod_l+0x2d0>
   11192:	f1a4 0331 	sub.w	r3, r4, #49	; 0x31
   11196:	2b08      	cmp	r3, #8
   11198:	d8a2      	bhi.n	110e0 <_strtod_l+0x228>
   1119a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1119c:	920c      	str	r2, [sp, #48]	; 0x30
   1119e:	1c53      	adds	r3, r2, #1
   111a0:	9311      	str	r3, [sp, #68]	; 0x44
   111a2:	f1a4 0b30 	sub.w	fp, r4, #48	; 0x30
   111a6:	7854      	ldrb	r4, [r2, #1]
   111a8:	2c2f      	cmp	r4, #47	; 0x2f
   111aa:	dc07      	bgt.n	111bc <_strtod_l+0x304>
   111ac:	e3de      	b.n	1196c <_strtod_l+0xab4>
   111ae:	3301      	adds	r3, #1
   111b0:	9311      	str	r3, [sp, #68]	; 0x44
   111b2:	784c      	ldrb	r4, [r1, #1]
   111b4:	2c2f      	cmp	r4, #47	; 0x2f
   111b6:	f1a2 0b30 	sub.w	fp, r2, #48	; 0x30
   111ba:	dd06      	ble.n	111ca <_strtod_l+0x312>
   111bc:	eb0b 028b 	add.w	r2, fp, fp, lsl #2
   111c0:	2c39      	cmp	r4, #57	; 0x39
   111c2:	4619      	mov	r1, r3
   111c4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   111c8:	ddf1      	ble.n	111ae <_strtod_l+0x2f6>
   111ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   111cc:	1a9b      	subs	r3, r3, r2
   111ce:	2b08      	cmp	r3, #8
   111d0:	f340 83cc 	ble.w	1196c <_strtod_l+0xab4>
   111d4:	f644 6b1f 	movw	fp, #19999	; 0x4e1f
   111d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   111da:	2b00      	cmp	r3, #0
   111dc:	d082      	beq.n	110e4 <_strtod_l+0x22c>
   111de:	f1cb 0b00 	rsb	fp, fp, #0
   111e2:	2d00      	cmp	r5, #0
   111e4:	d180      	bne.n	110e8 <_strtod_l+0x230>
   111e6:	9b08      	ldr	r3, [sp, #32]
   111e8:	4303      	orrs	r3, r0
   111ea:	d120      	bne.n	1122e <_strtod_l+0x376>
   111ec:	f1bc 0f00 	cmp.w	ip, #0
   111f0:	f47f af4a 	bne.w	11088 <_strtod_l+0x1d0>
   111f4:	2c69      	cmp	r4, #105	; 0x69
   111f6:	f000 83cf 	beq.w	11998 <_strtod_l+0xae0>
   111fa:	f300 82f3 	bgt.w	117e4 <_strtod_l+0x92c>
   111fe:	2c49      	cmp	r4, #73	; 0x49
   11200:	f000 83ca 	beq.w	11998 <_strtod_l+0xae0>
   11204:	2c4e      	cmp	r4, #78	; 0x4e
   11206:	f47f af3f 	bne.w	11088 <_strtod_l+0x1d0>
   1120a:	491b      	ldr	r1, [pc, #108]	; (11278 <_strtod_l+0x3c0>)
   1120c:	a811      	add	r0, sp, #68	; 0x44
   1120e:	f002 fa2b 	bl	13668 <__match>
   11212:	2800      	cmp	r0, #0
   11214:	f43f af38 	beq.w	11088 <_strtod_l+0x1d0>
   11218:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1121a:	781b      	ldrb	r3, [r3, #0]
   1121c:	2b28      	cmp	r3, #40	; 0x28
   1121e:	f000 84f2 	beq.w	11c06 <_strtod_l+0xd4e>
   11222:	4816      	ldr	r0, [pc, #88]	; (1127c <_strtod_l+0x3c4>)
   11224:	f001 fd5c 	bl	12ce0 <nan>
   11228:	eeb0 8b40 	vmov.f64	d8, d0
   1122c:	e001      	b.n	11232 <_strtod_l+0x37a>
   1122e:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 11268 <_strtod_l+0x3b0>
   11232:	9a07      	ldr	r2, [sp, #28]
   11234:	b10a      	cbz	r2, 1123a <_strtod_l+0x382>
   11236:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11238:	6013      	str	r3, [r2, #0]
   1123a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1123c:	2b00      	cmp	r3, #0
   1123e:	f43f af2a 	beq.w	11096 <_strtod_l+0x1de>
   11242:	eeb1 8b48 	vneg.f64	d8, d8
   11246:	eeb0 0b48 	vmov.f64	d0, d8
   1124a:	b017      	add	sp, #92	; 0x5c
   1124c:	ecbd 8b10 	vpop	{d8-d15}
   11250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11254:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11256:	900b      	str	r0, [sp, #44]	; 0x2c
   11258:	1c5a      	adds	r2, r3, #1
   1125a:	9211      	str	r2, [sp, #68]	; 0x44
   1125c:	785c      	ldrb	r4, [r3, #1]
   1125e:	46ae      	mov	lr, r5
   11260:	e6f8      	b.n	11054 <_strtod_l+0x19c>
   11262:	bf00      	nop
   11264:	f3af 8000 	nop.w
	...
   11270:	20008300 	.word	0x20008300
   11274:	20000328 	.word	0x20000328
   11278:	200011e4 	.word	0x200011e4
   1127c:	20000560 	.word	0x20000560
   11280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11282:	1aeb      	subs	r3, r5, r3
   11284:	4413      	add	r3, r2
   11286:	2b00      	cmp	r3, #0
   11288:	f340 82b0 	ble.w	117ec <_strtod_l+0x934>
   1128c:	f013 010f 	ands.w	r1, r3, #15
   11290:	d00a      	beq.n	112a8 <_strtod_l+0x3f0>
   11292:	4ac3      	ldr	r2, [pc, #780]	; (115a0 <_strtod_l+0x6e8>)
   11294:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   11298:	ed9d 6b04 	vldr	d6, [sp, #16]
   1129c:	ed92 7b00 	vldr	d7, [r2]
   112a0:	ee27 7b06 	vmul.f64	d7, d7, d6
   112a4:	ed8d 7b04 	vstr	d7, [sp, #16]
   112a8:	f033 020f 	bics.w	r2, r3, #15
   112ac:	f040 8238 	bne.w	11720 <_strtod_l+0x868>
   112b0:	2300      	movs	r3, #0
   112b2:	9308      	str	r3, [sp, #32]
   112b4:	9600      	str	r6, [sp, #0]
   112b6:	462b      	mov	r3, r5
   112b8:	4672      	mov	r2, lr
   112ba:	4639      	mov	r1, r7
   112bc:	4640      	mov	r0, r8
   112be:	f002 fb5f 	bl	13980 <__s2b>
   112c2:	4681      	mov	r9, r0
   112c4:	2800      	cmp	r0, #0
   112c6:	f000 82e1 	beq.w	1188c <_strtod_l+0x9d4>
   112ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   112cc:	eba3 0b0b 	sub.w	fp, r3, fp
   112d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   112d2:	ed9f eba9 	vldr	d14, [pc, #676]	; 11578 <_strtod_l+0x6c0>
   112d6:	2b00      	cmp	r3, #0
   112d8:	ed9f cba9 	vldr	d12, [pc, #676]	; 11580 <_strtod_l+0x6c8>
   112dc:	ed9f dbaa 	vldr	d13, [pc, #680]	; 11588 <_strtod_l+0x6d0>
   112e0:	ed9f bbab 	vldr	d11, [pc, #684]	; 11590 <_strtod_l+0x6d8>
   112e4:	bfb4      	ite	lt
   112e6:	465a      	movlt	r2, fp
   112e8:	2200      	movge	r2, #0
   112ea:	f04f 0a00 	mov.w	sl, #0
   112ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   112f2:	920b      	str	r2, [sp, #44]	; 0x2c
   112f4:	930c      	str	r3, [sp, #48]	; 0x30
   112f6:	4654      	mov	r4, sl
   112f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   112fc:	4640      	mov	r0, r8
   112fe:	f002 fabd 	bl	1387c <_Balloc>
   11302:	4606      	mov	r6, r0
   11304:	2800      	cmp	r0, #0
   11306:	f000 810e 	beq.w	11526 <_strtod_l+0x66e>
   1130a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1130e:	ed9d 8b04 	vldr	d8, [sp, #16]
   11312:	3202      	adds	r2, #2
   11314:	0092      	lsls	r2, r2, #2
   11316:	f109 010c 	add.w	r1, r9, #12
   1131a:	300c      	adds	r0, #12
   1131c:	f7fc fffa 	bl	e314 <memcpy>
   11320:	eeb0 0b48 	vmov.f64	d0, d8
   11324:	aa14      	add	r2, sp, #80	; 0x50
   11326:	a913      	add	r1, sp, #76	; 0x4c
   11328:	4640      	mov	r0, r8
   1132a:	f002 fee5 	bl	140f8 <__d2b>
   1132e:	9012      	str	r0, [sp, #72]	; 0x48
   11330:	2800      	cmp	r0, #0
   11332:	f000 80e4 	beq.w	114fe <_strtod_l+0x646>
   11336:	2101      	movs	r1, #1
   11338:	4640      	mov	r0, r8
   1133a:	f002 fbc9 	bl	13ad0 <__i2b>
   1133e:	4604      	mov	r4, r0
   11340:	2800      	cmp	r0, #0
   11342:	f000 80f0 	beq.w	11526 <_strtod_l+0x66e>
   11346:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11348:	2a00      	cmp	r2, #0
   1134a:	f2c0 80de 	blt.w	1150a <_strtod_l+0x652>
   1134e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11350:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   11352:	eb02 0b03 	add.w	fp, r2, r3
   11356:	9b08      	ldr	r3, [sp, #32]
   11358:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1135a:	1ad2      	subs	r2, r2, r3
   1135c:	442a      	add	r2, r5
   1135e:	4b91      	ldr	r3, [pc, #580]	; (115a4 <_strtod_l+0x6ec>)
   11360:	3a01      	subs	r2, #1
   11362:	429a      	cmp	r2, r3
   11364:	f1c5 0536 	rsb	r5, r5, #54	; 0x36
   11368:	f280 8098 	bge.w	1149c <_strtod_l+0x5e4>
   1136c:	1a99      	subs	r1, r3, r2
   1136e:	291f      	cmp	r1, #31
   11370:	eba5 0501 	sub.w	r5, r5, r1
   11374:	f300 80e3 	bgt.w	1153e <_strtod_l+0x686>
   11378:	2201      	movs	r2, #1
   1137a:	fa02 f301 	lsl.w	r3, r2, r1
   1137e:	930d      	str	r3, [sp, #52]	; 0x34
   11380:	2300      	movs	r3, #0
   11382:	930e      	str	r3, [sp, #56]	; 0x38
   11384:	442f      	add	r7, r5
   11386:	9b08      	ldr	r3, [sp, #32]
   11388:	445d      	add	r5, fp
   1138a:	45ab      	cmp	fp, r5
   1138c:	465a      	mov	r2, fp
   1138e:	441f      	add	r7, r3
   11390:	bfa8      	it	ge
   11392:	462a      	movge	r2, r5
   11394:	42ba      	cmp	r2, r7
   11396:	bfa8      	it	ge
   11398:	463a      	movge	r2, r7
   1139a:	2a00      	cmp	r2, #0
   1139c:	dd03      	ble.n	113a6 <_strtod_l+0x4ee>
   1139e:	1aad      	subs	r5, r5, r2
   113a0:	1abf      	subs	r7, r7, r2
   113a2:	ebab 0b02 	sub.w	fp, fp, r2
   113a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113a8:	2b00      	cmp	r3, #0
   113aa:	f300 8088 	bgt.w	114be <_strtod_l+0x606>
   113ae:	2d00      	cmp	r5, #0
   113b0:	f300 809c 	bgt.w	114ec <_strtod_l+0x634>
   113b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   113b6:	2b00      	cmp	r3, #0
   113b8:	f300 80b7 	bgt.w	1152a <_strtod_l+0x672>
   113bc:	2f00      	cmp	r7, #0
   113be:	f300 80a9 	bgt.w	11514 <_strtod_l+0x65c>
   113c2:	f1bb 0f00 	cmp.w	fp, #0
   113c6:	dd08      	ble.n	113da <_strtod_l+0x522>
   113c8:	4621      	mov	r1, r4
   113ca:	465a      	mov	r2, fp
   113cc:	4640      	mov	r0, r8
   113ce:	f002 fcbb 	bl	13d48 <__lshift>
   113d2:	4604      	mov	r4, r0
   113d4:	2800      	cmp	r0, #0
   113d6:	f000 80a6 	beq.w	11526 <_strtod_l+0x66e>
   113da:	9912      	ldr	r1, [sp, #72]	; 0x48
   113dc:	4632      	mov	r2, r6
   113de:	4640      	mov	r0, r8
   113e0:	f002 fd4c 	bl	13e7c <__mdiff>
   113e4:	4682      	mov	sl, r0
   113e6:	2800      	cmp	r0, #0
   113e8:	f000 809d 	beq.w	11526 <_strtod_l+0x66e>
   113ec:	2300      	movs	r3, #0
   113ee:	68c5      	ldr	r5, [r0, #12]
   113f0:	60c3      	str	r3, [r0, #12]
   113f2:	4621      	mov	r1, r4
   113f4:	f002 fd20 	bl	13e38 <__mcmp>
   113f8:	2800      	cmp	r0, #0
   113fa:	f2c0 83c7 	blt.w	11b8c <_strtod_l+0xcd4>
   113fe:	f000 8361 	beq.w	11ac4 <_strtod_l+0xc0c>
   11402:	4621      	mov	r1, r4
   11404:	4650      	mov	r0, sl
   11406:	f002 fee1 	bl	141cc <__ratio>
   1140a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
   1140e:	eeb4 0bc7 	vcmpe.f64	d0, d7
   11412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11416:	d846      	bhi.n	114a6 <_strtod_l+0x5ee>
   11418:	2d00      	cmp	r5, #0
   1141a:	f000 80cb 	beq.w	115b4 <_strtod_l+0x6fc>
   1141e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   11422:	9805      	ldr	r0, [sp, #20]
   11424:	4b60      	ldr	r3, [pc, #384]	; (115a8 <_strtod_l+0x6f0>)
   11426:	2200      	movs	r2, #0
   11428:	4960      	ldr	r1, [pc, #384]	; (115ac <_strtod_l+0x6f4>)
   1142a:	f8df c184 	ldr.w	ip, [pc, #388]	; 115b0 <_strtod_l+0x6f8>
   1142e:	ea00 0701 	and.w	r7, r0, r1
   11432:	4567      	cmp	r7, ip
   11434:	f000 80d4 	beq.w	115e0 <_strtod_l+0x728>
   11438:	9908      	ldr	r1, [sp, #32]
   1143a:	b159      	cbz	r1, 11454 <_strtod_l+0x59c>
   1143c:	f1b7 6fd4 	cmp.w	r7, #111149056	; 0x6a00000
   11440:	d808      	bhi.n	11454 <_strtod_l+0x59c>
   11442:	eeb4 9bcb 	vcmpe.f64	d9, d11
   11446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1144a:	f240 8156 	bls.w	116fa <_strtod_l+0x842>
   1144e:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
   11452:	1bcb      	subs	r3, r1, r7
   11454:	eeb0 0b48 	vmov.f64	d0, d8
   11458:	ec43 2b1a 	vmov	d10, r2, r3
   1145c:	f002 fdb8 	bl	13fd0 <__ulp>
   11460:	eeaa 8b00 	vfma.f64	d8, d10, d0
   11464:	ed8d 8b04 	vstr	d8, [sp, #16]
   11468:	ee18 3a90 	vmov	r3, s17
   1146c:	9a08      	ldr	r2, [sp, #32]
   1146e:	b922      	cbnz	r2, 1147a <_strtod_l+0x5c2>
   11470:	4a4e      	ldr	r2, [pc, #312]	; (115ac <_strtod_l+0x6f4>)
   11472:	401a      	ands	r2, r3
   11474:	4297      	cmp	r7, r2
   11476:	f000 80e4 	beq.w	11642 <_strtod_l+0x78a>
   1147a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1147c:	4640      	mov	r0, r8
   1147e:	f002 fa23 	bl	138c8 <_Bfree>
   11482:	4631      	mov	r1, r6
   11484:	4640      	mov	r0, r8
   11486:	f002 fa1f 	bl	138c8 <_Bfree>
   1148a:	4621      	mov	r1, r4
   1148c:	4640      	mov	r0, r8
   1148e:	f002 fa1b 	bl	138c8 <_Bfree>
   11492:	4651      	mov	r1, sl
   11494:	4640      	mov	r0, r8
   11496:	f002 fa17 	bl	138c8 <_Bfree>
   1149a:	e72d      	b.n	112f8 <_strtod_l+0x440>
   1149c:	2301      	movs	r3, #1
   1149e:	2100      	movs	r1, #0
   114a0:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
   114a4:	e76e      	b.n	11384 <_strtod_l+0x4cc>
   114a6:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   114aa:	ee20 9b09 	vmul.f64	d9, d0, d9
   114ae:	2d00      	cmp	r5, #0
   114b0:	d15f      	bne.n	11572 <_strtod_l+0x6ba>
   114b2:	eeb1 7b49 	vneg.f64	d7, d9
   114b6:	9805      	ldr	r0, [sp, #20]
   114b8:	ec53 2b17 	vmov	r2, r3, d7
   114bc:	e7b4      	b.n	11428 <_strtod_l+0x570>
   114be:	4621      	mov	r1, r4
   114c0:	461a      	mov	r2, r3
   114c2:	4640      	mov	r0, r8
   114c4:	f002 fbe0 	bl	13c88 <__pow5mult>
   114c8:	4604      	mov	r4, r0
   114ca:	b360      	cbz	r0, 11526 <_strtod_l+0x66e>
   114cc:	4601      	mov	r1, r0
   114ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   114d0:	4640      	mov	r0, r8
   114d2:	f002 fb2b 	bl	13b2c <__multiply>
   114d6:	b330      	cbz	r0, 11526 <_strtod_l+0x66e>
   114d8:	900f      	str	r0, [sp, #60]	; 0x3c
   114da:	9912      	ldr	r1, [sp, #72]	; 0x48
   114dc:	4640      	mov	r0, r8
   114de:	f002 f9f3 	bl	138c8 <_Bfree>
   114e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   114e4:	9212      	str	r2, [sp, #72]	; 0x48
   114e6:	2d00      	cmp	r5, #0
   114e8:	f77f af64 	ble.w	113b4 <_strtod_l+0x4fc>
   114ec:	9912      	ldr	r1, [sp, #72]	; 0x48
   114ee:	462a      	mov	r2, r5
   114f0:	4640      	mov	r0, r8
   114f2:	f002 fc29 	bl	13d48 <__lshift>
   114f6:	9012      	str	r0, [sp, #72]	; 0x48
   114f8:	2800      	cmp	r0, #0
   114fa:	f47f af5b 	bne.w	113b4 <_strtod_l+0x4fc>
   114fe:	2322      	movs	r3, #34	; 0x22
   11500:	ed9f 8b25 	vldr	d8, [pc, #148]	; 11598 <_strtod_l+0x6e0>
   11504:	f8c8 3000 	str.w	r3, [r8]
   11508:	e0bc      	b.n	11684 <_strtod_l+0x7cc>
   1150a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1150c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   11510:	1a9f      	subs	r7, r3, r2
   11512:	e720      	b.n	11356 <_strtod_l+0x49e>
   11514:	4631      	mov	r1, r6
   11516:	463a      	mov	r2, r7
   11518:	4640      	mov	r0, r8
   1151a:	f002 fc15 	bl	13d48 <__lshift>
   1151e:	4606      	mov	r6, r0
   11520:	2800      	cmp	r0, #0
   11522:	f47f af4e 	bne.w	113c2 <_strtod_l+0x50a>
   11526:	9812      	ldr	r0, [sp, #72]	; 0x48
   11528:	e7e9      	b.n	114fe <_strtod_l+0x646>
   1152a:	4631      	mov	r1, r6
   1152c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1152e:	4640      	mov	r0, r8
   11530:	f002 fbaa 	bl	13c88 <__pow5mult>
   11534:	4606      	mov	r6, r0
   11536:	2800      	cmp	r0, #0
   11538:	f47f af40 	bne.w	113bc <_strtod_l+0x504>
   1153c:	e7f3      	b.n	11526 <_strtod_l+0x66e>
   1153e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
   11542:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   11546:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
   1154a:	2101      	movs	r1, #1
   1154c:	32e2      	adds	r2, #226	; 0xe2
   1154e:	fa01 f302 	lsl.w	r3, r1, r2
   11552:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
   11556:	e715      	b.n	11384 <_strtod_l+0x4cc>
   11558:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
   1155c:	f04f 0b00 	mov.w	fp, #0
   11560:	e5c0      	b.n	110e4 <_strtod_l+0x22c>
   11562:	2301      	movs	r3, #1
   11564:	930a      	str	r3, [sp, #40]	; 0x28
   11566:	f10a 0302 	add.w	r3, sl, #2
   1156a:	9311      	str	r3, [sp, #68]	; 0x44
   1156c:	f89a 4002 	ldrb.w	r4, [sl, #2]
   11570:	e602      	b.n	11178 <_strtod_l+0x2c0>
   11572:	eeb0 7b49 	vmov.f64	d7, d9
   11576:	e79e      	b.n	114b6 <_strtod_l+0x5fe>
   11578:	94a03595 	.word	0x94a03595
   1157c:	3fcfffff 	.word	0x3fcfffff
   11580:	94a03595 	.word	0x94a03595
   11584:	3fdfffff 	.word	0x3fdfffff
   11588:	35afe535 	.word	0x35afe535
   1158c:	3fe00000 	.word	0x3fe00000
   11590:	ffc00000 	.word	0xffc00000
   11594:	41dfffff 	.word	0x41dfffff
   11598:	00000000 	.word	0x00000000
   1159c:	7ff00000 	.word	0x7ff00000
   115a0:	20000328 	.word	0x20000328
   115a4:	fffffc02 	.word	0xfffffc02
   115a8:	3ff00000 	.word	0x3ff00000
   115ac:	7ff00000 	.word	0x7ff00000
   115b0:	7fe00000 	.word	0x7fe00000
   115b4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   115b8:	2900      	cmp	r1, #0
   115ba:	f000 8085 	beq.w	116c8 <_strtod_l+0x810>
   115be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   115c2:	2901      	cmp	r1, #1
   115c4:	f000 81d8 	beq.w	11978 <_strtod_l+0xac0>
   115c8:	4610      	mov	r0, r2
   115ca:	4bb7      	ldr	r3, [pc, #732]	; (118a8 <_strtod_l+0x9f0>)
   115cc:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
   115d0:	2200      	movs	r2, #0
   115d2:	e729      	b.n	11428 <_strtod_l+0x570>
   115d4:	2c65      	cmp	r4, #101	; 0x65
   115d6:	f04f 0c01 	mov.w	ip, #1
   115da:	f43f adbe 	beq.w	1115a <_strtod_l+0x2a2>
   115de:	e54c      	b.n	1107a <_strtod_l+0x1c2>
   115e0:	ec43 2b1a 	vmov	d10, r2, r3
   115e4:	f1a0 7354 	sub.w	r3, r0, #55574528	; 0x3500000
   115e8:	9305      	str	r3, [sp, #20]
   115ea:	ed9d fb04 	vldr	d15, [sp, #16]
   115ee:	eeb0 0b4f 	vmov.f64	d0, d15
   115f2:	f002 fced 	bl	13fd0 <__ulp>
   115f6:	49ad      	ldr	r1, [pc, #692]	; (118ac <_strtod_l+0x9f4>)
   115f8:	eeaa fb00 	vfma.f64	d15, d10, d0
   115fc:	ee1f 3a90 	vmov	r3, s31
   11600:	4aab      	ldr	r2, [pc, #684]	; (118b0 <_strtod_l+0x9f8>)
   11602:	4019      	ands	r1, r3
   11604:	4291      	cmp	r1, r2
   11606:	ed8d fb04 	vstr	d15, [sp, #16]
   1160a:	d972      	bls.n	116f2 <_strtod_l+0x83a>
   1160c:	4ba9      	ldr	r3, [pc, #676]	; (118b4 <_strtod_l+0x9fc>)
   1160e:	ee18 2a90 	vmov	r2, s17
   11612:	429a      	cmp	r2, r3
   11614:	d103      	bne.n	1161e <_strtod_l+0x766>
   11616:	ee18 3a10 	vmov	r3, s16
   1161a:	3301      	adds	r3, #1
   1161c:	d083      	beq.n	11526 <_strtod_l+0x66e>
   1161e:	4aa5      	ldr	r2, [pc, #660]	; (118b4 <_strtod_l+0x9fc>)
   11620:	f04f 33ff 	mov.w	r3, #4294967295
   11624:	e9cd 3204 	strd	r3, r2, [sp, #16]
   11628:	e727      	b.n	1147a <_strtod_l+0x5c2>
   1162a:	2300      	movs	r3, #0
   1162c:	930a      	str	r3, [sp, #40]	; 0x28
   1162e:	e79a      	b.n	11566 <_strtod_l+0x6ae>
   11630:	2c65      	cmp	r4, #101	; 0x65
   11632:	f000 80d0 	beq.w	117d6 <_strtod_l+0x91e>
   11636:	2c45      	cmp	r4, #69	; 0x45
   11638:	f000 80cd 	beq.w	117d6 <_strtod_l+0x91e>
   1163c:	f04f 0c01 	mov.w	ip, #1
   11640:	e5d1      	b.n	111e6 <_strtod_l+0x32e>
   11642:	ec51 0b19 	vmov	r0, r1, d9
   11646:	930d      	str	r3, [sp, #52]	; 0x34
   11648:	f009 fccc 	bl	1afe4 <__aeabi_d2lz>
   1164c:	f009 fc9c 	bl	1af88 <__aeabi_l2d>
   11650:	9b04      	ldr	r3, [sp, #16]
   11652:	431d      	orrs	r5, r3
   11654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11656:	ec41 0b17 	vmov	d7, r0, r1
   1165a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1165e:	431d      	orrs	r5, r3
   11660:	ee39 9b47 	vsub.f64	d9, d9, d7
   11664:	f000 80a0 	beq.w	117a8 <_strtod_l+0x8f0>
   11668:	eeb4 9bcc 	vcmpe.f64	d9, d12
   1166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11670:	d405      	bmi.n	1167e <_strtod_l+0x7c6>
   11672:	eeb4 9bcd 	vcmpe.f64	d9, d13
   11676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1167a:	f77f aefe 	ble.w	1147a <_strtod_l+0x5c2>
   1167e:	ed9d 8b04 	vldr	d8, [sp, #16]
   11682:	9812      	ldr	r0, [sp, #72]	; 0x48
   11684:	4601      	mov	r1, r0
   11686:	4640      	mov	r0, r8
   11688:	f002 f91e 	bl	138c8 <_Bfree>
   1168c:	4631      	mov	r1, r6
   1168e:	4640      	mov	r0, r8
   11690:	f002 f91a 	bl	138c8 <_Bfree>
   11694:	4621      	mov	r1, r4
   11696:	4640      	mov	r0, r8
   11698:	f002 f916 	bl	138c8 <_Bfree>
   1169c:	4649      	mov	r1, r9
   1169e:	4640      	mov	r0, r8
   116a0:	f002 f912 	bl	138c8 <_Bfree>
   116a4:	4651      	mov	r1, sl
   116a6:	4640      	mov	r0, r8
   116a8:	f002 f90e 	bl	138c8 <_Bfree>
   116ac:	e5c1      	b.n	11232 <_strtod_l+0x37a>
   116ae:	2201      	movs	r2, #1
   116b0:	9209      	str	r2, [sp, #36]	; 0x24
   116b2:	1c79      	adds	r1, r7, #1
   116b4:	9111      	str	r1, [sp, #68]	; 0x44
   116b6:	787a      	ldrb	r2, [r7, #1]
   116b8:	2a00      	cmp	r2, #0
   116ba:	f43f ace5 	beq.w	11088 <_strtod_l+0x1d0>
   116be:	460f      	mov	r7, r1
   116c0:	e470      	b.n	10fa4 <_strtod_l+0xec>
   116c2:	2200      	movs	r2, #0
   116c4:	9209      	str	r2, [sp, #36]	; 0x24
   116c6:	e7f4      	b.n	116b2 <_strtod_l+0x7fa>
   116c8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   116cc:	4610      	mov	r0, r2
   116ce:	2b00      	cmp	r3, #0
   116d0:	f47f af7b 	bne.w	115ca <_strtod_l+0x712>
   116d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   116d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
   116dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   116e0:	f100 81d3 	bmi.w	11a8a <_strtod_l+0xbd2>
   116e4:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   116e8:	ee20 9b09 	vmul.f64	d9, d0, d9
   116ec:	eeb1 7b49 	vneg.f64	d7, d9
   116f0:	e6e2      	b.n	114b8 <_strtod_l+0x600>
   116f2:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
   116f6:	9305      	str	r3, [sp, #20]
   116f8:	e6b8      	b.n	1146c <_strtod_l+0x5b4>
   116fa:	eebc 9bc9 	vcvt.u32.f64	s18, d9
   116fe:	ee19 3a10 	vmov	r3, s18
   11702:	2b01      	cmp	r3, #1
   11704:	bf38      	it	cc
   11706:	2301      	movcc	r3, #1
   11708:	ee09 3a10 	vmov	s18, r3
   1170c:	eeb8 9b49 	vcvt.f64.u32	d9, s18
   11710:	2d00      	cmp	r5, #0
   11712:	f040 813e 	bne.w	11992 <_strtod_l+0xada>
   11716:	eeb1 7b49 	vneg.f64	d7, d9
   1171a:	ec53 2b17 	vmov	r2, r3, d7
   1171e:	e696      	b.n	1144e <_strtod_l+0x596>
   11720:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   11724:	f300 80b2 	bgt.w	1188c <_strtod_l+0x9d4>
   11728:	2a10      	cmp	r2, #16
   1172a:	ea4f 1322 	mov.w	r3, r2, asr #4
   1172e:	f340 8286 	ble.w	11c3e <_strtod_l+0xd86>
   11732:	4c61      	ldr	r4, [pc, #388]	; (118b8 <_strtod_l+0xa00>)
   11734:	ed9d 7b04 	vldr	d7, [sp, #16]
   11738:	2000      	movs	r0, #0
   1173a:	4622      	mov	r2, r4
   1173c:	4601      	mov	r1, r0
   1173e:	f013 0f01 	tst.w	r3, #1
   11742:	f101 0101 	add.w	r1, r1, #1
   11746:	ea4f 0363 	mov.w	r3, r3, asr #1
   1174a:	d004      	beq.n	11756 <_strtod_l+0x89e>
   1174c:	ed92 6b00 	vldr	d6, [r2]
   11750:	2001      	movs	r0, #1
   11752:	ee27 7b06 	vmul.f64	d7, d7, d6
   11756:	2b01      	cmp	r3, #1
   11758:	f102 0208 	add.w	r2, r2, #8
   1175c:	d1ef      	bne.n	1173e <_strtod_l+0x886>
   1175e:	b108      	cbz	r0, 11764 <_strtod_l+0x8ac>
   11760:	ed8d 7b04 	vstr	d7, [sp, #16]
   11764:	9b05      	ldr	r3, [sp, #20]
   11766:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
   1176a:	9305      	str	r3, [sp, #20]
   1176c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
   11770:	ed9d 6b04 	vldr	d6, [sp, #16]
   11774:	ed94 7b00 	vldr	d7, [r4]
   11778:	4b4c      	ldr	r3, [pc, #304]	; (118ac <_strtod_l+0x9f4>)
   1177a:	ee27 7b06 	vmul.f64	d7, d7, d6
   1177e:	ee17 2a90 	vmov	r2, s15
   11782:	494e      	ldr	r1, [pc, #312]	; (118bc <_strtod_l+0xa04>)
   11784:	4013      	ands	r3, r2
   11786:	428b      	cmp	r3, r1
   11788:	ed8d 7b04 	vstr	d7, [sp, #16]
   1178c:	d87e      	bhi.n	1188c <_strtod_l+0x9d4>
   1178e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   11792:	428b      	cmp	r3, r1
   11794:	f240 81d6 	bls.w	11b44 <_strtod_l+0xc8c>
   11798:	4c46      	ldr	r4, [pc, #280]	; (118b4 <_strtod_l+0x9fc>)
   1179a:	f04f 33ff 	mov.w	r3, #4294967295
   1179e:	e9cd 3404 	strd	r3, r4, [sp, #16]
   117a2:	2300      	movs	r3, #0
   117a4:	9308      	str	r3, [sp, #32]
   117a6:	e585      	b.n	112b4 <_strtod_l+0x3fc>
   117a8:	eeb4 9bce 	vcmpe.f64	d9, d14
   117ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   117b0:	f57f ae63 	bpl.w	1147a <_strtod_l+0x5c2>
   117b4:	e763      	b.n	1167e <_strtod_l+0x7c6>
   117b6:	3216      	adds	r2, #22
   117b8:	f6ff ad62 	blt.w	11280 <_strtod_l+0x3c8>
   117bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   117be:	eba3 0b0b 	sub.w	fp, r3, fp
   117c2:	4b3f      	ldr	r3, [pc, #252]	; (118c0 <_strtod_l+0xa08>)
   117c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   117c8:	ed93 7b00 	vldr	d7, [r3]
   117cc:	ed9d 6b04 	vldr	d6, [sp, #16]
   117d0:	ee86 8b07 	vdiv.f64	d8, d6, d7
   117d4:	e52d      	b.n	11232 <_strtod_l+0x37a>
   117d6:	f04f 0e00 	mov.w	lr, #0
   117da:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   117de:	f04f 0c01 	mov.w	ip, #1
   117e2:	e44e      	b.n	11082 <_strtod_l+0x1ca>
   117e4:	2c6e      	cmp	r4, #110	; 0x6e
   117e6:	f43f ad10 	beq.w	1120a <_strtod_l+0x352>
   117ea:	e44d      	b.n	11088 <_strtod_l+0x1d0>
   117ec:	f43f ad60 	beq.w	112b0 <_strtod_l+0x3f8>
   117f0:	425b      	negs	r3, r3
   117f2:	f013 010f 	ands.w	r1, r3, #15
   117f6:	d00a      	beq.n	1180e <_strtod_l+0x956>
   117f8:	4a31      	ldr	r2, [pc, #196]	; (118c0 <_strtod_l+0xa08>)
   117fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   117fe:	ed9d 6b04 	vldr	d6, [sp, #16]
   11802:	ed92 7b00 	vldr	d7, [r2]
   11806:	ee86 7b07 	vdiv.f64	d7, d6, d7
   1180a:	ed8d 7b04 	vstr	d7, [sp, #16]
   1180e:	111b      	asrs	r3, r3, #4
   11810:	f43f ad4e 	beq.w	112b0 <_strtod_l+0x3f8>
   11814:	2b1f      	cmp	r3, #31
   11816:	dc33      	bgt.n	11880 <_strtod_l+0x9c8>
   11818:	f013 0210 	ands.w	r2, r3, #16
   1181c:	bf18      	it	ne
   1181e:	226a      	movne	r2, #106	; 0x6a
   11820:	ed9d 7b04 	vldr	d7, [sp, #16]
   11824:	9208      	str	r2, [sp, #32]
   11826:	4a27      	ldr	r2, [pc, #156]	; (118c4 <_strtod_l+0xa0c>)
   11828:	2100      	movs	r1, #0
   1182a:	07d8      	lsls	r0, r3, #31
   1182c:	d504      	bpl.n	11838 <_strtod_l+0x980>
   1182e:	ed92 6b00 	vldr	d6, [r2]
   11832:	2101      	movs	r1, #1
   11834:	ee27 7b06 	vmul.f64	d7, d7, d6
   11838:	105b      	asrs	r3, r3, #1
   1183a:	f102 0208 	add.w	r2, r2, #8
   1183e:	d1f4      	bne.n	1182a <_strtod_l+0x972>
   11840:	b109      	cbz	r1, 11846 <_strtod_l+0x98e>
   11842:	ed8d 7b04 	vstr	d7, [sp, #16]
   11846:	9b08      	ldr	r3, [sp, #32]
   11848:	b193      	cbz	r3, 11870 <_strtod_l+0x9b8>
   1184a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1184e:	f3c1 520a 	ubfx	r2, r1, #20, #11
   11852:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   11856:	2b00      	cmp	r3, #0
   11858:	dd0a      	ble.n	11870 <_strtod_l+0x9b8>
   1185a:	2b1f      	cmp	r3, #31
   1185c:	f340 822f 	ble.w	11cbe <_strtod_l+0xe06>
   11860:	2000      	movs	r0, #0
   11862:	2b34      	cmp	r3, #52	; 0x34
   11864:	9004      	str	r0, [sp, #16]
   11866:	f340 8240 	ble.w	11cea <_strtod_l+0xe32>
   1186a:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
   1186e:	9305      	str	r3, [sp, #20]
   11870:	ed9d 7b04 	vldr	d7, [sp, #16]
   11874:	eeb5 7b40 	vcmp.f64	d7, #0.0
   11878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1187c:	f47f ad1a 	bne.w	112b4 <_strtod_l+0x3fc>
   11880:	2322      	movs	r3, #34	; 0x22
   11882:	ed9f 8b05 	vldr	d8, [pc, #20]	; 11898 <_strtod_l+0x9e0>
   11886:	f8c8 3000 	str.w	r3, [r8]
   1188a:	e4d2      	b.n	11232 <_strtod_l+0x37a>
   1188c:	2322      	movs	r3, #34	; 0x22
   1188e:	ed9f 8b04 	vldr	d8, [pc, #16]	; 118a0 <_strtod_l+0x9e8>
   11892:	f8c8 3000 	str.w	r3, [r8]
   11896:	e4cc      	b.n	11232 <_strtod_l+0x37a>
	...
   118a4:	7ff00000 	.word	0x7ff00000
   118a8:	bff00000 	.word	0xbff00000
   118ac:	7ff00000 	.word	0x7ff00000
   118b0:	7c9fffff 	.word	0x7c9fffff
   118b4:	7fefffff 	.word	0x7fefffff
   118b8:	20000300 	.word	0x20000300
   118bc:	7ca00000 	.word	0x7ca00000
   118c0:	20000328 	.word	0x20000328
   118c4:	200003f0 	.word	0x200003f0
   118c8:	9302      	str	r3, [sp, #8]
   118ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118cc:	9301      	str	r3, [sp, #4]
   118ce:	ab12      	add	r3, sp, #72	; 0x48
   118d0:	9300      	str	r3, [sp, #0]
   118d2:	4aa7      	ldr	r2, [pc, #668]	; (11b70 <_strtod_l+0xcb8>)
   118d4:	ab13      	add	r3, sp, #76	; 0x4c
   118d6:	a911      	add	r1, sp, #68	; 0x44
   118d8:	4640      	mov	r0, r8
   118da:	f001 fbfb 	bl	130d4 <__gethex>
   118de:	f010 050f 	ands.w	r5, r0, #15
   118e2:	4604      	mov	r4, r0
   118e4:	f43f aca3 	beq.w	1122e <_strtod_l+0x376>
   118e8:	2d06      	cmp	r5, #6
   118ea:	d174      	bne.n	119d6 <_strtod_l+0xb1e>
   118ec:	9b07      	ldr	r3, [sp, #28]
   118ee:	ed9f 8b9a 	vldr	d8, [pc, #616]	; 11b58 <_strtod_l+0xca0>
   118f2:	3701      	adds	r7, #1
   118f4:	2b00      	cmp	r3, #0
   118f6:	f43f abce 	beq.w	11096 <_strtod_l+0x1de>
   118fa:	601f      	str	r7, [r3, #0]
   118fc:	f7ff bbcb 	b.w	11096 <_strtod_l+0x1de>
   11900:	ed9d 8b04 	vldr	d8, [sp, #16]
   11904:	e495      	b.n	11232 <_strtod_l+0x37a>
   11906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11908:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   1190c:	4403      	add	r3, r0
   1190e:	930b      	str	r3, [sp, #44]	; 0x2c
   11910:	2801      	cmp	r0, #1
   11912:	f105 0301 	add.w	r3, r5, #1
   11916:	461a      	mov	r2, r3
   11918:	d014      	beq.n	11944 <_strtod_l+0xa8c>
   1191a:	4428      	add	r0, r5
   1191c:	1e44      	subs	r4, r0, #1
   1191e:	e003      	b.n	11928 <_strtod_l+0xa70>
   11920:	0046      	lsls	r6, r0, #1
   11922:	429c      	cmp	r4, r3
   11924:	d00d      	beq.n	11942 <_strtod_l+0xa8a>
   11926:	3301      	adds	r3, #1
   11928:	462a      	mov	r2, r5
   1192a:	2a08      	cmp	r2, #8
   1192c:	461d      	mov	r5, r3
   1192e:	eb06 0086 	add.w	r0, r6, r6, lsl #2
   11932:	d9f5      	bls.n	11920 <_strtod_l+0xa68>
   11934:	2b10      	cmp	r3, #16
   11936:	bfdc      	itt	le
   11938:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   1193c:	ea4f 0949 	movle.w	r9, r9, lsl #1
   11940:	e7ef      	b.n	11922 <_strtod_l+0xa6a>
   11942:	3202      	adds	r2, #2
   11944:	2d08      	cmp	r5, #8
   11946:	dc3c      	bgt.n	119c2 <_strtod_l+0xb0a>
   11948:	4615      	mov	r5, r2
   1194a:	f7ff bb79 	b.w	11040 <_strtod_l+0x188>
   1194e:	4989      	ldr	r1, [pc, #548]	; (11b74 <_strtod_l+0xcbc>)
   11950:	2201      	movs	r2, #1
   11952:	4638      	mov	r0, r7
   11954:	f000 fe14 	bl	12580 <strncmp>
   11958:	2800      	cmp	r0, #0
   1195a:	f000 8082 	beq.w	11a62 <_strtod_l+0xbaa>
   1195e:	f04f 0e00 	mov.w	lr, #0
   11962:	46f1      	mov	r9, lr
   11964:	4676      	mov	r6, lr
   11966:	4675      	mov	r5, lr
   11968:	f7ff bbb5 	b.w	110d6 <_strtod_l+0x21e>
   1196c:	f644 631f 	movw	r3, #19999	; 0x4e1f
   11970:	459b      	cmp	fp, r3
   11972:	bfa8      	it	ge
   11974:	469b      	movge	fp, r3
   11976:	e42f      	b.n	111d8 <_strtod_l+0x320>
   11978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1197c:	4618      	mov	r0, r3
   1197e:	2b00      	cmp	r3, #0
   11980:	f47f ae23 	bne.w	115ca <_strtod_l+0x712>
   11984:	2322      	movs	r3, #34	; 0x22
   11986:	ed9f 8b74 	vldr	d8, [pc, #464]	; 11b58 <_strtod_l+0xca0>
   1198a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1198c:	f8c8 3000 	str.w	r3, [r8]
   11990:	e678      	b.n	11684 <_strtod_l+0x7cc>
   11992:	eeb0 7b49 	vmov.f64	d7, d9
   11996:	e6c0      	b.n	1171a <_strtod_l+0x862>
   11998:	4977      	ldr	r1, [pc, #476]	; (11b78 <_strtod_l+0xcc0>)
   1199a:	a811      	add	r0, sp, #68	; 0x44
   1199c:	f001 fe64 	bl	13668 <__match>
   119a0:	2800      	cmp	r0, #0
   119a2:	f43f ab71 	beq.w	11088 <_strtod_l+0x1d0>
   119a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   119a8:	4974      	ldr	r1, [pc, #464]	; (11b7c <_strtod_l+0xcc4>)
   119aa:	3b01      	subs	r3, #1
   119ac:	a811      	add	r0, sp, #68	; 0x44
   119ae:	9311      	str	r3, [sp, #68]	; 0x44
   119b0:	f001 fe5a 	bl	13668 <__match>
   119b4:	b910      	cbnz	r0, 119bc <_strtod_l+0xb04>
   119b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   119b8:	3301      	adds	r3, #1
   119ba:	9311      	str	r3, [sp, #68]	; 0x44
   119bc:	ed9f 8b68 	vldr	d8, [pc, #416]	; 11b60 <_strtod_l+0xca8>
   119c0:	e437      	b.n	11232 <_strtod_l+0x37a>
   119c2:	2a10      	cmp	r2, #16
   119c4:	bfdc      	itt	le
   119c6:	eb09 0989 	addle.w	r9, r9, r9, lsl #2
   119ca:	eb01 0949 	addle.w	r9, r1, r9, lsl #1
   119ce:	4615      	mov	r5, r2
   119d0:	2000      	movs	r0, #0
   119d2:	f7ff bb3a 	b.w	1104a <_strtod_l+0x192>
   119d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   119d8:	b13a      	cbz	r2, 119ea <_strtod_l+0xb32>
   119da:	2135      	movs	r1, #53	; 0x35
   119dc:	a814      	add	r0, sp, #80	; 0x50
   119de:	f002 fc27 	bl	14230 <__copybits>
   119e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   119e4:	4640      	mov	r0, r8
   119e6:	f001 ff6f 	bl	138c8 <_Bfree>
   119ea:	3d01      	subs	r5, #1
   119ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   119ee:	2d04      	cmp	r5, #4
   119f0:	f200 818f 	bhi.w	11d12 <_strtod_l+0xe5a>
   119f4:	e8df f005 	tbb	[pc, r5]
   119f8:	1f2a2d03 	.word	0x1f2a2d03
   119fc:	03          	.byte	0x03
   119fd:	00          	.byte	0x00
   119fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11a00:	9204      	str	r2, [sp, #16]
   11a02:	f203 4233 	addw	r2, r3, #1075	; 0x433
   11a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11a08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   11a0c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
   11a10:	9305      	str	r3, [sp, #20]
   11a12:	05e5      	lsls	r5, r4, #23
   11a14:	d502      	bpl.n	11a1c <_strtod_l+0xb64>
   11a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11a1a:	9305      	str	r3, [sp, #20]
   11a1c:	4a58      	ldr	r2, [pc, #352]	; (11b80 <_strtod_l+0xcc8>)
   11a1e:	401a      	ands	r2, r3
   11a20:	ed9d 8b04 	vldr	d8, [sp, #16]
   11a24:	2a00      	cmp	r2, #0
   11a26:	f47f ac04 	bne.w	11232 <_strtod_l+0x37a>
   11a2a:	f000 fe8d 	bl	12748 <__errno>
   11a2e:	2322      	movs	r3, #34	; 0x22
   11a30:	6003      	str	r3, [r0, #0]
   11a32:	f7ff bbfe 	b.w	11232 <_strtod_l+0x37a>
   11a36:	f04f 33ff 	mov.w	r3, #4294967295
   11a3a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   11a3e:	e9cd 3604 	strd	r3, r6, [sp, #16]
   11a42:	05e3      	lsls	r3, r4, #23
   11a44:	f57f af5c 	bpl.w	11900 <_strtod_l+0xa48>
   11a48:	9b05      	ldr	r3, [sp, #20]
   11a4a:	e7e4      	b.n	11a16 <_strtod_l+0xb5e>
   11a4c:	4b4c      	ldr	r3, [pc, #304]	; (11b80 <_strtod_l+0xcc8>)
   11a4e:	9305      	str	r3, [sp, #20]
   11a50:	e7f7      	b.n	11a42 <_strtod_l+0xb8a>
   11a52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a54:	9304      	str	r3, [sp, #16]
   11a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11a58:	9305      	str	r3, [sp, #20]
   11a5a:	e7da      	b.n	11a12 <_strtod_l+0xb5a>
   11a5c:	2000      	movs	r0, #0
   11a5e:	f7ff bae1 	b.w	11024 <_strtod_l+0x16c>
   11a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11a64:	461a      	mov	r2, r3
   11a66:	3301      	adds	r3, #1
   11a68:	9311      	str	r3, [sp, #68]	; 0x44
   11a6a:	7854      	ldrb	r4, [r2, #1]
   11a6c:	4606      	mov	r6, r0
   11a6e:	4681      	mov	r9, r0
   11a70:	f7ff bacd 	b.w	1100e <_strtod_l+0x156>
   11a74:	4b43      	ldr	r3, [pc, #268]	; (11b84 <_strtod_l+0xccc>)
   11a76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11a7a:	ed93 8b00 	vldr	d8, [r3]
   11a7e:	ed9d 7b04 	vldr	d7, [sp, #16]
   11a82:	ee28 8b07 	vmul.f64	d8, d8, d7
   11a86:	f7ff bbd4 	b.w	11232 <_strtod_l+0x37a>
   11a8a:	eebe 7b00 	vmov.f64	d7, #224	; 0xbf000000 -0.5
   11a8e:	eeb6 9b00 	vmov.f64	d9, #96	; 0x3f000000  0.5
   11a92:	e511      	b.n	114b8 <_strtod_l+0x600>
   11a94:	46ae      	mov	lr, r5
   11a96:	900b      	str	r0, [sp, #44]	; 0x2c
   11a98:	f7ff badc 	b.w	11054 <_strtod_l+0x19c>
   11a9c:	4b39      	ldr	r3, [pc, #228]	; (11b84 <_strtod_l+0xccc>)
   11a9e:	f1c5 050f 	rsb	r5, r5, #15
   11aa2:	1b4a      	subs	r2, r1, r5
   11aa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   11aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11aac:	ed95 8b00 	vldr	d8, [r5]
   11ab0:	ed93 7b00 	vldr	d7, [r3]
   11ab4:	ed9d 6b04 	vldr	d6, [sp, #16]
   11ab8:	ee28 8b06 	vmul.f64	d8, d8, d6
   11abc:	ee28 8b07 	vmul.f64	d8, d8, d7
   11ac0:	f7ff bbb7 	b.w	11232 <_strtod_l+0x37a>
   11ac4:	2d00      	cmp	r5, #0
   11ac6:	f000 8095 	beq.w	11bf4 <_strtod_l+0xd3c>
   11aca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
   11ace:	4b2e      	ldr	r3, [pc, #184]	; (11b88 <_strtod_l+0xcd0>)
   11ad0:	f3cc 0113 	ubfx	r1, ip, #0, #20
   11ad4:	4299      	cmp	r1, r3
   11ad6:	4662      	mov	r2, ip
   11ad8:	f000 80d2 	beq.w	11c80 <_strtod_l+0xdc8>
   11adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11ade:	2b00      	cmp	r3, #0
   11ae0:	f000 80a5 	beq.w	11c2e <_strtod_l+0xd76>
   11ae4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11ae8:	4213      	tst	r3, r2
   11aea:	4617      	mov	r7, r2
   11aec:	d01a      	beq.n	11b24 <_strtod_l+0xc6c>
   11aee:	eeb0 0b48 	vmov.f64	d0, d8
   11af2:	2d00      	cmp	r5, #0
   11af4:	f000 80a6 	beq.w	11c44 <_strtod_l+0xd8c>
   11af8:	f002 fa6a 	bl	13fd0 <__ulp>
   11afc:	9b08      	ldr	r3, [sp, #32]
   11afe:	b17b      	cbz	r3, 11b20 <_strtod_l+0xc68>
   11b00:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11b04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11b08:	2b00      	cmp	r3, #0
   11b0a:	dd09      	ble.n	11b20 <_strtod_l+0xc68>
   11b0c:	051b      	lsls	r3, r3, #20
   11b0e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11b12:	2000      	movs	r0, #0
   11b14:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11b18:	ec41 0b17 	vmov	d7, r0, r1
   11b1c:	ee20 0b07 	vmul.f64	d0, d0, d7
   11b20:	ee38 8b00 	vadd.f64	d8, d8, d0
   11b24:	9b08      	ldr	r3, [sp, #32]
   11b26:	b15b      	cbz	r3, 11b40 <_strtod_l+0xc88>
   11b28:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 11b68 <_strtod_l+0xcb0>
   11b2c:	4b14      	ldr	r3, [pc, #80]	; (11b80 <_strtod_l+0xcc8>)
   11b2e:	ee28 8b07 	vmul.f64	d8, d8, d7
   11b32:	ee18 2a90 	vmov	r2, s17
   11b36:	4013      	ands	r3, r2
   11b38:	b913      	cbnz	r3, 11b40 <_strtod_l+0xc88>
   11b3a:	2322      	movs	r3, #34	; 0x22
   11b3c:	f8c8 3000 	str.w	r3, [r8]
   11b40:	9812      	ldr	r0, [sp, #72]	; 0x48
   11b42:	e59f      	b.n	11684 <_strtod_l+0x7cc>
   11b44:	f102 7354 	add.w	r3, r2, #55574528	; 0x3500000
   11b48:	9305      	str	r3, [sp, #20]
   11b4a:	2300      	movs	r3, #0
   11b4c:	9308      	str	r3, [sp, #32]
   11b4e:	f7ff bbb1 	b.w	112b4 <_strtod_l+0x3fc>
   11b52:	bf00      	nop
   11b54:	f3af 8000 	nop.w
	...
   11b64:	7ff00000 	.word	0x7ff00000
   11b68:	00000000 	.word	0x00000000
   11b6c:	39500000 	.word	0x39500000
   11b70:	20007fd4 	.word	0x20007fd4
   11b74:	20008300 	.word	0x20008300
   11b78:	200011d8 	.word	0x200011d8
   11b7c:	200011dc 	.word	0x200011dc
   11b80:	7ff00000 	.word	0x7ff00000
   11b84:	20000328 	.word	0x20000328
   11b88:	000fffff 	.word	0x000fffff
   11b8c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11b90:	430d      	orrs	r5, r1
   11b92:	d1c7      	bne.n	11b24 <_strtod_l+0xc6c>
   11b94:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11b98:	4617      	mov	r7, r2
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d1c2      	bne.n	11b24 <_strtod_l+0xc6c>
   11b9e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   11ba2:	0d1b      	lsrs	r3, r3, #20
   11ba4:	051b      	lsls	r3, r3, #20
   11ba6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11baa:	d9bb      	bls.n	11b24 <_strtod_l+0xc6c>
   11bac:	f8da 3014 	ldr.w	r3, [sl, #20]
   11bb0:	b91b      	cbnz	r3, 11bba <_strtod_l+0xd02>
   11bb2:	f8da 3010 	ldr.w	r3, [sl, #16]
   11bb6:	2b01      	cmp	r3, #1
   11bb8:	ddb4      	ble.n	11b24 <_strtod_l+0xc6c>
   11bba:	4651      	mov	r1, sl
   11bbc:	2201      	movs	r2, #1
   11bbe:	4640      	mov	r0, r8
   11bc0:	f002 f8c2 	bl	13d48 <__lshift>
   11bc4:	4621      	mov	r1, r4
   11bc6:	4682      	mov	sl, r0
   11bc8:	f002 f936 	bl	13e38 <__mcmp>
   11bcc:	2800      	cmp	r0, #0
   11bce:	dda9      	ble.n	11b24 <_strtod_l+0xc6c>
   11bd0:	9b08      	ldr	r3, [sp, #32]
   11bd2:	2b00      	cmp	r3, #0
   11bd4:	d17e      	bne.n	11cd4 <_strtod_l+0xe1c>
   11bd6:	4b50      	ldr	r3, [pc, #320]	; (11d18 <_strtod_l+0xe60>)
   11bd8:	403b      	ands	r3, r7
   11bda:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   11bde:	ea6f 5313 	mvn.w	r3, r3, lsr #20
   11be2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
   11be6:	9305      	str	r3, [sp, #20]
   11be8:	f04f 33ff 	mov.w	r3, #4294967295
   11bec:	9304      	str	r3, [sp, #16]
   11bee:	ed9d 8b04 	vldr	d8, [sp, #16]
   11bf2:	e797      	b.n	11b24 <_strtod_l+0xc6c>
   11bf4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11bf8:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11bfc:	430b      	orrs	r3, r1
   11bfe:	4617      	mov	r7, r2
   11c00:	f47f af6c 	bne.w	11adc <_strtod_l+0xc24>
   11c04:	e7e4      	b.n	11bd0 <_strtod_l+0xd18>
   11c06:	4945      	ldr	r1, [pc, #276]	; (11d1c <_strtod_l+0xe64>)
   11c08:	a811      	add	r0, sp, #68	; 0x44
   11c0a:	aa14      	add	r2, sp, #80	; 0x50
   11c0c:	f001 fd48 	bl	136a0 <__hexnan>
   11c10:	2805      	cmp	r0, #5
   11c12:	f47f ab06 	bne.w	11222 <_strtod_l+0x36a>
   11c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11c18:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
   11c1c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   11c20:	9305      	str	r3, [sp, #20]
   11c22:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11c24:	9304      	str	r3, [sp, #16]
   11c26:	ed9d 8b04 	vldr	d8, [sp, #16]
   11c2a:	f7ff bb02 	b.w	11232 <_strtod_l+0x37a>
   11c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11c34:	4203      	tst	r3, r0
   11c36:	f43f af75 	beq.w	11b24 <_strtod_l+0xc6c>
   11c3a:	460f      	mov	r7, r1
   11c3c:	e757      	b.n	11aee <_strtod_l+0xc36>
   11c3e:	4c38      	ldr	r4, [pc, #224]	; (11d20 <_strtod_l+0xe68>)
   11c40:	2100      	movs	r1, #0
   11c42:	e58f      	b.n	11764 <_strtod_l+0x8ac>
   11c44:	f002 f9c4 	bl	13fd0 <__ulp>
   11c48:	9b08      	ldr	r3, [sp, #32]
   11c4a:	2b00      	cmp	r3, #0
   11c4c:	d055      	beq.n	11cfa <_strtod_l+0xe42>
   11c4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
   11c52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11c56:	2b00      	cmp	r3, #0
   11c58:	dd09      	ble.n	11c6e <_strtod_l+0xdb6>
   11c5a:	051b      	lsls	r3, r3, #20
   11c5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
   11c60:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
   11c64:	4628      	mov	r0, r5
   11c66:	ec41 0b17 	vmov	d7, r0, r1
   11c6a:	ee20 0b07 	vmul.f64	d0, d0, d7
   11c6e:	ee38 8b40 	vsub.f64	d8, d8, d0
   11c72:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11c7a:	f47f af55 	bne.w	11b28 <_strtod_l+0xc70>
   11c7e:	e681      	b.n	11984 <_strtod_l+0xacc>
   11c80:	9b08      	ldr	r3, [sp, #32]
   11c82:	9904      	ldr	r1, [sp, #16]
   11c84:	b31b      	cbz	r3, 11cce <_strtod_l+0xe16>
   11c86:	4b24      	ldr	r3, [pc, #144]	; (11d18 <_strtod_l+0xe60>)
   11c88:	4013      	ands	r3, r2
   11c8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   11c8e:	d81e      	bhi.n	11cce <_strtod_l+0xe16>
   11c90:	0d1b      	lsrs	r3, r3, #20
   11c92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   11c96:	f04f 30ff 	mov.w	r0, #4294967295
   11c9a:	fa00 f303 	lsl.w	r3, r0, r3
   11c9e:	4299      	cmp	r1, r3
   11ca0:	f47f af1c 	bne.w	11adc <_strtod_l+0xc24>
   11ca4:	4b1f      	ldr	r3, [pc, #124]	; (11d24 <_strtod_l+0xe6c>)
   11ca6:	429a      	cmp	r2, r3
   11ca8:	d030      	beq.n	11d0c <_strtod_l+0xe54>
   11caa:	4b1b      	ldr	r3, [pc, #108]	; (11d18 <_strtod_l+0xe60>)
   11cac:	4013      	ands	r3, r2
   11cae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   11cb2:	9305      	str	r3, [sp, #20]
   11cb4:	2300      	movs	r3, #0
   11cb6:	9304      	str	r3, [sp, #16]
   11cb8:	ed9d 8b04 	vldr	d8, [sp, #16]
   11cbc:	e732      	b.n	11b24 <_strtod_l+0xc6c>
   11cbe:	f04f 32ff 	mov.w	r2, #4294967295
   11cc2:	fa02 f303 	lsl.w	r3, r2, r3
   11cc6:	9a04      	ldr	r2, [sp, #16]
   11cc8:	401a      	ands	r2, r3
   11cca:	9204      	str	r2, [sp, #16]
   11ccc:	e5d0      	b.n	11870 <_strtod_l+0x9b8>
   11cce:	f04f 33ff 	mov.w	r3, #4294967295
   11cd2:	e7e4      	b.n	11c9e <_strtod_l+0xde6>
   11cd4:	4b10      	ldr	r3, [pc, #64]	; (11d18 <_strtod_l+0xe60>)
   11cd6:	403b      	ands	r3, r7
   11cd8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   11cdc:	f73f af7d 	bgt.w	11bda <_strtod_l+0xd22>
   11ce0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   11ce4:	f73f af20 	bgt.w	11b28 <_strtod_l+0xc70>
   11ce8:	e64c      	b.n	11984 <_strtod_l+0xacc>
   11cea:	f1c2 024b 	rsb	r2, r2, #75	; 0x4b
   11cee:	f04f 33ff 	mov.w	r3, #4294967295
   11cf2:	4093      	lsls	r3, r2
   11cf4:	400b      	ands	r3, r1
   11cf6:	9305      	str	r3, [sp, #20]
   11cf8:	e5ba      	b.n	11870 <_strtod_l+0x9b8>
   11cfa:	ee38 8b40 	vsub.f64	d8, d8, d0
   11cfe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   11d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   11d06:	f47f af1b 	bne.w	11b40 <_strtod_l+0xc88>
   11d0a:	e63b      	b.n	11984 <_strtod_l+0xacc>
   11d0c:	3101      	adds	r1, #1
   11d0e:	d1cc      	bne.n	11caa <_strtod_l+0xdf2>
   11d10:	e409      	b.n	11526 <_strtod_l+0x66e>
   11d12:	2300      	movs	r3, #0
   11d14:	e67d      	b.n	11a12 <_strtod_l+0xb5a>
   11d16:	bf00      	nop
   11d18:	7ff00000 	.word	0x7ff00000
   11d1c:	20007fe8 	.word	0x20007fe8
   11d20:	20000300 	.word	0x20000300
   11d24:	7fefffff 	.word	0x7fefffff

00011d28 <_strtod_r>:
   11d28:	4b01      	ldr	r3, [pc, #4]	; (11d30 <_strtod_r+0x8>)
   11d2a:	f7ff b8c5 	b.w	10eb8 <_strtod_l>
   11d2e:	bf00      	nop
   11d30:	20008f74 	.word	0x20008f74

00011d34 <_strtol_l.constprop.0>:
   11d34:	2b01      	cmp	r3, #1
   11d36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d3a:	d040      	beq.n	11dbe <_strtol_l.constprop.0+0x8a>
   11d3c:	2b24      	cmp	r3, #36	; 0x24
   11d3e:	4698      	mov	r8, r3
   11d40:	d83d      	bhi.n	11dbe <_strtol_l.constprop.0+0x8a>
   11d42:	4d4c      	ldr	r5, [pc, #304]	; (11e74 <_strtol_l.constprop.0+0x140>)
   11d44:	468e      	mov	lr, r1
   11d46:	4676      	mov	r6, lr
   11d48:	f81e bb01 	ldrb.w	fp, [lr], #1
   11d4c:	f815 400b 	ldrb.w	r4, [r5, fp]
   11d50:	f014 0408 	ands.w	r4, r4, #8
   11d54:	d1f7      	bne.n	11d46 <_strtol_l.constprop.0+0x12>
   11d56:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   11d5a:	d072      	beq.n	11e42 <_strtol_l.constprop.0+0x10e>
   11d5c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   11d60:	bf08      	it	eq
   11d62:	f89e b000 	ldrbeq.w	fp, [lr]
   11d66:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   11d6a:	bf08      	it	eq
   11d6c:	f106 0e02 	addeq.w	lr, r6, #2
   11d70:	2b00      	cmp	r3, #0
   11d72:	d042      	beq.n	11dfa <_strtol_l.constprop.0+0xc6>
   11d74:	2b10      	cmp	r3, #16
   11d76:	d057      	beq.n	11e28 <_strtol_l.constprop.0+0xf4>
   11d78:	fbb9 f7f8 	udiv	r7, r9, r8
   11d7c:	2500      	movs	r5, #0
   11d7e:	462e      	mov	r6, r5
   11d80:	fb08 9a17 	mls	sl, r8, r7, r9
   11d84:	e005      	b.n	11d92 <_strtol_l.constprop.0+0x5e>
   11d86:	d033      	beq.n	11df0 <_strtol_l.constprop.0+0xbc>
   11d88:	fb08 c606 	mla	r6, r8, r6, ip
   11d8c:	2501      	movs	r5, #1
   11d8e:	f81e bb01 	ldrb.w	fp, [lr], #1
   11d92:	f1ab 0c30 	sub.w	ip, fp, #48	; 0x30
   11d96:	f1bc 0f09 	cmp.w	ip, #9
   11d9a:	d906      	bls.n	11daa <_strtol_l.constprop.0+0x76>
   11d9c:	f1ab 0c41 	sub.w	ip, fp, #65	; 0x41
   11da0:	f1bc 0f19 	cmp.w	ip, #25
   11da4:	d812      	bhi.n	11dcc <_strtol_l.constprop.0+0x98>
   11da6:	f1ab 0c37 	sub.w	ip, fp, #55	; 0x37
   11daa:	4563      	cmp	r3, ip
   11dac:	dd17      	ble.n	11dde <_strtol_l.constprop.0+0xaa>
   11dae:	f1b5 3fff 	cmp.w	r5, #4294967295
   11db2:	d0ec      	beq.n	11d8e <_strtol_l.constprop.0+0x5a>
   11db4:	42b7      	cmp	r7, r6
   11db6:	d2e6      	bcs.n	11d86 <_strtol_l.constprop.0+0x52>
   11db8:	f04f 35ff 	mov.w	r5, #4294967295
   11dbc:	e7e7      	b.n	11d8e <_strtol_l.constprop.0+0x5a>
   11dbe:	f000 fcc3 	bl	12748 <__errno>
   11dc2:	2316      	movs	r3, #22
   11dc4:	6003      	str	r3, [r0, #0]
   11dc6:	2000      	movs	r0, #0
   11dc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dcc:	f1ab 0c61 	sub.w	ip, fp, #97	; 0x61
   11dd0:	f1bc 0f19 	cmp.w	ip, #25
   11dd4:	d803      	bhi.n	11dde <_strtol_l.constprop.0+0xaa>
   11dd6:	f1ab 0c57 	sub.w	ip, fp, #87	; 0x57
   11dda:	4563      	cmp	r3, ip
   11ddc:	dce7      	bgt.n	11dae <_strtol_l.constprop.0+0x7a>
   11dde:	1c6b      	adds	r3, r5, #1
   11de0:	d027      	beq.n	11e32 <_strtol_l.constprop.0+0xfe>
   11de2:	b98c      	cbnz	r4, 11e08 <_strtol_l.constprop.0+0xd4>
   11de4:	b10a      	cbz	r2, 11dea <_strtol_l.constprop.0+0xb6>
   11de6:	bba5      	cbnz	r5, 11e52 <_strtol_l.constprop.0+0x11e>
   11de8:	6011      	str	r1, [r2, #0]
   11dea:	4630      	mov	r0, r6
   11dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11df0:	45e2      	cmp	sl, ip
   11df2:	dac9      	bge.n	11d88 <_strtol_l.constprop.0+0x54>
   11df4:	f04f 35ff 	mov.w	r5, #4294967295
   11df8:	e7c9      	b.n	11d8e <_strtol_l.constprop.0+0x5a>
   11dfa:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   11dfe:	d005      	beq.n	11e0c <_strtol_l.constprop.0+0xd8>
   11e00:	f04f 080a 	mov.w	r8, #10
   11e04:	4643      	mov	r3, r8
   11e06:	e7b7      	b.n	11d78 <_strtol_l.constprop.0+0x44>
   11e08:	4276      	negs	r6, r6
   11e0a:	e7eb      	b.n	11de4 <_strtol_l.constprop.0+0xb0>
   11e0c:	f89e 3000 	ldrb.w	r3, [lr]
   11e10:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   11e14:	2b58      	cmp	r3, #88	; 0x58
   11e16:	d121      	bne.n	11e5c <_strtol_l.constprop.0+0x128>
   11e18:	f04f 0810 	mov.w	r8, #16
   11e1c:	f89e b001 	ldrb.w	fp, [lr, #1]
   11e20:	4643      	mov	r3, r8
   11e22:	f10e 0e02 	add.w	lr, lr, #2
   11e26:	e7a7      	b.n	11d78 <_strtol_l.constprop.0+0x44>
   11e28:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   11e2c:	d01a      	beq.n	11e64 <_strtol_l.constprop.0+0x130>
   11e2e:	4698      	mov	r8, r3
   11e30:	e7a2      	b.n	11d78 <_strtol_l.constprop.0+0x44>
   11e32:	2322      	movs	r3, #34	; 0x22
   11e34:	6003      	str	r3, [r0, #0]
   11e36:	b172      	cbz	r2, 11e56 <_strtol_l.constprop.0+0x122>
   11e38:	f10e 31ff 	add.w	r1, lr, #4294967295
   11e3c:	464e      	mov	r6, r9
   11e3e:	6011      	str	r1, [r2, #0]
   11e40:	e7d3      	b.n	11dea <_strtol_l.constprop.0+0xb6>
   11e42:	f89e b000 	ldrb.w	fp, [lr]
   11e46:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
   11e4a:	f106 0e02 	add.w	lr, r6, #2
   11e4e:	2401      	movs	r4, #1
   11e50:	e78e      	b.n	11d70 <_strtol_l.constprop.0+0x3c>
   11e52:	46b1      	mov	r9, r6
   11e54:	e7f0      	b.n	11e38 <_strtol_l.constprop.0+0x104>
   11e56:	464e      	mov	r6, r9
   11e58:	4630      	mov	r0, r6
   11e5a:	e7c7      	b.n	11dec <_strtol_l.constprop.0+0xb8>
   11e5c:	f04f 0808 	mov.w	r8, #8
   11e60:	4643      	mov	r3, r8
   11e62:	e789      	b.n	11d78 <_strtol_l.constprop.0+0x44>
   11e64:	f89e 5000 	ldrb.w	r5, [lr]
   11e68:	f005 05df 	and.w	r5, r5, #223	; 0xdf
   11e6c:	2d58      	cmp	r5, #88	; 0x58
   11e6e:	d0d3      	beq.n	11e18 <_strtol_l.constprop.0+0xe4>
   11e70:	4698      	mov	r8, r3
   11e72:	e781      	b.n	11d78 <_strtol_l.constprop.0+0x44>
   11e74:	20001055 	.word	0x20001055

00011e78 <_strtol_r>:
   11e78:	f7ff bf5c 	b.w	11d34 <_strtol_l.constprop.0>

00011e7c <__cxa_atexit>:
   11e7c:	4613      	mov	r3, r2
   11e7e:	460a      	mov	r2, r1
   11e80:	4601      	mov	r1, r0
   11e82:	2002      	movs	r0, #2
   11e84:	f000 bf3a 	b.w	12cfc <__register_exitproc>

00011e88 <fcvtf>:
   11e88:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   11e8c:	2300      	movs	r3, #0
   11e8e:	f002 ba3d 	b.w	1430c <fcvtbuf>
   11e92:	bf00      	nop

00011e94 <stdio_exit_handler>:
   11e94:	4a02      	ldr	r2, [pc, #8]	; (11ea0 <stdio_exit_handler+0xc>)
   11e96:	4903      	ldr	r1, [pc, #12]	; (11ea4 <stdio_exit_handler+0x10>)
   11e98:	4803      	ldr	r0, [pc, #12]	; (11ea8 <stdio_exit_handler+0x14>)
   11e9a:	f000 b8bb 	b.w	12014 <_fwalk_sglue>
   11e9e:	bf00      	nop
   11ea0:	200094f0 	.word	0x200094f0
   11ea4:	00017745 	.word	0x00017745
   11ea8:	20008a68 	.word	0x20008a68

00011eac <cleanup_stdio>:
   11eac:	4b0c      	ldr	r3, [pc, #48]	; (11ee0 <cleanup_stdio+0x34>)
   11eae:	6841      	ldr	r1, [r0, #4]
   11eb0:	4299      	cmp	r1, r3
   11eb2:	b510      	push	{r4, lr}
   11eb4:	4604      	mov	r4, r0
   11eb6:	d001      	beq.n	11ebc <cleanup_stdio+0x10>
   11eb8:	f005 fc44 	bl	17744 <_fclose_r>
   11ebc:	68a1      	ldr	r1, [r4, #8]
   11ebe:	4b09      	ldr	r3, [pc, #36]	; (11ee4 <cleanup_stdio+0x38>)
   11ec0:	4299      	cmp	r1, r3
   11ec2:	d002      	beq.n	11eca <cleanup_stdio+0x1e>
   11ec4:	4620      	mov	r0, r4
   11ec6:	f005 fc3d 	bl	17744 <_fclose_r>
   11eca:	68e1      	ldr	r1, [r4, #12]
   11ecc:	4b06      	ldr	r3, [pc, #24]	; (11ee8 <cleanup_stdio+0x3c>)
   11ece:	4299      	cmp	r1, r3
   11ed0:	d004      	beq.n	11edc <cleanup_stdio+0x30>
   11ed2:	4620      	mov	r0, r4
   11ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ed8:	f005 bc34 	b.w	17744 <_fclose_r>
   11edc:	bd10      	pop	{r4, pc}
   11ede:	bf00      	nop
   11ee0:	20018fa0 	.word	0x20018fa0
   11ee4:	20019008 	.word	0x20019008
   11ee8:	20019070 	.word	0x20019070

00011eec <global_stdio_init.part.0>:
   11eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ef0:	4c2a      	ldr	r4, [pc, #168]	; (11f9c <global_stdio_init.part.0+0xb0>)
   11ef2:	4b2b      	ldr	r3, [pc, #172]	; (11fa0 <global_stdio_init.part.0+0xb4>)
   11ef4:	482b      	ldr	r0, [pc, #172]	; (11fa4 <global_stdio_init.part.0+0xb8>)
   11ef6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 11fb8 <global_stdio_init.part.0+0xcc>
   11efa:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 11fbc <global_stdio_init.part.0+0xd0>
   11efe:	4f2a      	ldr	r7, [pc, #168]	; (11fa8 <global_stdio_init.part.0+0xbc>)
   11f00:	6018      	str	r0, [r3, #0]
   11f02:	2500      	movs	r5, #0
   11f04:	2304      	movs	r3, #4
   11f06:	2208      	movs	r2, #8
   11f08:	4629      	mov	r1, r5
   11f0a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   11f0e:	4e27      	ldr	r6, [pc, #156]	; (11fac <global_stdio_init.part.0+0xc0>)
   11f10:	6665      	str	r5, [r4, #100]	; 0x64
   11f12:	e9c4 5302 	strd	r5, r3, [r4, #8]
   11f16:	e9c4 5500 	strd	r5, r5, [r4]
   11f1a:	e9c4 5504 	strd	r5, r5, [r4, #16]
   11f1e:	61a5      	str	r5, [r4, #24]
   11f20:	f000 fa86 	bl	12430 <memset>
   11f24:	4b22      	ldr	r3, [pc, #136]	; (11fb0 <global_stdio_init.part.0+0xc4>)
   11f26:	6763      	str	r3, [r4, #116]	; 0x74
   11f28:	2208      	movs	r2, #8
   11f2a:	4629      	mov	r1, r5
   11f2c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   11f30:	e9c4 4907 	strd	r4, r9, [r4, #28]
   11f34:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   11f38:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   11f3c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   11f40:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   11f44:	6725      	str	r5, [r4, #112]	; 0x70
   11f46:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   11f4a:	62e6      	str	r6, [r4, #44]	; 0x2c
   11f4c:	f000 fa70 	bl	12430 <memset>
   11f50:	4b18      	ldr	r3, [pc, #96]	; (11fb4 <global_stdio_init.part.0+0xc8>)
   11f52:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   11f56:	4629      	mov	r1, r5
   11f58:	f104 0368 	add.w	r3, r4, #104	; 0x68
   11f5c:	2208      	movs	r2, #8
   11f5e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   11f62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   11f66:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   11f6a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   11f6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   11f72:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   11f76:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   11f7a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   11f7e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   11f82:	f000 fa55 	bl	12430 <memset>
   11f86:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   11f8a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   11f8e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   11f92:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   11f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11f9a:	bf00      	nop
   11f9c:	20018fa0 	.word	0x20018fa0
   11fa0:	200190d8 	.word	0x200190d8
   11fa4:	00011e95 	.word	0x00011e95
   11fa8:	000121e5 	.word	0x000121e5
   11fac:	00012205 	.word	0x00012205
   11fb0:	00010009 	.word	0x00010009
   11fb4:	00020012 	.word	0x00020012
   11fb8:	0001217d 	.word	0x0001217d
   11fbc:	000121a5 	.word	0x000121a5

00011fc0 <__sinit>:
   11fc0:	b510      	push	{r4, lr}
   11fc2:	4604      	mov	r4, r0
   11fc4:	480a      	ldr	r0, [pc, #40]	; (11ff0 <__sinit+0x30>)
   11fc6:	f000 fbed 	bl	127a4 <__retarget_lock_acquire_recursive>
   11fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11fcc:	b923      	cbnz	r3, 11fd8 <__sinit+0x18>
   11fce:	4b09      	ldr	r3, [pc, #36]	; (11ff4 <__sinit+0x34>)
   11fd0:	4a09      	ldr	r2, [pc, #36]	; (11ff8 <__sinit+0x38>)
   11fd2:	681b      	ldr	r3, [r3, #0]
   11fd4:	6362      	str	r2, [r4, #52]	; 0x34
   11fd6:	b123      	cbz	r3, 11fe2 <__sinit+0x22>
   11fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11fdc:	4804      	ldr	r0, [pc, #16]	; (11ff0 <__sinit+0x30>)
   11fde:	f000 bbe3 	b.w	127a8 <__retarget_lock_release_recursive>
   11fe2:	f7ff ff83 	bl	11eec <global_stdio_init.part.0>
   11fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11fea:	4801      	ldr	r0, [pc, #4]	; (11ff0 <__sinit+0x30>)
   11fec:	f000 bbdc 	b.w	127a8 <__retarget_lock_release_recursive>
   11ff0:	20018f68 	.word	0x20018f68
   11ff4:	200190d8 	.word	0x200190d8
   11ff8:	00011ead 	.word	0x00011ead

00011ffc <__sfp_lock_acquire>:
   11ffc:	4801      	ldr	r0, [pc, #4]	; (12004 <__sfp_lock_acquire+0x8>)
   11ffe:	f000 bbd1 	b.w	127a4 <__retarget_lock_acquire_recursive>
   12002:	bf00      	nop
   12004:	20018f68 	.word	0x20018f68

00012008 <__sfp_lock_release>:
   12008:	4801      	ldr	r0, [pc, #4]	; (12010 <__sfp_lock_release+0x8>)
   1200a:	f000 bbcd 	b.w	127a8 <__retarget_lock_release_recursive>
   1200e:	bf00      	nop
   12010:	20018f68 	.word	0x20018f68

00012014 <_fwalk_sglue>:
   12014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12018:	4680      	mov	r8, r0
   1201a:	460f      	mov	r7, r1
   1201c:	4616      	mov	r6, r2
   1201e:	f04f 0900 	mov.w	r9, #0
   12022:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   12026:	3d01      	subs	r5, #1
   12028:	d411      	bmi.n	1204e <_fwalk_sglue+0x3a>
   1202a:	89a3      	ldrh	r3, [r4, #12]
   1202c:	2b01      	cmp	r3, #1
   1202e:	f105 35ff 	add.w	r5, r5, #4294967295
   12032:	d908      	bls.n	12046 <_fwalk_sglue+0x32>
   12034:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   12038:	3301      	adds	r3, #1
   1203a:	4621      	mov	r1, r4
   1203c:	d003      	beq.n	12046 <_fwalk_sglue+0x32>
   1203e:	4640      	mov	r0, r8
   12040:	47b8      	blx	r7
   12042:	ea49 0900 	orr.w	r9, r9, r0
   12046:	1c6b      	adds	r3, r5, #1
   12048:	f104 0468 	add.w	r4, r4, #104	; 0x68
   1204c:	d1ed      	bne.n	1202a <_fwalk_sglue+0x16>
   1204e:	6836      	ldr	r6, [r6, #0]
   12050:	2e00      	cmp	r6, #0
   12052:	d1e6      	bne.n	12022 <_fwalk_sglue+0xe>
   12054:	4648      	mov	r0, r9
   12056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1205a:	bf00      	nop

0001205c <snprintf>:
   1205c:	b40c      	push	{r2, r3}
   1205e:	b510      	push	{r4, lr}
   12060:	4b1f      	ldr	r3, [pc, #124]	; (120e0 <snprintf+0x84>)
   12062:	2900      	cmp	r1, #0
   12064:	681c      	ldr	r4, [r3, #0]
   12066:	b09c      	sub	sp, #112	; 0x70
   12068:	db35      	blt.n	120d6 <snprintf+0x7a>
   1206a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1206e:	f8ad 3014 	strh.w	r3, [sp, #20]
   12072:	9002      	str	r0, [sp, #8]
   12074:	9006      	str	r0, [sp, #24]
   12076:	ab1f      	add	r3, sp, #124	; 0x7c
   12078:	d018      	beq.n	120ac <snprintf+0x50>
   1207a:	3901      	subs	r1, #1
   1207c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12080:	9104      	str	r1, [sp, #16]
   12082:	9107      	str	r1, [sp, #28]
   12084:	f8ad 2016 	strh.w	r2, [sp, #22]
   12088:	a902      	add	r1, sp, #8
   1208a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1208c:	9301      	str	r3, [sp, #4]
   1208e:	4620      	mov	r0, r4
   12090:	f002 f98e 	bl	143b0 <_svfprintf_r>
   12094:	1c42      	adds	r2, r0, #1
   12096:	da01      	bge.n	1209c <snprintf+0x40>
   12098:	238b      	movs	r3, #139	; 0x8b
   1209a:	6023      	str	r3, [r4, #0]
   1209c:	9b02      	ldr	r3, [sp, #8]
   1209e:	2200      	movs	r2, #0
   120a0:	701a      	strb	r2, [r3, #0]
   120a2:	b01c      	add	sp, #112	; 0x70
   120a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120a8:	b002      	add	sp, #8
   120aa:	4770      	bx	lr
   120ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   120b0:	9104      	str	r1, [sp, #16]
   120b2:	9107      	str	r1, [sp, #28]
   120b4:	f8ad 2016 	strh.w	r2, [sp, #22]
   120b8:	a902      	add	r1, sp, #8
   120ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   120bc:	9301      	str	r3, [sp, #4]
   120be:	4620      	mov	r0, r4
   120c0:	f002 f976 	bl	143b0 <_svfprintf_r>
   120c4:	1c43      	adds	r3, r0, #1
   120c6:	da01      	bge.n	120cc <snprintf+0x70>
   120c8:	238b      	movs	r3, #139	; 0x8b
   120ca:	6023      	str	r3, [r4, #0]
   120cc:	b01c      	add	sp, #112	; 0x70
   120ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120d2:	b002      	add	sp, #8
   120d4:	4770      	bx	lr
   120d6:	238b      	movs	r3, #139	; 0x8b
   120d8:	6023      	str	r3, [r4, #0]
   120da:	f04f 30ff 	mov.w	r0, #4294967295
   120de:	e7f5      	b.n	120cc <snprintf+0x70>
   120e0:	200094fc 	.word	0x200094fc

000120e4 <sprintf>:
   120e4:	b40e      	push	{r1, r2, r3}
   120e6:	b510      	push	{r4, lr}
   120e8:	b09d      	sub	sp, #116	; 0x74
   120ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   120ee:	ab1f      	add	r3, sp, #124	; 0x7c
   120f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   120f4:	9104      	str	r1, [sp, #16]
   120f6:	4909      	ldr	r1, [pc, #36]	; (1211c <sprintf+0x38>)
   120f8:	f853 2b04 	ldr.w	r2, [r3], #4
   120fc:	9002      	str	r0, [sp, #8]
   120fe:	4c08      	ldr	r4, [pc, #32]	; (12120 <sprintf+0x3c>)
   12100:	6808      	ldr	r0, [r1, #0]
   12102:	9301      	str	r3, [sp, #4]
   12104:	a902      	add	r1, sp, #8
   12106:	9405      	str	r4, [sp, #20]
   12108:	f002 f952 	bl	143b0 <_svfprintf_r>
   1210c:	9b02      	ldr	r3, [sp, #8]
   1210e:	2200      	movs	r2, #0
   12110:	701a      	strb	r2, [r3, #0]
   12112:	b01d      	add	sp, #116	; 0x74
   12114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12118:	b003      	add	sp, #12
   1211a:	4770      	bx	lr
   1211c:	200094fc 	.word	0x200094fc
   12120:	ffff0208 	.word	0xffff0208

00012124 <sscanf>:
   12124:	b40e      	push	{r1, r2, r3}
   12126:	b510      	push	{r4, lr}
   12128:	b09f      	sub	sp, #124	; 0x7c
   1212a:	ac21      	add	r4, sp, #132	; 0x84
   1212c:	f44f 7101 	mov.w	r1, #516	; 0x204
   12130:	f854 2b04 	ldr.w	r2, [r4], #4
   12134:	9201      	str	r2, [sp, #4]
   12136:	f8ad 101c 	strh.w	r1, [sp, #28]
   1213a:	9004      	str	r0, [sp, #16]
   1213c:	9008      	str	r0, [sp, #32]
   1213e:	f000 fd5f 	bl	12c00 <strlen>
   12142:	9005      	str	r0, [sp, #20]
   12144:	9009      	str	r0, [sp, #36]	; 0x24
   12146:	480b      	ldr	r0, [pc, #44]	; (12174 <sscanf+0x50>)
   12148:	490b      	ldr	r1, [pc, #44]	; (12178 <sscanf+0x54>)
   1214a:	910c      	str	r1, [sp, #48]	; 0x30
   1214c:	2300      	movs	r3, #0
   1214e:	f64f 7cff 	movw	ip, #65535	; 0xffff
   12152:	9310      	str	r3, [sp, #64]	; 0x40
   12154:	9315      	str	r3, [sp, #84]	; 0x54
   12156:	9a01      	ldr	r2, [sp, #4]
   12158:	6800      	ldr	r0, [r0, #0]
   1215a:	f8ad c01e 	strh.w	ip, [sp, #30]
   1215e:	4623      	mov	r3, r4
   12160:	a904      	add	r1, sp, #16
   12162:	9403      	str	r4, [sp, #12]
   12164:	f003 fec6 	bl	15ef4 <__ssvfscanf_r>
   12168:	b01f      	add	sp, #124	; 0x7c
   1216a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1216e:	b003      	add	sp, #12
   12170:	4770      	bx	lr
   12172:	bf00      	nop
   12174:	200094fc 	.word	0x200094fc
   12178:	000121a1 	.word	0x000121a1

0001217c <__sread>:
   1217c:	b510      	push	{r4, lr}
   1217e:	460c      	mov	r4, r1
   12180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12184:	f000 faa2 	bl	126cc <_read_r>
   12188:	2800      	cmp	r0, #0
   1218a:	db03      	blt.n	12194 <__sread+0x18>
   1218c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1218e:	4403      	add	r3, r0
   12190:	6523      	str	r3, [r4, #80]	; 0x50
   12192:	bd10      	pop	{r4, pc}
   12194:	89a3      	ldrh	r3, [r4, #12]
   12196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1219a:	81a3      	strh	r3, [r4, #12]
   1219c:	bd10      	pop	{r4, pc}
   1219e:	bf00      	nop

000121a0 <__seofread>:
   121a0:	2000      	movs	r0, #0
   121a2:	4770      	bx	lr

000121a4 <__swrite>:
   121a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121a8:	460c      	mov	r4, r1
   121aa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   121ae:	461f      	mov	r7, r3
   121b0:	05cb      	lsls	r3, r1, #23
   121b2:	4605      	mov	r5, r0
   121b4:	4616      	mov	r6, r2
   121b6:	d40b      	bmi.n	121d0 <__swrite+0x2c>
   121b8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   121bc:	81a1      	strh	r1, [r4, #12]
   121be:	463b      	mov	r3, r7
   121c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   121c4:	4632      	mov	r2, r6
   121c6:	4628      	mov	r0, r5
   121c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   121cc:	f000 baa6 	b.w	1271c <_write_r>
   121d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   121d4:	2302      	movs	r3, #2
   121d6:	2200      	movs	r2, #0
   121d8:	f000 fa62 	bl	126a0 <_lseek_r>
   121dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   121e0:	e7ea      	b.n	121b8 <__swrite+0x14>
   121e2:	bf00      	nop

000121e4 <__sseek>:
   121e4:	b510      	push	{r4, lr}
   121e6:	460c      	mov	r4, r1
   121e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   121ec:	f000 fa58 	bl	126a0 <_lseek_r>
   121f0:	89a3      	ldrh	r3, [r4, #12]
   121f2:	1c42      	adds	r2, r0, #1
   121f4:	bf0e      	itee	eq
   121f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   121fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   121fe:	6520      	strne	r0, [r4, #80]	; 0x50
   12200:	81a3      	strh	r3, [r4, #12]
   12202:	bd10      	pop	{r4, pc}

00012204 <__sclose>:
   12204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   12208:	f000 ba38 	b.w	1267c <_close_r>

0001220c <_vdprintf_r>:
   1220c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1220e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   12212:	af04      	add	r7, sp, #16
   12214:	9300      	str	r3, [sp, #0]
   12216:	4613      	mov	r3, r2
   12218:	f44f 7200 	mov.w	r2, #512	; 0x200
   1221c:	460e      	mov	r6, r1
   1221e:	9203      	str	r2, [sp, #12]
   12220:	4639      	mov	r1, r7
   12222:	aa03      	add	r2, sp, #12
   12224:	4605      	mov	r5, r0
   12226:	f000 f825 	bl	12274 <_vasnprintf_r>
   1222a:	b188      	cbz	r0, 12250 <_vdprintf_r+0x44>
   1222c:	4604      	mov	r4, r0
   1222e:	4602      	mov	r2, r0
   12230:	9b03      	ldr	r3, [sp, #12]
   12232:	4631      	mov	r1, r6
   12234:	4628      	mov	r0, r5
   12236:	f000 fa71 	bl	1271c <_write_r>
   1223a:	42bc      	cmp	r4, r7
   1223c:	9003      	str	r0, [sp, #12]
   1223e:	d004      	beq.n	1224a <_vdprintf_r+0x3e>
   12240:	4628      	mov	r0, r5
   12242:	4621      	mov	r1, r4
   12244:	f000 fdee 	bl	12e24 <_free_r>
   12248:	9803      	ldr	r0, [sp, #12]
   1224a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   1224e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12250:	f04f 30ff 	mov.w	r0, #4294967295
   12254:	e7f9      	b.n	1224a <_vdprintf_r+0x3e>
   12256:	bf00      	nop

00012258 <vdprintf>:
   12258:	b410      	push	{r4}
   1225a:	4c05      	ldr	r4, [pc, #20]	; (12270 <vdprintf+0x18>)
   1225c:	4684      	mov	ip, r0
   1225e:	4613      	mov	r3, r2
   12260:	6820      	ldr	r0, [r4, #0]
   12262:	f85d 4b04 	ldr.w	r4, [sp], #4
   12266:	460a      	mov	r2, r1
   12268:	4661      	mov	r1, ip
   1226a:	f7ff bfcf 	b.w	1220c <_vdprintf_r>
   1226e:	bf00      	nop
   12270:	200094fc 	.word	0x200094fc

00012274 <_vasnprintf_r>:
   12274:	b530      	push	{r4, r5, lr}
   12276:	6814      	ldr	r4, [r2, #0]
   12278:	4615      	mov	r5, r2
   1227a:	b09b      	sub	sp, #108	; 0x6c
   1227c:	461a      	mov	r2, r3
   1227e:	b109      	cbz	r1, 12284 <_vasnprintf_r+0x10>
   12280:	2c00      	cmp	r4, #0
   12282:	d119      	bne.n	122b8 <_vasnprintf_r+0x44>
   12284:	2100      	movs	r1, #0
   12286:	f44f 7322 	mov.w	r3, #648	; 0x288
   1228a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1228e:	9100      	str	r1, [sp, #0]
   12290:	9104      	str	r1, [sp, #16]
   12292:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12296:	9102      	str	r1, [sp, #8]
   12298:	9105      	str	r1, [sp, #20]
   1229a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1229e:	4669      	mov	r1, sp
   122a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   122a2:	f002 f885 	bl	143b0 <_svfprintf_r>
   122a6:	2800      	cmp	r0, #0
   122a8:	db13      	blt.n	122d2 <_vasnprintf_r+0x5e>
   122aa:	9b00      	ldr	r3, [sp, #0]
   122ac:	6028      	str	r0, [r5, #0]
   122ae:	2200      	movs	r2, #0
   122b0:	701a      	strb	r2, [r3, #0]
   122b2:	9804      	ldr	r0, [sp, #16]
   122b4:	b01b      	add	sp, #108	; 0x6c
   122b6:	bd30      	pop	{r4, r5, pc}
   122b8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   122bc:	9100      	str	r1, [sp, #0]
   122be:	9104      	str	r1, [sp, #16]
   122c0:	f8ad 300c 	strh.w	r3, [sp, #12]
   122c4:	4621      	mov	r1, r4
   122c6:	dae4      	bge.n	12292 <_vasnprintf_r+0x1e>
   122c8:	238b      	movs	r3, #139	; 0x8b
   122ca:	6003      	str	r3, [r0, #0]
   122cc:	2000      	movs	r0, #0
   122ce:	b01b      	add	sp, #108	; 0x6c
   122d0:	bd30      	pop	{r4, r5, pc}
   122d2:	2000      	movs	r0, #0
   122d4:	e7ee      	b.n	122b4 <_vasnprintf_r+0x40>
   122d6:	bf00      	nop

000122d8 <memcmp>:
   122d8:	2a03      	cmp	r2, #3
   122da:	b570      	push	{r4, r5, r6, lr}
   122dc:	d914      	bls.n	12308 <memcmp+0x30>
   122de:	ea40 0301 	orr.w	r3, r0, r1
   122e2:	079b      	lsls	r3, r3, #30
   122e4:	d122      	bne.n	1232c <memcmp+0x54>
   122e6:	4604      	mov	r4, r0
   122e8:	460b      	mov	r3, r1
   122ea:	4619      	mov	r1, r3
   122ec:	4620      	mov	r0, r4
   122ee:	680e      	ldr	r6, [r1, #0]
   122f0:	6805      	ldr	r5, [r0, #0]
   122f2:	42b5      	cmp	r5, r6
   122f4:	f104 0404 	add.w	r4, r4, #4
   122f8:	f103 0304 	add.w	r3, r3, #4
   122fc:	d116      	bne.n	1232c <memcmp+0x54>
   122fe:	3a04      	subs	r2, #4
   12300:	2a03      	cmp	r2, #3
   12302:	4620      	mov	r0, r4
   12304:	4619      	mov	r1, r3
   12306:	d8f0      	bhi.n	122ea <memcmp+0x12>
   12308:	1e54      	subs	r4, r2, #1
   1230a:	b19a      	cbz	r2, 12334 <memcmp+0x5c>
   1230c:	1e42      	subs	r2, r0, #1
   1230e:	3901      	subs	r1, #1
   12310:	e001      	b.n	12316 <memcmp+0x3e>
   12312:	18c3      	adds	r3, r0, r3
   12314:	d00c      	beq.n	12330 <memcmp+0x58>
   12316:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1231a:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1231e:	45e6      	cmp	lr, ip
   12320:	eba4 0302 	sub.w	r3, r4, r2
   12324:	d0f5      	beq.n	12312 <memcmp+0x3a>
   12326:	ebae 000c 	sub.w	r0, lr, ip
   1232a:	bd70      	pop	{r4, r5, r6, pc}
   1232c:	1e54      	subs	r4, r2, #1
   1232e:	e7ed      	b.n	1230c <memcmp+0x34>
   12330:	4618      	mov	r0, r3
   12332:	bd70      	pop	{r4, r5, r6, pc}
   12334:	4610      	mov	r0, r2
   12336:	bd70      	pop	{r4, r5, r6, pc}

00012338 <memmove>:
   12338:	4288      	cmp	r0, r1
   1233a:	d90d      	bls.n	12358 <memmove+0x20>
   1233c:	188b      	adds	r3, r1, r2
   1233e:	4283      	cmp	r3, r0
   12340:	d90a      	bls.n	12358 <memmove+0x20>
   12342:	eb00 0c02 	add.w	ip, r0, r2
   12346:	b1ba      	cbz	r2, 12378 <memmove+0x40>
   12348:	4662      	mov	r2, ip
   1234a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   1234e:	f802 cd01 	strb.w	ip, [r2, #-1]!
   12352:	4299      	cmp	r1, r3
   12354:	d1f9      	bne.n	1234a <memmove+0x12>
   12356:	4770      	bx	lr
   12358:	2a0f      	cmp	r2, #15
   1235a:	d80e      	bhi.n	1237a <memmove+0x42>
   1235c:	4603      	mov	r3, r0
   1235e:	f102 3cff 	add.w	ip, r2, #4294967295
   12362:	b14a      	cbz	r2, 12378 <memmove+0x40>
   12364:	f10c 0c01 	add.w	ip, ip, #1
   12368:	3b01      	subs	r3, #1
   1236a:	448c      	add	ip, r1
   1236c:	f811 2b01 	ldrb.w	r2, [r1], #1
   12370:	f803 2f01 	strb.w	r2, [r3, #1]!
   12374:	4561      	cmp	r1, ip
   12376:	d1f9      	bne.n	1236c <memmove+0x34>
   12378:	4770      	bx	lr
   1237a:	ea40 0301 	orr.w	r3, r0, r1
   1237e:	079b      	lsls	r3, r3, #30
   12380:	d150      	bne.n	12424 <memmove+0xec>
   12382:	f1a2 0310 	sub.w	r3, r2, #16
   12386:	b570      	push	{r4, r5, r6, lr}
   12388:	f101 0c20 	add.w	ip, r1, #32
   1238c:	f023 050f 	bic.w	r5, r3, #15
   12390:	f101 0e10 	add.w	lr, r1, #16
   12394:	f100 0410 	add.w	r4, r0, #16
   12398:	44ac      	add	ip, r5
   1239a:	091b      	lsrs	r3, r3, #4
   1239c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   123a0:	f844 5c10 	str.w	r5, [r4, #-16]
   123a4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   123a8:	f844 5c0c 	str.w	r5, [r4, #-12]
   123ac:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   123b0:	f844 5c08 	str.w	r5, [r4, #-8]
   123b4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   123b8:	f844 5c04 	str.w	r5, [r4, #-4]
   123bc:	f10e 0e10 	add.w	lr, lr, #16
   123c0:	45e6      	cmp	lr, ip
   123c2:	f104 0410 	add.w	r4, r4, #16
   123c6:	d1e9      	bne.n	1239c <memmove+0x64>
   123c8:	3301      	adds	r3, #1
   123ca:	f012 0f0c 	tst.w	r2, #12
   123ce:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   123d2:	f002 040f 	and.w	r4, r2, #15
   123d6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   123da:	d027      	beq.n	1242c <memmove+0xf4>
   123dc:	3c04      	subs	r4, #4
   123de:	f024 0603 	bic.w	r6, r4, #3
   123e2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   123e6:	441e      	add	r6, r3
   123e8:	1f1c      	subs	r4, r3, #4
   123ea:	468e      	mov	lr, r1
   123ec:	f85e 5b04 	ldr.w	r5, [lr], #4
   123f0:	f844 5f04 	str.w	r5, [r4, #4]!
   123f4:	42b4      	cmp	r4, r6
   123f6:	d1f9      	bne.n	123ec <memmove+0xb4>
   123f8:	f10c 0401 	add.w	r4, ip, #1
   123fc:	f002 0203 	and.w	r2, r2, #3
   12400:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   12408:	f102 3cff 	add.w	ip, r2, #4294967295
   1240c:	b14a      	cbz	r2, 12422 <memmove+0xea>
   1240e:	f10c 0c01 	add.w	ip, ip, #1
   12412:	3b01      	subs	r3, #1
   12414:	448c      	add	ip, r1
   12416:	f811 2b01 	ldrb.w	r2, [r1], #1
   1241a:	f803 2f01 	strb.w	r2, [r3, #1]!
   1241e:	4561      	cmp	r1, ip
   12420:	d1f9      	bne.n	12416 <memmove+0xde>
   12422:	bd70      	pop	{r4, r5, r6, pc}
   12424:	f102 3cff 	add.w	ip, r2, #4294967295
   12428:	4603      	mov	r3, r0
   1242a:	e79b      	b.n	12364 <memmove+0x2c>
   1242c:	4622      	mov	r2, r4
   1242e:	e7eb      	b.n	12408 <memmove+0xd0>

00012430 <memset>:
   12430:	0783      	lsls	r3, r0, #30
   12432:	b530      	push	{r4, r5, lr}
   12434:	d048      	beq.n	124c8 <memset+0x98>
   12436:	1e54      	subs	r4, r2, #1
   12438:	2a00      	cmp	r2, #0
   1243a:	d03f      	beq.n	124bc <memset+0x8c>
   1243c:	b2ca      	uxtb	r2, r1
   1243e:	4603      	mov	r3, r0
   12440:	e001      	b.n	12446 <memset+0x16>
   12442:	3c01      	subs	r4, #1
   12444:	d33a      	bcc.n	124bc <memset+0x8c>
   12446:	f803 2b01 	strb.w	r2, [r3], #1
   1244a:	079d      	lsls	r5, r3, #30
   1244c:	d1f9      	bne.n	12442 <memset+0x12>
   1244e:	2c03      	cmp	r4, #3
   12450:	d92d      	bls.n	124ae <memset+0x7e>
   12452:	b2cd      	uxtb	r5, r1
   12454:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12458:	2c0f      	cmp	r4, #15
   1245a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1245e:	d936      	bls.n	124ce <memset+0x9e>
   12460:	f1a4 0210 	sub.w	r2, r4, #16
   12464:	f022 0c0f 	bic.w	ip, r2, #15
   12468:	f103 0e20 	add.w	lr, r3, #32
   1246c:	44e6      	add	lr, ip
   1246e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   12472:	f103 0210 	add.w	r2, r3, #16
   12476:	e942 5504 	strd	r5, r5, [r2, #-16]
   1247a:	e942 5502 	strd	r5, r5, [r2, #-8]
   1247e:	3210      	adds	r2, #16
   12480:	4572      	cmp	r2, lr
   12482:	d1f8      	bne.n	12476 <memset+0x46>
   12484:	f10c 0201 	add.w	r2, ip, #1
   12488:	f014 0f0c 	tst.w	r4, #12
   1248c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   12490:	f004 0c0f 	and.w	ip, r4, #15
   12494:	d013      	beq.n	124be <memset+0x8e>
   12496:	f1ac 0304 	sub.w	r3, ip, #4
   1249a:	f023 0303 	bic.w	r3, r3, #3
   1249e:	3304      	adds	r3, #4
   124a0:	4413      	add	r3, r2
   124a2:	f842 5b04 	str.w	r5, [r2], #4
   124a6:	4293      	cmp	r3, r2
   124a8:	d1fb      	bne.n	124a2 <memset+0x72>
   124aa:	f00c 0403 	and.w	r4, ip, #3
   124ae:	b12c      	cbz	r4, 124bc <memset+0x8c>
   124b0:	b2c9      	uxtb	r1, r1
   124b2:	441c      	add	r4, r3
   124b4:	f803 1b01 	strb.w	r1, [r3], #1
   124b8:	429c      	cmp	r4, r3
   124ba:	d1fb      	bne.n	124b4 <memset+0x84>
   124bc:	bd30      	pop	{r4, r5, pc}
   124be:	4664      	mov	r4, ip
   124c0:	4613      	mov	r3, r2
   124c2:	2c00      	cmp	r4, #0
   124c4:	d1f4      	bne.n	124b0 <memset+0x80>
   124c6:	e7f9      	b.n	124bc <memset+0x8c>
   124c8:	4603      	mov	r3, r0
   124ca:	4614      	mov	r4, r2
   124cc:	e7bf      	b.n	1244e <memset+0x1e>
   124ce:	461a      	mov	r2, r3
   124d0:	46a4      	mov	ip, r4
   124d2:	e7e0      	b.n	12496 <memset+0x66>

000124d4 <strlcat>:
   124d4:	b570      	push	{r4, r5, r6, lr}
   124d6:	b34a      	cbz	r2, 1252c <strlcat+0x58>
   124d8:	4603      	mov	r3, r0
   124da:	1815      	adds	r5, r2, r0
   124dc:	e002      	b.n	124e4 <strlcat+0x10>
   124de:	429d      	cmp	r5, r3
   124e0:	469c      	mov	ip, r3
   124e2:	d005      	beq.n	124f0 <strlcat+0x1c>
   124e4:	469c      	mov	ip, r3
   124e6:	3301      	adds	r3, #1
   124e8:	f89c 4000 	ldrb.w	r4, [ip]
   124ec:	2c00      	cmp	r4, #0
   124ee:	d1f6      	bne.n	124de <strlcat+0xa>
   124f0:	ebac 0600 	sub.w	r6, ip, r0
   124f4:	1b92      	subs	r2, r2, r6
   124f6:	1e55      	subs	r5, r2, #1
   124f8:	b1ca      	cbz	r2, 1252e <strlcat+0x5a>
   124fa:	780c      	ldrb	r4, [r1, #0]
   124fc:	460b      	mov	r3, r1
   124fe:	b93c      	cbnz	r4, 12510 <strlcat+0x3c>
   12500:	e00f      	b.n	12522 <strlcat+0x4e>
   12502:	f802 4b01 	strb.w	r4, [r2], #1
   12506:	3d01      	subs	r5, #1
   12508:	4694      	mov	ip, r2
   1250a:	785c      	ldrb	r4, [r3, #1]
   1250c:	3301      	adds	r3, #1
   1250e:	b134      	cbz	r4, 1251e <strlcat+0x4a>
   12510:	4662      	mov	r2, ip
   12512:	2d00      	cmp	r5, #0
   12514:	d1f5      	bne.n	12502 <strlcat+0x2e>
   12516:	785a      	ldrb	r2, [r3, #1]
   12518:	3301      	adds	r3, #1
   1251a:	2a00      	cmp	r2, #0
   1251c:	d1f5      	bne.n	1250a <strlcat+0x36>
   1251e:	1a5b      	subs	r3, r3, r1
   12520:	441e      	add	r6, r3
   12522:	2300      	movs	r3, #0
   12524:	f88c 3000 	strb.w	r3, [ip]
   12528:	4630      	mov	r0, r6
   1252a:	bd70      	pop	{r4, r5, r6, pc}
   1252c:	4616      	mov	r6, r2
   1252e:	4608      	mov	r0, r1
   12530:	f000 fb66 	bl	12c00 <strlen>
   12534:	4406      	add	r6, r0
   12536:	4630      	mov	r0, r6
   12538:	bd70      	pop	{r4, r5, r6, pc}
   1253a:	bf00      	nop

0001253c <strlcpy>:
   1253c:	b1c2      	cbz	r2, 12570 <strlcpy+0x34>
   1253e:	eb00 0c02 	add.w	ip, r0, r2
   12542:	b500      	push	{lr}
   12544:	460b      	mov	r3, r1
   12546:	f10c 3eff 	add.w	lr, ip, #4294967295
   1254a:	e004      	b.n	12556 <strlcpy+0x1a>
   1254c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12550:	f800 2b01 	strb.w	r2, [r0], #1
   12554:	b142      	cbz	r2, 12568 <strlcpy+0x2c>
   12556:	4586      	cmp	lr, r0
   12558:	d1f8      	bne.n	1254c <strlcpy+0x10>
   1255a:	2200      	movs	r2, #0
   1255c:	f80c 2c01 	strb.w	r2, [ip, #-1]
   12560:	f813 2b01 	ldrb.w	r2, [r3], #1
   12564:	2a00      	cmp	r2, #0
   12566:	d1fb      	bne.n	12560 <strlcpy+0x24>
   12568:	1a59      	subs	r1, r3, r1
   1256a:	1e48      	subs	r0, r1, #1
   1256c:	f85d fb04 	ldr.w	pc, [sp], #4
   12570:	460b      	mov	r3, r1
   12572:	f813 2b01 	ldrb.w	r2, [r3], #1
   12576:	2a00      	cmp	r2, #0
   12578:	d1fb      	bne.n	12572 <strlcpy+0x36>
   1257a:	1a59      	subs	r1, r3, r1
   1257c:	1e48      	subs	r0, r1, #1
   1257e:	4770      	bx	lr

00012580 <strncmp>:
   12580:	2a00      	cmp	r2, #0
   12582:	d03e      	beq.n	12602 <strncmp+0x82>
   12584:	ea40 0301 	orr.w	r3, r0, r1
   12588:	079b      	lsls	r3, r3, #30
   1258a:	b530      	push	{r4, r5, lr}
   1258c:	4684      	mov	ip, r0
   1258e:	d12f      	bne.n	125f0 <strncmp+0x70>
   12590:	2a03      	cmp	r2, #3
   12592:	d92d      	bls.n	125f0 <strncmp+0x70>
   12594:	460b      	mov	r3, r1
   12596:	e008      	b.n	125aa <strncmp+0x2a>
   12598:	3a04      	subs	r2, #4
   1259a:	4684      	mov	ip, r0
   1259c:	4619      	mov	r1, r3
   1259e:	d025      	beq.n	125ec <strncmp+0x6c>
   125a0:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   125a4:	d122      	bne.n	125ec <strncmp+0x6c>
   125a6:	2a03      	cmp	r2, #3
   125a8:	d922      	bls.n	125f0 <strncmp+0x70>
   125aa:	6804      	ldr	r4, [r0, #0]
   125ac:	4619      	mov	r1, r3
   125ae:	f853 5b04 	ldr.w	r5, [r3], #4
   125b2:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   125b6:	42ac      	cmp	r4, r5
   125b8:	4684      	mov	ip, r0
   125ba:	ea2e 0e04 	bic.w	lr, lr, r4
   125be:	f100 0004 	add.w	r0, r0, #4
   125c2:	d0e9      	beq.n	12598 <strncmp+0x18>
   125c4:	f89c 0000 	ldrb.w	r0, [ip]
   125c8:	780c      	ldrb	r4, [r1, #0]
   125ca:	42a0      	cmp	r0, r4
   125cc:	d11b      	bne.n	12606 <strncmp+0x86>
   125ce:	46e6      	mov	lr, ip
   125d0:	b168      	cbz	r0, 125ee <strncmp+0x6e>
   125d2:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   125d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   125da:	eba2 030e 	sub.w	r3, r2, lr
   125de:	42a0      	cmp	r0, r4
   125e0:	f103 33ff 	add.w	r3, r3, #4294967295
   125e4:	d10f      	bne.n	12606 <strncmp+0x86>
   125e6:	eb1c 0303 	adds.w	r3, ip, r3
   125ea:	d1f1      	bne.n	125d0 <strncmp+0x50>
   125ec:	2000      	movs	r0, #0
   125ee:	bd30      	pop	{r4, r5, pc}
   125f0:	f89c 0000 	ldrb.w	r0, [ip]
   125f4:	780c      	ldrb	r4, [r1, #0]
   125f6:	4284      	cmp	r4, r0
   125f8:	d105      	bne.n	12606 <strncmp+0x86>
   125fa:	2a01      	cmp	r2, #1
   125fc:	d0f6      	beq.n	125ec <strncmp+0x6c>
   125fe:	46e6      	mov	lr, ip
   12600:	e7e6      	b.n	125d0 <strncmp+0x50>
   12602:	4610      	mov	r0, r2
   12604:	4770      	bx	lr
   12606:	1b00      	subs	r0, r0, r4
   12608:	bd30      	pop	{r4, r5, pc}
   1260a:	bf00      	nop

0001260c <strncpy>:
   1260c:	ea40 0301 	orr.w	r3, r0, r1
   12610:	079b      	lsls	r3, r3, #30
   12612:	b530      	push	{r4, r5, lr}
   12614:	d101      	bne.n	1261a <strncpy+0xe>
   12616:	2a03      	cmp	r2, #3
   12618:	d80f      	bhi.n	1263a <strncpy+0x2e>
   1261a:	4684      	mov	ip, r0
   1261c:	f101 3eff 	add.w	lr, r1, #4294967295
   12620:	e007      	b.n	12632 <strncpy+0x26>
   12622:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   12626:	f803 1b01 	strb.w	r1, [r3], #1
   1262a:	1e54      	subs	r4, r2, #1
   1262c:	b1c1      	cbz	r1, 12660 <strncpy+0x54>
   1262e:	469c      	mov	ip, r3
   12630:	4622      	mov	r2, r4
   12632:	4663      	mov	r3, ip
   12634:	2a00      	cmp	r2, #0
   12636:	d1f4      	bne.n	12622 <strncpy+0x16>
   12638:	bd30      	pop	{r4, r5, pc}
   1263a:	460b      	mov	r3, r1
   1263c:	4684      	mov	ip, r0
   1263e:	4619      	mov	r1, r3
   12640:	f853 5b04 	ldr.w	r5, [r3], #4
   12644:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   12648:	ea24 0405 	bic.w	r4, r4, r5
   1264c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   12650:	d1e4      	bne.n	1261c <strncpy+0x10>
   12652:	3a04      	subs	r2, #4
   12654:	2a03      	cmp	r2, #3
   12656:	f84c 5b04 	str.w	r5, [ip], #4
   1265a:	4619      	mov	r1, r3
   1265c:	d8ef      	bhi.n	1263e <strncpy+0x32>
   1265e:	e7dd      	b.n	1261c <strncpy+0x10>
   12660:	4494      	add	ip, r2
   12662:	2c00      	cmp	r4, #0
   12664:	d0e8      	beq.n	12638 <strncpy+0x2c>
   12666:	f803 1b01 	strb.w	r1, [r3], #1
   1266a:	4563      	cmp	r3, ip
   1266c:	d1fb      	bne.n	12666 <strncpy+0x5a>
   1266e:	bd30      	pop	{r4, r5, pc}

00012670 <__locale_mb_cur_max>:
   12670:	4b01      	ldr	r3, [pc, #4]	; (12678 <__locale_mb_cur_max+0x8>)
   12672:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   12676:	4770      	bx	lr
   12678:	20008f74 	.word	0x20008f74

0001267c <_close_r>:
   1267c:	b538      	push	{r3, r4, r5, lr}
   1267e:	4d07      	ldr	r5, [pc, #28]	; (1269c <_close_r+0x20>)
   12680:	2200      	movs	r2, #0
   12682:	4604      	mov	r4, r0
   12684:	4608      	mov	r0, r1
   12686:	602a      	str	r2, [r5, #0]
   12688:	f7fc f9d0 	bl	ea2c <_close>
   1268c:	1c43      	adds	r3, r0, #1
   1268e:	d000      	beq.n	12692 <_close_r+0x16>
   12690:	bd38      	pop	{r3, r4, r5, pc}
   12692:	682b      	ldr	r3, [r5, #0]
   12694:	2b00      	cmp	r3, #0
   12696:	d0fb      	beq.n	12690 <_close_r+0x14>
   12698:	6023      	str	r3, [r4, #0]
   1269a:	bd38      	pop	{r3, r4, r5, pc}
   1269c:	200192f0 	.word	0x200192f0

000126a0 <_lseek_r>:
   126a0:	b538      	push	{r3, r4, r5, lr}
   126a2:	460c      	mov	r4, r1
   126a4:	4d08      	ldr	r5, [pc, #32]	; (126c8 <_lseek_r+0x28>)
   126a6:	4684      	mov	ip, r0
   126a8:	4611      	mov	r1, r2
   126aa:	4620      	mov	r0, r4
   126ac:	461a      	mov	r2, r3
   126ae:	2300      	movs	r3, #0
   126b0:	602b      	str	r3, [r5, #0]
   126b2:	4664      	mov	r4, ip
   126b4:	f7fc f9c6 	bl	ea44 <_lseek>
   126b8:	1c43      	adds	r3, r0, #1
   126ba:	d000      	beq.n	126be <_lseek_r+0x1e>
   126bc:	bd38      	pop	{r3, r4, r5, pc}
   126be:	682b      	ldr	r3, [r5, #0]
   126c0:	2b00      	cmp	r3, #0
   126c2:	d0fb      	beq.n	126bc <_lseek_r+0x1c>
   126c4:	6023      	str	r3, [r4, #0]
   126c6:	bd38      	pop	{r3, r4, r5, pc}
   126c8:	200192f0 	.word	0x200192f0

000126cc <_read_r>:
   126cc:	b538      	push	{r3, r4, r5, lr}
   126ce:	460c      	mov	r4, r1
   126d0:	4d08      	ldr	r5, [pc, #32]	; (126f4 <_read_r+0x28>)
   126d2:	4684      	mov	ip, r0
   126d4:	4611      	mov	r1, r2
   126d6:	4620      	mov	r0, r4
   126d8:	461a      	mov	r2, r3
   126da:	2300      	movs	r3, #0
   126dc:	602b      	str	r3, [r5, #0]
   126de:	4664      	mov	r4, ip
   126e0:	f7fc f9a2 	bl	ea28 <_read>
   126e4:	1c43      	adds	r3, r0, #1
   126e6:	d000      	beq.n	126ea <_read_r+0x1e>
   126e8:	bd38      	pop	{r3, r4, r5, pc}
   126ea:	682b      	ldr	r3, [r5, #0]
   126ec:	2b00      	cmp	r3, #0
   126ee:	d0fb      	beq.n	126e8 <_read_r+0x1c>
   126f0:	6023      	str	r3, [r4, #0]
   126f2:	bd38      	pop	{r3, r4, r5, pc}
   126f4:	200192f0 	.word	0x200192f0

000126f8 <_sbrk_r>:
   126f8:	b538      	push	{r3, r4, r5, lr}
   126fa:	4d07      	ldr	r5, [pc, #28]	; (12718 <_sbrk_r+0x20>)
   126fc:	2200      	movs	r2, #0
   126fe:	4604      	mov	r4, r0
   12700:	4608      	mov	r0, r1
   12702:	602a      	str	r2, [r5, #0]
   12704:	f7fc f976 	bl	e9f4 <_sbrk>
   12708:	1c43      	adds	r3, r0, #1
   1270a:	d000      	beq.n	1270e <_sbrk_r+0x16>
   1270c:	bd38      	pop	{r3, r4, r5, pc}
   1270e:	682b      	ldr	r3, [r5, #0]
   12710:	2b00      	cmp	r3, #0
   12712:	d0fb      	beq.n	1270c <_sbrk_r+0x14>
   12714:	6023      	str	r3, [r4, #0]
   12716:	bd38      	pop	{r3, r4, r5, pc}
   12718:	200192f0 	.word	0x200192f0

0001271c <_write_r>:
   1271c:	b538      	push	{r3, r4, r5, lr}
   1271e:	460c      	mov	r4, r1
   12720:	4d08      	ldr	r5, [pc, #32]	; (12744 <_write_r+0x28>)
   12722:	4684      	mov	ip, r0
   12724:	4611      	mov	r1, r2
   12726:	4620      	mov	r0, r4
   12728:	461a      	mov	r2, r3
   1272a:	2300      	movs	r3, #0
   1272c:	602b      	str	r3, [r5, #0]
   1272e:	4664      	mov	r4, ip
   12730:	f7fa fff6 	bl	d720 <_write>
   12734:	1c43      	adds	r3, r0, #1
   12736:	d000      	beq.n	1273a <_write_r+0x1e>
   12738:	bd38      	pop	{r3, r4, r5, pc}
   1273a:	682b      	ldr	r3, [r5, #0]
   1273c:	2b00      	cmp	r3, #0
   1273e:	d0fb      	beq.n	12738 <_write_r+0x1c>
   12740:	6023      	str	r3, [r4, #0]
   12742:	bd38      	pop	{r3, r4, r5, pc}
   12744:	200192f0 	.word	0x200192f0

00012748 <__errno>:
   12748:	4b01      	ldr	r3, [pc, #4]	; (12750 <__errno+0x8>)
   1274a:	6818      	ldr	r0, [r3, #0]
   1274c:	4770      	bx	lr
   1274e:	bf00      	nop
   12750:	200094fc 	.word	0x200094fc

00012754 <__libc_init_array>:
   12754:	b570      	push	{r4, r5, r6, lr}
   12756:	4e0d      	ldr	r6, [pc, #52]	; (1278c <__libc_init_array+0x38>)
   12758:	4d0d      	ldr	r5, [pc, #52]	; (12790 <__libc_init_array+0x3c>)
   1275a:	1b76      	subs	r6, r6, r5
   1275c:	10b6      	asrs	r6, r6, #2
   1275e:	d006      	beq.n	1276e <__libc_init_array+0x1a>
   12760:	2400      	movs	r4, #0
   12762:	f855 3b04 	ldr.w	r3, [r5], #4
   12766:	3401      	adds	r4, #1
   12768:	4798      	blx	r3
   1276a:	42a6      	cmp	r6, r4
   1276c:	d1f9      	bne.n	12762 <__libc_init_array+0xe>
   1276e:	4e09      	ldr	r6, [pc, #36]	; (12794 <__libc_init_array+0x40>)
   12770:	4d09      	ldr	r5, [pc, #36]	; (12798 <__libc_init_array+0x44>)
   12772:	1b76      	subs	r6, r6, r5
   12774:	f008 fc7c 	bl	1b070 <___init_veneer>
   12778:	10b6      	asrs	r6, r6, #2
   1277a:	d006      	beq.n	1278a <__libc_init_array+0x36>
   1277c:	2400      	movs	r4, #0
   1277e:	f855 3b04 	ldr.w	r3, [r5], #4
   12782:	3401      	adds	r4, #1
   12784:	4798      	blx	r3
   12786:	42a6      	cmp	r6, r4
   12788:	d1f9      	bne.n	1277e <__libc_init_array+0x2a>
   1278a:	bd70      	pop	{r4, r5, r6, pc}
   1278c:	60002818 	.word	0x60002818
   12790:	60002818 	.word	0x60002818
   12794:	6000282c 	.word	0x6000282c
   12798:	60002818 	.word	0x60002818

0001279c <__retarget_lock_init_recursive>:
   1279c:	4770      	bx	lr
   1279e:	bf00      	nop

000127a0 <__retarget_lock_close_recursive>:
   127a0:	4770      	bx	lr
   127a2:	bf00      	nop

000127a4 <__retarget_lock_acquire_recursive>:
   127a4:	4770      	bx	lr
   127a6:	bf00      	nop

000127a8 <__retarget_lock_release_recursive>:
   127a8:	4770      	bx	lr
   127aa:	bf00      	nop
	...
   127c0:	eba2 0003 	sub.w	r0, r2, r3
   127c4:	4770      	bx	lr
   127c6:	bf00      	nop

000127c8 <strcmp>:
   127c8:	7802      	ldrb	r2, [r0, #0]
   127ca:	780b      	ldrb	r3, [r1, #0]
   127cc:	2a01      	cmp	r2, #1
   127ce:	bf28      	it	cs
   127d0:	429a      	cmpcs	r2, r3
   127d2:	d1f5      	bne.n	127c0 <__retarget_lock_release_recursive+0x18>
   127d4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   127d8:	ea40 0401 	orr.w	r4, r0, r1
   127dc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   127e0:	f06f 0c00 	mvn.w	ip, #0
   127e4:	ea4f 7244 	mov.w	r2, r4, lsl #29
   127e8:	b312      	cbz	r2, 12830 <strcmp+0x68>
   127ea:	ea80 0401 	eor.w	r4, r0, r1
   127ee:	f014 0f07 	tst.w	r4, #7
   127f2:	d16a      	bne.n	128ca <strcmp+0x102>
   127f4:	f000 0407 	and.w	r4, r0, #7
   127f8:	f020 0007 	bic.w	r0, r0, #7
   127fc:	f004 0503 	and.w	r5, r4, #3
   12800:	f021 0107 	bic.w	r1, r1, #7
   12804:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12808:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   1280c:	f014 0f04 	tst.w	r4, #4
   12810:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12814:	fa0c f405 	lsl.w	r4, ip, r5
   12818:	ea62 0204 	orn	r2, r2, r4
   1281c:	ea66 0604 	orn	r6, r6, r4
   12820:	d00a      	beq.n	12838 <strcmp+0x70>
   12822:	ea63 0304 	orn	r3, r3, r4
   12826:	4662      	mov	r2, ip
   12828:	ea67 0704 	orn	r7, r7, r4
   1282c:	4666      	mov	r6, ip
   1282e:	e003      	b.n	12838 <strcmp+0x70>
   12830:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12834:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12838:	fa82 f54c 	uadd8	r5, r2, ip
   1283c:	ea82 0406 	eor.w	r4, r2, r6
   12840:	faa4 f48c 	sel	r4, r4, ip
   12844:	bb6c      	cbnz	r4, 128a2 <strcmp+0xda>
   12846:	fa83 f54c 	uadd8	r5, r3, ip
   1284a:	ea83 0507 	eor.w	r5, r3, r7
   1284e:	faa5 f58c 	sel	r5, r5, ip
   12852:	b995      	cbnz	r5, 1287a <strcmp+0xb2>
   12854:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   12858:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   1285c:	fa82 f54c 	uadd8	r5, r2, ip
   12860:	ea82 0406 	eor.w	r4, r2, r6
   12864:	faa4 f48c 	sel	r4, r4, ip
   12868:	fa83 f54c 	uadd8	r5, r3, ip
   1286c:	ea83 0507 	eor.w	r5, r3, r7
   12870:	faa5 f58c 	sel	r5, r5, ip
   12874:	4325      	orrs	r5, r4
   12876:	d0db      	beq.n	12830 <strcmp+0x68>
   12878:	b99c      	cbnz	r4, 128a2 <strcmp+0xda>
   1287a:	ba2d      	rev	r5, r5
   1287c:	fab5 f485 	clz	r4, r5
   12880:	f024 0407 	bic.w	r4, r4, #7
   12884:	fa27 f104 	lsr.w	r1, r7, r4
   12888:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1288c:	fa23 f304 	lsr.w	r3, r3, r4
   12890:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12894:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12898:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   1289c:	eba0 0001 	sub.w	r0, r0, r1
   128a0:	4770      	bx	lr
   128a2:	ba24      	rev	r4, r4
   128a4:	fab4 f484 	clz	r4, r4
   128a8:	f024 0407 	bic.w	r4, r4, #7
   128ac:	fa26 f104 	lsr.w	r1, r6, r4
   128b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   128b4:	fa22 f204 	lsr.w	r2, r2, r4
   128b8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   128bc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   128c0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   128c4:	eba0 0001 	sub.w	r0, r0, r1
   128c8:	4770      	bx	lr
   128ca:	f014 0f03 	tst.w	r4, #3
   128ce:	d13c      	bne.n	1294a <strcmp+0x182>
   128d0:	f010 0403 	ands.w	r4, r0, #3
   128d4:	d128      	bne.n	12928 <strcmp+0x160>
   128d6:	f850 2b08 	ldr.w	r2, [r0], #8
   128da:	f851 3b08 	ldr.w	r3, [r1], #8
   128de:	fa82 f54c 	uadd8	r5, r2, ip
   128e2:	ea82 0503 	eor.w	r5, r2, r3
   128e6:	faa5 f58c 	sel	r5, r5, ip
   128ea:	b95d      	cbnz	r5, 12904 <strcmp+0x13c>
   128ec:	f850 2c04 	ldr.w	r2, [r0, #-4]
   128f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
   128f4:	fa82 f54c 	uadd8	r5, r2, ip
   128f8:	ea82 0503 	eor.w	r5, r2, r3
   128fc:	faa5 f58c 	sel	r5, r5, ip
   12900:	2d00      	cmp	r5, #0
   12902:	d0e8      	beq.n	128d6 <strcmp+0x10e>
   12904:	ba2d      	rev	r5, r5
   12906:	fab5 f485 	clz	r4, r5
   1290a:	f024 0407 	bic.w	r4, r4, #7
   1290e:	fa23 f104 	lsr.w	r1, r3, r4
   12912:	fa22 f204 	lsr.w	r2, r2, r4
   12916:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   1291a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1291e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12922:	eba0 0001 	sub.w	r0, r0, r1
   12926:	4770      	bx	lr
   12928:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1292c:	f020 0003 	bic.w	r0, r0, #3
   12930:	f850 2b08 	ldr.w	r2, [r0], #8
   12934:	f021 0103 	bic.w	r1, r1, #3
   12938:	f851 3b08 	ldr.w	r3, [r1], #8
   1293c:	fa0c f404 	lsl.w	r4, ip, r4
   12940:	ea62 0204 	orn	r2, r2, r4
   12944:	ea63 0304 	orn	r3, r3, r4
   12948:	e7c9      	b.n	128de <strcmp+0x116>
   1294a:	f010 0403 	ands.w	r4, r0, #3
   1294e:	d01a      	beq.n	12986 <strcmp+0x1be>
   12950:	eba1 0104 	sub.w	r1, r1, r4
   12954:	f020 0003 	bic.w	r0, r0, #3
   12958:	07e4      	lsls	r4, r4, #31
   1295a:	f850 2b04 	ldr.w	r2, [r0], #4
   1295e:	d006      	beq.n	1296e <strcmp+0x1a6>
   12960:	d20f      	bcs.n	12982 <strcmp+0x1ba>
   12962:	788b      	ldrb	r3, [r1, #2]
   12964:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   12968:	1ae4      	subs	r4, r4, r3
   1296a:	d106      	bne.n	1297a <strcmp+0x1b2>
   1296c:	b12b      	cbz	r3, 1297a <strcmp+0x1b2>
   1296e:	78cb      	ldrb	r3, [r1, #3]
   12970:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   12974:	1ae4      	subs	r4, r4, r3
   12976:	d100      	bne.n	1297a <strcmp+0x1b2>
   12978:	b91b      	cbnz	r3, 12982 <strcmp+0x1ba>
   1297a:	4620      	mov	r0, r4
   1297c:	f85d 4b10 	ldr.w	r4, [sp], #16
   12980:	4770      	bx	lr
   12982:	f101 0104 	add.w	r1, r1, #4
   12986:	f850 2b04 	ldr.w	r2, [r0], #4
   1298a:	07cc      	lsls	r4, r1, #31
   1298c:	f021 0103 	bic.w	r1, r1, #3
   12990:	f851 3b04 	ldr.w	r3, [r1], #4
   12994:	d848      	bhi.n	12a28 <strcmp+0x260>
   12996:	d224      	bcs.n	129e2 <strcmp+0x21a>
   12998:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   1299c:	fa82 f54c 	uadd8	r5, r2, ip
   129a0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   129a4:	faa5 f58c 	sel	r5, r5, ip
   129a8:	d10a      	bne.n	129c0 <strcmp+0x1f8>
   129aa:	b965      	cbnz	r5, 129c6 <strcmp+0x1fe>
   129ac:	f851 3b04 	ldr.w	r3, [r1], #4
   129b0:	ea84 0402 	eor.w	r4, r4, r2
   129b4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   129b8:	d10e      	bne.n	129d8 <strcmp+0x210>
   129ba:	f850 2b04 	ldr.w	r2, [r0], #4
   129be:	e7eb      	b.n	12998 <strcmp+0x1d0>
   129c0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   129c4:	e055      	b.n	12a72 <strcmp+0x2aa>
   129c6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   129ca:	d14d      	bne.n	12a68 <strcmp+0x2a0>
   129cc:	7808      	ldrb	r0, [r1, #0]
   129ce:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   129d2:	f1c0 0000 	rsb	r0, r0, #0
   129d6:	4770      	bx	lr
   129d8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   129dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   129e0:	e047      	b.n	12a72 <strcmp+0x2aa>
   129e2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   129e6:	fa82 f54c 	uadd8	r5, r2, ip
   129ea:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   129ee:	faa5 f58c 	sel	r5, r5, ip
   129f2:	d10a      	bne.n	12a0a <strcmp+0x242>
   129f4:	b965      	cbnz	r5, 12a10 <strcmp+0x248>
   129f6:	f851 3b04 	ldr.w	r3, [r1], #4
   129fa:	ea84 0402 	eor.w	r4, r4, r2
   129fe:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   12a02:	d10c      	bne.n	12a1e <strcmp+0x256>
   12a04:	f850 2b04 	ldr.w	r2, [r0], #4
   12a08:	e7eb      	b.n	129e2 <strcmp+0x21a>
   12a0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   12a0e:	e030      	b.n	12a72 <strcmp+0x2aa>
   12a10:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   12a14:	d128      	bne.n	12a68 <strcmp+0x2a0>
   12a16:	880b      	ldrh	r3, [r1, #0]
   12a18:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12a1c:	e029      	b.n	12a72 <strcmp+0x2aa>
   12a1e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12a22:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   12a26:	e024      	b.n	12a72 <strcmp+0x2aa>
   12a28:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   12a2c:	fa82 f54c 	uadd8	r5, r2, ip
   12a30:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   12a34:	faa5 f58c 	sel	r5, r5, ip
   12a38:	d10a      	bne.n	12a50 <strcmp+0x288>
   12a3a:	b965      	cbnz	r5, 12a56 <strcmp+0x28e>
   12a3c:	f851 3b04 	ldr.w	r3, [r1], #4
   12a40:	ea84 0402 	eor.w	r4, r4, r2
   12a44:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   12a48:	d109      	bne.n	12a5e <strcmp+0x296>
   12a4a:	f850 2b04 	ldr.w	r2, [r0], #4
   12a4e:	e7eb      	b.n	12a28 <strcmp+0x260>
   12a50:	ea4f 6313 	mov.w	r3, r3, lsr #24
   12a54:	e00d      	b.n	12a72 <strcmp+0x2aa>
   12a56:	f015 0fff 	tst.w	r5, #255	; 0xff
   12a5a:	d105      	bne.n	12a68 <strcmp+0x2a0>
   12a5c:	680b      	ldr	r3, [r1, #0]
   12a5e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   12a62:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12a66:	e004      	b.n	12a72 <strcmp+0x2aa>
   12a68:	f04f 0000 	mov.w	r0, #0
   12a6c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12a70:	4770      	bx	lr
   12a72:	ba12      	rev	r2, r2
   12a74:	ba1b      	rev	r3, r3
   12a76:	fa82 f44c 	uadd8	r4, r2, ip
   12a7a:	ea82 0403 	eor.w	r4, r2, r3
   12a7e:	faa4 f58c 	sel	r5, r4, ip
   12a82:	fab5 f485 	clz	r4, r5
   12a86:	fa02 f204 	lsl.w	r2, r2, r4
   12a8a:	fa03 f304 	lsl.w	r3, r3, r4
   12a8e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12a92:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12a96:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   12a9a:	4770      	bx	lr

00012a9c <strcpy>:
   12a9c:	ea80 0201 	eor.w	r2, r0, r1
   12aa0:	4684      	mov	ip, r0
   12aa2:	f012 0f03 	tst.w	r2, #3
   12aa6:	d14f      	bne.n	12b48 <strcpy+0xac>
   12aa8:	f011 0f03 	tst.w	r1, #3
   12aac:	d132      	bne.n	12b14 <strcpy+0x78>
   12aae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12ab2:	f011 0f04 	tst.w	r1, #4
   12ab6:	f851 3b04 	ldr.w	r3, [r1], #4
   12aba:	d00b      	beq.n	12ad4 <strcpy+0x38>
   12abc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12ac0:	439a      	bics	r2, r3
   12ac2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12ac6:	bf04      	itt	eq
   12ac8:	f84c 3b04 	streq.w	r3, [ip], #4
   12acc:	f851 3b04 	ldreq.w	r3, [r1], #4
   12ad0:	d116      	bne.n	12b00 <strcpy+0x64>
   12ad2:	bf00      	nop
   12ad4:	f851 4b04 	ldr.w	r4, [r1], #4
   12ad8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12adc:	439a      	bics	r2, r3
   12ade:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12ae2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12ae6:	d10b      	bne.n	12b00 <strcpy+0x64>
   12ae8:	f84c 3b04 	str.w	r3, [ip], #4
   12aec:	43a2      	bics	r2, r4
   12aee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12af2:	bf04      	itt	eq
   12af4:	f851 3b04 	ldreq.w	r3, [r1], #4
   12af8:	f84c 4b04 	streq.w	r4, [ip], #4
   12afc:	d0ea      	beq.n	12ad4 <strcpy+0x38>
   12afe:	4623      	mov	r3, r4
   12b00:	f80c 3b01 	strb.w	r3, [ip], #1
   12b04:	f013 0fff 	tst.w	r3, #255	; 0xff
   12b08:	ea4f 2333 	mov.w	r3, r3, ror #8
   12b0c:	d1f8      	bne.n	12b00 <strcpy+0x64>
   12b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12b12:	4770      	bx	lr
   12b14:	f011 0f01 	tst.w	r1, #1
   12b18:	d006      	beq.n	12b28 <strcpy+0x8c>
   12b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   12b1e:	f80c 2b01 	strb.w	r2, [ip], #1
   12b22:	2a00      	cmp	r2, #0
   12b24:	bf08      	it	eq
   12b26:	4770      	bxeq	lr
   12b28:	f011 0f02 	tst.w	r1, #2
   12b2c:	d0bf      	beq.n	12aae <strcpy+0x12>
   12b2e:	f831 2b02 	ldrh.w	r2, [r1], #2
   12b32:	f012 0fff 	tst.w	r2, #255	; 0xff
   12b36:	bf16      	itet	ne
   12b38:	f82c 2b02 	strhne.w	r2, [ip], #2
   12b3c:	f88c 2000 	strbeq.w	r2, [ip]
   12b40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12b44:	d1b3      	bne.n	12aae <strcpy+0x12>
   12b46:	4770      	bx	lr
   12b48:	f811 2b01 	ldrb.w	r2, [r1], #1
   12b4c:	f80c 2b01 	strb.w	r2, [ip], #1
   12b50:	2a00      	cmp	r2, #0
   12b52:	d1f9      	bne.n	12b48 <strcpy+0xac>
   12b54:	4770      	bx	lr
   12b56:	bf00      	nop
	...

00012b60 <memchr>:
   12b60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12b64:	2a10      	cmp	r2, #16
   12b66:	db2b      	blt.n	12bc0 <memchr+0x60>
   12b68:	f010 0f07 	tst.w	r0, #7
   12b6c:	d008      	beq.n	12b80 <memchr+0x20>
   12b6e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12b72:	3a01      	subs	r2, #1
   12b74:	428b      	cmp	r3, r1
   12b76:	d02d      	beq.n	12bd4 <memchr+0x74>
   12b78:	f010 0f07 	tst.w	r0, #7
   12b7c:	b342      	cbz	r2, 12bd0 <memchr+0x70>
   12b7e:	d1f6      	bne.n	12b6e <memchr+0xe>
   12b80:	b4f0      	push	{r4, r5, r6, r7}
   12b82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12b86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   12b8a:	f022 0407 	bic.w	r4, r2, #7
   12b8e:	f07f 0700 	mvns.w	r7, #0
   12b92:	2300      	movs	r3, #0
   12b94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12b98:	3c08      	subs	r4, #8
   12b9a:	ea85 0501 	eor.w	r5, r5, r1
   12b9e:	ea86 0601 	eor.w	r6, r6, r1
   12ba2:	fa85 f547 	uadd8	r5, r5, r7
   12ba6:	faa3 f587 	sel	r5, r3, r7
   12baa:	fa86 f647 	uadd8	r6, r6, r7
   12bae:	faa5 f687 	sel	r6, r5, r7
   12bb2:	b98e      	cbnz	r6, 12bd8 <memchr+0x78>
   12bb4:	d1ee      	bne.n	12b94 <memchr+0x34>
   12bb6:	bcf0      	pop	{r4, r5, r6, r7}
   12bb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12bbc:	f002 0207 	and.w	r2, r2, #7
   12bc0:	b132      	cbz	r2, 12bd0 <memchr+0x70>
   12bc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   12bc6:	3a01      	subs	r2, #1
   12bc8:	ea83 0301 	eor.w	r3, r3, r1
   12bcc:	b113      	cbz	r3, 12bd4 <memchr+0x74>
   12bce:	d1f8      	bne.n	12bc2 <memchr+0x62>
   12bd0:	2000      	movs	r0, #0
   12bd2:	4770      	bx	lr
   12bd4:	3801      	subs	r0, #1
   12bd6:	4770      	bx	lr
   12bd8:	2d00      	cmp	r5, #0
   12bda:	bf06      	itte	eq
   12bdc:	4635      	moveq	r5, r6
   12bde:	3803      	subeq	r0, #3
   12be0:	3807      	subne	r0, #7
   12be2:	f015 0f01 	tst.w	r5, #1
   12be6:	d107      	bne.n	12bf8 <memchr+0x98>
   12be8:	3001      	adds	r0, #1
   12bea:	f415 7f80 	tst.w	r5, #256	; 0x100
   12bee:	bf02      	ittt	eq
   12bf0:	3001      	addeq	r0, #1
   12bf2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   12bf6:	3001      	addeq	r0, #1
   12bf8:	bcf0      	pop	{r4, r5, r6, r7}
   12bfa:	3801      	subs	r0, #1
   12bfc:	4770      	bx	lr
   12bfe:	bf00      	nop

00012c00 <strlen>:
   12c00:	f890 f000 	pld	[r0]
   12c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12c08:	f020 0107 	bic.w	r1, r0, #7
   12c0c:	f06f 0c00 	mvn.w	ip, #0
   12c10:	f010 0407 	ands.w	r4, r0, #7
   12c14:	f891 f020 	pld	[r1, #32]
   12c18:	f040 8049 	bne.w	12cae <strlen+0xae>
   12c1c:	f04f 0400 	mov.w	r4, #0
   12c20:	f06f 0007 	mvn.w	r0, #7
   12c24:	e9d1 2300 	ldrd	r2, r3, [r1]
   12c28:	f891 f040 	pld	[r1, #64]	; 0x40
   12c2c:	f100 0008 	add.w	r0, r0, #8
   12c30:	fa82 f24c 	uadd8	r2, r2, ip
   12c34:	faa4 f28c 	sel	r2, r4, ip
   12c38:	fa83 f34c 	uadd8	r3, r3, ip
   12c3c:	faa2 f38c 	sel	r3, r2, ip
   12c40:	bb4b      	cbnz	r3, 12c96 <strlen+0x96>
   12c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12c46:	fa82 f24c 	uadd8	r2, r2, ip
   12c4a:	f100 0008 	add.w	r0, r0, #8
   12c4e:	faa4 f28c 	sel	r2, r4, ip
   12c52:	fa83 f34c 	uadd8	r3, r3, ip
   12c56:	faa2 f38c 	sel	r3, r2, ip
   12c5a:	b9e3      	cbnz	r3, 12c96 <strlen+0x96>
   12c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12c60:	fa82 f24c 	uadd8	r2, r2, ip
   12c64:	f100 0008 	add.w	r0, r0, #8
   12c68:	faa4 f28c 	sel	r2, r4, ip
   12c6c:	fa83 f34c 	uadd8	r3, r3, ip
   12c70:	faa2 f38c 	sel	r3, r2, ip
   12c74:	b97b      	cbnz	r3, 12c96 <strlen+0x96>
   12c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12c7a:	f101 0120 	add.w	r1, r1, #32
   12c7e:	fa82 f24c 	uadd8	r2, r2, ip
   12c82:	f100 0008 	add.w	r0, r0, #8
   12c86:	faa4 f28c 	sel	r2, r4, ip
   12c8a:	fa83 f34c 	uadd8	r3, r3, ip
   12c8e:	faa2 f38c 	sel	r3, r2, ip
   12c92:	2b00      	cmp	r3, #0
   12c94:	d0c6      	beq.n	12c24 <strlen+0x24>
   12c96:	2a00      	cmp	r2, #0
   12c98:	bf04      	itt	eq
   12c9a:	3004      	addeq	r0, #4
   12c9c:	461a      	moveq	r2, r3
   12c9e:	ba12      	rev	r2, r2
   12ca0:	fab2 f282 	clz	r2, r2
   12ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   12ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   12cac:	4770      	bx	lr
   12cae:	e9d1 2300 	ldrd	r2, r3, [r1]
   12cb2:	f004 0503 	and.w	r5, r4, #3
   12cb6:	f1c4 0000 	rsb	r0, r4, #0
   12cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12cbe:	f014 0f04 	tst.w	r4, #4
   12cc2:	f891 f040 	pld	[r1, #64]	; 0x40
   12cc6:	fa0c f505 	lsl.w	r5, ip, r5
   12cca:	ea62 0205 	orn	r2, r2, r5
   12cce:	bf1c      	itt	ne
   12cd0:	ea63 0305 	ornne	r3, r3, r5
   12cd4:	4662      	movne	r2, ip
   12cd6:	f04f 0400 	mov.w	r4, #0
   12cda:	e7a9      	b.n	12c30 <strlen+0x30>
   12cdc:	0000      	movs	r0, r0
	...

00012ce0 <nan>:
   12ce0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 12ce8 <nan+0x8>
   12ce4:	4770      	bx	lr
   12ce6:	bf00      	nop
   12ce8:	00000000 	.word	0x00000000
   12cec:	7ff80000 	.word	0x7ff80000

00012cf0 <nanf>:
   12cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 12cf8 <nanf+0x8>
   12cf4:	4770      	bx	lr
   12cf6:	bf00      	nop
   12cf8:	7fc00000 	.word	0x7fc00000

00012cfc <__register_exitproc>:
   12cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d00:	f8df a07c 	ldr.w	sl, [pc, #124]	; 12d80 <__register_exitproc+0x84>
   12d04:	4606      	mov	r6, r0
   12d06:	f8da 0000 	ldr.w	r0, [sl]
   12d0a:	4698      	mov	r8, r3
   12d0c:	460f      	mov	r7, r1
   12d0e:	4691      	mov	r9, r2
   12d10:	f7ff fd48 	bl	127a4 <__retarget_lock_acquire_recursive>
   12d14:	4b18      	ldr	r3, [pc, #96]	; (12d78 <__register_exitproc+0x7c>)
   12d16:	681c      	ldr	r4, [r3, #0]
   12d18:	b324      	cbz	r4, 12d64 <__register_exitproc+0x68>
   12d1a:	6865      	ldr	r5, [r4, #4]
   12d1c:	2d1f      	cmp	r5, #31
   12d1e:	dc24      	bgt.n	12d6a <__register_exitproc+0x6e>
   12d20:	b95e      	cbnz	r6, 12d3a <__register_exitproc+0x3e>
   12d22:	1c6b      	adds	r3, r5, #1
   12d24:	3502      	adds	r5, #2
   12d26:	f8da 0000 	ldr.w	r0, [sl]
   12d2a:	6063      	str	r3, [r4, #4]
   12d2c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   12d30:	f7ff fd3a 	bl	127a8 <__retarget_lock_release_recursive>
   12d34:	2000      	movs	r0, #0
   12d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12d3a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   12d3e:	2301      	movs	r3, #1
   12d40:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   12d44:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   12d48:	40ab      	lsls	r3, r5
   12d4a:	431a      	orrs	r2, r3
   12d4c:	2e02      	cmp	r6, #2
   12d4e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   12d52:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   12d56:	d1e4      	bne.n	12d22 <__register_exitproc+0x26>
   12d58:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   12d5c:	431a      	orrs	r2, r3
   12d5e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   12d62:	e7de      	b.n	12d22 <__register_exitproc+0x26>
   12d64:	4c05      	ldr	r4, [pc, #20]	; (12d7c <__register_exitproc+0x80>)
   12d66:	601c      	str	r4, [r3, #0]
   12d68:	e7d7      	b.n	12d1a <__register_exitproc+0x1e>
   12d6a:	f8da 0000 	ldr.w	r0, [sl]
   12d6e:	f7ff fd1b 	bl	127a8 <__retarget_lock_release_recursive>
   12d72:	f04f 30ff 	mov.w	r0, #4294967295
   12d76:	e7de      	b.n	12d36 <__register_exitproc+0x3a>
   12d78:	20018dcc 	.word	0x20018dcc
   12d7c:	20018dd0 	.word	0x20018dd0
   12d80:	20008f68 	.word	0x20008f68

00012d84 <_malloc_trim_r>:
   12d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d86:	4f24      	ldr	r7, [pc, #144]	; (12e18 <_malloc_trim_r+0x94>)
   12d88:	460c      	mov	r4, r1
   12d8a:	4606      	mov	r6, r0
   12d8c:	f7fd fe90 	bl	10ab0 <__malloc_lock>
   12d90:	68bb      	ldr	r3, [r7, #8]
   12d92:	685d      	ldr	r5, [r3, #4]
   12d94:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   12d98:	310f      	adds	r1, #15
   12d9a:	f025 0503 	bic.w	r5, r5, #3
   12d9e:	194b      	adds	r3, r1, r5
   12da0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   12da4:	f023 030f 	bic.w	r3, r3, #15
   12da8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   12dac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   12db0:	db07      	blt.n	12dc2 <_malloc_trim_r+0x3e>
   12db2:	2100      	movs	r1, #0
   12db4:	4630      	mov	r0, r6
   12db6:	f7ff fc9f 	bl	126f8 <_sbrk_r>
   12dba:	68bb      	ldr	r3, [r7, #8]
   12dbc:	442b      	add	r3, r5
   12dbe:	4298      	cmp	r0, r3
   12dc0:	d004      	beq.n	12dcc <_malloc_trim_r+0x48>
   12dc2:	4630      	mov	r0, r6
   12dc4:	f7fd fe7a 	bl	10abc <__malloc_unlock>
   12dc8:	2000      	movs	r0, #0
   12dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dcc:	4261      	negs	r1, r4
   12dce:	4630      	mov	r0, r6
   12dd0:	f7ff fc92 	bl	126f8 <_sbrk_r>
   12dd4:	3001      	adds	r0, #1
   12dd6:	d00d      	beq.n	12df4 <_malloc_trim_r+0x70>
   12dd8:	4a10      	ldr	r2, [pc, #64]	; (12e1c <_malloc_trim_r+0x98>)
   12dda:	68bb      	ldr	r3, [r7, #8]
   12ddc:	1b2d      	subs	r5, r5, r4
   12dde:	f045 0501 	orr.w	r5, r5, #1
   12de2:	605d      	str	r5, [r3, #4]
   12de4:	6813      	ldr	r3, [r2, #0]
   12de6:	4630      	mov	r0, r6
   12de8:	1b1b      	subs	r3, r3, r4
   12dea:	6013      	str	r3, [r2, #0]
   12dec:	f7fd fe66 	bl	10abc <__malloc_unlock>
   12df0:	2001      	movs	r0, #1
   12df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12df4:	2100      	movs	r1, #0
   12df6:	4630      	mov	r0, r6
   12df8:	f7ff fc7e 	bl	126f8 <_sbrk_r>
   12dfc:	68ba      	ldr	r2, [r7, #8]
   12dfe:	1a83      	subs	r3, r0, r2
   12e00:	2b0f      	cmp	r3, #15
   12e02:	ddde      	ble.n	12dc2 <_malloc_trim_r+0x3e>
   12e04:	f043 0301 	orr.w	r3, r3, #1
   12e08:	6053      	str	r3, [r2, #4]
   12e0a:	4b05      	ldr	r3, [pc, #20]	; (12e20 <_malloc_trim_r+0x9c>)
   12e0c:	4903      	ldr	r1, [pc, #12]	; (12e1c <_malloc_trim_r+0x98>)
   12e0e:	681b      	ldr	r3, [r3, #0]
   12e10:	1ac0      	subs	r0, r0, r3
   12e12:	6008      	str	r0, [r1, #0]
   12e14:	e7d5      	b.n	12dc2 <_malloc_trim_r+0x3e>
   12e16:	bf00      	nop
   12e18:	200090e0 	.word	0x200090e0
   12e1c:	20018f6c 	.word	0x20018f6c
   12e20:	200094e8 	.word	0x200094e8

00012e24 <_free_r>:
   12e24:	2900      	cmp	r1, #0
   12e26:	d061      	beq.n	12eec <_free_r+0xc8>
   12e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e2a:	460c      	mov	r4, r1
   12e2c:	4606      	mov	r6, r0
   12e2e:	f7fd fe3f 	bl	10ab0 <__malloc_lock>
   12e32:	f854 2c04 	ldr.w	r2, [r4, #-4]
   12e36:	4f7b      	ldr	r7, [pc, #492]	; (13024 <_free_r+0x200>)
   12e38:	f1a4 0508 	sub.w	r5, r4, #8
   12e3c:	f022 0101 	bic.w	r1, r2, #1
   12e40:	eb05 0c01 	add.w	ip, r5, r1
   12e44:	68b8      	ldr	r0, [r7, #8]
   12e46:	f8dc 3004 	ldr.w	r3, [ip, #4]
   12e4a:	4560      	cmp	r0, ip
   12e4c:	f023 0303 	bic.w	r3, r3, #3
   12e50:	f000 808b 	beq.w	12f6a <_free_r+0x146>
   12e54:	07d2      	lsls	r2, r2, #31
   12e56:	f8cc 3004 	str.w	r3, [ip, #4]
   12e5a:	d432      	bmi.n	12ec2 <_free_r+0x9e>
   12e5c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12e60:	1aad      	subs	r5, r5, r2
   12e62:	4411      	add	r1, r2
   12e64:	68aa      	ldr	r2, [r5, #8]
   12e66:	f107 0008 	add.w	r0, r7, #8
   12e6a:	4282      	cmp	r2, r0
   12e6c:	d06a      	beq.n	12f44 <_free_r+0x120>
   12e6e:	eb0c 0403 	add.w	r4, ip, r3
   12e72:	f8d4 e004 	ldr.w	lr, [r4, #4]
   12e76:	68ec      	ldr	r4, [r5, #12]
   12e78:	60d4      	str	r4, [r2, #12]
   12e7a:	f01e 0f01 	tst.w	lr, #1
   12e7e:	60a2      	str	r2, [r4, #8]
   12e80:	f000 8097 	beq.w	12fb2 <_free_r+0x18e>
   12e84:	f041 0301 	orr.w	r3, r1, #1
   12e88:	606b      	str	r3, [r5, #4]
   12e8a:	f8cc 1000 	str.w	r1, [ip]
   12e8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12e92:	d235      	bcs.n	12f00 <_free_r+0xdc>
   12e94:	6878      	ldr	r0, [r7, #4]
   12e96:	08cb      	lsrs	r3, r1, #3
   12e98:	2201      	movs	r2, #1
   12e9a:	0949      	lsrs	r1, r1, #5
   12e9c:	3301      	adds	r3, #1
   12e9e:	408a      	lsls	r2, r1
   12ea0:	4302      	orrs	r2, r0
   12ea2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   12ea6:	607a      	str	r2, [r7, #4]
   12ea8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   12eac:	3a08      	subs	r2, #8
   12eae:	e9c5 1202 	strd	r1, r2, [r5, #8]
   12eb2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   12eb6:	60cd      	str	r5, [r1, #12]
   12eb8:	4630      	mov	r0, r6
   12eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12ebe:	f7fd bdfd 	b.w	10abc <__malloc_unlock>
   12ec2:	eb0c 0203 	add.w	r2, ip, r3
   12ec6:	6852      	ldr	r2, [r2, #4]
   12ec8:	07d0      	lsls	r0, r2, #31
   12eca:	d410      	bmi.n	12eee <_free_r+0xca>
   12ecc:	4419      	add	r1, r3
   12ece:	f107 0008 	add.w	r0, r7, #8
   12ed2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   12ed6:	4283      	cmp	r3, r0
   12ed8:	d073      	beq.n	12fc2 <_free_r+0x19e>
   12eda:	f8dc 200c 	ldr.w	r2, [ip, #12]
   12ede:	60da      	str	r2, [r3, #12]
   12ee0:	6093      	str	r3, [r2, #8]
   12ee2:	f041 0301 	orr.w	r3, r1, #1
   12ee6:	606b      	str	r3, [r5, #4]
   12ee8:	5069      	str	r1, [r5, r1]
   12eea:	e7d0      	b.n	12e8e <_free_r+0x6a>
   12eec:	4770      	bx	lr
   12eee:	f041 0301 	orr.w	r3, r1, #1
   12ef2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12ef6:	f844 3c04 	str.w	r3, [r4, #-4]
   12efa:	f8cc 1000 	str.w	r1, [ip]
   12efe:	d3c9      	bcc.n	12e94 <_free_r+0x70>
   12f00:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   12f04:	ea4f 2351 	mov.w	r3, r1, lsr #9
   12f08:	d248      	bcs.n	12f9c <_free_r+0x178>
   12f0a:	098b      	lsrs	r3, r1, #6
   12f0c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   12f10:	f103 0238 	add.w	r2, r3, #56	; 0x38
   12f14:	00c3      	lsls	r3, r0, #3
   12f16:	18f8      	adds	r0, r7, r3
   12f18:	58fb      	ldr	r3, [r7, r3]
   12f1a:	3808      	subs	r0, #8
   12f1c:	4298      	cmp	r0, r3
   12f1e:	d059      	beq.n	12fd4 <_free_r+0x1b0>
   12f20:	685a      	ldr	r2, [r3, #4]
   12f22:	f022 0203 	bic.w	r2, r2, #3
   12f26:	428a      	cmp	r2, r1
   12f28:	d902      	bls.n	12f30 <_free_r+0x10c>
   12f2a:	689b      	ldr	r3, [r3, #8]
   12f2c:	4298      	cmp	r0, r3
   12f2e:	d1f7      	bne.n	12f20 <_free_r+0xfc>
   12f30:	68d8      	ldr	r0, [r3, #12]
   12f32:	e9c5 3002 	strd	r3, r0, [r5, #8]
   12f36:	6085      	str	r5, [r0, #8]
   12f38:	60dd      	str	r5, [r3, #12]
   12f3a:	4630      	mov	r0, r6
   12f3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12f40:	f7fd bdbc 	b.w	10abc <__malloc_unlock>
   12f44:	eb0c 0203 	add.w	r2, ip, r3
   12f48:	6852      	ldr	r2, [r2, #4]
   12f4a:	07d2      	lsls	r2, r2, #31
   12f4c:	d463      	bmi.n	13016 <_free_r+0x1f2>
   12f4e:	440b      	add	r3, r1
   12f50:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   12f54:	60ca      	str	r2, [r1, #12]
   12f56:	6091      	str	r1, [r2, #8]
   12f58:	f043 0201 	orr.w	r2, r3, #1
   12f5c:	606a      	str	r2, [r5, #4]
   12f5e:	4630      	mov	r0, r6
   12f60:	50eb      	str	r3, [r5, r3]
   12f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12f66:	f7fd bda9 	b.w	10abc <__malloc_unlock>
   12f6a:	440b      	add	r3, r1
   12f6c:	07d1      	lsls	r1, r2, #31
   12f6e:	d407      	bmi.n	12f80 <_free_r+0x15c>
   12f70:	f854 2c08 	ldr.w	r2, [r4, #-8]
   12f74:	1aad      	subs	r5, r5, r2
   12f76:	4413      	add	r3, r2
   12f78:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   12f7c:	60ca      	str	r2, [r1, #12]
   12f7e:	6091      	str	r1, [r2, #8]
   12f80:	f043 0201 	orr.w	r2, r3, #1
   12f84:	606a      	str	r2, [r5, #4]
   12f86:	4a28      	ldr	r2, [pc, #160]	; (13028 <_free_r+0x204>)
   12f88:	60bd      	str	r5, [r7, #8]
   12f8a:	6812      	ldr	r2, [r2, #0]
   12f8c:	429a      	cmp	r2, r3
   12f8e:	d893      	bhi.n	12eb8 <_free_r+0x94>
   12f90:	4b26      	ldr	r3, [pc, #152]	; (1302c <_free_r+0x208>)
   12f92:	4630      	mov	r0, r6
   12f94:	6819      	ldr	r1, [r3, #0]
   12f96:	f7ff fef5 	bl	12d84 <_malloc_trim_r>
   12f9a:	e78d      	b.n	12eb8 <_free_r+0x94>
   12f9c:	2b14      	cmp	r3, #20
   12f9e:	d90a      	bls.n	12fb6 <_free_r+0x192>
   12fa0:	2b54      	cmp	r3, #84	; 0x54
   12fa2:	d81f      	bhi.n	12fe4 <_free_r+0x1c0>
   12fa4:	0b0b      	lsrs	r3, r1, #12
   12fa6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   12faa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   12fae:	00c3      	lsls	r3, r0, #3
   12fb0:	e7b1      	b.n	12f16 <_free_r+0xf2>
   12fb2:	4419      	add	r1, r3
   12fb4:	e78d      	b.n	12ed2 <_free_r+0xae>
   12fb6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   12fba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   12fbe:	00c3      	lsls	r3, r0, #3
   12fc0:	e7a9      	b.n	12f16 <_free_r+0xf2>
   12fc2:	f041 0301 	orr.w	r3, r1, #1
   12fc6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   12fca:	e9c5 0002 	strd	r0, r0, [r5, #8]
   12fce:	606b      	str	r3, [r5, #4]
   12fd0:	5069      	str	r1, [r5, r1]
   12fd2:	e771      	b.n	12eb8 <_free_r+0x94>
   12fd4:	6879      	ldr	r1, [r7, #4]
   12fd6:	1092      	asrs	r2, r2, #2
   12fd8:	2401      	movs	r4, #1
   12fda:	fa04 f202 	lsl.w	r2, r4, r2
   12fde:	430a      	orrs	r2, r1
   12fe0:	607a      	str	r2, [r7, #4]
   12fe2:	e7a6      	b.n	12f32 <_free_r+0x10e>
   12fe4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12fe8:	d806      	bhi.n	12ff8 <_free_r+0x1d4>
   12fea:	0bcb      	lsrs	r3, r1, #15
   12fec:	f103 0078 	add.w	r0, r3, #120	; 0x78
   12ff0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   12ff4:	00c3      	lsls	r3, r0, #3
   12ff6:	e78e      	b.n	12f16 <_free_r+0xf2>
   12ff8:	f240 5254 	movw	r2, #1364	; 0x554
   12ffc:	4293      	cmp	r3, r2
   12ffe:	d806      	bhi.n	1300e <_free_r+0x1ea>
   13000:	0c8b      	lsrs	r3, r1, #18
   13002:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   13006:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   1300a:	00c3      	lsls	r3, r0, #3
   1300c:	e783      	b.n	12f16 <_free_r+0xf2>
   1300e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   13012:	227e      	movs	r2, #126	; 0x7e
   13014:	e77f      	b.n	12f16 <_free_r+0xf2>
   13016:	f041 0301 	orr.w	r3, r1, #1
   1301a:	606b      	str	r3, [r5, #4]
   1301c:	f8cc 1000 	str.w	r1, [ip]
   13020:	e74a      	b.n	12eb8 <_free_r+0x94>
   13022:	bf00      	nop
   13024:	200090e0 	.word	0x200090e0
   13028:	200094ec 	.word	0x200094ec
   1302c:	20018f9c 	.word	0x20018f9c

00013030 <rshift>:
   13030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13034:	6904      	ldr	r4, [r0, #16]
   13036:	ebb4 1f61 	cmp.w	r4, r1, asr #5
   1303a:	dd2f      	ble.n	1309c <rshift+0x6c>
   1303c:	f100 0e14 	add.w	lr, r0, #20
   13040:	114e      	asrs	r6, r1, #5
   13042:	f011 0c1f 	ands.w	ip, r1, #31
   13046:	eb0e 0584 	add.w	r5, lr, r4, lsl #2
   1304a:	eb0e 0386 	add.w	r3, lr, r6, lsl #2
   1304e:	d02b      	beq.n	130a8 <rshift+0x78>
   13050:	f85e 1026 	ldr.w	r1, [lr, r6, lsl #2]
   13054:	3304      	adds	r3, #4
   13056:	429d      	cmp	r5, r3
   13058:	fa21 f10c 	lsr.w	r1, r1, ip
   1305c:	f1cc 0820 	rsb	r8, ip, #32
   13060:	d918      	bls.n	13094 <rshift+0x64>
   13062:	4677      	mov	r7, lr
   13064:	681a      	ldr	r2, [r3, #0]
   13066:	fa02 f208 	lsl.w	r2, r2, r8
   1306a:	430a      	orrs	r2, r1
   1306c:	f847 2b04 	str.w	r2, [r7], #4
   13070:	f853 1b04 	ldr.w	r1, [r3], #4
   13074:	429d      	cmp	r5, r3
   13076:	fa21 f10c 	lsr.w	r1, r1, ip
   1307a:	d8f3      	bhi.n	13064 <rshift+0x34>
   1307c:	1ba3      	subs	r3, r4, r6
   1307e:	009b      	lsls	r3, r3, #2
   13080:	3b05      	subs	r3, #5
   13082:	089b      	lsrs	r3, r3, #2
   13084:	3301      	adds	r3, #1
   13086:	eb0e 0483 	add.w	r4, lr, r3, lsl #2
   1308a:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
   1308e:	b1c9      	cbz	r1, 130c4 <rshift+0x94>
   13090:	3404      	adds	r4, #4
   13092:	e017      	b.n	130c4 <rshift+0x94>
   13094:	6141      	str	r1, [r0, #20]
   13096:	4674      	mov	r4, lr
   13098:	2900      	cmp	r1, #0
   1309a:	d1f9      	bne.n	13090 <rshift+0x60>
   1309c:	2300      	movs	r3, #0
   1309e:	6103      	str	r3, [r0, #16]
   130a0:	2300      	movs	r3, #0
   130a2:	6143      	str	r3, [r0, #20]
   130a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130a8:	429d      	cmp	r5, r3
   130aa:	bf88      	it	hi
   130ac:	f100 0210 	addhi.w	r2, r0, #16
   130b0:	d9f4      	bls.n	1309c <rshift+0x6c>
   130b2:	f853 1b04 	ldr.w	r1, [r3], #4
   130b6:	f842 1f04 	str.w	r1, [r2, #4]!
   130ba:	429d      	cmp	r5, r3
   130bc:	d8f9      	bhi.n	130b2 <rshift+0x82>
   130be:	1ba4      	subs	r4, r4, r6
   130c0:	eb0e 0484 	add.w	r4, lr, r4, lsl #2
   130c4:	eba4 030e 	sub.w	r3, r4, lr
   130c8:	109b      	asrs	r3, r3, #2
   130ca:	4574      	cmp	r4, lr
   130cc:	6103      	str	r3, [r0, #16]
   130ce:	d0e7      	beq.n	130a0 <rshift+0x70>
   130d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000130d4 <__gethex>:
   130d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130d8:	ed2d 8b02 	vpush	{d8}
   130dc:	680c      	ldr	r4, [r1, #0]
   130de:	468b      	mov	fp, r1
   130e0:	78a1      	ldrb	r1, [r4, #2]
   130e2:	b085      	sub	sp, #20
   130e4:	2930      	cmp	r1, #48	; 0x30
   130e6:	ee08 0a10 	vmov	s16, r0
   130ea:	4692      	mov	sl, r2
   130ec:	9302      	str	r3, [sp, #8]
   130ee:	f040 81ce 	bne.w	1348e <__gethex+0x3ba>
   130f2:	f06f 0001 	mvn.w	r0, #1
   130f6:	1b00      	subs	r0, r0, r4
   130f8:	1ce2      	adds	r2, r4, #3
   130fa:	1883      	adds	r3, r0, r2
   130fc:	4614      	mov	r4, r2
   130fe:	f812 1b01 	ldrb.w	r1, [r2], #1
   13102:	2930      	cmp	r1, #48	; 0x30
   13104:	d0f9      	beq.n	130fa <__gethex+0x26>
   13106:	f8df 8300 	ldr.w	r8, [pc, #768]	; 13408 <__gethex+0x334>
   1310a:	f818 2001 	ldrb.w	r2, [r8, r1]
   1310e:	2a00      	cmp	r2, #0
   13110:	f000 80e5 	beq.w	132de <__gethex+0x20a>
   13114:	7822      	ldrb	r2, [r4, #0]
   13116:	2700      	movs	r7, #0
   13118:	f818 2002 	ldrb.w	r2, [r8, r2]
   1311c:	463d      	mov	r5, r7
   1311e:	4626      	mov	r6, r4
   13120:	b12a      	cbz	r2, 1312e <__gethex+0x5a>
   13122:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   13126:	f818 2002 	ldrb.w	r2, [r8, r2]
   1312a:	2a00      	cmp	r2, #0
   1312c:	d1f9      	bne.n	13122 <__gethex+0x4e>
   1312e:	49b5      	ldr	r1, [pc, #724]	; (13404 <__gethex+0x330>)
   13130:	9301      	str	r3, [sp, #4]
   13132:	2201      	movs	r2, #1
   13134:	4630      	mov	r0, r6
   13136:	f7ff fa23 	bl	12580 <strncmp>
   1313a:	9b01      	ldr	r3, [sp, #4]
   1313c:	4681      	mov	r9, r0
   1313e:	2800      	cmp	r0, #0
   13140:	d04d      	beq.n	131de <__gethex+0x10a>
   13142:	2d00      	cmp	r5, #0
   13144:	d14e      	bne.n	131e4 <__gethex+0x110>
   13146:	7832      	ldrb	r2, [r6, #0]
   13148:	46a9      	mov	r9, r5
   1314a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1314e:	2a50      	cmp	r2, #80	; 0x50
   13150:	4635      	mov	r5, r6
   13152:	d050      	beq.n	131f6 <__gethex+0x122>
   13154:	f8cb 6000 	str.w	r6, [fp]
   13158:	2f00      	cmp	r7, #0
   1315a:	d169      	bne.n	13230 <__gethex+0x15c>
   1315c:	1b2b      	subs	r3, r5, r4
   1315e:	3b01      	subs	r3, #1
   13160:	2b07      	cmp	r3, #7
   13162:	4639      	mov	r1, r7
   13164:	dd04      	ble.n	13170 <__gethex+0x9c>
   13166:	105b      	asrs	r3, r3, #1
   13168:	2b07      	cmp	r3, #7
   1316a:	f101 0101 	add.w	r1, r1, #1
   1316e:	dcfa      	bgt.n	13166 <__gethex+0x92>
   13170:	ee18 0a10 	vmov	r0, s16
   13174:	f000 fb82 	bl	1387c <_Balloc>
   13178:	4683      	mov	fp, r0
   1317a:	2800      	cmp	r0, #0
   1317c:	f000 8266 	beq.w	1364c <__gethex+0x578>
   13180:	f100 0614 	add.w	r6, r0, #20
   13184:	42ac      	cmp	r4, r5
   13186:	9601      	str	r6, [sp, #4]
   13188:	f080 81d2 	bcs.w	13530 <__gethex+0x45c>
   1318c:	2700      	movs	r7, #0
   1318e:	f8cd 900c 	str.w	r9, [sp, #12]
   13192:	499c      	ldr	r1, [pc, #624]	; (13404 <__gethex+0x330>)
   13194:	46a1      	mov	r9, r4
   13196:	463c      	mov	r4, r7
   13198:	e00c      	b.n	131b4 <__gethex+0xe0>
   1319a:	2f20      	cmp	r7, #32
   1319c:	d019      	beq.n	131d2 <__gethex+0xfe>
   1319e:	4638      	mov	r0, r7
   131a0:	3704      	adds	r7, #4
   131a2:	782a      	ldrb	r2, [r5, #0]
   131a4:	f818 2002 	ldrb.w	r2, [r8, r2]
   131a8:	f002 020f 	and.w	r2, r2, #15
   131ac:	4082      	lsls	r2, r0
   131ae:	4314      	orrs	r4, r2
   131b0:	454d      	cmp	r5, r9
   131b2:	d047      	beq.n	13244 <__gethex+0x170>
   131b4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
   131b8:	2a2e      	cmp	r2, #46	; 0x2e
   131ba:	d1ee      	bne.n	1319a <__gethex+0xc6>
   131bc:	454d      	cmp	r5, r9
   131be:	d3ec      	bcc.n	1319a <__gethex+0xc6>
   131c0:	2201      	movs	r2, #1
   131c2:	4628      	mov	r0, r5
   131c4:	f7ff f9dc 	bl	12580 <strncmp>
   131c8:	498e      	ldr	r1, [pc, #568]	; (13404 <__gethex+0x330>)
   131ca:	2800      	cmp	r0, #0
   131cc:	d0f0      	beq.n	131b0 <__gethex+0xdc>
   131ce:	2f20      	cmp	r7, #32
   131d0:	d1e5      	bne.n	1319e <__gethex+0xca>
   131d2:	2000      	movs	r0, #0
   131d4:	f846 4b04 	str.w	r4, [r6], #4
   131d8:	2704      	movs	r7, #4
   131da:	4604      	mov	r4, r0
   131dc:	e7e1      	b.n	131a2 <__gethex+0xce>
   131de:	2d00      	cmp	r5, #0
   131e0:	f000 8142 	beq.w	13468 <__gethex+0x394>
   131e4:	7832      	ldrb	r2, [r6, #0]
   131e6:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   131ea:	1bad      	subs	r5, r5, r6
   131ec:	2a50      	cmp	r2, #80	; 0x50
   131ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
   131f2:	4635      	mov	r5, r6
   131f4:	d1ae      	bne.n	13154 <__gethex+0x80>
   131f6:	786a      	ldrb	r2, [r5, #1]
   131f8:	2a2b      	cmp	r2, #43	; 0x2b
   131fa:	f000 8125 	beq.w	13448 <__gethex+0x374>
   131fe:	2a2d      	cmp	r2, #45	; 0x2d
   13200:	f000 80a5 	beq.w	1334e <__gethex+0x27a>
   13204:	1c6e      	adds	r6, r5, #1
   13206:	2000      	movs	r0, #0
   13208:	f818 1002 	ldrb.w	r1, [r8, r2]
   1320c:	1e4a      	subs	r2, r1, #1
   1320e:	2a18      	cmp	r2, #24
   13210:	f200 809b 	bhi.w	1334a <__gethex+0x276>
   13214:	7872      	ldrb	r2, [r6, #1]
   13216:	f818 2002 	ldrb.w	r2, [r8, r2]
   1321a:	3910      	subs	r1, #16
   1321c:	3601      	adds	r6, #1
   1321e:	2a00      	cmp	r2, #0
   13220:	d15a      	bne.n	132d8 <__gethex+0x204>
   13222:	b100      	cbz	r0, 13226 <__gethex+0x152>
   13224:	4249      	negs	r1, r1
   13226:	4489      	add	r9, r1
   13228:	f8cb 6000 	str.w	r6, [fp]
   1322c:	2f00      	cmp	r7, #0
   1322e:	d095      	beq.n	1315c <__gethex+0x88>
   13230:	2b00      	cmp	r3, #0
   13232:	bf14      	ite	ne
   13234:	2500      	movne	r5, #0
   13236:	2506      	moveq	r5, #6
   13238:	4628      	mov	r0, r5
   1323a:	b005      	add	sp, #20
   1323c:	ecbd 8b02 	vpop	{d8}
   13240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13244:	f8dd 900c 	ldr.w	r9, [sp, #12]
   13248:	4623      	mov	r3, r4
   1324a:	f846 3b04 	str.w	r3, [r6], #4
   1324e:	4618      	mov	r0, r3
   13250:	9b01      	ldr	r3, [sp, #4]
   13252:	1af6      	subs	r6, r6, r3
   13254:	10b6      	asrs	r6, r6, #2
   13256:	f8cb 6010 	str.w	r6, [fp, #16]
   1325a:	f000 fbe9 	bl	13a30 <__hi0bits>
   1325e:	0176      	lsls	r6, r6, #5
   13260:	f8da 4000 	ldr.w	r4, [sl]
   13264:	1a30      	subs	r0, r6, r0
   13266:	42a0      	cmp	r0, r4
   13268:	dc75      	bgt.n	13356 <__gethex+0x282>
   1326a:	f2c0 80ef 	blt.w	1344c <__gethex+0x378>
   1326e:	2700      	movs	r7, #0
   13270:	f8da 3008 	ldr.w	r3, [sl, #8]
   13274:	454b      	cmp	r3, r9
   13276:	f2c0 8151 	blt.w	1351c <__gethex+0x448>
   1327a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1327e:	454b      	cmp	r3, r9
   13280:	dd4a      	ble.n	13318 <__gethex+0x244>
   13282:	eba3 0909 	sub.w	r9, r3, r9
   13286:	454c      	cmp	r4, r9
   13288:	f300 8082 	bgt.w	13390 <__gethex+0x2bc>
   1328c:	f8da 200c 	ldr.w	r2, [sl, #12]
   13290:	2a02      	cmp	r2, #2
   13292:	f000 8165 	beq.w	13560 <__gethex+0x48c>
   13296:	2a03      	cmp	r2, #3
   13298:	f000 8181 	beq.w	1359e <__gethex+0x4ca>
   1329c:	2a01      	cmp	r2, #1
   1329e:	f000 816f 	beq.w	13580 <__gethex+0x4ac>
   132a2:	ee18 0a10 	vmov	r0, s16
   132a6:	4659      	mov	r1, fp
   132a8:	f000 fb0e 	bl	138c8 <_Bfree>
   132ac:	2550      	movs	r5, #80	; 0x50
   132ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   132b0:	2300      	movs	r3, #0
   132b2:	4628      	mov	r0, r5
   132b4:	6013      	str	r3, [r2, #0]
   132b6:	b005      	add	sp, #20
   132b8:	ecbd 8b02 	vpop	{d8}
   132bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   132c4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   132c8:	f1a2 0110 	sub.w	r1, r2, #16
   132cc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   132d0:	f818 2002 	ldrb.w	r2, [r8, r2]
   132d4:	2a00      	cmp	r2, #0
   132d6:	d0a4      	beq.n	13222 <__gethex+0x14e>
   132d8:	2a19      	cmp	r2, #25
   132da:	ddf1      	ble.n	132c0 <__gethex+0x1ec>
   132dc:	e7a1      	b.n	13222 <__gethex+0x14e>
   132de:	4949      	ldr	r1, [pc, #292]	; (13404 <__gethex+0x330>)
   132e0:	9301      	str	r3, [sp, #4]
   132e2:	2201      	movs	r2, #1
   132e4:	4620      	mov	r0, r4
   132e6:	f7ff f94b 	bl	12580 <strncmp>
   132ea:	9b01      	ldr	r3, [sp, #4]
   132ec:	2800      	cmp	r0, #0
   132ee:	d16d      	bne.n	133cc <__gethex+0x2f8>
   132f0:	7861      	ldrb	r1, [r4, #1]
   132f2:	f818 2001 	ldrb.w	r2, [r8, r1]
   132f6:	1c65      	adds	r5, r4, #1
   132f8:	2a00      	cmp	r2, #0
   132fa:	d069      	beq.n	133d0 <__gethex+0x2fc>
   132fc:	2930      	cmp	r1, #48	; 0x30
   132fe:	462c      	mov	r4, r5
   13300:	d105      	bne.n	1330e <__gethex+0x23a>
   13302:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13306:	2b30      	cmp	r3, #48	; 0x30
   13308:	d0fb      	beq.n	13302 <__gethex+0x22e>
   1330a:	f818 2003 	ldrb.w	r2, [r8, r3]
   1330e:	fab2 f782 	clz	r7, r2
   13312:	097f      	lsrs	r7, r7, #5
   13314:	2301      	movs	r3, #1
   13316:	e702      	b.n	1311e <__gethex+0x4a>
   13318:	2501      	movs	r5, #1
   1331a:	b157      	cbz	r7, 13332 <__gethex+0x25e>
   1331c:	f8da 300c 	ldr.w	r3, [sl, #12]
   13320:	2b02      	cmp	r3, #2
   13322:	d05d      	beq.n	133e0 <__gethex+0x30c>
   13324:	2b03      	cmp	r3, #3
   13326:	d05f      	beq.n	133e8 <__gethex+0x314>
   13328:	2b01      	cmp	r3, #1
   1332a:	f000 8084 	beq.w	13436 <__gethex+0x362>
   1332e:	f045 0510 	orr.w	r5, r5, #16
   13332:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13334:	f8c3 b000 	str.w	fp, [r3]
   13338:	9b02      	ldr	r3, [sp, #8]
   1333a:	4628      	mov	r0, r5
   1333c:	f8c3 9000 	str.w	r9, [r3]
   13340:	b005      	add	sp, #20
   13342:	ecbd 8b02 	vpop	{d8}
   13346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1334a:	462e      	mov	r6, r5
   1334c:	e702      	b.n	13154 <__gethex+0x80>
   1334e:	2001      	movs	r0, #1
   13350:	78aa      	ldrb	r2, [r5, #2]
   13352:	1cae      	adds	r6, r5, #2
   13354:	e758      	b.n	13208 <__gethex+0x134>
   13356:	1b06      	subs	r6, r0, r4
   13358:	4631      	mov	r1, r6
   1335a:	4658      	mov	r0, fp
   1335c:	f000 ff96 	bl	1428c <__any_on>
   13360:	4607      	mov	r7, r0
   13362:	b178      	cbz	r0, 13384 <__gethex+0x2b0>
   13364:	1e72      	subs	r2, r6, #1
   13366:	1153      	asrs	r3, r2, #5
   13368:	9901      	ldr	r1, [sp, #4]
   1336a:	2701      	movs	r7, #1
   1336c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   13370:	f002 031f 	and.w	r3, r2, #31
   13374:	fa07 f303 	lsl.w	r3, r7, r3
   13378:	420b      	tst	r3, r1
   1337a:	d003      	beq.n	13384 <__gethex+0x2b0>
   1337c:	42ba      	cmp	r2, r7
   1337e:	f300 80e2 	bgt.w	13546 <__gethex+0x472>
   13382:	2702      	movs	r7, #2
   13384:	4631      	mov	r1, r6
   13386:	4658      	mov	r0, fp
   13388:	44b1      	add	r9, r6
   1338a:	f7ff fe51 	bl	13030 <rshift>
   1338e:	e76f      	b.n	13270 <__gethex+0x19c>
   13390:	f109 35ff 	add.w	r5, r9, #4294967295
   13394:	2f00      	cmp	r7, #0
   13396:	f040 80ce 	bne.w	13536 <__gethex+0x462>
   1339a:	2d00      	cmp	r5, #0
   1339c:	f040 80cd 	bne.w	1353a <__gethex+0x466>
   133a0:	116b      	asrs	r3, r5, #5
   133a2:	9a01      	ldr	r2, [sp, #4]
   133a4:	f005 051f 	and.w	r5, r5, #31
   133a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   133ac:	2301      	movs	r3, #1
   133ae:	40ab      	lsls	r3, r5
   133b0:	4213      	tst	r3, r2
   133b2:	4649      	mov	r1, r9
   133b4:	4658      	mov	r0, fp
   133b6:	bf18      	it	ne
   133b8:	f047 0702 	orrne.w	r7, r7, #2
   133bc:	eba4 0409 	sub.w	r4, r4, r9
   133c0:	f7ff fe36 	bl	13030 <rshift>
   133c4:	2502      	movs	r5, #2
   133c6:	f8da 9004 	ldr.w	r9, [sl, #4]
   133ca:	e7a6      	b.n	1331a <__gethex+0x246>
   133cc:	7821      	ldrb	r1, [r4, #0]
   133ce:	4625      	mov	r5, r4
   133d0:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   133d4:	2950      	cmp	r1, #80	; 0x50
   133d6:	f000 80bf 	beq.w	13558 <__gethex+0x484>
   133da:	f8cb 5000 	str.w	r5, [fp]
   133de:	e727      	b.n	13230 <__gethex+0x15c>
   133e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   133e2:	f1c3 0301 	rsb	r3, r3, #1
   133e6:	9311      	str	r3, [sp, #68]	; 0x44
   133e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   133ea:	2b00      	cmp	r3, #0
   133ec:	d09f      	beq.n	1332e <__gethex+0x25a>
   133ee:	f8db 7010 	ldr.w	r7, [fp, #16]
   133f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   133f6:	00ba      	lsls	r2, r7, #2
   133f8:	4643      	mov	r3, r8
   133fa:	9201      	str	r2, [sp, #4]
   133fc:	eb08 0087 	add.w	r0, r8, r7, lsl #2
   13400:	2100      	movs	r1, #0
   13402:	e007      	b.n	13414 <__gethex+0x340>
   13404:	20008300 	.word	0x20008300
   13408:	20000ef0 	.word	0x20000ef0
   1340c:	4298      	cmp	r0, r3
   1340e:	f843 1c04 	str.w	r1, [r3, #-4]
   13412:	d93f      	bls.n	13494 <__gethex+0x3c0>
   13414:	461e      	mov	r6, r3
   13416:	f853 2b04 	ldr.w	r2, [r3], #4
   1341a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1341e:	d0f5      	beq.n	1340c <__gethex+0x338>
   13420:	3201      	adds	r2, #1
   13422:	2d02      	cmp	r5, #2
   13424:	6032      	str	r2, [r6, #0]
   13426:	f000 80bf 	beq.w	135a8 <__gethex+0x4d4>
   1342a:	f014 041f 	ands.w	r4, r4, #31
   1342e:	f040 80e7 	bne.w	13600 <__gethex+0x52c>
   13432:	2521      	movs	r5, #33	; 0x21
   13434:	e77d      	b.n	13332 <__gethex+0x25e>
   13436:	07ba      	lsls	r2, r7, #30
   13438:	f57f af79 	bpl.w	1332e <__gethex+0x25a>
   1343c:	9b01      	ldr	r3, [sp, #4]
   1343e:	681b      	ldr	r3, [r3, #0]
   13440:	431f      	orrs	r7, r3
   13442:	07fb      	lsls	r3, r7, #31
   13444:	d4d3      	bmi.n	133ee <__gethex+0x31a>
   13446:	e772      	b.n	1332e <__gethex+0x25a>
   13448:	2000      	movs	r0, #0
   1344a:	e781      	b.n	13350 <__gethex+0x27c>
   1344c:	1a22      	subs	r2, r4, r0
   1344e:	4659      	mov	r1, fp
   13450:	ee18 0a10 	vmov	r0, s16
   13454:	eba9 0902 	sub.w	r9, r9, r2
   13458:	f000 fc76 	bl	13d48 <__lshift>
   1345c:	f100 0314 	add.w	r3, r0, #20
   13460:	4683      	mov	fp, r0
   13462:	9301      	str	r3, [sp, #4]
   13464:	2700      	movs	r7, #0
   13466:	e703      	b.n	13270 <__gethex+0x19c>
   13468:	7872      	ldrb	r2, [r6, #1]
   1346a:	f818 0002 	ldrb.w	r0, [r8, r2]
   1346e:	1c71      	adds	r1, r6, #1
   13470:	2800      	cmp	r0, #0
   13472:	f000 80a0 	beq.w	135b6 <__gethex+0x4e2>
   13476:	460d      	mov	r5, r1
   13478:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1347c:	f818 0002 	ldrb.w	r0, [r8, r2]
   13480:	2800      	cmp	r0, #0
   13482:	d1f8      	bne.n	13476 <__gethex+0x3a2>
   13484:	1b75      	subs	r5, r6, r5
   13486:	ea4f 0985 	mov.w	r9, r5, lsl #2
   1348a:	460e      	mov	r6, r1
   1348c:	e65d      	b.n	1314a <__gethex+0x76>
   1348e:	3402      	adds	r4, #2
   13490:	2300      	movs	r3, #0
   13492:	e638      	b.n	13106 <__gethex+0x32>
   13494:	f8db 3008 	ldr.w	r3, [fp, #8]
   13498:	429f      	cmp	r7, r3
   1349a:	f280 808e 	bge.w	135ba <__gethex+0x4e6>
   1349e:	463b      	mov	r3, r7
   134a0:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
   134a4:	2101      	movs	r1, #1
   134a6:	3301      	adds	r3, #1
   134a8:	2d02      	cmp	r5, #2
   134aa:	f8cb 3010 	str.w	r3, [fp, #16]
   134ae:	6151      	str	r1, [r2, #20]
   134b0:	d07a      	beq.n	135a8 <__gethex+0x4d4>
   134b2:	429f      	cmp	r7, r3
   134b4:	dab9      	bge.n	1342a <__gethex+0x356>
   134b6:	2b00      	cmp	r3, #0
   134b8:	f340 809b 	ble.w	135f2 <__gethex+0x51e>
   134bc:	f8db 2014 	ldr.w	r2, [fp, #20]
   134c0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   134c4:	f10b 0018 	add.w	r0, fp, #24
   134c8:	4283      	cmp	r3, r0
   134ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
   134ce:	f240 80b1 	bls.w	13634 <__gethex+0x560>
   134d2:	4644      	mov	r4, r8
   134d4:	6801      	ldr	r1, [r0, #0]
   134d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   134da:	f844 2b04 	str.w	r2, [r4], #4
   134de:	f850 2b04 	ldr.w	r2, [r0], #4
   134e2:	4283      	cmp	r3, r0
   134e4:	ea4f 0252 	mov.w	r2, r2, lsr #1
   134e8:	d8f4      	bhi.n	134d4 <__gethex+0x400>
   134ea:	eba3 030b 	sub.w	r3, r3, fp
   134ee:	3b19      	subs	r3, #25
   134f0:	089b      	lsrs	r3, r3, #2
   134f2:	3301      	adds	r3, #1
   134f4:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
   134f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   134fc:	2a00      	cmp	r2, #0
   134fe:	f040 809d 	bne.w	1363c <__gethex+0x568>
   13502:	eba3 0208 	sub.w	r2, r3, r8
   13506:	1092      	asrs	r2, r2, #2
   13508:	4543      	cmp	r3, r8
   1350a:	f8cb 2010 	str.w	r2, [fp, #16]
   1350e:	d073      	beq.n	135f8 <__gethex+0x524>
   13510:	f8da 3008 	ldr.w	r3, [sl, #8]
   13514:	f109 0901 	add.w	r9, r9, #1
   13518:	454b      	cmp	r3, r9
   1351a:	da8a      	bge.n	13432 <__gethex+0x35e>
   1351c:	ee18 0a10 	vmov	r0, s16
   13520:	4659      	mov	r1, fp
   13522:	f000 f9d1 	bl	138c8 <_Bfree>
   13526:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13528:	2300      	movs	r3, #0
   1352a:	6013      	str	r3, [r2, #0]
   1352c:	25a3      	movs	r5, #163	; 0xa3
   1352e:	e683      	b.n	13238 <__gethex+0x164>
   13530:	9e01      	ldr	r6, [sp, #4]
   13532:	2300      	movs	r3, #0
   13534:	e689      	b.n	1324a <__gethex+0x176>
   13536:	2701      	movs	r7, #1
   13538:	e732      	b.n	133a0 <__gethex+0x2cc>
   1353a:	4629      	mov	r1, r5
   1353c:	4658      	mov	r0, fp
   1353e:	f000 fea5 	bl	1428c <__any_on>
   13542:	4607      	mov	r7, r0
   13544:	e72c      	b.n	133a0 <__gethex+0x2cc>
   13546:	1eb1      	subs	r1, r6, #2
   13548:	4658      	mov	r0, fp
   1354a:	f000 fe9f 	bl	1428c <__any_on>
   1354e:	2800      	cmp	r0, #0
   13550:	f43f af17 	beq.w	13382 <__gethex+0x2ae>
   13554:	2703      	movs	r7, #3
   13556:	e715      	b.n	13384 <__gethex+0x2b0>
   13558:	f04f 0900 	mov.w	r9, #0
   1355c:	2701      	movs	r7, #1
   1355e:	e64a      	b.n	131f6 <__gethex+0x122>
   13560:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13562:	2a00      	cmp	r2, #0
   13564:	f47f ae9d 	bne.w	132a2 <__gethex+0x1ce>
   13568:	9902      	ldr	r1, [sp, #8]
   1356a:	600b      	str	r3, [r1, #0]
   1356c:	9b01      	ldr	r3, [sp, #4]
   1356e:	2201      	movs	r2, #1
   13570:	f8cb 2010 	str.w	r2, [fp, #16]
   13574:	601a      	str	r2, [r3, #0]
   13576:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13578:	2562      	movs	r5, #98	; 0x62
   1357a:	f8c3 b000 	str.w	fp, [r3]
   1357e:	e65b      	b.n	13238 <__gethex+0x164>
   13580:	454c      	cmp	r4, r9
   13582:	f47f ae8e 	bne.w	132a2 <__gethex+0x1ce>
   13586:	2c01      	cmp	r4, #1
   13588:	d0ee      	beq.n	13568 <__gethex+0x494>
   1358a:	1e61      	subs	r1, r4, #1
   1358c:	4658      	mov	r0, fp
   1358e:	f000 fe7d 	bl	1428c <__any_on>
   13592:	2800      	cmp	r0, #0
   13594:	f43f ae85 	beq.w	132a2 <__gethex+0x1ce>
   13598:	f8da 3004 	ldr.w	r3, [sl, #4]
   1359c:	e7e4      	b.n	13568 <__gethex+0x494>
   1359e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   135a0:	2a00      	cmp	r2, #0
   135a2:	f43f ae7e 	beq.w	132a2 <__gethex+0x1ce>
   135a6:	e7df      	b.n	13568 <__gethex+0x494>
   135a8:	f8da 3000 	ldr.w	r3, [sl]
   135ac:	3b01      	subs	r3, #1
   135ae:	42a3      	cmp	r3, r4
   135b0:	d034      	beq.n	1361c <__gethex+0x548>
   135b2:	2522      	movs	r5, #34	; 0x22
   135b4:	e6bd      	b.n	13332 <__gethex+0x25e>
   135b6:	460e      	mov	r6, r1
   135b8:	e5c7      	b.n	1314a <__gethex+0x76>
   135ba:	f8db 1004 	ldr.w	r1, [fp, #4]
   135be:	ee18 0a10 	vmov	r0, s16
   135c2:	3101      	adds	r1, #1
   135c4:	f000 f95a 	bl	1387c <_Balloc>
   135c8:	4606      	mov	r6, r0
   135ca:	b3c8      	cbz	r0, 13640 <__gethex+0x56c>
   135cc:	f8db 3010 	ldr.w	r3, [fp, #16]
   135d0:	3302      	adds	r3, #2
   135d2:	009a      	lsls	r2, r3, #2
   135d4:	f10b 010c 	add.w	r1, fp, #12
   135d8:	300c      	adds	r0, #12
   135da:	f7fa fe9b 	bl	e314 <memcpy>
   135de:	4659      	mov	r1, fp
   135e0:	ee18 0a10 	vmov	r0, s16
   135e4:	f000 f970 	bl	138c8 <_Bfree>
   135e8:	f106 0814 	add.w	r8, r6, #20
   135ec:	6933      	ldr	r3, [r6, #16]
   135ee:	46b3      	mov	fp, r6
   135f0:	e756      	b.n	134a0 <__gethex+0x3cc>
   135f2:	2300      	movs	r3, #0
   135f4:	f8cb 3010 	str.w	r3, [fp, #16]
   135f8:	2300      	movs	r3, #0
   135fa:	f8cb 3014 	str.w	r3, [fp, #20]
   135fe:	e787      	b.n	13510 <__gethex+0x43c>
   13600:	9b01      	ldr	r3, [sp, #4]
   13602:	4443      	add	r3, r8
   13604:	f1c4 0420 	rsb	r4, r4, #32
   13608:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1360c:	f000 fa10 	bl	13a30 <__hi0bits>
   13610:	42a0      	cmp	r0, r4
   13612:	f6bf af0e 	bge.w	13432 <__gethex+0x35e>
   13616:	f8db 3010 	ldr.w	r3, [fp, #16]
   1361a:	e74c      	b.n	134b6 <__gethex+0x3e2>
   1361c:	1163      	asrs	r3, r4, #5
   1361e:	f004 041f 	and.w	r4, r4, #31
   13622:	f858 2023 	ldr.w	r2, [r8, r3, lsl #2]
   13626:	2301      	movs	r3, #1
   13628:	40a3      	lsls	r3, r4
   1362a:	4213      	tst	r3, r2
   1362c:	bf0c      	ite	eq
   1362e:	2522      	moveq	r5, #34	; 0x22
   13630:	2521      	movne	r5, #33	; 0x21
   13632:	e67e      	b.n	13332 <__gethex+0x25e>
   13634:	f8c8 2000 	str.w	r2, [r8]
   13638:	4643      	mov	r3, r8
   1363a:	b16a      	cbz	r2, 13658 <__gethex+0x584>
   1363c:	3304      	adds	r3, #4
   1363e:	e760      	b.n	13502 <__gethex+0x42e>
   13640:	4b07      	ldr	r3, [pc, #28]	; (13660 <__gethex+0x58c>)
   13642:	4808      	ldr	r0, [pc, #32]	; (13664 <__gethex+0x590>)
   13644:	4632      	mov	r2, r6
   13646:	2184      	movs	r1, #132	; 0x84
   13648:	f004 fa5a 	bl	17b00 <__assert_func>
   1364c:	4b04      	ldr	r3, [pc, #16]	; (13660 <__gethex+0x58c>)
   1364e:	4805      	ldr	r0, [pc, #20]	; (13664 <__gethex+0x590>)
   13650:	465a      	mov	r2, fp
   13652:	21e4      	movs	r1, #228	; 0xe4
   13654:	f004 fa54 	bl	17b00 <__assert_func>
   13658:	f8cb 2010 	str.w	r2, [fp, #16]
   1365c:	e7cc      	b.n	135f8 <__gethex+0x524>
   1365e:	bf00      	nop
   13660:	20000e78 	.word	0x20000e78
   13664:	20000e8c 	.word	0x20000e8c

00013668 <__match>:
   13668:	b410      	push	{r4}
   1366a:	6804      	ldr	r4, [r0, #0]
   1366c:	e009      	b.n	13682 <__match+0x1a>
   1366e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13672:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   13676:	f1bc 0f19 	cmp.w	ip, #25
   1367a:	bf98      	it	ls
   1367c:	3320      	addls	r3, #32
   1367e:	4293      	cmp	r3, r2
   13680:	d109      	bne.n	13696 <__match+0x2e>
   13682:	f811 2b01 	ldrb.w	r2, [r1], #1
   13686:	2a00      	cmp	r2, #0
   13688:	d1f1      	bne.n	1366e <__match+0x6>
   1368a:	3401      	adds	r4, #1
   1368c:	6004      	str	r4, [r0, #0]
   1368e:	2001      	movs	r0, #1
   13690:	f85d 4b04 	ldr.w	r4, [sp], #4
   13694:	4770      	bx	lr
   13696:	2000      	movs	r0, #0
   13698:	f85d 4b04 	ldr.w	r4, [sp], #4
   1369c:	4770      	bx	lr
   1369e:	bf00      	nop

000136a0 <__hexnan>:
   136a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a4:	6809      	ldr	r1, [r1, #0]
   136a6:	b085      	sub	sp, #20
   136a8:	114b      	asrs	r3, r1, #5
   136aa:	f011 011f 	ands.w	r1, r1, #31
   136ae:	9002      	str	r0, [sp, #8]
   136b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   136b4:	9103      	str	r1, [sp, #12]
   136b6:	f040 808f 	bne.w	137d8 <__hexnan+0x138>
   136ba:	1f1d      	subs	r5, r3, #4
   136bc:	9301      	str	r3, [sp, #4]
   136be:	9b02      	ldr	r3, [sp, #8]
   136c0:	9901      	ldr	r1, [sp, #4]
   136c2:	681c      	ldr	r4, [r3, #0]
   136c4:	2300      	movs	r3, #0
   136c6:	f841 3c04 	str.w	r3, [r1, #-4]
   136ca:	7861      	ldrb	r1, [r4, #1]
   136cc:	3401      	adds	r4, #1
   136ce:	2900      	cmp	r1, #0
   136d0:	f000 8098 	beq.w	13804 <__hexnan+0x164>
   136d4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1384c <__hexnan+0x1ac>
   136d8:	46a8      	mov	r8, r5
   136da:	46ac      	mov	ip, r5
   136dc:	469a      	mov	sl, r3
   136de:	461e      	mov	r6, r3
   136e0:	e00e      	b.n	13700 <__hexnan+0x60>
   136e2:	2920      	cmp	r1, #32
   136e4:	f200 808c 	bhi.w	13800 <__hexnan+0x160>
   136e8:	4556      	cmp	r6, sl
   136ea:	dd06      	ble.n	136fa <__hexnan+0x5a>
   136ec:	45c4      	cmp	ip, r8
   136ee:	d201      	bcs.n	136f4 <__hexnan+0x54>
   136f0:	2b07      	cmp	r3, #7
   136f2:	dd5b      	ble.n	137ac <__hexnan+0x10c>
   136f4:	4562      	cmp	r2, ip
   136f6:	d351      	bcc.n	1379c <__hexnan+0xfc>
   136f8:	2308      	movs	r3, #8
   136fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   136fe:	b1a1      	cbz	r1, 1372a <__hexnan+0x8a>
   13700:	f819 0001 	ldrb.w	r0, [r9, r1]
   13704:	2800      	cmp	r0, #0
   13706:	d0ec      	beq.n	136e2 <__hexnan+0x42>
   13708:	3301      	adds	r3, #1
   1370a:	2b08      	cmp	r3, #8
   1370c:	f106 0601 	add.w	r6, r6, #1
   13710:	dc3a      	bgt.n	13788 <__hexnan+0xe8>
   13712:	f8dc 1000 	ldr.w	r1, [ip]
   13716:	0109      	lsls	r1, r1, #4
   13718:	f000 000f 	and.w	r0, r0, #15
   1371c:	4308      	orrs	r0, r1
   1371e:	f8cc 0000 	str.w	r0, [ip]
   13722:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   13726:	2900      	cmp	r1, #0
   13728:	d1ea      	bne.n	13700 <__hexnan+0x60>
   1372a:	2e00      	cmp	r6, #0
   1372c:	d06a      	beq.n	13804 <__hexnan+0x164>
   1372e:	45c4      	cmp	ip, r8
   13730:	d201      	bcs.n	13736 <__hexnan+0x96>
   13732:	2b07      	cmp	r3, #7
   13734:	dd74      	ble.n	13820 <__hexnan+0x180>
   13736:	4562      	cmp	r2, ip
   13738:	d252      	bcs.n	137e0 <__hexnan+0x140>
   1373a:	1f11      	subs	r1, r2, #4
   1373c:	4663      	mov	r3, ip
   1373e:	f853 0b04 	ldr.w	r0, [r3], #4
   13742:	f841 0f04 	str.w	r0, [r1, #4]!
   13746:	42ab      	cmp	r3, r5
   13748:	d9f9      	bls.n	1373e <__hexnan+0x9e>
   1374a:	eba5 030c 	sub.w	r3, r5, ip
   1374e:	f023 0303 	bic.w	r3, r3, #3
   13752:	1c69      	adds	r1, r5, #1
   13754:	3304      	adds	r3, #4
   13756:	f10c 0c01 	add.w	ip, ip, #1
   1375a:	4561      	cmp	r1, ip
   1375c:	bf38      	it	cc
   1375e:	2304      	movcc	r3, #4
   13760:	4413      	add	r3, r2
   13762:	2100      	movs	r1, #0
   13764:	f843 1b04 	str.w	r1, [r3], #4
   13768:	42ab      	cmp	r3, r5
   1376a:	d9fb      	bls.n	13764 <__hexnan+0xc4>
   1376c:	9b01      	ldr	r3, [sp, #4]
   1376e:	f853 3c04 	ldr.w	r3, [r3, #-4]
   13772:	b92b      	cbnz	r3, 13780 <__hexnan+0xe0>
   13774:	42aa      	cmp	r2, r5
   13776:	d049      	beq.n	1380c <__hexnan+0x16c>
   13778:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   1377c:	2b00      	cmp	r3, #0
   1377e:	d0f9      	beq.n	13774 <__hexnan+0xd4>
   13780:	2005      	movs	r0, #5
   13782:	b005      	add	sp, #20
   13784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13788:	4562      	cmp	r2, ip
   1378a:	d2b6      	bcs.n	136fa <__hexnan+0x5a>
   1378c:	2300      	movs	r3, #0
   1378e:	f84c 3c04 	str.w	r3, [ip, #-4]
   13792:	4619      	mov	r1, r3
   13794:	f1ac 0c04 	sub.w	ip, ip, #4
   13798:	2301      	movs	r3, #1
   1379a:	e7bd      	b.n	13718 <__hexnan+0x78>
   1379c:	2300      	movs	r3, #0
   1379e:	f1ac 0804 	sub.w	r8, ip, #4
   137a2:	f84c 3c04 	str.w	r3, [ip, #-4]
   137a6:	46b2      	mov	sl, r6
   137a8:	46c4      	mov	ip, r8
   137aa:	e7a6      	b.n	136fa <__hexnan+0x5a>
   137ac:	f1c3 0108 	rsb	r1, r3, #8
   137b0:	f8dc 3000 	ldr.w	r3, [ip]
   137b4:	0089      	lsls	r1, r1, #2
   137b6:	f1c1 0e20 	rsb	lr, r1, #32
   137ba:	4660      	mov	r0, ip
   137bc:	469b      	mov	fp, r3
   137be:	6847      	ldr	r7, [r0, #4]
   137c0:	fa07 f30e 	lsl.w	r3, r7, lr
   137c4:	ea43 030b 	orr.w	r3, r3, fp
   137c8:	fa27 fb01 	lsr.w	fp, r7, r1
   137cc:	6003      	str	r3, [r0, #0]
   137ce:	f840 bf04 	str.w	fp, [r0, #4]!
   137d2:	4540      	cmp	r0, r8
   137d4:	d3f3      	bcc.n	137be <__hexnan+0x11e>
   137d6:	e78d      	b.n	136f4 <__hexnan+0x54>
   137d8:	1d19      	adds	r1, r3, #4
   137da:	9101      	str	r1, [sp, #4]
   137dc:	461d      	mov	r5, r3
   137de:	e76e      	b.n	136be <__hexnan+0x1e>
   137e0:	9b03      	ldr	r3, [sp, #12]
   137e2:	2b00      	cmp	r3, #0
   137e4:	d0c2      	beq.n	1376c <__hexnan+0xcc>
   137e6:	9b03      	ldr	r3, [sp, #12]
   137e8:	9801      	ldr	r0, [sp, #4]
   137ea:	f1c3 0120 	rsb	r1, r3, #32
   137ee:	f04f 33ff 	mov.w	r3, #4294967295
   137f2:	40cb      	lsrs	r3, r1
   137f4:	f850 1c04 	ldr.w	r1, [r0, #-4]
   137f8:	400b      	ands	r3, r1
   137fa:	f840 3c04 	str.w	r3, [r0, #-4]
   137fe:	e7b8      	b.n	13772 <__hexnan+0xd2>
   13800:	2929      	cmp	r1, #41	; 0x29
   13802:	d009      	beq.n	13818 <__hexnan+0x178>
   13804:	2004      	movs	r0, #4
   13806:	b005      	add	sp, #20
   13808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1380c:	2301      	movs	r3, #1
   1380e:	2005      	movs	r0, #5
   13810:	602b      	str	r3, [r5, #0]
   13812:	b005      	add	sp, #20
   13814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13818:	9902      	ldr	r1, [sp, #8]
   1381a:	3401      	adds	r4, #1
   1381c:	600c      	str	r4, [r1, #0]
   1381e:	e784      	b.n	1372a <__hexnan+0x8a>
   13820:	f8dc 1000 	ldr.w	r1, [ip]
   13824:	f1c3 0308 	rsb	r3, r3, #8
   13828:	009b      	lsls	r3, r3, #2
   1382a:	f1c3 0720 	rsb	r7, r3, #32
   1382e:	4664      	mov	r4, ip
   13830:	4608      	mov	r0, r1
   13832:	6866      	ldr	r6, [r4, #4]
   13834:	fa06 f107 	lsl.w	r1, r6, r7
   13838:	4301      	orrs	r1, r0
   1383a:	fa26 f003 	lsr.w	r0, r6, r3
   1383e:	6021      	str	r1, [r4, #0]
   13840:	f844 0f04 	str.w	r0, [r4, #4]!
   13844:	4544      	cmp	r4, r8
   13846:	d3f4      	bcc.n	13832 <__hexnan+0x192>
   13848:	e775      	b.n	13736 <__hexnan+0x96>
   1384a:	bf00      	nop
   1384c:	20000ef0 	.word	0x20000ef0

00013850 <__ascii_mbtowc>:
   13850:	b082      	sub	sp, #8
   13852:	b149      	cbz	r1, 13868 <__ascii_mbtowc+0x18>
   13854:	b15a      	cbz	r2, 1386e <__ascii_mbtowc+0x1e>
   13856:	b16b      	cbz	r3, 13874 <__ascii_mbtowc+0x24>
   13858:	7813      	ldrb	r3, [r2, #0]
   1385a:	600b      	str	r3, [r1, #0]
   1385c:	7812      	ldrb	r2, [r2, #0]
   1385e:	1e10      	subs	r0, r2, #0
   13860:	bf18      	it	ne
   13862:	2001      	movne	r0, #1
   13864:	b002      	add	sp, #8
   13866:	4770      	bx	lr
   13868:	a901      	add	r1, sp, #4
   1386a:	2a00      	cmp	r2, #0
   1386c:	d1f3      	bne.n	13856 <__ascii_mbtowc+0x6>
   1386e:	4610      	mov	r0, r2
   13870:	b002      	add	sp, #8
   13872:	4770      	bx	lr
   13874:	f06f 0001 	mvn.w	r0, #1
   13878:	e7f4      	b.n	13864 <__ascii_mbtowc+0x14>
   1387a:	bf00      	nop

0001387c <_Balloc>:
   1387c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1387e:	b570      	push	{r4, r5, r6, lr}
   13880:	4605      	mov	r5, r0
   13882:	460c      	mov	r4, r1
   13884:	b14b      	cbz	r3, 1389a <_Balloc+0x1e>
   13886:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1388a:	b180      	cbz	r0, 138ae <_Balloc+0x32>
   1388c:	6802      	ldr	r2, [r0, #0]
   1388e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   13892:	2300      	movs	r3, #0
   13894:	e9c0 3303 	strd	r3, r3, [r0, #12]
   13898:	bd70      	pop	{r4, r5, r6, pc}
   1389a:	2221      	movs	r2, #33	; 0x21
   1389c:	2104      	movs	r1, #4
   1389e:	f004 f94f 	bl	17b40 <_calloc_r>
   138a2:	4603      	mov	r3, r0
   138a4:	6468      	str	r0, [r5, #68]	; 0x44
   138a6:	2800      	cmp	r0, #0
   138a8:	d1ed      	bne.n	13886 <_Balloc+0xa>
   138aa:	2000      	movs	r0, #0
   138ac:	bd70      	pop	{r4, r5, r6, pc}
   138ae:	2101      	movs	r1, #1
   138b0:	fa01 f604 	lsl.w	r6, r1, r4
   138b4:	1d72      	adds	r2, r6, #5
   138b6:	0092      	lsls	r2, r2, #2
   138b8:	4628      	mov	r0, r5
   138ba:	f004 f941 	bl	17b40 <_calloc_r>
   138be:	2800      	cmp	r0, #0
   138c0:	d0f3      	beq.n	138aa <_Balloc+0x2e>
   138c2:	e9c0 4601 	strd	r4, r6, [r0, #4]
   138c6:	e7e4      	b.n	13892 <_Balloc+0x16>

000138c8 <_Bfree>:
   138c8:	b131      	cbz	r1, 138d8 <_Bfree+0x10>
   138ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   138cc:	684a      	ldr	r2, [r1, #4]
   138ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   138d2:	6008      	str	r0, [r1, #0]
   138d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   138d8:	4770      	bx	lr
   138da:	bf00      	nop

000138dc <__multadd>:
   138dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138e0:	690e      	ldr	r6, [r1, #16]
   138e2:	4680      	mov	r8, r0
   138e4:	460f      	mov	r7, r1
   138e6:	461d      	mov	r5, r3
   138e8:	f101 0e14 	add.w	lr, r1, #20
   138ec:	2000      	movs	r0, #0
   138ee:	f8de 1000 	ldr.w	r1, [lr]
   138f2:	b28c      	uxth	r4, r1
   138f4:	fb02 5304 	mla	r3, r2, r4, r5
   138f8:	0c09      	lsrs	r1, r1, #16
   138fa:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   138fe:	fb02 cc01 	mla	ip, r2, r1, ip
   13902:	3001      	adds	r0, #1
   13904:	b29c      	uxth	r4, r3
   13906:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   1390a:	4286      	cmp	r6, r0
   1390c:	f84e 4b04 	str.w	r4, [lr], #4
   13910:	ea4f 451c 	mov.w	r5, ip, lsr #16
   13914:	dceb      	bgt.n	138ee <__multadd+0x12>
   13916:	b13d      	cbz	r5, 13928 <__multadd+0x4c>
   13918:	68bb      	ldr	r3, [r7, #8]
   1391a:	42b3      	cmp	r3, r6
   1391c:	dd07      	ble.n	1392e <__multadd+0x52>
   1391e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13922:	3601      	adds	r6, #1
   13924:	615d      	str	r5, [r3, #20]
   13926:	613e      	str	r6, [r7, #16]
   13928:	4638      	mov	r0, r7
   1392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1392e:	6879      	ldr	r1, [r7, #4]
   13930:	4640      	mov	r0, r8
   13932:	3101      	adds	r1, #1
   13934:	f7ff ffa2 	bl	1387c <_Balloc>
   13938:	4604      	mov	r4, r0
   1393a:	b1b0      	cbz	r0, 1396a <__multadd+0x8e>
   1393c:	693a      	ldr	r2, [r7, #16]
   1393e:	3202      	adds	r2, #2
   13940:	f107 010c 	add.w	r1, r7, #12
   13944:	0092      	lsls	r2, r2, #2
   13946:	300c      	adds	r0, #12
   13948:	f7fa fce4 	bl	e314 <memcpy>
   1394c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   13950:	687a      	ldr	r2, [r7, #4]
   13952:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13956:	6039      	str	r1, [r7, #0]
   13958:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   1395c:	4627      	mov	r7, r4
   1395e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   13962:	3601      	adds	r6, #1
   13964:	615d      	str	r5, [r3, #20]
   13966:	613e      	str	r6, [r7, #16]
   13968:	e7de      	b.n	13928 <__multadd+0x4c>
   1396a:	4b03      	ldr	r3, [pc, #12]	; (13978 <__multadd+0x9c>)
   1396c:	4803      	ldr	r0, [pc, #12]	; (1397c <__multadd+0xa0>)
   1396e:	4622      	mov	r2, r4
   13970:	21ba      	movs	r1, #186	; 0xba
   13972:	f004 f8c5 	bl	17b00 <__assert_func>
   13976:	bf00      	nop
   13978:	20000e78 	.word	0x20000e78
   1397c:	20000ff0 	.word	0x20000ff0

00013980 <__s2b>:
   13980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13984:	4617      	mov	r7, r2
   13986:	4a27      	ldr	r2, [pc, #156]	; (13a24 <__s2b+0xa4>)
   13988:	461e      	mov	r6, r3
   1398a:	3308      	adds	r3, #8
   1398c:	460c      	mov	r4, r1
   1398e:	2e09      	cmp	r6, #9
   13990:	fb82 1203 	smull	r1, r2, r2, r3
   13994:	ea4f 73e3 	mov.w	r3, r3, asr #31
   13998:	4605      	mov	r5, r0
   1399a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1399e:	dd39      	ble.n	13a14 <__s2b+0x94>
   139a0:	f04f 0c01 	mov.w	ip, #1
   139a4:	2100      	movs	r1, #0
   139a6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   139aa:	4563      	cmp	r3, ip
   139ac:	f101 0101 	add.w	r1, r1, #1
   139b0:	dcf9      	bgt.n	139a6 <__s2b+0x26>
   139b2:	4628      	mov	r0, r5
   139b4:	f7ff ff62 	bl	1387c <_Balloc>
   139b8:	4601      	mov	r1, r0
   139ba:	b368      	cbz	r0, 13a18 <__s2b+0x98>
   139bc:	9b08      	ldr	r3, [sp, #32]
   139be:	6143      	str	r3, [r0, #20]
   139c0:	2f09      	cmp	r7, #9
   139c2:	f04f 0301 	mov.w	r3, #1
   139c6:	6103      	str	r3, [r0, #16]
   139c8:	dc12      	bgt.n	139f0 <__s2b+0x70>
   139ca:	340a      	adds	r4, #10
   139cc:	2709      	movs	r7, #9
   139ce:	42be      	cmp	r6, r7
   139d0:	dd0b      	ble.n	139ea <__s2b+0x6a>
   139d2:	1bf2      	subs	r2, r6, r7
   139d4:	18a6      	adds	r6, r4, r2
   139d6:	f814 3b01 	ldrb.w	r3, [r4], #1
   139da:	220a      	movs	r2, #10
   139dc:	3b30      	subs	r3, #48	; 0x30
   139de:	4628      	mov	r0, r5
   139e0:	f7ff ff7c 	bl	138dc <__multadd>
   139e4:	42a6      	cmp	r6, r4
   139e6:	4601      	mov	r1, r0
   139e8:	d1f5      	bne.n	139d6 <__s2b+0x56>
   139ea:	4608      	mov	r0, r1
   139ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   139f0:	f104 0909 	add.w	r9, r4, #9
   139f4:	46c8      	mov	r8, r9
   139f6:	443c      	add	r4, r7
   139f8:	f818 3b01 	ldrb.w	r3, [r8], #1
   139fc:	220a      	movs	r2, #10
   139fe:	3b30      	subs	r3, #48	; 0x30
   13a00:	4628      	mov	r0, r5
   13a02:	f7ff ff6b 	bl	138dc <__multadd>
   13a06:	45a0      	cmp	r8, r4
   13a08:	4601      	mov	r1, r0
   13a0a:	d1f5      	bne.n	139f8 <__s2b+0x78>
   13a0c:	f1a7 0408 	sub.w	r4, r7, #8
   13a10:	444c      	add	r4, r9
   13a12:	e7dc      	b.n	139ce <__s2b+0x4e>
   13a14:	2100      	movs	r1, #0
   13a16:	e7cc      	b.n	139b2 <__s2b+0x32>
   13a18:	460a      	mov	r2, r1
   13a1a:	4b03      	ldr	r3, [pc, #12]	; (13a28 <__s2b+0xa8>)
   13a1c:	4803      	ldr	r0, [pc, #12]	; (13a2c <__s2b+0xac>)
   13a1e:	21d3      	movs	r1, #211	; 0xd3
   13a20:	f004 f86e 	bl	17b00 <__assert_func>
   13a24:	38e38e39 	.word	0x38e38e39
   13a28:	20000e78 	.word	0x20000e78
   13a2c:	20000ff0 	.word	0x20000ff0

00013a30 <__hi0bits>:
   13a30:	0c03      	lsrs	r3, r0, #16
   13a32:	041b      	lsls	r3, r3, #16
   13a34:	b9d3      	cbnz	r3, 13a6c <__hi0bits+0x3c>
   13a36:	0400      	lsls	r0, r0, #16
   13a38:	2310      	movs	r3, #16
   13a3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   13a3e:	bf04      	itt	eq
   13a40:	0200      	lsleq	r0, r0, #8
   13a42:	3308      	addeq	r3, #8
   13a44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   13a48:	bf04      	itt	eq
   13a4a:	0100      	lsleq	r0, r0, #4
   13a4c:	3304      	addeq	r3, #4
   13a4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   13a52:	bf04      	itt	eq
   13a54:	0080      	lsleq	r0, r0, #2
   13a56:	3302      	addeq	r3, #2
   13a58:	2800      	cmp	r0, #0
   13a5a:	db05      	blt.n	13a68 <__hi0bits+0x38>
   13a5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   13a60:	f103 0301 	add.w	r3, r3, #1
   13a64:	bf08      	it	eq
   13a66:	2320      	moveq	r3, #32
   13a68:	4618      	mov	r0, r3
   13a6a:	4770      	bx	lr
   13a6c:	2300      	movs	r3, #0
   13a6e:	e7e4      	b.n	13a3a <__hi0bits+0xa>

00013a70 <__lo0bits>:
   13a70:	6803      	ldr	r3, [r0, #0]
   13a72:	f013 0207 	ands.w	r2, r3, #7
   13a76:	d008      	beq.n	13a8a <__lo0bits+0x1a>
   13a78:	07d9      	lsls	r1, r3, #31
   13a7a:	d41f      	bmi.n	13abc <__lo0bits+0x4c>
   13a7c:	079a      	lsls	r2, r3, #30
   13a7e:	d522      	bpl.n	13ac6 <__lo0bits+0x56>
   13a80:	085b      	lsrs	r3, r3, #1
   13a82:	6003      	str	r3, [r0, #0]
   13a84:	2201      	movs	r2, #1
   13a86:	4610      	mov	r0, r2
   13a88:	4770      	bx	lr
   13a8a:	b299      	uxth	r1, r3
   13a8c:	b909      	cbnz	r1, 13a92 <__lo0bits+0x22>
   13a8e:	0c1b      	lsrs	r3, r3, #16
   13a90:	2210      	movs	r2, #16
   13a92:	b2d9      	uxtb	r1, r3
   13a94:	b909      	cbnz	r1, 13a9a <__lo0bits+0x2a>
   13a96:	3208      	adds	r2, #8
   13a98:	0a1b      	lsrs	r3, r3, #8
   13a9a:	0719      	lsls	r1, r3, #28
   13a9c:	bf04      	itt	eq
   13a9e:	091b      	lsreq	r3, r3, #4
   13aa0:	3204      	addeq	r2, #4
   13aa2:	0799      	lsls	r1, r3, #30
   13aa4:	bf04      	itt	eq
   13aa6:	089b      	lsreq	r3, r3, #2
   13aa8:	3202      	addeq	r2, #2
   13aaa:	07d9      	lsls	r1, r3, #31
   13aac:	d403      	bmi.n	13ab6 <__lo0bits+0x46>
   13aae:	085b      	lsrs	r3, r3, #1
   13ab0:	f102 0201 	add.w	r2, r2, #1
   13ab4:	d005      	beq.n	13ac2 <__lo0bits+0x52>
   13ab6:	6003      	str	r3, [r0, #0]
   13ab8:	4610      	mov	r0, r2
   13aba:	4770      	bx	lr
   13abc:	2200      	movs	r2, #0
   13abe:	4610      	mov	r0, r2
   13ac0:	4770      	bx	lr
   13ac2:	2220      	movs	r2, #32
   13ac4:	e7df      	b.n	13a86 <__lo0bits+0x16>
   13ac6:	089b      	lsrs	r3, r3, #2
   13ac8:	2202      	movs	r2, #2
   13aca:	6003      	str	r3, [r0, #0]
   13acc:	4610      	mov	r0, r2
   13ace:	4770      	bx	lr

00013ad0 <__i2b>:
   13ad0:	b538      	push	{r3, r4, r5, lr}
   13ad2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   13ad4:	4604      	mov	r4, r0
   13ad6:	460d      	mov	r5, r1
   13ad8:	b14b      	cbz	r3, 13aee <__i2b+0x1e>
   13ada:	6858      	ldr	r0, [r3, #4]
   13adc:	b1b0      	cbz	r0, 13b0c <__i2b+0x3c>
   13ade:	6802      	ldr	r2, [r0, #0]
   13ae0:	605a      	str	r2, [r3, #4]
   13ae2:	2200      	movs	r2, #0
   13ae4:	2301      	movs	r3, #1
   13ae6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   13aea:	60c2      	str	r2, [r0, #12]
   13aec:	bd38      	pop	{r3, r4, r5, pc}
   13aee:	2221      	movs	r2, #33	; 0x21
   13af0:	2104      	movs	r1, #4
   13af2:	f004 f825 	bl	17b40 <_calloc_r>
   13af6:	4603      	mov	r3, r0
   13af8:	6460      	str	r0, [r4, #68]	; 0x44
   13afa:	2800      	cmp	r0, #0
   13afc:	d1ed      	bne.n	13ada <__i2b+0xa>
   13afe:	4b09      	ldr	r3, [pc, #36]	; (13b24 <__i2b+0x54>)
   13b00:	4809      	ldr	r0, [pc, #36]	; (13b28 <__i2b+0x58>)
   13b02:	2200      	movs	r2, #0
   13b04:	f240 1145 	movw	r1, #325	; 0x145
   13b08:	f003 fffa 	bl	17b00 <__assert_func>
   13b0c:	221c      	movs	r2, #28
   13b0e:	2101      	movs	r1, #1
   13b10:	4620      	mov	r0, r4
   13b12:	f004 f815 	bl	17b40 <_calloc_r>
   13b16:	2800      	cmp	r0, #0
   13b18:	d0f1      	beq.n	13afe <__i2b+0x2e>
   13b1a:	2201      	movs	r2, #1
   13b1c:	2302      	movs	r3, #2
   13b1e:	e9c0 2301 	strd	r2, r3, [r0, #4]
   13b22:	e7de      	b.n	13ae2 <__i2b+0x12>
   13b24:	20000e78 	.word	0x20000e78
   13b28:	20000ff0 	.word	0x20000ff0

00013b2c <__multiply>:
   13b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b30:	690e      	ldr	r6, [r1, #16]
   13b32:	6915      	ldr	r5, [r2, #16]
   13b34:	42ae      	cmp	r6, r5
   13b36:	b085      	sub	sp, #20
   13b38:	4688      	mov	r8, r1
   13b3a:	4614      	mov	r4, r2
   13b3c:	db05      	blt.n	13b4a <__multiply+0x1e>
   13b3e:	462a      	mov	r2, r5
   13b40:	4623      	mov	r3, r4
   13b42:	4635      	mov	r5, r6
   13b44:	460c      	mov	r4, r1
   13b46:	4616      	mov	r6, r2
   13b48:	4698      	mov	r8, r3
   13b4a:	68a3      	ldr	r3, [r4, #8]
   13b4c:	6861      	ldr	r1, [r4, #4]
   13b4e:	19af      	adds	r7, r5, r6
   13b50:	42bb      	cmp	r3, r7
   13b52:	bfb8      	it	lt
   13b54:	3101      	addlt	r1, #1
   13b56:	f7ff fe91 	bl	1387c <_Balloc>
   13b5a:	9001      	str	r0, [sp, #4]
   13b5c:	2800      	cmp	r0, #0
   13b5e:	f000 8087 	beq.w	13c70 <__multiply+0x144>
   13b62:	9b01      	ldr	r3, [sp, #4]
   13b64:	f103 0914 	add.w	r9, r3, #20
   13b68:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   13b6c:	45d1      	cmp	r9, sl
   13b6e:	d205      	bcs.n	13b7c <__multiply+0x50>
   13b70:	464b      	mov	r3, r9
   13b72:	2200      	movs	r2, #0
   13b74:	f843 2b04 	str.w	r2, [r3], #4
   13b78:	459a      	cmp	sl, r3
   13b7a:	d8fb      	bhi.n	13b74 <__multiply+0x48>
   13b7c:	f108 0814 	add.w	r8, r8, #20
   13b80:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   13b84:	f104 0314 	add.w	r3, r4, #20
   13b88:	45d8      	cmp	r8, fp
   13b8a:	461a      	mov	r2, r3
   13b8c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   13b90:	d25f      	bcs.n	13c52 <__multiply+0x126>
   13b92:	1b2b      	subs	r3, r5, r4
   13b94:	3b15      	subs	r3, #21
   13b96:	f023 0303 	bic.w	r3, r3, #3
   13b9a:	3304      	adds	r3, #4
   13b9c:	3415      	adds	r4, #21
   13b9e:	42a5      	cmp	r5, r4
   13ba0:	bf38      	it	cc
   13ba2:	2304      	movcc	r3, #4
   13ba4:	e9cd a702 	strd	sl, r7, [sp, #8]
   13ba8:	46ac      	mov	ip, r5
   13baa:	461f      	mov	r7, r3
   13bac:	4692      	mov	sl, r2
   13bae:	e005      	b.n	13bbc <__multiply+0x90>
   13bb0:	0c09      	lsrs	r1, r1, #16
   13bb2:	d129      	bne.n	13c08 <__multiply+0xdc>
   13bb4:	45c3      	cmp	fp, r8
   13bb6:	f109 0904 	add.w	r9, r9, #4
   13bba:	d948      	bls.n	13c4e <__multiply+0x122>
   13bbc:	f858 1b04 	ldr.w	r1, [r8], #4
   13bc0:	b28d      	uxth	r5, r1
   13bc2:	2d00      	cmp	r5, #0
   13bc4:	d0f4      	beq.n	13bb0 <__multiply+0x84>
   13bc6:	4656      	mov	r6, sl
   13bc8:	464c      	mov	r4, r9
   13bca:	2300      	movs	r3, #0
   13bcc:	f856 1b04 	ldr.w	r1, [r6], #4
   13bd0:	6822      	ldr	r2, [r4, #0]
   13bd2:	fa1f fe81 	uxth.w	lr, r1
   13bd6:	b290      	uxth	r0, r2
   13bd8:	0c09      	lsrs	r1, r1, #16
   13bda:	fb05 000e 	mla	r0, r5, lr, r0
   13bde:	0c12      	lsrs	r2, r2, #16
   13be0:	4403      	add	r3, r0
   13be2:	fb05 2201 	mla	r2, r5, r1, r2
   13be6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   13bea:	b29b      	uxth	r3, r3
   13bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   13bf0:	45b4      	cmp	ip, r6
   13bf2:	f844 3b04 	str.w	r3, [r4], #4
   13bf6:	ea4f 4312 	mov.w	r3, r2, lsr #16
   13bfa:	d8e7      	bhi.n	13bcc <__multiply+0xa0>
   13bfc:	f849 3007 	str.w	r3, [r9, r7]
   13c00:	f858 1c04 	ldr.w	r1, [r8, #-4]
   13c04:	0c09      	lsrs	r1, r1, #16
   13c06:	d0d5      	beq.n	13bb4 <__multiply+0x88>
   13c08:	f8d9 3000 	ldr.w	r3, [r9]
   13c0c:	4650      	mov	r0, sl
   13c0e:	461a      	mov	r2, r3
   13c10:	464c      	mov	r4, r9
   13c12:	2600      	movs	r6, #0
   13c14:	8805      	ldrh	r5, [r0, #0]
   13c16:	0c12      	lsrs	r2, r2, #16
   13c18:	fb01 2205 	mla	r2, r1, r5, r2
   13c1c:	4416      	add	r6, r2
   13c1e:	b29b      	uxth	r3, r3
   13c20:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   13c24:	f844 3b04 	str.w	r3, [r4], #4
   13c28:	f850 5b04 	ldr.w	r5, [r0], #4
   13c2c:	6822      	ldr	r2, [r4, #0]
   13c2e:	0c2d      	lsrs	r5, r5, #16
   13c30:	b293      	uxth	r3, r2
   13c32:	fb01 3305 	mla	r3, r1, r5, r3
   13c36:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   13c3a:	4584      	cmp	ip, r0
   13c3c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   13c40:	d8e8      	bhi.n	13c14 <__multiply+0xe8>
   13c42:	45c3      	cmp	fp, r8
   13c44:	f849 3007 	str.w	r3, [r9, r7]
   13c48:	f109 0904 	add.w	r9, r9, #4
   13c4c:	d8b6      	bhi.n	13bbc <__multiply+0x90>
   13c4e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   13c52:	2f00      	cmp	r7, #0
   13c54:	dc02      	bgt.n	13c5c <__multiply+0x130>
   13c56:	e005      	b.n	13c64 <__multiply+0x138>
   13c58:	3f01      	subs	r7, #1
   13c5a:	d003      	beq.n	13c64 <__multiply+0x138>
   13c5c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   13c60:	2b00      	cmp	r3, #0
   13c62:	d0f9      	beq.n	13c58 <__multiply+0x12c>
   13c64:	9b01      	ldr	r3, [sp, #4]
   13c66:	4618      	mov	r0, r3
   13c68:	611f      	str	r7, [r3, #16]
   13c6a:	b005      	add	sp, #20
   13c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c70:	4b03      	ldr	r3, [pc, #12]	; (13c80 <__multiply+0x154>)
   13c72:	4804      	ldr	r0, [pc, #16]	; (13c84 <__multiply+0x158>)
   13c74:	9a01      	ldr	r2, [sp, #4]
   13c76:	f44f 71b1 	mov.w	r1, #354	; 0x162
   13c7a:	f003 ff41 	bl	17b00 <__assert_func>
   13c7e:	bf00      	nop
   13c80:	20000e78 	.word	0x20000e78
   13c84:	20000ff0 	.word	0x20000ff0

00013c88 <__pow5mult>:
   13c88:	f012 0303 	ands.w	r3, r2, #3
   13c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c90:	4614      	mov	r4, r2
   13c92:	4606      	mov	r6, r0
   13c94:	d132      	bne.n	13cfc <__pow5mult+0x74>
   13c96:	460d      	mov	r5, r1
   13c98:	10a4      	asrs	r4, r4, #2
   13c9a:	d020      	beq.n	13cde <__pow5mult+0x56>
   13c9c:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   13ca0:	f1b8 0f00 	cmp.w	r8, #0
   13ca4:	d033      	beq.n	13d0e <__pow5mult+0x86>
   13ca6:	07e3      	lsls	r3, r4, #31
   13ca8:	f04f 0700 	mov.w	r7, #0
   13cac:	d407      	bmi.n	13cbe <__pow5mult+0x36>
   13cae:	1064      	asrs	r4, r4, #1
   13cb0:	d015      	beq.n	13cde <__pow5mult+0x56>
   13cb2:	f8d8 0000 	ldr.w	r0, [r8]
   13cb6:	b1a8      	cbz	r0, 13ce4 <__pow5mult+0x5c>
   13cb8:	4680      	mov	r8, r0
   13cba:	07e3      	lsls	r3, r4, #31
   13cbc:	d5f7      	bpl.n	13cae <__pow5mult+0x26>
   13cbe:	4642      	mov	r2, r8
   13cc0:	4629      	mov	r1, r5
   13cc2:	4630      	mov	r0, r6
   13cc4:	f7ff ff32 	bl	13b2c <__multiply>
   13cc8:	b1b5      	cbz	r5, 13cf8 <__pow5mult+0x70>
   13cca:	6869      	ldr	r1, [r5, #4]
   13ccc:	6c73      	ldr	r3, [r6, #68]	; 0x44
   13cce:	1064      	asrs	r4, r4, #1
   13cd0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   13cd4:	602a      	str	r2, [r5, #0]
   13cd6:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   13cda:	4605      	mov	r5, r0
   13cdc:	d1e9      	bne.n	13cb2 <__pow5mult+0x2a>
   13cde:	4628      	mov	r0, r5
   13ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ce4:	4642      	mov	r2, r8
   13ce6:	4641      	mov	r1, r8
   13ce8:	4630      	mov	r0, r6
   13cea:	f7ff ff1f 	bl	13b2c <__multiply>
   13cee:	f8c8 0000 	str.w	r0, [r8]
   13cf2:	6007      	str	r7, [r0, #0]
   13cf4:	4680      	mov	r8, r0
   13cf6:	e7e0      	b.n	13cba <__pow5mult+0x32>
   13cf8:	4605      	mov	r5, r0
   13cfa:	e7d8      	b.n	13cae <__pow5mult+0x26>
   13cfc:	3b01      	subs	r3, #1
   13cfe:	4a0f      	ldr	r2, [pc, #60]	; (13d3c <__pow5mult+0xb4>)
   13d00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   13d04:	2300      	movs	r3, #0
   13d06:	f7ff fde9 	bl	138dc <__multadd>
   13d0a:	4605      	mov	r5, r0
   13d0c:	e7c4      	b.n	13c98 <__pow5mult+0x10>
   13d0e:	2101      	movs	r1, #1
   13d10:	4630      	mov	r0, r6
   13d12:	f7ff fdb3 	bl	1387c <_Balloc>
   13d16:	4680      	mov	r8, r0
   13d18:	b140      	cbz	r0, 13d2c <__pow5mult+0xa4>
   13d1a:	2301      	movs	r3, #1
   13d1c:	f240 2271 	movw	r2, #625	; 0x271
   13d20:	e9c0 3204 	strd	r3, r2, [r0, #16]
   13d24:	2300      	movs	r3, #0
   13d26:	6430      	str	r0, [r6, #64]	; 0x40
   13d28:	6003      	str	r3, [r0, #0]
   13d2a:	e7bc      	b.n	13ca6 <__pow5mult+0x1e>
   13d2c:	4b04      	ldr	r3, [pc, #16]	; (13d40 <__pow5mult+0xb8>)
   13d2e:	4805      	ldr	r0, [pc, #20]	; (13d44 <__pow5mult+0xbc>)
   13d30:	4642      	mov	r2, r8
   13d32:	f240 1145 	movw	r1, #325	; 0x145
   13d36:	f003 fee3 	bl	17b00 <__assert_func>
   13d3a:	bf00      	nop
   13d3c:	20008048 	.word	0x20008048
   13d40:	20000e78 	.word	0x20000e78
   13d44:	20000ff0 	.word	0x20000ff0

00013d48 <__lshift>:
   13d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13d4c:	460d      	mov	r5, r1
   13d4e:	4614      	mov	r4, r2
   13d50:	692f      	ldr	r7, [r5, #16]
   13d52:	68ab      	ldr	r3, [r5, #8]
   13d54:	6849      	ldr	r1, [r1, #4]
   13d56:	eb07 1762 	add.w	r7, r7, r2, asr #5
   13d5a:	1c7e      	adds	r6, r7, #1
   13d5c:	429e      	cmp	r6, r3
   13d5e:	4680      	mov	r8, r0
   13d60:	ea4f 1962 	mov.w	r9, r2, asr #5
   13d64:	dd04      	ble.n	13d70 <__lshift+0x28>
   13d66:	005b      	lsls	r3, r3, #1
   13d68:	429e      	cmp	r6, r3
   13d6a:	f101 0101 	add.w	r1, r1, #1
   13d6e:	dcfa      	bgt.n	13d66 <__lshift+0x1e>
   13d70:	4640      	mov	r0, r8
   13d72:	f7ff fd83 	bl	1387c <_Balloc>
   13d76:	4684      	mov	ip, r0
   13d78:	2800      	cmp	r0, #0
   13d7a:	d052      	beq.n	13e22 <__lshift+0xda>
   13d7c:	f1b9 0f00 	cmp.w	r9, #0
   13d80:	f100 0214 	add.w	r2, r0, #20
   13d84:	dd0e      	ble.n	13da4 <__lshift+0x5c>
   13d86:	f109 0105 	add.w	r1, r9, #5
   13d8a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   13d8e:	4613      	mov	r3, r2
   13d90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   13d94:	2000      	movs	r0, #0
   13d96:	f843 0b04 	str.w	r0, [r3], #4
   13d9a:	428b      	cmp	r3, r1
   13d9c:	d1fb      	bne.n	13d96 <__lshift+0x4e>
   13d9e:	f1ae 0314 	sub.w	r3, lr, #20
   13da2:	441a      	add	r2, r3
   13da4:	6929      	ldr	r1, [r5, #16]
   13da6:	f105 0314 	add.w	r3, r5, #20
   13daa:	f014 0e1f 	ands.w	lr, r4, #31
   13dae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   13db2:	d02e      	beq.n	13e12 <__lshift+0xca>
   13db4:	f1ce 0920 	rsb	r9, lr, #32
   13db8:	4610      	mov	r0, r2
   13dba:	f04f 0a00 	mov.w	sl, #0
   13dbe:	681c      	ldr	r4, [r3, #0]
   13dc0:	fa04 f40e 	lsl.w	r4, r4, lr
   13dc4:	ea44 040a 	orr.w	r4, r4, sl
   13dc8:	f840 4b04 	str.w	r4, [r0], #4
   13dcc:	f853 4b04 	ldr.w	r4, [r3], #4
   13dd0:	4299      	cmp	r1, r3
   13dd2:	fa24 fa09 	lsr.w	sl, r4, r9
   13dd6:	d8f2      	bhi.n	13dbe <__lshift+0x76>
   13dd8:	1b4b      	subs	r3, r1, r5
   13dda:	3b15      	subs	r3, #21
   13ddc:	f023 0303 	bic.w	r3, r3, #3
   13de0:	3304      	adds	r3, #4
   13de2:	f105 0015 	add.w	r0, r5, #21
   13de6:	4281      	cmp	r1, r0
   13de8:	bf38      	it	cc
   13dea:	2304      	movcc	r3, #4
   13dec:	f1ba 0f00 	cmp.w	sl, #0
   13df0:	bf18      	it	ne
   13df2:	4637      	movne	r7, r6
   13df4:	f842 a003 	str.w	sl, [r2, r3]
   13df8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   13dfc:	686a      	ldr	r2, [r5, #4]
   13dfe:	f8cc 7010 	str.w	r7, [ip, #16]
   13e02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   13e06:	6029      	str	r1, [r5, #0]
   13e08:	4660      	mov	r0, ip
   13e0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   13e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e12:	3a04      	subs	r2, #4
   13e14:	f853 0b04 	ldr.w	r0, [r3], #4
   13e18:	f842 0f04 	str.w	r0, [r2, #4]!
   13e1c:	4299      	cmp	r1, r3
   13e1e:	d8f9      	bhi.n	13e14 <__lshift+0xcc>
   13e20:	e7ea      	b.n	13df8 <__lshift+0xb0>
   13e22:	4b03      	ldr	r3, [pc, #12]	; (13e30 <__lshift+0xe8>)
   13e24:	4803      	ldr	r0, [pc, #12]	; (13e34 <__lshift+0xec>)
   13e26:	4662      	mov	r2, ip
   13e28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   13e2c:	f003 fe68 	bl	17b00 <__assert_func>
   13e30:	20000e78 	.word	0x20000e78
   13e34:	20000ff0 	.word	0x20000ff0

00013e38 <__mcmp>:
   13e38:	690b      	ldr	r3, [r1, #16]
   13e3a:	4684      	mov	ip, r0
   13e3c:	6900      	ldr	r0, [r0, #16]
   13e3e:	1ac0      	subs	r0, r0, r3
   13e40:	d116      	bne.n	13e70 <__mcmp+0x38>
   13e42:	f10c 0c14 	add.w	ip, ip, #20
   13e46:	3114      	adds	r1, #20
   13e48:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   13e4c:	b410      	push	{r4}
   13e4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   13e52:	e001      	b.n	13e58 <__mcmp+0x20>
   13e54:	4594      	cmp	ip, r2
   13e56:	d208      	bcs.n	13e6a <__mcmp+0x32>
   13e58:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   13e5c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   13e60:	428c      	cmp	r4, r1
   13e62:	d0f7      	beq.n	13e54 <__mcmp+0x1c>
   13e64:	d205      	bcs.n	13e72 <__mcmp+0x3a>
   13e66:	f04f 30ff 	mov.w	r0, #4294967295
   13e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   13e6e:	4770      	bx	lr
   13e70:	4770      	bx	lr
   13e72:	2001      	movs	r0, #1
   13e74:	f85d 4b04 	ldr.w	r4, [sp], #4
   13e78:	4770      	bx	lr
   13e7a:	bf00      	nop

00013e7c <__mdiff>:
   13e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	690f      	ldr	r7, [r1, #16]
   13e82:	6913      	ldr	r3, [r2, #16]
   13e84:	1aff      	subs	r7, r7, r3
   13e86:	2f00      	cmp	r7, #0
   13e88:	460e      	mov	r6, r1
   13e8a:	4690      	mov	r8, r2
   13e8c:	d17f      	bne.n	13f8e <__mdiff+0x112>
   13e8e:	f101 0514 	add.w	r5, r1, #20
   13e92:	3214      	adds	r2, #20
   13e94:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   13e98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   13e9c:	e001      	b.n	13ea2 <__mdiff+0x26>
   13e9e:	429d      	cmp	r5, r3
   13ea0:	d278      	bcs.n	13f94 <__mdiff+0x118>
   13ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   13ea6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   13eaa:	42a1      	cmp	r1, r4
   13eac:	d0f7      	beq.n	13e9e <__mdiff+0x22>
   13eae:	d369      	bcc.n	13f84 <__mdiff+0x108>
   13eb0:	6871      	ldr	r1, [r6, #4]
   13eb2:	f7ff fce3 	bl	1387c <_Balloc>
   13eb6:	4681      	mov	r9, r0
   13eb8:	2800      	cmp	r0, #0
   13eba:	d077      	beq.n	13fac <__mdiff+0x130>
   13ebc:	6935      	ldr	r5, [r6, #16]
   13ebe:	f8d8 2010 	ldr.w	r2, [r8, #16]
   13ec2:	60c7      	str	r7, [r0, #12]
   13ec4:	f108 0e14 	add.w	lr, r8, #20
   13ec8:	f106 0014 	add.w	r0, r6, #20
   13ecc:	f109 0a14 	add.w	sl, r9, #20
   13ed0:	f106 0110 	add.w	r1, r6, #16
   13ed4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   13ed8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   13edc:	4656      	mov	r6, sl
   13ede:	f04f 0c00 	mov.w	ip, #0
   13ee2:	f85e 4b04 	ldr.w	r4, [lr], #4
   13ee6:	f851 bf04 	ldr.w	fp, [r1, #4]!
   13eea:	b2a3      	uxth	r3, r4
   13eec:	fa1c fc8b 	uxtah	ip, ip, fp
   13ef0:	ebac 0303 	sub.w	r3, ip, r3
   13ef4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   13ef8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   13efc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   13f00:	b29b      	uxth	r3, r3
   13f02:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   13f06:	4572      	cmp	r2, lr
   13f08:	f846 3b04 	str.w	r3, [r6], #4
   13f0c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   13f10:	d8e7      	bhi.n	13ee2 <__mdiff+0x66>
   13f12:	eba2 0108 	sub.w	r1, r2, r8
   13f16:	3915      	subs	r1, #21
   13f18:	f108 0815 	add.w	r8, r8, #21
   13f1c:	4542      	cmp	r2, r8
   13f1e:	f021 0403 	bic.w	r4, r1, #3
   13f22:	f104 0404 	add.w	r4, r4, #4
   13f26:	bf38      	it	cc
   13f28:	2404      	movcc	r4, #4
   13f2a:	4420      	add	r0, r4
   13f2c:	f021 0203 	bic.w	r2, r1, #3
   13f30:	bf38      	it	cc
   13f32:	2200      	movcc	r2, #0
   13f34:	4287      	cmp	r7, r0
   13f36:	4452      	add	r2, sl
   13f38:	4454      	add	r4, sl
   13f3a:	d918      	bls.n	13f6e <__mdiff+0xf2>
   13f3c:	4626      	mov	r6, r4
   13f3e:	4601      	mov	r1, r0
   13f40:	f851 3b04 	ldr.w	r3, [r1], #4
   13f44:	fa1c fc83 	uxtah	ip, ip, r3
   13f48:	ea4f 422c 	mov.w	r2, ip, asr #16
   13f4c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   13f50:	fa1f fc8c 	uxth.w	ip, ip
   13f54:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   13f58:	428f      	cmp	r7, r1
   13f5a:	f846 3b04 	str.w	r3, [r6], #4
   13f5e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   13f62:	d8ed      	bhi.n	13f40 <__mdiff+0xc4>
   13f64:	3f01      	subs	r7, #1
   13f66:	1a3f      	subs	r7, r7, r0
   13f68:	f027 0703 	bic.w	r7, r7, #3
   13f6c:	19e2      	adds	r2, r4, r7
   13f6e:	b923      	cbnz	r3, 13f7a <__mdiff+0xfe>
   13f70:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   13f74:	3d01      	subs	r5, #1
   13f76:	2b00      	cmp	r3, #0
   13f78:	d0fa      	beq.n	13f70 <__mdiff+0xf4>
   13f7a:	f8c9 5010 	str.w	r5, [r9, #16]
   13f7e:	4648      	mov	r0, r9
   13f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f84:	4633      	mov	r3, r6
   13f86:	2701      	movs	r7, #1
   13f88:	4646      	mov	r6, r8
   13f8a:	4698      	mov	r8, r3
   13f8c:	e790      	b.n	13eb0 <__mdiff+0x34>
   13f8e:	dbf9      	blt.n	13f84 <__mdiff+0x108>
   13f90:	2700      	movs	r7, #0
   13f92:	e78d      	b.n	13eb0 <__mdiff+0x34>
   13f94:	2100      	movs	r1, #0
   13f96:	f7ff fc71 	bl	1387c <_Balloc>
   13f9a:	4681      	mov	r9, r0
   13f9c:	b168      	cbz	r0, 13fba <__mdiff+0x13e>
   13f9e:	2201      	movs	r2, #1
   13fa0:	2300      	movs	r3, #0
   13fa2:	e9c9 2304 	strd	r2, r3, [r9, #16]
   13fa6:	4648      	mov	r0, r9
   13fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fac:	4b06      	ldr	r3, [pc, #24]	; (13fc8 <__mdiff+0x14c>)
   13fae:	4807      	ldr	r0, [pc, #28]	; (13fcc <__mdiff+0x150>)
   13fb0:	464a      	mov	r2, r9
   13fb2:	f240 2145 	movw	r1, #581	; 0x245
   13fb6:	f003 fda3 	bl	17b00 <__assert_func>
   13fba:	4b03      	ldr	r3, [pc, #12]	; (13fc8 <__mdiff+0x14c>)
   13fbc:	4803      	ldr	r0, [pc, #12]	; (13fcc <__mdiff+0x150>)
   13fbe:	464a      	mov	r2, r9
   13fc0:	f240 2137 	movw	r1, #567	; 0x237
   13fc4:	f003 fd9c 	bl	17b00 <__assert_func>
   13fc8:	20000e78 	.word	0x20000e78
   13fcc:	20000ff0 	.word	0x20000ff0

00013fd0 <__ulp>:
   13fd0:	b082      	sub	sp, #8
   13fd2:	ed8d 0b00 	vstr	d0, [sp]
   13fd6:	4b16      	ldr	r3, [pc, #88]	; (14030 <__ulp+0x60>)
   13fd8:	9a01      	ldr	r2, [sp, #4]
   13fda:	4013      	ands	r3, r2
   13fdc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   13fe0:	2b00      	cmp	r3, #0
   13fe2:	dd06      	ble.n	13ff2 <__ulp+0x22>
   13fe4:	2200      	movs	r2, #0
   13fe6:	4619      	mov	r1, r3
   13fe8:	4610      	mov	r0, r2
   13fea:	ec41 0b10 	vmov	d0, r0, r1
   13fee:	b002      	add	sp, #8
   13ff0:	4770      	bx	lr
   13ff2:	425b      	negs	r3, r3
   13ff4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   13ff8:	ea4f 5223 	mov.w	r2, r3, asr #20
   13ffc:	da09      	bge.n	14012 <__ulp+0x42>
   13ffe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   14002:	4113      	asrs	r3, r2
   14004:	2200      	movs	r2, #0
   14006:	4619      	mov	r1, r3
   14008:	4610      	mov	r0, r2
   1400a:	ec41 0b10 	vmov	d0, r0, r1
   1400e:	b002      	add	sp, #8
   14010:	4770      	bx	lr
   14012:	f1a2 0314 	sub.w	r3, r2, #20
   14016:	2b1e      	cmp	r3, #30
   14018:	bfda      	itte	le
   1401a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   1401e:	40da      	lsrle	r2, r3
   14020:	2201      	movgt	r2, #1
   14022:	2300      	movs	r3, #0
   14024:	4619      	mov	r1, r3
   14026:	4610      	mov	r0, r2
   14028:	ec41 0b10 	vmov	d0, r0, r1
   1402c:	b002      	add	sp, #8
   1402e:	4770      	bx	lr
   14030:	7ff00000 	.word	0x7ff00000

00014034 <__b2d>:
   14034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14036:	6904      	ldr	r4, [r0, #16]
   14038:	f100 0614 	add.w	r6, r0, #20
   1403c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
   14040:	1f27      	subs	r7, r4, #4
   14042:	f854 5c04 	ldr.w	r5, [r4, #-4]
   14046:	4628      	mov	r0, r5
   14048:	f7ff fcf2 	bl	13a30 <__hi0bits>
   1404c:	f1c0 0320 	rsb	r3, r0, #32
   14050:	280a      	cmp	r0, #10
   14052:	600b      	str	r3, [r1, #0]
   14054:	dd1b      	ble.n	1408e <__b2d+0x5a>
   14056:	42be      	cmp	r6, r7
   14058:	d20b      	bcs.n	14072 <__b2d+0x3e>
   1405a:	380b      	subs	r0, #11
   1405c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   14060:	d12e      	bne.n	140c0 <__b2d+0x8c>
   14062:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   14066:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   1406a:	460a      	mov	r2, r1
   1406c:	ec43 2b10 	vmov	d0, r2, r3
   14070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14072:	f1b0 010b 	subs.w	r1, r0, #11
   14076:	d0f4      	beq.n	14062 <__b2d+0x2e>
   14078:	fa05 f101 	lsl.w	r1, r5, r1
   1407c:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   14080:	2100      	movs	r1, #0
   14082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   14086:	460a      	mov	r2, r1
   14088:	ec43 2b10 	vmov	d0, r2, r3
   1408c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1408e:	f1c0 0c0b 	rsb	ip, r0, #11
   14092:	fa25 f10c 	lsr.w	r1, r5, ip
   14096:	42be      	cmp	r6, r7
   14098:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   1409c:	bf38      	it	cc
   1409e:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
   140a2:	f100 0015 	add.w	r0, r0, #21
   140a6:	bf34      	ite	cc
   140a8:	fa21 f10c 	lsrcc.w	r1, r1, ip
   140ac:	2100      	movcs	r1, #0
   140ae:	fa05 f000 	lsl.w	r0, r5, r0
   140b2:	4301      	orrs	r1, r0
   140b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   140b8:	460a      	mov	r2, r1
   140ba:	ec43 2b10 	vmov	d0, r2, r3
   140be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140c0:	f1c0 0c20 	rsb	ip, r0, #32
   140c4:	4085      	lsls	r5, r0
   140c6:	fa21 f30c 	lsr.w	r3, r1, ip
   140ca:	ea45 0703 	orr.w	r7, r5, r3
   140ce:	f1a4 0508 	sub.w	r5, r4, #8
   140d2:	42ae      	cmp	r6, r5
   140d4:	fa01 f100 	lsl.w	r1, r1, r0
   140d8:	bf3c      	itt	cc
   140da:	f854 0c0c 	ldrcc.w	r0, [r4, #-12]
   140de:	fa20 f00c 	lsrcc.w	r0, r0, ip
   140e2:	f047 537f 	orr.w	r3, r7, #1069547520	; 0x3fc00000
   140e6:	bf38      	it	cc
   140e8:	4301      	orrcc	r1, r0
   140ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   140ee:	460a      	mov	r2, r1
   140f0:	ec43 2b10 	vmov	d0, r2, r3
   140f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140f6:	bf00      	nop

000140f8 <__d2b>:
   140f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   140fc:	4688      	mov	r8, r1
   140fe:	b083      	sub	sp, #12
   14100:	2101      	movs	r1, #1
   14102:	ec57 6b10 	vmov	r6, r7, d0
   14106:	4615      	mov	r5, r2
   14108:	f7ff fbb8 	bl	1387c <_Balloc>
   1410c:	4604      	mov	r4, r0
   1410e:	2800      	cmp	r0, #0
   14110:	d051      	beq.n	141b6 <__d2b+0xbe>
   14112:	f3c7 590a 	ubfx	r9, r7, #20, #11
   14116:	f3c7 0313 	ubfx	r3, r7, #0, #20
   1411a:	f1b9 0f00 	cmp.w	r9, #0
   1411e:	d001      	beq.n	14124 <__d2b+0x2c>
   14120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   14124:	2e00      	cmp	r6, #0
   14126:	9301      	str	r3, [sp, #4]
   14128:	d118      	bne.n	1415c <__d2b+0x64>
   1412a:	a801      	add	r0, sp, #4
   1412c:	f7ff fca0 	bl	13a70 <__lo0bits>
   14130:	9a01      	ldr	r2, [sp, #4]
   14132:	6162      	str	r2, [r4, #20]
   14134:	2201      	movs	r2, #1
   14136:	f100 0320 	add.w	r3, r0, #32
   1413a:	6122      	str	r2, [r4, #16]
   1413c:	f1b9 0f00 	cmp.w	r9, #0
   14140:	d025      	beq.n	1418e <__d2b+0x96>
   14142:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   14146:	eb09 0203 	add.w	r2, r9, r3
   1414a:	4620      	mov	r0, r4
   1414c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   14150:	f8c8 2000 	str.w	r2, [r8]
   14154:	602b      	str	r3, [r5, #0]
   14156:	b003      	add	sp, #12
   14158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1415c:	4668      	mov	r0, sp
   1415e:	9600      	str	r6, [sp, #0]
   14160:	f7ff fc86 	bl	13a70 <__lo0bits>
   14164:	4603      	mov	r3, r0
   14166:	b310      	cbz	r0, 141ae <__d2b+0xb6>
   14168:	e9dd 0200 	ldrd	r0, r2, [sp]
   1416c:	f1c3 0120 	rsb	r1, r3, #32
   14170:	fa02 f101 	lsl.w	r1, r2, r1
   14174:	4301      	orrs	r1, r0
   14176:	40da      	lsrs	r2, r3
   14178:	6161      	str	r1, [r4, #20]
   1417a:	9201      	str	r2, [sp, #4]
   1417c:	2a00      	cmp	r2, #0
   1417e:	61a2      	str	r2, [r4, #24]
   14180:	bf14      	ite	ne
   14182:	2202      	movne	r2, #2
   14184:	2201      	moveq	r2, #1
   14186:	6122      	str	r2, [r4, #16]
   14188:	f1b9 0f00 	cmp.w	r9, #0
   1418c:	d1d9      	bne.n	14142 <__d2b+0x4a>
   1418e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   14192:	f8c8 3000 	str.w	r3, [r8]
   14196:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   1419a:	6918      	ldr	r0, [r3, #16]
   1419c:	f7ff fc48 	bl	13a30 <__hi0bits>
   141a0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   141a4:	4620      	mov	r0, r4
   141a6:	602b      	str	r3, [r5, #0]
   141a8:	b003      	add	sp, #12
   141aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   141ae:	9a00      	ldr	r2, [sp, #0]
   141b0:	6162      	str	r2, [r4, #20]
   141b2:	9a01      	ldr	r2, [sp, #4]
   141b4:	e7e2      	b.n	1417c <__d2b+0x84>
   141b6:	4b03      	ldr	r3, [pc, #12]	; (141c4 <__d2b+0xcc>)
   141b8:	4803      	ldr	r0, [pc, #12]	; (141c8 <__d2b+0xd0>)
   141ba:	4622      	mov	r2, r4
   141bc:	f240 310f 	movw	r1, #783	; 0x30f
   141c0:	f003 fc9e 	bl	17b00 <__assert_func>
   141c4:	20000e78 	.word	0x20000e78
   141c8:	20000ff0 	.word	0x20000ff0

000141cc <__ratio>:
   141cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   141ce:	b083      	sub	sp, #12
   141d0:	460e      	mov	r6, r1
   141d2:	4669      	mov	r1, sp
   141d4:	4607      	mov	r7, r0
   141d6:	f7ff ff2d 	bl	14034 <__b2d>
   141da:	a901      	add	r1, sp, #4
   141dc:	4630      	mov	r0, r6
   141de:	ec55 4b10 	vmov	r4, r5, d0
   141e2:	eeb0 7b40 	vmov.f64	d7, d0
   141e6:	f7ff ff25 	bl	14034 <__b2d>
   141ea:	6933      	ldr	r3, [r6, #16]
   141ec:	693a      	ldr	r2, [r7, #16]
   141ee:	1ad2      	subs	r2, r2, r3
   141f0:	e9dd 3100 	ldrd	r3, r1, [sp]
   141f4:	1a5b      	subs	r3, r3, r1
   141f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
   141fa:	2b00      	cmp	r3, #0
   141fc:	dd09      	ble.n	14212 <__ratio+0x46>
   141fe:	ee17 2a90 	vmov	r2, s15
   14202:	eb02 5503 	add.w	r5, r2, r3, lsl #20
   14206:	ec45 4b17 	vmov	d7, r4, r5
   1420a:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1420e:	b003      	add	sp, #12
   14210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14212:	ee10 2a90 	vmov	r2, s1
   14216:	ec51 0b10 	vmov	r0, r1, d0
   1421a:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
   1421e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
   14222:	ec41 0b10 	vmov	d0, r0, r1
   14226:	ee87 0b00 	vdiv.f64	d0, d7, d0
   1422a:	b003      	add	sp, #12
   1422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1422e:	bf00      	nop

00014230 <__copybits>:
   14230:	3901      	subs	r1, #1
   14232:	1149      	asrs	r1, r1, #5
   14234:	f101 0c01 	add.w	ip, r1, #1
   14238:	6911      	ldr	r1, [r2, #16]
   1423a:	f102 0314 	add.w	r3, r2, #20
   1423e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   14242:	428b      	cmp	r3, r1
   14244:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
   14248:	d217      	bcs.n	1427a <__copybits+0x4a>
   1424a:	b510      	push	{r4, lr}
   1424c:	f1a0 0e04 	sub.w	lr, r0, #4
   14250:	f853 4b04 	ldr.w	r4, [r3], #4
   14254:	f84e 4f04 	str.w	r4, [lr, #4]!
   14258:	4299      	cmp	r1, r3
   1425a:	d8f9      	bhi.n	14250 <__copybits+0x20>
   1425c:	1a8a      	subs	r2, r1, r2
   1425e:	f1a2 0315 	sub.w	r3, r2, #21
   14262:	f023 0303 	bic.w	r3, r3, #3
   14266:	3304      	adds	r3, #4
   14268:	4418      	add	r0, r3
   1426a:	4584      	cmp	ip, r0
   1426c:	d904      	bls.n	14278 <__copybits+0x48>
   1426e:	2300      	movs	r3, #0
   14270:	f840 3b04 	str.w	r3, [r0], #4
   14274:	4584      	cmp	ip, r0
   14276:	d8fb      	bhi.n	14270 <__copybits+0x40>
   14278:	bd10      	pop	{r4, pc}
   1427a:	4584      	cmp	ip, r0
   1427c:	d905      	bls.n	1428a <__copybits+0x5a>
   1427e:	2300      	movs	r3, #0
   14280:	f840 3b04 	str.w	r3, [r0], #4
   14284:	4584      	cmp	ip, r0
   14286:	d8fb      	bhi.n	14280 <__copybits+0x50>
   14288:	4770      	bx	lr
   1428a:	4770      	bx	lr

0001428c <__any_on>:
   1428c:	6903      	ldr	r3, [r0, #16]
   1428e:	114a      	asrs	r2, r1, #5
   14290:	4293      	cmp	r3, r2
   14292:	f100 0014 	add.w	r0, r0, #20
   14296:	da09      	bge.n	142ac <__any_on+0x20>
   14298:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1429c:	e002      	b.n	142a4 <__any_on+0x18>
   1429e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   142a2:	b9c2      	cbnz	r2, 142d6 <__any_on+0x4a>
   142a4:	4283      	cmp	r3, r0
   142a6:	d8fa      	bhi.n	1429e <__any_on+0x12>
   142a8:	2000      	movs	r0, #0
   142aa:	4770      	bx	lr
   142ac:	dd10      	ble.n	142d0 <__any_on+0x44>
   142ae:	f011 011f 	ands.w	r1, r1, #31
   142b2:	d00d      	beq.n	142d0 <__any_on+0x44>
   142b4:	b410      	push	{r4}
   142b6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   142ba:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   142be:	fa24 f201 	lsr.w	r2, r4, r1
   142c2:	408a      	lsls	r2, r1
   142c4:	4294      	cmp	r4, r2
   142c6:	d00c      	beq.n	142e2 <__any_on+0x56>
   142c8:	2001      	movs	r0, #1
   142ca:	f85d 4b04 	ldr.w	r4, [sp], #4
   142ce:	4770      	bx	lr
   142d0:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   142d4:	e7e6      	b.n	142a4 <__any_on+0x18>
   142d6:	2001      	movs	r0, #1
   142d8:	4770      	bx	lr
   142da:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   142de:	2a00      	cmp	r2, #0
   142e0:	d1f2      	bne.n	142c8 <__any_on+0x3c>
   142e2:	4283      	cmp	r3, r0
   142e4:	d8f9      	bhi.n	142da <__any_on+0x4e>
   142e6:	2000      	movs	r0, #0
   142e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop

000142f0 <__ascii_wctomb>:
   142f0:	b149      	cbz	r1, 14306 <__ascii_wctomb+0x16>
   142f2:	2aff      	cmp	r2, #255	; 0xff
   142f4:	d802      	bhi.n	142fc <__ascii_wctomb+0xc>
   142f6:	700a      	strb	r2, [r1, #0]
   142f8:	2001      	movs	r0, #1
   142fa:	4770      	bx	lr
   142fc:	238a      	movs	r3, #138	; 0x8a
   142fe:	6003      	str	r3, [r0, #0]
   14300:	f04f 30ff 	mov.w	r0, #4294967295
   14304:	4770      	bx	lr
   14306:	4608      	mov	r0, r1
   14308:	4770      	bx	lr
   1430a:	bf00      	nop

0001430c <fcvtbuf>:
   1430c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14310:	460e      	mov	r6, r1
   14312:	4926      	ldr	r1, [pc, #152]	; (143ac <fcvtbuf+0xa0>)
   14314:	b087      	sub	sp, #28
   14316:	680f      	ldr	r7, [r1, #0]
   14318:	4604      	mov	r4, r0
   1431a:	4690      	mov	r8, r2
   1431c:	461d      	mov	r5, r3
   1431e:	b353      	cbz	r3, 14376 <fcvtbuf+0x6a>
   14320:	aa05      	add	r2, sp, #20
   14322:	4633      	mov	r3, r6
   14324:	9201      	str	r2, [sp, #4]
   14326:	2103      	movs	r1, #3
   14328:	4622      	mov	r2, r4
   1432a:	f8cd 8000 	str.w	r8, [sp]
   1432e:	4638      	mov	r0, r7
   14330:	f003 fcd6 	bl	17ce0 <_dtoa_r>
   14334:	9b05      	ldr	r3, [sp, #20]
   14336:	6832      	ldr	r2, [r6, #0]
   14338:	4298      	cmp	r0, r3
   1433a:	4684      	mov	ip, r0
   1433c:	f1c2 0200 	rsb	r2, r2, #0
   14340:	4629      	mov	r1, r5
   14342:	d209      	bcs.n	14358 <fcvtbuf+0x4c>
   14344:	1a10      	subs	r0, r2, r0
   14346:	f81c 3b01 	ldrb.w	r3, [ip], #1
   1434a:	f801 3b01 	strb.w	r3, [r1], #1
   1434e:	9b05      	ldr	r3, [sp, #20]
   14350:	4563      	cmp	r3, ip
   14352:	eb00 020c 	add.w	r2, r0, ip
   14356:	d8f6      	bhi.n	14346 <fcvtbuf+0x3a>
   14358:	4294      	cmp	r4, r2
   1435a:	dd24      	ble.n	143a6 <fcvtbuf+0x9a>
   1435c:	1aa2      	subs	r2, r4, r2
   1435e:	440a      	add	r2, r1
   14360:	2330      	movs	r3, #48	; 0x30
   14362:	f801 3b01 	strb.w	r3, [r1], #1
   14366:	4291      	cmp	r1, r2
   14368:	d1fb      	bne.n	14362 <fcvtbuf+0x56>
   1436a:	2300      	movs	r3, #0
   1436c:	7013      	strb	r3, [r2, #0]
   1436e:	4628      	mov	r0, r5
   14370:	b007      	add	sp, #28
   14372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14376:	6cba      	ldr	r2, [r7, #72]	; 0x48
   14378:	f100 0323 	add.w	r3, r0, #35	; 0x23
   1437c:	429a      	cmp	r2, r3
   1437e:	dd01      	ble.n	14384 <fcvtbuf+0x78>
   14380:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   14382:	e7cd      	b.n	14320 <fcvtbuf+0x14>
   14384:	f100 0924 	add.w	r9, r0, #36	; 0x24
   14388:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1438a:	464a      	mov	r2, r9
   1438c:	4638      	mov	r0, r7
   1438e:	ed8d 0b02 	vstr	d0, [sp, #8]
   14392:	f7fc fba5 	bl	10ae0 <_realloc_r>
   14396:	4605      	mov	r5, r0
   14398:	2800      	cmp	r0, #0
   1439a:	d0e8      	beq.n	1436e <fcvtbuf+0x62>
   1439c:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   143a0:	ed9d 0b02 	vldr	d0, [sp, #8]
   143a4:	e7bc      	b.n	14320 <fcvtbuf+0x14>
   143a6:	460a      	mov	r2, r1
   143a8:	e7df      	b.n	1436a <fcvtbuf+0x5e>
   143aa:	bf00      	nop
   143ac:	200094fc 	.word	0x200094fc

000143b0 <_svfprintf_r>:
   143b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b4:	ed2d 8b08 	vpush	{d8-d11}
   143b8:	b0d1      	sub	sp, #324	; 0x144
   143ba:	460c      	mov	r4, r1
   143bc:	ee0b 1a10 	vmov	s22, r1
   143c0:	4690      	mov	r8, r2
   143c2:	9308      	str	r3, [sp, #32]
   143c4:	4683      	mov	fp, r0
   143c6:	f003 fb59 	bl	17a7c <_localeconv_r>
   143ca:	6803      	ldr	r3, [r0, #0]
   143cc:	9312      	str	r3, [sp, #72]	; 0x48
   143ce:	4618      	mov	r0, r3
   143d0:	f7fe fc16 	bl	12c00 <strlen>
   143d4:	af20      	add	r7, sp, #128	; 0x80
   143d6:	9010      	str	r0, [sp, #64]	; 0x40
   143d8:	2208      	movs	r2, #8
   143da:	2100      	movs	r1, #0
   143dc:	4638      	mov	r0, r7
   143de:	f7fe f827 	bl	12430 <memset>
   143e2:	89a3      	ldrh	r3, [r4, #12]
   143e4:	061b      	lsls	r3, r3, #24
   143e6:	d503      	bpl.n	143f0 <_svfprintf_r+0x40>
   143e8:	6923      	ldr	r3, [r4, #16]
   143ea:	2b00      	cmp	r3, #0
   143ec:	f000 8755 	beq.w	1529a <_svfprintf_r+0xeea>
   143f0:	2300      	movs	r3, #0
   143f2:	ed9f 8b83 	vldr	d8, [pc, #524]	; 14600 <_svfprintf_r+0x250>
   143f6:	ed9f 9b84 	vldr	d9, [pc, #528]	; 14608 <_svfprintf_r+0x258>
   143fa:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   143fe:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   14402:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   14406:	aa27      	add	r2, sp, #156	; 0x9c
   14408:	930e      	str	r3, [sp, #56]	; 0x38
   1440a:	9224      	str	r2, [sp, #144]	; 0x90
   1440c:	4692      	mov	sl, r2
   1440e:	9311      	str	r3, [sp, #68]	; 0x44
   14410:	9304      	str	r3, [sp, #16]
   14412:	4644      	mov	r4, r8
   14414:	46a1      	mov	r9, r4
   14416:	4b7e      	ldr	r3, [pc, #504]	; (14610 <_svfprintf_r+0x260>)
   14418:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1441c:	f7fe f928 	bl	12670 <__locale_mb_cur_max>
   14420:	464a      	mov	r2, r9
   14422:	4603      	mov	r3, r0
   14424:	a91c      	add	r1, sp, #112	; 0x70
   14426:	9700      	str	r7, [sp, #0]
   14428:	4658      	mov	r0, fp
   1442a:	47a8      	blx	r5
   1442c:	2800      	cmp	r0, #0
   1442e:	f000 80b0 	beq.w	14592 <_svfprintf_r+0x1e2>
   14432:	f2c0 80a6 	blt.w	14582 <_svfprintf_r+0x1d2>
   14436:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   14438:	2a25      	cmp	r2, #37	; 0x25
   1443a:	4603      	mov	r3, r0
   1443c:	d001      	beq.n	14442 <_svfprintf_r+0x92>
   1443e:	4499      	add	r9, r3
   14440:	e7e9      	b.n	14416 <_svfprintf_r+0x66>
   14442:	ebb9 0504 	subs.w	r5, r9, r4
   14446:	4606      	mov	r6, r0
   14448:	f040 80a7 	bne.w	1459a <_svfprintf_r+0x1ea>
   1444c:	2300      	movs	r3, #0
   1444e:	f04f 32ff 	mov.w	r2, #4294967295
   14452:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   14456:	4698      	mov	r8, r3
   14458:	9306      	str	r3, [sp, #24]
   1445a:	f109 0901 	add.w	r9, r9, #1
   1445e:	f899 3000 	ldrb.w	r3, [r9]
   14462:	9203      	str	r2, [sp, #12]
   14464:	252b      	movs	r5, #43	; 0x2b
   14466:	2620      	movs	r6, #32
   14468:	f109 0901 	add.w	r9, r9, #1
   1446c:	f1a3 0220 	sub.w	r2, r3, #32
   14470:	2a5a      	cmp	r2, #90	; 0x5a
   14472:	f200 80cf 	bhi.w	14614 <_svfprintf_r+0x264>
   14476:	e8df f012 	tbh	[pc, r2, lsl #1]
   1447a:	02e8      	.short	0x02e8
   1447c:	00cd00cd 	.word	0x00cd00cd
   14480:	00cd02e3 	.word	0x00cd02e3
   14484:	00cd00cd 	.word	0x00cd00cd
   14488:	00cd006a 	.word	0x00cd006a
   1448c:	020500cd 	.word	0x020500cd
   14490:	00cd0284 	.word	0x00cd0284
   14494:	02c90210 	.word	0x02c90210
   14498:	02bd00cd 	.word	0x02bd00cd
   1449c:	005b005b 	.word	0x005b005b
   144a0:	005b005b 	.word	0x005b005b
   144a4:	005b005b 	.word	0x005b005b
   144a8:	005b005b 	.word	0x005b005b
   144ac:	00cd005b 	.word	0x00cd005b
   144b0:	00cd00cd 	.word	0x00cd00cd
   144b4:	00cd00cd 	.word	0x00cd00cd
   144b8:	00cd00cd 	.word	0x00cd00cd
   144bc:	00cd0153 	.word	0x00cd0153
   144c0:	021a0183 	.word	0x021a0183
   144c4:	01530153 	.word	0x01530153
   144c8:	00cd0153 	.word	0x00cd0153
   144cc:	00cd00cd 	.word	0x00cd00cd
   144d0:	021500cd 	.word	0x021500cd
   144d4:	00cd00cd 	.word	0x00cd00cd
   144d8:	00cd0296 	.word	0x00cd0296
   144dc:	00cd00cd 	.word	0x00cd00cd
   144e0:	00cd01ab 	.word	0x00cd01ab
   144e4:	00cd02aa 	.word	0x00cd02aa
   144e8:	06e300cd 	.word	0x06e300cd
   144ec:	00cd00cd 	.word	0x00cd00cd
   144f0:	00cd00cd 	.word	0x00cd00cd
   144f4:	00cd00cd 	.word	0x00cd00cd
   144f8:	00cd00cd 	.word	0x00cd00cd
   144fc:	00cd0153 	.word	0x00cd0153
   14500:	01de0183 	.word	0x01de0183
   14504:	01530153 	.word	0x01530153
   14508:	02770153 	.word	0x02770153
   1450c:	007f01de 	.word	0x007f01de
   14510:	028900cd 	.word	0x028900cd
   14514:	025f00cd 	.word	0x025f00cd
   14518:	022f06e0 	.word	0x022f06e0
   1451c:	00cd007f 	.word	0x00cd007f
   14520:	007c01ab 	.word	0x007c01ab
   14524:	00cd06b8 	.word	0x00cd06b8
   14528:	06bd00cd 	.word	0x06bd00cd
   1452c:	007c00cd 	.word	0x007c00cd
   14530:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14534:	2100      	movs	r1, #0
   14536:	f819 3b01 	ldrb.w	r3, [r9], #1
   1453a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1453e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   14542:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14546:	2a09      	cmp	r2, #9
   14548:	d9f5      	bls.n	14536 <_svfprintf_r+0x186>
   1454a:	9106      	str	r1, [sp, #24]
   1454c:	e78e      	b.n	1446c <_svfprintf_r+0xbc>
   1454e:	4658      	mov	r0, fp
   14550:	f003 fa94 	bl	17a7c <_localeconv_r>
   14554:	6843      	ldr	r3, [r0, #4]
   14556:	9315      	str	r3, [sp, #84]	; 0x54
   14558:	4618      	mov	r0, r3
   1455a:	f7fe fb51 	bl	12c00 <strlen>
   1455e:	9016      	str	r0, [sp, #88]	; 0x58
   14560:	4658      	mov	r0, fp
   14562:	f003 fa8b 	bl	17a7c <_localeconv_r>
   14566:	6883      	ldr	r3, [r0, #8]
   14568:	9313      	str	r3, [sp, #76]	; 0x4c
   1456a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1456c:	2b00      	cmp	r3, #0
   1456e:	f040 862d 	bne.w	151cc <_svfprintf_r+0xe1c>
   14572:	f899 3000 	ldrb.w	r3, [r9]
   14576:	e777      	b.n	14468 <_svfprintf_r+0xb8>
   14578:	f899 3000 	ldrb.w	r3, [r9]
   1457c:	f048 0820 	orr.w	r8, r8, #32
   14580:	e772      	b.n	14468 <_svfprintf_r+0xb8>
   14582:	2208      	movs	r2, #8
   14584:	2100      	movs	r1, #0
   14586:	4638      	mov	r0, r7
   14588:	f7fd ff52 	bl	12430 <memset>
   1458c:	2301      	movs	r3, #1
   1458e:	4499      	add	r9, r3
   14590:	e741      	b.n	14416 <_svfprintf_r+0x66>
   14592:	ebb9 0504 	subs.w	r5, r9, r4
   14596:	4606      	mov	r6, r0
   14598:	d011      	beq.n	145be <_svfprintf_r+0x20e>
   1459a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1459c:	442b      	add	r3, r5
   1459e:	9326      	str	r3, [sp, #152]	; 0x98
   145a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   145a2:	3301      	adds	r3, #1
   145a4:	2b07      	cmp	r3, #7
   145a6:	e9ca 4500 	strd	r4, r5, [sl]
   145aa:	9325      	str	r3, [sp, #148]	; 0x94
   145ac:	dc1c      	bgt.n	145e8 <_svfprintf_r+0x238>
   145ae:	f10a 0a08 	add.w	sl, sl, #8
   145b2:	9b04      	ldr	r3, [sp, #16]
   145b4:	442b      	add	r3, r5
   145b6:	9304      	str	r3, [sp, #16]
   145b8:	2e00      	cmp	r6, #0
   145ba:	f47f af47 	bne.w	1444c <_svfprintf_r+0x9c>
   145be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   145c0:	2b00      	cmp	r3, #0
   145c2:	f041 820b 	bne.w	159dc <_svfprintf_r+0x162c>
   145c6:	ee1b 3a10 	vmov	r3, s22
   145ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   145ce:	f013 0f40 	tst.w	r3, #64	; 0x40
   145d2:	9b04      	ldr	r3, [sp, #16]
   145d4:	bf18      	it	ne
   145d6:	f04f 33ff 	movne.w	r3, #4294967295
   145da:	9304      	str	r3, [sp, #16]
   145dc:	9804      	ldr	r0, [sp, #16]
   145de:	b051      	add	sp, #324	; 0x144
   145e0:	ecbd 8b08 	vpop	{d8-d11}
   145e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e8:	ee1b 1a10 	vmov	r1, s22
   145ec:	aa24      	add	r2, sp, #144	; 0x90
   145ee:	4658      	mov	r0, fp
   145f0:	f004 fd6a 	bl	190c8 <__ssprint_r>
   145f4:	2800      	cmp	r0, #0
   145f6:	d1e6      	bne.n	145c6 <_svfprintf_r+0x216>
   145f8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   145fc:	e7d9      	b.n	145b2 <_svfprintf_r+0x202>
   145fe:	bf00      	nop
	...
   14608:	ffffffff 	.word	0xffffffff
   1460c:	7fefffff 	.word	0x7fefffff
   14610:	20008f74 	.word	0x20008f74
   14614:	930b      	str	r3, [sp, #44]	; 0x2c
   14616:	2b00      	cmp	r3, #0
   14618:	d0d1      	beq.n	145be <_svfprintf_r+0x20e>
   1461a:	2100      	movs	r1, #0
   1461c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   14620:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   14624:	2301      	movs	r3, #1
   14626:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   1462a:	9302      	str	r3, [sp, #8]
   1462c:	9107      	str	r1, [sp, #28]
   1462e:	9305      	str	r3, [sp, #20]
   14630:	9103      	str	r1, [sp, #12]
   14632:	910f      	str	r1, [sp, #60]	; 0x3c
   14634:	ac37      	add	r4, sp, #220	; 0xdc
   14636:	f018 0302 	ands.w	r3, r8, #2
   1463a:	9309      	str	r3, [sp, #36]	; 0x24
   1463c:	d002      	beq.n	14644 <_svfprintf_r+0x294>
   1463e:	9b02      	ldr	r3, [sp, #8]
   14640:	3302      	adds	r3, #2
   14642:	9302      	str	r3, [sp, #8]
   14644:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   14648:	930a      	str	r3, [sp, #40]	; 0x28
   1464a:	d105      	bne.n	14658 <_svfprintf_r+0x2a8>
   1464c:	9b06      	ldr	r3, [sp, #24]
   1464e:	9a02      	ldr	r2, [sp, #8]
   14650:	1a9d      	subs	r5, r3, r2
   14652:	2d00      	cmp	r5, #0
   14654:	f300 8369 	bgt.w	14d2a <_svfprintf_r+0x97a>
   14658:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1465a:	b189      	cbz	r1, 14680 <_svfprintf_r+0x2d0>
   1465c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1465e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   14662:	3101      	adds	r1, #1
   14664:	3201      	adds	r2, #1
   14666:	f8ca 0000 	str.w	r0, [sl]
   1466a:	2907      	cmp	r1, #7
   1466c:	f04f 0001 	mov.w	r0, #1
   14670:	9226      	str	r2, [sp, #152]	; 0x98
   14672:	9125      	str	r1, [sp, #148]	; 0x94
   14674:	f8ca 0004 	str.w	r0, [sl, #4]
   14678:	f300 83a2 	bgt.w	14dc0 <_svfprintf_r+0xa10>
   1467c:	f10a 0a08 	add.w	sl, sl, #8
   14680:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14682:	b183      	cbz	r3, 146a6 <_svfprintf_r+0x2f6>
   14684:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14686:	a91a      	add	r1, sp, #104	; 0x68
   14688:	3301      	adds	r3, #1
   1468a:	3202      	adds	r2, #2
   1468c:	f8ca 1000 	str.w	r1, [sl]
   14690:	2b07      	cmp	r3, #7
   14692:	f04f 0102 	mov.w	r1, #2
   14696:	9226      	str	r2, [sp, #152]	; 0x98
   14698:	9325      	str	r3, [sp, #148]	; 0x94
   1469a:	f8ca 1004 	str.w	r1, [sl, #4]
   1469e:	f300 83a3 	bgt.w	14de8 <_svfprintf_r+0xa38>
   146a2:	f10a 0a08 	add.w	sl, sl, #8
   146a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   146a8:	2b80      	cmp	r3, #128	; 0x80
   146aa:	f000 826c 	beq.w	14b86 <_svfprintf_r+0x7d6>
   146ae:	9b03      	ldr	r3, [sp, #12]
   146b0:	9905      	ldr	r1, [sp, #20]
   146b2:	1a5d      	subs	r5, r3, r1
   146b4:	2d00      	cmp	r5, #0
   146b6:	f300 82a5 	bgt.w	14c04 <_svfprintf_r+0x854>
   146ba:	f418 7f80 	tst.w	r8, #256	; 0x100
   146be:	f040 820d 	bne.w	14adc <_svfprintf_r+0x72c>
   146c2:	9b05      	ldr	r3, [sp, #20]
   146c4:	f8ca 3004 	str.w	r3, [sl, #4]
   146c8:	441a      	add	r2, r3
   146ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   146cc:	f8ca 4000 	str.w	r4, [sl]
   146d0:	3301      	adds	r3, #1
   146d2:	2b07      	cmp	r3, #7
   146d4:	9226      	str	r2, [sp, #152]	; 0x98
   146d6:	9325      	str	r3, [sp, #148]	; 0x94
   146d8:	f300 831b 	bgt.w	14d12 <_svfprintf_r+0x962>
   146dc:	f10a 0a08 	add.w	sl, sl, #8
   146e0:	f018 0f04 	tst.w	r8, #4
   146e4:	d005      	beq.n	146f2 <_svfprintf_r+0x342>
   146e6:	9b06      	ldr	r3, [sp, #24]
   146e8:	9902      	ldr	r1, [sp, #8]
   146ea:	1a5c      	subs	r4, r3, r1
   146ec:	2c00      	cmp	r4, #0
   146ee:	f300 8388 	bgt.w	14e02 <_svfprintf_r+0xa52>
   146f2:	9b04      	ldr	r3, [sp, #16]
   146f4:	9906      	ldr	r1, [sp, #24]
   146f6:	9802      	ldr	r0, [sp, #8]
   146f8:	4281      	cmp	r1, r0
   146fa:	bfac      	ite	ge
   146fc:	185b      	addge	r3, r3, r1
   146fe:	181b      	addlt	r3, r3, r0
   14700:	9304      	str	r3, [sp, #16]
   14702:	2a00      	cmp	r2, #0
   14704:	f040 82b0 	bne.w	14c68 <_svfprintf_r+0x8b8>
   14708:	2300      	movs	r3, #0
   1470a:	9325      	str	r3, [sp, #148]	; 0x94
   1470c:	9b07      	ldr	r3, [sp, #28]
   1470e:	b11b      	cbz	r3, 14718 <_svfprintf_r+0x368>
   14710:	9907      	ldr	r1, [sp, #28]
   14712:	4658      	mov	r0, fp
   14714:	f7fe fb86 	bl	12e24 <_free_r>
   14718:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1471c:	464c      	mov	r4, r9
   1471e:	e679      	b.n	14414 <_svfprintf_r+0x64>
   14720:	930b      	str	r3, [sp, #44]	; 0x2c
   14722:	9b08      	ldr	r3, [sp, #32]
   14724:	3307      	adds	r3, #7
   14726:	f023 0307 	bic.w	r3, r3, #7
   1472a:	ecb3 8b02 	vldmia	r3!, {d8}
   1472e:	eeb0 7bc8 	vabs.f64	d7, d8
   14732:	eeb4 7b49 	vcmp.f64	d7, d9
   14736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1473a:	9308      	str	r3, [sp, #32]
   1473c:	f340 84e9 	ble.w	15112 <_svfprintf_r+0xd62>
   14740:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   14744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14748:	f101 8059 	bmi.w	157fe <_svfprintf_r+0x144e>
   1474c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14750:	4cab      	ldr	r4, [pc, #684]	; (14a00 <_svfprintf_r+0x650>)
   14752:	4bac      	ldr	r3, [pc, #688]	; (14a04 <_svfprintf_r+0x654>)
   14754:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   14758:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1475a:	2a47      	cmp	r2, #71	; 0x47
   1475c:	bfc8      	it	gt
   1475e:	461c      	movgt	r4, r3
   14760:	2300      	movs	r3, #0
   14762:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14766:	2203      	movs	r2, #3
   14768:	9307      	str	r3, [sp, #28]
   1476a:	9202      	str	r2, [sp, #8]
   1476c:	9205      	str	r2, [sp, #20]
   1476e:	9303      	str	r3, [sp, #12]
   14770:	930f      	str	r3, [sp, #60]	; 0x3c
   14772:	2900      	cmp	r1, #0
   14774:	f43f af5f 	beq.w	14636 <_svfprintf_r+0x286>
   14778:	9b02      	ldr	r3, [sp, #8]
   1477a:	3301      	adds	r3, #1
   1477c:	9302      	str	r3, [sp, #8]
   1477e:	e75a      	b.n	14636 <_svfprintf_r+0x286>
   14780:	2b43      	cmp	r3, #67	; 0x43
   14782:	930b      	str	r3, [sp, #44]	; 0x2c
   14784:	d003      	beq.n	1478e <_svfprintf_r+0x3de>
   14786:	f018 0f10 	tst.w	r8, #16
   1478a:	f000 855d 	beq.w	15248 <_svfprintf_r+0xe98>
   1478e:	9d08      	ldr	r5, [sp, #32]
   14790:	2208      	movs	r2, #8
   14792:	2100      	movs	r1, #0
   14794:	a822      	add	r0, sp, #136	; 0x88
   14796:	ac37      	add	r4, sp, #220	; 0xdc
   14798:	f7fd fe4a 	bl	12430 <memset>
   1479c:	ab22      	add	r3, sp, #136	; 0x88
   1479e:	f855 2b04 	ldr.w	r2, [r5], #4
   147a2:	4621      	mov	r1, r4
   147a4:	4658      	mov	r0, fp
   147a6:	f004 fb65 	bl	18e74 <_wcrtomb_r>
   147aa:	4603      	mov	r3, r0
   147ac:	3301      	adds	r3, #1
   147ae:	9005      	str	r0, [sp, #20]
   147b0:	f001 82ee 	beq.w	15d90 <_svfprintf_r+0x19e0>
   147b4:	9b05      	ldr	r3, [sp, #20]
   147b6:	9508      	str	r5, [sp, #32]
   147b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   147bc:	9302      	str	r3, [sp, #8]
   147be:	2100      	movs	r1, #0
   147c0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   147c4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   147c8:	9107      	str	r1, [sp, #28]
   147ca:	9103      	str	r1, [sp, #12]
   147cc:	910f      	str	r1, [sp, #60]	; 0x3c
   147ce:	e732      	b.n	14636 <_svfprintf_r+0x286>
   147d0:	930b      	str	r3, [sp, #44]	; 0x2c
   147d2:	9b08      	ldr	r3, [sp, #32]
   147d4:	461a      	mov	r2, r3
   147d6:	2300      	movs	r3, #0
   147d8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   147dc:	4613      	mov	r3, r2
   147de:	f853 4b04 	ldr.w	r4, [r3], #4
   147e2:	9308      	str	r3, [sp, #32]
   147e4:	2c00      	cmp	r4, #0
   147e6:	f000 8548 	beq.w	1527a <_svfprintf_r+0xeca>
   147ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147ec:	2b53      	cmp	r3, #83	; 0x53
   147ee:	f000 86ec 	beq.w	155ca <_svfprintf_r+0x121a>
   147f2:	f018 0310 	ands.w	r3, r8, #16
   147f6:	930c      	str	r3, [sp, #48]	; 0x30
   147f8:	f040 86e7 	bne.w	155ca <_svfprintf_r+0x121a>
   147fc:	9b03      	ldr	r3, [sp, #12]
   147fe:	1c5d      	adds	r5, r3, #1
   14800:	f001 80e5 	beq.w	159ce <_svfprintf_r+0x161e>
   14804:	990c      	ldr	r1, [sp, #48]	; 0x30
   14806:	461a      	mov	r2, r3
   14808:	4620      	mov	r0, r4
   1480a:	f7fe f9a9 	bl	12b60 <memchr>
   1480e:	9007      	str	r0, [sp, #28]
   14810:	2800      	cmp	r0, #0
   14812:	f001 8328 	beq.w	15e66 <_svfprintf_r+0x1ab6>
   14816:	9b07      	ldr	r3, [sp, #28]
   14818:	1b1a      	subs	r2, r3, r4
   1481a:	9205      	str	r2, [sp, #20]
   1481c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1481e:	9303      	str	r3, [sp, #12]
   14820:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   14824:	930f      	str	r3, [sp, #60]	; 0x3c
   14826:	930d      	str	r3, [sp, #52]	; 0x34
   14828:	9307      	str	r3, [sp, #28]
   1482a:	2373      	movs	r3, #115	; 0x73
   1482c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14830:	9202      	str	r2, [sp, #8]
   14832:	930b      	str	r3, [sp, #44]	; 0x2c
   14834:	e79d      	b.n	14772 <_svfprintf_r+0x3c2>
   14836:	f018 0f20 	tst.w	r8, #32
   1483a:	930b      	str	r3, [sp, #44]	; 0x2c
   1483c:	9b08      	ldr	r3, [sp, #32]
   1483e:	d03d      	beq.n	148bc <_svfprintf_r+0x50c>
   14840:	3307      	adds	r3, #7
   14842:	f023 0307 	bic.w	r3, r3, #7
   14846:	461a      	mov	r2, r3
   14848:	4611      	mov	r1, r2
   1484a:	685b      	ldr	r3, [r3, #4]
   1484c:	f851 2b08 	ldr.w	r2, [r1], #8
   14850:	9108      	str	r1, [sp, #32]
   14852:	4619      	mov	r1, r3
   14854:	2b00      	cmp	r3, #0
   14856:	f2c0 840c 	blt.w	15072 <_svfprintf_r+0xcc2>
   1485a:	9b03      	ldr	r3, [sp, #12]
   1485c:	3301      	adds	r3, #1
   1485e:	f000 829e 	beq.w	14d9e <_svfprintf_r+0x9ee>
   14862:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   14866:	ea52 0301 	orrs.w	r3, r2, r1
   1486a:	9002      	str	r0, [sp, #8]
   1486c:	f040 8299 	bne.w	14da2 <_svfprintf_r+0x9f2>
   14870:	9b03      	ldr	r3, [sp, #12]
   14872:	2b00      	cmp	r3, #0
   14874:	f040 829a 	bne.w	14dac <_svfprintf_r+0x9fc>
   14878:	4680      	mov	r8, r0
   1487a:	2300      	movs	r3, #0
   1487c:	9303      	str	r3, [sp, #12]
   1487e:	9305      	str	r3, [sp, #20]
   14880:	ac50      	add	r4, sp, #320	; 0x140
   14882:	e106      	b.n	14a92 <_svfprintf_r+0x6e2>
   14884:	9b08      	ldr	r3, [sp, #32]
   14886:	f853 2b04 	ldr.w	r2, [r3], #4
   1488a:	9206      	str	r2, [sp, #24]
   1488c:	2a00      	cmp	r2, #0
   1488e:	f280 8419 	bge.w	150c4 <_svfprintf_r+0xd14>
   14892:	9a06      	ldr	r2, [sp, #24]
   14894:	9308      	str	r3, [sp, #32]
   14896:	4252      	negs	r2, r2
   14898:	9206      	str	r2, [sp, #24]
   1489a:	f899 3000 	ldrb.w	r3, [r9]
   1489e:	f048 0804 	orr.w	r8, r8, #4
   148a2:	e5e1      	b.n	14468 <_svfprintf_r+0xb8>
   148a4:	f899 3000 	ldrb.w	r3, [r9]
   148a8:	f048 0808 	orr.w	r8, r8, #8
   148ac:	e5dc      	b.n	14468 <_svfprintf_r+0xb8>
   148ae:	f048 0810 	orr.w	r8, r8, #16
   148b2:	f018 0f20 	tst.w	r8, #32
   148b6:	930b      	str	r3, [sp, #44]	; 0x2c
   148b8:	9b08      	ldr	r3, [sp, #32]
   148ba:	d1c1      	bne.n	14840 <_svfprintf_r+0x490>
   148bc:	f018 0f10 	tst.w	r8, #16
   148c0:	f040 840b 	bne.w	150da <_svfprintf_r+0xd2a>
   148c4:	f018 0f40 	tst.w	r8, #64	; 0x40
   148c8:	f000 8403 	beq.w	150d2 <_svfprintf_r+0xd22>
   148cc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   148d0:	9308      	str	r3, [sp, #32]
   148d2:	17d1      	asrs	r1, r2, #31
   148d4:	460b      	mov	r3, r1
   148d6:	e7bd      	b.n	14854 <_svfprintf_r+0x4a4>
   148d8:	9b08      	ldr	r3, [sp, #32]
   148da:	f048 0202 	orr.w	r2, r8, #2
   148de:	9202      	str	r2, [sp, #8]
   148e0:	f853 2b04 	ldr.w	r2, [r3], #4
   148e4:	9308      	str	r3, [sp, #32]
   148e6:	f647 0330 	movw	r3, #30768	; 0x7830
   148ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   148ee:	2078      	movs	r0, #120	; 0x78
   148f0:	4b45      	ldr	r3, [pc, #276]	; (14a08 <_svfprintf_r+0x658>)
   148f2:	9311      	str	r3, [sp, #68]	; 0x44
   148f4:	2100      	movs	r1, #0
   148f6:	2302      	movs	r3, #2
   148f8:	900b      	str	r0, [sp, #44]	; 0x2c
   148fa:	2000      	movs	r0, #0
   148fc:	9c03      	ldr	r4, [sp, #12]
   148fe:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   14902:	1c60      	adds	r0, r4, #1
   14904:	f000 80ad 	beq.w	14a62 <_svfprintf_r+0x6b2>
   14908:	9802      	ldr	r0, [sp, #8]
   1490a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   1490e:	ea52 0001 	orrs.w	r0, r2, r1
   14912:	f040 80a4 	bne.w	14a5e <_svfprintf_r+0x6ae>
   14916:	2c00      	cmp	r4, #0
   14918:	f040 86ae 	bne.w	15678 <_svfprintf_r+0x12c8>
   1491c:	2b00      	cmp	r3, #0
   1491e:	d1ac      	bne.n	1487a <_svfprintf_r+0x4ca>
   14920:	9b02      	ldr	r3, [sp, #8]
   14922:	f013 0301 	ands.w	r3, r3, #1
   14926:	9305      	str	r3, [sp, #20]
   14928:	f000 83d1 	beq.w	150ce <_svfprintf_r+0xd1e>
   1492c:	2330      	movs	r3, #48	; 0x30
   1492e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   14932:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   14936:	e0ac      	b.n	14a92 <_svfprintf_r+0x6e2>
   14938:	f018 0f20 	tst.w	r8, #32
   1493c:	f040 83d4 	bne.w	150e8 <_svfprintf_r+0xd38>
   14940:	f018 0f10 	tst.w	r8, #16
   14944:	f040 869f 	bne.w	15686 <_svfprintf_r+0x12d6>
   14948:	f018 0f40 	tst.w	r8, #64	; 0x40
   1494c:	f040 8797 	bne.w	1587e <_svfprintf_r+0x14ce>
   14950:	f418 7f00 	tst.w	r8, #512	; 0x200
   14954:	f000 8697 	beq.w	15686 <_svfprintf_r+0x12d6>
   14958:	9b08      	ldr	r3, [sp, #32]
   1495a:	9904      	ldr	r1, [sp, #16]
   1495c:	f853 2b04 	ldr.w	r2, [r3], #4
   14960:	9308      	str	r3, [sp, #32]
   14962:	7011      	strb	r1, [r2, #0]
   14964:	464c      	mov	r4, r9
   14966:	e555      	b.n	14414 <_svfprintf_r+0x64>
   14968:	f899 3000 	ldrb.w	r3, [r9]
   1496c:	2b68      	cmp	r3, #104	; 0x68
   1496e:	bf03      	ittte	eq
   14970:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14974:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   14978:	f109 0901 	addeq.w	r9, r9, #1
   1497c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   14980:	e572      	b.n	14468 <_svfprintf_r+0xb8>
   14982:	f899 3000 	ldrb.w	r3, [r9]
   14986:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   1498a:	e56d      	b.n	14468 <_svfprintf_r+0xb8>
   1498c:	f899 3000 	ldrb.w	r3, [r9]
   14990:	2b6c      	cmp	r3, #108	; 0x6c
   14992:	bf03      	ittte	eq
   14994:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   14998:	f048 0820 	orreq.w	r8, r8, #32
   1499c:	f109 0901 	addeq.w	r9, r9, #1
   149a0:	f048 0810 	orrne.w	r8, r8, #16
   149a4:	e560      	b.n	14468 <_svfprintf_r+0xb8>
   149a6:	930b      	str	r3, [sp, #44]	; 0x2c
   149a8:	f048 0810 	orr.w	r8, r8, #16
   149ac:	f018 0120 	ands.w	r1, r8, #32
   149b0:	f000 8351 	beq.w	15056 <_svfprintf_r+0xca6>
   149b4:	9b08      	ldr	r3, [sp, #32]
   149b6:	3307      	adds	r3, #7
   149b8:	f023 0307 	bic.w	r3, r3, #7
   149bc:	6859      	ldr	r1, [r3, #4]
   149be:	f853 2b08 	ldr.w	r2, [r3], #8
   149c2:	9308      	str	r3, [sp, #32]
   149c4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   149c8:	9302      	str	r3, [sp, #8]
   149ca:	2300      	movs	r3, #0
   149cc:	e795      	b.n	148fa <_svfprintf_r+0x54a>
   149ce:	930b      	str	r3, [sp, #44]	; 0x2c
   149d0:	f048 0310 	orr.w	r3, r8, #16
   149d4:	9302      	str	r3, [sp, #8]
   149d6:	9b02      	ldr	r3, [sp, #8]
   149d8:	f013 0120 	ands.w	r1, r3, #32
   149dc:	f000 8329 	beq.w	15032 <_svfprintf_r+0xc82>
   149e0:	9b08      	ldr	r3, [sp, #32]
   149e2:	3307      	adds	r3, #7
   149e4:	f023 0307 	bic.w	r3, r3, #7
   149e8:	6859      	ldr	r1, [r3, #4]
   149ea:	f853 2b08 	ldr.w	r2, [r3], #8
   149ee:	9308      	str	r3, [sp, #32]
   149f0:	2301      	movs	r3, #1
   149f2:	e782      	b.n	148fa <_svfprintf_r+0x54a>
   149f4:	f899 3000 	ldrb.w	r3, [r9]
   149f8:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   149fc:	e534      	b.n	14468 <_svfprintf_r+0xb8>
   149fe:	bf00      	nop
   14a00:	200011e8 	.word	0x200011e8
   14a04:	20000be0 	.word	0x20000be0
   14a08:	200011f0 	.word	0x200011f0
   14a0c:	4649      	mov	r1, r9
   14a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
   14a12:	2b2a      	cmp	r3, #42	; 0x2a
   14a14:	f001 8249 	beq.w	15eaa <_svfprintf_r+0x1afa>
   14a18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14a1c:	2a09      	cmp	r2, #9
   14a1e:	4689      	mov	r9, r1
   14a20:	bf98      	it	ls
   14a22:	2100      	movls	r1, #0
   14a24:	f201 8144 	bhi.w	15cb0 <_svfprintf_r+0x1900>
   14a28:	f819 3b01 	ldrb.w	r3, [r9], #1
   14a2c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   14a30:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   14a34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14a38:	2a09      	cmp	r2, #9
   14a3a:	d9f5      	bls.n	14a28 <_svfprintf_r+0x678>
   14a3c:	9103      	str	r1, [sp, #12]
   14a3e:	e515      	b.n	1446c <_svfprintf_r+0xbc>
   14a40:	f899 3000 	ldrb.w	r3, [r9]
   14a44:	f048 0801 	orr.w	r8, r8, #1
   14a48:	e50e      	b.n	14468 <_svfprintf_r+0xb8>
   14a4a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   14a4e:	2b00      	cmp	r3, #0
   14a50:	f47f ad8f 	bne.w	14572 <_svfprintf_r+0x1c2>
   14a54:	f899 3000 	ldrb.w	r3, [r9]
   14a58:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   14a5c:	e504      	b.n	14468 <_svfprintf_r+0xb8>
   14a5e:	f8cd 8008 	str.w	r8, [sp, #8]
   14a62:	2b01      	cmp	r3, #1
   14a64:	f000 819d 	beq.w	14da2 <_svfprintf_r+0x9f2>
   14a68:	2b02      	cmp	r3, #2
   14a6a:	ac50      	add	r4, sp, #320	; 0x140
   14a6c:	d120      	bne.n	14ab0 <_svfprintf_r+0x700>
   14a6e:	9811      	ldr	r0, [sp, #68]	; 0x44
   14a70:	f002 030f 	and.w	r3, r2, #15
   14a74:	0912      	lsrs	r2, r2, #4
   14a76:	5cc3      	ldrb	r3, [r0, r3]
   14a78:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14a7c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   14a80:	0909      	lsrs	r1, r1, #4
   14a82:	ea52 0301 	orrs.w	r3, r2, r1
   14a86:	d1f3      	bne.n	14a70 <_svfprintf_r+0x6c0>
   14a88:	ab50      	add	r3, sp, #320	; 0x140
   14a8a:	1b1b      	subs	r3, r3, r4
   14a8c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14a90:	9305      	str	r3, [sp, #20]
   14a92:	9a05      	ldr	r2, [sp, #20]
   14a94:	9803      	ldr	r0, [sp, #12]
   14a96:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14a9a:	4282      	cmp	r2, r0
   14a9c:	f04f 0300 	mov.w	r3, #0
   14aa0:	bfb8      	it	lt
   14aa2:	4602      	movlt	r2, r0
   14aa4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   14aa8:	9307      	str	r3, [sp, #28]
   14aaa:	9202      	str	r2, [sp, #8]
   14aac:	930f      	str	r3, [sp, #60]	; 0x3c
   14aae:	e660      	b.n	14772 <_svfprintf_r+0x3c2>
   14ab0:	f002 0307 	and.w	r3, r2, #7
   14ab4:	08d2      	lsrs	r2, r2, #3
   14ab6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   14aba:	08c9      	lsrs	r1, r1, #3
   14abc:	3330      	adds	r3, #48	; 0x30
   14abe:	ea52 0501 	orrs.w	r5, r2, r1
   14ac2:	4620      	mov	r0, r4
   14ac4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   14ac8:	d1f2      	bne.n	14ab0 <_svfprintf_r+0x700>
   14aca:	9a02      	ldr	r2, [sp, #8]
   14acc:	07d1      	lsls	r1, r2, #31
   14ace:	f100 824d 	bmi.w	14f6c <_svfprintf_r+0xbbc>
   14ad2:	ab50      	add	r3, sp, #320	; 0x140
   14ad4:	1b1b      	subs	r3, r3, r4
   14ad6:	4690      	mov	r8, r2
   14ad8:	9305      	str	r3, [sp, #20]
   14ada:	e7da      	b.n	14a92 <_svfprintf_r+0x6e2>
   14adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ade:	2b65      	cmp	r3, #101	; 0x65
   14ae0:	f340 80d4 	ble.w	14c8c <_svfprintf_r+0x8dc>
   14ae4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14aec:	f040 81c1 	bne.w	14e72 <_svfprintf_r+0xac2>
   14af0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14af2:	49ba      	ldr	r1, [pc, #744]	; (14ddc <_svfprintf_r+0xa2c>)
   14af4:	f8ca 1000 	str.w	r1, [sl]
   14af8:	3301      	adds	r3, #1
   14afa:	3201      	adds	r2, #1
   14afc:	2101      	movs	r1, #1
   14afe:	2b07      	cmp	r3, #7
   14b00:	9226      	str	r2, [sp, #152]	; 0x98
   14b02:	9325      	str	r3, [sp, #148]	; 0x94
   14b04:	f8ca 1004 	str.w	r1, [sl, #4]
   14b08:	f300 8551 	bgt.w	155ae <_svfprintf_r+0x11fe>
   14b0c:	f10a 0a08 	add.w	sl, sl, #8
   14b10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14b12:	990e      	ldr	r1, [sp, #56]	; 0x38
   14b14:	428b      	cmp	r3, r1
   14b16:	f280 82d0 	bge.w	150ba <_svfprintf_r+0xd0a>
   14b1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14b1c:	9912      	ldr	r1, [sp, #72]	; 0x48
   14b1e:	441a      	add	r2, r3
   14b20:	e9ca 1300 	strd	r1, r3, [sl]
   14b24:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14b26:	9226      	str	r2, [sp, #152]	; 0x98
   14b28:	3301      	adds	r3, #1
   14b2a:	2b07      	cmp	r3, #7
   14b2c:	9325      	str	r3, [sp, #148]	; 0x94
   14b2e:	f300 8397 	bgt.w	15260 <_svfprintf_r+0xeb0>
   14b32:	f10a 0a08 	add.w	sl, sl, #8
   14b36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14b38:	1e5c      	subs	r4, r3, #1
   14b3a:	2c00      	cmp	r4, #0
   14b3c:	f77f add0 	ble.w	146e0 <_svfprintf_r+0x330>
   14b40:	2c10      	cmp	r4, #16
   14b42:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14b44:	f340 856e 	ble.w	15624 <_svfprintf_r+0x1274>
   14b48:	ee1b 6a10 	vmov	r6, s22
   14b4c:	2510      	movs	r5, #16
   14b4e:	e005      	b.n	14b5c <_svfprintf_r+0x7ac>
   14b50:	f10a 0a08 	add.w	sl, sl, #8
   14b54:	3c10      	subs	r4, #16
   14b56:	2c10      	cmp	r4, #16
   14b58:	f340 8564 	ble.w	15624 <_svfprintf_r+0x1274>
   14b5c:	3301      	adds	r3, #1
   14b5e:	49a0      	ldr	r1, [pc, #640]	; (14de0 <_svfprintf_r+0xa30>)
   14b60:	3210      	adds	r2, #16
   14b62:	2b07      	cmp	r3, #7
   14b64:	e9ca 1500 	strd	r1, r5, [sl]
   14b68:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14b6c:	ddf0      	ble.n	14b50 <_svfprintf_r+0x7a0>
   14b6e:	aa24      	add	r2, sp, #144	; 0x90
   14b70:	4631      	mov	r1, r6
   14b72:	4658      	mov	r0, fp
   14b74:	f004 faa8 	bl	190c8 <__ssprint_r>
   14b78:	2800      	cmp	r0, #0
   14b7a:	d17e      	bne.n	14c7a <_svfprintf_r+0x8ca>
   14b7c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14b80:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14b84:	e7e6      	b.n	14b54 <_svfprintf_r+0x7a4>
   14b86:	9b06      	ldr	r3, [sp, #24]
   14b88:	9902      	ldr	r1, [sp, #8]
   14b8a:	1a5d      	subs	r5, r3, r1
   14b8c:	2d00      	cmp	r5, #0
   14b8e:	f77f ad8e 	ble.w	146ae <_svfprintf_r+0x2fe>
   14b92:	2d10      	cmp	r5, #16
   14b94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14b96:	dd21      	ble.n	14bdc <_svfprintf_r+0x82c>
   14b98:	9409      	str	r4, [sp, #36]	; 0x24
   14b9a:	2610      	movs	r6, #16
   14b9c:	ee1b 4a10 	vmov	r4, s22
   14ba0:	e004      	b.n	14bac <_svfprintf_r+0x7fc>
   14ba2:	3d10      	subs	r5, #16
   14ba4:	2d10      	cmp	r5, #16
   14ba6:	f10a 0a08 	add.w	sl, sl, #8
   14baa:	dd16      	ble.n	14bda <_svfprintf_r+0x82a>
   14bac:	3301      	adds	r3, #1
   14bae:	498c      	ldr	r1, [pc, #560]	; (14de0 <_svfprintf_r+0xa30>)
   14bb0:	3210      	adds	r2, #16
   14bb2:	2b07      	cmp	r3, #7
   14bb4:	e9ca 1600 	strd	r1, r6, [sl]
   14bb8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14bbc:	ddf1      	ble.n	14ba2 <_svfprintf_r+0x7f2>
   14bbe:	aa24      	add	r2, sp, #144	; 0x90
   14bc0:	4621      	mov	r1, r4
   14bc2:	4658      	mov	r0, fp
   14bc4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14bc8:	f004 fa7e 	bl	190c8 <__ssprint_r>
   14bcc:	2800      	cmp	r0, #0
   14bce:	d154      	bne.n	14c7a <_svfprintf_r+0x8ca>
   14bd0:	3d10      	subs	r5, #16
   14bd2:	2d10      	cmp	r5, #16
   14bd4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14bd8:	dce8      	bgt.n	14bac <_svfprintf_r+0x7fc>
   14bda:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14bdc:	4980      	ldr	r1, [pc, #512]	; (14de0 <_svfprintf_r+0xa30>)
   14bde:	f8ca 5004 	str.w	r5, [sl, #4]
   14be2:	3301      	adds	r3, #1
   14be4:	442a      	add	r2, r5
   14be6:	2b07      	cmp	r3, #7
   14be8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14bec:	f8ca 1000 	str.w	r1, [sl]
   14bf0:	f300 8526 	bgt.w	15640 <_svfprintf_r+0x1290>
   14bf4:	9b03      	ldr	r3, [sp, #12]
   14bf6:	9905      	ldr	r1, [sp, #20]
   14bf8:	1a5d      	subs	r5, r3, r1
   14bfa:	2d00      	cmp	r5, #0
   14bfc:	f10a 0a08 	add.w	sl, sl, #8
   14c00:	f77f ad5b 	ble.w	146ba <_svfprintf_r+0x30a>
   14c04:	2d10      	cmp	r5, #16
   14c06:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14c08:	dd1f      	ble.n	14c4a <_svfprintf_r+0x89a>
   14c0a:	4651      	mov	r1, sl
   14c0c:	2610      	movs	r6, #16
   14c0e:	ee1b aa10 	vmov	sl, s22
   14c12:	e004      	b.n	14c1e <_svfprintf_r+0x86e>
   14c14:	3d10      	subs	r5, #16
   14c16:	2d10      	cmp	r5, #16
   14c18:	f101 0108 	add.w	r1, r1, #8
   14c1c:	dd14      	ble.n	14c48 <_svfprintf_r+0x898>
   14c1e:	3301      	adds	r3, #1
   14c20:	486f      	ldr	r0, [pc, #444]	; (14de0 <_svfprintf_r+0xa30>)
   14c22:	3210      	adds	r2, #16
   14c24:	2b07      	cmp	r3, #7
   14c26:	e9c1 0600 	strd	r0, r6, [r1]
   14c2a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14c2e:	ddf1      	ble.n	14c14 <_svfprintf_r+0x864>
   14c30:	aa24      	add	r2, sp, #144	; 0x90
   14c32:	4651      	mov	r1, sl
   14c34:	4658      	mov	r0, fp
   14c36:	f004 fa47 	bl	190c8 <__ssprint_r>
   14c3a:	b9f0      	cbnz	r0, 14c7a <_svfprintf_r+0x8ca>
   14c3c:	3d10      	subs	r5, #16
   14c3e:	2d10      	cmp	r5, #16
   14c40:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14c44:	a927      	add	r1, sp, #156	; 0x9c
   14c46:	dcea      	bgt.n	14c1e <_svfprintf_r+0x86e>
   14c48:	468a      	mov	sl, r1
   14c4a:	3301      	adds	r3, #1
   14c4c:	4964      	ldr	r1, [pc, #400]	; (14de0 <_svfprintf_r+0xa30>)
   14c4e:	f8ca 5004 	str.w	r5, [sl, #4]
   14c52:	442a      	add	r2, r5
   14c54:	2b07      	cmp	r3, #7
   14c56:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14c5a:	f8ca 1000 	str.w	r1, [sl]
   14c5e:	f300 81da 	bgt.w	15016 <_svfprintf_r+0xc66>
   14c62:	f10a 0a08 	add.w	sl, sl, #8
   14c66:	e528      	b.n	146ba <_svfprintf_r+0x30a>
   14c68:	ee1b 1a10 	vmov	r1, s22
   14c6c:	aa24      	add	r2, sp, #144	; 0x90
   14c6e:	4658      	mov	r0, fp
   14c70:	f004 fa2a 	bl	190c8 <__ssprint_r>
   14c74:	2800      	cmp	r0, #0
   14c76:	f43f ad47 	beq.w	14708 <_svfprintf_r+0x358>
   14c7a:	9b07      	ldr	r3, [sp, #28]
   14c7c:	2b00      	cmp	r3, #0
   14c7e:	f43f aca2 	beq.w	145c6 <_svfprintf_r+0x216>
   14c82:	9907      	ldr	r1, [sp, #28]
   14c84:	4658      	mov	r0, fp
   14c86:	f7fe f8cd 	bl	12e24 <_free_r>
   14c8a:	e49c      	b.n	145c6 <_svfprintf_r+0x216>
   14c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14c8e:	2b01      	cmp	r3, #1
   14c90:	f340 817a 	ble.w	14f88 <_svfprintf_r+0xbd8>
   14c94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14c96:	f8ca 4000 	str.w	r4, [sl]
   14c9a:	3301      	adds	r3, #1
   14c9c:	3201      	adds	r2, #1
   14c9e:	2101      	movs	r1, #1
   14ca0:	2b07      	cmp	r3, #7
   14ca2:	9226      	str	r2, [sp, #152]	; 0x98
   14ca4:	9325      	str	r3, [sp, #148]	; 0x94
   14ca6:	f8ca 1004 	str.w	r1, [sl, #4]
   14caa:	f300 81f8 	bgt.w	1509e <_svfprintf_r+0xcee>
   14cae:	f10a 0a08 	add.w	sl, sl, #8
   14cb2:	9910      	ldr	r1, [sp, #64]	; 0x40
   14cb4:	9812      	ldr	r0, [sp, #72]	; 0x48
   14cb6:	3301      	adds	r3, #1
   14cb8:	440a      	add	r2, r1
   14cba:	2b07      	cmp	r3, #7
   14cbc:	e9ca 0100 	strd	r0, r1, [sl]
   14cc0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14cc4:	f300 81dd 	bgt.w	15082 <_svfprintf_r+0xcd2>
   14cc8:	f10a 0a08 	add.w	sl, sl, #8
   14ccc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   14cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   14cd4:	f000 8177 	beq.w	14fc6 <_svfprintf_r+0xc16>
   14cd8:	990e      	ldr	r1, [sp, #56]	; 0x38
   14cda:	3301      	adds	r3, #1
   14cdc:	3901      	subs	r1, #1
   14cde:	3401      	adds	r4, #1
   14ce0:	440a      	add	r2, r1
   14ce2:	2b07      	cmp	r3, #7
   14ce4:	f8ca 4000 	str.w	r4, [sl]
   14ce8:	9325      	str	r3, [sp, #148]	; 0x94
   14cea:	f8ca 1004 	str.w	r1, [sl, #4]
   14cee:	9226      	str	r2, [sp, #152]	; 0x98
   14cf0:	f300 815b 	bgt.w	14faa <_svfprintf_r+0xbfa>
   14cf4:	f10a 0a08 	add.w	sl, sl, #8
   14cf8:	9914      	ldr	r1, [sp, #80]	; 0x50
   14cfa:	f8ca 1004 	str.w	r1, [sl, #4]
   14cfe:	3301      	adds	r3, #1
   14d00:	440a      	add	r2, r1
   14d02:	2b07      	cmp	r3, #7
   14d04:	a91e      	add	r1, sp, #120	; 0x78
   14d06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14d0a:	f8ca 1000 	str.w	r1, [sl]
   14d0e:	f77f ace5 	ble.w	146dc <_svfprintf_r+0x32c>
   14d12:	ee1b 1a10 	vmov	r1, s22
   14d16:	aa24      	add	r2, sp, #144	; 0x90
   14d18:	4658      	mov	r0, fp
   14d1a:	f004 f9d5 	bl	190c8 <__ssprint_r>
   14d1e:	2800      	cmp	r0, #0
   14d20:	d1ab      	bne.n	14c7a <_svfprintf_r+0x8ca>
   14d22:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14d24:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14d28:	e4da      	b.n	146e0 <_svfprintf_r+0x330>
   14d2a:	2d10      	cmp	r5, #16
   14d2c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   14d30:	4e2c      	ldr	r6, [pc, #176]	; (14de4 <_svfprintf_r+0xa34>)
   14d32:	dd24      	ble.n	14d7e <_svfprintf_r+0x9ce>
   14d34:	9417      	str	r4, [sp, #92]	; 0x5c
   14d36:	2310      	movs	r3, #16
   14d38:	ee1b 4a10 	vmov	r4, s22
   14d3c:	4608      	mov	r0, r1
   14d3e:	e004      	b.n	14d4a <_svfprintf_r+0x99a>
   14d40:	3d10      	subs	r5, #16
   14d42:	2d10      	cmp	r5, #16
   14d44:	f10a 0a08 	add.w	sl, sl, #8
   14d48:	dd17      	ble.n	14d7a <_svfprintf_r+0x9ca>
   14d4a:	3001      	adds	r0, #1
   14d4c:	3210      	adds	r2, #16
   14d4e:	2807      	cmp	r0, #7
   14d50:	e9ca 6300 	strd	r6, r3, [sl]
   14d54:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   14d58:	ddf2      	ble.n	14d40 <_svfprintf_r+0x990>
   14d5a:	aa24      	add	r2, sp, #144	; 0x90
   14d5c:	4621      	mov	r1, r4
   14d5e:	4658      	mov	r0, fp
   14d60:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14d64:	f004 f9b0 	bl	190c8 <__ssprint_r>
   14d68:	2800      	cmp	r0, #0
   14d6a:	d186      	bne.n	14c7a <_svfprintf_r+0x8ca>
   14d6c:	3d10      	subs	r5, #16
   14d6e:	2d10      	cmp	r5, #16
   14d70:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   14d74:	f04f 0310 	mov.w	r3, #16
   14d78:	dce7      	bgt.n	14d4a <_svfprintf_r+0x99a>
   14d7a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   14d7c:	4601      	mov	r1, r0
   14d7e:	3101      	adds	r1, #1
   14d80:	442a      	add	r2, r5
   14d82:	2907      	cmp	r1, #7
   14d84:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   14d88:	f8ca 6000 	str.w	r6, [sl]
   14d8c:	f8ca 5004 	str.w	r5, [sl, #4]
   14d90:	f300 83bd 	bgt.w	1550e <_svfprintf_r+0x115e>
   14d94:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   14d98:	f10a 0a08 	add.w	sl, sl, #8
   14d9c:	e45d      	b.n	1465a <_svfprintf_r+0x2aa>
   14d9e:	f8cd 8008 	str.w	r8, [sp, #8]
   14da2:	2a0a      	cmp	r2, #10
   14da4:	f171 0300 	sbcs.w	r3, r1, #0
   14da8:	f080 8345 	bcs.w	15436 <_svfprintf_r+0x1086>
   14dac:	3230      	adds	r2, #48	; 0x30
   14dae:	2301      	movs	r3, #1
   14db0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14db4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   14db8:	9305      	str	r3, [sp, #20]
   14dba:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   14dbe:	e668      	b.n	14a92 <_svfprintf_r+0x6e2>
   14dc0:	ee1b 1a10 	vmov	r1, s22
   14dc4:	aa24      	add	r2, sp, #144	; 0x90
   14dc6:	4658      	mov	r0, fp
   14dc8:	f004 f97e 	bl	190c8 <__ssprint_r>
   14dcc:	2800      	cmp	r0, #0
   14dce:	f47f af54 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14dd2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14dd4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14dd8:	e452      	b.n	14680 <_svfprintf_r+0x2d0>
   14dda:	bf00      	nop
   14ddc:	20007fcc 	.word	0x20007fcc
   14de0:	20008a44 	.word	0x20008a44
   14de4:	20002c98 	.word	0x20002c98
   14de8:	ee1b 1a10 	vmov	r1, s22
   14dec:	aa24      	add	r2, sp, #144	; 0x90
   14dee:	4658      	mov	r0, fp
   14df0:	f004 f96a 	bl	190c8 <__ssprint_r>
   14df4:	2800      	cmp	r0, #0
   14df6:	f47f af40 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14dfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14dfc:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e00:	e451      	b.n	146a6 <_svfprintf_r+0x2f6>
   14e02:	2c10      	cmp	r4, #16
   14e04:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e06:	4ebe      	ldr	r6, [pc, #760]	; (15100 <_svfprintf_r+0xd50>)
   14e08:	dd1f      	ble.n	14e4a <_svfprintf_r+0xa9a>
   14e0a:	ee1b 8a10 	vmov	r8, s22
   14e0e:	2510      	movs	r5, #16
   14e10:	e004      	b.n	14e1c <_svfprintf_r+0xa6c>
   14e12:	3c10      	subs	r4, #16
   14e14:	2c10      	cmp	r4, #16
   14e16:	f10a 0a08 	add.w	sl, sl, #8
   14e1a:	dd16      	ble.n	14e4a <_svfprintf_r+0xa9a>
   14e1c:	3301      	adds	r3, #1
   14e1e:	3210      	adds	r2, #16
   14e20:	2b07      	cmp	r3, #7
   14e22:	e9ca 6500 	strd	r6, r5, [sl]
   14e26:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14e2a:	ddf2      	ble.n	14e12 <_svfprintf_r+0xa62>
   14e2c:	aa24      	add	r2, sp, #144	; 0x90
   14e2e:	4641      	mov	r1, r8
   14e30:	4658      	mov	r0, fp
   14e32:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14e36:	f004 f947 	bl	190c8 <__ssprint_r>
   14e3a:	2800      	cmp	r0, #0
   14e3c:	f47f af1d 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14e40:	3c10      	subs	r4, #16
   14e42:	2c10      	cmp	r4, #16
   14e44:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14e48:	dce8      	bgt.n	14e1c <_svfprintf_r+0xa6c>
   14e4a:	3301      	adds	r3, #1
   14e4c:	4422      	add	r2, r4
   14e4e:	2b07      	cmp	r3, #7
   14e50:	e9ca 6400 	strd	r6, r4, [sl]
   14e54:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14e58:	f77f ac4b 	ble.w	146f2 <_svfprintf_r+0x342>
   14e5c:	ee1b 1a10 	vmov	r1, s22
   14e60:	aa24      	add	r2, sp, #144	; 0x90
   14e62:	4658      	mov	r0, fp
   14e64:	f004 f930 	bl	190c8 <__ssprint_r>
   14e68:	2800      	cmp	r0, #0
   14e6a:	f47f af06 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14e6e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14e70:	e43f      	b.n	146f2 <_svfprintf_r+0x342>
   14e72:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14e74:	2900      	cmp	r1, #0
   14e76:	f340 835a 	ble.w	1552e <_svfprintf_r+0x117e>
   14e7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14e7e:	429e      	cmp	r6, r3
   14e80:	bfa8      	it	ge
   14e82:	461e      	movge	r6, r3
   14e84:	2e00      	cmp	r6, #0
   14e86:	dd0b      	ble.n	14ea0 <_svfprintf_r+0xaf0>
   14e88:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14e8a:	3301      	adds	r3, #1
   14e8c:	4432      	add	r2, r6
   14e8e:	2b07      	cmp	r3, #7
   14e90:	e9ca 4600 	strd	r4, r6, [sl]
   14e94:	9226      	str	r2, [sp, #152]	; 0x98
   14e96:	9325      	str	r3, [sp, #148]	; 0x94
   14e98:	f300 8689 	bgt.w	15bae <_svfprintf_r+0x17fe>
   14e9c:	f10a 0a08 	add.w	sl, sl, #8
   14ea0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   14ea2:	2e00      	cmp	r6, #0
   14ea4:	bfa8      	it	ge
   14ea6:	1bad      	subge	r5, r5, r6
   14ea8:	2d00      	cmp	r5, #0
   14eaa:	f300 8203 	bgt.w	152b4 <_svfprintf_r+0xf04>
   14eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14eb0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   14eb4:	4423      	add	r3, r4
   14eb6:	9305      	str	r3, [sp, #20]
   14eb8:	f040 821f 	bne.w	152fa <_svfprintf_r+0xf4a>
   14ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   14ebe:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ec0:	428b      	cmp	r3, r1
   14ec2:	db03      	blt.n	14ecc <_svfprintf_r+0xb1c>
   14ec4:	f018 0f01 	tst.w	r8, #1
   14ec8:	f000 84cf 	beq.w	1586a <_svfprintf_r+0x14ba>
   14ecc:	9910      	ldr	r1, [sp, #64]	; 0x40
   14ece:	9812      	ldr	r0, [sp, #72]	; 0x48
   14ed0:	440a      	add	r2, r1
   14ed2:	e9ca 0100 	strd	r0, r1, [sl]
   14ed6:	9925      	ldr	r1, [sp, #148]	; 0x94
   14ed8:	9226      	str	r2, [sp, #152]	; 0x98
   14eda:	3101      	adds	r1, #1
   14edc:	2907      	cmp	r1, #7
   14ede:	9125      	str	r1, [sp, #148]	; 0x94
   14ee0:	f300 86a5 	bgt.w	15c2e <_svfprintf_r+0x187e>
   14ee4:	f10a 0a08 	add.w	sl, sl, #8
   14ee8:	990e      	ldr	r1, [sp, #56]	; 0x38
   14eea:	1865      	adds	r5, r4, r1
   14eec:	1acc      	subs	r4, r1, r3
   14eee:	9b05      	ldr	r3, [sp, #20]
   14ef0:	1aed      	subs	r5, r5, r3
   14ef2:	42a5      	cmp	r5, r4
   14ef4:	bfa8      	it	ge
   14ef6:	4625      	movge	r5, r4
   14ef8:	2d00      	cmp	r5, #0
   14efa:	dd0d      	ble.n	14f18 <_svfprintf_r+0xb68>
   14efc:	f8ca 3000 	str.w	r3, [sl]
   14f00:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f02:	f8ca 5004 	str.w	r5, [sl, #4]
   14f06:	3301      	adds	r3, #1
   14f08:	442a      	add	r2, r5
   14f0a:	2b07      	cmp	r3, #7
   14f0c:	9226      	str	r2, [sp, #152]	; 0x98
   14f0e:	9325      	str	r3, [sp, #148]	; 0x94
   14f10:	f300 86bb 	bgt.w	15c8a <_svfprintf_r+0x18da>
   14f14:	f10a 0a08 	add.w	sl, sl, #8
   14f18:	2d00      	cmp	r5, #0
   14f1a:	bfa8      	it	ge
   14f1c:	1b64      	subge	r4, r4, r5
   14f1e:	2c00      	cmp	r4, #0
   14f20:	f77f abde 	ble.w	146e0 <_svfprintf_r+0x330>
   14f24:	2c10      	cmp	r4, #16
   14f26:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f28:	f340 837c 	ble.w	15624 <_svfprintf_r+0x1274>
   14f2c:	ee1b 6a10 	vmov	r6, s22
   14f30:	2510      	movs	r5, #16
   14f32:	e005      	b.n	14f40 <_svfprintf_r+0xb90>
   14f34:	f10a 0a08 	add.w	sl, sl, #8
   14f38:	3c10      	subs	r4, #16
   14f3a:	2c10      	cmp	r4, #16
   14f3c:	f340 8372 	ble.w	15624 <_svfprintf_r+0x1274>
   14f40:	3301      	adds	r3, #1
   14f42:	4970      	ldr	r1, [pc, #448]	; (15104 <_svfprintf_r+0xd54>)
   14f44:	3210      	adds	r2, #16
   14f46:	2b07      	cmp	r3, #7
   14f48:	e9ca 1500 	strd	r1, r5, [sl]
   14f4c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14f50:	ddf0      	ble.n	14f34 <_svfprintf_r+0xb84>
   14f52:	aa24      	add	r2, sp, #144	; 0x90
   14f54:	4631      	mov	r1, r6
   14f56:	4658      	mov	r0, fp
   14f58:	f004 f8b6 	bl	190c8 <__ssprint_r>
   14f5c:	2800      	cmp	r0, #0
   14f5e:	f47f ae8c 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14f62:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14f66:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14f6a:	e7e5      	b.n	14f38 <_svfprintf_r+0xb88>
   14f6c:	2b30      	cmp	r3, #48	; 0x30
   14f6e:	f43f ad8b 	beq.w	14a88 <_svfprintf_r+0x6d8>
   14f72:	2330      	movs	r3, #48	; 0x30
   14f74:	3802      	subs	r0, #2
   14f76:	f804 3c01 	strb.w	r3, [r4, #-1]
   14f7a:	ab50      	add	r3, sp, #320	; 0x140
   14f7c:	1a1b      	subs	r3, r3, r0
   14f7e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   14f82:	9305      	str	r3, [sp, #20]
   14f84:	4604      	mov	r4, r0
   14f86:	e584      	b.n	14a92 <_svfprintf_r+0x6e2>
   14f88:	f018 0f01 	tst.w	r8, #1
   14f8c:	f47f ae82 	bne.w	14c94 <_svfprintf_r+0x8e4>
   14f90:	9b25      	ldr	r3, [sp, #148]	; 0x94
   14f92:	f8ca 4000 	str.w	r4, [sl]
   14f96:	3301      	adds	r3, #1
   14f98:	3201      	adds	r2, #1
   14f9a:	2101      	movs	r1, #1
   14f9c:	2b07      	cmp	r3, #7
   14f9e:	9226      	str	r2, [sp, #152]	; 0x98
   14fa0:	9325      	str	r3, [sp, #148]	; 0x94
   14fa2:	f8ca 1004 	str.w	r1, [sl, #4]
   14fa6:	f77f aea5 	ble.w	14cf4 <_svfprintf_r+0x944>
   14faa:	ee1b 1a10 	vmov	r1, s22
   14fae:	aa24      	add	r2, sp, #144	; 0x90
   14fb0:	4658      	mov	r0, fp
   14fb2:	f004 f889 	bl	190c8 <__ssprint_r>
   14fb6:	2800      	cmp	r0, #0
   14fb8:	f47f ae5f 	bne.w	14c7a <_svfprintf_r+0x8ca>
   14fbc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   14fc0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   14fc4:	e698      	b.n	14cf8 <_svfprintf_r+0x948>
   14fc6:	990e      	ldr	r1, [sp, #56]	; 0x38
   14fc8:	1e4c      	subs	r4, r1, #1
   14fca:	2c00      	cmp	r4, #0
   14fcc:	f77f ae94 	ble.w	14cf8 <_svfprintf_r+0x948>
   14fd0:	2c10      	cmp	r4, #16
   14fd2:	f340 8361 	ble.w	15698 <_svfprintf_r+0x12e8>
   14fd6:	ee1b 6a10 	vmov	r6, s22
   14fda:	2510      	movs	r5, #16
   14fdc:	e005      	b.n	14fea <_svfprintf_r+0xc3a>
   14fde:	f10a 0a08 	add.w	sl, sl, #8
   14fe2:	3c10      	subs	r4, #16
   14fe4:	2c10      	cmp	r4, #16
   14fe6:	f340 8357 	ble.w	15698 <_svfprintf_r+0x12e8>
   14fea:	3301      	adds	r3, #1
   14fec:	4945      	ldr	r1, [pc, #276]	; (15104 <_svfprintf_r+0xd54>)
   14fee:	3210      	adds	r2, #16
   14ff0:	2b07      	cmp	r3, #7
   14ff2:	e9ca 1500 	strd	r1, r5, [sl]
   14ff6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   14ffa:	ddf0      	ble.n	14fde <_svfprintf_r+0xc2e>
   14ffc:	aa24      	add	r2, sp, #144	; 0x90
   14ffe:	4631      	mov	r1, r6
   15000:	4658      	mov	r0, fp
   15002:	f004 f861 	bl	190c8 <__ssprint_r>
   15006:	2800      	cmp	r0, #0
   15008:	f47f ae37 	bne.w	14c7a <_svfprintf_r+0x8ca>
   1500c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15010:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15014:	e7e5      	b.n	14fe2 <_svfprintf_r+0xc32>
   15016:	ee1b 1a10 	vmov	r1, s22
   1501a:	aa24      	add	r2, sp, #144	; 0x90
   1501c:	4658      	mov	r0, fp
   1501e:	f004 f853 	bl	190c8 <__ssprint_r>
   15022:	2800      	cmp	r0, #0
   15024:	f47f ae29 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15028:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1502a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1502e:	f7ff bb44 	b.w	146ba <_svfprintf_r+0x30a>
   15032:	9b02      	ldr	r3, [sp, #8]
   15034:	f013 0310 	ands.w	r3, r3, #16
   15038:	f040 80c1 	bne.w	151be <_svfprintf_r+0xe0e>
   1503c:	9a02      	ldr	r2, [sp, #8]
   1503e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   15042:	f000 837a 	beq.w	1573a <_svfprintf_r+0x138a>
   15046:	9808      	ldr	r0, [sp, #32]
   15048:	f850 2b04 	ldr.w	r2, [r0], #4
   1504c:	9008      	str	r0, [sp, #32]
   1504e:	4619      	mov	r1, r3
   15050:	b292      	uxth	r2, r2
   15052:	2301      	movs	r3, #1
   15054:	e451      	b.n	148fa <_svfprintf_r+0x54a>
   15056:	f018 0310 	ands.w	r3, r8, #16
   1505a:	d155      	bne.n	15108 <_svfprintf_r+0xd58>
   1505c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   15060:	f000 835d 	beq.w	1571e <_svfprintf_r+0x136e>
   15064:	9808      	ldr	r0, [sp, #32]
   15066:	f850 2b04 	ldr.w	r2, [r0], #4
   1506a:	9008      	str	r0, [sp, #32]
   1506c:	4619      	mov	r1, r3
   1506e:	b292      	uxth	r2, r2
   15070:	e4a8      	b.n	149c4 <_svfprintf_r+0x614>
   15072:	4252      	negs	r2, r2
   15074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15078:	f8cd 8008 	str.w	r8, [sp, #8]
   1507c:	202d      	movs	r0, #45	; 0x2d
   1507e:	2301      	movs	r3, #1
   15080:	e43c      	b.n	148fc <_svfprintf_r+0x54c>
   15082:	ee1b 1a10 	vmov	r1, s22
   15086:	aa24      	add	r2, sp, #144	; 0x90
   15088:	4658      	mov	r0, fp
   1508a:	f004 f81d 	bl	190c8 <__ssprint_r>
   1508e:	2800      	cmp	r0, #0
   15090:	f47f adf3 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15094:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15098:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1509c:	e616      	b.n	14ccc <_svfprintf_r+0x91c>
   1509e:	ee1b 1a10 	vmov	r1, s22
   150a2:	aa24      	add	r2, sp, #144	; 0x90
   150a4:	4658      	mov	r0, fp
   150a6:	f004 f80f 	bl	190c8 <__ssprint_r>
   150aa:	2800      	cmp	r0, #0
   150ac:	f47f ade5 	bne.w	14c7a <_svfprintf_r+0x8ca>
   150b0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   150b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   150b8:	e5fb      	b.n	14cb2 <_svfprintf_r+0x902>
   150ba:	f018 0f01 	tst.w	r8, #1
   150be:	f43f ab0f 	beq.w	146e0 <_svfprintf_r+0x330>
   150c2:	e52a      	b.n	14b1a <_svfprintf_r+0x76a>
   150c4:	9308      	str	r3, [sp, #32]
   150c6:	f899 3000 	ldrb.w	r3, [r9]
   150ca:	f7ff b9cd 	b.w	14468 <_svfprintf_r+0xb8>
   150ce:	ac50      	add	r4, sp, #320	; 0x140
   150d0:	e4df      	b.n	14a92 <_svfprintf_r+0x6e2>
   150d2:	f418 7f00 	tst.w	r8, #512	; 0x200
   150d6:	f040 83db 	bne.w	15890 <_svfprintf_r+0x14e0>
   150da:	f853 2b04 	ldr.w	r2, [r3], #4
   150de:	9308      	str	r3, [sp, #32]
   150e0:	17d1      	asrs	r1, r2, #31
   150e2:	460b      	mov	r3, r1
   150e4:	f7ff bbb6 	b.w	14854 <_svfprintf_r+0x4a4>
   150e8:	9b08      	ldr	r3, [sp, #32]
   150ea:	9804      	ldr	r0, [sp, #16]
   150ec:	f853 1b04 	ldr.w	r1, [r3], #4
   150f0:	9308      	str	r3, [sp, #32]
   150f2:	17c2      	asrs	r2, r0, #31
   150f4:	e9c1 0200 	strd	r0, r2, [r1]
   150f8:	464c      	mov	r4, r9
   150fa:	f7ff b98b 	b.w	14414 <_svfprintf_r+0x64>
   150fe:	bf00      	nop
   15100:	20002c98 	.word	0x20002c98
   15104:	20008a44 	.word	0x20008a44
   15108:	9b08      	ldr	r3, [sp, #32]
   1510a:	f853 2b04 	ldr.w	r2, [r3], #4
   1510e:	9308      	str	r3, [sp, #32]
   15110:	e458      	b.n	149c4 <_svfprintf_r+0x614>
   15112:	eeb4 8b48 	vcmp.f64	d8, d8
   15116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1511a:	f180 8694 	bvs.w	15e46 <_svfprintf_r+0x1a96>
   1511e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15120:	2b61      	cmp	r3, #97	; 0x61
   15122:	f000 8552 	beq.w	15bca <_svfprintf_r+0x181a>
   15126:	2b41      	cmp	r3, #65	; 0x41
   15128:	f000 85c0 	beq.w	15cac <_svfprintf_r+0x18fc>
   1512c:	9b03      	ldr	r3, [sp, #12]
   1512e:	3301      	adds	r3, #1
   15130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15132:	f023 0520 	bic.w	r5, r3, #32
   15136:	f000 8480 	beq.w	15a3a <_svfprintf_r+0x168a>
   1513a:	2d47      	cmp	r5, #71	; 0x47
   1513c:	d104      	bne.n	15148 <_svfprintf_r+0xd98>
   1513e:	9b03      	ldr	r3, [sp, #12]
   15140:	2b00      	cmp	r3, #0
   15142:	bf08      	it	eq
   15144:	2301      	moveq	r3, #1
   15146:	9303      	str	r3, [sp, #12]
   15148:	ee18 3a90 	vmov	r3, s17
   1514c:	2b00      	cmp	r3, #0
   1514e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   15152:	4646      	mov	r6, r8
   15154:	f2c0 8618 	blt.w	15d88 <_svfprintf_r+0x19d8>
   15158:	eeb0 ab48 	vmov.f64	d10, d8
   1515c:	2300      	movs	r3, #0
   1515e:	4690      	mov	r8, r2
   15160:	9309      	str	r3, [sp, #36]	; 0x24
   15162:	9307      	str	r3, [sp, #28]
   15164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15166:	3b41      	subs	r3, #65	; 0x41
   15168:	2b25      	cmp	r3, #37	; 0x25
   1516a:	f200 8398 	bhi.w	1589e <_svfprintf_r+0x14ee>
   1516e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15172:	046f      	.short	0x046f
   15174:	03960396 	.word	0x03960396
   15178:	04680396 	.word	0x04680396
   1517c:	0396046c 	.word	0x0396046c
   15180:	03960396 	.word	0x03960396
   15184:	03960396 	.word	0x03960396
   15188:	03960396 	.word	0x03960396
   1518c:	03960396 	.word	0x03960396
   15190:	03960396 	.word	0x03960396
   15194:	03960396 	.word	0x03960396
   15198:	03960396 	.word	0x03960396
   1519c:	03960396 	.word	0x03960396
   151a0:	03960396 	.word	0x03960396
   151a4:	03960396 	.word	0x03960396
   151a8:	03960396 	.word	0x03960396
   151ac:	03960396 	.word	0x03960396
   151b0:	03960396 	.word	0x03960396
   151b4:	03960396 	.word	0x03960396
   151b8:	04680396 	.word	0x04680396
   151bc:	046c      	.short	0x046c
   151be:	9b08      	ldr	r3, [sp, #32]
   151c0:	f853 2b04 	ldr.w	r2, [r3], #4
   151c4:	9308      	str	r3, [sp, #32]
   151c6:	2301      	movs	r3, #1
   151c8:	f7ff bb97 	b.w	148fa <_svfprintf_r+0x54a>
   151cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   151ce:	2b00      	cmp	r3, #0
   151d0:	f43f a9cf 	beq.w	14572 <_svfprintf_r+0x1c2>
   151d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   151d6:	781b      	ldrb	r3, [r3, #0]
   151d8:	2b00      	cmp	r3, #0
   151da:	f43f a9ca 	beq.w	14572 <_svfprintf_r+0x1c2>
   151de:	f899 3000 	ldrb.w	r3, [r9]
   151e2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   151e6:	f7ff b93f 	b.w	14468 <_svfprintf_r+0xb8>
   151ea:	930b      	str	r3, [sp, #44]	; 0x2c
   151ec:	f8cd 8008 	str.w	r8, [sp, #8]
   151f0:	f7ff bbf1 	b.w	149d6 <_svfprintf_r+0x626>
   151f4:	930b      	str	r3, [sp, #44]	; 0x2c
   151f6:	4b9a      	ldr	r3, [pc, #616]	; (15460 <_svfprintf_r+0x10b0>)
   151f8:	9311      	str	r3, [sp, #68]	; 0x44
   151fa:	f018 0120 	ands.w	r1, r8, #32
   151fe:	f000 8105 	beq.w	1540c <_svfprintf_r+0x105c>
   15202:	9b08      	ldr	r3, [sp, #32]
   15204:	3307      	adds	r3, #7
   15206:	f023 0307 	bic.w	r3, r3, #7
   1520a:	6859      	ldr	r1, [r3, #4]
   1520c:	f853 2b08 	ldr.w	r2, [r3], #8
   15210:	9308      	str	r3, [sp, #32]
   15212:	f018 0f01 	tst.w	r8, #1
   15216:	d00a      	beq.n	1522e <_svfprintf_r+0xe7e>
   15218:	ea52 0301 	orrs.w	r3, r2, r1
   1521c:	d007      	beq.n	1522e <_svfprintf_r+0xe7e>
   1521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15220:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15224:	2330      	movs	r3, #48	; 0x30
   15226:	f048 0802 	orr.w	r8, r8, #2
   1522a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   1522e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   15232:	9302      	str	r3, [sp, #8]
   15234:	2302      	movs	r3, #2
   15236:	f7ff bb60 	b.w	148fa <_svfprintf_r+0x54a>
   1523a:	930b      	str	r3, [sp, #44]	; 0x2c
   1523c:	f7ff bbb6 	b.w	149ac <_svfprintf_r+0x5fc>
   15240:	930b      	str	r3, [sp, #44]	; 0x2c
   15242:	4b88      	ldr	r3, [pc, #544]	; (15464 <_svfprintf_r+0x10b4>)
   15244:	9311      	str	r3, [sp, #68]	; 0x44
   15246:	e7d8      	b.n	151fa <_svfprintf_r+0xe4a>
   15248:	9b08      	ldr	r3, [sp, #32]
   1524a:	2101      	movs	r1, #1
   1524c:	f853 2b04 	ldr.w	r2, [r3], #4
   15250:	9102      	str	r1, [sp, #8]
   15252:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   15256:	9308      	str	r3, [sp, #32]
   15258:	9105      	str	r1, [sp, #20]
   1525a:	ac37      	add	r4, sp, #220	; 0xdc
   1525c:	f7ff baaf 	b.w	147be <_svfprintf_r+0x40e>
   15260:	ee1b 1a10 	vmov	r1, s22
   15264:	aa24      	add	r2, sp, #144	; 0x90
   15266:	4658      	mov	r0, fp
   15268:	f003 ff2e 	bl	190c8 <__ssprint_r>
   1526c:	2800      	cmp	r0, #0
   1526e:	f47f ad04 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15272:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15274:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15278:	e45d      	b.n	14b36 <_svfprintf_r+0x786>
   1527a:	9b03      	ldr	r3, [sp, #12]
   1527c:	9407      	str	r4, [sp, #28]
   1527e:	2b06      	cmp	r3, #6
   15280:	4622      	mov	r2, r4
   15282:	bf28      	it	cs
   15284:	2306      	movcs	r3, #6
   15286:	9403      	str	r4, [sp, #12]
   15288:	4621      	mov	r1, r4
   1528a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   1528e:	4c76      	ldr	r4, [pc, #472]	; (15468 <_svfprintf_r+0x10b8>)
   15290:	9302      	str	r3, [sp, #8]
   15292:	9305      	str	r3, [sp, #20]
   15294:	920f      	str	r2, [sp, #60]	; 0x3c
   15296:	f7ff ba6c 	b.w	14772 <_svfprintf_r+0x3c2>
   1529a:	2140      	movs	r1, #64	; 0x40
   1529c:	4658      	mov	r0, fp
   1529e:	f7fb f957 	bl	10550 <_malloc_r>
   152a2:	6020      	str	r0, [r4, #0]
   152a4:	6120      	str	r0, [r4, #16]
   152a6:	2800      	cmp	r0, #0
   152a8:	f000 860f 	beq.w	15eca <_svfprintf_r+0x1b1a>
   152ac:	2340      	movs	r3, #64	; 0x40
   152ae:	6163      	str	r3, [r4, #20]
   152b0:	f7ff b89e 	b.w	143f0 <_svfprintf_r+0x40>
   152b4:	2d10      	cmp	r5, #16
   152b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   152b8:	f340 825d 	ble.w	15776 <_svfprintf_r+0x13c6>
   152bc:	4651      	mov	r1, sl
   152be:	2610      	movs	r6, #16
   152c0:	ee1b aa10 	vmov	sl, s22
   152c4:	e004      	b.n	152d0 <_svfprintf_r+0xf20>
   152c6:	3108      	adds	r1, #8
   152c8:	3d10      	subs	r5, #16
   152ca:	2d10      	cmp	r5, #16
   152cc:	f340 8252 	ble.w	15774 <_svfprintf_r+0x13c4>
   152d0:	3301      	adds	r3, #1
   152d2:	4866      	ldr	r0, [pc, #408]	; (1546c <_svfprintf_r+0x10bc>)
   152d4:	3210      	adds	r2, #16
   152d6:	2b07      	cmp	r3, #7
   152d8:	e9c1 0600 	strd	r0, r6, [r1]
   152dc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   152e0:	ddf1      	ble.n	152c6 <_svfprintf_r+0xf16>
   152e2:	aa24      	add	r2, sp, #144	; 0x90
   152e4:	4651      	mov	r1, sl
   152e6:	4658      	mov	r0, fp
   152e8:	f003 feee 	bl	190c8 <__ssprint_r>
   152ec:	2800      	cmp	r0, #0
   152ee:	f47f acc4 	bne.w	14c7a <_svfprintf_r+0x8ca>
   152f2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   152f6:	a927      	add	r1, sp, #156	; 0x9c
   152f8:	e7e6      	b.n	152c8 <_svfprintf_r+0xf18>
   152fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   152fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   15300:	18e3      	adds	r3, r4, r3
   15302:	9303      	str	r3, [sp, #12]
   15304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15306:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   1530a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1530c:	9d05      	ldr	r5, [sp, #20]
   1530e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   15312:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   15316:	940b      	str	r4, [sp, #44]	; 0x2c
   15318:	ee1b 1a10 	vmov	r1, s22
   1531c:	4650      	mov	r0, sl
   1531e:	2b00      	cmp	r3, #0
   15320:	d034      	beq.n	1538c <_svfprintf_r+0xfdc>
   15322:	f1b8 0f00 	cmp.w	r8, #0
   15326:	d135      	bne.n	15394 <_svfprintf_r+0xfe4>
   15328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1532a:	3b01      	subs	r3, #1
   1532c:	3e01      	subs	r6, #1
   1532e:	930d      	str	r3, [sp, #52]	; 0x34
   15330:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15332:	e9c0 3900 	strd	r3, r9, [r0]
   15336:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15338:	3301      	adds	r3, #1
   1533a:	444a      	add	r2, r9
   1533c:	2b07      	cmp	r3, #7
   1533e:	9226      	str	r2, [sp, #152]	; 0x98
   15340:	9325      	str	r3, [sp, #148]	; 0x94
   15342:	dc6c      	bgt.n	1541e <_svfprintf_r+0x106e>
   15344:	3008      	adds	r0, #8
   15346:	9b03      	ldr	r3, [sp, #12]
   15348:	f896 c000 	ldrb.w	ip, [r6]
   1534c:	1b5b      	subs	r3, r3, r5
   1534e:	4563      	cmp	r3, ip
   15350:	bfa8      	it	ge
   15352:	4663      	movge	r3, ip
   15354:	2b00      	cmp	r3, #0
   15356:	469a      	mov	sl, r3
   15358:	dd0c      	ble.n	15374 <_svfprintf_r+0xfc4>
   1535a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1535c:	3401      	adds	r4, #1
   1535e:	441a      	add	r2, r3
   15360:	2c07      	cmp	r4, #7
   15362:	e9c0 5300 	strd	r5, r3, [r0]
   15366:	9226      	str	r2, [sp, #152]	; 0x98
   15368:	9425      	str	r4, [sp, #148]	; 0x94
   1536a:	f300 8177 	bgt.w	1565c <_svfprintf_r+0x12ac>
   1536e:	f896 c000 	ldrb.w	ip, [r6]
   15372:	3008      	adds	r0, #8
   15374:	f1ba 0f00 	cmp.w	sl, #0
   15378:	bfac      	ite	ge
   1537a:	ebac 040a 	subge.w	r4, ip, sl
   1537e:	4664      	movlt	r4, ip
   15380:	2c00      	cmp	r4, #0
   15382:	dc0a      	bgt.n	1539a <_svfprintf_r+0xfea>
   15384:	4465      	add	r5, ip
   15386:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15388:	2b00      	cmp	r3, #0
   1538a:	d1ca      	bne.n	15322 <_svfprintf_r+0xf72>
   1538c:	f1b8 0f00 	cmp.w	r8, #0
   15390:	f000 83ac 	beq.w	15aec <_svfprintf_r+0x173c>
   15394:	f108 38ff 	add.w	r8, r8, #4294967295
   15398:	e7ca      	b.n	15330 <_svfprintf_r+0xf80>
   1539a:	2c10      	cmp	r4, #16
   1539c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   153a0:	dd24      	ble.n	153ec <_svfprintf_r+0x103c>
   153a2:	9505      	str	r5, [sp, #20]
   153a4:	f04f 0a10 	mov.w	sl, #16
   153a8:	4663      	mov	r3, ip
   153aa:	460d      	mov	r5, r1
   153ac:	e004      	b.n	153b8 <_svfprintf_r+0x1008>
   153ae:	3c10      	subs	r4, #16
   153b0:	2c10      	cmp	r4, #16
   153b2:	f100 0008 	add.w	r0, r0, #8
   153b6:	dd16      	ble.n	153e6 <_svfprintf_r+0x1036>
   153b8:	3301      	adds	r3, #1
   153ba:	492c      	ldr	r1, [pc, #176]	; (1546c <_svfprintf_r+0x10bc>)
   153bc:	3210      	adds	r2, #16
   153be:	2b07      	cmp	r3, #7
   153c0:	e9c0 1a00 	strd	r1, sl, [r0]
   153c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   153c8:	ddf1      	ble.n	153ae <_svfprintf_r+0xffe>
   153ca:	aa24      	add	r2, sp, #144	; 0x90
   153cc:	4629      	mov	r1, r5
   153ce:	4658      	mov	r0, fp
   153d0:	f003 fe7a 	bl	190c8 <__ssprint_r>
   153d4:	2800      	cmp	r0, #0
   153d6:	f47f ac50 	bne.w	14c7a <_svfprintf_r+0x8ca>
   153da:	3c10      	subs	r4, #16
   153dc:	2c10      	cmp	r4, #16
   153de:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   153e2:	a827      	add	r0, sp, #156	; 0x9c
   153e4:	dce8      	bgt.n	153b8 <_svfprintf_r+0x1008>
   153e6:	4629      	mov	r1, r5
   153e8:	9d05      	ldr	r5, [sp, #20]
   153ea:	469c      	mov	ip, r3
   153ec:	f10c 0301 	add.w	r3, ip, #1
   153f0:	4422      	add	r2, r4
   153f2:	6044      	str	r4, [r0, #4]
   153f4:	2b07      	cmp	r3, #7
   153f6:	4c1d      	ldr	r4, [pc, #116]	; (1546c <_svfprintf_r+0x10bc>)
   153f8:	6004      	str	r4, [r0, #0]
   153fa:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   153fe:	f300 83c6 	bgt.w	15b8e <_svfprintf_r+0x17de>
   15402:	f896 c000 	ldrb.w	ip, [r6]
   15406:	3008      	adds	r0, #8
   15408:	4465      	add	r5, ip
   1540a:	e7bc      	b.n	15386 <_svfprintf_r+0xfd6>
   1540c:	f018 0310 	ands.w	r3, r8, #16
   15410:	f000 80c2 	beq.w	15598 <_svfprintf_r+0x11e8>
   15414:	9b08      	ldr	r3, [sp, #32]
   15416:	f853 2b04 	ldr.w	r2, [r3], #4
   1541a:	9308      	str	r3, [sp, #32]
   1541c:	e6f9      	b.n	15212 <_svfprintf_r+0xe62>
   1541e:	aa24      	add	r2, sp, #144	; 0x90
   15420:	4658      	mov	r0, fp
   15422:	9105      	str	r1, [sp, #20]
   15424:	f003 fe50 	bl	190c8 <__ssprint_r>
   15428:	2800      	cmp	r0, #0
   1542a:	f47f ac26 	bne.w	14c7a <_svfprintf_r+0x8ca>
   1542e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15430:	9905      	ldr	r1, [sp, #20]
   15432:	a827      	add	r0, sp, #156	; 0x9c
   15434:	e787      	b.n	15346 <_svfprintf_r+0xf96>
   15436:	9802      	ldr	r0, [sp, #8]
   15438:	f8cd a01c 	str.w	sl, [sp, #28]
   1543c:	ac50      	add	r4, sp, #320	; 0x140
   1543e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   15442:	2500      	movs	r5, #0
   15444:	ee0a ba10 	vmov	s20, fp
   15448:	4b09      	ldr	r3, [pc, #36]	; (15470 <_svfprintf_r+0x10c0>)
   1544a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   1544e:	f8cd 9014 	str.w	r9, [sp, #20]
   15452:	46a3      	mov	fp, r4
   15454:	f04f 0805 	mov.w	r8, #5
   15458:	46ac      	mov	ip, r5
   1545a:	4604      	mov	r4, r0
   1545c:	e010      	b.n	15480 <_svfprintf_r+0x10d0>
   1545e:	bf00      	nop
   15460:	200011f0 	.word	0x200011f0
   15464:	20001204 	.word	0x20001204
   15468:	20001218 	.word	0x20001218
   1546c:	20008a44 	.word	0x20008a44
   15470:	cccccccd 	.word	0xcccccccd
   15474:	2a0a      	cmp	r2, #10
   15476:	f171 0100 	sbcs.w	r1, r1, #0
   1547a:	d336      	bcc.n	154ea <_svfprintf_r+0x113a>
   1547c:	464a      	mov	r2, r9
   1547e:	4631      	mov	r1, r6
   15480:	1850      	adds	r0, r2, r1
   15482:	f140 0000 	adc.w	r0, r0, #0
   15486:	fba3 5600 	umull	r5, r6, r3, r0
   1548a:	f026 0503 	bic.w	r5, r6, #3
   1548e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   15492:	1b40      	subs	r0, r0, r5
   15494:	1a15      	subs	r5, r2, r0
   15496:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   1549a:	f161 0e00 	sbc.w	lr, r1, #0
   1549e:	fb06 f605 	mul.w	r6, r6, r5
   154a2:	fba5 9503 	umull	r9, r5, r5, r3
   154a6:	fb03 660e 	mla	r6, r3, lr, r6
   154aa:	f009 0e01 	and.w	lr, r9, #1
   154ae:	442e      	add	r6, r5
   154b0:	fbae 5e08 	umull	r5, lr, lr, r8
   154b4:	182d      	adds	r5, r5, r0
   154b6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   154ba:	3530      	adds	r5, #48	; 0x30
   154bc:	f80b 5c01 	strb.w	r5, [fp, #-1]
   154c0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   154c4:	f10c 0c01 	add.w	ip, ip, #1
   154c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   154cc:	0876      	lsrs	r6, r6, #1
   154ce:	2c00      	cmp	r4, #0
   154d0:	d0d0      	beq.n	15474 <_svfprintf_r+0x10c4>
   154d2:	f89a 0000 	ldrb.w	r0, [sl]
   154d6:	4584      	cmp	ip, r0
   154d8:	d1cc      	bne.n	15474 <_svfprintf_r+0x10c4>
   154da:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   154de:	d0c9      	beq.n	15474 <_svfprintf_r+0x10c4>
   154e0:	2a0a      	cmp	r2, #10
   154e2:	f171 0100 	sbcs.w	r1, r1, #0
   154e6:	f080 818f 	bcs.w	15808 <_svfprintf_r+0x1458>
   154ea:	465c      	mov	r4, fp
   154ec:	ab50      	add	r3, sp, #320	; 0x140
   154ee:	1b1b      	subs	r3, r3, r4
   154f0:	f8dd 9014 	ldr.w	r9, [sp, #20]
   154f4:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   154f8:	ee1a ba10 	vmov	fp, s20
   154fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   15500:	f8dd 8008 	ldr.w	r8, [sp, #8]
   15504:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   15508:	9305      	str	r3, [sp, #20]
   1550a:	f7ff bac2 	b.w	14a92 <_svfprintf_r+0x6e2>
   1550e:	ee1b 1a10 	vmov	r1, s22
   15512:	aa24      	add	r2, sp, #144	; 0x90
   15514:	4658      	mov	r0, fp
   15516:	f003 fdd7 	bl	190c8 <__ssprint_r>
   1551a:	2800      	cmp	r0, #0
   1551c:	f47f abad 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15520:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15524:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15526:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1552a:	f7ff b896 	b.w	1465a <_svfprintf_r+0x2aa>
   1552e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15530:	48be      	ldr	r0, [pc, #760]	; (1582c <_svfprintf_r+0x147c>)
   15532:	f8ca 0000 	str.w	r0, [sl]
   15536:	3301      	adds	r3, #1
   15538:	3201      	adds	r2, #1
   1553a:	2001      	movs	r0, #1
   1553c:	2b07      	cmp	r3, #7
   1553e:	9226      	str	r2, [sp, #152]	; 0x98
   15540:	9325      	str	r3, [sp, #148]	; 0x94
   15542:	f8ca 0004 	str.w	r0, [sl, #4]
   15546:	f300 8177 	bgt.w	15838 <_svfprintf_r+0x1488>
   1554a:	f10a 0a08 	add.w	sl, sl, #8
   1554e:	2900      	cmp	r1, #0
   15550:	f040 80af 	bne.w	156b2 <_svfprintf_r+0x1302>
   15554:	990e      	ldr	r1, [sp, #56]	; 0x38
   15556:	f008 0301 	and.w	r3, r8, #1
   1555a:	430b      	orrs	r3, r1
   1555c:	f43f a8c0 	beq.w	146e0 <_svfprintf_r+0x330>
   15560:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15562:	9912      	ldr	r1, [sp, #72]	; 0x48
   15564:	441a      	add	r2, r3
   15566:	e9ca 1300 	strd	r1, r3, [sl]
   1556a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1556c:	9226      	str	r2, [sp, #152]	; 0x98
   1556e:	3301      	adds	r3, #1
   15570:	2b07      	cmp	r3, #7
   15572:	9325      	str	r3, [sp, #148]	; 0x94
   15574:	f300 8252 	bgt.w	15a1c <_svfprintf_r+0x166c>
   15578:	f10a 0a08 	add.w	sl, sl, #8
   1557c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1557e:	f8ca 4000 	str.w	r4, [sl]
   15582:	3301      	adds	r3, #1
   15584:	440a      	add	r2, r1
   15586:	2b07      	cmp	r3, #7
   15588:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   1558c:	f8ca 1004 	str.w	r1, [sl, #4]
   15590:	f77f a8a4 	ble.w	146dc <_svfprintf_r+0x32c>
   15594:	f7ff bbbd 	b.w	14d12 <_svfprintf_r+0x962>
   15598:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   1559c:	f000 80dd 	beq.w	1575a <_svfprintf_r+0x13aa>
   155a0:	9808      	ldr	r0, [sp, #32]
   155a2:	f850 2b04 	ldr.w	r2, [r0], #4
   155a6:	9008      	str	r0, [sp, #32]
   155a8:	4619      	mov	r1, r3
   155aa:	b292      	uxth	r2, r2
   155ac:	e631      	b.n	15212 <_svfprintf_r+0xe62>
   155ae:	ee1b 1a10 	vmov	r1, s22
   155b2:	aa24      	add	r2, sp, #144	; 0x90
   155b4:	4658      	mov	r0, fp
   155b6:	f003 fd87 	bl	190c8 <__ssprint_r>
   155ba:	2800      	cmp	r0, #0
   155bc:	f47f ab5d 	bne.w	14c7a <_svfprintf_r+0x8ca>
   155c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   155c2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   155c6:	f7ff baa3 	b.w	14b10 <_svfprintf_r+0x760>
   155ca:	ae22      	add	r6, sp, #136	; 0x88
   155cc:	2208      	movs	r2, #8
   155ce:	2100      	movs	r1, #0
   155d0:	4630      	mov	r0, r6
   155d2:	941d      	str	r4, [sp, #116]	; 0x74
   155d4:	f7fc ff2c 	bl	12430 <memset>
   155d8:	9b03      	ldr	r3, [sp, #12]
   155da:	1c5a      	adds	r2, r3, #1
   155dc:	f000 80db 	beq.w	15796 <_svfprintf_r+0x13e6>
   155e0:	2500      	movs	r5, #0
   155e2:	f8cd 9008 	str.w	r9, [sp, #8]
   155e6:	f8cd 801c 	str.w	r8, [sp, #28]
   155ea:	4699      	mov	r9, r3
   155ec:	46a8      	mov	r8, r5
   155ee:	e00c      	b.n	1560a <_svfprintf_r+0x125a>
   155f0:	a937      	add	r1, sp, #220	; 0xdc
   155f2:	4658      	mov	r0, fp
   155f4:	f003 fc3e 	bl	18e74 <_wcrtomb_r>
   155f8:	1c43      	adds	r3, r0, #1
   155fa:	4440      	add	r0, r8
   155fc:	f000 83c8 	beq.w	15d90 <_svfprintf_r+0x19e0>
   15600:	4548      	cmp	r0, r9
   15602:	dc08      	bgt.n	15616 <_svfprintf_r+0x1266>
   15604:	f000 8418 	beq.w	15e38 <_svfprintf_r+0x1a88>
   15608:	4680      	mov	r8, r0
   1560a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1560c:	5952      	ldr	r2, [r2, r5]
   1560e:	4633      	mov	r3, r6
   15610:	3504      	adds	r5, #4
   15612:	2a00      	cmp	r2, #0
   15614:	d1ec      	bne.n	155f0 <_svfprintf_r+0x1240>
   15616:	f8cd 8014 	str.w	r8, [sp, #20]
   1561a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1561e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   15622:	e0c5      	b.n	157b0 <_svfprintf_r+0x1400>
   15624:	3301      	adds	r3, #1
   15626:	4982      	ldr	r1, [pc, #520]	; (15830 <_svfprintf_r+0x1480>)
   15628:	f8ca 4004 	str.w	r4, [sl, #4]
   1562c:	4422      	add	r2, r4
   1562e:	2b07      	cmp	r3, #7
   15630:	f8ca 1000 	str.w	r1, [sl]
   15634:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15638:	f77f a850 	ble.w	146dc <_svfprintf_r+0x32c>
   1563c:	f7ff bb69 	b.w	14d12 <_svfprintf_r+0x962>
   15640:	ee1b 1a10 	vmov	r1, s22
   15644:	aa24      	add	r2, sp, #144	; 0x90
   15646:	4658      	mov	r0, fp
   15648:	f003 fd3e 	bl	190c8 <__ssprint_r>
   1564c:	2800      	cmp	r0, #0
   1564e:	f47f ab14 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15652:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15654:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15658:	f7ff b829 	b.w	146ae <_svfprintf_r+0x2fe>
   1565c:	aa24      	add	r2, sp, #144	; 0x90
   1565e:	4658      	mov	r0, fp
   15660:	9105      	str	r1, [sp, #20]
   15662:	f003 fd31 	bl	190c8 <__ssprint_r>
   15666:	2800      	cmp	r0, #0
   15668:	f47f ab07 	bne.w	14c7a <_svfprintf_r+0x8ca>
   1566c:	f896 c000 	ldrb.w	ip, [r6]
   15670:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15672:	9905      	ldr	r1, [sp, #20]
   15674:	a827      	add	r0, sp, #156	; 0x9c
   15676:	e67d      	b.n	15374 <_svfprintf_r+0xfc4>
   15678:	2b01      	cmp	r3, #1
   1567a:	f8cd 8008 	str.w	r8, [sp, #8]
   1567e:	f47f a9f3 	bne.w	14a68 <_svfprintf_r+0x6b8>
   15682:	f7ff bb93 	b.w	14dac <_svfprintf_r+0x9fc>
   15686:	9b08      	ldr	r3, [sp, #32]
   15688:	9904      	ldr	r1, [sp, #16]
   1568a:	f853 2b04 	ldr.w	r2, [r3], #4
   1568e:	464c      	mov	r4, r9
   15690:	6011      	str	r1, [r2, #0]
   15692:	9308      	str	r3, [sp, #32]
   15694:	f7fe bebe 	b.w	14414 <_svfprintf_r+0x64>
   15698:	3301      	adds	r3, #1
   1569a:	4965      	ldr	r1, [pc, #404]	; (15830 <_svfprintf_r+0x1480>)
   1569c:	f8ca 4004 	str.w	r4, [sl, #4]
   156a0:	4422      	add	r2, r4
   156a2:	2b07      	cmp	r3, #7
   156a4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   156a8:	f8ca 1000 	str.w	r1, [sl]
   156ac:	f77f ab22 	ble.w	14cf4 <_svfprintf_r+0x944>
   156b0:	e47b      	b.n	14faa <_svfprintf_r+0xbfa>
   156b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   156b4:	9812      	ldr	r0, [sp, #72]	; 0x48
   156b6:	441a      	add	r2, r3
   156b8:	e9ca 0300 	strd	r0, r3, [sl]
   156bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   156be:	9226      	str	r2, [sp, #152]	; 0x98
   156c0:	3301      	adds	r3, #1
   156c2:	2b07      	cmp	r3, #7
   156c4:	9325      	str	r3, [sp, #148]	; 0x94
   156c6:	f300 81a9 	bgt.w	15a1c <_svfprintf_r+0x166c>
   156ca:	f10a 0a08 	add.w	sl, sl, #8
   156ce:	2900      	cmp	r1, #0
   156d0:	f6bf af54 	bge.w	1557c <_svfprintf_r+0x11cc>
   156d4:	424d      	negs	r5, r1
   156d6:	3110      	adds	r1, #16
   156d8:	f280 830f 	bge.w	15cfa <_svfprintf_r+0x194a>
   156dc:	ee1b 1a10 	vmov	r1, s22
   156e0:	2610      	movs	r6, #16
   156e2:	e005      	b.n	156f0 <_svfprintf_r+0x1340>
   156e4:	f10a 0a08 	add.w	sl, sl, #8
   156e8:	3d10      	subs	r5, #16
   156ea:	2d10      	cmp	r5, #16
   156ec:	f340 8305 	ble.w	15cfa <_svfprintf_r+0x194a>
   156f0:	3301      	adds	r3, #1
   156f2:	484f      	ldr	r0, [pc, #316]	; (15830 <_svfprintf_r+0x1480>)
   156f4:	3210      	adds	r2, #16
   156f6:	2b07      	cmp	r3, #7
   156f8:	e9ca 0600 	strd	r0, r6, [sl]
   156fc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15700:	ddf0      	ble.n	156e4 <_svfprintf_r+0x1334>
   15702:	aa24      	add	r2, sp, #144	; 0x90
   15704:	4658      	mov	r0, fp
   15706:	9103      	str	r1, [sp, #12]
   15708:	f003 fcde 	bl	190c8 <__ssprint_r>
   1570c:	2800      	cmp	r0, #0
   1570e:	f47f aab4 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15712:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15716:	9903      	ldr	r1, [sp, #12]
   15718:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   1571c:	e7e4      	b.n	156e8 <_svfprintf_r+0x1338>
   1571e:	9b08      	ldr	r3, [sp, #32]
   15720:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   15724:	bf1a      	itte	ne
   15726:	4611      	movne	r1, r2
   15728:	f853 2b04 	ldrne.w	r2, [r3], #4
   1572c:	f853 2b04 	ldreq.w	r2, [r3], #4
   15730:	9308      	str	r3, [sp, #32]
   15732:	bf18      	it	ne
   15734:	b2d2      	uxtbne	r2, r2
   15736:	f7ff b945 	b.w	149c4 <_svfprintf_r+0x614>
   1573a:	9b02      	ldr	r3, [sp, #8]
   1573c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   15740:	9b08      	ldr	r3, [sp, #32]
   15742:	bf1a      	itte	ne
   15744:	4611      	movne	r1, r2
   15746:	f853 2b04 	ldrne.w	r2, [r3], #4
   1574a:	f853 2b04 	ldreq.w	r2, [r3], #4
   1574e:	9308      	str	r3, [sp, #32]
   15750:	bf18      	it	ne
   15752:	b2d2      	uxtbne	r2, r2
   15754:	2301      	movs	r3, #1
   15756:	f7ff b8d0 	b.w	148fa <_svfprintf_r+0x54a>
   1575a:	9b08      	ldr	r3, [sp, #32]
   1575c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   15760:	bf1a      	itte	ne
   15762:	4611      	movne	r1, r2
   15764:	f853 2b04 	ldrne.w	r2, [r3], #4
   15768:	f853 2b04 	ldreq.w	r2, [r3], #4
   1576c:	9308      	str	r3, [sp, #32]
   1576e:	bf18      	it	ne
   15770:	b2d2      	uxtbne	r2, r2
   15772:	e54e      	b.n	15212 <_svfprintf_r+0xe62>
   15774:	468a      	mov	sl, r1
   15776:	3301      	adds	r3, #1
   15778:	492d      	ldr	r1, [pc, #180]	; (15830 <_svfprintf_r+0x1480>)
   1577a:	f8ca 5004 	str.w	r5, [sl, #4]
   1577e:	442a      	add	r2, r5
   15780:	2b07      	cmp	r3, #7
   15782:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15786:	f8ca 1000 	str.w	r1, [sl]
   1578a:	f300 8139 	bgt.w	15a00 <_svfprintf_r+0x1650>
   1578e:	f10a 0a08 	add.w	sl, sl, #8
   15792:	f7ff bb8c 	b.w	14eae <_svfprintf_r+0xafe>
   15796:	2300      	movs	r3, #0
   15798:	4619      	mov	r1, r3
   1579a:	9600      	str	r6, [sp, #0]
   1579c:	aa1d      	add	r2, sp, #116	; 0x74
   1579e:	4658      	mov	r0, fp
   157a0:	f003 fb8e 	bl	18ec0 <_wcsrtombs_r>
   157a4:	4603      	mov	r3, r0
   157a6:	3301      	adds	r3, #1
   157a8:	9005      	str	r0, [sp, #20]
   157aa:	f000 82f1 	beq.w	15d90 <_svfprintf_r+0x19e0>
   157ae:	941d      	str	r4, [sp, #116]	; 0x74
   157b0:	9b05      	ldr	r3, [sp, #20]
   157b2:	2b00      	cmp	r3, #0
   157b4:	d04e      	beq.n	15854 <_svfprintf_r+0x14a4>
   157b6:	2b63      	cmp	r3, #99	; 0x63
   157b8:	f300 8118 	bgt.w	159ec <_svfprintf_r+0x163c>
   157bc:	2300      	movs	r3, #0
   157be:	9307      	str	r3, [sp, #28]
   157c0:	ac37      	add	r4, sp, #220	; 0xdc
   157c2:	2208      	movs	r2, #8
   157c4:	2100      	movs	r1, #0
   157c6:	4630      	mov	r0, r6
   157c8:	f7fc fe32 	bl	12430 <memset>
   157cc:	9d05      	ldr	r5, [sp, #20]
   157ce:	9600      	str	r6, [sp, #0]
   157d0:	462b      	mov	r3, r5
   157d2:	aa1d      	add	r2, sp, #116	; 0x74
   157d4:	4621      	mov	r1, r4
   157d6:	4658      	mov	r0, fp
   157d8:	f003 fb72 	bl	18ec0 <_wcsrtombs_r>
   157dc:	4285      	cmp	r5, r0
   157de:	f040 837c 	bne.w	15eda <_svfprintf_r+0x1b2a>
   157e2:	9a05      	ldr	r2, [sp, #20]
   157e4:	2300      	movs	r3, #0
   157e6:	54a3      	strb	r3, [r4, r2]
   157e8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   157ec:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   157f0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   157f4:	9303      	str	r3, [sp, #12]
   157f6:	9202      	str	r2, [sp, #8]
   157f8:	930f      	str	r3, [sp, #60]	; 0x3c
   157fa:	f7fe bfba 	b.w	14772 <_svfprintf_r+0x3c2>
   157fe:	212d      	movs	r1, #45	; 0x2d
   15800:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15804:	f7fe bfa4 	b.w	14750 <_svfprintf_r+0x3a0>
   15808:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1580a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1580c:	ebab 0b03 	sub.w	fp, fp, r3
   15810:	461a      	mov	r2, r3
   15812:	4658      	mov	r0, fp
   15814:	f7fc fefa 	bl	1260c <strncpy>
   15818:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1581c:	4b05      	ldr	r3, [pc, #20]	; (15834 <_svfprintf_r+0x1484>)
   1581e:	b10a      	cbz	r2, 15824 <_svfprintf_r+0x1474>
   15820:	f10a 0a01 	add.w	sl, sl, #1
   15824:	f04f 0c00 	mov.w	ip, #0
   15828:	e628      	b.n	1547c <_svfprintf_r+0x10cc>
   1582a:	bf00      	nop
   1582c:	20007fcc 	.word	0x20007fcc
   15830:	20008a44 	.word	0x20008a44
   15834:	cccccccd 	.word	0xcccccccd
   15838:	ee1b 1a10 	vmov	r1, s22
   1583c:	aa24      	add	r2, sp, #144	; 0x90
   1583e:	4658      	mov	r0, fp
   15840:	f003 fc42 	bl	190c8 <__ssprint_r>
   15844:	2800      	cmp	r0, #0
   15846:	f47f aa18 	bne.w	14c7a <_svfprintf_r+0x8ca>
   1584a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1584c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1584e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15852:	e67c      	b.n	1554e <_svfprintf_r+0x119e>
   15854:	9b05      	ldr	r3, [sp, #20]
   15856:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   1585a:	930f      	str	r3, [sp, #60]	; 0x3c
   1585c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15860:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   15864:	9307      	str	r3, [sp, #28]
   15866:	f7fe bf84 	b.w	14772 <_svfprintf_r+0x3c2>
   1586a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1586c:	9805      	ldr	r0, [sp, #20]
   1586e:	1865      	adds	r5, r4, r1
   15870:	1a2d      	subs	r5, r5, r0
   15872:	1acc      	subs	r4, r1, r3
   15874:	42a5      	cmp	r5, r4
   15876:	bfa8      	it	ge
   15878:	4625      	movge	r5, r4
   1587a:	f7ff bb4d 	b.w	14f18 <_svfprintf_r+0xb68>
   1587e:	9b08      	ldr	r3, [sp, #32]
   15880:	9904      	ldr	r1, [sp, #16]
   15882:	f853 2b04 	ldr.w	r2, [r3], #4
   15886:	9308      	str	r3, [sp, #32]
   15888:	8011      	strh	r1, [r2, #0]
   1588a:	464c      	mov	r4, r9
   1588c:	f7fe bdc2 	b.w	14414 <_svfprintf_r+0x64>
   15890:	f913 2b04 	ldrsb.w	r2, [r3], #4
   15894:	9308      	str	r3, [sp, #32]
   15896:	17d1      	asrs	r1, r2, #31
   15898:	460b      	mov	r3, r1
   1589a:	f7fe bfdb 	b.w	14854 <_svfprintf_r+0x4a4>
   1589e:	9a03      	ldr	r2, [sp, #12]
   158a0:	2102      	movs	r1, #2
   158a2:	ab22      	add	r3, sp, #136	; 0x88
   158a4:	9301      	str	r3, [sp, #4]
   158a6:	ab1d      	add	r3, sp, #116	; 0x74
   158a8:	9300      	str	r3, [sp, #0]
   158aa:	4658      	mov	r0, fp
   158ac:	ab1b      	add	r3, sp, #108	; 0x6c
   158ae:	eeb0 0b4a 	vmov.f64	d0, d10
   158b2:	9202      	str	r2, [sp, #8]
   158b4:	f002 fa14 	bl	17ce0 <_dtoa_r>
   158b8:	2d47      	cmp	r5, #71	; 0x47
   158ba:	9a02      	ldr	r2, [sp, #8]
   158bc:	4604      	mov	r4, r0
   158be:	f000 8161 	beq.w	15b84 <_svfprintf_r+0x17d4>
   158c2:	2d46      	cmp	r5, #70	; 0x46
   158c4:	4410      	add	r0, r2
   158c6:	d105      	bne.n	158d4 <_svfprintf_r+0x1524>
   158c8:	7823      	ldrb	r3, [r4, #0]
   158ca:	2b30      	cmp	r3, #48	; 0x30
   158cc:	f000 826f 	beq.w	15dae <_svfprintf_r+0x19fe>
   158d0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   158d2:	4410      	add	r0, r2
   158d4:	eeb5 ab40 	vcmp.f64	d10, #0.0
   158d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   158dc:	f040 8146 	bne.w	15b6c <_svfprintf_r+0x17bc>
   158e0:	4603      	mov	r3, r0
   158e2:	1b1b      	subs	r3, r3, r4
   158e4:	930e      	str	r3, [sp, #56]	; 0x38
   158e6:	2d47      	cmp	r5, #71	; 0x47
   158e8:	f000 8110 	beq.w	15b0c <_svfprintf_r+0x175c>
   158ec:	2d46      	cmp	r5, #70	; 0x46
   158ee:	f000 81b5 	beq.w	15c5c <_svfprintf_r+0x18ac>
   158f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   158f4:	930c      	str	r3, [sp, #48]	; 0x30
   158f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   158f8:	2d41      	cmp	r5, #65	; 0x41
   158fa:	f103 33ff 	add.w	r3, r3, #4294967295
   158fe:	931b      	str	r3, [sp, #108]	; 0x6c
   15900:	f000 81e5 	beq.w	15cce <_svfprintf_r+0x191e>
   15904:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   15908:	2100      	movs	r1, #0
   1590a:	2b00      	cmp	r3, #0
   1590c:	bfb8      	it	lt
   1590e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   15910:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   15914:	bfba      	itte	lt
   15916:	f1c3 0301 	rsblt	r3, r3, #1
   1591a:	222d      	movlt	r2, #45	; 0x2d
   1591c:	222b      	movge	r2, #43	; 0x2b
   1591e:	2b09      	cmp	r3, #9
   15920:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   15924:	f340 81da 	ble.w	15cdc <_svfprintf_r+0x192c>
   15928:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   1592c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 15d4c <_svfprintf_r+0x199c>
   15930:	462a      	mov	r2, r5
   15932:	4610      	mov	r0, r2
   15934:	fb8c 2103 	smull	r2, r1, ip, r3
   15938:	17da      	asrs	r2, r3, #31
   1593a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   1593e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15942:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   15946:	3130      	adds	r1, #48	; 0x30
   15948:	f800 1c01 	strb.w	r1, [r0, #-1]
   1594c:	4619      	mov	r1, r3
   1594e:	2963      	cmp	r1, #99	; 0x63
   15950:	4613      	mov	r3, r2
   15952:	f100 32ff 	add.w	r2, r0, #4294967295
   15956:	dcec      	bgt.n	15932 <_svfprintf_r+0x1582>
   15958:	3330      	adds	r3, #48	; 0x30
   1595a:	b2d9      	uxtb	r1, r3
   1595c:	1e83      	subs	r3, r0, #2
   1595e:	429d      	cmp	r5, r3
   15960:	f802 1c01 	strb.w	r1, [r2, #-1]
   15964:	f240 828b 	bls.w	15e7e <_svfprintf_r+0x1ace>
   15968:	4613      	mov	r3, r2
   1596a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   1596e:	e001      	b.n	15974 <_svfprintf_r+0x15c4>
   15970:	f813 1b01 	ldrb.w	r1, [r3], #1
   15974:	f802 1b01 	strb.w	r1, [r2], #1
   15978:	429d      	cmp	r5, r3
   1597a:	d1f9      	bne.n	15970 <_svfprintf_r+0x15c0>
   1597c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   15980:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15984:	1a1b      	subs	r3, r3, r0
   15986:	4413      	add	r3, r2
   15988:	aa1e      	add	r2, sp, #120	; 0x78
   1598a:	1a9b      	subs	r3, r3, r2
   1598c:	9314      	str	r3, [sp, #80]	; 0x50
   1598e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15990:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15992:	2b01      	cmp	r3, #1
   15994:	441a      	add	r2, r3
   15996:	9205      	str	r2, [sp, #20]
   15998:	f340 8203 	ble.w	15da2 <_svfprintf_r+0x19f2>
   1599c:	9b05      	ldr	r3, [sp, #20]
   1599e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   159a0:	4413      	add	r3, r2
   159a2:	9305      	str	r3, [sp, #20]
   159a4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   159a8:	9a05      	ldr	r2, [sp, #20]
   159aa:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   159ae:	2300      	movs	r3, #0
   159b0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   159b4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   159b8:	930f      	str	r3, [sp, #60]	; 0x3c
   159ba:	9202      	str	r2, [sp, #8]
   159bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   159be:	2b00      	cmp	r3, #0
   159c0:	f040 80b1 	bne.w	15b26 <_svfprintf_r+0x1776>
   159c4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   159c8:	9303      	str	r3, [sp, #12]
   159ca:	f7fe bed2 	b.w	14772 <_svfprintf_r+0x3c2>
   159ce:	4620      	mov	r0, r4
   159d0:	f7fd f916 	bl	12c00 <strlen>
   159d4:	4602      	mov	r2, r0
   159d6:	9005      	str	r0, [sp, #20]
   159d8:	f7fe bf20 	b.w	1481c <_svfprintf_r+0x46c>
   159dc:	ee1b 1a10 	vmov	r1, s22
   159e0:	aa24      	add	r2, sp, #144	; 0x90
   159e2:	4658      	mov	r0, fp
   159e4:	f003 fb70 	bl	190c8 <__ssprint_r>
   159e8:	f7fe bded 	b.w	145c6 <_svfprintf_r+0x216>
   159ec:	1c59      	adds	r1, r3, #1
   159ee:	4658      	mov	r0, fp
   159f0:	f7fa fdae 	bl	10550 <_malloc_r>
   159f4:	4604      	mov	r4, r0
   159f6:	2800      	cmp	r0, #0
   159f8:	f000 81ca 	beq.w	15d90 <_svfprintf_r+0x19e0>
   159fc:	9007      	str	r0, [sp, #28]
   159fe:	e6e0      	b.n	157c2 <_svfprintf_r+0x1412>
   15a00:	ee1b 1a10 	vmov	r1, s22
   15a04:	aa24      	add	r2, sp, #144	; 0x90
   15a06:	4658      	mov	r0, fp
   15a08:	f003 fb5e 	bl	190c8 <__ssprint_r>
   15a0c:	2800      	cmp	r0, #0
   15a0e:	f47f a934 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15a12:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15a14:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15a18:	f7ff ba49 	b.w	14eae <_svfprintf_r+0xafe>
   15a1c:	ee1b 1a10 	vmov	r1, s22
   15a20:	aa24      	add	r2, sp, #144	; 0x90
   15a22:	4658      	mov	r0, fp
   15a24:	f003 fb50 	bl	190c8 <__ssprint_r>
   15a28:	2800      	cmp	r0, #0
   15a2a:	f47f a926 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15a2e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15a32:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15a34:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15a38:	e649      	b.n	156ce <_svfprintf_r+0x131e>
   15a3a:	2306      	movs	r3, #6
   15a3c:	9303      	str	r3, [sp, #12]
   15a3e:	f7ff bb83 	b.w	15148 <_svfprintf_r+0xd98>
   15a42:	9b03      	ldr	r3, [sp, #12]
   15a44:	2102      	movs	r1, #2
   15a46:	1c5a      	adds	r2, r3, #1
   15a48:	e72b      	b.n	158a2 <_svfprintf_r+0x14f2>
   15a4a:	9a03      	ldr	r2, [sp, #12]
   15a4c:	2103      	movs	r1, #3
   15a4e:	e728      	b.n	158a2 <_svfprintf_r+0x14f2>
   15a50:	a81b      	add	r0, sp, #108	; 0x6c
   15a52:	eeb0 0b4a 	vmov.f64	d0, d10
   15a56:	f002 f817 	bl	17a88 <frexp>
   15a5a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15a5e:	ee20 0b07 	vmul.f64	d0, d0, d7
   15a62:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15a6a:	d101      	bne.n	15a70 <_svfprintf_r+0x16c0>
   15a6c:	2301      	movs	r3, #1
   15a6e:	931b      	str	r3, [sp, #108]	; 0x6c
   15a70:	48b3      	ldr	r0, [pc, #716]	; (15d40 <_svfprintf_r+0x1990>)
   15a72:	9b03      	ldr	r3, [sp, #12]
   15a74:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   15a78:	3b01      	subs	r3, #1
   15a7a:	4622      	mov	r2, r4
   15a7c:	e004      	b.n	15a88 <_svfprintf_r+0x16d8>
   15a7e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15a86:	d013      	beq.n	15ab0 <_svfprintf_r+0x1700>
   15a88:	ee20 0b05 	vmul.f64	d0, d0, d5
   15a8c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   15a90:	f1b3 3fff 	cmp.w	r3, #4294967295
   15a94:	ee17 1a90 	vmov	r1, s15
   15a98:	5c41      	ldrb	r1, [r0, r1]
   15a9a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   15a9e:	4694      	mov	ip, r2
   15aa0:	ee30 0b46 	vsub.f64	d0, d0, d6
   15aa4:	f802 1b01 	strb.w	r1, [r2], #1
   15aa8:	4619      	mov	r1, r3
   15aaa:	f103 33ff 	add.w	r3, r3, #4294967295
   15aae:	d1e6      	bne.n	15a7e <_svfprintf_r+0x16ce>
   15ab0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   15ab4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   15ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15abc:	f300 8148 	bgt.w	15d50 <_svfprintf_r+0x19a0>
   15ac0:	eeb4 0b46 	vcmp.f64	d0, d6
   15ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15ac8:	d104      	bne.n	15ad4 <_svfprintf_r+0x1724>
   15aca:	ee17 3a90 	vmov	r3, s15
   15ace:	07db      	lsls	r3, r3, #31
   15ad0:	f100 813e 	bmi.w	15d50 <_svfprintf_r+0x19a0>
   15ad4:	2900      	cmp	r1, #0
   15ad6:	db06      	blt.n	15ae6 <_svfprintf_r+0x1736>
   15ad8:	1c4b      	adds	r3, r1, #1
   15ada:	4413      	add	r3, r2
   15adc:	2130      	movs	r1, #48	; 0x30
   15ade:	f802 1b01 	strb.w	r1, [r2], #1
   15ae2:	4293      	cmp	r3, r2
   15ae4:	d1fb      	bne.n	15ade <_svfprintf_r+0x172e>
   15ae6:	1b13      	subs	r3, r2, r4
   15ae8:	930e      	str	r3, [sp, #56]	; 0x38
   15aea:	e6fc      	b.n	158e6 <_svfprintf_r+0x1536>
   15aec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   15aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15af0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   15af4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   15af8:	9613      	str	r6, [sp, #76]	; 0x4c
   15afa:	18e3      	adds	r3, r4, r3
   15afc:	429d      	cmp	r5, r3
   15afe:	4629      	mov	r1, r5
   15b00:	bf28      	it	cs
   15b02:	4619      	movcs	r1, r3
   15b04:	4682      	mov	sl, r0
   15b06:	9105      	str	r1, [sp, #20]
   15b08:	f7ff b9d8 	b.w	14ebc <_svfprintf_r+0xb0c>
   15b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15b0e:	930c      	str	r3, [sp, #48]	; 0x30
   15b10:	1cda      	adds	r2, r3, #3
   15b12:	db02      	blt.n	15b1a <_svfprintf_r+0x176a>
   15b14:	9a03      	ldr	r2, [sp, #12]
   15b16:	4293      	cmp	r3, r2
   15b18:	dd0c      	ble.n	15b34 <_svfprintf_r+0x1784>
   15b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b1c:	3b02      	subs	r3, #2
   15b1e:	930b      	str	r3, [sp, #44]	; 0x2c
   15b20:	f023 0520 	bic.w	r5, r3, #32
   15b24:	e6e7      	b.n	158f6 <_svfprintf_r+0x1546>
   15b26:	212d      	movs	r1, #45	; 0x2d
   15b28:	2300      	movs	r3, #0
   15b2a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   15b2e:	9303      	str	r3, [sp, #12]
   15b30:	f7fe be22 	b.w	14778 <_svfprintf_r+0x3c8>
   15b34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15b38:	4293      	cmp	r3, r2
   15b3a:	f2c0 80bd 	blt.w	15cb8 <_svfprintf_r+0x1908>
   15b3e:	07f0      	lsls	r0, r6, #31
   15b40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b42:	f140 8132 	bpl.w	15daa <_svfprintf_r+0x19fa>
   15b46:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15b48:	4413      	add	r3, r2
   15b4a:	9305      	str	r3, [sp, #20]
   15b4c:	0571      	lsls	r1, r6, #21
   15b4e:	d503      	bpl.n	15b58 <_svfprintf_r+0x17a8>
   15b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15b52:	2b00      	cmp	r3, #0
   15b54:	f300 8135 	bgt.w	15dc2 <_svfprintf_r+0x1a12>
   15b58:	9b05      	ldr	r3, [sp, #20]
   15b5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15b5e:	9302      	str	r3, [sp, #8]
   15b60:	2367      	movs	r3, #103	; 0x67
   15b62:	930b      	str	r3, [sp, #44]	; 0x2c
   15b64:	2300      	movs	r3, #0
   15b66:	930f      	str	r3, [sp, #60]	; 0x3c
   15b68:	930d      	str	r3, [sp, #52]	; 0x34
   15b6a:	e727      	b.n	159bc <_svfprintf_r+0x160c>
   15b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15b6e:	4283      	cmp	r3, r0
   15b70:	f4bf aeb7 	bcs.w	158e2 <_svfprintf_r+0x1532>
   15b74:	2130      	movs	r1, #48	; 0x30
   15b76:	1c5a      	adds	r2, r3, #1
   15b78:	9222      	str	r2, [sp, #136]	; 0x88
   15b7a:	7019      	strb	r1, [r3, #0]
   15b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15b7e:	4298      	cmp	r0, r3
   15b80:	d8f9      	bhi.n	15b76 <_svfprintf_r+0x17c6>
   15b82:	e6ae      	b.n	158e2 <_svfprintf_r+0x1532>
   15b84:	07f3      	lsls	r3, r6, #31
   15b86:	f100 80a7 	bmi.w	15cd8 <_svfprintf_r+0x1928>
   15b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15b8c:	e6a9      	b.n	158e2 <_svfprintf_r+0x1532>
   15b8e:	aa24      	add	r2, sp, #144	; 0x90
   15b90:	4658      	mov	r0, fp
   15b92:	9105      	str	r1, [sp, #20]
   15b94:	f003 fa98 	bl	190c8 <__ssprint_r>
   15b98:	2800      	cmp	r0, #0
   15b9a:	f47f a86e 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15b9e:	f896 c000 	ldrb.w	ip, [r6]
   15ba2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ba4:	9905      	ldr	r1, [sp, #20]
   15ba6:	a827      	add	r0, sp, #156	; 0x9c
   15ba8:	4465      	add	r5, ip
   15baa:	f7ff bbec 	b.w	15386 <_svfprintf_r+0xfd6>
   15bae:	ee1b 1a10 	vmov	r1, s22
   15bb2:	aa24      	add	r2, sp, #144	; 0x90
   15bb4:	4658      	mov	r0, fp
   15bb6:	f003 fa87 	bl	190c8 <__ssprint_r>
   15bba:	2800      	cmp	r0, #0
   15bbc:	f47f a85d 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15bc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15bc2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15bc6:	f7ff b96b 	b.w	14ea0 <_svfprintf_r+0xaf0>
   15bca:	2378      	movs	r3, #120	; 0x78
   15bcc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   15bd0:	2330      	movs	r3, #48	; 0x30
   15bd2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   15bd6:	9b03      	ldr	r3, [sp, #12]
   15bd8:	2b63      	cmp	r3, #99	; 0x63
   15bda:	f048 0602 	orr.w	r6, r8, #2
   15bde:	f300 80a6 	bgt.w	15d2e <_svfprintf_r+0x197e>
   15be2:	2300      	movs	r3, #0
   15be4:	9307      	str	r3, [sp, #28]
   15be6:	ac37      	add	r4, sp, #220	; 0xdc
   15be8:	ee18 3a90 	vmov	r3, s17
   15bec:	2b00      	cmp	r3, #0
   15bee:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   15bf2:	db2b      	blt.n	15c4c <_svfprintf_r+0x189c>
   15bf4:	eeb0 ab48 	vmov.f64	d10, d8
   15bf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15bfa:	f023 0520 	bic.w	r5, r3, #32
   15bfe:	2300      	movs	r3, #0
   15c00:	9309      	str	r3, [sp, #36]	; 0x24
   15c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15c04:	2b61      	cmp	r3, #97	; 0x61
   15c06:	f47f aaad 	bne.w	15164 <_svfprintf_r+0xdb4>
   15c0a:	eeb0 0b4a 	vmov.f64	d0, d10
   15c0e:	a81b      	add	r0, sp, #108	; 0x6c
   15c10:	f001 ff3a 	bl	17a88 <frexp>
   15c14:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   15c18:	ee20 0b07 	vmul.f64	d0, d0, d7
   15c1c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   15c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15c24:	d101      	bne.n	15c2a <_svfprintf_r+0x187a>
   15c26:	2301      	movs	r3, #1
   15c28:	931b      	str	r3, [sp, #108]	; 0x6c
   15c2a:	4846      	ldr	r0, [pc, #280]	; (15d44 <_svfprintf_r+0x1994>)
   15c2c:	e721      	b.n	15a72 <_svfprintf_r+0x16c2>
   15c2e:	ee1b 1a10 	vmov	r1, s22
   15c32:	aa24      	add	r2, sp, #144	; 0x90
   15c34:	4658      	mov	r0, fp
   15c36:	f003 fa47 	bl	190c8 <__ssprint_r>
   15c3a:	2800      	cmp	r0, #0
   15c3c:	f47f a81d 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15c40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15c42:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15c44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15c48:	f7ff b94e 	b.w	14ee8 <_svfprintf_r+0xb38>
   15c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15c4e:	f023 0520 	bic.w	r5, r3, #32
   15c52:	232d      	movs	r3, #45	; 0x2d
   15c54:	9309      	str	r3, [sp, #36]	; 0x24
   15c56:	eeb1 ab48 	vneg.f64	d10, d8
   15c5a:	e7d2      	b.n	15c02 <_svfprintf_r+0x1852>
   15c5c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15c5e:	920c      	str	r2, [sp, #48]	; 0x30
   15c60:	2a00      	cmp	r2, #0
   15c62:	f006 0301 	and.w	r3, r6, #1
   15c66:	f340 810d 	ble.w	15e84 <_svfprintf_r+0x1ad4>
   15c6a:	9903      	ldr	r1, [sp, #12]
   15c6c:	430b      	orrs	r3, r1
   15c6e:	f040 80cf 	bne.w	15e10 <_svfprintf_r+0x1a60>
   15c72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15c74:	9305      	str	r3, [sp, #20]
   15c76:	2366      	movs	r3, #102	; 0x66
   15c78:	930b      	str	r3, [sp, #44]	; 0x2c
   15c7a:	0572      	lsls	r2, r6, #21
   15c7c:	f100 80a3 	bmi.w	15dc6 <_svfprintf_r+0x1a16>
   15c80:	9b05      	ldr	r3, [sp, #20]
   15c82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15c86:	9302      	str	r3, [sp, #8]
   15c88:	e76c      	b.n	15b64 <_svfprintf_r+0x17b4>
   15c8a:	ee1b 1a10 	vmov	r1, s22
   15c8e:	aa24      	add	r2, sp, #144	; 0x90
   15c90:	4658      	mov	r0, fp
   15c92:	f003 fa19 	bl	190c8 <__ssprint_r>
   15c96:	2800      	cmp	r0, #0
   15c98:	f47e afef 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15c9c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   15c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15ca0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   15ca2:	1b1c      	subs	r4, r3, r4
   15ca4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15ca8:	f7ff b936 	b.w	14f18 <_svfprintf_r+0xb68>
   15cac:	2358      	movs	r3, #88	; 0x58
   15cae:	e78d      	b.n	15bcc <_svfprintf_r+0x181c>
   15cb0:	2200      	movs	r2, #0
   15cb2:	9203      	str	r2, [sp, #12]
   15cb4:	f7fe bbda 	b.w	1446c <_svfprintf_r+0xbc>
   15cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15cba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15cbc:	189a      	adds	r2, r3, r2
   15cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15cc0:	9205      	str	r2, [sp, #20]
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	f340 80ab 	ble.w	15e1e <_svfprintf_r+0x1a6e>
   15cc8:	2367      	movs	r3, #103	; 0x67
   15cca:	930b      	str	r3, [sp, #44]	; 0x2c
   15ccc:	e7d5      	b.n	15c7a <_svfprintf_r+0x18ca>
   15cce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15cd0:	320f      	adds	r2, #15
   15cd2:	b2d2      	uxtb	r2, r2
   15cd4:	2101      	movs	r1, #1
   15cd6:	e618      	b.n	1590a <_svfprintf_r+0x155a>
   15cd8:	18a0      	adds	r0, r4, r2
   15cda:	e5fb      	b.n	158d4 <_svfprintf_r+0x1524>
   15cdc:	2900      	cmp	r1, #0
   15cde:	f040 80a8 	bne.w	15e32 <_svfprintf_r+0x1a82>
   15ce2:	2230      	movs	r2, #48	; 0x30
   15ce4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   15ce8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   15cec:	3330      	adds	r3, #48	; 0x30
   15cee:	f802 3b01 	strb.w	r3, [r2], #1
   15cf2:	ab1e      	add	r3, sp, #120	; 0x78
   15cf4:	1ad3      	subs	r3, r2, r3
   15cf6:	9314      	str	r3, [sp, #80]	; 0x50
   15cf8:	e649      	b.n	1598e <_svfprintf_r+0x15de>
   15cfa:	3301      	adds	r3, #1
   15cfc:	4912      	ldr	r1, [pc, #72]	; (15d48 <_svfprintf_r+0x1998>)
   15cfe:	f8ca 5004 	str.w	r5, [sl, #4]
   15d02:	442a      	add	r2, r5
   15d04:	2b07      	cmp	r3, #7
   15d06:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   15d0a:	f8ca 1000 	str.w	r1, [sl]
   15d0e:	f77f ac33 	ble.w	15578 <_svfprintf_r+0x11c8>
   15d12:	ee1b 1a10 	vmov	r1, s22
   15d16:	aa24      	add	r2, sp, #144	; 0x90
   15d18:	4658      	mov	r0, fp
   15d1a:	f003 f9d5 	bl	190c8 <__ssprint_r>
   15d1e:	2800      	cmp	r0, #0
   15d20:	f47e afab 	bne.w	14c7a <_svfprintf_r+0x8ca>
   15d24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   15d28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   15d2c:	e426      	b.n	1557c <_svfprintf_r+0x11cc>
   15d2e:	1c59      	adds	r1, r3, #1
   15d30:	4658      	mov	r0, fp
   15d32:	f7fa fc0d 	bl	10550 <_malloc_r>
   15d36:	4604      	mov	r4, r0
   15d38:	b350      	cbz	r0, 15d90 <_svfprintf_r+0x19e0>
   15d3a:	9007      	str	r0, [sp, #28]
   15d3c:	e754      	b.n	15be8 <_svfprintf_r+0x1838>
   15d3e:	bf00      	nop
   15d40:	20001204 	.word	0x20001204
   15d44:	200011f0 	.word	0x200011f0
   15d48:	20008a44 	.word	0x20008a44
   15d4c:	66666667 	.word	0x66666667
   15d50:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   15d54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   15d58:	f890 c00f 	ldrb.w	ip, [r0, #15]
   15d5c:	4561      	cmp	r1, ip
   15d5e:	4613      	mov	r3, r2
   15d60:	d10a      	bne.n	15d78 <_svfprintf_r+0x19c8>
   15d62:	f04f 0e30 	mov.w	lr, #48	; 0x30
   15d66:	f803 ec01 	strb.w	lr, [r3, #-1]
   15d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   15d6c:	1e59      	subs	r1, r3, #1
   15d6e:	9122      	str	r1, [sp, #136]	; 0x88
   15d70:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   15d74:	458c      	cmp	ip, r1
   15d76:	d0f6      	beq.n	15d66 <_svfprintf_r+0x19b6>
   15d78:	2939      	cmp	r1, #57	; 0x39
   15d7a:	bf16      	itet	ne
   15d7c:	3101      	addne	r1, #1
   15d7e:	7a81      	ldrbeq	r1, [r0, #10]
   15d80:	b2c9      	uxtbne	r1, r1
   15d82:	f803 1c01 	strb.w	r1, [r3, #-1]
   15d86:	e6ae      	b.n	15ae6 <_svfprintf_r+0x1736>
   15d88:	2300      	movs	r3, #0
   15d8a:	4690      	mov	r8, r2
   15d8c:	9307      	str	r3, [sp, #28]
   15d8e:	e760      	b.n	15c52 <_svfprintf_r+0x18a2>
   15d90:	ee1b 2a10 	vmov	r2, s22
   15d94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   15d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15d9c:	8193      	strh	r3, [r2, #12]
   15d9e:	f7fe bc16 	b.w	145ce <_svfprintf_r+0x21e>
   15da2:	07f5      	lsls	r5, r6, #31
   15da4:	f57f adfe 	bpl.w	159a4 <_svfprintf_r+0x15f4>
   15da8:	e5f8      	b.n	1599c <_svfprintf_r+0x15ec>
   15daa:	9305      	str	r3, [sp, #20]
   15dac:	e6ce      	b.n	15b4c <_svfprintf_r+0x179c>
   15dae:	eeb5 ab40 	vcmp.f64	d10, #0.0
   15db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   15db6:	f43f ad8b 	beq.w	158d0 <_svfprintf_r+0x1520>
   15dba:	f1c2 0201 	rsb	r2, r2, #1
   15dbe:	921b      	str	r2, [sp, #108]	; 0x6c
   15dc0:	e587      	b.n	158d2 <_svfprintf_r+0x1522>
   15dc2:	2367      	movs	r3, #103	; 0x67
   15dc4:	930b      	str	r3, [sp, #44]	; 0x2c
   15dc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   15dc8:	780b      	ldrb	r3, [r1, #0]
   15dca:	2bff      	cmp	r3, #255	; 0xff
   15dcc:	d079      	beq.n	15ec2 <_svfprintf_r+0x1b12>
   15dce:	2500      	movs	r5, #0
   15dd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15dd2:	4628      	mov	r0, r5
   15dd4:	e003      	b.n	15dde <_svfprintf_r+0x1a2e>
   15dd6:	3001      	adds	r0, #1
   15dd8:	3101      	adds	r1, #1
   15dda:	2bff      	cmp	r3, #255	; 0xff
   15ddc:	d008      	beq.n	15df0 <_svfprintf_r+0x1a40>
   15dde:	4293      	cmp	r3, r2
   15de0:	da06      	bge.n	15df0 <_svfprintf_r+0x1a40>
   15de2:	1ad2      	subs	r2, r2, r3
   15de4:	784b      	ldrb	r3, [r1, #1]
   15de6:	2b00      	cmp	r3, #0
   15de8:	d1f5      	bne.n	15dd6 <_svfprintf_r+0x1a26>
   15dea:	780b      	ldrb	r3, [r1, #0]
   15dec:	3501      	adds	r5, #1
   15dee:	e7f4      	b.n	15dda <_svfprintf_r+0x1a2a>
   15df0:	920c      	str	r2, [sp, #48]	; 0x30
   15df2:	9113      	str	r1, [sp, #76]	; 0x4c
   15df4:	900d      	str	r0, [sp, #52]	; 0x34
   15df6:	950f      	str	r5, [sp, #60]	; 0x3c
   15df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15dfc:	9916      	ldr	r1, [sp, #88]	; 0x58
   15dfe:	4413      	add	r3, r2
   15e00:	9a05      	ldr	r2, [sp, #20]
   15e02:	fb01 2303 	mla	r3, r1, r3, r2
   15e06:	9305      	str	r3, [sp, #20]
   15e08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15e0c:	9302      	str	r3, [sp, #8]
   15e0e:	e5d5      	b.n	159bc <_svfprintf_r+0x160c>
   15e10:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15e12:	18d3      	adds	r3, r2, r3
   15e14:	4419      	add	r1, r3
   15e16:	2366      	movs	r3, #102	; 0x66
   15e18:	9105      	str	r1, [sp, #20]
   15e1a:	930b      	str	r3, [sp, #44]	; 0x2c
   15e1c:	e72d      	b.n	15c7a <_svfprintf_r+0x18ca>
   15e1e:	f1c3 0301 	rsb	r3, r3, #1
   15e22:	441a      	add	r2, r3
   15e24:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   15e28:	9302      	str	r3, [sp, #8]
   15e2a:	2367      	movs	r3, #103	; 0x67
   15e2c:	9205      	str	r2, [sp, #20]
   15e2e:	930b      	str	r3, [sp, #44]	; 0x2c
   15e30:	e698      	b.n	15b64 <_svfprintf_r+0x17b4>
   15e32:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   15e36:	e759      	b.n	15cec <_svfprintf_r+0x193c>
   15e38:	9b03      	ldr	r3, [sp, #12]
   15e3a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   15e3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   15e42:	9305      	str	r3, [sp, #20]
   15e44:	e4b4      	b.n	157b0 <_svfprintf_r+0x1400>
   15e46:	ee18 3a90 	vmov	r3, s17
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	bfb4      	ite	lt
   15e4e:	212d      	movlt	r1, #45	; 0x2d
   15e50:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   15e54:	4c25      	ldr	r4, [pc, #148]	; (15eec <_svfprintf_r+0x1b3c>)
   15e56:	4b26      	ldr	r3, [pc, #152]	; (15ef0 <_svfprintf_r+0x1b40>)
   15e58:	bfb8      	it	lt
   15e5a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   15e5e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   15e62:	f7fe bc79 	b.w	14758 <_svfprintf_r+0x3a8>
   15e66:	9b03      	ldr	r3, [sp, #12]
   15e68:	9302      	str	r3, [sp, #8]
   15e6a:	9305      	str	r3, [sp, #20]
   15e6c:	2373      	movs	r3, #115	; 0x73
   15e6e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   15e72:	9003      	str	r0, [sp, #12]
   15e74:	900f      	str	r0, [sp, #60]	; 0x3c
   15e76:	900d      	str	r0, [sp, #52]	; 0x34
   15e78:	930b      	str	r3, [sp, #44]	; 0x2c
   15e7a:	f7fe bc7a 	b.w	14772 <_svfprintf_r+0x3c2>
   15e7e:	2302      	movs	r3, #2
   15e80:	9314      	str	r3, [sp, #80]	; 0x50
   15e82:	e584      	b.n	1598e <_svfprintf_r+0x15de>
   15e84:	9a03      	ldr	r2, [sp, #12]
   15e86:	4313      	orrs	r3, r2
   15e88:	d105      	bne.n	15e96 <_svfprintf_r+0x1ae6>
   15e8a:	2301      	movs	r3, #1
   15e8c:	2266      	movs	r2, #102	; 0x66
   15e8e:	9302      	str	r3, [sp, #8]
   15e90:	920b      	str	r2, [sp, #44]	; 0x2c
   15e92:	9305      	str	r3, [sp, #20]
   15e94:	e666      	b.n	15b64 <_svfprintf_r+0x17b4>
   15e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
   15e98:	3301      	adds	r3, #1
   15e9a:	441a      	add	r2, r3
   15e9c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   15ea0:	9302      	str	r3, [sp, #8]
   15ea2:	2366      	movs	r3, #102	; 0x66
   15ea4:	9205      	str	r2, [sp, #20]
   15ea6:	930b      	str	r3, [sp, #44]	; 0x2c
   15ea8:	e65c      	b.n	15b64 <_svfprintf_r+0x17b4>
   15eaa:	9a08      	ldr	r2, [sp, #32]
   15eac:	f899 3001 	ldrb.w	r3, [r9, #1]
   15eb0:	4689      	mov	r9, r1
   15eb2:	f852 1b04 	ldr.w	r1, [r2], #4
   15eb6:	9208      	str	r2, [sp, #32]
   15eb8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   15ebc:	9103      	str	r1, [sp, #12]
   15ebe:	f7fe bad3 	b.w	14468 <_svfprintf_r+0xb8>
   15ec2:	2300      	movs	r3, #0
   15ec4:	930f      	str	r3, [sp, #60]	; 0x3c
   15ec6:	930d      	str	r3, [sp, #52]	; 0x34
   15ec8:	e796      	b.n	15df8 <_svfprintf_r+0x1a48>
   15eca:	230c      	movs	r3, #12
   15ecc:	f8cb 3000 	str.w	r3, [fp]
   15ed0:	f04f 33ff 	mov.w	r3, #4294967295
   15ed4:	9304      	str	r3, [sp, #16]
   15ed6:	f7fe bb81 	b.w	145dc <_svfprintf_r+0x22c>
   15eda:	ee1b 2a10 	vmov	r2, s22
   15ede:	8993      	ldrh	r3, [r2, #12]
   15ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15ee4:	8193      	strh	r3, [r2, #12]
   15ee6:	f7fe bec8 	b.w	14c7a <_svfprintf_r+0x8ca>
   15eea:	bf00      	nop
   15eec:	200011ec 	.word	0x200011ec
   15ef0:	20000bdc 	.word	0x20000bdc

00015ef4 <__ssvfscanf_r>:
   15ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef8:	ed2d 8b02 	vpush	{d8}
   15efc:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
   15f00:	468b      	mov	fp, r1
   15f02:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   15f06:	af02      	add	r7, sp, #8
   15f08:	048c      	lsls	r4, r1, #18
   15f0a:	4681      	mov	r9, r0
   15f0c:	64fa      	str	r2, [r7, #76]	; 0x4c
   15f0e:	633b      	str	r3, [r7, #48]	; 0x30
   15f10:	d409      	bmi.n	15f26 <__ssvfscanf_r+0x32>
   15f12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   15f16:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   15f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   15f1e:	f8ab 100c 	strh.w	r1, [fp, #12]
   15f22:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   15f26:	2300      	movs	r3, #0
   15f28:	461c      	mov	r4, r3
   15f2a:	2208      	movs	r2, #8
   15f2c:	4619      	mov	r1, r3
   15f2e:	f107 0058 	add.w	r0, r7, #88	; 0x58
   15f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   15f34:	46a2      	mov	sl, r4
   15f36:	f7fc fa7b 	bl	12430 <memset>
   15f3a:	643c      	str	r4, [r7, #64]	; 0x40
   15f3c:	627c      	str	r4, [r7, #36]	; 0x24
   15f3e:	63bc      	str	r4, [r7, #56]	; 0x38
   15f40:	647c      	str	r4, [r7, #68]	; 0x44
   15f42:	4b83      	ldr	r3, [pc, #524]	; (16150 <__ssvfscanf_r+0x25c>)
   15f44:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
   15f48:	f7fc fb92 	bl	12670 <__locale_mb_cur_max>
   15f4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
   15f50:	4603      	mov	r3, r0
   15f52:	9200      	str	r2, [sp, #0]
   15f54:	f107 0154 	add.w	r1, r7, #84	; 0x54
   15f58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   15f5a:	4648      	mov	r0, r9
   15f5c:	47a0      	blx	r4
   15f5e:	1e05      	subs	r5, r0, #0
   15f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15f62:	db33      	blt.n	15fcc <__ssvfscanf_r+0xd8>
   15f64:	442b      	add	r3, r5
   15f66:	64fb      	str	r3, [r7, #76]	; 0x4c
   15f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15f6a:	462e      	mov	r6, r5
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	f000 80b6 	beq.w	160de <__ssvfscanf_r+0x1ea>
   15f72:	2d01      	cmp	r5, #1
   15f74:	d038      	beq.n	15fe8 <__ssvfscanf_r+0xf4>
   15f76:	2b25      	cmp	r3, #37	; 0x25
   15f78:	d040      	beq.n	15ffc <__ssvfscanf_r+0x108>
   15f7a:	2d00      	cmp	r5, #0
   15f7c:	d0e1      	beq.n	15f42 <__ssvfscanf_r+0x4e>
   15f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15f80:	1b9e      	subs	r6, r3, r6
   15f82:	f8db 3004 	ldr.w	r3, [fp, #4]
   15f86:	1e74      	subs	r4, r6, #1
   15f88:	2b00      	cmp	r3, #0
   15f8a:	f340 8098 	ble.w	160be <__ssvfscanf_r+0x1ca>
   15f8e:	f8db 1000 	ldr.w	r1, [fp]
   15f92:	f894 c001 	ldrb.w	ip, [r4, #1]
   15f96:	f891 e000 	ldrb.w	lr, [r1]
   15f9a:	1ca3      	adds	r3, r4, #2
   15f9c:	eb0a 0003 	add.w	r0, sl, r3
   15fa0:	45e6      	cmp	lr, ip
   15fa2:	f101 0101 	add.w	r1, r1, #1
   15fa6:	eba3 0206 	sub.w	r2, r3, r6
   15faa:	f104 0401 	add.w	r4, r4, #1
   15fae:	eba0 0006 	sub.w	r0, r0, r6
   15fb2:	f040 8094 	bne.w	160de <__ssvfscanf_r+0x1ea>
   15fb6:	f8db 3004 	ldr.w	r3, [fp, #4]
   15fba:	f8cb 1000 	str.w	r1, [fp]
   15fbe:	3b01      	subs	r3, #1
   15fc0:	42aa      	cmp	r2, r5
   15fc2:	f8cb 3004 	str.w	r3, [fp, #4]
   15fc6:	dbdf      	blt.n	15f88 <__ssvfscanf_r+0x94>
   15fc8:	4682      	mov	sl, r0
   15fca:	e7ba      	b.n	15f42 <__ssvfscanf_r+0x4e>
   15fcc:	3301      	adds	r3, #1
   15fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   15fd0:	2208      	movs	r2, #8
   15fd2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   15fd6:	2100      	movs	r1, #0
   15fd8:	f107 0058 	add.w	r0, r7, #88	; 0x58
   15fdc:	657b      	str	r3, [r7, #84]	; 0x54
   15fde:	f7fc fa27 	bl	12430 <memset>
   15fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	d07a      	beq.n	160de <__ssvfscanf_r+0x1ea>
   15fe8:	4e5a      	ldr	r6, [pc, #360]	; (16154 <__ssvfscanf_r+0x260>)
   15fea:	5cf2      	ldrb	r2, [r6, r3]
   15fec:	0710      	lsls	r0, r2, #28
   15fee:	f100 851c 	bmi.w	16a2a <__ssvfscanf_r+0xb36>
   15ff2:	2b25      	cmp	r3, #37	; 0x25
   15ff4:	f040 8086 	bne.w	16104 <__ssvfscanf_r+0x210>
   15ff8:	2501      	movs	r5, #1
   15ffa:	462e      	mov	r6, r5
   15ffc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   15ffe:	2400      	movs	r4, #0
   16000:	7802      	ldrb	r2, [r0, #0]
   16002:	46a0      	mov	r8, r4
   16004:	f1a2 0325 	sub.w	r3, r2, #37	; 0x25
   16008:	1c41      	adds	r1, r0, #1
   1600a:	2b55      	cmp	r3, #85	; 0x55
   1600c:	d867      	bhi.n	160de <__ssvfscanf_r+0x1ea>
   1600e:	e8df f013 	tbh	[pc, r3, lsl #1]
   16012:	070a      	.short	0x070a
   16014:	00660066 	.word	0x00660066
   16018:	00660066 	.word	0x00660066
   1601c:	00660701 	.word	0x00660701
   16020:	00660066 	.word	0x00660066
   16024:	00660066 	.word	0x00660066
   16028:	060c060c 	.word	0x060c060c
   1602c:	060c060c 	.word	0x060c060c
   16030:	060c060c 	.word	0x060c060c
   16034:	060c060c 	.word	0x060c060c
   16038:	060c060c 	.word	0x060c060c
   1603c:	00660066 	.word	0x00660066
   16040:	00660066 	.word	0x00660066
   16044:	00660066 	.word	0x00660066
   16048:	06180066 	.word	0x06180066
   1604c:	048e0066 	.word	0x048e0066
   16050:	061804c9 	.word	0x061804c9
   16054:	06180618 	.word	0x06180618
   16058:	00660066 	.word	0x00660066
   1605c:	00660066 	.word	0x00660066
   16060:	00660082 	.word	0x00660082
   16064:	04bf0066 	.word	0x04bf0066
   16068:	00660066 	.word	0x00660066
   1606c:	00890066 	.word	0x00890066
   16070:	00660066 	.word	0x00660066
   16074:	00660066 	.word	0x00660066
   16078:	0066066b 	.word	0x0066066b
   1607c:	06dd0066 	.word	0x06dd0066
   16080:	00660066 	.word	0x00660066
   16084:	00660066 	.word	0x00660066
   16088:	06180066 	.word	0x06180066
   1608c:	04900066 	.word	0x04900066
   16090:	061804cb 	.word	0x061804cb
   16094:	06180618 	.word	0x06180618
   16098:	06d206be 	.word	0x06d206be
   1609c:	00660082 	.word	0x00660082
   160a0:	06f306e7 	.word	0x06f306e7
   160a4:	04c106ac 	.word	0x04c106ac
   160a8:	006606da 	.word	0x006606da
   160ac:	008b0066 	.word	0x008b0066
   160b0:	06ca007d 	.word	0x06ca007d
   160b4:	00660066 	.word	0x00660066
   160b8:	0066066b 	.word	0x0066066b
   160bc:	007d      	.short	0x007d
   160be:	4659      	mov	r1, fp
   160c0:	4648      	mov	r0, r9
   160c2:	f003 f8c1 	bl	19248 <__ssrefill_r>
   160c6:	2800      	cmp	r0, #0
   160c8:	f43f af61 	beq.w	15f8e <__ssvfscanf_r+0x9a>
   160cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   160ce:	2b00      	cmp	r3, #0
   160d0:	f001 8052 	beq.w	17178 <__ssvfscanf_r+0x1284>
   160d4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   160d8:	065a      	lsls	r2, r3, #25
   160da:	f101 804d 	bmi.w	17178 <__ssvfscanf_r+0x1284>
   160de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   160e0:	b143      	cbz	r3, 160f4 <__ssvfscanf_r+0x200>
   160e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   160e4:	f8d3 8000 	ldr.w	r8, [r3]
   160e8:	f1b8 0f00 	cmp.w	r8, #0
   160ec:	d002      	beq.n	160f4 <__ssvfscanf_r+0x200>
   160ee:	4640      	mov	r0, r8
   160f0:	f7fa fa26 	bl	10540 <free>
   160f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
   160f6:	f507 7735 	add.w	r7, r7, #724	; 0x2d4
   160fa:	46bd      	mov	sp, r7
   160fc:	ecbd 8b02 	vpop	{d8}
   16100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16106:	2501      	movs	r5, #1
   16108:	1e5e      	subs	r6, r3, #1
   1610a:	e73a      	b.n	15f82 <__ssvfscanf_r+0x8e>
   1610c:	0723      	lsls	r3, r4, #28
   1610e:	d1e6      	bne.n	160de <__ssvfscanf_r+0x1ea>
   16110:	7842      	ldrb	r2, [r0, #1]
   16112:	4608      	mov	r0, r1
   16114:	e776      	b.n	16004 <__ssvfscanf_r+0x110>
   16116:	0722      	lsls	r2, r4, #28
   16118:	d1e1      	bne.n	160de <__ssvfscanf_r+0x1ea>
   1611a:	7842      	ldrb	r2, [r0, #1]
   1611c:	f044 0402 	orr.w	r4, r4, #2
   16120:	4608      	mov	r0, r1
   16122:	e76f      	b.n	16004 <__ssvfscanf_r+0x110>
   16124:	f044 0401 	orr.w	r4, r4, #1
   16128:	64f9      	str	r1, [r7, #76]	; 0x4c
   1612a:	2502      	movs	r5, #2
   1612c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16130:	2b00      	cmp	r3, #0
   16132:	f340 8408 	ble.w	16946 <__ssvfscanf_r+0xa52>
   16136:	0660      	lsls	r0, r4, #25
   16138:	f140 840f 	bpl.w	1695a <__ssvfscanf_r+0xa66>
   1613c:	1e6b      	subs	r3, r5, #1
   1613e:	2b03      	cmp	r3, #3
   16140:	f201 80eb 	bhi.w	1731a <__ssvfscanf_r+0x1426>
   16144:	e8df f013 	tbh	[pc, r3, lsl #1]
   16148:	01f1027b 	.word	0x01f1027b
   1614c:	0008014b 	.word	0x0008014b
   16150:	20008f74 	.word	0x20008f74
   16154:	20001055 	.word	0x20001055
   16158:	4648      	mov	r0, r9
   1615a:	f001 fc8f 	bl	17a7c <_localeconv_r>
   1615e:	6803      	ldr	r3, [r0, #0]
   16160:	623b      	str	r3, [r7, #32]
   16162:	f108 33ff 	add.w	r3, r8, #4294967295
   16166:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   1616a:	f240 855a 	bls.w	16c22 <__ssvfscanf_r+0xd2e>
   1616e:	f46f 75ae 	mvn.w	r5, #348	; 0x15c
   16172:	eb08 0305 	add.w	r3, r8, r5
   16176:	613b      	str	r3, [r7, #16]
   16178:	f240 185d 	movw	r8, #349	; 0x15d
   1617c:	2600      	movs	r6, #0
   1617e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   16182:	ee08 9a10 	vmov	s16, r9
   16186:	e9c7 6605 	strd	r6, r6, [r7, #20]
   1618a:	63fe      	str	r6, [r7, #60]	; 0x3c
   1618c:	637e      	str	r6, [r7, #52]	; 0x34
   1618e:	61fe      	str	r6, [r7, #28]
   16190:	64be      	str	r6, [r7, #72]	; 0x48
   16192:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
   16196:	62bb      	str	r3, [r7, #40]	; 0x28
   16198:	461d      	mov	r5, r3
   1619a:	4646      	mov	r6, r8
   1619c:	f8db 1000 	ldr.w	r1, [fp]
   161a0:	780a      	ldrb	r2, [r1, #0]
   161a2:	f1a2 032b 	sub.w	r3, r2, #43	; 0x2b
   161a6:	2b4e      	cmp	r3, #78	; 0x4e
   161a8:	d850      	bhi.n	1624c <__ssvfscanf_r+0x358>
   161aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   161ae:	037e      	.short	0x037e
   161b0:	037e004f 	.word	0x037e004f
   161b4:	004f004f 	.word	0x004f004f
   161b8:	00a600a3 	.word	0x00a600a3
   161bc:	00a600a6 	.word	0x00a600a6
   161c0:	00a600a6 	.word	0x00a600a6
   161c4:	00a600a6 	.word	0x00a600a6
   161c8:	00a600a6 	.word	0x00a600a6
   161cc:	004f004f 	.word	0x004f004f
   161d0:	004f004f 	.word	0x004f004f
   161d4:	004f004f 	.word	0x004f004f
   161d8:	0374004f 	.word	0x0374004f
   161dc:	030b030b 	.word	0x030b030b
   161e0:	039e030b 	.word	0x039e030b
   161e4:	004f0394 	.word	0x004f0394
   161e8:	0384004f 	.word	0x0384004f
   161ec:	004f004f 	.word	0x004f004f
   161f0:	004f004f 	.word	0x004f004f
   161f4:	004f035d 	.word	0x004f035d
   161f8:	004f033a 	.word	0x004f033a
   161fc:	004f004f 	.word	0x004f004f
   16200:	004f0333 	.word	0x004f0333
   16204:	004f004f 	.word	0x004f004f
   16208:	036d031e 	.word	0x036d031e
   1620c:	004f004f 	.word	0x004f004f
   16210:	004f004f 	.word	0x004f004f
   16214:	004f004f 	.word	0x004f004f
   16218:	0374004f 	.word	0x0374004f
   1621c:	030b030b 	.word	0x030b030b
   16220:	039e030b 	.word	0x039e030b
   16224:	004f0394 	.word	0x004f0394
   16228:	0384004f 	.word	0x0384004f
   1622c:	004f004f 	.word	0x004f004f
   16230:	004f004f 	.word	0x004f004f
   16234:	004f035d 	.word	0x004f035d
   16238:	004f033a 	.word	0x004f033a
   1623c:	004f004f 	.word	0x004f004f
   16240:	004f0333 	.word	0x004f0333
   16244:	004f004f 	.word	0x004f004f
   16248:	036d031e 	.word	0x036d031e
   1624c:	05a0      	lsls	r0, r4, #22
   1624e:	d56f      	bpl.n	16330 <__ssvfscanf_r+0x43c>
   16250:	6a38      	ldr	r0, [r7, #32]
   16252:	7803      	ldrb	r3, [r0, #0]
   16254:	4293      	cmp	r3, r2
   16256:	d16b      	bne.n	16330 <__ssvfscanf_r+0x43c>
   16258:	e9c7 4502 	strd	r4, r5, [r7, #8]
   1625c:	607e      	str	r6, [r7, #4]
   1625e:	4681      	mov	r9, r0
   16260:	ee18 6a10 	vmov	r6, s16
   16264:	f04f 0800 	mov.w	r8, #0
   16268:	465c      	mov	r4, fp
   1626a:	e007      	b.n	1627c <__ssvfscanf_r+0x388>
   1626c:	6021      	str	r1, [r4, #0]
   1626e:	f891 e000 	ldrb.w	lr, [r1]
   16272:	f899 0000 	ldrb.w	r0, [r9]
   16276:	4586      	cmp	lr, r0
   16278:	d11c      	bne.n	162b4 <__ssvfscanf_r+0x3c0>
   1627a:	46da      	mov	sl, fp
   1627c:	f819 0f01 	ldrb.w	r0, [r9, #1]!
   16280:	4645      	mov	r5, r8
   16282:	f10a 0b01 	add.w	fp, sl, #1
   16286:	3101      	adds	r1, #1
   16288:	f108 0801 	add.w	r8, r8, #1
   1628c:	2800      	cmp	r0, #0
   1628e:	f000 8664 	beq.w	16f5a <__ssvfscanf_r+0x1066>
   16292:	6860      	ldr	r0, [r4, #4]
   16294:	3801      	subs	r0, #1
   16296:	2800      	cmp	r0, #0
   16298:	6060      	str	r0, [r4, #4]
   1629a:	dce7      	bgt.n	1626c <__ssvfscanf_r+0x378>
   1629c:	4621      	mov	r1, r4
   1629e:	4630      	mov	r0, r6
   162a0:	f002 ffd2 	bl	19248 <__ssrefill_r>
   162a4:	b930      	cbnz	r0, 162b4 <__ssvfscanf_r+0x3c0>
   162a6:	6821      	ldr	r1, [r4, #0]
   162a8:	f899 0000 	ldrb.w	r0, [r9]
   162ac:	f891 e000 	ldrb.w	lr, [r1]
   162b0:	4586      	cmp	lr, r0
   162b2:	d0e2      	beq.n	1627a <__ssvfscanf_r+0x386>
   162b4:	46a3      	mov	fp, r4
   162b6:	6a3a      	ldr	r2, [r7, #32]
   162b8:	68bc      	ldr	r4, [r7, #8]
   162ba:	613d      	str	r5, [r7, #16]
   162bc:	462b      	mov	r3, r5
   162be:	46b1      	mov	r9, r6
   162c0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   162c2:	68fd      	ldr	r5, [r7, #12]
   162c4:	64bd      	str	r5, [r7, #72]	; 0x48
   162c6:	3301      	adds	r3, #1
   162c8:	465d      	mov	r5, fp
   162ca:	eb02 0803 	add.w	r8, r2, r3
   162ce:	46b3      	mov	fp, r6
   162d0:	4626      	mov	r6, r4
   162d2:	4614      	mov	r4, r2
   162d4:	f818 1d01 	ldrb.w	r1, [r8, #-1]!
   162d8:	462a      	mov	r2, r5
   162da:	4648      	mov	r0, r9
   162dc:	f002 ff74 	bl	191c8 <_sungetc_r>
   162e0:	4544      	cmp	r4, r8
   162e2:	d1f7      	bne.n	162d4 <__ssvfscanf_r+0x3e0>
   162e4:	693b      	ldr	r3, [r7, #16]
   162e6:	4634      	mov	r4, r6
   162e8:	ebaa 0a03 	sub.w	sl, sl, r3
   162ec:	465e      	mov	r6, fp
   162ee:	46ab      	mov	fp, r5
   162f0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   162f2:	e020      	b.n	16336 <__ssvfscanf_r+0x442>
   162f4:	05e0      	lsls	r0, r4, #23
   162f6:	f100 8501 	bmi.w	16cfc <__ssvfscanf_r+0xe08>
   162fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   162fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   162fe:	42d9      	cmn	r1, r3
   16300:	d116      	bne.n	16330 <__ssvfscanf_r+0x43c>
   16302:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   16306:	f805 2b01 	strb.w	r2, [r5], #1
   1630a:	3e01      	subs	r6, #1
   1630c:	f8db 3004 	ldr.w	r3, [fp, #4]
   16310:	3b01      	subs	r3, #1
   16312:	2b00      	cmp	r3, #0
   16314:	f10a 0a01 	add.w	sl, sl, #1
   16318:	f8cb 3004 	str.w	r3, [fp, #4]
   1631c:	f340 836f 	ble.w	169fe <__ssvfscanf_r+0xb0a>
   16320:	f8db 3000 	ldr.w	r3, [fp]
   16324:	3301      	adds	r3, #1
   16326:	f8cb 3000 	str.w	r3, [fp]
   1632a:	2e00      	cmp	r6, #0
   1632c:	f47f af36 	bne.w	1619c <__ssvfscanf_r+0x2a8>
   16330:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   16332:	ee18 9a10 	vmov	r9, s16
   16336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16338:	2b00      	cmp	r3, #0
   1633a:	f040 82dc 	bne.w	168f6 <__ssvfscanf_r+0xa02>
   1633e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16340:	3b01      	subs	r3, #1
   16342:	2b01      	cmp	r3, #1
   16344:	f241 8016 	bls.w	17374 <__ssvfscanf_r+0x1480>
   16348:	1e73      	subs	r3, r6, #1
   1634a:	2b06      	cmp	r3, #6
   1634c:	f240 8627 	bls.w	16f9e <__ssvfscanf_r+0x10aa>
   16350:	05e3      	lsls	r3, r4, #23
   16352:	d51b      	bpl.n	1638c <__ssvfscanf_r+0x498>
   16354:	0566      	lsls	r6, r4, #21
   16356:	f101 80b5 	bmi.w	174c4 <__ssvfscanf_r+0x15d0>
   1635a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1635e:	2965      	cmp	r1, #101	; 0x65
   16360:	f105 33ff 	add.w	r3, r5, #4294967295
   16364:	f10a 36ff 	add.w	r6, sl, #4294967295
   16368:	d00a      	beq.n	16380 <__ssvfscanf_r+0x48c>
   1636a:	2945      	cmp	r1, #69	; 0x45
   1636c:	d008      	beq.n	16380 <__ssvfscanf_r+0x48c>
   1636e:	465a      	mov	r2, fp
   16370:	4648      	mov	r0, r9
   16372:	f002 ff29 	bl	191c8 <_sungetc_r>
   16376:	f815 1c02 	ldrb.w	r1, [r5, #-2]
   1637a:	f1aa 0602 	sub.w	r6, sl, #2
   1637e:	1eab      	subs	r3, r5, #2
   16380:	465a      	mov	r2, fp
   16382:	4648      	mov	r0, r9
   16384:	46b2      	mov	sl, r6
   16386:	461d      	mov	r5, r3
   16388:	f002 ff1e 	bl	191c8 <_sungetc_r>
   1638c:	f014 0210 	ands.w	r2, r4, #16
   16390:	f47f add7 	bne.w	15f42 <__ssvfscanf_r+0x4e>
   16394:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   16398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1639c:	702a      	strb	r2, [r5, #0]
   1639e:	f000 84d2 	beq.w	16d46 <__ssvfscanf_r+0xe52>
   163a2:	69bb      	ldr	r3, [r7, #24]
   163a4:	2b00      	cmp	r3, #0
   163a6:	f040 872c 	bne.w	17202 <__ssvfscanf_r+0x130e>
   163aa:	4648      	mov	r0, r9
   163ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   163ae:	2200      	movs	r2, #0
   163b0:	f7fb fcba 	bl	11d28 <_strtod_r>
   163b4:	07e0      	lsls	r0, r4, #31
   163b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   163b8:	f100 85c9 	bmi.w	16f4e <__ssvfscanf_r+0x105a>
   163bc:	07a1      	lsls	r1, r4, #30
   163be:	f100 85c6 	bmi.w	16f4e <__ssvfscanf_r+0x105a>
   163c2:	eeb4 0b40 	vcmp.f64	d0, d0
   163c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   163ca:	f853 4b04 	ldr.w	r4, [r3], #4
   163ce:	f180 86f4 	bvs.w	171ba <__ssvfscanf_r+0x12c6>
   163d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   163d6:	633b      	str	r3, [r7, #48]	; 0x30
   163d8:	ed84 0a00 	vstr	s0, [r4]
   163dc:	e3a2      	b.n	16b24 <__ssvfscanf_r+0xc30>
   163de:	f108 33ff 	add.w	r3, r8, #4294967295
   163e2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
   163e6:	f240 83a2 	bls.w	16b2e <__ssvfscanf_r+0xc3a>
   163ea:	f46f 72ae 	mvn.w	r2, #348	; 0x15c
   163ee:	eb08 0302 	add.w	r3, r8, r2
   163f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   163f4:	f240 185d 	movw	r8, #349	; 0x15d
   163f8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   163fc:	2200      	movs	r2, #0
   163fe:	6bbe      	ldr	r6, [r7, #56]	; 0x38
   16400:	62bb      	str	r3, [r7, #40]	; 0x28
   16402:	4659      	mov	r1, fp
   16404:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
   16408:	46d3      	mov	fp, sl
   1640a:	461d      	mov	r5, r3
   1640c:	4692      	mov	sl, r2
   1640e:	680a      	ldr	r2, [r1, #0]
   16410:	7810      	ldrb	r0, [r2, #0]
   16412:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   16416:	2b4d      	cmp	r3, #77	; 0x4d
   16418:	d860      	bhi.n	164dc <__ssvfscanf_r+0x5e8>
   1641a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1641e:	0282      	.short	0x0282
   16420:	0282005f 	.word	0x0282005f
   16424:	005f005f 	.word	0x005f005f
   16428:	01e002cd 	.word	0x01e002cd
   1642c:	01e001e0 	.word	0x01e001e0
   16430:	01e001e0 	.word	0x01e001e0
   16434:	01e001e0 	.word	0x01e001e0
   16438:	026f026f 	.word	0x026f026f
   1643c:	005f005f 	.word	0x005f005f
   16440:	005f005f 	.word	0x005f005f
   16444:	005f005f 	.word	0x005f005f
   16448:	004e005f 	.word	0x004e005f
   1644c:	004e004e 	.word	0x004e004e
   16450:	004e004e 	.word	0x004e004e
   16454:	005f004e 	.word	0x005f004e
   16458:	005f005f 	.word	0x005f005f
   1645c:	005f005f 	.word	0x005f005f
   16460:	005f005f 	.word	0x005f005f
   16464:	005f005f 	.word	0x005f005f
   16468:	005f005f 	.word	0x005f005f
   1646c:	005f005f 	.word	0x005f005f
   16470:	005f005f 	.word	0x005f005f
   16474:	005f005f 	.word	0x005f005f
   16478:	005f0276 	.word	0x005f0276
   1647c:	005f005f 	.word	0x005f005f
   16480:	005f005f 	.word	0x005f005f
   16484:	005f005f 	.word	0x005f005f
   16488:	004e005f 	.word	0x004e005f
   1648c:	004e004e 	.word	0x004e004e
   16490:	004e004e 	.word	0x004e004e
   16494:	005f004e 	.word	0x005f004e
   16498:	005f005f 	.word	0x005f005f
   1649c:	005f005f 	.word	0x005f005f
   164a0:	005f005f 	.word	0x005f005f
   164a4:	005f005f 	.word	0x005f005f
   164a8:	005f005f 	.word	0x005f005f
   164ac:	005f005f 	.word	0x005f005f
   164b0:	005f005f 	.word	0x005f005f
   164b4:	005f005f 	.word	0x005f005f
   164b8:	0276      	.short	0x0276
   164ba:	2e0a      	cmp	r6, #10
   164bc:	dd0e      	ble.n	164dc <__ssvfscanf_r+0x5e8>
   164be:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   164c2:	684b      	ldr	r3, [r1, #4]
   164c4:	f805 0b01 	strb.w	r0, [r5], #1
   164c8:	3b01      	subs	r3, #1
   164ca:	2b00      	cmp	r3, #0
   164cc:	604b      	str	r3, [r1, #4]
   164ce:	f340 828d 	ble.w	169ec <__ssvfscanf_r+0xaf8>
   164d2:	3201      	adds	r2, #1
   164d4:	600a      	str	r2, [r1, #0]
   164d6:	f1b8 0801 	subs.w	r8, r8, #1
   164da:	d198      	bne.n	1640e <__ssvfscanf_r+0x51a>
   164dc:	05e0      	lsls	r0, r4, #23
   164de:	46d0      	mov	r8, sl
   164e0:	63be      	str	r6, [r7, #56]	; 0x38
   164e2:	46da      	mov	sl, fp
   164e4:	468b      	mov	fp, r1
   164e6:	d507      	bpl.n	164f8 <__ssvfscanf_r+0x604>
   164e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164ea:	429d      	cmp	r5, r3
   164ec:	f200 8422 	bhi.w	16d34 <__ssvfscanf_r+0xe40>
   164f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164f2:	429d      	cmp	r5, r3
   164f4:	f43f adf3 	beq.w	160de <__ssvfscanf_r+0x1ea>
   164f8:	f014 0210 	ands.w	r2, r4, #16
   164fc:	d110      	bne.n	16520 <__ssvfscanf_r+0x62c>
   164fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16502:	6afe      	ldr	r6, [r7, #44]	; 0x2c
   16504:	702a      	strb	r2, [r5, #0]
   16506:	4648      	mov	r0, r9
   16508:	47b0      	blx	r6
   1650a:	06a1      	lsls	r1, r4, #26
   1650c:	f140 8408 	bpl.w	16d20 <__ssvfscanf_r+0xe2c>
   16510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16512:	f853 2b04 	ldr.w	r2, [r3], #4
   16516:	6010      	str	r0, [r2, #0]
   16518:	633b      	str	r3, [r7, #48]	; 0x30
   1651a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1651c:	3301      	adds	r3, #1
   1651e:	647b      	str	r3, [r7, #68]	; 0x44
   16520:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16522:	1aed      	subs	r5, r5, r3
   16524:	4445      	add	r5, r8
   16526:	44aa      	add	sl, r5
   16528:	e50b      	b.n	15f42 <__ssvfscanf_r+0x4e>
   1652a:	f1b8 0f00 	cmp.w	r8, #0
   1652e:	bf08      	it	eq
   16530:	f04f 38ff 	moveq.w	r8, #4294967295
   16534:	07e0      	lsls	r0, r4, #31
   16536:	f140 8295 	bpl.w	16a64 <__ssvfscanf_r+0xb70>
   1653a:	f014 0310 	ands.w	r3, r4, #16
   1653e:	637b      	str	r3, [r7, #52]	; 0x34
   16540:	f040 8474 	bne.w	16e2c <__ssvfscanf_r+0xf38>
   16544:	0621      	lsls	r1, r4, #24
   16546:	f140 8666 	bpl.w	17216 <__ssvfscanf_r+0x1322>
   1654a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1654c:	f854 3b04 	ldr.w	r3, [r4], #4
   16550:	63fb      	str	r3, [r7, #60]	; 0x3c
   16552:	2b00      	cmp	r3, #0
   16554:	f43f adc3 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16558:	2080      	movs	r0, #128	; 0x80
   1655a:	f7f9 ffe9 	bl	10530 <malloc>
   1655e:	64b8      	str	r0, [r7, #72]	; 0x48
   16560:	2800      	cmp	r0, #0
   16562:	f000 8778 	beq.w	17456 <__ssvfscanf_r+0x1562>
   16566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16568:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1656a:	601a      	str	r2, [r3, #0]
   1656c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1656e:	88d5      	ldrh	r5, [r2, #6]
   16570:	8893      	ldrh	r3, [r2, #4]
   16572:	429d      	cmp	r5, r3
   16574:	f080 8552 	bcs.w	1701c <__ssvfscanf_r+0x1128>
   16578:	6810      	ldr	r0, [r2, #0]
   1657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1657c:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16582:	633c      	str	r4, [r7, #48]	; 0x30
   16584:	3501      	adds	r5, #1
   16586:	80dd      	strh	r5, [r3, #6]
   16588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1658a:	62bb      	str	r3, [r7, #40]	; 0x28
   1658c:	2320      	movs	r3, #32
   1658e:	623b      	str	r3, [r7, #32]
   16590:	f8db 3000 	ldr.w	r3, [fp]
   16594:	4eb1      	ldr	r6, [pc, #708]	; (1685c <__ssvfscanf_r+0x968>)
   16596:	781b      	ldrb	r3, [r3, #0]
   16598:	5cf3      	ldrb	r3, [r6, r3]
   1659a:	f013 0308 	ands.w	r3, r3, #8
   1659e:	f040 84bb 	bne.w	16f18 <__ssvfscanf_r+0x1024>
   165a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   165a4:	627e      	str	r6, [r7, #36]	; 0x24
   165a6:	461d      	mov	r5, r3
   165a8:	f7fc f862 	bl	12670 <__locale_mb_cur_max>
   165ac:	42a8      	cmp	r0, r5
   165ae:	f43f ad8d 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   165b2:	e9db 3200 	ldrd	r3, r2, [fp]
   165b6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   165ba:	f813 1b01 	ldrb.w	r1, [r3], #1
   165be:	5541      	strb	r1, [r0, r5]
   165c0:	3a01      	subs	r2, #1
   165c2:	2c03      	cmp	r4, #3
   165c4:	e9cb 3200 	strd	r3, r2, [fp]
   165c8:	f105 0501 	add.w	r5, r5, #1
   165cc:	f107 0668 	add.w	r6, r7, #104	; 0x68
   165d0:	d102      	bne.n	165d8 <__ssvfscanf_r+0x6e4>
   165d2:	6833      	ldr	r3, [r6, #0]
   165d4:	2b04      	cmp	r3, #4
   165d6:	d004      	beq.n	165e2 <__ssvfscanf_r+0x6ee>
   165d8:	2208      	movs	r2, #8
   165da:	2100      	movs	r1, #0
   165dc:	4630      	mov	r0, r6
   165de:	f7fb ff27 	bl	12430 <memset>
   165e2:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   165e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   165e8:	9600      	str	r6, [sp, #0]
   165ea:	462b      	mov	r3, r5
   165ec:	4648      	mov	r0, r9
   165ee:	f002 fc17 	bl	18e20 <_mbrtowc_r>
   165f2:	1c42      	adds	r2, r0, #1
   165f4:	4604      	mov	r4, r0
   165f6:	f43f ad69 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   165fa:	2800      	cmp	r0, #0
   165fc:	f040 8478 	bne.w	16ef0 <__ssvfscanf_r+0xffc>
   16600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16602:	6018      	str	r0, [r3, #0]
   16604:	f002 fc68 	bl	18ed8 <iswspace>
   16608:	2800      	cmp	r0, #0
   1660a:	f040 865c 	bne.w	172c6 <__ssvfscanf_r+0x13d2>
   1660e:	44aa      	add	sl, r5
   16610:	f108 38ff 	add.w	r8, r8, #4294967295
   16614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16616:	2b00      	cmp	r3, #0
   16618:	f040 8633 	bne.w	17282 <__ssvfscanf_r+0x138e>
   1661c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1661e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16620:	3304      	adds	r3, #4
   16622:	64bb      	str	r3, [r7, #72]	; 0x48
   16624:	2a00      	cmp	r2, #0
   16626:	f000 862c 	beq.w	17282 <__ssvfscanf_r+0x138e>
   1662a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1662c:	1a9d      	subs	r5, r3, r2
   1662e:	6a3b      	ldr	r3, [r7, #32]
   16630:	ebb3 0fa5 	cmp.w	r3, r5, asr #2
   16634:	f240 8756 	bls.w	174e4 <__ssvfscanf_r+0x15f0>
   16638:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   1663a:	f000 bc5c 	b.w	16ef6 <__ssvfscanf_r+0x1002>
   1663e:	f1b8 0f00 	cmp.w	r8, #0
   16642:	bf08      	it	eq
   16644:	f04f 38ff 	moveq.w	r8, #4294967295
   16648:	07e0      	lsls	r0, r4, #31
   1664a:	f140 827b 	bpl.w	16b44 <__ssvfscanf_r+0xc50>
   1664e:	f014 0310 	ands.w	r3, r4, #16
   16652:	62bb      	str	r3, [r7, #40]	; 0x28
   16654:	f040 83f3 	bne.w	16e3e <__ssvfscanf_r+0xf4a>
   16658:	0621      	lsls	r1, r4, #24
   1665a:	f140 85ed 	bpl.w	17238 <__ssvfscanf_r+0x1344>
   1665e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
   16660:	f856 3b04 	ldr.w	r3, [r6], #4
   16664:	623b      	str	r3, [r7, #32]
   16666:	2b00      	cmp	r3, #0
   16668:	f43f ad39 	beq.w	160de <__ssvfscanf_r+0x1ea>
   1666c:	2080      	movs	r0, #128	; 0x80
   1666e:	f7f9 ff5f 	bl	10530 <malloc>
   16672:	4604      	mov	r4, r0
   16674:	2800      	cmp	r0, #0
   16676:	f000 86ee 	beq.w	17456 <__ssvfscanf_r+0x1562>
   1667a:	6a3b      	ldr	r3, [r7, #32]
   1667c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1667e:	6018      	str	r0, [r3, #0]
   16680:	88d5      	ldrh	r5, [r2, #6]
   16682:	8893      	ldrh	r3, [r2, #4]
   16684:	429d      	cmp	r5, r3
   16686:	f080 84dd 	bcs.w	17044 <__ssvfscanf_r+0x1150>
   1668a:	6810      	ldr	r0, [r2, #0]
   1668c:	6a3b      	ldr	r3, [r7, #32]
   1668e:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   16692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16694:	633e      	str	r6, [r7, #48]	; 0x30
   16696:	3501      	adds	r5, #1
   16698:	80dd      	strh	r5, [r3, #6]
   1669a:	2320      	movs	r3, #32
   1669c:	61fc      	str	r4, [r7, #28]
   1669e:	61bb      	str	r3, [r7, #24]
   166a0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
   166a2:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   166a6:	2500      	movs	r5, #0
   166a8:	46c2      	mov	sl, r8
   166aa:	46a0      	mov	r8, r4
   166ac:	f7fb ffe0 	bl	12670 <__locale_mb_cur_max>
   166b0:	42a8      	cmp	r0, r5
   166b2:	f43f ad0b 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   166b6:	e9db 3200 	ldrd	r3, r2, [fp]
   166ba:	f813 1b01 	ldrb.w	r1, [r3], #1
   166be:	3a01      	subs	r2, #1
   166c0:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   166c4:	e9cb 3200 	strd	r3, r2, [fp]
   166c8:	2e03      	cmp	r6, #3
   166ca:	f105 0301 	add.w	r3, r5, #1
   166ce:	5541      	strb	r1, [r0, r5]
   166d0:	64bb      	str	r3, [r7, #72]	; 0x48
   166d2:	f107 0460 	add.w	r4, r7, #96	; 0x60
   166d6:	d102      	bne.n	166de <__ssvfscanf_r+0x7ea>
   166d8:	6823      	ldr	r3, [r4, #0]
   166da:	2b04      	cmp	r3, #4
   166dc:	d004      	beq.n	166e8 <__ssvfscanf_r+0x7f4>
   166de:	2208      	movs	r2, #8
   166e0:	2100      	movs	r1, #0
   166e2:	4620      	mov	r0, r4
   166e4:	f7fb fea4 	bl	12430 <memset>
   166e8:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   166ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   166ee:	9400      	str	r4, [sp, #0]
   166f0:	4641      	mov	r1, r8
   166f2:	4648      	mov	r0, r9
   166f4:	f002 fb94 	bl	18e20 <_mbrtowc_r>
   166f8:	1c42      	adds	r2, r0, #1
   166fa:	4606      	mov	r6, r0
   166fc:	f43f ace6 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   16700:	2800      	cmp	r0, #0
   16702:	f040 82ca 	bne.w	16c9a <__ssvfscanf_r+0xda6>
   16706:	f8c8 0000 	str.w	r0, [r8]
   1670a:	4605      	mov	r5, r0
   1670c:	f107 0368 	add.w	r3, r7, #104	; 0x68
   16710:	2208      	movs	r2, #8
   16712:	2100      	movs	r1, #0
   16714:	4618      	mov	r0, r3
   16716:	637b      	str	r3, [r7, #52]	; 0x34
   16718:	f7fb fe8a 	bl	12430 <memset>
   1671c:	4950      	ldr	r1, [pc, #320]	; (16860 <__ssvfscanf_r+0x96c>)
   1671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16720:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
   16724:	462a      	mov	r2, r5
   16726:	4648      	mov	r0, r9
   16728:	460d      	mov	r5, r1
   1672a:	f107 0150 	add.w	r1, r7, #80	; 0x50
   1672e:	47a8      	blx	r5
   16730:	2801      	cmp	r0, #1
   16732:	f000 83d5 	beq.w	16ee0 <__ssvfscanf_r+0xfec>
   16736:	2200      	movs	r2, #0
   16738:	f107 0370 	add.w	r3, r7, #112	; 0x70
   1673c:	5c9b      	ldrb	r3, [r3, r2]
   1673e:	2b00      	cmp	r3, #0
   16740:	f000 85a1 	beq.w	17286 <__ssvfscanf_r+0x1392>
   16744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16746:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16748:	2e03      	cmp	r6, #3
   1674a:	4413      	add	r3, r2
   1674c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1674e:	f000 83ca 	beq.w	16ee6 <__ssvfscanf_r+0xff2>
   16752:	f10a 3aff 	add.w	sl, sl, #4294967295
   16756:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16758:	b95b      	cbnz	r3, 16772 <__ssvfscanf_r+0x87e>
   1675a:	6a3b      	ldr	r3, [r7, #32]
   1675c:	f108 0804 	add.w	r8, r8, #4
   16760:	b13b      	cbz	r3, 16772 <__ssvfscanf_r+0x87e>
   16762:	69fb      	ldr	r3, [r7, #28]
   16764:	eba8 0403 	sub.w	r4, r8, r3
   16768:	69bb      	ldr	r3, [r7, #24]
   1676a:	ebb3 0fa4 	cmp.w	r3, r4, asr #2
   1676e:	f240 8405 	bls.w	16f7c <__ssvfscanf_r+0x1088>
   16772:	f8db 3004 	ldr.w	r3, [fp, #4]
   16776:	2b00      	cmp	r3, #0
   16778:	f04f 0500 	mov.w	r5, #0
   1677c:	f340 8296 	ble.w	16cac <__ssvfscanf_r+0xdb8>
   16780:	f1ba 0f00 	cmp.w	sl, #0
   16784:	d192      	bne.n	166ac <__ssvfscanf_r+0x7b8>
   16786:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1678a:	627e      	str	r6, [r7, #36]	; 0x24
   1678c:	4644      	mov	r4, r8
   1678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16790:	2b00      	cmp	r3, #0
   16792:	f47f abd6 	bne.w	15f42 <__ssvfscanf_r+0x4e>
   16796:	6023      	str	r3, [r4, #0]
   16798:	6a3b      	ldr	r3, [r7, #32]
   1679a:	2b00      	cmp	r3, #0
   1679c:	f000 81c2 	beq.w	16b24 <__ssvfscanf_r+0xc30>
   167a0:	69fb      	ldr	r3, [r7, #28]
   167a2:	69ba      	ldr	r2, [r7, #24]
   167a4:	1ae1      	subs	r1, r4, r3
   167a6:	108b      	asrs	r3, r1, #2
   167a8:	3301      	adds	r3, #1
   167aa:	429a      	cmp	r2, r3
   167ac:	f240 81ba 	bls.w	16b24 <__ssvfscanf_r+0xc30>
   167b0:	6a3c      	ldr	r4, [r7, #32]
   167b2:	3104      	adds	r1, #4
   167b4:	6820      	ldr	r0, [r4, #0]
   167b6:	f7fa f987 	bl	10ac8 <realloc>
   167ba:	2800      	cmp	r0, #0
   167bc:	f000 81b2 	beq.w	16b24 <__ssvfscanf_r+0xc30>
   167c0:	6020      	str	r0, [r4, #0]
   167c2:	e1af      	b.n	16b24 <__ssvfscanf_r+0xc30>
   167c4:	0521      	lsls	r1, r4, #20
   167c6:	f57f adb3 	bpl.w	16330 <__ssvfscanf_r+0x43c>
   167ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   167cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   167ce:	185b      	adds	r3, r3, r1
   167d0:	f47f adae 	bne.w	16330 <__ssvfscanf_r+0x43c>
   167d4:	64bb      	str	r3, [r7, #72]	; 0x48
   167d6:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
   167da:	63fb      	str	r3, [r7, #60]	; 0x3c
   167dc:	e593      	b.n	16306 <__ssvfscanf_r+0x412>
   167de:	4b21      	ldr	r3, [pc, #132]	; (16864 <__ssvfscanf_r+0x970>)
   167e0:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
   167e4:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   167e8:	e66b      	b.n	164c2 <__ssvfscanf_r+0x5ce>
   167ea:	f404 6318 	and.w	r3, r4, #2432	; 0x980
   167ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   167f2:	f47f ad9d 	bne.w	16330 <__ssvfscanf_r+0x43c>
   167f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167f8:	2b01      	cmp	r3, #1
   167fa:	f47f ad99 	bne.w	16330 <__ssvfscanf_r+0x43c>
   167fe:	2330      	movs	r3, #48	; 0x30
   16800:	f805 3b01 	strb.w	r3, [r5], #1
   16804:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   16808:	2300      	movs	r3, #0
   1680a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   1680e:	3e01      	subs	r6, #1
   16810:	637b      	str	r3, [r7, #52]	; 0x34
   16812:	e578      	b.n	16306 <__ssvfscanf_r+0x412>
   16814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16816:	2b06      	cmp	r3, #6
   16818:	f040 8574 	bne.w	17304 <__ssvfscanf_r+0x1410>
   1681c:	2307      	movs	r3, #7
   1681e:	64bb      	str	r3, [r7, #72]	; 0x48
   16820:	e571      	b.n	16306 <__ssvfscanf_r+0x412>
   16822:	0523      	lsls	r3, r4, #20
   16824:	f57f ad84 	bpl.w	16330 <__ssvfscanf_r+0x43c>
   16828:	f404 63a0 	and.w	r3, r4, #1280	; 0x500
   1682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   16830:	d005      	beq.n	1683e <__ssvfscanf_r+0x94a>
   16832:	0561      	lsls	r1, r4, #21
   16834:	f57f ad7c 	bpl.w	16330 <__ssvfscanf_r+0x43c>
   16838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1683a:	2b00      	cmp	r3, #0
   1683c:	d047      	beq.n	168ce <__ssvfscanf_r+0x9da>
   1683e:	05a3      	lsls	r3, r4, #22
   16840:	d404      	bmi.n	1684c <__ssvfscanf_r+0x958>
   16842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16844:	69f9      	ldr	r1, [r7, #28]
   16846:	1a5b      	subs	r3, r3, r1
   16848:	e9c7 5305 	strd	r5, r3, [r7, #20]
   1684c:	f424 6478 	bic.w	r4, r4, #3968	; 0xf80
   16850:	2300      	movs	r3, #0
   16852:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
   16856:	637b      	str	r3, [r7, #52]	; 0x34
   16858:	e555      	b.n	16306 <__ssvfscanf_r+0x412>
   1685a:	bf00      	nop
   1685c:	20001055 	.word	0x20001055
   16860:	20008f74 	.word	0x20008f74
   16864:	20002c74 	.word	0x20002c74
   16868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1686a:	2b00      	cmp	r3, #0
   1686c:	f000 81ff 	beq.w	16c6e <__ssvfscanf_r+0xd7a>
   16870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16872:	2b02      	cmp	r3, #2
   16874:	f000 83b0 	beq.w	16fd8 <__ssvfscanf_r+0x10e4>
   16878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1687a:	2b01      	cmp	r3, #1
   1687c:	f000 81f1 	beq.w	16c62 <__ssvfscanf_r+0xd6e>
   16880:	2b04      	cmp	r3, #4
   16882:	f000 81ee 	beq.w	16c62 <__ssvfscanf_r+0xd6e>
   16886:	e553      	b.n	16330 <__ssvfscanf_r+0x43c>
   16888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1688a:	2b07      	cmp	r3, #7
   1688c:	f040 853a 	bne.w	17304 <__ssvfscanf_r+0x1410>
   16890:	2308      	movs	r3, #8
   16892:	64bb      	str	r3, [r7, #72]	; 0x48
   16894:	e537      	b.n	16306 <__ssvfscanf_r+0x412>
   16896:	0520      	lsls	r0, r4, #20
   16898:	f100 81f9 	bmi.w	16c8e <__ssvfscanf_r+0xd9a>
   1689c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1689e:	2b01      	cmp	r3, #1
   168a0:	f47f ad46 	bne.w	16330 <__ssvfscanf_r+0x43c>
   168a4:	2302      	movs	r3, #2
   168a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   168a8:	e52d      	b.n	16306 <__ssvfscanf_r+0x412>
   168aa:	0623      	lsls	r3, r4, #24
   168ac:	f57f ad40 	bpl.w	16330 <__ssvfscanf_r+0x43c>
   168b0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   168b4:	e527      	b.n	16306 <__ssvfscanf_r+0x412>
   168b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   168b8:	2b00      	cmp	r3, #0
   168ba:	f040 81cc 	bne.w	16c56 <__ssvfscanf_r+0xd62>
   168be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   168c0:	b9b3      	cbnz	r3, 168f0 <__ssvfscanf_r+0x9fc>
   168c2:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   168c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   168ca:	f000 8520 	beq.w	1730e <__ssvfscanf_r+0x141a>
   168ce:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   168d0:	ee18 9a10 	vmov	r9, s16
   168d4:	e533      	b.n	1633e <__ssvfscanf_r+0x44a>
   168d6:	0521      	lsls	r1, r4, #20
   168d8:	f100 81b7 	bmi.w	16c4a <__ssvfscanf_r+0xd56>
   168dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   168de:	2b02      	cmp	r3, #2
   168e0:	f040 8510 	bne.w	17304 <__ssvfscanf_r+0x1410>
   168e4:	2303      	movs	r3, #3
   168e6:	64bb      	str	r3, [r7, #72]	; 0x48
   168e8:	e50d      	b.n	16306 <__ssvfscanf_r+0x412>
   168ea:	0520      	lsls	r0, r4, #20
   168ec:	d59c      	bpl.n	16828 <__ssvfscanf_r+0x934>
   168ee:	e76c      	b.n	167ca <__ssvfscanf_r+0x8d6>
   168f0:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   168f2:	ee18 9a10 	vmov	r9, s16
   168f6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
   168fa:	e520      	b.n	1633e <__ssvfscanf_r+0x44a>
   168fc:	4b8d      	ldr	r3, [pc, #564]	; (16b34 <__ssvfscanf_r+0xc40>)
   168fe:	f933 6016 	ldrsh.w	r6, [r3, r6, lsl #1]
   16902:	2e08      	cmp	r6, #8
   16904:	f73f addb 	bgt.w	164be <__ssvfscanf_r+0x5ca>
   16908:	e5e8      	b.n	164dc <__ssvfscanf_r+0x5e8>
   1690a:	f404 63c0 	and.w	r3, r4, #1536	; 0x600
   1690e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16912:	f47f ade3 	bne.w	164dc <__ssvfscanf_r+0x5e8>
   16916:	f424 7400 	bic.w	r4, r4, #512	; 0x200
   1691a:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
   1691e:	2610      	movs	r6, #16
   16920:	e5cf      	b.n	164c2 <__ssvfscanf_r+0x5ce>
   16922:	0623      	lsls	r3, r4, #24
   16924:	f57f adda 	bpl.w	164dc <__ssvfscanf_r+0x5e8>
   16928:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   1692c:	e5c9      	b.n	164c2 <__ssvfscanf_r+0x5ce>
   1692e:	f044 0401 	orr.w	r4, r4, #1
   16932:	f8db 3004 	ldr.w	r3, [fp, #4]
   16936:	64f9      	str	r1, [r7, #76]	; 0x4c
   16938:	2b00      	cmp	r3, #0
   1693a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   1693e:	f04f 0500 	mov.w	r5, #0
   16942:	f73f abf8 	bgt.w	16136 <__ssvfscanf_r+0x242>
   16946:	4659      	mov	r1, fp
   16948:	4648      	mov	r0, r9
   1694a:	f002 fc7d 	bl	19248 <__ssrefill_r>
   1694e:	2800      	cmp	r0, #0
   16950:	f47f abbc 	bne.w	160cc <__ssvfscanf_r+0x1d8>
   16954:	0660      	lsls	r0, r4, #25
   16956:	f53f abf1 	bmi.w	1613c <__ssvfscanf_r+0x248>
   1695a:	f8db 2000 	ldr.w	r2, [fp]
   1695e:	4e76      	ldr	r6, [pc, #472]	; (16b38 <__ssvfscanf_r+0xc44>)
   16960:	7813      	ldrb	r3, [r2, #0]
   16962:	5cf3      	ldrb	r3, [r6, r3]
   16964:	0719      	lsls	r1, r3, #28
   16966:	f57f abe9 	bpl.w	1613c <__ssvfscanf_r+0x248>
   1696a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1696e:	3b01      	subs	r3, #1
   16970:	2b00      	cmp	r3, #0
   16972:	f10a 0a01 	add.w	sl, sl, #1
   16976:	f8cb 3004 	str.w	r3, [fp, #4]
   1697a:	f102 0201 	add.w	r2, r2, #1
   1697e:	dd4a      	ble.n	16a16 <__ssvfscanf_r+0xb22>
   16980:	f8cb 2000 	str.w	r2, [fp]
   16984:	7813      	ldrb	r3, [r2, #0]
   16986:	5cf3      	ldrb	r3, [r6, r3]
   16988:	0719      	lsls	r1, r3, #28
   1698a:	f57f abd7 	bpl.w	1613c <__ssvfscanf_r+0x248>
   1698e:	e7ec      	b.n	1696a <__ssvfscanf_r+0xa76>
   16990:	f044 0401 	orr.w	r4, r4, #1
   16994:	4b69      	ldr	r3, [pc, #420]	; (16b3c <__ssvfscanf_r+0xc48>)
   16996:	62fb      	str	r3, [r7, #44]	; 0x2c
   16998:	2308      	movs	r3, #8
   1699a:	64f9      	str	r1, [r7, #76]	; 0x4c
   1699c:	63bb      	str	r3, [r7, #56]	; 0x38
   1699e:	2503      	movs	r5, #3
   169a0:	f7ff bbc4 	b.w	1612c <__ssvfscanf_r+0x238>
   169a4:	f044 0401 	orr.w	r4, r4, #1
   169a8:	4b65      	ldr	r3, [pc, #404]	; (16b40 <__ssvfscanf_r+0xc4c>)
   169aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   169ac:	230a      	movs	r3, #10
   169ae:	64f9      	str	r1, [r7, #76]	; 0x4c
   169b0:	63bb      	str	r3, [r7, #56]	; 0x38
   169b2:	2503      	movs	r5, #3
   169b4:	f7ff bbba 	b.w	1612c <__ssvfscanf_r+0x238>
   169b8:	0523      	lsls	r3, r4, #20
   169ba:	f57f ad82 	bpl.w	164c2 <__ssvfscanf_r+0x5ce>
   169be:	b916      	cbnz	r6, 169c6 <__ssvfscanf_r+0xad2>
   169c0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   169c4:	2608      	movs	r6, #8
   169c6:	0563      	lsls	r3, r4, #21
   169c8:	f100 81a6 	bmi.w	16d18 <__ssvfscanf_r+0xe24>
   169cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   169ce:	f424 7460 	bic.w	r4, r4, #896	; 0x380
   169d2:	b11b      	cbz	r3, 169dc <__ssvfscanf_r+0xae8>
   169d4:	3b01      	subs	r3, #1
   169d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   169d8:	f108 0801 	add.w	r8, r8, #1
   169dc:	684b      	ldr	r3, [r1, #4]
   169de:	3b01      	subs	r3, #1
   169e0:	2b00      	cmp	r3, #0
   169e2:	f10a 0a01 	add.w	sl, sl, #1
   169e6:	604b      	str	r3, [r1, #4]
   169e8:	f73f ad73 	bgt.w	164d2 <__ssvfscanf_r+0x5de>
   169ec:	4648      	mov	r0, r9
   169ee:	64b9      	str	r1, [r7, #72]	; 0x48
   169f0:	f002 fc2a 	bl	19248 <__ssrefill_r>
   169f4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   169f6:	2800      	cmp	r0, #0
   169f8:	f43f ad6d 	beq.w	164d6 <__ssvfscanf_r+0x5e2>
   169fc:	e56e      	b.n	164dc <__ssvfscanf_r+0x5e8>
   169fe:	ee18 0a10 	vmov	r0, s16
   16a02:	4659      	mov	r1, fp
   16a04:	f002 fc20 	bl	19248 <__ssrefill_r>
   16a08:	2800      	cmp	r0, #0
   16a0a:	f47f ac91 	bne.w	16330 <__ssvfscanf_r+0x43c>
   16a0e:	2e00      	cmp	r6, #0
   16a10:	f47f abc4 	bne.w	1619c <__ssvfscanf_r+0x2a8>
   16a14:	e48c      	b.n	16330 <__ssvfscanf_r+0x43c>
   16a16:	4659      	mov	r1, fp
   16a18:	4648      	mov	r0, r9
   16a1a:	f002 fc15 	bl	19248 <__ssrefill_r>
   16a1e:	2800      	cmp	r0, #0
   16a20:	f47f ab54 	bne.w	160cc <__ssvfscanf_r+0x1d8>
   16a24:	f8db 2000 	ldr.w	r2, [fp]
   16a28:	e79a      	b.n	16960 <__ssvfscanf_r+0xa6c>
   16a2a:	f8db 2004 	ldr.w	r2, [fp, #4]
   16a2e:	e00f      	b.n	16a50 <__ssvfscanf_r+0xb5c>
   16a30:	f8db 3000 	ldr.w	r3, [fp]
   16a34:	781a      	ldrb	r2, [r3, #0]
   16a36:	5cb2      	ldrb	r2, [r6, r2]
   16a38:	0711      	lsls	r1, r2, #28
   16a3a:	f103 0301 	add.w	r3, r3, #1
   16a3e:	f57f aa80 	bpl.w	15f42 <__ssvfscanf_r+0x4e>
   16a42:	f8db 2004 	ldr.w	r2, [fp, #4]
   16a46:	3a01      	subs	r2, #1
   16a48:	e9cb 3200 	strd	r3, r2, [fp]
   16a4c:	f10a 0a01 	add.w	sl, sl, #1
   16a50:	2a00      	cmp	r2, #0
   16a52:	dced      	bgt.n	16a30 <__ssvfscanf_r+0xb3c>
   16a54:	4659      	mov	r1, fp
   16a56:	4648      	mov	r0, r9
   16a58:	f002 fbf6 	bl	19248 <__ssrefill_r>
   16a5c:	2800      	cmp	r0, #0
   16a5e:	d0e7      	beq.n	16a30 <__ssvfscanf_r+0xb3c>
   16a60:	f7ff ba6f 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16a64:	06e1      	lsls	r1, r4, #27
   16a66:	f100 8349 	bmi.w	170fc <__ssvfscanf_r+0x1208>
   16a6a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16a6e:	f000 83ab 	beq.w	171c8 <__ssvfscanf_r+0x12d4>
   16a72:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16a74:	f854 6b04 	ldr.w	r6, [r4], #4
   16a78:	64be      	str	r6, [r7, #72]	; 0x48
   16a7a:	2e00      	cmp	r6, #0
   16a7c:	f43f ab2f 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16a80:	2020      	movs	r0, #32
   16a82:	f7f9 fd55 	bl	10530 <malloc>
   16a86:	4605      	mov	r5, r0
   16a88:	2800      	cmp	r0, #0
   16a8a:	f000 8462 	beq.w	17352 <__ssvfscanf_r+0x145e>
   16a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16a90:	6030      	str	r0, [r6, #0]
   16a92:	8893      	ldrh	r3, [r2, #4]
   16a94:	88d6      	ldrh	r6, [r2, #6]
   16a96:	429e      	cmp	r6, r3
   16a98:	f080 82a8 	bcs.w	16fec <__ssvfscanf_r+0x10f8>
   16a9c:	6810      	ldr	r0, [r2, #0]
   16a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16aa0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16aa6:	633c      	str	r4, [r7, #48]	; 0x30
   16aa8:	3601      	adds	r6, #1
   16aaa:	80de      	strh	r6, [r3, #6]
   16aac:	2320      	movs	r3, #32
   16aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   16ab0:	f8db 2000 	ldr.w	r2, [fp]
   16ab4:	4e20      	ldr	r6, [pc, #128]	; (16b38 <__ssvfscanf_r+0xc44>)
   16ab6:	7811      	ldrb	r1, [r2, #0]
   16ab8:	5c71      	ldrb	r1, [r6, r1]
   16aba:	0708      	lsls	r0, r1, #28
   16abc:	f100 82ac 	bmi.w	17018 <__ssvfscanf_r+0x1124>
   16ac0:	4633      	mov	r3, r6
   16ac2:	462c      	mov	r4, r5
   16ac4:	4610      	mov	r0, r2
   16ac6:	462e      	mov	r6, r5
   16ac8:	f8db 1004 	ldr.w	r1, [fp, #4]
   16acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16ace:	3901      	subs	r1, #1
   16ad0:	f8cb 1004 	str.w	r1, [fp, #4]
   16ad4:	1c41      	adds	r1, r0, #1
   16ad6:	f8cb 1000 	str.w	r1, [fp]
   16ada:	4635      	mov	r5, r6
   16adc:	7801      	ldrb	r1, [r0, #0]
   16ade:	f805 1b01 	strb.w	r1, [r5], #1
   16ae2:	b122      	cbz	r2, 16aee <__ssvfscanf_r+0xbfa>
   16ae4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16ae6:	1b2e      	subs	r6, r5, r4
   16ae8:	4296      	cmp	r6, r2
   16aea:	f080 837a 	bcs.w	171e2 <__ssvfscanf_r+0x12ee>
   16aee:	f1b8 0801 	subs.w	r8, r8, #1
   16af2:	d00b      	beq.n	16b0c <__ssvfscanf_r+0xc18>
   16af4:	f8db 1004 	ldr.w	r1, [fp, #4]
   16af8:	2900      	cmp	r1, #0
   16afa:	462e      	mov	r6, r5
   16afc:	f340 83ae 	ble.w	1725c <__ssvfscanf_r+0x1368>
   16b00:	f8db 0000 	ldr.w	r0, [fp]
   16b04:	7801      	ldrb	r1, [r0, #0]
   16b06:	5c59      	ldrb	r1, [r3, r1]
   16b08:	0709      	lsls	r1, r1, #28
   16b0a:	d5dd      	bpl.n	16ac8 <__ssvfscanf_r+0xbd4>
   16b0c:	1b29      	subs	r1, r5, r4
   16b0e:	448a      	add	sl, r1
   16b10:	3101      	adds	r1, #1
   16b12:	f04f 0300 	mov.w	r3, #0
   16b16:	702b      	strb	r3, [r5, #0]
   16b18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b1a:	b11b      	cbz	r3, 16b24 <__ssvfscanf_r+0xc30>
   16b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b1e:	428b      	cmp	r3, r1
   16b20:	f200 8394 	bhi.w	1724c <__ssvfscanf_r+0x1358>
   16b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16b26:	3301      	adds	r3, #1
   16b28:	647b      	str	r3, [r7, #68]	; 0x44
   16b2a:	f7ff ba0a 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16b2e:	2300      	movs	r3, #0
   16b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   16b32:	e461      	b.n	163f8 <__ssvfscanf_r+0x504>
   16b34:	20002c74 	.word	0x20002c74
   16b38:	20001055 	.word	0x20001055
   16b3c:	00018b0d 	.word	0x00018b0d
   16b40:	00011e79 	.word	0x00011e79
   16b44:	06e6      	lsls	r6, r4, #27
   16b46:	f100 8181 	bmi.w	16e4c <__ssvfscanf_r+0xf58>
   16b4a:	f014 0480 	ands.w	r4, r4, #128	; 0x80
   16b4e:	f000 836d 	beq.w	1722c <__ssvfscanf_r+0x1338>
   16b52:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   16b54:	f854 6b04 	ldr.w	r6, [r4], #4
   16b58:	64be      	str	r6, [r7, #72]	; 0x48
   16b5a:	2e00      	cmp	r6, #0
   16b5c:	f43f aabf 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16b60:	2020      	movs	r0, #32
   16b62:	f7f9 fce5 	bl	10530 <malloc>
   16b66:	4605      	mov	r5, r0
   16b68:	2800      	cmp	r0, #0
   16b6a:	f000 83f2 	beq.w	17352 <__ssvfscanf_r+0x145e>
   16b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16b70:	6030      	str	r0, [r6, #0]
   16b72:	8893      	ldrh	r3, [r2, #4]
   16b74:	88d6      	ldrh	r6, [r2, #6]
   16b76:	429e      	cmp	r6, r3
   16b78:	f080 827a 	bcs.w	17070 <__ssvfscanf_r+0x117c>
   16b7c:	6810      	ldr	r0, [r2, #0]
   16b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16b80:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
   16b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b86:	633c      	str	r4, [r7, #48]	; 0x30
   16b88:	3601      	adds	r6, #1
   16b8a:	80de      	strh	r6, [r3, #6]
   16b8c:	2420      	movs	r4, #32
   16b8e:	f8db 2000 	ldr.w	r2, [fp]
   16b92:	f107 0370 	add.w	r3, r7, #112	; 0x70
   16b96:	4619      	mov	r1, r3
   16b98:	7813      	ldrb	r3, [r2, #0]
   16b9a:	5ccb      	ldrb	r3, [r1, r3]
   16b9c:	2b00      	cmp	r3, #0
   16b9e:	f43f aa9e 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16ba2:	ee08 9a10 	vmov	s16, r9
   16ba6:	f8d7 9048 	ldr.w	r9, [r7, #72]	; 0x48
   16baa:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
   16bae:	462e      	mov	r6, r5
   16bb0:	46a2      	mov	sl, r4
   16bb2:	4610      	mov	r0, r2
   16bb4:	460c      	mov	r4, r1
   16bb6:	f8db 1004 	ldr.w	r1, [fp, #4]
   16bba:	1c43      	adds	r3, r0, #1
   16bbc:	3901      	subs	r1, #1
   16bbe:	e9cb 3100 	strd	r3, r1, [fp]
   16bc2:	4629      	mov	r1, r5
   16bc4:	7800      	ldrb	r0, [r0, #0]
   16bc6:	f801 0b01 	strb.w	r0, [r1], #1
   16bca:	f1b9 0f00 	cmp.w	r9, #0
   16bce:	d002      	beq.n	16bd6 <__ssvfscanf_r+0xce2>
   16bd0:	1b8d      	subs	r5, r1, r6
   16bd2:	4555      	cmp	r5, sl
   16bd4:	d27a      	bcs.n	16ccc <__ssvfscanf_r+0xdd8>
   16bd6:	460d      	mov	r5, r1
   16bd8:	f1b8 0801 	subs.w	r8, r8, #1
   16bdc:	d00a      	beq.n	16bf4 <__ssvfscanf_r+0xd00>
   16bde:	f8db 1004 	ldr.w	r1, [fp, #4]
   16be2:	2900      	cmp	r1, #0
   16be4:	f340 816a 	ble.w	16ebc <__ssvfscanf_r+0xfc8>
   16be8:	f8db 0000 	ldr.w	r0, [fp]
   16bec:	7801      	ldrb	r1, [r0, #0]
   16bee:	5c61      	ldrb	r1, [r4, r1]
   16bf0:	2900      	cmp	r1, #0
   16bf2:	d1e0      	bne.n	16bb6 <__ssvfscanf_r+0xcc2>
   16bf4:	4654      	mov	r4, sl
   16bf6:	ee18 9a10 	vmov	r9, s16
   16bfa:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16bfe:	1bae      	subs	r6, r5, r6
   16c00:	f43f aa6d 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16c04:	f04f 0300 	mov.w	r3, #0
   16c08:	702b      	strb	r3, [r5, #0]
   16c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16c0c:	b11b      	cbz	r3, 16c16 <__ssvfscanf_r+0xd22>
   16c0e:	1c71      	adds	r1, r6, #1
   16c10:	428c      	cmp	r4, r1
   16c12:	f200 832d 	bhi.w	17270 <__ssvfscanf_r+0x137c>
   16c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16c18:	3301      	adds	r3, #1
   16c1a:	44b2      	add	sl, r6
   16c1c:	647b      	str	r3, [r7, #68]	; 0x44
   16c1e:	f7ff b990 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16c22:	2300      	movs	r3, #0
   16c24:	613b      	str	r3, [r7, #16]
   16c26:	f7ff baa9 	b.w	1617c <__ssvfscanf_r+0x288>
   16c2a:	f014 0f8f 	tst.w	r4, #143	; 0x8f
   16c2e:	f47f aa56 	bne.w	160de <__ssvfscanf_r+0x1ea>
   16c32:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   16c36:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   16c3a:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
   16c3e:	f7ff ba67 	b.w	16110 <__ssvfscanf_r+0x21c>
   16c42:	64f9      	str	r1, [r7, #76]	; 0x4c
   16c44:	2504      	movs	r5, #4
   16c46:	f7ff ba71 	b.w	1612c <__ssvfscanf_r+0x238>
   16c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16c4c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16c4e:	185b      	adds	r3, r3, r1
   16c50:	f47f ae44 	bne.w	168dc <__ssvfscanf_r+0x9e8>
   16c54:	e5be      	b.n	167d4 <__ssvfscanf_r+0x8e0>
   16c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16c58:	2b03      	cmp	r3, #3
   16c5a:	d002      	beq.n	16c62 <__ssvfscanf_r+0xd6e>
   16c5c:	2b05      	cmp	r3, #5
   16c5e:	f47f ab67 	bne.w	16330 <__ssvfscanf_r+0x43c>
   16c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16c64:	3301      	adds	r3, #1
   16c66:	b2db      	uxtb	r3, r3
   16c68:	64bb      	str	r3, [r7, #72]	; 0x48
   16c6a:	f7ff bb4c 	b.w	16306 <__ssvfscanf_r+0x412>
   16c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c70:	2b00      	cmp	r3, #0
   16c72:	f47f ae01 	bne.w	16878 <__ssvfscanf_r+0x984>
   16c76:	f404 63e0 	and.w	r3, r4, #1792	; 0x700
   16c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   16c7e:	f47f adfb 	bne.w	16878 <__ssvfscanf_r+0x984>
   16c82:	2301      	movs	r3, #1
   16c84:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   16c88:	63fb      	str	r3, [r7, #60]	; 0x3c
   16c8a:	f7ff bb3c 	b.w	16306 <__ssvfscanf_r+0x412>
   16c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16c90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   16c92:	185b      	adds	r3, r3, r1
   16c94:	f47f ae02 	bne.w	1689c <__ssvfscanf_r+0x9a8>
   16c98:	e59c      	b.n	167d4 <__ssvfscanf_r+0x8e0>
   16c9a:	1c83      	adds	r3, r0, #2
   16c9c:	f040 845b 	bne.w	17556 <__ssvfscanf_r+0x1662>
   16ca0:	f8db 3004 	ldr.w	r3, [fp, #4]
   16ca4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   16ca6:	2b00      	cmp	r3, #0
   16ca8:	f73f ad00 	bgt.w	166ac <__ssvfscanf_r+0x7b8>
   16cac:	4659      	mov	r1, fp
   16cae:	4648      	mov	r0, r9
   16cb0:	f002 faca 	bl	19248 <__ssrefill_r>
   16cb4:	2800      	cmp	r0, #0
   16cb6:	f43f ad63 	beq.w	16780 <__ssvfscanf_r+0x88c>
   16cba:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16cbe:	627e      	str	r6, [r7, #36]	; 0x24
   16cc0:	4644      	mov	r4, r8
   16cc2:	2d00      	cmp	r5, #0
   16cc4:	f43f ad63 	beq.w	1678e <__ssvfscanf_r+0x89a>
   16cc8:	f7ff ba00 	b.w	160cc <__ssvfscanf_r+0x1d8>
   16ccc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
   16cd0:	4630      	mov	r0, r6
   16cd2:	4651      	mov	r1, sl
   16cd4:	f7f9 fef8 	bl	10ac8 <realloc>
   16cd8:	4606      	mov	r6, r0
   16cda:	2800      	cmp	r0, #0
   16cdc:	f000 8339 	beq.w	17352 <__ssvfscanf_r+0x145e>
   16ce0:	4405      	add	r5, r0
   16ce2:	f8c9 0000 	str.w	r0, [r9]
   16ce6:	e777      	b.n	16bd8 <__ssvfscanf_r+0xce4>
   16ce8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
   16cec:	4bbc      	ldr	r3, [pc, #752]	; (16fe0 <__ssvfscanf_r+0x10ec>)
   16cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   16cf0:	2310      	movs	r3, #16
   16cf2:	64f9      	str	r1, [r7, #76]	; 0x4c
   16cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   16cf6:	2503      	movs	r5, #3
   16cf8:	f7ff ba18 	b.w	1612c <__ssvfscanf_r+0x238>
   16cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16cfe:	3301      	adds	r3, #1
   16d00:	637b      	str	r3, [r7, #52]	; 0x34
   16d02:	693b      	ldr	r3, [r7, #16]
   16d04:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   16d08:	2b00      	cmp	r3, #0
   16d0a:	f43f aafe 	beq.w	1630a <__ssvfscanf_r+0x416>
   16d0e:	693b      	ldr	r3, [r7, #16]
   16d10:	3b01      	subs	r3, #1
   16d12:	613b      	str	r3, [r7, #16]
   16d14:	f7ff bafa 	b.w	1630c <__ssvfscanf_r+0x418>
   16d18:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
   16d1c:	f7ff bbd1 	b.w	164c2 <__ssvfscanf_r+0x5ce>
   16d20:	0722      	lsls	r2, r4, #28
   16d22:	f140 81c7 	bpl.w	170b4 <__ssvfscanf_r+0x11c0>
   16d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d28:	f853 2b04 	ldr.w	r2, [r3], #4
   16d2c:	633b      	str	r3, [r7, #48]	; 0x30
   16d2e:	7010      	strb	r0, [r2, #0]
   16d30:	f7ff bbf3 	b.w	1651a <__ssvfscanf_r+0x626>
   16d34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   16d38:	465a      	mov	r2, fp
   16d3a:	4648      	mov	r0, r9
   16d3c:	3d01      	subs	r5, #1
   16d3e:	f002 fa43 	bl	191c8 <_sungetc_r>
   16d42:	f7ff bbd5 	b.w	164f0 <__ssvfscanf_r+0x5fc>
   16d46:	69fb      	ldr	r3, [r7, #28]
   16d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16d4a:	4293      	cmp	r3, r2
   16d4c:	f43f ab2d 	beq.w	163aa <__ssvfscanf_r+0x4b6>
   16d50:	1a9a      	subs	r2, r3, r2
   16d52:	f207 23c3 	addw	r3, r7, #707	; 0x2c3
   16d56:	429d      	cmp	r5, r3
   16d58:	bf28      	it	cs
   16d5a:	f207 25c2 	addwcs	r5, r7, #706	; 0x2c2
   16d5e:	49a1      	ldr	r1, [pc, #644]	; (16fe4 <__ssvfscanf_r+0x10f0>)
   16d60:	4628      	mov	r0, r5
   16d62:	f7fb f9bf 	bl	120e4 <sprintf>
   16d66:	f7ff bb20 	b.w	163aa <__ssvfscanf_r+0x4b6>
   16d6a:	06e2      	lsls	r2, r4, #27
   16d6c:	f100 8131 	bmi.w	16fd2 <__ssvfscanf_r+0x10de>
   16d70:	0723      	lsls	r3, r4, #28
   16d72:	f100 81ba 	bmi.w	170ea <__ssvfscanf_r+0x11f6>
   16d76:	0766      	lsls	r6, r4, #29
   16d78:	f140 82b4 	bpl.w	172e4 <__ssvfscanf_r+0x13f0>
   16d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16d7e:	64f9      	str	r1, [r7, #76]	; 0x4c
   16d80:	f853 2b04 	ldr.w	r2, [r3], #4
   16d84:	633b      	str	r3, [r7, #48]	; 0x30
   16d86:	f8a2 a000 	strh.w	sl, [r2]
   16d8a:	f7ff b8da 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16d8e:	0723      	lsls	r3, r4, #28
   16d90:	f47f a9a5 	bne.w	160de <__ssvfscanf_r+0x1ea>
   16d94:	7842      	ldrb	r2, [r0, #1]
   16d96:	2a68      	cmp	r2, #104	; 0x68
   16d98:	f000 8186 	beq.w	170a8 <__ssvfscanf_r+0x11b4>
   16d9c:	f044 0404 	orr.w	r4, r4, #4
   16da0:	4608      	mov	r0, r1
   16da2:	f7ff b92f 	b.w	16004 <__ssvfscanf_r+0x110>
   16da6:	4b8e      	ldr	r3, [pc, #568]	; (16fe0 <__ssvfscanf_r+0x10ec>)
   16da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   16daa:	230a      	movs	r3, #10
   16dac:	64f9      	str	r1, [r7, #76]	; 0x4c
   16dae:	63bb      	str	r3, [r7, #56]	; 0x38
   16db0:	2503      	movs	r5, #3
   16db2:	f7ff b9bb 	b.w	1612c <__ssvfscanf_r+0x238>
   16db6:	4b8c      	ldr	r3, [pc, #560]	; (16fe8 <__ssvfscanf_r+0x10f4>)
   16db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   16dba:	2300      	movs	r3, #0
   16dbc:	64f9      	str	r1, [r7, #76]	; 0x4c
   16dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   16dc0:	2503      	movs	r5, #3
   16dc2:	f7ff b9b3 	b.w	1612c <__ssvfscanf_r+0x238>
   16dc6:	f444 7408 	orr.w	r4, r4, #544	; 0x220
   16dca:	e78f      	b.n	16cec <__ssvfscanf_r+0xdf8>
   16dcc:	f107 0070 	add.w	r0, r7, #112	; 0x70
   16dd0:	f000 fdde 	bl	17990 <__sccl>
   16dd4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
   16dd8:	64f8      	str	r0, [r7, #76]	; 0x4c
   16dda:	2501      	movs	r5, #1
   16ddc:	f7ff b9a6 	b.w	1612c <__ssvfscanf_r+0x238>
   16de0:	0722      	lsls	r2, r4, #28
   16de2:	f47f a97c 	bne.w	160de <__ssvfscanf_r+0x1ea>
   16de6:	7842      	ldrb	r2, [r0, #1]
   16de8:	2a6c      	cmp	r2, #108	; 0x6c
   16dea:	f000 8157 	beq.w	1709c <__ssvfscanf_r+0x11a8>
   16dee:	f044 0401 	orr.w	r4, r4, #1
   16df2:	4608      	mov	r0, r1
   16df4:	f7ff b906 	b.w	16004 <__ssvfscanf_r+0x110>
   16df8:	f014 038f 	ands.w	r3, r4, #143	; 0x8f
   16dfc:	f47f a96f 	bne.w	160de <__ssvfscanf_r+0x1ea>
   16e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16e02:	2a00      	cmp	r2, #0
   16e04:	f000 81e7 	beq.w	171d6 <__ssvfscanf_r+0x12e2>
   16e08:	7842      	ldrb	r2, [r0, #1]
   16e0a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   16e0e:	4608      	mov	r0, r1
   16e10:	f7ff b8f8 	b.w	16004 <__ssvfscanf_r+0x110>
   16e14:	ea58 0804 	orrs.w	r8, r8, r4
   16e18:	f47f a961 	bne.w	160de <__ssvfscanf_r+0x1ea>
   16e1c:	7842      	ldrb	r2, [r0, #1]
   16e1e:	2410      	movs	r4, #16
   16e20:	4608      	mov	r0, r1
   16e22:	f7ff b8ef 	b.w	16004 <__ssvfscanf_r+0x110>
   16e26:	64f9      	str	r1, [r7, #76]	; 0x4c
   16e28:	f7ff b8a7 	b.w	15f7a <__ssvfscanf_r+0x86>
   16e2c:	2300      	movs	r3, #0
   16e2e:	623b      	str	r3, [r7, #32]
   16e30:	62bb      	str	r3, [r7, #40]	; 0x28
   16e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   16e34:	f107 0354 	add.w	r3, r7, #84	; 0x54
   16e38:	64bb      	str	r3, [r7, #72]	; 0x48
   16e3a:	f7ff bba9 	b.w	16590 <__ssvfscanf_r+0x69c>
   16e3e:	2300      	movs	r3, #0
   16e40:	e9c7 3306 	strd	r3, r3, [r7, #24]
   16e44:	623b      	str	r3, [r7, #32]
   16e46:	f107 0454 	add.w	r4, r7, #84	; 0x54
   16e4a:	e429      	b.n	166a0 <__ssvfscanf_r+0x7ac>
   16e4c:	f8db 3000 	ldr.w	r3, [fp]
   16e50:	f107 0270 	add.w	r2, r7, #112	; 0x70
   16e54:	4611      	mov	r1, r2
   16e56:	781a      	ldrb	r2, [r3, #0]
   16e58:	5c8a      	ldrb	r2, [r1, r2]
   16e5a:	2a00      	cmp	r2, #0
   16e5c:	f43f a93f 	beq.w	160de <__ssvfscanf_r+0x1ea>
   16e60:	3301      	adds	r3, #1
   16e62:	f8cb 3000 	str.w	r3, [fp]
   16e66:	f8db 3004 	ldr.w	r3, [fp, #4]
   16e6a:	f1b8 0f01 	cmp.w	r8, #1
   16e6e:	f103 33ff 	add.w	r3, r3, #4294967295
   16e72:	f8cb 3004 	str.w	r3, [fp, #4]
   16e76:	bf18      	it	ne
   16e78:	460c      	movne	r4, r1
   16e7a:	d114      	bne.n	16ea6 <__ssvfscanf_r+0xfb2>
   16e7c:	f7ff bb53 	b.w	16526 <__ssvfscanf_r+0x632>
   16e80:	f8db 3000 	ldr.w	r3, [fp]
   16e84:	781a      	ldrb	r2, [r3, #0]
   16e86:	5ca2      	ldrb	r2, [r4, r2]
   16e88:	3301      	adds	r3, #1
   16e8a:	2a00      	cmp	r2, #0
   16e8c:	f43f ab4b 	beq.w	16526 <__ssvfscanf_r+0x632>
   16e90:	f8cb 3000 	str.w	r3, [fp]
   16e94:	f8db 3004 	ldr.w	r3, [fp, #4]
   16e98:	3501      	adds	r5, #1
   16e9a:	3b01      	subs	r3, #1
   16e9c:	4545      	cmp	r5, r8
   16e9e:	f8cb 3004 	str.w	r3, [fp, #4]
   16ea2:	f43f ab40 	beq.w	16526 <__ssvfscanf_r+0x632>
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	dcea      	bgt.n	16e80 <__ssvfscanf_r+0xf8c>
   16eaa:	4659      	mov	r1, fp
   16eac:	4648      	mov	r0, r9
   16eae:	f002 f9cb 	bl	19248 <__ssrefill_r>
   16eb2:	2800      	cmp	r0, #0
   16eb4:	d0e4      	beq.n	16e80 <__ssvfscanf_r+0xf8c>
   16eb6:	44aa      	add	sl, r5
   16eb8:	f7ff b843 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16ebc:	ee18 0a10 	vmov	r0, s16
   16ec0:	4659      	mov	r1, fp
   16ec2:	f002 f9c1 	bl	19248 <__ssrefill_r>
   16ec6:	2800      	cmp	r0, #0
   16ec8:	f43f ae8e 	beq.w	16be8 <__ssvfscanf_r+0xcf4>
   16ecc:	42b5      	cmp	r5, r6
   16ece:	4654      	mov	r4, sl
   16ed0:	ee18 9a10 	vmov	r9, s16
   16ed4:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   16ed8:	f47f ae91 	bne.w	16bfe <__ssvfscanf_r+0xd0a>
   16edc:	f7ff b8f6 	b.w	160cc <__ssvfscanf_r+0x1d8>
   16ee0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   16ee4:	e428      	b.n	16738 <__ssvfscanf_r+0x844>
   16ee6:	6823      	ldr	r3, [r4, #0]
   16ee8:	2b04      	cmp	r3, #4
   16eea:	f47f ac32 	bne.w	16752 <__ssvfscanf_r+0x85e>
   16eee:	e432      	b.n	16756 <__ssvfscanf_r+0x862>
   16ef0:	1c83      	adds	r3, r0, #2
   16ef2:	f040 8339 	bne.w	17568 <__ssvfscanf_r+0x1674>
   16ef6:	f8db 3004 	ldr.w	r3, [fp, #4]
   16efa:	2b00      	cmp	r3, #0
   16efc:	f340 81d7 	ble.w	172ae <__ssvfscanf_r+0x13ba>
   16f00:	f8db 3000 	ldr.w	r3, [fp]
   16f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16f06:	781b      	ldrb	r3, [r3, #0]
   16f08:	5cd3      	ldrb	r3, [r2, r3]
   16f0a:	0718      	lsls	r0, r3, #28
   16f0c:	d403      	bmi.n	16f16 <__ssvfscanf_r+0x1022>
   16f0e:	f1b8 0f00 	cmp.w	r8, #0
   16f12:	f47f ab49 	bne.w	165a8 <__ssvfscanf_r+0x6b4>
   16f16:	627c      	str	r4, [r7, #36]	; 0x24
   16f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f1a:	2b00      	cmp	r3, #0
   16f1c:	f47f a811 	bne.w	15f42 <__ssvfscanf_r+0x4e>
   16f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
   16f22:	6013      	str	r3, [r2, #0]
   16f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f26:	2b00      	cmp	r3, #0
   16f28:	f43f adfc 	beq.w	16b24 <__ssvfscanf_r+0xc30>
   16f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16f2e:	1ad1      	subs	r1, r2, r3
   16f30:	108b      	asrs	r3, r1, #2
   16f32:	6a3a      	ldr	r2, [r7, #32]
   16f34:	3301      	adds	r3, #1
   16f36:	429a      	cmp	r2, r3
   16f38:	f67f adf4 	bls.w	16b24 <__ssvfscanf_r+0xc30>
   16f3c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   16f3e:	3104      	adds	r1, #4
   16f40:	6820      	ldr	r0, [r4, #0]
   16f42:	f7f9 fdc1 	bl	10ac8 <realloc>
   16f46:	2800      	cmp	r0, #0
   16f48:	f47f ac3a 	bne.w	167c0 <__ssvfscanf_r+0x8cc>
   16f4c:	e5ea      	b.n	16b24 <__ssvfscanf_r+0xc30>
   16f4e:	f853 2b04 	ldr.w	r2, [r3], #4
   16f52:	ed82 0b00 	vstr	d0, [r2]
   16f56:	633b      	str	r3, [r7, #48]	; 0x30
   16f58:	e5e4      	b.n	16b24 <__ssvfscanf_r+0xc30>
   16f5a:	68fd      	ldr	r5, [r7, #12]
   16f5c:	6a39      	ldr	r1, [r7, #32]
   16f5e:	687e      	ldr	r6, [r7, #4]
   16f60:	4628      	mov	r0, r5
   16f62:	4642      	mov	r2, r8
   16f64:	46a3      	mov	fp, r4
   16f66:	68bc      	ldr	r4, [r7, #8]
   16f68:	f000 fd56 	bl	17a18 <stpncpy>
   16f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16f6e:	61fb      	str	r3, [r7, #28]
   16f70:	f424 7420 	bic.w	r4, r4, #640	; 0x280
   16f74:	3e01      	subs	r6, #1
   16f76:	4605      	mov	r5, r0
   16f78:	f7ff b9c8 	b.w	1630c <__ssvfscanf_r+0x418>
   16f7c:	69f8      	ldr	r0, [r7, #28]
   16f7e:	00d9      	lsls	r1, r3, #3
   16f80:	461d      	mov	r5, r3
   16f82:	f7f9 fda1 	bl	10ac8 <realloc>
   16f86:	61f8      	str	r0, [r7, #28]
   16f88:	2800      	cmp	r0, #0
   16f8a:	f000 8264 	beq.w	17456 <__ssvfscanf_r+0x1562>
   16f8e:	6a3a      	ldr	r2, [r7, #32]
   16f90:	006b      	lsls	r3, r5, #1
   16f92:	eb00 0804 	add.w	r8, r0, r4
   16f96:	6010      	str	r0, [r2, #0]
   16f98:	61bb      	str	r3, [r7, #24]
   16f9a:	f7ff bbea 	b.w	16772 <__ssvfscanf_r+0x87e>
   16f9e:	2e02      	cmp	r6, #2
   16fa0:	f240 82c4 	bls.w	1752c <__ssvfscanf_r+0x1638>
   16fa4:	2e03      	cmp	r6, #3
   16fa6:	f43f a9d3 	beq.w	16350 <__ssvfscanf_r+0x45c>
   16faa:	3e04      	subs	r6, #4
   16fac:	fa5f f886 	uxtb.w	r8, r6
   16fb0:	ea6f 0308 	mvn.w	r3, r8
   16fb4:	18ee      	adds	r6, r5, r3
   16fb6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   16fba:	465a      	mov	r2, fp
   16fbc:	4648      	mov	r0, r9
   16fbe:	f002 f903 	bl	191c8 <_sungetc_r>
   16fc2:	42ae      	cmp	r6, r5
   16fc4:	d1f7      	bne.n	16fb6 <__ssvfscanf_r+0x10c2>
   16fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
   16fca:	ebaa 0a08 	sub.w	sl, sl, r8
   16fce:	f7ff b9bf 	b.w	16350 <__ssvfscanf_r+0x45c>
   16fd2:	64f9      	str	r1, [r7, #76]	; 0x4c
   16fd4:	f7fe bfb5 	b.w	15f42 <__ssvfscanf_r+0x4e>
   16fd8:	2303      	movs	r3, #3
   16fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   16fdc:	f7ff b993 	b.w	16306 <__ssvfscanf_r+0x412>
   16fe0:	00018b0d 	.word	0x00018b0d
   16fe4:	2000104c 	.word	0x2000104c
   16fe8:	00011e79 	.word	0x00011e79
   16fec:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   16ff0:	4293      	cmp	r3, r2
   16ff2:	f200 8297 	bhi.w	17524 <__ssvfscanf_r+0x1630>
   16ff6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16ff8:	3308      	adds	r3, #8
   16ffa:	b29b      	uxth	r3, r3
   16ffc:	6810      	ldr	r0, [r2, #0]
   16ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
   17000:	0099      	lsls	r1, r3, #2
   17002:	637b      	str	r3, [r7, #52]	; 0x34
   17004:	f7f9 fd60 	bl	10ac8 <realloc>
   17008:	2800      	cmp	r0, #0
   1700a:	f000 827b 	beq.w	17504 <__ssvfscanf_r+0x1610>
   1700e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17012:	8093      	strh	r3, [r2, #4]
   17014:	6010      	str	r0, [r2, #0]
   17016:	e542      	b.n	16a9e <__ssvfscanf_r+0xbaa>
   17018:	2101      	movs	r1, #1
   1701a:	e57a      	b.n	16b12 <__ssvfscanf_r+0xc1e>
   1701c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17020:	4293      	cmp	r3, r2
   17022:	f200 8293 	bhi.w	1754c <__ssvfscanf_r+0x1658>
   17026:	3308      	adds	r3, #8
   17028:	b29e      	uxth	r6, r3
   1702a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1702c:	00b1      	lsls	r1, r6, #2
   1702e:	6818      	ldr	r0, [r3, #0]
   17030:	f7f9 fd4a 	bl	10ac8 <realloc>
   17034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17036:	2800      	cmp	r0, #0
   17038:	f000 823e 	beq.w	174b8 <__ssvfscanf_r+0x15c4>
   1703c:	809e      	strh	r6, [r3, #4]
   1703e:	6018      	str	r0, [r3, #0]
   17040:	f7ff ba9b 	b.w	1657a <__ssvfscanf_r+0x686>
   17044:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17048:	4293      	cmp	r3, r2
   1704a:	f200 827f 	bhi.w	1754c <__ssvfscanf_r+0x1658>
   1704e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17050:	3308      	adds	r3, #8
   17052:	b29b      	uxth	r3, r3
   17054:	0099      	lsls	r1, r3, #2
   17056:	6810      	ldr	r0, [r2, #0]
   17058:	64bb      	str	r3, [r7, #72]	; 0x48
   1705a:	f7f9 fd35 	bl	10ac8 <realloc>
   1705e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17060:	2800      	cmp	r0, #0
   17062:	f000 8228 	beq.w	174b6 <__ssvfscanf_r+0x15c2>
   17066:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17068:	8093      	strh	r3, [r2, #4]
   1706a:	6010      	str	r0, [r2, #0]
   1706c:	f7ff bb0e 	b.w	1668c <__ssvfscanf_r+0x798>
   17070:	f64f 72f6 	movw	r2, #65526	; 0xfff6
   17074:	4293      	cmp	r3, r2
   17076:	f200 8255 	bhi.w	17524 <__ssvfscanf_r+0x1630>
   1707a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1707c:	3308      	adds	r3, #8
   1707e:	b29b      	uxth	r3, r3
   17080:	6810      	ldr	r0, [r2, #0]
   17082:	63f8      	str	r0, [r7, #60]	; 0x3c
   17084:	0099      	lsls	r1, r3, #2
   17086:	637b      	str	r3, [r7, #52]	; 0x34
   17088:	f7f9 fd1e 	bl	10ac8 <realloc>
   1708c:	2800      	cmp	r0, #0
   1708e:	f000 8239 	beq.w	17504 <__ssvfscanf_r+0x1610>
   17092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17096:	8093      	strh	r3, [r2, #4]
   17098:	6010      	str	r0, [r2, #0]
   1709a:	e570      	b.n	16b7e <__ssvfscanf_r+0xc8a>
   1709c:	7882      	ldrb	r2, [r0, #2]
   1709e:	f044 0402 	orr.w	r4, r4, #2
   170a2:	3002      	adds	r0, #2
   170a4:	f7fe bfae 	b.w	16004 <__ssvfscanf_r+0x110>
   170a8:	7882      	ldrb	r2, [r0, #2]
   170aa:	f044 0408 	orr.w	r4, r4, #8
   170ae:	3002      	adds	r0, #2
   170b0:	f7fe bfa8 	b.w	16004 <__ssvfscanf_r+0x110>
   170b4:	0763      	lsls	r3, r4, #29
   170b6:	d458      	bmi.n	1716a <__ssvfscanf_r+0x1276>
   170b8:	f014 0201 	ands.w	r2, r4, #1
   170bc:	f47f aa28 	bne.w	16510 <__ssvfscanf_r+0x61c>
   170c0:	07a6      	lsls	r6, r4, #30
   170c2:	f57f aa25 	bpl.w	16510 <__ssvfscanf_r+0x61c>
   170c6:	4bb3      	ldr	r3, [pc, #716]	; (17394 <__ssvfscanf_r+0x14a0>)
   170c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   170ca:	4299      	cmp	r1, r3
   170cc:	4648      	mov	r0, r9
   170ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   170d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   170d2:	f000 823d 	beq.w	17550 <__ssvfscanf_r+0x165c>
   170d6:	f001 fdd1 	bl	18c7c <_strtoll_r>
   170da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   170dc:	f853 2b04 	ldr.w	r2, [r3], #4
   170e0:	633b      	str	r3, [r7, #48]	; 0x30
   170e2:	e9c2 0100 	strd	r0, r1, [r2]
   170e6:	f7ff ba18 	b.w	1651a <__ssvfscanf_r+0x626>
   170ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   170ec:	64f9      	str	r1, [r7, #76]	; 0x4c
   170ee:	f853 2b04 	ldr.w	r2, [r3], #4
   170f2:	633b      	str	r3, [r7, #48]	; 0x30
   170f4:	f882 a000 	strb.w	sl, [r2]
   170f8:	f7fe bf23 	b.w	15f42 <__ssvfscanf_r+0x4e>
   170fc:	f8db 3000 	ldr.w	r3, [fp]
   17100:	4ea5      	ldr	r6, [pc, #660]	; (17398 <__ssvfscanf_r+0x14a4>)
   17102:	781a      	ldrb	r2, [r3, #0]
   17104:	5cb2      	ldrb	r2, [r6, r2]
   17106:	0712      	lsls	r2, r2, #28
   17108:	f53e af1b 	bmi.w	15f42 <__ssvfscanf_r+0x4e>
   1710c:	3301      	adds	r3, #1
   1710e:	f8cb 3000 	str.w	r3, [fp]
   17112:	f8db 3004 	ldr.w	r3, [fp, #4]
   17116:	f1b8 0f01 	cmp.w	r8, #1
   1711a:	f103 33ff 	add.w	r3, r3, #4294967295
   1711e:	f8cb 3004 	str.w	r3, [fp, #4]
   17122:	bf08      	it	eq
   17124:	f10a 0a01 	addeq.w	sl, sl, #1
   17128:	f43e af0b 	beq.w	15f42 <__ssvfscanf_r+0x4e>
   1712c:	2401      	movs	r4, #1
   1712e:	e011      	b.n	17154 <__ssvfscanf_r+0x1260>
   17130:	f8db 3000 	ldr.w	r3, [fp]
   17134:	781a      	ldrb	r2, [r3, #0]
   17136:	5cb2      	ldrb	r2, [r6, r2]
   17138:	0715      	lsls	r5, r2, #28
   1713a:	f103 0301 	add.w	r3, r3, #1
   1713e:	d411      	bmi.n	17164 <__ssvfscanf_r+0x1270>
   17140:	f8cb 3000 	str.w	r3, [fp]
   17144:	f8db 3004 	ldr.w	r3, [fp, #4]
   17148:	3401      	adds	r4, #1
   1714a:	3b01      	subs	r3, #1
   1714c:	4544      	cmp	r4, r8
   1714e:	f8cb 3004 	str.w	r3, [fp, #4]
   17152:	d007      	beq.n	17164 <__ssvfscanf_r+0x1270>
   17154:	2b00      	cmp	r3, #0
   17156:	dceb      	bgt.n	17130 <__ssvfscanf_r+0x123c>
   17158:	4659      	mov	r1, fp
   1715a:	4648      	mov	r0, r9
   1715c:	f002 f874 	bl	19248 <__ssrefill_r>
   17160:	2800      	cmp	r0, #0
   17162:	d0e5      	beq.n	17130 <__ssvfscanf_r+0x123c>
   17164:	44a2      	add	sl, r4
   17166:	f7fe beec 	b.w	15f42 <__ssvfscanf_r+0x4e>
   1716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1716c:	f853 2b04 	ldr.w	r2, [r3], #4
   17170:	633b      	str	r3, [r7, #48]	; 0x30
   17172:	8010      	strh	r0, [r2, #0]
   17174:	f7ff b9d1 	b.w	1651a <__ssvfscanf_r+0x626>
   17178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1717a:	2b00      	cmp	r3, #0
   1717c:	f000 816e 	beq.w	1745c <__ssvfscanf_r+0x1568>
   17180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17182:	f8d3 8000 	ldr.w	r8, [r3]
   17186:	88de      	ldrh	r6, [r3, #6]
   17188:	b176      	cbz	r6, 171a8 <__ssvfscanf_r+0x12b4>
   1718a:	2400      	movs	r4, #0
   1718c:	f1a8 0504 	sub.w	r5, r8, #4
   17190:	46a1      	mov	r9, r4
   17192:	f855 3f04 	ldr.w	r3, [r5, #4]!
   17196:	6818      	ldr	r0, [r3, #0]
   17198:	f7f9 f9d2 	bl	10540 <free>
   1719c:	3401      	adds	r4, #1
   1719e:	682b      	ldr	r3, [r5, #0]
   171a0:	42a6      	cmp	r6, r4
   171a2:	f8c3 9000 	str.w	r9, [r3]
   171a6:	d1f4      	bne.n	17192 <__ssvfscanf_r+0x129e>
   171a8:	f04f 33ff 	mov.w	r3, #4294967295
   171ac:	647b      	str	r3, [r7, #68]	; 0x44
   171ae:	f1b8 0f00 	cmp.w	r8, #0
   171b2:	f47e af9c 	bne.w	160ee <__ssvfscanf_r+0x1fa>
   171b6:	f7fe bf9d 	b.w	160f4 <__ssvfscanf_r+0x200>
   171ba:	4878      	ldr	r0, [pc, #480]	; (1739c <__ssvfscanf_r+0x14a8>)
   171bc:	633b      	str	r3, [r7, #48]	; 0x30
   171be:	f7fb fd97 	bl	12cf0 <nanf>
   171c2:	ed84 0a00 	vstr	s0, [r4]
   171c6:	e4ad      	b.n	16b24 <__ssvfscanf_r+0xc30>
   171c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   171ca:	63fc      	str	r4, [r7, #60]	; 0x3c
   171cc:	f852 5b04 	ldr.w	r5, [r2], #4
   171d0:	633a      	str	r2, [r7, #48]	; 0x30
   171d2:	64bc      	str	r4, [r7, #72]	; 0x48
   171d4:	e46c      	b.n	16ab0 <__ssvfscanf_r+0xbbc>
   171d6:	b082      	sub	sp, #8
   171d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   171dc:	ab02      	add	r3, sp, #8
   171de:	643b      	str	r3, [r7, #64]	; 0x40
   171e0:	e612      	b.n	16e08 <__ssvfscanf_r+0xf14>
   171e2:	637b      	str	r3, [r7, #52]	; 0x34
   171e4:	0053      	lsls	r3, r2, #1
   171e6:	4620      	mov	r0, r4
   171e8:	4619      	mov	r1, r3
   171ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   171ec:	f7f9 fc6c 	bl	10ac8 <realloc>
   171f0:	4604      	mov	r4, r0
   171f2:	2800      	cmp	r0, #0
   171f4:	f000 80ad 	beq.w	17352 <__ssvfscanf_r+0x145e>
   171f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   171fa:	1985      	adds	r5, r0, r6
   171fc:	6018      	str	r0, [r3, #0]
   171fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17200:	e475      	b.n	16aee <__ssvfscanf_r+0xbfa>
   17202:	697d      	ldr	r5, [r7, #20]
   17204:	4629      	mov	r1, r5
   17206:	230a      	movs	r3, #10
   17208:	3101      	adds	r1, #1
   1720a:	4648      	mov	r0, r9
   1720c:	f7fa fe34 	bl	11e78 <_strtol_r>
   17210:	69bb      	ldr	r3, [r7, #24]
   17212:	1ac2      	subs	r2, r0, r3
   17214:	e59d      	b.n	16d52 <__ssvfscanf_r+0xe5e>
   17216:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1721a:	f853 1b04 	ldr.w	r1, [r3], #4
   1721e:	623a      	str	r2, [r7, #32]
   17220:	64b9      	str	r1, [r7, #72]	; 0x48
   17222:	633b      	str	r3, [r7, #48]	; 0x30
   17224:	62ba      	str	r2, [r7, #40]	; 0x28
   17226:	63fa      	str	r2, [r7, #60]	; 0x3c
   17228:	f7ff b9b2 	b.w	16590 <__ssvfscanf_r+0x69c>
   1722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1722e:	64bc      	str	r4, [r7, #72]	; 0x48
   17230:	f853 5b04 	ldr.w	r5, [r3], #4
   17234:	633b      	str	r3, [r7, #48]	; 0x30
   17236:	e4aa      	b.n	16b8e <__ssvfscanf_r+0xc9a>
   17238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1723a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1723c:	f853 4b04 	ldr.w	r4, [r3], #4
   17240:	61ba      	str	r2, [r7, #24]
   17242:	e9c7 2207 	strd	r2, r2, [r7, #28]
   17246:	633b      	str	r3, [r7, #48]	; 0x30
   17248:	f7ff ba2a 	b.w	166a0 <__ssvfscanf_r+0x7ac>
   1724c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1724e:	6820      	ldr	r0, [r4, #0]
   17250:	f7f9 fc3a 	bl	10ac8 <realloc>
   17254:	2800      	cmp	r0, #0
   17256:	f47f aab3 	bne.w	167c0 <__ssvfscanf_r+0x8cc>
   1725a:	e463      	b.n	16b24 <__ssvfscanf_r+0xc30>
   1725c:	4659      	mov	r1, fp
   1725e:	4648      	mov	r0, r9
   17260:	637b      	str	r3, [r7, #52]	; 0x34
   17262:	f001 fff1 	bl	19248 <__ssrefill_r>
   17266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17268:	2800      	cmp	r0, #0
   1726a:	f43f ac49 	beq.w	16b00 <__ssvfscanf_r+0xc0c>
   1726e:	e44d      	b.n	16b0c <__ssvfscanf_r+0xc18>
   17270:	6818      	ldr	r0, [r3, #0]
   17272:	461c      	mov	r4, r3
   17274:	f7f9 fc28 	bl	10ac8 <realloc>
   17278:	2800      	cmp	r0, #0
   1727a:	f43f accc 	beq.w	16c16 <__ssvfscanf_r+0xd22>
   1727e:	6020      	str	r0, [r4, #0]
   17280:	e4c9      	b.n	16c16 <__ssvfscanf_r+0xd22>
   17282:	2500      	movs	r5, #0
   17284:	e637      	b.n	16ef6 <__ssvfscanf_r+0x1002>
   17286:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   17288:	f8d7 a03c 	ldr.w	sl, [r7, #60]	; 0x3c
   1728c:	627e      	str	r6, [r7, #36]	; 0x24
   1728e:	4644      	mov	r4, r8
   17290:	2d00      	cmp	r5, #0
   17292:	f43f aa7c 	beq.w	1678e <__ssvfscanf_r+0x89a>
   17296:	3d01      	subs	r5, #1
   17298:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   1729c:	465a      	mov	r2, fp
   1729e:	5d59      	ldrb	r1, [r3, r5]
   172a0:	4648      	mov	r0, r9
   172a2:	f001 ff91 	bl	191c8 <_sungetc_r>
   172a6:	2d00      	cmp	r5, #0
   172a8:	d1f5      	bne.n	17296 <__ssvfscanf_r+0x13a2>
   172aa:	f7ff ba70 	b.w	1678e <__ssvfscanf_r+0x89a>
   172ae:	4659      	mov	r1, fp
   172b0:	4648      	mov	r0, r9
   172b2:	f001 ffc9 	bl	19248 <__ssrefill_r>
   172b6:	2800      	cmp	r0, #0
   172b8:	f43f ae22 	beq.w	16f00 <__ssvfscanf_r+0x100c>
   172bc:	627c      	str	r4, [r7, #36]	; 0x24
   172be:	2d00      	cmp	r5, #0
   172c0:	f47e af04 	bne.w	160cc <__ssvfscanf_r+0x1d8>
   172c4:	e628      	b.n	16f18 <__ssvfscanf_r+0x1024>
   172c6:	627c      	str	r4, [r7, #36]	; 0x24
   172c8:	2d00      	cmp	r5, #0
   172ca:	f43f ae25 	beq.w	16f18 <__ssvfscanf_r+0x1024>
   172ce:	3d01      	subs	r5, #1
   172d0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
   172d4:	465a      	mov	r2, fp
   172d6:	5d59      	ldrb	r1, [r3, r5]
   172d8:	4648      	mov	r0, r9
   172da:	f001 ff75 	bl	191c8 <_sungetc_r>
   172de:	2d00      	cmp	r5, #0
   172e0:	d1f5      	bne.n	172ce <__ssvfscanf_r+0x13da>
   172e2:	e619      	b.n	16f18 <__ssvfscanf_r+0x1024>
   172e4:	07e5      	lsls	r5, r4, #31
   172e6:	d43c      	bmi.n	17362 <__ssvfscanf_r+0x146e>
   172e8:	07a4      	lsls	r4, r4, #30
   172ea:	d53a      	bpl.n	17362 <__ssvfscanf_r+0x146e>
   172ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   172ee:	64f9      	str	r1, [r7, #76]	; 0x4c
   172f0:	f853 2b04 	ldr.w	r2, [r3], #4
   172f4:	633b      	str	r3, [r7, #48]	; 0x30
   172f6:	ea4f 73ea 	mov.w	r3, sl, asr #31
   172fa:	f8c2 a000 	str.w	sl, [r2]
   172fe:	6053      	str	r3, [r2, #4]
   17300:	f7fe be1f 	b.w	15f42 <__ssvfscanf_r+0x4e>
   17304:	ee18 9a10 	vmov	r9, s16
   17308:	461e      	mov	r6, r3
   1730a:	f7ff b814 	b.w	16336 <__ssvfscanf_r+0x442>
   1730e:	2301      	movs	r3, #1
   17310:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
   17314:	64bb      	str	r3, [r7, #72]	; 0x48
   17316:	f7fe bff6 	b.w	16306 <__ssvfscanf_r+0x412>
   1731a:	f1b8 0f01 	cmp.w	r8, #1
   1731e:	bf38      	it	cc
   17320:	f04f 0801 	movcc.w	r8, #1
   17324:	f014 0301 	ands.w	r3, r4, #1
   17328:	d13a      	bne.n	173a0 <__ssvfscanf_r+0x14ac>
   1732a:	06e5      	lsls	r5, r4, #27
   1732c:	f100 8136 	bmi.w	1759c <__ssvfscanf_r+0x16a8>
   17330:	0624      	lsls	r4, r4, #24
   17332:	f140 814c 	bpl.w	175ce <__ssvfscanf_r+0x16da>
   17336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17338:	f853 5b04 	ldr.w	r5, [r3], #4
   1733c:	64bb      	str	r3, [r7, #72]	; 0x48
   1733e:	2d00      	cmp	r5, #0
   17340:	f43e aecd 	beq.w	160de <__ssvfscanf_r+0x1ea>
   17344:	4640      	mov	r0, r8
   17346:	f7f9 f8f3 	bl	10530 <malloc>
   1734a:	4603      	mov	r3, r0
   1734c:	2800      	cmp	r0, #0
   1734e:	f040 80dc 	bne.w	1750a <__ssvfscanf_r+0x1616>
   17352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17354:	2b00      	cmp	r3, #0
   17356:	f000 8081 	beq.w	1745c <__ssvfscanf_r+0x1568>
   1735a:	f8d3 8000 	ldr.w	r8, [r3]
   1735e:	88de      	ldrh	r6, [r3, #6]
   17360:	e712      	b.n	17188 <__ssvfscanf_r+0x1294>
   17362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17364:	64f9      	str	r1, [r7, #76]	; 0x4c
   17366:	f853 2b04 	ldr.w	r2, [r3], #4
   1736a:	f8c2 a000 	str.w	sl, [r2]
   1736e:	633b      	str	r3, [r7, #48]	; 0x30
   17370:	f7fe bde7 	b.w	15f42 <__ssvfscanf_r+0x4e>
   17374:	462b      	mov	r3, r5
   17376:	6abd      	ldr	r5, [r7, #40]	; 0x28
   17378:	42ab      	cmp	r3, r5
   1737a:	f67e aeb0 	bls.w	160de <__ssvfscanf_r+0x1ea>
   1737e:	461c      	mov	r4, r3
   17380:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   17384:	465a      	mov	r2, fp
   17386:	4648      	mov	r0, r9
   17388:	f001 ff1e 	bl	191c8 <_sungetc_r>
   1738c:	42ac      	cmp	r4, r5
   1738e:	d1f7      	bne.n	17380 <__ssvfscanf_r+0x148c>
   17390:	f7fe bea5 	b.w	160de <__ssvfscanf_r+0x1ea>
   17394:	00018b0d 	.word	0x00018b0d
   17398:	20001055 	.word	0x20001055
   1739c:	20000560 	.word	0x20000560
   173a0:	f014 0310 	ands.w	r3, r4, #16
   173a4:	637b      	str	r3, [r7, #52]	; 0x34
   173a6:	d05e      	beq.n	17466 <__ssvfscanf_r+0x1572>
   173a8:	2500      	movs	r5, #0
   173aa:	63fd      	str	r5, [r7, #60]	; 0x3c
   173ac:	64bd      	str	r5, [r7, #72]	; 0x48
   173ae:	462e      	mov	r6, r5
   173b0:	2400      	movs	r4, #0
   173b2:	464b      	mov	r3, r9
   173b4:	46c1      	mov	r9, r8
   173b6:	46a8      	mov	r8, r5
   173b8:	4625      	mov	r5, r4
   173ba:	461c      	mov	r4, r3
   173bc:	f7fb f958 	bl	12670 <__locale_mb_cur_max>
   173c0:	42a8      	cmp	r0, r5
   173c2:	f43e ae83 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   173c6:	e9db 3200 	ldrd	r3, r2, [fp]
   173ca:	f813 1b01 	ldrb.w	r1, [r3], #1
   173ce:	3a01      	subs	r2, #1
   173d0:	e9cb 3200 	strd	r3, r2, [fp]
   173d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   173d6:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   173da:	2a03      	cmp	r2, #3
   173dc:	5541      	strb	r1, [r0, r5]
   173de:	f105 0301 	add.w	r3, r5, #1
   173e2:	f107 0568 	add.w	r5, r7, #104	; 0x68
   173e6:	d102      	bne.n	173ee <__ssvfscanf_r+0x14fa>
   173e8:	682a      	ldr	r2, [r5, #0]
   173ea:	2a04      	cmp	r2, #4
   173ec:	d006      	beq.n	173fc <__ssvfscanf_r+0x1508>
   173ee:	2208      	movs	r2, #8
   173f0:	2100      	movs	r1, #0
   173f2:	4628      	mov	r0, r5
   173f4:	62bb      	str	r3, [r7, #40]	; 0x28
   173f6:	f7fb f81b 	bl	12430 <memset>
   173fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   173fc:	9500      	str	r5, [sp, #0]
   173fe:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   17402:	4631      	mov	r1, r6
   17404:	4620      	mov	r0, r4
   17406:	62bb      	str	r3, [r7, #40]	; 0x28
   17408:	f001 fd0a 	bl	18e20 <_mbrtowc_r>
   1740c:	1c43      	adds	r3, r0, #1
   1740e:	6278      	str	r0, [r7, #36]	; 0x24
   17410:	f43e ae5c 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   17414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17416:	2800      	cmp	r0, #0
   17418:	f040 8147 	bne.w	176aa <__ssvfscanf_r+0x17b6>
   1741c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1741e:	b902      	cbnz	r2, 17422 <__ssvfscanf_r+0x152e>
   17420:	6032      	str	r2, [r6, #0]
   17422:	449a      	add	sl, r3
   17424:	f109 39ff 	add.w	r9, r9, #4294967295
   17428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1742a:	2b00      	cmp	r3, #0
   1742c:	f040 8175 	bne.w	1771a <__ssvfscanf_r+0x1826>
   17430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17432:	2b00      	cmp	r3, #0
   17434:	f000 8170 	beq.w	17718 <__ssvfscanf_r+0x1824>
   17438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1743a:	1af5      	subs	r5, r6, r3
   1743c:	ebb8 0fa5 	cmp.w	r8, r5, asr #2
   17440:	f200 816a 	bhi.w	17718 <__ssvfscanf_r+0x1824>
   17444:	4618      	mov	r0, r3
   17446:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   1744a:	f7f9 fb3d 	bl	10ac8 <realloc>
   1744e:	63f8      	str	r0, [r7, #60]	; 0x3c
   17450:	2800      	cmp	r0, #0
   17452:	f040 815c 	bne.w	1770e <__ssvfscanf_r+0x181a>
   17456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17458:	2b00      	cmp	r3, #0
   1745a:	d12d      	bne.n	174b8 <__ssvfscanf_r+0x15c4>
   1745c:	f04f 33ff 	mov.w	r3, #4294967295
   17460:	647b      	str	r3, [r7, #68]	; 0x44
   17462:	f7fe be47 	b.w	160f4 <__ssvfscanf_r+0x200>
   17466:	0622      	lsls	r2, r4, #24
   17468:	f140 808f 	bpl.w	1758a <__ssvfscanf_r+0x1696>
   1746c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
   1746e:	f854 3b04 	ldr.w	r3, [r4], #4
   17472:	64bb      	str	r3, [r7, #72]	; 0x48
   17474:	2b00      	cmp	r3, #0
   17476:	f43e ae32 	beq.w	160de <__ssvfscanf_r+0x1ea>
   1747a:	2080      	movs	r0, #128	; 0x80
   1747c:	f7f9 f858 	bl	10530 <malloc>
   17480:	4606      	mov	r6, r0
   17482:	2800      	cmp	r0, #0
   17484:	d0e7      	beq.n	17456 <__ssvfscanf_r+0x1562>
   17486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17488:	6018      	str	r0, [r3, #0]
   1748a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1748c:	88dd      	ldrh	r5, [r3, #6]
   1748e:	889a      	ldrh	r2, [r3, #4]
   17490:	4295      	cmp	r5, r2
   17492:	f0c0 80b3 	bcc.w	175fc <__ssvfscanf_r+0x1708>
   17496:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1749a:	428a      	cmp	r2, r1
   1749c:	d856      	bhi.n	1754c <__ssvfscanf_r+0x1658>
   1749e:	3208      	adds	r2, #8
   174a0:	b293      	uxth	r3, r2
   174a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   174a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   174a6:	0099      	lsls	r1, r3, #2
   174a8:	6810      	ldr	r0, [r2, #0]
   174aa:	f7f9 fb0d 	bl	10ac8 <realloc>
   174ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   174b0:	2800      	cmp	r0, #0
   174b2:	f040 80ae 	bne.w	17612 <__ssvfscanf_r+0x171e>
   174b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   174b8:	88db      	ldrh	r3, [r3, #6]
   174ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   174bc:	461e      	mov	r6, r3
   174be:	f8d2 8000 	ldr.w	r8, [r2]
   174c2:	e661      	b.n	17188 <__ssvfscanf_r+0x1294>
   174c4:	462b      	mov	r3, r5
   174c6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   174c8:	42ab      	cmp	r3, r5
   174ca:	f67e ae08 	bls.w	160de <__ssvfscanf_r+0x1ea>
   174ce:	461c      	mov	r4, r3
   174d0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   174d4:	465a      	mov	r2, fp
   174d6:	4648      	mov	r0, r9
   174d8:	f001 fe76 	bl	191c8 <_sungetc_r>
   174dc:	42ac      	cmp	r4, r5
   174de:	d1f7      	bne.n	174d0 <__ssvfscanf_r+0x15dc>
   174e0:	f7fe bdfd 	b.w	160de <__ssvfscanf_r+0x1ea>
   174e4:	4610      	mov	r0, r2
   174e6:	00d9      	lsls	r1, r3, #3
   174e8:	461e      	mov	r6, r3
   174ea:	f7f9 faed 	bl	10ac8 <realloc>
   174ee:	62b8      	str	r0, [r7, #40]	; 0x28
   174f0:	2800      	cmp	r0, #0
   174f2:	d0b0      	beq.n	17456 <__ssvfscanf_r+0x1562>
   174f4:	1942      	adds	r2, r0, r5
   174f6:	64ba      	str	r2, [r7, #72]	; 0x48
   174f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   174fa:	6b7d      	ldr	r5, [r7, #52]	; 0x34
   174fc:	6010      	str	r0, [r2, #0]
   174fe:	0073      	lsls	r3, r6, #1
   17500:	623b      	str	r3, [r7, #32]
   17502:	e4f8      	b.n	16ef6 <__ssvfscanf_r+0x1002>
   17504:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17508:	e63e      	b.n	17188 <__ssvfscanf_r+0x1294>
   1750a:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1750c:	6028      	str	r0, [r5, #0]
   1750e:	88ce      	ldrh	r6, [r1, #6]
   17510:	888a      	ldrh	r2, [r1, #4]
   17512:	4296      	cmp	r6, r2
   17514:	f0c0 808e 	bcc.w	17634 <__ssvfscanf_r+0x1740>
   17518:	f64f 71f6 	movw	r1, #65526	; 0xfff6
   1751c:	428a      	cmp	r2, r1
   1751e:	6338      	str	r0, [r7, #48]	; 0x30
   17520:	f240 80a5 	bls.w	1766e <__ssvfscanf_r+0x177a>
   17524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17526:	f8d3 8000 	ldr.w	r8, [r3]
   1752a:	e62d      	b.n	17188 <__ssvfscanf_r+0x1294>
   1752c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1752e:	4295      	cmp	r5, r2
   17530:	f67e add5 	bls.w	160de <__ssvfscanf_r+0x1ea>
   17534:	462c      	mov	r4, r5
   17536:	6abd      	ldr	r5, [r7, #40]	; 0x28
   17538:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   1753c:	465a      	mov	r2, fp
   1753e:	4648      	mov	r0, r9
   17540:	f001 fe42 	bl	191c8 <_sungetc_r>
   17544:	42ac      	cmp	r4, r5
   17546:	d1f7      	bne.n	17538 <__ssvfscanf_r+0x1644>
   17548:	f7fe bdc9 	b.w	160de <__ssvfscanf_r+0x1ea>
   1754c:	462b      	mov	r3, r5
   1754e:	e7b4      	b.n	174ba <__ssvfscanf_r+0x15c6>
   17550:	f001 fc64 	bl	18e1c <_strtoull_r>
   17554:	e5c1      	b.n	170da <__ssvfscanf_r+0x11e6>
   17556:	f8d8 3000 	ldr.w	r3, [r8]
   1755a:	461d      	mov	r5, r3
   1755c:	3301      	adds	r3, #1
   1755e:	f47f a8d5 	bne.w	1670c <__ssvfscanf_r+0x818>
   17562:	462a      	mov	r2, r5
   17564:	f7ff b8e8 	b.w	16738 <__ssvfscanf_r+0x844>
   17568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1756a:	6818      	ldr	r0, [r3, #0]
   1756c:	f001 fcb4 	bl	18ed8 <iswspace>
   17570:	2800      	cmp	r0, #0
   17572:	f47f aea8 	bne.w	172c6 <__ssvfscanf_r+0x13d2>
   17576:	2c03      	cmp	r4, #3
   17578:	44aa      	add	sl, r5
   1757a:	f47f a849 	bne.w	16610 <__ssvfscanf_r+0x71c>
   1757e:	6833      	ldr	r3, [r6, #0]
   17580:	2b04      	cmp	r3, #4
   17582:	f47f a845 	bne.w	16610 <__ssvfscanf_r+0x71c>
   17586:	f7ff b845 	b.w	16614 <__ssvfscanf_r+0x720>
   1758a:	e9d7 320c 	ldrd	r3, r2, [r7, #48]	; 0x30
   1758e:	f853 6b04 	ldr.w	r6, [r3], #4
   17592:	633b      	str	r3, [r7, #48]	; 0x30
   17594:	4615      	mov	r5, r2
   17596:	63fa      	str	r2, [r7, #60]	; 0x3c
   17598:	64ba      	str	r2, [r7, #72]	; 0x48
   1759a:	e709      	b.n	173b0 <__ssvfscanf_r+0x14bc>
   1759c:	461c      	mov	r4, r3
   1759e:	f8db 3004 	ldr.w	r3, [fp, #4]
   175a2:	4598      	cmp	r8, r3
   175a4:	dd39      	ble.n	1761a <__ssvfscanf_r+0x1726>
   175a6:	f8db 2000 	ldr.w	r2, [fp]
   175aa:	441a      	add	r2, r3
   175ac:	f8cb 2000 	str.w	r2, [fp]
   175b0:	4659      	mov	r1, fp
   175b2:	4648      	mov	r0, r9
   175b4:	441c      	add	r4, r3
   175b6:	eba8 0803 	sub.w	r8, r8, r3
   175ba:	f001 fe45 	bl	19248 <__ssrefill_r>
   175be:	2800      	cmp	r0, #0
   175c0:	d0ed      	beq.n	1759e <__ssvfscanf_r+0x16aa>
   175c2:	2c00      	cmp	r4, #0
   175c4:	f43e ad82 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   175c8:	44a2      	add	sl, r4
   175ca:	f7fe bcba 	b.w	15f42 <__ssvfscanf_r+0x4e>
   175ce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   175d0:	4643      	mov	r3, r8
   175d2:	6829      	ldr	r1, [r5, #0]
   175d4:	f8cd b000 	str.w	fp, [sp]
   175d8:	2201      	movs	r2, #1
   175da:	4648      	mov	r0, r9
   175dc:	f001 fe52 	bl	19284 <_sfread_r>
   175e0:	4604      	mov	r4, r0
   175e2:	2800      	cmp	r0, #0
   175e4:	f43e ad72 	beq.w	160cc <__ssvfscanf_r+0x1d8>
   175e8:	3504      	adds	r5, #4
   175ea:	64bd      	str	r5, [r7, #72]	; 0x48
   175ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   175ee:	3301      	adds	r3, #1
   175f0:	647b      	str	r3, [r7, #68]	; 0x44
   175f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   175f4:	633b      	str	r3, [r7, #48]	; 0x30
   175f6:	44a2      	add	sl, r4
   175f8:	f7fe bca3 	b.w	15f42 <__ssvfscanf_r+0x4e>
   175fc:	6818      	ldr	r0, [r3, #0]
   175fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17600:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
   17604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17606:	633c      	str	r4, [r7, #48]	; 0x30
   17608:	3501      	adds	r5, #1
   1760a:	80dd      	strh	r5, [r3, #6]
   1760c:	63fe      	str	r6, [r7, #60]	; 0x3c
   1760e:	2520      	movs	r5, #32
   17610:	e6ce      	b.n	173b0 <__ssvfscanf_r+0x14bc>
   17612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17614:	8093      	strh	r3, [r2, #4]
   17616:	6010      	str	r0, [r2, #0]
   17618:	e7f1      	b.n	175fe <__ssvfscanf_r+0x170a>
   1761a:	eba3 0308 	sub.w	r3, r3, r8
   1761e:	f8cb 3004 	str.w	r3, [fp, #4]
   17622:	f8db 3000 	ldr.w	r3, [fp]
   17626:	4444      	add	r4, r8
   17628:	4443      	add	r3, r8
   1762a:	f8cb 3000 	str.w	r3, [fp]
   1762e:	44a2      	add	sl, r4
   17630:	f7fe bc87 	b.w	15f42 <__ssvfscanf_r+0x4e>
   17634:	680a      	ldr	r2, [r1, #0]
   17636:	63fa      	str	r2, [r7, #60]	; 0x3c
   17638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1763a:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
   1763e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17640:	3601      	adds	r6, #1
   17642:	b2b6      	uxth	r6, r6
   17644:	80d6      	strh	r6, [r2, #6]
   17646:	4619      	mov	r1, r3
   17648:	f8cd b000 	str.w	fp, [sp]
   1764c:	4643      	mov	r3, r8
   1764e:	2201      	movs	r2, #1
   17650:	4648      	mov	r0, r9
   17652:	f001 fe17 	bl	19284 <_sfread_r>
   17656:	4604      	mov	r4, r0
   17658:	b1d8      	cbz	r0, 17692 <__ssvfscanf_r+0x179e>
   1765a:	4580      	cmp	r8, r0
   1765c:	d9c6      	bls.n	175ec <__ssvfscanf_r+0x16f8>
   1765e:	6828      	ldr	r0, [r5, #0]
   17660:	4621      	mov	r1, r4
   17662:	f7f9 fa31 	bl	10ac8 <realloc>
   17666:	2800      	cmp	r0, #0
   17668:	d0c0      	beq.n	175ec <__ssvfscanf_r+0x16f8>
   1766a:	6028      	str	r0, [r5, #0]
   1766c:	e7be      	b.n	175ec <__ssvfscanf_r+0x16f8>
   1766e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17670:	3208      	adds	r2, #8
   17672:	b294      	uxth	r4, r2
   17674:	681a      	ldr	r2, [r3, #0]
   17676:	637a      	str	r2, [r7, #52]	; 0x34
   17678:	4610      	mov	r0, r2
   1767a:	00a1      	lsls	r1, r4, #2
   1767c:	f7f9 fa24 	bl	10ac8 <realloc>
   17680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17682:	63f8      	str	r0, [r7, #60]	; 0x3c
   17684:	2800      	cmp	r0, #0
   17686:	d05b      	beq.n	17740 <__ssvfscanf_r+0x184c>
   17688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1768a:	809c      	strh	r4, [r3, #4]
   1768c:	6018      	str	r0, [r3, #0]
   1768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17690:	e7d2      	b.n	17638 <__ssvfscanf_r+0x1744>
   17692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17694:	f8d7 803c 	ldr.w	r8, [r7, #60]	; 0x3c
   17698:	2b00      	cmp	r3, #0
   1769a:	f43f ad75 	beq.w	17188 <__ssvfscanf_r+0x1294>
   1769e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   176a2:	065b      	lsls	r3, r3, #25
   176a4:	f57e ad1d 	bpl.w	160e2 <__ssvfscanf_r+0x1ee>
   176a8:	e56a      	b.n	17180 <__ssvfscanf_r+0x128c>
   176aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   176ac:	3202      	adds	r2, #2
   176ae:	d11d      	bne.n	176ec <__ssvfscanf_r+0x17f8>
   176b0:	f8db 2004 	ldr.w	r2, [fp, #4]
   176b4:	2a00      	cmp	r2, #0
   176b6:	461d      	mov	r5, r3
   176b8:	f73f ae80 	bgt.w	173bc <__ssvfscanf_r+0x14c8>
   176bc:	4659      	mov	r1, fp
   176be:	4620      	mov	r0, r4
   176c0:	f001 fdc2 	bl	19248 <__ssrefill_r>
   176c4:	b9e0      	cbnz	r0, 17700 <__ssvfscanf_r+0x180c>
   176c6:	f1b9 0f00 	cmp.w	r9, #0
   176ca:	f47f ae77 	bne.w	173bc <__ssvfscanf_r+0x14c8>
   176ce:	4645      	mov	r5, r8
   176d0:	46a1      	mov	r9, r4
   176d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   176d4:	b123      	cbz	r3, 176e0 <__ssvfscanf_r+0x17ec>
   176d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176d8:	1af1      	subs	r1, r6, r3
   176da:	ebb5 0fa1 	cmp.w	r5, r1, asr #2
   176de:	d827      	bhi.n	17730 <__ssvfscanf_r+0x183c>
   176e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   176e2:	2b00      	cmp	r3, #0
   176e4:	f47e ac2d 	bne.w	15f42 <__ssvfscanf_r+0x4e>
   176e8:	f7ff ba1c 	b.w	16b24 <__ssvfscanf_r+0xc30>
   176ec:	449a      	add	sl, r3
   176ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176f0:	2b03      	cmp	r3, #3
   176f2:	f47f ae97 	bne.w	17424 <__ssvfscanf_r+0x1530>
   176f6:	682b      	ldr	r3, [r5, #0]
   176f8:	2b04      	cmp	r3, #4
   176fa:	f47f ae93 	bne.w	17424 <__ssvfscanf_r+0x1530>
   176fe:	e693      	b.n	17428 <__ssvfscanf_r+0x1534>
   17700:	46a1      	mov	r9, r4
   17702:	462c      	mov	r4, r5
   17704:	4645      	mov	r5, r8
   17706:	2c00      	cmp	r4, #0
   17708:	d0e3      	beq.n	176d2 <__ssvfscanf_r+0x17de>
   1770a:	f7fe bcdf 	b.w	160cc <__ssvfscanf_r+0x1d8>
   1770e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17710:	1946      	adds	r6, r0, r5
   17712:	6010      	str	r0, [r2, #0]
   17714:	ea4f 0848 	mov.w	r8, r8, lsl #1
   17718:	3604      	adds	r6, #4
   1771a:	f8db 3004 	ldr.w	r3, [fp, #4]
   1771e:	2b00      	cmp	r3, #0
   17720:	f04f 0500 	mov.w	r5, #0
   17724:	ddca      	ble.n	176bc <__ssvfscanf_r+0x17c8>
   17726:	f1b9 0f00 	cmp.w	r9, #0
   1772a:	f47f ae47 	bne.w	173bc <__ssvfscanf_r+0x14c8>
   1772e:	e7ce      	b.n	176ce <__ssvfscanf_r+0x17da>
   17730:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   17732:	6820      	ldr	r0, [r4, #0]
   17734:	f7f9 f9c8 	bl	10ac8 <realloc>
   17738:	2800      	cmp	r0, #0
   1773a:	d0d1      	beq.n	176e0 <__ssvfscanf_r+0x17ec>
   1773c:	6020      	str	r0, [r4, #0]
   1773e:	e7cf      	b.n	176e0 <__ssvfscanf_r+0x17ec>
   17740:	4690      	mov	r8, r2
   17742:	e521      	b.n	17188 <__ssvfscanf_r+0x1294>

00017744 <_fclose_r>:
   17744:	b570      	push	{r4, r5, r6, lr}
   17746:	2900      	cmp	r1, #0
   17748:	d04b      	beq.n	177e2 <_fclose_r+0x9e>
   1774a:	4606      	mov	r6, r0
   1774c:	460c      	mov	r4, r1
   1774e:	b110      	cbz	r0, 17756 <_fclose_r+0x12>
   17750:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17752:	2b00      	cmp	r3, #0
   17754:	d048      	beq.n	177e8 <_fclose_r+0xa4>
   17756:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17758:	07d8      	lsls	r0, r3, #31
   1775a:	d534      	bpl.n	177c6 <_fclose_r+0x82>
   1775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   17760:	2b00      	cmp	r3, #0
   17762:	d03e      	beq.n	177e2 <_fclose_r+0x9e>
   17764:	4621      	mov	r1, r4
   17766:	4630      	mov	r0, r6
   17768:	f000 f850 	bl	1780c <__sflush_r>
   1776c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1776e:	4605      	mov	r5, r0
   17770:	b133      	cbz	r3, 17780 <_fclose_r+0x3c>
   17772:	69e1      	ldr	r1, [r4, #28]
   17774:	4630      	mov	r0, r6
   17776:	4798      	blx	r3
   17778:	2800      	cmp	r0, #0
   1777a:	bfb8      	it	lt
   1777c:	f04f 35ff 	movlt.w	r5, #4294967295
   17780:	89a3      	ldrh	r3, [r4, #12]
   17782:	061a      	lsls	r2, r3, #24
   17784:	d43c      	bmi.n	17800 <_fclose_r+0xbc>
   17786:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17788:	b141      	cbz	r1, 1779c <_fclose_r+0x58>
   1778a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1778e:	4299      	cmp	r1, r3
   17790:	d002      	beq.n	17798 <_fclose_r+0x54>
   17792:	4630      	mov	r0, r6
   17794:	f7fb fb46 	bl	12e24 <_free_r>
   17798:	2300      	movs	r3, #0
   1779a:	6323      	str	r3, [r4, #48]	; 0x30
   1779c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1779e:	b121      	cbz	r1, 177aa <_fclose_r+0x66>
   177a0:	4630      	mov	r0, r6
   177a2:	f7fb fb3f 	bl	12e24 <_free_r>
   177a6:	2300      	movs	r3, #0
   177a8:	6463      	str	r3, [r4, #68]	; 0x44
   177aa:	f7fa fc27 	bl	11ffc <__sfp_lock_acquire>
   177ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   177b0:	2200      	movs	r2, #0
   177b2:	07db      	lsls	r3, r3, #31
   177b4:	81a2      	strh	r2, [r4, #12]
   177b6:	d51f      	bpl.n	177f8 <_fclose_r+0xb4>
   177b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   177ba:	f7fa fff1 	bl	127a0 <__retarget_lock_close_recursive>
   177be:	f7fa fc23 	bl	12008 <__sfp_lock_release>
   177c2:	4628      	mov	r0, r5
   177c4:	bd70      	pop	{r4, r5, r6, pc}
   177c6:	89a3      	ldrh	r3, [r4, #12]
   177c8:	0599      	lsls	r1, r3, #22
   177ca:	d4cb      	bmi.n	17764 <_fclose_r+0x20>
   177cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   177ce:	f7fa ffe9 	bl	127a4 <__retarget_lock_acquire_recursive>
   177d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   177d6:	2b00      	cmp	r3, #0
   177d8:	d1c4      	bne.n	17764 <_fclose_r+0x20>
   177da:	6e65      	ldr	r5, [r4, #100]	; 0x64
   177dc:	f015 0501 	ands.w	r5, r5, #1
   177e0:	d005      	beq.n	177ee <_fclose_r+0xaa>
   177e2:	2500      	movs	r5, #0
   177e4:	4628      	mov	r0, r5
   177e6:	bd70      	pop	{r4, r5, r6, pc}
   177e8:	f7fa fbea 	bl	11fc0 <__sinit>
   177ec:	e7b3      	b.n	17756 <_fclose_r+0x12>
   177ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
   177f0:	f7fa ffda 	bl	127a8 <__retarget_lock_release_recursive>
   177f4:	4628      	mov	r0, r5
   177f6:	bd70      	pop	{r4, r5, r6, pc}
   177f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   177fa:	f7fa ffd5 	bl	127a8 <__retarget_lock_release_recursive>
   177fe:	e7db      	b.n	177b8 <_fclose_r+0x74>
   17800:	6921      	ldr	r1, [r4, #16]
   17802:	4630      	mov	r0, r6
   17804:	f7fb fb0e 	bl	12e24 <_free_r>
   17808:	e7bd      	b.n	17786 <_fclose_r+0x42>
   1780a:	bf00      	nop

0001780c <__sflush_r>:
   1780c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   17810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17814:	460c      	mov	r4, r1
   17816:	0711      	lsls	r1, r2, #28
   17818:	4680      	mov	r8, r0
   1781a:	d447      	bmi.n	178ac <__sflush_r+0xa0>
   1781c:	6863      	ldr	r3, [r4, #4]
   1781e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   17822:	2b00      	cmp	r3, #0
   17824:	81a2      	strh	r2, [r4, #12]
   17826:	dd5e      	ble.n	178e6 <__sflush_r+0xda>
   17828:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   1782a:	2d00      	cmp	r5, #0
   1782c:	d058      	beq.n	178e0 <__sflush_r+0xd4>
   1782e:	2300      	movs	r3, #0
   17830:	f8d8 6000 	ldr.w	r6, [r8]
   17834:	f8c8 3000 	str.w	r3, [r8]
   17838:	b293      	uxth	r3, r2
   1783a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   1783e:	d156      	bne.n	178ee <__sflush_r+0xe2>
   17840:	2301      	movs	r3, #1
   17842:	69e1      	ldr	r1, [r4, #28]
   17844:	4640      	mov	r0, r8
   17846:	47a8      	blx	r5
   17848:	1c43      	adds	r3, r0, #1
   1784a:	d067      	beq.n	1791c <__sflush_r+0x110>
   1784c:	89a3      	ldrh	r3, [r4, #12]
   1784e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   17850:	075f      	lsls	r7, r3, #29
   17852:	d505      	bpl.n	17860 <__sflush_r+0x54>
   17854:	6863      	ldr	r3, [r4, #4]
   17856:	1ac0      	subs	r0, r0, r3
   17858:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1785a:	b10b      	cbz	r3, 17860 <__sflush_r+0x54>
   1785c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1785e:	1ac0      	subs	r0, r0, r3
   17860:	69e1      	ldr	r1, [r4, #28]
   17862:	4602      	mov	r2, r0
   17864:	2300      	movs	r3, #0
   17866:	4640      	mov	r0, r8
   17868:	47a8      	blx	r5
   1786a:	1c41      	adds	r1, r0, #1
   1786c:	d141      	bne.n	178f2 <__sflush_r+0xe6>
   1786e:	f8d8 3000 	ldr.w	r3, [r8]
   17872:	2b00      	cmp	r3, #0
   17874:	d03d      	beq.n	178f2 <__sflush_r+0xe6>
   17876:	2b1d      	cmp	r3, #29
   17878:	d001      	beq.n	1787e <__sflush_r+0x72>
   1787a:	2b16      	cmp	r3, #22
   1787c:	d156      	bne.n	1792c <__sflush_r+0x120>
   1787e:	89a3      	ldrh	r3, [r4, #12]
   17880:	6922      	ldr	r2, [r4, #16]
   17882:	6022      	str	r2, [r4, #0]
   17884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   17888:	2100      	movs	r1, #0
   1788a:	6061      	str	r1, [r4, #4]
   1788c:	81a3      	strh	r3, [r4, #12]
   1788e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   17890:	f8c8 6000 	str.w	r6, [r8]
   17894:	b321      	cbz	r1, 178e0 <__sflush_r+0xd4>
   17896:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1789a:	4299      	cmp	r1, r3
   1789c:	d002      	beq.n	178a4 <__sflush_r+0x98>
   1789e:	4640      	mov	r0, r8
   178a0:	f7fb fac0 	bl	12e24 <_free_r>
   178a4:	2000      	movs	r0, #0
   178a6:	6320      	str	r0, [r4, #48]	; 0x30
   178a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178ac:	6926      	ldr	r6, [r4, #16]
   178ae:	b1be      	cbz	r6, 178e0 <__sflush_r+0xd4>
   178b0:	b293      	uxth	r3, r2
   178b2:	6825      	ldr	r5, [r4, #0]
   178b4:	6026      	str	r6, [r4, #0]
   178b6:	079a      	lsls	r2, r3, #30
   178b8:	bf0c      	ite	eq
   178ba:	6963      	ldreq	r3, [r4, #20]
   178bc:	2300      	movne	r3, #0
   178be:	1bad      	subs	r5, r5, r6
   178c0:	60a3      	str	r3, [r4, #8]
   178c2:	e00b      	b.n	178dc <__sflush_r+0xd0>
   178c4:	462b      	mov	r3, r5
   178c6:	4632      	mov	r2, r6
   178c8:	69e1      	ldr	r1, [r4, #28]
   178ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
   178cc:	4640      	mov	r0, r8
   178ce:	47b8      	blx	r7
   178d0:	f1b0 0c00 	subs.w	ip, r0, #0
   178d4:	eba5 050c 	sub.w	r5, r5, ip
   178d8:	4466      	add	r6, ip
   178da:	dd17      	ble.n	1790c <__sflush_r+0x100>
   178dc:	2d00      	cmp	r5, #0
   178de:	dcf1      	bgt.n	178c4 <__sflush_r+0xb8>
   178e0:	2000      	movs	r0, #0
   178e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   178e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   178e8:	2b00      	cmp	r3, #0
   178ea:	dc9d      	bgt.n	17828 <__sflush_r+0x1c>
   178ec:	e7f8      	b.n	178e0 <__sflush_r+0xd4>
   178ee:	6d20      	ldr	r0, [r4, #80]	; 0x50
   178f0:	e7ae      	b.n	17850 <__sflush_r+0x44>
   178f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   178f6:	6922      	ldr	r2, [r4, #16]
   178f8:	6022      	str	r2, [r4, #0]
   178fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   178fe:	81a3      	strh	r3, [r4, #12]
   17900:	2200      	movs	r2, #0
   17902:	04db      	lsls	r3, r3, #19
   17904:	6062      	str	r2, [r4, #4]
   17906:	d5c2      	bpl.n	1788e <__sflush_r+0x82>
   17908:	6520      	str	r0, [r4, #80]	; 0x50
   1790a:	e7c0      	b.n	1788e <__sflush_r+0x82>
   1790c:	89a3      	ldrh	r3, [r4, #12]
   1790e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17912:	f04f 30ff 	mov.w	r0, #4294967295
   17916:	81a3      	strh	r3, [r4, #12]
   17918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1791c:	f8d8 3000 	ldr.w	r3, [r8]
   17920:	2b00      	cmp	r3, #0
   17922:	d093      	beq.n	1784c <__sflush_r+0x40>
   17924:	2b1d      	cmp	r3, #29
   17926:	d006      	beq.n	17936 <__sflush_r+0x12a>
   17928:	2b16      	cmp	r3, #22
   1792a:	d004      	beq.n	17936 <__sflush_r+0x12a>
   1792c:	89a3      	ldrh	r3, [r4, #12]
   1792e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17932:	81a3      	strh	r3, [r4, #12]
   17934:	e7d5      	b.n	178e2 <__sflush_r+0xd6>
   17936:	f8c8 6000 	str.w	r6, [r8]
   1793a:	e7d1      	b.n	178e0 <__sflush_r+0xd4>

0001793c <_fflush_r>:
   1793c:	b538      	push	{r3, r4, r5, lr}
   1793e:	460c      	mov	r4, r1
   17940:	4605      	mov	r5, r0
   17942:	b108      	cbz	r0, 17948 <_fflush_r+0xc>
   17944:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17946:	b303      	cbz	r3, 1798a <_fflush_r+0x4e>
   17948:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1794c:	b188      	cbz	r0, 17972 <_fflush_r+0x36>
   1794e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17950:	07db      	lsls	r3, r3, #31
   17952:	d401      	bmi.n	17958 <_fflush_r+0x1c>
   17954:	0581      	lsls	r1, r0, #22
   17956:	d50f      	bpl.n	17978 <_fflush_r+0x3c>
   17958:	4628      	mov	r0, r5
   1795a:	4621      	mov	r1, r4
   1795c:	f7ff ff56 	bl	1780c <__sflush_r>
   17960:	6e63      	ldr	r3, [r4, #100]	; 0x64
   17962:	07da      	lsls	r2, r3, #31
   17964:	4605      	mov	r5, r0
   17966:	d402      	bmi.n	1796e <_fflush_r+0x32>
   17968:	89a3      	ldrh	r3, [r4, #12]
   1796a:	059b      	lsls	r3, r3, #22
   1796c:	d508      	bpl.n	17980 <_fflush_r+0x44>
   1796e:	4628      	mov	r0, r5
   17970:	bd38      	pop	{r3, r4, r5, pc}
   17972:	4605      	mov	r5, r0
   17974:	4628      	mov	r0, r5
   17976:	bd38      	pop	{r3, r4, r5, pc}
   17978:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1797a:	f7fa ff13 	bl	127a4 <__retarget_lock_acquire_recursive>
   1797e:	e7eb      	b.n	17958 <_fflush_r+0x1c>
   17980:	6da0      	ldr	r0, [r4, #88]	; 0x58
   17982:	f7fa ff11 	bl	127a8 <__retarget_lock_release_recursive>
   17986:	4628      	mov	r0, r5
   17988:	bd38      	pop	{r3, r4, r5, pc}
   1798a:	f7fa fb19 	bl	11fc0 <__sinit>
   1798e:	e7db      	b.n	17948 <_fflush_r+0xc>

00017990 <__sccl>:
   17990:	b570      	push	{r4, r5, r6, lr}
   17992:	780c      	ldrb	r4, [r1, #0]
   17994:	2c5e      	cmp	r4, #94	; 0x5e
   17996:	4686      	mov	lr, r0
   17998:	d01e      	beq.n	179d8 <__sccl+0x48>
   1799a:	2200      	movs	r2, #0
   1799c:	1c48      	adds	r0, r1, #1
   1799e:	4694      	mov	ip, r2
   179a0:	f10e 33ff 	add.w	r3, lr, #4294967295
   179a4:	f10e 01ff 	add.w	r1, lr, #255	; 0xff
   179a8:	f803 2f01 	strb.w	r2, [r3, #1]!
   179ac:	428b      	cmp	r3, r1
   179ae:	d1fb      	bne.n	179a8 <__sccl+0x18>
   179b0:	b184      	cbz	r4, 179d4 <__sccl+0x44>
   179b2:	f08c 0101 	eor.w	r1, ip, #1
   179b6:	f80e 1004 	strb.w	r1, [lr, r4]
   179ba:	1c45      	adds	r5, r0, #1
   179bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   179c0:	2b2d      	cmp	r3, #45	; 0x2d
   179c2:	d00e      	beq.n	179e2 <__sccl+0x52>
   179c4:	2b5d      	cmp	r3, #93	; 0x5d
   179c6:	d003      	beq.n	179d0 <__sccl+0x40>
   179c8:	b11b      	cbz	r3, 179d2 <__sccl+0x42>
   179ca:	461c      	mov	r4, r3
   179cc:	4628      	mov	r0, r5
   179ce:	e7f2      	b.n	179b6 <__sccl+0x26>
   179d0:	4628      	mov	r0, r5
   179d2:	bd70      	pop	{r4, r5, r6, pc}
   179d4:	3801      	subs	r0, #1
   179d6:	bd70      	pop	{r4, r5, r6, pc}
   179d8:	2201      	movs	r2, #1
   179da:	784c      	ldrb	r4, [r1, #1]
   179dc:	1c88      	adds	r0, r1, #2
   179de:	4694      	mov	ip, r2
   179e0:	e7de      	b.n	179a0 <__sccl+0x10>
   179e2:	f890 c001 	ldrb.w	ip, [r0, #1]
   179e6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   179ea:	d0ee      	beq.n	179ca <__sccl+0x3a>
   179ec:	4564      	cmp	r4, ip
   179ee:	dcec      	bgt.n	179ca <__sccl+0x3a>
   179f0:	1c66      	adds	r6, r4, #1
   179f2:	3002      	adds	r0, #2
   179f4:	eb0e 0206 	add.w	r2, lr, r6
   179f8:	f802 1b01 	strb.w	r1, [r2], #1
   179fc:	eba2 030e 	sub.w	r3, r2, lr
   17a00:	3b01      	subs	r3, #1
   17a02:	459c      	cmp	ip, r3
   17a04:	dcf8      	bgt.n	179f8 <__sccl+0x68>
   17a06:	ebac 0304 	sub.w	r3, ip, r4
   17a0a:	3b01      	subs	r3, #1
   17a0c:	4564      	cmp	r4, ip
   17a0e:	bfa8      	it	ge
   17a10:	2300      	movge	r3, #0
   17a12:	3502      	adds	r5, #2
   17a14:	199c      	adds	r4, r3, r6
   17a16:	e7d1      	b.n	179bc <__sccl+0x2c>

00017a18 <stpncpy>:
   17a18:	ea41 0300 	orr.w	r3, r1, r0
   17a1c:	079b      	lsls	r3, r3, #30
   17a1e:	b430      	push	{r4, r5}
   17a20:	d101      	bne.n	17a26 <stpncpy+0xe>
   17a22:	2a03      	cmp	r2, #3
   17a24:	d80f      	bhi.n	17a46 <stpncpy+0x2e>
   17a26:	f101 3cff 	add.w	ip, r1, #4294967295
   17a2a:	e007      	b.n	17a3c <stpncpy+0x24>
   17a2c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   17a30:	f803 1b01 	strb.w	r1, [r3], #1
   17a34:	1e54      	subs	r4, r2, #1
   17a36:	b1c1      	cbz	r1, 17a6a <stpncpy+0x52>
   17a38:	4622      	mov	r2, r4
   17a3a:	4618      	mov	r0, r3
   17a3c:	4603      	mov	r3, r0
   17a3e:	2a00      	cmp	r2, #0
   17a40:	d1f4      	bne.n	17a2c <stpncpy+0x14>
   17a42:	bc30      	pop	{r4, r5}
   17a44:	4770      	bx	lr
   17a46:	460b      	mov	r3, r1
   17a48:	4619      	mov	r1, r3
   17a4a:	f853 5b04 	ldr.w	r5, [r3], #4
   17a4e:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   17a52:	ea24 0405 	bic.w	r4, r4, r5
   17a56:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   17a5a:	d1e4      	bne.n	17a26 <stpncpy+0xe>
   17a5c:	3a04      	subs	r2, #4
   17a5e:	2a03      	cmp	r2, #3
   17a60:	f840 5b04 	str.w	r5, [r0], #4
   17a64:	4619      	mov	r1, r3
   17a66:	d8ef      	bhi.n	17a48 <stpncpy+0x30>
   17a68:	e7dd      	b.n	17a26 <stpncpy+0xe>
   17a6a:	4402      	add	r2, r0
   17a6c:	2c00      	cmp	r4, #0
   17a6e:	d0e8      	beq.n	17a42 <stpncpy+0x2a>
   17a70:	f803 1b01 	strb.w	r1, [r3], #1
   17a74:	4293      	cmp	r3, r2
   17a76:	d1fb      	bne.n	17a70 <stpncpy+0x58>
   17a78:	bc30      	pop	{r4, r5}
   17a7a:	4770      	bx	lr

00017a7c <_localeconv_r>:
   17a7c:	4800      	ldr	r0, [pc, #0]	; (17a80 <_localeconv_r+0x4>)
   17a7e:	4770      	bx	lr
   17a80:	20009064 	.word	0x20009064
   17a84:	00000000 	.word	0x00000000

00017a88 <frexp>:
   17a88:	b430      	push	{r4, r5}
   17a8a:	b082      	sub	sp, #8
   17a8c:	ed8d 0b00 	vstr	d0, [sp]
   17a90:	9a01      	ldr	r2, [sp, #4]
   17a92:	4c19      	ldr	r4, [pc, #100]	; (17af8 <frexp+0x70>)
   17a94:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17a98:	2100      	movs	r1, #0
   17a9a:	42a3      	cmp	r3, r4
   17a9c:	6001      	str	r1, [r0, #0]
   17a9e:	dc21      	bgt.n	17ae4 <frexp+0x5c>
   17aa0:	9c00      	ldr	r4, [sp, #0]
   17aa2:	431c      	orrs	r4, r3
   17aa4:	d01e      	beq.n	17ae4 <frexp+0x5c>
   17aa6:	4c15      	ldr	r4, [pc, #84]	; (17afc <frexp+0x74>)
   17aa8:	4014      	ands	r4, r2
   17aaa:	b954      	cbnz	r4, 17ac2 <frexp+0x3a>
   17aac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 17af0 <frexp+0x68>
   17ab0:	ee20 7b07 	vmul.f64	d7, d0, d7
   17ab4:	ed8d 7b00 	vstr	d7, [sp]
   17ab8:	9a01      	ldr	r2, [sp, #4]
   17aba:	f06f 0135 	mvn.w	r1, #53	; 0x35
   17abe:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   17ac2:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   17ac6:	e9dd 4500 	ldrd	r4, r5, [sp]
   17aca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   17ace:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   17ad2:	151b      	asrs	r3, r3, #20
   17ad4:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   17ad8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   17adc:	e9cd 4500 	strd	r4, r5, [sp]
   17ae0:	440b      	add	r3, r1
   17ae2:	6003      	str	r3, [r0, #0]
   17ae4:	ed9d 0b00 	vldr	d0, [sp]
   17ae8:	b002      	add	sp, #8
   17aea:	bc30      	pop	{r4, r5}
   17aec:	4770      	bx	lr
   17aee:	bf00      	nop
   17af0:	00000000 	.word	0x00000000
   17af4:	43500000 	.word	0x43500000
   17af8:	7fefffff 	.word	0x7fefffff
   17afc:	7ff00000 	.word	0x7ff00000

00017b00 <__assert_func>:
   17b00:	b500      	push	{lr}
   17b02:	4c0b      	ldr	r4, [pc, #44]	; (17b30 <__assert_func+0x30>)
   17b04:	6825      	ldr	r5, [r4, #0]
   17b06:	4614      	mov	r4, r2
   17b08:	68ee      	ldr	r6, [r5, #12]
   17b0a:	461a      	mov	r2, r3
   17b0c:	b085      	sub	sp, #20
   17b0e:	4603      	mov	r3, r0
   17b10:	460d      	mov	r5, r1
   17b12:	b14c      	cbz	r4, 17b28 <__assert_func+0x28>
   17b14:	4907      	ldr	r1, [pc, #28]	; (17b34 <__assert_func+0x34>)
   17b16:	9500      	str	r5, [sp, #0]
   17b18:	e9cd 1401 	strd	r1, r4, [sp, #4]
   17b1c:	4630      	mov	r0, r6
   17b1e:	4906      	ldr	r1, [pc, #24]	; (17b38 <__assert_func+0x38>)
   17b20:	f001 fabe 	bl	190a0 <fiprintf>
   17b24:	f7f6 ff92 	bl	ea4c <abort>
   17b28:	4904      	ldr	r1, [pc, #16]	; (17b3c <__assert_func+0x3c>)
   17b2a:	460c      	mov	r4, r1
   17b2c:	e7f3      	b.n	17b16 <__assert_func+0x16>
   17b2e:	bf00      	nop
   17b30:	200094fc 	.word	0x200094fc
   17b34:	20000e38 	.word	0x20000e38
   17b38:	20000e48 	.word	0x20000e48
   17b3c:	20000560 	.word	0x20000560

00017b40 <_calloc_r>:
   17b40:	b538      	push	{r3, r4, r5, lr}
   17b42:	fba1 1402 	umull	r1, r4, r1, r2
   17b46:	bb8c      	cbnz	r4, 17bac <_calloc_r+0x6c>
   17b48:	f7f8 fd02 	bl	10550 <_malloc_r>
   17b4c:	4605      	mov	r5, r0
   17b4e:	b1e0      	cbz	r0, 17b8a <_calloc_r+0x4a>
   17b50:	f850 2c04 	ldr.w	r2, [r0, #-4]
   17b54:	f022 0203 	bic.w	r2, r2, #3
   17b58:	3a04      	subs	r2, #4
   17b5a:	2a24      	cmp	r2, #36	; 0x24
   17b5c:	d817      	bhi.n	17b8e <_calloc_r+0x4e>
   17b5e:	2a13      	cmp	r2, #19
   17b60:	d91a      	bls.n	17b98 <_calloc_r+0x58>
   17b62:	2a1b      	cmp	r2, #27
   17b64:	e9c0 4400 	strd	r4, r4, [r0]
   17b68:	d91d      	bls.n	17ba6 <_calloc_r+0x66>
   17b6a:	2a24      	cmp	r2, #36	; 0x24
   17b6c:	bf14      	ite	ne
   17b6e:	f100 0210 	addne.w	r2, r0, #16
   17b72:	f100 0218 	addeq.w	r2, r0, #24
   17b76:	f04f 0300 	mov.w	r3, #0
   17b7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   17b7e:	bf04      	itt	eq
   17b80:	6104      	streq	r4, [r0, #16]
   17b82:	6144      	streq	r4, [r0, #20]
   17b84:	e9c2 3300 	strd	r3, r3, [r2]
   17b88:	6093      	str	r3, [r2, #8]
   17b8a:	4628      	mov	r0, r5
   17b8c:	bd38      	pop	{r3, r4, r5, pc}
   17b8e:	4621      	mov	r1, r4
   17b90:	f7fa fc4e 	bl	12430 <memset>
   17b94:	4628      	mov	r0, r5
   17b96:	bd38      	pop	{r3, r4, r5, pc}
   17b98:	4602      	mov	r2, r0
   17b9a:	2300      	movs	r3, #0
   17b9c:	e9c2 3300 	strd	r3, r3, [r2]
   17ba0:	6093      	str	r3, [r2, #8]
   17ba2:	4628      	mov	r0, r5
   17ba4:	bd38      	pop	{r3, r4, r5, pc}
   17ba6:	f100 0208 	add.w	r2, r0, #8
   17baa:	e7f6      	b.n	17b9a <_calloc_r+0x5a>
   17bac:	f7fa fdcc 	bl	12748 <__errno>
   17bb0:	230c      	movs	r3, #12
   17bb2:	2500      	movs	r5, #0
   17bb4:	6003      	str	r3, [r0, #0]
   17bb6:	e7e8      	b.n	17b8a <_calloc_r+0x4a>

00017bb8 <quorem>:
   17bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bbc:	6903      	ldr	r3, [r0, #16]
   17bbe:	690c      	ldr	r4, [r1, #16]
   17bc0:	42a3      	cmp	r3, r4
   17bc2:	b083      	sub	sp, #12
   17bc4:	f2c0 8087 	blt.w	17cd6 <quorem+0x11e>
   17bc8:	3c01      	subs	r4, #1
   17bca:	f101 0514 	add.w	r5, r1, #20
   17bce:	00a3      	lsls	r3, r4, #2
   17bd0:	f100 0814 	add.w	r8, r0, #20
   17bd4:	9300      	str	r3, [sp, #0]
   17bd6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   17bda:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17bde:	3301      	adds	r3, #1
   17be0:	4681      	mov	r9, r0
   17be2:	429a      	cmp	r2, r3
   17be4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   17be8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   17bec:	9001      	str	r0, [sp, #4]
   17bee:	fbb2 f6f3 	udiv	r6, r2, r3
   17bf2:	d33b      	bcc.n	17c6c <quorem+0xb4>
   17bf4:	f04f 0c00 	mov.w	ip, #0
   17bf8:	46ae      	mov	lr, r5
   17bfa:	4640      	mov	r0, r8
   17bfc:	46e2      	mov	sl, ip
   17bfe:	4663      	mov	r3, ip
   17c00:	f85e bb04 	ldr.w	fp, [lr], #4
   17c04:	6802      	ldr	r2, [r0, #0]
   17c06:	fa1f fc8b 	uxth.w	ip, fp
   17c0a:	fb06 330c 	mla	r3, r6, ip, r3
   17c0e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   17c12:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   17c16:	fb06 cc0b 	mla	ip, r6, fp, ip
   17c1a:	b29b      	uxth	r3, r3
   17c1c:	ebaa 0303 	sub.w	r3, sl, r3
   17c20:	fa1f fa8c 	uxth.w	sl, ip
   17c24:	fa13 f382 	uxtah	r3, r3, r2
   17c28:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   17c2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
   17c30:	b29b      	uxth	r3, r3
   17c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   17c36:	4577      	cmp	r7, lr
   17c38:	f840 3b04 	str.w	r3, [r0], #4
   17c3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   17c40:	ea4f 431c 	mov.w	r3, ip, lsr #16
   17c44:	d2dc      	bcs.n	17c00 <quorem+0x48>
   17c46:	9b00      	ldr	r3, [sp, #0]
   17c48:	f858 3003 	ldr.w	r3, [r8, r3]
   17c4c:	b973      	cbnz	r3, 17c6c <quorem+0xb4>
   17c4e:	9b01      	ldr	r3, [sp, #4]
   17c50:	3b04      	subs	r3, #4
   17c52:	4598      	cmp	r8, r3
   17c54:	d304      	bcc.n	17c60 <quorem+0xa8>
   17c56:	e007      	b.n	17c68 <quorem+0xb0>
   17c58:	4598      	cmp	r8, r3
   17c5a:	f104 34ff 	add.w	r4, r4, #4294967295
   17c5e:	d203      	bcs.n	17c68 <quorem+0xb0>
   17c60:	f853 2904 	ldr.w	r2, [r3], #-4
   17c64:	2a00      	cmp	r2, #0
   17c66:	d0f7      	beq.n	17c58 <quorem+0xa0>
   17c68:	f8c9 4010 	str.w	r4, [r9, #16]
   17c6c:	4648      	mov	r0, r9
   17c6e:	f7fc f8e3 	bl	13e38 <__mcmp>
   17c72:	2800      	cmp	r0, #0
   17c74:	db2b      	blt.n	17cce <quorem+0x116>
   17c76:	3601      	adds	r6, #1
   17c78:	4641      	mov	r1, r8
   17c7a:	2300      	movs	r3, #0
   17c7c:	f855 0b04 	ldr.w	r0, [r5], #4
   17c80:	f8d1 c000 	ldr.w	ip, [r1]
   17c84:	b282      	uxth	r2, r0
   17c86:	1a9a      	subs	r2, r3, r2
   17c88:	0c03      	lsrs	r3, r0, #16
   17c8a:	fa12 f28c 	uxtah	r2, r2, ip
   17c8e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   17c92:	eb03 4322 	add.w	r3, r3, r2, asr #16
   17c96:	b292      	uxth	r2, r2
   17c98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17c9c:	42af      	cmp	r7, r5
   17c9e:	f841 2b04 	str.w	r2, [r1], #4
   17ca2:	ea4f 4323 	mov.w	r3, r3, asr #16
   17ca6:	d2e9      	bcs.n	17c7c <quorem+0xc4>
   17ca8:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   17cac:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   17cb0:	b96a      	cbnz	r2, 17cce <quorem+0x116>
   17cb2:	3b04      	subs	r3, #4
   17cb4:	4598      	cmp	r8, r3
   17cb6:	d304      	bcc.n	17cc2 <quorem+0x10a>
   17cb8:	e007      	b.n	17cca <quorem+0x112>
   17cba:	4598      	cmp	r8, r3
   17cbc:	f104 34ff 	add.w	r4, r4, #4294967295
   17cc0:	d203      	bcs.n	17cca <quorem+0x112>
   17cc2:	f853 2904 	ldr.w	r2, [r3], #-4
   17cc6:	2a00      	cmp	r2, #0
   17cc8:	d0f7      	beq.n	17cba <quorem+0x102>
   17cca:	f8c9 4010 	str.w	r4, [r9, #16]
   17cce:	4630      	mov	r0, r6
   17cd0:	b003      	add	sp, #12
   17cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cd6:	2000      	movs	r0, #0
   17cd8:	b003      	add	sp, #12
   17cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cde:	bf00      	nop

00017ce0 <_dtoa_r>:
   17ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ce4:	ed2d 8b02 	vpush	{d8}
   17ce8:	b08f      	sub	sp, #60	; 0x3c
   17cea:	ed8d 0b02 	vstr	d0, [sp, #8]
   17cee:	9101      	str	r1, [sp, #4]
   17cf0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   17cf2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   17cf4:	9305      	str	r3, [sp, #20]
   17cf6:	ec57 6b10 	vmov	r6, r7, d0
   17cfa:	4604      	mov	r4, r0
   17cfc:	4693      	mov	fp, r2
   17cfe:	b141      	cbz	r1, 17d12 <_dtoa_r+0x32>
   17d00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   17d02:	604a      	str	r2, [r1, #4]
   17d04:	2301      	movs	r3, #1
   17d06:	4093      	lsls	r3, r2
   17d08:	608b      	str	r3, [r1, #8]
   17d0a:	f7fb fddd 	bl	138c8 <_Bfree>
   17d0e:	2300      	movs	r3, #0
   17d10:	63a3      	str	r3, [r4, #56]	; 0x38
   17d12:	f1b7 0800 	subs.w	r8, r7, #0
   17d16:	bfb4      	ite	lt
   17d18:	2301      	movlt	r3, #1
   17d1a:	2300      	movge	r3, #0
   17d1c:	602b      	str	r3, [r5, #0]
   17d1e:	4bbe      	ldr	r3, [pc, #760]	; (18018 <_dtoa_r+0x338>)
   17d20:	bfbc      	itt	lt
   17d22:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   17d26:	f8cd 800c 	strlt.w	r8, [sp, #12]
   17d2a:	ea33 0308 	bics.w	r3, r3, r8
   17d2e:	f000 809f 	beq.w	17e70 <_dtoa_r+0x190>
   17d32:	ed9d 8b02 	vldr	d8, [sp, #8]
   17d36:	eeb5 8b40 	vcmp.f64	d8, #0.0
   17d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17d3e:	d111      	bne.n	17d64 <_dtoa_r+0x84>
   17d40:	9a05      	ldr	r2, [sp, #20]
   17d42:	2301      	movs	r3, #1
   17d44:	6013      	str	r3, [r2, #0]
   17d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17d48:	2b00      	cmp	r3, #0
   17d4a:	f000 823f 	beq.w	181cc <_dtoa_r+0x4ec>
   17d4e:	4bb3      	ldr	r3, [pc, #716]	; (1801c <_dtoa_r+0x33c>)
   17d50:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17d52:	6013      	str	r3, [r2, #0]
   17d54:	3b01      	subs	r3, #1
   17d56:	9300      	str	r3, [sp, #0]
   17d58:	9800      	ldr	r0, [sp, #0]
   17d5a:	b00f      	add	sp, #60	; 0x3c
   17d5c:	ecbd 8b02 	vpop	{d8}
   17d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d64:	aa0c      	add	r2, sp, #48	; 0x30
   17d66:	a90d      	add	r1, sp, #52	; 0x34
   17d68:	4620      	mov	r0, r4
   17d6a:	eeb0 0b48 	vmov.f64	d0, d8
   17d6e:	f7fc f9c3 	bl	140f8 <__d2b>
   17d72:	ea5f 5318 	movs.w	r3, r8, lsr #20
   17d76:	4605      	mov	r5, r0
   17d78:	f040 8092 	bne.w	17ea0 <_dtoa_r+0x1c0>
   17d7c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   17d80:	440b      	add	r3, r1
   17d82:	f203 4232 	addw	r2, r3, #1074	; 0x432
   17d86:	2a20      	cmp	r2, #32
   17d88:	f340 82fa 	ble.w	18380 <_dtoa_r+0x6a0>
   17d8c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   17d90:	fa08 f802 	lsl.w	r8, r8, r2
   17d94:	f203 4212 	addw	r2, r3, #1042	; 0x412
   17d98:	40d6      	lsrs	r6, r2
   17d9a:	ea48 0206 	orr.w	r2, r8, r6
   17d9e:	ee07 2a10 	vmov	s14, r2
   17da2:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   17da6:	1e58      	subs	r0, r3, #1
   17da8:	ee17 6a90 	vmov	r6, s15
   17dac:	ec53 2b17 	vmov	r2, r3, d7
   17db0:	f04f 0a01 	mov.w	sl, #1
   17db4:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   17db8:	ed9f 3b91 	vldr	d3, [pc, #580]	; 18000 <_dtoa_r+0x320>
   17dbc:	ed9f 7b92 	vldr	d7, [pc, #584]	; 18008 <_dtoa_r+0x328>
   17dc0:	ed9f 5b93 	vldr	d5, [pc, #588]	; 18010 <_dtoa_r+0x330>
   17dc4:	ee06 0a90 	vmov	s13, r0
   17dc8:	ec43 2b12 	vmov	d2, r2, r3
   17dcc:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   17dd0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   17dd4:	ee32 6b46 	vsub.f64	d6, d2, d6
   17dd8:	eea6 7b03 	vfma.f64	d7, d6, d3
   17ddc:	eea4 7b05 	vfma.f64	d7, d4, d5
   17de0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   17de4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   17de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17dec:	ee16 7a90 	vmov	r7, s13
   17df0:	d508      	bpl.n	17e04 <_dtoa_r+0x124>
   17df2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   17df6:	eeb4 6b47 	vcmp.f64	d6, d7
   17dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17dfe:	bf18      	it	ne
   17e00:	f107 37ff 	addne.w	r7, r7, #4294967295
   17e04:	2f16      	cmp	r7, #22
   17e06:	f200 8145 	bhi.w	18094 <_dtoa_r+0x3b4>
   17e0a:	4b85      	ldr	r3, [pc, #532]	; (18020 <_dtoa_r+0x340>)
   17e0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   17e10:	ed93 7b00 	vldr	d7, [r3]
   17e14:	eeb4 8bc7 	vcmpe.f64	d8, d7
   17e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17e1c:	d557      	bpl.n	17ece <_dtoa_r+0x1ee>
   17e1e:	1a09      	subs	r1, r1, r0
   17e20:	2300      	movs	r3, #0
   17e22:	f1b1 0801 	subs.w	r8, r1, #1
   17e26:	f107 37ff 	add.w	r7, r7, #4294967295
   17e2a:	930a      	str	r3, [sp, #40]	; 0x28
   17e2c:	f100 8139 	bmi.w	180a2 <_dtoa_r+0x3c2>
   17e30:	2300      	movs	r3, #0
   17e32:	9306      	str	r3, [sp, #24]
   17e34:	2f00      	cmp	r7, #0
   17e36:	da52      	bge.n	17ede <_dtoa_r+0x1fe>
   17e38:	9b06      	ldr	r3, [sp, #24]
   17e3a:	9704      	str	r7, [sp, #16]
   17e3c:	1bdb      	subs	r3, r3, r7
   17e3e:	9306      	str	r3, [sp, #24]
   17e40:	427b      	negs	r3, r7
   17e42:	9308      	str	r3, [sp, #32]
   17e44:	9b01      	ldr	r3, [sp, #4]
   17e46:	2b09      	cmp	r3, #9
   17e48:	f04f 0700 	mov.w	r7, #0
   17e4c:	d84e      	bhi.n	17eec <_dtoa_r+0x20c>
   17e4e:	2b05      	cmp	r3, #5
   17e50:	f340 829d 	ble.w	1838e <_dtoa_r+0x6ae>
   17e54:	3b04      	subs	r3, #4
   17e56:	9301      	str	r3, [sp, #4]
   17e58:	2600      	movs	r6, #0
   17e5a:	9b01      	ldr	r3, [sp, #4]
   17e5c:	1e9a      	subs	r2, r3, #2
   17e5e:	2a03      	cmp	r2, #3
   17e60:	f200 8125 	bhi.w	180ae <_dtoa_r+0x3ce>
   17e64:	e8df f012 	tbh	[pc, r2, lsl #1]
   17e68:	03a703aa 	.word	0x03a703aa
   17e6c:	037e039d 	.word	0x037e039d
   17e70:	9a05      	ldr	r2, [sp, #20]
   17e72:	f3c8 0813 	ubfx	r8, r8, #0, #20
   17e76:	f242 730f 	movw	r3, #9999	; 0x270f
   17e7a:	ea58 0806 	orrs.w	r8, r8, r6
   17e7e:	6013      	str	r3, [r2, #0]
   17e80:	d11e      	bne.n	17ec0 <_dtoa_r+0x1e0>
   17e82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17e84:	2b00      	cmp	r3, #0
   17e86:	f000 8591 	beq.w	189ac <_dtoa_r+0xccc>
   17e8a:	4b66      	ldr	r3, [pc, #408]	; (18024 <_dtoa_r+0x344>)
   17e8c:	9300      	str	r3, [sp, #0]
   17e8e:	3308      	adds	r3, #8
   17e90:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   17e92:	9800      	ldr	r0, [sp, #0]
   17e94:	6013      	str	r3, [r2, #0]
   17e96:	b00f      	add	sp, #60	; 0x3c
   17e98:	ecbd 8b02 	vpop	{d8}
   17e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ea0:	ee18 6a90 	vmov	r6, s17
   17ea4:	f3c6 0613 	ubfx	r6, r6, #0, #20
   17ea8:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   17eac:	ec53 2b18 	vmov	r2, r3, d8
   17eb0:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   17eb4:	990c      	ldr	r1, [sp, #48]	; 0x30
   17eb6:	f04f 0a00 	mov.w	sl, #0
   17eba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   17ebe:	e77b      	b.n	17db8 <_dtoa_r+0xd8>
   17ec0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17ec2:	2b00      	cmp	r3, #0
   17ec4:	f040 833b 	bne.w	1853e <_dtoa_r+0x85e>
   17ec8:	4b57      	ldr	r3, [pc, #348]	; (18028 <_dtoa_r+0x348>)
   17eca:	9300      	str	r3, [sp, #0]
   17ecc:	e744      	b.n	17d58 <_dtoa_r+0x78>
   17ece:	1a09      	subs	r1, r1, r0
   17ed0:	2300      	movs	r3, #0
   17ed2:	f1b1 0801 	subs.w	r8, r1, #1
   17ed6:	930a      	str	r3, [sp, #40]	; 0x28
   17ed8:	f100 80e3 	bmi.w	180a2 <_dtoa_r+0x3c2>
   17edc:	9306      	str	r3, [sp, #24]
   17ede:	2300      	movs	r3, #0
   17ee0:	9308      	str	r3, [sp, #32]
   17ee2:	9b01      	ldr	r3, [sp, #4]
   17ee4:	9704      	str	r7, [sp, #16]
   17ee6:	2b09      	cmp	r3, #9
   17ee8:	44b8      	add	r8, r7
   17eea:	d9b0      	bls.n	17e4e <_dtoa_r+0x16e>
   17eec:	2300      	movs	r3, #0
   17eee:	2601      	movs	r6, #1
   17ef0:	9301      	str	r3, [sp, #4]
   17ef2:	9607      	str	r6, [sp, #28]
   17ef4:	f04f 39ff 	mov.w	r9, #4294967295
   17ef8:	469b      	mov	fp, r3
   17efa:	2100      	movs	r1, #0
   17efc:	63e1      	str	r1, [r4, #60]	; 0x3c
   17efe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   17f02:	4620      	mov	r0, r4
   17f04:	f7fb fcba 	bl	1387c <_Balloc>
   17f08:	9000      	str	r0, [sp, #0]
   17f0a:	2800      	cmp	r0, #0
   17f0c:	f000 8540 	beq.w	18990 <_dtoa_r+0xcb0>
   17f10:	9b00      	ldr	r3, [sp, #0]
   17f12:	63a3      	str	r3, [r4, #56]	; 0x38
   17f14:	f1b9 0f0e 	cmp.w	r9, #14
   17f18:	f200 80dc 	bhi.w	180d4 <_dtoa_r+0x3f4>
   17f1c:	2e00      	cmp	r6, #0
   17f1e:	f000 80d9 	beq.w	180d4 <_dtoa_r+0x3f4>
   17f22:	9b04      	ldr	r3, [sp, #16]
   17f24:	2b00      	cmp	r3, #0
   17f26:	f340 83de 	ble.w	186e6 <_dtoa_r+0xa06>
   17f2a:	4a3d      	ldr	r2, [pc, #244]	; (18020 <_dtoa_r+0x340>)
   17f2c:	f003 010f 	and.w	r1, r3, #15
   17f30:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   17f34:	ed92 7b00 	vldr	d7, [r2]
   17f38:	111a      	asrs	r2, r3, #4
   17f3a:	05db      	lsls	r3, r3, #23
   17f3c:	f140 8382 	bpl.w	18644 <_dtoa_r+0x964>
   17f40:	493a      	ldr	r1, [pc, #232]	; (1802c <_dtoa_r+0x34c>)
   17f42:	ed91 6b08 	vldr	d6, [r1, #32]
   17f46:	f002 020f 	and.w	r2, r2, #15
   17f4a:	2003      	movs	r0, #3
   17f4c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   17f50:	b15a      	cbz	r2, 17f6a <_dtoa_r+0x28a>
   17f52:	4936      	ldr	r1, [pc, #216]	; (1802c <_dtoa_r+0x34c>)
   17f54:	07d6      	lsls	r6, r2, #31
   17f56:	d504      	bpl.n	17f62 <_dtoa_r+0x282>
   17f58:	ed91 6b00 	vldr	d6, [r1]
   17f5c:	3001      	adds	r0, #1
   17f5e:	ee27 7b06 	vmul.f64	d7, d7, d6
   17f62:	1052      	asrs	r2, r2, #1
   17f64:	f101 0108 	add.w	r1, r1, #8
   17f68:	d1f4      	bne.n	17f54 <_dtoa_r+0x274>
   17f6a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   17f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17f70:	b13b      	cbz	r3, 17f82 <_dtoa_r+0x2a2>
   17f72:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   17f76:	eeb4 6bc7 	vcmpe.f64	d6, d7
   17f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17f7e:	f100 84ae 	bmi.w	188de <_dtoa_r+0xbfe>
   17f82:	ee07 0a90 	vmov	s15, r0
   17f86:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   17f8a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   17f8e:	eea5 7b06 	vfma.f64	d7, d5, d6
   17f92:	ee17 2a90 	vmov	r2, s15
   17f96:	ec51 0b17 	vmov	r0, r1, d7
   17f9a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   17f9e:	f1b9 0f00 	cmp.w	r9, #0
   17fa2:	f000 8388 	beq.w	186b6 <_dtoa_r+0x9d6>
   17fa6:	9e04      	ldr	r6, [sp, #16]
   17fa8:	464a      	mov	r2, r9
   17faa:	9b07      	ldr	r3, [sp, #28]
   17fac:	2b00      	cmp	r3, #0
   17fae:	f000 8447 	beq.w	18840 <_dtoa_r+0xb60>
   17fb2:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   17fb6:	4b1a      	ldr	r3, [pc, #104]	; (18020 <_dtoa_r+0x340>)
   17fb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   17fbc:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   17fc0:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   17fc4:	ee36 7b47 	vsub.f64	d7, d6, d7
   17fc8:	ed1c 6b02 	vldr	d6, [ip, #-8]
   17fcc:	ee83 5b06 	vdiv.f64	d5, d3, d6
   17fd0:	ec41 0b16 	vmov	d6, r0, r1
   17fd4:	ee14 0a90 	vmov	r0, s9
   17fd8:	ee35 5b46 	vsub.f64	d5, d5, d6
   17fdc:	9900      	ldr	r1, [sp, #0]
   17fde:	eeb4 5bc7 	vcmpe.f64	d5, d7
   17fe2:	3030      	adds	r0, #48	; 0x30
   17fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17fe8:	f801 0b01 	strb.w	r0, [r1], #1
   17fec:	f300 84ac 	bgt.w	18948 <_dtoa_r+0xc68>
   17ff0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   17ff4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   17ff8:	f04f 0c00 	mov.w	ip, #0
   17ffc:	e031      	b.n	18062 <_dtoa_r+0x382>
   17ffe:	bf00      	nop
   18000:	636f4361 	.word	0x636f4361
   18004:	3fd287a7 	.word	0x3fd287a7
   18008:	8b60c8b3 	.word	0x8b60c8b3
   1800c:	3fc68a28 	.word	0x3fc68a28
   18010:	509f79fb 	.word	0x509f79fb
   18014:	3fd34413 	.word	0x3fd34413
   18018:	7ff00000 	.word	0x7ff00000
   1801c:	20007fcd 	.word	0x20007fcd
   18020:	20000328 	.word	0x20000328
   18024:	20001158 	.word	0x20001158
   18028:	20001164 	.word	0x20001164
   1802c:	20000300 	.word	0x20000300
   18030:	f10c 0c01 	add.w	ip, ip, #1
   18034:	4594      	cmp	ip, r2
   18036:	da4d      	bge.n	180d4 <_dtoa_r+0x3f4>
   18038:	ee27 7b04 	vmul.f64	d7, d7, d4
   1803c:	ee25 5b04 	vmul.f64	d5, d5, d4
   18040:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18044:	ee16 3a90 	vmov	r3, s13
   18048:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   1804c:	3330      	adds	r3, #48	; 0x30
   1804e:	ee37 7b43 	vsub.f64	d7, d7, d3
   18052:	eeb4 7bc5 	vcmpe.f64	d7, d5
   18056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1805a:	f801 3b01 	strb.w	r3, [r1], #1
   1805e:	f100 8473 	bmi.w	18948 <_dtoa_r+0xc68>
   18062:	ee32 6b47 	vsub.f64	d6, d2, d7
   18066:	eeb4 6bc5 	vcmpe.f64	d6, d5
   1806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1806e:	d5df      	bpl.n	18030 <_dtoa_r+0x350>
   18070:	9a00      	ldr	r2, [sp, #0]
   18072:	9604      	str	r6, [sp, #16]
   18074:	e002      	b.n	1807c <_dtoa_r+0x39c>
   18076:	428a      	cmp	r2, r1
   18078:	f000 8450 	beq.w	1891c <_dtoa_r+0xc3c>
   1807c:	4689      	mov	r9, r1
   1807e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   18082:	2b39      	cmp	r3, #57	; 0x39
   18084:	d0f7      	beq.n	18076 <_dtoa_r+0x396>
   18086:	3301      	adds	r3, #1
   18088:	b2db      	uxtb	r3, r3
   1808a:	700b      	strb	r3, [r1, #0]
   1808c:	9b04      	ldr	r3, [sp, #16]
   1808e:	3301      	adds	r3, #1
   18090:	9304      	str	r3, [sp, #16]
   18092:	e155      	b.n	18340 <_dtoa_r+0x660>
   18094:	1a09      	subs	r1, r1, r0
   18096:	2301      	movs	r3, #1
   18098:	f1b1 0801 	subs.w	r8, r1, #1
   1809c:	930a      	str	r3, [sp, #40]	; 0x28
   1809e:	f57f aec7 	bpl.w	17e30 <_dtoa_r+0x150>
   180a2:	f1c1 0301 	rsb	r3, r1, #1
   180a6:	9306      	str	r3, [sp, #24]
   180a8:	f04f 0800 	mov.w	r8, #0
   180ac:	e6c2      	b.n	17e34 <_dtoa_r+0x154>
   180ae:	2600      	movs	r6, #0
   180b0:	63e6      	str	r6, [r4, #60]	; 0x3c
   180b2:	4631      	mov	r1, r6
   180b4:	4620      	mov	r0, r4
   180b6:	f7fb fbe1 	bl	1387c <_Balloc>
   180ba:	9000      	str	r0, [sp, #0]
   180bc:	2800      	cmp	r0, #0
   180be:	f000 8467 	beq.w	18990 <_dtoa_r+0xcb0>
   180c2:	9b00      	ldr	r3, [sp, #0]
   180c4:	63a3      	str	r3, [r4, #56]	; 0x38
   180c6:	f04f 33ff 	mov.w	r3, #4294967295
   180ca:	930b      	str	r3, [sp, #44]	; 0x2c
   180cc:	4699      	mov	r9, r3
   180ce:	2301      	movs	r3, #1
   180d0:	46b3      	mov	fp, r6
   180d2:	9307      	str	r3, [sp, #28]
   180d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   180d6:	2a00      	cmp	r2, #0
   180d8:	db55      	blt.n	18186 <_dtoa_r+0x4a6>
   180da:	9904      	ldr	r1, [sp, #16]
   180dc:	290e      	cmp	r1, #14
   180de:	dc52      	bgt.n	18186 <_dtoa_r+0x4a6>
   180e0:	4bb7      	ldr	r3, [pc, #732]	; (183c0 <_dtoa_r+0x6e0>)
   180e2:	f1bb 0f00 	cmp.w	fp, #0
   180e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   180ea:	ed93 6b00 	vldr	d6, [r3]
   180ee:	da15      	bge.n	1811c <_dtoa_r+0x43c>
   180f0:	f1b9 0f00 	cmp.w	r9, #0
   180f4:	dc12      	bgt.n	1811c <_dtoa_r+0x43c>
   180f6:	f040 82f2 	bne.w	186de <_dtoa_r+0x9fe>
   180fa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   180fe:	ee26 7b07 	vmul.f64	d7, d6, d7
   18102:	eeb4 8bc7 	vcmpe.f64	d8, d7
   18106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1810a:	46ca      	mov	sl, r9
   1810c:	464e      	mov	r6, r9
   1810e:	f200 826d 	bhi.w	185ec <_dtoa_r+0x90c>
   18112:	f8dd 8000 	ldr.w	r8, [sp]
   18116:	ea6f 0b0b 	mvn.w	fp, fp
   1811a:	e270      	b.n	185fe <_dtoa_r+0x91e>
   1811c:	ee88 7b06 	vdiv.f64	d7, d8, d6
   18120:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   18124:	9900      	ldr	r1, [sp, #0]
   18126:	ee17 3a10 	vmov	r3, s14
   1812a:	f1b9 0f01 	cmp.w	r9, #1
   1812e:	f103 0330 	add.w	r3, r3, #48	; 0x30
   18132:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   18136:	f801 3b01 	strb.w	r3, [r1], #1
   1813a:	eea5 8b46 	vfms.f64	d8, d5, d6
   1813e:	f000 8334 	beq.w	187aa <_dtoa_r+0xaca>
   18142:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18146:	2301      	movs	r3, #1
   18148:	e011      	b.n	1816e <_dtoa_r+0x48e>
   1814a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   1814e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   18152:	3301      	adds	r3, #1
   18154:	ee17 2a10 	vmov	r2, s14
   18158:	454b      	cmp	r3, r9
   1815a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   1815e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   18162:	f801 2b01 	strb.w	r2, [r1], #1
   18166:	eea5 8b46 	vfms.f64	d8, d5, d6
   1816a:	f000 831e 	beq.w	187aa <_dtoa_r+0xaca>
   1816e:	ee28 8b04 	vmul.f64	d8, d8, d4
   18172:	eeb5 8b40 	vcmp.f64	d8, #0.0
   18176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1817a:	d1e6      	bne.n	1814a <_dtoa_r+0x46a>
   1817c:	9b04      	ldr	r3, [sp, #16]
   1817e:	3301      	adds	r3, #1
   18180:	9304      	str	r3, [sp, #16]
   18182:	4689      	mov	r9, r1
   18184:	e0dc      	b.n	18340 <_dtoa_r+0x660>
   18186:	9b07      	ldr	r3, [sp, #28]
   18188:	b343      	cbz	r3, 181dc <_dtoa_r+0x4fc>
   1818a:	9b01      	ldr	r3, [sp, #4]
   1818c:	2b01      	cmp	r3, #1
   1818e:	f340 8276 	ble.w	1867e <_dtoa_r+0x99e>
   18192:	9b08      	ldr	r3, [sp, #32]
   18194:	f109 3aff 	add.w	sl, r9, #4294967295
   18198:	4553      	cmp	r3, sl
   1819a:	f280 823f 	bge.w	1861c <_dtoa_r+0x93c>
   1819e:	9b08      	ldr	r3, [sp, #32]
   181a0:	f8cd a020 	str.w	sl, [sp, #32]
   181a4:	ebaa 0203 	sub.w	r2, sl, r3
   181a8:	4417      	add	r7, r2
   181aa:	f04f 0a00 	mov.w	sl, #0
   181ae:	f1b9 0f00 	cmp.w	r9, #0
   181b2:	f2c0 8325 	blt.w	18800 <_dtoa_r+0xb20>
   181b6:	9b06      	ldr	r3, [sp, #24]
   181b8:	9309      	str	r3, [sp, #36]	; 0x24
   181ba:	444b      	add	r3, r9
   181bc:	44c8      	add	r8, r9
   181be:	9306      	str	r3, [sp, #24]
   181c0:	2101      	movs	r1, #1
   181c2:	4620      	mov	r0, r4
   181c4:	f7fb fc84 	bl	13ad0 <__i2b>
   181c8:	4606      	mov	r6, r0
   181ca:	e00c      	b.n	181e6 <_dtoa_r+0x506>
   181cc:	4b7d      	ldr	r3, [pc, #500]	; (183c4 <_dtoa_r+0x6e4>)
   181ce:	9300      	str	r3, [sp, #0]
   181d0:	9800      	ldr	r0, [sp, #0]
   181d2:	b00f      	add	sp, #60	; 0x3c
   181d4:	ecbd 8b02 	vpop	{d8}
   181d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181dc:	9b06      	ldr	r3, [sp, #24]
   181de:	f8dd a020 	ldr.w	sl, [sp, #32]
   181e2:	9e07      	ldr	r6, [sp, #28]
   181e4:	9309      	str	r3, [sp, #36]	; 0x24
   181e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   181e8:	b16b      	cbz	r3, 18206 <_dtoa_r+0x526>
   181ea:	f1b8 0f00 	cmp.w	r8, #0
   181ee:	dd0a      	ble.n	18206 <_dtoa_r+0x526>
   181f0:	4543      	cmp	r3, r8
   181f2:	9906      	ldr	r1, [sp, #24]
   181f4:	461a      	mov	r2, r3
   181f6:	bfa8      	it	ge
   181f8:	4642      	movge	r2, r8
   181fa:	1a89      	subs	r1, r1, r2
   181fc:	1a9b      	subs	r3, r3, r2
   181fe:	9106      	str	r1, [sp, #24]
   18200:	9309      	str	r3, [sp, #36]	; 0x24
   18202:	eba8 0802 	sub.w	r8, r8, r2
   18206:	9b08      	ldr	r3, [sp, #32]
   18208:	b163      	cbz	r3, 18224 <_dtoa_r+0x544>
   1820a:	9b07      	ldr	r3, [sp, #28]
   1820c:	2b00      	cmp	r3, #0
   1820e:	f000 82a7 	beq.w	18760 <_dtoa_r+0xa80>
   18212:	f1ba 0f00 	cmp.w	sl, #0
   18216:	f300 8204 	bgt.w	18622 <_dtoa_r+0x942>
   1821a:	9b08      	ldr	r3, [sp, #32]
   1821c:	ebb3 020a 	subs.w	r2, r3, sl
   18220:	f040 82ff 	bne.w	18822 <_dtoa_r+0xb42>
   18224:	2101      	movs	r1, #1
   18226:	4620      	mov	r0, r4
   18228:	f7fb fc52 	bl	13ad0 <__i2b>
   1822c:	2f00      	cmp	r7, #0
   1822e:	4682      	mov	sl, r0
   18230:	f300 80af 	bgt.w	18392 <_dtoa_r+0x6b2>
   18234:	9b01      	ldr	r3, [sp, #4]
   18236:	2b01      	cmp	r3, #1
   18238:	f340 8187 	ble.w	1854a <_dtoa_r+0x86a>
   1823c:	2300      	movs	r3, #0
   1823e:	9308      	str	r3, [sp, #32]
   18240:	2001      	movs	r0, #1
   18242:	2f00      	cmp	r7, #0
   18244:	f040 80b1 	bne.w	183aa <_dtoa_r+0x6ca>
   18248:	4440      	add	r0, r8
   1824a:	f010 001f 	ands.w	r0, r0, #31
   1824e:	f000 817a 	beq.w	18546 <_dtoa_r+0x866>
   18252:	f1c0 0220 	rsb	r2, r0, #32
   18256:	2a04      	cmp	r2, #4
   18258:	f300 8088 	bgt.w	1836c <_dtoa_r+0x68c>
   1825c:	f040 81f6 	bne.w	1864c <_dtoa_r+0x96c>
   18260:	9b06      	ldr	r3, [sp, #24]
   18262:	2b00      	cmp	r3, #0
   18264:	dd05      	ble.n	18272 <_dtoa_r+0x592>
   18266:	4629      	mov	r1, r5
   18268:	461a      	mov	r2, r3
   1826a:	4620      	mov	r0, r4
   1826c:	f7fb fd6c 	bl	13d48 <__lshift>
   18270:	4605      	mov	r5, r0
   18272:	f1b8 0f00 	cmp.w	r8, #0
   18276:	dd05      	ble.n	18284 <_dtoa_r+0x5a4>
   18278:	4651      	mov	r1, sl
   1827a:	4642      	mov	r2, r8
   1827c:	4620      	mov	r0, r4
   1827e:	f7fb fd63 	bl	13d48 <__lshift>
   18282:	4682      	mov	sl, r0
   18284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18286:	2b00      	cmp	r3, #0
   18288:	f040 813f 	bne.w	1850a <_dtoa_r+0x82a>
   1828c:	f1b9 0f00 	cmp.w	r9, #0
   18290:	f340 8125 	ble.w	184de <_dtoa_r+0x7fe>
   18294:	9b07      	ldr	r3, [sp, #28]
   18296:	2b00      	cmp	r3, #0
   18298:	f040 80a3 	bne.w	183e2 <_dtoa_r+0x702>
   1829c:	9b04      	ldr	r3, [sp, #16]
   1829e:	3301      	adds	r3, #1
   182a0:	9304      	str	r3, [sp, #16]
   182a2:	f8dd 8000 	ldr.w	r8, [sp]
   182a6:	2701      	movs	r7, #1
   182a8:	e007      	b.n	182ba <_dtoa_r+0x5da>
   182aa:	4629      	mov	r1, r5
   182ac:	2300      	movs	r3, #0
   182ae:	220a      	movs	r2, #10
   182b0:	4620      	mov	r0, r4
   182b2:	f7fb fb13 	bl	138dc <__multadd>
   182b6:	3701      	adds	r7, #1
   182b8:	4605      	mov	r5, r0
   182ba:	4651      	mov	r1, sl
   182bc:	4628      	mov	r0, r5
   182be:	f7ff fc7b 	bl	17bb8 <quorem>
   182c2:	45b9      	cmp	r9, r7
   182c4:	f100 0030 	add.w	r0, r0, #48	; 0x30
   182c8:	f808 0b01 	strb.w	r0, [r8], #1
   182cc:	dced      	bgt.n	182aa <_dtoa_r+0x5ca>
   182ce:	f1b9 0f00 	cmp.w	r9, #0
   182d2:	9a00      	ldr	r2, [sp, #0]
   182d4:	bfcc      	ite	gt
   182d6:	46cb      	movgt	fp, r9
   182d8:	f04f 0b01 	movle.w	fp, #1
   182dc:	4603      	mov	r3, r0
   182de:	4493      	add	fp, r2
   182e0:	2700      	movs	r7, #0
   182e2:	4629      	mov	r1, r5
   182e4:	2201      	movs	r2, #1
   182e6:	4620      	mov	r0, r4
   182e8:	9301      	str	r3, [sp, #4]
   182ea:	f7fb fd2d 	bl	13d48 <__lshift>
   182ee:	4651      	mov	r1, sl
   182f0:	4605      	mov	r5, r0
   182f2:	f7fb fda1 	bl	13e38 <__mcmp>
   182f6:	2800      	cmp	r0, #0
   182f8:	f340 81af 	ble.w	1865a <_dtoa_r+0x97a>
   182fc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   18300:	9a00      	ldr	r2, [sp, #0]
   18302:	f10b 3bff 	add.w	fp, fp, #4294967295
   18306:	e004      	b.n	18312 <_dtoa_r+0x632>
   18308:	455a      	cmp	r2, fp
   1830a:	f000 81b1 	beq.w	18670 <_dtoa_r+0x990>
   1830e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   18312:	2b39      	cmp	r3, #57	; 0x39
   18314:	f10b 0901 	add.w	r9, fp, #1
   18318:	d0f6      	beq.n	18308 <_dtoa_r+0x628>
   1831a:	3301      	adds	r3, #1
   1831c:	f88b 3000 	strb.w	r3, [fp]
   18320:	4651      	mov	r1, sl
   18322:	4620      	mov	r0, r4
   18324:	f7fb fad0 	bl	138c8 <_Bfree>
   18328:	b156      	cbz	r6, 18340 <_dtoa_r+0x660>
   1832a:	b12f      	cbz	r7, 18338 <_dtoa_r+0x658>
   1832c:	42b7      	cmp	r7, r6
   1832e:	d003      	beq.n	18338 <_dtoa_r+0x658>
   18330:	4639      	mov	r1, r7
   18332:	4620      	mov	r0, r4
   18334:	f7fb fac8 	bl	138c8 <_Bfree>
   18338:	4631      	mov	r1, r6
   1833a:	4620      	mov	r0, r4
   1833c:	f7fb fac4 	bl	138c8 <_Bfree>
   18340:	4629      	mov	r1, r5
   18342:	4620      	mov	r0, r4
   18344:	f7fb fac0 	bl	138c8 <_Bfree>
   18348:	2300      	movs	r3, #0
   1834a:	f889 3000 	strb.w	r3, [r9]
   1834e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18352:	601a      	str	r2, [r3, #0]
   18354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18356:	2b00      	cmp	r3, #0
   18358:	f43f acfe 	beq.w	17d58 <_dtoa_r+0x78>
   1835c:	9800      	ldr	r0, [sp, #0]
   1835e:	f8c3 9000 	str.w	r9, [r3]
   18362:	b00f      	add	sp, #60	; 0x3c
   18364:	ecbd 8b02 	vpop	{d8}
   18368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1836c:	f1c0 001c 	rsb	r0, r0, #28
   18370:	9b06      	ldr	r3, [sp, #24]
   18372:	4403      	add	r3, r0
   18374:	9306      	str	r3, [sp, #24]
   18376:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18378:	4403      	add	r3, r0
   1837a:	9309      	str	r3, [sp, #36]	; 0x24
   1837c:	4480      	add	r8, r0
   1837e:	e76f      	b.n	18260 <_dtoa_r+0x580>
   18380:	f1c2 0220 	rsb	r2, r2, #32
   18384:	fa06 f202 	lsl.w	r2, r6, r2
   18388:	ee07 2a10 	vmov	s14, r2
   1838c:	e509      	b.n	17da2 <_dtoa_r+0xc2>
   1838e:	2601      	movs	r6, #1
   18390:	e563      	b.n	17e5a <_dtoa_r+0x17a>
   18392:	4601      	mov	r1, r0
   18394:	463a      	mov	r2, r7
   18396:	4620      	mov	r0, r4
   18398:	f7fb fc76 	bl	13c88 <__pow5mult>
   1839c:	9b01      	ldr	r3, [sp, #4]
   1839e:	2b01      	cmp	r3, #1
   183a0:	4682      	mov	sl, r0
   183a2:	f340 81c5 	ble.w	18730 <_dtoa_r+0xa50>
   183a6:	2300      	movs	r3, #0
   183a8:	9308      	str	r3, [sp, #32]
   183aa:	f8da 2010 	ldr.w	r2, [sl, #16]
   183ae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   183b2:	6910      	ldr	r0, [r2, #16]
   183b4:	f7fb fb3c 	bl	13a30 <__hi0bits>
   183b8:	f1c0 0020 	rsb	r0, r0, #32
   183bc:	e744      	b.n	18248 <_dtoa_r+0x568>
   183be:	bf00      	nop
   183c0:	20000328 	.word	0x20000328
   183c4:	20007fcc 	.word	0x20007fcc
   183c8:	4631      	mov	r1, r6
   183ca:	2300      	movs	r3, #0
   183cc:	220a      	movs	r2, #10
   183ce:	4620      	mov	r0, r4
   183d0:	f7fb fa84 	bl	138dc <__multadd>
   183d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   183d6:	2b00      	cmp	r3, #0
   183d8:	4606      	mov	r6, r0
   183da:	f340 82ce 	ble.w	1897a <_dtoa_r+0xc9a>
   183de:	9704      	str	r7, [sp, #16]
   183e0:	4699      	mov	r9, r3
   183e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183e4:	2b00      	cmp	r3, #0
   183e6:	dd05      	ble.n	183f4 <_dtoa_r+0x714>
   183e8:	4631      	mov	r1, r6
   183ea:	461a      	mov	r2, r3
   183ec:	4620      	mov	r0, r4
   183ee:	f7fb fcab 	bl	13d48 <__lshift>
   183f2:	4606      	mov	r6, r0
   183f4:	9b08      	ldr	r3, [sp, #32]
   183f6:	2b00      	cmp	r3, #0
   183f8:	f040 81eb 	bne.w	187d2 <_dtoa_r+0xaf2>
   183fc:	46b0      	mov	r8, r6
   183fe:	9b02      	ldr	r3, [sp, #8]
   18400:	9f00      	ldr	r7, [sp, #0]
   18402:	f003 0201 	and.w	r2, r3, #1
   18406:	1e7b      	subs	r3, r7, #1
   18408:	444b      	add	r3, r9
   1840a:	9308      	str	r3, [sp, #32]
   1840c:	9b01      	ldr	r3, [sp, #4]
   1840e:	920a      	str	r2, [sp, #40]	; 0x28
   18410:	4313      	orrs	r3, r2
   18412:	9309      	str	r3, [sp, #36]	; 0x24
   18414:	4651      	mov	r1, sl
   18416:	4628      	mov	r0, r5
   18418:	f7ff fbce 	bl	17bb8 <quorem>
   1841c:	4631      	mov	r1, r6
   1841e:	4683      	mov	fp, r0
   18420:	4628      	mov	r0, r5
   18422:	f7fb fd09 	bl	13e38 <__mcmp>
   18426:	4642      	mov	r2, r8
   18428:	4651      	mov	r1, sl
   1842a:	4681      	mov	r9, r0
   1842c:	4620      	mov	r0, r4
   1842e:	f7fb fd25 	bl	13e7c <__mdiff>
   18432:	68c2      	ldr	r2, [r0, #12]
   18434:	4601      	mov	r1, r0
   18436:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   1843a:	2a00      	cmp	r2, #0
   1843c:	d142      	bne.n	184c4 <_dtoa_r+0x7e4>
   1843e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   18442:	4628      	mov	r0, r5
   18444:	f7fb fcf8 	bl	13e38 <__mcmp>
   18448:	9906      	ldr	r1, [sp, #24]
   1844a:	9002      	str	r0, [sp, #8]
   1844c:	4620      	mov	r0, r4
   1844e:	f7fb fa3b 	bl	138c8 <_Bfree>
   18452:	9a02      	ldr	r2, [sp, #8]
   18454:	9b07      	ldr	r3, [sp, #28]
   18456:	b91a      	cbnz	r2, 18460 <_dtoa_r+0x780>
   18458:	9909      	ldr	r1, [sp, #36]	; 0x24
   1845a:	2900      	cmp	r1, #0
   1845c:	f000 827e 	beq.w	1895c <_dtoa_r+0xc7c>
   18460:	f1b9 0f00 	cmp.w	r9, #0
   18464:	f2c0 8183 	blt.w	1876e <_dtoa_r+0xa8e>
   18468:	9901      	ldr	r1, [sp, #4]
   1846a:	ea49 0901 	orr.w	r9, r9, r1
   1846e:	990a      	ldr	r1, [sp, #40]	; 0x28
   18470:	ea51 0909 	orrs.w	r9, r1, r9
   18474:	f000 817b 	beq.w	1876e <_dtoa_r+0xa8e>
   18478:	2a00      	cmp	r2, #0
   1847a:	f300 81c6 	bgt.w	1880a <_dtoa_r+0xb2a>
   1847e:	9a08      	ldr	r2, [sp, #32]
   18480:	703b      	strb	r3, [r7, #0]
   18482:	f107 0901 	add.w	r9, r7, #1
   18486:	4297      	cmp	r7, r2
   18488:	46cb      	mov	fp, r9
   1848a:	f000 81c4 	beq.w	18816 <_dtoa_r+0xb36>
   1848e:	4629      	mov	r1, r5
   18490:	2300      	movs	r3, #0
   18492:	220a      	movs	r2, #10
   18494:	4620      	mov	r0, r4
   18496:	f7fb fa21 	bl	138dc <__multadd>
   1849a:	4546      	cmp	r6, r8
   1849c:	4605      	mov	r5, r0
   1849e:	4631      	mov	r1, r6
   184a0:	f04f 0300 	mov.w	r3, #0
   184a4:	f04f 020a 	mov.w	r2, #10
   184a8:	4620      	mov	r0, r4
   184aa:	d012      	beq.n	184d2 <_dtoa_r+0x7f2>
   184ac:	f7fb fa16 	bl	138dc <__multadd>
   184b0:	4641      	mov	r1, r8
   184b2:	4606      	mov	r6, r0
   184b4:	2300      	movs	r3, #0
   184b6:	220a      	movs	r2, #10
   184b8:	4620      	mov	r0, r4
   184ba:	f7fb fa0f 	bl	138dc <__multadd>
   184be:	464f      	mov	r7, r9
   184c0:	4680      	mov	r8, r0
   184c2:	e7a7      	b.n	18414 <_dtoa_r+0x734>
   184c4:	4620      	mov	r0, r4
   184c6:	9302      	str	r3, [sp, #8]
   184c8:	f7fb f9fe 	bl	138c8 <_Bfree>
   184cc:	9b02      	ldr	r3, [sp, #8]
   184ce:	2201      	movs	r2, #1
   184d0:	e7c6      	b.n	18460 <_dtoa_r+0x780>
   184d2:	f7fb fa03 	bl	138dc <__multadd>
   184d6:	464f      	mov	r7, r9
   184d8:	4606      	mov	r6, r0
   184da:	4680      	mov	r8, r0
   184dc:	e79a      	b.n	18414 <_dtoa_r+0x734>
   184de:	9b01      	ldr	r3, [sp, #4]
   184e0:	2b02      	cmp	r3, #2
   184e2:	dc71      	bgt.n	185c8 <_dtoa_r+0x8e8>
   184e4:	9b07      	ldr	r3, [sp, #28]
   184e6:	2b00      	cmp	r3, #0
   184e8:	f47f af7b 	bne.w	183e2 <_dtoa_r+0x702>
   184ec:	9b04      	ldr	r3, [sp, #16]
   184ee:	4651      	mov	r1, sl
   184f0:	3301      	adds	r3, #1
   184f2:	4628      	mov	r0, r5
   184f4:	9304      	str	r3, [sp, #16]
   184f6:	f7ff fb5f 	bl	17bb8 <quorem>
   184fa:	f8dd b000 	ldr.w	fp, [sp]
   184fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
   18502:	f80b 3b01 	strb.w	r3, [fp], #1
   18506:	2700      	movs	r7, #0
   18508:	e6eb      	b.n	182e2 <_dtoa_r+0x602>
   1850a:	4651      	mov	r1, sl
   1850c:	4628      	mov	r0, r5
   1850e:	f7fb fc93 	bl	13e38 <__mcmp>
   18512:	2800      	cmp	r0, #0
   18514:	f6bf aeba 	bge.w	1828c <_dtoa_r+0x5ac>
   18518:	4629      	mov	r1, r5
   1851a:	2300      	movs	r3, #0
   1851c:	220a      	movs	r2, #10
   1851e:	4620      	mov	r0, r4
   18520:	f7fb f9dc 	bl	138dc <__multadd>
   18524:	9b04      	ldr	r3, [sp, #16]
   18526:	1e5f      	subs	r7, r3, #1
   18528:	9b07      	ldr	r3, [sp, #28]
   1852a:	4605      	mov	r5, r0
   1852c:	2b00      	cmp	r3, #0
   1852e:	f47f af4b 	bne.w	183c8 <_dtoa_r+0x6e8>
   18532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18534:	2b00      	cmp	r3, #0
   18536:	f340 8218 	ble.w	1896a <_dtoa_r+0xc8a>
   1853a:	4699      	mov	r9, r3
   1853c:	e6b1      	b.n	182a2 <_dtoa_r+0x5c2>
   1853e:	4bbc      	ldr	r3, [pc, #752]	; (18830 <_dtoa_r+0xb50>)
   18540:	9300      	str	r3, [sp, #0]
   18542:	3303      	adds	r3, #3
   18544:	e4a4      	b.n	17e90 <_dtoa_r+0x1b0>
   18546:	201c      	movs	r0, #28
   18548:	e712      	b.n	18370 <_dtoa_r+0x690>
   1854a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1854e:	2800      	cmp	r0, #0
   18550:	f47f ae74 	bne.w	1823c <_dtoa_r+0x55c>
   18554:	f3c1 0213 	ubfx	r2, r1, #0, #20
   18558:	2a00      	cmp	r2, #0
   1855a:	f000 80f4 	beq.w	18746 <_dtoa_r+0xa66>
   1855e:	9b02      	ldr	r3, [sp, #8]
   18560:	9308      	str	r3, [sp, #32]
   18562:	e66d      	b.n	18240 <_dtoa_r+0x560>
   18564:	2301      	movs	r3, #1
   18566:	9307      	str	r3, [sp, #28]
   18568:	9b04      	ldr	r3, [sp, #16]
   1856a:	445b      	add	r3, fp
   1856c:	f103 0901 	add.w	r9, r3, #1
   18570:	f1b9 0f01 	cmp.w	r9, #1
   18574:	46cc      	mov	ip, r9
   18576:	930b      	str	r3, [sp, #44]	; 0x2c
   18578:	bfb8      	it	lt
   1857a:	f04f 0c01 	movlt.w	ip, #1
   1857e:	2100      	movs	r1, #0
   18580:	f1bc 0f17 	cmp.w	ip, #23
   18584:	63e1      	str	r1, [r4, #60]	; 0x3c
   18586:	f77f acbc 	ble.w	17f02 <_dtoa_r+0x222>
   1858a:	2001      	movs	r0, #1
   1858c:	2204      	movs	r2, #4
   1858e:	0052      	lsls	r2, r2, #1
   18590:	f102 0314 	add.w	r3, r2, #20
   18594:	4563      	cmp	r3, ip
   18596:	4601      	mov	r1, r0
   18598:	f100 0001 	add.w	r0, r0, #1
   1859c:	d9f7      	bls.n	1858e <_dtoa_r+0x8ae>
   1859e:	63e1      	str	r1, [r4, #60]	; 0x3c
   185a0:	e4af      	b.n	17f02 <_dtoa_r+0x222>
   185a2:	2301      	movs	r3, #1
   185a4:	9307      	str	r3, [sp, #28]
   185a6:	f1bb 0f00 	cmp.w	fp, #0
   185aa:	dd52      	ble.n	18652 <_dtoa_r+0x972>
   185ac:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   185b0:	46d9      	mov	r9, fp
   185b2:	46dc      	mov	ip, fp
   185b4:	e7e3      	b.n	1857e <_dtoa_r+0x89e>
   185b6:	2300      	movs	r3, #0
   185b8:	9307      	str	r3, [sp, #28]
   185ba:	e7d5      	b.n	18568 <_dtoa_r+0x888>
   185bc:	2300      	movs	r3, #0
   185be:	9307      	str	r3, [sp, #28]
   185c0:	e7f1      	b.n	185a6 <_dtoa_r+0x8c6>
   185c2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   185c6:	9704      	str	r7, [sp, #16]
   185c8:	f1b9 0f00 	cmp.w	r9, #0
   185cc:	f47f ada1 	bne.w	18112 <_dtoa_r+0x432>
   185d0:	4651      	mov	r1, sl
   185d2:	464b      	mov	r3, r9
   185d4:	2205      	movs	r2, #5
   185d6:	4620      	mov	r0, r4
   185d8:	f7fb f980 	bl	138dc <__multadd>
   185dc:	4601      	mov	r1, r0
   185de:	4682      	mov	sl, r0
   185e0:	4628      	mov	r0, r5
   185e2:	f7fb fc29 	bl	13e38 <__mcmp>
   185e6:	2800      	cmp	r0, #0
   185e8:	f77f ad93 	ble.w	18112 <_dtoa_r+0x432>
   185ec:	9b04      	ldr	r3, [sp, #16]
   185ee:	f103 0b01 	add.w	fp, r3, #1
   185f2:	9b00      	ldr	r3, [sp, #0]
   185f4:	2231      	movs	r2, #49	; 0x31
   185f6:	4698      	mov	r8, r3
   185f8:	f803 2b01 	strb.w	r2, [r3], #1
   185fc:	9300      	str	r3, [sp, #0]
   185fe:	4651      	mov	r1, sl
   18600:	4620      	mov	r0, r4
   18602:	f7fb f961 	bl	138c8 <_Bfree>
   18606:	f10b 0301 	add.w	r3, fp, #1
   1860a:	f8dd 9000 	ldr.w	r9, [sp]
   1860e:	9304      	str	r3, [sp, #16]
   18610:	f8cd 8000 	str.w	r8, [sp]
   18614:	2e00      	cmp	r6, #0
   18616:	f47f ae8f 	bne.w	18338 <_dtoa_r+0x658>
   1861a:	e691      	b.n	18340 <_dtoa_r+0x660>
   1861c:	eba3 0a0a 	sub.w	sl, r3, sl
   18620:	e5c5      	b.n	181ae <_dtoa_r+0x4ce>
   18622:	4631      	mov	r1, r6
   18624:	4652      	mov	r2, sl
   18626:	4620      	mov	r0, r4
   18628:	f7fb fb2e 	bl	13c88 <__pow5mult>
   1862c:	462a      	mov	r2, r5
   1862e:	4601      	mov	r1, r0
   18630:	4606      	mov	r6, r0
   18632:	4620      	mov	r0, r4
   18634:	f7fb fa7a 	bl	13b2c <__multiply>
   18638:	4629      	mov	r1, r5
   1863a:	4605      	mov	r5, r0
   1863c:	4620      	mov	r0, r4
   1863e:	f7fb f943 	bl	138c8 <_Bfree>
   18642:	e5ea      	b.n	1821a <_dtoa_r+0x53a>
   18644:	2002      	movs	r0, #2
   18646:	eeb0 5b48 	vmov.f64	d5, d8
   1864a:	e481      	b.n	17f50 <_dtoa_r+0x270>
   1864c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   18650:	e68e      	b.n	18370 <_dtoa_r+0x690>
   18652:	f04f 0b01 	mov.w	fp, #1
   18656:	46d9      	mov	r9, fp
   18658:	e44f      	b.n	17efa <_dtoa_r+0x21a>
   1865a:	d103      	bne.n	18664 <_dtoa_r+0x984>
   1865c:	9b01      	ldr	r3, [sp, #4]
   1865e:	07db      	lsls	r3, r3, #31
   18660:	f53f ae4c 	bmi.w	182fc <_dtoa_r+0x61c>
   18664:	46d9      	mov	r9, fp
   18666:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1866a:	2b30      	cmp	r3, #48	; 0x30
   1866c:	d0fa      	beq.n	18664 <_dtoa_r+0x984>
   1866e:	e657      	b.n	18320 <_dtoa_r+0x640>
   18670:	9b04      	ldr	r3, [sp, #16]
   18672:	9a00      	ldr	r2, [sp, #0]
   18674:	3301      	adds	r3, #1
   18676:	9304      	str	r3, [sp, #16]
   18678:	2331      	movs	r3, #49	; 0x31
   1867a:	7013      	strb	r3, [r2, #0]
   1867c:	e650      	b.n	18320 <_dtoa_r+0x640>
   1867e:	f1ba 0f00 	cmp.w	sl, #0
   18682:	f000 8123 	beq.w	188cc <_dtoa_r+0xbec>
   18686:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1868a:	9b06      	ldr	r3, [sp, #24]
   1868c:	9309      	str	r3, [sp, #36]	; 0x24
   1868e:	4413      	add	r3, r2
   18690:	f8dd a020 	ldr.w	sl, [sp, #32]
   18694:	9306      	str	r3, [sp, #24]
   18696:	4490      	add	r8, r2
   18698:	e592      	b.n	181c0 <_dtoa_r+0x4e0>
   1869a:	ee07 0a90 	vmov	s15, r0
   1869e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   186a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   186a6:	eea6 5b07 	vfma.f64	d5, d6, d7
   186aa:	ee15 2a90 	vmov	r2, s11
   186ae:	ec51 0b15 	vmov	r0, r1, d5
   186b2:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   186b6:	ec41 0b15 	vmov	d5, r0, r1
   186ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   186be:	ee36 7b47 	vsub.f64	d7, d6, d7
   186c2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   186c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   186ca:	f300 8137 	bgt.w	1893c <_dtoa_r+0xc5c>
   186ce:	eeb1 5b45 	vneg.f64	d5, d5
   186d2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   186d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   186da:	f57f acfb 	bpl.w	180d4 <_dtoa_r+0x3f4>
   186de:	f04f 0a00 	mov.w	sl, #0
   186e2:	4656      	mov	r6, sl
   186e4:	e515      	b.n	18112 <_dtoa_r+0x432>
   186e6:	f000 80f5 	beq.w	188d4 <_dtoa_r+0xbf4>
   186ea:	9b04      	ldr	r3, [sp, #16]
   186ec:	4951      	ldr	r1, [pc, #324]	; (18834 <_dtoa_r+0xb54>)
   186ee:	425a      	negs	r2, r3
   186f0:	f002 000f 	and.w	r0, r2, #15
   186f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   186f8:	ed91 6b00 	vldr	d6, [r1]
   186fc:	1112      	asrs	r2, r2, #4
   186fe:	ee28 6b06 	vmul.f64	d6, d8, d6
   18702:	f000 8142 	beq.w	1898a <_dtoa_r+0xcaa>
   18706:	eeb0 7b46 	vmov.f64	d7, d6
   1870a:	494b      	ldr	r1, [pc, #300]	; (18838 <_dtoa_r+0xb58>)
   1870c:	2600      	movs	r6, #0
   1870e:	2002      	movs	r0, #2
   18710:	07d3      	lsls	r3, r2, #31
   18712:	d505      	bpl.n	18720 <_dtoa_r+0xa40>
   18714:	ed91 5b00 	vldr	d5, [r1]
   18718:	3001      	adds	r0, #1
   1871a:	2601      	movs	r6, #1
   1871c:	ee27 7b05 	vmul.f64	d7, d7, d5
   18720:	1052      	asrs	r2, r2, #1
   18722:	f101 0108 	add.w	r1, r1, #8
   18726:	d1f3      	bne.n	18710 <_dtoa_r+0xa30>
   18728:	2e00      	cmp	r6, #0
   1872a:	fe06 6b07 	vseleq.f64	d6, d6, d7
   1872e:	e41e      	b.n	17f6e <_dtoa_r+0x28e>
   18730:	9b02      	ldr	r3, [sp, #8]
   18732:	2b00      	cmp	r3, #0
   18734:	f47f ae37 	bne.w	183a6 <_dtoa_r+0x6c6>
   18738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1873c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   18740:	2a00      	cmp	r2, #0
   18742:	f040 8137 	bne.w	189b4 <_dtoa_r+0xcd4>
   18746:	4a3d      	ldr	r2, [pc, #244]	; (1883c <_dtoa_r+0xb5c>)
   18748:	400a      	ands	r2, r1
   1874a:	2a00      	cmp	r2, #0
   1874c:	f000 80fa 	beq.w	18944 <_dtoa_r+0xc64>
   18750:	9b06      	ldr	r3, [sp, #24]
   18752:	3301      	adds	r3, #1
   18754:	9306      	str	r3, [sp, #24]
   18756:	2301      	movs	r3, #1
   18758:	f108 0801 	add.w	r8, r8, #1
   1875c:	9308      	str	r3, [sp, #32]
   1875e:	e56f      	b.n	18240 <_dtoa_r+0x560>
   18760:	4629      	mov	r1, r5
   18762:	9a08      	ldr	r2, [sp, #32]
   18764:	4620      	mov	r0, r4
   18766:	f7fb fa8f 	bl	13c88 <__pow5mult>
   1876a:	4605      	mov	r5, r0
   1876c:	e55a      	b.n	18224 <_dtoa_r+0x544>
   1876e:	2a00      	cmp	r2, #0
   18770:	dd12      	ble.n	18798 <_dtoa_r+0xab8>
   18772:	4629      	mov	r1, r5
   18774:	2201      	movs	r2, #1
   18776:	4620      	mov	r0, r4
   18778:	9301      	str	r3, [sp, #4]
   1877a:	f7fb fae5 	bl	13d48 <__lshift>
   1877e:	4651      	mov	r1, sl
   18780:	4605      	mov	r5, r0
   18782:	f7fb fb59 	bl	13e38 <__mcmp>
   18786:	2800      	cmp	r0, #0
   18788:	9b01      	ldr	r3, [sp, #4]
   1878a:	f340 80e1 	ble.w	18950 <_dtoa_r+0xc70>
   1878e:	2b39      	cmp	r3, #57	; 0x39
   18790:	f000 80ca 	beq.w	18928 <_dtoa_r+0xc48>
   18794:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   18798:	46b9      	mov	r9, r7
   1879a:	f809 3b01 	strb.w	r3, [r9], #1
   1879e:	9b04      	ldr	r3, [sp, #16]
   187a0:	3301      	adds	r3, #1
   187a2:	4637      	mov	r7, r6
   187a4:	9304      	str	r3, [sp, #16]
   187a6:	4646      	mov	r6, r8
   187a8:	e5ba      	b.n	18320 <_dtoa_r+0x640>
   187aa:	ee38 8b08 	vadd.f64	d8, d8, d8
   187ae:	eeb4 8bc6 	vcmpe.f64	d8, d6
   187b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   187b6:	dc0a      	bgt.n	187ce <_dtoa_r+0xaee>
   187b8:	eeb4 8b46 	vcmp.f64	d8, d6
   187bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   187c0:	f47f acdc 	bne.w	1817c <_dtoa_r+0x49c>
   187c4:	ee17 3a10 	vmov	r3, s14
   187c8:	07d8      	lsls	r0, r3, #31
   187ca:	f57f acd7 	bpl.w	1817c <_dtoa_r+0x49c>
   187ce:	9a00      	ldr	r2, [sp, #0]
   187d0:	e454      	b.n	1807c <_dtoa_r+0x39c>
   187d2:	6871      	ldr	r1, [r6, #4]
   187d4:	4620      	mov	r0, r4
   187d6:	f7fb f851 	bl	1387c <_Balloc>
   187da:	4607      	mov	r7, r0
   187dc:	2800      	cmp	r0, #0
   187de:	f000 80de 	beq.w	1899e <_dtoa_r+0xcbe>
   187e2:	6933      	ldr	r3, [r6, #16]
   187e4:	3302      	adds	r3, #2
   187e6:	009a      	lsls	r2, r3, #2
   187e8:	f106 010c 	add.w	r1, r6, #12
   187ec:	300c      	adds	r0, #12
   187ee:	f7f5 fd91 	bl	e314 <memcpy>
   187f2:	4639      	mov	r1, r7
   187f4:	2201      	movs	r2, #1
   187f6:	4620      	mov	r0, r4
   187f8:	f7fb faa6 	bl	13d48 <__lshift>
   187fc:	4680      	mov	r8, r0
   187fe:	e5fe      	b.n	183fe <_dtoa_r+0x71e>
   18800:	9b06      	ldr	r3, [sp, #24]
   18802:	eba3 0309 	sub.w	r3, r3, r9
   18806:	9309      	str	r3, [sp, #36]	; 0x24
   18808:	e4da      	b.n	181c0 <_dtoa_r+0x4e0>
   1880a:	2b39      	cmp	r3, #57	; 0x39
   1880c:	f000 808c 	beq.w	18928 <_dtoa_r+0xc48>
   18810:	46b9      	mov	r9, r7
   18812:	3301      	adds	r3, #1
   18814:	e7c1      	b.n	1879a <_dtoa_r+0xaba>
   18816:	9a04      	ldr	r2, [sp, #16]
   18818:	3201      	adds	r2, #1
   1881a:	4637      	mov	r7, r6
   1881c:	9204      	str	r2, [sp, #16]
   1881e:	4646      	mov	r6, r8
   18820:	e55f      	b.n	182e2 <_dtoa_r+0x602>
   18822:	4629      	mov	r1, r5
   18824:	4620      	mov	r0, r4
   18826:	f7fb fa2f 	bl	13c88 <__pow5mult>
   1882a:	4605      	mov	r5, r0
   1882c:	e4fa      	b.n	18224 <_dtoa_r+0x544>
   1882e:	bf00      	nop
   18830:	20001164 	.word	0x20001164
   18834:	20000328 	.word	0x20000328
   18838:	20000300 	.word	0x20000300
   1883c:	7ff00000 	.word	0x7ff00000
   18840:	4b5e      	ldr	r3, [pc, #376]	; (189bc <_dtoa_r+0xcdc>)
   18842:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   18846:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   1884a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   1884e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   18852:	ee36 7b47 	vsub.f64	d7, d6, d7
   18856:	ec41 0b16 	vmov	d6, r0, r1
   1885a:	ee15 1a90 	vmov	r1, s11
   1885e:	ee23 3b06 	vmul.f64	d3, d3, d6
   18862:	9800      	ldr	r0, [sp, #0]
   18864:	3130      	adds	r1, #48	; 0x30
   18866:	2a01      	cmp	r2, #1
   18868:	f800 1b01 	strb.w	r1, [r0], #1
   1886c:	f000 8083 	beq.w	18976 <_dtoa_r+0xc96>
   18870:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   18874:	9b00      	ldr	r3, [sp, #0]
   18876:	1899      	adds	r1, r3, r2
   18878:	ee27 7b04 	vmul.f64	d7, d7, d4
   1887c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   18880:	ee16 3a90 	vmov	r3, s13
   18884:	3330      	adds	r3, #48	; 0x30
   18886:	f800 3b01 	strb.w	r3, [r0], #1
   1888a:	4281      	cmp	r1, r0
   1888c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   18890:	ee37 7b45 	vsub.f64	d7, d7, d5
   18894:	d1f0      	bne.n	18878 <_dtoa_r+0xb98>
   18896:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   1889a:	ee33 5b06 	vadd.f64	d5, d3, d6
   1889e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   188a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188a6:	f53f abe3 	bmi.w	18070 <_dtoa_r+0x390>
   188aa:	ee36 6b43 	vsub.f64	d6, d6, d3
   188ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
   188b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188b6:	f77f ac0d 	ble.w	180d4 <_dtoa_r+0x3f4>
   188ba:	4689      	mov	r9, r1
   188bc:	3901      	subs	r1, #1
   188be:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   188c2:	2b30      	cmp	r3, #48	; 0x30
   188c4:	d0f9      	beq.n	188ba <_dtoa_r+0xbda>
   188c6:	1c73      	adds	r3, r6, #1
   188c8:	9304      	str	r3, [sp, #16]
   188ca:	e539      	b.n	18340 <_dtoa_r+0x660>
   188cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   188ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   188d2:	e6da      	b.n	1868a <_dtoa_r+0x9aa>
   188d4:	2002      	movs	r0, #2
   188d6:	eeb0 6b48 	vmov.f64	d6, d8
   188da:	f7ff bb48 	b.w	17f6e <_dtoa_r+0x28e>
   188de:	f1b9 0f00 	cmp.w	r9, #0
   188e2:	f43f aeda 	beq.w	1869a <_dtoa_r+0x9ba>
   188e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   188e8:	2a00      	cmp	r2, #0
   188ea:	f77f abf3 	ble.w	180d4 <_dtoa_r+0x3f4>
   188ee:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   188f2:	ee26 6b04 	vmul.f64	d6, d6, d4
   188f6:	3001      	adds	r0, #1
   188f8:	ee07 0a90 	vmov	s15, r0
   188fc:	9b04      	ldr	r3, [sp, #16]
   188fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   18902:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   18906:	eea6 7b05 	vfma.f64	d7, d6, d5
   1890a:	ee17 ca90 	vmov	ip, s15
   1890e:	ec51 0b17 	vmov	r0, r1, d7
   18912:	1e5e      	subs	r6, r3, #1
   18914:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   18918:	f7ff bb47 	b.w	17faa <_dtoa_r+0x2ca>
   1891c:	9b04      	ldr	r3, [sp, #16]
   1891e:	3301      	adds	r3, #1
   18920:	9304      	str	r3, [sp, #16]
   18922:	2331      	movs	r3, #49	; 0x31
   18924:	f7ff bbb1 	b.w	1808a <_dtoa_r+0x3aa>
   18928:	9b04      	ldr	r3, [sp, #16]
   1892a:	46bb      	mov	fp, r7
   1892c:	3301      	adds	r3, #1
   1892e:	9304      	str	r3, [sp, #16]
   18930:	2339      	movs	r3, #57	; 0x39
   18932:	4637      	mov	r7, r6
   18934:	f80b 3b01 	strb.w	r3, [fp], #1
   18938:	4646      	mov	r6, r8
   1893a:	e4e1      	b.n	18300 <_dtoa_r+0x620>
   1893c:	f04f 0a00 	mov.w	sl, #0
   18940:	4656      	mov	r6, sl
   18942:	e653      	b.n	185ec <_dtoa_r+0x90c>
   18944:	9208      	str	r2, [sp, #32]
   18946:	e47b      	b.n	18240 <_dtoa_r+0x560>
   18948:	1c73      	adds	r3, r6, #1
   1894a:	9304      	str	r3, [sp, #16]
   1894c:	4689      	mov	r9, r1
   1894e:	e4f7      	b.n	18340 <_dtoa_r+0x660>
   18950:	f47f af22 	bne.w	18798 <_dtoa_r+0xab8>
   18954:	07da      	lsls	r2, r3, #31
   18956:	f57f af1f 	bpl.w	18798 <_dtoa_r+0xab8>
   1895a:	e718      	b.n	1878e <_dtoa_r+0xaae>
   1895c:	2b39      	cmp	r3, #57	; 0x39
   1895e:	d0e3      	beq.n	18928 <_dtoa_r+0xc48>
   18960:	f1b9 0f00 	cmp.w	r9, #0
   18964:	f73f af16 	bgt.w	18794 <_dtoa_r+0xab4>
   18968:	e716      	b.n	18798 <_dtoa_r+0xab8>
   1896a:	9b01      	ldr	r3, [sp, #4]
   1896c:	2b02      	cmp	r3, #2
   1896e:	f73f ae28 	bgt.w	185c2 <_dtoa_r+0x8e2>
   18972:	9704      	str	r7, [sp, #16]
   18974:	e5ba      	b.n	184ec <_dtoa_r+0x80c>
   18976:	4601      	mov	r1, r0
   18978:	e78d      	b.n	18896 <_dtoa_r+0xbb6>
   1897a:	9b01      	ldr	r3, [sp, #4]
   1897c:	2b02      	cmp	r3, #2
   1897e:	f73f ae20 	bgt.w	185c2 <_dtoa_r+0x8e2>
   18982:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   18986:	9704      	str	r7, [sp, #16]
   18988:	e52b      	b.n	183e2 <_dtoa_r+0x702>
   1898a:	2002      	movs	r0, #2
   1898c:	f7ff baef 	b.w	17f6e <_dtoa_r+0x28e>
   18990:	4b0b      	ldr	r3, [pc, #44]	; (189c0 <_dtoa_r+0xce0>)
   18992:	480c      	ldr	r0, [pc, #48]	; (189c4 <_dtoa_r+0xce4>)
   18994:	2200      	movs	r2, #0
   18996:	f240 11af 	movw	r1, #431	; 0x1af
   1899a:	f7ff f8b1 	bl	17b00 <__assert_func>
   1899e:	4b08      	ldr	r3, [pc, #32]	; (189c0 <_dtoa_r+0xce0>)
   189a0:	4808      	ldr	r0, [pc, #32]	; (189c4 <_dtoa_r+0xce4>)
   189a2:	463a      	mov	r2, r7
   189a4:	f240 21ef 	movw	r1, #751	; 0x2ef
   189a8:	f7ff f8aa 	bl	17b00 <__assert_func>
   189ac:	4b06      	ldr	r3, [pc, #24]	; (189c8 <_dtoa_r+0xce8>)
   189ae:	9300      	str	r3, [sp, #0]
   189b0:	f7ff b9d2 	b.w	17d58 <_dtoa_r+0x78>
   189b4:	9b02      	ldr	r3, [sp, #8]
   189b6:	9308      	str	r3, [sp, #32]
   189b8:	e4f7      	b.n	183aa <_dtoa_r+0x6ca>
   189ba:	bf00      	nop
   189bc:	20000328 	.word	0x20000328
   189c0:	20000e78 	.word	0x20000e78
   189c4:	20001168 	.word	0x20001168
   189c8:	20001158 	.word	0x20001158

000189cc <_strtoul_l.constprop.0>:
   189cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189d0:	4607      	mov	r7, r0
   189d2:	484c      	ldr	r0, [pc, #304]	; (18b04 <_strtoul_l.constprop.0+0x138>)
   189d4:	460e      	mov	r6, r1
   189d6:	4635      	mov	r5, r6
   189d8:	f816 eb01 	ldrb.w	lr, [r6], #1
   189dc:	f810 c00e 	ldrb.w	ip, [r0, lr]
   189e0:	f01c 0c08 	ands.w	ip, ip, #8
   189e4:	d1f7      	bne.n	189d6 <_strtoul_l.constprop.0+0xa>
   189e6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   189ea:	d05a      	beq.n	18aa2 <_strtoul_l.constprop.0+0xd6>
   189ec:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   189f0:	bf03      	ittte	eq
   189f2:	f896 e000 	ldrbeq.w	lr, [r6]
   189f6:	4664      	moveq	r4, ip
   189f8:	1cae      	addeq	r6, r5, #2
   189fa:	4664      	movne	r4, ip
   189fc:	b15b      	cbz	r3, 18a16 <_strtoul_l.constprop.0+0x4a>
   189fe:	2b10      	cmp	r3, #16
   18a00:	d054      	beq.n	18aac <_strtoul_l.constprop.0+0xe0>
   18a02:	f04f 38ff 	mov.w	r8, #4294967295
   18a06:	fbb8 f8f3 	udiv	r8, r8, r3
   18a0a:	fb03 fa08 	mul.w	sl, r3, r8
   18a0e:	ea6f 0a0a 	mvn.w	sl, sl
   18a12:	4699      	mov	r9, r3
   18a14:	e008      	b.n	18a28 <_strtoul_l.constprop.0+0x5c>
   18a16:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18a1a:	d05a      	beq.n	18ad2 <_strtoul_l.constprop.0+0x106>
   18a1c:	230a      	movs	r3, #10
   18a1e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 18b08 <_strtoul_l.constprop.0+0x13c>
   18a22:	f04f 0a05 	mov.w	sl, #5
   18a26:	4699      	mov	r9, r3
   18a28:	2500      	movs	r5, #0
   18a2a:	4628      	mov	r0, r5
   18a2c:	e005      	b.n	18a3a <_strtoul_l.constprop.0+0x6e>
   18a2e:	d02c      	beq.n	18a8a <_strtoul_l.constprop.0+0xbe>
   18a30:	fb09 c000 	mla	r0, r9, r0, ip
   18a34:	2501      	movs	r5, #1
   18a36:	f816 eb01 	ldrb.w	lr, [r6], #1
   18a3a:	f1ae 0c30 	sub.w	ip, lr, #48	; 0x30
   18a3e:	f1bc 0f09 	cmp.w	ip, #9
   18a42:	d906      	bls.n	18a52 <_strtoul_l.constprop.0+0x86>
   18a44:	f1ae 0c41 	sub.w	ip, lr, #65	; 0x41
   18a48:	f1bc 0f19 	cmp.w	ip, #25
   18a4c:	d80b      	bhi.n	18a66 <_strtoul_l.constprop.0+0x9a>
   18a4e:	f1ae 0c37 	sub.w	ip, lr, #55	; 0x37
   18a52:	4563      	cmp	r3, ip
   18a54:	dd10      	ble.n	18a78 <_strtoul_l.constprop.0+0xac>
   18a56:	f1b5 3fff 	cmp.w	r5, #4294967295
   18a5a:	d0ec      	beq.n	18a36 <_strtoul_l.constprop.0+0x6a>
   18a5c:	4540      	cmp	r0, r8
   18a5e:	d9e6      	bls.n	18a2e <_strtoul_l.constprop.0+0x62>
   18a60:	f04f 35ff 	mov.w	r5, #4294967295
   18a64:	e7e7      	b.n	18a36 <_strtoul_l.constprop.0+0x6a>
   18a66:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
   18a6a:	f1bc 0f19 	cmp.w	ip, #25
   18a6e:	d803      	bhi.n	18a78 <_strtoul_l.constprop.0+0xac>
   18a70:	f1ae 0c57 	sub.w	ip, lr, #87	; 0x57
   18a74:	4563      	cmp	r3, ip
   18a76:	dcee      	bgt.n	18a56 <_strtoul_l.constprop.0+0x8a>
   18a78:	1c6b      	adds	r3, r5, #1
   18a7a:	d00b      	beq.n	18a94 <_strtoul_l.constprop.0+0xc8>
   18a7c:	b104      	cbz	r4, 18a80 <_strtoul_l.constprop.0+0xb4>
   18a7e:	4240      	negs	r0, r0
   18a80:	b10a      	cbz	r2, 18a86 <_strtoul_l.constprop.0+0xba>
   18a82:	b965      	cbnz	r5, 18a9e <_strtoul_l.constprop.0+0xd2>
   18a84:	6011      	str	r1, [r2, #0]
   18a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18a8a:	45d4      	cmp	ip, sl
   18a8c:	ddd0      	ble.n	18a30 <_strtoul_l.constprop.0+0x64>
   18a8e:	f04f 35ff 	mov.w	r5, #4294967295
   18a92:	e7d0      	b.n	18a36 <_strtoul_l.constprop.0+0x6a>
   18a94:	2322      	movs	r3, #34	; 0x22
   18a96:	603b      	str	r3, [r7, #0]
   18a98:	4628      	mov	r0, r5
   18a9a:	2a00      	cmp	r2, #0
   18a9c:	d0f3      	beq.n	18a86 <_strtoul_l.constprop.0+0xba>
   18a9e:	1e71      	subs	r1, r6, #1
   18aa0:	e7f0      	b.n	18a84 <_strtoul_l.constprop.0+0xb8>
   18aa2:	f896 e000 	ldrb.w	lr, [r6]
   18aa6:	2401      	movs	r4, #1
   18aa8:	1cae      	adds	r6, r5, #2
   18aaa:	e7a7      	b.n	189fc <_strtoul_l.constprop.0+0x30>
   18aac:	f1be 0f30 	cmp.w	lr, #48	; 0x30
   18ab0:	d121      	bne.n	18af6 <_strtoul_l.constprop.0+0x12a>
   18ab2:	7830      	ldrb	r0, [r6, #0]
   18ab4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   18ab8:	2858      	cmp	r0, #88	; 0x58
   18aba:	d116      	bne.n	18aea <_strtoul_l.constprop.0+0x11e>
   18abc:	f04f 0910 	mov.w	r9, #16
   18ac0:	f896 e001 	ldrb.w	lr, [r6, #1]
   18ac4:	f04f 0a0f 	mov.w	sl, #15
   18ac8:	3602      	adds	r6, #2
   18aca:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18ace:	464b      	mov	r3, r9
   18ad0:	e7aa      	b.n	18a28 <_strtoul_l.constprop.0+0x5c>
   18ad2:	7833      	ldrb	r3, [r6, #0]
   18ad4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18ad8:	2b58      	cmp	r3, #88	; 0x58
   18ada:	d0ef      	beq.n	18abc <_strtoul_l.constprop.0+0xf0>
   18adc:	2308      	movs	r3, #8
   18ade:	f04f 0a07 	mov.w	sl, #7
   18ae2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18ae6:	4699      	mov	r9, r3
   18ae8:	e79e      	b.n	18a28 <_strtoul_l.constprop.0+0x5c>
   18aea:	4699      	mov	r9, r3
   18aec:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18af0:	f04f 0a0f 	mov.w	sl, #15
   18af4:	e798      	b.n	18a28 <_strtoul_l.constprop.0+0x5c>
   18af6:	f04f 0a0f 	mov.w	sl, #15
   18afa:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18afe:	4699      	mov	r9, r3
   18b00:	e792      	b.n	18a28 <_strtoul_l.constprop.0+0x5c>
   18b02:	bf00      	nop
   18b04:	20001055 	.word	0x20001055
   18b08:	19999999 	.word	0x19999999

00018b0c <_strtoul_r>:
   18b0c:	f7ff bf5e 	b.w	189cc <_strtoul_l.constprop.0>

00018b10 <_strtoll_l.constprop.0>:
   18b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b14:	b085      	sub	sp, #20
   18b16:	461f      	mov	r7, r3
   18b18:	4b57      	ldr	r3, [pc, #348]	; (18c78 <_strtoll_l.constprop.0+0x168>)
   18b1a:	9003      	str	r0, [sp, #12]
   18b1c:	468a      	mov	sl, r1
   18b1e:	9200      	str	r2, [sp, #0]
   18b20:	460d      	mov	r5, r1
   18b22:	462a      	mov	r2, r5
   18b24:	f815 4b01 	ldrb.w	r4, [r5], #1
   18b28:	5d1e      	ldrb	r6, [r3, r4]
   18b2a:	f016 0608 	ands.w	r6, r6, #8
   18b2e:	d1f8      	bne.n	18b22 <_strtoll_l.constprop.0+0x12>
   18b30:	2c2d      	cmp	r4, #45	; 0x2d
   18b32:	d075      	beq.n	18c20 <_strtoll_l.constprop.0+0x110>
   18b34:	2c2b      	cmp	r4, #43	; 0x2b
   18b36:	bf05      	ittet	eq
   18b38:	782c      	ldrbeq	r4, [r5, #0]
   18b3a:	9602      	streq	r6, [sp, #8]
   18b3c:	9602      	strne	r6, [sp, #8]
   18b3e:	1c95      	addeq	r5, r2, #2
   18b40:	f04f 36ff 	mov.w	r6, #4294967295
   18b44:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   18b48:	b12f      	cbz	r7, 18b56 <_strtoll_l.constprop.0+0x46>
   18b4a:	2f10      	cmp	r7, #16
   18b4c:	d06f      	beq.n	18c2e <_strtoll_l.constprop.0+0x11e>
   18b4e:	46b8      	mov	r8, r7
   18b50:	ea4f 79e7 	mov.w	r9, r7, asr #31
   18b54:	e005      	b.n	18b62 <_strtoll_l.constprop.0+0x52>
   18b56:	2c30      	cmp	r4, #48	; 0x30
   18b58:	d074      	beq.n	18c44 <_strtoll_l.constprop.0+0x134>
   18b5a:	f04f 080a 	mov.w	r8, #10
   18b5e:	46b9      	mov	r9, r7
   18b60:	4647      	mov	r7, r8
   18b62:	4642      	mov	r2, r8
   18b64:	464b      	mov	r3, r9
   18b66:	4630      	mov	r0, r6
   18b68:	4659      	mov	r1, fp
   18b6a:	f7f7 fb63 	bl	10234 <__aeabi_uldivmod>
   18b6e:	2300      	movs	r3, #0
   18b70:	9201      	str	r2, [sp, #4]
   18b72:	4684      	mov	ip, r0
   18b74:	460a      	mov	r2, r1
   18b76:	4618      	mov	r0, r3
   18b78:	4619      	mov	r1, r3
   18b7a:	e011      	b.n	18ba0 <_strtoll_l.constprop.0+0x90>
   18b7c:	428a      	cmp	r2, r1
   18b7e:	bf08      	it	eq
   18b80:	4584      	cmpeq	ip, r0
   18b82:	d03d      	beq.n	18c00 <_strtoll_l.constprop.0+0xf0>
   18b84:	fb00 f309 	mul.w	r3, r0, r9
   18b88:	fb08 3301 	mla	r3, r8, r1, r3
   18b8c:	fba0 0108 	umull	r0, r1, r0, r8
   18b90:	440b      	add	r3, r1
   18b92:	eb1e 0000 	adds.w	r0, lr, r0
   18b96:	eb43 71ee 	adc.w	r1, r3, lr, asr #31
   18b9a:	2301      	movs	r3, #1
   18b9c:	f815 4b01 	ldrb.w	r4, [r5], #1
   18ba0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   18ba4:	f1be 0f09 	cmp.w	lr, #9
   18ba8:	d906      	bls.n	18bb8 <_strtoll_l.constprop.0+0xa8>
   18baa:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   18bae:	f1be 0f19 	cmp.w	lr, #25
   18bb2:	d80c      	bhi.n	18bce <_strtoll_l.constprop.0+0xbe>
   18bb4:	f1a4 0e37 	sub.w	lr, r4, #55	; 0x37
   18bb8:	4577      	cmp	r7, lr
   18bba:	dd11      	ble.n	18be0 <_strtoll_l.constprop.0+0xd0>
   18bbc:	1c5c      	adds	r4, r3, #1
   18bbe:	d0ed      	beq.n	18b9c <_strtoll_l.constprop.0+0x8c>
   18bc0:	4584      	cmp	ip, r0
   18bc2:	eb72 0301 	sbcs.w	r3, r2, r1
   18bc6:	d2d9      	bcs.n	18b7c <_strtoll_l.constprop.0+0x6c>
   18bc8:	f04f 33ff 	mov.w	r3, #4294967295
   18bcc:	e7e6      	b.n	18b9c <_strtoll_l.constprop.0+0x8c>
   18bce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   18bd2:	f1be 0f19 	cmp.w	lr, #25
   18bd6:	d803      	bhi.n	18be0 <_strtoll_l.constprop.0+0xd0>
   18bd8:	f1a4 0e57 	sub.w	lr, r4, #87	; 0x57
   18bdc:	4577      	cmp	r7, lr
   18bde:	dced      	bgt.n	18bbc <_strtoll_l.constprop.0+0xac>
   18be0:	1c5a      	adds	r2, r3, #1
   18be2:	d013      	beq.n	18c0c <_strtoll_l.constprop.0+0xfc>
   18be4:	9a02      	ldr	r2, [sp, #8]
   18be6:	b112      	cbz	r2, 18bee <_strtoll_l.constprop.0+0xde>
   18be8:	4240      	negs	r0, r0
   18bea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18bee:	9a00      	ldr	r2, [sp, #0]
   18bf0:	b11a      	cbz	r2, 18bfa <_strtoll_l.constprop.0+0xea>
   18bf2:	bba3      	cbnz	r3, 18c5e <_strtoll_l.constprop.0+0x14e>
   18bf4:	9b00      	ldr	r3, [sp, #0]
   18bf6:	f8c3 a000 	str.w	sl, [r3]
   18bfa:	b005      	add	sp, #20
   18bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c00:	9b01      	ldr	r3, [sp, #4]
   18c02:	4573      	cmp	r3, lr
   18c04:	dabe      	bge.n	18b84 <_strtoll_l.constprop.0+0x74>
   18c06:	f04f 33ff 	mov.w	r3, #4294967295
   18c0a:	e7c7      	b.n	18b9c <_strtoll_l.constprop.0+0x8c>
   18c0c:	9a03      	ldr	r2, [sp, #12]
   18c0e:	2322      	movs	r3, #34	; 0x22
   18c10:	6013      	str	r3, [r2, #0]
   18c12:	9b00      	ldr	r3, [sp, #0]
   18c14:	b333      	cbz	r3, 18c64 <_strtoll_l.constprop.0+0x154>
   18c16:	f105 3aff 	add.w	sl, r5, #4294967295
   18c1a:	4630      	mov	r0, r6
   18c1c:	4659      	mov	r1, fp
   18c1e:	e7e9      	b.n	18bf4 <_strtoll_l.constprop.0+0xe4>
   18c20:	2301      	movs	r3, #1
   18c22:	782c      	ldrb	r4, [r5, #0]
   18c24:	9302      	str	r3, [sp, #8]
   18c26:	1c95      	adds	r5, r2, #2
   18c28:	f04f 4b00 	mov.w	fp, #2147483648	; 0x80000000
   18c2c:	e78c      	b.n	18b48 <_strtoll_l.constprop.0+0x38>
   18c2e:	2c30      	cmp	r4, #48	; 0x30
   18c30:	d104      	bne.n	18c3c <_strtoll_l.constprop.0+0x12c>
   18c32:	782b      	ldrb	r3, [r5, #0]
   18c34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18c38:	2b58      	cmp	r3, #88	; 0x58
   18c3a:	d008      	beq.n	18c4e <_strtoll_l.constprop.0+0x13e>
   18c3c:	46b8      	mov	r8, r7
   18c3e:	f04f 0900 	mov.w	r9, #0
   18c42:	e78e      	b.n	18b62 <_strtoll_l.constprop.0+0x52>
   18c44:	782b      	ldrb	r3, [r5, #0]
   18c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18c4a:	2b58      	cmp	r3, #88	; 0x58
   18c4c:	d10f      	bne.n	18c6e <_strtoll_l.constprop.0+0x15e>
   18c4e:	f04f 0810 	mov.w	r8, #16
   18c52:	786c      	ldrb	r4, [r5, #1]
   18c54:	f04f 0900 	mov.w	r9, #0
   18c58:	3502      	adds	r5, #2
   18c5a:	4647      	mov	r7, r8
   18c5c:	e781      	b.n	18b62 <_strtoll_l.constprop.0+0x52>
   18c5e:	4606      	mov	r6, r0
   18c60:	468b      	mov	fp, r1
   18c62:	e7d8      	b.n	18c16 <_strtoll_l.constprop.0+0x106>
   18c64:	4630      	mov	r0, r6
   18c66:	4659      	mov	r1, fp
   18c68:	b005      	add	sp, #20
   18c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c6e:	f04f 0808 	mov.w	r8, #8
   18c72:	46b9      	mov	r9, r7
   18c74:	4647      	mov	r7, r8
   18c76:	e774      	b.n	18b62 <_strtoll_l.constprop.0+0x52>
   18c78:	20001055 	.word	0x20001055

00018c7c <_strtoll_r>:
   18c7c:	f7ff bf48 	b.w	18b10 <_strtoll_l.constprop.0>

00018c80 <_strtoull_l.constprop.0>:
   18c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c84:	b085      	sub	sp, #20
   18c86:	468b      	mov	fp, r1
   18c88:	9201      	str	r2, [sp, #4]
   18c8a:	4a62      	ldr	r2, [pc, #392]	; (18e14 <_strtoull_l.constprop.0+0x194>)
   18c8c:	9003      	str	r0, [sp, #12]
   18c8e:	461e      	mov	r6, r3
   18c90:	460d      	mov	r5, r1
   18c92:	4629      	mov	r1, r5
   18c94:	f815 4b01 	ldrb.w	r4, [r5], #1
   18c98:	5d13      	ldrb	r3, [r2, r4]
   18c9a:	f013 0308 	ands.w	r3, r3, #8
   18c9e:	d1f8      	bne.n	18c92 <_strtoull_l.constprop.0+0x12>
   18ca0:	2c2d      	cmp	r4, #45	; 0x2d
   18ca2:	f000 8082 	beq.w	18daa <_strtoull_l.constprop.0+0x12a>
   18ca6:	2c2b      	cmp	r4, #43	; 0x2b
   18ca8:	bf03      	ittte	eq
   18caa:	782c      	ldrbeq	r4, [r5, #0]
   18cac:	9302      	streq	r3, [sp, #8]
   18cae:	1c8d      	addeq	r5, r1, #2
   18cb0:	9302      	strne	r3, [sp, #8]
   18cb2:	b1be      	cbz	r6, 18ce4 <_strtoull_l.constprop.0+0x64>
   18cb4:	2e10      	cmp	r6, #16
   18cb6:	d07d      	beq.n	18db4 <_strtoull_l.constprop.0+0x134>
   18cb8:	ea4f 7ae6 	mov.w	sl, r6, asr #31
   18cbc:	4632      	mov	r2, r6
   18cbe:	4653      	mov	r3, sl
   18cc0:	f04f 30ff 	mov.w	r0, #4294967295
   18cc4:	f04f 31ff 	mov.w	r1, #4294967295
   18cc8:	f7f7 fab4 	bl	10234 <__aeabi_uldivmod>
   18ccc:	4632      	mov	r2, r6
   18cce:	4607      	mov	r7, r0
   18cd0:	4688      	mov	r8, r1
   18cd2:	4653      	mov	r3, sl
   18cd4:	f04f 30ff 	mov.w	r0, #4294967295
   18cd8:	f04f 31ff 	mov.w	r1, #4294967295
   18cdc:	46b1      	mov	r9, r6
   18cde:	f7f7 faa9 	bl	10234 <__aeabi_uldivmod>
   18ce2:	e00a      	b.n	18cfa <_strtoull_l.constprop.0+0x7a>
   18ce4:	2c30      	cmp	r4, #48	; 0x30
   18ce6:	d079      	beq.n	18ddc <_strtoull_l.constprop.0+0x15c>
   18ce8:	f04f 090a 	mov.w	r9, #10
   18cec:	f8df 8128 	ldr.w	r8, [pc, #296]	; 18e18 <_strtoull_l.constprop.0+0x198>
   18cf0:	46b2      	mov	sl, r6
   18cf2:	2205      	movs	r2, #5
   18cf4:	f04f 3799 	mov.w	r7, #2576980377	; 0x99999999
   18cf8:	464e      	mov	r6, r9
   18cfa:	f04f 0c00 	mov.w	ip, #0
   18cfe:	4660      	mov	r0, ip
   18d00:	4661      	mov	r1, ip
   18d02:	e011      	b.n	18d28 <_strtoull_l.constprop.0+0xa8>
   18d04:	4541      	cmp	r1, r8
   18d06:	bf08      	it	eq
   18d08:	42b8      	cmpeq	r0, r7
   18d0a:	d03e      	beq.n	18d8a <_strtoull_l.constprop.0+0x10a>
   18d0c:	fb00 f40a 	mul.w	r4, r0, sl
   18d10:	fb09 4101 	mla	r1, r9, r1, r4
   18d14:	fba0 0409 	umull	r0, r4, r0, r9
   18d18:	4421      	add	r1, r4
   18d1a:	1818      	adds	r0, r3, r0
   18d1c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   18d20:	f04f 0c01 	mov.w	ip, #1
   18d24:	f815 4b01 	ldrb.w	r4, [r5], #1
   18d28:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   18d2c:	2b09      	cmp	r3, #9
   18d2e:	d905      	bls.n	18d3c <_strtoull_l.constprop.0+0xbc>
   18d30:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
   18d34:	2b19      	cmp	r3, #25
   18d36:	d80d      	bhi.n	18d54 <_strtoull_l.constprop.0+0xd4>
   18d38:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
   18d3c:	429e      	cmp	r6, r3
   18d3e:	dd11      	ble.n	18d64 <_strtoull_l.constprop.0+0xe4>
   18d40:	f1bc 3fff 	cmp.w	ip, #4294967295
   18d44:	d0ee      	beq.n	18d24 <_strtoull_l.constprop.0+0xa4>
   18d46:	4287      	cmp	r7, r0
   18d48:	eb78 0401 	sbcs.w	r4, r8, r1
   18d4c:	d2da      	bcs.n	18d04 <_strtoull_l.constprop.0+0x84>
   18d4e:	f04f 3cff 	mov.w	ip, #4294967295
   18d52:	e7e7      	b.n	18d24 <_strtoull_l.constprop.0+0xa4>
   18d54:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
   18d58:	2b19      	cmp	r3, #25
   18d5a:	d803      	bhi.n	18d64 <_strtoull_l.constprop.0+0xe4>
   18d5c:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
   18d60:	429e      	cmp	r6, r3
   18d62:	dced      	bgt.n	18d40 <_strtoull_l.constprop.0+0xc0>
   18d64:	f1bc 3fff 	cmp.w	ip, #4294967295
   18d68:	d014      	beq.n	18d94 <_strtoull_l.constprop.0+0x114>
   18d6a:	9b02      	ldr	r3, [sp, #8]
   18d6c:	b113      	cbz	r3, 18d74 <_strtoull_l.constprop.0+0xf4>
   18d6e:	4240      	negs	r0, r0
   18d70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   18d74:	9b01      	ldr	r3, [sp, #4]
   18d76:	b12b      	cbz	r3, 18d84 <_strtoull_l.constprop.0+0x104>
   18d78:	f1bc 0f00 	cmp.w	ip, #0
   18d7c:	d112      	bne.n	18da4 <_strtoull_l.constprop.0+0x124>
   18d7e:	9b01      	ldr	r3, [sp, #4]
   18d80:	f8c3 b000 	str.w	fp, [r3]
   18d84:	b005      	add	sp, #20
   18d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d8a:	4293      	cmp	r3, r2
   18d8c:	ddbe      	ble.n	18d0c <_strtoull_l.constprop.0+0x8c>
   18d8e:	f04f 3cff 	mov.w	ip, #4294967295
   18d92:	e7c7      	b.n	18d24 <_strtoull_l.constprop.0+0xa4>
   18d94:	9a03      	ldr	r2, [sp, #12]
   18d96:	2322      	movs	r3, #34	; 0x22
   18d98:	6013      	str	r3, [r2, #0]
   18d9a:	9b01      	ldr	r3, [sp, #4]
   18d9c:	4660      	mov	r0, ip
   18d9e:	4661      	mov	r1, ip
   18da0:	2b00      	cmp	r3, #0
   18da2:	d0ef      	beq.n	18d84 <_strtoull_l.constprop.0+0x104>
   18da4:	f105 3bff 	add.w	fp, r5, #4294967295
   18da8:	e7e9      	b.n	18d7e <_strtoull_l.constprop.0+0xfe>
   18daa:	2301      	movs	r3, #1
   18dac:	782c      	ldrb	r4, [r5, #0]
   18dae:	9302      	str	r3, [sp, #8]
   18db0:	1c8d      	adds	r5, r1, #2
   18db2:	e77e      	b.n	18cb2 <_strtoull_l.constprop.0+0x32>
   18db4:	2c30      	cmp	r4, #48	; 0x30
   18db6:	d123      	bne.n	18e00 <_strtoull_l.constprop.0+0x180>
   18db8:	782b      	ldrb	r3, [r5, #0]
   18dba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18dbe:	2b58      	cmp	r3, #88	; 0x58
   18dc0:	d11b      	bne.n	18dfa <_strtoull_l.constprop.0+0x17a>
   18dc2:	f04f 0910 	mov.w	r9, #16
   18dc6:	786c      	ldrb	r4, [r5, #1]
   18dc8:	220f      	movs	r2, #15
   18dca:	3502      	adds	r5, #2
   18dcc:	f04f 37ff 	mov.w	r7, #4294967295
   18dd0:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18dd4:	f04f 0a00 	mov.w	sl, #0
   18dd8:	464e      	mov	r6, r9
   18dda:	e78e      	b.n	18cfa <_strtoull_l.constprop.0+0x7a>
   18ddc:	782b      	ldrb	r3, [r5, #0]
   18dde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   18de2:	2b58      	cmp	r3, #88	; 0x58
   18de4:	d0ed      	beq.n	18dc2 <_strtoull_l.constprop.0+0x142>
   18de6:	f04f 0908 	mov.w	r9, #8
   18dea:	46b2      	mov	sl, r6
   18dec:	2207      	movs	r2, #7
   18dee:	f04f 37ff 	mov.w	r7, #4294967295
   18df2:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
   18df6:	464e      	mov	r6, r9
   18df8:	e77f      	b.n	18cfa <_strtoull_l.constprop.0+0x7a>
   18dfa:	f04f 0a00 	mov.w	sl, #0
   18dfe:	e75d      	b.n	18cbc <_strtoull_l.constprop.0+0x3c>
   18e00:	220f      	movs	r2, #15
   18e02:	f04f 37ff 	mov.w	r7, #4294967295
   18e06:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
   18e0a:	46b1      	mov	r9, r6
   18e0c:	f04f 0a00 	mov.w	sl, #0
   18e10:	e773      	b.n	18cfa <_strtoull_l.constprop.0+0x7a>
   18e12:	bf00      	nop
   18e14:	20001055 	.word	0x20001055
   18e18:	19999999 	.word	0x19999999

00018e1c <_strtoull_r>:
   18e1c:	f7ff bf30 	b.w	18c80 <_strtoull_l.constprop.0>

00018e20 <_mbrtowc_r>:
   18e20:	b570      	push	{r4, r5, r6, lr}
   18e22:	b082      	sub	sp, #8
   18e24:	4604      	mov	r4, r0
   18e26:	9d06      	ldr	r5, [sp, #24]
   18e28:	b155      	cbz	r5, 18e40 <_mbrtowc_r+0x20>
   18e2a:	b16a      	cbz	r2, 18e48 <_mbrtowc_r+0x28>
   18e2c:	480f      	ldr	r0, [pc, #60]	; (18e6c <_mbrtowc_r+0x4c>)
   18e2e:	9500      	str	r5, [sp, #0]
   18e30:	f8d0 60e4 	ldr.w	r6, [r0, #228]	; 0xe4
   18e34:	4620      	mov	r0, r4
   18e36:	47b0      	blx	r6
   18e38:	1c43      	adds	r3, r0, #1
   18e3a:	d010      	beq.n	18e5e <_mbrtowc_r+0x3e>
   18e3c:	b002      	add	sp, #8
   18e3e:	bd70      	pop	{r4, r5, r6, pc}
   18e40:	f100 05f4 	add.w	r5, r0, #244	; 0xf4
   18e44:	2a00      	cmp	r2, #0
   18e46:	d1f1      	bne.n	18e2c <_mbrtowc_r+0xc>
   18e48:	4b08      	ldr	r3, [pc, #32]	; (18e6c <_mbrtowc_r+0x4c>)
   18e4a:	9500      	str	r5, [sp, #0]
   18e4c:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
   18e50:	4611      	mov	r1, r2
   18e52:	2301      	movs	r3, #1
   18e54:	4a06      	ldr	r2, [pc, #24]	; (18e70 <_mbrtowc_r+0x50>)
   18e56:	4620      	mov	r0, r4
   18e58:	47b0      	blx	r6
   18e5a:	1c43      	adds	r3, r0, #1
   18e5c:	d1ee      	bne.n	18e3c <_mbrtowc_r+0x1c>
   18e5e:	2200      	movs	r2, #0
   18e60:	238a      	movs	r3, #138	; 0x8a
   18e62:	602a      	str	r2, [r5, #0]
   18e64:	6023      	str	r3, [r4, #0]
   18e66:	b002      	add	sp, #8
   18e68:	bd70      	pop	{r4, r5, r6, pc}
   18e6a:	bf00      	nop
   18e6c:	20008f74 	.word	0x20008f74
   18e70:	20000560 	.word	0x20000560

00018e74 <_wcrtomb_r>:
   18e74:	b570      	push	{r4, r5, r6, lr}
   18e76:	4605      	mov	r5, r0
   18e78:	b084      	sub	sp, #16
   18e7a:	b15b      	cbz	r3, 18e94 <_wcrtomb_r+0x20>
   18e7c:	461c      	mov	r4, r3
   18e7e:	b169      	cbz	r1, 18e9c <_wcrtomb_r+0x28>
   18e80:	4b0e      	ldr	r3, [pc, #56]	; (18ebc <_wcrtomb_r+0x48>)
   18e82:	4628      	mov	r0, r5
   18e84:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   18e88:	4623      	mov	r3, r4
   18e8a:	47b0      	blx	r6
   18e8c:	1c43      	adds	r3, r0, #1
   18e8e:	d00f      	beq.n	18eb0 <_wcrtomb_r+0x3c>
   18e90:	b004      	add	sp, #16
   18e92:	bd70      	pop	{r4, r5, r6, pc}
   18e94:	f500 7482 	add.w	r4, r0, #260	; 0x104
   18e98:	2900      	cmp	r1, #0
   18e9a:	d1f1      	bne.n	18e80 <_wcrtomb_r+0xc>
   18e9c:	4a07      	ldr	r2, [pc, #28]	; (18ebc <_wcrtomb_r+0x48>)
   18e9e:	4623      	mov	r3, r4
   18ea0:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   18ea4:	4628      	mov	r0, r5
   18ea6:	460a      	mov	r2, r1
   18ea8:	a901      	add	r1, sp, #4
   18eaa:	47b0      	blx	r6
   18eac:	1c43      	adds	r3, r0, #1
   18eae:	d1ef      	bne.n	18e90 <_wcrtomb_r+0x1c>
   18eb0:	2200      	movs	r2, #0
   18eb2:	238a      	movs	r3, #138	; 0x8a
   18eb4:	6022      	str	r2, [r4, #0]
   18eb6:	602b      	str	r3, [r5, #0]
   18eb8:	b004      	add	sp, #16
   18eba:	bd70      	pop	{r4, r5, r6, pc}
   18ebc:	20008f74 	.word	0x20008f74

00018ec0 <_wcsrtombs_r>:
   18ec0:	b510      	push	{r4, lr}
   18ec2:	b082      	sub	sp, #8
   18ec4:	9c04      	ldr	r4, [sp, #16]
   18ec6:	e9cd 3400 	strd	r3, r4, [sp]
   18eca:	f04f 33ff 	mov.w	r3, #4294967295
   18ece:	f001 fd9f 	bl	1aa10 <_wcsnrtombs_r>
   18ed2:	b002      	add	sp, #8
   18ed4:	bd10      	pop	{r4, pc}
   18ed6:	bf00      	nop

00018ed8 <iswspace>:
   18ed8:	2100      	movs	r1, #0
   18eda:	f000 b801 	b.w	18ee0 <iswspace_l>
   18ede:	bf00      	nop

00018ee0 <iswspace_l>:
   18ee0:	b510      	push	{r4, lr}
   18ee2:	f000 f8ab 	bl	1903c <_jp2uc_l>
   18ee6:	4604      	mov	r4, r0
   18ee8:	f001 fda4 	bl	1aa34 <category>
   18eec:	f1a0 031a 	sub.w	r3, r0, #26
   18ef0:	b2db      	uxtb	r3, r3
   18ef2:	2b02      	cmp	r3, #2
   18ef4:	d906      	bls.n	18f04 <iswspace_l+0x24>
   18ef6:	f1a4 0009 	sub.w	r0, r4, #9
   18efa:	2804      	cmp	r0, #4
   18efc:	bf8c      	ite	hi
   18efe:	2000      	movhi	r0, #0
   18f00:	2001      	movls	r0, #1
   18f02:	bd10      	pop	{r4, pc}
   18f04:	2001      	movs	r0, #1
   18f06:	bd10      	pop	{r4, pc}

00018f08 <__jp2uc>:
   18f08:	2902      	cmp	r1, #2
   18f0a:	d032      	beq.n	18f72 <__jp2uc+0x6a>
   18f0c:	2903      	cmp	r1, #3
   18f0e:	f3c0 2307 	ubfx	r3, r0, #8, #8
   18f12:	bf1d      	ittte	ne
   18f14:	f1a0 0280 	subne.w	r2, r0, #128	; 0x80
   18f18:	f083 0380 	eorne.w	r3, r3, #128	; 0x80
   18f1c:	b2d2      	uxtbne	r2, r2
   18f1e:	b2c2      	uxtbeq	r2, r0
   18f20:	f103 0150 	add.w	r1, r3, #80	; 0x50
   18f24:	b2c9      	uxtb	r1, r1
   18f26:	291f      	cmp	r1, #31
   18f28:	d806      	bhi.n	18f38 <__jp2uc+0x30>
   18f2a:	f64c 71d3 	movw	r1, #53203	; 0xcfd3
   18f2e:	4288      	cmp	r0, r1
   18f30:	d969      	bls.n	19006 <__jp2uc+0xfe>
   18f32:	f04f 30ff 	mov.w	r0, #4294967295
   18f36:	4770      	bx	lr
   18f38:	f103 0130 	add.w	r1, r3, #48	; 0x30
   18f3c:	b2c9      	uxtb	r1, r1
   18f3e:	2924      	cmp	r1, #36	; 0x24
   18f40:	d80e      	bhi.n	18f60 <__jp2uc+0x58>
   18f42:	f24f 41a6 	movw	r1, #62630	; 0xf4a6
   18f46:	4288      	cmp	r0, r1
   18f48:	d8f3      	bhi.n	18f32 <__jp2uc+0x2a>
   18f4a:	3bd0      	subs	r3, #208	; 0xd0
   18f4c:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   18f50:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18f54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   18f58:	4a30      	ldr	r2, [pc, #192]	; (1901c <__jp2uc+0x114>)
   18f5a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18f5e:	4770      	bx	lr
   18f60:	3ba1      	subs	r3, #161	; 0xa1
   18f62:	2b07      	cmp	r3, #7
   18f64:	d8e5      	bhi.n	18f32 <__jp2uc+0x2a>
   18f66:	e8df f003 	tbb	[pc, r3]
   18f6a:	3e48      	.short	0x3e48
   18f6c:	25292e34 	.word	0x25292e34
   18f70:	1921      	.short	0x1921
   18f72:	b2c2      	uxtb	r2, r0
   18f74:	2a9e      	cmp	r2, #158	; 0x9e
   18f76:	f3c0 2107 	ubfx	r1, r0, #8, #8
   18f7a:	d90b      	bls.n	18f94 <__jp2uc+0x8c>
   18f7c:	3223      	adds	r2, #35	; 0x23
   18f7e:	b2d2      	uxtb	r2, r2
   18f80:	2380      	movs	r3, #128	; 0x80
   18f82:	299f      	cmp	r1, #159	; 0x9f
   18f84:	bf94      	ite	ls
   18f86:	3970      	subls	r1, #112	; 0x70
   18f88:	3150      	addhi	r1, #80	; 0x50
   18f8a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   18f8e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   18f92:	e7c5      	b.n	18f20 <__jp2uc+0x18>
   18f94:	3a7e      	subs	r2, #126	; 0x7e
   18f96:	b2d2      	uxtb	r2, r2
   18f98:	237f      	movs	r3, #127	; 0x7f
   18f9a:	e7f2      	b.n	18f82 <__jp2uc+0x7a>
   18f9c:	2ac0      	cmp	r2, #192	; 0xc0
   18f9e:	d8c8      	bhi.n	18f32 <__jp2uc+0x2a>
   18fa0:	4b1f      	ldr	r3, [pc, #124]	; (19020 <__jp2uc+0x118>)
   18fa2:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18fa6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18faa:	4770      	bx	lr
   18fac:	2af1      	cmp	r2, #241	; 0xf1
   18fae:	d8c0      	bhi.n	18f32 <__jp2uc+0x2a>
   18fb0:	4b1c      	ldr	r3, [pc, #112]	; (19024 <__jp2uc+0x11c>)
   18fb2:	e019      	b.n	18fe8 <__jp2uc+0xe0>
   18fb4:	2ad8      	cmp	r2, #216	; 0xd8
   18fb6:	d8bc      	bhi.n	18f32 <__jp2uc+0x2a>
   18fb8:	4b1b      	ldr	r3, [pc, #108]	; (19028 <__jp2uc+0x120>)
   18fba:	e015      	b.n	18fe8 <__jp2uc+0xe0>
   18fbc:	2af6      	cmp	r2, #246	; 0xf6
   18fbe:	d8b8      	bhi.n	18f32 <__jp2uc+0x2a>
   18fc0:	f502 5040 	add.w	r0, r2, #12288	; 0x3000
   18fc4:	4770      	bx	lr
   18fc6:	2af3      	cmp	r2, #243	; 0xf3
   18fc8:	d8b3      	bhi.n	18f32 <__jp2uc+0x2a>
   18fca:	f502 503e 	add.w	r0, r2, #12160	; 0x2f80
   18fce:	3020      	adds	r0, #32
   18fd0:	4770      	bx	lr
   18fd2:	4b16      	ldr	r3, [pc, #88]	; (1902c <__jp2uc+0x124>)
   18fd4:	4413      	add	r3, r2
   18fd6:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
   18fda:	2b00      	cmp	r3, #0
   18fdc:	d0a9      	beq.n	18f32 <__jp2uc+0x2a>
   18fde:	f502 407e 	add.w	r0, r2, #65024	; 0xfe00
   18fe2:	3060      	adds	r0, #96	; 0x60
   18fe4:	4770      	bx	lr
   18fe6:	4b12      	ldr	r3, [pc, #72]	; (19030 <__jp2uc+0x128>)
   18fe8:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   18fec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18ff0:	2800      	cmp	r0, #0
   18ff2:	bf08      	it	eq
   18ff4:	f04f 30ff 	moveq.w	r0, #4294967295
   18ff8:	4770      	bx	lr
   18ffa:	4b0e      	ldr	r3, [pc, #56]	; (19034 <__jp2uc+0x12c>)
   18ffc:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19000:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   19004:	4770      	bx	lr
   19006:	3bb0      	subs	r3, #176	; 0xb0
   19008:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
   1900c:	f1a2 00a1 	sub.w	r0, r2, #161	; 0xa1
   19010:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   19014:	4a08      	ldr	r2, [pc, #32]	; (19038 <__jp2uc+0x130>)
   19016:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1901a:	4770      	bx	lr
   1901c:	200061e0 	.word	0x200061e0
   19020:	20001508 	.word	0x20001508
   19024:	20001464 	.word	0x20001464
   19028:	200013f4 	.word	0x200013f4
   1902c:	20001398 	.word	0x20001398
   19030:	200012dc 	.word	0x200012dc
   19034:	20001220 	.word	0x20001220
   19038:	20001548 	.word	0x20001548

0001903c <_jp2uc_l>:
   1903c:	b538      	push	{r3, r4, r5, lr}
   1903e:	4605      	mov	r5, r0
   19040:	b1b9      	cbz	r1, 19072 <_jp2uc_l+0x36>
   19042:	f501 7495 	add.w	r4, r1, #298	; 0x12a
   19046:	4912      	ldr	r1, [pc, #72]	; (19090 <_jp2uc_l+0x54>)
   19048:	4620      	mov	r0, r4
   1904a:	f7f9 fbbd 	bl	127c8 <strcmp>
   1904e:	b928      	cbnz	r0, 1905c <_jp2uc_l+0x20>
   19050:	4628      	mov	r0, r5
   19052:	2101      	movs	r1, #1
   19054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19058:	f7ff bf56 	b.w	18f08 <__jp2uc>
   1905c:	490d      	ldr	r1, [pc, #52]	; (19094 <_jp2uc_l+0x58>)
   1905e:	4620      	mov	r0, r4
   19060:	f7f9 fbb2 	bl	127c8 <strcmp>
   19064:	b938      	cbnz	r0, 19076 <_jp2uc_l+0x3a>
   19066:	4628      	mov	r0, r5
   19068:	2102      	movs	r1, #2
   1906a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1906e:	f7ff bf4b 	b.w	18f08 <__jp2uc>
   19072:	4c09      	ldr	r4, [pc, #36]	; (19098 <_jp2uc_l+0x5c>)
   19074:	e7e7      	b.n	19046 <_jp2uc_l+0xa>
   19076:	4909      	ldr	r1, [pc, #36]	; (1909c <_jp2uc_l+0x60>)
   19078:	4620      	mov	r0, r4
   1907a:	f7f9 fba5 	bl	127c8 <strcmp>
   1907e:	b928      	cbnz	r0, 1908c <_jp2uc_l+0x50>
   19080:	4628      	mov	r0, r5
   19082:	2103      	movs	r1, #3
   19084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19088:	f7ff bf3e 	b.w	18f08 <__jp2uc>
   1908c:	4628      	mov	r0, r5
   1908e:	bd38      	pop	{r3, r4, r5, pc}
   19090:	200011c4 	.word	0x200011c4
   19094:	200011c8 	.word	0x200011c8
   19098:	2000909e 	.word	0x2000909e
   1909c:	200011d0 	.word	0x200011d0

000190a0 <fiprintf>:
   190a0:	b40e      	push	{r1, r2, r3}
   190a2:	b510      	push	{r4, lr}
   190a4:	b083      	sub	sp, #12
   190a6:	ab05      	add	r3, sp, #20
   190a8:	4c06      	ldr	r4, [pc, #24]	; (190c4 <fiprintf+0x24>)
   190aa:	f853 2b04 	ldr.w	r2, [r3], #4
   190ae:	9301      	str	r3, [sp, #4]
   190b0:	4601      	mov	r1, r0
   190b2:	6820      	ldr	r0, [r4, #0]
   190b4:	f000 f97c 	bl	193b0 <_vfiprintf_r>
   190b8:	b003      	add	sp, #12
   190ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   190be:	b003      	add	sp, #12
   190c0:	4770      	bx	lr
   190c2:	bf00      	nop
   190c4:	200094fc 	.word	0x200094fc

000190c8 <__ssprint_r>:
   190c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190cc:	6893      	ldr	r3, [r2, #8]
   190ce:	6817      	ldr	r7, [r2, #0]
   190d0:	b083      	sub	sp, #12
   190d2:	4692      	mov	sl, r2
   190d4:	2b00      	cmp	r3, #0
   190d6:	d070      	beq.n	191ba <__ssprint_r+0xf2>
   190d8:	4681      	mov	r9, r0
   190da:	688a      	ldr	r2, [r1, #8]
   190dc:	6808      	ldr	r0, [r1, #0]
   190de:	460c      	mov	r4, r1
   190e0:	3708      	adds	r7, #8
   190e2:	e043      	b.n	1916c <__ssprint_r+0xa4>
   190e4:	89a3      	ldrh	r3, [r4, #12]
   190e6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   190ea:	d02e      	beq.n	1914a <__ssprint_r+0x82>
   190ec:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   190f0:	eba0 0801 	sub.w	r8, r0, r1
   190f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   190f8:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   190fc:	f108 0001 	add.w	r0, r8, #1
   19100:	1076      	asrs	r6, r6, #1
   19102:	4428      	add	r0, r5
   19104:	42b0      	cmp	r0, r6
   19106:	4632      	mov	r2, r6
   19108:	bf84      	itt	hi
   1910a:	4606      	movhi	r6, r0
   1910c:	4632      	movhi	r2, r6
   1910e:	055b      	lsls	r3, r3, #21
   19110:	d537      	bpl.n	19182 <__ssprint_r+0xba>
   19112:	4611      	mov	r1, r2
   19114:	4648      	mov	r0, r9
   19116:	f7f7 fa1b 	bl	10550 <_malloc_r>
   1911a:	9001      	str	r0, [sp, #4]
   1911c:	2800      	cmp	r0, #0
   1911e:	d03a      	beq.n	19196 <__ssprint_r+0xce>
   19120:	4642      	mov	r2, r8
   19122:	6921      	ldr	r1, [r4, #16]
   19124:	f7f5 f8f6 	bl	e314 <memcpy>
   19128:	89a2      	ldrh	r2, [r4, #12]
   1912a:	9b01      	ldr	r3, [sp, #4]
   1912c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   19130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19134:	81a2      	strh	r2, [r4, #12]
   19136:	eba6 0208 	sub.w	r2, r6, r8
   1913a:	eb03 0008 	add.w	r0, r3, r8
   1913e:	6166      	str	r6, [r4, #20]
   19140:	60a2      	str	r2, [r4, #8]
   19142:	6123      	str	r3, [r4, #16]
   19144:	6020      	str	r0, [r4, #0]
   19146:	462e      	mov	r6, r5
   19148:	46a8      	mov	r8, r5
   1914a:	4642      	mov	r2, r8
   1914c:	4659      	mov	r1, fp
   1914e:	f7f9 f8f3 	bl	12338 <memmove>
   19152:	f8da 3008 	ldr.w	r3, [sl, #8]
   19156:	68a2      	ldr	r2, [r4, #8]
   19158:	6820      	ldr	r0, [r4, #0]
   1915a:	1b92      	subs	r2, r2, r6
   1915c:	4440      	add	r0, r8
   1915e:	1b5b      	subs	r3, r3, r5
   19160:	60a2      	str	r2, [r4, #8]
   19162:	6020      	str	r0, [r4, #0]
   19164:	f8ca 3008 	str.w	r3, [sl, #8]
   19168:	b33b      	cbz	r3, 191ba <__ssprint_r+0xf2>
   1916a:	3708      	adds	r7, #8
   1916c:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   19170:	2d00      	cmp	r5, #0
   19172:	d0fa      	beq.n	1916a <__ssprint_r+0xa2>
   19174:	42aa      	cmp	r2, r5
   19176:	4616      	mov	r6, r2
   19178:	4690      	mov	r8, r2
   1917a:	d9b3      	bls.n	190e4 <__ssprint_r+0x1c>
   1917c:	462e      	mov	r6, r5
   1917e:	46a8      	mov	r8, r5
   19180:	e7e3      	b.n	1914a <__ssprint_r+0x82>
   19182:	4648      	mov	r0, r9
   19184:	f7f7 fcac 	bl	10ae0 <_realloc_r>
   19188:	4603      	mov	r3, r0
   1918a:	2800      	cmp	r0, #0
   1918c:	d1d3      	bne.n	19136 <__ssprint_r+0x6e>
   1918e:	6921      	ldr	r1, [r4, #16]
   19190:	4648      	mov	r0, r9
   19192:	f7f9 fe47 	bl	12e24 <_free_r>
   19196:	89a3      	ldrh	r3, [r4, #12]
   19198:	220c      	movs	r2, #12
   1919a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1919e:	f8c9 2000 	str.w	r2, [r9]
   191a2:	f04f 30ff 	mov.w	r0, #4294967295
   191a6:	81a3      	strh	r3, [r4, #12]
   191a8:	2200      	movs	r2, #0
   191aa:	2300      	movs	r3, #0
   191ac:	f8ca 2008 	str.w	r2, [sl, #8]
   191b0:	f8ca 3004 	str.w	r3, [sl, #4]
   191b4:	b003      	add	sp, #12
   191b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191ba:	2000      	movs	r0, #0
   191bc:	2300      	movs	r3, #0
   191be:	f8ca 3004 	str.w	r3, [sl, #4]
   191c2:	b003      	add	sp, #12
   191c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191c8 <_sungetc_r>:
   191c8:	b538      	push	{r3, r4, r5, lr}
   191ca:	1c4b      	adds	r3, r1, #1
   191cc:	d01a      	beq.n	19204 <_sungetc_r+0x3c>
   191ce:	8993      	ldrh	r3, [r2, #12]
   191d0:	4614      	mov	r4, r2
   191d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
   191d4:	f023 0320 	bic.w	r3, r3, #32
   191d8:	81a3      	strh	r3, [r4, #12]
   191da:	b2cd      	uxtb	r5, r1
   191dc:	b1aa      	cbz	r2, 1920a <_sungetc_r+0x42>
   191de:	6862      	ldr	r2, [r4, #4]
   191e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   191e2:	429a      	cmp	r2, r3
   191e4:	da09      	bge.n	191fa <_sungetc_r+0x32>
   191e6:	6823      	ldr	r3, [r4, #0]
   191e8:	1e5a      	subs	r2, r3, #1
   191ea:	6022      	str	r2, [r4, #0]
   191ec:	f803 5c01 	strb.w	r5, [r3, #-1]
   191f0:	6863      	ldr	r3, [r4, #4]
   191f2:	3301      	adds	r3, #1
   191f4:	6063      	str	r3, [r4, #4]
   191f6:	4628      	mov	r0, r5
   191f8:	bd38      	pop	{r3, r4, r5, pc}
   191fa:	4621      	mov	r1, r4
   191fc:	f001 fa58 	bl	1a6b0 <__submore>
   19200:	2800      	cmp	r0, #0
   19202:	d0f0      	beq.n	191e6 <_sungetc_r+0x1e>
   19204:	f04f 35ff 	mov.w	r5, #4294967295
   19208:	e7f5      	b.n	191f6 <_sungetc_r+0x2e>
   1920a:	6923      	ldr	r3, [r4, #16]
   1920c:	6822      	ldr	r2, [r4, #0]
   1920e:	b12b      	cbz	r3, 1921c <_sungetc_r+0x54>
   19210:	4293      	cmp	r3, r2
   19212:	d203      	bcs.n	1921c <_sungetc_r+0x54>
   19214:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   19218:	42ab      	cmp	r3, r5
   1921a:	d00f      	beq.n	1923c <_sungetc_r+0x74>
   1921c:	6861      	ldr	r1, [r4, #4]
   1921e:	63e1      	str	r1, [r4, #60]	; 0x3c
   19220:	4623      	mov	r3, r4
   19222:	63a2      	str	r2, [r4, #56]	; 0x38
   19224:	f104 0140 	add.w	r1, r4, #64	; 0x40
   19228:	2203      	movs	r2, #3
   1922a:	6362      	str	r2, [r4, #52]	; 0x34
   1922c:	6321      	str	r1, [r4, #48]	; 0x30
   1922e:	f803 5f42 	strb.w	r5, [r3, #66]!
   19232:	2201      	movs	r2, #1
   19234:	e9c4 3200 	strd	r3, r2, [r4]
   19238:	4628      	mov	r0, r5
   1923a:	bd38      	pop	{r3, r4, r5, pc}
   1923c:	6863      	ldr	r3, [r4, #4]
   1923e:	3a01      	subs	r2, #1
   19240:	3301      	adds	r3, #1
   19242:	e9c4 2300 	strd	r2, r3, [r4]
   19246:	e7d6      	b.n	191f6 <_sungetc_r+0x2e>

00019248 <__ssrefill_r>:
   19248:	b510      	push	{r4, lr}
   1924a:	460c      	mov	r4, r1
   1924c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1924e:	b169      	cbz	r1, 1926c <__ssrefill_r+0x24>
   19250:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19254:	4299      	cmp	r1, r3
   19256:	d001      	beq.n	1925c <__ssrefill_r+0x14>
   19258:	f7f9 fde4 	bl	12e24 <_free_r>
   1925c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1925e:	6063      	str	r3, [r4, #4]
   19260:	2000      	movs	r0, #0
   19262:	6320      	str	r0, [r4, #48]	; 0x30
   19264:	b113      	cbz	r3, 1926c <__ssrefill_r+0x24>
   19266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19268:	6023      	str	r3, [r4, #0]
   1926a:	bd10      	pop	{r4, pc}
   1926c:	89a3      	ldrh	r3, [r4, #12]
   1926e:	6921      	ldr	r1, [r4, #16]
   19270:	2200      	movs	r2, #0
   19272:	f043 0320 	orr.w	r3, r3, #32
   19276:	e9c4 1200 	strd	r1, r2, [r4]
   1927a:	81a3      	strh	r3, [r4, #12]
   1927c:	f04f 30ff 	mov.w	r0, #4294967295
   19280:	bd10      	pop	{r4, pc}
   19282:	bf00      	nop

00019284 <_sfread_r>:
   19284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19288:	b085      	sub	sp, #20
   1928a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1928e:	fb02 f303 	mul.w	r3, r2, r3
   19292:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19294:	9301      	str	r3, [sp, #4]
   19296:	b3a3      	cbz	r3, 19302 <_sfread_r+0x7e>
   19298:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1929c:	9b01      	ldr	r3, [sp, #4]
   1929e:	4553      	cmp	r3, sl
   192a0:	468b      	mov	fp, r1
   192a2:	d946      	bls.n	19332 <_sfread_r+0xae>
   192a4:	46a0      	mov	r8, r4
   192a6:	9d01      	ldr	r5, [sp, #4]
   192a8:	f858 1b40 	ldr.w	r1, [r8], #64
   192ac:	4607      	mov	r7, r0
   192ae:	2600      	movs	r6, #0
   192b0:	4652      	mov	r2, sl
   192b2:	4658      	mov	r0, fp
   192b4:	f7f5 f82e 	bl	e314 <memcpy>
   192b8:	6823      	ldr	r3, [r4, #0]
   192ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
   192bc:	4453      	add	r3, sl
   192be:	46a9      	mov	r9, r5
   192c0:	e9c4 3600 	strd	r3, r6, [r4]
   192c4:	4611      	mov	r1, r2
   192c6:	4638      	mov	r0, r7
   192c8:	44d3      	add	fp, sl
   192ca:	eba5 050a 	sub.w	r5, r5, sl
   192ce:	b1e2      	cbz	r2, 1930a <_sfread_r+0x86>
   192d0:	4542      	cmp	r2, r8
   192d2:	d001      	beq.n	192d8 <_sfread_r+0x54>
   192d4:	f7f9 fda6 	bl	12e24 <_free_r>
   192d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   192da:	6326      	str	r6, [r4, #48]	; 0x30
   192dc:	6063      	str	r3, [r4, #4]
   192de:	b1a3      	cbz	r3, 1930a <_sfread_r+0x86>
   192e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   192e2:	6021      	str	r1, [r4, #0]
   192e4:	42ab      	cmp	r3, r5
   192e6:	469a      	mov	sl, r3
   192e8:	d3e2      	bcc.n	192b0 <_sfread_r+0x2c>
   192ea:	9b02      	ldr	r3, [sp, #8]
   192ec:	9301      	str	r3, [sp, #4]
   192ee:	462a      	mov	r2, r5
   192f0:	4658      	mov	r0, fp
   192f2:	f7f5 f80f 	bl	e314 <memcpy>
   192f6:	e9d4 3200 	ldrd	r3, r2, [r4]
   192fa:	1b52      	subs	r2, r2, r5
   192fc:	442b      	add	r3, r5
   192fe:	e9c4 3200 	strd	r3, r2, [r4]
   19302:	9801      	ldr	r0, [sp, #4]
   19304:	b005      	add	sp, #20
   19306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1930a:	9a01      	ldr	r2, [sp, #4]
   1930c:	9b03      	ldr	r3, [sp, #12]
   1930e:	4452      	add	r2, sl
   19310:	eba2 0209 	sub.w	r2, r2, r9
   19314:	fbb2 f3f3 	udiv	r3, r2, r3
   19318:	9301      	str	r3, [sp, #4]
   1931a:	89a3      	ldrh	r3, [r4, #12]
   1931c:	6922      	ldr	r2, [r4, #16]
   1931e:	9801      	ldr	r0, [sp, #4]
   19320:	f043 0320 	orr.w	r3, r3, #32
   19324:	81a3      	strh	r3, [r4, #12]
   19326:	2300      	movs	r3, #0
   19328:	e9c4 2300 	strd	r2, r3, [r4]
   1932c:	b005      	add	sp, #20
   1932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19332:	6821      	ldr	r1, [r4, #0]
   19334:	461d      	mov	r5, r3
   19336:	e7d8      	b.n	192ea <_sfread_r+0x66>

00019338 <__sprint_r.part.0>:
   19338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1933c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1933e:	049c      	lsls	r4, r3, #18
   19340:	4690      	mov	r8, r2
   19342:	d52d      	bpl.n	193a0 <__sprint_r.part.0+0x68>
   19344:	6893      	ldr	r3, [r2, #8]
   19346:	6812      	ldr	r2, [r2, #0]
   19348:	b343      	cbz	r3, 1939c <__sprint_r.part.0+0x64>
   1934a:	468b      	mov	fp, r1
   1934c:	4606      	mov	r6, r0
   1934e:	f102 0908 	add.w	r9, r2, #8
   19352:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   19356:	ea5f 079a 	movs.w	r7, sl, lsr #2
   1935a:	d015      	beq.n	19388 <__sprint_r.part.0+0x50>
   1935c:	3d04      	subs	r5, #4
   1935e:	2400      	movs	r4, #0
   19360:	e001      	b.n	19366 <__sprint_r.part.0+0x2e>
   19362:	42a7      	cmp	r7, r4
   19364:	d00e      	beq.n	19384 <__sprint_r.part.0+0x4c>
   19366:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1936a:	465a      	mov	r2, fp
   1936c:	4630      	mov	r0, r6
   1936e:	f001 fa97 	bl	1a8a0 <_fputwc_r>
   19372:	1c43      	adds	r3, r0, #1
   19374:	f104 0401 	add.w	r4, r4, #1
   19378:	d1f3      	bne.n	19362 <__sprint_r.part.0+0x2a>
   1937a:	2300      	movs	r3, #0
   1937c:	e9c8 3301 	strd	r3, r3, [r8, #4]
   19380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19384:	f8d8 3008 	ldr.w	r3, [r8, #8]
   19388:	f02a 0a03 	bic.w	sl, sl, #3
   1938c:	eba3 030a 	sub.w	r3, r3, sl
   19390:	f8c8 3008 	str.w	r3, [r8, #8]
   19394:	f109 0908 	add.w	r9, r9, #8
   19398:	2b00      	cmp	r3, #0
   1939a:	d1da      	bne.n	19352 <__sprint_r.part.0+0x1a>
   1939c:	2000      	movs	r0, #0
   1939e:	e7ec      	b.n	1937a <__sprint_r.part.0+0x42>
   193a0:	f001 f80c 	bl	1a3bc <__sfvwrite_r>
   193a4:	2300      	movs	r3, #0
   193a6:	e9c8 3301 	strd	r3, r3, [r8, #4]
   193aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ae:	bf00      	nop

000193b0 <_vfiprintf_r>:
   193b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193b4:	ed2d 8b02 	vpush	{d8}
   193b8:	b0c5      	sub	sp, #276	; 0x114
   193ba:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   193be:	4683      	mov	fp, r0
   193c0:	ee08 1a10 	vmov	s16, r1
   193c4:	4616      	mov	r6, r2
   193c6:	2100      	movs	r1, #0
   193c8:	2208      	movs	r2, #8
   193ca:	4650      	mov	r0, sl
   193cc:	461c      	mov	r4, r3
   193ce:	9307      	str	r3, [sp, #28]
   193d0:	f7f9 f82e 	bl	12430 <memset>
   193d4:	f1bb 0f00 	cmp.w	fp, #0
   193d8:	d004      	beq.n	193e4 <_vfiprintf_r+0x34>
   193da:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   193de:	2b00      	cmp	r3, #0
   193e0:	f000 86a0 	beq.w	1a124 <_vfiprintf_r+0xd74>
   193e4:	ee18 2a10 	vmov	r2, s16
   193e8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   193ea:	07db      	lsls	r3, r3, #31
   193ec:	f140 8513 	bpl.w	19e16 <_vfiprintf_r+0xa66>
   193f0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   193f4:	b28a      	uxth	r2, r1
   193f6:	0495      	lsls	r5, r2, #18
   193f8:	d40b      	bmi.n	19412 <_vfiprintf_r+0x62>
   193fa:	ee18 3a10 	vmov	r3, s16
   193fe:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   19402:	8199      	strh	r1, [r3, #12]
   19404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   19406:	b28a      	uxth	r2, r1
   19408:	ee18 1a10 	vmov	r1, s16
   1940c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   19410:	664b      	str	r3, [r1, #100]	; 0x64
   19412:	0710      	lsls	r0, r2, #28
   19414:	f140 8105 	bpl.w	19622 <_vfiprintf_r+0x272>
   19418:	ee18 3a10 	vmov	r3, s16
   1941c:	691b      	ldr	r3, [r3, #16]
   1941e:	2b00      	cmp	r3, #0
   19420:	f000 80ff 	beq.w	19622 <_vfiprintf_r+0x272>
   19424:	f002 031a 	and.w	r3, r2, #26
   19428:	2b0a      	cmp	r3, #10
   1942a:	f000 810a 	beq.w	19642 <_vfiprintf_r+0x292>
   1942e:	2300      	movs	r3, #0
   19430:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   19434:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   19438:	aa1b      	add	r2, sp, #108	; 0x6c
   1943a:	930c      	str	r3, [sp, #48]	; 0x30
   1943c:	9218      	str	r2, [sp, #96]	; 0x60
   1943e:	4691      	mov	r9, r2
   19440:	930b      	str	r3, [sp, #44]	; 0x2c
   19442:	9305      	str	r3, [sp, #20]
   19444:	46b0      	mov	r8, r6
   19446:	4644      	mov	r4, r8
   19448:	4ba8      	ldr	r3, [pc, #672]	; (196ec <_vfiprintf_r+0x33c>)
   1944a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   1944e:	f7f9 f90f 	bl	12670 <__locale_mb_cur_max>
   19452:	4622      	mov	r2, r4
   19454:	4603      	mov	r3, r0
   19456:	a912      	add	r1, sp, #72	; 0x48
   19458:	f8cd a000 	str.w	sl, [sp]
   1945c:	4658      	mov	r0, fp
   1945e:	47a8      	blx	r5
   19460:	2800      	cmp	r0, #0
   19462:	f000 8145 	beq.w	196f0 <_vfiprintf_r+0x340>
   19466:	f2c0 8139 	blt.w	196dc <_vfiprintf_r+0x32c>
   1946a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1946c:	2a25      	cmp	r2, #37	; 0x25
   1946e:	4603      	mov	r3, r0
   19470:	d001      	beq.n	19476 <_vfiprintf_r+0xc6>
   19472:	441c      	add	r4, r3
   19474:	e7e8      	b.n	19448 <_vfiprintf_r+0x98>
   19476:	ebb4 0608 	subs.w	r6, r4, r8
   1947a:	4605      	mov	r5, r0
   1947c:	f040 813c 	bne.w	196f8 <_vfiprintf_r+0x348>
   19480:	2300      	movs	r3, #0
   19482:	7861      	ldrb	r1, [r4, #1]
   19484:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19488:	f104 0801 	add.w	r8, r4, #1
   1948c:	9306      	str	r3, [sp, #24]
   1948e:	f04f 37ff 	mov.w	r7, #4294967295
   19492:	461e      	mov	r6, r3
   19494:	242b      	movs	r4, #43	; 0x2b
   19496:	f108 0801 	add.w	r8, r8, #1
   1949a:	f1a1 0320 	sub.w	r3, r1, #32
   1949e:	2b5a      	cmp	r3, #90	; 0x5a
   194a0:	f200 8178 	bhi.w	19794 <_vfiprintf_r+0x3e4>
   194a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   194a8:	017602b5 	.word	0x017602b5
   194ac:	02b00176 	.word	0x02b00176
   194b0:	01760176 	.word	0x01760176
   194b4:	006a0176 	.word	0x006a0176
   194b8:	01760176 	.word	0x01760176
   194bc:	028d027d 	.word	0x028d027d
   194c0:	02880176 	.word	0x02880176
   194c4:	01760297 	.word	0x01760297
   194c8:	005b0292 	.word	0x005b0292
   194cc:	005b005b 	.word	0x005b005b
   194d0:	005b005b 	.word	0x005b005b
   194d4:	005b005b 	.word	0x005b005b
   194d8:	005b005b 	.word	0x005b005b
   194dc:	01760176 	.word	0x01760176
   194e0:	01760176 	.word	0x01760176
   194e4:	01760176 	.word	0x01760176
   194e8:	01760176 	.word	0x01760176
   194ec:	025c0176 	.word	0x025c0176
   194f0:	01760084 	.word	0x01760084
   194f4:	01760176 	.word	0x01760176
   194f8:	01760176 	.word	0x01760176
   194fc:	01760176 	.word	0x01760176
   19500:	01760176 	.word	0x01760176
   19504:	00e80176 	.word	0x00e80176
   19508:	01760176 	.word	0x01760176
   1950c:	02330176 	.word	0x02330176
   19510:	02da0176 	.word	0x02da0176
   19514:	01760176 	.word	0x01760176
   19518:	0176058b 	.word	0x0176058b
   1951c:	01760176 	.word	0x01760176
   19520:	01760176 	.word	0x01760176
   19524:	01760176 	.word	0x01760176
   19528:	01760176 	.word	0x01760176
   1952c:	025c0176 	.word	0x025c0176
   19530:	01760086 	.word	0x01760086
   19534:	01760176 	.word	0x01760176
   19538:	008602cd 	.word	0x008602cd
   1953c:	0176007f 	.word	0x0176007f
   19540:	017602c0 	.word	0x017602c0
   19544:	00ea02fd 	.word	0x00ea02fd
   19548:	007f02ed 	.word	0x007f02ed
   1954c:	02330176 	.word	0x02330176
   19550:	0569007c 	.word	0x0569007c
   19554:	01760176 	.word	0x01760176
   19558:	0176056b 	.word	0x0176056b
   1955c:	007c      	.short	0x007c
   1955e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19562:	2200      	movs	r2, #0
   19564:	f818 1b01 	ldrb.w	r1, [r8], #1
   19568:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1956c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   19570:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19574:	2b09      	cmp	r3, #9
   19576:	d9f5      	bls.n	19564 <_vfiprintf_r+0x1b4>
   19578:	9206      	str	r2, [sp, #24]
   1957a:	e78e      	b.n	1949a <_vfiprintf_r+0xea>
   1957c:	4658      	mov	r0, fp
   1957e:	f7fe fa7d 	bl	17a7c <_localeconv_r>
   19582:	6843      	ldr	r3, [r0, #4]
   19584:	930d      	str	r3, [sp, #52]	; 0x34
   19586:	4618      	mov	r0, r3
   19588:	f7f9 fb3a 	bl	12c00 <strlen>
   1958c:	900e      	str	r0, [sp, #56]	; 0x38
   1958e:	4605      	mov	r5, r0
   19590:	4658      	mov	r0, fp
   19592:	f7fe fa73 	bl	17a7c <_localeconv_r>
   19596:	6883      	ldr	r3, [r0, #8]
   19598:	930b      	str	r3, [sp, #44]	; 0x2c
   1959a:	2d00      	cmp	r5, #0
   1959c:	f040 84d6 	bne.w	19f4c <_vfiprintf_r+0xb9c>
   195a0:	f898 1000 	ldrb.w	r1, [r8]
   195a4:	e777      	b.n	19496 <_vfiprintf_r+0xe6>
   195a6:	f898 1000 	ldrb.w	r1, [r8]
   195aa:	f046 0620 	orr.w	r6, r6, #32
   195ae:	e772      	b.n	19496 <_vfiprintf_r+0xe6>
   195b0:	f046 0610 	orr.w	r6, r6, #16
   195b4:	06b4      	lsls	r4, r6, #26
   195b6:	f140 818e 	bpl.w	198d6 <_vfiprintf_r+0x526>
   195ba:	9b07      	ldr	r3, [sp, #28]
   195bc:	3307      	adds	r3, #7
   195be:	f023 0307 	bic.w	r3, r3, #7
   195c2:	461a      	mov	r2, r3
   195c4:	6859      	ldr	r1, [r3, #4]
   195c6:	f852 3b08 	ldr.w	r3, [r2], #8
   195ca:	9207      	str	r2, [sp, #28]
   195cc:	460a      	mov	r2, r1
   195ce:	2900      	cmp	r1, #0
   195d0:	f2c0 8470 	blt.w	19eb4 <_vfiprintf_r+0xb04>
   195d4:	1c79      	adds	r1, r7, #1
   195d6:	f000 85a2 	beq.w	1a11e <_vfiprintf_r+0xd6e>
   195da:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   195de:	9103      	str	r1, [sp, #12]
   195e0:	ea53 0102 	orrs.w	r1, r3, r2
   195e4:	f000 843f 	beq.w	19e66 <_vfiprintf_r+0xab6>
   195e8:	2b0a      	cmp	r3, #10
   195ea:	f172 0100 	sbcs.w	r1, r2, #0
   195ee:	f080 8541 	bcs.w	1a074 <_vfiprintf_r+0xcc4>
   195f2:	3330      	adds	r3, #48	; 0x30
   195f4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   195f8:	9e03      	ldr	r6, [sp, #12]
   195fa:	2301      	movs	r3, #1
   195fc:	9304      	str	r3, [sp, #16]
   195fe:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   19602:	9b04      	ldr	r3, [sp, #16]
   19604:	42bb      	cmp	r3, r7
   19606:	bfb8      	it	lt
   19608:	463b      	movlt	r3, r7
   1960a:	9303      	str	r3, [sp, #12]
   1960c:	2300      	movs	r3, #0
   1960e:	9308      	str	r3, [sp, #32]
   19610:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19614:	2b00      	cmp	r3, #0
   19616:	f000 80cb 	beq.w	197b0 <_vfiprintf_r+0x400>
   1961a:	9b03      	ldr	r3, [sp, #12]
   1961c:	3301      	adds	r3, #1
   1961e:	9303      	str	r3, [sp, #12]
   19620:	e0c6      	b.n	197b0 <_vfiprintf_r+0x400>
   19622:	ee18 1a10 	vmov	r1, s16
   19626:	4658      	mov	r0, fp
   19628:	ee18 5a10 	vmov	r5, s16
   1962c:	f001 f87c 	bl	1a728 <__swsetup_r>
   19630:	2800      	cmp	r0, #0
   19632:	f040 8652 	bne.w	1a2da <_vfiprintf_r+0xf2a>
   19636:	89aa      	ldrh	r2, [r5, #12]
   19638:	f002 031a 	and.w	r3, r2, #26
   1963c:	2b0a      	cmp	r3, #10
   1963e:	f47f aef6 	bne.w	1942e <_vfiprintf_r+0x7e>
   19642:	ee18 1a10 	vmov	r1, s16
   19646:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1964a:	2b00      	cmp	r3, #0
   1964c:	f6ff aeef 	blt.w	1942e <_vfiprintf_r+0x7e>
   19650:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   19652:	07db      	lsls	r3, r3, #31
   19654:	d402      	bmi.n	1965c <_vfiprintf_r+0x2ac>
   19656:	0597      	lsls	r7, r2, #22
   19658:	f140 8612 	bpl.w	1a280 <_vfiprintf_r+0xed0>
   1965c:	ee18 1a10 	vmov	r1, s16
   19660:	4623      	mov	r3, r4
   19662:	4632      	mov	r2, r6
   19664:	4658      	mov	r0, fp
   19666:	f000 fe69 	bl	1a33c <__sbprintf>
   1966a:	9005      	str	r0, [sp, #20]
   1966c:	9805      	ldr	r0, [sp, #20]
   1966e:	b045      	add	sp, #276	; 0x114
   19670:	ecbd 8b02 	vpop	{d8}
   19674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19678:	f046 0610 	orr.w	r6, r6, #16
   1967c:	f016 0220 	ands.w	r2, r6, #32
   19680:	f000 8136 	beq.w	198f0 <_vfiprintf_r+0x540>
   19684:	9b07      	ldr	r3, [sp, #28]
   19686:	3307      	adds	r3, #7
   19688:	f023 0307 	bic.w	r3, r3, #7
   1968c:	4619      	mov	r1, r3
   1968e:	685a      	ldr	r2, [r3, #4]
   19690:	f851 3b08 	ldr.w	r3, [r1], #8
   19694:	9107      	str	r1, [sp, #28]
   19696:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1969a:	9103      	str	r1, [sp, #12]
   1969c:	2100      	movs	r1, #0
   1969e:	2000      	movs	r0, #0
   196a0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   196a4:	1c78      	adds	r0, r7, #1
   196a6:	f000 8210 	beq.w	19aca <_vfiprintf_r+0x71a>
   196aa:	9803      	ldr	r0, [sp, #12]
   196ac:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   196b0:	ea53 0002 	orrs.w	r0, r3, r2
   196b4:	f040 8208 	bne.w	19ac8 <_vfiprintf_r+0x718>
   196b8:	2f00      	cmp	r7, #0
   196ba:	f040 8538 	bne.w	1a12e <_vfiprintf_r+0xd7e>
   196be:	2900      	cmp	r1, #0
   196c0:	f040 83d5 	bne.w	19e6e <_vfiprintf_r+0xabe>
   196c4:	9b03      	ldr	r3, [sp, #12]
   196c6:	f013 0301 	ands.w	r3, r3, #1
   196ca:	9304      	str	r3, [sp, #16]
   196cc:	f000 8411 	beq.w	19ef2 <_vfiprintf_r+0xb42>
   196d0:	2330      	movs	r3, #48	; 0x30
   196d2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   196d6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   196da:	e792      	b.n	19602 <_vfiprintf_r+0x252>
   196dc:	2208      	movs	r2, #8
   196de:	2100      	movs	r1, #0
   196e0:	4650      	mov	r0, sl
   196e2:	f7f8 fea5 	bl	12430 <memset>
   196e6:	2301      	movs	r3, #1
   196e8:	441c      	add	r4, r3
   196ea:	e6ad      	b.n	19448 <_vfiprintf_r+0x98>
   196ec:	20008f74 	.word	0x20008f74
   196f0:	ebb4 0608 	subs.w	r6, r4, r8
   196f4:	4605      	mov	r5, r0
   196f6:	d01b      	beq.n	19730 <_vfiprintf_r+0x380>
   196f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   196fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   196fc:	3301      	adds	r3, #1
   196fe:	4432      	add	r2, r6
   19700:	2b07      	cmp	r3, #7
   19702:	e9c9 8600 	strd	r8, r6, [r9]
   19706:	921a      	str	r2, [sp, #104]	; 0x68
   19708:	9319      	str	r3, [sp, #100]	; 0x64
   1970a:	dd1c      	ble.n	19746 <_vfiprintf_r+0x396>
   1970c:	2a00      	cmp	r2, #0
   1970e:	f000 83a6 	beq.w	19e5e <_vfiprintf_r+0xaae>
   19712:	ee18 1a10 	vmov	r1, s16
   19716:	aa18      	add	r2, sp, #96	; 0x60
   19718:	4658      	mov	r0, fp
   1971a:	f7ff fe0d 	bl	19338 <__sprint_r.part.0>
   1971e:	bb20      	cbnz	r0, 1976a <_vfiprintf_r+0x3ba>
   19720:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19724:	9b05      	ldr	r3, [sp, #20]
   19726:	4433      	add	r3, r6
   19728:	9305      	str	r3, [sp, #20]
   1972a:	2d00      	cmp	r5, #0
   1972c:	f47f aea8 	bne.w	19480 <_vfiprintf_r+0xd0>
   19730:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19732:	2b00      	cmp	r3, #0
   19734:	f040 85c1 	bne.w	1a2ba <_vfiprintf_r+0xf0a>
   19738:	ee18 3a10 	vmov	r3, s16
   1973c:	2200      	movs	r2, #0
   1973e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   19742:	9219      	str	r2, [sp, #100]	; 0x64
   19744:	e015      	b.n	19772 <_vfiprintf_r+0x3c2>
   19746:	f109 0908 	add.w	r9, r9, #8
   1974a:	e7eb      	b.n	19724 <_vfiprintf_r+0x374>
   1974c:	ee18 1a10 	vmov	r1, s16
   19750:	aa18      	add	r2, sp, #96	; 0x60
   19752:	4658      	mov	r0, fp
   19754:	f7ff fdf0 	bl	19338 <__sprint_r.part.0>
   19758:	2800      	cmp	r0, #0
   1975a:	f000 80a6 	beq.w	198aa <_vfiprintf_r+0x4fa>
   1975e:	9b08      	ldr	r3, [sp, #32]
   19760:	b11b      	cbz	r3, 1976a <_vfiprintf_r+0x3ba>
   19762:	9908      	ldr	r1, [sp, #32]
   19764:	4658      	mov	r0, fp
   19766:	f7f9 fb5d 	bl	12e24 <_free_r>
   1976a:	ee18 3a10 	vmov	r3, s16
   1976e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   19772:	ee18 2a10 	vmov	r2, s16
   19776:	6e52      	ldr	r2, [r2, #100]	; 0x64
   19778:	f012 0f01 	tst.w	r2, #1
   1977c:	b29a      	uxth	r2, r3
   1977e:	f000 80a0 	beq.w	198c2 <_vfiprintf_r+0x512>
   19782:	0650      	lsls	r0, r2, #25
   19784:	f100 85b2 	bmi.w	1a2ec <_vfiprintf_r+0xf3c>
   19788:	9805      	ldr	r0, [sp, #20]
   1978a:	b045      	add	sp, #276	; 0x114
   1978c:	ecbd 8b02 	vpop	{d8}
   19790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19794:	2900      	cmp	r1, #0
   19796:	d0cb      	beq.n	19730 <_vfiprintf_r+0x380>
   19798:	2300      	movs	r3, #0
   1979a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1979e:	2301      	movs	r3, #1
   197a0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   197a4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   197a8:	ac2b      	add	r4, sp, #172	; 0xac
   197aa:	2300      	movs	r3, #0
   197ac:	9308      	str	r3, [sp, #32]
   197ae:	461f      	mov	r7, r3
   197b0:	f016 0302 	ands.w	r3, r6, #2
   197b4:	9309      	str	r3, [sp, #36]	; 0x24
   197b6:	d002      	beq.n	197be <_vfiprintf_r+0x40e>
   197b8:	9b03      	ldr	r3, [sp, #12]
   197ba:	3302      	adds	r3, #2
   197bc:	9303      	str	r3, [sp, #12]
   197be:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   197c2:	930a      	str	r3, [sp, #40]	; 0x28
   197c4:	d105      	bne.n	197d2 <_vfiprintf_r+0x422>
   197c6:	9b06      	ldr	r3, [sp, #24]
   197c8:	9a03      	ldr	r2, [sp, #12]
   197ca:	1a9d      	subs	r5, r3, r2
   197cc:	2d00      	cmp	r5, #0
   197ce:	f300 827b 	bgt.w	19cc8 <_vfiprintf_r+0x918>
   197d2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   197d6:	1c41      	adds	r1, r0, #1
   197d8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   197dc:	b182      	cbz	r2, 19800 <_vfiprintf_r+0x450>
   197de:	2201      	movs	r2, #1
   197e0:	3301      	adds	r3, #1
   197e2:	f8c9 2004 	str.w	r2, [r9, #4]
   197e6:	2907      	cmp	r1, #7
   197e8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   197ec:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   197f0:	f8c9 2000 	str.w	r2, [r9]
   197f4:	f300 824a 	bgt.w	19c8c <_vfiprintf_r+0x8dc>
   197f8:	4608      	mov	r0, r1
   197fa:	f109 0908 	add.w	r9, r9, #8
   197fe:	3101      	adds	r1, #1
   19800:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19802:	b1e2      	cbz	r2, 1983e <_vfiprintf_r+0x48e>
   19804:	aa11      	add	r2, sp, #68	; 0x44
   19806:	3302      	adds	r3, #2
   19808:	f8c9 2000 	str.w	r2, [r9]
   1980c:	2907      	cmp	r1, #7
   1980e:	f04f 0202 	mov.w	r2, #2
   19812:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19816:	f8c9 2004 	str.w	r2, [r9, #4]
   1981a:	f340 8250 	ble.w	19cbe <_vfiprintf_r+0x90e>
   1981e:	2b00      	cmp	r3, #0
   19820:	f000 8343 	beq.w	19eaa <_vfiprintf_r+0xafa>
   19824:	ee18 1a10 	vmov	r1, s16
   19828:	aa18      	add	r2, sp, #96	; 0x60
   1982a:	4658      	mov	r0, fp
   1982c:	f7ff fd84 	bl	19338 <__sprint_r.part.0>
   19830:	2800      	cmp	r0, #0
   19832:	d194      	bne.n	1975e <_vfiprintf_r+0x3ae>
   19834:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19838:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1983c:	1c41      	adds	r1, r0, #1
   1983e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19840:	2a80      	cmp	r2, #128	; 0x80
   19842:	f000 8184 	beq.w	19b4e <_vfiprintf_r+0x79e>
   19846:	9a04      	ldr	r2, [sp, #16]
   19848:	1abd      	subs	r5, r7, r2
   1984a:	2d00      	cmp	r5, #0
   1984c:	f300 81d7 	bgt.w	19bfe <_vfiprintf_r+0x84e>
   19850:	9a04      	ldr	r2, [sp, #16]
   19852:	f8c9 4000 	str.w	r4, [r9]
   19856:	4413      	add	r3, r2
   19858:	2907      	cmp	r1, #7
   1985a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1985e:	f8c9 2004 	str.w	r2, [r9, #4]
   19862:	f340 816e 	ble.w	19b42 <_vfiprintf_r+0x792>
   19866:	2b00      	cmp	r3, #0
   19868:	f000 8275 	beq.w	19d56 <_vfiprintf_r+0x9a6>
   1986c:	ee18 1a10 	vmov	r1, s16
   19870:	aa18      	add	r2, sp, #96	; 0x60
   19872:	4658      	mov	r0, fp
   19874:	f7ff fd60 	bl	19338 <__sprint_r.part.0>
   19878:	2800      	cmp	r0, #0
   1987a:	f47f af70 	bne.w	1975e <_vfiprintf_r+0x3ae>
   1987e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19880:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19884:	0775      	lsls	r5, r6, #29
   19886:	d505      	bpl.n	19894 <_vfiprintf_r+0x4e4>
   19888:	9a06      	ldr	r2, [sp, #24]
   1988a:	9903      	ldr	r1, [sp, #12]
   1988c:	1a54      	subs	r4, r2, r1
   1988e:	2c00      	cmp	r4, #0
   19890:	f300 826b 	bgt.w	19d6a <_vfiprintf_r+0x9ba>
   19894:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   19898:	9803      	ldr	r0, [sp, #12]
   1989a:	4281      	cmp	r1, r0
   1989c:	bfac      	ite	ge
   1989e:	1852      	addge	r2, r2, r1
   198a0:	1812      	addlt	r2, r2, r0
   198a2:	9205      	str	r2, [sp, #20]
   198a4:	2b00      	cmp	r3, #0
   198a6:	f47f af51 	bne.w	1974c <_vfiprintf_r+0x39c>
   198aa:	9908      	ldr	r1, [sp, #32]
   198ac:	2300      	movs	r3, #0
   198ae:	9319      	str	r3, [sp, #100]	; 0x64
   198b0:	2900      	cmp	r1, #0
   198b2:	f000 8149 	beq.w	19b48 <_vfiprintf_r+0x798>
   198b6:	4658      	mov	r0, fp
   198b8:	f7f9 fab4 	bl	12e24 <_free_r>
   198bc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   198c0:	e5c1      	b.n	19446 <_vfiprintf_r+0x96>
   198c2:	059c      	lsls	r4, r3, #22
   198c4:	f53f af5d 	bmi.w	19782 <_vfiprintf_r+0x3d2>
   198c8:	ee18 4a10 	vmov	r4, s16
   198cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   198ce:	f7f8 ff6b 	bl	127a8 <__retarget_lock_release_recursive>
   198d2:	89a2      	ldrh	r2, [r4, #12]
   198d4:	e755      	b.n	19782 <_vfiprintf_r+0x3d2>
   198d6:	06f0      	lsls	r0, r6, #27
   198d8:	9a07      	ldr	r2, [sp, #28]
   198da:	f100 831f 	bmi.w	19f1c <_vfiprintf_r+0xb6c>
   198de:	0671      	lsls	r1, r6, #25
   198e0:	f140 8319 	bpl.w	19f16 <_vfiprintf_r+0xb66>
   198e4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   198e8:	9207      	str	r2, [sp, #28]
   198ea:	17da      	asrs	r2, r3, #31
   198ec:	4611      	mov	r1, r2
   198ee:	e66e      	b.n	195ce <_vfiprintf_r+0x21e>
   198f0:	f016 0310 	ands.w	r3, r6, #16
   198f4:	9907      	ldr	r1, [sp, #28]
   198f6:	f040 8309 	bne.w	19f0c <_vfiprintf_r+0xb5c>
   198fa:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   198fe:	f000 8301 	beq.w	19f04 <_vfiprintf_r+0xb54>
   19902:	461a      	mov	r2, r3
   19904:	f851 3b04 	ldr.w	r3, [r1], #4
   19908:	9107      	str	r1, [sp, #28]
   1990a:	b29b      	uxth	r3, r3
   1990c:	e6c3      	b.n	19696 <_vfiprintf_r+0x2e6>
   1990e:	9b07      	ldr	r3, [sp, #28]
   19910:	461a      	mov	r2, r3
   19912:	2300      	movs	r3, #0
   19914:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19918:	4613      	mov	r3, r2
   1991a:	f853 4b04 	ldr.w	r4, [r3], #4
   1991e:	9303      	str	r3, [sp, #12]
   19920:	2c00      	cmp	r4, #0
   19922:	f000 8412 	beq.w	1a14a <_vfiprintf_r+0xd9a>
   19926:	2953      	cmp	r1, #83	; 0x53
   19928:	f000 8365 	beq.w	19ff6 <_vfiprintf_r+0xc46>
   1992c:	f016 0510 	ands.w	r5, r6, #16
   19930:	f040 8361 	bne.w	19ff6 <_vfiprintf_r+0xc46>
   19934:	1c7b      	adds	r3, r7, #1
   19936:	f000 84b3 	beq.w	1a2a0 <_vfiprintf_r+0xef0>
   1993a:	463a      	mov	r2, r7
   1993c:	4629      	mov	r1, r5
   1993e:	4620      	mov	r0, r4
   19940:	f7f9 f90e 	bl	12b60 <memchr>
   19944:	9008      	str	r0, [sp, #32]
   19946:	2800      	cmp	r0, #0
   19948:	f000 849f 	beq.w	1a28a <_vfiprintf_r+0xeda>
   1994c:	1b03      	subs	r3, r0, r4
   1994e:	9a03      	ldr	r2, [sp, #12]
   19950:	9304      	str	r3, [sp, #16]
   19952:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19956:	462f      	mov	r7, r5
   19958:	9207      	str	r2, [sp, #28]
   1995a:	9303      	str	r3, [sp, #12]
   1995c:	9508      	str	r5, [sp, #32]
   1995e:	e657      	b.n	19610 <_vfiprintf_r+0x260>
   19960:	2943      	cmp	r1, #67	; 0x43
   19962:	d002      	beq.n	1996a <_vfiprintf_r+0x5ba>
   19964:	06f5      	lsls	r5, r6, #27
   19966:	f140 832d 	bpl.w	19fc4 <_vfiprintf_r+0xc14>
   1996a:	9d07      	ldr	r5, [sp, #28]
   1996c:	2208      	movs	r2, #8
   1996e:	2100      	movs	r1, #0
   19970:	a816      	add	r0, sp, #88	; 0x58
   19972:	ac2b      	add	r4, sp, #172	; 0xac
   19974:	f7f8 fd5c 	bl	12430 <memset>
   19978:	ab16      	add	r3, sp, #88	; 0x58
   1997a:	f855 2b04 	ldr.w	r2, [r5], #4
   1997e:	4621      	mov	r1, r4
   19980:	4658      	mov	r0, fp
   19982:	f7ff fa77 	bl	18e74 <_wcrtomb_r>
   19986:	4603      	mov	r3, r0
   19988:	3301      	adds	r3, #1
   1998a:	9004      	str	r0, [sp, #16]
   1998c:	f000 84b3 	beq.w	1a2f6 <_vfiprintf_r+0xf46>
   19990:	9b04      	ldr	r3, [sp, #16]
   19992:	9507      	str	r5, [sp, #28]
   19994:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19998:	9303      	str	r3, [sp, #12]
   1999a:	2300      	movs	r3, #0
   1999c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   199a0:	e703      	b.n	197aa <_vfiprintf_r+0x3fa>
   199a2:	9b07      	ldr	r3, [sp, #28]
   199a4:	f853 2b04 	ldr.w	r2, [r3], #4
   199a8:	9206      	str	r2, [sp, #24]
   199aa:	2a00      	cmp	r2, #0
   199ac:	f280 829c 	bge.w	19ee8 <_vfiprintf_r+0xb38>
   199b0:	9a06      	ldr	r2, [sp, #24]
   199b2:	4252      	negs	r2, r2
   199b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   199b8:	f898 1000 	ldrb.w	r1, [r8]
   199bc:	f046 0604 	orr.w	r6, r6, #4
   199c0:	e569      	b.n	19496 <_vfiprintf_r+0xe6>
   199c2:	f898 1000 	ldrb.w	r1, [r8]
   199c6:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   199ca:	e564      	b.n	19496 <_vfiprintf_r+0xe6>
   199cc:	f898 1000 	ldrb.w	r1, [r8]
   199d0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   199d4:	e55f      	b.n	19496 <_vfiprintf_r+0xe6>
   199d6:	4642      	mov	r2, r8
   199d8:	f812 1b01 	ldrb.w	r1, [r2], #1
   199dc:	292a      	cmp	r1, #42	; 0x2a
   199de:	f000 8496 	beq.w	1a30e <_vfiprintf_r+0xf5e>
   199e2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   199e6:	2b09      	cmp	r3, #9
   199e8:	4690      	mov	r8, r2
   199ea:	f04f 0700 	mov.w	r7, #0
   199ee:	f63f ad54 	bhi.w	1949a <_vfiprintf_r+0xea>
   199f2:	f818 1b01 	ldrb.w	r1, [r8], #1
   199f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   199fa:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   199fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   19a02:	2b09      	cmp	r3, #9
   19a04:	d9f5      	bls.n	199f2 <_vfiprintf_r+0x642>
   19a06:	e548      	b.n	1949a <_vfiprintf_r+0xea>
   19a08:	f898 1000 	ldrb.w	r1, [r8]
   19a0c:	f046 0601 	orr.w	r6, r6, #1
   19a10:	e541      	b.n	19496 <_vfiprintf_r+0xe6>
   19a12:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   19a16:	2b00      	cmp	r3, #0
   19a18:	f47f adc2 	bne.w	195a0 <_vfiprintf_r+0x1f0>
   19a1c:	2320      	movs	r3, #32
   19a1e:	f898 1000 	ldrb.w	r1, [r8]
   19a22:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   19a26:	e536      	b.n	19496 <_vfiprintf_r+0xe6>
   19a28:	f898 1000 	ldrb.w	r1, [r8]
   19a2c:	296c      	cmp	r1, #108	; 0x6c
   19a2e:	bf03      	ittte	eq
   19a30:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19a34:	f046 0620 	orreq.w	r6, r6, #32
   19a38:	f108 0801 	addeq.w	r8, r8, #1
   19a3c:	f046 0610 	orrne.w	r6, r6, #16
   19a40:	e529      	b.n	19496 <_vfiprintf_r+0xe6>
   19a42:	f898 1000 	ldrb.w	r1, [r8]
   19a46:	2968      	cmp	r1, #104	; 0x68
   19a48:	bf03      	ittte	eq
   19a4a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   19a4e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   19a52:	f108 0801 	addeq.w	r8, r8, #1
   19a56:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   19a5a:	e51c      	b.n	19496 <_vfiprintf_r+0xe6>
   19a5c:	f046 0310 	orr.w	r3, r6, #16
   19a60:	9303      	str	r3, [sp, #12]
   19a62:	9b03      	ldr	r3, [sp, #12]
   19a64:	f013 0220 	ands.w	r2, r3, #32
   19a68:	f000 8206 	beq.w	19e78 <_vfiprintf_r+0xac8>
   19a6c:	9b07      	ldr	r3, [sp, #28]
   19a6e:	3307      	adds	r3, #7
   19a70:	f023 0307 	bic.w	r3, r3, #7
   19a74:	4619      	mov	r1, r3
   19a76:	685a      	ldr	r2, [r3, #4]
   19a78:	f851 3b08 	ldr.w	r3, [r1], #8
   19a7c:	9107      	str	r1, [sp, #28]
   19a7e:	2101      	movs	r1, #1
   19a80:	e60d      	b.n	1969e <_vfiprintf_r+0x2ee>
   19a82:	9a07      	ldr	r2, [sp, #28]
   19a84:	f046 0302 	orr.w	r3, r6, #2
   19a88:	9303      	str	r3, [sp, #12]
   19a8a:	f852 3b04 	ldr.w	r3, [r2], #4
   19a8e:	9207      	str	r2, [sp, #28]
   19a90:	f647 0230 	movw	r2, #30768	; 0x7830
   19a94:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   19a98:	4ab8      	ldr	r2, [pc, #736]	; (19d7c <_vfiprintf_r+0x9cc>)
   19a9a:	920c      	str	r2, [sp, #48]	; 0x30
   19a9c:	2102      	movs	r1, #2
   19a9e:	2200      	movs	r2, #0
   19aa0:	e5fd      	b.n	1969e <_vfiprintf_r+0x2ee>
   19aa2:	06b7      	lsls	r7, r6, #26
   19aa4:	f100 8248 	bmi.w	19f38 <_vfiprintf_r+0xb88>
   19aa8:	06f5      	lsls	r5, r6, #27
   19aaa:	f100 8346 	bmi.w	1a13a <_vfiprintf_r+0xd8a>
   19aae:	0674      	lsls	r4, r6, #25
   19ab0:	f100 83d5 	bmi.w	1a25e <_vfiprintf_r+0xeae>
   19ab4:	05b0      	lsls	r0, r6, #22
   19ab6:	f140 8340 	bpl.w	1a13a <_vfiprintf_r+0xd8a>
   19aba:	9b07      	ldr	r3, [sp, #28]
   19abc:	9905      	ldr	r1, [sp, #20]
   19abe:	f853 2b04 	ldr.w	r2, [r3], #4
   19ac2:	9307      	str	r3, [sp, #28]
   19ac4:	7011      	strb	r1, [r2, #0]
   19ac6:	e4be      	b.n	19446 <_vfiprintf_r+0x96>
   19ac8:	9603      	str	r6, [sp, #12]
   19aca:	2901      	cmp	r1, #1
   19acc:	f43f ad8c 	beq.w	195e8 <_vfiprintf_r+0x238>
   19ad0:	2902      	cmp	r1, #2
   19ad2:	ac44      	add	r4, sp, #272	; 0x110
   19ad4:	d111      	bne.n	19afa <_vfiprintf_r+0x74a>
   19ad6:	980c      	ldr	r0, [sp, #48]	; 0x30
   19ad8:	f003 010f 	and.w	r1, r3, #15
   19adc:	091b      	lsrs	r3, r3, #4
   19ade:	5c41      	ldrb	r1, [r0, r1]
   19ae0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19ae4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   19ae8:	0912      	lsrs	r2, r2, #4
   19aea:	ea53 0102 	orrs.w	r1, r3, r2
   19aee:	d1f3      	bne.n	19ad8 <_vfiprintf_r+0x728>
   19af0:	9e03      	ldr	r6, [sp, #12]
   19af2:	ab44      	add	r3, sp, #272	; 0x110
   19af4:	1b1b      	subs	r3, r3, r4
   19af6:	9304      	str	r3, [sp, #16]
   19af8:	e583      	b.n	19602 <_vfiprintf_r+0x252>
   19afa:	f003 0107 	and.w	r1, r3, #7
   19afe:	08db      	lsrs	r3, r3, #3
   19b00:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   19b04:	08d2      	lsrs	r2, r2, #3
   19b06:	3130      	adds	r1, #48	; 0x30
   19b08:	ea53 0502 	orrs.w	r5, r3, r2
   19b0c:	4620      	mov	r0, r4
   19b0e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   19b12:	d1f2      	bne.n	19afa <_vfiprintf_r+0x74a>
   19b14:	9e03      	ldr	r6, [sp, #12]
   19b16:	07f3      	lsls	r3, r6, #31
   19b18:	d5eb      	bpl.n	19af2 <_vfiprintf_r+0x742>
   19b1a:	2930      	cmp	r1, #48	; 0x30
   19b1c:	d0e8      	beq.n	19af0 <_vfiprintf_r+0x740>
   19b1e:	2330      	movs	r3, #48	; 0x30
   19b20:	3802      	subs	r0, #2
   19b22:	f804 3c01 	strb.w	r3, [r4, #-1]
   19b26:	ab44      	add	r3, sp, #272	; 0x110
   19b28:	1a1b      	subs	r3, r3, r0
   19b2a:	9e03      	ldr	r6, [sp, #12]
   19b2c:	9304      	str	r3, [sp, #16]
   19b2e:	4604      	mov	r4, r0
   19b30:	e567      	b.n	19602 <_vfiprintf_r+0x252>
   19b32:	9b04      	ldr	r3, [sp, #16]
   19b34:	941b      	str	r4, [sp, #108]	; 0x6c
   19b36:	2201      	movs	r2, #1
   19b38:	931c      	str	r3, [sp, #112]	; 0x70
   19b3a:	931a      	str	r3, [sp, #104]	; 0x68
   19b3c:	9219      	str	r2, [sp, #100]	; 0x64
   19b3e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b42:	f109 0908 	add.w	r9, r9, #8
   19b46:	e69d      	b.n	19884 <_vfiprintf_r+0x4d4>
   19b48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b4c:	e47b      	b.n	19446 <_vfiprintf_r+0x96>
   19b4e:	9a06      	ldr	r2, [sp, #24]
   19b50:	9d03      	ldr	r5, [sp, #12]
   19b52:	1b55      	subs	r5, r2, r5
   19b54:	2d00      	cmp	r5, #0
   19b56:	f77f ae76 	ble.w	19846 <_vfiprintf_r+0x496>
   19b5a:	2d10      	cmp	r5, #16
   19b5c:	f340 83bb 	ble.w	1a2d6 <_vfiprintf_r+0xf26>
   19b60:	9409      	str	r4, [sp, #36]	; 0x24
   19b62:	ee18 4a10 	vmov	r4, s16
   19b66:	e007      	b.n	19b78 <_vfiprintf_r+0x7c8>
   19b68:	f100 0c02 	add.w	ip, r0, #2
   19b6c:	f109 0908 	add.w	r9, r9, #8
   19b70:	4610      	mov	r0, r2
   19b72:	3d10      	subs	r5, #16
   19b74:	2d10      	cmp	r5, #16
   19b76:	dd1e      	ble.n	19bb6 <_vfiprintf_r+0x806>
   19b78:	4981      	ldr	r1, [pc, #516]	; (19d80 <_vfiprintf_r+0x9d0>)
   19b7a:	f8c9 1000 	str.w	r1, [r9]
   19b7e:	1c42      	adds	r2, r0, #1
   19b80:	3310      	adds	r3, #16
   19b82:	2110      	movs	r1, #16
   19b84:	2a07      	cmp	r2, #7
   19b86:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19b8a:	f8c9 1004 	str.w	r1, [r9, #4]
   19b8e:	ddeb      	ble.n	19b68 <_vfiprintf_r+0x7b8>
   19b90:	aa18      	add	r2, sp, #96	; 0x60
   19b92:	2b00      	cmp	r3, #0
   19b94:	d074      	beq.n	19c80 <_vfiprintf_r+0x8d0>
   19b96:	4621      	mov	r1, r4
   19b98:	4658      	mov	r0, fp
   19b9a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19b9e:	f7ff fbcb 	bl	19338 <__sprint_r.part.0>
   19ba2:	2800      	cmp	r0, #0
   19ba4:	f47f addb 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19ba8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19bac:	3d10      	subs	r5, #16
   19bae:	2d10      	cmp	r5, #16
   19bb0:	f100 0c01 	add.w	ip, r0, #1
   19bb4:	dce0      	bgt.n	19b78 <_vfiprintf_r+0x7c8>
   19bb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19bb8:	4a71      	ldr	r2, [pc, #452]	; (19d80 <_vfiprintf_r+0x9d0>)
   19bba:	f8c9 5004 	str.w	r5, [r9, #4]
   19bbe:	442b      	add	r3, r5
   19bc0:	f1bc 0f07 	cmp.w	ip, #7
   19bc4:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   19bc8:	f8c9 2000 	str.w	r2, [r9]
   19bcc:	f340 8194 	ble.w	19ef8 <_vfiprintf_r+0xb48>
   19bd0:	2b00      	cmp	r3, #0
   19bd2:	f000 831f 	beq.w	1a214 <_vfiprintf_r+0xe64>
   19bd6:	ee18 1a10 	vmov	r1, s16
   19bda:	aa18      	add	r2, sp, #96	; 0x60
   19bdc:	4658      	mov	r0, fp
   19bde:	f7ff fbab 	bl	19338 <__sprint_r.part.0>
   19be2:	2800      	cmp	r0, #0
   19be4:	f47f adbb 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19be8:	9a04      	ldr	r2, [sp, #16]
   19bea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19bee:	1abd      	subs	r5, r7, r2
   19bf0:	2d00      	cmp	r5, #0
   19bf2:	f100 0101 	add.w	r1, r0, #1
   19bf6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19bfa:	f77f ae29 	ble.w	19850 <_vfiprintf_r+0x4a0>
   19bfe:	2d10      	cmp	r5, #16
   19c00:	dd29      	ble.n	19c56 <_vfiprintf_r+0x8a6>
   19c02:	9409      	str	r4, [sp, #36]	; 0x24
   19c04:	2710      	movs	r7, #16
   19c06:	ee18 4a10 	vmov	r4, s16
   19c0a:	e007      	b.n	19c1c <_vfiprintf_r+0x86c>
   19c0c:	f100 0c02 	add.w	ip, r0, #2
   19c10:	f109 0908 	add.w	r9, r9, #8
   19c14:	4610      	mov	r0, r2
   19c16:	3d10      	subs	r5, #16
   19c18:	2d10      	cmp	r5, #16
   19c1a:	dd1a      	ble.n	19c52 <_vfiprintf_r+0x8a2>
   19c1c:	1c42      	adds	r2, r0, #1
   19c1e:	4958      	ldr	r1, [pc, #352]	; (19d80 <_vfiprintf_r+0x9d0>)
   19c20:	3310      	adds	r3, #16
   19c22:	2a07      	cmp	r2, #7
   19c24:	e9c9 1700 	strd	r1, r7, [r9]
   19c28:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19c2c:	ddee      	ble.n	19c0c <_vfiprintf_r+0x85c>
   19c2e:	aa18      	add	r2, sp, #96	; 0x60
   19c30:	b303      	cbz	r3, 19c74 <_vfiprintf_r+0x8c4>
   19c32:	4621      	mov	r1, r4
   19c34:	4658      	mov	r0, fp
   19c36:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19c3a:	f7ff fb7d 	bl	19338 <__sprint_r.part.0>
   19c3e:	2800      	cmp	r0, #0
   19c40:	f47f ad8d 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19c44:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19c48:	3d10      	subs	r5, #16
   19c4a:	2d10      	cmp	r5, #16
   19c4c:	f100 0c01 	add.w	ip, r0, #1
   19c50:	dce4      	bgt.n	19c1c <_vfiprintf_r+0x86c>
   19c52:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19c54:	4661      	mov	r1, ip
   19c56:	4a4a      	ldr	r2, [pc, #296]	; (19d80 <_vfiprintf_r+0x9d0>)
   19c58:	f8c9 5004 	str.w	r5, [r9, #4]
   19c5c:	442b      	add	r3, r5
   19c5e:	2907      	cmp	r1, #7
   19c60:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   19c64:	f8c9 2000 	str.w	r2, [r9]
   19c68:	f300 80e7 	bgt.w	19e3a <_vfiprintf_r+0xa8a>
   19c6c:	f109 0908 	add.w	r9, r9, #8
   19c70:	3101      	adds	r1, #1
   19c72:	e5ed      	b.n	19850 <_vfiprintf_r+0x4a0>
   19c74:	f04f 0c01 	mov.w	ip, #1
   19c78:	4618      	mov	r0, r3
   19c7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19c7e:	e7ca      	b.n	19c16 <_vfiprintf_r+0x866>
   19c80:	f04f 0c01 	mov.w	ip, #1
   19c84:	4618      	mov	r0, r3
   19c86:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19c8a:	e772      	b.n	19b72 <_vfiprintf_r+0x7c2>
   19c8c:	2b00      	cmp	r3, #0
   19c8e:	f000 8104 	beq.w	19e9a <_vfiprintf_r+0xaea>
   19c92:	ee18 1a10 	vmov	r1, s16
   19c96:	aa18      	add	r2, sp, #96	; 0x60
   19c98:	4658      	mov	r0, fp
   19c9a:	f7ff fb4d 	bl	19338 <__sprint_r.part.0>
   19c9e:	2800      	cmp	r0, #0
   19ca0:	f47f ad5d 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19ca4:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19ca8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19cac:	1c41      	adds	r1, r0, #1
   19cae:	e5a7      	b.n	19800 <_vfiprintf_r+0x450>
   19cb0:	2302      	movs	r3, #2
   19cb2:	aa11      	add	r2, sp, #68	; 0x44
   19cb4:	931c      	str	r3, [sp, #112]	; 0x70
   19cb6:	921b      	str	r2, [sp, #108]	; 0x6c
   19cb8:	2101      	movs	r1, #1
   19cba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19cbe:	4608      	mov	r0, r1
   19cc0:	f109 0908 	add.w	r9, r9, #8
   19cc4:	1c41      	adds	r1, r0, #1
   19cc6:	e5ba      	b.n	1983e <_vfiprintf_r+0x48e>
   19cc8:	2d10      	cmp	r5, #16
   19cca:	f340 82e5 	ble.w	1a298 <_vfiprintf_r+0xee8>
   19cce:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19cd2:	940f      	str	r4, [sp, #60]	; 0x3c
   19cd4:	4608      	mov	r0, r1
   19cd6:	ee18 4a10 	vmov	r4, s16
   19cda:	e007      	b.n	19cec <_vfiprintf_r+0x93c>
   19cdc:	f100 0c02 	add.w	ip, r0, #2
   19ce0:	f109 0908 	add.w	r9, r9, #8
   19ce4:	4610      	mov	r0, r2
   19ce6:	3d10      	subs	r5, #16
   19ce8:	2d10      	cmp	r5, #16
   19cea:	dd1d      	ble.n	19d28 <_vfiprintf_r+0x978>
   19cec:	4925      	ldr	r1, [pc, #148]	; (19d84 <_vfiprintf_r+0x9d4>)
   19cee:	f8c9 1000 	str.w	r1, [r9]
   19cf2:	1c42      	adds	r2, r0, #1
   19cf4:	3310      	adds	r3, #16
   19cf6:	2110      	movs	r1, #16
   19cf8:	2a07      	cmp	r2, #7
   19cfa:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19cfe:	f8c9 1004 	str.w	r1, [r9, #4]
   19d02:	ddeb      	ble.n	19cdc <_vfiprintf_r+0x92c>
   19d04:	aa18      	add	r2, sp, #96	; 0x60
   19d06:	b303      	cbz	r3, 19d4a <_vfiprintf_r+0x99a>
   19d08:	4621      	mov	r1, r4
   19d0a:	4658      	mov	r0, fp
   19d0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19d10:	f7ff fb12 	bl	19338 <__sprint_r.part.0>
   19d14:	2800      	cmp	r0, #0
   19d16:	f47f ad22 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19d1a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19d1e:	3d10      	subs	r5, #16
   19d20:	2d10      	cmp	r5, #16
   19d22:	f100 0c01 	add.w	ip, r0, #1
   19d26:	dce1      	bgt.n	19cec <_vfiprintf_r+0x93c>
   19d28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   19d2a:	4660      	mov	r0, ip
   19d2c:	4a15      	ldr	r2, [pc, #84]	; (19d84 <_vfiprintf_r+0x9d4>)
   19d2e:	f8c9 5004 	str.w	r5, [r9, #4]
   19d32:	442b      	add	r3, r5
   19d34:	2807      	cmp	r0, #7
   19d36:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   19d3a:	f8c9 2000 	str.w	r2, [r9]
   19d3e:	f300 80c1 	bgt.w	19ec4 <_vfiprintf_r+0xb14>
   19d42:	f109 0908 	add.w	r9, r9, #8
   19d46:	1c41      	adds	r1, r0, #1
   19d48:	e546      	b.n	197d8 <_vfiprintf_r+0x428>
   19d4a:	4618      	mov	r0, r3
   19d4c:	f04f 0c01 	mov.w	ip, #1
   19d50:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19d54:	e7c7      	b.n	19ce6 <_vfiprintf_r+0x936>
   19d56:	0776      	lsls	r6, r6, #29
   19d58:	9319      	str	r3, [sp, #100]	; 0x64
   19d5a:	d553      	bpl.n	19e04 <_vfiprintf_r+0xa54>
   19d5c:	9a06      	ldr	r2, [sp, #24]
   19d5e:	9903      	ldr	r1, [sp, #12]
   19d60:	1a54      	subs	r4, r2, r1
   19d62:	2c00      	cmp	r4, #0
   19d64:	dd4e      	ble.n	19e04 <_vfiprintf_r+0xa54>
   19d66:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19d6a:	2c10      	cmp	r4, #16
   19d6c:	f340 82b0 	ble.w	1a2d0 <_vfiprintf_r+0xf20>
   19d70:	9919      	ldr	r1, [sp, #100]	; 0x64
   19d72:	ee18 6a10 	vmov	r6, s16
   19d76:	2510      	movs	r5, #16
   19d78:	e00d      	b.n	19d96 <_vfiprintf_r+0x9e6>
   19d7a:	bf00      	nop
   19d7c:	200011f0 	.word	0x200011f0
   19d80:	20008a54 	.word	0x20008a54
   19d84:	20002ca8 	.word	0x20002ca8
   19d88:	1c88      	adds	r0, r1, #2
   19d8a:	f109 0908 	add.w	r9, r9, #8
   19d8e:	4611      	mov	r1, r2
   19d90:	3c10      	subs	r4, #16
   19d92:	2c10      	cmp	r4, #16
   19d94:	dd1a      	ble.n	19dcc <_vfiprintf_r+0xa1c>
   19d96:	1c4a      	adds	r2, r1, #1
   19d98:	48b3      	ldr	r0, [pc, #716]	; (1a068 <_vfiprintf_r+0xcb8>)
   19d9a:	3310      	adds	r3, #16
   19d9c:	2a07      	cmp	r2, #7
   19d9e:	e9c9 0500 	strd	r0, r5, [r9]
   19da2:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   19da6:	ddef      	ble.n	19d88 <_vfiprintf_r+0x9d8>
   19da8:	aa18      	add	r2, sp, #96	; 0x60
   19daa:	b333      	cbz	r3, 19dfa <_vfiprintf_r+0xa4a>
   19dac:	4631      	mov	r1, r6
   19dae:	4658      	mov	r0, fp
   19db0:	f7ff fac2 	bl	19338 <__sprint_r.part.0>
   19db4:	2800      	cmp	r0, #0
   19db6:	f47f acd2 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19dba:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   19dbe:	3c10      	subs	r4, #16
   19dc0:	2c10      	cmp	r4, #16
   19dc2:	f101 0001 	add.w	r0, r1, #1
   19dc6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19dca:	dce4      	bgt.n	19d96 <_vfiprintf_r+0x9e6>
   19dcc:	4aa6      	ldr	r2, [pc, #664]	; (1a068 <_vfiprintf_r+0xcb8>)
   19dce:	f8c9 4004 	str.w	r4, [r9, #4]
   19dd2:	4423      	add	r3, r4
   19dd4:	2807      	cmp	r0, #7
   19dd6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   19dda:	f8c9 2000 	str.w	r2, [r9]
   19dde:	f77f ad59 	ble.w	19894 <_vfiprintf_r+0x4e4>
   19de2:	b17b      	cbz	r3, 19e04 <_vfiprintf_r+0xa54>
   19de4:	ee18 1a10 	vmov	r1, s16
   19de8:	aa18      	add	r2, sp, #96	; 0x60
   19dea:	4658      	mov	r0, fp
   19dec:	f7ff faa4 	bl	19338 <__sprint_r.part.0>
   19df0:	2800      	cmp	r0, #0
   19df2:	f47f acb4 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19df6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19df8:	e54c      	b.n	19894 <_vfiprintf_r+0x4e4>
   19dfa:	2001      	movs	r0, #1
   19dfc:	4619      	mov	r1, r3
   19dfe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e02:	e7c5      	b.n	19d90 <_vfiprintf_r+0x9e0>
   19e04:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   19e08:	9903      	ldr	r1, [sp, #12]
   19e0a:	428a      	cmp	r2, r1
   19e0c:	bfac      	ite	ge
   19e0e:	189b      	addge	r3, r3, r2
   19e10:	185b      	addlt	r3, r3, r1
   19e12:	9305      	str	r3, [sp, #20]
   19e14:	e549      	b.n	198aa <_vfiprintf_r+0x4fa>
   19e16:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   19e1a:	058f      	lsls	r7, r1, #22
   19e1c:	ee18 3a10 	vmov	r3, s16
   19e20:	b28a      	uxth	r2, r1
   19e22:	f53f aae8 	bmi.w	193f6 <_vfiprintf_r+0x46>
   19e26:	ee18 5a10 	vmov	r5, s16
   19e2a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   19e2c:	f7f8 fcba 	bl	127a4 <__retarget_lock_acquire_recursive>
   19e30:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   19e34:	b28a      	uxth	r2, r1
   19e36:	f7ff bade 	b.w	193f6 <_vfiprintf_r+0x46>
   19e3a:	2b00      	cmp	r3, #0
   19e3c:	f43f ae79 	beq.w	19b32 <_vfiprintf_r+0x782>
   19e40:	ee18 1a10 	vmov	r1, s16
   19e44:	aa18      	add	r2, sp, #96	; 0x60
   19e46:	4658      	mov	r0, fp
   19e48:	f7ff fa76 	bl	19338 <__sprint_r.part.0>
   19e4c:	2800      	cmp	r0, #0
   19e4e:	f47f ac86 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19e52:	9919      	ldr	r1, [sp, #100]	; 0x64
   19e54:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   19e56:	3101      	adds	r1, #1
   19e58:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e5c:	e4f8      	b.n	19850 <_vfiprintf_r+0x4a0>
   19e5e:	9219      	str	r2, [sp, #100]	; 0x64
   19e60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19e64:	e45e      	b.n	19724 <_vfiprintf_r+0x374>
   19e66:	2f00      	cmp	r7, #0
   19e68:	f47f abc3 	bne.w	195f2 <_vfiprintf_r+0x242>
   19e6c:	9e03      	ldr	r6, [sp, #12]
   19e6e:	2700      	movs	r7, #0
   19e70:	9704      	str	r7, [sp, #16]
   19e72:	ac44      	add	r4, sp, #272	; 0x110
   19e74:	f7ff bbc5 	b.w	19602 <_vfiprintf_r+0x252>
   19e78:	9b03      	ldr	r3, [sp, #12]
   19e7a:	f013 0310 	ands.w	r3, r3, #16
   19e7e:	d154      	bne.n	19f2a <_vfiprintf_r+0xb7a>
   19e80:	9a03      	ldr	r2, [sp, #12]
   19e82:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   19e86:	f000 816b 	beq.w	1a160 <_vfiprintf_r+0xdb0>
   19e8a:	9907      	ldr	r1, [sp, #28]
   19e8c:	461a      	mov	r2, r3
   19e8e:	f851 3b04 	ldr.w	r3, [r1], #4
   19e92:	9107      	str	r1, [sp, #28]
   19e94:	b29b      	uxth	r3, r3
   19e96:	2101      	movs	r1, #1
   19e98:	e401      	b.n	1969e <_vfiprintf_r+0x2ee>
   19e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19e9c:	2a00      	cmp	r2, #0
   19e9e:	d164      	bne.n	19f6a <_vfiprintf_r+0xbba>
   19ea0:	4618      	mov	r0, r3
   19ea2:	2101      	movs	r1, #1
   19ea4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19ea8:	e4c9      	b.n	1983e <_vfiprintf_r+0x48e>
   19eaa:	2101      	movs	r1, #1
   19eac:	4618      	mov	r0, r3
   19eae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19eb2:	e4c4      	b.n	1983e <_vfiprintf_r+0x48e>
   19eb4:	425b      	negs	r3, r3
   19eb6:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   19eba:	9603      	str	r6, [sp, #12]
   19ebc:	202d      	movs	r0, #45	; 0x2d
   19ebe:	2101      	movs	r1, #1
   19ec0:	f7ff bbee 	b.w	196a0 <_vfiprintf_r+0x2f0>
   19ec4:	2b00      	cmp	r3, #0
   19ec6:	f000 8088 	beq.w	19fda <_vfiprintf_r+0xc2a>
   19eca:	ee18 1a10 	vmov	r1, s16
   19ece:	aa18      	add	r2, sp, #96	; 0x60
   19ed0:	4658      	mov	r0, fp
   19ed2:	f7ff fa31 	bl	19338 <__sprint_r.part.0>
   19ed6:	2800      	cmp	r0, #0
   19ed8:	f47f ac41 	bne.w	1975e <_vfiprintf_r+0x3ae>
   19edc:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   19ee0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19ee4:	1c41      	adds	r1, r0, #1
   19ee6:	e477      	b.n	197d8 <_vfiprintf_r+0x428>
   19ee8:	f898 1000 	ldrb.w	r1, [r8]
   19eec:	9307      	str	r3, [sp, #28]
   19eee:	f7ff bad2 	b.w	19496 <_vfiprintf_r+0xe6>
   19ef2:	ac44      	add	r4, sp, #272	; 0x110
   19ef4:	f7ff bb85 	b.w	19602 <_vfiprintf_r+0x252>
   19ef8:	f109 0908 	add.w	r9, r9, #8
   19efc:	f10c 0101 	add.w	r1, ip, #1
   19f00:	4660      	mov	r0, ip
   19f02:	e4a0      	b.n	19846 <_vfiprintf_r+0x496>
   19f04:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   19f08:	f040 8197 	bne.w	1a23a <_vfiprintf_r+0xe8a>
   19f0c:	f851 3b04 	ldr.w	r3, [r1], #4
   19f10:	9107      	str	r1, [sp, #28]
   19f12:	f7ff bbc0 	b.w	19696 <_vfiprintf_r+0x2e6>
   19f16:	05b3      	lsls	r3, r6, #22
   19f18:	f100 8188 	bmi.w	1a22c <_vfiprintf_r+0xe7c>
   19f1c:	f852 3b04 	ldr.w	r3, [r2], #4
   19f20:	9207      	str	r2, [sp, #28]
   19f22:	17da      	asrs	r2, r3, #31
   19f24:	4611      	mov	r1, r2
   19f26:	f7ff bb52 	b.w	195ce <_vfiprintf_r+0x21e>
   19f2a:	9907      	ldr	r1, [sp, #28]
   19f2c:	f851 3b04 	ldr.w	r3, [r1], #4
   19f30:	9107      	str	r1, [sp, #28]
   19f32:	2101      	movs	r1, #1
   19f34:	f7ff bbb3 	b.w	1969e <_vfiprintf_r+0x2ee>
   19f38:	9b07      	ldr	r3, [sp, #28]
   19f3a:	9805      	ldr	r0, [sp, #20]
   19f3c:	f853 1b04 	ldr.w	r1, [r3], #4
   19f40:	9307      	str	r3, [sp, #28]
   19f42:	17c2      	asrs	r2, r0, #31
   19f44:	e9c1 0200 	strd	r0, r2, [r1]
   19f48:	f7ff ba7d 	b.w	19446 <_vfiprintf_r+0x96>
   19f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19f4e:	2b00      	cmp	r3, #0
   19f50:	f43f ab26 	beq.w	195a0 <_vfiprintf_r+0x1f0>
   19f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19f56:	781b      	ldrb	r3, [r3, #0]
   19f58:	2b00      	cmp	r3, #0
   19f5a:	f43f ab21 	beq.w	195a0 <_vfiprintf_r+0x1f0>
   19f5e:	f898 1000 	ldrb.w	r1, [r8]
   19f62:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   19f66:	f7ff ba96 	b.w	19496 <_vfiprintf_r+0xe6>
   19f6a:	2302      	movs	r3, #2
   19f6c:	aa11      	add	r2, sp, #68	; 0x44
   19f6e:	931c      	str	r3, [sp, #112]	; 0x70
   19f70:	921b      	str	r2, [sp, #108]	; 0x6c
   19f72:	2001      	movs	r0, #1
   19f74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19f78:	e6a2      	b.n	19cc0 <_vfiprintf_r+0x910>
   19f7a:	9603      	str	r6, [sp, #12]
   19f7c:	e571      	b.n	19a62 <_vfiprintf_r+0x6b2>
   19f7e:	4b3b      	ldr	r3, [pc, #236]	; (1a06c <_vfiprintf_r+0xcbc>)
   19f80:	930c      	str	r3, [sp, #48]	; 0x30
   19f82:	f016 0220 	ands.w	r2, r6, #32
   19f86:	d059      	beq.n	1a03c <_vfiprintf_r+0xc8c>
   19f88:	9b07      	ldr	r3, [sp, #28]
   19f8a:	3307      	adds	r3, #7
   19f8c:	f023 0307 	bic.w	r3, r3, #7
   19f90:	4618      	mov	r0, r3
   19f92:	685a      	ldr	r2, [r3, #4]
   19f94:	f850 3b08 	ldr.w	r3, [r0], #8
   19f98:	9007      	str	r0, [sp, #28]
   19f9a:	07f4      	lsls	r4, r6, #31
   19f9c:	d509      	bpl.n	19fb2 <_vfiprintf_r+0xc02>
   19f9e:	ea53 0002 	orrs.w	r0, r3, r2
   19fa2:	d006      	beq.n	19fb2 <_vfiprintf_r+0xc02>
   19fa4:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   19fa8:	2130      	movs	r1, #48	; 0x30
   19faa:	f046 0602 	orr.w	r6, r6, #2
   19fae:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   19fb2:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   19fb6:	9103      	str	r1, [sp, #12]
   19fb8:	2102      	movs	r1, #2
   19fba:	f7ff bb70 	b.w	1969e <_vfiprintf_r+0x2ee>
   19fbe:	4b2c      	ldr	r3, [pc, #176]	; (1a070 <_vfiprintf_r+0xcc0>)
   19fc0:	930c      	str	r3, [sp, #48]	; 0x30
   19fc2:	e7de      	b.n	19f82 <_vfiprintf_r+0xbd2>
   19fc4:	9b07      	ldr	r3, [sp, #28]
   19fc6:	2101      	movs	r1, #1
   19fc8:	f853 2b04 	ldr.w	r2, [r3], #4
   19fcc:	9103      	str	r1, [sp, #12]
   19fce:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   19fd2:	9307      	str	r3, [sp, #28]
   19fd4:	9104      	str	r1, [sp, #16]
   19fd6:	ac2b      	add	r4, sp, #172	; 0xac
   19fd8:	e4df      	b.n	1999a <_vfiprintf_r+0x5ea>
   19fda:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   19fde:	2a00      	cmp	r2, #0
   19fe0:	f040 8132 	bne.w	1a248 <_vfiprintf_r+0xe98>
   19fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19fe6:	2a00      	cmp	r2, #0
   19fe8:	f47f ae62 	bne.w	19cb0 <_vfiprintf_r+0x900>
   19fec:	4618      	mov	r0, r3
   19fee:	2101      	movs	r1, #1
   19ff0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   19ff4:	e427      	b.n	19846 <_vfiprintf_r+0x496>
   19ff6:	2100      	movs	r1, #0
   19ff8:	2208      	movs	r2, #8
   19ffa:	a816      	add	r0, sp, #88	; 0x58
   19ffc:	9413      	str	r4, [sp, #76]	; 0x4c
   19ffe:	f7f8 fa17 	bl	12430 <memset>
   1a002:	1c79      	adds	r1, r7, #1
   1a004:	f000 80bc 	beq.w	1a180 <_vfiprintf_r+0xdd0>
   1a008:	2500      	movs	r5, #0
   1a00a:	9407      	str	r4, [sp, #28]
   1a00c:	462c      	mov	r4, r5
   1a00e:	e00c      	b.n	1a02a <_vfiprintf_r+0xc7a>
   1a010:	a92b      	add	r1, sp, #172	; 0xac
   1a012:	4658      	mov	r0, fp
   1a014:	f7fe ff2e 	bl	18e74 <_wcrtomb_r>
   1a018:	1c42      	adds	r2, r0, #1
   1a01a:	4420      	add	r0, r4
   1a01c:	f000 816b 	beq.w	1a2f6 <_vfiprintf_r+0xf46>
   1a020:	42b8      	cmp	r0, r7
   1a022:	dc08      	bgt.n	1a036 <_vfiprintf_r+0xc86>
   1a024:	f000 8170 	beq.w	1a308 <_vfiprintf_r+0xf58>
   1a028:	4604      	mov	r4, r0
   1a02a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a02c:	5952      	ldr	r2, [r2, r5]
   1a02e:	ab16      	add	r3, sp, #88	; 0x58
   1a030:	3504      	adds	r5, #4
   1a032:	2a00      	cmp	r2, #0
   1a034:	d1ec      	bne.n	1a010 <_vfiprintf_r+0xc60>
   1a036:	9404      	str	r4, [sp, #16]
   1a038:	9c07      	ldr	r4, [sp, #28]
   1a03a:	e0af      	b.n	1a19c <_vfiprintf_r+0xdec>
   1a03c:	f016 0310 	ands.w	r3, r6, #16
   1a040:	9807      	ldr	r0, [sp, #28]
   1a042:	d10c      	bne.n	1a05e <_vfiprintf_r+0xcae>
   1a044:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   1a048:	d005      	beq.n	1a056 <_vfiprintf_r+0xca6>
   1a04a:	461a      	mov	r2, r3
   1a04c:	f850 3b04 	ldr.w	r3, [r0], #4
   1a050:	9007      	str	r0, [sp, #28]
   1a052:	b29b      	uxth	r3, r3
   1a054:	e7a1      	b.n	19f9a <_vfiprintf_r+0xbea>
   1a056:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   1a05a:	f040 80e1 	bne.w	1a220 <_vfiprintf_r+0xe70>
   1a05e:	f850 3b04 	ldr.w	r3, [r0], #4
   1a062:	9007      	str	r0, [sp, #28]
   1a064:	e799      	b.n	19f9a <_vfiprintf_r+0xbea>
   1a066:	bf00      	nop
   1a068:	20002ca8 	.word	0x20002ca8
   1a06c:	200011f0 	.word	0x200011f0
   1a070:	20001204 	.word	0x20001204
   1a074:	9903      	ldr	r1, [sp, #12]
   1a076:	9704      	str	r7, [sp, #16]
   1a078:	ac44      	add	r4, sp, #272	; 0x110
   1a07a:	469e      	mov	lr, r3
   1a07c:	ee08 ba90 	vmov	s17, fp
   1a080:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   1a084:	f04f 0c00 	mov.w	ip, #0
   1a088:	4623      	mov	r3, r4
   1a08a:	e006      	b.n	1a09a <_vfiprintf_r+0xcea>
   1a08c:	f1be 0f0a 	cmp.w	lr, #10
   1a090:	f172 0200 	sbcs.w	r2, r2, #0
   1a094:	d339      	bcc.n	1a10a <_vfiprintf_r+0xd5a>
   1a096:	46a6      	mov	lr, r4
   1a098:	462a      	mov	r2, r5
   1a09a:	49a6      	ldr	r1, [pc, #664]	; (1a334 <_vfiprintf_r+0xf84>)
   1a09c:	eb1e 0002 	adds.w	r0, lr, r2
   1a0a0:	f140 0000 	adc.w	r0, r0, #0
   1a0a4:	460f      	mov	r7, r1
   1a0a6:	fba1 1400 	umull	r1, r4, r1, r0
   1a0aa:	f024 0103 	bic.w	r1, r4, #3
   1a0ae:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   1a0b2:	1a40      	subs	r0, r0, r1
   1a0b4:	ebbe 0100 	subs.w	r1, lr, r0
   1a0b8:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   1a0bc:	f162 0400 	sbc.w	r4, r2, #0
   1a0c0:	fb05 f501 	mul.w	r5, r5, r1
   1a0c4:	fb07 5504 	mla	r5, r7, r4, r5
   1a0c8:	fba1 4107 	umull	r4, r1, r1, r7
   1a0cc:	440d      	add	r5, r1
   1a0ce:	2705      	movs	r7, #5
   1a0d0:	f004 0101 	and.w	r1, r4, #1
   1a0d4:	fba1 1b07 	umull	r1, fp, r1, r7
   1a0d8:	1809      	adds	r1, r1, r0
   1a0da:	0864      	lsrs	r4, r4, #1
   1a0dc:	3130      	adds	r1, #48	; 0x30
   1a0de:	f803 1c01 	strb.w	r1, [r3, #-1]
   1a0e2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   1a0e6:	f10c 0c01 	add.w	ip, ip, #1
   1a0ea:	3b01      	subs	r3, #1
   1a0ec:	086d      	lsrs	r5, r5, #1
   1a0ee:	2e00      	cmp	r6, #0
   1a0f0:	d0cc      	beq.n	1a08c <_vfiprintf_r+0xcdc>
   1a0f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a0f4:	7809      	ldrb	r1, [r1, #0]
   1a0f6:	4561      	cmp	r1, ip
   1a0f8:	d1c8      	bne.n	1a08c <_vfiprintf_r+0xcdc>
   1a0fa:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   1a0fe:	d0c5      	beq.n	1a08c <_vfiprintf_r+0xcdc>
   1a100:	f1be 0f0a 	cmp.w	lr, #10
   1a104:	f172 0200 	sbcs.w	r2, r2, #0
   1a108:	d26c      	bcs.n	1a1e4 <_vfiprintf_r+0xe34>
   1a10a:	461c      	mov	r4, r3
   1a10c:	ab44      	add	r3, sp, #272	; 0x110
   1a10e:	1b1b      	subs	r3, r3, r4
   1a110:	9f04      	ldr	r7, [sp, #16]
   1a112:	9e03      	ldr	r6, [sp, #12]
   1a114:	9304      	str	r3, [sp, #16]
   1a116:	ee18 ba90 	vmov	fp, s17
   1a11a:	f7ff ba72 	b.w	19602 <_vfiprintf_r+0x252>
   1a11e:	9603      	str	r6, [sp, #12]
   1a120:	f7ff ba62 	b.w	195e8 <_vfiprintf_r+0x238>
   1a124:	4658      	mov	r0, fp
   1a126:	f7f7 ff4b 	bl	11fc0 <__sinit>
   1a12a:	f7ff b95b 	b.w	193e4 <_vfiprintf_r+0x34>
   1a12e:	2901      	cmp	r1, #1
   1a130:	9603      	str	r6, [sp, #12]
   1a132:	f47f accd 	bne.w	19ad0 <_vfiprintf_r+0x720>
   1a136:	f7ff ba5c 	b.w	195f2 <_vfiprintf_r+0x242>
   1a13a:	9b07      	ldr	r3, [sp, #28]
   1a13c:	9905      	ldr	r1, [sp, #20]
   1a13e:	f853 2b04 	ldr.w	r2, [r3], #4
   1a142:	6011      	str	r1, [r2, #0]
   1a144:	9307      	str	r3, [sp, #28]
   1a146:	f7ff b97e 	b.w	19446 <_vfiprintf_r+0x96>
   1a14a:	2f06      	cmp	r7, #6
   1a14c:	463b      	mov	r3, r7
   1a14e:	9a03      	ldr	r2, [sp, #12]
   1a150:	4c79      	ldr	r4, [pc, #484]	; (1a338 <_vfiprintf_r+0xf88>)
   1a152:	9207      	str	r2, [sp, #28]
   1a154:	bf28      	it	cs
   1a156:	2306      	movcs	r3, #6
   1a158:	9304      	str	r3, [sp, #16]
   1a15a:	9303      	str	r3, [sp, #12]
   1a15c:	f7ff bb25 	b.w	197aa <_vfiprintf_r+0x3fa>
   1a160:	9b03      	ldr	r3, [sp, #12]
   1a162:	9907      	ldr	r1, [sp, #28]
   1a164:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   1a168:	bf14      	ite	ne
   1a16a:	f851 3b04 	ldrne.w	r3, [r1], #4
   1a16e:	f851 3b04 	ldreq.w	r3, [r1], #4
   1a172:	9107      	str	r1, [sp, #28]
   1a174:	bf1c      	itt	ne
   1a176:	4602      	movne	r2, r0
   1a178:	b2db      	uxtbne	r3, r3
   1a17a:	2101      	movs	r1, #1
   1a17c:	f7ff ba8f 	b.w	1969e <_vfiprintf_r+0x2ee>
   1a180:	ab16      	add	r3, sp, #88	; 0x58
   1a182:	9300      	str	r3, [sp, #0]
   1a184:	2300      	movs	r3, #0
   1a186:	4619      	mov	r1, r3
   1a188:	aa13      	add	r2, sp, #76	; 0x4c
   1a18a:	4658      	mov	r0, fp
   1a18c:	f7fe fe98 	bl	18ec0 <_wcsrtombs_r>
   1a190:	4603      	mov	r3, r0
   1a192:	3301      	adds	r3, #1
   1a194:	9004      	str	r0, [sp, #16]
   1a196:	f000 80ae 	beq.w	1a2f6 <_vfiprintf_r+0xf46>
   1a19a:	9413      	str	r4, [sp, #76]	; 0x4c
   1a19c:	9b04      	ldr	r3, [sp, #16]
   1a19e:	2b00      	cmp	r3, #0
   1a1a0:	d030      	beq.n	1a204 <_vfiprintf_r+0xe54>
   1a1a2:	2b63      	cmp	r3, #99	; 0x63
   1a1a4:	dc63      	bgt.n	1a26e <_vfiprintf_r+0xebe>
   1a1a6:	2300      	movs	r3, #0
   1a1a8:	9308      	str	r3, [sp, #32]
   1a1aa:	ac2b      	add	r4, sp, #172	; 0xac
   1a1ac:	2208      	movs	r2, #8
   1a1ae:	2100      	movs	r1, #0
   1a1b0:	a816      	add	r0, sp, #88	; 0x58
   1a1b2:	f7f8 f93d 	bl	12430 <memset>
   1a1b6:	9d04      	ldr	r5, [sp, #16]
   1a1b8:	ab16      	add	r3, sp, #88	; 0x58
   1a1ba:	9300      	str	r3, [sp, #0]
   1a1bc:	aa13      	add	r2, sp, #76	; 0x4c
   1a1be:	462b      	mov	r3, r5
   1a1c0:	4621      	mov	r1, r4
   1a1c2:	4658      	mov	r0, fp
   1a1c4:	f7fe fe7c 	bl	18ec0 <_wcsrtombs_r>
   1a1c8:	4285      	cmp	r5, r0
   1a1ca:	f040 80ab 	bne.w	1a324 <_vfiprintf_r+0xf74>
   1a1ce:	9b03      	ldr	r3, [sp, #12]
   1a1d0:	9a04      	ldr	r2, [sp, #16]
   1a1d2:	9307      	str	r3, [sp, #28]
   1a1d4:	2300      	movs	r3, #0
   1a1d6:	54a3      	strb	r3, [r4, r2]
   1a1d8:	461f      	mov	r7, r3
   1a1da:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1a1de:	9303      	str	r3, [sp, #12]
   1a1e0:	f7ff ba16 	b.w	19610 <_vfiprintf_r+0x260>
   1a1e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a1e6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1a1e8:	1a9b      	subs	r3, r3, r2
   1a1ea:	4618      	mov	r0, r3
   1a1ec:	9308      	str	r3, [sp, #32]
   1a1ee:	f7f8 fa0d 	bl	1260c <strncpy>
   1a1f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a1f4:	9b08      	ldr	r3, [sp, #32]
   1a1f6:	784a      	ldrb	r2, [r1, #1]
   1a1f8:	b10a      	cbz	r2, 1a1fe <_vfiprintf_r+0xe4e>
   1a1fa:	3101      	adds	r1, #1
   1a1fc:	910b      	str	r1, [sp, #44]	; 0x2c
   1a1fe:	f04f 0c00 	mov.w	ip, #0
   1a202:	e748      	b.n	1a096 <_vfiprintf_r+0xce6>
   1a204:	9b03      	ldr	r3, [sp, #12]
   1a206:	9307      	str	r3, [sp, #28]
   1a208:	9b04      	ldr	r3, [sp, #16]
   1a20a:	9303      	str	r3, [sp, #12]
   1a20c:	461f      	mov	r7, r3
   1a20e:	9308      	str	r3, [sp, #32]
   1a210:	f7ff b9fe 	b.w	19610 <_vfiprintf_r+0x260>
   1a214:	2101      	movs	r1, #1
   1a216:	4618      	mov	r0, r3
   1a218:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a21c:	f7ff bb13 	b.w	19846 <_vfiprintf_r+0x496>
   1a220:	f850 3b04 	ldr.w	r3, [r0], #4
   1a224:	9007      	str	r0, [sp, #28]
   1a226:	4622      	mov	r2, r4
   1a228:	b2db      	uxtb	r3, r3
   1a22a:	e6b6      	b.n	19f9a <_vfiprintf_r+0xbea>
   1a22c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   1a230:	9207      	str	r2, [sp, #28]
   1a232:	17da      	asrs	r2, r3, #31
   1a234:	4611      	mov	r1, r2
   1a236:	f7ff b9ca 	b.w	195ce <_vfiprintf_r+0x21e>
   1a23a:	f851 3b04 	ldr.w	r3, [r1], #4
   1a23e:	9107      	str	r1, [sp, #28]
   1a240:	4602      	mov	r2, r0
   1a242:	b2db      	uxtb	r3, r3
   1a244:	f7ff ba27 	b.w	19696 <_vfiprintf_r+0x2e6>
   1a248:	2301      	movs	r3, #1
   1a24a:	931c      	str	r3, [sp, #112]	; 0x70
   1a24c:	2101      	movs	r1, #1
   1a24e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   1a252:	931b      	str	r3, [sp, #108]	; 0x6c
   1a254:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1a258:	460b      	mov	r3, r1
   1a25a:	f7ff bacd 	b.w	197f8 <_vfiprintf_r+0x448>
   1a25e:	9b07      	ldr	r3, [sp, #28]
   1a260:	9905      	ldr	r1, [sp, #20]
   1a262:	f853 2b04 	ldr.w	r2, [r3], #4
   1a266:	9307      	str	r3, [sp, #28]
   1a268:	8011      	strh	r1, [r2, #0]
   1a26a:	f7ff b8ec 	b.w	19446 <_vfiprintf_r+0x96>
   1a26e:	1c59      	adds	r1, r3, #1
   1a270:	4658      	mov	r0, fp
   1a272:	f7f6 f96d 	bl	10550 <_malloc_r>
   1a276:	4604      	mov	r4, r0
   1a278:	2800      	cmp	r0, #0
   1a27a:	d03c      	beq.n	1a2f6 <_vfiprintf_r+0xf46>
   1a27c:	9008      	str	r0, [sp, #32]
   1a27e:	e795      	b.n	1a1ac <_vfiprintf_r+0xdfc>
   1a280:	6d88      	ldr	r0, [r1, #88]	; 0x58
   1a282:	f7f8 fa91 	bl	127a8 <__retarget_lock_release_recursive>
   1a286:	f7ff b9e9 	b.w	1965c <_vfiprintf_r+0x2ac>
   1a28a:	9b03      	ldr	r3, [sp, #12]
   1a28c:	9307      	str	r3, [sp, #28]
   1a28e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1a292:	9f08      	ldr	r7, [sp, #32]
   1a294:	f7ff b9bc 	b.w	19610 <_vfiprintf_r+0x260>
   1a298:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a29a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1a29c:	3001      	adds	r0, #1
   1a29e:	e545      	b.n	19d2c <_vfiprintf_r+0x97c>
   1a2a0:	9b03      	ldr	r3, [sp, #12]
   1a2a2:	9307      	str	r3, [sp, #28]
   1a2a4:	4620      	mov	r0, r4
   1a2a6:	f7f8 fcab 	bl	12c00 <strlen>
   1a2aa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1a2ae:	462f      	mov	r7, r5
   1a2b0:	9004      	str	r0, [sp, #16]
   1a2b2:	9303      	str	r3, [sp, #12]
   1a2b4:	9508      	str	r5, [sp, #32]
   1a2b6:	f7ff b9ab 	b.w	19610 <_vfiprintf_r+0x260>
   1a2ba:	ee18 1a10 	vmov	r1, s16
   1a2be:	aa18      	add	r2, sp, #96	; 0x60
   1a2c0:	4658      	mov	r0, fp
   1a2c2:	f7ff f839 	bl	19338 <__sprint_r.part.0>
   1a2c6:	2800      	cmp	r0, #0
   1a2c8:	f43f aa36 	beq.w	19738 <_vfiprintf_r+0x388>
   1a2cc:	f7ff ba4d 	b.w	1976a <_vfiprintf_r+0x3ba>
   1a2d0:	9819      	ldr	r0, [sp, #100]	; 0x64
   1a2d2:	3001      	adds	r0, #1
   1a2d4:	e57a      	b.n	19dcc <_vfiprintf_r+0xa1c>
   1a2d6:	468c      	mov	ip, r1
   1a2d8:	e46e      	b.n	19bb8 <_vfiprintf_r+0x808>
   1a2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1a2dc:	07d9      	lsls	r1, r3, #31
   1a2de:	d405      	bmi.n	1a2ec <_vfiprintf_r+0xf3c>
   1a2e0:	89ab      	ldrh	r3, [r5, #12]
   1a2e2:	059a      	lsls	r2, r3, #22
   1a2e4:	d402      	bmi.n	1a2ec <_vfiprintf_r+0xf3c>
   1a2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1a2e8:	f7f8 fa5e 	bl	127a8 <__retarget_lock_release_recursive>
   1a2ec:	f04f 33ff 	mov.w	r3, #4294967295
   1a2f0:	9305      	str	r3, [sp, #20]
   1a2f2:	f7ff ba49 	b.w	19788 <_vfiprintf_r+0x3d8>
   1a2f6:	ee18 2a10 	vmov	r2, s16
   1a2fa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a2fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a302:	8193      	strh	r3, [r2, #12]
   1a304:	f7ff ba35 	b.w	19772 <_vfiprintf_r+0x3c2>
   1a308:	9c07      	ldr	r4, [sp, #28]
   1a30a:	9704      	str	r7, [sp, #16]
   1a30c:	e746      	b.n	1a19c <_vfiprintf_r+0xdec>
   1a30e:	9b07      	ldr	r3, [sp, #28]
   1a310:	f898 1001 	ldrb.w	r1, [r8, #1]
   1a314:	f853 7b04 	ldr.w	r7, [r3], #4
   1a318:	9307      	str	r3, [sp, #28]
   1a31a:	4690      	mov	r8, r2
   1a31c:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   1a320:	f7ff b8b9 	b.w	19496 <_vfiprintf_r+0xe6>
   1a324:	ee18 2a10 	vmov	r2, s16
   1a328:	8993      	ldrh	r3, [r2, #12]
   1a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a32e:	8193      	strh	r3, [r2, #12]
   1a330:	f7ff ba15 	b.w	1975e <_vfiprintf_r+0x3ae>
   1a334:	cccccccd 	.word	0xcccccccd
   1a338:	20001218 	.word	0x20001218

0001a33c <__sbprintf>:
   1a33c:	b570      	push	{r4, r5, r6, lr}
   1a33e:	460c      	mov	r4, r1
   1a340:	8989      	ldrh	r1, [r1, #12]
   1a342:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   1a346:	f021 0102 	bic.w	r1, r1, #2
   1a34a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1a34e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a350:	911b      	str	r1, [sp, #108]	; 0x6c
   1a352:	89e1      	ldrh	r1, [r4, #14]
   1a354:	f8ad 1016 	strh.w	r1, [sp, #22]
   1a358:	69e1      	ldr	r1, [r4, #28]
   1a35a:	9109      	str	r1, [sp, #36]	; 0x24
   1a35c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a35e:	910b      	str	r1, [sp, #44]	; 0x2c
   1a360:	a91c      	add	r1, sp, #112	; 0x70
   1a362:	9102      	str	r1, [sp, #8]
   1a364:	9106      	str	r1, [sp, #24]
   1a366:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a36a:	4606      	mov	r6, r0
   1a36c:	9104      	str	r1, [sp, #16]
   1a36e:	9107      	str	r1, [sp, #28]
   1a370:	a818      	add	r0, sp, #96	; 0x60
   1a372:	2100      	movs	r1, #0
   1a374:	e9cd 3200 	strd	r3, r2, [sp]
   1a378:	9108      	str	r1, [sp, #32]
   1a37a:	f7f8 fa0f 	bl	1279c <__retarget_lock_init_recursive>
   1a37e:	e9dd 3200 	ldrd	r3, r2, [sp]
   1a382:	a902      	add	r1, sp, #8
   1a384:	4630      	mov	r0, r6
   1a386:	f7ff f813 	bl	193b0 <_vfiprintf_r>
   1a38a:	1e05      	subs	r5, r0, #0
   1a38c:	db07      	blt.n	1a39e <__sbprintf+0x62>
   1a38e:	a902      	add	r1, sp, #8
   1a390:	4630      	mov	r0, r6
   1a392:	f7fd fad3 	bl	1793c <_fflush_r>
   1a396:	2800      	cmp	r0, #0
   1a398:	bf18      	it	ne
   1a39a:	f04f 35ff 	movne.w	r5, #4294967295
   1a39e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1a3a2:	065b      	lsls	r3, r3, #25
   1a3a4:	d503      	bpl.n	1a3ae <__sbprintf+0x72>
   1a3a6:	89a3      	ldrh	r3, [r4, #12]
   1a3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a3ac:	81a3      	strh	r3, [r4, #12]
   1a3ae:	9818      	ldr	r0, [sp, #96]	; 0x60
   1a3b0:	f7f8 f9f6 	bl	127a0 <__retarget_lock_close_recursive>
   1a3b4:	4628      	mov	r0, r5
   1a3b6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   1a3ba:	bd70      	pop	{r4, r5, r6, pc}

0001a3bc <__sfvwrite_r>:
   1a3bc:	6893      	ldr	r3, [r2, #8]
   1a3be:	2b00      	cmp	r3, #0
   1a3c0:	f000 8085 	beq.w	1a4ce <__sfvwrite_r+0x112>
   1a3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3c8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1a3cc:	460c      	mov	r4, r1
   1a3ce:	0719      	lsls	r1, r3, #28
   1a3d0:	4680      	mov	r8, r0
   1a3d2:	b083      	sub	sp, #12
   1a3d4:	4617      	mov	r7, r2
   1a3d6:	b298      	uxth	r0, r3
   1a3d8:	d525      	bpl.n	1a426 <__sfvwrite_r+0x6a>
   1a3da:	6923      	ldr	r3, [r4, #16]
   1a3dc:	b31b      	cbz	r3, 1a426 <__sfvwrite_r+0x6a>
   1a3de:	f010 0302 	ands.w	r3, r0, #2
   1a3e2:	683d      	ldr	r5, [r7, #0]
   1a3e4:	d02d      	beq.n	1a442 <__sfvwrite_r+0x86>
   1a3e6:	f04f 0a00 	mov.w	sl, #0
   1a3ea:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1a6ac <__sfvwrite_r+0x2f0>
   1a3ee:	4656      	mov	r6, sl
   1a3f0:	46b9      	mov	r9, r7
   1a3f2:	455e      	cmp	r6, fp
   1a3f4:	4633      	mov	r3, r6
   1a3f6:	4652      	mov	r2, sl
   1a3f8:	bf28      	it	cs
   1a3fa:	465b      	movcs	r3, fp
   1a3fc:	4640      	mov	r0, r8
   1a3fe:	2e00      	cmp	r6, #0
   1a400:	d052      	beq.n	1a4a8 <__sfvwrite_r+0xec>
   1a402:	69e1      	ldr	r1, [r4, #28]
   1a404:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a406:	47b8      	blx	r7
   1a408:	2800      	cmp	r0, #0
   1a40a:	dd56      	ble.n	1a4ba <__sfvwrite_r+0xfe>
   1a40c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1a410:	1a1b      	subs	r3, r3, r0
   1a412:	4482      	add	sl, r0
   1a414:	1a36      	subs	r6, r6, r0
   1a416:	f8c9 3008 	str.w	r3, [r9, #8]
   1a41a:	2b00      	cmp	r3, #0
   1a41c:	d1e9      	bne.n	1a3f2 <__sfvwrite_r+0x36>
   1a41e:	2000      	movs	r0, #0
   1a420:	b003      	add	sp, #12
   1a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a426:	4621      	mov	r1, r4
   1a428:	4640      	mov	r0, r8
   1a42a:	f000 f97d 	bl	1a728 <__swsetup_r>
   1a42e:	2800      	cmp	r0, #0
   1a430:	f040 8138 	bne.w	1a6a4 <__sfvwrite_r+0x2e8>
   1a434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a438:	683d      	ldr	r5, [r7, #0]
   1a43a:	b298      	uxth	r0, r3
   1a43c:	f010 0302 	ands.w	r3, r0, #2
   1a440:	d1d1      	bne.n	1a3e6 <__sfvwrite_r+0x2a>
   1a442:	f010 0901 	ands.w	r9, r0, #1
   1a446:	d144      	bne.n	1a4d2 <__sfvwrite_r+0x116>
   1a448:	464e      	mov	r6, r9
   1a44a:	9700      	str	r7, [sp, #0]
   1a44c:	b346      	cbz	r6, 1a4a0 <__sfvwrite_r+0xe4>
   1a44e:	0582      	lsls	r2, r0, #22
   1a450:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1a454:	f140 8085 	bpl.w	1a562 <__sfvwrite_r+0x1a6>
   1a458:	45b3      	cmp	fp, r6
   1a45a:	465a      	mov	r2, fp
   1a45c:	f200 80b4 	bhi.w	1a5c8 <__sfvwrite_r+0x20c>
   1a460:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1a464:	f040 80c1 	bne.w	1a5ea <__sfvwrite_r+0x22e>
   1a468:	6820      	ldr	r0, [r4, #0]
   1a46a:	9201      	str	r2, [sp, #4]
   1a46c:	4649      	mov	r1, r9
   1a46e:	f7f7 ff63 	bl	12338 <memmove>
   1a472:	68a3      	ldr	r3, [r4, #8]
   1a474:	9a01      	ldr	r2, [sp, #4]
   1a476:	eba3 010b 	sub.w	r1, r3, fp
   1a47a:	6823      	ldr	r3, [r4, #0]
   1a47c:	60a1      	str	r1, [r4, #8]
   1a47e:	4413      	add	r3, r2
   1a480:	46b2      	mov	sl, r6
   1a482:	6023      	str	r3, [r4, #0]
   1a484:	2600      	movs	r6, #0
   1a486:	9a00      	ldr	r2, [sp, #0]
   1a488:	6893      	ldr	r3, [r2, #8]
   1a48a:	eba3 030a 	sub.w	r3, r3, sl
   1a48e:	44d1      	add	r9, sl
   1a490:	6093      	str	r3, [r2, #8]
   1a492:	2b00      	cmp	r3, #0
   1a494:	d0c3      	beq.n	1a41e <__sfvwrite_r+0x62>
   1a496:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1a49a:	b280      	uxth	r0, r0
   1a49c:	2e00      	cmp	r6, #0
   1a49e:	d1d6      	bne.n	1a44e <__sfvwrite_r+0x92>
   1a4a0:	e9d5 9600 	ldrd	r9, r6, [r5]
   1a4a4:	3508      	adds	r5, #8
   1a4a6:	e7d1      	b.n	1a44c <__sfvwrite_r+0x90>
   1a4a8:	e9d5 a600 	ldrd	sl, r6, [r5]
   1a4ac:	3508      	adds	r5, #8
   1a4ae:	e7a0      	b.n	1a3f2 <__sfvwrite_r+0x36>
   1a4b0:	4621      	mov	r1, r4
   1a4b2:	4640      	mov	r0, r8
   1a4b4:	f7fd fa42 	bl	1793c <_fflush_r>
   1a4b8:	b388      	cbz	r0, 1a51e <__sfvwrite_r+0x162>
   1a4ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a4c2:	f04f 30ff 	mov.w	r0, #4294967295
   1a4c6:	81a3      	strh	r3, [r4, #12]
   1a4c8:	b003      	add	sp, #12
   1a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4ce:	2000      	movs	r0, #0
   1a4d0:	4770      	bx	lr
   1a4d2:	461e      	mov	r6, r3
   1a4d4:	46ba      	mov	sl, r7
   1a4d6:	4699      	mov	r9, r3
   1a4d8:	4618      	mov	r0, r3
   1a4da:	9500      	str	r5, [sp, #0]
   1a4dc:	461f      	mov	r7, r3
   1a4de:	b366      	cbz	r6, 1a53a <__sfvwrite_r+0x17e>
   1a4e0:	2800      	cmp	r0, #0
   1a4e2:	d032      	beq.n	1a54a <__sfvwrite_r+0x18e>
   1a4e4:	464a      	mov	r2, r9
   1a4e6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   1a4ea:	6820      	ldr	r0, [r4, #0]
   1a4ec:	68a5      	ldr	r5, [r4, #8]
   1a4ee:	42b2      	cmp	r2, r6
   1a4f0:	bf28      	it	cs
   1a4f2:	4632      	movcs	r2, r6
   1a4f4:	4288      	cmp	r0, r1
   1a4f6:	d904      	bls.n	1a502 <__sfvwrite_r+0x146>
   1a4f8:	eb05 0b03 	add.w	fp, r5, r3
   1a4fc:	455a      	cmp	r2, fp
   1a4fe:	f300 80a7 	bgt.w	1a650 <__sfvwrite_r+0x294>
   1a502:	4293      	cmp	r3, r2
   1a504:	dc64      	bgt.n	1a5d0 <__sfvwrite_r+0x214>
   1a506:	69e1      	ldr	r1, [r4, #28]
   1a508:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1a50a:	463a      	mov	r2, r7
   1a50c:	4640      	mov	r0, r8
   1a50e:	47a8      	blx	r5
   1a510:	f1b0 0b00 	subs.w	fp, r0, #0
   1a514:	ddd1      	ble.n	1a4ba <__sfvwrite_r+0xfe>
   1a516:	ebb9 090b 	subs.w	r9, r9, fp
   1a51a:	d0c9      	beq.n	1a4b0 <__sfvwrite_r+0xf4>
   1a51c:	2001      	movs	r0, #1
   1a51e:	f8da 3008 	ldr.w	r3, [sl, #8]
   1a522:	eba3 030b 	sub.w	r3, r3, fp
   1a526:	445f      	add	r7, fp
   1a528:	eba6 060b 	sub.w	r6, r6, fp
   1a52c:	f8ca 3008 	str.w	r3, [sl, #8]
   1a530:	2b00      	cmp	r3, #0
   1a532:	f43f af74 	beq.w	1a41e <__sfvwrite_r+0x62>
   1a536:	2e00      	cmp	r6, #0
   1a538:	d1d2      	bne.n	1a4e0 <__sfvwrite_r+0x124>
   1a53a:	9a00      	ldr	r2, [sp, #0]
   1a53c:	6856      	ldr	r6, [r2, #4]
   1a53e:	4613      	mov	r3, r2
   1a540:	3208      	adds	r2, #8
   1a542:	9200      	str	r2, [sp, #0]
   1a544:	2e00      	cmp	r6, #0
   1a546:	d0f8      	beq.n	1a53a <__sfvwrite_r+0x17e>
   1a548:	681f      	ldr	r7, [r3, #0]
   1a54a:	4632      	mov	r2, r6
   1a54c:	210a      	movs	r1, #10
   1a54e:	4638      	mov	r0, r7
   1a550:	f7f8 fb06 	bl	12b60 <memchr>
   1a554:	2800      	cmp	r0, #0
   1a556:	f000 809c 	beq.w	1a692 <__sfvwrite_r+0x2d6>
   1a55a:	3001      	adds	r0, #1
   1a55c:	eba0 0907 	sub.w	r9, r0, r7
   1a560:	e7c0      	b.n	1a4e4 <__sfvwrite_r+0x128>
   1a562:	6820      	ldr	r0, [r4, #0]
   1a564:	6923      	ldr	r3, [r4, #16]
   1a566:	4298      	cmp	r0, r3
   1a568:	d816      	bhi.n	1a598 <__sfvwrite_r+0x1dc>
   1a56a:	6962      	ldr	r2, [r4, #20]
   1a56c:	42b2      	cmp	r2, r6
   1a56e:	d813      	bhi.n	1a598 <__sfvwrite_r+0x1dc>
   1a570:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1a574:	42b3      	cmp	r3, r6
   1a576:	bf28      	it	cs
   1a578:	4633      	movcs	r3, r6
   1a57a:	69e1      	ldr	r1, [r4, #28]
   1a57c:	fb93 f3f2 	sdiv	r3, r3, r2
   1a580:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a582:	fb02 f303 	mul.w	r3, r2, r3
   1a586:	4640      	mov	r0, r8
   1a588:	464a      	mov	r2, r9
   1a58a:	47b8      	blx	r7
   1a58c:	f1b0 0a00 	subs.w	sl, r0, #0
   1a590:	dd93      	ble.n	1a4ba <__sfvwrite_r+0xfe>
   1a592:	eba6 060a 	sub.w	r6, r6, sl
   1a596:	e776      	b.n	1a486 <__sfvwrite_r+0xca>
   1a598:	45b3      	cmp	fp, r6
   1a59a:	46da      	mov	sl, fp
   1a59c:	bf28      	it	cs
   1a59e:	46b2      	movcs	sl, r6
   1a5a0:	4652      	mov	r2, sl
   1a5a2:	4649      	mov	r1, r9
   1a5a4:	f7f7 fec8 	bl	12338 <memmove>
   1a5a8:	68a3      	ldr	r3, [r4, #8]
   1a5aa:	6822      	ldr	r2, [r4, #0]
   1a5ac:	eba3 030a 	sub.w	r3, r3, sl
   1a5b0:	4452      	add	r2, sl
   1a5b2:	60a3      	str	r3, [r4, #8]
   1a5b4:	6022      	str	r2, [r4, #0]
   1a5b6:	2b00      	cmp	r3, #0
   1a5b8:	d1eb      	bne.n	1a592 <__sfvwrite_r+0x1d6>
   1a5ba:	4621      	mov	r1, r4
   1a5bc:	4640      	mov	r0, r8
   1a5be:	f7fd f9bd 	bl	1793c <_fflush_r>
   1a5c2:	2800      	cmp	r0, #0
   1a5c4:	d0e5      	beq.n	1a592 <__sfvwrite_r+0x1d6>
   1a5c6:	e778      	b.n	1a4ba <__sfvwrite_r+0xfe>
   1a5c8:	6820      	ldr	r0, [r4, #0]
   1a5ca:	46b3      	mov	fp, r6
   1a5cc:	4632      	mov	r2, r6
   1a5ce:	e74c      	b.n	1a46a <__sfvwrite_r+0xae>
   1a5d0:	4639      	mov	r1, r7
   1a5d2:	9201      	str	r2, [sp, #4]
   1a5d4:	f7f7 feb0 	bl	12338 <memmove>
   1a5d8:	9a01      	ldr	r2, [sp, #4]
   1a5da:	68a3      	ldr	r3, [r4, #8]
   1a5dc:	1a9b      	subs	r3, r3, r2
   1a5de:	60a3      	str	r3, [r4, #8]
   1a5e0:	6823      	ldr	r3, [r4, #0]
   1a5e2:	4413      	add	r3, r2
   1a5e4:	6023      	str	r3, [r4, #0]
   1a5e6:	4693      	mov	fp, r2
   1a5e8:	e795      	b.n	1a516 <__sfvwrite_r+0x15a>
   1a5ea:	6823      	ldr	r3, [r4, #0]
   1a5ec:	6921      	ldr	r1, [r4, #16]
   1a5ee:	eba3 0b01 	sub.w	fp, r3, r1
   1a5f2:	6963      	ldr	r3, [r4, #20]
   1a5f4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1a5f8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   1a5fc:	f10b 0301 	add.w	r3, fp, #1
   1a600:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   1a604:	4433      	add	r3, r6
   1a606:	4553      	cmp	r3, sl
   1a608:	4652      	mov	r2, sl
   1a60a:	bf84      	itt	hi
   1a60c:	469a      	movhi	sl, r3
   1a60e:	4652      	movhi	r2, sl
   1a610:	0543      	lsls	r3, r0, #21
   1a612:	d52c      	bpl.n	1a66e <__sfvwrite_r+0x2b2>
   1a614:	4611      	mov	r1, r2
   1a616:	4640      	mov	r0, r8
   1a618:	f7f5 ff9a 	bl	10550 <_malloc_r>
   1a61c:	2800      	cmp	r0, #0
   1a61e:	d03b      	beq.n	1a698 <__sfvwrite_r+0x2dc>
   1a620:	465a      	mov	r2, fp
   1a622:	6921      	ldr	r1, [r4, #16]
   1a624:	9001      	str	r0, [sp, #4]
   1a626:	f7f3 fe75 	bl	e314 <memcpy>
   1a62a:	89a2      	ldrh	r2, [r4, #12]
   1a62c:	9b01      	ldr	r3, [sp, #4]
   1a62e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1a632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a636:	81a2      	strh	r2, [r4, #12]
   1a638:	eb03 000b 	add.w	r0, r3, fp
   1a63c:	6123      	str	r3, [r4, #16]
   1a63e:	ebaa 030b 	sub.w	r3, sl, fp
   1a642:	f8c4 a014 	str.w	sl, [r4, #20]
   1a646:	60a3      	str	r3, [r4, #8]
   1a648:	6020      	str	r0, [r4, #0]
   1a64a:	46b3      	mov	fp, r6
   1a64c:	4632      	mov	r2, r6
   1a64e:	e70c      	b.n	1a46a <__sfvwrite_r+0xae>
   1a650:	4639      	mov	r1, r7
   1a652:	465a      	mov	r2, fp
   1a654:	f7f7 fe70 	bl	12338 <memmove>
   1a658:	6823      	ldr	r3, [r4, #0]
   1a65a:	445b      	add	r3, fp
   1a65c:	6023      	str	r3, [r4, #0]
   1a65e:	4621      	mov	r1, r4
   1a660:	4640      	mov	r0, r8
   1a662:	f7fd f96b 	bl	1793c <_fflush_r>
   1a666:	2800      	cmp	r0, #0
   1a668:	f43f af55 	beq.w	1a516 <__sfvwrite_r+0x15a>
   1a66c:	e725      	b.n	1a4ba <__sfvwrite_r+0xfe>
   1a66e:	4640      	mov	r0, r8
   1a670:	f7f6 fa36 	bl	10ae0 <_realloc_r>
   1a674:	4603      	mov	r3, r0
   1a676:	2800      	cmp	r0, #0
   1a678:	d1de      	bne.n	1a638 <__sfvwrite_r+0x27c>
   1a67a:	6921      	ldr	r1, [r4, #16]
   1a67c:	4640      	mov	r0, r8
   1a67e:	f7f8 fbd1 	bl	12e24 <_free_r>
   1a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a686:	220c      	movs	r2, #12
   1a688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1a68c:	f8c8 2000 	str.w	r2, [r8]
   1a690:	e715      	b.n	1a4be <__sfvwrite_r+0x102>
   1a692:	1c72      	adds	r2, r6, #1
   1a694:	4691      	mov	r9, r2
   1a696:	e726      	b.n	1a4e6 <__sfvwrite_r+0x12a>
   1a698:	220c      	movs	r2, #12
   1a69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a69e:	f8c8 2000 	str.w	r2, [r8]
   1a6a2:	e70c      	b.n	1a4be <__sfvwrite_r+0x102>
   1a6a4:	f04f 30ff 	mov.w	r0, #4294967295
   1a6a8:	e6ba      	b.n	1a420 <__sfvwrite_r+0x64>
   1a6aa:	bf00      	nop
   1a6ac:	7ffffc00 	.word	0x7ffffc00

0001a6b0 <__submore>:
   1a6b0:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6b8:	460c      	mov	r4, r1
   1a6ba:	6b09      	ldr	r1, [r1, #48]	; 0x30
   1a6bc:	4299      	cmp	r1, r3
   1a6be:	d014      	beq.n	1a6ea <__submore+0x3a>
   1a6c0:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1a6c2:	0077      	lsls	r7, r6, #1
   1a6c4:	463a      	mov	r2, r7
   1a6c6:	f7f6 fa0b 	bl	10ae0 <_realloc_r>
   1a6ca:	4605      	mov	r5, r0
   1a6cc:	b340      	cbz	r0, 1a720 <__submore+0x70>
   1a6ce:	eb00 0806 	add.w	r8, r0, r6
   1a6d2:	4601      	mov	r1, r0
   1a6d4:	4632      	mov	r2, r6
   1a6d6:	4640      	mov	r0, r8
   1a6d8:	f7f3 fe1c 	bl	e314 <memcpy>
   1a6dc:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
   1a6e0:	f8c4 8000 	str.w	r8, [r4]
   1a6e4:	2000      	movs	r0, #0
   1a6e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a6ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1a6ee:	f7f5 ff2f 	bl	10550 <_malloc_r>
   1a6f2:	b1a8      	cbz	r0, 1a720 <__submore+0x70>
   1a6f4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
   1a6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a6fc:	e9c4 020c 	strd	r0, r2, [r4, #48]	; 0x30
   1a700:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   1a704:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   1a708:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   1a70c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1a710:	f880 23fd 	strb.w	r2, [r0, #1021]	; 0x3fd
   1a714:	f200 33fd 	addw	r3, r0, #1021	; 0x3fd
   1a718:	6023      	str	r3, [r4, #0]
   1a71a:	2000      	movs	r0, #0
   1a71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a720:	f04f 30ff 	mov.w	r0, #4294967295
   1a724:	e7df      	b.n	1a6e6 <__submore+0x36>
   1a726:	bf00      	nop

0001a728 <__swsetup_r>:
   1a728:	b538      	push	{r3, r4, r5, lr}
   1a72a:	4b31      	ldr	r3, [pc, #196]	; (1a7f0 <__swsetup_r+0xc8>)
   1a72c:	681b      	ldr	r3, [r3, #0]
   1a72e:	4605      	mov	r5, r0
   1a730:	460c      	mov	r4, r1
   1a732:	b113      	cbz	r3, 1a73a <__swsetup_r+0x12>
   1a734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a736:	2a00      	cmp	r2, #0
   1a738:	d04e      	beq.n	1a7d8 <__swsetup_r+0xb0>
   1a73a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a73e:	0718      	lsls	r0, r3, #28
   1a740:	b29a      	uxth	r2, r3
   1a742:	d51c      	bpl.n	1a77e <__swsetup_r+0x56>
   1a744:	6921      	ldr	r1, [r4, #16]
   1a746:	b329      	cbz	r1, 1a794 <__swsetup_r+0x6c>
   1a748:	f012 0001 	ands.w	r0, r2, #1
   1a74c:	d007      	beq.n	1a75e <__swsetup_r+0x36>
   1a74e:	2000      	movs	r0, #0
   1a750:	60a0      	str	r0, [r4, #8]
   1a752:	6960      	ldr	r0, [r4, #20]
   1a754:	4240      	negs	r0, r0
   1a756:	61a0      	str	r0, [r4, #24]
   1a758:	b139      	cbz	r1, 1a76a <__swsetup_r+0x42>
   1a75a:	2000      	movs	r0, #0
   1a75c:	bd38      	pop	{r3, r4, r5, pc}
   1a75e:	0795      	lsls	r5, r2, #30
   1a760:	bf58      	it	pl
   1a762:	6960      	ldrpl	r0, [r4, #20]
   1a764:	60a0      	str	r0, [r4, #8]
   1a766:	2900      	cmp	r1, #0
   1a768:	d1f7      	bne.n	1a75a <__swsetup_r+0x32>
   1a76a:	0612      	lsls	r2, r2, #24
   1a76c:	bf58      	it	pl
   1a76e:	4608      	movpl	r0, r1
   1a770:	d5f4      	bpl.n	1a75c <__swsetup_r+0x34>
   1a772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a776:	81a3      	strh	r3, [r4, #12]
   1a778:	f04f 30ff 	mov.w	r0, #4294967295
   1a77c:	bd38      	pop	{r3, r4, r5, pc}
   1a77e:	06d1      	lsls	r1, r2, #27
   1a780:	d52e      	bpl.n	1a7e0 <__swsetup_r+0xb8>
   1a782:	0752      	lsls	r2, r2, #29
   1a784:	d414      	bmi.n	1a7b0 <__swsetup_r+0x88>
   1a786:	6921      	ldr	r1, [r4, #16]
   1a788:	f043 0308 	orr.w	r3, r3, #8
   1a78c:	81a3      	strh	r3, [r4, #12]
   1a78e:	b29a      	uxth	r2, r3
   1a790:	2900      	cmp	r1, #0
   1a792:	d1d9      	bne.n	1a748 <__swsetup_r+0x20>
   1a794:	f402 7020 	and.w	r0, r2, #640	; 0x280
   1a798:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1a79c:	d0d4      	beq.n	1a748 <__swsetup_r+0x20>
   1a79e:	4621      	mov	r1, r4
   1a7a0:	4628      	mov	r0, r5
   1a7a2:	f000 f977 	bl	1aa94 <__smakebuf_r>
   1a7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a7aa:	6921      	ldr	r1, [r4, #16]
   1a7ac:	b29a      	uxth	r2, r3
   1a7ae:	e7cb      	b.n	1a748 <__swsetup_r+0x20>
   1a7b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a7b2:	b151      	cbz	r1, 1a7ca <__swsetup_r+0xa2>
   1a7b4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1a7b8:	4291      	cmp	r1, r2
   1a7ba:	d004      	beq.n	1a7c6 <__swsetup_r+0x9e>
   1a7bc:	4628      	mov	r0, r5
   1a7be:	f7f8 fb31 	bl	12e24 <_free_r>
   1a7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a7c6:	2200      	movs	r2, #0
   1a7c8:	6322      	str	r2, [r4, #48]	; 0x30
   1a7ca:	6921      	ldr	r1, [r4, #16]
   1a7cc:	2200      	movs	r2, #0
   1a7ce:	e9c4 1200 	strd	r1, r2, [r4]
   1a7d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1a7d6:	e7d7      	b.n	1a788 <__swsetup_r+0x60>
   1a7d8:	4618      	mov	r0, r3
   1a7da:	f7f7 fbf1 	bl	11fc0 <__sinit>
   1a7de:	e7ac      	b.n	1a73a <__swsetup_r+0x12>
   1a7e0:	2209      	movs	r2, #9
   1a7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a7e6:	602a      	str	r2, [r5, #0]
   1a7e8:	f04f 30ff 	mov.w	r0, #4294967295
   1a7ec:	81a3      	strh	r3, [r4, #12]
   1a7ee:	bd38      	pop	{r3, r4, r5, pc}
   1a7f0:	200094fc 	.word	0x200094fc

0001a7f4 <__fputwc>:
   1a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7f8:	b082      	sub	sp, #8
   1a7fa:	4682      	mov	sl, r0
   1a7fc:	4688      	mov	r8, r1
   1a7fe:	4614      	mov	r4, r2
   1a800:	f7f7 ff36 	bl	12670 <__locale_mb_cur_max>
   1a804:	2801      	cmp	r0, #1
   1a806:	d103      	bne.n	1a810 <__fputwc+0x1c>
   1a808:	f108 33ff 	add.w	r3, r8, #4294967295
   1a80c:	2bfe      	cmp	r3, #254	; 0xfe
   1a80e:	d936      	bls.n	1a87e <__fputwc+0x8a>
   1a810:	f10d 0904 	add.w	r9, sp, #4
   1a814:	4642      	mov	r2, r8
   1a816:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   1a81a:	4649      	mov	r1, r9
   1a81c:	4650      	mov	r0, sl
   1a81e:	f7fe fb29 	bl	18e74 <_wcrtomb_r>
   1a822:	1c42      	adds	r2, r0, #1
   1a824:	4606      	mov	r6, r0
   1a826:	d032      	beq.n	1a88e <__fputwc+0x9a>
   1a828:	b320      	cbz	r0, 1a874 <__fputwc+0x80>
   1a82a:	f89d c004 	ldrb.w	ip, [sp, #4]
   1a82e:	2500      	movs	r5, #0
   1a830:	e009      	b.n	1a846 <__fputwc+0x52>
   1a832:	6823      	ldr	r3, [r4, #0]
   1a834:	1c5a      	adds	r2, r3, #1
   1a836:	6022      	str	r2, [r4, #0]
   1a838:	f883 c000 	strb.w	ip, [r3]
   1a83c:	3501      	adds	r5, #1
   1a83e:	42b5      	cmp	r5, r6
   1a840:	d218      	bcs.n	1a874 <__fputwc+0x80>
   1a842:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1a846:	68a3      	ldr	r3, [r4, #8]
   1a848:	3b01      	subs	r3, #1
   1a84a:	2b00      	cmp	r3, #0
   1a84c:	60a3      	str	r3, [r4, #8]
   1a84e:	daf0      	bge.n	1a832 <__fputwc+0x3e>
   1a850:	69a7      	ldr	r7, [r4, #24]
   1a852:	42bb      	cmp	r3, r7
   1a854:	4661      	mov	r1, ip
   1a856:	4622      	mov	r2, r4
   1a858:	4650      	mov	r0, sl
   1a85a:	db02      	blt.n	1a862 <__fputwc+0x6e>
   1a85c:	f1bc 0f0a 	cmp.w	ip, #10
   1a860:	d1e7      	bne.n	1a832 <__fputwc+0x3e>
   1a862:	f000 f983 	bl	1ab6c <__swbuf_r>
   1a866:	1c43      	adds	r3, r0, #1
   1a868:	d1e8      	bne.n	1a83c <__fputwc+0x48>
   1a86a:	4606      	mov	r6, r0
   1a86c:	4630      	mov	r0, r6
   1a86e:	b002      	add	sp, #8
   1a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a874:	4646      	mov	r6, r8
   1a876:	4630      	mov	r0, r6
   1a878:	b002      	add	sp, #8
   1a87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a87e:	fa5f fc88 	uxtb.w	ip, r8
   1a882:	f88d c004 	strb.w	ip, [sp, #4]
   1a886:	4606      	mov	r6, r0
   1a888:	f10d 0904 	add.w	r9, sp, #4
   1a88c:	e7cf      	b.n	1a82e <__fputwc+0x3a>
   1a88e:	89a3      	ldrh	r3, [r4, #12]
   1a890:	4630      	mov	r0, r6
   1a892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a896:	81a3      	strh	r3, [r4, #12]
   1a898:	b002      	add	sp, #8
   1a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a89e:	bf00      	nop

0001a8a0 <_fputwc_r>:
   1a8a0:	b530      	push	{r4, r5, lr}
   1a8a2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1a8a4:	f013 0f01 	tst.w	r3, #1
   1a8a8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   1a8ac:	4614      	mov	r4, r2
   1a8ae:	b083      	sub	sp, #12
   1a8b0:	4605      	mov	r5, r0
   1a8b2:	b29a      	uxth	r2, r3
   1a8b4:	d101      	bne.n	1a8ba <_fputwc_r+0x1a>
   1a8b6:	0598      	lsls	r0, r3, #22
   1a8b8:	d51c      	bpl.n	1a8f4 <_fputwc_r+0x54>
   1a8ba:	0490      	lsls	r0, r2, #18
   1a8bc:	d406      	bmi.n	1a8cc <_fputwc_r+0x2c>
   1a8be:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a8c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1a8c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1a8c8:	81a3      	strh	r3, [r4, #12]
   1a8ca:	6662      	str	r2, [r4, #100]	; 0x64
   1a8cc:	4622      	mov	r2, r4
   1a8ce:	4628      	mov	r0, r5
   1a8d0:	f7ff ff90 	bl	1a7f4 <__fputwc>
   1a8d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a8d6:	07da      	lsls	r2, r3, #31
   1a8d8:	4605      	mov	r5, r0
   1a8da:	d402      	bmi.n	1a8e2 <_fputwc_r+0x42>
   1a8dc:	89a3      	ldrh	r3, [r4, #12]
   1a8de:	059b      	lsls	r3, r3, #22
   1a8e0:	d502      	bpl.n	1a8e8 <_fputwc_r+0x48>
   1a8e2:	4628      	mov	r0, r5
   1a8e4:	b003      	add	sp, #12
   1a8e6:	bd30      	pop	{r4, r5, pc}
   1a8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a8ea:	f7f7 ff5d 	bl	127a8 <__retarget_lock_release_recursive>
   1a8ee:	4628      	mov	r0, r5
   1a8f0:	b003      	add	sp, #12
   1a8f2:	bd30      	pop	{r4, r5, pc}
   1a8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a8f6:	9101      	str	r1, [sp, #4]
   1a8f8:	f7f7 ff54 	bl	127a4 <__retarget_lock_acquire_recursive>
   1a8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1a900:	9901      	ldr	r1, [sp, #4]
   1a902:	b29a      	uxth	r2, r3
   1a904:	e7d9      	b.n	1a8ba <_fputwc_r+0x1a>
   1a906:	bf00      	nop

0001a908 <_wcsnrtombs_l>:
   1a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a90c:	b08b      	sub	sp, #44	; 0x2c
   1a90e:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   1a912:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1a914:	9103      	str	r1, [sp, #12]
   1a916:	4681      	mov	r9, r0
   1a918:	9205      	str	r2, [sp, #20]
   1a91a:	461e      	mov	r6, r3
   1a91c:	f1b8 0f00 	cmp.w	r8, #0
   1a920:	d05c      	beq.n	1a9dc <_wcsnrtombs_l+0xd4>
   1a922:	9b03      	ldr	r3, [sp, #12]
   1a924:	2b00      	cmp	r3, #0
   1a926:	d05e      	beq.n	1a9e6 <_wcsnrtombs_l+0xde>
   1a928:	9b05      	ldr	r3, [sp, #20]
   1a92a:	681d      	ldr	r5, [r3, #0]
   1a92c:	2f00      	cmp	r7, #0
   1a92e:	d06a      	beq.n	1aa06 <_wcsnrtombs_l+0xfe>
   1a930:	1e74      	subs	r4, r6, #1
   1a932:	b34e      	cbz	r6, 1a988 <_wcsnrtombs_l+0x80>
   1a934:	9b03      	ldr	r3, [sp, #12]
   1a936:	9304      	str	r3, [sp, #16]
   1a938:	3d04      	subs	r5, #4
   1a93a:	2600      	movs	r6, #0
   1a93c:	9501      	str	r5, [sp, #4]
   1a93e:	e00b      	b.n	1a958 <_wcsnrtombs_l+0x50>
   1a940:	9b03      	ldr	r3, [sp, #12]
   1a942:	bb2b      	cbnz	r3, 1a990 <_wcsnrtombs_l+0x88>
   1a944:	9b01      	ldr	r3, [sp, #4]
   1a946:	681a      	ldr	r2, [r3, #0]
   1a948:	2a00      	cmp	r2, #0
   1a94a:	d03a      	beq.n	1a9c2 <_wcsnrtombs_l+0xba>
   1a94c:	45bc      	cmp	ip, r7
   1a94e:	d25c      	bcs.n	1aa0a <_wcsnrtombs_l+0x102>
   1a950:	3c01      	subs	r4, #1
   1a952:	1c63      	adds	r3, r4, #1
   1a954:	4666      	mov	r6, ip
   1a956:	d017      	beq.n	1a988 <_wcsnrtombs_l+0x80>
   1a958:	f8d8 3000 	ldr.w	r3, [r8]
   1a95c:	9302      	str	r3, [sp, #8]
   1a95e:	9b01      	ldr	r3, [sp, #4]
   1a960:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   1a964:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1a968:	9301      	str	r3, [sp, #4]
   1a96a:	a907      	add	r1, sp, #28
   1a96c:	4643      	mov	r3, r8
   1a96e:	4648      	mov	r0, r9
   1a970:	f8d8 b004 	ldr.w	fp, [r8, #4]
   1a974:	47a8      	blx	r5
   1a976:	1c42      	adds	r2, r0, #1
   1a978:	d03a      	beq.n	1a9f0 <_wcsnrtombs_l+0xe8>
   1a97a:	eb00 0c06 	add.w	ip, r0, r6
   1a97e:	45bc      	cmp	ip, r7
   1a980:	d9de      	bls.n	1a940 <_wcsnrtombs_l+0x38>
   1a982:	9b02      	ldr	r3, [sp, #8]
   1a984:	e9c8 3b00 	strd	r3, fp, [r8]
   1a988:	4630      	mov	r0, r6
   1a98a:	b00b      	add	sp, #44	; 0x2c
   1a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a990:	2800      	cmp	r0, #0
   1a992:	dd0e      	ble.n	1a9b2 <_wcsnrtombs_l+0xaa>
   1a994:	9b04      	ldr	r3, [sp, #16]
   1a996:	9d01      	ldr	r5, [sp, #4]
   1a998:	4418      	add	r0, r3
   1a99a:	1e5a      	subs	r2, r3, #1
   1a99c:	a907      	add	r1, sp, #28
   1a99e:	f100 3eff 	add.w	lr, r0, #4294967295
   1a9a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1a9a6:	f802 3f01 	strb.w	r3, [r2, #1]!
   1a9aa:	4572      	cmp	r2, lr
   1a9ac:	d1f9      	bne.n	1a9a2 <_wcsnrtombs_l+0x9a>
   1a9ae:	9501      	str	r5, [sp, #4]
   1a9b0:	9004      	str	r0, [sp, #16]
   1a9b2:	9b05      	ldr	r3, [sp, #20]
   1a9b4:	681a      	ldr	r2, [r3, #0]
   1a9b6:	3204      	adds	r2, #4
   1a9b8:	601a      	str	r2, [r3, #0]
   1a9ba:	9b01      	ldr	r3, [sp, #4]
   1a9bc:	681a      	ldr	r2, [r3, #0]
   1a9be:	2a00      	cmp	r2, #0
   1a9c0:	d1c4      	bne.n	1a94c <_wcsnrtombs_l+0x44>
   1a9c2:	9b03      	ldr	r3, [sp, #12]
   1a9c4:	b10b      	cbz	r3, 1a9ca <_wcsnrtombs_l+0xc2>
   1a9c6:	9b05      	ldr	r3, [sp, #20]
   1a9c8:	601a      	str	r2, [r3, #0]
   1a9ca:	f10c 36ff 	add.w	r6, ip, #4294967295
   1a9ce:	2200      	movs	r2, #0
   1a9d0:	4630      	mov	r0, r6
   1a9d2:	f8c8 2000 	str.w	r2, [r8]
   1a9d6:	b00b      	add	sp, #44	; 0x2c
   1a9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9dc:	9b03      	ldr	r3, [sp, #12]
   1a9de:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1a9e2:	2b00      	cmp	r3, #0
   1a9e4:	d1a0      	bne.n	1a928 <_wcsnrtombs_l+0x20>
   1a9e6:	9b05      	ldr	r3, [sp, #20]
   1a9e8:	f04f 37ff 	mov.w	r7, #4294967295
   1a9ec:	681d      	ldr	r5, [r3, #0]
   1a9ee:	e79f      	b.n	1a930 <_wcsnrtombs_l+0x28>
   1a9f0:	4606      	mov	r6, r0
   1a9f2:	218a      	movs	r1, #138	; 0x8a
   1a9f4:	2200      	movs	r2, #0
   1a9f6:	4630      	mov	r0, r6
   1a9f8:	f8c9 1000 	str.w	r1, [r9]
   1a9fc:	f8c8 2000 	str.w	r2, [r8]
   1aa00:	b00b      	add	sp, #44	; 0x2c
   1aa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa06:	463e      	mov	r6, r7
   1aa08:	e7be      	b.n	1a988 <_wcsnrtombs_l+0x80>
   1aa0a:	4666      	mov	r6, ip
   1aa0c:	e7bc      	b.n	1a988 <_wcsnrtombs_l+0x80>
   1aa0e:	bf00      	nop

0001aa10 <_wcsnrtombs_r>:
   1aa10:	b510      	push	{r4, lr}
   1aa12:	b084      	sub	sp, #16
   1aa14:	4c05      	ldr	r4, [pc, #20]	; (1aa2c <_wcsnrtombs_r+0x1c>)
   1aa16:	9806      	ldr	r0, [sp, #24]
   1aa18:	9000      	str	r0, [sp, #0]
   1aa1a:	9807      	ldr	r0, [sp, #28]
   1aa1c:	9001      	str	r0, [sp, #4]
   1aa1e:	4804      	ldr	r0, [pc, #16]	; (1aa30 <_wcsnrtombs_r+0x20>)
   1aa20:	6800      	ldr	r0, [r0, #0]
   1aa22:	9402      	str	r4, [sp, #8]
   1aa24:	f7ff ff70 	bl	1a908 <_wcsnrtombs_l>
   1aa28:	b004      	add	sp, #16
   1aa2a:	bd10      	pop	{r4, pc}
   1aa2c:	20008f74 	.word	0x20008f74
   1aa30:	200094fc 	.word	0x200094fc

0001aa34 <category>:
   1aa34:	4b15      	ldr	r3, [pc, #84]	; (1aa8c <category+0x58>)
   1aa36:	4298      	cmp	r0, r3
   1aa38:	d823      	bhi.n	1aa82 <category+0x4e>
   1aa3a:	b570      	push	{r4, r5, r6, lr}
   1aa3c:	4e14      	ldr	r6, [pc, #80]	; (1aa90 <category+0x5c>)
   1aa3e:	f04f 0e00 	mov.w	lr, #0
   1aa42:	f640 04db 	movw	r4, #2267	; 0x8db
   1aa46:	e003      	b.n	1aa50 <category+0x1c>
   1aa48:	f102 0e01 	add.w	lr, r2, #1
   1aa4c:	45a6      	cmp	lr, r4
   1aa4e:	dc16      	bgt.n	1aa7e <category+0x4a>
   1aa50:	eb04 020e 	add.w	r2, r4, lr
   1aa54:	f022 0301 	bic.w	r3, r2, #1
   1aa58:	eb03 0362 	add.w	r3, r3, r2, asr #1
   1aa5c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1aa60:	1052      	asrs	r2, r2, #1
   1aa62:	7859      	ldrb	r1, [r3, #1]
   1aa64:	885d      	ldrh	r5, [r3, #2]
   1aa66:	f8b3 c004 	ldrh.w	ip, [r3, #4]
   1aa6a:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1aa6e:	448c      	add	ip, r1
   1aa70:	4560      	cmp	r0, ip
   1aa72:	d8e9      	bhi.n	1aa48 <category+0x14>
   1aa74:	4288      	cmp	r0, r1
   1aa76:	d206      	bcs.n	1aa86 <category+0x52>
   1aa78:	1e54      	subs	r4, r2, #1
   1aa7a:	45a6      	cmp	lr, r4
   1aa7c:	dde8      	ble.n	1aa50 <category+0x1c>
   1aa7e:	20ff      	movs	r0, #255	; 0xff
   1aa80:	bd70      	pop	{r4, r5, r6, pc}
   1aa82:	20ff      	movs	r0, #255	; 0xff
   1aa84:	4770      	bx	lr
   1aa86:	7818      	ldrb	r0, [r3, #0]
   1aa88:	bd70      	pop	{r4, r5, r6, pc}
   1aa8a:	bf00      	nop
   1aa8c:	000e01ef 	.word	0x000e01ef
   1aa90:	20002cb8 	.word	0x20002cb8

0001aa94 <__smakebuf_r>:
   1aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa98:	898b      	ldrh	r3, [r1, #12]
   1aa9a:	460c      	mov	r4, r1
   1aa9c:	0799      	lsls	r1, r3, #30
   1aa9e:	b096      	sub	sp, #88	; 0x58
   1aaa0:	d508      	bpl.n	1aab4 <__smakebuf_r+0x20>
   1aaa2:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1aaa6:	2201      	movs	r2, #1
   1aaa8:	e9c4 3204 	strd	r3, r2, [r4, #16]
   1aaac:	6023      	str	r3, [r4, #0]
   1aaae:	b016      	add	sp, #88	; 0x58
   1aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1aab8:	2900      	cmp	r1, #0
   1aaba:	4606      	mov	r6, r0
   1aabc:	db25      	blt.n	1ab0a <__smakebuf_r+0x76>
   1aabe:	466a      	mov	r2, sp
   1aac0:	f000 f8ac 	bl	1ac1c <_fstat_r>
   1aac4:	2800      	cmp	r0, #0
   1aac6:	db1f      	blt.n	1ab08 <__smakebuf_r+0x74>
   1aac8:	9d01      	ldr	r5, [sp, #4]
   1aaca:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1aace:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1aad2:	fab5 f585 	clz	r5, r5
   1aad6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1aada:	096d      	lsrs	r5, r5, #5
   1aadc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1aae0:	4641      	mov	r1, r8
   1aae2:	4630      	mov	r0, r6
   1aae4:	f7f5 fd34 	bl	10550 <_malloc_r>
   1aae8:	b1e0      	cbz	r0, 1ab24 <__smakebuf_r+0x90>
   1aaea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1aaee:	f8c4 8014 	str.w	r8, [r4, #20]
   1aaf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1aaf6:	6020      	str	r0, [r4, #0]
   1aaf8:	6120      	str	r0, [r4, #16]
   1aafa:	81a3      	strh	r3, [r4, #12]
   1aafc:	bb35      	cbnz	r5, 1ab4c <__smakebuf_r+0xb8>
   1aafe:	433b      	orrs	r3, r7
   1ab00:	81a3      	strh	r3, [r4, #12]
   1ab02:	b016      	add	sp, #88	; 0x58
   1ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab08:	89a3      	ldrh	r3, [r4, #12]
   1ab0a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1ab0e:	d019      	beq.n	1ab44 <__smakebuf_r+0xb0>
   1ab10:	f04f 0840 	mov.w	r8, #64	; 0x40
   1ab14:	2500      	movs	r5, #0
   1ab16:	4641      	mov	r1, r8
   1ab18:	4630      	mov	r0, r6
   1ab1a:	462f      	mov	r7, r5
   1ab1c:	f7f5 fd18 	bl	10550 <_malloc_r>
   1ab20:	2800      	cmp	r0, #0
   1ab22:	d1e2      	bne.n	1aaea <__smakebuf_r+0x56>
   1ab24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ab28:	059a      	lsls	r2, r3, #22
   1ab2a:	d4c0      	bmi.n	1aaae <__smakebuf_r+0x1a>
   1ab2c:	f023 0303 	bic.w	r3, r3, #3
   1ab30:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1ab34:	f043 0302 	orr.w	r3, r3, #2
   1ab38:	2101      	movs	r1, #1
   1ab3a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1ab3e:	81a3      	strh	r3, [r4, #12]
   1ab40:	6022      	str	r2, [r4, #0]
   1ab42:	e7b4      	b.n	1aaae <__smakebuf_r+0x1a>
   1ab44:	f44f 6880 	mov.w	r8, #1024	; 0x400
   1ab48:	462f      	mov	r7, r5
   1ab4a:	e7c9      	b.n	1aae0 <__smakebuf_r+0x4c>
   1ab4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1ab50:	4630      	mov	r0, r6
   1ab52:	f000 f879 	bl	1ac48 <_isatty_r>
   1ab56:	b910      	cbnz	r0, 1ab5e <__smakebuf_r+0xca>
   1ab58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ab5c:	e7cf      	b.n	1aafe <__smakebuf_r+0x6a>
   1ab5e:	89a3      	ldrh	r3, [r4, #12]
   1ab60:	f023 0303 	bic.w	r3, r3, #3
   1ab64:	f043 0301 	orr.w	r3, r3, #1
   1ab68:	b21b      	sxth	r3, r3
   1ab6a:	e7c8      	b.n	1aafe <__smakebuf_r+0x6a>

0001ab6c <__swbuf_r>:
   1ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab6e:	460d      	mov	r5, r1
   1ab70:	4614      	mov	r4, r2
   1ab72:	4606      	mov	r6, r0
   1ab74:	b110      	cbz	r0, 1ab7c <__swbuf_r+0x10>
   1ab76:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1ab78:	2b00      	cmp	r3, #0
   1ab7a:	d04c      	beq.n	1ac16 <__swbuf_r+0xaa>
   1ab7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ab80:	69a3      	ldr	r3, [r4, #24]
   1ab82:	60a3      	str	r3, [r4, #8]
   1ab84:	0717      	lsls	r7, r2, #28
   1ab86:	b290      	uxth	r0, r2
   1ab88:	d51b      	bpl.n	1abc2 <__swbuf_r+0x56>
   1ab8a:	6923      	ldr	r3, [r4, #16]
   1ab8c:	b1cb      	cbz	r3, 1abc2 <__swbuf_r+0x56>
   1ab8e:	b2ed      	uxtb	r5, r5
   1ab90:	0481      	lsls	r1, r0, #18
   1ab92:	462f      	mov	r7, r5
   1ab94:	d522      	bpl.n	1abdc <__swbuf_r+0x70>
   1ab96:	6822      	ldr	r2, [r4, #0]
   1ab98:	6961      	ldr	r1, [r4, #20]
   1ab9a:	1ad3      	subs	r3, r2, r3
   1ab9c:	4299      	cmp	r1, r3
   1ab9e:	dd29      	ble.n	1abf4 <__swbuf_r+0x88>
   1aba0:	3301      	adds	r3, #1
   1aba2:	68a1      	ldr	r1, [r4, #8]
   1aba4:	3901      	subs	r1, #1
   1aba6:	60a1      	str	r1, [r4, #8]
   1aba8:	1c51      	adds	r1, r2, #1
   1abaa:	6021      	str	r1, [r4, #0]
   1abac:	7015      	strb	r5, [r2, #0]
   1abae:	6962      	ldr	r2, [r4, #20]
   1abb0:	429a      	cmp	r2, r3
   1abb2:	d027      	beq.n	1ac04 <__swbuf_r+0x98>
   1abb4:	89a3      	ldrh	r3, [r4, #12]
   1abb6:	07db      	lsls	r3, r3, #31
   1abb8:	d501      	bpl.n	1abbe <__swbuf_r+0x52>
   1abba:	2d0a      	cmp	r5, #10
   1abbc:	d022      	beq.n	1ac04 <__swbuf_r+0x98>
   1abbe:	4638      	mov	r0, r7
   1abc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1abc2:	4621      	mov	r1, r4
   1abc4:	4630      	mov	r0, r6
   1abc6:	f7ff fdaf 	bl	1a728 <__swsetup_r>
   1abca:	bb08      	cbnz	r0, 1ac10 <__swbuf_r+0xa4>
   1abcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1abd0:	6923      	ldr	r3, [r4, #16]
   1abd2:	b290      	uxth	r0, r2
   1abd4:	b2ed      	uxtb	r5, r5
   1abd6:	0481      	lsls	r1, r0, #18
   1abd8:	462f      	mov	r7, r5
   1abda:	d4dc      	bmi.n	1ab96 <__swbuf_r+0x2a>
   1abdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1abe0:	81a2      	strh	r2, [r4, #12]
   1abe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1abe4:	6961      	ldr	r1, [r4, #20]
   1abe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1abea:	6662      	str	r2, [r4, #100]	; 0x64
   1abec:	6822      	ldr	r2, [r4, #0]
   1abee:	1ad3      	subs	r3, r2, r3
   1abf0:	4299      	cmp	r1, r3
   1abf2:	dcd5      	bgt.n	1aba0 <__swbuf_r+0x34>
   1abf4:	4621      	mov	r1, r4
   1abf6:	4630      	mov	r0, r6
   1abf8:	f7fc fea0 	bl	1793c <_fflush_r>
   1abfc:	b940      	cbnz	r0, 1ac10 <__swbuf_r+0xa4>
   1abfe:	6822      	ldr	r2, [r4, #0]
   1ac00:	2301      	movs	r3, #1
   1ac02:	e7ce      	b.n	1aba2 <__swbuf_r+0x36>
   1ac04:	4621      	mov	r1, r4
   1ac06:	4630      	mov	r0, r6
   1ac08:	f7fc fe98 	bl	1793c <_fflush_r>
   1ac0c:	2800      	cmp	r0, #0
   1ac0e:	d0d6      	beq.n	1abbe <__swbuf_r+0x52>
   1ac10:	f04f 37ff 	mov.w	r7, #4294967295
   1ac14:	e7d3      	b.n	1abbe <__swbuf_r+0x52>
   1ac16:	f7f7 f9d3 	bl	11fc0 <__sinit>
   1ac1a:	e7af      	b.n	1ab7c <__swbuf_r+0x10>

0001ac1c <_fstat_r>:
   1ac1c:	b570      	push	{r4, r5, r6, lr}
   1ac1e:	460c      	mov	r4, r1
   1ac20:	4d08      	ldr	r5, [pc, #32]	; (1ac44 <_fstat_r+0x28>)
   1ac22:	4603      	mov	r3, r0
   1ac24:	2600      	movs	r6, #0
   1ac26:	4620      	mov	r0, r4
   1ac28:	4611      	mov	r1, r2
   1ac2a:	461c      	mov	r4, r3
   1ac2c:	602e      	str	r6, [r5, #0]
   1ac2e:	f7f3 ff01 	bl	ea34 <_fstat>
   1ac32:	1c43      	adds	r3, r0, #1
   1ac34:	d000      	beq.n	1ac38 <_fstat_r+0x1c>
   1ac36:	bd70      	pop	{r4, r5, r6, pc}
   1ac38:	682b      	ldr	r3, [r5, #0]
   1ac3a:	2b00      	cmp	r3, #0
   1ac3c:	d0fb      	beq.n	1ac36 <_fstat_r+0x1a>
   1ac3e:	6023      	str	r3, [r4, #0]
   1ac40:	bd70      	pop	{r4, r5, r6, pc}
   1ac42:	bf00      	nop
   1ac44:	200192f0 	.word	0x200192f0

0001ac48 <_isatty_r>:
   1ac48:	b538      	push	{r3, r4, r5, lr}
   1ac4a:	4d07      	ldr	r5, [pc, #28]	; (1ac68 <_isatty_r+0x20>)
   1ac4c:	2200      	movs	r2, #0
   1ac4e:	4604      	mov	r4, r0
   1ac50:	4608      	mov	r0, r1
   1ac52:	602a      	str	r2, [r5, #0]
   1ac54:	f7f3 fef4 	bl	ea40 <_isatty>
   1ac58:	1c43      	adds	r3, r0, #1
   1ac5a:	d000      	beq.n	1ac5e <_isatty_r+0x16>
   1ac5c:	bd38      	pop	{r3, r4, r5, pc}
   1ac5e:	682b      	ldr	r3, [r5, #0]
   1ac60:	2b00      	cmp	r3, #0
   1ac62:	d0fb      	beq.n	1ac5c <_isatty_r+0x14>
   1ac64:	6023      	str	r3, [r4, #0]
   1ac66:	bd38      	pop	{r3, r4, r5, pc}
   1ac68:	200192f0 	.word	0x200192f0

0001ac6c <__aeabi_drsub>:
   1ac6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1ac70:	e002      	b.n	1ac78 <__adddf3>
   1ac72:	bf00      	nop

0001ac74 <__aeabi_dsub>:
   1ac74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001ac78 <__adddf3>:
   1ac78:	b530      	push	{r4, r5, lr}
   1ac7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1ac7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1ac82:	ea94 0f05 	teq	r4, r5
   1ac86:	bf08      	it	eq
   1ac88:	ea90 0f02 	teqeq	r0, r2
   1ac8c:	bf1f      	itttt	ne
   1ac8e:	ea54 0c00 	orrsne.w	ip, r4, r0
   1ac92:	ea55 0c02 	orrsne.w	ip, r5, r2
   1ac96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1ac9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1ac9e:	f000 80e2 	beq.w	1ae66 <__adddf3+0x1ee>
   1aca2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1aca6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1acaa:	bfb8      	it	lt
   1acac:	426d      	neglt	r5, r5
   1acae:	dd0c      	ble.n	1acca <__adddf3+0x52>
   1acb0:	442c      	add	r4, r5
   1acb2:	ea80 0202 	eor.w	r2, r0, r2
   1acb6:	ea81 0303 	eor.w	r3, r1, r3
   1acba:	ea82 0000 	eor.w	r0, r2, r0
   1acbe:	ea83 0101 	eor.w	r1, r3, r1
   1acc2:	ea80 0202 	eor.w	r2, r0, r2
   1acc6:	ea81 0303 	eor.w	r3, r1, r3
   1acca:	2d36      	cmp	r5, #54	; 0x36
   1accc:	bf88      	it	hi
   1acce:	bd30      	pophi	{r4, r5, pc}
   1acd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1acd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1acd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1acdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1ace0:	d002      	beq.n	1ace8 <__adddf3+0x70>
   1ace2:	4240      	negs	r0, r0
   1ace4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ace8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1acec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1acf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1acf4:	d002      	beq.n	1acfc <__adddf3+0x84>
   1acf6:	4252      	negs	r2, r2
   1acf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1acfc:	ea94 0f05 	teq	r4, r5
   1ad00:	f000 80a7 	beq.w	1ae52 <__adddf3+0x1da>
   1ad04:	f1a4 0401 	sub.w	r4, r4, #1
   1ad08:	f1d5 0e20 	rsbs	lr, r5, #32
   1ad0c:	db0d      	blt.n	1ad2a <__adddf3+0xb2>
   1ad0e:	fa02 fc0e 	lsl.w	ip, r2, lr
   1ad12:	fa22 f205 	lsr.w	r2, r2, r5
   1ad16:	1880      	adds	r0, r0, r2
   1ad18:	f141 0100 	adc.w	r1, r1, #0
   1ad1c:	fa03 f20e 	lsl.w	r2, r3, lr
   1ad20:	1880      	adds	r0, r0, r2
   1ad22:	fa43 f305 	asr.w	r3, r3, r5
   1ad26:	4159      	adcs	r1, r3
   1ad28:	e00e      	b.n	1ad48 <__adddf3+0xd0>
   1ad2a:	f1a5 0520 	sub.w	r5, r5, #32
   1ad2e:	f10e 0e20 	add.w	lr, lr, #32
   1ad32:	2a01      	cmp	r2, #1
   1ad34:	fa03 fc0e 	lsl.w	ip, r3, lr
   1ad38:	bf28      	it	cs
   1ad3a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1ad3e:	fa43 f305 	asr.w	r3, r3, r5
   1ad42:	18c0      	adds	r0, r0, r3
   1ad44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1ad48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1ad4c:	d507      	bpl.n	1ad5e <__adddf3+0xe6>
   1ad4e:	f04f 0e00 	mov.w	lr, #0
   1ad52:	f1dc 0c00 	rsbs	ip, ip, #0
   1ad56:	eb7e 0000 	sbcs.w	r0, lr, r0
   1ad5a:	eb6e 0101 	sbc.w	r1, lr, r1
   1ad5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1ad62:	d31b      	bcc.n	1ad9c <__adddf3+0x124>
   1ad64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1ad68:	d30c      	bcc.n	1ad84 <__adddf3+0x10c>
   1ad6a:	0849      	lsrs	r1, r1, #1
   1ad6c:	ea5f 0030 	movs.w	r0, r0, rrx
   1ad70:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1ad74:	f104 0401 	add.w	r4, r4, #1
   1ad78:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1ad7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1ad80:	f080 809a 	bcs.w	1aeb8 <__adddf3+0x240>
   1ad84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1ad88:	bf08      	it	eq
   1ad8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ad8e:	f150 0000 	adcs.w	r0, r0, #0
   1ad92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ad96:	ea41 0105 	orr.w	r1, r1, r5
   1ad9a:	bd30      	pop	{r4, r5, pc}
   1ad9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1ada0:	4140      	adcs	r0, r0
   1ada2:	eb41 0101 	adc.w	r1, r1, r1
   1ada6:	3c01      	subs	r4, #1
   1ada8:	bf28      	it	cs
   1adaa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1adae:	d2e9      	bcs.n	1ad84 <__adddf3+0x10c>
   1adb0:	f091 0f00 	teq	r1, #0
   1adb4:	bf04      	itt	eq
   1adb6:	4601      	moveq	r1, r0
   1adb8:	2000      	moveq	r0, #0
   1adba:	fab1 f381 	clz	r3, r1
   1adbe:	bf08      	it	eq
   1adc0:	3320      	addeq	r3, #32
   1adc2:	f1a3 030b 	sub.w	r3, r3, #11
   1adc6:	f1b3 0220 	subs.w	r2, r3, #32
   1adca:	da0c      	bge.n	1ade6 <__adddf3+0x16e>
   1adcc:	320c      	adds	r2, #12
   1adce:	dd08      	ble.n	1ade2 <__adddf3+0x16a>
   1add0:	f102 0c14 	add.w	ip, r2, #20
   1add4:	f1c2 020c 	rsb	r2, r2, #12
   1add8:	fa01 f00c 	lsl.w	r0, r1, ip
   1addc:	fa21 f102 	lsr.w	r1, r1, r2
   1ade0:	e00c      	b.n	1adfc <__adddf3+0x184>
   1ade2:	f102 0214 	add.w	r2, r2, #20
   1ade6:	bfd8      	it	le
   1ade8:	f1c2 0c20 	rsble	ip, r2, #32
   1adec:	fa01 f102 	lsl.w	r1, r1, r2
   1adf0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1adf4:	bfdc      	itt	le
   1adf6:	ea41 010c 	orrle.w	r1, r1, ip
   1adfa:	4090      	lslle	r0, r2
   1adfc:	1ae4      	subs	r4, r4, r3
   1adfe:	bfa2      	ittt	ge
   1ae00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1ae04:	4329      	orrge	r1, r5
   1ae06:	bd30      	popge	{r4, r5, pc}
   1ae08:	ea6f 0404 	mvn.w	r4, r4
   1ae0c:	3c1f      	subs	r4, #31
   1ae0e:	da1c      	bge.n	1ae4a <__adddf3+0x1d2>
   1ae10:	340c      	adds	r4, #12
   1ae12:	dc0e      	bgt.n	1ae32 <__adddf3+0x1ba>
   1ae14:	f104 0414 	add.w	r4, r4, #20
   1ae18:	f1c4 0220 	rsb	r2, r4, #32
   1ae1c:	fa20 f004 	lsr.w	r0, r0, r4
   1ae20:	fa01 f302 	lsl.w	r3, r1, r2
   1ae24:	ea40 0003 	orr.w	r0, r0, r3
   1ae28:	fa21 f304 	lsr.w	r3, r1, r4
   1ae2c:	ea45 0103 	orr.w	r1, r5, r3
   1ae30:	bd30      	pop	{r4, r5, pc}
   1ae32:	f1c4 040c 	rsb	r4, r4, #12
   1ae36:	f1c4 0220 	rsb	r2, r4, #32
   1ae3a:	fa20 f002 	lsr.w	r0, r0, r2
   1ae3e:	fa01 f304 	lsl.w	r3, r1, r4
   1ae42:	ea40 0003 	orr.w	r0, r0, r3
   1ae46:	4629      	mov	r1, r5
   1ae48:	bd30      	pop	{r4, r5, pc}
   1ae4a:	fa21 f004 	lsr.w	r0, r1, r4
   1ae4e:	4629      	mov	r1, r5
   1ae50:	bd30      	pop	{r4, r5, pc}
   1ae52:	f094 0f00 	teq	r4, #0
   1ae56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1ae5a:	bf06      	itte	eq
   1ae5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1ae60:	3401      	addeq	r4, #1
   1ae62:	3d01      	subne	r5, #1
   1ae64:	e74e      	b.n	1ad04 <__adddf3+0x8c>
   1ae66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1ae6a:	bf18      	it	ne
   1ae6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1ae70:	d029      	beq.n	1aec6 <__adddf3+0x24e>
   1ae72:	ea94 0f05 	teq	r4, r5
   1ae76:	bf08      	it	eq
   1ae78:	ea90 0f02 	teqeq	r0, r2
   1ae7c:	d005      	beq.n	1ae8a <__adddf3+0x212>
   1ae7e:	ea54 0c00 	orrs.w	ip, r4, r0
   1ae82:	bf04      	itt	eq
   1ae84:	4619      	moveq	r1, r3
   1ae86:	4610      	moveq	r0, r2
   1ae88:	bd30      	pop	{r4, r5, pc}
   1ae8a:	ea91 0f03 	teq	r1, r3
   1ae8e:	bf1e      	ittt	ne
   1ae90:	2100      	movne	r1, #0
   1ae92:	2000      	movne	r0, #0
   1ae94:	bd30      	popne	{r4, r5, pc}
   1ae96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1ae9a:	d105      	bne.n	1aea8 <__adddf3+0x230>
   1ae9c:	0040      	lsls	r0, r0, #1
   1ae9e:	4149      	adcs	r1, r1
   1aea0:	bf28      	it	cs
   1aea2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1aea6:	bd30      	pop	{r4, r5, pc}
   1aea8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1aeac:	bf3c      	itt	cc
   1aeae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1aeb2:	bd30      	popcc	{r4, r5, pc}
   1aeb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1aeb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1aebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1aec0:	f04f 0000 	mov.w	r0, #0
   1aec4:	bd30      	pop	{r4, r5, pc}
   1aec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1aeca:	bf1a      	itte	ne
   1aecc:	4619      	movne	r1, r3
   1aece:	4610      	movne	r0, r2
   1aed0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1aed4:	bf1c      	itt	ne
   1aed6:	460b      	movne	r3, r1
   1aed8:	4602      	movne	r2, r0
   1aeda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1aede:	bf06      	itte	eq
   1aee0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1aee4:	ea91 0f03 	teqeq	r1, r3
   1aee8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1aeec:	bd30      	pop	{r4, r5, pc}
   1aeee:	bf00      	nop

0001aef0 <__aeabi_ui2d>:
   1aef0:	f090 0f00 	teq	r0, #0
   1aef4:	bf04      	itt	eq
   1aef6:	2100      	moveq	r1, #0
   1aef8:	4770      	bxeq	lr
   1aefa:	b530      	push	{r4, r5, lr}
   1aefc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1af00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1af04:	f04f 0500 	mov.w	r5, #0
   1af08:	f04f 0100 	mov.w	r1, #0
   1af0c:	e750      	b.n	1adb0 <__adddf3+0x138>
   1af0e:	bf00      	nop

0001af10 <__aeabi_i2d>:
   1af10:	f090 0f00 	teq	r0, #0
   1af14:	bf04      	itt	eq
   1af16:	2100      	moveq	r1, #0
   1af18:	4770      	bxeq	lr
   1af1a:	b530      	push	{r4, r5, lr}
   1af1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1af20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1af24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1af28:	bf48      	it	mi
   1af2a:	4240      	negmi	r0, r0
   1af2c:	f04f 0100 	mov.w	r1, #0
   1af30:	e73e      	b.n	1adb0 <__adddf3+0x138>
   1af32:	bf00      	nop

0001af34 <__aeabi_f2d>:
   1af34:	0042      	lsls	r2, r0, #1
   1af36:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1af3a:	ea4f 0131 	mov.w	r1, r1, rrx
   1af3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1af42:	bf1f      	itttt	ne
   1af44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1af48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1af4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1af50:	4770      	bxne	lr
   1af52:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1af56:	bf08      	it	eq
   1af58:	4770      	bxeq	lr
   1af5a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1af5e:	bf04      	itt	eq
   1af60:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1af64:	4770      	bxeq	lr
   1af66:	b530      	push	{r4, r5, lr}
   1af68:	f44f 7460 	mov.w	r4, #896	; 0x380
   1af6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1af70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1af74:	e71c      	b.n	1adb0 <__adddf3+0x138>
   1af76:	bf00      	nop

0001af78 <__aeabi_ul2d>:
   1af78:	ea50 0201 	orrs.w	r2, r0, r1
   1af7c:	bf08      	it	eq
   1af7e:	4770      	bxeq	lr
   1af80:	b530      	push	{r4, r5, lr}
   1af82:	f04f 0500 	mov.w	r5, #0
   1af86:	e00a      	b.n	1af9e <__aeabi_l2d+0x16>

0001af88 <__aeabi_l2d>:
   1af88:	ea50 0201 	orrs.w	r2, r0, r1
   1af8c:	bf08      	it	eq
   1af8e:	4770      	bxeq	lr
   1af90:	b530      	push	{r4, r5, lr}
   1af92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1af96:	d502      	bpl.n	1af9e <__aeabi_l2d+0x16>
   1af98:	4240      	negs	r0, r0
   1af9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1af9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1afa2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1afa6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1afaa:	f43f aed8 	beq.w	1ad5e <__adddf3+0xe6>
   1afae:	f04f 0203 	mov.w	r2, #3
   1afb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1afb6:	bf18      	it	ne
   1afb8:	3203      	addne	r2, #3
   1afba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1afbe:	bf18      	it	ne
   1afc0:	3203      	addne	r2, #3
   1afc2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1afc6:	f1c2 0320 	rsb	r3, r2, #32
   1afca:	fa00 fc03 	lsl.w	ip, r0, r3
   1afce:	fa20 f002 	lsr.w	r0, r0, r2
   1afd2:	fa01 fe03 	lsl.w	lr, r1, r3
   1afd6:	ea40 000e 	orr.w	r0, r0, lr
   1afda:	fa21 f102 	lsr.w	r1, r1, r2
   1afde:	4414      	add	r4, r2
   1afe0:	e6bd      	b.n	1ad5e <__adddf3+0xe6>
   1afe2:	bf00      	nop

0001afe4 <__aeabi_d2lz>:
   1afe4:	b508      	push	{r3, lr}
   1afe6:	4602      	mov	r2, r0
   1afe8:	460b      	mov	r3, r1
   1afea:	ec43 2b17 	vmov	d7, r2, r3
   1afee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   1aff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1aff6:	d403      	bmi.n	1b000 <__aeabi_d2lz+0x1c>
   1aff8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1affc:	f000 b80c 	b.w	1b018 <__aeabi_d2ulz>
   1b000:	eeb1 7b47 	vneg.f64	d7, d7
   1b004:	ec51 0b17 	vmov	r0, r1, d7
   1b008:	f000 f806 	bl	1b018 <__aeabi_d2ulz>
   1b00c:	4240      	negs	r0, r0
   1b00e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1b012:	bd08      	pop	{r3, pc}
   1b014:	0000      	movs	r0, r0
	...

0001b018 <__aeabi_d2ulz>:
   1b018:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 1b048 <__aeabi_d2ulz+0x30>
   1b01c:	ec41 0b17 	vmov	d7, r0, r1
   1b020:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 1b050 <__aeabi_d2ulz+0x38>
   1b024:	ee27 6b06 	vmul.f64	d6, d7, d6
   1b028:	eebc 6bc6 	vcvt.u32.f64	s12, d6
   1b02c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
   1b030:	eea4 7b45 	vfms.f64	d7, d4, d5
   1b034:	eefc 7bc7 	vcvt.u32.f64	s15, d7
   1b038:	ee16 1a10 	vmov	r1, s12
   1b03c:	ee17 0a90 	vmov	r0, s15
   1b040:	4770      	bx	lr
   1b042:	bf00      	nop
   1b044:	f3af 8000 	nop.w
   1b048:	00000000 	.word	0x00000000
   1b04c:	3df00000 	.word	0x3df00000
   1b050:	00000000 	.word	0x00000000
   1b054:	41f00000 	.word	0x41f00000

0001b058 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   1b058:	f85f f000 	ldr.w	pc, [pc]	; 1b05c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1b05c:	6000188d 	.word	0x6000188d

0001b060 <__usb_init_veneer>:
   1b060:	f85f f000 	ldr.w	pc, [pc]	; 1b064 <__usb_init_veneer+0x4>
   1b064:	6000261d 	.word	0x6000261d

0001b068 <___reboot_Teensyduino__veneer>:
   1b068:	f85f f000 	ldr.w	pc, [pc]	; 1b06c <___reboot_Teensyduino__veneer+0x4>
   1b06c:	60002705 	.word	0x60002705

0001b070 <___init_veneer>:
   1b070:	f85f f000 	ldr.w	pc, [pc]	; 1b074 <___init_veneer+0x4>
   1b074:	600027ad 	.word	0x600027ad

0001b078 <___ZN16CrashReportClasscvbEv_veneer>:
   1b078:	f85f f000 	ldr.w	pc, [pc]	; 1b07c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1b07c:	60001f91 	.word	0x60001f91

0001b080 <___ZN7TwoWire5beginEv_veneer>:
   1b080:	f85f f000 	ldr.w	pc, [pc]	; 1b084 <___ZN7TwoWire5beginEv_veneer+0x4>
   1b084:	60001789 	.word	0x60001789
	...

Disassembly of section .fini:

0001b090 <_fini>:
   1b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b092:	bf00      	nop

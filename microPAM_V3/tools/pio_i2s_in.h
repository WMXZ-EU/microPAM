// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// pio_i2s_in48 //
// ------------ //

#define pio_i2s_in48_wrap_target 0
#define pio_i2s_in48_wrap 9

static const uint16_t pio_i2s_in48_program_instructions[] = {
            //     .wrap_target
    0xa042, //  0: nop                    side 0     
    0xa842, //  1: nop                    side 1     
    0xe03d, //  2: set    x, 29           side 0     
    0x4801, //  3: in     pins, 1         side 1     
    0x0043, //  4: jmp    x--, 3          side 0     
    0x4862, //  5: in     null, 2         side 1     
    0xf03e, //  6: set    x, 30           side 2     
    0xb842, //  7: nop                    side 3     
    0x1047, //  8: jmp    x--, 7          side 2     
    0xb842, //  9: nop                    side 3     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_i2s_in48_program = {
    .instructions = pio_i2s_in48_program_instructions,
    .length = 10,
    .origin = -1,
};

static inline pio_sm_config pio_i2s_in48_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_i2s_in48_wrap_target, offset + pio_i2s_in48_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

// ------------ //
// pio_i2s_in96 //
// ------------ //

#define pio_i2s_in96_wrap_target 0
#define pio_i2s_in96_wrap 11

static const uint16_t pio_i2s_in96_program_instructions[] = {
            //     .wrap_target
    0xa042, //  0: nop                    side 0     
    0xa842, //  1: nop                    side 1     
    0xa042, //  2: nop                    side 0     
    0xa842, //  3: nop                    side 1     
    0xe03c, //  4: set    x, 28           side 0     
    0x4801, //  5: in     pins, 1         side 1     
    0x0045, //  6: jmp    x--, 5          side 0     
    0x4863, //  7: in     null, 3         side 1     
    0xf03e, //  8: set    x, 30           side 2     
    0xb842, //  9: nop                    side 3     
    0x1049, // 10: jmp    x--, 9          side 2     
    0xb842, // 11: nop                    side 3     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_i2s_in96_program = {
    .instructions = pio_i2s_in96_program_instructions,
    .length = 12,
    .origin = -1,
};

static inline pio_sm_config pio_i2s_in96_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_i2s_in96_wrap_target, offset + pio_i2s_in96_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

// --------------- //
// pio_i2s_in_left //
// --------------- //

#define pio_i2s_in_left_wrap_target 0
#define pio_i2s_in_left_wrap 7

static const uint16_t pio_i2s_in_left_program_instructions[] = {
            //     .wrap_target
    0xa022, //  0: mov    x, y            side 0     
    0x4801, //  1: in     pins, 1         side 1     
    0x0041, //  2: jmp    x--, 1          side 0     
    0x5801, //  3: in     pins, 1         side 3     
    0xb022, //  4: mov    x, y            side 2     
    0x5861, //  5: in     null, 1         side 3     
    0x1045, //  6: jmp    x--, 5          side 2     
    0x4861, //  7: in     null, 1         side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_i2s_in_left_program = {
    .instructions = pio_i2s_in_left_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config pio_i2s_in_left_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_i2s_in_left_wrap_target, offset + pio_i2s_in_left_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}
#endif

// ----------------- //
// pio_i2s_in_stereo //
// ----------------- //

#define pio_i2s_in_stereo_wrap_target 0
#define pio_i2s_in_stereo_wrap 7

static const uint16_t pio_i2s_in_stereo_program_instructions[] = {
            //     .wrap_target
    0xa022, //  0: mov    x, y            side 0     
    0x4801, //  1: in     pins, 1         side 1     
    0x0041, //  2: jmp    x--, 1          side 0     
    0x5801, //  3: in     pins, 1         side 3     
    0xb022, //  4: mov    x, y            side 2     
    0x5801, //  5: in     pins, 1         side 3     
    0x1045, //  6: jmp    x--, 5          side 2     
    0x4801, //  7: in     pins, 1         side 1     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pio_i2s_in_stereo_program = {
    .instructions = pio_i2s_in_stereo_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config pio_i2s_in_stereo_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pio_i2s_in_stereo_wrap_target, offset + pio_i2s_in_stereo_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

static inline void pio_i2s_in_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base, uint bits, uint mono) {
    pio_gpio_init(pio, data_pin);
    pio_gpio_init(pio, clock_pin_base);
    pio_gpio_init(pio, clock_pin_base + 1);
    //
    if(mono==1)
	pio_sm_config sm_config = pio_i2s_in_left_program_get_default_config(offset);
    else
	pio_sm_config sm_config = pio_i2s_in_stereo_program_get_default_config(offset);
    //
    sm_config_set_in_pins(&sm_config, data_pin);
    sm_config_set_sideset_pins(&sm_config, clock_pin_base);
    sm_config_set_in_shift(&sm_config, false, true, (bits <= 16) ? 2 * bits : bits);
    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_RX);
    //
    pio_sm_init(pio, sm, offset, &sm_config);
    //
    uint pin_mask = 3u << clock_pin_base;
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins
    //
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, bits - 2));
}

#endif

